
rps.elf:     file format elf32-littlenios2
rps.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00021e00 memsz 0x00021e00 flags r-x
    LOAD off    0x00022e20 vaddr 0x00021e20 paddr 0x00023ae0 align 2**12
         filesz 0x00001cc0 memsz 0x00001cc0 flags rw-
    LOAD off    0x000007a0 vaddr 0x000257a0 paddr 0x000257a0 align 2**12
         filesz 0x00000000 memsz 0x00000704 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00020ad8  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000110c  00020d14  00020d14  00021d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc0  00021e20  00023ae0  00022e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000704  000257a0  000257a0  000257a0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00025ea4  00025ea4  00024ae0  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00024ae0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000017d8  00000000  00000000  00024b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00040125  00000000  00000000  000262e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00010527  00000000  00000000  0006640d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00024e46  00000000  00000000  00076934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00003f90  00000000  00000000  0009b77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000066f0  00000000  00000000  0009f70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002d04d  00000000  00000000  000a5dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000020  00000000  00000000  000d2e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003530  00000000  00000000  000d2e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000db459  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000db45c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000db461  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000db462  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000db463  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000db467  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000db46b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000db46f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000db478  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000db481  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  000db48a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  000db499  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000e28d9  00000000  00000000  000db4c5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00020d14 l    d  .rodata	00000000 .rodata
00021e20 l    d  .rwdata	00000000 .rwdata
000257a0 l    d  .bss	00000000 .bss
00025ea4 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/school/Jaar-3/Periode-4/FPGA/FPGA-project/software/rps_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 kiss_fft.c
00000278 l     F .text	00000154 kf_bfly2
000003cc l     F .text	0000049c kf_bfly4
00000868 l     F .text	00000398 kf_bfly3
00000c00 l     F .text	000006a8 kf_bfly5
000012a8 l     F .text	000002cc kf_bfly_generic
00001574 l     F .text	00000228 kf_work
0000179c l     F .text	0000014c kf_factor
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libmfcc.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00021010 l     O .rodata	00000080 npio2_hw
00021090 l     O .rodata	00000108 two_over_pi
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
00021198 l     O .rodata	00000080 npio2_hw
00021218 l     O .rodata	00000318 two_over_pi
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00021570 l     O .rodata	00000010 init_jk
00021530 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
000215ac l     O .rodata	0000000c init_jk
00021580 l     O .rodata	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 math_err.c
00008ba8 l     F .text	00000048 with_errno
00008bf0 l     F .text	00000050 xflow
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00021e20 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
000216f4 l     O .rodata	00000028 tinytens
000216e0 l     O .rodata	00000014 fpi.1
000216cc l     O .rodata	00000014 fpinan.0
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
000110e0 l     F .text	000000c0 __sbprintf
00021770 l     O .rodata	00000010 blanks.1
00021760 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00011304 l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00012f54 l     F .text	00000008 __fp_lock
00012f68 l     F .text	00000008 __fp_unlock
00012f70 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00013ccc l     F .text	000000dc rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lnumeric.c
00023ab4 l     O .rwdata	00000002 numempty
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00021988 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00016950 l     F .text	000000f4 __sprint_r.part.0
00017cc8 l     F .text	000000c0 __sbprintf
00021abc l     O .rodata	00000010 blanks.1
00021aac l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fclose.c
00017fd4 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 unordsf2.c
00000000 l    df *ABS*	00000000 alt_close.c
00019ab8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019bc4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019c28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00019d34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00019e14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00019f7c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a068 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00023ad0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001a6e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001a814 l     F .text	00000034 alt_dev_reg
00022960 l     O .rwdata	00001060 JTAG_UART
000239c0 l     O .rwdata	00000030 AV_Config
000239f0 l     O .rwdata	00000030 Audio_Subsystem_Audio
00023a20 l     O .rwdata	0000002c Char_LCD_16x2
00023a4c l     O .rwdata	0000002c Serial_Port
00023a78 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001e954 l     F .text	00000210 altera_avalon_jtag_uart_irq
0001eb64 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001f1a8 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001fcb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001ff20 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000201cc l     F .text	0000003c alt_get_errno
00020208 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 putc.c
00025810 g     O .bss	00000004 alt_instruction_exception_handler
000257d4 g     O .bss	00000004 aux_status_register
000209a0 g     F .text	00000018 putchar
00016000 g     F .text	00000070 _mprec_log10
000160ec g     F .text	00000060 __any_on
0001842c g     F .text	00000058 _isatty_r
00021994 g     O .rodata	00000028 __mprec_tinytens
0001a178 g     F .text	0000007c alt_main
0000d5c8 g     F .text	000000cc _puts_r
00025da4 g     O .bss	00000100 alt_irq
00018484 g     F .text	00000064 _lseek_r
00003d78 g     F .text	000000c4 log
000040f8 g     F .text	000000ac sqrt
00023ae0 g       *ABS*	00000000 __flash_rwdata_start
0001f318 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000b5a8 g     F .text	00000080 .hidden __eqdf2
0001ac90 g     F .text	000001ac Check_for_Master_Boot_Record
00025ea4 g       *ABS*	00000000 __alt_heap_start
0000f0b4 g     F .text	00000008 strtok_r
00018e84 g     F .text	00000070 .hidden __floatdidf
0001e5c4 g     F .text	00000178 alt_up_sd_card_fclose
00018ca8 g     F .text	00000060 _kill_r
0000d590 g     F .text	00000038 printf
000186b0 g     F .text	0000006c _wcrtomb_r
00018818 g     F .text	00000098 _signal_r
00016764 g     F .text	0000005c __sseek
000132a8 g     F .text	00000010 __sinit
00018550 g     F .text	00000148 __swbuf_r
00014954 g     F .text	00000074 _setlocale_r
000257a4 g     O .bss	00000004 sd_card_dev
000130d8 g     F .text	00000068 __sfmoreglue
0001a218 g     F .text	00000024 __malloc_unlock
0001f9d0 g     F .text	00000090 alt_up_rs232_read_fd
0000ed70 g     F .text	0000000c _strtod_r
000257f8 g     O .bss	00000004 current_sector_modified
00003868 g     F .text	0000011c GetCenterFrequency
00008c64 g     F .text	0000004c .hidden __math_divzero
00014dd0 g     F .text	0000012c memmove
00013294 g     F .text	00000014 _cleanup
00014fec g     F .text	000000a4 _Balloc
0000f010 g     F .text	000000a4 __strtok_r
0000a1d8 g     F .text	00000070 .hidden __fixsfsi
0001d4c4 g     F .text	000000b0 alt_up_sd_card_is_Present
0001a9e4 g     F .text	0000004c Save_Modified_Sector
0000b628 g     F .text	000000e8 .hidden __gtdf2
000205e4 g     F .text	00000024 altera_nios2_gen2_irq_init
0000cc54 g     F .text	0000000c __errno
0001f2a4 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
000257f0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00014a48 g     F .text	00000008 __localeconv_l
000062f0 g     F .text	000004fc __ieee754_rem_pio2f
00000020 g       *ABS*	00000000 __flash_exceptions_start
000183cc g     F .text	00000060 _fstat_r
000257b8 g     O .bss	00000004 errno
00003a34 g     F .text	000001e4 floor
000166dc g     F .text	00000008 __seofread
000257c4 g     O .bss	00000004 alt_argv
0002baa4 g       *ABS*	00000000 _gp
0001da04 g     F .text	000002fc alt_up_sd_card_fopen
00009d44 g     F .text	00000494 .hidden __subsf3
0001d5dc g     F .text	000000bc alt_up_sd_card_find_first
000257e4 g     O .bss	00000004 command_argument_register
00019d14 g     F .text	00000020 getpid
000227e0 g     O .rwdata	00000180 alt_fd_list
00005938 g     F .text	0000074c __ieee754_rem_pio2
00020998 g     F .text	00000008 _putchar_r
0001cd58 g     F .text	00000120 find_first_empty_record_in_root_directory
0001fe5c g     F .text	00000090 alt_find_dev
0000d460 g     F .text	00000100 memcpy
000146bc g     F .text	00000290 __hexnan
0001f4c8 g     F .text	00000050 alt_up_character_lcd_write_fd
00008cb0 g     F .text	00000094 .hidden __math_invalid
00012f5c g     F .text	0000000c _cleanup_r
0000c84c g     F .text	000000b8 .hidden __floatsidf
0001ffd0 g     F .text	0000007c alt_io_redirect
0000b710 g     F .text	000000e8 .hidden __ltdf2
00020d14 g       *ABS*	00000000 __DTOR_END__
0001f95c g     F .text	00000074 alt_up_rs232_read_data
0000d694 g     F .text	00000010 puts
00020840 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0001c988 g     F .text	00000190 find_first_empty_cluster
00015f58 g     F .text	000000a8 __ratio
0001d40c g     F .text	000000b8 alt_up_sd_card_open_dev
000026e0 g     F .text	00000680 compare_mfcc_buffers
00017cac g     F .text	0000001c __vfiprintf_internal
0001ed60 g     F .text	00000220 altera_avalon_jtag_uart_read
0000cc60 g     F .text	00000010 malloc
0000d560 g     F .text	00000030 _printf_r
0000933c g     F .text	00000064 .hidden __udivsi3
00019d70 g     F .text	000000a4 isatty
000188b0 g     F .text	000000c4 _raise_r
00017e80 g     F .text	00000064 __assert_func
000219e4 g     O .rodata	000000c8 __mprec_tens
000067ec g     F .text	000004ac __kernel_cos
000199b8 g     F .text	000000b4 .hidden __lesf2
00018d0c g     F .text	00000074 .hidden __fixunsdfsi
000207b0 g     F .text	00000090 alt_icache_flush
000257b4 g     O .bss	00000004 __malloc_top_pad
00018d08 g     F .text	00000004 _getpid_r
00014a50 g     F .text	0000000c _localeconv_r
00015438 g     F .text	000000b0 __i2b
00013708 g     F .text	00000484 __sfvwrite_r
00018974 g     F .text	000000bc __sigtramp_r
0001bd28 g     F .text	000000b8 get_dir_divider_location
0000d6a4 g     F .text	00000058 _sbrk_r
0001b9ec g     F .text	000000d0 filename_to_upper_case
0001dd00 g     F .text	0000007c alt_up_sd_card_set_attributes
0001ae3c g     F .text	00000278 Read_File_Record_At_Offset
000184e8 g     F .text	00000064 _read_r
00023ac8 g     O .rwdata	00000004 alt_max_fd
0001f8d8 g     F .text	00000044 alt_up_rs232_check_parity
0001c55c g     F .text	0000042c find_file_in_directory
00018094 g     F .text	00000070 _fclose_r
00012ed0 g     F .text	00000084 fflush
000257b0 g     O .bss	00000004 __malloc_max_sbrked_mem
0002004c g     F .text	00000180 alt_irq_register
000079a4 g     F .text	000002c8 __kernel_sin
0000c994 g     F .text	000000fc .hidden __extendsfdf2
0001d574 g     F .text	00000068 alt_up_sd_card_is_FAT16
0000a468 g     F .text	000008f0 .hidden __adddf3
00009868 g     F .text	00000070 .hidden __nesf2
00015cec g     F .text	00000108 __b2d
00019484 g     F .text	00000534 .hidden __umoddi3
0001a0a4 g     F .text	000000d4 lseek
00023aa4 g     O .rwdata	00000004 _global_impure_ptr
0001c06c g     F .text	000004f0 get_home_directory_cluster_for_file
0001614c g     F .text	0000053c _realloc_r
000089f4 g     F .text	000001b4 __kernel_sinf
00025ea4 g       *ABS*	00000000 __bss_end
000204b8 g     F .text	0000012c alt_tick
0002182c g     O .rodata	00000100 __hexdig
00018ef4 g     F .text	00000590 .hidden __udivdi3
00018330 g     F .text	00000024 _fputwc_r
000219bc g     O .rodata	00000028 __mprec_bigtens
000151ec g     F .text	00000138 __s2b
000187a4 g     F .text	00000018 abort
0000c904 g     F .text	00000090 .hidden __floatunsidf
00015a0c g     F .text	00000058 __mcmp
000257fc g     O .bss	00000004 current_sector_index
000132c8 g     F .text	00000014 __fp_lock_all
00002104 g     F .text	000000cc check_KEYs
00020414 g     F .text	000000a4 alt_alarm_stop
0001abb8 g     F .text	000000d8 mark_cluster
00003cdc g     F .text	0000009c cosf
00025800 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000cc alt_irq_handler
000227b8 g     O .rwdata	00000028 alt_dev_null
00006c98 g     F .text	00000d0c __kernel_rem_pio2
0000d794 g     F .text	000015dc _strtod_l
0001466c g     F .text	00000050 __match
000257a0 g     O .bss	00000004 char_lcd_dev
0001ce78 g     F .text	00000190 convert_filename_to_name_extension
0001f768 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001fc90 g     F .text	00000020 alt_dcache_flush_all
00015324 g     F .text	00000064 __hi0bits
000257d0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0000c7cc g     F .text	00000080 .hidden __fixdfsi
00007c6c g     F .text	000002c4 __kernel_cosf
0001cb18 g     F .text	00000240 find_first_empty_record_in_a_subdirectory
0000ed98 g     F .text	00000020 strtod
00023ae0 g       *ABS*	00000000 __ram_rwdata_end
00023ac0 g     O .rwdata	00000008 alt_dev_list
0001a71c g     F .text	000000f8 write
00020b68 g     F .text	000000cc _putc_r
000257f4 g     O .bss	00000004 device_pointer
000098d8 g     F .text	000000b8 .hidden __gtsf2
00021e20 g       *ABS*	00000000 __ram_rodata_end
00019c64 g     F .text	000000b0 fstat
0001fa60 g     F .text	00000094 alt_up_rs232_write_fd
00019e50 g     F .text	0000012c kill
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b710 g     F .text	000000e8 .hidden __ledf2
00008c58 g     F .text	0000000c .hidden __math_oflow
0000edb8 g     F .text	00000120 strtof_l
0001573c g     F .text	00000148 __pow5mult
00016a5c g     F .text	00001250 ___vfiprintf_internal_r
000093a0 g     F .text	0000005c .hidden __umodsi3
00025ea4 g       *ABS*	00000000 end
00002f08 g     F .text	00000168 get_values_from_sd_card_file
00002ddc g     F .text	0000007c writeToLCD
000257a8 g     O .bss	00000004 connected
0001e8a0 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001c8 g     F .exceptions	00000074 alt_instruction_exception_entry
00008da8 g     F .text	000000a0 .hidden __math_check_oflow
00020d14 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00008c4c g     F .text	0000000c .hidden __math_may_uflow
0001f228 g     F .text	0000007c alt_avalon_timer_sc_init
0000cc00 g     F .text	00000054 .hidden __clzsi2
0001ef80 g     F .text	00000228 altera_avalon_jtag_uart_write
00003984 g     F .text	000000b0 cos
00001b24 g     F .text	000000d4 kiss_fft_stride
000132b8 g     F .text	00000004 __sfp_lock_acquire
00014d00 g     F .text	000000d0 memchr
00001bf8 g     F .text	00000048 kiss_fft
0001f3cc g     F .text	00000080 alt_up_character_lcd_write
0000f0bc g     F .text	00002008 ___vfprintf_internal_r
0001340c g     F .text	000002fc _free_r
0001a23c g     F .text	0000022c alt_printf
00021c10 g     O .rodata	00000180 _ctype_b
000149c8 g     F .text	0000000c __locale_mb_cur_max
00020a48 g     F .text	00000120 __call_exitprocs
00023aac g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
00025804 g     O .bss	00000004 _alt_tick_rate
00003c18 g     F .text	000000c4 sin
00015884 g     F .text	00000188 __lshift
00025808 g     O .bss	00000008 _alt_nticks
00018aec g     F .text	000000a0 signal
0001a4d4 g     F .text	000000fc read
0001a884 g     F .text	000000ac alt_sys_init
0001f618 g     F .text	0000008c alt_up_character_lcd_shift_display
0000a248 g     F .text	00000124 .hidden __floatsisf
000209b8 g     F .text	00000090 __register_exitproc
00016880 g     F .text	000000d0 strncmp
0001f89c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000021d0 g     F .text	00000118 normalize_audio
000154e8 g     F .text	00000254 __multiply
00004830 g     F .text	00001108 __ieee754_pow
0001f6a4 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001ec04 g     F .text	00000068 altera_avalon_jtag_uart_close
00003e3c g     F .text	000002bc pow
00021e20 g       *ABS*	00000000 __ram_rwdata_start
00020d14 g       *ABS*	00000000 __ram_rodata_start
00025814 g     O .bss	00000028 __malloc_current_mallinfo
00009868 g     F .text	00000070 .hidden __eqsf2
00015df4 g     F .text	00000164 __d2b
000257cc g     O .bss	00000004 initialized
00002d60 g     F .text	0000007c clearLCD
0001e73c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00020710 g     F .text	000000a0 alt_get_fd
00025d90 g     O .bss	00000014 search_data
00017e28 g     F .text	00000058 _close_r
0000effc g     F .text	00000014 strtok
00020920 g     F .text	00000078 memcmp
0001e7fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00025ea4 g       *ABS*	00000000 __alt_stack_base
0001e84c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000111a0 g     F .text	00000164 __swsetup_r
0000ad58 g     F .text	00000850 .hidden __divdf3
00013140 g     F .text	00000154 __sfp
0002583c g     O .bss	00000054 boot_sector_data
00016070 g     F .text	0000007c __copybits
00022244 g     O .rwdata	00000408 __malloc_av_
000132c4 g     F .text	00000004 __sinit_lock_release
0000b7f8 g     F .text	00000674 .hidden __muldf3
00016688 g     F .text	00000054 __sread
0001f7fc g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00020608 g     F .text	00000108 alt_find_file
0001fcec g     F .text	000000a8 alt_dev_llist_insert
0001a1f4 g     F .text	00000024 __malloc_lock
0001a628 g     F .text	000000b8 sbrk
000090fc g     F .text	0000014c scalbnf
00012e70 g     F .text	00000060 _fflush_r
00017ef8 g     F .text	000000dc _calloc_r
000257a0 g       *ABS*	00000000 __bss_start
00014efc g     F .text	000000f0 memset
00001d24 g     F .text	000003e0 main
000257c8 g     O .bss	00000004 alt_envp
000257ac g     O .bss	00000004 __malloc_max_total_mem
0001e79c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00018698 g     F .text	00000018 __swbuf
000199b8 g     F .text	000000b4 .hidden __ltsf2
0001dd7c g     F .text	00000078 alt_up_sd_card_get_attributes
0001a930 g     F .text	000000b4 Write_Sector_Data
0001e0c8 g     F .text	000004fc alt_up_sd_card_write
0001f58c g     F .text	0000008c alt_up_character_lcd_shift_cursor
000167c0 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00018104 g     F .text	00000070 fclose
0000ca90 g     F .text	00000170 .hidden __truncdfsf2
00011500 g     F .text	00001748 _dtoa_r
0000cc80 g     F .text	000007e0 _malloc_r
00017d94 g     F .text	00000030 __ascii_wctomb
00023acc g     O .rwdata	00000004 alt_errno
00018174 g     F .text	00000020 _fiprintf_r
00018b8c g     F .text	00000060 _init_signal
00013b8c g     F .text	00000098 _fwalk
00014cb0 g     F .text	0000000c _mbtowc_r
00020c34 g     F .text	000000e0 putc
00009248 g     F .text	00000080 .hidden __divsi3
0001f390 g     F .text	0000003c alt_up_character_lcd_open_dev
000132f0 g     F .text	0000011c _malloc_trim_r
00020d14 g       *ABS*	00000000 __CTOR_END__
00009990 g     F .text	000003b4 .hidden __mulsf3
000257d8 g     O .bss	00000004 status_register
00008d44 g     F .text	00000064 .hidden __math_check_uflow
0001f358 g     F .text	00000038 alt_up_character_lcd_init
00003754 g     F .text	00000114 GetMagnitudeFactor
000167c8 g     F .text	000000b8 strcmp
000257e0 g     O .bss	00000004 command_register
00020d14 g       *ABS*	00000000 __flash_rodata_start
00003100 g     F .text	00000290 GetCoefficient
00020d14 g       *ABS*	00000000 __DTOR_LIST__
0001faf4 g     F .text	0000003c alt_up_rs232_open_dev
00018df4 g     F .text	00000090 .hidden __fixunsdfdi
0000b5a8 g     F .text	00000080 .hidden __nedf2
00003070 g     F .text	00000090 list_files_on_sd_card
0001a848 g     F .text	0000003c alt_irq_init
0001a5d0 g     F .text	00000058 alt_release_fd
0001ab08 g     F .text	000000b0 get_cluster_flag
0001f730 g     F .text	00000038 alt_up_character_lcd_cursor_off
000215b8 g     O .rodata	00000100 .hidden __clz_tab
0001b0b4 g     F .text	00000288 Write_File_Record_At_Offset
000257bc g     O .bss	00000004 _PathLocale
00018d80 g     F .text	00000074 .hidden __fixdfdi
0000eed8 g     F .text	00000124 strtof
0000ed7c g     F .text	0000001c strtod_l
000208d8 g     F .text	00000014 atexit
000098d8 g     F .text	000000b8 .hidden __gesf2
00017dc4 g     F .text	00000064 _write_r
000149d4 g     F .text	00000074 setlocale
00002e58 g     F .text	000000b0 checkIfSDCardIsPresent
0001b33c g     F .text	000005cc Check_for_DOS_FAT
0001d008 g     F .text	000002bc create_file
00023aa8 g     O .rwdata	00000004 _impure_ptr
000257dc g     O .bss	00000004 CSD_register_w0
000257c0 g     O .bss	00000004 alt_argc
00012c48 g     F .text	00000228 __sflush_r
00008e48 g     F .text	000001c0 scalbn
0001fdf8 g     F .text	00000064 _do_dtors
000041a4 g     F .text	0000068c __ieee754_log
00002498 g     F .text	00000248 calculate_mfcc
00000020 g       .exceptions	00000000 alt_irq_entry
00014cbc g     F .text	00000044 __ascii_mbtowc
00015c90 g     F .text	0000005c __ulp
000132dc g     F .text	00000014 __fp_unlock_all
00021930 g     O .rodata	0000000c _C_numeric_locale
000023e0 g     F .text	000000b8 fft
00023ab8 g     O .rwdata	00000008 alt_fs_list
0001babc g     F .text	0000026c check_file_name_for_FAT16_compliance
000257e8 g     O .bss	00000004 buffer_memory
0001f7a0 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001f91c g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014a5c g     F .text	0000000c localeconv
00006084 g     F .text	0000026c __ieee754_sqrt
00014c18 g     F .text	00000098 __swhatbuf_r
000257ec g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00023ae0 g       *ABS*	00000000 _edata
00025ea4 g       *ABS*	00000000 _end
00025890 g     O .bss	00000500 active_files
00019a6c g     F .text	0000004c .hidden __unordsf2
000181cc g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
0001d2c4 g     F .text	00000148 copy_file_record_name_to_string
0001ec6c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001b908 g     F .text	000000e4 Look_for_FAT16
000166e4 g     F .text	00000080 __swrite
00023ab0 g     O .rwdata	00000004 __malloc_trim_threshold
000208ec g     F .text	00000034 exit
00018194 g     F .text	00000038 fiprintf
0001854c g     F .text	00000004 _vfiprintf_r
0001d698 g     F .text	0000036c alt_up_sd_card_find_next
00013c24 g     F .text	000000a8 _fwalk_reent
0000a36c g     F .text	000000fc .hidden __floatunsisf
00015a64 g     F .text	0000022c __mdiff
00001c40 g     F .text	00000020 kiss_fft_cleanup
00008c40 g     F .text	0000000c .hidden __math_uflow
000092c8 g     F .text	00000074 .hidden __modsi3
0001aa30 g     F .text	000000d8 Read_Sector_Data
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000132bc g     F .text	00000004 __sfp_lock_release
0001f44c g     F .text	0000007c alt_up_character_lcd_string
00021b0c g     O .rodata	00000101 _ctype_
0000c778 g     F .text	00000054 .hidden __unorddf2
000022e8 g     F .text	000000f8 hamming_window
00019bf0 g     F .text	00000038 _exit
00007f30 g     F .text	00000ac4 __kernel_rem_pio2f
0001fb30 g     F .text	00000160 alt_alarm_start
0001ddf4 g     F .text	000002d4 alt_up_sd_card_read
00014a68 g     F .text	000001b0 __smakebuf_r
0000d6fc g     F .text	00000098 strlen
000187bc g     F .text	0000005c _init_signal_r
000202c0 g     F .text	00000154 open
0000b628 g     F .text	000000e8 .hidden __gedf2
0001a468 g     F .text	00000030 alt_putchar
00013da8 g     F .text	000008c4 __gethex
00017ee4 g     F .text	00000014 __assert
00003458 g     F .text	000002fc GetFilterParameter
00016a44 g     F .text	00000018 __sprint_r
0001feec g     F .text	00000034 alt_icache_flush_all
00009008 g     F .text	000000f4 floorf
0001494c g     F .text	00000008 __numeric_load_locale
00003390 g     F .text	000000c8 NormalizationFactor
0001f518 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00023ad4 g     O .rwdata	00000004 alt_priority_mask
000110c4 g     F .text	0000001c __vfprintf_internal
00001c60 g     F .text	000000c4 kiss_fft_next_fast_size
00017d88 g     F .text	0000000c _wctomb_r
000018e8 g     F .text	0000023c kiss_fft_alloc
0000be6c g     F .text	0000090c .hidden __subdf3
00015388 g     F .text	000000b0 __lo0bits
00023ad8 g     O .rwdata	00000008 alt_alarm_list
0001fd94 g     F .text	00000064 _do_ctors
00018bec g     F .text	000000bc __sigtramp
0001f85c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0001871c g     F .text	00000088 wcrtomb
00019af4 g     F .text	000000d0 close
000093fc g     F .text	0000046c .hidden __addsf3
0002264c g     O .rwdata	0000016c __global_locale
00019fe4 g     F .text	00000084 alt_load
0001bde0 g     F .text	0000028c match_file_record_to_name_ext
00018354 g     F .text	00000078 fputwc
00018a30 g     F .text	000000bc raise
0000cc70 g     F .text	00000010 free
000132c0 g     F .text	00000004 __sinit_lock_acquire
000150b4 g     F .text	00000138 __multadd
00015090 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08408f14 	ori	at,at,572
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008000b4 	movhi	r2,2
 148:	1885883a 	add	r2,r3,r2
 14c:	10d76917 	ldw	r3,23972(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008000b4 	movhi	r2,2
 15c:	2085883a 	add	r2,r4,r2
 160:	10976a17 	ldw	r2,23976(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	0001883a 	nop
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1dc:	000531fa 	rdctl	r2,exception
 1e0:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e4:	e0bfff17 	ldw	r2,-4(fp)
 1e8:	1004d0ba 	srli	r2,r2,2
 1ec:	108007cc 	andi	r2,r2,31
 1f0:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f4:	0005333a 	rdctl	r2,badaddr
 1f8:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a75b17 	ldw	r2,-25236(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a75b17 	ldw	r2,-25236(gp)
 208:	e0ffff17 	ldw	r3,-4(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17ffd17 	ldw	r5,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     244:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     248:	d6aea914 	ori	gp,gp,47780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     250:	1095e814 	ori	r2,r2,22432

    movhi r3, %hi(__bss_end)
     254:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     258:	18d7a914 	ori	r3,r3,24228

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	0019fe40 	call	19fe4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	001a1780 	call	1a178 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <alt_after_alt_main>

00000278 <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
     278:	defff704 	addi	sp,sp,-36
     27c:	df000815 	stw	fp,32(sp)
     280:	df000804 	addi	fp,sp,32
     284:	e13ffb15 	stw	r4,-20(fp)
     288:	e17ffa15 	stw	r5,-24(fp)
     28c:	e1bff915 	stw	r6,-28(fp)
     290:	e1fff815 	stw	r7,-32(fp)
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
     294:	e0bff917 	ldw	r2,-28(fp)
     298:	10804204 	addi	r2,r2,264
     29c:	e0bffe15 	stw	r2,-8(fp)
    kiss_fft_cpx t;
    Fout2 = Fout + m;
     2a0:	e0bff817 	ldw	r2,-32(fp)
     2a4:	100490fa 	slli	r2,r2,3
     2a8:	e0fffb17 	ldw	r3,-20(fp)
     2ac:	1885883a 	add	r2,r3,r2
     2b0:	e0bfff15 	stw	r2,-4(fp)
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	10c00017 	ldw	r3,0(r2)
     2bc:	e13ffe17 	ldw	r4,-8(fp)
     2c0:	20800017 	ldw	r2,0(r4)
     2c4:	1887ff32 	custom	252,r3,r3,r2
     2c8:	e0bfff17 	ldw	r2,-4(fp)
     2cc:	11000117 	ldw	r4,4(r2)
     2d0:	e17ffe17 	ldw	r5,-8(fp)
     2d4:	28800117 	ldw	r2,4(r5)
     2d8:	2085ff32 	custom	252,r2,r4,r2
     2dc:	1885ffb2 	custom	254,r2,r3,r2
     2e0:	e0bffc15 	stw	r2,-16(fp)
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	10c00017 	ldw	r3,0(r2)
     2ec:	e13ffe17 	ldw	r4,-8(fp)
     2f0:	20800117 	ldw	r2,4(r4)
     2f4:	1887ff32 	custom	252,r3,r3,r2
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	11000117 	ldw	r4,4(r2)
     300:	e17ffe17 	ldw	r5,-8(fp)
     304:	28800017 	ldw	r2,0(r5)
     308:	2085ff32 	custom	252,r2,r4,r2
     30c:	1885ff72 	custom	253,r2,r3,r2
     310:	e0bffd15 	stw	r2,-12(fp)
        tw1 += fstride;
     314:	e0bffa17 	ldw	r2,-24(fp)
     318:	100490fa 	slli	r2,r2,3
     31c:	e0fffe17 	ldw	r3,-8(fp)
     320:	1885883a 	add	r2,r3,r2
     324:	e0bffe15 	stw	r2,-8(fp)
        C_SUB( *Fout2 ,  *Fout , t );
     328:	e0bffb17 	ldw	r2,-20(fp)
     32c:	10c00017 	ldw	r3,0(r2)
     330:	e0bffc17 	ldw	r2,-16(fp)
     334:	1887ffb2 	custom	254,r3,r3,r2
     338:	e0bfff17 	ldw	r2,-4(fp)
     33c:	10c00015 	stw	r3,0(r2)
     340:	e0bffb17 	ldw	r2,-20(fp)
     344:	10c00117 	ldw	r3,4(r2)
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	1887ffb2 	custom	254,r3,r3,r2
     350:	e0bfff17 	ldw	r2,-4(fp)
     354:	10c00115 	stw	r3,4(r2)
        C_ADDTO( *Fout ,  t );
     358:	e0bffb17 	ldw	r2,-20(fp)
     35c:	10c00017 	ldw	r3,0(r2)
     360:	e0bffc17 	ldw	r2,-16(fp)
     364:	1887ff72 	custom	253,r3,r3,r2
     368:	e0bffb17 	ldw	r2,-20(fp)
     36c:	10c00015 	stw	r3,0(r2)
     370:	e0bffb17 	ldw	r2,-20(fp)
     374:	10c00117 	ldw	r3,4(r2)
     378:	e0bffd17 	ldw	r2,-12(fp)
     37c:	1887ff72 	custom	253,r3,r3,r2
     380:	e0bffb17 	ldw	r2,-20(fp)
     384:	10c00115 	stw	r3,4(r2)
        ++Fout2;
     388:	e0bfff17 	ldw	r2,-4(fp)
     38c:	10800204 	addi	r2,r2,8
     390:	e0bfff15 	stw	r2,-4(fp)
        ++Fout;
     394:	e0bffb17 	ldw	r2,-20(fp)
     398:	10800204 	addi	r2,r2,8
     39c:	e0bffb15 	stw	r2,-20(fp)
    }while (--m);
     3a0:	e0bff817 	ldw	r2,-32(fp)
     3a4:	10bfffc4 	addi	r2,r2,-1
     3a8:	e0bff815 	stw	r2,-32(fp)
     3ac:	e0bff817 	ldw	r2,-32(fp)
     3b0:	103fc01e 	bne	r2,zero,2b4 <kf_bfly2+0x3c>
}
     3b4:	0001883a 	nop
     3b8:	0001883a 	nop
     3bc:	e037883a 	mov	sp,fp
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00104 	addi	sp,sp,4
     3c8:	f800283a 	ret

000003cc <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
     3cc:	deffe904 	addi	sp,sp,-92
     3d0:	df001615 	stw	fp,88(sp)
     3d4:	df001604 	addi	fp,sp,88
     3d8:	e13fed15 	stw	r4,-76(fp)
     3dc:	e17fec15 	stw	r5,-80(fp)
     3e0:	e1bfeb15 	stw	r6,-84(fp)
     3e4:	e1ffea15 	stw	r7,-88(fp)
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
     3e8:	e0bfea17 	ldw	r2,-88(fp)
     3ec:	e0bffc15 	stw	r2,-16(fp)
    const size_t m2=2*m;
     3f0:	e0bfea17 	ldw	r2,-88(fp)
     3f4:	1085883a 	add	r2,r2,r2
     3f8:	e0bffb15 	stw	r2,-20(fp)
    const size_t m3=3*m;
     3fc:	e0bfea17 	ldw	r2,-88(fp)
     400:	108000e4 	muli	r2,r2,3
     404:	e0bffa15 	stw	r2,-24(fp)


    tw3 = tw2 = tw1 = st->twiddles;
     408:	e0bfeb17 	ldw	r2,-84(fp)
     40c:	10804204 	addi	r2,r2,264
     410:	e0bfff15 	stw	r2,-4(fp)
     414:	e0bfff17 	ldw	r2,-4(fp)
     418:	e0bffe15 	stw	r2,-8(fp)
     41c:	e0bffe17 	ldw	r2,-8(fp)
     420:	e0bffd15 	stw	r2,-12(fp)

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
     424:	e0bfea17 	ldw	r2,-88(fp)
     428:	100490fa 	slli	r2,r2,3
     42c:	e0ffed17 	ldw	r3,-76(fp)
     430:	1885883a 	add	r2,r3,r2
     434:	10c00017 	ldw	r3,0(r2)
     438:	e13fff17 	ldw	r4,-4(fp)
     43c:	20800017 	ldw	r2,0(r4)
     440:	1887ff32 	custom	252,r3,r3,r2
     444:	e0bfea17 	ldw	r2,-88(fp)
     448:	100490fa 	slli	r2,r2,3
     44c:	e13fed17 	ldw	r4,-76(fp)
     450:	2085883a 	add	r2,r4,r2
     454:	11000117 	ldw	r4,4(r2)
     458:	e17fff17 	ldw	r5,-4(fp)
     45c:	28800117 	ldw	r2,4(r5)
     460:	2085ff32 	custom	252,r2,r4,r2
     464:	1885ffb2 	custom	254,r2,r3,r2
     468:	e0bfee15 	stw	r2,-72(fp)
     46c:	e0bfea17 	ldw	r2,-88(fp)
     470:	100490fa 	slli	r2,r2,3
     474:	e0ffed17 	ldw	r3,-76(fp)
     478:	1885883a 	add	r2,r3,r2
     47c:	10c00017 	ldw	r3,0(r2)
     480:	e13fff17 	ldw	r4,-4(fp)
     484:	20800117 	ldw	r2,4(r4)
     488:	1887ff32 	custom	252,r3,r3,r2
     48c:	e0bfea17 	ldw	r2,-88(fp)
     490:	100490fa 	slli	r2,r2,3
     494:	e13fed17 	ldw	r4,-76(fp)
     498:	2085883a 	add	r2,r4,r2
     49c:	11000117 	ldw	r4,4(r2)
     4a0:	e17fff17 	ldw	r5,-4(fp)
     4a4:	28800017 	ldw	r2,0(r5)
     4a8:	2085ff32 	custom	252,r2,r4,r2
     4ac:	1885ff72 	custom	253,r2,r3,r2
     4b0:	e0bfef15 	stw	r2,-68(fp)
        C_MUL(scratch[1],Fout[m2] , *tw2 );
     4b4:	e0bffb17 	ldw	r2,-20(fp)
     4b8:	100490fa 	slli	r2,r2,3
     4bc:	e0ffed17 	ldw	r3,-76(fp)
     4c0:	1885883a 	add	r2,r3,r2
     4c4:	10c00017 	ldw	r3,0(r2)
     4c8:	e13ffe17 	ldw	r4,-8(fp)
     4cc:	20800017 	ldw	r2,0(r4)
     4d0:	1887ff32 	custom	252,r3,r3,r2
     4d4:	e0bffb17 	ldw	r2,-20(fp)
     4d8:	100490fa 	slli	r2,r2,3
     4dc:	e13fed17 	ldw	r4,-76(fp)
     4e0:	2085883a 	add	r2,r4,r2
     4e4:	11000117 	ldw	r4,4(r2)
     4e8:	e17ffe17 	ldw	r5,-8(fp)
     4ec:	28800117 	ldw	r2,4(r5)
     4f0:	2085ff32 	custom	252,r2,r4,r2
     4f4:	1885ffb2 	custom	254,r2,r3,r2
     4f8:	e0bff015 	stw	r2,-64(fp)
     4fc:	e0bffb17 	ldw	r2,-20(fp)
     500:	100490fa 	slli	r2,r2,3
     504:	e0ffed17 	ldw	r3,-76(fp)
     508:	1885883a 	add	r2,r3,r2
     50c:	10c00017 	ldw	r3,0(r2)
     510:	e13ffe17 	ldw	r4,-8(fp)
     514:	20800117 	ldw	r2,4(r4)
     518:	1887ff32 	custom	252,r3,r3,r2
     51c:	e0bffb17 	ldw	r2,-20(fp)
     520:	100490fa 	slli	r2,r2,3
     524:	e13fed17 	ldw	r4,-76(fp)
     528:	2085883a 	add	r2,r4,r2
     52c:	11000117 	ldw	r4,4(r2)
     530:	e17ffe17 	ldw	r5,-8(fp)
     534:	28800017 	ldw	r2,0(r5)
     538:	2085ff32 	custom	252,r2,r4,r2
     53c:	1885ff72 	custom	253,r2,r3,r2
     540:	e0bff115 	stw	r2,-60(fp)
        C_MUL(scratch[2],Fout[m3] , *tw3 );
     544:	e0bffa17 	ldw	r2,-24(fp)
     548:	100490fa 	slli	r2,r2,3
     54c:	e0ffed17 	ldw	r3,-76(fp)
     550:	1885883a 	add	r2,r3,r2
     554:	10c00017 	ldw	r3,0(r2)
     558:	e13ffd17 	ldw	r4,-12(fp)
     55c:	20800017 	ldw	r2,0(r4)
     560:	1887ff32 	custom	252,r3,r3,r2
     564:	e0bffa17 	ldw	r2,-24(fp)
     568:	100490fa 	slli	r2,r2,3
     56c:	e13fed17 	ldw	r4,-76(fp)
     570:	2085883a 	add	r2,r4,r2
     574:	11000117 	ldw	r4,4(r2)
     578:	e17ffd17 	ldw	r5,-12(fp)
     57c:	28800117 	ldw	r2,4(r5)
     580:	2085ff32 	custom	252,r2,r4,r2
     584:	1885ffb2 	custom	254,r2,r3,r2
     588:	e0bff215 	stw	r2,-56(fp)
     58c:	e0bffa17 	ldw	r2,-24(fp)
     590:	100490fa 	slli	r2,r2,3
     594:	e0ffed17 	ldw	r3,-76(fp)
     598:	1885883a 	add	r2,r3,r2
     59c:	10c00017 	ldw	r3,0(r2)
     5a0:	e13ffd17 	ldw	r4,-12(fp)
     5a4:	20800117 	ldw	r2,4(r4)
     5a8:	1887ff32 	custom	252,r3,r3,r2
     5ac:	e0bffa17 	ldw	r2,-24(fp)
     5b0:	100490fa 	slli	r2,r2,3
     5b4:	e13fed17 	ldw	r4,-76(fp)
     5b8:	2085883a 	add	r2,r4,r2
     5bc:	11000117 	ldw	r4,4(r2)
     5c0:	e17ffd17 	ldw	r5,-12(fp)
     5c4:	28800017 	ldw	r2,0(r5)
     5c8:	2085ff32 	custom	252,r2,r4,r2
     5cc:	1885ff72 	custom	253,r2,r3,r2
     5d0:	e0bff315 	stw	r2,-52(fp)

        C_SUB( scratch[5] , *Fout, scratch[1] );
     5d4:	e0bfed17 	ldw	r2,-76(fp)
     5d8:	10c00017 	ldw	r3,0(r2)
     5dc:	e0bff017 	ldw	r2,-64(fp)
     5e0:	1885ffb2 	custom	254,r2,r3,r2
     5e4:	e0bff815 	stw	r2,-32(fp)
     5e8:	e0bfed17 	ldw	r2,-76(fp)
     5ec:	10c00117 	ldw	r3,4(r2)
     5f0:	e0bff117 	ldw	r2,-60(fp)
     5f4:	1885ffb2 	custom	254,r2,r3,r2
     5f8:	e0bff915 	stw	r2,-28(fp)
        C_ADDTO(*Fout, scratch[1]);
     5fc:	e0bfed17 	ldw	r2,-76(fp)
     600:	10c00017 	ldw	r3,0(r2)
     604:	e0bff017 	ldw	r2,-64(fp)
     608:	1887ff72 	custom	253,r3,r3,r2
     60c:	e0bfed17 	ldw	r2,-76(fp)
     610:	10c00015 	stw	r3,0(r2)
     614:	e0bfed17 	ldw	r2,-76(fp)
     618:	10c00117 	ldw	r3,4(r2)
     61c:	e0bff117 	ldw	r2,-60(fp)
     620:	1887ff72 	custom	253,r3,r3,r2
     624:	e0bfed17 	ldw	r2,-76(fp)
     628:	10c00115 	stw	r3,4(r2)
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
     62c:	e0ffee17 	ldw	r3,-72(fp)
     630:	e0bff217 	ldw	r2,-56(fp)
     634:	1885ff72 	custom	253,r2,r3,r2
     638:	e0bff415 	stw	r2,-48(fp)
     63c:	e0ffef17 	ldw	r3,-68(fp)
     640:	e0bff317 	ldw	r2,-52(fp)
     644:	1885ff72 	custom	253,r2,r3,r2
     648:	e0bff515 	stw	r2,-44(fp)
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
     64c:	e0ffee17 	ldw	r3,-72(fp)
     650:	e0bff217 	ldw	r2,-56(fp)
     654:	1885ffb2 	custom	254,r2,r3,r2
     658:	e0bff615 	stw	r2,-40(fp)
     65c:	e0ffef17 	ldw	r3,-68(fp)
     660:	e0bff317 	ldw	r2,-52(fp)
     664:	1885ffb2 	custom	254,r2,r3,r2
     668:	e0bff715 	stw	r2,-36(fp)
        C_SUB( Fout[m2], *Fout, scratch[3] );
     66c:	e0bfed17 	ldw	r2,-76(fp)
     670:	11000017 	ldw	r4,0(r2)
     674:	e0fff417 	ldw	r3,-48(fp)
     678:	e0bffb17 	ldw	r2,-20(fp)
     67c:	100490fa 	slli	r2,r2,3
     680:	e17fed17 	ldw	r5,-76(fp)
     684:	2885883a 	add	r2,r5,r2
     688:	20c7ffb2 	custom	254,r3,r4,r3
     68c:	10c00015 	stw	r3,0(r2)
     690:	e0bfed17 	ldw	r2,-76(fp)
     694:	11000117 	ldw	r4,4(r2)
     698:	e0fff517 	ldw	r3,-44(fp)
     69c:	e0bffb17 	ldw	r2,-20(fp)
     6a0:	100490fa 	slli	r2,r2,3
     6a4:	e17fed17 	ldw	r5,-76(fp)
     6a8:	2885883a 	add	r2,r5,r2
     6ac:	20c7ffb2 	custom	254,r3,r4,r3
     6b0:	10c00115 	stw	r3,4(r2)
        tw1 += fstride;
     6b4:	e0bfec17 	ldw	r2,-80(fp)
     6b8:	100490fa 	slli	r2,r2,3
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	1885883a 	add	r2,r3,r2
     6c4:	e0bfff15 	stw	r2,-4(fp)
        tw2 += fstride*2;
     6c8:	e0bfec17 	ldw	r2,-80(fp)
     6cc:	1004913a 	slli	r2,r2,4
     6d0:	e0fffe17 	ldw	r3,-8(fp)
     6d4:	1885883a 	add	r2,r3,r2
     6d8:	e0bffe15 	stw	r2,-8(fp)
        tw3 += fstride*3;
     6dc:	e0bfec17 	ldw	r2,-80(fp)
     6e0:	10800624 	muli	r2,r2,24
     6e4:	e0fffd17 	ldw	r3,-12(fp)
     6e8:	1885883a 	add	r2,r3,r2
     6ec:	e0bffd15 	stw	r2,-12(fp)
        C_ADDTO( *Fout , scratch[3] );
     6f0:	e0bfed17 	ldw	r2,-76(fp)
     6f4:	10c00017 	ldw	r3,0(r2)
     6f8:	e0bff417 	ldw	r2,-48(fp)
     6fc:	1887ff72 	custom	253,r3,r3,r2
     700:	e0bfed17 	ldw	r2,-76(fp)
     704:	10c00015 	stw	r3,0(r2)
     708:	e0bfed17 	ldw	r2,-76(fp)
     70c:	10c00117 	ldw	r3,4(r2)
     710:	e0bff517 	ldw	r2,-44(fp)
     714:	1887ff72 	custom	253,r3,r3,r2
     718:	e0bfed17 	ldw	r2,-76(fp)
     71c:	10c00115 	stw	r3,4(r2)

        if(st->inverse) {
     720:	e0bfeb17 	ldw	r2,-84(fp)
     724:	10800117 	ldw	r2,4(r2)
     728:	10002126 	beq	r2,zero,7b0 <kf_bfly4+0x3e4>
            Fout[m].r = scratch[5].r - scratch[4].i;
     72c:	e13ff817 	ldw	r4,-32(fp)
     730:	e0fff717 	ldw	r3,-36(fp)
     734:	e0bfea17 	ldw	r2,-88(fp)
     738:	100490fa 	slli	r2,r2,3
     73c:	e17fed17 	ldw	r5,-76(fp)
     740:	2885883a 	add	r2,r5,r2
     744:	20c7ffb2 	custom	254,r3,r4,r3
     748:	10c00015 	stw	r3,0(r2)
            Fout[m].i = scratch[5].i + scratch[4].r;
     74c:	e13ff917 	ldw	r4,-28(fp)
     750:	e0fff617 	ldw	r3,-40(fp)
     754:	e0bfea17 	ldw	r2,-88(fp)
     758:	100490fa 	slli	r2,r2,3
     75c:	e17fed17 	ldw	r5,-76(fp)
     760:	2885883a 	add	r2,r5,r2
     764:	20c7ff72 	custom	253,r3,r4,r3
     768:	10c00115 	stw	r3,4(r2)
            Fout[m3].r = scratch[5].r + scratch[4].i;
     76c:	e13ff817 	ldw	r4,-32(fp)
     770:	e0fff717 	ldw	r3,-36(fp)
     774:	e0bffa17 	ldw	r2,-24(fp)
     778:	100490fa 	slli	r2,r2,3
     77c:	e17fed17 	ldw	r5,-76(fp)
     780:	2885883a 	add	r2,r5,r2
     784:	20c7ff72 	custom	253,r3,r4,r3
     788:	10c00015 	stw	r3,0(r2)
            Fout[m3].i = scratch[5].i - scratch[4].r;
     78c:	e13ff917 	ldw	r4,-28(fp)
     790:	e0fff617 	ldw	r3,-40(fp)
     794:	e0bffa17 	ldw	r2,-24(fp)
     798:	100490fa 	slli	r2,r2,3
     79c:	e17fed17 	ldw	r5,-76(fp)
     7a0:	2885883a 	add	r2,r5,r2
     7a4:	20c7ffb2 	custom	254,r3,r4,r3
     7a8:	10c00115 	stw	r3,4(r2)
     7ac:	00002006 	br	830 <kf_bfly4+0x464>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
     7b0:	e13ff817 	ldw	r4,-32(fp)
     7b4:	e0fff717 	ldw	r3,-36(fp)
     7b8:	e0bfea17 	ldw	r2,-88(fp)
     7bc:	100490fa 	slli	r2,r2,3
     7c0:	e17fed17 	ldw	r5,-76(fp)
     7c4:	2885883a 	add	r2,r5,r2
     7c8:	20c7ff72 	custom	253,r3,r4,r3
     7cc:	10c00015 	stw	r3,0(r2)
            Fout[m].i = scratch[5].i - scratch[4].r;
     7d0:	e13ff917 	ldw	r4,-28(fp)
     7d4:	e0fff617 	ldw	r3,-40(fp)
     7d8:	e0bfea17 	ldw	r2,-88(fp)
     7dc:	100490fa 	slli	r2,r2,3
     7e0:	e17fed17 	ldw	r5,-76(fp)
     7e4:	2885883a 	add	r2,r5,r2
     7e8:	20c7ffb2 	custom	254,r3,r4,r3
     7ec:	10c00115 	stw	r3,4(r2)
            Fout[m3].r = scratch[5].r - scratch[4].i;
     7f0:	e13ff817 	ldw	r4,-32(fp)
     7f4:	e0fff717 	ldw	r3,-36(fp)
     7f8:	e0bffa17 	ldw	r2,-24(fp)
     7fc:	100490fa 	slli	r2,r2,3
     800:	e17fed17 	ldw	r5,-76(fp)
     804:	2885883a 	add	r2,r5,r2
     808:	20c7ffb2 	custom	254,r3,r4,r3
     80c:	10c00015 	stw	r3,0(r2)
            Fout[m3].i = scratch[5].i + scratch[4].r;
     810:	e13ff917 	ldw	r4,-28(fp)
     814:	e0fff617 	ldw	r3,-40(fp)
     818:	e0bffa17 	ldw	r2,-24(fp)
     81c:	100490fa 	slli	r2,r2,3
     820:	e17fed17 	ldw	r5,-76(fp)
     824:	2885883a 	add	r2,r5,r2
     828:	20c7ff72 	custom	253,r3,r4,r3
     82c:	10c00115 	stw	r3,4(r2)
        }
        ++Fout;
     830:	e0bfed17 	ldw	r2,-76(fp)
     834:	10800204 	addi	r2,r2,8
     838:	e0bfed15 	stw	r2,-76(fp)
    }while(--k);
     83c:	e0bffc17 	ldw	r2,-16(fp)
     840:	10bfffc4 	addi	r2,r2,-1
     844:	e0bffc15 	stw	r2,-16(fp)
     848:	e0bffc17 	ldw	r2,-16(fp)
     84c:	103ef51e 	bne	r2,zero,424 <kf_bfly4+0x58>
}
     850:	0001883a 	nop
     854:	0001883a 	nop
     858:	e037883a 	mov	sp,fp
     85c:	df000017 	ldw	fp,0(sp)
     860:	dec00104 	addi	sp,sp,4
     864:	f800283a 	ret

00000868 <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
     868:	deffeb04 	addi	sp,sp,-84
     86c:	df001415 	stw	fp,80(sp)
     870:	df001404 	addi	fp,sp,80
     874:	e13fef15 	stw	r4,-68(fp)
     878:	e17fee15 	stw	r5,-72(fp)
     87c:	e1bfed15 	stw	r6,-76(fp)
     880:	e1ffec15 	stw	r7,-80(fp)
     size_t k=m;
     884:	e0bfec17 	ldw	r2,-80(fp)
     888:	e0bfff15 	stw	r2,-4(fp)
     const size_t m2 = 2*m;
     88c:	e0bfec17 	ldw	r2,-80(fp)
     890:	1085883a 	add	r2,r2,r2
     894:	e0bffc15 	stw	r2,-16(fp)
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
     898:	e0ffee17 	ldw	r3,-72(fp)
     89c:	e0bfec17 	ldw	r2,-80(fp)
     8a0:	1885383a 	mul	r2,r3,r2
     8a4:	e0ffed17 	ldw	r3,-76(fp)
     8a8:	10800844 	addi	r2,r2,33
     8ac:	100490fa 	slli	r2,r2,3
     8b0:	1885883a 	add	r2,r3,r2
     8b4:	10c00017 	ldw	r3,0(r2)
     8b8:	e0fff015 	stw	r3,-64(fp)
     8bc:	10800117 	ldw	r2,4(r2)
     8c0:	e0bff115 	stw	r2,-60(fp)

     tw1=tw2=st->twiddles;
     8c4:	e0bfed17 	ldw	r2,-76(fp)
     8c8:	10804204 	addi	r2,r2,264
     8cc:	e0bffd15 	stw	r2,-12(fp)
     8d0:	e0bffd17 	ldw	r2,-12(fp)
     8d4:	e0bffe15 	stw	r2,-8(fp)

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
     8d8:	e0bfec17 	ldw	r2,-80(fp)
     8dc:	100490fa 	slli	r2,r2,3
     8e0:	e0ffef17 	ldw	r3,-68(fp)
     8e4:	1885883a 	add	r2,r3,r2
     8e8:	10c00017 	ldw	r3,0(r2)
     8ec:	e13ffe17 	ldw	r4,-8(fp)
     8f0:	20800017 	ldw	r2,0(r4)
     8f4:	1887ff32 	custom	252,r3,r3,r2
     8f8:	e0bfec17 	ldw	r2,-80(fp)
     8fc:	100490fa 	slli	r2,r2,3
     900:	e13fef17 	ldw	r4,-68(fp)
     904:	2085883a 	add	r2,r4,r2
     908:	11000117 	ldw	r4,4(r2)
     90c:	e17ffe17 	ldw	r5,-8(fp)
     910:	28800117 	ldw	r2,4(r5)
     914:	2085ff32 	custom	252,r2,r4,r2
     918:	1885ffb2 	custom	254,r2,r3,r2
     91c:	e0bff415 	stw	r2,-48(fp)
     920:	e0bfec17 	ldw	r2,-80(fp)
     924:	100490fa 	slli	r2,r2,3
     928:	e0ffef17 	ldw	r3,-68(fp)
     92c:	1885883a 	add	r2,r3,r2
     930:	10c00017 	ldw	r3,0(r2)
     934:	e13ffe17 	ldw	r4,-8(fp)
     938:	20800117 	ldw	r2,4(r4)
     93c:	1887ff32 	custom	252,r3,r3,r2
     940:	e0bfec17 	ldw	r2,-80(fp)
     944:	100490fa 	slli	r2,r2,3
     948:	e13fef17 	ldw	r4,-68(fp)
     94c:	2085883a 	add	r2,r4,r2
     950:	11000117 	ldw	r4,4(r2)
     954:	e17ffe17 	ldw	r5,-8(fp)
     958:	28800017 	ldw	r2,0(r5)
     95c:	2085ff32 	custom	252,r2,r4,r2
     960:	1885ff72 	custom	253,r2,r3,r2
     964:	e0bff515 	stw	r2,-44(fp)
         C_MUL(scratch[2],Fout[m2] , *tw2);
     968:	e0bffc17 	ldw	r2,-16(fp)
     96c:	100490fa 	slli	r2,r2,3
     970:	e0ffef17 	ldw	r3,-68(fp)
     974:	1885883a 	add	r2,r3,r2
     978:	10c00017 	ldw	r3,0(r2)
     97c:	e13ffd17 	ldw	r4,-12(fp)
     980:	20800017 	ldw	r2,0(r4)
     984:	1887ff32 	custom	252,r3,r3,r2
     988:	e0bffc17 	ldw	r2,-16(fp)
     98c:	100490fa 	slli	r2,r2,3
     990:	e13fef17 	ldw	r4,-68(fp)
     994:	2085883a 	add	r2,r4,r2
     998:	11000117 	ldw	r4,4(r2)
     99c:	e17ffd17 	ldw	r5,-12(fp)
     9a0:	28800117 	ldw	r2,4(r5)
     9a4:	2085ff32 	custom	252,r2,r4,r2
     9a8:	1885ffb2 	custom	254,r2,r3,r2
     9ac:	e0bff615 	stw	r2,-40(fp)
     9b0:	e0bffc17 	ldw	r2,-16(fp)
     9b4:	100490fa 	slli	r2,r2,3
     9b8:	e0ffef17 	ldw	r3,-68(fp)
     9bc:	1885883a 	add	r2,r3,r2
     9c0:	10c00017 	ldw	r3,0(r2)
     9c4:	e13ffd17 	ldw	r4,-12(fp)
     9c8:	20800117 	ldw	r2,4(r4)
     9cc:	1887ff32 	custom	252,r3,r3,r2
     9d0:	e0bffc17 	ldw	r2,-16(fp)
     9d4:	100490fa 	slli	r2,r2,3
     9d8:	e13fef17 	ldw	r4,-68(fp)
     9dc:	2085883a 	add	r2,r4,r2
     9e0:	11000117 	ldw	r4,4(r2)
     9e4:	e17ffd17 	ldw	r5,-12(fp)
     9e8:	28800017 	ldw	r2,0(r5)
     9ec:	2085ff32 	custom	252,r2,r4,r2
     9f0:	1885ff72 	custom	253,r2,r3,r2
     9f4:	e0bff715 	stw	r2,-36(fp)

         C_ADD(scratch[3],scratch[1],scratch[2]);
     9f8:	e0fff417 	ldw	r3,-48(fp)
     9fc:	e0bff617 	ldw	r2,-40(fp)
     a00:	1885ff72 	custom	253,r2,r3,r2
     a04:	e0bff815 	stw	r2,-32(fp)
     a08:	e0fff517 	ldw	r3,-44(fp)
     a0c:	e0bff717 	ldw	r2,-36(fp)
     a10:	1885ff72 	custom	253,r2,r3,r2
     a14:	e0bff915 	stw	r2,-28(fp)
         C_SUB(scratch[0],scratch[1],scratch[2]);
     a18:	e0fff417 	ldw	r3,-48(fp)
     a1c:	e0bff617 	ldw	r2,-40(fp)
     a20:	1885ffb2 	custom	254,r2,r3,r2
     a24:	e0bff215 	stw	r2,-56(fp)
     a28:	e0fff517 	ldw	r3,-44(fp)
     a2c:	e0bff717 	ldw	r2,-36(fp)
     a30:	1885ffb2 	custom	254,r2,r3,r2
     a34:	e0bff315 	stw	r2,-52(fp)
         tw1 += fstride;
     a38:	e0bfee17 	ldw	r2,-72(fp)
     a3c:	100490fa 	slli	r2,r2,3
     a40:	e0fffe17 	ldw	r3,-8(fp)
     a44:	1885883a 	add	r2,r3,r2
     a48:	e0bffe15 	stw	r2,-8(fp)
         tw2 += fstride*2;
     a4c:	e0bfee17 	ldw	r2,-72(fp)
     a50:	1004913a 	slli	r2,r2,4
     a54:	e0fffd17 	ldw	r3,-12(fp)
     a58:	1885883a 	add	r2,r3,r2
     a5c:	e0bffd15 	stw	r2,-12(fp)

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
     a60:	e0bfef17 	ldw	r2,-68(fp)
     a64:	11000017 	ldw	r4,0(r2)
     a68:	e0fff817 	ldw	r3,-32(fp)
     a6c:	008fc034 	movhi	r2,16128
     a70:	1887ff32 	custom	252,r3,r3,r2
     a74:	e0bfec17 	ldw	r2,-80(fp)
     a78:	100490fa 	slli	r2,r2,3
     a7c:	e17fef17 	ldw	r5,-68(fp)
     a80:	2885883a 	add	r2,r5,r2
     a84:	20c7ffb2 	custom	254,r3,r4,r3
     a88:	10c00015 	stw	r3,0(r2)
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
     a8c:	e0bfef17 	ldw	r2,-68(fp)
     a90:	11000117 	ldw	r4,4(r2)
     a94:	e0fff917 	ldw	r3,-28(fp)
     a98:	008fc034 	movhi	r2,16128
     a9c:	1887ff32 	custom	252,r3,r3,r2
     aa0:	e0bfec17 	ldw	r2,-80(fp)
     aa4:	100490fa 	slli	r2,r2,3
     aa8:	e17fef17 	ldw	r5,-68(fp)
     aac:	2885883a 	add	r2,r5,r2
     ab0:	20c7ffb2 	custom	254,r3,r4,r3
     ab4:	10c00115 	stw	r3,4(r2)

         C_MULBYSCALAR( scratch[0] , epi3.i );
     ab8:	e0fff217 	ldw	r3,-56(fp)
     abc:	e0bff117 	ldw	r2,-60(fp)
     ac0:	1885ff32 	custom	252,r2,r3,r2
     ac4:	e0bff215 	stw	r2,-56(fp)
     ac8:	e0fff317 	ldw	r3,-52(fp)
     acc:	e0bff117 	ldw	r2,-60(fp)
     ad0:	1885ff32 	custom	252,r2,r3,r2
     ad4:	e0bff315 	stw	r2,-52(fp)

         C_ADDTO(*Fout,scratch[3]);
     ad8:	e0bfef17 	ldw	r2,-68(fp)
     adc:	10c00017 	ldw	r3,0(r2)
     ae0:	e0bff817 	ldw	r2,-32(fp)
     ae4:	1887ff72 	custom	253,r3,r3,r2
     ae8:	e0bfef17 	ldw	r2,-68(fp)
     aec:	10c00015 	stw	r3,0(r2)
     af0:	e0bfef17 	ldw	r2,-68(fp)
     af4:	10c00117 	ldw	r3,4(r2)
     af8:	e0bff917 	ldw	r2,-28(fp)
     afc:	1887ff72 	custom	253,r3,r3,r2
     b00:	e0bfef17 	ldw	r2,-68(fp)
     b04:	10c00115 	stw	r3,4(r2)

         Fout[m2].r = Fout[m].r + scratch[0].i;
     b08:	e0bfec17 	ldw	r2,-80(fp)
     b0c:	100490fa 	slli	r2,r2,3
     b10:	e0ffef17 	ldw	r3,-68(fp)
     b14:	1885883a 	add	r2,r3,r2
     b18:	11000017 	ldw	r4,0(r2)
     b1c:	e0fff317 	ldw	r3,-52(fp)
     b20:	e0bffc17 	ldw	r2,-16(fp)
     b24:	100490fa 	slli	r2,r2,3
     b28:	e17fef17 	ldw	r5,-68(fp)
     b2c:	2885883a 	add	r2,r5,r2
     b30:	20c7ff72 	custom	253,r3,r4,r3
     b34:	10c00015 	stw	r3,0(r2)
         Fout[m2].i = Fout[m].i - scratch[0].r;
     b38:	e0bfec17 	ldw	r2,-80(fp)
     b3c:	100490fa 	slli	r2,r2,3
     b40:	e0ffef17 	ldw	r3,-68(fp)
     b44:	1885883a 	add	r2,r3,r2
     b48:	11000117 	ldw	r4,4(r2)
     b4c:	e0fff217 	ldw	r3,-56(fp)
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	100490fa 	slli	r2,r2,3
     b58:	e17fef17 	ldw	r5,-68(fp)
     b5c:	2885883a 	add	r2,r5,r2
     b60:	20c7ffb2 	custom	254,r3,r4,r3
     b64:	10c00115 	stw	r3,4(r2)

         Fout[m].r -= scratch[0].i;
     b68:	e0bfec17 	ldw	r2,-80(fp)
     b6c:	100490fa 	slli	r2,r2,3
     b70:	e0ffef17 	ldw	r3,-68(fp)
     b74:	1885883a 	add	r2,r3,r2
     b78:	11000017 	ldw	r4,0(r2)
     b7c:	e0fff317 	ldw	r3,-52(fp)
     b80:	e0bfec17 	ldw	r2,-80(fp)
     b84:	100490fa 	slli	r2,r2,3
     b88:	e17fef17 	ldw	r5,-68(fp)
     b8c:	2885883a 	add	r2,r5,r2
     b90:	20c7ffb2 	custom	254,r3,r4,r3
     b94:	10c00015 	stw	r3,0(r2)
         Fout[m].i += scratch[0].r;
     b98:	e0bfec17 	ldw	r2,-80(fp)
     b9c:	100490fa 	slli	r2,r2,3
     ba0:	e0ffef17 	ldw	r3,-68(fp)
     ba4:	1885883a 	add	r2,r3,r2
     ba8:	11000117 	ldw	r4,4(r2)
     bac:	e0fff217 	ldw	r3,-56(fp)
     bb0:	e0bfec17 	ldw	r2,-80(fp)
     bb4:	100490fa 	slli	r2,r2,3
     bb8:	e17fef17 	ldw	r5,-68(fp)
     bbc:	2885883a 	add	r2,r5,r2
     bc0:	20c7ff72 	custom	253,r3,r4,r3
     bc4:	10c00115 	stw	r3,4(r2)

         ++Fout;
     bc8:	e0bfef17 	ldw	r2,-68(fp)
     bcc:	10800204 	addi	r2,r2,8
     bd0:	e0bfef15 	stw	r2,-68(fp)
     }while(--k);
     bd4:	e0bfff17 	ldw	r2,-4(fp)
     bd8:	10bfffc4 	addi	r2,r2,-1
     bdc:	e0bfff15 	stw	r2,-4(fp)
     be0:	e0bfff17 	ldw	r2,-4(fp)
     be4:	103f3c1e 	bne	r2,zero,8d8 <kf_bfly3+0x70>
}
     be8:	0001883a 	nop
     bec:	0001883a 	nop
     bf0:	e037883a 	mov	sp,fp
     bf4:	df000017 	ldw	fp,0(sp)
     bf8:	dec00104 	addi	sp,sp,4
     bfc:	f800283a 	ret

00000c00 <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
     c00:	deffd504 	addi	sp,sp,-172
     c04:	df002a15 	stw	fp,168(sp)
     c08:	df002a04 	addi	fp,sp,168
     c0c:	e13fd915 	stw	r4,-156(fp)
     c10:	e17fd815 	stw	r5,-160(fp)
     c14:	e1bfd715 	stw	r6,-164(fp)
     c18:	e1ffd615 	stw	r7,-168(fp)
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
     c1c:	e0bfd717 	ldw	r2,-164(fp)
     c20:	10804204 	addi	r2,r2,264
     c24:	e0bff915 	stw	r2,-28(fp)
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
     c28:	e0ffd617 	ldw	r3,-168(fp)
     c2c:	e0bfd817 	ldw	r2,-160(fp)
     c30:	1885383a 	mul	r2,r3,r2
     c34:	100490fa 	slli	r2,r2,3
     c38:	e0fff917 	ldw	r3,-28(fp)
     c3c:	1885883a 	add	r2,r3,r2
     c40:	10c00017 	ldw	r3,0(r2)
     c44:	e0ffdc15 	stw	r3,-144(fp)
     c48:	10800117 	ldw	r2,4(r2)
     c4c:	e0bfdd15 	stw	r2,-140(fp)
    yb = twiddles[fstride*2*m];
     c50:	e0ffd617 	ldw	r3,-168(fp)
     c54:	e0bfd817 	ldw	r2,-160(fp)
     c58:	1885383a 	mul	r2,r3,r2
     c5c:	1004913a 	slli	r2,r2,4
     c60:	e0fff917 	ldw	r3,-28(fp)
     c64:	1885883a 	add	r2,r3,r2
     c68:	10c00017 	ldw	r3,0(r2)
     c6c:	e0ffda15 	stw	r3,-152(fp)
     c70:	10800117 	ldw	r2,4(r2)
     c74:	e0bfdb15 	stw	r2,-148(fp)

    Fout0=Fout;
     c78:	e0bfd917 	ldw	r2,-156(fp)
     c7c:	e0bfff15 	stw	r2,-4(fp)
    Fout1=Fout0+m;
     c80:	e0bfd617 	ldw	r2,-168(fp)
     c84:	100490fa 	slli	r2,r2,3
     c88:	e0ffff17 	ldw	r3,-4(fp)
     c8c:	1885883a 	add	r2,r3,r2
     c90:	e0bffe15 	stw	r2,-8(fp)
    Fout2=Fout0+2*m;
     c94:	e0bfd617 	ldw	r2,-168(fp)
     c98:	1004913a 	slli	r2,r2,4
     c9c:	e0ffff17 	ldw	r3,-4(fp)
     ca0:	1885883a 	add	r2,r3,r2
     ca4:	e0bffd15 	stw	r2,-12(fp)
    Fout3=Fout0+3*m;
     ca8:	e0bfd617 	ldw	r2,-168(fp)
     cac:	10800624 	muli	r2,r2,24
     cb0:	e0ffff17 	ldw	r3,-4(fp)
     cb4:	1885883a 	add	r2,r3,r2
     cb8:	e0bffc15 	stw	r2,-16(fp)
    Fout4=Fout0+4*m;
     cbc:	e0bfd617 	ldw	r2,-168(fp)
     cc0:	1004917a 	slli	r2,r2,5
     cc4:	e0ffff17 	ldw	r3,-4(fp)
     cc8:	1885883a 	add	r2,r3,r2
     ccc:	e0bffb15 	stw	r2,-20(fp)

    tw=st->twiddles;
     cd0:	e0bfd717 	ldw	r2,-164(fp)
     cd4:	10804204 	addi	r2,r2,264
     cd8:	e0bff815 	stw	r2,-32(fp)
    for ( u=0; u<m; ++u ) {
     cdc:	e03ffa15 	stw	zero,-24(fp)
     ce0:	00016806 	br	1284 <kf_bfly5+0x684>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
     ce4:	e0bfff17 	ldw	r2,-4(fp)
     ce8:	10c00017 	ldw	r3,0(r2)
     cec:	e0ffde15 	stw	r3,-136(fp)
     cf0:	10800117 	ldw	r2,4(r2)
     cf4:	e0bfdf15 	stw	r2,-132(fp)

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
     cf8:	e0bffe17 	ldw	r2,-8(fp)
     cfc:	10c00017 	ldw	r3,0(r2)
     d00:	e13ffa17 	ldw	r4,-24(fp)
     d04:	e0bfd817 	ldw	r2,-160(fp)
     d08:	2085383a 	mul	r2,r4,r2
     d0c:	100490fa 	slli	r2,r2,3
     d10:	e13ff817 	ldw	r4,-32(fp)
     d14:	2089883a 	add	r4,r4,r2
     d18:	20800017 	ldw	r2,0(r4)
     d1c:	1887ff32 	custom	252,r3,r3,r2
     d20:	e0bffe17 	ldw	r2,-8(fp)
     d24:	11000117 	ldw	r4,4(r2)
     d28:	e17ffa17 	ldw	r5,-24(fp)
     d2c:	e0bfd817 	ldw	r2,-160(fp)
     d30:	2885383a 	mul	r2,r5,r2
     d34:	100490fa 	slli	r2,r2,3
     d38:	e17ff817 	ldw	r5,-32(fp)
     d3c:	288b883a 	add	r5,r5,r2
     d40:	28800117 	ldw	r2,4(r5)
     d44:	2085ff32 	custom	252,r2,r4,r2
     d48:	1885ffb2 	custom	254,r2,r3,r2
     d4c:	e0bfe015 	stw	r2,-128(fp)
     d50:	e0bffe17 	ldw	r2,-8(fp)
     d54:	10c00017 	ldw	r3,0(r2)
     d58:	e13ffa17 	ldw	r4,-24(fp)
     d5c:	e0bfd817 	ldw	r2,-160(fp)
     d60:	2085383a 	mul	r2,r4,r2
     d64:	100490fa 	slli	r2,r2,3
     d68:	e13ff817 	ldw	r4,-32(fp)
     d6c:	2089883a 	add	r4,r4,r2
     d70:	20800117 	ldw	r2,4(r4)
     d74:	1887ff32 	custom	252,r3,r3,r2
     d78:	e0bffe17 	ldw	r2,-8(fp)
     d7c:	11000117 	ldw	r4,4(r2)
     d80:	e17ffa17 	ldw	r5,-24(fp)
     d84:	e0bfd817 	ldw	r2,-160(fp)
     d88:	2885383a 	mul	r2,r5,r2
     d8c:	100490fa 	slli	r2,r2,3
     d90:	e17ff817 	ldw	r5,-32(fp)
     d94:	288b883a 	add	r5,r5,r2
     d98:	28800017 	ldw	r2,0(r5)
     d9c:	2085ff32 	custom	252,r2,r4,r2
     da0:	1885ff72 	custom	253,r2,r3,r2
     da4:	e0bfe115 	stw	r2,-124(fp)
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
     da8:	e0bffd17 	ldw	r2,-12(fp)
     dac:	10c00017 	ldw	r3,0(r2)
     db0:	e13ffa17 	ldw	r4,-24(fp)
     db4:	e0bfd817 	ldw	r2,-160(fp)
     db8:	2085383a 	mul	r2,r4,r2
     dbc:	1004913a 	slli	r2,r2,4
     dc0:	e13ff817 	ldw	r4,-32(fp)
     dc4:	2089883a 	add	r4,r4,r2
     dc8:	20800017 	ldw	r2,0(r4)
     dcc:	1887ff32 	custom	252,r3,r3,r2
     dd0:	e0bffd17 	ldw	r2,-12(fp)
     dd4:	11000117 	ldw	r4,4(r2)
     dd8:	e17ffa17 	ldw	r5,-24(fp)
     ddc:	e0bfd817 	ldw	r2,-160(fp)
     de0:	2885383a 	mul	r2,r5,r2
     de4:	1004913a 	slli	r2,r2,4
     de8:	e17ff817 	ldw	r5,-32(fp)
     dec:	288b883a 	add	r5,r5,r2
     df0:	28800117 	ldw	r2,4(r5)
     df4:	2085ff32 	custom	252,r2,r4,r2
     df8:	1885ffb2 	custom	254,r2,r3,r2
     dfc:	e0bfe215 	stw	r2,-120(fp)
     e00:	e0bffd17 	ldw	r2,-12(fp)
     e04:	10c00017 	ldw	r3,0(r2)
     e08:	e13ffa17 	ldw	r4,-24(fp)
     e0c:	e0bfd817 	ldw	r2,-160(fp)
     e10:	2085383a 	mul	r2,r4,r2
     e14:	1004913a 	slli	r2,r2,4
     e18:	e13ff817 	ldw	r4,-32(fp)
     e1c:	2089883a 	add	r4,r4,r2
     e20:	20800117 	ldw	r2,4(r4)
     e24:	1887ff32 	custom	252,r3,r3,r2
     e28:	e0bffd17 	ldw	r2,-12(fp)
     e2c:	11000117 	ldw	r4,4(r2)
     e30:	e17ffa17 	ldw	r5,-24(fp)
     e34:	e0bfd817 	ldw	r2,-160(fp)
     e38:	2885383a 	mul	r2,r5,r2
     e3c:	1004913a 	slli	r2,r2,4
     e40:	e17ff817 	ldw	r5,-32(fp)
     e44:	288b883a 	add	r5,r5,r2
     e48:	28800017 	ldw	r2,0(r5)
     e4c:	2085ff32 	custom	252,r2,r4,r2
     e50:	1885ff72 	custom	253,r2,r3,r2
     e54:	e0bfe315 	stw	r2,-116(fp)
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
     e58:	e0bffc17 	ldw	r2,-16(fp)
     e5c:	10c00017 	ldw	r3,0(r2)
     e60:	e13ffa17 	ldw	r4,-24(fp)
     e64:	e0bfd817 	ldw	r2,-160(fp)
     e68:	2085383a 	mul	r2,r4,r2
     e6c:	10800624 	muli	r2,r2,24
     e70:	e13ff817 	ldw	r4,-32(fp)
     e74:	2089883a 	add	r4,r4,r2
     e78:	20800017 	ldw	r2,0(r4)
     e7c:	1887ff32 	custom	252,r3,r3,r2
     e80:	e0bffc17 	ldw	r2,-16(fp)
     e84:	11000117 	ldw	r4,4(r2)
     e88:	e17ffa17 	ldw	r5,-24(fp)
     e8c:	e0bfd817 	ldw	r2,-160(fp)
     e90:	2885383a 	mul	r2,r5,r2
     e94:	10800624 	muli	r2,r2,24
     e98:	e17ff817 	ldw	r5,-32(fp)
     e9c:	288b883a 	add	r5,r5,r2
     ea0:	28800117 	ldw	r2,4(r5)
     ea4:	2085ff32 	custom	252,r2,r4,r2
     ea8:	1885ffb2 	custom	254,r2,r3,r2
     eac:	e0bfe415 	stw	r2,-112(fp)
     eb0:	e0bffc17 	ldw	r2,-16(fp)
     eb4:	10c00017 	ldw	r3,0(r2)
     eb8:	e13ffa17 	ldw	r4,-24(fp)
     ebc:	e0bfd817 	ldw	r2,-160(fp)
     ec0:	2085383a 	mul	r2,r4,r2
     ec4:	10800624 	muli	r2,r2,24
     ec8:	e13ff817 	ldw	r4,-32(fp)
     ecc:	2089883a 	add	r4,r4,r2
     ed0:	20800117 	ldw	r2,4(r4)
     ed4:	1887ff32 	custom	252,r3,r3,r2
     ed8:	e0bffc17 	ldw	r2,-16(fp)
     edc:	11000117 	ldw	r4,4(r2)
     ee0:	e17ffa17 	ldw	r5,-24(fp)
     ee4:	e0bfd817 	ldw	r2,-160(fp)
     ee8:	2885383a 	mul	r2,r5,r2
     eec:	10800624 	muli	r2,r2,24
     ef0:	e17ff817 	ldw	r5,-32(fp)
     ef4:	288b883a 	add	r5,r5,r2
     ef8:	28800017 	ldw	r2,0(r5)
     efc:	2085ff32 	custom	252,r2,r4,r2
     f00:	1885ff72 	custom	253,r2,r3,r2
     f04:	e0bfe515 	stw	r2,-108(fp)
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
     f08:	e0bffb17 	ldw	r2,-20(fp)
     f0c:	10c00017 	ldw	r3,0(r2)
     f10:	e13ffa17 	ldw	r4,-24(fp)
     f14:	e0bfd817 	ldw	r2,-160(fp)
     f18:	2085383a 	mul	r2,r4,r2
     f1c:	1004917a 	slli	r2,r2,5
     f20:	e13ff817 	ldw	r4,-32(fp)
     f24:	2089883a 	add	r4,r4,r2
     f28:	20800017 	ldw	r2,0(r4)
     f2c:	1887ff32 	custom	252,r3,r3,r2
     f30:	e0bffb17 	ldw	r2,-20(fp)
     f34:	11000117 	ldw	r4,4(r2)
     f38:	e17ffa17 	ldw	r5,-24(fp)
     f3c:	e0bfd817 	ldw	r2,-160(fp)
     f40:	2885383a 	mul	r2,r5,r2
     f44:	1004917a 	slli	r2,r2,5
     f48:	e17ff817 	ldw	r5,-32(fp)
     f4c:	288b883a 	add	r5,r5,r2
     f50:	28800117 	ldw	r2,4(r5)
     f54:	2085ff32 	custom	252,r2,r4,r2
     f58:	1885ffb2 	custom	254,r2,r3,r2
     f5c:	e0bfe615 	stw	r2,-104(fp)
     f60:	e0bffb17 	ldw	r2,-20(fp)
     f64:	10c00017 	ldw	r3,0(r2)
     f68:	e13ffa17 	ldw	r4,-24(fp)
     f6c:	e0bfd817 	ldw	r2,-160(fp)
     f70:	2085383a 	mul	r2,r4,r2
     f74:	1004917a 	slli	r2,r2,5
     f78:	e13ff817 	ldw	r4,-32(fp)
     f7c:	2089883a 	add	r4,r4,r2
     f80:	20800117 	ldw	r2,4(r4)
     f84:	1887ff32 	custom	252,r3,r3,r2
     f88:	e0bffb17 	ldw	r2,-20(fp)
     f8c:	11000117 	ldw	r4,4(r2)
     f90:	e17ffa17 	ldw	r5,-24(fp)
     f94:	e0bfd817 	ldw	r2,-160(fp)
     f98:	2885383a 	mul	r2,r5,r2
     f9c:	1004917a 	slli	r2,r2,5
     fa0:	e17ff817 	ldw	r5,-32(fp)
     fa4:	288b883a 	add	r5,r5,r2
     fa8:	28800017 	ldw	r2,0(r5)
     fac:	2085ff32 	custom	252,r2,r4,r2
     fb0:	1885ff72 	custom	253,r2,r3,r2
     fb4:	e0bfe715 	stw	r2,-100(fp)

        C_ADD( scratch[7],scratch[1],scratch[4]);
     fb8:	e0ffe017 	ldw	r3,-128(fp)
     fbc:	e0bfe617 	ldw	r2,-104(fp)
     fc0:	1885ff72 	custom	253,r2,r3,r2
     fc4:	e0bfec15 	stw	r2,-80(fp)
     fc8:	e0ffe117 	ldw	r3,-124(fp)
     fcc:	e0bfe717 	ldw	r2,-100(fp)
     fd0:	1885ff72 	custom	253,r2,r3,r2
     fd4:	e0bfed15 	stw	r2,-76(fp)
        C_SUB( scratch[10],scratch[1],scratch[4]);
     fd8:	e0ffe017 	ldw	r3,-128(fp)
     fdc:	e0bfe617 	ldw	r2,-104(fp)
     fe0:	1885ffb2 	custom	254,r2,r3,r2
     fe4:	e0bff215 	stw	r2,-56(fp)
     fe8:	e0ffe117 	ldw	r3,-124(fp)
     fec:	e0bfe717 	ldw	r2,-100(fp)
     ff0:	1885ffb2 	custom	254,r2,r3,r2
     ff4:	e0bff315 	stw	r2,-52(fp)
        C_ADD( scratch[8],scratch[2],scratch[3]);
     ff8:	e0ffe217 	ldw	r3,-120(fp)
     ffc:	e0bfe417 	ldw	r2,-112(fp)
    1000:	1885ff72 	custom	253,r2,r3,r2
    1004:	e0bfee15 	stw	r2,-72(fp)
    1008:	e0ffe317 	ldw	r3,-116(fp)
    100c:	e0bfe517 	ldw	r2,-108(fp)
    1010:	1885ff72 	custom	253,r2,r3,r2
    1014:	e0bfef15 	stw	r2,-68(fp)
        C_SUB( scratch[9],scratch[2],scratch[3]);
    1018:	e0ffe217 	ldw	r3,-120(fp)
    101c:	e0bfe417 	ldw	r2,-112(fp)
    1020:	1885ffb2 	custom	254,r2,r3,r2
    1024:	e0bff015 	stw	r2,-64(fp)
    1028:	e0ffe317 	ldw	r3,-116(fp)
    102c:	e0bfe517 	ldw	r2,-108(fp)
    1030:	1885ffb2 	custom	254,r2,r3,r2
    1034:	e0bff115 	stw	r2,-60(fp)

        Fout0->r += scratch[7].r + scratch[8].r;
    1038:	e0bfff17 	ldw	r2,-4(fp)
    103c:	10c00017 	ldw	r3,0(r2)
    1040:	e13fec17 	ldw	r4,-80(fp)
    1044:	e0bfee17 	ldw	r2,-72(fp)
    1048:	2085ff72 	custom	253,r2,r4,r2
    104c:	1887ff72 	custom	253,r3,r3,r2
    1050:	e0bfff17 	ldw	r2,-4(fp)
    1054:	10c00015 	stw	r3,0(r2)
        Fout0->i += scratch[7].i + scratch[8].i;
    1058:	e0bfff17 	ldw	r2,-4(fp)
    105c:	10c00117 	ldw	r3,4(r2)
    1060:	e13fed17 	ldw	r4,-76(fp)
    1064:	e0bfef17 	ldw	r2,-68(fp)
    1068:	2085ff72 	custom	253,r2,r4,r2
    106c:	1887ff72 	custom	253,r3,r3,r2
    1070:	e0bfff17 	ldw	r2,-4(fp)
    1074:	10c00115 	stw	r3,4(r2)

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    1078:	e0ffde17 	ldw	r3,-136(fp)
    107c:	e13fec17 	ldw	r4,-80(fp)
    1080:	e0bfdc17 	ldw	r2,-144(fp)
    1084:	2085ff32 	custom	252,r2,r4,r2
    1088:	1887ff72 	custom	253,r3,r3,r2
    108c:	e13fee17 	ldw	r4,-72(fp)
    1090:	e0bfda17 	ldw	r2,-152(fp)
    1094:	2085ff32 	custom	252,r2,r4,r2
    1098:	1885ff72 	custom	253,r2,r3,r2
    109c:	e0bfe815 	stw	r2,-96(fp)
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    10a0:	e0ffdf17 	ldw	r3,-132(fp)
    10a4:	e13fed17 	ldw	r4,-76(fp)
    10a8:	e0bfdc17 	ldw	r2,-144(fp)
    10ac:	2085ff32 	custom	252,r2,r4,r2
    10b0:	1887ff72 	custom	253,r3,r3,r2
    10b4:	e13fef17 	ldw	r4,-68(fp)
    10b8:	e0bfda17 	ldw	r2,-152(fp)
    10bc:	2085ff32 	custom	252,r2,r4,r2
    10c0:	1885ff72 	custom	253,r2,r3,r2
    10c4:	e0bfe915 	stw	r2,-92(fp)

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    10c8:	e0fff317 	ldw	r3,-52(fp)
    10cc:	e0bfdd17 	ldw	r2,-140(fp)
    10d0:	1887ff32 	custom	252,r3,r3,r2
    10d4:	e13ff117 	ldw	r4,-60(fp)
    10d8:	e0bfdb17 	ldw	r2,-148(fp)
    10dc:	2085ff32 	custom	252,r2,r4,r2
    10e0:	1885ff72 	custom	253,r2,r3,r2
    10e4:	e0bfea15 	stw	r2,-88(fp)
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    10e8:	e0fff217 	ldw	r3,-56(fp)
    10ec:	e0bfdd17 	ldw	r2,-140(fp)
    10f0:	1885ff32 	custom	252,r2,r3,r2
    10f4:	10e0003c 	xorhi	r3,r2,32768
    10f8:	e13ff017 	ldw	r4,-64(fp)
    10fc:	e0bfdb17 	ldw	r2,-148(fp)
    1100:	2085ff32 	custom	252,r2,r4,r2
    1104:	1885ffb2 	custom	254,r2,r3,r2
    1108:	e0bfeb15 	stw	r2,-84(fp)

        C_SUB(*Fout1,scratch[5],scratch[6]);
    110c:	e0ffe817 	ldw	r3,-96(fp)
    1110:	e0bfea17 	ldw	r2,-88(fp)
    1114:	1887ffb2 	custom	254,r3,r3,r2
    1118:	e0bffe17 	ldw	r2,-8(fp)
    111c:	10c00015 	stw	r3,0(r2)
    1120:	e0ffe917 	ldw	r3,-92(fp)
    1124:	e0bfeb17 	ldw	r2,-84(fp)
    1128:	1887ffb2 	custom	254,r3,r3,r2
    112c:	e0bffe17 	ldw	r2,-8(fp)
    1130:	10c00115 	stw	r3,4(r2)
        C_ADD(*Fout4,scratch[5],scratch[6]);
    1134:	e0ffe817 	ldw	r3,-96(fp)
    1138:	e0bfea17 	ldw	r2,-88(fp)
    113c:	1887ff72 	custom	253,r3,r3,r2
    1140:	e0bffb17 	ldw	r2,-20(fp)
    1144:	10c00015 	stw	r3,0(r2)
    1148:	e0ffe917 	ldw	r3,-92(fp)
    114c:	e0bfeb17 	ldw	r2,-84(fp)
    1150:	1887ff72 	custom	253,r3,r3,r2
    1154:	e0bffb17 	ldw	r2,-20(fp)
    1158:	10c00115 	stw	r3,4(r2)

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    115c:	e0ffde17 	ldw	r3,-136(fp)
    1160:	e13fec17 	ldw	r4,-80(fp)
    1164:	e0bfda17 	ldw	r2,-152(fp)
    1168:	2085ff32 	custom	252,r2,r4,r2
    116c:	1887ff72 	custom	253,r3,r3,r2
    1170:	e13fee17 	ldw	r4,-72(fp)
    1174:	e0bfdc17 	ldw	r2,-144(fp)
    1178:	2085ff32 	custom	252,r2,r4,r2
    117c:	1885ff72 	custom	253,r2,r3,r2
    1180:	e0bff415 	stw	r2,-48(fp)
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    1184:	e0ffdf17 	ldw	r3,-132(fp)
    1188:	e13fed17 	ldw	r4,-76(fp)
    118c:	e0bfda17 	ldw	r2,-152(fp)
    1190:	2085ff32 	custom	252,r2,r4,r2
    1194:	1887ff72 	custom	253,r3,r3,r2
    1198:	e13fef17 	ldw	r4,-68(fp)
    119c:	e0bfdc17 	ldw	r2,-144(fp)
    11a0:	2085ff32 	custom	252,r2,r4,r2
    11a4:	1885ff72 	custom	253,r2,r3,r2
    11a8:	e0bff515 	stw	r2,-44(fp)
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    11ac:	e0fff117 	ldw	r3,-60(fp)
    11b0:	e0bfdd17 	ldw	r2,-140(fp)
    11b4:	1887ff32 	custom	252,r3,r3,r2
    11b8:	e13ff317 	ldw	r4,-52(fp)
    11bc:	e0bfdb17 	ldw	r2,-148(fp)
    11c0:	2085ff32 	custom	252,r2,r4,r2
    11c4:	1885ffb2 	custom	254,r2,r3,r2
    11c8:	e0bff615 	stw	r2,-40(fp)
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    11cc:	e0fff217 	ldw	r3,-56(fp)
    11d0:	e0bfdb17 	ldw	r2,-148(fp)
    11d4:	1887ff32 	custom	252,r3,r3,r2
    11d8:	e13ff017 	ldw	r4,-64(fp)
    11dc:	e0bfdd17 	ldw	r2,-140(fp)
    11e0:	2085ff32 	custom	252,r2,r4,r2
    11e4:	1885ffb2 	custom	254,r2,r3,r2
    11e8:	e0bff715 	stw	r2,-36(fp)

        C_ADD(*Fout2,scratch[11],scratch[12]);
    11ec:	e0fff417 	ldw	r3,-48(fp)
    11f0:	e0bff617 	ldw	r2,-40(fp)
    11f4:	1887ff72 	custom	253,r3,r3,r2
    11f8:	e0bffd17 	ldw	r2,-12(fp)
    11fc:	10c00015 	stw	r3,0(r2)
    1200:	e0fff517 	ldw	r3,-44(fp)
    1204:	e0bff717 	ldw	r2,-36(fp)
    1208:	1887ff72 	custom	253,r3,r3,r2
    120c:	e0bffd17 	ldw	r2,-12(fp)
    1210:	10c00115 	stw	r3,4(r2)
        C_SUB(*Fout3,scratch[11],scratch[12]);
    1214:	e0fff417 	ldw	r3,-48(fp)
    1218:	e0bff617 	ldw	r2,-40(fp)
    121c:	1887ffb2 	custom	254,r3,r3,r2
    1220:	e0bffc17 	ldw	r2,-16(fp)
    1224:	10c00015 	stw	r3,0(r2)
    1228:	e0fff517 	ldw	r3,-44(fp)
    122c:	e0bff717 	ldw	r2,-36(fp)
    1230:	1887ffb2 	custom	254,r3,r3,r2
    1234:	e0bffc17 	ldw	r2,-16(fp)
    1238:	10c00115 	stw	r3,4(r2)

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
    123c:	e0bfff17 	ldw	r2,-4(fp)
    1240:	10800204 	addi	r2,r2,8
    1244:	e0bfff15 	stw	r2,-4(fp)
    1248:	e0bffe17 	ldw	r2,-8(fp)
    124c:	10800204 	addi	r2,r2,8
    1250:	e0bffe15 	stw	r2,-8(fp)
    1254:	e0bffd17 	ldw	r2,-12(fp)
    1258:	10800204 	addi	r2,r2,8
    125c:	e0bffd15 	stw	r2,-12(fp)
    1260:	e0bffc17 	ldw	r2,-16(fp)
    1264:	10800204 	addi	r2,r2,8
    1268:	e0bffc15 	stw	r2,-16(fp)
    126c:	e0bffb17 	ldw	r2,-20(fp)
    1270:	10800204 	addi	r2,r2,8
    1274:	e0bffb15 	stw	r2,-20(fp)
    for ( u=0; u<m; ++u ) {
    1278:	e0bffa17 	ldw	r2,-24(fp)
    127c:	10800044 	addi	r2,r2,1
    1280:	e0bffa15 	stw	r2,-24(fp)
    1284:	e0fffa17 	ldw	r3,-24(fp)
    1288:	e0bfd617 	ldw	r2,-168(fp)
    128c:	18be9516 	blt	r3,r2,ce4 <kf_bfly5+0xe4>
    }
}
    1290:	0001883a 	nop
    1294:	0001883a 	nop
    1298:	e037883a 	mov	sp,fp
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00104 	addi	sp,sp,4
    12a4:	f800283a 	ret

000012a8 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
    12a8:	defff004 	addi	sp,sp,-64
    12ac:	dfc00f15 	stw	ra,60(sp)
    12b0:	df000e15 	stw	fp,56(sp)
    12b4:	df000e04 	addi	fp,sp,56
    12b8:	e13ff515 	stw	r4,-44(fp)
    12bc:	e17ff415 	stw	r5,-48(fp)
    12c0:	e1bff315 	stw	r6,-52(fp)
    12c4:	e1fff215 	stw	r7,-56(fp)
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
    12c8:	e0bff317 	ldw	r2,-52(fp)
    12cc:	10804204 	addi	r2,r2,264
    12d0:	e0bffa15 	stw	r2,-24(fp)
    kiss_fft_cpx t;
    int Norig = st->nfft;
    12d4:	e0bff317 	ldw	r2,-52(fp)
    12d8:	10800017 	ldw	r2,0(r2)
    12dc:	e0bff915 	stw	r2,-28(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
    12e0:	e0800217 	ldw	r2,8(fp)
    12e4:	100490fa 	slli	r2,r2,3
    12e8:	1009883a 	mov	r4,r2
    12ec:	000cc600 	call	cc60 <malloc>
    12f0:	e0bff815 	stw	r2,-32(fp)

    for ( u=0; u<m; ++u ) {
    12f4:	e03fff15 	stw	zero,-4(fp)
    12f8:	00009306 	br	1548 <kf_bfly_generic+0x2a0>
        k=u;
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    1304:	e03ffd15 	stw	zero,-12(fp)
    1308:	00001306 	br	1358 <kf_bfly_generic+0xb0>
            scratch[q1] = Fout[ k  ];
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	100490fa 	slli	r2,r2,3
    1314:	e0fff517 	ldw	r3,-44(fp)
    1318:	1887883a 	add	r3,r3,r2
    131c:	e0bffd17 	ldw	r2,-12(fp)
    1320:	100490fa 	slli	r2,r2,3
    1324:	e13ff817 	ldw	r4,-32(fp)
    1328:	2085883a 	add	r2,r4,r2
    132c:	19000017 	ldw	r4,0(r3)
    1330:	11000015 	stw	r4,0(r2)
    1334:	18c00117 	ldw	r3,4(r3)
    1338:	10c00115 	stw	r3,4(r2)
            C_FIXDIV(scratch[q1],p);
            k += m;
    133c:	e0fffe17 	ldw	r3,-8(fp)
    1340:	e0bff217 	ldw	r2,-56(fp)
    1344:	1885883a 	add	r2,r3,r2
    1348:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    134c:	e0bffd17 	ldw	r2,-12(fp)
    1350:	10800044 	addi	r2,r2,1
    1354:	e0bffd15 	stw	r2,-12(fp)
    1358:	e0fffd17 	ldw	r3,-12(fp)
    135c:	e0800217 	ldw	r2,8(fp)
    1360:	18bfea16 	blt	r3,r2,130c <kf_bfly_generic+0x64>
        }

        k=u;
    1364:	e0bfff17 	ldw	r2,-4(fp)
    1368:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    136c:	e03ffd15 	stw	zero,-12(fp)
    1370:	00006f06 	br	1530 <kf_bfly_generic+0x288>
            int twidx=0;
    1374:	e03ffb15 	stw	zero,-20(fp)
            Fout[ k ] = scratch[0];
    1378:	e0bffe17 	ldw	r2,-8(fp)
    137c:	100490fa 	slli	r2,r2,3
    1380:	e0fff517 	ldw	r3,-44(fp)
    1384:	1885883a 	add	r2,r3,r2
    1388:	e0fff817 	ldw	r3,-32(fp)
    138c:	19000017 	ldw	r4,0(r3)
    1390:	11000015 	stw	r4,0(r2)
    1394:	18c00117 	ldw	r3,4(r3)
    1398:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
    139c:	00800044 	movi	r2,1
    13a0:	e0bffc15 	stw	r2,-16(fp)
    13a4:	00005806 	br	1508 <kf_bfly_generic+0x260>
                twidx += fstride * k;
    13a8:	e0fffe17 	ldw	r3,-8(fp)
    13ac:	e0bff417 	ldw	r2,-48(fp)
    13b0:	1887383a 	mul	r3,r3,r2
    13b4:	e0bffb17 	ldw	r2,-20(fp)
    13b8:	1885883a 	add	r2,r3,r2
    13bc:	e0bffb15 	stw	r2,-20(fp)
                if (twidx>=Norig) twidx-=Norig;
    13c0:	e0fffb17 	ldw	r3,-20(fp)
    13c4:	e0bff917 	ldw	r2,-28(fp)
    13c8:	18800416 	blt	r3,r2,13dc <kf_bfly_generic+0x134>
    13cc:	e0fffb17 	ldw	r3,-20(fp)
    13d0:	e0bff917 	ldw	r2,-28(fp)
    13d4:	1885c83a 	sub	r2,r3,r2
    13d8:	e0bffb15 	stw	r2,-20(fp)
                C_MUL(t,scratch[q] , twiddles[twidx] );
    13dc:	e0bffc17 	ldw	r2,-16(fp)
    13e0:	100490fa 	slli	r2,r2,3
    13e4:	e0fff817 	ldw	r3,-32(fp)
    13e8:	1885883a 	add	r2,r3,r2
    13ec:	10c00017 	ldw	r3,0(r2)
    13f0:	e0bffb17 	ldw	r2,-20(fp)
    13f4:	100490fa 	slli	r2,r2,3
    13f8:	e13ffa17 	ldw	r4,-24(fp)
    13fc:	2089883a 	add	r4,r4,r2
    1400:	20800017 	ldw	r2,0(r4)
    1404:	1887ff32 	custom	252,r3,r3,r2
    1408:	e0bffc17 	ldw	r2,-16(fp)
    140c:	100490fa 	slli	r2,r2,3
    1410:	e13ff817 	ldw	r4,-32(fp)
    1414:	2085883a 	add	r2,r4,r2
    1418:	11000117 	ldw	r4,4(r2)
    141c:	e0bffb17 	ldw	r2,-20(fp)
    1420:	100490fa 	slli	r2,r2,3
    1424:	e17ffa17 	ldw	r5,-24(fp)
    1428:	288b883a 	add	r5,r5,r2
    142c:	28800117 	ldw	r2,4(r5)
    1430:	2085ff32 	custom	252,r2,r4,r2
    1434:	1885ffb2 	custom	254,r2,r3,r2
    1438:	e0bff615 	stw	r2,-40(fp)
    143c:	e0bffc17 	ldw	r2,-16(fp)
    1440:	100490fa 	slli	r2,r2,3
    1444:	e0fff817 	ldw	r3,-32(fp)
    1448:	1885883a 	add	r2,r3,r2
    144c:	10c00017 	ldw	r3,0(r2)
    1450:	e0bffb17 	ldw	r2,-20(fp)
    1454:	100490fa 	slli	r2,r2,3
    1458:	e13ffa17 	ldw	r4,-24(fp)
    145c:	2089883a 	add	r4,r4,r2
    1460:	20800117 	ldw	r2,4(r4)
    1464:	1887ff32 	custom	252,r3,r3,r2
    1468:	e0bffc17 	ldw	r2,-16(fp)
    146c:	100490fa 	slli	r2,r2,3
    1470:	e13ff817 	ldw	r4,-32(fp)
    1474:	2085883a 	add	r2,r4,r2
    1478:	11000117 	ldw	r4,4(r2)
    147c:	e0bffb17 	ldw	r2,-20(fp)
    1480:	100490fa 	slli	r2,r2,3
    1484:	e17ffa17 	ldw	r5,-24(fp)
    1488:	288b883a 	add	r5,r5,r2
    148c:	28800017 	ldw	r2,0(r5)
    1490:	2085ff32 	custom	252,r2,r4,r2
    1494:	1885ff72 	custom	253,r2,r3,r2
    1498:	e0bff715 	stw	r2,-36(fp)
                C_ADDTO( Fout[ k ] ,t);
    149c:	e0bffe17 	ldw	r2,-8(fp)
    14a0:	100490fa 	slli	r2,r2,3
    14a4:	e0fff517 	ldw	r3,-44(fp)
    14a8:	1885883a 	add	r2,r3,r2
    14ac:	11000017 	ldw	r4,0(r2)
    14b0:	e0fff617 	ldw	r3,-40(fp)
    14b4:	e0bffe17 	ldw	r2,-8(fp)
    14b8:	100490fa 	slli	r2,r2,3
    14bc:	e17ff517 	ldw	r5,-44(fp)
    14c0:	2885883a 	add	r2,r5,r2
    14c4:	20c7ff72 	custom	253,r3,r4,r3
    14c8:	10c00015 	stw	r3,0(r2)
    14cc:	e0bffe17 	ldw	r2,-8(fp)
    14d0:	100490fa 	slli	r2,r2,3
    14d4:	e0fff517 	ldw	r3,-44(fp)
    14d8:	1885883a 	add	r2,r3,r2
    14dc:	11000117 	ldw	r4,4(r2)
    14e0:	e0fff717 	ldw	r3,-36(fp)
    14e4:	e0bffe17 	ldw	r2,-8(fp)
    14e8:	100490fa 	slli	r2,r2,3
    14ec:	e17ff517 	ldw	r5,-44(fp)
    14f0:	2885883a 	add	r2,r5,r2
    14f4:	20c7ff72 	custom	253,r3,r4,r3
    14f8:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
    14fc:	e0bffc17 	ldw	r2,-16(fp)
    1500:	10800044 	addi	r2,r2,1
    1504:	e0bffc15 	stw	r2,-16(fp)
    1508:	e0fffc17 	ldw	r3,-16(fp)
    150c:	e0800217 	ldw	r2,8(fp)
    1510:	18bfa516 	blt	r3,r2,13a8 <kf_bfly_generic+0x100>
            }
            k += m;
    1514:	e0fffe17 	ldw	r3,-8(fp)
    1518:	e0bff217 	ldw	r2,-56(fp)
    151c:	1885883a 	add	r2,r3,r2
    1520:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    1524:	e0bffd17 	ldw	r2,-12(fp)
    1528:	10800044 	addi	r2,r2,1
    152c:	e0bffd15 	stw	r2,-12(fp)
    1530:	e0fffd17 	ldw	r3,-12(fp)
    1534:	e0800217 	ldw	r2,8(fp)
    1538:	18bf8e16 	blt	r3,r2,1374 <kf_bfly_generic+0xcc>
    for ( u=0; u<m; ++u ) {
    153c:	e0bfff17 	ldw	r2,-4(fp)
    1540:	10800044 	addi	r2,r2,1
    1544:	e0bfff15 	stw	r2,-4(fp)
    1548:	e0ffff17 	ldw	r3,-4(fp)
    154c:	e0bff217 	ldw	r2,-56(fp)
    1550:	18bf6a16 	blt	r3,r2,12fc <kf_bfly_generic+0x54>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
    1554:	e13ff817 	ldw	r4,-32(fp)
    1558:	000cc700 	call	cc70 <free>
}
    155c:	0001883a 	nop
    1560:	e037883a 	mov	sp,fp
    1564:	dfc00117 	ldw	ra,4(sp)
    1568:	df000017 	ldw	fp,0(sp)
    156c:	dec00204 	addi	sp,sp,8
    1570:	f800283a 	ret

00001574 <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
    1574:	defff404 	addi	sp,sp,-48
    1578:	dfc00b15 	stw	ra,44(sp)
    157c:	df000a15 	stw	fp,40(sp)
    1580:	df000a04 	addi	fp,sp,40
    1584:	e13ffb15 	stw	r4,-20(fp)
    1588:	e17ffa15 	stw	r5,-24(fp)
    158c:	e1bff915 	stw	r6,-28(fp)
    1590:	e1fff815 	stw	r7,-32(fp)
    kiss_fft_cpx * Fout_beg=Fout;
    1594:	e0bffb17 	ldw	r2,-20(fp)
    1598:	e0bfff15 	stw	r2,-4(fp)
    const int p=*factors++; /* the radix  */
    159c:	e0800217 	ldw	r2,8(fp)
    15a0:	10c00104 	addi	r3,r2,4
    15a4:	e0c00215 	stw	r3,8(fp)
    15a8:	10800017 	ldw	r2,0(r2)
    15ac:	e0bffe15 	stw	r2,-8(fp)
    const int m=*factors++; /* stage's fft length/p */
    15b0:	e0800217 	ldw	r2,8(fp)
    15b4:	10c00104 	addi	r3,r2,4
    15b8:	e0c00215 	stw	r3,8(fp)
    15bc:	10800017 	ldw	r2,0(r2)
    15c0:	e0bffd15 	stw	r2,-12(fp)
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    15c4:	e0fffe17 	ldw	r3,-8(fp)
    15c8:	e0bffd17 	ldw	r2,-12(fp)
    15cc:	1885383a 	mul	r2,r3,r2
    15d0:	100490fa 	slli	r2,r2,3
    15d4:	e0fffb17 	ldw	r3,-20(fp)
    15d8:	1885883a 	add	r2,r3,r2
    15dc:	e0bffc15 	stw	r2,-16(fp)
        }
        return;
    }
#endif

    if (m==1) {
    15e0:	e0bffd17 	ldw	r2,-12(fp)
    15e4:	10800058 	cmpnei	r2,r2,1
    15e8:	1000141e 	bne	r2,zero,163c <kf_work+0xc8>
        do{
            *Fout = *f;
    15ec:	e0bffb17 	ldw	r2,-20(fp)
    15f0:	e0fffa17 	ldw	r3,-24(fp)
    15f4:	19000017 	ldw	r4,0(r3)
    15f8:	11000015 	stw	r4,0(r2)
    15fc:	18c00117 	ldw	r3,4(r3)
    1600:	10c00115 	stw	r3,4(r2)
            f += fstride*in_stride;
    1604:	e0fff817 	ldw	r3,-32(fp)
    1608:	e0bff917 	ldw	r2,-28(fp)
    160c:	1885383a 	mul	r2,r3,r2
    1610:	100490fa 	slli	r2,r2,3
    1614:	e0fffa17 	ldw	r3,-24(fp)
    1618:	1885883a 	add	r2,r3,r2
    161c:	e0bffa15 	stw	r2,-24(fp)
        }while(++Fout != Fout_end );
    1620:	e0bffb17 	ldw	r2,-20(fp)
    1624:	10800204 	addi	r2,r2,8
    1628:	e0bffb15 	stw	r2,-20(fp)
    162c:	e0fffb17 	ldw	r3,-20(fp)
    1630:	e0bffc17 	ldw	r2,-16(fp)
    1634:	18bfed1e 	bne	r3,r2,15ec <kf_work+0x78>
    1638:	00001b06 	br	16a8 <kf_work+0x134>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    163c:	e0fffe17 	ldw	r3,-8(fp)
    1640:	e0bff917 	ldw	r2,-28(fp)
    1644:	1887383a 	mul	r3,r3,r2
    1648:	e0800317 	ldw	r2,12(fp)
    164c:	d8800115 	stw	r2,4(sp)
    1650:	e0800217 	ldw	r2,8(fp)
    1654:	d8800015 	stw	r2,0(sp)
    1658:	e1fff817 	ldw	r7,-32(fp)
    165c:	180d883a 	mov	r6,r3
    1660:	e17ffa17 	ldw	r5,-24(fp)
    1664:	e13ffb17 	ldw	r4,-20(fp)
    1668:	00015740 	call	1574 <kf_work>
            f += fstride*in_stride;
    166c:	e0fff817 	ldw	r3,-32(fp)
    1670:	e0bff917 	ldw	r2,-28(fp)
    1674:	1885383a 	mul	r2,r3,r2
    1678:	100490fa 	slli	r2,r2,3
    167c:	e0fffa17 	ldw	r3,-24(fp)
    1680:	1885883a 	add	r2,r3,r2
    1684:	e0bffa15 	stw	r2,-24(fp)
        }while( (Fout += m) != Fout_end );
    1688:	e0bffd17 	ldw	r2,-12(fp)
    168c:	100490fa 	slli	r2,r2,3
    1690:	e0fffb17 	ldw	r3,-20(fp)
    1694:	1885883a 	add	r2,r3,r2
    1698:	e0bffb15 	stw	r2,-20(fp)
    169c:	e0fffb17 	ldw	r3,-20(fp)
    16a0:	e0bffc17 	ldw	r2,-16(fp)
    16a4:	18bfe51e 	bne	r3,r2,163c <kf_work+0xc8>
    }

    Fout=Fout_beg;
    16a8:	e0bfff17 	ldw	r2,-4(fp)
    16ac:	e0bffb15 	stw	r2,-20(fp)

    // recombine the p smaller DFTs
    switch (p) {
    16b0:	e0bffe17 	ldw	r2,-8(fp)
    16b4:	10800160 	cmpeqi	r2,r2,5
    16b8:	1000241e 	bne	r2,zero,174c <kf_work+0x1d8>
    16bc:	e0bffe17 	ldw	r2,-8(fp)
    16c0:	10800188 	cmpgei	r2,r2,6
    16c4:	1000271e 	bne	r2,zero,1764 <kf_work+0x1f0>
    16c8:	e0bffe17 	ldw	r2,-8(fp)
    16cc:	10800120 	cmpeqi	r2,r2,4
    16d0:	1000171e 	bne	r2,zero,1730 <kf_work+0x1bc>
    16d4:	e0bffe17 	ldw	r2,-8(fp)
    16d8:	10800148 	cmpgei	r2,r2,5
    16dc:	1000211e 	bne	r2,zero,1764 <kf_work+0x1f0>
    16e0:	e0bffe17 	ldw	r2,-8(fp)
    16e4:	108000a0 	cmpeqi	r2,r2,2
    16e8:	1000041e 	bne	r2,zero,16fc <kf_work+0x188>
    16ec:	e0bffe17 	ldw	r2,-8(fp)
    16f0:	108000e0 	cmpeqi	r2,r2,3
    16f4:	1000071e 	bne	r2,zero,1714 <kf_work+0x1a0>
    16f8:	00001a06 	br	1764 <kf_work+0x1f0>
        case 2: kf_bfly2(Fout,fstride,st,m); break;
    16fc:	e1fffd17 	ldw	r7,-12(fp)
    1700:	e1800317 	ldw	r6,12(fp)
    1704:	e17ff917 	ldw	r5,-28(fp)
    1708:	e13ffb17 	ldw	r4,-20(fp)
    170c:	00002780 	call	278 <kf_bfly2>
    1710:	00001c06 	br	1784 <kf_work+0x210>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
    1714:	e0bffd17 	ldw	r2,-12(fp)
    1718:	100f883a 	mov	r7,r2
    171c:	e1800317 	ldw	r6,12(fp)
    1720:	e17ff917 	ldw	r5,-28(fp)
    1724:	e13ffb17 	ldw	r4,-20(fp)
    1728:	00008680 	call	868 <kf_bfly3>
    172c:	00001506 	br	1784 <kf_work+0x210>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
    1730:	e0bffd17 	ldw	r2,-12(fp)
    1734:	100f883a 	mov	r7,r2
    1738:	e1800317 	ldw	r6,12(fp)
    173c:	e17ff917 	ldw	r5,-28(fp)
    1740:	e13ffb17 	ldw	r4,-20(fp)
    1744:	00003cc0 	call	3cc <kf_bfly4>
    1748:	00000e06 	br	1784 <kf_work+0x210>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
    174c:	e1fffd17 	ldw	r7,-12(fp)
    1750:	e1800317 	ldw	r6,12(fp)
    1754:	e17ff917 	ldw	r5,-28(fp)
    1758:	e13ffb17 	ldw	r4,-20(fp)
    175c:	0000c000 	call	c00 <kf_bfly5>
    1760:	00000806 	br	1784 <kf_work+0x210>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    1764:	e0bffe17 	ldw	r2,-8(fp)
    1768:	d8800015 	stw	r2,0(sp)
    176c:	e1fffd17 	ldw	r7,-12(fp)
    1770:	e1800317 	ldw	r6,12(fp)
    1774:	e17ff917 	ldw	r5,-28(fp)
    1778:	e13ffb17 	ldw	r4,-20(fp)
    177c:	00012a80 	call	12a8 <kf_bfly_generic>
    1780:	0001883a 	nop
    }
}
    1784:	0001883a 	nop
    1788:	e037883a 	mov	sp,fp
    178c:	dfc00117 	ldw	ra,4(sp)
    1790:	df000017 	ldw	fp,0(sp)
    1794:	dec00204 	addi	sp,sp,8
    1798:	f800283a 	ret

0000179c <kf_factor>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
    179c:	defff904 	addi	sp,sp,-28
    17a0:	dfc00615 	stw	ra,24(sp)
    17a4:	df000515 	stw	fp,20(sp)
    17a8:	df000504 	addi	fp,sp,20
    17ac:	e13ffc15 	stw	r4,-16(fp)
    17b0:	e17ffb15 	stw	r5,-20(fp)
    int p=4;
    17b4:	00800104 	movi	r2,4
    17b8:	e0bfff15 	stw	r2,-4(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
    17bc:	e13ffc17 	ldw	r4,-16(fp)
    17c0:	000c84c0 	call	c84c <__floatsidf>
    17c4:	100d883a 	mov	r6,r2
    17c8:	180f883a 	mov	r7,r3
    17cc:	3009883a 	mov	r4,r6
    17d0:	380b883a 	mov	r5,r7
    17d4:	00040f80 	call	40f8 <sqrt>
    17d8:	100d883a 	mov	r6,r2
    17dc:	180f883a 	mov	r7,r3
    17e0:	3009883a 	mov	r4,r6
    17e4:	380b883a 	mov	r5,r7
    17e8:	0003a340 	call	3a34 <floor>
    17ec:	e0bffd15 	stw	r2,-12(fp)
    17f0:	e0fffe15 	stw	r3,-8(fp)

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
    17f4:	00001d06 	br	186c <kf_factor+0xd0>
            switch (p) {
    17f8:	e0bfff17 	ldw	r2,-4(fp)
    17fc:	108000a0 	cmpeqi	r2,r2,2
    1800:	1000061e 	bne	r2,zero,181c <kf_factor+0x80>
    1804:	e0bfff17 	ldw	r2,-4(fp)
    1808:	10800118 	cmpnei	r2,r2,4
    180c:	1000061e 	bne	r2,zero,1828 <kf_factor+0x8c>
                case 4: p = 2; break;
    1810:	00800084 	movi	r2,2
    1814:	e0bfff15 	stw	r2,-4(fp)
    1818:	00000706 	br	1838 <kf_factor+0x9c>
                case 2: p = 3; break;
    181c:	008000c4 	movi	r2,3
    1820:	e0bfff15 	stw	r2,-4(fp)
    1824:	00000406 	br	1838 <kf_factor+0x9c>
                default: p += 2; break;
    1828:	e0bfff17 	ldw	r2,-4(fp)
    182c:	10800084 	addi	r2,r2,2
    1830:	e0bfff15 	stw	r2,-4(fp)
    1834:	0001883a 	nop
            }
            if (p > floor_sqrt)
    1838:	e13fff17 	ldw	r4,-4(fp)
    183c:	000c84c0 	call	c84c <__floatsidf>
    1840:	1009883a 	mov	r4,r2
    1844:	180b883a 	mov	r5,r3
    1848:	200d883a 	mov	r6,r4
    184c:	280f883a 	mov	r7,r5
    1850:	e13ffd17 	ldw	r4,-12(fp)
    1854:	e17ffe17 	ldw	r5,-8(fp)
    1858:	000b7100 	call	b710 <__ledf2>
    185c:	10000116 	blt	r2,zero,1864 <kf_factor+0xc8>
    1860:	00000206 	br	186c <kf_factor+0xd0>
                p = n;          /* no more factors, skip to end */
    1864:	e0bffc17 	ldw	r2,-16(fp)
    1868:	e0bfff15 	stw	r2,-4(fp)
        while (n % p) {
    186c:	e0bffc17 	ldw	r2,-16(fp)
    1870:	e0ffff17 	ldw	r3,-4(fp)
    1874:	10c9283a 	div	r4,r2,r3
    1878:	e0ffff17 	ldw	r3,-4(fp)
    187c:	20c7383a 	mul	r3,r4,r3
    1880:	10c5c83a 	sub	r2,r2,r3
    1884:	103fdc1e 	bne	r2,zero,17f8 <kf_factor+0x5c>
        }
        n /= p;
    1888:	e0fffc17 	ldw	r3,-16(fp)
    188c:	e0bfff17 	ldw	r2,-4(fp)
    1890:	1885283a 	div	r2,r3,r2
    1894:	e0bffc15 	stw	r2,-16(fp)
        *facbuf++ = p;
    1898:	e0bffb17 	ldw	r2,-20(fp)
    189c:	10c00104 	addi	r3,r2,4
    18a0:	e0fffb15 	stw	r3,-20(fp)
    18a4:	e0ffff17 	ldw	r3,-4(fp)
    18a8:	10c00015 	stw	r3,0(r2)
        *facbuf++ = n;
    18ac:	e0bffb17 	ldw	r2,-20(fp)
    18b0:	10c00104 	addi	r3,r2,4
    18b4:	e0fffb15 	stw	r3,-20(fp)
    18b8:	e0fffc17 	ldw	r3,-16(fp)
    18bc:	10c00015 	stw	r3,0(r2)
    } while (n > 1);
    18c0:	e0bffc17 	ldw	r2,-16(fp)
    18c4:	10800088 	cmpgei	r2,r2,2
    18c8:	103fe81e 	bne	r2,zero,186c <kf_factor+0xd0>
}
    18cc:	0001883a 	nop
    18d0:	0001883a 	nop
    18d4:	e037883a 	mov	sp,fp
    18d8:	dfc00117 	ldw	ra,4(sp)
    18dc:	df000017 	ldw	fp,0(sp)
    18e0:	dec00204 	addi	sp,sp,8
    18e4:	f800283a 	ret

000018e8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
    18e8:	deffef04 	addi	sp,sp,-68
    18ec:	dfc01015 	stw	ra,64(sp)
    18f0:	df000f15 	stw	fp,60(sp)
    18f4:	dcc00e15 	stw	r19,56(sp)
    18f8:	dc800d15 	stw	r18,52(sp)
    18fc:	dc400c15 	stw	r17,48(sp)
    1900:	dc000b15 	stw	r16,44(sp)
    1904:	df000f04 	addi	fp,sp,60
    1908:	e13ff415 	stw	r4,-48(fp)
    190c:	e17ff315 	stw	r5,-52(fp)
    1910:	e1bff215 	stw	r6,-56(fp)
    1914:	e1fff115 	stw	r7,-60(fp)
    kiss_fft_cfg st=NULL;
    1918:	e03ffb15 	stw	zero,-20(fp)
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
    191c:	e0bff417 	ldw	r2,-48(fp)
    1920:	10800844 	addi	r2,r2,33
    size_t memneeded = sizeof(struct kiss_fft_state)
    1924:	100490fa 	slli	r2,r2,3
    1928:	e0bff715 	stw	r2,-36(fp)

    if ( lenmem==NULL ) {
    192c:	e0bff117 	ldw	r2,-60(fp)
    1930:	1000041e 	bne	r2,zero,1944 <kiss_fft_alloc+0x5c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
    1934:	e13ff717 	ldw	r4,-36(fp)
    1938:	000cc600 	call	cc60 <malloc>
    193c:	e0bffb15 	stw	r2,-20(fp)
    1940:	00000b06 	br	1970 <kiss_fft_alloc+0x88>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
    1944:	e0bff217 	ldw	r2,-56(fp)
    1948:	10000626 	beq	r2,zero,1964 <kiss_fft_alloc+0x7c>
    194c:	e0bff117 	ldw	r2,-60(fp)
    1950:	10c00017 	ldw	r3,0(r2)
    1954:	e0bff717 	ldw	r2,-36(fp)
    1958:	18800236 	bltu	r3,r2,1964 <kiss_fft_alloc+0x7c>
            st = (kiss_fft_cfg)mem;
    195c:	e0bff217 	ldw	r2,-56(fp)
    1960:	e0bffb15 	stw	r2,-20(fp)
        *lenmem = memneeded;
    1964:	e0bff117 	ldw	r2,-60(fp)
    1968:	e0fff717 	ldw	r3,-36(fp)
    196c:	10c00015 	stw	r3,0(r2)
    }
    if (st) {
    1970:	e0bffb17 	ldw	r2,-20(fp)
    1974:	10006126 	beq	r2,zero,1afc <kiss_fft_alloc+0x214>
        int i;
        st->nfft=nfft;
    1978:	e0bffb17 	ldw	r2,-20(fp)
    197c:	e0fff417 	ldw	r3,-48(fp)
    1980:	10c00015 	stw	r3,0(r2)
        st->inverse = inverse_fft;
    1984:	e0bffb17 	ldw	r2,-20(fp)
    1988:	e0fff317 	ldw	r3,-52(fp)
    198c:	10c00115 	stw	r3,4(r2)

        for (i=0;i<nfft;++i) {
    1990:	e03ffa15 	stw	zero,-24(fp)
    1994:	00005106 	br	1adc <kiss_fft_alloc+0x1f4>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
    1998:	00980034 	movhi	r2,24576
    199c:	e0bff515 	stw	r2,-44(fp)
    19a0:	00900274 	movhi	r2,16393
    19a4:	10887ec4 	addi	r2,r2,8699
    19a8:	e0bff615 	stw	r2,-40(fp)
            double phase = -2*pi*i / nfft;
    19ac:	000d883a 	mov	r6,zero
    19b0:	01f00034 	movhi	r7,49152
    19b4:	e13ff517 	ldw	r4,-44(fp)
    19b8:	e17ff617 	ldw	r5,-40(fp)
    19bc:	000b7f80 	call	b7f8 <__muldf3>
    19c0:	1009883a 	mov	r4,r2
    19c4:	180b883a 	mov	r5,r3
    19c8:	2025883a 	mov	r18,r4
    19cc:	2827883a 	mov	r19,r5
    19d0:	e13ffa17 	ldw	r4,-24(fp)
    19d4:	000c84c0 	call	c84c <__floatsidf>
    19d8:	1009883a 	mov	r4,r2
    19dc:	180b883a 	mov	r5,r3
    19e0:	200d883a 	mov	r6,r4
    19e4:	280f883a 	mov	r7,r5
    19e8:	9009883a 	mov	r4,r18
    19ec:	980b883a 	mov	r5,r19
    19f0:	000b7f80 	call	b7f8 <__muldf3>
    19f4:	1009883a 	mov	r4,r2
    19f8:	180b883a 	mov	r5,r3
    19fc:	2025883a 	mov	r18,r4
    1a00:	2827883a 	mov	r19,r5
    1a04:	e13ff417 	ldw	r4,-48(fp)
    1a08:	000c84c0 	call	c84c <__floatsidf>
    1a0c:	1009883a 	mov	r4,r2
    1a10:	180b883a 	mov	r5,r3
    1a14:	200d883a 	mov	r6,r4
    1a18:	280f883a 	mov	r7,r5
    1a1c:	9009883a 	mov	r4,r18
    1a20:	980b883a 	mov	r5,r19
    1a24:	000ad580 	call	ad58 <__divdf3>
    1a28:	1009883a 	mov	r4,r2
    1a2c:	180b883a 	mov	r5,r3
    1a30:	e13ff815 	stw	r4,-32(fp)
    1a34:	e17ff915 	stw	r5,-28(fp)
            if (st->inverse)
    1a38:	e0bffb17 	ldw	r2,-20(fp)
    1a3c:	10800117 	ldw	r2,4(r2)
    1a40:	10000526 	beq	r2,zero,1a58 <kiss_fft_alloc+0x170>
                phase *= -1;
    1a44:	e43ff817 	ldw	r16,-32(fp)
    1a48:	e0bff917 	ldw	r2,-28(fp)
    1a4c:	1460003c 	xorhi	r17,r2,32768
    1a50:	e43ff815 	stw	r16,-32(fp)
    1a54:	e47ff915 	stw	r17,-28(fp)
            kf_cexp(st->twiddles+i, phase );
    1a58:	e13ff817 	ldw	r4,-32(fp)
    1a5c:	e17ff917 	ldw	r5,-28(fp)
    1a60:	00039840 	call	3984 <cos>
    1a64:	100d883a 	mov	r6,r2
    1a68:	180f883a 	mov	r7,r3
    1a6c:	e0bffb17 	ldw	r2,-20(fp)
    1a70:	10c04204 	addi	r3,r2,264
    1a74:	e0bffa17 	ldw	r2,-24(fp)
    1a78:	100490fa 	slli	r2,r2,3
    1a7c:	18a5883a 	add	r18,r3,r2
    1a80:	3009883a 	mov	r4,r6
    1a84:	380b883a 	mov	r5,r7
    1a88:	000ca900 	call	ca90 <__truncdfsf2>
    1a8c:	1007883a 	mov	r3,r2
    1a90:	90c00015 	stw	r3,0(r18)
    1a94:	e13ff817 	ldw	r4,-32(fp)
    1a98:	e17ff917 	ldw	r5,-28(fp)
    1a9c:	0003c180 	call	3c18 <sin>
    1aa0:	100d883a 	mov	r6,r2
    1aa4:	180f883a 	mov	r7,r3
    1aa8:	e0bffb17 	ldw	r2,-20(fp)
    1aac:	10c04204 	addi	r3,r2,264
    1ab0:	e0bffa17 	ldw	r2,-24(fp)
    1ab4:	100490fa 	slli	r2,r2,3
    1ab8:	18a5883a 	add	r18,r3,r2
    1abc:	3009883a 	mov	r4,r6
    1ac0:	380b883a 	mov	r5,r7
    1ac4:	000ca900 	call	ca90 <__truncdfsf2>
    1ac8:	1007883a 	mov	r3,r2
    1acc:	90c00115 	stw	r3,4(r18)
        for (i=0;i<nfft;++i) {
    1ad0:	e0bffa17 	ldw	r2,-24(fp)
    1ad4:	10800044 	addi	r2,r2,1
    1ad8:	e0bffa15 	stw	r2,-24(fp)
    1adc:	e0fffa17 	ldw	r3,-24(fp)
    1ae0:	e0bff417 	ldw	r2,-48(fp)
    1ae4:	18bfac16 	blt	r3,r2,1998 <kiss_fft_alloc+0xb0>
        }

        kf_factor(nfft,st->factors);
    1ae8:	e0bffb17 	ldw	r2,-20(fp)
    1aec:	10800204 	addi	r2,r2,8
    1af0:	100b883a 	mov	r5,r2
    1af4:	e13ff417 	ldw	r4,-48(fp)
    1af8:	000179c0 	call	179c <kf_factor>
    }
    return st;
    1afc:	e0bffb17 	ldw	r2,-20(fp)
}
    1b00:	e6fffc04 	addi	sp,fp,-16
    1b04:	dfc00517 	ldw	ra,20(sp)
    1b08:	df000417 	ldw	fp,16(sp)
    1b0c:	dcc00317 	ldw	r19,12(sp)
    1b10:	dc800217 	ldw	r18,8(sp)
    1b14:	dc400117 	ldw	r17,4(sp)
    1b18:	dc000017 	ldw	r16,0(sp)
    1b1c:	dec00604 	addi	sp,sp,24
    1b20:	f800283a 	ret

00001b24 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
    1b24:	defff704 	addi	sp,sp,-36
    1b28:	dfc00815 	stw	ra,32(sp)
    1b2c:	df000715 	stw	fp,28(sp)
    1b30:	df000704 	addi	fp,sp,28
    1b34:	e13ffe15 	stw	r4,-8(fp)
    1b38:	e17ffd15 	stw	r5,-12(fp)
    1b3c:	e1bffc15 	stw	r6,-16(fp)
    1b40:	e1fffb15 	stw	r7,-20(fp)
    if (fin == fout) {
    1b44:	e0fffd17 	ldw	r3,-12(fp)
    1b48:	e0bffc17 	ldw	r2,-16(fp)
    1b4c:	18801a1e 	bne	r3,r2,1bb8 <kiss_fft_stride+0x94>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
    1b50:	e0bffe17 	ldw	r2,-8(fp)
    1b54:	10800017 	ldw	r2,0(r2)
    1b58:	100490fa 	slli	r2,r2,3
    1b5c:	1009883a 	mov	r4,r2
    1b60:	000cc600 	call	cc60 <malloc>
    1b64:	e0bfff15 	stw	r2,-4(fp)
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
    1b68:	e0bffe17 	ldw	r2,-8(fp)
    1b6c:	10800204 	addi	r2,r2,8
    1b70:	e0fffe17 	ldw	r3,-8(fp)
    1b74:	d8c00115 	stw	r3,4(sp)
    1b78:	d8800015 	stw	r2,0(sp)
    1b7c:	e1fffb17 	ldw	r7,-20(fp)
    1b80:	01800044 	movi	r6,1
    1b84:	e17ffd17 	ldw	r5,-12(fp)
    1b88:	e13fff17 	ldw	r4,-4(fp)
    1b8c:	00015740 	call	1574 <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
    1b90:	e0bffe17 	ldw	r2,-8(fp)
    1b94:	10800017 	ldw	r2,0(r2)
    1b98:	100490fa 	slli	r2,r2,3
    1b9c:	100d883a 	mov	r6,r2
    1ba0:	e17fff17 	ldw	r5,-4(fp)
    1ba4:	e13ffc17 	ldw	r4,-16(fp)
    1ba8:	000d4600 	call	d460 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
    1bac:	e13fff17 	ldw	r4,-4(fp)
    1bb0:	000cc700 	call	cc70 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
    1bb4:	00000a06 	br	1be0 <kiss_fft_stride+0xbc>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    1bb8:	e0bffe17 	ldw	r2,-8(fp)
    1bbc:	10800204 	addi	r2,r2,8
    1bc0:	e0fffe17 	ldw	r3,-8(fp)
    1bc4:	d8c00115 	stw	r3,4(sp)
    1bc8:	d8800015 	stw	r2,0(sp)
    1bcc:	e1fffb17 	ldw	r7,-20(fp)
    1bd0:	01800044 	movi	r6,1
    1bd4:	e17ffd17 	ldw	r5,-12(fp)
    1bd8:	e13ffc17 	ldw	r4,-16(fp)
    1bdc:	00015740 	call	1574 <kf_work>
}
    1be0:	0001883a 	nop
    1be4:	e037883a 	mov	sp,fp
    1be8:	dfc00117 	ldw	ra,4(sp)
    1bec:	df000017 	ldw	fp,0(sp)
    1bf0:	dec00204 	addi	sp,sp,8
    1bf4:	f800283a 	ret

00001bf8 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    1bf8:	defffb04 	addi	sp,sp,-20
    1bfc:	dfc00415 	stw	ra,16(sp)
    1c00:	df000315 	stw	fp,12(sp)
    1c04:	df000304 	addi	fp,sp,12
    1c08:	e13fff15 	stw	r4,-4(fp)
    1c0c:	e17ffe15 	stw	r5,-8(fp)
    1c10:	e1bffd15 	stw	r6,-12(fp)
    kiss_fft_stride(cfg,fin,fout,1);
    1c14:	01c00044 	movi	r7,1
    1c18:	e1bffd17 	ldw	r6,-12(fp)
    1c1c:	e17ffe17 	ldw	r5,-8(fp)
    1c20:	e13fff17 	ldw	r4,-4(fp)
    1c24:	0001b240 	call	1b24 <kiss_fft_stride>
}
    1c28:	0001883a 	nop
    1c2c:	e037883a 	mov	sp,fp
    1c30:	dfc00117 	ldw	ra,4(sp)
    1c34:	df000017 	ldw	fp,0(sp)
    1c38:	dec00204 	addi	sp,sp,8
    1c3c:	f800283a 	ret

00001c40 <kiss_fft_cleanup>:


void kiss_fft_cleanup(void)
{
    1c40:	deffff04 	addi	sp,sp,-4
    1c44:	df000015 	stw	fp,0(sp)
    1c48:	d839883a 	mov	fp,sp
    // nothing needed any more
}
    1c4c:	0001883a 	nop
    1c50:	e037883a 	mov	sp,fp
    1c54:	df000017 	ldw	fp,0(sp)
    1c58:	dec00104 	addi	sp,sp,4
    1c5c:	f800283a 	ret

00001c60 <kiss_fft_next_fast_size>:

int kiss_fft_next_fast_size(int n)
{
    1c60:	defffd04 	addi	sp,sp,-12
    1c64:	df000215 	stw	fp,8(sp)
    1c68:	df000204 	addi	fp,sp,8
    1c6c:	e13ffe15 	stw	r4,-8(fp)
    while(1) {
        int m=n;
    1c70:	e0bffe17 	ldw	r2,-8(fp)
    1c74:	e0bfff15 	stw	r2,-4(fp)
        while ( (m%2) == 0 ) m/=2;
    1c78:	00000406 	br	1c8c <kiss_fft_next_fast_size+0x2c>
    1c7c:	e0ffff17 	ldw	r3,-4(fp)
    1c80:	00800084 	movi	r2,2
    1c84:	1885283a 	div	r2,r3,r2
    1c88:	e0bfff15 	stw	r2,-4(fp)
    1c8c:	e0bfff17 	ldw	r2,-4(fp)
    1c90:	1080004c 	andi	r2,r2,1
    1c94:	103ff926 	beq	r2,zero,1c7c <kiss_fft_next_fast_size+0x1c>
        while ( (m%3) == 0 ) m/=3;
    1c98:	00000406 	br	1cac <kiss_fft_next_fast_size+0x4c>
    1c9c:	e0ffff17 	ldw	r3,-4(fp)
    1ca0:	008000c4 	movi	r2,3
    1ca4:	1885283a 	div	r2,r3,r2
    1ca8:	e0bfff15 	stw	r2,-4(fp)
    1cac:	e0bfff17 	ldw	r2,-4(fp)
    1cb0:	00c000c4 	movi	r3,3
    1cb4:	10c7283a 	div	r3,r2,r3
    1cb8:	18c000e4 	muli	r3,r3,3
    1cbc:	10c5c83a 	sub	r2,r2,r3
    1cc0:	103ff626 	beq	r2,zero,1c9c <kiss_fft_next_fast_size+0x3c>
        while ( (m%5) == 0 ) m/=5;
    1cc4:	00000406 	br	1cd8 <kiss_fft_next_fast_size+0x78>
    1cc8:	e0ffff17 	ldw	r3,-4(fp)
    1ccc:	00800144 	movi	r2,5
    1cd0:	1885283a 	div	r2,r3,r2
    1cd4:	e0bfff15 	stw	r2,-4(fp)
    1cd8:	e0bfff17 	ldw	r2,-4(fp)
    1cdc:	00c00144 	movi	r3,5
    1ce0:	10c7283a 	div	r3,r2,r3
    1ce4:	18c00164 	muli	r3,r3,5
    1ce8:	10c5c83a 	sub	r2,r2,r3
    1cec:	103ff626 	beq	r2,zero,1cc8 <kiss_fft_next_fast_size+0x68>
        if (m<=1)
    1cf0:	e0bfff17 	ldw	r2,-4(fp)
    1cf4:	10800088 	cmpgei	r2,r2,2
    1cf8:	10000426 	beq	r2,zero,1d0c <kiss_fft_next_fast_size+0xac>
            break; /* n is completely factorable by twos, threes, and fives */
        n++;
    1cfc:	e0bffe17 	ldw	r2,-8(fp)
    1d00:	10800044 	addi	r2,r2,1
    1d04:	e0bffe15 	stw	r2,-8(fp)
    while(1) {
    1d08:	003fd906 	br	1c70 <kiss_fft_next_fast_size+0x10>
            break; /* n is completely factorable by twos, threes, and fives */
    1d0c:	0001883a 	nop
    }
    return n;
    1d10:	e0bffe17 	ldw	r2,-8(fp)
}
    1d14:	e037883a 	mov	sp,fp
    1d18:	df000017 	ldw	fp,0(sp)
    1d1c:	dec00104 	addi	sp,sp,4
    1d20:	f800283a 	ret

00001d24 <main>:
 * This program performs the following:
 *  1. records audio for 1.5 seconds when KEY[0] is pressed.
 *  2. Normalizes the audio to a range between -1 and 1.
 *  3. Applies the Hamming window to the samples.
 ******************************************************************************/
int main(void) {
    1d24:	defffd04 	addi	sp,sp,-12
    1d28:	dfc00215 	stw	ra,8(sp)
    1d2c:	df000115 	stw	fp,4(sp)
    1d30:	dc000015 	stw	r16,0(sp)
    1d34:	df000104 	addi	fp,sp,4
    1d38:	023fffb4 	movhi	r8,65534
    1d3c:	422fd304 	addi	r8,r8,-16564
    1d40:	da37883a 	add	sp,sp,r8
    /* Declare volatile pointers to I/O registers (volatile means that IO load
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile int *red_LED_ptr = (int *)LED_BASE;
    1d44:	00bfc834 	movhi	r2,65312
    1d48:	e0bff915 	stw	r2,-28(fp)
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    1d4c:	00bfc834 	movhi	r2,65312
    1d50:	108c1004 	addi	r2,r2,12352
    1d54:	e0bff815 	stw	r2,-32(fp)
    int sdram_count = 0;
    1d58:	e03ff715 	stw	zero,-36(fp)
    int counter = 0;
    1d5c:	e03ff615 	stw	zero,-40(fp)

    /* used for audio record and calculations */
    int fifospace;
    int record = 0, play = 0, buffer_index = 0;
    1d60:	e03ff515 	stw	zero,-44(fp)
    1d64:	e03ff415 	stw	zero,-48(fp)
    1d68:	e03ff315 	stw	zero,-52(fp)
    //kiss_fft_cpx output[FFT_SIZE];
    float mfcc_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];
    float rock_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];
    float paper_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];
    // open the Character LCD port
    char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
    1d6c:	010000b4 	movhi	r4,2
    1d70:	21034504 	addi	r4,r4,3348
    1d74:	001f3900 	call	1f390 <alt_up_character_lcd_open_dev>
    1d78:	d0a73f15 	stw	r2,-25348(gp)
    if ( char_lcd_dev == NULL) alt_printf ("Error: could not open character LCD device\n");
    1d7c:	d0a73f17 	ldw	r2,-25348(gp)
    1d80:	1000041e 	bne	r2,zero,1d94 <main+0x70>
    1d84:	010000b4 	movhi	r4,2
    1d88:	21034a04 	addi	r4,r4,3368
    1d8c:	001a23c0 	call	1a23c <alt_printf>
    1d90:	00000306 	br	1da0 <main+0x7c>
    else alt_printf ("Opened character LCD device\n");
    1d94:	010000b4 	movhi	r4,2
    1d98:	21035504 	addi	r4,r4,3412
    1d9c:	001a23c0 	call	1a23c <alt_printf>
    /* Initialize the character display */
    alt_up_character_lcd_init (char_lcd_dev);
    1da0:	d0a73f17 	ldw	r2,-25348(gp)
    1da4:	1009883a 	mov	r4,r2
    1da8:	001f3580 	call	1f358 <alt_up_character_lcd_init>
    /* Write "Welcome to" in the first row */
    alt_up_character_lcd_string(char_lcd_dev, "Press KEY0 to");
    1dac:	d0a73f17 	ldw	r2,-25348(gp)
    1db0:	014000b4 	movhi	r5,2
    1db4:	29435d04 	addi	r5,r5,3444
    1db8:	1009883a 	mov	r4,r2
    1dbc:	001f44c0 	call	1f44c <alt_up_character_lcd_string>
    alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
    1dc0:	d0a73f17 	ldw	r2,-25348(gp)
    1dc4:	01800044 	movi	r6,1
    1dc8:	000b883a 	mov	r5,zero
    1dcc:	1009883a 	mov	r4,r2
    1dd0:	001f5180 	call	1f518 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, "Record audio...");
    1dd4:	d0a73f17 	ldw	r2,-25348(gp)
    1dd8:	014000b4 	movhi	r5,2
    1ddc:	29436104 	addi	r5,r5,3460
    1de0:	1009883a 	mov	r4,r2
    1de4:	001f44c0 	call	1f44c <alt_up_character_lcd_string>
	sd_card_dev = alt_up_sd_card_open_dev("/dev/SD_Card");
    1de8:	010000b4 	movhi	r4,2
    1dec:	21036504 	addi	r4,r4,3476
    1df0:	001d40c0 	call	1d40c <alt_up_sd_card_open_dev>
    1df4:	d0a74015 	stw	r2,-25344(gp)
	//checkIfSDCardIsPresent();
	checkIfSDCardIsPresent();
    1df8:	0002e580 	call	2e58 <checkIfSDCardIsPresent>

    /* read and echo audio data */
    play = 0;
    1dfc:	e03ff415 	stw	zero,-48(fp)
    int i;
    while (1) {
        check_KEYs(&record, &play, &buffer_index);
    1e00:	e13ff304 	addi	r4,fp,-52
    1e04:	e0fff404 	addi	r3,fp,-48
    1e08:	e0bff504 	addi	r2,fp,-44
    1e0c:	200d883a 	mov	r6,r4
    1e10:	180b883a 	mov	r5,r3
    1e14:	1009883a 	mov	r4,r2
    1e18:	00021040 	call	2104 <check_KEYs>
        if (record) {
    1e1c:	e0bff517 	ldw	r2,-44(fp)
    1e20:	103ff726 	beq	r2,zero,1e00 <main+0xdc>
            *(red_LED_ptr) = 0x1;  // turn on LEDR[0]
    1e24:	e0bff917 	ldw	r2,-28(fp)
    1e28:	00c00044 	movi	r3,1
    1e2c:	10c00015 	stw	r3,0(r2)

            fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
    1e30:	e0bff817 	ldw	r2,-32(fp)
    1e34:	10800117 	ldw	r2,4(r2)
    1e38:	e0bffe15 	stw	r2,-8(fp)
            if ((fifospace & 0x000000FF) > BUF_THRESHOLD)  // check RARC
    1e3c:	e0bffe17 	ldw	r2,-8(fp)
    1e40:	10803fcc 	andi	r2,r2,255
    1e44:	10801850 	cmplti	r2,r2,97
    1e48:	103fed1e 	bne	r2,zero,1e00 <main+0xdc>
            {
                // store data until the the audio-in FIFO is empty or the buffer is full
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    1e4c:	0000a606 	br	20e8 <main+0x3c4>
                    left_buffer[buffer_index] = *(audio_ptr + 2);
    1e50:	e0bff817 	ldw	r2,-32(fp)
    1e54:	10800204 	addi	r2,r2,8
    1e58:	10800017 	ldw	r2,0(r2)
    1e5c:	e43ff317 	ldw	r16,-52(fp)
    1e60:	1009883a 	mov	r4,r2
    1e64:	000a2480 	call	a248 <__floatsisf>
    1e68:	1009883a 	mov	r4,r2
    1e6c:	00bffff4 	movhi	r2,65535
    1e70:	10911404 	addi	r2,r2,17488
    1e74:	10bfff04 	addi	r2,r2,-4
    1e78:	1707883a 	add	r3,r2,fp
    1e7c:	800490ba 	slli	r2,r16,2
    1e80:	1885883a 	add	r2,r3,r2
    1e84:	11000015 	stw	r4,0(r2)
                    right_buffer[buffer_index] = *(audio_ptr + 3);
    1e88:	e17ff317 	ldw	r5,-52(fp)
    1e8c:	e0bff817 	ldw	r2,-32(fp)
    1e90:	10c00317 	ldw	r3,12(r2)
    1e94:	00bffff4 	movhi	r2,65535
    1e98:	10a23404 	addi	r2,r2,-30512
    1e9c:	10bfff04 	addi	r2,r2,-4
    1ea0:	1709883a 	add	r4,r2,fp
    1ea4:	280490ba 	slli	r2,r5,2
    1ea8:	2085883a 	add	r2,r4,r2
    1eac:	10c00015 	stw	r3,0(r2)
                    ++buffer_index;
    1eb0:	e0bff317 	ldw	r2,-52(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bff315 	stw	r2,-52(fp)

                    if (buffer_index == BUF_SIZE) {
    1ebc:	e0bff317 	ldw	r2,-52(fp)
    1ec0:	108bb818 	cmpnei	r2,r2,12000
    1ec4:	1000851e 	bne	r2,zero,20dc <main+0x3b8>
                    	list_files_on_sd_card();
    1ec8:	00030700 	call	3070 <list_files_on_sd_card>
                        // done recording
                        record = 0;
    1ecc:	e03ff515 	stw	zero,-44(fp)
                        *(red_LED_ptr) = 0x0;  // turn off LEDR
    1ed0:	e0bff917 	ldw	r2,-28(fp)
    1ed4:	10000015 	stw	zero,0(r2)
                        //printf("Address of left_buffer: %p\n", (void*)&left_buffer);
                        clearLCD();
    1ed8:	0002d600 	call	2d60 <clearLCD>
                        alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
    1edc:	d0a73f17 	ldw	r2,-25348(gp)
    1ee0:	000d883a 	mov	r6,zero
    1ee4:	000b883a 	mov	r5,zero
    1ee8:	1009883a 	mov	r4,r2
    1eec:	001f5180 	call	1f518 <alt_up_character_lcd_set_cursor_pos>
                        alt_up_character_lcd_string(char_lcd_dev, "Normalizing     \0");
    1ef0:	d0a73f17 	ldw	r2,-25348(gp)
    1ef4:	014000b4 	movhi	r5,2
    1ef8:	29436904 	addi	r5,r5,3492
    1efc:	1009883a 	mov	r4,r2
    1f00:	001f44c0 	call	1f44c <alt_up_character_lcd_string>
                        alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
    1f04:	d0a73f17 	ldw	r2,-25348(gp)
    1f08:	01800044 	movi	r6,1
    1f0c:	000b883a 	mov	r5,zero
    1f10:	1009883a 	mov	r4,r2
    1f14:	001f5180 	call	1f518 <alt_up_character_lcd_set_cursor_pos>
						alt_up_character_lcd_string(char_lcd_dev, "audio...        \0");
    1f18:	d0a73f17 	ldw	r2,-25348(gp)
    1f1c:	014000b4 	movhi	r5,2
    1f20:	29436e04 	addi	r5,r5,3512
    1f24:	1009883a 	mov	r4,r2
    1f28:	001f44c0 	call	1f44c <alt_up_character_lcd_string>
                        normalize_audio(left_buffer, normalized_buffer, BUF_SIZE);
    1f2c:	00bfffb4 	movhi	r2,65534
    1f30:	10b35404 	addi	r2,r2,-12976
    1f34:	10bfff04 	addi	r2,r2,-4
    1f38:	1707883a 	add	r3,r2,fp
    1f3c:	00bffff4 	movhi	r2,65535
    1f40:	10911404 	addi	r2,r2,17488
    1f44:	10bfff04 	addi	r2,r2,-4
    1f48:	1705883a 	add	r2,r2,fp
    1f4c:	018bb804 	movi	r6,12000
    1f50:	180b883a 	mov	r5,r3
    1f54:	1009883a 	mov	r4,r2
    1f58:	00021d00 	call	21d0 <normalize_audio>
                        // Calculate MFCCs
						calculate_mfcc(normalized_buffer, BUF_SIZE, mfcc_buffer);
    1f5c:	00bfffb4 	movhi	r2,65534
    1f60:	10b22904 	addi	r2,r2,-14172
    1f64:	10bfff04 	addi	r2,r2,-4
    1f68:	1707883a 	add	r3,r2,fp
    1f6c:	00bfffb4 	movhi	r2,65534
    1f70:	10b35404 	addi	r2,r2,-12976
    1f74:	10bfff04 	addi	r2,r2,-4
    1f78:	1705883a 	add	r2,r2,fp
    1f7c:	180d883a 	mov	r6,r3
    1f80:	014bb804 	movi	r5,12000
    1f84:	1009883a 	mov	r4,r2
    1f88:	00024980 	call	2498 <calculate_mfcc>
						writeToLCD("Finished        \0", "calculations...\0");
    1f8c:	014000b4 	movhi	r5,2
    1f90:	29437304 	addi	r5,r5,3532
    1f94:	010000b4 	movhi	r4,2
    1f98:	21037804 	addi	r4,r4,3552
    1f9c:	0002ddc0 	call	2ddc <writeToLCD>
//							for (int m = 0; m < NUM_MFCC; m++) {
//								printf("%f ", mfcc_buffer[frame * NUM_MFCC + m]);
//							}
//							printf("\n");
//						}
						writeToLCD("comparing       \0", "MFCC...        \0");
    1fa0:	014000b4 	movhi	r5,2
    1fa4:	29437d04 	addi	r5,r5,3572
    1fa8:	010000b4 	movhi	r4,2
    1fac:	21038204 	addi	r4,r4,3592
    1fb0:	0002ddc0 	call	2ddc <writeToLCD>
						double rock_value;
						double paper_value;
						if (get_values_from_sd_card_file("ROCK.TXT", rock_buffer)) {
    1fb4:	00bfffb4 	movhi	r2,65534
    1fb8:	10b0fe04 	addi	r2,r2,-15368
    1fbc:	10bfff04 	addi	r2,r2,-4
    1fc0:	1705883a 	add	r2,r2,fp
    1fc4:	100b883a 	mov	r5,r2
    1fc8:	010000b4 	movhi	r4,2
    1fcc:	21038704 	addi	r4,r4,3612
    1fd0:	0002f080 	call	2f08 <get_values_from_sd_card_file>
    1fd4:	10000d26 	beq	r2,zero,200c <main+0x2e8>
							rock_value = compare_mfcc_buffers(mfcc_buffer, rock_buffer);
    1fd8:	00bfffb4 	movhi	r2,65534
    1fdc:	10b0fe04 	addi	r2,r2,-15368
    1fe0:	10bfff04 	addi	r2,r2,-4
    1fe4:	1707883a 	add	r3,r2,fp
    1fe8:	00bfffb4 	movhi	r2,65534
    1fec:	10b22904 	addi	r2,r2,-14172
    1ff0:	10bfff04 	addi	r2,r2,-4
    1ff4:	1705883a 	add	r2,r2,fp
    1ff8:	180b883a 	mov	r5,r3
    1ffc:	1009883a 	mov	r4,r2
    2000:	00026e00 	call	26e0 <compare_mfcc_buffers>
    2004:	e0bffc15 	stw	r2,-16(fp)
    2008:	e0fffd15 	stw	r3,-12(fp)
						}
						if (get_values_from_sd_card_file("PAPER.TXT", paper_buffer)) {
    200c:	00bfffb4 	movhi	r2,65534
    2010:	10afd304 	addi	r2,r2,-16564
    2014:	10bfff04 	addi	r2,r2,-4
    2018:	1705883a 	add	r2,r2,fp
    201c:	100b883a 	mov	r5,r2
    2020:	010000b4 	movhi	r4,2
    2024:	21038a04 	addi	r4,r4,3624
    2028:	0002f080 	call	2f08 <get_values_from_sd_card_file>
    202c:	10000d26 	beq	r2,zero,2064 <main+0x340>
							paper_value = compare_mfcc_buffers(mfcc_buffer, paper_buffer);
    2030:	00bfffb4 	movhi	r2,65534
    2034:	10afd304 	addi	r2,r2,-16564
    2038:	10bfff04 	addi	r2,r2,-4
    203c:	1707883a 	add	r3,r2,fp
    2040:	00bfffb4 	movhi	r2,65534
    2044:	10b22904 	addi	r2,r2,-14172
    2048:	10bfff04 	addi	r2,r2,-4
    204c:	1705883a 	add	r2,r2,fp
    2050:	180b883a 	mov	r5,r3
    2054:	1009883a 	mov	r4,r2
    2058:	00026e00 	call	26e0 <compare_mfcc_buffers>
    205c:	e0bffa15 	stw	r2,-24(fp)
    2060:	e0fffb15 	stw	r3,-20(fp)
						}

						if (rock_value < paper_value) {
    2064:	e1bffa17 	ldw	r6,-24(fp)
    2068:	e1fffb17 	ldw	r7,-20(fp)
    206c:	e13ffc17 	ldw	r4,-16(fp)
    2070:	e17ffd17 	ldw	r5,-12(fp)
    2074:	000b7100 	call	b710 <__ledf2>
    2078:	1000060e 	bge	r2,zero,2094 <main+0x370>
							writeToLCD("steen           \0", "");
    207c:	014000b4 	movhi	r5,2
    2080:	29438d04 	addi	r5,r5,3636
    2084:	010000b4 	movhi	r4,2
    2088:	21038e04 	addi	r4,r4,3640
    208c:	0002ddc0 	call	2ddc <writeToLCD>
    2090:	00001106 	br	20d8 <main+0x3b4>
						}
						else if (rock_value == paper_value) {
    2094:	e1bffa17 	ldw	r6,-24(fp)
    2098:	e1fffb17 	ldw	r7,-20(fp)
    209c:	e13ffc17 	ldw	r4,-16(fp)
    20a0:	e17ffd17 	ldw	r5,-12(fp)
    20a4:	000b5a80 	call	b5a8 <__eqdf2>
    20a8:	1000061e 	bne	r2,zero,20c4 <main+0x3a0>
							writeToLCD("beide           \0", "");
    20ac:	014000b4 	movhi	r5,2
    20b0:	29438d04 	addi	r5,r5,3636
    20b4:	010000b4 	movhi	r4,2
    20b8:	21039304 	addi	r4,r4,3660
    20bc:	0002ddc0 	call	2ddc <writeToLCD>
    20c0:	00000506 	br	20d8 <main+0x3b4>
						}
						else {
							writeToLCD("papier          \0", "");
    20c4:	014000b4 	movhi	r5,2
    20c8:	29438d04 	addi	r5,r5,3636
    20cc:	010000b4 	movhi	r4,2
    20d0:	21039804 	addi	r4,r4,3680
    20d4:	0002ddc0 	call	2ddc <writeToLCD>
						}
						//double rock_value = compare_mfcc_buffers(mfcc_buffer, rock_buffer);
                         //write the float buffer to the SDRAM

                        buffer_index = 0;
    20d8:	e03ff315 	stw	zero,-52(fp)
                    }
                    fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
    20dc:	e0bff817 	ldw	r2,-32(fp)
    20e0:	10800117 	ldw	r2,4(r2)
    20e4:	e0bffe15 	stw	r2,-8(fp)
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    20e8:	e0bffe17 	ldw	r2,-8(fp)
    20ec:	10803fcc 	andi	r2,r2,255
    20f0:	103f4326 	beq	r2,zero,1e00 <main+0xdc>
    20f4:	e0bff317 	ldw	r2,-52(fp)
    20f8:	108bb810 	cmplti	r2,r2,12000
    20fc:	103f541e 	bne	r2,zero,1e50 <main+0x12c>
        check_KEYs(&record, &play, &buffer_index);
    2100:	003f3f06 	br	1e00 <main+0xdc>

00002104 <check_KEYs>:
}

/****************************************************************************************
 * Subroutine to read KEYs
 ****************************************************************************************/
void check_KEYs(int *KEY0, int *KEY1, int *counter) {
    2104:	defff904 	addi	sp,sp,-28
    2108:	df000615 	stw	fp,24(sp)
    210c:	df000604 	addi	fp,sp,24
    2110:	e13ffc15 	stw	r4,-16(fp)
    2114:	e17ffb15 	stw	r5,-20(fp)
    2118:	e1bffa15 	stw	r6,-24(fp)
    volatile int *KEY_ptr = (int *)KEY_BASE;
    211c:	00bfc834 	movhi	r2,65312
    2120:	10801404 	addi	r2,r2,80
    2124:	e0bfff15 	stw	r2,-4(fp)
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    2128:	00bfc834 	movhi	r2,65312
    212c:	108c1004 	addi	r2,r2,12352
    2130:	e0bffe15 	stw	r2,-8(fp)
    int KEY_value;

    KEY_value = *(KEY_ptr);  // read the pushbutton KEY values
    2134:	e0bfff17 	ldw	r2,-4(fp)
    2138:	10800017 	ldw	r2,0(r2)
    213c:	e0bffd15 	stw	r2,-12(fp)
    while (*KEY_ptr)
    2140:	0001883a 	nop
    2144:	e0bfff17 	ldw	r2,-4(fp)
    2148:	10800017 	ldw	r2,0(r2)
    214c:	103ffd1e 	bne	r2,zero,2144 <check_KEYs+0x40>
        ;  // wait for pushbutton KEY release

    if (KEY_value == 0x1)  // check KEY0
    2150:	e0bffd17 	ldw	r2,-12(fp)
    2154:	10800058 	cmpnei	r2,r2,1
    2158:	10000b1e 	bne	r2,zero,2188 <check_KEYs+0x84>
    {
        // reset counter to start recording
        *counter = 0;
    215c:	e0bffa17 	ldw	r2,-24(fp)
    2160:	10000015 	stw	zero,0(r2)
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
    2164:	e0bffe17 	ldw	r2,-8(fp)
    2168:	00c00104 	movi	r3,4
    216c:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
    2170:	e0bffe17 	ldw	r2,-8(fp)
    2174:	10000015 	stw	zero,0(r2)

        *KEY0 = 1;
    2178:	e0bffc17 	ldw	r2,-16(fp)
    217c:	00c00044 	movi	r3,1
    2180:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x8;
        *(audio_ptr) = 0x0;

        *KEY1 = 1;
    }
}
    2184:	00000d06 	br	21bc <check_KEYs+0xb8>
    } else if (KEY_value == 0x2)  // check KEY1
    2188:	e0bffd17 	ldw	r2,-12(fp)
    218c:	10800098 	cmpnei	r2,r2,2
    2190:	10000a1e 	bne	r2,zero,21bc <check_KEYs+0xb8>
        *counter = 0;
    2194:	e0bffa17 	ldw	r2,-24(fp)
    2198:	10000015 	stw	zero,0(r2)
        *(audio_ptr) = 0x8;
    219c:	e0bffe17 	ldw	r2,-8(fp)
    21a0:	00c00204 	movi	r3,8
    21a4:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
    21a8:	e0bffe17 	ldw	r2,-8(fp)
    21ac:	10000015 	stw	zero,0(r2)
        *KEY1 = 1;
    21b0:	e0bffb17 	ldw	r2,-20(fp)
    21b4:	00c00044 	movi	r3,1
    21b8:	10c00015 	stw	r3,0(r2)
}
    21bc:	0001883a 	nop
    21c0:	e037883a 	mov	sp,fp
    21c4:	df000017 	ldw	fp,0(sp)
    21c8:	dec00104 	addi	sp,sp,4
    21cc:	f800283a 	ret

000021d0 <normalize_audio>:

void normalize_audio(float *input_buffer, float *output_buffer, int size) {
    21d0:	defff604 	addi	sp,sp,-40
    21d4:	dfc00915 	stw	ra,36(sp)
    21d8:	df000815 	stw	fp,32(sp)
    21dc:	df000804 	addi	fp,sp,32
    21e0:	e13ffa15 	stw	r4,-24(fp)
    21e4:	e17ff915 	stw	r5,-28(fp)
    21e8:	e1bff815 	stw	r6,-32(fp)
	float max_val = 0.0f;
    21ec:	e03fff15 	stw	zero,-4(fp)

	// Find the maximum absolute value
	for (int i = 0; i < size; i++) {
    21f0:	e03ffe15 	stw	zero,-8(fp)
    21f4:	00001606 	br	2250 <normalize_audio+0x80>
		float signed_val = input_buffer[i] - 32768.0f;  // Adjusting for unsigned 16-bit PCM
    21f8:	e0bffe17 	ldw	r2,-8(fp)
    21fc:	100490ba 	slli	r2,r2,2
    2200:	e0fffa17 	ldw	r3,-24(fp)
    2204:	1885883a 	add	r2,r3,r2
    2208:	10c00017 	ldw	r3,0(r2)
    220c:	0091c034 	movhi	r2,18176
    2210:	1885ffb2 	custom	254,r2,r3,r2
    2214:	e0bffc15 	stw	r2,-16(fp)
		float abs_val = fabs(signed_val);
    2218:	e0fffc17 	ldw	r3,-16(fp)
    221c:	00a00034 	movhi	r2,32768
    2220:	10bfffc4 	addi	r2,r2,-1
    2224:	1884703a 	and	r2,r3,r2
    2228:	e0bffb15 	stw	r2,-20(fp)
		if (abs_val > max_val) {
    222c:	e17fff17 	ldw	r5,-4(fp)
    2230:	e13ffb17 	ldw	r4,-20(fp)
    2234:	00098d80 	call	98d8 <__gesf2>
    2238:	0080020e 	bge	zero,r2,2244 <normalize_audio+0x74>
			max_val = abs_val;
    223c:	e0bffb17 	ldw	r2,-20(fp)
    2240:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < size; i++) {
    2244:	e0bffe17 	ldw	r2,-8(fp)
    2248:	10800044 	addi	r2,r2,1
    224c:	e0bffe15 	stw	r2,-8(fp)
    2250:	e0fffe17 	ldw	r3,-8(fp)
    2254:	e0bff817 	ldw	r2,-32(fp)
    2258:	18bfe716 	blt	r3,r2,21f8 <normalize_audio+0x28>
		}
	}

	// Prevent division by zero
	if (max_val == 0) {
    225c:	000b883a 	mov	r5,zero
    2260:	e13fff17 	ldw	r4,-4(fp)
    2264:	00098680 	call	9868 <__eqsf2>
    2268:	1000021e 	bne	r2,zero,2274 <normalize_audio+0xa4>
		max_val = 1.0f;  // To avoid division by zero
    226c:	008fe034 	movhi	r2,16256
    2270:	e0bfff15 	stw	r2,-4(fp)
	}

	// Normalize the input buffer to numbers between -1 and 1.
	for (int i = 0; i < size; i++) {
    2274:	e03ffd15 	stw	zero,-12(fp)
    2278:	00001106 	br	22c0 <normalize_audio+0xf0>
		output_buffer[i] = (input_buffer[i] - 32768.0f) / max_val;
    227c:	e0bffd17 	ldw	r2,-12(fp)
    2280:	100490ba 	slli	r2,r2,2
    2284:	e0fffa17 	ldw	r3,-24(fp)
    2288:	1885883a 	add	r2,r3,r2
    228c:	10c00017 	ldw	r3,0(r2)
    2290:	0091c034 	movhi	r2,18176
    2294:	1889ffb2 	custom	254,r4,r3,r2
    2298:	e0bffd17 	ldw	r2,-12(fp)
    229c:	100490ba 	slli	r2,r2,2
    22a0:	e0fff917 	ldw	r3,-28(fp)
    22a4:	1885883a 	add	r2,r3,r2
    22a8:	e0ffff17 	ldw	r3,-4(fp)
    22ac:	20c7fff2 	custom	255,r3,r4,r3
    22b0:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < size; i++) {
    22b4:	e0bffd17 	ldw	r2,-12(fp)
    22b8:	10800044 	addi	r2,r2,1
    22bc:	e0bffd15 	stw	r2,-12(fp)
    22c0:	e0fffd17 	ldw	r3,-12(fp)
    22c4:	e0bff817 	ldw	r2,-32(fp)
    22c8:	18bfec16 	blt	r3,r2,227c <normalize_audio+0xac>
	}
}
    22cc:	0001883a 	nop
    22d0:	0001883a 	nop
    22d4:	e037883a 	mov	sp,fp
    22d8:	dfc00117 	ldw	ra,4(sp)
    22dc:	df000017 	ldw	fp,0(sp)
    22e0:	dec00204 	addi	sp,sp,8
    22e4:	f800283a 	ret

000022e8 <hamming_window>:

// Source for this function: https://www.sciencedirect.com/topics/engineering/hamming-window.
void hamming_window(float *input, float *output, int size) {
    22e8:	defff604 	addi	sp,sp,-40
    22ec:	dfc00915 	stw	ra,36(sp)
    22f0:	df000815 	stw	fp,32(sp)
    22f4:	dc000715 	stw	r16,28(sp)
    22f8:	df000804 	addi	fp,sp,32
    22fc:	e13ffa15 	stw	r4,-24(fp)
    2300:	e17ff915 	stw	r5,-28(fp)
    2304:	e1bff815 	stw	r6,-32(fp)
    for (int i = 0; i < size; i++) {
    2308:	e03ffe15 	stw	zero,-8(fp)
    230c:	00002906 	br	23b4 <hamming_window+0xcc>
        float alpha = 0.54f;
    2310:	008fc2b4 	movhi	r2,16138
    2314:	108f5c44 	addi	r2,r2,15729
    2318:	e0bffd15 	stw	r2,-12(fp)
        float beta = 0.46f;
    231c:	008fbb34 	movhi	r2,16108
    2320:	10a147c4 	addi	r2,r2,-31457
    2324:	e0bffc15 	stw	r2,-16(fp)
        float window = alpha - beta * cosf((2 * PI * i) / (size - 1));
    2328:	e13ffe17 	ldw	r4,-8(fp)
    232c:	000a2480 	call	a248 <__floatsisf>
    2330:	1007883a 	mov	r3,r2
    2334:	00903274 	movhi	r2,16585
    2338:	1083f6c4 	addi	r2,r2,4059
    233c:	18a1ff32 	custom	252,r16,r3,r2
    2340:	e0bff817 	ldw	r2,-32(fp)
    2344:	10bfffc4 	addi	r2,r2,-1
    2348:	1009883a 	mov	r4,r2
    234c:	000a2480 	call	a248 <__floatsisf>
    2350:	1007883a 	mov	r3,r2
    2354:	80c5fff2 	custom	255,r2,r16,r3
    2358:	1009883a 	mov	r4,r2
    235c:	0003cdc0 	call	3cdc <cosf>
    2360:	1007883a 	mov	r3,r2
    2364:	e0bffc17 	ldw	r2,-16(fp)
    2368:	1885ff32 	custom	252,r2,r3,r2
    236c:	e0fffd17 	ldw	r3,-12(fp)
    2370:	1885ffb2 	custom	254,r2,r3,r2
    2374:	e0bffb15 	stw	r2,-20(fp)
        output[i] = input[i] * window;
    2378:	e0bffe17 	ldw	r2,-8(fp)
    237c:	100490ba 	slli	r2,r2,2
    2380:	e0fffa17 	ldw	r3,-24(fp)
    2384:	1885883a 	add	r2,r3,r2
    2388:	11000017 	ldw	r4,0(r2)
    238c:	e0bffe17 	ldw	r2,-8(fp)
    2390:	100490ba 	slli	r2,r2,2
    2394:	e0fff917 	ldw	r3,-28(fp)
    2398:	1885883a 	add	r2,r3,r2
    239c:	e0fffb17 	ldw	r3,-20(fp)
    23a0:	20c7ff32 	custom	252,r3,r4,r3
    23a4:	10c00015 	stw	r3,0(r2)
    for (int i = 0; i < size; i++) {
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	10800044 	addi	r2,r2,1
    23b0:	e0bffe15 	stw	r2,-8(fp)
    23b4:	e0fffe17 	ldw	r3,-8(fp)
    23b8:	e0bff817 	ldw	r2,-32(fp)
    23bc:	18bfd416 	blt	r3,r2,2310 <hamming_window+0x28>
    }
}
    23c0:	0001883a 	nop
    23c4:	0001883a 	nop
    23c8:	e6ffff04 	addi	sp,fp,-4
    23cc:	dfc00217 	ldw	ra,8(sp)
    23d0:	df000117 	ldw	fp,4(sp)
    23d4:	dc000017 	ldw	r16,0(sp)
    23d8:	dec00304 	addi	sp,sp,12
    23dc:	f800283a 	ret

000023e0 <fft>:

void fft(float *input_buffer, kiss_fft_cpx *output_buffer) {
    23e0:	def7fa04 	addi	sp,sp,-8216
    23e4:	dfc80515 	stw	ra,8212(sp)
    23e8:	df080415 	stw	fp,8208(sp)
    23ec:	df080404 	addi	fp,sp,8208
    23f0:	e137fd15 	stw	r4,-8204(fp)
    23f4:	e177fc15 	stw	r5,-8208(fp)
    kiss_fft_cfg config;

    config = kiss_fft_alloc(FFT_SIZE, 0, NULL, NULL);
    23f8:	000f883a 	mov	r7,zero
    23fc:	000d883a 	mov	r6,zero
    2400:	000b883a 	mov	r5,zero
    2404:	01010004 	movi	r4,1024
    2408:	00018e80 	call	18e8 <kiss_fft_alloc>
    240c:	e0bffe15 	stw	r2,-8(fp)

    // Convert input to kiss_fft_cpx format
    kiss_fft_cpx kiss_input_buffer[FFT_SIZE];
    for (int i = 0; i < FFT_SIZE; i++) {
    2410:	e03fff15 	stw	zero,-4(fp)
    2414:	00001006 	br	2458 <fft+0x78>
        kiss_input_buffer[i].r = input_buffer[i];
    2418:	e0bfff17 	ldw	r2,-4(fp)
    241c:	100490ba 	slli	r2,r2,2
    2420:	e0f7fd17 	ldw	r3,-8204(fp)
    2424:	1885883a 	add	r2,r3,r2
    2428:	10c00017 	ldw	r3,0(r2)
    242c:	e0bfff17 	ldw	r2,-4(fp)
    2430:	100490fa 	slli	r2,r2,3
    2434:	e085883a 	add	r2,fp,r2
    2438:	10f7fe15 	stw	r3,-8200(r2)
        kiss_input_buffer[i].i = 0; // Assuming input is real, imaginary part is 0
    243c:	e0bfff17 	ldw	r2,-4(fp)
    2440:	100490fa 	slli	r2,r2,3
    2444:	e085883a 	add	r2,fp,r2
    2448:	1037ff15 	stw	zero,-8196(r2)
    for (int i = 0; i < FFT_SIZE; i++) {
    244c:	e0bfff17 	ldw	r2,-4(fp)
    2450:	10800044 	addi	r2,r2,1
    2454:	e0bfff15 	stw	r2,-4(fp)
    2458:	e0bfff17 	ldw	r2,-4(fp)
    245c:	10810010 	cmplti	r2,r2,1024
    2460:	103fed1e 	bne	r2,zero,2418 <fft+0x38>
    }

    // Perform FFT
    kiss_fft(config, kiss_input_buffer, output_buffer);
    2464:	e0b7fe04 	addi	r2,fp,-8200
    2468:	e1b7fc17 	ldw	r6,-8208(fp)
    246c:	100b883a 	mov	r5,r2
    2470:	e13ffe17 	ldw	r4,-8(fp)
    2474:	0001bf80 	call	1bf8 <kiss_fft>

    // Free the FFT configuration
    kiss_fft_free(config);
    2478:	e13ffe17 	ldw	r4,-8(fp)
    247c:	000cc700 	call	cc70 <free>
}
    2480:	0001883a 	nop
    2484:	e037883a 	mov	sp,fp
    2488:	dfc00117 	ldw	ra,4(sp)
    248c:	df000017 	ldw	fp,0(sp)
    2490:	dec00204 	addi	sp,sp,8
    2494:	f800283a 	ret

00002498 <calculate_mfcc>:

void calculate_mfcc(float *input_buffer, int signal_length, float *mfcc_buffer) {
    2498:	dee7f504 	addi	sp,sp,-24620
    249c:	dfd80a15 	stw	ra,24616(sp)
    24a0:	df180915 	stw	fp,24612(sp)
    24a4:	dc180815 	stw	r16,24608(sp)
    24a8:	df180904 	addi	fp,sp,24612
    24ac:	e127fa15 	stw	r4,-24600(fp)
    24b0:	e167f915 	stw	r5,-24604(fp)
    24b4:	e1a7f815 	stw	r6,-24608(fp)
    float frame[FFT_SIZE];
    float windowed_frame[FFT_SIZE];
    // Calculate how many frames can be extracted from the input signal.
    int num_frames = (signal_length - FFT_SIZE) / FFT_SHIFT + 1;
    24b8:	e0a7f917 	ldw	r2,-24604(fp)
    24bc:	10ff0004 	addi	r3,r2,-1024
    24c0:	00808004 	movi	r2,512
    24c4:	1885283a 	div	r2,r3,r2
    24c8:	10800044 	addi	r2,r2,1
    24cc:	e0bffb15 	stw	r2,-20(fp)

    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
    24d0:	e03ffe15 	stw	zero,-8(fp)
    24d4:	00007706 	br	26b4 <calculate_mfcc+0x21c>
        // Extract FFT_SIZE samples from the start of the current frame.
        memcpy(frame, input_buffer + frame_num * FFT_SHIFT, sizeof(float) * FFT_SIZE);
    24d8:	e0bffe17 	ldw	r2,-8(fp)
    24dc:	100492fa 	slli	r2,r2,11
    24e0:	e0e7fa17 	ldw	r3,-24600(fp)
    24e4:	1887883a 	add	r3,r3,r2
    24e8:	e0bbfb04 	addi	r2,fp,-4116
    24ec:	01840004 	movi	r6,4096
    24f0:	180b883a 	mov	r5,r3
    24f4:	1009883a 	mov	r4,r2
    24f8:	000d4600 	call	d460 <memcpy>

        writeToLCD("Hamming         \0", "window...       \0");
    24fc:	014000b4 	movhi	r5,2
    2500:	29439d04 	addi	r5,r5,3700
    2504:	010000b4 	movhi	r4,2
    2508:	2103a204 	addi	r4,r4,3720
    250c:	0002ddc0 	call	2ddc <writeToLCD>
        hamming_window(frame, windowed_frame, FFT_SIZE);
    2510:	e0f7fb04 	addi	r3,fp,-8212
    2514:	e0bbfb04 	addi	r2,fp,-4116
    2518:	01810004 	movi	r6,1024
    251c:	180b883a 	mov	r5,r3
    2520:	1009883a 	mov	r4,r2
    2524:	00022e80 	call	22e8 <hamming_window>

        writeToLCD("Performing      \0", "FFT...          \0");
    2528:	014000b4 	movhi	r5,2
    252c:	2943a704 	addi	r5,r5,3740
    2530:	010000b4 	movhi	r4,2
    2534:	2103ac04 	addi	r4,r4,3760
    2538:	0002ddc0 	call	2ddc <writeToLCD>
        kiss_fft_cpx fft_output[FFT_SIZE];
        fft(windowed_frame, fft_output);
    253c:	e0e7fb04 	addi	r3,fp,-24596
    2540:	e0b7fb04 	addi	r2,fp,-8212
    2544:	180b883a 	mov	r5,r3
    2548:	1009883a 	mov	r4,r2
    254c:	00023e00 	call	23e0 <fft>

        writeToLCD("Magnitude       \0", "spectrum...     \0");
    2550:	014000b4 	movhi	r5,2
    2554:	2943b104 	addi	r5,r5,3780
    2558:	010000b4 	movhi	r4,2
    255c:	2103b604 	addi	r4,r4,3800
    2560:	0002ddc0 	call	2ddc <writeToLCD>
        // Compute the magnitude spectrum of the current frame.
        double magnitude_spectrum[FFT_SIZE];
        for (int i = 0; i < FFT_SIZE; i++) {
    2564:	e03ffd15 	stw	zero,-12(fp)
    2568:	00002906 	br	2610 <calculate_mfcc+0x178>
            magnitude_spectrum[i] = sqrt(fft_output[i].r * fft_output[i].r + fft_output[i].i * fft_output[i].i);
    256c:	e0bffd17 	ldw	r2,-12(fp)
    2570:	100490fa 	slli	r2,r2,3
    2574:	10bfff04 	addi	r2,r2,-4
    2578:	1705883a 	add	r2,r2,fp
    257c:	10e7fc17 	ldw	r3,-24592(r2)
    2580:	e0bffd17 	ldw	r2,-12(fp)
    2584:	100490fa 	slli	r2,r2,3
    2588:	10bfff04 	addi	r2,r2,-4
    258c:	1709883a 	add	r4,r2,fp
    2590:	20a7fc17 	ldw	r2,-24592(r4)
    2594:	1887ff32 	custom	252,r3,r3,r2
    2598:	e0bffd17 	ldw	r2,-12(fp)
    259c:	100490fa 	slli	r2,r2,3
    25a0:	10bfff04 	addi	r2,r2,-4
    25a4:	1705883a 	add	r2,r2,fp
    25a8:	1127fd17 	ldw	r4,-24588(r2)
    25ac:	e0bffd17 	ldw	r2,-12(fp)
    25b0:	100490fa 	slli	r2,r2,3
    25b4:	10bfff04 	addi	r2,r2,-4
    25b8:	170b883a 	add	r5,r2,fp
    25bc:	28a7fd17 	ldw	r2,-24588(r5)
    25c0:	2085ff32 	custom	252,r2,r4,r2
    25c4:	1885ff72 	custom	253,r2,r3,r2
    25c8:	1009883a 	mov	r4,r2
    25cc:	000c9940 	call	c994 <__extendsfdf2>
    25d0:	100d883a 	mov	r6,r2
    25d4:	180f883a 	mov	r7,r3
    25d8:	3009883a 	mov	r4,r6
    25dc:	380b883a 	mov	r5,r7
    25e0:	00040f80 	call	40f8 <sqrt>
    25e4:	1009883a 	mov	r4,r2
    25e8:	180b883a 	mov	r5,r3
    25ec:	e0bffd17 	ldw	r2,-12(fp)
    25f0:	100490fa 	slli	r2,r2,3
    25f4:	10bfff04 	addi	r2,r2,-4
    25f8:	1705883a 	add	r2,r2,fp
    25fc:	112ffc15 	stw	r4,-16400(r2)
    2600:	116ffd15 	stw	r5,-16396(r2)
        for (int i = 0; i < FFT_SIZE; i++) {
    2604:	e0bffd17 	ldw	r2,-12(fp)
    2608:	10800044 	addi	r2,r2,1
    260c:	e0bffd15 	stw	r2,-12(fp)
    2610:	e0bffd17 	ldw	r2,-12(fp)
    2614:	10810010 	cmplti	r2,r2,1024
    2618:	103fd41e 	bne	r2,zero,256c <calculate_mfcc+0xd4>
        }

        writeToLCD("Calculating     \0", "MFCCs...        \0");
    261c:	014000b4 	movhi	r5,2
    2620:	2943bb04 	addi	r5,r5,3820
    2624:	010000b4 	movhi	r4,2
    2628:	2103c004 	addi	r4,r4,3840
    262c:	0002ddc0 	call	2ddc <writeToLCD>
        // Calculate MFCCs for the current frame.
        for (int m = 0; m < NUM_MFCC; m++) {
    2630:	e03ffc15 	stw	zero,-16(fp)
    2634:	00001906 	br	269c <calculate_mfcc+0x204>
            mfcc_buffer[frame_num * NUM_MFCC + m] = GetCoefficient(magnitude_spectrum, 8192, NUM_FILTERS, FFT_SIZE, m);
    2638:	e0bffc17 	ldw	r2,-16(fp)
    263c:	e0effb04 	addi	r3,fp,-16404
    2640:	d8800015 	stw	r2,0(sp)
    2644:	01c10004 	movi	r7,1024
    2648:	01800304 	movi	r6,12
    264c:	01480004 	movi	r5,8192
    2650:	1809883a 	mov	r4,r3
    2654:	00031000 	call	3100 <GetCoefficient>
    2658:	100d883a 	mov	r6,r2
    265c:	180f883a 	mov	r7,r3
    2660:	e0bffe17 	ldw	r2,-8(fp)
    2664:	10c00364 	muli	r3,r2,13
    2668:	e0bffc17 	ldw	r2,-16(fp)
    266c:	1885883a 	add	r2,r3,r2
    2670:	100490ba 	slli	r2,r2,2
    2674:	e0e7f817 	ldw	r3,-24608(fp)
    2678:	18a1883a 	add	r16,r3,r2
    267c:	3009883a 	mov	r4,r6
    2680:	380b883a 	mov	r5,r7
    2684:	000ca900 	call	ca90 <__truncdfsf2>
    2688:	1007883a 	mov	r3,r2
    268c:	80c00015 	stw	r3,0(r16)
        for (int m = 0; m < NUM_MFCC; m++) {
    2690:	e0bffc17 	ldw	r2,-16(fp)
    2694:	10800044 	addi	r2,r2,1
    2698:	e0bffc15 	stw	r2,-16(fp)
    269c:	e0bffc17 	ldw	r2,-16(fp)
    26a0:	10800350 	cmplti	r2,r2,13
    26a4:	103fe41e 	bne	r2,zero,2638 <calculate_mfcc+0x1a0>
    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
    26a8:	e0bffe17 	ldw	r2,-8(fp)
    26ac:	10800044 	addi	r2,r2,1
    26b0:	e0bffe15 	stw	r2,-8(fp)
    26b4:	e0fffe17 	ldw	r3,-8(fp)
    26b8:	e0bffb17 	ldw	r2,-20(fp)
    26bc:	18bf8616 	blt	r3,r2,24d8 <calculate_mfcc+0x40>
        }
    }
}
    26c0:	0001883a 	nop
    26c4:	0001883a 	nop
    26c8:	e6ffff04 	addi	sp,fp,-4
    26cc:	dfc00217 	ldw	ra,8(sp)
    26d0:	df000117 	ldw	fp,4(sp)
    26d4:	dc000017 	ldw	r16,0(sp)
    26d8:	dec00304 	addi	sp,sp,12
    26dc:	f800283a 	ret

000026e0 <compare_mfcc_buffers>:

// This function uses dynamic time warping for aligning the best sequences of the MFCC features.
double compare_mfcc_buffers(float *mfcc_buffer_input, float *mfcc_buffer_data) {
    26e0:	deffea04 	addi	sp,sp,-88
    26e4:	dfc01515 	stw	ra,84(sp)
    26e8:	df001415 	stw	fp,80(sp)
    26ec:	ddc01315 	stw	r23,76(sp)
    26f0:	dd801215 	stw	r22,72(sp)
    26f4:	dd401115 	stw	r21,68(sp)
    26f8:	dd001015 	stw	r20,64(sp)
    26fc:	dcc00f15 	stw	r19,60(sp)
    2700:	dc800e15 	stw	r18,56(sp)
    2704:	dc400d15 	stw	r17,52(sp)
    2708:	dc000c15 	stw	r16,48(sp)
    270c:	df001404 	addi	fp,sp,80
    2710:	e13fee15 	stw	r4,-72(fp)
    2714:	e17fed15 	stw	r5,-76(fp)
    2718:	d809883a 	mov	r4,sp
    271c:	e13fec15 	stw	r4,-80(fp)
	int num_frames_mfcc = NUM_FRAMES_MFCC;
    2720:	01000584 	movi	r4,22
    2724:	e13ff215 	stw	r4,-56(fp)
	double distances_frames[num_frames_mfcc + 1][num_frames_mfcc + 1];
    2728:	e13ff217 	ldw	r4,-56(fp)
    272c:	27c00044 	addi	ra,r4,1
    2730:	e13ff217 	ldw	r4,-56(fp)
    2734:	21400044 	addi	r5,r4,1
    2738:	f93fffc4 	addi	r4,ra,-1
    273c:	e13ff115 	stw	r4,-60(fp)
    2740:	f809883a 	mov	r4,ra
    2744:	202d883a 	mov	r22,r4
    2748:	002f883a 	mov	r23,zero
    274c:	b008d6ba 	srli	r4,r22,26
    2750:	b82291ba 	slli	r17,r23,6
    2754:	2462b03a 	or	r17,r4,r17
    2758:	b02091ba 	slli	r16,r22,6
    275c:	f809883a 	mov	r4,ra
    2760:	202090fa 	slli	r16,r4,3
    2764:	293fffc4 	addi	r4,r5,-1
    2768:	e13ff015 	stw	r4,-64(fp)
    276c:	f809883a 	mov	r4,ra
    2770:	201d883a 	mov	r14,r4
    2774:	001f883a 	mov	r15,zero
    2778:	2823883a 	mov	r17,r5
    277c:	8809883a 	mov	r4,r17
    2780:	2019883a 	mov	r12,r4
    2784:	001b883a 	mov	r13,zero
    2788:	7b0b383a 	mul	r5,r15,r12
    278c:	6b89383a 	mul	r4,r13,r14
    2790:	2909883a 	add	r4,r5,r4
    2794:	730a383a 	mulxuu	r5,r14,r12
    2798:	7319383a 	mul	r12,r14,r12
    279c:	600d883a 	mov	r6,r12
    27a0:	280f883a 	mov	r7,r5
    27a4:	21c9883a 	add	r4,r4,r7
    27a8:	200f883a 	mov	r7,r4
    27ac:	3008d6ba 	srli	r4,r6,26
    27b0:	382a91ba 	slli	r21,r7,6
    27b4:	256ab03a 	or	r21,r4,r21
    27b8:	302891ba 	slli	r20,r6,6
    27bc:	f809883a 	mov	r4,ra
    27c0:	2015883a 	mov	r10,r4
    27c4:	0017883a 	mov	r11,zero
    27c8:	8809883a 	mov	r4,r17
    27cc:	2011883a 	mov	r8,r4
    27d0:	0013883a 	mov	r9,zero
    27d4:	5a0b383a 	mul	r5,r11,r8
    27d8:	4a89383a 	mul	r4,r9,r10
    27dc:	2909883a 	add	r4,r5,r4
    27e0:	520a383a 	mulxuu	r5,r10,r8
    27e4:	520d383a 	mul	r6,r10,r8
    27e8:	3005883a 	mov	r2,r6
    27ec:	2807883a 	mov	r3,r5
    27f0:	20c9883a 	add	r4,r4,r3
    27f4:	2007883a 	mov	r3,r4
    27f8:	1008d6ba 	srli	r4,r2,26
    27fc:	182691ba 	slli	r19,r3,6
    2800:	24e6b03a 	or	r19,r4,r19
    2804:	102491ba 	slli	r18,r2,6
    2808:	f807883a 	mov	r3,ra
    280c:	8805883a 	mov	r2,r17
    2810:	1885383a 	mul	r2,r3,r2
    2814:	100490fa 	slli	r2,r2,3
    2818:	108000c4 	addi	r2,r2,3
    281c:	1004d0ba 	srli	r2,r2,2
    2820:	100490ba 	slli	r2,r2,2
    2824:	d8b7c83a 	sub	sp,sp,r2
    2828:	d805883a 	mov	r2,sp
    282c:	108000c4 	addi	r2,r2,3
    2830:	1004d0ba 	srli	r2,r2,2
    2834:	100490ba 	slli	r2,r2,2
    2838:	e0bfef15 	stw	r2,-68(fp)
	int i = 0; int j = 0; int k = 0;
    283c:	e03ff315 	stw	zero,-52(fp)
    2840:	e03ff415 	stw	zero,-48(fp)
    2844:	e03ff515 	stw	zero,-44(fp)

	for (i = 0; i < num_frames_mfcc; i++) {
    2848:	e03ff315 	stw	zero,-52(fp)
    284c:	00001906 	br	28b4 <compare_mfcc_buffers+0x1d4>
		for (j = 0; j < num_frames_mfcc; j++) {
    2850:	e03ff415 	stw	zero,-48(fp)
    2854:	00001106 	br	289c <compare_mfcc_buffers+0x1bc>
			distances_frames[i][j] = INFINITY;
    2858:	800ad0ba 	srli	r5,r16,2
    285c:	e0ffef17 	ldw	r3,-68(fp)
    2860:	e0bff417 	ldw	r2,-48(fp)
    2864:	e13ff317 	ldw	r4,-52(fp)
    2868:	2909383a 	mul	r4,r5,r4
    286c:	1085883a 	add	r2,r2,r2
    2870:	1105883a 	add	r2,r2,r4
    2874:	100490ba 	slli	r2,r2,2
    2878:	1887883a 	add	r3,r3,r2
    287c:	00b80034 	movhi	r2,57344
    2880:	18800015 	stw	r2,0(r3)
    2884:	009058f4 	movhi	r2,16739
    2888:	1084b3c4 	addi	r2,r2,4815
    288c:	18800115 	stw	r2,4(r3)
		for (j = 0; j < num_frames_mfcc; j++) {
    2890:	e0bff417 	ldw	r2,-48(fp)
    2894:	10800044 	addi	r2,r2,1
    2898:	e0bff415 	stw	r2,-48(fp)
    289c:	e0fff417 	ldw	r3,-48(fp)
    28a0:	e0bff217 	ldw	r2,-56(fp)
    28a4:	18bfec16 	blt	r3,r2,2858 <compare_mfcc_buffers+0x178>
	for (i = 0; i < num_frames_mfcc; i++) {
    28a8:	e0bff317 	ldw	r2,-52(fp)
    28ac:	10800044 	addi	r2,r2,1
    28b0:	e0bff315 	stw	r2,-52(fp)
    28b4:	e0fff317 	ldw	r3,-52(fp)
    28b8:	e0bff217 	ldw	r2,-56(fp)
    28bc:	18bfe416 	blt	r3,r2,2850 <compare_mfcc_buffers+0x170>
		}
	}

	distances_frames[0][0] = 0;
    28c0:	e0bfef17 	ldw	r2,-68(fp)
    28c4:	10000015 	stw	zero,0(r2)
    28c8:	10000115 	stw	zero,4(r2)

	// Calculate the distance between all pairs of the MFCC features.
	for (i = 1; i < num_frames_mfcc; i++) {
    28cc:	00800044 	movi	r2,1
    28d0:	e0bff315 	stw	r2,-52(fp)
    28d4:	00007f06 	br	2ad4 <compare_mfcc_buffers+0x3f4>
		for (j = 1; j < num_frames_mfcc; j++) {
    28d8:	00800044 	movi	r2,1
    28dc:	e0bff415 	stw	r2,-48(fp)
    28e0:	00007606 	br	2abc <compare_mfcc_buffers+0x3dc>
			distances_frames[i + 1][j + 1] = 0;
    28e4:	800ad0ba 	srli	r5,r16,2
    28e8:	e0bff317 	ldw	r2,-52(fp)
    28ec:	11000044 	addi	r4,r2,1
    28f0:	e0bff417 	ldw	r2,-48(fp)
    28f4:	10800044 	addi	r2,r2,1
    28f8:	e0ffef17 	ldw	r3,-68(fp)
    28fc:	2909383a 	mul	r4,r5,r4
    2900:	1085883a 	add	r2,r2,r2
    2904:	1105883a 	add	r2,r2,r4
    2908:	100490ba 	slli	r2,r2,2
    290c:	1885883a 	add	r2,r3,r2
    2910:	10000015 	stw	zero,0(r2)
    2914:	10000115 	stw	zero,4(r2)
			for (k = 0; k < NUM_MFCC; k++) {
    2918:	e03ff515 	stw	zero,-44(fp)
    291c:	00004206 	br	2a28 <compare_mfcc_buffers+0x348>
				distances_frames[i + 1][j + 1] += pow(mfcc_buffer_input[i * NUM_MFCC + k] - mfcc_buffer_data[j * NUM_MFCC + k], 2);
    2920:	e0bff317 	ldw	r2,-52(fp)
    2924:	10c00364 	muli	r3,r2,13
    2928:	e0bff517 	ldw	r2,-44(fp)
    292c:	1885883a 	add	r2,r3,r2
    2930:	100490ba 	slli	r2,r2,2
    2934:	e0ffee17 	ldw	r3,-72(fp)
    2938:	1885883a 	add	r2,r3,r2
    293c:	10c00017 	ldw	r3,0(r2)
    2940:	e0bff417 	ldw	r2,-48(fp)
    2944:	11000364 	muli	r4,r2,13
    2948:	e0bff517 	ldw	r2,-44(fp)
    294c:	2085883a 	add	r2,r4,r2
    2950:	100490ba 	slli	r2,r2,2
    2954:	e13fed17 	ldw	r4,-76(fp)
    2958:	2089883a 	add	r4,r4,r2
    295c:	20800017 	ldw	r2,0(r4)
    2960:	1885ffb2 	custom	254,r2,r3,r2
    2964:	1009883a 	mov	r4,r2
    2968:	000c9940 	call	c994 <__extendsfdf2>
    296c:	1011883a 	mov	r8,r2
    2970:	1813883a 	mov	r9,r3
    2974:	000d883a 	mov	r6,zero
    2978:	01d00034 	movhi	r7,16384
    297c:	4009883a 	mov	r4,r8
    2980:	480b883a 	mov	r5,r9
    2984:	0003e3c0 	call	3e3c <pow>
    2988:	1011883a 	mov	r8,r2
    298c:	1813883a 	mov	r9,r3
    2990:	800ad0ba 	srli	r5,r16,2
    2994:	e0bff317 	ldw	r2,-52(fp)
    2998:	11000044 	addi	r4,r2,1
    299c:	e0bff417 	ldw	r2,-48(fp)
    29a0:	10800044 	addi	r2,r2,1
    29a4:	e0ffef17 	ldw	r3,-68(fp)
    29a8:	2909383a 	mul	r4,r5,r4
    29ac:	1085883a 	add	r2,r2,r2
    29b0:	1105883a 	add	r2,r2,r4
    29b4:	100490ba 	slli	r2,r2,2
    29b8:	1889883a 	add	r4,r3,r2
    29bc:	20800017 	ldw	r2,0(r4)
    29c0:	20c00117 	ldw	r3,4(r4)
    29c4:	8026d0ba 	srli	r19,r16,2
    29c8:	e13ff317 	ldw	r4,-52(fp)
    29cc:	24800044 	addi	r18,r4,1
    29d0:	e13ff417 	ldw	r4,-48(fp)
    29d4:	24400044 	addi	r17,r4,1
    29d8:	100d883a 	mov	r6,r2
    29dc:	180f883a 	mov	r7,r3
    29e0:	4009883a 	mov	r4,r8
    29e4:	480b883a 	mov	r5,r9
    29e8:	000a4680 	call	a468 <__adddf3>
    29ec:	1009883a 	mov	r4,r2
    29f0:	180b883a 	mov	r5,r3
    29f4:	2005883a 	mov	r2,r4
    29f8:	2807883a 	mov	r3,r5
    29fc:	e17fef17 	ldw	r5,-68(fp)
    2a00:	9c89383a 	mul	r4,r19,r18
    2a04:	8c4d883a 	add	r6,r17,r17
    2a08:	3109883a 	add	r4,r6,r4
    2a0c:	200890ba 	slli	r4,r4,2
    2a10:	2909883a 	add	r4,r5,r4
    2a14:	20800015 	stw	r2,0(r4)
    2a18:	20c00115 	stw	r3,4(r4)
			for (k = 0; k < NUM_MFCC; k++) {
    2a1c:	e0bff517 	ldw	r2,-44(fp)
    2a20:	10800044 	addi	r2,r2,1
    2a24:	e0bff515 	stw	r2,-44(fp)
    2a28:	e0bff517 	ldw	r2,-44(fp)
    2a2c:	10800350 	cmplti	r2,r2,13
    2a30:	103fbb1e 	bne	r2,zero,2920 <compare_mfcc_buffers+0x240>
			}
			distances_frames[i + 1][j + 1] = sqrt(distances_frames[i + 1][j + 1]);
    2a34:	800ad0ba 	srli	r5,r16,2
    2a38:	e0bff317 	ldw	r2,-52(fp)
    2a3c:	11000044 	addi	r4,r2,1
    2a40:	e0bff417 	ldw	r2,-48(fp)
    2a44:	10800044 	addi	r2,r2,1
    2a48:	e0ffef17 	ldw	r3,-68(fp)
    2a4c:	2909383a 	mul	r4,r5,r4
    2a50:	1085883a 	add	r2,r2,r2
    2a54:	1105883a 	add	r2,r2,r4
    2a58:	100490ba 	slli	r2,r2,2
    2a5c:	1889883a 	add	r4,r3,r2
    2a60:	20800017 	ldw	r2,0(r4)
    2a64:	20c00117 	ldw	r3,4(r4)
    2a68:	8026d0ba 	srli	r19,r16,2
    2a6c:	e13ff317 	ldw	r4,-52(fp)
    2a70:	24800044 	addi	r18,r4,1
    2a74:	e13ff417 	ldw	r4,-48(fp)
    2a78:	24400044 	addi	r17,r4,1
    2a7c:	1009883a 	mov	r4,r2
    2a80:	180b883a 	mov	r5,r3
    2a84:	00040f80 	call	40f8 <sqrt>
    2a88:	1009883a 	mov	r4,r2
    2a8c:	180b883a 	mov	r5,r3
    2a90:	e0ffef17 	ldw	r3,-68(fp)
    2a94:	9c85383a 	mul	r2,r19,r18
    2a98:	8c4d883a 	add	r6,r17,r17
    2a9c:	3085883a 	add	r2,r6,r2
    2aa0:	100490ba 	slli	r2,r2,2
    2aa4:	1885883a 	add	r2,r3,r2
    2aa8:	11000015 	stw	r4,0(r2)
    2aac:	11400115 	stw	r5,4(r2)
		for (j = 1; j < num_frames_mfcc; j++) {
    2ab0:	e0bff417 	ldw	r2,-48(fp)
    2ab4:	10800044 	addi	r2,r2,1
    2ab8:	e0bff415 	stw	r2,-48(fp)
    2abc:	e0fff417 	ldw	r3,-48(fp)
    2ac0:	e0bff217 	ldw	r2,-56(fp)
    2ac4:	18bf8716 	blt	r3,r2,28e4 <compare_mfcc_buffers+0x204>
	for (i = 1; i < num_frames_mfcc; i++) {
    2ac8:	e0bff317 	ldw	r2,-52(fp)
    2acc:	10800044 	addi	r2,r2,1
    2ad0:	e0bff315 	stw	r2,-52(fp)
    2ad4:	e0fff317 	ldw	r3,-52(fp)
    2ad8:	e0bff217 	ldw	r2,-56(fp)
    2adc:	18bf7e16 	blt	r3,r2,28d8 <compare_mfcc_buffers+0x1f8>
		}
	}

	// Calculate the shortest distance between from one side to the other in the matrix.
	for (i = 1; i <= num_frames_mfcc; i++) {
    2ae0:	00800044 	movi	r2,1
    2ae4:	e0bff315 	stw	r2,-52(fp)
    2ae8:	00007b06 	br	2cd8 <compare_mfcc_buffers+0x5f8>
		for (j = 1; j <= num_frames_mfcc; j++) {
    2aec:	00800044 	movi	r2,1
    2af0:	e0bff415 	stw	r2,-48(fp)
    2af4:	00007206 	br	2cc0 <compare_mfcc_buffers+0x5e0>
			double shortest_distance = distances_frames[i - 1][j];
    2af8:	800ad0ba 	srli	r5,r16,2
    2afc:	e0bff317 	ldw	r2,-52(fp)
    2b00:	113fffc4 	addi	r4,r2,-1
    2b04:	e0ffef17 	ldw	r3,-68(fp)
    2b08:	e0bff417 	ldw	r2,-48(fp)
    2b0c:	2909383a 	mul	r4,r5,r4
    2b10:	1085883a 	add	r2,r2,r2
    2b14:	1105883a 	add	r2,r2,r4
    2b18:	100490ba 	slli	r2,r2,2
    2b1c:	1885883a 	add	r2,r3,r2
    2b20:	10c00017 	ldw	r3,0(r2)
    2b24:	e0fff615 	stw	r3,-40(fp)
    2b28:	10800117 	ldw	r2,4(r2)
    2b2c:	e0bff715 	stw	r2,-36(fp)
			if (distances_frames[i - 1][j - 1] < shortest_distance) {
    2b30:	800ad0ba 	srli	r5,r16,2
    2b34:	e0bff317 	ldw	r2,-52(fp)
    2b38:	113fffc4 	addi	r4,r2,-1
    2b3c:	e0bff417 	ldw	r2,-48(fp)
    2b40:	10bfffc4 	addi	r2,r2,-1
    2b44:	e0ffef17 	ldw	r3,-68(fp)
    2b48:	2909383a 	mul	r4,r5,r4
    2b4c:	1085883a 	add	r2,r2,r2
    2b50:	1105883a 	add	r2,r2,r4
    2b54:	100490ba 	slli	r2,r2,2
    2b58:	1889883a 	add	r4,r3,r2
    2b5c:	20800017 	ldw	r2,0(r4)
    2b60:	20c00117 	ldw	r3,4(r4)
    2b64:	100d883a 	mov	r6,r2
    2b68:	180f883a 	mov	r7,r3
    2b6c:	e13ff617 	ldw	r4,-40(fp)
    2b70:	e17ff717 	ldw	r5,-36(fp)
    2b74:	000b6280 	call	b628 <__gedf2>
    2b78:	00800f0e 	bge	zero,r2,2bb8 <compare_mfcc_buffers+0x4d8>
				shortest_distance = distances_frames[i - 1][j - 1];
    2b7c:	800ad0ba 	srli	r5,r16,2
    2b80:	e0bff317 	ldw	r2,-52(fp)
    2b84:	113fffc4 	addi	r4,r2,-1
    2b88:	e0bff417 	ldw	r2,-48(fp)
    2b8c:	10bfffc4 	addi	r2,r2,-1
    2b90:	e0ffef17 	ldw	r3,-68(fp)
    2b94:	2909383a 	mul	r4,r5,r4
    2b98:	1085883a 	add	r2,r2,r2
    2b9c:	1105883a 	add	r2,r2,r4
    2ba0:	100490ba 	slli	r2,r2,2
    2ba4:	1885883a 	add	r2,r3,r2
    2ba8:	10c00017 	ldw	r3,0(r2)
    2bac:	e0fff615 	stw	r3,-40(fp)
    2bb0:	10800117 	ldw	r2,4(r2)
    2bb4:	e0bff715 	stw	r2,-36(fp)
			}
			if (distances_frames[i][j - 1] < shortest_distance) {
    2bb8:	800ad0ba 	srli	r5,r16,2
    2bbc:	e0bff417 	ldw	r2,-48(fp)
    2bc0:	10bfffc4 	addi	r2,r2,-1
    2bc4:	e0ffef17 	ldw	r3,-68(fp)
    2bc8:	e13ff317 	ldw	r4,-52(fp)
    2bcc:	2909383a 	mul	r4,r5,r4
    2bd0:	1085883a 	add	r2,r2,r2
    2bd4:	1105883a 	add	r2,r2,r4
    2bd8:	100490ba 	slli	r2,r2,2
    2bdc:	1889883a 	add	r4,r3,r2
    2be0:	20800017 	ldw	r2,0(r4)
    2be4:	20c00117 	ldw	r3,4(r4)
    2be8:	100d883a 	mov	r6,r2
    2bec:	180f883a 	mov	r7,r3
    2bf0:	e13ff617 	ldw	r4,-40(fp)
    2bf4:	e17ff717 	ldw	r5,-36(fp)
    2bf8:	000b6280 	call	b628 <__gedf2>
    2bfc:	00800e0e 	bge	zero,r2,2c38 <compare_mfcc_buffers+0x558>
				shortest_distance = distances_frames[i][j - 1];
    2c00:	800ad0ba 	srli	r5,r16,2
    2c04:	e0bff417 	ldw	r2,-48(fp)
    2c08:	10bfffc4 	addi	r2,r2,-1
    2c0c:	e0ffef17 	ldw	r3,-68(fp)
    2c10:	e13ff317 	ldw	r4,-52(fp)
    2c14:	2909383a 	mul	r4,r5,r4
    2c18:	1085883a 	add	r2,r2,r2
    2c1c:	1105883a 	add	r2,r2,r4
    2c20:	100490ba 	slli	r2,r2,2
    2c24:	1885883a 	add	r2,r3,r2
    2c28:	10c00017 	ldw	r3,0(r2)
    2c2c:	e0fff615 	stw	r3,-40(fp)
    2c30:	10800117 	ldw	r2,4(r2)
    2c34:	e0bff715 	stw	r2,-36(fp)
			}
			distances_frames[i][j] += shortest_distance;
    2c38:	800ad0ba 	srli	r5,r16,2
    2c3c:	e0ffef17 	ldw	r3,-68(fp)
    2c40:	e0bff417 	ldw	r2,-48(fp)
    2c44:	e13ff317 	ldw	r4,-52(fp)
    2c48:	2909383a 	mul	r4,r5,r4
    2c4c:	1085883a 	add	r2,r2,r2
    2c50:	1105883a 	add	r2,r2,r4
    2c54:	100490ba 	slli	r2,r2,2
    2c58:	1889883a 	add	r4,r3,r2
    2c5c:	20800017 	ldw	r2,0(r4)
    2c60:	20c00117 	ldw	r3,4(r4)
    2c64:	8022d0ba 	srli	r17,r16,2
    2c68:	e1bff617 	ldw	r6,-40(fp)
    2c6c:	e1fff717 	ldw	r7,-36(fp)
    2c70:	1009883a 	mov	r4,r2
    2c74:	180b883a 	mov	r5,r3
    2c78:	000a4680 	call	a468 <__adddf3>
    2c7c:	1009883a 	mov	r4,r2
    2c80:	180b883a 	mov	r5,r3
    2c84:	2005883a 	mov	r2,r4
    2c88:	2807883a 	mov	r3,r5
    2c8c:	e17fef17 	ldw	r5,-68(fp)
    2c90:	e13ff417 	ldw	r4,-48(fp)
    2c94:	e1bff317 	ldw	r6,-52(fp)
    2c98:	898d383a 	mul	r6,r17,r6
    2c9c:	2109883a 	add	r4,r4,r4
    2ca0:	2189883a 	add	r4,r4,r6
    2ca4:	200890ba 	slli	r4,r4,2
    2ca8:	2909883a 	add	r4,r5,r4
    2cac:	20800015 	stw	r2,0(r4)
    2cb0:	20c00115 	stw	r3,4(r4)
		for (j = 1; j <= num_frames_mfcc; j++) {
    2cb4:	e0bff417 	ldw	r2,-48(fp)
    2cb8:	10800044 	addi	r2,r2,1
    2cbc:	e0bff415 	stw	r2,-48(fp)
    2cc0:	e0bff417 	ldw	r2,-48(fp)
    2cc4:	e0fff217 	ldw	r3,-56(fp)
    2cc8:	18bf8b0e 	bge	r3,r2,2af8 <compare_mfcc_buffers+0x418>
	for (i = 1; i <= num_frames_mfcc; i++) {
    2ccc:	e0bff317 	ldw	r2,-52(fp)
    2cd0:	10800044 	addi	r2,r2,1
    2cd4:	e0bff315 	stw	r2,-52(fp)
    2cd8:	e0bff317 	ldw	r2,-52(fp)
    2cdc:	e0fff217 	ldw	r3,-56(fp)
    2ce0:	18bf820e 	bge	r3,r2,2aec <compare_mfcc_buffers+0x40c>
		}
	}

	return distances_frames[num_frames_mfcc-1][num_frames_mfcc-1];
    2ce4:	800ad0ba 	srli	r5,r16,2
    2ce8:	e0bff217 	ldw	r2,-56(fp)
    2cec:	113fffc4 	addi	r4,r2,-1
    2cf0:	e0bff217 	ldw	r2,-56(fp)
    2cf4:	10bfffc4 	addi	r2,r2,-1
    2cf8:	e0ffef17 	ldw	r3,-68(fp)
    2cfc:	2909383a 	mul	r4,r5,r4
    2d00:	1085883a 	add	r2,r2,r2
    2d04:	1105883a 	add	r2,r2,r4
    2d08:	100490ba 	slli	r2,r2,2
    2d0c:	1889883a 	add	r4,r3,r2
    2d10:	20800017 	ldw	r2,0(r4)
    2d14:	20c00117 	ldw	r3,4(r4)
    2d18:	e6ffec17 	ldw	sp,-80(fp)
    2d1c:	1009883a 	mov	r4,r2
    2d20:	180b883a 	mov	r5,r3
}
    2d24:	2005883a 	mov	r2,r4
    2d28:	2807883a 	mov	r3,r5
    2d2c:	e6fff804 	addi	sp,fp,-32
    2d30:	dfc00917 	ldw	ra,36(sp)
    2d34:	df000817 	ldw	fp,32(sp)
    2d38:	ddc00717 	ldw	r23,28(sp)
    2d3c:	dd800617 	ldw	r22,24(sp)
    2d40:	dd400517 	ldw	r21,20(sp)
    2d44:	dd000417 	ldw	r20,16(sp)
    2d48:	dcc00317 	ldw	r19,12(sp)
    2d4c:	dc800217 	ldw	r18,8(sp)
    2d50:	dc400117 	ldw	r17,4(sp)
    2d54:	dc000017 	ldw	r16,0(sp)
    2d58:	dec00a04 	addi	sp,sp,40
    2d5c:	f800283a 	ret

00002d60 <clearLCD>:

void clearLCD() {
    2d60:	defffd04 	addi	sp,sp,-12
    2d64:	dfc00215 	stw	ra,8(sp)
    2d68:	df000115 	stw	fp,4(sp)
    2d6c:	df000104 	addi	fp,sp,4
	for (int i = 0; i < 16; i++) {
    2d70:	e03fff15 	stw	zero,-4(fp)
    2d74:	00000f06 	br	2db4 <clearLCD+0x54>
		alt_up_character_lcd_erase_pos(char_lcd_dev, i, 0);
    2d78:	d0a73f17 	ldw	r2,-25348(gp)
    2d7c:	e0ffff17 	ldw	r3,-4(fp)
    2d80:	000d883a 	mov	r6,zero
    2d84:	180b883a 	mov	r5,r3
    2d88:	1009883a 	mov	r4,r2
    2d8c:	001f6a40 	call	1f6a4 <alt_up_character_lcd_erase_pos>
		alt_up_character_lcd_erase_pos(char_lcd_dev, i, 1);
    2d90:	d0a73f17 	ldw	r2,-25348(gp)
    2d94:	e0ffff17 	ldw	r3,-4(fp)
    2d98:	01800044 	movi	r6,1
    2d9c:	180b883a 	mov	r5,r3
    2da0:	1009883a 	mov	r4,r2
    2da4:	001f6a40 	call	1f6a4 <alt_up_character_lcd_erase_pos>
	for (int i = 0; i < 16; i++) {
    2da8:	e0bfff17 	ldw	r2,-4(fp)
    2dac:	10800044 	addi	r2,r2,1
    2db0:	e0bfff15 	stw	r2,-4(fp)
    2db4:	e0bfff17 	ldw	r2,-4(fp)
    2db8:	10800410 	cmplti	r2,r2,16
    2dbc:	103fee1e 	bne	r2,zero,2d78 <clearLCD+0x18>
	}
}
    2dc0:	0001883a 	nop
    2dc4:	0001883a 	nop
    2dc8:	e037883a 	mov	sp,fp
    2dcc:	dfc00117 	ldw	ra,4(sp)
    2dd0:	df000017 	ldw	fp,0(sp)
    2dd4:	dec00204 	addi	sp,sp,8
    2dd8:	f800283a 	ret

00002ddc <writeToLCD>:

void writeToLCD(char* first_row, char* second_row) {
    2ddc:	defffc04 	addi	sp,sp,-16
    2de0:	dfc00315 	stw	ra,12(sp)
    2de4:	df000215 	stw	fp,8(sp)
    2de8:	df000204 	addi	fp,sp,8
    2dec:	e13fff15 	stw	r4,-4(fp)
    2df0:	e17ffe15 	stw	r5,-8(fp)
	clearLCD();
    2df4:	0002d600 	call	2d60 <clearLCD>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
    2df8:	d0a73f17 	ldw	r2,-25348(gp)
    2dfc:	000d883a 	mov	r6,zero
    2e00:	000b883a 	mov	r5,zero
    2e04:	1009883a 	mov	r4,r2
    2e08:	001f5180 	call	1f518 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, first_row);
    2e0c:	d0a73f17 	ldw	r2,-25348(gp)
    2e10:	e17fff17 	ldw	r5,-4(fp)
    2e14:	1009883a 	mov	r4,r2
    2e18:	001f44c0 	call	1f44c <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
    2e1c:	d0a73f17 	ldw	r2,-25348(gp)
    2e20:	01800044 	movi	r6,1
    2e24:	000b883a 	mov	r5,zero
    2e28:	1009883a 	mov	r4,r2
    2e2c:	001f5180 	call	1f518 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, second_row);
    2e30:	d0a73f17 	ldw	r2,-25348(gp)
    2e34:	e17ffe17 	ldw	r5,-8(fp)
    2e38:	1009883a 	mov	r4,r2
    2e3c:	001f44c0 	call	1f44c <alt_up_character_lcd_string>
}
    2e40:	0001883a 	nop
    2e44:	e037883a 	mov	sp,fp
    2e48:	dfc00117 	ldw	ra,4(sp)
    2e4c:	df000017 	ldw	fp,0(sp)
    2e50:	dec00204 	addi	sp,sp,8
    2e54:	f800283a 	ret

00002e58 <checkIfSDCardIsPresent>:

void checkIfSDCardIsPresent() {
    2e58:	defffe04 	addi	sp,sp,-8
    2e5c:	dfc00115 	stw	ra,4(sp)
    2e60:	df000015 	stw	fp,0(sp)
    2e64:	d839883a 	mov	fp,sp
	//printf("test");
	if (sd_card_dev != NULL) {
    2e68:	d0a74017 	ldw	r2,-25344(gp)
    2e6c:	10001d26 	beq	r2,zero,2ee4 <checkIfSDCardIsPresent+0x8c>
		//printf("test");
		if (connected == 0 && alt_up_sd_card_is_Present()) {
    2e70:	d0a74117 	ldw	r2,-25340(gp)
    2e74:	1000111e 	bne	r2,zero,2ebc <checkIfSDCardIsPresent+0x64>
    2e78:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
    2e7c:	10000f26 	beq	r2,zero,2ebc <checkIfSDCardIsPresent+0x64>
			printf("SD Card detected\n");
    2e80:	010000b4 	movhi	r4,2
    2e84:	2103c504 	addi	r4,r4,3860
    2e88:	000d6940 	call	d694 <puts>
			if (alt_up_sd_card_is_FAT16()) {
    2e8c:	001d5740 	call	1d574 <alt_up_sd_card_is_FAT16>
    2e90:	10000426 	beq	r2,zero,2ea4 <checkIfSDCardIsPresent+0x4c>
				printf("FAT16 file system detected\n");
    2e94:	010000b4 	movhi	r4,2
    2e98:	2103ca04 	addi	r4,r4,3880
    2e9c:	000d6940 	call	d694 <puts>
    2ea0:	00000306 	br	2eb0 <checkIfSDCardIsPresent+0x58>
			}
			else {
				printf("unknown file system detected\n");
    2ea4:	010000b4 	movhi	r4,2
    2ea8:	2103d104 	addi	r4,r4,3908
    2eac:	000d6940 	call	d694 <puts>
			}
			connected = 1;
    2eb0:	00800044 	movi	r2,1
    2eb4:	d0a74115 	stw	r2,-25340(gp)
		}
	}
	else {
		printf("error with sd card.");
	}
}
    2eb8:	00000d06 	br	2ef0 <checkIfSDCardIsPresent+0x98>
		else if (connected == 1 && alt_up_sd_card_is_Present() == false) {
    2ebc:	d0a74117 	ldw	r2,-25340(gp)
    2ec0:	10800058 	cmpnei	r2,r2,1
    2ec4:	10000a1e 	bne	r2,zero,2ef0 <checkIfSDCardIsPresent+0x98>
    2ec8:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
    2ecc:	1000081e 	bne	r2,zero,2ef0 <checkIfSDCardIsPresent+0x98>
			printf("SD Card is disconnected.\n");
    2ed0:	010000b4 	movhi	r4,2
    2ed4:	2103d904 	addi	r4,r4,3940
    2ed8:	000d6940 	call	d694 <puts>
			connected = 0;
    2edc:	d0274115 	stw	zero,-25340(gp)
}
    2ee0:	00000306 	br	2ef0 <checkIfSDCardIsPresent+0x98>
		printf("error with sd card.");
    2ee4:	010000b4 	movhi	r4,2
    2ee8:	2103e004 	addi	r4,r4,3968
    2eec:	000d5900 	call	d590 <printf>
}
    2ef0:	0001883a 	nop
    2ef4:	e037883a 	mov	sp,fp
    2ef8:	dfc00117 	ldw	ra,4(sp)
    2efc:	df000017 	ldw	fp,0(sp)
    2f00:	dec00204 	addi	sp,sp,8
    2f04:	f800283a 	ret

00002f08 <get_values_from_sd_card_file>:

bool get_values_from_sd_card_file(char* filename, float *output) {
    2f08:	defbf604 	addi	sp,sp,-4136
    2f0c:	dfc40915 	stw	ra,4132(sp)
    2f10:	df040815 	stw	fp,4128(sp)
    2f14:	dc040715 	stw	r16,4124(sp)
    2f18:	df040804 	addi	fp,sp,4128
    2f1c:	e13bf915 	stw	r4,-4124(fp)
    2f20:	e17bf815 	stw	r5,-4128(fp)
    short int file_handle = alt_up_sd_card_fopen(filename, false);
    2f24:	000b883a 	mov	r5,zero
    2f28:	e13bf917 	ldw	r4,-4124(fp)
    2f2c:	001da040 	call	1da04 <alt_up_sd_card_fopen>
    2f30:	e0bffb8d 	sth	r2,-18(fp)
    if (file_handle == -1) {
    2f34:	e0bffb8f 	ldh	r2,-18(fp)
    2f38:	10bfffd8 	cmpnei	r2,r2,-1
    2f3c:	1000061e 	bne	r2,zero,2f58 <get_values_from_sd_card_file+0x50>
        printf("Could not open file: %s\n", filename);
    2f40:	e17bf917 	ldw	r5,-4124(fp)
    2f44:	010000b4 	movhi	r4,2
    2f48:	2103e504 	addi	r4,r4,3988
    2f4c:	000d5900 	call	d590 <printf>
        return false;
    2f50:	0005883a 	mov	r2,zero
    2f54:	00004006 	br	3058 <get_values_from_sd_card_file+0x150>
    }

    char buffer[4096];
    int buffer_index = 0;
    2f58:	e03ffe15 	stw	zero,-8(fp)
    int byte_read;

    // Read file into buffer
    while ((byte_read = alt_up_sd_card_read(file_handle)) >= 0) {
    2f5c:	00001306 	br	2fac <get_values_from_sd_card_file+0xa4>
        if (buffer_index < 4096 - 1) {
    2f60:	e0bffe17 	ldw	r2,-8(fp)
    2f64:	1083ffc8 	cmpgei	r2,r2,4095
    2f68:	1000081e 	bne	r2,zero,2f8c <get_values_from_sd_card_file+0x84>
            buffer[buffer_index++] = (char) byte_read;
    2f6c:	e0bffe17 	ldw	r2,-8(fp)
    2f70:	10c00044 	addi	r3,r2,1
    2f74:	e0fffe15 	stw	r3,-8(fp)
    2f78:	e0fffa17 	ldw	r3,-24(fp)
    2f7c:	10bfff04 	addi	r2,r2,-4
    2f80:	1705883a 	add	r2,r2,fp
    2f84:	10fbfb05 	stb	r3,-4116(r2)
    2f88:	00000806 	br	2fac <get_values_from_sd_card_file+0xa4>
        } else {
            printf("Buffer overflow while reading file.\n");
    2f8c:	010000b4 	movhi	r4,2
    2f90:	2103ec04 	addi	r4,r4,4016
    2f94:	000d6940 	call	d694 <puts>
            alt_up_sd_card_fclose(file_handle);
    2f98:	e0bffb8f 	ldh	r2,-18(fp)
    2f9c:	1009883a 	mov	r4,r2
    2fa0:	001e5c40 	call	1e5c4 <alt_up_sd_card_fclose>
            return false;
    2fa4:	0005883a 	mov	r2,zero
    2fa8:	00002b06 	br	3058 <get_values_from_sd_card_file+0x150>
    while ((byte_read = alt_up_sd_card_read(file_handle)) >= 0) {
    2fac:	e0bffb8f 	ldh	r2,-18(fp)
    2fb0:	1009883a 	mov	r4,r2
    2fb4:	001ddf40 	call	1ddf4 <alt_up_sd_card_read>
    2fb8:	10bfffcc 	andi	r2,r2,65535
    2fbc:	10a0001c 	xori	r2,r2,32768
    2fc0:	10a00004 	addi	r2,r2,-32768
    2fc4:	e0bffa15 	stw	r2,-24(fp)
    2fc8:	e0bffa17 	ldw	r2,-24(fp)
    2fcc:	103fe40e 	bge	r2,zero,2f60 <get_values_from_sd_card_file+0x58>
        }
    }
    buffer[buffer_index] = '\0'; // Null-terminate the buffer
    2fd0:	e0bffe17 	ldw	r2,-8(fp)
    2fd4:	10bfff04 	addi	r2,r2,-4
    2fd8:	1705883a 	add	r2,r2,fp
    2fdc:	103bfb05 	stb	zero,-4116(r2)

    alt_up_sd_card_fclose(file_handle);
    2fe0:	e0bffb8f 	ldh	r2,-18(fp)
    2fe4:	1009883a 	mov	r4,r2
    2fe8:	001e5c40 	call	1e5c4 <alt_up_sd_card_fclose>

    // Parse buffer contents
    int output_index = 0;
    2fec:	e03ffd15 	stw	zero,-12(fp)
    char *token = strtok(buffer, ",");
    2ff0:	e0bbfa04 	addi	r2,fp,-4120
    2ff4:	014000b4 	movhi	r5,2
    2ff8:	2943f504 	addi	r5,r5,4052
    2ffc:	1009883a 	mov	r4,r2
    3000:	000effc0 	call	effc <strtok>
    3004:	e0bffc15 	stw	r2,-16(fp)
    while (token != NULL) {
    3008:	00001006 	br	304c <get_values_from_sd_card_file+0x144>
        output[output_index++] = strtof(token, NULL);
    300c:	e0bffd17 	ldw	r2,-12(fp)
    3010:	10c00044 	addi	r3,r2,1
    3014:	e0fffd15 	stw	r3,-12(fp)
    3018:	100490ba 	slli	r2,r2,2
    301c:	e0fbf817 	ldw	r3,-4128(fp)
    3020:	18a1883a 	add	r16,r3,r2
    3024:	000b883a 	mov	r5,zero
    3028:	e13ffc17 	ldw	r4,-16(fp)
    302c:	000eed80 	call	eed8 <strtof>
    3030:	1007883a 	mov	r3,r2
    3034:	80c00015 	stw	r3,0(r16)
        token = strtok(NULL, ",");
    3038:	014000b4 	movhi	r5,2
    303c:	2943f504 	addi	r5,r5,4052
    3040:	0009883a 	mov	r4,zero
    3044:	000effc0 	call	effc <strtok>
    3048:	e0bffc15 	stw	r2,-16(fp)
    while (token != NULL) {
    304c:	e0bffc17 	ldw	r2,-16(fp)
    3050:	103fee1e 	bne	r2,zero,300c <get_values_from_sd_card_file+0x104>
//    printf("Values read from file %s:\n", filename);
//    for (int i = 0; i < output_index; i++) {
//        printf("%f\n", output[i]);
//    }

    return true;
    3054:	00800044 	movi	r2,1
}
    3058:	e6ffff04 	addi	sp,fp,-4
    305c:	dfc00217 	ldw	ra,8(sp)
    3060:	df000117 	ldw	fp,4(sp)
    3064:	dc000017 	ldw	r16,0(sp)
    3068:	dec00304 	addi	sp,sp,12
    306c:	f800283a 	ret

00003070 <list_files_on_sd_card>:

void list_files_on_sd_card() {
    3070:	defffa04 	addi	sp,sp,-24
    3074:	dfc00515 	stw	ra,20(sp)
    3078:	df000415 	stw	fp,16(sp)
    307c:	df000404 	addi	fp,sp,16
    char filename[13];  // 8.3 filename format + null terminator

    // List all files in the root directory
    printf("Files on the SD card:\n");
    3080:	010000b4 	movhi	r4,2
    3084:	2103f604 	addi	r4,r4,4056
    3088:	000d6940 	call	d694 <puts>
    if (alt_up_sd_card_find_first("/dev/SD_Card", filename) == 0) {
    308c:	e0bffcc4 	addi	r2,fp,-13
    3090:	100b883a 	mov	r5,r2
    3094:	010000b4 	movhi	r4,2
    3098:	21036504 	addi	r4,r4,3476
    309c:	001d5dc0 	call	1d5dc <alt_up_sd_card_find_first>
    30a0:	10bfffcc 	andi	r2,r2,65535
    30a4:	10a0001c 	xori	r2,r2,32768
    30a8:	10a00004 	addi	r2,r2,-32768
    30ac:	10000b1e 	bne	r2,zero,30dc <list_files_on_sd_card+0x6c>
        do {
            printf("%s\n", filename);
    30b0:	e0bffcc4 	addi	r2,fp,-13
    30b4:	1009883a 	mov	r4,r2
    30b8:	000d6940 	call	d694 <puts>
        } while (alt_up_sd_card_find_next(filename) == 0);
    30bc:	e0bffcc4 	addi	r2,fp,-13
    30c0:	1009883a 	mov	r4,r2
    30c4:	001d6980 	call	1d698 <alt_up_sd_card_find_next>
    30c8:	10bfffcc 	andi	r2,r2,65535
    30cc:	10a0001c 	xori	r2,r2,32768
    30d0:	10a00004 	addi	r2,r2,-32768
    30d4:	103ff626 	beq	r2,zero,30b0 <list_files_on_sd_card+0x40>
    } else {
        printf("No files found on the SD card.\n");
    }
}
    30d8:	00000306 	br	30e8 <list_files_on_sd_card+0x78>
        printf("No files found on the SD card.\n");
    30dc:	010000b4 	movhi	r4,2
    30e0:	2103fc04 	addi	r4,r4,4080
    30e4:	000d6940 	call	d694 <puts>
}
    30e8:	0001883a 	nop
    30ec:	e037883a 	mov	sp,fp
    30f0:	dfc00117 	ldw	ra,4(sp)
    30f4:	df000017 	ldw	fp,0(sp)
    30f8:	dec00204 	addi	sp,sp,8
    30fc:	f800283a 	ret

00003100 <GetCoefficient>:
 * binSize - the size of the spectralData array, usually a power of 2
 * m - The mth MFCC coefficient to compute
 *
 */
double GetCoefficient(double* spectralData, unsigned int samplingRate, unsigned int NumFilters, unsigned int binSize, unsigned int m)
{
    3100:	deffee04 	addi	sp,sp,-72
    3104:	dfc01115 	stw	ra,68(sp)
    3108:	df001015 	stw	fp,64(sp)
    310c:	dcc00f15 	stw	r19,60(sp)
    3110:	dc800e15 	stw	r18,56(sp)
    3114:	dc400d15 	stw	r17,52(sp)
    3118:	dc000c15 	stw	r16,48(sp)
    311c:	df001004 	addi	fp,sp,64
    3120:	e13ff315 	stw	r4,-52(fp)
    3124:	e17ff215 	stw	r5,-56(fp)
    3128:	e1bff115 	stw	r6,-60(fp)
    312c:	e1fff015 	stw	r7,-64(fp)
	double result = 0.0f;
    3130:	e03ff415 	stw	zero,-48(fp)
    3134:	e03ff515 	stw	zero,-44(fp)
	double outerSum = 0.0f;
    3138:	e03ffa15 	stw	zero,-24(fp)
    313c:	e03ffb15 	stw	zero,-20(fp)
	double innerSum = 0.0f;
    3140:	e03ff815 	stw	zero,-32(fp)
    3144:	e03ff915 	stw	zero,-28(fp)
	unsigned int k, l;

	// 0 <= m < L
	if(m >= NumFilters)
    3148:	e0c00217 	ldw	r3,8(fp)
    314c:	e0bff117 	ldw	r2,-60(fp)
    3150:	18800336 	bltu	r3,r2,3160 <GetCoefficient+0x60>
	{
		// This represents an error condition - the specified coefficient is greater than or equal to the number of filters. The behavior in this case is undefined.
		return 0.0f;
    3154:	0005883a 	mov	r2,zero
    3158:	0007883a 	mov	r3,zero
    315c:	00007f06 	br	335c <GetCoefficient+0x25c>
	}

	result = NormalizationFactor(NumFilters, m);
    3160:	e0bff117 	ldw	r2,-60(fp)
    3164:	e0c00217 	ldw	r3,8(fp)
    3168:	180b883a 	mov	r5,r3
    316c:	1009883a 	mov	r4,r2
    3170:	00033900 	call	3390 <NormalizationFactor>
    3174:	e0bff415 	stw	r2,-48(fp)
    3178:	e0fff515 	stw	r3,-44(fp)

	for(l = 1; l <= NumFilters; l++)
    317c:	00800044 	movi	r2,1
    3180:	e0bff615 	stw	r2,-40(fp)
    3184:	00006706 	br	3324 <GetCoefficient+0x224>
	{
		// Compute inner sum
		innerSum = 0.0f;
    3188:	e03ff815 	stw	zero,-32(fp)
    318c:	e03ff915 	stw	zero,-28(fp)
		for(k = 0; k < binSize - 1; k++)
    3190:	e03ff715 	stw	zero,-36(fp)
    3194:	00002606 	br	3230 <GetCoefficient+0x130>
		{
			innerSum += fabs(spectralData[k] * GetFilterParameter(samplingRate, binSize, k, l));
    3198:	e0bff717 	ldw	r2,-36(fp)
    319c:	100490fa 	slli	r2,r2,3
    31a0:	e0fff317 	ldw	r3,-52(fp)
    31a4:	1885883a 	add	r2,r3,r2
    31a8:	14000017 	ldw	r16,0(r2)
    31ac:	14400117 	ldw	r17,4(r2)
    31b0:	e1fff617 	ldw	r7,-40(fp)
    31b4:	e1bff717 	ldw	r6,-36(fp)
    31b8:	e17ff017 	ldw	r5,-64(fp)
    31bc:	e13ff217 	ldw	r4,-56(fp)
    31c0:	00034580 	call	3458 <GetFilterParameter>
    31c4:	1009883a 	mov	r4,r2
    31c8:	180b883a 	mov	r5,r3
    31cc:	200d883a 	mov	r6,r4
    31d0:	280f883a 	mov	r7,r5
    31d4:	8009883a 	mov	r4,r16
    31d8:	880b883a 	mov	r5,r17
    31dc:	000b7f80 	call	b7f8 <__muldf3>
    31e0:	100d883a 	mov	r6,r2
    31e4:	180f883a 	mov	r7,r3
    31e8:	3009883a 	mov	r4,r6
    31ec:	380b883a 	mov	r5,r7
    31f0:	2025883a 	mov	r18,r4
    31f4:	00a00034 	movhi	r2,32768
    31f8:	10bfffc4 	addi	r2,r2,-1
    31fc:	28a6703a 	and	r19,r5,r2
    3200:	900d883a 	mov	r6,r18
    3204:	980f883a 	mov	r7,r19
    3208:	e13ff817 	ldw	r4,-32(fp)
    320c:	e17ff917 	ldw	r5,-28(fp)
    3210:	000a4680 	call	a468 <__adddf3>
    3214:	1009883a 	mov	r4,r2
    3218:	180b883a 	mov	r5,r3
    321c:	e13ff815 	stw	r4,-32(fp)
    3220:	e17ff915 	stw	r5,-28(fp)
		for(k = 0; k < binSize - 1; k++)
    3224:	e0bff717 	ldw	r2,-36(fp)
    3228:	10800044 	addi	r2,r2,1
    322c:	e0bff715 	stw	r2,-36(fp)
    3230:	e0bff017 	ldw	r2,-64(fp)
    3234:	10bfffc4 	addi	r2,r2,-1
    3238:	e0fff717 	ldw	r3,-36(fp)
    323c:	18bfd636 	bltu	r3,r2,3198 <GetCoefficient+0x98>
		}

		if(innerSum > 0.0f)
    3240:	000d883a 	mov	r6,zero
    3244:	000f883a 	mov	r7,zero
    3248:	e13ff817 	ldw	r4,-32(fp)
    324c:	e17ff917 	ldw	r5,-28(fp)
    3250:	000b6280 	call	b628 <__gedf2>
    3254:	0080050e 	bge	zero,r2,326c <GetCoefficient+0x16c>
		{
			innerSum = log(innerSum); // The log of 0 is undefined, so don't use it
    3258:	e13ff817 	ldw	r4,-32(fp)
    325c:	e17ff917 	ldw	r5,-28(fp)
    3260:	0003d780 	call	3d78 <log>
    3264:	e0bff815 	stw	r2,-32(fp)
    3268:	e0fff915 	stw	r3,-28(fp)
		}

		innerSum = innerSum * cos(((m * PI) / NumFilters) * (l - 0.5f));
    326c:	e1000217 	ldw	r4,8(fp)
    3270:	000a36c0 	call	a36c <__floatunsisf>
    3274:	1007883a 	mov	r3,r2
    3278:	00901274 	movhi	r2,16457
    327c:	1083f6c4 	addi	r2,r2,4059
    3280:	18a1ff32 	custom	252,r16,r3,r2
    3284:	e13ff117 	ldw	r4,-60(fp)
    3288:	000a36c0 	call	a36c <__floatunsisf>
    328c:	1007883a 	mov	r3,r2
    3290:	80e1fff2 	custom	255,r16,r16,r3
    3294:	e13ff617 	ldw	r4,-40(fp)
    3298:	000a36c0 	call	a36c <__floatunsisf>
    329c:	1007883a 	mov	r3,r2
    32a0:	008fc034 	movhi	r2,16128
    32a4:	1885ffb2 	custom	254,r2,r3,r2
    32a8:	8085ff32 	custom	252,r2,r16,r2
    32ac:	1009883a 	mov	r4,r2
    32b0:	000c9940 	call	c994 <__extendsfdf2>
    32b4:	100d883a 	mov	r6,r2
    32b8:	180f883a 	mov	r7,r3
    32bc:	3009883a 	mov	r4,r6
    32c0:	380b883a 	mov	r5,r7
    32c4:	00039840 	call	3984 <cos>
    32c8:	1009883a 	mov	r4,r2
    32cc:	180b883a 	mov	r5,r3
    32d0:	200d883a 	mov	r6,r4
    32d4:	280f883a 	mov	r7,r5
    32d8:	e13ff817 	ldw	r4,-32(fp)
    32dc:	e17ff917 	ldw	r5,-28(fp)
    32e0:	000b7f80 	call	b7f8 <__muldf3>
    32e4:	1009883a 	mov	r4,r2
    32e8:	180b883a 	mov	r5,r3
    32ec:	e13ff815 	stw	r4,-32(fp)
    32f0:	e17ff915 	stw	r5,-28(fp)


		outerSum += innerSum;
    32f4:	e1bff817 	ldw	r6,-32(fp)
    32f8:	e1fff917 	ldw	r7,-28(fp)
    32fc:	e13ffa17 	ldw	r4,-24(fp)
    3300:	e17ffb17 	ldw	r5,-20(fp)
    3304:	000a4680 	call	a468 <__adddf3>
    3308:	1009883a 	mov	r4,r2
    330c:	180b883a 	mov	r5,r3
    3310:	e13ffa15 	stw	r4,-24(fp)
    3314:	e17ffb15 	stw	r5,-20(fp)
	for(l = 1; l <= NumFilters; l++)
    3318:	e0bff617 	ldw	r2,-40(fp)
    331c:	10800044 	addi	r2,r2,1
    3320:	e0bff615 	stw	r2,-40(fp)
    3324:	e0bff617 	ldw	r2,-40(fp)
    3328:	e0fff117 	ldw	r3,-60(fp)
    332c:	18bf962e 	bgeu	r3,r2,3188 <GetCoefficient+0x88>
	}

	result *= outerSum;
    3330:	e1bffa17 	ldw	r6,-24(fp)
    3334:	e1fffb17 	ldw	r7,-20(fp)
    3338:	e13ff417 	ldw	r4,-48(fp)
    333c:	e17ff517 	ldw	r5,-44(fp)
    3340:	000b7f80 	call	b7f8 <__muldf3>
    3344:	1009883a 	mov	r4,r2
    3348:	180b883a 	mov	r5,r3
    334c:	e13ff415 	stw	r4,-48(fp)
    3350:	e17ff515 	stw	r5,-44(fp)

	return result;
    3354:	e0bff417 	ldw	r2,-48(fp)
    3358:	e0fff517 	ldw	r3,-44(fp)
}
    335c:	1009883a 	mov	r4,r2
    3360:	180b883a 	mov	r5,r3
    3364:	2005883a 	mov	r2,r4
    3368:	2807883a 	mov	r3,r5
    336c:	e6fffc04 	addi	sp,fp,-16
    3370:	dfc00517 	ldw	ra,20(sp)
    3374:	df000417 	ldw	fp,16(sp)
    3378:	dcc00317 	ldw	r19,12(sp)
    337c:	dc800217 	ldw	r18,8(sp)
    3380:	dc400117 	ldw	r17,4(sp)
    3384:	dc000017 	ldw	r16,0(sp)
    3388:	dec00604 	addi	sp,sp,24
    338c:	f800283a 	ret

00003390 <NormalizationFactor>:
/*
 * Computes the Normalization Factor (Equation 6)
 * Used for internal computation only - not to be called directly
 */
double NormalizationFactor(int NumFilters, int m)
{
    3390:	defffa04 	addi	sp,sp,-24
    3394:	dfc00515 	stw	ra,20(sp)
    3398:	df000415 	stw	fp,16(sp)
    339c:	df000404 	addi	fp,sp,16
    33a0:	e13ffd15 	stw	r4,-12(fp)
    33a4:	e17ffc15 	stw	r5,-16(fp)
	double normalizationFactor = 0.0f;
    33a8:	e03ffe15 	stw	zero,-8(fp)
    33ac:	e03fff15 	stw	zero,-4(fp)

	if(m == 0)
    33b0:	e0bffc17 	ldw	r2,-16(fp)
    33b4:	10000f1e 	bne	r2,zero,33f4 <NormalizationFactor+0x64>
	{
		normalizationFactor = sqrt(1.0f / NumFilters);
    33b8:	e13ffd17 	ldw	r4,-12(fp)
    33bc:	000a2480 	call	a248 <__floatsisf>
    33c0:	1007883a 	mov	r3,r2
    33c4:	008fe034 	movhi	r2,16256
    33c8:	10c5fff2 	custom	255,r2,r2,r3
    33cc:	1009883a 	mov	r4,r2
    33d0:	000c9940 	call	c994 <__extendsfdf2>
    33d4:	100d883a 	mov	r6,r2
    33d8:	180f883a 	mov	r7,r3
    33dc:	3009883a 	mov	r4,r6
    33e0:	380b883a 	mov	r5,r7
    33e4:	00040f80 	call	40f8 <sqrt>
    33e8:	e0bffe15 	stw	r2,-8(fp)
    33ec:	e0ffff15 	stw	r3,-4(fp)
    33f0:	00000e06 	br	342c <NormalizationFactor+0x9c>
	}
	else
	{
		normalizationFactor = sqrt(2.0f / NumFilters);
    33f4:	e13ffd17 	ldw	r4,-12(fp)
    33f8:	000a2480 	call	a248 <__floatsisf>
    33fc:	1007883a 	mov	r3,r2
    3400:	00900034 	movhi	r2,16384
    3404:	10c5fff2 	custom	255,r2,r2,r3
    3408:	1009883a 	mov	r4,r2
    340c:	000c9940 	call	c994 <__extendsfdf2>
    3410:	100d883a 	mov	r6,r2
    3414:	180f883a 	mov	r7,r3
    3418:	3009883a 	mov	r4,r6
    341c:	380b883a 	mov	r5,r7
    3420:	00040f80 	call	40f8 <sqrt>
    3424:	e0bffe15 	stw	r2,-8(fp)
    3428:	e0ffff15 	stw	r3,-4(fp)
	}

	return normalizationFactor;
    342c:	e0bffe17 	ldw	r2,-8(fp)
    3430:	e0ffff17 	ldw	r3,-4(fp)
    3434:	1009883a 	mov	r4,r2
    3438:	180b883a 	mov	r5,r3
}
    343c:	2005883a 	mov	r2,r4
    3440:	2807883a 	mov	r3,r5
    3444:	e037883a 	mov	sp,fp
    3448:	dfc00117 	ldw	ra,4(sp)
    344c:	df000017 	ldw	fp,0(sp)
    3450:	dec00204 	addi	sp,sp,8
    3454:	f800283a 	ret

00003458 <GetFilterParameter>:
/*
 * Compute the filter parameter for the specified frequency and filter bands (Eq. 2)
 * Used for internal computation only - not the be called directly
 */
double GetFilterParameter(unsigned int samplingRate, unsigned int binSize, unsigned int frequencyBand, unsigned int filterBand)
{
    3458:	deffee04 	addi	sp,sp,-72
    345c:	dfc01115 	stw	ra,68(sp)
    3460:	df001015 	stw	fp,64(sp)
    3464:	dc400f15 	stw	r17,60(sp)
    3468:	dc000e15 	stw	r16,56(sp)
    346c:	df001004 	addi	fp,sp,64
    3470:	e13ff315 	stw	r4,-52(fp)
    3474:	e17ff215 	stw	r5,-56(fp)
    3478:	e1bff115 	stw	r6,-60(fp)
    347c:	e1fff015 	stw	r7,-64(fp)
	double filterParameter = 0.0f;
    3480:	e03ffc15 	stw	zero,-16(fp)
    3484:	e03ffd15 	stw	zero,-12(fp)

	double boundary = (frequencyBand * samplingRate) / binSize;		// k * Fs / N
    3488:	e0fff117 	ldw	r3,-60(fp)
    348c:	e0bff317 	ldw	r2,-52(fp)
    3490:	1887383a 	mul	r3,r3,r2
    3494:	e0bff217 	ldw	r2,-56(fp)
    3498:	1885203a 	divu	r2,r3,r2
    349c:	1009883a 	mov	r4,r2
    34a0:	000c9040 	call	c904 <__floatunsidf>
    34a4:	1009883a 	mov	r4,r2
    34a8:	180b883a 	mov	r5,r3
    34ac:	e13ffa15 	stw	r4,-24(fp)
    34b0:	e17ffb15 	stw	r5,-20(fp)
	double prevCenterFrequency = GetCenterFrequency(filterBand - 1);		// fc(l - 1) etc.
    34b4:	e0bff017 	ldw	r2,-64(fp)
    34b8:	10bfffc4 	addi	r2,r2,-1
    34bc:	1009883a 	mov	r4,r2
    34c0:	00038680 	call	3868 <GetCenterFrequency>
    34c4:	e0bff815 	stw	r2,-32(fp)
    34c8:	e0fff915 	stw	r3,-28(fp)
	double thisCenterFrequency = GetCenterFrequency(filterBand);
    34cc:	e13ff017 	ldw	r4,-64(fp)
    34d0:	00038680 	call	3868 <GetCenterFrequency>
    34d4:	e0bff615 	stw	r2,-40(fp)
    34d8:	e0fff715 	stw	r3,-36(fp)
	double nextCenterFrequency = GetCenterFrequency(filterBand + 1);
    34dc:	e0bff017 	ldw	r2,-64(fp)
    34e0:	10800044 	addi	r2,r2,1
    34e4:	1009883a 	mov	r4,r2
    34e8:	00038680 	call	3868 <GetCenterFrequency>
    34ec:	e0bff415 	stw	r2,-48(fp)
    34f0:	e0fff515 	stw	r3,-44(fp)

	if(boundary >= 0 && boundary < prevCenterFrequency)
    34f4:	000d883a 	mov	r6,zero
    34f8:	000f883a 	mov	r7,zero
    34fc:	e13ffa17 	ldw	r4,-24(fp)
    3500:	e17ffb17 	ldw	r5,-20(fp)
    3504:	000b6280 	call	b628 <__gedf2>
    3508:	10000916 	blt	r2,zero,3530 <GetFilterParameter+0xd8>
    350c:	e1bff817 	ldw	r6,-32(fp)
    3510:	e1fff917 	ldw	r7,-28(fp)
    3514:	e13ffa17 	ldw	r4,-24(fp)
    3518:	e17ffb17 	ldw	r5,-20(fp)
    351c:	000b7100 	call	b710 <__ledf2>
    3520:	1000030e 	bge	r2,zero,3530 <GetFilterParameter+0xd8>
	{
		filterParameter = 0.0f;
    3524:	e03ffc15 	stw	zero,-16(fp)
    3528:	e03ffd15 	stw	zero,-12(fp)
    352c:	00007c06 	br	3720 <GetFilterParameter+0x2c8>
	}
	else if(boundary >= prevCenterFrequency && boundary < thisCenterFrequency)
    3530:	e1bff817 	ldw	r6,-32(fp)
    3534:	e1fff917 	ldw	r7,-28(fp)
    3538:	e13ffa17 	ldw	r4,-24(fp)
    353c:	e17ffb17 	ldw	r5,-20(fp)
    3540:	000b6280 	call	b628 <__gedf2>
    3544:	10002f16 	blt	r2,zero,3604 <GetFilterParameter+0x1ac>
    3548:	e1bff617 	ldw	r6,-40(fp)
    354c:	e1fff717 	ldw	r7,-36(fp)
    3550:	e13ffa17 	ldw	r4,-24(fp)
    3554:	e17ffb17 	ldw	r5,-20(fp)
    3558:	000b7100 	call	b710 <__ledf2>
    355c:	1000290e 	bge	r2,zero,3604 <GetFilterParameter+0x1ac>
	{
		filterParameter = (boundary - prevCenterFrequency) / (thisCenterFrequency - prevCenterFrequency);
    3560:	e1bff817 	ldw	r6,-32(fp)
    3564:	e1fff917 	ldw	r7,-28(fp)
    3568:	e13ffa17 	ldw	r4,-24(fp)
    356c:	e17ffb17 	ldw	r5,-20(fp)
    3570:	000be6c0 	call	be6c <__subdf3>
    3574:	1009883a 	mov	r4,r2
    3578:	180b883a 	mov	r5,r3
    357c:	2021883a 	mov	r16,r4
    3580:	2823883a 	mov	r17,r5
    3584:	e1bff817 	ldw	r6,-32(fp)
    3588:	e1fff917 	ldw	r7,-28(fp)
    358c:	e13ff617 	ldw	r4,-40(fp)
    3590:	e17ff717 	ldw	r5,-36(fp)
    3594:	000be6c0 	call	be6c <__subdf3>
    3598:	1009883a 	mov	r4,r2
    359c:	180b883a 	mov	r5,r3
    35a0:	2005883a 	mov	r2,r4
    35a4:	2807883a 	mov	r3,r5
    35a8:	100d883a 	mov	r6,r2
    35ac:	180f883a 	mov	r7,r3
    35b0:	8009883a 	mov	r4,r16
    35b4:	880b883a 	mov	r5,r17
    35b8:	000ad580 	call	ad58 <__divdf3>
    35bc:	1009883a 	mov	r4,r2
    35c0:	180b883a 	mov	r5,r3
    35c4:	e13ffc15 	stw	r4,-16(fp)
    35c8:	e17ffd15 	stw	r5,-12(fp)
		filterParameter *= GetMagnitudeFactor(filterBand);
    35cc:	e13ff017 	ldw	r4,-64(fp)
    35d0:	00037540 	call	3754 <GetMagnitudeFactor>
    35d4:	1009883a 	mov	r4,r2
    35d8:	180b883a 	mov	r5,r3
    35dc:	200d883a 	mov	r6,r4
    35e0:	280f883a 	mov	r7,r5
    35e4:	e13ffc17 	ldw	r4,-16(fp)
    35e8:	e17ffd17 	ldw	r5,-12(fp)
    35ec:	000b7f80 	call	b7f8 <__muldf3>
    35f0:	1009883a 	mov	r4,r2
    35f4:	180b883a 	mov	r5,r3
    35f8:	e13ffc15 	stw	r4,-16(fp)
    35fc:	e17ffd15 	stw	r5,-12(fp)
    3600:	00004706 	br	3720 <GetFilterParameter+0x2c8>
	}
	else if(boundary >= thisCenterFrequency && boundary < nextCenterFrequency)
    3604:	e1bff617 	ldw	r6,-40(fp)
    3608:	e1fff717 	ldw	r7,-36(fp)
    360c:	e13ffa17 	ldw	r4,-24(fp)
    3610:	e17ffb17 	ldw	r5,-20(fp)
    3614:	000b6280 	call	b628 <__gedf2>
    3618:	10002f16 	blt	r2,zero,36d8 <GetFilterParameter+0x280>
    361c:	e1bff417 	ldw	r6,-48(fp)
    3620:	e1fff517 	ldw	r7,-44(fp)
    3624:	e13ffa17 	ldw	r4,-24(fp)
    3628:	e17ffb17 	ldw	r5,-20(fp)
    362c:	000b7100 	call	b710 <__ledf2>
    3630:	1000290e 	bge	r2,zero,36d8 <GetFilterParameter+0x280>
	{
		filterParameter = (boundary - nextCenterFrequency) / (thisCenterFrequency - nextCenterFrequency);
    3634:	e1bff417 	ldw	r6,-48(fp)
    3638:	e1fff517 	ldw	r7,-44(fp)
    363c:	e13ffa17 	ldw	r4,-24(fp)
    3640:	e17ffb17 	ldw	r5,-20(fp)
    3644:	000be6c0 	call	be6c <__subdf3>
    3648:	1009883a 	mov	r4,r2
    364c:	180b883a 	mov	r5,r3
    3650:	2021883a 	mov	r16,r4
    3654:	2823883a 	mov	r17,r5
    3658:	e1bff417 	ldw	r6,-48(fp)
    365c:	e1fff517 	ldw	r7,-44(fp)
    3660:	e13ff617 	ldw	r4,-40(fp)
    3664:	e17ff717 	ldw	r5,-36(fp)
    3668:	000be6c0 	call	be6c <__subdf3>
    366c:	1009883a 	mov	r4,r2
    3670:	180b883a 	mov	r5,r3
    3674:	2005883a 	mov	r2,r4
    3678:	2807883a 	mov	r3,r5
    367c:	100d883a 	mov	r6,r2
    3680:	180f883a 	mov	r7,r3
    3684:	8009883a 	mov	r4,r16
    3688:	880b883a 	mov	r5,r17
    368c:	000ad580 	call	ad58 <__divdf3>
    3690:	1009883a 	mov	r4,r2
    3694:	180b883a 	mov	r5,r3
    3698:	e13ffc15 	stw	r4,-16(fp)
    369c:	e17ffd15 	stw	r5,-12(fp)
		filterParameter *= GetMagnitudeFactor(filterBand);
    36a0:	e13ff017 	ldw	r4,-64(fp)
    36a4:	00037540 	call	3754 <GetMagnitudeFactor>
    36a8:	1009883a 	mov	r4,r2
    36ac:	180b883a 	mov	r5,r3
    36b0:	200d883a 	mov	r6,r4
    36b4:	280f883a 	mov	r7,r5
    36b8:	e13ffc17 	ldw	r4,-16(fp)
    36bc:	e17ffd17 	ldw	r5,-12(fp)
    36c0:	000b7f80 	call	b7f8 <__muldf3>
    36c4:	1009883a 	mov	r4,r2
    36c8:	180b883a 	mov	r5,r3
    36cc:	e13ffc15 	stw	r4,-16(fp)
    36d0:	e17ffd15 	stw	r5,-12(fp)
    36d4:	00001206 	br	3720 <GetFilterParameter+0x2c8>
	}
	else if(boundary >= nextCenterFrequency && boundary < samplingRate)
    36d8:	e1bff417 	ldw	r6,-48(fp)
    36dc:	e1fff517 	ldw	r7,-44(fp)
    36e0:	e13ffa17 	ldw	r4,-24(fp)
    36e4:	e17ffb17 	ldw	r5,-20(fp)
    36e8:	000b6280 	call	b628 <__gedf2>
    36ec:	10000c16 	blt	r2,zero,3720 <GetFilterParameter+0x2c8>
    36f0:	e13ff317 	ldw	r4,-52(fp)
    36f4:	000c9040 	call	c904 <__floatunsidf>
    36f8:	1009883a 	mov	r4,r2
    36fc:	180b883a 	mov	r5,r3
    3700:	200d883a 	mov	r6,r4
    3704:	280f883a 	mov	r7,r5
    3708:	e13ffa17 	ldw	r4,-24(fp)
    370c:	e17ffb17 	ldw	r5,-20(fp)
    3710:	000b7100 	call	b710 <__ledf2>
    3714:	1000020e 	bge	r2,zero,3720 <GetFilterParameter+0x2c8>
	{
		filterParameter = 0.0f;
    3718:	e03ffc15 	stw	zero,-16(fp)
    371c:	e03ffd15 	stw	zero,-12(fp)
	}

	return filterParameter;
    3720:	e0bffc17 	ldw	r2,-16(fp)
    3724:	e0fffd17 	ldw	r3,-12(fp)
    3728:	1009883a 	mov	r4,r2
    372c:	180b883a 	mov	r5,r3
}
    3730:	2005883a 	mov	r2,r4
    3734:	2807883a 	mov	r3,r5
    3738:	e6fffe04 	addi	sp,fp,-8
    373c:	dfc00317 	ldw	ra,12(sp)
    3740:	df000217 	ldw	fp,8(sp)
    3744:	dc400117 	ldw	r17,4(sp)
    3748:	dc000017 	ldw	r16,0(sp)
    374c:	dec00404 	addi	sp,sp,16
    3750:	f800283a 	ret

00003754 <GetMagnitudeFactor>:
/*
 * Compute the band-dependent magnitude factor for the given filter band (Eq. 3)
 * Used for internal computation only - not the be called directly
 */
double GetMagnitudeFactor(unsigned int filterBand)
{
    3754:	defff904 	addi	sp,sp,-28
    3758:	dfc00615 	stw	ra,24(sp)
    375c:	df000515 	stw	fp,20(sp)
    3760:	dc400415 	stw	r17,16(sp)
    3764:	dc000315 	stw	r16,12(sp)
    3768:	df000504 	addi	fp,sp,20
    376c:	e13ffb15 	stw	r4,-20(fp)
	double magnitudeFactor = 0.0f;
    3770:	e03ffc15 	stw	zero,-16(fp)
    3774:	e03ffd15 	stw	zero,-12(fp)

	if(filterBand >= 1 && filterBand <= 14)
    3778:	e0bffb17 	ldw	r2,-20(fp)
    377c:	10000926 	beq	r2,zero,37a4 <GetMagnitudeFactor+0x50>
    3780:	e0bffb17 	ldw	r2,-20(fp)
    3784:	108003e8 	cmpgeui	r2,r2,15
    3788:	1000061e 	bne	r2,zero,37a4 <GetMagnitudeFactor+0x50>
	{
		magnitudeFactor = 0.015;
    378c:	00b80034 	movhi	r2,57344
    3790:	e0bffc15 	stw	r2,-16(fp)
    3794:	008fe3f4 	movhi	r2,16271
    3798:	10ae1444 	addi	r2,r2,-18351
    379c:	e0bffd15 	stw	r2,-12(fp)
    37a0:	00002406 	br	3834 <GetMagnitudeFactor+0xe0>
	}
	else if(filterBand >= 15 && filterBand <= 48)
    37a4:	e0bffb17 	ldw	r2,-20(fp)
    37a8:	108003f0 	cmpltui	r2,r2,15
    37ac:	1000211e 	bne	r2,zero,3834 <GetMagnitudeFactor+0xe0>
    37b0:	e0bffb17 	ldw	r2,-20(fp)
    37b4:	10800c68 	cmpgeui	r2,r2,49
    37b8:	10001e1e 	bne	r2,zero,3834 <GetMagnitudeFactor+0xe0>
	{
		magnitudeFactor = 2.0f / (GetCenterFrequency(filterBand + 1) - GetCenterFrequency(filterBand -1));
    37bc:	e0bffb17 	ldw	r2,-20(fp)
    37c0:	10800044 	addi	r2,r2,1
    37c4:	1009883a 	mov	r4,r2
    37c8:	00038680 	call	3868 <GetCenterFrequency>
    37cc:	1021883a 	mov	r16,r2
    37d0:	1823883a 	mov	r17,r3
    37d4:	e0bffb17 	ldw	r2,-20(fp)
    37d8:	10bfffc4 	addi	r2,r2,-1
    37dc:	1009883a 	mov	r4,r2
    37e0:	00038680 	call	3868 <GetCenterFrequency>
    37e4:	1009883a 	mov	r4,r2
    37e8:	180b883a 	mov	r5,r3
    37ec:	200d883a 	mov	r6,r4
    37f0:	280f883a 	mov	r7,r5
    37f4:	8009883a 	mov	r4,r16
    37f8:	880b883a 	mov	r5,r17
    37fc:	000be6c0 	call	be6c <__subdf3>
    3800:	1009883a 	mov	r4,r2
    3804:	180b883a 	mov	r5,r3
    3808:	2005883a 	mov	r2,r4
    380c:	2807883a 	mov	r3,r5
    3810:	100d883a 	mov	r6,r2
    3814:	180f883a 	mov	r7,r3
    3818:	0009883a 	mov	r4,zero
    381c:	01500034 	movhi	r5,16384
    3820:	000ad580 	call	ad58 <__divdf3>
    3824:	1009883a 	mov	r4,r2
    3828:	180b883a 	mov	r5,r3
    382c:	e13ffc15 	stw	r4,-16(fp)
    3830:	e17ffd15 	stw	r5,-12(fp)
	}

	return magnitudeFactor;
    3834:	e0bffc17 	ldw	r2,-16(fp)
    3838:	e0fffd17 	ldw	r3,-12(fp)
    383c:	1009883a 	mov	r4,r2
    3840:	180b883a 	mov	r5,r3
}
    3844:	2005883a 	mov	r2,r4
    3848:	2807883a 	mov	r3,r5
    384c:	e6fffe04 	addi	sp,fp,-8
    3850:	dfc00317 	ldw	ra,12(sp)
    3854:	df000217 	ldw	fp,8(sp)
    3858:	dc400117 	ldw	r17,4(sp)
    385c:	dc000017 	ldw	r16,0(sp)
    3860:	dec00404 	addi	sp,sp,16
    3864:	f800283a 	ret

00003868 <GetCenterFrequency>:
 * This where the mel-frequency scaling occurs. Filters are specified so that their
 * center frequencies are equally spaced on the mel scale
 * Used for internal computation only - not the be called directly
 */
double GetCenterFrequency(unsigned int filterBand)
{
    3868:	defff904 	addi	sp,sp,-28
    386c:	dfc00615 	stw	ra,24(sp)
    3870:	df000515 	stw	fp,20(sp)
    3874:	df000504 	addi	fp,sp,20
    3878:	e13ffb15 	stw	r4,-20(fp)
	double centerFrequency = 0.0f;
    387c:	e03ffe15 	stw	zero,-8(fp)
    3880:	e03fff15 	stw	zero,-4(fp)
	double exponent;

	if(filterBand == 0)
    3884:	e0bffb17 	ldw	r2,-20(fp)
    3888:	1000031e 	bne	r2,zero,3898 <GetCenterFrequency+0x30>
	{
		centerFrequency = 0;
    388c:	e03ffe15 	stw	zero,-8(fp)
    3890:	e03fff15 	stw	zero,-4(fp)
    3894:	00003006 	br	3958 <GetCenterFrequency+0xf0>
	}
	else if(filterBand >= 1 && filterBand <= 14)
    3898:	e0bffb17 	ldw	r2,-20(fp)
    389c:	10001126 	beq	r2,zero,38e4 <GetCenterFrequency+0x7c>
    38a0:	e0bffb17 	ldw	r2,-20(fp)
    38a4:	108003e8 	cmpgeui	r2,r2,15
    38a8:	10000e1e 	bne	r2,zero,38e4 <GetCenterFrequency+0x7c>
	{
		centerFrequency = (200.0f * filterBand) / 3.0f;
    38ac:	e13ffb17 	ldw	r4,-20(fp)
    38b0:	000a36c0 	call	a36c <__floatunsisf>
    38b4:	1007883a 	mov	r3,r2
    38b8:	0090d234 	movhi	r2,17224
    38bc:	1887ff32 	custom	252,r3,r3,r2
    38c0:	00901034 	movhi	r2,16448
    38c4:	1885fff2 	custom	255,r2,r3,r2
    38c8:	1009883a 	mov	r4,r2
    38cc:	000c9940 	call	c994 <__extendsfdf2>
    38d0:	1009883a 	mov	r4,r2
    38d4:	180b883a 	mov	r5,r3
    38d8:	e13ffe15 	stw	r4,-8(fp)
    38dc:	e17fff15 	stw	r5,-4(fp)
    38e0:	00001d06 	br	3958 <GetCenterFrequency+0xf0>
	}
	else
	{
		exponent = filterBand - 14.0f;
    38e4:	e13ffb17 	ldw	r4,-20(fp)
    38e8:	000a36c0 	call	a36c <__floatunsisf>
    38ec:	1007883a 	mov	r3,r2
    38f0:	00905834 	movhi	r2,16736
    38f4:	1885ffb2 	custom	254,r2,r3,r2
    38f8:	1009883a 	mov	r4,r2
    38fc:	000c9940 	call	c994 <__extendsfdf2>
    3900:	1009883a 	mov	r4,r2
    3904:	180b883a 	mov	r5,r3
    3908:	e13ffc15 	stw	r4,-16(fp)
    390c:	e17ffd15 	stw	r5,-12(fp)
		centerFrequency = pow(1.0711703, exponent);
    3910:	e1bffc17 	ldw	r6,-16(fp)
    3914:	e1fffd17 	ldw	r7,-12(fp)
    3918:	01200034 	movhi	r4,32768
    391c:	014ffc74 	movhi	r5,16369
    3920:	2948e0c4 	addi	r5,r5,9091
    3924:	0003e3c0 	call	3e3c <pow>
    3928:	e0bffe15 	stw	r2,-8(fp)
    392c:	e0ffff15 	stw	r3,-4(fp)
		centerFrequency *= 1073.4;
    3930:	01a80034 	movhi	r6,40960
    3934:	01d02474 	movhi	r7,16529
    3938:	39f16644 	addi	r7,r7,-14951
    393c:	e13ffe17 	ldw	r4,-8(fp)
    3940:	e17fff17 	ldw	r5,-4(fp)
    3944:	000b7f80 	call	b7f8 <__muldf3>
    3948:	1009883a 	mov	r4,r2
    394c:	180b883a 	mov	r5,r3
    3950:	e13ffe15 	stw	r4,-8(fp)
    3954:	e17fff15 	stw	r5,-4(fp)
	}

	return centerFrequency;
    3958:	e0bffe17 	ldw	r2,-8(fp)
    395c:	e0ffff17 	ldw	r3,-4(fp)
    3960:	1009883a 	mov	r4,r2
    3964:	180b883a 	mov	r5,r3
}
    3968:	2005883a 	mov	r2,r4
    396c:	2807883a 	mov	r3,r5
    3970:	e037883a 	mov	sp,fp
    3974:	dfc00117 	ldw	ra,4(sp)
    3978:	df000017 	ldw	fp,0(sp)
    397c:	dec00204 	addi	sp,sp,8
    3980:	f800283a 	ret

00003984 <cos>:
    3984:	00a00034 	movhi	r2,32768
    3988:	10bfffc4 	addi	r2,r2,-1
    398c:	00cffa74 	movhi	r3,16361
    3990:	2884703a 	and	r2,r5,r2
    3994:	18c87ec4 	addi	r3,r3,8699
    3998:	18801a0e 	bge	r3,r2,3a04 <cos+0x80>
    399c:	defffa04 	addi	sp,sp,-24
    39a0:	dfc00515 	stw	ra,20(sp)
    39a4:	00dffc34 	movhi	r3,32752
    39a8:	10c00616 	blt	r2,r3,39c4 <cos+0x40>
    39ac:	280f883a 	mov	r7,r5
    39b0:	200d883a 	mov	r6,r4
    39b4:	000be6c0 	call	be6c <__subdf3>
    39b8:	dfc00517 	ldw	ra,20(sp)
    39bc:	dec00604 	addi	sp,sp,24
    39c0:	f800283a 	ret
    39c4:	d9800104 	addi	r6,sp,4
    39c8:	00059380 	call	5938 <__ieee754_rem_pio2>
    39cc:	108000cc 	andi	r2,r2,3
    39d0:	10c00060 	cmpeqi	r3,r2,1
    39d4:	d9800317 	ldw	r6,12(sp)
    39d8:	d9c00417 	ldw	r7,16(sp)
    39dc:	d9000117 	ldw	r4,4(sp)
    39e0:	d9400217 	ldw	r5,8(sp)
    39e4:	18000a1e 	bne	r3,zero,3a10 <cos+0x8c>
    39e8:	10c000a0 	cmpeqi	r3,r2,2
    39ec:	18000e1e 	bne	r3,zero,3a28 <cos+0xa4>
    39f0:	10000b26 	beq	r2,zero,3a20 <cos+0x9c>
    39f4:	00800044 	movi	r2,1
    39f8:	d8800015 	stw	r2,0(sp)
    39fc:	00079a40 	call	79a4 <__kernel_sin>
    3a00:	003fed06 	br	39b8 <cos+0x34>
    3a04:	000d883a 	mov	r6,zero
    3a08:	000f883a 	mov	r7,zero
    3a0c:	00067ec1 	jmpi	67ec <__kernel_cos>
    3a10:	d8800015 	stw	r2,0(sp)
    3a14:	00079a40 	call	79a4 <__kernel_sin>
    3a18:	18e0003c 	xorhi	r3,r3,32768
    3a1c:	003fe606 	br	39b8 <cos+0x34>
    3a20:	00067ec0 	call	67ec <__kernel_cos>
    3a24:	003fe406 	br	39b8 <cos+0x34>
    3a28:	00067ec0 	call	67ec <__kernel_cos>
    3a2c:	18e0003c 	xorhi	r3,r3,32768
    3a30:	003fe106 	br	39b8 <cos+0x34>

00003a34 <floor>:
    3a34:	280fd53a 	srai	r7,r5,20
    3a38:	defffb04 	addi	sp,sp,-20
    3a3c:	dc800215 	stw	r18,8(sp)
    3a40:	39c1ffcc 	andi	r7,r7,2047
    3a44:	3cbf0044 	addi	r18,r7,-1023
    3a48:	dc400115 	stw	r17,4(sp)
    3a4c:	dc000015 	stw	r16,0(sp)
    3a50:	dfc00415 	stw	ra,16(sp)
    3a54:	dcc00315 	stw	r19,12(sp)
    3a58:	90800508 	cmpgei	r2,r18,20
    3a5c:	2821883a 	mov	r16,r5
    3a60:	200d883a 	mov	r6,r4
    3a64:	2023883a 	mov	r17,r4
    3a68:	10002b1e 	bne	r2,zero,3b18 <floor+0xe4>
    3a6c:	90001b16 	blt	r18,zero,3adc <floor+0xa8>
    3a70:	00800434 	movhi	r2,16
    3a74:	10bfffc4 	addi	r2,r2,-1
    3a78:	14a7d83a 	sra	r19,r2,r18
    3a7c:	2cc4703a 	and	r2,r5,r19
    3a80:	1104b03a 	or	r2,r2,r4
    3a84:	10002826 	beq	r2,zero,3b28 <floor+0xf4>
    3a88:	01a20034 	movhi	r6,34816
    3a8c:	01df8e34 	movhi	r7,32312
    3a90:	319d6704 	addi	r6,r6,30108
    3a94:	39f90f04 	addi	r7,r7,-7108
    3a98:	000a4680 	call	a468 <__adddf3>
    3a9c:	000d883a 	mov	r6,zero
    3aa0:	000f883a 	mov	r7,zero
    3aa4:	1009883a 	mov	r4,r2
    3aa8:	180b883a 	mov	r5,r3
    3aac:	000b6280 	call	b628 <__gedf2>
    3ab0:	0080070e 	bge	zero,r2,3ad0 <floor+0x9c>
    3ab4:	8000030e 	bge	r16,zero,3ac4 <floor+0x90>
    3ab8:	00800434 	movhi	r2,16
    3abc:	14a5d83a 	sra	r18,r2,r18
    3ac0:	9421883a 	add	r16,r18,r16
    3ac4:	04c4303a 	nor	r2,zero,r19
    3ac8:	80a0703a 	and	r16,r16,r2
    3acc:	0023883a 	mov	r17,zero
    3ad0:	8805883a 	mov	r2,r17
    3ad4:	8007883a 	mov	r3,r16
    3ad8:	00001506 	br	3b30 <floor+0xfc>
    3adc:	01a20034 	movhi	r6,34816
    3ae0:	01df8e34 	movhi	r7,32312
    3ae4:	319d6704 	addi	r6,r6,30108
    3ae8:	39f90f04 	addi	r7,r7,-7108
    3aec:	000a4680 	call	a468 <__adddf3>
    3af0:	000d883a 	mov	r6,zero
    3af4:	000f883a 	mov	r7,zero
    3af8:	1009883a 	mov	r4,r2
    3afc:	180b883a 	mov	r5,r3
    3b00:	000b6280 	call	b628 <__gedf2>
    3b04:	00bff20e 	bge	zero,r2,3ad0 <floor+0x9c>
    3b08:	80002a16 	blt	r16,zero,3bb4 <floor+0x180>
    3b0c:	0023883a 	mov	r17,zero
    3b10:	0021883a 	mov	r16,zero
    3b14:	003fee06 	br	3ad0 <floor+0x9c>
    3b18:	90800d10 	cmplti	r2,r18,52
    3b1c:	10000b1e 	bne	r2,zero,3b4c <floor+0x118>
    3b20:	94810018 	cmpnei	r18,r18,1024
    3b24:	90001d26 	beq	r18,zero,3b9c <floor+0x168>
    3b28:	3005883a 	mov	r2,r6
    3b2c:	8007883a 	mov	r3,r16
    3b30:	dfc00417 	ldw	ra,16(sp)
    3b34:	dcc00317 	ldw	r19,12(sp)
    3b38:	dc800217 	ldw	r18,8(sp)
    3b3c:	dc400117 	ldw	r17,4(sp)
    3b40:	dc000017 	ldw	r16,0(sp)
    3b44:	dec00504 	addi	sp,sp,20
    3b48:	f800283a 	ret
    3b4c:	39fefb44 	addi	r7,r7,-1043
    3b50:	04ffffc4 	movi	r19,-1
    3b54:	99e6d83a 	srl	r19,r19,r7
    3b58:	9904703a 	and	r2,r19,r4
    3b5c:	10001226 	beq	r2,zero,3ba8 <floor+0x174>
    3b60:	01a20034 	movhi	r6,34816
    3b64:	01df8e34 	movhi	r7,32312
    3b68:	319d6704 	addi	r6,r6,30108
    3b6c:	39f90f04 	addi	r7,r7,-7108
    3b70:	000a4680 	call	a468 <__adddf3>
    3b74:	000d883a 	mov	r6,zero
    3b78:	000f883a 	mov	r7,zero
    3b7c:	1009883a 	mov	r4,r2
    3b80:	180b883a 	mov	r5,r3
    3b84:	000b6280 	call	b628 <__gedf2>
    3b88:	00bfd10e 	bge	zero,r2,3ad0 <floor+0x9c>
    3b8c:	80001116 	blt	r16,zero,3bd4 <floor+0x1a0>
    3b90:	04ce303a 	nor	r7,zero,r19
    3b94:	89e2703a 	and	r17,r17,r7
    3b98:	003fcd06 	br	3ad0 <floor+0x9c>
    3b9c:	280f883a 	mov	r7,r5
    3ba0:	000a4680 	call	a468 <__adddf3>
    3ba4:	003fe206 	br	3b30 <floor+0xfc>
    3ba8:	2807883a 	mov	r3,r5
    3bac:	2005883a 	mov	r2,r4
    3bb0:	003fdf06 	br	3b30 <floor+0xfc>
    3bb4:	00a00034 	movhi	r2,32768
    3bb8:	10bfffc4 	addi	r2,r2,-1
    3bbc:	8084703a 	and	r2,r16,r2
    3bc0:	1462b03a 	or	r17,r2,r17
    3bc4:	88000e26 	beq	r17,zero,3c00 <floor+0x1cc>
    3bc8:	0023883a 	mov	r17,zero
    3bcc:	042ffc34 	movhi	r16,49136
    3bd0:	003fbf06 	br	3ad0 <floor+0x9c>
    3bd4:	90800518 	cmpnei	r2,r18,20
    3bd8:	10000b26 	beq	r2,zero,3c08 <floor+0x1d4>
    3bdc:	00800d04 	movi	r2,52
    3be0:	14a5c83a 	sub	r18,r2,r18
    3be4:	00800044 	movi	r2,1
    3be8:	1484983a 	sll	r2,r2,r18
    3bec:	1445883a 	add	r2,r2,r17
    3bf0:	1440072e 	bgeu	r2,r17,3c10 <floor+0x1dc>
    3bf4:	84000044 	addi	r16,r16,1
    3bf8:	1023883a 	mov	r17,r2
    3bfc:	003fe406 	br	3b90 <floor+0x15c>
    3c00:	0023883a 	mov	r17,zero
    3c04:	003fb206 	br	3ad0 <floor+0x9c>
    3c08:	84000044 	addi	r16,r16,1
    3c0c:	003fe006 	br	3b90 <floor+0x15c>
    3c10:	1023883a 	mov	r17,r2
    3c14:	003fde06 	br	3b90 <floor+0x15c>

00003c18 <sin>:
    3c18:	00a00034 	movhi	r2,32768
    3c1c:	defffa04 	addi	sp,sp,-24
    3c20:	10bfffc4 	addi	r2,r2,-1
    3c24:	00cffa74 	movhi	r3,16361
    3c28:	dfc00515 	stw	ra,20(sp)
    3c2c:	2884703a 	and	r2,r5,r2
    3c30:	18c87ec4 	addi	r3,r3,8699
    3c34:	1880170e 	bge	r3,r2,3c94 <sin+0x7c>
    3c38:	00dffc34 	movhi	r3,32752
    3c3c:	10c00616 	blt	r2,r3,3c58 <sin+0x40>
    3c40:	280f883a 	mov	r7,r5
    3c44:	200d883a 	mov	r6,r4
    3c48:	000be6c0 	call	be6c <__subdf3>
    3c4c:	dfc00517 	ldw	ra,20(sp)
    3c50:	dec00604 	addi	sp,sp,24
    3c54:	f800283a 	ret
    3c58:	d9800104 	addi	r6,sp,4
    3c5c:	00059380 	call	5938 <__ieee754_rem_pio2>
    3c60:	108000cc 	andi	r2,r2,3
    3c64:	10c00060 	cmpeqi	r3,r2,1
    3c68:	d9800317 	ldw	r6,12(sp)
    3c6c:	d9c00417 	ldw	r7,16(sp)
    3c70:	d9000117 	ldw	r4,4(sp)
    3c74:	d9400217 	ldw	r5,8(sp)
    3c78:	18000d1e 	bne	r3,zero,3cb0 <sin+0x98>
    3c7c:	10c000a0 	cmpeqi	r3,r2,2
    3c80:	1800111e 	bne	r3,zero,3cc8 <sin+0xb0>
    3c84:	10000c26 	beq	r2,zero,3cb8 <sin+0xa0>
    3c88:	00067ec0 	call	67ec <__kernel_cos>
    3c8c:	18e0003c 	xorhi	r3,r3,32768
    3c90:	003fee06 	br	3c4c <sin+0x34>
    3c94:	d8000015 	stw	zero,0(sp)
    3c98:	000d883a 	mov	r6,zero
    3c9c:	000f883a 	mov	r7,zero
    3ca0:	00079a40 	call	79a4 <__kernel_sin>
    3ca4:	dfc00517 	ldw	ra,20(sp)
    3ca8:	dec00604 	addi	sp,sp,24
    3cac:	f800283a 	ret
    3cb0:	00067ec0 	call	67ec <__kernel_cos>
    3cb4:	003fe506 	br	3c4c <sin+0x34>
    3cb8:	00800044 	movi	r2,1
    3cbc:	d8800015 	stw	r2,0(sp)
    3cc0:	00079a40 	call	79a4 <__kernel_sin>
    3cc4:	003fe106 	br	3c4c <sin+0x34>
    3cc8:	00800044 	movi	r2,1
    3ccc:	d8800015 	stw	r2,0(sp)
    3cd0:	00079a40 	call	79a4 <__kernel_sin>
    3cd4:	18e0003c 	xorhi	r3,r3,32768
    3cd8:	003fdc06 	br	3c4c <sin+0x34>

00003cdc <cosf>:
    3cdc:	00a00034 	movhi	r2,32768
    3ce0:	10bfffc4 	addi	r2,r2,-1
    3ce4:	00cfd274 	movhi	r3,16201
    3ce8:	1104703a 	and	r2,r2,r4
    3cec:	18c3f604 	addi	r3,r3,4056
    3cf0:	1880160e 	bge	r3,r2,3d4c <cosf+0x70>
    3cf4:	defffd04 	addi	sp,sp,-12
    3cf8:	dfc00215 	stw	ra,8(sp)
    3cfc:	00dfe034 	movhi	r3,32640
    3d00:	10c00516 	blt	r2,r3,3d18 <cosf+0x3c>
    3d04:	200b883a 	mov	r5,r4
    3d08:	0009d440 	call	9d44 <__subsf3>
    3d0c:	dfc00217 	ldw	ra,8(sp)
    3d10:	dec00304 	addi	sp,sp,12
    3d14:	f800283a 	ret
    3d18:	d80b883a 	mov	r5,sp
    3d1c:	00062f00 	call	62f0 <__ieee754_rem_pio2f>
    3d20:	108000cc 	andi	r2,r2,3
    3d24:	10c00060 	cmpeqi	r3,r2,1
    3d28:	d9400117 	ldw	r5,4(sp)
    3d2c:	d9000017 	ldw	r4,0(sp)
    3d30:	1800081e 	bne	r3,zero,3d54 <cosf+0x78>
    3d34:	10c000a0 	cmpeqi	r3,r2,2
    3d38:	18000c1e 	bne	r3,zero,3d6c <cosf+0x90>
    3d3c:	10000926 	beq	r2,zero,3d64 <cosf+0x88>
    3d40:	01800044 	movi	r6,1
    3d44:	00089f40 	call	89f4 <__kernel_sinf>
    3d48:	003ff006 	br	3d0c <cosf+0x30>
    3d4c:	000b883a 	mov	r5,zero
    3d50:	0007c6c1 	jmpi	7c6c <__kernel_cosf>
    3d54:	01800044 	movi	r6,1
    3d58:	00089f40 	call	89f4 <__kernel_sinf>
    3d5c:	10a0003c 	xorhi	r2,r2,32768
    3d60:	003fea06 	br	3d0c <cosf+0x30>
    3d64:	0007c6c0 	call	7c6c <__kernel_cosf>
    3d68:	003fe806 	br	3d0c <cosf+0x30>
    3d6c:	0007c6c0 	call	7c6c <__kernel_cosf>
    3d70:	10a0003c 	xorhi	r2,r2,32768
    3d74:	003fe506 	br	3d0c <cosf+0x30>

00003d78 <log>:
    3d78:	defffb04 	addi	sp,sp,-20
    3d7c:	dcc00315 	stw	r19,12(sp)
    3d80:	dc800215 	stw	r18,8(sp)
    3d84:	dc400115 	stw	r17,4(sp)
    3d88:	dc000015 	stw	r16,0(sp)
    3d8c:	2023883a 	mov	r17,r4
    3d90:	2821883a 	mov	r16,r5
    3d94:	dfc00415 	stw	ra,16(sp)
    3d98:	00041a40 	call	41a4 <__ieee754_log>
    3d9c:	880d883a 	mov	r6,r17
    3da0:	800f883a 	mov	r7,r16
    3da4:	8809883a 	mov	r4,r17
    3da8:	800b883a 	mov	r5,r16
    3dac:	1027883a 	mov	r19,r2
    3db0:	1825883a 	mov	r18,r3
    3db4:	000c7780 	call	c778 <__unorddf2>
    3db8:	1000111e 	bne	r2,zero,3e00 <log+0x88>
    3dbc:	000d883a 	mov	r6,zero
    3dc0:	000f883a 	mov	r7,zero
    3dc4:	8809883a 	mov	r4,r17
    3dc8:	800b883a 	mov	r5,r16
    3dcc:	000b6280 	call	b628 <__gedf2>
    3dd0:	00800b16 	blt	zero,r2,3e00 <log+0x88>
    3dd4:	000d883a 	mov	r6,zero
    3dd8:	000f883a 	mov	r7,zero
    3ddc:	8809883a 	mov	r4,r17
    3de0:	800b883a 	mov	r5,r16
    3de4:	000b5a80 	call	b5a8 <__eqdf2>
    3de8:	10000e1e 	bne	r2,zero,3e24 <log+0xac>
    3dec:	000cc540 	call	cc54 <__errno>
    3df0:	00c00884 	movi	r3,34
    3df4:	10c00015 	stw	r3,0(r2)
    3df8:	0027883a 	mov	r19,zero
    3dfc:	04bffc34 	movhi	r18,65520
    3e00:	9805883a 	mov	r2,r19
    3e04:	9007883a 	mov	r3,r18
    3e08:	dfc00417 	ldw	ra,16(sp)
    3e0c:	dcc00317 	ldw	r19,12(sp)
    3e10:	dc800217 	ldw	r18,8(sp)
    3e14:	dc400117 	ldw	r17,4(sp)
    3e18:	dc000017 	ldw	r16,0(sp)
    3e1c:	dec00504 	addi	sp,sp,20
    3e20:	f800283a 	ret
    3e24:	000cc540 	call	cc54 <__errno>
    3e28:	00c00844 	movi	r3,33
    3e2c:	10c00015 	stw	r3,0(r2)
    3e30:	0027883a 	mov	r19,zero
    3e34:	049ffe34 	movhi	r18,32760
    3e38:	003ff106 	br	3e00 <log+0x88>

00003e3c <pow>:
    3e3c:	defff704 	addi	sp,sp,-36
    3e40:	dd800615 	stw	r22,24(sp)
    3e44:	dd000415 	stw	r20,16(sp)
    3e48:	dcc00315 	stw	r19,12(sp)
    3e4c:	dc800215 	stw	r18,8(sp)
    3e50:	dc400115 	stw	r17,4(sp)
    3e54:	dc000015 	stw	r16,0(sp)
    3e58:	3823883a 	mov	r17,r7
    3e5c:	3021883a 	mov	r16,r6
    3e60:	dfc00815 	stw	ra,32(sp)
    3e64:	ddc00715 	stw	r23,28(sp)
    3e68:	dd400515 	stw	r21,20(sp)
    3e6c:	202d883a 	mov	r22,r4
    3e70:	2825883a 	mov	r18,r5
    3e74:	00048300 	call	4830 <__ieee754_pow>
    3e78:	800d883a 	mov	r6,r16
    3e7c:	880f883a 	mov	r7,r17
    3e80:	8009883a 	mov	r4,r16
    3e84:	880b883a 	mov	r5,r17
    3e88:	1027883a 	mov	r19,r2
    3e8c:	1829883a 	mov	r20,r3
    3e90:	000c7780 	call	c778 <__unorddf2>
    3e94:	10005d1e 	bne	r2,zero,400c <pow+0x1d0>
    3e98:	000d883a 	mov	r6,zero
    3e9c:	000f883a 	mov	r7,zero
    3ea0:	b009883a 	mov	r4,r22
    3ea4:	900b883a 	mov	r5,r18
    3ea8:	000b5a80 	call	b5a8 <__eqdf2>
    3eac:	10006426 	beq	r2,zero,4040 <pow+0x204>
    3eb0:	01600034 	movhi	r5,32768
    3eb4:	297fffc4 	addi	r5,r5,-1
    3eb8:	a16a703a 	and	r21,r20,r5
    3ebc:	01dffc34 	movhi	r7,32752
    3ec0:	01bfffc4 	movi	r6,-1
    3ec4:	39ffffc4 	addi	r7,r7,-1
    3ec8:	9809883a 	mov	r4,r19
    3ecc:	a80b883a 	mov	r5,r21
    3ed0:	000c7780 	call	c778 <__unorddf2>
    3ed4:	1000071e 	bne	r2,zero,3ef4 <pow+0xb8>
    3ed8:	01dffc34 	movhi	r7,32752
    3edc:	01bfffc4 	movi	r6,-1
    3ee0:	39ffffc4 	addi	r7,r7,-1
    3ee4:	9809883a 	mov	r4,r19
    3ee8:	a80b883a 	mov	r5,r21
    3eec:	000b6280 	call	b628 <__gedf2>
    3ef0:	0080200e 	bge	zero,r2,3f74 <pow+0x138>
    3ef4:	05600034 	movhi	r21,32768
    3ef8:	ad7fffc4 	addi	r21,r21,-1
    3efc:	956e703a 	and	r23,r18,r21
    3f00:	01dffc34 	movhi	r7,32752
    3f04:	01bfffc4 	movi	r6,-1
    3f08:	39ffffc4 	addi	r7,r7,-1
    3f0c:	b009883a 	mov	r4,r22
    3f10:	b80b883a 	mov	r5,r23
    3f14:	000c7780 	call	c778 <__unorddf2>
    3f18:	10003c1e 	bne	r2,zero,400c <pow+0x1d0>
    3f1c:	01dffc34 	movhi	r7,32752
    3f20:	01bfffc4 	movi	r6,-1
    3f24:	39ffffc4 	addi	r7,r7,-1
    3f28:	b009883a 	mov	r4,r22
    3f2c:	b80b883a 	mov	r5,r23
    3f30:	000b6280 	call	b628 <__gedf2>
    3f34:	00803516 	blt	zero,r2,400c <pow+0x1d0>
    3f38:	8d6a703a 	and	r21,r17,r21
    3f3c:	01dffc34 	movhi	r7,32752
    3f40:	01bfffc4 	movi	r6,-1
    3f44:	39ffffc4 	addi	r7,r7,-1
    3f48:	8009883a 	mov	r4,r16
    3f4c:	a80b883a 	mov	r5,r21
    3f50:	000c7780 	call	c778 <__unorddf2>
    3f54:	1000071e 	bne	r2,zero,3f74 <pow+0x138>
    3f58:	01dffc34 	movhi	r7,32752
    3f5c:	01bfffc4 	movi	r6,-1
    3f60:	39ffffc4 	addi	r7,r7,-1
    3f64:	8009883a 	mov	r4,r16
    3f68:	a80b883a 	mov	r5,r21
    3f6c:	000b6280 	call	b628 <__gedf2>
    3f70:	0080570e 	bge	zero,r2,40d0 <pow+0x294>
    3f74:	000d883a 	mov	r6,zero
    3f78:	000f883a 	mov	r7,zero
    3f7c:	9809883a 	mov	r4,r19
    3f80:	a00b883a 	mov	r5,r20
    3f84:	000b5a80 	call	b5a8 <__eqdf2>
    3f88:	1000201e 	bne	r2,zero,400c <pow+0x1d0>
    3f8c:	05600034 	movhi	r21,32768
    3f90:	ad7fffc4 	addi	r21,r21,-1
    3f94:	9564703a 	and	r18,r18,r21
    3f98:	01dffc34 	movhi	r7,32752
    3f9c:	01bfffc4 	movi	r6,-1
    3fa0:	39ffffc4 	addi	r7,r7,-1
    3fa4:	b009883a 	mov	r4,r22
    3fa8:	900b883a 	mov	r5,r18
    3fac:	000c7780 	call	c778 <__unorddf2>
    3fb0:	1000161e 	bne	r2,zero,400c <pow+0x1d0>
    3fb4:	01dffc34 	movhi	r7,32752
    3fb8:	01bfffc4 	movi	r6,-1
    3fbc:	39ffffc4 	addi	r7,r7,-1
    3fc0:	b009883a 	mov	r4,r22
    3fc4:	900b883a 	mov	r5,r18
    3fc8:	000b6280 	call	b628 <__gedf2>
    3fcc:	00800f16 	blt	zero,r2,400c <pow+0x1d0>
    3fd0:	8d62703a 	and	r17,r17,r21
    3fd4:	01dffc34 	movhi	r7,32752
    3fd8:	01bfffc4 	movi	r6,-1
    3fdc:	39ffffc4 	addi	r7,r7,-1
    3fe0:	8009883a 	mov	r4,r16
    3fe4:	880b883a 	mov	r5,r17
    3fe8:	000c7780 	call	c778 <__unorddf2>
    3fec:	1000071e 	bne	r2,zero,400c <pow+0x1d0>
    3ff0:	01dffc34 	movhi	r7,32752
    3ff4:	01bfffc4 	movi	r6,-1
    3ff8:	39ffffc4 	addi	r7,r7,-1
    3ffc:	8009883a 	mov	r4,r16
    4000:	880b883a 	mov	r5,r17
    4004:	000b6280 	call	b628 <__gedf2>
    4008:	00802a0e 	bge	zero,r2,40b4 <pow+0x278>
    400c:	9805883a 	mov	r2,r19
    4010:	a007883a 	mov	r3,r20
    4014:	dfc00817 	ldw	ra,32(sp)
    4018:	ddc00717 	ldw	r23,28(sp)
    401c:	dd800617 	ldw	r22,24(sp)
    4020:	dd400517 	ldw	r21,20(sp)
    4024:	dd000417 	ldw	r20,16(sp)
    4028:	dcc00317 	ldw	r19,12(sp)
    402c:	dc800217 	ldw	r18,8(sp)
    4030:	dc400117 	ldw	r17,4(sp)
    4034:	dc000017 	ldw	r16,0(sp)
    4038:	dec00904 	addi	sp,sp,36
    403c:	f800283a 	ret
    4040:	000d883a 	mov	r6,zero
    4044:	000f883a 	mov	r7,zero
    4048:	8009883a 	mov	r4,r16
    404c:	880b883a 	mov	r5,r17
    4050:	000b5a80 	call	b5a8 <__eqdf2>
    4054:	10001b26 	beq	r2,zero,40c4 <pow+0x288>
    4058:	01600034 	movhi	r5,32768
    405c:	297fffc4 	addi	r5,r5,-1
    4060:	8964703a 	and	r18,r17,r5
    4064:	01dffc34 	movhi	r7,32752
    4068:	01bfffc4 	movi	r6,-1
    406c:	39ffffc4 	addi	r7,r7,-1
    4070:	8009883a 	mov	r4,r16
    4074:	900b883a 	mov	r5,r18
    4078:	000c7780 	call	c778 <__unorddf2>
    407c:	103fe31e 	bne	r2,zero,400c <pow+0x1d0>
    4080:	01dffc34 	movhi	r7,32752
    4084:	01bfffc4 	movi	r6,-1
    4088:	39ffffc4 	addi	r7,r7,-1
    408c:	8009883a 	mov	r4,r16
    4090:	900b883a 	mov	r5,r18
    4094:	000b6280 	call	b628 <__gedf2>
    4098:	00bfdc16 	blt	zero,r2,400c <pow+0x1d0>
    409c:	000d883a 	mov	r6,zero
    40a0:	000f883a 	mov	r7,zero
    40a4:	8009883a 	mov	r4,r16
    40a8:	880b883a 	mov	r5,r17
    40ac:	000b7100 	call	b710 <__ledf2>
    40b0:	103fd60e 	bge	r2,zero,400c <pow+0x1d0>
    40b4:	000cc540 	call	cc54 <__errno>
    40b8:	00c00884 	movi	r3,34
    40bc:	10c00015 	stw	r3,0(r2)
    40c0:	003fd206 	br	400c <pow+0x1d0>
    40c4:	0027883a 	mov	r19,zero
    40c8:	050ffc34 	movhi	r20,16368
    40cc:	003fcf06 	br	400c <pow+0x1d0>
    40d0:	980d883a 	mov	r6,r19
    40d4:	a00f883a 	mov	r7,r20
    40d8:	9809883a 	mov	r4,r19
    40dc:	a00b883a 	mov	r5,r20
    40e0:	000c7780 	call	c778 <__unorddf2>
    40e4:	103ff326 	beq	r2,zero,40b4 <pow+0x278>
    40e8:	000cc540 	call	cc54 <__errno>
    40ec:	00c00844 	movi	r3,33
    40f0:	10c00015 	stw	r3,0(r2)
    40f4:	003fc506 	br	400c <pow+0x1d0>

000040f8 <sqrt>:
    40f8:	defffb04 	addi	sp,sp,-20
    40fc:	dcc00315 	stw	r19,12(sp)
    4100:	dc800215 	stw	r18,8(sp)
    4104:	dc400115 	stw	r17,4(sp)
    4108:	dc000015 	stw	r16,0(sp)
    410c:	2023883a 	mov	r17,r4
    4110:	2821883a 	mov	r16,r5
    4114:	dfc00415 	stw	ra,16(sp)
    4118:	00060840 	call	6084 <__ieee754_sqrt>
    411c:	880d883a 	mov	r6,r17
    4120:	800f883a 	mov	r7,r16
    4124:	8809883a 	mov	r4,r17
    4128:	800b883a 	mov	r5,r16
    412c:	1027883a 	mov	r19,r2
    4130:	1825883a 	mov	r18,r3
    4134:	000c7780 	call	c778 <__unorddf2>
    4138:	1000061e 	bne	r2,zero,4154 <sqrt+0x5c>
    413c:	000d883a 	mov	r6,zero
    4140:	000f883a 	mov	r7,zero
    4144:	8809883a 	mov	r4,r17
    4148:	800b883a 	mov	r5,r16
    414c:	000b7100 	call	b710 <__ledf2>
    4150:	10000916 	blt	r2,zero,4178 <sqrt+0x80>
    4154:	9805883a 	mov	r2,r19
    4158:	9007883a 	mov	r3,r18
    415c:	dfc00417 	ldw	ra,16(sp)
    4160:	dcc00317 	ldw	r19,12(sp)
    4164:	dc800217 	ldw	r18,8(sp)
    4168:	dc400117 	ldw	r17,4(sp)
    416c:	dc000017 	ldw	r16,0(sp)
    4170:	dec00504 	addi	sp,sp,20
    4174:	f800283a 	ret
    4178:	000cc540 	call	cc54 <__errno>
    417c:	00c00844 	movi	r3,33
    4180:	10c00015 	stw	r3,0(r2)
    4184:	000d883a 	mov	r6,zero
    4188:	000f883a 	mov	r7,zero
    418c:	0009883a 	mov	r4,zero
    4190:	000b883a 	mov	r5,zero
    4194:	000ad580 	call	ad58 <__divdf3>
    4198:	1027883a 	mov	r19,r2
    419c:	1825883a 	mov	r18,r3
    41a0:	003fec06 	br	4154 <sqrt+0x5c>

000041a4 <__ieee754_log>:
    41a4:	defff204 	addi	sp,sp,-56
    41a8:	dfc00d15 	stw	ra,52(sp)
    41ac:	df000c15 	stw	fp,48(sp)
    41b0:	ddc00b15 	stw	r23,44(sp)
    41b4:	dd800a15 	stw	r22,40(sp)
    41b8:	dd400915 	stw	r21,36(sp)
    41bc:	dd000815 	stw	r20,32(sp)
    41c0:	dcc00715 	stw	r19,28(sp)
    41c4:	dc800615 	stw	r18,24(sp)
    41c8:	dc400515 	stw	r17,20(sp)
    41cc:	dc000415 	stw	r16,16(sp)
    41d0:	01800434 	movhi	r6,16
    41d4:	2005883a 	mov	r2,r4
    41d8:	280f883a 	mov	r7,r5
    41dc:	2980690e 	bge	r5,r6,4384 <__ieee754_log+0x1e0>
    41e0:	00e00034 	movhi	r3,32768
    41e4:	18ffffc4 	addi	r3,r3,-1
    41e8:	28c6703a 	and	r3,r5,r3
    41ec:	1906b03a 	or	r3,r3,r4
    41f0:	18011d26 	beq	r3,zero,4668 <__ieee754_log+0x4c4>
    41f4:	28015c16 	blt	r5,zero,4768 <__ieee754_log+0x5c4>
    41f8:	000d883a 	mov	r6,zero
    41fc:	01d0d434 	movhi	r7,17232
    4200:	000b7f80 	call	b7f8 <__muldf3>
    4204:	011ffc34 	movhi	r4,32752
    4208:	180f883a 	mov	r7,r3
    420c:	01bff284 	movi	r6,-54
    4210:	1900600e 	bge	r3,r4,4394 <__ieee754_log+0x1f0>
    4214:	04000434 	movhi	r16,16
    4218:	843fffc4 	addi	r16,r16,-1
    421c:	01400274 	movhi	r5,9
    4220:	1c24703a 	and	r18,r3,r16
    4224:	2957d904 	addi	r5,r5,24420
    4228:	1807d53a 	srai	r3,r3,20
    422c:	914b883a 	add	r5,r18,r5
    4230:	2940042c 	andhi	r5,r5,16
    4234:	2827d53a 	srai	r19,r5,20
    4238:	18ff0044 	addi	r3,r3,-1023
    423c:	294ffc3c 	xorhi	r5,r5,16368
    4240:	1987883a 	add	r3,r3,r6
    4244:	2c8ab03a 	or	r5,r5,r18
    4248:	000d883a 	mov	r6,zero
    424c:	01cffc34 	movhi	r7,16368
    4250:	1009883a 	mov	r4,r2
    4254:	98e7883a 	add	r19,r19,r3
    4258:	000be6c0 	call	be6c <__subdf3>
    425c:	91400084 	addi	r5,r18,2
    4260:	2c0a703a 	and	r5,r5,r16
    4264:	294000c8 	cmpgei	r5,r5,3
    4268:	000d883a 	mov	r6,zero
    426c:	1023883a 	mov	r17,r2
    4270:	1821883a 	mov	r16,r3
    4274:	2800571e 	bne	r5,zero,43d4 <__ieee754_log+0x230>
    4278:	000f883a 	mov	r7,zero
    427c:	1009883a 	mov	r4,r2
    4280:	180b883a 	mov	r5,r3
    4284:	000b5a80 	call	b5a8 <__eqdf2>
    4288:	1000fd26 	beq	r2,zero,4680 <__ieee754_log+0x4dc>
    428c:	01955574 	movhi	r6,21845
    4290:	01cff574 	movhi	r7,16341
    4294:	8809883a 	mov	r4,r17
    4298:	800b883a 	mov	r5,r16
    429c:	31955544 	addi	r6,r6,21845
    42a0:	39d55544 	addi	r7,r7,21845
    42a4:	000b7f80 	call	b7f8 <__muldf3>
    42a8:	100d883a 	mov	r6,r2
    42ac:	180f883a 	mov	r7,r3
    42b0:	0009883a 	mov	r4,zero
    42b4:	014ff834 	movhi	r5,16352
    42b8:	000be6c0 	call	be6c <__subdf3>
    42bc:	880d883a 	mov	r6,r17
    42c0:	800f883a 	mov	r7,r16
    42c4:	8809883a 	mov	r4,r17
    42c8:	800b883a 	mov	r5,r16
    42cc:	1029883a 	mov	r20,r2
    42d0:	1825883a 	mov	r18,r3
    42d4:	000b7f80 	call	b7f8 <__muldf3>
    42d8:	a009883a 	mov	r4,r20
    42dc:	900b883a 	mov	r5,r18
    42e0:	100d883a 	mov	r6,r2
    42e4:	180f883a 	mov	r7,r3
    42e8:	000b7f80 	call	b7f8 <__muldf3>
    42ec:	1029883a 	mov	r20,r2
    42f0:	1825883a 	mov	r18,r3
    42f4:	98011626 	beq	r19,zero,4750 <__ieee754_log+0x5ac>
    42f8:	9809883a 	mov	r4,r19
    42fc:	000c84c0 	call	c84c <__floatsidf>
    4300:	01cff9b4 	movhi	r7,16358
    4304:	01bfb834 	movhi	r6,65248
    4308:	39cb9084 	addi	r7,r7,11842
    430c:	1009883a 	mov	r4,r2
    4310:	180b883a 	mov	r5,r3
    4314:	102b883a 	mov	r21,r2
    4318:	1827883a 	mov	r19,r3
    431c:	000b7f80 	call	b7f8 <__muldf3>
    4320:	018d5e74 	movhi	r6,13689
    4324:	01cf7ab4 	movhi	r7,15850
    4328:	318f1d84 	addi	r6,r6,15478
    432c:	39ce7bc4 	addi	r7,r7,14831
    4330:	a809883a 	mov	r4,r21
    4334:	980b883a 	mov	r5,r19
    4338:	102b883a 	mov	r21,r2
    433c:	1827883a 	mov	r19,r3
    4340:	000b7f80 	call	b7f8 <__muldf3>
    4344:	a009883a 	mov	r4,r20
    4348:	900b883a 	mov	r5,r18
    434c:	100d883a 	mov	r6,r2
    4350:	180f883a 	mov	r7,r3
    4354:	000be6c0 	call	be6c <__subdf3>
    4358:	880d883a 	mov	r6,r17
    435c:	800f883a 	mov	r7,r16
    4360:	1009883a 	mov	r4,r2
    4364:	180b883a 	mov	r5,r3
    4368:	000be6c0 	call	be6c <__subdf3>
    436c:	100d883a 	mov	r6,r2
    4370:	180f883a 	mov	r7,r3
    4374:	a809883a 	mov	r4,r21
    4378:	980b883a 	mov	r5,r19
    437c:	000be6c0 	call	be6c <__subdf3>
    4380:	00000806 	br	43a4 <__ieee754_log+0x200>
    4384:	2807883a 	mov	r3,r5
    4388:	011ffc34 	movhi	r4,32752
    438c:	000d883a 	mov	r6,zero
    4390:	193fa016 	blt	r3,r4,4214 <__ieee754_log+0x70>
    4394:	100d883a 	mov	r6,r2
    4398:	1009883a 	mov	r4,r2
    439c:	380b883a 	mov	r5,r7
    43a0:	000a4680 	call	a468 <__adddf3>
    43a4:	dfc00d17 	ldw	ra,52(sp)
    43a8:	df000c17 	ldw	fp,48(sp)
    43ac:	ddc00b17 	ldw	r23,44(sp)
    43b0:	dd800a17 	ldw	r22,40(sp)
    43b4:	dd400917 	ldw	r21,36(sp)
    43b8:	dd000817 	ldw	r20,32(sp)
    43bc:	dcc00717 	ldw	r19,28(sp)
    43c0:	dc800617 	ldw	r18,24(sp)
    43c4:	dc400517 	ldw	r17,20(sp)
    43c8:	dc000417 	ldw	r16,16(sp)
    43cc:	dec00e04 	addi	sp,sp,56
    43d0:	f800283a 	ret
    43d4:	01d00034 	movhi	r7,16384
    43d8:	1009883a 	mov	r4,r2
    43dc:	180b883a 	mov	r5,r3
    43e0:	000a4680 	call	a468 <__adddf3>
    43e4:	100d883a 	mov	r6,r2
    43e8:	180f883a 	mov	r7,r3
    43ec:	800b883a 	mov	r5,r16
    43f0:	8809883a 	mov	r4,r17
    43f4:	000ad580 	call	ad58 <__divdf3>
    43f8:	9809883a 	mov	r4,r19
    43fc:	102d883a 	mov	r22,r2
    4400:	182b883a 	mov	r21,r3
    4404:	000c84c0 	call	c84c <__floatsidf>
    4408:	b00d883a 	mov	r6,r22
    440c:	a80f883a 	mov	r7,r21
    4410:	b009883a 	mov	r4,r22
    4414:	a80b883a 	mov	r5,r21
    4418:	1039883a 	mov	fp,r2
    441c:	d8c00315 	stw	r3,12(sp)
    4420:	000b7f80 	call	b7f8 <__muldf3>
    4424:	1015883a 	mov	r10,r2
    4428:	00bffeb4 	movhi	r2,65530
    442c:	10bae184 	addi	r2,r2,-5242
    4430:	9097883a 	add	r11,r18,r2
    4434:	500d883a 	mov	r6,r10
    4438:	5009883a 	mov	r4,r10
    443c:	180f883a 	mov	r7,r3
    4440:	180b883a 	mov	r5,r3
    4444:	dac00215 	stw	r11,8(sp)
    4448:	da800115 	stw	r10,4(sp)
    444c:	d8c00015 	stw	r3,0(sp)
    4450:	000b7f80 	call	b7f8 <__muldf3>
    4454:	01b7cfb4 	movhi	r6,57150
    4458:	01cff0f4 	movhi	r7,16323
    445c:	31949104 	addi	r6,r6,21060
    4460:	39fc4484 	addi	r7,r7,-3822
    4464:	1009883a 	mov	r4,r2
    4468:	180b883a 	mov	r5,r3
    446c:	1829883a 	mov	r20,r3
    4470:	102f883a 	mov	r23,r2
    4474:	000b7f80 	call	b7f8 <__muldf3>
    4478:	01a5b2f4 	movhi	r6,38603
    447c:	01cff1f4 	movhi	r7,16327
    4480:	3180f784 	addi	r6,r6,990
    4484:	39d19904 	addi	r7,r7,18020
    4488:	1009883a 	mov	r4,r2
    448c:	180b883a 	mov	r5,r3
    4490:	000a4680 	call	a468 <__adddf3>
    4494:	a00f883a 	mov	r7,r20
    4498:	b80d883a 	mov	r6,r23
    449c:	1009883a 	mov	r4,r2
    44a0:	180b883a 	mov	r5,r3
    44a4:	000b7f80 	call	b7f8 <__muldf3>
    44a8:	01a508f4 	movhi	r6,37923
    44ac:	01cff4b4 	movhi	r7,16338
    44b0:	31a4d644 	addi	r6,r6,-27815
    44b4:	39d24904 	addi	r7,r7,18724
    44b8:	1009883a 	mov	r4,r2
    44bc:	180b883a 	mov	r5,r3
    44c0:	000a4680 	call	a468 <__adddf3>
    44c4:	a00f883a 	mov	r7,r20
    44c8:	b80d883a 	mov	r6,r23
    44cc:	1009883a 	mov	r4,r2
    44d0:	180b883a 	mov	r5,r3
    44d4:	000b7f80 	call	b7f8 <__muldf3>
    44d8:	01955574 	movhi	r6,21845
    44dc:	01cff974 	movhi	r7,16357
    44e0:	319564c4 	addi	r6,r6,21907
    44e4:	39d55544 	addi	r7,r7,21845
    44e8:	1009883a 	mov	r4,r2
    44ec:	180b883a 	mov	r5,r3
    44f0:	000a4680 	call	a468 <__adddf3>
    44f4:	da800117 	ldw	r10,4(sp)
    44f8:	da400017 	ldw	r9,0(sp)
    44fc:	1009883a 	mov	r4,r2
    4500:	500d883a 	mov	r6,r10
    4504:	480f883a 	mov	r7,r9
    4508:	180b883a 	mov	r5,r3
    450c:	000b7f80 	call	b7f8 <__muldf3>
    4510:	01b41e74 	movhi	r6,53369
    4514:	01cff134 	movhi	r7,16324
    4518:	a00b883a 	mov	r5,r20
    451c:	31b1a7c4 	addi	r6,r6,-14689
    4520:	39e68244 	addi	r7,r7,-26103
    4524:	b809883a 	mov	r4,r23
    4528:	d8800115 	stw	r2,4(sp)
    452c:	d8c00015 	stw	r3,0(sp)
    4530:	000b7f80 	call	b7f8 <__muldf3>
    4534:	018763b4 	movhi	r6,7566
    4538:	01cff334 	movhi	r7,16332
    453c:	319e2bc4 	addi	r6,r6,30895
    4540:	39dc7144 	addi	r7,r7,29125
    4544:	1009883a 	mov	r4,r2
    4548:	180b883a 	mov	r5,r3
    454c:	000a4680 	call	a468 <__adddf3>
    4550:	a00f883a 	mov	r7,r20
    4554:	b80d883a 	mov	r6,r23
    4558:	1009883a 	mov	r4,r2
    455c:	180b883a 	mov	r5,r3
    4560:	000b7f80 	call	b7f8 <__muldf3>
    4564:	01a66634 	movhi	r6,39320
    4568:	01cff6b4 	movhi	r7,16346
    456c:	31be8104 	addi	r6,r6,-1532
    4570:	39e66644 	addi	r7,r7,-26215
    4574:	1009883a 	mov	r4,r2
    4578:	180b883a 	mov	r5,r3
    457c:	000a4680 	call	a468 <__adddf3>
    4580:	a00f883a 	mov	r7,r20
    4584:	b80d883a 	mov	r6,r23
    4588:	1009883a 	mov	r4,r2
    458c:	180b883a 	mov	r5,r3
    4590:	000b7f80 	call	b7f8 <__muldf3>
    4594:	da800117 	ldw	r10,4(sp)
    4598:	da400017 	ldw	r9,0(sp)
    459c:	100d883a 	mov	r6,r2
    45a0:	180f883a 	mov	r7,r3
    45a4:	480b883a 	mov	r5,r9
    45a8:	5009883a 	mov	r4,r10
    45ac:	000a4680 	call	a468 <__adddf3>
    45b0:	dac00217 	ldw	r11,8(sp)
    45b4:	014001f4 	movhi	r5,7
    45b8:	296e1444 	addi	r5,r5,-18351
    45bc:	2ca5c83a 	sub	r18,r5,r18
    45c0:	92e4b03a 	or	r18,r18,r11
    45c4:	1829883a 	mov	r20,r3
    45c8:	0480470e 	bge	zero,r18,46e8 <__ieee754_log+0x544>
    45cc:	000d883a 	mov	r6,zero
    45d0:	01cff834 	movhi	r7,16352
    45d4:	8809883a 	mov	r4,r17
    45d8:	800b883a 	mov	r5,r16
    45dc:	d8800115 	stw	r2,4(sp)
    45e0:	000b7f80 	call	b7f8 <__muldf3>
    45e4:	880d883a 	mov	r6,r17
    45e8:	800f883a 	mov	r7,r16
    45ec:	1009883a 	mov	r4,r2
    45f0:	180b883a 	mov	r5,r3
    45f4:	000b7f80 	call	b7f8 <__muldf3>
    45f8:	da000117 	ldw	r8,4(sp)
    45fc:	a00b883a 	mov	r5,r20
    4600:	100d883a 	mov	r6,r2
    4604:	4009883a 	mov	r4,r8
    4608:	180f883a 	mov	r7,r3
    460c:	1825883a 	mov	r18,r3
    4610:	d8800015 	stw	r2,0(sp)
    4614:	000a4680 	call	a468 <__adddf3>
    4618:	a80f883a 	mov	r7,r21
    461c:	b00d883a 	mov	r6,r22
    4620:	1009883a 	mov	r4,r2
    4624:	180b883a 	mov	r5,r3
    4628:	000b7f80 	call	b7f8 <__muldf3>
    462c:	da400017 	ldw	r9,0(sp)
    4630:	102b883a 	mov	r21,r2
    4634:	1829883a 	mov	r20,r3
    4638:	9800531e 	bne	r19,zero,4788 <__ieee754_log+0x5e4>
    463c:	4809883a 	mov	r4,r9
    4640:	900b883a 	mov	r5,r18
    4644:	100d883a 	mov	r6,r2
    4648:	180f883a 	mov	r7,r3
    464c:	000be6c0 	call	be6c <__subdf3>
    4650:	100d883a 	mov	r6,r2
    4654:	180f883a 	mov	r7,r3
    4658:	8809883a 	mov	r4,r17
    465c:	800b883a 	mov	r5,r16
    4660:	000be6c0 	call	be6c <__subdf3>
    4664:	003f4f06 	br	43a4 <__ieee754_log+0x200>
    4668:	000d883a 	mov	r6,zero
    466c:	000f883a 	mov	r7,zero
    4670:	0009883a 	mov	r4,zero
    4674:	0170d434 	movhi	r5,50000
    4678:	000ad580 	call	ad58 <__divdf3>
    467c:	003f4906 	br	43a4 <__ieee754_log+0x200>
    4680:	98006826 	beq	r19,zero,4824 <__ieee754_log+0x680>
    4684:	9809883a 	mov	r4,r19
    4688:	000c84c0 	call	c84c <__floatsidf>
    468c:	01cff9b4 	movhi	r7,16358
    4690:	01bfb834 	movhi	r6,65248
    4694:	39cb9084 	addi	r7,r7,11842
    4698:	1009883a 	mov	r4,r2
    469c:	180b883a 	mov	r5,r3
    46a0:	1023883a 	mov	r17,r2
    46a4:	1821883a 	mov	r16,r3
    46a8:	000b7f80 	call	b7f8 <__muldf3>
    46ac:	018d5e74 	movhi	r6,13689
    46b0:	01cf7ab4 	movhi	r7,15850
    46b4:	8809883a 	mov	r4,r17
    46b8:	800b883a 	mov	r5,r16
    46bc:	318f1d84 	addi	r6,r6,15478
    46c0:	39ce7bc4 	addi	r7,r7,14831
    46c4:	1027883a 	mov	r19,r2
    46c8:	1825883a 	mov	r18,r3
    46cc:	000b7f80 	call	b7f8 <__muldf3>
    46d0:	100d883a 	mov	r6,r2
    46d4:	180f883a 	mov	r7,r3
    46d8:	9809883a 	mov	r4,r19
    46dc:	900b883a 	mov	r5,r18
    46e0:	000a4680 	call	a468 <__adddf3>
    46e4:	003f2f06 	br	43a4 <__ieee754_log+0x200>
    46e8:	100d883a 	mov	r6,r2
    46ec:	180f883a 	mov	r7,r3
    46f0:	8809883a 	mov	r4,r17
    46f4:	800b883a 	mov	r5,r16
    46f8:	000be6c0 	call	be6c <__subdf3>
    46fc:	b00d883a 	mov	r6,r22
    4700:	a80f883a 	mov	r7,r21
    4704:	1009883a 	mov	r4,r2
    4708:	180b883a 	mov	r5,r3
    470c:	000b7f80 	call	b7f8 <__muldf3>
    4710:	1029883a 	mov	r20,r2
    4714:	1825883a 	mov	r18,r3
    4718:	98000d26 	beq	r19,zero,4750 <__ieee754_log+0x5ac>
    471c:	dcc00317 	ldw	r19,12(sp)
    4720:	01cff9b4 	movhi	r7,16358
    4724:	01bfb834 	movhi	r6,65248
    4728:	39cb9084 	addi	r7,r7,11842
    472c:	e009883a 	mov	r4,fp
    4730:	980b883a 	mov	r5,r19
    4734:	000b7f80 	call	b7f8 <__muldf3>
    4738:	018d5e74 	movhi	r6,13689
    473c:	01cf7ab4 	movhi	r7,15850
    4740:	318f1d84 	addi	r6,r6,15478
    4744:	39ce7bc4 	addi	r7,r7,14831
    4748:	e009883a 	mov	r4,fp
    474c:	003ef906 	br	4334 <__ieee754_log+0x190>
    4750:	a00d883a 	mov	r6,r20
    4754:	900f883a 	mov	r7,r18
    4758:	8809883a 	mov	r4,r17
    475c:	800b883a 	mov	r5,r16
    4760:	000be6c0 	call	be6c <__subdf3>
    4764:	003f0f06 	br	43a4 <__ieee754_log+0x200>
    4768:	200d883a 	mov	r6,r4
    476c:	000be6c0 	call	be6c <__subdf3>
    4770:	000d883a 	mov	r6,zero
    4774:	000f883a 	mov	r7,zero
    4778:	1009883a 	mov	r4,r2
    477c:	180b883a 	mov	r5,r3
    4780:	000ad580 	call	ad58 <__divdf3>
    4784:	003f0706 	br	43a4 <__ieee754_log+0x200>
    4788:	dcc00317 	ldw	r19,12(sp)
    478c:	01cff9b4 	movhi	r7,16358
    4790:	e009883a 	mov	r4,fp
    4794:	980b883a 	mov	r5,r19
    4798:	01bfb834 	movhi	r6,65248
    479c:	39cb9084 	addi	r7,r7,11842
    47a0:	da400015 	stw	r9,0(sp)
    47a4:	000b7f80 	call	b7f8 <__muldf3>
    47a8:	018d5e74 	movhi	r6,13689
    47ac:	01cf7ab4 	movhi	r7,15850
    47b0:	e009883a 	mov	r4,fp
    47b4:	980b883a 	mov	r5,r19
    47b8:	318f1d84 	addi	r6,r6,15478
    47bc:	39ce7bc4 	addi	r7,r7,14831
    47c0:	102d883a 	mov	r22,r2
    47c4:	1827883a 	mov	r19,r3
    47c8:	000b7f80 	call	b7f8 <__muldf3>
    47cc:	a80d883a 	mov	r6,r21
    47d0:	a00f883a 	mov	r7,r20
    47d4:	1009883a 	mov	r4,r2
    47d8:	180b883a 	mov	r5,r3
    47dc:	000a4680 	call	a468 <__adddf3>
    47e0:	da400017 	ldw	r9,0(sp)
    47e4:	900b883a 	mov	r5,r18
    47e8:	100d883a 	mov	r6,r2
    47ec:	4809883a 	mov	r4,r9
    47f0:	180f883a 	mov	r7,r3
    47f4:	000be6c0 	call	be6c <__subdf3>
    47f8:	880d883a 	mov	r6,r17
    47fc:	800f883a 	mov	r7,r16
    4800:	1009883a 	mov	r4,r2
    4804:	180b883a 	mov	r5,r3
    4808:	000be6c0 	call	be6c <__subdf3>
    480c:	100d883a 	mov	r6,r2
    4810:	180f883a 	mov	r7,r3
    4814:	b009883a 	mov	r4,r22
    4818:	980b883a 	mov	r5,r19
    481c:	000be6c0 	call	be6c <__subdf3>
    4820:	003ee006 	br	43a4 <__ieee754_log+0x200>
    4824:	0005883a 	mov	r2,zero
    4828:	0007883a 	mov	r3,zero
    482c:	003edd06 	br	43a4 <__ieee754_log+0x200>

00004830 <__ieee754_pow>:
    4830:	00e00034 	movhi	r3,32768
    4834:	deffeb04 	addi	sp,sp,-84
    4838:	18ffffc4 	addi	r3,r3,-1
    483c:	dc000b15 	stw	r16,44(sp)
    4840:	3021883a 	mov	r16,r6
    4844:	38cc703a 	and	r6,r7,r3
    4848:	dd401015 	stw	r21,64(sp)
    484c:	dc400c15 	stw	r17,48(sp)
    4850:	dfc01415 	stw	ra,80(sp)
    4854:	df001315 	stw	fp,76(sp)
    4858:	ddc01215 	stw	r23,72(sp)
    485c:	dd801115 	stw	r22,68(sp)
    4860:	dd000f15 	stw	r20,60(sp)
    4864:	dcc00e15 	stw	r19,56(sp)
    4868:	dc800d15 	stw	r18,52(sp)
    486c:	3404b03a 	or	r2,r6,r16
    4870:	3823883a 	mov	r17,r7
    4874:	282b883a 	mov	r21,r5
    4878:	1000191e 	bne	r2,zero,48e0 <__ieee754_pow+0xb0>
    487c:	2880023c 	xorhi	r2,r5,8
    4880:	2006d7fa 	srli	r3,r4,31
    4884:	1004907a 	slli	r2,r2,1
    4888:	017ffc34 	movhi	r5,65520
    488c:	200c907a 	slli	r6,r4,1
    4890:	1884b03a 	or	r2,r3,r2
    4894:	2880202e 	bgeu	r5,r2,4918 <__ieee754_pow+0xe8>
    4898:	800d883a 	mov	r6,r16
    489c:	880f883a 	mov	r7,r17
    48a0:	a80b883a 	mov	r5,r21
    48a4:	000a4680 	call	a468 <__adddf3>
    48a8:	102d883a 	mov	r22,r2
    48ac:	b005883a 	mov	r2,r22
    48b0:	dfc01417 	ldw	ra,80(sp)
    48b4:	df001317 	ldw	fp,76(sp)
    48b8:	ddc01217 	ldw	r23,72(sp)
    48bc:	dd801117 	ldw	r22,68(sp)
    48c0:	dd401017 	ldw	r21,64(sp)
    48c4:	dd000f17 	ldw	r20,60(sp)
    48c8:	dcc00e17 	ldw	r19,56(sp)
    48cc:	dc800d17 	ldw	r18,52(sp)
    48d0:	dc400c17 	ldw	r17,48(sp)
    48d4:	dc000b17 	ldw	r16,44(sp)
    48d8:	dec01504 	addi	sp,sp,84
    48dc:	f800283a 	ret
    48e0:	28e6703a 	and	r19,r5,r3
    48e4:	009ffc34 	movhi	r2,32752
    48e8:	14c00f0e 	bge	r2,r19,4928 <__ieee754_pow+0xf8>
    48ec:	00b00434 	movhi	r2,49168
    48f0:	a885883a 	add	r2,r21,r2
    48f4:	1104b03a 	or	r2,r2,r4
    48f8:	103fe71e 	bne	r2,zero,4898 <__ieee754_pow+0x68>
    48fc:	8880023c 	xorhi	r2,r17,8
    4900:	8006d7fa 	srli	r3,r16,31
    4904:	1004907a 	slli	r2,r2,1
    4908:	017ffc34 	movhi	r5,65520
    490c:	800c907a 	slli	r6,r16,1
    4910:	1884b03a 	or	r2,r3,r2
    4914:	28bfe036 	bltu	r5,r2,4898 <__ieee754_pow+0x68>
    4918:	11402726 	beq	r2,r5,49b8 <__ieee754_pow+0x188>
    491c:	002d883a 	mov	r22,zero
    4920:	00cffc34 	movhi	r3,16368
    4924:	003fe106 	br	48ac <__ieee754_pow+0x7c>
    4928:	98802526 	beq	r19,r2,49c0 <__ieee754_pow+0x190>
    492c:	009ffc34 	movhi	r2,32752
    4930:	11bfee16 	blt	r2,r6,48ec <__ieee754_pow+0xbc>
    4934:	30802426 	beq	r6,r2,49c8 <__ieee754_pow+0x198>
    4938:	a8006e16 	blt	r21,zero,4af4 <__ieee754_pow+0x2c4>
    493c:	0025883a 	mov	r18,zero
    4940:	80002326 	beq	r16,zero,49d0 <__ieee754_pow+0x1a0>
    4944:	00e00034 	movhi	r3,32768
    4948:	18ffffc4 	addi	r3,r3,-1
    494c:	202d883a 	mov	r22,r4
    4950:	a8c6703a 	and	r3,r21,r3
    4954:	20003a26 	beq	r4,zero,4a40 <__ieee754_pow+0x210>
    4958:	a828d7fa 	srli	r20,r21,31
    495c:	a53fffc4 	addi	r20,r20,-1
    4960:	9504b03a 	or	r2,r18,r20
    4964:	10008026 	beq	r2,zero,4b68 <__ieee754_pow+0x338>
    4968:	00907834 	movhi	r2,16864
    496c:	1180810e 	bge	r2,r6,4b74 <__ieee754_pow+0x344>
    4970:	0090fc34 	movhi	r2,17392
    4974:	11834f0e 	bge	r2,r6,56b4 <__ieee754_pow+0xe84>
    4978:	008ffc34 	movhi	r2,16368
    497c:	9880480e 	bge	r19,r2,4aa0 <__ieee754_pow+0x270>
    4980:	88004816 	blt	r17,zero,4aa4 <__ieee754_pow+0x274>
    4984:	0009883a 	mov	r4,zero
    4988:	dfc01417 	ldw	ra,80(sp)
    498c:	df001317 	ldw	fp,76(sp)
    4990:	ddc01217 	ldw	r23,72(sp)
    4994:	dd801117 	ldw	r22,68(sp)
    4998:	dd401017 	ldw	r21,64(sp)
    499c:	dd000f17 	ldw	r20,60(sp)
    49a0:	dcc00e17 	ldw	r19,56(sp)
    49a4:	dc800d17 	ldw	r18,52(sp)
    49a8:	dc400c17 	ldw	r17,48(sp)
    49ac:	dc000b17 	ldw	r16,44(sp)
    49b0:	dec01504 	addi	sp,sp,84
    49b4:	0008c401 	jmpi	8c40 <__math_uflow>
    49b8:	303fd826 	beq	r6,zero,491c <__ieee754_pow+0xec>
    49bc:	003fb606 	br	4898 <__ieee754_pow+0x68>
    49c0:	203fb51e 	bne	r4,zero,4898 <__ieee754_pow+0x68>
    49c4:	003fd906 	br	492c <__ieee754_pow+0xfc>
    49c8:	803fdb26 	beq	r16,zero,4938 <__ieee754_pow+0x108>
    49cc:	003fc706 	br	48ec <__ieee754_pow+0xbc>
    49d0:	009ffc34 	movhi	r2,32752
    49d4:	30805a26 	beq	r6,r2,4b40 <__ieee754_pow+0x310>
    49d8:	008ffc34 	movhi	r2,16368
    49dc:	30831026 	beq	r6,r2,5620 <__ieee754_pow+0xdf0>
    49e0:	00900034 	movhi	r2,16384
    49e4:	8883a626 	beq	r17,r2,5880 <__ieee754_pow+0x1050>
    49e8:	008ff834 	movhi	r2,16352
    49ec:	88bfd51e 	bne	r17,r2,4944 <__ieee754_pow+0x114>
    49f0:	a83fd416 	blt	r21,zero,4944 <__ieee754_pow+0x114>
    49f4:	a80b883a 	mov	r5,r21
    49f8:	dfc01417 	ldw	ra,80(sp)
    49fc:	df001317 	ldw	fp,76(sp)
    4a00:	ddc01217 	ldw	r23,72(sp)
    4a04:	dd801117 	ldw	r22,68(sp)
    4a08:	dd401017 	ldw	r21,64(sp)
    4a0c:	dd000f17 	ldw	r20,60(sp)
    4a10:	dcc00e17 	ldw	r19,56(sp)
    4a14:	dc800d17 	ldw	r18,52(sp)
    4a18:	dc400c17 	ldw	r17,48(sp)
    4a1c:	dc000b17 	ldw	r16,44(sp)
    4a20:	dec01504 	addi	sp,sp,84
    4a24:	00060841 	jmpi	6084 <__ieee754_sqrt>
    4a28:	20004f1e 	bne	r4,zero,4b68 <__ieee754_pow+0x338>
    4a2c:	00e00034 	movhi	r3,32768
    4a30:	18ffffc4 	addi	r3,r3,-1
    4a34:	002d883a 	mov	r22,zero
    4a38:	a8c6703a 	and	r3,r21,r3
    4a3c:	0025883a 	mov	r18,zero
    4a40:	98000526 	beq	r19,zero,4a58 <__ieee754_pow+0x228>
    4a44:	00900034 	movhi	r2,16384
    4a48:	10bfffc4 	addi	r2,r2,-1
    4a4c:	a884703a 	and	r2,r21,r2
    4a50:	014ffc34 	movhi	r5,16368
    4a54:	117fc01e 	bne	r2,r5,4958 <__ieee754_pow+0x128>
    4a58:	88001f16 	blt	r17,zero,4ad8 <__ieee754_pow+0x2a8>
    4a5c:	a83f930e 	bge	r21,zero,48ac <__ieee754_pow+0x7c>
    4a60:	00b00434 	movhi	r2,49168
    4a64:	9885883a 	add	r2,r19,r2
    4a68:	1484b03a 	or	r2,r2,r18
    4a6c:	10038a1e 	bne	r2,zero,5898 <__ieee754_pow+0x1068>
    4a70:	b00d883a 	mov	r6,r22
    4a74:	180f883a 	mov	r7,r3
    4a78:	3009883a 	mov	r4,r6
    4a7c:	380b883a 	mov	r5,r7
    4a80:	000be6c0 	call	be6c <__subdf3>
    4a84:	100d883a 	mov	r6,r2
    4a88:	180f883a 	mov	r7,r3
    4a8c:	1009883a 	mov	r4,r2
    4a90:	180b883a 	mov	r5,r3
    4a94:	000ad580 	call	ad58 <__divdf3>
    4a98:	102d883a 	mov	r22,r2
    4a9c:	003f8306 	br	48ac <__ieee754_pow+0x7c>
    4aa0:	047fb80e 	bge	zero,r17,4984 <__ieee754_pow+0x154>
    4aa4:	0009883a 	mov	r4,zero
    4aa8:	dfc01417 	ldw	ra,80(sp)
    4aac:	df001317 	ldw	fp,76(sp)
    4ab0:	ddc01217 	ldw	r23,72(sp)
    4ab4:	dd801117 	ldw	r22,68(sp)
    4ab8:	dd401017 	ldw	r21,64(sp)
    4abc:	dd000f17 	ldw	r20,60(sp)
    4ac0:	dcc00e17 	ldw	r19,56(sp)
    4ac4:	dc800d17 	ldw	r18,52(sp)
    4ac8:	dc400c17 	ldw	r17,48(sp)
    4acc:	dc000b17 	ldw	r16,44(sp)
    4ad0:	dec01504 	addi	sp,sp,84
    4ad4:	0008c581 	jmpi	8c58 <__math_oflow>
    4ad8:	180f883a 	mov	r7,r3
    4adc:	000d883a 	mov	r6,zero
    4ae0:	0009883a 	mov	r4,zero
    4ae4:	014ffc34 	movhi	r5,16368
    4ae8:	000ad580 	call	ad58 <__divdf3>
    4aec:	102d883a 	mov	r22,r2
    4af0:	003fda06 	br	4a5c <__ieee754_pow+0x22c>
    4af4:	0090d034 	movhi	r2,17216
    4af8:	30800e0e 	bge	r6,r2,4b34 <__ieee754_pow+0x304>
    4afc:	008ffc34 	movhi	r2,16368
    4b00:	30800916 	blt	r6,r2,4b28 <__ieee754_pow+0x2f8>
    4b04:	3005d53a 	srai	r2,r6,20
    4b08:	10bf0044 	addi	r2,r2,-1023
    4b0c:	10c00550 	cmplti	r3,r2,21
    4b10:	18034c1e 	bne	r3,zero,5844 <__ieee754_pow+0x1014>
    4b14:	00c00d04 	movi	r3,52
    4b18:	1885c83a 	sub	r2,r3,r2
    4b1c:	8086d83a 	srl	r3,r16,r2
    4b20:	1884983a 	sll	r2,r3,r2
    4b24:	14037926 	beq	r2,r16,590c <__ieee754_pow+0x10dc>
    4b28:	0025883a 	mov	r18,zero
    4b2c:	803faa26 	beq	r16,zero,49d8 <__ieee754_pow+0x1a8>
    4b30:	003f8406 	br	4944 <__ieee754_pow+0x114>
    4b34:	04800084 	movi	r18,2
    4b38:	803f821e 	bne	r16,zero,4944 <__ieee754_pow+0x114>
    4b3c:	003fa406 	br	49d0 <__ieee754_pow+0x1a0>
    4b40:	00b00434 	movhi	r2,49168
    4b44:	9885883a 	add	r2,r19,r2
    4b48:	1104b03a 	or	r2,r2,r4
    4b4c:	103f7326 	beq	r2,zero,491c <__ieee754_pow+0xec>
    4b50:	008ffc34 	movhi	r2,16368
    4b54:	002d883a 	mov	r22,zero
    4b58:	98833716 	blt	r19,r2,5838 <__ieee754_pow+0x1008>
    4b5c:	88033416 	blt	r17,zero,5830 <__ieee754_pow+0x1000>
    4b60:	8807883a 	mov	r3,r17
    4b64:	003f5106 	br	48ac <__ieee754_pow+0x7c>
    4b68:	200d883a 	mov	r6,r4
    4b6c:	a80f883a 	mov	r7,r21
    4b70:	003fc106 	br	4a78 <__ieee754_pow+0x248>
    4b74:	ad5ffc2c 	andhi	r21,r21,32752
    4b78:	a802cc1e 	bne	r21,zero,56ac <__ieee754_pow+0xe7c>
    4b7c:	180b883a 	mov	r5,r3
    4b80:	000d883a 	mov	r6,zero
    4b84:	01d0d034 	movhi	r7,17216
    4b88:	000b7f80 	call	b7f8 <__muldf3>
    4b8c:	102d883a 	mov	r22,r2
    4b90:	1827883a 	mov	r19,r3
    4b94:	017ff2c4 	movi	r5,-53
    4b98:	9809d53a 	srai	r4,r19,20
    4b9c:	00800434 	movhi	r2,16
    4ba0:	10bfffc4 	addi	r2,r2,-1
    4ba4:	00c00134 	movhi	r3,4
    4ba8:	213f0044 	addi	r4,r4,-1023
    4bac:	9884703a 	and	r2,r19,r2
    4bb0:	18e62384 	addi	r3,r3,-26482
    4bb4:	2159883a 	add	r12,r4,r5
    4bb8:	170ffc34 	orhi	fp,r2,16368
    4bbc:	1880060e 	bge	r3,r2,4bd8 <__ieee754_pow+0x3a8>
    4bc0:	00c00334 	movhi	r3,12
    4bc4:	18ed9e44 	addi	r3,r3,-18823
    4bc8:	1883370e 	bge	r3,r2,58a8 <__ieee754_pow+0x1078>
    4bcc:	00bffc34 	movhi	r2,65520
    4bd0:	63000044 	addi	r12,r12,1
    4bd4:	e0b9883a 	add	fp,fp,r2
    4bd8:	d8000015 	stw	zero,0(sp)
    4bdc:	d8000115 	stw	zero,4(sp)
    4be0:	d8000a15 	stw	zero,40(sp)
    4be4:	001f883a 	mov	r15,zero
    4be8:	002f883a 	mov	r23,zero
    4bec:	034ffc34 	movhi	r13,16368
    4bf0:	680f883a 	mov	r7,r13
    4bf4:	b009883a 	mov	r4,r22
    4bf8:	e00b883a 	mov	r5,fp
    4bfc:	000d883a 	mov	r6,zero
    4c00:	dbc00915 	stw	r15,36(sp)
    4c04:	db000815 	stw	r12,32(sp)
    4c08:	db400215 	stw	r13,8(sp)
    4c0c:	000be6c0 	call	be6c <__subdf3>
    4c10:	db400217 	ldw	r13,8(sp)
    4c14:	b009883a 	mov	r4,r22
    4c18:	e00b883a 	mov	r5,fp
    4c1c:	680f883a 	mov	r7,r13
    4c20:	000d883a 	mov	r6,zero
    4c24:	db400615 	stw	r13,24(sp)
    4c28:	d8800315 	stw	r2,12(sp)
    4c2c:	d8c00215 	stw	r3,8(sp)
    4c30:	000a4680 	call	a468 <__adddf3>
    4c34:	100d883a 	mov	r6,r2
    4c38:	180f883a 	mov	r7,r3
    4c3c:	0009883a 	mov	r4,zero
    4c40:	014ffc34 	movhi	r5,16368
    4c44:	000ad580 	call	ad58 <__divdf3>
    4c48:	dac00217 	ldw	r11,8(sp)
    4c4c:	da400317 	ldw	r9,12(sp)
    4c50:	100d883a 	mov	r6,r2
    4c54:	580b883a 	mov	r5,r11
    4c58:	4809883a 	mov	r4,r9
    4c5c:	180f883a 	mov	r7,r3
    4c60:	d8800515 	stw	r2,20(sp)
    4c64:	d8c00415 	stw	r3,16(sp)
    4c68:	000b7f80 	call	b7f8 <__muldf3>
    4c6c:	e009d07a 	srai	r4,fp,1
    4c70:	01400234 	movhi	r5,8
    4c74:	000d883a 	mov	r6,zero
    4c78:	21080034 	orhi	r4,r4,8192
    4c7c:	2149883a 	add	r4,r4,r5
    4c80:	25ef883a 	add	r23,r4,r23
    4c84:	b80f883a 	mov	r7,r23
    4c88:	0009883a 	mov	r4,zero
    4c8c:	180b883a 	mov	r5,r3
    4c90:	1827883a 	mov	r19,r3
    4c94:	102b883a 	mov	r21,r2
    4c98:	000b7f80 	call	b7f8 <__muldf3>
    4c9c:	da400317 	ldw	r9,12(sp)
    4ca0:	dac00217 	ldw	r11,8(sp)
    4ca4:	100d883a 	mov	r6,r2
    4ca8:	4809883a 	mov	r4,r9
    4cac:	580b883a 	mov	r5,r11
    4cb0:	180f883a 	mov	r7,r3
    4cb4:	000be6c0 	call	be6c <__subdf3>
    4cb8:	db400617 	ldw	r13,24(sp)
    4cbc:	b80b883a 	mov	r5,r23
    4cc0:	000d883a 	mov	r6,zero
    4cc4:	680f883a 	mov	r7,r13
    4cc8:	0009883a 	mov	r4,zero
    4ccc:	182f883a 	mov	r23,r3
    4cd0:	d8800215 	stw	r2,8(sp)
    4cd4:	000be6c0 	call	be6c <__subdf3>
    4cd8:	b009883a 	mov	r4,r22
    4cdc:	e00b883a 	mov	r5,fp
    4ce0:	100d883a 	mov	r6,r2
    4ce4:	180f883a 	mov	r7,r3
    4ce8:	000be6c0 	call	be6c <__subdf3>
    4cec:	980f883a 	mov	r7,r19
    4cf0:	000d883a 	mov	r6,zero
    4cf4:	1009883a 	mov	r4,r2
    4cf8:	180b883a 	mov	r5,r3
    4cfc:	000b7f80 	call	b7f8 <__muldf3>
    4d00:	dac00217 	ldw	r11,8(sp)
    4d04:	b80b883a 	mov	r5,r23
    4d08:	100d883a 	mov	r6,r2
    4d0c:	5809883a 	mov	r4,r11
    4d10:	180f883a 	mov	r7,r3
    4d14:	000be6c0 	call	be6c <__subdf3>
    4d18:	da000417 	ldw	r8,16(sp)
    4d1c:	da800517 	ldw	r10,20(sp)
    4d20:	1009883a 	mov	r4,r2
    4d24:	400f883a 	mov	r7,r8
    4d28:	500d883a 	mov	r6,r10
    4d2c:	180b883a 	mov	r5,r3
    4d30:	000b7f80 	call	b7f8 <__muldf3>
    4d34:	a80d883a 	mov	r6,r21
    4d38:	980f883a 	mov	r7,r19
    4d3c:	a809883a 	mov	r4,r21
    4d40:	980b883a 	mov	r5,r19
    4d44:	d8800415 	stw	r2,16(sp)
    4d48:	d8c00315 	stw	r3,12(sp)
    4d4c:	000b7f80 	call	b7f8 <__muldf3>
    4d50:	01929174 	movhi	r6,19013
    4d54:	01cff2b4 	movhi	r7,16330
    4d58:	3193bbc4 	addi	r6,r6,20207
    4d5c:	39df8a04 	addi	r7,r7,32296
    4d60:	1009883a 	mov	r4,r2
    4d64:	180b883a 	mov	r5,r3
    4d68:	102f883a 	mov	r23,r2
    4d6c:	182d883a 	mov	r22,r3
    4d70:	000b7f80 	call	b7f8 <__muldf3>
    4d74:	01a4f2b4 	movhi	r6,37834
    4d78:	01cff3b4 	movhi	r7,16334
    4d7c:	31b6d944 	addi	r6,r6,-9371
    4d80:	39e19284 	addi	r7,r7,-31158
    4d84:	1009883a 	mov	r4,r2
    4d88:	180b883a 	mov	r5,r3
    4d8c:	000a4680 	call	a468 <__adddf3>
    4d90:	b80d883a 	mov	r6,r23
    4d94:	b00f883a 	mov	r7,r22
    4d98:	1009883a 	mov	r4,r2
    4d9c:	180b883a 	mov	r5,r3
    4da0:	000b7f80 	call	b7f8 <__muldf3>
    4da4:	01aa4774 	movhi	r6,43293
    4da8:	01cff474 	movhi	r7,16337
    4dac:	31904044 	addi	r6,r6,16641
    4db0:	39dd1804 	addi	r7,r7,29792
    4db4:	1009883a 	mov	r4,r2
    4db8:	180b883a 	mov	r5,r3
    4dbc:	000a4680 	call	a468 <__adddf3>
    4dc0:	b80d883a 	mov	r6,r23
    4dc4:	b00f883a 	mov	r7,r22
    4dc8:	1009883a 	mov	r4,r2
    4dcc:	180b883a 	mov	r5,r3
    4dd0:	000b7f80 	call	b7f8 <__muldf3>
    4dd4:	019463f4 	movhi	r6,20879
    4dd8:	01cff574 	movhi	r7,16341
    4ddc:	31899344 	addi	r6,r6,9805
    4de0:	39d55544 	addi	r7,r7,21845
    4de4:	1009883a 	mov	r4,r2
    4de8:	180b883a 	mov	r5,r3
    4dec:	000a4680 	call	a468 <__adddf3>
    4df0:	b80d883a 	mov	r6,r23
    4df4:	b00f883a 	mov	r7,r22
    4df8:	1009883a 	mov	r4,r2
    4dfc:	180b883a 	mov	r5,r3
    4e00:	000b7f80 	call	b7f8 <__muldf3>
    4e04:	01b6dc34 	movhi	r6,56176
    4e08:	01cff6f4 	movhi	r7,16347
    4e0c:	31aaffc4 	addi	r6,r6,-21505
    4e10:	39db6d84 	addi	r7,r7,28086
    4e14:	1009883a 	mov	r4,r2
    4e18:	180b883a 	mov	r5,r3
    4e1c:	000a4680 	call	a468 <__adddf3>
    4e20:	b80d883a 	mov	r6,r23
    4e24:	b00f883a 	mov	r7,r22
    4e28:	1009883a 	mov	r4,r2
    4e2c:	180b883a 	mov	r5,r3
    4e30:	000b7f80 	call	b7f8 <__muldf3>
    4e34:	018cccf4 	movhi	r6,13107
    4e38:	01cff8f4 	movhi	r7,16355
    4e3c:	318cc0c4 	addi	r6,r6,13059
    4e40:	39ccccc4 	addi	r7,r7,13107
    4e44:	1009883a 	mov	r4,r2
    4e48:	180b883a 	mov	r5,r3
    4e4c:	000a4680 	call	a468 <__adddf3>
    4e50:	b80d883a 	mov	r6,r23
    4e54:	b00f883a 	mov	r7,r22
    4e58:	b809883a 	mov	r4,r23
    4e5c:	b00b883a 	mov	r5,r22
    4e60:	1839883a 	mov	fp,r3
    4e64:	d8800215 	stw	r2,8(sp)
    4e68:	000b7f80 	call	b7f8 <__muldf3>
    4e6c:	dac00217 	ldw	r11,8(sp)
    4e70:	e00b883a 	mov	r5,fp
    4e74:	100d883a 	mov	r6,r2
    4e78:	5809883a 	mov	r4,r11
    4e7c:	180f883a 	mov	r7,r3
    4e80:	000b7f80 	call	b7f8 <__muldf3>
    4e84:	980f883a 	mov	r7,r19
    4e88:	a809883a 	mov	r4,r21
    4e8c:	980b883a 	mov	r5,r19
    4e90:	000d883a 	mov	r6,zero
    4e94:	102f883a 	mov	r23,r2
    4e98:	182d883a 	mov	r22,r3
    4e9c:	000a4680 	call	a468 <__adddf3>
    4ea0:	da800417 	ldw	r10,16(sp)
    4ea4:	da400317 	ldw	r9,12(sp)
    4ea8:	1009883a 	mov	r4,r2
    4eac:	500d883a 	mov	r6,r10
    4eb0:	480f883a 	mov	r7,r9
    4eb4:	180b883a 	mov	r5,r3
    4eb8:	da800715 	stw	r10,28(sp)
    4ebc:	da400615 	stw	r9,24(sp)
    4ec0:	000b7f80 	call	b7f8 <__muldf3>
    4ec4:	b80d883a 	mov	r6,r23
    4ec8:	b00f883a 	mov	r7,r22
    4ecc:	1009883a 	mov	r4,r2
    4ed0:	180b883a 	mov	r5,r3
    4ed4:	000a4680 	call	a468 <__adddf3>
    4ed8:	980f883a 	mov	r7,r19
    4edc:	980b883a 	mov	r5,r19
    4ee0:	000d883a 	mov	r6,zero
    4ee4:	0009883a 	mov	r4,zero
    4ee8:	d8800315 	stw	r2,12(sp)
    4eec:	d8c00215 	stw	r3,8(sp)
    4ef0:	000b7f80 	call	b7f8 <__muldf3>
    4ef4:	000d883a 	mov	r6,zero
    4ef8:	01d00234 	movhi	r7,16392
    4efc:	1009883a 	mov	r4,r2
    4f00:	180b883a 	mov	r5,r3
    4f04:	d8800515 	stw	r2,20(sp)
    4f08:	d8c00415 	stw	r3,16(sp)
    4f0c:	000a4680 	call	a468 <__adddf3>
    4f10:	da000317 	ldw	r8,12(sp)
    4f14:	dac00217 	ldw	r11,8(sp)
    4f18:	1009883a 	mov	r4,r2
    4f1c:	400d883a 	mov	r6,r8
    4f20:	580f883a 	mov	r7,r11
    4f24:	180b883a 	mov	r5,r3
    4f28:	000a4680 	call	a468 <__adddf3>
    4f2c:	980b883a 	mov	r5,r19
    4f30:	000d883a 	mov	r6,zero
    4f34:	180f883a 	mov	r7,r3
    4f38:	0009883a 	mov	r4,zero
    4f3c:	182d883a 	mov	r22,r3
    4f40:	000b7f80 	call	b7f8 <__muldf3>
    4f44:	b00b883a 	mov	r5,r22
    4f48:	000d883a 	mov	r6,zero
    4f4c:	01d00234 	movhi	r7,16392
    4f50:	0009883a 	mov	r4,zero
    4f54:	1039883a 	mov	fp,r2
    4f58:	182f883a 	mov	r23,r3
    4f5c:	000be6c0 	call	be6c <__subdf3>
    4f60:	db800517 	ldw	r14,20(sp)
    4f64:	db400417 	ldw	r13,16(sp)
    4f68:	1009883a 	mov	r4,r2
    4f6c:	700d883a 	mov	r6,r14
    4f70:	680f883a 	mov	r7,r13
    4f74:	180b883a 	mov	r5,r3
    4f78:	000be6c0 	call	be6c <__subdf3>
    4f7c:	da000317 	ldw	r8,12(sp)
    4f80:	dac00217 	ldw	r11,8(sp)
    4f84:	100d883a 	mov	r6,r2
    4f88:	4009883a 	mov	r4,r8
    4f8c:	580b883a 	mov	r5,r11
    4f90:	180f883a 	mov	r7,r3
    4f94:	000be6c0 	call	be6c <__subdf3>
    4f98:	a80d883a 	mov	r6,r21
    4f9c:	980f883a 	mov	r7,r19
    4fa0:	1009883a 	mov	r4,r2
    4fa4:	180b883a 	mov	r5,r3
    4fa8:	000b7f80 	call	b7f8 <__muldf3>
    4fac:	da800717 	ldw	r10,28(sp)
    4fb0:	da400617 	ldw	r9,24(sp)
    4fb4:	b00f883a 	mov	r7,r22
    4fb8:	5009883a 	mov	r4,r10
    4fbc:	480b883a 	mov	r5,r9
    4fc0:	000d883a 	mov	r6,zero
    4fc4:	102b883a 	mov	r21,r2
    4fc8:	1827883a 	mov	r19,r3
    4fcc:	000b7f80 	call	b7f8 <__muldf3>
    4fd0:	a809883a 	mov	r4,r21
    4fd4:	980b883a 	mov	r5,r19
    4fd8:	100d883a 	mov	r6,r2
    4fdc:	180f883a 	mov	r7,r3
    4fe0:	000a4680 	call	a468 <__adddf3>
    4fe4:	e009883a 	mov	r4,fp
    4fe8:	b80b883a 	mov	r5,r23
    4fec:	100d883a 	mov	r6,r2
    4ff0:	180f883a 	mov	r7,r3
    4ff4:	102d883a 	mov	r22,r2
    4ff8:	182b883a 	mov	r21,r3
    4ffc:	000a4680 	call	a468 <__adddf3>
    5000:	01cffbf4 	movhi	r7,16367
    5004:	01b80034 	movhi	r6,57344
    5008:	39f1c244 	addi	r7,r7,-14583
    500c:	0009883a 	mov	r4,zero
    5010:	180b883a 	mov	r5,r3
    5014:	1827883a 	mov	r19,r3
    5018:	000b7f80 	call	b7f8 <__muldf3>
    501c:	e00d883a 	mov	r6,fp
    5020:	b80f883a 	mov	r7,r23
    5024:	980b883a 	mov	r5,r19
    5028:	0009883a 	mov	r4,zero
    502c:	1039883a 	mov	fp,r2
    5030:	182f883a 	mov	r23,r3
    5034:	000be6c0 	call	be6c <__subdf3>
    5038:	b009883a 	mov	r4,r22
    503c:	a80b883a 	mov	r5,r21
    5040:	100d883a 	mov	r6,r2
    5044:	180f883a 	mov	r7,r3
    5048:	000be6c0 	call	be6c <__subdf3>
    504c:	01b70eb4 	movhi	r6,56378
    5050:	01cffbf4 	movhi	r7,16367
    5054:	3180ff44 	addi	r6,r6,1021
    5058:	39f1c244 	addi	r7,r7,-14583
    505c:	1009883a 	mov	r4,r2
    5060:	180b883a 	mov	r5,r3
    5064:	000b7f80 	call	b7f8 <__muldf3>
    5068:	018516f4 	movhi	r6,5211
    506c:	01ef8fb4 	movhi	r7,48702
    5070:	980b883a 	mov	r5,r19
    5074:	31807d44 	addi	r6,r6,501
    5078:	39cbf804 	addi	r7,r7,12256
    507c:	0009883a 	mov	r4,zero
    5080:	102d883a 	mov	r22,r2
    5084:	182b883a 	mov	r21,r3
    5088:	000b7f80 	call	b7f8 <__muldf3>
    508c:	b009883a 	mov	r4,r22
    5090:	a80b883a 	mov	r5,r21
    5094:	100d883a 	mov	r6,r2
    5098:	180f883a 	mov	r7,r3
    509c:	000a4680 	call	a468 <__adddf3>
    50a0:	dbc00917 	ldw	r15,36(sp)
    50a4:	d9800a17 	ldw	r6,40(sp)
    50a8:	180b883a 	mov	r5,r3
    50ac:	780f883a 	mov	r7,r15
    50b0:	1009883a 	mov	r4,r2
    50b4:	000a4680 	call	a468 <__adddf3>
    50b8:	db000817 	ldw	r12,32(sp)
    50bc:	102d883a 	mov	r22,r2
    50c0:	182b883a 	mov	r21,r3
    50c4:	6009883a 	mov	r4,r12
    50c8:	000c84c0 	call	c84c <__floatsidf>
    50cc:	b00d883a 	mov	r6,r22
    50d0:	a80f883a 	mov	r7,r21
    50d4:	e009883a 	mov	r4,fp
    50d8:	b80b883a 	mov	r5,r23
    50dc:	d8800315 	stw	r2,12(sp)
    50e0:	d8c00215 	stw	r3,8(sp)
    50e4:	000a4680 	call	a468 <__adddf3>
    50e8:	d9800017 	ldw	r6,0(sp)
    50ec:	d9c00117 	ldw	r7,4(sp)
    50f0:	1009883a 	mov	r4,r2
    50f4:	180b883a 	mov	r5,r3
    50f8:	000a4680 	call	a468 <__adddf3>
    50fc:	da800317 	ldw	r10,12(sp)
    5100:	da400217 	ldw	r9,8(sp)
    5104:	1009883a 	mov	r4,r2
    5108:	500d883a 	mov	r6,r10
    510c:	480f883a 	mov	r7,r9
    5110:	180b883a 	mov	r5,r3
    5114:	000a4680 	call	a468 <__adddf3>
    5118:	da800317 	ldw	r10,12(sp)
    511c:	da400217 	ldw	r9,8(sp)
    5120:	0009883a 	mov	r4,zero
    5124:	500d883a 	mov	r6,r10
    5128:	480f883a 	mov	r7,r9
    512c:	180b883a 	mov	r5,r3
    5130:	1827883a 	mov	r19,r3
    5134:	000be6c0 	call	be6c <__subdf3>
    5138:	d9800017 	ldw	r6,0(sp)
    513c:	d9c00117 	ldw	r7,4(sp)
    5140:	1009883a 	mov	r4,r2
    5144:	180b883a 	mov	r5,r3
    5148:	000be6c0 	call	be6c <__subdf3>
    514c:	e00d883a 	mov	r6,fp
    5150:	b80f883a 	mov	r7,r23
    5154:	1009883a 	mov	r4,r2
    5158:	180b883a 	mov	r5,r3
    515c:	000be6c0 	call	be6c <__subdf3>
    5160:	b009883a 	mov	r4,r22
    5164:	100d883a 	mov	r6,r2
    5168:	180f883a 	mov	r7,r3
    516c:	a80b883a 	mov	r5,r21
    5170:	94bfffc4 	addi	r18,r18,-1
    5174:	000be6c0 	call	be6c <__subdf3>
    5178:	9528b03a 	or	r20,r18,r20
    517c:	102f883a 	mov	r23,r2
    5180:	182d883a 	mov	r22,r3
    5184:	a001471e 	bne	r20,zero,56a4 <__ieee754_pow+0xe74>
    5188:	052ffc34 	movhi	r20,49136
    518c:	880f883a 	mov	r7,r17
    5190:	8009883a 	mov	r4,r16
    5194:	880b883a 	mov	r5,r17
    5198:	000d883a 	mov	r6,zero
    519c:	000be6c0 	call	be6c <__subdf3>
    51a0:	980f883a 	mov	r7,r19
    51a4:	000d883a 	mov	r6,zero
    51a8:	1009883a 	mov	r4,r2
    51ac:	180b883a 	mov	r5,r3
    51b0:	000b7f80 	call	b7f8 <__muldf3>
    51b4:	800d883a 	mov	r6,r16
    51b8:	880f883a 	mov	r7,r17
    51bc:	b809883a 	mov	r4,r23
    51c0:	b00b883a 	mov	r5,r22
    51c4:	102b883a 	mov	r21,r2
    51c8:	1825883a 	mov	r18,r3
    51cc:	000b7f80 	call	b7f8 <__muldf3>
    51d0:	a809883a 	mov	r4,r21
    51d4:	900b883a 	mov	r5,r18
    51d8:	100d883a 	mov	r6,r2
    51dc:	180f883a 	mov	r7,r3
    51e0:	000a4680 	call	a468 <__adddf3>
    51e4:	880f883a 	mov	r7,r17
    51e8:	980b883a 	mov	r5,r19
    51ec:	000d883a 	mov	r6,zero
    51f0:	0009883a 	mov	r4,zero
    51f4:	1027883a 	mov	r19,r2
    51f8:	182b883a 	mov	r21,r3
    51fc:	000b7f80 	call	b7f8 <__muldf3>
    5200:	a80b883a 	mov	r5,r21
    5204:	100d883a 	mov	r6,r2
    5208:	180f883a 	mov	r7,r3
    520c:	9809883a 	mov	r4,r19
    5210:	1023883a 	mov	r17,r2
    5214:	1825883a 	mov	r18,r3
    5218:	000a4680 	call	a468 <__adddf3>
    521c:	01502434 	movhi	r5,16528
    5220:	1821883a 	mov	r16,r3
    5224:	8817883a 	mov	r11,r17
    5228:	902f883a 	mov	r23,r18
    522c:	102d883a 	mov	r22,r2
    5230:	1839883a 	mov	fp,r3
    5234:	1940fe16 	blt	r3,r5,5630 <__ieee754_pow+0xe00>
    5238:	1947c83a 	sub	r3,r3,r5
    523c:	1d86b03a 	or	r3,r3,r22
    5240:	1801ab1e 	bne	r3,zero,58f0 <__ieee754_pow+0x10c0>
    5244:	01994b34 	movhi	r6,25900
    5248:	01cf25f4 	movhi	r7,15511
    524c:	31a0bf84 	addi	r6,r6,-32002
    5250:	39c551c4 	addi	r7,r7,5447
    5254:	9809883a 	mov	r4,r19
    5258:	a80b883a 	mov	r5,r21
    525c:	000a4680 	call	a468 <__adddf3>
    5260:	880d883a 	mov	r6,r17
    5264:	900f883a 	mov	r7,r18
    5268:	b009883a 	mov	r4,r22
    526c:	800b883a 	mov	r5,r16
    5270:	1039883a 	mov	fp,r2
    5274:	182f883a 	mov	r23,r3
    5278:	000be6c0 	call	be6c <__subdf3>
    527c:	100d883a 	mov	r6,r2
    5280:	180f883a 	mov	r7,r3
    5284:	e009883a 	mov	r4,fp
    5288:	b80b883a 	mov	r5,r23
    528c:	000b6280 	call	b628 <__gedf2>
    5290:	00819716 	blt	zero,r2,58f0 <__ieee754_pow+0x10c0>
    5294:	8009d53a 	srai	r4,r16,20
    5298:	2101ffcc 	andi	r4,r4,2047
    529c:	00c00434 	movhi	r3,16
    52a0:	213f0084 	addi	r4,r4,-1022
    52a4:	1909d83a 	sra	r4,r3,r4
    52a8:	00800434 	movhi	r2,16
    52ac:	10bfffc4 	addi	r2,r2,-1
    52b0:	2407883a 	add	r3,r4,r16
    52b4:	1809d53a 	srai	r4,r3,20
    52b8:	18ac703a 	and	r22,r3,r2
    52bc:	b5800434 	orhi	r22,r22,16
    52c0:	2101ffcc 	andi	r4,r4,2047
    52c4:	213f0044 	addi	r4,r4,-1023
    52c8:	110fd83a 	sra	r7,r2,r4
    52cc:	00800504 	movi	r2,20
    52d0:	1109c83a 	sub	r4,r2,r4
    52d4:	b105d83a 	sra	r2,r22,r4
    52d8:	01ce303a 	nor	r7,zero,r7
    52dc:	38ce703a 	and	r7,r7,r3
    52e0:	d8800215 	stw	r2,8(sp)
    52e4:	8000020e 	bge	r16,zero,52f0 <__ieee754_pow+0xac0>
    52e8:	0085c83a 	sub	r2,zero,r2
    52ec:	d8800215 	stw	r2,8(sp)
    52f0:	000d883a 	mov	r6,zero
    52f4:	8809883a 	mov	r4,r17
    52f8:	900b883a 	mov	r5,r18
    52fc:	000be6c0 	call	be6c <__subdf3>
    5300:	100d883a 	mov	r6,r2
    5304:	180f883a 	mov	r7,r3
    5308:	9809883a 	mov	r4,r19
    530c:	a80b883a 	mov	r5,r21
    5310:	182f883a 	mov	r23,r3
    5314:	d8800015 	stw	r2,0(sp)
    5318:	000a4680 	call	a468 <__adddf3>
    531c:	d8800217 	ldw	r2,8(sp)
    5320:	dac00017 	ldw	r11,0(sp)
    5324:	1839883a 	mov	fp,r3
    5328:	1004953a 	slli	r2,r2,20
    532c:	d8800115 	stw	r2,4(sp)
    5330:	01cff9b4 	movhi	r7,16358
    5334:	e00b883a 	mov	r5,fp
    5338:	000d883a 	mov	r6,zero
    533c:	39cb90c4 	addi	r7,r7,11843
    5340:	0009883a 	mov	r4,zero
    5344:	dac00015 	stw	r11,0(sp)
    5348:	000b7f80 	call	b7f8 <__muldf3>
    534c:	dac00017 	ldw	r11,0(sp)
    5350:	b80f883a 	mov	r7,r23
    5354:	e00b883a 	mov	r5,fp
    5358:	580d883a 	mov	r6,r11
    535c:	0009883a 	mov	r4,zero
    5360:	182f883a 	mov	r23,r3
    5364:	102d883a 	mov	r22,r2
    5368:	000be6c0 	call	be6c <__subdf3>
    536c:	9809883a 	mov	r4,r19
    5370:	a80b883a 	mov	r5,r21
    5374:	100d883a 	mov	r6,r2
    5378:	180f883a 	mov	r7,r3
    537c:	000be6c0 	call	be6c <__subdf3>
    5380:	01bfbeb4 	movhi	r6,65274
    5384:	01cff9b4 	movhi	r7,16358
    5388:	318e7bc4 	addi	r6,r6,14831
    538c:	39cb9084 	addi	r7,r7,11842
    5390:	1009883a 	mov	r4,r2
    5394:	180b883a 	mov	r5,r3
    5398:	000b7f80 	call	b7f8 <__muldf3>
    539c:	01832a34 	movhi	r6,3240
    53a0:	01ef8834 	movhi	r7,48672
    53a4:	e00b883a 	mov	r5,fp
    53a8:	319b0e44 	addi	r6,r6,27705
    53ac:	39d71844 	addi	r7,r7,23649
    53b0:	0009883a 	mov	r4,zero
    53b4:	1023883a 	mov	r17,r2
    53b8:	1821883a 	mov	r16,r3
    53bc:	000b7f80 	call	b7f8 <__muldf3>
    53c0:	8809883a 	mov	r4,r17
    53c4:	800b883a 	mov	r5,r16
    53c8:	100d883a 	mov	r6,r2
    53cc:	180f883a 	mov	r7,r3
    53d0:	000a4680 	call	a468 <__adddf3>
    53d4:	b80b883a 	mov	r5,r23
    53d8:	100d883a 	mov	r6,r2
    53dc:	180f883a 	mov	r7,r3
    53e0:	b009883a 	mov	r4,r22
    53e4:	1027883a 	mov	r19,r2
    53e8:	1825883a 	mov	r18,r3
    53ec:	000a4680 	call	a468 <__adddf3>
    53f0:	b80f883a 	mov	r7,r23
    53f4:	b00d883a 	mov	r6,r22
    53f8:	1009883a 	mov	r4,r2
    53fc:	180b883a 	mov	r5,r3
    5400:	1023883a 	mov	r17,r2
    5404:	1821883a 	mov	r16,r3
    5408:	000be6c0 	call	be6c <__subdf3>
    540c:	9809883a 	mov	r4,r19
    5410:	900b883a 	mov	r5,r18
    5414:	100d883a 	mov	r6,r2
    5418:	180f883a 	mov	r7,r3
    541c:	000be6c0 	call	be6c <__subdf3>
    5420:	880d883a 	mov	r6,r17
    5424:	800f883a 	mov	r7,r16
    5428:	8809883a 	mov	r4,r17
    542c:	800b883a 	mov	r5,r16
    5430:	1039883a 	mov	fp,r2
    5434:	182b883a 	mov	r21,r3
    5438:	000b7f80 	call	b7f8 <__muldf3>
    543c:	019caff4 	movhi	r6,29375
    5440:	01cf99b4 	movhi	r7,15974
    5444:	31a93404 	addi	r6,r6,-23344
    5448:	39cdda44 	addi	r7,r7,14185
    544c:	1009883a 	mov	r4,r2
    5450:	180b883a 	mov	r5,r3
    5454:	1027883a 	mov	r19,r2
    5458:	1825883a 	mov	r18,r3
    545c:	000b7f80 	call	b7f8 <__muldf3>
    5460:	01b174b4 	movhi	r6,50642
    5464:	01cfaf34 	movhi	r7,16060
    5468:	319afc44 	addi	r6,r6,27633
    546c:	39ef5044 	addi	r7,r7,-17087
    5470:	1009883a 	mov	r4,r2
    5474:	180b883a 	mov	r5,r3
    5478:	000be6c0 	call	be6c <__subdf3>
    547c:	980d883a 	mov	r6,r19
    5480:	900f883a 	mov	r7,r18
    5484:	1009883a 	mov	r4,r2
    5488:	180b883a 	mov	r5,r3
    548c:	000b7f80 	call	b7f8 <__muldf3>
    5490:	01abc9b4 	movhi	r6,44838
    5494:	01cfc474 	movhi	r7,16145
    5498:	31b78b04 	addi	r6,r6,-8660
    549c:	39d59a84 	addi	r7,r7,22122
    54a0:	1009883a 	mov	r4,r2
    54a4:	180b883a 	mov	r5,r3
    54a8:	000a4680 	call	a468 <__adddf3>
    54ac:	980d883a 	mov	r6,r19
    54b0:	900f883a 	mov	r7,r18
    54b4:	1009883a 	mov	r4,r2
    54b8:	180b883a 	mov	r5,r3
    54bc:	000b7f80 	call	b7f8 <__muldf3>
    54c0:	0185aff4 	movhi	r6,5823
    54c4:	01cfd9f4 	movhi	r7,16231
    54c8:	31af64c4 	addi	r6,r6,-17005
    54cc:	39f05b04 	addi	r7,r7,-16020
    54d0:	1009883a 	mov	r4,r2
    54d4:	180b883a 	mov	r5,r3
    54d8:	000be6c0 	call	be6c <__subdf3>
    54dc:	980d883a 	mov	r6,r19
    54e0:	900f883a 	mov	r7,r18
    54e4:	1009883a 	mov	r4,r2
    54e8:	180b883a 	mov	r5,r3
    54ec:	000b7f80 	call	b7f8 <__muldf3>
    54f0:	01955574 	movhi	r6,21845
    54f4:	01cff174 	movhi	r7,16325
    54f8:	31954f84 	addi	r6,r6,21822
    54fc:	39d55544 	addi	r7,r7,21845
    5500:	1009883a 	mov	r4,r2
    5504:	180b883a 	mov	r5,r3
    5508:	000a4680 	call	a468 <__adddf3>
    550c:	980d883a 	mov	r6,r19
    5510:	900f883a 	mov	r7,r18
    5514:	1009883a 	mov	r4,r2
    5518:	180b883a 	mov	r5,r3
    551c:	000b7f80 	call	b7f8 <__muldf3>
    5520:	100d883a 	mov	r6,r2
    5524:	180f883a 	mov	r7,r3
    5528:	8809883a 	mov	r4,r17
    552c:	800b883a 	mov	r5,r16
    5530:	000be6c0 	call	be6c <__subdf3>
    5534:	100d883a 	mov	r6,r2
    5538:	180f883a 	mov	r7,r3
    553c:	8809883a 	mov	r4,r17
    5540:	800b883a 	mov	r5,r16
    5544:	1027883a 	mov	r19,r2
    5548:	1825883a 	mov	r18,r3
    554c:	000b7f80 	call	b7f8 <__muldf3>
    5550:	9809883a 	mov	r4,r19
    5554:	900b883a 	mov	r5,r18
    5558:	000d883a 	mov	r6,zero
    555c:	01d00034 	movhi	r7,16384
    5560:	182f883a 	mov	r23,r3
    5564:	d8800015 	stw	r2,0(sp)
    5568:	000be6c0 	call	be6c <__subdf3>
    556c:	da400017 	ldw	r9,0(sp)
    5570:	100d883a 	mov	r6,r2
    5574:	180f883a 	mov	r7,r3
    5578:	4809883a 	mov	r4,r9
    557c:	b80b883a 	mov	r5,r23
    5580:	000ad580 	call	ad58 <__divdf3>
    5584:	e00d883a 	mov	r6,fp
    5588:	a80f883a 	mov	r7,r21
    558c:	8809883a 	mov	r4,r17
    5590:	800b883a 	mov	r5,r16
    5594:	1027883a 	mov	r19,r2
    5598:	1825883a 	mov	r18,r3
    559c:	000b7f80 	call	b7f8 <__muldf3>
    55a0:	e00d883a 	mov	r6,fp
    55a4:	a80f883a 	mov	r7,r21
    55a8:	1009883a 	mov	r4,r2
    55ac:	180b883a 	mov	r5,r3
    55b0:	000a4680 	call	a468 <__adddf3>
    55b4:	100d883a 	mov	r6,r2
    55b8:	180f883a 	mov	r7,r3
    55bc:	9809883a 	mov	r4,r19
    55c0:	900b883a 	mov	r5,r18
    55c4:	000be6c0 	call	be6c <__subdf3>
    55c8:	880d883a 	mov	r6,r17
    55cc:	800f883a 	mov	r7,r16
    55d0:	1009883a 	mov	r4,r2
    55d4:	180b883a 	mov	r5,r3
    55d8:	000be6c0 	call	be6c <__subdf3>
    55dc:	100d883a 	mov	r6,r2
    55e0:	0009883a 	mov	r4,zero
    55e4:	014ffc34 	movhi	r5,16368
    55e8:	180f883a 	mov	r7,r3
    55ec:	000be6c0 	call	be6c <__subdf3>
    55f0:	180b883a 	mov	r5,r3
    55f4:	d8c00117 	ldw	r3,4(sp)
    55f8:	1009883a 	mov	r4,r2
    55fc:	194d883a 	add	r6,r3,r5
    5600:	3007d53a 	srai	r3,r6,20
    5604:	00c0b50e 	bge	zero,r3,58dc <__ieee754_pow+0x10ac>
    5608:	300b883a 	mov	r5,r6
    560c:	000d883a 	mov	r6,zero
    5610:	a00f883a 	mov	r7,r20
    5614:	000b7f80 	call	b7f8 <__muldf3>
    5618:	102d883a 	mov	r22,r2
    561c:	003ca306 	br	48ac <__ieee754_pow+0x7c>
    5620:	88009016 	blt	r17,zero,5864 <__ieee754_pow+0x1034>
    5624:	202d883a 	mov	r22,r4
    5628:	a807883a 	mov	r3,r21
    562c:	003c9f06 	br	48ac <__ieee754_pow+0x7c>
    5630:	01200034 	movhi	r4,32768
    5634:	213fffc4 	addi	r4,r4,-1
    5638:	00902474 	movhi	r2,16529
    563c:	1908703a 	and	r4,r3,r4
    5640:	10b2ffc4 	addi	r2,r2,-13313
    5644:	1100750e 	bge	r2,r4,581c <__ieee754_pow+0xfec>
    5648:	008fdbf4 	movhi	r2,16239
    564c:	108d0004 	addi	r2,r2,13312
    5650:	1885883a 	add	r2,r3,r2
    5654:	1584b03a 	or	r2,r2,r22
    5658:	10000b1e 	bne	r2,zero,5688 <__ieee754_pow+0xe58>
    565c:	880d883a 	mov	r6,r17
    5660:	900f883a 	mov	r7,r18
    5664:	b009883a 	mov	r4,r22
    5668:	180b883a 	mov	r5,r3
    566c:	000be6c0 	call	be6c <__subdf3>
    5670:	980d883a 	mov	r6,r19
    5674:	a80f883a 	mov	r7,r21
    5678:	1009883a 	mov	r4,r2
    567c:	180b883a 	mov	r5,r3
    5680:	000b6280 	call	b628 <__gedf2>
    5684:	103f0316 	blt	r2,zero,5294 <__ieee754_pow+0xa64>
    5688:	0009883a 	mov	r4,zero
    568c:	000d883a 	mov	r6,zero
    5690:	000f883a 	mov	r7,zero
    5694:	a00b883a 	mov	r5,r20
    5698:	000b7100 	call	b710 <__ledf2>
    569c:	1008803a 	cmplt	r4,r2,zero
    56a0:	003cb906 	br	4988 <__ieee754_pow+0x158>
    56a4:	050ffc34 	movhi	r20,16368
    56a8:	003eb806 	br	518c <__ieee754_pow+0x95c>
    56ac:	000b883a 	mov	r5,zero
    56b0:	003d3906 	br	4b98 <__ieee754_pow+0x368>
    56b4:	008ffc34 	movhi	r2,16368
    56b8:	10bfff84 	addi	r2,r2,-2
    56bc:	14fcb00e 	bge	r2,r19,4980 <__ieee754_pow+0x150>
    56c0:	008ffc34 	movhi	r2,16368
    56c4:	14fcf616 	blt	r2,r19,4aa0 <__ieee754_pow+0x270>
    56c8:	000d883a 	mov	r6,zero
    56cc:	01cffc34 	movhi	r7,16368
    56d0:	180b883a 	mov	r5,r3
    56d4:	000be6c0 	call	be6c <__subdf3>
    56d8:	01cffdf4 	movhi	r7,16375
    56dc:	01980034 	movhi	r6,24576
    56e0:	39c551c4 	addi	r7,r7,5447
    56e4:	1009883a 	mov	r4,r2
    56e8:	180b883a 	mov	r5,r3
    56ec:	102b883a 	mov	r21,r2
    56f0:	1827883a 	mov	r19,r3
    56f4:	000b7f80 	call	b7f8 <__muldf3>
    56f8:	01be17b4 	movhi	r6,63582
    56fc:	01cf9574 	movhi	r7,15957
    5700:	a809883a 	mov	r4,r21
    5704:	980b883a 	mov	r5,r19
    5708:	31b7d104 	addi	r6,r6,-8380
    570c:	39eb82c4 	addi	r7,r7,-20981
    5710:	1039883a 	mov	fp,r2
    5714:	182f883a 	mov	r23,r3
    5718:	000b7f80 	call	b7f8 <__muldf3>
    571c:	a809883a 	mov	r4,r21
    5720:	980b883a 	mov	r5,r19
    5724:	000d883a 	mov	r6,zero
    5728:	01cff434 	movhi	r7,16336
    572c:	182d883a 	mov	r22,r3
    5730:	d8800215 	stw	r2,8(sp)
    5734:	000b7f80 	call	b7f8 <__muldf3>
    5738:	01155574 	movhi	r4,21845
    573c:	014ff574 	movhi	r5,16341
    5740:	100d883a 	mov	r6,r2
    5744:	180f883a 	mov	r7,r3
    5748:	21155544 	addi	r4,r4,21845
    574c:	29555544 	addi	r5,r5,21845
    5750:	000be6c0 	call	be6c <__subdf3>
    5754:	a80d883a 	mov	r6,r21
    5758:	980f883a 	mov	r7,r19
    575c:	1009883a 	mov	r4,r2
    5760:	180b883a 	mov	r5,r3
    5764:	000b7f80 	call	b7f8 <__muldf3>
    5768:	100d883a 	mov	r6,r2
    576c:	180f883a 	mov	r7,r3
    5770:	0009883a 	mov	r4,zero
    5774:	014ff834 	movhi	r5,16352
    5778:	000be6c0 	call	be6c <__subdf3>
    577c:	a80d883a 	mov	r6,r21
    5780:	980f883a 	mov	r7,r19
    5784:	a809883a 	mov	r4,r21
    5788:	980b883a 	mov	r5,r19
    578c:	d8800115 	stw	r2,4(sp)
    5790:	d8c00015 	stw	r3,0(sp)
    5794:	000b7f80 	call	b7f8 <__muldf3>
    5798:	da800117 	ldw	r10,4(sp)
    579c:	da400017 	ldw	r9,0(sp)
    57a0:	100d883a 	mov	r6,r2
    57a4:	5009883a 	mov	r4,r10
    57a8:	480b883a 	mov	r5,r9
    57ac:	180f883a 	mov	r7,r3
    57b0:	000b7f80 	call	b7f8 <__muldf3>
    57b4:	01994b34 	movhi	r6,25900
    57b8:	01cffdf4 	movhi	r7,16375
    57bc:	31a0bf84 	addi	r6,r6,-32002
    57c0:	39c551c4 	addi	r7,r7,5447
    57c4:	1009883a 	mov	r4,r2
    57c8:	180b883a 	mov	r5,r3
    57cc:	000b7f80 	call	b7f8 <__muldf3>
    57d0:	da000217 	ldw	r8,8(sp)
    57d4:	b00b883a 	mov	r5,r22
    57d8:	100d883a 	mov	r6,r2
    57dc:	4009883a 	mov	r4,r8
    57e0:	180f883a 	mov	r7,r3
    57e4:	000be6c0 	call	be6c <__subdf3>
    57e8:	100d883a 	mov	r6,r2
    57ec:	180f883a 	mov	r7,r3
    57f0:	e009883a 	mov	r4,fp
    57f4:	b80b883a 	mov	r5,r23
    57f8:	102d883a 	mov	r22,r2
    57fc:	182b883a 	mov	r21,r3
    5800:	000a4680 	call	a468 <__adddf3>
    5804:	1827883a 	mov	r19,r3
    5808:	e00d883a 	mov	r6,fp
    580c:	b80f883a 	mov	r7,r23
    5810:	0009883a 	mov	r4,zero
    5814:	180b883a 	mov	r5,r3
    5818:	003e5006 	br	515c <__ieee754_pow+0x92c>
    581c:	008ff834 	movhi	r2,16352
    5820:	11004316 	blt	r2,r4,5930 <__ieee754_pow+0x1100>
    5824:	d8000115 	stw	zero,4(sp)
    5828:	d8000215 	stw	zero,8(sp)
    582c:	003ec006 	br	5330 <__ieee754_pow+0xb00>
    5830:	0007883a 	mov	r3,zero
    5834:	003c1d06 	br	48ac <__ieee754_pow+0x7c>
    5838:	883ffd0e 	bge	r17,zero,5830 <__ieee754_pow+0x1000>
    583c:	88e0003c 	xorhi	r3,r17,32768
    5840:	003c1a06 	br	48ac <__ieee754_pow+0x7c>
    5844:	803c781e 	bne	r16,zero,4a28 <__ieee754_pow+0x1f8>
    5848:	00c00504 	movi	r3,20
    584c:	1885c83a 	sub	r2,r3,r2
    5850:	3087d83a 	sra	r3,r6,r2
    5854:	1884983a 	sll	r2,r3,r2
    5858:	11803126 	beq	r2,r6,5920 <__ieee754_pow+0x10f0>
    585c:	0025883a 	mov	r18,zero
    5860:	003c5d06 	br	49d8 <__ieee754_pow+0x1a8>
    5864:	200d883a 	mov	r6,r4
    5868:	a80f883a 	mov	r7,r21
    586c:	0009883a 	mov	r4,zero
    5870:	014ffc34 	movhi	r5,16368
    5874:	000ad580 	call	ad58 <__divdf3>
    5878:	102d883a 	mov	r22,r2
    587c:	003c0b06 	br	48ac <__ieee754_pow+0x7c>
    5880:	200d883a 	mov	r6,r4
    5884:	a80f883a 	mov	r7,r21
    5888:	a80b883a 	mov	r5,r21
    588c:	000b7f80 	call	b7f8 <__muldf3>
    5890:	102d883a 	mov	r22,r2
    5894:	003c0506 	br	48ac <__ieee754_pow+0x7c>
    5898:	94800058 	cmpnei	r18,r18,1
    589c:	903c031e 	bne	r18,zero,48ac <__ieee754_pow+0x7c>
    58a0:	18e0003c 	xorhi	r3,r3,32768
    58a4:	003c0106 	br	48ac <__ieee754_pow+0x7c>
    58a8:	008ff8f4 	movhi	r2,16355
    58ac:	10ae00c4 	addi	r2,r2,-18429
    58b0:	00d0f434 	movhi	r3,17360
    58b4:	03cf9374 	movhi	r15,15949
    58b8:	01100034 	movhi	r4,16384
    58bc:	d8800115 	stw	r2,4(sp)
    58c0:	18b40184 	addi	r2,r3,-12282
    58c4:	d9000015 	stw	r4,0(sp)
    58c8:	d8800a15 	stw	r2,40(sp)
    58cc:	7bff7ac4 	addi	r15,r15,-533
    58d0:	05c00134 	movhi	r23,4
    58d4:	034ffe34 	movhi	r13,16376
    58d8:	003cc506 	br	4bf0 <__ieee754_pow+0x3c0>
    58dc:	d9800217 	ldw	r6,8(sp)
    58e0:	0008e480 	call	8e48 <scalbn>
    58e4:	1009883a 	mov	r4,r2
    58e8:	180b883a 	mov	r5,r3
    58ec:	003f4706 	br	560c <__ieee754_pow+0xddc>
    58f0:	0009883a 	mov	r4,zero
    58f4:	000d883a 	mov	r6,zero
    58f8:	000f883a 	mov	r7,zero
    58fc:	a00b883a 	mov	r5,r20
    5900:	000b7100 	call	b710 <__ledf2>
    5904:	1008803a 	cmplt	r4,r2,zero
    5908:	003c6706 	br	4aa8 <__ieee754_pow+0x278>
    590c:	18c0004c 	andi	r3,r3,1
    5910:	04800084 	movi	r18,2
    5914:	90e5c83a 	sub	r18,r18,r3
    5918:	803c2f26 	beq	r16,zero,49d8 <__ieee754_pow+0x1a8>
    591c:	003c0906 	br	4944 <__ieee754_pow+0x114>
    5920:	18c0004c 	andi	r3,r3,1
    5924:	04800084 	movi	r18,2
    5928:	90e5c83a 	sub	r18,r18,r3
    592c:	003c2a06 	br	49d8 <__ieee754_pow+0x1a8>
    5930:	2009d53a 	srai	r4,r4,20
    5934:	003e5906 	br	529c <__ieee754_pow+0xa6c>

00005938 <__ieee754_rem_pio2>:
    5938:	deffea04 	addi	sp,sp,-88
    593c:	dc000c15 	stw	r16,48(sp)
    5940:	04200034 	movhi	r16,32768
    5944:	843fffc4 	addi	r16,r16,-1
    5948:	008ffa74 	movhi	r2,16361
    594c:	dcc00f15 	stw	r19,60(sp)
    5950:	dc800e15 	stw	r18,56(sp)
    5954:	dc400d15 	stw	r17,52(sp)
    5958:	dfc01515 	stw	ra,84(sp)
    595c:	df001415 	stw	fp,80(sp)
    5960:	ddc01315 	stw	r23,76(sp)
    5964:	dd801215 	stw	r22,72(sp)
    5968:	dd401115 	stw	r21,68(sp)
    596c:	dd001015 	stw	r20,64(sp)
    5970:	2c20703a 	and	r16,r5,r16
    5974:	10887ec4 	addi	r2,r2,8699
    5978:	2825883a 	mov	r18,r5
    597c:	2027883a 	mov	r19,r4
    5980:	3023883a 	mov	r17,r6
    5984:	14008b0e 	bge	r2,r16,5bb4 <__ieee754_rem_pio2+0x27c>
    5988:	009000f4 	movhi	r2,16387
    598c:	10b65ec4 	addi	r2,r2,-9861
    5990:	14002f16 	blt	r2,r16,5a50 <__ieee754_rem_pio2+0x118>
    5994:	01cffe74 	movhi	r7,16377
    5998:	01951034 	movhi	r6,21568
    599c:	39c87ec4 	addi	r7,r7,8699
    59a0:	01417e0e 	bge	zero,r5,5f9c <__ieee754_rem_pio2+0x664>
    59a4:	000be6c0 	call	be6c <__subdf3>
    59a8:	018ffe74 	movhi	r6,16377
    59ac:	31887ec4 	addi	r6,r6,8699
    59b0:	1009883a 	mov	r4,r2
    59b4:	180b883a 	mov	r5,r3
    59b8:	8180cb26 	beq	r16,r6,5ce8 <__ieee754_rem_pio2+0x3b0>
    59bc:	018698b4 	movhi	r6,6754
    59c0:	01cf7474 	movhi	r7,15825
    59c4:	3198cc44 	addi	r6,r6,25393
    59c8:	39ed1844 	addi	r7,r7,-19359
    59cc:	d8800315 	stw	r2,12(sp)
    59d0:	d8c00215 	stw	r3,8(sp)
    59d4:	000be6c0 	call	be6c <__subdf3>
    59d8:	d9000317 	ldw	r4,12(sp)
    59dc:	d9400217 	ldw	r5,8(sp)
    59e0:	100d883a 	mov	r6,r2
    59e4:	180f883a 	mov	r7,r3
    59e8:	88800015 	stw	r2,0(r17)
    59ec:	88c00115 	stw	r3,4(r17)
    59f0:	000be6c0 	call	be6c <__subdf3>
    59f4:	018698b4 	movhi	r6,6754
    59f8:	01cf7474 	movhi	r7,15825
    59fc:	3198cc44 	addi	r6,r6,25393
    5a00:	39ed1844 	addi	r7,r7,-19359
    5a04:	1009883a 	mov	r4,r2
    5a08:	180b883a 	mov	r5,r3
    5a0c:	000be6c0 	call	be6c <__subdf3>
    5a10:	88800215 	stw	r2,8(r17)
    5a14:	88c00315 	stw	r3,12(r17)
    5a18:	05000044 	movi	r20,1
    5a1c:	a005883a 	mov	r2,r20
    5a20:	dfc01517 	ldw	ra,84(sp)
    5a24:	df001417 	ldw	fp,80(sp)
    5a28:	ddc01317 	ldw	r23,76(sp)
    5a2c:	dd801217 	ldw	r22,72(sp)
    5a30:	dd401117 	ldw	r21,68(sp)
    5a34:	dd001017 	ldw	r20,64(sp)
    5a38:	dcc00f17 	ldw	r19,60(sp)
    5a3c:	dc800e17 	ldw	r18,56(sp)
    5a40:	dc400d17 	ldw	r17,52(sp)
    5a44:	dc000c17 	ldw	r16,48(sp)
    5a48:	dec01604 	addi	sp,sp,88
    5a4c:	f800283a 	ret
    5a50:	00904e74 	movhi	r2,16697
    5a54:	10887ec4 	addi	r2,r2,8699
    5a58:	14005c16 	blt	r2,r16,5bcc <__ieee754_rem_pio2+0x294>
    5a5c:	019b72b4 	movhi	r6,28106
    5a60:	01cff934 	movhi	r7,16356
    5a64:	31b220c4 	addi	r6,r6,-14205
    5a68:	39d7cc04 	addi	r7,r7,24368
    5a6c:	800b883a 	mov	r5,r16
    5a70:	000b7f80 	call	b7f8 <__muldf3>
    5a74:	000d883a 	mov	r6,zero
    5a78:	01cff834 	movhi	r7,16352
    5a7c:	1009883a 	mov	r4,r2
    5a80:	180b883a 	mov	r5,r3
    5a84:	000a4680 	call	a468 <__adddf3>
    5a88:	180b883a 	mov	r5,r3
    5a8c:	1009883a 	mov	r4,r2
    5a90:	000c7cc0 	call	c7cc <__fixdfsi>
    5a94:	1009883a 	mov	r4,r2
    5a98:	1029883a 	mov	r20,r2
    5a9c:	000c84c0 	call	c84c <__floatsidf>
    5aa0:	01cffe74 	movhi	r7,16377
    5aa4:	01951034 	movhi	r6,21568
    5aa8:	39c87ec4 	addi	r7,r7,8699
    5aac:	1009883a 	mov	r4,r2
    5ab0:	180b883a 	mov	r5,r3
    5ab4:	102d883a 	mov	r22,r2
    5ab8:	182b883a 	mov	r21,r3
    5abc:	000b7f80 	call	b7f8 <__muldf3>
    5ac0:	9809883a 	mov	r4,r19
    5ac4:	100d883a 	mov	r6,r2
    5ac8:	180f883a 	mov	r7,r3
    5acc:	800b883a 	mov	r5,r16
    5ad0:	000be6c0 	call	be6c <__subdf3>
    5ad4:	018698b4 	movhi	r6,6754
    5ad8:	01cf7474 	movhi	r7,15825
    5adc:	3198cc44 	addi	r6,r6,25393
    5ae0:	39ed1844 	addi	r7,r7,-19359
    5ae4:	b009883a 	mov	r4,r22
    5ae8:	a80b883a 	mov	r5,r21
    5aec:	1039883a 	mov	fp,r2
    5af0:	d8c00215 	stw	r3,8(sp)
    5af4:	000b7f80 	call	b7f8 <__muldf3>
    5af8:	db000217 	ldw	r12,8(sp)
    5afc:	e009883a 	mov	r4,fp
    5b00:	100d883a 	mov	r6,r2
    5b04:	600b883a 	mov	r5,r12
    5b08:	180f883a 	mov	r7,r3
    5b0c:	db000315 	stw	r12,12(sp)
    5b10:	102f883a 	mov	r23,r2
    5b14:	1827883a 	mov	r19,r3
    5b18:	df000415 	stw	fp,16(sp)
    5b1c:	000be6c0 	call	be6c <__subdf3>
    5b20:	a1000808 	cmpgei	r4,r20,32
    5b24:	db000317 	ldw	r12,12(sp)
    5b28:	1017883a 	mov	r11,r2
    5b2c:	1815883a 	mov	r10,r3
    5b30:	e01b883a 	mov	r13,fp
    5b34:	2000851e 	bne	r4,zero,5d4c <__ieee754_rem_pio2+0x414>
    5b38:	a00a90ba 	slli	r5,r20,2
    5b3c:	010000b4 	movhi	r4,2
    5b40:	2909883a 	add	r4,r5,r4
    5b44:	21040317 	ldw	r4,4108(r4)
    5b48:	24008026 	beq	r4,r16,5d4c <__ieee754_rem_pio2+0x414>
    5b4c:	88800015 	stw	r2,0(r17)
    5b50:	88c00115 	stw	r3,4(r17)
    5b54:	580d883a 	mov	r6,r11
    5b58:	500f883a 	mov	r7,r10
    5b5c:	6809883a 	mov	r4,r13
    5b60:	600b883a 	mov	r5,r12
    5b64:	dac00315 	stw	r11,12(sp)
    5b68:	da800215 	stw	r10,8(sp)
    5b6c:	000be6c0 	call	be6c <__subdf3>
    5b70:	b80d883a 	mov	r6,r23
    5b74:	980f883a 	mov	r7,r19
    5b78:	1009883a 	mov	r4,r2
    5b7c:	180b883a 	mov	r5,r3
    5b80:	000be6c0 	call	be6c <__subdf3>
    5b84:	88800215 	stw	r2,8(r17)
    5b88:	88c00315 	stw	r3,12(r17)
    5b8c:	903fa30e 	bge	r18,zero,5a1c <__ieee754_rem_pio2+0xe4>
    5b90:	da800217 	ldw	r10,8(sp)
    5b94:	dac00317 	ldw	r11,12(sp)
    5b98:	18e0003c 	xorhi	r3,r3,32768
    5b9c:	52a0003c 	xorhi	r10,r10,32768
    5ba0:	8ac00015 	stw	r11,0(r17)
    5ba4:	8a800115 	stw	r10,4(r17)
    5ba8:	88c00315 	stw	r3,12(r17)
    5bac:	0529c83a 	sub	r20,zero,r20
    5bb0:	003f9a06 	br	5a1c <__ieee754_rem_pio2+0xe4>
    5bb4:	89000015 	stw	r4,0(r17)
    5bb8:	89400115 	stw	r5,4(r17)
    5bbc:	30000215 	stw	zero,8(r6)
    5bc0:	30000315 	stw	zero,12(r6)
    5bc4:	0029883a 	mov	r20,zero
    5bc8:	003f9406 	br	5a1c <__ieee754_rem_pio2+0xe4>
    5bcc:	009ffc34 	movhi	r2,32752
    5bd0:	8080670e 	bge	r16,r2,5d70 <__ieee754_rem_pio2+0x438>
    5bd4:	8029d53a 	srai	r20,r16,20
    5bd8:	a53efa84 	addi	r20,r20,-1046
    5bdc:	a00a953a 	slli	r5,r20,20
    5be0:	8161c83a 	sub	r16,r16,r5
    5be4:	800b883a 	mov	r5,r16
    5be8:	000c7cc0 	call	c7cc <__fixdfsi>
    5bec:	1009883a 	mov	r4,r2
    5bf0:	000c84c0 	call	c84c <__floatsidf>
    5bf4:	9809883a 	mov	r4,r19
    5bf8:	800b883a 	mov	r5,r16
    5bfc:	100d883a 	mov	r6,r2
    5c00:	180f883a 	mov	r7,r3
    5c04:	d8800615 	stw	r2,24(sp)
    5c08:	d8c00715 	stw	r3,28(sp)
    5c0c:	000be6c0 	call	be6c <__subdf3>
    5c10:	000d883a 	mov	r6,zero
    5c14:	01d05c34 	movhi	r7,16752
    5c18:	1009883a 	mov	r4,r2
    5c1c:	180b883a 	mov	r5,r3
    5c20:	000b7f80 	call	b7f8 <__muldf3>
    5c24:	180b883a 	mov	r5,r3
    5c28:	1009883a 	mov	r4,r2
    5c2c:	1821883a 	mov	r16,r3
    5c30:	1027883a 	mov	r19,r2
    5c34:	000c7cc0 	call	c7cc <__fixdfsi>
    5c38:	1009883a 	mov	r4,r2
    5c3c:	102b883a 	mov	r21,r2
    5c40:	000c84c0 	call	c84c <__floatsidf>
    5c44:	100d883a 	mov	r6,r2
    5c48:	180f883a 	mov	r7,r3
    5c4c:	9809883a 	mov	r4,r19
    5c50:	800b883a 	mov	r5,r16
    5c54:	d8800815 	stw	r2,32(sp)
    5c58:	d8c00915 	stw	r3,36(sp)
    5c5c:	000be6c0 	call	be6c <__subdf3>
    5c60:	000d883a 	mov	r6,zero
    5c64:	01d05c34 	movhi	r7,16752
    5c68:	1009883a 	mov	r4,r2
    5c6c:	180b883a 	mov	r5,r3
    5c70:	000b7f80 	call	b7f8 <__muldf3>
    5c74:	1009883a 	mov	r4,r2
    5c78:	180b883a 	mov	r5,r3
    5c7c:	000d883a 	mov	r6,zero
    5c80:	000f883a 	mov	r7,zero
    5c84:	d8800a15 	stw	r2,40(sp)
    5c88:	d8c00b15 	stw	r3,44(sp)
    5c8c:	000b5a80 	call	b5a8 <__eqdf2>
    5c90:	1000c01e 	bne	r2,zero,5f94 <__ieee754_rem_pio2+0x65c>
    5c94:	a800bd1e 	bne	r21,zero,5f8c <__ieee754_rem_pio2+0x654>
    5c98:	01c00044 	movi	r7,1
    5c9c:	008000b4 	movhi	r2,2
    5ca0:	10842404 	addi	r2,r2,4240
    5ca4:	d8800115 	stw	r2,4(sp)
    5ca8:	00800084 	movi	r2,2
    5cac:	a00d883a 	mov	r6,r20
    5cb0:	d8800015 	stw	r2,0(sp)
    5cb4:	880b883a 	mov	r5,r17
    5cb8:	d9000604 	addi	r4,sp,24
    5cbc:	0006c980 	call	6c98 <__kernel_rem_pio2>
    5cc0:	1029883a 	mov	r20,r2
    5cc4:	903f550e 	bge	r18,zero,5a1c <__ieee754_rem_pio2+0xe4>
    5cc8:	88c00117 	ldw	r3,4(r17)
    5ccc:	88800317 	ldw	r2,12(r17)
    5cd0:	0529c83a 	sub	r20,zero,r20
    5cd4:	18e0003c 	xorhi	r3,r3,32768
    5cd8:	10a0003c 	xorhi	r2,r2,32768
    5cdc:	88c00115 	stw	r3,4(r17)
    5ce0:	88800315 	stw	r2,12(r17)
    5ce4:	003f4d06 	br	5a1c <__ieee754_rem_pio2+0xe4>
    5ce8:	01cf7474 	movhi	r7,15825
    5cec:	01869834 	movhi	r6,6752
    5cf0:	39ed1844 	addi	r7,r7,-19359
    5cf4:	000be6c0 	call	be6c <__subdf3>
    5cf8:	018b80f4 	movhi	r6,11779
    5cfc:	01cee8f4 	movhi	r7,15267
    5d00:	319c1cc4 	addi	r6,r6,28787
    5d04:	39c66284 	addi	r7,r7,6538
    5d08:	1009883a 	mov	r4,r2
    5d0c:	180b883a 	mov	r5,r3
    5d10:	1025883a 	mov	r18,r2
    5d14:	1821883a 	mov	r16,r3
    5d18:	000be6c0 	call	be6c <__subdf3>
    5d1c:	100d883a 	mov	r6,r2
    5d20:	180f883a 	mov	r7,r3
    5d24:	9009883a 	mov	r4,r18
    5d28:	800b883a 	mov	r5,r16
    5d2c:	88800015 	stw	r2,0(r17)
    5d30:	88c00115 	stw	r3,4(r17)
    5d34:	000be6c0 	call	be6c <__subdf3>
    5d38:	018b80f4 	movhi	r6,11779
    5d3c:	01cee8f4 	movhi	r7,15267
    5d40:	319c1cc4 	addi	r6,r6,28787
    5d44:	39c66284 	addi	r7,r7,6538
    5d48:	003f2e06 	br	5a04 <__ieee754_rem_pio2+0xcc>
    5d4c:	1812d53a 	srli	r9,r3,20
    5d50:	8021d53a 	srai	r16,r16,20
    5d54:	4a41ffcc 	andi	r9,r9,2047
    5d58:	8253c83a 	sub	r9,r16,r9
    5d5c:	4a400448 	cmpgei	r9,r9,17
    5d60:	48000c1e 	bne	r9,zero,5d94 <__ieee754_rem_pio2+0x45c>
    5d64:	88800015 	stw	r2,0(r17)
    5d68:	88c00115 	stw	r3,4(r17)
    5d6c:	003f7906 	br	5b54 <__ieee754_rem_pio2+0x21c>
    5d70:	200d883a 	mov	r6,r4
    5d74:	280f883a 	mov	r7,r5
    5d78:	000be6c0 	call	be6c <__subdf3>
    5d7c:	88800215 	stw	r2,8(r17)
    5d80:	88c00315 	stw	r3,12(r17)
    5d84:	88800015 	stw	r2,0(r17)
    5d88:	88c00115 	stw	r3,4(r17)
    5d8c:	0029883a 	mov	r20,zero
    5d90:	003f2206 	br	5a1c <__ieee754_rem_pio2+0xe4>
    5d94:	01cf7474 	movhi	r7,15825
    5d98:	01869834 	movhi	r6,6752
    5d9c:	39ed1844 	addi	r7,r7,-19359
    5da0:	b009883a 	mov	r4,r22
    5da4:	a80b883a 	mov	r5,r21
    5da8:	000b7f80 	call	b7f8 <__muldf3>
    5dac:	d9400217 	ldw	r5,8(sp)
    5db0:	100d883a 	mov	r6,r2
    5db4:	180f883a 	mov	r7,r3
    5db8:	e009883a 	mov	r4,fp
    5dbc:	102f883a 	mov	r23,r2
    5dc0:	1827883a 	mov	r19,r3
    5dc4:	000be6c0 	call	be6c <__subdf3>
    5dc8:	d9400217 	ldw	r5,8(sp)
    5dcc:	100d883a 	mov	r6,r2
    5dd0:	180f883a 	mov	r7,r3
    5dd4:	e009883a 	mov	r4,fp
    5dd8:	d8800315 	stw	r2,12(sp)
    5ddc:	d8c00415 	stw	r3,16(sp)
    5de0:	000be6c0 	call	be6c <__subdf3>
    5de4:	b80d883a 	mov	r6,r23
    5de8:	980f883a 	mov	r7,r19
    5dec:	1009883a 	mov	r4,r2
    5df0:	180b883a 	mov	r5,r3
    5df4:	000be6c0 	call	be6c <__subdf3>
    5df8:	018b80f4 	movhi	r6,11779
    5dfc:	01cee8f4 	movhi	r7,15267
    5e00:	319c1cc4 	addi	r6,r6,28787
    5e04:	39c66284 	addi	r7,r7,6538
    5e08:	b009883a 	mov	r4,r22
    5e0c:	a80b883a 	mov	r5,r21
    5e10:	102f883a 	mov	r23,r2
    5e14:	1827883a 	mov	r19,r3
    5e18:	000b7f80 	call	b7f8 <__muldf3>
    5e1c:	b80d883a 	mov	r6,r23
    5e20:	980f883a 	mov	r7,r19
    5e24:	1009883a 	mov	r4,r2
    5e28:	180b883a 	mov	r5,r3
    5e2c:	000be6c0 	call	be6c <__subdf3>
    5e30:	da400417 	ldw	r9,16(sp)
    5e34:	db800317 	ldw	r14,12(sp)
    5e38:	100d883a 	mov	r6,r2
    5e3c:	480b883a 	mov	r5,r9
    5e40:	7009883a 	mov	r4,r14
    5e44:	180f883a 	mov	r7,r3
    5e48:	da400215 	stw	r9,8(sp)
    5e4c:	102f883a 	mov	r23,r2
    5e50:	1827883a 	mov	r19,r3
    5e54:	000be6c0 	call	be6c <__subdf3>
    5e58:	1815883a 	mov	r10,r3
    5e5c:	1806d53a 	srli	r3,r3,20
    5e60:	da400217 	ldw	r9,8(sp)
    5e64:	db800317 	ldw	r14,12(sp)
    5e68:	18c1ffcc 	andi	r3,r3,2047
    5e6c:	80e1c83a 	sub	r16,r16,r3
    5e70:	84000c88 	cmpgei	r16,r16,50
    5e74:	1017883a 	mov	r11,r2
    5e78:	80003f26 	beq	r16,zero,5f78 <__ieee754_rem_pio2+0x640>
    5e7c:	01cee8f4 	movhi	r7,15267
    5e80:	018b8034 	movhi	r6,11776
    5e84:	39c66284 	addi	r7,r7,6538
    5e88:	b009883a 	mov	r4,r22
    5e8c:	a80b883a 	mov	r5,r21
    5e90:	da400315 	stw	r9,12(sp)
    5e94:	db800215 	stw	r14,8(sp)
    5e98:	000b7f80 	call	b7f8 <__muldf3>
    5e9c:	db800217 	ldw	r14,8(sp)
    5ea0:	da400317 	ldw	r9,12(sp)
    5ea4:	100d883a 	mov	r6,r2
    5ea8:	7009883a 	mov	r4,r14
    5eac:	480b883a 	mov	r5,r9
    5eb0:	180f883a 	mov	r7,r3
    5eb4:	1027883a 	mov	r19,r2
    5eb8:	1821883a 	mov	r16,r3
    5ebc:	db800515 	stw	r14,20(sp)
    5ec0:	da400415 	stw	r9,16(sp)
    5ec4:	000be6c0 	call	be6c <__subdf3>
    5ec8:	db800517 	ldw	r14,20(sp)
    5ecc:	da400417 	ldw	r9,16(sp)
    5ed0:	100d883a 	mov	r6,r2
    5ed4:	7009883a 	mov	r4,r14
    5ed8:	480b883a 	mov	r5,r9
    5edc:	180f883a 	mov	r7,r3
    5ee0:	d8800315 	stw	r2,12(sp)
    5ee4:	d8c00215 	stw	r3,8(sp)
    5ee8:	000be6c0 	call	be6c <__subdf3>
    5eec:	980d883a 	mov	r6,r19
    5ef0:	800f883a 	mov	r7,r16
    5ef4:	1009883a 	mov	r4,r2
    5ef8:	180b883a 	mov	r5,r3
    5efc:	000be6c0 	call	be6c <__subdf3>
    5f00:	01894834 	movhi	r6,9504
    5f04:	01ce5f34 	movhi	r7,14716
    5f08:	31927044 	addi	r6,r6,18881
    5f0c:	39e0e684 	addi	r7,r7,-31846
    5f10:	b009883a 	mov	r4,r22
    5f14:	a80b883a 	mov	r5,r21
    5f18:	1027883a 	mov	r19,r2
    5f1c:	1821883a 	mov	r16,r3
    5f20:	000b7f80 	call	b7f8 <__muldf3>
    5f24:	980d883a 	mov	r6,r19
    5f28:	800f883a 	mov	r7,r16
    5f2c:	1009883a 	mov	r4,r2
    5f30:	180b883a 	mov	r5,r3
    5f34:	000be6c0 	call	be6c <__subdf3>
    5f38:	db400317 	ldw	r13,12(sp)
    5f3c:	db000217 	ldw	r12,8(sp)
    5f40:	100d883a 	mov	r6,r2
    5f44:	6809883a 	mov	r4,r13
    5f48:	600b883a 	mov	r5,r12
    5f4c:	180f883a 	mov	r7,r3
    5f50:	102f883a 	mov	r23,r2
    5f54:	1827883a 	mov	r19,r3
    5f58:	000be6c0 	call	be6c <__subdf3>
    5f5c:	db400317 	ldw	r13,12(sp)
    5f60:	db000217 	ldw	r12,8(sp)
    5f64:	1017883a 	mov	r11,r2
    5f68:	1815883a 	mov	r10,r3
    5f6c:	88800015 	stw	r2,0(r17)
    5f70:	88c00115 	stw	r3,4(r17)
    5f74:	003ef706 	br	5b54 <__ieee754_rem_pio2+0x21c>
    5f78:	88800015 	stw	r2,0(r17)
    5f7c:	8a800115 	stw	r10,4(r17)
    5f80:	701b883a 	mov	r13,r14
    5f84:	4819883a 	mov	r12,r9
    5f88:	003ef206 	br	5b54 <__ieee754_rem_pio2+0x21c>
    5f8c:	01c00084 	movi	r7,2
    5f90:	003f4206 	br	5c9c <__ieee754_rem_pio2+0x364>
    5f94:	01c000c4 	movi	r7,3
    5f98:	003f4006 	br	5c9c <__ieee754_rem_pio2+0x364>
    5f9c:	000a4680 	call	a468 <__adddf3>
    5fa0:	010ffe74 	movhi	r4,16377
    5fa4:	21087ec4 	addi	r4,r4,8699
    5fa8:	1027883a 	mov	r19,r2
    5fac:	1825883a 	mov	r18,r3
    5fb0:	81001926 	beq	r16,r4,6018 <__ieee754_rem_pio2+0x6e0>
    5fb4:	018698b4 	movhi	r6,6754
    5fb8:	01cf7474 	movhi	r7,15825
    5fbc:	3198cc44 	addi	r6,r6,25393
    5fc0:	39ed1844 	addi	r7,r7,-19359
    5fc4:	1009883a 	mov	r4,r2
    5fc8:	180b883a 	mov	r5,r3
    5fcc:	000a4680 	call	a468 <__adddf3>
    5fd0:	100d883a 	mov	r6,r2
    5fd4:	180f883a 	mov	r7,r3
    5fd8:	9809883a 	mov	r4,r19
    5fdc:	900b883a 	mov	r5,r18
    5fe0:	88800015 	stw	r2,0(r17)
    5fe4:	88c00115 	stw	r3,4(r17)
    5fe8:	000be6c0 	call	be6c <__subdf3>
    5fec:	018698b4 	movhi	r6,6754
    5ff0:	01cf7474 	movhi	r7,15825
    5ff4:	3198cc44 	addi	r6,r6,25393
    5ff8:	39ed1844 	addi	r7,r7,-19359
    5ffc:	1009883a 	mov	r4,r2
    6000:	180b883a 	mov	r5,r3
    6004:	000a4680 	call	a468 <__adddf3>
    6008:	88800215 	stw	r2,8(r17)
    600c:	88c00315 	stw	r3,12(r17)
    6010:	053fffc4 	movi	r20,-1
    6014:	003e8106 	br	5a1c <__ieee754_rem_pio2+0xe4>
    6018:	01cf7474 	movhi	r7,15825
    601c:	01869834 	movhi	r6,6752
    6020:	39ed1844 	addi	r7,r7,-19359
    6024:	1009883a 	mov	r4,r2
    6028:	180b883a 	mov	r5,r3
    602c:	000a4680 	call	a468 <__adddf3>
    6030:	018b80f4 	movhi	r6,11779
    6034:	01cee8f4 	movhi	r7,15267
    6038:	319c1cc4 	addi	r6,r6,28787
    603c:	39c66284 	addi	r7,r7,6538
    6040:	1009883a 	mov	r4,r2
    6044:	180b883a 	mov	r5,r3
    6048:	1025883a 	mov	r18,r2
    604c:	1821883a 	mov	r16,r3
    6050:	000a4680 	call	a468 <__adddf3>
    6054:	100d883a 	mov	r6,r2
    6058:	180f883a 	mov	r7,r3
    605c:	9009883a 	mov	r4,r18
    6060:	800b883a 	mov	r5,r16
    6064:	88800015 	stw	r2,0(r17)
    6068:	88c00115 	stw	r3,4(r17)
    606c:	000be6c0 	call	be6c <__subdf3>
    6070:	018b80f4 	movhi	r6,11779
    6074:	01cee8f4 	movhi	r7,15267
    6078:	319c1cc4 	addi	r6,r6,28787
    607c:	39c66284 	addi	r7,r7,6538
    6080:	003fde06 	br	5ffc <__ieee754_rem_pio2+0x6c4>

00006084 <__ieee754_sqrt>:
    6084:	defffd04 	addi	sp,sp,-12
    6088:	dc400115 	stw	r17,4(sp)
    608c:	dc000015 	stw	r16,0(sp)
    6090:	dfc00215 	stw	ra,8(sp)
    6094:	28dffc2c 	andhi	r3,r5,32752
    6098:	009ffc34 	movhi	r2,32752
    609c:	2821883a 	mov	r16,r5
    60a0:	2023883a 	mov	r17,r4
    60a4:	18807726 	beq	r3,r2,6284 <__ieee754_sqrt+0x200>
    60a8:	2011883a 	mov	r8,r4
    60ac:	01403a0e 	bge	zero,r5,6198 <__ieee754_sqrt+0x114>
    60b0:	2807d53a 	srai	r3,r5,20
    60b4:	18004626 	beq	r3,zero,61d0 <__ieee754_sqrt+0x14c>
    60b8:	00800434 	movhi	r2,16
    60bc:	1aff0044 	addi	r11,r3,-1023
    60c0:	10bfffc4 	addi	r2,r2,-1
    60c4:	8084703a 	and	r2,r16,r2
    60c8:	5900004c 	andi	r4,r11,1
    60cc:	10c00434 	orhi	r3,r2,16
    60d0:	20000426 	beq	r4,zero,60e4 <__ieee754_sqrt+0x60>
    60d4:	4004d7fa 	srli	r2,r8,31
    60d8:	18c7883a 	add	r3,r3,r3
    60dc:	4211883a 	add	r8,r8,r8
    60e0:	10c7883a 	add	r3,r2,r3
    60e4:	4004d7fa 	srli	r2,r8,31
    60e8:	5817d07a 	srai	r11,r11,1
    60ec:	18c7883a 	add	r3,r3,r3
    60f0:	1887883a 	add	r3,r3,r2
    60f4:	4209883a 	add	r4,r8,r8
    60f8:	01c00584 	movi	r7,22
    60fc:	0019883a 	mov	r12,zero
    6100:	000b883a 	mov	r5,zero
    6104:	00800834 	movhi	r2,32
    6108:	288d883a 	add	r6,r5,r2
    610c:	2010d7fa 	srli	r8,r4,31
    6110:	39ffffc4 	addi	r7,r7,-1
    6114:	19800316 	blt	r3,r6,6124 <__ieee754_sqrt+0xa0>
    6118:	1987c83a 	sub	r3,r3,r6
    611c:	308b883a 	add	r5,r6,r2
    6120:	6099883a 	add	r12,r12,r2
    6124:	18c7883a 	add	r3,r3,r3
    6128:	1004d07a 	srli	r2,r2,1
    612c:	40c7883a 	add	r3,r8,r3
    6130:	2109883a 	add	r4,r4,r4
    6134:	383ff41e 	bne	r7,zero,6108 <__ieee754_sqrt+0x84>
    6138:	0013883a 	mov	r9,zero
    613c:	00800804 	movi	r2,32
    6140:	01a00034 	movhi	r6,32768
    6144:	00000806 	br	6168 <__ieee754_sqrt+0xe4>
    6148:	19403326 	beq	r3,r5,6218 <__ieee754_sqrt+0x194>
    614c:	2010d7fa 	srli	r8,r4,31
    6150:	18c7883a 	add	r3,r3,r3
    6154:	10bfffc4 	addi	r2,r2,-1
    6158:	300cd07a 	srli	r6,r6,1
    615c:	1a07883a 	add	r3,r3,r8
    6160:	2109883a 	add	r4,r4,r4
    6164:	10003226 	beq	r2,zero,6230 <__ieee754_sqrt+0x1ac>
    6168:	31d1883a 	add	r8,r6,r7
    616c:	28fff60e 	bge	r5,r3,6148 <__ieee754_sqrt+0xc4>
    6170:	418f883a 	add	r7,r8,r6
    6174:	40002516 	blt	r8,zero,620c <__ieee754_sqrt+0x188>
    6178:	2815883a 	mov	r10,r5
    617c:	1947c83a 	sub	r3,r3,r5
    6180:	2200012e 	bgeu	r4,r8,6188 <__ieee754_sqrt+0x104>
    6184:	18ffffc4 	addi	r3,r3,-1
    6188:	2209c83a 	sub	r4,r4,r8
    618c:	4993883a 	add	r9,r9,r6
    6190:	500b883a 	mov	r5,r10
    6194:	003fed06 	br	614c <__ieee754_sqrt+0xc8>
    6198:	00a00034 	movhi	r2,32768
    619c:	10bfffc4 	addi	r2,r2,-1
    61a0:	2884703a 	and	r2,r5,r2
    61a4:	1104b03a 	or	r2,r2,r4
    61a8:	10004826 	beq	r2,zero,62cc <__ieee754_sqrt+0x248>
    61ac:	28003e1e 	bne	r5,zero,62a8 <__ieee754_sqrt+0x224>
    61b0:	0007883a 	mov	r3,zero
    61b4:	4004d2fa 	srli	r2,r8,11
    61b8:	18fffac4 	addi	r3,r3,-21
    61bc:	4010957a 	slli	r8,r8,21
    61c0:	1021883a 	mov	r16,r2
    61c4:	103ffb26 	beq	r2,zero,61b4 <__ieee754_sqrt+0x130>
    61c8:	1100042c 	andhi	r4,r2,16
    61cc:	2000441e 	bne	r4,zero,62e0 <__ieee754_sqrt+0x25c>
    61d0:	0005883a 	mov	r2,zero
    61d4:	8421883a 	add	r16,r16,r16
    61d8:	8140042c 	andhi	r5,r16,16
    61dc:	1009883a 	mov	r4,r2
    61e0:	10800044 	addi	r2,r2,1
    61e4:	283ffb26 	beq	r5,zero,61d4 <__ieee754_sqrt+0x150>
    61e8:	01800804 	movi	r6,32
    61ec:	400b883a 	mov	r5,r8
    61f0:	308dc83a 	sub	r6,r6,r2
    61f4:	4090983a 	sll	r8,r8,r2
    61f8:	8005883a 	mov	r2,r16
    61fc:	298ed83a 	srl	r7,r5,r6
    6200:	1907c83a 	sub	r3,r3,r4
    6204:	38a0b03a 	or	r16,r7,r2
    6208:	003fab06 	br	60b8 <__ieee754_sqrt+0x34>
    620c:	383fda16 	blt	r7,zero,6178 <__ieee754_sqrt+0xf4>
    6210:	2a800044 	addi	r10,r5,1
    6214:	003fd906 	br	617c <__ieee754_sqrt+0xf8>
    6218:	223fcc36 	bltu	r4,r8,614c <__ieee754_sqrt+0xc8>
    621c:	418f883a 	add	r7,r8,r6
    6220:	403ffa16 	blt	r8,zero,620c <__ieee754_sqrt+0x188>
    6224:	1815883a 	mov	r10,r3
    6228:	0007883a 	mov	r3,zero
    622c:	003fd606 	br	6188 <__ieee754_sqrt+0x104>
    6230:	1906b03a 	or	r3,r3,r4
    6234:	18000e1e 	bne	r3,zero,6270 <__ieee754_sqrt+0x1ec>
    6238:	4804d07a 	srli	r2,r9,1
    623c:	6007d07a 	srai	r3,r12,1
    6240:	01cff834 	movhi	r7,16352
    6244:	6300004c 	andi	r12,r12,1
    6248:	19cf883a 	add	r7,r3,r7
    624c:	60000126 	beq	r12,zero,6254 <__ieee754_sqrt+0x1d0>
    6250:	10a00034 	orhi	r2,r2,32768
    6254:	5806953a 	slli	r3,r11,20
    6258:	19c7883a 	add	r3,r3,r7
    625c:	dfc00217 	ldw	ra,8(sp)
    6260:	dc400117 	ldw	r17,4(sp)
    6264:	dc000017 	ldw	r16,0(sp)
    6268:	dec00304 	addi	sp,sp,12
    626c:	f800283a 	ret
    6270:	48ffffd8 	cmpnei	r3,r9,-1
    6274:	18001826 	beq	r3,zero,62d8 <__ieee754_sqrt+0x254>
    6278:	48800044 	addi	r2,r9,1
    627c:	1004d07a 	srli	r2,r2,1
    6280:	003fee06 	br	623c <__ieee754_sqrt+0x1b8>
    6284:	200d883a 	mov	r6,r4
    6288:	280f883a 	mov	r7,r5
    628c:	000b7f80 	call	b7f8 <__muldf3>
    6290:	880d883a 	mov	r6,r17
    6294:	800f883a 	mov	r7,r16
    6298:	1009883a 	mov	r4,r2
    629c:	180b883a 	mov	r5,r3
    62a0:	000a4680 	call	a468 <__adddf3>
    62a4:	003fed06 	br	625c <__ieee754_sqrt+0x1d8>
    62a8:	200d883a 	mov	r6,r4
    62ac:	280f883a 	mov	r7,r5
    62b0:	000be6c0 	call	be6c <__subdf3>
    62b4:	100d883a 	mov	r6,r2
    62b8:	180f883a 	mov	r7,r3
    62bc:	1009883a 	mov	r4,r2
    62c0:	180b883a 	mov	r5,r3
    62c4:	000ad580 	call	ad58 <__divdf3>
    62c8:	003fe406 	br	625c <__ieee754_sqrt+0x1d8>
    62cc:	2005883a 	mov	r2,r4
    62d0:	2807883a 	mov	r3,r5
    62d4:	003fe106 	br	625c <__ieee754_sqrt+0x1d8>
    62d8:	63000044 	addi	r12,r12,1
    62dc:	003fd706 	br	623c <__ieee754_sqrt+0x1b8>
    62e0:	400b883a 	mov	r5,r8
    62e4:	01800804 	movi	r6,32
    62e8:	013fffc4 	movi	r4,-1
    62ec:	003fc306 	br	61fc <__ieee754_sqrt+0x178>

000062f0 <__ieee754_rem_pio2f>:
    62f0:	defff104 	addi	sp,sp,-60
    62f4:	dc000515 	stw	r16,20(sp)
    62f8:	04200034 	movhi	r16,32768
    62fc:	843fffc4 	addi	r16,r16,-1
    6300:	008fd274 	movhi	r2,16201
    6304:	dc400615 	stw	r17,24(sp)
    6308:	dfc00e15 	stw	ra,56(sp)
    630c:	df000d15 	stw	fp,52(sp)
    6310:	ddc00c15 	stw	r23,48(sp)
    6314:	dd800b15 	stw	r22,44(sp)
    6318:	dd400a15 	stw	r21,40(sp)
    631c:	dd000915 	stw	r20,36(sp)
    6320:	dcc00815 	stw	r19,32(sp)
    6324:	dc800715 	stw	r18,28(sp)
    6328:	8120703a 	and	r16,r16,r4
    632c:	1083f604 	addi	r2,r2,4056
    6330:	2823883a 	mov	r17,r5
    6334:	1400620e 	bge	r2,r16,64c0 <__ieee754_rem_pio2f+0x1d0>
    6338:	009005f4 	movhi	r2,16407
    633c:	10b2f8c4 	addi	r2,r2,-13341
    6340:	2025883a 	mov	r18,r4
    6344:	14002516 	blt	r2,r16,63dc <__ieee754_rem_pio2f+0xec>
    6348:	00bffc04 	movi	r2,-16
    634c:	014ff274 	movhi	r5,16329
    6350:	80a0703a 	and	r16,r16,r2
    6354:	2943e004 	addi	r5,r5,3968
    6358:	0100fd0e 	bge	zero,r4,6750 <__ieee754_rem_pio2f+0x460>
    635c:	0009d440 	call	9d44 <__subsf3>
    6360:	1025883a 	mov	r18,r2
    6364:	008ff274 	movhi	r2,16329
    6368:	1083f404 	addi	r2,r2,4048
    636c:	014dcd74 	movhi	r5,14133
    6370:	80809226 	beq	r16,r2,65bc <__ieee754_rem_pio2f+0x2cc>
    6374:	295110c4 	addi	r5,r5,17475
    6378:	9009883a 	mov	r4,r18
    637c:	0009d440 	call	9d44 <__subsf3>
    6380:	100b883a 	mov	r5,r2
    6384:	9009883a 	mov	r4,r18
    6388:	88800015 	stw	r2,0(r17)
    638c:	0009d440 	call	9d44 <__subsf3>
    6390:	014dcd74 	movhi	r5,14133
    6394:	295110c4 	addi	r5,r5,17475
    6398:	1009883a 	mov	r4,r2
    639c:	0009d440 	call	9d44 <__subsf3>
    63a0:	88800115 	stw	r2,4(r17)
    63a4:	05c00044 	movi	r23,1
    63a8:	b805883a 	mov	r2,r23
    63ac:	dfc00e17 	ldw	ra,56(sp)
    63b0:	df000d17 	ldw	fp,52(sp)
    63b4:	ddc00c17 	ldw	r23,48(sp)
    63b8:	dd800b17 	ldw	r22,44(sp)
    63bc:	dd400a17 	ldw	r21,40(sp)
    63c0:	dd000917 	ldw	r20,36(sp)
    63c4:	dcc00817 	ldw	r19,32(sp)
    63c8:	dc800717 	ldw	r18,28(sp)
    63cc:	dc400617 	ldw	r17,24(sp)
    63d0:	dc000517 	ldw	r16,20(sp)
    63d4:	dec00f04 	addi	sp,sp,60
    63d8:	f800283a 	ret
    63dc:	0090d274 	movhi	r2,17225
    63e0:	1083e004 	addi	r2,r2,3968
    63e4:	14003a16 	blt	r2,r16,64d0 <__ieee754_rem_pio2f+0x1e0>
    63e8:	014fc8f4 	movhi	r5,16163
    63ec:	297e6104 	addi	r5,r5,-1660
    63f0:	8009883a 	mov	r4,r16
    63f4:	00099900 	call	9990 <__mulsf3>
    63f8:	014fc034 	movhi	r5,16128
    63fc:	1009883a 	mov	r4,r2
    6400:	00093fc0 	call	93fc <__addsf3>
    6404:	1009883a 	mov	r4,r2
    6408:	000a1d80 	call	a1d8 <__fixsfsi>
    640c:	1009883a 	mov	r4,r2
    6410:	102f883a 	mov	r23,r2
    6414:	000a2480 	call	a248 <__floatsisf>
    6418:	014ff274 	movhi	r5,16329
    641c:	2943e004 	addi	r5,r5,3968
    6420:	1009883a 	mov	r4,r2
    6424:	102b883a 	mov	r21,r2
    6428:	00099900 	call	9990 <__mulsf3>
    642c:	100b883a 	mov	r5,r2
    6430:	8009883a 	mov	r4,r16
    6434:	0009d440 	call	9d44 <__subsf3>
    6438:	014dcd74 	movhi	r5,14133
    643c:	295110c4 	addi	r5,r5,17475
    6440:	a809883a 	mov	r4,r21
    6444:	1029883a 	mov	r20,r2
    6448:	00099900 	call	9990 <__mulsf3>
    644c:	a009883a 	mov	r4,r20
    6450:	100b883a 	mov	r5,r2
    6454:	1027883a 	mov	r19,r2
    6458:	0009d440 	call	9d44 <__subsf3>
    645c:	b8c00808 	cmpgei	r3,r23,32
    6460:	a009883a 	mov	r4,r20
    6464:	102d883a 	mov	r22,r2
    6468:	1800671e 	bne	r3,zero,6608 <__ieee754_rem_pio2f+0x318>
    646c:	b80a90ba 	slli	r5,r23,2
    6470:	00c000b4 	movhi	r3,2
    6474:	28c7883a 	add	r3,r5,r3
    6478:	19446517 	ldw	r5,4500(r3)
    647c:	00ffc004 	movi	r3,-256
    6480:	80c6703a 	and	r3,r16,r3
    6484:	19406026 	beq	r3,r5,6608 <__ieee754_rem_pio2f+0x318>
    6488:	88800015 	stw	r2,0(r17)
    648c:	b00b883a 	mov	r5,r22
    6490:	0009d440 	call	9d44 <__subsf3>
    6494:	980b883a 	mov	r5,r19
    6498:	1009883a 	mov	r4,r2
    649c:	0009d440 	call	9d44 <__subsf3>
    64a0:	88800115 	stw	r2,4(r17)
    64a4:	903fc00e 	bge	r18,zero,63a8 <__ieee754_rem_pio2f+0xb8>
    64a8:	b5a0003c 	xorhi	r22,r22,32768
    64ac:	10e0003c 	xorhi	r3,r2,32768
    64b0:	8d800015 	stw	r22,0(r17)
    64b4:	88c00115 	stw	r3,4(r17)
    64b8:	05efc83a 	sub	r23,zero,r23
    64bc:	003fba06 	br	63a8 <__ieee754_rem_pio2f+0xb8>
    64c0:	89000015 	stw	r4,0(r17)
    64c4:	28000115 	stw	zero,4(r5)
    64c8:	002f883a 	mov	r23,zero
    64cc:	003fb606 	br	63a8 <__ieee754_rem_pio2f+0xb8>
    64d0:	009fe034 	movhi	r2,32640
    64d4:	8080910e 	bge	r16,r2,671c <__ieee754_rem_pio2f+0x42c>
    64d8:	8027d5fa 	srai	r19,r16,23
    64dc:	9cffde84 	addi	r19,r19,-134
    64e0:	980495fa 	slli	r2,r19,23
    64e4:	80a1c83a 	sub	r16,r16,r2
    64e8:	8009883a 	mov	r4,r16
    64ec:	000a1d80 	call	a1d8 <__fixsfsi>
    64f0:	1009883a 	mov	r4,r2
    64f4:	000a2480 	call	a248 <__floatsisf>
    64f8:	8009883a 	mov	r4,r16
    64fc:	100b883a 	mov	r5,r2
    6500:	d8800215 	stw	r2,8(sp)
    6504:	0009d440 	call	9d44 <__subsf3>
    6508:	0150e034 	movhi	r5,17280
    650c:	1009883a 	mov	r4,r2
    6510:	00099900 	call	9990 <__mulsf3>
    6514:	1009883a 	mov	r4,r2
    6518:	1029883a 	mov	r20,r2
    651c:	000a1d80 	call	a1d8 <__fixsfsi>
    6520:	1009883a 	mov	r4,r2
    6524:	000a2480 	call	a248 <__floatsisf>
    6528:	100b883a 	mov	r5,r2
    652c:	a009883a 	mov	r4,r20
    6530:	1021883a 	mov	r16,r2
    6534:	d8800315 	stw	r2,12(sp)
    6538:	0009d440 	call	9d44 <__subsf3>
    653c:	0150e034 	movhi	r5,17280
    6540:	1009883a 	mov	r4,r2
    6544:	00099900 	call	9990 <__mulsf3>
    6548:	000b883a 	mov	r5,zero
    654c:	1009883a 	mov	r4,r2
    6550:	d8800415 	stw	r2,16(sp)
    6554:	00098680 	call	9868 <__eqsf2>
    6558:	10007b1e 	bne	r2,zero,6748 <__ieee754_rem_pio2f+0x458>
    655c:	000b883a 	mov	r5,zero
    6560:	8009883a 	mov	r4,r16
    6564:	00098680 	call	9868 <__eqsf2>
    6568:	1000751e 	bne	r2,zero,6740 <__ieee754_rem_pio2f+0x450>
    656c:	01c00044 	movi	r7,1
    6570:	008000b4 	movhi	r2,2
    6574:	10848604 	addi	r2,r2,4632
    6578:	d8800115 	stw	r2,4(sp)
    657c:	00800084 	movi	r2,2
    6580:	d8800015 	stw	r2,0(sp)
    6584:	980d883a 	mov	r6,r19
    6588:	880b883a 	mov	r5,r17
    658c:	d9000204 	addi	r4,sp,8
    6590:	0007f300 	call	7f30 <__kernel_rem_pio2f>
    6594:	102f883a 	mov	r23,r2
    6598:	903f830e 	bge	r18,zero,63a8 <__ieee754_rem_pio2f+0xb8>
    659c:	88c00017 	ldw	r3,0(r17)
    65a0:	88800117 	ldw	r2,4(r17)
    65a4:	05efc83a 	sub	r23,zero,r23
    65a8:	18e0003c 	xorhi	r3,r3,32768
    65ac:	10a0003c 	xorhi	r2,r2,32768
    65b0:	88c00015 	stw	r3,0(r17)
    65b4:	88800115 	stw	r2,4(r17)
    65b8:	003f7b06 	br	63a8 <__ieee754_rem_pio2f+0xb8>
    65bc:	29510004 	addi	r5,r5,17408
    65c0:	9009883a 	mov	r4,r18
    65c4:	0009d440 	call	9d44 <__subsf3>
    65c8:	014ba1b4 	movhi	r5,11910
    65cc:	2968c204 	addi	r5,r5,-23800
    65d0:	1009883a 	mov	r4,r2
    65d4:	1021883a 	mov	r16,r2
    65d8:	0009d440 	call	9d44 <__subsf3>
    65dc:	100b883a 	mov	r5,r2
    65e0:	8009883a 	mov	r4,r16
    65e4:	88800015 	stw	r2,0(r17)
    65e8:	0009d440 	call	9d44 <__subsf3>
    65ec:	014ba1b4 	movhi	r5,11910
    65f0:	2968c204 	addi	r5,r5,-23800
    65f4:	1009883a 	mov	r4,r2
    65f8:	0009d440 	call	9d44 <__subsf3>
    65fc:	88800115 	stw	r2,4(r17)
    6600:	05c00044 	movi	r23,1
    6604:	003f6806 	br	63a8 <__ieee754_rem_pio2f+0xb8>
    6608:	1006d5fa 	srli	r3,r2,23
    660c:	8021d5fa 	srai	r16,r16,23
    6610:	18c03fcc 	andi	r3,r3,255
    6614:	80c7c83a 	sub	r3,r16,r3
    6618:	18c00248 	cmpgei	r3,r3,9
    661c:	183f9a26 	beq	r3,zero,6488 <__ieee754_rem_pio2f+0x198>
    6620:	014dcd74 	movhi	r5,14133
    6624:	29510004 	addi	r5,r5,17408
    6628:	a809883a 	mov	r4,r21
    662c:	00099900 	call	9990 <__mulsf3>
    6630:	100b883a 	mov	r5,r2
    6634:	a009883a 	mov	r4,r20
    6638:	1027883a 	mov	r19,r2
    663c:	0009d440 	call	9d44 <__subsf3>
    6640:	100b883a 	mov	r5,r2
    6644:	a009883a 	mov	r4,r20
    6648:	1039883a 	mov	fp,r2
    664c:	0009d440 	call	9d44 <__subsf3>
    6650:	980b883a 	mov	r5,r19
    6654:	1009883a 	mov	r4,r2
    6658:	0009d440 	call	9d44 <__subsf3>
    665c:	014ba1b4 	movhi	r5,11910
    6660:	2968c204 	addi	r5,r5,-23800
    6664:	a809883a 	mov	r4,r21
    6668:	1027883a 	mov	r19,r2
    666c:	00099900 	call	9990 <__mulsf3>
    6670:	980b883a 	mov	r5,r19
    6674:	1009883a 	mov	r4,r2
    6678:	0009d440 	call	9d44 <__subsf3>
    667c:	100b883a 	mov	r5,r2
    6680:	e009883a 	mov	r4,fp
    6684:	1027883a 	mov	r19,r2
    6688:	0009d440 	call	9d44 <__subsf3>
    668c:	1006d5fa 	srli	r3,r2,23
    6690:	102d883a 	mov	r22,r2
    6694:	18c03fcc 	andi	r3,r3,255
    6698:	80e1c83a 	sub	r16,r16,r3
    669c:	84000688 	cmpgei	r16,r16,26
    66a0:	80002426 	beq	r16,zero,6734 <__ieee754_rem_pio2f+0x444>
    66a4:	014ba1b4 	movhi	r5,11910
    66a8:	2968c004 	addi	r5,r5,-23808
    66ac:	a809883a 	mov	r4,r21
    66b0:	00099900 	call	9990 <__mulsf3>
    66b4:	100b883a 	mov	r5,r2
    66b8:	e009883a 	mov	r4,fp
    66bc:	1027883a 	mov	r19,r2
    66c0:	0009d440 	call	9d44 <__subsf3>
    66c4:	100b883a 	mov	r5,r2
    66c8:	e009883a 	mov	r4,fp
    66cc:	1021883a 	mov	r16,r2
    66d0:	0009d440 	call	9d44 <__subsf3>
    66d4:	980b883a 	mov	r5,r19
    66d8:	1009883a 	mov	r4,r2
    66dc:	0009d440 	call	9d44 <__subsf3>
    66e0:	01492374 	movhi	r5,9357
    66e4:	294c4c84 	addi	r5,r5,12594
    66e8:	a809883a 	mov	r4,r21
    66ec:	1027883a 	mov	r19,r2
    66f0:	00099900 	call	9990 <__mulsf3>
    66f4:	980b883a 	mov	r5,r19
    66f8:	1009883a 	mov	r4,r2
    66fc:	0009d440 	call	9d44 <__subsf3>
    6700:	8009883a 	mov	r4,r16
    6704:	100b883a 	mov	r5,r2
    6708:	1027883a 	mov	r19,r2
    670c:	0009d440 	call	9d44 <__subsf3>
    6710:	8009883a 	mov	r4,r16
    6714:	102d883a 	mov	r22,r2
    6718:	003f5b06 	br	6488 <__ieee754_rem_pio2f+0x198>
    671c:	200b883a 	mov	r5,r4
    6720:	0009d440 	call	9d44 <__subsf3>
    6724:	88800115 	stw	r2,4(r17)
    6728:	88800015 	stw	r2,0(r17)
    672c:	002f883a 	mov	r23,zero
    6730:	003f1d06 	br	63a8 <__ieee754_rem_pio2f+0xb8>
    6734:	88800015 	stw	r2,0(r17)
    6738:	e009883a 	mov	r4,fp
    673c:	003f5306 	br	648c <__ieee754_rem_pio2f+0x19c>
    6740:	01c00084 	movi	r7,2
    6744:	003f8a06 	br	6570 <__ieee754_rem_pio2f+0x280>
    6748:	01c000c4 	movi	r7,3
    674c:	003f8806 	br	6570 <__ieee754_rem_pio2f+0x280>
    6750:	00093fc0 	call	93fc <__addsf3>
    6754:	1025883a 	mov	r18,r2
    6758:	008ff274 	movhi	r2,16329
    675c:	1083f404 	addi	r2,r2,4048
    6760:	014dcd74 	movhi	r5,14133
    6764:	80800e26 	beq	r16,r2,67a0 <__ieee754_rem_pio2f+0x4b0>
    6768:	295110c4 	addi	r5,r5,17475
    676c:	9009883a 	mov	r4,r18
    6770:	00093fc0 	call	93fc <__addsf3>
    6774:	100b883a 	mov	r5,r2
    6778:	9009883a 	mov	r4,r18
    677c:	88800015 	stw	r2,0(r17)
    6780:	0009d440 	call	9d44 <__subsf3>
    6784:	014dcd74 	movhi	r5,14133
    6788:	295110c4 	addi	r5,r5,17475
    678c:	1009883a 	mov	r4,r2
    6790:	00093fc0 	call	93fc <__addsf3>
    6794:	88800115 	stw	r2,4(r17)
    6798:	05ffffc4 	movi	r23,-1
    679c:	003f0206 	br	63a8 <__ieee754_rem_pio2f+0xb8>
    67a0:	29510004 	addi	r5,r5,17408
    67a4:	9009883a 	mov	r4,r18
    67a8:	00093fc0 	call	93fc <__addsf3>
    67ac:	014ba1b4 	movhi	r5,11910
    67b0:	2968c204 	addi	r5,r5,-23800
    67b4:	1009883a 	mov	r4,r2
    67b8:	1021883a 	mov	r16,r2
    67bc:	00093fc0 	call	93fc <__addsf3>
    67c0:	100b883a 	mov	r5,r2
    67c4:	8009883a 	mov	r4,r16
    67c8:	88800015 	stw	r2,0(r17)
    67cc:	0009d440 	call	9d44 <__subsf3>
    67d0:	014ba1b4 	movhi	r5,11910
    67d4:	2968c204 	addi	r5,r5,-23800
    67d8:	1009883a 	mov	r4,r2
    67dc:	00093fc0 	call	93fc <__addsf3>
    67e0:	88800115 	stw	r2,4(r17)
    67e4:	05ffffc4 	movi	r23,-1
    67e8:	003eef06 	br	63a8 <__ieee754_rem_pio2f+0xb8>

000067ec <__kernel_cos>:
    67ec:	defff204 	addi	sp,sp,-56
    67f0:	dc000415 	stw	r16,16(sp)
    67f4:	04200034 	movhi	r16,32768
    67f8:	843fffc4 	addi	r16,r16,-1
    67fc:	df000c15 	stw	fp,48(sp)
    6800:	ddc00b15 	stw	r23,44(sp)
    6804:	dd800a15 	stw	r22,40(sp)
    6808:	dd400915 	stw	r21,36(sp)
    680c:	dc800615 	stw	r18,24(sp)
    6810:	dfc00d15 	stw	ra,52(sp)
    6814:	dd000815 	stw	r20,32(sp)
    6818:	dcc00715 	stw	r19,28(sp)
    681c:	dc400515 	stw	r17,20(sp)
    6820:	2c24703a 	and	r18,r5,r16
    6824:	008f9034 	movhi	r2,15936
    6828:	2839883a 	mov	fp,r5
    682c:	202b883a 	mov	r21,r4
    6830:	302d883a 	mov	r22,r6
    6834:	382f883a 	mov	r23,r7
    6838:	9080750e 	bge	r18,r2,6a10 <__kernel_cos+0x224>
    683c:	000c7cc0 	call	c7cc <__fixdfsi>
    6840:	10011226 	beq	r2,zero,6c8c <__kernel_cos+0x4a0>
    6844:	a80d883a 	mov	r6,r21
    6848:	e00f883a 	mov	r7,fp
    684c:	a809883a 	mov	r4,r21
    6850:	e00b883a 	mov	r5,fp
    6854:	000b7f80 	call	b7f8 <__muldf3>
    6858:	01afa234 	movhi	r6,48776
    685c:	01ef6a74 	movhi	r7,48553
    6860:	318e3504 	addi	r6,r6,14548
    6864:	39feba44 	addi	r7,r7,-1303
    6868:	1009883a 	mov	r4,r2
    686c:	180b883a 	mov	r5,r3
    6870:	1023883a 	mov	r17,r2
    6874:	1821883a 	mov	r16,r3
    6878:	000b7f80 	call	b7f8 <__muldf3>
    687c:	01af6d74 	movhi	r6,48565
    6880:	01cf88b4 	movhi	r7,15906
    6884:	31ac7104 	addi	r6,r6,-20028
    6888:	39fba784 	addi	r7,r7,-4450
    688c:	1009883a 	mov	r4,r2
    6890:	180b883a 	mov	r5,r3
    6894:	000a4680 	call	a468 <__adddf3>
    6898:	880d883a 	mov	r6,r17
    689c:	800f883a 	mov	r7,r16
    68a0:	1009883a 	mov	r4,r2
    68a4:	180b883a 	mov	r5,r3
    68a8:	000b7f80 	call	b7f8 <__muldf3>
    68ac:	01a02734 	movhi	r6,32924
    68b0:	01cfa4b4 	movhi	r7,16018
    68b4:	3194ab44 	addi	r6,r6,21165
    68b8:	39df93c4 	addi	r7,r7,32335
    68bc:	1009883a 	mov	r4,r2
    68c0:	180b883a 	mov	r5,r3
    68c4:	000be6c0 	call	be6c <__subdf3>
    68c8:	880d883a 	mov	r6,r17
    68cc:	800f883a 	mov	r7,r16
    68d0:	1009883a 	mov	r4,r2
    68d4:	180b883a 	mov	r5,r3
    68d8:	000b7f80 	call	b7f8 <__muldf3>
    68dc:	018672f4 	movhi	r6,6603
    68e0:	01cfbeb4 	movhi	r7,16122
    68e4:	31856404 	addi	r6,r6,5520
    68e8:	39c06804 	addi	r7,r7,416
    68ec:	1009883a 	mov	r4,r2
    68f0:	180b883a 	mov	r5,r3
    68f4:	000a4680 	call	a468 <__adddf3>
    68f8:	880d883a 	mov	r6,r17
    68fc:	800f883a 	mov	r7,r16
    6900:	1009883a 	mov	r4,r2
    6904:	180b883a 	mov	r5,r3
    6908:	000b7f80 	call	b7f8 <__muldf3>
    690c:	0185b074 	movhi	r6,5825
    6910:	01cfd5f4 	movhi	r7,16215
    6914:	31945dc4 	addi	r6,r6,20855
    6918:	39f05b04 	addi	r7,r7,-16020
    691c:	1009883a 	mov	r4,r2
    6920:	180b883a 	mov	r5,r3
    6924:	000be6c0 	call	be6c <__subdf3>
    6928:	880d883a 	mov	r6,r17
    692c:	800f883a 	mov	r7,r16
    6930:	1009883a 	mov	r4,r2
    6934:	180b883a 	mov	r5,r3
    6938:	000b7f80 	call	b7f8 <__muldf3>
    693c:	01955574 	movhi	r6,21845
    6940:	01cfe974 	movhi	r7,16293
    6944:	31955304 	addi	r6,r6,21836
    6948:	39d55544 	addi	r7,r7,21845
    694c:	1009883a 	mov	r4,r2
    6950:	180b883a 	mov	r5,r3
    6954:	000a4680 	call	a468 <__adddf3>
    6958:	880d883a 	mov	r6,r17
    695c:	800f883a 	mov	r7,r16
    6960:	1009883a 	mov	r4,r2
    6964:	180b883a 	mov	r5,r3
    6968:	000b7f80 	call	b7f8 <__muldf3>
    696c:	1017883a 	mov	r11,r2
    6970:	1815883a 	mov	r10,r3
    6974:	8809883a 	mov	r4,r17
    6978:	800b883a 	mov	r5,r16
    697c:	000d883a 	mov	r6,zero
    6980:	01cff834 	movhi	r7,16352
    6984:	da800115 	stw	r10,4(sp)
    6988:	dac00015 	stw	r11,0(sp)
    698c:	000b7f80 	call	b7f8 <__muldf3>
    6990:	dac00017 	ldw	r11,0(sp)
    6994:	da800117 	ldw	r10,4(sp)
    6998:	8809883a 	mov	r4,r17
    699c:	580d883a 	mov	r6,r11
    69a0:	500f883a 	mov	r7,r10
    69a4:	800b883a 	mov	r5,r16
    69a8:	1023883a 	mov	r17,r2
    69ac:	1821883a 	mov	r16,r3
    69b0:	000b7f80 	call	b7f8 <__muldf3>
    69b4:	b00d883a 	mov	r6,r22
    69b8:	b80f883a 	mov	r7,r23
    69bc:	a809883a 	mov	r4,r21
    69c0:	e00b883a 	mov	r5,fp
    69c4:	1027883a 	mov	r19,r2
    69c8:	1825883a 	mov	r18,r3
    69cc:	000b7f80 	call	b7f8 <__muldf3>
    69d0:	9809883a 	mov	r4,r19
    69d4:	900b883a 	mov	r5,r18
    69d8:	100d883a 	mov	r6,r2
    69dc:	180f883a 	mov	r7,r3
    69e0:	000be6c0 	call	be6c <__subdf3>
    69e4:	8809883a 	mov	r4,r17
    69e8:	800b883a 	mov	r5,r16
    69ec:	100d883a 	mov	r6,r2
    69f0:	180f883a 	mov	r7,r3
    69f4:	000be6c0 	call	be6c <__subdf3>
    69f8:	100d883a 	mov	r6,r2
    69fc:	180f883a 	mov	r7,r3
    6a00:	0009883a 	mov	r4,zero
    6a04:	014ffc34 	movhi	r5,16368
    6a08:	000be6c0 	call	be6c <__subdf3>
    6a0c:	00008f06 	br	6c4c <__kernel_cos+0x460>
    6a10:	200d883a 	mov	r6,r4
    6a14:	280f883a 	mov	r7,r5
    6a18:	000b7f80 	call	b7f8 <__muldf3>
    6a1c:	01afa234 	movhi	r6,48776
    6a20:	01ef6a74 	movhi	r7,48553
    6a24:	318e3504 	addi	r6,r6,14548
    6a28:	39feba44 	addi	r7,r7,-1303
    6a2c:	1009883a 	mov	r4,r2
    6a30:	180b883a 	mov	r5,r3
    6a34:	1029883a 	mov	r20,r2
    6a38:	1827883a 	mov	r19,r3
    6a3c:	000b7f80 	call	b7f8 <__muldf3>
    6a40:	01af6d74 	movhi	r6,48565
    6a44:	01cf88b4 	movhi	r7,15906
    6a48:	31ac7104 	addi	r6,r6,-20028
    6a4c:	39fba784 	addi	r7,r7,-4450
    6a50:	1009883a 	mov	r4,r2
    6a54:	180b883a 	mov	r5,r3
    6a58:	000a4680 	call	a468 <__adddf3>
    6a5c:	a00d883a 	mov	r6,r20
    6a60:	980f883a 	mov	r7,r19
    6a64:	1009883a 	mov	r4,r2
    6a68:	180b883a 	mov	r5,r3
    6a6c:	000b7f80 	call	b7f8 <__muldf3>
    6a70:	01a02734 	movhi	r6,32924
    6a74:	01cfa4b4 	movhi	r7,16018
    6a78:	3194ab44 	addi	r6,r6,21165
    6a7c:	39df93c4 	addi	r7,r7,32335
    6a80:	1009883a 	mov	r4,r2
    6a84:	180b883a 	mov	r5,r3
    6a88:	000be6c0 	call	be6c <__subdf3>
    6a8c:	a00d883a 	mov	r6,r20
    6a90:	980f883a 	mov	r7,r19
    6a94:	1009883a 	mov	r4,r2
    6a98:	180b883a 	mov	r5,r3
    6a9c:	000b7f80 	call	b7f8 <__muldf3>
    6aa0:	018672f4 	movhi	r6,6603
    6aa4:	01cfbeb4 	movhi	r7,16122
    6aa8:	31856404 	addi	r6,r6,5520
    6aac:	39c06804 	addi	r7,r7,416
    6ab0:	1009883a 	mov	r4,r2
    6ab4:	180b883a 	mov	r5,r3
    6ab8:	000a4680 	call	a468 <__adddf3>
    6abc:	a00d883a 	mov	r6,r20
    6ac0:	980f883a 	mov	r7,r19
    6ac4:	1009883a 	mov	r4,r2
    6ac8:	180b883a 	mov	r5,r3
    6acc:	000b7f80 	call	b7f8 <__muldf3>
    6ad0:	0185b074 	movhi	r6,5825
    6ad4:	01cfd5f4 	movhi	r7,16215
    6ad8:	31945dc4 	addi	r6,r6,20855
    6adc:	39f05b04 	addi	r7,r7,-16020
    6ae0:	1009883a 	mov	r4,r2
    6ae4:	180b883a 	mov	r5,r3
    6ae8:	000be6c0 	call	be6c <__subdf3>
    6aec:	a00d883a 	mov	r6,r20
    6af0:	980f883a 	mov	r7,r19
    6af4:	1009883a 	mov	r4,r2
    6af8:	180b883a 	mov	r5,r3
    6afc:	000b7f80 	call	b7f8 <__muldf3>
    6b00:	01955574 	movhi	r6,21845
    6b04:	01cfe974 	movhi	r7,16293
    6b08:	31955304 	addi	r6,r6,21836
    6b0c:	39d55544 	addi	r7,r7,21845
    6b10:	1009883a 	mov	r4,r2
    6b14:	180b883a 	mov	r5,r3
    6b18:	000a4680 	call	a468 <__adddf3>
    6b1c:	1009883a 	mov	r4,r2
    6b20:	a00d883a 	mov	r6,r20
    6b24:	980f883a 	mov	r7,r19
    6b28:	180b883a 	mov	r5,r3
    6b2c:	000b7f80 	call	b7f8 <__muldf3>
    6b30:	010ff4f4 	movhi	r4,16339
    6b34:	210ccc84 	addi	r4,r4,13106
    6b38:	1013883a 	mov	r9,r2
    6b3c:	1811883a 	mov	r8,r3
    6b40:	a023883a 	mov	r17,r20
    6b44:	9821883a 	mov	r16,r19
    6b48:	1017883a 	mov	r11,r2
    6b4c:	1815883a 	mov	r10,r3
    6b50:	24bf880e 	bge	r4,r18,6974 <__kernel_cos+0x188>
    6b54:	008ffa74 	movhi	r2,16361
    6b58:	14804816 	blt	r2,r18,6c7c <__kernel_cos+0x490>
    6b5c:	043ff834 	movhi	r16,65504
    6b60:	9421883a 	add	r16,r18,r16
    6b64:	000d883a 	mov	r6,zero
    6b68:	800f883a 	mov	r7,r16
    6b6c:	0009883a 	mov	r4,zero
    6b70:	014ffc34 	movhi	r5,16368
    6b74:	da400015 	stw	r9,0(sp)
    6b78:	d8c00115 	stw	r3,4(sp)
    6b7c:	000be6c0 	call	be6c <__subdf3>
    6b80:	da400017 	ldw	r9,0(sp)
    6b84:	da000117 	ldw	r8,4(sp)
    6b88:	1017883a 	mov	r11,r2
    6b8c:	1815883a 	mov	r10,r3
    6b90:	980b883a 	mov	r5,r19
    6b94:	000d883a 	mov	r6,zero
    6b98:	01cff834 	movhi	r7,16352
    6b9c:	a009883a 	mov	r4,r20
    6ba0:	da800115 	stw	r10,4(sp)
    6ba4:	dac00015 	stw	r11,0(sp)
    6ba8:	da000315 	stw	r8,12(sp)
    6bac:	da400215 	stw	r9,8(sp)
    6bb0:	000b7f80 	call	b7f8 <__muldf3>
    6bb4:	800f883a 	mov	r7,r16
    6bb8:	000d883a 	mov	r6,zero
    6bbc:	1009883a 	mov	r4,r2
    6bc0:	180b883a 	mov	r5,r3
    6bc4:	000be6c0 	call	be6c <__subdf3>
    6bc8:	da400217 	ldw	r9,8(sp)
    6bcc:	da000317 	ldw	r8,12(sp)
    6bd0:	980b883a 	mov	r5,r19
    6bd4:	480d883a 	mov	r6,r9
    6bd8:	400f883a 	mov	r7,r8
    6bdc:	a009883a 	mov	r4,r20
    6be0:	1023883a 	mov	r17,r2
    6be4:	1821883a 	mov	r16,r3
    6be8:	000b7f80 	call	b7f8 <__muldf3>
    6bec:	b00d883a 	mov	r6,r22
    6bf0:	b80f883a 	mov	r7,r23
    6bf4:	a809883a 	mov	r4,r21
    6bf8:	e00b883a 	mov	r5,fp
    6bfc:	1027883a 	mov	r19,r2
    6c00:	1825883a 	mov	r18,r3
    6c04:	000b7f80 	call	b7f8 <__muldf3>
    6c08:	100d883a 	mov	r6,r2
    6c0c:	180f883a 	mov	r7,r3
    6c10:	9809883a 	mov	r4,r19
    6c14:	900b883a 	mov	r5,r18
    6c18:	000be6c0 	call	be6c <__subdf3>
    6c1c:	100d883a 	mov	r6,r2
    6c20:	180f883a 	mov	r7,r3
    6c24:	8809883a 	mov	r4,r17
    6c28:	800b883a 	mov	r5,r16
    6c2c:	000be6c0 	call	be6c <__subdf3>
    6c30:	dac00017 	ldw	r11,0(sp)
    6c34:	da800117 	ldw	r10,4(sp)
    6c38:	100d883a 	mov	r6,r2
    6c3c:	180f883a 	mov	r7,r3
    6c40:	5809883a 	mov	r4,r11
    6c44:	500b883a 	mov	r5,r10
    6c48:	000be6c0 	call	be6c <__subdf3>
    6c4c:	dfc00d17 	ldw	ra,52(sp)
    6c50:	df000c17 	ldw	fp,48(sp)
    6c54:	ddc00b17 	ldw	r23,44(sp)
    6c58:	dd800a17 	ldw	r22,40(sp)
    6c5c:	dd400917 	ldw	r21,36(sp)
    6c60:	dd000817 	ldw	r20,32(sp)
    6c64:	dcc00717 	ldw	r19,28(sp)
    6c68:	dc800617 	ldw	r18,24(sp)
    6c6c:	dc400517 	ldw	r17,20(sp)
    6c70:	dc000417 	ldw	r16,16(sp)
    6c74:	dec00e04 	addi	sp,sp,56
    6c78:	f800283a 	ret
    6c7c:	0017883a 	mov	r11,zero
    6c80:	028ff9f4 	movhi	r10,16359
    6c84:	040ff4b4 	movhi	r16,16338
    6c88:	003fc106 	br	6b90 <__kernel_cos+0x3a4>
    6c8c:	0005883a 	mov	r2,zero
    6c90:	00cffc34 	movhi	r3,16368
    6c94:	003fed06 	br	6c4c <__kernel_cos+0x460>

00006c98 <__kernel_rem_pio2>:
    6c98:	deff5f04 	addi	sp,sp,-644
    6c9c:	d880a117 	ldw	r2,644(sp)
    6ca0:	dc009715 	stw	r16,604(sp)
    6ca4:	dfc0a015 	stw	ra,640(sp)
    6ca8:	100690ba 	slli	r3,r2,2
    6cac:	008000b4 	movhi	r2,2
    6cb0:	df009f15 	stw	fp,636(sp)
    6cb4:	1885883a 	add	r2,r3,r2
    6cb8:	10855c17 	ldw	r2,5488(r2)
    6cbc:	ddc09e15 	stw	r23,632(sp)
    6cc0:	dd809d15 	stw	r22,628(sp)
    6cc4:	d8800515 	stw	r2,20(sp)
    6cc8:	38bfffc4 	addi	r2,r7,-1
    6ccc:	dd409c15 	stw	r21,624(sp)
    6cd0:	dd009b15 	stw	r20,620(sp)
    6cd4:	dcc09a15 	stw	r19,616(sp)
    6cd8:	dc809915 	stw	r18,612(sp)
    6cdc:	dc409815 	stw	r17,608(sp)
    6ce0:	d9c00715 	stw	r7,28(sp)
    6ce4:	30fffb10 	cmplti	r3,r6,-20
    6ce8:	d9000215 	stw	r4,8(sp)
    6cec:	d9400915 	stw	r5,36(sp)
    6cf0:	d8800115 	stw	r2,4(sp)
    6cf4:	3021883a 	mov	r16,r6
    6cf8:	18028a1e 	bne	r3,zero,7724 <__kernel_rem_pio2+0xa8c>
    6cfc:	01400604 	movi	r5,24
    6d00:	313fff44 	addi	r4,r6,-3
    6d04:	00092480 	call	9248 <__divsi3>
    6d08:	10c00044 	addi	r3,r2,1
    6d0c:	18fffa24 	muli	r3,r3,-24
    6d10:	d8800615 	stw	r2,24(sp)
    6d14:	d9000117 	ldw	r4,4(sp)
    6d18:	80c7883a 	add	r3,r16,r3
    6d1c:	d8800517 	ldw	r2,20(sp)
    6d20:	d8c00315 	stw	r3,12(sp)
    6d24:	d8c00617 	ldw	r3,24(sp)
    6d28:	1105883a 	add	r2,r2,r4
    6d2c:	1925c83a 	sub	r18,r3,r4
    6d30:	10000f16 	blt	r2,zero,6d70 <__kernel_rem_pio2+0xd8>
    6d34:	902290ba 	slli	r17,r18,2
    6d38:	d8c0a217 	ldw	r3,648(sp)
    6d3c:	10800044 	addi	r2,r2,1
    6d40:	dc001f04 	addi	r16,sp,124
    6d44:	1c63883a 	add	r17,r3,r17
    6d48:	14a7883a 	add	r19,r2,r18
    6d4c:	90016016 	blt	r18,zero,72d0 <__kernel_rem_pio2+0x638>
    6d50:	89000017 	ldw	r4,0(r17)
    6d54:	000c84c0 	call	c84c <__floatsidf>
    6d58:	80800015 	stw	r2,0(r16)
    6d5c:	80c00115 	stw	r3,4(r16)
    6d60:	94800044 	addi	r18,r18,1
    6d64:	84000204 	addi	r16,r16,8
    6d68:	8c400104 	addi	r17,r17,4
    6d6c:	94fff71e 	bne	r18,r19,6d4c <__kernel_rem_pio2+0xb4>
    6d70:	d8800517 	ldw	r2,20(sp)
    6d74:	10002516 	blt	r2,zero,6e0c <__kernel_rem_pio2+0x174>
    6d78:	dcc00117 	ldw	r19,4(sp)
    6d7c:	d8c01f04 	addi	r3,sp,124
    6d80:	dc406f04 	addi	r17,sp,444
    6d84:	982490fa 	slli	r18,r19,3
    6d88:	94000204 	addi	r16,r18,8
    6d8c:	1ca5883a 	add	r18,r3,r18
    6d90:	d8c00717 	ldw	r3,28(sp)
    6d94:	10ef883a 	add	r23,r2,r3
    6d98:	d8800217 	ldw	r2,8(sp)
    6d9c:	80a1883a 	add	r16,r16,r2
    6da0:	d8800117 	ldw	r2,4(sp)
    6da4:	10015f16 	blt	r2,zero,7324 <__kernel_rem_pio2+0x68c>
    6da8:	dd000217 	ldw	r20,8(sp)
    6dac:	902d883a 	mov	r22,r18
    6db0:	0039883a 	mov	fp,zero
    6db4:	002b883a 	mov	r21,zero
    6db8:	b1800017 	ldw	r6,0(r22)
    6dbc:	b1c00117 	ldw	r7,4(r22)
    6dc0:	a1000017 	ldw	r4,0(r20)
    6dc4:	a1400117 	ldw	r5,4(r20)
    6dc8:	a5000204 	addi	r20,r20,8
    6dcc:	b5bffe04 	addi	r22,r22,-8
    6dd0:	000b7f80 	call	b7f8 <__muldf3>
    6dd4:	e009883a 	mov	r4,fp
    6dd8:	a80b883a 	mov	r5,r21
    6ddc:	100d883a 	mov	r6,r2
    6de0:	180f883a 	mov	r7,r3
    6de4:	000a4680 	call	a468 <__adddf3>
    6de8:	1039883a 	mov	fp,r2
    6dec:	182b883a 	mov	r21,r3
    6df0:	a43ff11e 	bne	r20,r16,6db8 <__kernel_rem_pio2+0x120>
    6df4:	8f000015 	stw	fp,0(r17)
    6df8:	8d400115 	stw	r21,4(r17)
    6dfc:	9cc00044 	addi	r19,r19,1
    6e00:	8c400204 	addi	r17,r17,8
    6e04:	94800204 	addi	r18,r18,8
    6e08:	9dffe51e 	bne	r19,r23,6da0 <__kernel_rem_pio2+0x108>
    6e0c:	dc400517 	ldw	r17,20(sp)
    6e10:	d8c00717 	ldw	r3,28(sp)
    6e14:	d9000217 	ldw	r4,8(sp)
    6e18:	88bfffc4 	addi	r2,r17,-1
    6e1c:	180690fa 	slli	r3,r3,3
    6e20:	883890ba 	slli	fp,r17,2
    6e24:	100490ba 	slli	r2,r2,2
    6e28:	243ffe04 	addi	r16,r4,-8
    6e2c:	80e1883a 	add	r16,r16,r3
    6e30:	e1000b04 	addi	r4,fp,44
    6e34:	10808c04 	addi	r2,r2,560
    6e38:	d8c00b04 	addi	r3,sp,44
    6e3c:	26c9883a 	add	r4,r4,sp
    6e40:	10c5883a 	add	r2,r2,r3
    6e44:	d9000415 	stw	r4,16(sp)
    6e48:	d8800815 	stw	r2,32(sp)
    6e4c:	883890fa 	slli	fp,r17,3
    6e50:	d8c00b04 	addi	r3,sp,44
    6e54:	e0808c04 	addi	r2,fp,560
    6e58:	10c5883a 	add	r2,r2,r3
    6e5c:	157fd817 	ldw	r21,-160(r2)
    6e60:	153fd917 	ldw	r20,-156(r2)
    6e64:	0440280e 	bge	zero,r17,6f08 <__kernel_rem_pio2+0x270>
    6e68:	d8806f04 	addi	r2,sp,444
    6e6c:	1725883a 	add	r18,r2,fp
    6e70:	1827883a 	mov	r19,r3
    6e74:	000d883a 	mov	r6,zero
    6e78:	01cf9c34 	movhi	r7,15984
    6e7c:	a809883a 	mov	r4,r21
    6e80:	a00b883a 	mov	r5,r20
    6e84:	000b7f80 	call	b7f8 <__muldf3>
    6e88:	180b883a 	mov	r5,r3
    6e8c:	1009883a 	mov	r4,r2
    6e90:	000c7cc0 	call	c7cc <__fixdfsi>
    6e94:	1009883a 	mov	r4,r2
    6e98:	000c84c0 	call	c84c <__floatsidf>
    6e9c:	000d883a 	mov	r6,zero
    6ea0:	01d05c34 	movhi	r7,16752
    6ea4:	1009883a 	mov	r4,r2
    6ea8:	180b883a 	mov	r5,r3
    6eac:	102f883a 	mov	r23,r2
    6eb0:	182d883a 	mov	r22,r3
    6eb4:	000b7f80 	call	b7f8 <__muldf3>
    6eb8:	100d883a 	mov	r6,r2
    6ebc:	180f883a 	mov	r7,r3
    6ec0:	a809883a 	mov	r4,r21
    6ec4:	a00b883a 	mov	r5,r20
    6ec8:	000be6c0 	call	be6c <__subdf3>
    6ecc:	180b883a 	mov	r5,r3
    6ed0:	1009883a 	mov	r4,r2
    6ed4:	000c7cc0 	call	c7cc <__fixdfsi>
    6ed8:	91bffe17 	ldw	r6,-8(r18)
    6edc:	91ffff17 	ldw	r7,-4(r18)
    6ee0:	98800015 	stw	r2,0(r19)
    6ee4:	b809883a 	mov	r4,r23
    6ee8:	b00b883a 	mov	r5,r22
    6eec:	000a4680 	call	a468 <__adddf3>
    6ef0:	102b883a 	mov	r21,r2
    6ef4:	94bffe04 	addi	r18,r18,-8
    6ef8:	d8806f04 	addi	r2,sp,444
    6efc:	1829883a 	mov	r20,r3
    6f00:	9cc00104 	addi	r19,r19,4
    6f04:	14bfdb1e 	bne	r2,r18,6e74 <__kernel_rem_pio2+0x1dc>
    6f08:	dd800317 	ldw	r22,12(sp)
    6f0c:	a809883a 	mov	r4,r21
    6f10:	a00b883a 	mov	r5,r20
    6f14:	b00d883a 	mov	r6,r22
    6f18:	0008e480 	call	8e48 <scalbn>
    6f1c:	000d883a 	mov	r6,zero
    6f20:	01cff034 	movhi	r7,16320
    6f24:	1009883a 	mov	r4,r2
    6f28:	180b883a 	mov	r5,r3
    6f2c:	1029883a 	mov	r20,r2
    6f30:	1827883a 	mov	r19,r3
    6f34:	000b7f80 	call	b7f8 <__muldf3>
    6f38:	1009883a 	mov	r4,r2
    6f3c:	180b883a 	mov	r5,r3
    6f40:	0003a340 	call	3a34 <floor>
    6f44:	000d883a 	mov	r6,zero
    6f48:	01d00834 	movhi	r7,16416
    6f4c:	1009883a 	mov	r4,r2
    6f50:	180b883a 	mov	r5,r3
    6f54:	000b7f80 	call	b7f8 <__muldf3>
    6f58:	100d883a 	mov	r6,r2
    6f5c:	180f883a 	mov	r7,r3
    6f60:	a009883a 	mov	r4,r20
    6f64:	980b883a 	mov	r5,r19
    6f68:	000be6c0 	call	be6c <__subdf3>
    6f6c:	180b883a 	mov	r5,r3
    6f70:	1009883a 	mov	r4,r2
    6f74:	1827883a 	mov	r19,r3
    6f78:	102b883a 	mov	r21,r2
    6f7c:	000c7cc0 	call	c7cc <__fixdfsi>
    6f80:	1009883a 	mov	r4,r2
    6f84:	1029883a 	mov	r20,r2
    6f88:	000c84c0 	call	c84c <__floatsidf>
    6f8c:	980b883a 	mov	r5,r19
    6f90:	100d883a 	mov	r6,r2
    6f94:	180f883a 	mov	r7,r3
    6f98:	a809883a 	mov	r4,r21
    6f9c:	000be6c0 	call	be6c <__subdf3>
    6fa0:	1025883a 	mov	r18,r2
    6fa4:	1027883a 	mov	r19,r2
    6fa8:	1813883a 	mov	r9,r3
    6fac:	0580670e 	bge	zero,r22,714c <__kernel_rem_pio2+0x4b4>
    6fb0:	88bfffc4 	addi	r2,r17,-1
    6fb4:	100490ba 	slli	r2,r2,2
    6fb8:	d9400b04 	addi	r5,sp,44
    6fbc:	01000604 	movi	r4,24
    6fc0:	10808c04 	addi	r2,r2,560
    6fc4:	1145883a 	add	r2,r2,r5
    6fc8:	117f7417 	ldw	r5,-560(r2)
    6fcc:	2589c83a 	sub	r4,r4,r22
    6fd0:	054005c4 	movi	r21,23
    6fd4:	290dd83a 	sra	r6,r5,r4
    6fd8:	adabc83a 	sub	r21,r21,r22
    6fdc:	3108983a 	sll	r4,r6,r4
    6fe0:	a1a9883a 	add	r20,r20,r6
    6fe4:	2909c83a 	sub	r4,r5,r4
    6fe8:	256bd83a 	sra	r21,r4,r21
    6fec:	113f7415 	stw	r4,-560(r2)
    6ff0:	05406016 	blt	zero,r21,7174 <__kernel_rem_pio2+0x4dc>
    6ff4:	480b883a 	mov	r5,r9
    6ff8:	000d883a 	mov	r6,zero
    6ffc:	000f883a 	mov	r7,zero
    7000:	9809883a 	mov	r4,r19
    7004:	da400015 	stw	r9,0(sp)
    7008:	000b5a80 	call	b5a8 <__eqdf2>
    700c:	da400017 	ldw	r9,0(sp)
    7010:	1001d21e 	bne	r2,zero,775c <__kernel_rem_pio2+0xac4>
    7014:	d8800517 	ldw	r2,20(sp)
    7018:	8cffffc4 	addi	r19,r17,-1
    701c:	98800a16 	blt	r19,r2,7048 <__kernel_rem_pio2+0x3b0>
    7020:	880490ba 	slli	r2,r17,2
    7024:	d9400417 	ldw	r5,16(sp)
    7028:	0007883a 	mov	r3,zero
    702c:	10800b04 	addi	r2,r2,44
    7030:	16c5883a 	add	r2,r2,sp
    7034:	113fff17 	ldw	r4,-4(r2)
    7038:	10bfff04 	addi	r2,r2,-4
    703c:	1906b03a 	or	r3,r3,r4
    7040:	117ffc1e 	bne	r2,r5,7034 <__kernel_rem_pio2+0x39c>
    7044:	1800ba1e 	bne	r3,zero,7330 <__kernel_rem_pio2+0x698>
    7048:	d8800817 	ldw	r2,32(sp)
    704c:	10bf7417 	ldw	r2,-560(r2)
    7050:	1000b11e 	bne	r2,zero,7318 <__kernel_rem_pio2+0x680>
    7054:	d8800417 	ldw	r2,16(sp)
    7058:	05000044 	movi	r20,1
    705c:	10fffe17 	ldw	r3,-8(r2)
    7060:	a5000044 	addi	r20,r20,1
    7064:	10bfff04 	addi	r2,r2,-4
    7068:	183ffc26 	beq	r3,zero,705c <__kernel_rem_pio2+0x3c4>
    706c:	8d05883a 	add	r2,r17,r20
    7070:	8d400044 	addi	r21,r17,1
    7074:	d8800015 	stw	r2,0(sp)
    7078:	d8800617 	ldw	r2,24(sp)
    707c:	88a7883a 	add	r19,r17,r2
    7080:	d8800717 	ldw	r2,28(sp)
    7084:	982690ba 	slli	r19,r19,2
    7088:	1463883a 	add	r17,r2,r17
    708c:	d880a217 	ldw	r2,648(sp)
    7090:	882290fa 	slli	r17,r17,3
    7094:	14e7883a 	add	r19,r2,r19
    7098:	d8801f04 	addi	r2,sp,124
    709c:	1463883a 	add	r17,r2,r17
    70a0:	d8806f04 	addi	r2,sp,444
    70a4:	1725883a 	add	r18,r2,fp
    70a8:	99000117 	ldw	r4,4(r19)
    70ac:	000c84c0 	call	c84c <__floatsidf>
    70b0:	1009883a 	mov	r4,r2
    70b4:	88800015 	stw	r2,0(r17)
    70b8:	d8800117 	ldw	r2,4(sp)
    70bc:	88c00115 	stw	r3,4(r17)
    70c0:	180b883a 	mov	r5,r3
    70c4:	10001e16 	blt	r2,zero,7140 <__kernel_rem_pio2+0x4a8>
    70c8:	dd000217 	ldw	r20,8(sp)
    70cc:	882f883a 	mov	r23,r17
    70d0:	002d883a 	mov	r22,zero
    70d4:	0039883a 	mov	fp,zero
    70d8:	00000306 	br	70e8 <__kernel_rem_pio2+0x450>
    70dc:	b9000017 	ldw	r4,0(r23)
    70e0:	b9400117 	ldw	r5,4(r23)
    70e4:	a5000204 	addi	r20,r20,8
    70e8:	a1800017 	ldw	r6,0(r20)
    70ec:	a1c00117 	ldw	r7,4(r20)
    70f0:	bdfffe04 	addi	r23,r23,-8
    70f4:	000b7f80 	call	b7f8 <__muldf3>
    70f8:	b009883a 	mov	r4,r22
    70fc:	e00b883a 	mov	r5,fp
    7100:	100d883a 	mov	r6,r2
    7104:	180f883a 	mov	r7,r3
    7108:	000a4680 	call	a468 <__adddf3>
    710c:	102d883a 	mov	r22,r2
    7110:	1839883a 	mov	fp,r3
    7114:	a43ff11e 	bne	r20,r16,70dc <__kernel_rem_pio2+0x444>
    7118:	d8800017 	ldw	r2,0(sp)
    711c:	95800215 	stw	r22,8(r18)
    7120:	97000315 	stw	fp,12(r18)
    7124:	ad400044 	addi	r21,r21,1
    7128:	9cc00104 	addi	r19,r19,4
    712c:	8c400204 	addi	r17,r17,8
    7130:	94800204 	addi	r18,r18,8
    7134:	157fdc0e 	bge	r2,r21,70a8 <__kernel_rem_pio2+0x410>
    7138:	1023883a 	mov	r17,r2
    713c:	003f4306 	br	6e4c <__kernel_rem_pio2+0x1b4>
    7140:	002d883a 	mov	r22,zero
    7144:	0039883a 	mov	fp,zero
    7148:	003ff306 	br	7118 <__kernel_rem_pio2+0x480>
    714c:	d8800317 	ldw	r2,12(sp)
    7150:	1000651e 	bne	r2,zero,72e8 <__kernel_rem_pio2+0x650>
    7154:	88bfffc4 	addi	r2,r17,-1
    7158:	100490ba 	slli	r2,r2,2
    715c:	d9000b04 	addi	r4,sp,44
    7160:	10808c04 	addi	r2,r2,560
    7164:	1105883a 	add	r2,r2,r4
    7168:	157f7417 	ldw	r21,-560(r2)
    716c:	a82bd5fa 	srai	r21,r21,23
    7170:	057fa00e 	bge	zero,r21,6ff4 <__kernel_rem_pio2+0x35c>
    7174:	a5000044 	addi	r20,r20,1
    7178:	0441ac0e 	bge	zero,r17,782c <__kernel_rem_pio2+0xb94>
    717c:	da800b17 	ldw	r10,44(sp)
    7180:	5000561e 	bne	r10,zero,72dc <__kernel_rem_pio2+0x644>
    7184:	88800060 	cmpeqi	r2,r17,1
    7188:	1000271e 	bne	r2,zero,7228 <__kernel_rem_pio2+0x590>
    718c:	da800c17 	ldw	r10,48(sp)
    7190:	d9400c04 	addi	r5,sp,48
    7194:	00800044 	movi	r2,1
    7198:	11000044 	addi	r4,r2,1
    719c:	29400104 	addi	r5,r5,4
    71a0:	5000061e 	bne	r10,zero,71bc <__kernel_rem_pio2+0x524>
    71a4:	89002026 	beq	r17,r4,7228 <__kernel_rem_pio2+0x590>
    71a8:	2a800017 	ldw	r10,0(r5)
    71ac:	2005883a 	mov	r2,r4
    71b0:	11000044 	addi	r4,r2,1
    71b4:	29400104 	addi	r5,r5,4
    71b8:	503ffa26 	beq	r10,zero,71a4 <__kernel_rem_pio2+0x50c>
    71bc:	100490ba 	slli	r2,r2,2
    71c0:	01404034 	movhi	r5,256
    71c4:	2a95c83a 	sub	r10,r5,r10
    71c8:	10808c04 	addi	r2,r2,560
    71cc:	d9400b04 	addi	r5,sp,44
    71d0:	1145883a 	add	r2,r2,r5
    71d4:	12bf7415 	stw	r10,-560(r2)
    71d8:	2440120e 	bge	r4,r17,7224 <__kernel_rem_pio2+0x58c>
    71dc:	200890ba 	slli	r4,r4,2
    71e0:	880490ba 	slli	r2,r17,2
    71e4:	d9c00b04 	addi	r7,sp,44
    71e8:	21408c04 	addi	r5,r4,560
    71ec:	01804034 	movhi	r6,256
    71f0:	29cb883a 	add	r5,r5,r7
    71f4:	21000b04 	addi	r4,r4,44
    71f8:	10800b04 	addi	r2,r2,44
    71fc:	297f7417 	ldw	r5,-560(r5)
    7200:	26c9883a 	add	r4,r4,sp
    7204:	16c5883a 	add	r2,r2,sp
    7208:	31bfffc4 	addi	r6,r6,-1
    720c:	00000106 	br	7214 <__kernel_rem_pio2+0x57c>
    7210:	21400017 	ldw	r5,0(r4)
    7214:	314bc83a 	sub	r5,r6,r5
    7218:	21400015 	stw	r5,0(r4)
    721c:	21000104 	addi	r4,r4,4
    7220:	20bffb1e 	bne	r4,r2,7210 <__kernel_rem_pio2+0x578>
    7224:	02800044 	movi	r10,1
    7228:	d9000317 	ldw	r4,12(sp)
    722c:	01000e0e 	bge	zero,r4,7268 <__kernel_rem_pio2+0x5d0>
    7230:	20800060 	cmpeqi	r2,r4,1
    7234:	1001371e 	bne	r2,zero,7714 <__kernel_rem_pio2+0xa7c>
    7238:	208000a0 	cmpeqi	r2,r4,2
    723c:	10000a26 	beq	r2,zero,7268 <__kernel_rem_pio2+0x5d0>
    7240:	88bfffc4 	addi	r2,r17,-1
    7244:	100490ba 	slli	r2,r2,2
    7248:	01401034 	movhi	r5,64
    724c:	d9000b04 	addi	r4,sp,44
    7250:	10808c04 	addi	r2,r2,560
    7254:	1105883a 	add	r2,r2,r4
    7258:	113f7417 	ldw	r4,-560(r2)
    725c:	297fffc4 	addi	r5,r5,-1
    7260:	2148703a 	and	r4,r4,r5
    7264:	113f7415 	stw	r4,-560(r2)
    7268:	a8800098 	cmpnei	r2,r21,2
    726c:	103f611e 	bne	r2,zero,6ff4 <__kernel_rem_pio2+0x35c>
    7270:	900d883a 	mov	r6,r18
    7274:	180f883a 	mov	r7,r3
    7278:	0009883a 	mov	r4,zero
    727c:	014ffc34 	movhi	r5,16368
    7280:	da800015 	stw	r10,0(sp)
    7284:	000be6c0 	call	be6c <__subdf3>
    7288:	da800017 	ldw	r10,0(sp)
    728c:	1027883a 	mov	r19,r2
    7290:	1813883a 	mov	r9,r3
    7294:	503f5726 	beq	r10,zero,6ff4 <__kernel_rem_pio2+0x35c>
    7298:	d9800317 	ldw	r6,12(sp)
    729c:	0009883a 	mov	r4,zero
    72a0:	014ffc34 	movhi	r5,16368
    72a4:	d8c00015 	stw	r3,0(sp)
    72a8:	0008e480 	call	8e48 <scalbn>
    72ac:	da400017 	ldw	r9,0(sp)
    72b0:	9809883a 	mov	r4,r19
    72b4:	100d883a 	mov	r6,r2
    72b8:	480b883a 	mov	r5,r9
    72bc:	180f883a 	mov	r7,r3
    72c0:	000be6c0 	call	be6c <__subdf3>
    72c4:	1027883a 	mov	r19,r2
    72c8:	1813883a 	mov	r9,r3
    72cc:	003f4906 	br	6ff4 <__kernel_rem_pio2+0x35c>
    72d0:	0005883a 	mov	r2,zero
    72d4:	0007883a 	mov	r3,zero
    72d8:	003e9f06 	br	6d58 <__kernel_rem_pio2+0xc0>
    72dc:	01000044 	movi	r4,1
    72e0:	0005883a 	mov	r2,zero
    72e4:	003fb506 	br	71bc <__kernel_rem_pio2+0x524>
    72e8:	180b883a 	mov	r5,r3
    72ec:	000d883a 	mov	r6,zero
    72f0:	01cff834 	movhi	r7,16352
    72f4:	9009883a 	mov	r4,r18
    72f8:	d8c00a15 	stw	r3,40(sp)
    72fc:	d8c00015 	stw	r3,0(sp)
    7300:	000b6280 	call	b628 <__gedf2>
    7304:	da400017 	ldw	r9,0(sp)
    7308:	d8c00a17 	ldw	r3,40(sp)
    730c:	1001080e 	bge	r2,zero,7730 <__kernel_rem_pio2+0xa98>
    7310:	002b883a 	mov	r21,zero
    7314:	003f3706 	br	6ff4 <__kernel_rem_pio2+0x35c>
    7318:	8d400044 	addi	r21,r17,1
    731c:	dd400015 	stw	r21,0(sp)
    7320:	003f5506 	br	7078 <__kernel_rem_pio2+0x3e0>
    7324:	0039883a 	mov	fp,zero
    7328:	002b883a 	mov	r21,zero
    732c:	003eb106 	br	6df4 <__kernel_rem_pio2+0x15c>
    7330:	d8c00317 	ldw	r3,12(sp)
    7334:	980490ba 	slli	r2,r19,2
    7338:	d9400b04 	addi	r5,sp,44
    733c:	193ffa04 	addi	r4,r3,-24
    7340:	10c08c04 	addi	r3,r2,560
    7344:	1947883a 	add	r3,r3,r5
    7348:	18ff7417 	ldw	r3,-560(r3)
    734c:	dd400215 	stw	r21,8(sp)
    7350:	d9000315 	stw	r4,12(sp)
    7354:	1800091e 	bne	r3,zero,737c <__kernel_rem_pio2+0x6e4>
    7358:	10800b04 	addi	r2,r2,44
    735c:	16c5883a 	add	r2,r2,sp
    7360:	2007883a 	mov	r3,r4
    7364:	113fff17 	ldw	r4,-4(r2)
    7368:	9cffffc4 	addi	r19,r19,-1
    736c:	10bfff04 	addi	r2,r2,-4
    7370:	18fffa04 	addi	r3,r3,-24
    7374:	203ffb26 	beq	r4,zero,7364 <__kernel_rem_pio2+0x6cc>
    7378:	d8c00315 	stw	r3,12(sp)
    737c:	d9800317 	ldw	r6,12(sp)
    7380:	0009883a 	mov	r4,zero
    7384:	014ffc34 	movhi	r5,16368
    7388:	0008e480 	call	8e48 <scalbn>
    738c:	1021883a 	mov	r16,r2
    7390:	1823883a 	mov	r17,r3
    7394:	98017116 	blt	r19,zero,795c <__kernel_rem_pio2+0xcc4>
    7398:	980490fa 	slli	r2,r19,3
    739c:	982c90ba 	slli	r22,r19,2
    73a0:	d8c06f04 	addi	r3,sp,444
    73a4:	18b9883a 	add	fp,r3,r2
    73a8:	d8800315 	stw	r2,12(sp)
    73ac:	b0800b04 	addi	r2,r22,44
    73b0:	df000115 	stw	fp,4(sp)
    73b4:	16ed883a 	add	r22,r2,sp
    73b8:	b1000017 	ldw	r4,0(r22)
    73bc:	e73ffe04 	addi	fp,fp,-8
    73c0:	000c84c0 	call	c84c <__floatsidf>
    73c4:	800d883a 	mov	r6,r16
    73c8:	880f883a 	mov	r7,r17
    73cc:	1009883a 	mov	r4,r2
    73d0:	180b883a 	mov	r5,r3
    73d4:	000b7f80 	call	b7f8 <__muldf3>
    73d8:	8009883a 	mov	r4,r16
    73dc:	880b883a 	mov	r5,r17
    73e0:	000d883a 	mov	r6,zero
    73e4:	01cf9c34 	movhi	r7,15984
    73e8:	e0800215 	stw	r2,8(fp)
    73ec:	e0c00315 	stw	r3,12(fp)
    73f0:	000b7f80 	call	b7f8 <__muldf3>
    73f4:	b009883a 	mov	r4,r22
    73f8:	1021883a 	mov	r16,r2
    73fc:	d8800b04 	addi	r2,sp,44
    7400:	1823883a 	mov	r17,r3
    7404:	b5bfff04 	addi	r22,r22,-4
    7408:	113feb1e 	bne	r2,r4,73b8 <__kernel_rem_pio2+0x720>
    740c:	05cffe74 	movhi	r23,16377
    7410:	dc800517 	ldw	r18,20(sp)
    7414:	bdc87ec4 	addi	r23,r23,8699
    7418:	dd800117 	ldw	r22,4(sp)
    741c:	d8804704 	addi	r2,sp,284
    7420:	dd000415 	stw	r20,16(sp)
    7424:	dcc00015 	stw	r19,0(sp)
    7428:	ddc00115 	stw	r23,4(sp)
    742c:	0021883a 	mov	r16,zero
    7430:	102b883a 	mov	r21,r2
    7434:	90002316 	blt	r18,zero,74c4 <__kernel_rem_pio2+0x82c>
    7438:	04c000b4 	movhi	r19,2
    743c:	d9400117 	ldw	r5,4(sp)
    7440:	9cc54c04 	addi	r19,r19,5424
    7444:	b02f883a 	mov	r23,r22
    7448:	01100034 	movhi	r4,16384
    744c:	0039883a 	mov	fp,zero
    7450:	0023883a 	mov	r17,zero
    7454:	0029883a 	mov	r20,zero
    7458:	00000506 	br	7470 <__kernel_rem_pio2+0x7d8>
    745c:	9cc00204 	addi	r19,r19,8
    7460:	bdc00204 	addi	r23,r23,8
    7464:	85000e16 	blt	r16,r20,74a0 <__kernel_rem_pio2+0x808>
    7468:	99000017 	ldw	r4,0(r19)
    746c:	99400117 	ldw	r5,4(r19)
    7470:	b9800017 	ldw	r6,0(r23)
    7474:	b9c00117 	ldw	r7,4(r23)
    7478:	a5000044 	addi	r20,r20,1
    747c:	000b7f80 	call	b7f8 <__muldf3>
    7480:	e009883a 	mov	r4,fp
    7484:	880b883a 	mov	r5,r17
    7488:	100d883a 	mov	r6,r2
    748c:	180f883a 	mov	r7,r3
    7490:	000a4680 	call	a468 <__adddf3>
    7494:	1039883a 	mov	fp,r2
    7498:	1823883a 	mov	r17,r3
    749c:	953fef0e 	bge	r18,r20,745c <__kernel_rem_pio2+0x7c4>
    74a0:	d8c00017 	ldw	r3,0(sp)
    74a4:	af000015 	stw	fp,0(r21)
    74a8:	ac400115 	stw	r17,4(r21)
    74ac:	80800044 	addi	r2,r16,1
    74b0:	ad400204 	addi	r21,r21,8
    74b4:	b5bffe04 	addi	r22,r22,-8
    74b8:	1c000526 	beq	r3,r16,74d0 <__kernel_rem_pio2+0x838>
    74bc:	1021883a 	mov	r16,r2
    74c0:	903fdd0e 	bge	r18,zero,7438 <__kernel_rem_pio2+0x7a0>
    74c4:	0039883a 	mov	fp,zero
    74c8:	0023883a 	mov	r17,zero
    74cc:	003ff406 	br	74a0 <__kernel_rem_pio2+0x808>
    74d0:	d880a117 	ldw	r2,644(sp)
    74d4:	dd000417 	ldw	r20,16(sp)
    74d8:	dcc00017 	ldw	r19,0(sp)
    74dc:	108000c8 	cmpgei	r2,r2,3
    74e0:	1000241e 	bne	r2,zero,7574 <__kernel_rem_pio2+0x8dc>
    74e4:	d880a117 	ldw	r2,644(sp)
    74e8:	0080d216 	blt	zero,r2,7834 <__kernel_rem_pio2+0xb9c>
    74ec:	1000141e 	bne	r2,zero,7540 <__kernel_rem_pio2+0x8a8>
    74f0:	d8c00317 	ldw	r3,12(sp)
    74f4:	d8804704 	addi	r2,sp,284
    74f8:	0009883a 	mov	r4,zero
    74fc:	10eb883a 	add	r21,r2,r3
    7500:	000b883a 	mov	r5,zero
    7504:	a9800017 	ldw	r6,0(r21)
    7508:	a9c00117 	ldw	r7,4(r21)
    750c:	000a4680 	call	a468 <__adddf3>
    7510:	a80d883a 	mov	r6,r21
    7514:	1009883a 	mov	r4,r2
    7518:	d8804704 	addi	r2,sp,284
    751c:	180b883a 	mov	r5,r3
    7520:	ad7ffe04 	addi	r21,r21,-8
    7524:	11bff71e 	bne	r2,r6,7504 <__kernel_rem_pio2+0x86c>
    7528:	d8800217 	ldw	r2,8(sp)
    752c:	10000126 	beq	r2,zero,7534 <__kernel_rem_pio2+0x89c>
    7530:	2960003c 	xorhi	r5,r5,32768
    7534:	d8800917 	ldw	r2,36(sp)
    7538:	11000015 	stw	r4,0(r2)
    753c:	11400115 	stw	r5,4(r2)
    7540:	a08001cc 	andi	r2,r20,7
    7544:	dfc0a017 	ldw	ra,640(sp)
    7548:	df009f17 	ldw	fp,636(sp)
    754c:	ddc09e17 	ldw	r23,632(sp)
    7550:	dd809d17 	ldw	r22,628(sp)
    7554:	dd409c17 	ldw	r21,624(sp)
    7558:	dd009b17 	ldw	r20,620(sp)
    755c:	dcc09a17 	ldw	r19,616(sp)
    7560:	dc809917 	ldw	r18,612(sp)
    7564:	dc409817 	ldw	r17,608(sp)
    7568:	dc009717 	ldw	r16,604(sp)
    756c:	dec0a104 	addi	sp,sp,644
    7570:	f800283a 	ret
    7574:	d880a117 	ldw	r2,644(sp)
    7578:	108000e0 	cmpeqi	r2,r2,3
    757c:	103ff026 	beq	r2,zero,7540 <__kernel_rem_pio2+0x8a8>
    7580:	98010226 	beq	r19,zero,798c <__kernel_rem_pio2+0xcf4>
    7584:	d8c00317 	ldw	r3,12(sp)
    7588:	d9000b04 	addi	r4,sp,44
    758c:	18808c04 	addi	r2,r3,560
    7590:	1105883a 	add	r2,r2,r4
    7594:	14bfb017 	ldw	r18,-320(r2)
    7598:	147fb117 	ldw	r17,-316(r2)
    759c:	d8804704 	addi	r2,sp,284
    75a0:	10e1883a 	add	r16,r2,r3
    75a4:	85bffe17 	ldw	r22,-8(r16)
    75a8:	857fff17 	ldw	r21,-4(r16)
    75ac:	9009883a 	mov	r4,r18
    75b0:	880b883a 	mov	r5,r17
    75b4:	b00d883a 	mov	r6,r22
    75b8:	a80f883a 	mov	r7,r21
    75bc:	000a4680 	call	a468 <__adddf3>
    75c0:	100d883a 	mov	r6,r2
    75c4:	180f883a 	mov	r7,r3
    75c8:	b009883a 	mov	r4,r22
    75cc:	a80b883a 	mov	r5,r21
    75d0:	9039883a 	mov	fp,r18
    75d4:	882f883a 	mov	r23,r17
    75d8:	1025883a 	mov	r18,r2
    75dc:	1823883a 	mov	r17,r3
    75e0:	000be6c0 	call	be6c <__subdf3>
    75e4:	e00d883a 	mov	r6,fp
    75e8:	b80f883a 	mov	r7,r23
    75ec:	1009883a 	mov	r4,r2
    75f0:	180b883a 	mov	r5,r3
    75f4:	000a4680 	call	a468 <__adddf3>
    75f8:	80800015 	stw	r2,0(r16)
    75fc:	80c00115 	stw	r3,4(r16)
    7600:	84bffe15 	stw	r18,-8(r16)
    7604:	847fff15 	stw	r17,-4(r16)
    7608:	d8804704 	addi	r2,sp,284
    760c:	843ffe04 	addi	r16,r16,-8
    7610:	143fe41e 	bne	r2,r16,75a4 <__kernel_rem_pio2+0x90c>
    7614:	9cc00088 	cmpgei	r19,r19,2
    7618:	9800dc26 	beq	r19,zero,798c <__kernel_rem_pio2+0xcf4>
    761c:	d8c00317 	ldw	r3,12(sp)
    7620:	d9000b04 	addi	r4,sp,44
    7624:	dc404904 	addi	r17,sp,292
    7628:	18808c04 	addi	r2,r3,560
    762c:	1105883a 	add	r2,r2,r4
    7630:	14ffb017 	ldw	r19,-320(r2)
    7634:	14bfb117 	ldw	r18,-316(r2)
    7638:	d8804704 	addi	r2,sp,284
    763c:	10eb883a 	add	r21,r2,r3
    7640:	a821883a 	mov	r16,r21
    7644:	dd000015 	stw	r20,0(sp)
    7648:	85fffe17 	ldw	r23,-8(r16)
    764c:	85bfff17 	ldw	r22,-4(r16)
    7650:	9809883a 	mov	r4,r19
    7654:	900b883a 	mov	r5,r18
    7658:	b80d883a 	mov	r6,r23
    765c:	b00f883a 	mov	r7,r22
    7660:	000a4680 	call	a468 <__adddf3>
    7664:	100d883a 	mov	r6,r2
    7668:	180f883a 	mov	r7,r3
    766c:	b809883a 	mov	r4,r23
    7670:	b00b883a 	mov	r5,r22
    7674:	9829883a 	mov	r20,r19
    7678:	9039883a 	mov	fp,r18
    767c:	1027883a 	mov	r19,r2
    7680:	1825883a 	mov	r18,r3
    7684:	000be6c0 	call	be6c <__subdf3>
    7688:	a00d883a 	mov	r6,r20
    768c:	e00f883a 	mov	r7,fp
    7690:	1009883a 	mov	r4,r2
    7694:	180b883a 	mov	r5,r3
    7698:	000a4680 	call	a468 <__adddf3>
    769c:	80800015 	stw	r2,0(r16)
    76a0:	80c00115 	stw	r3,4(r16)
    76a4:	84fffe15 	stw	r19,-8(r16)
    76a8:	84bfff15 	stw	r18,-4(r16)
    76ac:	843ffe04 	addi	r16,r16,-8
    76b0:	8c3fe51e 	bne	r17,r16,7648 <__kernel_rem_pio2+0x9b0>
    76b4:	dd000017 	ldw	r20,0(sp)
    76b8:	0009883a 	mov	r4,zero
    76bc:	000b883a 	mov	r5,zero
    76c0:	a9800017 	ldw	r6,0(r21)
    76c4:	a9c00117 	ldw	r7,4(r21)
    76c8:	ad7ffe04 	addi	r21,r21,-8
    76cc:	000a4680 	call	a468 <__adddf3>
    76d0:	1009883a 	mov	r4,r2
    76d4:	180b883a 	mov	r5,r3
    76d8:	8d7ff91e 	bne	r17,r21,76c0 <__kernel_rem_pio2+0xa28>
    76dc:	da000217 	ldw	r8,8(sp)
    76e0:	d9c04717 	ldw	r7,284(sp)
    76e4:	d8c04817 	ldw	r3,288(sp)
    76e8:	d9804917 	ldw	r6,292(sp)
    76ec:	d8804a17 	ldw	r2,296(sp)
    76f0:	4000891e 	bne	r8,zero,7918 <__kernel_rem_pio2+0xc80>
    76f4:	da000917 	ldw	r8,36(sp)
    76f8:	41c00015 	stw	r7,0(r8)
    76fc:	40c00115 	stw	r3,4(r8)
    7700:	41800215 	stw	r6,8(r8)
    7704:	40800315 	stw	r2,12(r8)
    7708:	41000415 	stw	r4,16(r8)
    770c:	41400515 	stw	r5,20(r8)
    7710:	003f8b06 	br	7540 <__kernel_rem_pio2+0x8a8>
    7714:	88bfffc4 	addi	r2,r17,-1
    7718:	100490ba 	slli	r2,r2,2
    771c:	01402034 	movhi	r5,128
    7720:	003eca06 	br	724c <__kernel_rem_pio2+0x5b4>
    7724:	00fffa04 	movi	r3,-24
    7728:	d8000615 	stw	zero,24(sp)
    772c:	003d7906 	br	6d14 <__kernel_rem_pio2+0x7c>
    7730:	a5000044 	addi	r20,r20,1
    7734:	05400084 	movi	r21,2
    7738:	047e9016 	blt	zero,r17,717c <__kernel_rem_pio2+0x4e4>
    773c:	480f883a 	mov	r7,r9
    7740:	900d883a 	mov	r6,r18
    7744:	0009883a 	mov	r4,zero
    7748:	014ffc34 	movhi	r5,16368
    774c:	000be6c0 	call	be6c <__subdf3>
    7750:	1027883a 	mov	r19,r2
    7754:	1813883a 	mov	r9,r3
    7758:	003e2606 	br	6ff4 <__kernel_rem_pio2+0x35c>
    775c:	ddc00317 	ldw	r23,12(sp)
    7760:	9809883a 	mov	r4,r19
    7764:	480b883a 	mov	r5,r9
    7768:	05cdc83a 	sub	r6,zero,r23
    776c:	dd400215 	stw	r21,8(sp)
    7770:	0008e480 	call	8e48 <scalbn>
    7774:	000d883a 	mov	r6,zero
    7778:	01d05c34 	movhi	r7,16752
    777c:	1009883a 	mov	r4,r2
    7780:	180b883a 	mov	r5,r3
    7784:	1025883a 	mov	r18,r2
    7788:	1821883a 	mov	r16,r3
    778c:	000b6280 	call	b628 <__gedf2>
    7790:	10005716 	blt	r2,zero,78f0 <__kernel_rem_pio2+0xc58>
    7794:	000d883a 	mov	r6,zero
    7798:	01cf9c34 	movhi	r7,15984
    779c:	9009883a 	mov	r4,r18
    77a0:	800b883a 	mov	r5,r16
    77a4:	000b7f80 	call	b7f8 <__muldf3>
    77a8:	882c90ba 	slli	r22,r17,2
    77ac:	180b883a 	mov	r5,r3
    77b0:	1009883a 	mov	r4,r2
    77b4:	000c7cc0 	call	c7cc <__fixdfsi>
    77b8:	1009883a 	mov	r4,r2
    77bc:	102b883a 	mov	r21,r2
    77c0:	d8c00b04 	addi	r3,sp,44
    77c4:	b0808c04 	addi	r2,r22,560
    77c8:	10ed883a 	add	r22,r2,r3
    77cc:	000c84c0 	call	c84c <__floatsidf>
    77d0:	000d883a 	mov	r6,zero
    77d4:	01d05c34 	movhi	r7,16752
    77d8:	1009883a 	mov	r4,r2
    77dc:	180b883a 	mov	r5,r3
    77e0:	000b7f80 	call	b7f8 <__muldf3>
    77e4:	100d883a 	mov	r6,r2
    77e8:	180f883a 	mov	r7,r3
    77ec:	9009883a 	mov	r4,r18
    77f0:	800b883a 	mov	r5,r16
    77f4:	000be6c0 	call	be6c <__subdf3>
    77f8:	180b883a 	mov	r5,r3
    77fc:	1009883a 	mov	r4,r2
    7800:	000c7cc0 	call	c7cc <__fixdfsi>
    7804:	8cc00044 	addi	r19,r17,1
    7808:	980690ba 	slli	r3,r19,2
    780c:	b0bf7415 	stw	r2,-560(r22)
    7810:	b8800604 	addi	r2,r23,24
    7814:	d8800315 	stw	r2,12(sp)
    7818:	18808c04 	addi	r2,r3,560
    781c:	d8c00b04 	addi	r3,sp,44
    7820:	10c7883a 	add	r3,r2,r3
    7824:	1d7f7415 	stw	r21,-560(r3)
    7828:	003ed406 	br	737c <__kernel_rem_pio2+0x6e4>
    782c:	0015883a 	mov	r10,zero
    7830:	003e7d06 	br	7228 <__kernel_rem_pio2+0x590>
    7834:	d8c00317 	ldw	r3,12(sp)
    7838:	d8804704 	addi	r2,sp,284
    783c:	10eb883a 	add	r21,r2,r3
    7840:	0005883a 	mov	r2,zero
    7844:	0007883a 	mov	r3,zero
    7848:	1009883a 	mov	r4,r2
    784c:	180b883a 	mov	r5,r3
    7850:	a9800017 	ldw	r6,0(r21)
    7854:	a9c00117 	ldw	r7,4(r21)
    7858:	000a4680 	call	a468 <__adddf3>
    785c:	a80d883a 	mov	r6,r21
    7860:	1009883a 	mov	r4,r2
    7864:	d8804704 	addi	r2,sp,284
    7868:	180b883a 	mov	r5,r3
    786c:	ad7ffe04 	addi	r21,r21,-8
    7870:	11bff71e 	bne	r2,r6,7850 <__kernel_rem_pio2+0xbb8>
    7874:	2005883a 	mov	r2,r4
    7878:	d9000217 	ldw	r4,8(sp)
    787c:	20002a1e 	bne	r4,zero,7928 <__kernel_rem_pio2+0xc90>
    7880:	d9800917 	ldw	r6,36(sp)
    7884:	d9004717 	ldw	r4,284(sp)
    7888:	d9404817 	ldw	r5,288(sp)
    788c:	30800015 	stw	r2,0(r6)
    7890:	30c00115 	stw	r3,4(r6)
    7894:	180f883a 	mov	r7,r3
    7898:	100d883a 	mov	r6,r2
    789c:	000be6c0 	call	be6c <__subdf3>
    78a0:	1009883a 	mov	r4,r2
    78a4:	180b883a 	mov	r5,r3
    78a8:	04c00d0e 	bge	zero,r19,78e0 <__kernel_rem_pio2+0xc48>
    78ac:	dc004904 	addi	r16,sp,292
    78b0:	04400044 	movi	r17,1
    78b4:	81800017 	ldw	r6,0(r16)
    78b8:	81c00117 	ldw	r7,4(r16)
    78bc:	8c400044 	addi	r17,r17,1
    78c0:	84000204 	addi	r16,r16,8
    78c4:	000a4680 	call	a468 <__adddf3>
    78c8:	1009883a 	mov	r4,r2
    78cc:	180b883a 	mov	r5,r3
    78d0:	9c7ff80e 	bge	r19,r17,78b4 <__kernel_rem_pio2+0xc1c>
    78d4:	d8800217 	ldw	r2,8(sp)
    78d8:	10000126 	beq	r2,zero,78e0 <__kernel_rem_pio2+0xc48>
    78dc:	2960003c 	xorhi	r5,r5,32768
    78e0:	d8800917 	ldw	r2,36(sp)
    78e4:	11000215 	stw	r4,8(r2)
    78e8:	11400315 	stw	r5,12(r2)
    78ec:	003f1406 	br	7540 <__kernel_rem_pio2+0x8a8>
    78f0:	880490ba 	slli	r2,r17,2
    78f4:	800b883a 	mov	r5,r16
    78f8:	d8c00b04 	addi	r3,sp,44
    78fc:	10808c04 	addi	r2,r2,560
    7900:	9009883a 	mov	r4,r18
    7904:	10e1883a 	add	r16,r2,r3
    7908:	000c7cc0 	call	c7cc <__fixdfsi>
    790c:	80bf7415 	stw	r2,-560(r16)
    7910:	8827883a 	mov	r19,r17
    7914:	003e9906 	br	737c <__kernel_rem_pio2+0x6e4>
    7918:	18e0003c 	xorhi	r3,r3,32768
    791c:	10a0003c 	xorhi	r2,r2,32768
    7920:	2960003c 	xorhi	r5,r5,32768
    7924:	003f7306 	br	76f4 <__kernel_rem_pio2+0xa5c>
    7928:	d9c00917 	ldw	r7,36(sp)
    792c:	d9004717 	ldw	r4,284(sp)
    7930:	d9404817 	ldw	r5,288(sp)
    7934:	19a0003c 	xorhi	r6,r3,32768
    7938:	39800115 	stw	r6,4(r7)
    793c:	38800015 	stw	r2,0(r7)
    7940:	100d883a 	mov	r6,r2
    7944:	180f883a 	mov	r7,r3
    7948:	000be6c0 	call	be6c <__subdf3>
    794c:	1009883a 	mov	r4,r2
    7950:	180b883a 	mov	r5,r3
    7954:	04ffd516 	blt	zero,r19,78ac <__kernel_rem_pio2+0xc14>
    7958:	003fe006 	br	78dc <__kernel_rem_pio2+0xc44>
    795c:	d880a117 	ldw	r2,644(sp)
    7960:	108000c8 	cmpgei	r2,r2,3
    7964:	1000061e 	bne	r2,zero,7980 <__kernel_rem_pio2+0xce8>
    7968:	d880a117 	ldw	r2,644(sp)
    796c:	00800a16 	blt	zero,r2,7998 <__kernel_rem_pio2+0xd00>
    7970:	103ef31e 	bne	r2,zero,7540 <__kernel_rem_pio2+0x8a8>
    7974:	0009883a 	mov	r4,zero
    7978:	000b883a 	mov	r5,zero
    797c:	003eea06 	br	7528 <__kernel_rem_pio2+0x890>
    7980:	d880a117 	ldw	r2,644(sp)
    7984:	108000e0 	cmpeqi	r2,r2,3
    7988:	103eed26 	beq	r2,zero,7540 <__kernel_rem_pio2+0x8a8>
    798c:	0009883a 	mov	r4,zero
    7990:	000b883a 	mov	r5,zero
    7994:	003f5106 	br	76dc <__kernel_rem_pio2+0xa44>
    7998:	0005883a 	mov	r2,zero
    799c:	0007883a 	mov	r3,zero
    79a0:	003fb506 	br	7878 <__kernel_rem_pio2+0xbe0>

000079a4 <__kernel_sin>:
    79a4:	02200034 	movhi	r8,32768
    79a8:	defff304 	addi	sp,sp,-52
    79ac:	423fffc4 	addi	r8,r8,-1
    79b0:	dd400815 	stw	r21,32(sp)
    79b4:	dd000715 	stw	r20,28(sp)
    79b8:	dc400415 	stw	r17,16(sp)
    79bc:	dc000315 	stw	r16,12(sp)
    79c0:	dfc00c15 	stw	ra,48(sp)
    79c4:	df000b15 	stw	fp,44(sp)
    79c8:	ddc00a15 	stw	r23,40(sp)
    79cc:	dd800915 	stw	r22,36(sp)
    79d0:	dcc00615 	stw	r19,24(sp)
    79d4:	dc800515 	stw	r18,20(sp)
    79d8:	2a10703a 	and	r8,r5,r8
    79dc:	00cf9034 	movhi	r3,15936
    79e0:	2821883a 	mov	r16,r5
    79e4:	2023883a 	mov	r17,r4
    79e8:	302b883a 	mov	r21,r6
    79ec:	3829883a 	mov	r20,r7
    79f0:	40c0020e 	bge	r8,r3,79fc <__kernel_sin+0x58>
    79f4:	000c7cc0 	call	c7cc <__fixdfsi>
    79f8:	10009926 	beq	r2,zero,7c60 <__kernel_sin+0x2bc>
    79fc:	880d883a 	mov	r6,r17
    7a00:	800f883a 	mov	r7,r16
    7a04:	8809883a 	mov	r4,r17
    7a08:	800b883a 	mov	r5,r16
    7a0c:	000b7f80 	call	b7f8 <__muldf3>
    7a10:	100d883a 	mov	r6,r2
    7a14:	180f883a 	mov	r7,r3
    7a18:	8809883a 	mov	r4,r17
    7a1c:	800b883a 	mov	r5,r16
    7a20:	1027883a 	mov	r19,r2
    7a24:	1825883a 	mov	r18,r3
    7a28:	000b7f80 	call	b7f8 <__muldf3>
    7a2c:	0196b434 	movhi	r6,23248
    7a30:	01cf79b4 	movhi	r7,15846
    7a34:	31b55f04 	addi	r6,r6,-10884
    7a38:	39f64e84 	addi	r7,r7,-9926
    7a3c:	9809883a 	mov	r4,r19
    7a40:	900b883a 	mov	r5,r18
    7a44:	102f883a 	mov	r23,r2
    7a48:	182d883a 	mov	r22,r3
    7a4c:	000b7f80 	call	b7f8 <__muldf3>
    7a50:	01a28b34 	movhi	r6,35372
    7a54:	01cf96f4 	movhi	r7,15963
    7a58:	31a73ac4 	addi	r6,r6,-25365
    7a5c:	39f97984 	addi	r7,r7,-6682
    7a60:	1009883a 	mov	r4,r2
    7a64:	180b883a 	mov	r5,r3
    7a68:	000be6c0 	call	be6c <__subdf3>
    7a6c:	980d883a 	mov	r6,r19
    7a70:	900f883a 	mov	r7,r18
    7a74:	1009883a 	mov	r4,r2
    7a78:	180b883a 	mov	r5,r3
    7a7c:	000b7f80 	call	b7f8 <__muldf3>
    7a80:	0195ecb4 	movhi	r6,22450
    7a84:	01cfb1f4 	movhi	r7,16071
    7a88:	31bf9f44 	addi	r6,r6,-387
    7a8c:	39c778c4 	addi	r7,r7,7651
    7a90:	1009883a 	mov	r4,r2
    7a94:	180b883a 	mov	r5,r3
    7a98:	000a4680 	call	a468 <__adddf3>
    7a9c:	980d883a 	mov	r6,r19
    7aa0:	900f883a 	mov	r7,r18
    7aa4:	1009883a 	mov	r4,r2
    7aa8:	180b883a 	mov	r5,r3
    7aac:	000b7f80 	call	b7f8 <__muldf3>
    7ab0:	01867074 	movhi	r6,6593
    7ab4:	01cfcab4 	movhi	r7,16170
    7ab8:	31987544 	addi	r6,r6,25045
    7abc:	39c06804 	addi	r7,r7,416
    7ac0:	1009883a 	mov	r4,r2
    7ac4:	180b883a 	mov	r5,r3
    7ac8:	000be6c0 	call	be6c <__subdf3>
    7acc:	980d883a 	mov	r6,r19
    7ad0:	900f883a 	mov	r7,r18
    7ad4:	1009883a 	mov	r4,r2
    7ad8:	180b883a 	mov	r5,r3
    7adc:	000b7f80 	call	b7f8 <__muldf3>
    7ae0:	01844474 	movhi	r6,4369
    7ae4:	01cfe074 	movhi	r7,16257
    7ae8:	31be2984 	addi	r6,r6,-1882
    7aec:	39c44444 	addi	r7,r7,4369
    7af0:	1009883a 	mov	r4,r2
    7af4:	180b883a 	mov	r5,r3
    7af8:	000a4680 	call	a468 <__adddf3>
    7afc:	1011883a 	mov	r8,r2
    7b00:	d8800d17 	ldw	r2,52(sp)
    7b04:	1839883a 	mov	fp,r3
    7b08:	10003e26 	beq	r2,zero,7c04 <__kernel_sin+0x260>
    7b0c:	000d883a 	mov	r6,zero
    7b10:	01cff834 	movhi	r7,16352
    7b14:	a809883a 	mov	r4,r21
    7b18:	a00b883a 	mov	r5,r20
    7b1c:	da000215 	stw	r8,8(sp)
    7b20:	000b7f80 	call	b7f8 <__muldf3>
    7b24:	da000217 	ldw	r8,8(sp)
    7b28:	e00f883a 	mov	r7,fp
    7b2c:	b809883a 	mov	r4,r23
    7b30:	400d883a 	mov	r6,r8
    7b34:	b00b883a 	mov	r5,r22
    7b38:	d8800115 	stw	r2,4(sp)
    7b3c:	d8c00015 	stw	r3,0(sp)
    7b40:	000b7f80 	call	b7f8 <__muldf3>
    7b44:	da800117 	ldw	r10,4(sp)
    7b48:	da400017 	ldw	r9,0(sp)
    7b4c:	100d883a 	mov	r6,r2
    7b50:	5009883a 	mov	r4,r10
    7b54:	480b883a 	mov	r5,r9
    7b58:	180f883a 	mov	r7,r3
    7b5c:	000be6c0 	call	be6c <__subdf3>
    7b60:	980d883a 	mov	r6,r19
    7b64:	900f883a 	mov	r7,r18
    7b68:	1009883a 	mov	r4,r2
    7b6c:	180b883a 	mov	r5,r3
    7b70:	000b7f80 	call	b7f8 <__muldf3>
    7b74:	a80d883a 	mov	r6,r21
    7b78:	a00f883a 	mov	r7,r20
    7b7c:	1009883a 	mov	r4,r2
    7b80:	180b883a 	mov	r5,r3
    7b84:	000be6c0 	call	be6c <__subdf3>
    7b88:	01955574 	movhi	r6,21845
    7b8c:	01cff174 	movhi	r7,16325
    7b90:	31955244 	addi	r6,r6,21833
    7b94:	39d55544 	addi	r7,r7,21845
    7b98:	b809883a 	mov	r4,r23
    7b9c:	b00b883a 	mov	r5,r22
    7ba0:	1027883a 	mov	r19,r2
    7ba4:	1825883a 	mov	r18,r3
    7ba8:	000b7f80 	call	b7f8 <__muldf3>
    7bac:	100d883a 	mov	r6,r2
    7bb0:	180f883a 	mov	r7,r3
    7bb4:	9809883a 	mov	r4,r19
    7bb8:	900b883a 	mov	r5,r18
    7bbc:	000a4680 	call	a468 <__adddf3>
    7bc0:	100d883a 	mov	r6,r2
    7bc4:	180f883a 	mov	r7,r3
    7bc8:	8809883a 	mov	r4,r17
    7bcc:	800b883a 	mov	r5,r16
    7bd0:	000be6c0 	call	be6c <__subdf3>
    7bd4:	dfc00c17 	ldw	ra,48(sp)
    7bd8:	df000b17 	ldw	fp,44(sp)
    7bdc:	ddc00a17 	ldw	r23,40(sp)
    7be0:	dd800917 	ldw	r22,36(sp)
    7be4:	dd400817 	ldw	r21,32(sp)
    7be8:	dd000717 	ldw	r20,28(sp)
    7bec:	dcc00617 	ldw	r19,24(sp)
    7bf0:	dc800517 	ldw	r18,20(sp)
    7bf4:	dc400417 	ldw	r17,16(sp)
    7bf8:	dc000317 	ldw	r16,12(sp)
    7bfc:	dec00d04 	addi	sp,sp,52
    7c00:	f800283a 	ret
    7c04:	400d883a 	mov	r6,r8
    7c08:	9809883a 	mov	r4,r19
    7c0c:	900b883a 	mov	r5,r18
    7c10:	180f883a 	mov	r7,r3
    7c14:	000b7f80 	call	b7f8 <__muldf3>
    7c18:	01955574 	movhi	r6,21845
    7c1c:	01cff174 	movhi	r7,16325
    7c20:	31955244 	addi	r6,r6,21833
    7c24:	39d55544 	addi	r7,r7,21845
    7c28:	1009883a 	mov	r4,r2
    7c2c:	180b883a 	mov	r5,r3
    7c30:	000be6c0 	call	be6c <__subdf3>
    7c34:	b80d883a 	mov	r6,r23
    7c38:	b00f883a 	mov	r7,r22
    7c3c:	1009883a 	mov	r4,r2
    7c40:	180b883a 	mov	r5,r3
    7c44:	000b7f80 	call	b7f8 <__muldf3>
    7c48:	880d883a 	mov	r6,r17
    7c4c:	800f883a 	mov	r7,r16
    7c50:	1009883a 	mov	r4,r2
    7c54:	180b883a 	mov	r5,r3
    7c58:	000a4680 	call	a468 <__adddf3>
    7c5c:	003fdd06 	br	7bd4 <__kernel_sin+0x230>
    7c60:	8805883a 	mov	r2,r17
    7c64:	8007883a 	mov	r3,r16
    7c68:	003fda06 	br	7bd4 <__kernel_sin+0x230>

00007c6c <__kernel_cosf>:
    7c6c:	defff804 	addi	sp,sp,-32
    7c70:	dc000015 	stw	r16,0(sp)
    7c74:	04200034 	movhi	r16,32768
    7c78:	843fffc4 	addi	r16,r16,-1
    7c7c:	dd000415 	stw	r20,16(sp)
    7c80:	dcc00315 	stw	r19,12(sp)
    7c84:	dfc00715 	stw	ra,28(sp)
    7c88:	dd800615 	stw	r22,24(sp)
    7c8c:	dd400515 	stw	r21,20(sp)
    7c90:	dc800215 	stw	r18,8(sp)
    7c94:	dc400115 	stw	r17,4(sp)
    7c98:	8120703a 	and	r16,r16,r4
    7c9c:	008c8034 	movhi	r2,12800
    7ca0:	2027883a 	mov	r19,r4
    7ca4:	2829883a 	mov	r20,r5
    7ca8:	8080430e 	bge	r16,r2,7db8 <__kernel_cosf+0x14c>
    7cac:	000a1d80 	call	a1d8 <__fixsfsi>
    7cb0:	10009d26 	beq	r2,zero,7f28 <__kernel_cosf+0x2bc>
    7cb4:	980b883a 	mov	r5,r19
    7cb8:	9809883a 	mov	r4,r19
    7cbc:	00099900 	call	9990 <__mulsf3>
    7cc0:	016b5234 	movhi	r5,44360
    7cc4:	2975d384 	addi	r5,r5,-10418
    7cc8:	1009883a 	mov	r4,r2
    7ccc:	1023883a 	mov	r17,r2
    7cd0:	00099900 	call	9990 <__mulsf3>
    7cd4:	014c43f4 	movhi	r5,12559
    7cd8:	295d3d84 	addi	r5,r5,29942
    7cdc:	1009883a 	mov	r4,r2
    7ce0:	00093fc0 	call	93fc <__addsf3>
    7ce4:	880b883a 	mov	r5,r17
    7ce8:	1009883a 	mov	r4,r2
    7cec:	00099900 	call	9990 <__mulsf3>
    7cf0:	014d2534 	movhi	r5,13460
    7cf4:	297c9f04 	addi	r5,r5,-3460
    7cf8:	1009883a 	mov	r4,r2
    7cfc:	0009d440 	call	9d44 <__subsf3>
    7d00:	880b883a 	mov	r5,r17
    7d04:	1009883a 	mov	r4,r2
    7d08:	00099900 	call	9990 <__mulsf3>
    7d0c:	014df434 	movhi	r5,14288
    7d10:	29434044 	addi	r5,r5,3329
    7d14:	1009883a 	mov	r4,r2
    7d18:	00093fc0 	call	93fc <__addsf3>
    7d1c:	880b883a 	mov	r5,r17
    7d20:	1009883a 	mov	r4,r2
    7d24:	00099900 	call	9990 <__mulsf3>
    7d28:	014eadb4 	movhi	r5,15030
    7d2c:	2942d844 	addi	r5,r5,2913
    7d30:	1009883a 	mov	r4,r2
    7d34:	0009d440 	call	9d44 <__subsf3>
    7d38:	880b883a 	mov	r5,r17
    7d3c:	1009883a 	mov	r4,r2
    7d40:	00099900 	call	9990 <__mulsf3>
    7d44:	014f4af4 	movhi	r5,15659
    7d48:	296aaac4 	addi	r5,r5,-21845
    7d4c:	1009883a 	mov	r4,r2
    7d50:	00093fc0 	call	93fc <__addsf3>
    7d54:	880b883a 	mov	r5,r17
    7d58:	1009883a 	mov	r4,r2
    7d5c:	00099900 	call	9990 <__mulsf3>
    7d60:	102b883a 	mov	r21,r2
    7d64:	8809883a 	mov	r4,r17
    7d68:	014fc034 	movhi	r5,16128
    7d6c:	00099900 	call	9990 <__mulsf3>
    7d70:	a80b883a 	mov	r5,r21
    7d74:	8809883a 	mov	r4,r17
    7d78:	1021883a 	mov	r16,r2
    7d7c:	00099900 	call	9990 <__mulsf3>
    7d80:	a00b883a 	mov	r5,r20
    7d84:	9809883a 	mov	r4,r19
    7d88:	1023883a 	mov	r17,r2
    7d8c:	00099900 	call	9990 <__mulsf3>
    7d90:	8809883a 	mov	r4,r17
    7d94:	100b883a 	mov	r5,r2
    7d98:	0009d440 	call	9d44 <__subsf3>
    7d9c:	8009883a 	mov	r4,r16
    7da0:	100b883a 	mov	r5,r2
    7da4:	0009d440 	call	9d44 <__subsf3>
    7da8:	100b883a 	mov	r5,r2
    7dac:	010fe034 	movhi	r4,16256
    7db0:	0009d440 	call	9d44 <__subsf3>
    7db4:	00004f06 	br	7ef4 <__kernel_cosf+0x288>
    7db8:	200b883a 	mov	r5,r4
    7dbc:	00099900 	call	9990 <__mulsf3>
    7dc0:	016b5234 	movhi	r5,44360
    7dc4:	2975d384 	addi	r5,r5,-10418
    7dc8:	1009883a 	mov	r4,r2
    7dcc:	1025883a 	mov	r18,r2
    7dd0:	00099900 	call	9990 <__mulsf3>
    7dd4:	014c43f4 	movhi	r5,12559
    7dd8:	295d3d84 	addi	r5,r5,29942
    7ddc:	1009883a 	mov	r4,r2
    7de0:	00093fc0 	call	93fc <__addsf3>
    7de4:	900b883a 	mov	r5,r18
    7de8:	1009883a 	mov	r4,r2
    7dec:	00099900 	call	9990 <__mulsf3>
    7df0:	014d2534 	movhi	r5,13460
    7df4:	297c9f04 	addi	r5,r5,-3460
    7df8:	1009883a 	mov	r4,r2
    7dfc:	0009d440 	call	9d44 <__subsf3>
    7e00:	900b883a 	mov	r5,r18
    7e04:	1009883a 	mov	r4,r2
    7e08:	00099900 	call	9990 <__mulsf3>
    7e0c:	014df434 	movhi	r5,14288
    7e10:	29434044 	addi	r5,r5,3329
    7e14:	1009883a 	mov	r4,r2
    7e18:	00093fc0 	call	93fc <__addsf3>
    7e1c:	900b883a 	mov	r5,r18
    7e20:	1009883a 	mov	r4,r2
    7e24:	00099900 	call	9990 <__mulsf3>
    7e28:	014eadb4 	movhi	r5,15030
    7e2c:	2942d844 	addi	r5,r5,2913
    7e30:	1009883a 	mov	r4,r2
    7e34:	0009d440 	call	9d44 <__subsf3>
    7e38:	900b883a 	mov	r5,r18
    7e3c:	1009883a 	mov	r4,r2
    7e40:	00099900 	call	9990 <__mulsf3>
    7e44:	014f4af4 	movhi	r5,15659
    7e48:	296aaac4 	addi	r5,r5,-21845
    7e4c:	1009883a 	mov	r4,r2
    7e50:	00093fc0 	call	93fc <__addsf3>
    7e54:	900b883a 	mov	r5,r18
    7e58:	1009883a 	mov	r4,r2
    7e5c:	00099900 	call	9990 <__mulsf3>
    7e60:	00cfa6b4 	movhi	r3,16026
    7e64:	18e66644 	addi	r3,r3,-26215
    7e68:	102d883a 	mov	r22,r2
    7e6c:	9023883a 	mov	r17,r18
    7e70:	102b883a 	mov	r21,r2
    7e74:	1c3fbb0e 	bge	r3,r16,7d64 <__kernel_cosf+0xf8>
    7e78:	008fd234 	movhi	r2,16200
    7e7c:	14002716 	blt	r2,r16,7f1c <__kernel_cosf+0x2b0>
    7e80:	017fc034 	movhi	r5,65280
    7e84:	814b883a 	add	r5,r16,r5
    7e88:	010fe034 	movhi	r4,16256
    7e8c:	2821883a 	mov	r16,r5
    7e90:	0009d440 	call	9d44 <__subsf3>
    7e94:	1023883a 	mov	r17,r2
    7e98:	9009883a 	mov	r4,r18
    7e9c:	014fc034 	movhi	r5,16128
    7ea0:	00099900 	call	9990 <__mulsf3>
    7ea4:	800b883a 	mov	r5,r16
    7ea8:	1009883a 	mov	r4,r2
    7eac:	0009d440 	call	9d44 <__subsf3>
    7eb0:	9009883a 	mov	r4,r18
    7eb4:	b00b883a 	mov	r5,r22
    7eb8:	1021883a 	mov	r16,r2
    7ebc:	00099900 	call	9990 <__mulsf3>
    7ec0:	a00b883a 	mov	r5,r20
    7ec4:	9809883a 	mov	r4,r19
    7ec8:	1025883a 	mov	r18,r2
    7ecc:	00099900 	call	9990 <__mulsf3>
    7ed0:	100b883a 	mov	r5,r2
    7ed4:	9009883a 	mov	r4,r18
    7ed8:	0009d440 	call	9d44 <__subsf3>
    7edc:	100b883a 	mov	r5,r2
    7ee0:	8009883a 	mov	r4,r16
    7ee4:	0009d440 	call	9d44 <__subsf3>
    7ee8:	100b883a 	mov	r5,r2
    7eec:	8809883a 	mov	r4,r17
    7ef0:	0009d440 	call	9d44 <__subsf3>
    7ef4:	dfc00717 	ldw	ra,28(sp)
    7ef8:	dd800617 	ldw	r22,24(sp)
    7efc:	dd400517 	ldw	r21,20(sp)
    7f00:	dd000417 	ldw	r20,16(sp)
    7f04:	dcc00317 	ldw	r19,12(sp)
    7f08:	dc800217 	ldw	r18,8(sp)
    7f0c:	dc400117 	ldw	r17,4(sp)
    7f10:	dc000017 	ldw	r16,0(sp)
    7f14:	dec00804 	addi	sp,sp,32
    7f18:	f800283a 	ret
    7f1c:	044fce34 	movhi	r17,16184
    7f20:	040fa434 	movhi	r16,16016
    7f24:	003fdc06 	br	7e98 <__kernel_cosf+0x22c>
    7f28:	008fe034 	movhi	r2,16256
    7f2c:	003ff106 	br	7ef4 <__kernel_cosf+0x288>

00007f30 <__kernel_rem_pio2f>:
    7f30:	deff9a04 	addi	sp,sp,-408
    7f34:	d8806617 	ldw	r2,408(sp)
    7f38:	dfc06515 	stw	ra,404(sp)
    7f3c:	df006415 	stw	fp,400(sp)
    7f40:	100690ba 	slli	r3,r2,2
    7f44:	008000b4 	movhi	r2,2
    7f48:	ddc06315 	stw	r23,396(sp)
    7f4c:	1885883a 	add	r2,r3,r2
    7f50:	10856b17 	ldw	r2,5548(r2)
    7f54:	dd806215 	stw	r22,392(sp)
    7f58:	dd406115 	stw	r21,388(sp)
    7f5c:	d8800515 	stw	r2,20(sp)
    7f60:	38bfffc4 	addi	r2,r7,-1
    7f64:	dd006015 	stw	r20,384(sp)
    7f68:	dcc05f15 	stw	r19,380(sp)
    7f6c:	dc805e15 	stw	r18,376(sp)
    7f70:	dc405d15 	stw	r17,372(sp)
    7f74:	dc005c15 	stw	r16,368(sp)
    7f78:	d9800b15 	stw	r6,44(sp)
    7f7c:	d9c00715 	stw	r7,28(sp)
    7f80:	30ffff10 	cmplti	r3,r6,-4
    7f84:	d9000215 	stw	r4,8(sp)
    7f88:	d9400915 	stw	r5,36(sp)
    7f8c:	d8800115 	stw	r2,4(sp)
    7f90:	1802451e 	bne	r3,zero,88a8 <__kernel_rem_pio2f+0x978>
    7f94:	30bfff44 	addi	r2,r6,-3
    7f98:	10024716 	blt	r2,zero,88b8 <__kernel_rem_pio2f+0x988>
    7f9c:	1005d0fa 	srai	r2,r2,3
    7fa0:	d8800615 	stw	r2,24(sp)
    7fa4:	10800044 	addi	r2,r2,1
    7fa8:	100490fa 	slli	r2,r2,3
    7fac:	d8800a15 	stw	r2,40(sp)
    7fb0:	d9000b17 	ldw	r4,44(sp)
    7fb4:	d9400a17 	ldw	r5,40(sp)
    7fb8:	d8c00117 	ldw	r3,4(sp)
    7fbc:	d8800517 	ldw	r2,20(sp)
    7fc0:	2149c83a 	sub	r4,r4,r5
    7fc4:	d9000315 	stw	r4,12(sp)
    7fc8:	d9000617 	ldw	r4,24(sp)
    7fcc:	10c5883a 	add	r2,r2,r3
    7fd0:	20e1c83a 	sub	r16,r4,r3
    7fd4:	10000e16 	blt	r2,zero,8010 <__kernel_rem_pio2f+0xe0>
    7fd8:	802490ba 	slli	r18,r16,2
    7fdc:	d8c06717 	ldw	r3,412(sp)
    7fe0:	10800044 	addi	r2,r2,1
    7fe4:	dc402004 	addi	r17,sp,128
    7fe8:	1ca5883a 	add	r18,r3,r18
    7fec:	1427883a 	add	r19,r2,r16
    7ff0:	80015116 	blt	r16,zero,8538 <__kernel_rem_pio2f+0x608>
    7ff4:	91000017 	ldw	r4,0(r18)
    7ff8:	000a2480 	call	a248 <__floatsisf>
    7ffc:	88800015 	stw	r2,0(r17)
    8000:	84000044 	addi	r16,r16,1
    8004:	8c400104 	addi	r17,r17,4
    8008:	94800104 	addi	r18,r18,4
    800c:	84fff81e 	bne	r16,r19,7ff0 <__kernel_rem_pio2f+0xc0>
    8010:	d8800517 	ldw	r2,20(sp)
    8014:	10001f16 	blt	r2,zero,8094 <__kernel_rem_pio2f+0x164>
    8018:	dd800117 	ldw	r22,4(sp)
    801c:	d8c02004 	addi	r3,sp,128
    8020:	dcc04804 	addi	r19,sp,288
    8024:	b02290ba 	slli	r17,r22,2
    8028:	b025883a 	mov	r18,r22
    802c:	8c000104 	addi	r16,r17,4
    8030:	1c63883a 	add	r17,r3,r17
    8034:	d8c00717 	ldw	r3,28(sp)
    8038:	10e9883a 	add	r20,r2,r3
    803c:	d8800217 	ldw	r2,8(sp)
    8040:	80a1883a 	add	r16,r16,r2
    8044:	002b883a 	mov	r21,zero
    8048:	b0000d16 	blt	r22,zero,8080 <__kernel_rem_pio2f+0x150>
    804c:	df000217 	ldw	fp,8(sp)
    8050:	882f883a 	mov	r23,r17
    8054:	002b883a 	mov	r21,zero
    8058:	b9400017 	ldw	r5,0(r23)
    805c:	e1000017 	ldw	r4,0(fp)
    8060:	e7000104 	addi	fp,fp,4
    8064:	bdffff04 	addi	r23,r23,-4
    8068:	00099900 	call	9990 <__mulsf3>
    806c:	a809883a 	mov	r4,r21
    8070:	100b883a 	mov	r5,r2
    8074:	00093fc0 	call	93fc <__addsf3>
    8078:	102b883a 	mov	r21,r2
    807c:	e43ff61e 	bne	fp,r16,8058 <__kernel_rem_pio2f+0x128>
    8080:	9d400015 	stw	r21,0(r19)
    8084:	94800044 	addi	r18,r18,1
    8088:	9cc00104 	addi	r19,r19,4
    808c:	8c400104 	addi	r17,r17,4
    8090:	953fec1e 	bne	r18,r20,8044 <__kernel_rem_pio2f+0x114>
    8094:	dc400517 	ldw	r17,20(sp)
    8098:	d8c00717 	ldw	r3,28(sp)
    809c:	d9000217 	ldw	r4,8(sp)
    80a0:	88bfffc4 	addi	r2,r17,-1
    80a4:	180690ba 	slli	r3,r3,2
    80a8:	883890ba 	slli	fp,r17,2
    80ac:	100490ba 	slli	r2,r2,2
    80b0:	243fff04 	addi	r16,r4,-4
    80b4:	80e1883a 	add	r16,r16,r3
    80b8:	e1000c04 	addi	r4,fp,48
    80bc:	10805004 	addi	r2,r2,320
    80c0:	d8c00c04 	addi	r3,sp,48
    80c4:	26c9883a 	add	r4,r4,sp
    80c8:	10c5883a 	add	r2,r2,r3
    80cc:	d9000415 	stw	r4,16(sp)
    80d0:	dd804804 	addi	r22,sp,288
    80d4:	d8800815 	stw	r2,32(sp)
    80d8:	882a90ba 	slli	r21,r17,2
    80dc:	d8c00c04 	addi	r3,sp,48
    80e0:	a8805004 	addi	r2,r21,320
    80e4:	10c5883a 	add	r2,r2,r3
    80e8:	14ffec17 	ldw	r19,-80(r2)
    80ec:	04401a0e 	bge	zero,r17,8158 <__kernel_rem_pio2f+0x228>
    80f0:	b569883a 	add	r20,r22,r21
    80f4:	1825883a 	mov	r18,r3
    80f8:	014ee034 	movhi	r5,15232
    80fc:	9809883a 	mov	r4,r19
    8100:	00099900 	call	9990 <__mulsf3>
    8104:	1009883a 	mov	r4,r2
    8108:	000a1d80 	call	a1d8 <__fixsfsi>
    810c:	1009883a 	mov	r4,r2
    8110:	000a2480 	call	a248 <__floatsisf>
    8114:	0150e034 	movhi	r5,17280
    8118:	1009883a 	mov	r4,r2
    811c:	102f883a 	mov	r23,r2
    8120:	00099900 	call	9990 <__mulsf3>
    8124:	100b883a 	mov	r5,r2
    8128:	9809883a 	mov	r4,r19
    812c:	0009d440 	call	9d44 <__subsf3>
    8130:	1009883a 	mov	r4,r2
    8134:	000a1d80 	call	a1d8 <__fixsfsi>
    8138:	a17fff17 	ldw	r5,-4(r20)
    813c:	90800015 	stw	r2,0(r18)
    8140:	b809883a 	mov	r4,r23
    8144:	00093fc0 	call	93fc <__addsf3>
    8148:	a53fff04 	addi	r20,r20,-4
    814c:	1027883a 	mov	r19,r2
    8150:	94800104 	addi	r18,r18,4
    8154:	b53fe81e 	bne	r22,r20,80f8 <__kernel_rem_pio2f+0x1c8>
    8158:	dd000317 	ldw	r20,12(sp)
    815c:	9809883a 	mov	r4,r19
    8160:	a00b883a 	mov	r5,r20
    8164:	00090fc0 	call	90fc <scalbnf>
    8168:	014f8034 	movhi	r5,15872
    816c:	1009883a 	mov	r4,r2
    8170:	1025883a 	mov	r18,r2
    8174:	00099900 	call	9990 <__mulsf3>
    8178:	1009883a 	mov	r4,r2
    817c:	00090080 	call	9008 <floorf>
    8180:	01504034 	movhi	r5,16640
    8184:	1009883a 	mov	r4,r2
    8188:	00099900 	call	9990 <__mulsf3>
    818c:	100b883a 	mov	r5,r2
    8190:	9009883a 	mov	r4,r18
    8194:	0009d440 	call	9d44 <__subsf3>
    8198:	1009883a 	mov	r4,r2
    819c:	1025883a 	mov	r18,r2
    81a0:	000a1d80 	call	a1d8 <__fixsfsi>
    81a4:	1009883a 	mov	r4,r2
    81a8:	1027883a 	mov	r19,r2
    81ac:	000a2480 	call	a248 <__floatsisf>
    81b0:	100b883a 	mov	r5,r2
    81b4:	9009883a 	mov	r4,r18
    81b8:	0009d440 	call	9d44 <__subsf3>
    81bc:	100d883a 	mov	r6,r2
    81c0:	1025883a 	mov	r18,r2
    81c4:	a00b883a 	mov	r5,r20
    81c8:	0500570e 	bge	zero,r20,8328 <__kernel_rem_pio2f+0x3f8>
    81cc:	88bfffc4 	addi	r2,r17,-1
    81d0:	100490ba 	slli	r2,r2,2
    81d4:	d9000c04 	addi	r4,sp,48
    81d8:	00c00204 	movi	r3,8
    81dc:	10805004 	addi	r2,r2,320
    81e0:	1105883a 	add	r2,r2,r4
    81e4:	113fb017 	ldw	r4,-320(r2)
    81e8:	1d07c83a 	sub	r3,r3,r20
    81ec:	050001c4 	movi	r20,7
    81f0:	a169c83a 	sub	r20,r20,r5
    81f4:	20cbd83a 	sra	r5,r4,r3
    81f8:	28c6983a 	sll	r3,r5,r3
    81fc:	9967883a 	add	r19,r19,r5
    8200:	20c7c83a 	sub	r3,r4,r3
    8204:	1d29d83a 	sra	r20,r3,r20
    8208:	10ffb015 	stw	r3,-320(r2)
    820c:	05005016 	blt	zero,r20,8350 <__kernel_rem_pio2f+0x420>
    8210:	000b883a 	mov	r5,zero
    8214:	9009883a 	mov	r4,r18
    8218:	00098680 	call	9868 <__eqsf2>
    821c:	10009b1e 	bne	r2,zero,848c <__kernel_rem_pio2f+0x55c>
    8220:	d8800517 	ldw	r2,20(sp)
    8224:	8cbfffc4 	addi	r18,r17,-1
    8228:	90800916 	blt	r18,r2,8250 <__kernel_rem_pio2f+0x320>
    822c:	d9400417 	ldw	r5,16(sp)
    8230:	a8800c04 	addi	r2,r21,48
    8234:	16c5883a 	add	r2,r2,sp
    8238:	0007883a 	mov	r3,zero
    823c:	113fff17 	ldw	r4,-4(r2)
    8240:	10bfff04 	addi	r2,r2,-4
    8244:	1906b03a 	or	r3,r3,r4
    8248:	117ffc1e 	bne	r2,r5,823c <__kernel_rem_pio2f+0x30c>
    824c:	1800ca1e 	bne	r3,zero,8578 <__kernel_rem_pio2f+0x648>
    8250:	d8800817 	ldw	r2,32(sp)
    8254:	10bfb017 	ldw	r2,-320(r2)
    8258:	1000c41e 	bne	r2,zero,856c <__kernel_rem_pio2f+0x63c>
    825c:	d8800417 	ldw	r2,16(sp)
    8260:	04c00044 	movi	r19,1
    8264:	10fffe17 	ldw	r3,-8(r2)
    8268:	9cc00044 	addi	r19,r19,1
    826c:	10bfff04 	addi	r2,r2,-4
    8270:	183ffc26 	beq	r3,zero,8264 <__kernel_rem_pio2f+0x334>
    8274:	8cc5883a 	add	r2,r17,r19
    8278:	8d000044 	addi	r20,r17,1
    827c:	d8800015 	stw	r2,0(sp)
    8280:	d8800617 	ldw	r2,24(sp)
    8284:	b56b883a 	add	r21,r22,r21
    8288:	88a5883a 	add	r18,r17,r2
    828c:	d8800717 	ldw	r2,28(sp)
    8290:	902490ba 	slli	r18,r18,2
    8294:	1463883a 	add	r17,r2,r17
    8298:	d8806717 	ldw	r2,412(sp)
    829c:	882290ba 	slli	r17,r17,2
    82a0:	14a5883a 	add	r18,r2,r18
    82a4:	d8802004 	addi	r2,sp,128
    82a8:	1463883a 	add	r17,r2,r17
    82ac:	91000117 	ldw	r4,4(r18)
    82b0:	000a2480 	call	a248 <__floatsisf>
    82b4:	1009883a 	mov	r4,r2
    82b8:	88800015 	stw	r2,0(r17)
    82bc:	d8800117 	ldw	r2,4(sp)
    82c0:	10001716 	blt	r2,zero,8320 <__kernel_rem_pio2f+0x3f0>
    82c4:	dcc00217 	ldw	r19,8(sp)
    82c8:	882f883a 	mov	r23,r17
    82cc:	0039883a 	mov	fp,zero
    82d0:	00000206 	br	82dc <__kernel_rem_pio2f+0x3ac>
    82d4:	b9000017 	ldw	r4,0(r23)
    82d8:	9cc00104 	addi	r19,r19,4
    82dc:	99400017 	ldw	r5,0(r19)
    82e0:	bdffff04 	addi	r23,r23,-4
    82e4:	00099900 	call	9990 <__mulsf3>
    82e8:	e009883a 	mov	r4,fp
    82ec:	100b883a 	mov	r5,r2
    82f0:	00093fc0 	call	93fc <__addsf3>
    82f4:	1039883a 	mov	fp,r2
    82f8:	9c3ff61e 	bne	r19,r16,82d4 <__kernel_rem_pio2f+0x3a4>
    82fc:	d8800017 	ldw	r2,0(sp)
    8300:	af000115 	stw	fp,4(r21)
    8304:	a5000044 	addi	r20,r20,1
    8308:	94800104 	addi	r18,r18,4
    830c:	8c400104 	addi	r17,r17,4
    8310:	ad400104 	addi	r21,r21,4
    8314:	153fe50e 	bge	r2,r20,82ac <__kernel_rem_pio2f+0x37c>
    8318:	1023883a 	mov	r17,r2
    831c:	003f6e06 	br	80d8 <__kernel_rem_pio2f+0x1a8>
    8320:	0039883a 	mov	fp,zero
    8324:	003ff506 	br	82fc <__kernel_rem_pio2f+0x3cc>
    8328:	d8800317 	ldw	r2,12(sp)
    832c:	1000871e 	bne	r2,zero,854c <__kernel_rem_pio2f+0x61c>
    8330:	88bfffc4 	addi	r2,r17,-1
    8334:	100490ba 	slli	r2,r2,2
    8338:	d8c00c04 	addi	r3,sp,48
    833c:	10805004 	addi	r2,r2,320
    8340:	10c5883a 	add	r2,r2,r3
    8344:	153fb017 	ldw	r20,-320(r2)
    8348:	a029d1fa 	srai	r20,r20,7
    834c:	053fb00e 	bge	zero,r20,8210 <__kernel_rem_pio2f+0x2e0>
    8350:	9cc00044 	addi	r19,r19,1
    8354:	04415a0e 	bge	zero,r17,88c0 <__kernel_rem_pio2f+0x990>
    8358:	d9c00c17 	ldw	r7,48(sp)
    835c:	3800781e 	bne	r7,zero,8540 <__kernel_rem_pio2f+0x610>
    8360:	88800060 	cmpeqi	r2,r17,1
    8364:	1000251e 	bne	r2,zero,83fc <__kernel_rem_pio2f+0x4cc>
    8368:	d9c00d17 	ldw	r7,52(sp)
    836c:	d9000d04 	addi	r4,sp,52
    8370:	00c00044 	movi	r3,1
    8374:	18800044 	addi	r2,r3,1
    8378:	21000104 	addi	r4,r4,4
    837c:	3800061e 	bne	r7,zero,8398 <__kernel_rem_pio2f+0x468>
    8380:	88801e26 	beq	r17,r2,83fc <__kernel_rem_pio2f+0x4cc>
    8384:	21c00017 	ldw	r7,0(r4)
    8388:	1007883a 	mov	r3,r2
    838c:	18800044 	addi	r2,r3,1
    8390:	21000104 	addi	r4,r4,4
    8394:	383ffa26 	beq	r7,zero,8380 <__kernel_rem_pio2f+0x450>
    8398:	180690ba 	slli	r3,r3,2
    839c:	01004004 	movi	r4,256
    83a0:	21cfc83a 	sub	r7,r4,r7
    83a4:	18c05004 	addi	r3,r3,320
    83a8:	d9000c04 	addi	r4,sp,48
    83ac:	1907883a 	add	r3,r3,r4
    83b0:	19ffb015 	stw	r7,-320(r3)
    83b4:	1440100e 	bge	r2,r17,83f8 <__kernel_rem_pio2f+0x4c8>
    83b8:	100490ba 	slli	r2,r2,2
    83bc:	a8c00c04 	addi	r3,r21,48
    83c0:	1ecb883a 	add	r5,r3,sp
    83c4:	d9c00c04 	addi	r7,sp,48
    83c8:	10c05004 	addi	r3,r2,320
    83cc:	19c7883a 	add	r3,r3,r7
    83d0:	10800c04 	addi	r2,r2,48
    83d4:	18ffb017 	ldw	r3,-320(r3)
    83d8:	01003fc4 	movi	r4,255
    83dc:	16c5883a 	add	r2,r2,sp
    83e0:	00000106 	br	83e8 <__kernel_rem_pio2f+0x4b8>
    83e4:	10c00017 	ldw	r3,0(r2)
    83e8:	20c7c83a 	sub	r3,r4,r3
    83ec:	10c00015 	stw	r3,0(r2)
    83f0:	10800104 	addi	r2,r2,4
    83f4:	117ffb1e 	bne	r2,r5,83e4 <__kernel_rem_pio2f+0x4b4>
    83f8:	01c00044 	movi	r7,1
    83fc:	d8c00317 	ldw	r3,12(sp)
    8400:	00c00c0e 	bge	zero,r3,8434 <__kernel_rem_pio2f+0x504>
    8404:	18800060 	cmpeqi	r2,r3,1
    8408:	1001161e 	bne	r2,zero,8864 <__kernel_rem_pio2f+0x934>
    840c:	188000a0 	cmpeqi	r2,r3,2
    8410:	10000826 	beq	r2,zero,8434 <__kernel_rem_pio2f+0x504>
    8414:	88bfffc4 	addi	r2,r17,-1
    8418:	100490ba 	slli	r2,r2,2
    841c:	d8c00c04 	addi	r3,sp,48
    8420:	10805004 	addi	r2,r2,320
    8424:	10c5883a 	add	r2,r2,r3
    8428:	10ffb017 	ldw	r3,-320(r2)
    842c:	18c00fcc 	andi	r3,r3,63
    8430:	10ffb015 	stw	r3,-320(r2)
    8434:	a0800098 	cmpnei	r2,r20,2
    8438:	103f751e 	bne	r2,zero,8210 <__kernel_rem_pio2f+0x2e0>
    843c:	300b883a 	mov	r5,r6
    8440:	010fe034 	movhi	r4,16256
    8444:	d9c00015 	stw	r7,0(sp)
    8448:	0009d440 	call	9d44 <__subsf3>
    844c:	d9c00017 	ldw	r7,0(sp)
    8450:	1025883a 	mov	r18,r2
    8454:	383f6e26 	beq	r7,zero,8210 <__kernel_rem_pio2f+0x2e0>
    8458:	d9400317 	ldw	r5,12(sp)
    845c:	010fe034 	movhi	r4,16256
    8460:	d8800015 	stw	r2,0(sp)
    8464:	00090fc0 	call	90fc <scalbnf>
    8468:	d8c00017 	ldw	r3,0(sp)
    846c:	100b883a 	mov	r5,r2
    8470:	1809883a 	mov	r4,r3
    8474:	0009d440 	call	9d44 <__subsf3>
    8478:	1025883a 	mov	r18,r2
    847c:	000b883a 	mov	r5,zero
    8480:	9009883a 	mov	r4,r18
    8484:	00098680 	call	9868 <__eqsf2>
    8488:	103f6526 	beq	r2,zero,8220 <__kernel_rem_pio2f+0x2f0>
    848c:	d8800a17 	ldw	r2,40(sp)
    8490:	d8c00b17 	ldw	r3,44(sp)
    8494:	9009883a 	mov	r4,r18
    8498:	dd000015 	stw	r20,0(sp)
    849c:	10cbc83a 	sub	r5,r2,r3
    84a0:	00090fc0 	call	90fc <scalbnf>
    84a4:	0150e034 	movhi	r5,17280
    84a8:	1009883a 	mov	r4,r2
    84ac:	1021883a 	mov	r16,r2
    84b0:	00098d80 	call	98d8 <__gesf2>
    84b4:	10012816 	blt	r2,zero,8958 <__kernel_rem_pio2f+0xa28>
    84b8:	014ee034 	movhi	r5,15232
    84bc:	8009883a 	mov	r4,r16
    84c0:	00099900 	call	9990 <__mulsf3>
    84c4:	1009883a 	mov	r4,r2
    84c8:	000a1d80 	call	a1d8 <__fixsfsi>
    84cc:	1009883a 	mov	r4,r2
    84d0:	000a2480 	call	a248 <__floatsisf>
    84d4:	0150e034 	movhi	r5,17280
    84d8:	1009883a 	mov	r4,r2
    84dc:	102d883a 	mov	r22,r2
    84e0:	00099900 	call	9990 <__mulsf3>
    84e4:	100b883a 	mov	r5,r2
    84e8:	8009883a 	mov	r4,r16
    84ec:	0009d440 	call	9d44 <__subsf3>
    84f0:	1009883a 	mov	r4,r2
    84f4:	8c800044 	addi	r18,r17,1
    84f8:	000a1d80 	call	a1d8 <__fixsfsi>
    84fc:	902090ba 	slli	r16,r18,2
    8500:	a8c05004 	addi	r3,r21,320
    8504:	d9000c04 	addi	r4,sp,48
    8508:	192b883a 	add	r21,r3,r4
    850c:	d9400c04 	addi	r5,sp,48
    8510:	80c05004 	addi	r3,r16,320
    8514:	b009883a 	mov	r4,r22
    8518:	a8bfb015 	stw	r2,-320(r21)
    851c:	1961883a 	add	r16,r3,r5
    8520:	000a1d80 	call	a1d8 <__fixsfsi>
    8524:	d8c00317 	ldw	r3,12(sp)
    8528:	80bfb015 	stw	r2,-320(r16)
    852c:	18c00204 	addi	r3,r3,8
    8530:	d8c00315 	stw	r3,12(sp)
    8534:	00002306 	br	85c4 <__kernel_rem_pio2f+0x694>
    8538:	0005883a 	mov	r2,zero
    853c:	003eaf06 	br	7ffc <__kernel_rem_pio2f+0xcc>
    8540:	00800044 	movi	r2,1
    8544:	0007883a 	mov	r3,zero
    8548:	003f9306 	br	8398 <__kernel_rem_pio2f+0x468>
    854c:	3009883a 	mov	r4,r6
    8550:	014fc034 	movhi	r5,16128
    8554:	d9800015 	stw	r6,0(sp)
    8558:	00098d80 	call	98d8 <__gesf2>
    855c:	d9800017 	ldw	r6,0(sp)
    8560:	1000c90e 	bge	r2,zero,8888 <__kernel_rem_pio2f+0x958>
    8564:	0029883a 	mov	r20,zero
    8568:	003f2906 	br	8210 <__kernel_rem_pio2f+0x2e0>
    856c:	8d000044 	addi	r20,r17,1
    8570:	dd000015 	stw	r20,0(sp)
    8574:	003f4206 	br	8280 <__kernel_rem_pio2f+0x350>
    8578:	d8c00317 	ldw	r3,12(sp)
    857c:	900490ba 	slli	r2,r18,2
    8580:	d9400c04 	addi	r5,sp,48
    8584:	193ffe04 	addi	r4,r3,-8
    8588:	10c05004 	addi	r3,r2,320
    858c:	1947883a 	add	r3,r3,r5
    8590:	18ffb017 	ldw	r3,-320(r3)
    8594:	dd000015 	stw	r20,0(sp)
    8598:	d9000315 	stw	r4,12(sp)
    859c:	1800091e 	bne	r3,zero,85c4 <__kernel_rem_pio2f+0x694>
    85a0:	10800c04 	addi	r2,r2,48
    85a4:	16c5883a 	add	r2,r2,sp
    85a8:	2007883a 	mov	r3,r4
    85ac:	113fff17 	ldw	r4,-4(r2)
    85b0:	94bfffc4 	addi	r18,r18,-1
    85b4:	10bfff04 	addi	r2,r2,-4
    85b8:	18fffe04 	addi	r3,r3,-8
    85bc:	203ffb26 	beq	r4,zero,85ac <__kernel_rem_pio2f+0x67c>
    85c0:	d8c00315 	stw	r3,12(sp)
    85c4:	d9400317 	ldw	r5,12(sp)
    85c8:	010fe034 	movhi	r4,16256
    85cc:	00090fc0 	call	90fc <scalbnf>
    85d0:	102b883a 	mov	r21,r2
    85d4:	9000f816 	blt	r18,zero,89b8 <__kernel_rem_pio2f+0xa88>
    85d8:	900490ba 	slli	r2,r18,2
    85dc:	d8c04804 	addi	r3,sp,288
    85e0:	18af883a 	add	r23,r3,r2
    85e4:	d8800115 	stw	r2,4(sp)
    85e8:	10800c04 	addi	r2,r2,48
    85ec:	16f9883a 	add	fp,r2,sp
    85f0:	b821883a 	mov	r16,r23
    85f4:	e1000017 	ldw	r4,0(fp)
    85f8:	843fff04 	addi	r16,r16,-4
    85fc:	000a2480 	call	a248 <__floatsisf>
    8600:	a80b883a 	mov	r5,r21
    8604:	1009883a 	mov	r4,r2
    8608:	00099900 	call	9990 <__mulsf3>
    860c:	a809883a 	mov	r4,r21
    8610:	014ee034 	movhi	r5,15232
    8614:	80800115 	stw	r2,4(r16)
    8618:	00099900 	call	9990 <__mulsf3>
    861c:	e007883a 	mov	r3,fp
    8620:	102b883a 	mov	r21,r2
    8624:	d8800c04 	addi	r2,sp,48
    8628:	e73fff04 	addi	fp,fp,-4
    862c:	10fff11e 	bne	r2,r3,85f4 <__kernel_rem_pio2f+0x6c4>
    8630:	dd800517 	ldw	r22,20(sp)
    8634:	dcc00215 	stw	r19,8(sp)
    8638:	dd403404 	addi	r21,sp,208
    863c:	0021883a 	mov	r16,zero
    8640:	b0001a16 	blt	r22,zero,86ac <__kernel_rem_pio2f+0x77c>
    8644:	04c000b4 	movhi	r19,2
    8648:	9cc56104 	addi	r19,r19,5508
    864c:	b839883a 	mov	fp,r23
    8650:	010ff274 	movhi	r4,16329
    8654:	0023883a 	mov	r17,zero
    8658:	0029883a 	mov	r20,zero
    865c:	00000406 	br	8670 <__kernel_rem_pio2f+0x740>
    8660:	e7000104 	addi	fp,fp,4
    8664:	85000a16 	blt	r16,r20,8690 <__kernel_rem_pio2f+0x760>
    8668:	99000017 	ldw	r4,0(r19)
    866c:	9cc00104 	addi	r19,r19,4
    8670:	e1400017 	ldw	r5,0(fp)
    8674:	a5000044 	addi	r20,r20,1
    8678:	00099900 	call	9990 <__mulsf3>
    867c:	8809883a 	mov	r4,r17
    8680:	100b883a 	mov	r5,r2
    8684:	00093fc0 	call	93fc <__addsf3>
    8688:	1023883a 	mov	r17,r2
    868c:	b53ff40e 	bge	r22,r20,8660 <__kernel_rem_pio2f+0x730>
    8690:	ac400015 	stw	r17,0(r21)
    8694:	80800044 	addi	r2,r16,1
    8698:	ad400104 	addi	r21,r21,4
    869c:	bdffff04 	addi	r23,r23,-4
    86a0:	94000426 	beq	r18,r16,86b4 <__kernel_rem_pio2f+0x784>
    86a4:	1021883a 	mov	r16,r2
    86a8:	b03fe60e 	bge	r22,zero,8644 <__kernel_rem_pio2f+0x714>
    86ac:	0023883a 	mov	r17,zero
    86b0:	003ff706 	br	8690 <__kernel_rem_pio2f+0x760>
    86b4:	d8806617 	ldw	r2,408(sp)
    86b8:	dcc00217 	ldw	r19,8(sp)
    86bc:	108000c8 	cmpgei	r2,r2,3
    86c0:	1000201e 	bne	r2,zero,8744 <__kernel_rem_pio2f+0x814>
    86c4:	d8806617 	ldw	r2,408(sp)
    86c8:	00807f16 	blt	zero,r2,88c8 <__kernel_rem_pio2f+0x998>
    86cc:	1000101e 	bne	r2,zero,8710 <__kernel_rem_pio2f+0x7e0>
    86d0:	d8c00117 	ldw	r3,4(sp)
    86d4:	d8803404 	addi	r2,sp,208
    86d8:	0009883a 	mov	r4,zero
    86dc:	10ed883a 	add	r22,r2,r3
    86e0:	b1400017 	ldw	r5,0(r22)
    86e4:	00093fc0 	call	93fc <__addsf3>
    86e8:	b007883a 	mov	r3,r22
    86ec:	1009883a 	mov	r4,r2
    86f0:	d8803404 	addi	r2,sp,208
    86f4:	b5bfff04 	addi	r22,r22,-4
    86f8:	10fff91e 	bne	r2,r3,86e0 <__kernel_rem_pio2f+0x7b0>
    86fc:	d8800017 	ldw	r2,0(sp)
    8700:	10000126 	beq	r2,zero,8708 <__kernel_rem_pio2f+0x7d8>
    8704:	2120003c 	xorhi	r4,r4,32768
    8708:	d8800917 	ldw	r2,36(sp)
    870c:	11000015 	stw	r4,0(r2)
    8710:	988001cc 	andi	r2,r19,7
    8714:	dfc06517 	ldw	ra,404(sp)
    8718:	df006417 	ldw	fp,400(sp)
    871c:	ddc06317 	ldw	r23,396(sp)
    8720:	dd806217 	ldw	r22,392(sp)
    8724:	dd406117 	ldw	r21,388(sp)
    8728:	dd006017 	ldw	r20,384(sp)
    872c:	dcc05f17 	ldw	r19,380(sp)
    8730:	dc805e17 	ldw	r18,376(sp)
    8734:	dc405d17 	ldw	r17,372(sp)
    8738:	dc005c17 	ldw	r16,368(sp)
    873c:	dec06604 	addi	sp,sp,408
    8740:	f800283a 	ret
    8744:	d8806617 	ldw	r2,408(sp)
    8748:	108000e0 	cmpeqi	r2,r2,3
    874c:	103ff026 	beq	r2,zero,8710 <__kernel_rem_pio2f+0x7e0>
    8750:	9000a426 	beq	r18,zero,89e4 <__kernel_rem_pio2f+0xab4>
    8754:	d8c00117 	ldw	r3,4(sp)
    8758:	d9000c04 	addi	r4,sp,48
    875c:	18805004 	addi	r2,r3,320
    8760:	1105883a 	add	r2,r2,r4
    8764:	10bfd817 	ldw	r2,-160(r2)
    8768:	d9003404 	addi	r4,sp,208
    876c:	20e1883a 	add	r16,r4,r3
    8770:	857fff17 	ldw	r21,-4(r16)
    8774:	1009883a 	mov	r4,r2
    8778:	1023883a 	mov	r17,r2
    877c:	a80b883a 	mov	r5,r21
    8780:	00093fc0 	call	93fc <__addsf3>
    8784:	100b883a 	mov	r5,r2
    8788:	a809883a 	mov	r4,r21
    878c:	1029883a 	mov	r20,r2
    8790:	0009d440 	call	9d44 <__subsf3>
    8794:	880b883a 	mov	r5,r17
    8798:	1009883a 	mov	r4,r2
    879c:	00093fc0 	call	93fc <__addsf3>
    87a0:	80800015 	stw	r2,0(r16)
    87a4:	853fff15 	stw	r20,-4(r16)
    87a8:	d8c03404 	addi	r3,sp,208
    87ac:	843fff04 	addi	r16,r16,-4
    87b0:	a005883a 	mov	r2,r20
    87b4:	1c3fee1e 	bne	r3,r16,8770 <__kernel_rem_pio2f+0x840>
    87b8:	94800088 	cmpgei	r18,r18,2
    87bc:	90008926 	beq	r18,zero,89e4 <__kernel_rem_pio2f+0xab4>
    87c0:	d8c00117 	ldw	r3,4(sp)
    87c4:	d9000c04 	addi	r4,sp,48
    87c8:	dc803504 	addi	r18,sp,212
    87cc:	18805004 	addi	r2,r3,320
    87d0:	1105883a 	add	r2,r2,r4
    87d4:	10bfd817 	ldw	r2,-160(r2)
    87d8:	d9003404 	addi	r4,sp,208
    87dc:	20ed883a 	add	r22,r4,r3
    87e0:	b021883a 	mov	r16,r22
    87e4:	857fff17 	ldw	r21,-4(r16)
    87e8:	1009883a 	mov	r4,r2
    87ec:	1023883a 	mov	r17,r2
    87f0:	a80b883a 	mov	r5,r21
    87f4:	00093fc0 	call	93fc <__addsf3>
    87f8:	100b883a 	mov	r5,r2
    87fc:	a809883a 	mov	r4,r21
    8800:	1029883a 	mov	r20,r2
    8804:	0009d440 	call	9d44 <__subsf3>
    8808:	880b883a 	mov	r5,r17
    880c:	1009883a 	mov	r4,r2
    8810:	00093fc0 	call	93fc <__addsf3>
    8814:	80800015 	stw	r2,0(r16)
    8818:	853fff15 	stw	r20,-4(r16)
    881c:	843fff04 	addi	r16,r16,-4
    8820:	a005883a 	mov	r2,r20
    8824:	943fef1e 	bne	r18,r16,87e4 <__kernel_rem_pio2f+0x8b4>
    8828:	0009883a 	mov	r4,zero
    882c:	b1400017 	ldw	r5,0(r22)
    8830:	b5bfff04 	addi	r22,r22,-4
    8834:	00093fc0 	call	93fc <__addsf3>
    8838:	1009883a 	mov	r4,r2
    883c:	95bffb1e 	bne	r18,r22,882c <__kernel_rem_pio2f+0x8fc>
    8840:	d9400017 	ldw	r5,0(sp)
    8844:	d8c03417 	ldw	r3,208(sp)
    8848:	d8803517 	ldw	r2,212(sp)
    884c:	28004a1e 	bne	r5,zero,8978 <__kernel_rem_pio2f+0xa48>
    8850:	d9400917 	ldw	r5,36(sp)
    8854:	28c00015 	stw	r3,0(r5)
    8858:	28800115 	stw	r2,4(r5)
    885c:	29000215 	stw	r4,8(r5)
    8860:	003fab06 	br	8710 <__kernel_rem_pio2f+0x7e0>
    8864:	88bfffc4 	addi	r2,r17,-1
    8868:	100490ba 	slli	r2,r2,2
    886c:	d8c00c04 	addi	r3,sp,48
    8870:	10805004 	addi	r2,r2,320
    8874:	10c5883a 	add	r2,r2,r3
    8878:	10ffb017 	ldw	r3,-320(r2)
    887c:	18c01fcc 	andi	r3,r3,127
    8880:	10ffb015 	stw	r3,-320(r2)
    8884:	003eeb06 	br	8434 <__kernel_rem_pio2f+0x504>
    8888:	9cc00044 	addi	r19,r19,1
    888c:	05000084 	movi	r20,2
    8890:	047eb116 	blt	zero,r17,8358 <__kernel_rem_pio2f+0x428>
    8894:	300b883a 	mov	r5,r6
    8898:	010fe034 	movhi	r4,16256
    889c:	0009d440 	call	9d44 <__subsf3>
    88a0:	1025883a 	mov	r18,r2
    88a4:	003e5a06 	br	8210 <__kernel_rem_pio2f+0x2e0>
    88a8:	00800204 	movi	r2,8
    88ac:	d8800a15 	stw	r2,40(sp)
    88b0:	d8000615 	stw	zero,24(sp)
    88b4:	003dbe06 	br	7fb0 <__kernel_rem_pio2f+0x80>
    88b8:	30800104 	addi	r2,r6,4
    88bc:	003db706 	br	7f9c <__kernel_rem_pio2f+0x6c>
    88c0:	000f883a 	mov	r7,zero
    88c4:	003ecd06 	br	83fc <__kernel_rem_pio2f+0x4cc>
    88c8:	d8c00117 	ldw	r3,4(sp)
    88cc:	d8803404 	addi	r2,sp,208
    88d0:	10ed883a 	add	r22,r2,r3
    88d4:	0005883a 	mov	r2,zero
    88d8:	1009883a 	mov	r4,r2
    88dc:	b1400017 	ldw	r5,0(r22)
    88e0:	00093fc0 	call	93fc <__addsf3>
    88e4:	b007883a 	mov	r3,r22
    88e8:	1009883a 	mov	r4,r2
    88ec:	d8803404 	addi	r2,sp,208
    88f0:	b5bfff04 	addi	r22,r22,-4
    88f4:	10fff91e 	bne	r2,r3,88dc <__kernel_rem_pio2f+0x9ac>
    88f8:	2005883a 	mov	r2,r4
    88fc:	d8c00017 	ldw	r3,0(sp)
    8900:	d9003417 	ldw	r4,208(sp)
    8904:	1800241e 	bne	r3,zero,8998 <__kernel_rem_pio2f+0xa68>
    8908:	d8c00917 	ldw	r3,36(sp)
    890c:	100b883a 	mov	r5,r2
    8910:	18800015 	stw	r2,0(r3)
    8914:	0009d440 	call	9d44 <__subsf3>
    8918:	1009883a 	mov	r4,r2
    891c:	04800b0e 	bge	zero,r18,894c <__kernel_rem_pio2f+0xa1c>
    8920:	dc403504 	addi	r17,sp,212
    8924:	04000044 	movi	r16,1
    8928:	89400017 	ldw	r5,0(r17)
    892c:	84000044 	addi	r16,r16,1
    8930:	8c400104 	addi	r17,r17,4
    8934:	00093fc0 	call	93fc <__addsf3>
    8938:	1009883a 	mov	r4,r2
    893c:	943ffa0e 	bge	r18,r16,8928 <__kernel_rem_pio2f+0x9f8>
    8940:	d8800017 	ldw	r2,0(sp)
    8944:	10000126 	beq	r2,zero,894c <__kernel_rem_pio2f+0xa1c>
    8948:	2120003c 	xorhi	r4,r4,32768
    894c:	d8800917 	ldw	r2,36(sp)
    8950:	11000115 	stw	r4,4(r2)
    8954:	003f6e06 	br	8710 <__kernel_rem_pio2f+0x7e0>
    8958:	8009883a 	mov	r4,r16
    895c:	000a1d80 	call	a1d8 <__fixsfsi>
    8960:	a8c05004 	addi	r3,r21,320
    8964:	d9000c04 	addi	r4,sp,48
    8968:	192b883a 	add	r21,r3,r4
    896c:	a8bfb015 	stw	r2,-320(r21)
    8970:	8825883a 	mov	r18,r17
    8974:	003f1306 	br	85c4 <__kernel_rem_pio2f+0x694>
    8978:	d9400917 	ldw	r5,36(sp)
    897c:	18e0003c 	xorhi	r3,r3,32768
    8980:	10a0003c 	xorhi	r2,r2,32768
    8984:	2120003c 	xorhi	r4,r4,32768
    8988:	28c00015 	stw	r3,0(r5)
    898c:	28800115 	stw	r2,4(r5)
    8990:	29000215 	stw	r4,8(r5)
    8994:	003f5e06 	br	8710 <__kernel_rem_pio2f+0x7e0>
    8998:	d9400917 	ldw	r5,36(sp)
    899c:	10e0003c 	xorhi	r3,r2,32768
    89a0:	28c00015 	stw	r3,0(r5)
    89a4:	100b883a 	mov	r5,r2
    89a8:	0009d440 	call	9d44 <__subsf3>
    89ac:	1009883a 	mov	r4,r2
    89b0:	04bfdb16 	blt	zero,r18,8920 <__kernel_rem_pio2f+0x9f0>
    89b4:	003fe406 	br	8948 <__kernel_rem_pio2f+0xa18>
    89b8:	d8806617 	ldw	r2,408(sp)
    89bc:	108000c8 	cmpgei	r2,r2,3
    89c0:	1000051e 	bne	r2,zero,89d8 <__kernel_rem_pio2f+0xaa8>
    89c4:	d8806617 	ldw	r2,408(sp)
    89c8:	00800816 	blt	zero,r2,89ec <__kernel_rem_pio2f+0xabc>
    89cc:	103f501e 	bne	r2,zero,8710 <__kernel_rem_pio2f+0x7e0>
    89d0:	0009883a 	mov	r4,zero
    89d4:	003f4906 	br	86fc <__kernel_rem_pio2f+0x7cc>
    89d8:	d8806617 	ldw	r2,408(sp)
    89dc:	108000e0 	cmpeqi	r2,r2,3
    89e0:	103f4b26 	beq	r2,zero,8710 <__kernel_rem_pio2f+0x7e0>
    89e4:	0009883a 	mov	r4,zero
    89e8:	003f9506 	br	8840 <__kernel_rem_pio2f+0x910>
    89ec:	0005883a 	mov	r2,zero
    89f0:	003fc206 	br	88fc <__kernel_rem_pio2f+0x9cc>

000089f4 <__kernel_sinf>:
    89f4:	00a00034 	movhi	r2,32768
    89f8:	defff904 	addi	sp,sp,-28
    89fc:	10bfffc4 	addi	r2,r2,-1
    8a00:	dd000415 	stw	r20,16(sp)
    8a04:	dcc00315 	stw	r19,12(sp)
    8a08:	dc000015 	stw	r16,0(sp)
    8a0c:	dfc00615 	stw	ra,24(sp)
    8a10:	dd400515 	stw	r21,20(sp)
    8a14:	dc800215 	stw	r18,8(sp)
    8a18:	dc400115 	stw	r17,4(sp)
    8a1c:	1104703a 	and	r2,r2,r4
    8a20:	00cc8034 	movhi	r3,12800
    8a24:	2021883a 	mov	r16,r4
    8a28:	2829883a 	mov	r20,r5
    8a2c:	3027883a 	mov	r19,r6
    8a30:	10c0020e 	bge	r2,r3,8a3c <__kernel_sinf+0x48>
    8a34:	000a1d80 	call	a1d8 <__fixsfsi>
    8a38:	10005926 	beq	r2,zero,8ba0 <__kernel_sinf+0x1ac>
    8a3c:	800b883a 	mov	r5,r16
    8a40:	8009883a 	mov	r4,r16
    8a44:	00099900 	call	9990 <__mulsf3>
    8a48:	100b883a 	mov	r5,r2
    8a4c:	8009883a 	mov	r4,r16
    8a50:	1023883a 	mov	r17,r2
    8a54:	00099900 	call	9990 <__mulsf3>
    8a58:	014bcbf4 	movhi	r5,12079
    8a5c:	297274c4 	addi	r5,r5,-13869
    8a60:	8809883a 	mov	r4,r17
    8a64:	1025883a 	mov	r18,r2
    8a68:	00099900 	call	9990 <__mulsf3>
    8a6c:	014cb5f4 	movhi	r5,13015
    8a70:	294bcd04 	addi	r5,r5,12084
    8a74:	1009883a 	mov	r4,r2
    8a78:	0009d440 	call	9d44 <__subsf3>
    8a7c:	880b883a 	mov	r5,r17
    8a80:	1009883a 	mov	r4,r2
    8a84:	00099900 	call	9990 <__mulsf3>
    8a88:	014d8e74 	movhi	r5,13881
    8a8c:	297bc6c4 	addi	r5,r5,-4325
    8a90:	1009883a 	mov	r4,r2
    8a94:	00093fc0 	call	93fc <__addsf3>
    8a98:	880b883a 	mov	r5,r17
    8a9c:	1009883a 	mov	r4,r2
    8aa0:	00099900 	call	9990 <__mulsf3>
    8aa4:	014e5434 	movhi	r5,14672
    8aa8:	29434044 	addi	r5,r5,3329
    8aac:	1009883a 	mov	r4,r2
    8ab0:	0009d440 	call	9d44 <__subsf3>
    8ab4:	880b883a 	mov	r5,r17
    8ab8:	1009883a 	mov	r4,r2
    8abc:	00099900 	call	9990 <__mulsf3>
    8ac0:	014f0274 	movhi	r5,15369
    8ac4:	29622244 	addi	r5,r5,-30583
    8ac8:	1009883a 	mov	r4,r2
    8acc:	00093fc0 	call	93fc <__addsf3>
    8ad0:	102b883a 	mov	r21,r2
    8ad4:	98002426 	beq	r19,zero,8b68 <__kernel_sinf+0x174>
    8ad8:	014fc034 	movhi	r5,16128
    8adc:	a009883a 	mov	r4,r20
    8ae0:	00099900 	call	9990 <__mulsf3>
    8ae4:	a80b883a 	mov	r5,r21
    8ae8:	9009883a 	mov	r4,r18
    8aec:	1027883a 	mov	r19,r2
    8af0:	00099900 	call	9990 <__mulsf3>
    8af4:	100b883a 	mov	r5,r2
    8af8:	9809883a 	mov	r4,r19
    8afc:	0009d440 	call	9d44 <__subsf3>
    8b00:	880b883a 	mov	r5,r17
    8b04:	1009883a 	mov	r4,r2
    8b08:	00099900 	call	9990 <__mulsf3>
    8b0c:	a00b883a 	mov	r5,r20
    8b10:	1009883a 	mov	r4,r2
    8b14:	0009d440 	call	9d44 <__subsf3>
    8b18:	014f8af4 	movhi	r5,15915
    8b1c:	296aaac4 	addi	r5,r5,-21845
    8b20:	9009883a 	mov	r4,r18
    8b24:	1023883a 	mov	r17,r2
    8b28:	00099900 	call	9990 <__mulsf3>
    8b2c:	100b883a 	mov	r5,r2
    8b30:	8809883a 	mov	r4,r17
    8b34:	00093fc0 	call	93fc <__addsf3>
    8b38:	100b883a 	mov	r5,r2
    8b3c:	8009883a 	mov	r4,r16
    8b40:	0009d440 	call	9d44 <__subsf3>
    8b44:	dfc00617 	ldw	ra,24(sp)
    8b48:	dd400517 	ldw	r21,20(sp)
    8b4c:	dd000417 	ldw	r20,16(sp)
    8b50:	dcc00317 	ldw	r19,12(sp)
    8b54:	dc800217 	ldw	r18,8(sp)
    8b58:	dc400117 	ldw	r17,4(sp)
    8b5c:	dc000017 	ldw	r16,0(sp)
    8b60:	dec00704 	addi	sp,sp,28
    8b64:	f800283a 	ret
    8b68:	8809883a 	mov	r4,r17
    8b6c:	100b883a 	mov	r5,r2
    8b70:	00099900 	call	9990 <__mulsf3>
    8b74:	014f8af4 	movhi	r5,15915
    8b78:	296aaac4 	addi	r5,r5,-21845
    8b7c:	1009883a 	mov	r4,r2
    8b80:	0009d440 	call	9d44 <__subsf3>
    8b84:	900b883a 	mov	r5,r18
    8b88:	1009883a 	mov	r4,r2
    8b8c:	00099900 	call	9990 <__mulsf3>
    8b90:	800b883a 	mov	r5,r16
    8b94:	1009883a 	mov	r4,r2
    8b98:	00093fc0 	call	93fc <__addsf3>
    8b9c:	003fe906 	br	8b44 <__kernel_sinf+0x150>
    8ba0:	8005883a 	mov	r2,r16
    8ba4:	003fe706 	br	8b44 <__kernel_sinf+0x150>

00008ba8 <with_errno>:
    8ba8:	defffc04 	addi	sp,sp,-16
    8bac:	dc800215 	stw	r18,8(sp)
    8bb0:	dc400115 	stw	r17,4(sp)
    8bb4:	dc000015 	stw	r16,0(sp)
    8bb8:	dfc00315 	stw	ra,12(sp)
    8bbc:	2023883a 	mov	r17,r4
    8bc0:	2821883a 	mov	r16,r5
    8bc4:	3025883a 	mov	r18,r6
    8bc8:	000cc540 	call	cc54 <__errno>
    8bcc:	14800015 	stw	r18,0(r2)
    8bd0:	8007883a 	mov	r3,r16
    8bd4:	8805883a 	mov	r2,r17
    8bd8:	dfc00317 	ldw	ra,12(sp)
    8bdc:	dc800217 	ldw	r18,8(sp)
    8be0:	dc400117 	ldw	r17,4(sp)
    8be4:	dc000017 	ldw	r16,0(sp)
    8be8:	dec00404 	addi	sp,sp,16
    8bec:	f800283a 	ret

00008bf0 <xflow>:
    8bf0:	defffd04 	addi	sp,sp,-12
    8bf4:	2005883a 	mov	r2,r4
    8bf8:	dfc00215 	stw	ra,8(sp)
    8bfc:	2809883a 	mov	r4,r5
    8c00:	300b883a 	mov	r5,r6
    8c04:	10000c26 	beq	r2,zero,8c38 <xflow+0x48>
    8c08:	30a0003c 	xorhi	r2,r6,32768
    8c0c:	d9000015 	stw	r4,0(sp)
    8c10:	d8800115 	stw	r2,4(sp)
    8c14:	d9800017 	ldw	r6,0(sp)
    8c18:	d9c00117 	ldw	r7,4(sp)
    8c1c:	000b7f80 	call	b7f8 <__muldf3>
    8c20:	01800884 	movi	r6,34
    8c24:	1009883a 	mov	r4,r2
    8c28:	180b883a 	mov	r5,r3
    8c2c:	dfc00217 	ldw	ra,8(sp)
    8c30:	dec00304 	addi	sp,sp,12
    8c34:	0008ba81 	jmpi	8ba8 <with_errno>
    8c38:	3005883a 	mov	r2,r6
    8c3c:	003ff306 	br	8c0c <xflow+0x1c>

00008c40 <__math_uflow>:
    8c40:	000b883a 	mov	r5,zero
    8c44:	01840034 	movhi	r6,4096
    8c48:	0008bf01 	jmpi	8bf0 <xflow>

00008c4c <__math_may_uflow>:
    8c4c:	000b883a 	mov	r5,zero
    8c50:	01879634 	movhi	r6,7768
    8c54:	0008bf01 	jmpi	8bf0 <xflow>

00008c58 <__math_oflow>:
    8c58:	000b883a 	mov	r5,zero
    8c5c:	019c0034 	movhi	r6,28672
    8c60:	0008bf01 	jmpi	8bf0 <xflow>

00008c64 <__math_divzero>:
    8c64:	defffd04 	addi	sp,sp,-12
    8c68:	dfc00215 	stw	ra,8(sp)
    8c6c:	20000e1e 	bne	r4,zero,8ca8 <__math_divzero+0x44>
    8c70:	008ffc34 	movhi	r2,16368
    8c74:	d8000015 	stw	zero,0(sp)
    8c78:	d8800115 	stw	r2,4(sp)
    8c7c:	d9000017 	ldw	r4,0(sp)
    8c80:	d9400117 	ldw	r5,4(sp)
    8c84:	000d883a 	mov	r6,zero
    8c88:	000f883a 	mov	r7,zero
    8c8c:	000ad580 	call	ad58 <__divdf3>
    8c90:	01800884 	movi	r6,34
    8c94:	1009883a 	mov	r4,r2
    8c98:	180b883a 	mov	r5,r3
    8c9c:	dfc00217 	ldw	ra,8(sp)
    8ca0:	dec00304 	addi	sp,sp,12
    8ca4:	0008ba81 	jmpi	8ba8 <with_errno>
    8ca8:	00affc34 	movhi	r2,49136
    8cac:	003ff106 	br	8c74 <__math_divzero+0x10>

00008cb0 <__math_invalid>:
    8cb0:	defffd04 	addi	sp,sp,-12
    8cb4:	200d883a 	mov	r6,r4
    8cb8:	280f883a 	mov	r7,r5
    8cbc:	dfc00215 	stw	ra,8(sp)
    8cc0:	dc400115 	stw	r17,4(sp)
    8cc4:	dc000015 	stw	r16,0(sp)
    8cc8:	2023883a 	mov	r17,r4
    8ccc:	2821883a 	mov	r16,r5
    8cd0:	000be6c0 	call	be6c <__subdf3>
    8cd4:	100d883a 	mov	r6,r2
    8cd8:	180f883a 	mov	r7,r3
    8cdc:	1009883a 	mov	r4,r2
    8ce0:	180b883a 	mov	r5,r3
    8ce4:	000ad580 	call	ad58 <__divdf3>
    8ce8:	880d883a 	mov	r6,r17
    8cec:	800f883a 	mov	r7,r16
    8cf0:	8809883a 	mov	r4,r17
    8cf4:	800b883a 	mov	r5,r16
    8cf8:	1023883a 	mov	r17,r2
    8cfc:	1821883a 	mov	r16,r3
    8d00:	000c7780 	call	c778 <__unorddf2>
    8d04:	1000081e 	bne	r2,zero,8d28 <__math_invalid+0x78>
    8d08:	01800844 	movi	r6,33
    8d0c:	8809883a 	mov	r4,r17
    8d10:	800b883a 	mov	r5,r16
    8d14:	dfc00217 	ldw	ra,8(sp)
    8d18:	dc400117 	ldw	r17,4(sp)
    8d1c:	dc000017 	ldw	r16,0(sp)
    8d20:	dec00304 	addi	sp,sp,12
    8d24:	0008ba81 	jmpi	8ba8 <with_errno>
    8d28:	8805883a 	mov	r2,r17
    8d2c:	8007883a 	mov	r3,r16
    8d30:	dfc00217 	ldw	ra,8(sp)
    8d34:	dc400117 	ldw	r17,4(sp)
    8d38:	dc000017 	ldw	r16,0(sp)
    8d3c:	dec00304 	addi	sp,sp,12
    8d40:	f800283a 	ret

00008d44 <__math_check_uflow>:
    8d44:	defffd04 	addi	sp,sp,-12
    8d48:	000d883a 	mov	r6,zero
    8d4c:	000f883a 	mov	r7,zero
    8d50:	dc400115 	stw	r17,4(sp)
    8d54:	dc000015 	stw	r16,0(sp)
    8d58:	dfc00215 	stw	ra,8(sp)
    8d5c:	2023883a 	mov	r17,r4
    8d60:	2821883a 	mov	r16,r5
    8d64:	000b5a80 	call	b5a8 <__eqdf2>
    8d68:	10000726 	beq	r2,zero,8d88 <__math_check_uflow+0x44>
    8d6c:	8805883a 	mov	r2,r17
    8d70:	8007883a 	mov	r3,r16
    8d74:	dfc00217 	ldw	ra,8(sp)
    8d78:	dc400117 	ldw	r17,4(sp)
    8d7c:	dc000017 	ldw	r16,0(sp)
    8d80:	dec00304 	addi	sp,sp,12
    8d84:	f800283a 	ret
    8d88:	01800884 	movi	r6,34
    8d8c:	8809883a 	mov	r4,r17
    8d90:	800b883a 	mov	r5,r16
    8d94:	dfc00217 	ldw	ra,8(sp)
    8d98:	dc400117 	ldw	r17,4(sp)
    8d9c:	dc000017 	ldw	r16,0(sp)
    8da0:	dec00304 	addi	sp,sp,12
    8da4:	0008ba81 	jmpi	8ba8 <with_errno>

00008da8 <__math_check_oflow>:
    8da8:	00a00034 	movhi	r2,32768
    8dac:	defffc04 	addi	sp,sp,-16
    8db0:	10bfffc4 	addi	r2,r2,-1
    8db4:	dc000015 	stw	r16,0(sp)
    8db8:	01dffc34 	movhi	r7,32752
    8dbc:	28a0703a 	and	r16,r5,r2
    8dc0:	dc400115 	stw	r17,4(sp)
    8dc4:	01bfffc4 	movi	r6,-1
    8dc8:	2823883a 	mov	r17,r5
    8dcc:	39ffffc4 	addi	r7,r7,-1
    8dd0:	800b883a 	mov	r5,r16
    8dd4:	dc800215 	stw	r18,8(sp)
    8dd8:	dfc00315 	stw	ra,12(sp)
    8ddc:	2025883a 	mov	r18,r4
    8de0:	000c7780 	call	c778 <__unorddf2>
    8de4:	1000071e 	bne	r2,zero,8e04 <__math_check_oflow+0x5c>
    8de8:	01dffc34 	movhi	r7,32752
    8dec:	01bfffc4 	movi	r6,-1
    8df0:	39ffffc4 	addi	r7,r7,-1
    8df4:	9009883a 	mov	r4,r18
    8df8:	800b883a 	mov	r5,r16
    8dfc:	000b7100 	call	b710 <__ledf2>
    8e00:	00800816 	blt	zero,r2,8e24 <__math_check_oflow+0x7c>
    8e04:	9005883a 	mov	r2,r18
    8e08:	8807883a 	mov	r3,r17
    8e0c:	dfc00317 	ldw	ra,12(sp)
    8e10:	dc800217 	ldw	r18,8(sp)
    8e14:	dc400117 	ldw	r17,4(sp)
    8e18:	dc000017 	ldw	r16,0(sp)
    8e1c:	dec00404 	addi	sp,sp,16
    8e20:	f800283a 	ret
    8e24:	01800884 	movi	r6,34
    8e28:	9009883a 	mov	r4,r18
    8e2c:	880b883a 	mov	r5,r17
    8e30:	dfc00317 	ldw	ra,12(sp)
    8e34:	dc800217 	ldw	r18,8(sp)
    8e38:	dc400117 	ldw	r17,4(sp)
    8e3c:	dc000017 	ldw	r16,0(sp)
    8e40:	dec00404 	addi	sp,sp,16
    8e44:	0008ba81 	jmpi	8ba8 <with_errno>

00008e48 <scalbn>:
    8e48:	2807d53a 	srai	r3,r5,20
    8e4c:	defffe04 	addi	sp,sp,-8
    8e50:	dc000015 	stw	r16,0(sp)
    8e54:	dfc00115 	stw	ra,4(sp)
    8e58:	18c1ffcc 	andi	r3,r3,2047
    8e5c:	280f883a 	mov	r7,r5
    8e60:	2005883a 	mov	r2,r4
    8e64:	3021883a 	mov	r16,r6
    8e68:	1800241e 	bne	r3,zero,8efc <scalbn+0xb4>
    8e6c:	00e00034 	movhi	r3,32768
    8e70:	18ffffc4 	addi	r3,r3,-1
    8e74:	28c6703a 	and	r3,r5,r3
    8e78:	1906b03a 	or	r3,r3,r4
    8e7c:	18003626 	beq	r3,zero,8f58 <scalbn+0x110>
    8e80:	000d883a 	mov	r6,zero
    8e84:	01d0d434 	movhi	r7,17232
    8e88:	000b7f80 	call	b7f8 <__muldf3>
    8e8c:	01bffff4 	movhi	r6,65535
    8e90:	318f2c04 	addi	r6,r6,15536
    8e94:	1009883a 	mov	r4,r2
    8e98:	180f883a 	mov	r7,r3
    8e9c:	81804d16 	blt	r16,r6,8fd4 <scalbn+0x18c>
    8ea0:	1807d53a 	srai	r3,r3,20
    8ea4:	3811883a 	mov	r8,r7
    8ea8:	18c1ffcc 	andi	r3,r3,2047
    8eac:	18fff284 	addi	r3,r3,-54
    8eb0:	80c7883a 	add	r3,r16,r3
    8eb4:	1901ffd0 	cmplti	r4,r3,2047
    8eb8:	20001926 	beq	r4,zero,8f20 <scalbn+0xd8>
    8ebc:	00c03c16 	blt	zero,r3,8fb0 <scalbn+0x168>
    8ec0:	193ff2c8 	cmpgei	r4,r3,-53
    8ec4:	20002c1e 	bne	r4,zero,8f78 <scalbn+0x130>
    8ec8:	00b0d414 	movui	r2,50000
    8ecc:	14001416 	blt	r2,r16,8f20 <scalbn+0xd8>
    8ed0:	0130be74 	movhi	r4,49913
    8ed4:	01406974 	movhi	r5,421
    8ed8:	213cd644 	addi	r4,r4,-3239
    8edc:	295b87c4 	addi	r5,r5,28191
    8ee0:	38004616 	blt	r7,zero,8ffc <scalbn+0x1b4>
    8ee4:	01b0be74 	movhi	r6,49913
    8ee8:	01c06974 	movhi	r7,421
    8eec:	31bcd644 	addi	r6,r6,-3239
    8ef0:	39db87c4 	addi	r7,r7,28191
    8ef4:	000b7f80 	call	b7f8 <__muldf3>
    8ef8:	00001306 	br	8f48 <scalbn+0x100>
    8efc:	1981ffd8 	cmpnei	r6,r3,2047
    8f00:	2811883a 	mov	r8,r5
    8f04:	303fea1e 	bne	r6,zero,8eb0 <scalbn+0x68>
    8f08:	200d883a 	mov	r6,r4
    8f0c:	000a4680 	call	a468 <__adddf3>
    8f10:	dfc00117 	ldw	ra,4(sp)
    8f14:	dc000017 	ldw	r16,0(sp)
    8f18:	dec00204 	addi	sp,sp,8
    8f1c:	f800283a 	ret
    8f20:	01220034 	movhi	r4,34816
    8f24:	015f8e34 	movhi	r5,32312
    8f28:	211d6704 	addi	r4,r4,30108
    8f2c:	29790f04 	addi	r5,r5,-7108
    8f30:	38000e16 	blt	r7,zero,8f6c <scalbn+0x124>
    8f34:	01a20034 	movhi	r6,34816
    8f38:	01df8e34 	movhi	r7,32312
    8f3c:	319d6704 	addi	r6,r6,30108
    8f40:	39f90f04 	addi	r7,r7,-7108
    8f44:	000b7f80 	call	b7f8 <__muldf3>
    8f48:	dfc00117 	ldw	ra,4(sp)
    8f4c:	dc000017 	ldw	r16,0(sp)
    8f50:	dec00204 	addi	sp,sp,8
    8f54:	f800283a 	ret
    8f58:	2807883a 	mov	r3,r5
    8f5c:	dfc00117 	ldw	ra,4(sp)
    8f60:	dc000017 	ldw	r16,0(sp)
    8f64:	dec00204 	addi	sp,sp,8
    8f68:	f800283a 	ret
    8f6c:	017f8e34 	movhi	r5,65080
    8f70:	29790f04 	addi	r5,r5,-7108
    8f74:	003fef06 	br	8f34 <scalbn+0xec>
    8f78:	18c00d84 	addi	r3,r3,54
    8f7c:	1806953a 	slli	r3,r3,20
    8f80:	01600434 	movhi	r5,32784
    8f84:	297fffc4 	addi	r5,r5,-1
    8f88:	414a703a 	and	r5,r8,r5
    8f8c:	000d883a 	mov	r6,zero
    8f90:	01cf2434 	movhi	r7,15504
    8f94:	1009883a 	mov	r4,r2
    8f98:	194ab03a 	or	r5,r3,r5
    8f9c:	000b7f80 	call	b7f8 <__muldf3>
    8fa0:	dfc00117 	ldw	ra,4(sp)
    8fa4:	dc000017 	ldw	r16,0(sp)
    8fa8:	dec00204 	addi	sp,sp,8
    8fac:	f800283a 	ret
    8fb0:	1806953a 	slli	r3,r3,20
    8fb4:	01e00434 	movhi	r7,32784
    8fb8:	39ffffc4 	addi	r7,r7,-1
    8fbc:	41ce703a 	and	r7,r8,r7
    8fc0:	38c6b03a 	or	r3,r7,r3
    8fc4:	dfc00117 	ldw	ra,4(sp)
    8fc8:	dc000017 	ldw	r16,0(sp)
    8fcc:	dec00204 	addi	sp,sp,8
    8fd0:	f800283a 	ret
    8fd4:	01b0be74 	movhi	r6,49913
    8fd8:	01c06974 	movhi	r7,421
    8fdc:	31bcd644 	addi	r6,r6,-3239
    8fe0:	39db87c4 	addi	r7,r7,28191
    8fe4:	180b883a 	mov	r5,r3
    8fe8:	000b7f80 	call	b7f8 <__muldf3>
    8fec:	dfc00117 	ldw	ra,4(sp)
    8ff0:	dc000017 	ldw	r16,0(sp)
    8ff4:	dec00204 	addi	sp,sp,8
    8ff8:	f800283a 	ret
    8ffc:	01606974 	movhi	r5,33189
    9000:	295b87c4 	addi	r5,r5,28191
    9004:	003fb706 	br	8ee4 <scalbn+0x9c>

00009008 <floorf>:
    9008:	00a00034 	movhi	r2,32768
    900c:	defffb04 	addi	sp,sp,-20
    9010:	10bfffc4 	addi	r2,r2,-1
    9014:	dc400115 	stw	r17,4(sp)
    9018:	1122703a 	and	r17,r2,r4
    901c:	dc800215 	stw	r18,8(sp)
    9020:	8824d5fa 	srli	r18,r17,23
    9024:	dc000015 	stw	r16,0(sp)
    9028:	dfc00415 	stw	ra,16(sp)
    902c:	94bfe044 	addi	r18,r18,-127
    9030:	dcc00315 	stw	r19,12(sp)
    9034:	908005c8 	cmpgei	r2,r18,23
    9038:	2021883a 	mov	r16,r4
    903c:	1000271e 	bne	r2,zero,90dc <floorf+0xd4>
    9040:	2027883a 	mov	r19,r4
    9044:	90001316 	blt	r18,zero,9094 <floorf+0x8c>
    9048:	00802034 	movhi	r2,128
    904c:	10bfffc4 	addi	r2,r2,-1
    9050:	14a3d83a 	sra	r17,r2,r18
    9054:	8904703a 	and	r2,r17,r4
    9058:	10001826 	beq	r2,zero,90bc <floorf+0xb4>
    905c:	015c52b4 	movhi	r5,29002
    9060:	297cb284 	addi	r5,r5,-3382
    9064:	00093fc0 	call	93fc <__addsf3>
    9068:	000b883a 	mov	r5,zero
    906c:	1009883a 	mov	r4,r2
    9070:	00098d80 	call	98d8 <__gesf2>
    9074:	0080110e 	bge	zero,r2,90bc <floorf+0xb4>
    9078:	8000030e 	bge	r16,zero,9088 <floorf+0x80>
    907c:	00802034 	movhi	r2,128
    9080:	1485d83a 	sra	r2,r2,r18
    9084:	1427883a 	add	r19,r2,r16
    9088:	0460303a 	nor	r16,zero,r17
    908c:	84c4703a 	and	r2,r16,r19
    9090:	00000b06 	br	90c0 <floorf+0xb8>
    9094:	015c52b4 	movhi	r5,29002
    9098:	297cb284 	addi	r5,r5,-3382
    909c:	00093fc0 	call	93fc <__addsf3>
    90a0:	000b883a 	mov	r5,zero
    90a4:	1009883a 	mov	r4,r2
    90a8:	00098d80 	call	98d8 <__gesf2>
    90ac:	0080030e 	bge	zero,r2,90bc <floorf+0xb4>
    90b0:	80000f16 	blt	r16,zero,90f0 <floorf+0xe8>
    90b4:	0005883a 	mov	r2,zero
    90b8:	00000106 	br	90c0 <floorf+0xb8>
    90bc:	8005883a 	mov	r2,r16
    90c0:	dfc00417 	ldw	ra,16(sp)
    90c4:	dcc00317 	ldw	r19,12(sp)
    90c8:	dc800217 	ldw	r18,8(sp)
    90cc:	dc400117 	ldw	r17,4(sp)
    90d0:	dc000017 	ldw	r16,0(sp)
    90d4:	dec00504 	addi	sp,sp,20
    90d8:	f800283a 	ret
    90dc:	009fe034 	movhi	r2,32640
    90e0:	88bff636 	bltu	r17,r2,90bc <floorf+0xb4>
    90e4:	200b883a 	mov	r5,r4
    90e8:	00093fc0 	call	93fc <__addsf3>
    90ec:	003ff406 	br	90c0 <floorf+0xb8>
    90f0:	883ff226 	beq	r17,zero,90bc <floorf+0xb4>
    90f4:	00afe034 	movhi	r2,49024
    90f8:	003ff106 	br	90c0 <floorf+0xb8>

000090fc <scalbnf>:
    90fc:	00e00034 	movhi	r3,32768
    9100:	18ffffc4 	addi	r3,r3,-1
    9104:	1906703a 	and	r3,r3,r4
    9108:	2005883a 	mov	r2,r4
    910c:	18002626 	beq	r3,zero,91a8 <scalbnf+0xac>
    9110:	defffe04 	addi	sp,sp,-8
    9114:	dc000015 	stw	r16,0(sp)
    9118:	dfc00115 	stw	ra,4(sp)
    911c:	019fe034 	movhi	r6,32640
    9120:	2821883a 	mov	r16,r5
    9124:	200b883a 	mov	r5,r4
    9128:	19801a2e 	bgeu	r3,r6,9194 <scalbnf+0x98>
    912c:	215fe02c 	andhi	r5,r4,32640
    9130:	28001e1e 	bne	r5,zero,91ac <scalbnf+0xb0>
    9134:	01530034 	movhi	r5,19456
    9138:	00099900 	call	9990 <__mulsf3>
    913c:	00fffff4 	movhi	r3,65535
    9140:	18cf2c04 	addi	r3,r3,15536
    9144:	1009883a 	mov	r4,r2
    9148:	80c02616 	blt	r16,r3,91e4 <scalbnf+0xe8>
    914c:	1007d5fa 	srai	r3,r2,23
    9150:	18c03fcc 	andi	r3,r3,255
    9154:	18fff9c4 	addi	r3,r3,-25
    9158:	1c07883a 	add	r3,r3,r16
    915c:	19403fd0 	cmplti	r5,r3,255
    9160:	2800161e 	bne	r5,zero,91bc <scalbnf+0xc0>
    9164:	011c52b4 	movhi	r4,29002
    9168:	213cb284 	addi	r4,r4,-3382
    916c:	1000020e 	bge	r2,zero,9178 <scalbnf+0x7c>
    9170:	013c52b4 	movhi	r4,61770
    9174:	213cb284 	addi	r4,r4,-3382
    9178:	015c52b4 	movhi	r5,29002
    917c:	297cb284 	addi	r5,r5,-3382
    9180:	00099900 	call	9990 <__mulsf3>
    9184:	dfc00117 	ldw	ra,4(sp)
    9188:	dc000017 	ldw	r16,0(sp)
    918c:	dec00204 	addi	sp,sp,8
    9190:	f800283a 	ret
    9194:	00093fc0 	call	93fc <__addsf3>
    9198:	dfc00117 	ldw	ra,4(sp)
    919c:	dc000017 	ldw	r16,0(sp)
    91a0:	dec00204 	addi	sp,sp,8
    91a4:	f800283a 	ret
    91a8:	f800283a 	ret
    91ac:	1806d5fa 	srli	r3,r3,23
    91b0:	1c07883a 	add	r3,r3,r16
    91b4:	19403fd0 	cmplti	r5,r3,255
    91b8:	283fea26 	beq	r5,zero,9164 <scalbnf+0x68>
    91bc:	00c01016 	blt	zero,r3,9200 <scalbnf+0x104>
    91c0:	197ffa88 	cmpgei	r5,r3,-22
    91c4:	2800171e 	bne	r5,zero,9224 <scalbnf+0x128>
    91c8:	00f0d414 	movui	r3,50000
    91cc:	1c3fe516 	blt	r3,r16,9164 <scalbnf+0x68>
    91d0:	010368b4 	movhi	r4,3490
    91d4:	21109804 	addi	r4,r4,16992
    91d8:	1000020e 	bge	r2,zero,91e4 <scalbnf+0xe8>
    91dc:	012368b4 	movhi	r4,36258
    91e0:	21109804 	addi	r4,r4,16992
    91e4:	014368b4 	movhi	r5,3490
    91e8:	29509804 	addi	r5,r5,16992
    91ec:	00099900 	call	9990 <__mulsf3>
    91f0:	dfc00117 	ldw	ra,4(sp)
    91f4:	dc000017 	ldw	r16,0(sp)
    91f8:	dec00204 	addi	sp,sp,8
    91fc:	f800283a 	ret
    9200:	180695fa 	slli	r3,r3,23
    9204:	00a02034 	movhi	r2,32896
    9208:	10bfffc4 	addi	r2,r2,-1
    920c:	2084703a 	and	r2,r4,r2
    9210:	10c4b03a 	or	r2,r2,r3
    9214:	dfc00117 	ldw	ra,4(sp)
    9218:	dc000017 	ldw	r16,0(sp)
    921c:	dec00204 	addi	sp,sp,8
    9220:	f800283a 	ret
    9224:	18c00644 	addi	r3,r3,25
    9228:	180695fa 	slli	r3,r3,23
    922c:	00a02034 	movhi	r2,32896
    9230:	10bfffc4 	addi	r2,r2,-1
    9234:	2088703a 	and	r4,r4,r2
    9238:	014cc034 	movhi	r5,13056
    923c:	1908b03a 	or	r4,r3,r4
    9240:	00099900 	call	9990 <__mulsf3>
    9244:	003fd406 	br	9198 <scalbnf+0x9c>

00009248 <__divsi3>:
    9248:	20001a16 	blt	r4,zero,92b4 <__divsi3+0x6c>
    924c:	000f883a 	mov	r7,zero
    9250:	2800020e 	bge	r5,zero,925c <__divsi3+0x14>
    9254:	014bc83a 	sub	r5,zero,r5
    9258:	39c0005c 	xori	r7,r7,1
    925c:	200d883a 	mov	r6,r4
    9260:	00c00044 	movi	r3,1
    9264:	2900092e 	bgeu	r5,r4,928c <__divsi3+0x44>
    9268:	00800804 	movi	r2,32
    926c:	00c00044 	movi	r3,1
    9270:	00000106 	br	9278 <__divsi3+0x30>
    9274:	10001226 	beq	r2,zero,92c0 <__divsi3+0x78>
    9278:	294b883a 	add	r5,r5,r5
    927c:	10bfffc4 	addi	r2,r2,-1
    9280:	18c7883a 	add	r3,r3,r3
    9284:	293ffb36 	bltu	r5,r4,9274 <__divsi3+0x2c>
    9288:	18000d26 	beq	r3,zero,92c0 <__divsi3+0x78>
    928c:	0005883a 	mov	r2,zero
    9290:	31400236 	bltu	r6,r5,929c <__divsi3+0x54>
    9294:	314dc83a 	sub	r6,r6,r5
    9298:	10c4b03a 	or	r2,r2,r3
    929c:	1806d07a 	srli	r3,r3,1
    92a0:	280ad07a 	srli	r5,r5,1
    92a4:	183ffa1e 	bne	r3,zero,9290 <__divsi3+0x48>
    92a8:	38000126 	beq	r7,zero,92b0 <__divsi3+0x68>
    92ac:	0085c83a 	sub	r2,zero,r2
    92b0:	f800283a 	ret
    92b4:	0109c83a 	sub	r4,zero,r4
    92b8:	01c00044 	movi	r7,1
    92bc:	003fe406 	br	9250 <__divsi3+0x8>
    92c0:	0005883a 	mov	r2,zero
    92c4:	003ff806 	br	92a8 <__divsi3+0x60>

000092c8 <__modsi3>:
    92c8:	20001916 	blt	r4,zero,9330 <__modsi3+0x68>
    92cc:	000f883a 	mov	r7,zero
    92d0:	2005883a 	mov	r2,r4
    92d4:	2800010e 	bge	r5,zero,92dc <__modsi3+0x14>
    92d8:	014bc83a 	sub	r5,zero,r5
    92dc:	00c00044 	movi	r3,1
    92e0:	2900092e 	bgeu	r5,r4,9308 <__modsi3+0x40>
    92e4:	01800804 	movi	r6,32
    92e8:	00c00044 	movi	r3,1
    92ec:	00000106 	br	92f4 <__modsi3+0x2c>
    92f0:	30000d26 	beq	r6,zero,9328 <__modsi3+0x60>
    92f4:	294b883a 	add	r5,r5,r5
    92f8:	31bfffc4 	addi	r6,r6,-1
    92fc:	18c7883a 	add	r3,r3,r3
    9300:	293ffb36 	bltu	r5,r4,92f0 <__modsi3+0x28>
    9304:	18000826 	beq	r3,zero,9328 <__modsi3+0x60>
    9308:	1806d07a 	srli	r3,r3,1
    930c:	11400136 	bltu	r2,r5,9314 <__modsi3+0x4c>
    9310:	1145c83a 	sub	r2,r2,r5
    9314:	280ad07a 	srli	r5,r5,1
    9318:	183ffb1e 	bne	r3,zero,9308 <__modsi3+0x40>
    931c:	38000126 	beq	r7,zero,9324 <__modsi3+0x5c>
    9320:	0085c83a 	sub	r2,zero,r2
    9324:	f800283a 	ret
    9328:	2005883a 	mov	r2,r4
    932c:	003ffb06 	br	931c <__modsi3+0x54>
    9330:	0109c83a 	sub	r4,zero,r4
    9334:	01c00044 	movi	r7,1
    9338:	003fe506 	br	92d0 <__modsi3+0x8>

0000933c <__udivsi3>:
    933c:	200d883a 	mov	r6,r4
    9340:	2900152e 	bgeu	r5,r4,9398 <__udivsi3+0x5c>
    9344:	28001416 	blt	r5,zero,9398 <__udivsi3+0x5c>
    9348:	00800804 	movi	r2,32
    934c:	00c00044 	movi	r3,1
    9350:	00000206 	br	935c <__udivsi3+0x20>
    9354:	10000e26 	beq	r2,zero,9390 <__udivsi3+0x54>
    9358:	28000516 	blt	r5,zero,9370 <__udivsi3+0x34>
    935c:	294b883a 	add	r5,r5,r5
    9360:	10bfffc4 	addi	r2,r2,-1
    9364:	18c7883a 	add	r3,r3,r3
    9368:	293ffa36 	bltu	r5,r4,9354 <__udivsi3+0x18>
    936c:	18000826 	beq	r3,zero,9390 <__udivsi3+0x54>
    9370:	0005883a 	mov	r2,zero
    9374:	31400236 	bltu	r6,r5,9380 <__udivsi3+0x44>
    9378:	314dc83a 	sub	r6,r6,r5
    937c:	10c4b03a 	or	r2,r2,r3
    9380:	1806d07a 	srli	r3,r3,1
    9384:	280ad07a 	srli	r5,r5,1
    9388:	183ffa1e 	bne	r3,zero,9374 <__udivsi3+0x38>
    938c:	f800283a 	ret
    9390:	0005883a 	mov	r2,zero
    9394:	f800283a 	ret
    9398:	00c00044 	movi	r3,1
    939c:	003ff406 	br	9370 <__udivsi3+0x34>

000093a0 <__umodsi3>:
    93a0:	2005883a 	mov	r2,r4
    93a4:	2900132e 	bgeu	r5,r4,93f4 <__umodsi3+0x54>
    93a8:	28001216 	blt	r5,zero,93f4 <__umodsi3+0x54>
    93ac:	01800804 	movi	r6,32
    93b0:	00c00044 	movi	r3,1
    93b4:	00000206 	br	93c0 <__umodsi3+0x20>
    93b8:	30000c26 	beq	r6,zero,93ec <__umodsi3+0x4c>
    93bc:	28000516 	blt	r5,zero,93d4 <__umodsi3+0x34>
    93c0:	294b883a 	add	r5,r5,r5
    93c4:	31bfffc4 	addi	r6,r6,-1
    93c8:	18c7883a 	add	r3,r3,r3
    93cc:	293ffa36 	bltu	r5,r4,93b8 <__umodsi3+0x18>
    93d0:	18000626 	beq	r3,zero,93ec <__umodsi3+0x4c>
    93d4:	1806d07a 	srli	r3,r3,1
    93d8:	11400136 	bltu	r2,r5,93e0 <__umodsi3+0x40>
    93dc:	1145c83a 	sub	r2,r2,r5
    93e0:	280ad07a 	srli	r5,r5,1
    93e4:	183ffb1e 	bne	r3,zero,93d4 <__umodsi3+0x34>
    93e8:	f800283a 	ret
    93ec:	2005883a 	mov	r2,r4
    93f0:	f800283a 	ret
    93f4:	00c00044 	movi	r3,1
    93f8:	003ff606 	br	93d4 <__umodsi3+0x34>

000093fc <__addsf3>:
    93fc:	defffc04 	addi	sp,sp,-16
    9400:	2806d5fa 	srli	r3,r5,23
    9404:	dc000015 	stw	r16,0(sp)
    9408:	2020d5fa 	srli	r16,r4,23
    940c:	200cd7fa 	srli	r6,r4,31
    9410:	00802034 	movhi	r2,128
    9414:	2812d7fa 	srli	r9,r5,31
    9418:	10bfffc4 	addi	r2,r2,-1
    941c:	1114703a 	and	r10,r2,r4
    9420:	1b003fcc 	andi	r12,r3,255
    9424:	dc400115 	stw	r17,4(sp)
    9428:	84003fcc 	andi	r16,r16,255
    942c:	115a703a 	and	r13,r2,r5
    9430:	dfc00315 	stw	ra,12(sp)
    9434:	dc800215 	stw	r18,8(sp)
    9438:	500e90fa 	slli	r7,r10,3
    943c:	681090fa 	slli	r8,r13,3
    9440:	5007883a 	mov	r3,r10
    9444:	3023883a 	mov	r17,r6
    9448:	8317c83a 	sub	r11,r16,r12
    944c:	32403926 	beq	r6,r9,9534 <__addsf3+0x138>
    9450:	02c02e0e 	bge	zero,r11,950c <__addsf3+0x110>
    9454:	60004c26 	beq	r12,zero,9588 <__addsf3+0x18c>
    9458:	80803fe0 	cmpeqi	r2,r16,255
    945c:	1000801e 	bne	r2,zero,9660 <__addsf3+0x264>
    9460:	42010034 	orhi	r8,r8,1024
    9464:	58800710 	cmplti	r2,r11,28
    9468:	10009e1e 	bne	r2,zero,96e4 <__addsf3+0x2e8>
    946c:	01000044 	movi	r4,1
    9470:	3909c83a 	sub	r4,r7,r4
    9474:	2081002c 	andhi	r2,r4,1024
    9478:	10006826 	beq	r2,zero,961c <__addsf3+0x220>
    947c:	04810034 	movhi	r18,1024
    9480:	94bfffc4 	addi	r18,r18,-1
    9484:	24a4703a 	and	r18,r4,r18
    9488:	9009883a 	mov	r4,r18
    948c:	000cc000 	call	cc00 <__clzsi2>
    9490:	10bffec4 	addi	r2,r2,-5
    9494:	9088983a 	sll	r4,r18,r2
    9498:	1400880e 	bge	r2,r16,96bc <__addsf3+0x2c0>
    949c:	00ff0034 	movhi	r3,64512
    94a0:	18ffffc4 	addi	r3,r3,-1
    94a4:	80a1c83a 	sub	r16,r16,r2
    94a8:	20c8703a 	and	r4,r4,r3
    94ac:	208001cc 	andi	r2,r4,7
    94b0:	10000426 	beq	r2,zero,94c4 <__addsf3+0xc8>
    94b4:	208003cc 	andi	r2,r4,15
    94b8:	10800120 	cmpeqi	r2,r2,4
    94bc:	1000011e 	bne	r2,zero,94c4 <__addsf3+0xc8>
    94c0:	21000104 	addi	r4,r4,4
    94c4:	2081002c 	andhi	r2,r4,1024
    94c8:	10005626 	beq	r2,zero,9624 <__addsf3+0x228>
    94cc:	84000044 	addi	r16,r16,1
    94d0:	80803fe0 	cmpeqi	r2,r16,255
    94d4:	1000461e 	bne	r2,zero,95f0 <__addsf3+0x1f4>
    94d8:	200491ba 	slli	r2,r4,6
    94dc:	1006d27a 	srli	r3,r2,9
    94e0:	84003fcc 	andi	r16,r16,255
    94e4:	800495fa 	slli	r2,r16,23
    94e8:	882297fa 	slli	r17,r17,31
    94ec:	10c4b03a 	or	r2,r2,r3
    94f0:	1444b03a 	or	r2,r2,r17
    94f4:	dfc00317 	ldw	ra,12(sp)
    94f8:	dc800217 	ldw	r18,8(sp)
    94fc:	dc400117 	ldw	r17,4(sp)
    9500:	dc000017 	ldw	r16,0(sp)
    9504:	dec00404 	addi	sp,sp,16
    9508:	f800283a 	ret
    950c:	58002526 	beq	r11,zero,95a4 <__addsf3+0x1a8>
    9510:	6417c83a 	sub	r11,r12,r16
    9514:	8000821e 	bne	r16,zero,9720 <__addsf3+0x324>
    9518:	38006426 	beq	r7,zero,96ac <__addsf3+0x2b0>
    951c:	58bfffc4 	addi	r2,r11,-1
    9520:	1000c226 	beq	r2,zero,982c <__addsf3+0x430>
    9524:	5ac03fe0 	cmpeqi	r11,r11,255
    9528:	58004b1e 	bne	r11,zero,9658 <__addsf3+0x25c>
    952c:	1017883a 	mov	r11,r2
    9530:	00007e06 	br	972c <__addsf3+0x330>
    9534:	02c0510e 	bge	zero,r11,967c <__addsf3+0x280>
    9538:	60002626 	beq	r12,zero,95d4 <__addsf3+0x1d8>
    953c:	80803fe0 	cmpeqi	r2,r16,255
    9540:	1000471e 	bne	r2,zero,9660 <__addsf3+0x264>
    9544:	42010034 	orhi	r8,r8,1024
    9548:	58800710 	cmplti	r2,r11,28
    954c:	10007e1e 	bne	r2,zero,9748 <__addsf3+0x34c>
    9550:	01000044 	movi	r4,1
    9554:	21c9883a 	add	r4,r4,r7
    9558:	2081002c 	andhi	r2,r4,1024
    955c:	10002f26 	beq	r2,zero,961c <__addsf3+0x220>
    9560:	84000044 	addi	r16,r16,1
    9564:	80803fe0 	cmpeqi	r2,r16,255
    9568:	1000211e 	bne	r2,zero,95f0 <__addsf3+0x1f4>
    956c:	2004d07a 	srli	r2,r4,1
    9570:	00df8034 	movhi	r3,32256
    9574:	18ffffc4 	addi	r3,r3,-1
    9578:	2100004c 	andi	r4,r4,1
    957c:	10c4703a 	and	r2,r2,r3
    9580:	1108b03a 	or	r4,r2,r4
    9584:	003fc906 	br	94ac <__addsf3+0xb0>
    9588:	40004a26 	beq	r8,zero,96b4 <__addsf3+0x2b8>
    958c:	58bfffc4 	addi	r2,r11,-1
    9590:	10009326 	beq	r2,zero,97e0 <__addsf3+0x3e4>
    9594:	59003fe0 	cmpeqi	r4,r11,255
    9598:	2000311e 	bne	r4,zero,9660 <__addsf3+0x264>
    959c:	1017883a 	mov	r11,r2
    95a0:	003fb006 	br	9464 <__addsf3+0x68>
    95a4:	81800044 	addi	r6,r16,1
    95a8:	31803f8c 	andi	r6,r6,254
    95ac:	3000541e 	bne	r6,zero,9700 <__addsf3+0x304>
    95b0:	80007e1e 	bne	r16,zero,97ac <__addsf3+0x3b0>
    95b4:	3800a326 	beq	r7,zero,9844 <__addsf3+0x448>
    95b8:	40009326 	beq	r8,zero,9808 <__addsf3+0x40c>
    95bc:	3a09c83a 	sub	r4,r7,r8
    95c0:	2081002c 	andhi	r2,r4,1024
    95c4:	1000a626 	beq	r2,zero,9860 <__addsf3+0x464>
    95c8:	41c9c83a 	sub	r4,r8,r7
    95cc:	4823883a 	mov	r17,r9
    95d0:	003fb606 	br	94ac <__addsf3+0xb0>
    95d4:	40003726 	beq	r8,zero,96b4 <__addsf3+0x2b8>
    95d8:	58bfffc4 	addi	r2,r11,-1
    95dc:	10007b26 	beq	r2,zero,97cc <__addsf3+0x3d0>
    95e0:	5ac03fe0 	cmpeqi	r11,r11,255
    95e4:	58001e1e 	bne	r11,zero,9660 <__addsf3+0x264>
    95e8:	1017883a 	mov	r11,r2
    95ec:	003fd606 	br	9548 <__addsf3+0x14c>
    95f0:	043fffc4 	movi	r16,-1
    95f4:	0007883a 	mov	r3,zero
    95f8:	003fb906 	br	94e0 <__addsf3+0xe4>
    95fc:	80800044 	addi	r2,r16,1
    9600:	11803f8c 	andi	r6,r2,254
    9604:	30005726 	beq	r6,zero,9764 <__addsf3+0x368>
    9608:	10c03fe0 	cmpeqi	r3,r2,255
    960c:	183ff81e 	bne	r3,zero,95f0 <__addsf3+0x1f4>
    9610:	3a09883a 	add	r4,r7,r8
    9614:	2008d07a 	srli	r4,r4,1
    9618:	1021883a 	mov	r16,r2
    961c:	208001cc 	andi	r2,r4,7
    9620:	103fa41e 	bne	r2,zero,94b4 <__addsf3+0xb8>
    9624:	2014d0fa 	srli	r10,r4,3
    9628:	80803fe0 	cmpeqi	r2,r16,255
    962c:	10000c1e 	bne	r2,zero,9660 <__addsf3+0x264>
    9630:	00802034 	movhi	r2,128
    9634:	10bfffc4 	addi	r2,r2,-1
    9638:	5086703a 	and	r3,r10,r2
    963c:	003fa806 	br	94e0 <__addsf3+0xe4>
    9640:	38000626 	beq	r7,zero,965c <__addsf3+0x260>
    9644:	40000626 	beq	r8,zero,9660 <__addsf3+0x264>
    9648:	2080102c 	andhi	r2,r4,64
    964c:	10000426 	beq	r2,zero,9660 <__addsf3+0x264>
    9650:	2940102c 	andhi	r5,r5,64
    9654:	2800021e 	bne	r5,zero,9660 <__addsf3+0x264>
    9658:	4823883a 	mov	r17,r9
    965c:	6815883a 	mov	r10,r13
    9660:	503fe326 	beq	r10,zero,95f0 <__addsf3+0x1f4>
    9664:	00802034 	movhi	r2,128
    9668:	50c01034 	orhi	r3,r10,64
    966c:	10bfffc4 	addi	r2,r2,-1
    9670:	1886703a 	and	r3,r3,r2
    9674:	043fffc4 	movi	r16,-1
    9678:	003f9906 	br	94e0 <__addsf3+0xe4>
    967c:	583fdf26 	beq	r11,zero,95fc <__addsf3+0x200>
    9680:	6417c83a 	sub	r11,r12,r16
    9684:	80004226 	beq	r16,zero,9790 <__addsf3+0x394>
    9688:	60803fe0 	cmpeqi	r2,r12,255
    968c:	103ff31e 	bne	r2,zero,965c <__addsf3+0x260>
    9690:	39c10034 	orhi	r7,r7,1024
    9694:	58800710 	cmplti	r2,r11,28
    9698:	10005d1e 	bne	r2,zero,9810 <__addsf3+0x414>
    969c:	01000044 	movi	r4,1
    96a0:	2209883a 	add	r4,r4,r8
    96a4:	6021883a 	mov	r16,r12
    96a8:	003fab06 	br	9558 <__addsf3+0x15c>
    96ac:	4823883a 	mov	r17,r9
    96b0:	6815883a 	mov	r10,r13
    96b4:	5821883a 	mov	r16,r11
    96b8:	003fdb06 	br	9628 <__addsf3+0x22c>
    96bc:	1405c83a 	sub	r2,r2,r16
    96c0:	14800044 	addi	r18,r2,1
    96c4:	00800804 	movi	r2,32
    96c8:	1485c83a 	sub	r2,r2,r18
    96cc:	2084983a 	sll	r2,r4,r2
    96d0:	2488d83a 	srl	r4,r4,r18
    96d4:	0021883a 	mov	r16,zero
    96d8:	1004c03a 	cmpne	r2,r2,zero
    96dc:	1108b03a 	or	r4,r2,r4
    96e0:	003f7206 	br	94ac <__addsf3+0xb0>
    96e4:	01000804 	movi	r4,32
    96e8:	22c9c83a 	sub	r4,r4,r11
    96ec:	4108983a 	sll	r4,r8,r4
    96f0:	42d0d83a 	srl	r8,r8,r11
    96f4:	2008c03a 	cmpne	r4,r4,zero
    96f8:	2208b03a 	or	r4,r4,r8
    96fc:	003f5c06 	br	9470 <__addsf3+0x74>
    9700:	3a25c83a 	sub	r18,r7,r8
    9704:	9081002c 	andhi	r2,r18,1024
    9708:	10002d1e 	bne	r2,zero,97c0 <__addsf3+0x3c4>
    970c:	903f5e1e 	bne	r18,zero,9488 <__addsf3+0x8c>
    9710:	0023883a 	mov	r17,zero
    9714:	0021883a 	mov	r16,zero
    9718:	0007883a 	mov	r3,zero
    971c:	003f7006 	br	94e0 <__addsf3+0xe4>
    9720:	60803fe0 	cmpeqi	r2,r12,255
    9724:	103fcc1e 	bne	r2,zero,9658 <__addsf3+0x25c>
    9728:	39c10034 	orhi	r7,r7,1024
    972c:	58800710 	cmplti	r2,r11,28
    9730:	10002e1e 	bne	r2,zero,97ec <__addsf3+0x3f0>
    9734:	01000044 	movi	r4,1
    9738:	4109c83a 	sub	r4,r8,r4
    973c:	4823883a 	mov	r17,r9
    9740:	6021883a 	mov	r16,r12
    9744:	003f4b06 	br	9474 <__addsf3+0x78>
    9748:	01000804 	movi	r4,32
    974c:	22c9c83a 	sub	r4,r4,r11
    9750:	4108983a 	sll	r4,r8,r4
    9754:	42d0d83a 	srl	r8,r8,r11
    9758:	2008c03a 	cmpne	r4,r4,zero
    975c:	2208b03a 	or	r4,r4,r8
    9760:	003f7c06 	br	9554 <__addsf3+0x158>
    9764:	803fb61e 	bne	r16,zero,9640 <__addsf3+0x244>
    9768:	38003a26 	beq	r7,zero,9854 <__addsf3+0x458>
    976c:	40002626 	beq	r8,zero,9808 <__addsf3+0x40c>
    9770:	3a09883a 	add	r4,r7,r8
    9774:	2081002c 	andhi	r2,r4,1024
    9778:	103fa826 	beq	r2,zero,961c <__addsf3+0x220>
    977c:	00bf0034 	movhi	r2,64512
    9780:	10bfffc4 	addi	r2,r2,-1
    9784:	2088703a 	and	r4,r4,r2
    9788:	04000044 	movi	r16,1
    978c:	003fa306 	br	961c <__addsf3+0x220>
    9790:	383fc726 	beq	r7,zero,96b0 <__addsf3+0x2b4>
    9794:	58bfffc4 	addi	r2,r11,-1
    9798:	10000c26 	beq	r2,zero,97cc <__addsf3+0x3d0>
    979c:	5ac03fe0 	cmpeqi	r11,r11,255
    97a0:	583fae1e 	bne	r11,zero,965c <__addsf3+0x260>
    97a4:	1017883a 	mov	r11,r2
    97a8:	003fba06 	br	9694 <__addsf3+0x298>
    97ac:	383fa51e 	bne	r7,zero,9644 <__addsf3+0x248>
    97b0:	403fa91e 	bne	r8,zero,9658 <__addsf3+0x25c>
    97b4:	0023883a 	mov	r17,zero
    97b8:	1007883a 	mov	r3,r2
    97bc:	003fad06 	br	9674 <__addsf3+0x278>
    97c0:	41e5c83a 	sub	r18,r8,r7
    97c4:	4823883a 	mov	r17,r9
    97c8:	003f2f06 	br	9488 <__addsf3+0x8c>
    97cc:	3a09883a 	add	r4,r7,r8
    97d0:	2081002c 	andhi	r2,r4,1024
    97d4:	10001926 	beq	r2,zero,983c <__addsf3+0x440>
    97d8:	04000084 	movi	r16,2
    97dc:	003f6306 	br	956c <__addsf3+0x170>
    97e0:	3a09c83a 	sub	r4,r7,r8
    97e4:	04000044 	movi	r16,1
    97e8:	003f2206 	br	9474 <__addsf3+0x78>
    97ec:	00800804 	movi	r2,32
    97f0:	12c5c83a 	sub	r2,r2,r11
    97f4:	3884983a 	sll	r2,r7,r2
    97f8:	3aced83a 	srl	r7,r7,r11
    97fc:	1008c03a 	cmpne	r4,r2,zero
    9800:	21c8b03a 	or	r4,r4,r7
    9804:	003fcc06 	br	9738 <__addsf3+0x33c>
    9808:	0021883a 	mov	r16,zero
    980c:	003f3406 	br	94e0 <__addsf3+0xe4>
    9810:	01000804 	movi	r4,32
    9814:	22c9c83a 	sub	r4,r4,r11
    9818:	3908983a 	sll	r4,r7,r4
    981c:	3aced83a 	srl	r7,r7,r11
    9820:	2008c03a 	cmpne	r4,r4,zero
    9824:	21c8b03a 	or	r4,r4,r7
    9828:	003f9d06 	br	96a0 <__addsf3+0x2a4>
    982c:	41c9c83a 	sub	r4,r8,r7
    9830:	4823883a 	mov	r17,r9
    9834:	04000044 	movi	r16,1
    9838:	003f0e06 	br	9474 <__addsf3+0x78>
    983c:	04000044 	movi	r16,1
    9840:	003f7606 	br	961c <__addsf3+0x220>
    9844:	403fb226 	beq	r8,zero,9710 <__addsf3+0x314>
    9848:	4823883a 	mov	r17,r9
    984c:	6807883a 	mov	r3,r13
    9850:	003f2306 	br	94e0 <__addsf3+0xe4>
    9854:	6807883a 	mov	r3,r13
    9858:	0021883a 	mov	r16,zero
    985c:	003f2006 	br	94e0 <__addsf3+0xe4>
    9860:	203fab26 	beq	r4,zero,9710 <__addsf3+0x314>
    9864:	003f6d06 	br	961c <__addsf3+0x220>

00009868 <__eqsf2>:
    9868:	200cd5fa 	srli	r6,r4,23
    986c:	2806d5fa 	srli	r3,r5,23
    9870:	00802034 	movhi	r2,128
    9874:	31803fcc 	andi	r6,r6,255
    9878:	10bfffc4 	addi	r2,r2,-1
    987c:	31c03fd8 	cmpnei	r7,r6,255
    9880:	2010d7fa 	srli	r8,r4,31
    9884:	2812d7fa 	srli	r9,r5,31
    9888:	1108703a 	and	r4,r2,r4
    988c:	18c03fcc 	andi	r3,r3,255
    9890:	1144703a 	and	r2,r2,r5
    9894:	38000626 	beq	r7,zero,98b0 <__eqsf2+0x48>
    9898:	19403fe0 	cmpeqi	r5,r3,255
    989c:	2800021e 	bne	r5,zero,98a8 <__eqsf2+0x40>
    98a0:	30c0011e 	bne	r6,r3,98a8 <__eqsf2+0x40>
    98a4:	20800626 	beq	r4,r2,98c0 <__eqsf2+0x58>
    98a8:	00800044 	movi	r2,1
    98ac:	f800283a 	ret
    98b0:	203ffd1e 	bne	r4,zero,98a8 <__eqsf2+0x40>
    98b4:	18c03fd8 	cmpnei	r3,r3,255
    98b8:	183ffb1e 	bne	r3,zero,98a8 <__eqsf2+0x40>
    98bc:	103ffa1e 	bne	r2,zero,98a8 <__eqsf2+0x40>
    98c0:	42400326 	beq	r8,r9,98d0 <__eqsf2+0x68>
    98c4:	303ff81e 	bne	r6,zero,98a8 <__eqsf2+0x40>
    98c8:	2004c03a 	cmpne	r2,r4,zero
    98cc:	f800283a 	ret
    98d0:	0005883a 	mov	r2,zero
    98d4:	f800283a 	ret

000098d8 <__gesf2>:
    98d8:	200cd5fa 	srli	r6,r4,23
    98dc:	280ed5fa 	srli	r7,r5,23
    98e0:	00c02034 	movhi	r3,128
    98e4:	31803fcc 	andi	r6,r6,255
    98e8:	18ffffc4 	addi	r3,r3,-1
    98ec:	32003fd8 	cmpnei	r8,r6,255
    98f0:	2012d7fa 	srli	r9,r4,31
    98f4:	2804d7fa 	srli	r2,r5,31
    98f8:	1908703a 	and	r4,r3,r4
    98fc:	1946703a 	and	r3,r3,r5
    9900:	39403fcc 	andi	r5,r7,255
    9904:	40000826 	beq	r8,zero,9928 <__gesf2+0x50>
    9908:	29c03fd8 	cmpnei	r7,r5,255
    990c:	38000926 	beq	r7,zero,9934 <__gesf2+0x5c>
    9910:	3000121e 	bne	r6,zero,995c <__gesf2+0x84>
    9914:	28000e1e 	bne	r5,zero,9950 <__gesf2+0x78>
    9918:	18000d1e 	bne	r3,zero,9950 <__gesf2+0x78>
    991c:	2000081e 	bne	r4,zero,9940 <__gesf2+0x68>
    9920:	0005883a 	mov	r2,zero
    9924:	f800283a 	ret
    9928:	2000171e 	bne	r4,zero,9988 <__gesf2+0xb0>
    992c:	29c03fe0 	cmpeqi	r7,r5,255
    9930:	38000a26 	beq	r7,zero,995c <__gesf2+0x84>
    9934:	1800141e 	bne	r3,zero,9988 <__gesf2+0xb0>
    9938:	30000526 	beq	r6,zero,9950 <__gesf2+0x78>
    993c:	48800a26 	beq	r9,r2,9968 <__gesf2+0x90>
    9940:	00800044 	movi	r2,1
    9944:	48000426 	beq	r9,zero,9958 <__gesf2+0x80>
    9948:	00bfffc4 	movi	r2,-1
    994c:	f800283a 	ret
    9950:	203ffa1e 	bne	r4,zero,993c <__gesf2+0x64>
    9954:	103ffc26 	beq	r2,zero,9948 <__gesf2+0x70>
    9958:	f800283a 	ret
    995c:	283ff71e 	bne	r5,zero,993c <__gesf2+0x64>
    9960:	183ff61e 	bne	r3,zero,993c <__gesf2+0x64>
    9964:	003ff606 	br	9940 <__gesf2+0x68>
    9968:	29800416 	blt	r5,r6,997c <__gesf2+0xa4>
    996c:	317ff916 	blt	r6,r5,9954 <__gesf2+0x7c>
    9970:	19000236 	bltu	r3,r4,997c <__gesf2+0xa4>
    9974:	20ffea2e 	bgeu	r4,r3,9920 <__gesf2+0x48>
    9978:	003ff606 	br	9954 <__gesf2+0x7c>
    997c:	103ff21e 	bne	r2,zero,9948 <__gesf2+0x70>
    9980:	00800044 	movi	r2,1
    9984:	f800283a 	ret
    9988:	00bfff84 	movi	r2,-2
    998c:	f800283a 	ret

00009990 <__mulsf3>:
    9990:	defff704 	addi	sp,sp,-36
    9994:	dc400215 	stw	r17,8(sp)
    9998:	2022d5fa 	srli	r17,r4,23
    999c:	dc000115 	stw	r16,4(sp)
    99a0:	04002034 	movhi	r16,128
    99a4:	dd000515 	stw	r20,20(sp)
    99a8:	843fffc4 	addi	r16,r16,-1
    99ac:	dfc00815 	stw	ra,32(sp)
    99b0:	dd800715 	stw	r22,28(sp)
    99b4:	dd400615 	stw	r21,24(sp)
    99b8:	dcc00415 	stw	r19,16(sp)
    99bc:	dc800315 	stw	r18,12(sp)
    99c0:	8c403fcc 	andi	r17,r17,255
    99c4:	2028d7fa 	srli	r20,r4,31
    99c8:	8120703a 	and	r16,r16,r4
    99cc:	88008026 	beq	r17,zero,9bd0 <__mulsf3+0x240>
    99d0:	88803fe0 	cmpeqi	r2,r17,255
    99d4:	1000831e 	bne	r2,zero,9be4 <__mulsf3+0x254>
    99d8:	802090fa 	slli	r16,r16,3
    99dc:	8c7fe044 	addi	r17,r17,-127
    99e0:	002d883a 	mov	r22,zero
    99e4:	84010034 	orhi	r16,r16,1024
    99e8:	0027883a 	mov	r19,zero
    99ec:	2804d5fa 	srli	r2,r5,23
    99f0:	01002034 	movhi	r4,128
    99f4:	213fffc4 	addi	r4,r4,-1
    99f8:	10803fcc 	andi	r2,r2,255
    99fc:	282ad7fa 	srli	r21,r5,31
    9a00:	2164703a 	and	r18,r4,r5
    9a04:	10006e26 	beq	r2,zero,9bc0 <__mulsf3+0x230>
    9a08:	11003fe0 	cmpeqi	r4,r2,255
    9a0c:	20007a1e 	bne	r4,zero,9bf8 <__mulsf3+0x268>
    9a10:	900890fa 	slli	r4,r18,3
    9a14:	10bfe044 	addi	r2,r2,-127
    9a18:	88a3883a 	add	r17,r17,r2
    9a1c:	24810034 	orhi	r18,r4,1024
    9a20:	0009883a 	mov	r4,zero
    9a24:	b1800428 	cmpgeui	r6,r22,16
    9a28:	a544f03a 	xor	r2,r20,r21
    9a2c:	89c00044 	addi	r7,r17,1
    9a30:	3000321e 	bne	r6,zero,9afc <__mulsf3+0x16c>
    9a34:	b00690ba 	slli	r3,r22,2
    9a38:	01800074 	movhi	r6,1
    9a3c:	198d883a 	add	r6,r3,r6
    9a40:	30e69217 	ldw	r3,-26040(r6)
    9a44:	1800683a 	jmp	r3
    9a48:	00009afc 	xorhi	zero,zero,619
    9a4c:	00009a8c 	andi	zero,zero,618
    9a50:	00009a8c 	andi	zero,zero,618
    9a54:	00009a88 	cmpgei	zero,zero,618
    9a58:	00009a94 	movui	zero,618
    9a5c:	00009a94 	movui	zero,618
    9a60:	00009c84 	movi	zero,626
    9a64:	00009a88 	cmpgei	zero,zero,618
    9a68:	00009a94 	movui	zero,618
    9a6c:	00009c84 	movi	zero,626
    9a70:	00009a94 	movui	zero,618
    9a74:	00009a88 	cmpgei	zero,zero,618
    9a78:	00009c0c 	andi	zero,zero,624
    9a7c:	00009c0c 	andi	zero,zero,624
    9a80:	00009c0c 	andi	zero,zero,624
    9a84:	00009ce8 	cmpgeui	zero,zero,627
    9a88:	a805883a 	mov	r2,r21
    9a8c:	9021883a 	mov	r16,r18
    9a90:	2027883a 	mov	r19,r4
    9a94:	98c000a0 	cmpeqi	r3,r19,2
    9a98:	1800151e 	bne	r3,zero,9af0 <__mulsf3+0x160>
    9a9c:	98c000e0 	cmpeqi	r3,r19,3
    9aa0:	1800a31e 	bne	r3,zero,9d30 <__mulsf3+0x3a0>
    9aa4:	98c00060 	cmpeqi	r3,r19,1
    9aa8:	18003226 	beq	r3,zero,9b74 <__mulsf3+0x1e4>
    9aac:	0007883a 	mov	r3,zero
    9ab0:	0009883a 	mov	r4,zero
    9ab4:	1c003fcc 	andi	r16,r3,255
    9ab8:	802095fa 	slli	r16,r16,23
    9abc:	100497fa 	slli	r2,r2,31
    9ac0:	8120b03a 	or	r16,r16,r4
    9ac4:	8084b03a 	or	r2,r16,r2
    9ac8:	dfc00817 	ldw	ra,32(sp)
    9acc:	dd800717 	ldw	r22,28(sp)
    9ad0:	dd400617 	ldw	r21,24(sp)
    9ad4:	dd000517 	ldw	r20,20(sp)
    9ad8:	dcc00417 	ldw	r19,16(sp)
    9adc:	dc800317 	ldw	r18,12(sp)
    9ae0:	dc400217 	ldw	r17,8(sp)
    9ae4:	dc000117 	ldw	r16,4(sp)
    9ae8:	dec00904 	addi	sp,sp,36
    9aec:	f800283a 	ret
    9af0:	00ffffc4 	movi	r3,-1
    9af4:	0009883a 	mov	r4,zero
    9af8:	003fee06 	br	9ab4 <__mulsf3+0x124>
    9afc:	9012d43a 	srli	r9,r18,16
    9b00:	80ffffcc 	andi	r3,r16,65535
    9b04:	8010d43a 	srli	r8,r16,16
    9b08:	913fffcc 	andi	r4,r18,65535
    9b0c:	190b383a 	mul	r5,r3,r4
    9b10:	4125383a 	mul	r18,r8,r4
    9b14:	48cd383a 	mul	r6,r9,r3
    9b18:	2806d43a 	srli	r3,r5,16
    9b1c:	4251383a 	mul	r8,r8,r9
    9b20:	348d883a 	add	r6,r6,r18
    9b24:	1987883a 	add	r3,r3,r6
    9b28:	1c80022e 	bgeu	r3,r18,9b34 <__mulsf3+0x1a4>
    9b2c:	01000074 	movhi	r4,1
    9b30:	4111883a 	add	r8,r8,r4
    9b34:	1808943a 	slli	r4,r3,16
    9b38:	1820d43a 	srli	r16,r3,16
    9b3c:	297fffcc 	andi	r5,r5,65535
    9b40:	2149883a 	add	r4,r4,r5
    9b44:	200691ba 	slli	r3,r4,6
    9b48:	8221883a 	add	r16,r16,r8
    9b4c:	802091ba 	slli	r16,r16,6
    9b50:	2008d6ba 	srli	r4,r4,26
    9b54:	1806c03a 	cmpne	r3,r3,zero
    9b58:	8142002c 	andhi	r5,r16,2048
    9b5c:	1908b03a 	or	r4,r3,r4
    9b60:	8120b03a 	or	r16,r16,r4
    9b64:	28007026 	beq	r5,zero,9d28 <__mulsf3+0x398>
    9b68:	8006d07a 	srli	r3,r16,1
    9b6c:	8400004c 	andi	r16,r16,1
    9b70:	1c20b03a 	or	r16,r3,r16
    9b74:	38c01fc4 	addi	r3,r7,127
    9b78:	00c0470e 	bge	zero,r3,9c98 <__mulsf3+0x308>
    9b7c:	810001cc 	andi	r4,r16,7
    9b80:	20000426 	beq	r4,zero,9b94 <__mulsf3+0x204>
    9b84:	810003cc 	andi	r4,r16,15
    9b88:	21000120 	cmpeqi	r4,r4,4
    9b8c:	2000011e 	bne	r4,zero,9b94 <__mulsf3+0x204>
    9b90:	84000104 	addi	r16,r16,4
    9b94:	8102002c 	andhi	r4,r16,2048
    9b98:	20000426 	beq	r4,zero,9bac <__mulsf3+0x21c>
    9b9c:	00fe0034 	movhi	r3,63488
    9ba0:	18ffffc4 	addi	r3,r3,-1
    9ba4:	80e0703a 	and	r16,r16,r3
    9ba8:	38c02004 	addi	r3,r7,128
    9bac:	19003fc8 	cmpgei	r4,r3,255
    9bb0:	203fcf1e 	bne	r4,zero,9af0 <__mulsf3+0x160>
    9bb4:	802091ba 	slli	r16,r16,6
    9bb8:	8008d27a 	srli	r4,r16,9
    9bbc:	003fbd06 	br	9ab4 <__mulsf3+0x124>
    9bc0:	9000281e 	bne	r18,zero,9c64 <__mulsf3+0x2d4>
    9bc4:	b5800054 	ori	r22,r22,1
    9bc8:	01000044 	movi	r4,1
    9bcc:	003f9506 	br	9a24 <__mulsf3+0x94>
    9bd0:	8000191e 	bne	r16,zero,9c38 <__mulsf3+0x2a8>
    9bd4:	05800104 	movi	r22,4
    9bd8:	0023883a 	mov	r17,zero
    9bdc:	04c00044 	movi	r19,1
    9be0:	003f8206 	br	99ec <__mulsf3+0x5c>
    9be4:	8000101e 	bne	r16,zero,9c28 <__mulsf3+0x298>
    9be8:	05800204 	movi	r22,8
    9bec:	04403fc4 	movi	r17,255
    9bf0:	04c00084 	movi	r19,2
    9bf4:	003f7d06 	br	99ec <__mulsf3+0x5c>
    9bf8:	8c403fc4 	addi	r17,r17,255
    9bfc:	9000071e 	bne	r18,zero,9c1c <__mulsf3+0x28c>
    9c00:	b5800094 	ori	r22,r22,2
    9c04:	01000084 	movi	r4,2
    9c08:	003f8606 	br	9a24 <__mulsf3+0x94>
    9c0c:	98c000a0 	cmpeqi	r3,r19,2
    9c10:	a005883a 	mov	r2,r20
    9c14:	183fa126 	beq	r3,zero,9a9c <__mulsf3+0x10c>
    9c18:	003fb506 	br	9af0 <__mulsf3+0x160>
    9c1c:	b58000d4 	ori	r22,r22,3
    9c20:	010000c4 	movi	r4,3
    9c24:	003f7f06 	br	9a24 <__mulsf3+0x94>
    9c28:	05800304 	movi	r22,12
    9c2c:	04403fc4 	movi	r17,255
    9c30:	04c000c4 	movi	r19,3
    9c34:	003f6d06 	br	99ec <__mulsf3+0x5c>
    9c38:	8009883a 	mov	r4,r16
    9c3c:	d9400015 	stw	r5,0(sp)
    9c40:	000cc000 	call	cc00 <__clzsi2>
    9c44:	10fffec4 	addi	r3,r2,-5
    9c48:	047fe284 	movi	r17,-118
    9c4c:	80e0983a 	sll	r16,r16,r3
    9c50:	d9400017 	ldw	r5,0(sp)
    9c54:	88a3c83a 	sub	r17,r17,r2
    9c58:	002d883a 	mov	r22,zero
    9c5c:	0027883a 	mov	r19,zero
    9c60:	003f6206 	br	99ec <__mulsf3+0x5c>
    9c64:	9009883a 	mov	r4,r18
    9c68:	000cc000 	call	cc00 <__clzsi2>
    9c6c:	10fffec4 	addi	r3,r2,-5
    9c70:	88a3c83a 	sub	r17,r17,r2
    9c74:	90e4983a 	sll	r18,r18,r3
    9c78:	8c7fe284 	addi	r17,r17,-118
    9c7c:	0009883a 	mov	r4,zero
    9c80:	003f6806 	br	9a24 <__mulsf3+0x94>
    9c84:	01002034 	movhi	r4,128
    9c88:	0005883a 	mov	r2,zero
    9c8c:	213fffc4 	addi	r4,r4,-1
    9c90:	00ffffc4 	movi	r3,-1
    9c94:	003f8706 	br	9ab4 <__mulsf3+0x124>
    9c98:	01000044 	movi	r4,1
    9c9c:	20c7c83a 	sub	r3,r4,r3
    9ca0:	19000708 	cmpgei	r4,r3,28
    9ca4:	203f811e 	bne	r4,zero,9aac <__mulsf3+0x11c>
    9ca8:	39002784 	addi	r4,r7,158
    9cac:	8108983a 	sll	r4,r16,r4
    9cb0:	80e0d83a 	srl	r16,r16,r3
    9cb4:	2008c03a 	cmpne	r4,r4,zero
    9cb8:	8120b03a 	or	r16,r16,r4
    9cbc:	80c001cc 	andi	r3,r16,7
    9cc0:	18000426 	beq	r3,zero,9cd4 <__mulsf3+0x344>
    9cc4:	80c003cc 	andi	r3,r16,15
    9cc8:	18c00120 	cmpeqi	r3,r3,4
    9ccc:	1800011e 	bne	r3,zero,9cd4 <__mulsf3+0x344>
    9cd0:	84000104 	addi	r16,r16,4
    9cd4:	80c1002c 	andhi	r3,r16,1024
    9cd8:	183fb626 	beq	r3,zero,9bb4 <__mulsf3+0x224>
    9cdc:	00c00044 	movi	r3,1
    9ce0:	0009883a 	mov	r4,zero
    9ce4:	003f7306 	br	9ab4 <__mulsf3+0x124>
    9ce8:	8080102c 	andhi	r2,r16,64
    9cec:	10000826 	beq	r2,zero,9d10 <__mulsf3+0x380>
    9cf0:	9080102c 	andhi	r2,r18,64
    9cf4:	1000061e 	bne	r2,zero,9d10 <__mulsf3+0x380>
    9cf8:	00802034 	movhi	r2,128
    9cfc:	10bfffc4 	addi	r2,r2,-1
    9d00:	91001034 	orhi	r4,r18,64
    9d04:	2088703a 	and	r4,r4,r2
    9d08:	a805883a 	mov	r2,r21
    9d0c:	003fe006 	br	9c90 <__mulsf3+0x300>
    9d10:	00802034 	movhi	r2,128
    9d14:	10bfffc4 	addi	r2,r2,-1
    9d18:	81001034 	orhi	r4,r16,64
    9d1c:	2088703a 	and	r4,r4,r2
    9d20:	a005883a 	mov	r2,r20
    9d24:	003fda06 	br	9c90 <__mulsf3+0x300>
    9d28:	880f883a 	mov	r7,r17
    9d2c:	003f9106 	br	9b74 <__mulsf3+0x1e4>
    9d30:	00c02034 	movhi	r3,128
    9d34:	81001034 	orhi	r4,r16,64
    9d38:	18ffffc4 	addi	r3,r3,-1
    9d3c:	20c8703a 	and	r4,r4,r3
    9d40:	003fd306 	br	9c90 <__mulsf3+0x300>

00009d44 <__subsf3>:
    9d44:	2804d5fa 	srli	r2,r5,23
    9d48:	2006d5fa 	srli	r3,r4,23
    9d4c:	200cd7fa 	srli	r6,r4,31
    9d50:	01c02034 	movhi	r7,128
    9d54:	defffc04 	addi	sp,sp,-16
    9d58:	39ffffc4 	addi	r7,r7,-1
    9d5c:	12803fcc 	andi	r10,r2,255
    9d60:	3908703a 	and	r4,r7,r4
    9d64:	dc800215 	stw	r18,8(sp)
    9d68:	394e703a 	and	r7,r7,r5
    9d6c:	dc400115 	stw	r17,4(sp)
    9d70:	1c803fcc 	andi	r18,r3,255
    9d74:	dfc00315 	stw	ra,12(sp)
    9d78:	dc000015 	stw	r16,0(sp)
    9d7c:	50803fd8 	cmpnei	r2,r10,255
    9d80:	3023883a 	mov	r17,r6
    9d84:	201090fa 	slli	r8,r4,3
    9d88:	280ad7fa 	srli	r5,r5,31
    9d8c:	381290fa 	slli	r9,r7,3
    9d90:	2019883a 	mov	r12,r4
    9d94:	31803fcc 	andi	r6,r6,255
    9d98:	9297c83a 	sub	r11,r18,r10
    9d9c:	10003f26 	beq	r2,zero,9e9c <__subsf3+0x158>
    9da0:	2880005c 	xori	r2,r5,1
    9da4:	30804526 	beq	r6,r2,9ebc <__subsf3+0x178>
    9da8:	02c0310e 	bge	zero,r11,9e70 <__subsf3+0x12c>
    9dac:	50003f1e 	bne	r10,zero,9eac <__subsf3+0x168>
    9db0:	48009526 	beq	r9,zero,a008 <__subsf3+0x2c4>
    9db4:	58bfffc4 	addi	r2,r11,-1
    9db8:	1000de26 	beq	r2,zero,a134 <__subsf3+0x3f0>
    9dbc:	59003fe0 	cmpeqi	r4,r11,255
    9dc0:	20007d1e 	bne	r4,zero,9fb8 <__subsf3+0x274>
    9dc4:	1017883a 	mov	r11,r2
    9dc8:	58800710 	cmplti	r2,r11,28
    9dcc:	10009a1e 	bne	r2,zero,a038 <__subsf3+0x2f4>
    9dd0:	01000044 	movi	r4,1
    9dd4:	4109c83a 	sub	r4,r8,r4
    9dd8:	2081002c 	andhi	r2,r4,1024
    9ddc:	10006a26 	beq	r2,zero,9f88 <__subsf3+0x244>
    9de0:	04010034 	movhi	r16,1024
    9de4:	843fffc4 	addi	r16,r16,-1
    9de8:	2420703a 	and	r16,r4,r16
    9dec:	8009883a 	mov	r4,r16
    9df0:	000cc000 	call	cc00 <__clzsi2>
    9df4:	10bffec4 	addi	r2,r2,-5
    9df8:	8088983a 	sll	r4,r16,r2
    9dfc:	1480840e 	bge	r2,r18,a010 <__subsf3+0x2cc>
    9e00:	00ff0034 	movhi	r3,64512
    9e04:	18ffffc4 	addi	r3,r3,-1
    9e08:	90a5c83a 	sub	r18,r18,r2
    9e0c:	20c8703a 	and	r4,r4,r3
    9e10:	208001cc 	andi	r2,r4,7
    9e14:	10000426 	beq	r2,zero,9e28 <__subsf3+0xe4>
    9e18:	208003cc 	andi	r2,r4,15
    9e1c:	10800120 	cmpeqi	r2,r2,4
    9e20:	1000011e 	bne	r2,zero,9e28 <__subsf3+0xe4>
    9e24:	21000104 	addi	r4,r4,4
    9e28:	2081002c 	andhi	r2,r4,1024
    9e2c:	10005826 	beq	r2,zero,9f90 <__subsf3+0x24c>
    9e30:	90c00044 	addi	r3,r18,1
    9e34:	18803fe0 	cmpeqi	r2,r3,255
    9e38:	1000481e 	bne	r2,zero,9f5c <__subsf3+0x218>
    9e3c:	200891ba 	slli	r4,r4,6
    9e40:	2008d27a 	srli	r4,r4,9
    9e44:	18803fcc 	andi	r2,r3,255
    9e48:	100495fa 	slli	r2,r2,23
    9e4c:	880697fa 	slli	r3,r17,31
    9e50:	1108b03a 	or	r4,r2,r4
    9e54:	20c4b03a 	or	r2,r4,r3
    9e58:	dfc00317 	ldw	ra,12(sp)
    9e5c:	dc800217 	ldw	r18,8(sp)
    9e60:	dc400117 	ldw	r17,4(sp)
    9e64:	dc000017 	ldw	r16,0(sp)
    9e68:	dec00404 	addi	sp,sp,16
    9e6c:	f800283a 	ret
    9e70:	58002726 	beq	r11,zero,9f10 <__subsf3+0x1cc>
    9e74:	5497c83a 	sub	r11,r10,r18
    9e78:	1023883a 	mov	r17,r2
    9e7c:	9000751e 	bne	r18,zero,a054 <__subsf3+0x310>
    9e80:	40006026 	beq	r8,zero,a004 <__subsf3+0x2c0>
    9e84:	58bfffc4 	addi	r2,r11,-1
    9e88:	1000cb26 	beq	r2,zero,a1b8 <__subsf3+0x474>
    9e8c:	5ac03fe0 	cmpeqi	r11,r11,255
    9e90:	5800481e 	bne	r11,zero,9fb4 <__subsf3+0x270>
    9e94:	1017883a 	mov	r11,r2
    9e98:	00007106 	br	a060 <__subsf3+0x31c>
    9e9c:	483fc026 	beq	r9,zero,9da0 <__subsf3+0x5c>
    9ea0:	28803fcc 	andi	r2,r5,255
    9ea4:	31404b26 	beq	r6,r5,9fd4 <__subsf3+0x290>
    9ea8:	02fff10e 	bge	zero,r11,9e70 <__subsf3+0x12c>
    9eac:	90803fe0 	cmpeqi	r2,r18,255
    9eb0:	1000411e 	bne	r2,zero,9fb8 <__subsf3+0x274>
    9eb4:	4a410034 	orhi	r9,r9,1024
    9eb8:	003fc306 	br	9dc8 <__subsf3+0x84>
    9ebc:	02c0450e 	bge	zero,r11,9fd4 <__subsf3+0x290>
    9ec0:	50001f26 	beq	r10,zero,9f40 <__subsf3+0x1fc>
    9ec4:	90803fe0 	cmpeqi	r2,r18,255
    9ec8:	10003b1e 	bne	r2,zero,9fb8 <__subsf3+0x274>
    9ecc:	4a410034 	orhi	r9,r9,1024
    9ed0:	58800710 	cmplti	r2,r11,28
    9ed4:	1000701e 	bne	r2,zero,a098 <__subsf3+0x354>
    9ed8:	01000044 	movi	r4,1
    9edc:	2209883a 	add	r4,r4,r8
    9ee0:	2081002c 	andhi	r2,r4,1024
    9ee4:	10002826 	beq	r2,zero,9f88 <__subsf3+0x244>
    9ee8:	94800044 	addi	r18,r18,1
    9eec:	90803fe0 	cmpeqi	r2,r18,255
    9ef0:	10001a1e 	bne	r2,zero,9f5c <__subsf3+0x218>
    9ef4:	2004d07a 	srli	r2,r4,1
    9ef8:	00df8034 	movhi	r3,32256
    9efc:	18ffffc4 	addi	r3,r3,-1
    9f00:	2100004c 	andi	r4,r4,1
    9f04:	10c4703a 	and	r2,r2,r3
    9f08:	1108b03a 	or	r4,r2,r4
    9f0c:	003fc006 	br	9e10 <__subsf3+0xcc>
    9f10:	90c00044 	addi	r3,r18,1
    9f14:	18c03f8c 	andi	r3,r3,254
    9f18:	1800571e 	bne	r3,zero,a078 <__subsf3+0x334>
    9f1c:	90007a1e 	bne	r18,zero,a108 <__subsf3+0x3c4>
    9f20:	4000a126 	beq	r8,zero,a1a8 <__subsf3+0x464>
    9f24:	48008d26 	beq	r9,zero,a15c <__subsf3+0x418>
    9f28:	4249c83a 	sub	r4,r8,r9
    9f2c:	20c1002c 	andhi	r3,r4,1024
    9f30:	1800a726 	beq	r3,zero,a1d0 <__subsf3+0x48c>
    9f34:	4a09c83a 	sub	r4,r9,r8
    9f38:	1023883a 	mov	r17,r2
    9f3c:	003fb406 	br	9e10 <__subsf3+0xcc>
    9f40:	48003126 	beq	r9,zero,a008 <__subsf3+0x2c4>
    9f44:	58bfffc4 	addi	r2,r11,-1
    9f48:	10007526 	beq	r2,zero,a120 <__subsf3+0x3dc>
    9f4c:	5ac03fe0 	cmpeqi	r11,r11,255
    9f50:	5800191e 	bne	r11,zero,9fb8 <__subsf3+0x274>
    9f54:	1017883a 	mov	r11,r2
    9f58:	003fdd06 	br	9ed0 <__subsf3+0x18c>
    9f5c:	00ffffc4 	movi	r3,-1
    9f60:	0009883a 	mov	r4,zero
    9f64:	003fb706 	br	9e44 <__subsf3+0x100>
    9f68:	90c00044 	addi	r3,r18,1
    9f6c:	19403f8c 	andi	r5,r3,254
    9f70:	28005026 	beq	r5,zero,a0b4 <__subsf3+0x370>
    9f74:	18803fe0 	cmpeqi	r2,r3,255
    9f78:	103ff81e 	bne	r2,zero,9f5c <__subsf3+0x218>
    9f7c:	4249883a 	add	r4,r8,r9
    9f80:	2008d07a 	srli	r4,r4,1
    9f84:	1825883a 	mov	r18,r3
    9f88:	208001cc 	andi	r2,r4,7
    9f8c:	103fa21e 	bne	r2,zero,9e18 <__subsf3+0xd4>
    9f90:	2018d0fa 	srli	r12,r4,3
    9f94:	90803fe0 	cmpeqi	r2,r18,255
    9f98:	1000071e 	bne	r2,zero,9fb8 <__subsf3+0x274>
    9f9c:	01002034 	movhi	r4,128
    9fa0:	213fffc4 	addi	r4,r4,-1
    9fa4:	6108703a 	and	r4,r12,r4
    9fa8:	9007883a 	mov	r3,r18
    9fac:	003fa506 	br	9e44 <__subsf3+0x100>
    9fb0:	40006c1e 	bne	r8,zero,a164 <__subsf3+0x420>
    9fb4:	3819883a 	mov	r12,r7
    9fb8:	603fe826 	beq	r12,zero,9f5c <__subsf3+0x218>
    9fbc:	00802034 	movhi	r2,128
    9fc0:	61001034 	orhi	r4,r12,64
    9fc4:	10bfffc4 	addi	r2,r2,-1
    9fc8:	2088703a 	and	r4,r4,r2
    9fcc:	00ffffc4 	movi	r3,-1
    9fd0:	003f9c06 	br	9e44 <__subsf3+0x100>
    9fd4:	583fe426 	beq	r11,zero,9f68 <__subsf3+0x224>
    9fd8:	5497c83a 	sub	r11,r10,r18
    9fdc:	90004026 	beq	r18,zero,a0e0 <__subsf3+0x39c>
    9fe0:	50803fe0 	cmpeqi	r2,r10,255
    9fe4:	103ff31e 	bne	r2,zero,9fb4 <__subsf3+0x270>
    9fe8:	42010034 	orhi	r8,r8,1024
    9fec:	58800710 	cmplti	r2,r11,28
    9ff0:	1000641e 	bne	r2,zero,a184 <__subsf3+0x440>
    9ff4:	01000044 	movi	r4,1
    9ff8:	2249883a 	add	r4,r4,r9
    9ffc:	5025883a 	mov	r18,r10
    a000:	003fb706 	br	9ee0 <__subsf3+0x19c>
    a004:	3819883a 	mov	r12,r7
    a008:	5825883a 	mov	r18,r11
    a00c:	003fe106 	br	9f94 <__subsf3+0x250>
    a010:	1485c83a 	sub	r2,r2,r18
    a014:	14000044 	addi	r16,r2,1
    a018:	00800804 	movi	r2,32
    a01c:	1405c83a 	sub	r2,r2,r16
    a020:	2084983a 	sll	r2,r4,r2
    a024:	2408d83a 	srl	r4,r4,r16
    a028:	0025883a 	mov	r18,zero
    a02c:	1004c03a 	cmpne	r2,r2,zero
    a030:	1108b03a 	or	r4,r2,r4
    a034:	003f7606 	br	9e10 <__subsf3+0xcc>
    a038:	01000804 	movi	r4,32
    a03c:	22c9c83a 	sub	r4,r4,r11
    a040:	4908983a 	sll	r4,r9,r4
    a044:	4ad2d83a 	srl	r9,r9,r11
    a048:	2008c03a 	cmpne	r4,r4,zero
    a04c:	2248b03a 	or	r4,r4,r9
    a050:	003f6006 	br	9dd4 <__subsf3+0x90>
    a054:	50803fe0 	cmpeqi	r2,r10,255
    a058:	103fd61e 	bne	r2,zero,9fb4 <__subsf3+0x270>
    a05c:	42010034 	orhi	r8,r8,1024
    a060:	58800710 	cmplti	r2,r11,28
    a064:	1000361e 	bne	r2,zero,a140 <__subsf3+0x3fc>
    a068:	01000044 	movi	r4,1
    a06c:	4909c83a 	sub	r4,r9,r4
    a070:	5025883a 	mov	r18,r10
    a074:	003f5806 	br	9dd8 <__subsf3+0x94>
    a078:	4261c83a 	sub	r16,r8,r9
    a07c:	80c1002c 	andhi	r3,r16,1024
    a080:	18001e1e 	bne	r3,zero,a0fc <__subsf3+0x3b8>
    a084:	803f591e 	bne	r16,zero,9dec <__subsf3+0xa8>
    a088:	0023883a 	mov	r17,zero
    a08c:	0007883a 	mov	r3,zero
    a090:	0009883a 	mov	r4,zero
    a094:	003f6b06 	br	9e44 <__subsf3+0x100>
    a098:	01000804 	movi	r4,32
    a09c:	22c9c83a 	sub	r4,r4,r11
    a0a0:	4908983a 	sll	r4,r9,r4
    a0a4:	4ad2d83a 	srl	r9,r9,r11
    a0a8:	2008c03a 	cmpne	r4,r4,zero
    a0ac:	2248b03a 	or	r4,r4,r9
    a0b0:	003f8a06 	br	9edc <__subsf3+0x198>
    a0b4:	903fbe1e 	bne	r18,zero,9fb0 <__subsf3+0x26c>
    a0b8:	40004226 	beq	r8,zero,a1c4 <__subsf3+0x480>
    a0bc:	48002726 	beq	r9,zero,a15c <__subsf3+0x418>
    a0c0:	4249883a 	add	r4,r8,r9
    a0c4:	2081002c 	andhi	r2,r4,1024
    a0c8:	103faf26 	beq	r2,zero,9f88 <__subsf3+0x244>
    a0cc:	00bf0034 	movhi	r2,64512
    a0d0:	10bfffc4 	addi	r2,r2,-1
    a0d4:	2088703a 	and	r4,r4,r2
    a0d8:	04800044 	movi	r18,1
    a0dc:	003faa06 	br	9f88 <__subsf3+0x244>
    a0e0:	403fc826 	beq	r8,zero,a004 <__subsf3+0x2c0>
    a0e4:	58bfffc4 	addi	r2,r11,-1
    a0e8:	10000d26 	beq	r2,zero,a120 <__subsf3+0x3dc>
    a0ec:	5ac03fe0 	cmpeqi	r11,r11,255
    a0f0:	583fb01e 	bne	r11,zero,9fb4 <__subsf3+0x270>
    a0f4:	1017883a 	mov	r11,r2
    a0f8:	003fbc06 	br	9fec <__subsf3+0x2a8>
    a0fc:	4a21c83a 	sub	r16,r9,r8
    a100:	1023883a 	mov	r17,r2
    a104:	003f3906 	br	9dec <__subsf3+0xa8>
    a108:	4000161e 	bne	r8,zero,a164 <__subsf3+0x420>
    a10c:	48001a1e 	bne	r9,zero,a178 <__subsf3+0x434>
    a110:	01002034 	movhi	r4,128
    a114:	0023883a 	mov	r17,zero
    a118:	213fffc4 	addi	r4,r4,-1
    a11c:	003fab06 	br	9fcc <__subsf3+0x288>
    a120:	4249883a 	add	r4,r8,r9
    a124:	2081002c 	andhi	r2,r4,1024
    a128:	10001d26 	beq	r2,zero,a1a0 <__subsf3+0x45c>
    a12c:	04800084 	movi	r18,2
    a130:	003f7006 	br	9ef4 <__subsf3+0x1b0>
    a134:	4249c83a 	sub	r4,r8,r9
    a138:	04800044 	movi	r18,1
    a13c:	003f2606 	br	9dd8 <__subsf3+0x94>
    a140:	00c00804 	movi	r3,32
    a144:	1ac7c83a 	sub	r3,r3,r11
    a148:	40c6983a 	sll	r3,r8,r3
    a14c:	42d0d83a 	srl	r8,r8,r11
    a150:	1808c03a 	cmpne	r4,r3,zero
    a154:	2208b03a 	or	r4,r4,r8
    a158:	003fc406 	br	a06c <__subsf3+0x328>
    a15c:	0007883a 	mov	r3,zero
    a160:	003f3806 	br	9e44 <__subsf3+0x100>
    a164:	483f9426 	beq	r9,zero,9fb8 <__subsf3+0x274>
    a168:	2100102c 	andhi	r4,r4,64
    a16c:	203f9226 	beq	r4,zero,9fb8 <__subsf3+0x274>
    a170:	38c0102c 	andhi	r3,r7,64
    a174:	183f901e 	bne	r3,zero,9fb8 <__subsf3+0x274>
    a178:	1023883a 	mov	r17,r2
    a17c:	3819883a 	mov	r12,r7
    a180:	003f8d06 	br	9fb8 <__subsf3+0x274>
    a184:	01000804 	movi	r4,32
    a188:	22c9c83a 	sub	r4,r4,r11
    a18c:	4106983a 	sll	r3,r8,r4
    a190:	42d0d83a 	srl	r8,r8,r11
    a194:	1808c03a 	cmpne	r4,r3,zero
    a198:	2208b03a 	or	r4,r4,r8
    a19c:	003f9606 	br	9ff8 <__subsf3+0x2b4>
    a1a0:	04800044 	movi	r18,1
    a1a4:	003f7806 	br	9f88 <__subsf3+0x244>
    a1a8:	483fb726 	beq	r9,zero,a088 <__subsf3+0x344>
    a1ac:	1023883a 	mov	r17,r2
    a1b0:	3809883a 	mov	r4,r7
    a1b4:	003f2306 	br	9e44 <__subsf3+0x100>
    a1b8:	4a09c83a 	sub	r4,r9,r8
    a1bc:	04800044 	movi	r18,1
    a1c0:	003f0506 	br	9dd8 <__subsf3+0x94>
    a1c4:	3809883a 	mov	r4,r7
    a1c8:	0007883a 	mov	r3,zero
    a1cc:	003f1d06 	br	9e44 <__subsf3+0x100>
    a1d0:	203fad26 	beq	r4,zero,a088 <__subsf3+0x344>
    a1d4:	003f6c06 	br	9f88 <__subsf3+0x244>

0000a1d8 <__fixsfsi>:
    a1d8:	200ad5fa 	srli	r5,r4,23
    a1dc:	00c02034 	movhi	r3,128
    a1e0:	18ffffc4 	addi	r3,r3,-1
    a1e4:	29403fcc 	andi	r5,r5,255
    a1e8:	29801fd0 	cmplti	r6,r5,127
    a1ec:	200ed7fa 	srli	r7,r4,31
    a1f0:	1906703a 	and	r3,r3,r4
    a1f4:	3000061e 	bne	r6,zero,a210 <__fixsfsi+0x38>
    a1f8:	28802790 	cmplti	r2,r5,158
    a1fc:	1000061e 	bne	r2,zero,a218 <__fixsfsi+0x40>
    a200:	00a00034 	movhi	r2,32768
    a204:	10bfffc4 	addi	r2,r2,-1
    a208:	3885883a 	add	r2,r7,r2
    a20c:	f800283a 	ret
    a210:	0005883a 	mov	r2,zero
    a214:	f800283a 	ret
    a218:	28802590 	cmplti	r2,r5,150
    a21c:	18c02034 	orhi	r3,r3,128
    a220:	1000051e 	bne	r2,zero,a238 <__fixsfsi+0x60>
    a224:	28bfda84 	addi	r2,r5,-150
    a228:	1884983a 	sll	r2,r3,r2
    a22c:	383ff926 	beq	r7,zero,a214 <__fixsfsi+0x3c>
    a230:	0085c83a 	sub	r2,zero,r2
    a234:	f800283a 	ret
    a238:	00802584 	movi	r2,150
    a23c:	1145c83a 	sub	r2,r2,r5
    a240:	1884d83a 	srl	r2,r3,r2
    a244:	003ff906 	br	a22c <__fixsfsi+0x54>

0000a248 <__floatsisf>:
    a248:	defffd04 	addi	sp,sp,-12
    a24c:	dfc00215 	stw	ra,8(sp)
    a250:	dc400115 	stw	r17,4(sp)
    a254:	dc000015 	stw	r16,0(sp)
    a258:	20001226 	beq	r4,zero,a2a4 <__floatsisf+0x5c>
    a25c:	2022d7fa 	srli	r17,r4,31
    a260:	2021883a 	mov	r16,r4
    a264:	20003816 	blt	r4,zero,a348 <__floatsisf+0x100>
    a268:	8009883a 	mov	r4,r16
    a26c:	000cc000 	call	cc00 <__clzsi2>
    a270:	1009883a 	mov	r4,r2
    a274:	00802784 	movi	r2,158
    a278:	1105c83a 	sub	r2,r2,r4
    a27c:	10c025c8 	cmpgei	r3,r2,151
    a280:	1800151e 	bne	r3,zero,a2d8 <__floatsisf+0x90>
    a284:	20c00248 	cmpgei	r3,r4,9
    a288:	18003126 	beq	r3,zero,a350 <__floatsisf+0x108>
    a28c:	213ffe04 	addi	r4,r4,-8
    a290:	8120983a 	sll	r16,r16,r4
    a294:	00c02034 	movhi	r3,128
    a298:	18ffffc4 	addi	r3,r3,-1
    a29c:	80e0703a 	and	r16,r16,r3
    a2a0:	00000306 	br	a2b0 <__floatsisf+0x68>
    a2a4:	0023883a 	mov	r17,zero
    a2a8:	0005883a 	mov	r2,zero
    a2ac:	0021883a 	mov	r16,zero
    a2b0:	10803fcc 	andi	r2,r2,255
    a2b4:	100495fa 	slli	r2,r2,23
    a2b8:	882297fa 	slli	r17,r17,31
    a2bc:	1404b03a 	or	r2,r2,r16
    a2c0:	1444b03a 	or	r2,r2,r17
    a2c4:	dfc00217 	ldw	ra,8(sp)
    a2c8:	dc400117 	ldw	r17,4(sp)
    a2cc:	dc000017 	ldw	r16,0(sp)
    a2d0:	dec00304 	addi	sp,sp,12
    a2d4:	f800283a 	ret
    a2d8:	10c02690 	cmplti	r3,r2,154
    a2dc:	1800071e 	bne	r3,zero,a2fc <__floatsisf+0xb4>
    a2e0:	20c006c4 	addi	r3,r4,27
    a2e4:	01400144 	movi	r5,5
    a2e8:	80c6983a 	sll	r3,r16,r3
    a2ec:	290bc83a 	sub	r5,r5,r4
    a2f0:	814ad83a 	srl	r5,r16,r5
    a2f4:	1806c03a 	cmpne	r3,r3,zero
    a2f8:	28e0b03a 	or	r16,r5,r3
    a2fc:	20c00188 	cmpgei	r3,r4,6
    a300:	1800171e 	bne	r3,zero,a360 <__floatsisf+0x118>
    a304:	00ff0034 	movhi	r3,64512
    a308:	18ffffc4 	addi	r3,r3,-1
    a30c:	818001cc 	andi	r6,r16,7
    a310:	80ca703a 	and	r5,r16,r3
    a314:	30000926 	beq	r6,zero,a33c <__floatsisf+0xf4>
    a318:	818003cc 	andi	r6,r16,15
    a31c:	31800120 	cmpeqi	r6,r6,4
    a320:	3000061e 	bne	r6,zero,a33c <__floatsisf+0xf4>
    a324:	29400104 	addi	r5,r5,4
    a328:	2981002c 	andhi	r6,r5,1024
    a32c:	30000326 	beq	r6,zero,a33c <__floatsisf+0xf4>
    a330:	28ca703a 	and	r5,r5,r3
    a334:	00c027c4 	movi	r3,159
    a338:	1905c83a 	sub	r2,r3,r4
    a33c:	282091ba 	slli	r16,r5,6
    a340:	8020d27a 	srli	r16,r16,9
    a344:	003fda06 	br	a2b0 <__floatsisf+0x68>
    a348:	0121c83a 	sub	r16,zero,r4
    a34c:	003fc606 	br	a268 <__floatsisf+0x20>
    a350:	01002034 	movhi	r4,128
    a354:	213fffc4 	addi	r4,r4,-1
    a358:	8120703a 	and	r16,r16,r4
    a35c:	003fd406 	br	a2b0 <__floatsisf+0x68>
    a360:	20fffec4 	addi	r3,r4,-5
    a364:	80e0983a 	sll	r16,r16,r3
    a368:	003fe606 	br	a304 <__floatsisf+0xbc>

0000a36c <__floatunsisf>:
    a36c:	defffe04 	addi	sp,sp,-8
    a370:	dfc00115 	stw	ra,4(sp)
    a374:	dc000015 	stw	r16,0(sp)
    a378:	20000f26 	beq	r4,zero,a3b8 <__floatunsisf+0x4c>
    a37c:	2021883a 	mov	r16,r4
    a380:	000cc000 	call	cc00 <__clzsi2>
    a384:	1009883a 	mov	r4,r2
    a388:	00802784 	movi	r2,158
    a38c:	1105c83a 	sub	r2,r2,r4
    a390:	10c025c8 	cmpgei	r3,r2,151
    a394:	1800111e 	bne	r3,zero,a3dc <__floatunsisf+0x70>
    a398:	20c00248 	cmpgei	r3,r4,9
    a39c:	18002b26 	beq	r3,zero,a44c <__floatunsisf+0xe0>
    a3a0:	213ffe04 	addi	r4,r4,-8
    a3a4:	8120983a 	sll	r16,r16,r4
    a3a8:	00c02034 	movhi	r3,128
    a3ac:	18ffffc4 	addi	r3,r3,-1
    a3b0:	80e0703a 	and	r16,r16,r3
    a3b4:	00000206 	br	a3c0 <__floatunsisf+0x54>
    a3b8:	0005883a 	mov	r2,zero
    a3bc:	0021883a 	mov	r16,zero
    a3c0:	10803fcc 	andi	r2,r2,255
    a3c4:	100495fa 	slli	r2,r2,23
    a3c8:	1404b03a 	or	r2,r2,r16
    a3cc:	dfc00117 	ldw	ra,4(sp)
    a3d0:	dc000017 	ldw	r16,0(sp)
    a3d4:	dec00204 	addi	sp,sp,8
    a3d8:	f800283a 	ret
    a3dc:	10c02690 	cmplti	r3,r2,154
    a3e0:	1800071e 	bne	r3,zero,a400 <__floatunsisf+0x94>
    a3e4:	20c006c4 	addi	r3,r4,27
    a3e8:	80ca983a 	sll	r5,r16,r3
    a3ec:	00c00144 	movi	r3,5
    a3f0:	1907c83a 	sub	r3,r3,r4
    a3f4:	80e0d83a 	srl	r16,r16,r3
    a3f8:	2806c03a 	cmpne	r3,r5,zero
    a3fc:	1c20b03a 	or	r16,r3,r16
    a400:	20c00188 	cmpgei	r3,r4,6
    a404:	1800151e 	bne	r3,zero,a45c <__floatunsisf+0xf0>
    a408:	00ff0034 	movhi	r3,64512
    a40c:	18ffffc4 	addi	r3,r3,-1
    a410:	818001cc 	andi	r6,r16,7
    a414:	80ca703a 	and	r5,r16,r3
    a418:	30000926 	beq	r6,zero,a440 <__floatunsisf+0xd4>
    a41c:	840003cc 	andi	r16,r16,15
    a420:	84000120 	cmpeqi	r16,r16,4
    a424:	8000061e 	bne	r16,zero,a440 <__floatunsisf+0xd4>
    a428:	29400104 	addi	r5,r5,4
    a42c:	2981002c 	andhi	r6,r5,1024
    a430:	30000326 	beq	r6,zero,a440 <__floatunsisf+0xd4>
    a434:	28ca703a 	and	r5,r5,r3
    a438:	00c027c4 	movi	r3,159
    a43c:	1905c83a 	sub	r2,r3,r4
    a440:	282091ba 	slli	r16,r5,6
    a444:	8020d27a 	srli	r16,r16,9
    a448:	003fdd06 	br	a3c0 <__floatunsisf+0x54>
    a44c:	01002034 	movhi	r4,128
    a450:	213fffc4 	addi	r4,r4,-1
    a454:	8120703a 	and	r16,r16,r4
    a458:	003fd906 	br	a3c0 <__floatunsisf+0x54>
    a45c:	20fffec4 	addi	r3,r4,-5
    a460:	80e0983a 	sll	r16,r16,r3
    a464:	003fe806 	br	a408 <__floatunsisf+0x9c>

0000a468 <__adddf3>:
    a468:	02000434 	movhi	r8,16
    a46c:	423fffc4 	addi	r8,r8,-1
    a470:	2806d53a 	srli	r3,r5,20
    a474:	3804d53a 	srli	r2,r7,20
    a478:	2a14703a 	and	r10,r5,r8
    a47c:	3a12703a 	and	r9,r7,r8
    a480:	280ad7fa 	srli	r5,r5,31
    a484:	501490fa 	slli	r10,r10,3
    a488:	2018d77a 	srli	r12,r4,29
    a48c:	481290fa 	slli	r9,r9,3
    a490:	3016d77a 	srli	r11,r6,29
    a494:	380ed7fa 	srli	r7,r7,31
    a498:	defffb04 	addi	sp,sp,-20
    a49c:	dc800215 	stw	r18,8(sp)
    a4a0:	dc000015 	stw	r16,0(sp)
    a4a4:	1c81ffcc 	andi	r18,r3,2047
    a4a8:	1081ffcc 	andi	r2,r2,2047
    a4ac:	dfc00415 	stw	ra,16(sp)
    a4b0:	dcc00315 	stw	r19,12(sp)
    a4b4:	dc400115 	stw	r17,4(sp)
    a4b8:	201c90fa 	slli	r14,r4,3
    a4bc:	301a90fa 	slli	r13,r6,3
    a4c0:	2821883a 	mov	r16,r5
    a4c4:	6294b03a 	or	r10,r12,r10
    a4c8:	5a52b03a 	or	r9,r11,r9
    a4cc:	9087c83a 	sub	r3,r18,r2
    a4d0:	29c06126 	beq	r5,r7,a658 <__adddf3+0x1f0>
    a4d4:	00c0550e 	bge	zero,r3,a62c <__adddf3+0x1c4>
    a4d8:	10007326 	beq	r2,zero,a6a8 <__adddf3+0x240>
    a4dc:	9081ffd8 	cmpnei	r2,r18,2047
    a4e0:	1000b826 	beq	r2,zero,a7c4 <__adddf3+0x35c>
    a4e4:	4a402034 	orhi	r9,r9,128
    a4e8:	18800e48 	cmpgei	r2,r3,57
    a4ec:	1000ee1e 	bne	r2,zero,a8a8 <__adddf3+0x440>
    a4f0:	18800808 	cmpgei	r2,r3,32
    a4f4:	10012d1e 	bne	r2,zero,a9ac <__adddf3+0x544>
    a4f8:	00800804 	movi	r2,32
    a4fc:	10c5c83a 	sub	r2,r2,r3
    a500:	68c8d83a 	srl	r4,r13,r3
    a504:	48a2983a 	sll	r17,r9,r2
    a508:	689a983a 	sll	r13,r13,r2
    a50c:	48c6d83a 	srl	r3,r9,r3
    a510:	8922b03a 	or	r17,r17,r4
    a514:	681ac03a 	cmpne	r13,r13,zero
    a518:	8b62b03a 	or	r17,r17,r13
    a51c:	50d5c83a 	sub	r10,r10,r3
    a520:	7463c83a 	sub	r17,r14,r17
    a524:	7451803a 	cmpltu	r8,r14,r17
    a528:	5211c83a 	sub	r8,r10,r8
    a52c:	4080202c 	andhi	r2,r8,128
    a530:	10008826 	beq	r2,zero,a754 <__adddf3+0x2ec>
    a534:	02402034 	movhi	r9,128
    a538:	4a7fffc4 	addi	r9,r9,-1
    a53c:	4266703a 	and	r19,r8,r9
    a540:	9800ae26 	beq	r19,zero,a7fc <__adddf3+0x394>
    a544:	9809883a 	mov	r4,r19
    a548:	000cc000 	call	cc00 <__clzsi2>
    a54c:	10fffe04 	addi	r3,r2,-8
    a550:	02000804 	movi	r8,32
    a554:	40d1c83a 	sub	r8,r8,r3
    a558:	8a10d83a 	srl	r8,r17,r8
    a55c:	98d2983a 	sll	r9,r19,r3
    a560:	88e2983a 	sll	r17,r17,r3
    a564:	4250b03a 	or	r8,r8,r9
    a568:	1c80ad16 	blt	r3,r18,a820 <__adddf3+0x3b8>
    a56c:	1c87c83a 	sub	r3,r3,r18
    a570:	19000044 	addi	r4,r3,1
    a574:	20800808 	cmpgei	r2,r4,32
    a578:	10006a1e 	bne	r2,zero,a724 <__adddf3+0x2bc>
    a57c:	00800804 	movi	r2,32
    a580:	1105c83a 	sub	r2,r2,r4
    a584:	8906d83a 	srl	r3,r17,r4
    a588:	88a2983a 	sll	r17,r17,r2
    a58c:	4084983a 	sll	r2,r8,r2
    a590:	4110d83a 	srl	r8,r8,r4
    a594:	8822c03a 	cmpne	r17,r17,zero
    a598:	10c4b03a 	or	r2,r2,r3
    a59c:	1462b03a 	or	r17,r2,r17
    a5a0:	0025883a 	mov	r18,zero
    a5a4:	888001cc 	andi	r2,r17,7
    a5a8:	10000726 	beq	r2,zero,a5c8 <__adddf3+0x160>
    a5ac:	888003cc 	andi	r2,r17,15
    a5b0:	10800120 	cmpeqi	r2,r2,4
    a5b4:	1000041e 	bne	r2,zero,a5c8 <__adddf3+0x160>
    a5b8:	88c00104 	addi	r3,r17,4
    a5bc:	1c63803a 	cmpltu	r17,r3,r17
    a5c0:	4451883a 	add	r8,r8,r17
    a5c4:	1823883a 	mov	r17,r3
    a5c8:	4080202c 	andhi	r2,r8,128
    a5cc:	10006326 	beq	r2,zero,a75c <__adddf3+0x2f4>
    a5d0:	90c00044 	addi	r3,r18,1
    a5d4:	1881ffe0 	cmpeqi	r2,r3,2047
    a5d8:	18c1ffcc 	andi	r3,r3,2047
    a5dc:	1000751e 	bne	r2,zero,a7b4 <__adddf3+0x34c>
    a5e0:	00bfe034 	movhi	r2,65408
    a5e4:	10bfffc4 	addi	r2,r2,-1
    a5e8:	4090703a 	and	r8,r8,r2
    a5ec:	4004977a 	slli	r2,r8,29
    a5f0:	4010927a 	slli	r8,r8,9
    a5f4:	8822d0fa 	srli	r17,r17,3
    a5f8:	4010d33a 	srli	r8,r8,12
    a5fc:	1444b03a 	or	r2,r2,r17
    a600:	1806953a 	slli	r3,r3,20
    a604:	802097fa 	slli	r16,r16,31
    a608:	1a06b03a 	or	r3,r3,r8
    a60c:	1c06b03a 	or	r3,r3,r16
    a610:	dfc00417 	ldw	ra,16(sp)
    a614:	dcc00317 	ldw	r19,12(sp)
    a618:	dc800217 	ldw	r18,8(sp)
    a61c:	dc400117 	ldw	r17,4(sp)
    a620:	dc000017 	ldw	r16,0(sp)
    a624:	dec00504 	addi	sp,sp,20
    a628:	f800283a 	ret
    a62c:	18002626 	beq	r3,zero,a6c8 <__adddf3+0x260>
    a630:	1487c83a 	sub	r3,r2,r18
    a634:	9000b51e 	bne	r18,zero,a90c <__adddf3+0x4a4>
    a638:	5388b03a 	or	r4,r10,r14
    a63c:	20010f26 	beq	r4,zero,aa7c <__adddf3+0x614>
    a640:	193fffc4 	addi	r4,r3,-1
    a644:	20016126 	beq	r4,zero,abcc <__adddf3+0x764>
    a648:	18c1ffd8 	cmpnei	r3,r3,2047
    a64c:	18012e26 	beq	r3,zero,ab08 <__adddf3+0x6a0>
    a650:	2007883a 	mov	r3,r4
    a654:	0000b006 	br	a918 <__adddf3+0x4b0>
    a658:	00c0760e 	bge	zero,r3,a834 <__adddf3+0x3cc>
    a65c:	10002926 	beq	r2,zero,a704 <__adddf3+0x29c>
    a660:	9081ffd8 	cmpnei	r2,r18,2047
    a664:	10012126 	beq	r2,zero,aaec <__adddf3+0x684>
    a668:	4a402034 	orhi	r9,r9,128
    a66c:	18800e48 	cmpgei	r2,r3,57
    a670:	1000461e 	bne	r2,zero,a78c <__adddf3+0x324>
    a674:	18800808 	cmpgei	r2,r3,32
    a678:	1000e326 	beq	r2,zero,aa08 <__adddf3+0x5a0>
    a67c:	1c7ff804 	addi	r17,r3,-32
    a680:	19000820 	cmpeqi	r4,r3,32
    a684:	4c44d83a 	srl	r2,r9,r17
    a688:	2000041e 	bne	r4,zero,a69c <__adddf3+0x234>
    a68c:	01001004 	movi	r4,64
    a690:	20c7c83a 	sub	r3,r4,r3
    a694:	48d2983a 	sll	r9,r9,r3
    a698:	6a5ab03a 	or	r13,r13,r9
    a69c:	6822c03a 	cmpne	r17,r13,zero
    a6a0:	88a2b03a 	or	r17,r17,r2
    a6a4:	00003b06 	br	a794 <__adddf3+0x32c>
    a6a8:	4b44b03a 	or	r2,r9,r13
    a6ac:	10008126 	beq	r2,zero,a8b4 <__adddf3+0x44c>
    a6b0:	18bfffc4 	addi	r2,r3,-1
    a6b4:	10010726 	beq	r2,zero,aad4 <__adddf3+0x66c>
    a6b8:	18c1ffd8 	cmpnei	r3,r3,2047
    a6bc:	18004126 	beq	r3,zero,a7c4 <__adddf3+0x35c>
    a6c0:	1007883a 	mov	r3,r2
    a6c4:	003f8806 	br	a4e8 <__adddf3+0x80>
    a6c8:	90800044 	addi	r2,r18,1
    a6cc:	1081ff8c 	andi	r2,r2,2046
    a6d0:	1000a01e 	bne	r2,zero,a954 <__adddf3+0x4ec>
    a6d4:	538ab03a 	or	r5,r10,r14
    a6d8:	4b44b03a 	or	r2,r9,r13
    a6dc:	9000ef1e 	bne	r18,zero,aa9c <__adddf3+0x634>
    a6e0:	28014126 	beq	r5,zero,abe8 <__adddf3+0x780>
    a6e4:	1001491e 	bne	r2,zero,ac0c <__adddf3+0x7a4>
    a6e8:	500a977a 	slli	r5,r10,29
    a6ec:	00880034 	movhi	r2,8192
    a6f0:	10bfffc4 	addi	r2,r2,-1
    a6f4:	2084703a 	and	r2,r4,r2
    a6f8:	5014d0fa 	srli	r10,r10,3
    a6fc:	1144b03a 	or	r2,r2,r5
    a700:	00001d06 	br	a778 <__adddf3+0x310>
    a704:	4b44b03a 	or	r2,r9,r13
    a708:	10006a26 	beq	r2,zero,a8b4 <__adddf3+0x44c>
    a70c:	18bfffc4 	addi	r2,r3,-1
    a710:	1000e826 	beq	r2,zero,aab4 <__adddf3+0x64c>
    a714:	18c1ffd8 	cmpnei	r3,r3,2047
    a718:	1800f426 	beq	r3,zero,aaec <__adddf3+0x684>
    a71c:	1007883a 	mov	r3,r2
    a720:	003fd206 	br	a66c <__adddf3+0x204>
    a724:	18fff844 	addi	r3,r3,-31
    a728:	20800820 	cmpeqi	r2,r4,32
    a72c:	40c6d83a 	srl	r3,r8,r3
    a730:	1000041e 	bne	r2,zero,a744 <__adddf3+0x2dc>
    a734:	00801004 	movi	r2,64
    a738:	1109c83a 	sub	r4,r2,r4
    a73c:	4110983a 	sll	r8,r8,r4
    a740:	8a22b03a 	or	r17,r17,r8
    a744:	8822c03a 	cmpne	r17,r17,zero
    a748:	88e2b03a 	or	r17,r17,r3
    a74c:	0011883a 	mov	r8,zero
    a750:	0025883a 	mov	r18,zero
    a754:	888001cc 	andi	r2,r17,7
    a758:	103f941e 	bne	r2,zero,a5ac <__adddf3+0x144>
    a75c:	8822d0fa 	srli	r17,r17,3
    a760:	4004977a 	slli	r2,r8,29
    a764:	4014d0fa 	srli	r10,r8,3
    a768:	9007883a 	mov	r3,r18
    a76c:	8884b03a 	or	r2,r17,r2
    a770:	1901ffe0 	cmpeqi	r4,r3,2047
    a774:	2000191e 	bne	r4,zero,a7dc <__adddf3+0x374>
    a778:	02000434 	movhi	r8,16
    a77c:	423fffc4 	addi	r8,r8,-1
    a780:	5210703a 	and	r8,r10,r8
    a784:	18c1ffcc 	andi	r3,r3,2047
    a788:	003f9d06 	br	a600 <__adddf3+0x198>
    a78c:	4b62b03a 	or	r17,r9,r13
    a790:	8822c03a 	cmpne	r17,r17,zero
    a794:	8ba3883a 	add	r17,r17,r14
    a798:	8b91803a 	cmpltu	r8,r17,r14
    a79c:	4291883a 	add	r8,r8,r10
    a7a0:	4080202c 	andhi	r2,r8,128
    a7a4:	103feb26 	beq	r2,zero,a754 <__adddf3+0x2ec>
    a7a8:	94800044 	addi	r18,r18,1
    a7ac:	9081ffe0 	cmpeqi	r2,r18,2047
    a7b0:	10007426 	beq	r2,zero,a984 <__adddf3+0x51c>
    a7b4:	00c1ffc4 	movi	r3,2047
    a7b8:	0011883a 	mov	r8,zero
    a7bc:	0005883a 	mov	r2,zero
    a7c0:	003f8f06 	br	a600 <__adddf3+0x198>
    a7c4:	500a977a 	slli	r5,r10,29
    a7c8:	00c80034 	movhi	r3,8192
    a7cc:	18ffffc4 	addi	r3,r3,-1
    a7d0:	5014d0fa 	srli	r10,r10,3
    a7d4:	20c4703a 	and	r2,r4,r3
    a7d8:	1144b03a 	or	r2,r2,r5
    a7dc:	1286b03a 	or	r3,r2,r10
    a7e0:	18015926 	beq	r3,zero,ad48 <__adddf3+0x8e0>
    a7e4:	00c00434 	movhi	r3,16
    a7e8:	18ffffc4 	addi	r3,r3,-1
    a7ec:	52000234 	orhi	r8,r10,8
    a7f0:	40d0703a 	and	r8,r8,r3
    a7f4:	00c1ffc4 	movi	r3,2047
    a7f8:	003f8106 	br	a600 <__adddf3+0x198>
    a7fc:	8809883a 	mov	r4,r17
    a800:	000cc000 	call	cc00 <__clzsi2>
    a804:	10c00604 	addi	r3,r2,24
    a808:	19000808 	cmpgei	r4,r3,32
    a80c:	203f5026 	beq	r4,zero,a550 <__adddf3+0xe8>
    a810:	123ffe04 	addi	r8,r2,-8
    a814:	8a10983a 	sll	r8,r17,r8
    a818:	0023883a 	mov	r17,zero
    a81c:	1cbf530e 	bge	r3,r18,a56c <__adddf3+0x104>
    a820:	00bfe034 	movhi	r2,65408
    a824:	10bfffc4 	addi	r2,r2,-1
    a828:	90e5c83a 	sub	r18,r18,r3
    a82c:	4090703a 	and	r8,r8,r2
    a830:	003f5c06 	br	a5a4 <__adddf3+0x13c>
    a834:	18002626 	beq	r3,zero,a8d0 <__adddf3+0x468>
    a838:	1487c83a 	sub	r3,r2,r18
    a83c:	90006e1e 	bne	r18,zero,a9f8 <__adddf3+0x590>
    a840:	5388b03a 	or	r4,r10,r14
    a844:	2000fd26 	beq	r4,zero,ac3c <__adddf3+0x7d4>
    a848:	193fffc4 	addi	r4,r3,-1
    a84c:	20013626 	beq	r4,zero,ad28 <__adddf3+0x8c0>
    a850:	18c1ffd8 	cmpnei	r3,r3,2047
    a854:	1800b426 	beq	r3,zero,ab28 <__adddf3+0x6c0>
    a858:	2007883a 	mov	r3,r4
    a85c:	19000e48 	cmpgei	r4,r3,57
    a860:	2000b81e 	bne	r4,zero,ab44 <__adddf3+0x6dc>
    a864:	19000808 	cmpgei	r4,r3,32
    a868:	2001241e 	bne	r4,zero,acfc <__adddf3+0x894>
    a86c:	01000804 	movi	r4,32
    a870:	20c9c83a 	sub	r4,r4,r3
    a874:	5122983a 	sll	r17,r10,r4
    a878:	70cad83a 	srl	r5,r14,r3
    a87c:	7108983a 	sll	r4,r14,r4
    a880:	50d4d83a 	srl	r10,r10,r3
    a884:	8962b03a 	or	r17,r17,r5
    a888:	2008c03a 	cmpne	r4,r4,zero
    a88c:	8922b03a 	or	r17,r17,r4
    a890:	4a93883a 	add	r9,r9,r10
    a894:	8b63883a 	add	r17,r17,r13
    a898:	8b51803a 	cmpltu	r8,r17,r13
    a89c:	4251883a 	add	r8,r8,r9
    a8a0:	1025883a 	mov	r18,r2
    a8a4:	003fbe06 	br	a7a0 <__adddf3+0x338>
    a8a8:	4b62b03a 	or	r17,r9,r13
    a8ac:	8822c03a 	cmpne	r17,r17,zero
    a8b0:	003f1b06 	br	a520 <__adddf3+0xb8>
    a8b4:	500c977a 	slli	r6,r10,29
    a8b8:	01480034 	movhi	r5,8192
    a8bc:	297fffc4 	addi	r5,r5,-1
    a8c0:	2144703a 	and	r2,r4,r5
    a8c4:	5014d0fa 	srli	r10,r10,3
    a8c8:	3084b03a 	or	r2,r6,r2
    a8cc:	003fa806 	br	a770 <__adddf3+0x308>
    a8d0:	90800044 	addi	r2,r18,1
    a8d4:	1141ff8c 	andi	r5,r2,2046
    a8d8:	2800561e 	bne	r5,zero,aa34 <__adddf3+0x5cc>
    a8dc:	5384b03a 	or	r2,r10,r14
    a8e0:	9000a61e 	bne	r18,zero,ab7c <__adddf3+0x714>
    a8e4:	1000ee26 	beq	r2,zero,aca0 <__adddf3+0x838>
    a8e8:	4b44b03a 	or	r2,r9,r13
    a8ec:	1000f31e 	bne	r2,zero,acbc <__adddf3+0x854>
    a8f0:	5004977a 	slli	r2,r10,29
    a8f4:	01480034 	movhi	r5,8192
    a8f8:	297fffc4 	addi	r5,r5,-1
    a8fc:	2148703a 	and	r4,r4,r5
    a900:	5014d0fa 	srli	r10,r10,3
    a904:	1104b03a 	or	r2,r2,r4
    a908:	003f9b06 	br	a778 <__adddf3+0x310>
    a90c:	1101ffd8 	cmpnei	r4,r2,2047
    a910:	20007d26 	beq	r4,zero,ab08 <__adddf3+0x6a0>
    a914:	52802034 	orhi	r10,r10,128
    a918:	19000e48 	cmpgei	r4,r3,57
    a91c:	20002e1e 	bne	r4,zero,a9d8 <__adddf3+0x570>
    a920:	19000808 	cmpgei	r4,r3,32
    a924:	20008a1e 	bne	r4,zero,ab50 <__adddf3+0x6e8>
    a928:	01000804 	movi	r4,32
    a92c:	20c9c83a 	sub	r4,r4,r3
    a930:	5122983a 	sll	r17,r10,r4
    a934:	70cad83a 	srl	r5,r14,r3
    a938:	711c983a 	sll	r14,r14,r4
    a93c:	50d4d83a 	srl	r10,r10,r3
    a940:	8962b03a 	or	r17,r17,r5
    a944:	701cc03a 	cmpne	r14,r14,zero
    a948:	8ba2b03a 	or	r17,r17,r14
    a94c:	4a93c83a 	sub	r9,r9,r10
    a950:	00002306 	br	a9e0 <__adddf3+0x578>
    a954:	7363c83a 	sub	r17,r14,r13
    a958:	5267c83a 	sub	r19,r10,r9
    a95c:	7451803a 	cmpltu	r8,r14,r17
    a960:	9a27c83a 	sub	r19,r19,r8
    a964:	9880202c 	andhi	r2,r19,128
    a968:	10003e1e 	bne	r2,zero,aa64 <__adddf3+0x5fc>
    a96c:	8cc4b03a 	or	r2,r17,r19
    a970:	103ef31e 	bne	r2,zero,a540 <__adddf3+0xd8>
    a974:	0015883a 	mov	r10,zero
    a978:	0021883a 	mov	r16,zero
    a97c:	003f7e06 	br	a778 <__adddf3+0x310>
    a980:	04800084 	movi	r18,2
    a984:	00bfe034 	movhi	r2,65408
    a988:	10bfffc4 	addi	r2,r2,-1
    a98c:	8806d07a 	srli	r3,r17,1
    a990:	4090703a 	and	r8,r8,r2
    a994:	400497fa 	slli	r2,r8,31
    a998:	8c40004c 	andi	r17,r17,1
    a99c:	1c62b03a 	or	r17,r3,r17
    a9a0:	4010d07a 	srli	r8,r8,1
    a9a4:	1462b03a 	or	r17,r2,r17
    a9a8:	003efe06 	br	a5a4 <__adddf3+0x13c>
    a9ac:	1c7ff804 	addi	r17,r3,-32
    a9b0:	19000820 	cmpeqi	r4,r3,32
    a9b4:	4c44d83a 	srl	r2,r9,r17
    a9b8:	2000041e 	bne	r4,zero,a9cc <__adddf3+0x564>
    a9bc:	01001004 	movi	r4,64
    a9c0:	20c7c83a 	sub	r3,r4,r3
    a9c4:	48d2983a 	sll	r9,r9,r3
    a9c8:	6a5ab03a 	or	r13,r13,r9
    a9cc:	6822c03a 	cmpne	r17,r13,zero
    a9d0:	88a2b03a 	or	r17,r17,r2
    a9d4:	003ed206 	br	a520 <__adddf3+0xb8>
    a9d8:	5394b03a 	or	r10,r10,r14
    a9dc:	5022c03a 	cmpne	r17,r10,zero
    a9e0:	6c63c83a 	sub	r17,r13,r17
    a9e4:	6c51803a 	cmpltu	r8,r13,r17
    a9e8:	4a11c83a 	sub	r8,r9,r8
    a9ec:	3821883a 	mov	r16,r7
    a9f0:	1025883a 	mov	r18,r2
    a9f4:	003ecd06 	br	a52c <__adddf3+0xc4>
    a9f8:	1101ffd8 	cmpnei	r4,r2,2047
    a9fc:	20004a26 	beq	r4,zero,ab28 <__adddf3+0x6c0>
    aa00:	52802034 	orhi	r10,r10,128
    aa04:	003f9506 	br	a85c <__adddf3+0x3f4>
    aa08:	00800804 	movi	r2,32
    aa0c:	10c5c83a 	sub	r2,r2,r3
    aa10:	68c8d83a 	srl	r4,r13,r3
    aa14:	48a2983a 	sll	r17,r9,r2
    aa18:	689a983a 	sll	r13,r13,r2
    aa1c:	48c6d83a 	srl	r3,r9,r3
    aa20:	8922b03a 	or	r17,r17,r4
    aa24:	681ac03a 	cmpne	r13,r13,zero
    aa28:	8b62b03a 	or	r17,r17,r13
    aa2c:	50d5883a 	add	r10,r10,r3
    aa30:	003f5806 	br	a794 <__adddf3+0x32c>
    aa34:	10c1ffe0 	cmpeqi	r3,r2,2047
    aa38:	183f5e1e 	bne	r3,zero,a7b4 <__adddf3+0x34c>
    aa3c:	7351883a 	add	r8,r14,r13
    aa40:	4387803a 	cmpltu	r3,r8,r14
    aa44:	5255883a 	add	r10,r10,r9
    aa48:	50c7883a 	add	r3,r10,r3
    aa4c:	401ad07a 	srli	r13,r8,1
    aa50:	182297fa 	slli	r17,r3,31
    aa54:	1810d07a 	srli	r8,r3,1
    aa58:	1025883a 	mov	r18,r2
    aa5c:	8b62b03a 	or	r17,r17,r13
    aa60:	003f3c06 	br	a754 <__adddf3+0x2ec>
    aa64:	6ba3c83a 	sub	r17,r13,r14
    aa68:	4a93c83a 	sub	r9,r9,r10
    aa6c:	6c51803a 	cmpltu	r8,r13,r17
    aa70:	4a27c83a 	sub	r19,r9,r8
    aa74:	3821883a 	mov	r16,r7
    aa78:	003eb106 	br	a540 <__adddf3+0xd8>
    aa7c:	480a977a 	slli	r5,r9,29
    aa80:	01080034 	movhi	r4,8192
    aa84:	213fffc4 	addi	r4,r4,-1
    aa88:	3104703a 	and	r2,r6,r4
    aa8c:	4814d0fa 	srli	r10,r9,3
    aa90:	1144b03a 	or	r2,r2,r5
    aa94:	3821883a 	mov	r16,r7
    aa98:	003f3506 	br	a770 <__adddf3+0x308>
    aa9c:	28006e1e 	bne	r5,zero,ac58 <__adddf3+0x7f0>
    aaa0:	1000191e 	bne	r2,zero,ab08 <__adddf3+0x6a0>
    aaa4:	0021883a 	mov	r16,zero
    aaa8:	4015883a 	mov	r10,r8
    aaac:	00bfffc4 	movi	r2,-1
    aab0:	003f4c06 	br	a7e4 <__adddf3+0x37c>
    aab4:	7363883a 	add	r17,r14,r13
    aab8:	5255883a 	add	r10,r10,r9
    aabc:	8b91803a 	cmpltu	r8,r17,r14
    aac0:	5211883a 	add	r8,r10,r8
    aac4:	4080202c 	andhi	r2,r8,128
    aac8:	103fad1e 	bne	r2,zero,a980 <__adddf3+0x518>
    aacc:	04800044 	movi	r18,1
    aad0:	003f2006 	br	a754 <__adddf3+0x2ec>
    aad4:	7363c83a 	sub	r17,r14,r13
    aad8:	5255c83a 	sub	r10,r10,r9
    aadc:	7451803a 	cmpltu	r8,r14,r17
    aae0:	5211c83a 	sub	r8,r10,r8
    aae4:	04800044 	movi	r18,1
    aae8:	003e9006 	br	a52c <__adddf3+0xc4>
    aaec:	5004977a 	slli	r2,r10,29
    aaf0:	00c80034 	movhi	r3,8192
    aaf4:	18ffffc4 	addi	r3,r3,-1
    aaf8:	20c8703a 	and	r4,r4,r3
    aafc:	5014d0fa 	srli	r10,r10,3
    ab00:	1104b03a 	or	r2,r2,r4
    ab04:	003f3506 	br	a7dc <__adddf3+0x374>
    ab08:	4806977a 	slli	r3,r9,29
    ab0c:	00880034 	movhi	r2,8192
    ab10:	10bfffc4 	addi	r2,r2,-1
    ab14:	3084703a 	and	r2,r6,r2
    ab18:	4814d0fa 	srli	r10,r9,3
    ab1c:	10c4b03a 	or	r2,r2,r3
    ab20:	3821883a 	mov	r16,r7
    ab24:	003f2d06 	br	a7dc <__adddf3+0x374>
    ab28:	4804977a 	slli	r2,r9,29
    ab2c:	00c80034 	movhi	r3,8192
    ab30:	18ffffc4 	addi	r3,r3,-1
    ab34:	30cc703a 	and	r6,r6,r3
    ab38:	4814d0fa 	srli	r10,r9,3
    ab3c:	1184b03a 	or	r2,r2,r6
    ab40:	003f2606 	br	a7dc <__adddf3+0x374>
    ab44:	5394b03a 	or	r10,r10,r14
    ab48:	5022c03a 	cmpne	r17,r10,zero
    ab4c:	003f5106 	br	a894 <__adddf3+0x42c>
    ab50:	1c7ff804 	addi	r17,r3,-32
    ab54:	19400820 	cmpeqi	r5,r3,32
    ab58:	5448d83a 	srl	r4,r10,r17
    ab5c:	2800041e 	bne	r5,zero,ab70 <__adddf3+0x708>
    ab60:	01401004 	movi	r5,64
    ab64:	28c7c83a 	sub	r3,r5,r3
    ab68:	50d4983a 	sll	r10,r10,r3
    ab6c:	729cb03a 	or	r14,r14,r10
    ab70:	7022c03a 	cmpne	r17,r14,zero
    ab74:	8922b03a 	or	r17,r17,r4
    ab78:	003f9906 	br	a9e0 <__adddf3+0x578>
    ab7c:	103fea26 	beq	r2,zero,ab28 <__adddf3+0x6c0>
    ab80:	4b50b03a 	or	r8,r9,r13
    ab84:	500a977a 	slli	r5,r10,29
    ab88:	5014d0fa 	srli	r10,r10,3
    ab8c:	40005626 	beq	r8,zero,ace8 <__adddf3+0x880>
    ab90:	00c80034 	movhi	r3,8192
    ab94:	18ffffc4 	addi	r3,r3,-1
    ab98:	20c4703a 	and	r2,r4,r3
    ab9c:	5100022c 	andhi	r4,r10,8
    aba0:	1144b03a 	or	r2,r2,r5
    aba4:	203f0d26 	beq	r4,zero,a7dc <__adddf3+0x374>
    aba8:	4808d0fa 	srli	r4,r9,3
    abac:	2140022c 	andhi	r5,r4,8
    abb0:	283f0a1e 	bne	r5,zero,a7dc <__adddf3+0x374>
    abb4:	4804977a 	slli	r2,r9,29
    abb8:	30cc703a 	and	r6,r6,r3
    abbc:	3821883a 	mov	r16,r7
    abc0:	3084b03a 	or	r2,r6,r2
    abc4:	2015883a 	mov	r10,r4
    abc8:	003f0406 	br	a7dc <__adddf3+0x374>
    abcc:	6ba3c83a 	sub	r17,r13,r14
    abd0:	4a95c83a 	sub	r10,r9,r10
    abd4:	6c51803a 	cmpltu	r8,r13,r17
    abd8:	5211c83a 	sub	r8,r10,r8
    abdc:	3821883a 	mov	r16,r7
    abe0:	04800044 	movi	r18,1
    abe4:	003e5106 	br	a52c <__adddf3+0xc4>
    abe8:	103f6226 	beq	r2,zero,a974 <__adddf3+0x50c>
    abec:	4808977a 	slli	r4,r9,29
    abf0:	00880034 	movhi	r2,8192
    abf4:	10bfffc4 	addi	r2,r2,-1
    abf8:	3084703a 	and	r2,r6,r2
    abfc:	4814d0fa 	srli	r10,r9,3
    ac00:	1104b03a 	or	r2,r2,r4
    ac04:	3821883a 	mov	r16,r7
    ac08:	003edb06 	br	a778 <__adddf3+0x310>
    ac0c:	7363c83a 	sub	r17,r14,r13
    ac10:	7445803a 	cmpltu	r2,r14,r17
    ac14:	5251c83a 	sub	r8,r10,r9
    ac18:	4091c83a 	sub	r8,r8,r2
    ac1c:	4080202c 	andhi	r2,r8,128
    ac20:	10004626 	beq	r2,zero,ad3c <__adddf3+0x8d4>
    ac24:	6ba3c83a 	sub	r17,r13,r14
    ac28:	4a95c83a 	sub	r10,r9,r10
    ac2c:	6c51803a 	cmpltu	r8,r13,r17
    ac30:	5211c83a 	sub	r8,r10,r8
    ac34:	3821883a 	mov	r16,r7
    ac38:	003e5a06 	br	a5a4 <__adddf3+0x13c>
    ac3c:	4804977a 	slli	r2,r9,29
    ac40:	01080034 	movhi	r4,8192
    ac44:	213fffc4 	addi	r4,r4,-1
    ac48:	310c703a 	and	r6,r6,r4
    ac4c:	4814d0fa 	srli	r10,r9,3
    ac50:	1184b03a 	or	r2,r2,r6
    ac54:	003ec606 	br	a770 <__adddf3+0x308>
    ac58:	500a977a 	slli	r5,r10,29
    ac5c:	5014d0fa 	srli	r10,r10,3
    ac60:	10002126 	beq	r2,zero,ace8 <__adddf3+0x880>
    ac64:	00c80034 	movhi	r3,8192
    ac68:	18ffffc4 	addi	r3,r3,-1
    ac6c:	20c4703a 	and	r2,r4,r3
    ac70:	5100022c 	andhi	r4,r10,8
    ac74:	1144b03a 	or	r2,r2,r5
    ac78:	203ed826 	beq	r4,zero,a7dc <__adddf3+0x374>
    ac7c:	4808d0fa 	srli	r4,r9,3
    ac80:	2140022c 	andhi	r5,r4,8
    ac84:	283ed51e 	bne	r5,zero,a7dc <__adddf3+0x374>
    ac88:	4812977a 	slli	r9,r9,29
    ac8c:	30c4703a 	and	r2,r6,r3
    ac90:	3821883a 	mov	r16,r7
    ac94:	1244b03a 	or	r2,r2,r9
    ac98:	2015883a 	mov	r10,r4
    ac9c:	003ecf06 	br	a7dc <__adddf3+0x374>
    aca0:	4804977a 	slli	r2,r9,29
    aca4:	01080034 	movhi	r4,8192
    aca8:	213fffc4 	addi	r4,r4,-1
    acac:	310c703a 	and	r6,r6,r4
    acb0:	4814d0fa 	srli	r10,r9,3
    acb4:	1184b03a 	or	r2,r2,r6
    acb8:	003eaf06 	br	a778 <__adddf3+0x310>
    acbc:	7363883a 	add	r17,r14,r13
    acc0:	5255883a 	add	r10,r10,r9
    acc4:	8b91803a 	cmpltu	r8,r17,r14
    acc8:	5211883a 	add	r8,r10,r8
    accc:	4080202c 	andhi	r2,r8,128
    acd0:	103ea026 	beq	r2,zero,a754 <__adddf3+0x2ec>
    acd4:	00bfe034 	movhi	r2,65408
    acd8:	10bfffc4 	addi	r2,r2,-1
    acdc:	4090703a 	and	r8,r8,r2
    ace0:	04800044 	movi	r18,1
    ace4:	003e9b06 	br	a754 <__adddf3+0x2ec>
    ace8:	00880034 	movhi	r2,8192
    acec:	10bfffc4 	addi	r2,r2,-1
    acf0:	2084703a 	and	r2,r4,r2
    acf4:	1144b03a 	or	r2,r2,r5
    acf8:	003eb806 	br	a7dc <__adddf3+0x374>
    acfc:	193ff804 	addi	r4,r3,-32
    ad00:	19400820 	cmpeqi	r5,r3,32
    ad04:	5108d83a 	srl	r4,r10,r4
    ad08:	2800041e 	bne	r5,zero,ad1c <__adddf3+0x8b4>
    ad0c:	01401004 	movi	r5,64
    ad10:	28c7c83a 	sub	r3,r5,r3
    ad14:	50d4983a 	sll	r10,r10,r3
    ad18:	729cb03a 	or	r14,r14,r10
    ad1c:	7022c03a 	cmpne	r17,r14,zero
    ad20:	8922b03a 	or	r17,r17,r4
    ad24:	003edb06 	br	a894 <__adddf3+0x42c>
    ad28:	7363883a 	add	r17,r14,r13
    ad2c:	5255883a 	add	r10,r10,r9
    ad30:	8b51803a 	cmpltu	r8,r17,r13
    ad34:	5211883a 	add	r8,r10,r8
    ad38:	003f6206 	br	aac4 <__adddf3+0x65c>
    ad3c:	8a04b03a 	or	r2,r17,r8
    ad40:	103f0c26 	beq	r2,zero,a974 <__adddf3+0x50c>
    ad44:	003e8306 	br	a754 <__adddf3+0x2ec>
    ad48:	0005883a 	mov	r2,zero
    ad4c:	00c1ffc4 	movi	r3,2047
    ad50:	0011883a 	mov	r8,zero
    ad54:	003e2a06 	br	a600 <__adddf3+0x198>

0000ad58 <__divdf3>:
    ad58:	2804d53a 	srli	r2,r5,20
    ad5c:	defff304 	addi	sp,sp,-52
    ad60:	dc000315 	stw	r16,12(sp)
    ad64:	04000434 	movhi	r16,16
    ad68:	ddc00a15 	stw	r23,40(sp)
    ad6c:	dd800915 	stw	r22,36(sp)
    ad70:	dc800515 	stw	r18,20(sp)
    ad74:	843fffc4 	addi	r16,r16,-1
    ad78:	dfc00c15 	stw	ra,48(sp)
    ad7c:	df000b15 	stw	fp,44(sp)
    ad80:	dd400815 	stw	r21,32(sp)
    ad84:	dd000715 	stw	r20,28(sp)
    ad88:	dcc00615 	stw	r19,24(sp)
    ad8c:	dc400415 	stw	r17,16(sp)
    ad90:	1081ffcc 	andi	r2,r2,2047
    ad94:	282cd7fa 	srli	r22,r5,31
    ad98:	302f883a 	mov	r23,r6
    ad9c:	2025883a 	mov	r18,r4
    ada0:	2c20703a 	and	r16,r5,r16
    ada4:	10010d26 	beq	r2,zero,b1dc <__divdf3+0x484>
    ada8:	10c1ffe0 	cmpeqi	r3,r2,2047
    adac:	1801201e 	bne	r3,zero,b230 <__divdf3+0x4d8>
    adb0:	2028d77a 	srli	r20,r4,29
    adb4:	800a90fa 	slli	r5,r16,3
    adb8:	202490fa 	slli	r18,r4,3
    adbc:	14ff0044 	addi	r19,r2,-1023
    adc0:	a14ab03a 	or	r5,r20,r5
    adc4:	2d002034 	orhi	r20,r5,128
    adc8:	0021883a 	mov	r16,zero
    adcc:	0039883a 	mov	fp,zero
    add0:	3804d53a 	srli	r2,r7,20
    add4:	00c00434 	movhi	r3,16
    add8:	18ffffc4 	addi	r3,r3,-1
    addc:	1081ffcc 	andi	r2,r2,2047
    ade0:	3810d7fa 	srli	r8,r7,31
    ade4:	38e2703a 	and	r17,r7,r3
    ade8:	1000e926 	beq	r2,zero,b190 <__divdf3+0x438>
    adec:	10c1ffe0 	cmpeqi	r3,r2,2047
    adf0:	1801161e 	bne	r3,zero,b24c <__divdf3+0x4f4>
    adf4:	880690fa 	slli	r3,r17,3
    adf8:	b822d77a 	srli	r17,r23,29
    adfc:	b81290fa 	slli	r9,r23,3
    ae00:	10bf0044 	addi	r2,r2,-1023
    ae04:	88c6b03a 	or	r3,r17,r3
    ae08:	1c402034 	orhi	r17,r3,128
    ae0c:	98a7c83a 	sub	r19,r19,r2
    ae10:	0007883a 	mov	r3,zero
    ae14:	80800428 	cmpgeui	r2,r16,16
    ae18:	b22af03a 	xor	r21,r22,r8
    ae1c:	1000391e 	bne	r2,zero,af04 <__divdf3+0x1ac>
    ae20:	800490ba 	slli	r2,r16,2
    ae24:	01800074 	movhi	r6,1
    ae28:	118d883a 	add	r6,r2,r6
    ae2c:	30ab8d17 	ldw	r2,-20940(r6)
    ae30:	1000683a 	jmp	r2
    ae34:	0000af04 	movi	zero,700
    ae38:	0000aee0 	cmpeqi	zero,zero,699
    ae3c:	0000ae90 	cmplti	zero,zero,698
    ae40:	0000aef0 	cmpltui	zero,zero,699
    ae44:	0000ae90 	cmplti	zero,zero,698
    ae48:	0000b2b0 	cmpltui	zero,zero,714
    ae4c:	0000ae90 	cmplti	zero,zero,698
    ae50:	0000aef0 	cmpltui	zero,zero,699
    ae54:	0000aee0 	cmpeqi	zero,zero,699
    ae58:	0000aee0 	cmpeqi	zero,zero,699
    ae5c:	0000b2b0 	cmpltui	zero,zero,714
    ae60:	0000aef0 	cmpltui	zero,zero,699
    ae64:	0000ae74 	movhi	zero,697
    ae68:	0000ae74 	movhi	zero,697
    ae6c:	0000ae74 	movhi	zero,697
    ae70:	0000b340 	call	b34 <kf_bfly3+0x2cc>
    ae74:	b02b883a 	mov	r21,r22
    ae78:	e08000a0 	cmpeqi	r2,fp,2
    ae7c:	1000181e 	bne	r2,zero,aee0 <__divdf3+0x188>
    ae80:	e08000e0 	cmpeqi	r2,fp,3
    ae84:	1001bf1e 	bne	r2,zero,b584 <__divdf3+0x82c>
    ae88:	e0800060 	cmpeqi	r2,fp,1
    ae8c:	1000ad26 	beq	r2,zero,b144 <__divdf3+0x3ec>
    ae90:	0007883a 	mov	r3,zero
    ae94:	000b883a 	mov	r5,zero
    ae98:	0025883a 	mov	r18,zero
    ae9c:	1806953a 	slli	r3,r3,20
    aea0:	a82a97fa 	slli	r21,r21,31
    aea4:	9005883a 	mov	r2,r18
    aea8:	1946b03a 	or	r3,r3,r5
    aeac:	1d46b03a 	or	r3,r3,r21
    aeb0:	dfc00c17 	ldw	ra,48(sp)
    aeb4:	df000b17 	ldw	fp,44(sp)
    aeb8:	ddc00a17 	ldw	r23,40(sp)
    aebc:	dd800917 	ldw	r22,36(sp)
    aec0:	dd400817 	ldw	r21,32(sp)
    aec4:	dd000717 	ldw	r20,28(sp)
    aec8:	dcc00617 	ldw	r19,24(sp)
    aecc:	dc800517 	ldw	r18,20(sp)
    aed0:	dc400417 	ldw	r17,16(sp)
    aed4:	dc000317 	ldw	r16,12(sp)
    aed8:	dec00d04 	addi	sp,sp,52
    aedc:	f800283a 	ret
    aee0:	00c1ffc4 	movi	r3,2047
    aee4:	000b883a 	mov	r5,zero
    aee8:	0025883a 	mov	r18,zero
    aeec:	003feb06 	br	ae9c <__divdf3+0x144>
    aef0:	402b883a 	mov	r21,r8
    aef4:	8829883a 	mov	r20,r17
    aef8:	4825883a 	mov	r18,r9
    aefc:	1839883a 	mov	fp,r3
    af00:	003fdd06 	br	ae78 <__divdf3+0x120>
    af04:	8d012836 	bltu	r17,r20,b3a8 <__divdf3+0x650>
    af08:	8d012626 	beq	r17,r20,b3a4 <__divdf3+0x64c>
    af0c:	9cffffc4 	addi	r19,r19,-1
    af10:	0021883a 	mov	r16,zero
    af14:	8806923a 	slli	r3,r17,8
    af18:	480cd63a 	srli	r6,r9,24
    af1c:	4804923a 	slli	r2,r9,8
    af20:	1838d43a 	srli	fp,r3,16
    af24:	a009883a 	mov	r4,r20
    af28:	30ecb03a 	or	r22,r6,r3
    af2c:	e00b883a 	mov	r5,fp
    af30:	d8800015 	stw	r2,0(sp)
    af34:	000933c0 	call	933c <__udivsi3>
    af38:	a009883a 	mov	r4,r20
    af3c:	e00b883a 	mov	r5,fp
    af40:	d8800115 	stw	r2,4(sp)
    af44:	00093a00 	call	93a0 <__umodsi3>
    af48:	d8c00117 	ldw	r3,4(sp)
    af4c:	1004943a 	slli	r2,r2,16
    af50:	9008d43a 	srli	r4,r18,16
    af54:	b47fffcc 	andi	r17,r22,65535
    af58:	88ef383a 	mul	r23,r17,r3
    af5c:	2088b03a 	or	r4,r4,r2
    af60:	25c0042e 	bgeu	r4,r23,af74 <__divdf3+0x21c>
    af64:	2589883a 	add	r4,r4,r22
    af68:	18bfffc4 	addi	r2,r3,-1
    af6c:	2581412e 	bgeu	r4,r22,b474 <__divdf3+0x71c>
    af70:	1007883a 	mov	r3,r2
    af74:	25efc83a 	sub	r23,r4,r23
    af78:	e00b883a 	mov	r5,fp
    af7c:	b809883a 	mov	r4,r23
    af80:	d8c00115 	stw	r3,4(sp)
    af84:	000933c0 	call	933c <__udivsi3>
    af88:	b809883a 	mov	r4,r23
    af8c:	e00b883a 	mov	r5,fp
    af90:	1029883a 	mov	r20,r2
    af94:	00093a00 	call	93a0 <__umodsi3>
    af98:	1008943a 	slli	r4,r2,16
    af9c:	8d13383a 	mul	r9,r17,r20
    afa0:	94bfffcc 	andi	r18,r18,65535
    afa4:	9108b03a 	or	r4,r18,r4
    afa8:	d8c00117 	ldw	r3,4(sp)
    afac:	2240042e 	bgeu	r4,r9,afc0 <__divdf3+0x268>
    afb0:	2589883a 	add	r4,r4,r22
    afb4:	a0bfffc4 	addi	r2,r20,-1
    afb8:	25812a2e 	bgeu	r4,r22,b464 <__divdf3+0x70c>
    afbc:	1029883a 	mov	r20,r2
    afc0:	180a943a 	slli	r5,r3,16
    afc4:	d8800017 	ldw	r2,0(sp)
    afc8:	2249c83a 	sub	r4,r4,r9
    afcc:	2d28b03a 	or	r20,r5,r20
    afd0:	100ed43a 	srli	r7,r2,16
    afd4:	123fffcc 	andi	r8,r2,65535
    afd8:	a00ad43a 	srli	r5,r20,16
    afdc:	a0bfffcc 	andi	r2,r20,65535
    afe0:	122f383a 	mul	r23,r2,r8
    afe4:	2a15383a 	mul	r10,r5,r8
    afe8:	3887383a 	mul	r3,r7,r2
    afec:	b804d43a 	srli	r2,r23,16
    aff0:	29cb383a 	mul	r5,r5,r7
    aff4:	1a87883a 	add	r3,r3,r10
    aff8:	10c5883a 	add	r2,r2,r3
    affc:	1280022e 	bgeu	r2,r10,b008 <__divdf3+0x2b0>
    b000:	00c00074 	movhi	r3,1
    b004:	28cb883a 	add	r5,r5,r3
    b008:	1006d43a 	srli	r3,r2,16
    b00c:	1004943a 	slli	r2,r2,16
    b010:	bdffffcc 	andi	r23,r23,65535
    b014:	1947883a 	add	r3,r3,r5
    b018:	15ef883a 	add	r23,r2,r23
    b01c:	20c00236 	bltu	r4,r3,b028 <__divdf3+0x2d0>
    b020:	20c00b1e 	bne	r4,r3,b050 <__divdf3+0x2f8>
    b024:	85c00a2e 	bgeu	r16,r23,b050 <__divdf3+0x2f8>
    b028:	d8800017 	ldw	r2,0(sp)
    b02c:	80a1883a 	add	r16,r16,r2
    b030:	8085803a 	cmpltu	r2,r16,r2
    b034:	1585883a 	add	r2,r2,r22
    b038:	2089883a 	add	r4,r4,r2
    b03c:	a0bfffc4 	addi	r2,r20,-1
    b040:	b101042e 	bgeu	r22,r4,b454 <__divdf3+0x6fc>
    b044:	20c13836 	bltu	r4,r3,b528 <__divdf3+0x7d0>
    b048:	19013626 	beq	r3,r4,b524 <__divdf3+0x7cc>
    b04c:	1029883a 	mov	r20,r2
    b050:	85efc83a 	sub	r23,r16,r23
    b054:	20c9c83a 	sub	r4,r4,r3
    b058:	85e1803a 	cmpltu	r16,r16,r23
    b05c:	2421c83a 	sub	r16,r4,r16
    b060:	b4011e26 	beq	r22,r16,b4dc <__divdf3+0x784>
    b064:	8009883a 	mov	r4,r16
    b068:	e00b883a 	mov	r5,fp
    b06c:	da000215 	stw	r8,8(sp)
    b070:	d9c00115 	stw	r7,4(sp)
    b074:	000933c0 	call	933c <__udivsi3>
    b078:	8009883a 	mov	r4,r16
    b07c:	e00b883a 	mov	r5,fp
    b080:	1025883a 	mov	r18,r2
    b084:	00093a00 	call	93a0 <__umodsi3>
    b088:	1004943a 	slli	r2,r2,16
    b08c:	b808d43a 	srli	r4,r23,16
    b090:	8ca1383a 	mul	r16,r17,r18
    b094:	d9c00117 	ldw	r7,4(sp)
    b098:	2088b03a 	or	r4,r4,r2
    b09c:	da000217 	ldw	r8,8(sp)
    b0a0:	2400e536 	bltu	r4,r16,b438 <__divdf3+0x6e0>
    b0a4:	2421c83a 	sub	r16,r4,r16
    b0a8:	8009883a 	mov	r4,r16
    b0ac:	e00b883a 	mov	r5,fp
    b0b0:	da000215 	stw	r8,8(sp)
    b0b4:	d9c00115 	stw	r7,4(sp)
    b0b8:	000933c0 	call	933c <__udivsi3>
    b0bc:	8009883a 	mov	r4,r16
    b0c0:	e00b883a 	mov	r5,fp
    b0c4:	1021883a 	mov	r16,r2
    b0c8:	00093a00 	call	93a0 <__umodsi3>
    b0cc:	1004943a 	slli	r2,r2,16
    b0d0:	8c23383a 	mul	r17,r17,r16
    b0d4:	bdffffcc 	andi	r23,r23,65535
    b0d8:	b8aeb03a 	or	r23,r23,r2
    b0dc:	d9c00117 	ldw	r7,4(sp)
    b0e0:	da000217 	ldw	r8,8(sp)
    b0e4:	bc40cd36 	bltu	r23,r17,b41c <__divdf3+0x6c4>
    b0e8:	9008943a 	slli	r4,r18,16
    b0ec:	bc63c83a 	sub	r17,r23,r17
    b0f0:	2424b03a 	or	r18,r4,r16
    b0f4:	900ad43a 	srli	r5,r18,16
    b0f8:	90bfffcc 	andi	r2,r18,65535
    b0fc:	4089383a 	mul	r4,r8,r2
    b100:	3885383a 	mul	r2,r7,r2
    b104:	2a11383a 	mul	r8,r5,r8
    b108:	2006d43a 	srli	r3,r4,16
    b10c:	394f383a 	mul	r7,r7,r5
    b110:	1205883a 	add	r2,r2,r8
    b114:	1887883a 	add	r3,r3,r2
    b118:	1a00022e 	bgeu	r3,r8,b124 <__divdf3+0x3cc>
    b11c:	00800074 	movhi	r2,1
    b120:	388f883a 	add	r7,r7,r2
    b124:	1804d43a 	srli	r2,r3,16
    b128:	1806943a 	slli	r3,r3,16
    b12c:	213fffcc 	andi	r4,r4,65535
    b130:	11cf883a 	add	r7,r2,r7
    b134:	1907883a 	add	r3,r3,r4
    b138:	89c09336 	bltu	r17,r7,b388 <__divdf3+0x630>
    b13c:	89c09126 	beq	r17,r7,b384 <__divdf3+0x62c>
    b140:	94800054 	ori	r18,r18,1
    b144:	9980ffc4 	addi	r6,r19,1023
    b148:	0180600e 	bge	zero,r6,b2cc <__divdf3+0x574>
    b14c:	908001cc 	andi	r2,r18,7
    b150:	1000e81e 	bne	r2,zero,b4f4 <__divdf3+0x79c>
    b154:	900ed0fa 	srli	r7,r18,3
    b158:	a080402c 	andhi	r2,r20,256
    b15c:	10000426 	beq	r2,zero,b170 <__divdf3+0x418>
    b160:	00bfc034 	movhi	r2,65280
    b164:	10bfffc4 	addi	r2,r2,-1
    b168:	a0a8703a 	and	r20,r20,r2
    b16c:	99810004 	addi	r6,r19,1024
    b170:	3081ffc8 	cmpgei	r2,r6,2047
    b174:	103f5a1e 	bne	r2,zero,aee0 <__divdf3+0x188>
    b178:	a008977a 	slli	r4,r20,29
    b17c:	a00a927a 	slli	r5,r20,9
    b180:	30c1ffcc 	andi	r3,r6,2047
    b184:	21e4b03a 	or	r18,r4,r7
    b188:	280ad33a 	srli	r5,r5,12
    b18c:	003f4306 	br	ae9c <__divdf3+0x144>
    b190:	8dd2b03a 	or	r9,r17,r23
    b194:	48004226 	beq	r9,zero,b2a0 <__divdf3+0x548>
    b198:	da000015 	stw	r8,0(sp)
    b19c:	88009326 	beq	r17,zero,b3ec <__divdf3+0x694>
    b1a0:	8809883a 	mov	r4,r17
    b1a4:	000cc000 	call	cc00 <__clzsi2>
    b1a8:	da000017 	ldw	r8,0(sp)
    b1ac:	117ffd44 	addi	r5,r2,-11
    b1b0:	01000744 	movi	r4,29
    b1b4:	127ffe04 	addi	r9,r2,-8
    b1b8:	2149c83a 	sub	r4,r4,r5
    b1bc:	8a46983a 	sll	r3,r17,r9
    b1c0:	b908d83a 	srl	r4,r23,r4
    b1c4:	ba52983a 	sll	r9,r23,r9
    b1c8:	20e2b03a 	or	r17,r4,r3
    b1cc:	14c5883a 	add	r2,r2,r19
    b1d0:	14c0fcc4 	addi	r19,r2,1011
    b1d4:	0007883a 	mov	r3,zero
    b1d8:	003f0e06 	br	ae14 <__divdf3+0xbc>
    b1dc:	8128b03a 	or	r20,r16,r4
    b1e0:	2023883a 	mov	r17,r4
    b1e4:	a0002926 	beq	r20,zero,b28c <__divdf3+0x534>
    b1e8:	d9c00015 	stw	r7,0(sp)
    b1ec:	80007426 	beq	r16,zero,b3c0 <__divdf3+0x668>
    b1f0:	8009883a 	mov	r4,r16
    b1f4:	000cc000 	call	cc00 <__clzsi2>
    b1f8:	d9c00017 	ldw	r7,0(sp)
    b1fc:	10fffd44 	addi	r3,r2,-11
    b200:	05000744 	movi	r20,29
    b204:	113ffe04 	addi	r4,r2,-8
    b208:	a0e9c83a 	sub	r20,r20,r3
    b20c:	810a983a 	sll	r5,r16,r4
    b210:	8d28d83a 	srl	r20,r17,r20
    b214:	8924983a 	sll	r18,r17,r4
    b218:	a168b03a 	or	r20,r20,r5
    b21c:	04ff0344 	movi	r19,-1011
    b220:	98a7c83a 	sub	r19,r19,r2
    b224:	0021883a 	mov	r16,zero
    b228:	0039883a 	mov	fp,zero
    b22c:	003ee806 	br	add0 <__divdf3+0x78>
    b230:	8128b03a 	or	r20,r16,r4
    b234:	a000101e 	bne	r20,zero,b278 <__divdf3+0x520>
    b238:	0025883a 	mov	r18,zero
    b23c:	04000204 	movi	r16,8
    b240:	04c1ffc4 	movi	r19,2047
    b244:	07000084 	movi	fp,2
    b248:	003ee106 	br	add0 <__divdf3+0x78>
    b24c:	8dd2b03a 	or	r9,r17,r23
    b250:	9cfe0044 	addi	r19,r19,-2047
    b254:	4800041e 	bne	r9,zero,b268 <__divdf3+0x510>
    b258:	84000094 	ori	r16,r16,2
    b25c:	0023883a 	mov	r17,zero
    b260:	00c00084 	movi	r3,2
    b264:	003eeb06 	br	ae14 <__divdf3+0xbc>
    b268:	840000d4 	ori	r16,r16,3
    b26c:	b813883a 	mov	r9,r23
    b270:	00c000c4 	movi	r3,3
    b274:	003ee706 	br	ae14 <__divdf3+0xbc>
    b278:	8029883a 	mov	r20,r16
    b27c:	04c1ffc4 	movi	r19,2047
    b280:	04000304 	movi	r16,12
    b284:	070000c4 	movi	fp,3
    b288:	003ed106 	br	add0 <__divdf3+0x78>
    b28c:	0025883a 	mov	r18,zero
    b290:	04000104 	movi	r16,4
    b294:	0027883a 	mov	r19,zero
    b298:	07000044 	movi	fp,1
    b29c:	003ecc06 	br	add0 <__divdf3+0x78>
    b2a0:	84000054 	ori	r16,r16,1
    b2a4:	0023883a 	mov	r17,zero
    b2a8:	00c00044 	movi	r3,1
    b2ac:	003ed906 	br	ae14 <__divdf3+0xbc>
    b2b0:	01400434 	movhi	r5,16
    b2b4:	002b883a 	mov	r21,zero
    b2b8:	297fffc4 	addi	r5,r5,-1
    b2bc:	04bfffc4 	movi	r18,-1
    b2c0:	00c1ffc4 	movi	r3,2047
    b2c4:	003ef506 	br	ae9c <__divdf3+0x144>
    b2c8:	04bfffc4 	movi	r18,-1
    b2cc:	01400044 	movi	r5,1
    b2d0:	298bc83a 	sub	r5,r5,r6
    b2d4:	28800e48 	cmpgei	r2,r5,57
    b2d8:	103eed1e 	bne	r2,zero,ae90 <__divdf3+0x138>
    b2dc:	28800808 	cmpgei	r2,r5,32
    b2e0:	1000681e 	bne	r2,zero,b484 <__divdf3+0x72c>
    b2e4:	98810784 	addi	r2,r19,1054
    b2e8:	a086983a 	sll	r3,r20,r2
    b2ec:	9148d83a 	srl	r4,r18,r5
    b2f0:	9084983a 	sll	r2,r18,r2
    b2f4:	a14ad83a 	srl	r5,r20,r5
    b2f8:	1924b03a 	or	r18,r3,r4
    b2fc:	1004c03a 	cmpne	r2,r2,zero
    b300:	90a4b03a 	or	r18,r18,r2
    b304:	908001cc 	andi	r2,r18,7
    b308:	10000726 	beq	r2,zero,b328 <__divdf3+0x5d0>
    b30c:	908003cc 	andi	r2,r18,15
    b310:	10800120 	cmpeqi	r2,r2,4
    b314:	1000041e 	bne	r2,zero,b328 <__divdf3+0x5d0>
    b318:	90800104 	addi	r2,r18,4
    b31c:	14a5803a 	cmpltu	r18,r2,r18
    b320:	2c8b883a 	add	r5,r5,r18
    b324:	1025883a 	mov	r18,r2
    b328:	2880202c 	andhi	r2,r5,128
    b32c:	10009126 	beq	r2,zero,b574 <__divdf3+0x81c>
    b330:	00c00044 	movi	r3,1
    b334:	000b883a 	mov	r5,zero
    b338:	0025883a 	mov	r18,zero
    b33c:	003ed706 	br	ae9c <__divdf3+0x144>
    b340:	a080022c 	andhi	r2,r20,8
    b344:	10000926 	beq	r2,zero,b36c <__divdf3+0x614>
    b348:	8880022c 	andhi	r2,r17,8
    b34c:	1000071e 	bne	r2,zero,b36c <__divdf3+0x614>
    b350:	00800434 	movhi	r2,16
    b354:	89400234 	orhi	r5,r17,8
    b358:	10bfffc4 	addi	r2,r2,-1
    b35c:	288a703a 	and	r5,r5,r2
    b360:	402b883a 	mov	r21,r8
    b364:	4825883a 	mov	r18,r9
    b368:	003fd506 	br	b2c0 <__divdf3+0x568>
    b36c:	00800434 	movhi	r2,16
    b370:	a1400234 	orhi	r5,r20,8
    b374:	10bfffc4 	addi	r2,r2,-1
    b378:	288a703a 	and	r5,r5,r2
    b37c:	b02b883a 	mov	r21,r22
    b380:	003fcf06 	br	b2c0 <__divdf3+0x568>
    b384:	183f6f26 	beq	r3,zero,b144 <__divdf3+0x3ec>
    b388:	b463883a 	add	r17,r22,r17
    b38c:	90bfffc4 	addi	r2,r18,-1
    b390:	8d804d36 	bltu	r17,r22,b4c8 <__divdf3+0x770>
    b394:	89c06b36 	bltu	r17,r7,b544 <__divdf3+0x7ec>
    b398:	89c07f26 	beq	r17,r7,b598 <__divdf3+0x840>
    b39c:	1025883a 	mov	r18,r2
    b3a0:	003f6706 	br	b140 <__divdf3+0x3e8>
    b3a4:	927ed936 	bltu	r18,r9,af0c <__divdf3+0x1b4>
    b3a8:	a00897fa 	slli	r4,r20,31
    b3ac:	9004d07a 	srli	r2,r18,1
    b3b0:	902097fa 	slli	r16,r18,31
    b3b4:	a028d07a 	srli	r20,r20,1
    b3b8:	20a4b03a 	or	r18,r4,r2
    b3bc:	003ed506 	br	af14 <__divdf3+0x1bc>
    b3c0:	000cc000 	call	cc00 <__clzsi2>
    b3c4:	10c00544 	addi	r3,r2,21
    b3c8:	19000748 	cmpgei	r4,r3,29
    b3cc:	100b883a 	mov	r5,r2
    b3d0:	d9c00017 	ldw	r7,0(sp)
    b3d4:	10800804 	addi	r2,r2,32
    b3d8:	203f8926 	beq	r4,zero,b200 <__divdf3+0x4a8>
    b3dc:	297ffe04 	addi	r5,r5,-8
    b3e0:	9168983a 	sll	r20,r18,r5
    b3e4:	0025883a 	mov	r18,zero
    b3e8:	003f8c06 	br	b21c <__divdf3+0x4c4>
    b3ec:	b809883a 	mov	r4,r23
    b3f0:	000cc000 	call	cc00 <__clzsi2>
    b3f4:	11400544 	addi	r5,r2,21
    b3f8:	29000748 	cmpgei	r4,r5,29
    b3fc:	1007883a 	mov	r3,r2
    b400:	da000017 	ldw	r8,0(sp)
    b404:	10800804 	addi	r2,r2,32
    b408:	203f6926 	beq	r4,zero,b1b0 <__divdf3+0x458>
    b40c:	18fffe04 	addi	r3,r3,-8
    b410:	b8e2983a 	sll	r17,r23,r3
    b414:	0013883a 	mov	r9,zero
    b418:	003f6c06 	br	b1cc <__divdf3+0x474>
    b41c:	bdaf883a 	add	r23,r23,r22
    b420:	80bfffc4 	addi	r2,r16,-1
    b424:	bd803b36 	bltu	r23,r22,b514 <__divdf3+0x7bc>
    b428:	bc403a2e 	bgeu	r23,r17,b514 <__divdf3+0x7bc>
    b42c:	843fff84 	addi	r16,r16,-2
    b430:	bdaf883a 	add	r23,r23,r22
    b434:	003f2c06 	br	b0e8 <__divdf3+0x390>
    b438:	2589883a 	add	r4,r4,r22
    b43c:	90bfffc4 	addi	r2,r18,-1
    b440:	25803636 	bltu	r4,r22,b51c <__divdf3+0x7c4>
    b444:	2400352e 	bgeu	r4,r16,b51c <__divdf3+0x7c4>
    b448:	94bfff84 	addi	r18,r18,-2
    b44c:	2589883a 	add	r4,r4,r22
    b450:	003f1406 	br	b0a4 <__divdf3+0x34c>
    b454:	b13efd1e 	bne	r22,r4,b04c <__divdf3+0x2f4>
    b458:	d9400017 	ldw	r5,0(sp)
    b45c:	817efb36 	bltu	r16,r5,b04c <__divdf3+0x2f4>
    b460:	003ef806 	br	b044 <__divdf3+0x2ec>
    b464:	227ed52e 	bgeu	r4,r9,afbc <__divdf3+0x264>
    b468:	a53fff84 	addi	r20,r20,-2
    b46c:	2589883a 	add	r4,r4,r22
    b470:	003ed306 	br	afc0 <__divdf3+0x268>
    b474:	25febe2e 	bgeu	r4,r23,af70 <__divdf3+0x218>
    b478:	18ffff84 	addi	r3,r3,-2
    b47c:	2589883a 	add	r4,r4,r22
    b480:	003ebc06 	br	af74 <__divdf3+0x21c>
    b484:	00fff844 	movi	r3,-31
    b488:	1987c83a 	sub	r3,r3,r6
    b48c:	29400820 	cmpeqi	r5,r5,32
    b490:	a0c6d83a 	srl	r3,r20,r3
    b494:	2800031e 	bne	r5,zero,b4a4 <__divdf3+0x74c>
    b498:	99410f84 	addi	r5,r19,1086
    b49c:	a14a983a 	sll	r5,r20,r5
    b4a0:	9164b03a 	or	r18,r18,r5
    b4a4:	9024c03a 	cmpne	r18,r18,zero
    b4a8:	90e4b03a 	or	r18,r18,r3
    b4ac:	910001cc 	andi	r4,r18,7
    b4b0:	20002c1e 	bne	r4,zero,b564 <__divdf3+0x80c>
    b4b4:	000b883a 	mov	r5,zero
    b4b8:	9024d0fa 	srli	r18,r18,3
    b4bc:	0007883a 	mov	r3,zero
    b4c0:	9124b03a 	or	r18,r18,r4
    b4c4:	003e7506 	br	ae9c <__divdf3+0x144>
    b4c8:	1025883a 	mov	r18,r2
    b4cc:	89ff1c1e 	bne	r17,r7,b140 <__divdf3+0x3e8>
    b4d0:	d8800017 	ldw	r2,0(sp)
    b4d4:	18bf1a1e 	bne	r3,r2,b140 <__divdf3+0x3e8>
    b4d8:	003f1a06 	br	b144 <__divdf3+0x3ec>
    b4dc:	9980ffc4 	addi	r6,r19,1023
    b4e0:	01bf790e 	bge	zero,r6,b2c8 <__divdf3+0x570>
    b4e4:	000f883a 	mov	r7,zero
    b4e8:	01000044 	movi	r4,1
    b4ec:	a129883a 	add	r20,r20,r4
    b4f0:	003f1906 	br	b158 <__divdf3+0x400>
    b4f4:	908003cc 	andi	r2,r18,15
    b4f8:	10800118 	cmpnei	r2,r2,4
    b4fc:	103f1526 	beq	r2,zero,b154 <__divdf3+0x3fc>
    b500:	91c00104 	addi	r7,r18,4
    b504:	013ffec4 	movi	r4,-5
    b508:	380ed0fa 	srli	r7,r7,3
    b50c:	2489803a 	cmpltu	r4,r4,r18
    b510:	003ff606 	br	b4ec <__divdf3+0x794>
    b514:	1021883a 	mov	r16,r2
    b518:	003ef306 	br	b0e8 <__divdf3+0x390>
    b51c:	1025883a 	mov	r18,r2
    b520:	003ee006 	br	b0a4 <__divdf3+0x34c>
    b524:	85fec92e 	bgeu	r16,r23,b04c <__divdf3+0x2f4>
    b528:	d8800017 	ldw	r2,0(sp)
    b52c:	a53fff84 	addi	r20,r20,-2
    b530:	80a1883a 	add	r16,r16,r2
    b534:	8085803a 	cmpltu	r2,r16,r2
    b538:	1585883a 	add	r2,r2,r22
    b53c:	2089883a 	add	r4,r4,r2
    b540:	003ec306 	br	b050 <__divdf3+0x2f8>
    b544:	d9000017 	ldw	r4,0(sp)
    b548:	94bfff84 	addi	r18,r18,-2
    b54c:	2105883a 	add	r2,r4,r4
    b550:	1109803a 	cmpltu	r4,r2,r4
    b554:	258d883a 	add	r6,r4,r22
    b558:	89a3883a 	add	r17,r17,r6
    b55c:	d8800015 	stw	r2,0(sp)
    b560:	003fda06 	br	b4cc <__divdf3+0x774>
    b564:	908003cc 	andi	r2,r18,15
    b568:	10800118 	cmpnei	r2,r2,4
    b56c:	000b883a 	mov	r5,zero
    b570:	103f691e 	bne	r2,zero,b318 <__divdf3+0x5c0>
    b574:	2804927a 	slli	r2,r5,9
    b578:	2808977a 	slli	r4,r5,29
    b57c:	100ad33a 	srli	r5,r2,12
    b580:	003fcd06 	br	b4b8 <__divdf3+0x760>
    b584:	00800434 	movhi	r2,16
    b588:	a1400234 	orhi	r5,r20,8
    b58c:	10bfffc4 	addi	r2,r2,-1
    b590:	288a703a 	and	r5,r5,r2
    b594:	003f4a06 	br	b2c0 <__divdf3+0x568>
    b598:	d9000017 	ldw	r4,0(sp)
    b59c:	20ffe936 	bltu	r4,r3,b544 <__divdf3+0x7ec>
    b5a0:	1025883a 	mov	r18,r2
    b5a4:	003fca06 	br	b4d0 <__divdf3+0x778>

0000b5a8 <__eqdf2>:
    b5a8:	2810d53a 	srli	r8,r5,20
    b5ac:	3806d53a 	srli	r3,r7,20
    b5b0:	00800434 	movhi	r2,16
    b5b4:	4201ffcc 	andi	r8,r8,2047
    b5b8:	10bfffc4 	addi	r2,r2,-1
    b5bc:	4241ffd8 	cmpnei	r9,r8,2047
    b5c0:	2814d7fa 	srli	r10,r5,31
    b5c4:	3816d7fa 	srli	r11,r7,31
    b5c8:	288a703a 	and	r5,r5,r2
    b5cc:	388e703a 	and	r7,r7,r2
    b5d0:	1881ffcc 	andi	r2,r3,2047
    b5d4:	48000626 	beq	r9,zero,b5f0 <__eqdf2+0x48>
    b5d8:	10c1ffe0 	cmpeqi	r3,r2,2047
    b5dc:	1800021e 	bne	r3,zero,b5e8 <__eqdf2+0x40>
    b5e0:	4080011e 	bne	r8,r2,b5e8 <__eqdf2+0x40>
    b5e4:	29c00826 	beq	r5,r7,b608 <__eqdf2+0x60>
    b5e8:	00800044 	movi	r2,1
    b5ec:	f800283a 	ret
    b5f0:	2906b03a 	or	r3,r5,r4
    b5f4:	183ffc1e 	bne	r3,zero,b5e8 <__eqdf2+0x40>
    b5f8:	1081ffd8 	cmpnei	r2,r2,2047
    b5fc:	103ffa1e 	bne	r2,zero,b5e8 <__eqdf2+0x40>
    b600:	398eb03a 	or	r7,r7,r6
    b604:	383ff81e 	bne	r7,zero,b5e8 <__eqdf2+0x40>
    b608:	21bff71e 	bne	r4,r6,b5e8 <__eqdf2+0x40>
    b60c:	52c00426 	beq	r10,r11,b620 <__eqdf2+0x78>
    b610:	403ff51e 	bne	r8,zero,b5e8 <__eqdf2+0x40>
    b614:	290ab03a 	or	r5,r5,r4
    b618:	2804c03a 	cmpne	r2,r5,zero
    b61c:	f800283a 	ret
    b620:	0005883a 	mov	r2,zero
    b624:	f800283a 	ret

0000b628 <__gedf2>:
    b628:	2810d53a 	srli	r8,r5,20
    b62c:	3812d53a 	srli	r9,r7,20
    b630:	00c00434 	movhi	r3,16
    b634:	4201ffcc 	andi	r8,r8,2047
    b638:	18ffffc4 	addi	r3,r3,-1
    b63c:	4281ffd8 	cmpnei	r10,r8,2047
    b640:	2816d7fa 	srli	r11,r5,31
    b644:	3804d7fa 	srli	r2,r7,31
    b648:	28ca703a 	and	r5,r5,r3
    b64c:	38ce703a 	and	r7,r7,r3
    b650:	48c1ffcc 	andi	r3,r9,2047
    b654:	50000a26 	beq	r10,zero,b680 <__gedf2+0x58>
    b658:	1a41ffd8 	cmpnei	r9,r3,2047
    b65c:	48000c26 	beq	r9,zero,b690 <__gedf2+0x68>
    b660:	4000171e 	bne	r8,zero,b6c0 <__gedf2+0x98>
    b664:	2912b03a 	or	r9,r5,r4
    b668:	1800121e 	bne	r3,zero,b6b4 <__gedf2+0x8c>
    b66c:	3994b03a 	or	r10,r7,r6
    b670:	5000101e 	bne	r10,zero,b6b4 <__gedf2+0x8c>
    b674:	48000a1e 	bne	r9,zero,b6a0 <__gedf2+0x78>
    b678:	0005883a 	mov	r2,zero
    b67c:	f800283a 	ret
    b680:	2912b03a 	or	r9,r5,r4
    b684:	48001d1e 	bne	r9,zero,b6fc <__gedf2+0xd4>
    b688:	1a41ffe0 	cmpeqi	r9,r3,2047
    b68c:	48000c26 	beq	r9,zero,b6c0 <__gedf2+0x98>
    b690:	3992b03a 	or	r9,r7,r6
    b694:	4800191e 	bne	r9,zero,b6fc <__gedf2+0xd4>
    b698:	40000526 	beq	r8,zero,b6b0 <__gedf2+0x88>
    b69c:	58800c26 	beq	r11,r2,b6d0 <__gedf2+0xa8>
    b6a0:	00800044 	movi	r2,1
    b6a4:	58000526 	beq	r11,zero,b6bc <__gedf2+0x94>
    b6a8:	00bfffc4 	movi	r2,-1
    b6ac:	f800283a 	ret
    b6b0:	2912b03a 	or	r9,r5,r4
    b6b4:	483ff91e 	bne	r9,zero,b69c <__gedf2+0x74>
    b6b8:	103ffb26 	beq	r2,zero,b6a8 <__gedf2+0x80>
    b6bc:	f800283a 	ret
    b6c0:	183ff61e 	bne	r3,zero,b69c <__gedf2+0x74>
    b6c4:	3992b03a 	or	r9,r7,r6
    b6c8:	483ff41e 	bne	r9,zero,b69c <__gedf2+0x74>
    b6cc:	003ff406 	br	b6a0 <__gedf2+0x78>
    b6d0:	1a000716 	blt	r3,r8,b6f0 <__gedf2+0xc8>
    b6d4:	40fff816 	blt	r8,r3,b6b8 <__gedf2+0x90>
    b6d8:	397ff136 	bltu	r7,r5,b6a0 <__gedf2+0x78>
    b6dc:	29c00926 	beq	r5,r7,b704 <__gedf2+0xdc>
    b6e0:	29ffe52e 	bgeu	r5,r7,b678 <__gedf2+0x50>
    b6e4:	583ff026 	beq	r11,zero,b6a8 <__gedf2+0x80>
    b6e8:	5805883a 	mov	r2,r11
    b6ec:	f800283a 	ret
    b6f0:	103fed1e 	bne	r2,zero,b6a8 <__gedf2+0x80>
    b6f4:	00800044 	movi	r2,1
    b6f8:	f800283a 	ret
    b6fc:	00bfff84 	movi	r2,-2
    b700:	f800283a 	ret
    b704:	313fe636 	bltu	r6,r4,b6a0 <__gedf2+0x78>
    b708:	21bfdb2e 	bgeu	r4,r6,b678 <__gedf2+0x50>
    b70c:	003ff506 	br	b6e4 <__gedf2+0xbc>

0000b710 <__ledf2>:
    b710:	2810d53a 	srli	r8,r5,20
    b714:	3812d53a 	srli	r9,r7,20
    b718:	00c00434 	movhi	r3,16
    b71c:	4201ffcc 	andi	r8,r8,2047
    b720:	18ffffc4 	addi	r3,r3,-1
    b724:	4281ffd8 	cmpnei	r10,r8,2047
    b728:	2816d7fa 	srli	r11,r5,31
    b72c:	3804d7fa 	srli	r2,r7,31
    b730:	28ca703a 	and	r5,r5,r3
    b734:	38ce703a 	and	r7,r7,r3
    b738:	48c1ffcc 	andi	r3,r9,2047
    b73c:	50000a26 	beq	r10,zero,b768 <__ledf2+0x58>
    b740:	1a41ffd8 	cmpnei	r9,r3,2047
    b744:	48000c26 	beq	r9,zero,b778 <__ledf2+0x68>
    b748:	4000191e 	bne	r8,zero,b7b0 <__ledf2+0xa0>
    b74c:	2912b03a 	or	r9,r5,r4
    b750:	18000d1e 	bne	r3,zero,b788 <__ledf2+0x78>
    b754:	3994b03a 	or	r10,r7,r6
    b758:	50000b1e 	bne	r10,zero,b788 <__ledf2+0x78>
    b75c:	48000c1e 	bne	r9,zero,b790 <__ledf2+0x80>
    b760:	0005883a 	mov	r2,zero
    b764:	f800283a 	ret
    b768:	2912b03a 	or	r9,r5,r4
    b76c:	48000c1e 	bne	r9,zero,b7a0 <__ledf2+0x90>
    b770:	1a41ffe0 	cmpeqi	r9,r3,2047
    b774:	48000e26 	beq	r9,zero,b7b0 <__ledf2+0xa0>
    b778:	3992b03a 	or	r9,r7,r6
    b77c:	4800081e 	bne	r9,zero,b7a0 <__ledf2+0x90>
    b780:	4000021e 	bne	r8,zero,b78c <__ledf2+0x7c>
    b784:	2912b03a 	or	r9,r5,r4
    b788:	48000726 	beq	r9,zero,b7a8 <__ledf2+0x98>
    b78c:	58800c26 	beq	r11,r2,b7c0 <__ledf2+0xb0>
    b790:	00800044 	movi	r2,1
    b794:	58000526 	beq	r11,zero,b7ac <__ledf2+0x9c>
    b798:	00bfffc4 	movi	r2,-1
    b79c:	f800283a 	ret
    b7a0:	00800084 	movi	r2,2
    b7a4:	f800283a 	ret
    b7a8:	103ffb26 	beq	r2,zero,b798 <__ledf2+0x88>
    b7ac:	f800283a 	ret
    b7b0:	183ff61e 	bne	r3,zero,b78c <__ledf2+0x7c>
    b7b4:	3992b03a 	or	r9,r7,r6
    b7b8:	483ff41e 	bne	r9,zero,b78c <__ledf2+0x7c>
    b7bc:	003ff406 	br	b790 <__ledf2+0x80>
    b7c0:	1a00030e 	bge	r3,r8,b7d0 <__ledf2+0xc0>
    b7c4:	103ff41e 	bne	r2,zero,b798 <__ledf2+0x88>
    b7c8:	00800044 	movi	r2,1
    b7cc:	f800283a 	ret
    b7d0:	40fff516 	blt	r8,r3,b7a8 <__ledf2+0x98>
    b7d4:	397fee36 	bltu	r7,r5,b790 <__ledf2+0x80>
    b7d8:	29c00426 	beq	r5,r7,b7ec <__ledf2+0xdc>
    b7dc:	29ffe02e 	bgeu	r5,r7,b760 <__ledf2+0x50>
    b7e0:	583fed26 	beq	r11,zero,b798 <__ledf2+0x88>
    b7e4:	5805883a 	mov	r2,r11
    b7e8:	f800283a 	ret
    b7ec:	313fe836 	bltu	r6,r4,b790 <__ledf2+0x80>
    b7f0:	21bfdb2e 	bgeu	r4,r6,b760 <__ledf2+0x50>
    b7f4:	003ffa06 	br	b7e0 <__ledf2+0xd0>

0000b7f8 <__muldf3>:
    b7f8:	2804d53a 	srli	r2,r5,20
    b7fc:	defff504 	addi	sp,sp,-44
    b800:	02000434 	movhi	r8,16
    b804:	df000915 	stw	fp,36(sp)
    b808:	dd000515 	stw	r20,20(sp)
    b80c:	dcc00415 	stw	r19,16(sp)
    b810:	dc000115 	stw	r16,4(sp)
    b814:	423fffc4 	addi	r8,r8,-1
    b818:	dfc00a15 	stw	ra,40(sp)
    b81c:	ddc00815 	stw	r23,32(sp)
    b820:	dd800715 	stw	r22,28(sp)
    b824:	dd400615 	stw	r21,24(sp)
    b828:	dc800315 	stw	r18,12(sp)
    b82c:	dc400215 	stw	r17,8(sp)
    b830:	1081ffcc 	andi	r2,r2,2047
    b834:	2828d7fa 	srli	r20,r5,31
    b838:	2027883a 	mov	r19,r4
    b83c:	3039883a 	mov	fp,r6
    b840:	2a20703a 	and	r16,r5,r8
    b844:	1000e726 	beq	r2,zero,bbe4 <__muldf3+0x3ec>
    b848:	10c1ffe0 	cmpeqi	r3,r2,2047
    b84c:	1800f91e 	bne	r3,zero,bc34 <__muldf3+0x43c>
    b850:	800a90fa 	slli	r5,r16,3
    b854:	2020d77a 	srli	r16,r4,29
    b858:	202490fa 	slli	r18,r4,3
    b85c:	14ff0044 	addi	r19,r2,-1023
    b860:	8160b03a 	or	r16,r16,r5
    b864:	84002034 	orhi	r16,r16,128
    b868:	002b883a 	mov	r21,zero
    b86c:	002d883a 	mov	r22,zero
    b870:	3804d53a 	srli	r2,r7,20
    b874:	00c00434 	movhi	r3,16
    b878:	18ffffc4 	addi	r3,r3,-1
    b87c:	1081ffcc 	andi	r2,r2,2047
    b880:	382ed7fa 	srli	r23,r7,31
    b884:	38e2703a 	and	r17,r7,r3
    b888:	1000c526 	beq	r2,zero,bba0 <__muldf3+0x3a8>
    b88c:	10c1ffe0 	cmpeqi	r3,r2,2047
    b890:	1800ef1e 	bne	r3,zero,bc50 <__muldf3+0x458>
    b894:	880690fa 	slli	r3,r17,3
    b898:	e022d77a 	srli	r17,fp,29
    b89c:	e00a90fa 	slli	r5,fp,3
    b8a0:	10bf0044 	addi	r2,r2,-1023
    b8a4:	88e2b03a 	or	r17,r17,r3
    b8a8:	8c402034 	orhi	r17,r17,128
    b8ac:	98a7883a 	add	r19,r19,r2
    b8b0:	0007883a 	mov	r3,zero
    b8b4:	a8800428 	cmpgeui	r2,r21,16
    b8b8:	a5ccf03a 	xor	r6,r20,r23
    b8bc:	9a000044 	addi	r8,r19,1
    b8c0:	1000371e 	bne	r2,zero,b9a0 <__muldf3+0x1a8>
    b8c4:	a80490ba 	slli	r2,r21,2
    b8c8:	01000074 	movhi	r4,1
    b8cc:	1109883a 	add	r4,r2,r4
    b8d0:	20ae3617 	ldw	r2,-18216(r4)
    b8d4:	1000683a 	jmp	r2
    b8d8:	0000b9a0 	cmpeqi	zero,zero,742
    b8dc:	0000b91c 	xori	zero,zero,740
    b8e0:	0000b91c 	xori	zero,zero,740
    b8e4:	0000b918 	cmpnei	zero,zero,740
    b8e8:	0000b928 	cmpgeui	zero,zero,740
    b8ec:	0000b928 	cmpgeui	zero,zero,740
    b8f0:	0000bcc4 	movi	zero,755
    b8f4:	0000b918 	cmpnei	zero,zero,740
    b8f8:	0000b928 	cmpgeui	zero,zero,740
    b8fc:	0000bcc4 	movi	zero,755
    b900:	0000b928 	cmpgeui	zero,zero,740
    b904:	0000b918 	cmpnei	zero,zero,740
    b908:	0000bc6c 	andhi	zero,zero,753
    b90c:	0000bc6c 	andhi	zero,zero,753
    b910:	0000bc6c 	andhi	zero,zero,753
    b914:	0000bd50 	cmplti	zero,zero,757
    b918:	b80d883a 	mov	r6,r23
    b91c:	8821883a 	mov	r16,r17
    b920:	2825883a 	mov	r18,r5
    b924:	182d883a 	mov	r22,r3
    b928:	b08000a0 	cmpeqi	r2,r22,2
    b92c:	1000181e 	bne	r2,zero,b990 <__muldf3+0x198>
    b930:	b08000e0 	cmpeqi	r2,r22,3
    b934:	1001481e 	bne	r2,zero,be58 <__muldf3+0x660>
    b938:	b0800060 	cmpeqi	r2,r22,1
    b93c:	10007e26 	beq	r2,zero,bb38 <__muldf3+0x340>
    b940:	0007883a 	mov	r3,zero
    b944:	0021883a 	mov	r16,zero
    b948:	0025883a 	mov	r18,zero
    b94c:	1806953a 	slli	r3,r3,20
    b950:	300c97fa 	slli	r6,r6,31
    b954:	9005883a 	mov	r2,r18
    b958:	1c06b03a 	or	r3,r3,r16
    b95c:	1986b03a 	or	r3,r3,r6
    b960:	dfc00a17 	ldw	ra,40(sp)
    b964:	df000917 	ldw	fp,36(sp)
    b968:	ddc00817 	ldw	r23,32(sp)
    b96c:	dd800717 	ldw	r22,28(sp)
    b970:	dd400617 	ldw	r21,24(sp)
    b974:	dd000517 	ldw	r20,20(sp)
    b978:	dcc00417 	ldw	r19,16(sp)
    b97c:	dc800317 	ldw	r18,12(sp)
    b980:	dc400217 	ldw	r17,8(sp)
    b984:	dc000117 	ldw	r16,4(sp)
    b988:	dec00b04 	addi	sp,sp,44
    b98c:	f800283a 	ret
    b990:	00c1ffc4 	movi	r3,2047
    b994:	0021883a 	mov	r16,zero
    b998:	0025883a 	mov	r18,zero
    b99c:	003feb06 	br	b94c <__muldf3+0x154>
    b9a0:	9004d43a 	srli	r2,r18,16
    b9a4:	281ed43a 	srli	r15,r5,16
    b9a8:	94bfffcc 	andi	r18,r18,65535
    b9ac:	297fffcc 	andi	r5,r5,65535
    b9b0:	2c89383a 	mul	r4,r5,r18
    b9b4:	114f383a 	mul	r7,r2,r5
    b9b8:	7c87383a 	mul	r3,r15,r18
    b9bc:	2012d43a 	srli	r9,r4,16
    b9c0:	13dd383a 	mul	r14,r2,r15
    b9c4:	19c7883a 	add	r3,r3,r7
    b9c8:	48d3883a 	add	r9,r9,r3
    b9cc:	49c0022e 	bgeu	r9,r7,b9d8 <__muldf3+0x1e0>
    b9d0:	00c00074 	movhi	r3,1
    b9d4:	70dd883a 	add	r14,r14,r3
    b9d8:	881ad43a 	srli	r13,r17,16
    b9dc:	8c7fffcc 	andi	r17,r17,65535
    b9e0:	8c87383a 	mul	r3,r17,r18
    b9e4:	144f383a 	mul	r7,r2,r17
    b9e8:	6ca5383a 	mul	r18,r13,r18
    b9ec:	1816d43a 	srli	r11,r3,16
    b9f0:	4814943a 	slli	r10,r9,16
    b9f4:	91e5883a 	add	r18,r18,r7
    b9f8:	213fffcc 	andi	r4,r4,65535
    b9fc:	5c97883a 	add	r11,r11,r18
    ba00:	4818d43a 	srli	r12,r9,16
    ba04:	1345383a 	mul	r2,r2,r13
    ba08:	5115883a 	add	r10,r10,r4
    ba0c:	59c0022e 	bgeu	r11,r7,ba18 <__muldf3+0x220>
    ba10:	01000074 	movhi	r4,1
    ba14:	1105883a 	add	r2,r2,r4
    ba18:	8028d43a 	srli	r20,r16,16
    ba1c:	827fffcc 	andi	r9,r16,65535
    ba20:	2a6b383a 	mul	r21,r5,r9
    ba24:	7a49383a 	mul	r4,r15,r9
    ba28:	a14b383a 	mul	r5,r20,r5
    ba2c:	580e943a 	slli	r7,r11,16
    ba30:	a82cd43a 	srli	r22,r21,16
    ba34:	5824d43a 	srli	r18,r11,16
    ba38:	18ffffcc 	andi	r3,r3,65535
    ba3c:	2149883a 	add	r4,r4,r5
    ba40:	38cf883a 	add	r7,r7,r3
    ba44:	b109883a 	add	r4,r22,r4
    ba48:	7d1f383a 	mul	r15,r15,r20
    ba4c:	9097883a 	add	r11,r18,r2
    ba50:	61c7883a 	add	r3,r12,r7
    ba54:	2140022e 	bgeu	r4,r5,ba60 <__muldf3+0x268>
    ba58:	00800074 	movhi	r2,1
    ba5c:	789f883a 	add	r15,r15,r2
    ba60:	8a65383a 	mul	r18,r17,r9
    ba64:	6a53383a 	mul	r9,r13,r9
    ba68:	a463383a 	mul	r17,r20,r17
    ba6c:	9020d43a 	srli	r16,r18,16
    ba70:	200ad43a 	srli	r5,r4,16
    ba74:	2008943a 	slli	r4,r4,16
    ba78:	4c53883a 	add	r9,r9,r17
    ba7c:	ab3fffcc 	andi	r12,r21,65535
    ba80:	8253883a 	add	r9,r16,r9
    ba84:	6d1b383a 	mul	r13,r13,r20
    ba88:	2bdf883a 	add	r15,r5,r15
    ba8c:	2309883a 	add	r4,r4,r12
    ba90:	4c40022e 	bgeu	r9,r17,ba9c <__muldf3+0x2a4>
    ba94:	00800074 	movhi	r2,1
    ba98:	689b883a 	add	r13,r13,r2
    ba9c:	4804943a 	slli	r2,r9,16
    baa0:	917fffcc 	andi	r5,r18,65535
    baa4:	1b87883a 	add	r3,r3,r14
    baa8:	1145883a 	add	r2,r2,r5
    baac:	19cf803a 	cmpltu	r7,r3,r7
    bab0:	12c5883a 	add	r2,r2,r11
    bab4:	1907883a 	add	r3,r3,r4
    bab8:	11dd883a 	add	r14,r2,r7
    babc:	1909803a 	cmpltu	r4,r3,r4
    bac0:	73cb883a 	add	r5,r14,r15
    bac4:	4812d43a 	srli	r9,r9,16
    bac8:	2919883a 	add	r12,r5,r4
    bacc:	12c5803a 	cmpltu	r2,r2,r11
    bad0:	71e1803a 	cmpltu	r16,r14,r7
    bad4:	1420b03a 	or	r16,r2,r16
    bad8:	2bcb803a 	cmpltu	r5,r5,r15
    badc:	6109803a 	cmpltu	r4,r12,r4
    bae0:	2908b03a 	or	r4,r5,r4
    bae4:	8261883a 	add	r16,r16,r9
    bae8:	1824927a 	slli	r18,r3,9
    baec:	8121883a 	add	r16,r16,r4
    baf0:	8361883a 	add	r16,r16,r13
    baf4:	8020927a 	slli	r16,r16,9
    baf8:	1806d5fa 	srli	r3,r3,23
    bafc:	600ad5fa 	srli	r5,r12,23
    bb00:	6004927a 	slli	r2,r12,9
    bb04:	92a4b03a 	or	r18,r18,r10
    bb08:	9024c03a 	cmpne	r18,r18,zero
    bb0c:	90e4b03a 	or	r18,r18,r3
    bb10:	80c0402c 	andhi	r3,r16,256
    bb14:	90a4b03a 	or	r18,r18,r2
    bb18:	8160b03a 	or	r16,r16,r5
    bb1c:	1800b326 	beq	r3,zero,bdec <__muldf3+0x5f4>
    bb20:	9006d07a 	srli	r3,r18,1
    bb24:	800497fa 	slli	r2,r16,31
    bb28:	9480004c 	andi	r18,r18,1
    bb2c:	8020d07a 	srli	r16,r16,1
    bb30:	1c86b03a 	or	r3,r3,r18
    bb34:	18a4b03a 	or	r18,r3,r2
    bb38:	4100ffc4 	addi	r4,r8,1023
    bb3c:	0100670e 	bge	zero,r4,bcdc <__muldf3+0x4e4>
    bb40:	908001cc 	andi	r2,r18,7
    bb44:	10000726 	beq	r2,zero,bb64 <__muldf3+0x36c>
    bb48:	908003cc 	andi	r2,r18,15
    bb4c:	10800120 	cmpeqi	r2,r2,4
    bb50:	1000041e 	bne	r2,zero,bb64 <__muldf3+0x36c>
    bb54:	90800104 	addi	r2,r18,4
    bb58:	14a5803a 	cmpltu	r18,r2,r18
    bb5c:	84a1883a 	add	r16,r16,r18
    bb60:	1025883a 	mov	r18,r2
    bb64:	8080402c 	andhi	r2,r16,256
    bb68:	10000426 	beq	r2,zero,bb7c <__muldf3+0x384>
    bb6c:	00bfc034 	movhi	r2,65280
    bb70:	10bfffc4 	addi	r2,r2,-1
    bb74:	80a0703a 	and	r16,r16,r2
    bb78:	41010004 	addi	r4,r8,1024
    bb7c:	2081ffc8 	cmpgei	r2,r4,2047
    bb80:	103f831e 	bne	r2,zero,b990 <__muldf3+0x198>
    bb84:	8004977a 	slli	r2,r16,29
    bb88:	9024d0fa 	srli	r18,r18,3
    bb8c:	8020927a 	slli	r16,r16,9
    bb90:	20c1ffcc 	andi	r3,r4,2047
    bb94:	14a4b03a 	or	r18,r2,r18
    bb98:	8020d33a 	srli	r16,r16,12
    bb9c:	003f6b06 	br	b94c <__muldf3+0x154>
    bba0:	8f0ab03a 	or	r5,r17,fp
    bba4:	28004326 	beq	r5,zero,bcb4 <__muldf3+0x4bc>
    bba8:	88008526 	beq	r17,zero,bdc0 <__muldf3+0x5c8>
    bbac:	8809883a 	mov	r4,r17
    bbb0:	000cc000 	call	cc00 <__clzsi2>
    bbb4:	11bffd44 	addi	r6,r2,-11
    bbb8:	01000744 	movi	r4,29
    bbbc:	117ffe04 	addi	r5,r2,-8
    bbc0:	2189c83a 	sub	r4,r4,r6
    bbc4:	8962983a 	sll	r17,r17,r5
    bbc8:	e108d83a 	srl	r4,fp,r4
    bbcc:	e14a983a 	sll	r5,fp,r5
    bbd0:	2462b03a 	or	r17,r4,r17
    bbd4:	9885c83a 	sub	r2,r19,r2
    bbd8:	14ff0344 	addi	r19,r2,-1011
    bbdc:	0007883a 	mov	r3,zero
    bbe0:	003f3406 	br	b8b4 <__muldf3+0xbc>
    bbe4:	8124b03a 	or	r18,r16,r4
    bbe8:	90002d26 	beq	r18,zero,bca0 <__muldf3+0x4a8>
    bbec:	d9c00015 	stw	r7,0(sp)
    bbf0:	80006826 	beq	r16,zero,bd94 <__muldf3+0x59c>
    bbf4:	8009883a 	mov	r4,r16
    bbf8:	000cc000 	call	cc00 <__clzsi2>
    bbfc:	d9c00017 	ldw	r7,0(sp)
    bc00:	113ffd44 	addi	r4,r2,-11
    bc04:	00c00744 	movi	r3,29
    bc08:	14bffe04 	addi	r18,r2,-8
    bc0c:	1907c83a 	sub	r3,r3,r4
    bc10:	84a0983a 	sll	r16,r16,r18
    bc14:	98c6d83a 	srl	r3,r19,r3
    bc18:	9ca4983a 	sll	r18,r19,r18
    bc1c:	1c20b03a 	or	r16,r3,r16
    bc20:	04ff0344 	movi	r19,-1011
    bc24:	98a7c83a 	sub	r19,r19,r2
    bc28:	002b883a 	mov	r21,zero
    bc2c:	002d883a 	mov	r22,zero
    bc30:	003f0f06 	br	b870 <__muldf3+0x78>
    bc34:	8124b03a 	or	r18,r16,r4
    bc38:	9000141e 	bne	r18,zero,bc8c <__muldf3+0x494>
    bc3c:	0021883a 	mov	r16,zero
    bc40:	05400204 	movi	r21,8
    bc44:	04c1ffc4 	movi	r19,2047
    bc48:	05800084 	movi	r22,2
    bc4c:	003f0806 	br	b870 <__muldf3+0x78>
    bc50:	8f0ab03a 	or	r5,r17,fp
    bc54:	9cc1ffc4 	addi	r19,r19,2047
    bc58:	2800081e 	bne	r5,zero,bc7c <__muldf3+0x484>
    bc5c:	ad400094 	ori	r21,r21,2
    bc60:	0023883a 	mov	r17,zero
    bc64:	00c00084 	movi	r3,2
    bc68:	003f1206 	br	b8b4 <__muldf3+0xbc>
    bc6c:	b08000a0 	cmpeqi	r2,r22,2
    bc70:	a00d883a 	mov	r6,r20
    bc74:	103f2e26 	beq	r2,zero,b930 <__muldf3+0x138>
    bc78:	003f4506 	br	b990 <__muldf3+0x198>
    bc7c:	ad4000d4 	ori	r21,r21,3
    bc80:	e00b883a 	mov	r5,fp
    bc84:	00c000c4 	movi	r3,3
    bc88:	003f0a06 	br	b8b4 <__muldf3+0xbc>
    bc8c:	2025883a 	mov	r18,r4
    bc90:	05400304 	movi	r21,12
    bc94:	04c1ffc4 	movi	r19,2047
    bc98:	058000c4 	movi	r22,3
    bc9c:	003ef406 	br	b870 <__muldf3+0x78>
    bca0:	0021883a 	mov	r16,zero
    bca4:	05400104 	movi	r21,4
    bca8:	0027883a 	mov	r19,zero
    bcac:	05800044 	movi	r22,1
    bcb0:	003eef06 	br	b870 <__muldf3+0x78>
    bcb4:	ad400054 	ori	r21,r21,1
    bcb8:	0023883a 	mov	r17,zero
    bcbc:	00c00044 	movi	r3,1
    bcc0:	003efc06 	br	b8b4 <__muldf3+0xbc>
    bcc4:	04000434 	movhi	r16,16
    bcc8:	000d883a 	mov	r6,zero
    bccc:	843fffc4 	addi	r16,r16,-1
    bcd0:	04bfffc4 	movi	r18,-1
    bcd4:	00c1ffc4 	movi	r3,2047
    bcd8:	003f1c06 	br	b94c <__muldf3+0x154>
    bcdc:	00800044 	movi	r2,1
    bce0:	1105c83a 	sub	r2,r2,r4
    bce4:	10c00e48 	cmpgei	r3,r2,57
    bce8:	183f151e 	bne	r3,zero,b940 <__muldf3+0x148>
    bcec:	10c00808 	cmpgei	r3,r2,32
    bcf0:	1800401e 	bne	r3,zero,bdf4 <__muldf3+0x5fc>
    bcf4:	42010784 	addi	r8,r8,1054
    bcf8:	8206983a 	sll	r3,r16,r8
    bcfc:	9088d83a 	srl	r4,r18,r2
    bd00:	9210983a 	sll	r8,r18,r8
    bd04:	80a0d83a 	srl	r16,r16,r2
    bd08:	1904b03a 	or	r2,r3,r4
    bd0c:	4024c03a 	cmpne	r18,r8,zero
    bd10:	1484b03a 	or	r2,r2,r18
    bd14:	10c001cc 	andi	r3,r2,7
    bd18:	18000726 	beq	r3,zero,bd38 <__muldf3+0x540>
    bd1c:	10c003cc 	andi	r3,r2,15
    bd20:	18c00120 	cmpeqi	r3,r3,4
    bd24:	1800041e 	bne	r3,zero,bd38 <__muldf3+0x540>
    bd28:	10c00104 	addi	r3,r2,4
    bd2c:	1885803a 	cmpltu	r2,r3,r2
    bd30:	80a1883a 	add	r16,r16,r2
    bd34:	1805883a 	mov	r2,r3
    bd38:	80c0202c 	andhi	r3,r16,128
    bd3c:	18004226 	beq	r3,zero,be48 <__muldf3+0x650>
    bd40:	00c00044 	movi	r3,1
    bd44:	0021883a 	mov	r16,zero
    bd48:	0025883a 	mov	r18,zero
    bd4c:	003eff06 	br	b94c <__muldf3+0x154>
    bd50:	8080022c 	andhi	r2,r16,8
    bd54:	10000926 	beq	r2,zero,bd7c <__muldf3+0x584>
    bd58:	8880022c 	andhi	r2,r17,8
    bd5c:	1000071e 	bne	r2,zero,bd7c <__muldf3+0x584>
    bd60:	00800434 	movhi	r2,16
    bd64:	8c000234 	orhi	r16,r17,8
    bd68:	10bfffc4 	addi	r2,r2,-1
    bd6c:	80a0703a 	and	r16,r16,r2
    bd70:	b80d883a 	mov	r6,r23
    bd74:	2825883a 	mov	r18,r5
    bd78:	003fd606 	br	bcd4 <__muldf3+0x4dc>
    bd7c:	00800434 	movhi	r2,16
    bd80:	84000234 	orhi	r16,r16,8
    bd84:	10bfffc4 	addi	r2,r2,-1
    bd88:	80a0703a 	and	r16,r16,r2
    bd8c:	a00d883a 	mov	r6,r20
    bd90:	003fd006 	br	bcd4 <__muldf3+0x4dc>
    bd94:	000cc000 	call	cc00 <__clzsi2>
    bd98:	11000544 	addi	r4,r2,21
    bd9c:	21400748 	cmpgei	r5,r4,29
    bda0:	1007883a 	mov	r3,r2
    bda4:	d9c00017 	ldw	r7,0(sp)
    bda8:	10800804 	addi	r2,r2,32
    bdac:	283f9526 	beq	r5,zero,bc04 <__muldf3+0x40c>
    bdb0:	18fffe04 	addi	r3,r3,-8
    bdb4:	98e0983a 	sll	r16,r19,r3
    bdb8:	0025883a 	mov	r18,zero
    bdbc:	003f9806 	br	bc20 <__muldf3+0x428>
    bdc0:	e009883a 	mov	r4,fp
    bdc4:	000cc000 	call	cc00 <__clzsi2>
    bdc8:	11800544 	addi	r6,r2,21
    bdcc:	31000748 	cmpgei	r4,r6,29
    bdd0:	1007883a 	mov	r3,r2
    bdd4:	10800804 	addi	r2,r2,32
    bdd8:	203f7726 	beq	r4,zero,bbb8 <__muldf3+0x3c0>
    bddc:	1c7ffe04 	addi	r17,r3,-8
    bde0:	e462983a 	sll	r17,fp,r17
    bde4:	000b883a 	mov	r5,zero
    bde8:	003f7a06 	br	bbd4 <__muldf3+0x3dc>
    bdec:	9811883a 	mov	r8,r19
    bdf0:	003f5106 	br	bb38 <__muldf3+0x340>
    bdf4:	00fff844 	movi	r3,-31
    bdf8:	1907c83a 	sub	r3,r3,r4
    bdfc:	10800820 	cmpeqi	r2,r2,32
    be00:	80c6d83a 	srl	r3,r16,r3
    be04:	1000031e 	bne	r2,zero,be14 <__muldf3+0x61c>
    be08:	42010f84 	addi	r8,r8,1086
    be0c:	8220983a 	sll	r16,r16,r8
    be10:	9424b03a 	or	r18,r18,r16
    be14:	9024c03a 	cmpne	r18,r18,zero
    be18:	90c4b03a 	or	r2,r18,r3
    be1c:	148001cc 	andi	r18,r2,7
    be20:	9000051e 	bne	r18,zero,be38 <__muldf3+0x640>
    be24:	0021883a 	mov	r16,zero
    be28:	1004d0fa 	srli	r2,r2,3
    be2c:	0007883a 	mov	r3,zero
    be30:	14a4b03a 	or	r18,r2,r18
    be34:	003ec506 	br	b94c <__muldf3+0x154>
    be38:	10c003cc 	andi	r3,r2,15
    be3c:	18c00118 	cmpnei	r3,r3,4
    be40:	0021883a 	mov	r16,zero
    be44:	183fb81e 	bne	r3,zero,bd28 <__muldf3+0x530>
    be48:	8006927a 	slli	r3,r16,9
    be4c:	8024977a 	slli	r18,r16,29
    be50:	1820d33a 	srli	r16,r3,12
    be54:	003ff406 	br	be28 <__muldf3+0x630>
    be58:	00800434 	movhi	r2,16
    be5c:	84000234 	orhi	r16,r16,8
    be60:	10bfffc4 	addi	r2,r2,-1
    be64:	80a0703a 	and	r16,r16,r2
    be68:	003f9a06 	br	bcd4 <__muldf3+0x4dc>

0000be6c <__subdf3>:
    be6c:	00800434 	movhi	r2,16
    be70:	defffb04 	addi	sp,sp,-20
    be74:	3812d53a 	srli	r9,r7,20
    be78:	10bfffc4 	addi	r2,r2,-1
    be7c:	2886703a 	and	r3,r5,r2
    be80:	dc000015 	stw	r16,0(sp)
    be84:	3884703a 	and	r2,r7,r2
    be88:	2820d53a 	srli	r16,r5,20
    be8c:	3014d77a 	srli	r10,r6,29
    be90:	280ad7fa 	srli	r5,r5,31
    be94:	180690fa 	slli	r3,r3,3
    be98:	2016d77a 	srli	r11,r4,29
    be9c:	100490fa 	slli	r2,r2,3
    bea0:	4a41ffcc 	andi	r9,r9,2047
    bea4:	dc800215 	stw	r18,8(sp)
    bea8:	8401ffcc 	andi	r16,r16,2047
    beac:	dfc00415 	stw	ra,16(sp)
    beb0:	dcc00315 	stw	r19,12(sp)
    beb4:	dc400115 	stw	r17,4(sp)
    beb8:	4b01ffd8 	cmpnei	r12,r9,2047
    bebc:	3810d7fa 	srli	r8,r7,31
    bec0:	2825883a 	mov	r18,r5
    bec4:	5084b03a 	or	r2,r10,r2
    bec8:	201c90fa 	slli	r14,r4,3
    becc:	301a90fa 	slli	r13,r6,3
    bed0:	29403fcc 	andi	r5,r5,255
    bed4:	58ceb03a 	or	r7,r11,r3
    bed8:	8255c83a 	sub	r10,r16,r9
    bedc:	60006826 	beq	r12,zero,c080 <__subdf3+0x214>
    bee0:	42c0005c 	xori	r11,r8,1
    bee4:	2ac07326 	beq	r5,r11,c0b4 <__subdf3+0x248>
    bee8:	0280590e 	bge	zero,r10,c050 <__subdf3+0x1e4>
    beec:	4800691e 	bne	r9,zero,c094 <__subdf3+0x228>
    bef0:	1346b03a 	or	r3,r2,r13
    bef4:	1800e826 	beq	r3,zero,c298 <__subdf3+0x42c>
    bef8:	50ffffc4 	addi	r3,r10,-1
    befc:	18018126 	beq	r3,zero,c504 <__subdf3+0x698>
    bf00:	5281ffd8 	cmpnei	r10,r10,2047
    bf04:	5000eb26 	beq	r10,zero,c2b4 <__subdf3+0x448>
    bf08:	1815883a 	mov	r10,r3
    bf0c:	50c00e48 	cmpgei	r3,r10,57
    bf10:	1800651e 	bne	r3,zero,c0a8 <__subdf3+0x23c>
    bf14:	50c00808 	cmpgei	r3,r10,32
    bf18:	18012a1e 	bne	r3,zero,c3c4 <__subdf3+0x558>
    bf1c:	00c00804 	movi	r3,32
    bf20:	1a87c83a 	sub	r3,r3,r10
    bf24:	10e2983a 	sll	r17,r2,r3
    bf28:	6a88d83a 	srl	r4,r13,r10
    bf2c:	68da983a 	sll	r13,r13,r3
    bf30:	1284d83a 	srl	r2,r2,r10
    bf34:	8922b03a 	or	r17,r17,r4
    bf38:	681ac03a 	cmpne	r13,r13,zero
    bf3c:	8b62b03a 	or	r17,r17,r13
    bf40:	388fc83a 	sub	r7,r7,r2
    bf44:	7463c83a 	sub	r17,r14,r17
    bf48:	7445803a 	cmpltu	r2,r14,r17
    bf4c:	3889c83a 	sub	r4,r7,r2
    bf50:	2080202c 	andhi	r2,r4,128
    bf54:	10008e26 	beq	r2,zero,c190 <__subdf3+0x324>
    bf58:	04c02034 	movhi	r19,128
    bf5c:	9cffffc4 	addi	r19,r19,-1
    bf60:	24e6703a 	and	r19,r4,r19
    bf64:	9800a626 	beq	r19,zero,c200 <__subdf3+0x394>
    bf68:	9809883a 	mov	r4,r19
    bf6c:	000cc000 	call	cc00 <__clzsi2>
    bf70:	117ffe04 	addi	r5,r2,-8
    bf74:	01000804 	movi	r4,32
    bf78:	2149c83a 	sub	r4,r4,r5
    bf7c:	8908d83a 	srl	r4,r17,r4
    bf80:	9944983a 	sll	r2,r19,r5
    bf84:	8962983a 	sll	r17,r17,r5
    bf88:	2084b03a 	or	r2,r4,r2
    bf8c:	2c00a516 	blt	r5,r16,c224 <__subdf3+0x3b8>
    bf90:	2c0bc83a 	sub	r5,r5,r16
    bf94:	29000044 	addi	r4,r5,1
    bf98:	20c00808 	cmpgei	r3,r4,32
    bf9c:	1800701e 	bne	r3,zero,c160 <__subdf3+0x2f4>
    bfa0:	00c00804 	movi	r3,32
    bfa4:	1907c83a 	sub	r3,r3,r4
    bfa8:	890ad83a 	srl	r5,r17,r4
    bfac:	88e2983a 	sll	r17,r17,r3
    bfb0:	10c6983a 	sll	r3,r2,r3
    bfb4:	1108d83a 	srl	r4,r2,r4
    bfb8:	8822c03a 	cmpne	r17,r17,zero
    bfbc:	1946b03a 	or	r3,r3,r5
    bfc0:	1c62b03a 	or	r17,r3,r17
    bfc4:	0021883a 	mov	r16,zero
    bfc8:	888001cc 	andi	r2,r17,7
    bfcc:	10000726 	beq	r2,zero,bfec <__subdf3+0x180>
    bfd0:	888003cc 	andi	r2,r17,15
    bfd4:	10800120 	cmpeqi	r2,r2,4
    bfd8:	1000041e 	bne	r2,zero,bfec <__subdf3+0x180>
    bfdc:	88800104 	addi	r2,r17,4
    bfe0:	1463803a 	cmpltu	r17,r2,r17
    bfe4:	2449883a 	add	r4,r4,r17
    bfe8:	1023883a 	mov	r17,r2
    bfec:	2080202c 	andhi	r2,r4,128
    bff0:	10006926 	beq	r2,zero,c198 <__subdf3+0x32c>
    bff4:	84000044 	addi	r16,r16,1
    bff8:	8081ffe0 	cmpeqi	r2,r16,2047
    bffc:	8401ffcc 	andi	r16,r16,2047
    c000:	10007b1e 	bne	r2,zero,c1f0 <__subdf3+0x384>
    c004:	00bfe034 	movhi	r2,65408
    c008:	10bfffc4 	addi	r2,r2,-1
    c00c:	2084703a 	and	r2,r4,r2
    c010:	1006927a 	slli	r3,r2,9
    c014:	8822d0fa 	srli	r17,r17,3
    c018:	1008977a 	slli	r4,r2,29
    c01c:	1806d33a 	srli	r3,r3,12
    c020:	2444b03a 	or	r2,r4,r17
    c024:	8020953a 	slli	r16,r16,20
    c028:	902497fa 	slli	r18,r18,31
    c02c:	80c6b03a 	or	r3,r16,r3
    c030:	1c86b03a 	or	r3,r3,r18
    c034:	dfc00417 	ldw	ra,16(sp)
    c038:	dcc00317 	ldw	r19,12(sp)
    c03c:	dc800217 	ldw	r18,8(sp)
    c040:	dc400117 	ldw	r17,4(sp)
    c044:	dc000017 	ldw	r16,0(sp)
    c048:	dec00504 	addi	sp,sp,20
    c04c:	f800283a 	ret
    c050:	50002c26 	beq	r10,zero,c104 <__subdf3+0x298>
    c054:	4c15c83a 	sub	r10,r9,r16
    c058:	5825883a 	mov	r18,r11
    c05c:	8000b21e 	bne	r16,zero,c328 <__subdf3+0x4bc>
    c060:	3b86b03a 	or	r3,r7,r14
    c064:	18010826 	beq	r3,zero,c488 <__subdf3+0x61c>
    c068:	50ffffc4 	addi	r3,r10,-1
    c06c:	18015a26 	beq	r3,zero,c5d8 <__subdf3+0x76c>
    c070:	5401ffd8 	cmpnei	r16,r10,2047
    c074:	80012926 	beq	r16,zero,c51c <__subdf3+0x6b0>
    c078:	1815883a 	mov	r10,r3
    c07c:	0000ac06 	br	c330 <__subdf3+0x4c4>
    c080:	1346b03a 	or	r3,r2,r13
    c084:	183f9626 	beq	r3,zero,bee0 <__subdf3+0x74>
    c088:	42c03fcc 	andi	r11,r8,255
    c08c:	2a006a26 	beq	r5,r8,c238 <__subdf3+0x3cc>
    c090:	02bfef0e 	bge	zero,r10,c050 <__subdf3+0x1e4>
    c094:	80c1ffd8 	cmpnei	r3,r16,2047
    c098:	18008626 	beq	r3,zero,c2b4 <__subdf3+0x448>
    c09c:	50c00e48 	cmpgei	r3,r10,57
    c0a0:	10802034 	orhi	r2,r2,128
    c0a4:	183f9b26 	beq	r3,zero,bf14 <__subdf3+0xa8>
    c0a8:	1344b03a 	or	r2,r2,r13
    c0ac:	1022c03a 	cmpne	r17,r2,zero
    c0b0:	003fa406 	br	bf44 <__subdf3+0xd8>
    c0b4:	0280600e 	bge	zero,r10,c238 <__subdf3+0x3cc>
    c0b8:	48002126 	beq	r9,zero,c140 <__subdf3+0x2d4>
    c0bc:	80c1ffd8 	cmpnei	r3,r16,2047
    c0c0:	18011d26 	beq	r3,zero,c538 <__subdf3+0x6cc>
    c0c4:	10802034 	orhi	r2,r2,128
    c0c8:	50c00e48 	cmpgei	r3,r10,57
    c0cc:	18003e1e 	bne	r3,zero,c1c8 <__subdf3+0x35c>
    c0d0:	50c00808 	cmpgei	r3,r10,32
    c0d4:	1800d526 	beq	r3,zero,c42c <__subdf3+0x5c0>
    c0d8:	547ff804 	addi	r17,r10,-32
    c0dc:	51000820 	cmpeqi	r4,r10,32
    c0e0:	1446d83a 	srl	r3,r2,r17
    c0e4:	2000041e 	bne	r4,zero,c0f8 <__subdf3+0x28c>
    c0e8:	01001004 	movi	r4,64
    c0ec:	2295c83a 	sub	r10,r4,r10
    c0f0:	1284983a 	sll	r2,r2,r10
    c0f4:	689ab03a 	or	r13,r13,r2
    c0f8:	6822c03a 	cmpne	r17,r13,zero
    c0fc:	88e2b03a 	or	r17,r17,r3
    c100:	00003306 	br	c1d0 <__subdf3+0x364>
    c104:	80c00044 	addi	r3,r16,1
    c108:	18c1ff8c 	andi	r3,r3,2046
    c10c:	1800971e 	bne	r3,zero,c36c <__subdf3+0x500>
    c110:	1350b03a 	or	r8,r2,r13
    c114:	3b86b03a 	or	r3,r7,r14
    c118:	8000e21e 	bne	r16,zero,c4a4 <__subdf3+0x638>
    c11c:	18012526 	beq	r3,zero,c5b4 <__subdf3+0x748>
    c120:	4001411e 	bne	r8,zero,c628 <__subdf3+0x7bc>
    c124:	3806977a 	slli	r3,r7,29
    c128:	00880034 	movhi	r2,8192
    c12c:	10bfffc4 	addi	r2,r2,-1
    c130:	208a703a 	and	r5,r4,r2
    c134:	3810d0fa 	srli	r8,r7,3
    c138:	28c4b03a 	or	r2,r5,r3
    c13c:	00001d06 	br	c1b4 <__subdf3+0x348>
    c140:	1346b03a 	or	r3,r2,r13
    c144:	18005426 	beq	r3,zero,c298 <__subdf3+0x42c>
    c148:	50ffffc4 	addi	r3,r10,-1
    c14c:	1800e526 	beq	r3,zero,c4e4 <__subdf3+0x678>
    c150:	5281ffd8 	cmpnei	r10,r10,2047
    c154:	50012d26 	beq	r10,zero,c60c <__subdf3+0x7a0>
    c158:	1815883a 	mov	r10,r3
    c15c:	003fda06 	br	c0c8 <__subdf3+0x25c>
    c160:	297ff844 	addi	r5,r5,-31
    c164:	20c00820 	cmpeqi	r3,r4,32
    c168:	114ad83a 	srl	r5,r2,r5
    c16c:	1800041e 	bne	r3,zero,c180 <__subdf3+0x314>
    c170:	00c01004 	movi	r3,64
    c174:	1909c83a 	sub	r4,r3,r4
    c178:	1104983a 	sll	r2,r2,r4
    c17c:	88a2b03a 	or	r17,r17,r2
    c180:	8822c03a 	cmpne	r17,r17,zero
    c184:	8962b03a 	or	r17,r17,r5
    c188:	0009883a 	mov	r4,zero
    c18c:	0021883a 	mov	r16,zero
    c190:	888001cc 	andi	r2,r17,7
    c194:	103f8e1e 	bne	r2,zero,bfd0 <__subdf3+0x164>
    c198:	8822d0fa 	srli	r17,r17,3
    c19c:	2004977a 	slli	r2,r4,29
    c1a0:	2010d0fa 	srli	r8,r4,3
    c1a4:	8015883a 	mov	r10,r16
    c1a8:	8884b03a 	or	r2,r17,r2
    c1ac:	50c1ffe0 	cmpeqi	r3,r10,2047
    c1b0:	18016f1e 	bne	r3,zero,c770 <__subdf3+0x904>
    c1b4:	00c00434 	movhi	r3,16
    c1b8:	18ffffc4 	addi	r3,r3,-1
    c1bc:	40c6703a 	and	r3,r8,r3
    c1c0:	5401ffcc 	andi	r16,r10,2047
    c1c4:	003f9706 	br	c024 <__subdf3+0x1b8>
    c1c8:	1344b03a 	or	r2,r2,r13
    c1cc:	1022c03a 	cmpne	r17,r2,zero
    c1d0:	8ba3883a 	add	r17,r17,r14
    c1d4:	8b85803a 	cmpltu	r2,r17,r14
    c1d8:	11c9883a 	add	r4,r2,r7
    c1dc:	2080202c 	andhi	r2,r4,128
    c1e0:	103feb26 	beq	r2,zero,c190 <__subdf3+0x324>
    c1e4:	84000044 	addi	r16,r16,1
    c1e8:	8081ffe0 	cmpeqi	r2,r16,2047
    c1ec:	10006b26 	beq	r2,zero,c39c <__subdf3+0x530>
    c1f0:	0401ffc4 	movi	r16,2047
    c1f4:	0007883a 	mov	r3,zero
    c1f8:	0005883a 	mov	r2,zero
    c1fc:	003f8906 	br	c024 <__subdf3+0x1b8>
    c200:	8809883a 	mov	r4,r17
    c204:	000cc000 	call	cc00 <__clzsi2>
    c208:	11400604 	addi	r5,r2,24
    c20c:	28c00808 	cmpgei	r3,r5,32
    c210:	183f5826 	beq	r3,zero,bf74 <__subdf3+0x108>
    c214:	10bffe04 	addi	r2,r2,-8
    c218:	8884983a 	sll	r2,r17,r2
    c21c:	0023883a 	mov	r17,zero
    c220:	2c3f5b0e 	bge	r5,r16,bf90 <__subdf3+0x124>
    c224:	013fe034 	movhi	r4,65408
    c228:	213fffc4 	addi	r4,r4,-1
    c22c:	8161c83a 	sub	r16,r16,r5
    c230:	1108703a 	and	r4,r2,r4
    c234:	003f6406 	br	bfc8 <__subdf3+0x15c>
    c238:	50002c26 	beq	r10,zero,c2ec <__subdf3+0x480>
    c23c:	4c15c83a 	sub	r10,r9,r16
    c240:	80007226 	beq	r16,zero,c40c <__subdf3+0x5a0>
    c244:	6000ea26 	beq	r12,zero,c5f0 <__subdf3+0x784>
    c248:	39c02034 	orhi	r7,r7,128
    c24c:	50c00e48 	cmpgei	r3,r10,57
    c250:	1800c01e 	bne	r3,zero,c554 <__subdf3+0x6e8>
    c254:	50c00808 	cmpgei	r3,r10,32
    c258:	1801261e 	bne	r3,zero,c6f4 <__subdf3+0x888>
    c25c:	00c00804 	movi	r3,32
    c260:	1a87c83a 	sub	r3,r3,r10
    c264:	38e2983a 	sll	r17,r7,r3
    c268:	7288d83a 	srl	r4,r14,r10
    c26c:	70c6983a 	sll	r3,r14,r3
    c270:	3a8ed83a 	srl	r7,r7,r10
    c274:	8922b03a 	or	r17,r17,r4
    c278:	1806c03a 	cmpne	r3,r3,zero
    c27c:	88e2b03a 	or	r17,r17,r3
    c280:	11c5883a 	add	r2,r2,r7
    c284:	8b63883a 	add	r17,r17,r13
    c288:	8b49803a 	cmpltu	r4,r17,r13
    c28c:	2089883a 	add	r4,r4,r2
    c290:	4821883a 	mov	r16,r9
    c294:	003fd106 	br	c1dc <__subdf3+0x370>
    c298:	380c977a 	slli	r6,r7,29
    c29c:	00880034 	movhi	r2,8192
    c2a0:	10bfffc4 	addi	r2,r2,-1
    c2a4:	2088703a 	and	r4,r4,r2
    c2a8:	3810d0fa 	srli	r8,r7,3
    c2ac:	2184b03a 	or	r2,r4,r6
    c2b0:	003fbe06 	br	c1ac <__subdf3+0x340>
    c2b4:	380c977a 	slli	r6,r7,29
    c2b8:	00880034 	movhi	r2,8192
    c2bc:	10bfffc4 	addi	r2,r2,-1
    c2c0:	380ed0fa 	srli	r7,r7,3
    c2c4:	2084703a 	and	r2,r4,r2
    c2c8:	1184b03a 	or	r2,r2,r6
    c2cc:	3886b03a 	or	r3,r7,r2
    c2d0:	18012326 	beq	r3,zero,c760 <__subdf3+0x8f4>
    c2d4:	01000434 	movhi	r4,16
    c2d8:	38c00234 	orhi	r3,r7,8
    c2dc:	213fffc4 	addi	r4,r4,-1
    c2e0:	1906703a 	and	r3,r3,r4
    c2e4:	0401ffc4 	movi	r16,2047
    c2e8:	003f4e06 	br	c024 <__subdf3+0x1b8>
    c2ec:	80c00044 	addi	r3,r16,1
    c2f0:	1941ff8c 	andi	r5,r3,2046
    c2f4:	2800581e 	bne	r5,zero,c458 <__subdf3+0x5ec>
    c2f8:	3b86b03a 	or	r3,r7,r14
    c2fc:	8000a31e 	bne	r16,zero,c58c <__subdf3+0x720>
    c300:	1800ea26 	beq	r3,zero,c6ac <__subdf3+0x840>
    c304:	1346b03a 	or	r3,r2,r13
    c308:	1800ef1e 	bne	r3,zero,c6c8 <__subdf3+0x85c>
    c30c:	380a977a 	slli	r5,r7,29
    c310:	00880034 	movhi	r2,8192
    c314:	10bfffc4 	addi	r2,r2,-1
    c318:	2084703a 	and	r2,r4,r2
    c31c:	3810d0fa 	srli	r8,r7,3
    c320:	2884b03a 	or	r2,r5,r2
    c324:	003fa306 	br	c1b4 <__subdf3+0x348>
    c328:	60007c26 	beq	r12,zero,c51c <__subdf3+0x6b0>
    c32c:	39c02034 	orhi	r7,r7,128
    c330:	50c00e48 	cmpgei	r3,r10,57
    c334:	18002e1e 	bne	r3,zero,c3f0 <__subdf3+0x584>
    c338:	50c00808 	cmpgei	r3,r10,32
    c33c:	1800881e 	bne	r3,zero,c560 <__subdf3+0x6f4>
    c340:	00c00804 	movi	r3,32
    c344:	1a87c83a 	sub	r3,r3,r10
    c348:	7288d83a 	srl	r4,r14,r10
    c34c:	38e2983a 	sll	r17,r7,r3
    c350:	70dc983a 	sll	r14,r14,r3
    c354:	3aa0d83a 	srl	r16,r7,r10
    c358:	8922b03a 	or	r17,r17,r4
    c35c:	701cc03a 	cmpne	r14,r14,zero
    c360:	8ba2b03a 	or	r17,r17,r14
    c364:	1405c83a 	sub	r2,r2,r16
    c368:	00002306 	br	c3f8 <__subdf3+0x58c>
    c36c:	7363c83a 	sub	r17,r14,r13
    c370:	3889c83a 	sub	r4,r7,r2
    c374:	7467803a 	cmpltu	r19,r14,r17
    c378:	24e7c83a 	sub	r19,r4,r19
    c37c:	98c0202c 	andhi	r3,r19,128
    c380:	1800521e 	bne	r3,zero,c4cc <__subdf3+0x660>
    c384:	8cc4b03a 	or	r2,r17,r19
    c388:	103ef61e 	bne	r2,zero,bf64 <__subdf3+0xf8>
    c38c:	0011883a 	mov	r8,zero
    c390:	0025883a 	mov	r18,zero
    c394:	003f8706 	br	c1b4 <__subdf3+0x348>
    c398:	04000084 	movi	r16,2
    c39c:	00bfe034 	movhi	r2,65408
    c3a0:	10bfffc4 	addi	r2,r2,-1
    c3a4:	8806d07a 	srli	r3,r17,1
    c3a8:	2084703a 	and	r2,r4,r2
    c3ac:	100a97fa 	slli	r5,r2,31
    c3b0:	8c40004c 	andi	r17,r17,1
    c3b4:	1c62b03a 	or	r17,r3,r17
    c3b8:	1008d07a 	srli	r4,r2,1
    c3bc:	2c62b03a 	or	r17,r5,r17
    c3c0:	003f0106 	br	bfc8 <__subdf3+0x15c>
    c3c4:	547ff804 	addi	r17,r10,-32
    c3c8:	51000820 	cmpeqi	r4,r10,32
    c3cc:	1446d83a 	srl	r3,r2,r17
    c3d0:	2000041e 	bne	r4,zero,c3e4 <__subdf3+0x578>
    c3d4:	01001004 	movi	r4,64
    c3d8:	2295c83a 	sub	r10,r4,r10
    c3dc:	1284983a 	sll	r2,r2,r10
    c3e0:	689ab03a 	or	r13,r13,r2
    c3e4:	6822c03a 	cmpne	r17,r13,zero
    c3e8:	88e2b03a 	or	r17,r17,r3
    c3ec:	003ed506 	br	bf44 <__subdf3+0xd8>
    c3f0:	3ba2b03a 	or	r17,r7,r14
    c3f4:	8822c03a 	cmpne	r17,r17,zero
    c3f8:	6c63c83a 	sub	r17,r13,r17
    c3fc:	6c49803a 	cmpltu	r4,r13,r17
    c400:	1109c83a 	sub	r4,r2,r4
    c404:	4821883a 	mov	r16,r9
    c408:	003ed106 	br	bf50 <__subdf3+0xe4>
    c40c:	3b86b03a 	or	r3,r7,r14
    c410:	18001d26 	beq	r3,zero,c488 <__subdf3+0x61c>
    c414:	50ffffc4 	addi	r3,r10,-1
    c418:	1800c126 	beq	r3,zero,c720 <__subdf3+0x8b4>
    c41c:	5281ffd8 	cmpnei	r10,r10,2047
    c420:	50003e26 	beq	r10,zero,c51c <__subdf3+0x6b0>
    c424:	1815883a 	mov	r10,r3
    c428:	003f8806 	br	c24c <__subdf3+0x3e0>
    c42c:	00c00804 	movi	r3,32
    c430:	1a87c83a 	sub	r3,r3,r10
    c434:	10e2983a 	sll	r17,r2,r3
    c438:	6a88d83a 	srl	r4,r13,r10
    c43c:	68da983a 	sll	r13,r13,r3
    c440:	1284d83a 	srl	r2,r2,r10
    c444:	8922b03a 	or	r17,r17,r4
    c448:	681ac03a 	cmpne	r13,r13,zero
    c44c:	8b62b03a 	or	r17,r17,r13
    c450:	388f883a 	add	r7,r7,r2
    c454:	003f5e06 	br	c1d0 <__subdf3+0x364>
    c458:	1901ffe0 	cmpeqi	r4,r3,2047
    c45c:	203f641e 	bne	r4,zero,c1f0 <__subdf3+0x384>
    c460:	735b883a 	add	r13,r14,r13
    c464:	6b89803a 	cmpltu	r4,r13,r14
    c468:	3885883a 	add	r2,r7,r2
    c46c:	1105883a 	add	r2,r2,r4
    c470:	102297fa 	slli	r17,r2,31
    c474:	681ad07a 	srli	r13,r13,1
    c478:	1008d07a 	srli	r4,r2,1
    c47c:	1821883a 	mov	r16,r3
    c480:	8b62b03a 	or	r17,r17,r13
    c484:	003f4206 	br	c190 <__subdf3+0x324>
    c488:	1008977a 	slli	r4,r2,29
    c48c:	00c80034 	movhi	r3,8192
    c490:	18ffffc4 	addi	r3,r3,-1
    c494:	30cc703a 	and	r6,r6,r3
    c498:	1010d0fa 	srli	r8,r2,3
    c49c:	3104b03a 	or	r2,r6,r4
    c4a0:	003f4206 	br	c1ac <__subdf3+0x340>
    c4a4:	18006c1e 	bne	r3,zero,c658 <__subdf3+0x7ec>
    c4a8:	4000a826 	beq	r8,zero,c74c <__subdf3+0x8e0>
    c4ac:	1008977a 	slli	r4,r2,29
    c4b0:	00c80034 	movhi	r3,8192
    c4b4:	18ffffc4 	addi	r3,r3,-1
    c4b8:	30c6703a 	and	r3,r6,r3
    c4bc:	100ed0fa 	srli	r7,r2,3
    c4c0:	5825883a 	mov	r18,r11
    c4c4:	1904b03a 	or	r2,r3,r4
    c4c8:	003f8006 	br	c2cc <__subdf3+0x460>
    c4cc:	6ba3c83a 	sub	r17,r13,r14
    c4d0:	11c5c83a 	sub	r2,r2,r7
    c4d4:	6c49803a 	cmpltu	r4,r13,r17
    c4d8:	1127c83a 	sub	r19,r2,r4
    c4dc:	5825883a 	mov	r18,r11
    c4e0:	003ea006 	br	bf64 <__subdf3+0xf8>
    c4e4:	7363883a 	add	r17,r14,r13
    c4e8:	3885883a 	add	r2,r7,r2
    c4ec:	8b9d803a 	cmpltu	r14,r17,r14
    c4f0:	1389883a 	add	r4,r2,r14
    c4f4:	2080202c 	andhi	r2,r4,128
    c4f8:	103fa71e 	bne	r2,zero,c398 <__subdf3+0x52c>
    c4fc:	04000044 	movi	r16,1
    c500:	003f2306 	br	c190 <__subdf3+0x324>
    c504:	7363c83a 	sub	r17,r14,r13
    c508:	3885c83a 	sub	r2,r7,r2
    c50c:	745d803a 	cmpltu	r14,r14,r17
    c510:	1389c83a 	sub	r4,r2,r14
    c514:	04000044 	movi	r16,1
    c518:	003e8d06 	br	bf50 <__subdf3+0xe4>
    c51c:	1008977a 	slli	r4,r2,29
    c520:	00c80034 	movhi	r3,8192
    c524:	18ffffc4 	addi	r3,r3,-1
    c528:	30c6703a 	and	r3,r6,r3
    c52c:	100ed0fa 	srli	r7,r2,3
    c530:	1904b03a 	or	r2,r3,r4
    c534:	003f6506 	br	c2cc <__subdf3+0x460>
    c538:	380c977a 	slli	r6,r7,29
    c53c:	00880034 	movhi	r2,8192
    c540:	10bfffc4 	addi	r2,r2,-1
    c544:	2088703a 	and	r4,r4,r2
    c548:	380ed0fa 	srli	r7,r7,3
    c54c:	2184b03a 	or	r2,r4,r6
    c550:	003f5e06 	br	c2cc <__subdf3+0x460>
    c554:	3ba2b03a 	or	r17,r7,r14
    c558:	8822c03a 	cmpne	r17,r17,zero
    c55c:	003f4906 	br	c284 <__subdf3+0x418>
    c560:	547ff804 	addi	r17,r10,-32
    c564:	51000820 	cmpeqi	r4,r10,32
    c568:	3c46d83a 	srl	r3,r7,r17
    c56c:	2000041e 	bne	r4,zero,c580 <__subdf3+0x714>
    c570:	01001004 	movi	r4,64
    c574:	2295c83a 	sub	r10,r4,r10
    c578:	3a8e983a 	sll	r7,r7,r10
    c57c:	71dcb03a 	or	r14,r14,r7
    c580:	7022c03a 	cmpne	r17,r14,zero
    c584:	88e2b03a 	or	r17,r17,r3
    c588:	003f9b06 	br	c3f8 <__subdf3+0x58c>
    c58c:	18001826 	beq	r3,zero,c5f0 <__subdf3+0x784>
    c590:	135ab03a 	or	r13,r2,r13
    c594:	380a977a 	slli	r5,r7,29
    c598:	380ed0fa 	srli	r7,r7,3
    c59c:	6800311e 	bne	r13,zero,c664 <__subdf3+0x7f8>
    c5a0:	00880034 	movhi	r2,8192
    c5a4:	10bfffc4 	addi	r2,r2,-1
    c5a8:	2084703a 	and	r2,r4,r2
    c5ac:	1144b03a 	or	r2,r2,r5
    c5b0:	003f4606 	br	c2cc <__subdf3+0x460>
    c5b4:	40005f26 	beq	r8,zero,c734 <__subdf3+0x8c8>
    c5b8:	1008977a 	slli	r4,r2,29
    c5bc:	00c80034 	movhi	r3,8192
    c5c0:	18ffffc4 	addi	r3,r3,-1
    c5c4:	30cc703a 	and	r6,r6,r3
    c5c8:	1010d0fa 	srli	r8,r2,3
    c5cc:	5825883a 	mov	r18,r11
    c5d0:	3104b03a 	or	r2,r6,r4
    c5d4:	003ef706 	br	c1b4 <__subdf3+0x348>
    c5d8:	6ba3c83a 	sub	r17,r13,r14
    c5dc:	11c5c83a 	sub	r2,r2,r7
    c5e0:	6c5b803a 	cmpltu	r13,r13,r17
    c5e4:	1349c83a 	sub	r4,r2,r13
    c5e8:	04000044 	movi	r16,1
    c5ec:	003e5806 	br	bf50 <__subdf3+0xe4>
    c5f0:	1006977a 	slli	r3,r2,29
    c5f4:	01080034 	movhi	r4,8192
    c5f8:	213fffc4 	addi	r4,r4,-1
    c5fc:	3108703a 	and	r4,r6,r4
    c600:	100ed0fa 	srli	r7,r2,3
    c604:	1904b03a 	or	r2,r3,r4
    c608:	003f3006 	br	c2cc <__subdf3+0x460>
    c60c:	3806977a 	slli	r3,r7,29
    c610:	00880034 	movhi	r2,8192
    c614:	10bfffc4 	addi	r2,r2,-1
    c618:	2084703a 	and	r2,r4,r2
    c61c:	380ed0fa 	srli	r7,r7,3
    c620:	10c4b03a 	or	r2,r2,r3
    c624:	003f2906 	br	c2cc <__subdf3+0x460>
    c628:	7363c83a 	sub	r17,r14,r13
    c62c:	7447803a 	cmpltu	r3,r14,r17
    c630:	3889c83a 	sub	r4,r7,r2
    c634:	20c9c83a 	sub	r4,r4,r3
    c638:	20c0202c 	andhi	r3,r4,128
    c63c:	18004026 	beq	r3,zero,c740 <__subdf3+0x8d4>
    c640:	6ba3c83a 	sub	r17,r13,r14
    c644:	11c5c83a 	sub	r2,r2,r7
    c648:	6c5b803a 	cmpltu	r13,r13,r17
    c64c:	1349c83a 	sub	r4,r2,r13
    c650:	5825883a 	mov	r18,r11
    c654:	003e5c06 	br	bfc8 <__subdf3+0x15c>
    c658:	380a977a 	slli	r5,r7,29
    c65c:	380ed0fa 	srli	r7,r7,3
    c660:	403fcf26 	beq	r8,zero,c5a0 <__subdf3+0x734>
    c664:	00c80034 	movhi	r3,8192
    c668:	18ffffc4 	addi	r3,r3,-1
    c66c:	20c8703a 	and	r4,r4,r3
    c670:	3a00022c 	andhi	r8,r7,8
    c674:	2148b03a 	or	r4,r4,r5
    c678:	40000826 	beq	r8,zero,c69c <__subdf3+0x830>
    c67c:	100ad0fa 	srli	r5,r2,3
    c680:	2a00022c 	andhi	r8,r5,8
    c684:	4000051e 	bne	r8,zero,c69c <__subdf3+0x830>
    c688:	1004977a 	slli	r2,r2,29
    c68c:	30c6703a 	and	r3,r6,r3
    c690:	5825883a 	mov	r18,r11
    c694:	1888b03a 	or	r4,r3,r2
    c698:	280f883a 	mov	r7,r5
    c69c:	380e90fa 	slli	r7,r7,3
    c6a0:	2005883a 	mov	r2,r4
    c6a4:	380ed0fa 	srli	r7,r7,3
    c6a8:	003f0806 	br	c2cc <__subdf3+0x460>
    c6ac:	100a977a 	slli	r5,r2,29
    c6b0:	00c80034 	movhi	r3,8192
    c6b4:	18ffffc4 	addi	r3,r3,-1
    c6b8:	30c6703a 	and	r3,r6,r3
    c6bc:	1010d0fa 	srli	r8,r2,3
    c6c0:	28c4b03a 	or	r2,r5,r3
    c6c4:	003ebb06 	br	c1b4 <__subdf3+0x348>
    c6c8:	7363883a 	add	r17,r14,r13
    c6cc:	3885883a 	add	r2,r7,r2
    c6d0:	8b9d803a 	cmpltu	r14,r17,r14
    c6d4:	1389883a 	add	r4,r2,r14
    c6d8:	2080202c 	andhi	r2,r4,128
    c6dc:	103eac26 	beq	r2,zero,c190 <__subdf3+0x324>
    c6e0:	00bfe034 	movhi	r2,65408
    c6e4:	10bfffc4 	addi	r2,r2,-1
    c6e8:	2088703a 	and	r4,r4,r2
    c6ec:	04000044 	movi	r16,1
    c6f0:	003ea706 	br	c190 <__subdf3+0x324>
    c6f4:	50fff804 	addi	r3,r10,-32
    c6f8:	51000820 	cmpeqi	r4,r10,32
    c6fc:	38c6d83a 	srl	r3,r7,r3
    c700:	2000041e 	bne	r4,zero,c714 <__subdf3+0x8a8>
    c704:	01001004 	movi	r4,64
    c708:	2295c83a 	sub	r10,r4,r10
    c70c:	3a8e983a 	sll	r7,r7,r10
    c710:	71dcb03a 	or	r14,r14,r7
    c714:	7022c03a 	cmpne	r17,r14,zero
    c718:	88e2b03a 	or	r17,r17,r3
    c71c:	003ed906 	br	c284 <__subdf3+0x418>
    c720:	7363883a 	add	r17,r14,r13
    c724:	3885883a 	add	r2,r7,r2
    c728:	8b5b803a 	cmpltu	r13,r17,r13
    c72c:	1349883a 	add	r4,r2,r13
    c730:	003f7006 	br	c4f4 <__subdf3+0x688>
    c734:	0005883a 	mov	r2,zero
    c738:	0025883a 	mov	r18,zero
    c73c:	003e9d06 	br	c1b4 <__subdf3+0x348>
    c740:	8904b03a 	or	r2,r17,r4
    c744:	103f1126 	beq	r2,zero,c38c <__subdf3+0x520>
    c748:	003e9106 	br	c190 <__subdf3+0x324>
    c74c:	01c00434 	movhi	r7,16
    c750:	00bfffc4 	movi	r2,-1
    c754:	39ffffc4 	addi	r7,r7,-1
    c758:	0025883a 	mov	r18,zero
    c75c:	003edd06 	br	c2d4 <__subdf3+0x468>
    c760:	0005883a 	mov	r2,zero
    c764:	0401ffc4 	movi	r16,2047
    c768:	0007883a 	mov	r3,zero
    c76c:	003e2d06 	br	c024 <__subdf3+0x1b8>
    c770:	400f883a 	mov	r7,r8
    c774:	003ed506 	br	c2cc <__subdf3+0x460>

0000c778 <__unorddf2>:
    c778:	2806d53a 	srli	r3,r5,20
    c77c:	3810d53a 	srli	r8,r7,20
    c780:	02400434 	movhi	r9,16
    c784:	18c1ffcc 	andi	r3,r3,2047
    c788:	4a7fffc4 	addi	r9,r9,-1
    c78c:	18c1ffd8 	cmpnei	r3,r3,2047
    c790:	2a4a703a 	and	r5,r5,r9
    c794:	3a4e703a 	and	r7,r7,r9
    c798:	4201ffcc 	andi	r8,r8,2047
    c79c:	18000426 	beq	r3,zero,c7b0 <__unorddf2+0x38>
    c7a0:	4201ffd8 	cmpnei	r8,r8,2047
    c7a4:	40000626 	beq	r8,zero,c7c0 <__unorddf2+0x48>
    c7a8:	0005883a 	mov	r2,zero
    c7ac:	f800283a 	ret
    c7b0:	290ab03a 	or	r5,r5,r4
    c7b4:	283ffa26 	beq	r5,zero,c7a0 <__unorddf2+0x28>
    c7b8:	00800044 	movi	r2,1
    c7bc:	f800283a 	ret
    c7c0:	398eb03a 	or	r7,r7,r6
    c7c4:	3804c03a 	cmpne	r2,r7,zero
    c7c8:	f800283a 	ret

0000c7cc <__fixdfsi>:
    c7cc:	2806d53a 	srli	r3,r5,20
    c7d0:	01800434 	movhi	r6,16
    c7d4:	31bfffc4 	addi	r6,r6,-1
    c7d8:	18c1ffcc 	andi	r3,r3,2047
    c7dc:	19c0ffd0 	cmplti	r7,r3,1023
    c7e0:	2810d7fa 	srli	r8,r5,31
    c7e4:	298a703a 	and	r5,r5,r6
    c7e8:	3800061e 	bne	r7,zero,c804 <__fixdfsi+0x38>
    c7ec:	18810790 	cmplti	r2,r3,1054
    c7f0:	1000061e 	bne	r2,zero,c80c <__fixdfsi+0x40>
    c7f4:	00a00034 	movhi	r2,32768
    c7f8:	10bfffc4 	addi	r2,r2,-1
    c7fc:	4085883a 	add	r2,r8,r2
    c800:	f800283a 	ret
    c804:	0005883a 	mov	r2,zero
    c808:	f800283a 	ret
    c80c:	01810cc4 	movi	r6,1075
    c810:	30cdc83a 	sub	r6,r6,r3
    c814:	30800808 	cmpgei	r2,r6,32
    c818:	29400434 	orhi	r5,r5,16
    c81c:	1000071e 	bne	r2,zero,c83c <__fixdfsi+0x70>
    c820:	18befb44 	addi	r2,r3,-1043
    c824:	2884983a 	sll	r2,r5,r2
    c828:	2188d83a 	srl	r4,r4,r6
    c82c:	1104b03a 	or	r2,r2,r4
    c830:	403ff526 	beq	r8,zero,c808 <__fixdfsi+0x3c>
    c834:	0085c83a 	sub	r2,zero,r2
    c838:	f800283a 	ret
    c83c:	008104c4 	movi	r2,1043
    c840:	10c5c83a 	sub	r2,r2,r3
    c844:	2884d83a 	srl	r2,r5,r2
    c848:	003ff906 	br	c830 <__fixdfsi+0x64>

0000c84c <__floatsidf>:
    c84c:	defffd04 	addi	sp,sp,-12
    c850:	dfc00215 	stw	ra,8(sp)
    c854:	dc400115 	stw	r17,4(sp)
    c858:	dc000015 	stw	r16,0(sp)
    c85c:	20001326 	beq	r4,zero,c8ac <__floatsidf+0x60>
    c860:	2022d7fa 	srli	r17,r4,31
    c864:	2021883a 	mov	r16,r4
    c868:	20002416 	blt	r4,zero,c8fc <__floatsidf+0xb0>
    c86c:	8009883a 	mov	r4,r16
    c870:	000cc000 	call	cc00 <__clzsi2>
    c874:	01010784 	movi	r4,1054
    c878:	2089c83a 	sub	r4,r4,r2
    c87c:	114002c8 	cmpgei	r5,r2,11
    c880:	20c1ffcc 	andi	r3,r4,2047
    c884:	2800161e 	bne	r5,zero,c8e0 <__floatsidf+0x94>
    c888:	010002c4 	movi	r4,11
    c88c:	2089c83a 	sub	r4,r4,r2
    c890:	810ad83a 	srl	r5,r16,r4
    c894:	01000434 	movhi	r4,16
    c898:	10800544 	addi	r2,r2,21
    c89c:	213fffc4 	addi	r4,r4,-1
    c8a0:	8084983a 	sll	r2,r16,r2
    c8a4:	290a703a 	and	r5,r5,r4
    c8a8:	00000406 	br	c8bc <__floatsidf+0x70>
    c8ac:	0023883a 	mov	r17,zero
    c8b0:	0007883a 	mov	r3,zero
    c8b4:	000b883a 	mov	r5,zero
    c8b8:	0005883a 	mov	r2,zero
    c8bc:	1808953a 	slli	r4,r3,20
    c8c0:	880697fa 	slli	r3,r17,31
    c8c4:	2148b03a 	or	r4,r4,r5
    c8c8:	20c6b03a 	or	r3,r4,r3
    c8cc:	dfc00217 	ldw	ra,8(sp)
    c8d0:	dc400117 	ldw	r17,4(sp)
    c8d4:	dc000017 	ldw	r16,0(sp)
    c8d8:	dec00304 	addi	sp,sp,12
    c8dc:	f800283a 	ret
    c8e0:	10bffd44 	addi	r2,r2,-11
    c8e4:	808a983a 	sll	r5,r16,r2
    c8e8:	00800434 	movhi	r2,16
    c8ec:	10bfffc4 	addi	r2,r2,-1
    c8f0:	288a703a 	and	r5,r5,r2
    c8f4:	0005883a 	mov	r2,zero
    c8f8:	003ff006 	br	c8bc <__floatsidf+0x70>
    c8fc:	0121c83a 	sub	r16,zero,r4
    c900:	003fda06 	br	c86c <__floatsidf+0x20>

0000c904 <__floatunsidf>:
    c904:	defffe04 	addi	sp,sp,-8
    c908:	dc000015 	stw	r16,0(sp)
    c90c:	dfc00115 	stw	ra,4(sp)
    c910:	2021883a 	mov	r16,r4
    c914:	20000f26 	beq	r4,zero,c954 <__floatunsidf+0x50>
    c918:	000cc000 	call	cc00 <__clzsi2>
    c91c:	00c10784 	movi	r3,1054
    c920:	1887c83a 	sub	r3,r3,r2
    c924:	110002c8 	cmpgei	r4,r2,11
    c928:	18c1ffcc 	andi	r3,r3,2047
    c92c:	2000121e 	bne	r4,zero,c978 <__floatunsidf+0x74>
    c930:	014002c4 	movi	r5,11
    c934:	288bc83a 	sub	r5,r5,r2
    c938:	814ad83a 	srl	r5,r16,r5
    c93c:	01000434 	movhi	r4,16
    c940:	10800544 	addi	r2,r2,21
    c944:	213fffc4 	addi	r4,r4,-1
    c948:	80a0983a 	sll	r16,r16,r2
    c94c:	290a703a 	and	r5,r5,r4
    c950:	00000206 	br	c95c <__floatunsidf+0x58>
    c954:	0007883a 	mov	r3,zero
    c958:	000b883a 	mov	r5,zero
    c95c:	1806953a 	slli	r3,r3,20
    c960:	8005883a 	mov	r2,r16
    c964:	1946b03a 	or	r3,r3,r5
    c968:	dfc00117 	ldw	ra,4(sp)
    c96c:	dc000017 	ldw	r16,0(sp)
    c970:	dec00204 	addi	sp,sp,8
    c974:	f800283a 	ret
    c978:	117ffd44 	addi	r5,r2,-11
    c97c:	814a983a 	sll	r5,r16,r5
    c980:	00800434 	movhi	r2,16
    c984:	10bfffc4 	addi	r2,r2,-1
    c988:	288a703a 	and	r5,r5,r2
    c98c:	0021883a 	mov	r16,zero
    c990:	003ff206 	br	c95c <__floatunsidf+0x58>

0000c994 <__extendsfdf2>:
    c994:	200ad5fa 	srli	r5,r4,23
    c998:	defffd04 	addi	sp,sp,-12
    c99c:	dc000015 	stw	r16,0(sp)
    c9a0:	29403fcc 	andi	r5,r5,255
    c9a4:	04002034 	movhi	r16,128
    c9a8:	28800044 	addi	r2,r5,1
    c9ac:	dc400115 	stw	r17,4(sp)
    c9b0:	843fffc4 	addi	r16,r16,-1
    c9b4:	dfc00215 	stw	ra,8(sp)
    c9b8:	10803f8c 	andi	r2,r2,254
    c9bc:	2022d7fa 	srli	r17,r4,31
    c9c0:	8120703a 	and	r16,r16,r4
    c9c4:	10000d26 	beq	r2,zero,c9fc <__extendsfdf2+0x68>
    c9c8:	8008d0fa 	srli	r4,r16,3
    c9cc:	8020977a 	slli	r16,r16,29
    c9d0:	28c0e004 	addi	r3,r5,896
    c9d4:	180a953a 	slli	r5,r3,20
    c9d8:	880697fa 	slli	r3,r17,31
    c9dc:	8005883a 	mov	r2,r16
    c9e0:	290ab03a 	or	r5,r5,r4
    c9e4:	28c6b03a 	or	r3,r5,r3
    c9e8:	dfc00217 	ldw	ra,8(sp)
    c9ec:	dc400117 	ldw	r17,4(sp)
    c9f0:	dc000017 	ldw	r16,0(sp)
    c9f4:	dec00304 	addi	sp,sp,12
    c9f8:	f800283a 	ret
    c9fc:	2800111e 	bne	r5,zero,ca44 <__extendsfdf2+0xb0>
    ca00:	80001926 	beq	r16,zero,ca68 <__extendsfdf2+0xd4>
    ca04:	8009883a 	mov	r4,r16
    ca08:	000cc000 	call	cc00 <__clzsi2>
    ca0c:	10c002c8 	cmpgei	r3,r2,11
    ca10:	18001b1e 	bne	r3,zero,ca80 <__extendsfdf2+0xec>
    ca14:	010002c4 	movi	r4,11
    ca18:	2089c83a 	sub	r4,r4,r2
    ca1c:	10c00544 	addi	r3,r2,21
    ca20:	810ad83a 	srl	r5,r16,r4
    ca24:	80e0983a 	sll	r16,r16,r3
    ca28:	01000434 	movhi	r4,16
    ca2c:	00c0e244 	movi	r3,905
    ca30:	213fffc4 	addi	r4,r4,-1
    ca34:	1887c83a 	sub	r3,r3,r2
    ca38:	2908703a 	and	r4,r5,r4
    ca3c:	18c1ffcc 	andi	r3,r3,2047
    ca40:	003fe406 	br	c9d4 <__extendsfdf2+0x40>
    ca44:	80000b26 	beq	r16,zero,ca74 <__extendsfdf2+0xe0>
    ca48:	800ad0fa 	srli	r5,r16,3
    ca4c:	00800434 	movhi	r2,16
    ca50:	10bfffc4 	addi	r2,r2,-1
    ca54:	29000234 	orhi	r4,r5,8
    ca58:	8020977a 	slli	r16,r16,29
    ca5c:	2088703a 	and	r4,r4,r2
    ca60:	00c1ffc4 	movi	r3,2047
    ca64:	003fdb06 	br	c9d4 <__extendsfdf2+0x40>
    ca68:	0007883a 	mov	r3,zero
    ca6c:	0009883a 	mov	r4,zero
    ca70:	003fd806 	br	c9d4 <__extendsfdf2+0x40>
    ca74:	00c1ffc4 	movi	r3,2047
    ca78:	0009883a 	mov	r4,zero
    ca7c:	003fd506 	br	c9d4 <__extendsfdf2+0x40>
    ca80:	113ffd44 	addi	r4,r2,-11
    ca84:	810a983a 	sll	r5,r16,r4
    ca88:	0021883a 	mov	r16,zero
    ca8c:	003fe606 	br	ca28 <__extendsfdf2+0x94>

0000ca90 <__truncdfsf2>:
    ca90:	2804d53a 	srli	r2,r5,20
    ca94:	00c00434 	movhi	r3,16
    ca98:	18ffffc4 	addi	r3,r3,-1
    ca9c:	28c6703a 	and	r3,r5,r3
    caa0:	180c90fa 	slli	r6,r3,3
    caa4:	1081ffcc 	andi	r2,r2,2047
    caa8:	2006d77a 	srli	r3,r4,29
    caac:	11c00044 	addi	r7,r2,1
    cab0:	39c1ff8c 	andi	r7,r7,2046
    cab4:	280ad7fa 	srli	r5,r5,31
    cab8:	201090fa 	slli	r8,r4,3
    cabc:	1986b03a 	or	r3,r3,r6
    cac0:	38000b26 	beq	r7,zero,caf0 <__truncdfsf2+0x60>
    cac4:	11bf2004 	addi	r6,r2,-896
    cac8:	31c03fc8 	cmpgei	r7,r6,255
    cacc:	38001226 	beq	r7,zero,cb18 <__truncdfsf2+0x88>
    cad0:	00bfffc4 	movi	r2,-1
    cad4:	0007883a 	mov	r3,zero
    cad8:	10803fcc 	andi	r2,r2,255
    cadc:	100495fa 	slli	r2,r2,23
    cae0:	280a97fa 	slli	r5,r5,31
    cae4:	10c4b03a 	or	r2,r2,r3
    cae8:	1144b03a 	or	r2,r2,r5
    caec:	f800283a 	ret
    caf0:	1a10b03a 	or	r8,r3,r8
    caf4:	1000041e 	bne	r2,zero,cb08 <__truncdfsf2+0x78>
    caf8:	40001d1e 	bne	r8,zero,cb70 <__truncdfsf2+0xe0>
    cafc:	0005883a 	mov	r2,zero
    cb00:	0007883a 	mov	r3,zero
    cb04:	003ff406 	br	cad8 <__truncdfsf2+0x48>
    cb08:	403ff126 	beq	r8,zero,cad0 <__truncdfsf2+0x40>
    cb0c:	18c01034 	orhi	r3,r3,64
    cb10:	00bfffc4 	movi	r2,-1
    cb14:	003ff006 	br	cad8 <__truncdfsf2+0x48>
    cb18:	0180170e 	bge	zero,r6,cb78 <__truncdfsf2+0xe8>
    cb1c:	200891ba 	slli	r4,r4,6
    cb20:	180690fa 	slli	r3,r3,3
    cb24:	4010d77a 	srli	r8,r8,29
    cb28:	2008c03a 	cmpne	r4,r4,zero
    cb2c:	20c6b03a 	or	r3,r4,r3
    cb30:	1a06b03a 	or	r3,r3,r8
    cb34:	188001cc 	andi	r2,r3,7
    cb38:	10002f26 	beq	r2,zero,cbf8 <__truncdfsf2+0x168>
    cb3c:	188003cc 	andi	r2,r3,15
    cb40:	10800118 	cmpnei	r2,r2,4
    cb44:	10000126 	beq	r2,zero,cb4c <__truncdfsf2+0xbc>
    cb48:	18c00104 	addi	r3,r3,4
    cb4c:	1881002c 	andhi	r2,r3,1024
    cb50:	10002926 	beq	r2,zero,cbf8 <__truncdfsf2+0x168>
    cb54:	30800044 	addi	r2,r6,1
    cb58:	11003fe0 	cmpeqi	r4,r2,255
    cb5c:	203fdc1e 	bne	r4,zero,cad0 <__truncdfsf2+0x40>
    cb60:	180691ba 	slli	r3,r3,6
    cb64:	1806d27a 	srli	r3,r3,9
    cb68:	003fdb06 	br	cad8 <__truncdfsf2+0x48>
    cb6c:	0005883a 	mov	r2,zero
    cb70:	00c00144 	movi	r3,5
    cb74:	003ffa06 	br	cb60 <__truncdfsf2+0xd0>
    cb78:	313ffa50 	cmplti	r4,r6,-23
    cb7c:	203ffb1e 	bne	r4,zero,cb6c <__truncdfsf2+0xdc>
    cb80:	01c00784 	movi	r7,30
    cb84:	398fc83a 	sub	r7,r7,r6
    cb88:	3a400808 	cmpgei	r9,r7,32
    cb8c:	19002034 	orhi	r4,r3,128
    cb90:	48001126 	beq	r9,zero,cbd8 <__truncdfsf2+0x148>
    cb94:	00ffff84 	movi	r3,-2
    cb98:	198dc83a 	sub	r6,r3,r6
    cb9c:	39c00820 	cmpeqi	r7,r7,32
    cba0:	218cd83a 	srl	r6,r4,r6
    cba4:	3800031e 	bne	r7,zero,cbb4 <__truncdfsf2+0x124>
    cba8:	10ff2884 	addi	r3,r2,-862
    cbac:	20c8983a 	sll	r4,r4,r3
    cbb0:	4110b03a 	or	r8,r8,r4
    cbb4:	4006c03a 	cmpne	r3,r8,zero
    cbb8:	1986b03a 	or	r3,r3,r6
    cbbc:	188001cc 	andi	r2,r3,7
    cbc0:	000d883a 	mov	r6,zero
    cbc4:	103fdd1e 	bne	r2,zero,cb3c <__truncdfsf2+0xac>
    cbc8:	1881002c 	andhi	r2,r3,1024
    cbcc:	103fe426 	beq	r2,zero,cb60 <__truncdfsf2+0xd0>
    cbd0:	00800044 	movi	r2,1
    cbd4:	003fe206 	br	cb60 <__truncdfsf2+0xd0>
    cbd8:	10ff2084 	addi	r3,r2,-894
    cbdc:	40c4983a 	sll	r2,r8,r3
    cbe0:	20c8983a 	sll	r4,r4,r3
    cbe4:	41c6d83a 	srl	r3,r8,r7
    cbe8:	1004c03a 	cmpne	r2,r2,zero
    cbec:	1108b03a 	or	r4,r2,r4
    cbf0:	1906b03a 	or	r3,r3,r4
    cbf4:	003ff106 	br	cbbc <__truncdfsf2+0x12c>
    cbf8:	3005883a 	mov	r2,r6
    cbfc:	003fd806 	br	cb60 <__truncdfsf2+0xd0>

0000cc00 <__clzsi2>:
    cc00:	00bfffd4 	movui	r2,65535
    cc04:	11000436 	bltu	r2,r4,cc18 <__clzsi2+0x18>
    cc08:	20804030 	cmpltui	r2,r4,256
    cc0c:	10000e26 	beq	r2,zero,cc48 <__clzsi2+0x48>
    cc10:	01400804 	movi	r5,32
    cc14:	00000406 	br	cc28 <__clzsi2+0x28>
    cc18:	00804034 	movhi	r2,256
    cc1c:	20800736 	bltu	r4,r2,cc3c <__clzsi2+0x3c>
    cc20:	2008d63a 	srli	r4,r4,24
    cc24:	01400204 	movi	r5,8
    cc28:	00c000b4 	movhi	r3,2
    cc2c:	20c7883a 	add	r3,r4,r3
    cc30:	18856e03 	ldbu	r2,5560(r3)
    cc34:	2885c83a 	sub	r2,r5,r2
    cc38:	f800283a 	ret
    cc3c:	2008d43a 	srli	r4,r4,16
    cc40:	01400404 	movi	r5,16
    cc44:	003ff806 	br	cc28 <__clzsi2+0x28>
    cc48:	2008d23a 	srli	r4,r4,8
    cc4c:	01400604 	movi	r5,24
    cc50:	003ff506 	br	cc28 <__clzsi2+0x28>

0000cc54 <__errno>:
    cc54:	008000b4 	movhi	r2,2
    cc58:	108eaa17 	ldw	r2,15016(r2)
    cc5c:	f800283a 	ret

0000cc60 <malloc>:
    cc60:	008000b4 	movhi	r2,2
    cc64:	200b883a 	mov	r5,r4
    cc68:	110eaa17 	ldw	r4,15016(r2)
    cc6c:	000cc801 	jmpi	cc80 <_malloc_r>

0000cc70 <free>:
    cc70:	008000b4 	movhi	r2,2
    cc74:	200b883a 	mov	r5,r4
    cc78:	110eaa17 	ldw	r4,15016(r2)
    cc7c:	001340c1 	jmpi	1340c <_free_r>

0000cc80 <_malloc_r>:
    cc80:	defff604 	addi	sp,sp,-40
    cc84:	dc400115 	stw	r17,4(sp)
    cc88:	2c4002c4 	addi	r17,r5,11
    cc8c:	dc800215 	stw	r18,8(sp)
    cc90:	dfc00915 	stw	ra,36(sp)
    cc94:	df000815 	stw	fp,32(sp)
    cc98:	ddc00715 	stw	r23,28(sp)
    cc9c:	dd800615 	stw	r22,24(sp)
    cca0:	dd400515 	stw	r21,20(sp)
    cca4:	dd000415 	stw	r20,16(sp)
    cca8:	dcc00315 	stw	r19,12(sp)
    ccac:	dc000015 	stw	r16,0(sp)
    ccb0:	888005e8 	cmpgeui	r2,r17,23
    ccb4:	2025883a 	mov	r18,r4
    ccb8:	10001b1e 	bne	r2,zero,cd28 <_malloc_r+0xa8>
    ccbc:	29400468 	cmpgeui	r5,r5,17
    ccc0:	2800821e 	bne	r5,zero,cecc <_malloc_r+0x24c>
    ccc4:	001a1f40 	call	1a1f4 <__malloc_lock>
    ccc8:	04400404 	movi	r17,16
    cccc:	00800604 	movi	r2,24
    ccd0:	01c00084 	movi	r7,2
    ccd4:	04c000b4 	movhi	r19,2
    ccd8:	9cc89104 	addi	r19,r19,8772
    ccdc:	9885883a 	add	r2,r19,r2
    cce0:	14000117 	ldw	r16,4(r2)
    cce4:	10fffe04 	addi	r3,r2,-8
    cce8:	80c08b26 	beq	r16,r3,cf18 <_malloc_r+0x298>
    ccec:	80800117 	ldw	r2,4(r16)
    ccf0:	81000317 	ldw	r4,12(r16)
    ccf4:	00ffff04 	movi	r3,-4
    ccf8:	10c4703a 	and	r2,r2,r3
    ccfc:	81400217 	ldw	r5,8(r16)
    cd00:	8085883a 	add	r2,r16,r2
    cd04:	10c00117 	ldw	r3,4(r2)
    cd08:	29000315 	stw	r4,12(r5)
    cd0c:	21400215 	stw	r5,8(r4)
    cd10:	18c00054 	ori	r3,r3,1
    cd14:	10c00115 	stw	r3,4(r2)
    cd18:	9009883a 	mov	r4,r18
    cd1c:	001a2180 	call	1a218 <__malloc_unlock>
    cd20:	80800204 	addi	r2,r16,8
    cd24:	00006c06 	br	ced8 <_malloc_r+0x258>
    cd28:	00bffe04 	movi	r2,-8
    cd2c:	88a2703a 	and	r17,r17,r2
    cd30:	88006616 	blt	r17,zero,cecc <_malloc_r+0x24c>
    cd34:	89406536 	bltu	r17,r5,cecc <_malloc_r+0x24c>
    cd38:	001a1f40 	call	1a1f4 <__malloc_lock>
    cd3c:	88807e28 	cmpgeui	r2,r17,504
    cd40:	10012226 	beq	r2,zero,d1cc <_malloc_r+0x54c>
    cd44:	8804d27a 	srli	r2,r17,9
    cd48:	10006f26 	beq	r2,zero,cf08 <_malloc_r+0x288>
    cd4c:	10c00168 	cmpgeui	r3,r2,5
    cd50:	1800fe1e 	bne	r3,zero,d14c <_malloc_r+0x4cc>
    cd54:	8804d1ba 	srli	r2,r17,6
    cd58:	11c00e44 	addi	r7,r2,57
    cd5c:	380890fa 	slli	r4,r7,3
    cd60:	12000e04 	addi	r8,r2,56
    cd64:	04c000b4 	movhi	r19,2
    cd68:	9cc89104 	addi	r19,r19,8772
    cd6c:	9909883a 	add	r4,r19,r4
    cd70:	24000117 	ldw	r16,4(r4)
    cd74:	213ffe04 	addi	r4,r4,-8
    cd78:	24000b26 	beq	r4,r16,cda8 <_malloc_r+0x128>
    cd7c:	01bfff04 	movi	r6,-4
    cd80:	00000306 	br	cd90 <_malloc_r+0x110>
    cd84:	1800d60e 	bge	r3,zero,d0e0 <_malloc_r+0x460>
    cd88:	84000317 	ldw	r16,12(r16)
    cd8c:	24000626 	beq	r4,r16,cda8 <_malloc_r+0x128>
    cd90:	80800117 	ldw	r2,4(r16)
    cd94:	1184703a 	and	r2,r2,r6
    cd98:	1447c83a 	sub	r3,r2,r17
    cd9c:	19400408 	cmpgei	r5,r3,16
    cda0:	283ff826 	beq	r5,zero,cd84 <_malloc_r+0x104>
    cda4:	400f883a 	mov	r7,r8
    cda8:	9c000417 	ldw	r16,16(r19)
    cdac:	024000b4 	movhi	r9,2
    cdb0:	4a489304 	addi	r9,r9,8780
    cdb4:	82405f26 	beq	r16,r9,cf34 <_malloc_r+0x2b4>
    cdb8:	80c00117 	ldw	r3,4(r16)
    cdbc:	00bfff04 	movi	r2,-4
    cdc0:	1884703a 	and	r2,r3,r2
    cdc4:	1447c83a 	sub	r3,r2,r17
    cdc8:	19000410 	cmplti	r4,r3,16
    cdcc:	20010a26 	beq	r4,zero,d1f8 <_malloc_r+0x578>
    cdd0:	9a400515 	stw	r9,20(r19)
    cdd4:	9a400415 	stw	r9,16(r19)
    cdd8:	1800ff0e 	bge	r3,zero,d1d8 <_malloc_r+0x558>
    cddc:	10c08028 	cmpgeui	r3,r2,512
    cde0:	1800c11e 	bne	r3,zero,d0e8 <_malloc_r+0x468>
    cde4:	1006d0fa 	srli	r3,r2,3
    cde8:	1008d17a 	srli	r4,r2,5
    cdec:	00800044 	movi	r2,1
    cdf0:	18c00044 	addi	r3,r3,1
    cdf4:	180690fa 	slli	r3,r3,3
    cdf8:	99400117 	ldw	r5,4(r19)
    cdfc:	1104983a 	sll	r2,r2,r4
    ce00:	98c7883a 	add	r3,r19,r3
    ce04:	19000017 	ldw	r4,0(r3)
    ce08:	1144b03a 	or	r2,r2,r5
    ce0c:	197ffe04 	addi	r5,r3,-8
    ce10:	81400315 	stw	r5,12(r16)
    ce14:	81000215 	stw	r4,8(r16)
    ce18:	98800115 	stw	r2,4(r19)
    ce1c:	1c000015 	stw	r16,0(r3)
    ce20:	24000315 	stw	r16,12(r4)
    ce24:	3807d0ba 	srai	r3,r7,2
    ce28:	01000044 	movi	r4,1
    ce2c:	20c8983a 	sll	r4,r4,r3
    ce30:	11004536 	bltu	r2,r4,cf48 <_malloc_r+0x2c8>
    ce34:	2086703a 	and	r3,r4,r2
    ce38:	18000a1e 	bne	r3,zero,ce64 <_malloc_r+0x1e4>
    ce3c:	00ffff04 	movi	r3,-4
    ce40:	2109883a 	add	r4,r4,r4
    ce44:	38ce703a 	and	r7,r7,r3
    ce48:	2086703a 	and	r3,r4,r2
    ce4c:	39c00104 	addi	r7,r7,4
    ce50:	1800041e 	bne	r3,zero,ce64 <_malloc_r+0x1e4>
    ce54:	2109883a 	add	r4,r4,r4
    ce58:	2086703a 	and	r3,r4,r2
    ce5c:	39c00104 	addi	r7,r7,4
    ce60:	183ffc26 	beq	r3,zero,ce54 <_malloc_r+0x1d4>
    ce64:	02bfff04 	movi	r10,-4
    ce68:	381690fa 	slli	r11,r7,3
    ce6c:	3819883a 	mov	r12,r7
    ce70:	9ad7883a 	add	r11,r19,r11
    ce74:	5811883a 	mov	r8,r11
    ce78:	40800317 	ldw	r2,12(r8)
    ce7c:	4080bc26 	beq	r8,r2,d170 <_malloc_r+0x4f0>
    ce80:	10c00117 	ldw	r3,4(r2)
    ce84:	1021883a 	mov	r16,r2
    ce88:	10800317 	ldw	r2,12(r2)
    ce8c:	1a86703a 	and	r3,r3,r10
    ce90:	1c4bc83a 	sub	r5,r3,r17
    ce94:	29800410 	cmplti	r6,r5,16
    ce98:	3000ba26 	beq	r6,zero,d184 <_malloc_r+0x504>
    ce9c:	283ff716 	blt	r5,zero,ce7c <_malloc_r+0x1fc>
    cea0:	80c7883a 	add	r3,r16,r3
    cea4:	19400117 	ldw	r5,4(r3)
    cea8:	81800217 	ldw	r6,8(r16)
    ceac:	9009883a 	mov	r4,r18
    ceb0:	29400054 	ori	r5,r5,1
    ceb4:	19400115 	stw	r5,4(r3)
    ceb8:	30800315 	stw	r2,12(r6)
    cebc:	11800215 	stw	r6,8(r2)
    cec0:	001a2180 	call	1a218 <__malloc_unlock>
    cec4:	80800204 	addi	r2,r16,8
    cec8:	00000306 	br	ced8 <_malloc_r+0x258>
    cecc:	00800304 	movi	r2,12
    ced0:	90800015 	stw	r2,0(r18)
    ced4:	0005883a 	mov	r2,zero
    ced8:	dfc00917 	ldw	ra,36(sp)
    cedc:	df000817 	ldw	fp,32(sp)
    cee0:	ddc00717 	ldw	r23,28(sp)
    cee4:	dd800617 	ldw	r22,24(sp)
    cee8:	dd400517 	ldw	r21,20(sp)
    ceec:	dd000417 	ldw	r20,16(sp)
    cef0:	dcc00317 	ldw	r19,12(sp)
    cef4:	dc800217 	ldw	r18,8(sp)
    cef8:	dc400117 	ldw	r17,4(sp)
    cefc:	dc000017 	ldw	r16,0(sp)
    cf00:	dec00a04 	addi	sp,sp,40
    cf04:	f800283a 	ret
    cf08:	01008004 	movi	r4,512
    cf0c:	01c01004 	movi	r7,64
    cf10:	02000fc4 	movi	r8,63
    cf14:	003f9306 	br	cd64 <_malloc_r+0xe4>
    cf18:	14000317 	ldw	r16,12(r2)
    cf1c:	39c00084 	addi	r7,r7,2
    cf20:	143f721e 	bne	r2,r16,ccec <_malloc_r+0x6c>
    cf24:	9c000417 	ldw	r16,16(r19)
    cf28:	024000b4 	movhi	r9,2
    cf2c:	4a489304 	addi	r9,r9,8780
    cf30:	827fa11e 	bne	r16,r9,cdb8 <_malloc_r+0x138>
    cf34:	3807d0ba 	srai	r3,r7,2
    cf38:	01000044 	movi	r4,1
    cf3c:	98800117 	ldw	r2,4(r19)
    cf40:	20c8983a 	sll	r4,r4,r3
    cf44:	113fbb2e 	bgeu	r2,r4,ce34 <_malloc_r+0x1b4>
    cf48:	9c000217 	ldw	r16,8(r19)
    cf4c:	00bfff04 	movi	r2,-4
    cf50:	85400117 	ldw	r21,4(r16)
    cf54:	a8ac703a 	and	r22,r21,r2
    cf58:	b4400336 	bltu	r22,r17,cf68 <_malloc_r+0x2e8>
    cf5c:	b445c83a 	sub	r2,r22,r17
    cf60:	10c00408 	cmpgei	r3,r2,16
    cf64:	1800541e 	bne	r3,zero,d0b8 <_malloc_r+0x438>
    cf68:	008000b4 	movhi	r2,2
    cf6c:	108eab17 	ldw	r2,15020(r2)
    cf70:	00c000b4 	movhi	r3,2
    cf74:	1d55ed17 	ldw	r21,22452(r3)
    cf78:	10bfffd8 	cmpnei	r2,r2,-1
    cf7c:	85b9883a 	add	fp,r16,r22
    cf80:	8d6b883a 	add	r21,r17,r21
    cf84:	1000d626 	beq	r2,zero,d2e0 <_malloc_r+0x660>
    cf88:	ad4403c4 	addi	r21,r21,4111
    cf8c:	00bc0004 	movi	r2,-4096
    cf90:	a8aa703a 	and	r21,r21,r2
    cf94:	a80b883a 	mov	r5,r21
    cf98:	9009883a 	mov	r4,r18
    cf9c:	000d6a40 	call	d6a4 <_sbrk_r>
    cfa0:	102f883a 	mov	r23,r2
    cfa4:	10bfffd8 	cmpnei	r2,r2,-1
    cfa8:	1000a826 	beq	r2,zero,d24c <_malloc_r+0x5cc>
    cfac:	bf00a636 	bltu	r23,fp,d248 <_malloc_r+0x5c8>
    cfb0:	008000b4 	movhi	r2,2
    cfb4:	15160517 	ldw	r20,22548(r2)
    cfb8:	ad29883a 	add	r20,r21,r20
    cfbc:	15160515 	stw	r20,22548(r2)
    cfc0:	a007883a 	mov	r3,r20
    cfc4:	e5c0ec26 	beq	fp,r23,d378 <_malloc_r+0x6f8>
    cfc8:	008000b4 	movhi	r2,2
    cfcc:	108eab17 	ldw	r2,15020(r2)
    cfd0:	10bfffd8 	cmpnei	r2,r2,-1
    cfd4:	1000ef26 	beq	r2,zero,d394 <_malloc_r+0x714>
    cfd8:	bf39c83a 	sub	fp,r23,fp
    cfdc:	e0c7883a 	add	r3,fp,r3
    cfe0:	008000b4 	movhi	r2,2
    cfe4:	10d60515 	stw	r3,22548(r2)
    cfe8:	bf0001cc 	andi	fp,r23,7
    cfec:	e000c526 	beq	fp,zero,d304 <_malloc_r+0x684>
    cff0:	bf2fc83a 	sub	r23,r23,fp
    cff4:	bdc00204 	addi	r23,r23,8
    cff8:	05040204 	movi	r20,4104
    cffc:	a729c83a 	sub	r20,r20,fp
    d000:	bd6b883a 	add	r21,r23,r21
    d004:	a569c83a 	sub	r20,r20,r21
    d008:	a503ffcc 	andi	r20,r20,4095
    d00c:	a00b883a 	mov	r5,r20
    d010:	9009883a 	mov	r4,r18
    d014:	000d6a40 	call	d6a4 <_sbrk_r>
    d018:	10ffffe0 	cmpeqi	r3,r2,-1
    d01c:	1800f31e 	bne	r3,zero,d3ec <_malloc_r+0x76c>
    d020:	15c5c83a 	sub	r2,r2,r23
    d024:	152b883a 	add	r21,r2,r20
    d028:	008000b4 	movhi	r2,2
    d02c:	11560517 	ldw	r5,22548(r2)
    d030:	9dc00215 	stw	r23,8(r19)
    d034:	ad400054 	ori	r21,r21,1
    d038:	a169883a 	add	r20,r20,r5
    d03c:	15160515 	stw	r20,22548(r2)
    d040:	bd400115 	stw	r21,4(r23)
    d044:	84c0d626 	beq	r16,r19,d3a0 <_malloc_r+0x720>
    d048:	b0800428 	cmpgeui	r2,r22,16
    d04c:	1000d626 	beq	r2,zero,d3a8 <_malloc_r+0x728>
    d050:	80c00117 	ldw	r3,4(r16)
    d054:	013ffe04 	movi	r4,-8
    d058:	b0bffd04 	addi	r2,r22,-12
    d05c:	1104703a 	and	r2,r2,r4
    d060:	18c0004c 	andi	r3,r3,1
    d064:	1886b03a 	or	r3,r3,r2
    d068:	80c00115 	stw	r3,4(r16)
    d06c:	01000144 	movi	r4,5
    d070:	8087883a 	add	r3,r16,r2
    d074:	19000115 	stw	r4,4(r3)
    d078:	19000215 	stw	r4,8(r3)
    d07c:	10800428 	cmpgeui	r2,r2,16
    d080:	1000df1e 	bne	r2,zero,d400 <_malloc_r+0x780>
    d084:	bd400117 	ldw	r21,4(r23)
    d088:	b821883a 	mov	r16,r23
    d08c:	008000b4 	movhi	r2,2
    d090:	1095ec17 	ldw	r2,22448(r2)
    d094:	1500022e 	bgeu	r2,r20,d0a0 <_malloc_r+0x420>
    d098:	008000b4 	movhi	r2,2
    d09c:	1515ec15 	stw	r20,22448(r2)
    d0a0:	008000b4 	movhi	r2,2
    d0a4:	1095eb17 	ldw	r2,22444(r2)
    d0a8:	15006a2e 	bgeu	r2,r20,d254 <_malloc_r+0x5d4>
    d0ac:	008000b4 	movhi	r2,2
    d0b0:	1515eb15 	stw	r20,22444(r2)
    d0b4:	00006706 	br	d254 <_malloc_r+0x5d4>
    d0b8:	88c00054 	ori	r3,r17,1
    d0bc:	80c00115 	stw	r3,4(r16)
    d0c0:	8463883a 	add	r17,r16,r17
    d0c4:	10800054 	ori	r2,r2,1
    d0c8:	9c400215 	stw	r17,8(r19)
    d0cc:	88800115 	stw	r2,4(r17)
    d0d0:	9009883a 	mov	r4,r18
    d0d4:	001a2180 	call	1a218 <__malloc_unlock>
    d0d8:	80800204 	addi	r2,r16,8
    d0dc:	003f7e06 	br	ced8 <_malloc_r+0x258>
    d0e0:	81000317 	ldw	r4,12(r16)
    d0e4:	003f0506 	br	ccfc <_malloc_r+0x7c>
    d0e8:	1006d27a 	srli	r3,r2,9
    d0ec:	19000168 	cmpgeui	r4,r3,5
    d0f0:	20005026 	beq	r4,zero,d234 <_malloc_r+0x5b4>
    d0f4:	19000568 	cmpgeui	r4,r3,21
    d0f8:	20008c1e 	bne	r4,zero,d32c <_malloc_r+0x6ac>
    d0fc:	19401704 	addi	r5,r3,92
    d100:	280a90fa 	slli	r5,r5,3
    d104:	190016c4 	addi	r4,r3,91
    d108:	994b883a 	add	r5,r19,r5
    d10c:	28c00017 	ldw	r3,0(r5)
    d110:	297ffe04 	addi	r5,r5,-8
    d114:	28c07426 	beq	r5,r3,d2e8 <_malloc_r+0x668>
    d118:	01bfff04 	movi	r6,-4
    d11c:	19000117 	ldw	r4,4(r3)
    d120:	2188703a 	and	r4,r4,r6
    d124:	1100022e 	bgeu	r2,r4,d130 <_malloc_r+0x4b0>
    d128:	18c00217 	ldw	r3,8(r3)
    d12c:	28fffb1e 	bne	r5,r3,d11c <_malloc_r+0x49c>
    d130:	19400317 	ldw	r5,12(r3)
    d134:	98800117 	ldw	r2,4(r19)
    d138:	81400315 	stw	r5,12(r16)
    d13c:	80c00215 	stw	r3,8(r16)
    d140:	2c000215 	stw	r16,8(r5)
    d144:	1c000315 	stw	r16,12(r3)
    d148:	003f3606 	br	ce24 <_malloc_r+0x1a4>
    d14c:	10c00568 	cmpgeui	r3,r2,21
    d150:	18004a26 	beq	r3,zero,d27c <_malloc_r+0x5fc>
    d154:	10c01568 	cmpgeui	r3,r2,85
    d158:	18007b1e 	bne	r3,zero,d348 <_malloc_r+0x6c8>
    d15c:	8804d33a 	srli	r2,r17,12
    d160:	11c01bc4 	addi	r7,r2,111
    d164:	380890fa 	slli	r4,r7,3
    d168:	12001b84 	addi	r8,r2,110
    d16c:	003efd06 	br	cd64 <_malloc_r+0xe4>
    d170:	63000044 	addi	r12,r12,1
    d174:	608000cc 	andi	r2,r12,3
    d178:	42000204 	addi	r8,r8,8
    d17c:	103f3e1e 	bne	r2,zero,ce78 <_malloc_r+0x1f8>
    d180:	00004506 	br	d298 <_malloc_r+0x618>
    d184:	81000217 	ldw	r4,8(r16)
    d188:	89800054 	ori	r6,r17,1
    d18c:	81800115 	stw	r6,4(r16)
    d190:	20800315 	stw	r2,12(r4)
    d194:	11000215 	stw	r4,8(r2)
    d198:	8463883a 	add	r17,r16,r17
    d19c:	9c400515 	stw	r17,20(r19)
    d1a0:	9c400415 	stw	r17,16(r19)
    d1a4:	28800054 	ori	r2,r5,1
    d1a8:	88800115 	stw	r2,4(r17)
    d1ac:	8a400315 	stw	r9,12(r17)
    d1b0:	8a400215 	stw	r9,8(r17)
    d1b4:	80c7883a 	add	r3,r16,r3
    d1b8:	19400015 	stw	r5,0(r3)
    d1bc:	9009883a 	mov	r4,r18
    d1c0:	001a2180 	call	1a218 <__malloc_unlock>
    d1c4:	80800204 	addi	r2,r16,8
    d1c8:	003f4306 	br	ced8 <_malloc_r+0x258>
    d1cc:	880ed0fa 	srli	r7,r17,3
    d1d0:	88800204 	addi	r2,r17,8
    d1d4:	003ebf06 	br	ccd4 <_malloc_r+0x54>
    d1d8:	8085883a 	add	r2,r16,r2
    d1dc:	10c00117 	ldw	r3,4(r2)
    d1e0:	9009883a 	mov	r4,r18
    d1e4:	18c00054 	ori	r3,r3,1
    d1e8:	10c00115 	stw	r3,4(r2)
    d1ec:	001a2180 	call	1a218 <__malloc_unlock>
    d1f0:	80800204 	addi	r2,r16,8
    d1f4:	003f3806 	br	ced8 <_malloc_r+0x258>
    d1f8:	89000054 	ori	r4,r17,1
    d1fc:	81000115 	stw	r4,4(r16)
    d200:	8463883a 	add	r17,r16,r17
    d204:	9c400515 	stw	r17,20(r19)
    d208:	9c400415 	stw	r17,16(r19)
    d20c:	19000054 	ori	r4,r3,1
    d210:	89000115 	stw	r4,4(r17)
    d214:	8085883a 	add	r2,r16,r2
    d218:	8a400315 	stw	r9,12(r17)
    d21c:	8a400215 	stw	r9,8(r17)
    d220:	10c00015 	stw	r3,0(r2)
    d224:	9009883a 	mov	r4,r18
    d228:	001a2180 	call	1a218 <__malloc_unlock>
    d22c:	80800204 	addi	r2,r16,8
    d230:	003f2906 	br	ced8 <_malloc_r+0x258>
    d234:	1006d1ba 	srli	r3,r2,6
    d238:	19400e44 	addi	r5,r3,57
    d23c:	280a90fa 	slli	r5,r5,3
    d240:	19000e04 	addi	r4,r3,56
    d244:	003fb006 	br	d108 <_malloc_r+0x488>
    d248:	84c04626 	beq	r16,r19,d364 <_malloc_r+0x6e4>
    d24c:	9c000217 	ldw	r16,8(r19)
    d250:	85400117 	ldw	r21,4(r16)
    d254:	00bfff04 	movi	r2,-4
    d258:	a8aa703a 	and	r21,r21,r2
    d25c:	ac45c83a 	sub	r2,r21,r17
    d260:	ac400236 	bltu	r21,r17,d26c <_malloc_r+0x5ec>
    d264:	10c00408 	cmpgei	r3,r2,16
    d268:	183f931e 	bne	r3,zero,d0b8 <_malloc_r+0x438>
    d26c:	9009883a 	mov	r4,r18
    d270:	001a2180 	call	1a218 <__malloc_unlock>
    d274:	0005883a 	mov	r2,zero
    d278:	003f1706 	br	ced8 <_malloc_r+0x258>
    d27c:	11c01704 	addi	r7,r2,92
    d280:	380890fa 	slli	r4,r7,3
    d284:	120016c4 	addi	r8,r2,91
    d288:	003eb606 	br	cd64 <_malloc_r+0xe4>
    d28c:	58800217 	ldw	r2,8(r11)
    d290:	39ffffc4 	addi	r7,r7,-1
    d294:	12c0701e 	bne	r2,r11,d458 <_malloc_r+0x7d8>
    d298:	388000cc 	andi	r2,r7,3
    d29c:	5afffe04 	addi	r11,r11,-8
    d2a0:	103ffa1e 	bne	r2,zero,d28c <_malloc_r+0x60c>
    d2a4:	98c00117 	ldw	r3,4(r19)
    d2a8:	0104303a 	nor	r2,zero,r4
    d2ac:	10c4703a 	and	r2,r2,r3
    d2b0:	98800115 	stw	r2,4(r19)
    d2b4:	2109883a 	add	r4,r4,r4
    d2b8:	113f2336 	bltu	r2,r4,cf48 <_malloc_r+0x2c8>
    d2bc:	203f2226 	beq	r4,zero,cf48 <_malloc_r+0x2c8>
    d2c0:	2086703a 	and	r3,r4,r2
    d2c4:	1800041e 	bne	r3,zero,d2d8 <_malloc_r+0x658>
    d2c8:	2109883a 	add	r4,r4,r4
    d2cc:	2086703a 	and	r3,r4,r2
    d2d0:	63000104 	addi	r12,r12,4
    d2d4:	183ffc26 	beq	r3,zero,d2c8 <_malloc_r+0x648>
    d2d8:	600f883a 	mov	r7,r12
    d2dc:	003ee206 	br	ce68 <_malloc_r+0x1e8>
    d2e0:	ad400404 	addi	r21,r21,16
    d2e4:	003f2b06 	br	cf94 <_malloc_r+0x314>
    d2e8:	2009d0ba 	srai	r4,r4,2
    d2ec:	00800044 	movi	r2,1
    d2f0:	99800117 	ldw	r6,4(r19)
    d2f4:	1104983a 	sll	r2,r2,r4
    d2f8:	1184b03a 	or	r2,r2,r6
    d2fc:	98800115 	stw	r2,4(r19)
    d300:	003f8d06 	br	d138 <_malloc_r+0x4b8>
    d304:	bd69883a 	add	r20,r23,r21
    d308:	0529c83a 	sub	r20,zero,r20
    d30c:	a503ffcc 	andi	r20,r20,4095
    d310:	a00b883a 	mov	r5,r20
    d314:	9009883a 	mov	r4,r18
    d318:	000d6a40 	call	d6a4 <_sbrk_r>
    d31c:	10ffffe0 	cmpeqi	r3,r2,-1
    d320:	183f3f26 	beq	r3,zero,d020 <_malloc_r+0x3a0>
    d324:	0029883a 	mov	r20,zero
    d328:	003f3f06 	br	d028 <_malloc_r+0x3a8>
    d32c:	19001568 	cmpgeui	r4,r3,85
    d330:	2000201e 	bne	r4,zero,d3b4 <_malloc_r+0x734>
    d334:	1006d33a 	srli	r3,r2,12
    d338:	19401bc4 	addi	r5,r3,111
    d33c:	280a90fa 	slli	r5,r5,3
    d340:	19001b84 	addi	r4,r3,110
    d344:	003f7006 	br	d108 <_malloc_r+0x488>
    d348:	10c05568 	cmpgeui	r3,r2,341
    d34c:	1800201e 	bne	r3,zero,d3d0 <_malloc_r+0x750>
    d350:	8804d3fa 	srli	r2,r17,15
    d354:	11c01e04 	addi	r7,r2,120
    d358:	380890fa 	slli	r4,r7,3
    d35c:	12001dc4 	addi	r8,r2,119
    d360:	003e8006 	br	cd64 <_malloc_r+0xe4>
    d364:	008000b4 	movhi	r2,2
    d368:	10d60517 	ldw	r3,22548(r2)
    d36c:	a8c7883a 	add	r3,r21,r3
    d370:	10d60515 	stw	r3,22548(r2)
    d374:	003f1406 	br	cfc8 <_malloc_r+0x348>
    d378:	e083ffcc 	andi	r2,fp,4095
    d37c:	103f121e 	bne	r2,zero,cfc8 <_malloc_r+0x348>
    d380:	9c000217 	ldw	r16,8(r19)
    d384:	b56b883a 	add	r21,r22,r21
    d388:	ad400054 	ori	r21,r21,1
    d38c:	85400115 	stw	r21,4(r16)
    d390:	003f3e06 	br	d08c <_malloc_r+0x40c>
    d394:	008000b4 	movhi	r2,2
    d398:	15ceab15 	stw	r23,15020(r2)
    d39c:	003f1206 	br	cfe8 <_malloc_r+0x368>
    d3a0:	b821883a 	mov	r16,r23
    d3a4:	003f3906 	br	d08c <_malloc_r+0x40c>
    d3a8:	00800044 	movi	r2,1
    d3ac:	b8800115 	stw	r2,4(r23)
    d3b0:	003fae06 	br	d26c <_malloc_r+0x5ec>
    d3b4:	19005568 	cmpgeui	r4,r3,341
    d3b8:	2000191e 	bne	r4,zero,d420 <_malloc_r+0x7a0>
    d3bc:	1006d3fa 	srli	r3,r2,15
    d3c0:	19401e04 	addi	r5,r3,120
    d3c4:	280a90fa 	slli	r5,r5,3
    d3c8:	19001dc4 	addi	r4,r3,119
    d3cc:	003f4e06 	br	d108 <_malloc_r+0x488>
    d3d0:	10815568 	cmpgeui	r2,r2,1365
    d3d4:	1000191e 	bne	r2,zero,d43c <_malloc_r+0x7bc>
    d3d8:	8804d4ba 	srli	r2,r17,18
    d3dc:	11c01f44 	addi	r7,r2,125
    d3e0:	380890fa 	slli	r4,r7,3
    d3e4:	12001f04 	addi	r8,r2,124
    d3e8:	003e5e06 	br	cd64 <_malloc_r+0xe4>
    d3ec:	e73ffe04 	addi	fp,fp,-8
    d3f0:	af2b883a 	add	r21,r21,fp
    d3f4:	adebc83a 	sub	r21,r21,r23
    d3f8:	0029883a 	mov	r20,zero
    d3fc:	003f0a06 	br	d028 <_malloc_r+0x3a8>
    d400:	81400204 	addi	r5,r16,8
    d404:	9009883a 	mov	r4,r18
    d408:	001340c0 	call	1340c <_free_r>
    d40c:	9c000217 	ldw	r16,8(r19)
    d410:	008000b4 	movhi	r2,2
    d414:	15160517 	ldw	r20,22548(r2)
    d418:	85400117 	ldw	r21,4(r16)
    d41c:	003f1b06 	br	d08c <_malloc_r+0x40c>
    d420:	18c15568 	cmpgeui	r3,r3,1365
    d424:	1800091e 	bne	r3,zero,d44c <_malloc_r+0x7cc>
    d428:	1006d4ba 	srli	r3,r2,18
    d42c:	19401f44 	addi	r5,r3,125
    d430:	280a90fa 	slli	r5,r5,3
    d434:	19001f04 	addi	r4,r3,124
    d438:	003f3306 	br	d108 <_malloc_r+0x488>
    d43c:	0100fe04 	movi	r4,1016
    d440:	01c01fc4 	movi	r7,127
    d444:	02001f84 	movi	r8,126
    d448:	003e4606 	br	cd64 <_malloc_r+0xe4>
    d44c:	0140fe04 	movi	r5,1016
    d450:	01001f84 	movi	r4,126
    d454:	003f2c06 	br	d108 <_malloc_r+0x488>
    d458:	98800117 	ldw	r2,4(r19)
    d45c:	003f9506 	br	d2b4 <_malloc_r+0x634>

0000d460 <memcpy>:
    d460:	30c00430 	cmpltui	r3,r6,16
    d464:	2005883a 	mov	r2,r4
    d468:	18002d1e 	bne	r3,zero,d520 <memcpy+0xc0>
    d46c:	2906b03a 	or	r3,r5,r4
    d470:	18c000cc 	andi	r3,r3,3
    d474:	1800351e 	bne	r3,zero,d54c <memcpy+0xec>
    d478:	32fffc04 	addi	r11,r6,-16
    d47c:	5816d13a 	srli	r11,r11,4
    d480:	280f883a 	mov	r7,r5
    d484:	2007883a 	mov	r3,r4
    d488:	5ac00044 	addi	r11,r11,1
    d48c:	5816913a 	slli	r11,r11,4
    d490:	22d5883a 	add	r10,r4,r11
    d494:	39000117 	ldw	r4,4(r7)
    d498:	3a400017 	ldw	r9,0(r7)
    d49c:	3a000217 	ldw	r8,8(r7)
    d4a0:	19000115 	stw	r4,4(r3)
    d4a4:	39000317 	ldw	r4,12(r7)
    d4a8:	1a400015 	stw	r9,0(r3)
    d4ac:	1a000215 	stw	r8,8(r3)
    d4b0:	19000315 	stw	r4,12(r3)
    d4b4:	18c00404 	addi	r3,r3,16
    d4b8:	39c00404 	addi	r7,r7,16
    d4bc:	50fff51e 	bne	r10,r3,d494 <memcpy+0x34>
    d4c0:	3100030c 	andi	r4,r6,12
    d4c4:	2acb883a 	add	r5,r5,r11
    d4c8:	320003cc 	andi	r8,r6,15
    d4cc:	20002226 	beq	r4,zero,d558 <memcpy+0xf8>
    d4d0:	280f883a 	mov	r7,r5
    d4d4:	1813883a 	mov	r9,r3
    d4d8:	39c00104 	addi	r7,r7,4
    d4dc:	3abfff17 	ldw	r10,-4(r7)
    d4e0:	41c9c83a 	sub	r4,r8,r7
    d4e4:	2909883a 	add	r4,r5,r4
    d4e8:	4a800015 	stw	r10,0(r9)
    d4ec:	21000128 	cmpgeui	r4,r4,4
    d4f0:	4a400104 	addi	r9,r9,4
    d4f4:	203ff81e 	bne	r4,zero,d4d8 <memcpy+0x78>
    d4f8:	413fff04 	addi	r4,r8,-4
    d4fc:	2008d0ba 	srli	r4,r4,2
    d500:	318000cc 	andi	r6,r6,3
    d504:	31ffffc4 	addi	r7,r6,-1
    d508:	21000044 	addi	r4,r4,1
    d50c:	200890ba 	slli	r4,r4,2
    d510:	1907883a 	add	r3,r3,r4
    d514:	290b883a 	add	r5,r5,r4
    d518:	3000041e 	bne	r6,zero,d52c <memcpy+0xcc>
    d51c:	f800283a 	ret
    d520:	2007883a 	mov	r3,r4
    d524:	31ffffc4 	addi	r7,r6,-1
    d528:	303ffc26 	beq	r6,zero,d51c <memcpy+0xbc>
    d52c:	39c00044 	addi	r7,r7,1
    d530:	19cf883a 	add	r7,r3,r7
    d534:	29800003 	ldbu	r6,0(r5)
    d538:	18c00044 	addi	r3,r3,1
    d53c:	29400044 	addi	r5,r5,1
    d540:	19bfffc5 	stb	r6,-1(r3)
    d544:	38fffb1e 	bne	r7,r3,d534 <memcpy+0xd4>
    d548:	f800283a 	ret
    d54c:	31ffffc4 	addi	r7,r6,-1
    d550:	2007883a 	mov	r3,r4
    d554:	003ff506 	br	d52c <memcpy+0xcc>
    d558:	400d883a 	mov	r6,r8
    d55c:	003ff106 	br	d524 <memcpy+0xc4>

0000d560 <_printf_r>:
    d560:	defffd04 	addi	sp,sp,-12
    d564:	2805883a 	mov	r2,r5
    d568:	dfc00015 	stw	ra,0(sp)
    d56c:	d9800115 	stw	r6,4(sp)
    d570:	d9c00215 	stw	r7,8(sp)
    d574:	21400217 	ldw	r5,8(r4)
    d578:	d9c00104 	addi	r7,sp,4
    d57c:	100d883a 	mov	r6,r2
    d580:	000f0bc0 	call	f0bc <___vfprintf_internal_r>
    d584:	dfc00017 	ldw	ra,0(sp)
    d588:	dec00304 	addi	sp,sp,12
    d58c:	f800283a 	ret

0000d590 <printf>:
    d590:	defffc04 	addi	sp,sp,-16
    d594:	dfc00015 	stw	ra,0(sp)
    d598:	d9400115 	stw	r5,4(sp)
    d59c:	d9800215 	stw	r6,8(sp)
    d5a0:	d9c00315 	stw	r7,12(sp)
    d5a4:	008000b4 	movhi	r2,2
    d5a8:	108eaa17 	ldw	r2,15016(r2)
    d5ac:	200b883a 	mov	r5,r4
    d5b0:	d9800104 	addi	r6,sp,4
    d5b4:	11000217 	ldw	r4,8(r2)
    d5b8:	00110c40 	call	110c4 <__vfprintf_internal>
    d5bc:	dfc00017 	ldw	ra,0(sp)
    d5c0:	dec00404 	addi	sp,sp,16
    d5c4:	f800283a 	ret

0000d5c8 <_puts_r>:
    d5c8:	defff504 	addi	sp,sp,-44
    d5cc:	dc000815 	stw	r16,32(sp)
    d5d0:	2021883a 	mov	r16,r4
    d5d4:	2809883a 	mov	r4,r5
    d5d8:	dc400915 	stw	r17,36(sp)
    d5dc:	dfc00a15 	stw	ra,40(sp)
    d5e0:	2823883a 	mov	r17,r5
    d5e4:	000d6fc0 	call	d6fc <strlen>
    d5e8:	11000044 	addi	r4,r2,1
    d5ec:	d8800515 	stw	r2,20(sp)
    d5f0:	00800044 	movi	r2,1
    d5f4:	00c000b4 	movhi	r3,2
    d5f8:	d8800715 	stw	r2,28(sp)
    d5fc:	d8800404 	addi	r2,sp,16
    d600:	18c5ae04 	addi	r3,r3,5816
    d604:	d8800115 	stw	r2,4(sp)
    d608:	00800084 	movi	r2,2
    d60c:	dc400415 	stw	r17,16(sp)
    d610:	d8c00615 	stw	r3,24(sp)
    d614:	d9000315 	stw	r4,12(sp)
    d618:	d8800215 	stw	r2,8(sp)
    d61c:	81400217 	ldw	r5,8(r16)
    d620:	80000226 	beq	r16,zero,d62c <_puts_r+0x64>
    d624:	80800e17 	ldw	r2,56(r16)
    d628:	10001326 	beq	r2,zero,d678 <_puts_r+0xb0>
    d62c:	2880030b 	ldhu	r2,12(r5)
    d630:	10c8000c 	andi	r3,r2,8192
    d634:	1800061e 	bne	r3,zero,d650 <_puts_r+0x88>
    d638:	28c01917 	ldw	r3,100(r5)
    d63c:	0137ffc4 	movi	r4,-8193
    d640:	10880014 	ori	r2,r2,8192
    d644:	1906703a 	and	r3,r3,r4
    d648:	2880030d 	sth	r2,12(r5)
    d64c:	28c01915 	stw	r3,100(r5)
    d650:	d9800104 	addi	r6,sp,4
    d654:	8009883a 	mov	r4,r16
    d658:	00137080 	call	13708 <__sfvwrite_r>
    d65c:	10000b1e 	bne	r2,zero,d68c <_puts_r+0xc4>
    d660:	00800284 	movi	r2,10
    d664:	dfc00a17 	ldw	ra,40(sp)
    d668:	dc400917 	ldw	r17,36(sp)
    d66c:	dc000817 	ldw	r16,32(sp)
    d670:	dec00b04 	addi	sp,sp,44
    d674:	f800283a 	ret
    d678:	8009883a 	mov	r4,r16
    d67c:	d9400015 	stw	r5,0(sp)
    d680:	00132a80 	call	132a8 <__sinit>
    d684:	d9400017 	ldw	r5,0(sp)
    d688:	003fe806 	br	d62c <_puts_r+0x64>
    d68c:	00bfffc4 	movi	r2,-1
    d690:	003ff406 	br	d664 <_puts_r+0x9c>

0000d694 <puts>:
    d694:	008000b4 	movhi	r2,2
    d698:	200b883a 	mov	r5,r4
    d69c:	110eaa17 	ldw	r4,15016(r2)
    d6a0:	000d5c81 	jmpi	d5c8 <_puts_r>

0000d6a4 <_sbrk_r>:
    d6a4:	defffe04 	addi	sp,sp,-8
    d6a8:	dc000015 	stw	r16,0(sp)
    d6ac:	008000b4 	movhi	r2,2
    d6b0:	2021883a 	mov	r16,r4
    d6b4:	2809883a 	mov	r4,r5
    d6b8:	dfc00115 	stw	ra,4(sp)
    d6bc:	1015ee15 	stw	zero,22456(r2)
    d6c0:	001a6280 	call	1a628 <sbrk>
    d6c4:	10ffffd8 	cmpnei	r3,r2,-1
    d6c8:	18000426 	beq	r3,zero,d6dc <_sbrk_r+0x38>
    d6cc:	dfc00117 	ldw	ra,4(sp)
    d6d0:	dc000017 	ldw	r16,0(sp)
    d6d4:	dec00204 	addi	sp,sp,8
    d6d8:	f800283a 	ret
    d6dc:	00c000b4 	movhi	r3,2
    d6e0:	18d5ee17 	ldw	r3,22456(r3)
    d6e4:	183ff926 	beq	r3,zero,d6cc <_sbrk_r+0x28>
    d6e8:	80c00015 	stw	r3,0(r16)
    d6ec:	dfc00117 	ldw	ra,4(sp)
    d6f0:	dc000017 	ldw	r16,0(sp)
    d6f4:	dec00204 	addi	sp,sp,8
    d6f8:	f800283a 	ret

0000d6fc <strlen>:
    d6fc:	208000cc 	andi	r2,r4,3
    d700:	10000926 	beq	r2,zero,d728 <strlen+0x2c>
    d704:	2005883a 	mov	r2,r4
    d708:	00000306 	br	d718 <strlen+0x1c>
    d70c:	10800044 	addi	r2,r2,1
    d710:	10c000cc 	andi	r3,r2,3
    d714:	18000526 	beq	r3,zero,d72c <strlen+0x30>
    d718:	10c00007 	ldb	r3,0(r2)
    d71c:	183ffb1e 	bne	r3,zero,d70c <strlen+0x10>
    d720:	1105c83a 	sub	r2,r2,r4
    d724:	f800283a 	ret
    d728:	2005883a 	mov	r2,r4
    d72c:	11400017 	ldw	r5,0(r2)
    d730:	01ffbff4 	movhi	r7,65279
    d734:	39ffbfc4 	addi	r7,r7,-257
    d738:	29c7883a 	add	r3,r5,r7
    d73c:	01a02074 	movhi	r6,32897
    d740:	014a303a 	nor	r5,zero,r5
    d744:	1946703a 	and	r3,r3,r5
    d748:	31a02004 	addi	r6,r6,-32640
    d74c:	1986703a 	and	r3,r3,r6
    d750:	1800071e 	bne	r3,zero,d770 <strlen+0x74>
    d754:	11400117 	ldw	r5,4(r2)
    d758:	10800104 	addi	r2,r2,4
    d75c:	29c7883a 	add	r3,r5,r7
    d760:	014a303a 	nor	r5,zero,r5
    d764:	1946703a 	and	r3,r3,r5
    d768:	1986703a 	and	r3,r3,r6
    d76c:	183ff926 	beq	r3,zero,d754 <strlen+0x58>
    d770:	10c00007 	ldb	r3,0(r2)
    d774:	183fea26 	beq	r3,zero,d720 <strlen+0x24>
    d778:	10c00047 	ldb	r3,1(r2)
    d77c:	10800044 	addi	r2,r2,1
    d780:	183fe726 	beq	r3,zero,d720 <strlen+0x24>
    d784:	10c00047 	ldb	r3,1(r2)
    d788:	10800044 	addi	r2,r2,1
    d78c:	183ffa1e 	bne	r3,zero,d778 <strlen+0x7c>
    d790:	003fe306 	br	d720 <strlen+0x24>

0000d794 <_strtod_l>:
    d794:	deffdf04 	addi	sp,sp,-132
    d798:	008000b4 	movhi	r2,2
    d79c:	dd401c15 	stw	r21,112(sp)
    d7a0:	15464c17 	ldw	r21,6448(r2)
    d7a4:	dc001715 	stw	r16,92(sp)
    d7a8:	2021883a 	mov	r16,r4
    d7ac:	a809883a 	mov	r4,r21
    d7b0:	df001f15 	stw	fp,124(sp)
    d7b4:	dd801d15 	stw	r22,116(sp)
    d7b8:	dd001b15 	stw	r20,108(sp)
    d7bc:	282d883a 	mov	r22,r5
    d7c0:	dc801915 	stw	r18,100(sp)
    d7c4:	dc401815 	stw	r17,96(sp)
    d7c8:	d9800315 	stw	r6,12(sp)
    d7cc:	dfc02015 	stw	ra,128(sp)
    d7d0:	ddc01e15 	stw	r23,120(sp)
    d7d4:	dcc01a15 	stw	r19,104(sp)
    d7d8:	3829883a 	mov	r20,r7
    d7dc:	d8001315 	stw	zero,76(sp)
    d7e0:	000d6fc0 	call	d6fc <strlen>
    d7e4:	100d883a 	mov	r6,r2
    d7e8:	0025883a 	mov	r18,zero
    d7ec:	0023883a 	mov	r17,zero
    d7f0:	dd801215 	stw	r22,72(sp)
    d7f4:	b039883a 	mov	fp,r22
    d7f8:	e4c00003 	ldbu	r19,0(fp)
    d7fc:	00c00074 	movhi	r3,1
    d800:	98803fcc 	andi	r2,r19,255
    d804:	100890ba 	slli	r4,r2,2
    d808:	10800ba8 	cmpgeui	r2,r2,46
    d80c:	1000311e 	bne	r2,zero,d8d4 <_strtod_l+0x140>
    d810:	20c7883a 	add	r3,r4,r3
    d814:	18b60717 	ldw	r2,-10212(r3)
    d818:	1000683a 	jmp	r2
    d81c:	0000d9a8 	cmpgeui	zero,zero,870
    d820:	0000d8d4 	movui	zero,867
    d824:	0000d8d4 	movui	zero,867
    d828:	0000d8d4 	movui	zero,867
    d82c:	0000d8d4 	movui	zero,867
    d830:	0000d8d4 	movui	zero,867
    d834:	0000d8d4 	movui	zero,867
    d838:	0000d8d4 	movui	zero,867
    d83c:	0000d8d4 	movui	zero,867
    d840:	0000d9f8 	rdprs	zero,zero,871
    d844:	0000d9f8 	rdprs	zero,zero,871
    d848:	0000d9f8 	rdprs	zero,zero,871
    d84c:	0000d9f8 	rdprs	zero,zero,871
    d850:	0000d9f8 	rdprs	zero,zero,871
    d854:	0000d8d4 	movui	zero,867
    d858:	0000d8d4 	movui	zero,867
    d85c:	0000d8d4 	movui	zero,867
    d860:	0000d8d4 	movui	zero,867
    d864:	0000d8d4 	movui	zero,867
    d868:	0000d8d4 	movui	zero,867
    d86c:	0000d8d4 	movui	zero,867
    d870:	0000d8d4 	movui	zero,867
    d874:	0000d8d4 	movui	zero,867
    d878:	0000d8d4 	movui	zero,867
    d87c:	0000d8d4 	movui	zero,867
    d880:	0000d8d4 	movui	zero,867
    d884:	0000d8d4 	movui	zero,867
    d888:	0000d8d4 	movui	zero,867
    d88c:	0000d8d4 	movui	zero,867
    d890:	0000d8d4 	movui	zero,867
    d894:	0000d8d4 	movui	zero,867
    d898:	0000d8d4 	movui	zero,867
    d89c:	0000d9f8 	rdprs	zero,zero,871
    d8a0:	0000d8d4 	movui	zero,867
    d8a4:	0000d8d4 	movui	zero,867
    d8a8:	0000d8d4 	movui	zero,867
    d8ac:	0000d8d4 	movui	zero,867
    d8b0:	0000d8d4 	movui	zero,867
    d8b4:	0000d8d4 	movui	zero,867
    d8b8:	0000d8d4 	movui	zero,867
    d8bc:	0000d8d4 	movui	zero,867
    d8c0:	0000d8d4 	movui	zero,867
    d8c4:	0000d8d4 	movui	zero,867
    d8c8:	0000e5a4 	muli	zero,zero,918
    d8cc:	0000d8d4 	movui	zero,867
    d8d0:	0000e584 	movi	zero,918
    d8d4:	9cc03fcc 	andi	r19,r19,255
    d8d8:	9cc0201c 	xori	r19,r19,128
    d8dc:	d8000415 	stw	zero,16(sp)
    d8e0:	9cffe004 	addi	r19,r19,-128
    d8e4:	98800c18 	cmpnei	r2,r19,48
    d8e8:	10004626 	beq	r2,zero,da04 <_strtod_l+0x270>
    d8ec:	0023883a 	mov	r17,zero
    d8f0:	98800c08 	cmpgei	r2,r19,48
    d8f4:	9825883a 	mov	r18,r19
    d8f8:	1003c226 	beq	r2,zero,e804 <_strtod_l+0x1070>
    d8fc:	e029883a 	mov	r20,fp
    d900:	0013883a 	mov	r9,zero
    d904:	0011883a 	mov	r8,zero
    d908:	002f883a 	mov	r23,zero
    d90c:	00000806 	br	d930 <_strtod_l+0x19c>
    d910:	1a3ff404 	addi	r8,r3,-48
    d914:	a5000044 	addi	r20,r20,1
    d918:	dd001215 	stw	r20,72(sp)
    d91c:	a4800007 	ldb	r18,0(r20)
    d920:	bdc00044 	addi	r23,r23,1
    d924:	90800c10 	cmplti	r2,r18,48
    d928:	9027883a 	mov	r19,r18
    d92c:	1000791e 	bne	r2,zero,db14 <_strtod_l+0x380>
    d930:	40c002a4 	muli	r3,r8,10
    d934:	488002a4 	muli	r2,r9,10
    d938:	99000e90 	cmplti	r4,r19,58
    d93c:	b9400248 	cmpgei	r5,r23,9
    d940:	1cc7883a 	add	r3,r3,r19
    d944:	14c5883a 	add	r2,r2,r19
    d948:	20000326 	beq	r4,zero,d958 <_strtod_l+0x1c4>
    d94c:	283ff026 	beq	r5,zero,d910 <_strtod_l+0x17c>
    d950:	127ff404 	addi	r9,r2,-48
    d954:	003fef06 	br	d914 <_strtod_l+0x180>
    d958:	a80b883a 	mov	r5,r21
    d95c:	a009883a 	mov	r4,r20
    d960:	da400615 	stw	r9,24(sp)
    d964:	da000515 	stw	r8,20(sp)
    d968:	d9800715 	stw	r6,28(sp)
    d96c:	00168800 	call	16880 <strncmp>
    d970:	da000517 	ldw	r8,20(sp)
    d974:	da400617 	ldw	r9,24(sp)
    d978:	10003026 	beq	r2,zero,da3c <_strtod_l+0x2a8>
    d97c:	9cc01960 	cmpeqi	r19,r19,101
    d980:	b82b883a 	mov	r21,r23
    d984:	0005883a 	mov	r2,zero
    d988:	0029883a 	mov	r20,zero
    d98c:	000b883a 	mov	r5,zero
    d990:	9800021e 	bne	r19,zero,d99c <_strtod_l+0x208>
    d994:	90c01160 	cmpeqi	r3,r18,69
    d998:	18006c26 	beq	r3,zero,db4c <_strtod_l+0x3b8>
    d99c:	b800a61e 	bne	r23,zero,dc38 <_strtod_l+0x4a4>
    d9a0:	8886b03a 	or	r3,r17,r2
    d9a4:	1800a31e 	bne	r3,zero,dc34 <_strtod_l+0x4a0>
    d9a8:	d8800317 	ldw	r2,12(sp)
    d9ac:	10000226 	beq	r2,zero,d9b8 <_strtod_l+0x224>
    d9b0:	d8800317 	ldw	r2,12(sp)
    d9b4:	15800015 	stw	r22,0(r2)
    d9b8:	002d883a 	mov	r22,zero
    d9bc:	002b883a 	mov	r21,zero
    d9c0:	b005883a 	mov	r2,r22
    d9c4:	a807883a 	mov	r3,r21
    d9c8:	dfc02017 	ldw	ra,128(sp)
    d9cc:	df001f17 	ldw	fp,124(sp)
    d9d0:	ddc01e17 	ldw	r23,120(sp)
    d9d4:	dd801d17 	ldw	r22,116(sp)
    d9d8:	dd401c17 	ldw	r21,112(sp)
    d9dc:	dd001b17 	ldw	r20,108(sp)
    d9e0:	dcc01a17 	ldw	r19,104(sp)
    d9e4:	dc801917 	ldw	r18,100(sp)
    d9e8:	dc401817 	ldw	r17,96(sp)
    d9ec:	dc001717 	ldw	r16,92(sp)
    d9f0:	dec02104 	addi	sp,sp,132
    d9f4:	f800283a 	ret
    d9f8:	e7000044 	addi	fp,fp,1
    d9fc:	df001215 	stw	fp,72(sp)
    da00:	003f7d06 	br	d7f8 <_strtod_l+0x64>
    da04:	e0800043 	ldbu	r2,1(fp)
    da08:	e5c00044 	addi	r23,fp,1
    da0c:	108037cc 	andi	r2,r2,223
    da10:	10801618 	cmpnei	r2,r2,88
    da14:	10035b26 	beq	r2,zero,e784 <_strtod_l+0xff0>
    da18:	ddc01215 	stw	r23,72(sp)
    da1c:	bcc00007 	ldb	r19,0(r23)
    da20:	b839883a 	mov	fp,r23
    da24:	bdc00044 	addi	r23,r23,1
    da28:	98800c20 	cmpeqi	r2,r19,48
    da2c:	103ffa1e 	bne	r2,zero,da18 <_strtod_l+0x284>
    da30:	9800ca26 	beq	r19,zero,dd5c <_strtod_l+0x5c8>
    da34:	04400044 	movi	r17,1
    da38:	003fad06 	br	d8f0 <_strtod_l+0x15c>
    da3c:	d9800717 	ldw	r6,28(sp)
    da40:	a18d883a 	add	r6,r20,r6
    da44:	d9801215 	stw	r6,72(sp)
    da48:	34800007 	ldb	r18,0(r6)
    da4c:	b803dd1e 	bne	r23,zero,e9c4 <_strtod_l+0x1230>
    da50:	90800c18 	cmpnei	r2,r18,48
    da54:	1003c71e 	bne	r2,zero,e974 <_strtod_l+0x11e0>
    da58:	d8c01217 	ldw	r3,72(sp)
    da5c:	01400044 	movi	r5,1
    da60:	28cbc83a 	sub	r5,r5,r3
    da64:	1945883a 	add	r2,r3,r5
    da68:	18c00044 	addi	r3,r3,1
    da6c:	d8c01215 	stw	r3,72(sp)
    da70:	1c800007 	ldb	r18,0(r3)
    da74:	91000c20 	cmpeqi	r4,r18,48
    da78:	203ffa1e 	bne	r4,zero,da64 <_strtod_l+0x2d0>
    da7c:	90fff3c4 	addi	r3,r18,-49
    da80:	18c00268 	cmpgeui	r3,r3,9
    da84:	18026a1e 	bne	r3,zero,e430 <_strtod_l+0xc9c>
    da88:	da801217 	ldw	r10,72(sp)
    da8c:	94bff404 	addi	r18,r18,-48
    da90:	15000044 	addi	r20,r2,1
    da94:	5039883a 	mov	fp,r10
    da98:	05c00044 	movi	r23,1
    da9c:	002b883a 	mov	r21,zero
    daa0:	420002a4 	muli	r8,r8,10
    daa4:	0005883a 	mov	r2,zero
    daa8:	9211883a 	add	r8,r18,r8
    daac:	50c00044 	addi	r3,r10,1
    dab0:	d8c01215 	stw	r3,72(sp)
    dab4:	54800047 	ldb	r18,1(r10)
    dab8:	917ff404 	addi	r5,r18,-48
    dabc:	28c002b0 	cmpltui	r3,r5,10
    dac0:	18023326 	beq	r3,zero,e390 <_strtod_l+0xbfc>
    dac4:	da801217 	ldw	r10,72(sp)
    dac8:	10800044 	addi	r2,r2,1
    dacc:	2825883a 	mov	r18,r5
    dad0:	283ff626 	beq	r5,zero,daac <_strtod_l+0x318>
    dad4:	b8c00044 	addi	r3,r23,1
    dad8:	11800060 	cmpeqi	r6,r2,1
    dadc:	1809883a 	mov	r4,r3
    dae0:	a0a9883a 	add	r20,r20,r2
    dae4:	3003431e 	bne	r6,zero,e7f4 <_strtod_l+0x1060>
    dae8:	15c5883a 	add	r2,r2,r23
    daec:	11ffffc4 	addi	r7,r2,-1
    daf0:	b9000268 	cmpgeui	r4,r23,9
    daf4:	b805883a 	mov	r2,r23
    daf8:	19800448 	cmpgei	r6,r3,17
    dafc:	182f883a 	mov	r23,r3
    db00:	2003381e 	bne	r4,zero,e7e4 <_strtod_l+0x1050>
    db04:	420002a4 	muli	r8,r8,10
    db08:	38c33926 	beq	r7,r3,e7f0 <_strtod_l+0x105c>
    db0c:	18c00044 	addi	r3,r3,1
    db10:	003ff706 	br	daf0 <_strtod_l+0x35c>
    db14:	a80b883a 	mov	r5,r21
    db18:	a009883a 	mov	r4,r20
    db1c:	da000715 	stw	r8,28(sp)
    db20:	da400615 	stw	r9,24(sp)
    db24:	d9800515 	stw	r6,20(sp)
    db28:	00168800 	call	16880 <strncmp>
    db2c:	d9800517 	ldw	r6,20(sp)
    db30:	da400617 	ldw	r9,24(sp)
    db34:	da000717 	ldw	r8,28(sp)
    db38:	10009226 	beq	r2,zero,dd84 <_strtod_l+0x5f0>
    db3c:	b82b883a 	mov	r21,r23
    db40:	0029883a 	mov	r20,zero
    db44:	0005883a 	mov	r2,zero
    db48:	000b883a 	mov	r5,zero
    db4c:	0027883a 	mov	r19,zero
    db50:	b8006b26 	beq	r23,zero,dd00 <_strtod_l+0x56c>
    db54:	9d05c83a 	sub	r2,r19,r20
    db58:	d8800915 	stw	r2,36(sp)
    db5c:	a800011e 	bne	r21,zero,db64 <_strtod_l+0x3d0>
    db60:	b82b883a 	mov	r21,r23
    db64:	b8800450 	cmplti	r2,r23,17
    db68:	b82d883a 	mov	r22,r23
    db6c:	1000011e 	bne	r2,zero,db74 <_strtod_l+0x3e0>
    db70:	05800404 	movi	r22,16
    db74:	4009883a 	mov	r4,r8
    db78:	da000515 	stw	r8,20(sp)
    db7c:	da400615 	stw	r9,24(sp)
    db80:	000c9040 	call	c904 <__floatunsidf>
    db84:	b9000290 	cmplti	r4,r23,10
    db88:	da000517 	ldw	r8,20(sp)
    db8c:	1025883a 	mov	r18,r2
    db90:	1823883a 	mov	r17,r3
    db94:	2000171e 	bne	r4,zero,dbf4 <_strtod_l+0x460>
    db98:	b0bffdc4 	addi	r2,r22,-9
    db9c:	100690fa 	slli	r3,r2,3
    dba0:	008000b4 	movhi	r2,2
    dba4:	10867904 	addi	r2,r2,6628
    dba8:	10c5883a 	add	r2,r2,r3
    dbac:	11800017 	ldw	r6,0(r2)
    dbb0:	11c00117 	ldw	r7,4(r2)
    dbb4:	880b883a 	mov	r5,r17
    dbb8:	9009883a 	mov	r4,r18
    dbbc:	000b7f80 	call	b7f8 <__muldf3>
    dbc0:	da400617 	ldw	r9,24(sp)
    dbc4:	1025883a 	mov	r18,r2
    dbc8:	1823883a 	mov	r17,r3
    dbcc:	4809883a 	mov	r4,r9
    dbd0:	000c9040 	call	c904 <__floatunsidf>
    dbd4:	9009883a 	mov	r4,r18
    dbd8:	880b883a 	mov	r5,r17
    dbdc:	100d883a 	mov	r6,r2
    dbe0:	180f883a 	mov	r7,r3
    dbe4:	000a4680 	call	a468 <__adddf3>
    dbe8:	da000517 	ldw	r8,20(sp)
    dbec:	1025883a 	mov	r18,r2
    dbf0:	1823883a 	mov	r17,r3
    dbf4:	b8800408 	cmpgei	r2,r23,16
    dbf8:	1000681e 	bne	r2,zero,dd9c <_strtod_l+0x608>
    dbfc:	9d05c83a 	sub	r2,r19,r20
    dc00:	1002f526 	beq	r2,zero,e7d8 <_strtod_l+0x1044>
    dc04:	9d05c83a 	sub	r2,r19,r20
    dc08:	0082720e 	bge	zero,r2,e5d4 <_strtod_l+0xe40>
    dc0c:	108005c8 	cmpgei	r2,r2,23
    dc10:	10035a26 	beq	r2,zero,e97c <_strtod_l+0x11e8>
    dc14:	00800944 	movi	r2,37
    dc18:	15c5c83a 	sub	r2,r2,r23
    dc1c:	9d07c83a 	sub	r3,r19,r20
    dc20:	10c36b0e 	bge	r2,r3,e9d0 <_strtod_l+0x123c>
    dc24:	bdadc83a 	sub	r22,r23,r22
    dc28:	9d05c83a 	sub	r2,r19,r20
    dc2c:	b0ad883a 	add	r22,r22,r2
    dc30:	00005e06 	br	ddac <_strtod_l+0x618>
    dc34:	002f883a 	mov	r23,zero
    dc38:	dd801217 	ldw	r22,72(sp)
    dc3c:	b0c00044 	addi	r3,r22,1
    dc40:	d8c01215 	stw	r3,72(sp)
    dc44:	b4800047 	ldb	r18,1(r22)
    dc48:	90c00ae0 	cmpeqi	r3,r18,43
    dc4c:	1801f61e 	bne	r3,zero,e428 <_strtod_l+0xc94>
    dc50:	90c00b60 	cmpeqi	r3,r18,45
    dc54:	1801be1e 	bne	r3,zero,e350 <_strtod_l+0xbbc>
    dc58:	000d883a 	mov	r6,zero
    dc5c:	90fff404 	addi	r3,r18,-48
    dc60:	18c002a8 	cmpgeui	r3,r3,10
    dc64:	1801b71e 	bne	r3,zero,e344 <_strtod_l+0xbb0>
    dc68:	90c00c18 	cmpnei	r3,r18,48
    dc6c:	1800071e 	bne	r3,zero,dc8c <_strtod_l+0x4f8>
    dc70:	d8c01217 	ldw	r3,72(sp)
    dc74:	18c00044 	addi	r3,r3,1
    dc78:	d8c01215 	stw	r3,72(sp)
    dc7c:	1c800007 	ldb	r18,0(r3)
    dc80:	18c00044 	addi	r3,r3,1
    dc84:	91000c20 	cmpeqi	r4,r18,48
    dc88:	203ffb1e 	bne	r4,zero,dc78 <_strtod_l+0x4e4>
    dc8c:	90fff3c4 	addi	r3,r18,-49
    dc90:	18c00268 	cmpgeui	r3,r3,9
    dc94:	183fad1e 	bne	r3,zero,db4c <_strtod_l+0x3b8>
    dc98:	dac01217 	ldw	r11,72(sp)
    dc9c:	94fff404 	addi	r19,r18,-48
    dca0:	59c00044 	addi	r7,r11,1
    dca4:	d9c01215 	stw	r7,72(sp)
    dca8:	5c800047 	ldb	r18,1(r11)
    dcac:	90c00c08 	cmpgei	r3,r18,48
    dcb0:	1800071e 	bne	r3,zero,dcd0 <_strtod_l+0x53c>
    dcb4:	0002de06 	br	e830 <_strtod_l+0x109c>
    dcb8:	39c00044 	addi	r7,r7,1
    dcbc:	d9c01215 	stw	r7,72(sp)
    dcc0:	54800047 	ldb	r18,1(r10)
    dcc4:	1cfff404 	addi	r19,r3,-48
    dcc8:	90c00c08 	cmpgei	r3,r18,48
    dccc:	18000526 	beq	r3,zero,dce4 <_strtod_l+0x550>
    dcd0:	98c002a4 	muli	r3,r19,10
    dcd4:	91000e90 	cmplti	r4,r18,58
    dcd8:	3815883a 	mov	r10,r7
    dcdc:	1c87883a 	add	r3,r3,r18
    dce0:	203ff51e 	bne	r4,zero,dcb8 <_strtod_l+0x524>
    dce4:	3ac7c83a 	sub	r3,r7,r11
    dce8:	18c00248 	cmpgei	r3,r3,9
    dcec:	1802d026 	beq	r3,zero,e830 <_strtod_l+0x109c>
    dcf0:	04d387c4 	movi	r19,19999
    dcf4:	303f9626 	beq	r6,zero,db50 <_strtod_l+0x3bc>
    dcf8:	04e7c83a 	sub	r19,zero,r19
    dcfc:	b83f951e 	bne	r23,zero,db54 <_strtod_l+0x3c0>
    dd00:	8884b03a 	or	r2,r17,r2
    dd04:	1000151e 	bne	r2,zero,dd5c <_strtod_l+0x5c8>
    dd08:	283f271e 	bne	r5,zero,d9a8 <_strtod_l+0x214>
    dd0c:	90801a60 	cmpeqi	r2,r18,105
    dd10:	1002cc1e 	bne	r2,zero,e844 <_strtod_l+0x10b0>
    dd14:	90801a88 	cmpgei	r2,r18,106
    dd18:	1002421e 	bne	r2,zero,e624 <_strtod_l+0xe90>
    dd1c:	90801260 	cmpeqi	r2,r18,73
    dd20:	1002c81e 	bne	r2,zero,e844 <_strtod_l+0x10b0>
    dd24:	948013a0 	cmpeqi	r18,r18,78
    dd28:	903f1f26 	beq	r18,zero,d9a8 <_strtod_l+0x214>
    dd2c:	014000b4 	movhi	r5,2
    dd30:	2945b204 	addi	r5,r5,5832
    dd34:	d9001204 	addi	r4,sp,72
    dd38:	001466c0 	call	1466c <__match>
    dd3c:	103f1a26 	beq	r2,zero,d9a8 <_strtod_l+0x214>
    dd40:	d8801217 	ldw	r2,72(sp)
    dd44:	10800007 	ldb	r2,0(r2)
    dd48:	10800a18 	cmpnei	r2,r2,40
    dd4c:	1003b526 	beq	r2,zero,ec24 <_strtod_l+0x1490>
    dd50:	002d883a 	mov	r22,zero
    dd54:	055ffe34 	movhi	r21,32760
    dd58:	00000206 	br	dd64 <_strtod_l+0x5d0>
    dd5c:	002d883a 	mov	r22,zero
    dd60:	002b883a 	mov	r21,zero
    dd64:	d8c00317 	ldw	r3,12(sp)
    dd68:	18000226 	beq	r3,zero,dd74 <_strtod_l+0x5e0>
    dd6c:	d8801217 	ldw	r2,72(sp)
    dd70:	18800015 	stw	r2,0(r3)
    dd74:	d8800417 	ldw	r2,16(sp)
    dd78:	103f1126 	beq	r2,zero,d9c0 <_strtod_l+0x22c>
    dd7c:	ad60003c 	xorhi	r21,r21,32768
    dd80:	003f0f06 	br	d9c0 <_strtod_l+0x22c>
    dd84:	a18d883a 	add	r6,r20,r6
    dd88:	d9801215 	stw	r6,72(sp)
    dd8c:	34800007 	ldb	r18,0(r6)
    dd90:	b82b883a 	mov	r21,r23
    dd94:	0029883a 	mov	r20,zero
    dd98:	003f4706 	br	dab8 <_strtod_l+0x324>
    dd9c:	bdadc83a 	sub	r22,r23,r22
    dda0:	9d05c83a 	sub	r2,r19,r20
    dda4:	b0ad883a 	add	r22,r22,r2
    dda8:	0582210e 	bge	zero,r22,e630 <_strtod_l+0xe9c>
    ddac:	b08003cc 	andi	r2,r22,15
    ddb0:	10000d26 	beq	r2,zero,dde8 <_strtod_l+0x654>
    ddb4:	100690fa 	slli	r3,r2,3
    ddb8:	008000b4 	movhi	r2,2
    ddbc:	10867904 	addi	r2,r2,6628
    ddc0:	10c5883a 	add	r2,r2,r3
    ddc4:	11000017 	ldw	r4,0(r2)
    ddc8:	11400117 	ldw	r5,4(r2)
    ddcc:	900d883a 	mov	r6,r18
    ddd0:	880f883a 	mov	r7,r17
    ddd4:	da000515 	stw	r8,20(sp)
    ddd8:	000b7f80 	call	b7f8 <__muldf3>
    dddc:	da000517 	ldw	r8,20(sp)
    dde0:	1025883a 	mov	r18,r2
    dde4:	1823883a 	mov	r17,r3
    dde8:	027ffc04 	movi	r9,-16
    ddec:	b26c703a 	and	r22,r22,r9
    ddf0:	b0003f26 	beq	r22,zero,def0 <_strtod_l+0x75c>
    ddf4:	b0804d50 	cmplti	r2,r22,309
    ddf8:	10025d26 	beq	r2,zero,e770 <_strtod_l+0xfdc>
    ddfc:	b013d13a 	srai	r9,r22,4
    de00:	48800090 	cmplti	r2,r9,2
    de04:	1003821e 	bne	r2,zero,ec10 <_strtod_l+0x147c>
    de08:	008000b4 	movhi	r2,2
    de0c:	10866f04 	addi	r2,r2,6588
    de10:	002d883a 	mov	r22,zero
    de14:	9009883a 	mov	r4,r18
    de18:	880b883a 	mov	r5,r17
    de1c:	dc000715 	stw	r16,28(sp)
    de20:	dc800815 	stw	r18,32(sp)
    de24:	d8800515 	stw	r2,20(sp)
    de28:	b025883a 	mov	r18,r22
    de2c:	0007883a 	mov	r3,zero
    de30:	882d883a 	mov	r22,r17
    de34:	da000615 	stw	r8,24(sp)
    de38:	4821883a 	mov	r16,r9
    de3c:	1023883a 	mov	r17,r2
    de40:	8080004c 	andi	r2,r16,1
    de44:	8021d07a 	srai	r16,r16,1
    de48:	10000626 	beq	r2,zero,de64 <_strtod_l+0x6d0>
    de4c:	89800017 	ldw	r6,0(r17)
    de50:	89c00117 	ldw	r7,4(r17)
    de54:	000b7f80 	call	b7f8 <__muldf3>
    de58:	180b883a 	mov	r5,r3
    de5c:	1009883a 	mov	r4,r2
    de60:	00c00044 	movi	r3,1
    de64:	81800058 	cmpnei	r6,r16,1
    de68:	94800044 	addi	r18,r18,1
    de6c:	8c400204 	addi	r17,r17,8
    de70:	303ff31e 	bne	r6,zero,de40 <_strtod_l+0x6ac>
    de74:	18c03fcc 	andi	r3,r3,255
    de78:	b023883a 	mov	r17,r22
    de7c:	da000617 	ldw	r8,24(sp)
    de80:	902d883a 	mov	r22,r18
    de84:	dc000717 	ldw	r16,28(sp)
    de88:	dc800817 	ldw	r18,32(sp)
    de8c:	18000226 	beq	r3,zero,de98 <_strtod_l+0x704>
    de90:	2025883a 	mov	r18,r4
    de94:	2823883a 	mov	r17,r5
    de98:	d8800517 	ldw	r2,20(sp)
    de9c:	b01690fa 	slli	r11,r22,3
    dea0:	01ff2c34 	movhi	r7,64688
    dea4:	900d883a 	mov	r6,r18
    dea8:	12d7883a 	add	r11,r2,r11
    deac:	59000017 	ldw	r4,0(r11)
    deb0:	59400117 	ldw	r5,4(r11)
    deb4:	89cf883a 	add	r7,r17,r7
    deb8:	da000615 	stw	r8,24(sp)
    debc:	000b7f80 	call	b7f8 <__muldf3>
    dec0:	191ffc2c 	andhi	r4,r3,32752
    dec4:	015f2834 	movhi	r5,31904
    dec8:	1025883a 	mov	r18,r2
    decc:	29022836 	bltu	r5,r4,e770 <_strtod_l+0xfdc>
    ded0:	009f2434 	movhi	r2,31888
    ded4:	da000617 	ldw	r8,24(sp)
    ded8:	11030e2e 	bgeu	r2,r4,eb14 <_strtod_l+0x1380>
    dedc:	045ffc34 	movhi	r17,32752
    dee0:	8c7fffc4 	addi	r17,r17,-1
    dee4:	04bfffc4 	movi	r18,-1
    dee8:	d8001015 	stw	zero,64(sp)
    deec:	00000106 	br	def4 <_strtod_l+0x760>
    def0:	d8001015 	stw	zero,64(sp)
    def4:	da000015 	stw	r8,0(sp)
    def8:	b80f883a 	mov	r7,r23
    defc:	a80d883a 	mov	r6,r21
    df00:	e00b883a 	mov	r5,fp
    df04:	8009883a 	mov	r4,r16
    df08:	00151ec0 	call	151ec <__s2b>
    df0c:	d8800715 	stw	r2,28(sp)
    df10:	10021726 	beq	r2,zero,e770 <_strtod_l+0xfdc>
    df14:	d8c00917 	ldw	r3,36(sp)
    df18:	a4e7c83a 	sub	r19,r20,r19
    df1c:	1805d7fa 	srai	r2,r3,31
    df20:	d8c00815 	stw	r3,32(sp)
    df24:	9884703a 	and	r2,r19,r2
    df28:	d8800515 	stw	r2,20(sp)
    df2c:	18019f16 	blt	r3,zero,e5ac <_strtod_l+0xe18>
    df30:	d8c00717 	ldw	r3,28(sp)
    df34:	00800434 	movhi	r2,16
    df38:	dd401017 	ldw	r21,64(sp)
    df3c:	18c00304 	addi	r3,r3,12
    df40:	10bfffc4 	addi	r2,r2,-1
    df44:	002f883a 	mov	r23,zero
    df48:	0027883a 	mov	r19,zero
    df4c:	d8c00d15 	stw	r3,52(sp)
    df50:	d8801115 	stw	r2,68(sp)
    df54:	dd800717 	ldw	r22,28(sp)
    df58:	8009883a 	mov	r4,r16
    df5c:	b1400117 	ldw	r5,4(r22)
    df60:	0014fec0 	call	14fec <_Balloc>
    df64:	1029883a 	mov	r20,r2
    df68:	1000d126 	beq	r2,zero,e2b0 <_strtod_l+0xb1c>
    df6c:	b1800417 	ldw	r6,16(r22)
    df70:	d9400d17 	ldw	r5,52(sp)
    df74:	11000304 	addi	r4,r2,12
    df78:	31800084 	addi	r6,r6,2
    df7c:	300c90ba 	slli	r6,r6,2
    df80:	dc800b15 	stw	r18,44(sp)
    df84:	dc400a15 	stw	r17,40(sp)
    df88:	000d4600 	call	d460 <memcpy>
    df8c:	d8801504 	addi	r2,sp,84
    df90:	d9c01404 	addi	r7,sp,80
    df94:	d8800015 	stw	r2,0(sp)
    df98:	900b883a 	mov	r5,r18
    df9c:	880d883a 	mov	r6,r17
    dfa0:	8009883a 	mov	r4,r16
    dfa4:	0015df40 	call	15df4 <__d2b>
    dfa8:	d8801315 	stw	r2,76(sp)
    dfac:	1000b526 	beq	r2,zero,e284 <_strtod_l+0xaf0>
    dfb0:	01400044 	movi	r5,1
    dfb4:	8009883a 	mov	r4,r16
    dfb8:	00154380 	call	15438 <__i2b>
    dfbc:	1027883a 	mov	r19,r2
    dfc0:	1000bb26 	beq	r2,zero,e2b0 <_strtod_l+0xb1c>
    dfc4:	d8801417 	ldw	r2,80(sp)
    dfc8:	1000d216 	blt	r2,zero,e314 <_strtod_l+0xb80>
    dfcc:	d8c00517 	ldw	r3,20(sp)
    dfd0:	d9c00817 	ldw	r7,32(sp)
    dfd4:	10f9883a 	add	fp,r2,r3
    dfd8:	d9001517 	ldw	r4,84(sp)
    dfdc:	1545c83a 	sub	r2,r2,r21
    dfe0:	00c00d84 	movi	r3,54
    dfe4:	1105883a 	add	r2,r2,r4
    dfe8:	10bfffc4 	addi	r2,r2,-1
    dfec:	117f0088 	cmpgei	r5,r2,-1022
    dff0:	1907c83a 	sub	r3,r3,r4
    dff4:	2800b71e 	bne	r5,zero,e2d4 <_strtod_l+0xb40>
    dff8:	05bf0084 	movi	r22,-1022
    dffc:	b089c83a 	sub	r4,r22,r2
    e000:	21400808 	cmpgei	r5,r4,32
    e004:	1907c83a 	sub	r3,r3,r4
    e008:	2800c61e 	bne	r5,zero,e324 <_strtod_l+0xb90>
    e00c:	05800044 	movi	r22,1
    e010:	b104983a 	sll	r2,r22,r4
    e014:	d8000e15 	stw	zero,56(sp)
    e018:	d8800c15 	stw	r2,48(sp)
    e01c:	38cf883a 	add	r7,r7,r3
    e020:	e0c7883a 	add	r3,fp,r3
    e024:	a9ed883a 	add	r22,r21,r7
    e028:	e005883a 	mov	r2,fp
    e02c:	1f00010e 	bge	r3,fp,e034 <_strtod_l+0x8a0>
    e030:	1805883a 	mov	r2,r3
    e034:	b080010e 	bge	r22,r2,e03c <_strtod_l+0x8a8>
    e038:	b005883a 	mov	r2,r22
    e03c:	0080030e 	bge	zero,r2,e04c <_strtod_l+0x8b8>
    e040:	1887c83a 	sub	r3,r3,r2
    e044:	b0adc83a 	sub	r22,r22,r2
    e048:	e0b9c83a 	sub	fp,fp,r2
    e04c:	d9800517 	ldw	r6,20(sp)
    e050:	01806f16 	blt	zero,r6,e210 <_strtod_l+0xa7c>
    e054:	00c08516 	blt	zero,r3,e26c <_strtod_l+0xad8>
    e058:	d8800917 	ldw	r2,36(sp)
    e05c:	00808e16 	blt	zero,r2,e298 <_strtod_l+0xb04>
    e060:	05809516 	blt	zero,r22,e2b8 <_strtod_l+0xb24>
    e064:	0700060e 	bge	zero,fp,e080 <_strtod_l+0x8ec>
    e068:	980b883a 	mov	r5,r19
    e06c:	e00d883a 	mov	r6,fp
    e070:	8009883a 	mov	r4,r16
    e074:	00158840 	call	15884 <__lshift>
    e078:	1027883a 	mov	r19,r2
    e07c:	10008c26 	beq	r2,zero,e2b0 <_strtod_l+0xb1c>
    e080:	d9401317 	ldw	r5,76(sp)
    e084:	a00d883a 	mov	r6,r20
    e088:	8009883a 	mov	r4,r16
    e08c:	0015a640 	call	15a64 <__mdiff>
    e090:	102f883a 	mov	r23,r2
    e094:	10008626 	beq	r2,zero,e2b0 <_strtod_l+0xb1c>
    e098:	10800317 	ldw	r2,12(r2)
    e09c:	980b883a 	mov	r5,r19
    e0a0:	b8000315 	stw	zero,12(r23)
    e0a4:	b809883a 	mov	r4,r23
    e0a8:	d8800615 	stw	r2,24(sp)
    e0ac:	0015a0c0 	call	15a0c <__mcmp>
    e0b0:	1002a916 	blt	r2,zero,eb58 <_strtod_l+0x13c4>
    e0b4:	10026026 	beq	r2,zero,ea38 <_strtod_l+0x12a4>
    e0b8:	980b883a 	mov	r5,r19
    e0bc:	b809883a 	mov	r4,r23
    e0c0:	0015f580 	call	15f58 <__ratio>
    e0c4:	000d883a 	mov	r6,zero
    e0c8:	01d00034 	movhi	r7,16384
    e0cc:	1009883a 	mov	r4,r2
    e0d0:	180b883a 	mov	r5,r3
    e0d4:	1039883a 	mov	fp,r2
    e0d8:	182d883a 	mov	r22,r3
    e0dc:	000b7100 	call	b710 <__ledf2>
    e0e0:	00808016 	blt	zero,r2,e2e4 <_strtod_l+0xb50>
    e0e4:	d8800617 	ldw	r2,24(sp)
    e0e8:	10009e26 	beq	r2,zero,e364 <_strtod_l+0xbd0>
    e0ec:	0011883a 	mov	r8,zero
    e0f0:	024ffc34 	movhi	r9,16368
    e0f4:	d8000c15 	stw	zero,48(sp)
    e0f8:	058ffc34 	movhi	r22,16368
    e0fc:	8f1ffc2c 	andhi	fp,r17,32752
    e100:	009ff834 	movhi	r2,32736
    e104:	e080a626 	beq	fp,r2,e3a0 <_strtod_l+0xc0c>
    e108:	a8001d26 	beq	r21,zero,e180 <_strtod_l+0x9ec>
    e10c:	0081a834 	movhi	r2,1696
    e110:	17001b36 	bltu	r2,fp,e180 <_strtod_l+0x9ec>
    e114:	d9000c17 	ldw	r4,48(sp)
    e118:	01d07834 	movhi	r7,16864
    e11c:	01bff034 	movhi	r6,65472
    e120:	39ffffc4 	addi	r7,r7,-1
    e124:	b00b883a 	mov	r5,r22
    e128:	da400b15 	stw	r9,44(sp)
    e12c:	da000a15 	stw	r8,40(sp)
    e130:	000b7100 	call	b710 <__ledf2>
    e134:	da000a17 	ldw	r8,40(sp)
    e138:	da400b17 	ldw	r9,44(sp)
    e13c:	00800d16 	blt	zero,r2,e174 <_strtod_l+0x9e0>
    e140:	d9000c17 	ldw	r4,48(sp)
    e144:	b00b883a 	mov	r5,r22
    e148:	0018d0c0 	call	18d0c <__fixunsdfsi>
    e14c:	1009883a 	mov	r4,r2
    e150:	1000011e 	bne	r2,zero,e158 <_strtod_l+0x9c4>
    e154:	01000044 	movi	r4,1
    e158:	000c9040 	call	c904 <__floatunsidf>
    e15c:	1011883a 	mov	r8,r2
    e160:	d8800c15 	stw	r2,48(sp)
    e164:	d8800617 	ldw	r2,24(sp)
    e168:	182d883a 	mov	r22,r3
    e16c:	1001b31e 	bne	r2,zero,e83c <_strtod_l+0x10a8>
    e170:	1a60003c 	xorhi	r9,r3,32768
    e174:	0081ac34 	movhi	r2,1712
    e178:	4893883a 	add	r9,r9,r2
    e17c:	4f13c83a 	sub	r9,r9,fp
    e180:	9009883a 	mov	r4,r18
    e184:	880b883a 	mov	r5,r17
    e188:	da400b15 	stw	r9,44(sp)
    e18c:	da000a15 	stw	r8,40(sp)
    e190:	0015c900 	call	15c90 <__ulp>
    e194:	da000a17 	ldw	r8,40(sp)
    e198:	da400b17 	ldw	r9,44(sp)
    e19c:	100d883a 	mov	r6,r2
    e1a0:	4009883a 	mov	r4,r8
    e1a4:	480b883a 	mov	r5,r9
    e1a8:	180f883a 	mov	r7,r3
    e1ac:	000b7f80 	call	b7f8 <__muldf3>
    e1b0:	900d883a 	mov	r6,r18
    e1b4:	880f883a 	mov	r7,r17
    e1b8:	1009883a 	mov	r4,r2
    e1bc:	180b883a 	mov	r5,r3
    e1c0:	000a4680 	call	a468 <__adddf3>
    e1c4:	1823883a 	mov	r17,r3
    e1c8:	1025883a 	mov	r18,r2
    e1cc:	1811883a 	mov	r8,r3
    e1d0:	a800021e 	bne	r21,zero,e1dc <_strtod_l+0xa48>
    e1d4:	409ffc2c 	andhi	r2,r8,32752
    e1d8:	e0809b26 	beq	fp,r2,e448 <_strtod_l+0xcb4>
    e1dc:	d9401317 	ldw	r5,76(sp)
    e1e0:	8009883a 	mov	r4,r16
    e1e4:	00150900 	call	15090 <_Bfree>
    e1e8:	a00b883a 	mov	r5,r20
    e1ec:	8009883a 	mov	r4,r16
    e1f0:	00150900 	call	15090 <_Bfree>
    e1f4:	980b883a 	mov	r5,r19
    e1f8:	8009883a 	mov	r4,r16
    e1fc:	00150900 	call	15090 <_Bfree>
    e200:	b80b883a 	mov	r5,r23
    e204:	8009883a 	mov	r4,r16
    e208:	00150900 	call	15090 <_Bfree>
    e20c:	003f5106 	br	df54 <_strtod_l+0x7c0>
    e210:	980b883a 	mov	r5,r19
    e214:	8009883a 	mov	r4,r16
    e218:	d8c00615 	stw	r3,24(sp)
    e21c:	001573c0 	call	1573c <__pow5mult>
    e220:	d8c00617 	ldw	r3,24(sp)
    e224:	1027883a 	mov	r19,r2
    e228:	10002126 	beq	r2,zero,e2b0 <_strtod_l+0xb1c>
    e22c:	d9801317 	ldw	r6,76(sp)
    e230:	100b883a 	mov	r5,r2
    e234:	8009883a 	mov	r4,r16
    e238:	d8c00615 	stw	r3,24(sp)
    e23c:	00154e80 	call	154e8 <__multiply>
    e240:	d8c00617 	ldw	r3,24(sp)
    e244:	10001a26 	beq	r2,zero,e2b0 <_strtod_l+0xb1c>
    e248:	d9401317 	ldw	r5,76(sp)
    e24c:	8009883a 	mov	r4,r16
    e250:	d8800f15 	stw	r2,60(sp)
    e254:	d8c00615 	stw	r3,24(sp)
    e258:	00150900 	call	15090 <_Bfree>
    e25c:	d8800f17 	ldw	r2,60(sp)
    e260:	d8c00617 	ldw	r3,24(sp)
    e264:	d8801315 	stw	r2,76(sp)
    e268:	00ff7b0e 	bge	zero,r3,e058 <_strtod_l+0x8c4>
    e26c:	d9401317 	ldw	r5,76(sp)
    e270:	180d883a 	mov	r6,r3
    e274:	8009883a 	mov	r4,r16
    e278:	00158840 	call	15884 <__lshift>
    e27c:	d8801315 	stw	r2,76(sp)
    e280:	103f751e 	bne	r2,zero,e058 <_strtod_l+0x8c4>
    e284:	00c00884 	movi	r3,34
    e288:	80c00015 	stw	r3,0(r16)
    e28c:	002d883a 	mov	r22,zero
    e290:	055ffc34 	movhi	r21,32752
    e294:	00009406 	br	e4e8 <_strtod_l+0xd54>
    e298:	d9800817 	ldw	r6,32(sp)
    e29c:	a00b883a 	mov	r5,r20
    e2a0:	8009883a 	mov	r4,r16
    e2a4:	001573c0 	call	1573c <__pow5mult>
    e2a8:	1029883a 	mov	r20,r2
    e2ac:	103f6c1e 	bne	r2,zero,e060 <_strtod_l+0x8cc>
    e2b0:	d8801317 	ldw	r2,76(sp)
    e2b4:	003ff306 	br	e284 <_strtod_l+0xaf0>
    e2b8:	a00b883a 	mov	r5,r20
    e2bc:	b00d883a 	mov	r6,r22
    e2c0:	8009883a 	mov	r4,r16
    e2c4:	00158840 	call	15884 <__lshift>
    e2c8:	1029883a 	mov	r20,r2
    e2cc:	103f651e 	bne	r2,zero,e064 <_strtod_l+0x8d0>
    e2d0:	003ff706 	br	e2b0 <_strtod_l+0xb1c>
    e2d4:	00800044 	movi	r2,1
    e2d8:	d8000e15 	stw	zero,56(sp)
    e2dc:	d8800c15 	stw	r2,48(sp)
    e2e0:	003f4e06 	br	e01c <_strtod_l+0x888>
    e2e4:	b00b883a 	mov	r5,r22
    e2e8:	000d883a 	mov	r6,zero
    e2ec:	01cff834 	movhi	r7,16352
    e2f0:	e009883a 	mov	r4,fp
    e2f4:	000b7f80 	call	b7f8 <__muldf3>
    e2f8:	1011883a 	mov	r8,r2
    e2fc:	d8800c15 	stw	r2,48(sp)
    e300:	d8800617 	ldw	r2,24(sp)
    e304:	182d883a 	mov	r22,r3
    e308:	10001f1e 	bne	r2,zero,e388 <_strtod_l+0xbf4>
    e30c:	1a60003c 	xorhi	r9,r3,32768
    e310:	003f7a06 	br	e0fc <_strtod_l+0x968>
    e314:	d8c00817 	ldw	r3,32(sp)
    e318:	df000517 	ldw	fp,20(sp)
    e31c:	188fc83a 	sub	r7,r3,r2
    e320:	003f2d06 	br	dfd8 <_strtod_l+0x844>
    e324:	013ef884 	movi	r4,-1054
    e328:	2085c83a 	sub	r2,r4,r2
    e32c:	01000044 	movi	r4,1
    e330:	2084983a 	sll	r2,r4,r2
    e334:	d8800e15 	stw	r2,56(sp)
    e338:	00800044 	movi	r2,1
    e33c:	d8800c15 	stw	r2,48(sp)
    e340:	003f3606 	br	e01c <_strtod_l+0x888>
    e344:	dd801215 	stw	r22,72(sp)
    e348:	0027883a 	mov	r19,zero
    e34c:	003e0006 	br	db50 <_strtod_l+0x3bc>
    e350:	01800044 	movi	r6,1
    e354:	b0c00084 	addi	r3,r22,2
    e358:	d8c01215 	stw	r3,72(sp)
    e35c:	b4800087 	ldb	r18,2(r22)
    e360:	003e3e06 	br	dc5c <_strtod_l+0x4c8>
    e364:	90007026 	beq	r18,zero,e528 <_strtod_l+0xd94>
    e368:	90800058 	cmpnei	r2,r18,1
    e36c:	1000011e 	bne	r2,zero,e374 <_strtod_l+0xbe0>
    e370:	88021926 	beq	r17,zero,ebd8 <_strtod_l+0x1444>
    e374:	0011883a 	mov	r8,zero
    e378:	026ffc34 	movhi	r9,49136
    e37c:	d8000c15 	stw	zero,48(sp)
    e380:	058ffc34 	movhi	r22,16368
    e384:	003f5d06 	br	e0fc <_strtod_l+0x968>
    e388:	1813883a 	mov	r9,r3
    e38c:	003f5b06 	br	e0fc <_strtod_l+0x968>
    e390:	90c01960 	cmpeqi	r3,r18,101
    e394:	01400044 	movi	r5,1
    e398:	183e271e 	bne	r3,zero,dc38 <_strtod_l+0x4a4>
    e39c:	003d7d06 	br	d994 <_strtod_l+0x200>
    e3a0:	00bf2c34 	movhi	r2,64688
    e3a4:	88a3883a 	add	r17,r17,r2
    e3a8:	9009883a 	mov	r4,r18
    e3ac:	880b883a 	mov	r5,r17
    e3b0:	da400f15 	stw	r9,60(sp)
    e3b4:	da000e15 	stw	r8,56(sp)
    e3b8:	0015c900 	call	15c90 <__ulp>
    e3bc:	da000e17 	ldw	r8,56(sp)
    e3c0:	da400f17 	ldw	r9,60(sp)
    e3c4:	100d883a 	mov	r6,r2
    e3c8:	4009883a 	mov	r4,r8
    e3cc:	480b883a 	mov	r5,r9
    e3d0:	180f883a 	mov	r7,r3
    e3d4:	000b7f80 	call	b7f8 <__muldf3>
    e3d8:	900d883a 	mov	r6,r18
    e3dc:	1009883a 	mov	r4,r2
    e3e0:	180b883a 	mov	r5,r3
    e3e4:	880f883a 	mov	r7,r17
    e3e8:	000a4680 	call	a468 <__adddf3>
    e3ec:	195ffc2c 	andhi	r5,r3,32752
    e3f0:	011f2834 	movhi	r4,31904
    e3f4:	1025883a 	mov	r18,r2
    e3f8:	29005e36 	bltu	r5,r4,e574 <_strtod_l+0xde0>
    e3fc:	d8c00a17 	ldw	r3,40(sp)
    e400:	009ffc34 	movhi	r2,32752
    e404:	10bfffc4 	addi	r2,r2,-1
    e408:	1880031e 	bne	r3,r2,e418 <_strtod_l+0xc84>
    e40c:	d8800b17 	ldw	r2,44(sp)
    e410:	10bfffd8 	cmpnei	r2,r2,-1
    e414:	103fa626 	beq	r2,zero,e2b0 <_strtod_l+0xb1c>
    e418:	045ffc34 	movhi	r17,32752
    e41c:	8c7fffc4 	addi	r17,r17,-1
    e420:	04bfffc4 	movi	r18,-1
    e424:	003f6d06 	br	e1dc <_strtod_l+0xa48>
    e428:	000d883a 	mov	r6,zero
    e42c:	003fc906 	br	e354 <_strtod_l+0xbc0>
    e430:	90c01960 	cmpeqi	r3,r18,101
    e434:	1800771e 	bne	r3,zero,e614 <_strtod_l+0xe80>
    e438:	90c01160 	cmpeqi	r3,r18,69
    e43c:	1800751e 	bne	r3,zero,e614 <_strtod_l+0xe80>
    e440:	01400044 	movi	r5,1
    e444:	003e2e06 	br	dd00 <_strtod_l+0x56c>
    e448:	df000c17 	ldw	fp,48(sp)
    e44c:	b00b883a 	mov	r5,r22
    e450:	da000a15 	stw	r8,40(sp)
    e454:	e009883a 	mov	r4,fp
    e458:	0018d800 	call	18d80 <__fixdfdi>
    e45c:	1009883a 	mov	r4,r2
    e460:	180b883a 	mov	r5,r3
    e464:	0018e840 	call	18e84 <__floatdidf>
    e468:	e009883a 	mov	r4,fp
    e46c:	b00b883a 	mov	r5,r22
    e470:	100d883a 	mov	r6,r2
    e474:	180f883a 	mov	r7,r3
    e478:	000be6c0 	call	be6c <__subdf3>
    e47c:	d9000617 	ldw	r4,24(sp)
    e480:	d9401117 	ldw	r5,68(sp)
    e484:	da000a17 	ldw	r8,40(sp)
    e488:	2488b03a 	or	r4,r4,r18
    e48c:	1039883a 	mov	fp,r2
    e490:	4150703a 	and	r8,r8,r5
    e494:	2210b03a 	or	r8,r4,r8
    e498:	182d883a 	mov	r22,r3
    e49c:	01a52834 	movhi	r6,38048
    e4a0:	40004426 	beq	r8,zero,e5b4 <_strtod_l+0xe20>
    e4a4:	01cff834 	movhi	r7,16352
    e4a8:	318d6544 	addi	r6,r6,13717
    e4ac:	39ffffc4 	addi	r7,r7,-1
    e4b0:	1009883a 	mov	r4,r2
    e4b4:	180b883a 	mov	r5,r3
    e4b8:	000b7100 	call	b710 <__ledf2>
    e4bc:	10000716 	blt	r2,zero,e4dc <_strtod_l+0xd48>
    e4c0:	018d6c34 	movhi	r6,13744
    e4c4:	31b94d44 	addi	r6,r6,-6859
    e4c8:	01cff834 	movhi	r7,16352
    e4cc:	e009883a 	mov	r4,fp
    e4d0:	b00b883a 	mov	r5,r22
    e4d4:	000b6280 	call	b628 <__gedf2>
    e4d8:	00bf400e 	bge	zero,r2,e1dc <_strtod_l+0xa48>
    e4dc:	d8801317 	ldw	r2,76(sp)
    e4e0:	902d883a 	mov	r22,r18
    e4e4:	882b883a 	mov	r21,r17
    e4e8:	100b883a 	mov	r5,r2
    e4ec:	8009883a 	mov	r4,r16
    e4f0:	00150900 	call	15090 <_Bfree>
    e4f4:	a00b883a 	mov	r5,r20
    e4f8:	8009883a 	mov	r4,r16
    e4fc:	00150900 	call	15090 <_Bfree>
    e500:	980b883a 	mov	r5,r19
    e504:	8009883a 	mov	r4,r16
    e508:	00150900 	call	15090 <_Bfree>
    e50c:	d9400717 	ldw	r5,28(sp)
    e510:	8009883a 	mov	r4,r16
    e514:	00150900 	call	15090 <_Bfree>
    e518:	b80b883a 	mov	r5,r23
    e51c:	8009883a 	mov	r4,r16
    e520:	00150900 	call	15090 <_Bfree>
    e524:	003e0f06 	br	dd64 <_strtod_l+0x5d0>
    e528:	d8801117 	ldw	r2,68(sp)
    e52c:	8884703a 	and	r2,r17,r2
    e530:	103f901e 	bne	r2,zero,e374 <_strtod_l+0xbe0>
    e534:	000d883a 	mov	r6,zero
    e538:	01cffc34 	movhi	r7,16368
    e53c:	e009883a 	mov	r4,fp
    e540:	b00b883a 	mov	r5,r22
    e544:	000b7100 	call	b710 <__ledf2>
    e548:	10011916 	blt	r2,zero,e9b0 <_strtod_l+0x121c>
    e54c:	b00b883a 	mov	r5,r22
    e550:	000d883a 	mov	r6,zero
    e554:	01cff834 	movhi	r7,16352
    e558:	e009883a 	mov	r4,fp
    e55c:	000b7f80 	call	b7f8 <__muldf3>
    e560:	d8800c15 	stw	r2,48(sp)
    e564:	182d883a 	mov	r22,r3
    e568:	1011883a 	mov	r8,r2
    e56c:	1a60003c 	xorhi	r9,r3,32768
    e570:	003ee206 	br	e0fc <_strtod_l+0x968>
    e574:	0440d434 	movhi	r17,848
    e578:	1c63883a 	add	r17,r3,r17
    e57c:	8811883a 	mov	r8,r17
    e580:	003f1306 	br	e1d0 <_strtod_l+0xa3c>
    e584:	00800044 	movi	r2,1
    e588:	d8800415 	stw	r2,16(sp)
    e58c:	e0800044 	addi	r2,fp,1
    e590:	d8801215 	stw	r2,72(sp)
    e594:	e4c00047 	ldb	r19,1(fp)
    e598:	983d0326 	beq	r19,zero,d9a8 <_strtod_l+0x214>
    e59c:	1039883a 	mov	fp,r2
    e5a0:	003cd006 	br	d8e4 <_strtod_l+0x150>
    e5a4:	d8000415 	stw	zero,16(sp)
    e5a8:	003ff806 	br	e58c <_strtod_l+0xdf8>
    e5ac:	d8000815 	stw	zero,32(sp)
    e5b0:	003e5f06 	br	df30 <_strtod_l+0x79c>
    e5b4:	01cff434 	movhi	r7,16336
    e5b8:	318d6544 	addi	r6,r6,13717
    e5bc:	39ffffc4 	addi	r7,r7,-1
    e5c0:	1009883a 	mov	r4,r2
    e5c4:	180b883a 	mov	r5,r3
    e5c8:	000b7100 	call	b710 <__ledf2>
    e5cc:	103f030e 	bge	r2,zero,e1dc <_strtod_l+0xa48>
    e5d0:	003fc206 	br	e4dc <_strtod_l+0xd48>
    e5d4:	9d05c83a 	sub	r2,r19,r20
    e5d8:	10bffa90 	cmplti	r2,r2,-22
    e5dc:	103def1e 	bne	r2,zero,dd9c <_strtod_l+0x608>
    e5e0:	a4c5c83a 	sub	r2,r20,r19
    e5e4:	100690fa 	slli	r3,r2,3
    e5e8:	008000b4 	movhi	r2,2
    e5ec:	10867904 	addi	r2,r2,6628
    e5f0:	10c5883a 	add	r2,r2,r3
    e5f4:	11800017 	ldw	r6,0(r2)
    e5f8:	11c00117 	ldw	r7,4(r2)
    e5fc:	9009883a 	mov	r4,r18
    e600:	880b883a 	mov	r5,r17
    e604:	000ad580 	call	ad58 <__divdf3>
    e608:	102d883a 	mov	r22,r2
    e60c:	182b883a 	mov	r21,r3
    e610:	003dd406 	br	dd64 <_strtod_l+0x5d0>
    e614:	002b883a 	mov	r21,zero
    e618:	0029883a 	mov	r20,zero
    e61c:	01400044 	movi	r5,1
    e620:	003cdf06 	br	d9a0 <_strtod_l+0x20c>
    e624:	94801ba0 	cmpeqi	r18,r18,110
    e628:	903dc01e 	bne	r18,zero,dd2c <_strtod_l+0x598>
    e62c:	003cde06 	br	d9a8 <_strtod_l+0x214>
    e630:	b03e2f26 	beq	r22,zero,def0 <_strtod_l+0x75c>
    e634:	05adc83a 	sub	r22,zero,r22
    e638:	b08003cc 	andi	r2,r22,15
    e63c:	10000d26 	beq	r2,zero,e674 <_strtod_l+0xee0>
    e640:	100490fa 	slli	r2,r2,3
    e644:	00c000b4 	movhi	r3,2
    e648:	18c67904 	addi	r3,r3,6628
    e64c:	1885883a 	add	r2,r3,r2
    e650:	11800017 	ldw	r6,0(r2)
    e654:	11c00117 	ldw	r7,4(r2)
    e658:	9009883a 	mov	r4,r18
    e65c:	880b883a 	mov	r5,r17
    e660:	da000515 	stw	r8,20(sp)
    e664:	000ad580 	call	ad58 <__divdf3>
    e668:	da000517 	ldw	r8,20(sp)
    e66c:	1025883a 	mov	r18,r2
    e670:	1823883a 	mov	r17,r3
    e674:	b02dd13a 	srai	r22,r22,4
    e678:	b03e1d26 	beq	r22,zero,def0 <_strtod_l+0x75c>
    e67c:	b0800808 	cmpgei	r2,r22,32
    e680:	1000361e 	bne	r2,zero,e75c <_strtod_l+0xfc8>
    e684:	b080040c 	andi	r2,r22,16
    e688:	d8801015 	stw	r2,64(sp)
    e68c:	10000226 	beq	r2,zero,e698 <_strtod_l+0xf04>
    e690:	00801a84 	movi	r2,106
    e694:	d8801015 	stw	r2,64(sp)
    e698:	024000b4 	movhi	r9,2
    e69c:	880b883a 	mov	r5,r17
    e6a0:	4a45bd04 	addi	r9,r9,5876
    e6a4:	dc000615 	stw	r16,24(sp)
    e6a8:	b023883a 	mov	r17,r22
    e6ac:	9009883a 	mov	r4,r18
    e6b0:	0007883a 	mov	r3,zero
    e6b4:	da000515 	stw	r8,20(sp)
    e6b8:	4821883a 	mov	r16,r9
    e6bc:	282d883a 	mov	r22,r5
    e6c0:	8880004c 	andi	r2,r17,1
    e6c4:	8823d07a 	srai	r17,r17,1
    e6c8:	10000626 	beq	r2,zero,e6e4 <_strtod_l+0xf50>
    e6cc:	81800017 	ldw	r6,0(r16)
    e6d0:	81c00117 	ldw	r7,4(r16)
    e6d4:	000b7f80 	call	b7f8 <__muldf3>
    e6d8:	180b883a 	mov	r5,r3
    e6dc:	1009883a 	mov	r4,r2
    e6e0:	00c00044 	movi	r3,1
    e6e4:	84000204 	addi	r16,r16,8
    e6e8:	883ff51e 	bne	r17,zero,e6c0 <_strtod_l+0xf2c>
    e6ec:	18c03fcc 	andi	r3,r3,255
    e6f0:	da000517 	ldw	r8,20(sp)
    e6f4:	dc000617 	ldw	r16,24(sp)
    e6f8:	b023883a 	mov	r17,r22
    e6fc:	18000226 	beq	r3,zero,e708 <_strtod_l+0xf74>
    e700:	2025883a 	mov	r18,r4
    e704:	2823883a 	mov	r17,r5
    e708:	d8801017 	ldw	r2,64(sp)
    e70c:	10000b26 	beq	r2,zero,e73c <_strtod_l+0xfa8>
    e710:	8806d53a 	srli	r3,r17,20
    e714:	00801ac4 	movi	r2,107
    e718:	18c1ffcc 	andi	r3,r3,2047
    e71c:	10c5c83a 	sub	r2,r2,r3
    e720:	0080060e 	bge	zero,r2,e73c <_strtod_l+0xfa8>
    e724:	11000810 	cmplti	r4,r2,32
    e728:	20017b1e 	bne	r4,zero,ed18 <_strtod_l+0x1584>
    e72c:	10800d50 	cmplti	r2,r2,53
    e730:	0025883a 	mov	r18,zero
    e734:	1001851e 	bne	r2,zero,ed4c <_strtod_l+0x15b8>
    e738:	0440dc34 	movhi	r17,880
    e73c:	000d883a 	mov	r6,zero
    e740:	000f883a 	mov	r7,zero
    e744:	9009883a 	mov	r4,r18
    e748:	880b883a 	mov	r5,r17
    e74c:	da000515 	stw	r8,20(sp)
    e750:	000b5a80 	call	b5a8 <__eqdf2>
    e754:	da000517 	ldw	r8,20(sp)
    e758:	103de61e 	bne	r2,zero,def4 <_strtod_l+0x760>
    e75c:	00800884 	movi	r2,34
    e760:	80800015 	stw	r2,0(r16)
    e764:	002d883a 	mov	r22,zero
    e768:	002b883a 	mov	r21,zero
    e76c:	003d7d06 	br	dd64 <_strtod_l+0x5d0>
    e770:	00800884 	movi	r2,34
    e774:	80800015 	stw	r2,0(r16)
    e778:	002d883a 	mov	r22,zero
    e77c:	055ffc34 	movhi	r21,32752
    e780:	003d7806 	br	dd64 <_strtod_l+0x5d0>
    e784:	d8800417 	ldw	r2,16(sp)
    e788:	018000b4 	movhi	r6,2
    e78c:	dd000215 	stw	r20,8(sp)
    e790:	d8800115 	stw	r2,4(sp)
    e794:	d8801304 	addi	r2,sp,76
    e798:	d8800015 	stw	r2,0(sp)
    e79c:	d9c01404 	addi	r7,sp,80
    e7a0:	3185b804 	addi	r6,r6,5856
    e7a4:	d9401204 	addi	r5,sp,72
    e7a8:	8009883a 	mov	r4,r16
    e7ac:	0013da80 	call	13da8 <__gethex>
    e7b0:	14c001cc 	andi	r19,r2,7
    e7b4:	983d6926 	beq	r19,zero,dd5c <_strtod_l+0x5c8>
    e7b8:	98c00198 	cmpnei	r3,r19,6
    e7bc:	18003f1e 	bne	r3,zero,e8bc <_strtod_l+0x1128>
    e7c0:	d8800317 	ldw	r2,12(sp)
    e7c4:	103c7c26 	beq	r2,zero,d9b8 <_strtod_l+0x224>
    e7c8:	15c00015 	stw	r23,0(r2)
    e7cc:	002d883a 	mov	r22,zero
    e7d0:	002b883a 	mov	r21,zero
    e7d4:	003c7a06 	br	d9c0 <_strtod_l+0x22c>
    e7d8:	902d883a 	mov	r22,r18
    e7dc:	882b883a 	mov	r21,r17
    e7e0:	003d6006 	br	dd64 <_strtod_l+0x5d0>
    e7e4:	303cc81e 	bne	r6,zero,db08 <_strtod_l+0x374>
    e7e8:	4a4002a4 	muli	r9,r9,10
    e7ec:	003cc606 	br	db08 <_strtod_l+0x374>
    e7f0:	11000084 	addi	r4,r2,2
    e7f4:	bdc00248 	cmpgei	r23,r23,9
    e7f8:	b800231e 	bne	r23,zero,e888 <_strtod_l+0x10f4>
    e7fc:	202f883a 	mov	r23,r4
    e800:	003ca706 	br	daa0 <_strtod_l+0x30c>
    e804:	a80b883a 	mov	r5,r21
    e808:	e009883a 	mov	r4,fp
    e80c:	d9800515 	stw	r6,20(sp)
    e810:	00168800 	call	16880 <strncmp>
    e814:	d9800517 	ldw	r6,20(sp)
    e818:	10002226 	beq	r2,zero,e8a4 <_strtod_l+0x1110>
    e81c:	002b883a 	mov	r21,zero
    e820:	0013883a 	mov	r9,zero
    e824:	0011883a 	mov	r8,zero
    e828:	002f883a 	mov	r23,zero
    e82c:	003cc406 	br	db40 <_strtod_l+0x3ac>
    e830:	98d38810 	cmplti	r3,r19,20000
    e834:	183d2f1e 	bne	r3,zero,dcf4 <_strtod_l+0x560>
    e838:	003d2d06 	br	dcf0 <_strtod_l+0x55c>
    e83c:	1813883a 	mov	r9,r3
    e840:	003e4c06 	br	e174 <_strtod_l+0x9e0>
    e844:	014000b4 	movhi	r5,2
    e848:	2945af04 	addi	r5,r5,5820
    e84c:	d9001204 	addi	r4,sp,72
    e850:	001466c0 	call	1466c <__match>
    e854:	103c5426 	beq	r2,zero,d9a8 <_strtod_l+0x214>
    e858:	d8801217 	ldw	r2,72(sp)
    e85c:	014000b4 	movhi	r5,2
    e860:	2945b004 	addi	r5,r5,5824
    e864:	10bfffc4 	addi	r2,r2,-1
    e868:	d9001204 	addi	r4,sp,72
    e86c:	d8801215 	stw	r2,72(sp)
    e870:	001466c0 	call	1466c <__match>
    e874:	103fc01e 	bne	r2,zero,e778 <_strtod_l+0xfe4>
    e878:	d8801217 	ldw	r2,72(sp)
    e87c:	10800044 	addi	r2,r2,1
    e880:	d8801215 	stw	r2,72(sp)
    e884:	003fbc06 	br	e778 <_strtod_l+0xfe4>
    e888:	20800448 	cmpgei	r2,r4,17
    e88c:	1000671e 	bne	r2,zero,ea2c <_strtod_l+0x1298>
    e890:	4a4002a4 	muli	r9,r9,10
    e894:	202f883a 	mov	r23,r4
    e898:	0005883a 	mov	r2,zero
    e89c:	2a53883a 	add	r9,r5,r9
    e8a0:	003c8206 	br	daac <_strtod_l+0x318>
    e8a4:	e18d883a 	add	r6,fp,r6
    e8a8:	d9801215 	stw	r6,72(sp)
    e8ac:	34800007 	ldb	r18,0(r6)
    e8b0:	0011883a 	mov	r8,zero
    e8b4:	0013883a 	mov	r9,zero
    e8b8:	003c6506 	br	da50 <_strtod_l+0x2bc>
    e8bc:	d9801317 	ldw	r6,76(sp)
    e8c0:	30000826 	beq	r6,zero,e8e4 <_strtod_l+0x1150>
    e8c4:	01400d44 	movi	r5,53
    e8c8:	d9001504 	addi	r4,sp,84
    e8cc:	d8800515 	stw	r2,20(sp)
    e8d0:	00160700 	call	16070 <__copybits>
    e8d4:	d9401317 	ldw	r5,76(sp)
    e8d8:	8009883a 	mov	r4,r16
    e8dc:	00150900 	call	15090 <_Bfree>
    e8e0:	d8800517 	ldw	r2,20(sp)
    e8e4:	98c001a8 	cmpgeui	r3,r19,6
    e8e8:	1800141e 	bne	r3,zero,e93c <_strtod_l+0x11a8>
    e8ec:	982690ba 	slli	r19,r19,2
    e8f0:	00c00074 	movhi	r3,1
    e8f4:	98c7883a 	add	r3,r19,r3
    e8f8:	18fa4017 	ldw	r3,-5888(r3)
    e8fc:	1800683a 	jmp	r3
    e900:	0000e93c 	xorhi	zero,zero,932
    e904:	0000e918 	cmpnei	zero,zero,932
    e908:	0000e968 	cmpgeui	zero,zero,933
    e90c:	0000e960 	cmpeqi	zero,zero,933
    e910:	0000e950 	cmplti	zero,zero,933
    e914:	0000e918 	cmpnei	zero,zero,932
    e918:	d8c01417 	ldw	r3,80(sp)
    e91c:	dc401617 	ldw	r17,88(sp)
    e920:	013ffc34 	movhi	r4,65520
    e924:	18c10cc4 	addi	r3,r3,1075
    e928:	1806953a 	slli	r3,r3,20
    e92c:	213fffc4 	addi	r4,r4,-1
    e930:	dc801517 	ldw	r18,84(sp)
    e934:	8922703a 	and	r17,r17,r4
    e938:	88e2b03a 	or	r17,r17,r3
    e93c:	1080020c 	andi	r2,r2,8
    e940:	902d883a 	mov	r22,r18
    e944:	103fa526 	beq	r2,zero,e7dc <_strtod_l+0x1048>
    e948:	8d600034 	orhi	r21,r17,32768
    e94c:	003d0506 	br	dd64 <_strtod_l+0x5d0>
    e950:	04600034 	movhi	r17,32768
    e954:	8c7fffc4 	addi	r17,r17,-1
    e958:	04bfffc4 	movi	r18,-1
    e95c:	003ff706 	br	e93c <_strtod_l+0x11a8>
    e960:	045ffc34 	movhi	r17,32752
    e964:	003ff506 	br	e93c <_strtod_l+0x11a8>
    e968:	dc801517 	ldw	r18,84(sp)
    e96c:	dc401617 	ldw	r17,88(sp)
    e970:	003ff206 	br	e93c <_strtod_l+0x11a8>
    e974:	0005883a 	mov	r2,zero
    e978:	003c4006 	br	da7c <_strtod_l+0x2e8>
    e97c:	d8800917 	ldw	r2,36(sp)
    e980:	900d883a 	mov	r6,r18
    e984:	880f883a 	mov	r7,r17
    e988:	100690fa 	slli	r3,r2,3
    e98c:	008000b4 	movhi	r2,2
    e990:	10867904 	addi	r2,r2,6628
    e994:	10c5883a 	add	r2,r2,r3
    e998:	11000017 	ldw	r4,0(r2)
    e99c:	11400117 	ldw	r5,4(r2)
    e9a0:	000b7f80 	call	b7f8 <__muldf3>
    e9a4:	102d883a 	mov	r22,r2
    e9a8:	182b883a 	mov	r21,r3
    e9ac:	003ced06 	br	dd64 <_strtod_l+0x5d0>
    e9b0:	0011883a 	mov	r8,zero
    e9b4:	026ff834 	movhi	r9,49120
    e9b8:	d8000c15 	stw	zero,48(sp)
    e9bc:	058ff834 	movhi	r22,16352
    e9c0:	003dce06 	br	e0fc <_strtod_l+0x968>
    e9c4:	b82b883a 	mov	r21,r23
    e9c8:	0029883a 	mov	r20,zero
    e9cc:	003c3a06 	br	dab8 <_strtod_l+0x324>
    e9d0:	008003c4 	movi	r2,15
    e9d4:	15efc83a 	sub	r23,r2,r23
    e9d8:	b80490fa 	slli	r2,r23,3
    e9dc:	040000b4 	movhi	r16,2
    e9e0:	84067904 	addi	r16,r16,6628
    e9e4:	8085883a 	add	r2,r16,r2
    e9e8:	11000017 	ldw	r4,0(r2)
    e9ec:	11400117 	ldw	r5,4(r2)
    e9f0:	900d883a 	mov	r6,r18
    e9f4:	880f883a 	mov	r7,r17
    e9f8:	000b7f80 	call	b7f8 <__muldf3>
    e9fc:	d9000917 	ldw	r4,36(sp)
    ea00:	180b883a 	mov	r5,r3
    ea04:	25efc83a 	sub	r23,r4,r23
    ea08:	b80c90fa 	slli	r6,r23,3
    ea0c:	1009883a 	mov	r4,r2
    ea10:	81a1883a 	add	r16,r16,r6
    ea14:	81800017 	ldw	r6,0(r16)
    ea18:	81c00117 	ldw	r7,4(r16)
    ea1c:	000b7f80 	call	b7f8 <__muldf3>
    ea20:	102d883a 	mov	r22,r2
    ea24:	182b883a 	mov	r21,r3
    ea28:	003cce06 	br	dd64 <_strtod_l+0x5d0>
    ea2c:	202f883a 	mov	r23,r4
    ea30:	0005883a 	mov	r2,zero
    ea34:	003c1d06 	br	daac <_strtod_l+0x318>
    ea38:	d9000617 	ldw	r4,24(sp)
    ea3c:	00c00434 	movhi	r3,16
    ea40:	18ffffc4 	addi	r3,r3,-1
    ea44:	dd800b17 	ldw	r22,44(sp)
    ea48:	dd400a17 	ldw	r21,40(sp)
    ea4c:	88c4703a 	and	r2,r17,r3
    ea50:	20006726 	beq	r4,zero,ebf0 <_strtod_l+0x145c>
    ea54:	10c09d26 	beq	r2,r3,eccc <_strtod_l+0x1538>
    ea58:	d8800e17 	ldw	r2,56(sp)
    ea5c:	10006826 	beq	r2,zero,ec00 <_strtod_l+0x146c>
    ea60:	1444703a 	and	r2,r2,r17
    ea64:	10001c26 	beq	r2,zero,ead8 <_strtod_l+0x1344>
    ea68:	d8800617 	ldw	r2,24(sp)
    ea6c:	9009883a 	mov	r4,r18
    ea70:	880b883a 	mov	r5,r17
    ea74:	10007626 	beq	r2,zero,ec50 <_strtod_l+0x14bc>
    ea78:	0015c900 	call	15c90 <__ulp>
    ea7c:	1009883a 	mov	r4,r2
    ea80:	d8801017 	ldw	r2,64(sp)
    ea84:	180b883a 	mov	r5,r3
    ea88:	10000c26 	beq	r2,zero,eabc <_strtod_l+0x1328>
    ea8c:	8804d53a 	srli	r2,r17,20
    ea90:	10c1ffcc 	andi	r3,r2,2047
    ea94:	00801ac4 	movi	r2,107
    ea98:	10c5c83a 	sub	r2,r2,r3
    ea9c:	0080070e 	bge	zero,r2,eabc <_strtod_l+0x1328>
    eaa0:	1004953a 	slli	r2,r2,20
    eaa4:	01cffc34 	movhi	r7,16368
    eaa8:	000d883a 	mov	r6,zero
    eaac:	11cf883a 	add	r7,r2,r7
    eab0:	000b7f80 	call	b7f8 <__muldf3>
    eab4:	1009883a 	mov	r4,r2
    eab8:	180b883a 	mov	r5,r3
    eabc:	200d883a 	mov	r6,r4
    eac0:	280f883a 	mov	r7,r5
    eac4:	9009883a 	mov	r4,r18
    eac8:	880b883a 	mov	r5,r17
    eacc:	000a4680 	call	a468 <__adddf3>
    ead0:	102d883a 	mov	r22,r2
    ead4:	182b883a 	mov	r21,r3
    ead8:	d8801017 	ldw	r2,64(sp)
    eadc:	10001c26 	beq	r2,zero,eb50 <_strtod_l+0x13bc>
    eae0:	b009883a 	mov	r4,r22
    eae4:	a80b883a 	mov	r5,r21
    eae8:	000d883a 	mov	r6,zero
    eaec:	01ce5434 	movhi	r7,14672
    eaf0:	000b7f80 	call	b7f8 <__muldf3>
    eaf4:	182b883a 	mov	r21,r3
    eaf8:	10c6b03a 	or	r3,r2,r3
    eafc:	102d883a 	mov	r22,r2
    eb00:	d8801317 	ldw	r2,76(sp)
    eb04:	183e781e 	bne	r3,zero,e4e8 <_strtod_l+0xd54>
    eb08:	00c00884 	movi	r3,34
    eb0c:	80c00015 	stw	r3,0(r16)
    eb10:	003e7506 	br	e4e8 <_strtod_l+0xd54>
    eb14:	0440d434 	movhi	r17,848
    eb18:	1c63883a 	add	r17,r3,r17
    eb1c:	d8001015 	stw	zero,64(sp)
    eb20:	003cf406 	br	def4 <_strtod_l+0x760>
    eb24:	9009883a 	mov	r4,r18
    eb28:	880b883a 	mov	r5,r17
    eb2c:	000be6c0 	call	be6c <__subdf3>
    eb30:	000d883a 	mov	r6,zero
    eb34:	000f883a 	mov	r7,zero
    eb38:	1009883a 	mov	r4,r2
    eb3c:	180b883a 	mov	r5,r3
    eb40:	102d883a 	mov	r22,r2
    eb44:	182b883a 	mov	r21,r3
    eb48:	000b5a80 	call	b5a8 <__eqdf2>
    eb4c:	10002226 	beq	r2,zero,ebd8 <_strtod_l+0x1444>
    eb50:	d8801317 	ldw	r2,76(sp)
    eb54:	003e6406 	br	e4e8 <_strtod_l+0xd54>
    eb58:	d8800617 	ldw	r2,24(sp)
    eb5c:	dd800b17 	ldw	r22,44(sp)
    eb60:	dd400a17 	ldw	r21,40(sp)
    eb64:	14a4b03a 	or	r18,r2,r18
    eb68:	903fdb1e 	bne	r18,zero,ead8 <_strtod_l+0x1344>
    eb6c:	00800434 	movhi	r2,16
    eb70:	10bfffc4 	addi	r2,r2,-1
    eb74:	8884703a 	and	r2,r17,r2
    eb78:	103fd71e 	bne	r2,zero,ead8 <_strtod_l+0x1344>
    eb7c:	8c5ffc2c 	andhi	r17,r17,32752
    eb80:	0081ac34 	movhi	r2,1712
    eb84:	147fd42e 	bgeu	r2,r17,ead8 <_strtod_l+0x1344>
    eb88:	b8800517 	ldw	r2,20(r23)
    eb8c:	1000031e 	bne	r2,zero,eb9c <_strtod_l+0x1408>
    eb90:	b8800417 	ldw	r2,16(r23)
    eb94:	10800090 	cmplti	r2,r2,2
    eb98:	103fcf1e 	bne	r2,zero,ead8 <_strtod_l+0x1344>
    eb9c:	b80b883a 	mov	r5,r23
    eba0:	8009883a 	mov	r4,r16
    eba4:	01800044 	movi	r6,1
    eba8:	00158840 	call	15884 <__lshift>
    ebac:	980b883a 	mov	r5,r19
    ebb0:	1009883a 	mov	r4,r2
    ebb4:	102f883a 	mov	r23,r2
    ebb8:	0015a0c0 	call	15a0c <__mcmp>
    ebbc:	00bfc60e 	bge	zero,r2,ead8 <_strtod_l+0x1344>
    ebc0:	d8801017 	ldw	r2,64(sp)
    ebc4:	10005a26 	beq	r2,zero,ed30 <_strtod_l+0x159c>
    ebc8:	0081ac34 	movhi	r2,1712
    ebcc:	14405816 	blt	r2,r17,ed30 <_strtod_l+0x159c>
    ebd0:	0080dc34 	movhi	r2,880
    ebd4:	147fc216 	blt	r2,r17,eae0 <_strtod_l+0x134c>
    ebd8:	00c00884 	movi	r3,34
    ebdc:	d8801317 	ldw	r2,76(sp)
    ebe0:	80c00015 	stw	r3,0(r16)
    ebe4:	002d883a 	mov	r22,zero
    ebe8:	002b883a 	mov	r21,zero
    ebec:	003e3e06 	br	e4e8 <_strtod_l+0xd54>
    ebf0:	1484b03a 	or	r2,r2,r18
    ebf4:	103f981e 	bne	r2,zero,ea58 <_strtod_l+0x12c4>
    ebf8:	8c5ffc2c 	andhi	r17,r17,32752
    ebfc:	003ff006 	br	ebc0 <_strtod_l+0x142c>
    ec00:	d8800c17 	ldw	r2,48(sp)
    ec04:	14b8703a 	and	fp,r2,r18
    ec08:	e03fb326 	beq	fp,zero,ead8 <_strtod_l+0x1344>
    ec0c:	003f9606 	br	ea68 <_strtod_l+0x12d4>
    ec10:	008000b4 	movhi	r2,2
    ec14:	10866f04 	addi	r2,r2,6588
    ec18:	002d883a 	mov	r22,zero
    ec1c:	d8800515 	stw	r2,20(sp)
    ec20:	003c9d06 	br	de98 <_strtod_l+0x704>
    ec24:	014000b4 	movhi	r5,2
    ec28:	d9801504 	addi	r6,sp,84
    ec2c:	2945b304 	addi	r5,r5,5836
    ec30:	d9001204 	addi	r4,sp,72
    ec34:	00146bc0 	call	146bc <__hexnan>
    ec38:	10800158 	cmpnei	r2,r2,5
    ec3c:	103c441e 	bne	r2,zero,dd50 <_strtod_l+0x5bc>
    ec40:	dd401617 	ldw	r21,88(sp)
    ec44:	dd801517 	ldw	r22,84(sp)
    ec48:	ad5ffc34 	orhi	r21,r21,32752
    ec4c:	003c4506 	br	dd64 <_strtod_l+0x5d0>
    ec50:	0015c900 	call	15c90 <__ulp>
    ec54:	100d883a 	mov	r6,r2
    ec58:	d8801017 	ldw	r2,64(sp)
    ec5c:	180f883a 	mov	r7,r3
    ec60:	103fb026 	beq	r2,zero,eb24 <_strtod_l+0x1390>
    ec64:	8804d53a 	srli	r2,r17,20
    ec68:	10c1ffcc 	andi	r3,r2,2047
    ec6c:	00801ac4 	movi	r2,107
    ec70:	10c5c83a 	sub	r2,r2,r3
    ec74:	0080090e 	bge	zero,r2,ec9c <_strtod_l+0x1508>
    ec78:	1004953a 	slli	r2,r2,20
    ec7c:	380b883a 	mov	r5,r7
    ec80:	01cffc34 	movhi	r7,16368
    ec84:	3009883a 	mov	r4,r6
    ec88:	11cf883a 	add	r7,r2,r7
    ec8c:	000d883a 	mov	r6,zero
    ec90:	000b7f80 	call	b7f8 <__muldf3>
    ec94:	100d883a 	mov	r6,r2
    ec98:	180f883a 	mov	r7,r3
    ec9c:	9009883a 	mov	r4,r18
    eca0:	880b883a 	mov	r5,r17
    eca4:	000be6c0 	call	be6c <__subdf3>
    eca8:	000d883a 	mov	r6,zero
    ecac:	000f883a 	mov	r7,zero
    ecb0:	1009883a 	mov	r4,r2
    ecb4:	180b883a 	mov	r5,r3
    ecb8:	102d883a 	mov	r22,r2
    ecbc:	182b883a 	mov	r21,r3
    ecc0:	000b5a80 	call	b5a8 <__eqdf2>
    ecc4:	103f861e 	bne	r2,zero,eae0 <_strtod_l+0x134c>
    ecc8:	003fc306 	br	ebd8 <_strtod_l+0x1444>
    eccc:	d8801017 	ldw	r2,64(sp)
    ecd0:	10001526 	beq	r2,zero,ed28 <_strtod_l+0x1594>
    ecd4:	889ffc2c 	andhi	r2,r17,32752
    ecd8:	00c1a834 	movhi	r3,1696
    ecdc:	18801236 	bltu	r3,r2,ed28 <_strtod_l+0x1594>
    ece0:	1004d53a 	srli	r2,r2,20
    ece4:	00c01ac4 	movi	r3,107
    ece8:	1887c83a 	sub	r3,r3,r2
    ecec:	00bfffc4 	movi	r2,-1
    ecf0:	10c4983a 	sll	r2,r2,r3
    ecf4:	90bf581e 	bne	r18,r2,ea58 <_strtod_l+0x12c4>
    ecf8:	009ffc34 	movhi	r2,32752
    ecfc:	10bfffc4 	addi	r2,r2,-1
    ed00:	88801826 	beq	r17,r2,ed64 <_strtod_l+0x15d0>
    ed04:	8c5ffc2c 	andhi	r17,r17,32752
    ed08:	00800434 	movhi	r2,16
    ed0c:	002d883a 	mov	r22,zero
    ed10:	88ab883a 	add	r21,r17,r2
    ed14:	003f7006 	br	ead8 <_strtod_l+0x1344>
    ed18:	00ffffc4 	movi	r3,-1
    ed1c:	1884983a 	sll	r2,r3,r2
    ed20:	14a4703a 	and	r18,r2,r18
    ed24:	003e8506 	br	e73c <_strtod_l+0xfa8>
    ed28:	00bfffc4 	movi	r2,-1
    ed2c:	003ff106 	br	ecf4 <_strtod_l+0x1560>
    ed30:	05400434 	movhi	r21,16
    ed34:	00bffc34 	movhi	r2,65520
    ed38:	88a3883a 	add	r17,r17,r2
    ed3c:	ad7fffc4 	addi	r21,r21,-1
    ed40:	05bfffc4 	movi	r22,-1
    ed44:	8d6ab03a 	or	r21,r17,r21
    ed48:	003f6306 	br	ead8 <_strtod_l+0x1344>
    ed4c:	008012c4 	movi	r2,75
    ed50:	10c7c83a 	sub	r3,r2,r3
    ed54:	00bfffc4 	movi	r2,-1
    ed58:	10c4983a 	sll	r2,r2,r3
    ed5c:	1462703a 	and	r17,r2,r17
    ed60:	003e7606 	br	e73c <_strtod_l+0xfa8>
    ed64:	94bfffd8 	cmpnei	r18,r18,-1
    ed68:	903fe61e 	bne	r18,zero,ed04 <_strtod_l+0x1570>
    ed6c:	003d5006 	br	e2b0 <_strtod_l+0xb1c>

0000ed70 <_strtod_r>:
    ed70:	01c000b4 	movhi	r7,2
    ed74:	39c99304 	addi	r7,r7,9804
    ed78:	000d7941 	jmpi	d794 <_strtod_l>

0000ed7c <strtod_l>:
    ed7c:	00c000b4 	movhi	r3,2
    ed80:	2005883a 	mov	r2,r4
    ed84:	190eaa17 	ldw	r4,15016(r3)
    ed88:	300f883a 	mov	r7,r6
    ed8c:	280d883a 	mov	r6,r5
    ed90:	100b883a 	mov	r5,r2
    ed94:	000d7941 	jmpi	d794 <_strtod_l>

0000ed98 <strtod>:
    ed98:	00c000b4 	movhi	r3,2
    ed9c:	2005883a 	mov	r2,r4
    eda0:	190eaa17 	ldw	r4,15016(r3)
    eda4:	01c000b4 	movhi	r7,2
    eda8:	280d883a 	mov	r6,r5
    edac:	39c99304 	addi	r7,r7,9804
    edb0:	100b883a 	mov	r5,r2
    edb4:	000d7941 	jmpi	d794 <_strtod_l>

0000edb8 <strtof_l>:
    edb8:	00c000b4 	movhi	r3,2
    edbc:	2005883a 	mov	r2,r4
    edc0:	190eaa17 	ldw	r4,15016(r3)
    edc4:	defffa04 	addi	sp,sp,-24
    edc8:	300f883a 	mov	r7,r6
    edcc:	280d883a 	mov	r6,r5
    edd0:	100b883a 	mov	r5,r2
    edd4:	dc400115 	stw	r17,4(sp)
    edd8:	dc000015 	stw	r16,0(sp)
    eddc:	dfc00515 	stw	ra,20(sp)
    ede0:	dd000415 	stw	r20,16(sp)
    ede4:	dcc00315 	stw	r19,12(sp)
    ede8:	dc800215 	stw	r18,8(sp)
    edec:	000d7940 	call	d794 <_strtod_l>
    edf0:	100d883a 	mov	r6,r2
    edf4:	180f883a 	mov	r7,r3
    edf8:	1009883a 	mov	r4,r2
    edfc:	180b883a 	mov	r5,r3
    ee00:	1023883a 	mov	r17,r2
    ee04:	1821883a 	mov	r16,r3
    ee08:	000c7780 	call	c778 <__unorddf2>
    ee0c:	10002d1e 	bne	r2,zero,eec4 <strtof_l+0x10c>
    ee10:	8809883a 	mov	r4,r17
    ee14:	800b883a 	mov	r5,r16
    ee18:	04a00034 	movhi	r18,32768
    ee1c:	000ca900 	call	ca90 <__truncdfsf2>
    ee20:	94bfffc4 	addi	r18,r18,-1
    ee24:	90a8703a 	and	r20,r18,r2
    ee28:	015fe034 	movhi	r5,32640
    ee2c:	297fffc4 	addi	r5,r5,-1
    ee30:	a009883a 	mov	r4,r20
    ee34:	1027883a 	mov	r19,r2
    ee38:	0019a6c0 	call	19a6c <__unordsf2>
    ee3c:	1000181e 	bne	r2,zero,eea0 <strtof_l+0xe8>
    ee40:	015fe034 	movhi	r5,32640
    ee44:	297fffc4 	addi	r5,r5,-1
    ee48:	a009883a 	mov	r4,r20
    ee4c:	00199b80 	call	199b8 <__lesf2>
    ee50:	0080130e 	bge	zero,r2,eea0 <strtof_l+0xe8>
    ee54:	84a0703a 	and	r16,r16,r18
    ee58:	01dffc34 	movhi	r7,32752
    ee5c:	01bfffc4 	movi	r6,-1
    ee60:	39ffffc4 	addi	r7,r7,-1
    ee64:	8809883a 	mov	r4,r17
    ee68:	800b883a 	mov	r5,r16
    ee6c:	000c7780 	call	c778 <__unorddf2>
    ee70:	1000071e 	bne	r2,zero,ee90 <strtof_l+0xd8>
    ee74:	01dffc34 	movhi	r7,32752
    ee78:	01bfffc4 	movi	r6,-1
    ee7c:	39ffffc4 	addi	r7,r7,-1
    ee80:	8809883a 	mov	r4,r17
    ee84:	800b883a 	mov	r5,r16
    ee88:	000b7100 	call	b710 <__ledf2>
    ee8c:	00800416 	blt	zero,r2,eea0 <strtof_l+0xe8>
    ee90:	008000b4 	movhi	r2,2
    ee94:	108eaa17 	ldw	r2,15016(r2)
    ee98:	00c00884 	movi	r3,34
    ee9c:	10c00015 	stw	r3,0(r2)
    eea0:	9805883a 	mov	r2,r19
    eea4:	dfc00517 	ldw	ra,20(sp)
    eea8:	dd000417 	ldw	r20,16(sp)
    eeac:	dcc00317 	ldw	r19,12(sp)
    eeb0:	dc800217 	ldw	r18,8(sp)
    eeb4:	dc400117 	ldw	r17,4(sp)
    eeb8:	dc000017 	ldw	r16,0(sp)
    eebc:	dec00604 	addi	sp,sp,24
    eec0:	f800283a 	ret
    eec4:	8000020e 	bge	r16,zero,eed0 <strtof_l+0x118>
    eec8:	04fff034 	movhi	r19,65472
    eecc:	003ff406 	br	eea0 <strtof_l+0xe8>
    eed0:	04dff034 	movhi	r19,32704
    eed4:	003ff206 	br	eea0 <strtof_l+0xe8>

0000eed8 <strtof>:
    eed8:	00c000b4 	movhi	r3,2
    eedc:	2005883a 	mov	r2,r4
    eee0:	190eaa17 	ldw	r4,15016(r3)
    eee4:	01c000b4 	movhi	r7,2
    eee8:	defffa04 	addi	sp,sp,-24
    eeec:	280d883a 	mov	r6,r5
    eef0:	39c99304 	addi	r7,r7,9804
    eef4:	100b883a 	mov	r5,r2
    eef8:	dc400115 	stw	r17,4(sp)
    eefc:	dc000015 	stw	r16,0(sp)
    ef00:	dfc00515 	stw	ra,20(sp)
    ef04:	dd000415 	stw	r20,16(sp)
    ef08:	dcc00315 	stw	r19,12(sp)
    ef0c:	dc800215 	stw	r18,8(sp)
    ef10:	000d7940 	call	d794 <_strtod_l>
    ef14:	100d883a 	mov	r6,r2
    ef18:	180f883a 	mov	r7,r3
    ef1c:	1009883a 	mov	r4,r2
    ef20:	180b883a 	mov	r5,r3
    ef24:	1023883a 	mov	r17,r2
    ef28:	1821883a 	mov	r16,r3
    ef2c:	000c7780 	call	c778 <__unorddf2>
    ef30:	10002d1e 	bne	r2,zero,efe8 <strtof+0x110>
    ef34:	8809883a 	mov	r4,r17
    ef38:	800b883a 	mov	r5,r16
    ef3c:	04a00034 	movhi	r18,32768
    ef40:	000ca900 	call	ca90 <__truncdfsf2>
    ef44:	94bfffc4 	addi	r18,r18,-1
    ef48:	90a8703a 	and	r20,r18,r2
    ef4c:	015fe034 	movhi	r5,32640
    ef50:	297fffc4 	addi	r5,r5,-1
    ef54:	a009883a 	mov	r4,r20
    ef58:	1027883a 	mov	r19,r2
    ef5c:	0019a6c0 	call	19a6c <__unordsf2>
    ef60:	1000181e 	bne	r2,zero,efc4 <strtof+0xec>
    ef64:	015fe034 	movhi	r5,32640
    ef68:	297fffc4 	addi	r5,r5,-1
    ef6c:	a009883a 	mov	r4,r20
    ef70:	00199b80 	call	199b8 <__lesf2>
    ef74:	0080130e 	bge	zero,r2,efc4 <strtof+0xec>
    ef78:	84a0703a 	and	r16,r16,r18
    ef7c:	01dffc34 	movhi	r7,32752
    ef80:	01bfffc4 	movi	r6,-1
    ef84:	39ffffc4 	addi	r7,r7,-1
    ef88:	8809883a 	mov	r4,r17
    ef8c:	800b883a 	mov	r5,r16
    ef90:	000c7780 	call	c778 <__unorddf2>
    ef94:	1000071e 	bne	r2,zero,efb4 <strtof+0xdc>
    ef98:	01dffc34 	movhi	r7,32752
    ef9c:	01bfffc4 	movi	r6,-1
    efa0:	39ffffc4 	addi	r7,r7,-1
    efa4:	8809883a 	mov	r4,r17
    efa8:	800b883a 	mov	r5,r16
    efac:	000b7100 	call	b710 <__ledf2>
    efb0:	00800416 	blt	zero,r2,efc4 <strtof+0xec>
    efb4:	008000b4 	movhi	r2,2
    efb8:	108eaa17 	ldw	r2,15016(r2)
    efbc:	00c00884 	movi	r3,34
    efc0:	10c00015 	stw	r3,0(r2)
    efc4:	9805883a 	mov	r2,r19
    efc8:	dfc00517 	ldw	ra,20(sp)
    efcc:	dd000417 	ldw	r20,16(sp)
    efd0:	dcc00317 	ldw	r19,12(sp)
    efd4:	dc800217 	ldw	r18,8(sp)
    efd8:	dc400117 	ldw	r17,4(sp)
    efdc:	dc000017 	ldw	r16,0(sp)
    efe0:	dec00604 	addi	sp,sp,24
    efe4:	f800283a 	ret
    efe8:	8000020e 	bge	r16,zero,eff4 <strtof+0x11c>
    efec:	04fff034 	movhi	r19,65472
    eff0:	003ff406 	br	efc4 <strtof+0xec>
    eff4:	04dff034 	movhi	r19,32704
    eff8:	003ff206 	br	efc4 <strtof+0xec>

0000effc <strtok>:
    effc:	008000b4 	movhi	r2,2
    f000:	118eaa17 	ldw	r6,15016(r2)
    f004:	01c00044 	movi	r7,1
    f008:	31801704 	addi	r6,r6,92
    f00c:	000f0101 	jmpi	f010 <__strtok_r>

0000f010 <__strtok_r>:
    f010:	20001d26 	beq	r4,zero,f088 <__strtok_r+0x78>
    f014:	22400007 	ldb	r9,0(r4)
    f018:	20800044 	addi	r2,r4,1
    f01c:	2807883a 	mov	r3,r5
    f020:	00000106 	br	f028 <__strtok_r+0x18>
    f024:	4a001126 	beq	r9,r8,f06c <__strtok_r+0x5c>
    f028:	1a000007 	ldb	r8,0(r3)
    f02c:	18c00044 	addi	r3,r3,1
    f030:	403ffc1e 	bne	r8,zero,f024 <__strtok_r+0x14>
    f034:	48001826 	beq	r9,zero,f098 <__strtok_r+0x88>
    f038:	12000007 	ldb	r8,0(r2)
    f03c:	2807883a 	mov	r3,r5
    f040:	10800044 	addi	r2,r2,1
    f044:	00000106 	br	f04c <__strtok_r+0x3c>
    f048:	383ffb26 	beq	r7,zero,f038 <__strtok_r+0x28>
    f04c:	19c00007 	ldb	r7,0(r3)
    f050:	18c00044 	addi	r3,r3,1
    f054:	41fffc1e 	bne	r8,r7,f048 <__strtok_r+0x38>
    f058:	40000726 	beq	r8,zero,f078 <__strtok_r+0x68>
    f05c:	103fffc5 	stb	zero,-1(r2)
    f060:	30800015 	stw	r2,0(r6)
    f064:	2005883a 	mov	r2,r4
    f068:	f800283a 	ret
    f06c:	38000d26 	beq	r7,zero,f0a4 <__strtok_r+0x94>
    f070:	1009883a 	mov	r4,r2
    f074:	003fe706 	br	f014 <__strtok_r+0x4>
    f078:	0005883a 	mov	r2,zero
    f07c:	30800015 	stw	r2,0(r6)
    f080:	2005883a 	mov	r2,r4
    f084:	f800283a 	ret
    f088:	31000017 	ldw	r4,0(r6)
    f08c:	203fe11e 	bne	r4,zero,f014 <__strtok_r+0x4>
    f090:	0005883a 	mov	r2,zero
    f094:	f800283a 	ret
    f098:	30000015 	stw	zero,0(r6)
    f09c:	0005883a 	mov	r2,zero
    f0a0:	f800283a 	ret
    f0a4:	30800015 	stw	r2,0(r6)
    f0a8:	20000005 	stb	zero,0(r4)
    f0ac:	2005883a 	mov	r2,r4
    f0b0:	f800283a 	ret

0000f0b4 <strtok_r>:
    f0b4:	01c00044 	movi	r7,1
    f0b8:	000f0101 	jmpi	f010 <__strtok_r>

0000f0bc <___vfprintf_internal_r>:
    f0bc:	deffbf04 	addi	sp,sp,-260
    f0c0:	dfc04015 	stw	ra,256(sp)
    f0c4:	dd803d15 	stw	r22,244(sp)
    f0c8:	dcc03a15 	stw	r19,232(sp)
    f0cc:	dc803915 	stw	r18,228(sp)
    f0d0:	2027883a 	mov	r19,r4
    f0d4:	2825883a 	mov	r18,r5
    f0d8:	302d883a 	mov	r22,r6
    f0dc:	d9c00615 	stw	r7,24(sp)
    f0e0:	df003f15 	stw	fp,252(sp)
    f0e4:	ddc03e15 	stw	r23,248(sp)
    f0e8:	dd403c15 	stw	r21,240(sp)
    f0ec:	dd003b15 	stw	r20,236(sp)
    f0f0:	dc403815 	stw	r17,224(sp)
    f0f4:	dc003715 	stw	r16,220(sp)
    f0f8:	0014a500 	call	14a50 <_localeconv_r>
    f0fc:	10800017 	ldw	r2,0(r2)
    f100:	1009883a 	mov	r4,r2
    f104:	d8800d15 	stw	r2,52(sp)
    f108:	000d6fc0 	call	d6fc <strlen>
    f10c:	d8800b15 	stw	r2,44(sp)
    f110:	98000226 	beq	r19,zero,f11c <___vfprintf_internal_r+0x60>
    f114:	98800e17 	ldw	r2,56(r19)
    f118:	1001de26 	beq	r2,zero,f894 <___vfprintf_internal_r+0x7d8>
    f11c:	9080030b 	ldhu	r2,12(r18)
    f120:	10c8000c 	andi	r3,r2,8192
    f124:	1800061e 	bne	r3,zero,f140 <___vfprintf_internal_r+0x84>
    f128:	90c01917 	ldw	r3,100(r18)
    f12c:	0137ffc4 	movi	r4,-8193
    f130:	10880014 	ori	r2,r2,8192
    f134:	1906703a 	and	r3,r3,r4
    f138:	9080030d 	sth	r2,12(r18)
    f13c:	90c01915 	stw	r3,100(r18)
    f140:	10c0020c 	andi	r3,r2,8
    f144:	1800fa26 	beq	r3,zero,f530 <___vfprintf_internal_r+0x474>
    f148:	90c00417 	ldw	r3,16(r18)
    f14c:	1800f826 	beq	r3,zero,f530 <___vfprintf_internal_r+0x474>
    f150:	1080068c 	andi	r2,r2,26
    f154:	10800298 	cmpnei	r2,r2,10
    f158:	1000fd26 	beq	r2,zero,f550 <___vfprintf_internal_r+0x494>
    f15c:	d8802704 	addi	r2,sp,156
    f160:	b02f883a 	mov	r23,r22
    f164:	d8801a15 	stw	r2,104(sp)
    f168:	d8001c15 	stw	zero,112(sp)
    f16c:	d8001b15 	stw	zero,108(sp)
    f170:	d8000815 	stw	zero,32(sp)
    f174:	d8000915 	stw	zero,36(sp)
    f178:	d8000a15 	stw	zero,40(sp)
    f17c:	d8000c15 	stw	zero,48(sp)
    f180:	d8001015 	stw	zero,64(sp)
    f184:	d8000515 	stw	zero,20(sp)
    f188:	102d883a 	mov	r22,r2
    f18c:	b8800007 	ldb	r2,0(r23)
    f190:	1000d526 	beq	r2,zero,f4e8 <___vfprintf_internal_r+0x42c>
    f194:	b821883a 	mov	r16,r23
    f198:	00000306 	br	f1a8 <___vfprintf_internal_r+0xec>
    f19c:	80800047 	ldb	r2,1(r16)
    f1a0:	84000044 	addi	r16,r16,1
    f1a4:	10012026 	beq	r2,zero,f628 <___vfprintf_internal_r+0x56c>
    f1a8:	10800958 	cmpnei	r2,r2,37
    f1ac:	103ffb1e 	bne	r2,zero,f19c <___vfprintf_internal_r+0xe0>
    f1b0:	85e3c83a 	sub	r17,r16,r23
    f1b4:	85c11e1e 	bne	r16,r23,f630 <___vfprintf_internal_r+0x574>
    f1b8:	80800003 	ldbu	r2,0(r16)
    f1bc:	10803fcc 	andi	r2,r2,255
    f1c0:	1080201c 	xori	r2,r2,128
    f1c4:	10bfe004 	addi	r2,r2,-128
    f1c8:	1000c726 	beq	r2,zero,f4e8 <___vfprintf_internal_r+0x42c>
    f1cc:	82c00047 	ldb	r11,1(r16)
    f1d0:	85c00044 	addi	r23,r16,1
    f1d4:	d8001345 	stb	zero,77(sp)
    f1d8:	0009883a 	mov	r4,zero
    f1dc:	000b883a 	mov	r5,zero
    f1e0:	023fffc4 	movi	r8,-1
    f1e4:	0021883a 	mov	r16,zero
    f1e8:	0019883a 	mov	r12,zero
    f1ec:	bdc00044 	addi	r23,r23,1
    f1f0:	5839883a 	mov	fp,r11
    f1f4:	e0bff804 	addi	r2,fp,-32
    f1f8:	10c01668 	cmpgeui	r3,r2,89
    f1fc:	18006a1e 	bne	r3,zero,f3a8 <___vfprintf_internal_r+0x2ec>
    f200:	100490ba 	slli	r2,r2,2
    f204:	00c00074 	movhi	r3,1
    f208:	10c7883a 	add	r3,r2,r3
    f20c:	18bc8517 	ldw	r2,-3564(r3)
    f210:	1000683a 	jmp	r2
    f214:	0000fab8 	rdprs	zero,zero,1002
    f218:	0000f3a8 	cmpgeui	zero,zero,974
    f21c:	0000f3a8 	cmpgeui	zero,zero,974
    f220:	0000faac 	andhi	zero,zero,1002
    f224:	0000f3a8 	cmpgeui	zero,zero,974
    f228:	0000f3a8 	cmpgeui	zero,zero,974
    f22c:	0000f3a8 	cmpgeui	zero,zero,974
    f230:	0000f3a8 	cmpgeui	zero,zero,974
    f234:	0000f3a8 	cmpgeui	zero,zero,974
    f238:	0000f3a8 	cmpgeui	zero,zero,974
    f23c:	0000f938 	rdprs	zero,zero,996
    f240:	0000fa9c 	xori	zero,zero,1002
    f244:	0000f3a8 	cmpgeui	zero,zero,974
    f248:	0000f950 	cmplti	zero,zero,997
    f24c:	0000f95c 	xori	zero,zero,997
    f250:	0000f3a8 	cmpgeui	zero,zero,974
    f254:	0000fa90 	cmplti	zero,zero,1002
    f258:	0000f378 	rdprs	zero,zero,973
    f25c:	0000f378 	rdprs	zero,zero,973
    f260:	0000f378 	rdprs	zero,zero,973
    f264:	0000f378 	rdprs	zero,zero,973
    f268:	0000f378 	rdprs	zero,zero,973
    f26c:	0000f378 	rdprs	zero,zero,973
    f270:	0000f378 	rdprs	zero,zero,973
    f274:	0000f378 	rdprs	zero,zero,973
    f278:	0000f378 	rdprs	zero,zero,973
    f27c:	0000f3a8 	cmpgeui	zero,zero,974
    f280:	0000f3a8 	cmpgeui	zero,zero,974
    f284:	0000f3a8 	cmpgeui	zero,zero,974
    f288:	0000f3a8 	cmpgeui	zero,zero,974
    f28c:	0000f3a8 	cmpgeui	zero,zero,974
    f290:	0000f3a8 	cmpgeui	zero,zero,974
    f294:	0000f3a8 	cmpgeui	zero,zero,974
    f298:	0000f3a8 	cmpgeui	zero,zero,974
    f29c:	0000f3a8 	cmpgeui	zero,zero,974
    f2a0:	0000f3a8 	cmpgeui	zero,zero,974
    f2a4:	0000f9a0 	cmpeqi	zero,zero,998
    f2a8:	0000f68c 	andi	zero,zero,986
    f2ac:	0000f3a8 	cmpgeui	zero,zero,974
    f2b0:	0000f68c 	andi	zero,zero,986
    f2b4:	0000f3a8 	cmpgeui	zero,zero,974
    f2b8:	0000f3a8 	cmpgeui	zero,zero,974
    f2bc:	0000f3a8 	cmpgeui	zero,zero,974
    f2c0:	0000f3a8 	cmpgeui	zero,zero,974
    f2c4:	0000fc38 	rdprs	zero,zero,1008
    f2c8:	0000f3a8 	cmpgeui	zero,zero,974
    f2cc:	0000f3a8 	cmpgeui	zero,zero,974
    f2d0:	0000f5c0 	call	f5c <kf_bfly5+0x35c>
    f2d4:	0000f3a8 	cmpgeui	zero,zero,974
    f2d8:	0000f3a8 	cmpgeui	zero,zero,974
    f2dc:	0000f3a8 	cmpgeui	zero,zero,974
    f2e0:	0000f3a8 	cmpgeui	zero,zero,974
    f2e4:	0000f3a8 	cmpgeui	zero,zero,974
    f2e8:	0000f598 	cmpnei	zero,zero,982
    f2ec:	0000f3a8 	cmpgeui	zero,zero,974
    f2f0:	0000f3a8 	cmpgeui	zero,zero,974
    f2f4:	0000fc78 	rdprs	zero,zero,1009
    f2f8:	0000f3a8 	cmpgeui	zero,zero,974
    f2fc:	0000f3a8 	cmpgeui	zero,zero,974
    f300:	0000f3a8 	cmpgeui	zero,zero,974
    f304:	0000f3a8 	cmpgeui	zero,zero,974
    f308:	0000f3a8 	cmpgeui	zero,zero,974
    f30c:	0000f3a8 	cmpgeui	zero,zero,974
    f310:	0000f3a8 	cmpgeui	zero,zero,974
    f314:	0000f3a8 	cmpgeui	zero,zero,974
    f318:	0000f3a8 	cmpgeui	zero,zero,974
    f31c:	0000f3a8 	cmpgeui	zero,zero,974
    f320:	0000fc50 	cmplti	zero,zero,1009
    f324:	0000f8a0 	cmpeqi	zero,zero,994
    f328:	0000f68c 	andi	zero,zero,986
    f32c:	0000f68c 	andi	zero,zero,986
    f330:	0000f68c 	andi	zero,zero,986
    f334:	0000fc44 	movi	zero,1009
    f338:	0000f8a0 	cmpeqi	zero,zero,994
    f33c:	0000f3a8 	cmpgeui	zero,zero,974
    f340:	0000f3a8 	cmpgeui	zero,zero,974
    f344:	0000fae4 	muli	zero,zero,1003
    f348:	0000f3a8 	cmpgeui	zero,zero,974
    f34c:	0000fbf8 	rdprs	zero,zero,1007
    f350:	0000f5c4 	movi	zero,983
    f354:	0000fbb8 	rdprs	zero,zero,1006
    f358:	0000fbac 	andhi	zero,zero,1006
    f35c:	0000f3a8 	cmpgeui	zero,zero,974
    f360:	0000fb54 	movui	zero,1005
    f364:	0000f3a8 	cmpgeui	zero,zero,974
    f368:	0000f59c 	xori	zero,zero,982
    f36c:	0000f3a8 	cmpgeui	zero,zero,974
    f370:	0000f3a8 	cmpgeui	zero,zero,974
    f374:	0000fb0c 	andi	zero,zero,1004
    f378:	0021883a 	mov	r16,zero
    f37c:	e0bff404 	addi	r2,fp,-48
    f380:	bf000007 	ldb	fp,0(r23)
    f384:	840002a4 	muli	r16,r16,10
    f388:	bdc00044 	addi	r23,r23,1
    f38c:	1421883a 	add	r16,r2,r16
    f390:	e0bff404 	addi	r2,fp,-48
    f394:	10c002b0 	cmpltui	r3,r2,10
    f398:	183ff91e 	bne	r3,zero,f380 <___vfprintf_internal_r+0x2c4>
    f39c:	e0bff804 	addi	r2,fp,-32
    f3a0:	10c01668 	cmpgeui	r3,r2,89
    f3a4:	183f9626 	beq	r3,zero,f200 <___vfprintf_internal_r+0x144>
    f3a8:	21003fcc 	andi	r4,r4,255
    f3ac:	2006521e 	bne	r4,zero,10cf8 <___vfprintf_internal_r+0x1c3c>
    f3b0:	e0004d26 	beq	fp,zero,f4e8 <___vfprintf_internal_r+0x42c>
    f3b4:	df001d05 	stb	fp,116(sp)
    f3b8:	d8001345 	stb	zero,77(sp)
    f3bc:	05000044 	movi	r20,1
    f3c0:	05400044 	movi	r21,1
    f3c4:	dc401d04 	addi	r17,sp,116
    f3c8:	db000415 	stw	r12,16(sp)
    f3cc:	0011883a 	mov	r8,zero
    f3d0:	d8000715 	stw	zero,28(sp)
    f3d4:	d8800417 	ldw	r2,16(sp)
    f3d8:	1380008c 	andi	r14,r2,2
    f3dc:	70000126 	beq	r14,zero,f3e4 <___vfprintf_internal_r+0x328>
    f3e0:	a5000084 	addi	r20,r20,2
    f3e4:	d8800417 	ldw	r2,16(sp)
    f3e8:	d8c01c17 	ldw	r3,112(sp)
    f3ec:	1340210c 	andi	r13,r2,132
    f3f0:	6800021e 	bne	r13,zero,f3fc <___vfprintf_internal_r+0x340>
    f3f4:	850fc83a 	sub	r7,r16,r20
    f3f8:	01c36916 	blt	zero,r7,101a0 <___vfprintf_internal_r+0x10e4>
    f3fc:	d8801347 	ldb	r2,77(sp)
    f400:	10000c26 	beq	r2,zero,f434 <___vfprintf_internal_r+0x378>
    f404:	d8801b17 	ldw	r2,108(sp)
    f408:	d9001344 	addi	r4,sp,77
    f40c:	18c00044 	addi	r3,r3,1
    f410:	10800044 	addi	r2,r2,1
    f414:	b1000015 	stw	r4,0(r22)
    f418:	01000044 	movi	r4,1
    f41c:	d8801b15 	stw	r2,108(sp)
    f420:	b1000115 	stw	r4,4(r22)
    f424:	d8c01c15 	stw	r3,112(sp)
    f428:	10800208 	cmpgei	r2,r2,8
    f42c:	10039d1e 	bne	r2,zero,102a4 <___vfprintf_internal_r+0x11e8>
    f430:	b5800204 	addi	r22,r22,8
    f434:	70000c26 	beq	r14,zero,f468 <___vfprintf_internal_r+0x3ac>
    f438:	d8801b17 	ldw	r2,108(sp)
    f43c:	d9001384 	addi	r4,sp,78
    f440:	18c00084 	addi	r3,r3,2
    f444:	10800044 	addi	r2,r2,1
    f448:	b1000015 	stw	r4,0(r22)
    f44c:	01000084 	movi	r4,2
    f450:	d8801b15 	stw	r2,108(sp)
    f454:	b1000115 	stw	r4,4(r22)
    f458:	d8c01c15 	stw	r3,112(sp)
    f45c:	10800208 	cmpgei	r2,r2,8
    f460:	10039e1e 	bne	r2,zero,102dc <___vfprintf_internal_r+0x1220>
    f464:	b5800204 	addi	r22,r22,8
    f468:	6b402018 	cmpnei	r13,r13,128
    f46c:	68025a26 	beq	r13,zero,fdd8 <___vfprintf_internal_r+0xd1c>
    f470:	4551c83a 	sub	r8,r8,r21
    f474:	02029216 	blt	zero,r8,fec0 <___vfprintf_internal_r+0xe04>
    f478:	d8800417 	ldw	r2,16(sp)
    f47c:	1080400c 	andi	r2,r2,256
    f480:	10020f1e 	bne	r2,zero,fcc0 <___vfprintf_internal_r+0xc04>
    f484:	d8801b17 	ldw	r2,108(sp)
    f488:	1d47883a 	add	r3,r3,r21
    f48c:	b4400015 	stw	r17,0(r22)
    f490:	10800044 	addi	r2,r2,1
    f494:	b5400115 	stw	r21,4(r22)
    f498:	d8801b15 	stw	r2,108(sp)
    f49c:	d8c01c15 	stw	r3,112(sp)
    f4a0:	10800208 	cmpgei	r2,r2,8
    f4a4:	1002fb1e 	bne	r2,zero,10094 <___vfprintf_internal_r+0xfd8>
    f4a8:	b5800204 	addi	r22,r22,8
    f4ac:	d8800417 	ldw	r2,16(sp)
    f4b0:	1440010c 	andi	r17,r2,4
    f4b4:	88000226 	beq	r17,zero,f4c0 <___vfprintf_internal_r+0x404>
    f4b8:	8523c83a 	sub	r17,r16,r20
    f4bc:	0440c616 	blt	zero,r17,f7d8 <___vfprintf_internal_r+0x71c>
    f4c0:	8500010e 	bge	r16,r20,f4c8 <___vfprintf_internal_r+0x40c>
    f4c4:	a021883a 	mov	r16,r20
    f4c8:	d8800517 	ldw	r2,20(sp)
    f4cc:	1405883a 	add	r2,r2,r16
    f4d0:	d8800515 	stw	r2,20(sp)
    f4d4:	1802c11e 	bne	r3,zero,ffdc <___vfprintf_internal_r+0xf20>
    f4d8:	b8800007 	ldb	r2,0(r23)
    f4dc:	d8001b15 	stw	zero,108(sp)
    f4e0:	dd802704 	addi	r22,sp,156
    f4e4:	103f2b1e 	bne	r2,zero,f194 <___vfprintf_internal_r+0xd8>
    f4e8:	d8801c17 	ldw	r2,112(sp)
    f4ec:	1005fd1e 	bne	r2,zero,10ce4 <___vfprintf_internal_r+0x1c28>
    f4f0:	9080030b 	ldhu	r2,12(r18)
    f4f4:	1080100c 	andi	r2,r2,64
    f4f8:	1006a91e 	bne	r2,zero,10fa0 <___vfprintf_internal_r+0x1ee4>
    f4fc:	d8800517 	ldw	r2,20(sp)
    f500:	dfc04017 	ldw	ra,256(sp)
    f504:	df003f17 	ldw	fp,252(sp)
    f508:	ddc03e17 	ldw	r23,248(sp)
    f50c:	dd803d17 	ldw	r22,244(sp)
    f510:	dd403c17 	ldw	r21,240(sp)
    f514:	dd003b17 	ldw	r20,236(sp)
    f518:	dcc03a17 	ldw	r19,232(sp)
    f51c:	dc803917 	ldw	r18,228(sp)
    f520:	dc403817 	ldw	r17,224(sp)
    f524:	dc003717 	ldw	r16,220(sp)
    f528:	dec04104 	addi	sp,sp,260
    f52c:	f800283a 	ret
    f530:	900b883a 	mov	r5,r18
    f534:	9809883a 	mov	r4,r19
    f538:	00111a00 	call	111a0 <__swsetup_r>
    f53c:	1006981e 	bne	r2,zero,10fa0 <___vfprintf_internal_r+0x1ee4>
    f540:	9080030b 	ldhu	r2,12(r18)
    f544:	1080068c 	andi	r2,r2,26
    f548:	10800298 	cmpnei	r2,r2,10
    f54c:	103f031e 	bne	r2,zero,f15c <___vfprintf_internal_r+0xa0>
    f550:	9080038f 	ldh	r2,14(r18)
    f554:	103f0116 	blt	r2,zero,f15c <___vfprintf_internal_r+0xa0>
    f558:	d9c00617 	ldw	r7,24(sp)
    f55c:	b00d883a 	mov	r6,r22
    f560:	900b883a 	mov	r5,r18
    f564:	9809883a 	mov	r4,r19
    f568:	dfc04017 	ldw	ra,256(sp)
    f56c:	df003f17 	ldw	fp,252(sp)
    f570:	ddc03e17 	ldw	r23,248(sp)
    f574:	dd803d17 	ldw	r22,244(sp)
    f578:	dd403c17 	ldw	r21,240(sp)
    f57c:	dd003b17 	ldw	r20,236(sp)
    f580:	dcc03a17 	ldw	r19,232(sp)
    f584:	dc803917 	ldw	r18,228(sp)
    f588:	dc403817 	ldw	r17,224(sp)
    f58c:	dc003717 	ldw	r16,220(sp)
    f590:	dec04104 	addi	sp,sp,260
    f594:	00110e01 	jmpi	110e0 <__sbprintf>
    f598:	63000414 	ori	r12,r12,16
    f59c:	6080080c 	andi	r2,r12,32
    f5a0:	10008126 	beq	r2,zero,f7a8 <___vfprintf_internal_r+0x6ec>
    f5a4:	d8c00617 	ldw	r3,24(sp)
    f5a8:	00800044 	movi	r2,1
    f5ac:	1d000017 	ldw	r20,0(r3)
    f5b0:	1d400117 	ldw	r21,4(r3)
    f5b4:	18c00204 	addi	r3,r3,8
    f5b8:	d8c00615 	stw	r3,24(sp)
    f5bc:	00000906 	br	f5e4 <___vfprintf_internal_r+0x528>
    f5c0:	63000414 	ori	r12,r12,16
    f5c4:	6080080c 	andi	r2,r12,32
    f5c8:	10006b26 	beq	r2,zero,f778 <___vfprintf_internal_r+0x6bc>
    f5cc:	d8c00617 	ldw	r3,24(sp)
    f5d0:	0005883a 	mov	r2,zero
    f5d4:	1d000017 	ldw	r20,0(r3)
    f5d8:	1d400117 	ldw	r21,4(r3)
    f5dc:	18c00204 	addi	r3,r3,8
    f5e0:	d8c00615 	stw	r3,24(sp)
    f5e4:	d8001345 	stb	zero,77(sp)
    f5e8:	40ffffe0 	cmpeqi	r3,r8,-1
    f5ec:	001b883a 	mov	r13,zero
    f5f0:	1801081e 	bne	r3,zero,fa14 <___vfprintf_internal_r+0x958>
    f5f4:	047fdfc4 	movi	r17,-129
    f5f8:	6448703a 	and	r4,r12,r17
    f5fc:	a546b03a 	or	r3,r20,r21
    f600:	d9000415 	stw	r4,16(sp)
    f604:	1802e41e 	bne	r3,zero,10198 <___vfprintf_internal_r+0x10dc>
    f608:	40025e1e 	bne	r8,zero,ff84 <___vfprintf_internal_r+0xec8>
    f60c:	1003ac1e 	bne	r2,zero,104c0 <___vfprintf_internal_r+0x1404>
    f610:	6540004c 	andi	r21,r12,1
    f614:	a803e226 	beq	r21,zero,105a0 <___vfprintf_internal_r+0x14e4>
    f618:	00800c04 	movi	r2,48
    f61c:	d88026c5 	stb	r2,155(sp)
    f620:	dc4026c4 	addi	r17,sp,155
    f624:	0000ba06 	br	f910 <___vfprintf_internal_r+0x854>
    f628:	85e3c83a 	sub	r17,r16,r23
    f62c:	85ffae26 	beq	r16,r23,f4e8 <___vfprintf_internal_r+0x42c>
    f630:	d8c01c17 	ldw	r3,112(sp)
    f634:	d8801b17 	ldw	r2,108(sp)
    f638:	b5c00015 	stw	r23,0(r22)
    f63c:	1c47883a 	add	r3,r3,r17
    f640:	10800044 	addi	r2,r2,1
    f644:	d8801b15 	stw	r2,108(sp)
    f648:	b4400115 	stw	r17,4(r22)
    f64c:	d8c01c15 	stw	r3,112(sp)
    f650:	10800208 	cmpgei	r2,r2,8
    f654:	1000061e 	bne	r2,zero,f670 <___vfprintf_internal_r+0x5b4>
    f658:	b5800204 	addi	r22,r22,8
    f65c:	d8c00517 	ldw	r3,20(sp)
    f660:	80800003 	ldbu	r2,0(r16)
    f664:	1c47883a 	add	r3,r3,r17
    f668:	d8c00515 	stw	r3,20(sp)
    f66c:	003ed306 	br	f1bc <___vfprintf_internal_r+0x100>
    f670:	d9801a04 	addi	r6,sp,104
    f674:	900b883a 	mov	r5,r18
    f678:	9809883a 	mov	r4,r19
    f67c:	0016a440 	call	16a44 <__sprint_r>
    f680:	103f9b1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
    f684:	dd802704 	addi	r22,sp,156
    f688:	003ff406 	br	f65c <___vfprintf_internal_r+0x5a0>
    f68c:	21003fcc 	andi	r4,r4,255
    f690:	2006271e 	bne	r4,zero,10f30 <___vfprintf_internal_r+0x1e74>
    f694:	d8c00617 	ldw	r3,24(sp)
    f698:	6080020c 	andi	r2,r12,8
    f69c:	19000204 	addi	r4,r3,8
    f6a0:	d9000e15 	stw	r4,56(sp)
    f6a4:	1003c01e 	bne	r2,zero,105a8 <___vfprintf_internal_r+0x14ec>
    f6a8:	d8800617 	ldw	r2,24(sp)
    f6ac:	10c00017 	ldw	r3,0(r2)
    f6b0:	10800117 	ldw	r2,4(r2)
    f6b4:	d8c00915 	stw	r3,36(sp)
    f6b8:	d8800a15 	stw	r2,40(sp)
    f6bc:	dd400a17 	ldw	r21,40(sp)
    f6c0:	dd000917 	ldw	r20,36(sp)
    f6c4:	00a00034 	movhi	r2,32768
    f6c8:	10bfffc4 	addi	r2,r2,-1
    f6cc:	a8a2703a 	and	r17,r21,r2
    f6d0:	01dffc34 	movhi	r7,32752
    f6d4:	01bfffc4 	movi	r6,-1
    f6d8:	39ffffc4 	addi	r7,r7,-1
    f6dc:	a009883a 	mov	r4,r20
    f6e0:	880b883a 	mov	r5,r17
    f6e4:	da000615 	stw	r8,24(sp)
    f6e8:	db000415 	stw	r12,16(sp)
    f6ec:	000c7780 	call	c778 <__unorddf2>
    f6f0:	db000417 	ldw	r12,16(sp)
    f6f4:	da000617 	ldw	r8,24(sp)
    f6f8:	10044b1e 	bne	r2,zero,10828 <___vfprintf_internal_r+0x176c>
    f6fc:	01dffc34 	movhi	r7,32752
    f700:	01bfffc4 	movi	r6,-1
    f704:	39ffffc4 	addi	r7,r7,-1
    f708:	a009883a 	mov	r4,r20
    f70c:	880b883a 	mov	r5,r17
    f710:	000b7100 	call	b710 <__ledf2>
    f714:	db000417 	ldw	r12,16(sp)
    f718:	da000617 	ldw	r8,24(sp)
    f71c:	0084420e 	bge	zero,r2,10828 <___vfprintf_internal_r+0x176c>
    f720:	000d883a 	mov	r6,zero
    f724:	000f883a 	mov	r7,zero
    f728:	a009883a 	mov	r4,r20
    f72c:	a80b883a 	mov	r5,r21
    f730:	000b7100 	call	b710 <__ledf2>
    f734:	db000417 	ldw	r12,16(sp)
    f738:	10055716 	blt	r2,zero,10c98 <___vfprintf_internal_r+0x1bdc>
    f73c:	db401343 	ldbu	r13,77(sp)
    f740:	e0801210 	cmplti	r2,fp,72
    f744:	1005451e 	bne	r2,zero,10c5c <___vfprintf_internal_r+0x1ba0>
    f748:	044000b4 	movhi	r17,2
    f74c:	8c45c804 	addi	r17,r17,5920
    f750:	00bfdfc4 	movi	r2,-129
    f754:	6084703a 	and	r2,r12,r2
    f758:	d8800415 	stw	r2,16(sp)
    f75c:	d8800e17 	ldw	r2,56(sp)
    f760:	050000c4 	movi	r20,3
    f764:	054000c4 	movi	r21,3
    f768:	d8800615 	stw	r2,24(sp)
    f76c:	0011883a 	mov	r8,zero
    f770:	d8000715 	stw	zero,28(sp)
    f774:	00006a06 	br	f920 <___vfprintf_internal_r+0x864>
    f778:	d8c00617 	ldw	r3,24(sp)
    f77c:	6080040c 	andi	r2,r12,16
    f780:	1d000017 	ldw	r20,0(r3)
    f784:	18c00104 	addi	r3,r3,4
    f788:	d8c00615 	stw	r3,24(sp)
    f78c:	1000031e 	bne	r2,zero,f79c <___vfprintf_internal_r+0x6e0>
    f790:	6080100c 	andi	r2,r12,64
    f794:	10000126 	beq	r2,zero,f79c <___vfprintf_internal_r+0x6e0>
    f798:	a53fffcc 	andi	r20,r20,65535
    f79c:	002b883a 	mov	r21,zero
    f7a0:	0005883a 	mov	r2,zero
    f7a4:	003f8f06 	br	f5e4 <___vfprintf_internal_r+0x528>
    f7a8:	d8c00617 	ldw	r3,24(sp)
    f7ac:	6080040c 	andi	r2,r12,16
    f7b0:	1d000017 	ldw	r20,0(r3)
    f7b4:	18c00104 	addi	r3,r3,4
    f7b8:	d8c00615 	stw	r3,24(sp)
    f7bc:	1000031e 	bne	r2,zero,f7cc <___vfprintf_internal_r+0x710>
    f7c0:	6080100c 	andi	r2,r12,64
    f7c4:	10000126 	beq	r2,zero,f7cc <___vfprintf_internal_r+0x710>
    f7c8:	a53fffcc 	andi	r20,r20,65535
    f7cc:	002b883a 	mov	r21,zero
    f7d0:	00800044 	movi	r2,1
    f7d4:	003f8306 	br	f5e4 <___vfprintf_internal_r+0x528>
    f7d8:	030000b4 	movhi	r12,2
    f7dc:	89000450 	cmplti	r4,r17,17
    f7e0:	d8801b17 	ldw	r2,108(sp)
    f7e4:	6305dc04 	addi	r12,r12,6000
    f7e8:	20001b1e 	bne	r4,zero,f858 <___vfprintf_internal_r+0x79c>
    f7ec:	05400404 	movi	r21,16
    f7f0:	6039883a 	mov	fp,r12
    f7f4:	00000406 	br	f808 <___vfprintf_internal_r+0x74c>
    f7f8:	8c7ffc04 	addi	r17,r17,-16
    f7fc:	89000448 	cmpgei	r4,r17,17
    f800:	b5800204 	addi	r22,r22,8
    f804:	20001326 	beq	r4,zero,f854 <___vfprintf_internal_r+0x798>
    f808:	10800044 	addi	r2,r2,1
    f80c:	18c00404 	addi	r3,r3,16
    f810:	b7000015 	stw	fp,0(r22)
    f814:	b5400115 	stw	r21,4(r22)
    f818:	d8c01c15 	stw	r3,112(sp)
    f81c:	d8801b15 	stw	r2,108(sp)
    f820:	11000208 	cmpgei	r4,r2,8
    f824:	203ff426 	beq	r4,zero,f7f8 <___vfprintf_internal_r+0x73c>
    f828:	d9801a04 	addi	r6,sp,104
    f82c:	900b883a 	mov	r5,r18
    f830:	9809883a 	mov	r4,r19
    f834:	0016a440 	call	16a44 <__sprint_r>
    f838:	103f2d1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
    f83c:	8c7ffc04 	addi	r17,r17,-16
    f840:	89000448 	cmpgei	r4,r17,17
    f844:	d8c01c17 	ldw	r3,112(sp)
    f848:	d8801b17 	ldw	r2,108(sp)
    f84c:	dd802704 	addi	r22,sp,156
    f850:	203fed1e 	bne	r4,zero,f808 <___vfprintf_internal_r+0x74c>
    f854:	e019883a 	mov	r12,fp
    f858:	10800044 	addi	r2,r2,1
    f85c:	1c47883a 	add	r3,r3,r17
    f860:	d8801b15 	stw	r2,108(sp)
    f864:	b3000015 	stw	r12,0(r22)
    f868:	b4400115 	stw	r17,4(r22)
    f86c:	d8c01c15 	stw	r3,112(sp)
    f870:	10800210 	cmplti	r2,r2,8
    f874:	103f121e 	bne	r2,zero,f4c0 <___vfprintf_internal_r+0x404>
    f878:	d9801a04 	addi	r6,sp,104
    f87c:	900b883a 	mov	r5,r18
    f880:	9809883a 	mov	r4,r19
    f884:	0016a440 	call	16a44 <__sprint_r>
    f888:	103f191e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
    f88c:	d8c01c17 	ldw	r3,112(sp)
    f890:	003f0b06 	br	f4c0 <___vfprintf_internal_r+0x404>
    f894:	9809883a 	mov	r4,r19
    f898:	00132a80 	call	132a8 <__sinit>
    f89c:	003e1f06 	br	f11c <___vfprintf_internal_r+0x60>
    f8a0:	21003fcc 	andi	r4,r4,255
    f8a4:	2005a41e 	bne	r4,zero,10f38 <___vfprintf_internal_r+0x1e7c>
    f8a8:	6080080c 	andi	r2,r12,32
    f8ac:	10004126 	beq	r2,zero,f9b4 <___vfprintf_internal_r+0x8f8>
    f8b0:	d8c00617 	ldw	r3,24(sp)
    f8b4:	18800117 	ldw	r2,4(r3)
    f8b8:	1d000017 	ldw	r20,0(r3)
    f8bc:	18c00204 	addi	r3,r3,8
    f8c0:	d8c00615 	stw	r3,24(sp)
    f8c4:	102b883a 	mov	r21,r2
    f8c8:	10004816 	blt	r2,zero,f9ec <___vfprintf_internal_r+0x930>
    f8cc:	40bfffd8 	cmpnei	r2,r8,-1
    f8d0:	db401343 	ldbu	r13,77(sp)
    f8d4:	10000626 	beq	r2,zero,f8f0 <___vfprintf_internal_r+0x834>
    f8d8:	047fdfc4 	movi	r17,-129
    f8dc:	6446703a 	and	r3,r12,r17
    f8e0:	a544b03a 	or	r2,r20,r21
    f8e4:	d8c00415 	stw	r3,16(sp)
    f8e8:	1002f426 	beq	r2,zero,104bc <___vfprintf_internal_r+0x1400>
    f8ec:	db000417 	ldw	r12,16(sp)
    f8f0:	a8037d1e 	bne	r21,zero,106e8 <___vfprintf_internal_r+0x162c>
    f8f4:	a08002a8 	cmpgeui	r2,r20,10
    f8f8:	10037b1e 	bne	r2,zero,106e8 <___vfprintf_internal_r+0x162c>
    f8fc:	a5000c04 	addi	r20,r20,48
    f900:	dd0026c5 	stb	r20,155(sp)
    f904:	db000415 	stw	r12,16(sp)
    f908:	05400044 	movi	r21,1
    f90c:	dc4026c4 	addi	r17,sp,155
    f910:	4029883a 	mov	r20,r8
    f914:	4540010e 	bge	r8,r21,f91c <___vfprintf_internal_r+0x860>
    f918:	a829883a 	mov	r20,r21
    f91c:	d8000715 	stw	zero,28(sp)
    f920:	6b403fcc 	andi	r13,r13,255
    f924:	6b40201c 	xori	r13,r13,128
    f928:	6b7fe004 	addi	r13,r13,-128
    f92c:	683ea926 	beq	r13,zero,f3d4 <___vfprintf_internal_r+0x318>
    f930:	a5000044 	addi	r20,r20,1
    f934:	003ea706 	br	f3d4 <___vfprintf_internal_r+0x318>
    f938:	d8800617 	ldw	r2,24(sp)
    f93c:	14000017 	ldw	r16,0(r2)
    f940:	10800104 	addi	r2,r2,4
    f944:	8003130e 	bge	r16,zero,10594 <___vfprintf_internal_r+0x14d8>
    f948:	0421c83a 	sub	r16,zero,r16
    f94c:	d8800615 	stw	r2,24(sp)
    f950:	bac00007 	ldb	r11,0(r23)
    f954:	63000114 	ori	r12,r12,4
    f958:	003e2406 	br	f1ec <___vfprintf_internal_r+0x130>
    f95c:	bf000007 	ldb	fp,0(r23)
    f960:	b8c00044 	addi	r3,r23,1
    f964:	e0800aa0 	cmpeqi	r2,fp,42
    f968:	1005c71e 	bne	r2,zero,11088 <___vfprintf_internal_r+0x1fcc>
    f96c:	e0bff404 	addi	r2,fp,-48
    f970:	118002b0 	cmpltui	r6,r2,10
    f974:	182f883a 	mov	r23,r3
    f978:	0011883a 	mov	r8,zero
    f97c:	303e1d26 	beq	r6,zero,f1f4 <___vfprintf_internal_r+0x138>
    f980:	bf000007 	ldb	fp,0(r23)
    f984:	420002a4 	muli	r8,r8,10
    f988:	bdc00044 	addi	r23,r23,1
    f98c:	4091883a 	add	r8,r8,r2
    f990:	e0bff404 	addi	r2,fp,-48
    f994:	10c002b0 	cmpltui	r3,r2,10
    f998:	183ff91e 	bne	r3,zero,f980 <___vfprintf_internal_r+0x8c4>
    f99c:	003e1506 	br	f1f4 <___vfprintf_internal_r+0x138>
    f9a0:	21003fcc 	andi	r4,r4,255
    f9a4:	20055e1e 	bne	r4,zero,10f20 <___vfprintf_internal_r+0x1e64>
    f9a8:	63000414 	ori	r12,r12,16
    f9ac:	6080080c 	andi	r2,r12,32
    f9b0:	103fbf1e 	bne	r2,zero,f8b0 <___vfprintf_internal_r+0x7f4>
    f9b4:	d8c00617 	ldw	r3,24(sp)
    f9b8:	6080040c 	andi	r2,r12,16
    f9bc:	1d000017 	ldw	r20,0(r3)
    f9c0:	18c00104 	addi	r3,r3,4
    f9c4:	d8c00615 	stw	r3,24(sp)
    f9c8:	1002e91e 	bne	r2,zero,10570 <___vfprintf_internal_r+0x14b4>
    f9cc:	6080100c 	andi	r2,r12,64
    f9d0:	1002e726 	beq	r2,zero,10570 <___vfprintf_internal_r+0x14b4>
    f9d4:	a53fffcc 	andi	r20,r20,65535
    f9d8:	a520001c 	xori	r20,r20,32768
    f9dc:	a5200004 	addi	r20,r20,-32768
    f9e0:	a02bd7fa 	srai	r21,r20,31
    f9e4:	a805883a 	mov	r2,r21
    f9e8:	103fb80e 	bge	r2,zero,f8cc <___vfprintf_internal_r+0x810>
    f9ec:	a004c03a 	cmpne	r2,r20,zero
    f9f0:	056bc83a 	sub	r21,zero,r21
    f9f4:	a8abc83a 	sub	r21,r21,r2
    f9f8:	00800b44 	movi	r2,45
    f9fc:	d8801345 	stb	r2,77(sp)
    fa00:	40ffffe0 	cmpeqi	r3,r8,-1
    fa04:	0529c83a 	sub	r20,zero,r20
    fa08:	03400b44 	movi	r13,45
    fa0c:	00800044 	movi	r2,1
    fa10:	183ef826 	beq	r3,zero,f5f4 <___vfprintf_internal_r+0x538>
    fa14:	10c00060 	cmpeqi	r3,r2,1
    fa18:	183fb51e 	bne	r3,zero,f8f0 <___vfprintf_internal_r+0x834>
    fa1c:	108000a0 	cmpeqi	r2,r2,2
    fa20:	10015d1e 	bne	r2,zero,ff98 <___vfprintf_internal_r+0xedc>
    fa24:	dc402704 	addi	r17,sp,156
    fa28:	a006d0fa 	srli	r3,r20,3
    fa2c:	a808977a 	slli	r4,r21,29
    fa30:	a82ad0fa 	srli	r21,r21,3
    fa34:	a50001cc 	andi	r20,r20,7
    fa38:	a0800c04 	addi	r2,r20,48
    fa3c:	20e8b03a 	or	r20,r4,r3
    fa40:	88bfffc5 	stb	r2,-1(r17)
    fa44:	a546b03a 	or	r3,r20,r21
    fa48:	880b883a 	mov	r5,r17
    fa4c:	8c7fffc4 	addi	r17,r17,-1
    fa50:	183ff51e 	bne	r3,zero,fa28 <___vfprintf_internal_r+0x96c>
    fa54:	60c0004c 	andi	r3,r12,1
    fa58:	18015c26 	beq	r3,zero,ffcc <___vfprintf_internal_r+0xf10>
    fa5c:	10803fcc 	andi	r2,r2,255
    fa60:	1080201c 	xori	r2,r2,128
    fa64:	10bfe004 	addi	r2,r2,-128
    fa68:	10800c18 	cmpnei	r2,r2,48
    fa6c:	10015726 	beq	r2,zero,ffcc <___vfprintf_internal_r+0xf10>
    fa70:	00800c04 	movi	r2,48
    fa74:	297fff84 	addi	r5,r5,-2
    fa78:	88bfffc5 	stb	r2,-1(r17)
    fa7c:	d8802704 	addi	r2,sp,156
    fa80:	116bc83a 	sub	r21,r2,r5
    fa84:	db000415 	stw	r12,16(sp)
    fa88:	2823883a 	mov	r17,r5
    fa8c:	003fa006 	br	f910 <___vfprintf_internal_r+0x854>
    fa90:	bac00007 	ldb	r11,0(r23)
    fa94:	63002014 	ori	r12,r12,128
    fa98:	003dd406 	br	f1ec <___vfprintf_internal_r+0x130>
    fa9c:	bac00007 	ldb	r11,0(r23)
    faa0:	01000044 	movi	r4,1
    faa4:	01400ac4 	movi	r5,43
    faa8:	003dd006 	br	f1ec <___vfprintf_internal_r+0x130>
    faac:	bac00007 	ldb	r11,0(r23)
    fab0:	63000054 	ori	r12,r12,1
    fab4:	003dcd06 	br	f1ec <___vfprintf_internal_r+0x130>
    fab8:	28803fcc 	andi	r2,r5,255
    fabc:	1080201c 	xori	r2,r2,128
    fac0:	10bfe004 	addi	r2,r2,-128
    fac4:	bf000003 	ldbu	fp,0(r23)
    fac8:	10000c1e 	bne	r2,zero,fafc <___vfprintf_internal_r+0xa40>
    facc:	e2c03fcc 	andi	r11,fp,255
    fad0:	5ac0201c 	xori	r11,r11,128
    fad4:	01000044 	movi	r4,1
    fad8:	01400804 	movi	r5,32
    fadc:	5affe004 	addi	r11,r11,-128
    fae0:	003dc206 	br	f1ec <___vfprintf_internal_r+0x130>
    fae4:	bac00007 	ldb	r11,0(r23)
    fae8:	58801b18 	cmpnei	r2,r11,108
    faec:	1002a71e 	bne	r2,zero,1058c <___vfprintf_internal_r+0x14d0>
    faf0:	bf000043 	ldbu	fp,1(r23)
    faf4:	63000814 	ori	r12,r12,32
    faf8:	bdc00044 	addi	r23,r23,1
    fafc:	e2c03fcc 	andi	r11,fp,255
    fb00:	5ac0201c 	xori	r11,r11,128
    fb04:	5affe004 	addi	r11,r11,-128
    fb08:	003db806 	br	f1ec <___vfprintf_internal_r+0x130>
    fb0c:	21003fcc 	andi	r4,r4,255
    fb10:	20050b1e 	bne	r4,zero,10f40 <___vfprintf_internal_r+0x1e84>
    fb14:	008000b4 	movhi	r2,2
    fb18:	1085cb04 	addi	r2,r2,5932
    fb1c:	d8800c15 	stw	r2,48(sp)
    fb20:	6080080c 	andi	r2,r12,32
    fb24:	10005b26 	beq	r2,zero,fc94 <___vfprintf_internal_r+0xbd8>
    fb28:	d8800617 	ldw	r2,24(sp)
    fb2c:	15000017 	ldw	r20,0(r2)
    fb30:	15400117 	ldw	r21,4(r2)
    fb34:	10800204 	addi	r2,r2,8
    fb38:	d8800615 	stw	r2,24(sp)
    fb3c:	6080004c 	andi	r2,r12,1
    fb40:	10000226 	beq	r2,zero,fb4c <___vfprintf_internal_r+0xa90>
    fb44:	a544b03a 	or	r2,r20,r21
    fb48:	10029c1e 	bne	r2,zero,105bc <___vfprintf_internal_r+0x1500>
    fb4c:	00800084 	movi	r2,2
    fb50:	003ea406 	br	f5e4 <___vfprintf_internal_r+0x528>
    fb54:	d8800617 	ldw	r2,24(sp)
    fb58:	d8001345 	stb	zero,77(sp)
    fb5c:	14400017 	ldw	r17,0(r2)
    fb60:	10c00104 	addi	r3,r2,4
    fb64:	8802ba26 	beq	r17,zero,10650 <___vfprintf_internal_r+0x1594>
    fb68:	40bfffe0 	cmpeqi	r2,r8,-1
    fb6c:	1003c61e 	bne	r2,zero,10a88 <___vfprintf_internal_r+0x19cc>
    fb70:	400d883a 	mov	r6,r8
    fb74:	000b883a 	mov	r5,zero
    fb78:	8809883a 	mov	r4,r17
    fb7c:	d8c00715 	stw	r3,28(sp)
    fb80:	db000615 	stw	r12,24(sp)
    fb84:	da000415 	stw	r8,16(sp)
    fb88:	0014d000 	call	14d00 <memchr>
    fb8c:	da000417 	ldw	r8,16(sp)
    fb90:	db000617 	ldw	r12,24(sp)
    fb94:	d8c00717 	ldw	r3,28(sp)
    fb98:	1004d126 	beq	r2,zero,10ee0 <___vfprintf_internal_r+0x1e24>
    fb9c:	146bc83a 	sub	r21,r2,r17
    fba0:	a829883a 	mov	r20,r21
    fba4:	d8c00615 	stw	r3,24(sp)
    fba8:	003e0706 	br	f3c8 <___vfprintf_internal_r+0x30c>
    fbac:	bac00007 	ldb	r11,0(r23)
    fbb0:	63000814 	ori	r12,r12,32
    fbb4:	003d8d06 	br	f1ec <___vfprintf_internal_r+0x130>
    fbb8:	d8c00617 	ldw	r3,24(sp)
    fbbc:	00800c04 	movi	r2,48
    fbc0:	d8801385 	stb	r2,78(sp)
    fbc4:	00801e04 	movi	r2,120
    fbc8:	010000b4 	movhi	r4,2
    fbcc:	d88013c5 	stb	r2,79(sp)
    fbd0:	18800104 	addi	r2,r3,4
    fbd4:	d8800615 	stw	r2,24(sp)
    fbd8:	2085cb04 	addi	r2,r4,5932
    fbdc:	d8800c15 	stw	r2,48(sp)
    fbe0:	1d000017 	ldw	r20,0(r3)
    fbe4:	002b883a 	mov	r21,zero
    fbe8:	63000094 	ori	r12,r12,2
    fbec:	00800084 	movi	r2,2
    fbf0:	07001e04 	movi	fp,120
    fbf4:	003e7b06 	br	f5e4 <___vfprintf_internal_r+0x528>
    fbf8:	21003fcc 	andi	r4,r4,255
    fbfc:	2004ca1e 	bne	r4,zero,10f28 <___vfprintf_internal_r+0x1e6c>
    fc00:	d9000617 	ldw	r4,24(sp)
    fc04:	6080080c 	andi	r2,r12,32
    fc08:	20c00104 	addi	r3,r4,4
    fc0c:	1002711e 	bne	r2,zero,105d4 <___vfprintf_internal_r+0x1518>
    fc10:	6080040c 	andi	r2,r12,16
    fc14:	1002dc1e 	bne	r2,zero,10788 <___vfprintf_internal_r+0x16cc>
    fc18:	6300100c 	andi	r12,r12,64
    fc1c:	6002da26 	beq	r12,zero,10788 <___vfprintf_internal_r+0x16cc>
    fc20:	d8800617 	ldw	r2,24(sp)
    fc24:	d8c00615 	stw	r3,24(sp)
    fc28:	d8c00517 	ldw	r3,20(sp)
    fc2c:	10800017 	ldw	r2,0(r2)
    fc30:	10c0000d 	sth	r3,0(r2)
    fc34:	003d5506 	br	f18c <___vfprintf_internal_r+0xd0>
    fc38:	bac00007 	ldb	r11,0(r23)
    fc3c:	63000214 	ori	r12,r12,8
    fc40:	003d6a06 	br	f1ec <___vfprintf_internal_r+0x130>
    fc44:	bac00007 	ldb	r11,0(r23)
    fc48:	63001014 	ori	r12,r12,64
    fc4c:	003d6706 	br	f1ec <___vfprintf_internal_r+0x130>
    fc50:	d8c00617 	ldw	r3,24(sp)
    fc54:	d8001345 	stb	zero,77(sp)
    fc58:	05000044 	movi	r20,1
    fc5c:	18800017 	ldw	r2,0(r3)
    fc60:	18c00104 	addi	r3,r3,4
    fc64:	d8c00615 	stw	r3,24(sp)
    fc68:	d8801d05 	stb	r2,116(sp)
    fc6c:	05400044 	movi	r21,1
    fc70:	dc401d04 	addi	r17,sp,116
    fc74:	003dd406 	br	f3c8 <___vfprintf_internal_r+0x30c>
    fc78:	21003fcc 	andi	r4,r4,255
    fc7c:	2004b21e 	bne	r4,zero,10f48 <___vfprintf_internal_r+0x1e8c>
    fc80:	008000b4 	movhi	r2,2
    fc84:	1085d004 	addi	r2,r2,5952
    fc88:	d8800c15 	stw	r2,48(sp)
    fc8c:	6080080c 	andi	r2,r12,32
    fc90:	103fa51e 	bne	r2,zero,fb28 <___vfprintf_internal_r+0xa6c>
    fc94:	d8c00617 	ldw	r3,24(sp)
    fc98:	6080040c 	andi	r2,r12,16
    fc9c:	1d000017 	ldw	r20,0(r3)
    fca0:	18c00104 	addi	r3,r3,4
    fca4:	d8c00615 	stw	r3,24(sp)
    fca8:	10022f1e 	bne	r2,zero,10568 <___vfprintf_internal_r+0x14ac>
    fcac:	6080100c 	andi	r2,r12,64
    fcb0:	10022d26 	beq	r2,zero,10568 <___vfprintf_internal_r+0x14ac>
    fcb4:	a53fffcc 	andi	r20,r20,65535
    fcb8:	002b883a 	mov	r21,zero
    fcbc:	003f9f06 	br	fb3c <___vfprintf_internal_r+0xa80>
    fcc0:	e2c01990 	cmplti	r11,fp,102
    fcc4:	5800fb1e 	bne	r11,zero,100b4 <___vfprintf_internal_r+0xff8>
    fcc8:	d9000917 	ldw	r4,36(sp)
    fccc:	d9400a17 	ldw	r5,40(sp)
    fcd0:	000d883a 	mov	r6,zero
    fcd4:	000f883a 	mov	r7,zero
    fcd8:	d8c00e15 	stw	r3,56(sp)
    fcdc:	000b5a80 	call	b5a8 <__eqdf2>
    fce0:	d8c00e17 	ldw	r3,56(sp)
    fce4:	1001891e 	bne	r2,zero,1030c <___vfprintf_internal_r+0x1250>
    fce8:	d8801b17 	ldw	r2,108(sp)
    fcec:	010000b4 	movhi	r4,2
    fcf0:	2105d704 	addi	r4,r4,5980
    fcf4:	10800044 	addi	r2,r2,1
    fcf8:	18c00044 	addi	r3,r3,1
    fcfc:	b1000015 	stw	r4,0(r22)
    fd00:	01000044 	movi	r4,1
    fd04:	d8801b15 	stw	r2,108(sp)
    fd08:	b1000115 	stw	r4,4(r22)
    fd0c:	d8c01c15 	stw	r3,112(sp)
    fd10:	10800208 	cmpgei	r2,r2,8
    fd14:	10034a1e 	bne	r2,zero,10a40 <___vfprintf_internal_r+0x1984>
    fd18:	b5800204 	addi	r22,r22,8
    fd1c:	d8801417 	ldw	r2,80(sp)
    fd20:	d9000817 	ldw	r4,32(sp)
    fd24:	1102150e 	bge	r2,r4,1057c <___vfprintf_internal_r+0x14c0>
    fd28:	d8800d17 	ldw	r2,52(sp)
    fd2c:	d9000b17 	ldw	r4,44(sp)
    fd30:	b0800015 	stw	r2,0(r22)
    fd34:	d8801b17 	ldw	r2,108(sp)
    fd38:	1907883a 	add	r3,r3,r4
    fd3c:	b1000115 	stw	r4,4(r22)
    fd40:	10800044 	addi	r2,r2,1
    fd44:	d8801b15 	stw	r2,108(sp)
    fd48:	d8c01c15 	stw	r3,112(sp)
    fd4c:	10800208 	cmpgei	r2,r2,8
    fd50:	1002371e 	bne	r2,zero,10630 <___vfprintf_internal_r+0x1574>
    fd54:	b5800204 	addi	r22,r22,8
    fd58:	d8800817 	ldw	r2,32(sp)
    fd5c:	157fffc4 	addi	r21,r2,-1
    fd60:	057dd20e 	bge	zero,r21,f4ac <___vfprintf_internal_r+0x3f0>
    fd64:	01c000b4 	movhi	r7,2
    fd68:	a9000450 	cmplti	r4,r21,17
    fd6c:	d8801b17 	ldw	r2,108(sp)
    fd70:	39c5d804 	addi	r7,r7,5984
    fd74:	20032e1e 	bne	r4,zero,10a30 <___vfprintf_internal_r+0x1974>
    fd78:	07000404 	movi	fp,16
    fd7c:	3823883a 	mov	r17,r7
    fd80:	00000406 	br	fd94 <___vfprintf_internal_r+0xcd8>
    fd84:	b5800204 	addi	r22,r22,8
    fd88:	ad7ffc04 	addi	r21,r21,-16
    fd8c:	a9000448 	cmpgei	r4,r21,17
    fd90:	20032626 	beq	r4,zero,10a2c <___vfprintf_internal_r+0x1970>
    fd94:	10800044 	addi	r2,r2,1
    fd98:	18c00404 	addi	r3,r3,16
    fd9c:	b4400015 	stw	r17,0(r22)
    fda0:	b7000115 	stw	fp,4(r22)
    fda4:	d8c01c15 	stw	r3,112(sp)
    fda8:	d8801b15 	stw	r2,108(sp)
    fdac:	11000208 	cmpgei	r4,r2,8
    fdb0:	203ff426 	beq	r4,zero,fd84 <___vfprintf_internal_r+0xcc8>
    fdb4:	d9801a04 	addi	r6,sp,104
    fdb8:	900b883a 	mov	r5,r18
    fdbc:	9809883a 	mov	r4,r19
    fdc0:	0016a440 	call	16a44 <__sprint_r>
    fdc4:	103dca1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
    fdc8:	d8c01c17 	ldw	r3,112(sp)
    fdcc:	d8801b17 	ldw	r2,108(sp)
    fdd0:	dd802704 	addi	r22,sp,156
    fdd4:	003fec06 	br	fd88 <___vfprintf_internal_r+0xccc>
    fdd8:	8519c83a 	sub	r12,r16,r20
    fddc:	033da40e 	bge	zero,r12,f470 <___vfprintf_internal_r+0x3b4>
    fde0:	01c000b4 	movhi	r7,2
    fde4:	61000450 	cmplti	r4,r12,17
    fde8:	d8801b17 	ldw	r2,108(sp)
    fdec:	39c5d804 	addi	r7,r7,5984
    fdf0:	2000281e 	bne	r4,zero,fe94 <___vfprintf_internal_r+0xdd8>
    fdf4:	dc400e15 	stw	r17,56(sp)
    fdf8:	dc000f15 	stw	r16,60(sp)
    fdfc:	b009883a 	mov	r4,r22
    fe00:	03400404 	movi	r13,16
    fe04:	a02d883a 	mov	r22,r20
    fe08:	6021883a 	mov	r16,r12
    fe0c:	4029883a 	mov	r20,r8
    fe10:	3823883a 	mov	r17,r7
    fe14:	00000406 	br	fe28 <___vfprintf_internal_r+0xd6c>
    fe18:	843ffc04 	addi	r16,r16,-16
    fe1c:	81400448 	cmpgei	r5,r16,17
    fe20:	21000204 	addi	r4,r4,8
    fe24:	28001426 	beq	r5,zero,fe78 <___vfprintf_internal_r+0xdbc>
    fe28:	10800044 	addi	r2,r2,1
    fe2c:	18c00404 	addi	r3,r3,16
    fe30:	24400015 	stw	r17,0(r4)
    fe34:	23400115 	stw	r13,4(r4)
    fe38:	d8c01c15 	stw	r3,112(sp)
    fe3c:	d8801b15 	stw	r2,108(sp)
    fe40:	11400208 	cmpgei	r5,r2,8
    fe44:	283ff426 	beq	r5,zero,fe18 <___vfprintf_internal_r+0xd5c>
    fe48:	d9801a04 	addi	r6,sp,104
    fe4c:	900b883a 	mov	r5,r18
    fe50:	9809883a 	mov	r4,r19
    fe54:	0016a440 	call	16a44 <__sprint_r>
    fe58:	103da51e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
    fe5c:	843ffc04 	addi	r16,r16,-16
    fe60:	81400448 	cmpgei	r5,r16,17
    fe64:	d8c01c17 	ldw	r3,112(sp)
    fe68:	d8801b17 	ldw	r2,108(sp)
    fe6c:	d9002704 	addi	r4,sp,156
    fe70:	03400404 	movi	r13,16
    fe74:	283fec1e 	bne	r5,zero,fe28 <___vfprintf_internal_r+0xd6c>
    fe78:	8019883a 	mov	r12,r16
    fe7c:	880f883a 	mov	r7,r17
    fe80:	dc000f17 	ldw	r16,60(sp)
    fe84:	dc400e17 	ldw	r17,56(sp)
    fe88:	a011883a 	mov	r8,r20
    fe8c:	b029883a 	mov	r20,r22
    fe90:	202d883a 	mov	r22,r4
    fe94:	10800044 	addi	r2,r2,1
    fe98:	1b07883a 	add	r3,r3,r12
    fe9c:	d8801b15 	stw	r2,108(sp)
    fea0:	b1c00015 	stw	r7,0(r22)
    fea4:	b3000115 	stw	r12,4(r22)
    fea8:	d8c01c15 	stw	r3,112(sp)
    feac:	10800208 	cmpgei	r2,r2,8
    feb0:	1002eb1e 	bne	r2,zero,10a60 <___vfprintf_internal_r+0x19a4>
    feb4:	4551c83a 	sub	r8,r8,r21
    feb8:	b5800204 	addi	r22,r22,8
    febc:	023d6e0e 	bge	zero,r8,f478 <___vfprintf_internal_r+0x3bc>
    fec0:	01c000b4 	movhi	r7,2
    fec4:	41000450 	cmplti	r4,r8,17
    fec8:	d8801b17 	ldw	r2,108(sp)
    fecc:	39c5d804 	addi	r7,r7,5984
    fed0:	2000221e 	bne	r4,zero,ff5c <___vfprintf_internal_r+0xea0>
    fed4:	dc400e15 	stw	r17,56(sp)
    fed8:	dc000f15 	stw	r16,60(sp)
    fedc:	03000404 	movi	r12,16
    fee0:	4021883a 	mov	r16,r8
    fee4:	3823883a 	mov	r17,r7
    fee8:	00000406 	br	fefc <___vfprintf_internal_r+0xe40>
    feec:	843ffc04 	addi	r16,r16,-16
    fef0:	81000448 	cmpgei	r4,r16,17
    fef4:	b5800204 	addi	r22,r22,8
    fef8:	20001426 	beq	r4,zero,ff4c <___vfprintf_internal_r+0xe90>
    fefc:	10800044 	addi	r2,r2,1
    ff00:	18c00404 	addi	r3,r3,16
    ff04:	b4400015 	stw	r17,0(r22)
    ff08:	b3000115 	stw	r12,4(r22)
    ff0c:	d8c01c15 	stw	r3,112(sp)
    ff10:	d8801b15 	stw	r2,108(sp)
    ff14:	11000208 	cmpgei	r4,r2,8
    ff18:	203ff426 	beq	r4,zero,feec <___vfprintf_internal_r+0xe30>
    ff1c:	d9801a04 	addi	r6,sp,104
    ff20:	900b883a 	mov	r5,r18
    ff24:	9809883a 	mov	r4,r19
    ff28:	0016a440 	call	16a44 <__sprint_r>
    ff2c:	103d701e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
    ff30:	843ffc04 	addi	r16,r16,-16
    ff34:	81000448 	cmpgei	r4,r16,17
    ff38:	d8c01c17 	ldw	r3,112(sp)
    ff3c:	d8801b17 	ldw	r2,108(sp)
    ff40:	dd802704 	addi	r22,sp,156
    ff44:	03000404 	movi	r12,16
    ff48:	203fec1e 	bne	r4,zero,fefc <___vfprintf_internal_r+0xe40>
    ff4c:	8011883a 	mov	r8,r16
    ff50:	880f883a 	mov	r7,r17
    ff54:	dc000f17 	ldw	r16,60(sp)
    ff58:	dc400e17 	ldw	r17,56(sp)
    ff5c:	10800044 	addi	r2,r2,1
    ff60:	1a07883a 	add	r3,r3,r8
    ff64:	d8801b15 	stw	r2,108(sp)
    ff68:	b1c00015 	stw	r7,0(r22)
    ff6c:	b2000115 	stw	r8,4(r22)
    ff70:	d8c01c15 	stw	r3,112(sp)
    ff74:	10800208 	cmpgei	r2,r2,8
    ff78:	1001731e 	bne	r2,zero,10548 <___vfprintf_internal_r+0x148c>
    ff7c:	b5800204 	addi	r22,r22,8
    ff80:	003d3d06 	br	f478 <___vfprintf_internal_r+0x3bc>
    ff84:	10c00060 	cmpeqi	r3,r2,1
    ff88:	1803831e 	bne	r3,zero,10d98 <___vfprintf_internal_r+0x1cdc>
    ff8c:	108000a0 	cmpeqi	r2,r2,2
    ff90:	db000417 	ldw	r12,16(sp)
    ff94:	103ea326 	beq	r2,zero,fa24 <___vfprintf_internal_r+0x968>
    ff98:	d9000c17 	ldw	r4,48(sp)
    ff9c:	dc402704 	addi	r17,sp,156
    ffa0:	a08003cc 	andi	r2,r20,15
    ffa4:	a806973a 	slli	r3,r21,28
    ffa8:	a028d13a 	srli	r20,r20,4
    ffac:	2085883a 	add	r2,r4,r2
    ffb0:	10800003 	ldbu	r2,0(r2)
    ffb4:	a82ad13a 	srli	r21,r21,4
    ffb8:	1d28b03a 	or	r20,r3,r20
    ffbc:	88bfffc5 	stb	r2,-1(r17)
    ffc0:	a544b03a 	or	r2,r20,r21
    ffc4:	8c7fffc4 	addi	r17,r17,-1
    ffc8:	103ff51e 	bne	r2,zero,ffa0 <___vfprintf_internal_r+0xee4>
    ffcc:	d8802704 	addi	r2,sp,156
    ffd0:	146bc83a 	sub	r21,r2,r17
    ffd4:	db000415 	stw	r12,16(sp)
    ffd8:	003e4d06 	br	f910 <___vfprintf_internal_r+0x854>
    ffdc:	d9801a04 	addi	r6,sp,104
    ffe0:	900b883a 	mov	r5,r18
    ffe4:	9809883a 	mov	r4,r19
    ffe8:	0016a440 	call	16a44 <__sprint_r>
    ffec:	103d3a26 	beq	r2,zero,f4d8 <___vfprintf_internal_r+0x41c>
    fff0:	003d3f06 	br	f4f0 <___vfprintf_internal_r+0x434>
    fff4:	d8801b17 	ldw	r2,108(sp)
    fff8:	010000b4 	movhi	r4,2
    fffc:	2105d704 	addi	r4,r4,5980
   10000:	10800044 	addi	r2,r2,1
   10004:	18c00044 	addi	r3,r3,1
   10008:	b1000015 	stw	r4,0(r22)
   1000c:	01000044 	movi	r4,1
   10010:	d8801b15 	stw	r2,108(sp)
   10014:	b1000115 	stw	r4,4(r22)
   10018:	d8c01c15 	stw	r3,112(sp)
   1001c:	10800208 	cmpgei	r2,r2,8
   10020:	1003211e 	bne	r2,zero,10ca8 <___vfprintf_internal_r+0x1bec>
   10024:	b5800204 	addi	r22,r22,8
   10028:	2802a51e 	bne	r5,zero,10ac0 <___vfprintf_internal_r+0x1a04>
   1002c:	d8800417 	ldw	r2,16(sp)
   10030:	d9000817 	ldw	r4,32(sp)
   10034:	1080004c 	andi	r2,r2,1
   10038:	1104b03a 	or	r2,r2,r4
   1003c:	103d1b26 	beq	r2,zero,f4ac <___vfprintf_internal_r+0x3f0>
   10040:	d8800d17 	ldw	r2,52(sp)
   10044:	d9000b17 	ldw	r4,44(sp)
   10048:	b0800015 	stw	r2,0(r22)
   1004c:	d8801b17 	ldw	r2,108(sp)
   10050:	20c7883a 	add	r3,r4,r3
   10054:	b1000115 	stw	r4,4(r22)
   10058:	10800044 	addi	r2,r2,1
   1005c:	d8c01c15 	stw	r3,112(sp)
   10060:	d8801b15 	stw	r2,108(sp)
   10064:	11000208 	cmpgei	r4,r2,8
   10068:	2003381e 	bne	r4,zero,10d4c <___vfprintf_internal_r+0x1c90>
   1006c:	b5800204 	addi	r22,r22,8
   10070:	d9000817 	ldw	r4,32(sp)
   10074:	10800044 	addi	r2,r2,1
   10078:	d8801b15 	stw	r2,108(sp)
   1007c:	20c7883a 	add	r3,r4,r3
   10080:	b4400015 	stw	r17,0(r22)
   10084:	b1000115 	stw	r4,4(r22)
   10088:	d8c01c15 	stw	r3,112(sp)
   1008c:	10800208 	cmpgei	r2,r2,8
   10090:	103d0526 	beq	r2,zero,f4a8 <___vfprintf_internal_r+0x3ec>
   10094:	d9801a04 	addi	r6,sp,104
   10098:	900b883a 	mov	r5,r18
   1009c:	9809883a 	mov	r4,r19
   100a0:	0016a440 	call	16a44 <__sprint_r>
   100a4:	103d121e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   100a8:	d8c01c17 	ldw	r3,112(sp)
   100ac:	dd802704 	addi	r22,sp,156
   100b0:	003cfe06 	br	f4ac <___vfprintf_internal_r+0x3f0>
   100b4:	d8800817 	ldw	r2,32(sp)
   100b8:	dd401b17 	ldw	r21,108(sp)
   100bc:	18c00044 	addi	r3,r3,1
   100c0:	10800088 	cmpgei	r2,r2,2
   100c4:	ad400044 	addi	r21,r21,1
   100c8:	b7000204 	addi	fp,r22,8
   100cc:	1000e826 	beq	r2,zero,10470 <___vfprintf_internal_r+0x13b4>
   100d0:	00800044 	movi	r2,1
   100d4:	b0800115 	stw	r2,4(r22)
   100d8:	b4400015 	stw	r17,0(r22)
   100dc:	d8c01c15 	stw	r3,112(sp)
   100e0:	dd401b15 	stw	r21,108(sp)
   100e4:	a8800210 	cmplti	r2,r21,8
   100e8:	1001ad26 	beq	r2,zero,107a0 <___vfprintf_internal_r+0x16e4>
   100ec:	d8800b17 	ldw	r2,44(sp)
   100f0:	d9000d17 	ldw	r4,52(sp)
   100f4:	ad400044 	addi	r21,r21,1
   100f8:	1887883a 	add	r3,r3,r2
   100fc:	e0800115 	stw	r2,4(fp)
   10100:	e1000015 	stw	r4,0(fp)
   10104:	d8c01c15 	stw	r3,112(sp)
   10108:	dd401b15 	stw	r21,108(sp)
   1010c:	a8800208 	cmpgei	r2,r21,8
   10110:	1001ac1e 	bne	r2,zero,107c4 <___vfprintf_internal_r+0x1708>
   10114:	e7000204 	addi	fp,fp,8
   10118:	d9000917 	ldw	r4,36(sp)
   1011c:	d9400a17 	ldw	r5,40(sp)
   10120:	000d883a 	mov	r6,zero
   10124:	000f883a 	mov	r7,zero
   10128:	d8c00715 	stw	r3,28(sp)
   1012c:	000b5a80 	call	b5a8 <__eqdf2>
   10130:	d8c00817 	ldw	r3,32(sp)
   10134:	1dbfffc4 	addi	r22,r3,-1
   10138:	d8c00717 	ldw	r3,28(sp)
   1013c:	1000e426 	beq	r2,zero,104d0 <___vfprintf_internal_r+0x1414>
   10140:	8a400044 	addi	r9,r17,1
   10144:	ad400044 	addi	r21,r21,1
   10148:	1d87883a 	add	r3,r3,r22
   1014c:	e2400015 	stw	r9,0(fp)
   10150:	e5800115 	stw	r22,4(fp)
   10154:	d8c01c15 	stw	r3,112(sp)
   10158:	dd401b15 	stw	r21,108(sp)
   1015c:	a8800208 	cmpgei	r2,r21,8
   10160:	1000cd1e 	bne	r2,zero,10498 <___vfprintf_internal_r+0x13dc>
   10164:	e7000204 	addi	fp,fp,8
   10168:	d9001017 	ldw	r4,64(sp)
   1016c:	ad400044 	addi	r21,r21,1
   10170:	d8801644 	addi	r2,sp,89
   10174:	20c7883a 	add	r3,r4,r3
   10178:	dd401b15 	stw	r21,108(sp)
   1017c:	e0800015 	stw	r2,0(fp)
   10180:	e1000115 	stw	r4,4(fp)
   10184:	d8c01c15 	stw	r3,112(sp)
   10188:	ad400208 	cmpgei	r21,r21,8
   1018c:	a83fc11e 	bne	r21,zero,10094 <___vfprintf_internal_r+0xfd8>
   10190:	e5800204 	addi	r22,fp,8
   10194:	003cc506 	br	f4ac <___vfprintf_internal_r+0x3f0>
   10198:	db000417 	ldw	r12,16(sp)
   1019c:	003e1d06 	br	fa14 <___vfprintf_internal_r+0x958>
   101a0:	030000b4 	movhi	r12,2
   101a4:	39000450 	cmplti	r4,r7,17
   101a8:	d8801b17 	ldw	r2,108(sp)
   101ac:	6305dc04 	addi	r12,r12,6000
   101b0:	2000321e 	bne	r4,zero,1027c <___vfprintf_internal_r+0x11c0>
   101b4:	dc401115 	stw	r17,68(sp)
   101b8:	b009883a 	mov	r4,r22
   101bc:	9023883a 	mov	r17,r18
   101c0:	a82d883a 	mov	r22,r21
   101c4:	ddc01215 	stw	r23,72(sp)
   101c8:	03c00404 	movi	r15,16
   101cc:	a02f883a 	mov	r23,r20
   101d0:	db800e15 	stw	r14,56(sp)
   101d4:	8029883a 	mov	r20,r16
   101d8:	db400f15 	stw	r13,60(sp)
   101dc:	402b883a 	mov	r21,r8
   101e0:	3821883a 	mov	r16,r7
   101e4:	6025883a 	mov	r18,r12
   101e8:	00000406 	br	101fc <___vfprintf_internal_r+0x1140>
   101ec:	843ffc04 	addi	r16,r16,-16
   101f0:	81800448 	cmpgei	r6,r16,17
   101f4:	21000204 	addi	r4,r4,8
   101f8:	30001426 	beq	r6,zero,1024c <___vfprintf_internal_r+0x1190>
   101fc:	10800044 	addi	r2,r2,1
   10200:	18c00404 	addi	r3,r3,16
   10204:	24800015 	stw	r18,0(r4)
   10208:	23c00115 	stw	r15,4(r4)
   1020c:	d8c01c15 	stw	r3,112(sp)
   10210:	d8801b15 	stw	r2,108(sp)
   10214:	11800208 	cmpgei	r6,r2,8
   10218:	303ff426 	beq	r6,zero,101ec <___vfprintf_internal_r+0x1130>
   1021c:	d9801a04 	addi	r6,sp,104
   10220:	880b883a 	mov	r5,r17
   10224:	9809883a 	mov	r4,r19
   10228:	0016a440 	call	16a44 <__sprint_r>
   1022c:	10017c1e 	bne	r2,zero,10820 <___vfprintf_internal_r+0x1764>
   10230:	843ffc04 	addi	r16,r16,-16
   10234:	81800448 	cmpgei	r6,r16,17
   10238:	d8c01c17 	ldw	r3,112(sp)
   1023c:	d8801b17 	ldw	r2,108(sp)
   10240:	d9002704 	addi	r4,sp,156
   10244:	03c00404 	movi	r15,16
   10248:	303fec1e 	bne	r6,zero,101fc <___vfprintf_internal_r+0x1140>
   1024c:	800f883a 	mov	r7,r16
   10250:	9019883a 	mov	r12,r18
   10254:	a021883a 	mov	r16,r20
   10258:	8825883a 	mov	r18,r17
   1025c:	b829883a 	mov	r20,r23
   10260:	db800e17 	ldw	r14,56(sp)
   10264:	db400f17 	ldw	r13,60(sp)
   10268:	ddc01217 	ldw	r23,72(sp)
   1026c:	dc401117 	ldw	r17,68(sp)
   10270:	a811883a 	mov	r8,r21
   10274:	b02b883a 	mov	r21,r22
   10278:	202d883a 	mov	r22,r4
   1027c:	10800044 	addi	r2,r2,1
   10280:	19c7883a 	add	r3,r3,r7
   10284:	d8801b15 	stw	r2,108(sp)
   10288:	b3000015 	stw	r12,0(r22)
   1028c:	b1c00115 	stw	r7,4(r22)
   10290:	d8c01c15 	stw	r3,112(sp)
   10294:	10800208 	cmpgei	r2,r2,8
   10298:	1001531e 	bne	r2,zero,107e8 <___vfprintf_internal_r+0x172c>
   1029c:	b5800204 	addi	r22,r22,8
   102a0:	003c5606 	br	f3fc <___vfprintf_internal_r+0x340>
   102a4:	d9801a04 	addi	r6,sp,104
   102a8:	900b883a 	mov	r5,r18
   102ac:	9809883a 	mov	r4,r19
   102b0:	da001115 	stw	r8,68(sp)
   102b4:	db400f15 	stw	r13,60(sp)
   102b8:	db800e15 	stw	r14,56(sp)
   102bc:	0016a440 	call	16a44 <__sprint_r>
   102c0:	103c8b1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   102c4:	d8c01c17 	ldw	r3,112(sp)
   102c8:	da001117 	ldw	r8,68(sp)
   102cc:	db400f17 	ldw	r13,60(sp)
   102d0:	db800e17 	ldw	r14,56(sp)
   102d4:	dd802704 	addi	r22,sp,156
   102d8:	003c5606 	br	f434 <___vfprintf_internal_r+0x378>
   102dc:	d9801a04 	addi	r6,sp,104
   102e0:	900b883a 	mov	r5,r18
   102e4:	9809883a 	mov	r4,r19
   102e8:	da000f15 	stw	r8,60(sp)
   102ec:	db400e15 	stw	r13,56(sp)
   102f0:	0016a440 	call	16a44 <__sprint_r>
   102f4:	103c7e1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   102f8:	d8c01c17 	ldw	r3,112(sp)
   102fc:	da000f17 	ldw	r8,60(sp)
   10300:	db400e17 	ldw	r13,56(sp)
   10304:	dd802704 	addi	r22,sp,156
   10308:	003c5706 	br	f468 <___vfprintf_internal_r+0x3ac>
   1030c:	d9401417 	ldw	r5,80(sp)
   10310:	017f380e 	bge	zero,r5,fff4 <___vfprintf_internal_r+0xf38>
   10314:	d8800717 	ldw	r2,28(sp)
   10318:	d9000817 	ldw	r4,32(sp)
   1031c:	102b883a 	mov	r21,r2
   10320:	2080b316 	blt	r4,r2,105f0 <___vfprintf_internal_r+0x1534>
   10324:	05400a0e 	bge	zero,r21,10350 <___vfprintf_internal_r+0x1294>
   10328:	d8801b17 	ldw	r2,108(sp)
   1032c:	1d47883a 	add	r3,r3,r21
   10330:	b4400015 	stw	r17,0(r22)
   10334:	10800044 	addi	r2,r2,1
   10338:	d8801b15 	stw	r2,108(sp)
   1033c:	b5400115 	stw	r21,4(r22)
   10340:	d8c01c15 	stw	r3,112(sp)
   10344:	10800208 	cmpgei	r2,r2,8
   10348:	1002cf1e 	bne	r2,zero,10e88 <___vfprintf_internal_r+0x1dcc>
   1034c:	b5800204 	addi	r22,r22,8
   10350:	a800b516 	blt	r21,zero,10628 <___vfprintf_internal_r+0x156c>
   10354:	d8800717 	ldw	r2,28(sp)
   10358:	156bc83a 	sub	r21,r2,r21
   1035c:	0540c416 	blt	zero,r21,10670 <___vfprintf_internal_r+0x15b4>
   10360:	dd401417 	ldw	r21,80(sp)
   10364:	d8800817 	ldw	r2,32(sp)
   10368:	a880a40e 	bge	r21,r2,105fc <___vfprintf_internal_r+0x1540>
   1036c:	d8800d17 	ldw	r2,52(sp)
   10370:	d9000b17 	ldw	r4,44(sp)
   10374:	b0800015 	stw	r2,0(r22)
   10378:	d8801b17 	ldw	r2,108(sp)
   1037c:	1907883a 	add	r3,r3,r4
   10380:	b1000115 	stw	r4,4(r22)
   10384:	10800044 	addi	r2,r2,1
   10388:	d8801b15 	stw	r2,108(sp)
   1038c:	d8c01c15 	stw	r3,112(sp)
   10390:	10800208 	cmpgei	r2,r2,8
   10394:	1002b31e 	bne	r2,zero,10e64 <___vfprintf_internal_r+0x1da8>
   10398:	b5800204 	addi	r22,r22,8
   1039c:	d9000817 	ldw	r4,32(sp)
   103a0:	d9400717 	ldw	r5,28(sp)
   103a4:	2545c83a 	sub	r2,r4,r21
   103a8:	2149c83a 	sub	r4,r4,r5
   103ac:	102b883a 	mov	r21,r2
   103b0:	2080010e 	bge	r4,r2,103b8 <___vfprintf_internal_r+0x12fc>
   103b4:	202b883a 	mov	r21,r4
   103b8:	05400c0e 	bge	zero,r21,103ec <___vfprintf_internal_r+0x1330>
   103bc:	d9000717 	ldw	r4,28(sp)
   103c0:	1d47883a 	add	r3,r3,r21
   103c4:	b5400115 	stw	r21,4(r22)
   103c8:	8913883a 	add	r9,r17,r4
   103cc:	d9001b17 	ldw	r4,108(sp)
   103d0:	b2400015 	stw	r9,0(r22)
   103d4:	d8c01c15 	stw	r3,112(sp)
   103d8:	21000044 	addi	r4,r4,1
   103dc:	d9001b15 	stw	r4,108(sp)
   103e0:	21000208 	cmpgei	r4,r4,8
   103e4:	2002b31e 	bne	r4,zero,10eb4 <___vfprintf_internal_r+0x1df8>
   103e8:	b5800204 	addi	r22,r22,8
   103ec:	a800010e 	bge	r21,zero,103f4 <___vfprintf_internal_r+0x1338>
   103f0:	002b883a 	mov	r21,zero
   103f4:	156bc83a 	sub	r21,r2,r21
   103f8:	057c2c0e 	bge	zero,r21,f4ac <___vfprintf_internal_r+0x3f0>
   103fc:	01c000b4 	movhi	r7,2
   10400:	a9000450 	cmplti	r4,r21,17
   10404:	d8801b17 	ldw	r2,108(sp)
   10408:	39c5d804 	addi	r7,r7,5984
   1040c:	2001881e 	bne	r4,zero,10a30 <___vfprintf_internal_r+0x1974>
   10410:	07000404 	movi	fp,16
   10414:	3823883a 	mov	r17,r7
   10418:	00000406 	br	1042c <___vfprintf_internal_r+0x1370>
   1041c:	b5800204 	addi	r22,r22,8
   10420:	ad7ffc04 	addi	r21,r21,-16
   10424:	a9000448 	cmpgei	r4,r21,17
   10428:	20018026 	beq	r4,zero,10a2c <___vfprintf_internal_r+0x1970>
   1042c:	10800044 	addi	r2,r2,1
   10430:	18c00404 	addi	r3,r3,16
   10434:	b4400015 	stw	r17,0(r22)
   10438:	b7000115 	stw	fp,4(r22)
   1043c:	d8c01c15 	stw	r3,112(sp)
   10440:	d8801b15 	stw	r2,108(sp)
   10444:	11000208 	cmpgei	r4,r2,8
   10448:	203ff426 	beq	r4,zero,1041c <___vfprintf_internal_r+0x1360>
   1044c:	d9801a04 	addi	r6,sp,104
   10450:	900b883a 	mov	r5,r18
   10454:	9809883a 	mov	r4,r19
   10458:	0016a440 	call	16a44 <__sprint_r>
   1045c:	103c241e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10460:	d8c01c17 	ldw	r3,112(sp)
   10464:	d8801b17 	ldw	r2,108(sp)
   10468:	dd802704 	addi	r22,sp,156
   1046c:	003fec06 	br	10420 <___vfprintf_internal_r+0x1364>
   10470:	d8800417 	ldw	r2,16(sp)
   10474:	1080004c 	andi	r2,r2,1
   10478:	103f151e 	bne	r2,zero,100d0 <___vfprintf_internal_r+0x1014>
   1047c:	00800044 	movi	r2,1
   10480:	b0800115 	stw	r2,4(r22)
   10484:	b4400015 	stw	r17,0(r22)
   10488:	d8c01c15 	stw	r3,112(sp)
   1048c:	dd401b15 	stw	r21,108(sp)
   10490:	a8800210 	cmplti	r2,r21,8
   10494:	103f341e 	bne	r2,zero,10168 <___vfprintf_internal_r+0x10ac>
   10498:	d9801a04 	addi	r6,sp,104
   1049c:	900b883a 	mov	r5,r18
   104a0:	9809883a 	mov	r4,r19
   104a4:	0016a440 	call	16a44 <__sprint_r>
   104a8:	103c111e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   104ac:	d8c01c17 	ldw	r3,112(sp)
   104b0:	dd401b17 	ldw	r21,108(sp)
   104b4:	df002704 	addi	fp,sp,156
   104b8:	003f2b06 	br	10168 <___vfprintf_internal_r+0x10ac>
   104bc:	4002361e 	bne	r8,zero,10d98 <___vfprintf_internal_r+0x1cdc>
   104c0:	0011883a 	mov	r8,zero
   104c4:	002b883a 	mov	r21,zero
   104c8:	dc402704 	addi	r17,sp,156
   104cc:	003d1006 	br	f910 <___vfprintf_internal_r+0x854>
   104d0:	05bf250e 	bge	zero,r22,10168 <___vfprintf_internal_r+0x10ac>
   104d4:	01c000b4 	movhi	r7,2
   104d8:	b0800450 	cmplti	r2,r22,17
   104dc:	39c5d804 	addi	r7,r7,5984
   104e0:	1001731e 	bne	r2,zero,10ab0 <___vfprintf_internal_r+0x19f4>
   104e4:	dc000715 	stw	r16,28(sp)
   104e8:	04400404 	movi	r17,16
   104ec:	3821883a 	mov	r16,r7
   104f0:	00000406 	br	10504 <___vfprintf_internal_r+0x1448>
   104f4:	e7000204 	addi	fp,fp,8
   104f8:	b5bffc04 	addi	r22,r22,-16
   104fc:	b0800448 	cmpgei	r2,r22,17
   10500:	10016926 	beq	r2,zero,10aa8 <___vfprintf_internal_r+0x19ec>
   10504:	ad400044 	addi	r21,r21,1
   10508:	18c00404 	addi	r3,r3,16
   1050c:	e4000015 	stw	r16,0(fp)
   10510:	e4400115 	stw	r17,4(fp)
   10514:	d8c01c15 	stw	r3,112(sp)
   10518:	dd401b15 	stw	r21,108(sp)
   1051c:	a8800208 	cmpgei	r2,r21,8
   10520:	103ff426 	beq	r2,zero,104f4 <___vfprintf_internal_r+0x1438>
   10524:	d9801a04 	addi	r6,sp,104
   10528:	900b883a 	mov	r5,r18
   1052c:	9809883a 	mov	r4,r19
   10530:	0016a440 	call	16a44 <__sprint_r>
   10534:	103bee1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10538:	d8c01c17 	ldw	r3,112(sp)
   1053c:	dd401b17 	ldw	r21,108(sp)
   10540:	df002704 	addi	fp,sp,156
   10544:	003fec06 	br	104f8 <___vfprintf_internal_r+0x143c>
   10548:	d9801a04 	addi	r6,sp,104
   1054c:	900b883a 	mov	r5,r18
   10550:	9809883a 	mov	r4,r19
   10554:	0016a440 	call	16a44 <__sprint_r>
   10558:	103be51e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   1055c:	d8c01c17 	ldw	r3,112(sp)
   10560:	dd802704 	addi	r22,sp,156
   10564:	003bc406 	br	f478 <___vfprintf_internal_r+0x3bc>
   10568:	002b883a 	mov	r21,zero
   1056c:	003d7306 	br	fb3c <___vfprintf_internal_r+0xa80>
   10570:	a02bd7fa 	srai	r21,r20,31
   10574:	a805883a 	mov	r2,r21
   10578:	003cd306 	br	f8c8 <___vfprintf_internal_r+0x80c>
   1057c:	d8800417 	ldw	r2,16(sp)
   10580:	1080004c 	andi	r2,r2,1
   10584:	103bc926 	beq	r2,zero,f4ac <___vfprintf_internal_r+0x3f0>
   10588:	003de706 	br	fd28 <___vfprintf_internal_r+0xc6c>
   1058c:	63000414 	ori	r12,r12,16
   10590:	003b1606 	br	f1ec <___vfprintf_internal_r+0x130>
   10594:	bac00007 	ldb	r11,0(r23)
   10598:	d8800615 	stw	r2,24(sp)
   1059c:	003b1306 	br	f1ec <___vfprintf_internal_r+0x130>
   105a0:	dc402704 	addi	r17,sp,156
   105a4:	003cda06 	br	f910 <___vfprintf_internal_r+0x854>
   105a8:	18800017 	ldw	r2,0(r3)
   105ac:	d8800915 	stw	r2,36(sp)
   105b0:	18800117 	ldw	r2,4(r3)
   105b4:	d8800a15 	stw	r2,40(sp)
   105b8:	003c4006 	br	f6bc <___vfprintf_internal_r+0x600>
   105bc:	00800c04 	movi	r2,48
   105c0:	d8801385 	stb	r2,78(sp)
   105c4:	df0013c5 	stb	fp,79(sp)
   105c8:	63000094 	ori	r12,r12,2
   105cc:	00800084 	movi	r2,2
   105d0:	003c0406 	br	f5e4 <___vfprintf_internal_r+0x528>
   105d4:	d9400517 	ldw	r5,20(sp)
   105d8:	20800017 	ldw	r2,0(r4)
   105dc:	d8c00615 	stw	r3,24(sp)
   105e0:	2809d7fa 	srai	r4,r5,31
   105e4:	11400015 	stw	r5,0(r2)
   105e8:	11000115 	stw	r4,4(r2)
   105ec:	003ae706 	br	f18c <___vfprintf_internal_r+0xd0>
   105f0:	202b883a 	mov	r21,r4
   105f4:	057f4c16 	blt	zero,r21,10328 <___vfprintf_internal_r+0x126c>
   105f8:	003f5506 	br	10350 <___vfprintf_internal_r+0x1294>
   105fc:	d8800417 	ldw	r2,16(sp)
   10600:	1080004c 	andi	r2,r2,1
   10604:	103f591e 	bne	r2,zero,1036c <___vfprintf_internal_r+0x12b0>
   10608:	d9000817 	ldw	r4,32(sp)
   1060c:	d9400717 	ldw	r5,28(sp)
   10610:	2545c83a 	sub	r2,r4,r21
   10614:	2179c83a 	sub	fp,r4,r5
   10618:	102b883a 	mov	r21,r2
   1061c:	e0bf730e 	bge	fp,r2,103ec <___vfprintf_internal_r+0x1330>
   10620:	e02b883a 	mov	r21,fp
   10624:	003f7106 	br	103ec <___vfprintf_internal_r+0x1330>
   10628:	002b883a 	mov	r21,zero
   1062c:	003f4906 	br	10354 <___vfprintf_internal_r+0x1298>
   10630:	d9801a04 	addi	r6,sp,104
   10634:	900b883a 	mov	r5,r18
   10638:	9809883a 	mov	r4,r19
   1063c:	0016a440 	call	16a44 <__sprint_r>
   10640:	103bab1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10644:	d8c01c17 	ldw	r3,112(sp)
   10648:	dd802704 	addi	r22,sp,156
   1064c:	003dc206 	br	fd58 <___vfprintf_internal_r+0xc9c>
   10650:	408001f0 	cmpltui	r2,r8,7
   10654:	402b883a 	mov	r21,r8
   10658:	1001a026 	beq	r2,zero,10cdc <___vfprintf_internal_r+0x1c20>
   1065c:	044000b4 	movhi	r17,2
   10660:	a829883a 	mov	r20,r21
   10664:	d8c00615 	stw	r3,24(sp)
   10668:	8c45d504 	addi	r17,r17,5972
   1066c:	003b5606 	br	f3c8 <___vfprintf_internal_r+0x30c>
   10670:	01c000b4 	movhi	r7,2
   10674:	a9000450 	cmplti	r4,r21,17
   10678:	d8801b17 	ldw	r2,108(sp)
   1067c:	39c5d804 	addi	r7,r7,5984
   10680:	20017b1e 	bne	r4,zero,10c70 <___vfprintf_internal_r+0x1bb4>
   10684:	dc000e15 	stw	r16,56(sp)
   10688:	07000404 	movi	fp,16
   1068c:	3821883a 	mov	r16,r7
   10690:	00000406 	br	106a4 <___vfprintf_internal_r+0x15e8>
   10694:	b5800204 	addi	r22,r22,8
   10698:	ad7ffc04 	addi	r21,r21,-16
   1069c:	a9000448 	cmpgei	r4,r21,17
   106a0:	20017126 	beq	r4,zero,10c68 <___vfprintf_internal_r+0x1bac>
   106a4:	10800044 	addi	r2,r2,1
   106a8:	18c00404 	addi	r3,r3,16
   106ac:	b4000015 	stw	r16,0(r22)
   106b0:	b7000115 	stw	fp,4(r22)
   106b4:	d8c01c15 	stw	r3,112(sp)
   106b8:	d8801b15 	stw	r2,108(sp)
   106bc:	11000208 	cmpgei	r4,r2,8
   106c0:	203ff426 	beq	r4,zero,10694 <___vfprintf_internal_r+0x15d8>
   106c4:	d9801a04 	addi	r6,sp,104
   106c8:	900b883a 	mov	r5,r18
   106cc:	9809883a 	mov	r4,r19
   106d0:	0016a440 	call	16a44 <__sprint_r>
   106d4:	103b861e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   106d8:	d8c01c17 	ldw	r3,112(sp)
   106dc:	d8801b17 	ldw	r2,108(sp)
   106e0:	dd802704 	addi	r22,sp,156
   106e4:	003fec06 	br	10698 <___vfprintf_internal_r+0x15dc>
   106e8:	dc402704 	addi	r17,sp,156
   106ec:	a805883a 	mov	r2,r21
   106f0:	dc000715 	stw	r16,28(sp)
   106f4:	902b883a 	mov	r21,r18
   106f8:	8821883a 	mov	r16,r17
   106fc:	db000415 	stw	r12,16(sp)
   10700:	a023883a 	mov	r17,r20
   10704:	da000e15 	stw	r8,56(sp)
   10708:	9829883a 	mov	r20,r19
   1070c:	1025883a 	mov	r18,r2
   10710:	6827883a 	mov	r19,r13
   10714:	8809883a 	mov	r4,r17
   10718:	900b883a 	mov	r5,r18
   1071c:	01800284 	movi	r6,10
   10720:	000f883a 	mov	r7,zero
   10724:	00194840 	call	19484 <__umoddi3>
   10728:	10800c04 	addi	r2,r2,48
   1072c:	8809883a 	mov	r4,r17
   10730:	900b883a 	mov	r5,r18
   10734:	01800284 	movi	r6,10
   10738:	000f883a 	mov	r7,zero
   1073c:	80bfffc5 	stb	r2,-1(r16)
   10740:	0018ef40 	call	18ef4 <__udivdi3>
   10744:	900d883a 	mov	r6,r18
   10748:	880f883a 	mov	r7,r17
   1074c:	843fffc4 	addi	r16,r16,-1
   10750:	1023883a 	mov	r17,r2
   10754:	1825883a 	mov	r18,r3
   10758:	303fee1e 	bne	r6,zero,10714 <___vfprintf_internal_r+0x1658>
   1075c:	39c002a8 	cmpgeui	r7,r7,10
   10760:	383fec1e 	bne	r7,zero,10714 <___vfprintf_internal_r+0x1658>
   10764:	8023883a 	mov	r17,r16
   10768:	d8802704 	addi	r2,sp,156
   1076c:	981b883a 	mov	r13,r19
   10770:	a825883a 	mov	r18,r21
   10774:	dc000717 	ldw	r16,28(sp)
   10778:	da000e17 	ldw	r8,56(sp)
   1077c:	a027883a 	mov	r19,r20
   10780:	146bc83a 	sub	r21,r2,r17
   10784:	003c6206 	br	f910 <___vfprintf_internal_r+0x854>
   10788:	d8800617 	ldw	r2,24(sp)
   1078c:	10800017 	ldw	r2,0(r2)
   10790:	d8c00615 	stw	r3,24(sp)
   10794:	d8c00517 	ldw	r3,20(sp)
   10798:	10c00015 	stw	r3,0(r2)
   1079c:	003a7b06 	br	f18c <___vfprintf_internal_r+0xd0>
   107a0:	d9801a04 	addi	r6,sp,104
   107a4:	900b883a 	mov	r5,r18
   107a8:	9809883a 	mov	r4,r19
   107ac:	0016a440 	call	16a44 <__sprint_r>
   107b0:	103b4f1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   107b4:	d8c01c17 	ldw	r3,112(sp)
   107b8:	dd401b17 	ldw	r21,108(sp)
   107bc:	df002704 	addi	fp,sp,156
   107c0:	003e4a06 	br	100ec <___vfprintf_internal_r+0x1030>
   107c4:	d9801a04 	addi	r6,sp,104
   107c8:	900b883a 	mov	r5,r18
   107cc:	9809883a 	mov	r4,r19
   107d0:	0016a440 	call	16a44 <__sprint_r>
   107d4:	103b461e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   107d8:	d8c01c17 	ldw	r3,112(sp)
   107dc:	dd401b17 	ldw	r21,108(sp)
   107e0:	df002704 	addi	fp,sp,156
   107e4:	003e4c06 	br	10118 <___vfprintf_internal_r+0x105c>
   107e8:	d9801a04 	addi	r6,sp,104
   107ec:	900b883a 	mov	r5,r18
   107f0:	9809883a 	mov	r4,r19
   107f4:	da001115 	stw	r8,68(sp)
   107f8:	db400f15 	stw	r13,60(sp)
   107fc:	db800e15 	stw	r14,56(sp)
   10800:	0016a440 	call	16a44 <__sprint_r>
   10804:	103b3a1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10808:	d8c01c17 	ldw	r3,112(sp)
   1080c:	da001117 	ldw	r8,68(sp)
   10810:	db400f17 	ldw	r13,60(sp)
   10814:	db800e17 	ldw	r14,56(sp)
   10818:	dd802704 	addi	r22,sp,156
   1081c:	003af706 	br	f3fc <___vfprintf_internal_r+0x340>
   10820:	8825883a 	mov	r18,r17
   10824:	003b3206 	br	f4f0 <___vfprintf_internal_r+0x434>
   10828:	d9000917 	ldw	r4,36(sp)
   1082c:	d9400a17 	ldw	r5,40(sp)
   10830:	da000615 	stw	r8,24(sp)
   10834:	200d883a 	mov	r6,r4
   10838:	280f883a 	mov	r7,r5
   1083c:	db000415 	stw	r12,16(sp)
   10840:	000c7780 	call	c778 <__unorddf2>
   10844:	db000417 	ldw	r12,16(sp)
   10848:	da000617 	ldw	r8,24(sp)
   1084c:	1001f51e 	bne	r2,zero,11024 <___vfprintf_internal_r+0x1f68>
   10850:	057ff7c4 	movi	r21,-33
   10854:	40bfffe0 	cmpeqi	r2,r8,-1
   10858:	e56a703a 	and	r21,fp,r21
   1085c:	1001931e 	bne	r2,zero,10eac <___vfprintf_internal_r+0x1df0>
   10860:	a88011d8 	cmpnei	r2,r21,71
   10864:	10013626 	beq	r2,zero,10d40 <___vfprintf_internal_r+0x1c84>
   10868:	60804014 	ori	r2,r12,256
   1086c:	d8800415 	stw	r2,16(sp)
   10870:	d8800a17 	ldw	r2,40(sp)
   10874:	10011516 	blt	r2,zero,10ccc <___vfprintf_internal_r+0x1c10>
   10878:	dd000a17 	ldw	r20,40(sp)
   1087c:	d8000605 	stb	zero,24(sp)
   10880:	e08019a0 	cmpeqi	r2,fp,102
   10884:	d8800f15 	stw	r2,60(sp)
   10888:	1000b91e 	bne	r2,zero,10b70 <___vfprintf_internal_r+0x1ab4>
   1088c:	e08011a0 	cmpeqi	r2,fp,70
   10890:	1000b71e 	bne	r2,zero,10b70 <___vfprintf_internal_r+0x1ab4>
   10894:	a8801158 	cmpnei	r2,r21,69
   10898:	10014126 	beq	r2,zero,10da0 <___vfprintf_internal_r+0x1ce4>
   1089c:	d8801804 	addi	r2,sp,96
   108a0:	d8800315 	stw	r2,12(sp)
   108a4:	d9400917 	ldw	r5,36(sp)
   108a8:	d8801504 	addi	r2,sp,84
   108ac:	d8800215 	stw	r2,8(sp)
   108b0:	d8801404 	addi	r2,sp,80
   108b4:	da000015 	stw	r8,0(sp)
   108b8:	9809883a 	mov	r4,r19
   108bc:	d8800115 	stw	r2,4(sp)
   108c0:	01c00084 	movi	r7,2
   108c4:	a00d883a 	mov	r6,r20
   108c8:	db000815 	stw	r12,32(sp)
   108cc:	da000715 	stw	r8,28(sp)
   108d0:	00115000 	call	11500 <_dtoa_r>
   108d4:	da000717 	ldw	r8,28(sp)
   108d8:	e10019d8 	cmpnei	r4,fp,103
   108dc:	db000817 	ldw	r12,32(sp)
   108e0:	1023883a 	mov	r17,r2
   108e4:	4007883a 	mov	r3,r8
   108e8:	2001411e 	bne	r4,zero,10df0 <___vfprintf_internal_r+0x1d34>
   108ec:	6080004c 	andi	r2,r12,1
   108f0:	1001411e 	bne	r2,zero,10df8 <___vfprintf_internal_r+0x1d3c>
   108f4:	d8801417 	ldw	r2,80(sp)
   108f8:	ad4011e0 	cmpeqi	r21,r21,71
   108fc:	d8800715 	stw	r2,28(sp)
   10900:	d8801817 	ldw	r2,96(sp)
   10904:	1445c83a 	sub	r2,r2,r17
   10908:	d8800815 	stw	r2,32(sp)
   1090c:	a8000526 	beq	r21,zero,10924 <___vfprintf_internal_r+0x1868>
   10910:	d8c00717 	ldw	r3,28(sp)
   10914:	18bfff50 	cmplti	r2,r3,-3
   10918:	1000011e 	bne	r2,zero,10920 <___vfprintf_internal_r+0x1864>
   1091c:	40c1460e 	bge	r8,r3,10e38 <___vfprintf_internal_r+0x1d7c>
   10920:	e73fff84 	addi	fp,fp,-2
   10924:	d8800717 	ldw	r2,28(sp)
   10928:	df001645 	stb	fp,89(sp)
   1092c:	157fffc4 	addi	r21,r2,-1
   10930:	dd401415 	stw	r21,80(sp)
   10934:	a801ab16 	blt	r21,zero,10fe4 <___vfprintf_internal_r+0x1f28>
   10938:	00800ac4 	movi	r2,43
   1093c:	d8801685 	stb	r2,90(sp)
   10940:	a8800290 	cmplti	r2,r21,10
   10944:	1001a01e 	bne	r2,zero,10fc8 <___vfprintf_internal_r+0x1f0c>
   10948:	d98019c4 	addi	r6,sp,103
   1094c:	9029883a 	mov	r20,r18
   10950:	dc400715 	stw	r17,28(sp)
   10954:	8025883a 	mov	r18,r16
   10958:	db000f15 	stw	r12,60(sp)
   1095c:	3021883a 	mov	r16,r6
   10960:	a809883a 	mov	r4,r21
   10964:	01400284 	movi	r5,10
   10968:	00092c80 	call	92c8 <__modsi3>
   1096c:	10800c04 	addi	r2,r2,48
   10970:	a809883a 	mov	r4,r21
   10974:	80bfffc5 	stb	r2,-1(r16)
   10978:	01400284 	movi	r5,10
   1097c:	00092480 	call	9248 <__divsi3>
   10980:	a9001908 	cmpgei	r4,r21,100
   10984:	8023883a 	mov	r17,r16
   10988:	102b883a 	mov	r21,r2
   1098c:	843fffc4 	addi	r16,r16,-1
   10990:	203ff31e 	bne	r4,zero,10960 <___vfprintf_internal_r+0x18a4>
   10994:	800d883a 	mov	r6,r16
   10998:	11000c04 	addi	r4,r2,48
   1099c:	9021883a 	mov	r16,r18
   109a0:	a025883a 	mov	r18,r20
   109a4:	8829883a 	mov	r20,r17
   109a8:	a0bfff84 	addi	r2,r20,-2
   109ac:	313fffc5 	stb	r4,-1(r6)
   109b0:	d8c019c4 	addi	r3,sp,103
   109b4:	db000f17 	ldw	r12,60(sp)
   109b8:	dc400717 	ldw	r17,28(sp)
   109bc:	10c1be2e 	bgeu	r2,r3,110b8 <___vfprintf_internal_r+0x1ffc>
   109c0:	d8c016c4 	addi	r3,sp,91
   109c4:	00000106 	br	109cc <___vfprintf_internal_r+0x1910>
   109c8:	11000003 	ldbu	r4,0(r2)
   109cc:	19000005 	stb	r4,0(r3)
   109d0:	10800044 	addi	r2,r2,1
   109d4:	d90019c4 	addi	r4,sp,103
   109d8:	18c00044 	addi	r3,r3,1
   109dc:	113ffa1e 	bne	r2,r4,109c8 <___vfprintf_internal_r+0x190c>
   109e0:	d8801a44 	addi	r2,sp,105
   109e4:	d8c016c4 	addi	r3,sp,91
   109e8:	1505c83a 	sub	r2,r2,r20
   109ec:	1885883a 	add	r2,r3,r2
   109f0:	d8c01644 	addi	r3,sp,89
   109f4:	10c5c83a 	sub	r2,r2,r3
   109f8:	d8801015 	stw	r2,64(sp)
   109fc:	d8c00817 	ldw	r3,32(sp)
   10a00:	d9001017 	ldw	r4,64(sp)
   10a04:	18800088 	cmpgei	r2,r3,2
   10a08:	192b883a 	add	r21,r3,r4
   10a0c:	10018126 	beq	r2,zero,11014 <___vfprintf_internal_r+0x1f58>
   10a10:	d8800b17 	ldw	r2,44(sp)
   10a14:	a8ab883a 	add	r21,r21,r2
   10a18:	a829883a 	mov	r20,r21
   10a1c:	a800010e 	bge	r21,zero,10a24 <___vfprintf_internal_r+0x1968>
   10a20:	0029883a 	mov	r20,zero
   10a24:	d8000715 	stw	zero,28(sp)
   10a28:	00008406 	br	10c3c <___vfprintf_internal_r+0x1b80>
   10a2c:	880f883a 	mov	r7,r17
   10a30:	10800044 	addi	r2,r2,1
   10a34:	1d47883a 	add	r3,r3,r21
   10a38:	b1c00015 	stw	r7,0(r22)
   10a3c:	003a9506 	br	f494 <___vfprintf_internal_r+0x3d8>
   10a40:	d9801a04 	addi	r6,sp,104
   10a44:	900b883a 	mov	r5,r18
   10a48:	9809883a 	mov	r4,r19
   10a4c:	0016a440 	call	16a44 <__sprint_r>
   10a50:	103aa71e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10a54:	d8c01c17 	ldw	r3,112(sp)
   10a58:	dd802704 	addi	r22,sp,156
   10a5c:	003caf06 	br	fd1c <___vfprintf_internal_r+0xc60>
   10a60:	d9801a04 	addi	r6,sp,104
   10a64:	900b883a 	mov	r5,r18
   10a68:	9809883a 	mov	r4,r19
   10a6c:	da000e15 	stw	r8,56(sp)
   10a70:	0016a440 	call	16a44 <__sprint_r>
   10a74:	103a9e1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10a78:	d8c01c17 	ldw	r3,112(sp)
   10a7c:	da000e17 	ldw	r8,56(sp)
   10a80:	dd802704 	addi	r22,sp,156
   10a84:	003a7a06 	br	f470 <___vfprintf_internal_r+0x3b4>
   10a88:	8809883a 	mov	r4,r17
   10a8c:	db000415 	stw	r12,16(sp)
   10a90:	d8c00615 	stw	r3,24(sp)
   10a94:	000d6fc0 	call	d6fc <strlen>
   10a98:	db000417 	ldw	r12,16(sp)
   10a9c:	102b883a 	mov	r21,r2
   10aa0:	1029883a 	mov	r20,r2
   10aa4:	003a4806 	br	f3c8 <___vfprintf_internal_r+0x30c>
   10aa8:	800f883a 	mov	r7,r16
   10aac:	dc000717 	ldw	r16,28(sp)
   10ab0:	ad400044 	addi	r21,r21,1
   10ab4:	1d87883a 	add	r3,r3,r22
   10ab8:	e1c00015 	stw	r7,0(fp)
   10abc:	003da406 	br	10150 <___vfprintf_internal_r+0x1094>
   10ac0:	d8800d17 	ldw	r2,52(sp)
   10ac4:	d9000b17 	ldw	r4,44(sp)
   10ac8:	b0800015 	stw	r2,0(r22)
   10acc:	d8801b17 	ldw	r2,108(sp)
   10ad0:	20c7883a 	add	r3,r4,r3
   10ad4:	b1000115 	stw	r4,4(r22)
   10ad8:	10800044 	addi	r2,r2,1
   10adc:	d8c01c15 	stw	r3,112(sp)
   10ae0:	d8801b15 	stw	r2,108(sp)
   10ae4:	11000208 	cmpgei	r4,r2,8
   10ae8:	2000981e 	bne	r4,zero,10d4c <___vfprintf_internal_r+0x1c90>
   10aec:	b5800204 	addi	r22,r22,8
   10af0:	283d5f0e 	bge	r5,zero,10070 <___vfprintf_internal_r+0xfb4>
   10af4:	01c000b4 	movhi	r7,2
   10af8:	293ffc08 	cmpgei	r4,r5,-16
   10afc:	39c5d804 	addi	r7,r7,5984
   10b00:	0179c83a 	sub	fp,zero,r5
   10b04:	2001151e 	bne	r4,zero,10f5c <___vfprintf_internal_r+0x1ea0>
   10b08:	dc000715 	stw	r16,28(sp)
   10b0c:	05400404 	movi	r21,16
   10b10:	9021883a 	mov	r16,r18
   10b14:	3825883a 	mov	r18,r7
   10b18:	00000406 	br	10b2c <___vfprintf_internal_r+0x1a70>
   10b1c:	b5800204 	addi	r22,r22,8
   10b20:	e73ffc04 	addi	fp,fp,-16
   10b24:	e1800448 	cmpgei	r6,fp,17
   10b28:	30010926 	beq	r6,zero,10f50 <___vfprintf_internal_r+0x1e94>
   10b2c:	10800044 	addi	r2,r2,1
   10b30:	18c00404 	addi	r3,r3,16
   10b34:	b4800015 	stw	r18,0(r22)
   10b38:	b5400115 	stw	r21,4(r22)
   10b3c:	d8c01c15 	stw	r3,112(sp)
   10b40:	d8801b15 	stw	r2,108(sp)
   10b44:	11800208 	cmpgei	r6,r2,8
   10b48:	303ff426 	beq	r6,zero,10b1c <___vfprintf_internal_r+0x1a60>
   10b4c:	d9801a04 	addi	r6,sp,104
   10b50:	800b883a 	mov	r5,r16
   10b54:	9809883a 	mov	r4,r19
   10b58:	0016a440 	call	16a44 <__sprint_r>
   10b5c:	1001411e 	bne	r2,zero,11064 <___vfprintf_internal_r+0x1fa8>
   10b60:	d8c01c17 	ldw	r3,112(sp)
   10b64:	d8801b17 	ldw	r2,108(sp)
   10b68:	dd802704 	addi	r22,sp,156
   10b6c:	003fec06 	br	10b20 <___vfprintf_internal_r+0x1a64>
   10b70:	d8801804 	addi	r2,sp,96
   10b74:	d8800315 	stw	r2,12(sp)
   10b78:	d9400917 	ldw	r5,36(sp)
   10b7c:	d8801504 	addi	r2,sp,84
   10b80:	d8800215 	stw	r2,8(sp)
   10b84:	d8801404 	addi	r2,sp,80
   10b88:	da000015 	stw	r8,0(sp)
   10b8c:	d8800115 	stw	r2,4(sp)
   10b90:	01c000c4 	movi	r7,3
   10b94:	a00d883a 	mov	r6,r20
   10b98:	9809883a 	mov	r4,r19
   10b9c:	db000815 	stw	r12,32(sp)
   10ba0:	da000715 	stw	r8,28(sp)
   10ba4:	00115000 	call	11500 <_dtoa_r>
   10ba8:	da000717 	ldw	r8,28(sp)
   10bac:	1023883a 	mov	r17,r2
   10bb0:	db000817 	ldw	r12,32(sp)
   10bb4:	1207883a 	add	r3,r2,r8
   10bb8:	88800007 	ldb	r2,0(r17)
   10bbc:	10800c20 	cmpeqi	r2,r2,48
   10bc0:	10004f1e 	bne	r2,zero,10d00 <___vfprintf_internal_r+0x1c44>
   10bc4:	d8801417 	ldw	r2,80(sp)
   10bc8:	1893883a 	add	r9,r3,r2
   10bcc:	d9000917 	ldw	r4,36(sp)
   10bd0:	000d883a 	mov	r6,zero
   10bd4:	000f883a 	mov	r7,zero
   10bd8:	a00b883a 	mov	r5,r20
   10bdc:	da401115 	stw	r9,68(sp)
   10be0:	da000815 	stw	r8,32(sp)
   10be4:	db000715 	stw	r12,28(sp)
   10be8:	000b5a80 	call	b5a8 <__eqdf2>
   10bec:	db000717 	ldw	r12,28(sp)
   10bf0:	da000817 	ldw	r8,32(sp)
   10bf4:	da401117 	ldw	r9,68(sp)
   10bf8:	1000811e 	bne	r2,zero,10e00 <___vfprintf_internal_r+0x1d44>
   10bfc:	4805883a 	mov	r2,r9
   10c00:	d8c01417 	ldw	r3,80(sp)
   10c04:	1445c83a 	sub	r2,r2,r17
   10c08:	ad4011d8 	cmpnei	r21,r21,71
   10c0c:	d8c00715 	stw	r3,28(sp)
   10c10:	d8800815 	stw	r2,32(sp)
   10c14:	a83f3e26 	beq	r21,zero,10910 <___vfprintf_internal_r+0x1854>
   10c18:	d8800f17 	ldw	r2,60(sp)
   10c1c:	103f4126 	beq	r2,zero,10924 <___vfprintf_internal_r+0x1868>
   10c20:	d8c00717 	ldw	r3,28(sp)
   10c24:	6080004c 	andi	r2,r12,1
   10c28:	1204b03a 	or	r2,r2,r8
   10c2c:	00c1050e 	bge	zero,r3,11044 <___vfprintf_internal_r+0x1f88>
   10c30:	1000f11e 	bne	r2,zero,10ff8 <___vfprintf_internal_r+0x1f3c>
   10c34:	dd400717 	ldw	r21,28(sp)
   10c38:	a829883a 	mov	r20,r21
   10c3c:	d8800607 	ldb	r2,24(sp)
   10c40:	10007826 	beq	r2,zero,10e24 <___vfprintf_internal_r+0x1d68>
   10c44:	00800b44 	movi	r2,45
   10c48:	d8801345 	stb	r2,77(sp)
   10c4c:	d8800e17 	ldw	r2,56(sp)
   10c50:	0011883a 	mov	r8,zero
   10c54:	d8800615 	stw	r2,24(sp)
   10c58:	003b3506 	br	f930 <___vfprintf_internal_r+0x874>
   10c5c:	044000b4 	movhi	r17,2
   10c60:	8c45c704 	addi	r17,r17,5916
   10c64:	003aba06 	br	f750 <___vfprintf_internal_r+0x694>
   10c68:	800f883a 	mov	r7,r16
   10c6c:	dc000e17 	ldw	r16,56(sp)
   10c70:	10800044 	addi	r2,r2,1
   10c74:	1d47883a 	add	r3,r3,r21
   10c78:	d8801b15 	stw	r2,108(sp)
   10c7c:	b1c00015 	stw	r7,0(r22)
   10c80:	b5400115 	stw	r21,4(r22)
   10c84:	d8c01c15 	stw	r3,112(sp)
   10c88:	10800208 	cmpgei	r2,r2,8
   10c8c:	10003a1e 	bne	r2,zero,10d78 <___vfprintf_internal_r+0x1cbc>
   10c90:	b5800204 	addi	r22,r22,8
   10c94:	003db206 	br	10360 <___vfprintf_internal_r+0x12a4>
   10c98:	00800b44 	movi	r2,45
   10c9c:	d8801345 	stb	r2,77(sp)
   10ca0:	03400b44 	movi	r13,45
   10ca4:	003aa606 	br	f740 <___vfprintf_internal_r+0x684>
   10ca8:	d9801a04 	addi	r6,sp,104
   10cac:	900b883a 	mov	r5,r18
   10cb0:	9809883a 	mov	r4,r19
   10cb4:	0016a440 	call	16a44 <__sprint_r>
   10cb8:	103a0d1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10cbc:	d9401417 	ldw	r5,80(sp)
   10cc0:	d8c01c17 	ldw	r3,112(sp)
   10cc4:	dd802704 	addi	r22,sp,156
   10cc8:	003cd706 	br	10028 <___vfprintf_internal_r+0xf6c>
   10ccc:	1520003c 	xorhi	r20,r2,32768
   10cd0:	00800b44 	movi	r2,45
   10cd4:	d8800605 	stb	r2,24(sp)
   10cd8:	003ee906 	br	10880 <___vfprintf_internal_r+0x17c4>
   10cdc:	05400184 	movi	r21,6
   10ce0:	003e5e06 	br	1065c <___vfprintf_internal_r+0x15a0>
   10ce4:	d9801a04 	addi	r6,sp,104
   10ce8:	900b883a 	mov	r5,r18
   10cec:	9809883a 	mov	r4,r19
   10cf0:	0016a440 	call	16a44 <__sprint_r>
   10cf4:	0039fe06 	br	f4f0 <___vfprintf_internal_r+0x434>
   10cf8:	d9401345 	stb	r5,77(sp)
   10cfc:	0039ac06 	br	f3b0 <___vfprintf_internal_r+0x2f4>
   10d00:	d9000917 	ldw	r4,36(sp)
   10d04:	000d883a 	mov	r6,zero
   10d08:	000f883a 	mov	r7,zero
   10d0c:	a00b883a 	mov	r5,r20
   10d10:	d8c01115 	stw	r3,68(sp)
   10d14:	da000815 	stw	r8,32(sp)
   10d18:	db000715 	stw	r12,28(sp)
   10d1c:	000b5a80 	call	b5a8 <__eqdf2>
   10d20:	db000717 	ldw	r12,28(sp)
   10d24:	da000817 	ldw	r8,32(sp)
   10d28:	d8c01117 	ldw	r3,68(sp)
   10d2c:	103fa526 	beq	r2,zero,10bc4 <___vfprintf_internal_r+0x1b08>
   10d30:	00800044 	movi	r2,1
   10d34:	1205c83a 	sub	r2,r2,r8
   10d38:	d8801415 	stw	r2,80(sp)
   10d3c:	003fa206 	br	10bc8 <___vfprintf_internal_r+0x1b0c>
   10d40:	403ec91e 	bne	r8,zero,10868 <___vfprintf_internal_r+0x17ac>
   10d44:	02000044 	movi	r8,1
   10d48:	003ec706 	br	10868 <___vfprintf_internal_r+0x17ac>
   10d4c:	d9801a04 	addi	r6,sp,104
   10d50:	900b883a 	mov	r5,r18
   10d54:	9809883a 	mov	r4,r19
   10d58:	0016a440 	call	16a44 <__sprint_r>
   10d5c:	1039e41e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10d60:	d9401417 	ldw	r5,80(sp)
   10d64:	d8c01c17 	ldw	r3,112(sp)
   10d68:	d8801b17 	ldw	r2,108(sp)
   10d6c:	dd802704 	addi	r22,sp,156
   10d70:	283cbf0e 	bge	r5,zero,10070 <___vfprintf_internal_r+0xfb4>
   10d74:	003f5f06 	br	10af4 <___vfprintf_internal_r+0x1a38>
   10d78:	d9801a04 	addi	r6,sp,104
   10d7c:	900b883a 	mov	r5,r18
   10d80:	9809883a 	mov	r4,r19
   10d84:	0016a440 	call	16a44 <__sprint_r>
   10d88:	1039d91e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10d8c:	d8c01c17 	ldw	r3,112(sp)
   10d90:	dd802704 	addi	r22,sp,156
   10d94:	003d7206 	br	10360 <___vfprintf_internal_r+0x12a4>
   10d98:	db000417 	ldw	r12,16(sp)
   10d9c:	003ad706 	br	f8fc <___vfprintf_internal_r+0x840>
   10da0:	d8801804 	addi	r2,sp,96
   10da4:	d8800315 	stw	r2,12(sp)
   10da8:	d9400917 	ldw	r5,36(sp)
   10dac:	d8801504 	addi	r2,sp,84
   10db0:	40c00044 	addi	r3,r8,1
   10db4:	d8800215 	stw	r2,8(sp)
   10db8:	d8801404 	addi	r2,sp,80
   10dbc:	d8c00015 	stw	r3,0(sp)
   10dc0:	d8800115 	stw	r2,4(sp)
   10dc4:	01c00084 	movi	r7,2
   10dc8:	a00d883a 	mov	r6,r20
   10dcc:	9809883a 	mov	r4,r19
   10dd0:	db001115 	stw	r12,68(sp)
   10dd4:	da000815 	stw	r8,32(sp)
   10dd8:	d8c00715 	stw	r3,28(sp)
   10ddc:	00115000 	call	11500 <_dtoa_r>
   10de0:	d8c00717 	ldw	r3,28(sp)
   10de4:	da000817 	ldw	r8,32(sp)
   10de8:	db001117 	ldw	r12,68(sp)
   10dec:	1023883a 	mov	r17,r2
   10df0:	e08011d8 	cmpnei	r2,fp,71
   10df4:	103ebd26 	beq	r2,zero,108ec <___vfprintf_internal_r+0x1830>
   10df8:	88d3883a 	add	r9,r17,r3
   10dfc:	003f7306 	br	10bcc <___vfprintf_internal_r+0x1b10>
   10e00:	d8801817 	ldw	r2,96(sp)
   10e04:	127f7e2e 	bgeu	r2,r9,10c00 <___vfprintf_internal_r+0x1b44>
   10e08:	01000c04 	movi	r4,48
   10e0c:	10c00044 	addi	r3,r2,1
   10e10:	d8c01815 	stw	r3,96(sp)
   10e14:	11000005 	stb	r4,0(r2)
   10e18:	d8801817 	ldw	r2,96(sp)
   10e1c:	127ffb36 	bltu	r2,r9,10e0c <___vfprintf_internal_r+0x1d50>
   10e20:	003f7706 	br	10c00 <___vfprintf_internal_r+0x1b44>
   10e24:	d8800e17 	ldw	r2,56(sp)
   10e28:	db401343 	ldbu	r13,77(sp)
   10e2c:	0011883a 	mov	r8,zero
   10e30:	d8800615 	stw	r2,24(sp)
   10e34:	003aba06 	br	f920 <___vfprintf_internal_r+0x864>
   10e38:	d8800717 	ldw	r2,28(sp)
   10e3c:	d8c00817 	ldw	r3,32(sp)
   10e40:	10c02b16 	blt	r2,r3,10ef0 <___vfprintf_internal_r+0x1e34>
   10e44:	6300004c 	andi	r12,r12,1
   10e48:	6000581e 	bne	r12,zero,10fac <___vfprintf_internal_r+0x1ef0>
   10e4c:	1029883a 	mov	r20,r2
   10e50:	1000010e 	bge	r2,zero,10e58 <___vfprintf_internal_r+0x1d9c>
   10e54:	0029883a 	mov	r20,zero
   10e58:	dd400717 	ldw	r21,28(sp)
   10e5c:	070019c4 	movi	fp,103
   10e60:	003f7606 	br	10c3c <___vfprintf_internal_r+0x1b80>
   10e64:	d9801a04 	addi	r6,sp,104
   10e68:	900b883a 	mov	r5,r18
   10e6c:	9809883a 	mov	r4,r19
   10e70:	0016a440 	call	16a44 <__sprint_r>
   10e74:	10399e1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10e78:	dd401417 	ldw	r21,80(sp)
   10e7c:	d8c01c17 	ldw	r3,112(sp)
   10e80:	dd802704 	addi	r22,sp,156
   10e84:	003d4506 	br	1039c <___vfprintf_internal_r+0x12e0>
   10e88:	d9801a04 	addi	r6,sp,104
   10e8c:	900b883a 	mov	r5,r18
   10e90:	9809883a 	mov	r4,r19
   10e94:	0016a440 	call	16a44 <__sprint_r>
   10e98:	1039951e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10e9c:	d8c01c17 	ldw	r3,112(sp)
   10ea0:	dd802704 	addi	r22,sp,156
   10ea4:	a83d2b0e 	bge	r21,zero,10354 <___vfprintf_internal_r+0x1298>
   10ea8:	003ddf06 	br	10628 <___vfprintf_internal_r+0x156c>
   10eac:	02000184 	movi	r8,6
   10eb0:	003e6d06 	br	10868 <___vfprintf_internal_r+0x17ac>
   10eb4:	d9801a04 	addi	r6,sp,104
   10eb8:	900b883a 	mov	r5,r18
   10ebc:	9809883a 	mov	r4,r19
   10ec0:	0016a440 	call	16a44 <__sprint_r>
   10ec4:	10398a1e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10ec8:	d8801417 	ldw	r2,80(sp)
   10ecc:	d9000817 	ldw	r4,32(sp)
   10ed0:	d8c01c17 	ldw	r3,112(sp)
   10ed4:	dd802704 	addi	r22,sp,156
   10ed8:	2085c83a 	sub	r2,r4,r2
   10edc:	003d4306 	br	103ec <___vfprintf_internal_r+0x1330>
   10ee0:	4029883a 	mov	r20,r8
   10ee4:	d8c00615 	stw	r3,24(sp)
   10ee8:	402b883a 	mov	r21,r8
   10eec:	00393606 	br	f3c8 <___vfprintf_internal_r+0x30c>
   10ef0:	d8800817 	ldw	r2,32(sp)
   10ef4:	d8c00b17 	ldw	r3,44(sp)
   10ef8:	10eb883a 	add	r21,r2,r3
   10efc:	d8800717 	ldw	r2,28(sp)
   10f00:	00800316 	blt	zero,r2,10f10 <___vfprintf_internal_r+0x1e54>
   10f04:	d8800717 	ldw	r2,28(sp)
   10f08:	a8abc83a 	sub	r21,r21,r2
   10f0c:	ad400044 	addi	r21,r21,1
   10f10:	a829883a 	mov	r20,r21
   10f14:	a8002a16 	blt	r21,zero,10fc0 <___vfprintf_internal_r+0x1f04>
   10f18:	070019c4 	movi	fp,103
   10f1c:	003f4706 	br	10c3c <___vfprintf_internal_r+0x1b80>
   10f20:	d9401345 	stb	r5,77(sp)
   10f24:	003aa006 	br	f9a8 <___vfprintf_internal_r+0x8ec>
   10f28:	d9401345 	stb	r5,77(sp)
   10f2c:	003b3406 	br	fc00 <___vfprintf_internal_r+0xb44>
   10f30:	d9401345 	stb	r5,77(sp)
   10f34:	0039d706 	br	f694 <___vfprintf_internal_r+0x5d8>
   10f38:	d9401345 	stb	r5,77(sp)
   10f3c:	003a5a06 	br	f8a8 <___vfprintf_internal_r+0x7ec>
   10f40:	d9401345 	stb	r5,77(sp)
   10f44:	003af306 	br	fb14 <___vfprintf_internal_r+0xa58>
   10f48:	d9401345 	stb	r5,77(sp)
   10f4c:	003b4c06 	br	fc80 <___vfprintf_internal_r+0xbc4>
   10f50:	900f883a 	mov	r7,r18
   10f54:	8025883a 	mov	r18,r16
   10f58:	dc000717 	ldw	r16,28(sp)
   10f5c:	10800044 	addi	r2,r2,1
   10f60:	1f07883a 	add	r3,r3,fp
   10f64:	b1c00015 	stw	r7,0(r22)
   10f68:	b7000115 	stw	fp,4(r22)
   10f6c:	d8c01c15 	stw	r3,112(sp)
   10f70:	d8801b15 	stw	r2,108(sp)
   10f74:	11000208 	cmpgei	r4,r2,8
   10f78:	203c3c26 	beq	r4,zero,1006c <___vfprintf_internal_r+0xfb0>
   10f7c:	d9801a04 	addi	r6,sp,104
   10f80:	900b883a 	mov	r5,r18
   10f84:	9809883a 	mov	r4,r19
   10f88:	0016a440 	call	16a44 <__sprint_r>
   10f8c:	1039581e 	bne	r2,zero,f4f0 <___vfprintf_internal_r+0x434>
   10f90:	d8c01c17 	ldw	r3,112(sp)
   10f94:	d8801b17 	ldw	r2,108(sp)
   10f98:	dd802704 	addi	r22,sp,156
   10f9c:	003c3406 	br	10070 <___vfprintf_internal_r+0xfb4>
   10fa0:	00bfffc4 	movi	r2,-1
   10fa4:	d8800515 	stw	r2,20(sp)
   10fa8:	00395406 	br	f4fc <___vfprintf_internal_r+0x440>
   10fac:	d8800717 	ldw	r2,28(sp)
   10fb0:	d8c00b17 	ldw	r3,44(sp)
   10fb4:	10eb883a 	add	r21,r2,r3
   10fb8:	a829883a 	mov	r20,r21
   10fbc:	a83fd60e 	bge	r21,zero,10f18 <___vfprintf_internal_r+0x1e5c>
   10fc0:	0029883a 	mov	r20,zero
   10fc4:	003fd406 	br	10f18 <___vfprintf_internal_r+0x1e5c>
   10fc8:	00800c04 	movi	r2,48
   10fcc:	ad400c04 	addi	r21,r21,48
   10fd0:	d88016c5 	stb	r2,91(sp)
   10fd4:	00800104 	movi	r2,4
   10fd8:	dd401705 	stb	r21,92(sp)
   10fdc:	d8801015 	stw	r2,64(sp)
   10fe0:	003e8606 	br	109fc <___vfprintf_internal_r+0x1940>
   10fe4:	05400044 	movi	r21,1
   10fe8:	a8abc83a 	sub	r21,r21,r2
   10fec:	00800b44 	movi	r2,45
   10ff0:	d8801685 	stb	r2,90(sp)
   10ff4:	003e5206 	br	10940 <___vfprintf_internal_r+0x1884>
   10ff8:	d8800b17 	ldw	r2,44(sp)
   10ffc:	18ab883a 	add	r21,r3,r2
   11000:	aa2b883a 	add	r21,r21,r8
   11004:	a829883a 	mov	r20,r21
   11008:	a83f0c0e 	bge	r21,zero,10c3c <___vfprintf_internal_r+0x1b80>
   1100c:	0029883a 	mov	r20,zero
   11010:	003f0a06 	br	10c3c <___vfprintf_internal_r+0x1b80>
   11014:	6080004c 	andi	r2,r12,1
   11018:	d8800715 	stw	r2,28(sp)
   1101c:	103e7c1e 	bne	r2,zero,10a10 <___vfprintf_internal_r+0x1954>
   11020:	003ff806 	br	11004 <___vfprintf_internal_r+0x1f48>
   11024:	d8800a17 	ldw	r2,40(sp)
   11028:	10001316 	blt	r2,zero,11078 <___vfprintf_internal_r+0x1fbc>
   1102c:	db401343 	ldbu	r13,77(sp)
   11030:	e0801210 	cmplti	r2,fp,72
   11034:	10000d1e 	bne	r2,zero,1106c <___vfprintf_internal_r+0x1fb0>
   11038:	044000b4 	movhi	r17,2
   1103c:	8c45ca04 	addi	r17,r17,5928
   11040:	0039c306 	br	f750 <___vfprintf_internal_r+0x694>
   11044:	1000031e 	bne	r2,zero,11054 <___vfprintf_internal_r+0x1f98>
   11048:	05000044 	movi	r20,1
   1104c:	05400044 	movi	r21,1
   11050:	003efa06 	br	10c3c <___vfprintf_internal_r+0x1b80>
   11054:	d8800b17 	ldw	r2,44(sp)
   11058:	15400044 	addi	r21,r2,1
   1105c:	aa2b883a 	add	r21,r21,r8
   11060:	003fe806 	br	11004 <___vfprintf_internal_r+0x1f48>
   11064:	8025883a 	mov	r18,r16
   11068:	00392106 	br	f4f0 <___vfprintf_internal_r+0x434>
   1106c:	044000b4 	movhi	r17,2
   11070:	8c45c904 	addi	r17,r17,5924
   11074:	0039b606 	br	f750 <___vfprintf_internal_r+0x694>
   11078:	00800b44 	movi	r2,45
   1107c:	d8801345 	stb	r2,77(sp)
   11080:	03400b44 	movi	r13,45
   11084:	003fea06 	br	11030 <___vfprintf_internal_r+0x1f74>
   11088:	d8800617 	ldw	r2,24(sp)
   1108c:	12000017 	ldw	r8,0(r2)
   11090:	10800104 	addi	r2,r2,4
   11094:	4000010e 	bge	r8,zero,1109c <___vfprintf_internal_r+0x1fe0>
   11098:	023fffc4 	movi	r8,-1
   1109c:	bf000043 	ldbu	fp,1(r23)
   110a0:	d8800615 	stw	r2,24(sp)
   110a4:	182f883a 	mov	r23,r3
   110a8:	e2c03fcc 	andi	r11,fp,255
   110ac:	5ac0201c 	xori	r11,r11,128
   110b0:	5affe004 	addi	r11,r11,-128
   110b4:	00384d06 	br	f1ec <___vfprintf_internal_r+0x130>
   110b8:	00800084 	movi	r2,2
   110bc:	d8801015 	stw	r2,64(sp)
   110c0:	003e4e06 	br	109fc <___vfprintf_internal_r+0x1940>

000110c4 <__vfprintf_internal>:
   110c4:	00c000b4 	movhi	r3,2
   110c8:	2005883a 	mov	r2,r4
   110cc:	190eaa17 	ldw	r4,15016(r3)
   110d0:	300f883a 	mov	r7,r6
   110d4:	280d883a 	mov	r6,r5
   110d8:	100b883a 	mov	r5,r2
   110dc:	000f0bc1 	jmpi	f0bc <___vfprintf_internal_r>

000110e0 <__sbprintf>:
   110e0:	2880030b 	ldhu	r2,12(r5)
   110e4:	2b001917 	ldw	r12,100(r5)
   110e8:	2ac0038b 	ldhu	r11,14(r5)
   110ec:	2a800717 	ldw	r10,28(r5)
   110f0:	2a400917 	ldw	r9,36(r5)
   110f4:	defee204 	addi	sp,sp,-1144
   110f8:	da001a04 	addi	r8,sp,104
   110fc:	00c10004 	movi	r3,1024
   11100:	dc011a15 	stw	r16,1128(sp)
   11104:	10bfff4c 	andi	r2,r2,65533
   11108:	2821883a 	mov	r16,r5
   1110c:	d80b883a 	mov	r5,sp
   11110:	dc811c15 	stw	r18,1136(sp)
   11114:	dc411b15 	stw	r17,1132(sp)
   11118:	dfc11d15 	stw	ra,1140(sp)
   1111c:	2025883a 	mov	r18,r4
   11120:	d880030d 	sth	r2,12(sp)
   11124:	db001915 	stw	r12,100(sp)
   11128:	dac0038d 	sth	r11,14(sp)
   1112c:	da800715 	stw	r10,28(sp)
   11130:	da400915 	stw	r9,36(sp)
   11134:	da000015 	stw	r8,0(sp)
   11138:	da000415 	stw	r8,16(sp)
   1113c:	d8c00215 	stw	r3,8(sp)
   11140:	d8c00515 	stw	r3,20(sp)
   11144:	d8000615 	stw	zero,24(sp)
   11148:	000f0bc0 	call	f0bc <___vfprintf_internal_r>
   1114c:	1023883a 	mov	r17,r2
   11150:	10000d0e 	bge	r2,zero,11188 <__sbprintf+0xa8>
   11154:	d880030b 	ldhu	r2,12(sp)
   11158:	1080100c 	andi	r2,r2,64
   1115c:	10000326 	beq	r2,zero,1116c <__sbprintf+0x8c>
   11160:	8080030b 	ldhu	r2,12(r16)
   11164:	10801014 	ori	r2,r2,64
   11168:	8080030d 	sth	r2,12(r16)
   1116c:	8805883a 	mov	r2,r17
   11170:	dfc11d17 	ldw	ra,1140(sp)
   11174:	dc811c17 	ldw	r18,1136(sp)
   11178:	dc411b17 	ldw	r17,1132(sp)
   1117c:	dc011a17 	ldw	r16,1128(sp)
   11180:	dec11e04 	addi	sp,sp,1144
   11184:	f800283a 	ret
   11188:	d80b883a 	mov	r5,sp
   1118c:	9009883a 	mov	r4,r18
   11190:	0012e700 	call	12e70 <_fflush_r>
   11194:	103fef26 	beq	r2,zero,11154 <__sbprintf+0x74>
   11198:	047fffc4 	movi	r17,-1
   1119c:	003fed06 	br	11154 <__sbprintf+0x74>

000111a0 <__swsetup_r>:
   111a0:	008000b4 	movhi	r2,2
   111a4:	108eaa17 	ldw	r2,15016(r2)
   111a8:	defffd04 	addi	sp,sp,-12
   111ac:	dc400115 	stw	r17,4(sp)
   111b0:	dc000015 	stw	r16,0(sp)
   111b4:	dfc00215 	stw	ra,8(sp)
   111b8:	2023883a 	mov	r17,r4
   111bc:	2821883a 	mov	r16,r5
   111c0:	10000226 	beq	r2,zero,111cc <__swsetup_r+0x2c>
   111c4:	10c00e17 	ldw	r3,56(r2)
   111c8:	18001f26 	beq	r3,zero,11248 <__swsetup_r+0xa8>
   111cc:	8180030b 	ldhu	r6,12(r16)
   111d0:	30c0020c 	andi	r3,r6,8
   111d4:	3005883a 	mov	r2,r6
   111d8:	18002126 	beq	r3,zero,11260 <__swsetup_r+0xc0>
   111dc:	80c00417 	ldw	r3,16(r16)
   111e0:	18002826 	beq	r3,zero,11284 <__swsetup_r+0xe4>
   111e4:	1100004c 	andi	r4,r2,1
   111e8:	20000b1e 	bne	r4,zero,11218 <__swsetup_r+0x78>
   111ec:	1100008c 	andi	r4,r2,2
   111f0:	20002e1e 	bne	r4,zero,112ac <__swsetup_r+0x10c>
   111f4:	81000517 	ldw	r4,20(r16)
   111f8:	81000215 	stw	r4,8(r16)
   111fc:	18000b26 	beq	r3,zero,1122c <__swsetup_r+0x8c>
   11200:	0005883a 	mov	r2,zero
   11204:	dfc00217 	ldw	ra,8(sp)
   11208:	dc400117 	ldw	r17,4(sp)
   1120c:	dc000017 	ldw	r16,0(sp)
   11210:	dec00304 	addi	sp,sp,12
   11214:	f800283a 	ret
   11218:	81000517 	ldw	r4,20(r16)
   1121c:	80000215 	stw	zero,8(r16)
   11220:	0109c83a 	sub	r4,zero,r4
   11224:	81000615 	stw	r4,24(r16)
   11228:	183ff51e 	bne	r3,zero,11200 <__swsetup_r+0x60>
   1122c:	10c0200c 	andi	r3,r2,128
   11230:	0005883a 	mov	r2,zero
   11234:	183ff326 	beq	r3,zero,11204 <__swsetup_r+0x64>
   11238:	31801014 	ori	r6,r6,64
   1123c:	8180030d 	sth	r6,12(r16)
   11240:	00bfffc4 	movi	r2,-1
   11244:	003fef06 	br	11204 <__swsetup_r+0x64>
   11248:	1009883a 	mov	r4,r2
   1124c:	00132a80 	call	132a8 <__sinit>
   11250:	8180030b 	ldhu	r6,12(r16)
   11254:	30c0020c 	andi	r3,r6,8
   11258:	3005883a 	mov	r2,r6
   1125c:	183fdf1e 	bne	r3,zero,111dc <__swsetup_r+0x3c>
   11260:	3080040c 	andi	r2,r6,16
   11264:	10002126 	beq	r2,zero,112ec <__swsetup_r+0x14c>
   11268:	3080010c 	andi	r2,r6,4
   1126c:	1000111e 	bne	r2,zero,112b4 <__swsetup_r+0x114>
   11270:	80c00417 	ldw	r3,16(r16)
   11274:	30800214 	ori	r2,r6,8
   11278:	8080030d 	sth	r2,12(r16)
   1127c:	100d883a 	mov	r6,r2
   11280:	183fd81e 	bne	r3,zero,111e4 <__swsetup_r+0x44>
   11284:	1100a00c 	andi	r4,r2,640
   11288:	21008020 	cmpeqi	r4,r4,512
   1128c:	203fd51e 	bne	r4,zero,111e4 <__swsetup_r+0x44>
   11290:	800b883a 	mov	r5,r16
   11294:	8809883a 	mov	r4,r17
   11298:	0014a680 	call	14a68 <__smakebuf_r>
   1129c:	8180030b 	ldhu	r6,12(r16)
   112a0:	80c00417 	ldw	r3,16(r16)
   112a4:	3005883a 	mov	r2,r6
   112a8:	003fce06 	br	111e4 <__swsetup_r+0x44>
   112ac:	0009883a 	mov	r4,zero
   112b0:	003fd106 	br	111f8 <__swsetup_r+0x58>
   112b4:	81400c17 	ldw	r5,48(r16)
   112b8:	28000626 	beq	r5,zero,112d4 <__swsetup_r+0x134>
   112bc:	80801004 	addi	r2,r16,64
   112c0:	28800326 	beq	r5,r2,112d0 <__swsetup_r+0x130>
   112c4:	8809883a 	mov	r4,r17
   112c8:	001340c0 	call	1340c <_free_r>
   112cc:	8180030b 	ldhu	r6,12(r16)
   112d0:	80000c15 	stw	zero,48(r16)
   112d4:	80c00417 	ldw	r3,16(r16)
   112d8:	00bff6c4 	movi	r2,-37
   112dc:	118c703a 	and	r6,r2,r6
   112e0:	80000115 	stw	zero,4(r16)
   112e4:	80c00015 	stw	r3,0(r16)
   112e8:	003fe206 	br	11274 <__swsetup_r+0xd4>
   112ec:	00800244 	movi	r2,9
   112f0:	88800015 	stw	r2,0(r17)
   112f4:	31801014 	ori	r6,r6,64
   112f8:	8180030d 	sth	r6,12(r16)
   112fc:	00bfffc4 	movi	r2,-1
   11300:	003fc006 	br	11204 <__swsetup_r+0x64>

00011304 <quorem>:
   11304:	defff504 	addi	sp,sp,-44
   11308:	dc800315 	stw	r18,12(sp)
   1130c:	20800417 	ldw	r2,16(r4)
   11310:	2c800417 	ldw	r18,16(r5)
   11314:	dfc00a15 	stw	ra,40(sp)
   11318:	df000915 	stw	fp,36(sp)
   1131c:	ddc00815 	stw	r23,32(sp)
   11320:	dd800715 	stw	r22,28(sp)
   11324:	dd400615 	stw	r21,24(sp)
   11328:	dd000515 	stw	r20,20(sp)
   1132c:	dcc00415 	stw	r19,16(sp)
   11330:	dc400215 	stw	r17,8(sp)
   11334:	dc000115 	stw	r16,4(sp)
   11338:	14806f16 	blt	r2,r18,114f8 <quorem+0x1f4>
   1133c:	94bfffc4 	addi	r18,r18,-1
   11340:	902c90ba 	slli	r22,r18,2
   11344:	2c000504 	addi	r16,r5,20
   11348:	25000504 	addi	r20,r4,20
   1134c:	85a7883a 	add	r19,r16,r22
   11350:	9f000017 	ldw	fp,0(r19)
   11354:	a5ad883a 	add	r22,r20,r22
   11358:	202b883a 	mov	r21,r4
   1135c:	b1000017 	ldw	r4,0(r22)
   11360:	e7000044 	addi	fp,fp,1
   11364:	282f883a 	mov	r23,r5
   11368:	e00b883a 	mov	r5,fp
   1136c:	d9000015 	stw	r4,0(sp)
   11370:	000933c0 	call	933c <__udivsi3>
   11374:	d9000017 	ldw	r4,0(sp)
   11378:	1023883a 	mov	r17,r2
   1137c:	27002a36 	bltu	r4,fp,11428 <quorem+0x124>
   11380:	800b883a 	mov	r5,r16
   11384:	a009883a 	mov	r4,r20
   11388:	0013883a 	mov	r9,zero
   1138c:	0007883a 	mov	r3,zero
   11390:	2a000017 	ldw	r8,0(r5)
   11394:	21800017 	ldw	r6,0(r4)
   11398:	21000104 	addi	r4,r4,4
   1139c:	40bfffcc 	andi	r2,r8,65535
   113a0:	1445383a 	mul	r2,r2,r17
   113a4:	400ed43a 	srli	r7,r8,16
   113a8:	32bfffcc 	andi	r10,r6,65535
   113ac:	1245883a 	add	r2,r2,r9
   113b0:	1012d43a 	srli	r9,r2,16
   113b4:	123fffcc 	andi	r8,r2,65535
   113b8:	3c4f383a 	mul	r7,r7,r17
   113bc:	1a07c83a 	sub	r3,r3,r8
   113c0:	1a91883a 	add	r8,r3,r10
   113c4:	3006d43a 	srli	r3,r6,16
   113c8:	4005d43a 	srai	r2,r8,16
   113cc:	3a4f883a 	add	r7,r7,r9
   113d0:	39bfffcc 	andi	r6,r7,65535
   113d4:	1987c83a 	sub	r3,r3,r6
   113d8:	1887883a 	add	r3,r3,r2
   113dc:	1804943a 	slli	r2,r3,16
   113e0:	423fffcc 	andi	r8,r8,65535
   113e4:	29400104 	addi	r5,r5,4
   113e8:	1210b03a 	or	r8,r2,r8
   113ec:	223fff15 	stw	r8,-4(r4)
   113f0:	3812d43a 	srli	r9,r7,16
   113f4:	1807d43a 	srai	r3,r3,16
   113f8:	997fe52e 	bgeu	r19,r5,11390 <quorem+0x8c>
   113fc:	b0800017 	ldw	r2,0(r22)
   11400:	1000091e 	bne	r2,zero,11428 <quorem+0x124>
   11404:	b5bfff04 	addi	r22,r22,-4
   11408:	a5800336 	bltu	r20,r22,11418 <quorem+0x114>
   1140c:	00000506 	br	11424 <quorem+0x120>
   11410:	94bfffc4 	addi	r18,r18,-1
   11414:	a580032e 	bgeu	r20,r22,11424 <quorem+0x120>
   11418:	b0800017 	ldw	r2,0(r22)
   1141c:	b5bfff04 	addi	r22,r22,-4
   11420:	103ffb26 	beq	r2,zero,11410 <quorem+0x10c>
   11424:	ac800415 	stw	r18,16(r21)
   11428:	b80b883a 	mov	r5,r23
   1142c:	a809883a 	mov	r4,r21
   11430:	0015a0c0 	call	15a0c <__mcmp>
   11434:	10002316 	blt	r2,zero,114c4 <quorem+0x1c0>
   11438:	8c400044 	addi	r17,r17,1
   1143c:	a00d883a 	mov	r6,r20
   11440:	0007883a 	mov	r3,zero
   11444:	81000017 	ldw	r4,0(r16)
   11448:	31400017 	ldw	r5,0(r6)
   1144c:	31800104 	addi	r6,r6,4
   11450:	20bfffcc 	andi	r2,r4,65535
   11454:	1887c83a 	sub	r3,r3,r2
   11458:	28bfffcc 	andi	r2,r5,65535
   1145c:	1885883a 	add	r2,r3,r2
   11460:	2008d43a 	srli	r4,r4,16
   11464:	2806d43a 	srli	r3,r5,16
   11468:	100fd43a 	srai	r7,r2,16
   1146c:	117fffcc 	andi	r5,r2,65535
   11470:	1907c83a 	sub	r3,r3,r4
   11474:	19c7883a 	add	r3,r3,r7
   11478:	1804943a 	slli	r2,r3,16
   1147c:	84000104 	addi	r16,r16,4
   11480:	1807d43a 	srai	r3,r3,16
   11484:	1144b03a 	or	r2,r2,r5
   11488:	30bfff15 	stw	r2,-4(r6)
   1148c:	9c3fed2e 	bgeu	r19,r16,11444 <quorem+0x140>
   11490:	900490ba 	slli	r2,r18,2
   11494:	a085883a 	add	r2,r20,r2
   11498:	10c00017 	ldw	r3,0(r2)
   1149c:	1800091e 	bne	r3,zero,114c4 <quorem+0x1c0>
   114a0:	10bfff04 	addi	r2,r2,-4
   114a4:	a0800336 	bltu	r20,r2,114b4 <quorem+0x1b0>
   114a8:	00000506 	br	114c0 <quorem+0x1bc>
   114ac:	94bfffc4 	addi	r18,r18,-1
   114b0:	a080032e 	bgeu	r20,r2,114c0 <quorem+0x1bc>
   114b4:	10c00017 	ldw	r3,0(r2)
   114b8:	10bfff04 	addi	r2,r2,-4
   114bc:	183ffb26 	beq	r3,zero,114ac <quorem+0x1a8>
   114c0:	ac800415 	stw	r18,16(r21)
   114c4:	8805883a 	mov	r2,r17
   114c8:	dfc00a17 	ldw	ra,40(sp)
   114cc:	df000917 	ldw	fp,36(sp)
   114d0:	ddc00817 	ldw	r23,32(sp)
   114d4:	dd800717 	ldw	r22,28(sp)
   114d8:	dd400617 	ldw	r21,24(sp)
   114dc:	dd000517 	ldw	r20,20(sp)
   114e0:	dcc00417 	ldw	r19,16(sp)
   114e4:	dc800317 	ldw	r18,12(sp)
   114e8:	dc400217 	ldw	r17,8(sp)
   114ec:	dc000117 	ldw	r16,4(sp)
   114f0:	dec00b04 	addi	sp,sp,44
   114f4:	f800283a 	ret
   114f8:	0005883a 	mov	r2,zero
   114fc:	003ff206 	br	114c8 <quorem+0x1c4>

00011500 <_dtoa_r>:
   11500:	20801017 	ldw	r2,64(r4)
   11504:	deffe304 	addi	sp,sp,-116
   11508:	df001b15 	stw	fp,108(sp)
   1150c:	dcc01615 	stw	r19,88(sp)
   11510:	dc801515 	stw	r18,84(sp)
   11514:	dc401415 	stw	r17,80(sp)
   11518:	dc001315 	stw	r16,76(sp)
   1151c:	dfc01c15 	stw	ra,112(sp)
   11520:	ddc01a15 	stw	r23,104(sp)
   11524:	dd801915 	stw	r22,100(sp)
   11528:	dd401815 	stw	r21,96(sp)
   1152c:	dd001715 	stw	r20,92(sp)
   11530:	d9c00215 	stw	r7,8(sp)
   11534:	dc001f17 	ldw	r16,124(sp)
   11538:	2039883a 	mov	fp,r4
   1153c:	3025883a 	mov	r18,r6
   11540:	2827883a 	mov	r19,r5
   11544:	3023883a 	mov	r17,r6
   11548:	10000826 	beq	r2,zero,1156c <_dtoa_r+0x6c>
   1154c:	21801117 	ldw	r6,68(r4)
   11550:	00c00044 	movi	r3,1
   11554:	100b883a 	mov	r5,r2
   11558:	1986983a 	sll	r3,r3,r6
   1155c:	11800115 	stw	r6,4(r2)
   11560:	10c00215 	stw	r3,8(r2)
   11564:	00150900 	call	15090 <_Bfree>
   11568:	e0001015 	stw	zero,64(fp)
   1156c:	90018916 	blt	r18,zero,11b94 <_dtoa_r+0x694>
   11570:	80000015 	stw	zero,0(r16)
   11574:	909ffc2c 	andhi	r2,r18,32752
   11578:	00dffc34 	movhi	r3,32752
   1157c:	10c18e26 	beq	r2,r3,11bb8 <_dtoa_r+0x6b8>
   11580:	000d883a 	mov	r6,zero
   11584:	000f883a 	mov	r7,zero
   11588:	9809883a 	mov	r4,r19
   1158c:	880b883a 	mov	r5,r17
   11590:	000b5a80 	call	b5a8 <__eqdf2>
   11594:	1000191e 	bne	r2,zero,115fc <_dtoa_r+0xfc>
   11598:	d8c01e17 	ldw	r3,120(sp)
   1159c:	00800044 	movi	r2,1
   115a0:	18800015 	stw	r2,0(r3)
   115a4:	d8802017 	ldw	r2,128(sp)
   115a8:	1002ff26 	beq	r2,zero,121a8 <_dtoa_r+0xca8>
   115ac:	d9002017 	ldw	r4,128(sp)
   115b0:	008000b4 	movhi	r2,2
   115b4:	1085d744 	addi	r2,r2,5981
   115b8:	00c000b4 	movhi	r3,2
   115bc:	20800015 	stw	r2,0(r4)
   115c0:	1885d704 	addi	r2,r3,5980
   115c4:	d8800115 	stw	r2,4(sp)
   115c8:	d8800117 	ldw	r2,4(sp)
   115cc:	dfc01c17 	ldw	ra,112(sp)
   115d0:	df001b17 	ldw	fp,108(sp)
   115d4:	ddc01a17 	ldw	r23,104(sp)
   115d8:	dd801917 	ldw	r22,100(sp)
   115dc:	dd401817 	ldw	r21,96(sp)
   115e0:	dd001717 	ldw	r20,92(sp)
   115e4:	dcc01617 	ldw	r19,88(sp)
   115e8:	dc801517 	ldw	r18,84(sp)
   115ec:	dc401417 	ldw	r17,80(sp)
   115f0:	dc001317 	ldw	r16,76(sp)
   115f4:	dec01d04 	addi	sp,sp,116
   115f8:	f800283a 	ret
   115fc:	d8801104 	addi	r2,sp,68
   11600:	9020d53a 	srli	r16,r18,20
   11604:	d8800015 	stw	r2,0(sp)
   11608:	d9c01204 	addi	r7,sp,72
   1160c:	980b883a 	mov	r5,r19
   11610:	880d883a 	mov	r6,r17
   11614:	e009883a 	mov	r4,fp
   11618:	0015df40 	call	15df4 <__d2b>
   1161c:	102f883a 	mov	r23,r2
   11620:	8001781e 	bne	r16,zero,11c04 <_dtoa_r+0x704>
   11624:	dd001117 	ldw	r20,68(sp)
   11628:	dc001217 	ldw	r16,72(sp)
   1162c:	a421883a 	add	r16,r20,r16
   11630:	80810c84 	addi	r2,r16,1074
   11634:	10c00850 	cmplti	r3,r2,33
   11638:	1802eb1e 	bne	r3,zero,121e8 <_dtoa_r+0xce8>
   1163c:	01001004 	movi	r4,64
   11640:	2085c83a 	sub	r2,r4,r2
   11644:	81010484 	addi	r4,r16,1042
   11648:	90a4983a 	sll	r18,r18,r2
   1164c:	9908d83a 	srl	r4,r19,r4
   11650:	9108b03a 	or	r4,r18,r4
   11654:	000c9040 	call	c904 <__floatunsidf>
   11658:	1009883a 	mov	r4,r2
   1165c:	017f8434 	movhi	r5,65040
   11660:	00800044 	movi	r2,1
   11664:	194b883a 	add	r5,r3,r5
   11668:	843fffc4 	addi	r16,r16,-1
   1166c:	d8800915 	stw	r2,36(sp)
   11670:	000d883a 	mov	r6,zero
   11674:	01cffe34 	movhi	r7,16376
   11678:	000be6c0 	call	be6c <__subdf3>
   1167c:	0198dbf4 	movhi	r6,25455
   11680:	01cff4f4 	movhi	r7,16339
   11684:	3190d844 	addi	r6,r6,17249
   11688:	39e1e9c4 	addi	r7,r7,-30809
   1168c:	1009883a 	mov	r4,r2
   11690:	180b883a 	mov	r5,r3
   11694:	000b7f80 	call	b7f8 <__muldf3>
   11698:	01a2d874 	movhi	r6,35681
   1169c:	01cff1f4 	movhi	r7,16327
   116a0:	31b22cc4 	addi	r6,r6,-14157
   116a4:	39e28a04 	addi	r7,r7,-30168
   116a8:	180b883a 	mov	r5,r3
   116ac:	1009883a 	mov	r4,r2
   116b0:	000a4680 	call	a468 <__adddf3>
   116b4:	8009883a 	mov	r4,r16
   116b8:	102b883a 	mov	r21,r2
   116bc:	1825883a 	mov	r18,r3
   116c0:	000c84c0 	call	c84c <__floatsidf>
   116c4:	019427f4 	movhi	r6,20639
   116c8:	01cff4f4 	movhi	r7,16339
   116cc:	319e7ec4 	addi	r6,r6,31227
   116d0:	39d104c4 	addi	r7,r7,17427
   116d4:	1009883a 	mov	r4,r2
   116d8:	180b883a 	mov	r5,r3
   116dc:	000b7f80 	call	b7f8 <__muldf3>
   116e0:	100d883a 	mov	r6,r2
   116e4:	180f883a 	mov	r7,r3
   116e8:	a809883a 	mov	r4,r21
   116ec:	900b883a 	mov	r5,r18
   116f0:	000a4680 	call	a468 <__adddf3>
   116f4:	1009883a 	mov	r4,r2
   116f8:	180b883a 	mov	r5,r3
   116fc:	1025883a 	mov	r18,r2
   11700:	182d883a 	mov	r22,r3
   11704:	000c7cc0 	call	c7cc <__fixdfsi>
   11708:	000d883a 	mov	r6,zero
   1170c:	000f883a 	mov	r7,zero
   11710:	9009883a 	mov	r4,r18
   11714:	b00b883a 	mov	r5,r22
   11718:	102b883a 	mov	r21,r2
   1171c:	000b7100 	call	b710 <__ledf2>
   11720:	10029716 	blt	r2,zero,12180 <_dtoa_r+0xc80>
   11724:	a421c83a 	sub	r16,r20,r16
   11728:	a88005e8 	cmpgeui	r2,r21,23
   1172c:	85bfffc4 	addi	r22,r16,-1
   11730:	10028b1e 	bne	r2,zero,12160 <_dtoa_r+0xc60>
   11734:	a80690fa 	slli	r3,r21,3
   11738:	008000b4 	movhi	r2,2
   1173c:	10867904 	addi	r2,r2,6628
   11740:	10c5883a 	add	r2,r2,r3
   11744:	11800017 	ldw	r6,0(r2)
   11748:	11c00117 	ldw	r7,4(r2)
   1174c:	9809883a 	mov	r4,r19
   11750:	880b883a 	mov	r5,r17
   11754:	000b7100 	call	b710 <__ledf2>
   11758:	10025f0e 	bge	r2,zero,120d8 <_dtoa_r+0xbd8>
   1175c:	d8000815 	stw	zero,32(sp)
   11760:	ad7fffc4 	addi	r21,r21,-1
   11764:	b0028116 	blt	r22,zero,1216c <_dtoa_r+0xc6c>
   11768:	d8000415 	stw	zero,16(sp)
   1176c:	a8025d0e 	bge	r21,zero,120e4 <_dtoa_r+0xbe4>
   11770:	d8800417 	ldw	r2,16(sp)
   11774:	d8c00217 	ldw	r3,8(sp)
   11778:	dd400615 	stw	r21,24(sp)
   1177c:	1545c83a 	sub	r2,r2,r21
   11780:	d8800415 	stw	r2,16(sp)
   11784:	0545c83a 	sub	r2,zero,r21
   11788:	d8800715 	stw	r2,28(sp)
   1178c:	188002a8 	cmpgeui	r2,r3,10
   11790:	002b883a 	mov	r21,zero
   11794:	1002591e 	bne	r2,zero,120fc <_dtoa_r+0xbfc>
   11798:	18800190 	cmplti	r2,r3,6
   1179c:	1002961e 	bne	r2,zero,121f8 <_dtoa_r+0xcf8>
   117a0:	18bfff04 	addi	r2,r3,-4
   117a4:	d8800215 	stw	r2,8(sp)
   117a8:	0021883a 	mov	r16,zero
   117ac:	d8c00217 	ldw	r3,8(sp)
   117b0:	18800120 	cmpeqi	r2,r3,4
   117b4:	10036d1e 	bne	r2,zero,1256c <_dtoa_r+0x106c>
   117b8:	18800160 	cmpeqi	r2,r3,5
   117bc:	1003291e 	bne	r2,zero,12464 <_dtoa_r+0xf64>
   117c0:	188000a0 	cmpeqi	r2,r3,2
   117c4:	10025926 	beq	r2,zero,1212c <_dtoa_r+0xc2c>
   117c8:	d8000515 	stw	zero,20(sp)
   117cc:	d8801d17 	ldw	r2,116(sp)
   117d0:	0083340e 	bge	zero,r2,124a4 <_dtoa_r+0xfa4>
   117d4:	d8800b15 	stw	r2,44(sp)
   117d8:	d8800315 	stw	r2,12(sp)
   117dc:	100d883a 	mov	r6,r2
   117e0:	e0001115 	stw	zero,68(fp)
   117e4:	30800610 	cmplti	r2,r6,24
   117e8:	1004f61e 	bne	r2,zero,12bc4 <_dtoa_r+0x16c4>
   117ec:	00c00044 	movi	r3,1
   117f0:	00800104 	movi	r2,4
   117f4:	1085883a 	add	r2,r2,r2
   117f8:	11000504 	addi	r4,r2,20
   117fc:	180b883a 	mov	r5,r3
   11800:	18c00044 	addi	r3,r3,1
   11804:	313ffb2e 	bgeu	r6,r4,117f4 <_dtoa_r+0x2f4>
   11808:	e1401115 	stw	r5,68(fp)
   1180c:	e009883a 	mov	r4,fp
   11810:	0014fec0 	call	14fec <_Balloc>
   11814:	d8800115 	stw	r2,4(sp)
   11818:	1004e326 	beq	r2,zero,12ba8 <_dtoa_r+0x16a8>
   1181c:	d8800117 	ldw	r2,4(sp)
   11820:	e0801015 	stw	r2,64(fp)
   11824:	d8800317 	ldw	r2,12(sp)
   11828:	108003e8 	cmpgeui	r2,r2,15
   1182c:	1001091e 	bne	r2,zero,11c54 <_dtoa_r+0x754>
   11830:	80010826 	beq	r16,zero,11c54 <_dtoa_r+0x754>
   11834:	d9000617 	ldw	r4,24(sp)
   11838:	0103970e 	bge	zero,r4,12698 <_dtoa_r+0x1198>
   1183c:	208003cc 	andi	r2,r4,15
   11840:	100690fa 	slli	r3,r2,3
   11844:	2029d13a 	srai	r20,r4,4
   11848:	008000b4 	movhi	r2,2
   1184c:	10867904 	addi	r2,r2,6628
   11850:	10c5883a 	add	r2,r2,r3
   11854:	a0c0040c 	andi	r3,r20,16
   11858:	12800017 	ldw	r10,0(r2)
   1185c:	12400117 	ldw	r9,4(r2)
   11860:	18033c26 	beq	r3,zero,12554 <_dtoa_r+0x1054>
   11864:	008000b4 	movhi	r2,2
   11868:	10866f04 	addi	r2,r2,6588
   1186c:	11800817 	ldw	r6,32(r2)
   11870:	11c00917 	ldw	r7,36(r2)
   11874:	9809883a 	mov	r4,r19
   11878:	880b883a 	mov	r5,r17
   1187c:	da400e15 	stw	r9,56(sp)
   11880:	da800d15 	stw	r10,52(sp)
   11884:	000ad580 	call	ad58 <__divdf3>
   11888:	da800d17 	ldw	r10,52(sp)
   1188c:	da400e17 	ldw	r9,56(sp)
   11890:	a50003cc 	andi	r20,r20,15
   11894:	d8800a15 	stw	r2,40(sp)
   11898:	d8c00c15 	stw	r3,48(sp)
   1189c:	040000c4 	movi	r16,3
   118a0:	a0001126 	beq	r20,zero,118e8 <_dtoa_r+0x3e8>
   118a4:	048000b4 	movhi	r18,2
   118a8:	94866f04 	addi	r18,r18,6588
   118ac:	5009883a 	mov	r4,r10
   118b0:	480b883a 	mov	r5,r9
   118b4:	a180004c 	andi	r6,r20,1
   118b8:	30000626 	beq	r6,zero,118d4 <_dtoa_r+0x3d4>
   118bc:	91800017 	ldw	r6,0(r18)
   118c0:	91c00117 	ldw	r7,4(r18)
   118c4:	84000044 	addi	r16,r16,1
   118c8:	000b7f80 	call	b7f8 <__muldf3>
   118cc:	1009883a 	mov	r4,r2
   118d0:	180b883a 	mov	r5,r3
   118d4:	a029d07a 	srai	r20,r20,1
   118d8:	94800204 	addi	r18,r18,8
   118dc:	a03ff51e 	bne	r20,zero,118b4 <_dtoa_r+0x3b4>
   118e0:	2015883a 	mov	r10,r4
   118e4:	2813883a 	mov	r9,r5
   118e8:	d9000a17 	ldw	r4,40(sp)
   118ec:	d9400c17 	ldw	r5,48(sp)
   118f0:	500d883a 	mov	r6,r10
   118f4:	480f883a 	mov	r7,r9
   118f8:	000ad580 	call	ad58 <__divdf3>
   118fc:	d8800a15 	stw	r2,40(sp)
   11900:	1825883a 	mov	r18,r3
   11904:	d8800817 	ldw	r2,32(sp)
   11908:	10000726 	beq	r2,zero,11928 <_dtoa_r+0x428>
   1190c:	dd000a17 	ldw	r20,40(sp)
   11910:	000d883a 	mov	r6,zero
   11914:	01cffc34 	movhi	r7,16368
   11918:	a009883a 	mov	r4,r20
   1191c:	900b883a 	mov	r5,r18
   11920:	000b7100 	call	b710 <__ledf2>
   11924:	10044516 	blt	r2,zero,12a3c <_dtoa_r+0x153c>
   11928:	8009883a 	mov	r4,r16
   1192c:	000c84c0 	call	c84c <__floatsidf>
   11930:	d9800a17 	ldw	r6,40(sp)
   11934:	900f883a 	mov	r7,r18
   11938:	1009883a 	mov	r4,r2
   1193c:	180b883a 	mov	r5,r3
   11940:	000b7f80 	call	b7f8 <__muldf3>
   11944:	000d883a 	mov	r6,zero
   11948:	01d00734 	movhi	r7,16412
   1194c:	1009883a 	mov	r4,r2
   11950:	180b883a 	mov	r5,r3
   11954:	000a4680 	call	a468 <__adddf3>
   11958:	1029883a 	mov	r20,r2
   1195c:	00bf3034 	movhi	r2,64704
   11960:	1885883a 	add	r2,r3,r2
   11964:	d8800c15 	stw	r2,48(sp)
   11968:	d8800317 	ldw	r2,12(sp)
   1196c:	10032d26 	beq	r2,zero,12624 <_dtoa_r+0x1124>
   11970:	d8800617 	ldw	r2,24(sp)
   11974:	d8801015 	stw	r2,64(sp)
   11978:	d8800317 	ldw	r2,12(sp)
   1197c:	d8800d15 	stw	r2,52(sp)
   11980:	d8800d17 	ldw	r2,52(sp)
   11984:	dc000a17 	ldw	r16,40(sp)
   11988:	900b883a 	mov	r5,r18
   1198c:	10bfffc4 	addi	r2,r2,-1
   11990:	100690fa 	slli	r3,r2,3
   11994:	008000b4 	movhi	r2,2
   11998:	10867904 	addi	r2,r2,6628
   1199c:	10c5883a 	add	r2,r2,r3
   119a0:	12c00017 	ldw	r11,0(r2)
   119a4:	13000117 	ldw	r12,4(r2)
   119a8:	8009883a 	mov	r4,r16
   119ac:	dac00e15 	stw	r11,56(sp)
   119b0:	db000a15 	stw	r12,40(sp)
   119b4:	000c7cc0 	call	c7cc <__fixdfsi>
   119b8:	1009883a 	mov	r4,r2
   119bc:	10800c04 	addi	r2,r2,48
   119c0:	d8800f15 	stw	r2,60(sp)
   119c4:	000c84c0 	call	c84c <__floatsidf>
   119c8:	8009883a 	mov	r4,r16
   119cc:	100d883a 	mov	r6,r2
   119d0:	180f883a 	mov	r7,r3
   119d4:	900b883a 	mov	r5,r18
   119d8:	000be6c0 	call	be6c <__subdf3>
   119dc:	d9000117 	ldw	r4,4(sp)
   119e0:	dac00e17 	ldw	r11,56(sp)
   119e4:	db000a17 	ldw	r12,40(sp)
   119e8:	1825883a 	mov	r18,r3
   119ec:	d8c00517 	ldw	r3,20(sp)
   119f0:	22000044 	addi	r8,r4,1
   119f4:	da000e15 	stw	r8,56(sp)
   119f8:	1021883a 	mov	r16,r2
   119fc:	580d883a 	mov	r6,r11
   11a00:	600f883a 	mov	r7,r12
   11a04:	1803b226 	beq	r3,zero,128d0 <_dtoa_r+0x13d0>
   11a08:	0009883a 	mov	r4,zero
   11a0c:	014ff834 	movhi	r5,16352
   11a10:	000ad580 	call	ad58 <__divdf3>
   11a14:	d9c00c17 	ldw	r7,48(sp)
   11a18:	a00d883a 	mov	r6,r20
   11a1c:	1009883a 	mov	r4,r2
   11a20:	180b883a 	mov	r5,r3
   11a24:	000be6c0 	call	be6c <__subdf3>
   11a28:	d9000117 	ldw	r4,4(sp)
   11a2c:	1029883a 	mov	r20,r2
   11a30:	d8800f17 	ldw	r2,60(sp)
   11a34:	800d883a 	mov	r6,r16
   11a38:	900f883a 	mov	r7,r18
   11a3c:	20800005 	stb	r2,0(r4)
   11a40:	180b883a 	mov	r5,r3
   11a44:	a009883a 	mov	r4,r20
   11a48:	d8c00a15 	stw	r3,40(sp)
   11a4c:	000b6280 	call	b628 <__gedf2>
   11a50:	da000e17 	ldw	r8,56(sp)
   11a54:	0083e516 	blt	zero,r2,129ec <_dtoa_r+0x14ec>
   11a58:	0005883a 	mov	r2,zero
   11a5c:	dd400e15 	stw	r21,56(sp)
   11a60:	dd800f15 	stw	r22,60(sp)
   11a64:	ddc00c15 	stw	r23,48(sp)
   11a68:	dd800d17 	ldw	r22,52(sp)
   11a6c:	402b883a 	mov	r21,r8
   11a70:	dc400d15 	stw	r17,52(sp)
   11a74:	dc400a17 	ldw	r17,40(sp)
   11a78:	dcc00a15 	stw	r19,40(sp)
   11a7c:	1027883a 	mov	r19,r2
   11a80:	00002606 	br	11b1c <_dtoa_r+0x61c>
   11a84:	9cc00044 	addi	r19,r19,1
   11a88:	9d806d0e 	bge	r19,r22,11c40 <_dtoa_r+0x740>
   11a8c:	a009883a 	mov	r4,r20
   11a90:	880b883a 	mov	r5,r17
   11a94:	000d883a 	mov	r6,zero
   11a98:	01d00934 	movhi	r7,16420
   11a9c:	000b7f80 	call	b7f8 <__muldf3>
   11aa0:	000d883a 	mov	r6,zero
   11aa4:	01d00934 	movhi	r7,16420
   11aa8:	8009883a 	mov	r4,r16
   11aac:	900b883a 	mov	r5,r18
   11ab0:	1029883a 	mov	r20,r2
   11ab4:	1823883a 	mov	r17,r3
   11ab8:	000b7f80 	call	b7f8 <__muldf3>
   11abc:	180b883a 	mov	r5,r3
   11ac0:	1009883a 	mov	r4,r2
   11ac4:	1821883a 	mov	r16,r3
   11ac8:	1025883a 	mov	r18,r2
   11acc:	000c7cc0 	call	c7cc <__fixdfsi>
   11ad0:	1009883a 	mov	r4,r2
   11ad4:	102f883a 	mov	r23,r2
   11ad8:	000c84c0 	call	c84c <__floatsidf>
   11adc:	9009883a 	mov	r4,r18
   11ae0:	800b883a 	mov	r5,r16
   11ae4:	100d883a 	mov	r6,r2
   11ae8:	180f883a 	mov	r7,r3
   11aec:	000be6c0 	call	be6c <__subdf3>
   11af0:	ad400044 	addi	r21,r21,1
   11af4:	ba000c04 	addi	r8,r23,48
   11af8:	aa3fffc5 	stb	r8,-1(r21)
   11afc:	a00d883a 	mov	r6,r20
   11b00:	880f883a 	mov	r7,r17
   11b04:	1009883a 	mov	r4,r2
   11b08:	180b883a 	mov	r5,r3
   11b0c:	1021883a 	mov	r16,r2
   11b10:	1825883a 	mov	r18,r3
   11b14:	000b7100 	call	b710 <__ledf2>
   11b18:	10040516 	blt	r2,zero,12b30 <_dtoa_r+0x1630>
   11b1c:	800d883a 	mov	r6,r16
   11b20:	900f883a 	mov	r7,r18
   11b24:	0009883a 	mov	r4,zero
   11b28:	014ffc34 	movhi	r5,16368
   11b2c:	000be6c0 	call	be6c <__subdf3>
   11b30:	a00d883a 	mov	r6,r20
   11b34:	880f883a 	mov	r7,r17
   11b38:	1009883a 	mov	r4,r2
   11b3c:	180b883a 	mov	r5,r3
   11b40:	000b7100 	call	b710 <__ledf2>
   11b44:	103fcf0e 	bge	r2,zero,11a84 <_dtoa_r+0x584>
   11b48:	d8801017 	ldw	r2,64(sp)
   11b4c:	ddc00c17 	ldw	r23,48(sp)
   11b50:	d9000117 	ldw	r4,4(sp)
   11b54:	a829883a 	mov	r20,r21
   11b58:	14c00044 	addi	r19,r2,1
   11b5c:	00000106 	br	11b64 <_dtoa_r+0x664>
   11b60:	a103d826 	beq	r20,r4,12ac4 <_dtoa_r+0x15c4>
   11b64:	a0ffffc3 	ldbu	r3,-1(r20)
   11b68:	a011883a 	mov	r8,r20
   11b6c:	a53fffc4 	addi	r20,r20,-1
   11b70:	18803fcc 	andi	r2,r3,255
   11b74:	1080201c 	xori	r2,r2,128
   11b78:	10bfe004 	addi	r2,r2,-128
   11b7c:	10800e60 	cmpeqi	r2,r2,57
   11b80:	103ff71e 	bne	r2,zero,11b60 <_dtoa_r+0x660>
   11b84:	18c00044 	addi	r3,r3,1
   11b88:	a0c00005 	stb	r3,0(r20)
   11b8c:	dcc00215 	stw	r19,8(sp)
   11b90:	00014406 	br	120a4 <_dtoa_r+0xba4>
   11b94:	04600034 	movhi	r17,32768
   11b98:	8c7fffc4 	addi	r17,r17,-1
   11b9c:	9462703a 	and	r17,r18,r17
   11ba0:	00800044 	movi	r2,1
   11ba4:	8825883a 	mov	r18,r17
   11ba8:	80800015 	stw	r2,0(r16)
   11bac:	00dffc34 	movhi	r3,32752
   11bb0:	909ffc2c 	andhi	r2,r18,32752
   11bb4:	10fe721e 	bne	r2,r3,11580 <_dtoa_r+0x80>
   11bb8:	d9001e17 	ldw	r4,120(sp)
   11bbc:	00800434 	movhi	r2,16
   11bc0:	10bfffc4 	addi	r2,r2,-1
   11bc4:	9084703a 	and	r2,r18,r2
   11bc8:	00c9c3c4 	movi	r3,9999
   11bcc:	20c00015 	stw	r3,0(r4)
   11bd0:	14e6b03a 	or	r19,r2,r19
   11bd4:	9800141e 	bne	r19,zero,11c28 <_dtoa_r+0x728>
   11bd8:	d8802017 	ldw	r2,128(sp)
   11bdc:	10041126 	beq	r2,zero,12c24 <_dtoa_r+0x1724>
   11be0:	008000b4 	movhi	r2,2
   11be4:	1007883a 	mov	r3,r2
   11be8:	18c5e104 	addi	r3,r3,6020
   11bec:	008000b4 	movhi	r2,2
   11bf0:	d8c00115 	stw	r3,4(sp)
   11bf4:	1085e304 	addi	r2,r2,6028
   11bf8:	d8c02017 	ldw	r3,128(sp)
   11bfc:	18800015 	stw	r2,0(r3)
   11c00:	003e7106 	br	115c8 <_dtoa_r+0xc8>
   11c04:	01400434 	movhi	r5,16
   11c08:	297fffc4 	addi	r5,r5,-1
   11c0c:	894a703a 	and	r5,r17,r5
   11c10:	dd001117 	ldw	r20,68(sp)
   11c14:	9809883a 	mov	r4,r19
   11c18:	294ffc34 	orhi	r5,r5,16368
   11c1c:	843f0044 	addi	r16,r16,-1023
   11c20:	d8000915 	stw	zero,36(sp)
   11c24:	003e9206 	br	11670 <_dtoa_r+0x170>
   11c28:	d8802017 	ldw	r2,128(sp)
   11c2c:	1002061e 	bne	r2,zero,12448 <_dtoa_r+0xf48>
   11c30:	008000b4 	movhi	r2,2
   11c34:	1085e004 	addi	r2,r2,6016
   11c38:	d8800115 	stw	r2,4(sp)
   11c3c:	003e6206 	br	115c8 <_dtoa_r+0xc8>
   11c40:	dd400e17 	ldw	r21,56(sp)
   11c44:	dd800f17 	ldw	r22,60(sp)
   11c48:	ddc00c17 	ldw	r23,48(sp)
   11c4c:	dc400d17 	ldw	r17,52(sp)
   11c50:	dcc00a17 	ldw	r19,40(sp)
   11c54:	d8801217 	ldw	r2,72(sp)
   11c58:	10006e16 	blt	r2,zero,11e14 <_dtoa_r+0x914>
   11c5c:	d9000617 	ldw	r4,24(sp)
   11c60:	20c003c8 	cmpgei	r3,r4,15
   11c64:	18006b1e 	bne	r3,zero,11e14 <_dtoa_r+0x914>
   11c68:	200690fa 	slli	r3,r4,3
   11c6c:	008000b4 	movhi	r2,2
   11c70:	10867904 	addi	r2,r2,6628
   11c74:	10c5883a 	add	r2,r2,r3
   11c78:	14000017 	ldw	r16,0(r2)
   11c7c:	14800117 	ldw	r18,4(r2)
   11c80:	d8801d17 	ldw	r2,116(sp)
   11c84:	1000150e 	bge	r2,zero,11cdc <_dtoa_r+0x7dc>
   11c88:	d8800317 	ldw	r2,12(sp)
   11c8c:	00801316 	blt	zero,r2,11cdc <_dtoa_r+0x7dc>
   11c90:	d8800317 	ldw	r2,12(sp)
   11c94:	1002771e 	bne	r2,zero,12674 <_dtoa_r+0x1174>
   11c98:	8009883a 	mov	r4,r16
   11c9c:	000d883a 	mov	r6,zero
   11ca0:	01d00534 	movhi	r7,16404
   11ca4:	900b883a 	mov	r5,r18
   11ca8:	000b7f80 	call	b7f8 <__muldf3>
   11cac:	100d883a 	mov	r6,r2
   11cb0:	180f883a 	mov	r7,r3
   11cb4:	9809883a 	mov	r4,r19
   11cb8:	880b883a 	mov	r5,r17
   11cbc:	000b7100 	call	b710 <__ledf2>
   11cc0:	0029883a 	mov	r20,zero
   11cc4:	0021883a 	mov	r16,zero
   11cc8:	00820916 	blt	zero,r2,124f0 <_dtoa_r+0xff0>
   11ccc:	d8801d17 	ldw	r2,116(sp)
   11cd0:	da000117 	ldw	r8,4(sp)
   11cd4:	00a6303a 	nor	r19,zero,r2
   11cd8:	00020b06 	br	12508 <_dtoa_r+0x1008>
   11cdc:	800d883a 	mov	r6,r16
   11ce0:	900f883a 	mov	r7,r18
   11ce4:	9809883a 	mov	r4,r19
   11ce8:	880b883a 	mov	r5,r17
   11cec:	000ad580 	call	ad58 <__divdf3>
   11cf0:	180b883a 	mov	r5,r3
   11cf4:	1009883a 	mov	r4,r2
   11cf8:	000c7cc0 	call	c7cc <__fixdfsi>
   11cfc:	1009883a 	mov	r4,r2
   11d00:	102b883a 	mov	r21,r2
   11d04:	000c84c0 	call	c84c <__floatsidf>
   11d08:	800d883a 	mov	r6,r16
   11d0c:	900f883a 	mov	r7,r18
   11d10:	1009883a 	mov	r4,r2
   11d14:	180b883a 	mov	r5,r3
   11d18:	000b7f80 	call	b7f8 <__muldf3>
   11d1c:	100d883a 	mov	r6,r2
   11d20:	9809883a 	mov	r4,r19
   11d24:	880b883a 	mov	r5,r17
   11d28:	180f883a 	mov	r7,r3
   11d2c:	000be6c0 	call	be6c <__subdf3>
   11d30:	d9800117 	ldw	r6,4(sp)
   11d34:	dd800317 	ldw	r22,12(sp)
   11d38:	1009883a 	mov	r4,r2
   11d3c:	a8800c04 	addi	r2,r21,48
   11d40:	30800005 	stb	r2,0(r6)
   11d44:	b0800060 	cmpeqi	r2,r22,1
   11d48:	180b883a 	mov	r5,r3
   11d4c:	35000044 	addi	r20,r6,1
   11d50:	10029c1e 	bne	r2,zero,127c4 <_dtoa_r+0x12c4>
   11d54:	04400044 	movi	r17,1
   11d58:	ddc00215 	stw	r23,8(sp)
   11d5c:	00001c06 	br	11dd0 <_dtoa_r+0x8d0>
   11d60:	800d883a 	mov	r6,r16
   11d64:	900f883a 	mov	r7,r18
   11d68:	a809883a 	mov	r4,r21
   11d6c:	980b883a 	mov	r5,r19
   11d70:	000ad580 	call	ad58 <__divdf3>
   11d74:	180b883a 	mov	r5,r3
   11d78:	1009883a 	mov	r4,r2
   11d7c:	000c7cc0 	call	c7cc <__fixdfsi>
   11d80:	1009883a 	mov	r4,r2
   11d84:	102f883a 	mov	r23,r2
   11d88:	000c84c0 	call	c84c <__floatsidf>
   11d8c:	800d883a 	mov	r6,r16
   11d90:	900f883a 	mov	r7,r18
   11d94:	1009883a 	mov	r4,r2
   11d98:	180b883a 	mov	r5,r3
   11d9c:	000b7f80 	call	b7f8 <__muldf3>
   11da0:	a809883a 	mov	r4,r21
   11da4:	980b883a 	mov	r5,r19
   11da8:	100d883a 	mov	r6,r2
   11dac:	180f883a 	mov	r7,r3
   11db0:	000be6c0 	call	be6c <__subdf3>
   11db4:	b9000c04 	addi	r4,r23,48
   11db8:	a1000005 	stb	r4,0(r20)
   11dbc:	8c400044 	addi	r17,r17,1
   11dc0:	a5000044 	addi	r20,r20,1
   11dc4:	1009883a 	mov	r4,r2
   11dc8:	180b883a 	mov	r5,r3
   11dcc:	b4427b26 	beq	r22,r17,127bc <_dtoa_r+0x12bc>
   11dd0:	000d883a 	mov	r6,zero
   11dd4:	01d00934 	movhi	r7,16420
   11dd8:	000b7f80 	call	b7f8 <__muldf3>
   11ddc:	000d883a 	mov	r6,zero
   11de0:	000f883a 	mov	r7,zero
   11de4:	1009883a 	mov	r4,r2
   11de8:	180b883a 	mov	r5,r3
   11dec:	102b883a 	mov	r21,r2
   11df0:	1827883a 	mov	r19,r3
   11df4:	000b5a80 	call	b5a8 <__eqdf2>
   11df8:	103fd91e 	bne	r2,zero,11d60 <_dtoa_r+0x860>
   11dfc:	d8800617 	ldw	r2,24(sp)
   11e00:	ddc00217 	ldw	r23,8(sp)
   11e04:	a011883a 	mov	r8,r20
   11e08:	10800044 	addi	r2,r2,1
   11e0c:	d8800215 	stw	r2,8(sp)
   11e10:	0000a406 	br	120a4 <_dtoa_r+0xba4>
   11e14:	d8c00517 	ldw	r3,20(sp)
   11e18:	1800e726 	beq	r3,zero,121b8 <_dtoa_r+0xcb8>
   11e1c:	d8c00217 	ldw	r3,8(sp)
   11e20:	18c00088 	cmpgei	r3,r3,2
   11e24:	1801e526 	beq	r3,zero,125bc <_dtoa_r+0x10bc>
   11e28:	d8800317 	ldw	r2,12(sp)
   11e2c:	153fffc4 	addi	r20,r2,-1
   11e30:	d8800717 	ldw	r2,28(sp)
   11e34:	1501c50e 	bge	r2,r20,1254c <_dtoa_r+0x104c>
   11e38:	d8800717 	ldw	r2,28(sp)
   11e3c:	dd000715 	stw	r20,28(sp)
   11e40:	a085c83a 	sub	r2,r20,r2
   11e44:	a8ab883a 	add	r21,r21,r2
   11e48:	0029883a 	mov	r20,zero
   11e4c:	d8800317 	ldw	r2,12(sp)
   11e50:	10028b16 	blt	r2,zero,12880 <_dtoa_r+0x1380>
   11e54:	d8c00417 	ldw	r3,16(sp)
   11e58:	b0ad883a 	add	r22,r22,r2
   11e5c:	1885883a 	add	r2,r3,r2
   11e60:	1825883a 	mov	r18,r3
   11e64:	d8800415 	stw	r2,16(sp)
   11e68:	01400044 	movi	r5,1
   11e6c:	e009883a 	mov	r4,fp
   11e70:	00154380 	call	15438 <__i2b>
   11e74:	1021883a 	mov	r16,r2
   11e78:	0480080e 	bge	zero,r18,11e9c <_dtoa_r+0x99c>
   11e7c:	0580070e 	bge	zero,r22,11e9c <_dtoa_r+0x99c>
   11e80:	9005883a 	mov	r2,r18
   11e84:	b481a916 	blt	r22,r18,1252c <_dtoa_r+0x102c>
   11e88:	d8c00417 	ldw	r3,16(sp)
   11e8c:	90a5c83a 	sub	r18,r18,r2
   11e90:	b0adc83a 	sub	r22,r22,r2
   11e94:	1887c83a 	sub	r3,r3,r2
   11e98:	d8c00415 	stw	r3,16(sp)
   11e9c:	d8800717 	ldw	r2,28(sp)
   11ea0:	10001526 	beq	r2,zero,11ef8 <_dtoa_r+0x9f8>
   11ea4:	d8800517 	ldw	r2,20(sp)
   11ea8:	1001f526 	beq	r2,zero,12680 <_dtoa_r+0x1180>
   11eac:	05000f0e 	bge	zero,r20,11eec <_dtoa_r+0x9ec>
   11eb0:	800b883a 	mov	r5,r16
   11eb4:	a00d883a 	mov	r6,r20
   11eb8:	e009883a 	mov	r4,fp
   11ebc:	001573c0 	call	1573c <__pow5mult>
   11ec0:	b80d883a 	mov	r6,r23
   11ec4:	100b883a 	mov	r5,r2
   11ec8:	e009883a 	mov	r4,fp
   11ecc:	1021883a 	mov	r16,r2
   11ed0:	00154e80 	call	154e8 <__multiply>
   11ed4:	b80b883a 	mov	r5,r23
   11ed8:	e009883a 	mov	r4,fp
   11edc:	d8800915 	stw	r2,36(sp)
   11ee0:	00150900 	call	15090 <_Bfree>
   11ee4:	d8800917 	ldw	r2,36(sp)
   11ee8:	102f883a 	mov	r23,r2
   11eec:	d8800717 	ldw	r2,28(sp)
   11ef0:	150dc83a 	sub	r6,r2,r20
   11ef4:	15025d1e 	bne	r2,r20,1286c <_dtoa_r+0x136c>
   11ef8:	01400044 	movi	r5,1
   11efc:	e009883a 	mov	r4,fp
   11f00:	00154380 	call	15438 <__i2b>
   11f04:	1029883a 	mov	r20,r2
   11f08:	0540bd16 	blt	zero,r21,12200 <_dtoa_r+0xd00>
   11f0c:	d8800217 	ldw	r2,8(sp)
   11f10:	10800088 	cmpgei	r2,r2,2
   11f14:	10015626 	beq	r2,zero,12470 <_dtoa_r+0xf70>
   11f18:	0023883a 	mov	r17,zero
   11f1c:	00800044 	movi	r2,1
   11f20:	a800c01e 	bne	r21,zero,12224 <_dtoa_r+0xd24>
   11f24:	1585883a 	add	r2,r2,r22
   11f28:	108007cc 	andi	r2,r2,31
   11f2c:	1000ac26 	beq	r2,zero,121e0 <_dtoa_r+0xce0>
   11f30:	00c00804 	movi	r3,32
   11f34:	1887c83a 	sub	r3,r3,r2
   11f38:	19000150 	cmplti	r4,r3,5
   11f3c:	20033d1e 	bne	r4,zero,12c34 <_dtoa_r+0x1734>
   11f40:	00c00704 	movi	r3,28
   11f44:	1885c83a 	sub	r2,r3,r2
   11f48:	d8c00417 	ldw	r3,16(sp)
   11f4c:	90a5883a 	add	r18,r18,r2
   11f50:	b0ad883a 	add	r22,r22,r2
   11f54:	1887883a 	add	r3,r3,r2
   11f58:	d8c00415 	stw	r3,16(sp)
   11f5c:	d8800417 	ldw	r2,16(sp)
   11f60:	00809916 	blt	zero,r2,121c8 <_dtoa_r+0xcc8>
   11f64:	0580050e 	bge	zero,r22,11f7c <_dtoa_r+0xa7c>
   11f68:	a00b883a 	mov	r5,r20
   11f6c:	b00d883a 	mov	r6,r22
   11f70:	e009883a 	mov	r4,fp
   11f74:	00158840 	call	15884 <__lshift>
   11f78:	1029883a 	mov	r20,r2
   11f7c:	d8800817 	ldw	r2,32(sp)
   11f80:	10011d1e 	bne	r2,zero,123f8 <_dtoa_r+0xef8>
   11f84:	d8800317 	ldw	r2,12(sp)
   11f88:	00810a0e 	bge	zero,r2,123b4 <_dtoa_r+0xeb4>
   11f8c:	d8800517 	ldw	r2,20(sp)
   11f90:	1000b71e 	bne	r2,zero,12270 <_dtoa_r+0xd70>
   11f94:	d8800617 	ldw	r2,24(sp)
   11f98:	10800044 	addi	r2,r2,1
   11f9c:	d8800215 	stw	r2,8(sp)
   11fa0:	dc800317 	ldw	r18,12(sp)
   11fa4:	dd400117 	ldw	r21,4(sp)
   11fa8:	04400044 	movi	r17,1
   11fac:	00000706 	br	11fcc <_dtoa_r+0xacc>
   11fb0:	b80b883a 	mov	r5,r23
   11fb4:	000f883a 	mov	r7,zero
   11fb8:	01800284 	movi	r6,10
   11fbc:	e009883a 	mov	r4,fp
   11fc0:	00150b40 	call	150b4 <__multadd>
   11fc4:	102f883a 	mov	r23,r2
   11fc8:	8c400044 	addi	r17,r17,1
   11fcc:	a00b883a 	mov	r5,r20
   11fd0:	b809883a 	mov	r4,r23
   11fd4:	00113040 	call	11304 <quorem>
   11fd8:	14c00c04 	addi	r19,r2,48
   11fdc:	ac45883a 	add	r2,r21,r17
   11fe0:	14ffffc5 	stb	r19,-1(r2)
   11fe4:	8cbff216 	blt	r17,r18,11fb0 <_dtoa_r+0xab0>
   11fe8:	d8800317 	ldw	r2,12(sp)
   11fec:	00815d0e 	bge	zero,r2,12564 <_dtoa_r+0x1064>
   11ff0:	d8c00117 	ldw	r3,4(sp)
   11ff4:	0023883a 	mov	r17,zero
   11ff8:	1891883a 	add	r8,r3,r2
   11ffc:	b80b883a 	mov	r5,r23
   12000:	01800044 	movi	r6,1
   12004:	e009883a 	mov	r4,fp
   12008:	da000315 	stw	r8,12(sp)
   1200c:	00158840 	call	15884 <__lshift>
   12010:	a00b883a 	mov	r5,r20
   12014:	1009883a 	mov	r4,r2
   12018:	102f883a 	mov	r23,r2
   1201c:	0015a0c0 	call	15a0c <__mcmp>
   12020:	da000317 	ldw	r8,12(sp)
   12024:	0081540e 	bge	zero,r2,12578 <_dtoa_r+0x1078>
   12028:	413fffc3 	ldbu	r4,-1(r8)
   1202c:	d9400117 	ldw	r5,4(sp)
   12030:	00000306 	br	12040 <_dtoa_r+0xb40>
   12034:	28c15a26 	beq	r5,r3,125a0 <_dtoa_r+0x10a0>
   12038:	193fffc3 	ldbu	r4,-1(r3)
   1203c:	1811883a 	mov	r8,r3
   12040:	20803fcc 	andi	r2,r4,255
   12044:	1080201c 	xori	r2,r2,128
   12048:	10bfe004 	addi	r2,r2,-128
   1204c:	10800e60 	cmpeqi	r2,r2,57
   12050:	40ffffc4 	addi	r3,r8,-1
   12054:	103ff71e 	bne	r2,zero,12034 <_dtoa_r+0xb34>
   12058:	21000044 	addi	r4,r4,1
   1205c:	19000005 	stb	r4,0(r3)
   12060:	a00b883a 	mov	r5,r20
   12064:	e009883a 	mov	r4,fp
   12068:	da000315 	stw	r8,12(sp)
   1206c:	00150900 	call	15090 <_Bfree>
   12070:	da000317 	ldw	r8,12(sp)
   12074:	80000b26 	beq	r16,zero,120a4 <_dtoa_r+0xba4>
   12078:	88000526 	beq	r17,zero,12090 <_dtoa_r+0xb90>
   1207c:	8c000426 	beq	r17,r16,12090 <_dtoa_r+0xb90>
   12080:	880b883a 	mov	r5,r17
   12084:	e009883a 	mov	r4,fp
   12088:	00150900 	call	15090 <_Bfree>
   1208c:	da000317 	ldw	r8,12(sp)
   12090:	800b883a 	mov	r5,r16
   12094:	e009883a 	mov	r4,fp
   12098:	da000315 	stw	r8,12(sp)
   1209c:	00150900 	call	15090 <_Bfree>
   120a0:	da000317 	ldw	r8,12(sp)
   120a4:	b80b883a 	mov	r5,r23
   120a8:	e009883a 	mov	r4,fp
   120ac:	da000315 	stw	r8,12(sp)
   120b0:	00150900 	call	15090 <_Bfree>
   120b4:	da000317 	ldw	r8,12(sp)
   120b8:	d8801e17 	ldw	r2,120(sp)
   120bc:	d8c00217 	ldw	r3,8(sp)
   120c0:	40000005 	stb	zero,0(r8)
   120c4:	10c00015 	stw	r3,0(r2)
   120c8:	d8802017 	ldw	r2,128(sp)
   120cc:	103d3e26 	beq	r2,zero,115c8 <_dtoa_r+0xc8>
   120d0:	12000015 	stw	r8,0(r2)
   120d4:	003d3c06 	br	115c8 <_dtoa_r+0xc8>
   120d8:	d8000815 	stw	zero,32(sp)
   120dc:	b0002316 	blt	r22,zero,1216c <_dtoa_r+0xc6c>
   120e0:	d8000415 	stw	zero,16(sp)
   120e4:	d8c00217 	ldw	r3,8(sp)
   120e8:	dd400615 	stw	r21,24(sp)
   120ec:	d8000715 	stw	zero,28(sp)
   120f0:	188002a8 	cmpgeui	r2,r3,10
   120f4:	b56d883a 	add	r22,r22,r21
   120f8:	103da726 	beq	r2,zero,11798 <_dtoa_r+0x298>
   120fc:	00800044 	movi	r2,1
   12100:	d8800515 	stw	r2,20(sp)
   12104:	00bfffc4 	movi	r2,-1
   12108:	04000044 	movi	r16,1
   1210c:	d8000215 	stw	zero,8(sp)
   12110:	d8800315 	stw	r2,12(sp)
   12114:	d8001d15 	stw	zero,116(sp)
   12118:	d8800317 	ldw	r2,12(sp)
   1211c:	e0001115 	stw	zero,68(fp)
   12120:	000b883a 	mov	r5,zero
   12124:	d8800b15 	stw	r2,44(sp)
   12128:	003db806 	br	1180c <_dtoa_r+0x30c>
   1212c:	188000e0 	cmpeqi	r2,r3,3
   12130:	d8000515 	stw	zero,20(sp)
   12134:	1002a526 	beq	r2,zero,12bcc <_dtoa_r+0x16cc>
   12138:	d8801d17 	ldw	r2,116(sp)
   1213c:	d8c00617 	ldw	r3,24(sp)
   12140:	10c5883a 	add	r2,r2,r3
   12144:	d8800b15 	stw	r2,44(sp)
   12148:	10800044 	addi	r2,r2,1
   1214c:	d8800315 	stw	r2,12(sp)
   12150:	100d883a 	mov	r6,r2
   12154:	00bda216 	blt	zero,r2,117e0 <_dtoa_r+0x2e0>
   12158:	01800044 	movi	r6,1
   1215c:	003da006 	br	117e0 <_dtoa_r+0x2e0>
   12160:	00800044 	movi	r2,1
   12164:	d8800815 	stw	r2,32(sp)
   12168:	b03d7f0e 	bge	r22,zero,11768 <_dtoa_r+0x268>
   1216c:	00800044 	movi	r2,1
   12170:	1405c83a 	sub	r2,r2,r16
   12174:	d8800415 	stw	r2,16(sp)
   12178:	002d883a 	mov	r22,zero
   1217c:	003d7b06 	br	1176c <_dtoa_r+0x26c>
   12180:	a809883a 	mov	r4,r21
   12184:	000c84c0 	call	c84c <__floatsidf>
   12188:	900d883a 	mov	r6,r18
   1218c:	b00f883a 	mov	r7,r22
   12190:	1009883a 	mov	r4,r2
   12194:	180b883a 	mov	r5,r3
   12198:	000b5a80 	call	b5a8 <__eqdf2>
   1219c:	103d6126 	beq	r2,zero,11724 <_dtoa_r+0x224>
   121a0:	ad7fffc4 	addi	r21,r21,-1
   121a4:	003d5f06 	br	11724 <_dtoa_r+0x224>
   121a8:	008000b4 	movhi	r2,2
   121ac:	1085d704 	addi	r2,r2,5980
   121b0:	d8800115 	stw	r2,4(sp)
   121b4:	003d0406 	br	115c8 <_dtoa_r+0xc8>
   121b8:	dd000717 	ldw	r20,28(sp)
   121bc:	dc800417 	ldw	r18,16(sp)
   121c0:	0021883a 	mov	r16,zero
   121c4:	003f2c06 	br	11e78 <_dtoa_r+0x978>
   121c8:	b80b883a 	mov	r5,r23
   121cc:	100d883a 	mov	r6,r2
   121d0:	e009883a 	mov	r4,fp
   121d4:	00158840 	call	15884 <__lshift>
   121d8:	102f883a 	mov	r23,r2
   121dc:	003f6106 	br	11f64 <_dtoa_r+0xa64>
   121e0:	00800704 	movi	r2,28
   121e4:	003f5806 	br	11f48 <_dtoa_r+0xa48>
   121e8:	01000804 	movi	r4,32
   121ec:	2089c83a 	sub	r4,r4,r2
   121f0:	9908983a 	sll	r4,r19,r4
   121f4:	003d1706 	br	11654 <_dtoa_r+0x154>
   121f8:	04000044 	movi	r16,1
   121fc:	003d6b06 	br	117ac <_dtoa_r+0x2ac>
   12200:	100b883a 	mov	r5,r2
   12204:	a80d883a 	mov	r6,r21
   12208:	e009883a 	mov	r4,fp
   1220c:	001573c0 	call	1573c <__pow5mult>
   12210:	d8c00217 	ldw	r3,8(sp)
   12214:	1029883a 	mov	r20,r2
   12218:	18c00090 	cmplti	r3,r3,2
   1221c:	18014b1e 	bne	r3,zero,1274c <_dtoa_r+0x124c>
   12220:	0023883a 	mov	r17,zero
   12224:	a0800417 	ldw	r2,16(r20)
   12228:	10800104 	addi	r2,r2,4
   1222c:	100490ba 	slli	r2,r2,2
   12230:	a085883a 	add	r2,r20,r2
   12234:	11000017 	ldw	r4,0(r2)
   12238:	00153240 	call	15324 <__hi0bits>
   1223c:	00c00804 	movi	r3,32
   12240:	1885c83a 	sub	r2,r3,r2
   12244:	003f3706 	br	11f24 <_dtoa_r+0xa24>
   12248:	800b883a 	mov	r5,r16
   1224c:	000f883a 	mov	r7,zero
   12250:	01800284 	movi	r6,10
   12254:	e009883a 	mov	r4,fp
   12258:	00150b40 	call	150b4 <__multadd>
   1225c:	1021883a 	mov	r16,r2
   12260:	d8800b17 	ldw	r2,44(sp)
   12264:	0082460e 	bge	zero,r2,12b80 <_dtoa_r+0x1680>
   12268:	dd400615 	stw	r21,24(sp)
   1226c:	d8800315 	stw	r2,12(sp)
   12270:	0480b016 	blt	zero,r18,12534 <_dtoa_r+0x1034>
   12274:	88016c1e 	bne	r17,zero,12828 <_dtoa_r+0x1328>
   12278:	8025883a 	mov	r18,r16
   1227c:	dd800117 	ldw	r22,4(sp)
   12280:	d9000317 	ldw	r4,12(sp)
   12284:	98c0004c 	andi	r3,r19,1
   12288:	b0bfffc4 	addi	r2,r22,-1
   1228c:	1105883a 	add	r2,r2,r4
   12290:	d8800515 	stw	r2,20(sp)
   12294:	d8800217 	ldw	r2,8(sp)
   12298:	d8c00815 	stw	r3,32(sp)
   1229c:	1884b03a 	or	r2,r3,r2
   122a0:	d8800715 	stw	r2,28(sp)
   122a4:	00002b06 	br	12354 <_dtoa_r+0xe54>
   122a8:	b809883a 	mov	r4,r23
   122ac:	d9400415 	stw	r5,16(sp)
   122b0:	0015a0c0 	call	15a0c <__mcmp>
   122b4:	d9400417 	ldw	r5,16(sp)
   122b8:	e009883a 	mov	r4,fp
   122bc:	d8800315 	stw	r2,12(sp)
   122c0:	00150900 	call	15090 <_Bfree>
   122c4:	d8800317 	ldw	r2,12(sp)
   122c8:	1000021e 	bne	r2,zero,122d4 <_dtoa_r+0xdd4>
   122cc:	d8c00717 	ldw	r3,28(sp)
   122d0:	18021d26 	beq	r3,zero,12b48 <_dtoa_r+0x1648>
   122d4:	b2000044 	addi	r8,r22,1
   122d8:	da000315 	stw	r8,12(sp)
   122dc:	88012116 	blt	r17,zero,12764 <_dtoa_r+0x1264>
   122e0:	d8c00217 	ldw	r3,8(sp)
   122e4:	88e2b03a 	or	r17,r17,r3
   122e8:	d8c00817 	ldw	r3,32(sp)
   122ec:	1c62b03a 	or	r17,r3,r17
   122f0:	88011c26 	beq	r17,zero,12764 <_dtoa_r+0x1264>
   122f4:	00816616 	blt	zero,r2,12890 <_dtoa_r+0x1390>
   122f8:	d8800517 	ldw	r2,20(sp)
   122fc:	b4c00005 	stb	r19,0(r22)
   12300:	15816d26 	beq	r2,r22,128b8 <_dtoa_r+0x13b8>
   12304:	b80b883a 	mov	r5,r23
   12308:	000f883a 	mov	r7,zero
   1230c:	01800284 	movi	r6,10
   12310:	e009883a 	mov	r4,fp
   12314:	00150b40 	call	150b4 <__multadd>
   12318:	102f883a 	mov	r23,r2
   1231c:	800b883a 	mov	r5,r16
   12320:	000f883a 	mov	r7,zero
   12324:	01800284 	movi	r6,10
   12328:	e009883a 	mov	r4,fp
   1232c:	84801d26 	beq	r16,r18,123a4 <_dtoa_r+0xea4>
   12330:	00150b40 	call	150b4 <__multadd>
   12334:	900b883a 	mov	r5,r18
   12338:	000f883a 	mov	r7,zero
   1233c:	01800284 	movi	r6,10
   12340:	e009883a 	mov	r4,fp
   12344:	1021883a 	mov	r16,r2
   12348:	00150b40 	call	150b4 <__multadd>
   1234c:	1025883a 	mov	r18,r2
   12350:	dd800317 	ldw	r22,12(sp)
   12354:	a00b883a 	mov	r5,r20
   12358:	b809883a 	mov	r4,r23
   1235c:	00113040 	call	11304 <quorem>
   12360:	800b883a 	mov	r5,r16
   12364:	b809883a 	mov	r4,r23
   12368:	102b883a 	mov	r21,r2
   1236c:	0015a0c0 	call	15a0c <__mcmp>
   12370:	a00b883a 	mov	r5,r20
   12374:	900d883a 	mov	r6,r18
   12378:	e009883a 	mov	r4,fp
   1237c:	1023883a 	mov	r17,r2
   12380:	0015a640 	call	15a64 <__mdiff>
   12384:	100b883a 	mov	r5,r2
   12388:	10800317 	ldw	r2,12(r2)
   1238c:	acc00c04 	addi	r19,r21,48
   12390:	103fc526 	beq	r2,zero,122a8 <_dtoa_r+0xda8>
   12394:	e009883a 	mov	r4,fp
   12398:	00150900 	call	15090 <_Bfree>
   1239c:	00800044 	movi	r2,1
   123a0:	003fcc06 	br	122d4 <_dtoa_r+0xdd4>
   123a4:	00150b40 	call	150b4 <__multadd>
   123a8:	1021883a 	mov	r16,r2
   123ac:	1025883a 	mov	r18,r2
   123b0:	003fe706 	br	12350 <_dtoa_r+0xe50>
   123b4:	d8800217 	ldw	r2,8(sp)
   123b8:	108000d0 	cmplti	r2,r2,3
   123bc:	10004026 	beq	r2,zero,124c0 <_dtoa_r+0xfc0>
   123c0:	d8800517 	ldw	r2,20(sp)
   123c4:	103faa1e 	bne	r2,zero,12270 <_dtoa_r+0xd70>
   123c8:	a00b883a 	mov	r5,r20
   123cc:	b809883a 	mov	r4,r23
   123d0:	00113040 	call	11304 <quorem>
   123d4:	14c00c04 	addi	r19,r2,48
   123d8:	d8800117 	ldw	r2,4(sp)
   123dc:	0023883a 	mov	r17,zero
   123e0:	12000044 	addi	r8,r2,1
   123e4:	14c00005 	stb	r19,0(r2)
   123e8:	d8800617 	ldw	r2,24(sp)
   123ec:	10800044 	addi	r2,r2,1
   123f0:	d8800215 	stw	r2,8(sp)
   123f4:	003f0106 	br	11ffc <_dtoa_r+0xafc>
   123f8:	a00b883a 	mov	r5,r20
   123fc:	b809883a 	mov	r4,r23
   12400:	0015a0c0 	call	15a0c <__mcmp>
   12404:	103edf0e 	bge	r2,zero,11f84 <_dtoa_r+0xa84>
   12408:	b80b883a 	mov	r5,r23
   1240c:	000f883a 	mov	r7,zero
   12410:	01800284 	movi	r6,10
   12414:	e009883a 	mov	r4,fp
   12418:	00150b40 	call	150b4 <__multadd>
   1241c:	d8c00617 	ldw	r3,24(sp)
   12420:	102f883a 	mov	r23,r2
   12424:	d8800517 	ldw	r2,20(sp)
   12428:	1d7fffc4 	addi	r21,r3,-1
   1242c:	103f861e 	bne	r2,zero,12248 <_dtoa_r+0xd48>
   12430:	d8800b17 	ldw	r2,44(sp)
   12434:	0081cb0e 	bge	zero,r2,12b64 <_dtoa_r+0x1664>
   12438:	d8c00617 	ldw	r3,24(sp)
   1243c:	d8800315 	stw	r2,12(sp)
   12440:	d8c00215 	stw	r3,8(sp)
   12444:	003ed606 	br	11fa0 <_dtoa_r+0xaa0>
   12448:	008000b4 	movhi	r2,2
   1244c:	1007883a 	mov	r3,r2
   12450:	18c5e004 	addi	r3,r3,6016
   12454:	008000b4 	movhi	r2,2
   12458:	d8c00115 	stw	r3,4(sp)
   1245c:	1085e0c4 	addi	r2,r2,6019
   12460:	003de506 	br	11bf8 <_dtoa_r+0x6f8>
   12464:	00800044 	movi	r2,1
   12468:	d8800515 	stw	r2,20(sp)
   1246c:	003f3206 	br	12138 <_dtoa_r+0xc38>
   12470:	983ea91e 	bne	r19,zero,11f18 <_dtoa_r+0xa18>
   12474:	00800434 	movhi	r2,16
   12478:	10bfffc4 	addi	r2,r2,-1
   1247c:	8884703a 	and	r2,r17,r2
   12480:	103ea51e 	bne	r2,zero,11f18 <_dtoa_r+0xa18>
   12484:	8c5ffc2c 	andhi	r17,r17,32752
   12488:	883ea326 	beq	r17,zero,11f18 <_dtoa_r+0xa18>
   1248c:	d8800417 	ldw	r2,16(sp)
   12490:	b5800044 	addi	r22,r22,1
   12494:	04400044 	movi	r17,1
   12498:	10800044 	addi	r2,r2,1
   1249c:	d8800415 	stw	r2,16(sp)
   124a0:	003e9e06 	br	11f1c <_dtoa_r+0xa1c>
   124a4:	00800044 	movi	r2,1
   124a8:	d8800315 	stw	r2,12(sp)
   124ac:	d8801d15 	stw	r2,116(sp)
   124b0:	003f1906 	br	12118 <_dtoa_r+0xc18>
   124b4:	d8800b17 	ldw	r2,44(sp)
   124b8:	dd400615 	stw	r21,24(sp)
   124bc:	d8800315 	stw	r2,12(sp)
   124c0:	d8800317 	ldw	r2,12(sp)
   124c4:	103e011e 	bne	r2,zero,11ccc <_dtoa_r+0x7cc>
   124c8:	a00b883a 	mov	r5,r20
   124cc:	e009883a 	mov	r4,fp
   124d0:	000f883a 	mov	r7,zero
   124d4:	01800144 	movi	r6,5
   124d8:	00150b40 	call	150b4 <__multadd>
   124dc:	100b883a 	mov	r5,r2
   124e0:	b809883a 	mov	r4,r23
   124e4:	1029883a 	mov	r20,r2
   124e8:	0015a0c0 	call	15a0c <__mcmp>
   124ec:	00bdf70e 	bge	zero,r2,11ccc <_dtoa_r+0x7cc>
   124f0:	d8c00117 	ldw	r3,4(sp)
   124f4:	00800c44 	movi	r2,49
   124f8:	18800005 	stb	r2,0(r3)
   124fc:	d8800617 	ldw	r2,24(sp)
   12500:	1a000044 	addi	r8,r3,1
   12504:	14c00044 	addi	r19,r2,1
   12508:	a00b883a 	mov	r5,r20
   1250c:	e009883a 	mov	r4,fp
   12510:	da000315 	stw	r8,12(sp)
   12514:	00150900 	call	15090 <_Bfree>
   12518:	98800044 	addi	r2,r19,1
   1251c:	d8800215 	stw	r2,8(sp)
   12520:	da000317 	ldw	r8,12(sp)
   12524:	803eda1e 	bne	r16,zero,12090 <_dtoa_r+0xb90>
   12528:	003ede06 	br	120a4 <_dtoa_r+0xba4>
   1252c:	b005883a 	mov	r2,r22
   12530:	003e5506 	br	11e88 <_dtoa_r+0x988>
   12534:	800b883a 	mov	r5,r16
   12538:	900d883a 	mov	r6,r18
   1253c:	e009883a 	mov	r4,fp
   12540:	00158840 	call	15884 <__lshift>
   12544:	1021883a 	mov	r16,r2
   12548:	003f4a06 	br	12274 <_dtoa_r+0xd74>
   1254c:	1529c83a 	sub	r20,r2,r20
   12550:	003e3e06 	br	11e4c <_dtoa_r+0x94c>
   12554:	dcc00a15 	stw	r19,40(sp)
   12558:	dc400c15 	stw	r17,48(sp)
   1255c:	04000084 	movi	r16,2
   12560:	003ccf06 	br	118a0 <_dtoa_r+0x3a0>
   12564:	00800044 	movi	r2,1
   12568:	003ea106 	br	11ff0 <_dtoa_r+0xaf0>
   1256c:	00800044 	movi	r2,1
   12570:	d8800515 	stw	r2,20(sp)
   12574:	003c9506 	br	117cc <_dtoa_r+0x2cc>
   12578:	1000021e 	bne	r2,zero,12584 <_dtoa_r+0x1084>
   1257c:	98c0004c 	andi	r3,r19,1
   12580:	183ea91e 	bne	r3,zero,12028 <_dtoa_r+0xb28>
   12584:	40bfffc7 	ldb	r2,-1(r8)
   12588:	4007883a 	mov	r3,r8
   1258c:	423fffc4 	addi	r8,r8,-1
   12590:	10800c20 	cmpeqi	r2,r2,48
   12594:	103ffb1e 	bne	r2,zero,12584 <_dtoa_r+0x1084>
   12598:	1811883a 	mov	r8,r3
   1259c:	003eb006 	br	12060 <_dtoa_r+0xb60>
   125a0:	d8c00117 	ldw	r3,4(sp)
   125a4:	00800c44 	movi	r2,49
   125a8:	18800005 	stb	r2,0(r3)
   125ac:	d8800217 	ldw	r2,8(sp)
   125b0:	10800044 	addi	r2,r2,1
   125b4:	d8800215 	stw	r2,8(sp)
   125b8:	003ea906 	br	12060 <_dtoa_r+0xb60>
   125bc:	d8c00917 	ldw	r3,36(sp)
   125c0:	18010e26 	beq	r3,zero,129fc <_dtoa_r+0x14fc>
   125c4:	d8c00417 	ldw	r3,16(sp)
   125c8:	10810cc4 	addi	r2,r2,1075
   125cc:	b0ad883a 	add	r22,r22,r2
   125d0:	1885883a 	add	r2,r3,r2
   125d4:	dd000717 	ldw	r20,28(sp)
   125d8:	1825883a 	mov	r18,r3
   125dc:	d8800415 	stw	r2,16(sp)
   125e0:	003e2106 	br	11e68 <_dtoa_r+0x968>
   125e4:	8009883a 	mov	r4,r16
   125e8:	000c84c0 	call	c84c <__floatsidf>
   125ec:	d9800a17 	ldw	r6,40(sp)
   125f0:	900f883a 	mov	r7,r18
   125f4:	1009883a 	mov	r4,r2
   125f8:	180b883a 	mov	r5,r3
   125fc:	000b7f80 	call	b7f8 <__muldf3>
   12600:	000d883a 	mov	r6,zero
   12604:	01d00734 	movhi	r7,16412
   12608:	1009883a 	mov	r4,r2
   1260c:	180b883a 	mov	r5,r3
   12610:	000a4680 	call	a468 <__adddf3>
   12614:	1029883a 	mov	r20,r2
   12618:	00bf3034 	movhi	r2,64704
   1261c:	1885883a 	add	r2,r3,r2
   12620:	d8800c15 	stw	r2,48(sp)
   12624:	d9000a17 	ldw	r4,40(sp)
   12628:	900b883a 	mov	r5,r18
   1262c:	000d883a 	mov	r6,zero
   12630:	01d00534 	movhi	r7,16404
   12634:	000be6c0 	call	be6c <__subdf3>
   12638:	d9c00c17 	ldw	r7,48(sp)
   1263c:	a00d883a 	mov	r6,r20
   12640:	1009883a 	mov	r4,r2
   12644:	180b883a 	mov	r5,r3
   12648:	1025883a 	mov	r18,r2
   1264c:	1821883a 	mov	r16,r3
   12650:	000b6280 	call	b628 <__gedf2>
   12654:	00812b16 	blt	zero,r2,12b04 <_dtoa_r+0x1604>
   12658:	d8800c17 	ldw	r2,48(sp)
   1265c:	a00d883a 	mov	r6,r20
   12660:	9009883a 	mov	r4,r18
   12664:	11e0003c 	xorhi	r7,r2,32768
   12668:	800b883a 	mov	r5,r16
   1266c:	000b7100 	call	b710 <__ledf2>
   12670:	103d780e 	bge	r2,zero,11c54 <_dtoa_r+0x754>
   12674:	0029883a 	mov	r20,zero
   12678:	0021883a 	mov	r16,zero
   1267c:	003d9306 	br	11ccc <_dtoa_r+0x7cc>
   12680:	d9800717 	ldw	r6,28(sp)
   12684:	b80b883a 	mov	r5,r23
   12688:	e009883a 	mov	r4,fp
   1268c:	001573c0 	call	1573c <__pow5mult>
   12690:	102f883a 	mov	r23,r2
   12694:	003e1806 	br	11ef8 <_dtoa_r+0x9f8>
   12698:	d8800617 	ldw	r2,24(sp)
   1269c:	1000e326 	beq	r2,zero,12a2c <_dtoa_r+0x152c>
   126a0:	00a9c83a 	sub	r20,zero,r2
   126a4:	a08003cc 	andi	r2,r20,15
   126a8:	100690fa 	slli	r3,r2,3
   126ac:	008000b4 	movhi	r2,2
   126b0:	10867904 	addi	r2,r2,6628
   126b4:	10c5883a 	add	r2,r2,r3
   126b8:	11800017 	ldw	r6,0(r2)
   126bc:	11c00117 	ldw	r7,4(r2)
   126c0:	9809883a 	mov	r4,r19
   126c4:	880b883a 	mov	r5,r17
   126c8:	a029d13a 	srai	r20,r20,4
   126cc:	000b7f80 	call	b7f8 <__muldf3>
   126d0:	d8800a15 	stw	r2,40(sp)
   126d4:	1825883a 	mov	r18,r3
   126d8:	a0013126 	beq	r20,zero,12ba0 <_dtoa_r+0x16a0>
   126dc:	020000b4 	movhi	r8,2
   126e0:	04000084 	movi	r16,2
   126e4:	42066f04 	addi	r8,r8,6588
   126e8:	180b883a 	mov	r5,r3
   126ec:	dc400c15 	stw	r17,48(sp)
   126f0:	1009883a 	mov	r4,r2
   126f4:	8023883a 	mov	r17,r16
   126f8:	0007883a 	mov	r3,zero
   126fc:	4021883a 	mov	r16,r8
   12700:	a180004c 	andi	r6,r20,1
   12704:	30000726 	beq	r6,zero,12724 <_dtoa_r+0x1224>
   12708:	81800017 	ldw	r6,0(r16)
   1270c:	81c00117 	ldw	r7,4(r16)
   12710:	8c400044 	addi	r17,r17,1
   12714:	000b7f80 	call	b7f8 <__muldf3>
   12718:	180b883a 	mov	r5,r3
   1271c:	1009883a 	mov	r4,r2
   12720:	00c00044 	movi	r3,1
   12724:	a029d07a 	srai	r20,r20,1
   12728:	84000204 	addi	r16,r16,8
   1272c:	a03ff41e 	bne	r20,zero,12700 <_dtoa_r+0x1200>
   12730:	18c03fcc 	andi	r3,r3,255
   12734:	8821883a 	mov	r16,r17
   12738:	dc400c17 	ldw	r17,48(sp)
   1273c:	183c7126 	beq	r3,zero,11904 <_dtoa_r+0x404>
   12740:	d9000a15 	stw	r4,40(sp)
   12744:	2825883a 	mov	r18,r5
   12748:	003c6e06 	br	11904 <_dtoa_r+0x404>
   1274c:	983eb41e 	bne	r19,zero,12220 <_dtoa_r+0xd20>
   12750:	00800434 	movhi	r2,16
   12754:	10bfffc4 	addi	r2,r2,-1
   12758:	8884703a 	and	r2,r17,r2
   1275c:	103f4926 	beq	r2,zero,12484 <_dtoa_r+0xf84>
   12760:	003eaf06 	br	12220 <_dtoa_r+0xd20>
   12764:	00800e0e 	bge	zero,r2,127a0 <_dtoa_r+0x12a0>
   12768:	b80b883a 	mov	r5,r23
   1276c:	01800044 	movi	r6,1
   12770:	e009883a 	mov	r4,fp
   12774:	da000215 	stw	r8,8(sp)
   12778:	00158840 	call	15884 <__lshift>
   1277c:	a00b883a 	mov	r5,r20
   12780:	1009883a 	mov	r4,r2
   12784:	102f883a 	mov	r23,r2
   12788:	0015a0c0 	call	15a0c <__mcmp>
   1278c:	da000217 	ldw	r8,8(sp)
   12790:	0080e30e 	bge	zero,r2,12b20 <_dtoa_r+0x1620>
   12794:	98c00e60 	cmpeqi	r3,r19,57
   12798:	1800cf1e 	bne	r3,zero,12ad8 <_dtoa_r+0x15d8>
   1279c:	acc00c44 	addi	r19,r21,49
   127a0:	8023883a 	mov	r17,r16
   127a4:	d8800617 	ldw	r2,24(sp)
   127a8:	b4c00005 	stb	r19,0(r22)
   127ac:	9021883a 	mov	r16,r18
   127b0:	10800044 	addi	r2,r2,1
   127b4:	d8800215 	stw	r2,8(sp)
   127b8:	003e2906 	br	12060 <_dtoa_r+0xb60>
   127bc:	b82b883a 	mov	r21,r23
   127c0:	ddc00217 	ldw	r23,8(sp)
   127c4:	200d883a 	mov	r6,r4
   127c8:	280f883a 	mov	r7,r5
   127cc:	000a4680 	call	a468 <__adddf3>
   127d0:	102d883a 	mov	r22,r2
   127d4:	1009883a 	mov	r4,r2
   127d8:	d8800617 	ldw	r2,24(sp)
   127dc:	800d883a 	mov	r6,r16
   127e0:	900f883a 	mov	r7,r18
   127e4:	10800044 	addi	r2,r2,1
   127e8:	180b883a 	mov	r5,r3
   127ec:	1823883a 	mov	r17,r3
   127f0:	1027883a 	mov	r19,r2
   127f4:	d8800215 	stw	r2,8(sp)
   127f8:	000b6280 	call	b628 <__gedf2>
   127fc:	00808916 	blt	zero,r2,12a24 <_dtoa_r+0x1524>
   12800:	800d883a 	mov	r6,r16
   12804:	900f883a 	mov	r7,r18
   12808:	b009883a 	mov	r4,r22
   1280c:	880b883a 	mov	r5,r17
   12810:	000b5a80 	call	b5a8 <__eqdf2>
   12814:	1000021e 	bne	r2,zero,12820 <_dtoa_r+0x1320>
   12818:	ad40004c 	andi	r21,r21,1
   1281c:	a800811e 	bne	r21,zero,12a24 <_dtoa_r+0x1524>
   12820:	a011883a 	mov	r8,r20
   12824:	003e1f06 	br	120a4 <_dtoa_r+0xba4>
   12828:	81400117 	ldw	r5,4(r16)
   1282c:	e009883a 	mov	r4,fp
   12830:	0014fec0 	call	14fec <_Balloc>
   12834:	1023883a 	mov	r17,r2
   12838:	1000f326 	beq	r2,zero,12c08 <_dtoa_r+0x1708>
   1283c:	81800417 	ldw	r6,16(r16)
   12840:	81400304 	addi	r5,r16,12
   12844:	11000304 	addi	r4,r2,12
   12848:	31800084 	addi	r6,r6,2
   1284c:	300c90ba 	slli	r6,r6,2
   12850:	000d4600 	call	d460 <memcpy>
   12854:	01800044 	movi	r6,1
   12858:	880b883a 	mov	r5,r17
   1285c:	e009883a 	mov	r4,fp
   12860:	00158840 	call	15884 <__lshift>
   12864:	1025883a 	mov	r18,r2
   12868:	003e8406 	br	1227c <_dtoa_r+0xd7c>
   1286c:	b80b883a 	mov	r5,r23
   12870:	e009883a 	mov	r4,fp
   12874:	001573c0 	call	1573c <__pow5mult>
   12878:	102f883a 	mov	r23,r2
   1287c:	003d9e06 	br	11ef8 <_dtoa_r+0x9f8>
   12880:	d8800417 	ldw	r2,16(sp)
   12884:	d8c00317 	ldw	r3,12(sp)
   12888:	10e5c83a 	sub	r18,r2,r3
   1288c:	003d7606 	br	11e68 <_dtoa_r+0x968>
   12890:	98800e58 	cmpnei	r2,r19,57
   12894:	10009026 	beq	r2,zero,12ad8 <_dtoa_r+0x15d8>
   12898:	d8800617 	ldw	r2,24(sp)
   1289c:	98c00044 	addi	r3,r19,1
   128a0:	8023883a 	mov	r17,r16
   128a4:	10800044 	addi	r2,r2,1
   128a8:	d8800215 	stw	r2,8(sp)
   128ac:	b0c00005 	stb	r3,0(r22)
   128b0:	9021883a 	mov	r16,r18
   128b4:	003dea06 	br	12060 <_dtoa_r+0xb60>
   128b8:	d8800617 	ldw	r2,24(sp)
   128bc:	8023883a 	mov	r17,r16
   128c0:	9021883a 	mov	r16,r18
   128c4:	10800044 	addi	r2,r2,1
   128c8:	d8800215 	stw	r2,8(sp)
   128cc:	003dcb06 	br	11ffc <_dtoa_r+0xafc>
   128d0:	d9400c17 	ldw	r5,48(sp)
   128d4:	a009883a 	mov	r4,r20
   128d8:	000b7f80 	call	b7f8 <__muldf3>
   128dc:	d9400117 	ldw	r5,4(sp)
   128e0:	d9000f17 	ldw	r4,60(sp)
   128e4:	d9800d17 	ldw	r6,52(sp)
   128e8:	d8800a15 	stw	r2,40(sp)
   128ec:	29000005 	stb	r4,0(r5)
   128f0:	d8c00c15 	stw	r3,48(sp)
   128f4:	31000058 	cmpnei	r4,r6,1
   128f8:	da000e17 	ldw	r8,56(sp)
   128fc:	29a9883a 	add	r20,r5,r6
   12900:	20009d26 	beq	r4,zero,12b78 <_dtoa_r+0x1678>
   12904:	dc400d15 	stw	r17,52(sp)
   12908:	8009883a 	mov	r4,r16
   1290c:	900b883a 	mov	r5,r18
   12910:	4023883a 	mov	r17,r8
   12914:	dcc00e15 	stw	r19,56(sp)
   12918:	000d883a 	mov	r6,zero
   1291c:	01d00934 	movhi	r7,16420
   12920:	000b7f80 	call	b7f8 <__muldf3>
   12924:	180b883a 	mov	r5,r3
   12928:	1009883a 	mov	r4,r2
   1292c:	1825883a 	mov	r18,r3
   12930:	1027883a 	mov	r19,r2
   12934:	000c7cc0 	call	c7cc <__fixdfsi>
   12938:	1009883a 	mov	r4,r2
   1293c:	1021883a 	mov	r16,r2
   12940:	000c84c0 	call	c84c <__floatsidf>
   12944:	9809883a 	mov	r4,r19
   12948:	900b883a 	mov	r5,r18
   1294c:	100d883a 	mov	r6,r2
   12950:	180f883a 	mov	r7,r3
   12954:	8c400044 	addi	r17,r17,1
   12958:	84000c04 	addi	r16,r16,48
   1295c:	000be6c0 	call	be6c <__subdf3>
   12960:	8c3fffc5 	stb	r16,-1(r17)
   12964:	1009883a 	mov	r4,r2
   12968:	180b883a 	mov	r5,r3
   1296c:	a47fea1e 	bne	r20,r17,12918 <_dtoa_r+0x1418>
   12970:	dc400d17 	ldw	r17,52(sp)
   12974:	dcc00e17 	ldw	r19,56(sp)
   12978:	1021883a 	mov	r16,r2
   1297c:	1825883a 	mov	r18,r3
   12980:	d9000a17 	ldw	r4,40(sp)
   12984:	d9400c17 	ldw	r5,48(sp)
   12988:	000d883a 	mov	r6,zero
   1298c:	01cff834 	movhi	r7,16352
   12990:	000a4680 	call	a468 <__adddf3>
   12994:	800d883a 	mov	r6,r16
   12998:	900f883a 	mov	r7,r18
   1299c:	1009883a 	mov	r4,r2
   129a0:	180b883a 	mov	r5,r3
   129a4:	000b7100 	call	b710 <__ledf2>
   129a8:	10005916 	blt	r2,zero,12b10 <_dtoa_r+0x1610>
   129ac:	d9800a17 	ldw	r6,40(sp)
   129b0:	d9c00c17 	ldw	r7,48(sp)
   129b4:	0009883a 	mov	r4,zero
   129b8:	014ff834 	movhi	r5,16352
   129bc:	000be6c0 	call	be6c <__subdf3>
   129c0:	800d883a 	mov	r6,r16
   129c4:	900f883a 	mov	r7,r18
   129c8:	1009883a 	mov	r4,r2
   129cc:	180b883a 	mov	r5,r3
   129d0:	000b6280 	call	b628 <__gedf2>
   129d4:	00bc9f0e 	bge	zero,r2,11c54 <_dtoa_r+0x754>
   129d8:	a0bfffc7 	ldb	r2,-1(r20)
   129dc:	a011883a 	mov	r8,r20
   129e0:	a53fffc4 	addi	r20,r20,-1
   129e4:	10800c20 	cmpeqi	r2,r2,48
   129e8:	103ffb1e 	bne	r2,zero,129d8 <_dtoa_r+0x14d8>
   129ec:	d8801017 	ldw	r2,64(sp)
   129f0:	10800044 	addi	r2,r2,1
   129f4:	d8800215 	stw	r2,8(sp)
   129f8:	003daa06 	br	120a4 <_dtoa_r+0xba4>
   129fc:	d8c01117 	ldw	r3,68(sp)
   12a00:	d9000417 	ldw	r4,16(sp)
   12a04:	00800d84 	movi	r2,54
   12a08:	10c5c83a 	sub	r2,r2,r3
   12a0c:	b0ad883a 	add	r22,r22,r2
   12a10:	2085883a 	add	r2,r4,r2
   12a14:	dd000717 	ldw	r20,28(sp)
   12a18:	2025883a 	mov	r18,r4
   12a1c:	d8800415 	stw	r2,16(sp)
   12a20:	003d1106 	br	11e68 <_dtoa_r+0x968>
   12a24:	d9000117 	ldw	r4,4(sp)
   12a28:	003c4e06 	br	11b64 <_dtoa_r+0x664>
   12a2c:	dcc00a15 	stw	r19,40(sp)
   12a30:	8825883a 	mov	r18,r17
   12a34:	04000084 	movi	r16,2
   12a38:	003bb206 	br	11904 <_dtoa_r+0x404>
   12a3c:	d8800317 	ldw	r2,12(sp)
   12a40:	103ee826 	beq	r2,zero,125e4 <_dtoa_r+0x10e4>
   12a44:	d8800b17 	ldw	r2,44(sp)
   12a48:	00bc820e 	bge	zero,r2,11c54 <_dtoa_r+0x754>
   12a4c:	900b883a 	mov	r5,r18
   12a50:	a009883a 	mov	r4,r20
   12a54:	000d883a 	mov	r6,zero
   12a58:	01d00934 	movhi	r7,16420
   12a5c:	000b7f80 	call	b7f8 <__muldf3>
   12a60:	81000044 	addi	r4,r16,1
   12a64:	1029883a 	mov	r20,r2
   12a68:	1825883a 	mov	r18,r3
   12a6c:	d8800a15 	stw	r2,40(sp)
   12a70:	000c84c0 	call	c84c <__floatsidf>
   12a74:	a00d883a 	mov	r6,r20
   12a78:	900f883a 	mov	r7,r18
   12a7c:	1009883a 	mov	r4,r2
   12a80:	180b883a 	mov	r5,r3
   12a84:	000b7f80 	call	b7f8 <__muldf3>
   12a88:	1009883a 	mov	r4,r2
   12a8c:	000d883a 	mov	r6,zero
   12a90:	01d00734 	movhi	r7,16412
   12a94:	180b883a 	mov	r5,r3
   12a98:	000a4680 	call	a468 <__adddf3>
   12a9c:	d9000617 	ldw	r4,24(sp)
   12aa0:	1029883a 	mov	r20,r2
   12aa4:	00bf3034 	movhi	r2,64704
   12aa8:	1887883a 	add	r3,r3,r2
   12aac:	d8800b17 	ldw	r2,44(sp)
   12ab0:	213fffc4 	addi	r4,r4,-1
   12ab4:	d9001015 	stw	r4,64(sp)
   12ab8:	d8c00c15 	stw	r3,48(sp)
   12abc:	d8800d15 	stw	r2,52(sp)
   12ac0:	003baf06 	br	11980 <_dtoa_r+0x480>
   12ac4:	00c00c44 	movi	r3,49
   12ac8:	9cc00044 	addi	r19,r19,1
   12acc:	003c2e06 	br	11b88 <_dtoa_r+0x688>
   12ad0:	b0800044 	addi	r2,r22,1
   12ad4:	d8800315 	stw	r2,12(sp)
   12ad8:	00800e44 	movi	r2,57
   12adc:	b0800005 	stb	r2,0(r22)
   12ae0:	d8800617 	ldw	r2,24(sp)
   12ae4:	8023883a 	mov	r17,r16
   12ae8:	da000317 	ldw	r8,12(sp)
   12aec:	10800044 	addi	r2,r2,1
   12af0:	d9400117 	ldw	r5,4(sp)
   12af4:	d8800215 	stw	r2,8(sp)
   12af8:	9021883a 	mov	r16,r18
   12afc:	01000e44 	movi	r4,57
   12b00:	003d4f06 	br	12040 <_dtoa_r+0xb40>
   12b04:	0029883a 	mov	r20,zero
   12b08:	0021883a 	mov	r16,zero
   12b0c:	003e7806 	br	124f0 <_dtoa_r+0xff0>
   12b10:	d8801017 	ldw	r2,64(sp)
   12b14:	d9000117 	ldw	r4,4(sp)
   12b18:	14c00044 	addi	r19,r2,1
   12b1c:	003c1106 	br	11b64 <_dtoa_r+0x664>
   12b20:	103f1f1e 	bne	r2,zero,127a0 <_dtoa_r+0x12a0>
   12b24:	9880004c 	andi	r2,r19,1
   12b28:	103f1a1e 	bne	r2,zero,12794 <_dtoa_r+0x1294>
   12b2c:	003f1c06 	br	127a0 <_dtoa_r+0x12a0>
   12b30:	d8801017 	ldw	r2,64(sp)
   12b34:	ddc00c17 	ldw	r23,48(sp)
   12b38:	a811883a 	mov	r8,r21
   12b3c:	10800044 	addi	r2,r2,1
   12b40:	d8800215 	stw	r2,8(sp)
   12b44:	003d5706 	br	120a4 <_dtoa_r+0xba4>
   12b48:	98800e60 	cmpeqi	r2,r19,57
   12b4c:	103fe01e 	bne	r2,zero,12ad0 <_dtoa_r+0x15d0>
   12b50:	0440010e 	bge	zero,r17,12b58 <_dtoa_r+0x1658>
   12b54:	acc00c44 	addi	r19,r21,49
   12b58:	8023883a 	mov	r17,r16
   12b5c:	b2000044 	addi	r8,r22,1
   12b60:	003f1006 	br	127a4 <_dtoa_r+0x12a4>
   12b64:	d8800217 	ldw	r2,8(sp)
   12b68:	108000c8 	cmpgei	r2,r2,3
   12b6c:	103e511e 	bne	r2,zero,124b4 <_dtoa_r+0xfb4>
   12b70:	dd400615 	stw	r21,24(sp)
   12b74:	003e1406 	br	123c8 <_dtoa_r+0xec8>
   12b78:	4029883a 	mov	r20,r8
   12b7c:	003f8006 	br	12980 <_dtoa_r+0x1480>
   12b80:	d8800217 	ldw	r2,8(sp)
   12b84:	108000c8 	cmpgei	r2,r2,3
   12b88:	103e4a1e 	bne	r2,zero,124b4 <_dtoa_r+0xfb4>
   12b8c:	d8800b17 	ldw	r2,44(sp)
   12b90:	dd400615 	stw	r21,24(sp)
   12b94:	d8800315 	stw	r2,12(sp)
   12b98:	04bdb60e 	bge	zero,r18,12274 <_dtoa_r+0xd74>
   12b9c:	003e6506 	br	12534 <_dtoa_r+0x1034>
   12ba0:	04000084 	movi	r16,2
   12ba4:	003b5706 	br	11904 <_dtoa_r+0x404>
   12ba8:	01c000b4 	movhi	r7,2
   12bac:	010000b4 	movhi	r4,2
   12bb0:	39c5e404 	addi	r7,r7,6032
   12bb4:	000d883a 	mov	r6,zero
   12bb8:	01406a84 	movi	r5,426
   12bbc:	2105e904 	addi	r4,r4,6052
   12bc0:	0017e800 	call	17e80 <__assert_func>
   12bc4:	000b883a 	mov	r5,zero
   12bc8:	003b1006 	br	1180c <_dtoa_r+0x30c>
   12bcc:	e0001115 	stw	zero,68(fp)
   12bd0:	000b883a 	mov	r5,zero
   12bd4:	e009883a 	mov	r4,fp
   12bd8:	0014fec0 	call	14fec <_Balloc>
   12bdc:	d8800115 	stw	r2,4(sp)
   12be0:	103ff126 	beq	r2,zero,12ba8 <_dtoa_r+0x16a8>
   12be4:	d8800117 	ldw	r2,4(sp)
   12be8:	d8001d15 	stw	zero,116(sp)
   12bec:	e0801015 	stw	r2,64(fp)
   12bf0:	00bfffc4 	movi	r2,-1
   12bf4:	d8800315 	stw	r2,12(sp)
   12bf8:	d8800b15 	stw	r2,44(sp)
   12bfc:	00800044 	movi	r2,1
   12c00:	d8800515 	stw	r2,20(sp)
   12c04:	003c1306 	br	11c54 <_dtoa_r+0x754>
   12c08:	01c000b4 	movhi	r7,2
   12c0c:	010000b4 	movhi	r4,2
   12c10:	39c5e404 	addi	r7,r7,6032
   12c14:	000d883a 	mov	r6,zero
   12c18:	0140ba84 	movi	r5,746
   12c1c:	2105e904 	addi	r4,r4,6052
   12c20:	0017e800 	call	17e80 <__assert_func>
   12c24:	008000b4 	movhi	r2,2
   12c28:	1085e104 	addi	r2,r2,6020
   12c2c:	d8800115 	stw	r2,4(sp)
   12c30:	003a6506 	br	115c8 <_dtoa_r+0xc8>
   12c34:	18c00120 	cmpeqi	r3,r3,4
   12c38:	183cc81e 	bne	r3,zero,11f5c <_dtoa_r+0xa5c>
   12c3c:	00c00f04 	movi	r3,60
   12c40:	1885c83a 	sub	r2,r3,r2
   12c44:	003cc006 	br	11f48 <_dtoa_r+0xa48>

00012c48 <__sflush_r>:
   12c48:	2880030b 	ldhu	r2,12(r5)
   12c4c:	defffb04 	addi	sp,sp,-20
   12c50:	dcc00315 	stw	r19,12(sp)
   12c54:	dc000015 	stw	r16,0(sp)
   12c58:	dfc00415 	stw	ra,16(sp)
   12c5c:	dc800215 	stw	r18,8(sp)
   12c60:	dc400115 	stw	r17,4(sp)
   12c64:	10c0020c 	andi	r3,r2,8
   12c68:	2821883a 	mov	r16,r5
   12c6c:	2027883a 	mov	r19,r4
   12c70:	18003f1e 	bne	r3,zero,12d70 <__sflush_r+0x128>
   12c74:	28c00117 	ldw	r3,4(r5)
   12c78:	10820014 	ori	r2,r2,2048
   12c7c:	2880030d 	sth	r2,12(r5)
   12c80:	00c0550e 	bge	zero,r3,12dd8 <__sflush_r+0x190>
   12c84:	82000a17 	ldw	r8,40(r16)
   12c88:	40003126 	beq	r8,zero,12d50 <__sflush_r+0x108>
   12c8c:	9c400017 	ldw	r17,0(r19)
   12c90:	1104000c 	andi	r4,r2,4096
   12c94:	98000015 	stw	zero,0(r19)
   12c98:	1007883a 	mov	r3,r2
   12c9c:	2000531e 	bne	r4,zero,12dec <__sflush_r+0x1a4>
   12ca0:	81400717 	ldw	r5,28(r16)
   12ca4:	01c00044 	movi	r7,1
   12ca8:	000d883a 	mov	r6,zero
   12cac:	9809883a 	mov	r4,r19
   12cb0:	403ee83a 	callr	r8
   12cb4:	10ffffd8 	cmpnei	r3,r2,-1
   12cb8:	18005826 	beq	r3,zero,12e1c <__sflush_r+0x1d4>
   12cbc:	80c0030b 	ldhu	r3,12(r16)
   12cc0:	82000a17 	ldw	r8,40(r16)
   12cc4:	18c0010c 	andi	r3,r3,4
   12cc8:	18000626 	beq	r3,zero,12ce4 <__sflush_r+0x9c>
   12ccc:	81000117 	ldw	r4,4(r16)
   12cd0:	80c00c17 	ldw	r3,48(r16)
   12cd4:	1105c83a 	sub	r2,r2,r4
   12cd8:	18000226 	beq	r3,zero,12ce4 <__sflush_r+0x9c>
   12cdc:	80c00f17 	ldw	r3,60(r16)
   12ce0:	10c5c83a 	sub	r2,r2,r3
   12ce4:	81400717 	ldw	r5,28(r16)
   12ce8:	100d883a 	mov	r6,r2
   12cec:	000f883a 	mov	r7,zero
   12cf0:	9809883a 	mov	r4,r19
   12cf4:	403ee83a 	callr	r8
   12cf8:	10ffffd8 	cmpnei	r3,r2,-1
   12cfc:	18003d1e 	bne	r3,zero,12df4 <__sflush_r+0x1ac>
   12d00:	99000017 	ldw	r4,0(r19)
   12d04:	80c0030b 	ldhu	r3,12(r16)
   12d08:	20004e26 	beq	r4,zero,12e44 <__sflush_r+0x1fc>
   12d0c:	21400760 	cmpeqi	r5,r4,29
   12d10:	2800021e 	bne	r5,zero,12d1c <__sflush_r+0xd4>
   12d14:	210005a0 	cmpeqi	r4,r4,22
   12d18:	20002c26 	beq	r4,zero,12dcc <__sflush_r+0x184>
   12d1c:	80800417 	ldw	r2,16(r16)
   12d20:	18fdffcc 	andi	r3,r3,63487
   12d24:	80c0030d 	sth	r3,12(r16)
   12d28:	80000115 	stw	zero,4(r16)
   12d2c:	80800015 	stw	r2,0(r16)
   12d30:	81400c17 	ldw	r5,48(r16)
   12d34:	9c400015 	stw	r17,0(r19)
   12d38:	28000526 	beq	r5,zero,12d50 <__sflush_r+0x108>
   12d3c:	80801004 	addi	r2,r16,64
   12d40:	28800226 	beq	r5,r2,12d4c <__sflush_r+0x104>
   12d44:	9809883a 	mov	r4,r19
   12d48:	001340c0 	call	1340c <_free_r>
   12d4c:	80000c15 	stw	zero,48(r16)
   12d50:	0005883a 	mov	r2,zero
   12d54:	dfc00417 	ldw	ra,16(sp)
   12d58:	dcc00317 	ldw	r19,12(sp)
   12d5c:	dc800217 	ldw	r18,8(sp)
   12d60:	dc400117 	ldw	r17,4(sp)
   12d64:	dc000017 	ldw	r16,0(sp)
   12d68:	dec00504 	addi	sp,sp,20
   12d6c:	f800283a 	ret
   12d70:	2c800417 	ldw	r18,16(r5)
   12d74:	903ff626 	beq	r18,zero,12d50 <__sflush_r+0x108>
   12d78:	2c400017 	ldw	r17,0(r5)
   12d7c:	108000cc 	andi	r2,r2,3
   12d80:	2c800015 	stw	r18,0(r5)
   12d84:	8ca3c83a 	sub	r17,r17,r18
   12d88:	1000161e 	bne	r2,zero,12de4 <__sflush_r+0x19c>
   12d8c:	28800517 	ldw	r2,20(r5)
   12d90:	80800215 	stw	r2,8(r16)
   12d94:	04400316 	blt	zero,r17,12da4 <__sflush_r+0x15c>
   12d98:	003fed06 	br	12d50 <__sflush_r+0x108>
   12d9c:	90a5883a 	add	r18,r18,r2
   12da0:	047feb0e 	bge	zero,r17,12d50 <__sflush_r+0x108>
   12da4:	80800917 	ldw	r2,36(r16)
   12da8:	81400717 	ldw	r5,28(r16)
   12dac:	880f883a 	mov	r7,r17
   12db0:	900d883a 	mov	r6,r18
   12db4:	9809883a 	mov	r4,r19
   12db8:	103ee83a 	callr	r2
   12dbc:	88a3c83a 	sub	r17,r17,r2
   12dc0:	00bff616 	blt	zero,r2,12d9c <__sflush_r+0x154>
   12dc4:	80c0030b 	ldhu	r3,12(r16)
   12dc8:	00bfffc4 	movi	r2,-1
   12dcc:	18c01014 	ori	r3,r3,64
   12dd0:	80c0030d 	sth	r3,12(r16)
   12dd4:	003fdf06 	br	12d54 <__sflush_r+0x10c>
   12dd8:	28c00f17 	ldw	r3,60(r5)
   12ddc:	00ffa916 	blt	zero,r3,12c84 <__sflush_r+0x3c>
   12de0:	003fdb06 	br	12d50 <__sflush_r+0x108>
   12de4:	0005883a 	mov	r2,zero
   12de8:	003fe906 	br	12d90 <__sflush_r+0x148>
   12dec:	80801417 	ldw	r2,80(r16)
   12df0:	003fb406 	br	12cc4 <__sflush_r+0x7c>
   12df4:	80c0030b 	ldhu	r3,12(r16)
   12df8:	81000417 	ldw	r4,16(r16)
   12dfc:	80000115 	stw	zero,4(r16)
   12e00:	197dffcc 	andi	r5,r3,63487
   12e04:	8140030d 	sth	r5,12(r16)
   12e08:	81000015 	stw	r4,0(r16)
   12e0c:	18c4000c 	andi	r3,r3,4096
   12e10:	183fc726 	beq	r3,zero,12d30 <__sflush_r+0xe8>
   12e14:	80801415 	stw	r2,80(r16)
   12e18:	003fc506 	br	12d30 <__sflush_r+0xe8>
   12e1c:	98c00017 	ldw	r3,0(r19)
   12e20:	183fa626 	beq	r3,zero,12cbc <__sflush_r+0x74>
   12e24:	19000760 	cmpeqi	r4,r3,29
   12e28:	20000e1e 	bne	r4,zero,12e64 <__sflush_r+0x21c>
   12e2c:	18c00598 	cmpnei	r3,r3,22
   12e30:	18000c26 	beq	r3,zero,12e64 <__sflush_r+0x21c>
   12e34:	80c0030b 	ldhu	r3,12(r16)
   12e38:	18c01014 	ori	r3,r3,64
   12e3c:	80c0030d 	sth	r3,12(r16)
   12e40:	003fc406 	br	12d54 <__sflush_r+0x10c>
   12e44:	81000417 	ldw	r4,16(r16)
   12e48:	197dffcc 	andi	r5,r3,63487
   12e4c:	8140030d 	sth	r5,12(r16)
   12e50:	80000115 	stw	zero,4(r16)
   12e54:	81000015 	stw	r4,0(r16)
   12e58:	18c4000c 	andi	r3,r3,4096
   12e5c:	183fb426 	beq	r3,zero,12d30 <__sflush_r+0xe8>
   12e60:	003fec06 	br	12e14 <__sflush_r+0x1cc>
   12e64:	9c400015 	stw	r17,0(r19)
   12e68:	0005883a 	mov	r2,zero
   12e6c:	003fb906 	br	12d54 <__sflush_r+0x10c>

00012e70 <_fflush_r>:
   12e70:	defffd04 	addi	sp,sp,-12
   12e74:	dc000115 	stw	r16,4(sp)
   12e78:	dfc00215 	stw	ra,8(sp)
   12e7c:	2021883a 	mov	r16,r4
   12e80:	20000226 	beq	r4,zero,12e8c <_fflush_r+0x1c>
   12e84:	20800e17 	ldw	r2,56(r4)
   12e88:	10000726 	beq	r2,zero,12ea8 <_fflush_r+0x38>
   12e8c:	2880030f 	ldh	r2,12(r5)
   12e90:	10000a1e 	bne	r2,zero,12ebc <_fflush_r+0x4c>
   12e94:	0005883a 	mov	r2,zero
   12e98:	dfc00217 	ldw	ra,8(sp)
   12e9c:	dc000117 	ldw	r16,4(sp)
   12ea0:	dec00304 	addi	sp,sp,12
   12ea4:	f800283a 	ret
   12ea8:	d9400015 	stw	r5,0(sp)
   12eac:	00132a80 	call	132a8 <__sinit>
   12eb0:	d9400017 	ldw	r5,0(sp)
   12eb4:	2880030f 	ldh	r2,12(r5)
   12eb8:	103ff626 	beq	r2,zero,12e94 <_fflush_r+0x24>
   12ebc:	8009883a 	mov	r4,r16
   12ec0:	dfc00217 	ldw	ra,8(sp)
   12ec4:	dc000117 	ldw	r16,4(sp)
   12ec8:	dec00304 	addi	sp,sp,12
   12ecc:	0012c481 	jmpi	12c48 <__sflush_r>

00012ed0 <fflush>:
   12ed0:	20001726 	beq	r4,zero,12f30 <fflush+0x60>
   12ed4:	008000b4 	movhi	r2,2
   12ed8:	200b883a 	mov	r5,r4
   12edc:	110eaa17 	ldw	r4,15016(r2)
   12ee0:	20000226 	beq	r4,zero,12eec <fflush+0x1c>
   12ee4:	20800e17 	ldw	r2,56(r4)
   12ee8:	10000526 	beq	r2,zero,12f00 <fflush+0x30>
   12eec:	2880030f 	ldh	r2,12(r5)
   12ef0:	1000021e 	bne	r2,zero,12efc <fflush+0x2c>
   12ef4:	0005883a 	mov	r2,zero
   12ef8:	f800283a 	ret
   12efc:	0012c481 	jmpi	12c48 <__sflush_r>
   12f00:	defffd04 	addi	sp,sp,-12
   12f04:	d9400115 	stw	r5,4(sp)
   12f08:	d9000015 	stw	r4,0(sp)
   12f0c:	dfc00215 	stw	ra,8(sp)
   12f10:	00132a80 	call	132a8 <__sinit>
   12f14:	d9400117 	ldw	r5,4(sp)
   12f18:	d9000017 	ldw	r4,0(sp)
   12f1c:	2880030f 	ldh	r2,12(r5)
   12f20:	10000826 	beq	r2,zero,12f44 <fflush+0x74>
   12f24:	dfc00217 	ldw	ra,8(sp)
   12f28:	dec00304 	addi	sp,sp,12
   12f2c:	0012c481 	jmpi	12c48 <__sflush_r>
   12f30:	008000b4 	movhi	r2,2
   12f34:	110ea917 	ldw	r4,15012(r2)
   12f38:	01400074 	movhi	r5,1
   12f3c:	294b9c04 	addi	r5,r5,11888
   12f40:	0013c241 	jmpi	13c24 <_fwalk_reent>
   12f44:	0005883a 	mov	r2,zero
   12f48:	dfc00217 	ldw	ra,8(sp)
   12f4c:	dec00304 	addi	sp,sp,12
   12f50:	f800283a 	ret

00012f54 <__fp_lock>:
   12f54:	0005883a 	mov	r2,zero
   12f58:	f800283a 	ret

00012f5c <_cleanup_r>:
   12f5c:	014000b4 	movhi	r5,2
   12f60:	29602504 	addi	r5,r5,-32620
   12f64:	0013c241 	jmpi	13c24 <_fwalk_reent>

00012f68 <__fp_unlock>:
   12f68:	0005883a 	mov	r2,zero
   12f6c:	f800283a 	ret

00012f70 <__sinit.part.0>:
   12f70:	00c00074 	movhi	r3,1
   12f74:	20800117 	ldw	r2,4(r4)
   12f78:	18cbd704 	addi	r3,r3,12124
   12f7c:	20c00f15 	stw	r3,60(r4)
   12f80:	2140bb04 	addi	r5,r4,748
   12f84:	00c000c4 	movi	r3,3
   12f88:	20c0b915 	stw	r3,740(r4)
   12f8c:	2140ba15 	stw	r5,744(r4)
   12f90:	2000b815 	stw	zero,736(r4)
   12f94:	10001705 	stb	zero,92(r2)
   12f98:	10001745 	stb	zero,93(r2)
   12f9c:	10001785 	stb	zero,94(r2)
   12fa0:	100017c5 	stb	zero,95(r2)
   12fa4:	10001805 	stb	zero,96(r2)
   12fa8:	10001845 	stb	zero,97(r2)
   12fac:	10001885 	stb	zero,98(r2)
   12fb0:	100018c5 	stb	zero,99(r2)
   12fb4:	00c00104 	movi	r3,4
   12fb8:	10c00315 	stw	r3,12(r2)
   12fbc:	02000074 	movhi	r8,1
   12fc0:	20c00217 	ldw	r3,8(r4)
   12fc4:	01c00074 	movhi	r7,1
   12fc8:	01800074 	movhi	r6,1
   12fcc:	01400074 	movhi	r5,1
   12fd0:	4219a204 	addi	r8,r8,26248
   12fd4:	39d9b904 	addi	r7,r7,26340
   12fd8:	3199d904 	addi	r6,r6,26468
   12fdc:	2959f004 	addi	r5,r5,26560
   12fe0:	02400074 	movhi	r9,1
   12fe4:	10001915 	stw	zero,100(r2)
   12fe8:	10000015 	stw	zero,0(r2)
   12fec:	10000115 	stw	zero,4(r2)
   12ff0:	10000215 	stw	zero,8(r2)
   12ff4:	10000415 	stw	zero,16(r2)
   12ff8:	10000515 	stw	zero,20(r2)
   12ffc:	10000615 	stw	zero,24(r2)
   13000:	10800715 	stw	r2,28(r2)
   13004:	12000815 	stw	r8,32(r2)
   13008:	11c00915 	stw	r7,36(r2)
   1300c:	11800a15 	stw	r6,40(r2)
   13010:	11400b15 	stw	r5,44(r2)
   13014:	4a400284 	addi	r9,r9,10
   13018:	1a400315 	stw	r9,12(r3)
   1301c:	18001915 	stw	zero,100(r3)
   13020:	18000015 	stw	zero,0(r3)
   13024:	18000115 	stw	zero,4(r3)
   13028:	18000215 	stw	zero,8(r3)
   1302c:	18000415 	stw	zero,16(r3)
   13030:	18001705 	stb	zero,92(r3)
   13034:	18001745 	stb	zero,93(r3)
   13038:	18001785 	stb	zero,94(r3)
   1303c:	180017c5 	stb	zero,95(r3)
   13040:	18001805 	stb	zero,96(r3)
   13044:	18001845 	stb	zero,97(r3)
   13048:	18001885 	stb	zero,98(r3)
   1304c:	180018c5 	stb	zero,99(r3)
   13050:	20800317 	ldw	r2,12(r4)
   13054:	024000b4 	movhi	r9,2
   13058:	18000515 	stw	zero,20(r3)
   1305c:	18000615 	stw	zero,24(r3)
   13060:	18c00715 	stw	r3,28(r3)
   13064:	1a000815 	stw	r8,32(r3)
   13068:	19c00915 	stw	r7,36(r3)
   1306c:	19800a15 	stw	r6,40(r3)
   13070:	19400b15 	stw	r5,44(r3)
   13074:	4a400484 	addi	r9,r9,18
   13078:	10001915 	stw	zero,100(r2)
   1307c:	10000015 	stw	zero,0(r2)
   13080:	10000115 	stw	zero,4(r2)
   13084:	10000215 	stw	zero,8(r2)
   13088:	12400315 	stw	r9,12(r2)
   1308c:	10000415 	stw	zero,16(r2)
   13090:	10000515 	stw	zero,20(r2)
   13094:	10000615 	stw	zero,24(r2)
   13098:	10001705 	stb	zero,92(r2)
   1309c:	10001745 	stb	zero,93(r2)
   130a0:	10001785 	stb	zero,94(r2)
   130a4:	100017c5 	stb	zero,95(r2)
   130a8:	10001805 	stb	zero,96(r2)
   130ac:	10001845 	stb	zero,97(r2)
   130b0:	10001885 	stb	zero,98(r2)
   130b4:	100018c5 	stb	zero,99(r2)
   130b8:	10800715 	stw	r2,28(r2)
   130bc:	12000815 	stw	r8,32(r2)
   130c0:	11c00915 	stw	r7,36(r2)
   130c4:	11800a15 	stw	r6,40(r2)
   130c8:	11400b15 	stw	r5,44(r2)
   130cc:	00800044 	movi	r2,1
   130d0:	20800e15 	stw	r2,56(r4)
   130d4:	f800283a 	ret

000130d8 <__sfmoreglue>:
   130d8:	defffc04 	addi	sp,sp,-16
   130dc:	dc400115 	stw	r17,4(sp)
   130e0:	2c7fffc4 	addi	r17,r5,-1
   130e4:	8c401a24 	muli	r17,r17,104
   130e8:	dc800215 	stw	r18,8(sp)
   130ec:	2825883a 	mov	r18,r5
   130f0:	89401d04 	addi	r5,r17,116
   130f4:	dc000015 	stw	r16,0(sp)
   130f8:	dfc00315 	stw	ra,12(sp)
   130fc:	000cc800 	call	cc80 <_malloc_r>
   13100:	1021883a 	mov	r16,r2
   13104:	10000726 	beq	r2,zero,13124 <__sfmoreglue+0x4c>
   13108:	11000304 	addi	r4,r2,12
   1310c:	10000015 	stw	zero,0(r2)
   13110:	14800115 	stw	r18,4(r2)
   13114:	11000215 	stw	r4,8(r2)
   13118:	89801a04 	addi	r6,r17,104
   1311c:	000b883a 	mov	r5,zero
   13120:	0014efc0 	call	14efc <memset>
   13124:	8005883a 	mov	r2,r16
   13128:	dfc00317 	ldw	ra,12(sp)
   1312c:	dc800217 	ldw	r18,8(sp)
   13130:	dc400117 	ldw	r17,4(sp)
   13134:	dc000017 	ldw	r16,0(sp)
   13138:	dec00404 	addi	sp,sp,16
   1313c:	f800283a 	ret

00013140 <__sfp>:
   13140:	defffb04 	addi	sp,sp,-20
   13144:	008000b4 	movhi	r2,2
   13148:	dc000015 	stw	r16,0(sp)
   1314c:	140ea917 	ldw	r16,15012(r2)
   13150:	dc400115 	stw	r17,4(sp)
   13154:	dfc00415 	stw	ra,16(sp)
   13158:	80800e17 	ldw	r2,56(r16)
   1315c:	dcc00315 	stw	r19,12(sp)
   13160:	dc800215 	stw	r18,8(sp)
   13164:	2023883a 	mov	r17,r4
   13168:	10003126 	beq	r2,zero,13230 <__sfp+0xf0>
   1316c:	8100ba17 	ldw	r4,744(r16)
   13170:	8140b917 	ldw	r5,740(r16)
   13174:	04c00104 	movi	r19,4
   13178:	8400b804 	addi	r16,r16,736
   1317c:	297fffc4 	addi	r5,r5,-1
   13180:	2800050e 	bge	r5,zero,13198 <__sfp+0x58>
   13184:	00002406 	br	13218 <__sfp+0xd8>
   13188:	297fffc4 	addi	r5,r5,-1
   1318c:	28bfffd8 	cmpnei	r2,r5,-1
   13190:	21001a04 	addi	r4,r4,104
   13194:	10002026 	beq	r2,zero,13218 <__sfp+0xd8>
   13198:	2080030f 	ldh	r2,12(r4)
   1319c:	103ffa1e 	bne	r2,zero,13188 <__sfp+0x48>
   131a0:	00bffff4 	movhi	r2,65535
   131a4:	10800044 	addi	r2,r2,1
   131a8:	20001915 	stw	zero,100(r4)
   131ac:	20000015 	stw	zero,0(r4)
   131b0:	20000115 	stw	zero,4(r4)
   131b4:	20000215 	stw	zero,8(r4)
   131b8:	20800315 	stw	r2,12(r4)
   131bc:	20000415 	stw	zero,16(r4)
   131c0:	20000515 	stw	zero,20(r4)
   131c4:	20000615 	stw	zero,24(r4)
   131c8:	20001705 	stb	zero,92(r4)
   131cc:	20001745 	stb	zero,93(r4)
   131d0:	20001785 	stb	zero,94(r4)
   131d4:	200017c5 	stb	zero,95(r4)
   131d8:	20001805 	stb	zero,96(r4)
   131dc:	20001845 	stb	zero,97(r4)
   131e0:	20001885 	stb	zero,98(r4)
   131e4:	200018c5 	stb	zero,99(r4)
   131e8:	20000c15 	stw	zero,48(r4)
   131ec:	20000d15 	stw	zero,52(r4)
   131f0:	20001115 	stw	zero,68(r4)
   131f4:	20001215 	stw	zero,72(r4)
   131f8:	2005883a 	mov	r2,r4
   131fc:	dfc00417 	ldw	ra,16(sp)
   13200:	dcc00317 	ldw	r19,12(sp)
   13204:	dc800217 	ldw	r18,8(sp)
   13208:	dc400117 	ldw	r17,4(sp)
   1320c:	dc000017 	ldw	r16,0(sp)
   13210:	dec00504 	addi	sp,sp,20
   13214:	f800283a 	ret
   13218:	80800017 	ldw	r2,0(r16)
   1321c:	10000726 	beq	r2,zero,1323c <__sfp+0xfc>
   13220:	11000217 	ldw	r4,8(r2)
   13224:	11400117 	ldw	r5,4(r2)
   13228:	1021883a 	mov	r16,r2
   1322c:	003fd306 	br	1317c <__sfp+0x3c>
   13230:	8009883a 	mov	r4,r16
   13234:	0012f700 	call	12f70 <__sinit.part.0>
   13238:	003fcc06 	br	1316c <__sfp+0x2c>
   1323c:	01406b04 	movi	r5,428
   13240:	8809883a 	mov	r4,r17
   13244:	000cc800 	call	cc80 <_malloc_r>
   13248:	1025883a 	mov	r18,r2
   1324c:	10000c26 	beq	r2,zero,13280 <__sfp+0x140>
   13250:	11000304 	addi	r4,r2,12
   13254:	11000215 	stw	r4,8(r2)
   13258:	000b883a 	mov	r5,zero
   1325c:	10000015 	stw	zero,0(r2)
   13260:	14c00115 	stw	r19,4(r2)
   13264:	01806804 	movi	r6,416
   13268:	0014efc0 	call	14efc <memset>
   1326c:	1009883a 	mov	r4,r2
   13270:	84800015 	stw	r18,0(r16)
   13274:	014000c4 	movi	r5,3
   13278:	9021883a 	mov	r16,r18
   1327c:	003fc606 	br	13198 <__sfp+0x58>
   13280:	80000015 	stw	zero,0(r16)
   13284:	00800304 	movi	r2,12
   13288:	88800015 	stw	r2,0(r17)
   1328c:	0009883a 	mov	r4,zero
   13290:	003fd906 	br	131f8 <__sfp+0xb8>

00013294 <_cleanup>:
   13294:	008000b4 	movhi	r2,2
   13298:	110ea917 	ldw	r4,15012(r2)
   1329c:	014000b4 	movhi	r5,2
   132a0:	29602504 	addi	r5,r5,-32620
   132a4:	0013c241 	jmpi	13c24 <_fwalk_reent>

000132a8 <__sinit>:
   132a8:	20800e17 	ldw	r2,56(r4)
   132ac:	10000126 	beq	r2,zero,132b4 <__sinit+0xc>
   132b0:	f800283a 	ret
   132b4:	0012f701 	jmpi	12f70 <__sinit.part.0>

000132b8 <__sfp_lock_acquire>:
   132b8:	f800283a 	ret

000132bc <__sfp_lock_release>:
   132bc:	f800283a 	ret

000132c0 <__sinit_lock_acquire>:
   132c0:	f800283a 	ret

000132c4 <__sinit_lock_release>:
   132c4:	f800283a 	ret

000132c8 <__fp_lock_all>:
   132c8:	008000b4 	movhi	r2,2
   132cc:	110eaa17 	ldw	r4,15016(r2)
   132d0:	01400074 	movhi	r5,1
   132d4:	294bd504 	addi	r5,r5,12116
   132d8:	0013b8c1 	jmpi	13b8c <_fwalk>

000132dc <__fp_unlock_all>:
   132dc:	008000b4 	movhi	r2,2
   132e0:	110eaa17 	ldw	r4,15016(r2)
   132e4:	01400074 	movhi	r5,1
   132e8:	294bda04 	addi	r5,r5,12136
   132ec:	0013b8c1 	jmpi	13b8c <_fwalk>

000132f0 <_malloc_trim_r>:
   132f0:	defffb04 	addi	sp,sp,-20
   132f4:	dcc00315 	stw	r19,12(sp)
   132f8:	04c000b4 	movhi	r19,2
   132fc:	dc800215 	stw	r18,8(sp)
   13300:	dc400115 	stw	r17,4(sp)
   13304:	dc000015 	stw	r16,0(sp)
   13308:	dfc00415 	stw	ra,16(sp)
   1330c:	2821883a 	mov	r16,r5
   13310:	9cc89104 	addi	r19,r19,8772
   13314:	2025883a 	mov	r18,r4
   13318:	001a1f40 	call	1a1f4 <__malloc_lock>
   1331c:	98800217 	ldw	r2,8(r19)
   13320:	14400117 	ldw	r17,4(r2)
   13324:	00bfff04 	movi	r2,-4
   13328:	88a2703a 	and	r17,r17,r2
   1332c:	8c21c83a 	sub	r16,r17,r16
   13330:	8403fbc4 	addi	r16,r16,4079
   13334:	8020d33a 	srli	r16,r16,12
   13338:	843fffc4 	addi	r16,r16,-1
   1333c:	8020933a 	slli	r16,r16,12
   13340:	80840008 	cmpgei	r2,r16,4096
   13344:	10000626 	beq	r2,zero,13360 <_malloc_trim_r+0x70>
   13348:	000b883a 	mov	r5,zero
   1334c:	9009883a 	mov	r4,r18
   13350:	000d6a40 	call	d6a4 <_sbrk_r>
   13354:	98c00217 	ldw	r3,8(r19)
   13358:	1c47883a 	add	r3,r3,r17
   1335c:	10c00a26 	beq	r2,r3,13388 <_malloc_trim_r+0x98>
   13360:	9009883a 	mov	r4,r18
   13364:	001a2180 	call	1a218 <__malloc_unlock>
   13368:	0005883a 	mov	r2,zero
   1336c:	dfc00417 	ldw	ra,16(sp)
   13370:	dcc00317 	ldw	r19,12(sp)
   13374:	dc800217 	ldw	r18,8(sp)
   13378:	dc400117 	ldw	r17,4(sp)
   1337c:	dc000017 	ldw	r16,0(sp)
   13380:	dec00504 	addi	sp,sp,20
   13384:	f800283a 	ret
   13388:	040bc83a 	sub	r5,zero,r16
   1338c:	9009883a 	mov	r4,r18
   13390:	000d6a40 	call	d6a4 <_sbrk_r>
   13394:	10bfffd8 	cmpnei	r2,r2,-1
   13398:	10000d26 	beq	r2,zero,133d0 <_malloc_trim_r+0xe0>
   1339c:	008000b4 	movhi	r2,2
   133a0:	10960517 	ldw	r2,22548(r2)
   133a4:	98c00217 	ldw	r3,8(r19)
   133a8:	8c23c83a 	sub	r17,r17,r16
   133ac:	8c400054 	ori	r17,r17,1
   133b0:	1421c83a 	sub	r16,r2,r16
   133b4:	1c400115 	stw	r17,4(r3)
   133b8:	008000b4 	movhi	r2,2
   133bc:	9009883a 	mov	r4,r18
   133c0:	14160515 	stw	r16,22548(r2)
   133c4:	001a2180 	call	1a218 <__malloc_unlock>
   133c8:	00800044 	movi	r2,1
   133cc:	003fe706 	br	1336c <_malloc_trim_r+0x7c>
   133d0:	000b883a 	mov	r5,zero
   133d4:	9009883a 	mov	r4,r18
   133d8:	000d6a40 	call	d6a4 <_sbrk_r>
   133dc:	99000217 	ldw	r4,8(r19)
   133e0:	1107c83a 	sub	r3,r2,r4
   133e4:	19400410 	cmplti	r5,r3,16
   133e8:	283fdd1e 	bne	r5,zero,13360 <_malloc_trim_r+0x70>
   133ec:	014000b4 	movhi	r5,2
   133f0:	294eab17 	ldw	r5,15020(r5)
   133f4:	18c00054 	ori	r3,r3,1
   133f8:	20c00115 	stw	r3,4(r4)
   133fc:	1145c83a 	sub	r2,r2,r5
   13400:	014000b4 	movhi	r5,2
   13404:	28960515 	stw	r2,22548(r5)
   13408:	003fd506 	br	13360 <_malloc_trim_r+0x70>

0001340c <_free_r>:
   1340c:	28004f26 	beq	r5,zero,1354c <_free_r+0x140>
   13410:	defffd04 	addi	sp,sp,-12
   13414:	dc400115 	stw	r17,4(sp)
   13418:	dc000015 	stw	r16,0(sp)
   1341c:	2023883a 	mov	r17,r4
   13420:	2821883a 	mov	r16,r5
   13424:	dfc00215 	stw	ra,8(sp)
   13428:	001a1f40 	call	1a1f4 <__malloc_lock>
   1342c:	81ffff17 	ldw	r7,-4(r16)
   13430:	00bfff84 	movi	r2,-2
   13434:	80fffe04 	addi	r3,r16,-8
   13438:	3884703a 	and	r2,r7,r2
   1343c:	010000b4 	movhi	r4,2
   13440:	188d883a 	add	r6,r3,r2
   13444:	21089104 	addi	r4,r4,8772
   13448:	31400117 	ldw	r5,4(r6)
   1344c:	22000217 	ldw	r8,8(r4)
   13450:	027fff04 	movi	r9,-4
   13454:	2a4a703a 	and	r5,r5,r9
   13458:	41806426 	beq	r8,r6,135ec <_free_r+0x1e0>
   1345c:	31400115 	stw	r5,4(r6)
   13460:	39c0004c 	andi	r7,r7,1
   13464:	3151883a 	add	r8,r6,r5
   13468:	3800281e 	bne	r7,zero,1350c <_free_r+0x100>
   1346c:	82bffe17 	ldw	r10,-8(r16)
   13470:	42000117 	ldw	r8,4(r8)
   13474:	01c000b4 	movhi	r7,2
   13478:	1a87c83a 	sub	r3,r3,r10
   1347c:	1a400217 	ldw	r9,8(r3)
   13480:	39c89304 	addi	r7,r7,8780
   13484:	1285883a 	add	r2,r2,r10
   13488:	4200004c 	andi	r8,r8,1
   1348c:	49c04c26 	beq	r9,r7,135c0 <_free_r+0x1b4>
   13490:	1a800317 	ldw	r10,12(r3)
   13494:	4a800315 	stw	r10,12(r9)
   13498:	52400215 	stw	r9,8(r10)
   1349c:	40007126 	beq	r8,zero,13664 <_free_r+0x258>
   134a0:	11400054 	ori	r5,r2,1
   134a4:	19400115 	stw	r5,4(r3)
   134a8:	30800015 	stw	r2,0(r6)
   134ac:	11408028 	cmpgeui	r5,r2,512
   134b0:	28002c1e 	bne	r5,zero,13564 <_free_r+0x158>
   134b4:	100ad0fa 	srli	r5,r2,3
   134b8:	100cd17a 	srli	r6,r2,5
   134bc:	00800044 	movi	r2,1
   134c0:	29400044 	addi	r5,r5,1
   134c4:	280a90fa 	slli	r5,r5,3
   134c8:	21c00117 	ldw	r7,4(r4)
   134cc:	1184983a 	sll	r2,r2,r6
   134d0:	214b883a 	add	r5,r4,r5
   134d4:	29800017 	ldw	r6,0(r5)
   134d8:	11c4b03a 	or	r2,r2,r7
   134dc:	29fffe04 	addi	r7,r5,-8
   134e0:	19c00315 	stw	r7,12(r3)
   134e4:	19800215 	stw	r6,8(r3)
   134e8:	20800115 	stw	r2,4(r4)
   134ec:	28c00015 	stw	r3,0(r5)
   134f0:	30c00315 	stw	r3,12(r6)
   134f4:	8809883a 	mov	r4,r17
   134f8:	dfc00217 	ldw	ra,8(sp)
   134fc:	dc400117 	ldw	r17,4(sp)
   13500:	dc000017 	ldw	r16,0(sp)
   13504:	dec00304 	addi	sp,sp,12
   13508:	001a2181 	jmpi	1a218 <__malloc_unlock>
   1350c:	41c00117 	ldw	r7,4(r8)
   13510:	39c0004c 	andi	r7,r7,1
   13514:	38000e1e 	bne	r7,zero,13550 <_free_r+0x144>
   13518:	01c000b4 	movhi	r7,2
   1351c:	1145883a 	add	r2,r2,r5
   13520:	39c89304 	addi	r7,r7,8780
   13524:	31400217 	ldw	r5,8(r6)
   13528:	12400054 	ori	r9,r2,1
   1352c:	1891883a 	add	r8,r3,r2
   13530:	29c05226 	beq	r5,r7,1367c <_free_r+0x270>
   13534:	31800317 	ldw	r6,12(r6)
   13538:	29800315 	stw	r6,12(r5)
   1353c:	31400215 	stw	r5,8(r6)
   13540:	1a400115 	stw	r9,4(r3)
   13544:	40800015 	stw	r2,0(r8)
   13548:	003fd806 	br	134ac <_free_r+0xa0>
   1354c:	f800283a 	ret
   13550:	11400054 	ori	r5,r2,1
   13554:	817fff15 	stw	r5,-4(r16)
   13558:	30800015 	stw	r2,0(r6)
   1355c:	11408028 	cmpgeui	r5,r2,512
   13560:	283fd426 	beq	r5,zero,134b4 <_free_r+0xa8>
   13564:	100ad27a 	srli	r5,r2,9
   13568:	29800168 	cmpgeui	r6,r5,5
   1356c:	3000341e 	bne	r6,zero,13640 <_free_r+0x234>
   13570:	100ad1ba 	srli	r5,r2,6
   13574:	29800e44 	addi	r6,r5,57
   13578:	300c90fa 	slli	r6,r6,3
   1357c:	29c00e04 	addi	r7,r5,56
   13580:	218d883a 	add	r6,r4,r6
   13584:	31400017 	ldw	r5,0(r6)
   13588:	31bffe04 	addi	r6,r6,-8
   1358c:	31404226 	beq	r6,r5,13698 <_free_r+0x28c>
   13590:	01ffff04 	movi	r7,-4
   13594:	29000117 	ldw	r4,4(r5)
   13598:	21c8703a 	and	r4,r4,r7
   1359c:	1100022e 	bgeu	r2,r4,135a8 <_free_r+0x19c>
   135a0:	29400217 	ldw	r5,8(r5)
   135a4:	317ffb1e 	bne	r6,r5,13594 <_free_r+0x188>
   135a8:	29800317 	ldw	r6,12(r5)
   135ac:	19800315 	stw	r6,12(r3)
   135b0:	19400215 	stw	r5,8(r3)
   135b4:	30c00215 	stw	r3,8(r6)
   135b8:	28c00315 	stw	r3,12(r5)
   135bc:	003fcd06 	br	134f4 <_free_r+0xe8>
   135c0:	40004d1e 	bne	r8,zero,136f8 <_free_r+0x2ec>
   135c4:	31000317 	ldw	r4,12(r6)
   135c8:	31800217 	ldw	r6,8(r6)
   135cc:	2885883a 	add	r2,r5,r2
   135d0:	11400054 	ori	r5,r2,1
   135d4:	31000315 	stw	r4,12(r6)
   135d8:	21800215 	stw	r6,8(r4)
   135dc:	19400115 	stw	r5,4(r3)
   135e0:	1887883a 	add	r3,r3,r2
   135e4:	18800015 	stw	r2,0(r3)
   135e8:	003fc206 	br	134f4 <_free_r+0xe8>
   135ec:	39c0004c 	andi	r7,r7,1
   135f0:	1145883a 	add	r2,r2,r5
   135f4:	3800071e 	bne	r7,zero,13614 <_free_r+0x208>
   135f8:	81fffe17 	ldw	r7,-8(r16)
   135fc:	19c7c83a 	sub	r3,r3,r7
   13600:	19400317 	ldw	r5,12(r3)
   13604:	19800217 	ldw	r6,8(r3)
   13608:	11c5883a 	add	r2,r2,r7
   1360c:	31400315 	stw	r5,12(r6)
   13610:	29800215 	stw	r6,8(r5)
   13614:	014000b4 	movhi	r5,2
   13618:	11800054 	ori	r6,r2,1
   1361c:	294eac17 	ldw	r5,15024(r5)
   13620:	19800115 	stw	r6,4(r3)
   13624:	20c00215 	stw	r3,8(r4)
   13628:	117fb236 	bltu	r2,r5,134f4 <_free_r+0xe8>
   1362c:	008000b4 	movhi	r2,2
   13630:	1155ed17 	ldw	r5,22452(r2)
   13634:	8809883a 	mov	r4,r17
   13638:	00132f00 	call	132f0 <_malloc_trim_r>
   1363c:	003fad06 	br	134f4 <_free_r+0xe8>
   13640:	29800568 	cmpgeui	r6,r5,21
   13644:	30000926 	beq	r6,zero,1366c <_free_r+0x260>
   13648:	29801568 	cmpgeui	r6,r5,85
   1364c:	3000191e 	bne	r6,zero,136b4 <_free_r+0x2a8>
   13650:	100ad33a 	srli	r5,r2,12
   13654:	29801bc4 	addi	r6,r5,111
   13658:	300c90fa 	slli	r6,r6,3
   1365c:	29c01b84 	addi	r7,r5,110
   13660:	003fc706 	br	13580 <_free_r+0x174>
   13664:	1145883a 	add	r2,r2,r5
   13668:	003fae06 	br	13524 <_free_r+0x118>
   1366c:	29801704 	addi	r6,r5,92
   13670:	300c90fa 	slli	r6,r6,3
   13674:	29c016c4 	addi	r7,r5,91
   13678:	003fc106 	br	13580 <_free_r+0x174>
   1367c:	20c00515 	stw	r3,20(r4)
   13680:	20c00415 	stw	r3,16(r4)
   13684:	19c00315 	stw	r7,12(r3)
   13688:	19c00215 	stw	r7,8(r3)
   1368c:	1a400115 	stw	r9,4(r3)
   13690:	40800015 	stw	r2,0(r8)
   13694:	003f9706 	br	134f4 <_free_r+0xe8>
   13698:	380fd0ba 	srai	r7,r7,2
   1369c:	00800044 	movi	r2,1
   136a0:	22000117 	ldw	r8,4(r4)
   136a4:	11ce983a 	sll	r7,r2,r7
   136a8:	3a0eb03a 	or	r7,r7,r8
   136ac:	21c00115 	stw	r7,4(r4)
   136b0:	003fbe06 	br	135ac <_free_r+0x1a0>
   136b4:	29805568 	cmpgeui	r6,r5,341
   136b8:	3000051e 	bne	r6,zero,136d0 <_free_r+0x2c4>
   136bc:	100ad3fa 	srli	r5,r2,15
   136c0:	29801e04 	addi	r6,r5,120
   136c4:	300c90fa 	slli	r6,r6,3
   136c8:	29c01dc4 	addi	r7,r5,119
   136cc:	003fac06 	br	13580 <_free_r+0x174>
   136d0:	29415568 	cmpgeui	r5,r5,1365
   136d4:	2800051e 	bne	r5,zero,136ec <_free_r+0x2e0>
   136d8:	100ad4ba 	srli	r5,r2,18
   136dc:	29801f44 	addi	r6,r5,125
   136e0:	300c90fa 	slli	r6,r6,3
   136e4:	29c01f04 	addi	r7,r5,124
   136e8:	003fa506 	br	13580 <_free_r+0x174>
   136ec:	0180fe04 	movi	r6,1016
   136f0:	01c01f84 	movi	r7,126
   136f4:	003fa206 	br	13580 <_free_r+0x174>
   136f8:	11000054 	ori	r4,r2,1
   136fc:	19000115 	stw	r4,4(r3)
   13700:	30800015 	stw	r2,0(r6)
   13704:	003f7b06 	br	134f4 <_free_r+0xe8>

00013708 <__sfvwrite_r>:
   13708:	30800217 	ldw	r2,8(r6)
   1370c:	10009a26 	beq	r2,zero,13978 <__sfvwrite_r+0x270>
   13710:	2a00030b 	ldhu	r8,12(r5)
   13714:	defff404 	addi	sp,sp,-48
   13718:	dd400715 	stw	r21,28(sp)
   1371c:	dd000615 	stw	r20,24(sp)
   13720:	dc000215 	stw	r16,8(sp)
   13724:	dfc00b15 	stw	ra,44(sp)
   13728:	df000a15 	stw	fp,40(sp)
   1372c:	ddc00915 	stw	r23,36(sp)
   13730:	dd800815 	stw	r22,32(sp)
   13734:	dcc00515 	stw	r19,20(sp)
   13738:	dc800415 	stw	r18,16(sp)
   1373c:	dc400315 	stw	r17,12(sp)
   13740:	4080020c 	andi	r2,r8,8
   13744:	3029883a 	mov	r20,r6
   13748:	202b883a 	mov	r21,r4
   1374c:	2821883a 	mov	r16,r5
   13750:	10002626 	beq	r2,zero,137ec <__sfvwrite_r+0xe4>
   13754:	28800417 	ldw	r2,16(r5)
   13758:	10002426 	beq	r2,zero,137ec <__sfvwrite_r+0xe4>
   1375c:	4080008c 	andi	r2,r8,2
   13760:	a4400017 	ldw	r17,0(r20)
   13764:	10002926 	beq	r2,zero,1380c <__sfvwrite_r+0x104>
   13768:	05a00034 	movhi	r22,32768
   1376c:	0027883a 	mov	r19,zero
   13770:	0025883a 	mov	r18,zero
   13774:	b5bf0004 	addi	r22,r22,-1024
   13778:	980d883a 	mov	r6,r19
   1377c:	a809883a 	mov	r4,r21
   13780:	90007026 	beq	r18,zero,13944 <__sfvwrite_r+0x23c>
   13784:	900f883a 	mov	r7,r18
   13788:	b480012e 	bgeu	r22,r18,13790 <__sfvwrite_r+0x88>
   1378c:	b00f883a 	mov	r7,r22
   13790:	80800917 	ldw	r2,36(r16)
   13794:	81400717 	ldw	r5,28(r16)
   13798:	103ee83a 	callr	r2
   1379c:	0080710e 	bge	zero,r2,13964 <__sfvwrite_r+0x25c>
   137a0:	a0c00217 	ldw	r3,8(r20)
   137a4:	98a7883a 	add	r19,r19,r2
   137a8:	90a5c83a 	sub	r18,r18,r2
   137ac:	1885c83a 	sub	r2,r3,r2
   137b0:	a0800215 	stw	r2,8(r20)
   137b4:	103ff01e 	bne	r2,zero,13778 <__sfvwrite_r+0x70>
   137b8:	0005883a 	mov	r2,zero
   137bc:	dfc00b17 	ldw	ra,44(sp)
   137c0:	df000a17 	ldw	fp,40(sp)
   137c4:	ddc00917 	ldw	r23,36(sp)
   137c8:	dd800817 	ldw	r22,32(sp)
   137cc:	dd400717 	ldw	r21,28(sp)
   137d0:	dd000617 	ldw	r20,24(sp)
   137d4:	dcc00517 	ldw	r19,20(sp)
   137d8:	dc800417 	ldw	r18,16(sp)
   137dc:	dc400317 	ldw	r17,12(sp)
   137e0:	dc000217 	ldw	r16,8(sp)
   137e4:	dec00c04 	addi	sp,sp,48
   137e8:	f800283a 	ret
   137ec:	800b883a 	mov	r5,r16
   137f0:	a809883a 	mov	r4,r21
   137f4:	00111a00 	call	111a0 <__swsetup_r>
   137f8:	1000e21e 	bne	r2,zero,13b84 <__sfvwrite_r+0x47c>
   137fc:	8200030b 	ldhu	r8,12(r16)
   13800:	a4400017 	ldw	r17,0(r20)
   13804:	4080008c 	andi	r2,r8,2
   13808:	103fd71e 	bne	r2,zero,13768 <__sfvwrite_r+0x60>
   1380c:	4080004c 	andi	r2,r8,1
   13810:	10005b1e 	bne	r2,zero,13980 <__sfvwrite_r+0x278>
   13814:	00a00034 	movhi	r2,32768
   13818:	10bfff84 	addi	r2,r2,-2
   1381c:	00e00034 	movhi	r3,32768
   13820:	d8800015 	stw	r2,0(sp)
   13824:	18bfffc4 	addi	r2,r3,-1
   13828:	0039883a 	mov	fp,zero
   1382c:	0025883a 	mov	r18,zero
   13830:	d8800115 	stw	r2,4(sp)
   13834:	90003f26 	beq	r18,zero,13934 <__sfvwrite_r+0x22c>
   13838:	4080800c 	andi	r2,r8,512
   1383c:	81000017 	ldw	r4,0(r16)
   13840:	85c00217 	ldw	r23,8(r16)
   13844:	10008726 	beq	r2,zero,13a64 <__sfvwrite_r+0x35c>
   13848:	b82d883a 	mov	r22,r23
   1384c:	95c0aa36 	bltu	r18,r23,13af8 <__sfvwrite_r+0x3f0>
   13850:	4081200c 	andi	r2,r8,1152
   13854:	10002526 	beq	r2,zero,138ec <__sfvwrite_r+0x1e4>
   13858:	80800517 	ldw	r2,20(r16)
   1385c:	81400417 	ldw	r5,16(r16)
   13860:	108000e4 	muli	r2,r2,3
   13864:	216dc83a 	sub	r22,r4,r5
   13868:	b1000044 	addi	r4,r22,1
   1386c:	1026d7fa 	srli	r19,r2,31
   13870:	2489883a 	add	r4,r4,r18
   13874:	9885883a 	add	r2,r19,r2
   13878:	1027d07a 	srai	r19,r2,1
   1387c:	980d883a 	mov	r6,r19
   13880:	9900022e 	bgeu	r19,r4,1388c <__sfvwrite_r+0x184>
   13884:	2027883a 	mov	r19,r4
   13888:	200d883a 	mov	r6,r4
   1388c:	4201000c 	andi	r8,r8,1024
   13890:	4000ac26 	beq	r8,zero,13b44 <__sfvwrite_r+0x43c>
   13894:	300b883a 	mov	r5,r6
   13898:	a809883a 	mov	r4,r21
   1389c:	000cc800 	call	cc80 <_malloc_r>
   138a0:	1000b426 	beq	r2,zero,13b74 <__sfvwrite_r+0x46c>
   138a4:	81400417 	ldw	r5,16(r16)
   138a8:	b00d883a 	mov	r6,r22
   138ac:	1009883a 	mov	r4,r2
   138b0:	000d4600 	call	d460 <memcpy>
   138b4:	100f883a 	mov	r7,r2
   138b8:	8080030b 	ldhu	r2,12(r16)
   138bc:	00fedfc4 	movi	r3,-1153
   138c0:	10c4703a 	and	r2,r2,r3
   138c4:	10802014 	ori	r2,r2,128
   138c8:	8080030d 	sth	r2,12(r16)
   138cc:	3d89883a 	add	r4,r7,r22
   138d0:	9d85c83a 	sub	r2,r19,r22
   138d4:	81c00415 	stw	r7,16(r16)
   138d8:	81000015 	stw	r4,0(r16)
   138dc:	84c00515 	stw	r19,20(r16)
   138e0:	902f883a 	mov	r23,r18
   138e4:	80800215 	stw	r2,8(r16)
   138e8:	902d883a 	mov	r22,r18
   138ec:	b00d883a 	mov	r6,r22
   138f0:	e00b883a 	mov	r5,fp
   138f4:	0014dd00 	call	14dd0 <memmove>
   138f8:	81000217 	ldw	r4,8(r16)
   138fc:	80800017 	ldw	r2,0(r16)
   13900:	9027883a 	mov	r19,r18
   13904:	25c9c83a 	sub	r4,r4,r23
   13908:	1585883a 	add	r2,r2,r22
   1390c:	81000215 	stw	r4,8(r16)
   13910:	80800015 	stw	r2,0(r16)
   13914:	0025883a 	mov	r18,zero
   13918:	a1800217 	ldw	r6,8(r20)
   1391c:	e4f9883a 	add	fp,fp,r19
   13920:	34e7c83a 	sub	r19,r6,r19
   13924:	a4c00215 	stw	r19,8(r20)
   13928:	983fa326 	beq	r19,zero,137b8 <__sfvwrite_r+0xb0>
   1392c:	8200030b 	ldhu	r8,12(r16)
   13930:	903fc11e 	bne	r18,zero,13838 <__sfvwrite_r+0x130>
   13934:	8f000017 	ldw	fp,0(r17)
   13938:	8c800117 	ldw	r18,4(r17)
   1393c:	8c400204 	addi	r17,r17,8
   13940:	003fbc06 	br	13834 <__sfvwrite_r+0x12c>
   13944:	8cc00017 	ldw	r19,0(r17)
   13948:	8c800117 	ldw	r18,4(r17)
   1394c:	8c400204 	addi	r17,r17,8
   13950:	003f8906 	br	13778 <__sfvwrite_r+0x70>
   13954:	800b883a 	mov	r5,r16
   13958:	a809883a 	mov	r4,r21
   1395c:	0012e700 	call	12e70 <_fflush_r>
   13960:	10002226 	beq	r2,zero,139ec <__sfvwrite_r+0x2e4>
   13964:	8080030b 	ldhu	r2,12(r16)
   13968:	10801014 	ori	r2,r2,64
   1396c:	8080030d 	sth	r2,12(r16)
   13970:	00bfffc4 	movi	r2,-1
   13974:	003f9106 	br	137bc <__sfvwrite_r+0xb4>
   13978:	0005883a 	mov	r2,zero
   1397c:	f800283a 	ret
   13980:	002d883a 	mov	r22,zero
   13984:	0039883a 	mov	fp,zero
   13988:	0005883a 	mov	r2,zero
   1398c:	002f883a 	mov	r23,zero
   13990:	b0001d26 	beq	r22,zero,13a08 <__sfvwrite_r+0x300>
   13994:	10002026 	beq	r2,zero,13a18 <__sfvwrite_r+0x310>
   13998:	e027883a 	mov	r19,fp
   1399c:	b4c0012e 	bgeu	r22,r19,139a4 <__sfvwrite_r+0x29c>
   139a0:	b027883a 	mov	r19,r22
   139a4:	81000017 	ldw	r4,0(r16)
   139a8:	80800417 	ldw	r2,16(r16)
   139ac:	81c00517 	ldw	r7,20(r16)
   139b0:	1100032e 	bgeu	r2,r4,139c0 <__sfvwrite_r+0x2b8>
   139b4:	84800217 	ldw	r18,8(r16)
   139b8:	3ca5883a 	add	r18,r7,r18
   139bc:	94c01e16 	blt	r18,r19,13a38 <__sfvwrite_r+0x330>
   139c0:	99c05016 	blt	r19,r7,13b04 <__sfvwrite_r+0x3fc>
   139c4:	80800917 	ldw	r2,36(r16)
   139c8:	81400717 	ldw	r5,28(r16)
   139cc:	b80d883a 	mov	r6,r23
   139d0:	a809883a 	mov	r4,r21
   139d4:	103ee83a 	callr	r2
   139d8:	1025883a 	mov	r18,r2
   139dc:	00bfe10e 	bge	zero,r2,13964 <__sfvwrite_r+0x25c>
   139e0:	e4b9c83a 	sub	fp,fp,r18
   139e4:	e03fdb26 	beq	fp,zero,13954 <__sfvwrite_r+0x24c>
   139e8:	00800044 	movi	r2,1
   139ec:	a1800217 	ldw	r6,8(r20)
   139f0:	bcaf883a 	add	r23,r23,r18
   139f4:	b4adc83a 	sub	r22,r22,r18
   139f8:	34a5c83a 	sub	r18,r6,r18
   139fc:	a4800215 	stw	r18,8(r20)
   13a00:	903f6d26 	beq	r18,zero,137b8 <__sfvwrite_r+0xb0>
   13a04:	b03fe31e 	bne	r22,zero,13994 <__sfvwrite_r+0x28c>
   13a08:	8d800117 	ldw	r22,4(r17)
   13a0c:	8dc00017 	ldw	r23,0(r17)
   13a10:	8c400204 	addi	r17,r17,8
   13a14:	b03ffc26 	beq	r22,zero,13a08 <__sfvwrite_r+0x300>
   13a18:	b00d883a 	mov	r6,r22
   13a1c:	01400284 	movi	r5,10
   13a20:	b809883a 	mov	r4,r23
   13a24:	0014d000 	call	14d00 <memchr>
   13a28:	10004326 	beq	r2,zero,13b38 <__sfvwrite_r+0x430>
   13a2c:	10800044 	addi	r2,r2,1
   13a30:	15f9c83a 	sub	fp,r2,r23
   13a34:	003fd806 	br	13998 <__sfvwrite_r+0x290>
   13a38:	b80b883a 	mov	r5,r23
   13a3c:	900d883a 	mov	r6,r18
   13a40:	0014dd00 	call	14dd0 <memmove>
   13a44:	80800017 	ldw	r2,0(r16)
   13a48:	800b883a 	mov	r5,r16
   13a4c:	a809883a 	mov	r4,r21
   13a50:	1485883a 	add	r2,r2,r18
   13a54:	80800015 	stw	r2,0(r16)
   13a58:	0012e700 	call	12e70 <_fflush_r>
   13a5c:	103fe026 	beq	r2,zero,139e0 <__sfvwrite_r+0x2d8>
   13a60:	003fc006 	br	13964 <__sfvwrite_r+0x25c>
   13a64:	80800417 	ldw	r2,16(r16)
   13a68:	11001136 	bltu	r2,r4,13ab0 <__sfvwrite_r+0x3a8>
   13a6c:	84c00517 	ldw	r19,20(r16)
   13a70:	94c00f36 	bltu	r18,r19,13ab0 <__sfvwrite_r+0x3a8>
   13a74:	d8800017 	ldw	r2,0(sp)
   13a78:	14802d2e 	bgeu	r2,r18,13b30 <__sfvwrite_r+0x428>
   13a7c:	d9000117 	ldw	r4,4(sp)
   13a80:	980b883a 	mov	r5,r19
   13a84:	00092480 	call	9248 <__divsi3>
   13a88:	14cf383a 	mul	r7,r2,r19
   13a8c:	82000917 	ldw	r8,36(r16)
   13a90:	81400717 	ldw	r5,28(r16)
   13a94:	e00d883a 	mov	r6,fp
   13a98:	a809883a 	mov	r4,r21
   13a9c:	403ee83a 	callr	r8
   13aa0:	1027883a 	mov	r19,r2
   13aa4:	00bfaf0e 	bge	zero,r2,13964 <__sfvwrite_r+0x25c>
   13aa8:	94e5c83a 	sub	r18,r18,r19
   13aac:	003f9a06 	br	13918 <__sfvwrite_r+0x210>
   13ab0:	b827883a 	mov	r19,r23
   13ab4:	95c0012e 	bgeu	r18,r23,13abc <__sfvwrite_r+0x3b4>
   13ab8:	9027883a 	mov	r19,r18
   13abc:	980d883a 	mov	r6,r19
   13ac0:	e00b883a 	mov	r5,fp
   13ac4:	0014dd00 	call	14dd0 <memmove>
   13ac8:	80800217 	ldw	r2,8(r16)
   13acc:	81000017 	ldw	r4,0(r16)
   13ad0:	14c5c83a 	sub	r2,r2,r19
   13ad4:	24c9883a 	add	r4,r4,r19
   13ad8:	80800215 	stw	r2,8(r16)
   13adc:	81000015 	stw	r4,0(r16)
   13ae0:	103ff11e 	bne	r2,zero,13aa8 <__sfvwrite_r+0x3a0>
   13ae4:	800b883a 	mov	r5,r16
   13ae8:	a809883a 	mov	r4,r21
   13aec:	0012e700 	call	12e70 <_fflush_r>
   13af0:	103fed26 	beq	r2,zero,13aa8 <__sfvwrite_r+0x3a0>
   13af4:	003f9b06 	br	13964 <__sfvwrite_r+0x25c>
   13af8:	902f883a 	mov	r23,r18
   13afc:	902d883a 	mov	r22,r18
   13b00:	003f7a06 	br	138ec <__sfvwrite_r+0x1e4>
   13b04:	980d883a 	mov	r6,r19
   13b08:	b80b883a 	mov	r5,r23
   13b0c:	0014dd00 	call	14dd0 <memmove>
   13b10:	80c00217 	ldw	r3,8(r16)
   13b14:	80800017 	ldw	r2,0(r16)
   13b18:	9825883a 	mov	r18,r19
   13b1c:	1cc7c83a 	sub	r3,r3,r19
   13b20:	14c5883a 	add	r2,r2,r19
   13b24:	80c00215 	stw	r3,8(r16)
   13b28:	80800015 	stw	r2,0(r16)
   13b2c:	003fac06 	br	139e0 <__sfvwrite_r+0x2d8>
   13b30:	9009883a 	mov	r4,r18
   13b34:	003fd206 	br	13a80 <__sfvwrite_r+0x378>
   13b38:	b4c00044 	addi	r19,r22,1
   13b3c:	9839883a 	mov	fp,r19
   13b40:	003f9606 	br	1399c <__sfvwrite_r+0x294>
   13b44:	a809883a 	mov	r4,r21
   13b48:	001614c0 	call	1614c <_realloc_r>
   13b4c:	100f883a 	mov	r7,r2
   13b50:	103f5e1e 	bne	r2,zero,138cc <__sfvwrite_r+0x1c4>
   13b54:	81400417 	ldw	r5,16(r16)
   13b58:	a809883a 	mov	r4,r21
   13b5c:	001340c0 	call	1340c <_free_r>
   13b60:	8080030b 	ldhu	r2,12(r16)
   13b64:	00c00304 	movi	r3,12
   13b68:	a8c00015 	stw	r3,0(r21)
   13b6c:	10bfdfcc 	andi	r2,r2,65407
   13b70:	003f7d06 	br	13968 <__sfvwrite_r+0x260>
   13b74:	00c00304 	movi	r3,12
   13b78:	8080030b 	ldhu	r2,12(r16)
   13b7c:	a8c00015 	stw	r3,0(r21)
   13b80:	003f7906 	br	13968 <__sfvwrite_r+0x260>
   13b84:	00bfffc4 	movi	r2,-1
   13b88:	003f0c06 	br	137bc <__sfvwrite_r+0xb4>

00013b8c <_fwalk>:
   13b8c:	defffa04 	addi	sp,sp,-24
   13b90:	dd000415 	stw	r20,16(sp)
   13b94:	dcc00315 	stw	r19,12(sp)
   13b98:	dc800215 	stw	r18,8(sp)
   13b9c:	dfc00515 	stw	ra,20(sp)
   13ba0:	dc400115 	stw	r17,4(sp)
   13ba4:	dc000015 	stw	r16,0(sp)
   13ba8:	2827883a 	mov	r19,r5
   13bac:	2480b804 	addi	r18,r4,736
   13bb0:	0029883a 	mov	r20,zero
   13bb4:	94400117 	ldw	r17,4(r18)
   13bb8:	94000217 	ldw	r16,8(r18)
   13bbc:	8c7fffc4 	addi	r17,r17,-1
   13bc0:	88000d16 	blt	r17,zero,13bf8 <_fwalk+0x6c>
   13bc4:	8080030b 	ldhu	r2,12(r16)
   13bc8:	8c7fffc4 	addi	r17,r17,-1
   13bcc:	108000b0 	cmpltui	r2,r2,2
   13bd0:	1000061e 	bne	r2,zero,13bec <_fwalk+0x60>
   13bd4:	8080038f 	ldh	r2,14(r16)
   13bd8:	8009883a 	mov	r4,r16
   13bdc:	10bfffe0 	cmpeqi	r2,r2,-1
   13be0:	1000021e 	bne	r2,zero,13bec <_fwalk+0x60>
   13be4:	983ee83a 	callr	r19
   13be8:	a0a8b03a 	or	r20,r20,r2
   13bec:	88bfffd8 	cmpnei	r2,r17,-1
   13bf0:	84001a04 	addi	r16,r16,104
   13bf4:	103ff31e 	bne	r2,zero,13bc4 <_fwalk+0x38>
   13bf8:	94800017 	ldw	r18,0(r18)
   13bfc:	903fed1e 	bne	r18,zero,13bb4 <_fwalk+0x28>
   13c00:	a005883a 	mov	r2,r20
   13c04:	dfc00517 	ldw	ra,20(sp)
   13c08:	dd000417 	ldw	r20,16(sp)
   13c0c:	dcc00317 	ldw	r19,12(sp)
   13c10:	dc800217 	ldw	r18,8(sp)
   13c14:	dc400117 	ldw	r17,4(sp)
   13c18:	dc000017 	ldw	r16,0(sp)
   13c1c:	dec00604 	addi	sp,sp,24
   13c20:	f800283a 	ret

00013c24 <_fwalk_reent>:
   13c24:	defff904 	addi	sp,sp,-28
   13c28:	dd400515 	stw	r21,20(sp)
   13c2c:	dd000415 	stw	r20,16(sp)
   13c30:	dcc00315 	stw	r19,12(sp)
   13c34:	dc800215 	stw	r18,8(sp)
   13c38:	dfc00615 	stw	ra,24(sp)
   13c3c:	dc400115 	stw	r17,4(sp)
   13c40:	dc000015 	stw	r16,0(sp)
   13c44:	202b883a 	mov	r21,r4
   13c48:	2827883a 	mov	r19,r5
   13c4c:	2480b804 	addi	r18,r4,736
   13c50:	0029883a 	mov	r20,zero
   13c54:	94400117 	ldw	r17,4(r18)
   13c58:	94000217 	ldw	r16,8(r18)
   13c5c:	8c7fffc4 	addi	r17,r17,-1
   13c60:	88000e16 	blt	r17,zero,13c9c <_fwalk_reent+0x78>
   13c64:	8080030b 	ldhu	r2,12(r16)
   13c68:	8c7fffc4 	addi	r17,r17,-1
   13c6c:	108000b0 	cmpltui	r2,r2,2
   13c70:	1000071e 	bne	r2,zero,13c90 <_fwalk_reent+0x6c>
   13c74:	8080038f 	ldh	r2,14(r16)
   13c78:	800b883a 	mov	r5,r16
   13c7c:	a809883a 	mov	r4,r21
   13c80:	10bfffe0 	cmpeqi	r2,r2,-1
   13c84:	1000021e 	bne	r2,zero,13c90 <_fwalk_reent+0x6c>
   13c88:	983ee83a 	callr	r19
   13c8c:	a0a8b03a 	or	r20,r20,r2
   13c90:	88bfffd8 	cmpnei	r2,r17,-1
   13c94:	84001a04 	addi	r16,r16,104
   13c98:	103ff21e 	bne	r2,zero,13c64 <_fwalk_reent+0x40>
   13c9c:	94800017 	ldw	r18,0(r18)
   13ca0:	903fec1e 	bne	r18,zero,13c54 <_fwalk_reent+0x30>
   13ca4:	a005883a 	mov	r2,r20
   13ca8:	dfc00617 	ldw	ra,24(sp)
   13cac:	dd400517 	ldw	r21,20(sp)
   13cb0:	dd000417 	ldw	r20,16(sp)
   13cb4:	dcc00317 	ldw	r19,12(sp)
   13cb8:	dc800217 	ldw	r18,8(sp)
   13cbc:	dc400117 	ldw	r17,4(sp)
   13cc0:	dc000017 	ldw	r16,0(sp)
   13cc4:	dec00704 	addi	sp,sp,28
   13cc8:	f800283a 	ret

00013ccc <rshift>:
   13ccc:	2817d17a 	srai	r11,r5,5
   13cd0:	21c00417 	ldw	r7,16(r4)
   13cd4:	59c0220e 	bge	r11,r7,13d60 <rshift+0x94>
   13cd8:	381090ba 	slli	r8,r7,2
   13cdc:	580490ba 	slli	r2,r11,2
   13ce0:	22400504 	addi	r9,r4,20
   13ce4:	298007cc 	andi	r6,r5,31
   13ce8:	4a11883a 	add	r8,r9,r8
   13cec:	4885883a 	add	r2,r9,r2
   13cf0:	30001e26 	beq	r6,zero,13d6c <rshift+0xa0>
   13cf4:	10c00017 	ldw	r3,0(r2)
   13cf8:	03000804 	movi	r12,32
   13cfc:	10800104 	addi	r2,r2,4
   13d00:	198ad83a 	srl	r5,r3,r6
   13d04:	6199c83a 	sub	r12,r12,r6
   13d08:	1200122e 	bgeu	r2,r8,13d54 <rshift+0x88>
   13d0c:	4815883a 	mov	r10,r9
   13d10:	10c00017 	ldw	r3,0(r2)
   13d14:	52800104 	addi	r10,r10,4
   13d18:	10800104 	addi	r2,r2,4
   13d1c:	1b06983a 	sll	r3,r3,r12
   13d20:	1946b03a 	or	r3,r3,r5
   13d24:	50ffff15 	stw	r3,-4(r10)
   13d28:	10ffff17 	ldw	r3,-4(r2)
   13d2c:	198ad83a 	srl	r5,r3,r6
   13d30:	123ff736 	bltu	r2,r8,13d10 <rshift+0x44>
   13d34:	3acfc83a 	sub	r7,r7,r11
   13d38:	380e90ba 	slli	r7,r7,2
   13d3c:	39ffff04 	addi	r7,r7,-4
   13d40:	49cf883a 	add	r7,r9,r7
   13d44:	39400015 	stw	r5,0(r7)
   13d48:	28001226 	beq	r5,zero,13d94 <rshift+0xc8>
   13d4c:	39c00104 	addi	r7,r7,4
   13d50:	00001006 	br	13d94 <rshift+0xc8>
   13d54:	21400515 	stw	r5,20(r4)
   13d58:	480f883a 	mov	r7,r9
   13d5c:	283ffb1e 	bne	r5,zero,13d4c <rshift+0x80>
   13d60:	20000415 	stw	zero,16(r4)
   13d64:	20000515 	stw	zero,20(r4)
   13d68:	f800283a 	ret
   13d6c:	4807883a 	mov	r3,r9
   13d70:	123ffb2e 	bgeu	r2,r8,13d60 <rshift+0x94>
   13d74:	11400017 	ldw	r5,0(r2)
   13d78:	10800104 	addi	r2,r2,4
   13d7c:	18c00104 	addi	r3,r3,4
   13d80:	197fff15 	stw	r5,-4(r3)
   13d84:	123ffb36 	bltu	r2,r8,13d74 <rshift+0xa8>
   13d88:	3acfc83a 	sub	r7,r7,r11
   13d8c:	380e90ba 	slli	r7,r7,2
   13d90:	49cf883a 	add	r7,r9,r7
   13d94:	3a45c83a 	sub	r2,r7,r9
   13d98:	1005d0ba 	srai	r2,r2,2
   13d9c:	20800415 	stw	r2,16(r4)
   13da0:	3a7ff026 	beq	r7,r9,13d64 <rshift+0x98>
   13da4:	f800283a 	ret

00013da8 <__gethex>:
   13da8:	deffed04 	addi	sp,sp,-76
   13dac:	008000b4 	movhi	r2,2
   13db0:	dc800b15 	stw	r18,44(sp)
   13db4:	14864c17 	ldw	r18,6448(r2)
   13db8:	dd000d15 	stw	r20,52(sp)
   13dbc:	2029883a 	mov	r20,r4
   13dc0:	9009883a 	mov	r4,r18
   13dc4:	ddc01015 	stw	r23,64(sp)
   13dc8:	dd800f15 	stw	r22,60(sp)
   13dcc:	dc400a15 	stw	r17,40(sp)
   13dd0:	282d883a 	mov	r22,r5
   13dd4:	dd000115 	stw	r20,4(sp)
   13dd8:	d9c00815 	stw	r7,32(sp)
   13ddc:	dfc01215 	stw	ra,72(sp)
   13de0:	df001115 	stw	fp,68(sp)
   13de4:	dd400e15 	stw	r21,56(sp)
   13de8:	dcc00c15 	stw	r19,48(sp)
   13dec:	dc000915 	stw	r16,36(sp)
   13df0:	3023883a 	mov	r17,r6
   13df4:	000d6fc0 	call	d6fc <strlen>
   13df8:	b1c00017 	ldw	r7,0(r22)
   13dfc:	9087883a 	add	r3,r18,r2
   13e00:	1029883a 	mov	r20,r2
   13e04:	39000083 	ldbu	r4,2(r7)
   13e08:	1dffffc3 	ldbu	r23,-1(r3)
   13e0c:	20800c18 	cmpnei	r2,r4,48
   13e10:	1001651e 	bne	r2,zero,143a8 <__gethex+0x600>
   13e14:	017fff84 	movi	r5,-2
   13e18:	38c000c4 	addi	r3,r7,3
   13e1c:	29cbc83a 	sub	r5,r5,r7
   13e20:	19000003 	ldbu	r4,0(r3)
   13e24:	28eb883a 	add	r21,r5,r3
   13e28:	1827883a 	mov	r19,r3
   13e2c:	20800c20 	cmpeqi	r2,r4,48
   13e30:	18c00044 	addi	r3,r3,1
   13e34:	103ffa1e 	bne	r2,zero,13e20 <__gethex+0x78>
   13e38:	008000b4 	movhi	r2,2
   13e3c:	2085883a 	add	r2,r4,r2
   13e40:	10860b03 	ldbu	r2,6188(r2)
   13e44:	1000191e 	bne	r2,zero,13eac <__gethex+0x104>
   13e48:	a00d883a 	mov	r6,r20
   13e4c:	900b883a 	mov	r5,r18
   13e50:	9809883a 	mov	r4,r19
   13e54:	00168800 	call	16880 <strncmp>
   13e58:	1000e41e 	bne	r2,zero,141ec <__gethex+0x444>
   13e5c:	9d21883a 	add	r16,r19,r20
   13e60:	80c00003 	ldbu	r3,0(r16)
   13e64:	008000b4 	movhi	r2,2
   13e68:	19003fcc 	andi	r4,r3,255
   13e6c:	2085883a 	add	r2,r4,r2
   13e70:	10860b03 	ldbu	r2,6188(r2)
   13e74:	1000df26 	beq	r2,zero,141f4 <__gethex+0x44c>
   13e78:	21000c18 	cmpnei	r4,r4,48
   13e7c:	8027883a 	mov	r19,r16
   13e80:	2000071e 	bne	r4,zero,13ea0 <__gethex+0xf8>
   13e84:	98800043 	ldbu	r2,1(r19)
   13e88:	9cc00044 	addi	r19,r19,1
   13e8c:	10c00c20 	cmpeqi	r3,r2,48
   13e90:	183ffc1e 	bne	r3,zero,13e84 <__gethex+0xdc>
   13e94:	00c000b4 	movhi	r3,2
   13e98:	10c7883a 	add	r3,r2,r3
   13e9c:	18860b03 	ldbu	r2,6188(r3)
   13ea0:	1013003a 	cmpeq	r9,r2,zero
   13ea4:	05400044 	movi	r21,1
   13ea8:	00000606 	br	13ec4 <__gethex+0x11c>
   13eac:	98c00003 	ldbu	r3,0(r19)
   13eb0:	008000b4 	movhi	r2,2
   13eb4:	0013883a 	mov	r9,zero
   13eb8:	1885883a 	add	r2,r3,r2
   13ebc:	10860b03 	ldbu	r2,6188(r2)
   13ec0:	0021883a 	mov	r16,zero
   13ec4:	9839883a 	mov	fp,r19
   13ec8:	10000626 	beq	r2,zero,13ee4 <__gethex+0x13c>
   13ecc:	e0800043 	ldbu	r2,1(fp)
   13ed0:	00c000b4 	movhi	r3,2
   13ed4:	e7000044 	addi	fp,fp,1
   13ed8:	10c7883a 	add	r3,r2,r3
   13edc:	18860b03 	ldbu	r2,6188(r3)
   13ee0:	103ffa1e 	bne	r2,zero,13ecc <__gethex+0x124>
   13ee4:	a00d883a 	mov	r6,r20
   13ee8:	900b883a 	mov	r5,r18
   13eec:	e009883a 	mov	r4,fp
   13ef0:	da400015 	stw	r9,0(sp)
   13ef4:	00168800 	call	16880 <strncmp>
   13ef8:	da400017 	ldw	r9,0(sp)
   13efc:	1000031e 	bne	r2,zero,13f0c <__gethex+0x164>
   13f00:	80012c26 	beq	r16,zero,143b4 <__gethex+0x60c>
   13f04:	e0800003 	ldbu	r2,0(fp)
   13f08:	00000206 	br	13f14 <__gethex+0x16c>
   13f0c:	e0800003 	ldbu	r2,0(fp)
   13f10:	8000de26 	beq	r16,zero,1428c <__gethex+0x4e4>
   13f14:	8721c83a 	sub	r16,r16,fp
   13f18:	800690ba 	slli	r3,r16,2
   13f1c:	d8c00015 	stw	r3,0(sp)
   13f20:	108037cc 	andi	r2,r2,223
   13f24:	10801418 	cmpnei	r2,r2,80
   13f28:	e021883a 	mov	r16,fp
   13f2c:	10006726 	beq	r2,zero,140cc <__gethex+0x324>
   13f30:	b7000015 	stw	fp,0(r22)
   13f34:	4800821e 	bne	r9,zero,14140 <__gethex+0x398>
   13f38:	84c7c83a 	sub	r3,r16,r19
   13f3c:	18ffffc4 	addi	r3,r3,-1
   13f40:	18800210 	cmplti	r2,r3,8
   13f44:	000b883a 	mov	r5,zero
   13f48:	1000041e 	bne	r2,zero,13f5c <__gethex+0x1b4>
   13f4c:	1807d07a 	srai	r3,r3,1
   13f50:	29400044 	addi	r5,r5,1
   13f54:	18800208 	cmpgei	r2,r3,8
   13f58:	103ffc1e 	bne	r2,zero,13f4c <__gethex+0x1a4>
   13f5c:	d9000117 	ldw	r4,4(sp)
   13f60:	0014fec0 	call	14fec <_Balloc>
   13f64:	102b883a 	mov	r21,r2
   13f68:	1001b226 	beq	r2,zero,14634 <__gethex+0x88c>
   13f6c:	15800504 	addi	r22,r2,20
   13f70:	b015883a 	mov	r10,r22
   13f74:	9c01572e 	bgeu	r19,r16,144d4 <__gethex+0x72c>
   13f78:	03000044 	movi	r12,1
   13f7c:	0039883a 	mov	fp,zero
   13f80:	0013883a 	mov	r9,zero
   13f84:	bdc03fcc 	andi	r23,r23,255
   13f88:	6519c83a 	sub	r12,r12,r20
   13f8c:	837fffc3 	ldbu	r13,-1(r16)
   13f90:	83bfffc4 	addi	r14,r16,-1
   13f94:	6dc02f26 	beq	r13,r23,14054 <__gethex+0x2ac>
   13f98:	e0800820 	cmpeqi	r2,fp,32
   13f9c:	1000421e 	bne	r2,zero,140a8 <__gethex+0x300>
   13fa0:	e005883a 	mov	r2,fp
   13fa4:	e7000104 	addi	fp,fp,4
   13fa8:	020000b4 	movhi	r8,2
   13fac:	6a11883a 	add	r8,r13,r8
   13fb0:	40c60b03 	ldbu	r3,6188(r8)
   13fb4:	7021883a 	mov	r16,r14
   13fb8:	18c003cc 	andi	r3,r3,15
   13fbc:	1886983a 	sll	r3,r3,r2
   13fc0:	48d2b03a 	or	r9,r9,r3
   13fc4:	9c3ff136 	bltu	r19,r16,13f8c <__gethex+0x1e4>
   13fc8:	50800104 	addi	r2,r10,4
   13fcc:	1585c83a 	sub	r2,r2,r22
   13fd0:	1005d0ba 	srai	r2,r2,2
   13fd4:	52400015 	stw	r9,0(r10)
   13fd8:	4809883a 	mov	r4,r9
   13fdc:	1020917a 	slli	r16,r2,5
   13fe0:	a8800415 	stw	r2,16(r21)
   13fe4:	00153240 	call	15324 <__hi0bits>
   13fe8:	8c800017 	ldw	r18,0(r17)
   13fec:	8085c83a 	sub	r2,r16,r2
   13ff0:	90808c16 	blt	r18,r2,14224 <__gethex+0x47c>
   13ff4:	1480e016 	blt	r2,r18,14378 <__gethex+0x5d0>
   13ff8:	002f883a 	mov	r23,zero
   13ffc:	88800217 	ldw	r2,8(r17)
   14000:	d8c00017 	ldw	r3,0(sp)
   14004:	10c12a16 	blt	r2,r3,144b0 <__gethex+0x708>
   14008:	88800117 	ldw	r2,4(r17)
   1400c:	d8c00017 	ldw	r3,0(sp)
   14010:	18805a0e 	bge	r3,r2,1417c <__gethex+0x3d4>
   14014:	10e7c83a 	sub	r19,r2,r3
   14018:	9c80a016 	blt	r19,r18,1429c <__gethex+0x4f4>
   1401c:	88c00317 	ldw	r3,12(r17)
   14020:	190000a0 	cmpeqi	r4,r3,2
   14024:	20014e1e 	bne	r4,zero,14560 <__gethex+0x7b8>
   14028:	190000e0 	cmpeqi	r4,r3,3
   1402c:	2001491e 	bne	r4,zero,14554 <__gethex+0x7ac>
   14030:	18c00058 	cmpnei	r3,r3,1
   14034:	18013626 	beq	r3,zero,14510 <__gethex+0x768>
   14038:	d9000117 	ldw	r4,4(sp)
   1403c:	a80b883a 	mov	r5,r21
   14040:	04001404 	movi	r16,80
   14044:	00150900 	call	15090 <_Bfree>
   14048:	d8801317 	ldw	r2,76(sp)
   1404c:	10000015 	stw	zero,0(r2)
   14050:	00005906 	br	141b8 <__gethex+0x410>
   14054:	7309883a 	add	r4,r14,r12
   14058:	24ffcf36 	bltu	r4,r19,13f98 <__gethex+0x1f0>
   1405c:	a00d883a 	mov	r6,r20
   14060:	900b883a 	mov	r5,r18
   14064:	db000715 	stw	r12,28(sp)
   14068:	db400615 	stw	r13,24(sp)
   1406c:	db800515 	stw	r14,20(sp)
   14070:	da400415 	stw	r9,16(sp)
   14074:	da800315 	stw	r10,12(sp)
   14078:	d9000215 	stw	r4,8(sp)
   1407c:	00168800 	call	16880 <strncmp>
   14080:	d9000217 	ldw	r4,8(sp)
   14084:	da800317 	ldw	r10,12(sp)
   14088:	da400417 	ldw	r9,16(sp)
   1408c:	db800517 	ldw	r14,20(sp)
   14090:	db400617 	ldw	r13,24(sp)
   14094:	db000717 	ldw	r12,28(sp)
   14098:	103fbf1e 	bne	r2,zero,13f98 <__gethex+0x1f0>
   1409c:	2021883a 	mov	r16,r4
   140a0:	9c3fba36 	bltu	r19,r16,13f8c <__gethex+0x1e4>
   140a4:	003fc806 	br	13fc8 <__gethex+0x220>
   140a8:	52400015 	stw	r9,0(r10)
   140ac:	837fffc3 	ldbu	r13,-1(r16)
   140b0:	52800104 	addi	r10,r10,4
   140b4:	0005883a 	mov	r2,zero
   140b8:	07000104 	movi	fp,4
   140bc:	0013883a 	mov	r9,zero
   140c0:	003fb906 	br	13fa8 <__gethex+0x200>
   140c4:	d8000015 	stw	zero,0(sp)
   140c8:	02400044 	movi	r9,1
   140cc:	80800043 	ldbu	r2,1(r16)
   140d0:	10c00ae0 	cmpeqi	r3,r2,43
   140d4:	1800a61e 	bne	r3,zero,14370 <__gethex+0x5c8>
   140d8:	10c00b60 	cmpeqi	r3,r2,45
   140dc:	18004d1e 	bne	r3,zero,14214 <__gethex+0x46c>
   140e0:	87000044 	addi	fp,r16,1
   140e4:	000b883a 	mov	r5,zero
   140e8:	00c000b4 	movhi	r3,2
   140ec:	10c7883a 	add	r3,r2,r3
   140f0:	18860b03 	ldbu	r2,6188(r3)
   140f4:	10ffffc4 	addi	r3,r2,-1
   140f8:	18c03fcc 	andi	r3,r3,255
   140fc:	18c00668 	cmpgeui	r3,r3,25
   14100:	1800421e 	bne	r3,zero,1420c <__gethex+0x464>
   14104:	e1000043 	ldbu	r4,1(fp)
   14108:	00c000b4 	movhi	r3,2
   1410c:	10803fcc 	andi	r2,r2,255
   14110:	20c7883a 	add	r3,r4,r3
   14114:	18c60b03 	ldbu	r3,6188(r3)
   14118:	10bffc04 	addi	r2,r2,-16
   1411c:	e7000044 	addi	fp,fp,1
   14120:	1800131e 	bne	r3,zero,14170 <__gethex+0x3c8>
   14124:	28000126 	beq	r5,zero,1412c <__gethex+0x384>
   14128:	0085c83a 	sub	r2,zero,r2
   1412c:	d8c00017 	ldw	r3,0(sp)
   14130:	b7000015 	stw	fp,0(r22)
   14134:	1885883a 	add	r2,r3,r2
   14138:	d8800015 	stw	r2,0(sp)
   1413c:	483f7e26 	beq	r9,zero,13f38 <__gethex+0x190>
   14140:	a8005426 	beq	r21,zero,14294 <__gethex+0x4ec>
   14144:	0021883a 	mov	r16,zero
   14148:	00001b06 	br	141b8 <__gethex+0x410>
   1414c:	e2800043 	ldbu	r10,1(fp)
   14150:	108002a4 	muli	r2,r2,10
   14154:	010000b4 	movhi	r4,2
   14158:	5109883a 	add	r4,r10,r4
   1415c:	10c5883a 	add	r2,r2,r3
   14160:	20c60b03 	ldbu	r3,6188(r4)
   14164:	e7000044 	addi	fp,fp,1
   14168:	10bffc04 	addi	r2,r2,-16
   1416c:	183fed26 	beq	r3,zero,14124 <__gethex+0x37c>
   14170:	19000690 	cmplti	r4,r3,26
   14174:	203ff51e 	bne	r4,zero,1414c <__gethex+0x3a4>
   14178:	003fea06 	br	14124 <__gethex+0x37c>
   1417c:	04000044 	movi	r16,1
   14180:	b8000826 	beq	r23,zero,141a4 <__gethex+0x3fc>
   14184:	88800317 	ldw	r2,12(r17)
   14188:	10c000a0 	cmpeqi	r3,r2,2
   1418c:	1800581e 	bne	r3,zero,142f0 <__gethex+0x548>
   14190:	10c000e0 	cmpeqi	r3,r2,3
   14194:	18005a1e 	bne	r3,zero,14300 <__gethex+0x558>
   14198:	10800058 	cmpnei	r2,r2,1
   1419c:	10006d26 	beq	r2,zero,14354 <__gethex+0x5ac>
   141a0:	84000414 	ori	r16,r16,16
   141a4:	d8801317 	ldw	r2,76(sp)
   141a8:	d8c00017 	ldw	r3,0(sp)
   141ac:	15400015 	stw	r21,0(r2)
   141b0:	d8800817 	ldw	r2,32(sp)
   141b4:	10c00015 	stw	r3,0(r2)
   141b8:	8005883a 	mov	r2,r16
   141bc:	dfc01217 	ldw	ra,72(sp)
   141c0:	df001117 	ldw	fp,68(sp)
   141c4:	ddc01017 	ldw	r23,64(sp)
   141c8:	dd800f17 	ldw	r22,60(sp)
   141cc:	dd400e17 	ldw	r21,56(sp)
   141d0:	dd000d17 	ldw	r20,52(sp)
   141d4:	dcc00c17 	ldw	r19,48(sp)
   141d8:	dc800b17 	ldw	r18,44(sp)
   141dc:	dc400a17 	ldw	r17,40(sp)
   141e0:	dc000917 	ldw	r16,36(sp)
   141e4:	dec01304 	addi	sp,sp,76
   141e8:	f800283a 	ret
   141ec:	98c00003 	ldbu	r3,0(r19)
   141f0:	9821883a 	mov	r16,r19
   141f4:	18c037cc 	andi	r3,r3,223
   141f8:	18c01420 	cmpeqi	r3,r3,80
   141fc:	183fb11e 	bne	r3,zero,140c4 <__gethex+0x31c>
   14200:	b4000015 	stw	r16,0(r22)
   14204:	a83fcf1e 	bne	r21,zero,14144 <__gethex+0x39c>
   14208:	00002206 	br	14294 <__gethex+0x4ec>
   1420c:	8039883a 	mov	fp,r16
   14210:	003f4706 	br	13f30 <__gethex+0x188>
   14214:	01400044 	movi	r5,1
   14218:	80800083 	ldbu	r2,2(r16)
   1421c:	87000084 	addi	fp,r16,2
   14220:	003fb106 	br	140e8 <__gethex+0x340>
   14224:	14a1c83a 	sub	r16,r2,r18
   14228:	800b883a 	mov	r5,r16
   1422c:	a809883a 	mov	r4,r21
   14230:	00160ec0 	call	160ec <__any_on>
   14234:	102f883a 	mov	r23,r2
   14238:	10000d26 	beq	r2,zero,14270 <__gethex+0x4c8>
   1423c:	813fffc4 	addi	r4,r16,-1
   14240:	2007d17a 	srai	r3,r4,5
   14244:	214007cc 	andi	r5,r4,31
   14248:	00800044 	movi	r2,1
   1424c:	180690ba 	slli	r3,r3,2
   14250:	1144983a 	sll	r2,r2,r5
   14254:	b0c7883a 	add	r3,r22,r3
   14258:	18c00017 	ldw	r3,0(r3)
   1425c:	10c4703a 	and	r2,r2,r3
   14260:	10009e26 	beq	r2,zero,144dc <__gethex+0x734>
   14264:	21000090 	cmplti	r4,r4,2
   14268:	2000a326 	beq	r4,zero,144f8 <__gethex+0x750>
   1426c:	05c00084 	movi	r23,2
   14270:	800b883a 	mov	r5,r16
   14274:	a809883a 	mov	r4,r21
   14278:	0013ccc0 	call	13ccc <rshift>
   1427c:	d8800017 	ldw	r2,0(sp)
   14280:	1405883a 	add	r2,r2,r16
   14284:	d8800015 	stw	r2,0(sp)
   14288:	003f5c06 	br	13ffc <__gethex+0x254>
   1428c:	d8000015 	stw	zero,0(sp)
   14290:	003f2306 	br	13f20 <__gethex+0x178>
   14294:	04000184 	movi	r16,6
   14298:	003fc706 	br	141b8 <__gethex+0x410>
   1429c:	9c3fffc4 	addi	r16,r19,-1
   142a0:	b8008a1e 	bne	r23,zero,144cc <__gethex+0x724>
   142a4:	80008f1e 	bne	r16,zero,144e4 <__gethex+0x73c>
   142a8:	8007d17a 	srai	r3,r16,5
   142ac:	00800044 	movi	r2,1
   142b0:	840007cc 	andi	r16,r16,31
   142b4:	180690ba 	slli	r3,r3,2
   142b8:	1404983a 	sll	r2,r2,r16
   142bc:	b0c7883a 	add	r3,r22,r3
   142c0:	18c00017 	ldw	r3,0(r3)
   142c4:	10c4703a 	and	r2,r2,r3
   142c8:	10000126 	beq	r2,zero,142d0 <__gethex+0x528>
   142cc:	bdc00094 	ori	r23,r23,2
   142d0:	980b883a 	mov	r5,r19
   142d4:	a809883a 	mov	r4,r21
   142d8:	0013ccc0 	call	13ccc <rshift>
   142dc:	88800117 	ldw	r2,4(r17)
   142e0:	94e5c83a 	sub	r18,r18,r19
   142e4:	04000084 	movi	r16,2
   142e8:	d8800015 	stw	r2,0(sp)
   142ec:	003fa406 	br	14180 <__gethex+0x3d8>
   142f0:	d8c01417 	ldw	r3,80(sp)
   142f4:	00800044 	movi	r2,1
   142f8:	10c5c83a 	sub	r2,r2,r3
   142fc:	d8801415 	stw	r2,80(sp)
   14300:	d8801417 	ldw	r2,80(sp)
   14304:	103fa626 	beq	r2,zero,141a0 <__gethex+0x3f8>
   14308:	adc00417 	ldw	r23,16(r21)
   1430c:	b005883a 	mov	r2,r22
   14310:	b83890ba 	slli	fp,r23,2
   14314:	b70b883a 	add	r5,r22,fp
   14318:	00000306 	br	14328 <__gethex+0x580>
   1431c:	10800104 	addi	r2,r2,4
   14320:	103fff15 	stw	zero,-4(r2)
   14324:	1140332e 	bgeu	r2,r5,143f4 <__gethex+0x64c>
   14328:	10c00017 	ldw	r3,0(r2)
   1432c:	193fffe0 	cmpeqi	r4,r3,-1
   14330:	203ffa1e 	bne	r4,zero,1431c <__gethex+0x574>
   14334:	18c00044 	addi	r3,r3,1
   14338:	10c00015 	stw	r3,0(r2)
   1433c:	840000a0 	cmpeqi	r16,r16,2
   14340:	80008a1e 	bne	r16,zero,1456c <__gethex+0x7c4>
   14344:	948007cc 	andi	r18,r18,31
   14348:	9000a01e 	bne	r18,zero,145cc <__gethex+0x824>
   1434c:	04000844 	movi	r16,33
   14350:	003f9406 	br	141a4 <__gethex+0x3fc>
   14354:	b880008c 	andi	r2,r23,2
   14358:	103f9126 	beq	r2,zero,141a0 <__gethex+0x3f8>
   1435c:	b0800017 	ldw	r2,0(r22)
   14360:	b884b03a 	or	r2,r23,r2
   14364:	1080004c 	andi	r2,r2,1
   14368:	103fe71e 	bne	r2,zero,14308 <__gethex+0x560>
   1436c:	003f8c06 	br	141a0 <__gethex+0x3f8>
   14370:	000b883a 	mov	r5,zero
   14374:	003fa806 	br	14218 <__gethex+0x470>
   14378:	d9000117 	ldw	r4,4(sp)
   1437c:	90a1c83a 	sub	r16,r18,r2
   14380:	a80b883a 	mov	r5,r21
   14384:	800d883a 	mov	r6,r16
   14388:	00158840 	call	15884 <__lshift>
   1438c:	102b883a 	mov	r21,r2
   14390:	d8800017 	ldw	r2,0(sp)
   14394:	ad800504 	addi	r22,r21,20
   14398:	002f883a 	mov	r23,zero
   1439c:	1405c83a 	sub	r2,r2,r16
   143a0:	d8800015 	stw	r2,0(sp)
   143a4:	003f1506 	br	13ffc <__gethex+0x254>
   143a8:	3cc00084 	addi	r19,r7,2
   143ac:	002b883a 	mov	r21,zero
   143b0:	003ea106 	br	13e38 <__gethex+0x90>
   143b4:	e521883a 	add	r16,fp,r20
   143b8:	80800003 	ldbu	r2,0(r16)
   143bc:	00c000b4 	movhi	r3,2
   143c0:	8039883a 	mov	fp,r16
   143c4:	11003fcc 	andi	r4,r2,255
   143c8:	20c7883a 	add	r3,r4,r3
   143cc:	18c60b03 	ldbu	r3,6188(r3)
   143d0:	183ecf26 	beq	r3,zero,13f10 <__gethex+0x168>
   143d4:	e0800043 	ldbu	r2,1(fp)
   143d8:	00c000b4 	movhi	r3,2
   143dc:	e7000044 	addi	fp,fp,1
   143e0:	11003fcc 	andi	r4,r2,255
   143e4:	20c7883a 	add	r3,r4,r3
   143e8:	18c60b03 	ldbu	r3,6188(r3)
   143ec:	183ff91e 	bne	r3,zero,143d4 <__gethex+0x62c>
   143f0:	003ec706 	br	13f10 <__gethex+0x168>
   143f4:	a8800217 	ldw	r2,8(r21)
   143f8:	b880610e 	bge	r23,r2,14580 <__gethex+0x7d8>
   143fc:	b805883a 	mov	r2,r23
   14400:	10c00144 	addi	r3,r2,5
   14404:	180690ba 	slli	r3,r3,2
   14408:	10800044 	addi	r2,r2,1
   1440c:	a8800415 	stw	r2,16(r21)
   14410:	a8c7883a 	add	r3,r21,r3
   14414:	01000044 	movi	r4,1
   14418:	19000015 	stw	r4,0(r3)
   1441c:	84000098 	cmpnei	r16,r16,2
   14420:	80005226 	beq	r16,zero,1456c <__gethex+0x7c4>
   14424:	b8bfc70e 	bge	r23,r2,14344 <__gethex+0x59c>
   14428:	0080730e 	bge	zero,r2,145f8 <__gethex+0x850>
   1442c:	100490ba 	slli	r2,r2,2
   14430:	a8c00517 	ldw	r3,20(r21)
   14434:	a9400604 	addi	r5,r21,24
   14438:	b085883a 	add	r2,r22,r2
   1443c:	1808d07a 	srli	r4,r3,1
   14440:	28806a2e 	bgeu	r5,r2,145ec <__gethex+0x844>
   14444:	b00d883a 	mov	r6,r22
   14448:	28c00017 	ldw	r3,0(r5)
   1444c:	31800104 	addi	r6,r6,4
   14450:	29400104 	addi	r5,r5,4
   14454:	180697fa 	slli	r3,r3,31
   14458:	1906b03a 	or	r3,r3,r4
   1445c:	30ffff15 	stw	r3,-4(r6)
   14460:	28ffff17 	ldw	r3,-4(r5)
   14464:	1808d07a 	srli	r4,r3,1
   14468:	28bff736 	bltu	r5,r2,14448 <__gethex+0x6a0>
   1446c:	1545c83a 	sub	r2,r2,r21
   14470:	10bff9c4 	addi	r2,r2,-25
   14474:	1004d0ba 	srli	r2,r2,2
   14478:	10800044 	addi	r2,r2,1
   1447c:	100490ba 	slli	r2,r2,2
   14480:	b085883a 	add	r2,r22,r2
   14484:	11000015 	stw	r4,0(r2)
   14488:	2000681e 	bne	r4,zero,1462c <__gethex+0x884>
   1448c:	1587c83a 	sub	r3,r2,r22
   14490:	1807d0ba 	srai	r3,r3,2
   14494:	a8c00415 	stw	r3,16(r21)
   14498:	15805826 	beq	r2,r22,145fc <__gethex+0x854>
   1449c:	d8c00017 	ldw	r3,0(sp)
   144a0:	88800217 	ldw	r2,8(r17)
   144a4:	18c00044 	addi	r3,r3,1
   144a8:	d8c00015 	stw	r3,0(sp)
   144ac:	10ffa70e 	bge	r2,r3,1434c <__gethex+0x5a4>
   144b0:	d9000117 	ldw	r4,4(sp)
   144b4:	a80b883a 	mov	r5,r21
   144b8:	040028c4 	movi	r16,163
   144bc:	00150900 	call	15090 <_Bfree>
   144c0:	d8801317 	ldw	r2,76(sp)
   144c4:	10000015 	stw	zero,0(r2)
   144c8:	003f3b06 	br	141b8 <__gethex+0x410>
   144cc:	05c00044 	movi	r23,1
   144d0:	003f7506 	br	142a8 <__gethex+0x500>
   144d4:	0013883a 	mov	r9,zero
   144d8:	003ebb06 	br	13fc8 <__gethex+0x220>
   144dc:	05c00044 	movi	r23,1
   144e0:	003f6306 	br	14270 <__gethex+0x4c8>
   144e4:	800b883a 	mov	r5,r16
   144e8:	a809883a 	mov	r4,r21
   144ec:	00160ec0 	call	160ec <__any_on>
   144f0:	102f883a 	mov	r23,r2
   144f4:	003f6c06 	br	142a8 <__gethex+0x500>
   144f8:	817fff84 	addi	r5,r16,-2
   144fc:	a809883a 	mov	r4,r21
   14500:	00160ec0 	call	160ec <__any_on>
   14504:	103f5926 	beq	r2,zero,1426c <__gethex+0x4c4>
   14508:	05c000c4 	movi	r23,3
   1450c:	003f5806 	br	14270 <__gethex+0x4c8>
   14510:	94fec91e 	bne	r18,r19,14038 <__gethex+0x290>
   14514:	90c00060 	cmpeqi	r3,r18,1
   14518:	1800051e 	bne	r3,zero,14530 <__gethex+0x788>
   1451c:	917fffc4 	addi	r5,r18,-1
   14520:	a809883a 	mov	r4,r21
   14524:	00160ec0 	call	160ec <__any_on>
   14528:	103ec326 	beq	r2,zero,14038 <__gethex+0x290>
   1452c:	88800117 	ldw	r2,4(r17)
   14530:	d8c00817 	ldw	r3,32(sp)
   14534:	04001884 	movi	r16,98
   14538:	18800015 	stw	r2,0(r3)
   1453c:	00800044 	movi	r2,1
   14540:	a8800415 	stw	r2,16(r21)
   14544:	b0800015 	stw	r2,0(r22)
   14548:	d8801317 	ldw	r2,76(sp)
   1454c:	15400015 	stw	r21,0(r2)
   14550:	003f1906 	br	141b8 <__gethex+0x410>
   14554:	d8c01417 	ldw	r3,80(sp)
   14558:	183eb726 	beq	r3,zero,14038 <__gethex+0x290>
   1455c:	003ff406 	br	14530 <__gethex+0x788>
   14560:	d8c01417 	ldw	r3,80(sp)
   14564:	183eb41e 	bne	r3,zero,14038 <__gethex+0x290>
   14568:	003ff106 	br	14530 <__gethex+0x788>
   1456c:	88800017 	ldw	r2,0(r17)
   14570:	10bfffc4 	addi	r2,r2,-1
   14574:	14802326 	beq	r2,r18,14604 <__gethex+0x85c>
   14578:	04000884 	movi	r16,34
   1457c:	003f0906 	br	141a4 <__gethex+0x3fc>
   14580:	a9400117 	ldw	r5,4(r21)
   14584:	d9000117 	ldw	r4,4(sp)
   14588:	29400044 	addi	r5,r5,1
   1458c:	0014fec0 	call	14fec <_Balloc>
   14590:	1027883a 	mov	r19,r2
   14594:	10002e26 	beq	r2,zero,14650 <__gethex+0x8a8>
   14598:	a9800417 	ldw	r6,16(r21)
   1459c:	a9400304 	addi	r5,r21,12
   145a0:	11000304 	addi	r4,r2,12
   145a4:	31800084 	addi	r6,r6,2
   145a8:	300c90ba 	slli	r6,r6,2
   145ac:	15800504 	addi	r22,r2,20
   145b0:	000d4600 	call	d460 <memcpy>
   145b4:	d9000117 	ldw	r4,4(sp)
   145b8:	a80b883a 	mov	r5,r21
   145bc:	982b883a 	mov	r21,r19
   145c0:	00150900 	call	15090 <_Bfree>
   145c4:	98800417 	ldw	r2,16(r19)
   145c8:	003f8d06 	br	14400 <__gethex+0x658>
   145cc:	b739883a 	add	fp,r22,fp
   145d0:	e13fff17 	ldw	r4,-4(fp)
   145d4:	00153240 	call	15324 <__hi0bits>
   145d8:	00c00804 	movi	r3,32
   145dc:	1ca5c83a 	sub	r18,r3,r18
   145e0:	14bf5a0e 	bge	r2,r18,1434c <__gethex+0x5a4>
   145e4:	a8800417 	ldw	r2,16(r21)
   145e8:	003f8f06 	br	14428 <__gethex+0x680>
   145ec:	b1000015 	stw	r4,0(r22)
   145f0:	b005883a 	mov	r2,r22
   145f4:	20000d1e 	bne	r4,zero,1462c <__gethex+0x884>
   145f8:	a8000415 	stw	zero,16(r21)
   145fc:	a8000515 	stw	zero,20(r21)
   14600:	003fa606 	br	1449c <__gethex+0x6f4>
   14604:	9007d17a 	srai	r3,r18,5
   14608:	00800044 	movi	r2,1
   1460c:	948007cc 	andi	r18,r18,31
   14610:	180690ba 	slli	r3,r3,2
   14614:	1484983a 	sll	r2,r2,r18
   14618:	b0ed883a 	add	r22,r22,r3
   1461c:	b0c00017 	ldw	r3,0(r22)
   14620:	10c4703a 	and	r2,r2,r3
   14624:	103fd426 	beq	r2,zero,14578 <__gethex+0x7d0>
   14628:	003f4806 	br	1434c <__gethex+0x5a4>
   1462c:	10800104 	addi	r2,r2,4
   14630:	003f9606 	br	1448c <__gethex+0x6e4>
   14634:	01c000b4 	movhi	r7,2
   14638:	010000b4 	movhi	r4,2
   1463c:	39c5e404 	addi	r7,r7,6032
   14640:	000d883a 	mov	r6,zero
   14644:	01403784 	movi	r5,222
   14648:	2105f904 	addi	r4,r4,6116
   1464c:	0017e800 	call	17e80 <__assert_func>
   14650:	01c000b4 	movhi	r7,2
   14654:	010000b4 	movhi	r4,2
   14658:	39c5e404 	addi	r7,r7,6032
   1465c:	000d883a 	mov	r6,zero
   14660:	01402104 	movi	r5,132
   14664:	2105f904 	addi	r4,r4,6116
   14668:	0017e800 	call	17e80 <__assert_func>

0001466c <__match>:
   1466c:	21800017 	ldw	r6,0(r4)
   14670:	29c00007 	ldb	r7,0(r5)
   14674:	31800044 	addi	r6,r6,1
   14678:	29400044 	addi	r5,r5,1
   1467c:	38000c26 	beq	r7,zero,146b0 <__match+0x44>
   14680:	30c00003 	ldbu	r3,0(r6)
   14684:	18bfefc4 	addi	r2,r3,-65
   14688:	10803fcc 	andi	r2,r2,255
   1468c:	18c03fcc 	andi	r3,r3,255
   14690:	18c0201c 	xori	r3,r3,128
   14694:	108006a8 	cmpgeui	r2,r2,26
   14698:	18ffe004 	addi	r3,r3,-128
   1469c:	1000011e 	bne	r2,zero,146a4 <__match+0x38>
   146a0:	18c00804 	addi	r3,r3,32
   146a4:	19fff226 	beq	r3,r7,14670 <__match+0x4>
   146a8:	0005883a 	mov	r2,zero
   146ac:	f800283a 	ret
   146b0:	21800015 	stw	r6,0(r4)
   146b4:	00800044 	movi	r2,1
   146b8:	f800283a 	ret

000146bc <__hexnan>:
   146bc:	2b400017 	ldw	r13,0(r5)
   146c0:	defffc04 	addi	sp,sp,-16
   146c4:	dc400115 	stw	r17,4(sp)
   146c8:	6805d17a 	srai	r2,r13,5
   146cc:	dfc00315 	stw	ra,12(sp)
   146d0:	dc800215 	stw	r18,8(sp)
   146d4:	100490ba 	slli	r2,r2,2
   146d8:	dc000015 	stw	r16,0(sp)
   146dc:	6b4007cc 	andi	r13,r13,31
   146e0:	3023883a 	mov	r17,r6
   146e4:	3085883a 	add	r2,r6,r2
   146e8:	6800651e 	bne	r13,zero,14880 <__hexnan+0x1c4>
   146ec:	143fff04 	addi	r16,r2,-4
   146f0:	1025883a 	mov	r18,r2
   146f4:	21400017 	ldw	r5,0(r4)
   146f8:	903fff15 	stw	zero,-4(r18)
   146fc:	28c00043 	ldbu	r3,1(r5)
   14700:	18006d26 	beq	r3,zero,148b8 <__hexnan+0x1fc>
   14704:	8017883a 	mov	r11,r16
   14708:	800f883a 	mov	r7,r16
   1470c:	0011883a 	mov	r8,zero
   14710:	0019883a 	mov	r12,zero
   14714:	0013883a 	mov	r9,zero
   14718:	03c00204 	movi	r15,8
   1471c:	03800804 	movi	r14,32
   14720:	008000b4 	movhi	r2,2
   14724:	1885883a 	add	r2,r3,r2
   14728:	10860b03 	ldbu	r2,6188(r2)
   1472c:	11803fcc 	andi	r6,r2,255
   14730:	3000431e 	bne	r6,zero,14840 <__hexnan+0x184>
   14734:	18800868 	cmpgeui	r2,r3,33
   14738:	10005d1e 	bne	r2,zero,148b0 <__hexnan+0x1f4>
   1473c:	6240050e 	bge	r12,r9,14754 <__hexnan+0x98>
   14740:	3ac0022e 	bgeu	r7,r11,1474c <__hexnan+0x90>
   14744:	40800208 	cmpgei	r2,r8,8
   14748:	10002926 	beq	r2,zero,147f0 <__hexnan+0x134>
   1474c:	89c03636 	bltu	r17,r7,14828 <__hexnan+0x16c>
   14750:	02000204 	movi	r8,8
   14754:	28c00083 	ldbu	r3,2(r5)
   14758:	29400044 	addi	r5,r5,1
   1475c:	183ff01e 	bne	r3,zero,14720 <__hexnan+0x64>
   14760:	48005526 	beq	r9,zero,148b8 <__hexnan+0x1fc>
   14764:	3ac0022e 	bgeu	r7,r11,14770 <__hexnan+0xb4>
   14768:	40800208 	cmpgei	r2,r8,8
   1476c:	10006626 	beq	r2,zero,14908 <__hexnan+0x24c>
   14770:	89c0462e 	bgeu	r17,r7,1488c <__hexnan+0x1d0>
   14774:	8807883a 	mov	r3,r17
   14778:	3805883a 	mov	r2,r7
   1477c:	11000017 	ldw	r4,0(r2)
   14780:	10800104 	addi	r2,r2,4
   14784:	18c00104 	addi	r3,r3,4
   14788:	193fff15 	stw	r4,-4(r3)
   1478c:	80bffb2e 	bgeu	r16,r2,1477c <__hexnan+0xc0>
   14790:	80800044 	addi	r2,r16,1
   14794:	38c00044 	addi	r3,r7,1
   14798:	10c05536 	bltu	r2,r3,148f0 <__hexnan+0x234>
   1479c:	81c9c83a 	sub	r4,r16,r7
   147a0:	2008d0ba 	srli	r4,r4,2
   147a4:	21000044 	addi	r4,r4,1
   147a8:	200890ba 	slli	r4,r4,2
   147ac:	8909883a 	add	r4,r17,r4
   147b0:	20c00044 	addi	r3,r4,1
   147b4:	10c05236 	bltu	r2,r3,14900 <__hexnan+0x244>
   147b8:	810dc83a 	sub	r6,r16,r4
   147bc:	300cd0ba 	srli	r6,r6,2
   147c0:	31800044 	addi	r6,r6,1
   147c4:	300c90ba 	slli	r6,r6,2
   147c8:	000b883a 	mov	r5,zero
   147cc:	0014efc0 	call	14efc <memset>
   147d0:	90bfff17 	ldw	r2,-4(r18)
   147d4:	1000041e 	bne	r2,zero,147e8 <__hexnan+0x12c>
   147d8:	8c003e26 	beq	r17,r16,148d4 <__hexnan+0x218>
   147dc:	80bfff17 	ldw	r2,-4(r16)
   147e0:	843fff04 	addi	r16,r16,-4
   147e4:	103ffc26 	beq	r2,zero,147d8 <__hexnan+0x11c>
   147e8:	00800144 	movi	r2,5
   147ec:	00003306 	br	148bc <__hexnan+0x200>
   147f0:	7a11c83a 	sub	r8,r15,r8
   147f4:	401090ba 	slli	r8,r8,2
   147f8:	39800017 	ldw	r6,0(r7)
   147fc:	3805883a 	mov	r2,r7
   14800:	723fc83a 	sub	ra,r14,r8
   14804:	12800117 	ldw	r10,4(r2)
   14808:	10800104 	addi	r2,r2,4
   1480c:	57c6983a 	sll	r3,r10,ra
   14810:	1986b03a 	or	r3,r3,r6
   14814:	520cd83a 	srl	r6,r10,r8
   14818:	10ffff15 	stw	r3,-4(r2)
   1481c:	11800015 	stw	r6,0(r2)
   14820:	12fff836 	bltu	r2,r11,14804 <__hexnan+0x148>
   14824:	89ffca2e 	bgeu	r17,r7,14750 <__hexnan+0x94>
   14828:	3affff04 	addi	r11,r7,-4
   1482c:	383fff15 	stw	zero,-4(r7)
   14830:	4819883a 	mov	r12,r9
   14834:	580f883a 	mov	r7,r11
   14838:	0011883a 	mov	r8,zero
   1483c:	003fc506 	br	14754 <__hexnan+0x98>
   14840:	42000044 	addi	r8,r8,1
   14844:	40c00248 	cmpgei	r3,r8,9
   14848:	4a400044 	addi	r9,r9,1
   1484c:	1800061e 	bne	r3,zero,14868 <__hexnan+0x1ac>
   14850:	38c00017 	ldw	r3,0(r7)
   14854:	1806913a 	slli	r3,r3,4
   14858:	108003cc 	andi	r2,r2,15
   1485c:	10c4b03a 	or	r2,r2,r3
   14860:	38800015 	stw	r2,0(r7)
   14864:	003fbb06 	br	14754 <__hexnan+0x98>
   14868:	89ffba2e 	bgeu	r17,r7,14754 <__hexnan+0x98>
   1486c:	383fff15 	stw	zero,-4(r7)
   14870:	0007883a 	mov	r3,zero
   14874:	39ffff04 	addi	r7,r7,-4
   14878:	02000044 	movi	r8,1
   1487c:	003ff606 	br	14858 <__hexnan+0x19c>
   14880:	14800104 	addi	r18,r2,4
   14884:	1021883a 	mov	r16,r2
   14888:	003f9a06 	br	146f4 <__hexnan+0x38>
   1488c:	90bfff17 	ldw	r2,-4(r18)
   14890:	683fd026 	beq	r13,zero,147d4 <__hexnan+0x118>
   14894:	00c00804 	movi	r3,32
   14898:	1b5bc83a 	sub	r13,r3,r13
   1489c:	00ffffc4 	movi	r3,-1
   148a0:	1b46d83a 	srl	r3,r3,r13
   148a4:	10c4703a 	and	r2,r2,r3
   148a8:	90bfff15 	stw	r2,-4(r18)
   148ac:	003fc906 	br	147d4 <__hexnan+0x118>
   148b0:	18c00a58 	cmpnei	r3,r3,41
   148b4:	18000b26 	beq	r3,zero,148e4 <__hexnan+0x228>
   148b8:	00800104 	movi	r2,4
   148bc:	dfc00317 	ldw	ra,12(sp)
   148c0:	dc800217 	ldw	r18,8(sp)
   148c4:	dc400117 	ldw	r17,4(sp)
   148c8:	dc000017 	ldw	r16,0(sp)
   148cc:	dec00404 	addi	sp,sp,16
   148d0:	f800283a 	ret
   148d4:	00800044 	movi	r2,1
   148d8:	80800015 	stw	r2,0(r16)
   148dc:	00800144 	movi	r2,5
   148e0:	003ff606 	br	148bc <__hexnan+0x200>
   148e4:	29400084 	addi	r5,r5,2
   148e8:	21400015 	stw	r5,0(r4)
   148ec:	003f9c06 	br	14760 <__hexnan+0xa4>
   148f0:	01000104 	movi	r4,4
   148f4:	8909883a 	add	r4,r17,r4
   148f8:	20c00044 	addi	r3,r4,1
   148fc:	10ffae2e 	bgeu	r2,r3,147b8 <__hexnan+0xfc>
   14900:	01800104 	movi	r6,4
   14904:	003fb006 	br	147c8 <__hexnan+0x10c>
   14908:	01800204 	movi	r6,8
   1490c:	320dc83a 	sub	r6,r6,r8
   14910:	300c90ba 	slli	r6,r6,2
   14914:	39000017 	ldw	r4,0(r7)
   14918:	02000804 	movi	r8,32
   1491c:	4191c83a 	sub	r8,r8,r6
   14920:	3805883a 	mov	r2,r7
   14924:	11400117 	ldw	r5,4(r2)
   14928:	10800104 	addi	r2,r2,4
   1492c:	2a06983a 	sll	r3,r5,r8
   14930:	1906b03a 	or	r3,r3,r4
   14934:	2988d83a 	srl	r4,r5,r6
   14938:	10ffff15 	stw	r3,-4(r2)
   1493c:	11000015 	stw	r4,0(r2)
   14940:	12fff836 	bltu	r2,r11,14924 <__hexnan+0x268>
   14944:	89ff8b36 	bltu	r17,r7,14774 <__hexnan+0xb8>
   14948:	003fd006 	br	1488c <__hexnan+0x1d0>

0001494c <__numeric_load_locale>:
   1494c:	0005883a 	mov	r2,zero
   14950:	f800283a 	ret

00014954 <_setlocale_r>:
   14954:	30001626 	beq	r6,zero,149b0 <_setlocale_r+0x5c>
   14958:	014000b4 	movhi	r5,2
   1495c:	defffe04 	addi	sp,sp,-8
   14960:	29465004 	addi	r5,r5,6464
   14964:	3009883a 	mov	r4,r6
   14968:	dc000015 	stw	r16,0(sp)
   1496c:	dfc00115 	stw	ra,4(sp)
   14970:	3021883a 	mov	r16,r6
   14974:	00167c80 	call	167c8 <strcmp>
   14978:	1000061e 	bne	r2,zero,14994 <_setlocale_r+0x40>
   1497c:	008000b4 	movhi	r2,2
   14980:	10864f04 	addi	r2,r2,6460
   14984:	dfc00117 	ldw	ra,4(sp)
   14988:	dc000017 	ldw	r16,0(sp)
   1498c:	dec00204 	addi	sp,sp,8
   14990:	f800283a 	ret
   14994:	80800003 	ldbu	r2,0(r16)
   14998:	10bfef44 	addi	r2,r2,-67
   1499c:	10000726 	beq	r2,zero,149bc <_setlocale_r+0x68>
   149a0:	80800003 	ldbu	r2,0(r16)
   149a4:	103ff526 	beq	r2,zero,1497c <_setlocale_r+0x28>
   149a8:	0005883a 	mov	r2,zero
   149ac:	003ff506 	br	14984 <_setlocale_r+0x30>
   149b0:	008000b4 	movhi	r2,2
   149b4:	10864f04 	addi	r2,r2,6460
   149b8:	f800283a 	ret
   149bc:	80800043 	ldbu	r2,1(r16)
   149c0:	103fee26 	beq	r2,zero,1497c <_setlocale_r+0x28>
   149c4:	003ff606 	br	149a0 <_setlocale_r+0x4c>

000149c8 <__locale_mb_cur_max>:
   149c8:	008000b4 	movhi	r2,2
   149cc:	1089dd07 	ldb	r2,10100(r2)
   149d0:	f800283a 	ret

000149d4 <setlocale>:
   149d4:	28001626 	beq	r5,zero,14a30 <setlocale+0x5c>
   149d8:	defffe04 	addi	sp,sp,-8
   149dc:	dc000015 	stw	r16,0(sp)
   149e0:	2821883a 	mov	r16,r5
   149e4:	014000b4 	movhi	r5,2
   149e8:	29465004 	addi	r5,r5,6464
   149ec:	8009883a 	mov	r4,r16
   149f0:	dfc00115 	stw	ra,4(sp)
   149f4:	00167c80 	call	167c8 <strcmp>
   149f8:	1000061e 	bne	r2,zero,14a14 <setlocale+0x40>
   149fc:	008000b4 	movhi	r2,2
   14a00:	10864f04 	addi	r2,r2,6460
   14a04:	dfc00117 	ldw	ra,4(sp)
   14a08:	dc000017 	ldw	r16,0(sp)
   14a0c:	dec00204 	addi	sp,sp,8
   14a10:	f800283a 	ret
   14a14:	80800003 	ldbu	r2,0(r16)
   14a18:	10bfef44 	addi	r2,r2,-67
   14a1c:	10000726 	beq	r2,zero,14a3c <setlocale+0x68>
   14a20:	80800003 	ldbu	r2,0(r16)
   14a24:	103ff526 	beq	r2,zero,149fc <setlocale+0x28>
   14a28:	0005883a 	mov	r2,zero
   14a2c:	003ff506 	br	14a04 <setlocale+0x30>
   14a30:	008000b4 	movhi	r2,2
   14a34:	10864f04 	addi	r2,r2,6460
   14a38:	f800283a 	ret
   14a3c:	80800043 	ldbu	r2,1(r16)
   14a40:	103fee26 	beq	r2,zero,149fc <setlocale+0x28>
   14a44:	003ff606 	br	14a20 <setlocale+0x4c>

00014a48 <__localeconv_l>:
   14a48:	20803c04 	addi	r2,r4,240
   14a4c:	f800283a 	ret

00014a50 <_localeconv_r>:
   14a50:	008000b4 	movhi	r2,2
   14a54:	1089cf04 	addi	r2,r2,10044
   14a58:	f800283a 	ret

00014a5c <localeconv>:
   14a5c:	008000b4 	movhi	r2,2
   14a60:	1089cf04 	addi	r2,r2,10044
   14a64:	f800283a 	ret

00014a68 <__smakebuf_r>:
   14a68:	2880030b 	ldhu	r2,12(r5)
   14a6c:	deffe804 	addi	sp,sp,-96
   14a70:	dc001215 	stw	r16,72(sp)
   14a74:	dfc01715 	stw	ra,92(sp)
   14a78:	dd001615 	stw	r20,88(sp)
   14a7c:	dcc01515 	stw	r19,84(sp)
   14a80:	dc801415 	stw	r18,80(sp)
   14a84:	dc401315 	stw	r17,76(sp)
   14a88:	10c0008c 	andi	r3,r2,2
   14a8c:	2821883a 	mov	r16,r5
   14a90:	18000d26 	beq	r3,zero,14ac8 <__smakebuf_r+0x60>
   14a94:	288010c4 	addi	r2,r5,67
   14a98:	28800015 	stw	r2,0(r5)
   14a9c:	28800415 	stw	r2,16(r5)
   14aa0:	00800044 	movi	r2,1
   14aa4:	28800515 	stw	r2,20(r5)
   14aa8:	dfc01717 	ldw	ra,92(sp)
   14aac:	dd001617 	ldw	r20,88(sp)
   14ab0:	dcc01517 	ldw	r19,84(sp)
   14ab4:	dc801417 	ldw	r18,80(sp)
   14ab8:	dc401317 	ldw	r17,76(sp)
   14abc:	dc001217 	ldw	r16,72(sp)
   14ac0:	dec01804 	addi	sp,sp,96
   14ac4:	f800283a 	ret
   14ac8:	2940038f 	ldh	r5,14(r5)
   14acc:	2023883a 	mov	r17,r4
   14ad0:	28002816 	blt	r5,zero,14b74 <__smakebuf_r+0x10c>
   14ad4:	d80d883a 	mov	r6,sp
   14ad8:	00183cc0 	call	183cc <_fstat_r>
   14adc:	10002416 	blt	r2,zero,14b70 <__smakebuf_r+0x108>
   14ae0:	d8800117 	ldw	r2,4(sp)
   14ae4:	10bc000c 	andi	r2,r2,61440
   14ae8:	10880018 	cmpnei	r2,r2,8192
   14aec:	1000461e 	bne	r2,zero,14c08 <__smakebuf_r+0x1a0>
   14af0:	8140038f 	ldh	r5,14(r16)
   14af4:	8809883a 	mov	r4,r17
   14af8:	001842c0 	call	1842c <_isatty_r>
   14afc:	10003e26 	beq	r2,zero,14bf8 <__smakebuf_r+0x190>
   14b00:	8080030b 	ldhu	r2,12(r16)
   14b04:	80c010c4 	addi	r3,r16,67
   14b08:	80c00015 	stw	r3,0(r16)
   14b0c:	10800054 	ori	r2,r2,1
   14b10:	8080030d 	sth	r2,12(r16)
   14b14:	00800044 	movi	r2,1
   14b18:	80c00415 	stw	r3,16(r16)
   14b1c:	80800515 	stw	r2,20(r16)
   14b20:	04c00044 	movi	r19,1
   14b24:	05010004 	movi	r20,1024
   14b28:	04820004 	movi	r18,2048
   14b2c:	a00b883a 	mov	r5,r20
   14b30:	8809883a 	mov	r4,r17
   14b34:	000cc800 	call	cc80 <_malloc_r>
   14b38:	10001726 	beq	r2,zero,14b98 <__smakebuf_r+0x130>
   14b3c:	80c0030b 	ldhu	r3,12(r16)
   14b40:	01000074 	movhi	r4,1
   14b44:	210bd704 	addi	r4,r4,12124
   14b48:	89000f15 	stw	r4,60(r17)
   14b4c:	18c02014 	ori	r3,r3,128
   14b50:	80c0030d 	sth	r3,12(r16)
   14b54:	80800015 	stw	r2,0(r16)
   14b58:	80800415 	stw	r2,16(r16)
   14b5c:	85000515 	stw	r20,20(r16)
   14b60:	98001d1e 	bne	r19,zero,14bd8 <__smakebuf_r+0x170>
   14b64:	90c6b03a 	or	r3,r18,r3
   14b68:	80c0030d 	sth	r3,12(r16)
   14b6c:	003fce06 	br	14aa8 <__smakebuf_r+0x40>
   14b70:	8080030b 	ldhu	r2,12(r16)
   14b74:	1080200c 	andi	r2,r2,128
   14b78:	0027883a 	mov	r19,zero
   14b7c:	10001326 	beq	r2,zero,14bcc <__smakebuf_r+0x164>
   14b80:	05001004 	movi	r20,64
   14b84:	a00b883a 	mov	r5,r20
   14b88:	8809883a 	mov	r4,r17
   14b8c:	0025883a 	mov	r18,zero
   14b90:	000cc800 	call	cc80 <_malloc_r>
   14b94:	103fe91e 	bne	r2,zero,14b3c <__smakebuf_r+0xd4>
   14b98:	8080030b 	ldhu	r2,12(r16)
   14b9c:	10c0800c 	andi	r3,r2,512
   14ba0:	183fc11e 	bne	r3,zero,14aa8 <__smakebuf_r+0x40>
   14ba4:	00ffff04 	movi	r3,-4
   14ba8:	10c4703a 	and	r2,r2,r3
   14bac:	10800094 	ori	r2,r2,2
   14bb0:	80c010c4 	addi	r3,r16,67
   14bb4:	8080030d 	sth	r2,12(r16)
   14bb8:	00800044 	movi	r2,1
   14bbc:	80c00015 	stw	r3,0(r16)
   14bc0:	80c00415 	stw	r3,16(r16)
   14bc4:	80800515 	stw	r2,20(r16)
   14bc8:	003fb706 	br	14aa8 <__smakebuf_r+0x40>
   14bcc:	05010004 	movi	r20,1024
   14bd0:	0025883a 	mov	r18,zero
   14bd4:	003fd506 	br	14b2c <__smakebuf_r+0xc4>
   14bd8:	8140038f 	ldh	r5,14(r16)
   14bdc:	8809883a 	mov	r4,r17
   14be0:	001842c0 	call	1842c <_isatty_r>
   14be4:	80c0030b 	ldhu	r3,12(r16)
   14be8:	103fde26 	beq	r2,zero,14b64 <__smakebuf_r+0xfc>
   14bec:	18ffff0c 	andi	r3,r3,65532
   14bf0:	18c00054 	ori	r3,r3,1
   14bf4:	003fdb06 	br	14b64 <__smakebuf_r+0xfc>
   14bf8:	04c00044 	movi	r19,1
   14bfc:	05010004 	movi	r20,1024
   14c00:	04820004 	movi	r18,2048
   14c04:	003fc906 	br	14b2c <__smakebuf_r+0xc4>
   14c08:	0027883a 	mov	r19,zero
   14c0c:	05010004 	movi	r20,1024
   14c10:	04820004 	movi	r18,2048
   14c14:	003fc506 	br	14b2c <__smakebuf_r+0xc4>

00014c18 <__swhatbuf_r>:
   14c18:	deffea04 	addi	sp,sp,-88
   14c1c:	dc001215 	stw	r16,72(sp)
   14c20:	2821883a 	mov	r16,r5
   14c24:	2940038f 	ldh	r5,14(r5)
   14c28:	dc801415 	stw	r18,80(sp)
   14c2c:	dc401315 	stw	r17,76(sp)
   14c30:	dfc01515 	stw	ra,84(sp)
   14c34:	3023883a 	mov	r17,r6
   14c38:	3825883a 	mov	r18,r7
   14c3c:	28001016 	blt	r5,zero,14c80 <__swhatbuf_r+0x68>
   14c40:	d80d883a 	mov	r6,sp
   14c44:	00183cc0 	call	183cc <_fstat_r>
   14c48:	10000d16 	blt	r2,zero,14c80 <__swhatbuf_r+0x68>
   14c4c:	d8c00117 	ldw	r3,4(sp)
   14c50:	00820004 	movi	r2,2048
   14c54:	18fc000c 	andi	r3,r3,61440
   14c58:	18c80020 	cmpeqi	r3,r3,8192
   14c5c:	90c00015 	stw	r3,0(r18)
   14c60:	00c10004 	movi	r3,1024
   14c64:	88c00015 	stw	r3,0(r17)
   14c68:	dfc01517 	ldw	ra,84(sp)
   14c6c:	dc801417 	ldw	r18,80(sp)
   14c70:	dc401317 	ldw	r17,76(sp)
   14c74:	dc001217 	ldw	r16,72(sp)
   14c78:	dec01604 	addi	sp,sp,88
   14c7c:	f800283a 	ret
   14c80:	8080030b 	ldhu	r2,12(r16)
   14c84:	90000015 	stw	zero,0(r18)
   14c88:	1080200c 	andi	r2,r2,128
   14c8c:	10000426 	beq	r2,zero,14ca0 <__swhatbuf_r+0x88>
   14c90:	00801004 	movi	r2,64
   14c94:	88800015 	stw	r2,0(r17)
   14c98:	0005883a 	mov	r2,zero
   14c9c:	003ff206 	br	14c68 <__swhatbuf_r+0x50>
   14ca0:	00810004 	movi	r2,1024
   14ca4:	88800015 	stw	r2,0(r17)
   14ca8:	0005883a 	mov	r2,zero
   14cac:	003fee06 	br	14c68 <__swhatbuf_r+0x50>

00014cb0 <_mbtowc_r>:
   14cb0:	008000b4 	movhi	r2,2
   14cb4:	1089cc17 	ldw	r2,10032(r2)
   14cb8:	1000683a 	jmp	r2

00014cbc <__ascii_mbtowc>:
   14cbc:	deffff04 	addi	sp,sp,-4
   14cc0:	28000826 	beq	r5,zero,14ce4 <__ascii_mbtowc+0x28>
   14cc4:	30000926 	beq	r6,zero,14cec <__ascii_mbtowc+0x30>
   14cc8:	38000b26 	beq	r7,zero,14cf8 <__ascii_mbtowc+0x3c>
   14ccc:	30800003 	ldbu	r2,0(r6)
   14cd0:	28800015 	stw	r2,0(r5)
   14cd4:	30800003 	ldbu	r2,0(r6)
   14cd8:	1004c03a 	cmpne	r2,r2,zero
   14cdc:	dec00104 	addi	sp,sp,4
   14ce0:	f800283a 	ret
   14ce4:	d80b883a 	mov	r5,sp
   14ce8:	303ff71e 	bne	r6,zero,14cc8 <__ascii_mbtowc+0xc>
   14cec:	0005883a 	mov	r2,zero
   14cf0:	dec00104 	addi	sp,sp,4
   14cf4:	f800283a 	ret
   14cf8:	00bfff84 	movi	r2,-2
   14cfc:	003ff706 	br	14cdc <__ascii_mbtowc+0x20>

00014d00 <memchr>:
   14d00:	208000cc 	andi	r2,r4,3
   14d04:	280f883a 	mov	r7,r5
   14d08:	10000e26 	beq	r2,zero,14d44 <memchr+0x44>
   14d0c:	30bfffc4 	addi	r2,r6,-1
   14d10:	30001726 	beq	r6,zero,14d70 <memchr+0x70>
   14d14:	29803fcc 	andi	r6,r5,255
   14d18:	00000606 	br	14d34 <memchr+0x34>
   14d1c:	21000044 	addi	r4,r4,1
   14d20:	20c000cc 	andi	r3,r4,3
   14d24:	18000826 	beq	r3,zero,14d48 <memchr+0x48>
   14d28:	10bfffc4 	addi	r2,r2,-1
   14d2c:	10ffffe0 	cmpeqi	r3,r2,-1
   14d30:	18000f1e 	bne	r3,zero,14d70 <memchr+0x70>
   14d34:	20c00003 	ldbu	r3,0(r4)
   14d38:	19bff81e 	bne	r3,r6,14d1c <memchr+0x1c>
   14d3c:	2005883a 	mov	r2,r4
   14d40:	f800283a 	ret
   14d44:	3005883a 	mov	r2,r6
   14d48:	10c00128 	cmpgeui	r3,r2,4
   14d4c:	18000a1e 	bne	r3,zero,14d78 <memchr+0x78>
   14d50:	10001e26 	beq	r2,zero,14dcc <memchr+0xcc>
   14d54:	2087883a 	add	r3,r4,r2
   14d58:	39803fcc 	andi	r6,r7,255
   14d5c:	2005883a 	mov	r2,r4
   14d60:	11000003 	ldbu	r4,0(r2)
   14d64:	21bff626 	beq	r4,r6,14d40 <memchr+0x40>
   14d68:	10800044 	addi	r2,r2,1
   14d6c:	18bffc1e 	bne	r3,r2,14d60 <memchr+0x60>
   14d70:	0005883a 	mov	r2,zero
   14d74:	f800283a 	ret
   14d78:	29403fcc 	andi	r5,r5,255
   14d7c:	280c923a 	slli	r6,r5,8
   14d80:	027fbff4 	movhi	r9,65279
   14d84:	02202074 	movhi	r8,32897
   14d88:	314ab03a 	or	r5,r6,r5
   14d8c:	280c943a 	slli	r6,r5,16
   14d90:	4a7fbfc4 	addi	r9,r9,-257
   14d94:	42202004 	addi	r8,r8,-32640
   14d98:	314cb03a 	or	r6,r6,r5
   14d9c:	20c00017 	ldw	r3,0(r4)
   14da0:	30c6f03a 	xor	r3,r6,r3
   14da4:	1a4b883a 	add	r5,r3,r9
   14da8:	00c6303a 	nor	r3,zero,r3
   14dac:	28c6703a 	and	r3,r5,r3
   14db0:	1a06703a 	and	r3,r3,r8
   14db4:	183fe71e 	bne	r3,zero,14d54 <memchr+0x54>
   14db8:	10bfff04 	addi	r2,r2,-4
   14dbc:	10c00128 	cmpgeui	r3,r2,4
   14dc0:	21000104 	addi	r4,r4,4
   14dc4:	183ff51e 	bne	r3,zero,14d9c <memchr+0x9c>
   14dc8:	003fe106 	br	14d50 <memchr+0x50>
   14dcc:	f800283a 	ret

00014dd0 <memmove>:
   14dd0:	2005883a 	mov	r2,r4
   14dd4:	29000a2e 	bgeu	r5,r4,14e00 <memmove+0x30>
   14dd8:	2989883a 	add	r4,r5,r6
   14ddc:	1100082e 	bgeu	r2,r4,14e00 <memmove+0x30>
   14de0:	1187883a 	add	r3,r2,r6
   14de4:	30003e26 	beq	r6,zero,14ee0 <memmove+0x110>
   14de8:	217fffc3 	ldbu	r5,-1(r4)
   14dec:	18ffffc4 	addi	r3,r3,-1
   14df0:	213fffc4 	addi	r4,r4,-1
   14df4:	19400005 	stb	r5,0(r3)
   14df8:	10fffb1e 	bne	r2,r3,14de8 <memmove+0x18>
   14dfc:	f800283a 	ret
   14e00:	30c00430 	cmpltui	r3,r6,16
   14e04:	18000b26 	beq	r3,zero,14e34 <memmove+0x64>
   14e08:	1007883a 	mov	r3,r2
   14e0c:	31ffffc4 	addi	r7,r6,-1
   14e10:	30003726 	beq	r6,zero,14ef0 <memmove+0x120>
   14e14:	39c00044 	addi	r7,r7,1
   14e18:	29cf883a 	add	r7,r5,r7
   14e1c:	29800003 	ldbu	r6,0(r5)
   14e20:	29400044 	addi	r5,r5,1
   14e24:	18c00044 	addi	r3,r3,1
   14e28:	19bfffc5 	stb	r6,-1(r3)
   14e2c:	29fffb1e 	bne	r5,r7,14e1c <memmove+0x4c>
   14e30:	f800283a 	ret
   14e34:	2886b03a 	or	r3,r5,r2
   14e38:	18c000cc 	andi	r3,r3,3
   14e3c:	1800291e 	bne	r3,zero,14ee4 <memmove+0x114>
   14e40:	327ffc04 	addi	r9,r6,-16
   14e44:	4812d13a 	srli	r9,r9,4
   14e48:	280f883a 	mov	r7,r5
   14e4c:	1007883a 	mov	r3,r2
   14e50:	4a400044 	addi	r9,r9,1
   14e54:	4812913a 	slli	r9,r9,4
   14e58:	1251883a 	add	r8,r2,r9
   14e5c:	39000017 	ldw	r4,0(r7)
   14e60:	39c00404 	addi	r7,r7,16
   14e64:	18c00404 	addi	r3,r3,16
   14e68:	193ffc15 	stw	r4,-16(r3)
   14e6c:	393ffd17 	ldw	r4,-12(r7)
   14e70:	193ffd15 	stw	r4,-12(r3)
   14e74:	393ffe17 	ldw	r4,-8(r7)
   14e78:	193ffe15 	stw	r4,-8(r3)
   14e7c:	393fff17 	ldw	r4,-4(r7)
   14e80:	193fff15 	stw	r4,-4(r3)
   14e84:	40fff51e 	bne	r8,r3,14e5c <memmove+0x8c>
   14e88:	3100030c 	andi	r4,r6,12
   14e8c:	2a4b883a 	add	r5,r5,r9
   14e90:	320003cc 	andi	r8,r6,15
   14e94:	20001726 	beq	r4,zero,14ef4 <memmove+0x124>
   14e98:	2813883a 	mov	r9,r5
   14e9c:	180f883a 	mov	r7,r3
   14ea0:	4a800017 	ldw	r10,0(r9)
   14ea4:	39c00104 	addi	r7,r7,4
   14ea8:	41c9c83a 	sub	r4,r8,r7
   14eac:	1909883a 	add	r4,r3,r4
   14eb0:	21000128 	cmpgeui	r4,r4,4
   14eb4:	3abfff15 	stw	r10,-4(r7)
   14eb8:	4a400104 	addi	r9,r9,4
   14ebc:	203ff81e 	bne	r4,zero,14ea0 <memmove+0xd0>
   14ec0:	413fff04 	addi	r4,r8,-4
   14ec4:	2008d0ba 	srli	r4,r4,2
   14ec8:	318000cc 	andi	r6,r6,3
   14ecc:	21000044 	addi	r4,r4,1
   14ed0:	200890ba 	slli	r4,r4,2
   14ed4:	1907883a 	add	r3,r3,r4
   14ed8:	290b883a 	add	r5,r5,r4
   14edc:	003fcb06 	br	14e0c <memmove+0x3c>
   14ee0:	f800283a 	ret
   14ee4:	31ffffc4 	addi	r7,r6,-1
   14ee8:	1007883a 	mov	r3,r2
   14eec:	003fc906 	br	14e14 <memmove+0x44>
   14ef0:	f800283a 	ret
   14ef4:	400d883a 	mov	r6,r8
   14ef8:	003fc406 	br	14e0c <memmove+0x3c>

00014efc <memset>:
   14efc:	20c000cc 	andi	r3,r4,3
   14f00:	2005883a 	mov	r2,r4
   14f04:	18003626 	beq	r3,zero,14fe0 <memset+0xe4>
   14f08:	31ffffc4 	addi	r7,r6,-1
   14f0c:	30003326 	beq	r6,zero,14fdc <memset+0xe0>
   14f10:	2811883a 	mov	r8,r5
   14f14:	2007883a 	mov	r3,r4
   14f18:	00000306 	br	14f28 <memset+0x2c>
   14f1c:	39ffffc4 	addi	r7,r7,-1
   14f20:	39bfffe0 	cmpeqi	r6,r7,-1
   14f24:	30002d1e 	bne	r6,zero,14fdc <memset+0xe0>
   14f28:	18c00044 	addi	r3,r3,1
   14f2c:	198000cc 	andi	r6,r3,3
   14f30:	1a3fffc5 	stb	r8,-1(r3)
   14f34:	303ff91e 	bne	r6,zero,14f1c <memset+0x20>
   14f38:	39000130 	cmpltui	r4,r7,4
   14f3c:	2000221e 	bne	r4,zero,14fc8 <memset+0xcc>
   14f40:	29003fcc 	andi	r4,r5,255
   14f44:	200c923a 	slli	r6,r4,8
   14f48:	3a000430 	cmpltui	r8,r7,16
   14f4c:	3108b03a 	or	r4,r6,r4
   14f50:	200c943a 	slli	r6,r4,16
   14f54:	310cb03a 	or	r6,r6,r4
   14f58:	40000e1e 	bne	r8,zero,14f94 <memset+0x98>
   14f5c:	393ffc04 	addi	r4,r7,-16
   14f60:	2008d13a 	srli	r4,r4,4
   14f64:	21000044 	addi	r4,r4,1
   14f68:	2008913a 	slli	r4,r4,4
   14f6c:	1909883a 	add	r4,r3,r4
   14f70:	19800015 	stw	r6,0(r3)
   14f74:	19800115 	stw	r6,4(r3)
   14f78:	19800215 	stw	r6,8(r3)
   14f7c:	19800315 	stw	r6,12(r3)
   14f80:	18c00404 	addi	r3,r3,16
   14f84:	20fffa1e 	bne	r4,r3,14f70 <memset+0x74>
   14f88:	3900030c 	andi	r4,r7,12
   14f8c:	39c003cc 	andi	r7,r7,15
   14f90:	20000d26 	beq	r4,zero,14fc8 <memset+0xcc>
   14f94:	1811883a 	mov	r8,r3
   14f98:	42000104 	addi	r8,r8,4
   14f9c:	3a09c83a 	sub	r4,r7,r8
   14fa0:	1909883a 	add	r4,r3,r4
   14fa4:	21000128 	cmpgeui	r4,r4,4
   14fa8:	41bfff15 	stw	r6,-4(r8)
   14fac:	203ffa1e 	bne	r4,zero,14f98 <memset+0x9c>
   14fb0:	393fff04 	addi	r4,r7,-4
   14fb4:	2008d0ba 	srli	r4,r4,2
   14fb8:	39c000cc 	andi	r7,r7,3
   14fbc:	21000044 	addi	r4,r4,1
   14fc0:	200890ba 	slli	r4,r4,2
   14fc4:	1907883a 	add	r3,r3,r4
   14fc8:	38000426 	beq	r7,zero,14fdc <memset+0xe0>
   14fcc:	19cf883a 	add	r7,r3,r7
   14fd0:	18c00044 	addi	r3,r3,1
   14fd4:	197fffc5 	stb	r5,-1(r3)
   14fd8:	38fffd1e 	bne	r7,r3,14fd0 <memset+0xd4>
   14fdc:	f800283a 	ret
   14fe0:	2007883a 	mov	r3,r4
   14fe4:	300f883a 	mov	r7,r6
   14fe8:	003fd306 	br	14f38 <memset+0x3c>

00014fec <_Balloc>:
   14fec:	20801317 	ldw	r2,76(r4)
   14ff0:	defffc04 	addi	sp,sp,-16
   14ff4:	dc400115 	stw	r17,4(sp)
   14ff8:	dc000015 	stw	r16,0(sp)
   14ffc:	dfc00315 	stw	ra,12(sp)
   15000:	dc800215 	stw	r18,8(sp)
   15004:	2021883a 	mov	r16,r4
   15008:	2823883a 	mov	r17,r5
   1500c:	10000e26 	beq	r2,zero,15048 <_Balloc+0x5c>
   15010:	880690ba 	slli	r3,r17,2
   15014:	10c7883a 	add	r3,r2,r3
   15018:	18800017 	ldw	r2,0(r3)
   1501c:	10001126 	beq	r2,zero,15064 <_Balloc+0x78>
   15020:	11000017 	ldw	r4,0(r2)
   15024:	19000015 	stw	r4,0(r3)
   15028:	10000415 	stw	zero,16(r2)
   1502c:	10000315 	stw	zero,12(r2)
   15030:	dfc00317 	ldw	ra,12(sp)
   15034:	dc800217 	ldw	r18,8(sp)
   15038:	dc400117 	ldw	r17,4(sp)
   1503c:	dc000017 	ldw	r16,0(sp)
   15040:	dec00404 	addi	sp,sp,16
   15044:	f800283a 	ret
   15048:	01800844 	movi	r6,33
   1504c:	01400104 	movi	r5,4
   15050:	0017ef80 	call	17ef8 <_calloc_r>
   15054:	80801315 	stw	r2,76(r16)
   15058:	103fed1e 	bne	r2,zero,15010 <_Balloc+0x24>
   1505c:	0005883a 	mov	r2,zero
   15060:	003ff306 	br	15030 <_Balloc+0x44>
   15064:	04800044 	movi	r18,1
   15068:	9464983a 	sll	r18,r18,r17
   1506c:	01400044 	movi	r5,1
   15070:	8009883a 	mov	r4,r16
   15074:	91800144 	addi	r6,r18,5
   15078:	300c90ba 	slli	r6,r6,2
   1507c:	0017ef80 	call	17ef8 <_calloc_r>
   15080:	103ff626 	beq	r2,zero,1505c <_Balloc+0x70>
   15084:	14400115 	stw	r17,4(r2)
   15088:	14800215 	stw	r18,8(r2)
   1508c:	003fe606 	br	15028 <_Balloc+0x3c>

00015090 <_Bfree>:
   15090:	28000726 	beq	r5,zero,150b0 <_Bfree+0x20>
   15094:	28c00117 	ldw	r3,4(r5)
   15098:	20801317 	ldw	r2,76(r4)
   1509c:	180690ba 	slli	r3,r3,2
   150a0:	10c5883a 	add	r2,r2,r3
   150a4:	10c00017 	ldw	r3,0(r2)
   150a8:	28c00015 	stw	r3,0(r5)
   150ac:	11400015 	stw	r5,0(r2)
   150b0:	f800283a 	ret

000150b4 <__multadd>:
   150b4:	defffa04 	addi	sp,sp,-24
   150b8:	dc400115 	stw	r17,4(sp)
   150bc:	2c400417 	ldw	r17,16(r5)
   150c0:	dcc00315 	stw	r19,12(sp)
   150c4:	dc800215 	stw	r18,8(sp)
   150c8:	dc000015 	stw	r16,0(sp)
   150cc:	dfc00515 	stw	ra,20(sp)
   150d0:	dd000415 	stw	r20,16(sp)
   150d4:	2825883a 	mov	r18,r5
   150d8:	2027883a 	mov	r19,r4
   150dc:	3821883a 	mov	r16,r7
   150e0:	2a400504 	addi	r9,r5,20
   150e4:	0015883a 	mov	r10,zero
   150e8:	48c00017 	ldw	r3,0(r9)
   150ec:	4a400104 	addi	r9,r9,4
   150f0:	52800044 	addi	r10,r10,1
   150f4:	1a3fffcc 	andi	r8,r3,65535
   150f8:	4191383a 	mul	r8,r8,r6
   150fc:	180ed43a 	srli	r7,r3,16
   15100:	4407883a 	add	r3,r8,r16
   15104:	1810d43a 	srli	r8,r3,16
   15108:	398f383a 	mul	r7,r7,r6
   1510c:	18ffffcc 	andi	r3,r3,65535
   15110:	3a0f883a 	add	r7,r7,r8
   15114:	3810943a 	slli	r8,r7,16
   15118:	3820d43a 	srli	r16,r7,16
   1511c:	40c7883a 	add	r3,r8,r3
   15120:	48ffff15 	stw	r3,-4(r9)
   15124:	547ff016 	blt	r10,r17,150e8 <__multadd+0x34>
   15128:	80000826 	beq	r16,zero,1514c <__multadd+0x98>
   1512c:	90800217 	ldw	r2,8(r18)
   15130:	88800f0e 	bge	r17,r2,15170 <__multadd+0xbc>
   15134:	88800144 	addi	r2,r17,5
   15138:	100490ba 	slli	r2,r2,2
   1513c:	8c400044 	addi	r17,r17,1
   15140:	9085883a 	add	r2,r18,r2
   15144:	14000015 	stw	r16,0(r2)
   15148:	94400415 	stw	r17,16(r18)
   1514c:	9005883a 	mov	r2,r18
   15150:	dfc00517 	ldw	ra,20(sp)
   15154:	dd000417 	ldw	r20,16(sp)
   15158:	dcc00317 	ldw	r19,12(sp)
   1515c:	dc800217 	ldw	r18,8(sp)
   15160:	dc400117 	ldw	r17,4(sp)
   15164:	dc000017 	ldw	r16,0(sp)
   15168:	dec00604 	addi	sp,sp,24
   1516c:	f800283a 	ret
   15170:	91400117 	ldw	r5,4(r18)
   15174:	9809883a 	mov	r4,r19
   15178:	29400044 	addi	r5,r5,1
   1517c:	0014fec0 	call	14fec <_Balloc>
   15180:	1029883a 	mov	r20,r2
   15184:	10001226 	beq	r2,zero,151d0 <__multadd+0x11c>
   15188:	91800417 	ldw	r6,16(r18)
   1518c:	91400304 	addi	r5,r18,12
   15190:	11000304 	addi	r4,r2,12
   15194:	31800084 	addi	r6,r6,2
   15198:	300c90ba 	slli	r6,r6,2
   1519c:	000d4600 	call	d460 <memcpy>
   151a0:	90000926 	beq	r18,zero,151c8 <__multadd+0x114>
   151a4:	90c00117 	ldw	r3,4(r18)
   151a8:	98801317 	ldw	r2,76(r19)
   151ac:	180690ba 	slli	r3,r3,2
   151b0:	10c5883a 	add	r2,r2,r3
   151b4:	10c00017 	ldw	r3,0(r2)
   151b8:	90c00015 	stw	r3,0(r18)
   151bc:	14800015 	stw	r18,0(r2)
   151c0:	a025883a 	mov	r18,r20
   151c4:	003fdb06 	br	15134 <__multadd+0x80>
   151c8:	a025883a 	mov	r18,r20
   151cc:	003fd906 	br	15134 <__multadd+0x80>
   151d0:	01c000b4 	movhi	r7,2
   151d4:	010000b4 	movhi	r4,2
   151d8:	39c5e404 	addi	r7,r7,6032
   151dc:	000d883a 	mov	r6,zero
   151e0:	01402d44 	movi	r5,181
   151e4:	21065204 	addi	r4,r4,6472
   151e8:	0017e800 	call	17e80 <__assert_func>

000151ec <__s2b>:
   151ec:	defff904 	addi	sp,sp,-28
   151f0:	dc800215 	stw	r18,8(sp)
   151f4:	dc000015 	stw	r16,0(sp)
   151f8:	2025883a 	mov	r18,r4
   151fc:	2821883a 	mov	r16,r5
   15200:	39000204 	addi	r4,r7,8
   15204:	01400244 	movi	r5,9
   15208:	dcc00315 	stw	r19,12(sp)
   1520c:	dc400115 	stw	r17,4(sp)
   15210:	dfc00615 	stw	ra,24(sp)
   15214:	3823883a 	mov	r17,r7
   15218:	dd400515 	stw	r21,20(sp)
   1521c:	dd000415 	stw	r20,16(sp)
   15220:	3027883a 	mov	r19,r6
   15224:	00092480 	call	9248 <__divsi3>
   15228:	88c00290 	cmplti	r3,r17,10
   1522c:	1800341e 	bne	r3,zero,15300 <__s2b+0x114>
   15230:	00c00044 	movi	r3,1
   15234:	000b883a 	mov	r5,zero
   15238:	18c7883a 	add	r3,r3,r3
   1523c:	29400044 	addi	r5,r5,1
   15240:	18bffd16 	blt	r3,r2,15238 <__s2b+0x4c>
   15244:	9009883a 	mov	r4,r18
   15248:	0014fec0 	call	14fec <_Balloc>
   1524c:	100b883a 	mov	r5,r2
   15250:	10002d26 	beq	r2,zero,15308 <__s2b+0x11c>
   15254:	d8800717 	ldw	r2,28(sp)
   15258:	28800515 	stw	r2,20(r5)
   1525c:	00800044 	movi	r2,1
   15260:	28800415 	stw	r2,16(r5)
   15264:	98800290 	cmplti	r2,r19,10
   15268:	1000221e 	bne	r2,zero,152f4 <__s2b+0x108>
   1526c:	85400244 	addi	r21,r16,9
   15270:	a829883a 	mov	r20,r21
   15274:	84e1883a 	add	r16,r16,r19
   15278:	a1c00007 	ldb	r7,0(r20)
   1527c:	01800284 	movi	r6,10
   15280:	9009883a 	mov	r4,r18
   15284:	39fff404 	addi	r7,r7,-48
   15288:	00150b40 	call	150b4 <__multadd>
   1528c:	a5000044 	addi	r20,r20,1
   15290:	100b883a 	mov	r5,r2
   15294:	a43ff81e 	bne	r20,r16,15278 <__s2b+0x8c>
   15298:	9c3ffe04 	addi	r16,r19,-8
   1529c:	ac21883a 	add	r16,r21,r16
   152a0:	9c400a0e 	bge	r19,r17,152cc <__s2b+0xe0>
   152a4:	8ce3c83a 	sub	r17,r17,r19
   152a8:	8463883a 	add	r17,r16,r17
   152ac:	81c00007 	ldb	r7,0(r16)
   152b0:	01800284 	movi	r6,10
   152b4:	9009883a 	mov	r4,r18
   152b8:	39fff404 	addi	r7,r7,-48
   152bc:	00150b40 	call	150b4 <__multadd>
   152c0:	84000044 	addi	r16,r16,1
   152c4:	100b883a 	mov	r5,r2
   152c8:	8c3ff81e 	bne	r17,r16,152ac <__s2b+0xc0>
   152cc:	2805883a 	mov	r2,r5
   152d0:	dfc00617 	ldw	ra,24(sp)
   152d4:	dd400517 	ldw	r21,20(sp)
   152d8:	dd000417 	ldw	r20,16(sp)
   152dc:	dcc00317 	ldw	r19,12(sp)
   152e0:	dc800217 	ldw	r18,8(sp)
   152e4:	dc400117 	ldw	r17,4(sp)
   152e8:	dc000017 	ldw	r16,0(sp)
   152ec:	dec00704 	addi	sp,sp,28
   152f0:	f800283a 	ret
   152f4:	84000284 	addi	r16,r16,10
   152f8:	04c00244 	movi	r19,9
   152fc:	003fe806 	br	152a0 <__s2b+0xb4>
   15300:	000b883a 	mov	r5,zero
   15304:	003fcf06 	br	15244 <__s2b+0x58>
   15308:	01c000b4 	movhi	r7,2
   1530c:	010000b4 	movhi	r4,2
   15310:	39c5e404 	addi	r7,r7,6032
   15314:	000d883a 	mov	r6,zero
   15318:	01403384 	movi	r5,206
   1531c:	21065204 	addi	r4,r4,6472
   15320:	0017e800 	call	17e80 <__assert_func>

00015324 <__hi0bits>:
   15324:	20bfffec 	andhi	r2,r4,65535
   15328:	1000131e 	bne	r2,zero,15378 <__hi0bits+0x54>
   1532c:	2008943a 	slli	r4,r4,16
   15330:	00800404 	movi	r2,16
   15334:	20ffc02c 	andhi	r3,r4,65280
   15338:	1800021e 	bne	r3,zero,15344 <__hi0bits+0x20>
   1533c:	2008923a 	slli	r4,r4,8
   15340:	10800204 	addi	r2,r2,8
   15344:	20fc002c 	andhi	r3,r4,61440
   15348:	1800021e 	bne	r3,zero,15354 <__hi0bits+0x30>
   1534c:	2008913a 	slli	r4,r4,4
   15350:	10800104 	addi	r2,r2,4
   15354:	20f0002c 	andhi	r3,r4,49152
   15358:	1800021e 	bne	r3,zero,15364 <__hi0bits+0x40>
   1535c:	200890ba 	slli	r4,r4,2
   15360:	10800084 	addi	r2,r2,2
   15364:	20000316 	blt	r4,zero,15374 <__hi0bits+0x50>
   15368:	2110002c 	andhi	r4,r4,16384
   1536c:	10800044 	addi	r2,r2,1
   15370:	20000326 	beq	r4,zero,15380 <__hi0bits+0x5c>
   15374:	f800283a 	ret
   15378:	0005883a 	mov	r2,zero
   1537c:	003fed06 	br	15334 <__hi0bits+0x10>
   15380:	00800804 	movi	r2,32
   15384:	f800283a 	ret

00015388 <__lo0bits>:
   15388:	20c00017 	ldw	r3,0(r4)
   1538c:	188001cc 	andi	r2,r3,7
   15390:	10000826 	beq	r2,zero,153b4 <__lo0bits+0x2c>
   15394:	1880004c 	andi	r2,r3,1
   15398:	10001f1e 	bne	r2,zero,15418 <__lo0bits+0x90>
   1539c:	1880008c 	andi	r2,r3,2
   153a0:	10002126 	beq	r2,zero,15428 <__lo0bits+0xa0>
   153a4:	1806d07a 	srli	r3,r3,1
   153a8:	00800044 	movi	r2,1
   153ac:	20c00015 	stw	r3,0(r4)
   153b0:	f800283a 	ret
   153b4:	18bfffcc 	andi	r2,r3,65535
   153b8:	10001426 	beq	r2,zero,1540c <__lo0bits+0x84>
   153bc:	0005883a 	mov	r2,zero
   153c0:	19403fcc 	andi	r5,r3,255
   153c4:	2800021e 	bne	r5,zero,153d0 <__lo0bits+0x48>
   153c8:	1806d23a 	srli	r3,r3,8
   153cc:	10800204 	addi	r2,r2,8
   153d0:	194003cc 	andi	r5,r3,15
   153d4:	2800021e 	bne	r5,zero,153e0 <__lo0bits+0x58>
   153d8:	1806d13a 	srli	r3,r3,4
   153dc:	10800104 	addi	r2,r2,4
   153e0:	194000cc 	andi	r5,r3,3
   153e4:	2800021e 	bne	r5,zero,153f0 <__lo0bits+0x68>
   153e8:	1806d0ba 	srli	r3,r3,2
   153ec:	10800084 	addi	r2,r2,2
   153f0:	1940004c 	andi	r5,r3,1
   153f4:	2800031e 	bne	r5,zero,15404 <__lo0bits+0x7c>
   153f8:	1806d07a 	srli	r3,r3,1
   153fc:	10800044 	addi	r2,r2,1
   15400:	18000726 	beq	r3,zero,15420 <__lo0bits+0x98>
   15404:	20c00015 	stw	r3,0(r4)
   15408:	f800283a 	ret
   1540c:	1806d43a 	srli	r3,r3,16
   15410:	00800404 	movi	r2,16
   15414:	003fea06 	br	153c0 <__lo0bits+0x38>
   15418:	0005883a 	mov	r2,zero
   1541c:	f800283a 	ret
   15420:	00800804 	movi	r2,32
   15424:	f800283a 	ret
   15428:	1806d0ba 	srli	r3,r3,2
   1542c:	00800084 	movi	r2,2
   15430:	20c00015 	stw	r3,0(r4)
   15434:	f800283a 	ret

00015438 <__i2b>:
   15438:	20c01317 	ldw	r3,76(r4)
   1543c:	defffd04 	addi	sp,sp,-12
   15440:	dc400115 	stw	r17,4(sp)
   15444:	dc000015 	stw	r16,0(sp)
   15448:	dfc00215 	stw	ra,8(sp)
   1544c:	2021883a 	mov	r16,r4
   15450:	2823883a 	mov	r17,r5
   15454:	18000d26 	beq	r3,zero,1548c <__i2b+0x54>
   15458:	18800117 	ldw	r2,4(r3)
   1545c:	10001826 	beq	r2,zero,154c0 <__i2b+0x88>
   15460:	11000017 	ldw	r4,0(r2)
   15464:	19000115 	stw	r4,4(r3)
   15468:	00c00044 	movi	r3,1
   1546c:	10000315 	stw	zero,12(r2)
   15470:	14400515 	stw	r17,20(r2)
   15474:	10c00415 	stw	r3,16(r2)
   15478:	dfc00217 	ldw	ra,8(sp)
   1547c:	dc400117 	ldw	r17,4(sp)
   15480:	dc000017 	ldw	r16,0(sp)
   15484:	dec00304 	addi	sp,sp,12
   15488:	f800283a 	ret
   1548c:	01800844 	movi	r6,33
   15490:	01400104 	movi	r5,4
   15494:	0017ef80 	call	17ef8 <_calloc_r>
   15498:	80801315 	stw	r2,76(r16)
   1549c:	1007883a 	mov	r3,r2
   154a0:	103fed1e 	bne	r2,zero,15458 <__i2b+0x20>
   154a4:	01c000b4 	movhi	r7,2
   154a8:	010000b4 	movhi	r4,2
   154ac:	39c5e404 	addi	r7,r7,6032
   154b0:	000d883a 	mov	r6,zero
   154b4:	01405004 	movi	r5,320
   154b8:	21065204 	addi	r4,r4,6472
   154bc:	0017e800 	call	17e80 <__assert_func>
   154c0:	01800704 	movi	r6,28
   154c4:	01400044 	movi	r5,1
   154c8:	8009883a 	mov	r4,r16
   154cc:	0017ef80 	call	17ef8 <_calloc_r>
   154d0:	103ff426 	beq	r2,zero,154a4 <__i2b+0x6c>
   154d4:	00c00044 	movi	r3,1
   154d8:	10c00115 	stw	r3,4(r2)
   154dc:	00c00084 	movi	r3,2
   154e0:	10c00215 	stw	r3,8(r2)
   154e4:	003fe006 	br	15468 <__i2b+0x30>

000154e8 <__multiply>:
   154e8:	defff804 	addi	sp,sp,-32
   154ec:	dd400515 	stw	r21,20(sp)
   154f0:	dd000415 	stw	r20,16(sp)
   154f4:	35400417 	ldw	r21,16(r6)
   154f8:	2d000417 	ldw	r20,16(r5)
   154fc:	dd800615 	stw	r22,24(sp)
   15500:	dcc00315 	stw	r19,12(sp)
   15504:	dfc00715 	stw	ra,28(sp)
   15508:	dc800215 	stw	r18,8(sp)
   1550c:	dc400115 	stw	r17,4(sp)
   15510:	dc000015 	stw	r16,0(sp)
   15514:	282d883a 	mov	r22,r5
   15518:	3027883a 	mov	r19,r6
   1551c:	a5400516 	blt	r20,r21,15534 <__multiply+0x4c>
   15520:	a807883a 	mov	r3,r21
   15524:	2827883a 	mov	r19,r5
   15528:	a02b883a 	mov	r21,r20
   1552c:	302d883a 	mov	r22,r6
   15530:	1829883a 	mov	r20,r3
   15534:	98800217 	ldw	r2,8(r19)
   15538:	ad23883a 	add	r17,r21,r20
   1553c:	99400117 	ldw	r5,4(r19)
   15540:	1440010e 	bge	r2,r17,15548 <__multiply+0x60>
   15544:	29400044 	addi	r5,r5,1
   15548:	0014fec0 	call	14fec <_Balloc>
   1554c:	1025883a 	mov	r18,r2
   15550:	10007326 	beq	r2,zero,15720 <__multiply+0x238>
   15554:	882090ba 	slli	r16,r17,2
   15558:	11000504 	addi	r4,r2,20
   1555c:	2421883a 	add	r16,r4,r16
   15560:	2400082e 	bgeu	r4,r16,15584 <__multiply+0x9c>
   15564:	808dc83a 	sub	r6,r16,r2
   15568:	31bffac4 	addi	r6,r6,-21
   1556c:	300cd0ba 	srli	r6,r6,2
   15570:	000b883a 	mov	r5,zero
   15574:	31800044 	addi	r6,r6,1
   15578:	300c90ba 	slli	r6,r6,2
   1557c:	0014efc0 	call	14efc <memset>
   15580:	1009883a 	mov	r4,r2
   15584:	a01290ba 	slli	r9,r20,2
   15588:	a80e90ba 	slli	r7,r21,2
   1558c:	b0800504 	addi	r2,r22,20
   15590:	9a800504 	addi	r10,r19,20
   15594:	1253883a 	add	r9,r2,r9
   15598:	51cf883a 	add	r7,r10,r7
   1559c:	12404b2e 	bgeu	r2,r9,156cc <__multiply+0x1e4>
   155a0:	98c00544 	addi	r3,r19,21
   155a4:	38c05c36 	bltu	r7,r3,15718 <__multiply+0x230>
   155a8:	3cd1c83a 	sub	r8,r7,r19
   155ac:	423ffac4 	addi	r8,r8,-21
   155b0:	4010d0ba 	srli	r8,r8,2
   155b4:	42000044 	addi	r8,r8,1
   155b8:	401090ba 	slli	r8,r8,2
   155bc:	00000506 	br	155d4 <__multiply+0xec>
   155c0:	6018d43a 	srli	r12,r12,16
   155c4:	6000231e 	bne	r12,zero,15654 <__multiply+0x16c>
   155c8:	10800104 	addi	r2,r2,4
   155cc:	21000104 	addi	r4,r4,4
   155d0:	12403e2e 	bgeu	r2,r9,156cc <__multiply+0x1e4>
   155d4:	13000017 	ldw	r12,0(r2)
   155d8:	63bfffcc 	andi	r14,r12,65535
   155dc:	703ff826 	beq	r14,zero,155c0 <__multiply+0xd8>
   155e0:	201b883a 	mov	r13,r4
   155e4:	5019883a 	mov	r12,r10
   155e8:	001f883a 	mov	r15,zero
   155ec:	61400017 	ldw	r5,0(r12)
   155f0:	6ac00017 	ldw	r11,0(r13)
   155f4:	6b400104 	addi	r13,r13,4
   155f8:	29bfffcc 	andi	r6,r5,65535
   155fc:	338d383a 	mul	r6,r6,r14
   15600:	2806d43a 	srli	r3,r5,16
   15604:	597fffcc 	andi	r5,r11,65535
   15608:	314d883a 	add	r6,r6,r5
   1560c:	33cd883a 	add	r6,r6,r15
   15610:	1b87383a 	mul	r3,r3,r14
   15614:	5816d43a 	srli	r11,r11,16
   15618:	300ad43a 	srli	r5,r6,16
   1561c:	31bfffcc 	andi	r6,r6,65535
   15620:	1ac7883a 	add	r3,r3,r11
   15624:	1947883a 	add	r3,r3,r5
   15628:	180a943a 	slli	r5,r3,16
   1562c:	63000104 	addi	r12,r12,4
   15630:	181ed43a 	srli	r15,r3,16
   15634:	298cb03a 	or	r6,r5,r6
   15638:	69bfff15 	stw	r6,-4(r13)
   1563c:	61ffeb36 	bltu	r12,r7,155ec <__multiply+0x104>
   15640:	2207883a 	add	r3,r4,r8
   15644:	1bc00015 	stw	r15,0(r3)
   15648:	13000017 	ldw	r12,0(r2)
   1564c:	6018d43a 	srli	r12,r12,16
   15650:	603fdd26 	beq	r12,zero,155c8 <__multiply+0xe0>
   15654:	20c00017 	ldw	r3,0(r4)
   15658:	201b883a 	mov	r13,r4
   1565c:	5017883a 	mov	r11,r10
   15660:	181d883a 	mov	r14,r3
   15664:	001f883a 	mov	r15,zero
   15668:	5980000b 	ldhu	r6,0(r11)
   1566c:	703ed43a 	srli	ra,r14,16
   15670:	197fffcc 	andi	r5,r3,65535
   15674:	3307383a 	mul	r3,r6,r12
   15678:	5ac00104 	addi	r11,r11,4
   1567c:	6b800117 	ldw	r14,4(r13)
   15680:	1fc7883a 	add	r3,r3,ra
   15684:	1bc7883a 	add	r3,r3,r15
   15688:	181e943a 	slli	r15,r3,16
   1568c:	180cd43a 	srli	r6,r3,16
   15690:	77ffffcc 	andi	ra,r14,65535
   15694:	794ab03a 	or	r5,r15,r5
   15698:	69400015 	stw	r5,0(r13)
   1569c:	58ffff8b 	ldhu	r3,-2(r11)
   156a0:	6b400104 	addi	r13,r13,4
   156a4:	1b07383a 	mul	r3,r3,r12
   156a8:	1fc7883a 	add	r3,r3,ra
   156ac:	1987883a 	add	r3,r3,r6
   156b0:	181ed43a 	srli	r15,r3,16
   156b4:	59ffec36 	bltu	r11,r7,15668 <__multiply+0x180>
   156b8:	220b883a 	add	r5,r4,r8
   156bc:	28c00015 	stw	r3,0(r5)
   156c0:	10800104 	addi	r2,r2,4
   156c4:	21000104 	addi	r4,r4,4
   156c8:	127fc236 	bltu	r2,r9,155d4 <__multiply+0xec>
   156cc:	04400316 	blt	zero,r17,156dc <__multiply+0x1f4>
   156d0:	00000506 	br	156e8 <__multiply+0x200>
   156d4:	8c7fffc4 	addi	r17,r17,-1
   156d8:	88000326 	beq	r17,zero,156e8 <__multiply+0x200>
   156dc:	80bfff17 	ldw	r2,-4(r16)
   156e0:	843fff04 	addi	r16,r16,-4
   156e4:	103ffb26 	beq	r2,zero,156d4 <__multiply+0x1ec>
   156e8:	9005883a 	mov	r2,r18
   156ec:	94400415 	stw	r17,16(r18)
   156f0:	dfc00717 	ldw	ra,28(sp)
   156f4:	dd800617 	ldw	r22,24(sp)
   156f8:	dd400517 	ldw	r21,20(sp)
   156fc:	dd000417 	ldw	r20,16(sp)
   15700:	dcc00317 	ldw	r19,12(sp)
   15704:	dc800217 	ldw	r18,8(sp)
   15708:	dc400117 	ldw	r17,4(sp)
   1570c:	dc000017 	ldw	r16,0(sp)
   15710:	dec00804 	addi	sp,sp,32
   15714:	f800283a 	ret
   15718:	02000104 	movi	r8,4
   1571c:	003fad06 	br	155d4 <__multiply+0xec>
   15720:	01c000b4 	movhi	r7,2
   15724:	010000b4 	movhi	r4,2
   15728:	39c5e404 	addi	r7,r7,6032
   1572c:	000d883a 	mov	r6,zero
   15730:	01405744 	movi	r5,349
   15734:	21065204 	addi	r4,r4,6472
   15738:	0017e800 	call	17e80 <__assert_func>

0001573c <__pow5mult>:
   1573c:	defffb04 	addi	sp,sp,-20
   15740:	dcc00315 	stw	r19,12(sp)
   15744:	dc000015 	stw	r16,0(sp)
   15748:	dfc00415 	stw	ra,16(sp)
   1574c:	dc800215 	stw	r18,8(sp)
   15750:	dc400115 	stw	r17,4(sp)
   15754:	308000cc 	andi	r2,r6,3
   15758:	3021883a 	mov	r16,r6
   1575c:	2027883a 	mov	r19,r4
   15760:	10002d1e 	bne	r2,zero,15818 <__pow5mult+0xdc>
   15764:	2825883a 	mov	r18,r5
   15768:	8021d0ba 	srai	r16,r16,2
   1576c:	80001926 	beq	r16,zero,157d4 <__pow5mult+0x98>
   15770:	9c401217 	ldw	r17,72(r19)
   15774:	8800061e 	bne	r17,zero,15790 <__pow5mult+0x54>
   15778:	00002f06 	br	15838 <__pow5mult+0xfc>
   1577c:	8021d07a 	srai	r16,r16,1
   15780:	80001426 	beq	r16,zero,157d4 <__pow5mult+0x98>
   15784:	88800017 	ldw	r2,0(r17)
   15788:	10001a26 	beq	r2,zero,157f4 <__pow5mult+0xb8>
   1578c:	1023883a 	mov	r17,r2
   15790:	8080004c 	andi	r2,r16,1
   15794:	103ff926 	beq	r2,zero,1577c <__pow5mult+0x40>
   15798:	880d883a 	mov	r6,r17
   1579c:	900b883a 	mov	r5,r18
   157a0:	9809883a 	mov	r4,r19
   157a4:	00154e80 	call	154e8 <__multiply>
   157a8:	90001926 	beq	r18,zero,15810 <__pow5mult+0xd4>
   157ac:	91000117 	ldw	r4,4(r18)
   157b0:	98c01317 	ldw	r3,76(r19)
   157b4:	8021d07a 	srai	r16,r16,1
   157b8:	200890ba 	slli	r4,r4,2
   157bc:	1907883a 	add	r3,r3,r4
   157c0:	19000017 	ldw	r4,0(r3)
   157c4:	91000015 	stw	r4,0(r18)
   157c8:	1c800015 	stw	r18,0(r3)
   157cc:	1025883a 	mov	r18,r2
   157d0:	803fec1e 	bne	r16,zero,15784 <__pow5mult+0x48>
   157d4:	9005883a 	mov	r2,r18
   157d8:	dfc00417 	ldw	ra,16(sp)
   157dc:	dcc00317 	ldw	r19,12(sp)
   157e0:	dc800217 	ldw	r18,8(sp)
   157e4:	dc400117 	ldw	r17,4(sp)
   157e8:	dc000017 	ldw	r16,0(sp)
   157ec:	dec00504 	addi	sp,sp,20
   157f0:	f800283a 	ret
   157f4:	880d883a 	mov	r6,r17
   157f8:	880b883a 	mov	r5,r17
   157fc:	9809883a 	mov	r4,r19
   15800:	00154e80 	call	154e8 <__multiply>
   15804:	88800015 	stw	r2,0(r17)
   15808:	10000015 	stw	zero,0(r2)
   1580c:	003fdf06 	br	1578c <__pow5mult+0x50>
   15810:	1025883a 	mov	r18,r2
   15814:	003fd906 	br	1577c <__pow5mult+0x40>
   15818:	100490ba 	slli	r2,r2,2
   1581c:	00c000b4 	movhi	r3,2
   15820:	000f883a 	mov	r7,zero
   15824:	10c7883a 	add	r3,r2,r3
   15828:	19866117 	ldw	r6,6532(r3)
   1582c:	00150b40 	call	150b4 <__multadd>
   15830:	1025883a 	mov	r18,r2
   15834:	003fcc06 	br	15768 <__pow5mult+0x2c>
   15838:	01400044 	movi	r5,1
   1583c:	9809883a 	mov	r4,r19
   15840:	0014fec0 	call	14fec <_Balloc>
   15844:	1023883a 	mov	r17,r2
   15848:	10000726 	beq	r2,zero,15868 <__pow5mult+0x12c>
   1584c:	00809c44 	movi	r2,625
   15850:	88800515 	stw	r2,20(r17)
   15854:	00800044 	movi	r2,1
   15858:	88800415 	stw	r2,16(r17)
   1585c:	9c401215 	stw	r17,72(r19)
   15860:	88000015 	stw	zero,0(r17)
   15864:	003fca06 	br	15790 <__pow5mult+0x54>
   15868:	01c000b4 	movhi	r7,2
   1586c:	010000b4 	movhi	r4,2
   15870:	39c5e404 	addi	r7,r7,6032
   15874:	000d883a 	mov	r6,zero
   15878:	01405004 	movi	r5,320
   1587c:	21065204 	addi	r4,r4,6472
   15880:	0017e800 	call	17e80 <__assert_func>

00015884 <__lshift>:
   15884:	defff804 	addi	sp,sp,-32
   15888:	dd800615 	stw	r22,24(sp)
   1588c:	dc000015 	stw	r16,0(sp)
   15890:	302dd17a 	srai	r22,r6,5
   15894:	2c000417 	ldw	r16,16(r5)
   15898:	28800217 	ldw	r2,8(r5)
   1589c:	dd000415 	stw	r20,16(sp)
   158a0:	b421883a 	add	r16,r22,r16
   158a4:	dcc00315 	stw	r19,12(sp)
   158a8:	dc800215 	stw	r18,8(sp)
   158ac:	dc400115 	stw	r17,4(sp)
   158b0:	dfc00715 	stw	ra,28(sp)
   158b4:	dd400515 	stw	r21,20(sp)
   158b8:	85000044 	addi	r20,r16,1
   158bc:	2827883a 	mov	r19,r5
   158c0:	3025883a 	mov	r18,r6
   158c4:	29400117 	ldw	r5,4(r5)
   158c8:	2023883a 	mov	r17,r4
   158cc:	1500030e 	bge	r2,r20,158dc <__lshift+0x58>
   158d0:	1085883a 	add	r2,r2,r2
   158d4:	29400044 	addi	r5,r5,1
   158d8:	153ffd16 	blt	r2,r20,158d0 <__lshift+0x4c>
   158dc:	8809883a 	mov	r4,r17
   158e0:	0014fec0 	call	14fec <_Balloc>
   158e4:	102b883a 	mov	r21,r2
   158e8:	10004126 	beq	r2,zero,159f0 <__lshift+0x16c>
   158ec:	11000504 	addi	r4,r2,20
   158f0:	0580050e 	bge	zero,r22,15908 <__lshift+0x84>
   158f4:	b02c90ba 	slli	r22,r22,2
   158f8:	000b883a 	mov	r5,zero
   158fc:	b00d883a 	mov	r6,r22
   15900:	0014efc0 	call	14efc <memset>
   15904:	1589883a 	add	r4,r2,r22
   15908:	9a000417 	ldw	r8,16(r19)
   1590c:	98c00504 	addi	r3,r19,20
   15910:	948007cc 	andi	r18,r18,31
   15914:	401090ba 	slli	r8,r8,2
   15918:	1a11883a 	add	r8,r3,r8
   1591c:	90002c26 	beq	r18,zero,159d0 <__lshift+0x14c>
   15920:	01400804 	movi	r5,32
   15924:	2c8bc83a 	sub	r5,r5,r18
   15928:	2005883a 	mov	r2,r4
   1592c:	000f883a 	mov	r7,zero
   15930:	19800017 	ldw	r6,0(r3)
   15934:	10800104 	addi	r2,r2,4
   15938:	18c00104 	addi	r3,r3,4
   1593c:	348c983a 	sll	r6,r6,r18
   15940:	31ccb03a 	or	r6,r6,r7
   15944:	11bfff15 	stw	r6,-4(r2)
   15948:	19bfff17 	ldw	r6,-4(r3)
   1594c:	314ed83a 	srl	r7,r6,r5
   15950:	1a3ff736 	bltu	r3,r8,15930 <__lshift+0xac>
   15954:	98800544 	addi	r2,r19,21
   15958:	40802336 	bltu	r8,r2,159e8 <__lshift+0x164>
   1595c:	44c7c83a 	sub	r3,r8,r19
   15960:	18fffac4 	addi	r3,r3,-21
   15964:	1806d0ba 	srli	r3,r3,2
   15968:	18c00044 	addi	r3,r3,1
   1596c:	180690ba 	slli	r3,r3,2
   15970:	20c9883a 	add	r4,r4,r3
   15974:	21c00015 	stw	r7,0(r4)
   15978:	38000126 	beq	r7,zero,15980 <__lshift+0xfc>
   1597c:	a021883a 	mov	r16,r20
   15980:	ac000415 	stw	r16,16(r21)
   15984:	98000726 	beq	r19,zero,159a4 <__lshift+0x120>
   15988:	98c00117 	ldw	r3,4(r19)
   1598c:	88801317 	ldw	r2,76(r17)
   15990:	180690ba 	slli	r3,r3,2
   15994:	10c5883a 	add	r2,r2,r3
   15998:	10c00017 	ldw	r3,0(r2)
   1599c:	98c00015 	stw	r3,0(r19)
   159a0:	14c00015 	stw	r19,0(r2)
   159a4:	a805883a 	mov	r2,r21
   159a8:	dfc00717 	ldw	ra,28(sp)
   159ac:	dd800617 	ldw	r22,24(sp)
   159b0:	dd400517 	ldw	r21,20(sp)
   159b4:	dd000417 	ldw	r20,16(sp)
   159b8:	dcc00317 	ldw	r19,12(sp)
   159bc:	dc800217 	ldw	r18,8(sp)
   159c0:	dc400117 	ldw	r17,4(sp)
   159c4:	dc000017 	ldw	r16,0(sp)
   159c8:	dec00804 	addi	sp,sp,32
   159cc:	f800283a 	ret
   159d0:	18800017 	ldw	r2,0(r3)
   159d4:	18c00104 	addi	r3,r3,4
   159d8:	21000104 	addi	r4,r4,4
   159dc:	20bfff15 	stw	r2,-4(r4)
   159e0:	1a3ffb36 	bltu	r3,r8,159d0 <__lshift+0x14c>
   159e4:	003fe606 	br	15980 <__lshift+0xfc>
   159e8:	00c00104 	movi	r3,4
   159ec:	003fe006 	br	15970 <__lshift+0xec>
   159f0:	01c000b4 	movhi	r7,2
   159f4:	010000b4 	movhi	r4,2
   159f8:	39c5e404 	addi	r7,r7,6032
   159fc:	000d883a 	mov	r6,zero
   15a00:	01407644 	movi	r5,473
   15a04:	21065204 	addi	r4,r4,6472
   15a08:	0017e800 	call	17e80 <__assert_func>

00015a0c <__mcmp>:
   15a0c:	21800417 	ldw	r6,16(r4)
   15a10:	28c00417 	ldw	r3,16(r5)
   15a14:	30c5c83a 	sub	r2,r6,r3
   15a18:	30c00e1e 	bne	r6,r3,15a54 <__mcmp+0x48>
   15a1c:	180690ba 	slli	r3,r3,2
   15a20:	21c00504 	addi	r7,r4,20
   15a24:	29400504 	addi	r5,r5,20
   15a28:	38c9883a 	add	r4,r7,r3
   15a2c:	28c7883a 	add	r3,r5,r3
   15a30:	00000106 	br	15a38 <__mcmp+0x2c>
   15a34:	3900082e 	bgeu	r7,r4,15a58 <__mcmp+0x4c>
   15a38:	21bfff17 	ldw	r6,-4(r4)
   15a3c:	197fff17 	ldw	r5,-4(r3)
   15a40:	213fff04 	addi	r4,r4,-4
   15a44:	18ffff04 	addi	r3,r3,-4
   15a48:	317ffa26 	beq	r6,r5,15a34 <__mcmp+0x28>
   15a4c:	3140032e 	bgeu	r6,r5,15a5c <__mcmp+0x50>
   15a50:	00bfffc4 	movi	r2,-1
   15a54:	f800283a 	ret
   15a58:	f800283a 	ret
   15a5c:	00800044 	movi	r2,1
   15a60:	f800283a 	ret

00015a64 <__mdiff>:
   15a64:	28800417 	ldw	r2,16(r5)
   15a68:	30c00417 	ldw	r3,16(r6)
   15a6c:	defffc04 	addi	sp,sp,-16
   15a70:	dc800215 	stw	r18,8(sp)
   15a74:	dc400115 	stw	r17,4(sp)
   15a78:	dc000015 	stw	r16,0(sp)
   15a7c:	dfc00315 	stw	ra,12(sp)
   15a80:	2823883a 	mov	r17,r5
   15a84:	3021883a 	mov	r16,r6
   15a88:	10e5c83a 	sub	r18,r2,r3
   15a8c:	10c0641e 	bne	r2,r3,15c20 <__mdiff+0x1bc>
   15a90:	180c90ba 	slli	r6,r3,2
   15a94:	29400504 	addi	r5,r5,20
   15a98:	80c00504 	addi	r3,r16,20
   15a9c:	2985883a 	add	r2,r5,r6
   15aa0:	1987883a 	add	r3,r3,r6
   15aa4:	00000106 	br	15aac <__mdiff+0x48>
   15aa8:	2880642e 	bgeu	r5,r2,15c3c <__mdiff+0x1d8>
   15aac:	11bfff17 	ldw	r6,-4(r2)
   15ab0:	19ffff17 	ldw	r7,-4(r3)
   15ab4:	10bfff04 	addi	r2,r2,-4
   15ab8:	18ffff04 	addi	r3,r3,-4
   15abc:	31fffa26 	beq	r6,r7,15aa8 <__mdiff+0x44>
   15ac0:	31c05236 	bltu	r6,r7,15c0c <__mdiff+0x1a8>
   15ac4:	89400117 	ldw	r5,4(r17)
   15ac8:	0014fec0 	call	14fec <_Balloc>
   15acc:	10006226 	beq	r2,zero,15c58 <__mdiff+0x1f4>
   15ad0:	8a400417 	ldw	r9,16(r17)
   15ad4:	83000417 	ldw	r12,16(r16)
   15ad8:	8ac00504 	addi	r11,r17,20
   15adc:	481090ba 	slli	r8,r9,2
   15ae0:	601890ba 	slli	r12,r12,2
   15ae4:	81800504 	addi	r6,r16,20
   15ae8:	13400504 	addi	r13,r2,20
   15aec:	14800315 	stw	r18,12(r2)
   15af0:	5a11883a 	add	r8,r11,r8
   15af4:	3319883a 	add	r12,r6,r12
   15af8:	681d883a 	mov	r14,r13
   15afc:	5815883a 	mov	r10,r11
   15b00:	0007883a 	mov	r3,zero
   15b04:	51000017 	ldw	r4,0(r10)
   15b08:	31c00017 	ldw	r7,0(r6)
   15b0c:	73800104 	addi	r14,r14,4
   15b10:	217fffcc 	andi	r5,r4,65535
   15b14:	28cb883a 	add	r5,r5,r3
   15b18:	38ffffcc 	andi	r3,r7,65535
   15b1c:	28cbc83a 	sub	r5,r5,r3
   15b20:	380ed43a 	srli	r7,r7,16
   15b24:	2006d43a 	srli	r3,r4,16
   15b28:	2809d43a 	srai	r4,r5,16
   15b2c:	297fffcc 	andi	r5,r5,65535
   15b30:	19c7c83a 	sub	r3,r3,r7
   15b34:	1907883a 	add	r3,r3,r4
   15b38:	1808943a 	slli	r4,r3,16
   15b3c:	31800104 	addi	r6,r6,4
   15b40:	1807d43a 	srai	r3,r3,16
   15b44:	214ab03a 	or	r5,r4,r5
   15b48:	717fff15 	stw	r5,-4(r14)
   15b4c:	52800104 	addi	r10,r10,4
   15b50:	333fec36 	bltu	r6,r12,15b04 <__mdiff+0xa0>
   15b54:	640fc83a 	sub	r7,r12,r16
   15b58:	39fffac4 	addi	r7,r7,-21
   15b5c:	84000544 	addi	r16,r16,21
   15b60:	380ed0ba 	srli	r7,r7,2
   15b64:	64003336 	bltu	r12,r16,15c34 <__mdiff+0x1d0>
   15b68:	380890ba 	slli	r4,r7,2
   15b6c:	6909883a 	add	r4,r13,r4
   15b70:	64002e36 	bltu	r12,r16,15c2c <__mdiff+0x1c8>
   15b74:	39800044 	addi	r6,r7,1
   15b78:	300c90ba 	slli	r6,r6,2
   15b7c:	5997883a 	add	r11,r11,r6
   15b80:	699b883a 	add	r13,r13,r6
   15b84:	5a00152e 	bgeu	r11,r8,15bdc <__mdiff+0x178>
   15b88:	680f883a 	mov	r7,r13
   15b8c:	580d883a 	mov	r6,r11
   15b90:	31000017 	ldw	r4,0(r6)
   15b94:	39c00104 	addi	r7,r7,4
   15b98:	31800104 	addi	r6,r6,4
   15b9c:	217fffcc 	andi	r5,r4,65535
   15ba0:	28cb883a 	add	r5,r5,r3
   15ba4:	2815d43a 	srai	r10,r5,16
   15ba8:	2006d43a 	srli	r3,r4,16
   15bac:	297fffcc 	andi	r5,r5,65535
   15bb0:	1a87883a 	add	r3,r3,r10
   15bb4:	1814943a 	slli	r10,r3,16
   15bb8:	1807d43a 	srai	r3,r3,16
   15bbc:	514ab03a 	or	r5,r10,r5
   15bc0:	397fff15 	stw	r5,-4(r7)
   15bc4:	323ff236 	bltu	r6,r8,15b90 <__mdiff+0x12c>
   15bc8:	413fffc4 	addi	r4,r8,-1
   15bcc:	22c9c83a 	sub	r4,r4,r11
   15bd0:	2008d0ba 	srli	r4,r4,2
   15bd4:	200890ba 	slli	r4,r4,2
   15bd8:	6909883a 	add	r4,r13,r4
   15bdc:	2800041e 	bne	r5,zero,15bf0 <__mdiff+0x18c>
   15be0:	20ffff17 	ldw	r3,-4(r4)
   15be4:	4a7fffc4 	addi	r9,r9,-1
   15be8:	213fff04 	addi	r4,r4,-4
   15bec:	183ffc26 	beq	r3,zero,15be0 <__mdiff+0x17c>
   15bf0:	12400415 	stw	r9,16(r2)
   15bf4:	dfc00317 	ldw	ra,12(sp)
   15bf8:	dc800217 	ldw	r18,8(sp)
   15bfc:	dc400117 	ldw	r17,4(sp)
   15c00:	dc000017 	ldw	r16,0(sp)
   15c04:	dec00404 	addi	sp,sp,16
   15c08:	f800283a 	ret
   15c0c:	8805883a 	mov	r2,r17
   15c10:	04800044 	movi	r18,1
   15c14:	8023883a 	mov	r17,r16
   15c18:	1021883a 	mov	r16,r2
   15c1c:	003fa906 	br	15ac4 <__mdiff+0x60>
   15c20:	903ffa16 	blt	r18,zero,15c0c <__mdiff+0x1a8>
   15c24:	0025883a 	mov	r18,zero
   15c28:	003fa606 	br	15ac4 <__mdiff+0x60>
   15c2c:	01800104 	movi	r6,4
   15c30:	003fd206 	br	15b7c <__mdiff+0x118>
   15c34:	0009883a 	mov	r4,zero
   15c38:	003fcc06 	br	15b6c <__mdiff+0x108>
   15c3c:	000b883a 	mov	r5,zero
   15c40:	0014fec0 	call	14fec <_Balloc>
   15c44:	10000b26 	beq	r2,zero,15c74 <__mdiff+0x210>
   15c48:	00c00044 	movi	r3,1
   15c4c:	10c00415 	stw	r3,16(r2)
   15c50:	10000515 	stw	zero,20(r2)
   15c54:	003fe706 	br	15bf4 <__mdiff+0x190>
   15c58:	01c000b4 	movhi	r7,2
   15c5c:	010000b4 	movhi	r4,2
   15c60:	39c5e404 	addi	r7,r7,6032
   15c64:	000d883a 	mov	r6,zero
   15c68:	01409004 	movi	r5,576
   15c6c:	21065204 	addi	r4,r4,6472
   15c70:	0017e800 	call	17e80 <__assert_func>
   15c74:	01c000b4 	movhi	r7,2
   15c78:	010000b4 	movhi	r4,2
   15c7c:	39c5e404 	addi	r7,r7,6032
   15c80:	000d883a 	mov	r6,zero
   15c84:	01408c84 	movi	r5,562
   15c88:	21065204 	addi	r4,r4,6472
   15c8c:	0017e800 	call	17e80 <__assert_func>

00015c90 <__ulp>:
   15c90:	28dffc2c 	andhi	r3,r5,32752
   15c94:	017f3034 	movhi	r5,64704
   15c98:	1947883a 	add	r3,r3,r5
   15c9c:	00c0020e 	bge	zero,r3,15ca8 <__ulp+0x18>
   15ca0:	0005883a 	mov	r2,zero
   15ca4:	f800283a 	ret
   15ca8:	00c7c83a 	sub	r3,zero,r3
   15cac:	1807d53a 	srai	r3,r3,20
   15cb0:	18800508 	cmpgei	r2,r3,20
   15cb4:	1000041e 	bne	r2,zero,15cc8 <__ulp+0x38>
   15cb8:	00800234 	movhi	r2,8
   15cbc:	10c7d83a 	sra	r3,r2,r3
   15cc0:	0005883a 	mov	r2,zero
   15cc4:	f800283a 	ret
   15cc8:	193ffb04 	addi	r4,r3,-20
   15ccc:	208007c8 	cmpgei	r2,r4,31
   15cd0:	0007883a 	mov	r3,zero
   15cd4:	1000031e 	bne	r2,zero,15ce4 <__ulp+0x54>
   15cd8:	00a00034 	movhi	r2,32768
   15cdc:	1104d83a 	srl	r2,r2,r4
   15ce0:	f800283a 	ret
   15ce4:	00800044 	movi	r2,1
   15ce8:	f800283a 	ret

00015cec <__b2d>:
   15cec:	defffa04 	addi	sp,sp,-24
   15cf0:	dc400115 	stw	r17,4(sp)
   15cf4:	24400417 	ldw	r17,16(r4)
   15cf8:	dc000015 	stw	r16,0(sp)
   15cfc:	24000504 	addi	r16,r4,20
   15d00:	882290ba 	slli	r17,r17,2
   15d04:	dc800215 	stw	r18,8(sp)
   15d08:	dd000415 	stw	r20,16(sp)
   15d0c:	8463883a 	add	r17,r16,r17
   15d10:	8cbfff17 	ldw	r18,-4(r17)
   15d14:	dcc00315 	stw	r19,12(sp)
   15d18:	dfc00515 	stw	ra,20(sp)
   15d1c:	9009883a 	mov	r4,r18
   15d20:	2827883a 	mov	r19,r5
   15d24:	00153240 	call	15324 <__hi0bits>
   15d28:	00c00804 	movi	r3,32
   15d2c:	1889c83a 	sub	r4,r3,r2
   15d30:	99000015 	stw	r4,0(r19)
   15d34:	110002c8 	cmpgei	r4,r2,11
   15d38:	8d3fff04 	addi	r20,r17,-4
   15d3c:	20002026 	beq	r4,zero,15dc0 <__b2d+0xd4>
   15d40:	10bffd44 	addi	r2,r2,-11
   15d44:	85000e2e 	bgeu	r16,r20,15d80 <__b2d+0x94>
   15d48:	897ffe17 	ldw	r5,-8(r17)
   15d4c:	10001226 	beq	r2,zero,15d98 <__b2d+0xac>
   15d50:	1889c83a 	sub	r4,r3,r2
   15d54:	90a4983a 	sll	r18,r18,r2
   15d58:	2906d83a 	srl	r3,r5,r4
   15d5c:	89bffe04 	addi	r6,r17,-8
   15d60:	2884983a 	sll	r2,r5,r2
   15d64:	90e4b03a 	or	r18,r18,r3
   15d68:	90cffc34 	orhi	r3,r18,16368
   15d6c:	81800c2e 	bgeu	r16,r6,15da0 <__b2d+0xb4>
   15d70:	897ffd17 	ldw	r5,-12(r17)
   15d74:	2908d83a 	srl	r4,r5,r4
   15d78:	1104b03a 	or	r2,r2,r4
   15d7c:	00000806 	br	15da0 <__b2d+0xb4>
   15d80:	10000426 	beq	r2,zero,15d94 <__b2d+0xa8>
   15d84:	90a4983a 	sll	r18,r18,r2
   15d88:	0005883a 	mov	r2,zero
   15d8c:	90cffc34 	orhi	r3,r18,16368
   15d90:	00000306 	br	15da0 <__b2d+0xb4>
   15d94:	000b883a 	mov	r5,zero
   15d98:	90cffc34 	orhi	r3,r18,16368
   15d9c:	2805883a 	mov	r2,r5
   15da0:	dfc00517 	ldw	ra,20(sp)
   15da4:	dd000417 	ldw	r20,16(sp)
   15da8:	dcc00317 	ldw	r19,12(sp)
   15dac:	dc800217 	ldw	r18,8(sp)
   15db0:	dc400117 	ldw	r17,4(sp)
   15db4:	dc000017 	ldw	r16,0(sp)
   15db8:	dec00604 	addi	sp,sp,24
   15dbc:	f800283a 	ret
   15dc0:	014002c4 	movi	r5,11
   15dc4:	2889c83a 	sub	r4,r5,r2
   15dc8:	9106d83a 	srl	r3,r18,r4
   15dcc:	18cffc34 	orhi	r3,r3,16368
   15dd0:	85000536 	bltu	r16,r20,15de8 <__b2d+0xfc>
   15dd4:	000b883a 	mov	r5,zero
   15dd8:	10800544 	addi	r2,r2,21
   15ddc:	9084983a 	sll	r2,r18,r2
   15de0:	1144b03a 	or	r2,r2,r5
   15de4:	003fee06 	br	15da0 <__b2d+0xb4>
   15de8:	897ffe17 	ldw	r5,-8(r17)
   15dec:	290ad83a 	srl	r5,r5,r4
   15df0:	003ff906 	br	15dd8 <__b2d+0xec>

00015df4 <__d2b>:
   15df4:	defff804 	addi	sp,sp,-32
   15df8:	dd000615 	stw	r20,24(sp)
   15dfc:	2829883a 	mov	r20,r5
   15e00:	01400044 	movi	r5,1
   15e04:	dcc00515 	stw	r19,20(sp)
   15e08:	dc000215 	stw	r16,8(sp)
   15e0c:	dfc00715 	stw	ra,28(sp)
   15e10:	dc800415 	stw	r18,16(sp)
   15e14:	dc400315 	stw	r17,12(sp)
   15e18:	3021883a 	mov	r16,r6
   15e1c:	3827883a 	mov	r19,r7
   15e20:	0014fec0 	call	14fec <_Balloc>
   15e24:	10004526 	beq	r2,zero,15f3c <__d2b+0x148>
   15e28:	8024d53a 	srli	r18,r16,20
   15e2c:	01800434 	movhi	r6,16
   15e30:	31bfffc4 	addi	r6,r6,-1
   15e34:	9481ffcc 	andi	r18,r18,2047
   15e38:	1023883a 	mov	r17,r2
   15e3c:	81a0703a 	and	r16,r16,r6
   15e40:	90000126 	beq	r18,zero,15e48 <__d2b+0x54>
   15e44:	84000434 	orhi	r16,r16,16
   15e48:	dc000115 	stw	r16,4(sp)
   15e4c:	a0002226 	beq	r20,zero,15ed8 <__d2b+0xe4>
   15e50:	d809883a 	mov	r4,sp
   15e54:	dd000015 	stw	r20,0(sp)
   15e58:	00153880 	call	15388 <__lo0bits>
   15e5c:	d8c00117 	ldw	r3,4(sp)
   15e60:	10003326 	beq	r2,zero,15f30 <__d2b+0x13c>
   15e64:	01000804 	movi	r4,32
   15e68:	2089c83a 	sub	r4,r4,r2
   15e6c:	1908983a 	sll	r4,r3,r4
   15e70:	d9400017 	ldw	r5,0(sp)
   15e74:	1886d83a 	srl	r3,r3,r2
   15e78:	2148b03a 	or	r4,r4,r5
   15e7c:	89000515 	stw	r4,20(r17)
   15e80:	d8c00115 	stw	r3,4(sp)
   15e84:	88c00615 	stw	r3,24(r17)
   15e88:	1800271e 	bne	r3,zero,15f28 <__d2b+0x134>
   15e8c:	04000044 	movi	r16,1
   15e90:	8c000415 	stw	r16,16(r17)
   15e94:	90001926 	beq	r18,zero,15efc <__d2b+0x108>
   15e98:	00c00d44 	movi	r3,53
   15e9c:	94bef344 	addi	r18,r18,-1075
   15ea0:	90a5883a 	add	r18,r18,r2
   15ea4:	1885c83a 	sub	r2,r3,r2
   15ea8:	d8c00817 	ldw	r3,32(sp)
   15eac:	9c800015 	stw	r18,0(r19)
   15eb0:	18800015 	stw	r2,0(r3)
   15eb4:	8805883a 	mov	r2,r17
   15eb8:	dfc00717 	ldw	ra,28(sp)
   15ebc:	dd000617 	ldw	r20,24(sp)
   15ec0:	dcc00517 	ldw	r19,20(sp)
   15ec4:	dc800417 	ldw	r18,16(sp)
   15ec8:	dc400317 	ldw	r17,12(sp)
   15ecc:	dc000217 	ldw	r16,8(sp)
   15ed0:	dec00804 	addi	sp,sp,32
   15ed4:	f800283a 	ret
   15ed8:	d9000104 	addi	r4,sp,4
   15edc:	00153880 	call	15388 <__lo0bits>
   15ee0:	00c00044 	movi	r3,1
   15ee4:	88c00415 	stw	r3,16(r17)
   15ee8:	d8c00117 	ldw	r3,4(sp)
   15eec:	10800804 	addi	r2,r2,32
   15ef0:	04000044 	movi	r16,1
   15ef4:	88c00515 	stw	r3,20(r17)
   15ef8:	903fe71e 	bne	r18,zero,15e98 <__d2b+0xa4>
   15efc:	800690ba 	slli	r3,r16,2
   15f00:	10bef384 	addi	r2,r2,-1074
   15f04:	98800015 	stw	r2,0(r19)
   15f08:	88c5883a 	add	r2,r17,r3
   15f0c:	11000417 	ldw	r4,16(r2)
   15f10:	8020917a 	slli	r16,r16,5
   15f14:	00153240 	call	15324 <__hi0bits>
   15f18:	80a1c83a 	sub	r16,r16,r2
   15f1c:	d8800817 	ldw	r2,32(sp)
   15f20:	14000015 	stw	r16,0(r2)
   15f24:	003fe306 	br	15eb4 <__d2b+0xc0>
   15f28:	04000084 	movi	r16,2
   15f2c:	003fd806 	br	15e90 <__d2b+0x9c>
   15f30:	d9000017 	ldw	r4,0(sp)
   15f34:	89000515 	stw	r4,20(r17)
   15f38:	003fd206 	br	15e84 <__d2b+0x90>
   15f3c:	01c000b4 	movhi	r7,2
   15f40:	010000b4 	movhi	r4,2
   15f44:	39c5e404 	addi	r7,r7,6032
   15f48:	000d883a 	mov	r6,zero
   15f4c:	0140c284 	movi	r5,778
   15f50:	21065204 	addi	r4,r4,6472
   15f54:	0017e800 	call	17e80 <__assert_func>

00015f58 <__ratio>:
   15f58:	defff904 	addi	sp,sp,-28
   15f5c:	dc400315 	stw	r17,12(sp)
   15f60:	2823883a 	mov	r17,r5
   15f64:	d80b883a 	mov	r5,sp
   15f68:	dfc00615 	stw	ra,24(sp)
   15f6c:	dcc00515 	stw	r19,20(sp)
   15f70:	dc800415 	stw	r18,16(sp)
   15f74:	2027883a 	mov	r19,r4
   15f78:	dc000215 	stw	r16,8(sp)
   15f7c:	0015cec0 	call	15cec <__b2d>
   15f80:	d9400104 	addi	r5,sp,4
   15f84:	8809883a 	mov	r4,r17
   15f88:	1025883a 	mov	r18,r2
   15f8c:	1821883a 	mov	r16,r3
   15f90:	0015cec0 	call	15cec <__b2d>
   15f94:	89000417 	ldw	r4,16(r17)
   15f98:	9a000417 	ldw	r8,16(r19)
   15f9c:	d9400117 	ldw	r5,4(sp)
   15fa0:	100d883a 	mov	r6,r2
   15fa4:	4111c83a 	sub	r8,r8,r4
   15fa8:	d9000017 	ldw	r4,0(sp)
   15fac:	4010917a 	slli	r8,r8,5
   15fb0:	180f883a 	mov	r7,r3
   15fb4:	2149c83a 	sub	r4,r4,r5
   15fb8:	4111883a 	add	r8,r8,r4
   15fbc:	02000c0e 	bge	zero,r8,15ff0 <__ratio+0x98>
   15fc0:	4010953a 	slli	r8,r8,20
   15fc4:	4421883a 	add	r16,r8,r16
   15fc8:	9009883a 	mov	r4,r18
   15fcc:	800b883a 	mov	r5,r16
   15fd0:	000ad580 	call	ad58 <__divdf3>
   15fd4:	dfc00617 	ldw	ra,24(sp)
   15fd8:	dcc00517 	ldw	r19,20(sp)
   15fdc:	dc800417 	ldw	r18,16(sp)
   15fe0:	dc400317 	ldw	r17,12(sp)
   15fe4:	dc000217 	ldw	r16,8(sp)
   15fe8:	dec00704 	addi	sp,sp,28
   15fec:	f800283a 	ret
   15ff0:	00bffc34 	movhi	r2,65520
   15ff4:	4091383a 	mul	r8,r8,r2
   15ff8:	40cf883a 	add	r7,r8,r3
   15ffc:	003ff206 	br	15fc8 <__ratio+0x70>

00016000 <_mprec_log10>:
   16000:	defffe04 	addi	sp,sp,-8
   16004:	dc000015 	stw	r16,0(sp)
   16008:	dfc00115 	stw	ra,4(sp)
   1600c:	20800608 	cmpgei	r2,r4,24
   16010:	2021883a 	mov	r16,r4
   16014:	10000f26 	beq	r2,zero,16054 <_mprec_log10+0x54>
   16018:	0009883a 	mov	r4,zero
   1601c:	014ffc34 	movhi	r5,16368
   16020:	000d883a 	mov	r6,zero
   16024:	01d00934 	movhi	r7,16420
   16028:	000b7f80 	call	b7f8 <__muldf3>
   1602c:	843fffc4 	addi	r16,r16,-1
   16030:	1009883a 	mov	r4,r2
   16034:	180b883a 	mov	r5,r3
   16038:	803ff91e 	bne	r16,zero,16020 <_mprec_log10+0x20>
   1603c:	2005883a 	mov	r2,r4
   16040:	2807883a 	mov	r3,r5
   16044:	dfc00117 	ldw	ra,4(sp)
   16048:	dc000017 	ldw	r16,0(sp)
   1604c:	dec00204 	addi	sp,sp,8
   16050:	f800283a 	ret
   16054:	202090fa 	slli	r16,r4,3
   16058:	008000b4 	movhi	r2,2
   1605c:	10867904 	addi	r2,r2,6628
   16060:	1421883a 	add	r16,r2,r16
   16064:	81000017 	ldw	r4,0(r16)
   16068:	81400117 	ldw	r5,4(r16)
   1606c:	003ff306 	br	1603c <_mprec_log10+0x3c>

00016070 <__copybits>:
   16070:	297fffc4 	addi	r5,r5,-1
   16074:	280fd17a 	srai	r7,r5,5
   16078:	31400417 	ldw	r5,16(r6)
   1607c:	30800504 	addi	r2,r6,20
   16080:	39c00044 	addi	r7,r7,1
   16084:	280a90ba 	slli	r5,r5,2
   16088:	380e90ba 	slli	r7,r7,2
   1608c:	114b883a 	add	r5,r2,r5
   16090:	21cf883a 	add	r7,r4,r7
   16094:	11400c2e 	bgeu	r2,r5,160c8 <__copybits+0x58>
   16098:	2007883a 	mov	r3,r4
   1609c:	12000017 	ldw	r8,0(r2)
   160a0:	10800104 	addi	r2,r2,4
   160a4:	18c00104 	addi	r3,r3,4
   160a8:	1a3fff15 	stw	r8,-4(r3)
   160ac:	117ffb36 	bltu	r2,r5,1609c <__copybits+0x2c>
   160b0:	2985c83a 	sub	r2,r5,r6
   160b4:	10bffac4 	addi	r2,r2,-21
   160b8:	1004d0ba 	srli	r2,r2,2
   160bc:	10800044 	addi	r2,r2,1
   160c0:	100490ba 	slli	r2,r2,2
   160c4:	2089883a 	add	r4,r4,r2
   160c8:	21c0072e 	bgeu	r4,r7,160e8 <__copybits+0x78>
   160cc:	39bfffc4 	addi	r6,r7,-1
   160d0:	310dc83a 	sub	r6,r6,r4
   160d4:	300cd0ba 	srli	r6,r6,2
   160d8:	000b883a 	mov	r5,zero
   160dc:	31800044 	addi	r6,r6,1
   160e0:	300c90ba 	slli	r6,r6,2
   160e4:	0014efc1 	jmpi	14efc <memset>
   160e8:	f800283a 	ret

000160ec <__any_on>:
   160ec:	20c00417 	ldw	r3,16(r4)
   160f0:	280dd17a 	srai	r6,r5,5
   160f4:	21000504 	addi	r4,r4,20
   160f8:	1980080e 	bge	r3,r6,1611c <__any_on+0x30>
   160fc:	180490ba 	slli	r2,r3,2
   16100:	2085883a 	add	r2,r4,r2
   16104:	20800f2e 	bgeu	r4,r2,16144 <__any_on+0x58>
   16108:	10ffff17 	ldw	r3,-4(r2)
   1610c:	10bfff04 	addi	r2,r2,-4
   16110:	183ffc26 	beq	r3,zero,16104 <__any_on+0x18>
   16114:	00800044 	movi	r2,1
   16118:	f800283a 	ret
   1611c:	300490ba 	slli	r2,r6,2
   16120:	2085883a 	add	r2,r4,r2
   16124:	30fff70e 	bge	r6,r3,16104 <__any_on+0x18>
   16128:	294007cc 	andi	r5,r5,31
   1612c:	283ff526 	beq	r5,zero,16104 <__any_on+0x18>
   16130:	11800017 	ldw	r6,0(r2)
   16134:	3146d83a 	srl	r3,r6,r5
   16138:	194a983a 	sll	r5,r3,r5
   1613c:	317ff51e 	bne	r6,r5,16114 <__any_on+0x28>
   16140:	003ff006 	br	16104 <__any_on+0x18>
   16144:	0005883a 	mov	r2,zero
   16148:	f800283a 	ret

0001614c <_realloc_r>:
   1614c:	defff604 	addi	sp,sp,-40
   16150:	dc800215 	stw	r18,8(sp)
   16154:	dfc00915 	stw	ra,36(sp)
   16158:	df000815 	stw	fp,32(sp)
   1615c:	ddc00715 	stw	r23,28(sp)
   16160:	dd800615 	stw	r22,24(sp)
   16164:	dd400515 	stw	r21,20(sp)
   16168:	dd000415 	stw	r20,16(sp)
   1616c:	dcc00315 	stw	r19,12(sp)
   16170:	dc400115 	stw	r17,4(sp)
   16174:	dc000015 	stw	r16,0(sp)
   16178:	3025883a 	mov	r18,r6
   1617c:	28008b26 	beq	r5,zero,163ac <_realloc_r+0x260>
   16180:	2821883a 	mov	r16,r5
   16184:	2027883a 	mov	r19,r4
   16188:	944002c4 	addi	r17,r18,11
   1618c:	001a1f40 	call	1a1f4 <__malloc_lock>
   16190:	888005f0 	cmpltui	r2,r17,23
   16194:	1000521e 	bne	r2,zero,162e0 <_realloc_r+0x194>
   16198:	017ffe04 	movi	r5,-8
   1619c:	8962703a 	and	r17,r17,r5
   161a0:	8807883a 	mov	r3,r17
   161a4:	88005116 	blt	r17,zero,162ec <_realloc_r+0x1a0>
   161a8:	8c805036 	bltu	r17,r18,162ec <_realloc_r+0x1a0>
   161ac:	80bfff17 	ldw	r2,-4(r16)
   161b0:	017fff04 	movi	r5,-4
   161b4:	857ffe04 	addi	r21,r16,-8
   161b8:	1168703a 	and	r20,r2,r5
   161bc:	a0c0390e 	bge	r20,r3,162a4 <_realloc_r+0x158>
   161c0:	05c000b4 	movhi	r23,2
   161c4:	bdc89104 	addi	r23,r23,8772
   161c8:	ba000217 	ldw	r8,8(r23)
   161cc:	ad0f883a 	add	r7,r21,r20
   161d0:	39000117 	ldw	r4,4(r7)
   161d4:	41c08e26 	beq	r8,r7,16410 <_realloc_r+0x2c4>
   161d8:	01bfff84 	movi	r6,-2
   161dc:	218c703a 	and	r6,r4,r6
   161e0:	398d883a 	add	r6,r7,r6
   161e4:	31800117 	ldw	r6,4(r6)
   161e8:	3180004c 	andi	r6,r6,1
   161ec:	30004f1e 	bne	r6,zero,1632c <_realloc_r+0x1e0>
   161f0:	2148703a 	and	r4,r4,r5
   161f4:	a10b883a 	add	r5,r20,r4
   161f8:	28c0bb0e 	bge	r5,r3,164e8 <_realloc_r+0x39c>
   161fc:	1080004c 	andi	r2,r2,1
   16200:	10004c1e 	bne	r2,zero,16334 <_realloc_r+0x1e8>
   16204:	873ffe17 	ldw	fp,-8(r16)
   16208:	00bfff04 	movi	r2,-4
   1620c:	af39c83a 	sub	fp,r21,fp
   16210:	e1400117 	ldw	r5,4(fp)
   16214:	288a703a 	and	r5,r5,r2
   16218:	38000426 	beq	r7,zero,1622c <_realloc_r+0xe0>
   1621c:	a16d883a 	add	r22,r20,r5
   16220:	b12d883a 	add	r22,r22,r4
   16224:	41c0ba26 	beq	r8,r7,16510 <_realloc_r+0x3c4>
   16228:	b0c0930e 	bge	r22,r3,16478 <_realloc_r+0x32c>
   1622c:	e0004126 	beq	fp,zero,16334 <_realloc_r+0x1e8>
   16230:	a16d883a 	add	r22,r20,r5
   16234:	b0c03f16 	blt	r22,r3,16334 <_realloc_r+0x1e8>
   16238:	e0800317 	ldw	r2,12(fp)
   1623c:	e0c00217 	ldw	r3,8(fp)
   16240:	a1bfff04 	addi	r6,r20,-4
   16244:	31400968 	cmpgeui	r5,r6,37
   16248:	18800315 	stw	r2,12(r3)
   1624c:	10c00215 	stw	r3,8(r2)
   16250:	e1000204 	addi	r4,fp,8
   16254:	2800941e 	bne	r5,zero,164a8 <_realloc_r+0x35c>
   16258:	30800530 	cmpltui	r2,r6,20
   1625c:	1000db1e 	bne	r2,zero,165cc <_realloc_r+0x480>
   16260:	80c00017 	ldw	r3,0(r16)
   16264:	30800728 	cmpgeui	r2,r6,28
   16268:	e0c00215 	stw	r3,8(fp)
   1626c:	80c00117 	ldw	r3,4(r16)
   16270:	e0c00315 	stw	r3,12(fp)
   16274:	1000d71e 	bne	r2,zero,165d4 <_realloc_r+0x488>
   16278:	84000204 	addi	r16,r16,8
   1627c:	e0800404 	addi	r2,fp,16
   16280:	80c00017 	ldw	r3,0(r16)
   16284:	b029883a 	mov	r20,r22
   16288:	e02b883a 	mov	r21,fp
   1628c:	10c00015 	stw	r3,0(r2)
   16290:	80c00117 	ldw	r3,4(r16)
   16294:	10c00115 	stw	r3,4(r2)
   16298:	80c00217 	ldw	r3,8(r16)
   1629c:	2021883a 	mov	r16,r4
   162a0:	10c00215 	stw	r3,8(r2)
   162a4:	a9800117 	ldw	r6,4(r21)
   162a8:	a447c83a 	sub	r3,r20,r17
   162ac:	19000430 	cmpltui	r4,r3,16
   162b0:	3180004c 	andi	r6,r6,1
   162b4:	ad05883a 	add	r2,r21,r20
   162b8:	20004926 	beq	r4,zero,163e0 <_realloc_r+0x294>
   162bc:	a18cb03a 	or	r6,r20,r6
   162c0:	a9800115 	stw	r6,4(r21)
   162c4:	10c00117 	ldw	r3,4(r2)
   162c8:	18c00054 	ori	r3,r3,1
   162cc:	10c00115 	stw	r3,4(r2)
   162d0:	9809883a 	mov	r4,r19
   162d4:	001a2180 	call	1a218 <__malloc_unlock>
   162d8:	8025883a 	mov	r18,r16
   162dc:	00000606 	br	162f8 <_realloc_r+0x1ac>
   162e0:	04400404 	movi	r17,16
   162e4:	00c00404 	movi	r3,16
   162e8:	8cbfb02e 	bgeu	r17,r18,161ac <_realloc_r+0x60>
   162ec:	00800304 	movi	r2,12
   162f0:	98800015 	stw	r2,0(r19)
   162f4:	0025883a 	mov	r18,zero
   162f8:	9005883a 	mov	r2,r18
   162fc:	dfc00917 	ldw	ra,36(sp)
   16300:	df000817 	ldw	fp,32(sp)
   16304:	ddc00717 	ldw	r23,28(sp)
   16308:	dd800617 	ldw	r22,24(sp)
   1630c:	dd400517 	ldw	r21,20(sp)
   16310:	dd000417 	ldw	r20,16(sp)
   16314:	dcc00317 	ldw	r19,12(sp)
   16318:	dc800217 	ldw	r18,8(sp)
   1631c:	dc400117 	ldw	r17,4(sp)
   16320:	dc000017 	ldw	r16,0(sp)
   16324:	dec00a04 	addi	sp,sp,40
   16328:	f800283a 	ret
   1632c:	1080004c 	andi	r2,r2,1
   16330:	10006826 	beq	r2,zero,164d4 <_realloc_r+0x388>
   16334:	900b883a 	mov	r5,r18
   16338:	9809883a 	mov	r4,r19
   1633c:	000cc800 	call	cc80 <_malloc_r>
   16340:	1025883a 	mov	r18,r2
   16344:	10001626 	beq	r2,zero,163a0 <_realloc_r+0x254>
   16348:	80bfff17 	ldw	r2,-4(r16)
   1634c:	013fff84 	movi	r4,-2
   16350:	90fffe04 	addi	r3,r18,-8
   16354:	1104703a 	and	r2,r2,r4
   16358:	a885883a 	add	r2,r21,r2
   1635c:	10c05826 	beq	r2,r3,164c0 <_realloc_r+0x374>
   16360:	a1bfff04 	addi	r6,r20,-4
   16364:	30800968 	cmpgeui	r2,r6,37
   16368:	1000651e 	bne	r2,zero,16500 <_realloc_r+0x3b4>
   1636c:	30800530 	cmpltui	r2,r6,20
   16370:	10003826 	beq	r2,zero,16454 <_realloc_r+0x308>
   16374:	9005883a 	mov	r2,r18
   16378:	8007883a 	mov	r3,r16
   1637c:	19000017 	ldw	r4,0(r3)
   16380:	11000015 	stw	r4,0(r2)
   16384:	19000117 	ldw	r4,4(r3)
   16388:	11000115 	stw	r4,4(r2)
   1638c:	18c00217 	ldw	r3,8(r3)
   16390:	10c00215 	stw	r3,8(r2)
   16394:	800b883a 	mov	r5,r16
   16398:	9809883a 	mov	r4,r19
   1639c:	001340c0 	call	1340c <_free_r>
   163a0:	9809883a 	mov	r4,r19
   163a4:	001a2180 	call	1a218 <__malloc_unlock>
   163a8:	003fd306 	br	162f8 <_realloc_r+0x1ac>
   163ac:	300b883a 	mov	r5,r6
   163b0:	dfc00917 	ldw	ra,36(sp)
   163b4:	df000817 	ldw	fp,32(sp)
   163b8:	ddc00717 	ldw	r23,28(sp)
   163bc:	dd800617 	ldw	r22,24(sp)
   163c0:	dd400517 	ldw	r21,20(sp)
   163c4:	dd000417 	ldw	r20,16(sp)
   163c8:	dcc00317 	ldw	r19,12(sp)
   163cc:	dc800217 	ldw	r18,8(sp)
   163d0:	dc400117 	ldw	r17,4(sp)
   163d4:	dc000017 	ldw	r16,0(sp)
   163d8:	dec00a04 	addi	sp,sp,40
   163dc:	000cc801 	jmpi	cc80 <_malloc_r>
   163e0:	344cb03a 	or	r6,r6,r17
   163e4:	a9800115 	stw	r6,4(r21)
   163e8:	ac4b883a 	add	r5,r21,r17
   163ec:	18c00054 	ori	r3,r3,1
   163f0:	28c00115 	stw	r3,4(r5)
   163f4:	10c00117 	ldw	r3,4(r2)
   163f8:	29400204 	addi	r5,r5,8
   163fc:	9809883a 	mov	r4,r19
   16400:	18c00054 	ori	r3,r3,1
   16404:	10c00115 	stw	r3,4(r2)
   16408:	001340c0 	call	1340c <_free_r>
   1640c:	003fb006 	br	162d0 <_realloc_r+0x184>
   16410:	2148703a 	and	r4,r4,r5
   16414:	a10b883a 	add	r5,r20,r4
   16418:	89800404 	addi	r6,r17,16
   1641c:	29bf7716 	blt	r5,r6,161fc <_realloc_r+0xb0>
   16420:	ac6b883a 	add	r21,r21,r17
   16424:	2c45c83a 	sub	r2,r5,r17
   16428:	bd400215 	stw	r21,8(r23)
   1642c:	10800054 	ori	r2,r2,1
   16430:	a8800115 	stw	r2,4(r21)
   16434:	80bfff17 	ldw	r2,-4(r16)
   16438:	9809883a 	mov	r4,r19
   1643c:	8025883a 	mov	r18,r16
   16440:	1080004c 	andi	r2,r2,1
   16444:	1462b03a 	or	r17,r2,r17
   16448:	847fff15 	stw	r17,-4(r16)
   1644c:	001a2180 	call	1a218 <__malloc_unlock>
   16450:	003fa906 	br	162f8 <_realloc_r+0x1ac>
   16454:	80c00017 	ldw	r3,0(r16)
   16458:	30800728 	cmpgeui	r2,r6,28
   1645c:	90c00015 	stw	r3,0(r18)
   16460:	80c00117 	ldw	r3,4(r16)
   16464:	90c00115 	stw	r3,4(r18)
   16468:	10004f1e 	bne	r2,zero,165a8 <_realloc_r+0x45c>
   1646c:	80c00204 	addi	r3,r16,8
   16470:	90800204 	addi	r2,r18,8
   16474:	003fc106 	br	1637c <_realloc_r+0x230>
   16478:	38800317 	ldw	r2,12(r7)
   1647c:	38c00217 	ldw	r3,8(r7)
   16480:	a1bfff04 	addi	r6,r20,-4
   16484:	31400968 	cmpgeui	r5,r6,37
   16488:	18800315 	stw	r2,12(r3)
   1648c:	10c00215 	stw	r3,8(r2)
   16490:	e0c00217 	ldw	r3,8(fp)
   16494:	e0800317 	ldw	r2,12(fp)
   16498:	e1000204 	addi	r4,fp,8
   1649c:	18800315 	stw	r2,12(r3)
   164a0:	10c00215 	stw	r3,8(r2)
   164a4:	283f6c26 	beq	r5,zero,16258 <_realloc_r+0x10c>
   164a8:	800b883a 	mov	r5,r16
   164ac:	0014dd00 	call	14dd0 <memmove>
   164b0:	1021883a 	mov	r16,r2
   164b4:	b029883a 	mov	r20,r22
   164b8:	e02b883a 	mov	r21,fp
   164bc:	003f7906 	br	162a4 <_realloc_r+0x158>
   164c0:	90bfff17 	ldw	r2,-4(r18)
   164c4:	00ffff04 	movi	r3,-4
   164c8:	10c4703a 	and	r2,r2,r3
   164cc:	a0a9883a 	add	r20,r20,r2
   164d0:	003f7406 	br	162a4 <_realloc_r+0x158>
   164d4:	873ffe17 	ldw	fp,-8(r16)
   164d8:	af39c83a 	sub	fp,r21,fp
   164dc:	e0800117 	ldw	r2,4(fp)
   164e0:	114a703a 	and	r5,r2,r5
   164e4:	003f5106 	br	1622c <_realloc_r+0xe0>
   164e8:	38800317 	ldw	r2,12(r7)
   164ec:	38c00217 	ldw	r3,8(r7)
   164f0:	2829883a 	mov	r20,r5
   164f4:	18800315 	stw	r2,12(r3)
   164f8:	10c00215 	stw	r3,8(r2)
   164fc:	003f6906 	br	162a4 <_realloc_r+0x158>
   16500:	800b883a 	mov	r5,r16
   16504:	9009883a 	mov	r4,r18
   16508:	0014dd00 	call	14dd0 <memmove>
   1650c:	003fa106 	br	16394 <_realloc_r+0x248>
   16510:	88800404 	addi	r2,r17,16
   16514:	b0bf4516 	blt	r22,r2,1622c <_realloc_r+0xe0>
   16518:	e0800317 	ldw	r2,12(fp)
   1651c:	e0c00217 	ldw	r3,8(fp)
   16520:	a1bfff04 	addi	r6,r20,-4
   16524:	31000968 	cmpgeui	r4,r6,37
   16528:	18800315 	stw	r2,12(r3)
   1652c:	10c00215 	stw	r3,8(r2)
   16530:	e4800204 	addi	r18,fp,8
   16534:	2000391e 	bne	r4,zero,1661c <_realloc_r+0x4d0>
   16538:	30800530 	cmpltui	r2,r6,20
   1653c:	1000351e 	bne	r2,zero,16614 <_realloc_r+0x4c8>
   16540:	80c00017 	ldw	r3,0(r16)
   16544:	30800728 	cmpgeui	r2,r6,28
   16548:	e0c00215 	stw	r3,8(fp)
   1654c:	80c00117 	ldw	r3,4(r16)
   16550:	e0c00315 	stw	r3,12(fp)
   16554:	10003c1e 	bne	r2,zero,16648 <_realloc_r+0x4fc>
   16558:	84000204 	addi	r16,r16,8
   1655c:	e0800404 	addi	r2,fp,16
   16560:	80c00017 	ldw	r3,0(r16)
   16564:	10c00015 	stw	r3,0(r2)
   16568:	80c00117 	ldw	r3,4(r16)
   1656c:	10c00115 	stw	r3,4(r2)
   16570:	80c00217 	ldw	r3,8(r16)
   16574:	10c00215 	stw	r3,8(r2)
   16578:	e447883a 	add	r3,fp,r17
   1657c:	b445c83a 	sub	r2,r22,r17
   16580:	b8c00215 	stw	r3,8(r23)
   16584:	10800054 	ori	r2,r2,1
   16588:	18800115 	stw	r2,4(r3)
   1658c:	e0800117 	ldw	r2,4(fp)
   16590:	9809883a 	mov	r4,r19
   16594:	1080004c 	andi	r2,r2,1
   16598:	1462b03a 	or	r17,r2,r17
   1659c:	e4400115 	stw	r17,4(fp)
   165a0:	001a2180 	call	1a218 <__malloc_unlock>
   165a4:	003f5406 	br	162f8 <_realloc_r+0x1ac>
   165a8:	80800217 	ldw	r2,8(r16)
   165ac:	31800920 	cmpeqi	r6,r6,36
   165b0:	90800215 	stw	r2,8(r18)
   165b4:	80800317 	ldw	r2,12(r16)
   165b8:	90800315 	stw	r2,12(r18)
   165bc:	30000e1e 	bne	r6,zero,165f8 <_realloc_r+0x4ac>
   165c0:	80c00404 	addi	r3,r16,16
   165c4:	90800404 	addi	r2,r18,16
   165c8:	003f6c06 	br	1637c <_realloc_r+0x230>
   165cc:	2005883a 	mov	r2,r4
   165d0:	003f2b06 	br	16280 <_realloc_r+0x134>
   165d4:	80800217 	ldw	r2,8(r16)
   165d8:	31800920 	cmpeqi	r6,r6,36
   165dc:	e0800415 	stw	r2,16(fp)
   165e0:	80800317 	ldw	r2,12(r16)
   165e4:	e0800515 	stw	r2,20(fp)
   165e8:	3000101e 	bne	r6,zero,1662c <_realloc_r+0x4e0>
   165ec:	84000404 	addi	r16,r16,16
   165f0:	e0800604 	addi	r2,fp,24
   165f4:	003f2206 	br	16280 <_realloc_r+0x134>
   165f8:	81000417 	ldw	r4,16(r16)
   165fc:	80c00604 	addi	r3,r16,24
   16600:	90800604 	addi	r2,r18,24
   16604:	91000415 	stw	r4,16(r18)
   16608:	81000517 	ldw	r4,20(r16)
   1660c:	91000515 	stw	r4,20(r18)
   16610:	003f5a06 	br	1637c <_realloc_r+0x230>
   16614:	9005883a 	mov	r2,r18
   16618:	003fd106 	br	16560 <_realloc_r+0x414>
   1661c:	800b883a 	mov	r5,r16
   16620:	9009883a 	mov	r4,r18
   16624:	0014dd00 	call	14dd0 <memmove>
   16628:	003fd306 	br	16578 <_realloc_r+0x42c>
   1662c:	80c00417 	ldw	r3,16(r16)
   16630:	84000604 	addi	r16,r16,24
   16634:	e0800804 	addi	r2,fp,32
   16638:	e0c00615 	stw	r3,24(fp)
   1663c:	80ffff17 	ldw	r3,-4(r16)
   16640:	e0c00715 	stw	r3,28(fp)
   16644:	003f0e06 	br	16280 <_realloc_r+0x134>
   16648:	80800217 	ldw	r2,8(r16)
   1664c:	31800920 	cmpeqi	r6,r6,36
   16650:	e0800415 	stw	r2,16(fp)
   16654:	80800317 	ldw	r2,12(r16)
   16658:	e0800515 	stw	r2,20(fp)
   1665c:	3000031e 	bne	r6,zero,1666c <_realloc_r+0x520>
   16660:	84000404 	addi	r16,r16,16
   16664:	e0800604 	addi	r2,fp,24
   16668:	003fbd06 	br	16560 <_realloc_r+0x414>
   1666c:	80c00417 	ldw	r3,16(r16)
   16670:	84000604 	addi	r16,r16,24
   16674:	e0800804 	addi	r2,fp,32
   16678:	e0c00615 	stw	r3,24(fp)
   1667c:	80ffff17 	ldw	r3,-4(r16)
   16680:	e0c00715 	stw	r3,28(fp)
   16684:	003fb606 	br	16560 <_realloc_r+0x414>

00016688 <__sread>:
   16688:	defffe04 	addi	sp,sp,-8
   1668c:	dc000015 	stw	r16,0(sp)
   16690:	2821883a 	mov	r16,r5
   16694:	2940038f 	ldh	r5,14(r5)
   16698:	dfc00115 	stw	ra,4(sp)
   1669c:	00184e80 	call	184e8 <_read_r>
   166a0:	10000716 	blt	r2,zero,166c0 <__sread+0x38>
   166a4:	80c01417 	ldw	r3,80(r16)
   166a8:	1887883a 	add	r3,r3,r2
   166ac:	80c01415 	stw	r3,80(r16)
   166b0:	dfc00117 	ldw	ra,4(sp)
   166b4:	dc000017 	ldw	r16,0(sp)
   166b8:	dec00204 	addi	sp,sp,8
   166bc:	f800283a 	ret
   166c0:	80c0030b 	ldhu	r3,12(r16)
   166c4:	18fbffcc 	andi	r3,r3,61439
   166c8:	80c0030d 	sth	r3,12(r16)
   166cc:	dfc00117 	ldw	ra,4(sp)
   166d0:	dc000017 	ldw	r16,0(sp)
   166d4:	dec00204 	addi	sp,sp,8
   166d8:	f800283a 	ret

000166dc <__seofread>:
   166dc:	0005883a 	mov	r2,zero
   166e0:	f800283a 	ret

000166e4 <__swrite>:
   166e4:	2880030b 	ldhu	r2,12(r5)
   166e8:	defffb04 	addi	sp,sp,-20
   166ec:	dcc00315 	stw	r19,12(sp)
   166f0:	dc800215 	stw	r18,8(sp)
   166f4:	dc400115 	stw	r17,4(sp)
   166f8:	dc000015 	stw	r16,0(sp)
   166fc:	dfc00415 	stw	ra,16(sp)
   16700:	10c0400c 	andi	r3,r2,256
   16704:	2821883a 	mov	r16,r5
   16708:	2023883a 	mov	r17,r4
   1670c:	3025883a 	mov	r18,r6
   16710:	3827883a 	mov	r19,r7
   16714:	18000d1e 	bne	r3,zero,1674c <__swrite+0x68>
   16718:	8140038f 	ldh	r5,14(r16)
   1671c:	10bbffcc 	andi	r2,r2,61439
   16720:	980f883a 	mov	r7,r19
   16724:	900d883a 	mov	r6,r18
   16728:	8809883a 	mov	r4,r17
   1672c:	8080030d 	sth	r2,12(r16)
   16730:	dfc00417 	ldw	ra,16(sp)
   16734:	dcc00317 	ldw	r19,12(sp)
   16738:	dc800217 	ldw	r18,8(sp)
   1673c:	dc400117 	ldw	r17,4(sp)
   16740:	dc000017 	ldw	r16,0(sp)
   16744:	dec00504 	addi	sp,sp,20
   16748:	0017dc41 	jmpi	17dc4 <_write_r>
   1674c:	2940038f 	ldh	r5,14(r5)
   16750:	01c00084 	movi	r7,2
   16754:	000d883a 	mov	r6,zero
   16758:	00184840 	call	18484 <_lseek_r>
   1675c:	8080030b 	ldhu	r2,12(r16)
   16760:	003fed06 	br	16718 <__swrite+0x34>

00016764 <__sseek>:
   16764:	defffe04 	addi	sp,sp,-8
   16768:	dc000015 	stw	r16,0(sp)
   1676c:	2821883a 	mov	r16,r5
   16770:	2940038f 	ldh	r5,14(r5)
   16774:	dfc00115 	stw	ra,4(sp)
   16778:	00184840 	call	18484 <_lseek_r>
   1677c:	10ffffd8 	cmpnei	r3,r2,-1
   16780:	18000826 	beq	r3,zero,167a4 <__sseek+0x40>
   16784:	80c0030b 	ldhu	r3,12(r16)
   16788:	80801415 	stw	r2,80(r16)
   1678c:	18c40014 	ori	r3,r3,4096
   16790:	80c0030d 	sth	r3,12(r16)
   16794:	dfc00117 	ldw	ra,4(sp)
   16798:	dc000017 	ldw	r16,0(sp)
   1679c:	dec00204 	addi	sp,sp,8
   167a0:	f800283a 	ret
   167a4:	80c0030b 	ldhu	r3,12(r16)
   167a8:	18fbffcc 	andi	r3,r3,61439
   167ac:	80c0030d 	sth	r3,12(r16)
   167b0:	dfc00117 	ldw	ra,4(sp)
   167b4:	dc000017 	ldw	r16,0(sp)
   167b8:	dec00204 	addi	sp,sp,8
   167bc:	f800283a 	ret

000167c0 <__sclose>:
   167c0:	2940038f 	ldh	r5,14(r5)
   167c4:	0017e281 	jmpi	17e28 <_close_r>

000167c8 <strcmp>:
   167c8:	2144b03a 	or	r2,r4,r5
   167cc:	108000cc 	andi	r2,r2,3
   167d0:	1000141e 	bne	r2,zero,16824 <strcmp+0x5c>
   167d4:	20800017 	ldw	r2,0(r4)
   167d8:	28c00017 	ldw	r3,0(r5)
   167dc:	10c0111e 	bne	r2,r3,16824 <strcmp+0x5c>
   167e0:	01ffbff4 	movhi	r7,65279
   167e4:	01a02074 	movhi	r6,32897
   167e8:	39ffbfc4 	addi	r7,r7,-257
   167ec:	31a02004 	addi	r6,r6,-32640
   167f0:	00000306 	br	16800 <strcmp+0x38>
   167f4:	20800017 	ldw	r2,0(r4)
   167f8:	28c00017 	ldw	r3,0(r5)
   167fc:	10c0091e 	bne	r2,r3,16824 <strcmp+0x5c>
   16800:	11c7883a 	add	r3,r2,r7
   16804:	0084303a 	nor	r2,zero,r2
   16808:	1884703a 	and	r2,r3,r2
   1680c:	1184703a 	and	r2,r2,r6
   16810:	21000104 	addi	r4,r4,4
   16814:	29400104 	addi	r5,r5,4
   16818:	103ff626 	beq	r2,zero,167f4 <strcmp+0x2c>
   1681c:	0005883a 	mov	r2,zero
   16820:	f800283a 	ret
   16824:	20c00003 	ldbu	r3,0(r4)
   16828:	18803fcc 	andi	r2,r3,255
   1682c:	1080201c 	xori	r2,r2,128
   16830:	10bfe004 	addi	r2,r2,-128
   16834:	1000071e 	bne	r2,zero,16854 <strcmp+0x8c>
   16838:	00000a06 	br	16864 <strcmp+0x9c>
   1683c:	20c00003 	ldbu	r3,0(r4)
   16840:	29400044 	addi	r5,r5,1
   16844:	18803fcc 	andi	r2,r3,255
   16848:	1080201c 	xori	r2,r2,128
   1684c:	10bfe004 	addi	r2,r2,-128
   16850:	10000726 	beq	r2,zero,16870 <strcmp+0xa8>
   16854:	29800007 	ldb	r6,0(r5)
   16858:	21000044 	addi	r4,r4,1
   1685c:	30bff726 	beq	r6,r2,1683c <strcmp+0x74>
   16860:	18803fcc 	andi	r2,r3,255
   16864:	28c00003 	ldbu	r3,0(r5)
   16868:	10c5c83a 	sub	r2,r2,r3
   1686c:	f800283a 	ret
   16870:	28c00003 	ldbu	r3,0(r5)
   16874:	0005883a 	mov	r2,zero
   16878:	10c5c83a 	sub	r2,r2,r3
   1687c:	f800283a 	ret

00016880 <strncmp>:
   16880:	30003126 	beq	r6,zero,16948 <strncmp+0xc8>
   16884:	2144b03a 	or	r2,r4,r5
   16888:	108000cc 	andi	r2,r2,3
   1688c:	10001d1e 	bne	r2,zero,16904 <strncmp+0x84>
   16890:	30800128 	cmpgeui	r2,r6,4
   16894:	10001b26 	beq	r2,zero,16904 <strncmp+0x84>
   16898:	02bfbff4 	movhi	r10,65279
   1689c:	02602074 	movhi	r9,32897
   168a0:	52bfbfc4 	addi	r10,r10,-257
   168a4:	4a602004 	addi	r9,r9,-32640
   168a8:	00000706 	br	168c8 <strncmp+0x48>
   168ac:	31bfff04 	addi	r6,r6,-4
   168b0:	30c00130 	cmpltui	r3,r6,4
   168b4:	30002426 	beq	r6,zero,16948 <strncmp+0xc8>
   168b8:	1000231e 	bne	r2,zero,16948 <strncmp+0xc8>
   168bc:	21000104 	addi	r4,r4,4
   168c0:	29400104 	addi	r5,r5,4
   168c4:	18000f1e 	bne	r3,zero,16904 <strncmp+0x84>
   168c8:	20c00017 	ldw	r3,0(r4)
   168cc:	29c00017 	ldw	r7,0(r5)
   168d0:	1a85883a 	add	r2,r3,r10
   168d4:	00d0303a 	nor	r8,zero,r3
   168d8:	1204703a 	and	r2,r2,r8
   168dc:	1244703a 	and	r2,r2,r9
   168e0:	19fff226 	beq	r3,r7,168ac <strncmp+0x2c>
   168e4:	21c00007 	ldb	r7,0(r4)
   168e8:	28800007 	ldb	r2,0(r5)
   168ec:	38800a26 	beq	r7,r2,16918 <strncmp+0x98>
   168f0:	2807883a 	mov	r3,r5
   168f4:	20800003 	ldbu	r2,0(r4)
   168f8:	18c00003 	ldbu	r3,0(r3)
   168fc:	10c5c83a 	sub	r2,r2,r3
   16900:	f800283a 	ret
   16904:	21c00007 	ldb	r7,0(r4)
   16908:	28800007 	ldb	r2,0(r5)
   1690c:	38bff81e 	bne	r7,r2,168f0 <strncmp+0x70>
   16910:	30800060 	cmpeqi	r2,r6,1
   16914:	10000c1e 	bne	r2,zero,16948 <strncmp+0xc8>
   16918:	2807883a 	mov	r3,r5
   1691c:	00000406 	br	16930 <strncmp+0xb0>
   16920:	21c00007 	ldb	r7,0(r4)
   16924:	1a000007 	ldb	r8,0(r3)
   16928:	3a3ff21e 	bne	r7,r8,168f4 <strncmp+0x74>
   1692c:	10000626 	beq	r2,zero,16948 <strncmp+0xc8>
   16930:	18c00044 	addi	r3,r3,1
   16934:	00c4303a 	nor	r2,zero,r3
   16938:	1185883a 	add	r2,r2,r6
   1693c:	21000044 	addi	r4,r4,1
   16940:	2885883a 	add	r2,r5,r2
   16944:	383ff61e 	bne	r7,zero,16920 <strncmp+0xa0>
   16948:	0005883a 	mov	r2,zero
   1694c:	f800283a 	ret

00016950 <__sprint_r.part.0>:
   16950:	28801917 	ldw	r2,100(r5)
   16954:	defff604 	addi	sp,sp,-40
   16958:	dcc00315 	stw	r19,12(sp)
   1695c:	dfc00915 	stw	ra,36(sp)
   16960:	df000815 	stw	fp,32(sp)
   16964:	ddc00715 	stw	r23,28(sp)
   16968:	dd800615 	stw	r22,24(sp)
   1696c:	dd400515 	stw	r21,20(sp)
   16970:	dd000415 	stw	r20,16(sp)
   16974:	dc800215 	stw	r18,8(sp)
   16978:	dc400115 	stw	r17,4(sp)
   1697c:	dc000015 	stw	r16,0(sp)
   16980:	1088000c 	andi	r2,r2,8192
   16984:	3027883a 	mov	r19,r6
   16988:	10002c26 	beq	r2,zero,16a3c <__sprint_r.part.0+0xec>
   1698c:	30800217 	ldw	r2,8(r6)
   16990:	35000017 	ldw	r20,0(r6)
   16994:	2821883a 	mov	r16,r5
   16998:	2023883a 	mov	r17,r4
   1699c:	05bfff04 	movi	r22,-4
   169a0:	10002426 	beq	r2,zero,16a34 <__sprint_r.part.0+0xe4>
   169a4:	a5400117 	ldw	r21,4(r20)
   169a8:	a5c00017 	ldw	r23,0(r20)
   169ac:	a824d0ba 	srli	r18,r21,2
   169b0:	90001b26 	beq	r18,zero,16a20 <__sprint_r.part.0+0xd0>
   169b4:	0039883a 	mov	fp,zero
   169b8:	00000206 	br	169c4 <__sprint_r.part.0+0x74>
   169bc:	bdc00104 	addi	r23,r23,4
   169c0:	97001626 	beq	r18,fp,16a1c <__sprint_r.part.0+0xcc>
   169c4:	b9400017 	ldw	r5,0(r23)
   169c8:	800d883a 	mov	r6,r16
   169cc:	8809883a 	mov	r4,r17
   169d0:	00183300 	call	18330 <_fputwc_r>
   169d4:	10bfffe0 	cmpeqi	r2,r2,-1
   169d8:	e7000044 	addi	fp,fp,1
   169dc:	103ff726 	beq	r2,zero,169bc <__sprint_r.part.0+0x6c>
   169e0:	00bfffc4 	movi	r2,-1
   169e4:	98000215 	stw	zero,8(r19)
   169e8:	98000115 	stw	zero,4(r19)
   169ec:	dfc00917 	ldw	ra,36(sp)
   169f0:	df000817 	ldw	fp,32(sp)
   169f4:	ddc00717 	ldw	r23,28(sp)
   169f8:	dd800617 	ldw	r22,24(sp)
   169fc:	dd400517 	ldw	r21,20(sp)
   16a00:	dd000417 	ldw	r20,16(sp)
   16a04:	dcc00317 	ldw	r19,12(sp)
   16a08:	dc800217 	ldw	r18,8(sp)
   16a0c:	dc400117 	ldw	r17,4(sp)
   16a10:	dc000017 	ldw	r16,0(sp)
   16a14:	dec00a04 	addi	sp,sp,40
   16a18:	f800283a 	ret
   16a1c:	98800217 	ldw	r2,8(r19)
   16a20:	adaa703a 	and	r21,r21,r22
   16a24:	1545c83a 	sub	r2,r2,r21
   16a28:	98800215 	stw	r2,8(r19)
   16a2c:	a5000204 	addi	r20,r20,8
   16a30:	103fdc1e 	bne	r2,zero,169a4 <__sprint_r.part.0+0x54>
   16a34:	0005883a 	mov	r2,zero
   16a38:	003fea06 	br	169e4 <__sprint_r.part.0+0x94>
   16a3c:	00137080 	call	13708 <__sfvwrite_r>
   16a40:	003fe806 	br	169e4 <__sprint_r.part.0+0x94>

00016a44 <__sprint_r>:
   16a44:	30c00217 	ldw	r3,8(r6)
   16a48:	18000126 	beq	r3,zero,16a50 <__sprint_r+0xc>
   16a4c:	00169501 	jmpi	16950 <__sprint_r.part.0>
   16a50:	30000115 	stw	zero,4(r6)
   16a54:	0005883a 	mov	r2,zero
   16a58:	f800283a 	ret

00016a5c <___vfiprintf_internal_r>:
   16a5c:	deffcf04 	addi	sp,sp,-196
   16a60:	dd802d15 	stw	r22,180(sp)
   16a64:	dd402c15 	stw	r21,176(sp)
   16a68:	dd002b15 	stw	r20,172(sp)
   16a6c:	dfc03015 	stw	ra,192(sp)
   16a70:	df002f15 	stw	fp,188(sp)
   16a74:	ddc02e15 	stw	r23,184(sp)
   16a78:	dcc02a15 	stw	r19,168(sp)
   16a7c:	dc802915 	stw	r18,164(sp)
   16a80:	dc402815 	stw	r17,160(sp)
   16a84:	dc002715 	stw	r16,156(sp)
   16a88:	d9c00415 	stw	r7,16(sp)
   16a8c:	202d883a 	mov	r22,r4
   16a90:	282b883a 	mov	r21,r5
   16a94:	3029883a 	mov	r20,r6
   16a98:	20000226 	beq	r4,zero,16aa4 <___vfiprintf_internal_r+0x48>
   16a9c:	20800e17 	ldw	r2,56(r4)
   16aa0:	1001b826 	beq	r2,zero,17184 <___vfiprintf_internal_r+0x728>
   16aa4:	a880030b 	ldhu	r2,12(r21)
   16aa8:	10c8000c 	andi	r3,r2,8192
   16aac:	1800061e 	bne	r3,zero,16ac8 <___vfiprintf_internal_r+0x6c>
   16ab0:	a8c01917 	ldw	r3,100(r21)
   16ab4:	0137ffc4 	movi	r4,-8193
   16ab8:	10880014 	ori	r2,r2,8192
   16abc:	1906703a 	and	r3,r3,r4
   16ac0:	a880030d 	sth	r2,12(r21)
   16ac4:	a8c01915 	stw	r3,100(r21)
   16ac8:	10c0020c 	andi	r3,r2,8
   16acc:	18010326 	beq	r3,zero,16edc <___vfiprintf_internal_r+0x480>
   16ad0:	a8c00417 	ldw	r3,16(r21)
   16ad4:	18010126 	beq	r3,zero,16edc <___vfiprintf_internal_r+0x480>
   16ad8:	1080068c 	andi	r2,r2,26
   16adc:	10800298 	cmpnei	r2,r2,10
   16ae0:	10010626 	beq	r2,zero,16efc <___vfiprintf_internal_r+0x4a0>
   16ae4:	dc801704 	addi	r18,sp,92
   16ae8:	dc800a15 	stw	r18,40(sp)
   16aec:	d8000c15 	stw	zero,48(sp)
   16af0:	d8000b15 	stw	zero,44(sp)
   16af4:	9021883a 	mov	r16,r18
   16af8:	d8000515 	stw	zero,20(sp)
   16afc:	d8000115 	stw	zero,4(sp)
   16b00:	a0800007 	ldb	r2,0(r20)
   16b04:	1000e326 	beq	r2,zero,16e94 <___vfiprintf_internal_r+0x438>
   16b08:	a023883a 	mov	r17,r20
   16b0c:	00000306 	br	16b1c <___vfiprintf_internal_r+0xc0>
   16b10:	88800047 	ldb	r2,1(r17)
   16b14:	8c400044 	addi	r17,r17,1
   16b18:	10012e26 	beq	r2,zero,16fd4 <___vfiprintf_internal_r+0x578>
   16b1c:	10800958 	cmpnei	r2,r2,37
   16b20:	103ffb1e 	bne	r2,zero,16b10 <___vfiprintf_internal_r+0xb4>
   16b24:	8d27c83a 	sub	r19,r17,r20
   16b28:	8d012c1e 	bne	r17,r20,16fdc <___vfiprintf_internal_r+0x580>
   16b2c:	88800003 	ldbu	r2,0(r17)
   16b30:	10803fcc 	andi	r2,r2,255
   16b34:	1080201c 	xori	r2,r2,128
   16b38:	10bfe004 	addi	r2,r2,-128
   16b3c:	1000d526 	beq	r2,zero,16e94 <___vfiprintf_internal_r+0x438>
   16b40:	88800047 	ldb	r2,1(r17)
   16b44:	8d000044 	addi	r20,r17,1
   16b48:	d8000945 	stb	zero,37(sp)
   16b4c:	000b883a 	mov	r5,zero
   16b50:	000d883a 	mov	r6,zero
   16b54:	023fffc4 	movi	r8,-1
   16b58:	0023883a 	mov	r17,zero
   16b5c:	001b883a 	mov	r13,zero
   16b60:	a5000044 	addi	r20,r20,1
   16b64:	10fff804 	addi	r3,r2,-32
   16b68:	19001668 	cmpgeui	r4,r3,89
   16b6c:	20006a1e 	bne	r4,zero,16d18 <___vfiprintf_internal_r+0x2bc>
   16b70:	180690ba 	slli	r3,r3,2
   16b74:	01000074 	movhi	r4,1
   16b78:	1909883a 	add	r4,r3,r4
   16b7c:	20dae117 	ldw	r3,27524(r4)
   16b80:	1800683a 	jmp	r3
   16b84:	0001739c 	xori	zero,zero,1486
   16b88:	00016d18 	cmpnei	zero,zero,1460
   16b8c:	00016d18 	cmpnei	zero,zero,1460
   16b90:	00017390 	cmplti	zero,zero,1486
   16b94:	00016d18 	cmpnei	zero,zero,1460
   16b98:	00016d18 	cmpnei	zero,zero,1460
   16b9c:	00016d18 	cmpnei	zero,zero,1460
   16ba0:	00016d18 	cmpnei	zero,zero,1460
   16ba4:	00016d18 	cmpnei	zero,zero,1460
   16ba8:	00016d18 	cmpnei	zero,zero,1460
   16bac:	00017200 	call	1720 <kf_work+0x1ac>
   16bb0:	00017380 	call	1738 <kf_work+0x1c4>
   16bb4:	00016d18 	cmpnei	zero,zero,1460
   16bb8:	00017218 	cmpnei	zero,zero,1480
   16bbc:	00017224 	muli	zero,zero,1480
   16bc0:	00016d18 	cmpnei	zero,zero,1460
   16bc4:	00017374 	movhi	zero,1485
   16bc8:	00016ce8 	cmpgeui	zero,zero,1459
   16bcc:	00016ce8 	cmpgeui	zero,zero,1459
   16bd0:	00016ce8 	cmpgeui	zero,zero,1459
   16bd4:	00016ce8 	cmpgeui	zero,zero,1459
   16bd8:	00016ce8 	cmpgeui	zero,zero,1459
   16bdc:	00016ce8 	cmpgeui	zero,zero,1459
   16be0:	00016ce8 	cmpgeui	zero,zero,1459
   16be4:	00016ce8 	cmpgeui	zero,zero,1459
   16be8:	00016ce8 	cmpgeui	zero,zero,1459
   16bec:	00016d18 	cmpnei	zero,zero,1460
   16bf0:	00016d18 	cmpnei	zero,zero,1460
   16bf4:	00016d18 	cmpnei	zero,zero,1460
   16bf8:	00016d18 	cmpnei	zero,zero,1460
   16bfc:	00016d18 	cmpnei	zero,zero,1460
   16c00:	00016d18 	cmpnei	zero,zero,1460
   16c04:	00016d18 	cmpnei	zero,zero,1460
   16c08:	00016d18 	cmpnei	zero,zero,1460
   16c0c:	00016d18 	cmpnei	zero,zero,1460
   16c10:	00016d18 	cmpnei	zero,zero,1460
   16c14:	00017268 	cmpgeui	zero,zero,1481
   16c18:	00016d18 	cmpnei	zero,zero,1460
   16c1c:	00016d18 	cmpnei	zero,zero,1460
   16c20:	00016d18 	cmpnei	zero,zero,1460
   16c24:	00016d18 	cmpnei	zero,zero,1460
   16c28:	00016d18 	cmpnei	zero,zero,1460
   16c2c:	00016d18 	cmpnei	zero,zero,1460
   16c30:	00016d18 	cmpnei	zero,zero,1460
   16c34:	00016d18 	cmpnei	zero,zero,1460
   16c38:	00016d18 	cmpnei	zero,zero,1460
   16c3c:	00016d18 	cmpnei	zero,zero,1460
   16c40:	00016f6c 	andhi	zero,zero,1469
   16c44:	00016d18 	cmpnei	zero,zero,1460
   16c48:	00016d18 	cmpnei	zero,zero,1460
   16c4c:	00016d18 	cmpnei	zero,zero,1460
   16c50:	00016d18 	cmpnei	zero,zero,1460
   16c54:	00016d18 	cmpnei	zero,zero,1460
   16c58:	00016f44 	movi	zero,1469
   16c5c:	00016d18 	cmpnei	zero,zero,1460
   16c60:	00016d18 	cmpnei	zero,zero,1460
   16c64:	0001746c 	andhi	zero,zero,1489
   16c68:	00016d18 	cmpnei	zero,zero,1460
   16c6c:	00016d18 	cmpnei	zero,zero,1460
   16c70:	00016d18 	cmpnei	zero,zero,1460
   16c74:	00016d18 	cmpnei	zero,zero,1460
   16c78:	00016d18 	cmpnei	zero,zero,1460
   16c7c:	00016d18 	cmpnei	zero,zero,1460
   16c80:	00016d18 	cmpnei	zero,zero,1460
   16c84:	00016d18 	cmpnei	zero,zero,1460
   16c88:	00016d18 	cmpnei	zero,zero,1460
   16c8c:	00016d18 	cmpnei	zero,zero,1460
   16c90:	00017444 	movi	zero,1489
   16c94:	0001718c 	andi	zero,zero,1478
   16c98:	00016d18 	cmpnei	zero,zero,1460
   16c9c:	00016d18 	cmpnei	zero,zero,1460
   16ca0:	00016d18 	cmpnei	zero,zero,1460
   16ca4:	000173e4 	muli	zero,zero,1487
   16ca8:	0001718c 	andi	zero,zero,1478
   16cac:	00016d18 	cmpnei	zero,zero,1460
   16cb0:	00016d18 	cmpnei	zero,zero,1460
   16cb4:	00017430 	cmpltui	zero,zero,1488
   16cb8:	00016d18 	cmpnei	zero,zero,1460
   16cbc:	000173f0 	cmpltui	zero,zero,1487
   16cc0:	00016f70 	cmpltui	zero,zero,1469
   16cc4:	00017560 	cmpeqi	zero,zero,1493
   16cc8:	00017554 	movui	zero,1493
   16ccc:	00016d18 	cmpnei	zero,zero,1460
   16cd0:	000174fc 	xorhi	zero,zero,1491
   16cd4:	00016d18 	cmpnei	zero,zero,1460
   16cd8:	00016f48 	cmpgei	zero,zero,1469
   16cdc:	00016d18 	cmpnei	zero,zero,1460
   16ce0:	00016d18 	cmpnei	zero,zero,1460
   16ce4:	000174b4 	movhi	zero,1490
   16ce8:	0023883a 	mov	r17,zero
   16cec:	10fff404 	addi	r3,r2,-48
   16cf0:	a0800007 	ldb	r2,0(r20)
   16cf4:	8c4002a4 	muli	r17,r17,10
   16cf8:	a5000044 	addi	r20,r20,1
   16cfc:	1c63883a 	add	r17,r3,r17
   16d00:	10fff404 	addi	r3,r2,-48
   16d04:	190002b0 	cmpltui	r4,r3,10
   16d08:	203ff91e 	bne	r4,zero,16cf0 <___vfiprintf_internal_r+0x294>
   16d0c:	10fff804 	addi	r3,r2,-32
   16d10:	19001668 	cmpgeui	r4,r3,89
   16d14:	203f9626 	beq	r4,zero,16b70 <___vfiprintf_internal_r+0x114>
   16d18:	29403fcc 	andi	r5,r5,255
   16d1c:	2803b41e 	bne	r5,zero,17bf0 <___vfiprintf_internal_r+0x1194>
   16d20:	10005c26 	beq	r2,zero,16e94 <___vfiprintf_internal_r+0x438>
   16d24:	d8800d05 	stb	r2,52(sp)
   16d28:	d8000945 	stb	zero,37(sp)
   16d2c:	05c00044 	movi	r23,1
   16d30:	07000044 	movi	fp,1
   16d34:	dcc00d04 	addi	r19,sp,52
   16d38:	db400015 	stw	r13,0(sp)
   16d3c:	0011883a 	mov	r8,zero
   16d40:	d8800017 	ldw	r2,0(sp)
   16d44:	1380008c 	andi	r14,r2,2
   16d48:	70000126 	beq	r14,zero,16d50 <___vfiprintf_internal_r+0x2f4>
   16d4c:	bdc00084 	addi	r23,r23,2
   16d50:	d8800017 	ldw	r2,0(sp)
   16d54:	d9000b17 	ldw	r4,44(sp)
   16d58:	1340210c 	andi	r13,r2,132
   16d5c:	21800044 	addi	r6,r4,1
   16d60:	d8800c17 	ldw	r2,48(sp)
   16d64:	300b883a 	mov	r5,r6
   16d68:	6800021e 	bne	r13,zero,16d74 <___vfiprintf_internal_r+0x318>
   16d6c:	8dc7c83a 	sub	r3,r17,r23
   16d70:	00c2e316 	blt	zero,r3,17900 <___vfiprintf_internal_r+0xea4>
   16d74:	d8c00947 	ldb	r3,37(sp)
   16d78:	18000c26 	beq	r3,zero,16dac <___vfiprintf_internal_r+0x350>
   16d7c:	d8c00944 	addi	r3,sp,37
   16d80:	10800044 	addi	r2,r2,1
   16d84:	80c00015 	stw	r3,0(r16)
   16d88:	00c00044 	movi	r3,1
   16d8c:	80c00115 	stw	r3,4(r16)
   16d90:	d8800c15 	stw	r2,48(sp)
   16d94:	d9400b15 	stw	r5,44(sp)
   16d98:	28c00208 	cmpgei	r3,r5,8
   16d9c:	18029e1e 	bne	r3,zero,17818 <___vfiprintf_internal_r+0xdbc>
   16da0:	2809883a 	mov	r4,r5
   16da4:	84000204 	addi	r16,r16,8
   16da8:	29400044 	addi	r5,r5,1
   16dac:	70001726 	beq	r14,zero,16e0c <___vfiprintf_internal_r+0x3b0>
   16db0:	d8c00984 	addi	r3,sp,38
   16db4:	10800084 	addi	r2,r2,2
   16db8:	80c00015 	stw	r3,0(r16)
   16dbc:	00c00084 	movi	r3,2
   16dc0:	80c00115 	stw	r3,4(r16)
   16dc4:	d8800c15 	stw	r2,48(sp)
   16dc8:	d9400b15 	stw	r5,44(sp)
   16dcc:	28c00208 	cmpgei	r3,r5,8
   16dd0:	1802a826 	beq	r3,zero,17874 <___vfiprintf_internal_r+0xe18>
   16dd4:	10032326 	beq	r2,zero,17a64 <___vfiprintf_internal_r+0x1008>
   16dd8:	d9800a04 	addi	r6,sp,40
   16ddc:	a80b883a 	mov	r5,r21
   16de0:	b009883a 	mov	r4,r22
   16de4:	da000315 	stw	r8,12(sp)
   16de8:	db400215 	stw	r13,8(sp)
   16dec:	00169500 	call	16950 <__sprint_r.part.0>
   16df0:	10002a1e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   16df4:	d9000b17 	ldw	r4,44(sp)
   16df8:	d8800c17 	ldw	r2,48(sp)
   16dfc:	da000317 	ldw	r8,12(sp)
   16e00:	db400217 	ldw	r13,8(sp)
   16e04:	9021883a 	mov	r16,r18
   16e08:	21400044 	addi	r5,r4,1
   16e0c:	6b402018 	cmpnei	r13,r13,128
   16e10:	6801ef26 	beq	r13,zero,175d0 <___vfiprintf_internal_r+0xb74>
   16e14:	4711c83a 	sub	r8,r8,fp
   16e18:	02022c16 	blt	zero,r8,176cc <___vfiprintf_internal_r+0xc70>
   16e1c:	e085883a 	add	r2,fp,r2
   16e20:	d9400b15 	stw	r5,44(sp)
   16e24:	84c00015 	stw	r19,0(r16)
   16e28:	87000115 	stw	fp,4(r16)
   16e2c:	d8800c15 	stw	r2,48(sp)
   16e30:	29400208 	cmpgei	r5,r5,8
   16e34:	2801e026 	beq	r5,zero,175b8 <___vfiprintf_internal_r+0xb5c>
   16e38:	10009826 	beq	r2,zero,1709c <___vfiprintf_internal_r+0x640>
   16e3c:	d9800a04 	addi	r6,sp,40
   16e40:	a80b883a 	mov	r5,r21
   16e44:	b009883a 	mov	r4,r22
   16e48:	00169500 	call	16950 <__sprint_r.part.0>
   16e4c:	1000131e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   16e50:	d8800c17 	ldw	r2,48(sp)
   16e54:	9021883a 	mov	r16,r18
   16e58:	d8c00017 	ldw	r3,0(sp)
   16e5c:	1cc0010c 	andi	r19,r3,4
   16e60:	98000226 	beq	r19,zero,16e6c <___vfiprintf_internal_r+0x410>
   16e64:	8de7c83a 	sub	r19,r17,r23
   16e68:	04c09316 	blt	zero,r19,170b8 <___vfiprintf_internal_r+0x65c>
   16e6c:	8dc0010e 	bge	r17,r23,16e74 <___vfiprintf_internal_r+0x418>
   16e70:	b823883a 	mov	r17,r23
   16e74:	d8c00117 	ldw	r3,4(sp)
   16e78:	1c47883a 	add	r3,r3,r17
   16e7c:	d8c00115 	stw	r3,4(sp)
   16e80:	10025b1e 	bne	r2,zero,177f0 <___vfiprintf_internal_r+0xd94>
   16e84:	a0800007 	ldb	r2,0(r20)
   16e88:	d8000b15 	stw	zero,44(sp)
   16e8c:	9021883a 	mov	r16,r18
   16e90:	103f1d1e 	bne	r2,zero,16b08 <___vfiprintf_internal_r+0xac>
   16e94:	d8800c17 	ldw	r2,48(sp)
   16e98:	1003571e 	bne	r2,zero,17bf8 <___vfiprintf_internal_r+0x119c>
   16e9c:	a880030b 	ldhu	r2,12(r21)
   16ea0:	1080100c 	andi	r2,r2,64
   16ea4:	1003721e 	bne	r2,zero,17c70 <___vfiprintf_internal_r+0x1214>
   16ea8:	d8800117 	ldw	r2,4(sp)
   16eac:	dfc03017 	ldw	ra,192(sp)
   16eb0:	df002f17 	ldw	fp,188(sp)
   16eb4:	ddc02e17 	ldw	r23,184(sp)
   16eb8:	dd802d17 	ldw	r22,180(sp)
   16ebc:	dd402c17 	ldw	r21,176(sp)
   16ec0:	dd002b17 	ldw	r20,172(sp)
   16ec4:	dcc02a17 	ldw	r19,168(sp)
   16ec8:	dc802917 	ldw	r18,164(sp)
   16ecc:	dc402817 	ldw	r17,160(sp)
   16ed0:	dc002717 	ldw	r16,156(sp)
   16ed4:	dec03104 	addi	sp,sp,196
   16ed8:	f800283a 	ret
   16edc:	a80b883a 	mov	r5,r21
   16ee0:	b009883a 	mov	r4,r22
   16ee4:	00111a00 	call	111a0 <__swsetup_r>
   16ee8:	1003611e 	bne	r2,zero,17c70 <___vfiprintf_internal_r+0x1214>
   16eec:	a880030b 	ldhu	r2,12(r21)
   16ef0:	1080068c 	andi	r2,r2,26
   16ef4:	10800298 	cmpnei	r2,r2,10
   16ef8:	103efa1e 	bne	r2,zero,16ae4 <___vfiprintf_internal_r+0x88>
   16efc:	a880038f 	ldh	r2,14(r21)
   16f00:	103ef816 	blt	r2,zero,16ae4 <___vfiprintf_internal_r+0x88>
   16f04:	d9c00417 	ldw	r7,16(sp)
   16f08:	a00d883a 	mov	r6,r20
   16f0c:	a80b883a 	mov	r5,r21
   16f10:	b009883a 	mov	r4,r22
   16f14:	dfc03017 	ldw	ra,192(sp)
   16f18:	df002f17 	ldw	fp,188(sp)
   16f1c:	ddc02e17 	ldw	r23,184(sp)
   16f20:	dd802d17 	ldw	r22,180(sp)
   16f24:	dd402c17 	ldw	r21,176(sp)
   16f28:	dd002b17 	ldw	r20,172(sp)
   16f2c:	dcc02a17 	ldw	r19,168(sp)
   16f30:	dc802917 	ldw	r18,164(sp)
   16f34:	dc402817 	ldw	r17,160(sp)
   16f38:	dc002717 	ldw	r16,156(sp)
   16f3c:	dec03104 	addi	sp,sp,196
   16f40:	0017cc81 	jmpi	17cc8 <__sbprintf>
   16f44:	6b400414 	ori	r13,r13,16
   16f48:	6880080c 	andi	r2,r13,32
   16f4c:	10004726 	beq	r2,zero,1706c <___vfiprintf_internal_r+0x610>
   16f50:	d8c00417 	ldw	r3,16(sp)
   16f54:	00800044 	movi	r2,1
   16f58:	1dc00017 	ldw	r23,0(r3)
   16f5c:	1f000117 	ldw	fp,4(r3)
   16f60:	18c00204 	addi	r3,r3,8
   16f64:	d8c00415 	stw	r3,16(sp)
   16f68:	00000906 	br	16f90 <___vfiprintf_internal_r+0x534>
   16f6c:	6b400414 	ori	r13,r13,16
   16f70:	6880080c 	andi	r2,r13,32
   16f74:	10003126 	beq	r2,zero,1703c <___vfiprintf_internal_r+0x5e0>
   16f78:	d8c00417 	ldw	r3,16(sp)
   16f7c:	0005883a 	mov	r2,zero
   16f80:	1dc00017 	ldw	r23,0(r3)
   16f84:	1f000117 	ldw	fp,4(r3)
   16f88:	18c00204 	addi	r3,r3,8
   16f8c:	d8c00415 	stw	r3,16(sp)
   16f90:	d8000945 	stb	zero,37(sp)
   16f94:	40ffffe0 	cmpeqi	r3,r8,-1
   16f98:	001d883a 	mov	r14,zero
   16f9c:	1800cf1e 	bne	r3,zero,172dc <___vfiprintf_internal_r+0x880>
   16fa0:	04ffdfc4 	movi	r19,-129
   16fa4:	6cc8703a 	and	r4,r13,r19
   16fa8:	bf06b03a 	or	r3,r23,fp
   16fac:	d9000015 	stw	r4,0(sp)
   16fb0:	1802341e 	bne	r3,zero,17884 <___vfiprintf_internal_r+0xe28>
   16fb4:	4001f91e 	bne	r8,zero,1779c <___vfiprintf_internal_r+0xd40>
   16fb8:	1002a11e 	bne	r2,zero,17a40 <___vfiprintf_internal_r+0xfe4>
   16fbc:	6f00004c 	andi	fp,r13,1
   16fc0:	e002c526 	beq	fp,zero,17ad8 <___vfiprintf_internal_r+0x107c>
   16fc4:	00800c04 	movi	r2,48
   16fc8:	d88016c5 	stb	r2,91(sp)
   16fcc:	dcc016c4 	addi	r19,sp,91
   16fd0:	0000df06 	br	17350 <___vfiprintf_internal_r+0x8f4>
   16fd4:	8d27c83a 	sub	r19,r17,r20
   16fd8:	8d3fae26 	beq	r17,r20,16e94 <___vfiprintf_internal_r+0x438>
   16fdc:	d8c00c17 	ldw	r3,48(sp)
   16fe0:	d8800b17 	ldw	r2,44(sp)
   16fe4:	85000015 	stw	r20,0(r16)
   16fe8:	98c7883a 	add	r3,r19,r3
   16fec:	10800044 	addi	r2,r2,1
   16ff0:	d8800b15 	stw	r2,44(sp)
   16ff4:	84c00115 	stw	r19,4(r16)
   16ff8:	d8c00c15 	stw	r3,48(sp)
   16ffc:	10800208 	cmpgei	r2,r2,8
   17000:	1000061e 	bne	r2,zero,1701c <___vfiprintf_internal_r+0x5c0>
   17004:	84000204 	addi	r16,r16,8
   17008:	d8c00117 	ldw	r3,4(sp)
   1700c:	88800003 	ldbu	r2,0(r17)
   17010:	1cc7883a 	add	r3,r3,r19
   17014:	d8c00115 	stw	r3,4(sp)
   17018:	003ec506 	br	16b30 <___vfiprintf_internal_r+0xd4>
   1701c:	18028426 	beq	r3,zero,17a30 <___vfiprintf_internal_r+0xfd4>
   17020:	d9800a04 	addi	r6,sp,40
   17024:	a80b883a 	mov	r5,r21
   17028:	b009883a 	mov	r4,r22
   1702c:	00169500 	call	16950 <__sprint_r.part.0>
   17030:	103f9a1e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   17034:	9021883a 	mov	r16,r18
   17038:	003ff306 	br	17008 <___vfiprintf_internal_r+0x5ac>
   1703c:	d8c00417 	ldw	r3,16(sp)
   17040:	6880040c 	andi	r2,r13,16
   17044:	1dc00017 	ldw	r23,0(r3)
   17048:	18c00104 	addi	r3,r3,4
   1704c:	d8c00415 	stw	r3,16(sp)
   17050:	1000031e 	bne	r2,zero,17060 <___vfiprintf_internal_r+0x604>
   17054:	6880100c 	andi	r2,r13,64
   17058:	10000126 	beq	r2,zero,17060 <___vfiprintf_internal_r+0x604>
   1705c:	bdffffcc 	andi	r23,r23,65535
   17060:	0039883a 	mov	fp,zero
   17064:	0005883a 	mov	r2,zero
   17068:	003fc906 	br	16f90 <___vfiprintf_internal_r+0x534>
   1706c:	d8c00417 	ldw	r3,16(sp)
   17070:	6880040c 	andi	r2,r13,16
   17074:	1dc00017 	ldw	r23,0(r3)
   17078:	18c00104 	addi	r3,r3,4
   1707c:	d8c00415 	stw	r3,16(sp)
   17080:	1000031e 	bne	r2,zero,17090 <___vfiprintf_internal_r+0x634>
   17084:	6880100c 	andi	r2,r13,64
   17088:	10000126 	beq	r2,zero,17090 <___vfiprintf_internal_r+0x634>
   1708c:	bdffffcc 	andi	r23,r23,65535
   17090:	0039883a 	mov	fp,zero
   17094:	00800044 	movi	r2,1
   17098:	003fbd06 	br	16f90 <___vfiprintf_internal_r+0x534>
   1709c:	d8c00017 	ldw	r3,0(sp)
   170a0:	d8000b15 	stw	zero,44(sp)
   170a4:	1cc0010c 	andi	r19,r3,4
   170a8:	98025026 	beq	r19,zero,179ec <___vfiprintf_internal_r+0xf90>
   170ac:	8de7c83a 	sub	r19,r17,r23
   170b0:	04c24e0e 	bge	zero,r19,179ec <___vfiprintf_internal_r+0xf90>
   170b4:	9021883a 	mov	r16,r18
   170b8:	98c00450 	cmplti	r3,r19,17
   170bc:	d9000b17 	ldw	r4,44(sp)
   170c0:	01c000b4 	movhi	r7,2
   170c4:	1802e41e 	bne	r3,zero,17c58 <___vfiprintf_internal_r+0x11fc>
   170c8:	39c6af04 	addi	r7,r7,6844
   170cc:	07000404 	movi	fp,16
   170d0:	00000606 	br	170ec <___vfiprintf_internal_r+0x690>
   170d4:	21400084 	addi	r5,r4,2
   170d8:	84000204 	addi	r16,r16,8
   170dc:	1809883a 	mov	r4,r3
   170e0:	9cfffc04 	addi	r19,r19,-16
   170e4:	98c00448 	cmpgei	r3,r19,17
   170e8:	18001726 	beq	r3,zero,17148 <___vfiprintf_internal_r+0x6ec>
   170ec:	20c00044 	addi	r3,r4,1
   170f0:	10800404 	addi	r2,r2,16
   170f4:	81c00015 	stw	r7,0(r16)
   170f8:	87000115 	stw	fp,4(r16)
   170fc:	d8800c15 	stw	r2,48(sp)
   17100:	d8c00b15 	stw	r3,44(sp)
   17104:	19400208 	cmpgei	r5,r3,8
   17108:	283ff226 	beq	r5,zero,170d4 <___vfiprintf_internal_r+0x678>
   1710c:	d9800a04 	addi	r6,sp,40
   17110:	a80b883a 	mov	r5,r21
   17114:	b009883a 	mov	r4,r22
   17118:	10012926 	beq	r2,zero,175c0 <___vfiprintf_internal_r+0xb64>
   1711c:	d9c00015 	stw	r7,0(sp)
   17120:	00169500 	call	16950 <__sprint_r.part.0>
   17124:	103f5d1e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   17128:	d9000b17 	ldw	r4,44(sp)
   1712c:	9cfffc04 	addi	r19,r19,-16
   17130:	98c00448 	cmpgei	r3,r19,17
   17134:	d8800c17 	ldw	r2,48(sp)
   17138:	d9c00017 	ldw	r7,0(sp)
   1713c:	9021883a 	mov	r16,r18
   17140:	21400044 	addi	r5,r4,1
   17144:	183fe91e 	bne	r3,zero,170ec <___vfiprintf_internal_r+0x690>
   17148:	14c5883a 	add	r2,r2,r19
   1714c:	d9400b15 	stw	r5,44(sp)
   17150:	81c00015 	stw	r7,0(r16)
   17154:	84c00115 	stw	r19,4(r16)
   17158:	d8800c15 	stw	r2,48(sp)
   1715c:	29400210 	cmplti	r5,r5,8
   17160:	283f421e 	bne	r5,zero,16e6c <___vfiprintf_internal_r+0x410>
   17164:	10022126 	beq	r2,zero,179ec <___vfiprintf_internal_r+0xf90>
   17168:	d9800a04 	addi	r6,sp,40
   1716c:	a80b883a 	mov	r5,r21
   17170:	b009883a 	mov	r4,r22
   17174:	00169500 	call	16950 <__sprint_r.part.0>
   17178:	103f481e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   1717c:	d8800c17 	ldw	r2,48(sp)
   17180:	003f3a06 	br	16e6c <___vfiprintf_internal_r+0x410>
   17184:	00132a80 	call	132a8 <__sinit>
   17188:	003e4606 	br	16aa4 <___vfiprintf_internal_r+0x48>
   1718c:	29403fcc 	andi	r5,r5,255
   17190:	2802af1e 	bne	r5,zero,17c50 <___vfiprintf_internal_r+0x11f4>
   17194:	6880080c 	andi	r2,r13,32
   17198:	10003826 	beq	r2,zero,1727c <___vfiprintf_internal_r+0x820>
   1719c:	d8c00417 	ldw	r3,16(sp)
   171a0:	18800117 	ldw	r2,4(r3)
   171a4:	1dc00017 	ldw	r23,0(r3)
   171a8:	18c00204 	addi	r3,r3,8
   171ac:	d8c00415 	stw	r3,16(sp)
   171b0:	1039883a 	mov	fp,r2
   171b4:	10003f16 	blt	r2,zero,172b4 <___vfiprintf_internal_r+0x858>
   171b8:	40bfffd8 	cmpnei	r2,r8,-1
   171bc:	db800943 	ldbu	r14,37(sp)
   171c0:	10000626 	beq	r2,zero,171dc <___vfiprintf_internal_r+0x780>
   171c4:	04ffdfc4 	movi	r19,-129
   171c8:	6cc6703a 	and	r3,r13,r19
   171cc:	bf04b03a 	or	r2,r23,fp
   171d0:	d8c00015 	stw	r3,0(sp)
   171d4:	10021926 	beq	r2,zero,17a3c <___vfiprintf_internal_r+0xfe0>
   171d8:	db400017 	ldw	r13,0(sp)
   171dc:	e001ab1e 	bne	fp,zero,1788c <___vfiprintf_internal_r+0xe30>
   171e0:	b88002a8 	cmpgeui	r2,r23,10
   171e4:	1001a91e 	bne	r2,zero,1788c <___vfiprintf_internal_r+0xe30>
   171e8:	bdc00c04 	addi	r23,r23,48
   171ec:	ddc016c5 	stb	r23,91(sp)
   171f0:	db400015 	stw	r13,0(sp)
   171f4:	07000044 	movi	fp,1
   171f8:	dcc016c4 	addi	r19,sp,91
   171fc:	00005406 	br	17350 <___vfiprintf_internal_r+0x8f4>
   17200:	d8800417 	ldw	r2,16(sp)
   17204:	14400017 	ldw	r17,0(r2)
   17208:	10c00104 	addi	r3,r2,4
   1720c:	88022f0e 	bge	r17,zero,17acc <___vfiprintf_internal_r+0x1070>
   17210:	0463c83a 	sub	r17,zero,r17
   17214:	d8c00415 	stw	r3,16(sp)
   17218:	a0800007 	ldb	r2,0(r20)
   1721c:	6b400114 	ori	r13,r13,4
   17220:	003e4f06 	br	16b60 <___vfiprintf_internal_r+0x104>
   17224:	a0800007 	ldb	r2,0(r20)
   17228:	a1000044 	addi	r4,r20,1
   1722c:	10c00aa0 	cmpeqi	r3,r2,42
   17230:	1802921e 	bne	r3,zero,17c7c <___vfiprintf_internal_r+0x1220>
   17234:	10fff404 	addi	r3,r2,-48
   17238:	19c002b0 	cmpltui	r7,r3,10
   1723c:	2029883a 	mov	r20,r4
   17240:	0011883a 	mov	r8,zero
   17244:	383e4726 	beq	r7,zero,16b64 <___vfiprintf_internal_r+0x108>
   17248:	a0800007 	ldb	r2,0(r20)
   1724c:	420002a4 	muli	r8,r8,10
   17250:	a5000044 	addi	r20,r20,1
   17254:	40d1883a 	add	r8,r8,r3
   17258:	10fff404 	addi	r3,r2,-48
   1725c:	190002b0 	cmpltui	r4,r3,10
   17260:	203ff91e 	bne	r4,zero,17248 <___vfiprintf_internal_r+0x7ec>
   17264:	003e3f06 	br	16b64 <___vfiprintf_internal_r+0x108>
   17268:	29403fcc 	andi	r5,r5,255
   1726c:	28026d1e 	bne	r5,zero,17c24 <___vfiprintf_internal_r+0x11c8>
   17270:	6b400414 	ori	r13,r13,16
   17274:	6880080c 	andi	r2,r13,32
   17278:	103fc81e 	bne	r2,zero,1719c <___vfiprintf_internal_r+0x740>
   1727c:	d8c00417 	ldw	r3,16(sp)
   17280:	6880040c 	andi	r2,r13,16
   17284:	1dc00017 	ldw	r23,0(r3)
   17288:	18c00104 	addi	r3,r3,4
   1728c:	d8c00415 	stw	r3,16(sp)
   17290:	1001f11e 	bne	r2,zero,17a58 <___vfiprintf_internal_r+0xffc>
   17294:	6880100c 	andi	r2,r13,64
   17298:	1001ef26 	beq	r2,zero,17a58 <___vfiprintf_internal_r+0xffc>
   1729c:	bdffffcc 	andi	r23,r23,65535
   172a0:	bde0001c 	xori	r23,r23,32768
   172a4:	bde00004 	addi	r23,r23,-32768
   172a8:	b839d7fa 	srai	fp,r23,31
   172ac:	e005883a 	mov	r2,fp
   172b0:	103fc10e 	bge	r2,zero,171b8 <___vfiprintf_internal_r+0x75c>
   172b4:	b804c03a 	cmpne	r2,r23,zero
   172b8:	0739c83a 	sub	fp,zero,fp
   172bc:	e0b9c83a 	sub	fp,fp,r2
   172c0:	00800b44 	movi	r2,45
   172c4:	d8800945 	stb	r2,37(sp)
   172c8:	40ffffe0 	cmpeqi	r3,r8,-1
   172cc:	05efc83a 	sub	r23,zero,r23
   172d0:	03800b44 	movi	r14,45
   172d4:	00800044 	movi	r2,1
   172d8:	183f3126 	beq	r3,zero,16fa0 <___vfiprintf_internal_r+0x544>
   172dc:	10c00060 	cmpeqi	r3,r2,1
   172e0:	183fbe1e 	bne	r3,zero,171dc <___vfiprintf_internal_r+0x780>
   172e4:	108000a0 	cmpeqi	r2,r2,2
   172e8:	1001311e 	bne	r2,zero,177b0 <___vfiprintf_internal_r+0xd54>
   172ec:	9027883a 	mov	r19,r18
   172f0:	e008977a 	slli	r4,fp,29
   172f4:	b806d0fa 	srli	r3,r23,3
   172f8:	e038d0fa 	srli	fp,fp,3
   172fc:	b88001cc 	andi	r2,r23,7
   17300:	10800c04 	addi	r2,r2,48
   17304:	20eeb03a 	or	r23,r4,r3
   17308:	98bfffc5 	stb	r2,-1(r19)
   1730c:	bf06b03a 	or	r3,r23,fp
   17310:	980b883a 	mov	r5,r19
   17314:	9cffffc4 	addi	r19,r19,-1
   17318:	183ff51e 	bne	r3,zero,172f0 <___vfiprintf_internal_r+0x894>
   1731c:	68c0004c 	andi	r3,r13,1
   17320:	18013026 	beq	r3,zero,177e4 <___vfiprintf_internal_r+0xd88>
   17324:	10803fcc 	andi	r2,r2,255
   17328:	1080201c 	xori	r2,r2,128
   1732c:	10bfe004 	addi	r2,r2,-128
   17330:	10800c18 	cmpnei	r2,r2,48
   17334:	10012b26 	beq	r2,zero,177e4 <___vfiprintf_internal_r+0xd88>
   17338:	297fff84 	addi	r5,r5,-2
   1733c:	00800c04 	movi	r2,48
   17340:	98bfffc5 	stb	r2,-1(r19)
   17344:	9179c83a 	sub	fp,r18,r5
   17348:	db400015 	stw	r13,0(sp)
   1734c:	2827883a 	mov	r19,r5
   17350:	e02f883a 	mov	r23,fp
   17354:	e200010e 	bge	fp,r8,1735c <___vfiprintf_internal_r+0x900>
   17358:	402f883a 	mov	r23,r8
   1735c:	73803fcc 	andi	r14,r14,255
   17360:	7380201c 	xori	r14,r14,128
   17364:	73bfe004 	addi	r14,r14,-128
   17368:	703e7526 	beq	r14,zero,16d40 <___vfiprintf_internal_r+0x2e4>
   1736c:	bdc00044 	addi	r23,r23,1
   17370:	003e7306 	br	16d40 <___vfiprintf_internal_r+0x2e4>
   17374:	a0800007 	ldb	r2,0(r20)
   17378:	6b402014 	ori	r13,r13,128
   1737c:	003df806 	br	16b60 <___vfiprintf_internal_r+0x104>
   17380:	a0800007 	ldb	r2,0(r20)
   17384:	01400044 	movi	r5,1
   17388:	01800ac4 	movi	r6,43
   1738c:	003df406 	br	16b60 <___vfiprintf_internal_r+0x104>
   17390:	a0800007 	ldb	r2,0(r20)
   17394:	6b400054 	ori	r13,r13,1
   17398:	003df106 	br	16b60 <___vfiprintf_internal_r+0x104>
   1739c:	30c03fcc 	andi	r3,r6,255
   173a0:	18c0201c 	xori	r3,r3,128
   173a4:	18ffe004 	addi	r3,r3,-128
   173a8:	a0800003 	ldbu	r2,0(r20)
   173ac:	1800091e 	bne	r3,zero,173d4 <___vfiprintf_internal_r+0x978>
   173b0:	10803fcc 	andi	r2,r2,255
   173b4:	1080201c 	xori	r2,r2,128
   173b8:	01400044 	movi	r5,1
   173bc:	01800804 	movi	r6,32
   173c0:	10bfe004 	addi	r2,r2,-128
   173c4:	003de606 	br	16b60 <___vfiprintf_internal_r+0x104>
   173c8:	a0800043 	ldbu	r2,1(r20)
   173cc:	6b400814 	ori	r13,r13,32
   173d0:	a5000044 	addi	r20,r20,1
   173d4:	10803fcc 	andi	r2,r2,255
   173d8:	1080201c 	xori	r2,r2,128
   173dc:	10bfe004 	addi	r2,r2,-128
   173e0:	003ddf06 	br	16b60 <___vfiprintf_internal_r+0x104>
   173e4:	a0800007 	ldb	r2,0(r20)
   173e8:	6b401014 	ori	r13,r13,64
   173ec:	003ddc06 	br	16b60 <___vfiprintf_internal_r+0x104>
   173f0:	29403fcc 	andi	r5,r5,255
   173f4:	28020f1e 	bne	r5,zero,17c34 <___vfiprintf_internal_r+0x11d8>
   173f8:	d9000417 	ldw	r4,16(sp)
   173fc:	6880080c 	andi	r2,r13,32
   17400:	20c00104 	addi	r3,r4,4
   17404:	1001c01e 	bne	r2,zero,17b08 <___vfiprintf_internal_r+0x10ac>
   17408:	6880040c 	andi	r2,r13,16
   1740c:	1001df1e 	bne	r2,zero,17b8c <___vfiprintf_internal_r+0x1130>
   17410:	6b40100c 	andi	r13,r13,64
   17414:	6801dd26 	beq	r13,zero,17b8c <___vfiprintf_internal_r+0x1130>
   17418:	d8800417 	ldw	r2,16(sp)
   1741c:	d8c00415 	stw	r3,16(sp)
   17420:	d8c00117 	ldw	r3,4(sp)
   17424:	10800017 	ldw	r2,0(r2)
   17428:	10c0000d 	sth	r3,0(r2)
   1742c:	003db406 	br	16b00 <___vfiprintf_internal_r+0xa4>
   17430:	a0800007 	ldb	r2,0(r20)
   17434:	10c01b18 	cmpnei	r3,r2,108
   17438:	183fe326 	beq	r3,zero,173c8 <___vfiprintf_internal_r+0x96c>
   1743c:	6b400414 	ori	r13,r13,16
   17440:	003dc706 	br	16b60 <___vfiprintf_internal_r+0x104>
   17444:	d8c00417 	ldw	r3,16(sp)
   17448:	d8000945 	stb	zero,37(sp)
   1744c:	05c00044 	movi	r23,1
   17450:	18800017 	ldw	r2,0(r3)
   17454:	18c00104 	addi	r3,r3,4
   17458:	d8c00415 	stw	r3,16(sp)
   1745c:	d8800d05 	stb	r2,52(sp)
   17460:	07000044 	movi	fp,1
   17464:	dcc00d04 	addi	r19,sp,52
   17468:	003e3306 	br	16d38 <___vfiprintf_internal_r+0x2dc>
   1746c:	29403fcc 	andi	r5,r5,255
   17470:	2801ee1e 	bne	r5,zero,17c2c <___vfiprintf_internal_r+0x11d0>
   17474:	00c000b4 	movhi	r3,2
   17478:	18c5d004 	addi	r3,r3,5952
   1747c:	d8c00515 	stw	r3,20(sp)
   17480:	68c0080c 	andi	r3,r13,32
   17484:	18001226 	beq	r3,zero,174d0 <___vfiprintf_internal_r+0xa74>
   17488:	d8c00417 	ldw	r3,16(sp)
   1748c:	1dc00017 	ldw	r23,0(r3)
   17490:	1f000117 	ldw	fp,4(r3)
   17494:	18c00204 	addi	r3,r3,8
   17498:	d8c00415 	stw	r3,16(sp)
   1749c:	68c0004c 	andi	r3,r13,1
   174a0:	18000226 	beq	r3,zero,174ac <___vfiprintf_internal_r+0xa50>
   174a4:	bf06b03a 	or	r3,r23,fp
   174a8:	1801911e 	bne	r3,zero,17af0 <___vfiprintf_internal_r+0x1094>
   174ac:	00800084 	movi	r2,2
   174b0:	003eb706 	br	16f90 <___vfiprintf_internal_r+0x534>
   174b4:	29403fcc 	andi	r5,r5,255
   174b8:	2801e01e 	bne	r5,zero,17c3c <___vfiprintf_internal_r+0x11e0>
   174bc:	00c000b4 	movhi	r3,2
   174c0:	18c5cb04 	addi	r3,r3,5932
   174c4:	d8c00515 	stw	r3,20(sp)
   174c8:	68c0080c 	andi	r3,r13,32
   174cc:	183fee1e 	bne	r3,zero,17488 <___vfiprintf_internal_r+0xa2c>
   174d0:	d9000417 	ldw	r4,16(sp)
   174d4:	68c0040c 	andi	r3,r13,16
   174d8:	25c00017 	ldw	r23,0(r4)
   174dc:	21000104 	addi	r4,r4,4
   174e0:	d9000415 	stw	r4,16(sp)
   174e4:	18015a1e 	bne	r3,zero,17a50 <___vfiprintf_internal_r+0xff4>
   174e8:	68c0100c 	andi	r3,r13,64
   174ec:	18015826 	beq	r3,zero,17a50 <___vfiprintf_internal_r+0xff4>
   174f0:	bdffffcc 	andi	r23,r23,65535
   174f4:	0039883a 	mov	fp,zero
   174f8:	003fe806 	br	1749c <___vfiprintf_internal_r+0xa40>
   174fc:	d8800417 	ldw	r2,16(sp)
   17500:	d8000945 	stb	zero,37(sp)
   17504:	14c00017 	ldw	r19,0(r2)
   17508:	10c00104 	addi	r3,r2,4
   1750c:	9801a526 	beq	r19,zero,17ba4 <___vfiprintf_internal_r+0x1148>
   17510:	40bfffe0 	cmpeqi	r2,r8,-1
   17514:	10018a1e 	bne	r2,zero,17b40 <___vfiprintf_internal_r+0x10e4>
   17518:	400d883a 	mov	r6,r8
   1751c:	000b883a 	mov	r5,zero
   17520:	9809883a 	mov	r4,r19
   17524:	d8c00315 	stw	r3,12(sp)
   17528:	db400215 	stw	r13,8(sp)
   1752c:	da000015 	stw	r8,0(sp)
   17530:	0014d000 	call	14d00 <memchr>
   17534:	da000017 	ldw	r8,0(sp)
   17538:	db400217 	ldw	r13,8(sp)
   1753c:	d8c00317 	ldw	r3,12(sp)
   17540:	1001b426 	beq	r2,zero,17c14 <___vfiprintf_internal_r+0x11b8>
   17544:	14f9c83a 	sub	fp,r2,r19
   17548:	e02f883a 	mov	r23,fp
   1754c:	d8c00415 	stw	r3,16(sp)
   17550:	003df906 	br	16d38 <___vfiprintf_internal_r+0x2dc>
   17554:	a0800007 	ldb	r2,0(r20)
   17558:	6b400814 	ori	r13,r13,32
   1755c:	003d8006 	br	16b60 <___vfiprintf_internal_r+0x104>
   17560:	d8c00417 	ldw	r3,16(sp)
   17564:	00800c04 	movi	r2,48
   17568:	d8800985 	stb	r2,38(sp)
   1756c:	00801e04 	movi	r2,120
   17570:	010000b4 	movhi	r4,2
   17574:	d88009c5 	stb	r2,39(sp)
   17578:	18800104 	addi	r2,r3,4
   1757c:	d8800415 	stw	r2,16(sp)
   17580:	2085cb04 	addi	r2,r4,5932
   17584:	d8800515 	stw	r2,20(sp)
   17588:	1dc00017 	ldw	r23,0(r3)
   1758c:	0039883a 	mov	fp,zero
   17590:	6b400094 	ori	r13,r13,2
   17594:	00800084 	movi	r2,2
   17598:	003e7d06 	br	16f90 <___vfiprintf_internal_r+0x534>
   1759c:	00c00044 	movi	r3,1
   175a0:	e005883a 	mov	r2,fp
   175a4:	dcc01715 	stw	r19,92(sp)
   175a8:	df001815 	stw	fp,96(sp)
   175ac:	df000c15 	stw	fp,48(sp)
   175b0:	d8c00b15 	stw	r3,44(sp)
   175b4:	9021883a 	mov	r16,r18
   175b8:	84000204 	addi	r16,r16,8
   175bc:	003e2606 	br	16e58 <___vfiprintf_internal_r+0x3fc>
   175c0:	01400044 	movi	r5,1
   175c4:	0009883a 	mov	r4,zero
   175c8:	9021883a 	mov	r16,r18
   175cc:	003ec406 	br	170e0 <___vfiprintf_internal_r+0x684>
   175d0:	8dc7c83a 	sub	r3,r17,r23
   175d4:	00fe0f0e 	bge	zero,r3,16e14 <___vfiprintf_internal_r+0x3b8>
   175d8:	19800450 	cmplti	r6,r3,17
   175dc:	01c000b4 	movhi	r7,2
   175e0:	3001a01e 	bne	r6,zero,17c64 <___vfiprintf_internal_r+0x1208>
   175e4:	39c6ab04 	addi	r7,r7,6828
   175e8:	03400404 	movi	r13,16
   175ec:	00000606 	br	17608 <___vfiprintf_internal_r+0xbac>
   175f0:	21800084 	addi	r6,r4,2
   175f4:	84000204 	addi	r16,r16,8
   175f8:	2809883a 	mov	r4,r5
   175fc:	18fffc04 	addi	r3,r3,-16
   17600:	19400448 	cmpgei	r5,r3,17
   17604:	28001c26 	beq	r5,zero,17678 <___vfiprintf_internal_r+0xc1c>
   17608:	21400044 	addi	r5,r4,1
   1760c:	10800404 	addi	r2,r2,16
   17610:	81c00015 	stw	r7,0(r16)
   17614:	83400115 	stw	r13,4(r16)
   17618:	d8800c15 	stw	r2,48(sp)
   1761c:	d9400b15 	stw	r5,44(sp)
   17620:	29800208 	cmpgei	r6,r5,8
   17624:	303ff226 	beq	r6,zero,175f0 <___vfiprintf_internal_r+0xb94>
   17628:	d9800a04 	addi	r6,sp,40
   1762c:	a80b883a 	mov	r5,r21
   17630:	b009883a 	mov	r4,r22
   17634:	10007426 	beq	r2,zero,17808 <___vfiprintf_internal_r+0xdac>
   17638:	d9c00615 	stw	r7,24(sp)
   1763c:	d8c00315 	stw	r3,12(sp)
   17640:	da000215 	stw	r8,8(sp)
   17644:	00169500 	call	16950 <__sprint_r.part.0>
   17648:	103e141e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   1764c:	d8c00317 	ldw	r3,12(sp)
   17650:	d9000b17 	ldw	r4,44(sp)
   17654:	d8800c17 	ldw	r2,48(sp)
   17658:	18fffc04 	addi	r3,r3,-16
   1765c:	19400448 	cmpgei	r5,r3,17
   17660:	d9c00617 	ldw	r7,24(sp)
   17664:	da000217 	ldw	r8,8(sp)
   17668:	9021883a 	mov	r16,r18
   1766c:	21800044 	addi	r6,r4,1
   17670:	03400404 	movi	r13,16
   17674:	283fe41e 	bne	r5,zero,17608 <___vfiprintf_internal_r+0xbac>
   17678:	10c5883a 	add	r2,r2,r3
   1767c:	80c00115 	stw	r3,4(r16)
   17680:	81c00015 	stw	r7,0(r16)
   17684:	d8800c15 	stw	r2,48(sp)
   17688:	d9800b15 	stw	r6,44(sp)
   1768c:	30c00208 	cmpgei	r3,r6,8
   17690:	18011326 	beq	r3,zero,17ae0 <___vfiprintf_internal_r+0x1084>
   17694:	10014b26 	beq	r2,zero,17bc4 <___vfiprintf_internal_r+0x1168>
   17698:	d9800a04 	addi	r6,sp,40
   1769c:	a80b883a 	mov	r5,r21
   176a0:	b009883a 	mov	r4,r22
   176a4:	da000215 	stw	r8,8(sp)
   176a8:	00169500 	call	16950 <__sprint_r.part.0>
   176ac:	103dfb1e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   176b0:	da000217 	ldw	r8,8(sp)
   176b4:	d9000b17 	ldw	r4,44(sp)
   176b8:	d8800c17 	ldw	r2,48(sp)
   176bc:	4711c83a 	sub	r8,r8,fp
   176c0:	9021883a 	mov	r16,r18
   176c4:	21400044 	addi	r5,r4,1
   176c8:	023dd40e 	bge	zero,r8,16e1c <___vfiprintf_internal_r+0x3c0>
   176cc:	01c000b4 	movhi	r7,2
   176d0:	40c00450 	cmplti	r3,r8,17
   176d4:	39c6ab04 	addi	r7,r7,6828
   176d8:	03400404 	movi	r13,16
   176dc:	18000726 	beq	r3,zero,176fc <___vfiprintf_internal_r+0xca0>
   176e0:	00002006 	br	17764 <___vfiprintf_internal_r+0xd08>
   176e4:	21400084 	addi	r5,r4,2
   176e8:	84000204 	addi	r16,r16,8
   176ec:	1809883a 	mov	r4,r3
   176f0:	423ffc04 	addi	r8,r8,-16
   176f4:	40c00448 	cmpgei	r3,r8,17
   176f8:	18001a26 	beq	r3,zero,17764 <___vfiprintf_internal_r+0xd08>
   176fc:	20c00044 	addi	r3,r4,1
   17700:	10800404 	addi	r2,r2,16
   17704:	81c00015 	stw	r7,0(r16)
   17708:	83400115 	stw	r13,4(r16)
   1770c:	d8800c15 	stw	r2,48(sp)
   17710:	d8c00b15 	stw	r3,44(sp)
   17714:	19400208 	cmpgei	r5,r3,8
   17718:	283ff226 	beq	r5,zero,176e4 <___vfiprintf_internal_r+0xc88>
   1771c:	d9800a04 	addi	r6,sp,40
   17720:	a80b883a 	mov	r5,r21
   17724:	b009883a 	mov	r4,r22
   17728:	10001826 	beq	r2,zero,1778c <___vfiprintf_internal_r+0xd30>
   1772c:	d9c00315 	stw	r7,12(sp)
   17730:	da000215 	stw	r8,8(sp)
   17734:	00169500 	call	16950 <__sprint_r.part.0>
   17738:	103dd81e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   1773c:	da000217 	ldw	r8,8(sp)
   17740:	d9000b17 	ldw	r4,44(sp)
   17744:	d8800c17 	ldw	r2,48(sp)
   17748:	423ffc04 	addi	r8,r8,-16
   1774c:	40c00448 	cmpgei	r3,r8,17
   17750:	d9c00317 	ldw	r7,12(sp)
   17754:	9021883a 	mov	r16,r18
   17758:	21400044 	addi	r5,r4,1
   1775c:	03400404 	movi	r13,16
   17760:	183fe61e 	bne	r3,zero,176fc <___vfiprintf_internal_r+0xca0>
   17764:	1205883a 	add	r2,r2,r8
   17768:	81c00015 	stw	r7,0(r16)
   1776c:	82000115 	stw	r8,4(r16)
   17770:	d8800c15 	stw	r2,48(sp)
   17774:	d9400b15 	stw	r5,44(sp)
   17778:	28c00208 	cmpgei	r3,r5,8
   1777c:	1800a11e 	bne	r3,zero,17a04 <___vfiprintf_internal_r+0xfa8>
   17780:	84000204 	addi	r16,r16,8
   17784:	29400044 	addi	r5,r5,1
   17788:	003da406 	br	16e1c <___vfiprintf_internal_r+0x3c0>
   1778c:	01400044 	movi	r5,1
   17790:	0009883a 	mov	r4,zero
   17794:	9021883a 	mov	r16,r18
   17798:	003fd506 	br	176f0 <___vfiprintf_internal_r+0xc94>
   1779c:	10c00060 	cmpeqi	r3,r2,1
   177a0:	18011a1e 	bne	r3,zero,17c0c <___vfiprintf_internal_r+0x11b0>
   177a4:	108000a0 	cmpeqi	r2,r2,2
   177a8:	db400017 	ldw	r13,0(sp)
   177ac:	103ecf26 	beq	r2,zero,172ec <___vfiprintf_internal_r+0x890>
   177b0:	9027883a 	mov	r19,r18
   177b4:	d9000517 	ldw	r4,20(sp)
   177b8:	b88003cc 	andi	r2,r23,15
   177bc:	e006973a 	slli	r3,fp,28
   177c0:	b82ed13a 	srli	r23,r23,4
   177c4:	2085883a 	add	r2,r4,r2
   177c8:	10800003 	ldbu	r2,0(r2)
   177cc:	e038d13a 	srli	fp,fp,4
   177d0:	1deeb03a 	or	r23,r3,r23
   177d4:	98bfffc5 	stb	r2,-1(r19)
   177d8:	bf04b03a 	or	r2,r23,fp
   177dc:	9cffffc4 	addi	r19,r19,-1
   177e0:	103ff41e 	bne	r2,zero,177b4 <___vfiprintf_internal_r+0xd58>
   177e4:	94f9c83a 	sub	fp,r18,r19
   177e8:	db400015 	stw	r13,0(sp)
   177ec:	003ed806 	br	17350 <___vfiprintf_internal_r+0x8f4>
   177f0:	d9800a04 	addi	r6,sp,40
   177f4:	a80b883a 	mov	r5,r21
   177f8:	b009883a 	mov	r4,r22
   177fc:	00169500 	call	16950 <__sprint_r.part.0>
   17800:	103da026 	beq	r2,zero,16e84 <___vfiprintf_internal_r+0x428>
   17804:	003da506 	br	16e9c <___vfiprintf_internal_r+0x440>
   17808:	01800044 	movi	r6,1
   1780c:	0009883a 	mov	r4,zero
   17810:	9021883a 	mov	r16,r18
   17814:	003f7906 	br	175fc <___vfiprintf_internal_r+0xba0>
   17818:	10009626 	beq	r2,zero,17a74 <___vfiprintf_internal_r+0x1018>
   1781c:	d9800a04 	addi	r6,sp,40
   17820:	a80b883a 	mov	r5,r21
   17824:	b009883a 	mov	r4,r22
   17828:	da000615 	stw	r8,24(sp)
   1782c:	db400315 	stw	r13,12(sp)
   17830:	db800215 	stw	r14,8(sp)
   17834:	00169500 	call	16950 <__sprint_r.part.0>
   17838:	103d981e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   1783c:	d9000b17 	ldw	r4,44(sp)
   17840:	d8800c17 	ldw	r2,48(sp)
   17844:	da000617 	ldw	r8,24(sp)
   17848:	db400317 	ldw	r13,12(sp)
   1784c:	db800217 	ldw	r14,8(sp)
   17850:	9021883a 	mov	r16,r18
   17854:	21400044 	addi	r5,r4,1
   17858:	003d5406 	br	16dac <___vfiprintf_internal_r+0x350>
   1785c:	d8800984 	addi	r2,sp,38
   17860:	d8801715 	stw	r2,92(sp)
   17864:	00800084 	movi	r2,2
   17868:	d8801815 	stw	r2,96(sp)
   1786c:	01400044 	movi	r5,1
   17870:	9021883a 	mov	r16,r18
   17874:	2809883a 	mov	r4,r5
   17878:	84000204 	addi	r16,r16,8
   1787c:	21400044 	addi	r5,r4,1
   17880:	003d6206 	br	16e0c <___vfiprintf_internal_r+0x3b0>
   17884:	db400017 	ldw	r13,0(sp)
   17888:	003e9406 	br	172dc <___vfiprintf_internal_r+0x880>
   1788c:	9027883a 	mov	r19,r18
   17890:	b809883a 	mov	r4,r23
   17894:	e00b883a 	mov	r5,fp
   17898:	01800284 	movi	r6,10
   1789c:	000f883a 	mov	r7,zero
   178a0:	db800315 	stw	r14,12(sp)
   178a4:	da000215 	stw	r8,8(sp)
   178a8:	db400015 	stw	r13,0(sp)
   178ac:	00194840 	call	19484 <__umoddi3>
   178b0:	10800c04 	addi	r2,r2,48
   178b4:	b809883a 	mov	r4,r23
   178b8:	e00b883a 	mov	r5,fp
   178bc:	98bfffc5 	stb	r2,-1(r19)
   178c0:	01800284 	movi	r6,10
   178c4:	000f883a 	mov	r7,zero
   178c8:	0018ef40 	call	18ef4 <__udivdi3>
   178cc:	e009883a 	mov	r4,fp
   178d0:	b80b883a 	mov	r5,r23
   178d4:	db400017 	ldw	r13,0(sp)
   178d8:	da000217 	ldw	r8,8(sp)
   178dc:	db800317 	ldw	r14,12(sp)
   178e0:	9cffffc4 	addi	r19,r19,-1
   178e4:	102f883a 	mov	r23,r2
   178e8:	1839883a 	mov	fp,r3
   178ec:	203fe81e 	bne	r4,zero,17890 <___vfiprintf_internal_r+0xe34>
   178f0:	294002a8 	cmpgeui	r5,r5,10
   178f4:	283fe61e 	bne	r5,zero,17890 <___vfiprintf_internal_r+0xe34>
   178f8:	94f9c83a 	sub	fp,r18,r19
   178fc:	003e9406 	br	17350 <___vfiprintf_internal_r+0x8f4>
   17900:	19400450 	cmplti	r5,r3,17
   17904:	01c000b4 	movhi	r7,2
   17908:	2800ce1e 	bne	r5,zero,17c44 <___vfiprintf_internal_r+0x11e8>
   1790c:	39c6af04 	addi	r7,r7,6844
   17910:	03c00404 	movi	r15,16
   17914:	00000706 	br	17934 <___vfiprintf_internal_r+0xed8>
   17918:	27c00084 	addi	ra,r4,2
   1791c:	84000204 	addi	r16,r16,8
   17920:	3009883a 	mov	r4,r6
   17924:	18fffc04 	addi	r3,r3,-16
   17928:	19400448 	cmpgei	r5,r3,17
   1792c:	28002026 	beq	r5,zero,179b0 <___vfiprintf_internal_r+0xf54>
   17930:	21800044 	addi	r6,r4,1
   17934:	10800404 	addi	r2,r2,16
   17938:	81c00015 	stw	r7,0(r16)
   1793c:	83c00115 	stw	r15,4(r16)
   17940:	d8800c15 	stw	r2,48(sp)
   17944:	d9800b15 	stw	r6,44(sp)
   17948:	31400208 	cmpgei	r5,r6,8
   1794c:	283ff226 	beq	r5,zero,17918 <___vfiprintf_internal_r+0xebc>
   17950:	d9800a04 	addi	r6,sp,40
   17954:	a80b883a 	mov	r5,r21
   17958:	b009883a 	mov	r4,r22
   1795c:	10001f26 	beq	r2,zero,179dc <___vfiprintf_internal_r+0xf80>
   17960:	d9c00815 	stw	r7,32(sp)
   17964:	d8c00715 	stw	r3,28(sp)
   17968:	da000615 	stw	r8,24(sp)
   1796c:	db400315 	stw	r13,12(sp)
   17970:	db800215 	stw	r14,8(sp)
   17974:	00169500 	call	16950 <__sprint_r.part.0>
   17978:	103d481e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   1797c:	d8c00717 	ldw	r3,28(sp)
   17980:	d9000b17 	ldw	r4,44(sp)
   17984:	d8800c17 	ldw	r2,48(sp)
   17988:	18fffc04 	addi	r3,r3,-16
   1798c:	19400448 	cmpgei	r5,r3,17
   17990:	d9c00817 	ldw	r7,32(sp)
   17994:	da000617 	ldw	r8,24(sp)
   17998:	db400317 	ldw	r13,12(sp)
   1799c:	db800217 	ldw	r14,8(sp)
   179a0:	9021883a 	mov	r16,r18
   179a4:	27c00044 	addi	ra,r4,1
   179a8:	03c00404 	movi	r15,16
   179ac:	283fe01e 	bne	r5,zero,17930 <___vfiprintf_internal_r+0xed4>
   179b0:	10c5883a 	add	r2,r2,r3
   179b4:	80c00115 	stw	r3,4(r16)
   179b8:	81c00015 	stw	r7,0(r16)
   179bc:	d8800c15 	stw	r2,48(sp)
   179c0:	dfc00b15 	stw	ra,44(sp)
   179c4:	f8c00208 	cmpgei	r3,ra,8
   179c8:	18002f1e 	bne	r3,zero,17a88 <___vfiprintf_internal_r+0x102c>
   179cc:	84000204 	addi	r16,r16,8
   179d0:	f9400044 	addi	r5,ra,1
   179d4:	f809883a 	mov	r4,ra
   179d8:	003ce606 	br	16d74 <___vfiprintf_internal_r+0x318>
   179dc:	0009883a 	mov	r4,zero
   179e0:	07c00044 	movi	ra,1
   179e4:	9021883a 	mov	r16,r18
   179e8:	003fce06 	br	17924 <___vfiprintf_internal_r+0xec8>
   179ec:	8dc0010e 	bge	r17,r23,179f4 <___vfiprintf_internal_r+0xf98>
   179f0:	b823883a 	mov	r17,r23
   179f4:	d8800117 	ldw	r2,4(sp)
   179f8:	1445883a 	add	r2,r2,r17
   179fc:	d8800115 	stw	r2,4(sp)
   17a00:	003d2006 	br	16e84 <___vfiprintf_internal_r+0x428>
   17a04:	103ee526 	beq	r2,zero,1759c <___vfiprintf_internal_r+0xb40>
   17a08:	d9800a04 	addi	r6,sp,40
   17a0c:	a80b883a 	mov	r5,r21
   17a10:	b009883a 	mov	r4,r22
   17a14:	00169500 	call	16950 <__sprint_r.part.0>
   17a18:	103d201e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   17a1c:	d9400b17 	ldw	r5,44(sp)
   17a20:	d8800c17 	ldw	r2,48(sp)
   17a24:	9021883a 	mov	r16,r18
   17a28:	29400044 	addi	r5,r5,1
   17a2c:	003cfb06 	br	16e1c <___vfiprintf_internal_r+0x3c0>
   17a30:	d8000b15 	stw	zero,44(sp)
   17a34:	9021883a 	mov	r16,r18
   17a38:	003d7306 	br	17008 <___vfiprintf_internal_r+0x5ac>
   17a3c:	4000731e 	bne	r8,zero,17c0c <___vfiprintf_internal_r+0x11b0>
   17a40:	0011883a 	mov	r8,zero
   17a44:	0039883a 	mov	fp,zero
   17a48:	9027883a 	mov	r19,r18
   17a4c:	003e4006 	br	17350 <___vfiprintf_internal_r+0x8f4>
   17a50:	0039883a 	mov	fp,zero
   17a54:	003e9106 	br	1749c <___vfiprintf_internal_r+0xa40>
   17a58:	b839d7fa 	srai	fp,r23,31
   17a5c:	e005883a 	mov	r2,fp
   17a60:	003dd406 	br	171b4 <___vfiprintf_internal_r+0x758>
   17a64:	01400044 	movi	r5,1
   17a68:	0009883a 	mov	r4,zero
   17a6c:	9021883a 	mov	r16,r18
   17a70:	003ce606 	br	16e0c <___vfiprintf_internal_r+0x3b0>
   17a74:	70002b1e 	bne	r14,zero,17b24 <___vfiprintf_internal_r+0x10c8>
   17a78:	0009883a 	mov	r4,zero
   17a7c:	01400044 	movi	r5,1
   17a80:	9021883a 	mov	r16,r18
   17a84:	003ce106 	br	16e0c <___vfiprintf_internal_r+0x3b0>
   17a88:	10003726 	beq	r2,zero,17b68 <___vfiprintf_internal_r+0x110c>
   17a8c:	d9800a04 	addi	r6,sp,40
   17a90:	a80b883a 	mov	r5,r21
   17a94:	b009883a 	mov	r4,r22
   17a98:	da000615 	stw	r8,24(sp)
   17a9c:	db400315 	stw	r13,12(sp)
   17aa0:	db800215 	stw	r14,8(sp)
   17aa4:	00169500 	call	16950 <__sprint_r.part.0>
   17aa8:	103cfc1e 	bne	r2,zero,16e9c <___vfiprintf_internal_r+0x440>
   17aac:	d9000b17 	ldw	r4,44(sp)
   17ab0:	d8800c17 	ldw	r2,48(sp)
   17ab4:	da000617 	ldw	r8,24(sp)
   17ab8:	db400317 	ldw	r13,12(sp)
   17abc:	db800217 	ldw	r14,8(sp)
   17ac0:	9021883a 	mov	r16,r18
   17ac4:	21400044 	addi	r5,r4,1
   17ac8:	003caa06 	br	16d74 <___vfiprintf_internal_r+0x318>
   17acc:	a0800007 	ldb	r2,0(r20)
   17ad0:	d8c00415 	stw	r3,16(sp)
   17ad4:	003c2206 	br	16b60 <___vfiprintf_internal_r+0x104>
   17ad8:	9027883a 	mov	r19,r18
   17adc:	003e1c06 	br	17350 <___vfiprintf_internal_r+0x8f4>
   17ae0:	84000204 	addi	r16,r16,8
   17ae4:	31400044 	addi	r5,r6,1
   17ae8:	3009883a 	mov	r4,r6
   17aec:	003cc906 	br	16e14 <___vfiprintf_internal_r+0x3b8>
   17af0:	00c00c04 	movi	r3,48
   17af4:	d88009c5 	stb	r2,39(sp)
   17af8:	d8c00985 	stb	r3,38(sp)
   17afc:	6b400094 	ori	r13,r13,2
   17b00:	00800084 	movi	r2,2
   17b04:	003d2206 	br	16f90 <___vfiprintf_internal_r+0x534>
   17b08:	d9400117 	ldw	r5,4(sp)
   17b0c:	20800017 	ldw	r2,0(r4)
   17b10:	d8c00415 	stw	r3,16(sp)
   17b14:	2809d7fa 	srai	r4,r5,31
   17b18:	11400015 	stw	r5,0(r2)
   17b1c:	11000115 	stw	r4,4(r2)
   17b20:	003bf706 	br	16b00 <___vfiprintf_internal_r+0xa4>
   17b24:	d8800984 	addi	r2,sp,38
   17b28:	d8801715 	stw	r2,92(sp)
   17b2c:	00800084 	movi	r2,2
   17b30:	d8801815 	stw	r2,96(sp)
   17b34:	01000044 	movi	r4,1
   17b38:	9021883a 	mov	r16,r18
   17b3c:	003f4e06 	br	17878 <___vfiprintf_internal_r+0xe1c>
   17b40:	9809883a 	mov	r4,r19
   17b44:	d8c00215 	stw	r3,8(sp)
   17b48:	db400015 	stw	r13,0(sp)
   17b4c:	000d6fc0 	call	d6fc <strlen>
   17b50:	d8c00217 	ldw	r3,8(sp)
   17b54:	db400017 	ldw	r13,0(sp)
   17b58:	1039883a 	mov	fp,r2
   17b5c:	102f883a 	mov	r23,r2
   17b60:	d8c00415 	stw	r3,16(sp)
   17b64:	003c7406 	br	16d38 <___vfiprintf_internal_r+0x2dc>
   17b68:	d8c00947 	ldb	r3,37(sp)
   17b6c:	18001b26 	beq	r3,zero,17bdc <___vfiprintf_internal_r+0x1180>
   17b70:	d8800944 	addi	r2,sp,37
   17b74:	d8801715 	stw	r2,92(sp)
   17b78:	00800044 	movi	r2,1
   17b7c:	d8801815 	stw	r2,96(sp)
   17b80:	01400044 	movi	r5,1
   17b84:	9021883a 	mov	r16,r18
   17b88:	003c8506 	br	16da0 <___vfiprintf_internal_r+0x344>
   17b8c:	d8800417 	ldw	r2,16(sp)
   17b90:	10800017 	ldw	r2,0(r2)
   17b94:	d8c00415 	stw	r3,16(sp)
   17b98:	d8c00117 	ldw	r3,4(sp)
   17b9c:	10c00015 	stw	r3,0(r2)
   17ba0:	003bd706 	br	16b00 <___vfiprintf_internal_r+0xa4>
   17ba4:	408001f0 	cmpltui	r2,r8,7
   17ba8:	4039883a 	mov	fp,r8
   17bac:	10000926 	beq	r2,zero,17bd4 <___vfiprintf_internal_r+0x1178>
   17bb0:	04c000b4 	movhi	r19,2
   17bb4:	e02f883a 	mov	r23,fp
   17bb8:	d8c00415 	stw	r3,16(sp)
   17bbc:	9cc5d504 	addi	r19,r19,5972
   17bc0:	003c5d06 	br	16d38 <___vfiprintf_internal_r+0x2dc>
   17bc4:	01400044 	movi	r5,1
   17bc8:	0009883a 	mov	r4,zero
   17bcc:	9021883a 	mov	r16,r18
   17bd0:	003c9006 	br	16e14 <___vfiprintf_internal_r+0x3b8>
   17bd4:	07000184 	movi	fp,6
   17bd8:	003ff506 	br	17bb0 <___vfiprintf_internal_r+0x1154>
   17bdc:	703f1f1e 	bne	r14,zero,1785c <___vfiprintf_internal_r+0xe00>
   17be0:	0009883a 	mov	r4,zero
   17be4:	01400044 	movi	r5,1
   17be8:	9021883a 	mov	r16,r18
   17bec:	003c8906 	br	16e14 <___vfiprintf_internal_r+0x3b8>
   17bf0:	d9800945 	stb	r6,37(sp)
   17bf4:	003c4a06 	br	16d20 <___vfiprintf_internal_r+0x2c4>
   17bf8:	d9800a04 	addi	r6,sp,40
   17bfc:	a80b883a 	mov	r5,r21
   17c00:	b009883a 	mov	r4,r22
   17c04:	00169500 	call	16950 <__sprint_r.part.0>
   17c08:	003ca406 	br	16e9c <___vfiprintf_internal_r+0x440>
   17c0c:	db400017 	ldw	r13,0(sp)
   17c10:	003d7506 	br	171e8 <___vfiprintf_internal_r+0x78c>
   17c14:	402f883a 	mov	r23,r8
   17c18:	d8c00415 	stw	r3,16(sp)
   17c1c:	4039883a 	mov	fp,r8
   17c20:	003c4506 	br	16d38 <___vfiprintf_internal_r+0x2dc>
   17c24:	d9800945 	stb	r6,37(sp)
   17c28:	003d9106 	br	17270 <___vfiprintf_internal_r+0x814>
   17c2c:	d9800945 	stb	r6,37(sp)
   17c30:	003e1006 	br	17474 <___vfiprintf_internal_r+0xa18>
   17c34:	d9800945 	stb	r6,37(sp)
   17c38:	003def06 	br	173f8 <___vfiprintf_internal_r+0x99c>
   17c3c:	d9800945 	stb	r6,37(sp)
   17c40:	003e1e06 	br	174bc <___vfiprintf_internal_r+0xa60>
   17c44:	303f883a 	mov	ra,r6
   17c48:	39c6af04 	addi	r7,r7,6844
   17c4c:	003f5806 	br	179b0 <___vfiprintf_internal_r+0xf54>
   17c50:	d9800945 	stb	r6,37(sp)
   17c54:	003d4f06 	br	17194 <___vfiprintf_internal_r+0x738>
   17c58:	21400044 	addi	r5,r4,1
   17c5c:	39c6af04 	addi	r7,r7,6844
   17c60:	003d3906 	br	17148 <___vfiprintf_internal_r+0x6ec>
   17c64:	280d883a 	mov	r6,r5
   17c68:	39c6ab04 	addi	r7,r7,6828
   17c6c:	003e8206 	br	17678 <___vfiprintf_internal_r+0xc1c>
   17c70:	00bfffc4 	movi	r2,-1
   17c74:	d8800115 	stw	r2,4(sp)
   17c78:	003c8b06 	br	16ea8 <___vfiprintf_internal_r+0x44c>
   17c7c:	d8800417 	ldw	r2,16(sp)
   17c80:	12000017 	ldw	r8,0(r2)
   17c84:	10c00104 	addi	r3,r2,4
   17c88:	4000010e 	bge	r8,zero,17c90 <___vfiprintf_internal_r+0x1234>
   17c8c:	023fffc4 	movi	r8,-1
   17c90:	a0800043 	ldbu	r2,1(r20)
   17c94:	d8c00415 	stw	r3,16(sp)
   17c98:	2029883a 	mov	r20,r4
   17c9c:	10803fcc 	andi	r2,r2,255
   17ca0:	1080201c 	xori	r2,r2,128
   17ca4:	10bfe004 	addi	r2,r2,-128
   17ca8:	003bad06 	br	16b60 <___vfiprintf_internal_r+0x104>

00017cac <__vfiprintf_internal>:
   17cac:	00c000b4 	movhi	r3,2
   17cb0:	2005883a 	mov	r2,r4
   17cb4:	190eaa17 	ldw	r4,15016(r3)
   17cb8:	300f883a 	mov	r7,r6
   17cbc:	280d883a 	mov	r6,r5
   17cc0:	100b883a 	mov	r5,r2
   17cc4:	0016a5c1 	jmpi	16a5c <___vfiprintf_internal_r>

00017cc8 <__sbprintf>:
   17cc8:	2880030b 	ldhu	r2,12(r5)
   17ccc:	2b001917 	ldw	r12,100(r5)
   17cd0:	2ac0038b 	ldhu	r11,14(r5)
   17cd4:	2a800717 	ldw	r10,28(r5)
   17cd8:	2a400917 	ldw	r9,36(r5)
   17cdc:	defee204 	addi	sp,sp,-1144
   17ce0:	da001a04 	addi	r8,sp,104
   17ce4:	00c10004 	movi	r3,1024
   17ce8:	dc011a15 	stw	r16,1128(sp)
   17cec:	10bfff4c 	andi	r2,r2,65533
   17cf0:	2821883a 	mov	r16,r5
   17cf4:	d80b883a 	mov	r5,sp
   17cf8:	dc811c15 	stw	r18,1136(sp)
   17cfc:	dc411b15 	stw	r17,1132(sp)
   17d00:	dfc11d15 	stw	ra,1140(sp)
   17d04:	2025883a 	mov	r18,r4
   17d08:	d880030d 	sth	r2,12(sp)
   17d0c:	db001915 	stw	r12,100(sp)
   17d10:	dac0038d 	sth	r11,14(sp)
   17d14:	da800715 	stw	r10,28(sp)
   17d18:	da400915 	stw	r9,36(sp)
   17d1c:	da000015 	stw	r8,0(sp)
   17d20:	da000415 	stw	r8,16(sp)
   17d24:	d8c00215 	stw	r3,8(sp)
   17d28:	d8c00515 	stw	r3,20(sp)
   17d2c:	d8000615 	stw	zero,24(sp)
   17d30:	0016a5c0 	call	16a5c <___vfiprintf_internal_r>
   17d34:	1023883a 	mov	r17,r2
   17d38:	10000d0e 	bge	r2,zero,17d70 <__sbprintf+0xa8>
   17d3c:	d880030b 	ldhu	r2,12(sp)
   17d40:	1080100c 	andi	r2,r2,64
   17d44:	10000326 	beq	r2,zero,17d54 <__sbprintf+0x8c>
   17d48:	8080030b 	ldhu	r2,12(r16)
   17d4c:	10801014 	ori	r2,r2,64
   17d50:	8080030d 	sth	r2,12(r16)
   17d54:	8805883a 	mov	r2,r17
   17d58:	dfc11d17 	ldw	ra,1140(sp)
   17d5c:	dc811c17 	ldw	r18,1136(sp)
   17d60:	dc411b17 	ldw	r17,1132(sp)
   17d64:	dc011a17 	ldw	r16,1128(sp)
   17d68:	dec11e04 	addi	sp,sp,1144
   17d6c:	f800283a 	ret
   17d70:	d80b883a 	mov	r5,sp
   17d74:	9009883a 	mov	r4,r18
   17d78:	0012e700 	call	12e70 <_fflush_r>
   17d7c:	103fef26 	beq	r2,zero,17d3c <__sbprintf+0x74>
   17d80:	047fffc4 	movi	r17,-1
   17d84:	003fed06 	br	17d3c <__sbprintf+0x74>

00017d88 <_wctomb_r>:
   17d88:	008000b4 	movhi	r2,2
   17d8c:	1089cb17 	ldw	r2,10028(r2)
   17d90:	1000683a 	jmp	r2

00017d94 <__ascii_wctomb>:
   17d94:	28000926 	beq	r5,zero,17dbc <__ascii_wctomb+0x28>
   17d98:	30804030 	cmpltui	r2,r6,256
   17d9c:	10000326 	beq	r2,zero,17dac <__ascii_wctomb+0x18>
   17da0:	29800005 	stb	r6,0(r5)
   17da4:	00800044 	movi	r2,1
   17da8:	f800283a 	ret
   17dac:	00802284 	movi	r2,138
   17db0:	20800015 	stw	r2,0(r4)
   17db4:	00bfffc4 	movi	r2,-1
   17db8:	f800283a 	ret
   17dbc:	0005883a 	mov	r2,zero
   17dc0:	f800283a 	ret

00017dc4 <_write_r>:
   17dc4:	2807883a 	mov	r3,r5
   17dc8:	defffe04 	addi	sp,sp,-8
   17dcc:	dc000015 	stw	r16,0(sp)
   17dd0:	300b883a 	mov	r5,r6
   17dd4:	008000b4 	movhi	r2,2
   17dd8:	380d883a 	mov	r6,r7
   17ddc:	2021883a 	mov	r16,r4
   17de0:	1809883a 	mov	r4,r3
   17de4:	dfc00115 	stw	ra,4(sp)
   17de8:	1015ee15 	stw	zero,22456(r2)
   17dec:	001a71c0 	call	1a71c <write>
   17df0:	10ffffd8 	cmpnei	r3,r2,-1
   17df4:	18000426 	beq	r3,zero,17e08 <_write_r+0x44>
   17df8:	dfc00117 	ldw	ra,4(sp)
   17dfc:	dc000017 	ldw	r16,0(sp)
   17e00:	dec00204 	addi	sp,sp,8
   17e04:	f800283a 	ret
   17e08:	00c000b4 	movhi	r3,2
   17e0c:	18d5ee17 	ldw	r3,22456(r3)
   17e10:	183ff926 	beq	r3,zero,17df8 <_write_r+0x34>
   17e14:	80c00015 	stw	r3,0(r16)
   17e18:	dfc00117 	ldw	ra,4(sp)
   17e1c:	dc000017 	ldw	r16,0(sp)
   17e20:	dec00204 	addi	sp,sp,8
   17e24:	f800283a 	ret

00017e28 <_close_r>:
   17e28:	defffe04 	addi	sp,sp,-8
   17e2c:	dc000015 	stw	r16,0(sp)
   17e30:	008000b4 	movhi	r2,2
   17e34:	2021883a 	mov	r16,r4
   17e38:	2809883a 	mov	r4,r5
   17e3c:	dfc00115 	stw	ra,4(sp)
   17e40:	1015ee15 	stw	zero,22456(r2)
   17e44:	0019af40 	call	19af4 <close>
   17e48:	10ffffd8 	cmpnei	r3,r2,-1
   17e4c:	18000426 	beq	r3,zero,17e60 <_close_r+0x38>
   17e50:	dfc00117 	ldw	ra,4(sp)
   17e54:	dc000017 	ldw	r16,0(sp)
   17e58:	dec00204 	addi	sp,sp,8
   17e5c:	f800283a 	ret
   17e60:	00c000b4 	movhi	r3,2
   17e64:	18d5ee17 	ldw	r3,22456(r3)
   17e68:	183ff926 	beq	r3,zero,17e50 <_close_r+0x28>
   17e6c:	80c00015 	stw	r3,0(r16)
   17e70:	dfc00117 	ldw	ra,4(sp)
   17e74:	dc000017 	ldw	r16,0(sp)
   17e78:	dec00204 	addi	sp,sp,8
   17e7c:	f800283a 	ret

00017e80 <__assert_func>:
   17e80:	008000b4 	movhi	r2,2
   17e84:	120eaa17 	ldw	r8,15016(r2)
   17e88:	defffc04 	addi	sp,sp,-16
   17e8c:	3807883a 	mov	r3,r7
   17e90:	3005883a 	mov	r2,r6
   17e94:	dfc00315 	stw	ra,12(sp)
   17e98:	42400317 	ldw	r9,12(r8)
   17e9c:	200f883a 	mov	r7,r4
   17ea0:	2811883a 	mov	r8,r5
   17ea4:	180d883a 	mov	r6,r3
   17ea8:	10000a26 	beq	r2,zero,17ed4 <__assert_func+0x54>
   17eac:	00c000b4 	movhi	r3,2
   17eb0:	18c6b304 	addi	r3,r3,6860
   17eb4:	014000b4 	movhi	r5,2
   17eb8:	2946b704 	addi	r5,r5,6876
   17ebc:	4809883a 	mov	r4,r9
   17ec0:	d8c00115 	stw	r3,4(sp)
   17ec4:	da000015 	stw	r8,0(sp)
   17ec8:	d8800215 	stw	r2,8(sp)
   17ecc:	00181940 	call	18194 <fiprintf>
   17ed0:	00187a40 	call	187a4 <abort>
   17ed4:	00c000b4 	movhi	r3,2
   17ed8:	18c6b604 	addi	r3,r3,6872
   17edc:	1805883a 	mov	r2,r3
   17ee0:	003ff406 	br	17eb4 <__assert_func+0x34>

00017ee4 <__assert>:
   17ee4:	deffff04 	addi	sp,sp,-4
   17ee8:	300f883a 	mov	r7,r6
   17eec:	000d883a 	mov	r6,zero
   17ef0:	dfc00015 	stw	ra,0(sp)
   17ef4:	0017e800 	call	17e80 <__assert_func>

00017ef8 <_calloc_r>:
   17ef8:	2984383a 	mulxuu	r2,r5,r6
   17efc:	deffff04 	addi	sp,sp,-4
   17f00:	dfc00015 	stw	ra,0(sp)
   17f04:	298b383a 	mul	r5,r5,r6
   17f08:	1000261e 	bne	r2,zero,17fa4 <_calloc_r+0xac>
   17f0c:	000cc800 	call	cc80 <_malloc_r>
   17f10:	1009883a 	mov	r4,r2
   17f14:	10001626 	beq	r2,zero,17f70 <_calloc_r+0x78>
   17f18:	11bfff17 	ldw	r6,-4(r2)
   17f1c:	00bfff04 	movi	r2,-4
   17f20:	308c703a 	and	r6,r6,r2
   17f24:	31bfff04 	addi	r6,r6,-4
   17f28:	30800968 	cmpgeui	r2,r6,37
   17f2c:	1000141e 	bne	r2,zero,17f80 <_calloc_r+0x88>
   17f30:	30800530 	cmpltui	r2,r6,20
   17f34:	10000a1e 	bne	r2,zero,17f60 <_calloc_r+0x68>
   17f38:	20000015 	stw	zero,0(r4)
   17f3c:	20000115 	stw	zero,4(r4)
   17f40:	30800728 	cmpgeui	r2,r6,28
   17f44:	10001526 	beq	r2,zero,17f9c <_calloc_r+0xa4>
   17f48:	20000215 	stw	zero,8(r4)
   17f4c:	20000315 	stw	zero,12(r4)
   17f50:	31800920 	cmpeqi	r6,r6,36
   17f54:	30001b1e 	bne	r6,zero,17fc4 <_calloc_r+0xcc>
   17f58:	20800404 	addi	r2,r4,16
   17f5c:	00000106 	br	17f64 <_calloc_r+0x6c>
   17f60:	2005883a 	mov	r2,r4
   17f64:	10000015 	stw	zero,0(r2)
   17f68:	10000115 	stw	zero,4(r2)
   17f6c:	10000215 	stw	zero,8(r2)
   17f70:	2005883a 	mov	r2,r4
   17f74:	dfc00017 	ldw	ra,0(sp)
   17f78:	dec00104 	addi	sp,sp,4
   17f7c:	f800283a 	ret
   17f80:	000b883a 	mov	r5,zero
   17f84:	0014efc0 	call	14efc <memset>
   17f88:	1009883a 	mov	r4,r2
   17f8c:	2005883a 	mov	r2,r4
   17f90:	dfc00017 	ldw	ra,0(sp)
   17f94:	dec00104 	addi	sp,sp,4
   17f98:	f800283a 	ret
   17f9c:	20800204 	addi	r2,r4,8
   17fa0:	003ff006 	br	17f64 <_calloc_r+0x6c>
   17fa4:	000cc540 	call	cc54 <__errno>
   17fa8:	00c00304 	movi	r3,12
   17fac:	0009883a 	mov	r4,zero
   17fb0:	10c00015 	stw	r3,0(r2)
   17fb4:	2005883a 	mov	r2,r4
   17fb8:	dfc00017 	ldw	ra,0(sp)
   17fbc:	dec00104 	addi	sp,sp,4
   17fc0:	f800283a 	ret
   17fc4:	20000415 	stw	zero,16(r4)
   17fc8:	20800604 	addi	r2,r4,24
   17fcc:	20000515 	stw	zero,20(r4)
   17fd0:	003fe406 	br	17f64 <_calloc_r+0x6c>

00017fd4 <_fclose_r.part.0>:
   17fd4:	defffc04 	addi	sp,sp,-16
   17fd8:	dc800215 	stw	r18,8(sp)
   17fdc:	dc400115 	stw	r17,4(sp)
   17fe0:	dc000015 	stw	r16,0(sp)
   17fe4:	dfc00315 	stw	ra,12(sp)
   17fe8:	2821883a 	mov	r16,r5
   17fec:	2023883a 	mov	r17,r4
   17ff0:	0012c480 	call	12c48 <__sflush_r>
   17ff4:	80c00b17 	ldw	r3,44(r16)
   17ff8:	1025883a 	mov	r18,r2
   17ffc:	18000426 	beq	r3,zero,18010 <_fclose_r.part.0+0x3c>
   18000:	81400717 	ldw	r5,28(r16)
   18004:	8809883a 	mov	r4,r17
   18008:	183ee83a 	callr	r3
   1800c:	10001916 	blt	r2,zero,18074 <_fclose_r.part.0+0xa0>
   18010:	8080030b 	ldhu	r2,12(r16)
   18014:	1080200c 	andi	r2,r2,128
   18018:	10001a1e 	bne	r2,zero,18084 <_fclose_r.part.0+0xb0>
   1801c:	81400c17 	ldw	r5,48(r16)
   18020:	28000526 	beq	r5,zero,18038 <_fclose_r.part.0+0x64>
   18024:	80801004 	addi	r2,r16,64
   18028:	28800226 	beq	r5,r2,18034 <_fclose_r.part.0+0x60>
   1802c:	8809883a 	mov	r4,r17
   18030:	001340c0 	call	1340c <_free_r>
   18034:	80000c15 	stw	zero,48(r16)
   18038:	81401117 	ldw	r5,68(r16)
   1803c:	28000326 	beq	r5,zero,1804c <_fclose_r.part.0+0x78>
   18040:	8809883a 	mov	r4,r17
   18044:	001340c0 	call	1340c <_free_r>
   18048:	80001115 	stw	zero,68(r16)
   1804c:	00132b80 	call	132b8 <__sfp_lock_acquire>
   18050:	8000030d 	sth	zero,12(r16)
   18054:	00132bc0 	call	132bc <__sfp_lock_release>
   18058:	9005883a 	mov	r2,r18
   1805c:	dfc00317 	ldw	ra,12(sp)
   18060:	dc800217 	ldw	r18,8(sp)
   18064:	dc400117 	ldw	r17,4(sp)
   18068:	dc000017 	ldw	r16,0(sp)
   1806c:	dec00404 	addi	sp,sp,16
   18070:	f800283a 	ret
   18074:	8080030b 	ldhu	r2,12(r16)
   18078:	04bfffc4 	movi	r18,-1
   1807c:	1080200c 	andi	r2,r2,128
   18080:	103fe626 	beq	r2,zero,1801c <_fclose_r.part.0+0x48>
   18084:	81400417 	ldw	r5,16(r16)
   18088:	8809883a 	mov	r4,r17
   1808c:	001340c0 	call	1340c <_free_r>
   18090:	003fe206 	br	1801c <_fclose_r.part.0+0x48>

00018094 <_fclose_r>:
   18094:	28001926 	beq	r5,zero,180fc <_fclose_r+0x68>
   18098:	defffd04 	addi	sp,sp,-12
   1809c:	dc000115 	stw	r16,4(sp)
   180a0:	dfc00215 	stw	ra,8(sp)
   180a4:	2021883a 	mov	r16,r4
   180a8:	20000226 	beq	r4,zero,180b4 <_fclose_r+0x20>
   180ac:	20800e17 	ldw	r2,56(r4)
   180b0:	10000c26 	beq	r2,zero,180e4 <_fclose_r+0x50>
   180b4:	2880030f 	ldh	r2,12(r5)
   180b8:	1000051e 	bne	r2,zero,180d0 <_fclose_r+0x3c>
   180bc:	0005883a 	mov	r2,zero
   180c0:	dfc00217 	ldw	ra,8(sp)
   180c4:	dc000117 	ldw	r16,4(sp)
   180c8:	dec00304 	addi	sp,sp,12
   180cc:	f800283a 	ret
   180d0:	8009883a 	mov	r4,r16
   180d4:	dfc00217 	ldw	ra,8(sp)
   180d8:	dc000117 	ldw	r16,4(sp)
   180dc:	dec00304 	addi	sp,sp,12
   180e0:	0017fd41 	jmpi	17fd4 <_fclose_r.part.0>
   180e4:	d9400015 	stw	r5,0(sp)
   180e8:	00132a80 	call	132a8 <__sinit>
   180ec:	d9400017 	ldw	r5,0(sp)
   180f0:	2880030f 	ldh	r2,12(r5)
   180f4:	103ff126 	beq	r2,zero,180bc <_fclose_r+0x28>
   180f8:	003ff506 	br	180d0 <_fclose_r+0x3c>
   180fc:	0005883a 	mov	r2,zero
   18100:	f800283a 	ret

00018104 <fclose>:
   18104:	20000826 	beq	r4,zero,18128 <fclose+0x24>
   18108:	008000b4 	movhi	r2,2
   1810c:	200b883a 	mov	r5,r4
   18110:	110eaa17 	ldw	r4,15016(r2)
   18114:	20000226 	beq	r4,zero,18120 <fclose+0x1c>
   18118:	20800e17 	ldw	r2,56(r4)
   1811c:	10000526 	beq	r2,zero,18134 <fclose+0x30>
   18120:	2880030f 	ldh	r2,12(r5)
   18124:	1000021e 	bne	r2,zero,18130 <fclose+0x2c>
   18128:	0005883a 	mov	r2,zero
   1812c:	f800283a 	ret
   18130:	0017fd41 	jmpi	17fd4 <_fclose_r.part.0>
   18134:	defffd04 	addi	sp,sp,-12
   18138:	d9400115 	stw	r5,4(sp)
   1813c:	d9000015 	stw	r4,0(sp)
   18140:	dfc00215 	stw	ra,8(sp)
   18144:	00132a80 	call	132a8 <__sinit>
   18148:	d9400117 	ldw	r5,4(sp)
   1814c:	d9000017 	ldw	r4,0(sp)
   18150:	2880030f 	ldh	r2,12(r5)
   18154:	10000326 	beq	r2,zero,18164 <fclose+0x60>
   18158:	dfc00217 	ldw	ra,8(sp)
   1815c:	dec00304 	addi	sp,sp,12
   18160:	0017fd41 	jmpi	17fd4 <_fclose_r.part.0>
   18164:	0005883a 	mov	r2,zero
   18168:	dfc00217 	ldw	ra,8(sp)
   1816c:	dec00304 	addi	sp,sp,12
   18170:	f800283a 	ret

00018174 <_fiprintf_r>:
   18174:	defffe04 	addi	sp,sp,-8
   18178:	dfc00015 	stw	ra,0(sp)
   1817c:	d9c00115 	stw	r7,4(sp)
   18180:	d9c00104 	addi	r7,sp,4
   18184:	001854c0 	call	1854c <_vfiprintf_r>
   18188:	dfc00017 	ldw	ra,0(sp)
   1818c:	dec00204 	addi	sp,sp,8
   18190:	f800283a 	ret

00018194 <fiprintf>:
   18194:	defffd04 	addi	sp,sp,-12
   18198:	2005883a 	mov	r2,r4
   1819c:	dfc00015 	stw	ra,0(sp)
   181a0:	d9800115 	stw	r6,4(sp)
   181a4:	d9c00215 	stw	r7,8(sp)
   181a8:	00c000b4 	movhi	r3,2
   181ac:	190eaa17 	ldw	r4,15016(r3)
   181b0:	280d883a 	mov	r6,r5
   181b4:	d9c00104 	addi	r7,sp,4
   181b8:	100b883a 	mov	r5,r2
   181bc:	001854c0 	call	1854c <_vfiprintf_r>
   181c0:	dfc00017 	ldw	ra,0(sp)
   181c4:	dec00304 	addi	sp,sp,12
   181c8:	f800283a 	ret

000181cc <__fputwc>:
   181cc:	defff904 	addi	sp,sp,-28
   181d0:	dcc00415 	stw	r19,16(sp)
   181d4:	dc800315 	stw	r18,12(sp)
   181d8:	dc000115 	stw	r16,4(sp)
   181dc:	dfc00615 	stw	ra,24(sp)
   181e0:	dd000515 	stw	r20,20(sp)
   181e4:	dc400215 	stw	r17,8(sp)
   181e8:	2025883a 	mov	r18,r4
   181ec:	2827883a 	mov	r19,r5
   181f0:	3021883a 	mov	r16,r6
   181f4:	00149c80 	call	149c8 <__locale_mb_cur_max>
   181f8:	10800058 	cmpnei	r2,r2,1
   181fc:	1000071e 	bne	r2,zero,1821c <__fputwc+0x50>
   18200:	98bfffc4 	addi	r2,r19,-1
   18204:	10803fe8 	cmpgeui	r2,r2,255
   18208:	1000041e 	bne	r2,zero,1821c <__fputwc+0x50>
   1820c:	980b883a 	mov	r5,r19
   18210:	dcc000c5 	stb	r19,3(sp)
   18214:	05000044 	movi	r20,1
   18218:	00000a06 	br	18244 <__fputwc+0x78>
   1821c:	81c01704 	addi	r7,r16,92
   18220:	980d883a 	mov	r6,r19
   18224:	d94000c4 	addi	r5,sp,3
   18228:	9009883a 	mov	r4,r18
   1822c:	00186b00 	call	186b0 <_wcrtomb_r>
   18230:	1029883a 	mov	r20,r2
   18234:	10bfffd8 	cmpnei	r2,r2,-1
   18238:	10003926 	beq	r2,zero,18320 <__fputwc+0x154>
   1823c:	a0001f26 	beq	r20,zero,182bc <__fputwc+0xf0>
   18240:	d94000c3 	ldbu	r5,3(sp)
   18244:	0023883a 	mov	r17,zero
   18248:	00000a06 	br	18274 <__fputwc+0xa8>
   1824c:	80800017 	ldw	r2,0(r16)
   18250:	11400005 	stb	r5,0(r2)
   18254:	80c00017 	ldw	r3,0(r16)
   18258:	18c00044 	addi	r3,r3,1
   1825c:	80c00015 	stw	r3,0(r16)
   18260:	8c400044 	addi	r17,r17,1
   18264:	d88000c4 	addi	r2,sp,3
   18268:	1447883a 	add	r3,r2,r17
   1826c:	8d00132e 	bgeu	r17,r20,182bc <__fputwc+0xf0>
   18270:	19400003 	ldbu	r5,0(r3)
   18274:	80c00217 	ldw	r3,8(r16)
   18278:	18ffffc4 	addi	r3,r3,-1
   1827c:	80c00215 	stw	r3,8(r16)
   18280:	183ff20e 	bge	r3,zero,1824c <__fputwc+0x80>
   18284:	80800617 	ldw	r2,24(r16)
   18288:	18801616 	blt	r3,r2,182e4 <__fputwc+0x118>
   1828c:	80800017 	ldw	r2,0(r16)
   18290:	11400005 	stb	r5,0(r2)
   18294:	80800017 	ldw	r2,0(r16)
   18298:	10c00003 	ldbu	r3,0(r2)
   1829c:	10800044 	addi	r2,r2,1
   182a0:	18c002a0 	cmpeqi	r3,r3,10
   182a4:	1800171e 	bne	r3,zero,18304 <__fputwc+0x138>
   182a8:	80800015 	stw	r2,0(r16)
   182ac:	8c400044 	addi	r17,r17,1
   182b0:	d88000c4 	addi	r2,sp,3
   182b4:	1447883a 	add	r3,r2,r17
   182b8:	8d3fed36 	bltu	r17,r20,18270 <__fputwc+0xa4>
   182bc:	9829883a 	mov	r20,r19
   182c0:	a005883a 	mov	r2,r20
   182c4:	dfc00617 	ldw	ra,24(sp)
   182c8:	dd000517 	ldw	r20,20(sp)
   182cc:	dcc00417 	ldw	r19,16(sp)
   182d0:	dc800317 	ldw	r18,12(sp)
   182d4:	dc400217 	ldw	r17,8(sp)
   182d8:	dc000117 	ldw	r16,4(sp)
   182dc:	dec00704 	addi	sp,sp,28
   182e0:	f800283a 	ret
   182e4:	29403fcc 	andi	r5,r5,255
   182e8:	800d883a 	mov	r6,r16
   182ec:	9009883a 	mov	r4,r18
   182f0:	00185500 	call	18550 <__swbuf_r>
   182f4:	10bfffe0 	cmpeqi	r2,r2,-1
   182f8:	103fd926 	beq	r2,zero,18260 <__fputwc+0x94>
   182fc:	053fffc4 	movi	r20,-1
   18300:	003fef06 	br	182c0 <__fputwc+0xf4>
   18304:	800d883a 	mov	r6,r16
   18308:	01400284 	movi	r5,10
   1830c:	9009883a 	mov	r4,r18
   18310:	00185500 	call	18550 <__swbuf_r>
   18314:	10bfffe0 	cmpeqi	r2,r2,-1
   18318:	103fd126 	beq	r2,zero,18260 <__fputwc+0x94>
   1831c:	003ff706 	br	182fc <__fputwc+0x130>
   18320:	8080030b 	ldhu	r2,12(r16)
   18324:	10801014 	ori	r2,r2,64
   18328:	8080030d 	sth	r2,12(r16)
   1832c:	003fe406 	br	182c0 <__fputwc+0xf4>

00018330 <_fputwc_r>:
   18330:	3080030b 	ldhu	r2,12(r6)
   18334:	10c8000c 	andi	r3,r2,8192
   18338:	1800051e 	bne	r3,zero,18350 <_fputwc_r+0x20>
   1833c:	30c01917 	ldw	r3,100(r6)
   18340:	10880014 	ori	r2,r2,8192
   18344:	3080030d 	sth	r2,12(r6)
   18348:	18880014 	ori	r2,r3,8192
   1834c:	30801915 	stw	r2,100(r6)
   18350:	00181cc1 	jmpi	181cc <__fputwc>

00018354 <fputwc>:
   18354:	defffc04 	addi	sp,sp,-16
   18358:	008000b4 	movhi	r2,2
   1835c:	dc000215 	stw	r16,8(sp)
   18360:	140eaa17 	ldw	r16,15016(r2)
   18364:	dfc00315 	stw	ra,12(sp)
   18368:	280d883a 	mov	r6,r5
   1836c:	200b883a 	mov	r5,r4
   18370:	80000226 	beq	r16,zero,1837c <fputwc+0x28>
   18374:	80800e17 	ldw	r2,56(r16)
   18378:	10000d26 	beq	r2,zero,183b0 <fputwc+0x5c>
   1837c:	3080030b 	ldhu	r2,12(r6)
   18380:	10c8000c 	andi	r3,r2,8192
   18384:	1800051e 	bne	r3,zero,1839c <fputwc+0x48>
   18388:	30c01917 	ldw	r3,100(r6)
   1838c:	10880014 	ori	r2,r2,8192
   18390:	3080030d 	sth	r2,12(r6)
   18394:	18880014 	ori	r2,r3,8192
   18398:	30801915 	stw	r2,100(r6)
   1839c:	8009883a 	mov	r4,r16
   183a0:	dfc00317 	ldw	ra,12(sp)
   183a4:	dc000217 	ldw	r16,8(sp)
   183a8:	dec00404 	addi	sp,sp,16
   183ac:	00181cc1 	jmpi	181cc <__fputwc>
   183b0:	d9000015 	stw	r4,0(sp)
   183b4:	8009883a 	mov	r4,r16
   183b8:	d9800115 	stw	r6,4(sp)
   183bc:	00132a80 	call	132a8 <__sinit>
   183c0:	d9800117 	ldw	r6,4(sp)
   183c4:	d9400017 	ldw	r5,0(sp)
   183c8:	003fec06 	br	1837c <fputwc+0x28>

000183cc <_fstat_r>:
   183cc:	2807883a 	mov	r3,r5
   183d0:	defffe04 	addi	sp,sp,-8
   183d4:	dc000015 	stw	r16,0(sp)
   183d8:	008000b4 	movhi	r2,2
   183dc:	300b883a 	mov	r5,r6
   183e0:	2021883a 	mov	r16,r4
   183e4:	1809883a 	mov	r4,r3
   183e8:	dfc00115 	stw	ra,4(sp)
   183ec:	1015ee15 	stw	zero,22456(r2)
   183f0:	0019c640 	call	19c64 <fstat>
   183f4:	10ffffd8 	cmpnei	r3,r2,-1
   183f8:	18000426 	beq	r3,zero,1840c <_fstat_r+0x40>
   183fc:	dfc00117 	ldw	ra,4(sp)
   18400:	dc000017 	ldw	r16,0(sp)
   18404:	dec00204 	addi	sp,sp,8
   18408:	f800283a 	ret
   1840c:	00c000b4 	movhi	r3,2
   18410:	18d5ee17 	ldw	r3,22456(r3)
   18414:	183ff926 	beq	r3,zero,183fc <_fstat_r+0x30>
   18418:	80c00015 	stw	r3,0(r16)
   1841c:	dfc00117 	ldw	ra,4(sp)
   18420:	dc000017 	ldw	r16,0(sp)
   18424:	dec00204 	addi	sp,sp,8
   18428:	f800283a 	ret

0001842c <_isatty_r>:
   1842c:	defffe04 	addi	sp,sp,-8
   18430:	dc000015 	stw	r16,0(sp)
   18434:	008000b4 	movhi	r2,2
   18438:	2021883a 	mov	r16,r4
   1843c:	2809883a 	mov	r4,r5
   18440:	dfc00115 	stw	ra,4(sp)
   18444:	1015ee15 	stw	zero,22456(r2)
   18448:	0019d700 	call	19d70 <isatty>
   1844c:	10ffffd8 	cmpnei	r3,r2,-1
   18450:	18000426 	beq	r3,zero,18464 <_isatty_r+0x38>
   18454:	dfc00117 	ldw	ra,4(sp)
   18458:	dc000017 	ldw	r16,0(sp)
   1845c:	dec00204 	addi	sp,sp,8
   18460:	f800283a 	ret
   18464:	00c000b4 	movhi	r3,2
   18468:	18d5ee17 	ldw	r3,22456(r3)
   1846c:	183ff926 	beq	r3,zero,18454 <_isatty_r+0x28>
   18470:	80c00015 	stw	r3,0(r16)
   18474:	dfc00117 	ldw	ra,4(sp)
   18478:	dc000017 	ldw	r16,0(sp)
   1847c:	dec00204 	addi	sp,sp,8
   18480:	f800283a 	ret

00018484 <_lseek_r>:
   18484:	2807883a 	mov	r3,r5
   18488:	defffe04 	addi	sp,sp,-8
   1848c:	dc000015 	stw	r16,0(sp)
   18490:	300b883a 	mov	r5,r6
   18494:	008000b4 	movhi	r2,2
   18498:	380d883a 	mov	r6,r7
   1849c:	2021883a 	mov	r16,r4
   184a0:	1809883a 	mov	r4,r3
   184a4:	dfc00115 	stw	ra,4(sp)
   184a8:	1015ee15 	stw	zero,22456(r2)
   184ac:	001a0a40 	call	1a0a4 <lseek>
   184b0:	10ffffd8 	cmpnei	r3,r2,-1
   184b4:	18000426 	beq	r3,zero,184c8 <_lseek_r+0x44>
   184b8:	dfc00117 	ldw	ra,4(sp)
   184bc:	dc000017 	ldw	r16,0(sp)
   184c0:	dec00204 	addi	sp,sp,8
   184c4:	f800283a 	ret
   184c8:	00c000b4 	movhi	r3,2
   184cc:	18d5ee17 	ldw	r3,22456(r3)
   184d0:	183ff926 	beq	r3,zero,184b8 <_lseek_r+0x34>
   184d4:	80c00015 	stw	r3,0(r16)
   184d8:	dfc00117 	ldw	ra,4(sp)
   184dc:	dc000017 	ldw	r16,0(sp)
   184e0:	dec00204 	addi	sp,sp,8
   184e4:	f800283a 	ret

000184e8 <_read_r>:
   184e8:	2807883a 	mov	r3,r5
   184ec:	defffe04 	addi	sp,sp,-8
   184f0:	dc000015 	stw	r16,0(sp)
   184f4:	300b883a 	mov	r5,r6
   184f8:	008000b4 	movhi	r2,2
   184fc:	380d883a 	mov	r6,r7
   18500:	2021883a 	mov	r16,r4
   18504:	1809883a 	mov	r4,r3
   18508:	dfc00115 	stw	ra,4(sp)
   1850c:	1015ee15 	stw	zero,22456(r2)
   18510:	001a4d40 	call	1a4d4 <read>
   18514:	10ffffd8 	cmpnei	r3,r2,-1
   18518:	18000426 	beq	r3,zero,1852c <_read_r+0x44>
   1851c:	dfc00117 	ldw	ra,4(sp)
   18520:	dc000017 	ldw	r16,0(sp)
   18524:	dec00204 	addi	sp,sp,8
   18528:	f800283a 	ret
   1852c:	00c000b4 	movhi	r3,2
   18530:	18d5ee17 	ldw	r3,22456(r3)
   18534:	183ff926 	beq	r3,zero,1851c <_read_r+0x34>
   18538:	80c00015 	stw	r3,0(r16)
   1853c:	dfc00117 	ldw	ra,4(sp)
   18540:	dc000017 	ldw	r16,0(sp)
   18544:	dec00204 	addi	sp,sp,8
   18548:	f800283a 	ret

0001854c <_vfiprintf_r>:
   1854c:	0016a5c1 	jmpi	16a5c <___vfiprintf_internal_r>

00018550 <__swbuf_r>:
   18550:	defffb04 	addi	sp,sp,-20
   18554:	dcc00315 	stw	r19,12(sp)
   18558:	dc400115 	stw	r17,4(sp)
   1855c:	dc000015 	stw	r16,0(sp)
   18560:	dfc00415 	stw	ra,16(sp)
   18564:	dc800215 	stw	r18,8(sp)
   18568:	2027883a 	mov	r19,r4
   1856c:	2823883a 	mov	r17,r5
   18570:	3021883a 	mov	r16,r6
   18574:	20000226 	beq	r4,zero,18580 <__swbuf_r+0x30>
   18578:	20800e17 	ldw	r2,56(r4)
   1857c:	10003e26 	beq	r2,zero,18678 <__swbuf_r+0x128>
   18580:	80800617 	ldw	r2,24(r16)
   18584:	80c0030b 	ldhu	r3,12(r16)
   18588:	80800215 	stw	r2,8(r16)
   1858c:	1880020c 	andi	r2,r3,8
   18590:	10001f26 	beq	r2,zero,18610 <__swbuf_r+0xc0>
   18594:	80800417 	ldw	r2,16(r16)
   18598:	10001d26 	beq	r2,zero,18610 <__swbuf_r+0xc0>
   1859c:	1948000c 	andi	r5,r3,8192
   185a0:	8c803fcc 	andi	r18,r17,255
   185a4:	28002326 	beq	r5,zero,18634 <__swbuf_r+0xe4>
   185a8:	80c00017 	ldw	r3,0(r16)
   185ac:	81000517 	ldw	r4,20(r16)
   185b0:	1885c83a 	sub	r2,r3,r2
   185b4:	1100290e 	bge	r2,r4,1865c <__swbuf_r+0x10c>
   185b8:	10800044 	addi	r2,r2,1
   185bc:	81400217 	ldw	r5,8(r16)
   185c0:	19000044 	addi	r4,r3,1
   185c4:	81000015 	stw	r4,0(r16)
   185c8:	297fffc4 	addi	r5,r5,-1
   185cc:	81400215 	stw	r5,8(r16)
   185d0:	1c400005 	stb	r17,0(r3)
   185d4:	80c00517 	ldw	r3,20(r16)
   185d8:	18802926 	beq	r3,r2,18680 <__swbuf_r+0x130>
   185dc:	8080030b 	ldhu	r2,12(r16)
   185e0:	1080004c 	andi	r2,r2,1
   185e4:	10000226 	beq	r2,zero,185f0 <__swbuf_r+0xa0>
   185e8:	90800298 	cmpnei	r2,r18,10
   185ec:	10002426 	beq	r2,zero,18680 <__swbuf_r+0x130>
   185f0:	9005883a 	mov	r2,r18
   185f4:	dfc00417 	ldw	ra,16(sp)
   185f8:	dcc00317 	ldw	r19,12(sp)
   185fc:	dc800217 	ldw	r18,8(sp)
   18600:	dc400117 	ldw	r17,4(sp)
   18604:	dc000017 	ldw	r16,0(sp)
   18608:	dec00504 	addi	sp,sp,20
   1860c:	f800283a 	ret
   18610:	800b883a 	mov	r5,r16
   18614:	9809883a 	mov	r4,r19
   18618:	00111a00 	call	111a0 <__swsetup_r>
   1861c:	10001c1e 	bne	r2,zero,18690 <__swbuf_r+0x140>
   18620:	80c0030b 	ldhu	r3,12(r16)
   18624:	80800417 	ldw	r2,16(r16)
   18628:	8c803fcc 	andi	r18,r17,255
   1862c:	1948000c 	andi	r5,r3,8192
   18630:	283fdd1e 	bne	r5,zero,185a8 <__swbuf_r+0x58>
   18634:	81001917 	ldw	r4,100(r16)
   18638:	18c80014 	ori	r3,r3,8192
   1863c:	0177ffc4 	movi	r5,-8193
   18640:	2148703a 	and	r4,r4,r5
   18644:	80c0030d 	sth	r3,12(r16)
   18648:	80c00017 	ldw	r3,0(r16)
   1864c:	81001915 	stw	r4,100(r16)
   18650:	81000517 	ldw	r4,20(r16)
   18654:	1885c83a 	sub	r2,r3,r2
   18658:	113fd716 	blt	r2,r4,185b8 <__swbuf_r+0x68>
   1865c:	800b883a 	mov	r5,r16
   18660:	9809883a 	mov	r4,r19
   18664:	0012e700 	call	12e70 <_fflush_r>
   18668:	1000091e 	bne	r2,zero,18690 <__swbuf_r+0x140>
   1866c:	80c00017 	ldw	r3,0(r16)
   18670:	00800044 	movi	r2,1
   18674:	003fd106 	br	185bc <__swbuf_r+0x6c>
   18678:	00132a80 	call	132a8 <__sinit>
   1867c:	003fc006 	br	18580 <__swbuf_r+0x30>
   18680:	800b883a 	mov	r5,r16
   18684:	9809883a 	mov	r4,r19
   18688:	0012e700 	call	12e70 <_fflush_r>
   1868c:	103fd826 	beq	r2,zero,185f0 <__swbuf_r+0xa0>
   18690:	04bfffc4 	movi	r18,-1
   18694:	003fd606 	br	185f0 <__swbuf_r+0xa0>

00018698 <__swbuf>:
   18698:	00c000b4 	movhi	r3,2
   1869c:	2005883a 	mov	r2,r4
   186a0:	190eaa17 	ldw	r4,15016(r3)
   186a4:	280d883a 	mov	r6,r5
   186a8:	100b883a 	mov	r5,r2
   186ac:	00185501 	jmpi	18550 <__swbuf_r>

000186b0 <_wcrtomb_r>:
   186b0:	defffa04 	addi	sp,sp,-24
   186b4:	dc400415 	stw	r17,16(sp)
   186b8:	dc000315 	stw	r16,12(sp)
   186bc:	008000b4 	movhi	r2,2
   186c0:	dfc00515 	stw	ra,20(sp)
   186c4:	1089cb17 	ldw	r2,10028(r2)
   186c8:	2023883a 	mov	r17,r4
   186cc:	3821883a 	mov	r16,r7
   186d0:	28000826 	beq	r5,zero,186f4 <_wcrtomb_r+0x44>
   186d4:	103ee83a 	callr	r2
   186d8:	10ffffd8 	cmpnei	r3,r2,-1
   186dc:	18000a26 	beq	r3,zero,18708 <_wcrtomb_r+0x58>
   186e0:	dfc00517 	ldw	ra,20(sp)
   186e4:	dc400417 	ldw	r17,16(sp)
   186e8:	dc000317 	ldw	r16,12(sp)
   186ec:	dec00604 	addi	sp,sp,24
   186f0:	f800283a 	ret
   186f4:	000d883a 	mov	r6,zero
   186f8:	d9400084 	addi	r5,sp,2
   186fc:	103ee83a 	callr	r2
   18700:	10ffffd8 	cmpnei	r3,r2,-1
   18704:	183ff61e 	bne	r3,zero,186e0 <_wcrtomb_r+0x30>
   18708:	00802284 	movi	r2,138
   1870c:	80000015 	stw	zero,0(r16)
   18710:	88800015 	stw	r2,0(r17)
   18714:	00bfffc4 	movi	r2,-1
   18718:	003ff106 	br	186e0 <_wcrtomb_r+0x30>

0001871c <wcrtomb>:
   1871c:	defffa04 	addi	sp,sp,-24
   18720:	00c000b4 	movhi	r3,2
   18724:	dc400415 	stw	r17,16(sp)
   18728:	dc000315 	stw	r16,12(sp)
   1872c:	1c4eaa17 	ldw	r17,15016(r3)
   18730:	dfc00515 	stw	ra,20(sp)
   18734:	00c000b4 	movhi	r3,2
   18738:	18c9cb17 	ldw	r3,10028(r3)
   1873c:	3021883a 	mov	r16,r6
   18740:	20000c26 	beq	r4,zero,18774 <wcrtomb+0x58>
   18744:	280d883a 	mov	r6,r5
   18748:	800f883a 	mov	r7,r16
   1874c:	200b883a 	mov	r5,r4
   18750:	8809883a 	mov	r4,r17
   18754:	183ee83a 	callr	r3
   18758:	10ffffd8 	cmpnei	r3,r2,-1
   1875c:	18000c26 	beq	r3,zero,18790 <wcrtomb+0x74>
   18760:	dfc00517 	ldw	ra,20(sp)
   18764:	dc400417 	ldw	r17,16(sp)
   18768:	dc000317 	ldw	r16,12(sp)
   1876c:	dec00604 	addi	sp,sp,24
   18770:	f800283a 	ret
   18774:	300f883a 	mov	r7,r6
   18778:	d9400084 	addi	r5,sp,2
   1877c:	000d883a 	mov	r6,zero
   18780:	8809883a 	mov	r4,r17
   18784:	183ee83a 	callr	r3
   18788:	10ffffd8 	cmpnei	r3,r2,-1
   1878c:	183ff41e 	bne	r3,zero,18760 <wcrtomb+0x44>
   18790:	00802284 	movi	r2,138
   18794:	80000015 	stw	zero,0(r16)
   18798:	88800015 	stw	r2,0(r17)
   1879c:	00bfffc4 	movi	r2,-1
   187a0:	003fef06 	br	18760 <wcrtomb+0x44>

000187a4 <abort>:
   187a4:	deffff04 	addi	sp,sp,-4
   187a8:	01000184 	movi	r4,6
   187ac:	dfc00015 	stw	ra,0(sp)
   187b0:	0018a300 	call	18a30 <raise>
   187b4:	01000044 	movi	r4,1
   187b8:	0019bf00 	call	19bf0 <_exit>

000187bc <_init_signal_r>:
   187bc:	2080b717 	ldw	r2,732(r4)
   187c0:	10000226 	beq	r2,zero,187cc <_init_signal_r+0x10>
   187c4:	0005883a 	mov	r2,zero
   187c8:	f800283a 	ret
   187cc:	defffe04 	addi	sp,sp,-8
   187d0:	01402004 	movi	r5,128
   187d4:	dc000015 	stw	r16,0(sp)
   187d8:	dfc00115 	stw	ra,4(sp)
   187dc:	2021883a 	mov	r16,r4
   187e0:	000cc800 	call	cc80 <_malloc_r>
   187e4:	8080b715 	stw	r2,732(r16)
   187e8:	1009883a 	mov	r4,r2
   187ec:	10000826 	beq	r2,zero,18810 <_init_signal_r+0x54>
   187f0:	01802004 	movi	r6,128
   187f4:	000b883a 	mov	r5,zero
   187f8:	0014efc0 	call	14efc <memset>
   187fc:	0005883a 	mov	r2,zero
   18800:	dfc00117 	ldw	ra,4(sp)
   18804:	dc000017 	ldw	r16,0(sp)
   18808:	dec00204 	addi	sp,sp,8
   1880c:	f800283a 	ret
   18810:	00bfffc4 	movi	r2,-1
   18814:	003ffa06 	br	18800 <_init_signal_r+0x44>

00018818 <_signal_r>:
   18818:	defffc04 	addi	sp,sp,-16
   1881c:	dc400115 	stw	r17,4(sp)
   18820:	dfc00315 	stw	ra,12(sp)
   18824:	dc800215 	stw	r18,8(sp)
   18828:	dc000015 	stw	r16,0(sp)
   1882c:	28800830 	cmpltui	r2,r5,32
   18830:	2023883a 	mov	r17,r4
   18834:	10000e26 	beq	r2,zero,18870 <_signal_r+0x58>
   18838:	20c0b717 	ldw	r3,732(r4)
   1883c:	2821883a 	mov	r16,r5
   18840:	3025883a 	mov	r18,r6
   18844:	18000e26 	beq	r3,zero,18880 <_signal_r+0x68>
   18848:	802090ba 	slli	r16,r16,2
   1884c:	1c21883a 	add	r16,r3,r16
   18850:	80800017 	ldw	r2,0(r16)
   18854:	84800015 	stw	r18,0(r16)
   18858:	dfc00317 	ldw	ra,12(sp)
   1885c:	dc800217 	ldw	r18,8(sp)
   18860:	dc400117 	ldw	r17,4(sp)
   18864:	dc000017 	ldw	r16,0(sp)
   18868:	dec00404 	addi	sp,sp,16
   1886c:	f800283a 	ret
   18870:	00800584 	movi	r2,22
   18874:	20800015 	stw	r2,0(r4)
   18878:	00bfffc4 	movi	r2,-1
   1887c:	003ff606 	br	18858 <_signal_r+0x40>
   18880:	01402004 	movi	r5,128
   18884:	000cc800 	call	cc80 <_malloc_r>
   18888:	8880b715 	stw	r2,732(r17)
   1888c:	10000626 	beq	r2,zero,188a8 <_signal_r+0x90>
   18890:	01802004 	movi	r6,128
   18894:	000b883a 	mov	r5,zero
   18898:	1009883a 	mov	r4,r2
   1889c:	0014efc0 	call	14efc <memset>
   188a0:	1007883a 	mov	r3,r2
   188a4:	003fe806 	br	18848 <_signal_r+0x30>
   188a8:	00bfffc4 	movi	r2,-1
   188ac:	003fea06 	br	18858 <_signal_r+0x40>

000188b0 <_raise_r>:
   188b0:	28800830 	cmpltui	r2,r5,32
   188b4:	10002b26 	beq	r2,zero,18964 <_raise_r+0xb4>
   188b8:	2080b717 	ldw	r2,732(r4)
   188bc:	defffd04 	addi	sp,sp,-12
   188c0:	dc000115 	stw	r16,4(sp)
   188c4:	dfc00215 	stw	ra,8(sp)
   188c8:	2821883a 	mov	r16,r5
   188cc:	10001026 	beq	r2,zero,18910 <_raise_r+0x60>
   188d0:	280690ba 	slli	r3,r5,2
   188d4:	10c5883a 	add	r2,r2,r3
   188d8:	10c00017 	ldw	r3,0(r2)
   188dc:	18000c26 	beq	r3,zero,18910 <_raise_r+0x60>
   188e0:	19400060 	cmpeqi	r5,r3,1
   188e4:	28001a1e 	bne	r5,zero,18950 <_raise_r+0xa0>
   188e8:	197fffd8 	cmpnei	r5,r3,-1
   188ec:	28001126 	beq	r5,zero,18934 <_raise_r+0x84>
   188f0:	10000015 	stw	zero,0(r2)
   188f4:	8009883a 	mov	r4,r16
   188f8:	183ee83a 	callr	r3
   188fc:	0005883a 	mov	r2,zero
   18900:	dfc00217 	ldw	ra,8(sp)
   18904:	dc000117 	ldw	r16,4(sp)
   18908:	dec00304 	addi	sp,sp,12
   1890c:	f800283a 	ret
   18910:	d9000015 	stw	r4,0(sp)
   18914:	0018d080 	call	18d08 <_getpid_r>
   18918:	d9000017 	ldw	r4,0(sp)
   1891c:	800d883a 	mov	r6,r16
   18920:	100b883a 	mov	r5,r2
   18924:	dfc00217 	ldw	ra,8(sp)
   18928:	dc000117 	ldw	r16,4(sp)
   1892c:	dec00304 	addi	sp,sp,12
   18930:	0018ca81 	jmpi	18ca8 <_kill_r>
   18934:	00800584 	movi	r2,22
   18938:	20800015 	stw	r2,0(r4)
   1893c:	00800044 	movi	r2,1
   18940:	dfc00217 	ldw	ra,8(sp)
   18944:	dc000117 	ldw	r16,4(sp)
   18948:	dec00304 	addi	sp,sp,12
   1894c:	f800283a 	ret
   18950:	0005883a 	mov	r2,zero
   18954:	dfc00217 	ldw	ra,8(sp)
   18958:	dc000117 	ldw	r16,4(sp)
   1895c:	dec00304 	addi	sp,sp,12
   18960:	f800283a 	ret
   18964:	00800584 	movi	r2,22
   18968:	20800015 	stw	r2,0(r4)
   1896c:	00bfffc4 	movi	r2,-1
   18970:	f800283a 	ret

00018974 <__sigtramp_r>:
   18974:	28800830 	cmpltui	r2,r5,32
   18978:	10002b26 	beq	r2,zero,18a28 <__sigtramp_r+0xb4>
   1897c:	20c0b717 	ldw	r3,732(r4)
   18980:	defffd04 	addi	sp,sp,-12
   18984:	dc400115 	stw	r17,4(sp)
   18988:	dc000015 	stw	r16,0(sp)
   1898c:	dfc00215 	stw	ra,8(sp)
   18990:	2821883a 	mov	r16,r5
   18994:	2023883a 	mov	r17,r4
   18998:	18001326 	beq	r3,zero,189e8 <__sigtramp_r+0x74>
   1899c:	800490ba 	slli	r2,r16,2
   189a0:	1887883a 	add	r3,r3,r2
   189a4:	18800017 	ldw	r2,0(r3)
   189a8:	10000d26 	beq	r2,zero,189e0 <__sigtramp_r+0x6c>
   189ac:	113fffe0 	cmpeqi	r4,r2,-1
   189b0:	2000191e 	bne	r4,zero,18a18 <__sigtramp_r+0xa4>
   189b4:	11000060 	cmpeqi	r4,r2,1
   189b8:	2000151e 	bne	r4,zero,18a10 <__sigtramp_r+0x9c>
   189bc:	18000015 	stw	zero,0(r3)
   189c0:	8009883a 	mov	r4,r16
   189c4:	103ee83a 	callr	r2
   189c8:	0005883a 	mov	r2,zero
   189cc:	dfc00217 	ldw	ra,8(sp)
   189d0:	dc400117 	ldw	r17,4(sp)
   189d4:	dc000017 	ldw	r16,0(sp)
   189d8:	dec00304 	addi	sp,sp,12
   189dc:	f800283a 	ret
   189e0:	00800044 	movi	r2,1
   189e4:	003ff906 	br	189cc <__sigtramp_r+0x58>
   189e8:	01402004 	movi	r5,128
   189ec:	000cc800 	call	cc80 <_malloc_r>
   189f0:	8880b715 	stw	r2,732(r17)
   189f4:	10000a26 	beq	r2,zero,18a20 <__sigtramp_r+0xac>
   189f8:	01802004 	movi	r6,128
   189fc:	000b883a 	mov	r5,zero
   18a00:	1009883a 	mov	r4,r2
   18a04:	0014efc0 	call	14efc <memset>
   18a08:	1007883a 	mov	r3,r2
   18a0c:	003fe306 	br	1899c <__sigtramp_r+0x28>
   18a10:	008000c4 	movi	r2,3
   18a14:	003fed06 	br	189cc <__sigtramp_r+0x58>
   18a18:	00800084 	movi	r2,2
   18a1c:	003feb06 	br	189cc <__sigtramp_r+0x58>
   18a20:	00bfffc4 	movi	r2,-1
   18a24:	003fe906 	br	189cc <__sigtramp_r+0x58>
   18a28:	00bfffc4 	movi	r2,-1
   18a2c:	f800283a 	ret

00018a30 <raise>:
   18a30:	defffd04 	addi	sp,sp,-12
   18a34:	dc400115 	stw	r17,4(sp)
   18a38:	00c000b4 	movhi	r3,2
   18a3c:	dfc00215 	stw	ra,8(sp)
   18a40:	dc000015 	stw	r16,0(sp)
   18a44:	20800830 	cmpltui	r2,r4,32
   18a48:	1c4eaa17 	ldw	r17,15016(r3)
   18a4c:	10002326 	beq	r2,zero,18adc <raise+0xac>
   18a50:	8880b717 	ldw	r2,732(r17)
   18a54:	2021883a 	mov	r16,r4
   18a58:	10001026 	beq	r2,zero,18a9c <raise+0x6c>
   18a5c:	200690ba 	slli	r3,r4,2
   18a60:	10c5883a 	add	r2,r2,r3
   18a64:	10c00017 	ldw	r3,0(r2)
   18a68:	18000c26 	beq	r3,zero,18a9c <raise+0x6c>
   18a6c:	19400060 	cmpeqi	r5,r3,1
   18a70:	2800181e 	bne	r5,zero,18ad4 <raise+0xa4>
   18a74:	197fffd8 	cmpnei	r5,r3,-1
   18a78:	28001226 	beq	r5,zero,18ac4 <raise+0x94>
   18a7c:	10000015 	stw	zero,0(r2)
   18a80:	183ee83a 	callr	r3
   18a84:	0005883a 	mov	r2,zero
   18a88:	dfc00217 	ldw	ra,8(sp)
   18a8c:	dc400117 	ldw	r17,4(sp)
   18a90:	dc000017 	ldw	r16,0(sp)
   18a94:	dec00304 	addi	sp,sp,12
   18a98:	f800283a 	ret
   18a9c:	8809883a 	mov	r4,r17
   18aa0:	0018d080 	call	18d08 <_getpid_r>
   18aa4:	800d883a 	mov	r6,r16
   18aa8:	100b883a 	mov	r5,r2
   18aac:	8809883a 	mov	r4,r17
   18ab0:	dfc00217 	ldw	ra,8(sp)
   18ab4:	dc400117 	ldw	r17,4(sp)
   18ab8:	dc000017 	ldw	r16,0(sp)
   18abc:	dec00304 	addi	sp,sp,12
   18ac0:	0018ca81 	jmpi	18ca8 <_kill_r>
   18ac4:	00800584 	movi	r2,22
   18ac8:	88800015 	stw	r2,0(r17)
   18acc:	00800044 	movi	r2,1
   18ad0:	003fed06 	br	18a88 <raise+0x58>
   18ad4:	0005883a 	mov	r2,zero
   18ad8:	003feb06 	br	18a88 <raise+0x58>
   18adc:	00800584 	movi	r2,22
   18ae0:	88800015 	stw	r2,0(r17)
   18ae4:	00bfffc4 	movi	r2,-1
   18ae8:	003fe706 	br	18a88 <raise+0x58>

00018aec <signal>:
   18aec:	defffc04 	addi	sp,sp,-16
   18af0:	dc800215 	stw	r18,8(sp)
   18af4:	00c000b4 	movhi	r3,2
   18af8:	dfc00315 	stw	ra,12(sp)
   18afc:	dc400115 	stw	r17,4(sp)
   18b00:	dc000015 	stw	r16,0(sp)
   18b04:	20800830 	cmpltui	r2,r4,32
   18b08:	1c8eaa17 	ldw	r18,15016(r3)
   18b0c:	10000e26 	beq	r2,zero,18b48 <signal+0x5c>
   18b10:	2021883a 	mov	r16,r4
   18b14:	9100b717 	ldw	r4,732(r18)
   18b18:	2823883a 	mov	r17,r5
   18b1c:	20000e26 	beq	r4,zero,18b58 <signal+0x6c>
   18b20:	802090ba 	slli	r16,r16,2
   18b24:	2421883a 	add	r16,r4,r16
   18b28:	80800017 	ldw	r2,0(r16)
   18b2c:	84400015 	stw	r17,0(r16)
   18b30:	dfc00317 	ldw	ra,12(sp)
   18b34:	dc800217 	ldw	r18,8(sp)
   18b38:	dc400117 	ldw	r17,4(sp)
   18b3c:	dc000017 	ldw	r16,0(sp)
   18b40:	dec00404 	addi	sp,sp,16
   18b44:	f800283a 	ret
   18b48:	00800584 	movi	r2,22
   18b4c:	90800015 	stw	r2,0(r18)
   18b50:	00bfffc4 	movi	r2,-1
   18b54:	003ff606 	br	18b30 <signal+0x44>
   18b58:	9009883a 	mov	r4,r18
   18b5c:	01402004 	movi	r5,128
   18b60:	000cc800 	call	cc80 <_malloc_r>
   18b64:	9080b715 	stw	r2,732(r18)
   18b68:	1009883a 	mov	r4,r2
   18b6c:	10000526 	beq	r2,zero,18b84 <signal+0x98>
   18b70:	01802004 	movi	r6,128
   18b74:	000b883a 	mov	r5,zero
   18b78:	0014efc0 	call	14efc <memset>
   18b7c:	1009883a 	mov	r4,r2
   18b80:	003fe706 	br	18b20 <signal+0x34>
   18b84:	00bfffc4 	movi	r2,-1
   18b88:	003fe906 	br	18b30 <signal+0x44>

00018b8c <_init_signal>:
   18b8c:	defffe04 	addi	sp,sp,-8
   18b90:	008000b4 	movhi	r2,2
   18b94:	dc000015 	stw	r16,0(sp)
   18b98:	140eaa17 	ldw	r16,15016(r2)
   18b9c:	dfc00115 	stw	ra,4(sp)
   18ba0:	8080b717 	ldw	r2,732(r16)
   18ba4:	10000526 	beq	r2,zero,18bbc <_init_signal+0x30>
   18ba8:	0005883a 	mov	r2,zero
   18bac:	dfc00117 	ldw	ra,4(sp)
   18bb0:	dc000017 	ldw	r16,0(sp)
   18bb4:	dec00204 	addi	sp,sp,8
   18bb8:	f800283a 	ret
   18bbc:	8009883a 	mov	r4,r16
   18bc0:	01402004 	movi	r5,128
   18bc4:	000cc800 	call	cc80 <_malloc_r>
   18bc8:	8080b715 	stw	r2,732(r16)
   18bcc:	1009883a 	mov	r4,r2
   18bd0:	10000426 	beq	r2,zero,18be4 <_init_signal+0x58>
   18bd4:	01802004 	movi	r6,128
   18bd8:	000b883a 	mov	r5,zero
   18bdc:	0014efc0 	call	14efc <memset>
   18be0:	003ff106 	br	18ba8 <_init_signal+0x1c>
   18be4:	00bfffc4 	movi	r2,-1
   18be8:	003ff006 	br	18bac <_init_signal+0x20>

00018bec <__sigtramp>:
   18bec:	defffd04 	addi	sp,sp,-12
   18bf0:	dc400115 	stw	r17,4(sp)
   18bf4:	00c000b4 	movhi	r3,2
   18bf8:	dfc00215 	stw	ra,8(sp)
   18bfc:	dc000015 	stw	r16,0(sp)
   18c00:	20800830 	cmpltui	r2,r4,32
   18c04:	1c4eaa17 	ldw	r17,15016(r3)
   18c08:	10002526 	beq	r2,zero,18ca0 <__sigtramp+0xb4>
   18c0c:	88c0b717 	ldw	r3,732(r17)
   18c10:	2021883a 	mov	r16,r4
   18c14:	18001326 	beq	r3,zero,18c64 <__sigtramp+0x78>
   18c18:	800890ba 	slli	r4,r16,2
   18c1c:	1907883a 	add	r3,r3,r4
   18c20:	18800017 	ldw	r2,0(r3)
   18c24:	10000d26 	beq	r2,zero,18c5c <__sigtramp+0x70>
   18c28:	113fffe0 	cmpeqi	r4,r2,-1
   18c2c:	20001a1e 	bne	r4,zero,18c98 <__sigtramp+0xac>
   18c30:	11000060 	cmpeqi	r4,r2,1
   18c34:	2000161e 	bne	r4,zero,18c90 <__sigtramp+0xa4>
   18c38:	18000015 	stw	zero,0(r3)
   18c3c:	8009883a 	mov	r4,r16
   18c40:	103ee83a 	callr	r2
   18c44:	0005883a 	mov	r2,zero
   18c48:	dfc00217 	ldw	ra,8(sp)
   18c4c:	dc400117 	ldw	r17,4(sp)
   18c50:	dc000017 	ldw	r16,0(sp)
   18c54:	dec00304 	addi	sp,sp,12
   18c58:	f800283a 	ret
   18c5c:	00800044 	movi	r2,1
   18c60:	003ff906 	br	18c48 <__sigtramp+0x5c>
   18c64:	01402004 	movi	r5,128
   18c68:	8809883a 	mov	r4,r17
   18c6c:	000cc800 	call	cc80 <_malloc_r>
   18c70:	8880b715 	stw	r2,732(r17)
   18c74:	10000a26 	beq	r2,zero,18ca0 <__sigtramp+0xb4>
   18c78:	01802004 	movi	r6,128
   18c7c:	000b883a 	mov	r5,zero
   18c80:	1009883a 	mov	r4,r2
   18c84:	0014efc0 	call	14efc <memset>
   18c88:	1007883a 	mov	r3,r2
   18c8c:	003fe206 	br	18c18 <__sigtramp+0x2c>
   18c90:	008000c4 	movi	r2,3
   18c94:	003fec06 	br	18c48 <__sigtramp+0x5c>
   18c98:	00800084 	movi	r2,2
   18c9c:	003fea06 	br	18c48 <__sigtramp+0x5c>
   18ca0:	00bfffc4 	movi	r2,-1
   18ca4:	003fe806 	br	18c48 <__sigtramp+0x5c>

00018ca8 <_kill_r>:
   18ca8:	2807883a 	mov	r3,r5
   18cac:	defffe04 	addi	sp,sp,-8
   18cb0:	dc000015 	stw	r16,0(sp)
   18cb4:	008000b4 	movhi	r2,2
   18cb8:	300b883a 	mov	r5,r6
   18cbc:	2021883a 	mov	r16,r4
   18cc0:	1809883a 	mov	r4,r3
   18cc4:	dfc00115 	stw	ra,4(sp)
   18cc8:	1015ee15 	stw	zero,22456(r2)
   18ccc:	0019e500 	call	19e50 <kill>
   18cd0:	10ffffd8 	cmpnei	r3,r2,-1
   18cd4:	18000426 	beq	r3,zero,18ce8 <_kill_r+0x40>
   18cd8:	dfc00117 	ldw	ra,4(sp)
   18cdc:	dc000017 	ldw	r16,0(sp)
   18ce0:	dec00204 	addi	sp,sp,8
   18ce4:	f800283a 	ret
   18ce8:	00c000b4 	movhi	r3,2
   18cec:	18d5ee17 	ldw	r3,22456(r3)
   18cf0:	183ff926 	beq	r3,zero,18cd8 <_kill_r+0x30>
   18cf4:	80c00015 	stw	r3,0(r16)
   18cf8:	dfc00117 	ldw	ra,4(sp)
   18cfc:	dc000017 	ldw	r16,0(sp)
   18d00:	dec00204 	addi	sp,sp,8
   18d04:	f800283a 	ret

00018d08 <_getpid_r>:
   18d08:	0019d141 	jmpi	19d14 <getpid>

00018d0c <__fixunsdfsi>:
   18d0c:	defffd04 	addi	sp,sp,-12
   18d10:	000d883a 	mov	r6,zero
   18d14:	01d07834 	movhi	r7,16864
   18d18:	dc400115 	stw	r17,4(sp)
   18d1c:	dc000015 	stw	r16,0(sp)
   18d20:	dfc00215 	stw	ra,8(sp)
   18d24:	2023883a 	mov	r17,r4
   18d28:	2821883a 	mov	r16,r5
   18d2c:	000b6280 	call	b628 <__gedf2>
   18d30:	1000080e 	bge	r2,zero,18d54 <__fixunsdfsi+0x48>
   18d34:	8809883a 	mov	r4,r17
   18d38:	800b883a 	mov	r5,r16
   18d3c:	000c7cc0 	call	c7cc <__fixdfsi>
   18d40:	dfc00217 	ldw	ra,8(sp)
   18d44:	dc400117 	ldw	r17,4(sp)
   18d48:	dc000017 	ldw	r16,0(sp)
   18d4c:	dec00304 	addi	sp,sp,12
   18d50:	f800283a 	ret
   18d54:	000d883a 	mov	r6,zero
   18d58:	01d07834 	movhi	r7,16864
   18d5c:	8809883a 	mov	r4,r17
   18d60:	800b883a 	mov	r5,r16
   18d64:	000be6c0 	call	be6c <__subdf3>
   18d68:	180b883a 	mov	r5,r3
   18d6c:	1009883a 	mov	r4,r2
   18d70:	000c7cc0 	call	c7cc <__fixdfsi>
   18d74:	00e00034 	movhi	r3,32768
   18d78:	10c5883a 	add	r2,r2,r3
   18d7c:	003ff006 	br	18d40 <__fixunsdfsi+0x34>

00018d80 <__fixdfdi>:
   18d80:	defffd04 	addi	sp,sp,-12
   18d84:	000d883a 	mov	r6,zero
   18d88:	000f883a 	mov	r7,zero
   18d8c:	dc400115 	stw	r17,4(sp)
   18d90:	dc000015 	stw	r16,0(sp)
   18d94:	dfc00215 	stw	ra,8(sp)
   18d98:	2023883a 	mov	r17,r4
   18d9c:	2821883a 	mov	r16,r5
   18da0:	000b7100 	call	b710 <__ledf2>
   18da4:	10000716 	blt	r2,zero,18dc4 <__fixdfdi+0x44>
   18da8:	8809883a 	mov	r4,r17
   18dac:	800b883a 	mov	r5,r16
   18db0:	dfc00217 	ldw	ra,8(sp)
   18db4:	dc400117 	ldw	r17,4(sp)
   18db8:	dc000017 	ldw	r16,0(sp)
   18dbc:	dec00304 	addi	sp,sp,12
   18dc0:	0018df41 	jmpi	18df4 <__fixunsdfdi>
   18dc4:	8809883a 	mov	r4,r17
   18dc8:	8160003c 	xorhi	r5,r16,32768
   18dcc:	0018df40 	call	18df4 <__fixunsdfdi>
   18dd0:	1008c03a 	cmpne	r4,r2,zero
   18dd4:	00c7c83a 	sub	r3,zero,r3
   18dd8:	0085c83a 	sub	r2,zero,r2
   18ddc:	1907c83a 	sub	r3,r3,r4
   18de0:	dfc00217 	ldw	ra,8(sp)
   18de4:	dc400117 	ldw	r17,4(sp)
   18de8:	dc000017 	ldw	r16,0(sp)
   18dec:	dec00304 	addi	sp,sp,12
   18df0:	f800283a 	ret

00018df4 <__fixunsdfdi>:
   18df4:	defffc04 	addi	sp,sp,-16
   18df8:	000d883a 	mov	r6,zero
   18dfc:	01cf7c34 	movhi	r7,15856
   18e00:	dfc00315 	stw	ra,12(sp)
   18e04:	dc800215 	stw	r18,8(sp)
   18e08:	dc400115 	stw	r17,4(sp)
   18e0c:	dc000015 	stw	r16,0(sp)
   18e10:	2025883a 	mov	r18,r4
   18e14:	2823883a 	mov	r17,r5
   18e18:	000b7f80 	call	b7f8 <__muldf3>
   18e1c:	180b883a 	mov	r5,r3
   18e20:	1009883a 	mov	r4,r2
   18e24:	0018d0c0 	call	18d0c <__fixunsdfsi>
   18e28:	1009883a 	mov	r4,r2
   18e2c:	1021883a 	mov	r16,r2
   18e30:	000c9040 	call	c904 <__floatunsidf>
   18e34:	000d883a 	mov	r6,zero
   18e38:	01d07c34 	movhi	r7,16880
   18e3c:	1009883a 	mov	r4,r2
   18e40:	180b883a 	mov	r5,r3
   18e44:	000b7f80 	call	b7f8 <__muldf3>
   18e48:	100d883a 	mov	r6,r2
   18e4c:	180f883a 	mov	r7,r3
   18e50:	9009883a 	mov	r4,r18
   18e54:	880b883a 	mov	r5,r17
   18e58:	000be6c0 	call	be6c <__subdf3>
   18e5c:	180b883a 	mov	r5,r3
   18e60:	1009883a 	mov	r4,r2
   18e64:	0018d0c0 	call	18d0c <__fixunsdfsi>
   18e68:	8007883a 	mov	r3,r16
   18e6c:	dfc00317 	ldw	ra,12(sp)
   18e70:	dc800217 	ldw	r18,8(sp)
   18e74:	dc400117 	ldw	r17,4(sp)
   18e78:	dc000017 	ldw	r16,0(sp)
   18e7c:	dec00404 	addi	sp,sp,16
   18e80:	f800283a 	ret

00018e84 <__floatdidf>:
   18e84:	defffc04 	addi	sp,sp,-16
   18e88:	dc800215 	stw	r18,8(sp)
   18e8c:	2025883a 	mov	r18,r4
   18e90:	2809883a 	mov	r4,r5
   18e94:	dfc00315 	stw	ra,12(sp)
   18e98:	dc400115 	stw	r17,4(sp)
   18e9c:	dc000015 	stw	r16,0(sp)
   18ea0:	000c84c0 	call	c84c <__floatsidf>
   18ea4:	000d883a 	mov	r6,zero
   18ea8:	01d07c34 	movhi	r7,16880
   18eac:	180b883a 	mov	r5,r3
   18eb0:	1009883a 	mov	r4,r2
   18eb4:	000b7f80 	call	b7f8 <__muldf3>
   18eb8:	9009883a 	mov	r4,r18
   18ebc:	1023883a 	mov	r17,r2
   18ec0:	1821883a 	mov	r16,r3
   18ec4:	000c9040 	call	c904 <__floatunsidf>
   18ec8:	880d883a 	mov	r6,r17
   18ecc:	800f883a 	mov	r7,r16
   18ed0:	1009883a 	mov	r4,r2
   18ed4:	180b883a 	mov	r5,r3
   18ed8:	000a4680 	call	a468 <__adddf3>
   18edc:	dfc00317 	ldw	ra,12(sp)
   18ee0:	dc800217 	ldw	r18,8(sp)
   18ee4:	dc400117 	ldw	r17,4(sp)
   18ee8:	dc000017 	ldw	r16,0(sp)
   18eec:	dec00404 	addi	sp,sp,16
   18ef0:	f800283a 	ret

00018ef4 <__udivdi3>:
   18ef4:	defff504 	addi	sp,sp,-44
   18ef8:	dcc00415 	stw	r19,16(sp)
   18efc:	dc000115 	stw	r16,4(sp)
   18f00:	dfc00a15 	stw	ra,40(sp)
   18f04:	df000915 	stw	fp,36(sp)
   18f08:	ddc00815 	stw	r23,32(sp)
   18f0c:	dd800715 	stw	r22,28(sp)
   18f10:	dd400615 	stw	r21,24(sp)
   18f14:	dd000515 	stw	r20,20(sp)
   18f18:	dc800315 	stw	r18,12(sp)
   18f1c:	dc400215 	stw	r17,8(sp)
   18f20:	2027883a 	mov	r19,r4
   18f24:	2821883a 	mov	r16,r5
   18f28:	3800411e 	bne	r7,zero,19030 <__udivdi3+0x13c>
   18f2c:	3829883a 	mov	r20,r7
   18f30:	3023883a 	mov	r17,r6
   18f34:	2025883a 	mov	r18,r4
   18f38:	29805d2e 	bgeu	r5,r6,190b0 <__udivdi3+0x1bc>
   18f3c:	00bfffd4 	movui	r2,65535
   18f40:	282b883a 	mov	r21,r5
   18f44:	1180a02e 	bgeu	r2,r6,191c8 <__udivdi3+0x2d4>
   18f48:	00804034 	movhi	r2,256
   18f4c:	30813636 	bltu	r6,r2,19428 <__udivdi3+0x534>
   18f50:	3006d63a 	srli	r3,r6,24
   18f54:	05000604 	movi	r20,24
   18f58:	008000b4 	movhi	r2,2
   18f5c:	1885883a 	add	r2,r3,r2
   18f60:	10856e03 	ldbu	r2,5560(r2)
   18f64:	00c00804 	movi	r3,32
   18f68:	1505883a 	add	r2,r2,r20
   18f6c:	1889c83a 	sub	r4,r3,r2
   18f70:	18800526 	beq	r3,r2,18f88 <__udivdi3+0x94>
   18f74:	8120983a 	sll	r16,r16,r4
   18f78:	9884d83a 	srl	r2,r19,r2
   18f7c:	3122983a 	sll	r17,r6,r4
   18f80:	9924983a 	sll	r18,r19,r4
   18f84:	142ab03a 	or	r21,r2,r16
   18f88:	882cd43a 	srli	r22,r17,16
   18f8c:	a809883a 	mov	r4,r21
   18f90:	8d3fffcc 	andi	r20,r17,65535
   18f94:	b00b883a 	mov	r5,r22
   18f98:	00093a00 	call	93a0 <__umodsi3>
   18f9c:	a809883a 	mov	r4,r21
   18fa0:	b00b883a 	mov	r5,r22
   18fa4:	1027883a 	mov	r19,r2
   18fa8:	000933c0 	call	933c <__udivsi3>
   18fac:	9826943a 	slli	r19,r19,16
   18fb0:	9008d43a 	srli	r4,r18,16
   18fb4:	1021883a 	mov	r16,r2
   18fb8:	a085383a 	mul	r2,r20,r2
   18fbc:	9908b03a 	or	r4,r19,r4
   18fc0:	2080052e 	bgeu	r4,r2,18fd8 <__udivdi3+0xe4>
   18fc4:	2449883a 	add	r4,r4,r17
   18fc8:	80ffffc4 	addi	r3,r16,-1
   18fcc:	24400136 	bltu	r4,r17,18fd4 <__udivdi3+0xe0>
   18fd0:	20812636 	bltu	r4,r2,1946c <__udivdi3+0x578>
   18fd4:	1821883a 	mov	r16,r3
   18fd8:	20a7c83a 	sub	r19,r4,r2
   18fdc:	9809883a 	mov	r4,r19
   18fe0:	b00b883a 	mov	r5,r22
   18fe4:	00093a00 	call	93a0 <__umodsi3>
   18fe8:	9809883a 	mov	r4,r19
   18fec:	b00b883a 	mov	r5,r22
   18ff0:	1027883a 	mov	r19,r2
   18ff4:	9826943a 	slli	r19,r19,16
   18ff8:	000933c0 	call	933c <__udivsi3>
   18ffc:	a0a9383a 	mul	r20,r20,r2
   19000:	94bfffcc 	andi	r18,r18,65535
   19004:	9ca4b03a 	or	r18,r19,r18
   19008:	9500052e 	bgeu	r18,r20,19020 <__udivdi3+0x12c>
   1900c:	8ca5883a 	add	r18,r17,r18
   19010:	10ffffc4 	addi	r3,r2,-1
   19014:	94400136 	bltu	r18,r17,1901c <__udivdi3+0x128>
   19018:	95011236 	bltu	r18,r20,19464 <__udivdi3+0x570>
   1901c:	1805883a 	mov	r2,r3
   19020:	8020943a 	slli	r16,r16,16
   19024:	0007883a 	mov	r3,zero
   19028:	8084b03a 	or	r2,r16,r2
   1902c:	00000306 	br	1903c <__udivdi3+0x148>
   19030:	29c00e2e 	bgeu	r5,r7,1906c <__udivdi3+0x178>
   19034:	0007883a 	mov	r3,zero
   19038:	0005883a 	mov	r2,zero
   1903c:	dfc00a17 	ldw	ra,40(sp)
   19040:	df000917 	ldw	fp,36(sp)
   19044:	ddc00817 	ldw	r23,32(sp)
   19048:	dd800717 	ldw	r22,28(sp)
   1904c:	dd400617 	ldw	r21,24(sp)
   19050:	dd000517 	ldw	r20,20(sp)
   19054:	dcc00417 	ldw	r19,16(sp)
   19058:	dc800317 	ldw	r18,12(sp)
   1905c:	dc400217 	ldw	r17,8(sp)
   19060:	dc000117 	ldw	r16,4(sp)
   19064:	dec00b04 	addi	sp,sp,44
   19068:	f800283a 	ret
   1906c:	00bfffd4 	movui	r2,65535
   19070:	11c05a2e 	bgeu	r2,r7,191dc <__udivdi3+0x2e8>
   19074:	00804034 	movhi	r2,256
   19078:	3880dd36 	bltu	r7,r2,193f0 <__udivdi3+0x4fc>
   1907c:	3804d63a 	srli	r2,r7,24
   19080:	01000604 	movi	r4,24
   19084:	00c000b4 	movhi	r3,2
   19088:	10c7883a 	add	r3,r2,r3
   1908c:	18856e03 	ldbu	r2,5560(r3)
   19090:	00c00804 	movi	r3,32
   19094:	1105883a 	add	r2,r2,r4
   19098:	18abc83a 	sub	r21,r3,r2
   1909c:	1880861e 	bne	r3,r2,192b8 <__udivdi3+0x3c4>
   190a0:	3c00d836 	bltu	r7,r16,19404 <__udivdi3+0x510>
   190a4:	9985403a 	cmpgeu	r2,r19,r6
   190a8:	0007883a 	mov	r3,zero
   190ac:	003fe306 	br	1903c <__udivdi3+0x148>
   190b0:	3000041e 	bne	r6,zero,190c4 <__udivdi3+0x1d0>
   190b4:	000b883a 	mov	r5,zero
   190b8:	01000044 	movi	r4,1
   190bc:	000933c0 	call	933c <__udivsi3>
   190c0:	1023883a 	mov	r17,r2
   190c4:	00bfffd4 	movui	r2,65535
   190c8:	14403a2e 	bgeu	r2,r17,191b4 <__udivdi3+0x2c0>
   190cc:	00804034 	movhi	r2,256
   190d0:	8880d236 	bltu	r17,r2,1941c <__udivdi3+0x528>
   190d4:	8806d63a 	srli	r3,r17,24
   190d8:	05000604 	movi	r20,24
   190dc:	008000b4 	movhi	r2,2
   190e0:	1885883a 	add	r2,r3,r2
   190e4:	10856e03 	ldbu	r2,5560(r2)
   190e8:	00c00804 	movi	r3,32
   190ec:	1505883a 	add	r2,r2,r20
   190f0:	188dc83a 	sub	r6,r3,r2
   190f4:	18803e1e 	bne	r3,r2,191f0 <__udivdi3+0x2fc>
   190f8:	882ad43a 	srli	r21,r17,16
   190fc:	8461c83a 	sub	r16,r16,r17
   19100:	8cffffcc 	andi	r19,r17,65535
   19104:	00c00044 	movi	r3,1
   19108:	8009883a 	mov	r4,r16
   1910c:	a80b883a 	mov	r5,r21
   19110:	d8c00015 	stw	r3,0(sp)
   19114:	00093a00 	call	93a0 <__umodsi3>
   19118:	8009883a 	mov	r4,r16
   1911c:	a80b883a 	mov	r5,r21
   19120:	1021883a 	mov	r16,r2
   19124:	000933c0 	call	933c <__udivsi3>
   19128:	8020943a 	slli	r16,r16,16
   1912c:	9008d43a 	srli	r4,r18,16
   19130:	1029883a 	mov	r20,r2
   19134:	14c5383a 	mul	r2,r2,r19
   19138:	8108b03a 	or	r4,r16,r4
   1913c:	d8c00017 	ldw	r3,0(sp)
   19140:	2080052e 	bgeu	r4,r2,19158 <__udivdi3+0x264>
   19144:	2449883a 	add	r4,r4,r17
   19148:	a17fffc4 	addi	r5,r20,-1
   1914c:	24400136 	bltu	r4,r17,19154 <__udivdi3+0x260>
   19150:	2080c936 	bltu	r4,r2,19478 <__udivdi3+0x584>
   19154:	2829883a 	mov	r20,r5
   19158:	20a1c83a 	sub	r16,r4,r2
   1915c:	8009883a 	mov	r4,r16
   19160:	a80b883a 	mov	r5,r21
   19164:	d8c00015 	stw	r3,0(sp)
   19168:	00093a00 	call	93a0 <__umodsi3>
   1916c:	8009883a 	mov	r4,r16
   19170:	a80b883a 	mov	r5,r21
   19174:	1021883a 	mov	r16,r2
   19178:	8020943a 	slli	r16,r16,16
   1917c:	000933c0 	call	933c <__udivsi3>
   19180:	14e7383a 	mul	r19,r2,r19
   19184:	94bfffcc 	andi	r18,r18,65535
   19188:	84a4b03a 	or	r18,r16,r18
   1918c:	d8c00017 	ldw	r3,0(sp)
   19190:	94c0052e 	bgeu	r18,r19,191a8 <__udivdi3+0x2b4>
   19194:	8ca5883a 	add	r18,r17,r18
   19198:	113fffc4 	addi	r4,r2,-1
   1919c:	94400136 	bltu	r18,r17,191a4 <__udivdi3+0x2b0>
   191a0:	94c0ae36 	bltu	r18,r19,1945c <__udivdi3+0x568>
   191a4:	2005883a 	mov	r2,r4
   191a8:	a00c943a 	slli	r6,r20,16
   191ac:	3084b03a 	or	r2,r6,r2
   191b0:	003fa206 	br	1903c <__udivdi3+0x148>
   191b4:	88804030 	cmpltui	r2,r17,256
   191b8:	10009e1e 	bne	r2,zero,19434 <__udivdi3+0x540>
   191bc:	8806d23a 	srli	r3,r17,8
   191c0:	05000204 	movi	r20,8
   191c4:	003fc506 	br	190dc <__udivdi3+0x1e8>
   191c8:	30804030 	cmpltui	r2,r6,256
   191cc:	10008b1e 	bne	r2,zero,193fc <__udivdi3+0x508>
   191d0:	3006d23a 	srli	r3,r6,8
   191d4:	05000204 	movi	r20,8
   191d8:	003f5f06 	br	18f58 <__udivdi3+0x64>
   191dc:	38804030 	cmpltui	r2,r7,256
   191e0:	10008b1e 	bne	r2,zero,19410 <__udivdi3+0x51c>
   191e4:	3804d23a 	srli	r2,r7,8
   191e8:	01000204 	movi	r4,8
   191ec:	003fa506 	br	19084 <__udivdi3+0x190>
   191f0:	89a2983a 	sll	r17,r17,r6
   191f4:	80acd83a 	srl	r22,r16,r2
   191f8:	81a0983a 	sll	r16,r16,r6
   191fc:	882ad43a 	srli	r21,r17,16
   19200:	9884d83a 	srl	r2,r19,r2
   19204:	b009883a 	mov	r4,r22
   19208:	a80b883a 	mov	r5,r21
   1920c:	99a4983a 	sll	r18,r19,r6
   19210:	1428b03a 	or	r20,r2,r16
   19214:	00093a00 	call	93a0 <__umodsi3>
   19218:	b009883a 	mov	r4,r22
   1921c:	a80b883a 	mov	r5,r21
   19220:	1021883a 	mov	r16,r2
   19224:	000933c0 	call	933c <__udivsi3>
   19228:	8008943a 	slli	r4,r16,16
   1922c:	a00ad43a 	srli	r5,r20,16
   19230:	8cffffcc 	andi	r19,r17,65535
   19234:	98a1383a 	mul	r16,r19,r2
   19238:	2148b03a 	or	r4,r4,r5
   1923c:	102d883a 	mov	r22,r2
   19240:	2400062e 	bgeu	r4,r16,1925c <__udivdi3+0x368>
   19244:	2449883a 	add	r4,r4,r17
   19248:	10bfffc4 	addi	r2,r2,-1
   1924c:	24408136 	bltu	r4,r17,19454 <__udivdi3+0x560>
   19250:	2400802e 	bgeu	r4,r16,19454 <__udivdi3+0x560>
   19254:	b5bfff84 	addi	r22,r22,-2
   19258:	2449883a 	add	r4,r4,r17
   1925c:	2421c83a 	sub	r16,r4,r16
   19260:	8009883a 	mov	r4,r16
   19264:	a80b883a 	mov	r5,r21
   19268:	00093a00 	call	93a0 <__umodsi3>
   1926c:	8009883a 	mov	r4,r16
   19270:	a80b883a 	mov	r5,r21
   19274:	1021883a 	mov	r16,r2
   19278:	8020943a 	slli	r16,r16,16
   1927c:	000933c0 	call	933c <__udivsi3>
   19280:	9889383a 	mul	r4,r19,r2
   19284:	a53fffcc 	andi	r20,r20,65535
   19288:	8520b03a 	or	r16,r16,r20
   1928c:	8100062e 	bgeu	r16,r4,192a8 <__udivdi3+0x3b4>
   19290:	8461883a 	add	r16,r16,r17
   19294:	10ffffc4 	addi	r3,r2,-1
   19298:	84406a36 	bltu	r16,r17,19444 <__udivdi3+0x550>
   1929c:	8100692e 	bgeu	r16,r4,19444 <__udivdi3+0x550>
   192a0:	10bfff84 	addi	r2,r2,-2
   192a4:	8461883a 	add	r16,r16,r17
   192a8:	b006943a 	slli	r3,r22,16
   192ac:	8121c83a 	sub	r16,r16,r4
   192b0:	1886b03a 	or	r3,r3,r2
   192b4:	003f9406 	br	19108 <__udivdi3+0x214>
   192b8:	30acd83a 	srl	r22,r6,r2
   192bc:	3d4e983a 	sll	r7,r7,r21
   192c0:	80a4d83a 	srl	r18,r16,r2
   192c4:	8546983a 	sll	r3,r16,r21
   192c8:	b1ecb03a 	or	r22,r22,r7
   192cc:	b038d43a 	srli	fp,r22,16
   192d0:	9884d83a 	srl	r2,r19,r2
   192d4:	9009883a 	mov	r4,r18
   192d8:	e00b883a 	mov	r5,fp
   192dc:	10e2b03a 	or	r17,r2,r3
   192e0:	3568983a 	sll	r20,r6,r21
   192e4:	00093a00 	call	93a0 <__umodsi3>
   192e8:	9009883a 	mov	r4,r18
   192ec:	e00b883a 	mov	r5,fp
   192f0:	1025883a 	mov	r18,r2
   192f4:	000933c0 	call	933c <__udivsi3>
   192f8:	9008943a 	slli	r4,r18,16
   192fc:	8806d43a 	srli	r3,r17,16
   19300:	b5ffffcc 	andi	r23,r22,65535
   19304:	b8a5383a 	mul	r18,r23,r2
   19308:	20c8b03a 	or	r4,r4,r3
   1930c:	1021883a 	mov	r16,r2
   19310:	2480062e 	bgeu	r4,r18,1932c <__udivdi3+0x438>
   19314:	2589883a 	add	r4,r4,r22
   19318:	10bfffc4 	addi	r2,r2,-1
   1931c:	25804b36 	bltu	r4,r22,1944c <__udivdi3+0x558>
   19320:	24804a2e 	bgeu	r4,r18,1944c <__udivdi3+0x558>
   19324:	843fff84 	addi	r16,r16,-2
   19328:	2589883a 	add	r4,r4,r22
   1932c:	24a5c83a 	sub	r18,r4,r18
   19330:	9009883a 	mov	r4,r18
   19334:	e00b883a 	mov	r5,fp
   19338:	00093a00 	call	93a0 <__umodsi3>
   1933c:	9009883a 	mov	r4,r18
   19340:	e00b883a 	mov	r5,fp
   19344:	1025883a 	mov	r18,r2
   19348:	9024943a 	slli	r18,r18,16
   1934c:	000933c0 	call	933c <__udivsi3>
   19350:	b8af383a 	mul	r23,r23,r2
   19354:	8c7fffcc 	andi	r17,r17,65535
   19358:	9462b03a 	or	r17,r18,r17
   1935c:	8dc0062e 	bgeu	r17,r23,19378 <__udivdi3+0x484>
   19360:	8da3883a 	add	r17,r17,r22
   19364:	10ffffc4 	addi	r3,r2,-1
   19368:	8d803436 	bltu	r17,r22,1943c <__udivdi3+0x548>
   1936c:	8dc0332e 	bgeu	r17,r23,1943c <__udivdi3+0x548>
   19370:	10bfff84 	addi	r2,r2,-2
   19374:	8da3883a 	add	r17,r17,r22
   19378:	8020943a 	slli	r16,r16,16
   1937c:	10ffffcc 	andi	r3,r2,65535
   19380:	a00ed43a 	srli	r7,r20,16
   19384:	8084b03a 	or	r2,r16,r2
   19388:	1008d43a 	srli	r4,r2,16
   1938c:	a1bfffcc 	andi	r6,r20,65535
   19390:	1991383a 	mul	r8,r3,r6
   19394:	218d383a 	mul	r6,r4,r6
   19398:	19c7383a 	mul	r3,r3,r7
   1939c:	400ad43a 	srli	r5,r8,16
   193a0:	21c9383a 	mul	r4,r4,r7
   193a4:	1987883a 	add	r3,r3,r6
   193a8:	28c7883a 	add	r3,r5,r3
   193ac:	8de3c83a 	sub	r17,r17,r23
   193b0:	1980022e 	bgeu	r3,r6,193bc <__udivdi3+0x4c8>
   193b4:	01400074 	movhi	r5,1
   193b8:	2149883a 	add	r4,r4,r5
   193bc:	180ad43a 	srli	r5,r3,16
   193c0:	2909883a 	add	r4,r5,r4
   193c4:	89000836 	bltu	r17,r4,193e8 <__udivdi3+0x4f4>
   193c8:	89000226 	beq	r17,r4,193d4 <__udivdi3+0x4e0>
   193cc:	0007883a 	mov	r3,zero
   193d0:	003f1a06 	br	1903c <__udivdi3+0x148>
   193d4:	1806943a 	slli	r3,r3,16
   193d8:	9d4c983a 	sll	r6,r19,r21
   193dc:	423fffcc 	andi	r8,r8,65535
   193e0:	1a07883a 	add	r3,r3,r8
   193e4:	30fff92e 	bgeu	r6,r3,193cc <__udivdi3+0x4d8>
   193e8:	10bfffc4 	addi	r2,r2,-1
   193ec:	003ff706 	br	193cc <__udivdi3+0x4d8>
   193f0:	3804d43a 	srli	r2,r7,16
   193f4:	01000404 	movi	r4,16
   193f8:	003f2206 	br	19084 <__udivdi3+0x190>
   193fc:	3007883a 	mov	r3,r6
   19400:	003ed506 	br	18f58 <__udivdi3+0x64>
   19404:	0007883a 	mov	r3,zero
   19408:	00800044 	movi	r2,1
   1940c:	003f0b06 	br	1903c <__udivdi3+0x148>
   19410:	3805883a 	mov	r2,r7
   19414:	0009883a 	mov	r4,zero
   19418:	003f1a06 	br	19084 <__udivdi3+0x190>
   1941c:	8806d43a 	srli	r3,r17,16
   19420:	05000404 	movi	r20,16
   19424:	003f2d06 	br	190dc <__udivdi3+0x1e8>
   19428:	3006d43a 	srli	r3,r6,16
   1942c:	05000404 	movi	r20,16
   19430:	003ec906 	br	18f58 <__udivdi3+0x64>
   19434:	8807883a 	mov	r3,r17
   19438:	003f2806 	br	190dc <__udivdi3+0x1e8>
   1943c:	1805883a 	mov	r2,r3
   19440:	003fcd06 	br	19378 <__udivdi3+0x484>
   19444:	1805883a 	mov	r2,r3
   19448:	003f9706 	br	192a8 <__udivdi3+0x3b4>
   1944c:	1021883a 	mov	r16,r2
   19450:	003fb606 	br	1932c <__udivdi3+0x438>
   19454:	102d883a 	mov	r22,r2
   19458:	003f8006 	br	1925c <__udivdi3+0x368>
   1945c:	10bfff84 	addi	r2,r2,-2
   19460:	003f5106 	br	191a8 <__udivdi3+0x2b4>
   19464:	10bfff84 	addi	r2,r2,-2
   19468:	003eed06 	br	19020 <__udivdi3+0x12c>
   1946c:	843fff84 	addi	r16,r16,-2
   19470:	2449883a 	add	r4,r4,r17
   19474:	003ed806 	br	18fd8 <__udivdi3+0xe4>
   19478:	a53fff84 	addi	r20,r20,-2
   1947c:	2449883a 	add	r4,r4,r17
   19480:	003f3506 	br	19158 <__udivdi3+0x264>

00019484 <__umoddi3>:
   19484:	defff504 	addi	sp,sp,-44
   19488:	dc400215 	stw	r17,8(sp)
   1948c:	dc000115 	stw	r16,4(sp)
   19490:	dfc00a15 	stw	ra,40(sp)
   19494:	df000915 	stw	fp,36(sp)
   19498:	ddc00815 	stw	r23,32(sp)
   1949c:	dd800715 	stw	r22,28(sp)
   194a0:	dd400615 	stw	r21,24(sp)
   194a4:	dd000515 	stw	r20,20(sp)
   194a8:	dcc00415 	stw	r19,16(sp)
   194ac:	dc800315 	stw	r18,12(sp)
   194b0:	2823883a 	mov	r17,r5
   194b4:	2021883a 	mov	r16,r4
   194b8:	3800371e 	bne	r7,zero,19598 <__umoddi3+0x114>
   194bc:	3825883a 	mov	r18,r7
   194c0:	3029883a 	mov	r20,r6
   194c4:	2027883a 	mov	r19,r4
   194c8:	2980572e 	bgeu	r5,r6,19628 <__umoddi3+0x1a4>
   194cc:	00bfffd4 	movui	r2,65535
   194d0:	282b883a 	mov	r21,r5
   194d4:	1180922e 	bgeu	r2,r6,19720 <__umoddi3+0x29c>
   194d8:	00804034 	movhi	r2,256
   194dc:	30812036 	bltu	r6,r2,19960 <__umoddi3+0x4dc>
   194e0:	3006d63a 	srli	r3,r6,24
   194e4:	04800604 	movi	r18,24
   194e8:	008000b4 	movhi	r2,2
   194ec:	1885883a 	add	r2,r3,r2
   194f0:	10856e03 	ldbu	r2,5560(r2)
   194f4:	00c00804 	movi	r3,32
   194f8:	1485883a 	add	r2,r2,r18
   194fc:	18a5c83a 	sub	r18,r3,r2
   19500:	18800526 	beq	r3,r2,19518 <__umoddi3+0x94>
   19504:	8ca2983a 	sll	r17,r17,r18
   19508:	8084d83a 	srl	r2,r16,r2
   1950c:	34a8983a 	sll	r20,r6,r18
   19510:	84a6983a 	sll	r19,r16,r18
   19514:	146ab03a 	or	r21,r2,r17
   19518:	a02cd43a 	srli	r22,r20,16
   1951c:	a809883a 	mov	r4,r21
   19520:	a43fffcc 	andi	r16,r20,65535
   19524:	b00b883a 	mov	r5,r22
   19528:	00093a00 	call	93a0 <__umodsi3>
   1952c:	a809883a 	mov	r4,r21
   19530:	b00b883a 	mov	r5,r22
   19534:	1023883a 	mov	r17,r2
   19538:	000933c0 	call	933c <__udivsi3>
   1953c:	8822943a 	slli	r17,r17,16
   19540:	9808d43a 	srli	r4,r19,16
   19544:	80ab383a 	mul	r21,r16,r2
   19548:	8908b03a 	or	r4,r17,r4
   1954c:	2540042e 	bgeu	r4,r21,19560 <__umoddi3+0xdc>
   19550:	2509883a 	add	r4,r4,r20
   19554:	25000236 	bltu	r4,r20,19560 <__umoddi3+0xdc>
   19558:	2540012e 	bgeu	r4,r21,19560 <__umoddi3+0xdc>
   1955c:	2509883a 	add	r4,r4,r20
   19560:	256bc83a 	sub	r21,r4,r21
   19564:	b00b883a 	mov	r5,r22
   19568:	a809883a 	mov	r4,r21
   1956c:	00093a00 	call	93a0 <__umodsi3>
   19570:	1023883a 	mov	r17,r2
   19574:	b00b883a 	mov	r5,r22
   19578:	a809883a 	mov	r4,r21
   1957c:	000933c0 	call	933c <__udivsi3>
   19580:	8822943a 	slli	r17,r17,16
   19584:	8085383a 	mul	r2,r16,r2
   19588:	98ffffcc 	andi	r3,r19,65535
   1958c:	88c6b03a 	or	r3,r17,r3
   19590:	18805a2e 	bgeu	r3,r2,196fc <__umoddi3+0x278>
   19594:	00005506 	br	196ec <__umoddi3+0x268>
   19598:	2005883a 	mov	r2,r4
   1959c:	29c00d2e 	bgeu	r5,r7,195d4 <__umoddi3+0x150>
   195a0:	2807883a 	mov	r3,r5
   195a4:	dfc00a17 	ldw	ra,40(sp)
   195a8:	df000917 	ldw	fp,36(sp)
   195ac:	ddc00817 	ldw	r23,32(sp)
   195b0:	dd800717 	ldw	r22,28(sp)
   195b4:	dd400617 	ldw	r21,24(sp)
   195b8:	dd000517 	ldw	r20,20(sp)
   195bc:	dcc00417 	ldw	r19,16(sp)
   195c0:	dc800317 	ldw	r18,12(sp)
   195c4:	dc400217 	ldw	r17,8(sp)
   195c8:	dc000117 	ldw	r16,4(sp)
   195cc:	dec00b04 	addi	sp,sp,44
   195d0:	f800283a 	ret
   195d4:	013fffd4 	movui	r4,65535
   195d8:	2807883a 	mov	r3,r5
   195dc:	21c0552e 	bgeu	r4,r7,19734 <__umoddi3+0x2b0>
   195e0:	01004034 	movhi	r4,256
   195e4:	3900e336 	bltu	r7,r4,19974 <__umoddi3+0x4f0>
   195e8:	3808d63a 	srli	r4,r7,24
   195ec:	02000604 	movi	r8,24
   195f0:	014000b4 	movhi	r5,2
   195f4:	214b883a 	add	r5,r4,r5
   195f8:	2d456e03 	ldbu	r21,5560(r5)
   195fc:	01000804 	movi	r4,32
   19600:	aa2b883a 	add	r21,r21,r8
   19604:	2569c83a 	sub	r20,r4,r21
   19608:	25404f1e 	bne	r4,r21,19748 <__umoddi3+0x2c4>
   1960c:	3c400136 	bltu	r7,r17,19614 <__umoddi3+0x190>
   19610:	81bfe436 	bltu	r16,r6,195a4 <__umoddi3+0x120>
   19614:	8185c83a 	sub	r2,r16,r6
   19618:	89cfc83a 	sub	r7,r17,r7
   1961c:	8087803a 	cmpltu	r3,r16,r2
   19620:	38c7c83a 	sub	r3,r7,r3
   19624:	003fdf06 	br	195a4 <__umoddi3+0x120>
   19628:	3000041e 	bne	r6,zero,1963c <__umoddi3+0x1b8>
   1962c:	000b883a 	mov	r5,zero
   19630:	01000044 	movi	r4,1
   19634:	000933c0 	call	933c <__udivsi3>
   19638:	1029883a 	mov	r20,r2
   1963c:	00bfffd4 	movui	r2,65535
   19640:	1500322e 	bgeu	r2,r20,1970c <__umoddi3+0x288>
   19644:	00804034 	movhi	r2,256
   19648:	a080cd36 	bltu	r20,r2,19980 <__umoddi3+0x4fc>
   1964c:	a006d63a 	srli	r3,r20,24
   19650:	04800604 	movi	r18,24
   19654:	008000b4 	movhi	r2,2
   19658:	1885883a 	add	r2,r3,r2
   1965c:	15856e03 	ldbu	r22,5560(r2)
   19660:	00800804 	movi	r2,32
   19664:	b4ad883a 	add	r22,r22,r18
   19668:	15a5c83a 	sub	r18,r2,r22
   1966c:	15808a1e 	bne	r2,r22,19898 <__umoddi3+0x414>
   19670:	a02ed43a 	srli	r23,r20,16
   19674:	8d23c83a 	sub	r17,r17,r20
   19678:	a57fffcc 	andi	r21,r20,65535
   1967c:	b80b883a 	mov	r5,r23
   19680:	8809883a 	mov	r4,r17
   19684:	00093a00 	call	93a0 <__umodsi3>
   19688:	8809883a 	mov	r4,r17
   1968c:	b80b883a 	mov	r5,r23
   19690:	102d883a 	mov	r22,r2
   19694:	000933c0 	call	933c <__udivsi3>
   19698:	b02c943a 	slli	r22,r22,16
   1969c:	9808d43a 	srli	r4,r19,16
   196a0:	1561383a 	mul	r16,r2,r21
   196a4:	b108b03a 	or	r4,r22,r4
   196a8:	2400032e 	bgeu	r4,r16,196b8 <__umoddi3+0x234>
   196ac:	2509883a 	add	r4,r4,r20
   196b0:	25000136 	bltu	r4,r20,196b8 <__umoddi3+0x234>
   196b4:	2400be36 	bltu	r4,r16,199b0 <__umoddi3+0x52c>
   196b8:	2421c83a 	sub	r16,r4,r16
   196bc:	b80b883a 	mov	r5,r23
   196c0:	8009883a 	mov	r4,r16
   196c4:	00093a00 	call	93a0 <__umodsi3>
   196c8:	1023883a 	mov	r17,r2
   196cc:	b80b883a 	mov	r5,r23
   196d0:	8009883a 	mov	r4,r16
   196d4:	000933c0 	call	933c <__udivsi3>
   196d8:	8822943a 	slli	r17,r17,16
   196dc:	1545383a 	mul	r2,r2,r21
   196e0:	98ffffcc 	andi	r3,r19,65535
   196e4:	88c6b03a 	or	r3,r17,r3
   196e8:	1880042e 	bgeu	r3,r2,196fc <__umoddi3+0x278>
   196ec:	1d07883a 	add	r3,r3,r20
   196f0:	1d000236 	bltu	r3,r20,196fc <__umoddi3+0x278>
   196f4:	1880012e 	bgeu	r3,r2,196fc <__umoddi3+0x278>
   196f8:	1d07883a 	add	r3,r3,r20
   196fc:	1885c83a 	sub	r2,r3,r2
   19700:	1484d83a 	srl	r2,r2,r18
   19704:	0007883a 	mov	r3,zero
   19708:	003fa606 	br	195a4 <__umoddi3+0x120>
   1970c:	a0804030 	cmpltui	r2,r20,256
   19710:	10009e1e 	bne	r2,zero,1998c <__umoddi3+0x508>
   19714:	a006d23a 	srli	r3,r20,8
   19718:	04800204 	movi	r18,8
   1971c:	003fcd06 	br	19654 <__umoddi3+0x1d0>
   19720:	30804030 	cmpltui	r2,r6,256
   19724:	1000911e 	bne	r2,zero,1996c <__umoddi3+0x4e8>
   19728:	3006d23a 	srli	r3,r6,8
   1972c:	04800204 	movi	r18,8
   19730:	003f6d06 	br	194e8 <__umoddi3+0x64>
   19734:	39004030 	cmpltui	r4,r7,256
   19738:	2000961e 	bne	r4,zero,19994 <__umoddi3+0x510>
   1973c:	3808d23a 	srli	r4,r7,8
   19740:	02000204 	movi	r8,8
   19744:	003faa06 	br	195f0 <__umoddi3+0x16c>
   19748:	3d0e983a 	sll	r7,r7,r20
   1974c:	3544d83a 	srl	r2,r6,r21
   19750:	8d64d83a 	srl	r18,r17,r21
   19754:	8d22983a 	sll	r17,r17,r20
   19758:	11eeb03a 	or	r23,r2,r7
   1975c:	b838d43a 	srli	fp,r23,16
   19760:	8544d83a 	srl	r2,r16,r21
   19764:	9009883a 	mov	r4,r18
   19768:	e00b883a 	mov	r5,fp
   1976c:	3526983a 	sll	r19,r6,r20
   19770:	1462b03a 	or	r17,r2,r17
   19774:	00093a00 	call	93a0 <__umodsi3>
   19778:	9009883a 	mov	r4,r18
   1977c:	e00b883a 	mov	r5,fp
   19780:	1025883a 	mov	r18,r2
   19784:	000933c0 	call	933c <__udivsi3>
   19788:	9008943a 	slli	r4,r18,16
   1978c:	8806d43a 	srli	r3,r17,16
   19790:	b9ffffcc 	andi	r7,r23,65535
   19794:	38a5383a 	mul	r18,r7,r2
   19798:	20c8b03a 	or	r4,r4,r3
   1979c:	8520983a 	sll	r16,r16,r20
   197a0:	102d883a 	mov	r22,r2
   197a4:	2480062e 	bgeu	r4,r18,197c0 <__umoddi3+0x33c>
   197a8:	25c9883a 	add	r4,r4,r23
   197ac:	10bfffc4 	addi	r2,r2,-1
   197b0:	25c07d36 	bltu	r4,r23,199a8 <__umoddi3+0x524>
   197b4:	24807c2e 	bgeu	r4,r18,199a8 <__umoddi3+0x524>
   197b8:	b5bfff84 	addi	r22,r22,-2
   197bc:	25c9883a 	add	r4,r4,r23
   197c0:	24a5c83a 	sub	r18,r4,r18
   197c4:	9009883a 	mov	r4,r18
   197c8:	e00b883a 	mov	r5,fp
   197cc:	d9c00015 	stw	r7,0(sp)
   197d0:	00093a00 	call	93a0 <__umodsi3>
   197d4:	9009883a 	mov	r4,r18
   197d8:	e00b883a 	mov	r5,fp
   197dc:	1025883a 	mov	r18,r2
   197e0:	000933c0 	call	933c <__udivsi3>
   197e4:	d9c00017 	ldw	r7,0(sp)
   197e8:	9024943a 	slli	r18,r18,16
   197ec:	8c7fffcc 	andi	r17,r17,65535
   197f0:	388f383a 	mul	r7,r7,r2
   197f4:	9448b03a 	or	r4,r18,r17
   197f8:	21c0062e 	bgeu	r4,r7,19814 <__umoddi3+0x390>
   197fc:	25c9883a 	add	r4,r4,r23
   19800:	10ffffc4 	addi	r3,r2,-1
   19804:	25c06636 	bltu	r4,r23,199a0 <__umoddi3+0x51c>
   19808:	21c0652e 	bgeu	r4,r7,199a0 <__umoddi3+0x51c>
   1980c:	10bfff84 	addi	r2,r2,-2
   19810:	25c9883a 	add	r4,r4,r23
   19814:	b00a943a 	slli	r5,r22,16
   19818:	11bfffcc 	andi	r6,r2,65535
   1981c:	9806d43a 	srli	r3,r19,16
   19820:	2884b03a 	or	r2,r5,r2
   19824:	102cd43a 	srli	r22,r2,16
   19828:	997fffcc 	andi	r5,r19,65535
   1982c:	3151383a 	mul	r8,r6,r5
   19830:	b14b383a 	mul	r5,r22,r5
   19834:	30cd383a 	mul	r6,r6,r3
   19838:	4004d43a 	srli	r2,r8,16
   1983c:	b0ed383a 	mul	r22,r22,r3
   19840:	314d883a 	add	r6,r6,r5
   19844:	1185883a 	add	r2,r2,r6
   19848:	21c9c83a 	sub	r4,r4,r7
   1984c:	1140022e 	bgeu	r2,r5,19858 <__umoddi3+0x3d4>
   19850:	00c00074 	movhi	r3,1
   19854:	b0ed883a 	add	r22,r22,r3
   19858:	1006d43a 	srli	r3,r2,16
   1985c:	1004943a 	slli	r2,r2,16
   19860:	423fffcc 	andi	r8,r8,65535
   19864:	1dad883a 	add	r22,r3,r22
   19868:	1205883a 	add	r2,r2,r8
   1986c:	25803636 	bltu	r4,r22,19948 <__umoddi3+0x4c4>
   19870:	25803426 	beq	r4,r22,19944 <__umoddi3+0x4c0>
   19874:	8085c83a 	sub	r2,r16,r2
   19878:	8087803a 	cmpltu	r3,r16,r2
   1987c:	2589c83a 	sub	r4,r4,r22
   19880:	20c7c83a 	sub	r3,r4,r3
   19884:	1d60983a 	sll	r16,r3,r21
   19888:	1504d83a 	srl	r2,r2,r20
   1988c:	1d06d83a 	srl	r3,r3,r20
   19890:	8084b03a 	or	r2,r16,r2
   19894:	003f4306 	br	195a4 <__umoddi3+0x120>
   19898:	a4a8983a 	sll	r20,r20,r18
   1989c:	8daad83a 	srl	r21,r17,r22
   198a0:	8ca2983a 	sll	r17,r17,r18
   198a4:	a02ed43a 	srli	r23,r20,16
   198a8:	a809883a 	mov	r4,r21
   198ac:	85acd83a 	srl	r22,r16,r22
   198b0:	b80b883a 	mov	r5,r23
   198b4:	00093a00 	call	93a0 <__umodsi3>
   198b8:	a809883a 	mov	r4,r21
   198bc:	b80b883a 	mov	r5,r23
   198c0:	b46cb03a 	or	r22,r22,r17
   198c4:	1027883a 	mov	r19,r2
   198c8:	000933c0 	call	933c <__udivsi3>
   198cc:	9826943a 	slli	r19,r19,16
   198d0:	b008d43a 	srli	r4,r22,16
   198d4:	a57fffcc 	andi	r21,r20,65535
   198d8:	a8a3383a 	mul	r17,r21,r2
   198dc:	9908b03a 	or	r4,r19,r4
   198e0:	84a6983a 	sll	r19,r16,r18
   198e4:	2440042e 	bgeu	r4,r17,198f8 <__umoddi3+0x474>
   198e8:	2509883a 	add	r4,r4,r20
   198ec:	25000236 	bltu	r4,r20,198f8 <__umoddi3+0x474>
   198f0:	2440012e 	bgeu	r4,r17,198f8 <__umoddi3+0x474>
   198f4:	2509883a 	add	r4,r4,r20
   198f8:	2463c83a 	sub	r17,r4,r17
   198fc:	8809883a 	mov	r4,r17
   19900:	b80b883a 	mov	r5,r23
   19904:	00093a00 	call	93a0 <__umodsi3>
   19908:	1021883a 	mov	r16,r2
   1990c:	8809883a 	mov	r4,r17
   19910:	b80b883a 	mov	r5,r23
   19914:	8020943a 	slli	r16,r16,16
   19918:	000933c0 	call	933c <__udivsi3>
   1991c:	a885383a 	mul	r2,r21,r2
   19920:	b47fffcc 	andi	r17,r22,65535
   19924:	8462b03a 	or	r17,r16,r17
   19928:	8880042e 	bgeu	r17,r2,1993c <__umoddi3+0x4b8>
   1992c:	8d23883a 	add	r17,r17,r20
   19930:	8d000236 	bltu	r17,r20,1993c <__umoddi3+0x4b8>
   19934:	8880012e 	bgeu	r17,r2,1993c <__umoddi3+0x4b8>
   19938:	8d23883a 	add	r17,r17,r20
   1993c:	88a3c83a 	sub	r17,r17,r2
   19940:	003f4e06 	br	1967c <__umoddi3+0x1f8>
   19944:	80bfcb2e 	bgeu	r16,r2,19874 <__umoddi3+0x3f0>
   19948:	14e7c83a 	sub	r19,r2,r19
   1994c:	14c5803a 	cmpltu	r2,r2,r19
   19950:	15c5883a 	add	r2,r2,r23
   19954:	b0adc83a 	sub	r22,r22,r2
   19958:	9805883a 	mov	r2,r19
   1995c:	003fc506 	br	19874 <__umoddi3+0x3f0>
   19960:	3006d43a 	srli	r3,r6,16
   19964:	04800404 	movi	r18,16
   19968:	003edf06 	br	194e8 <__umoddi3+0x64>
   1996c:	3007883a 	mov	r3,r6
   19970:	003edd06 	br	194e8 <__umoddi3+0x64>
   19974:	3808d43a 	srli	r4,r7,16
   19978:	02000404 	movi	r8,16
   1997c:	003f1c06 	br	195f0 <__umoddi3+0x16c>
   19980:	a006d43a 	srli	r3,r20,16
   19984:	04800404 	movi	r18,16
   19988:	003f3206 	br	19654 <__umoddi3+0x1d0>
   1998c:	a007883a 	mov	r3,r20
   19990:	003f3006 	br	19654 <__umoddi3+0x1d0>
   19994:	3809883a 	mov	r4,r7
   19998:	0011883a 	mov	r8,zero
   1999c:	003f1406 	br	195f0 <__umoddi3+0x16c>
   199a0:	1805883a 	mov	r2,r3
   199a4:	003f9b06 	br	19814 <__umoddi3+0x390>
   199a8:	102d883a 	mov	r22,r2
   199ac:	003f8406 	br	197c0 <__umoddi3+0x33c>
   199b0:	2509883a 	add	r4,r4,r20
   199b4:	003f4006 	br	196b8 <__umoddi3+0x234>

000199b8 <__lesf2>:
   199b8:	200cd5fa 	srli	r6,r4,23
   199bc:	280ed5fa 	srli	r7,r5,23
   199c0:	00c02034 	movhi	r3,128
   199c4:	31803fcc 	andi	r6,r6,255
   199c8:	18ffffc4 	addi	r3,r3,-1
   199cc:	32003fd8 	cmpnei	r8,r6,255
   199d0:	2012d7fa 	srli	r9,r4,31
   199d4:	2804d7fa 	srli	r2,r5,31
   199d8:	1908703a 	and	r4,r3,r4
   199dc:	1946703a 	and	r3,r3,r5
   199e0:	39403fcc 	andi	r5,r7,255
   199e4:	40000826 	beq	r8,zero,19a08 <__lesf2+0x50>
   199e8:	29c03fd8 	cmpnei	r7,r5,255
   199ec:	38000926 	beq	r7,zero,19a14 <__lesf2+0x5c>
   199f0:	3000181e 	bne	r6,zero,19a54 <__lesf2+0x9c>
   199f4:	2800091e 	bne	r5,zero,19a1c <__lesf2+0x64>
   199f8:	1800081e 	bne	r3,zero,19a1c <__lesf2+0x64>
   199fc:	2000091e 	bne	r4,zero,19a24 <__lesf2+0x6c>
   19a00:	0005883a 	mov	r2,zero
   19a04:	f800283a 	ret
   19a08:	20000a1e 	bne	r4,zero,19a34 <__lesf2+0x7c>
   19a0c:	29c03fe0 	cmpeqi	r7,r5,255
   19a10:	38001026 	beq	r7,zero,19a54 <__lesf2+0x9c>
   19a14:	1800071e 	bne	r3,zero,19a34 <__lesf2+0x7c>
   19a18:	3000011e 	bne	r6,zero,19a20 <__lesf2+0x68>
   19a1c:	20000b26 	beq	r4,zero,19a4c <__lesf2+0x94>
   19a20:	48800626 	beq	r9,r2,19a3c <__lesf2+0x84>
   19a24:	00800044 	movi	r2,1
   19a28:	48000926 	beq	r9,zero,19a50 <__lesf2+0x98>
   19a2c:	00bfffc4 	movi	r2,-1
   19a30:	f800283a 	ret
   19a34:	00800084 	movi	r2,2
   19a38:	f800283a 	ret
   19a3c:	29800816 	blt	r5,r6,19a60 <__lesf2+0xa8>
   19a40:	31400216 	blt	r6,r5,19a4c <__lesf2+0x94>
   19a44:	19000636 	bltu	r3,r4,19a60 <__lesf2+0xa8>
   19a48:	20ffed2e 	bgeu	r4,r3,19a00 <__lesf2+0x48>
   19a4c:	103ff726 	beq	r2,zero,19a2c <__lesf2+0x74>
   19a50:	f800283a 	ret
   19a54:	283ff21e 	bne	r5,zero,19a20 <__lesf2+0x68>
   19a58:	183ff11e 	bne	r3,zero,19a20 <__lesf2+0x68>
   19a5c:	003ff106 	br	19a24 <__lesf2+0x6c>
   19a60:	103ff21e 	bne	r2,zero,19a2c <__lesf2+0x74>
   19a64:	00800044 	movi	r2,1
   19a68:	f800283a 	ret

00019a6c <__unordsf2>:
   19a6c:	2006d5fa 	srli	r3,r4,23
   19a70:	00802034 	movhi	r2,128
   19a74:	10bfffc4 	addi	r2,r2,-1
   19a78:	18c03fcc 	andi	r3,r3,255
   19a7c:	18c03fd8 	cmpnei	r3,r3,255
   19a80:	1108703a 	and	r4,r2,r4
   19a84:	280cd5fa 	srli	r6,r5,23
   19a88:	1144703a 	and	r2,r2,r5
   19a8c:	18000526 	beq	r3,zero,19aa4 <__unordsf2+0x38>
   19a90:	31803fcc 	andi	r6,r6,255
   19a94:	31803fd8 	cmpnei	r6,r6,255
   19a98:	30000526 	beq	r6,zero,19ab0 <__unordsf2+0x44>
   19a9c:	0005883a 	mov	r2,zero
   19aa0:	f800283a 	ret
   19aa4:	203ffa26 	beq	r4,zero,19a90 <__unordsf2+0x24>
   19aa8:	00800044 	movi	r2,1
   19aac:	f800283a 	ret
   19ab0:	1004c03a 	cmpne	r2,r2,zero
   19ab4:	f800283a 	ret

00019ab8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19ab8:	defffe04 	addi	sp,sp,-8
   19abc:	dfc00115 	stw	ra,4(sp)
   19ac0:	df000015 	stw	fp,0(sp)
   19ac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19ac8:	d0a00a17 	ldw	r2,-32728(gp)
   19acc:	10000326 	beq	r2,zero,19adc <alt_get_errno+0x24>
   19ad0:	d0a00a17 	ldw	r2,-32728(gp)
   19ad4:	103ee83a 	callr	r2
   19ad8:	00000106 	br	19ae0 <alt_get_errno+0x28>
   19adc:	d0a74504 	addi	r2,gp,-25324
}
   19ae0:	e037883a 	mov	sp,fp
   19ae4:	dfc00117 	ldw	ra,4(sp)
   19ae8:	df000017 	ldw	fp,0(sp)
   19aec:	dec00204 	addi	sp,sp,8
   19af0:	f800283a 	ret

00019af4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19af4:	defffb04 	addi	sp,sp,-20
   19af8:	dfc00415 	stw	ra,16(sp)
   19afc:	df000315 	stw	fp,12(sp)
   19b00:	df000304 	addi	fp,sp,12
   19b04:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19b08:	e0bffd17 	ldw	r2,-12(fp)
   19b0c:	10000616 	blt	r2,zero,19b28 <close+0x34>
   19b10:	e0bffd17 	ldw	r2,-12(fp)
   19b14:	10c00324 	muli	r3,r2,12
   19b18:	008000b4 	movhi	r2,2
   19b1c:	1089f804 	addi	r2,r2,10208
   19b20:	1885883a 	add	r2,r3,r2
   19b24:	00000106 	br	19b2c <close+0x38>
   19b28:	0005883a 	mov	r2,zero
   19b2c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   19b30:	e0bfff17 	ldw	r2,-4(fp)
   19b34:	10001926 	beq	r2,zero,19b9c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19b38:	e0bfff17 	ldw	r2,-4(fp)
   19b3c:	10800017 	ldw	r2,0(r2)
   19b40:	10800417 	ldw	r2,16(r2)
   19b44:	10000626 	beq	r2,zero,19b60 <close+0x6c>
   19b48:	e0bfff17 	ldw	r2,-4(fp)
   19b4c:	10800017 	ldw	r2,0(r2)
   19b50:	10800417 	ldw	r2,16(r2)
   19b54:	e13fff17 	ldw	r4,-4(fp)
   19b58:	103ee83a 	callr	r2
   19b5c:	00000106 	br	19b64 <close+0x70>
   19b60:	0005883a 	mov	r2,zero
   19b64:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19b68:	e13ffd17 	ldw	r4,-12(fp)
   19b6c:	001a5d00 	call	1a5d0 <alt_release_fd>
    if (rval < 0)
   19b70:	e0bffe17 	ldw	r2,-8(fp)
   19b74:	1000070e 	bge	r2,zero,19b94 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   19b78:	0019ab80 	call	19ab8 <alt_get_errno>
   19b7c:	1007883a 	mov	r3,r2
   19b80:	e0bffe17 	ldw	r2,-8(fp)
   19b84:	0085c83a 	sub	r2,zero,r2
   19b88:	18800015 	stw	r2,0(r3)
      return -1;
   19b8c:	00bfffc4 	movi	r2,-1
   19b90:	00000706 	br	19bb0 <close+0xbc>
    }
    return 0;
   19b94:	0005883a 	mov	r2,zero
   19b98:	00000506 	br	19bb0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19b9c:	0019ab80 	call	19ab8 <alt_get_errno>
   19ba0:	1007883a 	mov	r3,r2
   19ba4:	00801444 	movi	r2,81
   19ba8:	18800015 	stw	r2,0(r3)
    return -1;
   19bac:	00bfffc4 	movi	r2,-1
  }
}
   19bb0:	e037883a 	mov	sp,fp
   19bb4:	dfc00117 	ldw	ra,4(sp)
   19bb8:	df000017 	ldw	fp,0(sp)
   19bbc:	dec00204 	addi	sp,sp,8
   19bc0:	f800283a 	ret

00019bc4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19bc4:	defffc04 	addi	sp,sp,-16
   19bc8:	df000315 	stw	fp,12(sp)
   19bcc:	df000304 	addi	fp,sp,12
   19bd0:	e13fff15 	stw	r4,-4(fp)
   19bd4:	e17ffe15 	stw	r5,-8(fp)
   19bd8:	e1bffd15 	stw	r6,-12(fp)
  return len;
   19bdc:	e0bffd17 	ldw	r2,-12(fp)
}
   19be0:	e037883a 	mov	sp,fp
   19be4:	df000017 	ldw	fp,0(sp)
   19be8:	dec00104 	addi	sp,sp,4
   19bec:	f800283a 	ret

00019bf0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19bf0:	defffd04 	addi	sp,sp,-12
   19bf4:	df000215 	stw	fp,8(sp)
   19bf8:	df000204 	addi	fp,sp,8
   19bfc:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19c00:	0001883a 	nop
   19c04:	e0bffe17 	ldw	r2,-8(fp)
   19c08:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19c0c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19c10:	10000226 	beq	r2,zero,19c1c <_exit+0x2c>
    ALT_SIM_FAIL();
   19c14:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   19c18:	00000106 	br	19c20 <_exit+0x30>
    ALT_SIM_PASS();
   19c1c:	002af0b0 	cmpltui	zero,zero,43970
}
   19c20:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19c24:	003fff06 	br	19c24 <_exit+0x34>

00019c28 <alt_get_errno>:
{
   19c28:	defffe04 	addi	sp,sp,-8
   19c2c:	dfc00115 	stw	ra,4(sp)
   19c30:	df000015 	stw	fp,0(sp)
   19c34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19c38:	d0a00a17 	ldw	r2,-32728(gp)
   19c3c:	10000326 	beq	r2,zero,19c4c <alt_get_errno+0x24>
   19c40:	d0a00a17 	ldw	r2,-32728(gp)
   19c44:	103ee83a 	callr	r2
   19c48:	00000106 	br	19c50 <alt_get_errno+0x28>
   19c4c:	d0a74504 	addi	r2,gp,-25324
}
   19c50:	e037883a 	mov	sp,fp
   19c54:	dfc00117 	ldw	ra,4(sp)
   19c58:	df000017 	ldw	fp,0(sp)
   19c5c:	dec00204 	addi	sp,sp,8
   19c60:	f800283a 	ret

00019c64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19c64:	defffb04 	addi	sp,sp,-20
   19c68:	dfc00415 	stw	ra,16(sp)
   19c6c:	df000315 	stw	fp,12(sp)
   19c70:	df000304 	addi	fp,sp,12
   19c74:	e13ffe15 	stw	r4,-8(fp)
   19c78:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19c7c:	e0bffe17 	ldw	r2,-8(fp)
   19c80:	10000616 	blt	r2,zero,19c9c <fstat+0x38>
   19c84:	e0bffe17 	ldw	r2,-8(fp)
   19c88:	10c00324 	muli	r3,r2,12
   19c8c:	008000b4 	movhi	r2,2
   19c90:	1089f804 	addi	r2,r2,10208
   19c94:	1885883a 	add	r2,r3,r2
   19c98:	00000106 	br	19ca0 <fstat+0x3c>
   19c9c:	0005883a 	mov	r2,zero
   19ca0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   19ca4:	e0bfff17 	ldw	r2,-4(fp)
   19ca8:	10001026 	beq	r2,zero,19cec <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   19cac:	e0bfff17 	ldw	r2,-4(fp)
   19cb0:	10800017 	ldw	r2,0(r2)
   19cb4:	10800817 	ldw	r2,32(r2)
   19cb8:	10000726 	beq	r2,zero,19cd8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   19cbc:	e0bfff17 	ldw	r2,-4(fp)
   19cc0:	10800017 	ldw	r2,0(r2)
   19cc4:	10800817 	ldw	r2,32(r2)
   19cc8:	e17ffd17 	ldw	r5,-12(fp)
   19ccc:	e13fff17 	ldw	r4,-4(fp)
   19cd0:	103ee83a 	callr	r2
   19cd4:	00000a06 	br	19d00 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   19cd8:	e0bffd17 	ldw	r2,-12(fp)
   19cdc:	00c80004 	movi	r3,8192
   19ce0:	10c00115 	stw	r3,4(r2)
      return 0;
   19ce4:	0005883a 	mov	r2,zero
   19ce8:	00000506 	br	19d00 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19cec:	0019c280 	call	19c28 <alt_get_errno>
   19cf0:	1007883a 	mov	r3,r2
   19cf4:	00801444 	movi	r2,81
   19cf8:	18800015 	stw	r2,0(r3)
    return -1;
   19cfc:	00bfffc4 	movi	r2,-1
  }
}
   19d00:	e037883a 	mov	sp,fp
   19d04:	dfc00117 	ldw	ra,4(sp)
   19d08:	df000017 	ldw	fp,0(sp)
   19d0c:	dec00204 	addi	sp,sp,8
   19d10:	f800283a 	ret

00019d14 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   19d14:	deffff04 	addi	sp,sp,-4
   19d18:	df000015 	stw	fp,0(sp)
   19d1c:	d839883a 	mov	fp,sp
  return 0;
   19d20:	0005883a 	mov	r2,zero
}
   19d24:	e037883a 	mov	sp,fp
   19d28:	df000017 	ldw	fp,0(sp)
   19d2c:	dec00104 	addi	sp,sp,4
   19d30:	f800283a 	ret

00019d34 <alt_get_errno>:
{
   19d34:	defffe04 	addi	sp,sp,-8
   19d38:	dfc00115 	stw	ra,4(sp)
   19d3c:	df000015 	stw	fp,0(sp)
   19d40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19d44:	d0a00a17 	ldw	r2,-32728(gp)
   19d48:	10000326 	beq	r2,zero,19d58 <alt_get_errno+0x24>
   19d4c:	d0a00a17 	ldw	r2,-32728(gp)
   19d50:	103ee83a 	callr	r2
   19d54:	00000106 	br	19d5c <alt_get_errno+0x28>
   19d58:	d0a74504 	addi	r2,gp,-25324
}
   19d5c:	e037883a 	mov	sp,fp
   19d60:	dfc00117 	ldw	ra,4(sp)
   19d64:	df000017 	ldw	fp,0(sp)
   19d68:	dec00204 	addi	sp,sp,8
   19d6c:	f800283a 	ret

00019d70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   19d70:	deffea04 	addi	sp,sp,-88
   19d74:	dfc01515 	stw	ra,84(sp)
   19d78:	df001415 	stw	fp,80(sp)
   19d7c:	df001404 	addi	fp,sp,80
   19d80:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19d84:	e0bfec17 	ldw	r2,-80(fp)
   19d88:	10000616 	blt	r2,zero,19da4 <isatty+0x34>
   19d8c:	e0bfec17 	ldw	r2,-80(fp)
   19d90:	10c00324 	muli	r3,r2,12
   19d94:	008000b4 	movhi	r2,2
   19d98:	1089f804 	addi	r2,r2,10208
   19d9c:	1885883a 	add	r2,r3,r2
   19da0:	00000106 	br	19da8 <isatty+0x38>
   19da4:	0005883a 	mov	r2,zero
   19da8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   19dac:	e0bfff17 	ldw	r2,-4(fp)
   19db0:	10000e26 	beq	r2,zero,19dec <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   19db4:	e0bfff17 	ldw	r2,-4(fp)
   19db8:	10800017 	ldw	r2,0(r2)
   19dbc:	10800817 	ldw	r2,32(r2)
   19dc0:	1000021e 	bne	r2,zero,19dcc <isatty+0x5c>
    {
      return 1;
   19dc4:	00800044 	movi	r2,1
   19dc8:	00000d06 	br	19e00 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   19dcc:	e0bfed04 	addi	r2,fp,-76
   19dd0:	100b883a 	mov	r5,r2
   19dd4:	e13fec17 	ldw	r4,-80(fp)
   19dd8:	0019c640 	call	19c64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   19ddc:	e0bfee17 	ldw	r2,-72(fp)
   19de0:	10880020 	cmpeqi	r2,r2,8192
   19de4:	10803fcc 	andi	r2,r2,255
   19de8:	00000506 	br	19e00 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19dec:	0019d340 	call	19d34 <alt_get_errno>
   19df0:	1007883a 	mov	r3,r2
   19df4:	00801444 	movi	r2,81
   19df8:	18800015 	stw	r2,0(r3)
    return 0;
   19dfc:	0005883a 	mov	r2,zero
  }
}
   19e00:	e037883a 	mov	sp,fp
   19e04:	dfc00117 	ldw	ra,4(sp)
   19e08:	df000017 	ldw	fp,0(sp)
   19e0c:	dec00204 	addi	sp,sp,8
   19e10:	f800283a 	ret

00019e14 <alt_get_errno>:
{
   19e14:	defffe04 	addi	sp,sp,-8
   19e18:	dfc00115 	stw	ra,4(sp)
   19e1c:	df000015 	stw	fp,0(sp)
   19e20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19e24:	d0a00a17 	ldw	r2,-32728(gp)
   19e28:	10000326 	beq	r2,zero,19e38 <alt_get_errno+0x24>
   19e2c:	d0a00a17 	ldw	r2,-32728(gp)
   19e30:	103ee83a 	callr	r2
   19e34:	00000106 	br	19e3c <alt_get_errno+0x28>
   19e38:	d0a74504 	addi	r2,gp,-25324
}
   19e3c:	e037883a 	mov	sp,fp
   19e40:	dfc00117 	ldw	ra,4(sp)
   19e44:	df000017 	ldw	fp,0(sp)
   19e48:	dec00204 	addi	sp,sp,8
   19e4c:	f800283a 	ret

00019e50 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   19e50:	defffb04 	addi	sp,sp,-20
   19e54:	dfc00415 	stw	ra,16(sp)
   19e58:	df000315 	stw	fp,12(sp)
   19e5c:	df000304 	addi	fp,sp,12
   19e60:	e13ffe15 	stw	r4,-8(fp)
   19e64:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   19e68:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   19e6c:	e0bffe17 	ldw	r2,-8(fp)
   19e70:	00802e16 	blt	zero,r2,19f2c <kill+0xdc>
  {
    switch (sig)
   19e74:	e0bffd17 	ldw	r2,-12(fp)
   19e78:	10800828 	cmpgeui	r2,r2,32
   19e7c:	1000281e 	bne	r2,zero,19f20 <kill+0xd0>
   19e80:	e0bffd17 	ldw	r2,-12(fp)
   19e84:	100690ba 	slli	r3,r2,2
   19e88:	008000b4 	movhi	r2,2
   19e8c:	1885883a 	add	r2,r3,r2
   19e90:	10a7a617 	ldw	r2,-24936(r2)
   19e94:	1000683a 	jmp	r2
   19e98:	00019f40 	call	19f4 <kiss_fft_alloc+0x10c>
   19e9c:	00019f20 	cmpeqi	zero,zero,1660
   19ea0:	00019f20 	cmpeqi	zero,zero,1660
   19ea4:	00019f18 	cmpnei	zero,zero,1660
   19ea8:	00019f18 	cmpnei	zero,zero,1660
   19eac:	00019f18 	cmpnei	zero,zero,1660
   19eb0:	00019f18 	cmpnei	zero,zero,1660
   19eb4:	00019f20 	cmpeqi	zero,zero,1660
   19eb8:	00019f18 	cmpnei	zero,zero,1660
   19ebc:	00019f18 	cmpnei	zero,zero,1660
   19ec0:	00019f18 	cmpnei	zero,zero,1660
   19ec4:	00019f18 	cmpnei	zero,zero,1660
   19ec8:	00019f18 	cmpnei	zero,zero,1660
   19ecc:	00019f18 	cmpnei	zero,zero,1660
   19ed0:	00019f18 	cmpnei	zero,zero,1660
   19ed4:	00019f18 	cmpnei	zero,zero,1660
   19ed8:	00019f40 	call	19f4 <kiss_fft_alloc+0x10c>
   19edc:	00019f20 	cmpeqi	zero,zero,1660
   19ee0:	00019f20 	cmpeqi	zero,zero,1660
   19ee4:	00019f20 	cmpeqi	zero,zero,1660
   19ee8:	00019f40 	call	19f4 <kiss_fft_alloc+0x10c>
   19eec:	00019f20 	cmpeqi	zero,zero,1660
   19ef0:	00019f20 	cmpeqi	zero,zero,1660
   19ef4:	00019f18 	cmpnei	zero,zero,1660
   19ef8:	00019f18 	cmpnei	zero,zero,1660
   19efc:	00019f18 	cmpnei	zero,zero,1660
   19f00:	00019f18 	cmpnei	zero,zero,1660
   19f04:	00019f18 	cmpnei	zero,zero,1660
   19f08:	00019f20 	cmpeqi	zero,zero,1660
   19f0c:	00019f20 	cmpeqi	zero,zero,1660
   19f10:	00019f18 	cmpnei	zero,zero,1660
   19f14:	00019f18 	cmpnei	zero,zero,1660
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   19f18:	0009883a 	mov	r4,zero
   19f1c:	0019bf00 	call	19bf0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   19f20:	00800584 	movi	r2,22
   19f24:	e0bfff15 	stw	r2,-4(fp)
   19f28:	00000606 	br	19f44 <kill+0xf4>
    }
  }

  else if (pid > 0)
   19f2c:	e0bffe17 	ldw	r2,-8(fp)
   19f30:	0080040e 	bge	zero,r2,19f44 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   19f34:	008000c4 	movi	r2,3
   19f38:	e0bfff15 	stw	r2,-4(fp)
   19f3c:	00000106 	br	19f44 <kill+0xf4>
      break;
   19f40:	0001883a 	nop
  }

  if (status)
   19f44:	e0bfff17 	ldw	r2,-4(fp)
   19f48:	10000626 	beq	r2,zero,19f64 <kill+0x114>
  {
    ALT_ERRNO = status;
   19f4c:	0019e140 	call	19e14 <alt_get_errno>
   19f50:	1007883a 	mov	r3,r2
   19f54:	e0bfff17 	ldw	r2,-4(fp)
   19f58:	18800015 	stw	r2,0(r3)
    return -1;
   19f5c:	00bfffc4 	movi	r2,-1
   19f60:	00000106 	br	19f68 <kill+0x118>
  }

  return 0;
   19f64:	0005883a 	mov	r2,zero
}
   19f68:	e037883a 	mov	sp,fp
   19f6c:	dfc00117 	ldw	ra,4(sp)
   19f70:	df000017 	ldw	fp,0(sp)
   19f74:	dec00204 	addi	sp,sp,8
   19f78:	f800283a 	ret

00019f7c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   19f7c:	defffc04 	addi	sp,sp,-16
   19f80:	df000315 	stw	fp,12(sp)
   19f84:	df000304 	addi	fp,sp,12
   19f88:	e13fff15 	stw	r4,-4(fp)
   19f8c:	e17ffe15 	stw	r5,-8(fp)
   19f90:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   19f94:	e0fffe17 	ldw	r3,-8(fp)
   19f98:	e0bfff17 	ldw	r2,-4(fp)
   19f9c:	18800c26 	beq	r3,r2,19fd0 <alt_load_section+0x54>
  {
    while( to != end )
   19fa0:	00000806 	br	19fc4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   19fa4:	e0ffff17 	ldw	r3,-4(fp)
   19fa8:	18800104 	addi	r2,r3,4
   19fac:	e0bfff15 	stw	r2,-4(fp)
   19fb0:	e0bffe17 	ldw	r2,-8(fp)
   19fb4:	11000104 	addi	r4,r2,4
   19fb8:	e13ffe15 	stw	r4,-8(fp)
   19fbc:	18c00017 	ldw	r3,0(r3)
   19fc0:	10c00015 	stw	r3,0(r2)
    while( to != end )
   19fc4:	e0fffe17 	ldw	r3,-8(fp)
   19fc8:	e0bffd17 	ldw	r2,-12(fp)
   19fcc:	18bff51e 	bne	r3,r2,19fa4 <alt_load_section+0x28>
    }
  }
}
   19fd0:	0001883a 	nop
   19fd4:	e037883a 	mov	sp,fp
   19fd8:	df000017 	ldw	fp,0(sp)
   19fdc:	dec00104 	addi	sp,sp,4
   19fe0:	f800283a 	ret

00019fe4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   19fe4:	defffe04 	addi	sp,sp,-8
   19fe8:	dfc00115 	stw	ra,4(sp)
   19fec:	df000015 	stw	fp,0(sp)
   19ff0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   19ff4:	018000b4 	movhi	r6,2
   19ff8:	318eb804 	addi	r6,r6,15072
   19ffc:	014000b4 	movhi	r5,2
   1a000:	29478804 	addi	r5,r5,7712
   1a004:	010000b4 	movhi	r4,2
   1a008:	210eb804 	addi	r4,r4,15072
   1a00c:	0019f7c0 	call	19f7c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a010:	01800034 	movhi	r6,0
   1a014:	31808f04 	addi	r6,r6,572
   1a018:	01400034 	movhi	r5,0
   1a01c:	29400804 	addi	r5,r5,32
   1a020:	01000034 	movhi	r4,0
   1a024:	21000804 	addi	r4,r4,32
   1a028:	0019f7c0 	call	19f7c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a02c:	018000b4 	movhi	r6,2
   1a030:	31878804 	addi	r6,r6,7712
   1a034:	014000b4 	movhi	r5,2
   1a038:	29434504 	addi	r5,r5,3348
   1a03c:	010000b4 	movhi	r4,2
   1a040:	21034504 	addi	r4,r4,3348
   1a044:	0019f7c0 	call	19f7c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a048:	001fc900 	call	1fc90 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a04c:	001feec0 	call	1feec <alt_icache_flush_all>
}
   1a050:	0001883a 	nop
   1a054:	e037883a 	mov	sp,fp
   1a058:	dfc00117 	ldw	ra,4(sp)
   1a05c:	df000017 	ldw	fp,0(sp)
   1a060:	dec00204 	addi	sp,sp,8
   1a064:	f800283a 	ret

0001a068 <alt_get_errno>:
{
   1a068:	defffe04 	addi	sp,sp,-8
   1a06c:	dfc00115 	stw	ra,4(sp)
   1a070:	df000015 	stw	fp,0(sp)
   1a074:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a078:	d0a00a17 	ldw	r2,-32728(gp)
   1a07c:	10000326 	beq	r2,zero,1a08c <alt_get_errno+0x24>
   1a080:	d0a00a17 	ldw	r2,-32728(gp)
   1a084:	103ee83a 	callr	r2
   1a088:	00000106 	br	1a090 <alt_get_errno+0x28>
   1a08c:	d0a74504 	addi	r2,gp,-25324
}
   1a090:	e037883a 	mov	sp,fp
   1a094:	dfc00117 	ldw	ra,4(sp)
   1a098:	df000017 	ldw	fp,0(sp)
   1a09c:	dec00204 	addi	sp,sp,8
   1a0a0:	f800283a 	ret

0001a0a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a0a4:	defff904 	addi	sp,sp,-28
   1a0a8:	dfc00615 	stw	ra,24(sp)
   1a0ac:	df000515 	stw	fp,20(sp)
   1a0b0:	df000504 	addi	fp,sp,20
   1a0b4:	e13ffd15 	stw	r4,-12(fp)
   1a0b8:	e17ffc15 	stw	r5,-16(fp)
   1a0bc:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a0c0:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a0c4:	e0bffd17 	ldw	r2,-12(fp)
   1a0c8:	10000616 	blt	r2,zero,1a0e4 <lseek+0x40>
   1a0cc:	e0bffd17 	ldw	r2,-12(fp)
   1a0d0:	10c00324 	muli	r3,r2,12
   1a0d4:	008000b4 	movhi	r2,2
   1a0d8:	1089f804 	addi	r2,r2,10208
   1a0dc:	1885883a 	add	r2,r3,r2
   1a0e0:	00000106 	br	1a0e8 <lseek+0x44>
   1a0e4:	0005883a 	mov	r2,zero
   1a0e8:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   1a0ec:	e0bffe17 	ldw	r2,-8(fp)
   1a0f0:	10001026 	beq	r2,zero,1a134 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a0f4:	e0bffe17 	ldw	r2,-8(fp)
   1a0f8:	10800017 	ldw	r2,0(r2)
   1a0fc:	10800717 	ldw	r2,28(r2)
   1a100:	10000926 	beq	r2,zero,1a128 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a104:	e0bffe17 	ldw	r2,-8(fp)
   1a108:	10800017 	ldw	r2,0(r2)
   1a10c:	10800717 	ldw	r2,28(r2)
   1a110:	e1bffb17 	ldw	r6,-20(fp)
   1a114:	e17ffc17 	ldw	r5,-16(fp)
   1a118:	e13ffe17 	ldw	r4,-8(fp)
   1a11c:	103ee83a 	callr	r2
   1a120:	e0bfff15 	stw	r2,-4(fp)
   1a124:	00000506 	br	1a13c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a128:	00bfde84 	movi	r2,-134
   1a12c:	e0bfff15 	stw	r2,-4(fp)
   1a130:	00000206 	br	1a13c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a134:	00bfebc4 	movi	r2,-81
   1a138:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   1a13c:	e0bfff17 	ldw	r2,-4(fp)
   1a140:	1000070e 	bge	r2,zero,1a160 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1a144:	001a0680 	call	1a068 <alt_get_errno>
   1a148:	1007883a 	mov	r3,r2
   1a14c:	e0bfff17 	ldw	r2,-4(fp)
   1a150:	0085c83a 	sub	r2,zero,r2
   1a154:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a158:	00bfffc4 	movi	r2,-1
   1a15c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   1a160:	e0bfff17 	ldw	r2,-4(fp)
}
   1a164:	e037883a 	mov	sp,fp
   1a168:	dfc00117 	ldw	ra,4(sp)
   1a16c:	df000017 	ldw	fp,0(sp)
   1a170:	dec00204 	addi	sp,sp,8
   1a174:	f800283a 	ret

0001a178 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a178:	defffd04 	addi	sp,sp,-12
   1a17c:	dfc00215 	stw	ra,8(sp)
   1a180:	df000115 	stw	fp,4(sp)
   1a184:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a188:	0009883a 	mov	r4,zero
   1a18c:	001a8480 	call	1a848 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1a190:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a194:	001a8840 	call	1a884 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a198:	018000b4 	movhi	r6,2
   1a19c:	31876704 	addi	r6,r6,7580
   1a1a0:	014000b4 	movhi	r5,2
   1a1a4:	29476704 	addi	r5,r5,7580
   1a1a8:	010000b4 	movhi	r4,2
   1a1ac:	21076704 	addi	r4,r4,7580
   1a1b0:	001ffd00 	call	1ffd0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a1b4:	001fd940 	call	1fd94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a1b8:	010000b4 	movhi	r4,2
   1a1bc:	213f7e04 	addi	r4,r4,-520
   1a1c0:	00208d80 	call	208d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a1c4:	d0a74717 	ldw	r2,-25316(gp)
   1a1c8:	d0e74817 	ldw	r3,-25312(gp)
   1a1cc:	d1274917 	ldw	r4,-25308(gp)
   1a1d0:	200d883a 	mov	r6,r4
   1a1d4:	180b883a 	mov	r5,r3
   1a1d8:	1009883a 	mov	r4,r2
   1a1dc:	0001d240 	call	1d24 <main>
   1a1e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a1e4:	01000044 	movi	r4,1
   1a1e8:	0019af40 	call	19af4 <close>
  exit (result);
   1a1ec:	e13fff17 	ldw	r4,-4(fp)
   1a1f0:	00208ec0 	call	208ec <exit>

0001a1f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a1f4:	defffe04 	addi	sp,sp,-8
   1a1f8:	df000115 	stw	fp,4(sp)
   1a1fc:	df000104 	addi	fp,sp,4
   1a200:	e13fff15 	stw	r4,-4(fp)
}
   1a204:	0001883a 	nop
   1a208:	e037883a 	mov	sp,fp
   1a20c:	df000017 	ldw	fp,0(sp)
   1a210:	dec00104 	addi	sp,sp,4
   1a214:	f800283a 	ret

0001a218 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a218:	defffe04 	addi	sp,sp,-8
   1a21c:	df000115 	stw	fp,4(sp)
   1a220:	df000104 	addi	fp,sp,4
   1a224:	e13fff15 	stw	r4,-4(fp)
}
   1a228:	0001883a 	nop
   1a22c:	e037883a 	mov	sp,fp
   1a230:	df000017 	ldw	fp,0(sp)
   1a234:	dec00104 	addi	sp,sp,4
   1a238:	f800283a 	ret

0001a23c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1a23c:	defff204 	addi	sp,sp,-56
   1a240:	dfc00a15 	stw	ra,40(sp)
   1a244:	df000915 	stw	fp,36(sp)
   1a248:	df000904 	addi	fp,sp,36
   1a24c:	e13ff715 	stw	r4,-36(fp)
   1a250:	e1400215 	stw	r5,8(fp)
   1a254:	e1800315 	stw	r6,12(fp)
   1a258:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   1a25c:	e0800204 	addi	r2,fp,8
   1a260:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   1a264:	e0bff717 	ldw	r2,-36(fp)
   1a268:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   1a26c:	00006f06 	br	1a42c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   1a270:	e0bffec7 	ldb	r2,-5(fp)
   1a274:	10800960 	cmpeqi	r2,r2,37
   1a278:	1000041e 	bne	r2,zero,1a28c <alt_printf+0x50>
        {
            alt_putchar(c);
   1a27c:	e0bffec7 	ldb	r2,-5(fp)
   1a280:	1009883a 	mov	r4,r2
   1a284:	001a4680 	call	1a468 <alt_putchar>
   1a288:	00006806 	br	1a42c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   1a28c:	e0bfff17 	ldw	r2,-4(fp)
   1a290:	10c00044 	addi	r3,r2,1
   1a294:	e0ffff15 	stw	r3,-4(fp)
   1a298:	10800003 	ldbu	r2,0(r2)
   1a29c:	e0bffec5 	stb	r2,-5(fp)
   1a2a0:	e0bffec7 	ldb	r2,-5(fp)
   1a2a4:	10006926 	beq	r2,zero,1a44c <alt_printf+0x210>
            {
                if (c == '%')
   1a2a8:	e0bffec7 	ldb	r2,-5(fp)
   1a2ac:	10800958 	cmpnei	r2,r2,37
   1a2b0:	1000041e 	bne	r2,zero,1a2c4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   1a2b4:	e0bffec7 	ldb	r2,-5(fp)
   1a2b8:	1009883a 	mov	r4,r2
   1a2bc:	001a4680 	call	1a468 <alt_putchar>
   1a2c0:	00005a06 	br	1a42c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   1a2c4:	e0bffec7 	ldb	r2,-5(fp)
   1a2c8:	108018d8 	cmpnei	r2,r2,99
   1a2cc:	1000081e 	bne	r2,zero,1a2f0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   1a2d0:	e0bff817 	ldw	r2,-32(fp)
   1a2d4:	10c00104 	addi	r3,r2,4
   1a2d8:	e0fff815 	stw	r3,-32(fp)
   1a2dc:	10800017 	ldw	r2,0(r2)
   1a2e0:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   1a2e4:	e13ff917 	ldw	r4,-28(fp)
   1a2e8:	001a4680 	call	1a468 <alt_putchar>
   1a2ec:	00004f06 	br	1a42c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   1a2f0:	e0bffec7 	ldb	r2,-5(fp)
   1a2f4:	10801e18 	cmpnei	r2,r2,120
   1a2f8:	1000341e 	bne	r2,zero,1a3cc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   1a2fc:	e0bff817 	ldw	r2,-32(fp)
   1a300:	10c00104 	addi	r3,r2,4
   1a304:	e0fff815 	stw	r3,-32(fp)
   1a308:	10800017 	ldw	r2,0(r2)
   1a30c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   1a310:	e0bffb17 	ldw	r2,-20(fp)
   1a314:	1000031e 	bne	r2,zero,1a324 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   1a318:	01000c04 	movi	r4,48
   1a31c:	001a4680 	call	1a468 <alt_putchar>
                        continue;
   1a320:	00004206 	br	1a42c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   1a324:	00800704 	movi	r2,28
   1a328:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   1a32c:	00000306 	br	1a33c <alt_printf+0x100>
                        digit_shift -= 4;
   1a330:	e0bffd17 	ldw	r2,-12(fp)
   1a334:	10bfff04 	addi	r2,r2,-4
   1a338:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   1a33c:	00c003c4 	movi	r3,15
   1a340:	e0bffd17 	ldw	r2,-12(fp)
   1a344:	1884983a 	sll	r2,r3,r2
   1a348:	1007883a 	mov	r3,r2
   1a34c:	e0bffb17 	ldw	r2,-20(fp)
   1a350:	1884703a 	and	r2,r3,r2
   1a354:	103ff626 	beq	r2,zero,1a330 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   1a358:	00001906 	br	1a3c0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1a35c:	00c003c4 	movi	r3,15
   1a360:	e0bffd17 	ldw	r2,-12(fp)
   1a364:	1884983a 	sll	r2,r3,r2
   1a368:	1007883a 	mov	r3,r2
   1a36c:	e0bffb17 	ldw	r2,-20(fp)
   1a370:	1886703a 	and	r3,r3,r2
   1a374:	e0bffd17 	ldw	r2,-12(fp)
   1a378:	1884d83a 	srl	r2,r3,r2
   1a37c:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   1a380:	e0bffa17 	ldw	r2,-24(fp)
   1a384:	108002a8 	cmpgeui	r2,r2,10
   1a388:	1000041e 	bne	r2,zero,1a39c <alt_printf+0x160>
                            c = '0' + digit;
   1a38c:	e0bffa17 	ldw	r2,-24(fp)
   1a390:	10800c04 	addi	r2,r2,48
   1a394:	e0bffec5 	stb	r2,-5(fp)
   1a398:	00000306 	br	1a3a8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   1a39c:	e0bffa17 	ldw	r2,-24(fp)
   1a3a0:	108015c4 	addi	r2,r2,87
   1a3a4:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   1a3a8:	e0bffec7 	ldb	r2,-5(fp)
   1a3ac:	1009883a 	mov	r4,r2
   1a3b0:	001a4680 	call	1a468 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   1a3b4:	e0bffd17 	ldw	r2,-12(fp)
   1a3b8:	10bfff04 	addi	r2,r2,-4
   1a3bc:	e0bffd15 	stw	r2,-12(fp)
   1a3c0:	e0bffd17 	ldw	r2,-12(fp)
   1a3c4:	103fe50e 	bge	r2,zero,1a35c <alt_printf+0x120>
   1a3c8:	00001806 	br	1a42c <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   1a3cc:	e0bffec7 	ldb	r2,-5(fp)
   1a3d0:	10801cd8 	cmpnei	r2,r2,115
   1a3d4:	1000151e 	bne	r2,zero,1a42c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1a3d8:	e0bff817 	ldw	r2,-32(fp)
   1a3dc:	10c00104 	addi	r3,r2,4
   1a3e0:	e0fff815 	stw	r3,-32(fp)
   1a3e4:	10800017 	ldw	r2,0(r2)
   1a3e8:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   1a3ec:	00000906 	br	1a414 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   1a3f0:	e0bffc17 	ldw	r2,-16(fp)
   1a3f4:	10c00044 	addi	r3,r2,1
   1a3f8:	e0fffc15 	stw	r3,-16(fp)
   1a3fc:	10800003 	ldbu	r2,0(r2)
   1a400:	10803fcc 	andi	r2,r2,255
   1a404:	1080201c 	xori	r2,r2,128
   1a408:	10bfe004 	addi	r2,r2,-128
   1a40c:	1009883a 	mov	r4,r2
   1a410:	001a4680 	call	1a468 <alt_putchar>
                    while(*s)
   1a414:	e0bffc17 	ldw	r2,-16(fp)
   1a418:	10800003 	ldbu	r2,0(r2)
   1a41c:	10803fcc 	andi	r2,r2,255
   1a420:	1080201c 	xori	r2,r2,128
   1a424:	10bfe004 	addi	r2,r2,-128
   1a428:	103ff11e 	bne	r2,zero,1a3f0 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
   1a42c:	e0bfff17 	ldw	r2,-4(fp)
   1a430:	10c00044 	addi	r3,r2,1
   1a434:	e0ffff15 	stw	r3,-4(fp)
   1a438:	10800003 	ldbu	r2,0(r2)
   1a43c:	e0bffec5 	stb	r2,-5(fp)
   1a440:	e0bffec7 	ldb	r2,-5(fp)
   1a444:	103f8a1e 	bne	r2,zero,1a270 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   1a448:	00000106 	br	1a450 <alt_printf+0x214>
                break;
   1a44c:	0001883a 	nop
}
   1a450:	0001883a 	nop
   1a454:	e037883a 	mov	sp,fp
   1a458:	dfc00117 	ldw	ra,4(sp)
   1a45c:	df000017 	ldw	fp,0(sp)
   1a460:	dec00504 	addi	sp,sp,20
   1a464:	f800283a 	ret

0001a468 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1a468:	defffd04 	addi	sp,sp,-12
   1a46c:	dfc00215 	stw	ra,8(sp)
   1a470:	df000115 	stw	fp,4(sp)
   1a474:	df000104 	addi	fp,sp,4
   1a478:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   1a47c:	e13fff17 	ldw	r4,-4(fp)
   1a480:	00209a00 	call	209a0 <putchar>
#endif
#endif
}
   1a484:	e037883a 	mov	sp,fp
   1a488:	dfc00117 	ldw	ra,4(sp)
   1a48c:	df000017 	ldw	fp,0(sp)
   1a490:	dec00204 	addi	sp,sp,8
   1a494:	f800283a 	ret

0001a498 <alt_get_errno>:
{
   1a498:	defffe04 	addi	sp,sp,-8
   1a49c:	dfc00115 	stw	ra,4(sp)
   1a4a0:	df000015 	stw	fp,0(sp)
   1a4a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a4a8:	d0a00a17 	ldw	r2,-32728(gp)
   1a4ac:	10000326 	beq	r2,zero,1a4bc <alt_get_errno+0x24>
   1a4b0:	d0a00a17 	ldw	r2,-32728(gp)
   1a4b4:	103ee83a 	callr	r2
   1a4b8:	00000106 	br	1a4c0 <alt_get_errno+0x28>
   1a4bc:	d0a74504 	addi	r2,gp,-25324
}
   1a4c0:	e037883a 	mov	sp,fp
   1a4c4:	dfc00117 	ldw	ra,4(sp)
   1a4c8:	df000017 	ldw	fp,0(sp)
   1a4cc:	dec00204 	addi	sp,sp,8
   1a4d0:	f800283a 	ret

0001a4d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a4d4:	defff904 	addi	sp,sp,-28
   1a4d8:	dfc00615 	stw	ra,24(sp)
   1a4dc:	df000515 	stw	fp,20(sp)
   1a4e0:	df000504 	addi	fp,sp,20
   1a4e4:	e13ffd15 	stw	r4,-12(fp)
   1a4e8:	e17ffc15 	stw	r5,-16(fp)
   1a4ec:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a4f0:	e0bffd17 	ldw	r2,-12(fp)
   1a4f4:	10000616 	blt	r2,zero,1a510 <read+0x3c>
   1a4f8:	e0bffd17 	ldw	r2,-12(fp)
   1a4fc:	10c00324 	muli	r3,r2,12
   1a500:	008000b4 	movhi	r2,2
   1a504:	1089f804 	addi	r2,r2,10208
   1a508:	1885883a 	add	r2,r3,r2
   1a50c:	00000106 	br	1a514 <read+0x40>
   1a510:	0005883a 	mov	r2,zero
   1a514:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1a518:	e0bfff17 	ldw	r2,-4(fp)
   1a51c:	10002226 	beq	r2,zero,1a5a8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a520:	e0bfff17 	ldw	r2,-4(fp)
   1a524:	10800217 	ldw	r2,8(r2)
   1a528:	108000cc 	andi	r2,r2,3
   1a52c:	10800060 	cmpeqi	r2,r2,1
   1a530:	1000181e 	bne	r2,zero,1a594 <read+0xc0>
        (fd->dev->read))
   1a534:	e0bfff17 	ldw	r2,-4(fp)
   1a538:	10800017 	ldw	r2,0(r2)
   1a53c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a540:	10001426 	beq	r2,zero,1a594 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a544:	e0bfff17 	ldw	r2,-4(fp)
   1a548:	10800017 	ldw	r2,0(r2)
   1a54c:	10800517 	ldw	r2,20(r2)
   1a550:	e0fffb17 	ldw	r3,-20(fp)
   1a554:	180d883a 	mov	r6,r3
   1a558:	e17ffc17 	ldw	r5,-16(fp)
   1a55c:	e13fff17 	ldw	r4,-4(fp)
   1a560:	103ee83a 	callr	r2
   1a564:	e0bffe15 	stw	r2,-8(fp)
   1a568:	e0bffe17 	ldw	r2,-8(fp)
   1a56c:	1000070e 	bge	r2,zero,1a58c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1a570:	001a4980 	call	1a498 <alt_get_errno>
   1a574:	1007883a 	mov	r3,r2
   1a578:	e0bffe17 	ldw	r2,-8(fp)
   1a57c:	0085c83a 	sub	r2,zero,r2
   1a580:	18800015 	stw	r2,0(r3)
          return -1;
   1a584:	00bfffc4 	movi	r2,-1
   1a588:	00000c06 	br	1a5bc <read+0xe8>
        }
        return rval;
   1a58c:	e0bffe17 	ldw	r2,-8(fp)
   1a590:	00000a06 	br	1a5bc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a594:	001a4980 	call	1a498 <alt_get_errno>
   1a598:	1007883a 	mov	r3,r2
   1a59c:	00800344 	movi	r2,13
   1a5a0:	18800015 	stw	r2,0(r3)
   1a5a4:	00000406 	br	1a5b8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a5a8:	001a4980 	call	1a498 <alt_get_errno>
   1a5ac:	1007883a 	mov	r3,r2
   1a5b0:	00801444 	movi	r2,81
   1a5b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a5b8:	00bfffc4 	movi	r2,-1
}
   1a5bc:	e037883a 	mov	sp,fp
   1a5c0:	dfc00117 	ldw	ra,4(sp)
   1a5c4:	df000017 	ldw	fp,0(sp)
   1a5c8:	dec00204 	addi	sp,sp,8
   1a5cc:	f800283a 	ret

0001a5d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a5d0:	defffe04 	addi	sp,sp,-8
   1a5d4:	df000115 	stw	fp,4(sp)
   1a5d8:	df000104 	addi	fp,sp,4
   1a5dc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a5e0:	e0bfff17 	ldw	r2,-4(fp)
   1a5e4:	108000d0 	cmplti	r2,r2,3
   1a5e8:	10000a1e 	bne	r2,zero,1a614 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a5ec:	e0bfff17 	ldw	r2,-4(fp)
   1a5f0:	10c00324 	muli	r3,r2,12
   1a5f4:	008000b4 	movhi	r2,2
   1a5f8:	1885883a 	add	r2,r3,r2
   1a5fc:	1009fa15 	stw	zero,10216(r2)
    alt_fd_list[fd].dev      = 0;
   1a600:	e0bfff17 	ldw	r2,-4(fp)
   1a604:	10c00324 	muli	r3,r2,12
   1a608:	008000b4 	movhi	r2,2
   1a60c:	1885883a 	add	r2,r3,r2
   1a610:	1009f815 	stw	zero,10208(r2)
  }
}
   1a614:	0001883a 	nop
   1a618:	e037883a 	mov	sp,fp
   1a61c:	df000017 	ldw	fp,0(sp)
   1a620:	dec00104 	addi	sp,sp,4
   1a624:	f800283a 	ret

0001a628 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a628:	defff904 	addi	sp,sp,-28
   1a62c:	df000615 	stw	fp,24(sp)
   1a630:	df000604 	addi	fp,sp,24
   1a634:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   1a638:	0005303a 	rdctl	r2,status
   1a63c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a640:	e0fffd17 	ldw	r3,-12(fp)
   1a644:	00bfff84 	movi	r2,-2
   1a648:	1884703a 	and	r2,r3,r2
   1a64c:	1001703a 	wrctl	status,r2
  return context;
   1a650:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a654:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a658:	d0a00b17 	ldw	r2,-32724(gp)
   1a65c:	10c000c4 	addi	r3,r2,3
   1a660:	00bfff04 	movi	r2,-4
   1a664:	1884703a 	and	r2,r3,r2
   1a668:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a66c:	d0e00b17 	ldw	r3,-32724(gp)
   1a670:	e0bffa17 	ldw	r2,-24(fp)
   1a674:	1887883a 	add	r3,r3,r2
   1a678:	00810034 	movhi	r2,1024
   1a67c:	10800004 	addi	r2,r2,0
   1a680:	10c0072e 	bgeu	r2,r3,1a6a0 <sbrk+0x78>
   1a684:	e0bfff17 	ldw	r2,-4(fp)
   1a688:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1a68c:	e0bffc17 	ldw	r2,-16(fp)
   1a690:	1001703a 	wrctl	status,r2
}
   1a694:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a698:	00bfffc4 	movi	r2,-1
   1a69c:	00000c06 	br	1a6d0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1a6a0:	d0a00b17 	ldw	r2,-32724(gp)
   1a6a4:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   1a6a8:	d0e00b17 	ldw	r3,-32724(gp)
   1a6ac:	e0bffa17 	ldw	r2,-24(fp)
   1a6b0:	1885883a 	add	r2,r3,r2
   1a6b4:	d0a00b15 	stw	r2,-32724(gp)
   1a6b8:	e0bfff17 	ldw	r2,-4(fp)
   1a6bc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   1a6c0:	e0bffb17 	ldw	r2,-20(fp)
   1a6c4:	1001703a 	wrctl	status,r2
}
   1a6c8:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1a6cc:	e0bffe17 	ldw	r2,-8(fp)
} 
   1a6d0:	e037883a 	mov	sp,fp
   1a6d4:	df000017 	ldw	fp,0(sp)
   1a6d8:	dec00104 	addi	sp,sp,4
   1a6dc:	f800283a 	ret

0001a6e0 <alt_get_errno>:
{
   1a6e0:	defffe04 	addi	sp,sp,-8
   1a6e4:	dfc00115 	stw	ra,4(sp)
   1a6e8:	df000015 	stw	fp,0(sp)
   1a6ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a6f0:	d0a00a17 	ldw	r2,-32728(gp)
   1a6f4:	10000326 	beq	r2,zero,1a704 <alt_get_errno+0x24>
   1a6f8:	d0a00a17 	ldw	r2,-32728(gp)
   1a6fc:	103ee83a 	callr	r2
   1a700:	00000106 	br	1a708 <alt_get_errno+0x28>
   1a704:	d0a74504 	addi	r2,gp,-25324
}
   1a708:	e037883a 	mov	sp,fp
   1a70c:	dfc00117 	ldw	ra,4(sp)
   1a710:	df000017 	ldw	fp,0(sp)
   1a714:	dec00204 	addi	sp,sp,8
   1a718:	f800283a 	ret

0001a71c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1a71c:	defff904 	addi	sp,sp,-28
   1a720:	dfc00615 	stw	ra,24(sp)
   1a724:	df000515 	stw	fp,20(sp)
   1a728:	df000504 	addi	fp,sp,20
   1a72c:	e13ffd15 	stw	r4,-12(fp)
   1a730:	e17ffc15 	stw	r5,-16(fp)
   1a734:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a738:	e0bffd17 	ldw	r2,-12(fp)
   1a73c:	10000616 	blt	r2,zero,1a758 <write+0x3c>
   1a740:	e0bffd17 	ldw	r2,-12(fp)
   1a744:	10c00324 	muli	r3,r2,12
   1a748:	008000b4 	movhi	r2,2
   1a74c:	1089f804 	addi	r2,r2,10208
   1a750:	1885883a 	add	r2,r3,r2
   1a754:	00000106 	br	1a75c <write+0x40>
   1a758:	0005883a 	mov	r2,zero
   1a75c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1a760:	e0bfff17 	ldw	r2,-4(fp)
   1a764:	10002126 	beq	r2,zero,1a7ec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1a768:	e0bfff17 	ldw	r2,-4(fp)
   1a76c:	10800217 	ldw	r2,8(r2)
   1a770:	108000cc 	andi	r2,r2,3
   1a774:	10001826 	beq	r2,zero,1a7d8 <write+0xbc>
   1a778:	e0bfff17 	ldw	r2,-4(fp)
   1a77c:	10800017 	ldw	r2,0(r2)
   1a780:	10800617 	ldw	r2,24(r2)
   1a784:	10001426 	beq	r2,zero,1a7d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1a788:	e0bfff17 	ldw	r2,-4(fp)
   1a78c:	10800017 	ldw	r2,0(r2)
   1a790:	10800617 	ldw	r2,24(r2)
   1a794:	e0fffb17 	ldw	r3,-20(fp)
   1a798:	180d883a 	mov	r6,r3
   1a79c:	e17ffc17 	ldw	r5,-16(fp)
   1a7a0:	e13fff17 	ldw	r4,-4(fp)
   1a7a4:	103ee83a 	callr	r2
   1a7a8:	e0bffe15 	stw	r2,-8(fp)
   1a7ac:	e0bffe17 	ldw	r2,-8(fp)
   1a7b0:	1000070e 	bge	r2,zero,1a7d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1a7b4:	001a6e00 	call	1a6e0 <alt_get_errno>
   1a7b8:	1007883a 	mov	r3,r2
   1a7bc:	e0bffe17 	ldw	r2,-8(fp)
   1a7c0:	0085c83a 	sub	r2,zero,r2
   1a7c4:	18800015 	stw	r2,0(r3)
        return -1;
   1a7c8:	00bfffc4 	movi	r2,-1
   1a7cc:	00000c06 	br	1a800 <write+0xe4>
      }
      return rval;
   1a7d0:	e0bffe17 	ldw	r2,-8(fp)
   1a7d4:	00000a06 	br	1a800 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1a7d8:	001a6e00 	call	1a6e0 <alt_get_errno>
   1a7dc:	1007883a 	mov	r3,r2
   1a7e0:	00800344 	movi	r2,13
   1a7e4:	18800015 	stw	r2,0(r3)
   1a7e8:	00000406 	br	1a7fc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1a7ec:	001a6e00 	call	1a6e0 <alt_get_errno>
   1a7f0:	1007883a 	mov	r3,r2
   1a7f4:	00801444 	movi	r2,81
   1a7f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a7fc:	00bfffc4 	movi	r2,-1
}
   1a800:	e037883a 	mov	sp,fp
   1a804:	dfc00117 	ldw	ra,4(sp)
   1a808:	df000017 	ldw	fp,0(sp)
   1a80c:	dec00204 	addi	sp,sp,8
   1a810:	f800283a 	ret

0001a814 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1a814:	defffd04 	addi	sp,sp,-12
   1a818:	dfc00215 	stw	ra,8(sp)
   1a81c:	df000115 	stw	fp,4(sp)
   1a820:	df000104 	addi	fp,sp,4
   1a824:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1a828:	d1600704 	addi	r5,gp,-32740
   1a82c:	e13fff17 	ldw	r4,-4(fp)
   1a830:	001fcec0 	call	1fcec <alt_dev_llist_insert>
}
   1a834:	e037883a 	mov	sp,fp
   1a838:	dfc00117 	ldw	ra,4(sp)
   1a83c:	df000017 	ldw	fp,0(sp)
   1a840:	dec00204 	addi	sp,sp,8
   1a844:	f800283a 	ret

0001a848 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1a848:	defffd04 	addi	sp,sp,-12
   1a84c:	dfc00215 	stw	ra,8(sp)
   1a850:	df000115 	stw	fp,4(sp)
   1a854:	df000104 	addi	fp,sp,4
   1a858:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1a85c:	00205e40 	call	205e4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1a860:	00800044 	movi	r2,1
   1a864:	1001703a 	wrctl	status,r2
}
   1a868:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   1a86c:	0001883a 	nop
   1a870:	e037883a 	mov	sp,fp
   1a874:	dfc00117 	ldw	ra,4(sp)
   1a878:	df000017 	ldw	fp,0(sp)
   1a87c:	dec00204 	addi	sp,sp,8
   1a880:	f800283a 	ret

0001a884 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1a884:	defffe04 	addi	sp,sp,-8
   1a888:	dfc00115 	stw	ra,4(sp)
   1a88c:	df000015 	stw	fp,0(sp)
   1a890:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1a894:	01c00204 	movi	r7,8
   1a898:	000d883a 	mov	r6,zero
   1a89c:	000b883a 	mov	r5,zero
   1a8a0:	013fc834 	movhi	r4,65312
   1a8a4:	21080004 	addi	r4,r4,8192
   1a8a8:	001f2280 	call	1f228 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1a8ac:	01800204 	movi	r6,8
   1a8b0:	000b883a 	mov	r5,zero
   1a8b4:	010000b4 	movhi	r4,2
   1a8b8:	210a6204 	addi	r4,r4,10632
   1a8bc:	001e8a00 	call	1e8a0 <altera_avalon_jtag_uart_init>
   1a8c0:	010000b4 	movhi	r4,2
   1a8c4:	210a5804 	addi	r4,r4,10592
   1a8c8:	001a8140 	call	1a814 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1a8cc:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1a8d0:	010000b4 	movhi	r4,2
   1a8d4:	210e7004 	addi	r4,r4,14784
   1a8d8:	001a8140 	call	1a814 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1a8dc:	010000b4 	movhi	r4,2
   1a8e0:	210e7c04 	addi	r4,r4,14832
   1a8e4:	001a8140 	call	1a814 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1a8e8:	010000b4 	movhi	r4,2
   1a8ec:	210e8804 	addi	r4,r4,14880
   1a8f0:	001f3580 	call	1f358 <alt_up_character_lcd_init>
   1a8f4:	010000b4 	movhi	r4,2
   1a8f8:	210e8804 	addi	r4,r4,14880
   1a8fc:	001a8140 	call	1a814 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1a900:	010000b4 	movhi	r4,2
   1a904:	210e9304 	addi	r4,r4,14924
   1a908:	001a8140 	call	1a814 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1a90c:	010000b4 	movhi	r4,2
   1a910:	210e9e04 	addi	r4,r4,14968
   1a914:	001a8140 	call	1a814 <alt_dev_reg>
}
   1a918:	0001883a 	nop
   1a91c:	e037883a 	mov	sp,fp
   1a920:	dfc00117 	ldw	ra,4(sp)
   1a924:	df000017 	ldw	fp,0(sp)
   1a928:	dec00204 	addi	sp,sp,8
   1a92c:	f800283a 	ret

0001a930 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   1a930:	defffa04 	addi	sp,sp,-24
   1a934:	dfc00515 	stw	ra,20(sp)
   1a938:	df000415 	stw	fp,16(sp)
   1a93c:	df000404 	addi	fp,sp,16
   1a940:	e13ffd15 	stw	r4,-12(fp)
   1a944:	e17ffc15 	stw	r5,-16(fp)
    bool result = false;
   1a948:	e03fff15 	stw	zero,-4(fp)
    
    if (alt_up_sd_card_is_Present())
   1a94c:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1a950:	10001e26 	beq	r2,zero,1a9cc <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
   1a954:	00803fc4 	movi	r2,255
   1a958:	e0bffe8d 	sth	r2,-6(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1a95c:	d0a75017 	ldw	r2,-25280(gp)
   1a960:	e13ffd17 	ldw	r4,-12(fp)
   1a964:	e0fffc17 	ldw	r3,-16(fp)
   1a968:	20c7883a 	add	r3,r4,r3
   1a96c:	1806927a 	slli	r3,r3,9
   1a970:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
   1a974:	d0a74f17 	ldw	r2,-25284(gp)
   1a978:	00c00604 	movi	r3,24
   1a97c:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1a980:	d0a74c17 	ldw	r2,-25296(gp)
   1a984:	1080002b 	ldhuio	r2,0(r2)
   1a988:	10bfffcc 	andi	r2,r2,65535
   1a98c:	e0bffe8d 	sth	r2,-6(fp)
        } while ((reg_state & 0x04)!=0);
   1a990:	e0bffe8b 	ldhu	r2,-6(fp)
   1a994:	10bfffcc 	andi	r2,r2,65535
   1a998:	1080010c 	andi	r2,r2,4
   1a99c:	103ff81e 	bne	r2,zero,1a980 <Write_Sector_Data+0x50>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   1a9a0:	e0bffe8b 	ldhu	r2,-6(fp)
   1a9a4:	10bfffcc 	andi	r2,r2,65535
   1a9a8:	1080040c 	andi	r2,r2,16
   1a9ac:	1000071e 	bne	r2,zero,1a9cc <Write_Sector_Data+0x9c>
        {
            result = true;
   1a9b0:	00800044 	movi	r2,1
   1a9b4:	e0bfff15 	stw	r2,-4(fp)
            current_sector_modified = false;
   1a9b8:	d0275515 	stw	zero,-25260(gp)
            current_sector_index = sector_index+partition_offset;
   1a9bc:	e0fffd17 	ldw	r3,-12(fp)
   1a9c0:	e0bffc17 	ldw	r2,-16(fp)
   1a9c4:	1885883a 	add	r2,r3,r2
   1a9c8:	d0a75615 	stw	r2,-25256(gp)
        }
    }
    return result;
   1a9cc:	e0bfff17 	ldw	r2,-4(fp)
}
   1a9d0:	e037883a 	mov	sp,fp
   1a9d4:	dfc00117 	ldw	ra,4(sp)
   1a9d8:	df000017 	ldw	fp,0(sp)
   1a9dc:	dec00204 	addi	sp,sp,8
   1a9e0:	f800283a 	ret

0001a9e4 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   1a9e4:	defffd04 	addi	sp,sp,-12
   1a9e8:	dfc00215 	stw	ra,8(sp)
   1a9ec:	df000115 	stw	fp,4(sp)
   1a9f0:	df000104 	addi	fp,sp,4
    bool result = true;
   1a9f4:	00800044 	movi	r2,1
   1a9f8:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   1a9fc:	d0a75517 	ldw	r2,-25260(gp)
   1aa00:	10000526 	beq	r2,zero,1aa18 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   1aa04:	d0a75617 	ldw	r2,-25256(gp)
   1aa08:	000b883a 	mov	r5,zero
   1aa0c:	1009883a 	mov	r4,r2
   1aa10:	001a9300 	call	1a930 <Write_Sector_Data>
   1aa14:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1aa18:	e0bfff17 	ldw	r2,-4(fp)
}
   1aa1c:	e037883a 	mov	sp,fp
   1aa20:	dfc00117 	ldw	ra,4(sp)
   1aa24:	df000017 	ldw	fp,0(sp)
   1aa28:	dec00204 	addi	sp,sp,8
   1aa2c:	f800283a 	ret

0001aa30 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   1aa30:	defffa04 	addi	sp,sp,-24
   1aa34:	dfc00515 	stw	ra,20(sp)
   1aa38:	df000415 	stw	fp,16(sp)
   1aa3c:	df000404 	addi	fp,sp,16
   1aa40:	e13ffd15 	stw	r4,-12(fp)
   1aa44:	e17ffc15 	stw	r5,-16(fp)
	bool result = false;
   1aa48:	e03fff15 	stw	zero,-4(fp)
    
	if (alt_up_sd_card_is_Present())
   1aa4c:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1aa50:	10002726 	beq	r2,zero,1aaf0 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
   1aa54:	00803fc4 	movi	r2,255
   1aa58:	e0bffe8d 	sth	r2,-6(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   1aa5c:	d0a75517 	ldw	r2,-25260(gp)
   1aa60:	10000726 	beq	r2,zero,1aa80 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   1aa64:	d0a75617 	ldw	r2,-25256(gp)
   1aa68:	000b883a 	mov	r5,zero
   1aa6c:	1009883a 	mov	r4,r2
   1aa70:	001a9300 	call	1a930 <Write_Sector_Data>
   1aa74:	1000021e 	bne	r2,zero,1aa80 <Read_Sector_Data+0x50>
            {
                return false;
   1aa78:	0005883a 	mov	r2,zero
   1aa7c:	00001d06 	br	1aaf4 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1aa80:	d0a75017 	ldw	r2,-25280(gp)
   1aa84:	e13ffd17 	ldw	r4,-12(fp)
   1aa88:	e0fffc17 	ldw	r3,-16(fp)
   1aa8c:	20c7883a 	add	r3,r4,r3
   1aa90:	1806927a 	slli	r3,r3,9
   1aa94:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
   1aa98:	d0a74f17 	ldw	r2,-25284(gp)
   1aa9c:	00c00444 	movi	r3,17
   1aaa0:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1aaa4:	d0a74c17 	ldw	r2,-25296(gp)
   1aaa8:	1080002b 	ldhuio	r2,0(r2)
   1aaac:	10bfffcc 	andi	r2,r2,65535
   1aab0:	e0bffe8d 	sth	r2,-6(fp)
		} while ((reg_state & 0x04)!=0);
   1aab4:	e0bffe8b 	ldhu	r2,-6(fp)
   1aab8:	10bfffcc 	andi	r2,r2,65535
   1aabc:	1080010c 	andi	r2,r2,4
   1aac0:	103ff81e 	bne	r2,zero,1aaa4 <Read_Sector_Data+0x74>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   1aac4:	e0bffe8b 	ldhu	r2,-6(fp)
   1aac8:	10bfffcc 	andi	r2,r2,65535
   1aacc:	1080040c 	andi	r2,r2,16
   1aad0:	1000071e 	bne	r2,zero,1aaf0 <Read_Sector_Data+0xc0>
		{
			result = true;
   1aad4:	00800044 	movi	r2,1
   1aad8:	e0bfff15 	stw	r2,-4(fp)
            current_sector_modified = false;
   1aadc:	d0275515 	stw	zero,-25260(gp)
            current_sector_index = sector_index+partition_offset;
   1aae0:	e0fffd17 	ldw	r3,-12(fp)
   1aae4:	e0bffc17 	ldw	r2,-16(fp)
   1aae8:	1885883a 	add	r2,r3,r2
   1aaec:	d0a75615 	stw	r2,-25256(gp)
		}
	}
	return result;
   1aaf0:	e0bfff17 	ldw	r2,-4(fp)
}
   1aaf4:	e037883a 	mov	sp,fp
   1aaf8:	dfc00117 	ldw	ra,4(sp)
   1aafc:	df000017 	ldw	fp,0(sp)
   1ab00:	dec00204 	addi	sp,sp,8
   1ab04:	f800283a 	ret

0001ab08 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   1ab08:	defffb04 	addi	sp,sp,-20
   1ab0c:	dfc00415 	stw	ra,16(sp)
   1ab10:	df000315 	stw	fp,12(sp)
   1ab14:	df000304 	addi	fp,sp,12
   1ab18:	e13ffe15 	stw	r4,-8(fp)
   1ab1c:	e17ffd15 	stw	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   1ab20:	e0bffe17 	ldw	r2,-8(fp)
   1ab24:	1004d23a 	srli	r2,r2,8
   1ab28:	d0e75217 	ldw	r3,-25272(gp)
   1ab2c:	10c5883a 	add	r2,r2,r3
   1ab30:	e0bfff15 	stw	r2,-4(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1ab34:	008000b4 	movhi	r2,2
   1ab38:	10962017 	ldw	r2,22656(r2)
   1ab3c:	e0ffff17 	ldw	r3,-4(fp)
   1ab40:	1885883a 	add	r2,r3,r2
   1ab44:	e0bfff15 	stw	r2,-4(fp)
     
    if (sector_index != current_sector_index)
   1ab48:	d0a75617 	ldw	r2,-25256(gp)
   1ab4c:	e0ffff17 	ldw	r3,-4(fp)
   1ab50:	18800726 	beq	r3,r2,1ab70 <get_cluster_flag+0x68>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1ab54:	e0bfff17 	ldw	r2,-4(fp)
   1ab58:	000b883a 	mov	r5,zero
   1ab5c:	1009883a 	mov	r4,r2
   1ab60:	001aa300 	call	1aa30 <Read_Sector_Data>
   1ab64:	1000021e 	bne	r2,zero,1ab70 <get_cluster_flag+0x68>
        {
            return false;
   1ab68:	0005883a 	mov	r2,zero
   1ab6c:	00000d06 	br	1aba4 <get_cluster_flag+0x9c>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
   1ab70:	e0bffe17 	ldw	r2,-8(fp)
   1ab74:	10803fcc 	andi	r2,r2,255
   1ab78:	1085883a 	add	r2,r2,r2
   1ab7c:	1007883a 	mov	r3,r2
   1ab80:	d0a75417 	ldw	r2,-25264(gp)
   1ab84:	10800a17 	ldw	r2,40(r2)
   1ab88:	1885883a 	add	r2,r3,r2
   1ab8c:	1080002b 	ldhuio	r2,0(r2)
   1ab90:	10bfffcc 	andi	r2,r2,65535
   1ab94:	1007883a 	mov	r3,r2
   1ab98:	e0bffd17 	ldw	r2,-12(fp)
   1ab9c:	10c0000d 	sth	r3,0(r2)
    return true;
   1aba0:	00800044 	movi	r2,1
}
   1aba4:	e037883a 	mov	sp,fp
   1aba8:	dfc00117 	ldw	ra,4(sp)
   1abac:	df000017 	ldw	fp,0(sp)
   1abb0:	dec00204 	addi	sp,sp,8
   1abb4:	f800283a 	ret

0001abb8 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   1abb8:	defffa04 	addi	sp,sp,-24
   1abbc:	dfc00515 	stw	ra,20(sp)
   1abc0:	df000415 	stw	fp,16(sp)
   1abc4:	df000404 	addi	fp,sp,16
   1abc8:	e13ffe15 	stw	r4,-8(fp)
   1abcc:	2805883a 	mov	r2,r5
   1abd0:	e1bffc15 	stw	r6,-16(fp)
   1abd4:	e0bffd0d 	sth	r2,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   1abd8:	e0bffe17 	ldw	r2,-8(fp)
   1abdc:	1004d23a 	srli	r2,r2,8
   1abe0:	d0e75217 	ldw	r3,-25272(gp)
   1abe4:	10c5883a 	add	r2,r2,r3
   1abe8:	e0bfff15 	stw	r2,-4(fp)
    
    if (first_fat)
   1abec:	e0bffc17 	ldw	r2,-16(fp)
   1abf0:	10000626 	beq	r2,zero,1ac0c <mark_cluster+0x54>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1abf4:	008000b4 	movhi	r2,2
   1abf8:	10962017 	ldw	r2,22656(r2)
   1abfc:	e0ffff17 	ldw	r3,-4(fp)
   1ac00:	1885883a 	add	r2,r3,r2
   1ac04:	e0bfff15 	stw	r2,-4(fp)
   1ac08:	00000506 	br	1ac20 <mark_cluster+0x68>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   1ac0c:	008000b4 	movhi	r2,2
   1ac10:	10962117 	ldw	r2,22660(r2)
   1ac14:	e0ffff17 	ldw	r3,-4(fp)
   1ac18:	1885883a 	add	r2,r3,r2
   1ac1c:	e0bfff15 	stw	r2,-4(fp)
    }
     
    if (sector_index != current_sector_index)
   1ac20:	d0a75617 	ldw	r2,-25256(gp)
   1ac24:	e0ffff17 	ldw	r3,-4(fp)
   1ac28:	18800726 	beq	r3,r2,1ac48 <mark_cluster+0x90>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1ac2c:	e0bfff17 	ldw	r2,-4(fp)
   1ac30:	000b883a 	mov	r5,zero
   1ac34:	1009883a 	mov	r4,r2
   1ac38:	001aa300 	call	1aa30 <Read_Sector_Data>
   1ac3c:	1000021e 	bne	r2,zero,1ac48 <mark_cluster+0x90>
        {
            return false;
   1ac40:	0005883a 	mov	r2,zero
   1ac44:	00000d06 	br	1ac7c <mark_cluster+0xc4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
   1ac48:	e0bffe17 	ldw	r2,-8(fp)
   1ac4c:	10803fcc 	andi	r2,r2,255
   1ac50:	1085883a 	add	r2,r2,r2
   1ac54:	1007883a 	mov	r3,r2
   1ac58:	d0a75417 	ldw	r2,-25264(gp)
   1ac5c:	10800a17 	ldw	r2,40(r2)
   1ac60:	1885883a 	add	r2,r3,r2
   1ac64:	1007883a 	mov	r3,r2
   1ac68:	e0bffd0f 	ldh	r2,-12(fp)
   1ac6c:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
   1ac70:	00800044 	movi	r2,1
   1ac74:	d0a75515 	stw	r2,-25260(gp)
    return true;
   1ac78:	00800044 	movi	r2,1
}
   1ac7c:	e037883a 	mov	sp,fp
   1ac80:	dfc00117 	ldw	ra,4(sp)
   1ac84:	df000017 	ldw	fp,0(sp)
   1ac88:	dec00204 	addi	sp,sp,8
   1ac8c:	f800283a 	ret

0001ac90 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   1ac90:	defff704 	addi	sp,sp,-36
   1ac94:	dfc00815 	stw	ra,32(sp)
   1ac98:	df000715 	stw	fp,28(sp)
   1ac9c:	df000704 	addi	fp,sp,28
	bool result = false;
   1aca0:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   1aca4:	000b883a 	mov	r5,zero
   1aca8:	0009883a 	mov	r4,zero
   1acac:	001aa300 	call	1aa30 <Read_Sector_Data>
   1acb0:	10005c26 	beq	r2,zero,1ae24 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
   1acb4:	d0a75417 	ldw	r2,-25264(gp)
   1acb8:	10800a17 	ldw	r2,40(r2)
   1acbc:	10807f84 	addi	r2,r2,510
   1acc0:	1080002b 	ldhuio	r2,0(r2)
   1acc4:	10bfffcc 	andi	r2,r2,65535
   1acc8:	10bfffcc 	andi	r2,r2,65535
   1accc:	10a0001c 	xori	r2,r2,32768
   1acd0:	10a00004 	addi	r2,r2,-32768
   1acd4:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   1acd8:	e0bffd17 	ldw	r2,-12(fp)
   1acdc:	10ffffcc 	andi	r3,r2,65535
   1ace0:	00aa9554 	movui	r2,43605
   1ace4:	18804f1e 	bne	r3,r2,1ae24 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   1ace8:	e03ffe15 	stw	zero,-8(fp)
   1acec:	00004a06 	br	1ae18 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   1acf0:	e0bffe17 	ldw	r2,-8(fp)
   1acf4:	1004913a 	slli	r2,r2,4
   1acf8:	10806f84 	addi	r2,r2,446
   1acfc:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
   1ad00:	d0a75417 	ldw	r2,-25264(gp)
   1ad04:	10c00a17 	ldw	r3,40(r2)
   1ad08:	e0bffc17 	ldw	r2,-16(fp)
   1ad0c:	1885883a 	add	r2,r3,r2
   1ad10:	10800104 	addi	r2,r2,4
   1ad14:	10800023 	ldbuio	r2,0(r2)
   1ad18:	10803fcc 	andi	r2,r2,255
   1ad1c:	e0bffbc5 	stb	r2,-17(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   1ad20:	e0bffbc7 	ldb	r2,-17(fp)
   1ad24:	10800060 	cmpeqi	r2,r2,1
   1ad28:	1000091e 	bne	r2,zero,1ad50 <Check_for_Master_Boot_Record+0xc0>
   1ad2c:	e0bffbc7 	ldb	r2,-17(fp)
   1ad30:	10800120 	cmpeqi	r2,r2,4
   1ad34:	1000061e 	bne	r2,zero,1ad50 <Check_for_Master_Boot_Record+0xc0>
   1ad38:	e0bffbc7 	ldb	r2,-17(fp)
   1ad3c:	108001a0 	cmpeqi	r2,r2,6
   1ad40:	1000031e 	bne	r2,zero,1ad50 <Check_for_Master_Boot_Record+0xc0>
   1ad44:	e0bffbc7 	ldb	r2,-17(fp)
   1ad48:	10800398 	cmpnei	r2,r2,14
   1ad4c:	10002f1e 	bne	r2,zero,1ae0c <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
   1ad50:	d0a75417 	ldw	r2,-25264(gp)
   1ad54:	10c00a17 	ldw	r3,40(r2)
   1ad58:	e0bffc17 	ldw	r2,-16(fp)
   1ad5c:	1885883a 	add	r2,r3,r2
   1ad60:	10800284 	addi	r2,r2,10
   1ad64:	1080002b 	ldhuio	r2,0(r2)
   1ad68:	10bfffcc 	andi	r2,r2,65535
   1ad6c:	10bfffcc 	andi	r2,r2,65535
   1ad70:	1006943a 	slli	r3,r2,16
   1ad74:	d0a75417 	ldw	r2,-25264(gp)
   1ad78:	11000a17 	ldw	r4,40(r2)
   1ad7c:	e0bffc17 	ldw	r2,-16(fp)
   1ad80:	2085883a 	add	r2,r4,r2
   1ad84:	10800204 	addi	r2,r2,8
   1ad88:	1080002b 	ldhuio	r2,0(r2)
   1ad8c:	10bfffcc 	andi	r2,r2,65535
   1ad90:	10bfffcc 	andi	r2,r2,65535
   1ad94:	1884b03a 	or	r2,r3,r2
   1ad98:	e0bffa15 	stw	r2,-24(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
   1ad9c:	d0a75417 	ldw	r2,-25264(gp)
   1ada0:	10c00a17 	ldw	r3,40(r2)
   1ada4:	e0bffc17 	ldw	r2,-16(fp)
   1ada8:	1885883a 	add	r2,r3,r2
   1adac:	10800384 	addi	r2,r2,14
   1adb0:	1080002b 	ldhuio	r2,0(r2)
   1adb4:	10bfffcc 	andi	r2,r2,65535
   1adb8:	10bfffcc 	andi	r2,r2,65535
   1adbc:	1006943a 	slli	r3,r2,16
   1adc0:	d0a75417 	ldw	r2,-25264(gp)
   1adc4:	11000a17 	ldw	r4,40(r2)
   1adc8:	e0bffc17 	ldw	r2,-16(fp)
   1adcc:	2085883a 	add	r2,r4,r2
   1add0:	10800304 	addi	r2,r2,12
   1add4:	1080002b 	ldhuio	r2,0(r2)
   1add8:	10bfffcc 	andi	r2,r2,65535
   1addc:	10bfffcc 	andi	r2,r2,65535
   1ade0:	1884b03a 	or	r2,r3,r2
   1ade4:	e0bff915 	stw	r2,-28(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   1ade8:	e0bff917 	ldw	r2,-28(fp)
   1adec:	0080070e 	bge	zero,r2,1ae0c <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
   1adf0:	00800044 	movi	r2,1
   1adf4:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   1adf8:	e0bff917 	ldw	r2,-28(fp)
   1adfc:	d0a75315 	stw	r2,-25268(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   1ae00:	e0bffa17 	ldw	r2,-24(fp)
   1ae04:	d0a75215 	stw	r2,-25272(gp)
						break;
   1ae08:	00000606 	br	1ae24 <Check_for_Master_Boot_Record+0x194>
			for (index = 0; index < 4; index++)
   1ae0c:	e0bffe17 	ldw	r2,-8(fp)
   1ae10:	10800044 	addi	r2,r2,1
   1ae14:	e0bffe15 	stw	r2,-8(fp)
   1ae18:	e0bffe17 	ldw	r2,-8(fp)
   1ae1c:	10800110 	cmplti	r2,r2,4
   1ae20:	103fb31e 	bne	r2,zero,1acf0 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
   1ae24:	e0bfff17 	ldw	r2,-4(fp)
}
   1ae28:	e037883a 	mov	sp,fp
   1ae2c:	dfc00117 	ldw	ra,4(sp)
   1ae30:	df000017 	ldw	fp,0(sp)
   1ae34:	dec00204 	addi	sp,sp,8
   1ae38:	f800283a 	ret

0001ae3c <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   1ae3c:	defff804 	addi	sp,sp,-32
   1ae40:	dfc00715 	stw	ra,28(sp)
   1ae44:	df000615 	stw	fp,24(sp)
   1ae48:	df000604 	addi	fp,sp,24
   1ae4c:	e13ffd15 	stw	r4,-12(fp)
   1ae50:	e17ffc15 	stw	r5,-16(fp)
   1ae54:	e1bffb15 	stw	r6,-20(fp)
   1ae58:	e1fffa15 	stw	r7,-24(fp)
	bool result = false;
   1ae5c:	e03fff15 	stw	zero,-4(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1ae60:	e0bffd17 	ldw	r2,-12(fp)
   1ae64:	108007cc 	andi	r2,r2,31
   1ae68:	10008c1e 	bne	r2,zero,1b09c <Read_File_Record_At_Offset+0x260>
   1ae6c:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1ae70:	10008a26 	beq	r2,zero,1b09c <Read_File_Record_At_Offset+0x260>
   1ae74:	d0a74b17 	ldw	r2,-25300(gp)
   1ae78:	10008826 	beq	r2,zero,1b09c <Read_File_Record_At_Offset+0x260>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   1ae7c:	e03ffe15 	stw	zero,-8(fp)
   1ae80:	00001106 	br	1aec8 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
   1ae84:	e0fffd17 	ldw	r3,-12(fp)
   1ae88:	e0bffe17 	ldw	r2,-8(fp)
   1ae8c:	1885883a 	add	r2,r3,r2
   1ae90:	1007883a 	mov	r3,r2
   1ae94:	d0a75417 	ldw	r2,-25264(gp)
   1ae98:	10800a17 	ldw	r2,40(r2)
   1ae9c:	1885883a 	add	r2,r3,r2
   1aea0:	10800023 	ldbuio	r2,0(r2)
   1aea4:	10803fcc 	andi	r2,r2,255
   1aea8:	1009883a 	mov	r4,r2
   1aeac:	e0fffc17 	ldw	r3,-16(fp)
   1aeb0:	e0bffe17 	ldw	r2,-8(fp)
   1aeb4:	1885883a 	add	r2,r3,r2
   1aeb8:	11000005 	stb	r4,0(r2)
		for (counter = 0; counter < 8; counter++)
   1aebc:	e0bffe17 	ldw	r2,-8(fp)
   1aec0:	10800044 	addi	r2,r2,1
   1aec4:	e0bffe15 	stw	r2,-8(fp)
   1aec8:	e0bffe17 	ldw	r2,-8(fp)
   1aecc:	10800210 	cmplti	r2,r2,8
   1aed0:	103fec1e 	bne	r2,zero,1ae84 <Read_File_Record_At_Offset+0x48>
		}        
		for (counter = 0; counter < 3; counter++)
   1aed4:	e03ffe15 	stw	zero,-8(fp)
   1aed8:	00001206 	br	1af24 <Read_File_Record_At_Offset+0xe8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
   1aedc:	e0fffd17 	ldw	r3,-12(fp)
   1aee0:	e0bffe17 	ldw	r2,-8(fp)
   1aee4:	1885883a 	add	r2,r3,r2
   1aee8:	1007883a 	mov	r3,r2
   1aeec:	d0a75417 	ldw	r2,-25264(gp)
   1aef0:	10800a17 	ldw	r2,40(r2)
   1aef4:	1885883a 	add	r2,r3,r2
   1aef8:	10800204 	addi	r2,r2,8
   1aefc:	10800023 	ldbuio	r2,0(r2)
   1af00:	10803fcc 	andi	r2,r2,255
   1af04:	1009883a 	mov	r4,r2
   1af08:	e0fffc17 	ldw	r3,-16(fp)
   1af0c:	e0bffe17 	ldw	r2,-8(fp)
   1af10:	1885883a 	add	r2,r3,r2
   1af14:	11000205 	stb	r4,8(r2)
		for (counter = 0; counter < 3; counter++)
   1af18:	e0bffe17 	ldw	r2,-8(fp)
   1af1c:	10800044 	addi	r2,r2,1
   1af20:	e0bffe15 	stw	r2,-8(fp)
   1af24:	e0bffe17 	ldw	r2,-8(fp)
   1af28:	108000d0 	cmplti	r2,r2,3
   1af2c:	103feb1e 	bne	r2,zero,1aedc <Read_File_Record_At_Offset+0xa0>
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
   1af30:	d0a75417 	ldw	r2,-25264(gp)
   1af34:	10c00a17 	ldw	r3,40(r2)
   1af38:	e0bffd17 	ldw	r2,-12(fp)
   1af3c:	1885883a 	add	r2,r3,r2
   1af40:	108002c4 	addi	r2,r2,11
   1af44:	10800023 	ldbuio	r2,0(r2)
   1af48:	10803fcc 	andi	r2,r2,255
   1af4c:	1007883a 	mov	r3,r2
   1af50:	e0bffc17 	ldw	r2,-16(fp)
   1af54:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
   1af58:	d0a75417 	ldw	r2,-25264(gp)
   1af5c:	10c00a17 	ldw	r3,40(r2)
   1af60:	e0bffd17 	ldw	r2,-12(fp)
   1af64:	1885883a 	add	r2,r3,r2
   1af68:	10800384 	addi	r2,r2,14
   1af6c:	1080002b 	ldhuio	r2,0(r2)
   1af70:	10bfffcc 	andi	r2,r2,65535
   1af74:	1007883a 	mov	r3,r2
   1af78:	e0bffc17 	ldw	r2,-16(fp)
   1af7c:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
   1af80:	d0a75417 	ldw	r2,-25264(gp)
   1af84:	10c00a17 	ldw	r3,40(r2)
   1af88:	e0bffd17 	ldw	r2,-12(fp)
   1af8c:	1885883a 	add	r2,r3,r2
   1af90:	10800404 	addi	r2,r2,16
   1af94:	1080002b 	ldhuio	r2,0(r2)
   1af98:	10bfffcc 	andi	r2,r2,65535
   1af9c:	1007883a 	mov	r3,r2
   1afa0:	e0bffc17 	ldw	r2,-16(fp)
   1afa4:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
   1afa8:	d0a75417 	ldw	r2,-25264(gp)
   1afac:	10c00a17 	ldw	r3,40(r2)
   1afb0:	e0bffd17 	ldw	r2,-12(fp)
   1afb4:	1885883a 	add	r2,r3,r2
   1afb8:	10800484 	addi	r2,r2,18
   1afbc:	1080002b 	ldhuio	r2,0(r2)
   1afc0:	10bfffcc 	andi	r2,r2,65535
   1afc4:	1007883a 	mov	r3,r2
   1afc8:	e0bffc17 	ldw	r2,-16(fp)
   1afcc:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
   1afd0:	d0a75417 	ldw	r2,-25264(gp)
   1afd4:	10c00a17 	ldw	r3,40(r2)
   1afd8:	e0bffd17 	ldw	r2,-12(fp)
   1afdc:	1885883a 	add	r2,r3,r2
   1afe0:	10800584 	addi	r2,r2,22
   1afe4:	1080002b 	ldhuio	r2,0(r2)
   1afe8:	10bfffcc 	andi	r2,r2,65535
   1afec:	1007883a 	mov	r3,r2
   1aff0:	e0bffc17 	ldw	r2,-16(fp)
   1aff4:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
   1aff8:	d0a75417 	ldw	r2,-25264(gp)
   1affc:	10c00a17 	ldw	r3,40(r2)
   1b000:	e0bffd17 	ldw	r2,-12(fp)
   1b004:	1885883a 	add	r2,r3,r2
   1b008:	10800604 	addi	r2,r2,24
   1b00c:	1080002b 	ldhuio	r2,0(r2)
   1b010:	10bfffcc 	andi	r2,r2,65535
   1b014:	1007883a 	mov	r3,r2
   1b018:	e0bffc17 	ldw	r2,-16(fp)
   1b01c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
   1b020:	d0a75417 	ldw	r2,-25264(gp)
   1b024:	10c00a17 	ldw	r3,40(r2)
   1b028:	e0bffd17 	ldw	r2,-12(fp)
   1b02c:	1885883a 	add	r2,r3,r2
   1b030:	10800684 	addi	r2,r2,26
   1b034:	1080002b 	ldhuio	r2,0(r2)
   1b038:	10bfffcc 	andi	r2,r2,65535
   1b03c:	1007883a 	mov	r3,r2
   1b040:	e0bffc17 	ldw	r2,-16(fp)
   1b044:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
   1b048:	d0a75417 	ldw	r2,-25264(gp)
   1b04c:	10c00a17 	ldw	r3,40(r2)
   1b050:	e0bffd17 	ldw	r2,-12(fp)
   1b054:	1885883a 	add	r2,r3,r2
   1b058:	10800704 	addi	r2,r2,28
   1b05c:	10800037 	ldwio	r2,0(r2)
   1b060:	1007883a 	mov	r3,r2
   1b064:	e0bffc17 	ldw	r2,-16(fp)
   1b068:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   1b06c:	e0bffc17 	ldw	r2,-16(fp)
   1b070:	e0fffb17 	ldw	r3,-20(fp)
   1b074:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
   1b078:	e0bffc17 	ldw	r2,-16(fp)
   1b07c:	e0fffa17 	ldw	r3,-24(fp)
   1b080:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
   1b084:	e0bffd17 	ldw	r2,-12(fp)
   1b088:	1007883a 	mov	r3,r2
   1b08c:	e0bffc17 	ldw	r2,-16(fp)
   1b090:	10c00c0d 	sth	r3,48(r2)
		result = true;
   1b094:	00800044 	movi	r2,1
   1b098:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
   1b09c:	e0bfff17 	ldw	r2,-4(fp)
}
   1b0a0:	e037883a 	mov	sp,fp
   1b0a4:	dfc00117 	ldw	ra,4(sp)
   1b0a8:	df000017 	ldw	fp,0(sp)
   1b0ac:	dec00204 	addi	sp,sp,8
   1b0b0:	f800283a 	ret

0001b0b4 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   1b0b4:	defff904 	addi	sp,sp,-28
   1b0b8:	dfc00615 	stw	ra,24(sp)
   1b0bc:	df000515 	stw	fp,20(sp)
   1b0c0:	df000504 	addi	fp,sp,20
   1b0c4:	e13ffc15 	stw	r4,-16(fp)
   1b0c8:	e17ffb15 	stw	r5,-20(fp)
    bool result = false;
   1b0cc:	e03fff15 	stw	zero,-4(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1b0d0:	e0bffc17 	ldw	r2,-16(fp)
   1b0d4:	108007cc 	andi	r2,r2,31
   1b0d8:	1000921e 	bne	r2,zero,1b324 <Write_File_Record_At_Offset+0x270>
   1b0dc:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1b0e0:	10009026 	beq	r2,zero,1b324 <Write_File_Record_At_Offset+0x270>
   1b0e4:	d0a74b17 	ldw	r2,-25300(gp)
   1b0e8:	10008e26 	beq	r2,zero,1b324 <Write_File_Record_At_Offset+0x270>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1b0ec:	e03ffe15 	stw	zero,-8(fp)
   1b0f0:	00001f06 	br	1b170 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
   1b0f4:	e0bffe17 	ldw	r2,-8(fp)
   1b0f8:	10800044 	addi	r2,r2,1
   1b0fc:	e0fffb17 	ldw	r3,-20(fp)
   1b100:	1885883a 	add	r2,r3,r2
   1b104:	10800003 	ldbu	r2,0(r2)
   1b108:	10803fcc 	andi	r2,r2,255
   1b10c:	e0bffd8d 	sth	r2,-10(fp)
            two_chars = two_chars << 8;
   1b110:	e0bffd8f 	ldh	r2,-10(fp)
   1b114:	1004923a 	slli	r2,r2,8
   1b118:	e0bffd8d 	sth	r2,-10(fp)
            two_chars = two_chars | record->name[counter];
   1b11c:	e0fffb17 	ldw	r3,-20(fp)
   1b120:	e0bffe17 	ldw	r2,-8(fp)
   1b124:	1885883a 	add	r2,r3,r2
   1b128:	10800003 	ldbu	r2,0(r2)
   1b12c:	10803fcc 	andi	r2,r2,255
   1b130:	e0fffd8b 	ldhu	r3,-10(fp)
   1b134:	1884b03a 	or	r2,r3,r2
   1b138:	e0bffd8d 	sth	r2,-10(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
   1b13c:	e0fffc17 	ldw	r3,-16(fp)
   1b140:	e0bffe17 	ldw	r2,-8(fp)
   1b144:	1885883a 	add	r2,r3,r2
   1b148:	1007883a 	mov	r3,r2
   1b14c:	d0a75417 	ldw	r2,-25264(gp)
   1b150:	10800a17 	ldw	r2,40(r2)
   1b154:	1885883a 	add	r2,r3,r2
   1b158:	1007883a 	mov	r3,r2
   1b15c:	e0bffd8f 	ldh	r2,-10(fp)
   1b160:	1880002d 	sthio	r2,0(r3)
        for (counter = 0; counter < 8; counter=counter+2)
   1b164:	e0bffe17 	ldw	r2,-8(fp)
   1b168:	10800084 	addi	r2,r2,2
   1b16c:	e0bffe15 	stw	r2,-8(fp)
   1b170:	e0bffe17 	ldw	r2,-8(fp)
   1b174:	10800210 	cmplti	r2,r2,8
   1b178:	103fde1e 	bne	r2,zero,1b0f4 <Write_File_Record_At_Offset+0x40>
        }        
        for (counter = 0; counter < 3; counter++)
   1b17c:	e03ffe15 	stw	zero,-8(fp)
   1b180:	00001206 	br	1b1cc <Write_File_Record_At_Offset+0x118>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
   1b184:	e0fffc17 	ldw	r3,-16(fp)
   1b188:	e0bffe17 	ldw	r2,-8(fp)
   1b18c:	1885883a 	add	r2,r3,r2
   1b190:	1007883a 	mov	r3,r2
   1b194:	d0a75417 	ldw	r2,-25264(gp)
   1b198:	10800a17 	ldw	r2,40(r2)
   1b19c:	1885883a 	add	r2,r3,r2
   1b1a0:	10800204 	addi	r2,r2,8
   1b1a4:	1009883a 	mov	r4,r2
   1b1a8:	e0fffb17 	ldw	r3,-20(fp)
   1b1ac:	e0bffe17 	ldw	r2,-8(fp)
   1b1b0:	1885883a 	add	r2,r3,r2
   1b1b4:	10800203 	ldbu	r2,8(r2)
   1b1b8:	10803fcc 	andi	r2,r2,255
   1b1bc:	20800025 	stbio	r2,0(r4)
        for (counter = 0; counter < 3; counter++)
   1b1c0:	e0bffe17 	ldw	r2,-8(fp)
   1b1c4:	10800044 	addi	r2,r2,1
   1b1c8:	e0bffe15 	stw	r2,-8(fp)
   1b1cc:	e0bffe17 	ldw	r2,-8(fp)
   1b1d0:	108000d0 	cmplti	r2,r2,3
   1b1d4:	103feb1e 	bne	r2,zero,1b184 <Write_File_Record_At_Offset+0xd0>
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
   1b1d8:	d0a75417 	ldw	r2,-25264(gp)
   1b1dc:	10c00a17 	ldw	r3,40(r2)
   1b1e0:	e0bffc17 	ldw	r2,-16(fp)
   1b1e4:	1885883a 	add	r2,r3,r2
   1b1e8:	108002c4 	addi	r2,r2,11
   1b1ec:	1007883a 	mov	r3,r2
   1b1f0:	e0bffb17 	ldw	r2,-20(fp)
   1b1f4:	108002c3 	ldbu	r2,11(r2)
   1b1f8:	10803fcc 	andi	r2,r2,255
   1b1fc:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
   1b200:	d0a75417 	ldw	r2,-25264(gp)
   1b204:	10c00a17 	ldw	r3,40(r2)
   1b208:	e0bffc17 	ldw	r2,-16(fp)
   1b20c:	1885883a 	add	r2,r3,r2
   1b210:	10800384 	addi	r2,r2,14
   1b214:	1007883a 	mov	r3,r2
   1b218:	e0bffb17 	ldw	r2,-20(fp)
   1b21c:	1080030b 	ldhu	r2,12(r2)
   1b220:	10bfffcc 	andi	r2,r2,65535
   1b224:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
   1b228:	d0a75417 	ldw	r2,-25264(gp)
   1b22c:	10c00a17 	ldw	r3,40(r2)
   1b230:	e0bffc17 	ldw	r2,-16(fp)
   1b234:	1885883a 	add	r2,r3,r2
   1b238:	10800404 	addi	r2,r2,16
   1b23c:	1007883a 	mov	r3,r2
   1b240:	e0bffb17 	ldw	r2,-20(fp)
   1b244:	1080038b 	ldhu	r2,14(r2)
   1b248:	10bfffcc 	andi	r2,r2,65535
   1b24c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
   1b250:	d0a75417 	ldw	r2,-25264(gp)
   1b254:	10c00a17 	ldw	r3,40(r2)
   1b258:	e0bffc17 	ldw	r2,-16(fp)
   1b25c:	1885883a 	add	r2,r3,r2
   1b260:	10800484 	addi	r2,r2,18
   1b264:	1007883a 	mov	r3,r2
   1b268:	e0bffb17 	ldw	r2,-20(fp)
   1b26c:	1080040b 	ldhu	r2,16(r2)
   1b270:	10bfffcc 	andi	r2,r2,65535
   1b274:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
   1b278:	d0a75417 	ldw	r2,-25264(gp)
   1b27c:	10c00a17 	ldw	r3,40(r2)
   1b280:	e0bffc17 	ldw	r2,-16(fp)
   1b284:	1885883a 	add	r2,r3,r2
   1b288:	10800584 	addi	r2,r2,22
   1b28c:	1007883a 	mov	r3,r2
   1b290:	e0bffb17 	ldw	r2,-20(fp)
   1b294:	1080048b 	ldhu	r2,18(r2)
   1b298:	10bfffcc 	andi	r2,r2,65535
   1b29c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
   1b2a0:	d0a75417 	ldw	r2,-25264(gp)
   1b2a4:	10c00a17 	ldw	r3,40(r2)
   1b2a8:	e0bffc17 	ldw	r2,-16(fp)
   1b2ac:	1885883a 	add	r2,r3,r2
   1b2b0:	10800604 	addi	r2,r2,24
   1b2b4:	1007883a 	mov	r3,r2
   1b2b8:	e0bffb17 	ldw	r2,-20(fp)
   1b2bc:	1080050b 	ldhu	r2,20(r2)
   1b2c0:	10bfffcc 	andi	r2,r2,65535
   1b2c4:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
   1b2c8:	d0a75417 	ldw	r2,-25264(gp)
   1b2cc:	10c00a17 	ldw	r3,40(r2)
   1b2d0:	e0bffc17 	ldw	r2,-16(fp)
   1b2d4:	1885883a 	add	r2,r3,r2
   1b2d8:	10800684 	addi	r2,r2,26
   1b2dc:	1007883a 	mov	r3,r2
   1b2e0:	e0bffb17 	ldw	r2,-20(fp)
   1b2e4:	1080058b 	ldhu	r2,22(r2)
   1b2e8:	10bfffcc 	andi	r2,r2,65535
   1b2ec:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
   1b2f0:	d0a75417 	ldw	r2,-25264(gp)
   1b2f4:	10c00a17 	ldw	r3,40(r2)
   1b2f8:	e0bffc17 	ldw	r2,-16(fp)
   1b2fc:	1885883a 	add	r2,r3,r2
   1b300:	10800704 	addi	r2,r2,28
   1b304:	1007883a 	mov	r3,r2
   1b308:	e0bffb17 	ldw	r2,-20(fp)
   1b30c:	10800617 	ldw	r2,24(r2)
   1b310:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
   1b314:	00800044 	movi	r2,1
   1b318:	d0a75515 	stw	r2,-25260(gp)
        result = true;
   1b31c:	00800044 	movi	r2,1
   1b320:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1b324:	e0bfff17 	ldw	r2,-4(fp)
}
   1b328:	e037883a 	mov	sp,fp
   1b32c:	dfc00117 	ldw	ra,4(sp)
   1b330:	df000017 	ldw	fp,0(sp)
   1b334:	dec00204 	addi	sp,sp,8
   1b338:	f800283a 	ret

0001b33c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   1b33c:	defff904 	addi	sp,sp,-28
   1b340:	dfc00615 	stw	ra,24(sp)
   1b344:	df000515 	stw	fp,20(sp)
   1b348:	df000504 	addi	fp,sp,20
   1b34c:	e13ffb15 	stw	r4,-20(fp)
	bool result = false;
   1b350:	e03fff15 	stw	zero,-4(fp)
	int counter = 0;
   1b354:	e03ffe15 	stw	zero,-8(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   1b358:	e17ffb17 	ldw	r5,-20(fp)
   1b35c:	0009883a 	mov	r4,zero
   1b360:	001aa300 	call	1aa30 <Read_Sector_Data>
   1b364:	e0bfff15 	stw	r2,-4(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
   1b368:	d0a75417 	ldw	r2,-25264(gp)
   1b36c:	10800a17 	ldw	r2,40(r2)
   1b370:	10807f84 	addi	r2,r2,510
   1b374:	1080002b 	ldhuio	r2,0(r2)
   1b378:	10bfffcc 	andi	r2,r2,65535
   1b37c:	e0bffc8d 	sth	r2,-14(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
   1b380:	e0bffc8f 	ldh	r2,-14(fp)
   1b384:	10ffffcc 	andi	r3,r2,65535
   1b388:	00aa9554 	movui	r2,43605
   1b38c:	1881571e 	bne	r3,r2,1b8ec <Check_for_DOS_FAT+0x5b0>
   1b390:	e0bfff17 	ldw	r2,-4(fp)
   1b394:	10015526 	beq	r2,zero,1b8ec <Check_for_DOS_FAT+0x5b0>
	{
		int num_clusters = 0;
   1b398:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
   1b39c:	d0a75417 	ldw	r2,-25264(gp)
   1b3a0:	10800a17 	ldw	r2,40(r2)
   1b3a4:	10800023 	ldbuio	r2,0(r2)
   1b3a8:	10803fcc 	andi	r2,r2,255
   1b3ac:	1007883a 	mov	r3,r2
   1b3b0:	008000b4 	movhi	r2,2
   1b3b4:	10d60f05 	stb	r3,22588(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
   1b3b8:	d0a75417 	ldw	r2,-25264(gp)
   1b3bc:	10800a17 	ldw	r2,40(r2)
   1b3c0:	10800044 	addi	r2,r2,1
   1b3c4:	10800023 	ldbuio	r2,0(r2)
   1b3c8:	10803fcc 	andi	r2,r2,255
   1b3cc:	1007883a 	mov	r3,r2
   1b3d0:	008000b4 	movhi	r2,2
   1b3d4:	10d60f45 	stb	r3,22589(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
   1b3d8:	d0a75417 	ldw	r2,-25264(gp)
   1b3dc:	10800a17 	ldw	r2,40(r2)
   1b3e0:	10800084 	addi	r2,r2,2
   1b3e4:	10800023 	ldbuio	r2,0(r2)
   1b3e8:	10803fcc 	andi	r2,r2,255
   1b3ec:	1007883a 	mov	r3,r2
   1b3f0:	008000b4 	movhi	r2,2
   1b3f4:	10d60f85 	stb	r3,22590(r2)
		for (counter = 0; counter < 8; counter++)
   1b3f8:	e03ffe15 	stw	zero,-8(fp)
   1b3fc:	00000f06 	br	1b43c <Check_for_DOS_FAT+0x100>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
   1b400:	d0a75417 	ldw	r2,-25264(gp)
   1b404:	10c00a17 	ldw	r3,40(r2)
   1b408:	e0bffe17 	ldw	r2,-8(fp)
   1b40c:	1885883a 	add	r2,r3,r2
   1b410:	108000c4 	addi	r2,r2,3
   1b414:	10800023 	ldbuio	r2,0(r2)
   1b418:	10803fcc 	andi	r2,r2,255
   1b41c:	1009883a 	mov	r4,r2
   1b420:	e0fffe17 	ldw	r3,-8(fp)
   1b424:	008000b4 	movhi	r2,2
   1b428:	1885883a 	add	r2,r3,r2
   1b42c:	11160fc5 	stb	r4,22591(r2)
		for (counter = 0; counter < 8; counter++)
   1b430:	e0bffe17 	ldw	r2,-8(fp)
   1b434:	10800044 	addi	r2,r2,1
   1b438:	e0bffe15 	stw	r2,-8(fp)
   1b43c:	e0bffe17 	ldw	r2,-8(fp)
   1b440:	10800210 	cmplti	r2,r2,8
   1b444:	103fee1e 	bne	r2,zero,1b400 <Check_for_DOS_FAT+0xc4>
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
   1b448:	d0a75417 	ldw	r2,-25264(gp)
   1b44c:	10800a17 	ldw	r2,40(r2)
   1b450:	10800304 	addi	r2,r2,12
   1b454:	10800023 	ldbuio	r2,0(r2)
   1b458:	10803fcc 	andi	r2,r2,255
   1b45c:	10803fcc 	andi	r2,r2,255
   1b460:	1004923a 	slli	r2,r2,8
   1b464:	1007883a 	mov	r3,r2
   1b468:	d0a75417 	ldw	r2,-25264(gp)
   1b46c:	10800a17 	ldw	r2,40(r2)
   1b470:	108002c4 	addi	r2,r2,11
   1b474:	10800023 	ldbuio	r2,0(r2)
   1b478:	10803fcc 	andi	r2,r2,255
   1b47c:	10803fcc 	andi	r2,r2,255
   1b480:	1080201c 	xori	r2,r2,128
   1b484:	10bfe004 	addi	r2,r2,-128
   1b488:	1884b03a 	or	r2,r3,r2
   1b48c:	1007883a 	mov	r3,r2
   1b490:	008000b4 	movhi	r2,2
   1b494:	10d6120d 	sth	r3,22600(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
   1b498:	d0a75417 	ldw	r2,-25264(gp)
   1b49c:	10800a17 	ldw	r2,40(r2)
   1b4a0:	10800344 	addi	r2,r2,13
   1b4a4:	10800023 	ldbuio	r2,0(r2)
   1b4a8:	10803fcc 	andi	r2,r2,255
   1b4ac:	1007883a 	mov	r3,r2
   1b4b0:	008000b4 	movhi	r2,2
   1b4b4:	10d61285 	stb	r3,22602(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
   1b4b8:	d0a75417 	ldw	r2,-25264(gp)
   1b4bc:	10800a17 	ldw	r2,40(r2)
   1b4c0:	10800384 	addi	r2,r2,14
   1b4c4:	1080002b 	ldhuio	r2,0(r2)
   1b4c8:	10bfffcc 	andi	r2,r2,65535
   1b4cc:	1007883a 	mov	r3,r2
   1b4d0:	008000b4 	movhi	r2,2
   1b4d4:	10d6130d 	sth	r3,22604(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
   1b4d8:	d0a75417 	ldw	r2,-25264(gp)
   1b4dc:	10800a17 	ldw	r2,40(r2)
   1b4e0:	10800404 	addi	r2,r2,16
   1b4e4:	10800023 	ldbuio	r2,0(r2)
   1b4e8:	10803fcc 	andi	r2,r2,255
   1b4ec:	1007883a 	mov	r3,r2
   1b4f0:	008000b4 	movhi	r2,2
   1b4f4:	10d61385 	stb	r3,22606(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
   1b4f8:	d0a75417 	ldw	r2,-25264(gp)
   1b4fc:	10800a17 	ldw	r2,40(r2)
   1b500:	10800484 	addi	r2,r2,18
   1b504:	10800023 	ldbuio	r2,0(r2)
   1b508:	10803fcc 	andi	r2,r2,255
   1b50c:	10803fcc 	andi	r2,r2,255
   1b510:	1004923a 	slli	r2,r2,8
   1b514:	1007883a 	mov	r3,r2
   1b518:	d0a75417 	ldw	r2,-25264(gp)
   1b51c:	10800a17 	ldw	r2,40(r2)
   1b520:	10800444 	addi	r2,r2,17
   1b524:	10800023 	ldbuio	r2,0(r2)
   1b528:	10803fcc 	andi	r2,r2,255
   1b52c:	10803fcc 	andi	r2,r2,255
   1b530:	1884b03a 	or	r2,r3,r2
   1b534:	1007883a 	mov	r3,r2
   1b538:	008000b4 	movhi	r2,2
   1b53c:	10d6140d 	sth	r3,22608(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
   1b540:	d0a75417 	ldw	r2,-25264(gp)
   1b544:	10800a17 	ldw	r2,40(r2)
   1b548:	10800504 	addi	r2,r2,20
   1b54c:	10800023 	ldbuio	r2,0(r2)
   1b550:	10803fcc 	andi	r2,r2,255
   1b554:	10803fcc 	andi	r2,r2,255
   1b558:	1004923a 	slli	r2,r2,8
   1b55c:	1007883a 	mov	r3,r2
   1b560:	d0a75417 	ldw	r2,-25264(gp)
   1b564:	10800a17 	ldw	r2,40(r2)
   1b568:	108004c4 	addi	r2,r2,19
   1b56c:	10800023 	ldbuio	r2,0(r2)
   1b570:	10803fcc 	andi	r2,r2,255
   1b574:	10803fcc 	andi	r2,r2,255
   1b578:	1884b03a 	or	r2,r3,r2
   1b57c:	1007883a 	mov	r3,r2
   1b580:	008000b4 	movhi	r2,2
   1b584:	10d6148d 	sth	r3,22610(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
   1b588:	d0a75417 	ldw	r2,-25264(gp)
   1b58c:	10800a17 	ldw	r2,40(r2)
   1b590:	10800544 	addi	r2,r2,21
   1b594:	10800023 	ldbuio	r2,0(r2)
   1b598:	10803fcc 	andi	r2,r2,255
   1b59c:	1007883a 	mov	r3,r2
   1b5a0:	008000b4 	movhi	r2,2
   1b5a4:	10d61505 	stb	r3,22612(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
   1b5a8:	d0a75417 	ldw	r2,-25264(gp)
   1b5ac:	10800a17 	ldw	r2,40(r2)
   1b5b0:	10800584 	addi	r2,r2,22
   1b5b4:	1080002b 	ldhuio	r2,0(r2)
   1b5b8:	10bfffcc 	andi	r2,r2,65535
   1b5bc:	1007883a 	mov	r3,r2
   1b5c0:	008000b4 	movhi	r2,2
   1b5c4:	10d6158d 	sth	r3,22614(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
   1b5c8:	d0a75417 	ldw	r2,-25264(gp)
   1b5cc:	10800a17 	ldw	r2,40(r2)
   1b5d0:	10800604 	addi	r2,r2,24
   1b5d4:	1080002b 	ldhuio	r2,0(r2)
   1b5d8:	10bfffcc 	andi	r2,r2,65535
   1b5dc:	1007883a 	mov	r3,r2
   1b5e0:	008000b4 	movhi	r2,2
   1b5e4:	10d6160d 	sth	r3,22616(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
   1b5e8:	d0a75417 	ldw	r2,-25264(gp)
   1b5ec:	10800a17 	ldw	r2,40(r2)
   1b5f0:	10800684 	addi	r2,r2,26
   1b5f4:	1080002b 	ldhuio	r2,0(r2)
   1b5f8:	10bfffcc 	andi	r2,r2,65535
   1b5fc:	1007883a 	mov	r3,r2
   1b600:	008000b4 	movhi	r2,2
   1b604:	10d6168d 	sth	r3,22618(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
   1b608:	d0a75417 	ldw	r2,-25264(gp)
   1b60c:	10800a17 	ldw	r2,40(r2)
   1b610:	10800704 	addi	r2,r2,28
   1b614:	10800037 	ldwio	r2,0(r2)
   1b618:	1007883a 	mov	r3,r2
   1b61c:	008000b4 	movhi	r2,2
   1b620:	10d61715 	stw	r3,22620(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
   1b624:	d0a75417 	ldw	r2,-25264(gp)
   1b628:	10800a17 	ldw	r2,40(r2)
   1b62c:	10800804 	addi	r2,r2,32
   1b630:	10800037 	ldwio	r2,0(r2)
   1b634:	1007883a 	mov	r3,r2
   1b638:	008000b4 	movhi	r2,2
   1b63c:	10d61815 	stw	r3,22624(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
   1b640:	d0a75417 	ldw	r2,-25264(gp)
   1b644:	10800a17 	ldw	r2,40(r2)
   1b648:	10800904 	addi	r2,r2,36
   1b64c:	10800023 	ldbuio	r2,0(r2)
   1b650:	10803fcc 	andi	r2,r2,255
   1b654:	1007883a 	mov	r3,r2
   1b658:	008000b4 	movhi	r2,2
   1b65c:	10d61905 	stb	r3,22628(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
   1b660:	d0a75417 	ldw	r2,-25264(gp)
   1b664:	10800a17 	ldw	r2,40(r2)
   1b668:	10800944 	addi	r2,r2,37
   1b66c:	10800023 	ldbuio	r2,0(r2)
   1b670:	10803fcc 	andi	r2,r2,255
   1b674:	1007883a 	mov	r3,r2
   1b678:	008000b4 	movhi	r2,2
   1b67c:	10d61945 	stb	r3,22629(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
   1b680:	d0a75417 	ldw	r2,-25264(gp)
   1b684:	10800a17 	ldw	r2,40(r2)
   1b688:	10800984 	addi	r2,r2,38
   1b68c:	10800023 	ldbuio	r2,0(r2)
   1b690:	10803fcc 	andi	r2,r2,255
   1b694:	1007883a 	mov	r3,r2
   1b698:	008000b4 	movhi	r2,2
   1b69c:	10d61985 	stb	r3,22630(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   1b6a0:	008000b4 	movhi	r2,2
   1b6a4:	1096130b 	ldhu	r2,22604(r2)
   1b6a8:	10ffffcc 	andi	r3,r2,65535
   1b6ac:	008000b4 	movhi	r2,2
   1b6b0:	10d62015 	stw	r3,22656(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   1b6b4:	008000b4 	movhi	r2,2
   1b6b8:	10d62017 	ldw	r3,22656(r2)
   1b6bc:	008000b4 	movhi	r2,2
   1b6c0:	1096158b 	ldhu	r2,22614(r2)
   1b6c4:	10bfffcc 	andi	r2,r2,65535
   1b6c8:	1887883a 	add	r3,r3,r2
   1b6cc:	008000b4 	movhi	r2,2
   1b6d0:	10d62115 	stw	r3,22660(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   1b6d4:	008000b4 	movhi	r2,2
   1b6d8:	10d62117 	ldw	r3,22660(r2)
   1b6dc:	008000b4 	movhi	r2,2
   1b6e0:	1096158b 	ldhu	r2,22614(r2)
   1b6e4:	10bfffcc 	andi	r2,r2,65535
   1b6e8:	1887883a 	add	r3,r3,r2
   1b6ec:	008000b4 	movhi	r2,2
   1b6f0:	10d62215 	stw	r3,22664(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   1b6f4:	008000b4 	movhi	r2,2
   1b6f8:	10962217 	ldw	r2,22664(r2)
   1b6fc:	00c000b4 	movhi	r3,2
   1b700:	18d6140b 	ldhu	r3,22608(r3)
   1b704:	18ffffcc 	andi	r3,r3,65535
   1b708:	1808917a 	slli	r4,r3,5
   1b70c:	00c000b4 	movhi	r3,2
   1b710:	18d6120b 	ldhu	r3,22600(r3)
   1b714:	18ffffcc 	andi	r3,r3,65535
   1b718:	20c7283a 	div	r3,r4,r3
   1b71c:	10c7883a 	add	r3,r2,r3
   1b720:	008000b4 	movhi	r2,2
   1b724:	10d62315 	stw	r3,22668(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
   1b728:	008000b4 	movhi	r2,2
   1b72c:	1096148b 	ldhu	r2,22610(r2)
   1b730:	10bfffcc 	andi	r2,r2,65535
   1b734:	10000926 	beq	r2,zero,1b75c <Check_for_DOS_FAT+0x420>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
   1b738:	008000b4 	movhi	r2,2
   1b73c:	1096148b 	ldhu	r2,22610(r2)
   1b740:	10ffffcc 	andi	r3,r2,65535
   1b744:	008000b4 	movhi	r2,2
   1b748:	10961283 	ldbu	r2,22602(r2)
   1b74c:	10803fcc 	andi	r2,r2,255
   1b750:	1885283a 	div	r2,r3,r2
   1b754:	e0bffd15 	stw	r2,-12(fp)
   1b758:	00000706 	br	1b778 <Check_for_DOS_FAT+0x43c>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
   1b75c:	008000b4 	movhi	r2,2
   1b760:	10d61817 	ldw	r3,22624(r2)
   1b764:	008000b4 	movhi	r2,2
   1b768:	10961283 	ldbu	r2,22602(r2)
   1b76c:	10803fcc 	andi	r2,r2,255
   1b770:	1885203a 	divu	r2,r3,r2
   1b774:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
   1b778:	e0bffd17 	ldw	r2,-12(fp)
   1b77c:	1083fdc8 	cmpgei	r2,r2,4087
   1b780:	1000041e 	bne	r2,zero,1b794 <Check_for_DOS_FAT+0x458>
		{
			boot_sector_data.bits_for_cluster_index = 12;
   1b784:	00c00304 	movi	r3,12
   1b788:	008000b4 	movhi	r2,2
   1b78c:	10d61f85 	stb	r3,22654(r2)
   1b790:	00000a06 	br	1b7bc <Check_for_DOS_FAT+0x480>
		}
		else if (num_clusters <= 65517)
   1b794:	e0bffd17 	ldw	r2,-12(fp)
   1b798:	00fffb54 	movui	r3,65517
   1b79c:	18800416 	blt	r3,r2,1b7b0 <Check_for_DOS_FAT+0x474>
		{
			boot_sector_data.bits_for_cluster_index = 16;
   1b7a0:	00c00404 	movi	r3,16
   1b7a4:	008000b4 	movhi	r2,2
   1b7a8:	10d61f85 	stb	r3,22654(r2)
   1b7ac:	00000306 	br	1b7bc <Check_for_DOS_FAT+0x480>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
   1b7b0:	00c00804 	movi	r3,32
   1b7b4:	008000b4 	movhi	r2,2
   1b7b8:	10d61f85 	stb	r3,22654(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
   1b7bc:	e03ffe15 	stw	zero,-8(fp)
   1b7c0:	00000f06 	br	1b800 <Check_for_DOS_FAT+0x4c4>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
   1b7c4:	d0a75417 	ldw	r2,-25264(gp)
   1b7c8:	10c00a17 	ldw	r3,40(r2)
   1b7cc:	e0bffe17 	ldw	r2,-8(fp)
   1b7d0:	1885883a 	add	r2,r3,r2
   1b7d4:	108009c4 	addi	r2,r2,39
   1b7d8:	10800023 	ldbuio	r2,0(r2)
   1b7dc:	10803fcc 	andi	r2,r2,255
   1b7e0:	1009883a 	mov	r4,r2
   1b7e4:	e0fffe17 	ldw	r3,-8(fp)
   1b7e8:	008000b4 	movhi	r2,2
   1b7ec:	1885883a 	add	r2,r3,r2
   1b7f0:	111619c5 	stb	r4,22631(r2)
		for (counter = 0; counter < 4; counter++)
   1b7f4:	e0bffe17 	ldw	r2,-8(fp)
   1b7f8:	10800044 	addi	r2,r2,1
   1b7fc:	e0bffe15 	stw	r2,-8(fp)
   1b800:	e0bffe17 	ldw	r2,-8(fp)
   1b804:	10800110 	cmplti	r2,r2,4
   1b808:	103fee1e 	bne	r2,zero,1b7c4 <Check_for_DOS_FAT+0x488>
		}    
		for (counter = 0; counter < 11; counter++)
   1b80c:	e03ffe15 	stw	zero,-8(fp)
   1b810:	00000f06 	br	1b850 <Check_for_DOS_FAT+0x514>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
   1b814:	d0a75417 	ldw	r2,-25264(gp)
   1b818:	10c00a17 	ldw	r3,40(r2)
   1b81c:	e0bffe17 	ldw	r2,-8(fp)
   1b820:	1885883a 	add	r2,r3,r2
   1b824:	10800ac4 	addi	r2,r2,43
   1b828:	10800023 	ldbuio	r2,0(r2)
   1b82c:	10803fcc 	andi	r2,r2,255
   1b830:	1009883a 	mov	r4,r2
   1b834:	e0fffe17 	ldw	r3,-8(fp)
   1b838:	008000b4 	movhi	r2,2
   1b83c:	1885883a 	add	r2,r3,r2
   1b840:	11161ac5 	stb	r4,22635(r2)
		for (counter = 0; counter < 11; counter++)
   1b844:	e0bffe17 	ldw	r2,-8(fp)
   1b848:	10800044 	addi	r2,r2,1
   1b84c:	e0bffe15 	stw	r2,-8(fp)
   1b850:	e0bffe17 	ldw	r2,-8(fp)
   1b854:	108002d0 	cmplti	r2,r2,11
   1b858:	103fee1e 	bne	r2,zero,1b814 <Check_for_DOS_FAT+0x4d8>
		}    
		for (counter = 0; counter < 8; counter++)
   1b85c:	e03ffe15 	stw	zero,-8(fp)
   1b860:	00000f06 	br	1b8a0 <Check_for_DOS_FAT+0x564>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
   1b864:	d0a75417 	ldw	r2,-25264(gp)
   1b868:	10c00a17 	ldw	r3,40(r2)
   1b86c:	e0bffe17 	ldw	r2,-8(fp)
   1b870:	1885883a 	add	r2,r3,r2
   1b874:	10800d84 	addi	r2,r2,54
   1b878:	10800023 	ldbuio	r2,0(r2)
   1b87c:	10803fcc 	andi	r2,r2,255
   1b880:	1009883a 	mov	r4,r2
   1b884:	e0fffe17 	ldw	r3,-8(fp)
   1b888:	008000b4 	movhi	r2,2
   1b88c:	1885883a 	add	r2,r3,r2
   1b890:	11161d85 	stb	r4,22646(r2)
		for (counter = 0; counter < 8; counter++)
   1b894:	e0bffe17 	ldw	r2,-8(fp)
   1b898:	10800044 	addi	r2,r2,1
   1b89c:	e0bffe15 	stw	r2,-8(fp)
   1b8a0:	e0bffe17 	ldw	r2,-8(fp)
   1b8a4:	10800210 	cmplti	r2,r2,8
   1b8a8:	103fee1e 	bne	r2,zero,1b864 <Check_for_DOS_FAT+0x528>
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1b8ac:	e03ffe15 	stw	zero,-8(fp)
   1b8b0:	00000806 	br	1b8d4 <Check_for_DOS_FAT+0x598>
		{
			active_files[counter].in_use = false;
   1b8b4:	e0bffe17 	ldw	r2,-8(fp)
   1b8b8:	100691ba 	slli	r3,r2,6
   1b8bc:	008000b4 	movhi	r2,2
   1b8c0:	1885883a 	add	r2,r3,r2
   1b8c4:	10163315 	stw	zero,22732(r2)
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1b8c8:	e0bffe17 	ldw	r2,-8(fp)
   1b8cc:	10800044 	addi	r2,r2,1
   1b8d0:	e0bffe15 	stw	r2,-8(fp)
   1b8d4:	e0bffe17 	ldw	r2,-8(fp)
   1b8d8:	10800510 	cmplti	r2,r2,20
   1b8dc:	103ff51e 	bne	r2,zero,1b8b4 <Check_for_DOS_FAT+0x578>
		}
		result = true;
   1b8e0:	00800044 	movi	r2,1
   1b8e4:	e0bfff15 	stw	r2,-4(fp)
	{
   1b8e8:	00000106 	br	1b8f0 <Check_for_DOS_FAT+0x5b4>
	}
    else
    {
        result = false;
   1b8ec:	e03fff15 	stw	zero,-4(fp)
    }
	return result;
   1b8f0:	e0bfff17 	ldw	r2,-4(fp)
}
   1b8f4:	e037883a 	mov	sp,fp
   1b8f8:	dfc00117 	ldw	ra,4(sp)
   1b8fc:	df000017 	ldw	fp,0(sp)
   1b900:	dec00204 	addi	sp,sp,8
   1b904:	f800283a 	ret

0001b908 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   1b908:	defffc04 	addi	sp,sp,-16
   1b90c:	dfc00315 	stw	ra,12(sp)
   1b910:	df000215 	stw	fp,8(sp)
   1b914:	df000204 	addi	fp,sp,8
	bool result = false;
   1b918:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   1b91c:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1b920:	10002c26 	beq	r2,zero,1b9d4 <Look_for_FAT16+0xcc>
	{
		short int csd_file_format = *CSD_register_w0;
   1b924:	d0a74e17 	ldw	r2,-25288(gp)
   1b928:	1080000b 	ldhu	r2,0(r2)
   1b92c:	e0bffe8d 	sth	r2,-6(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   1b930:	d0275215 	stw	zero,-25272(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   1b934:	d0275315 	stw	zero,-25268(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   1b938:	e0bffe8f 	ldh	r2,-6(fp)
   1b93c:	10002516 	blt	r2,zero,1b9d4 <Look_for_FAT16+0xcc>
   1b940:	e0bffe8b 	ldhu	r2,-6(fp)
   1b944:	10bfffcc 	andi	r2,r2,65535
   1b948:	1083000c 	andi	r2,r2,3072
   1b94c:	10830020 	cmpeqi	r2,r2,3072
   1b950:	1000201e 	bne	r2,zero,1b9d4 <Look_for_FAT16+0xcc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   1b954:	e0bffe8b 	ldhu	r2,-6(fp)
   1b958:	10bfffcc 	andi	r2,r2,65535
   1b95c:	1083000c 	andi	r2,r2,3072
   1b960:	10810018 	cmpnei	r2,r2,1024
   1b964:	1000031e 	bne	r2,zero,1b974 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   1b968:	0009883a 	mov	r4,zero
   1b96c:	001b33c0 	call	1b33c <Check_for_DOS_FAT>
   1b970:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   1b974:	e0bffe8b 	ldhu	r2,-6(fp)
   1b978:	10bfffcc 	andi	r2,r2,65535
   1b97c:	1083000c 	andi	r2,r2,3072
   1b980:	1000061e 	bne	r2,zero,1b99c <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   1b984:	001ac900 	call	1ac90 <Check_for_Master_Boot_Record>
   1b988:	10000426 	beq	r2,zero,1b99c <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   1b98c:	d0a75217 	ldw	r2,-25272(gp)
   1b990:	1009883a 	mov	r4,r2
   1b994:	001b33c0 	call	1b33c <Check_for_DOS_FAT>
   1b998:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
   1b99c:	e0bfff17 	ldw	r2,-4(fp)
   1b9a0:	10800058 	cmpnei	r2,r2,1
   1b9a4:	10000b1e 	bne	r2,zero,1b9d4 <Look_for_FAT16+0xcc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
   1b9a8:	008000b4 	movhi	r2,2
   1b9ac:	10961f83 	ldbu	r2,22654(r2)
   1b9b0:	10803fcc 	andi	r2,r2,255
   1b9b4:	10800420 	cmpeqi	r2,r2,16
   1b9b8:	1000021e 	bne	r2,zero,1b9c4 <Look_for_FAT16+0xbc>
				{
					result = false;
   1b9bc:	e03fff15 	stw	zero,-4(fp)
   1b9c0:	00000406 	br	1b9d4 <Look_for_FAT16+0xcc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   1b9c4:	008000b4 	movhi	r2,2
   1b9c8:	1096148b 	ldhu	r2,22610(r2)
   1b9cc:	10bfffcc 	andi	r2,r2,65535
   1b9d0:	d0a75315 	stw	r2,-25268(gp)
				}
			}
		}
	}
	return result;
   1b9d4:	e0bfff17 	ldw	r2,-4(fp)
}
   1b9d8:	e037883a 	mov	sp,fp
   1b9dc:	dfc00117 	ldw	ra,4(sp)
   1b9e0:	df000017 	ldw	fp,0(sp)
   1b9e4:	dec00204 	addi	sp,sp,8
   1b9e8:	f800283a 	ret

0001b9ec <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   1b9ec:	defffb04 	addi	sp,sp,-20
   1b9f0:	dfc00415 	stw	ra,16(sp)
   1b9f4:	df000315 	stw	fp,12(sp)
   1b9f8:	df000304 	addi	fp,sp,12
   1b9fc:	e13ffd15 	stw	r4,-12(fp)
    int index;
    int length = strlen(file_name);
   1ba00:	e13ffd17 	ldw	r4,-12(fp)
   1ba04:	000d6fc0 	call	d6fc <strlen>
   1ba08:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   1ba0c:	e03fff15 	stw	zero,-4(fp)
   1ba10:	00002006 	br	1ba94 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   1ba14:	e0bfff17 	ldw	r2,-4(fp)
   1ba18:	e0fffd17 	ldw	r3,-12(fp)
   1ba1c:	1885883a 	add	r2,r3,r2
   1ba20:	10800003 	ldbu	r2,0(r2)
   1ba24:	10803fcc 	andi	r2,r2,255
   1ba28:	1080201c 	xori	r2,r2,128
   1ba2c:	10bfe004 	addi	r2,r2,-128
   1ba30:	10801850 	cmplti	r2,r2,97
   1ba34:	1000141e 	bne	r2,zero,1ba88 <filename_to_upper_case+0x9c>
   1ba38:	e0bfff17 	ldw	r2,-4(fp)
   1ba3c:	e0fffd17 	ldw	r3,-12(fp)
   1ba40:	1885883a 	add	r2,r3,r2
   1ba44:	10800003 	ldbu	r2,0(r2)
   1ba48:	10803fcc 	andi	r2,r2,255
   1ba4c:	1080201c 	xori	r2,r2,128
   1ba50:	10bfe004 	addi	r2,r2,-128
   1ba54:	10801ec8 	cmpgei	r2,r2,123
   1ba58:	10000b1e 	bne	r2,zero,1ba88 <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   1ba5c:	e0bfff17 	ldw	r2,-4(fp)
   1ba60:	e0fffd17 	ldw	r3,-12(fp)
   1ba64:	1885883a 	add	r2,r3,r2
   1ba68:	10800003 	ldbu	r2,0(r2)
   1ba6c:	10bff804 	addi	r2,r2,-32
   1ba70:	1009883a 	mov	r4,r2
   1ba74:	e0bfff17 	ldw	r2,-4(fp)
   1ba78:	e0fffd17 	ldw	r3,-12(fp)
   1ba7c:	1885883a 	add	r2,r3,r2
   1ba80:	2007883a 	mov	r3,r4
   1ba84:	10c00005 	stb	r3,0(r2)
    for (index = 0; index < length; index++)
   1ba88:	e0bfff17 	ldw	r2,-4(fp)
   1ba8c:	10800044 	addi	r2,r2,1
   1ba90:	e0bfff15 	stw	r2,-4(fp)
   1ba94:	e0ffff17 	ldw	r3,-4(fp)
   1ba98:	e0bffe17 	ldw	r2,-8(fp)
   1ba9c:	18bfdd16 	blt	r3,r2,1ba14 <filename_to_upper_case+0x28>
        }
    }
}
   1baa0:	0001883a 	nop
   1baa4:	0001883a 	nop
   1baa8:	e037883a 	mov	sp,fp
   1baac:	dfc00117 	ldw	ra,4(sp)
   1bab0:	df000017 	ldw	fp,0(sp)
   1bab4:	dec00204 	addi	sp,sp,8
   1bab8:	f800283a 	ret

0001babc <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   1babc:	defff804 	addi	sp,sp,-32
   1bac0:	dfc00715 	stw	ra,28(sp)
   1bac4:	df000615 	stw	fp,24(sp)
   1bac8:	df000604 	addi	fp,sp,24
   1bacc:	e13ffa15 	stw	r4,-24(fp)
    int length = strlen(file_name);
   1bad0:	e13ffa17 	ldw	r4,-24(fp)
   1bad4:	000d6fc0 	call	d6fc <strlen>
   1bad8:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
   1badc:	00bfffc4 	movi	r2,-1
   1bae0:	e0bffe15 	stw	r2,-8(fp)
    int last_period = -1;
   1bae4:	00bfffc4 	movi	r2,-1
   1bae8:	e0bffd15 	stw	r2,-12(fp)
    bool result = true;
   1baec:	00800044 	movi	r2,1
   1baf0:	e0bffc15 	stw	r2,-16(fp)
    
    for(index = 0; index < length; index++)
   1baf4:	e03fff15 	stw	zero,-4(fp)
   1baf8:	00006d06 	br	1bcb0 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   1bafc:	e0bfff17 	ldw	r2,-4(fp)
   1bb00:	e0fffa17 	ldw	r3,-24(fp)
   1bb04:	1885883a 	add	r2,r3,r2
   1bb08:	10800003 	ldbu	r2,0(r2)
   1bb0c:	10803fcc 	andi	r2,r2,255
   1bb10:	1080201c 	xori	r2,r2,128
   1bb14:	10bfe004 	addi	r2,r2,-128
   1bb18:	10800820 	cmpeqi	r2,r2,32
   1bb1c:	10003e1e 	bne	r2,zero,1bc18 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1bb20:	e0bfff17 	ldw	r2,-4(fp)
   1bb24:	10bfffc4 	addi	r2,r2,-1
        if ((file_name[index] == ' ') ||
   1bb28:	e0fffe17 	ldw	r3,-8(fp)
   1bb2c:	1880121e 	bne	r3,r2,1bb78 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1bb30:	e0bfff17 	ldw	r2,-4(fp)
   1bb34:	e0fffa17 	ldw	r3,-24(fp)
   1bb38:	1885883a 	add	r2,r3,r2
   1bb3c:	10800003 	ldbu	r2,0(r2)
   1bb40:	10803fcc 	andi	r2,r2,255
   1bb44:	1080201c 	xori	r2,r2,128
   1bb48:	10bfe004 	addi	r2,r2,-128
   1bb4c:	10801720 	cmpeqi	r2,r2,92
   1bb50:	1000311e 	bne	r2,zero,1bc18 <check_file_name_for_FAT16_compliance+0x15c>
   1bb54:	e0bfff17 	ldw	r2,-4(fp)
   1bb58:	e0fffa17 	ldw	r3,-24(fp)
   1bb5c:	1885883a 	add	r2,r3,r2
   1bb60:	10800003 	ldbu	r2,0(r2)
   1bb64:	10803fcc 	andi	r2,r2,255
   1bb68:	1080201c 	xori	r2,r2,128
   1bb6c:	10bfe004 	addi	r2,r2,-128
   1bb70:	10800be0 	cmpeqi	r2,r2,47
   1bb74:	1000281e 	bne	r2,zero,1bc18 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1bb78:	e0ffff17 	ldw	r3,-4(fp)
   1bb7c:	e0bffd17 	ldw	r2,-12(fp)
   1bb80:	1885c83a 	sub	r2,r3,r2
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1bb84:	10800258 	cmpnei	r2,r2,9
   1bb88:	1000091e 	bne	r2,zero,1bbb0 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1bb8c:	e0bfff17 	ldw	r2,-4(fp)
   1bb90:	e0fffa17 	ldw	r3,-24(fp)
   1bb94:	1885883a 	add	r2,r3,r2
   1bb98:	10800003 	ldbu	r2,0(r2)
   1bb9c:	10803fcc 	andi	r2,r2,255
   1bba0:	1080201c 	xori	r2,r2,128
   1bba4:	10bfe004 	addi	r2,r2,-128
   1bba8:	10800b98 	cmpnei	r2,r2,46
   1bbac:	10001a1e 	bne	r2,zero,1bc18 <check_file_name_for_FAT16_compliance+0x15c>
   1bbb0:	e0fffe17 	ldw	r3,-8(fp)
   1bbb4:	e0bffd17 	ldw	r2,-12(fp)
   1bbb8:	18801926 	beq	r3,r2,1bc20 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1bbbc:	e0ffff17 	ldw	r3,-4(fp)
   1bbc0:	e0bffd17 	ldw	r2,-12(fp)
   1bbc4:	1885c83a 	sub	r2,r3,r2
   1bbc8:	10800110 	cmplti	r2,r2,4
   1bbcc:	1000141e 	bne	r2,zero,1bc20 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1bbd0:	e0bfff17 	ldw	r2,-4(fp)
   1bbd4:	e0fffa17 	ldw	r3,-24(fp)
   1bbd8:	1885883a 	add	r2,r3,r2
   1bbdc:	10800003 	ldbu	r2,0(r2)
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1bbe0:	10803fcc 	andi	r2,r2,255
   1bbe4:	1080201c 	xori	r2,r2,128
   1bbe8:	10bfe004 	addi	r2,r2,-128
   1bbec:	10801720 	cmpeqi	r2,r2,92
   1bbf0:	10000b1e 	bne	r2,zero,1bc20 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1bbf4:	e0bfff17 	ldw	r2,-4(fp)
   1bbf8:	e0fffa17 	ldw	r3,-24(fp)
   1bbfc:	1885883a 	add	r2,r3,r2
   1bc00:	10800003 	ldbu	r2,0(r2)
   1bc04:	10803fcc 	andi	r2,r2,255
   1bc08:	1080201c 	xori	r2,r2,128
   1bc0c:	10bfe004 	addi	r2,r2,-128
   1bc10:	10800be0 	cmpeqi	r2,r2,47
   1bc14:	1000021e 	bne	r2,zero,1bc20 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   1bc18:	e03ffc15 	stw	zero,-16(fp)
            break;
   1bc1c:	00002706 	br	1bcbc <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   1bc20:	e0bfff17 	ldw	r2,-4(fp)
   1bc24:	e0fffa17 	ldw	r3,-24(fp)
   1bc28:	1885883a 	add	r2,r3,r2
   1bc2c:	10800003 	ldbu	r2,0(r2)
   1bc30:	10803fcc 	andi	r2,r2,255
   1bc34:	1080201c 	xori	r2,r2,128
   1bc38:	10bfe004 	addi	r2,r2,-128
   1bc3c:	10801720 	cmpeqi	r2,r2,92
   1bc40:	1000091e 	bne	r2,zero,1bc68 <check_file_name_for_FAT16_compliance+0x1ac>
   1bc44:	e0bfff17 	ldw	r2,-4(fp)
   1bc48:	e0fffa17 	ldw	r3,-24(fp)
   1bc4c:	1885883a 	add	r2,r3,r2
   1bc50:	10800003 	ldbu	r2,0(r2)
   1bc54:	10803fcc 	andi	r2,r2,255
   1bc58:	1080201c 	xori	r2,r2,128
   1bc5c:	10bfe004 	addi	r2,r2,-128
   1bc60:	10800bd8 	cmpnei	r2,r2,47
   1bc64:	1000041e 	bne	r2,zero,1bc78 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   1bc68:	e0bfff17 	ldw	r2,-4(fp)
   1bc6c:	e0bffd15 	stw	r2,-12(fp)
            last_dir_break_position = index;
   1bc70:	e0bfff17 	ldw	r2,-4(fp)
   1bc74:	e0bffe15 	stw	r2,-8(fp)
        }
        if (file_name[index] == '.')
   1bc78:	e0bfff17 	ldw	r2,-4(fp)
   1bc7c:	e0fffa17 	ldw	r3,-24(fp)
   1bc80:	1885883a 	add	r2,r3,r2
   1bc84:	10800003 	ldbu	r2,0(r2)
   1bc88:	10803fcc 	andi	r2,r2,255
   1bc8c:	1080201c 	xori	r2,r2,128
   1bc90:	10bfe004 	addi	r2,r2,-128
   1bc94:	10800b98 	cmpnei	r2,r2,46
   1bc98:	1000021e 	bne	r2,zero,1bca4 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   1bc9c:	e0bfff17 	ldw	r2,-4(fp)
   1bca0:	e0bffd15 	stw	r2,-12(fp)
    for(index = 0; index < length; index++)
   1bca4:	e0bfff17 	ldw	r2,-4(fp)
   1bca8:	10800044 	addi	r2,r2,1
   1bcac:	e0bfff15 	stw	r2,-4(fp)
   1bcb0:	e0ffff17 	ldw	r3,-4(fp)
   1bcb4:	e0bffb17 	ldw	r2,-20(fp)
   1bcb8:	18bf9016 	blt	r3,r2,1bafc <check_file_name_for_FAT16_compliance+0x40>
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   1bcbc:	e0bffb17 	ldw	r2,-20(fp)
   1bcc0:	10bfffc4 	addi	r2,r2,-1
   1bcc4:	e0fffa17 	ldw	r3,-24(fp)
   1bcc8:	1885883a 	add	r2,r3,r2
   1bccc:	10800003 	ldbu	r2,0(r2)
   1bcd0:	10803fcc 	andi	r2,r2,255
   1bcd4:	1080201c 	xori	r2,r2,128
   1bcd8:	10bfe004 	addi	r2,r2,-128
   1bcdc:	10801720 	cmpeqi	r2,r2,92
   1bce0:	10000a1e 	bne	r2,zero,1bd0c <check_file_name_for_FAT16_compliance+0x250>
   1bce4:	e0bffb17 	ldw	r2,-20(fp)
   1bce8:	10bfffc4 	addi	r2,r2,-1
   1bcec:	e0fffa17 	ldw	r3,-24(fp)
   1bcf0:	1885883a 	add	r2,r3,r2
   1bcf4:	10800003 	ldbu	r2,0(r2)
   1bcf8:	10803fcc 	andi	r2,r2,255
   1bcfc:	1080201c 	xori	r2,r2,128
   1bd00:	10bfe004 	addi	r2,r2,-128
   1bd04:	10800bd8 	cmpnei	r2,r2,47
   1bd08:	1000011e 	bne	r2,zero,1bd10 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   1bd0c:	e03ffc15 	stw	zero,-16(fp)
    }
    return result;
   1bd10:	e0bffc17 	ldw	r2,-16(fp)
}
   1bd14:	e037883a 	mov	sp,fp
   1bd18:	dfc00117 	ldw	ra,4(sp)
   1bd1c:	df000017 	ldw	fp,0(sp)
   1bd20:	dec00204 	addi	sp,sp,8
   1bd24:	f800283a 	ret

0001bd28 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   1bd28:	defffb04 	addi	sp,sp,-20
   1bd2c:	dfc00415 	stw	ra,16(sp)
   1bd30:	df000315 	stw	fp,12(sp)
   1bd34:	df000304 	addi	fp,sp,12
   1bd38:	e13ffd15 	stw	r4,-12(fp)
    int index = 0;
   1bd3c:	e03fff15 	stw	zero,-4(fp)
    int length = strlen(name);
   1bd40:	e13ffd17 	ldw	r4,-12(fp)
   1bd44:	000d6fc0 	call	d6fc <strlen>
   1bd48:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   1bd4c:	e03fff15 	stw	zero,-4(fp)
   1bd50:	00001506 	br	1bda8 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   1bd54:	e0bfff17 	ldw	r2,-4(fp)
   1bd58:	e0fffd17 	ldw	r3,-12(fp)
   1bd5c:	1885883a 	add	r2,r3,r2
   1bd60:	10800003 	ldbu	r2,0(r2)
   1bd64:	10803fcc 	andi	r2,r2,255
   1bd68:	1080201c 	xori	r2,r2,128
   1bd6c:	10bfe004 	addi	r2,r2,-128
   1bd70:	10801720 	cmpeqi	r2,r2,92
   1bd74:	10000f1e 	bne	r2,zero,1bdb4 <get_dir_divider_location+0x8c>
   1bd78:	e0bfff17 	ldw	r2,-4(fp)
   1bd7c:	e0fffd17 	ldw	r3,-12(fp)
   1bd80:	1885883a 	add	r2,r3,r2
   1bd84:	10800003 	ldbu	r2,0(r2)
   1bd88:	10803fcc 	andi	r2,r2,255
   1bd8c:	1080201c 	xori	r2,r2,128
   1bd90:	10bfe004 	addi	r2,r2,-128
   1bd94:	10800be0 	cmpeqi	r2,r2,47
   1bd98:	1000061e 	bne	r2,zero,1bdb4 <get_dir_divider_location+0x8c>
    for(index = 0; index < length; index++)
   1bd9c:	e0bfff17 	ldw	r2,-4(fp)
   1bda0:	10800044 	addi	r2,r2,1
   1bda4:	e0bfff15 	stw	r2,-4(fp)
   1bda8:	e0ffff17 	ldw	r3,-4(fp)
   1bdac:	e0bffe17 	ldw	r2,-8(fp)
   1bdb0:	18bfe816 	blt	r3,r2,1bd54 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
   1bdb4:	e0ffff17 	ldw	r3,-4(fp)
   1bdb8:	e0bffe17 	ldw	r2,-8(fp)
   1bdbc:	1880021e 	bne	r3,r2,1bdc8 <get_dir_divider_location+0xa0>
    {
        index = -1;
   1bdc0:	00bfffc4 	movi	r2,-1
   1bdc4:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return index;
   1bdc8:	e0bfff17 	ldw	r2,-4(fp)
}
   1bdcc:	e037883a 	mov	sp,fp
   1bdd0:	dfc00117 	ldw	ra,4(sp)
   1bdd4:	df000017 	ldw	fp,0(sp)
   1bdd8:	dec00204 	addi	sp,sp,8
   1bddc:	f800283a 	ret

0001bde0 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   1bde0:	defffa04 	addi	sp,sp,-24
   1bde4:	df000515 	stw	fp,20(sp)
   1bde8:	df000504 	addi	fp,sp,20
   1bdec:	e13ffd15 	stw	r4,-12(fp)
   1bdf0:	e17ffc15 	stw	r5,-16(fp)
   1bdf4:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
   1bdf8:	00800044 	movi	r2,1
   1bdfc:	e0bfff15 	stw	r2,-4(fp)
	int index;

    for (index = 0; index < 8; index++)
   1be00:	e03ffe15 	stw	zero,-8(fp)
   1be04:	00004606 	br	1bf20 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   1be08:	e0fffd17 	ldw	r3,-12(fp)
   1be0c:	e0bffe17 	ldw	r2,-8(fp)
   1be10:	1885883a 	add	r2,r3,r2
   1be14:	10800003 	ldbu	r2,0(r2)
   1be18:	10803fcc 	andi	r2,r2,255
   1be1c:	10801870 	cmpltui	r2,r2,97
   1be20:	1000101e 	bne	r2,zero,1be64 <match_file_record_to_name_ext+0x84>
   1be24:	e0fffd17 	ldw	r3,-12(fp)
   1be28:	e0bffe17 	ldw	r2,-8(fp)
   1be2c:	1885883a 	add	r2,r3,r2
   1be30:	10800003 	ldbu	r2,0(r2)
   1be34:	10803fcc 	andi	r2,r2,255
   1be38:	10801ee8 	cmpgeui	r2,r2,123
   1be3c:	1000091e 	bne	r2,zero,1be64 <match_file_record_to_name_ext+0x84>
   1be40:	e0fffd17 	ldw	r3,-12(fp)
   1be44:	e0bffe17 	ldw	r2,-8(fp)
   1be48:	1885883a 	add	r2,r3,r2
   1be4c:	10800003 	ldbu	r2,0(r2)
   1be50:	10bff804 	addi	r2,r2,-32
   1be54:	10c03fcc 	andi	r3,r2,255
   1be58:	18c0201c 	xori	r3,r3,128
   1be5c:	18ffe004 	addi	r3,r3,-128
   1be60:	00000706 	br	1be80 <match_file_record_to_name_ext+0xa0>
   1be64:	e0fffd17 	ldw	r3,-12(fp)
   1be68:	e0bffe17 	ldw	r2,-8(fp)
   1be6c:	1885883a 	add	r2,r3,r2
   1be70:	10800003 	ldbu	r2,0(r2)
   1be74:	10c03fcc 	andi	r3,r2,255
   1be78:	18c0201c 	xori	r3,r3,128
   1be7c:	18ffe004 	addi	r3,r3,-128
   1be80:	e0bffe17 	ldw	r2,-8(fp)
   1be84:	e13ffc17 	ldw	r4,-16(fp)
   1be88:	2085883a 	add	r2,r4,r2
   1be8c:	10800003 	ldbu	r2,0(r2)
   1be90:	10803fcc 	andi	r2,r2,255
   1be94:	1080201c 	xori	r2,r2,128
   1be98:	10bfe004 	addi	r2,r2,-128
   1be9c:	10801850 	cmplti	r2,r2,97
   1bea0:	1000121e 	bne	r2,zero,1beec <match_file_record_to_name_ext+0x10c>
   1bea4:	e0bffe17 	ldw	r2,-8(fp)
   1bea8:	e13ffc17 	ldw	r4,-16(fp)
   1beac:	2085883a 	add	r2,r4,r2
   1beb0:	10800003 	ldbu	r2,0(r2)
   1beb4:	10803fcc 	andi	r2,r2,255
   1beb8:	1080201c 	xori	r2,r2,128
   1bebc:	10bfe004 	addi	r2,r2,-128
   1bec0:	10801ec8 	cmpgei	r2,r2,123
   1bec4:	1000091e 	bne	r2,zero,1beec <match_file_record_to_name_ext+0x10c>
   1bec8:	e0bffe17 	ldw	r2,-8(fp)
   1becc:	e13ffc17 	ldw	r4,-16(fp)
   1bed0:	2085883a 	add	r2,r4,r2
   1bed4:	10800003 	ldbu	r2,0(r2)
   1bed8:	10bff804 	addi	r2,r2,-32
   1bedc:	10803fcc 	andi	r2,r2,255
   1bee0:	1080201c 	xori	r2,r2,128
   1bee4:	10bfe004 	addi	r2,r2,-128
   1bee8:	00000706 	br	1bf08 <match_file_record_to_name_ext+0x128>
   1beec:	e0bffe17 	ldw	r2,-8(fp)
   1bef0:	e13ffc17 	ldw	r4,-16(fp)
   1bef4:	2085883a 	add	r2,r4,r2
   1bef8:	10800003 	ldbu	r2,0(r2)
   1befc:	10803fcc 	andi	r2,r2,255
   1bf00:	1080201c 	xori	r2,r2,128
   1bf04:	10bfe004 	addi	r2,r2,-128
   1bf08:	18800226 	beq	r3,r2,1bf14 <match_file_record_to_name_ext+0x134>
        {
            match = false;
   1bf0c:	e03fff15 	stw	zero,-4(fp)
			break;
   1bf10:	00000606 	br	1bf2c <match_file_record_to_name_ext+0x14c>
    for (index = 0; index < 8; index++)
   1bf14:	e0bffe17 	ldw	r2,-8(fp)
   1bf18:	10800044 	addi	r2,r2,1
   1bf1c:	e0bffe15 	stw	r2,-8(fp)
   1bf20:	e0bffe17 	ldw	r2,-8(fp)
   1bf24:	10800210 	cmplti	r2,r2,8
   1bf28:	103fb71e 	bne	r2,zero,1be08 <match_file_record_to_name_ext+0x28>
        }
    }
    for (index = 0; index < 3; index++)
   1bf2c:	e03ffe15 	stw	zero,-8(fp)
   1bf30:	00004606 	br	1c04c <match_file_record_to_name_ext+0x26c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   1bf34:	e0fffd17 	ldw	r3,-12(fp)
   1bf38:	e0bffe17 	ldw	r2,-8(fp)
   1bf3c:	1885883a 	add	r2,r3,r2
   1bf40:	10800203 	ldbu	r2,8(r2)
   1bf44:	10803fcc 	andi	r2,r2,255
   1bf48:	10801870 	cmpltui	r2,r2,97
   1bf4c:	1000101e 	bne	r2,zero,1bf90 <match_file_record_to_name_ext+0x1b0>
   1bf50:	e0fffd17 	ldw	r3,-12(fp)
   1bf54:	e0bffe17 	ldw	r2,-8(fp)
   1bf58:	1885883a 	add	r2,r3,r2
   1bf5c:	10800203 	ldbu	r2,8(r2)
   1bf60:	10803fcc 	andi	r2,r2,255
   1bf64:	10801ee8 	cmpgeui	r2,r2,123
   1bf68:	1000091e 	bne	r2,zero,1bf90 <match_file_record_to_name_ext+0x1b0>
   1bf6c:	e0fffd17 	ldw	r3,-12(fp)
   1bf70:	e0bffe17 	ldw	r2,-8(fp)
   1bf74:	1885883a 	add	r2,r3,r2
   1bf78:	10800203 	ldbu	r2,8(r2)
   1bf7c:	10bff804 	addi	r2,r2,-32
   1bf80:	10c03fcc 	andi	r3,r2,255
   1bf84:	18c0201c 	xori	r3,r3,128
   1bf88:	18ffe004 	addi	r3,r3,-128
   1bf8c:	00000706 	br	1bfac <match_file_record_to_name_ext+0x1cc>
   1bf90:	e0fffd17 	ldw	r3,-12(fp)
   1bf94:	e0bffe17 	ldw	r2,-8(fp)
   1bf98:	1885883a 	add	r2,r3,r2
   1bf9c:	10800203 	ldbu	r2,8(r2)
   1bfa0:	10c03fcc 	andi	r3,r2,255
   1bfa4:	18c0201c 	xori	r3,r3,128
   1bfa8:	18ffe004 	addi	r3,r3,-128
   1bfac:	e0bffe17 	ldw	r2,-8(fp)
   1bfb0:	e13ffb17 	ldw	r4,-20(fp)
   1bfb4:	2085883a 	add	r2,r4,r2
   1bfb8:	10800003 	ldbu	r2,0(r2)
   1bfbc:	10803fcc 	andi	r2,r2,255
   1bfc0:	1080201c 	xori	r2,r2,128
   1bfc4:	10bfe004 	addi	r2,r2,-128
   1bfc8:	10801850 	cmplti	r2,r2,97
   1bfcc:	1000121e 	bne	r2,zero,1c018 <match_file_record_to_name_ext+0x238>
   1bfd0:	e0bffe17 	ldw	r2,-8(fp)
   1bfd4:	e13ffb17 	ldw	r4,-20(fp)
   1bfd8:	2085883a 	add	r2,r4,r2
   1bfdc:	10800003 	ldbu	r2,0(r2)
   1bfe0:	10803fcc 	andi	r2,r2,255
   1bfe4:	1080201c 	xori	r2,r2,128
   1bfe8:	10bfe004 	addi	r2,r2,-128
   1bfec:	10801ec8 	cmpgei	r2,r2,123
   1bff0:	1000091e 	bne	r2,zero,1c018 <match_file_record_to_name_ext+0x238>
   1bff4:	e0bffe17 	ldw	r2,-8(fp)
   1bff8:	e13ffb17 	ldw	r4,-20(fp)
   1bffc:	2085883a 	add	r2,r4,r2
   1c000:	10800003 	ldbu	r2,0(r2)
   1c004:	10bff804 	addi	r2,r2,-32
   1c008:	10803fcc 	andi	r2,r2,255
   1c00c:	1080201c 	xori	r2,r2,128
   1c010:	10bfe004 	addi	r2,r2,-128
   1c014:	00000706 	br	1c034 <match_file_record_to_name_ext+0x254>
   1c018:	e0bffe17 	ldw	r2,-8(fp)
   1c01c:	e13ffb17 	ldw	r4,-20(fp)
   1c020:	2085883a 	add	r2,r4,r2
   1c024:	10800003 	ldbu	r2,0(r2)
   1c028:	10803fcc 	andi	r2,r2,255
   1c02c:	1080201c 	xori	r2,r2,128
   1c030:	10bfe004 	addi	r2,r2,-128
   1c034:	18800226 	beq	r3,r2,1c040 <match_file_record_to_name_ext+0x260>
        {
            match = false;
   1c038:	e03fff15 	stw	zero,-4(fp)
			break;
   1c03c:	00000606 	br	1c058 <match_file_record_to_name_ext+0x278>
    for (index = 0; index < 3; index++)
   1c040:	e0bffe17 	ldw	r2,-8(fp)
   1c044:	10800044 	addi	r2,r2,1
   1c048:	e0bffe15 	stw	r2,-8(fp)
   1c04c:	e0bffe17 	ldw	r2,-8(fp)
   1c050:	108000d0 	cmplti	r2,r2,3
   1c054:	103fb71e 	bne	r2,zero,1bf34 <match_file_record_to_name_ext+0x154>
        }
    }
	return match;
   1c058:	e0bfff17 	ldw	r2,-4(fp)
}
   1c05c:	e037883a 	mov	sp,fp
   1c060:	df000017 	ldw	fp,0(sp)
   1c064:	dec00104 	addi	sp,sp,4
   1c068:	f800283a 	ret

0001c06c <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   1c06c:	deffe704 	addi	sp,sp,-100
   1c070:	dfc01815 	stw	ra,96(sp)
   1c074:	df001715 	stw	fp,92(sp)
   1c078:	df001704 	addi	fp,sp,92
   1c07c:	e13feb15 	stw	r4,-84(fp)
   1c080:	e17fea15 	stw	r5,-88(fp)
   1c084:	e1bfe915 	stw	r6,-92(fp)
    bool result = false;
   1c088:	e03fff15 	stw	zero,-4(fp)
    int home_dir_cluster = 0;
   1c08c:	e03ffe15 	stw	zero,-8(fp)
    int location, index;
    int start_location = 0;
   1c090:	e03ffb15 	stw	zero,-20(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   1c094:	e13feb17 	ldw	r4,-84(fp)
   1c098:	001bd280 	call	1bd28 <get_dir_divider_location>
   1c09c:	e0bffd15 	stw	r2,-12(fp)
    while (location > 0)
   1c0a0:	00011d06 	br	1c518 <get_home_directory_cluster_for_file+0x4ac>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1c0a4:	00880834 	movhi	r2,8224
   1c0a8:	10880804 	addi	r2,r2,8224
   1c0ac:	e0bfee15 	stw	r2,-72(fp)
   1c0b0:	00880834 	movhi	r2,8224
   1c0b4:	10880804 	addi	r2,r2,8224
   1c0b8:	e0bfef15 	stw	r2,-68(fp)
        char extension[3] = { ' ', ' ', ' ' };
   1c0bc:	00800804 	movi	r2,32
   1c0c0:	e0bfed45 	stb	r2,-75(fp)
   1c0c4:	00800804 	movi	r2,32
   1c0c8:	e0bfed85 	stb	r2,-74(fp)
   1c0cc:	00800804 	movi	r2,32
   1c0d0:	e0bfedc5 	stb	r2,-73(fp)
        int ext_index = -1;
   1c0d4:	00bfffc4 	movi	r2,-1
   1c0d8:	e0bffa15 	stw	r2,-24(fp)
        int new_cluster = home_dir_cluster;
   1c0dc:	e0bffe17 	ldw	r2,-8(fp)
   1c0e0:	e0bff915 	stw	r2,-28(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1c0e4:	e03ffc15 	stw	zero,-16(fp)
   1c0e8:	00002b06 	br	1c198 <get_home_directory_cluster_for_file+0x12c>
        {
            if (file_name[index+start_location] == '.')
   1c0ec:	e0fffc17 	ldw	r3,-16(fp)
   1c0f0:	e0bffb17 	ldw	r2,-20(fp)
   1c0f4:	1885883a 	add	r2,r3,r2
   1c0f8:	1007883a 	mov	r3,r2
   1c0fc:	e0bfeb17 	ldw	r2,-84(fp)
   1c100:	10c5883a 	add	r2,r2,r3
   1c104:	10800003 	ldbu	r2,0(r2)
   1c108:	10803fcc 	andi	r2,r2,255
   1c10c:	1080201c 	xori	r2,r2,128
   1c110:	10bfe004 	addi	r2,r2,-128
   1c114:	10800b98 	cmpnei	r2,r2,46
   1c118:	1000031e 	bne	r2,zero,1c128 <get_home_directory_cluster_for_file+0xbc>
            {
                ext_index = index;
   1c11c:	e0bffc17 	ldw	r2,-16(fp)
   1c120:	e0bffa15 	stw	r2,-24(fp)
   1c124:	00001906 	br	1c18c <get_home_directory_cluster_for_file+0x120>
            }
            else if (ext_index < 0)
   1c128:	e0bffa17 	ldw	r2,-24(fp)
   1c12c:	10000b0e 	bge	r2,zero,1c15c <get_home_directory_cluster_for_file+0xf0>
            {
                name[index] = file_name[index+start_location];
   1c130:	e0fffc17 	ldw	r3,-16(fp)
   1c134:	e0bffb17 	ldw	r2,-20(fp)
   1c138:	1885883a 	add	r2,r3,r2
   1c13c:	1007883a 	mov	r3,r2
   1c140:	e0bfeb17 	ldw	r2,-84(fp)
   1c144:	10c5883a 	add	r2,r2,r3
   1c148:	10c00003 	ldbu	r3,0(r2)
   1c14c:	e0bffc17 	ldw	r2,-16(fp)
   1c150:	e085883a 	add	r2,fp,r2
   1c154:	10ffee05 	stb	r3,-72(r2)
   1c158:	00000c06 	br	1c18c <get_home_directory_cluster_for_file+0x120>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   1c15c:	e0fffc17 	ldw	r3,-16(fp)
   1c160:	e0bffb17 	ldw	r2,-20(fp)
   1c164:	1885883a 	add	r2,r3,r2
   1c168:	1007883a 	mov	r3,r2
   1c16c:	e0bfeb17 	ldw	r2,-84(fp)
   1c170:	10c7883a 	add	r3,r2,r3
   1c174:	e13ffc17 	ldw	r4,-16(fp)
   1c178:	e0bffa17 	ldw	r2,-24(fp)
   1c17c:	2085c83a 	sub	r2,r4,r2
   1c180:	18c00003 	ldbu	r3,0(r3)
   1c184:	e085883a 	add	r2,fp,r2
   1c188:	10ffed45 	stb	r3,-75(r2)
        for (index = 0; index < location; index++)
   1c18c:	e0bffc17 	ldw	r2,-16(fp)
   1c190:	10800044 	addi	r2,r2,1
   1c194:	e0bffc15 	stw	r2,-16(fp)
   1c198:	e0fffc17 	ldw	r3,-16(fp)
   1c19c:	e0bffd17 	ldw	r2,-12(fp)
   1c1a0:	18bfd216 	blt	r3,r2,1c0ec <get_home_directory_cluster_for_file+0x80>
            }
        }
        
        if (home_dir_cluster == 0)
   1c1a4:	e0bffe17 	ldw	r2,-8(fp)
   1c1a8:	1000591e 	bne	r2,zero,1c310 <get_home_directory_cluster_for_file+0x2a4>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1c1ac:	008000b4 	movhi	r2,2
   1c1b0:	1096140b 	ldhu	r2,22608(r2)
   1c1b4:	10bfffcc 	andi	r2,r2,65535
   1c1b8:	1006917a 	slli	r3,r2,5
   1c1bc:	008000b4 	movhi	r2,2
   1c1c0:	1096120b 	ldhu	r2,22600(r2)
   1c1c4:	10bfffcc 	andi	r2,r2,65535
   1c1c8:	1885283a 	div	r2,r3,r2
   1c1cc:	e0bff115 	stw	r2,-60(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1c1d0:	e03ff815 	stw	zero,-32(fp)
   1c1d4:	00003a06 	br	1c2c0 <get_home_directory_cluster_for_file+0x254>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   1c1d8:	008000b4 	movhi	r2,2
   1c1dc:	10d62217 	ldw	r3,22664(r2)
   1c1e0:	e0bff817 	ldw	r2,-32(fp)
   1c1e4:	1885883a 	add	r2,r3,r2
   1c1e8:	1007883a 	mov	r3,r2
   1c1ec:	d0a75217 	ldw	r2,-25272(gp)
   1c1f0:	100b883a 	mov	r5,r2
   1c1f4:	1809883a 	mov	r4,r3
   1c1f8:	001aa300 	call	1aa30 <Read_Sector_Data>
   1c1fc:	10003426 	beq	r2,zero,1c2d0 <get_home_directory_cluster_for_file+0x264>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1c200:	e03ff715 	stw	zero,-36(fp)
   1c204:	00002506 	br	1c29c <get_home_directory_cluster_for_file+0x230>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1c208:	e0bff717 	ldw	r2,-36(fp)
   1c20c:	1004917a 	slli	r2,r2,5
   1c210:	e0fff817 	ldw	r3,-32(fp)
   1c214:	180f883a 	mov	r7,r3
   1c218:	000d883a 	mov	r6,zero
   1c21c:	e17fe917 	ldw	r5,-92(fp)
   1c220:	1009883a 	mov	r4,r2
   1c224:	001ae3c0 	call	1ae3c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1c228:	e0bfe917 	ldw	r2,-92(fp)
   1c22c:	10800003 	ldbu	r2,0(r2)
   1c230:	10803fcc 	andi	r2,r2,255
   1c234:	10803960 	cmpeqi	r2,r2,229
   1c238:	1000151e 	bne	r2,zero,1c290 <get_home_directory_cluster_for_file+0x224>
   1c23c:	e0bfe917 	ldw	r2,-92(fp)
   1c240:	10800003 	ldbu	r2,0(r2)
   1c244:	10803fcc 	andi	r2,r2,255
   1c248:	10001126 	beq	r2,zero,1c290 <get_home_directory_cluster_for_file+0x224>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1c24c:	e0ffed44 	addi	r3,fp,-75
   1c250:	e0bfee04 	addi	r2,fp,-72
   1c254:	180d883a 	mov	r6,r3
   1c258:	100b883a 	mov	r5,r2
   1c25c:	e13fe917 	ldw	r4,-92(fp)
   1c260:	001bde00 	call	1bde0 <match_file_record_to_name_ext>
   1c264:	e0bff015 	stw	r2,-64(fp)
                            if (match)
   1c268:	e0bff017 	ldw	r2,-64(fp)
   1c26c:	10000826 	beq	r2,zero,1c290 <get_home_directory_cluster_for_file+0x224>
                            {
                                new_cluster = file_record->start_cluster_index;
   1c270:	e0bfe917 	ldw	r2,-92(fp)
   1c274:	1080058b 	ldhu	r2,22(r2)
   1c278:	10bfffcc 	andi	r2,r2,65535
   1c27c:	e0bff915 	stw	r2,-28(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   1c280:	e0bfe917 	ldw	r2,-92(fp)
   1c284:	00c00044 	movi	r3,1
   1c288:	10c00a15 	stw	r3,40(r2)
                                break;
   1c28c:	00000606 	br	1c2a8 <get_home_directory_cluster_for_file+0x23c>
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1c290:	e0bff717 	ldw	r2,-36(fp)
   1c294:	10800044 	addi	r2,r2,1
   1c298:	e0bff715 	stw	r2,-36(fp)
   1c29c:	e0bff717 	ldw	r2,-36(fp)
   1c2a0:	10800410 	cmplti	r2,r2,16
   1c2a4:	103fd81e 	bne	r2,zero,1c208 <get_home_directory_cluster_for_file+0x19c>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   1c2a8:	e0fff917 	ldw	r3,-28(fp)
   1c2ac:	e0bffe17 	ldw	r2,-8(fp)
   1c2b0:	1880091e 	bne	r3,r2,1c2d8 <get_home_directory_cluster_for_file+0x26c>
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1c2b4:	e0bff817 	ldw	r2,-32(fp)
   1c2b8:	10800044 	addi	r2,r2,1
   1c2bc:	e0bff815 	stw	r2,-32(fp)
   1c2c0:	e0fff817 	ldw	r3,-32(fp)
   1c2c4:	e0bff117 	ldw	r2,-60(fp)
   1c2c8:	18bfc316 	blt	r3,r2,1c1d8 <get_home_directory_cluster_for_file+0x16c>
   1c2cc:	00000306 	br	1c2dc <get_home_directory_cluster_for_file+0x270>
                    break;
   1c2d0:	0001883a 	nop
   1c2d4:	00000106 	br	1c2dc <get_home_directory_cluster_for_file+0x270>
                {
                    break;
   1c2d8:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
   1c2dc:	e0fff917 	ldw	r3,-28(fp)
   1c2e0:	e0bffe17 	ldw	r2,-8(fp)
   1c2e4:	18800826 	beq	r3,r2,1c308 <get_home_directory_cluster_for_file+0x29c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1c2e8:	e0bff917 	ldw	r2,-28(fp)
   1c2ec:	e0bffe15 	stw	r2,-8(fp)
                start_location = start_location+location+1;
   1c2f0:	e0fffb17 	ldw	r3,-20(fp)
   1c2f4:	e0bffd17 	ldw	r2,-12(fp)
   1c2f8:	1885883a 	add	r2,r3,r2
   1c2fc:	10800044 	addi	r2,r2,1
   1c300:	e0bffb15 	stw	r2,-20(fp)
   1c304:	00007a06 	br	1c4f0 <get_home_directory_cluster_for_file+0x484>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1c308:	0005883a 	mov	r2,zero
   1c30c:	00008e06 	br	1c548 <get_home_directory_cluster_for_file+0x4dc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   1c310:	e0bffe17 	ldw	r2,-8(fp)
   1c314:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1c318:	e0bff417 	ldw	r2,-48(fp)
   1c31c:	10ffff84 	addi	r3,r2,-2
   1c320:	008000b4 	movhi	r2,2
   1c324:	10961283 	ldbu	r2,22602(r2)
   1c328:	10803fcc 	andi	r2,r2,255
   1c32c:	1885383a 	mul	r2,r3,r2
   1c330:	1007883a 	mov	r3,r2
   1c334:	008000b4 	movhi	r2,2
   1c338:	10962317 	ldw	r2,22668(r2)
   1c33c:	1885883a 	add	r2,r3,r2
   1c340:	e0bff315 	stw	r2,-52(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1c344:	e03ff615 	stw	zero,-40(fp)
   1c348:	00003606 	br	1c424 <get_home_directory_cluster_for_file+0x3b8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1c34c:	e0fff617 	ldw	r3,-40(fp)
   1c350:	e0bff317 	ldw	r2,-52(fp)
   1c354:	1885883a 	add	r2,r3,r2
   1c358:	d0e75217 	ldw	r3,-25272(gp)
   1c35c:	180b883a 	mov	r5,r3
   1c360:	1009883a 	mov	r4,r2
   1c364:	001aa300 	call	1aa30 <Read_Sector_Data>
   1c368:	10003426 	beq	r2,zero,1c43c <get_home_directory_cluster_for_file+0x3d0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1c36c:	e03ff515 	stw	zero,-44(fp)
   1c370:	00002306 	br	1c400 <get_home_directory_cluster_for_file+0x394>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1c374:	e0bff517 	ldw	r2,-44(fp)
   1c378:	1004917a 	slli	r2,r2,5
   1c37c:	e0fff417 	ldw	r3,-48(fp)
   1c380:	e13ff617 	ldw	r4,-40(fp)
   1c384:	200f883a 	mov	r7,r4
   1c388:	180d883a 	mov	r6,r3
   1c38c:	e17fe917 	ldw	r5,-92(fp)
   1c390:	1009883a 	mov	r4,r2
   1c394:	001ae3c0 	call	1ae3c <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1c398:	e0bfe917 	ldw	r2,-92(fp)
   1c39c:	10800003 	ldbu	r2,0(r2)
   1c3a0:	10803fcc 	andi	r2,r2,255
   1c3a4:	10803960 	cmpeqi	r2,r2,229
   1c3a8:	1000121e 	bne	r2,zero,1c3f4 <get_home_directory_cluster_for_file+0x388>
   1c3ac:	e0bfe917 	ldw	r2,-92(fp)
   1c3b0:	10800003 	ldbu	r2,0(r2)
   1c3b4:	10803fcc 	andi	r2,r2,255
   1c3b8:	10000e26 	beq	r2,zero,1c3f4 <get_home_directory_cluster_for_file+0x388>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   1c3bc:	e0ffed44 	addi	r3,fp,-75
   1c3c0:	e0bfee04 	addi	r2,fp,-72
   1c3c4:	180d883a 	mov	r6,r3
   1c3c8:	100b883a 	mov	r5,r2
   1c3cc:	e13fe917 	ldw	r4,-92(fp)
   1c3d0:	001bde00 	call	1bde0 <match_file_record_to_name_ext>
   1c3d4:	e0bff215 	stw	r2,-56(fp)
                                if (match)
   1c3d8:	e0bff217 	ldw	r2,-56(fp)
   1c3dc:	10000526 	beq	r2,zero,1c3f4 <get_home_directory_cluster_for_file+0x388>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   1c3e0:	e0bfe917 	ldw	r2,-92(fp)
   1c3e4:	1080058b 	ldhu	r2,22(r2)
   1c3e8:	10bfffcc 	andi	r2,r2,65535
   1c3ec:	e0bff915 	stw	r2,-28(fp)
                                    break;
   1c3f0:	00000606 	br	1c40c <get_home_directory_cluster_for_file+0x3a0>
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1c3f4:	e0bff517 	ldw	r2,-44(fp)
   1c3f8:	10800044 	addi	r2,r2,1
   1c3fc:	e0bff515 	stw	r2,-44(fp)
   1c400:	e0bff517 	ldw	r2,-44(fp)
   1c404:	10800410 	cmplti	r2,r2,16
   1c408:	103fda1e 	bne	r2,zero,1c374 <get_home_directory_cluster_for_file+0x308>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   1c40c:	e0fff917 	ldw	r3,-28(fp)
   1c410:	e0bffe17 	ldw	r2,-8(fp)
   1c414:	18800b1e 	bne	r3,r2,1c444 <get_home_directory_cluster_for_file+0x3d8>
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1c418:	e0bff617 	ldw	r2,-40(fp)
   1c41c:	10800044 	addi	r2,r2,1
   1c420:	e0bff615 	stw	r2,-40(fp)
   1c424:	008000b4 	movhi	r2,2
   1c428:	10961283 	ldbu	r2,22602(r2)
   1c42c:	10803fcc 	andi	r2,r2,255
   1c430:	e0fff617 	ldw	r3,-40(fp)
   1c434:	18bfc516 	blt	r3,r2,1c34c <get_home_directory_cluster_for_file+0x2e0>
   1c438:	00000306 	br	1c448 <get_home_directory_cluster_for_file+0x3dc>
                        break;
   1c43c:	0001883a 	nop
   1c440:	00000106 	br	1c448 <get_home_directory_cluster_for_file+0x3dc>
                    {
                        break;
   1c444:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   1c448:	e0fff917 	ldw	r3,-28(fp)
   1c44c:	e0bffe17 	ldw	r2,-8(fp)
   1c450:	1880141e 	bne	r3,r2,1c4a4 <get_home_directory_cluster_for_file+0x438>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   1c454:	e0bff917 	ldw	r2,-28(fp)
   1c458:	e0ffec84 	addi	r3,fp,-78
   1c45c:	180b883a 	mov	r5,r3
   1c460:	1009883a 	mov	r4,r2
   1c464:	001ab080 	call	1ab08 <get_cluster_flag>
   1c468:	10000c26 	beq	r2,zero,1c49c <get_home_directory_cluster_for_file+0x430>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1c46c:	e0bfec8b 	ldhu	r2,-78(fp)
   1c470:	10bfffcc 	andi	r2,r2,65535
   1c474:	10fffe0c 	andi	r3,r2,65528
   1c478:	00bffe14 	movui	r2,65528
   1c47c:	1880021e 	bne	r3,r2,1c488 <get_home_directory_cluster_for_file+0x41c>
						{
							return false;
   1c480:	0005883a 	mov	r2,zero
   1c484:	00003006 	br	1c548 <get_home_directory_cluster_for_file+0x4dc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   1c488:	e0bfec8b 	ldhu	r2,-78(fp)
   1c48c:	10bfffcc 	andi	r2,r2,65535
   1c490:	10bffe0c 	andi	r2,r2,65528
   1c494:	e0bff915 	stw	r2,-28(fp)
   1c498:	00000206 	br	1c4a4 <get_home_directory_cluster_for_file+0x438>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   1c49c:	0005883a 	mov	r2,zero
   1c4a0:	00002906 	br	1c548 <get_home_directory_cluster_for_file+0x4dc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   1c4a4:	e0bff417 	ldw	r2,-48(fp)
   1c4a8:	00fffdd4 	movui	r3,65527
   1c4ac:	18800316 	blt	r3,r2,1c4bc <get_home_directory_cluster_for_file+0x450>
   1c4b0:	e0fff917 	ldw	r3,-28(fp)
   1c4b4:	e0bffe17 	ldw	r2,-8(fp)
   1c4b8:	18bf9726 	beq	r3,r2,1c318 <get_home_directory_cluster_for_file+0x2ac>
            if (new_cluster != home_dir_cluster)
   1c4bc:	e0fff917 	ldw	r3,-28(fp)
   1c4c0:	e0bffe17 	ldw	r2,-8(fp)
   1c4c4:	18800826 	beq	r3,r2,1c4e8 <get_home_directory_cluster_for_file+0x47c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1c4c8:	e0bff917 	ldw	r2,-28(fp)
   1c4cc:	e0bffe15 	stw	r2,-8(fp)
                start_location = start_location+location+1;
   1c4d0:	e0fffb17 	ldw	r3,-20(fp)
   1c4d4:	e0bffd17 	ldw	r2,-12(fp)
   1c4d8:	1885883a 	add	r2,r3,r2
   1c4dc:	10800044 	addi	r2,r2,1
   1c4e0:	e0bffb15 	stw	r2,-20(fp)
   1c4e4:	00000206 	br	1c4f0 <get_home_directory_cluster_for_file+0x484>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1c4e8:	0005883a 	mov	r2,zero
   1c4ec:	00001606 	br	1c548 <get_home_directory_cluster_for_file+0x4dc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   1c4f0:	e0bffb17 	ldw	r2,-20(fp)
   1c4f4:	e0ffeb17 	ldw	r3,-84(fp)
   1c4f8:	1885883a 	add	r2,r3,r2
   1c4fc:	1009883a 	mov	r4,r2
   1c500:	001bd280 	call	1bd28 <get_dir_divider_location>
   1c504:	e0bffd15 	stw	r2,-12(fp)
        if (location < 0)
   1c508:	e0bffd17 	ldw	r2,-12(fp)
   1c50c:	1000020e 	bge	r2,zero,1c518 <get_home_directory_cluster_for_file+0x4ac>
        {
            // Directory has been located.
            result = true;
   1c510:	00800044 	movi	r2,1
   1c514:	e0bfff15 	stw	r2,-4(fp)
    while (location > 0)
   1c518:	e0bffd17 	ldw	r2,-12(fp)
   1c51c:	00bee116 	blt	zero,r2,1c0a4 <get_home_directory_cluster_for_file+0x38>
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   1c520:	e0bfea17 	ldw	r2,-88(fp)
   1c524:	e0fffe17 	ldw	r3,-8(fp)
   1c528:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   1c52c:	e0bffe17 	ldw	r2,-8(fp)
   1c530:	1000041e 	bne	r2,zero,1c544 <get_home_directory_cluster_for_file+0x4d8>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   1c534:	e0bfe917 	ldw	r2,-92(fp)
   1c538:	10000a15 	stw	zero,40(r2)
		result = true;
   1c53c:	00800044 	movi	r2,1
   1c540:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1c544:	e0bfff17 	ldw	r2,-4(fp)
}
   1c548:	e037883a 	mov	sp,fp
   1c54c:	dfc00117 	ldw	ra,4(sp)
   1c550:	df000017 	ldw	fp,0(sp)
   1c554:	dec00204 	addi	sp,sp,8
   1c558:	f800283a 	ret

0001c55c <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   1c55c:	deffe804 	addi	sp,sp,-96
   1c560:	dfc01715 	stw	ra,92(sp)
   1c564:	df001615 	stw	fp,88(sp)
   1c568:	df001604 	addi	fp,sp,88
   1c56c:	e13fec15 	stw	r4,-80(fp)
   1c570:	e17feb15 	stw	r5,-84(fp)
   1c574:	e1bfea15 	stw	r6,-88(fp)
    int location = get_dir_divider_location( file_name );
   1c578:	e13feb17 	ldw	r4,-84(fp)
   1c57c:	001bd280 	call	1bd28 <get_dir_divider_location>
   1c580:	e0bfff15 	stw	r2,-4(fp)
    int last_dir_separator = 0;
   1c584:	e03ffe15 	stw	zero,-8(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1c588:	00880834 	movhi	r2,8224
   1c58c:	10880804 	addi	r2,r2,8224
   1c590:	e0bfef15 	stw	r2,-68(fp)
   1c594:	00880834 	movhi	r2,8224
   1c598:	10880804 	addi	r2,r2,8224
   1c59c:	e0bff015 	stw	r2,-64(fp)
    char extension[3] = { ' ', ' ', ' ' };
   1c5a0:	00800804 	movi	r2,32
   1c5a4:	e0bfee45 	stb	r2,-71(fp)
   1c5a8:	00800804 	movi	r2,32
   1c5ac:	e0bfee85 	stb	r2,-70(fp)
   1c5b0:	00800804 	movi	r2,32
   1c5b4:	e0bfeec5 	stb	r2,-69(fp)
    int ext_index = -1;
   1c5b8:	00bfffc4 	movi	r2,-1
   1c5bc:	e0bffd15 	stw	r2,-12(fp)
    int cluster = directory_start_cluster;
   1c5c0:	e0bfec17 	ldw	r2,-80(fp)
   1c5c4:	e0bffc15 	stw	r2,-16(fp)
    int index;
	int length = strlen(file_name);
   1c5c8:	e13feb17 	ldw	r4,-84(fp)
   1c5cc:	000d6fc0 	call	d6fc <strlen>
   1c5d0:	e0bff515 	stw	r2,-44(fp)
    bool result = false;
   1c5d4:	e03ffa15 	stw	zero,-24(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   1c5d8:	00000b06 	br	1c608 <find_file_in_directory+0xac>
    {
        last_dir_separator = last_dir_separator+location+1;
   1c5dc:	e0fffe17 	ldw	r3,-8(fp)
   1c5e0:	e0bfff17 	ldw	r2,-4(fp)
   1c5e4:	1885883a 	add	r2,r3,r2
   1c5e8:	10800044 	addi	r2,r2,1
   1c5ec:	e0bffe15 	stw	r2,-8(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   1c5f0:	e0bffe17 	ldw	r2,-8(fp)
   1c5f4:	e0ffeb17 	ldw	r3,-84(fp)
   1c5f8:	1885883a 	add	r2,r3,r2
   1c5fc:	1009883a 	mov	r4,r2
   1c600:	001bd280 	call	1bd28 <get_dir_divider_location>
   1c604:	e0bfff15 	stw	r2,-4(fp)
    while (location > 0)
   1c608:	e0bfff17 	ldw	r2,-4(fp)
   1c60c:	00bff316 	blt	zero,r2,1c5dc <find_file_in_directory+0x80>
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1c610:	e0bffe17 	ldw	r2,-8(fp)
   1c614:	e0bffb15 	stw	r2,-20(fp)
   1c618:	00002506 	br	1c6b0 <find_file_in_directory+0x154>
    {
        if (file_name[index] == '.')
   1c61c:	e0bffb17 	ldw	r2,-20(fp)
   1c620:	e0ffeb17 	ldw	r3,-84(fp)
   1c624:	1885883a 	add	r2,r3,r2
   1c628:	10800003 	ldbu	r2,0(r2)
   1c62c:	10803fcc 	andi	r2,r2,255
   1c630:	1080201c 	xori	r2,r2,128
   1c634:	10bfe004 	addi	r2,r2,-128
   1c638:	10800b98 	cmpnei	r2,r2,46
   1c63c:	1000031e 	bne	r2,zero,1c64c <find_file_in_directory+0xf0>
        {
            ext_index = index;
   1c640:	e0bffb17 	ldw	r2,-20(fp)
   1c644:	e0bffd15 	stw	r2,-12(fp)
   1c648:	00001606 	br	1c6a4 <find_file_in_directory+0x148>
        }
        else if (ext_index < 0)
   1c64c:	e0bffd17 	ldw	r2,-12(fp)
   1c650:	10000a0e 	bge	r2,zero,1c67c <find_file_in_directory+0x120>
        {
            name[index-last_dir_separator] = file_name[index];
   1c654:	e0bffb17 	ldw	r2,-20(fp)
   1c658:	e0ffeb17 	ldw	r3,-84(fp)
   1c65c:	1887883a 	add	r3,r3,r2
   1c660:	e13ffb17 	ldw	r4,-20(fp)
   1c664:	e0bffe17 	ldw	r2,-8(fp)
   1c668:	2085c83a 	sub	r2,r4,r2
   1c66c:	18c00003 	ldbu	r3,0(r3)
   1c670:	e085883a 	add	r2,fp,r2
   1c674:	10ffef05 	stb	r3,-68(r2)
   1c678:	00000a06 	br	1c6a4 <find_file_in_directory+0x148>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   1c67c:	e0bffb17 	ldw	r2,-20(fp)
   1c680:	e0ffeb17 	ldw	r3,-84(fp)
   1c684:	1887883a 	add	r3,r3,r2
   1c688:	e13ffb17 	ldw	r4,-20(fp)
   1c68c:	e0bffd17 	ldw	r2,-12(fp)
   1c690:	2085c83a 	sub	r2,r4,r2
   1c694:	10bfffc4 	addi	r2,r2,-1
   1c698:	18c00003 	ldbu	r3,0(r3)
   1c69c:	e085883a 	add	r2,fp,r2
   1c6a0:	10ffee45 	stb	r3,-71(r2)
    for (index = last_dir_separator; index < length; index++)
   1c6a4:	e0bffb17 	ldw	r2,-20(fp)
   1c6a8:	10800044 	addi	r2,r2,1
   1c6ac:	e0bffb15 	stw	r2,-20(fp)
   1c6b0:	e0fffb17 	ldw	r3,-20(fp)
   1c6b4:	e0bff517 	ldw	r2,-44(fp)
   1c6b8:	18bfd816 	blt	r3,r2,1c61c <find_file_in_directory+0xc0>
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   1c6bc:	e0bfec17 	ldw	r2,-80(fp)
   1c6c0:	1000431e 	bne	r2,zero,1c7d0 <find_file_in_directory+0x274>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1c6c4:	008000b4 	movhi	r2,2
   1c6c8:	1096140b 	ldhu	r2,22608(r2)
   1c6cc:	10bfffcc 	andi	r2,r2,65535
   1c6d0:	1006917a 	slli	r3,r2,5
   1c6d4:	008000b4 	movhi	r2,2
   1c6d8:	1096120b 	ldhu	r2,22600(r2)
   1c6dc:	10bfffcc 	andi	r2,r2,65535
   1c6e0:	1885283a 	div	r2,r3,r2
   1c6e4:	e0bff215 	stw	r2,-56(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1c6e8:	e03ff915 	stw	zero,-28(fp)
   1c6ec:	00003406 	br	1c7c0 <find_file_in_directory+0x264>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1c6f0:	008000b4 	movhi	r2,2
   1c6f4:	10d62217 	ldw	r3,22664(r2)
   1c6f8:	e0bff917 	ldw	r2,-28(fp)
   1c6fc:	1885883a 	add	r2,r3,r2
   1c700:	1007883a 	mov	r3,r2
   1c704:	d0a75217 	ldw	r2,-25272(gp)
   1c708:	100b883a 	mov	r5,r2
   1c70c:	1809883a 	mov	r4,r3
   1c710:	001aa300 	call	1aa30 <Read_Sector_Data>
   1c714:	10009326 	beq	r2,zero,1c964 <find_file_in_directory+0x408>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1c718:	e03ff815 	stw	zero,-32(fp)
   1c71c:	00002006 	br	1c7a0 <find_file_in_directory+0x244>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1c720:	e0bff817 	ldw	r2,-32(fp)
   1c724:	1004917a 	slli	r2,r2,5
   1c728:	e0fff917 	ldw	r3,-28(fp)
   1c72c:	180f883a 	mov	r7,r3
   1c730:	000d883a 	mov	r6,zero
   1c734:	e17fea17 	ldw	r5,-88(fp)
   1c738:	1009883a 	mov	r4,r2
   1c73c:	001ae3c0 	call	1ae3c <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1c740:	e0bfea17 	ldw	r2,-88(fp)
   1c744:	10800003 	ldbu	r2,0(r2)
   1c748:	10803fcc 	andi	r2,r2,255
   1c74c:	10803960 	cmpeqi	r2,r2,229
   1c750:	1000101e 	bne	r2,zero,1c794 <find_file_in_directory+0x238>
   1c754:	e0bfea17 	ldw	r2,-88(fp)
   1c758:	10800003 	ldbu	r2,0(r2)
   1c75c:	10803fcc 	andi	r2,r2,255
   1c760:	10000c26 	beq	r2,zero,1c794 <find_file_in_directory+0x238>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   1c764:	e0ffee44 	addi	r3,fp,-71
   1c768:	e0bfef04 	addi	r2,fp,-68
   1c76c:	180d883a 	mov	r6,r3
   1c770:	100b883a 	mov	r5,r2
   1c774:	e13fea17 	ldw	r4,-88(fp)
   1c778:	001bde00 	call	1bde0 <match_file_record_to_name_ext>
   1c77c:	e0bff115 	stw	r2,-60(fp)

                        if (match)
   1c780:	e0bff117 	ldw	r2,-60(fp)
   1c784:	10000326 	beq	r2,zero,1c794 <find_file_in_directory+0x238>
                        {
                            result = true;
   1c788:	00800044 	movi	r2,1
   1c78c:	e0bffa15 	stw	r2,-24(fp)
                            break;
   1c790:	00000606 	br	1c7ac <find_file_in_directory+0x250>
                for (file_counter = 0; file_counter < 16; file_counter++)
   1c794:	e0bff817 	ldw	r2,-32(fp)
   1c798:	10800044 	addi	r2,r2,1
   1c79c:	e0bff815 	stw	r2,-32(fp)
   1c7a0:	e0bff817 	ldw	r2,-32(fp)
   1c7a4:	10800410 	cmplti	r2,r2,16
   1c7a8:	103fdd1e 	bne	r2,zero,1c720 <find_file_in_directory+0x1c4>
            }
            else
            {
                break;
            }
            if (result)
   1c7ac:	e0bffa17 	ldw	r2,-24(fp)
   1c7b0:	10006e1e 	bne	r2,zero,1c96c <find_file_in_directory+0x410>
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1c7b4:	e0bff917 	ldw	r2,-28(fp)
   1c7b8:	10800044 	addi	r2,r2,1
   1c7bc:	e0bff915 	stw	r2,-28(fp)
   1c7c0:	e0fff917 	ldw	r3,-28(fp)
   1c7c4:	e0bff217 	ldw	r2,-56(fp)
   1c7c8:	18bfc916 	blt	r3,r2,1c6f0 <find_file_in_directory+0x194>
   1c7cc:	00006806 	br	1c970 <find_file_in_directory+0x414>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1c7d0:	e0bffc17 	ldw	r2,-16(fp)
   1c7d4:	10ffff84 	addi	r3,r2,-2
   1c7d8:	008000b4 	movhi	r2,2
   1c7dc:	10961283 	ldbu	r2,22602(r2)
   1c7e0:	10803fcc 	andi	r2,r2,255
   1c7e4:	1885383a 	mul	r2,r3,r2
   1c7e8:	1007883a 	mov	r3,r2
   1c7ec:	008000b4 	movhi	r2,2
   1c7f0:	10962317 	ldw	r2,22668(r2)
   1c7f4:	1885883a 	add	r2,r3,r2
   1c7f8:	e0bff415 	stw	r2,-48(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1c7fc:	e03ff715 	stw	zero,-36(fp)
   1c800:	00003306 	br	1c8d0 <find_file_in_directory+0x374>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1c804:	e0fff717 	ldw	r3,-36(fp)
   1c808:	e0bff417 	ldw	r2,-48(fp)
   1c80c:	1885883a 	add	r2,r3,r2
   1c810:	d0e75217 	ldw	r3,-25272(gp)
   1c814:	180b883a 	mov	r5,r3
   1c818:	1009883a 	mov	r4,r2
   1c81c:	001aa300 	call	1aa30 <Read_Sector_Data>
   1c820:	10003126 	beq	r2,zero,1c8e8 <find_file_in_directory+0x38c>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1c824:	e03ff615 	stw	zero,-40(fp)
   1c828:	00002106 	br	1c8b0 <find_file_in_directory+0x354>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1c82c:	e0bff617 	ldw	r2,-40(fp)
   1c830:	1004917a 	slli	r2,r2,5
   1c834:	e0fffc17 	ldw	r3,-16(fp)
   1c838:	e13ff717 	ldw	r4,-36(fp)
   1c83c:	200f883a 	mov	r7,r4
   1c840:	180d883a 	mov	r6,r3
   1c844:	e17fea17 	ldw	r5,-88(fp)
   1c848:	1009883a 	mov	r4,r2
   1c84c:	001ae3c0 	call	1ae3c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1c850:	e0bfea17 	ldw	r2,-88(fp)
   1c854:	10800003 	ldbu	r2,0(r2)
   1c858:	10803fcc 	andi	r2,r2,255
   1c85c:	10803960 	cmpeqi	r2,r2,229
   1c860:	1000101e 	bne	r2,zero,1c8a4 <find_file_in_directory+0x348>
   1c864:	e0bfea17 	ldw	r2,-88(fp)
   1c868:	10800003 	ldbu	r2,0(r2)
   1c86c:	10803fcc 	andi	r2,r2,255
   1c870:	10000c26 	beq	r2,zero,1c8a4 <find_file_in_directory+0x348>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1c874:	e0ffee44 	addi	r3,fp,-71
   1c878:	e0bfef04 	addi	r2,fp,-68
   1c87c:	180d883a 	mov	r6,r3
   1c880:	100b883a 	mov	r5,r2
   1c884:	e13fea17 	ldw	r4,-88(fp)
   1c888:	001bde00 	call	1bde0 <match_file_record_to_name_ext>
   1c88c:	e0bff315 	stw	r2,-52(fp)

                            if (match)
   1c890:	e0bff317 	ldw	r2,-52(fp)
   1c894:	10000326 	beq	r2,zero,1c8a4 <find_file_in_directory+0x348>
                            {                               
                                result = true;
   1c898:	00800044 	movi	r2,1
   1c89c:	e0bffa15 	stw	r2,-24(fp)
                                break;
   1c8a0:	00000606 	br	1c8bc <find_file_in_directory+0x360>
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1c8a4:	e0bff617 	ldw	r2,-40(fp)
   1c8a8:	10800044 	addi	r2,r2,1
   1c8ac:	e0bff615 	stw	r2,-40(fp)
   1c8b0:	e0bff617 	ldw	r2,-40(fp)
   1c8b4:	10800410 	cmplti	r2,r2,16
   1c8b8:	103fdc1e 	bne	r2,zero,1c82c <find_file_in_directory+0x2d0>
                }
                else
                {
                    break;
                }
                if (result)
   1c8bc:	e0bffa17 	ldw	r2,-24(fp)
   1c8c0:	10000b1e 	bne	r2,zero,1c8f0 <find_file_in_directory+0x394>
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1c8c4:	e0bff717 	ldw	r2,-36(fp)
   1c8c8:	10800044 	addi	r2,r2,1
   1c8cc:	e0bff715 	stw	r2,-36(fp)
   1c8d0:	008000b4 	movhi	r2,2
   1c8d4:	10961283 	ldbu	r2,22602(r2)
   1c8d8:	10803fcc 	andi	r2,r2,255
   1c8dc:	e0fff717 	ldw	r3,-36(fp)
   1c8e0:	18bfc816 	blt	r3,r2,1c804 <find_file_in_directory+0x2a8>
   1c8e4:	00000306 	br	1c8f4 <find_file_in_directory+0x398>
                    break;
   1c8e8:	0001883a 	nop
   1c8ec:	00000106 	br	1c8f4 <find_file_in_directory+0x398>
                {
                    break;
   1c8f0:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   1c8f4:	e0bffa17 	ldw	r2,-24(fp)
   1c8f8:	1000141e 	bne	r2,zero,1c94c <find_file_in_directory+0x3f0>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   1c8fc:	e0bffc17 	ldw	r2,-16(fp)
   1c900:	e0ffed84 	addi	r3,fp,-74
   1c904:	180b883a 	mov	r5,r3
   1c908:	1009883a 	mov	r4,r2
   1c90c:	001ab080 	call	1ab08 <get_cluster_flag>
   1c910:	10000c26 	beq	r2,zero,1c944 <find_file_in_directory+0x3e8>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1c914:	e0bfed8b 	ldhu	r2,-74(fp)
   1c918:	10bfffcc 	andi	r2,r2,65535
   1c91c:	10fffe0c 	andi	r3,r2,65528
   1c920:	00bffe14 	movui	r2,65528
   1c924:	1880021e 	bne	r3,r2,1c930 <find_file_in_directory+0x3d4>
					{
						return false;
   1c928:	0005883a 	mov	r2,zero
   1c92c:	00001106 	br	1c974 <find_file_in_directory+0x418>
					}
					cluster = (new_cluster & 0x0000fff8);
   1c930:	e0bfed8b 	ldhu	r2,-74(fp)
   1c934:	10bfffcc 	andi	r2,r2,65535
   1c938:	10bffe0c 	andi	r2,r2,65528
   1c93c:	e0bffc15 	stw	r2,-16(fp)
   1c940:	00000206 	br	1c94c <find_file_in_directory+0x3f0>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   1c944:	0005883a 	mov	r2,zero
   1c948:	00000a06 	br	1c974 <find_file_in_directory+0x418>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   1c94c:	e0bffc17 	ldw	r2,-16(fp)
   1c950:	00fffdd4 	movui	r3,65527
   1c954:	18800616 	blt	r3,r2,1c970 <find_file_in_directory+0x414>
   1c958:	e0bffa17 	ldw	r2,-24(fp)
   1c95c:	103f9c26 	beq	r2,zero,1c7d0 <find_file_in_directory+0x274>
   1c960:	00000306 	br	1c970 <find_file_in_directory+0x414>
                break;
   1c964:	0001883a 	nop
   1c968:	00000106 	br	1c970 <find_file_in_directory+0x414>
                break;
   1c96c:	0001883a 	nop
    }
    
    return result;   
   1c970:	e0bffa17 	ldw	r2,-24(fp)
}
   1c974:	e037883a 	mov	sp,fp
   1c978:	dfc00117 	ldw	ra,4(sp)
   1c97c:	df000017 	ldw	fp,0(sp)
   1c980:	dec00204 	addi	sp,sp,8
   1c984:	f800283a 	ret

0001c988 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   1c988:	defff504 	addi	sp,sp,-44
   1c98c:	dfc00a15 	stw	ra,40(sp)
   1c990:	df000915 	stw	fp,36(sp)
   1c994:	df000904 	addi	fp,sp,36
   1c998:	e13ff715 	stw	r4,-36(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   1c99c:	008000b4 	movhi	r2,2
   1c9a0:	10962017 	ldw	r2,22656(r2)
   1c9a4:	e0bfff15 	stw	r2,-4(fp)
    unsigned int cluster_index = 2;
   1c9a8:	00800084 	movi	r2,2
   1c9ac:	e0bffe15 	stw	r2,-8(fp)
    short int cluster = -1;
   1c9b0:	00bfffc4 	movi	r2,-1
   1c9b4:	e0bffd8d 	sth	r2,-10(fp)
    bool result = false;
   1c9b8:	e03ffc15 	stw	zero,-16(fp)
	unsigned max_cluster_index = 0;
   1c9bc:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   1c9c0:	008000b4 	movhi	r2,2
   1c9c4:	10962317 	ldw	r2,22668(r2)
   1c9c8:	e0bffa15 	stw	r2,-24(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   1c9cc:	008000b4 	movhi	r2,2
   1c9d0:	1096148b 	ldhu	r2,22610(r2)
   1c9d4:	10bfffcc 	andi	r2,r2,65535
   1c9d8:	e0bff915 	stw	r2,-28(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   1c9dc:	008000b4 	movhi	r2,2
   1c9e0:	10961817 	ldw	r2,22624(r2)
   1c9e4:	e0bff815 	stw	r2,-32(fp)

	if (less_than_32 > greater_than_32)
   1c9e8:	e0bff917 	ldw	r2,-28(fp)
   1c9ec:	e0fff817 	ldw	r3,-32(fp)
   1c9f0:	18800a2e 	bgeu	r3,r2,1ca1c <find_first_empty_cluster+0x94>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1c9f4:	e0fff917 	ldw	r3,-28(fp)
   1c9f8:	e0bffa17 	ldw	r2,-24(fp)
   1c9fc:	1887c83a 	sub	r3,r3,r2
   1ca00:	008000b4 	movhi	r2,2
   1ca04:	10961283 	ldbu	r2,22602(r2)
   1ca08:	10803fcc 	andi	r2,r2,255
   1ca0c:	1885203a 	divu	r2,r3,r2
   1ca10:	10800044 	addi	r2,r2,1
   1ca14:	e0bffb15 	stw	r2,-20(fp)
   1ca18:	00002906 	br	1cac0 <find_first_empty_cluster+0x138>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1ca1c:	e0fff817 	ldw	r3,-32(fp)
   1ca20:	e0bffa17 	ldw	r2,-24(fp)
   1ca24:	1887c83a 	sub	r3,r3,r2
   1ca28:	008000b4 	movhi	r2,2
   1ca2c:	10961283 	ldbu	r2,22602(r2)
   1ca30:	10803fcc 	andi	r2,r2,255
   1ca34:	1885203a 	divu	r2,r3,r2
   1ca38:	10800044 	addi	r2,r2,1
   1ca3c:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1ca40:	00001f06 	br	1cac0 <find_first_empty_cluster+0x138>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   1ca44:	e0bfff17 	ldw	r2,-4(fp)
   1ca48:	d0e75217 	ldw	r3,-25272(gp)
   1ca4c:	180b883a 	mov	r5,r3
   1ca50:	1009883a 	mov	r4,r2
   1ca54:	001aa300 	call	1aa30 <Read_Sector_Data>
   1ca58:	10001426 	beq	r2,zero,1caac <find_first_empty_cluster+0x124>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   1ca5c:	e0bffe17 	ldw	r2,-8(fp)
   1ca60:	10803fcc 	andi	r2,r2,255
   1ca64:	1085883a 	add	r2,r2,r2
   1ca68:	1007883a 	mov	r3,r2
   1ca6c:	d0a75417 	ldw	r2,-25264(gp)
   1ca70:	10800a17 	ldw	r2,40(r2)
   1ca74:	1885883a 	add	r2,r3,r2
   1ca78:	1080002b 	ldhuio	r2,0(r2)
   1ca7c:	10bfffcc 	andi	r2,r2,65535
   1ca80:	e0bffd8d 	sth	r2,-10(fp)
                if (cluster == 0)
   1ca84:	e0bffd8f 	ldh	r2,-10(fp)
   1ca88:	10000726 	beq	r2,zero,1caa8 <find_first_empty_cluster+0x120>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
   1ca8c:	e0bffe17 	ldw	r2,-8(fp)
   1ca90:	10800044 	addi	r2,r2,1
   1ca94:	e0bffe15 	stw	r2,-8(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1ca98:	e0bffe17 	ldw	r2,-8(fp)
   1ca9c:	10803fcc 	andi	r2,r2,255
   1caa0:	103fee1e 	bne	r2,zero,1ca5c <find_first_empty_cluster+0xd4>
   1caa4:	00000106 	br	1caac <find_first_empty_cluster+0x124>
                    break;
   1caa8:	0001883a 	nop
        }
        if (cluster == 0)
   1caac:	e0bffd8f 	ldh	r2,-10(fp)
   1cab0:	10000826 	beq	r2,zero,1cad4 <find_first_empty_cluster+0x14c>
        {
            break;
        }
        sector++;
   1cab4:	e0bfff17 	ldw	r2,-4(fp)
   1cab8:	10800044 	addi	r2,r2,1
   1cabc:	e0bfff15 	stw	r2,-4(fp)
    while (sector != boot_sector_data.second_fat_sector_offset)
   1cac0:	008000b4 	movhi	r2,2
   1cac4:	10962117 	ldw	r2,22660(r2)
   1cac8:	e0ffff17 	ldw	r3,-4(fp)
   1cacc:	18bfdd1e 	bne	r3,r2,1ca44 <find_first_empty_cluster+0xbc>
   1cad0:	00000106 	br	1cad8 <find_first_empty_cluster+0x150>
            break;
   1cad4:	0001883a 	nop
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   1cad8:	e0bffd8f 	ldh	r2,-10(fp)
   1cadc:	1000081e 	bne	r2,zero,1cb00 <find_first_empty_cluster+0x178>
   1cae0:	e0bffd8f 	ldh	r2,-10(fp)
   1cae4:	e0fffb17 	ldw	r3,-20(fp)
   1cae8:	18800536 	bltu	r3,r2,1cb00 <find_first_empty_cluster+0x178>
    {
        *cluster_number = cluster_index;
   1caec:	e0bff717 	ldw	r2,-36(fp)
   1caf0:	e0fffe17 	ldw	r3,-8(fp)
   1caf4:	10c00015 	stw	r3,0(r2)
		result = true;
   1caf8:	00800044 	movi	r2,1
   1cafc:	e0bffc15 	stw	r2,-16(fp)
    }
    return result;
   1cb00:	e0bffc17 	ldw	r2,-16(fp)
}
   1cb04:	e037883a 	mov	sp,fp
   1cb08:	dfc00117 	ldw	ra,4(sp)
   1cb0c:	df000017 	ldw	fp,0(sp)
   1cb10:	dec00204 	addi	sp,sp,8
   1cb14:	f800283a 	ret

0001cb18 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   1cb18:	defff604 	addi	sp,sp,-40
   1cb1c:	dfc00915 	stw	ra,36(sp)
   1cb20:	df000815 	stw	fp,32(sp)
   1cb24:	df000804 	addi	fp,sp,32
   1cb28:	e13ff815 	stw	r4,-32(fp)
    int result = -1;
   1cb2c:	00bfffc4 	movi	r2,-1
   1cb30:	e0bfff15 	stw	r2,-4(fp)
    int cluster = start_cluster_index;
   1cb34:	e0bff817 	ldw	r2,-32(fp)
   1cb38:	e0bffe15 	stw	r2,-8(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1cb3c:	e0bffe17 	ldw	r2,-8(fp)
   1cb40:	10ffff84 	addi	r3,r2,-2
   1cb44:	008000b4 	movhi	r2,2
   1cb48:	10961283 	ldbu	r2,22602(r2)
   1cb4c:	10803fcc 	andi	r2,r2,255
   1cb50:	1885383a 	mul	r2,r3,r2
   1cb54:	1007883a 	mov	r3,r2
   1cb58:	008000b4 	movhi	r2,2
   1cb5c:	10962317 	ldw	r2,22668(r2)
   1cb60:	1885883a 	add	r2,r3,r2
   1cb64:	e0bffb15 	stw	r2,-20(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1cb68:	e03ffd15 	stw	zero,-12(fp)
   1cb6c:	00002c06 	br	1cc20 <find_first_empty_record_in_a_subdirectory+0x108>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1cb70:	e0fffd17 	ldw	r3,-12(fp)
   1cb74:	e0bffb17 	ldw	r2,-20(fp)
   1cb78:	1885883a 	add	r2,r3,r2
   1cb7c:	d0e75217 	ldw	r3,-25272(gp)
   1cb80:	180b883a 	mov	r5,r3
   1cb84:	1009883a 	mov	r4,r2
   1cb88:	001aa300 	call	1aa30 <Read_Sector_Data>
   1cb8c:	10002a26 	beq	r2,zero,1cc38 <find_first_empty_record_in_a_subdirectory+0x120>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1cb90:	e03ffc15 	stw	zero,-16(fp)
   1cb94:	00001c06 	br	1cc08 <find_first_empty_record_in_a_subdirectory+0xf0>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1cb98:	e0bffc17 	ldw	r2,-16(fp)
   1cb9c:	1004917a 	slli	r2,r2,5
   1cba0:	1007883a 	mov	r3,r2
   1cba4:	d0a75417 	ldw	r2,-25264(gp)
   1cba8:	10800a17 	ldw	r2,40(r2)
   1cbac:	1885883a 	add	r2,r3,r2
   1cbb0:	10800023 	ldbuio	r2,0(r2)
   1cbb4:	10803fcc 	andi	r2,r2,255
   1cbb8:	10803fcc 	andi	r2,r2,255
   1cbbc:	e0bffa8d 	sth	r2,-22(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   1cbc0:	e0bffa8b 	ldhu	r2,-22(fp)
   1cbc4:	10803960 	cmpeqi	r2,r2,229
   1cbc8:	1000021e 	bne	r2,zero,1cbd4 <find_first_empty_record_in_a_subdirectory+0xbc>
   1cbcc:	e0bffa8b 	ldhu	r2,-22(fp)
   1cbd0:	10000a1e 	bne	r2,zero,1cbfc <find_first_empty_record_in_a_subdirectory+0xe4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   1cbd4:	e0bffd17 	ldw	r2,-12(fp)
   1cbd8:	1006913a 	slli	r3,r2,4
   1cbdc:	e0bffc17 	ldw	r2,-16(fp)
   1cbe0:	1885883a 	add	r2,r3,r2
   1cbe4:	1004943a 	slli	r2,r2,16
   1cbe8:	e0fffe17 	ldw	r3,-8(fp)
   1cbec:	1884b03a 	or	r2,r3,r2
   1cbf0:	e0bfff15 	stw	r2,-4(fp)
                        return result;
   1cbf4:	e0bfff17 	ldw	r2,-4(fp)
   1cbf8:	00005206 	br	1cd44 <find_first_empty_record_in_a_subdirectory+0x22c>
                for (file_counter = 0; file_counter < 16; file_counter++)
   1cbfc:	e0bffc17 	ldw	r2,-16(fp)
   1cc00:	10800044 	addi	r2,r2,1
   1cc04:	e0bffc15 	stw	r2,-16(fp)
   1cc08:	e0bffc17 	ldw	r2,-16(fp)
   1cc0c:	10800410 	cmplti	r2,r2,16
   1cc10:	103fe11e 	bne	r2,zero,1cb98 <find_first_empty_record_in_a_subdirectory+0x80>
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1cc14:	e0bffd17 	ldw	r2,-12(fp)
   1cc18:	10800044 	addi	r2,r2,1
   1cc1c:	e0bffd15 	stw	r2,-12(fp)
   1cc20:	008000b4 	movhi	r2,2
   1cc24:	10961283 	ldbu	r2,22602(r2)
   1cc28:	10803fcc 	andi	r2,r2,255
   1cc2c:	e0fffd17 	ldw	r3,-12(fp)
   1cc30:	18bfcf16 	blt	r3,r2,1cb70 <find_first_empty_record_in_a_subdirectory+0x58>
   1cc34:	00000106 	br	1cc3c <find_first_empty_record_in_a_subdirectory+0x124>
                    }
                }
            }
            else
            {
                break;
   1cc38:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   1cc3c:	e0bfff17 	ldw	r2,-4(fp)
   1cc40:	1000390e 	bge	r2,zero,1cd28 <find_first_empty_record_in_a_subdirectory+0x210>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   1cc44:	e0bffe17 	ldw	r2,-8(fp)
   1cc48:	e0fffa04 	addi	r3,fp,-24
   1cc4c:	180b883a 	mov	r5,r3
   1cc50:	1009883a 	mov	r4,r2
   1cc54:	001ab080 	call	1ab08 <get_cluster_flag>
   1cc58:	10003126 	beq	r2,zero,1cd20 <find_first_empty_record_in_a_subdirectory+0x208>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1cc5c:	e0bffa0b 	ldhu	r2,-24(fp)
   1cc60:	10bfffcc 	andi	r2,r2,65535
   1cc64:	10fffe0c 	andi	r3,r2,65528
   1cc68:	00bffe14 	movui	r2,65528
   1cc6c:	18802e1e 	bne	r3,r2,1cd28 <find_first_empty_record_in_a_subdirectory+0x210>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   1cc70:	e0bff904 	addi	r2,fp,-28
   1cc74:	1009883a 	mov	r4,r2
   1cc78:	001c9880 	call	1c988 <find_first_empty_cluster>
   1cc7c:	10002326 	beq	r2,zero,1cd0c <find_first_empty_record_in_a_subdirectory+0x1f4>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1cc80:	e0bffe17 	ldw	r2,-8(fp)
   1cc84:	e0fff917 	ldw	r3,-28(fp)
   1cc88:	18ffffcc 	andi	r3,r3,65535
   1cc8c:	18e0001c 	xori	r3,r3,32768
   1cc90:	18e00004 	addi	r3,r3,-32768
   1cc94:	01800044 	movi	r6,1
   1cc98:	180b883a 	mov	r5,r3
   1cc9c:	1009883a 	mov	r4,r2
   1cca0:	001abb80 	call	1abb8 <mark_cluster>
   1cca4:	10001926 	beq	r2,zero,1cd0c <find_first_empty_record_in_a_subdirectory+0x1f4>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1cca8:	e0bff917 	ldw	r2,-28(fp)
   1ccac:	01800044 	movi	r6,1
   1ccb0:	017fffc4 	movi	r5,-1
   1ccb4:	1009883a 	mov	r4,r2
   1ccb8:	001abb80 	call	1abb8 <mark_cluster>
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1ccbc:	10001326 	beq	r2,zero,1cd0c <find_first_empty_record_in_a_subdirectory+0x1f4>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1ccc0:	e0bffe17 	ldw	r2,-8(fp)
   1ccc4:	e0fff917 	ldw	r3,-28(fp)
   1ccc8:	18ffffcc 	andi	r3,r3,65535
   1cccc:	18e0001c 	xori	r3,r3,32768
   1ccd0:	18e00004 	addi	r3,r3,-32768
   1ccd4:	000d883a 	mov	r6,zero
   1ccd8:	180b883a 	mov	r5,r3
   1ccdc:	1009883a 	mov	r4,r2
   1cce0:	001abb80 	call	1abb8 <mark_cluster>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1cce4:	10000926 	beq	r2,zero,1cd0c <find_first_empty_record_in_a_subdirectory+0x1f4>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   1cce8:	e0bff917 	ldw	r2,-28(fp)
   1ccec:	000d883a 	mov	r6,zero
   1ccf0:	017fffc4 	movi	r5,-1
   1ccf4:	1009883a 	mov	r4,r2
   1ccf8:	001abb80 	call	1abb8 <mark_cluster>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1ccfc:	10000326 	beq	r2,zero,1cd0c <find_first_empty_record_in_a_subdirectory+0x1f4>
						{
							Save_Modified_Sector();
   1cd00:	001a9e40 	call	1a9e4 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   1cd04:	e0bff917 	ldw	r2,-28(fp)
   1cd08:	e0bfff15 	stw	r2,-4(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   1cd0c:	e0bffa0b 	ldhu	r2,-24(fp)
   1cd10:	10bfffcc 	andi	r2,r2,65535
   1cd14:	10bffe0c 	andi	r2,r2,65528
   1cd18:	e0bffe15 	stw	r2,-8(fp)
   1cd1c:	00000206 	br	1cd28 <find_first_empty_record_in_a_subdirectory+0x210>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   1cd20:	00bfffc4 	movi	r2,-1
   1cd24:	e0bfff15 	stw	r2,-4(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   1cd28:	e0bffe17 	ldw	r2,-8(fp)
   1cd2c:	00fffdd4 	movui	r3,65527
   1cd30:	18800316 	blt	r3,r2,1cd40 <find_first_empty_record_in_a_subdirectory+0x228>
   1cd34:	e0bfff17 	ldw	r2,-4(fp)
   1cd38:	10bfffe0 	cmpeqi	r2,r2,-1
   1cd3c:	103f7f1e 	bne	r2,zero,1cb3c <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
   1cd40:	e0bfff17 	ldw	r2,-4(fp)
}
   1cd44:	e037883a 	mov	sp,fp
   1cd48:	dfc00117 	ldw	ra,4(sp)
   1cd4c:	df000017 	ldw	fp,0(sp)
   1cd50:	dec00204 	addi	sp,sp,8
   1cd54:	f800283a 	ret

0001cd58 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   1cd58:	defff904 	addi	sp,sp,-28
   1cd5c:	dfc00615 	stw	ra,24(sp)
   1cd60:	df000515 	stw	fp,20(sp)
   1cd64:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1cd68:	008000b4 	movhi	r2,2
   1cd6c:	1096140b 	ldhu	r2,22608(r2)
   1cd70:	10bfffcc 	andi	r2,r2,65535
   1cd74:	1006917a 	slli	r3,r2,5
   1cd78:	008000b4 	movhi	r2,2
   1cd7c:	1096120b 	ldhu	r2,22600(r2)
   1cd80:	10bfffcc 	andi	r2,r2,65535
   1cd84:	1885283a 	div	r2,r3,r2
   1cd88:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   1cd8c:	00bfffc4 	movi	r2,-1
   1cd90:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1cd94:	e03fff15 	stw	zero,-4(fp)
   1cd98:	00002c06 	br	1ce4c <find_first_empty_record_in_root_directory+0xf4>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1cd9c:	008000b4 	movhi	r2,2
   1cda0:	10d62217 	ldw	r3,22664(r2)
   1cda4:	e0bfff17 	ldw	r2,-4(fp)
   1cda8:	1885883a 	add	r2,r3,r2
   1cdac:	1007883a 	mov	r3,r2
   1cdb0:	d0a75217 	ldw	r2,-25272(gp)
   1cdb4:	100b883a 	mov	r5,r2
   1cdb8:	1809883a 	mov	r4,r3
   1cdbc:	001aa300 	call	1aa30 <Read_Sector_Data>
   1cdc0:	10002626 	beq	r2,zero,1ce5c <find_first_empty_record_in_root_directory+0x104>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1cdc4:	e03ffe15 	stw	zero,-8(fp)
   1cdc8:	00001a06 	br	1ce34 <find_first_empty_record_in_root_directory+0xdc>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1cdcc:	e0bffe17 	ldw	r2,-8(fp)
   1cdd0:	1004917a 	slli	r2,r2,5
   1cdd4:	1007883a 	mov	r3,r2
   1cdd8:	d0a75417 	ldw	r2,-25264(gp)
   1cddc:	10800a17 	ldw	r2,40(r2)
   1cde0:	1885883a 	add	r2,r3,r2
   1cde4:	10800023 	ldbuio	r2,0(r2)
   1cde8:	10803fcc 	andi	r2,r2,255
   1cdec:	10803fcc 	andi	r2,r2,255
   1cdf0:	e0bffb8d 	sth	r2,-18(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   1cdf4:	e0bffb8b 	ldhu	r2,-18(fp)
   1cdf8:	10803960 	cmpeqi	r2,r2,229
   1cdfc:	1000021e 	bne	r2,zero,1ce08 <find_first_empty_record_in_root_directory+0xb0>
   1ce00:	e0bffb8b 	ldhu	r2,-18(fp)
   1ce04:	1000081e 	bne	r2,zero,1ce28 <find_first_empty_record_in_root_directory+0xd0>
                {
                    result = (sector_index*16 + file_counter) << 16;
   1ce08:	e0bfff17 	ldw	r2,-4(fp)
   1ce0c:	1006913a 	slli	r3,r2,4
   1ce10:	e0bffe17 	ldw	r2,-8(fp)
   1ce14:	1885883a 	add	r2,r3,r2
   1ce18:	1004943a 	slli	r2,r2,16
   1ce1c:	e0bffc15 	stw	r2,-16(fp)
                    return result;
   1ce20:	e0bffc17 	ldw	r2,-16(fp)
   1ce24:	00000f06 	br	1ce64 <find_first_empty_record_in_root_directory+0x10c>
            for (file_counter = 0; file_counter < 16; file_counter++)
   1ce28:	e0bffe17 	ldw	r2,-8(fp)
   1ce2c:	10800044 	addi	r2,r2,1
   1ce30:	e0bffe15 	stw	r2,-8(fp)
   1ce34:	e0bffe17 	ldw	r2,-8(fp)
   1ce38:	10800410 	cmplti	r2,r2,16
   1ce3c:	103fe31e 	bne	r2,zero,1cdcc <find_first_empty_record_in_root_directory+0x74>
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1ce40:	e0bfff17 	ldw	r2,-4(fp)
   1ce44:	10800044 	addi	r2,r2,1
   1ce48:	e0bfff15 	stw	r2,-4(fp)
   1ce4c:	e0ffff17 	ldw	r3,-4(fp)
   1ce50:	e0bffd17 	ldw	r2,-12(fp)
   1ce54:	18bfd116 	blt	r3,r2,1cd9c <find_first_empty_record_in_root_directory+0x44>
   1ce58:	00000106 	br	1ce60 <find_first_empty_record_in_root_directory+0x108>
                }
            }
        }
        else
        {
            break;
   1ce5c:	0001883a 	nop
        }
    }
    return result;
   1ce60:	e0bffc17 	ldw	r2,-16(fp)
}
   1ce64:	e037883a 	mov	sp,fp
   1ce68:	dfc00117 	ldw	ra,4(sp)
   1ce6c:	df000017 	ldw	fp,0(sp)
   1ce70:	dec00204 	addi	sp,sp,8
   1ce74:	f800283a 	ret

0001ce78 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   1ce78:	defffa04 	addi	sp,sp,-24
   1ce7c:	df000515 	stw	fp,20(sp)
   1ce80:	df000504 	addi	fp,sp,20
   1ce84:	e13ffd15 	stw	r4,-12(fp)
   1ce88:	e17ffc15 	stw	r5,-16(fp)
   1ce8c:	e1bffb15 	stw	r6,-20(fp)
    int counter;
    int local = 0;
   1ce90:	e03ffe15 	stw	zero,-8(fp)
    
    for(counter = 0; counter < 8; counter++)
   1ce94:	e03fff15 	stw	zero,-4(fp)
   1ce98:	00002506 	br	1cf30 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1ce9c:	e0bffe17 	ldw	r2,-8(fp)
   1cea0:	e0fffd17 	ldw	r3,-12(fp)
   1cea4:	1885883a 	add	r2,r3,r2
   1cea8:	10800003 	ldbu	r2,0(r2)
   1ceac:	10803fcc 	andi	r2,r2,255
   1ceb0:	1080201c 	xori	r2,r2,128
   1ceb4:	10bfe004 	addi	r2,r2,-128
   1ceb8:	10800ba0 	cmpeqi	r2,r2,46
   1cebc:	1000141e 	bne	r2,zero,1cf10 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   1cec0:	e0bffe17 	ldw	r2,-8(fp)
   1cec4:	e0fffd17 	ldw	r3,-12(fp)
   1cec8:	1887883a 	add	r3,r3,r2
   1cecc:	e0bfff17 	ldw	r2,-4(fp)
   1ced0:	e13ffc17 	ldw	r4,-16(fp)
   1ced4:	2085883a 	add	r2,r4,r2
   1ced8:	18c00003 	ldbu	r3,0(r3)
   1cedc:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   1cee0:	e0bffe17 	ldw	r2,-8(fp)
   1cee4:	e0fffd17 	ldw	r3,-12(fp)
   1cee8:	1885883a 	add	r2,r3,r2
   1ceec:	10800003 	ldbu	r2,0(r2)
   1cef0:	10803fcc 	andi	r2,r2,255
   1cef4:	1080201c 	xori	r2,r2,128
   1cef8:	10bfe004 	addi	r2,r2,-128
   1cefc:	10000926 	beq	r2,zero,1cf24 <convert_filename_to_name_extension+0xac>
   1cf00:	e0bffe17 	ldw	r2,-8(fp)
   1cf04:	10800044 	addi	r2,r2,1
   1cf08:	e0bffe15 	stw	r2,-8(fp)
   1cf0c:	00000506 	br	1cf24 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   1cf10:	e0bfff17 	ldw	r2,-4(fp)
   1cf14:	e0fffc17 	ldw	r3,-16(fp)
   1cf18:	1885883a 	add	r2,r3,r2
   1cf1c:	00c00804 	movi	r3,32
   1cf20:	10c00005 	stb	r3,0(r2)
    for(counter = 0; counter < 8; counter++)
   1cf24:	e0bfff17 	ldw	r2,-4(fp)
   1cf28:	10800044 	addi	r2,r2,1
   1cf2c:	e0bfff15 	stw	r2,-4(fp)
   1cf30:	e0bfff17 	ldw	r2,-4(fp)
   1cf34:	10800210 	cmplti	r2,r2,8
   1cf38:	103fd81e 	bne	r2,zero,1ce9c <convert_filename_to_name_extension+0x24>
        }
    }
    if (filename[local] == '.') local++;
   1cf3c:	e0bffe17 	ldw	r2,-8(fp)
   1cf40:	e0fffd17 	ldw	r3,-12(fp)
   1cf44:	1885883a 	add	r2,r3,r2
   1cf48:	10800003 	ldbu	r2,0(r2)
   1cf4c:	10803fcc 	andi	r2,r2,255
   1cf50:	1080201c 	xori	r2,r2,128
   1cf54:	10bfe004 	addi	r2,r2,-128
   1cf58:	10800b98 	cmpnei	r2,r2,46
   1cf5c:	1000031e 	bne	r2,zero,1cf6c <convert_filename_to_name_extension+0xf4>
   1cf60:	e0bffe17 	ldw	r2,-8(fp)
   1cf64:	10800044 	addi	r2,r2,1
   1cf68:	e0bffe15 	stw	r2,-8(fp)
    for(counter = 0; counter < 3; counter++)
   1cf6c:	e03fff15 	stw	zero,-4(fp)
   1cf70:	00001c06 	br	1cfe4 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   1cf74:	e0bffe17 	ldw	r2,-8(fp)
   1cf78:	e0fffd17 	ldw	r3,-12(fp)
   1cf7c:	1885883a 	add	r2,r3,r2
   1cf80:	10800003 	ldbu	r2,0(r2)
   1cf84:	10803fcc 	andi	r2,r2,255
   1cf88:	1080201c 	xori	r2,r2,128
   1cf8c:	10bfe004 	addi	r2,r2,-128
   1cf90:	10000c26 	beq	r2,zero,1cfc4 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   1cf94:	e0bffe17 	ldw	r2,-8(fp)
   1cf98:	e0fffd17 	ldw	r3,-12(fp)
   1cf9c:	1887883a 	add	r3,r3,r2
   1cfa0:	e0bfff17 	ldw	r2,-4(fp)
   1cfa4:	e13ffb17 	ldw	r4,-20(fp)
   1cfa8:	2085883a 	add	r2,r4,r2
   1cfac:	18c00003 	ldbu	r3,0(r3)
   1cfb0:	10c00005 	stb	r3,0(r2)
            local++;
   1cfb4:	e0bffe17 	ldw	r2,-8(fp)
   1cfb8:	10800044 	addi	r2,r2,1
   1cfbc:	e0bffe15 	stw	r2,-8(fp)
   1cfc0:	00000506 	br	1cfd8 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   1cfc4:	e0bfff17 	ldw	r2,-4(fp)
   1cfc8:	e0fffb17 	ldw	r3,-20(fp)
   1cfcc:	1885883a 	add	r2,r3,r2
   1cfd0:	00c00804 	movi	r3,32
   1cfd4:	10c00005 	stb	r3,0(r2)
    for(counter = 0; counter < 3; counter++)
   1cfd8:	e0bfff17 	ldw	r2,-4(fp)
   1cfdc:	10800044 	addi	r2,r2,1
   1cfe0:	e0bfff15 	stw	r2,-4(fp)
   1cfe4:	e0bfff17 	ldw	r2,-4(fp)
   1cfe8:	108000d0 	cmplti	r2,r2,3
   1cfec:	103fe11e 	bne	r2,zero,1cf74 <convert_filename_to_name_extension+0xfc>
        }
    }

}
   1cff0:	0001883a 	nop
   1cff4:	0001883a 	nop
   1cff8:	e037883a 	mov	sp,fp
   1cffc:	df000017 	ldw	fp,0(sp)
   1d000:	dec00104 	addi	sp,sp,4
   1d004:	f800283a 	ret

0001d008 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   1d008:	defff504 	addi	sp,sp,-44
   1d00c:	dfc00a15 	stw	ra,40(sp)
   1d010:	df000915 	stw	fp,36(sp)
   1d014:	df000904 	addi	fp,sp,36
   1d018:	e13ff915 	stw	r4,-28(fp)
   1d01c:	e17ff815 	stw	r5,-32(fp)
   1d020:	e1bff715 	stw	r6,-36(fp)
    unsigned int cluster_number;
    bool result = false;
   1d024:	e03fff15 	stw	zero,-4(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   1d028:	e0bffa04 	addi	r2,fp,-24
   1d02c:	1009883a 	mov	r4,r2
   1d030:	001c9880 	call	1c988 <find_first_empty_cluster>
   1d034:	10009d26 	beq	r2,zero,1d2ac <create_file+0x2a4>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   1d038:	e0bff717 	ldw	r2,-36(fp)
   1d03c:	10800a17 	ldw	r2,40(r2)
   1d040:	1000031e 	bne	r2,zero,1d050 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   1d044:	001cd580 	call	1cd58 <find_first_empty_record_in_root_directory>
   1d048:	e0bffe15 	stw	r2,-8(fp)
   1d04c:	00000606 	br	1d068 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   1d050:	e0bff717 	ldw	r2,-36(fp)
   1d054:	1080058b 	ldhu	r2,22(r2)
   1d058:	10bfffcc 	andi	r2,r2,65535
   1d05c:	1009883a 	mov	r4,r2
   1d060:	001cb180 	call	1cb18 <find_first_empty_record_in_a_subdirectory>
   1d064:	e0bffe15 	stw	r2,-8(fp)
        }
        if (record_index >= 0)
   1d068:	e0bffe17 	ldw	r2,-8(fp)
   1d06c:	10008f16 	blt	r2,zero,1d2ac <create_file+0x2a4>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   1d070:	e13ff917 	ldw	r4,-28(fp)
   1d074:	001bd280 	call	1bd28 <get_dir_divider_location>
   1d078:	e0bffd15 	stw	r2,-12(fp)
            int last_dir_separator = 0;
   1d07c:	e03ffc15 	stw	zero,-16(fp)

            // Skip through all directory separators.
            while (location > 0)
   1d080:	00000b06 	br	1d0b0 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   1d084:	e0fffc17 	ldw	r3,-16(fp)
   1d088:	e0bffd17 	ldw	r2,-12(fp)
   1d08c:	1885883a 	add	r2,r3,r2
   1d090:	10800044 	addi	r2,r2,1
   1d094:	e0bffc15 	stw	r2,-16(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   1d098:	e0bffc17 	ldw	r2,-16(fp)
   1d09c:	e0fff917 	ldw	r3,-28(fp)
   1d0a0:	1885883a 	add	r2,r3,r2
   1d0a4:	1009883a 	mov	r4,r2
   1d0a8:	001bd280 	call	1bd28 <get_dir_divider_location>
   1d0ac:	e0bffd15 	stw	r2,-12(fp)
            while (location > 0)
   1d0b0:	e0bffd17 	ldw	r2,-12(fp)
   1d0b4:	00bff316 	blt	zero,r2,1d084 <create_file+0x7c>
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   1d0b8:	e0bffc17 	ldw	r2,-16(fp)
   1d0bc:	e0fff917 	ldw	r3,-28(fp)
   1d0c0:	1887883a 	add	r3,r3,r2
   1d0c4:	e13ff817 	ldw	r4,-32(fp)
   1d0c8:	e0bff817 	ldw	r2,-32(fp)
   1d0cc:	10800204 	addi	r2,r2,8
   1d0d0:	100d883a 	mov	r6,r2
   1d0d4:	200b883a 	mov	r5,r4
   1d0d8:	1809883a 	mov	r4,r3
   1d0dc:	001ce780 	call	1ce78 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   1d0e0:	e0bff817 	ldw	r2,-32(fp)
   1d0e4:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   1d0e8:	e0bff817 	ldw	r2,-32(fp)
   1d0ec:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   1d0f0:	e0bff817 	ldw	r2,-32(fp)
   1d0f4:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   1d0f8:	e0bff817 	ldw	r2,-32(fp)
   1d0fc:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   1d100:	e0bff817 	ldw	r2,-32(fp)
   1d104:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   1d108:	e0bff817 	ldw	r2,-32(fp)
   1d10c:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   1d110:	e0bffa17 	ldw	r2,-24(fp)
   1d114:	1007883a 	mov	r3,r2
   1d118:	e0bff817 	ldw	r2,-32(fp)
   1d11c:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   1d120:	e0bff817 	ldw	r2,-32(fp)
   1d124:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   1d128:	e0fffa17 	ldw	r3,-24(fp)
   1d12c:	e0bff817 	ldw	r2,-32(fp)
   1d130:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   1d134:	e0bff817 	ldw	r2,-32(fp)
   1d138:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   1d13c:	e0bff817 	ldw	r2,-32(fp)
   1d140:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   1d144:	e0bffe17 	ldw	r2,-8(fp)
   1d148:	10ffffcc 	andi	r3,r2,65535
   1d14c:	e0bff817 	ldw	r2,-32(fp)
   1d150:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   1d154:	e0bffe17 	ldw	r2,-8(fp)
   1d158:	1004d43a 	srli	r2,r2,16
   1d15c:	1007883a 	mov	r3,r2
   1d160:	00800404 	movi	r2,16
   1d164:	1885283a 	div	r2,r3,r2
   1d168:	1007883a 	mov	r3,r2
   1d16c:	e0bff817 	ldw	r2,-32(fp)
   1d170:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   1d174:	e0bffe17 	ldw	r2,-8(fp)
   1d178:	1004d43a 	srli	r2,r2,16
   1d17c:	1007883a 	mov	r3,r2
   1d180:	00a00034 	movhi	r2,32768
   1d184:	108003c4 	addi	r2,r2,15
   1d188:	1884703a 	and	r2,r3,r2
   1d18c:	1000040e 	bge	r2,zero,1d1a0 <create_file+0x198>
   1d190:	10bfffc4 	addi	r2,r2,-1
   1d194:	00fffc04 	movi	r3,-16
   1d198:	10c4b03a 	or	r2,r2,r3
   1d19c:	10800044 	addi	r2,r2,1
   1d1a0:	1004917a 	slli	r2,r2,5
   1d1a4:	1007883a 	mov	r3,r2
   1d1a8:	e0bff817 	ldw	r2,-32(fp)
   1d1ac:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   1d1b0:	e0bff717 	ldw	r2,-36(fp)
   1d1b4:	1080058b 	ldhu	r2,22(r2)
   1d1b8:	10ffffcc 	andi	r3,r2,65535
   1d1bc:	e0bff817 	ldw	r2,-32(fp)
   1d1c0:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   1d1c4:	e0bff817 	ldw	r2,-32(fp)
   1d1c8:	00c00044 	movi	r3,1
   1d1cc:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   1d1d0:	e0bff817 	ldw	r2,-32(fp)
   1d1d4:	00c00044 	movi	r3,1
   1d1d8:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1d1dc:	e0bff817 	ldw	r2,-32(fp)
   1d1e0:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1d1e4:	1000061e 	bne	r2,zero,1d200 <create_file+0x1f8>
   1d1e8:	008000b4 	movhi	r2,2
   1d1ec:	10d62217 	ldw	r3,22664(r2)
   1d1f0:	e0bff817 	ldw	r2,-32(fp)
   1d1f4:	10800b17 	ldw	r2,44(r2)
   1d1f8:	1885883a 	add	r2,r3,r2
   1d1fc:	00000d06 	br	1d234 <create_file+0x22c>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   1d200:	008000b4 	movhi	r2,2
   1d204:	10d62317 	ldw	r3,22668(r2)
   1d208:	e0bff817 	ldw	r2,-32(fp)
   1d20c:	10800a17 	ldw	r2,40(r2)
   1d210:	113fff84 	addi	r4,r2,-2
   1d214:	008000b4 	movhi	r2,2
   1d218:	10961283 	ldbu	r2,22602(r2)
   1d21c:	10803fcc 	andi	r2,r2,255
   1d220:	2085383a 	mul	r2,r4,r2
   1d224:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   1d228:	e0bff817 	ldw	r2,-32(fp)
   1d22c:	10800b17 	ldw	r2,44(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1d230:	1885883a 	add	r2,r3,r2
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1d234:	e0bffb15 	stw	r2,-20(fp)

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   1d238:	e0bffb17 	ldw	r2,-20(fp)
   1d23c:	d0e75217 	ldw	r3,-25272(gp)
   1d240:	180b883a 	mov	r5,r3
   1d244:	1009883a 	mov	r4,r2
   1d248:	001aa300 	call	1aa30 <Read_Sector_Data>
   1d24c:	10001726 	beq	r2,zero,1d2ac <create_file+0x2a4>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   1d250:	e0bff817 	ldw	r2,-32(fp)
   1d254:	10800c0b 	ldhu	r2,48(r2)
   1d258:	10bfffcc 	andi	r2,r2,65535
   1d25c:	10a0001c 	xori	r2,r2,32768
   1d260:	10a00004 	addi	r2,r2,-32768
   1d264:	e17ff817 	ldw	r5,-32(fp)
   1d268:	1009883a 	mov	r4,r2
   1d26c:	001b0b40 	call	1b0b4 <Write_File_Record_At_Offset>
   1d270:	10000e26 	beq	r2,zero,1d2ac <create_file+0x2a4>
                {
                    Save_Modified_Sector();
   1d274:	001a9e40 	call	1a9e4 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   1d278:	e0bffa17 	ldw	r2,-24(fp)
   1d27c:	01800044 	movi	r6,1
   1d280:	017fffc4 	movi	r5,-1
   1d284:	1009883a 	mov	r4,r2
   1d288:	001abb80 	call	1abb8 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   1d28c:	e0bffa17 	ldw	r2,-24(fp)
   1d290:	000d883a 	mov	r6,zero
   1d294:	017fffc4 	movi	r5,-1
   1d298:	1009883a 	mov	r4,r2
   1d29c:	001abb80 	call	1abb8 <mark_cluster>
   1d2a0:	10000226 	beq	r2,zero,1d2ac <create_file+0x2a4>
                    {
                        result = true;
   1d2a4:	00800044 	movi	r2,1
   1d2a8:	e0bfff15 	stw	r2,-4(fp)
                }
            }
        }

    }
    return result;           
   1d2ac:	e0bfff17 	ldw	r2,-4(fp)
}
   1d2b0:	e037883a 	mov	sp,fp
   1d2b4:	dfc00117 	ldw	ra,4(sp)
   1d2b8:	df000017 	ldw	fp,0(sp)
   1d2bc:	dec00204 	addi	sp,sp,8
   1d2c0:	f800283a 	ret

0001d2c4 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   1d2c4:	defffb04 	addi	sp,sp,-20
   1d2c8:	df000415 	stw	fp,16(sp)
   1d2cc:	df000404 	addi	fp,sp,16
   1d2d0:	e13ffd15 	stw	r4,-12(fp)
   1d2d4:	e17ffc15 	stw	r5,-16(fp)
	int index;
	int flength = 0;
   1d2d8:	e03ffe15 	stw	zero,-8(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1d2dc:	e03fff15 	stw	zero,-4(fp)
   1d2e0:	00001606 	br	1d33c <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
   1d2e4:	e0fffd17 	ldw	r3,-12(fp)
   1d2e8:	e0bfff17 	ldw	r2,-4(fp)
   1d2ec:	1885883a 	add	r2,r3,r2
   1d2f0:	10800003 	ldbu	r2,0(r2)
   1d2f4:	10803fcc 	andi	r2,r2,255
   1d2f8:	10800820 	cmpeqi	r2,r2,32
   1d2fc:	10000c1e 	bne	r2,zero,1d330 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
   1d300:	e0fffd17 	ldw	r3,-12(fp)
   1d304:	e0bfff17 	ldw	r2,-4(fp)
   1d308:	1885883a 	add	r2,r3,r2
   1d30c:	11000003 	ldbu	r4,0(r2)
   1d310:	e0bffe17 	ldw	r2,-8(fp)
   1d314:	e0fffc17 	ldw	r3,-16(fp)
   1d318:	1885883a 	add	r2,r3,r2
   1d31c:	2007883a 	mov	r3,r4
   1d320:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   1d324:	e0bffe17 	ldw	r2,-8(fp)
   1d328:	10800044 	addi	r2,r2,1
   1d32c:	e0bffe15 	stw	r2,-8(fp)
	for (index = 0; index < 8; index++)
   1d330:	e0bfff17 	ldw	r2,-4(fp)
   1d334:	10800044 	addi	r2,r2,1
   1d338:	e0bfff15 	stw	r2,-4(fp)
   1d33c:	e0bfff17 	ldw	r2,-4(fp)
   1d340:	10800210 	cmplti	r2,r2,8
   1d344:	103fe71e 	bne	r2,zero,1d2e4 <copy_file_record_name_to_string+0x20>
		}
	}
	if (file_record->extension[0] != ' ')
   1d348:	e0bffd17 	ldw	r2,-12(fp)
   1d34c:	10800203 	ldbu	r2,8(r2)
   1d350:	10803fcc 	andi	r2,r2,255
   1d354:	10800820 	cmpeqi	r2,r2,32
   1d358:	1000231e 	bne	r2,zero,1d3e8 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   1d35c:	e0bffe17 	ldw	r2,-8(fp)
   1d360:	e0fffc17 	ldw	r3,-16(fp)
   1d364:	1885883a 	add	r2,r3,r2
   1d368:	00c00b84 	movi	r3,46
   1d36c:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   1d370:	e0bffe17 	ldw	r2,-8(fp)
   1d374:	10800044 	addi	r2,r2,1
   1d378:	e0bffe15 	stw	r2,-8(fp)
		for (index = 0; index < 3; index++)
   1d37c:	e03fff15 	stw	zero,-4(fp)
   1d380:	00001606 	br	1d3dc <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   1d384:	e0fffd17 	ldw	r3,-12(fp)
   1d388:	e0bfff17 	ldw	r2,-4(fp)
   1d38c:	1885883a 	add	r2,r3,r2
   1d390:	10800203 	ldbu	r2,8(r2)
   1d394:	10803fcc 	andi	r2,r2,255
   1d398:	10800820 	cmpeqi	r2,r2,32
   1d39c:	10000c1e 	bne	r2,zero,1d3d0 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   1d3a0:	e0fffd17 	ldw	r3,-12(fp)
   1d3a4:	e0bfff17 	ldw	r2,-4(fp)
   1d3a8:	1885883a 	add	r2,r3,r2
   1d3ac:	11000203 	ldbu	r4,8(r2)
   1d3b0:	e0bffe17 	ldw	r2,-8(fp)
   1d3b4:	e0fffc17 	ldw	r3,-16(fp)
   1d3b8:	1885883a 	add	r2,r3,r2
   1d3bc:	2007883a 	mov	r3,r4
   1d3c0:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   1d3c4:	e0bffe17 	ldw	r2,-8(fp)
   1d3c8:	10800044 	addi	r2,r2,1
   1d3cc:	e0bffe15 	stw	r2,-8(fp)
		for (index = 0; index < 3; index++)
   1d3d0:	e0bfff17 	ldw	r2,-4(fp)
   1d3d4:	10800044 	addi	r2,r2,1
   1d3d8:	e0bfff15 	stw	r2,-4(fp)
   1d3dc:	e0bfff17 	ldw	r2,-4(fp)
   1d3e0:	108000d0 	cmplti	r2,r2,3
   1d3e4:	103fe71e 	bne	r2,zero,1d384 <copy_file_record_name_to_string+0xc0>
			}
		}
	}
	file_name[flength] = 0;
   1d3e8:	e0bffe17 	ldw	r2,-8(fp)
   1d3ec:	e0fffc17 	ldw	r3,-16(fp)
   1d3f0:	1885883a 	add	r2,r3,r2
   1d3f4:	10000005 	stb	zero,0(r2)
}
   1d3f8:	0001883a 	nop
   1d3fc:	e037883a 	mov	sp,fp
   1d400:	df000017 	ldw	fp,0(sp)
   1d404:	dec00104 	addi	sp,sp,4
   1d408:	f800283a 	ret

0001d40c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   1d40c:	defffc04 	addi	sp,sp,-16
   1d410:	dfc00315 	stw	ra,12(sp)
   1d414:	df000215 	stw	fp,8(sp)
   1d418:	df000204 	addi	fp,sp,8
   1d41c:	e13ffe15 	stw	r4,-8(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   1d420:	d1600704 	addi	r5,gp,-32740
   1d424:	e13ffe17 	ldw	r4,-8(fp)
   1d428:	001fe5c0 	call	1fe5c <alt_find_dev>
   1d42c:	e0bfff15 	stw	r2,-4(fp)

	if (dev != NULL)
   1d430:	e0bfff17 	ldw	r2,-4(fp)
   1d434:	10001d26 	beq	r2,zero,1d4ac <alt_up_sd_card_open_dev+0xa0>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   1d438:	e0bfff17 	ldw	r2,-4(fp)
   1d43c:	10800a17 	ldw	r2,40(r2)
   1d440:	10808d04 	addi	r2,r2,564
   1d444:	d0a74c15 	stw	r2,-25296(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   1d448:	e0bfff17 	ldw	r2,-4(fp)
   1d44c:	10800a17 	ldw	r2,40(r2)
   1d450:	10808904 	addi	r2,r2,548
   1d454:	d0a74d15 	stw	r2,-25292(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   1d458:	e0bfff17 	ldw	r2,-4(fp)
   1d45c:	10800a17 	ldw	r2,40(r2)
   1d460:	10808404 	addi	r2,r2,528
   1d464:	d0a74e15 	stw	r2,-25288(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   1d468:	e0bfff17 	ldw	r2,-4(fp)
   1d46c:	10800a17 	ldw	r2,40(r2)
   1d470:	10808c04 	addi	r2,r2,560
   1d474:	d0a74f15 	stw	r2,-25284(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   1d478:	e0bfff17 	ldw	r2,-4(fp)
   1d47c:	10800a17 	ldw	r2,40(r2)
   1d480:	10808b04 	addi	r2,r2,556
   1d484:	d0a75015 	stw	r2,-25280(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   1d488:	e0bfff17 	ldw	r2,-4(fp)
   1d48c:	10800a17 	ldw	r2,40(r2)
   1d490:	d0a75115 	stw	r2,-25276(gp)
		device_pointer = dev;
   1d494:	e0bfff17 	ldw	r2,-4(fp)
   1d498:	d0a75415 	stw	r2,-25264(gp)
		initialized = false;
   1d49c:	d0274a15 	stw	zero,-25304(gp)
		is_sd_card_formated_as_FAT16 = false;
   1d4a0:	d0274b15 	stw	zero,-25300(gp)
		search_data.valid = false;
   1d4a4:	008000b4 	movhi	r2,2
   1d4a8:	10176815 	stw	zero,23968(r2)
	}
	return dev;
   1d4ac:	e0bfff17 	ldw	r2,-4(fp)
}
   1d4b0:	e037883a 	mov	sp,fp
   1d4b4:	dfc00117 	ldw	ra,4(sp)
   1d4b8:	df000017 	ldw	fp,0(sp)
   1d4bc:	dec00204 	addi	sp,sp,8
   1d4c0:	f800283a 	ret

0001d4c4 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   1d4c4:	defffd04 	addi	sp,sp,-12
   1d4c8:	df000215 	stw	fp,8(sp)
   1d4cc:	df000204 	addi	fp,sp,8
    bool result = false;
   1d4d0:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   1d4d4:	d0a75417 	ldw	r2,-25264(gp)
   1d4d8:	10000826 	beq	r2,zero,1d4fc <alt_up_sd_card_is_Present+0x38>
   1d4dc:	d0a74c17 	ldw	r2,-25296(gp)
   1d4e0:	1080002b 	ldhuio	r2,0(r2)
   1d4e4:	10bfffcc 	andi	r2,r2,65535
   1d4e8:	1080008c 	andi	r2,r2,2
   1d4ec:	10000326 	beq	r2,zero,1d4fc <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   1d4f0:	00800044 	movi	r2,1
   1d4f4:	e0bfff15 	stw	r2,-4(fp)
   1d4f8:	00001906 	br	1d560 <alt_up_sd_card_is_Present+0x9c>
    }
	else if (initialized == true)
   1d4fc:	d0a74a17 	ldw	r2,-25304(gp)
   1d500:	10800058 	cmpnei	r2,r2,1
   1d504:	1000161e 	bne	r2,zero,1d560 <alt_up_sd_card_is_Present+0x9c>
	{
		int index;

		initialized = false;
   1d508:	d0274a15 	stw	zero,-25304(gp)
		search_data.valid = false;
   1d50c:	008000b4 	movhi	r2,2
   1d510:	10176815 	stw	zero,23968(r2)
		is_sd_card_formated_as_FAT16 = false;
   1d514:	d0274b15 	stw	zero,-25300(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   1d518:	e03ffe15 	stw	zero,-8(fp)
   1d51c:	00000d06 	br	1d554 <alt_up_sd_card_is_Present+0x90>
		{
			active_files[index].in_use = false;
   1d520:	e0bffe17 	ldw	r2,-8(fp)
   1d524:	100691ba 	slli	r3,r2,6
   1d528:	008000b4 	movhi	r2,2
   1d52c:	1885883a 	add	r2,r3,r2
   1d530:	10163315 	stw	zero,22732(r2)
			active_files[index].modified = false;
   1d534:	e0bffe17 	ldw	r2,-8(fp)
   1d538:	100691ba 	slli	r3,r2,6
   1d53c:	008000b4 	movhi	r2,2
   1d540:	1885883a 	add	r2,r3,r2
   1d544:	10163215 	stw	zero,22728(r2)
		for(index = 0; index < MAX_FILES_OPENED; index++)
   1d548:	e0bffe17 	ldw	r2,-8(fp)
   1d54c:	10800044 	addi	r2,r2,1
   1d550:	e0bffe15 	stw	r2,-8(fp)
   1d554:	e0bffe17 	ldw	r2,-8(fp)
   1d558:	10800510 	cmplti	r2,r2,20
   1d55c:	103ff01e 	bne	r2,zero,1d520 <alt_up_sd_card_is_Present+0x5c>
		}
	}
    return result;
   1d560:	e0bfff17 	ldw	r2,-4(fp)
}
   1d564:	e037883a 	mov	sp,fp
   1d568:	df000017 	ldw	fp,0(sp)
   1d56c:	dec00104 	addi	sp,sp,4
   1d570:	f800283a 	ret

0001d574 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   1d574:	defffd04 	addi	sp,sp,-12
   1d578:	dfc00215 	stw	ra,8(sp)
   1d57c:	df000115 	stw	fp,4(sp)
   1d580:	df000104 	addi	fp,sp,4
	bool result = false;
   1d584:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   1d588:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1d58c:	10000b26 	beq	r2,zero,1d5bc <alt_up_sd_card_is_FAT16+0x48>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   1d590:	d0a74a17 	ldw	r2,-25304(gp)
   1d594:	1000061e 	bne	r2,zero,1d5b0 <alt_up_sd_card_is_FAT16+0x3c>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   1d598:	001b9080 	call	1b908 <Look_for_FAT16>
   1d59c:	d0a74b15 	stw	r2,-25300(gp)
			initialized = is_sd_card_formated_as_FAT16;
   1d5a0:	d0a74b17 	ldw	r2,-25300(gp)
   1d5a4:	d0a74a15 	stw	r2,-25304(gp)
			search_data.valid = false;
   1d5a8:	008000b4 	movhi	r2,2
   1d5ac:	10176815 	stw	zero,23968(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   1d5b0:	d0a74b17 	ldw	r2,-25300(gp)
   1d5b4:	e0bfff15 	stw	r2,-4(fp)
   1d5b8:	00000206 	br	1d5c4 <alt_up_sd_card_is_FAT16+0x50>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   1d5bc:	d0274a15 	stw	zero,-25304(gp)
		is_sd_card_formated_as_FAT16 = false;
   1d5c0:	d0274b15 	stw	zero,-25300(gp)
	}

	return result;
   1d5c4:	e0bfff17 	ldw	r2,-4(fp)
}
   1d5c8:	e037883a 	mov	sp,fp
   1d5cc:	dfc00117 	ldw	ra,4(sp)
   1d5d0:	df000017 	ldw	fp,0(sp)
   1d5d4:	dec00204 	addi	sp,sp,8
   1d5d8:	f800283a 	ret

0001d5dc <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   1d5dc:	deffea04 	addi	sp,sp,-88
   1d5e0:	dfc01515 	stw	ra,84(sp)
   1d5e4:	df001415 	stw	fp,80(sp)
   1d5e8:	df001404 	addi	fp,sp,80
   1d5ec:	e13fed15 	stw	r4,-76(fp)
   1d5f0:	e17fec15 	stw	r5,-80(fp)
	short int result = 2;
   1d5f4:	00800084 	movi	r2,2
   1d5f8:	e0bfff8d 	sth	r2,-2(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1d5fc:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1d600:	10001f26 	beq	r2,zero,1d680 <alt_up_sd_card_find_first+0xa4>
   1d604:	d0a74b17 	ldw	r2,-25300(gp)
   1d608:	10001d26 	beq	r2,zero,1d680 <alt_up_sd_card_find_first+0xa4>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   1d60c:	e0ffee04 	addi	r3,fp,-72
   1d610:	e0bffe04 	addi	r2,fp,-8
   1d614:	180d883a 	mov	r6,r3
   1d618:	100b883a 	mov	r5,r2
   1d61c:	e13fed17 	ldw	r4,-76(fp)
   1d620:	001c06c0 	call	1c06c <get_home_directory_cluster_for_file>
   1d624:	10001426 	beq	r2,zero,1d678 <alt_up_sd_card_find_first+0x9c>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   1d628:	e0bffe17 	ldw	r2,-8(fp)
   1d62c:	1007883a 	mov	r3,r2
   1d630:	008000b4 	movhi	r2,2
   1d634:	10d76415 	stw	r3,23952(r2)
			search_data.current_cluster_index = home_directory_cluster;
   1d638:	e0bffe17 	ldw	r2,-8(fp)
   1d63c:	1007883a 	mov	r3,r2
   1d640:	008000b4 	movhi	r2,2
   1d644:	10d76515 	stw	r3,23956(r2)
			search_data.current_sector_in_cluster = 0;
   1d648:	008000b4 	movhi	r2,2
   1d64c:	10176615 	stw	zero,23960(r2)
			search_data.file_index_in_sector = -1;
   1d650:	00ffffc4 	movi	r3,-1
   1d654:	008000b4 	movhi	r2,2
   1d658:	10d7670d 	sth	r3,23964(r2)
			search_data.valid = true;
   1d65c:	00c00044 	movi	r3,1
   1d660:	008000b4 	movhi	r2,2
   1d664:	10d76815 	stw	r3,23968(r2)
			result = alt_up_sd_card_find_next(file_name);
   1d668:	e13fec17 	ldw	r4,-80(fp)
   1d66c:	001d6980 	call	1d698 <alt_up_sd_card_find_next>
   1d670:	e0bfff8d 	sth	r2,-2(fp)
   1d674:	00000206 	br	1d680 <alt_up_sd_card_find_first+0xa4>
		}
		else
		{
			result = 1;
   1d678:	00800044 	movi	r2,1
   1d67c:	e0bfff8d 	sth	r2,-2(fp)
		}
	}
	return result;
   1d680:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1d684:	e037883a 	mov	sp,fp
   1d688:	dfc00117 	ldw	ra,4(sp)
   1d68c:	df000017 	ldw	fp,0(sp)
   1d690:	dec00204 	addi	sp,sp,8
   1d694:	f800283a 	ret

0001d698 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   1d698:	deffe404 	addi	sp,sp,-112
   1d69c:	dfc01b15 	stw	ra,108(sp)
   1d6a0:	df001a15 	stw	fp,104(sp)
   1d6a4:	df001a04 	addi	fp,sp,104
   1d6a8:	e13fe615 	stw	r4,-104(fp)
	short int result = 2;
   1d6ac:	00800084 	movi	r2,2
   1d6b0:	e0bfff8d 	sth	r2,-2(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1d6b4:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1d6b8:	1000cc26 	beq	r2,zero,1d9ec <alt_up_sd_card_find_next+0x354>
   1d6bc:	d0a74b17 	ldw	r2,-25300(gp)
   1d6c0:	1000ca26 	beq	r2,zero,1d9ec <alt_up_sd_card_find_next+0x354>
	{
		if (search_data.valid)
   1d6c4:	008000b4 	movhi	r2,2
   1d6c8:	10976817 	ldw	r2,23968(r2)
   1d6cc:	1000c526 	beq	r2,zero,1d9e4 <alt_up_sd_card_find_next+0x34c>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   1d6d0:	008000b4 	movhi	r2,2
   1d6d4:	10976517 	ldw	r2,23956(r2)
   1d6d8:	e0bffe15 	stw	r2,-8(fp)

			if (cluster == 0)
   1d6dc:	e0bffe17 	ldw	r2,-8(fp)
   1d6e0:	10004f1e 	bne	r2,zero,1d820 <alt_up_sd_card_find_next+0x188>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1d6e4:	008000b4 	movhi	r2,2
   1d6e8:	1096140b 	ldhu	r2,22608(r2)
   1d6ec:	10bfffcc 	andi	r2,r2,65535
   1d6f0:	1006917a 	slli	r3,r2,5
   1d6f4:	008000b4 	movhi	r2,2
   1d6f8:	1096120b 	ldhu	r2,22600(r2)
   1d6fc:	10bfffcc 	andi	r2,r2,65535
   1d700:	1885283a 	div	r2,r3,r2
   1d704:	e0bff815 	stw	r2,-32(fp)
				int sector_index = search_data.current_sector_in_cluster;
   1d708:	008000b4 	movhi	r2,2
   1d70c:	10976617 	ldw	r2,23960(r2)
   1d710:	e0bffd15 	stw	r2,-12(fp)
				int file_counter = search_data.file_index_in_sector+1;
   1d714:	008000b4 	movhi	r2,2
   1d718:	1097670b 	ldhu	r2,23964(r2)
   1d71c:	10bfffcc 	andi	r2,r2,65535
   1d720:	10a0001c 	xori	r2,r2,32768
   1d724:	10a00004 	addi	r2,r2,-32768
   1d728:	10800044 	addi	r2,r2,1
   1d72c:	e0bffc15 	stw	r2,-16(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1d730:	00003306 	br	1d800 <alt_up_sd_card_find_next+0x168>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1d734:	008000b4 	movhi	r2,2
   1d738:	10d62217 	ldw	r3,22664(r2)
   1d73c:	e0bffd17 	ldw	r2,-12(fp)
   1d740:	1885883a 	add	r2,r3,r2
   1d744:	1007883a 	mov	r3,r2
   1d748:	d0a75217 	ldw	r2,-25272(gp)
   1d74c:	100b883a 	mov	r5,r2
   1d750:	1809883a 	mov	r4,r3
   1d754:	001aa300 	call	1aa30 <Read_Sector_Data>
   1d758:	10002d26 	beq	r2,zero,1d810 <alt_up_sd_card_find_next+0x178>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   1d75c:	00002106 	br	1d7e4 <alt_up_sd_card_find_next+0x14c>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   1d760:	e0bffc17 	ldw	r2,-16(fp)
   1d764:	1004917a 	slli	r2,r2,5
   1d768:	e13ffd17 	ldw	r4,-12(fp)
   1d76c:	e0ffe704 	addi	r3,fp,-100
   1d770:	200f883a 	mov	r7,r4
   1d774:	000d883a 	mov	r6,zero
   1d778:	180b883a 	mov	r5,r3
   1d77c:	1009883a 	mov	r4,r2
   1d780:	001ae3c0 	call	1ae3c <Read_File_Record_At_Offset>
   1d784:	10001426 	beq	r2,zero,1d7d8 <alt_up_sd_card_find_next+0x140>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1d788:	e0bfe703 	ldbu	r2,-100(fp)
   1d78c:	10803fcc 	andi	r2,r2,255
   1d790:	10001126 	beq	r2,zero,1d7d8 <alt_up_sd_card_find_next+0x140>
   1d794:	e0bfe703 	ldbu	r2,-100(fp)
   1d798:	10803fcc 	andi	r2,r2,255
   1d79c:	10803960 	cmpeqi	r2,r2,229
   1d7a0:	10000d1e 	bne	r2,zero,1d7d8 <alt_up_sd_card_find_next+0x140>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   1d7a4:	e0bffc17 	ldw	r2,-16(fp)
   1d7a8:	1007883a 	mov	r3,r2
   1d7ac:	008000b4 	movhi	r2,2
   1d7b0:	10d7670d 	sth	r3,23964(r2)
									search_data.current_sector_in_cluster = sector_index;
   1d7b4:	e0fffd17 	ldw	r3,-12(fp)
   1d7b8:	008000b4 	movhi	r2,2
   1d7bc:	10d76615 	stw	r3,23960(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   1d7c0:	e0bfe704 	addi	r2,fp,-100
   1d7c4:	e17fe617 	ldw	r5,-104(fp)
   1d7c8:	1009883a 	mov	r4,r2
   1d7cc:	001d2c40 	call	1d2c4 <copy_file_record_name_to_string>
									return 0;
   1d7d0:	0005883a 	mov	r2,zero
   1d7d4:	00008606 	br	1d9f0 <alt_up_sd_card_find_next+0x358>
						for (; file_counter < 16; file_counter++)
   1d7d8:	e0bffc17 	ldw	r2,-16(fp)
   1d7dc:	10800044 	addi	r2,r2,1
   1d7e0:	e0bffc15 	stw	r2,-16(fp)
   1d7e4:	e0bffc17 	ldw	r2,-16(fp)
   1d7e8:	10800410 	cmplti	r2,r2,16
   1d7ec:	103fdc1e 	bne	r2,zero,1d760 <alt_up_sd_card_find_next+0xc8>
								}
							}
						}
						file_counter = 0;
   1d7f0:	e03ffc15 	stw	zero,-16(fp)
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1d7f4:	e0bffd17 	ldw	r2,-12(fp)
   1d7f8:	10800044 	addi	r2,r2,1
   1d7fc:	e0bffd15 	stw	r2,-12(fp)
   1d800:	e0fffd17 	ldw	r3,-12(fp)
   1d804:	e0bff817 	ldw	r2,-32(fp)
   1d808:	18bfca16 	blt	r3,r2,1d734 <alt_up_sd_card_find_next+0x9c>
   1d80c:	00000106 	br	1d814 <alt_up_sd_card_find_next+0x17c>
					}
					else
					{
						break;
   1d810:	0001883a 	nop
					}
				}
				result = -1;
   1d814:	00bfffc4 	movi	r2,-1
   1d818:	e0bfff8d 	sth	r2,-2(fp)
   1d81c:	00007306 	br	1d9ec <alt_up_sd_card_find_next+0x354>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   1d820:	008000b4 	movhi	r2,2
   1d824:	1097670b 	ldhu	r2,23964(r2)
   1d828:	10bfffcc 	andi	r2,r2,65535
   1d82c:	10a0001c 	xori	r2,r2,32768
   1d830:	10a00004 	addi	r2,r2,-32768
   1d834:	10800044 	addi	r2,r2,1
   1d838:	e0bffb15 	stw	r2,-20(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1d83c:	e0bffe17 	ldw	r2,-8(fp)
   1d840:	10ffff84 	addi	r3,r2,-2
   1d844:	008000b4 	movhi	r2,2
   1d848:	10961283 	ldbu	r2,22602(r2)
   1d84c:	10803fcc 	andi	r2,r2,255
   1d850:	1885383a 	mul	r2,r3,r2
   1d854:	1007883a 	mov	r3,r2
   1d858:	008000b4 	movhi	r2,2
   1d85c:	10962317 	ldw	r2,22668(r2)
   1d860:	1885883a 	add	r2,r3,r2
   1d864:	e0bff915 	stw	r2,-28(fp)
					int sector_index = search_data.current_sector_in_cluster;
   1d868:	008000b4 	movhi	r2,2
   1d86c:	10976617 	ldw	r2,23960(r2)
   1d870:	e0bffa15 	stw	r2,-24(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1d874:	00003506 	br	1d94c <alt_up_sd_card_find_next+0x2b4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1d878:	e0fffa17 	ldw	r3,-24(fp)
   1d87c:	e0bff917 	ldw	r2,-28(fp)
   1d880:	1885883a 	add	r2,r3,r2
   1d884:	d0e75217 	ldw	r3,-25272(gp)
   1d888:	180b883a 	mov	r5,r3
   1d88c:	1009883a 	mov	r4,r2
   1d890:	001aa300 	call	1aa30 <Read_Sector_Data>
   1d894:	10003326 	beq	r2,zero,1d964 <alt_up_sd_card_find_next+0x2cc>
						{        
							for (; file_counter < 16; file_counter++)
   1d898:	00002506 	br	1d930 <alt_up_sd_card_find_next+0x298>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   1d89c:	e0bffb17 	ldw	r2,-20(fp)
   1d8a0:	1004917a 	slli	r2,r2,5
   1d8a4:	e13ffe17 	ldw	r4,-8(fp)
   1d8a8:	e17ffa17 	ldw	r5,-24(fp)
   1d8ac:	e0ffe704 	addi	r3,fp,-100
   1d8b0:	280f883a 	mov	r7,r5
   1d8b4:	200d883a 	mov	r6,r4
   1d8b8:	180b883a 	mov	r5,r3
   1d8bc:	1009883a 	mov	r4,r2
   1d8c0:	001ae3c0 	call	1ae3c <Read_File_Record_At_Offset>
   1d8c4:	10001726 	beq	r2,zero,1d924 <alt_up_sd_card_find_next+0x28c>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1d8c8:	e0bfe703 	ldbu	r2,-100(fp)
   1d8cc:	10803fcc 	andi	r2,r2,255
   1d8d0:	10001426 	beq	r2,zero,1d924 <alt_up_sd_card_find_next+0x28c>
   1d8d4:	e0bfe703 	ldbu	r2,-100(fp)
   1d8d8:	10803fcc 	andi	r2,r2,255
   1d8dc:	10803960 	cmpeqi	r2,r2,229
   1d8e0:	1000101e 	bne	r2,zero,1d924 <alt_up_sd_card_find_next+0x28c>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   1d8e4:	e0fffe17 	ldw	r3,-8(fp)
   1d8e8:	008000b4 	movhi	r2,2
   1d8ec:	10d76515 	stw	r3,23956(r2)
										search_data.file_index_in_sector = file_counter;
   1d8f0:	e0bffb17 	ldw	r2,-20(fp)
   1d8f4:	1007883a 	mov	r3,r2
   1d8f8:	008000b4 	movhi	r2,2
   1d8fc:	10d7670d 	sth	r3,23964(r2)
										search_data.current_sector_in_cluster = sector_index;
   1d900:	e0fffa17 	ldw	r3,-24(fp)
   1d904:	008000b4 	movhi	r2,2
   1d908:	10d76615 	stw	r3,23960(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   1d90c:	e0bfe704 	addi	r2,fp,-100
   1d910:	e17fe617 	ldw	r5,-104(fp)
   1d914:	1009883a 	mov	r4,r2
   1d918:	001d2c40 	call	1d2c4 <copy_file_record_name_to_string>
										return 0;
   1d91c:	0005883a 	mov	r2,zero
   1d920:	00003306 	br	1d9f0 <alt_up_sd_card_find_next+0x358>
							for (; file_counter < 16; file_counter++)
   1d924:	e0bffb17 	ldw	r2,-20(fp)
   1d928:	10800044 	addi	r2,r2,1
   1d92c:	e0bffb15 	stw	r2,-20(fp)
   1d930:	e0bffb17 	ldw	r2,-20(fp)
   1d934:	10800410 	cmplti	r2,r2,16
   1d938:	103fd81e 	bne	r2,zero,1d89c <alt_up_sd_card_find_next+0x204>
									}
								}
							}
							file_counter = 0;
   1d93c:	e03ffb15 	stw	zero,-20(fp)
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1d940:	e0bffa17 	ldw	r2,-24(fp)
   1d944:	10800044 	addi	r2,r2,1
   1d948:	e0bffa15 	stw	r2,-24(fp)
   1d94c:	008000b4 	movhi	r2,2
   1d950:	10961283 	ldbu	r2,22602(r2)
   1d954:	10803fcc 	andi	r2,r2,255
   1d958:	e0fffa17 	ldw	r3,-24(fp)
   1d95c:	18bfc616 	blt	r3,r2,1d878 <alt_up_sd_card_find_next+0x1e0>
   1d960:	00000106 	br	1d968 <alt_up_sd_card_find_next+0x2d0>
						}
						else
						{
							break;
   1d964:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   1d968:	008000b4 	movhi	r2,2
   1d96c:	10961283 	ldbu	r2,22602(r2)
   1d970:	10803fcc 	andi	r2,r2,255
   1d974:	e0fffa17 	ldw	r3,-24(fp)
   1d978:	18801616 	blt	r3,r2,1d9d4 <alt_up_sd_card_find_next+0x33c>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   1d97c:	e0bffe17 	ldw	r2,-8(fp)
   1d980:	e0fff784 	addi	r3,fp,-34
   1d984:	180b883a 	mov	r5,r3
   1d988:	1009883a 	mov	r4,r2
   1d98c:	001ab080 	call	1ab08 <get_cluster_flag>
   1d990:	10000e26 	beq	r2,zero,1d9cc <alt_up_sd_card_find_next+0x334>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1d994:	e0bff78b 	ldhu	r2,-34(fp)
   1d998:	10bfffcc 	andi	r2,r2,65535
   1d99c:	10fffe0c 	andi	r3,r2,65528
   1d9a0:	00bffe14 	movui	r2,65528
   1d9a4:	1880041e 	bne	r3,r2,1d9b8 <alt_up_sd_card_find_next+0x320>
							{
								result = -1;
   1d9a8:	00bfffc4 	movi	r2,-1
   1d9ac:	e0bfff8d 	sth	r2,-2(fp)
								search_data.valid = false;
   1d9b0:	008000b4 	movhi	r2,2
   1d9b4:	10176815 	stw	zero,23968(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   1d9b8:	e0bff78b 	ldhu	r2,-34(fp)
   1d9bc:	10bfffcc 	andi	r2,r2,65535
   1d9c0:	10bffe0c 	andi	r2,r2,65528
   1d9c4:	e0bffe15 	stw	r2,-8(fp)
   1d9c8:	00000206 	br	1d9d4 <alt_up_sd_card_find_next+0x33c>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   1d9cc:	00bfffc4 	movi	r2,-1
   1d9d0:	e0bfff8d 	sth	r2,-2(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   1d9d4:	e0bffe17 	ldw	r2,-8(fp)
   1d9d8:	00fffdd4 	movui	r3,65527
   1d9dc:	18bf970e 	bge	r3,r2,1d83c <alt_up_sd_card_find_next+0x1a4>
   1d9e0:	00000206 	br	1d9ec <alt_up_sd_card_find_next+0x354>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   1d9e4:	008000c4 	movi	r2,3
   1d9e8:	e0bfff8d 	sth	r2,-2(fp)
		}
	}
	return result;
   1d9ec:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1d9f0:	e037883a 	mov	sp,fp
   1d9f4:	dfc00117 	ldw	ra,4(sp)
   1d9f8:	df000017 	ldw	fp,0(sp)
   1d9fc:	dec00204 	addi	sp,sp,8
   1da00:	f800283a 	ret

0001da04 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   1da04:	deffe904 	addi	sp,sp,-92
   1da08:	dfc01615 	stw	ra,88(sp)
   1da0c:	df001515 	stw	fp,84(sp)
   1da10:	df001504 	addi	fp,sp,84
   1da14:	e13fec15 	stw	r4,-80(fp)
   1da18:	e17feb15 	stw	r5,-84(fp)
	short int file_record_index = -1;
   1da1c:	00bfffc4 	movi	r2,-1
   1da20:	e0bfff8d 	sth	r2,-2(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1da24:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1da28:	1000af26 	beq	r2,zero,1dce8 <alt_up_sd_card_fopen+0x2e4>
   1da2c:	d0a74b17 	ldw	r2,-25300(gp)
   1da30:	1000ad26 	beq	r2,zero,1dce8 <alt_up_sd_card_fopen+0x2e4>
	{
        unsigned int home_directory_cluster = 0;
   1da34:	e03ffd15 	stw	zero,-12(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   1da38:	e13fec17 	ldw	r4,-80(fp)
   1da3c:	001b9ec0 	call	1b9ec <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   1da40:	e13fec17 	ldw	r4,-80(fp)
   1da44:	001babc0 	call	1babc <check_file_name_for_FAT16_compliance>
   1da48:	1000a726 	beq	r2,zero,1dce8 <alt_up_sd_card_fopen+0x2e4>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   1da4c:	e0ffed04 	addi	r3,fp,-76
   1da50:	e0bffd04 	addi	r2,fp,-12
   1da54:	180d883a 	mov	r6,r3
   1da58:	100b883a 	mov	r5,r2
   1da5c:	e13fec17 	ldw	r4,-80(fp)
   1da60:	001c06c0 	call	1c06c <get_home_directory_cluster_for_file>
   1da64:	1000021e 	bne	r2,zero,1da70 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   1da68:	e0bfff8b 	ldhu	r2,-2(fp)
   1da6c:	00009f06 	br	1dcec <alt_up_sd_card_fopen+0x2e8>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1da70:	e03ffe15 	stw	zero,-8(fp)
   1da74:	00000c06 	br	1daa8 <alt_up_sd_card_fopen+0xa4>
    		{
    			if (active_files[index].in_use == false)
   1da78:	e0bffe17 	ldw	r2,-8(fp)
   1da7c:	100691ba 	slli	r3,r2,6
   1da80:	008000b4 	movhi	r2,2
   1da84:	1885883a 	add	r2,r3,r2
   1da88:	10963317 	ldw	r2,22732(r2)
   1da8c:	1000031e 	bne	r2,zero,1da9c <alt_up_sd_card_fopen+0x98>
    			{
    				file_record_index = index;
   1da90:	e0bffe17 	ldw	r2,-8(fp)
   1da94:	e0bfff8d 	sth	r2,-2(fp)
    				break;
   1da98:	00000606 	br	1dab4 <alt_up_sd_card_fopen+0xb0>
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1da9c:	e0bffe17 	ldw	r2,-8(fp)
   1daa0:	10800044 	addi	r2,r2,1
   1daa4:	e0bffe15 	stw	r2,-8(fp)
   1daa8:	e0bffe17 	ldw	r2,-8(fp)
   1daac:	10800510 	cmplti	r2,r2,20
   1dab0:	103ff11e 	bne	r2,zero,1da78 <alt_up_sd_card_fopen+0x74>
    			}
    		}
    		if (file_record_index >= 0)
   1dab4:	e0bfff8f 	ldh	r2,-2(fp)
   1dab8:	10008b16 	blt	r2,zero,1dce8 <alt_up_sd_card_fopen+0x2e4>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   1dabc:	e0bffd17 	ldw	r2,-12(fp)
   1dac0:	1009883a 	mov	r4,r2
   1dac4:	e0bfff8f 	ldh	r2,-2(fp)
   1dac8:	100691ba 	slli	r3,r2,6
   1dacc:	008000b4 	movhi	r2,2
   1dad0:	10962404 	addi	r2,r2,22672
   1dad4:	1885883a 	add	r2,r3,r2
   1dad8:	100d883a 	mov	r6,r2
   1dadc:	e17fec17 	ldw	r5,-80(fp)
   1dae0:	001c55c0 	call	1c55c <find_file_in_directory>
   1dae4:	10006126 	beq	r2,zero,1dc6c <alt_up_sd_card_fopen+0x268>
                {
                    if (create)
   1dae8:	e0bfeb17 	ldw	r2,-84(fp)
   1daec:	10000226 	beq	r2,zero,1daf8 <alt_up_sd_card_fopen+0xf4>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   1daf0:	00bfffc4 	movi	r2,-1
   1daf4:	00007d06 	br	1dcec <alt_up_sd_card_fopen+0x2e8>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   1daf8:	e0bfff8f 	ldh	r2,-2(fp)
   1dafc:	100691ba 	slli	r3,r2,6
   1db00:	008000b4 	movhi	r2,2
   1db04:	1885883a 	add	r2,r3,r2
   1db08:	10d6298b 	ldhu	r3,22694(r2)
   1db0c:	e0bfff8f 	ldh	r2,-2(fp)
   1db10:	18ffffcc 	andi	r3,r3,65535
   1db14:	100891ba 	slli	r4,r2,6
   1db18:	008000b4 	movhi	r2,2
   1db1c:	2085883a 	add	r2,r4,r2
   1db20:	10d62b15 	stw	r3,22700(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   1db24:	e0bfff8f 	ldh	r2,-2(fp)
   1db28:	100691ba 	slli	r3,r2,6
   1db2c:	008000b4 	movhi	r2,2
   1db30:	1885883a 	add	r2,r3,r2
   1db34:	10162c15 	stw	zero,22704(r2)
                    active_files[file_record_index].current_byte_position = 0;
   1db38:	e0bfff8f 	ldh	r2,-2(fp)
   1db3c:	100691ba 	slli	r3,r2,6
   1db40:	008000b4 	movhi	r2,2
   1db44:	1885883a 	add	r2,r3,r2
   1db48:	10162d15 	stw	zero,22708(r2)
                    active_files[file_record_index].in_use = true;
   1db4c:	e0bfff8f 	ldh	r2,-2(fp)
   1db50:	100891ba 	slli	r4,r2,6
   1db54:	00c00044 	movi	r3,1
   1db58:	008000b4 	movhi	r2,2
   1db5c:	2085883a 	add	r2,r4,r2
   1db60:	10d63315 	stw	r3,22732(r2)
    				active_files[file_record_index].modified = false;
   1db64:	e0bfff8f 	ldh	r2,-2(fp)
   1db68:	100691ba 	slli	r3,r2,6
   1db6c:	008000b4 	movhi	r2,2
   1db70:	1885883a 	add	r2,r3,r2
   1db74:	10163215 	stw	zero,22728(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1db78:	e03ffe15 	stw	zero,-8(fp)
   1db7c:	00003706 	br	1dc5c <alt_up_sd_card_fopen+0x258>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   1db80:	e0bfff8f 	ldh	r2,-2(fp)
   1db84:	e0fffe17 	ldw	r3,-8(fp)
   1db88:	18803126 	beq	r3,r2,1dc50 <alt_up_sd_card_fopen+0x24c>
   1db8c:	e0bffe17 	ldw	r2,-8(fp)
   1db90:	100691ba 	slli	r3,r2,6
   1db94:	008000b4 	movhi	r2,2
   1db98:	1885883a 	add	r2,r3,r2
   1db9c:	10963317 	ldw	r2,22732(r2)
   1dba0:	10800058 	cmpnei	r2,r2,1
   1dba4:	10002a1e 	bne	r2,zero,1dc50 <alt_up_sd_card_fopen+0x24c>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1dba8:	e0bfff8f 	ldh	r2,-2(fp)
   1dbac:	100691ba 	slli	r3,r2,6
   1dbb0:	008000b4 	movhi	r2,2
   1dbb4:	1885883a 	add	r2,r3,r2
   1dbb8:	10d62e17 	ldw	r3,22712(r2)
   1dbbc:	e0bffe17 	ldw	r2,-8(fp)
   1dbc0:	100891ba 	slli	r4,r2,6
   1dbc4:	008000b4 	movhi	r2,2
   1dbc8:	2085883a 	add	r2,r4,r2
   1dbcc:	10962e17 	ldw	r2,22712(r2)
   1dbd0:	18801f1e 	bne	r3,r2,1dc50 <alt_up_sd_card_fopen+0x24c>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1dbd4:	e0bfff8f 	ldh	r2,-2(fp)
   1dbd8:	100691ba 	slli	r3,r2,6
   1dbdc:	008000b4 	movhi	r2,2
   1dbe0:	1885883a 	add	r2,r3,r2
   1dbe4:	10d62f17 	ldw	r3,22716(r2)
   1dbe8:	e0bffe17 	ldw	r2,-8(fp)
   1dbec:	100891ba 	slli	r4,r2,6
   1dbf0:	008000b4 	movhi	r2,2
   1dbf4:	2085883a 	add	r2,r4,r2
   1dbf8:	10962f17 	ldw	r2,22716(r2)
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1dbfc:	1880141e 	bne	r3,r2,1dc50 <alt_up_sd_card_fopen+0x24c>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   1dc00:	e0bfff8f 	ldh	r2,-2(fp)
   1dc04:	100691ba 	slli	r3,r2,6
   1dc08:	008000b4 	movhi	r2,2
   1dc0c:	1885883a 	add	r2,r3,r2
   1dc10:	1116300b 	ldhu	r4,22720(r2)
   1dc14:	e0bffe17 	ldw	r2,-8(fp)
   1dc18:	100691ba 	slli	r3,r2,6
   1dc1c:	008000b4 	movhi	r2,2
   1dc20:	1885883a 	add	r2,r3,r2
   1dc24:	1096300b 	ldhu	r2,22720(r2)
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1dc28:	20ffffcc 	andi	r3,r4,65535
   1dc2c:	18e0001c 	xori	r3,r3,32768
   1dc30:	18e00004 	addi	r3,r3,-32768
   1dc34:	10bfffcc 	andi	r2,r2,65535
   1dc38:	10a0001c 	xori	r2,r2,32768
   1dc3c:	10a00004 	addi	r2,r2,-32768
   1dc40:	1880031e 	bne	r3,r2,1dc50 <alt_up_sd_card_fopen+0x24c>
							{
								// file already in use.
								file_record_index = -2;
   1dc44:	00bfff84 	movi	r2,-2
   1dc48:	e0bfff8d 	sth	r2,-2(fp)
								break;
   1dc4c:	00002606 	br	1dce8 <alt_up_sd_card_fopen+0x2e4>
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1dc50:	e0bffe17 	ldw	r2,-8(fp)
   1dc54:	10800044 	addi	r2,r2,1
   1dc58:	e0bffe15 	stw	r2,-8(fp)
   1dc5c:	e0bffe17 	ldw	r2,-8(fp)
   1dc60:	10800510 	cmplti	r2,r2,20
   1dc64:	103fc61e 	bne	r2,zero,1db80 <alt_up_sd_card_fopen+0x17c>
   1dc68:	00001f06 	br	1dce8 <alt_up_sd_card_fopen+0x2e4>
							}
						}
					}

                }
                else if (create)
   1dc6c:	e0bfeb17 	ldw	r2,-84(fp)
   1dc70:	10001b26 	beq	r2,zero,1dce0 <alt_up_sd_card_fopen+0x2dc>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   1dc74:	e0bfff8f 	ldh	r2,-2(fp)
   1dc78:	100691ba 	slli	r3,r2,6
   1dc7c:	008000b4 	movhi	r2,2
   1dc80:	10962404 	addi	r2,r2,22672
   1dc84:	1885883a 	add	r2,r3,r2
   1dc88:	e0ffed04 	addi	r3,fp,-76
   1dc8c:	180d883a 	mov	r6,r3
   1dc90:	100b883a 	mov	r5,r2
   1dc94:	e13fec17 	ldw	r4,-80(fp)
   1dc98:	001d0080 	call	1d008 <create_file>
   1dc9c:	10000d26 	beq	r2,zero,1dcd4 <alt_up_sd_card_fopen+0x2d0>
                    {
                        active_files[file_record_index].in_use = true;
   1dca0:	e0bfff8f 	ldh	r2,-2(fp)
   1dca4:	100891ba 	slli	r4,r2,6
   1dca8:	00c00044 	movi	r3,1
   1dcac:	008000b4 	movhi	r2,2
   1dcb0:	2085883a 	add	r2,r4,r2
   1dcb4:	10d63315 	stw	r3,22732(r2)
    					active_files[file_record_index].modified = true;
   1dcb8:	e0bfff8f 	ldh	r2,-2(fp)
   1dcbc:	100891ba 	slli	r4,r2,6
   1dcc0:	00c00044 	movi	r3,1
   1dcc4:	008000b4 	movhi	r2,2
   1dcc8:	2085883a 	add	r2,r4,r2
   1dccc:	10d63215 	stw	r3,22728(r2)
   1dcd0:	00000506 	br	1dce8 <alt_up_sd_card_fopen+0x2e4>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   1dcd4:	00bfffc4 	movi	r2,-1
   1dcd8:	e0bfff8d 	sth	r2,-2(fp)
   1dcdc:	00000206 	br	1dce8 <alt_up_sd_card_fopen+0x2e4>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   1dce0:	00bfffc4 	movi	r2,-1
   1dce4:	e0bfff8d 	sth	r2,-2(fp)
                }
    		}
        }
	}

	return file_record_index;
   1dce8:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1dcec:	e037883a 	mov	sp,fp
   1dcf0:	dfc00117 	ldw	ra,4(sp)
   1dcf4:	df000017 	ldw	fp,0(sp)
   1dcf8:	dec00204 	addi	sp,sp,8
   1dcfc:	f800283a 	ret

0001dd00 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1dd00:	defffd04 	addi	sp,sp,-12
   1dd04:	df000215 	stw	fp,8(sp)
   1dd08:	df000204 	addi	fp,sp,8
   1dd0c:	2005883a 	mov	r2,r4
   1dd10:	2807883a 	mov	r3,r5
   1dd14:	e0bfff0d 	sth	r2,-4(fp)
   1dd18:	1805883a 	mov	r2,r3
   1dd1c:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1dd20:	e0bfff0f 	ldh	r2,-4(fp)
   1dd24:	10001016 	blt	r2,zero,1dd68 <alt_up_sd_card_set_attributes+0x68>
   1dd28:	e0bfff0f 	ldh	r2,-4(fp)
   1dd2c:	10800508 	cmpgei	r2,r2,20
   1dd30:	10000d1e 	bne	r2,zero,1dd68 <alt_up_sd_card_set_attributes+0x68>
    {
        if (active_files[file_handle].in_use)
   1dd34:	e0bfff0f 	ldh	r2,-4(fp)
   1dd38:	100691ba 	slli	r3,r2,6
   1dd3c:	008000b4 	movhi	r2,2
   1dd40:	1885883a 	add	r2,r3,r2
   1dd44:	10963317 	ldw	r2,22732(r2)
   1dd48:	10000726 	beq	r2,zero,1dd68 <alt_up_sd_card_set_attributes+0x68>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   1dd4c:	e0bfff0f 	ldh	r2,-4(fp)
   1dd50:	e0fffe0b 	ldhu	r3,-8(fp)
   1dd54:	1809883a 	mov	r4,r3
   1dd58:	100691ba 	slli	r3,r2,6
   1dd5c:	008000b4 	movhi	r2,2
   1dd60:	1885883a 	add	r2,r3,r2
   1dd64:	111626c5 	stb	r4,22683(r2)
        }
    }
}
   1dd68:	0001883a 	nop
   1dd6c:	e037883a 	mov	sp,fp
   1dd70:	df000017 	ldw	fp,0(sp)
   1dd74:	dec00104 	addi	sp,sp,4
   1dd78:	f800283a 	ret

0001dd7c <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1dd7c:	defffd04 	addi	sp,sp,-12
   1dd80:	df000215 	stw	fp,8(sp)
   1dd84:	df000204 	addi	fp,sp,8
   1dd88:	2005883a 	mov	r2,r4
   1dd8c:	e0bffe0d 	sth	r2,-8(fp)
	short int result = -1;
   1dd90:	00bfffc4 	movi	r2,-1
   1dd94:	e0bfff8d 	sth	r2,-2(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1dd98:	e0bffe0f 	ldh	r2,-8(fp)
   1dd9c:	10001016 	blt	r2,zero,1dde0 <alt_up_sd_card_get_attributes+0x64>
   1dda0:	e0bffe0f 	ldh	r2,-8(fp)
   1dda4:	10800508 	cmpgei	r2,r2,20
   1dda8:	10000d1e 	bne	r2,zero,1dde0 <alt_up_sd_card_get_attributes+0x64>
    {
        if (active_files[file_handle].in_use)
   1ddac:	e0bffe0f 	ldh	r2,-8(fp)
   1ddb0:	100691ba 	slli	r3,r2,6
   1ddb4:	008000b4 	movhi	r2,2
   1ddb8:	1885883a 	add	r2,r3,r2
   1ddbc:	10963317 	ldw	r2,22732(r2)
   1ddc0:	10000726 	beq	r2,zero,1dde0 <alt_up_sd_card_get_attributes+0x64>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   1ddc4:	e0bffe0f 	ldh	r2,-8(fp)
   1ddc8:	100691ba 	slli	r3,r2,6
   1ddcc:	008000b4 	movhi	r2,2
   1ddd0:	1885883a 	add	r2,r3,r2
   1ddd4:	109626c3 	ldbu	r2,22683(r2)
   1ddd8:	10803fcc 	andi	r2,r2,255
   1dddc:	e0bfff8d 	sth	r2,-2(fp)
		}
	}
	return result;
   1dde0:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1dde4:	e037883a 	mov	sp,fp
   1dde8:	df000017 	ldw	fp,0(sp)
   1ddec:	dec00104 	addi	sp,sp,4
   1ddf0:	f800283a 	ret

0001ddf4 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   1ddf4:	defffa04 	addi	sp,sp,-24
   1ddf8:	dfc00515 	stw	ra,20(sp)
   1ddfc:	df000415 	stw	fp,16(sp)
   1de00:	df000404 	addi	fp,sp,16
   1de04:	2005883a 	mov	r2,r4
   1de08:	e0bffc0d 	sth	r2,-16(fp)
    short int ch = -1;
   1de0c:	00bfffc4 	movi	r2,-1
   1de10:	e0bfff8d 	sth	r2,-2(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1de14:	e0bffc0f 	ldh	r2,-16(fp)
   1de18:	1000a516 	blt	r2,zero,1e0b0 <alt_up_sd_card_read+0x2bc>
   1de1c:	e0bffc0f 	ldh	r2,-16(fp)
   1de20:	10800508 	cmpgei	r2,r2,20
   1de24:	1000a21e 	bne	r2,zero,1e0b0 <alt_up_sd_card_read+0x2bc>
    {
        if (active_files[file_handle].in_use)
   1de28:	e0bffc0f 	ldh	r2,-16(fp)
   1de2c:	100691ba 	slli	r3,r2,6
   1de30:	008000b4 	movhi	r2,2
   1de34:	1885883a 	add	r2,r3,r2
   1de38:	10963317 	ldw	r2,22732(r2)
   1de3c:	10009c26 	beq	r2,zero,1e0b0 <alt_up_sd_card_read+0x2bc>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1de40:	e0bffc0f 	ldh	r2,-16(fp)
   1de44:	100691ba 	slli	r3,r2,6
   1de48:	008000b4 	movhi	r2,2
   1de4c:	1885883a 	add	r2,r3,r2
   1de50:	10d62d17 	ldw	r3,22708(r2)
   1de54:	e0bffc0f 	ldh	r2,-16(fp)
   1de58:	100891ba 	slli	r4,r2,6
   1de5c:	008000b4 	movhi	r2,2
   1de60:	2085883a 	add	r2,r4,r2
   1de64:	10962a17 	ldw	r2,22696(r2)
   1de68:	1880912e 	bgeu	r3,r2,1e0b0 <alt_up_sd_card_read+0x2bc>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1de6c:	008000b4 	movhi	r2,2
   1de70:	10d62317 	ldw	r3,22668(r2)
   1de74:	e0bffc0f 	ldh	r2,-16(fp)
   1de78:	100891ba 	slli	r4,r2,6
   1de7c:	008000b4 	movhi	r2,2
   1de80:	2085883a 	add	r2,r4,r2
   1de84:	10962b17 	ldw	r2,22700(r2)
   1de88:	113fff84 	addi	r4,r2,-2
   1de8c:	008000b4 	movhi	r2,2
   1de90:	10961283 	ldbu	r2,22602(r2)
   1de94:	10803fcc 	andi	r2,r2,255
   1de98:	2085383a 	mul	r2,r4,r2
   1de9c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   1dea0:	e0bffc0f 	ldh	r2,-16(fp)
   1dea4:	100891ba 	slli	r4,r2,6
   1dea8:	008000b4 	movhi	r2,2
   1deac:	2085883a 	add	r2,r4,r2
   1deb0:	10962c17 	ldw	r2,22704(r2)
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1deb4:	1885883a 	add	r2,r3,r2
   1deb8:	e0bffe15 	stw	r2,-8(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   1debc:	e0bffc0f 	ldh	r2,-16(fp)
   1dec0:	100691ba 	slli	r3,r2,6
   1dec4:	008000b4 	movhi	r2,2
   1dec8:	1885883a 	add	r2,r3,r2
   1decc:	10962d17 	ldw	r2,22708(r2)
   1ded0:	10005326 	beq	r2,zero,1e020 <alt_up_sd_card_read+0x22c>
   1ded4:	e0bffc0f 	ldh	r2,-16(fp)
   1ded8:	100691ba 	slli	r3,r2,6
   1dedc:	008000b4 	movhi	r2,2
   1dee0:	1885883a 	add	r2,r3,r2
   1dee4:	10962d17 	ldw	r2,22708(r2)
   1dee8:	10807fcc 	andi	r2,r2,511
   1deec:	10004c1e 	bne	r2,zero,1e020 <alt_up_sd_card_read+0x22c>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1def0:	e0bffc0f 	ldh	r2,-16(fp)
   1def4:	100691ba 	slli	r3,r2,6
   1def8:	008000b4 	movhi	r2,2
   1defc:	1885883a 	add	r2,r3,r2
   1df00:	10962c17 	ldw	r2,22704(r2)
   1df04:	00c000b4 	movhi	r3,2
   1df08:	18d61283 	ldbu	r3,22602(r3)
   1df0c:	18c03fcc 	andi	r3,r3,255
   1df10:	18ffffc4 	addi	r3,r3,-1
   1df14:	10c0341e 	bne	r2,r3,1dfe8 <alt_up_sd_card_read+0x1f4>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1df18:	e0bffc0f 	ldh	r2,-16(fp)
   1df1c:	100691ba 	slli	r3,r2,6
   1df20:	008000b4 	movhi	r2,2
   1df24:	1885883a 	add	r2,r3,r2
   1df28:	10962b17 	ldw	r2,22700(r2)
   1df2c:	e0fffd84 	addi	r3,fp,-10
   1df30:	180b883a 	mov	r5,r3
   1df34:	1009883a 	mov	r4,r2
   1df38:	001ab080 	call	1ab08 <get_cluster_flag>
   1df3c:	10002826 	beq	r2,zero,1dfe0 <alt_up_sd_card_read+0x1ec>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1df40:	e0bffd8b 	ldhu	r2,-10(fp)
   1df44:	10bfffcc 	andi	r2,r2,65535
   1df48:	10fffe0c 	andi	r3,r2,65528
   1df4c:	00bffe14 	movui	r2,65528
   1df50:	1880021e 	bne	r3,r2,1df5c <alt_up_sd_card_read+0x168>
                            {
                                /* End of file */
                                return -1;
   1df54:	00bfffc4 	movi	r2,-1
   1df58:	00005606 	br	1e0b4 <alt_up_sd_card_read+0x2c0>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1df5c:	e0fffd8b 	ldhu	r3,-10(fp)
   1df60:	e0bffc0f 	ldh	r2,-16(fp)
   1df64:	18ffffcc 	andi	r3,r3,65535
   1df68:	100891ba 	slli	r4,r2,6
   1df6c:	008000b4 	movhi	r2,2
   1df70:	2085883a 	add	r2,r4,r2
   1df74:	10d62b15 	stw	r3,22700(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1df78:	e0bffc0f 	ldh	r2,-16(fp)
   1df7c:	100691ba 	slli	r3,r2,6
   1df80:	008000b4 	movhi	r2,2
   1df84:	1885883a 	add	r2,r3,r2
   1df88:	10162c15 	stw	zero,22704(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1df8c:	008000b4 	movhi	r2,2
   1df90:	10d62317 	ldw	r3,22668(r2)
   1df94:	e0bffc0f 	ldh	r2,-16(fp)
   1df98:	100891ba 	slli	r4,r2,6
   1df9c:	008000b4 	movhi	r2,2
   1dfa0:	2085883a 	add	r2,r4,r2
   1dfa4:	10962b17 	ldw	r2,22700(r2)
   1dfa8:	113fff84 	addi	r4,r2,-2
   1dfac:	008000b4 	movhi	r2,2
   1dfb0:	10961283 	ldbu	r2,22602(r2)
   1dfb4:	10803fcc 	andi	r2,r2,255
   1dfb8:	2085383a 	mul	r2,r4,r2
   1dfbc:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1dfc0:	e0bffc0f 	ldh	r2,-16(fp)
   1dfc4:	100891ba 	slli	r4,r2,6
   1dfc8:	008000b4 	movhi	r2,2
   1dfcc:	2085883a 	add	r2,r4,r2
   1dfd0:	10962c17 	ldw	r2,22704(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1dfd4:	1885883a 	add	r2,r3,r2
   1dfd8:	e0bffe15 	stw	r2,-8(fp)
   1dfdc:	00001006 	br	1e020 <alt_up_sd_card_read+0x22c>
                            }
                        }
                        else
                        {
                            return -2;
   1dfe0:	00bfff84 	movi	r2,-2
   1dfe4:	00003306 	br	1e0b4 <alt_up_sd_card_read+0x2c0>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1dfe8:	e0bffc0f 	ldh	r2,-16(fp)
   1dfec:	100691ba 	slli	r3,r2,6
   1dff0:	008000b4 	movhi	r2,2
   1dff4:	1885883a 	add	r2,r3,r2
   1dff8:	10d62c17 	ldw	r3,22704(r2)
   1dffc:	e0bffc0f 	ldh	r2,-16(fp)
   1e000:	18c00044 	addi	r3,r3,1
   1e004:	100891ba 	slli	r4,r2,6
   1e008:	008000b4 	movhi	r2,2
   1e00c:	2085883a 	add	r2,r4,r2
   1e010:	10d62c15 	stw	r3,22704(r2)
                        data_sector = data_sector + 1;
   1e014:	e0bffe17 	ldw	r2,-8(fp)
   1e018:	10800044 	addi	r2,r2,1
   1e01c:	e0bffe15 	stw	r2,-8(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   1e020:	d0e75217 	ldw	r3,-25272(gp)
   1e024:	e0bffe17 	ldw	r2,-8(fp)
   1e028:	1885883a 	add	r2,r3,r2
   1e02c:	1007883a 	mov	r3,r2
   1e030:	d0a75617 	ldw	r2,-25256(gp)
   1e034:	18800726 	beq	r3,r2,1e054 <alt_up_sd_card_read+0x260>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1e038:	d0a75217 	ldw	r2,-25272(gp)
   1e03c:	100b883a 	mov	r5,r2
   1e040:	e13ffe17 	ldw	r4,-8(fp)
   1e044:	001aa300 	call	1aa30 <Read_Sector_Data>
   1e048:	1000021e 	bne	r2,zero,1e054 <alt_up_sd_card_read+0x260>
                    {
						return -2;
   1e04c:	00bfff84 	movi	r2,-2
   1e050:	00001806 	br	1e0b4 <alt_up_sd_card_read+0x2c0>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   1e054:	d0e75117 	ldw	r3,-25276(gp)
   1e058:	e0bffc0f 	ldh	r2,-16(fp)
   1e05c:	100891ba 	slli	r4,r2,6
   1e060:	008000b4 	movhi	r2,2
   1e064:	2085883a 	add	r2,r4,r2
   1e068:	10962d17 	ldw	r2,22708(r2)
   1e06c:	10807fcc 	andi	r2,r2,511
   1e070:	1885883a 	add	r2,r3,r2
   1e074:	10800023 	ldbuio	r2,0(r2)
   1e078:	10803fcc 	andi	r2,r2,255
   1e07c:	10803fcc 	andi	r2,r2,255
   1e080:	e0bfff8d 	sth	r2,-2(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1e084:	e0bffc0f 	ldh	r2,-16(fp)
   1e088:	100691ba 	slli	r3,r2,6
   1e08c:	008000b4 	movhi	r2,2
   1e090:	1885883a 	add	r2,r3,r2
   1e094:	10d62d17 	ldw	r3,22708(r2)
   1e098:	e0bffc0f 	ldh	r2,-16(fp)
   1e09c:	18c00044 	addi	r3,r3,1
   1e0a0:	100891ba 	slli	r4,r2,6
   1e0a4:	008000b4 	movhi	r2,2
   1e0a8:	2085883a 	add	r2,r4,r2
   1e0ac:	10d62d15 	stw	r3,22708(r2)
            }
        }
    }
    
    return ch;
   1e0b0:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1e0b4:	e037883a 	mov	sp,fp
   1e0b8:	dfc00117 	ldw	ra,4(sp)
   1e0bc:	df000017 	ldw	fp,0(sp)
   1e0c0:	dec00204 	addi	sp,sp,8
   1e0c4:	f800283a 	ret

0001e0c8 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   1e0c8:	defff804 	addi	sp,sp,-32
   1e0cc:	dfc00715 	stw	ra,28(sp)
   1e0d0:	df000615 	stw	fp,24(sp)
   1e0d4:	df000604 	addi	fp,sp,24
   1e0d8:	2005883a 	mov	r2,r4
   1e0dc:	2807883a 	mov	r3,r5
   1e0e0:	e0bffb0d 	sth	r2,-20(fp)
   1e0e4:	1805883a 	mov	r2,r3
   1e0e8:	e0bffa05 	stb	r2,-24(fp)
    bool result = false;
   1e0ec:	e03fff15 	stw	zero,-4(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1e0f0:	e0bffb0f 	ldh	r2,-20(fp)
   1e0f4:	10012d16 	blt	r2,zero,1e5ac <alt_up_sd_card_write+0x4e4>
   1e0f8:	e0bffb0f 	ldh	r2,-20(fp)
   1e0fc:	10800508 	cmpgei	r2,r2,20
   1e100:	10012a1e 	bne	r2,zero,1e5ac <alt_up_sd_card_write+0x4e4>
    {
        if (active_files[file_handle].in_use)
   1e104:	e0bffb0f 	ldh	r2,-20(fp)
   1e108:	100691ba 	slli	r3,r2,6
   1e10c:	008000b4 	movhi	r2,2
   1e110:	1885883a 	add	r2,r3,r2
   1e114:	10963317 	ldw	r2,22732(r2)
   1e118:	10012426 	beq	r2,zero,1e5ac <alt_up_sd_card_write+0x4e4>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e11c:	008000b4 	movhi	r2,2
   1e120:	10d62317 	ldw	r3,22668(r2)
   1e124:	e0bffb0f 	ldh	r2,-20(fp)
   1e128:	100891ba 	slli	r4,r2,6
   1e12c:	008000b4 	movhi	r2,2
   1e130:	2085883a 	add	r2,r4,r2
   1e134:	10962b17 	ldw	r2,22700(r2)
   1e138:	113fff84 	addi	r4,r2,-2
   1e13c:	008000b4 	movhi	r2,2
   1e140:	10961283 	ldbu	r2,22602(r2)
   1e144:	10803fcc 	andi	r2,r2,255
   1e148:	2085383a 	mul	r2,r4,r2
   1e14c:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   1e150:	e0bffb0f 	ldh	r2,-20(fp)
   1e154:	100891ba 	slli	r4,r2,6
   1e158:	008000b4 	movhi	r2,2
   1e15c:	2085883a 	add	r2,r4,r2
   1e160:	10962c17 	ldw	r2,22704(r2)
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e164:	1885883a 	add	r2,r3,r2
   1e168:	e0bffe15 	stw	r2,-8(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   1e16c:	e0bffb0f 	ldh	r2,-20(fp)
   1e170:	100691ba 	slli	r3,r2,6
   1e174:	008000b4 	movhi	r2,2
   1e178:	1885883a 	add	r2,r3,r2
   1e17c:	10962d17 	ldw	r2,22708(r2)
   1e180:	00c000b4 	movhi	r3,2
   1e184:	18d6120b 	ldhu	r3,22600(r3)
   1e188:	18ffffcc 	andi	r3,r3,65535
   1e18c:	10c9203a 	divu	r4,r2,r3
   1e190:	20c7383a 	mul	r3,r4,r3
   1e194:	10c5c83a 	sub	r2,r2,r3
   1e198:	e0bffd8d 	sth	r2,-10(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1e19c:	e0bffb0f 	ldh	r2,-20(fp)
   1e1a0:	100691ba 	slli	r3,r2,6
   1e1a4:	008000b4 	movhi	r2,2
   1e1a8:	1885883a 	add	r2,r3,r2
   1e1ac:	10d62d17 	ldw	r3,22708(r2)
   1e1b0:	e0bffb0f 	ldh	r2,-20(fp)
   1e1b4:	100891ba 	slli	r4,r2,6
   1e1b8:	008000b4 	movhi	r2,2
   1e1bc:	2085883a 	add	r2,r4,r2
   1e1c0:	10962a17 	ldw	r2,22696(r2)
   1e1c4:	1880522e 	bgeu	r3,r2,1e310 <alt_up_sd_card_write+0x248>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1e1c8:	e0bffb0f 	ldh	r2,-20(fp)
   1e1cc:	100691ba 	slli	r3,r2,6
   1e1d0:	008000b4 	movhi	r2,2
   1e1d4:	1885883a 	add	r2,r3,r2
   1e1d8:	10962d17 	ldw	r2,22708(r2)
   1e1dc:	1000b626 	beq	r2,zero,1e4b8 <alt_up_sd_card_write+0x3f0>
   1e1e0:	e0bffd8f 	ldh	r2,-10(fp)
   1e1e4:	1000b41e 	bne	r2,zero,1e4b8 <alt_up_sd_card_write+0x3f0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1e1e8:	e0bffb0f 	ldh	r2,-20(fp)
   1e1ec:	100691ba 	slli	r3,r2,6
   1e1f0:	008000b4 	movhi	r2,2
   1e1f4:	1885883a 	add	r2,r3,r2
   1e1f8:	10962c17 	ldw	r2,22704(r2)
   1e1fc:	00c000b4 	movhi	r3,2
   1e200:	18d61283 	ldbu	r3,22602(r3)
   1e204:	18c03fcc 	andi	r3,r3,255
   1e208:	18ffffc4 	addi	r3,r3,-1
   1e20c:	10c0311e 	bne	r2,r3,1e2d4 <alt_up_sd_card_write+0x20c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1e210:	e0bffb0f 	ldh	r2,-20(fp)
   1e214:	100691ba 	slli	r3,r2,6
   1e218:	008000b4 	movhi	r2,2
   1e21c:	1885883a 	add	r2,r3,r2
   1e220:	10962b17 	ldw	r2,22700(r2)
   1e224:	e0fffd04 	addi	r3,fp,-12
   1e228:	180b883a 	mov	r5,r3
   1e22c:	1009883a 	mov	r4,r2
   1e230:	001ab080 	call	1ab08 <get_cluster_flag>
   1e234:	10002526 	beq	r2,zero,1e2cc <alt_up_sd_card_write+0x204>
                        {
                            if (next_cluster < 0x0000fff8)
   1e238:	e0bffd0b 	ldhu	r2,-12(fp)
   1e23c:	10bfffcc 	andi	r2,r2,65535
   1e240:	10bffe28 	cmpgeui	r2,r2,65528
   1e244:	10009c1e 	bne	r2,zero,1e4b8 <alt_up_sd_card_write+0x3f0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1e248:	e0fffd0b 	ldhu	r3,-12(fp)
   1e24c:	e0bffb0f 	ldh	r2,-20(fp)
   1e250:	18ffffcc 	andi	r3,r3,65535
   1e254:	100891ba 	slli	r4,r2,6
   1e258:	008000b4 	movhi	r2,2
   1e25c:	2085883a 	add	r2,r4,r2
   1e260:	10d62b15 	stw	r3,22700(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1e264:	e0bffb0f 	ldh	r2,-20(fp)
   1e268:	100691ba 	slli	r3,r2,6
   1e26c:	008000b4 	movhi	r2,2
   1e270:	1885883a 	add	r2,r3,r2
   1e274:	10162c15 	stw	zero,22704(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e278:	008000b4 	movhi	r2,2
   1e27c:	10d62317 	ldw	r3,22668(r2)
   1e280:	e0bffb0f 	ldh	r2,-20(fp)
   1e284:	100891ba 	slli	r4,r2,6
   1e288:	008000b4 	movhi	r2,2
   1e28c:	2085883a 	add	r2,r4,r2
   1e290:	10962b17 	ldw	r2,22700(r2)
   1e294:	113fff84 	addi	r4,r2,-2
   1e298:	008000b4 	movhi	r2,2
   1e29c:	10961283 	ldbu	r2,22602(r2)
   1e2a0:	10803fcc 	andi	r2,r2,255
   1e2a4:	2085383a 	mul	r2,r4,r2
   1e2a8:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1e2ac:	e0bffb0f 	ldh	r2,-20(fp)
   1e2b0:	100891ba 	slli	r4,r2,6
   1e2b4:	008000b4 	movhi	r2,2
   1e2b8:	2085883a 	add	r2,r4,r2
   1e2bc:	10962c17 	ldw	r2,22704(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e2c0:	1885883a 	add	r2,r3,r2
   1e2c4:	e0bffe15 	stw	r2,-8(fp)
   1e2c8:	00007b06 	br	1e4b8 <alt_up_sd_card_write+0x3f0>
                            }
                        }
                        else
                        {
                            return false;
   1e2cc:	0005883a 	mov	r2,zero
   1e2d0:	0000b706 	br	1e5b0 <alt_up_sd_card_write+0x4e8>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1e2d4:	e0bffb0f 	ldh	r2,-20(fp)
   1e2d8:	100691ba 	slli	r3,r2,6
   1e2dc:	008000b4 	movhi	r2,2
   1e2e0:	1885883a 	add	r2,r3,r2
   1e2e4:	10d62c17 	ldw	r3,22704(r2)
   1e2e8:	e0bffb0f 	ldh	r2,-20(fp)
   1e2ec:	18c00044 	addi	r3,r3,1
   1e2f0:	100891ba 	slli	r4,r2,6
   1e2f4:	008000b4 	movhi	r2,2
   1e2f8:	2085883a 	add	r2,r4,r2
   1e2fc:	10d62c15 	stw	r3,22704(r2)
                        data_sector = data_sector + 1;
   1e300:	e0bffe17 	ldw	r2,-8(fp)
   1e304:	10800044 	addi	r2,r2,1
   1e308:	e0bffe15 	stw	r2,-8(fp)
   1e30c:	00006a06 	br	1e4b8 <alt_up_sd_card_write+0x3f0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1e310:	e0bffb0f 	ldh	r2,-20(fp)
   1e314:	100691ba 	slli	r3,r2,6
   1e318:	008000b4 	movhi	r2,2
   1e31c:	1885883a 	add	r2,r3,r2
   1e320:	10962d17 	ldw	r2,22708(r2)
   1e324:	10006426 	beq	r2,zero,1e4b8 <alt_up_sd_card_write+0x3f0>
   1e328:	e0bffd8f 	ldh	r2,-10(fp)
   1e32c:	1000621e 	bne	r2,zero,1e4b8 <alt_up_sd_card_write+0x3f0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1e330:	e0bffb0f 	ldh	r2,-20(fp)
   1e334:	100691ba 	slli	r3,r2,6
   1e338:	008000b4 	movhi	r2,2
   1e33c:	1885883a 	add	r2,r3,r2
   1e340:	10962c17 	ldw	r2,22704(r2)
   1e344:	00c000b4 	movhi	r3,2
   1e348:	18d61283 	ldbu	r3,22602(r3)
   1e34c:	18c03fcc 	andi	r3,r3,255
   1e350:	18ffffc4 	addi	r3,r3,-1
   1e354:	10c0361e 	bne	r2,r3,1e430 <alt_up_sd_card_write+0x368>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   1e358:	e0bffc04 	addi	r2,fp,-16
   1e35c:	1009883a 	mov	r4,r2
   1e360:	001c9880 	call	1c988 <find_first_empty_cluster>
   1e364:	10003026 	beq	r2,zero,1e428 <alt_up_sd_card_write+0x360>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   1e368:	e0bffb0f 	ldh	r2,-20(fp)
   1e36c:	100691ba 	slli	r3,r2,6
   1e370:	008000b4 	movhi	r2,2
   1e374:	1885883a 	add	r2,r3,r2
   1e378:	10962b17 	ldw	r2,22700(r2)
   1e37c:	e0fffc17 	ldw	r3,-16(fp)
   1e380:	18ffffcc 	andi	r3,r3,65535
   1e384:	18e0001c 	xori	r3,r3,32768
   1e388:	18e00004 	addi	r3,r3,-32768
   1e38c:	01800044 	movi	r6,1
   1e390:	180b883a 	mov	r5,r3
   1e394:	1009883a 	mov	r4,r2
   1e398:	001abb80 	call	1abb8 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   1e39c:	e0bffc17 	ldw	r2,-16(fp)
   1e3a0:	01800044 	movi	r6,1
   1e3a4:	017fffc4 	movi	r5,-1
   1e3a8:	1009883a 	mov	r4,r2
   1e3ac:	001abb80 	call	1abb8 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   1e3b0:	e0bffb0f 	ldh	r2,-20(fp)
   1e3b4:	100691ba 	slli	r3,r2,6
   1e3b8:	008000b4 	movhi	r2,2
   1e3bc:	1885883a 	add	r2,r3,r2
   1e3c0:	10962b17 	ldw	r2,22700(r2)
   1e3c4:	e0fffc17 	ldw	r3,-16(fp)
   1e3c8:	18ffffcc 	andi	r3,r3,65535
   1e3cc:	18e0001c 	xori	r3,r3,32768
   1e3d0:	18e00004 	addi	r3,r3,-32768
   1e3d4:	000d883a 	mov	r6,zero
   1e3d8:	180b883a 	mov	r5,r3
   1e3dc:	1009883a 	mov	r4,r2
   1e3e0:	001abb80 	call	1abb8 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   1e3e4:	e0bffc17 	ldw	r2,-16(fp)
   1e3e8:	000d883a 	mov	r6,zero
   1e3ec:	017fffc4 	movi	r5,-1
   1e3f0:	1009883a 	mov	r4,r2
   1e3f4:	001abb80 	call	1abb8 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   1e3f8:	e0bffb0f 	ldh	r2,-20(fp)
   1e3fc:	e0fffc17 	ldw	r3,-16(fp)
   1e400:	100891ba 	slli	r4,r2,6
   1e404:	008000b4 	movhi	r2,2
   1e408:	2085883a 	add	r2,r4,r2
   1e40c:	10d62b15 	stw	r3,22700(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   1e410:	e0bffb0f 	ldh	r2,-20(fp)
   1e414:	100691ba 	slli	r3,r2,6
   1e418:	008000b4 	movhi	r2,2
   1e41c:	1885883a 	add	r2,r3,r2
   1e420:	10162c15 	stw	zero,22704(r2)
   1e424:	00001006 	br	1e468 <alt_up_sd_card_write+0x3a0>
						}
						else
						{
							return false;
   1e428:	0005883a 	mov	r2,zero
   1e42c:	00006006 	br	1e5b0 <alt_up_sd_card_write+0x4e8>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   1e430:	e0bffb0f 	ldh	r2,-20(fp)
   1e434:	100691ba 	slli	r3,r2,6
   1e438:	008000b4 	movhi	r2,2
   1e43c:	1885883a 	add	r2,r3,r2
   1e440:	11162d17 	ldw	r4,22708(r2)
   1e444:	008000b4 	movhi	r2,2
   1e448:	1096120b 	ldhu	r2,22600(r2)
   1e44c:	10ffffcc 	andi	r3,r2,65535
   1e450:	e0bffb0f 	ldh	r2,-20(fp)
   1e454:	20c7203a 	divu	r3,r4,r3
   1e458:	100891ba 	slli	r4,r2,6
   1e45c:	008000b4 	movhi	r2,2
   1e460:	2085883a 	add	r2,r4,r2
   1e464:	10d62c15 	stw	r3,22704(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e468:	008000b4 	movhi	r2,2
   1e46c:	10d62317 	ldw	r3,22668(r2)
   1e470:	e0bffb0f 	ldh	r2,-20(fp)
   1e474:	100891ba 	slli	r4,r2,6
   1e478:	008000b4 	movhi	r2,2
   1e47c:	2085883a 	add	r2,r4,r2
   1e480:	10962b17 	ldw	r2,22700(r2)
   1e484:	113fff84 	addi	r4,r2,-2
   1e488:	008000b4 	movhi	r2,2
   1e48c:	10961283 	ldbu	r2,22602(r2)
   1e490:	10803fcc 	andi	r2,r2,255
   1e494:	2085383a 	mul	r2,r4,r2
   1e498:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   1e49c:	e0bffb0f 	ldh	r2,-20(fp)
   1e4a0:	100891ba 	slli	r4,r2,6
   1e4a4:	008000b4 	movhi	r2,2
   1e4a8:	2085883a 	add	r2,r4,r2
   1e4ac:	10962c17 	ldw	r2,22704(r2)
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e4b0:	1885883a 	add	r2,r3,r2
   1e4b4:	e0bffe15 	stw	r2,-8(fp)
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   1e4b8:	d0e75217 	ldw	r3,-25272(gp)
   1e4bc:	e0bffe17 	ldw	r2,-8(fp)
   1e4c0:	1885883a 	add	r2,r3,r2
   1e4c4:	1007883a 	mov	r3,r2
   1e4c8:	d0a75617 	ldw	r2,-25256(gp)
   1e4cc:	18800726 	beq	r3,r2,1e4ec <alt_up_sd_card_write+0x424>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1e4d0:	d0a75217 	ldw	r2,-25272(gp)
   1e4d4:	100b883a 	mov	r5,r2
   1e4d8:	e13ffe17 	ldw	r4,-8(fp)
   1e4dc:	001aa300 	call	1aa30 <Read_Sector_Data>
   1e4e0:	1000021e 	bne	r2,zero,1e4ec <alt_up_sd_card_write+0x424>
                {
					return false;
   1e4e4:	0005883a 	mov	r2,zero
   1e4e8:	00003106 	br	1e5b0 <alt_up_sd_card_write+0x4e8>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   1e4ec:	d0e75117 	ldw	r3,-25276(gp)
   1e4f0:	e0bffd8f 	ldh	r2,-10(fp)
   1e4f4:	1885883a 	add	r2,r3,r2
   1e4f8:	e0fffa07 	ldb	r3,-24(fp)
   1e4fc:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1e500:	e0bffb0f 	ldh	r2,-20(fp)
   1e504:	100691ba 	slli	r3,r2,6
   1e508:	008000b4 	movhi	r2,2
   1e50c:	1885883a 	add	r2,r3,r2
   1e510:	10d62d17 	ldw	r3,22708(r2)
   1e514:	e0bffb0f 	ldh	r2,-20(fp)
   1e518:	18c00044 	addi	r3,r3,1
   1e51c:	100891ba 	slli	r4,r2,6
   1e520:	008000b4 	movhi	r2,2
   1e524:	2085883a 	add	r2,r4,r2
   1e528:	10d62d15 	stw	r3,22708(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   1e52c:	e0bffb0f 	ldh	r2,-20(fp)
   1e530:	100691ba 	slli	r3,r2,6
   1e534:	008000b4 	movhi	r2,2
   1e538:	1885883a 	add	r2,r3,r2
   1e53c:	10d62d17 	ldw	r3,22708(r2)
   1e540:	e0bffb0f 	ldh	r2,-20(fp)
   1e544:	100891ba 	slli	r4,r2,6
   1e548:	008000b4 	movhi	r2,2
   1e54c:	2085883a 	add	r2,r4,r2
   1e550:	10962a17 	ldw	r2,22696(r2)
   1e554:	18801136 	bltu	r3,r2,1e59c <alt_up_sd_card_write+0x4d4>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   1e558:	e0bffb0f 	ldh	r2,-20(fp)
   1e55c:	100691ba 	slli	r3,r2,6
   1e560:	008000b4 	movhi	r2,2
   1e564:	1885883a 	add	r2,r3,r2
   1e568:	10d62a17 	ldw	r3,22696(r2)
   1e56c:	e0bffb0f 	ldh	r2,-20(fp)
   1e570:	18c00044 	addi	r3,r3,1
   1e574:	100891ba 	slli	r4,r2,6
   1e578:	008000b4 	movhi	r2,2
   1e57c:	2085883a 	add	r2,r4,r2
   1e580:	10d62a15 	stw	r3,22696(r2)
				active_files[file_handle].modified = true;
   1e584:	e0bffb0f 	ldh	r2,-20(fp)
   1e588:	100891ba 	slli	r4,r2,6
   1e58c:	00c00044 	movi	r3,1
   1e590:	008000b4 	movhi	r2,2
   1e594:	2085883a 	add	r2,r4,r2
   1e598:	10d63215 	stw	r3,22728(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   1e59c:	00800044 	movi	r2,1
   1e5a0:	d0a75515 	stw	r2,-25260(gp)
			result = true;
   1e5a4:	00800044 	movi	r2,1
   1e5a8:	e0bfff15 	stw	r2,-4(fp)
		}
    }
    
    return result;
   1e5ac:	e0bfff17 	ldw	r2,-4(fp)
}
   1e5b0:	e037883a 	mov	sp,fp
   1e5b4:	dfc00117 	ldw	ra,4(sp)
   1e5b8:	df000017 	ldw	fp,0(sp)
   1e5bc:	dec00204 	addi	sp,sp,8
   1e5c0:	f800283a 	ret

0001e5c4 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   1e5c4:	defffb04 	addi	sp,sp,-20
   1e5c8:	dfc00415 	stw	ra,16(sp)
   1e5cc:	df000315 	stw	fp,12(sp)
   1e5d0:	df000304 	addi	fp,sp,12
   1e5d4:	2005883a 	mov	r2,r4
   1e5d8:	e0bffd0d 	sth	r2,-12(fp)
    bool result = false;
   1e5dc:	e03fff15 	stw	zero,-4(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1e5e0:	001d4c40 	call	1d4c4 <alt_up_sd_card_is_Present>
   1e5e4:	10004f26 	beq	r2,zero,1e724 <alt_up_sd_card_fclose+0x160>
   1e5e8:	d0a74b17 	ldw	r2,-25300(gp)
   1e5ec:	10004d26 	beq	r2,zero,1e724 <alt_up_sd_card_fclose+0x160>
    {
        if (active_files[file_handle].in_use) 
   1e5f0:	e0bffd0f 	ldh	r2,-12(fp)
   1e5f4:	100691ba 	slli	r3,r2,6
   1e5f8:	008000b4 	movhi	r2,2
   1e5fc:	1885883a 	add	r2,r3,r2
   1e600:	10963317 	ldw	r2,22732(r2)
   1e604:	10004726 	beq	r2,zero,1e724 <alt_up_sd_card_fclose+0x160>
        {
			if (active_files[file_handle].modified)
   1e608:	e0bffd0f 	ldh	r2,-12(fp)
   1e60c:	100691ba 	slli	r3,r2,6
   1e610:	008000b4 	movhi	r2,2
   1e614:	1885883a 	add	r2,r3,r2
   1e618:	10963217 	ldw	r2,22728(r2)
   1e61c:	10003a26 	beq	r2,zero,1e708 <alt_up_sd_card_fclose+0x144>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   1e620:	e0bffd0f 	ldh	r2,-12(fp)
   1e624:	100691ba 	slli	r3,r2,6
   1e628:	008000b4 	movhi	r2,2
   1e62c:	1885883a 	add	r2,r3,r2
   1e630:	10962f17 	ldw	r2,22716(r2)
   1e634:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   1e638:	e0bffd0f 	ldh	r2,-12(fp)
   1e63c:	100691ba 	slli	r3,r2,6
   1e640:	008000b4 	movhi	r2,2
   1e644:	1885883a 	add	r2,r3,r2
   1e648:	10962e17 	ldw	r2,22712(r2)
   1e64c:	1000061e 	bne	r2,zero,1e668 <alt_up_sd_card_fclose+0xa4>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   1e650:	008000b4 	movhi	r2,2
   1e654:	10962217 	ldw	r2,22664(r2)
   1e658:	e0fffe17 	ldw	r3,-8(fp)
   1e65c:	1885883a 	add	r2,r3,r2
   1e660:	e0bffe15 	stw	r2,-8(fp)
   1e664:	00001006 	br	1e6a8 <alt_up_sd_card_fclose+0xe4>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1e668:	008000b4 	movhi	r2,2
   1e66c:	10d62317 	ldw	r3,22668(r2)
   1e670:	e0bffe17 	ldw	r2,-8(fp)
   1e674:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   1e678:	e0bffd0f 	ldh	r2,-12(fp)
   1e67c:	100891ba 	slli	r4,r2,6
   1e680:	008000b4 	movhi	r2,2
   1e684:	2085883a 	add	r2,r4,r2
   1e688:	10962e17 	ldw	r2,22712(r2)
   1e68c:	113fff84 	addi	r4,r2,-2
   1e690:	008000b4 	movhi	r2,2
   1e694:	10961283 	ldbu	r2,22602(r2)
   1e698:	10803fcc 	andi	r2,r2,255
   1e69c:	2085383a 	mul	r2,r4,r2
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1e6a0:	1885883a 	add	r2,r3,r2
   1e6a4:	e0bffe15 	stw	r2,-8(fp)
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   1e6a8:	e0bffe17 	ldw	r2,-8(fp)
   1e6ac:	d0e75217 	ldw	r3,-25272(gp)
   1e6b0:	180b883a 	mov	r5,r3
   1e6b4:	1009883a 	mov	r4,r2
   1e6b8:	001aa300 	call	1aa30 <Read_Sector_Data>
   1e6bc:	10001226 	beq	r2,zero,1e708 <alt_up_sd_card_fclose+0x144>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   1e6c0:	e0bffd0f 	ldh	r2,-12(fp)
   1e6c4:	100691ba 	slli	r3,r2,6
   1e6c8:	008000b4 	movhi	r2,2
   1e6cc:	1885883a 	add	r2,r3,r2
   1e6d0:	1096300b 	ldhu	r2,22720(r2)
   1e6d4:	113fffcc 	andi	r4,r2,65535
   1e6d8:	2120001c 	xori	r4,r4,32768
   1e6dc:	21200004 	addi	r4,r4,-32768
   1e6e0:	e0bffd0f 	ldh	r2,-12(fp)
   1e6e4:	100691ba 	slli	r3,r2,6
   1e6e8:	008000b4 	movhi	r2,2
   1e6ec:	10962404 	addi	r2,r2,22672
   1e6f0:	1885883a 	add	r2,r3,r2
   1e6f4:	100b883a 	mov	r5,r2
   1e6f8:	001b0b40 	call	1b0b4 <Write_File_Record_At_Offset>
   1e6fc:	10000226 	beq	r2,zero,1e708 <alt_up_sd_card_fclose+0x144>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   1e700:	001a9e40 	call	1a9e4 <Save_Modified_Sector>
   1e704:	e0bfff15 	stw	r2,-4(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   1e708:	e0bffd0f 	ldh	r2,-12(fp)
   1e70c:	100691ba 	slli	r3,r2,6
   1e710:	008000b4 	movhi	r2,2
   1e714:	1885883a 	add	r2,r3,r2
   1e718:	10163315 	stw	zero,22732(r2)
			result = true;
   1e71c:	00800044 	movi	r2,1
   1e720:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    return result;
   1e724:	e0bfff17 	ldw	r2,-4(fp)
}
   1e728:	e037883a 	mov	sp,fp
   1e72c:	dfc00117 	ldw	ra,4(sp)
   1e730:	df000017 	ldw	fp,0(sp)
   1e734:	dec00204 	addi	sp,sp,8
   1e738:	f800283a 	ret

0001e73c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1e73c:	defffa04 	addi	sp,sp,-24
   1e740:	dfc00515 	stw	ra,20(sp)
   1e744:	df000415 	stw	fp,16(sp)
   1e748:	df000404 	addi	fp,sp,16
   1e74c:	e13ffe15 	stw	r4,-8(fp)
   1e750:	e17ffd15 	stw	r5,-12(fp)
   1e754:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1e758:	e0bffe17 	ldw	r2,-8(fp)
   1e75c:	10800017 	ldw	r2,0(r2)
   1e760:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1e764:	e0bfff17 	ldw	r2,-4(fp)
   1e768:	10c00a04 	addi	r3,r2,40
   1e76c:	e0bffe17 	ldw	r2,-8(fp)
   1e770:	10800217 	ldw	r2,8(r2)
   1e774:	100f883a 	mov	r7,r2
   1e778:	e1bffc17 	ldw	r6,-16(fp)
   1e77c:	e17ffd17 	ldw	r5,-12(fp)
   1e780:	1809883a 	mov	r4,r3
   1e784:	001ed600 	call	1ed60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1e788:	e037883a 	mov	sp,fp
   1e78c:	dfc00117 	ldw	ra,4(sp)
   1e790:	df000017 	ldw	fp,0(sp)
   1e794:	dec00204 	addi	sp,sp,8
   1e798:	f800283a 	ret

0001e79c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1e79c:	defffa04 	addi	sp,sp,-24
   1e7a0:	dfc00515 	stw	ra,20(sp)
   1e7a4:	df000415 	stw	fp,16(sp)
   1e7a8:	df000404 	addi	fp,sp,16
   1e7ac:	e13ffe15 	stw	r4,-8(fp)
   1e7b0:	e17ffd15 	stw	r5,-12(fp)
   1e7b4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1e7b8:	e0bffe17 	ldw	r2,-8(fp)
   1e7bc:	10800017 	ldw	r2,0(r2)
   1e7c0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1e7c4:	e0bfff17 	ldw	r2,-4(fp)
   1e7c8:	10c00a04 	addi	r3,r2,40
   1e7cc:	e0bffe17 	ldw	r2,-8(fp)
   1e7d0:	10800217 	ldw	r2,8(r2)
   1e7d4:	100f883a 	mov	r7,r2
   1e7d8:	e1bffc17 	ldw	r6,-16(fp)
   1e7dc:	e17ffd17 	ldw	r5,-12(fp)
   1e7e0:	1809883a 	mov	r4,r3
   1e7e4:	001ef800 	call	1ef80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1e7e8:	e037883a 	mov	sp,fp
   1e7ec:	dfc00117 	ldw	ra,4(sp)
   1e7f0:	df000017 	ldw	fp,0(sp)
   1e7f4:	dec00204 	addi	sp,sp,8
   1e7f8:	f800283a 	ret

0001e7fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1e7fc:	defffc04 	addi	sp,sp,-16
   1e800:	dfc00315 	stw	ra,12(sp)
   1e804:	df000215 	stw	fp,8(sp)
   1e808:	df000204 	addi	fp,sp,8
   1e80c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1e810:	e0bffe17 	ldw	r2,-8(fp)
   1e814:	10800017 	ldw	r2,0(r2)
   1e818:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1e81c:	e0bfff17 	ldw	r2,-4(fp)
   1e820:	10c00a04 	addi	r3,r2,40
   1e824:	e0bffe17 	ldw	r2,-8(fp)
   1e828:	10800217 	ldw	r2,8(r2)
   1e82c:	100b883a 	mov	r5,r2
   1e830:	1809883a 	mov	r4,r3
   1e834:	001ec040 	call	1ec04 <altera_avalon_jtag_uart_close>
}
   1e838:	e037883a 	mov	sp,fp
   1e83c:	dfc00117 	ldw	ra,4(sp)
   1e840:	df000017 	ldw	fp,0(sp)
   1e844:	dec00204 	addi	sp,sp,8
   1e848:	f800283a 	ret

0001e84c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1e84c:	defffa04 	addi	sp,sp,-24
   1e850:	dfc00515 	stw	ra,20(sp)
   1e854:	df000415 	stw	fp,16(sp)
   1e858:	df000404 	addi	fp,sp,16
   1e85c:	e13ffe15 	stw	r4,-8(fp)
   1e860:	e17ffd15 	stw	r5,-12(fp)
   1e864:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1e868:	e0bffe17 	ldw	r2,-8(fp)
   1e86c:	10800017 	ldw	r2,0(r2)
   1e870:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1e874:	e0bfff17 	ldw	r2,-4(fp)
   1e878:	10800a04 	addi	r2,r2,40
   1e87c:	e1bffc17 	ldw	r6,-16(fp)
   1e880:	e17ffd17 	ldw	r5,-12(fp)
   1e884:	1009883a 	mov	r4,r2
   1e888:	001ec6c0 	call	1ec6c <altera_avalon_jtag_uart_ioctl>
}
   1e88c:	e037883a 	mov	sp,fp
   1e890:	dfc00117 	ldw	ra,4(sp)
   1e894:	df000017 	ldw	fp,0(sp)
   1e898:	dec00204 	addi	sp,sp,8
   1e89c:	f800283a 	ret

0001e8a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1e8a0:	defffb04 	addi	sp,sp,-20
   1e8a4:	dfc00415 	stw	ra,16(sp)
   1e8a8:	df000315 	stw	fp,12(sp)
   1e8ac:	df000304 	addi	fp,sp,12
   1e8b0:	e13fff15 	stw	r4,-4(fp)
   1e8b4:	e17ffe15 	stw	r5,-8(fp)
   1e8b8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1e8bc:	e0bfff17 	ldw	r2,-4(fp)
   1e8c0:	00c00044 	movi	r3,1
   1e8c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1e8c8:	e0bfff17 	ldw	r2,-4(fp)
   1e8cc:	10800017 	ldw	r2,0(r2)
   1e8d0:	10800104 	addi	r2,r2,4
   1e8d4:	1007883a 	mov	r3,r2
   1e8d8:	e0bfff17 	ldw	r2,-4(fp)
   1e8dc:	10800817 	ldw	r2,32(r2)
   1e8e0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1e8e4:	e0bffd17 	ldw	r2,-12(fp)
   1e8e8:	018000b4 	movhi	r6,2
   1e8ec:	31ba5504 	addi	r6,r6,-5804
   1e8f0:	e17fff17 	ldw	r5,-4(fp)
   1e8f4:	1009883a 	mov	r4,r2
   1e8f8:	002004c0 	call	2004c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1e8fc:	e0bfff17 	ldw	r2,-4(fp)
   1e900:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1e904:	e0bfff17 	ldw	r2,-4(fp)
   1e908:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1e90c:	d0e75817 	ldw	r3,-25248(gp)
   1e910:	e1ffff17 	ldw	r7,-4(fp)
   1e914:	018000b4 	movhi	r6,2
   1e918:	31bad904 	addi	r6,r6,-5276
   1e91c:	180b883a 	mov	r5,r3
   1e920:	1009883a 	mov	r4,r2
   1e924:	001fb300 	call	1fb30 <alt_alarm_start>
   1e928:	1000040e 	bge	r2,zero,1e93c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1e92c:	e0ffff17 	ldw	r3,-4(fp)
   1e930:	00a00034 	movhi	r2,32768
   1e934:	10bfffc4 	addi	r2,r2,-1
   1e938:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1e93c:	0001883a 	nop
   1e940:	e037883a 	mov	sp,fp
   1e944:	dfc00117 	ldw	ra,4(sp)
   1e948:	df000017 	ldw	fp,0(sp)
   1e94c:	dec00204 	addi	sp,sp,8
   1e950:	f800283a 	ret

0001e954 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1e954:	defff704 	addi	sp,sp,-36
   1e958:	df000815 	stw	fp,32(sp)
   1e95c:	df000804 	addi	fp,sp,32
   1e960:	e13ff915 	stw	r4,-28(fp)
   1e964:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1e968:	e0bff917 	ldw	r2,-28(fp)
   1e96c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   1e970:	e0bffd17 	ldw	r2,-12(fp)
   1e974:	10800017 	ldw	r2,0(r2)
   1e978:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1e97c:	e0bffc17 	ldw	r2,-16(fp)
   1e980:	10800104 	addi	r2,r2,4
   1e984:	10800037 	ldwio	r2,0(r2)
   1e988:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1e98c:	e0bffb17 	ldw	r2,-20(fp)
   1e990:	1080c00c 	andi	r2,r2,768
   1e994:	10006d26 	beq	r2,zero,1eb4c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1e998:	e0bffb17 	ldw	r2,-20(fp)
   1e99c:	1080400c 	andi	r2,r2,256
   1e9a0:	10003526 	beq	r2,zero,1ea78 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1e9a4:	00800074 	movhi	r2,1
   1e9a8:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1e9ac:	e0bffd17 	ldw	r2,-12(fp)
   1e9b0:	10800a17 	ldw	r2,40(r2)
   1e9b4:	10800044 	addi	r2,r2,1
   1e9b8:	1081ffcc 	andi	r2,r2,2047
   1e9bc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1e9c0:	e0bffd17 	ldw	r2,-12(fp)
   1e9c4:	10800b17 	ldw	r2,44(r2)
   1e9c8:	e0fffa17 	ldw	r3,-24(fp)
   1e9cc:	18801526 	beq	r3,r2,1ea24 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1e9d0:	e0bffc17 	ldw	r2,-16(fp)
   1e9d4:	10800037 	ldwio	r2,0(r2)
   1e9d8:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1e9dc:	e0bfff17 	ldw	r2,-4(fp)
   1e9e0:	10a0000c 	andi	r2,r2,32768
   1e9e4:	10001126 	beq	r2,zero,1ea2c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1e9e8:	e0bffd17 	ldw	r2,-12(fp)
   1e9ec:	10800a17 	ldw	r2,40(r2)
   1e9f0:	e0ffff17 	ldw	r3,-4(fp)
   1e9f4:	1809883a 	mov	r4,r3
   1e9f8:	e0fffd17 	ldw	r3,-12(fp)
   1e9fc:	1885883a 	add	r2,r3,r2
   1ea00:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ea04:	e0bffd17 	ldw	r2,-12(fp)
   1ea08:	10800a17 	ldw	r2,40(r2)
   1ea0c:	10800044 	addi	r2,r2,1
   1ea10:	10c1ffcc 	andi	r3,r2,2047
   1ea14:	e0bffd17 	ldw	r2,-12(fp)
   1ea18:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1ea1c:	0001883a 	nop
      {
   1ea20:	003fe206 	br	1e9ac <altera_avalon_jtag_uart_irq+0x58>
          break;
   1ea24:	0001883a 	nop
   1ea28:	00000106 	br	1ea30 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   1ea2c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1ea30:	e0bfff17 	ldw	r2,-4(fp)
   1ea34:	10bfffec 	andhi	r2,r2,65535
   1ea38:	10000f26 	beq	r2,zero,1ea78 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ea3c:	e0bffd17 	ldw	r2,-12(fp)
   1ea40:	10c00817 	ldw	r3,32(r2)
   1ea44:	00bfff84 	movi	r2,-2
   1ea48:	1886703a 	and	r3,r3,r2
   1ea4c:	e0bffd17 	ldw	r2,-12(fp)
   1ea50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1ea54:	e0bffc17 	ldw	r2,-16(fp)
   1ea58:	10800104 	addi	r2,r2,4
   1ea5c:	1007883a 	mov	r3,r2
   1ea60:	e0bffd17 	ldw	r2,-12(fp)
   1ea64:	10800817 	ldw	r2,32(r2)
   1ea68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ea6c:	e0bffc17 	ldw	r2,-16(fp)
   1ea70:	10800104 	addi	r2,r2,4
   1ea74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1ea78:	e0bffb17 	ldw	r2,-20(fp)
   1ea7c:	1080800c 	andi	r2,r2,512
   1ea80:	103fbe26 	beq	r2,zero,1e97c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1ea84:	e0bffb17 	ldw	r2,-20(fp)
   1ea88:	1004d43a 	srli	r2,r2,16
   1ea8c:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1ea90:	00001406 	br	1eae4 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1ea94:	e0bffc17 	ldw	r2,-16(fp)
   1ea98:	e0fffd17 	ldw	r3,-12(fp)
   1ea9c:	18c00d17 	ldw	r3,52(r3)
   1eaa0:	e13ffd17 	ldw	r4,-12(fp)
   1eaa4:	20c7883a 	add	r3,r4,r3
   1eaa8:	18c20e03 	ldbu	r3,2104(r3)
   1eaac:	18c03fcc 	andi	r3,r3,255
   1eab0:	18c0201c 	xori	r3,r3,128
   1eab4:	18ffe004 	addi	r3,r3,-128
   1eab8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1eabc:	e0bffd17 	ldw	r2,-12(fp)
   1eac0:	10800d17 	ldw	r2,52(r2)
   1eac4:	10800044 	addi	r2,r2,1
   1eac8:	10c1ffcc 	andi	r3,r2,2047
   1eacc:	e0bffd17 	ldw	r2,-12(fp)
   1ead0:	10c00d15 	stw	r3,52(r2)
   1ead4:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1ead8:	e0bffe17 	ldw	r2,-8(fp)
   1eadc:	10bfffc4 	addi	r2,r2,-1
   1eae0:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   1eae4:	e0bffe17 	ldw	r2,-8(fp)
   1eae8:	10000526 	beq	r2,zero,1eb00 <altera_avalon_jtag_uart_irq+0x1ac>
   1eaec:	e0bffd17 	ldw	r2,-12(fp)
   1eaf0:	10c00d17 	ldw	r3,52(r2)
   1eaf4:	e0bffd17 	ldw	r2,-12(fp)
   1eaf8:	10800c17 	ldw	r2,48(r2)
   1eafc:	18bfe51e 	bne	r3,r2,1ea94 <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
   1eb00:	e0bffe17 	ldw	r2,-8(fp)
   1eb04:	103f9d26 	beq	r2,zero,1e97c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1eb08:	e0bffd17 	ldw	r2,-12(fp)
   1eb0c:	10c00817 	ldw	r3,32(r2)
   1eb10:	00bfff44 	movi	r2,-3
   1eb14:	1886703a 	and	r3,r3,r2
   1eb18:	e0bffd17 	ldw	r2,-12(fp)
   1eb1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1eb20:	e0bffd17 	ldw	r2,-12(fp)
   1eb24:	10800017 	ldw	r2,0(r2)
   1eb28:	10800104 	addi	r2,r2,4
   1eb2c:	1007883a 	mov	r3,r2
   1eb30:	e0bffd17 	ldw	r2,-12(fp)
   1eb34:	10800817 	ldw	r2,32(r2)
   1eb38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1eb3c:	e0bffc17 	ldw	r2,-16(fp)
   1eb40:	10800104 	addi	r2,r2,4
   1eb44:	10800037 	ldwio	r2,0(r2)
  {
   1eb48:	003f8c06 	br	1e97c <altera_avalon_jtag_uart_irq+0x28>
      break;
   1eb4c:	0001883a 	nop
      }
    }
  }
}
   1eb50:	0001883a 	nop
   1eb54:	e037883a 	mov	sp,fp
   1eb58:	df000017 	ldw	fp,0(sp)
   1eb5c:	dec00104 	addi	sp,sp,4
   1eb60:	f800283a 	ret

0001eb64 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1eb64:	defffc04 	addi	sp,sp,-16
   1eb68:	df000315 	stw	fp,12(sp)
   1eb6c:	df000304 	addi	fp,sp,12
   1eb70:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1eb74:	e0bffd17 	ldw	r2,-12(fp)
   1eb78:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1eb7c:	e0bfff17 	ldw	r2,-4(fp)
   1eb80:	10800017 	ldw	r2,0(r2)
   1eb84:	10800104 	addi	r2,r2,4
   1eb88:	10800037 	ldwio	r2,0(r2)
   1eb8c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1eb90:	e0bffe17 	ldw	r2,-8(fp)
   1eb94:	1081000c 	andi	r2,r2,1024
   1eb98:	10000b26 	beq	r2,zero,1ebc8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1eb9c:	e0bfff17 	ldw	r2,-4(fp)
   1eba0:	10800017 	ldw	r2,0(r2)
   1eba4:	10800104 	addi	r2,r2,4
   1eba8:	1007883a 	mov	r3,r2
   1ebac:	e0bfff17 	ldw	r2,-4(fp)
   1ebb0:	10800817 	ldw	r2,32(r2)
   1ebb4:	10810014 	ori	r2,r2,1024
   1ebb8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1ebbc:	e0bfff17 	ldw	r2,-4(fp)
   1ebc0:	10000915 	stw	zero,36(r2)
   1ebc4:	00000a06 	br	1ebf0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1ebc8:	e0bfff17 	ldw	r2,-4(fp)
   1ebcc:	10c00917 	ldw	r3,36(r2)
   1ebd0:	00a00034 	movhi	r2,32768
   1ebd4:	10bfff04 	addi	r2,r2,-4
   1ebd8:	10c00536 	bltu	r2,r3,1ebf0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1ebdc:	e0bfff17 	ldw	r2,-4(fp)
   1ebe0:	10800917 	ldw	r2,36(r2)
   1ebe4:	10c00044 	addi	r3,r2,1
   1ebe8:	e0bfff17 	ldw	r2,-4(fp)
   1ebec:	10c00915 	stw	r3,36(r2)
   1ebf0:	d0a75817 	ldw	r2,-25248(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1ebf4:	e037883a 	mov	sp,fp
   1ebf8:	df000017 	ldw	fp,0(sp)
   1ebfc:	dec00104 	addi	sp,sp,4
   1ec00:	f800283a 	ret

0001ec04 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1ec04:	defffd04 	addi	sp,sp,-12
   1ec08:	df000215 	stw	fp,8(sp)
   1ec0c:	df000204 	addi	fp,sp,8
   1ec10:	e13fff15 	stw	r4,-4(fp)
   1ec14:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ec18:	00000506 	br	1ec30 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1ec1c:	e0bffe17 	ldw	r2,-8(fp)
   1ec20:	1090000c 	andi	r2,r2,16384
   1ec24:	10000226 	beq	r2,zero,1ec30 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1ec28:	00bffd44 	movi	r2,-11
   1ec2c:	00000b06 	br	1ec5c <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ec30:	e0bfff17 	ldw	r2,-4(fp)
   1ec34:	10c00d17 	ldw	r3,52(r2)
   1ec38:	e0bfff17 	ldw	r2,-4(fp)
   1ec3c:	10800c17 	ldw	r2,48(r2)
   1ec40:	18800526 	beq	r3,r2,1ec58 <altera_avalon_jtag_uart_close+0x54>
   1ec44:	e0bfff17 	ldw	r2,-4(fp)
   1ec48:	10c00917 	ldw	r3,36(r2)
   1ec4c:	e0bfff17 	ldw	r2,-4(fp)
   1ec50:	10800117 	ldw	r2,4(r2)
   1ec54:	18bff136 	bltu	r3,r2,1ec1c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   1ec58:	0005883a 	mov	r2,zero
}
   1ec5c:	e037883a 	mov	sp,fp
   1ec60:	df000017 	ldw	fp,0(sp)
   1ec64:	dec00104 	addi	sp,sp,4
   1ec68:	f800283a 	ret

0001ec6c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1ec6c:	defffa04 	addi	sp,sp,-24
   1ec70:	df000515 	stw	fp,20(sp)
   1ec74:	df000504 	addi	fp,sp,20
   1ec78:	e13ffd15 	stw	r4,-12(fp)
   1ec7c:	e17ffc15 	stw	r5,-16(fp)
   1ec80:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   1ec84:	00bff9c4 	movi	r2,-25
   1ec88:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   1ec8c:	e0bffc17 	ldw	r2,-16(fp)
   1ec90:	109a8060 	cmpeqi	r2,r2,27137
   1ec94:	1000041e 	bne	r2,zero,1eca8 <altera_avalon_jtag_uart_ioctl+0x3c>
   1ec98:	e0bffc17 	ldw	r2,-16(fp)
   1ec9c:	109a80a0 	cmpeqi	r2,r2,27138
   1eca0:	1000181e 	bne	r2,zero,1ed04 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1eca4:	00002906 	br	1ed4c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   1eca8:	e0bffd17 	ldw	r2,-12(fp)
   1ecac:	10c00117 	ldw	r3,4(r2)
   1ecb0:	00a00034 	movhi	r2,32768
   1ecb4:	10bfffc4 	addi	r2,r2,-1
   1ecb8:	18802126 	beq	r3,r2,1ed40 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   1ecbc:	e0bffb17 	ldw	r2,-20(fp)
   1ecc0:	10800017 	ldw	r2,0(r2)
   1ecc4:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1ecc8:	e0bffe17 	ldw	r2,-8(fp)
   1eccc:	10800090 	cmplti	r2,r2,2
   1ecd0:	1000061e 	bne	r2,zero,1ecec <altera_avalon_jtag_uart_ioctl+0x80>
   1ecd4:	e0fffe17 	ldw	r3,-8(fp)
   1ecd8:	00a00034 	movhi	r2,32768
   1ecdc:	10bfffc4 	addi	r2,r2,-1
   1ece0:	18800226 	beq	r3,r2,1ecec <altera_avalon_jtag_uart_ioctl+0x80>
   1ece4:	e0bffe17 	ldw	r2,-8(fp)
   1ece8:	00000206 	br	1ecf4 <altera_avalon_jtag_uart_ioctl+0x88>
   1ecec:	00a00034 	movhi	r2,32768
   1ecf0:	10bfff84 	addi	r2,r2,-2
   1ecf4:	e0fffd17 	ldw	r3,-12(fp)
   1ecf8:	18800115 	stw	r2,4(r3)
      rc = 0;
   1ecfc:	e03fff15 	stw	zero,-4(fp)
    break;
   1ed00:	00000f06 	br	1ed40 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   1ed04:	e0bffd17 	ldw	r2,-12(fp)
   1ed08:	10c00117 	ldw	r3,4(r2)
   1ed0c:	00a00034 	movhi	r2,32768
   1ed10:	10bfffc4 	addi	r2,r2,-1
   1ed14:	18800c26 	beq	r3,r2,1ed48 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1ed18:	e0bffd17 	ldw	r2,-12(fp)
   1ed1c:	10c00917 	ldw	r3,36(r2)
   1ed20:	e0bffd17 	ldw	r2,-12(fp)
   1ed24:	10800117 	ldw	r2,4(r2)
   1ed28:	1885803a 	cmpltu	r2,r3,r2
   1ed2c:	10c03fcc 	andi	r3,r2,255
   1ed30:	e0bffb17 	ldw	r2,-20(fp)
   1ed34:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1ed38:	e03fff15 	stw	zero,-4(fp)
    break;
   1ed3c:	00000206 	br	1ed48 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   1ed40:	0001883a 	nop
   1ed44:	00000106 	br	1ed4c <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   1ed48:	0001883a 	nop
  }

  return rc;
   1ed4c:	e0bfff17 	ldw	r2,-4(fp)
}
   1ed50:	e037883a 	mov	sp,fp
   1ed54:	df000017 	ldw	fp,0(sp)
   1ed58:	dec00104 	addi	sp,sp,4
   1ed5c:	f800283a 	ret

0001ed60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1ed60:	defff304 	addi	sp,sp,-52
   1ed64:	dfc00c15 	stw	ra,48(sp)
   1ed68:	df000b15 	stw	fp,44(sp)
   1ed6c:	df000b04 	addi	fp,sp,44
   1ed70:	e13ff815 	stw	r4,-32(fp)
   1ed74:	e17ff715 	stw	r5,-36(fp)
   1ed78:	e1bff615 	stw	r6,-40(fp)
   1ed7c:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   1ed80:	e0bff717 	ldw	r2,-36(fp)
   1ed84:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1ed88:	00004706 	br	1eea8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1ed8c:	e0bff817 	ldw	r2,-32(fp)
   1ed90:	10800a17 	ldw	r2,40(r2)
   1ed94:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   1ed98:	e0bff817 	ldw	r2,-32(fp)
   1ed9c:	10800b17 	ldw	r2,44(r2)
   1eda0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   1eda4:	e0fffd17 	ldw	r3,-12(fp)
   1eda8:	e0bffc17 	ldw	r2,-16(fp)
   1edac:	18800536 	bltu	r3,r2,1edc4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1edb0:	e0fffd17 	ldw	r3,-12(fp)
   1edb4:	e0bffc17 	ldw	r2,-16(fp)
   1edb8:	1885c83a 	sub	r2,r3,r2
   1edbc:	e0bffe15 	stw	r2,-8(fp)
   1edc0:	00000406 	br	1edd4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1edc4:	00c20004 	movi	r3,2048
   1edc8:	e0bffc17 	ldw	r2,-16(fp)
   1edcc:	1885c83a 	sub	r2,r3,r2
   1edd0:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   1edd4:	e0bffe17 	ldw	r2,-8(fp)
   1edd8:	10001e26 	beq	r2,zero,1ee54 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1eddc:	e0fff617 	ldw	r3,-40(fp)
   1ede0:	e0bffe17 	ldw	r2,-8(fp)
   1ede4:	1880022e 	bgeu	r3,r2,1edf0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1ede8:	e0bff617 	ldw	r2,-40(fp)
   1edec:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1edf0:	e0bff817 	ldw	r2,-32(fp)
   1edf4:	10c00e04 	addi	r3,r2,56
   1edf8:	e0bffc17 	ldw	r2,-16(fp)
   1edfc:	1885883a 	add	r2,r3,r2
   1ee00:	e1bffe17 	ldw	r6,-8(fp)
   1ee04:	100b883a 	mov	r5,r2
   1ee08:	e13fff17 	ldw	r4,-4(fp)
   1ee0c:	000d4600 	call	d460 <memcpy>
      ptr   += n;
   1ee10:	e0ffff17 	ldw	r3,-4(fp)
   1ee14:	e0bffe17 	ldw	r2,-8(fp)
   1ee18:	1885883a 	add	r2,r3,r2
   1ee1c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   1ee20:	e0fff617 	ldw	r3,-40(fp)
   1ee24:	e0bffe17 	ldw	r2,-8(fp)
   1ee28:	1885c83a 	sub	r2,r3,r2
   1ee2c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ee30:	e0fffc17 	ldw	r3,-16(fp)
   1ee34:	e0bffe17 	ldw	r2,-8(fp)
   1ee38:	1885883a 	add	r2,r3,r2
   1ee3c:	10c1ffcc 	andi	r3,r2,2047
   1ee40:	e0bff817 	ldw	r2,-32(fp)
   1ee44:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1ee48:	e0bff617 	ldw	r2,-40(fp)
   1ee4c:	00bfcf16 	blt	zero,r2,1ed8c <altera_avalon_jtag_uart_read+0x2c>
   1ee50:	00000106 	br	1ee58 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   1ee54:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   1ee58:	e0ffff17 	ldw	r3,-4(fp)
   1ee5c:	e0bff717 	ldw	r2,-36(fp)
   1ee60:	1880141e 	bne	r3,r2,1eeb4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1ee64:	e0bff517 	ldw	r2,-44(fp)
   1ee68:	1090000c 	andi	r2,r2,16384
   1ee6c:	1000131e 	bne	r2,zero,1eebc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1ee70:	0001883a 	nop
   1ee74:	e0bff817 	ldw	r2,-32(fp)
   1ee78:	10800a17 	ldw	r2,40(r2)
   1ee7c:	e0fffd17 	ldw	r3,-12(fp)
   1ee80:	1880051e 	bne	r3,r2,1ee98 <altera_avalon_jtag_uart_read+0x138>
   1ee84:	e0bff817 	ldw	r2,-32(fp)
   1ee88:	10c00917 	ldw	r3,36(r2)
   1ee8c:	e0bff817 	ldw	r2,-32(fp)
   1ee90:	10800117 	ldw	r2,4(r2)
   1ee94:	18bff736 	bltu	r3,r2,1ee74 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1ee98:	e0bff817 	ldw	r2,-32(fp)
   1ee9c:	10800a17 	ldw	r2,40(r2)
   1eea0:	e0fffd17 	ldw	r3,-12(fp)
   1eea4:	18800726 	beq	r3,r2,1eec4 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   1eea8:	e0bff617 	ldw	r2,-40(fp)
   1eeac:	00bfb716 	blt	zero,r2,1ed8c <altera_avalon_jtag_uart_read+0x2c>
   1eeb0:	00000506 	br	1eec8 <altera_avalon_jtag_uart_read+0x168>
      break;
   1eeb4:	0001883a 	nop
   1eeb8:	00000306 	br	1eec8 <altera_avalon_jtag_uart_read+0x168>
      break;
   1eebc:	0001883a 	nop
   1eec0:	00000106 	br	1eec8 <altera_avalon_jtag_uart_read+0x168>
      break;
   1eec4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1eec8:	e0ffff17 	ldw	r3,-4(fp)
   1eecc:	e0bff717 	ldw	r2,-36(fp)
   1eed0:	18801926 	beq	r3,r2,1ef38 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   1eed4:	0005303a 	rdctl	r2,status
   1eed8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eedc:	e0fff917 	ldw	r3,-28(fp)
   1eee0:	00bfff84 	movi	r2,-2
   1eee4:	1884703a 	and	r2,r3,r2
   1eee8:	1001703a 	wrctl	status,r2
  return context;
   1eeec:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1eef0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1eef4:	e0bff817 	ldw	r2,-32(fp)
   1eef8:	10800817 	ldw	r2,32(r2)
   1eefc:	10c00054 	ori	r3,r2,1
   1ef00:	e0bff817 	ldw	r2,-32(fp)
   1ef04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ef08:	e0bff817 	ldw	r2,-32(fp)
   1ef0c:	10800017 	ldw	r2,0(r2)
   1ef10:	10800104 	addi	r2,r2,4
   1ef14:	1007883a 	mov	r3,r2
   1ef18:	e0bff817 	ldw	r2,-32(fp)
   1ef1c:	10800817 	ldw	r2,32(r2)
   1ef20:	18800035 	stwio	r2,0(r3)
   1ef24:	e0bffb17 	ldw	r2,-20(fp)
   1ef28:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1ef2c:	e0bffa17 	ldw	r2,-24(fp)
   1ef30:	1001703a 	wrctl	status,r2
}
   1ef34:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1ef38:	e0ffff17 	ldw	r3,-4(fp)
   1ef3c:	e0bff717 	ldw	r2,-36(fp)
   1ef40:	18800426 	beq	r3,r2,1ef54 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   1ef44:	e0ffff17 	ldw	r3,-4(fp)
   1ef48:	e0bff717 	ldw	r2,-36(fp)
   1ef4c:	1885c83a 	sub	r2,r3,r2
   1ef50:	00000606 	br	1ef6c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1ef54:	e0bff517 	ldw	r2,-44(fp)
   1ef58:	1090000c 	andi	r2,r2,16384
   1ef5c:	10000226 	beq	r2,zero,1ef68 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   1ef60:	00bffd44 	movi	r2,-11
   1ef64:	00000106 	br	1ef6c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1ef68:	00bffec4 	movi	r2,-5
}
   1ef6c:	e037883a 	mov	sp,fp
   1ef70:	dfc00117 	ldw	ra,4(sp)
   1ef74:	df000017 	ldw	fp,0(sp)
   1ef78:	dec00204 	addi	sp,sp,8
   1ef7c:	f800283a 	ret

0001ef80 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1ef80:	defff304 	addi	sp,sp,-52
   1ef84:	dfc00c15 	stw	ra,48(sp)
   1ef88:	df000b15 	stw	fp,44(sp)
   1ef8c:	df000b04 	addi	fp,sp,44
   1ef90:	e13ff815 	stw	r4,-32(fp)
   1ef94:	e17ff715 	stw	r5,-36(fp)
   1ef98:	e1bff615 	stw	r6,-40(fp)
   1ef9c:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1efa0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1efa4:	e0bff717 	ldw	r2,-36(fp)
   1efa8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1efac:	00003706 	br	1f08c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1efb0:	e0bff817 	ldw	r2,-32(fp)
   1efb4:	10800c17 	ldw	r2,48(r2)
   1efb8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   1efbc:	e0bff817 	ldw	r2,-32(fp)
   1efc0:	10800d17 	ldw	r2,52(r2)
   1efc4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   1efc8:	e0fffc17 	ldw	r3,-16(fp)
   1efcc:	e0bfff17 	ldw	r2,-4(fp)
   1efd0:	1880062e 	bgeu	r3,r2,1efec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1efd4:	e0ffff17 	ldw	r3,-4(fp)
   1efd8:	e0bffc17 	ldw	r2,-16(fp)
   1efdc:	1885c83a 	sub	r2,r3,r2
   1efe0:	10bfffc4 	addi	r2,r2,-1
   1efe4:	e0bffe15 	stw	r2,-8(fp)
   1efe8:	00000b06 	br	1f018 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1efec:	e0bfff17 	ldw	r2,-4(fp)
   1eff0:	10000526 	beq	r2,zero,1f008 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1eff4:	00c20004 	movi	r3,2048
   1eff8:	e0bffc17 	ldw	r2,-16(fp)
   1effc:	1885c83a 	sub	r2,r3,r2
   1f000:	e0bffe15 	stw	r2,-8(fp)
   1f004:	00000406 	br	1f018 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1f008:	00c1ffc4 	movi	r3,2047
   1f00c:	e0bffc17 	ldw	r2,-16(fp)
   1f010:	1885c83a 	sub	r2,r3,r2
   1f014:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   1f018:	e0bffe17 	ldw	r2,-8(fp)
   1f01c:	10001e26 	beq	r2,zero,1f098 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1f020:	e0fff617 	ldw	r3,-40(fp)
   1f024:	e0bffe17 	ldw	r2,-8(fp)
   1f028:	1880022e 	bgeu	r3,r2,1f034 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1f02c:	e0bff617 	ldw	r2,-40(fp)
   1f030:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1f034:	e0bff817 	ldw	r2,-32(fp)
   1f038:	10c20e04 	addi	r3,r2,2104
   1f03c:	e0bffc17 	ldw	r2,-16(fp)
   1f040:	1885883a 	add	r2,r3,r2
   1f044:	e1bffe17 	ldw	r6,-8(fp)
   1f048:	e17ff717 	ldw	r5,-36(fp)
   1f04c:	1009883a 	mov	r4,r2
   1f050:	000d4600 	call	d460 <memcpy>
      ptr   += n;
   1f054:	e0fff717 	ldw	r3,-36(fp)
   1f058:	e0bffe17 	ldw	r2,-8(fp)
   1f05c:	1885883a 	add	r2,r3,r2
   1f060:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   1f064:	e0fff617 	ldw	r3,-40(fp)
   1f068:	e0bffe17 	ldw	r2,-8(fp)
   1f06c:	1885c83a 	sub	r2,r3,r2
   1f070:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1f074:	e0fffc17 	ldw	r3,-16(fp)
   1f078:	e0bffe17 	ldw	r2,-8(fp)
   1f07c:	1885883a 	add	r2,r3,r2
   1f080:	10c1ffcc 	andi	r3,r2,2047
   1f084:	e0bff817 	ldw	r2,-32(fp)
   1f088:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   1f08c:	e0bff617 	ldw	r2,-40(fp)
   1f090:	00bfc716 	blt	zero,r2,1efb0 <altera_avalon_jtag_uart_write+0x30>
   1f094:	00000106 	br	1f09c <altera_avalon_jtag_uart_write+0x11c>
        break;
   1f098:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   1f09c:	0005303a 	rdctl	r2,status
   1f0a0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f0a4:	e0fff917 	ldw	r3,-28(fp)
   1f0a8:	00bfff84 	movi	r2,-2
   1f0ac:	1884703a 	and	r2,r3,r2
   1f0b0:	1001703a 	wrctl	status,r2
  return context;
   1f0b4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1f0b8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1f0bc:	e0bff817 	ldw	r2,-32(fp)
   1f0c0:	10800817 	ldw	r2,32(r2)
   1f0c4:	10c00094 	ori	r3,r2,2
   1f0c8:	e0bff817 	ldw	r2,-32(fp)
   1f0cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1f0d0:	e0bff817 	ldw	r2,-32(fp)
   1f0d4:	10800017 	ldw	r2,0(r2)
   1f0d8:	10800104 	addi	r2,r2,4
   1f0dc:	1007883a 	mov	r3,r2
   1f0e0:	e0bff817 	ldw	r2,-32(fp)
   1f0e4:	10800817 	ldw	r2,32(r2)
   1f0e8:	18800035 	stwio	r2,0(r3)
   1f0ec:	e0bffb17 	ldw	r2,-20(fp)
   1f0f0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1f0f4:	e0bffa17 	ldw	r2,-24(fp)
   1f0f8:	1001703a 	wrctl	status,r2
}
   1f0fc:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1f100:	e0bff617 	ldw	r2,-40(fp)
   1f104:	0080100e 	bge	zero,r2,1f148 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   1f108:	e0bff517 	ldw	r2,-44(fp)
   1f10c:	1090000c 	andi	r2,r2,16384
   1f110:	1000101e 	bne	r2,zero,1f154 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1f114:	0001883a 	nop
   1f118:	e0bff817 	ldw	r2,-32(fp)
   1f11c:	10800d17 	ldw	r2,52(r2)
   1f120:	e0ffff17 	ldw	r3,-4(fp)
   1f124:	1880051e 	bne	r3,r2,1f13c <altera_avalon_jtag_uart_write+0x1bc>
   1f128:	e0bff817 	ldw	r2,-32(fp)
   1f12c:	10c00917 	ldw	r3,36(r2)
   1f130:	e0bff817 	ldw	r2,-32(fp)
   1f134:	10800117 	ldw	r2,4(r2)
   1f138:	18bff736 	bltu	r3,r2,1f118 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1f13c:	e0bff817 	ldw	r2,-32(fp)
   1f140:	10800917 	ldw	r2,36(r2)
   1f144:	1000051e 	bne	r2,zero,1f15c <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   1f148:	e0bff617 	ldw	r2,-40(fp)
   1f14c:	00bfcf16 	blt	zero,r2,1f08c <altera_avalon_jtag_uart_write+0x10c>
   1f150:	00000306 	br	1f160 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   1f154:	0001883a 	nop
   1f158:	00000106 	br	1f160 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   1f15c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1f160:	e0fff717 	ldw	r3,-36(fp)
   1f164:	e0bffd17 	ldw	r2,-12(fp)
   1f168:	18800426 	beq	r3,r2,1f17c <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   1f16c:	e0fff717 	ldw	r3,-36(fp)
   1f170:	e0bffd17 	ldw	r2,-12(fp)
   1f174:	1885c83a 	sub	r2,r3,r2
   1f178:	00000606 	br	1f194 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   1f17c:	e0bff517 	ldw	r2,-44(fp)
   1f180:	1090000c 	andi	r2,r2,16384
   1f184:	10000226 	beq	r2,zero,1f190 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   1f188:	00bffd44 	movi	r2,-11
   1f18c:	00000106 	br	1f194 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1f190:	00bffec4 	movi	r2,-5
}
   1f194:	e037883a 	mov	sp,fp
   1f198:	dfc00117 	ldw	ra,4(sp)
   1f19c:	df000017 	ldw	fp,0(sp)
   1f1a0:	dec00204 	addi	sp,sp,8
   1f1a4:	f800283a 	ret

0001f1a8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1f1a8:	defff904 	addi	sp,sp,-28
   1f1ac:	dfc00615 	stw	ra,24(sp)
   1f1b0:	df000515 	stw	fp,20(sp)
   1f1b4:	df000504 	addi	fp,sp,20
   1f1b8:	e13ffc15 	stw	r4,-16(fp)
   1f1bc:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1f1c0:	0007883a 	mov	r3,zero
   1f1c4:	e0bffc17 	ldw	r2,-16(fp)
   1f1c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1f1cc:	e0bffc17 	ldw	r2,-16(fp)
   1f1d0:	10800104 	addi	r2,r2,4
   1f1d4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   1f1d8:	0005303a 	rdctl	r2,status
   1f1dc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f1e0:	e0fffd17 	ldw	r3,-12(fp)
   1f1e4:	00bfff84 	movi	r2,-2
   1f1e8:	1884703a 	and	r2,r3,r2
   1f1ec:	1001703a 	wrctl	status,r2
  return context;
   1f1f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1f1f4:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   1f1f8:	00204b80 	call	204b8 <alt_tick>
   1f1fc:	e0bfff17 	ldw	r2,-4(fp)
   1f200:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   1f204:	e0bffe17 	ldw	r2,-8(fp)
   1f208:	1001703a 	wrctl	status,r2
}
   1f20c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   1f210:	0001883a 	nop
   1f214:	e037883a 	mov	sp,fp
   1f218:	dfc00117 	ldw	ra,4(sp)
   1f21c:	df000017 	ldw	fp,0(sp)
   1f220:	dec00204 	addi	sp,sp,8
   1f224:	f800283a 	ret

0001f228 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1f228:	defff904 	addi	sp,sp,-28
   1f22c:	dfc00615 	stw	ra,24(sp)
   1f230:	df000515 	stw	fp,20(sp)
   1f234:	df000504 	addi	fp,sp,20
   1f238:	e13ffe15 	stw	r4,-8(fp)
   1f23c:	e17ffd15 	stw	r5,-12(fp)
   1f240:	e1bffc15 	stw	r6,-16(fp)
   1f244:	e1fffb15 	stw	r7,-20(fp)
   1f248:	e0bffb17 	ldw	r2,-20(fp)
   1f24c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1f250:	d0a75817 	ldw	r2,-25248(gp)
   1f254:	1000031e 	bne	r2,zero,1f264 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   1f258:	e0bfff17 	ldw	r2,-4(fp)
   1f25c:	d0a75815 	stw	r2,-25248(gp)
    return 0;
   1f260:	00000106 	br	1f268 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   1f264:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1f268:	e0bffe17 	ldw	r2,-8(fp)
   1f26c:	10800104 	addi	r2,r2,4
   1f270:	00c001c4 	movi	r3,7
   1f274:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1f278:	018000b4 	movhi	r6,2
   1f27c:	31bc6a04 	addi	r6,r6,-3672
   1f280:	e17ffe17 	ldw	r5,-8(fp)
   1f284:	e13ffc17 	ldw	r4,-16(fp)
   1f288:	002004c0 	call	2004c <alt_irq_register>
#endif  
}
   1f28c:	0001883a 	nop
   1f290:	e037883a 	mov	sp,fp
   1f294:	dfc00117 	ldw	ra,4(sp)
   1f298:	df000017 	ldw	fp,0(sp)
   1f29c:	dec00204 	addi	sp,sp,8
   1f2a0:	f800283a 	ret

0001f2a4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1f2a4:	defffc04 	addi	sp,sp,-16
   1f2a8:	df000315 	stw	fp,12(sp)
   1f2ac:	df000304 	addi	fp,sp,12
   1f2b0:	e13ffe15 	stw	r4,-8(fp)
   1f2b4:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1f2b8:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
   1f2bc:	e0bffd17 	ldw	r2,-12(fp)
   1f2c0:	1000061e 	bne	r2,zero,1f2dc <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1f2c4:	e0bffe17 	ldw	r2,-8(fp)
   1f2c8:	1007883a 	mov	r3,r2
   1f2cc:	e0bfffc3 	ldbu	r2,-1(fp)
   1f2d0:	10c4b03a 	or	r2,r2,r3
   1f2d4:	e0bfffc5 	stb	r2,-1(fp)
   1f2d8:	00000806 	br	1f2fc <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1f2dc:	e0bffe17 	ldw	r2,-8(fp)
   1f2e0:	1007883a 	mov	r3,r2
   1f2e4:	e0bfffc3 	ldbu	r2,-1(fp)
   1f2e8:	10c4b03a 	or	r2,r2,r3
   1f2ec:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
   1f2f0:	e0bfffc3 	ldbu	r2,-1(fp)
   1f2f4:	10801014 	ori	r2,r2,64
   1f2f8:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1f2fc:	e0ffffc3 	ldbu	r3,-1(fp)
   1f300:	00bfe004 	movi	r2,-128
   1f304:	1884b03a 	or	r2,r3,r2
}
   1f308:	e037883a 	mov	sp,fp
   1f30c:	df000017 	ldw	fp,0(sp)
   1f310:	dec00104 	addi	sp,sp,4
   1f314:	f800283a 	ret

0001f318 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1f318:	defffd04 	addi	sp,sp,-12
   1f31c:	df000215 	stw	fp,8(sp)
   1f320:	df000204 	addi	fp,sp,8
   1f324:	e13fff15 	stw	r4,-4(fp)
   1f328:	2805883a 	mov	r2,r5
   1f32c:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1f330:	e0bfff17 	ldw	r2,-4(fp)
   1f334:	10800a17 	ldw	r2,40(r2)
   1f338:	1007883a 	mov	r3,r2
   1f33c:	e0bffe03 	ldbu	r2,-8(fp)
   1f340:	18800025 	stbio	r2,0(r3)
}
   1f344:	0001883a 	nop
   1f348:	e037883a 	mov	sp,fp
   1f34c:	df000017 	ldw	fp,0(sp)
   1f350:	dec00104 	addi	sp,sp,4
   1f354:	f800283a 	ret

0001f358 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1f358:	defffe04 	addi	sp,sp,-8
   1f35c:	df000115 	stw	fp,4(sp)
   1f360:	df000104 	addi	fp,sp,4
   1f364:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1f368:	e0bfff17 	ldw	r2,-4(fp)
   1f36c:	10800a17 	ldw	r2,40(r2)
   1f370:	1007883a 	mov	r3,r2
   1f374:	00800044 	movi	r2,1
   1f378:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1f37c:	0001883a 	nop
   1f380:	e037883a 	mov	sp,fp
   1f384:	df000017 	ldw	fp,0(sp)
   1f388:	dec00104 	addi	sp,sp,4
   1f38c:	f800283a 	ret

0001f390 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1f390:	defffc04 	addi	sp,sp,-16
   1f394:	dfc00315 	stw	ra,12(sp)
   1f398:	df000215 	stw	fp,8(sp)
   1f39c:	df000204 	addi	fp,sp,8
   1f3a0:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1f3a4:	d1600704 	addi	r5,gp,-32740
   1f3a8:	e13ffe17 	ldw	r4,-8(fp)
   1f3ac:	001fe5c0 	call	1fe5c <alt_find_dev>
   1f3b0:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   1f3b4:	e0bfff17 	ldw	r2,-4(fp)
}
   1f3b8:	e037883a 	mov	sp,fp
   1f3bc:	dfc00117 	ldw	ra,4(sp)
   1f3c0:	df000017 	ldw	fp,0(sp)
   1f3c4:	dec00204 	addi	sp,sp,8
   1f3c8:	f800283a 	ret

0001f3cc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1f3cc:	defffb04 	addi	sp,sp,-20
   1f3d0:	df000415 	stw	fp,16(sp)
   1f3d4:	df000404 	addi	fp,sp,16
   1f3d8:	e13ffe15 	stw	r4,-8(fp)
   1f3dc:	e17ffd15 	stw	r5,-12(fp)
   1f3e0:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1f3e4:	e03fff15 	stw	zero,-4(fp)
   1f3e8:	00000f06 	br	1f428 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1f3ec:	e0bffe17 	ldw	r2,-8(fp)
   1f3f0:	10800a17 	ldw	r2,40(r2)
   1f3f4:	10800044 	addi	r2,r2,1
   1f3f8:	1009883a 	mov	r4,r2
   1f3fc:	e0fffd17 	ldw	r3,-12(fp)
   1f400:	e0bfff17 	ldw	r2,-4(fp)
   1f404:	1885883a 	add	r2,r3,r2
   1f408:	10800003 	ldbu	r2,0(r2)
   1f40c:	10803fcc 	andi	r2,r2,255
   1f410:	1080201c 	xori	r2,r2,128
   1f414:	10bfe004 	addi	r2,r2,-128
   1f418:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
   1f41c:	e0bfff17 	ldw	r2,-4(fp)
   1f420:	10800044 	addi	r2,r2,1
   1f424:	e0bfff15 	stw	r2,-4(fp)
   1f428:	e0ffff17 	ldw	r3,-4(fp)
   1f42c:	e0bffc17 	ldw	r2,-16(fp)
   1f430:	18bfee36 	bltu	r3,r2,1f3ec <alt_up_character_lcd_write+0x20>
	}
}
   1f434:	0001883a 	nop
   1f438:	0001883a 	nop
   1f43c:	e037883a 	mov	sp,fp
   1f440:	df000017 	ldw	fp,0(sp)
   1f444:	dec00104 	addi	sp,sp,4
   1f448:	f800283a 	ret

0001f44c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1f44c:	defffd04 	addi	sp,sp,-12
   1f450:	df000215 	stw	fp,8(sp)
   1f454:	df000204 	addi	fp,sp,8
   1f458:	e13fff15 	stw	r4,-4(fp)
   1f45c:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
   1f460:	00000d06 	br	1f498 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1f464:	e0bfff17 	ldw	r2,-4(fp)
   1f468:	10800a17 	ldw	r2,40(r2)
   1f46c:	10800044 	addi	r2,r2,1
   1f470:	1007883a 	mov	r3,r2
   1f474:	e0bffe17 	ldw	r2,-8(fp)
   1f478:	10800003 	ldbu	r2,0(r2)
   1f47c:	10803fcc 	andi	r2,r2,255
   1f480:	1080201c 	xori	r2,r2,128
   1f484:	10bfe004 	addi	r2,r2,-128
   1f488:	18800025 	stbio	r2,0(r3)
		++ptr;
   1f48c:	e0bffe17 	ldw	r2,-8(fp)
   1f490:	10800044 	addi	r2,r2,1
   1f494:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
   1f498:	e0bffe17 	ldw	r2,-8(fp)
   1f49c:	10800003 	ldbu	r2,0(r2)
   1f4a0:	10803fcc 	andi	r2,r2,255
   1f4a4:	1080201c 	xori	r2,r2,128
   1f4a8:	10bfe004 	addi	r2,r2,-128
   1f4ac:	103fed1e 	bne	r2,zero,1f464 <alt_up_character_lcd_string+0x18>
	}
}
   1f4b0:	0001883a 	nop
   1f4b4:	0001883a 	nop
   1f4b8:	e037883a 	mov	sp,fp
   1f4bc:	df000017 	ldw	fp,0(sp)
   1f4c0:	dec00104 	addi	sp,sp,4
   1f4c4:	f800283a 	ret

0001f4c8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1f4c8:	defffb04 	addi	sp,sp,-20
   1f4cc:	dfc00415 	stw	ra,16(sp)
   1f4d0:	df000315 	stw	fp,12(sp)
   1f4d4:	df000304 	addi	fp,sp,12
   1f4d8:	e13fff15 	stw	r4,-4(fp)
   1f4dc:	e17ffe15 	stw	r5,-8(fp)
   1f4e0:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1f4e4:	e0bfff17 	ldw	r2,-4(fp)
   1f4e8:	10800017 	ldw	r2,0(r2)
   1f4ec:	e0fffd17 	ldw	r3,-12(fp)
   1f4f0:	180d883a 	mov	r6,r3
   1f4f4:	e17ffe17 	ldw	r5,-8(fp)
   1f4f8:	1009883a 	mov	r4,r2
   1f4fc:	001f3cc0 	call	1f3cc <alt_up_character_lcd_write>
	return 0;
   1f500:	0005883a 	mov	r2,zero
}
   1f504:	e037883a 	mov	sp,fp
   1f508:	dfc00117 	ldw	ra,4(sp)
   1f50c:	df000017 	ldw	fp,0(sp)
   1f510:	dec00204 	addi	sp,sp,8
   1f514:	f800283a 	ret

0001f518 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1f518:	defffa04 	addi	sp,sp,-24
   1f51c:	dfc00515 	stw	ra,20(sp)
   1f520:	df000415 	stw	fp,16(sp)
   1f524:	df000404 	addi	fp,sp,16
   1f528:	e13ffe15 	stw	r4,-8(fp)
   1f52c:	e17ffd15 	stw	r5,-12(fp)
   1f530:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1f534:	e0bffd17 	ldw	r2,-12(fp)
   1f538:	10800a28 	cmpgeui	r2,r2,40
   1f53c:	1000031e 	bne	r2,zero,1f54c <alt_up_character_lcd_set_cursor_pos+0x34>
   1f540:	e0bffc17 	ldw	r2,-16(fp)
   1f544:	108000b0 	cmpltui	r2,r2,2
   1f548:	1000021e 	bne	r2,zero,1f554 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1f54c:	00bfffc4 	movi	r2,-1
   1f550:	00000906 	br	1f578 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1f554:	e17ffc17 	ldw	r5,-16(fp)
   1f558:	e13ffd17 	ldw	r4,-12(fp)
   1f55c:	001f2a40 	call	1f2a4 <get_DDRAM_addr>
   1f560:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1f564:	e0bfffc3 	ldbu	r2,-1(fp)
   1f568:	100b883a 	mov	r5,r2
   1f56c:	e13ffe17 	ldw	r4,-8(fp)
   1f570:	001f3180 	call	1f318 <alt_up_character_lcd_send_cmd>
	return 0;
   1f574:	0005883a 	mov	r2,zero
}
   1f578:	e037883a 	mov	sp,fp
   1f57c:	dfc00117 	ldw	ra,4(sp)
   1f580:	df000017 	ldw	fp,0(sp)
   1f584:	dec00204 	addi	sp,sp,8
   1f588:	f800283a 	ret

0001f58c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1f58c:	defffb04 	addi	sp,sp,-20
   1f590:	dfc00415 	stw	ra,16(sp)
   1f594:	df000315 	stw	fp,12(sp)
   1f598:	df000304 	addi	fp,sp,12
   1f59c:	e13ffe15 	stw	r4,-8(fp)
   1f5a0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   1f5a4:	e0bffd17 	ldw	r2,-12(fp)
   1f5a8:	10001526 	beq	r2,zero,1f600 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1f5ac:	e0bffd17 	ldw	r2,-12(fp)
   1f5b0:	0080020e 	bge	zero,r2,1f5bc <alt_up_character_lcd_shift_cursor+0x30>
   1f5b4:	00800504 	movi	r2,20
   1f5b8:	00000106 	br	1f5c0 <alt_up_character_lcd_shift_cursor+0x34>
   1f5bc:	00800404 	movi	r2,16
   1f5c0:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1f5c4:	e0bffd17 	ldw	r2,-12(fp)
   1f5c8:	1000010e 	bge	r2,zero,1f5d0 <alt_up_character_lcd_shift_cursor+0x44>
   1f5cc:	0085c83a 	sub	r2,zero,r2
   1f5d0:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1f5d4:	00000406 	br	1f5e8 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1f5d8:	e0bfff83 	ldbu	r2,-2(fp)
   1f5dc:	100b883a 	mov	r5,r2
   1f5e0:	e13ffe17 	ldw	r4,-8(fp)
   1f5e4:	001f3180 	call	1f318 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   1f5e8:	e0bfffc3 	ldbu	r2,-1(fp)
   1f5ec:	10ffffc4 	addi	r3,r2,-1
   1f5f0:	e0ffffc5 	stb	r3,-1(fp)
   1f5f4:	10803fcc 	andi	r2,r2,255
   1f5f8:	103ff71e 	bne	r2,zero,1f5d8 <alt_up_character_lcd_shift_cursor+0x4c>
   1f5fc:	00000106 	br	1f604 <alt_up_character_lcd_shift_cursor+0x78>
		return;
   1f600:	0001883a 	nop
}
   1f604:	e037883a 	mov	sp,fp
   1f608:	dfc00117 	ldw	ra,4(sp)
   1f60c:	df000017 	ldw	fp,0(sp)
   1f610:	dec00204 	addi	sp,sp,8
   1f614:	f800283a 	ret

0001f618 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1f618:	defffb04 	addi	sp,sp,-20
   1f61c:	dfc00415 	stw	ra,16(sp)
   1f620:	df000315 	stw	fp,12(sp)
   1f624:	df000304 	addi	fp,sp,12
   1f628:	e13ffe15 	stw	r4,-8(fp)
   1f62c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   1f630:	e0bffd17 	ldw	r2,-12(fp)
   1f634:	10001526 	beq	r2,zero,1f68c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1f638:	e0bffd17 	ldw	r2,-12(fp)
   1f63c:	0080020e 	bge	zero,r2,1f648 <alt_up_character_lcd_shift_display+0x30>
   1f640:	00800704 	movi	r2,28
   1f644:	00000106 	br	1f64c <alt_up_character_lcd_shift_display+0x34>
   1f648:	00800604 	movi	r2,24
   1f64c:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1f650:	e0bffd17 	ldw	r2,-12(fp)
   1f654:	1000010e 	bge	r2,zero,1f65c <alt_up_character_lcd_shift_display+0x44>
   1f658:	0085c83a 	sub	r2,zero,r2
   1f65c:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1f660:	00000406 	br	1f674 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1f664:	e0bfff83 	ldbu	r2,-2(fp)
   1f668:	100b883a 	mov	r5,r2
   1f66c:	e13ffe17 	ldw	r4,-8(fp)
   1f670:	001f3180 	call	1f318 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   1f674:	e0bfffc3 	ldbu	r2,-1(fp)
   1f678:	10ffffc4 	addi	r3,r2,-1
   1f67c:	e0ffffc5 	stb	r3,-1(fp)
   1f680:	10803fcc 	andi	r2,r2,255
   1f684:	103ff71e 	bne	r2,zero,1f664 <alt_up_character_lcd_shift_display+0x4c>
   1f688:	00000106 	br	1f690 <alt_up_character_lcd_shift_display+0x78>
		return;
   1f68c:	0001883a 	nop
}
   1f690:	e037883a 	mov	sp,fp
   1f694:	dfc00117 	ldw	ra,4(sp)
   1f698:	df000017 	ldw	fp,0(sp)
   1f69c:	dec00204 	addi	sp,sp,8
   1f6a0:	f800283a 	ret

0001f6a4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1f6a4:	defffa04 	addi	sp,sp,-24
   1f6a8:	dfc00515 	stw	ra,20(sp)
   1f6ac:	df000415 	stw	fp,16(sp)
   1f6b0:	df000404 	addi	fp,sp,16
   1f6b4:	e13ffe15 	stw	r4,-8(fp)
   1f6b8:	e17ffd15 	stw	r5,-12(fp)
   1f6bc:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1f6c0:	e0bffd17 	ldw	r2,-12(fp)
   1f6c4:	10800a28 	cmpgeui	r2,r2,40
   1f6c8:	1000031e 	bne	r2,zero,1f6d8 <alt_up_character_lcd_erase_pos+0x34>
   1f6cc:	e0bffc17 	ldw	r2,-16(fp)
   1f6d0:	108000b0 	cmpltui	r2,r2,2
   1f6d4:	1000021e 	bne	r2,zero,1f6e0 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1f6d8:	00bfffc4 	movi	r2,-1
   1f6dc:	00000f06 	br	1f71c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1f6e0:	e17ffc17 	ldw	r5,-16(fp)
   1f6e4:	e13ffd17 	ldw	r4,-12(fp)
   1f6e8:	001f2a40 	call	1f2a4 <get_DDRAM_addr>
   1f6ec:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1f6f0:	e0bfffc3 	ldbu	r2,-1(fp)
   1f6f4:	100b883a 	mov	r5,r2
   1f6f8:	e13ffe17 	ldw	r4,-8(fp)
   1f6fc:	001f3180 	call	1f318 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1f700:	e0bffe17 	ldw	r2,-8(fp)
   1f704:	10800a17 	ldw	r2,40(r2)
   1f708:	10800044 	addi	r2,r2,1
   1f70c:	1007883a 	mov	r3,r2
   1f710:	00800084 	movi	r2,2
   1f714:	18800025 	stbio	r2,0(r3)
	return 0;
   1f718:	0005883a 	mov	r2,zero
}
   1f71c:	e037883a 	mov	sp,fp
   1f720:	dfc00117 	ldw	ra,4(sp)
   1f724:	df000017 	ldw	fp,0(sp)
   1f728:	dec00204 	addi	sp,sp,8
   1f72c:	f800283a 	ret

0001f730 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1f730:	defffd04 	addi	sp,sp,-12
   1f734:	dfc00215 	stw	ra,8(sp)
   1f738:	df000115 	stw	fp,4(sp)
   1f73c:	df000104 	addi	fp,sp,4
   1f740:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1f744:	01400304 	movi	r5,12
   1f748:	e13fff17 	ldw	r4,-4(fp)
   1f74c:	001f3180 	call	1f318 <alt_up_character_lcd_send_cmd>
}
   1f750:	0001883a 	nop
   1f754:	e037883a 	mov	sp,fp
   1f758:	dfc00117 	ldw	ra,4(sp)
   1f75c:	df000017 	ldw	fp,0(sp)
   1f760:	dec00204 	addi	sp,sp,8
   1f764:	f800283a 	ret

0001f768 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1f768:	defffd04 	addi	sp,sp,-12
   1f76c:	dfc00215 	stw	ra,8(sp)
   1f770:	df000115 	stw	fp,4(sp)
   1f774:	df000104 	addi	fp,sp,4
   1f778:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1f77c:	014003c4 	movi	r5,15
   1f780:	e13fff17 	ldw	r4,-4(fp)
   1f784:	001f3180 	call	1f318 <alt_up_character_lcd_send_cmd>
}
   1f788:	0001883a 	nop
   1f78c:	e037883a 	mov	sp,fp
   1f790:	dfc00117 	ldw	ra,4(sp)
   1f794:	df000017 	ldw	fp,0(sp)
   1f798:	dec00204 	addi	sp,sp,8
   1f79c:	f800283a 	ret

0001f7a0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1f7a0:	defffd04 	addi	sp,sp,-12
   1f7a4:	df000215 	stw	fp,8(sp)
   1f7a8:	df000204 	addi	fp,sp,8
   1f7ac:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1f7b0:	e0bffe17 	ldw	r2,-8(fp)
   1f7b4:	10800a17 	ldw	r2,40(r2)
   1f7b8:	10800104 	addi	r2,r2,4
   1f7bc:	10800037 	ldwio	r2,0(r2)
   1f7c0:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1f7c4:	e0bfff17 	ldw	r2,-4(fp)
   1f7c8:	10800054 	ori	r2,r2,1
   1f7cc:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1f7d0:	e0bffe17 	ldw	r2,-8(fp)
   1f7d4:	10800a17 	ldw	r2,40(r2)
   1f7d8:	10800104 	addi	r2,r2,4
   1f7dc:	1007883a 	mov	r3,r2
   1f7e0:	e0bfff17 	ldw	r2,-4(fp)
   1f7e4:	18800035 	stwio	r2,0(r3)
}
   1f7e8:	0001883a 	nop
   1f7ec:	e037883a 	mov	sp,fp
   1f7f0:	df000017 	ldw	fp,0(sp)
   1f7f4:	dec00104 	addi	sp,sp,4
   1f7f8:	f800283a 	ret

0001f7fc <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1f7fc:	defffd04 	addi	sp,sp,-12
   1f800:	df000215 	stw	fp,8(sp)
   1f804:	df000204 	addi	fp,sp,8
   1f808:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1f80c:	e0bffe17 	ldw	r2,-8(fp)
   1f810:	10800a17 	ldw	r2,40(r2)
   1f814:	10800104 	addi	r2,r2,4
   1f818:	10800037 	ldwio	r2,0(r2)
   1f81c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1f820:	e0ffff17 	ldw	r3,-4(fp)
   1f824:	00bfff84 	movi	r2,-2
   1f828:	1884703a 	and	r2,r3,r2
   1f82c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1f830:	e0bffe17 	ldw	r2,-8(fp)
   1f834:	10800a17 	ldw	r2,40(r2)
   1f838:	10800104 	addi	r2,r2,4
   1f83c:	1007883a 	mov	r3,r2
   1f840:	e0bfff17 	ldw	r2,-4(fp)
   1f844:	18800035 	stwio	r2,0(r3)
}
   1f848:	0001883a 	nop
   1f84c:	e037883a 	mov	sp,fp
   1f850:	df000017 	ldw	fp,0(sp)
   1f854:	dec00104 	addi	sp,sp,4
   1f858:	f800283a 	ret

0001f85c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1f85c:	defffd04 	addi	sp,sp,-12
   1f860:	df000215 	stw	fp,8(sp)
   1f864:	df000204 	addi	fp,sp,8
   1f868:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
   1f86c:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1f870:	e0bffe17 	ldw	r2,-8(fp)
   1f874:	10800a17 	ldw	r2,40(r2)
   1f878:	10800084 	addi	r2,r2,2
   1f87c:	1080002b 	ldhuio	r2,0(r2)
   1f880:	10bfffcc 	andi	r2,r2,65535
   1f884:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1f888:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1f88c:	e037883a 	mov	sp,fp
   1f890:	df000017 	ldw	fp,0(sp)
   1f894:	dec00104 	addi	sp,sp,4
   1f898:	f800283a 	ret

0001f89c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1f89c:	defffd04 	addi	sp,sp,-12
   1f8a0:	df000215 	stw	fp,8(sp)
   1f8a4:	df000204 	addi	fp,sp,8
   1f8a8:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1f8ac:	e0bffe17 	ldw	r2,-8(fp)
   1f8b0:	10800a17 	ldw	r2,40(r2)
   1f8b4:	10800104 	addi	r2,r2,4
   1f8b8:	10800037 	ldwio	r2,0(r2)
   1f8bc:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1f8c0:	e0bfff17 	ldw	r2,-4(fp)
   1f8c4:	1004d43a 	srli	r2,r2,16
}
   1f8c8:	e037883a 	mov	sp,fp
   1f8cc:	df000017 	ldw	fp,0(sp)
   1f8d0:	dec00104 	addi	sp,sp,4
   1f8d4:	f800283a 	ret

0001f8d8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1f8d8:	defffd04 	addi	sp,sp,-12
   1f8dc:	df000215 	stw	fp,8(sp)
   1f8e0:	df000204 	addi	fp,sp,8
   1f8e4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1f8e8:	e0bffe17 	ldw	r2,-8(fp)
   1f8ec:	1004d27a 	srli	r2,r2,9
   1f8f0:	1080004c 	andi	r2,r2,1
   1f8f4:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
   1f8f8:	e0bfff17 	ldw	r2,-4(fp)
   1f8fc:	10000226 	beq	r2,zero,1f908 <alt_up_rs232_check_parity+0x30>
   1f900:	00bfffc4 	movi	r2,-1
   1f904:	00000106 	br	1f90c <alt_up_rs232_check_parity+0x34>
   1f908:	0005883a 	mov	r2,zero
}
   1f90c:	e037883a 	mov	sp,fp
   1f910:	df000017 	ldw	fp,0(sp)
   1f914:	dec00104 	addi	sp,sp,4
   1f918:	f800283a 	ret

0001f91c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1f91c:	defffd04 	addi	sp,sp,-12
   1f920:	df000215 	stw	fp,8(sp)
   1f924:	df000204 	addi	fp,sp,8
   1f928:	e13fff15 	stw	r4,-4(fp)
   1f92c:	2805883a 	mov	r2,r5
   1f930:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1f934:	e0bfff17 	ldw	r2,-4(fp)
   1f938:	10800a17 	ldw	r2,40(r2)
   1f93c:	1007883a 	mov	r3,r2
   1f940:	e0bffe03 	ldbu	r2,-8(fp)
   1f944:	18800035 	stwio	r2,0(r3)
	return 0;
   1f948:	0005883a 	mov	r2,zero
}
   1f94c:	e037883a 	mov	sp,fp
   1f950:	df000017 	ldw	fp,0(sp)
   1f954:	dec00104 	addi	sp,sp,4
   1f958:	f800283a 	ret

0001f95c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1f95c:	defffa04 	addi	sp,sp,-24
   1f960:	dfc00515 	stw	ra,20(sp)
   1f964:	df000415 	stw	fp,16(sp)
   1f968:	df000404 	addi	fp,sp,16
   1f96c:	e13ffe15 	stw	r4,-8(fp)
   1f970:	e17ffd15 	stw	r5,-12(fp)
   1f974:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1f978:	e0bffe17 	ldw	r2,-8(fp)
   1f97c:	10800a17 	ldw	r2,40(r2)
   1f980:	10800037 	ldwio	r2,0(r2)
   1f984:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1f988:	e0bfff17 	ldw	r2,-4(fp)
   1f98c:	1007883a 	mov	r3,r2
   1f990:	e0bffd17 	ldw	r2,-12(fp)
   1f994:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1f998:	e13fff17 	ldw	r4,-4(fp)
   1f99c:	001f8d80 	call	1f8d8 <alt_up_rs232_check_parity>
   1f9a0:	1007883a 	mov	r3,r2
   1f9a4:	e0bffc17 	ldw	r2,-16(fp)
   1f9a8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1f9ac:	e0bfff17 	ldw	r2,-4(fp)
   1f9b0:	1004d3fa 	srli	r2,r2,15
   1f9b4:	1080004c 	andi	r2,r2,1
   1f9b8:	10bfffc4 	addi	r2,r2,-1
}
   1f9bc:	e037883a 	mov	sp,fp
   1f9c0:	dfc00117 	ldw	ra,4(sp)
   1f9c4:	df000017 	ldw	fp,0(sp)
   1f9c8:	dec00204 	addi	sp,sp,8
   1f9cc:	f800283a 	ret

0001f9d0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1f9d0:	defff804 	addi	sp,sp,-32
   1f9d4:	dfc00715 	stw	ra,28(sp)
   1f9d8:	df000615 	stw	fp,24(sp)
   1f9dc:	df000604 	addi	fp,sp,24
   1f9e0:	e13ffc15 	stw	r4,-16(fp)
   1f9e4:	e17ffb15 	stw	r5,-20(fp)
   1f9e8:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1f9ec:	e0bffc17 	ldw	r2,-16(fp)
   1f9f0:	10800017 	ldw	r2,0(r2)
   1f9f4:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   1f9f8:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
   1f9fc:	00000c06 	br	1fa30 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1fa00:	e0bffb17 	ldw	r2,-20(fp)
   1fa04:	10c00044 	addi	r3,r2,1
   1fa08:	e0fffb15 	stw	r3,-20(fp)
   1fa0c:	e0fffdc4 	addi	r3,fp,-9
   1fa10:	180d883a 	mov	r6,r3
   1fa14:	100b883a 	mov	r5,r2
   1fa18:	e13ffe17 	ldw	r4,-8(fp)
   1fa1c:	001f95c0 	call	1f95c <alt_up_rs232_read_data>
   1fa20:	1000081e 	bne	r2,zero,1fa44 <alt_up_rs232_read_fd+0x74>
			count++;
   1fa24:	e0bfff17 	ldw	r2,-4(fp)
   1fa28:	10800044 	addi	r2,r2,1
   1fa2c:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
   1fa30:	e0bffa17 	ldw	r2,-24(fp)
   1fa34:	10ffffc4 	addi	r3,r2,-1
   1fa38:	e0fffa15 	stw	r3,-24(fp)
   1fa3c:	103ff01e 	bne	r2,zero,1fa00 <alt_up_rs232_read_fd+0x30>
   1fa40:	00000106 	br	1fa48 <alt_up_rs232_read_fd+0x78>
		else
			break;
   1fa44:	0001883a 	nop
	}
	return count;
   1fa48:	e0bfff17 	ldw	r2,-4(fp)
}
   1fa4c:	e037883a 	mov	sp,fp
   1fa50:	dfc00117 	ldw	ra,4(sp)
   1fa54:	df000017 	ldw	fp,0(sp)
   1fa58:	dec00204 	addi	sp,sp,8
   1fa5c:	f800283a 	ret

0001fa60 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1fa60:	defff904 	addi	sp,sp,-28
   1fa64:	dfc00615 	stw	ra,24(sp)
   1fa68:	df000515 	stw	fp,20(sp)
   1fa6c:	df000504 	addi	fp,sp,20
   1fa70:	e13ffd15 	stw	r4,-12(fp)
   1fa74:	e17ffc15 	stw	r5,-16(fp)
   1fa78:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1fa7c:	e0bffd17 	ldw	r2,-12(fp)
   1fa80:	10800017 	ldw	r2,0(r2)
   1fa84:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   1fa88:	e03fff15 	stw	zero,-4(fp)
	while(len--)
   1fa8c:	00000d06 	br	1fac4 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1fa90:	e0bffc17 	ldw	r2,-16(fp)
   1fa94:	10800003 	ldbu	r2,0(r2)
   1fa98:	10803fcc 	andi	r2,r2,255
   1fa9c:	100b883a 	mov	r5,r2
   1faa0:	e13ffe17 	ldw	r4,-8(fp)
   1faa4:	001f91c0 	call	1f91c <alt_up_rs232_write_data>
   1faa8:	10000b1e 	bne	r2,zero,1fad8 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1faac:	e0bfff17 	ldw	r2,-4(fp)
   1fab0:	10800044 	addi	r2,r2,1
   1fab4:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
   1fab8:	e0bffc17 	ldw	r2,-16(fp)
   1fabc:	10800044 	addi	r2,r2,1
   1fac0:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
   1fac4:	e0bffb17 	ldw	r2,-20(fp)
   1fac8:	10ffffc4 	addi	r3,r2,-1
   1facc:	e0fffb15 	stw	r3,-20(fp)
   1fad0:	103fef1e 	bne	r2,zero,1fa90 <alt_up_rs232_write_fd+0x30>
   1fad4:	00000106 	br	1fadc <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
   1fad8:	0001883a 	nop
	}
	return count;
   1fadc:	e0bfff17 	ldw	r2,-4(fp)
}
   1fae0:	e037883a 	mov	sp,fp
   1fae4:	dfc00117 	ldw	ra,4(sp)
   1fae8:	df000017 	ldw	fp,0(sp)
   1faec:	dec00204 	addi	sp,sp,8
   1faf0:	f800283a 	ret

0001faf4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1faf4:	defffc04 	addi	sp,sp,-16
   1faf8:	dfc00315 	stw	ra,12(sp)
   1fafc:	df000215 	stw	fp,8(sp)
   1fb00:	df000204 	addi	fp,sp,8
   1fb04:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1fb08:	d1600704 	addi	r5,gp,-32740
   1fb0c:	e13ffe17 	ldw	r4,-8(fp)
   1fb10:	001fe5c0 	call	1fe5c <alt_find_dev>
   1fb14:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   1fb18:	e0bfff17 	ldw	r2,-4(fp)
}
   1fb1c:	e037883a 	mov	sp,fp
   1fb20:	dfc00117 	ldw	ra,4(sp)
   1fb24:	df000017 	ldw	fp,0(sp)
   1fb28:	dec00204 	addi	sp,sp,8
   1fb2c:	f800283a 	ret

0001fb30 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1fb30:	defff404 	addi	sp,sp,-48
   1fb34:	df000b15 	stw	fp,44(sp)
   1fb38:	df000b04 	addi	fp,sp,44
   1fb3c:	e13ff815 	stw	r4,-32(fp)
   1fb40:	e17ff715 	stw	r5,-36(fp)
   1fb44:	e1bff615 	stw	r6,-40(fp)
   1fb48:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   1fb4c:	e03ffe15 	stw	zero,-8(fp)
   1fb50:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   1fb54:	d0a75817 	ldw	r2,-25248(gp)
  
  if (alt_ticks_per_second ())
   1fb58:	10004826 	beq	r2,zero,1fc7c <alt_alarm_start+0x14c>
  {
    if (alarm)
   1fb5c:	e0bff817 	ldw	r2,-32(fp)
   1fb60:	10004426 	beq	r2,zero,1fc74 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   1fb64:	e0bff817 	ldw	r2,-32(fp)
   1fb68:	e0fff617 	ldw	r3,-40(fp)
   1fb6c:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   1fb70:	e0bff817 	ldw	r2,-32(fp)
   1fb74:	e0fff517 	ldw	r3,-44(fp)
   1fb78:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   1fb7c:	0005303a 	rdctl	r2,status
   1fb80:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fb84:	e0fff917 	ldw	r3,-28(fp)
   1fb88:	00bfff84 	movi	r2,-2
   1fb8c:	1884703a 	and	r2,r3,r2
   1fb90:	1001703a 	wrctl	status,r2
  return context;
   1fb94:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1fb98:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1fb9c:	d0a75917 	ldw	r2,-25244(gp)
   1fba0:	d0e75a17 	ldw	r3,-25240(gp)
      
      current_nticks = alt_nticks();
   1fba4:	e0bffe15 	stw	r2,-8(fp)
   1fba8:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   1fbac:	e0bff717 	ldw	r2,-36(fp)
   1fbb0:	1011883a 	mov	r8,r2
   1fbb4:	0013883a 	mov	r9,zero
   1fbb8:	e13ffe17 	ldw	r4,-8(fp)
   1fbbc:	e17fff17 	ldw	r5,-4(fp)
   1fbc0:	4105883a 	add	r2,r8,r4
   1fbc4:	120d803a 	cmpltu	r6,r2,r8
   1fbc8:	4947883a 	add	r3,r9,r5
   1fbcc:	30c9883a 	add	r4,r6,r3
   1fbd0:	2007883a 	mov	r3,r4
   1fbd4:	1009883a 	mov	r4,r2
   1fbd8:	180b883a 	mov	r5,r3
   1fbdc:	01800044 	movi	r6,1
   1fbe0:	000f883a 	mov	r7,zero
   1fbe4:	2185883a 	add	r2,r4,r6
   1fbe8:	1111803a 	cmpltu	r8,r2,r4
   1fbec:	29c7883a 	add	r3,r5,r7
   1fbf0:	40c9883a 	add	r4,r8,r3
   1fbf4:	2007883a 	mov	r3,r4
   1fbf8:	1009883a 	mov	r4,r2
   1fbfc:	180b883a 	mov	r5,r3
   1fc00:	e0bff817 	ldw	r2,-32(fp)
   1fc04:	11000215 	stw	r4,8(r2)
   1fc08:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1fc0c:	e0bff817 	ldw	r2,-32(fp)
   1fc10:	d0e00d04 	addi	r3,gp,-32716
   1fc14:	e0fffb15 	stw	r3,-20(fp)
   1fc18:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1fc1c:	e0bffa17 	ldw	r2,-24(fp)
   1fc20:	e0fffb17 	ldw	r3,-20(fp)
   1fc24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1fc28:	e0bffb17 	ldw	r2,-20(fp)
   1fc2c:	10c00017 	ldw	r3,0(r2)
   1fc30:	e0bffa17 	ldw	r2,-24(fp)
   1fc34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1fc38:	e0bffb17 	ldw	r2,-20(fp)
   1fc3c:	10800017 	ldw	r2,0(r2)
   1fc40:	e0fffa17 	ldw	r3,-24(fp)
   1fc44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1fc48:	e0bffb17 	ldw	r2,-20(fp)
   1fc4c:	e0fffa17 	ldw	r3,-24(fp)
   1fc50:	10c00015 	stw	r3,0(r2)
}
   1fc54:	0001883a 	nop
   1fc58:	e0bffd17 	ldw	r2,-12(fp)
   1fc5c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1fc60:	e0bffc17 	ldw	r2,-16(fp)
   1fc64:	1001703a 	wrctl	status,r2
}
   1fc68:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   1fc6c:	0005883a 	mov	r2,zero
   1fc70:	00000306 	br	1fc80 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   1fc74:	00bffa84 	movi	r2,-22
   1fc78:	00000106 	br	1fc80 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   1fc7c:	00bfde84 	movi	r2,-134
  }
}
   1fc80:	e037883a 	mov	sp,fp
   1fc84:	df000017 	ldw	fp,0(sp)
   1fc88:	dec00104 	addi	sp,sp,4
   1fc8c:	f800283a 	ret

0001fc90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1fc90:	deffff04 	addi	sp,sp,-4
   1fc94:	df000015 	stw	fp,0(sp)
   1fc98:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1fc9c:	0001883a 	nop
   1fca0:	e037883a 	mov	sp,fp
   1fca4:	df000017 	ldw	fp,0(sp)
   1fca8:	dec00104 	addi	sp,sp,4
   1fcac:	f800283a 	ret

0001fcb0 <alt_get_errno>:
{
   1fcb0:	defffe04 	addi	sp,sp,-8
   1fcb4:	dfc00115 	stw	ra,4(sp)
   1fcb8:	df000015 	stw	fp,0(sp)
   1fcbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1fcc0:	d0a00a17 	ldw	r2,-32728(gp)
   1fcc4:	10000326 	beq	r2,zero,1fcd4 <alt_get_errno+0x24>
   1fcc8:	d0a00a17 	ldw	r2,-32728(gp)
   1fccc:	103ee83a 	callr	r2
   1fcd0:	00000106 	br	1fcd8 <alt_get_errno+0x28>
   1fcd4:	d0a74504 	addi	r2,gp,-25324
}
   1fcd8:	e037883a 	mov	sp,fp
   1fcdc:	dfc00117 	ldw	ra,4(sp)
   1fce0:	df000017 	ldw	fp,0(sp)
   1fce4:	dec00204 	addi	sp,sp,8
   1fce8:	f800283a 	ret

0001fcec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1fcec:	defffa04 	addi	sp,sp,-24
   1fcf0:	dfc00515 	stw	ra,20(sp)
   1fcf4:	df000415 	stw	fp,16(sp)
   1fcf8:	df000404 	addi	fp,sp,16
   1fcfc:	e13ffd15 	stw	r4,-12(fp)
   1fd00:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1fd04:	e0bffd17 	ldw	r2,-12(fp)
   1fd08:	10000326 	beq	r2,zero,1fd18 <alt_dev_llist_insert+0x2c>
   1fd0c:	e0bffd17 	ldw	r2,-12(fp)
   1fd10:	10800217 	ldw	r2,8(r2)
   1fd14:	1000061e 	bne	r2,zero,1fd30 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1fd18:	001fcb00 	call	1fcb0 <alt_get_errno>
   1fd1c:	1007883a 	mov	r3,r2
   1fd20:	00800584 	movi	r2,22
   1fd24:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1fd28:	00bffa84 	movi	r2,-22
   1fd2c:	00001406 	br	1fd80 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1fd30:	e0bffd17 	ldw	r2,-12(fp)
   1fd34:	e0fffc17 	ldw	r3,-16(fp)
   1fd38:	e0ffff15 	stw	r3,-4(fp)
   1fd3c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   1fd40:	e0bffe17 	ldw	r2,-8(fp)
   1fd44:	e0ffff17 	ldw	r3,-4(fp)
   1fd48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1fd4c:	e0bfff17 	ldw	r2,-4(fp)
   1fd50:	10c00017 	ldw	r3,0(r2)
   1fd54:	e0bffe17 	ldw	r2,-8(fp)
   1fd58:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   1fd5c:	e0bfff17 	ldw	r2,-4(fp)
   1fd60:	10800017 	ldw	r2,0(r2)
   1fd64:	e0fffe17 	ldw	r3,-8(fp)
   1fd68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1fd6c:	e0bfff17 	ldw	r2,-4(fp)
   1fd70:	e0fffe17 	ldw	r3,-8(fp)
   1fd74:	10c00015 	stw	r3,0(r2)
}
   1fd78:	0001883a 	nop

  return 0;  
   1fd7c:	0005883a 	mov	r2,zero
}
   1fd80:	e037883a 	mov	sp,fp
   1fd84:	dfc00117 	ldw	ra,4(sp)
   1fd88:	df000017 	ldw	fp,0(sp)
   1fd8c:	dec00204 	addi	sp,sp,8
   1fd90:	f800283a 	ret

0001fd94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1fd94:	defffd04 	addi	sp,sp,-12
   1fd98:	dfc00215 	stw	ra,8(sp)
   1fd9c:	df000115 	stw	fp,4(sp)
   1fda0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1fda4:	008000b4 	movhi	r2,2
   1fda8:	10834404 	addi	r2,r2,3344
   1fdac:	e0bfff15 	stw	r2,-4(fp)
   1fdb0:	00000606 	br	1fdcc <_do_ctors+0x38>
        (*ctor) (); 
   1fdb4:	e0bfff17 	ldw	r2,-4(fp)
   1fdb8:	10800017 	ldw	r2,0(r2)
   1fdbc:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1fdc0:	e0bfff17 	ldw	r2,-4(fp)
   1fdc4:	10bfff04 	addi	r2,r2,-4
   1fdc8:	e0bfff15 	stw	r2,-4(fp)
   1fdcc:	e0ffff17 	ldw	r3,-4(fp)
   1fdd0:	008000b4 	movhi	r2,2
   1fdd4:	10834504 	addi	r2,r2,3348
   1fdd8:	18bff62e 	bgeu	r3,r2,1fdb4 <_do_ctors+0x20>
}
   1fddc:	0001883a 	nop
   1fde0:	0001883a 	nop
   1fde4:	e037883a 	mov	sp,fp
   1fde8:	dfc00117 	ldw	ra,4(sp)
   1fdec:	df000017 	ldw	fp,0(sp)
   1fdf0:	dec00204 	addi	sp,sp,8
   1fdf4:	f800283a 	ret

0001fdf8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1fdf8:	defffd04 	addi	sp,sp,-12
   1fdfc:	dfc00215 	stw	ra,8(sp)
   1fe00:	df000115 	stw	fp,4(sp)
   1fe04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1fe08:	008000b4 	movhi	r2,2
   1fe0c:	10834404 	addi	r2,r2,3344
   1fe10:	e0bfff15 	stw	r2,-4(fp)
   1fe14:	00000606 	br	1fe30 <_do_dtors+0x38>
        (*dtor) (); 
   1fe18:	e0bfff17 	ldw	r2,-4(fp)
   1fe1c:	10800017 	ldw	r2,0(r2)
   1fe20:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1fe24:	e0bfff17 	ldw	r2,-4(fp)
   1fe28:	10bfff04 	addi	r2,r2,-4
   1fe2c:	e0bfff15 	stw	r2,-4(fp)
   1fe30:	e0ffff17 	ldw	r3,-4(fp)
   1fe34:	008000b4 	movhi	r2,2
   1fe38:	10834504 	addi	r2,r2,3348
   1fe3c:	18bff62e 	bgeu	r3,r2,1fe18 <_do_dtors+0x20>
}
   1fe40:	0001883a 	nop
   1fe44:	0001883a 	nop
   1fe48:	e037883a 	mov	sp,fp
   1fe4c:	dfc00117 	ldw	ra,4(sp)
   1fe50:	df000017 	ldw	fp,0(sp)
   1fe54:	dec00204 	addi	sp,sp,8
   1fe58:	f800283a 	ret

0001fe5c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1fe5c:	defffa04 	addi	sp,sp,-24
   1fe60:	dfc00515 	stw	ra,20(sp)
   1fe64:	df000415 	stw	fp,16(sp)
   1fe68:	df000404 	addi	fp,sp,16
   1fe6c:	e13ffd15 	stw	r4,-12(fp)
   1fe70:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1fe74:	e0bffc17 	ldw	r2,-16(fp)
   1fe78:	10800017 	ldw	r2,0(r2)
   1fe7c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1fe80:	e13ffd17 	ldw	r4,-12(fp)
   1fe84:	000d6fc0 	call	d6fc <strlen>
   1fe88:	10800044 	addi	r2,r2,1
   1fe8c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1fe90:	00000d06 	br	1fec8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1fe94:	e0bfff17 	ldw	r2,-4(fp)
   1fe98:	10800217 	ldw	r2,8(r2)
   1fe9c:	e0fffe17 	ldw	r3,-8(fp)
   1fea0:	180d883a 	mov	r6,r3
   1fea4:	e17ffd17 	ldw	r5,-12(fp)
   1fea8:	1009883a 	mov	r4,r2
   1feac:	00209200 	call	20920 <memcmp>
   1feb0:	1000021e 	bne	r2,zero,1febc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1feb4:	e0bfff17 	ldw	r2,-4(fp)
   1feb8:	00000706 	br	1fed8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1febc:	e0bfff17 	ldw	r2,-4(fp)
   1fec0:	10800017 	ldw	r2,0(r2)
   1fec4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   1fec8:	e0ffff17 	ldw	r3,-4(fp)
   1fecc:	e0bffc17 	ldw	r2,-16(fp)
   1fed0:	18bff01e 	bne	r3,r2,1fe94 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   1fed4:	0005883a 	mov	r2,zero
}
   1fed8:	e037883a 	mov	sp,fp
   1fedc:	dfc00117 	ldw	ra,4(sp)
   1fee0:	df000017 	ldw	fp,0(sp)
   1fee4:	dec00204 	addi	sp,sp,8
   1fee8:	f800283a 	ret

0001feec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1feec:	defffe04 	addi	sp,sp,-8
   1fef0:	dfc00115 	stw	ra,4(sp)
   1fef4:	df000015 	stw	fp,0(sp)
   1fef8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1fefc:	01440004 	movi	r5,4096
   1ff00:	0009883a 	mov	r4,zero
   1ff04:	00207b00 	call	207b0 <alt_icache_flush>
#endif
}
   1ff08:	0001883a 	nop
   1ff0c:	e037883a 	mov	sp,fp
   1ff10:	dfc00117 	ldw	ra,4(sp)
   1ff14:	df000017 	ldw	fp,0(sp)
   1ff18:	dec00204 	addi	sp,sp,8
   1ff1c:	f800283a 	ret

0001ff20 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1ff20:	defff904 	addi	sp,sp,-28
   1ff24:	dfc00615 	stw	ra,24(sp)
   1ff28:	df000515 	stw	fp,20(sp)
   1ff2c:	df000504 	addi	fp,sp,20
   1ff30:	e13ffe15 	stw	r4,-8(fp)
   1ff34:	e17ffd15 	stw	r5,-12(fp)
   1ff38:	e1bffc15 	stw	r6,-16(fp)
   1ff3c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   1ff40:	e1bffb17 	ldw	r6,-20(fp)
   1ff44:	e17ffc17 	ldw	r5,-16(fp)
   1ff48:	e13ffd17 	ldw	r4,-12(fp)
   1ff4c:	00202c00 	call	202c0 <open>
   1ff50:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   1ff54:	e0bfff17 	ldw	r2,-4(fp)
   1ff58:	10001716 	blt	r2,zero,1ffb8 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   1ff5c:	e0bfff17 	ldw	r2,-4(fp)
   1ff60:	10c00324 	muli	r3,r2,12
   1ff64:	008000b4 	movhi	r2,2
   1ff68:	1885883a 	add	r2,r3,r2
   1ff6c:	10c9f817 	ldw	r3,10208(r2)
   1ff70:	e0bffe17 	ldw	r2,-8(fp)
   1ff74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1ff78:	e0bfff17 	ldw	r2,-4(fp)
   1ff7c:	10c00324 	muli	r3,r2,12
   1ff80:	008000b4 	movhi	r2,2
   1ff84:	1885883a 	add	r2,r3,r2
   1ff88:	10c9f917 	ldw	r3,10212(r2)
   1ff8c:	e0bffe17 	ldw	r2,-8(fp)
   1ff90:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1ff94:	e0bfff17 	ldw	r2,-4(fp)
   1ff98:	10c00324 	muli	r3,r2,12
   1ff9c:	008000b4 	movhi	r2,2
   1ffa0:	1885883a 	add	r2,r3,r2
   1ffa4:	10c9fa17 	ldw	r3,10216(r2)
   1ffa8:	e0bffe17 	ldw	r2,-8(fp)
   1ffac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1ffb0:	e13fff17 	ldw	r4,-4(fp)
   1ffb4:	001a5d00 	call	1a5d0 <alt_release_fd>
  }
} 
   1ffb8:	0001883a 	nop
   1ffbc:	e037883a 	mov	sp,fp
   1ffc0:	dfc00117 	ldw	ra,4(sp)
   1ffc4:	df000017 	ldw	fp,0(sp)
   1ffc8:	dec00204 	addi	sp,sp,8
   1ffcc:	f800283a 	ret

0001ffd0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1ffd0:	defffb04 	addi	sp,sp,-20
   1ffd4:	dfc00415 	stw	ra,16(sp)
   1ffd8:	df000315 	stw	fp,12(sp)
   1ffdc:	df000304 	addi	fp,sp,12
   1ffe0:	e13fff15 	stw	r4,-4(fp)
   1ffe4:	e17ffe15 	stw	r5,-8(fp)
   1ffe8:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1ffec:	01c07fc4 	movi	r7,511
   1fff0:	01800044 	movi	r6,1
   1fff4:	e17fff17 	ldw	r5,-4(fp)
   1fff8:	010000b4 	movhi	r4,2
   1fffc:	2109fb04 	addi	r4,r4,10220
   20000:	001ff200 	call	1ff20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   20004:	01c07fc4 	movi	r7,511
   20008:	000d883a 	mov	r6,zero
   2000c:	e17ffe17 	ldw	r5,-8(fp)
   20010:	010000b4 	movhi	r4,2
   20014:	2109f804 	addi	r4,r4,10208
   20018:	001ff200 	call	1ff20 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2001c:	01c07fc4 	movi	r7,511
   20020:	01800044 	movi	r6,1
   20024:	e17ffd17 	ldw	r5,-12(fp)
   20028:	010000b4 	movhi	r4,2
   2002c:	2109fe04 	addi	r4,r4,10232
   20030:	001ff200 	call	1ff20 <alt_open_fd>
}  
   20034:	0001883a 	nop
   20038:	e037883a 	mov	sp,fp
   2003c:	dfc00117 	ldw	ra,4(sp)
   20040:	df000017 	ldw	fp,0(sp)
   20044:	dec00204 	addi	sp,sp,8
   20048:	f800283a 	ret

0002004c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   2004c:	defff004 	addi	sp,sp,-64
   20050:	df000f15 	stw	fp,60(sp)
   20054:	df000f04 	addi	fp,sp,60
   20058:	e13ff315 	stw	r4,-52(fp)
   2005c:	e17ff215 	stw	r5,-56(fp)
   20060:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   20064:	00bffa84 	movi	r2,-22
   20068:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2006c:	e0bff317 	ldw	r2,-52(fp)
   20070:	10800828 	cmpgeui	r2,r2,32
   20074:	1000501e 	bne	r2,zero,201b8 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   20078:	0005303a 	rdctl	r2,status
   2007c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20080:	e0fffd17 	ldw	r3,-12(fp)
   20084:	00bfff84 	movi	r2,-2
   20088:	1884703a 	and	r2,r3,r2
   2008c:	1001703a 	wrctl	status,r2
  return context;
   20090:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   20094:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   20098:	e0bff317 	ldw	r2,-52(fp)
   2009c:	100890fa 	slli	r4,r2,3
   200a0:	e0fff117 	ldw	r3,-60(fp)
   200a4:	008000b4 	movhi	r2,2
   200a8:	2085883a 	add	r2,r4,r2
   200ac:	10d76915 	stw	r3,23972(r2)
    alt_irq[id].context = context;
   200b0:	e0bff317 	ldw	r2,-52(fp)
   200b4:	100890fa 	slli	r4,r2,3
   200b8:	e0fff217 	ldw	r3,-56(fp)
   200bc:	008000b4 	movhi	r2,2
   200c0:	2085883a 	add	r2,r4,r2
   200c4:	10d76a15 	stw	r3,23976(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   200c8:	e0bff117 	ldw	r2,-60(fp)
   200cc:	10001a26 	beq	r2,zero,20138 <alt_irq_register+0xec>
   200d0:	e0bff317 	ldw	r2,-52(fp)
   200d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   200d8:	0005303a 	rdctl	r2,status
   200dc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   200e0:	e0fffb17 	ldw	r3,-20(fp)
   200e4:	00bfff84 	movi	r2,-2
   200e8:	1884703a 	and	r2,r3,r2
   200ec:	1001703a 	wrctl	status,r2
  return context;
   200f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   200f4:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   200f8:	00c00044 	movi	r3,1
   200fc:	e0bffc17 	ldw	r2,-16(fp)
   20100:	1884983a 	sll	r2,r3,r2
   20104:	1007883a 	mov	r3,r2
   20108:	d0a75717 	ldw	r2,-25252(gp)
   2010c:	1884b03a 	or	r2,r3,r2
   20110:	d0a75715 	stw	r2,-25252(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20114:	d0a75717 	ldw	r2,-25252(gp)
   20118:	100170fa 	wrctl	ienable,r2
   2011c:	e0bffa17 	ldw	r2,-24(fp)
   20120:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   20124:	e0bff917 	ldw	r2,-28(fp)
   20128:	1001703a 	wrctl	status,r2
}
   2012c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   20130:	0005883a 	mov	r2,zero
   20134:	00001a06 	br	201a0 <alt_irq_register+0x154>
   20138:	e0bff317 	ldw	r2,-52(fp)
   2013c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   20140:	0005303a 	rdctl	r2,status
   20144:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20148:	e0fff717 	ldw	r3,-36(fp)
   2014c:	00bfff84 	movi	r2,-2
   20150:	1884703a 	and	r2,r3,r2
   20154:	1001703a 	wrctl	status,r2
  return context;
   20158:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   2015c:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   20160:	00c00044 	movi	r3,1
   20164:	e0bff817 	ldw	r2,-32(fp)
   20168:	1884983a 	sll	r2,r3,r2
   2016c:	0084303a 	nor	r2,zero,r2
   20170:	1007883a 	mov	r3,r2
   20174:	d0a75717 	ldw	r2,-25252(gp)
   20178:	1884703a 	and	r2,r3,r2
   2017c:	d0a75715 	stw	r2,-25252(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20180:	d0a75717 	ldw	r2,-25252(gp)
   20184:	100170fa 	wrctl	ienable,r2
   20188:	e0bff617 	ldw	r2,-40(fp)
   2018c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   20190:	e0bff517 	ldw	r2,-44(fp)
   20194:	1001703a 	wrctl	status,r2
}
   20198:	0001883a 	nop
  return 0;
   2019c:	0005883a 	mov	r2,zero
   201a0:	e0bfff15 	stw	r2,-4(fp)
   201a4:	e0bffe17 	ldw	r2,-8(fp)
   201a8:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   201ac:	e0bff417 	ldw	r2,-48(fp)
   201b0:	1001703a 	wrctl	status,r2
}
   201b4:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   201b8:	e0bfff17 	ldw	r2,-4(fp)
}
   201bc:	e037883a 	mov	sp,fp
   201c0:	df000017 	ldw	fp,0(sp)
   201c4:	dec00104 	addi	sp,sp,4
   201c8:	f800283a 	ret

000201cc <alt_get_errno>:
{
   201cc:	defffe04 	addi	sp,sp,-8
   201d0:	dfc00115 	stw	ra,4(sp)
   201d4:	df000015 	stw	fp,0(sp)
   201d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   201dc:	d0a00a17 	ldw	r2,-32728(gp)
   201e0:	10000326 	beq	r2,zero,201f0 <alt_get_errno+0x24>
   201e4:	d0a00a17 	ldw	r2,-32728(gp)
   201e8:	103ee83a 	callr	r2
   201ec:	00000106 	br	201f4 <alt_get_errno+0x28>
   201f0:	d0a74504 	addi	r2,gp,-25324
}
   201f4:	e037883a 	mov	sp,fp
   201f8:	dfc00117 	ldw	ra,4(sp)
   201fc:	df000017 	ldw	fp,0(sp)
   20200:	dec00204 	addi	sp,sp,8
   20204:	f800283a 	ret

00020208 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   20208:	defffd04 	addi	sp,sp,-12
   2020c:	df000215 	stw	fp,8(sp)
   20210:	df000204 	addi	fp,sp,8
   20214:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   20218:	e0bffe17 	ldw	r2,-8(fp)
   2021c:	10800217 	ldw	r2,8(r2)
   20220:	10d00034 	orhi	r3,r2,16384
   20224:	e0bffe17 	ldw	r2,-8(fp)
   20228:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2022c:	e03fff15 	stw	zero,-4(fp)
   20230:	00001a06 	br	2029c <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   20234:	e0bfff17 	ldw	r2,-4(fp)
   20238:	10c00324 	muli	r3,r2,12
   2023c:	008000b4 	movhi	r2,2
   20240:	1885883a 	add	r2,r3,r2
   20244:	10c9f817 	ldw	r3,10208(r2)
   20248:	e0bffe17 	ldw	r2,-8(fp)
   2024c:	10800017 	ldw	r2,0(r2)
   20250:	18800f1e 	bne	r3,r2,20290 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   20254:	e0bfff17 	ldw	r2,-4(fp)
   20258:	10c00324 	muli	r3,r2,12
   2025c:	008000b4 	movhi	r2,2
   20260:	1885883a 	add	r2,r3,r2
   20264:	1089fa17 	ldw	r2,10216(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   20268:	1000090e 	bge	r2,zero,20290 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   2026c:	e0bfff17 	ldw	r2,-4(fp)
   20270:	10c00324 	muli	r3,r2,12
   20274:	008000b4 	movhi	r2,2
   20278:	1089f804 	addi	r2,r2,10208
   2027c:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   20280:	e0fffe17 	ldw	r3,-8(fp)
   20284:	18800226 	beq	r3,r2,20290 <alt_file_locked+0x88>
    {
      return -EACCES;
   20288:	00bffcc4 	movi	r2,-13
   2028c:	00000806 	br	202b0 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   20290:	e0bfff17 	ldw	r2,-4(fp)
   20294:	10800044 	addi	r2,r2,1
   20298:	e0bfff15 	stw	r2,-4(fp)
   2029c:	d0a00917 	ldw	r2,-32732(gp)
   202a0:	1007883a 	mov	r3,r2
   202a4:	e0bfff17 	ldw	r2,-4(fp)
   202a8:	18bfe22e 	bgeu	r3,r2,20234 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   202ac:	0005883a 	mov	r2,zero
}
   202b0:	e037883a 	mov	sp,fp
   202b4:	df000017 	ldw	fp,0(sp)
   202b8:	dec00104 	addi	sp,sp,4
   202bc:	f800283a 	ret

000202c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   202c0:	defff604 	addi	sp,sp,-40
   202c4:	dfc00915 	stw	ra,36(sp)
   202c8:	df000815 	stw	fp,32(sp)
   202cc:	df000804 	addi	fp,sp,32
   202d0:	e13ffa15 	stw	r4,-24(fp)
   202d4:	e17ff915 	stw	r5,-28(fp)
   202d8:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   202dc:	00bfffc4 	movi	r2,-1
   202e0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   202e4:	00bffb44 	movi	r2,-19
   202e8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   202ec:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   202f0:	d1600704 	addi	r5,gp,-32740
   202f4:	e13ffa17 	ldw	r4,-24(fp)
   202f8:	001fe5c0 	call	1fe5c <alt_find_dev>
   202fc:	e0bfff15 	stw	r2,-4(fp)
   20300:	e0bfff17 	ldw	r2,-4(fp)
   20304:	1000051e 	bne	r2,zero,2031c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   20308:	e13ffa17 	ldw	r4,-24(fp)
   2030c:	00206080 	call	20608 <alt_find_file>
   20310:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   20314:	00800044 	movi	r2,1
   20318:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2031c:	e0bfff17 	ldw	r2,-4(fp)
   20320:	10002926 	beq	r2,zero,203c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   20324:	e13fff17 	ldw	r4,-4(fp)
   20328:	00207100 	call	20710 <alt_get_fd>
   2032c:	e0bffe15 	stw	r2,-8(fp)
   20330:	e0bffe17 	ldw	r2,-8(fp)
   20334:	1000030e 	bge	r2,zero,20344 <open+0x84>
    {
      status = index;
   20338:	e0bffe17 	ldw	r2,-8(fp)
   2033c:	e0bffd15 	stw	r2,-12(fp)
   20340:	00002306 	br	203d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   20344:	e0bffe17 	ldw	r2,-8(fp)
   20348:	10c00324 	muli	r3,r2,12
   2034c:	008000b4 	movhi	r2,2
   20350:	1089f804 	addi	r2,r2,10208
   20354:	1885883a 	add	r2,r3,r2
   20358:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2035c:	e0fff917 	ldw	r3,-28(fp)
   20360:	00900034 	movhi	r2,16384
   20364:	10bfffc4 	addi	r2,r2,-1
   20368:	1886703a 	and	r3,r3,r2
   2036c:	e0bffb17 	ldw	r2,-20(fp)
   20370:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   20374:	e0bffc17 	ldw	r2,-16(fp)
   20378:	1000051e 	bne	r2,zero,20390 <open+0xd0>
   2037c:	e13ffb17 	ldw	r4,-20(fp)
   20380:	00202080 	call	20208 <alt_file_locked>
   20384:	e0bffd15 	stw	r2,-12(fp)
   20388:	e0bffd17 	ldw	r2,-12(fp)
   2038c:	10001016 	blt	r2,zero,203d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   20390:	e0bfff17 	ldw	r2,-4(fp)
   20394:	10800317 	ldw	r2,12(r2)
   20398:	10000826 	beq	r2,zero,203bc <open+0xfc>
   2039c:	e0bfff17 	ldw	r2,-4(fp)
   203a0:	10800317 	ldw	r2,12(r2)
   203a4:	e1fff817 	ldw	r7,-32(fp)
   203a8:	e1bff917 	ldw	r6,-28(fp)
   203ac:	e17ffa17 	ldw	r5,-24(fp)
   203b0:	e13ffb17 	ldw	r4,-20(fp)
   203b4:	103ee83a 	callr	r2
   203b8:	00000106 	br	203c0 <open+0x100>
   203bc:	0005883a 	mov	r2,zero
   203c0:	e0bffd15 	stw	r2,-12(fp)
   203c4:	00000206 	br	203d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   203c8:	00bffb44 	movi	r2,-19
   203cc:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   203d0:	e0bffd17 	ldw	r2,-12(fp)
   203d4:	1000090e 	bge	r2,zero,203fc <open+0x13c>
  {
    alt_release_fd (index);  
   203d8:	e13ffe17 	ldw	r4,-8(fp)
   203dc:	001a5d00 	call	1a5d0 <alt_release_fd>
    ALT_ERRNO = -status;
   203e0:	00201cc0 	call	201cc <alt_get_errno>
   203e4:	1007883a 	mov	r3,r2
   203e8:	e0bffd17 	ldw	r2,-12(fp)
   203ec:	0085c83a 	sub	r2,zero,r2
   203f0:	18800015 	stw	r2,0(r3)
    return -1;
   203f4:	00bfffc4 	movi	r2,-1
   203f8:	00000106 	br	20400 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   203fc:	e0bffe17 	ldw	r2,-8(fp)
}
   20400:	e037883a 	mov	sp,fp
   20404:	dfc00117 	ldw	ra,4(sp)
   20408:	df000017 	ldw	fp,0(sp)
   2040c:	dec00204 	addi	sp,sp,8
   20410:	f800283a 	ret

00020414 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   20414:	defffa04 	addi	sp,sp,-24
   20418:	df000515 	stw	fp,20(sp)
   2041c:	df000504 	addi	fp,sp,20
   20420:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   20424:	0005303a 	rdctl	r2,status
   20428:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2042c:	e0fffc17 	ldw	r3,-16(fp)
   20430:	00bfff84 	movi	r2,-2
   20434:	1884703a 	and	r2,r3,r2
   20438:	1001703a 	wrctl	status,r2
  return context;
   2043c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   20440:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   20444:	e0bffb17 	ldw	r2,-20(fp)
   20448:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2044c:	e0bffd17 	ldw	r2,-12(fp)
   20450:	10800017 	ldw	r2,0(r2)
   20454:	e0fffd17 	ldw	r3,-12(fp)
   20458:	18c00117 	ldw	r3,4(r3)
   2045c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   20460:	e0bffd17 	ldw	r2,-12(fp)
   20464:	10800117 	ldw	r2,4(r2)
   20468:	e0fffd17 	ldw	r3,-12(fp)
   2046c:	18c00017 	ldw	r3,0(r3)
   20470:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   20474:	e0bffd17 	ldw	r2,-12(fp)
   20478:	e0fffd17 	ldw	r3,-12(fp)
   2047c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   20480:	e0bffd17 	ldw	r2,-12(fp)
   20484:	e0fffd17 	ldw	r3,-12(fp)
   20488:	10c00015 	stw	r3,0(r2)
} 
   2048c:	0001883a 	nop
   20490:	e0bfff17 	ldw	r2,-4(fp)
   20494:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   20498:	e0bffe17 	ldw	r2,-8(fp)
   2049c:	1001703a 	wrctl	status,r2
}
   204a0:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   204a4:	0001883a 	nop
   204a8:	e037883a 	mov	sp,fp
   204ac:	df000017 	ldw	fp,0(sp)
   204b0:	dec00104 	addi	sp,sp,4
   204b4:	f800283a 	ret

000204b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   204b8:	defff904 	addi	sp,sp,-28
   204bc:	dfc00615 	stw	ra,24(sp)
   204c0:	df000515 	stw	fp,20(sp)
   204c4:	dc400415 	stw	r17,16(sp)
   204c8:	dc000315 	stw	r16,12(sp)
   204cc:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   204d0:	d0a00d17 	ldw	r2,-32716(gp)
   204d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   204d8:	d1275917 	ldw	r4,-25244(gp)
   204dc:	d1675a17 	ldw	r5,-25240(gp)
   204e0:	01800044 	movi	r6,1
   204e4:	000f883a 	mov	r7,zero
   204e8:	2185883a 	add	r2,r4,r6
   204ec:	1111803a 	cmpltu	r8,r2,r4
   204f0:	29c7883a 	add	r3,r5,r7
   204f4:	40c9883a 	add	r4,r8,r3
   204f8:	2007883a 	mov	r3,r4
   204fc:	1009883a 	mov	r4,r2
   20500:	180b883a 	mov	r5,r3
   20504:	d1275915 	stw	r4,-25244(gp)
   20508:	d1675a15 	stw	r5,-25240(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2050c:	00002906 	br	205b4 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   20510:	e0bffd17 	ldw	r2,-12(fp)
   20514:	10800017 	ldw	r2,0(r2)
   20518:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   2051c:	e13ffd17 	ldw	r4,-12(fp)
   20520:	20800217 	ldw	r2,8(r4)
   20524:	20c00317 	ldw	r3,12(r4)
   20528:	d1275917 	ldw	r4,-25244(gp)
   2052c:	d1675a17 	ldw	r5,-25240(gp)
   20530:	28c01e36 	bltu	r5,r3,205ac <alt_tick+0xf4>
   20534:	1940011e 	bne	r3,r5,2053c <alt_tick+0x84>
   20538:	20801c36 	bltu	r4,r2,205ac <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   2053c:	e0bffd17 	ldw	r2,-12(fp)
   20540:	10800417 	ldw	r2,16(r2)
   20544:	e0fffd17 	ldw	r3,-12(fp)
   20548:	18c00517 	ldw	r3,20(r3)
   2054c:	1809883a 	mov	r4,r3
   20550:	103ee83a 	callr	r2
   20554:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   20558:	e0bffb17 	ldw	r2,-20(fp)
   2055c:	1000031e 	bne	r2,zero,2056c <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   20560:	e13ffd17 	ldw	r4,-12(fp)
   20564:	00204140 	call	20414 <alt_alarm_stop>
   20568:	00001006 	br	205ac <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   2056c:	e0bffd17 	ldw	r2,-12(fp)
   20570:	11000217 	ldw	r4,8(r2)
   20574:	11400317 	ldw	r5,12(r2)
   20578:	e0bffb17 	ldw	r2,-20(fp)
   2057c:	1021883a 	mov	r16,r2
   20580:	0023883a 	mov	r17,zero
   20584:	2405883a 	add	r2,r4,r16
   20588:	110d803a 	cmpltu	r6,r2,r4
   2058c:	2c47883a 	add	r3,r5,r17
   20590:	30c9883a 	add	r4,r6,r3
   20594:	2007883a 	mov	r3,r4
   20598:	1009883a 	mov	r4,r2
   2059c:	180b883a 	mov	r5,r3
   205a0:	e0bffd17 	ldw	r2,-12(fp)
   205a4:	11000215 	stw	r4,8(r2)
   205a8:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   205ac:	e0bffc17 	ldw	r2,-16(fp)
   205b0:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   205b4:	e0fffd17 	ldw	r3,-12(fp)
   205b8:	d0a00d04 	addi	r2,gp,-32716
   205bc:	18bfd41e 	bne	r3,r2,20510 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   205c0:	0001883a 	nop
}
   205c4:	0001883a 	nop
   205c8:	e6fffe04 	addi	sp,fp,-8
   205cc:	dfc00317 	ldw	ra,12(sp)
   205d0:	df000217 	ldw	fp,8(sp)
   205d4:	dc400117 	ldw	r17,4(sp)
   205d8:	dc000017 	ldw	r16,0(sp)
   205dc:	dec00404 	addi	sp,sp,16
   205e0:	f800283a 	ret

000205e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   205e4:	deffff04 	addi	sp,sp,-4
   205e8:	df000015 	stw	fp,0(sp)
   205ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   205f0:	000170fa 	wrctl	ienable,zero
}
   205f4:	0001883a 	nop
   205f8:	e037883a 	mov	sp,fp
   205fc:	df000017 	ldw	fp,0(sp)
   20600:	dec00104 	addi	sp,sp,4
   20604:	f800283a 	ret

00020608 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   20608:	defffb04 	addi	sp,sp,-20
   2060c:	dfc00415 	stw	ra,16(sp)
   20610:	df000315 	stw	fp,12(sp)
   20614:	df000304 	addi	fp,sp,12
   20618:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2061c:	d0a00517 	ldw	r2,-32748(gp)
   20620:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   20624:	00003106 	br	206ec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   20628:	e0bfff17 	ldw	r2,-4(fp)
   2062c:	10800217 	ldw	r2,8(r2)
   20630:	1009883a 	mov	r4,r2
   20634:	000d6fc0 	call	d6fc <strlen>
   20638:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2063c:	e0bfff17 	ldw	r2,-4(fp)
   20640:	10c00217 	ldw	r3,8(r2)
   20644:	e0bffe17 	ldw	r2,-8(fp)
   20648:	10bfffc4 	addi	r2,r2,-1
   2064c:	1885883a 	add	r2,r3,r2
   20650:	10800003 	ldbu	r2,0(r2)
   20654:	10803fcc 	andi	r2,r2,255
   20658:	1080201c 	xori	r2,r2,128
   2065c:	10bfe004 	addi	r2,r2,-128
   20660:	10800bd8 	cmpnei	r2,r2,47
   20664:	1000031e 	bne	r2,zero,20674 <alt_find_file+0x6c>
    {
      len -= 1;
   20668:	e0bffe17 	ldw	r2,-8(fp)
   2066c:	10bfffc4 	addi	r2,r2,-1
   20670:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   20674:	e0bffe17 	ldw	r2,-8(fp)
   20678:	e0fffd17 	ldw	r3,-12(fp)
   2067c:	1885883a 	add	r2,r3,r2
   20680:	10800003 	ldbu	r2,0(r2)
   20684:	10803fcc 	andi	r2,r2,255
   20688:	1080201c 	xori	r2,r2,128
   2068c:	10bfe004 	addi	r2,r2,-128
   20690:	10800be0 	cmpeqi	r2,r2,47
   20694:	1000081e 	bne	r2,zero,206b8 <alt_find_file+0xb0>
   20698:	e0bffe17 	ldw	r2,-8(fp)
   2069c:	e0fffd17 	ldw	r3,-12(fp)
   206a0:	1885883a 	add	r2,r3,r2
   206a4:	10800003 	ldbu	r2,0(r2)
   206a8:	10803fcc 	andi	r2,r2,255
   206ac:	1080201c 	xori	r2,r2,128
   206b0:	10bfe004 	addi	r2,r2,-128
   206b4:	10000a1e 	bne	r2,zero,206e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   206b8:	e0bfff17 	ldw	r2,-4(fp)
   206bc:	10800217 	ldw	r2,8(r2)
   206c0:	e0fffe17 	ldw	r3,-8(fp)
   206c4:	180d883a 	mov	r6,r3
   206c8:	e17ffd17 	ldw	r5,-12(fp)
   206cc:	1009883a 	mov	r4,r2
   206d0:	00209200 	call	20920 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   206d4:	1000021e 	bne	r2,zero,206e0 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   206d8:	e0bfff17 	ldw	r2,-4(fp)
   206dc:	00000706 	br	206fc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   206e0:	e0bfff17 	ldw	r2,-4(fp)
   206e4:	10800017 	ldw	r2,0(r2)
   206e8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   206ec:	e0ffff17 	ldw	r3,-4(fp)
   206f0:	d0a00504 	addi	r2,gp,-32748
   206f4:	18bfcc1e 	bne	r3,r2,20628 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   206f8:	0005883a 	mov	r2,zero
}
   206fc:	e037883a 	mov	sp,fp
   20700:	dfc00117 	ldw	ra,4(sp)
   20704:	df000017 	ldw	fp,0(sp)
   20708:	dec00204 	addi	sp,sp,8
   2070c:	f800283a 	ret

00020710 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   20710:	defffc04 	addi	sp,sp,-16
   20714:	df000315 	stw	fp,12(sp)
   20718:	df000304 	addi	fp,sp,12
   2071c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   20720:	00bffa04 	movi	r2,-24
   20724:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   20728:	e03fff15 	stw	zero,-4(fp)
   2072c:	00001706 	br	2078c <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   20730:	e0bfff17 	ldw	r2,-4(fp)
   20734:	10c00324 	muli	r3,r2,12
   20738:	008000b4 	movhi	r2,2
   2073c:	1885883a 	add	r2,r3,r2
   20740:	1089f817 	ldw	r2,10208(r2)
   20744:	10000e1e 	bne	r2,zero,20780 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   20748:	e0bfff17 	ldw	r2,-4(fp)
   2074c:	11000324 	muli	r4,r2,12
   20750:	e0fffd17 	ldw	r3,-12(fp)
   20754:	008000b4 	movhi	r2,2
   20758:	2085883a 	add	r2,r4,r2
   2075c:	10c9f815 	stw	r3,10208(r2)
      if (i > alt_max_fd)
   20760:	d0e00917 	ldw	r3,-32732(gp)
   20764:	e0bfff17 	ldw	r2,-4(fp)
   20768:	1880020e 	bge	r3,r2,20774 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   2076c:	e0bfff17 	ldw	r2,-4(fp)
   20770:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   20774:	e0bfff17 	ldw	r2,-4(fp)
   20778:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2077c:	00000706 	br	2079c <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   20780:	e0bfff17 	ldw	r2,-4(fp)
   20784:	10800044 	addi	r2,r2,1
   20788:	e0bfff15 	stw	r2,-4(fp)
   2078c:	e0bfff17 	ldw	r2,-4(fp)
   20790:	10800810 	cmplti	r2,r2,32
   20794:	103fe61e 	bne	r2,zero,20730 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   20798:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2079c:	e0bffe17 	ldw	r2,-8(fp)
}
   207a0:	e037883a 	mov	sp,fp
   207a4:	df000017 	ldw	fp,0(sp)
   207a8:	dec00104 	addi	sp,sp,4
   207ac:	f800283a 	ret

000207b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   207b0:	defffb04 	addi	sp,sp,-20
   207b4:	df000415 	stw	fp,16(sp)
   207b8:	df000404 	addi	fp,sp,16
   207bc:	e13ffd15 	stw	r4,-12(fp)
   207c0:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   207c4:	e0bffc17 	ldw	r2,-16(fp)
   207c8:	10840070 	cmpltui	r2,r2,4097
   207cc:	1000021e 	bne	r2,zero,207d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   207d0:	00840004 	movi	r2,4096
   207d4:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   207d8:	e0fffd17 	ldw	r3,-12(fp)
   207dc:	e0bffc17 	ldw	r2,-16(fp)
   207e0:	1885883a 	add	r2,r3,r2
   207e4:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   207e8:	e0bffd17 	ldw	r2,-12(fp)
   207ec:	e0bfff15 	stw	r2,-4(fp)
   207f0:	00000506 	br	20808 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   207f4:	e0bfff17 	ldw	r2,-4(fp)
   207f8:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   207fc:	e0bfff17 	ldw	r2,-4(fp)
   20800:	10800804 	addi	r2,r2,32
   20804:	e0bfff15 	stw	r2,-4(fp)
   20808:	e0ffff17 	ldw	r3,-4(fp)
   2080c:	e0bffe17 	ldw	r2,-8(fp)
   20810:	18bff836 	bltu	r3,r2,207f4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   20814:	e0bffd17 	ldw	r2,-12(fp)
   20818:	108007cc 	andi	r2,r2,31
   2081c:	10000226 	beq	r2,zero,20828 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   20820:	e0bfff17 	ldw	r2,-4(fp)
   20824:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   20828:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2082c:	0001883a 	nop
   20830:	e037883a 	mov	sp,fp
   20834:	df000017 	ldw	fp,0(sp)
   20838:	dec00104 	addi	sp,sp,4
   2083c:	f800283a 	ret

00020840 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   20840:	defffe04 	addi	sp,sp,-8
   20844:	df000115 	stw	fp,4(sp)
   20848:	df000104 	addi	fp,sp,4
   2084c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   20850:	e0bfff17 	ldw	r2,-4(fp)
   20854:	10bffe84 	addi	r2,r2,-6
   20858:	10c00428 	cmpgeui	r3,r2,16
   2085c:	1800191e 	bne	r3,zero,208c4 <alt_exception_cause_generated_bad_addr+0x84>
   20860:	100690ba 	slli	r3,r2,2
   20864:	008000b4 	movhi	r2,2
   20868:	1885883a 	add	r2,r3,r2
   2086c:	10821d17 	ldw	r2,2164(r2)
   20870:	1000683a 	jmp	r2
   20874:	000208b4 	movhi	zero,2082
   20878:	000208b4 	movhi	zero,2082
   2087c:	000208c4 	movi	zero,2083
   20880:	000208c4 	movi	zero,2083
   20884:	000208c4 	movi	zero,2083
   20888:	000208b4 	movhi	zero,2082
   2088c:	000208bc 	xorhi	zero,zero,2082
   20890:	000208c4 	movi	zero,2083
   20894:	000208b4 	movhi	zero,2082
   20898:	000208b4 	movhi	zero,2082
   2089c:	000208c4 	movi	zero,2083
   208a0:	000208b4 	movhi	zero,2082
   208a4:	000208bc 	xorhi	zero,zero,2082
   208a8:	000208c4 	movi	zero,2083
   208ac:	000208c4 	movi	zero,2083
   208b0:	000208b4 	movhi	zero,2082
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   208b4:	00800044 	movi	r2,1
   208b8:	00000306 	br	208c8 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   208bc:	0005883a 	mov	r2,zero
   208c0:	00000106 	br	208c8 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   208c4:	0005883a 	mov	r2,zero
  }
}
   208c8:	e037883a 	mov	sp,fp
   208cc:	df000017 	ldw	fp,0(sp)
   208d0:	dec00104 	addi	sp,sp,4
   208d4:	f800283a 	ret

000208d8 <atexit>:
   208d8:	200b883a 	mov	r5,r4
   208dc:	000f883a 	mov	r7,zero
   208e0:	000d883a 	mov	r6,zero
   208e4:	0009883a 	mov	r4,zero
   208e8:	00209b81 	jmpi	209b8 <__register_exitproc>

000208ec <exit>:
   208ec:	defffe04 	addi	sp,sp,-8
   208f0:	000b883a 	mov	r5,zero
   208f4:	dc000015 	stw	r16,0(sp)
   208f8:	dfc00115 	stw	ra,4(sp)
   208fc:	2021883a 	mov	r16,r4
   20900:	0020a480 	call	20a48 <__call_exitprocs>
   20904:	008000b4 	movhi	r2,2
   20908:	110ea917 	ldw	r4,15012(r2)
   2090c:	20800f17 	ldw	r2,60(r4)
   20910:	10000126 	beq	r2,zero,20918 <exit+0x2c>
   20914:	103ee83a 	callr	r2
   20918:	8009883a 	mov	r4,r16
   2091c:	0019bf00 	call	19bf0 <_exit>

00020920 <memcmp>:
   20920:	30800130 	cmpltui	r2,r6,4
   20924:	10000b1e 	bne	r2,zero,20954 <memcmp+0x34>
   20928:	2144b03a 	or	r2,r4,r5
   2092c:	108000cc 	andi	r2,r2,3
   20930:	1000171e 	bne	r2,zero,20990 <memcmp+0x70>
   20934:	20c00017 	ldw	r3,0(r4)
   20938:	28800017 	ldw	r2,0(r5)
   2093c:	1880141e 	bne	r3,r2,20990 <memcmp+0x70>
   20940:	31bfff04 	addi	r6,r6,-4
   20944:	30800128 	cmpgeui	r2,r6,4
   20948:	21000104 	addi	r4,r4,4
   2094c:	29400104 	addi	r5,r5,4
   20950:	103ff81e 	bne	r2,zero,20934 <memcmp+0x14>
   20954:	30bfffc4 	addi	r2,r6,-1
   20958:	30000b26 	beq	r6,zero,20988 <memcmp+0x68>
   2095c:	11800044 	addi	r6,r2,1
   20960:	218d883a 	add	r6,r4,r6
   20964:	00000106 	br	2096c <memcmp+0x4c>
   20968:	21800726 	beq	r4,r6,20988 <memcmp+0x68>
   2096c:	20800003 	ldbu	r2,0(r4)
   20970:	28c00003 	ldbu	r3,0(r5)
   20974:	21000044 	addi	r4,r4,1
   20978:	29400044 	addi	r5,r5,1
   2097c:	10fffa26 	beq	r2,r3,20968 <memcmp+0x48>
   20980:	10c5c83a 	sub	r2,r2,r3
   20984:	f800283a 	ret
   20988:	0005883a 	mov	r2,zero
   2098c:	f800283a 	ret
   20990:	30bfffc4 	addi	r2,r6,-1
   20994:	003ff106 	br	2095c <memcmp+0x3c>

00020998 <_putchar_r>:
   20998:	21800217 	ldw	r6,8(r4)
   2099c:	0020b681 	jmpi	20b68 <_putc_r>

000209a0 <putchar>:
   209a0:	008000b4 	movhi	r2,2
   209a4:	108eaa17 	ldw	r2,15016(r2)
   209a8:	200b883a 	mov	r5,r4
   209ac:	11800217 	ldw	r6,8(r2)
   209b0:	1009883a 	mov	r4,r2
   209b4:	0020b681 	jmpi	20b68 <_putc_r>

000209b8 <__register_exitproc>:
   209b8:	008000b4 	movhi	r2,2
   209bc:	10cea917 	ldw	r3,15012(r2)
   209c0:	18805217 	ldw	r2,328(r3)
   209c4:	10001726 	beq	r2,zero,20a24 <__register_exitproc+0x6c>
   209c8:	10c00117 	ldw	r3,4(r2)
   209cc:	1a000808 	cmpgei	r8,r3,32
   209d0:	40001b1e 	bne	r8,zero,20a40 <__register_exitproc+0x88>
   209d4:	20000b26 	beq	r4,zero,20a04 <__register_exitproc+0x4c>
   209d8:	181090ba 	slli	r8,r3,2
   209dc:	02400044 	movi	r9,1
   209e0:	48d2983a 	sll	r9,r9,r3
   209e4:	1211883a 	add	r8,r2,r8
   209e8:	41802215 	stw	r6,136(r8)
   209ec:	11806217 	ldw	r6,392(r2)
   209f0:	21000098 	cmpnei	r4,r4,2
   209f4:	324cb03a 	or	r6,r6,r9
   209f8:	11806215 	stw	r6,392(r2)
   209fc:	41c04215 	stw	r7,264(r8)
   20a00:	20000b26 	beq	r4,zero,20a30 <__register_exitproc+0x78>
   20a04:	19000084 	addi	r4,r3,2
   20a08:	200890ba 	slli	r4,r4,2
   20a0c:	18c00044 	addi	r3,r3,1
   20a10:	10c00115 	stw	r3,4(r2)
   20a14:	1105883a 	add	r2,r2,r4
   20a18:	11400015 	stw	r5,0(r2)
   20a1c:	0005883a 	mov	r2,zero
   20a20:	f800283a 	ret
   20a24:	18805304 	addi	r2,r3,332
   20a28:	18805215 	stw	r2,328(r3)
   20a2c:	003fe606 	br	209c8 <__register_exitproc+0x10>
   20a30:	11006317 	ldw	r4,396(r2)
   20a34:	2252b03a 	or	r9,r4,r9
   20a38:	12406315 	stw	r9,396(r2)
   20a3c:	003ff106 	br	20a04 <__register_exitproc+0x4c>
   20a40:	00bfffc4 	movi	r2,-1
   20a44:	f800283a 	ret

00020a48 <__call_exitprocs>:
   20a48:	defff704 	addi	sp,sp,-36
   20a4c:	008000b4 	movhi	r2,2
   20a50:	dcc00315 	stw	r19,12(sp)
   20a54:	14cea917 	ldw	r19,15012(r2)
   20a58:	dc800215 	stw	r18,8(sp)
   20a5c:	dfc00815 	stw	ra,32(sp)
   20a60:	9c805217 	ldw	r18,328(r19)
   20a64:	ddc00715 	stw	r23,28(sp)
   20a68:	dd800615 	stw	r22,24(sp)
   20a6c:	dd400515 	stw	r21,20(sp)
   20a70:	dd000415 	stw	r20,16(sp)
   20a74:	dc400115 	stw	r17,4(sp)
   20a78:	dc000015 	stw	r16,0(sp)
   20a7c:	90001026 	beq	r18,zero,20ac0 <__call_exitprocs+0x78>
   20a80:	202b883a 	mov	r21,r4
   20a84:	282d883a 	mov	r22,r5
   20a88:	05000044 	movi	r20,1
   20a8c:	94000117 	ldw	r16,4(r18)
   20a90:	847fffc4 	addi	r17,r16,-1
   20a94:	88000a16 	blt	r17,zero,20ac0 <__call_exitprocs+0x78>
   20a98:	84000044 	addi	r16,r16,1
   20a9c:	802090ba 	slli	r16,r16,2
   20aa0:	9421883a 	add	r16,r18,r16
   20aa4:	b0001126 	beq	r22,zero,20aec <__call_exitprocs+0xa4>
   20aa8:	80804017 	ldw	r2,256(r16)
   20aac:	15800f26 	beq	r2,r22,20aec <__call_exitprocs+0xa4>
   20ab0:	8c7fffc4 	addi	r17,r17,-1
   20ab4:	88bfffd8 	cmpnei	r2,r17,-1
   20ab8:	843fff04 	addi	r16,r16,-4
   20abc:	103ff91e 	bne	r2,zero,20aa4 <__call_exitprocs+0x5c>
   20ac0:	dfc00817 	ldw	ra,32(sp)
   20ac4:	ddc00717 	ldw	r23,28(sp)
   20ac8:	dd800617 	ldw	r22,24(sp)
   20acc:	dd400517 	ldw	r21,20(sp)
   20ad0:	dd000417 	ldw	r20,16(sp)
   20ad4:	dcc00317 	ldw	r19,12(sp)
   20ad8:	dc800217 	ldw	r18,8(sp)
   20adc:	dc400117 	ldw	r17,4(sp)
   20ae0:	dc000017 	ldw	r16,0(sp)
   20ae4:	dec00904 	addi	sp,sp,36
   20ae8:	f800283a 	ret
   20aec:	90800117 	ldw	r2,4(r18)
   20af0:	81800017 	ldw	r6,0(r16)
   20af4:	10bfffc4 	addi	r2,r2,-1
   20af8:	14401726 	beq	r2,r17,20b58 <__call_exitprocs+0x110>
   20afc:	80000015 	stw	zero,0(r16)
   20b00:	303feb26 	beq	r6,zero,20ab0 <__call_exitprocs+0x68>
   20b04:	a446983a 	sll	r3,r20,r17
   20b08:	90806217 	ldw	r2,392(r18)
   20b0c:	95c00117 	ldw	r23,4(r18)
   20b10:	1884703a 	and	r2,r3,r2
   20b14:	1000081e 	bne	r2,zero,20b38 <__call_exitprocs+0xf0>
   20b18:	303ee83a 	callr	r6
   20b1c:	90c00117 	ldw	r3,4(r18)
   20b20:	98805217 	ldw	r2,328(r19)
   20b24:	1dc0011e 	bne	r3,r23,20b2c <__call_exitprocs+0xe4>
   20b28:	90bfe126 	beq	r18,r2,20ab0 <__call_exitprocs+0x68>
   20b2c:	103fe426 	beq	r2,zero,20ac0 <__call_exitprocs+0x78>
   20b30:	1025883a 	mov	r18,r2
   20b34:	003fd506 	br	20a8c <__call_exitprocs+0x44>
   20b38:	90806317 	ldw	r2,396(r18)
   20b3c:	81002017 	ldw	r4,128(r16)
   20b40:	1886703a 	and	r3,r3,r2
   20b44:	1800061e 	bne	r3,zero,20b60 <__call_exitprocs+0x118>
   20b48:	200b883a 	mov	r5,r4
   20b4c:	a809883a 	mov	r4,r21
   20b50:	303ee83a 	callr	r6
   20b54:	003ff106 	br	20b1c <__call_exitprocs+0xd4>
   20b58:	94400115 	stw	r17,4(r18)
   20b5c:	003fe806 	br	20b00 <__call_exitprocs+0xb8>
   20b60:	303ee83a 	callr	r6
   20b64:	003fed06 	br	20b1c <__call_exitprocs+0xd4>

00020b68 <_putc_r>:
   20b68:	defffc04 	addi	sp,sp,-16
   20b6c:	dc400215 	stw	r17,8(sp)
   20b70:	dfc00315 	stw	ra,12(sp)
   20b74:	2023883a 	mov	r17,r4
   20b78:	20000226 	beq	r4,zero,20b84 <_putc_r+0x1c>
   20b7c:	20800e17 	ldw	r2,56(r4)
   20b80:	10000e26 	beq	r2,zero,20bbc <_putc_r+0x54>
   20b84:	30800217 	ldw	r2,8(r6)
   20b88:	10bfffc4 	addi	r2,r2,-1
   20b8c:	30800215 	stw	r2,8(r6)
   20b90:	10001316 	blt	r2,zero,20be0 <_putc_r+0x78>
   20b94:	30800017 	ldw	r2,0(r6)
   20b98:	11400005 	stb	r5,0(r2)
   20b9c:	30800017 	ldw	r2,0(r6)
   20ba0:	10c00044 	addi	r3,r2,1
   20ba4:	30c00015 	stw	r3,0(r6)
   20ba8:	10800003 	ldbu	r2,0(r2)
   20bac:	dfc00317 	ldw	ra,12(sp)
   20bb0:	dc400217 	ldw	r17,8(sp)
   20bb4:	dec00404 	addi	sp,sp,16
   20bb8:	f800283a 	ret
   20bbc:	d9800115 	stw	r6,4(sp)
   20bc0:	d9400015 	stw	r5,0(sp)
   20bc4:	00132a80 	call	132a8 <__sinit>
   20bc8:	d9800117 	ldw	r6,4(sp)
   20bcc:	d9400017 	ldw	r5,0(sp)
   20bd0:	30800217 	ldw	r2,8(r6)
   20bd4:	10bfffc4 	addi	r2,r2,-1
   20bd8:	30800215 	stw	r2,8(r6)
   20bdc:	103fed0e 	bge	r2,zero,20b94 <_putc_r+0x2c>
   20be0:	30c00617 	ldw	r3,24(r6)
   20be4:	10c00e16 	blt	r2,r3,20c20 <_putc_r+0xb8>
   20be8:	30800017 	ldw	r2,0(r6)
   20bec:	11400005 	stb	r5,0(r2)
   20bf0:	30c00017 	ldw	r3,0(r6)
   20bf4:	18800003 	ldbu	r2,0(r3)
   20bf8:	108002a0 	cmpeqi	r2,r2,10
   20bfc:	1000071e 	bne	r2,zero,20c1c <_putc_r+0xb4>
   20c00:	18800044 	addi	r2,r3,1
   20c04:	30800015 	stw	r2,0(r6)
   20c08:	18800003 	ldbu	r2,0(r3)
   20c0c:	dfc00317 	ldw	ra,12(sp)
   20c10:	dc400217 	ldw	r17,8(sp)
   20c14:	dec00404 	addi	sp,sp,16
   20c18:	f800283a 	ret
   20c1c:	01400284 	movi	r5,10
   20c20:	8809883a 	mov	r4,r17
   20c24:	dfc00317 	ldw	ra,12(sp)
   20c28:	dc400217 	ldw	r17,8(sp)
   20c2c:	dec00404 	addi	sp,sp,16
   20c30:	00185501 	jmpi	18550 <__swbuf_r>

00020c34 <putc>:
   20c34:	defffc04 	addi	sp,sp,-16
   20c38:	008000b4 	movhi	r2,2
   20c3c:	dc800215 	stw	r18,8(sp)
   20c40:	148eaa17 	ldw	r18,15016(r2)
   20c44:	dc400115 	stw	r17,4(sp)
   20c48:	dfc00315 	stw	ra,12(sp)
   20c4c:	2023883a 	mov	r17,r4
   20c50:	90000226 	beq	r18,zero,20c5c <putc+0x28>
   20c54:	90800e17 	ldw	r2,56(r18)
   20c58:	10000f26 	beq	r2,zero,20c98 <putc+0x64>
   20c5c:	28800217 	ldw	r2,8(r5)
   20c60:	10bfffc4 	addi	r2,r2,-1
   20c64:	28800215 	stw	r2,8(r5)
   20c68:	10001316 	blt	r2,zero,20cb8 <putc+0x84>
   20c6c:	28800017 	ldw	r2,0(r5)
   20c70:	14400005 	stb	r17,0(r2)
   20c74:	28800017 	ldw	r2,0(r5)
   20c78:	10c00044 	addi	r3,r2,1
   20c7c:	28c00015 	stw	r3,0(r5)
   20c80:	10800003 	ldbu	r2,0(r2)
   20c84:	dfc00317 	ldw	ra,12(sp)
   20c88:	dc800217 	ldw	r18,8(sp)
   20c8c:	dc400117 	ldw	r17,4(sp)
   20c90:	dec00404 	addi	sp,sp,16
   20c94:	f800283a 	ret
   20c98:	9009883a 	mov	r4,r18
   20c9c:	d9400015 	stw	r5,0(sp)
   20ca0:	00132a80 	call	132a8 <__sinit>
   20ca4:	d9400017 	ldw	r5,0(sp)
   20ca8:	28800217 	ldw	r2,8(r5)
   20cac:	10bfffc4 	addi	r2,r2,-1
   20cb0:	28800215 	stw	r2,8(r5)
   20cb4:	103fed0e 	bge	r2,zero,20c6c <putc+0x38>
   20cb8:	28c00617 	ldw	r3,24(r5)
   20cbc:	10c00a16 	blt	r2,r3,20ce8 <putc+0xb4>
   20cc0:	28800017 	ldw	r2,0(r5)
   20cc4:	14400005 	stb	r17,0(r2)
   20cc8:	28c00017 	ldw	r3,0(r5)
   20ccc:	18800003 	ldbu	r2,0(r3)
   20cd0:	108002a0 	cmpeqi	r2,r2,10
   20cd4:	10000c1e 	bne	r2,zero,20d08 <putc+0xd4>
   20cd8:	18800044 	addi	r2,r3,1
   20cdc:	28800015 	stw	r2,0(r5)
   20ce0:	18800003 	ldbu	r2,0(r3)
   20ce4:	003fe706 	br	20c84 <putc+0x50>
   20ce8:	280d883a 	mov	r6,r5
   20cec:	880b883a 	mov	r5,r17
   20cf0:	9009883a 	mov	r4,r18
   20cf4:	dfc00317 	ldw	ra,12(sp)
   20cf8:	dc800217 	ldw	r18,8(sp)
   20cfc:	dc400117 	ldw	r17,4(sp)
   20d00:	dec00404 	addi	sp,sp,16
   20d04:	00185501 	jmpi	18550 <__swbuf_r>
   20d08:	280d883a 	mov	r6,r5
   20d0c:	01400284 	movi	r5,10
   20d10:	003ff706 	br	20cf0 <putc+0xbc>
