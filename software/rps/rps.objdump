
rps.elf:     file format elf32-littlenios2
rps.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000228

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00017ffc memsz 0x00017ffc flags r-x
    LOAD off    0x0001901c vaddr 0x0001801c paddr 0x00019cac align 2**12
         filesz 0x00001c90 memsz 0x00001c90 flags rw-
    LOAD off    0x0000093c vaddr 0x0001b93c paddr 0x0001b93c align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017538  00000228  00000228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008bc  00017760  00017760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c90  0001801c  00019cac  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  0001b93c  0001b93c  0001b93c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001ba98  0001ba98  0001acac  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0001acac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001410  00000000  00000000  0001ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00035a75  00000000  00000000  0001c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000dac2  00000000  00000000  00051b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0001cd5a  00000000  00000000  0005f627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00003228  00000000  00000000  0007c384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000051a4  00000000  00000000  0007f5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00023bb8  00000000  00000000  00084750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000a8308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002b10  00000000  00000000  000a8318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000aeea1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000aeea4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000aeea9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000aeeaa  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000aeeab  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000aeeaf  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000aeeb3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000aeeb7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000aeec0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000aeec9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  000aeed2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  000aeee1  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000a4f38  00000000  00000000  000aef0d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000228 l    d  .text	00000000 .text
00017760 l    d  .rodata	00000000 .rodata
0001801c l    d  .rwdata	00000000 .rwdata
0001b93c l    d  .bss	00000000 .bss
0001ba98 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/school/Jaar-3/Periode-4/FPGA/FPGA-project/software/rps_bsp//obj/HAL/src/crt0.o
00000260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 kiss_fft.c
00000264 l     F .text	00000154 kf_bfly2
000003b8 l     F .text	000004b4 kf_bfly4
0000086c l     F .text	000003a0 kf_bfly3
00000c0c l     F .text	00000768 kf_bfly5
00001374 l     F .text	000002d4 kf_bfly_generic
00001648 l     F .text	00000238 kf_work
00001880 l     F .text	00000144 kf_factor
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libmfcc.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000177a4 l     O .rodata	00000080 npio2_hw
00017824 l     O .rodata	00000108 two_over_pi
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0001796c l     O .rodata	00000010 init_jk
0001792c l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 math_err.c
00006b38 l     F .text	00000048 with_errno
00006b80 l     F .text	00000050 xflow
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0001801c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000c8c4 l     F .text	000000c0 __sbprintf
00017ad0 l     O .rodata	00000010 blanks.1
00017ac0 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000cae8 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000e75c l     F .text	00000008 __fp_lock
0000e770 l     F .text	00000008 __fp_unlock
0000e778 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00017b84 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000109fc l     F .text	000000f4 __sprint_r.part.0
00011d84 l     F .text	000000c0 __sbprintf
00017cb8 l     O .rodata	00000010 blanks.1
00017ca8 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
0001222c l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0001471c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00014834 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00014898 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000149b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00014a9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014c04 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00014cf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00014ed0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019c9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001513c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001527c l     F .text	00000034 alt_dev_reg
00018b5c l     O .rwdata	00001060 JTAG_UART
00019bbc l     O .rwdata	00000030 AV_Config
00019bec l     O .rwdata	00000030 Audio_Subsystem_Audio
00019c1c l     O .rwdata	0000002c Char_LCD_16x2
00019c48 l     O .rwdata	0000002c Serial_Port
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000155a4 l     F .text	00000210 altera_avalon_jtag_uart_irq
000157b4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015df8 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016900 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016b5c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00016e2c l     F .text	0000003c alt_get_errno
00016e68 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001b96c g     O .bss	00000004 alt_instruction_exception_handler
0000a820 g     F .text	00000018 putchar
0001052c g     F .text	00000070 _mprec_log10
00010618 g     F .text	00000060 __any_on
00012b18 g     F .text	00000058 _isatty_r
00017b90 g     O .rodata	00000028 __mprec_tinytens
00014e0c g     F .text	0000007c alt_main
0001b998 g     O .bss	00000100 alt_irq
00012c64 g     F .text	00000064 _lseek_r
00003138 g     F .text	000000c4 log
000034b8 g     F .text	000000ac sqrt
00019cac g       *ABS*	00000000 __flash_rwdata_start
00015f68 g     F .text	00000040 alt_up_character_lcd_send_cmd
000086c0 g     F .text	00000080 .hidden __eqdf2
0001ba98 g       *ABS*	00000000 __alt_heap_start
00013ad4 g     F .text	00000060 _kill_r
0000a7e0 g     F .text	00000038 printf
000134a0 g     F .text	0000006c _wcrtomb_r
00013644 g     F .text	00000098 _signal_r
00010900 g     F .text	0000005c __sseek
0000eac0 g     F .text	00000010 __sinit
00011e44 g     F .text	00000148 __swbuf_r
00012b70 g     F .text	00000074 _setlocale_r
0000e8e0 g     F .text	00000078 __sfmoreglue
00014eac g     F .text	00000024 __malloc_unlock
00016620 g     F .text	00000090 alt_up_rs232_read_fd
00002cc4 g     F .text	0000011c GetCenterFrequency
00006bf4 g     F .text	0000004c .hidden __math_divzero
00012d18 g     F .text	0000012c memmove
0000eaac g     F .text	00000014 _cleanup
0000f488 g     F .text	000000a4 _Balloc
00008740 g     F .text	000000e8 .hidden __gtdf2
00017274 g     F .text	00000024 altera_nios2_gen2_irq_init
00009ea4 g     F .text	0000000c __errno
00015ef4 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000000c __reset
0000f060 g     F .text	00000008 __localeconv_l
00000020 g       *ABS*	00000000 __flash_exceptions_start
00012624 g     F .text	00000060 _fstat_r
0001b948 g     O .bss	00000004 errno
00002e90 g     F .text	000001e4 floor
00010878 g     F .text	00000008 __seofread
0001b954 g     O .bss	00000004 alt_argv
00021c74 g       *ABS*	00000000 _gp
00014990 g     F .text	00000020 getpid
000189dc g     O .rwdata	00000180 alt_fd_list
00004cf8 g     F .text	0000074c __ieee754_rem_pio2
0000a818 g     F .text	00000008 _putchar_r
00016aac g     F .text	00000090 alt_find_dev
0000a6b0 g     F .text	00000100 memcpy
00016118 g     F .text	00000050 alt_up_character_lcd_write_fd
00006c40 g     F .text	00000094 .hidden __math_invalid
0000e764 g     F .text	0000000c _cleanup_r
00009a9c g     F .text	000000b8 .hidden __floatsidf
00016c30 g     F .text	0000007c alt_io_redirect
00008828 g     F .text	000000e8 .hidden __ltdf2
00017760 g       *ABS*	00000000 __DTOR_END__
000165ac g     F .text	00000074 alt_up_rs232_read_data
00017458 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00010488 g     F .text	000000a4 __ratio
00011d68 g     F .text	0000001c __vfiprintf_internal
000159b0 g     F .text	00000220 altera_avalon_jtag_uart_read
00009eb0 g     F .text	00000010 malloc
0000a7b0 g     F .text	00000030 _printf_r
0000708c g     F .text	00000064 .hidden __udivsi3
000149ec g     F .text	000000b0 isatty
000136dc g     F .text	000000c4 _raise_r
00012060 g     F .text	00000064 __assert_func
00017be0 g     O .rodata	000000c8 __mprec_tens
000056b0 g     F .text	000004ac __kernel_cos
0001b944 g     O .bss	00000004 __malloc_top_pad
00013b34 g     F .text	00000004 _getpid_r
0000f068 g     F .text	0000000c _localeconv_r
00012684 g     F .text	00000494 __sfvwrite_r
0000f8f8 g     F .text	000000b0 __i2b
000137a0 g     F .text	000000bc __sigtramp_r
0000a838 g     F .text	00000058 _sbrk_r
00012e44 g     F .text	00000064 _read_r
00019c94 g     O .rwdata	00000004 alt_max_fd
00016528 g     F .text	00000044 alt_up_rs232_check_parity
000122ec g     F .text	00000070 _fclose_r
0000e6d8 g     F .text	00000084 fflush
0001b940 g     O .bss	00000004 __malloc_max_sbrked_mem
00016cac g     F .text	00000180 alt_irq_register
00006870 g     F .text	000002c8 __kernel_sin
00009be4 g     F .text	000000fc .hidden __extendsfdf2
000074bc g     F .text	000008f0 .hidden __adddf3
00007174 g     F .text	00000070 .hidden __nesf2
0001021c g     F .text	00000108 __b2d
00014158 g     F .text	000005c4 .hidden __umoddi3
00014d2c g     F .text	000000e0 lseek
00019c74 g     O .rwdata	00000004 _global_impure_ptr
00012ea8 g     F .text	0000053c _realloc_r
0001ba98 g       *ABS*	00000000 __bss_end
00017148 g     F .text	0000012c alt_tick
00013b38 g     F .text	00000620 .hidden __udivdi3
00012588 g     F .text	00000024 _fputwc_r
00017bb8 g     O .rodata	00000028 __mprec_bigtens
0000f6ac g     F .text	00000138 __s2b
000135d0 g     F .text	00000018 abort
00009b54 g     F .text	00000090 .hidden __floatunsidf
0000ff3c g     F .text	00000058 __mcmp
0000eae0 g     F .text	00000014 __fp_lock_all
00002078 g     F .text	000000cc check_KEYs
000170a4 g     F .text	000000a4 alt_alarm_stop
0001b95c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000cc alt_irq_handler
000189b4 g     O .rwdata	00000028 alt_dev_null
00005b5c g     F .text	00000d14 __kernel_rem_pio2
000163b8 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
000168e0 g     F .text	00000020 alt_dcache_flush_all
0000f7e4 g     F .text	00000064 __hi0bits
00009a1c g     F .text	00000080 .hidden __fixdfsi
00019cac g       *ABS*	00000000 __ram_rwdata_end
00019c8c g     O .rwdata	00000008 alt_dev_list
00015178 g     F .text	00000104 write
00010678 g     F .text	000000cc _putc_r
000071e4 g     F .text	000000b8 .hidden __gtsf2
0001801c g       *ABS*	00000000 __ram_rodata_end
000148d4 g     F .text	000000bc fstat
000166b0 g     F .text	00000094 alt_up_rs232_write_fd
00014ad8 g     F .text	0000012c kill
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00008828 g     F .text	000000e8 .hidden __ledf2
00006be8 g     F .text	0000000c .hidden __math_oflow
0000fc6c g     F .text	00000148 __pow5mult
00010b08 g     F .text	00001260 ___vfiprintf_internal_r
000070f0 g     F .text	0000005c .hidden __umodsi3
0001ba98 g       *ABS*	00000000 end
000154f0 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001c8 g     F .exceptions	00000060 alt_instruction_exception_entry
00006d38 g     F .text	000000a0 .hidden __math_check_oflow
00017760 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00006bdc g     F .text	0000000c .hidden __math_may_uflow
00015e78 g     F .text	0000007c alt_avalon_timer_sc_init
00009e50 g     F .text	00000054 .hidden __clzsi2
00015bd0 g     F .text	00000228 altera_avalon_jtag_uart_write
00002de0 g     F .text	000000b0 cos
00001c00 g     F .text	000000d4 kiss_fft_stride
0000ead0 g     F .text	00000004 __sfp_lock_acquire
0000f2c8 g     F .text	000000d0 memchr
00001cd4 g     F .text	00000048 kiss_fft
0001601c g     F .text	00000080 alt_up_character_lcd_write
0000a890 g     F .text	00002018 ___vfprintf_internal_r
0000ec24 g     F .text	000002fc _free_r
00017e1c g     O .rodata	00000180 _ctype_b
00012be4 g     F .text	0000000c __locale_mb_cur_max
00017640 g     F .text	00000120 __call_exitprocs
00019c7c g     O .rwdata	00000004 __malloc_sbrk_base
00000228 g     F .text	0000003c _start
0001b960 g     O .bss	00000004 _alt_tick_rate
00003074 g     F .text	000000c4 sin
0000fdb4 g     F .text	00000188 __lshift
0001b964 g     O .bss	00000008 _alt_nticks
00013918 g     F .text	000000a0 signal
00014f0c g     F .text	00000108 read
000152ec g     F .text	000000a0 alt_sys_init
00016268 g     F .text	0000008c alt_up_character_lcd_shift_display
0000729c g     F .text	00000124 .hidden __floatsisf
000175b0 g     F .text	00000090 __register_exitproc
000164ec g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00002144 g     F .text	00000118 normalize_audio
0000f9a8 g     F .text	000002c4 __multiply
000162f4 g     F .text	0000008c alt_up_character_lcd_erase_pos
00003bf0 g     F .text	00001108 __ieee754_pow
00015854 g     F .text	00000068 altera_avalon_jtag_uart_close
000031fc g     F .text	000002bc pow
0000714c g     F .text	00000028 .hidden __mulsi3
0001801c g       *ABS*	00000000 __ram_rwdata_start
00017760 g       *ABS*	00000000 __ram_rodata_start
0001b970 g     O .bss	00000028 __malloc_current_mallinfo
00007174 g     F .text	00000070 .hidden __eqsf2
00010324 g     F .text	00000164 __d2b
0001538c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000173a0 g     F .text	000000b8 alt_get_fd
00012008 g     F .text	00000058 _close_r
00017538 g     F .text	00000078 memcmp
0001544c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001ba98 g       *ABS*	00000000 __alt_stack_base
0001549c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000c984 g     F .text	00000164 __swsetup_r
00007dac g     F .text	00000914 .hidden __divdf3
0000e958 g     F .text	00000154 __sfp
0001059c g     F .text	0000007c __copybits
00018440 g     O .rwdata	00000408 __malloc_av_
0000eadc g     F .text	00000004 __sinit_lock_release
00008910 g     F .text	000007ac .hidden __muldf3
00010824 g     F .text	00000054 __sread
0001644c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00017298 g     F .text	00000108 alt_find_file
0001693c g     F .text	000000a8 alt_dev_llist_insert
00014e88 g     F .text	00000024 __malloc_lock
00015084 g     F .text	000000b8 sbrk
0000e678 g     F .text	00000060 _fflush_r
000120d8 g     F .text	00000154 _calloc_r
0001b93c g       *ABS*	00000000 __bss_start
0000f398 g     F .text	000000f0 memset
00001e0c g     F .text	0000026c main
0001b958 g     O .bss	00000004 alt_envp
0001b93c g     O .bss	00000004 __malloc_max_total_mem
000153ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011f8c g     F .text	00000018 __swbuf
000161dc g     F .text	0000008c alt_up_character_lcd_shift_cursor
0001095c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0001235c g     F .text	00000070 fclose
00009ce0 g     F .text	00000170 .hidden __truncdfsf2
0000cd08 g     F .text	00001748 _dtoa_r
00009ed0 g     F .text	000007e0 _malloc_r
000135a0 g     F .text	00000030 __ascii_wctomb
00019c98 g     O .rwdata	00000004 alt_errno
000123cc g     F .text	00000020 _fiprintf_r
000139b8 g     F .text	00000060 _init_signal
0000ef20 g     F .text	00000098 _fwalk
00012cc8 g     F .text	0000000c _mbtowc_r
00010744 g     F .text	000000e0 putc
00006f98 g     F .text	00000080 .hidden __divsi3
00015fe0 g     F .text	0000003c alt_up_character_lcd_open_dev
0000eb08 g     F .text	0000011c _malloc_trim_r
00017760 g       *ABS*	00000000 __CTOR_END__
00006cd4 g     F .text	00000064 .hidden __math_check_uflow
00015fa8 g     F .text	00000038 alt_up_character_lcd_init
00002bb0 g     F .text	00000114 GetMagnitudeFactor
000133e4 g     F .text	000000b8 strcmp
00017760 g       *ABS*	00000000 __flash_rodata_start
00002558 g     F .text	00000290 GetCoefficient
00017760 g       *ABS*	00000000 __DTOR_LIST__
00016744 g     F .text	0000003c alt_up_rs232_open_dev
000086c0 g     F .text	00000080 .hidden __nedf2
000152b0 g     F .text	0000003c alt_irq_init
00015014 g     F .text	00000070 alt_release_fd
00016380 g     F .text	00000038 alt_up_character_lcd_cursor_off
0001797c g     O .rodata	00000100 .hidden __clz_tab
0001b94c g     O .bss	00000004 _PathLocale
000174f0 g     F .text	00000014 atexit
000071e4 g     F .text	000000b8 .hidden __gesf2
00011fa4 g     F .text	00000064 _write_r
00012bf0 g     F .text	00000074 setlocale
00019c78 g     O .rwdata	00000004 _impure_ptr
0001b950 g     O .bss	00000004 alt_argc
0000e450 g     F .text	00000228 __sflush_r
00006dd8 g     F .text	000001c0 scalbn
00016a48 g     F .text	00000064 _do_dtors
00003564 g     F .text	0000068c __ieee754_log
00002314 g     F .text	00000244 calculate_mfcc
00000020 g       .exceptions	00000000 alt_irq_entry
00012cd4 g     F .text	00000044 __ascii_mbtowc
000101c0 g     F .text	0000005c __ulp
0000eaf4 g     F .text	00000014 __fp_unlock_all
0000225c g     F .text	000000b8 fft
00019c84 g     O .rwdata	00000008 alt_fs_list
000163f0 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001656c g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000f074 g     F .text	0000000c localeconv
00005444 g     F .text	0000026c __ieee754_sqrt
0000f230 g     F .text	00000098 __swhatbuf_r
00019cac g       *ABS*	00000000 _edata
0001ba98 g       *ABS*	00000000 _end
00012424 g     F .text	00000164 __fputwc
00000228 g       *ABS*	00000000 __ram_exceptions_end
000158bc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00010880 g     F .text	00000080 __swrite
00019c80 g     O .rwdata	00000004 __malloc_trim_threshold
00017504 g     F .text	00000034 exit
000123ec g     F .text	00000038 fiprintf
0001349c g     F .text	00000004 _vfiprintf_r
0000efb8 g     F .text	000000a8 _fwalk_reent
000073c0 g     F .text	000000fc .hidden __floatunsisf
0000ff94 g     F .text	0000022c __mdiff
00001d1c g     F .text	00000020 kiss_fft_cleanup
00006bd0 g     F .text	0000000c .hidden __math_uflow
00007018 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000ead4 g     F .text	00000004 __sfp_lock_release
0001609c g     F .text	0000007c alt_up_character_lcd_string
00017d18 g     O .rodata	00000101 _ctype_
000099c8 g     F .text	00000054 .hidden __unorddf2
00014860 g     F .text	00000038 _exit
00016780 g     F .text	00000160 alt_alarm_start
0000f080 g     F .text	000001b0 __smakebuf_r
00010964 g     F .text	00000098 strlen
000135e8 g     F .text	0000005c _init_signal_r
00016f44 g     F .text	00000160 open
00008740 g     F .text	000000e8 .hidden __gedf2
000120c4 g     F .text	00000014 __assert
000028b0 g     F .text	00000300 GetFilterParameter
00010af0 g     F .text	00000018 __sprint_r
00016b3c g     F .text	00000020 alt_icache_flush_all
000027e8 g     F .text	000000c8 NormalizationFactor
00016168 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00019ca0 g     O .rwdata	00000004 alt_priority_mask
0000c8a8 g     F .text	0000001c __vfprintf_internal
00001d3c g     F .text	000000d0 kiss_fft_next_fast_size
00013594 g     F .text	0000000c _wctomb_r
000019c4 g     F .text	0000023c kiss_fft_alloc
000090bc g     F .text	0000090c .hidden __subdf3
0000f848 g     F .text	000000b0 __lo0bits
00019ca4 g     O .rwdata	00000008 alt_alarm_list
000169e4 g     F .text	00000064 _do_ctors
00013a18 g     F .text	000000bc __sigtramp
000164ac g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0001350c g     F .text	00000088 wcrtomb
00014758 g     F .text	000000dc close
00018848 g     O .rwdata	0000016c __global_locale
00014c6c g     F .text	00000084 alt_load
000125ac g     F .text	00000078 fputwc
0001385c g     F .text	000000bc raise
00009ec0 g     F .text	00000010 free
0000ead8 g     F .text	00000004 __sinit_lock_acquire
0000f550 g     F .text	0000015c __multadd
0000f52c g     F .text	00000024 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408a14 	ori	at,at,552
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008000b4 	movhi	r2,2
 148:	1885883a 	add	r2,r3,r2
 14c:	10ee6617 	ldw	r3,-18024(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008000b4 	movhi	r2,2
 15c:	2085883a 	add	r2,r4,r2
 160:	10ae6717 	ldw	r2,-18020(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	0001883a 	nop
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1dc:	00bfffc4 	movi	r2,-1
 1e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 1e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1e8:	d0a73e17 	ldw	r2,-25352(gp)
 1ec:	10000726 	beq	r2,zero,20c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f0:	d0a73e17 	ldw	r2,-25352(gp)
 1f4:	e0ffff17 	ldw	r3,-4(fp)
 1f8:	e1bffe17 	ldw	r6,-8(fp)
 1fc:	e17ffd17 	ldw	r5,-12(fp)
 200:	1809883a 	mov	r4,r3
 204:	103ee83a 	callr	r2
 208:	00000206 	br	214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 20c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 210:	0005883a 	mov	r2,zero
}
 214:	e037883a 	mov	sp,fp
 218:	dfc00117 	ldw	ra,4(sp)
 21c:	df000017 	ldw	fp,0(sp)
 220:	dec00204 	addi	sp,sp,8
 224:	f800283a 	ret

Disassembly of section .text:

00000228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     228:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     22c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     230:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     234:	d6871d14 	ori	gp,gp,7284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     238:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     23c:	10ae4f14 	ori	r2,r2,47420

    movhi r3, %hi(__bss_end)
     240:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     244:	18eea614 	ori	r3,r3,47768

    beq r2, r3, 1f
     248:	10c00326 	beq	r2,r3,258 <_start+0x30>

0:
    stw zero, (r2)
     24c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     254:	10fffd36 	bltu	r2,r3,24c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     258:	0014c6c0 	call	14c6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     25c:	0014e0c0 	call	14e0c <alt_main>

00000260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     260:	003fff06 	br	260 <alt_after_alt_main>

00000264 <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
     264:	defff704 	addi	sp,sp,-36
     268:	df000815 	stw	fp,32(sp)
     26c:	df000804 	addi	fp,sp,32
     270:	e13ffb15 	stw	r4,-20(fp)
     274:	e17ffa15 	stw	r5,-24(fp)
     278:	e1bff915 	stw	r6,-28(fp)
     27c:	e1fff815 	stw	r7,-32(fp)
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
     280:	e0bff917 	ldw	r2,-28(fp)
     284:	10804204 	addi	r2,r2,264
     288:	e0bffe15 	stw	r2,-8(fp)
    kiss_fft_cpx t;
    Fout2 = Fout + m;
     28c:	e0bff817 	ldw	r2,-32(fp)
     290:	100490fa 	slli	r2,r2,3
     294:	e0fffb17 	ldw	r3,-20(fp)
     298:	1885883a 	add	r2,r3,r2
     29c:	e0bfff15 	stw	r2,-4(fp)
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	10c00017 	ldw	r3,0(r2)
     2a8:	e13ffe17 	ldw	r4,-8(fp)
     2ac:	20800017 	ldw	r2,0(r4)
     2b0:	1887ff32 	custom	252,r3,r3,r2
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	11000117 	ldw	r4,4(r2)
     2bc:	e17ffe17 	ldw	r5,-8(fp)
     2c0:	28800117 	ldw	r2,4(r5)
     2c4:	2085ff32 	custom	252,r2,r4,r2
     2c8:	1885ffb2 	custom	254,r2,r3,r2
     2cc:	e0bffc15 	stw	r2,-16(fp)
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	10c00017 	ldw	r3,0(r2)
     2d8:	e13ffe17 	ldw	r4,-8(fp)
     2dc:	20800117 	ldw	r2,4(r4)
     2e0:	1887ff32 	custom	252,r3,r3,r2
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	11000117 	ldw	r4,4(r2)
     2ec:	e17ffe17 	ldw	r5,-8(fp)
     2f0:	28800017 	ldw	r2,0(r5)
     2f4:	2085ff32 	custom	252,r2,r4,r2
     2f8:	1885ff72 	custom	253,r2,r3,r2
     2fc:	e0bffd15 	stw	r2,-12(fp)
        tw1 += fstride;
     300:	e0bffa17 	ldw	r2,-24(fp)
     304:	100490fa 	slli	r2,r2,3
     308:	e0fffe17 	ldw	r3,-8(fp)
     30c:	1885883a 	add	r2,r3,r2
     310:	e0bffe15 	stw	r2,-8(fp)
        C_SUB( *Fout2 ,  *Fout , t );
     314:	e0bffb17 	ldw	r2,-20(fp)
     318:	10c00017 	ldw	r3,0(r2)
     31c:	e0bffc17 	ldw	r2,-16(fp)
     320:	1887ffb2 	custom	254,r3,r3,r2
     324:	e0bfff17 	ldw	r2,-4(fp)
     328:	10c00015 	stw	r3,0(r2)
     32c:	e0bffb17 	ldw	r2,-20(fp)
     330:	10c00117 	ldw	r3,4(r2)
     334:	e0bffd17 	ldw	r2,-12(fp)
     338:	1887ffb2 	custom	254,r3,r3,r2
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10c00115 	stw	r3,4(r2)
        C_ADDTO( *Fout ,  t );
     344:	e0bffb17 	ldw	r2,-20(fp)
     348:	10c00017 	ldw	r3,0(r2)
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	1887ff72 	custom	253,r3,r3,r2
     354:	e0bffb17 	ldw	r2,-20(fp)
     358:	10c00015 	stw	r3,0(r2)
     35c:	e0bffb17 	ldw	r2,-20(fp)
     360:	10c00117 	ldw	r3,4(r2)
     364:	e0bffd17 	ldw	r2,-12(fp)
     368:	1887ff72 	custom	253,r3,r3,r2
     36c:	e0bffb17 	ldw	r2,-20(fp)
     370:	10c00115 	stw	r3,4(r2)
        ++Fout2;
     374:	e0bfff17 	ldw	r2,-4(fp)
     378:	10800204 	addi	r2,r2,8
     37c:	e0bfff15 	stw	r2,-4(fp)
        ++Fout;
     380:	e0bffb17 	ldw	r2,-20(fp)
     384:	10800204 	addi	r2,r2,8
     388:	e0bffb15 	stw	r2,-20(fp)
    }while (--m);
     38c:	e0bff817 	ldw	r2,-32(fp)
     390:	10bfffc4 	addi	r2,r2,-1
     394:	e0bff815 	stw	r2,-32(fp)
     398:	e0bff817 	ldw	r2,-32(fp)
     39c:	103fc01e 	bne	r2,zero,2a0 <kf_bfly2+0x3c>
}
     3a0:	0001883a 	nop
     3a4:	0001883a 	nop
     3a8:	e037883a 	mov	sp,fp
     3ac:	df000017 	ldw	fp,0(sp)
     3b0:	dec00104 	addi	sp,sp,4
     3b4:	f800283a 	ret

000003b8 <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
     3b8:	deffe904 	addi	sp,sp,-92
     3bc:	df001615 	stw	fp,88(sp)
     3c0:	df001604 	addi	fp,sp,88
     3c4:	e13fed15 	stw	r4,-76(fp)
     3c8:	e17fec15 	stw	r5,-80(fp)
     3cc:	e1bfeb15 	stw	r6,-84(fp)
     3d0:	e1ffea15 	stw	r7,-88(fp)
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
     3d4:	e0bfea17 	ldw	r2,-88(fp)
     3d8:	e0bffc15 	stw	r2,-16(fp)
    const size_t m2=2*m;
     3dc:	e0bfea17 	ldw	r2,-88(fp)
     3e0:	1085883a 	add	r2,r2,r2
     3e4:	e0bffb15 	stw	r2,-20(fp)
    const size_t m3=3*m;
     3e8:	e0ffea17 	ldw	r3,-88(fp)
     3ec:	1805883a 	mov	r2,r3
     3f0:	1085883a 	add	r2,r2,r2
     3f4:	10c5883a 	add	r2,r2,r3
     3f8:	e0bffa15 	stw	r2,-24(fp)


    tw3 = tw2 = tw1 = st->twiddles;
     3fc:	e0bfeb17 	ldw	r2,-84(fp)
     400:	10804204 	addi	r2,r2,264
     404:	e0bfff15 	stw	r2,-4(fp)
     408:	e0bfff17 	ldw	r2,-4(fp)
     40c:	e0bffe15 	stw	r2,-8(fp)
     410:	e0bffe17 	ldw	r2,-8(fp)
     414:	e0bffd15 	stw	r2,-12(fp)

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
     418:	e0bfea17 	ldw	r2,-88(fp)
     41c:	100490fa 	slli	r2,r2,3
     420:	e0ffed17 	ldw	r3,-76(fp)
     424:	1885883a 	add	r2,r3,r2
     428:	10c00017 	ldw	r3,0(r2)
     42c:	e13fff17 	ldw	r4,-4(fp)
     430:	20800017 	ldw	r2,0(r4)
     434:	1887ff32 	custom	252,r3,r3,r2
     438:	e0bfea17 	ldw	r2,-88(fp)
     43c:	100490fa 	slli	r2,r2,3
     440:	e13fed17 	ldw	r4,-76(fp)
     444:	2085883a 	add	r2,r4,r2
     448:	11000117 	ldw	r4,4(r2)
     44c:	e17fff17 	ldw	r5,-4(fp)
     450:	28800117 	ldw	r2,4(r5)
     454:	2085ff32 	custom	252,r2,r4,r2
     458:	1885ffb2 	custom	254,r2,r3,r2
     45c:	e0bfee15 	stw	r2,-72(fp)
     460:	e0bfea17 	ldw	r2,-88(fp)
     464:	100490fa 	slli	r2,r2,3
     468:	e0ffed17 	ldw	r3,-76(fp)
     46c:	1885883a 	add	r2,r3,r2
     470:	10c00017 	ldw	r3,0(r2)
     474:	e13fff17 	ldw	r4,-4(fp)
     478:	20800117 	ldw	r2,4(r4)
     47c:	1887ff32 	custom	252,r3,r3,r2
     480:	e0bfea17 	ldw	r2,-88(fp)
     484:	100490fa 	slli	r2,r2,3
     488:	e13fed17 	ldw	r4,-76(fp)
     48c:	2085883a 	add	r2,r4,r2
     490:	11000117 	ldw	r4,4(r2)
     494:	e17fff17 	ldw	r5,-4(fp)
     498:	28800017 	ldw	r2,0(r5)
     49c:	2085ff32 	custom	252,r2,r4,r2
     4a0:	1885ff72 	custom	253,r2,r3,r2
     4a4:	e0bfef15 	stw	r2,-68(fp)
        C_MUL(scratch[1],Fout[m2] , *tw2 );
     4a8:	e0bffb17 	ldw	r2,-20(fp)
     4ac:	100490fa 	slli	r2,r2,3
     4b0:	e0ffed17 	ldw	r3,-76(fp)
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	10c00017 	ldw	r3,0(r2)
     4bc:	e13ffe17 	ldw	r4,-8(fp)
     4c0:	20800017 	ldw	r2,0(r4)
     4c4:	1887ff32 	custom	252,r3,r3,r2
     4c8:	e0bffb17 	ldw	r2,-20(fp)
     4cc:	100490fa 	slli	r2,r2,3
     4d0:	e13fed17 	ldw	r4,-76(fp)
     4d4:	2085883a 	add	r2,r4,r2
     4d8:	11000117 	ldw	r4,4(r2)
     4dc:	e17ffe17 	ldw	r5,-8(fp)
     4e0:	28800117 	ldw	r2,4(r5)
     4e4:	2085ff32 	custom	252,r2,r4,r2
     4e8:	1885ffb2 	custom	254,r2,r3,r2
     4ec:	e0bff015 	stw	r2,-64(fp)
     4f0:	e0bffb17 	ldw	r2,-20(fp)
     4f4:	100490fa 	slli	r2,r2,3
     4f8:	e0ffed17 	ldw	r3,-76(fp)
     4fc:	1885883a 	add	r2,r3,r2
     500:	10c00017 	ldw	r3,0(r2)
     504:	e13ffe17 	ldw	r4,-8(fp)
     508:	20800117 	ldw	r2,4(r4)
     50c:	1887ff32 	custom	252,r3,r3,r2
     510:	e0bffb17 	ldw	r2,-20(fp)
     514:	100490fa 	slli	r2,r2,3
     518:	e13fed17 	ldw	r4,-76(fp)
     51c:	2085883a 	add	r2,r4,r2
     520:	11000117 	ldw	r4,4(r2)
     524:	e17ffe17 	ldw	r5,-8(fp)
     528:	28800017 	ldw	r2,0(r5)
     52c:	2085ff32 	custom	252,r2,r4,r2
     530:	1885ff72 	custom	253,r2,r3,r2
     534:	e0bff115 	stw	r2,-60(fp)
        C_MUL(scratch[2],Fout[m3] , *tw3 );
     538:	e0bffa17 	ldw	r2,-24(fp)
     53c:	100490fa 	slli	r2,r2,3
     540:	e0ffed17 	ldw	r3,-76(fp)
     544:	1885883a 	add	r2,r3,r2
     548:	10c00017 	ldw	r3,0(r2)
     54c:	e13ffd17 	ldw	r4,-12(fp)
     550:	20800017 	ldw	r2,0(r4)
     554:	1887ff32 	custom	252,r3,r3,r2
     558:	e0bffa17 	ldw	r2,-24(fp)
     55c:	100490fa 	slli	r2,r2,3
     560:	e13fed17 	ldw	r4,-76(fp)
     564:	2085883a 	add	r2,r4,r2
     568:	11000117 	ldw	r4,4(r2)
     56c:	e17ffd17 	ldw	r5,-12(fp)
     570:	28800117 	ldw	r2,4(r5)
     574:	2085ff32 	custom	252,r2,r4,r2
     578:	1885ffb2 	custom	254,r2,r3,r2
     57c:	e0bff215 	stw	r2,-56(fp)
     580:	e0bffa17 	ldw	r2,-24(fp)
     584:	100490fa 	slli	r2,r2,3
     588:	e0ffed17 	ldw	r3,-76(fp)
     58c:	1885883a 	add	r2,r3,r2
     590:	10c00017 	ldw	r3,0(r2)
     594:	e13ffd17 	ldw	r4,-12(fp)
     598:	20800117 	ldw	r2,4(r4)
     59c:	1887ff32 	custom	252,r3,r3,r2
     5a0:	e0bffa17 	ldw	r2,-24(fp)
     5a4:	100490fa 	slli	r2,r2,3
     5a8:	e13fed17 	ldw	r4,-76(fp)
     5ac:	2085883a 	add	r2,r4,r2
     5b0:	11000117 	ldw	r4,4(r2)
     5b4:	e17ffd17 	ldw	r5,-12(fp)
     5b8:	28800017 	ldw	r2,0(r5)
     5bc:	2085ff32 	custom	252,r2,r4,r2
     5c0:	1885ff72 	custom	253,r2,r3,r2
     5c4:	e0bff315 	stw	r2,-52(fp)

        C_SUB( scratch[5] , *Fout, scratch[1] );
     5c8:	e0bfed17 	ldw	r2,-76(fp)
     5cc:	10c00017 	ldw	r3,0(r2)
     5d0:	e0bff017 	ldw	r2,-64(fp)
     5d4:	1885ffb2 	custom	254,r2,r3,r2
     5d8:	e0bff815 	stw	r2,-32(fp)
     5dc:	e0bfed17 	ldw	r2,-76(fp)
     5e0:	10c00117 	ldw	r3,4(r2)
     5e4:	e0bff117 	ldw	r2,-60(fp)
     5e8:	1885ffb2 	custom	254,r2,r3,r2
     5ec:	e0bff915 	stw	r2,-28(fp)
        C_ADDTO(*Fout, scratch[1]);
     5f0:	e0bfed17 	ldw	r2,-76(fp)
     5f4:	10c00017 	ldw	r3,0(r2)
     5f8:	e0bff017 	ldw	r2,-64(fp)
     5fc:	1887ff72 	custom	253,r3,r3,r2
     600:	e0bfed17 	ldw	r2,-76(fp)
     604:	10c00015 	stw	r3,0(r2)
     608:	e0bfed17 	ldw	r2,-76(fp)
     60c:	10c00117 	ldw	r3,4(r2)
     610:	e0bff117 	ldw	r2,-60(fp)
     614:	1887ff72 	custom	253,r3,r3,r2
     618:	e0bfed17 	ldw	r2,-76(fp)
     61c:	10c00115 	stw	r3,4(r2)
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
     620:	e0ffee17 	ldw	r3,-72(fp)
     624:	e0bff217 	ldw	r2,-56(fp)
     628:	1885ff72 	custom	253,r2,r3,r2
     62c:	e0bff415 	stw	r2,-48(fp)
     630:	e0ffef17 	ldw	r3,-68(fp)
     634:	e0bff317 	ldw	r2,-52(fp)
     638:	1885ff72 	custom	253,r2,r3,r2
     63c:	e0bff515 	stw	r2,-44(fp)
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
     640:	e0ffee17 	ldw	r3,-72(fp)
     644:	e0bff217 	ldw	r2,-56(fp)
     648:	1885ffb2 	custom	254,r2,r3,r2
     64c:	e0bff615 	stw	r2,-40(fp)
     650:	e0ffef17 	ldw	r3,-68(fp)
     654:	e0bff317 	ldw	r2,-52(fp)
     658:	1885ffb2 	custom	254,r2,r3,r2
     65c:	e0bff715 	stw	r2,-36(fp)
        C_SUB( Fout[m2], *Fout, scratch[3] );
     660:	e0bfed17 	ldw	r2,-76(fp)
     664:	11000017 	ldw	r4,0(r2)
     668:	e0fff417 	ldw	r3,-48(fp)
     66c:	e0bffb17 	ldw	r2,-20(fp)
     670:	100490fa 	slli	r2,r2,3
     674:	e17fed17 	ldw	r5,-76(fp)
     678:	2885883a 	add	r2,r5,r2
     67c:	20c7ffb2 	custom	254,r3,r4,r3
     680:	10c00015 	stw	r3,0(r2)
     684:	e0bfed17 	ldw	r2,-76(fp)
     688:	11000117 	ldw	r4,4(r2)
     68c:	e0fff517 	ldw	r3,-44(fp)
     690:	e0bffb17 	ldw	r2,-20(fp)
     694:	100490fa 	slli	r2,r2,3
     698:	e17fed17 	ldw	r5,-76(fp)
     69c:	2885883a 	add	r2,r5,r2
     6a0:	20c7ffb2 	custom	254,r3,r4,r3
     6a4:	10c00115 	stw	r3,4(r2)
        tw1 += fstride;
     6a8:	e0bfec17 	ldw	r2,-80(fp)
     6ac:	100490fa 	slli	r2,r2,3
     6b0:	e0ffff17 	ldw	r3,-4(fp)
     6b4:	1885883a 	add	r2,r3,r2
     6b8:	e0bfff15 	stw	r2,-4(fp)
        tw2 += fstride*2;
     6bc:	e0bfec17 	ldw	r2,-80(fp)
     6c0:	1004913a 	slli	r2,r2,4
     6c4:	e0fffe17 	ldw	r3,-8(fp)
     6c8:	1885883a 	add	r2,r3,r2
     6cc:	e0bffe15 	stw	r2,-8(fp)
        tw3 += fstride*3;
     6d0:	e0ffec17 	ldw	r3,-80(fp)
     6d4:	1805883a 	mov	r2,r3
     6d8:	1085883a 	add	r2,r2,r2
     6dc:	10c5883a 	add	r2,r2,r3
     6e0:	100490fa 	slli	r2,r2,3
     6e4:	1007883a 	mov	r3,r2
     6e8:	e0bffd17 	ldw	r2,-12(fp)
     6ec:	10c5883a 	add	r2,r2,r3
     6f0:	e0bffd15 	stw	r2,-12(fp)
        C_ADDTO( *Fout , scratch[3] );
     6f4:	e0bfed17 	ldw	r2,-76(fp)
     6f8:	10c00017 	ldw	r3,0(r2)
     6fc:	e0bff417 	ldw	r2,-48(fp)
     700:	1887ff72 	custom	253,r3,r3,r2
     704:	e0bfed17 	ldw	r2,-76(fp)
     708:	10c00015 	stw	r3,0(r2)
     70c:	e0bfed17 	ldw	r2,-76(fp)
     710:	10c00117 	ldw	r3,4(r2)
     714:	e0bff517 	ldw	r2,-44(fp)
     718:	1887ff72 	custom	253,r3,r3,r2
     71c:	e0bfed17 	ldw	r2,-76(fp)
     720:	10c00115 	stw	r3,4(r2)

        if(st->inverse) {
     724:	e0bfeb17 	ldw	r2,-84(fp)
     728:	10800117 	ldw	r2,4(r2)
     72c:	10002126 	beq	r2,zero,7b4 <kf_bfly4+0x3fc>
            Fout[m].r = scratch[5].r - scratch[4].i;
     730:	e13ff817 	ldw	r4,-32(fp)
     734:	e0fff717 	ldw	r3,-36(fp)
     738:	e0bfea17 	ldw	r2,-88(fp)
     73c:	100490fa 	slli	r2,r2,3
     740:	e17fed17 	ldw	r5,-76(fp)
     744:	2885883a 	add	r2,r5,r2
     748:	20c7ffb2 	custom	254,r3,r4,r3
     74c:	10c00015 	stw	r3,0(r2)
            Fout[m].i = scratch[5].i + scratch[4].r;
     750:	e13ff917 	ldw	r4,-28(fp)
     754:	e0fff617 	ldw	r3,-40(fp)
     758:	e0bfea17 	ldw	r2,-88(fp)
     75c:	100490fa 	slli	r2,r2,3
     760:	e17fed17 	ldw	r5,-76(fp)
     764:	2885883a 	add	r2,r5,r2
     768:	20c7ff72 	custom	253,r3,r4,r3
     76c:	10c00115 	stw	r3,4(r2)
            Fout[m3].r = scratch[5].r + scratch[4].i;
     770:	e13ff817 	ldw	r4,-32(fp)
     774:	e0fff717 	ldw	r3,-36(fp)
     778:	e0bffa17 	ldw	r2,-24(fp)
     77c:	100490fa 	slli	r2,r2,3
     780:	e17fed17 	ldw	r5,-76(fp)
     784:	2885883a 	add	r2,r5,r2
     788:	20c7ff72 	custom	253,r3,r4,r3
     78c:	10c00015 	stw	r3,0(r2)
            Fout[m3].i = scratch[5].i - scratch[4].r;
     790:	e13ff917 	ldw	r4,-28(fp)
     794:	e0fff617 	ldw	r3,-40(fp)
     798:	e0bffa17 	ldw	r2,-24(fp)
     79c:	100490fa 	slli	r2,r2,3
     7a0:	e17fed17 	ldw	r5,-76(fp)
     7a4:	2885883a 	add	r2,r5,r2
     7a8:	20c7ffb2 	custom	254,r3,r4,r3
     7ac:	10c00115 	stw	r3,4(r2)
     7b0:	00002006 	br	834 <kf_bfly4+0x47c>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
     7b4:	e13ff817 	ldw	r4,-32(fp)
     7b8:	e0fff717 	ldw	r3,-36(fp)
     7bc:	e0bfea17 	ldw	r2,-88(fp)
     7c0:	100490fa 	slli	r2,r2,3
     7c4:	e17fed17 	ldw	r5,-76(fp)
     7c8:	2885883a 	add	r2,r5,r2
     7cc:	20c7ff72 	custom	253,r3,r4,r3
     7d0:	10c00015 	stw	r3,0(r2)
            Fout[m].i = scratch[5].i - scratch[4].r;
     7d4:	e13ff917 	ldw	r4,-28(fp)
     7d8:	e0fff617 	ldw	r3,-40(fp)
     7dc:	e0bfea17 	ldw	r2,-88(fp)
     7e0:	100490fa 	slli	r2,r2,3
     7e4:	e17fed17 	ldw	r5,-76(fp)
     7e8:	2885883a 	add	r2,r5,r2
     7ec:	20c7ffb2 	custom	254,r3,r4,r3
     7f0:	10c00115 	stw	r3,4(r2)
            Fout[m3].r = scratch[5].r - scratch[4].i;
     7f4:	e13ff817 	ldw	r4,-32(fp)
     7f8:	e0fff717 	ldw	r3,-36(fp)
     7fc:	e0bffa17 	ldw	r2,-24(fp)
     800:	100490fa 	slli	r2,r2,3
     804:	e17fed17 	ldw	r5,-76(fp)
     808:	2885883a 	add	r2,r5,r2
     80c:	20c7ffb2 	custom	254,r3,r4,r3
     810:	10c00015 	stw	r3,0(r2)
            Fout[m3].i = scratch[5].i + scratch[4].r;
     814:	e13ff917 	ldw	r4,-28(fp)
     818:	e0fff617 	ldw	r3,-40(fp)
     81c:	e0bffa17 	ldw	r2,-24(fp)
     820:	100490fa 	slli	r2,r2,3
     824:	e17fed17 	ldw	r5,-76(fp)
     828:	2885883a 	add	r2,r5,r2
     82c:	20c7ff72 	custom	253,r3,r4,r3
     830:	10c00115 	stw	r3,4(r2)
        }
        ++Fout;
     834:	e0bfed17 	ldw	r2,-76(fp)
     838:	10800204 	addi	r2,r2,8
     83c:	e0bfed15 	stw	r2,-76(fp)
    }while(--k);
     840:	e0bffc17 	ldw	r2,-16(fp)
     844:	10bfffc4 	addi	r2,r2,-1
     848:	e0bffc15 	stw	r2,-16(fp)
     84c:	e0bffc17 	ldw	r2,-16(fp)
     850:	103ef11e 	bne	r2,zero,418 <kf_bfly4+0x60>
}
     854:	0001883a 	nop
     858:	0001883a 	nop
     85c:	e037883a 	mov	sp,fp
     860:	df000017 	ldw	fp,0(sp)
     864:	dec00104 	addi	sp,sp,4
     868:	f800283a 	ret

0000086c <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
     86c:	deffea04 	addi	sp,sp,-88
     870:	dfc01515 	stw	ra,84(sp)
     874:	df001415 	stw	fp,80(sp)
     878:	df001404 	addi	fp,sp,80
     87c:	e13fef15 	stw	r4,-68(fp)
     880:	e17fee15 	stw	r5,-72(fp)
     884:	e1bfed15 	stw	r6,-76(fp)
     888:	e1ffec15 	stw	r7,-80(fp)
     size_t k=m;
     88c:	e0bfec17 	ldw	r2,-80(fp)
     890:	e0bfff15 	stw	r2,-4(fp)
     const size_t m2 = 2*m;
     894:	e0bfec17 	ldw	r2,-80(fp)
     898:	1085883a 	add	r2,r2,r2
     89c:	e0bffc15 	stw	r2,-16(fp)
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
     8a0:	e17fec17 	ldw	r5,-80(fp)
     8a4:	e13fee17 	ldw	r4,-72(fp)
     8a8:	000714c0 	call	714c <__mulsi3>
     8ac:	e0ffed17 	ldw	r3,-76(fp)
     8b0:	10800844 	addi	r2,r2,33
     8b4:	100490fa 	slli	r2,r2,3
     8b8:	1885883a 	add	r2,r3,r2
     8bc:	10c00017 	ldw	r3,0(r2)
     8c0:	e0fff015 	stw	r3,-64(fp)
     8c4:	10800117 	ldw	r2,4(r2)
     8c8:	e0bff115 	stw	r2,-60(fp)

     tw1=tw2=st->twiddles;
     8cc:	e0bfed17 	ldw	r2,-76(fp)
     8d0:	10804204 	addi	r2,r2,264
     8d4:	e0bffd15 	stw	r2,-12(fp)
     8d8:	e0bffd17 	ldw	r2,-12(fp)
     8dc:	e0bffe15 	stw	r2,-8(fp)

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
     8e0:	e0bfec17 	ldw	r2,-80(fp)
     8e4:	100490fa 	slli	r2,r2,3
     8e8:	e0ffef17 	ldw	r3,-68(fp)
     8ec:	1885883a 	add	r2,r3,r2
     8f0:	10c00017 	ldw	r3,0(r2)
     8f4:	e13ffe17 	ldw	r4,-8(fp)
     8f8:	20800017 	ldw	r2,0(r4)
     8fc:	1887ff32 	custom	252,r3,r3,r2
     900:	e0bfec17 	ldw	r2,-80(fp)
     904:	100490fa 	slli	r2,r2,3
     908:	e13fef17 	ldw	r4,-68(fp)
     90c:	2085883a 	add	r2,r4,r2
     910:	11000117 	ldw	r4,4(r2)
     914:	e17ffe17 	ldw	r5,-8(fp)
     918:	28800117 	ldw	r2,4(r5)
     91c:	2085ff32 	custom	252,r2,r4,r2
     920:	1885ffb2 	custom	254,r2,r3,r2
     924:	e0bff415 	stw	r2,-48(fp)
     928:	e0bfec17 	ldw	r2,-80(fp)
     92c:	100490fa 	slli	r2,r2,3
     930:	e0ffef17 	ldw	r3,-68(fp)
     934:	1885883a 	add	r2,r3,r2
     938:	10c00017 	ldw	r3,0(r2)
     93c:	e13ffe17 	ldw	r4,-8(fp)
     940:	20800117 	ldw	r2,4(r4)
     944:	1887ff32 	custom	252,r3,r3,r2
     948:	e0bfec17 	ldw	r2,-80(fp)
     94c:	100490fa 	slli	r2,r2,3
     950:	e13fef17 	ldw	r4,-68(fp)
     954:	2085883a 	add	r2,r4,r2
     958:	11000117 	ldw	r4,4(r2)
     95c:	e17ffe17 	ldw	r5,-8(fp)
     960:	28800017 	ldw	r2,0(r5)
     964:	2085ff32 	custom	252,r2,r4,r2
     968:	1885ff72 	custom	253,r2,r3,r2
     96c:	e0bff515 	stw	r2,-44(fp)
         C_MUL(scratch[2],Fout[m2] , *tw2);
     970:	e0bffc17 	ldw	r2,-16(fp)
     974:	100490fa 	slli	r2,r2,3
     978:	e0ffef17 	ldw	r3,-68(fp)
     97c:	1885883a 	add	r2,r3,r2
     980:	10c00017 	ldw	r3,0(r2)
     984:	e13ffd17 	ldw	r4,-12(fp)
     988:	20800017 	ldw	r2,0(r4)
     98c:	1887ff32 	custom	252,r3,r3,r2
     990:	e0bffc17 	ldw	r2,-16(fp)
     994:	100490fa 	slli	r2,r2,3
     998:	e13fef17 	ldw	r4,-68(fp)
     99c:	2085883a 	add	r2,r4,r2
     9a0:	11000117 	ldw	r4,4(r2)
     9a4:	e17ffd17 	ldw	r5,-12(fp)
     9a8:	28800117 	ldw	r2,4(r5)
     9ac:	2085ff32 	custom	252,r2,r4,r2
     9b0:	1885ffb2 	custom	254,r2,r3,r2
     9b4:	e0bff615 	stw	r2,-40(fp)
     9b8:	e0bffc17 	ldw	r2,-16(fp)
     9bc:	100490fa 	slli	r2,r2,3
     9c0:	e0ffef17 	ldw	r3,-68(fp)
     9c4:	1885883a 	add	r2,r3,r2
     9c8:	10c00017 	ldw	r3,0(r2)
     9cc:	e13ffd17 	ldw	r4,-12(fp)
     9d0:	20800117 	ldw	r2,4(r4)
     9d4:	1887ff32 	custom	252,r3,r3,r2
     9d8:	e0bffc17 	ldw	r2,-16(fp)
     9dc:	100490fa 	slli	r2,r2,3
     9e0:	e13fef17 	ldw	r4,-68(fp)
     9e4:	2085883a 	add	r2,r4,r2
     9e8:	11000117 	ldw	r4,4(r2)
     9ec:	e17ffd17 	ldw	r5,-12(fp)
     9f0:	28800017 	ldw	r2,0(r5)
     9f4:	2085ff32 	custom	252,r2,r4,r2
     9f8:	1885ff72 	custom	253,r2,r3,r2
     9fc:	e0bff715 	stw	r2,-36(fp)

         C_ADD(scratch[3],scratch[1],scratch[2]);
     a00:	e0fff417 	ldw	r3,-48(fp)
     a04:	e0bff617 	ldw	r2,-40(fp)
     a08:	1885ff72 	custom	253,r2,r3,r2
     a0c:	e0bff815 	stw	r2,-32(fp)
     a10:	e0fff517 	ldw	r3,-44(fp)
     a14:	e0bff717 	ldw	r2,-36(fp)
     a18:	1885ff72 	custom	253,r2,r3,r2
     a1c:	e0bff915 	stw	r2,-28(fp)
         C_SUB(scratch[0],scratch[1],scratch[2]);
     a20:	e0fff417 	ldw	r3,-48(fp)
     a24:	e0bff617 	ldw	r2,-40(fp)
     a28:	1885ffb2 	custom	254,r2,r3,r2
     a2c:	e0bff215 	stw	r2,-56(fp)
     a30:	e0fff517 	ldw	r3,-44(fp)
     a34:	e0bff717 	ldw	r2,-36(fp)
     a38:	1885ffb2 	custom	254,r2,r3,r2
     a3c:	e0bff315 	stw	r2,-52(fp)
         tw1 += fstride;
     a40:	e0bfee17 	ldw	r2,-72(fp)
     a44:	100490fa 	slli	r2,r2,3
     a48:	e0fffe17 	ldw	r3,-8(fp)
     a4c:	1885883a 	add	r2,r3,r2
     a50:	e0bffe15 	stw	r2,-8(fp)
         tw2 += fstride*2;
     a54:	e0bfee17 	ldw	r2,-72(fp)
     a58:	1004913a 	slli	r2,r2,4
     a5c:	e0fffd17 	ldw	r3,-12(fp)
     a60:	1885883a 	add	r2,r3,r2
     a64:	e0bffd15 	stw	r2,-12(fp)

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
     a68:	e0bfef17 	ldw	r2,-68(fp)
     a6c:	11000017 	ldw	r4,0(r2)
     a70:	e0fff817 	ldw	r3,-32(fp)
     a74:	008fc034 	movhi	r2,16128
     a78:	1887ff32 	custom	252,r3,r3,r2
     a7c:	e0bfec17 	ldw	r2,-80(fp)
     a80:	100490fa 	slli	r2,r2,3
     a84:	e17fef17 	ldw	r5,-68(fp)
     a88:	2885883a 	add	r2,r5,r2
     a8c:	20c7ffb2 	custom	254,r3,r4,r3
     a90:	10c00015 	stw	r3,0(r2)
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
     a94:	e0bfef17 	ldw	r2,-68(fp)
     a98:	11000117 	ldw	r4,4(r2)
     a9c:	e0fff917 	ldw	r3,-28(fp)
     aa0:	008fc034 	movhi	r2,16128
     aa4:	1887ff32 	custom	252,r3,r3,r2
     aa8:	e0bfec17 	ldw	r2,-80(fp)
     aac:	100490fa 	slli	r2,r2,3
     ab0:	e17fef17 	ldw	r5,-68(fp)
     ab4:	2885883a 	add	r2,r5,r2
     ab8:	20c7ffb2 	custom	254,r3,r4,r3
     abc:	10c00115 	stw	r3,4(r2)

         C_MULBYSCALAR( scratch[0] , epi3.i );
     ac0:	e0fff217 	ldw	r3,-56(fp)
     ac4:	e0bff117 	ldw	r2,-60(fp)
     ac8:	1885ff32 	custom	252,r2,r3,r2
     acc:	e0bff215 	stw	r2,-56(fp)
     ad0:	e0fff317 	ldw	r3,-52(fp)
     ad4:	e0bff117 	ldw	r2,-60(fp)
     ad8:	1885ff32 	custom	252,r2,r3,r2
     adc:	e0bff315 	stw	r2,-52(fp)

         C_ADDTO(*Fout,scratch[3]);
     ae0:	e0bfef17 	ldw	r2,-68(fp)
     ae4:	10c00017 	ldw	r3,0(r2)
     ae8:	e0bff817 	ldw	r2,-32(fp)
     aec:	1887ff72 	custom	253,r3,r3,r2
     af0:	e0bfef17 	ldw	r2,-68(fp)
     af4:	10c00015 	stw	r3,0(r2)
     af8:	e0bfef17 	ldw	r2,-68(fp)
     afc:	10c00117 	ldw	r3,4(r2)
     b00:	e0bff917 	ldw	r2,-28(fp)
     b04:	1887ff72 	custom	253,r3,r3,r2
     b08:	e0bfef17 	ldw	r2,-68(fp)
     b0c:	10c00115 	stw	r3,4(r2)

         Fout[m2].r = Fout[m].r + scratch[0].i;
     b10:	e0bfec17 	ldw	r2,-80(fp)
     b14:	100490fa 	slli	r2,r2,3
     b18:	e0ffef17 	ldw	r3,-68(fp)
     b1c:	1885883a 	add	r2,r3,r2
     b20:	11000017 	ldw	r4,0(r2)
     b24:	e0fff317 	ldw	r3,-52(fp)
     b28:	e0bffc17 	ldw	r2,-16(fp)
     b2c:	100490fa 	slli	r2,r2,3
     b30:	e17fef17 	ldw	r5,-68(fp)
     b34:	2885883a 	add	r2,r5,r2
     b38:	20c7ff72 	custom	253,r3,r4,r3
     b3c:	10c00015 	stw	r3,0(r2)
         Fout[m2].i = Fout[m].i - scratch[0].r;
     b40:	e0bfec17 	ldw	r2,-80(fp)
     b44:	100490fa 	slli	r2,r2,3
     b48:	e0ffef17 	ldw	r3,-68(fp)
     b4c:	1885883a 	add	r2,r3,r2
     b50:	11000117 	ldw	r4,4(r2)
     b54:	e0fff217 	ldw	r3,-56(fp)
     b58:	e0bffc17 	ldw	r2,-16(fp)
     b5c:	100490fa 	slli	r2,r2,3
     b60:	e17fef17 	ldw	r5,-68(fp)
     b64:	2885883a 	add	r2,r5,r2
     b68:	20c7ffb2 	custom	254,r3,r4,r3
     b6c:	10c00115 	stw	r3,4(r2)

         Fout[m].r -= scratch[0].i;
     b70:	e0bfec17 	ldw	r2,-80(fp)
     b74:	100490fa 	slli	r2,r2,3
     b78:	e0ffef17 	ldw	r3,-68(fp)
     b7c:	1885883a 	add	r2,r3,r2
     b80:	11000017 	ldw	r4,0(r2)
     b84:	e0fff317 	ldw	r3,-52(fp)
     b88:	e0bfec17 	ldw	r2,-80(fp)
     b8c:	100490fa 	slli	r2,r2,3
     b90:	e17fef17 	ldw	r5,-68(fp)
     b94:	2885883a 	add	r2,r5,r2
     b98:	20c7ffb2 	custom	254,r3,r4,r3
     b9c:	10c00015 	stw	r3,0(r2)
         Fout[m].i += scratch[0].r;
     ba0:	e0bfec17 	ldw	r2,-80(fp)
     ba4:	100490fa 	slli	r2,r2,3
     ba8:	e0ffef17 	ldw	r3,-68(fp)
     bac:	1885883a 	add	r2,r3,r2
     bb0:	11000117 	ldw	r4,4(r2)
     bb4:	e0fff217 	ldw	r3,-56(fp)
     bb8:	e0bfec17 	ldw	r2,-80(fp)
     bbc:	100490fa 	slli	r2,r2,3
     bc0:	e17fef17 	ldw	r5,-68(fp)
     bc4:	2885883a 	add	r2,r5,r2
     bc8:	20c7ff72 	custom	253,r3,r4,r3
     bcc:	10c00115 	stw	r3,4(r2)

         ++Fout;
     bd0:	e0bfef17 	ldw	r2,-68(fp)
     bd4:	10800204 	addi	r2,r2,8
     bd8:	e0bfef15 	stw	r2,-68(fp)
     }while(--k);
     bdc:	e0bfff17 	ldw	r2,-4(fp)
     be0:	10bfffc4 	addi	r2,r2,-1
     be4:	e0bfff15 	stw	r2,-4(fp)
     be8:	e0bfff17 	ldw	r2,-4(fp)
     bec:	103f3c1e 	bne	r2,zero,8e0 <kf_bfly3+0x74>
}
     bf0:	0001883a 	nop
     bf4:	0001883a 	nop
     bf8:	e037883a 	mov	sp,fp
     bfc:	dfc00117 	ldw	ra,4(sp)
     c00:	df000017 	ldw	fp,0(sp)
     c04:	dec00204 	addi	sp,sp,8
     c08:	f800283a 	ret

00000c0c <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
     c0c:	deffd204 	addi	sp,sp,-184
     c10:	dfc02d15 	stw	ra,180(sp)
     c14:	df002c15 	stw	fp,176(sp)
     c18:	dc402b15 	stw	r17,172(sp)
     c1c:	dc002a15 	stw	r16,168(sp)
     c20:	df002c04 	addi	fp,sp,176
     c24:	e13fd715 	stw	r4,-164(fp)
     c28:	e17fd615 	stw	r5,-168(fp)
     c2c:	e1bfd515 	stw	r6,-172(fp)
     c30:	e1ffd415 	stw	r7,-176(fp)
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
     c34:	e0bfd517 	ldw	r2,-172(fp)
     c38:	10804204 	addi	r2,r2,264
     c3c:	e0bff715 	stw	r2,-36(fp)
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
     c40:	e0bfd417 	ldw	r2,-176(fp)
     c44:	e17fd617 	ldw	r5,-168(fp)
     c48:	1009883a 	mov	r4,r2
     c4c:	000714c0 	call	714c <__mulsi3>
     c50:	100490fa 	slli	r2,r2,3
     c54:	e0fff717 	ldw	r3,-36(fp)
     c58:	1885883a 	add	r2,r3,r2
     c5c:	10c00017 	ldw	r3,0(r2)
     c60:	e0ffda15 	stw	r3,-152(fp)
     c64:	10800117 	ldw	r2,4(r2)
     c68:	e0bfdb15 	stw	r2,-148(fp)
    yb = twiddles[fstride*2*m];
     c6c:	e0bfd417 	ldw	r2,-176(fp)
     c70:	e17fd617 	ldw	r5,-168(fp)
     c74:	1009883a 	mov	r4,r2
     c78:	000714c0 	call	714c <__mulsi3>
     c7c:	1004913a 	slli	r2,r2,4
     c80:	e0fff717 	ldw	r3,-36(fp)
     c84:	1885883a 	add	r2,r3,r2
     c88:	10c00017 	ldw	r3,0(r2)
     c8c:	e0ffd815 	stw	r3,-160(fp)
     c90:	10800117 	ldw	r2,4(r2)
     c94:	e0bfd915 	stw	r2,-156(fp)

    Fout0=Fout;
     c98:	e0bfd717 	ldw	r2,-164(fp)
     c9c:	e0bffd15 	stw	r2,-12(fp)
    Fout1=Fout0+m;
     ca0:	e0bfd417 	ldw	r2,-176(fp)
     ca4:	100490fa 	slli	r2,r2,3
     ca8:	e0fffd17 	ldw	r3,-12(fp)
     cac:	1885883a 	add	r2,r3,r2
     cb0:	e0bffc15 	stw	r2,-16(fp)
    Fout2=Fout0+2*m;
     cb4:	e0bfd417 	ldw	r2,-176(fp)
     cb8:	1004913a 	slli	r2,r2,4
     cbc:	e0fffd17 	ldw	r3,-12(fp)
     cc0:	1885883a 	add	r2,r3,r2
     cc4:	e0bffb15 	stw	r2,-20(fp)
    Fout3=Fout0+3*m;
     cc8:	e0ffd417 	ldw	r3,-176(fp)
     ccc:	1805883a 	mov	r2,r3
     cd0:	1085883a 	add	r2,r2,r2
     cd4:	10c5883a 	add	r2,r2,r3
     cd8:	100490fa 	slli	r2,r2,3
     cdc:	1007883a 	mov	r3,r2
     ce0:	e0bffd17 	ldw	r2,-12(fp)
     ce4:	10c5883a 	add	r2,r2,r3
     ce8:	e0bffa15 	stw	r2,-24(fp)
    Fout4=Fout0+4*m;
     cec:	e0bfd417 	ldw	r2,-176(fp)
     cf0:	1004917a 	slli	r2,r2,5
     cf4:	e0fffd17 	ldw	r3,-12(fp)
     cf8:	1885883a 	add	r2,r3,r2
     cfc:	e0bff915 	stw	r2,-28(fp)

    tw=st->twiddles;
     d00:	e0bfd517 	ldw	r2,-172(fp)
     d04:	10804204 	addi	r2,r2,264
     d08:	e0bff615 	stw	r2,-40(fp)
    for ( u=0; u<m; ++u ) {
     d0c:	e03ff815 	stw	zero,-32(fp)
     d10:	00018c06 	br	1344 <kf_bfly5+0x738>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
     d14:	e0bffd17 	ldw	r2,-12(fp)
     d18:	10c00017 	ldw	r3,0(r2)
     d1c:	e0ffdc15 	stw	r3,-144(fp)
     d20:	10800117 	ldw	r2,4(r2)
     d24:	e0bfdd15 	stw	r2,-140(fp)

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
     d28:	e0bffc17 	ldw	r2,-16(fp)
     d2c:	14000017 	ldw	r16,0(r2)
     d30:	e0bff817 	ldw	r2,-32(fp)
     d34:	e17fd617 	ldw	r5,-168(fp)
     d38:	1009883a 	mov	r4,r2
     d3c:	000714c0 	call	714c <__mulsi3>
     d40:	100490fa 	slli	r2,r2,3
     d44:	e0fff617 	ldw	r3,-40(fp)
     d48:	1887883a 	add	r3,r3,r2
     d4c:	18800017 	ldw	r2,0(r3)
     d50:	80a1ff32 	custom	252,r16,r16,r2
     d54:	e0bffc17 	ldw	r2,-16(fp)
     d58:	14400117 	ldw	r17,4(r2)
     d5c:	e0bff817 	ldw	r2,-32(fp)
     d60:	e17fd617 	ldw	r5,-168(fp)
     d64:	1009883a 	mov	r4,r2
     d68:	000714c0 	call	714c <__mulsi3>
     d6c:	100490fa 	slli	r2,r2,3
     d70:	e0fff617 	ldw	r3,-40(fp)
     d74:	1887883a 	add	r3,r3,r2
     d78:	18800117 	ldw	r2,4(r3)
     d7c:	8885ff32 	custom	252,r2,r17,r2
     d80:	8085ffb2 	custom	254,r2,r16,r2
     d84:	e0bfde15 	stw	r2,-136(fp)
     d88:	e0bffc17 	ldw	r2,-16(fp)
     d8c:	14000017 	ldw	r16,0(r2)
     d90:	e0bff817 	ldw	r2,-32(fp)
     d94:	e17fd617 	ldw	r5,-168(fp)
     d98:	1009883a 	mov	r4,r2
     d9c:	000714c0 	call	714c <__mulsi3>
     da0:	100490fa 	slli	r2,r2,3
     da4:	e0fff617 	ldw	r3,-40(fp)
     da8:	1887883a 	add	r3,r3,r2
     dac:	18800117 	ldw	r2,4(r3)
     db0:	80a1ff32 	custom	252,r16,r16,r2
     db4:	e0bffc17 	ldw	r2,-16(fp)
     db8:	14400117 	ldw	r17,4(r2)
     dbc:	e0bff817 	ldw	r2,-32(fp)
     dc0:	e17fd617 	ldw	r5,-168(fp)
     dc4:	1009883a 	mov	r4,r2
     dc8:	000714c0 	call	714c <__mulsi3>
     dcc:	100490fa 	slli	r2,r2,3
     dd0:	e0fff617 	ldw	r3,-40(fp)
     dd4:	1887883a 	add	r3,r3,r2
     dd8:	18800017 	ldw	r2,0(r3)
     ddc:	8885ff32 	custom	252,r2,r17,r2
     de0:	8085ff72 	custom	253,r2,r16,r2
     de4:	e0bfdf15 	stw	r2,-132(fp)
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
     de8:	e0bffb17 	ldw	r2,-20(fp)
     dec:	14000017 	ldw	r16,0(r2)
     df0:	e0bff817 	ldw	r2,-32(fp)
     df4:	e17fd617 	ldw	r5,-168(fp)
     df8:	1009883a 	mov	r4,r2
     dfc:	000714c0 	call	714c <__mulsi3>
     e00:	1004913a 	slli	r2,r2,4
     e04:	e0fff617 	ldw	r3,-40(fp)
     e08:	1887883a 	add	r3,r3,r2
     e0c:	18800017 	ldw	r2,0(r3)
     e10:	80a1ff32 	custom	252,r16,r16,r2
     e14:	e0bffb17 	ldw	r2,-20(fp)
     e18:	14400117 	ldw	r17,4(r2)
     e1c:	e0bff817 	ldw	r2,-32(fp)
     e20:	e17fd617 	ldw	r5,-168(fp)
     e24:	1009883a 	mov	r4,r2
     e28:	000714c0 	call	714c <__mulsi3>
     e2c:	1004913a 	slli	r2,r2,4
     e30:	e0fff617 	ldw	r3,-40(fp)
     e34:	1887883a 	add	r3,r3,r2
     e38:	18800117 	ldw	r2,4(r3)
     e3c:	8885ff32 	custom	252,r2,r17,r2
     e40:	8085ffb2 	custom	254,r2,r16,r2
     e44:	e0bfe015 	stw	r2,-128(fp)
     e48:	e0bffb17 	ldw	r2,-20(fp)
     e4c:	14000017 	ldw	r16,0(r2)
     e50:	e0bff817 	ldw	r2,-32(fp)
     e54:	e17fd617 	ldw	r5,-168(fp)
     e58:	1009883a 	mov	r4,r2
     e5c:	000714c0 	call	714c <__mulsi3>
     e60:	1004913a 	slli	r2,r2,4
     e64:	e0fff617 	ldw	r3,-40(fp)
     e68:	1887883a 	add	r3,r3,r2
     e6c:	18800117 	ldw	r2,4(r3)
     e70:	80a1ff32 	custom	252,r16,r16,r2
     e74:	e0bffb17 	ldw	r2,-20(fp)
     e78:	14400117 	ldw	r17,4(r2)
     e7c:	e0bff817 	ldw	r2,-32(fp)
     e80:	e17fd617 	ldw	r5,-168(fp)
     e84:	1009883a 	mov	r4,r2
     e88:	000714c0 	call	714c <__mulsi3>
     e8c:	1004913a 	slli	r2,r2,4
     e90:	e0fff617 	ldw	r3,-40(fp)
     e94:	1887883a 	add	r3,r3,r2
     e98:	18800017 	ldw	r2,0(r3)
     e9c:	8885ff32 	custom	252,r2,r17,r2
     ea0:	8085ff72 	custom	253,r2,r16,r2
     ea4:	e0bfe115 	stw	r2,-124(fp)
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
     ea8:	e0bffa17 	ldw	r2,-24(fp)
     eac:	14000017 	ldw	r16,0(r2)
     eb0:	e0bff817 	ldw	r2,-32(fp)
     eb4:	e17fd617 	ldw	r5,-168(fp)
     eb8:	1009883a 	mov	r4,r2
     ebc:	000714c0 	call	714c <__mulsi3>
     ec0:	1007883a 	mov	r3,r2
     ec4:	1805883a 	mov	r2,r3
     ec8:	1085883a 	add	r2,r2,r2
     ecc:	10c5883a 	add	r2,r2,r3
     ed0:	100490fa 	slli	r2,r2,3
     ed4:	1007883a 	mov	r3,r2
     ed8:	e0bff617 	ldw	r2,-40(fp)
     edc:	10c7883a 	add	r3,r2,r3
     ee0:	18800017 	ldw	r2,0(r3)
     ee4:	80a1ff32 	custom	252,r16,r16,r2
     ee8:	e0bffa17 	ldw	r2,-24(fp)
     eec:	14400117 	ldw	r17,4(r2)
     ef0:	e0bff817 	ldw	r2,-32(fp)
     ef4:	e17fd617 	ldw	r5,-168(fp)
     ef8:	1009883a 	mov	r4,r2
     efc:	000714c0 	call	714c <__mulsi3>
     f00:	1007883a 	mov	r3,r2
     f04:	1805883a 	mov	r2,r3
     f08:	1085883a 	add	r2,r2,r2
     f0c:	10c5883a 	add	r2,r2,r3
     f10:	100490fa 	slli	r2,r2,3
     f14:	1007883a 	mov	r3,r2
     f18:	e0bff617 	ldw	r2,-40(fp)
     f1c:	10c7883a 	add	r3,r2,r3
     f20:	18800117 	ldw	r2,4(r3)
     f24:	8885ff32 	custom	252,r2,r17,r2
     f28:	8085ffb2 	custom	254,r2,r16,r2
     f2c:	e0bfe215 	stw	r2,-120(fp)
     f30:	e0bffa17 	ldw	r2,-24(fp)
     f34:	14000017 	ldw	r16,0(r2)
     f38:	e0bff817 	ldw	r2,-32(fp)
     f3c:	e17fd617 	ldw	r5,-168(fp)
     f40:	1009883a 	mov	r4,r2
     f44:	000714c0 	call	714c <__mulsi3>
     f48:	1007883a 	mov	r3,r2
     f4c:	1805883a 	mov	r2,r3
     f50:	1085883a 	add	r2,r2,r2
     f54:	10c5883a 	add	r2,r2,r3
     f58:	100490fa 	slli	r2,r2,3
     f5c:	1007883a 	mov	r3,r2
     f60:	e0bff617 	ldw	r2,-40(fp)
     f64:	10c7883a 	add	r3,r2,r3
     f68:	18800117 	ldw	r2,4(r3)
     f6c:	80a1ff32 	custom	252,r16,r16,r2
     f70:	e0bffa17 	ldw	r2,-24(fp)
     f74:	14400117 	ldw	r17,4(r2)
     f78:	e0bff817 	ldw	r2,-32(fp)
     f7c:	e17fd617 	ldw	r5,-168(fp)
     f80:	1009883a 	mov	r4,r2
     f84:	000714c0 	call	714c <__mulsi3>
     f88:	1007883a 	mov	r3,r2
     f8c:	1805883a 	mov	r2,r3
     f90:	1085883a 	add	r2,r2,r2
     f94:	10c5883a 	add	r2,r2,r3
     f98:	100490fa 	slli	r2,r2,3
     f9c:	1007883a 	mov	r3,r2
     fa0:	e0bff617 	ldw	r2,-40(fp)
     fa4:	10c7883a 	add	r3,r2,r3
     fa8:	18800017 	ldw	r2,0(r3)
     fac:	8885ff32 	custom	252,r2,r17,r2
     fb0:	8085ff72 	custom	253,r2,r16,r2
     fb4:	e0bfe315 	stw	r2,-116(fp)
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
     fb8:	e0bff917 	ldw	r2,-28(fp)
     fbc:	14000017 	ldw	r16,0(r2)
     fc0:	e0bff817 	ldw	r2,-32(fp)
     fc4:	e17fd617 	ldw	r5,-168(fp)
     fc8:	1009883a 	mov	r4,r2
     fcc:	000714c0 	call	714c <__mulsi3>
     fd0:	1004917a 	slli	r2,r2,5
     fd4:	e0fff617 	ldw	r3,-40(fp)
     fd8:	1887883a 	add	r3,r3,r2
     fdc:	18800017 	ldw	r2,0(r3)
     fe0:	80a1ff32 	custom	252,r16,r16,r2
     fe4:	e0bff917 	ldw	r2,-28(fp)
     fe8:	14400117 	ldw	r17,4(r2)
     fec:	e0bff817 	ldw	r2,-32(fp)
     ff0:	e17fd617 	ldw	r5,-168(fp)
     ff4:	1009883a 	mov	r4,r2
     ff8:	000714c0 	call	714c <__mulsi3>
     ffc:	1004917a 	slli	r2,r2,5
    1000:	e0fff617 	ldw	r3,-40(fp)
    1004:	1887883a 	add	r3,r3,r2
    1008:	18800117 	ldw	r2,4(r3)
    100c:	8885ff32 	custom	252,r2,r17,r2
    1010:	8085ffb2 	custom	254,r2,r16,r2
    1014:	e0bfe415 	stw	r2,-112(fp)
    1018:	e0bff917 	ldw	r2,-28(fp)
    101c:	14000017 	ldw	r16,0(r2)
    1020:	e0bff817 	ldw	r2,-32(fp)
    1024:	e17fd617 	ldw	r5,-168(fp)
    1028:	1009883a 	mov	r4,r2
    102c:	000714c0 	call	714c <__mulsi3>
    1030:	1004917a 	slli	r2,r2,5
    1034:	e0fff617 	ldw	r3,-40(fp)
    1038:	1887883a 	add	r3,r3,r2
    103c:	18800117 	ldw	r2,4(r3)
    1040:	80a1ff32 	custom	252,r16,r16,r2
    1044:	e0bff917 	ldw	r2,-28(fp)
    1048:	14400117 	ldw	r17,4(r2)
    104c:	e0bff817 	ldw	r2,-32(fp)
    1050:	e17fd617 	ldw	r5,-168(fp)
    1054:	1009883a 	mov	r4,r2
    1058:	000714c0 	call	714c <__mulsi3>
    105c:	1004917a 	slli	r2,r2,5
    1060:	e0fff617 	ldw	r3,-40(fp)
    1064:	1887883a 	add	r3,r3,r2
    1068:	18800017 	ldw	r2,0(r3)
    106c:	8885ff32 	custom	252,r2,r17,r2
    1070:	8085ff72 	custom	253,r2,r16,r2
    1074:	e0bfe515 	stw	r2,-108(fp)

        C_ADD( scratch[7],scratch[1],scratch[4]);
    1078:	e0ffde17 	ldw	r3,-136(fp)
    107c:	e0bfe417 	ldw	r2,-112(fp)
    1080:	1885ff72 	custom	253,r2,r3,r2
    1084:	e0bfea15 	stw	r2,-88(fp)
    1088:	e0ffdf17 	ldw	r3,-132(fp)
    108c:	e0bfe517 	ldw	r2,-108(fp)
    1090:	1885ff72 	custom	253,r2,r3,r2
    1094:	e0bfeb15 	stw	r2,-84(fp)
        C_SUB( scratch[10],scratch[1],scratch[4]);
    1098:	e0ffde17 	ldw	r3,-136(fp)
    109c:	e0bfe417 	ldw	r2,-112(fp)
    10a0:	1885ffb2 	custom	254,r2,r3,r2
    10a4:	e0bff015 	stw	r2,-64(fp)
    10a8:	e0ffdf17 	ldw	r3,-132(fp)
    10ac:	e0bfe517 	ldw	r2,-108(fp)
    10b0:	1885ffb2 	custom	254,r2,r3,r2
    10b4:	e0bff115 	stw	r2,-60(fp)
        C_ADD( scratch[8],scratch[2],scratch[3]);
    10b8:	e0ffe017 	ldw	r3,-128(fp)
    10bc:	e0bfe217 	ldw	r2,-120(fp)
    10c0:	1885ff72 	custom	253,r2,r3,r2
    10c4:	e0bfec15 	stw	r2,-80(fp)
    10c8:	e0ffe117 	ldw	r3,-124(fp)
    10cc:	e0bfe317 	ldw	r2,-116(fp)
    10d0:	1885ff72 	custom	253,r2,r3,r2
    10d4:	e0bfed15 	stw	r2,-76(fp)
        C_SUB( scratch[9],scratch[2],scratch[3]);
    10d8:	e0ffe017 	ldw	r3,-128(fp)
    10dc:	e0bfe217 	ldw	r2,-120(fp)
    10e0:	1885ffb2 	custom	254,r2,r3,r2
    10e4:	e0bfee15 	stw	r2,-72(fp)
    10e8:	e0ffe117 	ldw	r3,-124(fp)
    10ec:	e0bfe317 	ldw	r2,-116(fp)
    10f0:	1885ffb2 	custom	254,r2,r3,r2
    10f4:	e0bfef15 	stw	r2,-68(fp)

        Fout0->r += scratch[7].r + scratch[8].r;
    10f8:	e0bffd17 	ldw	r2,-12(fp)
    10fc:	10c00017 	ldw	r3,0(r2)
    1100:	e13fea17 	ldw	r4,-88(fp)
    1104:	e0bfec17 	ldw	r2,-80(fp)
    1108:	2085ff72 	custom	253,r2,r4,r2
    110c:	1887ff72 	custom	253,r3,r3,r2
    1110:	e0bffd17 	ldw	r2,-12(fp)
    1114:	10c00015 	stw	r3,0(r2)
        Fout0->i += scratch[7].i + scratch[8].i;
    1118:	e0bffd17 	ldw	r2,-12(fp)
    111c:	10c00117 	ldw	r3,4(r2)
    1120:	e13feb17 	ldw	r4,-84(fp)
    1124:	e0bfed17 	ldw	r2,-76(fp)
    1128:	2085ff72 	custom	253,r2,r4,r2
    112c:	1887ff72 	custom	253,r3,r3,r2
    1130:	e0bffd17 	ldw	r2,-12(fp)
    1134:	10c00115 	stw	r3,4(r2)

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    1138:	e0ffdc17 	ldw	r3,-144(fp)
    113c:	e13fea17 	ldw	r4,-88(fp)
    1140:	e0bfda17 	ldw	r2,-152(fp)
    1144:	2085ff32 	custom	252,r2,r4,r2
    1148:	1887ff72 	custom	253,r3,r3,r2
    114c:	e13fec17 	ldw	r4,-80(fp)
    1150:	e0bfd817 	ldw	r2,-160(fp)
    1154:	2085ff32 	custom	252,r2,r4,r2
    1158:	1885ff72 	custom	253,r2,r3,r2
    115c:	e0bfe615 	stw	r2,-104(fp)
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    1160:	e0ffdd17 	ldw	r3,-140(fp)
    1164:	e13feb17 	ldw	r4,-84(fp)
    1168:	e0bfda17 	ldw	r2,-152(fp)
    116c:	2085ff32 	custom	252,r2,r4,r2
    1170:	1887ff72 	custom	253,r3,r3,r2
    1174:	e13fed17 	ldw	r4,-76(fp)
    1178:	e0bfd817 	ldw	r2,-160(fp)
    117c:	2085ff32 	custom	252,r2,r4,r2
    1180:	1885ff72 	custom	253,r2,r3,r2
    1184:	e0bfe715 	stw	r2,-100(fp)

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    1188:	e0fff117 	ldw	r3,-60(fp)
    118c:	e0bfdb17 	ldw	r2,-148(fp)
    1190:	1887ff32 	custom	252,r3,r3,r2
    1194:	e13fef17 	ldw	r4,-68(fp)
    1198:	e0bfd917 	ldw	r2,-156(fp)
    119c:	2085ff32 	custom	252,r2,r4,r2
    11a0:	1885ff72 	custom	253,r2,r3,r2
    11a4:	e0bfe815 	stw	r2,-96(fp)
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    11a8:	e0fff017 	ldw	r3,-64(fp)
    11ac:	e0bfdb17 	ldw	r2,-148(fp)
    11b0:	1885ff32 	custom	252,r2,r3,r2
    11b4:	10e0003c 	xorhi	r3,r2,32768
    11b8:	e13fee17 	ldw	r4,-72(fp)
    11bc:	e0bfd917 	ldw	r2,-156(fp)
    11c0:	2085ff32 	custom	252,r2,r4,r2
    11c4:	1885ffb2 	custom	254,r2,r3,r2
    11c8:	e0bfe915 	stw	r2,-92(fp)

        C_SUB(*Fout1,scratch[5],scratch[6]);
    11cc:	e0ffe617 	ldw	r3,-104(fp)
    11d0:	e0bfe817 	ldw	r2,-96(fp)
    11d4:	1887ffb2 	custom	254,r3,r3,r2
    11d8:	e0bffc17 	ldw	r2,-16(fp)
    11dc:	10c00015 	stw	r3,0(r2)
    11e0:	e0ffe717 	ldw	r3,-100(fp)
    11e4:	e0bfe917 	ldw	r2,-92(fp)
    11e8:	1887ffb2 	custom	254,r3,r3,r2
    11ec:	e0bffc17 	ldw	r2,-16(fp)
    11f0:	10c00115 	stw	r3,4(r2)
        C_ADD(*Fout4,scratch[5],scratch[6]);
    11f4:	e0ffe617 	ldw	r3,-104(fp)
    11f8:	e0bfe817 	ldw	r2,-96(fp)
    11fc:	1887ff72 	custom	253,r3,r3,r2
    1200:	e0bff917 	ldw	r2,-28(fp)
    1204:	10c00015 	stw	r3,0(r2)
    1208:	e0ffe717 	ldw	r3,-100(fp)
    120c:	e0bfe917 	ldw	r2,-92(fp)
    1210:	1887ff72 	custom	253,r3,r3,r2
    1214:	e0bff917 	ldw	r2,-28(fp)
    1218:	10c00115 	stw	r3,4(r2)

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    121c:	e0ffdc17 	ldw	r3,-144(fp)
    1220:	e13fea17 	ldw	r4,-88(fp)
    1224:	e0bfd817 	ldw	r2,-160(fp)
    1228:	2085ff32 	custom	252,r2,r4,r2
    122c:	1887ff72 	custom	253,r3,r3,r2
    1230:	e13fec17 	ldw	r4,-80(fp)
    1234:	e0bfda17 	ldw	r2,-152(fp)
    1238:	2085ff32 	custom	252,r2,r4,r2
    123c:	1885ff72 	custom	253,r2,r3,r2
    1240:	e0bff215 	stw	r2,-56(fp)
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    1244:	e0ffdd17 	ldw	r3,-140(fp)
    1248:	e13feb17 	ldw	r4,-84(fp)
    124c:	e0bfd817 	ldw	r2,-160(fp)
    1250:	2085ff32 	custom	252,r2,r4,r2
    1254:	1887ff72 	custom	253,r3,r3,r2
    1258:	e13fed17 	ldw	r4,-76(fp)
    125c:	e0bfda17 	ldw	r2,-152(fp)
    1260:	2085ff32 	custom	252,r2,r4,r2
    1264:	1885ff72 	custom	253,r2,r3,r2
    1268:	e0bff315 	stw	r2,-52(fp)
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    126c:	e0ffef17 	ldw	r3,-68(fp)
    1270:	e0bfdb17 	ldw	r2,-148(fp)
    1274:	1887ff32 	custom	252,r3,r3,r2
    1278:	e13ff117 	ldw	r4,-60(fp)
    127c:	e0bfd917 	ldw	r2,-156(fp)
    1280:	2085ff32 	custom	252,r2,r4,r2
    1284:	1885ffb2 	custom	254,r2,r3,r2
    1288:	e0bff415 	stw	r2,-48(fp)
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    128c:	e0fff017 	ldw	r3,-64(fp)
    1290:	e0bfd917 	ldw	r2,-156(fp)
    1294:	1887ff32 	custom	252,r3,r3,r2
    1298:	e13fee17 	ldw	r4,-72(fp)
    129c:	e0bfdb17 	ldw	r2,-148(fp)
    12a0:	2085ff32 	custom	252,r2,r4,r2
    12a4:	1885ffb2 	custom	254,r2,r3,r2
    12a8:	e0bff515 	stw	r2,-44(fp)

        C_ADD(*Fout2,scratch[11],scratch[12]);
    12ac:	e0fff217 	ldw	r3,-56(fp)
    12b0:	e0bff417 	ldw	r2,-48(fp)
    12b4:	1887ff72 	custom	253,r3,r3,r2
    12b8:	e0bffb17 	ldw	r2,-20(fp)
    12bc:	10c00015 	stw	r3,0(r2)
    12c0:	e0fff317 	ldw	r3,-52(fp)
    12c4:	e0bff517 	ldw	r2,-44(fp)
    12c8:	1887ff72 	custom	253,r3,r3,r2
    12cc:	e0bffb17 	ldw	r2,-20(fp)
    12d0:	10c00115 	stw	r3,4(r2)
        C_SUB(*Fout3,scratch[11],scratch[12]);
    12d4:	e0fff217 	ldw	r3,-56(fp)
    12d8:	e0bff417 	ldw	r2,-48(fp)
    12dc:	1887ffb2 	custom	254,r3,r3,r2
    12e0:	e0bffa17 	ldw	r2,-24(fp)
    12e4:	10c00015 	stw	r3,0(r2)
    12e8:	e0fff317 	ldw	r3,-52(fp)
    12ec:	e0bff517 	ldw	r2,-44(fp)
    12f0:	1887ffb2 	custom	254,r3,r3,r2
    12f4:	e0bffa17 	ldw	r2,-24(fp)
    12f8:	10c00115 	stw	r3,4(r2)

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
    12fc:	e0bffd17 	ldw	r2,-12(fp)
    1300:	10800204 	addi	r2,r2,8
    1304:	e0bffd15 	stw	r2,-12(fp)
    1308:	e0bffc17 	ldw	r2,-16(fp)
    130c:	10800204 	addi	r2,r2,8
    1310:	e0bffc15 	stw	r2,-16(fp)
    1314:	e0bffb17 	ldw	r2,-20(fp)
    1318:	10800204 	addi	r2,r2,8
    131c:	e0bffb15 	stw	r2,-20(fp)
    1320:	e0bffa17 	ldw	r2,-24(fp)
    1324:	10800204 	addi	r2,r2,8
    1328:	e0bffa15 	stw	r2,-24(fp)
    132c:	e0bff917 	ldw	r2,-28(fp)
    1330:	10800204 	addi	r2,r2,8
    1334:	e0bff915 	stw	r2,-28(fp)
    for ( u=0; u<m; ++u ) {
    1338:	e0bff817 	ldw	r2,-32(fp)
    133c:	10800044 	addi	r2,r2,1
    1340:	e0bff815 	stw	r2,-32(fp)
    1344:	e0fff817 	ldw	r3,-32(fp)
    1348:	e0bfd417 	ldw	r2,-176(fp)
    134c:	18be7116 	blt	r3,r2,d14 <kf_bfly5+0x108>
    }
}
    1350:	0001883a 	nop
    1354:	0001883a 	nop
    1358:	e6fffe04 	addi	sp,fp,-8
    135c:	dfc00317 	ldw	ra,12(sp)
    1360:	df000217 	ldw	fp,8(sp)
    1364:	dc400117 	ldw	r17,4(sp)
    1368:	dc000017 	ldw	r16,0(sp)
    136c:	dec00404 	addi	sp,sp,16
    1370:	f800283a 	ret

00001374 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
    1374:	defff004 	addi	sp,sp,-64
    1378:	dfc00f15 	stw	ra,60(sp)
    137c:	df000e15 	stw	fp,56(sp)
    1380:	df000e04 	addi	fp,sp,56
    1384:	e13ff515 	stw	r4,-44(fp)
    1388:	e17ff415 	stw	r5,-48(fp)
    138c:	e1bff315 	stw	r6,-52(fp)
    1390:	e1fff215 	stw	r7,-56(fp)
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
    1394:	e0bff317 	ldw	r2,-52(fp)
    1398:	10804204 	addi	r2,r2,264
    139c:	e0bffa15 	stw	r2,-24(fp)
    kiss_fft_cpx t;
    int Norig = st->nfft;
    13a0:	e0bff317 	ldw	r2,-52(fp)
    13a4:	10800017 	ldw	r2,0(r2)
    13a8:	e0bff915 	stw	r2,-28(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
    13ac:	e0800217 	ldw	r2,8(fp)
    13b0:	100490fa 	slli	r2,r2,3
    13b4:	1009883a 	mov	r4,r2
    13b8:	0009eb00 	call	9eb0 <malloc>
    13bc:	e0bff815 	stw	r2,-32(fp)

    for ( u=0; u<m; ++u ) {
    13c0:	e03fff15 	stw	zero,-4(fp)
    13c4:	00009506 	br	161c <kf_bfly_generic+0x2a8>
        k=u;
    13c8:	e0bfff17 	ldw	r2,-4(fp)
    13cc:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    13d0:	e03ffd15 	stw	zero,-12(fp)
    13d4:	00001306 	br	1424 <kf_bfly_generic+0xb0>
            scratch[q1] = Fout[ k  ];
    13d8:	e0bffe17 	ldw	r2,-8(fp)
    13dc:	100490fa 	slli	r2,r2,3
    13e0:	e0fff517 	ldw	r3,-44(fp)
    13e4:	1887883a 	add	r3,r3,r2
    13e8:	e0bffd17 	ldw	r2,-12(fp)
    13ec:	100490fa 	slli	r2,r2,3
    13f0:	e13ff817 	ldw	r4,-32(fp)
    13f4:	2085883a 	add	r2,r4,r2
    13f8:	19000017 	ldw	r4,0(r3)
    13fc:	11000015 	stw	r4,0(r2)
    1400:	18c00117 	ldw	r3,4(r3)
    1404:	10c00115 	stw	r3,4(r2)
            C_FIXDIV(scratch[q1],p);
            k += m;
    1408:	e0fffe17 	ldw	r3,-8(fp)
    140c:	e0bff217 	ldw	r2,-56(fp)
    1410:	1885883a 	add	r2,r3,r2
    1414:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    1418:	e0bffd17 	ldw	r2,-12(fp)
    141c:	10800044 	addi	r2,r2,1
    1420:	e0bffd15 	stw	r2,-12(fp)
    1424:	e0fffd17 	ldw	r3,-12(fp)
    1428:	e0800217 	ldw	r2,8(fp)
    142c:	18bfea16 	blt	r3,r2,13d8 <kf_bfly_generic+0x64>
        }

        k=u;
    1430:	e0bfff17 	ldw	r2,-4(fp)
    1434:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    1438:	e03ffd15 	stw	zero,-12(fp)
    143c:	00007106 	br	1604 <kf_bfly_generic+0x290>
            int twidx=0;
    1440:	e03ffb15 	stw	zero,-20(fp)
            Fout[ k ] = scratch[0];
    1444:	e0bffe17 	ldw	r2,-8(fp)
    1448:	100490fa 	slli	r2,r2,3
    144c:	e0fff517 	ldw	r3,-44(fp)
    1450:	1885883a 	add	r2,r3,r2
    1454:	e0fff817 	ldw	r3,-32(fp)
    1458:	19000017 	ldw	r4,0(r3)
    145c:	11000015 	stw	r4,0(r2)
    1460:	18c00117 	ldw	r3,4(r3)
    1464:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
    1468:	00800044 	movi	r2,1
    146c:	e0bffc15 	stw	r2,-16(fp)
    1470:	00005a06 	br	15dc <kf_bfly_generic+0x268>
                twidx += fstride * k;
    1474:	e0bffe17 	ldw	r2,-8(fp)
    1478:	e17ff417 	ldw	r5,-48(fp)
    147c:	1009883a 	mov	r4,r2
    1480:	000714c0 	call	714c <__mulsi3>
    1484:	1007883a 	mov	r3,r2
    1488:	e0bffb17 	ldw	r2,-20(fp)
    148c:	1885883a 	add	r2,r3,r2
    1490:	e0bffb15 	stw	r2,-20(fp)
                if (twidx>=Norig) twidx-=Norig;
    1494:	e0fffb17 	ldw	r3,-20(fp)
    1498:	e0bff917 	ldw	r2,-28(fp)
    149c:	18800416 	blt	r3,r2,14b0 <kf_bfly_generic+0x13c>
    14a0:	e0fffb17 	ldw	r3,-20(fp)
    14a4:	e0bff917 	ldw	r2,-28(fp)
    14a8:	1885c83a 	sub	r2,r3,r2
    14ac:	e0bffb15 	stw	r2,-20(fp)
                C_MUL(t,scratch[q] , twiddles[twidx] );
    14b0:	e0bffc17 	ldw	r2,-16(fp)
    14b4:	100490fa 	slli	r2,r2,3
    14b8:	e0fff817 	ldw	r3,-32(fp)
    14bc:	1885883a 	add	r2,r3,r2
    14c0:	10c00017 	ldw	r3,0(r2)
    14c4:	e0bffb17 	ldw	r2,-20(fp)
    14c8:	100490fa 	slli	r2,r2,3
    14cc:	e13ffa17 	ldw	r4,-24(fp)
    14d0:	2089883a 	add	r4,r4,r2
    14d4:	20800017 	ldw	r2,0(r4)
    14d8:	1887ff32 	custom	252,r3,r3,r2
    14dc:	e0bffc17 	ldw	r2,-16(fp)
    14e0:	100490fa 	slli	r2,r2,3
    14e4:	e13ff817 	ldw	r4,-32(fp)
    14e8:	2085883a 	add	r2,r4,r2
    14ec:	11000117 	ldw	r4,4(r2)
    14f0:	e0bffb17 	ldw	r2,-20(fp)
    14f4:	100490fa 	slli	r2,r2,3
    14f8:	e17ffa17 	ldw	r5,-24(fp)
    14fc:	288b883a 	add	r5,r5,r2
    1500:	28800117 	ldw	r2,4(r5)
    1504:	2085ff32 	custom	252,r2,r4,r2
    1508:	1885ffb2 	custom	254,r2,r3,r2
    150c:	e0bff615 	stw	r2,-40(fp)
    1510:	e0bffc17 	ldw	r2,-16(fp)
    1514:	100490fa 	slli	r2,r2,3
    1518:	e0fff817 	ldw	r3,-32(fp)
    151c:	1885883a 	add	r2,r3,r2
    1520:	10c00017 	ldw	r3,0(r2)
    1524:	e0bffb17 	ldw	r2,-20(fp)
    1528:	100490fa 	slli	r2,r2,3
    152c:	e13ffa17 	ldw	r4,-24(fp)
    1530:	2089883a 	add	r4,r4,r2
    1534:	20800117 	ldw	r2,4(r4)
    1538:	1887ff32 	custom	252,r3,r3,r2
    153c:	e0bffc17 	ldw	r2,-16(fp)
    1540:	100490fa 	slli	r2,r2,3
    1544:	e13ff817 	ldw	r4,-32(fp)
    1548:	2085883a 	add	r2,r4,r2
    154c:	11000117 	ldw	r4,4(r2)
    1550:	e0bffb17 	ldw	r2,-20(fp)
    1554:	100490fa 	slli	r2,r2,3
    1558:	e17ffa17 	ldw	r5,-24(fp)
    155c:	288b883a 	add	r5,r5,r2
    1560:	28800017 	ldw	r2,0(r5)
    1564:	2085ff32 	custom	252,r2,r4,r2
    1568:	1885ff72 	custom	253,r2,r3,r2
    156c:	e0bff715 	stw	r2,-36(fp)
                C_ADDTO( Fout[ k ] ,t);
    1570:	e0bffe17 	ldw	r2,-8(fp)
    1574:	100490fa 	slli	r2,r2,3
    1578:	e0fff517 	ldw	r3,-44(fp)
    157c:	1885883a 	add	r2,r3,r2
    1580:	11000017 	ldw	r4,0(r2)
    1584:	e0fff617 	ldw	r3,-40(fp)
    1588:	e0bffe17 	ldw	r2,-8(fp)
    158c:	100490fa 	slli	r2,r2,3
    1590:	e17ff517 	ldw	r5,-44(fp)
    1594:	2885883a 	add	r2,r5,r2
    1598:	20c7ff72 	custom	253,r3,r4,r3
    159c:	10c00015 	stw	r3,0(r2)
    15a0:	e0bffe17 	ldw	r2,-8(fp)
    15a4:	100490fa 	slli	r2,r2,3
    15a8:	e0fff517 	ldw	r3,-44(fp)
    15ac:	1885883a 	add	r2,r3,r2
    15b0:	11000117 	ldw	r4,4(r2)
    15b4:	e0fff717 	ldw	r3,-36(fp)
    15b8:	e0bffe17 	ldw	r2,-8(fp)
    15bc:	100490fa 	slli	r2,r2,3
    15c0:	e17ff517 	ldw	r5,-44(fp)
    15c4:	2885883a 	add	r2,r5,r2
    15c8:	20c7ff72 	custom	253,r3,r4,r3
    15cc:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
    15d0:	e0bffc17 	ldw	r2,-16(fp)
    15d4:	10800044 	addi	r2,r2,1
    15d8:	e0bffc15 	stw	r2,-16(fp)
    15dc:	e0fffc17 	ldw	r3,-16(fp)
    15e0:	e0800217 	ldw	r2,8(fp)
    15e4:	18bfa316 	blt	r3,r2,1474 <kf_bfly_generic+0x100>
            }
            k += m;
    15e8:	e0fffe17 	ldw	r3,-8(fp)
    15ec:	e0bff217 	ldw	r2,-56(fp)
    15f0:	1885883a 	add	r2,r3,r2
    15f4:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    15f8:	e0bffd17 	ldw	r2,-12(fp)
    15fc:	10800044 	addi	r2,r2,1
    1600:	e0bffd15 	stw	r2,-12(fp)
    1604:	e0fffd17 	ldw	r3,-12(fp)
    1608:	e0800217 	ldw	r2,8(fp)
    160c:	18bf8c16 	blt	r3,r2,1440 <kf_bfly_generic+0xcc>
    for ( u=0; u<m; ++u ) {
    1610:	e0bfff17 	ldw	r2,-4(fp)
    1614:	10800044 	addi	r2,r2,1
    1618:	e0bfff15 	stw	r2,-4(fp)
    161c:	e0ffff17 	ldw	r3,-4(fp)
    1620:	e0bff217 	ldw	r2,-56(fp)
    1624:	18bf6816 	blt	r3,r2,13c8 <kf_bfly_generic+0x54>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
    1628:	e13ff817 	ldw	r4,-32(fp)
    162c:	0009ec00 	call	9ec0 <free>
}
    1630:	0001883a 	nop
    1634:	e037883a 	mov	sp,fp
    1638:	dfc00117 	ldw	ra,4(sp)
    163c:	df000017 	ldw	fp,0(sp)
    1640:	dec00204 	addi	sp,sp,8
    1644:	f800283a 	ret

00001648 <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
    1648:	defff404 	addi	sp,sp,-48
    164c:	dfc00b15 	stw	ra,44(sp)
    1650:	df000a15 	stw	fp,40(sp)
    1654:	df000a04 	addi	fp,sp,40
    1658:	e13ffb15 	stw	r4,-20(fp)
    165c:	e17ffa15 	stw	r5,-24(fp)
    1660:	e1bff915 	stw	r6,-28(fp)
    1664:	e1fff815 	stw	r7,-32(fp)
    kiss_fft_cpx * Fout_beg=Fout;
    1668:	e0bffb17 	ldw	r2,-20(fp)
    166c:	e0bfff15 	stw	r2,-4(fp)
    const int p=*factors++; /* the radix  */
    1670:	e0800217 	ldw	r2,8(fp)
    1674:	10c00104 	addi	r3,r2,4
    1678:	e0c00215 	stw	r3,8(fp)
    167c:	10800017 	ldw	r2,0(r2)
    1680:	e0bffe15 	stw	r2,-8(fp)
    const int m=*factors++; /* stage's fft length/p */
    1684:	e0800217 	ldw	r2,8(fp)
    1688:	10c00104 	addi	r3,r2,4
    168c:	e0c00215 	stw	r3,8(fp)
    1690:	10800017 	ldw	r2,0(r2)
    1694:	e0bffd15 	stw	r2,-12(fp)
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    1698:	e17ffd17 	ldw	r5,-12(fp)
    169c:	e13ffe17 	ldw	r4,-8(fp)
    16a0:	000714c0 	call	714c <__mulsi3>
    16a4:	100490fa 	slli	r2,r2,3
    16a8:	e0fffb17 	ldw	r3,-20(fp)
    16ac:	1885883a 	add	r2,r3,r2
    16b0:	e0bffc15 	stw	r2,-16(fp)
        }
        return;
    }
#endif

    if (m==1) {
    16b4:	e0bffd17 	ldw	r2,-12(fp)
    16b8:	10800058 	cmpnei	r2,r2,1
    16bc:	1000151e 	bne	r2,zero,1714 <kf_work+0xcc>
        do{
            *Fout = *f;
    16c0:	e0bffb17 	ldw	r2,-20(fp)
    16c4:	e0fffa17 	ldw	r3,-24(fp)
    16c8:	19000017 	ldw	r4,0(r3)
    16cc:	11000015 	stw	r4,0(r2)
    16d0:	18c00117 	ldw	r3,4(r3)
    16d4:	10c00115 	stw	r3,4(r2)
            f += fstride*in_stride;
    16d8:	e0bff817 	ldw	r2,-32(fp)
    16dc:	e17ff917 	ldw	r5,-28(fp)
    16e0:	1009883a 	mov	r4,r2
    16e4:	000714c0 	call	714c <__mulsi3>
    16e8:	100490fa 	slli	r2,r2,3
    16ec:	e0fffa17 	ldw	r3,-24(fp)
    16f0:	1885883a 	add	r2,r3,r2
    16f4:	e0bffa15 	stw	r2,-24(fp)
        }while(++Fout != Fout_end );
    16f8:	e0bffb17 	ldw	r2,-20(fp)
    16fc:	10800204 	addi	r2,r2,8
    1700:	e0bffb15 	stw	r2,-20(fp)
    1704:	e0fffb17 	ldw	r3,-20(fp)
    1708:	e0bffc17 	ldw	r2,-16(fp)
    170c:	18bfec1e 	bne	r3,r2,16c0 <kf_work+0x78>
    1710:	00001e06 	br	178c <kf_work+0x144>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m, 
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    1714:	e0bffe17 	ldw	r2,-8(fp)
    1718:	e17ff917 	ldw	r5,-28(fp)
    171c:	1009883a 	mov	r4,r2
    1720:	000714c0 	call	714c <__mulsi3>
    1724:	1007883a 	mov	r3,r2
    1728:	e0800317 	ldw	r2,12(fp)
    172c:	d8800115 	stw	r2,4(sp)
    1730:	e0800217 	ldw	r2,8(fp)
    1734:	d8800015 	stw	r2,0(sp)
    1738:	e1fff817 	ldw	r7,-32(fp)
    173c:	180d883a 	mov	r6,r3
    1740:	e17ffa17 	ldw	r5,-24(fp)
    1744:	e13ffb17 	ldw	r4,-20(fp)
    1748:	00016480 	call	1648 <kf_work>
            f += fstride*in_stride;
    174c:	e0bff817 	ldw	r2,-32(fp)
    1750:	e17ff917 	ldw	r5,-28(fp)
    1754:	1009883a 	mov	r4,r2
    1758:	000714c0 	call	714c <__mulsi3>
    175c:	100490fa 	slli	r2,r2,3
    1760:	e0fffa17 	ldw	r3,-24(fp)
    1764:	1885883a 	add	r2,r3,r2
    1768:	e0bffa15 	stw	r2,-24(fp)
        }while( (Fout += m) != Fout_end );
    176c:	e0bffd17 	ldw	r2,-12(fp)
    1770:	100490fa 	slli	r2,r2,3
    1774:	e0fffb17 	ldw	r3,-20(fp)
    1778:	1885883a 	add	r2,r3,r2
    177c:	e0bffb15 	stw	r2,-20(fp)
    1780:	e0fffb17 	ldw	r3,-20(fp)
    1784:	e0bffc17 	ldw	r2,-16(fp)
    1788:	18bfe21e 	bne	r3,r2,1714 <kf_work+0xcc>
    }

    Fout=Fout_beg;
    178c:	e0bfff17 	ldw	r2,-4(fp)
    1790:	e0bffb15 	stw	r2,-20(fp)

    // recombine the p smaller DFTs 
    switch (p) {
    1794:	e0bffe17 	ldw	r2,-8(fp)
    1798:	10800160 	cmpeqi	r2,r2,5
    179c:	1000241e 	bne	r2,zero,1830 <kf_work+0x1e8>
    17a0:	e0bffe17 	ldw	r2,-8(fp)
    17a4:	10800188 	cmpgei	r2,r2,6
    17a8:	1000271e 	bne	r2,zero,1848 <kf_work+0x200>
    17ac:	e0bffe17 	ldw	r2,-8(fp)
    17b0:	10800120 	cmpeqi	r2,r2,4
    17b4:	1000171e 	bne	r2,zero,1814 <kf_work+0x1cc>
    17b8:	e0bffe17 	ldw	r2,-8(fp)
    17bc:	10800148 	cmpgei	r2,r2,5
    17c0:	1000211e 	bne	r2,zero,1848 <kf_work+0x200>
    17c4:	e0bffe17 	ldw	r2,-8(fp)
    17c8:	108000a0 	cmpeqi	r2,r2,2
    17cc:	1000041e 	bne	r2,zero,17e0 <kf_work+0x198>
    17d0:	e0bffe17 	ldw	r2,-8(fp)
    17d4:	108000e0 	cmpeqi	r2,r2,3
    17d8:	1000071e 	bne	r2,zero,17f8 <kf_work+0x1b0>
    17dc:	00001a06 	br	1848 <kf_work+0x200>
        case 2: kf_bfly2(Fout,fstride,st,m); break;
    17e0:	e1fffd17 	ldw	r7,-12(fp)
    17e4:	e1800317 	ldw	r6,12(fp)
    17e8:	e17ff917 	ldw	r5,-28(fp)
    17ec:	e13ffb17 	ldw	r4,-20(fp)
    17f0:	00002640 	call	264 <kf_bfly2>
    17f4:	00001c06 	br	1868 <kf_work+0x220>
        case 3: kf_bfly3(Fout,fstride,st,m); break; 
    17f8:	e0bffd17 	ldw	r2,-12(fp)
    17fc:	100f883a 	mov	r7,r2
    1800:	e1800317 	ldw	r6,12(fp)
    1804:	e17ff917 	ldw	r5,-28(fp)
    1808:	e13ffb17 	ldw	r4,-20(fp)
    180c:	000086c0 	call	86c <kf_bfly3>
    1810:	00001506 	br	1868 <kf_work+0x220>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
    1814:	e0bffd17 	ldw	r2,-12(fp)
    1818:	100f883a 	mov	r7,r2
    181c:	e1800317 	ldw	r6,12(fp)
    1820:	e17ff917 	ldw	r5,-28(fp)
    1824:	e13ffb17 	ldw	r4,-20(fp)
    1828:	00003b80 	call	3b8 <kf_bfly4>
    182c:	00000e06 	br	1868 <kf_work+0x220>
        case 5: kf_bfly5(Fout,fstride,st,m); break; 
    1830:	e1fffd17 	ldw	r7,-12(fp)
    1834:	e1800317 	ldw	r6,12(fp)
    1838:	e17ff917 	ldw	r5,-28(fp)
    183c:	e13ffb17 	ldw	r4,-20(fp)
    1840:	0000c0c0 	call	c0c <kf_bfly5>
    1844:	00000806 	br	1868 <kf_work+0x220>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    1848:	e0bffe17 	ldw	r2,-8(fp)
    184c:	d8800015 	stw	r2,0(sp)
    1850:	e1fffd17 	ldw	r7,-12(fp)
    1854:	e1800317 	ldw	r6,12(fp)
    1858:	e17ff917 	ldw	r5,-28(fp)
    185c:	e13ffb17 	ldw	r4,-20(fp)
    1860:	00013740 	call	1374 <kf_bfly_generic>
    1864:	0001883a 	nop
    }
}
    1868:	0001883a 	nop
    186c:	e037883a 	mov	sp,fp
    1870:	dfc00117 	ldw	ra,4(sp)
    1874:	df000017 	ldw	fp,0(sp)
    1878:	dec00204 	addi	sp,sp,8
    187c:	f800283a 	ret

00001880 <kf_factor>:
    where 
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static 
void kf_factor(int n,int * facbuf)
{
    1880:	defff904 	addi	sp,sp,-28
    1884:	dfc00615 	stw	ra,24(sp)
    1888:	df000515 	stw	fp,20(sp)
    188c:	df000504 	addi	fp,sp,20
    1890:	e13ffc15 	stw	r4,-16(fp)
    1894:	e17ffb15 	stw	r5,-20(fp)
    int p=4;
    1898:	00800104 	movi	r2,4
    189c:	e0bfff15 	stw	r2,-4(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
    18a0:	e13ffc17 	ldw	r4,-16(fp)
    18a4:	0009a9c0 	call	9a9c <__floatsidf>
    18a8:	100d883a 	mov	r6,r2
    18ac:	180f883a 	mov	r7,r3
    18b0:	3009883a 	mov	r4,r6
    18b4:	380b883a 	mov	r5,r7
    18b8:	00034b80 	call	34b8 <sqrt>
    18bc:	100d883a 	mov	r6,r2
    18c0:	180f883a 	mov	r7,r3
    18c4:	3009883a 	mov	r4,r6
    18c8:	380b883a 	mov	r5,r7
    18cc:	0002e900 	call	2e90 <floor>
    18d0:	e0bffd15 	stw	r2,-12(fp)
    18d4:	e0fffe15 	stw	r3,-8(fp)

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
    18d8:	00001d06 	br	1950 <kf_factor+0xd0>
            switch (p) {
    18dc:	e0bfff17 	ldw	r2,-4(fp)
    18e0:	108000a0 	cmpeqi	r2,r2,2
    18e4:	1000061e 	bne	r2,zero,1900 <kf_factor+0x80>
    18e8:	e0bfff17 	ldw	r2,-4(fp)
    18ec:	10800118 	cmpnei	r2,r2,4
    18f0:	1000061e 	bne	r2,zero,190c <kf_factor+0x8c>
                case 4: p = 2; break;
    18f4:	00800084 	movi	r2,2
    18f8:	e0bfff15 	stw	r2,-4(fp)
    18fc:	00000706 	br	191c <kf_factor+0x9c>
                case 2: p = 3; break;
    1900:	008000c4 	movi	r2,3
    1904:	e0bfff15 	stw	r2,-4(fp)
    1908:	00000406 	br	191c <kf_factor+0x9c>
                default: p += 2; break;
    190c:	e0bfff17 	ldw	r2,-4(fp)
    1910:	10800084 	addi	r2,r2,2
    1914:	e0bfff15 	stw	r2,-4(fp)
    1918:	0001883a 	nop
            }
            if (p > floor_sqrt)
    191c:	e13fff17 	ldw	r4,-4(fp)
    1920:	0009a9c0 	call	9a9c <__floatsidf>
    1924:	1009883a 	mov	r4,r2
    1928:	180b883a 	mov	r5,r3
    192c:	200d883a 	mov	r6,r4
    1930:	280f883a 	mov	r7,r5
    1934:	e13ffd17 	ldw	r4,-12(fp)
    1938:	e17ffe17 	ldw	r5,-8(fp)
    193c:	00088280 	call	8828 <__ledf2>
    1940:	10000116 	blt	r2,zero,1948 <kf_factor+0xc8>
    1944:	00000206 	br	1950 <kf_factor+0xd0>
                p = n;          /* no more factors, skip to end */
    1948:	e0bffc17 	ldw	r2,-16(fp)
    194c:	e0bfff15 	stw	r2,-4(fp)
        while (n % p) {
    1950:	e0bffc17 	ldw	r2,-16(fp)
    1954:	e17fff17 	ldw	r5,-4(fp)
    1958:	1009883a 	mov	r4,r2
    195c:	00070180 	call	7018 <__modsi3>
    1960:	103fde1e 	bne	r2,zero,18dc <kf_factor+0x5c>
        }
        n /= p;
    1964:	e17fff17 	ldw	r5,-4(fp)
    1968:	e13ffc17 	ldw	r4,-16(fp)
    196c:	0006f980 	call	6f98 <__divsi3>
    1970:	e0bffc15 	stw	r2,-16(fp)
        *facbuf++ = p;
    1974:	e0bffb17 	ldw	r2,-20(fp)
    1978:	10c00104 	addi	r3,r2,4
    197c:	e0fffb15 	stw	r3,-20(fp)
    1980:	e0ffff17 	ldw	r3,-4(fp)
    1984:	10c00015 	stw	r3,0(r2)
        *facbuf++ = n;
    1988:	e0bffb17 	ldw	r2,-20(fp)
    198c:	10c00104 	addi	r3,r2,4
    1990:	e0fffb15 	stw	r3,-20(fp)
    1994:	e0fffc17 	ldw	r3,-16(fp)
    1998:	10c00015 	stw	r3,0(r2)
    } while (n > 1);
    199c:	e0bffc17 	ldw	r2,-16(fp)
    19a0:	10800088 	cmpgei	r2,r2,2
    19a4:	103fea1e 	bne	r2,zero,1950 <kf_factor+0xd0>
}
    19a8:	0001883a 	nop
    19ac:	0001883a 	nop
    19b0:	e037883a 	mov	sp,fp
    19b4:	dfc00117 	ldw	ra,4(sp)
    19b8:	df000017 	ldw	fp,0(sp)
    19bc:	dec00204 	addi	sp,sp,8
    19c0:	f800283a 	ret

000019c4 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
    19c4:	deffef04 	addi	sp,sp,-68
    19c8:	dfc01015 	stw	ra,64(sp)
    19cc:	df000f15 	stw	fp,60(sp)
    19d0:	dcc00e15 	stw	r19,56(sp)
    19d4:	dc800d15 	stw	r18,52(sp)
    19d8:	dc400c15 	stw	r17,48(sp)
    19dc:	dc000b15 	stw	r16,44(sp)
    19e0:	df000f04 	addi	fp,sp,60
    19e4:	e13ff415 	stw	r4,-48(fp)
    19e8:	e17ff315 	stw	r5,-52(fp)
    19ec:	e1bff215 	stw	r6,-56(fp)
    19f0:	e1fff115 	stw	r7,-60(fp)
    kiss_fft_cfg st=NULL;
    19f4:	e03ffb15 	stw	zero,-20(fp)
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
    19f8:	e0bff417 	ldw	r2,-48(fp)
    19fc:	10800844 	addi	r2,r2,33
    size_t memneeded = sizeof(struct kiss_fft_state)
    1a00:	100490fa 	slli	r2,r2,3
    1a04:	e0bff715 	stw	r2,-36(fp)

    if ( lenmem==NULL ) {
    1a08:	e0bff117 	ldw	r2,-60(fp)
    1a0c:	1000041e 	bne	r2,zero,1a20 <kiss_fft_alloc+0x5c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
    1a10:	e13ff717 	ldw	r4,-36(fp)
    1a14:	0009eb00 	call	9eb0 <malloc>
    1a18:	e0bffb15 	stw	r2,-20(fp)
    1a1c:	00000b06 	br	1a4c <kiss_fft_alloc+0x88>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
    1a20:	e0bff217 	ldw	r2,-56(fp)
    1a24:	10000626 	beq	r2,zero,1a40 <kiss_fft_alloc+0x7c>
    1a28:	e0bff117 	ldw	r2,-60(fp)
    1a2c:	10c00017 	ldw	r3,0(r2)
    1a30:	e0bff717 	ldw	r2,-36(fp)
    1a34:	18800236 	bltu	r3,r2,1a40 <kiss_fft_alloc+0x7c>
            st = (kiss_fft_cfg)mem;
    1a38:	e0bff217 	ldw	r2,-56(fp)
    1a3c:	e0bffb15 	stw	r2,-20(fp)
        *lenmem = memneeded;
    1a40:	e0bff117 	ldw	r2,-60(fp)
    1a44:	e0fff717 	ldw	r3,-36(fp)
    1a48:	10c00015 	stw	r3,0(r2)
    }
    if (st) {
    1a4c:	e0bffb17 	ldw	r2,-20(fp)
    1a50:	10006126 	beq	r2,zero,1bd8 <kiss_fft_alloc+0x214>
        int i;
        st->nfft=nfft;
    1a54:	e0bffb17 	ldw	r2,-20(fp)
    1a58:	e0fff417 	ldw	r3,-48(fp)
    1a5c:	10c00015 	stw	r3,0(r2)
        st->inverse = inverse_fft;
    1a60:	e0bffb17 	ldw	r2,-20(fp)
    1a64:	e0fff317 	ldw	r3,-52(fp)
    1a68:	10c00115 	stw	r3,4(r2)

        for (i=0;i<nfft;++i) {
    1a6c:	e03ffa15 	stw	zero,-24(fp)
    1a70:	00005106 	br	1bb8 <kiss_fft_alloc+0x1f4>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
    1a74:	00980034 	movhi	r2,24576
    1a78:	e0bff515 	stw	r2,-44(fp)
    1a7c:	00900274 	movhi	r2,16393
    1a80:	10887ec4 	addi	r2,r2,8699
    1a84:	e0bff615 	stw	r2,-40(fp)
            double phase = -2*pi*i / nfft;
    1a88:	000d883a 	mov	r6,zero
    1a8c:	01f00034 	movhi	r7,49152
    1a90:	e13ff517 	ldw	r4,-44(fp)
    1a94:	e17ff617 	ldw	r5,-40(fp)
    1a98:	00089100 	call	8910 <__muldf3>
    1a9c:	1009883a 	mov	r4,r2
    1aa0:	180b883a 	mov	r5,r3
    1aa4:	2025883a 	mov	r18,r4
    1aa8:	2827883a 	mov	r19,r5
    1aac:	e13ffa17 	ldw	r4,-24(fp)
    1ab0:	0009a9c0 	call	9a9c <__floatsidf>
    1ab4:	1009883a 	mov	r4,r2
    1ab8:	180b883a 	mov	r5,r3
    1abc:	200d883a 	mov	r6,r4
    1ac0:	280f883a 	mov	r7,r5
    1ac4:	9009883a 	mov	r4,r18
    1ac8:	980b883a 	mov	r5,r19
    1acc:	00089100 	call	8910 <__muldf3>
    1ad0:	1009883a 	mov	r4,r2
    1ad4:	180b883a 	mov	r5,r3
    1ad8:	2025883a 	mov	r18,r4
    1adc:	2827883a 	mov	r19,r5
    1ae0:	e13ff417 	ldw	r4,-48(fp)
    1ae4:	0009a9c0 	call	9a9c <__floatsidf>
    1ae8:	1009883a 	mov	r4,r2
    1aec:	180b883a 	mov	r5,r3
    1af0:	200d883a 	mov	r6,r4
    1af4:	280f883a 	mov	r7,r5
    1af8:	9009883a 	mov	r4,r18
    1afc:	980b883a 	mov	r5,r19
    1b00:	0007dac0 	call	7dac <__divdf3>
    1b04:	1009883a 	mov	r4,r2
    1b08:	180b883a 	mov	r5,r3
    1b0c:	e13ff815 	stw	r4,-32(fp)
    1b10:	e17ff915 	stw	r5,-28(fp)
            if (st->inverse)
    1b14:	e0bffb17 	ldw	r2,-20(fp)
    1b18:	10800117 	ldw	r2,4(r2)
    1b1c:	10000526 	beq	r2,zero,1b34 <kiss_fft_alloc+0x170>
                phase *= -1;
    1b20:	e43ff817 	ldw	r16,-32(fp)
    1b24:	e0bff917 	ldw	r2,-28(fp)
    1b28:	1460003c 	xorhi	r17,r2,32768
    1b2c:	e43ff815 	stw	r16,-32(fp)
    1b30:	e47ff915 	stw	r17,-28(fp)
            kf_cexp(st->twiddles+i, phase );
    1b34:	e13ff817 	ldw	r4,-32(fp)
    1b38:	e17ff917 	ldw	r5,-28(fp)
    1b3c:	0002de00 	call	2de0 <cos>
    1b40:	100d883a 	mov	r6,r2
    1b44:	180f883a 	mov	r7,r3
    1b48:	e0bffb17 	ldw	r2,-20(fp)
    1b4c:	10c04204 	addi	r3,r2,264
    1b50:	e0bffa17 	ldw	r2,-24(fp)
    1b54:	100490fa 	slli	r2,r2,3
    1b58:	18a5883a 	add	r18,r3,r2
    1b5c:	3009883a 	mov	r4,r6
    1b60:	380b883a 	mov	r5,r7
    1b64:	0009ce00 	call	9ce0 <__truncdfsf2>
    1b68:	1007883a 	mov	r3,r2
    1b6c:	90c00015 	stw	r3,0(r18)
    1b70:	e13ff817 	ldw	r4,-32(fp)
    1b74:	e17ff917 	ldw	r5,-28(fp)
    1b78:	00030740 	call	3074 <sin>
    1b7c:	100d883a 	mov	r6,r2
    1b80:	180f883a 	mov	r7,r3
    1b84:	e0bffb17 	ldw	r2,-20(fp)
    1b88:	10c04204 	addi	r3,r2,264
    1b8c:	e0bffa17 	ldw	r2,-24(fp)
    1b90:	100490fa 	slli	r2,r2,3
    1b94:	18a5883a 	add	r18,r3,r2
    1b98:	3009883a 	mov	r4,r6
    1b9c:	380b883a 	mov	r5,r7
    1ba0:	0009ce00 	call	9ce0 <__truncdfsf2>
    1ba4:	1007883a 	mov	r3,r2
    1ba8:	90c00115 	stw	r3,4(r18)
        for (i=0;i<nfft;++i) {
    1bac:	e0bffa17 	ldw	r2,-24(fp)
    1bb0:	10800044 	addi	r2,r2,1
    1bb4:	e0bffa15 	stw	r2,-24(fp)
    1bb8:	e0fffa17 	ldw	r3,-24(fp)
    1bbc:	e0bff417 	ldw	r2,-48(fp)
    1bc0:	18bfac16 	blt	r3,r2,1a74 <kiss_fft_alloc+0xb0>
        }

        kf_factor(nfft,st->factors);
    1bc4:	e0bffb17 	ldw	r2,-20(fp)
    1bc8:	10800204 	addi	r2,r2,8
    1bcc:	100b883a 	mov	r5,r2
    1bd0:	e13ff417 	ldw	r4,-48(fp)
    1bd4:	00018800 	call	1880 <kf_factor>
    }
    return st;
    1bd8:	e0bffb17 	ldw	r2,-20(fp)
}
    1bdc:	e6fffc04 	addi	sp,fp,-16
    1be0:	dfc00517 	ldw	ra,20(sp)
    1be4:	df000417 	ldw	fp,16(sp)
    1be8:	dcc00317 	ldw	r19,12(sp)
    1bec:	dc800217 	ldw	r18,8(sp)
    1bf0:	dc400117 	ldw	r17,4(sp)
    1bf4:	dc000017 	ldw	r16,0(sp)
    1bf8:	dec00604 	addi	sp,sp,24
    1bfc:	f800283a 	ret

00001c00 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
    1c00:	defff704 	addi	sp,sp,-36
    1c04:	dfc00815 	stw	ra,32(sp)
    1c08:	df000715 	stw	fp,28(sp)
    1c0c:	df000704 	addi	fp,sp,28
    1c10:	e13ffe15 	stw	r4,-8(fp)
    1c14:	e17ffd15 	stw	r5,-12(fp)
    1c18:	e1bffc15 	stw	r6,-16(fp)
    1c1c:	e1fffb15 	stw	r7,-20(fp)
    if (fin == fout) {
    1c20:	e0fffd17 	ldw	r3,-12(fp)
    1c24:	e0bffc17 	ldw	r2,-16(fp)
    1c28:	18801a1e 	bne	r3,r2,1c94 <kiss_fft_stride+0x94>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
    1c2c:	e0bffe17 	ldw	r2,-8(fp)
    1c30:	10800017 	ldw	r2,0(r2)
    1c34:	100490fa 	slli	r2,r2,3
    1c38:	1009883a 	mov	r4,r2
    1c3c:	0009eb00 	call	9eb0 <malloc>
    1c40:	e0bfff15 	stw	r2,-4(fp)
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
    1c44:	e0bffe17 	ldw	r2,-8(fp)
    1c48:	10800204 	addi	r2,r2,8
    1c4c:	e0fffe17 	ldw	r3,-8(fp)
    1c50:	d8c00115 	stw	r3,4(sp)
    1c54:	d8800015 	stw	r2,0(sp)
    1c58:	e1fffb17 	ldw	r7,-20(fp)
    1c5c:	01800044 	movi	r6,1
    1c60:	e17ffd17 	ldw	r5,-12(fp)
    1c64:	e13fff17 	ldw	r4,-4(fp)
    1c68:	00016480 	call	1648 <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
    1c6c:	e0bffe17 	ldw	r2,-8(fp)
    1c70:	10800017 	ldw	r2,0(r2)
    1c74:	100490fa 	slli	r2,r2,3
    1c78:	100d883a 	mov	r6,r2
    1c7c:	e17fff17 	ldw	r5,-4(fp)
    1c80:	e13ffc17 	ldw	r4,-16(fp)
    1c84:	000a6b00 	call	a6b0 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
    1c88:	e13fff17 	ldw	r4,-4(fp)
    1c8c:	0009ec00 	call	9ec0 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
    1c90:	00000a06 	br	1cbc <kiss_fft_stride+0xbc>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    1c94:	e0bffe17 	ldw	r2,-8(fp)
    1c98:	10800204 	addi	r2,r2,8
    1c9c:	e0fffe17 	ldw	r3,-8(fp)
    1ca0:	d8c00115 	stw	r3,4(sp)
    1ca4:	d8800015 	stw	r2,0(sp)
    1ca8:	e1fffb17 	ldw	r7,-20(fp)
    1cac:	01800044 	movi	r6,1
    1cb0:	e17ffd17 	ldw	r5,-12(fp)
    1cb4:	e13ffc17 	ldw	r4,-16(fp)
    1cb8:	00016480 	call	1648 <kf_work>
}
    1cbc:	0001883a 	nop
    1cc0:	e037883a 	mov	sp,fp
    1cc4:	dfc00117 	ldw	ra,4(sp)
    1cc8:	df000017 	ldw	fp,0(sp)
    1ccc:	dec00204 	addi	sp,sp,8
    1cd0:	f800283a 	ret

00001cd4 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    1cd4:	defffb04 	addi	sp,sp,-20
    1cd8:	dfc00415 	stw	ra,16(sp)
    1cdc:	df000315 	stw	fp,12(sp)
    1ce0:	df000304 	addi	fp,sp,12
    1ce4:	e13fff15 	stw	r4,-4(fp)
    1ce8:	e17ffe15 	stw	r5,-8(fp)
    1cec:	e1bffd15 	stw	r6,-12(fp)
    kiss_fft_stride(cfg,fin,fout,1);
    1cf0:	01c00044 	movi	r7,1
    1cf4:	e1bffd17 	ldw	r6,-12(fp)
    1cf8:	e17ffe17 	ldw	r5,-8(fp)
    1cfc:	e13fff17 	ldw	r4,-4(fp)
    1d00:	0001c000 	call	1c00 <kiss_fft_stride>
}
    1d04:	0001883a 	nop
    1d08:	e037883a 	mov	sp,fp
    1d0c:	dfc00117 	ldw	ra,4(sp)
    1d10:	df000017 	ldw	fp,0(sp)
    1d14:	dec00204 	addi	sp,sp,8
    1d18:	f800283a 	ret

00001d1c <kiss_fft_cleanup>:


void kiss_fft_cleanup(void)
{
    1d1c:	deffff04 	addi	sp,sp,-4
    1d20:	df000015 	stw	fp,0(sp)
    1d24:	d839883a 	mov	fp,sp
    // nothing needed any more
}
    1d28:	0001883a 	nop
    1d2c:	e037883a 	mov	sp,fp
    1d30:	df000017 	ldw	fp,0(sp)
    1d34:	dec00104 	addi	sp,sp,4
    1d38:	f800283a 	ret

00001d3c <kiss_fft_next_fast_size>:

int kiss_fft_next_fast_size(int n)
{
    1d3c:	defffc04 	addi	sp,sp,-16
    1d40:	dfc00315 	stw	ra,12(sp)
    1d44:	df000215 	stw	fp,8(sp)
    1d48:	df000204 	addi	fp,sp,8
    1d4c:	e13ffe15 	stw	r4,-8(fp)
    while(1) {
        int m=n;
    1d50:	e0bffe17 	ldw	r2,-8(fp)
    1d54:	e0bfff15 	stw	r2,-4(fp)
        while ( (m%2) == 0 ) m/=2;
    1d58:	00000506 	br	1d70 <kiss_fft_next_fast_size+0x34>
    1d5c:	e0bfff17 	ldw	r2,-4(fp)
    1d60:	1006d7fa 	srli	r3,r2,31
    1d64:	1885883a 	add	r2,r3,r2
    1d68:	1005d07a 	srai	r2,r2,1
    1d6c:	e0bfff15 	stw	r2,-4(fp)
    1d70:	e0bfff17 	ldw	r2,-4(fp)
    1d74:	1080004c 	andi	r2,r2,1
    1d78:	103ff826 	beq	r2,zero,1d5c <kiss_fft_next_fast_size+0x20>
        while ( (m%3) == 0 ) m/=3;
    1d7c:	00000506 	br	1d94 <kiss_fft_next_fast_size+0x58>
    1d80:	e0bfff17 	ldw	r2,-4(fp)
    1d84:	014000c4 	movi	r5,3
    1d88:	1009883a 	mov	r4,r2
    1d8c:	0006f980 	call	6f98 <__divsi3>
    1d90:	e0bfff15 	stw	r2,-4(fp)
    1d94:	e0bfff17 	ldw	r2,-4(fp)
    1d98:	014000c4 	movi	r5,3
    1d9c:	1009883a 	mov	r4,r2
    1da0:	00070180 	call	7018 <__modsi3>
    1da4:	103ff626 	beq	r2,zero,1d80 <kiss_fft_next_fast_size+0x44>
        while ( (m%5) == 0 ) m/=5;
    1da8:	00000506 	br	1dc0 <kiss_fft_next_fast_size+0x84>
    1dac:	e0bfff17 	ldw	r2,-4(fp)
    1db0:	01400144 	movi	r5,5
    1db4:	1009883a 	mov	r4,r2
    1db8:	0006f980 	call	6f98 <__divsi3>
    1dbc:	e0bfff15 	stw	r2,-4(fp)
    1dc0:	e0bfff17 	ldw	r2,-4(fp)
    1dc4:	01400144 	movi	r5,5
    1dc8:	1009883a 	mov	r4,r2
    1dcc:	00070180 	call	7018 <__modsi3>
    1dd0:	103ff626 	beq	r2,zero,1dac <kiss_fft_next_fast_size+0x70>
        if (m<=1)
    1dd4:	e0bfff17 	ldw	r2,-4(fp)
    1dd8:	10800088 	cmpgei	r2,r2,2
    1ddc:	10000426 	beq	r2,zero,1df0 <kiss_fft_next_fast_size+0xb4>
            break; /* n is completely factorable by twos, threes, and fives */
        n++;
    1de0:	e0bffe17 	ldw	r2,-8(fp)
    1de4:	10800044 	addi	r2,r2,1
    1de8:	e0bffe15 	stw	r2,-8(fp)
    while(1) {
    1dec:	003fd806 	br	1d50 <kiss_fft_next_fast_size+0x14>
            break; /* n is completely factorable by twos, threes, and fives */
    1df0:	0001883a 	nop
    }
    return n;
    1df4:	e0bffe17 	ldw	r2,-8(fp)
}
    1df8:	e037883a 	mov	sp,fp
    1dfc:	dfc00117 	ldw	ra,4(sp)
    1e00:	df000017 	ldw	fp,0(sp)
    1e04:	dec00204 	addi	sp,sp,8
    1e08:	f800283a 	ret

00001e0c <main>:
/*******************************************************************************
 * This program performs the following:
 *  1. records audio for 1.5 seconds when KEY[0] is pressed.
 *  2. Normalizes
 ******************************************************************************/
int main(void) {
    1e0c:	defffd04 	addi	sp,sp,-12
    1e10:	dfc00215 	stw	ra,8(sp)
    1e14:	df000115 	stw	fp,4(sp)
    1e18:	dc000015 	stw	r16,0(sp)
    1e1c:	df000104 	addi	fp,sp,4
    1e20:	023ffef4 	movhi	r8,65531
    1e24:	423d7c04 	addi	r8,r8,-2576
    1e28:	da37883a 	add	sp,sp,r8
    /* Declare volatile pointers to I/O registers (volatile means that IO load
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile int *red_LED_ptr = (int *)LED_BASE;
    1e2c:	00bfc834 	movhi	r2,65312
    1e30:	e0bffb15 	stw	r2,-20(fp)
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    1e34:	00bfc834 	movhi	r2,65312
    1e38:	108c1004 	addi	r2,r2,12352
    1e3c:	e0bffa15 	stw	r2,-24(fp)

    /* used for audio record/playback */
    int fifospace;
    int record = 0, play = 0, buffer_index = 0;
    1e40:	e03ff815 	stw	zero,-32(fp)
    1e44:	e03ff715 	stw	zero,-36(fp)
    1e48:	e03ff615 	stw	zero,-40(fp)
    float windowed_buffer[BUF_SIZE];
    kiss_fft_cpx output[FFT_SIZE];
    float mfcc_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];

    /* read and echo audio data */
    record = 0;
    1e4c:	e03ff815 	stw	zero,-32(fp)
    play = 0;
    1e50:	e03ff715 	stw	zero,-36(fp)

    while (1) {
        check_KEYs(&record, &play, &buffer_index);
    1e54:	e13ff604 	addi	r4,fp,-40
    1e58:	e0fff704 	addi	r3,fp,-36
    1e5c:	e0bff804 	addi	r2,fp,-32
    1e60:	200d883a 	mov	r6,r4
    1e64:	180b883a 	mov	r5,r3
    1e68:	1009883a 	mov	r4,r2
    1e6c:	00020780 	call	2078 <check_KEYs>
        if (record) {
    1e70:	e0bff817 	ldw	r2,-32(fp)
    1e74:	103ff726 	beq	r2,zero,1e54 <main+0x48>
            *(red_LED_ptr) = 0x1;  // turn on LEDR[0]
    1e78:	e0bffb17 	ldw	r2,-20(fp)
    1e7c:	00c00044 	movi	r3,1
    1e80:	10c00015 	stw	r3,0(r2)

            fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
    1e84:	e0bffa17 	ldw	r2,-24(fp)
    1e88:	10800117 	ldw	r2,4(r2)
    1e8c:	e0bffe15 	stw	r2,-8(fp)
            if ((fifospace & 0x000000FF) > BUF_THRESHOLD)  // check RARC
    1e90:	e0bffe17 	ldw	r2,-8(fp)
    1e94:	10803fcc 	andi	r2,r2,255
    1e98:	10801850 	cmplti	r2,r2,97
    1e9c:	103fed1e 	bne	r2,zero,1e54 <main+0x48>
            {
                // store data until the the audio-in FIFO is empty or the buffer is full
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    1ea0:	00006e06 	br	205c <main+0x250>
                    left_buffer[buffer_index] = *(audio_ptr + 2);
    1ea4:	e0bffa17 	ldw	r2,-24(fp)
    1ea8:	10800204 	addi	r2,r2,8
    1eac:	10800017 	ldw	r2,0(r2)
    1eb0:	e43ff617 	ldw	r16,-40(fp)
    1eb4:	1009883a 	mov	r4,r2
    1eb8:	000729c0 	call	729c <__floatsisf>
    1ebc:	1009883a 	mov	r4,r2
    1ec0:	00bffff4 	movhi	r2,65535
    1ec4:	10b1d704 	addi	r2,r2,-14500
    1ec8:	10bfff04 	addi	r2,r2,-4
    1ecc:	1707883a 	add	r3,r2,fp
    1ed0:	800490ba 	slli	r2,r16,2
    1ed4:	1885883a 	add	r2,r3,r2
    1ed8:	11000015 	stw	r4,0(r2)
                    right_buffer[buffer_index] = *(audio_ptr + 3);
    1edc:	e17ff617 	ldw	r5,-40(fp)
    1ee0:	e0bffa17 	ldw	r2,-24(fp)
    1ee4:	10c00317 	ldw	r3,12(r2)
    1ee8:	00bfffb4 	movhi	r2,65534
    1eec:	10a3b704 	addi	r2,r2,-28964
    1ef0:	10bfff04 	addi	r2,r2,-4
    1ef4:	1709883a 	add	r4,r2,fp
    1ef8:	280490ba 	slli	r2,r5,2
    1efc:	2085883a 	add	r2,r4,r2
    1f00:	10c00015 	stw	r3,0(r2)
                    ++buffer_index;
    1f04:	e0bff617 	ldw	r2,-40(fp)
    1f08:	10800044 	addi	r2,r2,1
    1f0c:	e0bff615 	stw	r2,-40(fp)

                    if (buffer_index == BUF_SIZE) {
    1f10:	e0bff617 	ldw	r2,-40(fp)
    1f14:	10938818 	cmpnei	r2,r2,20000
    1f18:	10004d1e 	bne	r2,zero,2050 <main+0x244>
                        // done recording
                        record = 0;
    1f1c:	e03ff815 	stw	zero,-32(fp)
                        *(red_LED_ptr) = 0x0;  // turn off LEDR
    1f20:	e0bffb17 	ldw	r2,-20(fp)
    1f24:	10000015 	stw	zero,0(r2)
                        normalize_audio(left_buffer, normalized_buffer, BUF_SIZE);
    1f28:	00bfff34 	movhi	r2,65532
    1f2c:	10959704 	addi	r2,r2,22108
    1f30:	10bfff04 	addi	r2,r2,-4
    1f34:	1707883a 	add	r3,r2,fp
    1f38:	00bffff4 	movhi	r2,65535
    1f3c:	10b1d704 	addi	r2,r2,-14500
    1f40:	10bfff04 	addi	r2,r2,-4
    1f44:	1705883a 	add	r2,r2,fp
    1f48:	01938804 	movi	r6,20000
    1f4c:	180b883a 	mov	r5,r3
    1f50:	1009883a 	mov	r4,r2
    1f54:	00021440 	call	2144 <normalize_audio>
                        // Calculate MFCCs
						calculate_mfcc(normalized_buffer, BUF_SIZE, mfcc_buffer);
    1f58:	00bffef4 	movhi	r2,65531
    1f5c:	10bd7c04 	addi	r2,r2,-2576
    1f60:	10bfff04 	addi	r2,r2,-4
    1f64:	1707883a 	add	r3,r2,fp
    1f68:	00bfff34 	movhi	r2,65532
    1f6c:	10959704 	addi	r2,r2,22108
    1f70:	10bfff04 	addi	r2,r2,-4
    1f74:	1705883a 	add	r2,r2,fp
    1f78:	180d883a 	mov	r6,r3
    1f7c:	01538804 	movi	r5,20000
    1f80:	1009883a 	mov	r4,r2
    1f84:	00023140 	call	2314 <calculate_mfcc>
                        *(red_LED_ptr) = 0x8;
    1f88:	e0bffb17 	ldw	r2,-20(fp)
    1f8c:	00c00204 	movi	r3,8
    1f90:	10c00015 	stw	r3,0(r2)
						int num_frames = (BUF_SIZE - FFT_SIZE) / FFT_SHIFT + 1;
    1f94:	00800984 	movi	r2,38
    1f98:	e0bff915 	stw	r2,-28(fp)
						for (int frame = 0; frame < num_frames; frame++) {
    1f9c:	e03ffd15 	stw	zero,-12(fp)
    1fa0:	00002706 	br	2040 <main+0x234>
							printf("Frame %d:\n", frame);
    1fa4:	e17ffd17 	ldw	r5,-12(fp)
    1fa8:	01000074 	movhi	r4,1
    1fac:	211dd804 	addi	r4,r4,30560
    1fb0:	000a7e00 	call	a7e0 <printf>
							for (int m = 0; m < NUM_MFCC; m++) {
    1fb4:	e03ffc15 	stw	zero,-16(fp)
    1fb8:	00001906 	br	2020 <main+0x214>
								printf("%f ", mfcc_buffer[frame * NUM_MFCC + m]);
    1fbc:	01400344 	movi	r5,13
    1fc0:	e13ffd17 	ldw	r4,-12(fp)
    1fc4:	000714c0 	call	714c <__mulsi3>
    1fc8:	1007883a 	mov	r3,r2
    1fcc:	e0bffc17 	ldw	r2,-16(fp)
    1fd0:	1889883a 	add	r4,r3,r2
    1fd4:	00bffef4 	movhi	r2,65531
    1fd8:	10bd7c04 	addi	r2,r2,-2576
    1fdc:	10bfff04 	addi	r2,r2,-4
    1fe0:	1707883a 	add	r3,r2,fp
    1fe4:	200490ba 	slli	r2,r4,2
    1fe8:	1885883a 	add	r2,r3,r2
    1fec:	10c00017 	ldw	r3,0(r2)
    1ff0:	1809883a 	mov	r4,r3
    1ff4:	0009be40 	call	9be4 <__extendsfdf2>
    1ff8:	100d883a 	mov	r6,r2
    1ffc:	180f883a 	mov	r7,r3
    2000:	300b883a 	mov	r5,r6
    2004:	380d883a 	mov	r6,r7
    2008:	01000074 	movhi	r4,1
    200c:	211ddb04 	addi	r4,r4,30572
    2010:	000a7e00 	call	a7e0 <printf>
							for (int m = 0; m < NUM_MFCC; m++) {
    2014:	e0bffc17 	ldw	r2,-16(fp)
    2018:	10800044 	addi	r2,r2,1
    201c:	e0bffc15 	stw	r2,-16(fp)
    2020:	e0bffc17 	ldw	r2,-16(fp)
    2024:	10800350 	cmplti	r2,r2,13
    2028:	103fe41e 	bne	r2,zero,1fbc <main+0x1b0>
							}
							printf("\n");
    202c:	01000284 	movi	r4,10
    2030:	000a8200 	call	a820 <putchar>
						for (int frame = 0; frame < num_frames; frame++) {
    2034:	e0bffd17 	ldw	r2,-12(fp)
    2038:	10800044 	addi	r2,r2,1
    203c:	e0bffd15 	stw	r2,-12(fp)
    2040:	e0fffd17 	ldw	r3,-12(fp)
    2044:	e0bff917 	ldw	r2,-28(fp)
    2048:	18bfd616 	blt	r3,r2,1fa4 <main+0x198>
						}
                        // Reset buffer_index for the next recording
                        buffer_index = 0;
    204c:	e03ff615 	stw	zero,-40(fp)
                    }
                    fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
    2050:	e0bffa17 	ldw	r2,-24(fp)
    2054:	10800117 	ldw	r2,4(r2)
    2058:	e0bffe15 	stw	r2,-8(fp)
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    205c:	e0bffe17 	ldw	r2,-8(fp)
    2060:	10803fcc 	andi	r2,r2,255
    2064:	103f7b26 	beq	r2,zero,1e54 <main+0x48>
    2068:	e0bff617 	ldw	r2,-40(fp)
    206c:	10938810 	cmplti	r2,r2,20000
    2070:	103f8c1e 	bne	r2,zero,1ea4 <main+0x98>
        check_KEYs(&record, &play, &buffer_index);
    2074:	003f7706 	br	1e54 <main+0x48>

00002078 <check_KEYs>:
}

/****************************************************************************************
 * Subroutine to read KEYs
 ****************************************************************************************/
void check_KEYs(int *KEY0, int *KEY1, int *counter) {
    2078:	defff904 	addi	sp,sp,-28
    207c:	df000615 	stw	fp,24(sp)
    2080:	df000604 	addi	fp,sp,24
    2084:	e13ffc15 	stw	r4,-16(fp)
    2088:	e17ffb15 	stw	r5,-20(fp)
    208c:	e1bffa15 	stw	r6,-24(fp)
    volatile int *KEY_ptr = (int *)KEY_BASE;
    2090:	00bfc834 	movhi	r2,65312
    2094:	10801404 	addi	r2,r2,80
    2098:	e0bfff15 	stw	r2,-4(fp)
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    209c:	00bfc834 	movhi	r2,65312
    20a0:	108c1004 	addi	r2,r2,12352
    20a4:	e0bffe15 	stw	r2,-8(fp)
    int KEY_value;

    KEY_value = *(KEY_ptr);  // read the pushbutton KEY values
    20a8:	e0bfff17 	ldw	r2,-4(fp)
    20ac:	10800017 	ldw	r2,0(r2)
    20b0:	e0bffd15 	stw	r2,-12(fp)
    while (*KEY_ptr)
    20b4:	0001883a 	nop
    20b8:	e0bfff17 	ldw	r2,-4(fp)
    20bc:	10800017 	ldw	r2,0(r2)
    20c0:	103ffd1e 	bne	r2,zero,20b8 <check_KEYs+0x40>
        ;  // wait for pushbutton KEY release

    if (KEY_value == 0x1)  // check KEY0
    20c4:	e0bffd17 	ldw	r2,-12(fp)
    20c8:	10800058 	cmpnei	r2,r2,1
    20cc:	10000b1e 	bne	r2,zero,20fc <check_KEYs+0x84>
    {
        // reset counter to start recording
        *counter = 0;
    20d0:	e0bffa17 	ldw	r2,-24(fp)
    20d4:	10000015 	stw	zero,0(r2)
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
    20d8:	e0bffe17 	ldw	r2,-8(fp)
    20dc:	00c00104 	movi	r3,4
    20e0:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
    20e4:	e0bffe17 	ldw	r2,-8(fp)
    20e8:	10000015 	stw	zero,0(r2)

        *KEY0 = 1;
    20ec:	e0bffc17 	ldw	r2,-16(fp)
    20f0:	00c00044 	movi	r3,1
    20f4:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x8;
        *(audio_ptr) = 0x0;

        *KEY1 = 1;
    }
}
    20f8:	00000d06 	br	2130 <check_KEYs+0xb8>
    } else if (KEY_value == 0x2)  // check KEY1
    20fc:	e0bffd17 	ldw	r2,-12(fp)
    2100:	10800098 	cmpnei	r2,r2,2
    2104:	10000a1e 	bne	r2,zero,2130 <check_KEYs+0xb8>
        *counter = 0;
    2108:	e0bffa17 	ldw	r2,-24(fp)
    210c:	10000015 	stw	zero,0(r2)
        *(audio_ptr) = 0x8;
    2110:	e0bffe17 	ldw	r2,-8(fp)
    2114:	00c00204 	movi	r3,8
    2118:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
    211c:	e0bffe17 	ldw	r2,-8(fp)
    2120:	10000015 	stw	zero,0(r2)
        *KEY1 = 1;
    2124:	e0bffb17 	ldw	r2,-20(fp)
    2128:	00c00044 	movi	r3,1
    212c:	10c00015 	stw	r3,0(r2)
}
    2130:	0001883a 	nop
    2134:	e037883a 	mov	sp,fp
    2138:	df000017 	ldw	fp,0(sp)
    213c:	dec00104 	addi	sp,sp,4
    2140:	f800283a 	ret

00002144 <normalize_audio>:

void normalize_audio(float *input_buffer, float *output_buffer, int size) {
    2144:	defff604 	addi	sp,sp,-40
    2148:	dfc00915 	stw	ra,36(sp)
    214c:	df000815 	stw	fp,32(sp)
    2150:	df000804 	addi	fp,sp,32
    2154:	e13ffa15 	stw	r4,-24(fp)
    2158:	e17ff915 	stw	r5,-28(fp)
    215c:	e1bff815 	stw	r6,-32(fp)
	float max_val = 0.0f;
    2160:	e03fff15 	stw	zero,-4(fp)

	// Find the maximum absolute value
	for (int i = 0; i < size; i++) {
    2164:	e03ffe15 	stw	zero,-8(fp)
    2168:	00001606 	br	21c4 <normalize_audio+0x80>
		float signed_val = input_buffer[i] - 32768.0f;  // Adjusting for unsigned 16-bit PCM
    216c:	e0bffe17 	ldw	r2,-8(fp)
    2170:	100490ba 	slli	r2,r2,2
    2174:	e0fffa17 	ldw	r3,-24(fp)
    2178:	1885883a 	add	r2,r3,r2
    217c:	10c00017 	ldw	r3,0(r2)
    2180:	0091c034 	movhi	r2,18176
    2184:	1885ffb2 	custom	254,r2,r3,r2
    2188:	e0bffc15 	stw	r2,-16(fp)
		float abs_val = fabs(signed_val);
    218c:	e0fffc17 	ldw	r3,-16(fp)
    2190:	00a00034 	movhi	r2,32768
    2194:	10bfffc4 	addi	r2,r2,-1
    2198:	1884703a 	and	r2,r3,r2
    219c:	e0bffb15 	stw	r2,-20(fp)
		if (abs_val > max_val) {
    21a0:	e17fff17 	ldw	r5,-4(fp)
    21a4:	e13ffb17 	ldw	r4,-20(fp)
    21a8:	00071e40 	call	71e4 <__gesf2>
    21ac:	0080020e 	bge	zero,r2,21b8 <normalize_audio+0x74>
			max_val = abs_val;
    21b0:	e0bffb17 	ldw	r2,-20(fp)
    21b4:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < size; i++) {
    21b8:	e0bffe17 	ldw	r2,-8(fp)
    21bc:	10800044 	addi	r2,r2,1
    21c0:	e0bffe15 	stw	r2,-8(fp)
    21c4:	e0fffe17 	ldw	r3,-8(fp)
    21c8:	e0bff817 	ldw	r2,-32(fp)
    21cc:	18bfe716 	blt	r3,r2,216c <normalize_audio+0x28>
		}
	}

	// Prevent division by zero
	if (max_val == 0) {
    21d0:	000b883a 	mov	r5,zero
    21d4:	e13fff17 	ldw	r4,-4(fp)
    21d8:	00071740 	call	7174 <__eqsf2>
    21dc:	1000021e 	bne	r2,zero,21e8 <normalize_audio+0xa4>
		max_val = 1.0f;  // To avoid division by zero
    21e0:	008fe034 	movhi	r2,16256
    21e4:	e0bfff15 	stw	r2,-4(fp)
	}

	// Normalize the input buffer to the range [-1, 1]
	for (int i = 0; i < size; i++) {
    21e8:	e03ffd15 	stw	zero,-12(fp)
    21ec:	00001106 	br	2234 <normalize_audio+0xf0>
		output_buffer[i] = (input_buffer[i] - 32768.0f) / max_val;
    21f0:	e0bffd17 	ldw	r2,-12(fp)
    21f4:	100490ba 	slli	r2,r2,2
    21f8:	e0fffa17 	ldw	r3,-24(fp)
    21fc:	1885883a 	add	r2,r3,r2
    2200:	10c00017 	ldw	r3,0(r2)
    2204:	0091c034 	movhi	r2,18176
    2208:	1889ffb2 	custom	254,r4,r3,r2
    220c:	e0bffd17 	ldw	r2,-12(fp)
    2210:	100490ba 	slli	r2,r2,2
    2214:	e0fff917 	ldw	r3,-28(fp)
    2218:	1885883a 	add	r2,r3,r2
    221c:	e0ffff17 	ldw	r3,-4(fp)
    2220:	20c7fff2 	custom	255,r3,r4,r3
    2224:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < size; i++) {
    2228:	e0bffd17 	ldw	r2,-12(fp)
    222c:	10800044 	addi	r2,r2,1
    2230:	e0bffd15 	stw	r2,-12(fp)
    2234:	e0fffd17 	ldw	r3,-12(fp)
    2238:	e0bff817 	ldw	r2,-32(fp)
    223c:	18bfec16 	blt	r3,r2,21f0 <normalize_audio+0xac>
	}
}
    2240:	0001883a 	nop
    2244:	0001883a 	nop
    2248:	e037883a 	mov	sp,fp
    224c:	dfc00117 	ldw	ra,4(sp)
    2250:	df000017 	ldw	fp,0(sp)
    2254:	dec00204 	addi	sp,sp,8
    2258:	f800283a 	ret

0000225c <fft>:

void fft(float *input_buffer, kiss_fft_cpx *output_buffer) {
    225c:	def7fa04 	addi	sp,sp,-8216
    2260:	dfc80515 	stw	ra,8212(sp)
    2264:	df080415 	stw	fp,8208(sp)
    2268:	df080404 	addi	fp,sp,8208
    226c:	e137fd15 	stw	r4,-8204(fp)
    2270:	e177fc15 	stw	r5,-8208(fp)
    kiss_fft_cfg config;

    config = kiss_fft_alloc(FFT_SIZE, 0, NULL, NULL);
    2274:	000f883a 	mov	r7,zero
    2278:	000d883a 	mov	r6,zero
    227c:	000b883a 	mov	r5,zero
    2280:	01010004 	movi	r4,1024
    2284:	00019c40 	call	19c4 <kiss_fft_alloc>
    2288:	e0bffe15 	stw	r2,-8(fp)

    // Convert input to kiss_fft_cpx format
    kiss_fft_cpx kiss_input_buffer[FFT_SIZE];
    for (int i = 0; i < FFT_SIZE; i++) {
    228c:	e03fff15 	stw	zero,-4(fp)
    2290:	00001006 	br	22d4 <fft+0x78>
        kiss_input_buffer[i].r = input_buffer[i];
    2294:	e0bfff17 	ldw	r2,-4(fp)
    2298:	100490ba 	slli	r2,r2,2
    229c:	e0f7fd17 	ldw	r3,-8204(fp)
    22a0:	1885883a 	add	r2,r3,r2
    22a4:	10c00017 	ldw	r3,0(r2)
    22a8:	e0bfff17 	ldw	r2,-4(fp)
    22ac:	100490fa 	slli	r2,r2,3
    22b0:	e085883a 	add	r2,fp,r2
    22b4:	10f7fe15 	stw	r3,-8200(r2)
        kiss_input_buffer[i].i = 0; // Assuming input is real, imaginary part is 0
    22b8:	e0bfff17 	ldw	r2,-4(fp)
    22bc:	100490fa 	slli	r2,r2,3
    22c0:	e085883a 	add	r2,fp,r2
    22c4:	1037ff15 	stw	zero,-8196(r2)
    for (int i = 0; i < FFT_SIZE; i++) {
    22c8:	e0bfff17 	ldw	r2,-4(fp)
    22cc:	10800044 	addi	r2,r2,1
    22d0:	e0bfff15 	stw	r2,-4(fp)
    22d4:	e0bfff17 	ldw	r2,-4(fp)
    22d8:	10810010 	cmplti	r2,r2,1024
    22dc:	103fed1e 	bne	r2,zero,2294 <fft+0x38>
    }

    // Perform FFT
    kiss_fft(config, kiss_input_buffer, output_buffer);
    22e0:	e0b7fe04 	addi	r2,fp,-8200
    22e4:	e1b7fc17 	ldw	r6,-8208(fp)
    22e8:	100b883a 	mov	r5,r2
    22ec:	e13ffe17 	ldw	r4,-8(fp)
    22f0:	0001cd40 	call	1cd4 <kiss_fft>

    // Free the FFT configuration
    kiss_fft_free(config);
    22f4:	e13ffe17 	ldw	r4,-8(fp)
    22f8:	0009ec00 	call	9ec0 <free>
}
    22fc:	0001883a 	nop
    2300:	e037883a 	mov	sp,fp
    2304:	dfc00117 	ldw	ra,4(sp)
    2308:	df000017 	ldw	fp,0(sp)
    230c:	dec00204 	addi	sp,sp,8
    2310:	f800283a 	ret

00002314 <calculate_mfcc>:

void calculate_mfcc(float *input_buffer, int signal_length, float *mfcc_buffer) {
    2314:	dee7f304 	addi	sp,sp,-24628
    2318:	dfd80c15 	stw	ra,24624(sp)
    231c:	df180b15 	stw	fp,24620(sp)
    2320:	dc980a15 	stw	r18,24616(sp)
    2324:	dc580915 	stw	r17,24612(sp)
    2328:	dc180815 	stw	r16,24608(sp)
    232c:	df180b04 	addi	fp,sp,24620
    2330:	e127f815 	stw	r4,-24608(fp)
    2334:	e167f715 	stw	r5,-24612(fp)
    2338:	e1a7f615 	stw	r6,-24616(fp)
    float frame[FFT_SIZE];
    float windowed_frame[FFT_SIZE];
    // Calculate how many frames can be extracted from the input signal.
    int num_frames = (signal_length - FFT_SIZE) / FFT_SHIFT + 1;
    233c:	e0a7f717 	ldw	r2,-24612(fp)
    2340:	10bf0004 	addi	r2,r2,-1024
    2344:	1000010e 	bge	r2,zero,234c <calculate_mfcc+0x38>
    2348:	10807fc4 	addi	r2,r2,511
    234c:	1005d27a 	srai	r2,r2,9
    2350:	10800044 	addi	r2,r2,1
    2354:	e0bff915 	stw	r2,-28(fp)

    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
    2358:	e03ffc15 	stw	zero,-16(fp)
    235c:	00007106 	br	2524 <calculate_mfcc+0x210>
        // Extract FFT_SIZE samples from the start of the current frame.
        memcpy(frame, input_buffer + frame_num * FFT_SHIFT, sizeof(float) * FFT_SIZE);
    2360:	e0bffc17 	ldw	r2,-16(fp)
    2364:	100492fa 	slli	r2,r2,11
    2368:	e0e7f817 	ldw	r3,-24608(fp)
    236c:	1887883a 	add	r3,r3,r2
    2370:	e0bbf904 	addi	r2,fp,-4124
    2374:	01840004 	movi	r6,4096
    2378:	180b883a 	mov	r5,r3
    237c:	1009883a 	mov	r4,r2
    2380:	000a6b00 	call	a6b0 <memcpy>
        printf("cycle %d fft", frame_num + 1);
    2384:	e0bffc17 	ldw	r2,-16(fp)
    2388:	10800044 	addi	r2,r2,1
    238c:	100b883a 	mov	r5,r2
    2390:	01000074 	movhi	r4,1
    2394:	211ddc04 	addi	r4,r4,30576
    2398:	000a7e00 	call	a7e0 <printf>
        // Apply the Hamming Window to the current frame.
        //hamming_window(frame, windowed_frame, FFT_SIZE);

        // Calculate the FFT of the current frame.
        kiss_fft_cpx fft_output[FFT_SIZE];
        fft(frame, fft_output);
    239c:	e0e7f904 	addi	r3,fp,-24604
    23a0:	e0bbf904 	addi	r2,fp,-4124
    23a4:	180b883a 	mov	r5,r3
    23a8:	1009883a 	mov	r4,r2
    23ac:	000225c0 	call	225c <fft>

        printf("cycle %d spectrum", frame_num + 1);
    23b0:	e0bffc17 	ldw	r2,-16(fp)
    23b4:	10800044 	addi	r2,r2,1
    23b8:	100b883a 	mov	r5,r2
    23bc:	01000074 	movhi	r4,1
    23c0:	211de004 	addi	r4,r4,30592
    23c4:	000a7e00 	call	a7e0 <printf>

        // Compute the magnitude spectrum of the current frame.
        double magnitude_spectrum[FFT_SIZE];
        for (int i = 0; i < FFT_SIZE; i++) {
    23c8:	e03ffb15 	stw	zero,-20(fp)
    23cc:	00002906 	br	2474 <calculate_mfcc+0x160>
            magnitude_spectrum[i] = sqrt(fft_output[i].r * fft_output[i].r + fft_output[i].i * fft_output[i].i);
    23d0:	e0bffb17 	ldw	r2,-20(fp)
    23d4:	100490fa 	slli	r2,r2,3
    23d8:	10bffd04 	addi	r2,r2,-12
    23dc:	1705883a 	add	r2,r2,fp
    23e0:	10e7fc17 	ldw	r3,-24592(r2)
    23e4:	e0bffb17 	ldw	r2,-20(fp)
    23e8:	100490fa 	slli	r2,r2,3
    23ec:	10bffd04 	addi	r2,r2,-12
    23f0:	1709883a 	add	r4,r2,fp
    23f4:	20a7fc17 	ldw	r2,-24592(r4)
    23f8:	1887ff32 	custom	252,r3,r3,r2
    23fc:	e0bffb17 	ldw	r2,-20(fp)
    2400:	100490fa 	slli	r2,r2,3
    2404:	10bffd04 	addi	r2,r2,-12
    2408:	1705883a 	add	r2,r2,fp
    240c:	1127fd17 	ldw	r4,-24588(r2)
    2410:	e0bffb17 	ldw	r2,-20(fp)
    2414:	100490fa 	slli	r2,r2,3
    2418:	10bffd04 	addi	r2,r2,-12
    241c:	170b883a 	add	r5,r2,fp
    2420:	28a7fd17 	ldw	r2,-24588(r5)
    2424:	2085ff32 	custom	252,r2,r4,r2
    2428:	1885ff72 	custom	253,r2,r3,r2
    242c:	1009883a 	mov	r4,r2
    2430:	0009be40 	call	9be4 <__extendsfdf2>
    2434:	100d883a 	mov	r6,r2
    2438:	180f883a 	mov	r7,r3
    243c:	3009883a 	mov	r4,r6
    2440:	380b883a 	mov	r5,r7
    2444:	00034b80 	call	34b8 <sqrt>
    2448:	1009883a 	mov	r4,r2
    244c:	180b883a 	mov	r5,r3
    2450:	e0bffb17 	ldw	r2,-20(fp)
    2454:	100490fa 	slli	r2,r2,3
    2458:	10bffd04 	addi	r2,r2,-12
    245c:	1705883a 	add	r2,r2,fp
    2460:	112ffc15 	stw	r4,-16400(r2)
    2464:	116ffd15 	stw	r5,-16396(r2)
        for (int i = 0; i < FFT_SIZE; i++) {
    2468:	e0bffb17 	ldw	r2,-20(fp)
    246c:	10800044 	addi	r2,r2,1
    2470:	e0bffb15 	stw	r2,-20(fp)
    2474:	e0bffb17 	ldw	r2,-20(fp)
    2478:	10810010 	cmplti	r2,r2,1024
    247c:	103fd41e 	bne	r2,zero,23d0 <calculate_mfcc+0xbc>
        }

        printf("cycle %d mfcc", frame_num + 1);
    2480:	e0bffc17 	ldw	r2,-16(fp)
    2484:	10800044 	addi	r2,r2,1
    2488:	100b883a 	mov	r5,r2
    248c:	01000074 	movhi	r4,1
    2490:	211de504 	addi	r4,r4,30612
    2494:	000a7e00 	call	a7e0 <printf>

        // Calculate MFCCs for the current frame.
        for (int m = 0; m < NUM_MFCC; m++) {
    2498:	e03ffa15 	stw	zero,-24(fp)
    249c:	00001b06 	br	250c <calculate_mfcc+0x1f8>
            mfcc_buffer[frame_num * NUM_MFCC + m] = GetCoefficient(magnitude_spectrum, 8192, NUM_FILTERS, FFT_SIZE, m);
    24a0:	e0bffa17 	ldw	r2,-24(fp)
    24a4:	e0eff904 	addi	r3,fp,-16412
    24a8:	d8800015 	stw	r2,0(sp)
    24ac:	01c10004 	movi	r7,1024
    24b0:	01800304 	movi	r6,12
    24b4:	01480004 	movi	r5,8192
    24b8:	1809883a 	mov	r4,r3
    24bc:	00025580 	call	2558 <GetCoefficient>
    24c0:	1021883a 	mov	r16,r2
    24c4:	1823883a 	mov	r17,r3
    24c8:	01400344 	movi	r5,13
    24cc:	e13ffc17 	ldw	r4,-16(fp)
    24d0:	000714c0 	call	714c <__mulsi3>
    24d4:	1007883a 	mov	r3,r2
    24d8:	e0bffa17 	ldw	r2,-24(fp)
    24dc:	1885883a 	add	r2,r3,r2
    24e0:	100490ba 	slli	r2,r2,2
    24e4:	e0e7f617 	ldw	r3,-24616(fp)
    24e8:	18a5883a 	add	r18,r3,r2
    24ec:	8009883a 	mov	r4,r16
    24f0:	880b883a 	mov	r5,r17
    24f4:	0009ce00 	call	9ce0 <__truncdfsf2>
    24f8:	1007883a 	mov	r3,r2
    24fc:	90c00015 	stw	r3,0(r18)
        for (int m = 0; m < NUM_MFCC; m++) {
    2500:	e0bffa17 	ldw	r2,-24(fp)
    2504:	10800044 	addi	r2,r2,1
    2508:	e0bffa15 	stw	r2,-24(fp)
    250c:	e0bffa17 	ldw	r2,-24(fp)
    2510:	10800350 	cmplti	r2,r2,13
    2514:	103fe21e 	bne	r2,zero,24a0 <calculate_mfcc+0x18c>
    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
    2518:	e0bffc17 	ldw	r2,-16(fp)
    251c:	10800044 	addi	r2,r2,1
    2520:	e0bffc15 	stw	r2,-16(fp)
    2524:	e0fffc17 	ldw	r3,-16(fp)
    2528:	e0bff917 	ldw	r2,-28(fp)
    252c:	18bf8c16 	blt	r3,r2,2360 <calculate_mfcc+0x4c>
        }
    }
}
    2530:	0001883a 	nop
    2534:	0001883a 	nop
    2538:	e6fffd04 	addi	sp,fp,-12
    253c:	dfc00417 	ldw	ra,16(sp)
    2540:	df000317 	ldw	fp,12(sp)
    2544:	dc800217 	ldw	r18,8(sp)
    2548:	dc400117 	ldw	r17,4(sp)
    254c:	dc000017 	ldw	r16,0(sp)
    2550:	dec00504 	addi	sp,sp,20
    2554:	f800283a 	ret

00002558 <GetCoefficient>:
 * binSize - the size of the spectralData array, usually a power of 2
 * m - The mth MFCC coefficient to compute
 *
 */
double GetCoefficient(double* spectralData, unsigned int samplingRate, unsigned int NumFilters, unsigned int binSize, unsigned int m)
{
    2558:	deffee04 	addi	sp,sp,-72
    255c:	dfc01115 	stw	ra,68(sp)
    2560:	df001015 	stw	fp,64(sp)
    2564:	dcc00f15 	stw	r19,60(sp)
    2568:	dc800e15 	stw	r18,56(sp)
    256c:	dc400d15 	stw	r17,52(sp)
    2570:	dc000c15 	stw	r16,48(sp)
    2574:	df001004 	addi	fp,sp,64
    2578:	e13ff315 	stw	r4,-52(fp)
    257c:	e17ff215 	stw	r5,-56(fp)
    2580:	e1bff115 	stw	r6,-60(fp)
    2584:	e1fff015 	stw	r7,-64(fp)
	double result = 0.0f;
    2588:	e03ff415 	stw	zero,-48(fp)
    258c:	e03ff515 	stw	zero,-44(fp)
	double outerSum = 0.0f;
    2590:	e03ffa15 	stw	zero,-24(fp)
    2594:	e03ffb15 	stw	zero,-20(fp)
	double innerSum = 0.0f;
    2598:	e03ff815 	stw	zero,-32(fp)
    259c:	e03ff915 	stw	zero,-28(fp)
	unsigned int k, l;

	// 0 <= m < L
	if(m >= NumFilters)
    25a0:	e0c00217 	ldw	r3,8(fp)
    25a4:	e0bff117 	ldw	r2,-60(fp)
    25a8:	18800336 	bltu	r3,r2,25b8 <GetCoefficient+0x60>
	{
		// This represents an error condition - the specified coefficient is greater than or equal to the number of filters. The behavior in this case is undefined.
		return 0.0f;
    25ac:	0005883a 	mov	r2,zero
    25b0:	0007883a 	mov	r3,zero
    25b4:	00007f06 	br	27b4 <GetCoefficient+0x25c>
	}

	result = NormalizationFactor(NumFilters, m);
    25b8:	e0bff117 	ldw	r2,-60(fp)
    25bc:	e0c00217 	ldw	r3,8(fp)
    25c0:	180b883a 	mov	r5,r3
    25c4:	1009883a 	mov	r4,r2
    25c8:	00027e80 	call	27e8 <NormalizationFactor>
    25cc:	e0bff415 	stw	r2,-48(fp)
    25d0:	e0fff515 	stw	r3,-44(fp)

	for(l = 1; l <= NumFilters; l++)
    25d4:	00800044 	movi	r2,1
    25d8:	e0bff615 	stw	r2,-40(fp)
    25dc:	00006706 	br	277c <GetCoefficient+0x224>
	{
		// Compute inner sum
		innerSum = 0.0f;
    25e0:	e03ff815 	stw	zero,-32(fp)
    25e4:	e03ff915 	stw	zero,-28(fp)
		for(k = 0; k < binSize - 1; k++)
    25e8:	e03ff715 	stw	zero,-36(fp)
    25ec:	00002606 	br	2688 <GetCoefficient+0x130>
		{
			innerSum += fabs(spectralData[k] * GetFilterParameter(samplingRate, binSize, k, l));
    25f0:	e0bff717 	ldw	r2,-36(fp)
    25f4:	100490fa 	slli	r2,r2,3
    25f8:	e0fff317 	ldw	r3,-52(fp)
    25fc:	1885883a 	add	r2,r3,r2
    2600:	14000017 	ldw	r16,0(r2)
    2604:	14400117 	ldw	r17,4(r2)
    2608:	e1fff617 	ldw	r7,-40(fp)
    260c:	e1bff717 	ldw	r6,-36(fp)
    2610:	e17ff017 	ldw	r5,-64(fp)
    2614:	e13ff217 	ldw	r4,-56(fp)
    2618:	00028b00 	call	28b0 <GetFilterParameter>
    261c:	1009883a 	mov	r4,r2
    2620:	180b883a 	mov	r5,r3
    2624:	200d883a 	mov	r6,r4
    2628:	280f883a 	mov	r7,r5
    262c:	8009883a 	mov	r4,r16
    2630:	880b883a 	mov	r5,r17
    2634:	00089100 	call	8910 <__muldf3>
    2638:	100d883a 	mov	r6,r2
    263c:	180f883a 	mov	r7,r3
    2640:	3009883a 	mov	r4,r6
    2644:	380b883a 	mov	r5,r7
    2648:	2025883a 	mov	r18,r4
    264c:	00a00034 	movhi	r2,32768
    2650:	10bfffc4 	addi	r2,r2,-1
    2654:	28a6703a 	and	r19,r5,r2
    2658:	900d883a 	mov	r6,r18
    265c:	980f883a 	mov	r7,r19
    2660:	e13ff817 	ldw	r4,-32(fp)
    2664:	e17ff917 	ldw	r5,-28(fp)
    2668:	00074bc0 	call	74bc <__adddf3>
    266c:	1009883a 	mov	r4,r2
    2670:	180b883a 	mov	r5,r3
    2674:	e13ff815 	stw	r4,-32(fp)
    2678:	e17ff915 	stw	r5,-28(fp)
		for(k = 0; k < binSize - 1; k++)
    267c:	e0bff717 	ldw	r2,-36(fp)
    2680:	10800044 	addi	r2,r2,1
    2684:	e0bff715 	stw	r2,-36(fp)
    2688:	e0bff017 	ldw	r2,-64(fp)
    268c:	10bfffc4 	addi	r2,r2,-1
    2690:	e0fff717 	ldw	r3,-36(fp)
    2694:	18bfd636 	bltu	r3,r2,25f0 <GetCoefficient+0x98>
		}

		if(innerSum > 0.0f)
    2698:	000d883a 	mov	r6,zero
    269c:	000f883a 	mov	r7,zero
    26a0:	e13ff817 	ldw	r4,-32(fp)
    26a4:	e17ff917 	ldw	r5,-28(fp)
    26a8:	00087400 	call	8740 <__gedf2>
    26ac:	0080050e 	bge	zero,r2,26c4 <GetCoefficient+0x16c>
		{
			innerSum = log(innerSum); // The log of 0 is undefined, so don't use it
    26b0:	e13ff817 	ldw	r4,-32(fp)
    26b4:	e17ff917 	ldw	r5,-28(fp)
    26b8:	00031380 	call	3138 <log>
    26bc:	e0bff815 	stw	r2,-32(fp)
    26c0:	e0fff915 	stw	r3,-28(fp)
		}

		innerSum = innerSum * cos(((m * PI) / NumFilters) * (l - 0.5f));
    26c4:	e1000217 	ldw	r4,8(fp)
    26c8:	00073c00 	call	73c0 <__floatunsisf>
    26cc:	1007883a 	mov	r3,r2
    26d0:	00901274 	movhi	r2,16457
    26d4:	1083f6c4 	addi	r2,r2,4059
    26d8:	18a1ff32 	custom	252,r16,r3,r2
    26dc:	e13ff117 	ldw	r4,-60(fp)
    26e0:	00073c00 	call	73c0 <__floatunsisf>
    26e4:	1007883a 	mov	r3,r2
    26e8:	80e1fff2 	custom	255,r16,r16,r3
    26ec:	e13ff617 	ldw	r4,-40(fp)
    26f0:	00073c00 	call	73c0 <__floatunsisf>
    26f4:	1007883a 	mov	r3,r2
    26f8:	008fc034 	movhi	r2,16128
    26fc:	1885ffb2 	custom	254,r2,r3,r2
    2700:	8085ff32 	custom	252,r2,r16,r2
    2704:	1009883a 	mov	r4,r2
    2708:	0009be40 	call	9be4 <__extendsfdf2>
    270c:	100d883a 	mov	r6,r2
    2710:	180f883a 	mov	r7,r3
    2714:	3009883a 	mov	r4,r6
    2718:	380b883a 	mov	r5,r7
    271c:	0002de00 	call	2de0 <cos>
    2720:	1009883a 	mov	r4,r2
    2724:	180b883a 	mov	r5,r3
    2728:	200d883a 	mov	r6,r4
    272c:	280f883a 	mov	r7,r5
    2730:	e13ff817 	ldw	r4,-32(fp)
    2734:	e17ff917 	ldw	r5,-28(fp)
    2738:	00089100 	call	8910 <__muldf3>
    273c:	1009883a 	mov	r4,r2
    2740:	180b883a 	mov	r5,r3
    2744:	e13ff815 	stw	r4,-32(fp)
    2748:	e17ff915 	stw	r5,-28(fp)


		outerSum += innerSum;
    274c:	e1bff817 	ldw	r6,-32(fp)
    2750:	e1fff917 	ldw	r7,-28(fp)
    2754:	e13ffa17 	ldw	r4,-24(fp)
    2758:	e17ffb17 	ldw	r5,-20(fp)
    275c:	00074bc0 	call	74bc <__adddf3>
    2760:	1009883a 	mov	r4,r2
    2764:	180b883a 	mov	r5,r3
    2768:	e13ffa15 	stw	r4,-24(fp)
    276c:	e17ffb15 	stw	r5,-20(fp)
	for(l = 1; l <= NumFilters; l++)
    2770:	e0bff617 	ldw	r2,-40(fp)
    2774:	10800044 	addi	r2,r2,1
    2778:	e0bff615 	stw	r2,-40(fp)
    277c:	e0bff617 	ldw	r2,-40(fp)
    2780:	e0fff117 	ldw	r3,-60(fp)
    2784:	18bf962e 	bgeu	r3,r2,25e0 <GetCoefficient+0x88>
	}

	result *= outerSum;
    2788:	e1bffa17 	ldw	r6,-24(fp)
    278c:	e1fffb17 	ldw	r7,-20(fp)
    2790:	e13ff417 	ldw	r4,-48(fp)
    2794:	e17ff517 	ldw	r5,-44(fp)
    2798:	00089100 	call	8910 <__muldf3>
    279c:	1009883a 	mov	r4,r2
    27a0:	180b883a 	mov	r5,r3
    27a4:	e13ff415 	stw	r4,-48(fp)
    27a8:	e17ff515 	stw	r5,-44(fp)

	return result;
    27ac:	e0bff417 	ldw	r2,-48(fp)
    27b0:	e0fff517 	ldw	r3,-44(fp)
}
    27b4:	1009883a 	mov	r4,r2
    27b8:	180b883a 	mov	r5,r3
    27bc:	2005883a 	mov	r2,r4
    27c0:	2807883a 	mov	r3,r5
    27c4:	e6fffc04 	addi	sp,fp,-16
    27c8:	dfc00517 	ldw	ra,20(sp)
    27cc:	df000417 	ldw	fp,16(sp)
    27d0:	dcc00317 	ldw	r19,12(sp)
    27d4:	dc800217 	ldw	r18,8(sp)
    27d8:	dc400117 	ldw	r17,4(sp)
    27dc:	dc000017 	ldw	r16,0(sp)
    27e0:	dec00604 	addi	sp,sp,24
    27e4:	f800283a 	ret

000027e8 <NormalizationFactor>:
/*
 * Computes the Normalization Factor (Equation 6)
 * Used for internal computation only - not to be called directly
 */
double NormalizationFactor(int NumFilters, int m)
{
    27e8:	defffa04 	addi	sp,sp,-24
    27ec:	dfc00515 	stw	ra,20(sp)
    27f0:	df000415 	stw	fp,16(sp)
    27f4:	df000404 	addi	fp,sp,16
    27f8:	e13ffd15 	stw	r4,-12(fp)
    27fc:	e17ffc15 	stw	r5,-16(fp)
	double normalizationFactor = 0.0f;
    2800:	e03ffe15 	stw	zero,-8(fp)
    2804:	e03fff15 	stw	zero,-4(fp)

	if(m == 0)
    2808:	e0bffc17 	ldw	r2,-16(fp)
    280c:	10000f1e 	bne	r2,zero,284c <NormalizationFactor+0x64>
	{
		normalizationFactor = sqrt(1.0f / NumFilters);
    2810:	e13ffd17 	ldw	r4,-12(fp)
    2814:	000729c0 	call	729c <__floatsisf>
    2818:	1007883a 	mov	r3,r2
    281c:	008fe034 	movhi	r2,16256
    2820:	10c5fff2 	custom	255,r2,r2,r3
    2824:	1009883a 	mov	r4,r2
    2828:	0009be40 	call	9be4 <__extendsfdf2>
    282c:	100d883a 	mov	r6,r2
    2830:	180f883a 	mov	r7,r3
    2834:	3009883a 	mov	r4,r6
    2838:	380b883a 	mov	r5,r7
    283c:	00034b80 	call	34b8 <sqrt>
    2840:	e0bffe15 	stw	r2,-8(fp)
    2844:	e0ffff15 	stw	r3,-4(fp)
    2848:	00000e06 	br	2884 <NormalizationFactor+0x9c>
	}
	else
	{
		normalizationFactor = sqrt(2.0f / NumFilters);
    284c:	e13ffd17 	ldw	r4,-12(fp)
    2850:	000729c0 	call	729c <__floatsisf>
    2854:	1007883a 	mov	r3,r2
    2858:	00900034 	movhi	r2,16384
    285c:	10c5fff2 	custom	255,r2,r2,r3
    2860:	1009883a 	mov	r4,r2
    2864:	0009be40 	call	9be4 <__extendsfdf2>
    2868:	100d883a 	mov	r6,r2
    286c:	180f883a 	mov	r7,r3
    2870:	3009883a 	mov	r4,r6
    2874:	380b883a 	mov	r5,r7
    2878:	00034b80 	call	34b8 <sqrt>
    287c:	e0bffe15 	stw	r2,-8(fp)
    2880:	e0ffff15 	stw	r3,-4(fp)
	}

	return normalizationFactor;
    2884:	e0bffe17 	ldw	r2,-8(fp)
    2888:	e0ffff17 	ldw	r3,-4(fp)
    288c:	1009883a 	mov	r4,r2
    2890:	180b883a 	mov	r5,r3
}
    2894:	2005883a 	mov	r2,r4
    2898:	2807883a 	mov	r3,r5
    289c:	e037883a 	mov	sp,fp
    28a0:	dfc00117 	ldw	ra,4(sp)
    28a4:	df000017 	ldw	fp,0(sp)
    28a8:	dec00204 	addi	sp,sp,8
    28ac:	f800283a 	ret

000028b0 <GetFilterParameter>:
/*
 * Compute the filter parameter for the specified frequency and filter bands (Eq. 2)
 * Used for internal computation only - not the be called directly
 */
double GetFilterParameter(unsigned int samplingRate, unsigned int binSize, unsigned int frequencyBand, unsigned int filterBand)
{
    28b0:	deffee04 	addi	sp,sp,-72
    28b4:	dfc01115 	stw	ra,68(sp)
    28b8:	df001015 	stw	fp,64(sp)
    28bc:	dc400f15 	stw	r17,60(sp)
    28c0:	dc000e15 	stw	r16,56(sp)
    28c4:	df001004 	addi	fp,sp,64
    28c8:	e13ff315 	stw	r4,-52(fp)
    28cc:	e17ff215 	stw	r5,-56(fp)
    28d0:	e1bff115 	stw	r6,-60(fp)
    28d4:	e1fff015 	stw	r7,-64(fp)
	double filterParameter = 0.0f;
    28d8:	e03ffc15 	stw	zero,-16(fp)
    28dc:	e03ffd15 	stw	zero,-12(fp)

	double boundary = (frequencyBand * samplingRate) / binSize;		// k * Fs / N
    28e0:	e17ff317 	ldw	r5,-52(fp)
    28e4:	e13ff117 	ldw	r4,-60(fp)
    28e8:	000714c0 	call	714c <__mulsi3>
    28ec:	e17ff217 	ldw	r5,-56(fp)
    28f0:	1009883a 	mov	r4,r2
    28f4:	000708c0 	call	708c <__udivsi3>
    28f8:	1009883a 	mov	r4,r2
    28fc:	0009b540 	call	9b54 <__floatunsidf>
    2900:	1009883a 	mov	r4,r2
    2904:	180b883a 	mov	r5,r3
    2908:	e13ffa15 	stw	r4,-24(fp)
    290c:	e17ffb15 	stw	r5,-20(fp)
	double prevCenterFrequency = GetCenterFrequency(filterBand - 1);		// fc(l - 1) etc.
    2910:	e0bff017 	ldw	r2,-64(fp)
    2914:	10bfffc4 	addi	r2,r2,-1
    2918:	1009883a 	mov	r4,r2
    291c:	0002cc40 	call	2cc4 <GetCenterFrequency>
    2920:	e0bff815 	stw	r2,-32(fp)
    2924:	e0fff915 	stw	r3,-28(fp)
	double thisCenterFrequency = GetCenterFrequency(filterBand);
    2928:	e13ff017 	ldw	r4,-64(fp)
    292c:	0002cc40 	call	2cc4 <GetCenterFrequency>
    2930:	e0bff615 	stw	r2,-40(fp)
    2934:	e0fff715 	stw	r3,-36(fp)
	double nextCenterFrequency = GetCenterFrequency(filterBand + 1);
    2938:	e0bff017 	ldw	r2,-64(fp)
    293c:	10800044 	addi	r2,r2,1
    2940:	1009883a 	mov	r4,r2
    2944:	0002cc40 	call	2cc4 <GetCenterFrequency>
    2948:	e0bff415 	stw	r2,-48(fp)
    294c:	e0fff515 	stw	r3,-44(fp)

	if(boundary >= 0 && boundary < prevCenterFrequency)
    2950:	000d883a 	mov	r6,zero
    2954:	000f883a 	mov	r7,zero
    2958:	e13ffa17 	ldw	r4,-24(fp)
    295c:	e17ffb17 	ldw	r5,-20(fp)
    2960:	00087400 	call	8740 <__gedf2>
    2964:	10000916 	blt	r2,zero,298c <GetFilterParameter+0xdc>
    2968:	e1bff817 	ldw	r6,-32(fp)
    296c:	e1fff917 	ldw	r7,-28(fp)
    2970:	e13ffa17 	ldw	r4,-24(fp)
    2974:	e17ffb17 	ldw	r5,-20(fp)
    2978:	00088280 	call	8828 <__ledf2>
    297c:	1000030e 	bge	r2,zero,298c <GetFilterParameter+0xdc>
	{
		filterParameter = 0.0f;
    2980:	e03ffc15 	stw	zero,-16(fp)
    2984:	e03ffd15 	stw	zero,-12(fp)
    2988:	00007c06 	br	2b7c <GetFilterParameter+0x2cc>
	}
	else if(boundary >= prevCenterFrequency && boundary < thisCenterFrequency)
    298c:	e1bff817 	ldw	r6,-32(fp)
    2990:	e1fff917 	ldw	r7,-28(fp)
    2994:	e13ffa17 	ldw	r4,-24(fp)
    2998:	e17ffb17 	ldw	r5,-20(fp)
    299c:	00087400 	call	8740 <__gedf2>
    29a0:	10002f16 	blt	r2,zero,2a60 <GetFilterParameter+0x1b0>
    29a4:	e1bff617 	ldw	r6,-40(fp)
    29a8:	e1fff717 	ldw	r7,-36(fp)
    29ac:	e13ffa17 	ldw	r4,-24(fp)
    29b0:	e17ffb17 	ldw	r5,-20(fp)
    29b4:	00088280 	call	8828 <__ledf2>
    29b8:	1000290e 	bge	r2,zero,2a60 <GetFilterParameter+0x1b0>
	{
		filterParameter = (boundary - prevCenterFrequency) / (thisCenterFrequency - prevCenterFrequency);
    29bc:	e1bff817 	ldw	r6,-32(fp)
    29c0:	e1fff917 	ldw	r7,-28(fp)
    29c4:	e13ffa17 	ldw	r4,-24(fp)
    29c8:	e17ffb17 	ldw	r5,-20(fp)
    29cc:	00090bc0 	call	90bc <__subdf3>
    29d0:	1009883a 	mov	r4,r2
    29d4:	180b883a 	mov	r5,r3
    29d8:	2021883a 	mov	r16,r4
    29dc:	2823883a 	mov	r17,r5
    29e0:	e1bff817 	ldw	r6,-32(fp)
    29e4:	e1fff917 	ldw	r7,-28(fp)
    29e8:	e13ff617 	ldw	r4,-40(fp)
    29ec:	e17ff717 	ldw	r5,-36(fp)
    29f0:	00090bc0 	call	90bc <__subdf3>
    29f4:	1009883a 	mov	r4,r2
    29f8:	180b883a 	mov	r5,r3
    29fc:	2005883a 	mov	r2,r4
    2a00:	2807883a 	mov	r3,r5
    2a04:	100d883a 	mov	r6,r2
    2a08:	180f883a 	mov	r7,r3
    2a0c:	8009883a 	mov	r4,r16
    2a10:	880b883a 	mov	r5,r17
    2a14:	0007dac0 	call	7dac <__divdf3>
    2a18:	1009883a 	mov	r4,r2
    2a1c:	180b883a 	mov	r5,r3
    2a20:	e13ffc15 	stw	r4,-16(fp)
    2a24:	e17ffd15 	stw	r5,-12(fp)
		filterParameter *= GetMagnitudeFactor(filterBand);
    2a28:	e13ff017 	ldw	r4,-64(fp)
    2a2c:	0002bb00 	call	2bb0 <GetMagnitudeFactor>
    2a30:	1009883a 	mov	r4,r2
    2a34:	180b883a 	mov	r5,r3
    2a38:	200d883a 	mov	r6,r4
    2a3c:	280f883a 	mov	r7,r5
    2a40:	e13ffc17 	ldw	r4,-16(fp)
    2a44:	e17ffd17 	ldw	r5,-12(fp)
    2a48:	00089100 	call	8910 <__muldf3>
    2a4c:	1009883a 	mov	r4,r2
    2a50:	180b883a 	mov	r5,r3
    2a54:	e13ffc15 	stw	r4,-16(fp)
    2a58:	e17ffd15 	stw	r5,-12(fp)
    2a5c:	00004706 	br	2b7c <GetFilterParameter+0x2cc>
	}
	else if(boundary >= thisCenterFrequency && boundary < nextCenterFrequency)
    2a60:	e1bff617 	ldw	r6,-40(fp)
    2a64:	e1fff717 	ldw	r7,-36(fp)
    2a68:	e13ffa17 	ldw	r4,-24(fp)
    2a6c:	e17ffb17 	ldw	r5,-20(fp)
    2a70:	00087400 	call	8740 <__gedf2>
    2a74:	10002f16 	blt	r2,zero,2b34 <GetFilterParameter+0x284>
    2a78:	e1bff417 	ldw	r6,-48(fp)
    2a7c:	e1fff517 	ldw	r7,-44(fp)
    2a80:	e13ffa17 	ldw	r4,-24(fp)
    2a84:	e17ffb17 	ldw	r5,-20(fp)
    2a88:	00088280 	call	8828 <__ledf2>
    2a8c:	1000290e 	bge	r2,zero,2b34 <GetFilterParameter+0x284>
	{
		filterParameter = (boundary - nextCenterFrequency) / (thisCenterFrequency - nextCenterFrequency);
    2a90:	e1bff417 	ldw	r6,-48(fp)
    2a94:	e1fff517 	ldw	r7,-44(fp)
    2a98:	e13ffa17 	ldw	r4,-24(fp)
    2a9c:	e17ffb17 	ldw	r5,-20(fp)
    2aa0:	00090bc0 	call	90bc <__subdf3>
    2aa4:	1009883a 	mov	r4,r2
    2aa8:	180b883a 	mov	r5,r3
    2aac:	2021883a 	mov	r16,r4
    2ab0:	2823883a 	mov	r17,r5
    2ab4:	e1bff417 	ldw	r6,-48(fp)
    2ab8:	e1fff517 	ldw	r7,-44(fp)
    2abc:	e13ff617 	ldw	r4,-40(fp)
    2ac0:	e17ff717 	ldw	r5,-36(fp)
    2ac4:	00090bc0 	call	90bc <__subdf3>
    2ac8:	1009883a 	mov	r4,r2
    2acc:	180b883a 	mov	r5,r3
    2ad0:	2005883a 	mov	r2,r4
    2ad4:	2807883a 	mov	r3,r5
    2ad8:	100d883a 	mov	r6,r2
    2adc:	180f883a 	mov	r7,r3
    2ae0:	8009883a 	mov	r4,r16
    2ae4:	880b883a 	mov	r5,r17
    2ae8:	0007dac0 	call	7dac <__divdf3>
    2aec:	1009883a 	mov	r4,r2
    2af0:	180b883a 	mov	r5,r3
    2af4:	e13ffc15 	stw	r4,-16(fp)
    2af8:	e17ffd15 	stw	r5,-12(fp)
		filterParameter *= GetMagnitudeFactor(filterBand);
    2afc:	e13ff017 	ldw	r4,-64(fp)
    2b00:	0002bb00 	call	2bb0 <GetMagnitudeFactor>
    2b04:	1009883a 	mov	r4,r2
    2b08:	180b883a 	mov	r5,r3
    2b0c:	200d883a 	mov	r6,r4
    2b10:	280f883a 	mov	r7,r5
    2b14:	e13ffc17 	ldw	r4,-16(fp)
    2b18:	e17ffd17 	ldw	r5,-12(fp)
    2b1c:	00089100 	call	8910 <__muldf3>
    2b20:	1009883a 	mov	r4,r2
    2b24:	180b883a 	mov	r5,r3
    2b28:	e13ffc15 	stw	r4,-16(fp)
    2b2c:	e17ffd15 	stw	r5,-12(fp)
    2b30:	00001206 	br	2b7c <GetFilterParameter+0x2cc>
	}
	else if(boundary >= nextCenterFrequency && boundary < samplingRate)
    2b34:	e1bff417 	ldw	r6,-48(fp)
    2b38:	e1fff517 	ldw	r7,-44(fp)
    2b3c:	e13ffa17 	ldw	r4,-24(fp)
    2b40:	e17ffb17 	ldw	r5,-20(fp)
    2b44:	00087400 	call	8740 <__gedf2>
    2b48:	10000c16 	blt	r2,zero,2b7c <GetFilterParameter+0x2cc>
    2b4c:	e13ff317 	ldw	r4,-52(fp)
    2b50:	0009b540 	call	9b54 <__floatunsidf>
    2b54:	1009883a 	mov	r4,r2
    2b58:	180b883a 	mov	r5,r3
    2b5c:	200d883a 	mov	r6,r4
    2b60:	280f883a 	mov	r7,r5
    2b64:	e13ffa17 	ldw	r4,-24(fp)
    2b68:	e17ffb17 	ldw	r5,-20(fp)
    2b6c:	00088280 	call	8828 <__ledf2>
    2b70:	1000020e 	bge	r2,zero,2b7c <GetFilterParameter+0x2cc>
	{
		filterParameter = 0.0f;
    2b74:	e03ffc15 	stw	zero,-16(fp)
    2b78:	e03ffd15 	stw	zero,-12(fp)
	}

	return filterParameter;
    2b7c:	e0bffc17 	ldw	r2,-16(fp)
    2b80:	e0fffd17 	ldw	r3,-12(fp)
    2b84:	1009883a 	mov	r4,r2
    2b88:	180b883a 	mov	r5,r3
}
    2b8c:	2005883a 	mov	r2,r4
    2b90:	2807883a 	mov	r3,r5
    2b94:	e6fffe04 	addi	sp,fp,-8
    2b98:	dfc00317 	ldw	ra,12(sp)
    2b9c:	df000217 	ldw	fp,8(sp)
    2ba0:	dc400117 	ldw	r17,4(sp)
    2ba4:	dc000017 	ldw	r16,0(sp)
    2ba8:	dec00404 	addi	sp,sp,16
    2bac:	f800283a 	ret

00002bb0 <GetMagnitudeFactor>:
/*
 * Compute the band-dependent magnitude factor for the given filter band (Eq. 3)
 * Used for internal computation only - not the be called directly
 */
double GetMagnitudeFactor(unsigned int filterBand)
{
    2bb0:	defff904 	addi	sp,sp,-28
    2bb4:	dfc00615 	stw	ra,24(sp)
    2bb8:	df000515 	stw	fp,20(sp)
    2bbc:	dc400415 	stw	r17,16(sp)
    2bc0:	dc000315 	stw	r16,12(sp)
    2bc4:	df000504 	addi	fp,sp,20
    2bc8:	e13ffb15 	stw	r4,-20(fp)
	double magnitudeFactor = 0.0f;
    2bcc:	e03ffc15 	stw	zero,-16(fp)
    2bd0:	e03ffd15 	stw	zero,-12(fp)

	if(filterBand >= 1 && filterBand <= 14)
    2bd4:	e0bffb17 	ldw	r2,-20(fp)
    2bd8:	10000926 	beq	r2,zero,2c00 <GetMagnitudeFactor+0x50>
    2bdc:	e0bffb17 	ldw	r2,-20(fp)
    2be0:	108003e8 	cmpgeui	r2,r2,15
    2be4:	1000061e 	bne	r2,zero,2c00 <GetMagnitudeFactor+0x50>
	{
		magnitudeFactor = 0.015;
    2be8:	00b80034 	movhi	r2,57344
    2bec:	e0bffc15 	stw	r2,-16(fp)
    2bf0:	008fe3f4 	movhi	r2,16271
    2bf4:	10ae1444 	addi	r2,r2,-18351
    2bf8:	e0bffd15 	stw	r2,-12(fp)
    2bfc:	00002406 	br	2c90 <GetMagnitudeFactor+0xe0>
	}
	else if(filterBand >= 15 && filterBand <= 48)
    2c00:	e0bffb17 	ldw	r2,-20(fp)
    2c04:	108003f0 	cmpltui	r2,r2,15
    2c08:	1000211e 	bne	r2,zero,2c90 <GetMagnitudeFactor+0xe0>
    2c0c:	e0bffb17 	ldw	r2,-20(fp)
    2c10:	10800c68 	cmpgeui	r2,r2,49
    2c14:	10001e1e 	bne	r2,zero,2c90 <GetMagnitudeFactor+0xe0>
	{
		magnitudeFactor = 2.0f / (GetCenterFrequency(filterBand + 1) - GetCenterFrequency(filterBand -1));
    2c18:	e0bffb17 	ldw	r2,-20(fp)
    2c1c:	10800044 	addi	r2,r2,1
    2c20:	1009883a 	mov	r4,r2
    2c24:	0002cc40 	call	2cc4 <GetCenterFrequency>
    2c28:	1021883a 	mov	r16,r2
    2c2c:	1823883a 	mov	r17,r3
    2c30:	e0bffb17 	ldw	r2,-20(fp)
    2c34:	10bfffc4 	addi	r2,r2,-1
    2c38:	1009883a 	mov	r4,r2
    2c3c:	0002cc40 	call	2cc4 <GetCenterFrequency>
    2c40:	1009883a 	mov	r4,r2
    2c44:	180b883a 	mov	r5,r3
    2c48:	200d883a 	mov	r6,r4
    2c4c:	280f883a 	mov	r7,r5
    2c50:	8009883a 	mov	r4,r16
    2c54:	880b883a 	mov	r5,r17
    2c58:	00090bc0 	call	90bc <__subdf3>
    2c5c:	1009883a 	mov	r4,r2
    2c60:	180b883a 	mov	r5,r3
    2c64:	2005883a 	mov	r2,r4
    2c68:	2807883a 	mov	r3,r5
    2c6c:	100d883a 	mov	r6,r2
    2c70:	180f883a 	mov	r7,r3
    2c74:	0009883a 	mov	r4,zero
    2c78:	01500034 	movhi	r5,16384
    2c7c:	0007dac0 	call	7dac <__divdf3>
    2c80:	1009883a 	mov	r4,r2
    2c84:	180b883a 	mov	r5,r3
    2c88:	e13ffc15 	stw	r4,-16(fp)
    2c8c:	e17ffd15 	stw	r5,-12(fp)
	}

	return magnitudeFactor;
    2c90:	e0bffc17 	ldw	r2,-16(fp)
    2c94:	e0fffd17 	ldw	r3,-12(fp)
    2c98:	1009883a 	mov	r4,r2
    2c9c:	180b883a 	mov	r5,r3
}
    2ca0:	2005883a 	mov	r2,r4
    2ca4:	2807883a 	mov	r3,r5
    2ca8:	e6fffe04 	addi	sp,fp,-8
    2cac:	dfc00317 	ldw	ra,12(sp)
    2cb0:	df000217 	ldw	fp,8(sp)
    2cb4:	dc400117 	ldw	r17,4(sp)
    2cb8:	dc000017 	ldw	r16,0(sp)
    2cbc:	dec00404 	addi	sp,sp,16
    2cc0:	f800283a 	ret

00002cc4 <GetCenterFrequency>:
 * This where the mel-frequency scaling occurs. Filters are specified so that their
 * center frequencies are equally spaced on the mel scale
 * Used for internal computation only - not the be called directly
 */
double GetCenterFrequency(unsigned int filterBand)
{
    2cc4:	defff904 	addi	sp,sp,-28
    2cc8:	dfc00615 	stw	ra,24(sp)
    2ccc:	df000515 	stw	fp,20(sp)
    2cd0:	df000504 	addi	fp,sp,20
    2cd4:	e13ffb15 	stw	r4,-20(fp)
	double centerFrequency = 0.0f;
    2cd8:	e03ffe15 	stw	zero,-8(fp)
    2cdc:	e03fff15 	stw	zero,-4(fp)
	double exponent;

	if(filterBand == 0)
    2ce0:	e0bffb17 	ldw	r2,-20(fp)
    2ce4:	1000031e 	bne	r2,zero,2cf4 <GetCenterFrequency+0x30>
	{
		centerFrequency = 0;
    2ce8:	e03ffe15 	stw	zero,-8(fp)
    2cec:	e03fff15 	stw	zero,-4(fp)
    2cf0:	00003006 	br	2db4 <GetCenterFrequency+0xf0>
	}
	else if(filterBand >= 1 && filterBand <= 14)
    2cf4:	e0bffb17 	ldw	r2,-20(fp)
    2cf8:	10001126 	beq	r2,zero,2d40 <GetCenterFrequency+0x7c>
    2cfc:	e0bffb17 	ldw	r2,-20(fp)
    2d00:	108003e8 	cmpgeui	r2,r2,15
    2d04:	10000e1e 	bne	r2,zero,2d40 <GetCenterFrequency+0x7c>
	{
		centerFrequency = (200.0f * filterBand) / 3.0f;
    2d08:	e13ffb17 	ldw	r4,-20(fp)
    2d0c:	00073c00 	call	73c0 <__floatunsisf>
    2d10:	1007883a 	mov	r3,r2
    2d14:	0090d234 	movhi	r2,17224
    2d18:	1887ff32 	custom	252,r3,r3,r2
    2d1c:	00901034 	movhi	r2,16448
    2d20:	1885fff2 	custom	255,r2,r3,r2
    2d24:	1009883a 	mov	r4,r2
    2d28:	0009be40 	call	9be4 <__extendsfdf2>
    2d2c:	1009883a 	mov	r4,r2
    2d30:	180b883a 	mov	r5,r3
    2d34:	e13ffe15 	stw	r4,-8(fp)
    2d38:	e17fff15 	stw	r5,-4(fp)
    2d3c:	00001d06 	br	2db4 <GetCenterFrequency+0xf0>
	}
	else
	{
		exponent = filterBand - 14.0f;
    2d40:	e13ffb17 	ldw	r4,-20(fp)
    2d44:	00073c00 	call	73c0 <__floatunsisf>
    2d48:	1007883a 	mov	r3,r2
    2d4c:	00905834 	movhi	r2,16736
    2d50:	1885ffb2 	custom	254,r2,r3,r2
    2d54:	1009883a 	mov	r4,r2
    2d58:	0009be40 	call	9be4 <__extendsfdf2>
    2d5c:	1009883a 	mov	r4,r2
    2d60:	180b883a 	mov	r5,r3
    2d64:	e13ffc15 	stw	r4,-16(fp)
    2d68:	e17ffd15 	stw	r5,-12(fp)
		centerFrequency = pow(1.0711703, exponent);
    2d6c:	e1bffc17 	ldw	r6,-16(fp)
    2d70:	e1fffd17 	ldw	r7,-12(fp)
    2d74:	01200034 	movhi	r4,32768
    2d78:	014ffc74 	movhi	r5,16369
    2d7c:	2948e0c4 	addi	r5,r5,9091
    2d80:	00031fc0 	call	31fc <pow>
    2d84:	e0bffe15 	stw	r2,-8(fp)
    2d88:	e0ffff15 	stw	r3,-4(fp)
		centerFrequency *= 1073.4;
    2d8c:	01a80034 	movhi	r6,40960
    2d90:	01d02474 	movhi	r7,16529
    2d94:	39f16644 	addi	r7,r7,-14951
    2d98:	e13ffe17 	ldw	r4,-8(fp)
    2d9c:	e17fff17 	ldw	r5,-4(fp)
    2da0:	00089100 	call	8910 <__muldf3>
    2da4:	1009883a 	mov	r4,r2
    2da8:	180b883a 	mov	r5,r3
    2dac:	e13ffe15 	stw	r4,-8(fp)
    2db0:	e17fff15 	stw	r5,-4(fp)
	}

	return centerFrequency;
    2db4:	e0bffe17 	ldw	r2,-8(fp)
    2db8:	e0ffff17 	ldw	r3,-4(fp)
    2dbc:	1009883a 	mov	r4,r2
    2dc0:	180b883a 	mov	r5,r3
}
    2dc4:	2005883a 	mov	r2,r4
    2dc8:	2807883a 	mov	r3,r5
    2dcc:	e037883a 	mov	sp,fp
    2dd0:	dfc00117 	ldw	ra,4(sp)
    2dd4:	df000017 	ldw	fp,0(sp)
    2dd8:	dec00204 	addi	sp,sp,8
    2ddc:	f800283a 	ret

00002de0 <cos>:
    2de0:	00a00034 	movhi	r2,32768
    2de4:	10bfffc4 	addi	r2,r2,-1
    2de8:	00cffa74 	movhi	r3,16361
    2dec:	2884703a 	and	r2,r5,r2
    2df0:	18c87ec4 	addi	r3,r3,8699
    2df4:	18801a0e 	bge	r3,r2,2e60 <cos+0x80>
    2df8:	defffa04 	addi	sp,sp,-24
    2dfc:	dfc00515 	stw	ra,20(sp)
    2e00:	00dffc34 	movhi	r3,32752
    2e04:	10c00616 	blt	r2,r3,2e20 <cos+0x40>
    2e08:	280f883a 	mov	r7,r5
    2e0c:	200d883a 	mov	r6,r4
    2e10:	00090bc0 	call	90bc <__subdf3>
    2e14:	dfc00517 	ldw	ra,20(sp)
    2e18:	dec00604 	addi	sp,sp,24
    2e1c:	f800283a 	ret
    2e20:	d9800104 	addi	r6,sp,4
    2e24:	0004cf80 	call	4cf8 <__ieee754_rem_pio2>
    2e28:	108000cc 	andi	r2,r2,3
    2e2c:	10c00060 	cmpeqi	r3,r2,1
    2e30:	d9800317 	ldw	r6,12(sp)
    2e34:	d9c00417 	ldw	r7,16(sp)
    2e38:	d9000117 	ldw	r4,4(sp)
    2e3c:	d9400217 	ldw	r5,8(sp)
    2e40:	18000a1e 	bne	r3,zero,2e6c <cos+0x8c>
    2e44:	10c000a0 	cmpeqi	r3,r2,2
    2e48:	18000e1e 	bne	r3,zero,2e84 <cos+0xa4>
    2e4c:	10000b26 	beq	r2,zero,2e7c <cos+0x9c>
    2e50:	00800044 	movi	r2,1
    2e54:	d8800015 	stw	r2,0(sp)
    2e58:	00068700 	call	6870 <__kernel_sin>
    2e5c:	003fed06 	br	2e14 <cos+0x34>
    2e60:	000d883a 	mov	r6,zero
    2e64:	000f883a 	mov	r7,zero
    2e68:	00056b01 	jmpi	56b0 <__kernel_cos>
    2e6c:	d8800015 	stw	r2,0(sp)
    2e70:	00068700 	call	6870 <__kernel_sin>
    2e74:	18e0003c 	xorhi	r3,r3,32768
    2e78:	003fe606 	br	2e14 <cos+0x34>
    2e7c:	00056b00 	call	56b0 <__kernel_cos>
    2e80:	003fe406 	br	2e14 <cos+0x34>
    2e84:	00056b00 	call	56b0 <__kernel_cos>
    2e88:	18e0003c 	xorhi	r3,r3,32768
    2e8c:	003fe106 	br	2e14 <cos+0x34>

00002e90 <floor>:
    2e90:	280fd53a 	srai	r7,r5,20
    2e94:	defffb04 	addi	sp,sp,-20
    2e98:	dc800215 	stw	r18,8(sp)
    2e9c:	39c1ffcc 	andi	r7,r7,2047
    2ea0:	3cbf0044 	addi	r18,r7,-1023
    2ea4:	dc400115 	stw	r17,4(sp)
    2ea8:	dc000015 	stw	r16,0(sp)
    2eac:	dfc00415 	stw	ra,16(sp)
    2eb0:	dcc00315 	stw	r19,12(sp)
    2eb4:	90800508 	cmpgei	r2,r18,20
    2eb8:	2821883a 	mov	r16,r5
    2ebc:	200d883a 	mov	r6,r4
    2ec0:	2023883a 	mov	r17,r4
    2ec4:	10002b1e 	bne	r2,zero,2f74 <floor+0xe4>
    2ec8:	90001b16 	blt	r18,zero,2f38 <floor+0xa8>
    2ecc:	00800434 	movhi	r2,16
    2ed0:	10bfffc4 	addi	r2,r2,-1
    2ed4:	14a7d83a 	sra	r19,r2,r18
    2ed8:	2cc4703a 	and	r2,r5,r19
    2edc:	1104b03a 	or	r2,r2,r4
    2ee0:	10002826 	beq	r2,zero,2f84 <floor+0xf4>
    2ee4:	01a20034 	movhi	r6,34816
    2ee8:	01df8e34 	movhi	r7,32312
    2eec:	319d6704 	addi	r6,r6,30108
    2ef0:	39f90f04 	addi	r7,r7,-7108
    2ef4:	00074bc0 	call	74bc <__adddf3>
    2ef8:	000d883a 	mov	r6,zero
    2efc:	000f883a 	mov	r7,zero
    2f00:	1009883a 	mov	r4,r2
    2f04:	180b883a 	mov	r5,r3
    2f08:	00087400 	call	8740 <__gedf2>
    2f0c:	0080070e 	bge	zero,r2,2f2c <floor+0x9c>
    2f10:	8000030e 	bge	r16,zero,2f20 <floor+0x90>
    2f14:	00800434 	movhi	r2,16
    2f18:	14a5d83a 	sra	r18,r2,r18
    2f1c:	9421883a 	add	r16,r18,r16
    2f20:	04c4303a 	nor	r2,zero,r19
    2f24:	80a0703a 	and	r16,r16,r2
    2f28:	0023883a 	mov	r17,zero
    2f2c:	8805883a 	mov	r2,r17
    2f30:	8007883a 	mov	r3,r16
    2f34:	00001506 	br	2f8c <floor+0xfc>
    2f38:	01a20034 	movhi	r6,34816
    2f3c:	01df8e34 	movhi	r7,32312
    2f40:	319d6704 	addi	r6,r6,30108
    2f44:	39f90f04 	addi	r7,r7,-7108
    2f48:	00074bc0 	call	74bc <__adddf3>
    2f4c:	000d883a 	mov	r6,zero
    2f50:	000f883a 	mov	r7,zero
    2f54:	1009883a 	mov	r4,r2
    2f58:	180b883a 	mov	r5,r3
    2f5c:	00087400 	call	8740 <__gedf2>
    2f60:	00bff20e 	bge	zero,r2,2f2c <floor+0x9c>
    2f64:	80002a16 	blt	r16,zero,3010 <floor+0x180>
    2f68:	0023883a 	mov	r17,zero
    2f6c:	0021883a 	mov	r16,zero
    2f70:	003fee06 	br	2f2c <floor+0x9c>
    2f74:	90800d10 	cmplti	r2,r18,52
    2f78:	10000b1e 	bne	r2,zero,2fa8 <floor+0x118>
    2f7c:	94810018 	cmpnei	r18,r18,1024
    2f80:	90001d26 	beq	r18,zero,2ff8 <floor+0x168>
    2f84:	3005883a 	mov	r2,r6
    2f88:	8007883a 	mov	r3,r16
    2f8c:	dfc00417 	ldw	ra,16(sp)
    2f90:	dcc00317 	ldw	r19,12(sp)
    2f94:	dc800217 	ldw	r18,8(sp)
    2f98:	dc400117 	ldw	r17,4(sp)
    2f9c:	dc000017 	ldw	r16,0(sp)
    2fa0:	dec00504 	addi	sp,sp,20
    2fa4:	f800283a 	ret
    2fa8:	39fefb44 	addi	r7,r7,-1043
    2fac:	04ffffc4 	movi	r19,-1
    2fb0:	99e6d83a 	srl	r19,r19,r7
    2fb4:	9904703a 	and	r2,r19,r4
    2fb8:	10001226 	beq	r2,zero,3004 <floor+0x174>
    2fbc:	01a20034 	movhi	r6,34816
    2fc0:	01df8e34 	movhi	r7,32312
    2fc4:	319d6704 	addi	r6,r6,30108
    2fc8:	39f90f04 	addi	r7,r7,-7108
    2fcc:	00074bc0 	call	74bc <__adddf3>
    2fd0:	000d883a 	mov	r6,zero
    2fd4:	000f883a 	mov	r7,zero
    2fd8:	1009883a 	mov	r4,r2
    2fdc:	180b883a 	mov	r5,r3
    2fe0:	00087400 	call	8740 <__gedf2>
    2fe4:	00bfd10e 	bge	zero,r2,2f2c <floor+0x9c>
    2fe8:	80001116 	blt	r16,zero,3030 <floor+0x1a0>
    2fec:	04ce303a 	nor	r7,zero,r19
    2ff0:	89e2703a 	and	r17,r17,r7
    2ff4:	003fcd06 	br	2f2c <floor+0x9c>
    2ff8:	280f883a 	mov	r7,r5
    2ffc:	00074bc0 	call	74bc <__adddf3>
    3000:	003fe206 	br	2f8c <floor+0xfc>
    3004:	2807883a 	mov	r3,r5
    3008:	2005883a 	mov	r2,r4
    300c:	003fdf06 	br	2f8c <floor+0xfc>
    3010:	00a00034 	movhi	r2,32768
    3014:	10bfffc4 	addi	r2,r2,-1
    3018:	8084703a 	and	r2,r16,r2
    301c:	1462b03a 	or	r17,r2,r17
    3020:	88000e26 	beq	r17,zero,305c <floor+0x1cc>
    3024:	0023883a 	mov	r17,zero
    3028:	042ffc34 	movhi	r16,49136
    302c:	003fbf06 	br	2f2c <floor+0x9c>
    3030:	90800518 	cmpnei	r2,r18,20
    3034:	10000b26 	beq	r2,zero,3064 <floor+0x1d4>
    3038:	00800d04 	movi	r2,52
    303c:	14a5c83a 	sub	r18,r2,r18
    3040:	00800044 	movi	r2,1
    3044:	1484983a 	sll	r2,r2,r18
    3048:	1445883a 	add	r2,r2,r17
    304c:	1440072e 	bgeu	r2,r17,306c <floor+0x1dc>
    3050:	84000044 	addi	r16,r16,1
    3054:	1023883a 	mov	r17,r2
    3058:	003fe406 	br	2fec <floor+0x15c>
    305c:	0023883a 	mov	r17,zero
    3060:	003fb206 	br	2f2c <floor+0x9c>
    3064:	84000044 	addi	r16,r16,1
    3068:	003fe006 	br	2fec <floor+0x15c>
    306c:	1023883a 	mov	r17,r2
    3070:	003fde06 	br	2fec <floor+0x15c>

00003074 <sin>:
    3074:	00a00034 	movhi	r2,32768
    3078:	defffa04 	addi	sp,sp,-24
    307c:	10bfffc4 	addi	r2,r2,-1
    3080:	00cffa74 	movhi	r3,16361
    3084:	dfc00515 	stw	ra,20(sp)
    3088:	2884703a 	and	r2,r5,r2
    308c:	18c87ec4 	addi	r3,r3,8699
    3090:	1880170e 	bge	r3,r2,30f0 <sin+0x7c>
    3094:	00dffc34 	movhi	r3,32752
    3098:	10c00616 	blt	r2,r3,30b4 <sin+0x40>
    309c:	280f883a 	mov	r7,r5
    30a0:	200d883a 	mov	r6,r4
    30a4:	00090bc0 	call	90bc <__subdf3>
    30a8:	dfc00517 	ldw	ra,20(sp)
    30ac:	dec00604 	addi	sp,sp,24
    30b0:	f800283a 	ret
    30b4:	d9800104 	addi	r6,sp,4
    30b8:	0004cf80 	call	4cf8 <__ieee754_rem_pio2>
    30bc:	108000cc 	andi	r2,r2,3
    30c0:	10c00060 	cmpeqi	r3,r2,1
    30c4:	d9800317 	ldw	r6,12(sp)
    30c8:	d9c00417 	ldw	r7,16(sp)
    30cc:	d9000117 	ldw	r4,4(sp)
    30d0:	d9400217 	ldw	r5,8(sp)
    30d4:	18000d1e 	bne	r3,zero,310c <sin+0x98>
    30d8:	10c000a0 	cmpeqi	r3,r2,2
    30dc:	1800111e 	bne	r3,zero,3124 <sin+0xb0>
    30e0:	10000c26 	beq	r2,zero,3114 <sin+0xa0>
    30e4:	00056b00 	call	56b0 <__kernel_cos>
    30e8:	18e0003c 	xorhi	r3,r3,32768
    30ec:	003fee06 	br	30a8 <sin+0x34>
    30f0:	d8000015 	stw	zero,0(sp)
    30f4:	000d883a 	mov	r6,zero
    30f8:	000f883a 	mov	r7,zero
    30fc:	00068700 	call	6870 <__kernel_sin>
    3100:	dfc00517 	ldw	ra,20(sp)
    3104:	dec00604 	addi	sp,sp,24
    3108:	f800283a 	ret
    310c:	00056b00 	call	56b0 <__kernel_cos>
    3110:	003fe506 	br	30a8 <sin+0x34>
    3114:	00800044 	movi	r2,1
    3118:	d8800015 	stw	r2,0(sp)
    311c:	00068700 	call	6870 <__kernel_sin>
    3120:	003fe106 	br	30a8 <sin+0x34>
    3124:	00800044 	movi	r2,1
    3128:	d8800015 	stw	r2,0(sp)
    312c:	00068700 	call	6870 <__kernel_sin>
    3130:	18e0003c 	xorhi	r3,r3,32768
    3134:	003fdc06 	br	30a8 <sin+0x34>

00003138 <log>:
    3138:	defffb04 	addi	sp,sp,-20
    313c:	dcc00315 	stw	r19,12(sp)
    3140:	dc800215 	stw	r18,8(sp)
    3144:	dc400115 	stw	r17,4(sp)
    3148:	dc000015 	stw	r16,0(sp)
    314c:	2023883a 	mov	r17,r4
    3150:	2821883a 	mov	r16,r5
    3154:	dfc00415 	stw	ra,16(sp)
    3158:	00035640 	call	3564 <__ieee754_log>
    315c:	880d883a 	mov	r6,r17
    3160:	800f883a 	mov	r7,r16
    3164:	8809883a 	mov	r4,r17
    3168:	800b883a 	mov	r5,r16
    316c:	1027883a 	mov	r19,r2
    3170:	1825883a 	mov	r18,r3
    3174:	00099c80 	call	99c8 <__unorddf2>
    3178:	1000111e 	bne	r2,zero,31c0 <log+0x88>
    317c:	000d883a 	mov	r6,zero
    3180:	000f883a 	mov	r7,zero
    3184:	8809883a 	mov	r4,r17
    3188:	800b883a 	mov	r5,r16
    318c:	00087400 	call	8740 <__gedf2>
    3190:	00800b16 	blt	zero,r2,31c0 <log+0x88>
    3194:	000d883a 	mov	r6,zero
    3198:	000f883a 	mov	r7,zero
    319c:	8809883a 	mov	r4,r17
    31a0:	800b883a 	mov	r5,r16
    31a4:	00086c00 	call	86c0 <__eqdf2>
    31a8:	10000e1e 	bne	r2,zero,31e4 <log+0xac>
    31ac:	0009ea40 	call	9ea4 <__errno>
    31b0:	00c00884 	movi	r3,34
    31b4:	10c00015 	stw	r3,0(r2)
    31b8:	0027883a 	mov	r19,zero
    31bc:	04bffc34 	movhi	r18,65520
    31c0:	9805883a 	mov	r2,r19
    31c4:	9007883a 	mov	r3,r18
    31c8:	dfc00417 	ldw	ra,16(sp)
    31cc:	dcc00317 	ldw	r19,12(sp)
    31d0:	dc800217 	ldw	r18,8(sp)
    31d4:	dc400117 	ldw	r17,4(sp)
    31d8:	dc000017 	ldw	r16,0(sp)
    31dc:	dec00504 	addi	sp,sp,20
    31e0:	f800283a 	ret
    31e4:	0009ea40 	call	9ea4 <__errno>
    31e8:	00c00844 	movi	r3,33
    31ec:	10c00015 	stw	r3,0(r2)
    31f0:	0027883a 	mov	r19,zero
    31f4:	049ffe34 	movhi	r18,32760
    31f8:	003ff106 	br	31c0 <log+0x88>

000031fc <pow>:
    31fc:	defff704 	addi	sp,sp,-36
    3200:	dd800615 	stw	r22,24(sp)
    3204:	dd000415 	stw	r20,16(sp)
    3208:	dcc00315 	stw	r19,12(sp)
    320c:	dc800215 	stw	r18,8(sp)
    3210:	dc400115 	stw	r17,4(sp)
    3214:	dc000015 	stw	r16,0(sp)
    3218:	3823883a 	mov	r17,r7
    321c:	3021883a 	mov	r16,r6
    3220:	dfc00815 	stw	ra,32(sp)
    3224:	ddc00715 	stw	r23,28(sp)
    3228:	dd400515 	stw	r21,20(sp)
    322c:	202d883a 	mov	r22,r4
    3230:	2825883a 	mov	r18,r5
    3234:	0003bf00 	call	3bf0 <__ieee754_pow>
    3238:	800d883a 	mov	r6,r16
    323c:	880f883a 	mov	r7,r17
    3240:	8009883a 	mov	r4,r16
    3244:	880b883a 	mov	r5,r17
    3248:	1027883a 	mov	r19,r2
    324c:	1829883a 	mov	r20,r3
    3250:	00099c80 	call	99c8 <__unorddf2>
    3254:	10005d1e 	bne	r2,zero,33cc <pow+0x1d0>
    3258:	000d883a 	mov	r6,zero
    325c:	000f883a 	mov	r7,zero
    3260:	b009883a 	mov	r4,r22
    3264:	900b883a 	mov	r5,r18
    3268:	00086c00 	call	86c0 <__eqdf2>
    326c:	10006426 	beq	r2,zero,3400 <pow+0x204>
    3270:	01600034 	movhi	r5,32768
    3274:	297fffc4 	addi	r5,r5,-1
    3278:	a16a703a 	and	r21,r20,r5
    327c:	01dffc34 	movhi	r7,32752
    3280:	01bfffc4 	movi	r6,-1
    3284:	39ffffc4 	addi	r7,r7,-1
    3288:	9809883a 	mov	r4,r19
    328c:	a80b883a 	mov	r5,r21
    3290:	00099c80 	call	99c8 <__unorddf2>
    3294:	1000071e 	bne	r2,zero,32b4 <pow+0xb8>
    3298:	01dffc34 	movhi	r7,32752
    329c:	01bfffc4 	movi	r6,-1
    32a0:	39ffffc4 	addi	r7,r7,-1
    32a4:	9809883a 	mov	r4,r19
    32a8:	a80b883a 	mov	r5,r21
    32ac:	00087400 	call	8740 <__gedf2>
    32b0:	0080200e 	bge	zero,r2,3334 <pow+0x138>
    32b4:	05600034 	movhi	r21,32768
    32b8:	ad7fffc4 	addi	r21,r21,-1
    32bc:	956e703a 	and	r23,r18,r21
    32c0:	01dffc34 	movhi	r7,32752
    32c4:	01bfffc4 	movi	r6,-1
    32c8:	39ffffc4 	addi	r7,r7,-1
    32cc:	b009883a 	mov	r4,r22
    32d0:	b80b883a 	mov	r5,r23
    32d4:	00099c80 	call	99c8 <__unorddf2>
    32d8:	10003c1e 	bne	r2,zero,33cc <pow+0x1d0>
    32dc:	01dffc34 	movhi	r7,32752
    32e0:	01bfffc4 	movi	r6,-1
    32e4:	39ffffc4 	addi	r7,r7,-1
    32e8:	b009883a 	mov	r4,r22
    32ec:	b80b883a 	mov	r5,r23
    32f0:	00087400 	call	8740 <__gedf2>
    32f4:	00803516 	blt	zero,r2,33cc <pow+0x1d0>
    32f8:	8d6a703a 	and	r21,r17,r21
    32fc:	01dffc34 	movhi	r7,32752
    3300:	01bfffc4 	movi	r6,-1
    3304:	39ffffc4 	addi	r7,r7,-1
    3308:	8009883a 	mov	r4,r16
    330c:	a80b883a 	mov	r5,r21
    3310:	00099c80 	call	99c8 <__unorddf2>
    3314:	1000071e 	bne	r2,zero,3334 <pow+0x138>
    3318:	01dffc34 	movhi	r7,32752
    331c:	01bfffc4 	movi	r6,-1
    3320:	39ffffc4 	addi	r7,r7,-1
    3324:	8009883a 	mov	r4,r16
    3328:	a80b883a 	mov	r5,r21
    332c:	00087400 	call	8740 <__gedf2>
    3330:	0080570e 	bge	zero,r2,3490 <pow+0x294>
    3334:	000d883a 	mov	r6,zero
    3338:	000f883a 	mov	r7,zero
    333c:	9809883a 	mov	r4,r19
    3340:	a00b883a 	mov	r5,r20
    3344:	00086c00 	call	86c0 <__eqdf2>
    3348:	1000201e 	bne	r2,zero,33cc <pow+0x1d0>
    334c:	05600034 	movhi	r21,32768
    3350:	ad7fffc4 	addi	r21,r21,-1
    3354:	9564703a 	and	r18,r18,r21
    3358:	01dffc34 	movhi	r7,32752
    335c:	01bfffc4 	movi	r6,-1
    3360:	39ffffc4 	addi	r7,r7,-1
    3364:	b009883a 	mov	r4,r22
    3368:	900b883a 	mov	r5,r18
    336c:	00099c80 	call	99c8 <__unorddf2>
    3370:	1000161e 	bne	r2,zero,33cc <pow+0x1d0>
    3374:	01dffc34 	movhi	r7,32752
    3378:	01bfffc4 	movi	r6,-1
    337c:	39ffffc4 	addi	r7,r7,-1
    3380:	b009883a 	mov	r4,r22
    3384:	900b883a 	mov	r5,r18
    3388:	00087400 	call	8740 <__gedf2>
    338c:	00800f16 	blt	zero,r2,33cc <pow+0x1d0>
    3390:	8d62703a 	and	r17,r17,r21
    3394:	01dffc34 	movhi	r7,32752
    3398:	01bfffc4 	movi	r6,-1
    339c:	39ffffc4 	addi	r7,r7,-1
    33a0:	8009883a 	mov	r4,r16
    33a4:	880b883a 	mov	r5,r17
    33a8:	00099c80 	call	99c8 <__unorddf2>
    33ac:	1000071e 	bne	r2,zero,33cc <pow+0x1d0>
    33b0:	01dffc34 	movhi	r7,32752
    33b4:	01bfffc4 	movi	r6,-1
    33b8:	39ffffc4 	addi	r7,r7,-1
    33bc:	8009883a 	mov	r4,r16
    33c0:	880b883a 	mov	r5,r17
    33c4:	00087400 	call	8740 <__gedf2>
    33c8:	00802a0e 	bge	zero,r2,3474 <pow+0x278>
    33cc:	9805883a 	mov	r2,r19
    33d0:	a007883a 	mov	r3,r20
    33d4:	dfc00817 	ldw	ra,32(sp)
    33d8:	ddc00717 	ldw	r23,28(sp)
    33dc:	dd800617 	ldw	r22,24(sp)
    33e0:	dd400517 	ldw	r21,20(sp)
    33e4:	dd000417 	ldw	r20,16(sp)
    33e8:	dcc00317 	ldw	r19,12(sp)
    33ec:	dc800217 	ldw	r18,8(sp)
    33f0:	dc400117 	ldw	r17,4(sp)
    33f4:	dc000017 	ldw	r16,0(sp)
    33f8:	dec00904 	addi	sp,sp,36
    33fc:	f800283a 	ret
    3400:	000d883a 	mov	r6,zero
    3404:	000f883a 	mov	r7,zero
    3408:	8009883a 	mov	r4,r16
    340c:	880b883a 	mov	r5,r17
    3410:	00086c00 	call	86c0 <__eqdf2>
    3414:	10001b26 	beq	r2,zero,3484 <pow+0x288>
    3418:	01600034 	movhi	r5,32768
    341c:	297fffc4 	addi	r5,r5,-1
    3420:	8964703a 	and	r18,r17,r5
    3424:	01dffc34 	movhi	r7,32752
    3428:	01bfffc4 	movi	r6,-1
    342c:	39ffffc4 	addi	r7,r7,-1
    3430:	8009883a 	mov	r4,r16
    3434:	900b883a 	mov	r5,r18
    3438:	00099c80 	call	99c8 <__unorddf2>
    343c:	103fe31e 	bne	r2,zero,33cc <pow+0x1d0>
    3440:	01dffc34 	movhi	r7,32752
    3444:	01bfffc4 	movi	r6,-1
    3448:	39ffffc4 	addi	r7,r7,-1
    344c:	8009883a 	mov	r4,r16
    3450:	900b883a 	mov	r5,r18
    3454:	00087400 	call	8740 <__gedf2>
    3458:	00bfdc16 	blt	zero,r2,33cc <pow+0x1d0>
    345c:	000d883a 	mov	r6,zero
    3460:	000f883a 	mov	r7,zero
    3464:	8009883a 	mov	r4,r16
    3468:	880b883a 	mov	r5,r17
    346c:	00088280 	call	8828 <__ledf2>
    3470:	103fd60e 	bge	r2,zero,33cc <pow+0x1d0>
    3474:	0009ea40 	call	9ea4 <__errno>
    3478:	00c00884 	movi	r3,34
    347c:	10c00015 	stw	r3,0(r2)
    3480:	003fd206 	br	33cc <pow+0x1d0>
    3484:	0027883a 	mov	r19,zero
    3488:	050ffc34 	movhi	r20,16368
    348c:	003fcf06 	br	33cc <pow+0x1d0>
    3490:	980d883a 	mov	r6,r19
    3494:	a00f883a 	mov	r7,r20
    3498:	9809883a 	mov	r4,r19
    349c:	a00b883a 	mov	r5,r20
    34a0:	00099c80 	call	99c8 <__unorddf2>
    34a4:	103ff326 	beq	r2,zero,3474 <pow+0x278>
    34a8:	0009ea40 	call	9ea4 <__errno>
    34ac:	00c00844 	movi	r3,33
    34b0:	10c00015 	stw	r3,0(r2)
    34b4:	003fc506 	br	33cc <pow+0x1d0>

000034b8 <sqrt>:
    34b8:	defffb04 	addi	sp,sp,-20
    34bc:	dcc00315 	stw	r19,12(sp)
    34c0:	dc800215 	stw	r18,8(sp)
    34c4:	dc400115 	stw	r17,4(sp)
    34c8:	dc000015 	stw	r16,0(sp)
    34cc:	2023883a 	mov	r17,r4
    34d0:	2821883a 	mov	r16,r5
    34d4:	dfc00415 	stw	ra,16(sp)
    34d8:	00054440 	call	5444 <__ieee754_sqrt>
    34dc:	880d883a 	mov	r6,r17
    34e0:	800f883a 	mov	r7,r16
    34e4:	8809883a 	mov	r4,r17
    34e8:	800b883a 	mov	r5,r16
    34ec:	1027883a 	mov	r19,r2
    34f0:	1825883a 	mov	r18,r3
    34f4:	00099c80 	call	99c8 <__unorddf2>
    34f8:	1000061e 	bne	r2,zero,3514 <sqrt+0x5c>
    34fc:	000d883a 	mov	r6,zero
    3500:	000f883a 	mov	r7,zero
    3504:	8809883a 	mov	r4,r17
    3508:	800b883a 	mov	r5,r16
    350c:	00088280 	call	8828 <__ledf2>
    3510:	10000916 	blt	r2,zero,3538 <sqrt+0x80>
    3514:	9805883a 	mov	r2,r19
    3518:	9007883a 	mov	r3,r18
    351c:	dfc00417 	ldw	ra,16(sp)
    3520:	dcc00317 	ldw	r19,12(sp)
    3524:	dc800217 	ldw	r18,8(sp)
    3528:	dc400117 	ldw	r17,4(sp)
    352c:	dc000017 	ldw	r16,0(sp)
    3530:	dec00504 	addi	sp,sp,20
    3534:	f800283a 	ret
    3538:	0009ea40 	call	9ea4 <__errno>
    353c:	00c00844 	movi	r3,33
    3540:	10c00015 	stw	r3,0(r2)
    3544:	000d883a 	mov	r6,zero
    3548:	000f883a 	mov	r7,zero
    354c:	0009883a 	mov	r4,zero
    3550:	000b883a 	mov	r5,zero
    3554:	0007dac0 	call	7dac <__divdf3>
    3558:	1027883a 	mov	r19,r2
    355c:	1825883a 	mov	r18,r3
    3560:	003fec06 	br	3514 <sqrt+0x5c>

00003564 <__ieee754_log>:
    3564:	defff204 	addi	sp,sp,-56
    3568:	dfc00d15 	stw	ra,52(sp)
    356c:	df000c15 	stw	fp,48(sp)
    3570:	ddc00b15 	stw	r23,44(sp)
    3574:	dd800a15 	stw	r22,40(sp)
    3578:	dd400915 	stw	r21,36(sp)
    357c:	dd000815 	stw	r20,32(sp)
    3580:	dcc00715 	stw	r19,28(sp)
    3584:	dc800615 	stw	r18,24(sp)
    3588:	dc400515 	stw	r17,20(sp)
    358c:	dc000415 	stw	r16,16(sp)
    3590:	01800434 	movhi	r6,16
    3594:	2005883a 	mov	r2,r4
    3598:	280f883a 	mov	r7,r5
    359c:	2980690e 	bge	r5,r6,3744 <__ieee754_log+0x1e0>
    35a0:	00e00034 	movhi	r3,32768
    35a4:	18ffffc4 	addi	r3,r3,-1
    35a8:	28c6703a 	and	r3,r5,r3
    35ac:	1906b03a 	or	r3,r3,r4
    35b0:	18011d26 	beq	r3,zero,3a28 <__ieee754_log+0x4c4>
    35b4:	28015c16 	blt	r5,zero,3b28 <__ieee754_log+0x5c4>
    35b8:	000d883a 	mov	r6,zero
    35bc:	01d0d434 	movhi	r7,17232
    35c0:	00089100 	call	8910 <__muldf3>
    35c4:	011ffc34 	movhi	r4,32752
    35c8:	180f883a 	mov	r7,r3
    35cc:	01bff284 	movi	r6,-54
    35d0:	1900600e 	bge	r3,r4,3754 <__ieee754_log+0x1f0>
    35d4:	04000434 	movhi	r16,16
    35d8:	843fffc4 	addi	r16,r16,-1
    35dc:	01400274 	movhi	r5,9
    35e0:	1c24703a 	and	r18,r3,r16
    35e4:	2957d904 	addi	r5,r5,24420
    35e8:	1807d53a 	srai	r3,r3,20
    35ec:	914b883a 	add	r5,r18,r5
    35f0:	2940042c 	andhi	r5,r5,16
    35f4:	2827d53a 	srai	r19,r5,20
    35f8:	18ff0044 	addi	r3,r3,-1023
    35fc:	294ffc3c 	xorhi	r5,r5,16368
    3600:	1987883a 	add	r3,r3,r6
    3604:	2c8ab03a 	or	r5,r5,r18
    3608:	000d883a 	mov	r6,zero
    360c:	01cffc34 	movhi	r7,16368
    3610:	1009883a 	mov	r4,r2
    3614:	98e7883a 	add	r19,r19,r3
    3618:	00090bc0 	call	90bc <__subdf3>
    361c:	91400084 	addi	r5,r18,2
    3620:	2c0a703a 	and	r5,r5,r16
    3624:	294000c8 	cmpgei	r5,r5,3
    3628:	000d883a 	mov	r6,zero
    362c:	1023883a 	mov	r17,r2
    3630:	1821883a 	mov	r16,r3
    3634:	2800571e 	bne	r5,zero,3794 <__ieee754_log+0x230>
    3638:	000f883a 	mov	r7,zero
    363c:	1009883a 	mov	r4,r2
    3640:	180b883a 	mov	r5,r3
    3644:	00086c00 	call	86c0 <__eqdf2>
    3648:	1000fd26 	beq	r2,zero,3a40 <__ieee754_log+0x4dc>
    364c:	01955574 	movhi	r6,21845
    3650:	01cff574 	movhi	r7,16341
    3654:	8809883a 	mov	r4,r17
    3658:	800b883a 	mov	r5,r16
    365c:	31955544 	addi	r6,r6,21845
    3660:	39d55544 	addi	r7,r7,21845
    3664:	00089100 	call	8910 <__muldf3>
    3668:	100d883a 	mov	r6,r2
    366c:	180f883a 	mov	r7,r3
    3670:	0009883a 	mov	r4,zero
    3674:	014ff834 	movhi	r5,16352
    3678:	00090bc0 	call	90bc <__subdf3>
    367c:	880d883a 	mov	r6,r17
    3680:	800f883a 	mov	r7,r16
    3684:	8809883a 	mov	r4,r17
    3688:	800b883a 	mov	r5,r16
    368c:	1029883a 	mov	r20,r2
    3690:	1825883a 	mov	r18,r3
    3694:	00089100 	call	8910 <__muldf3>
    3698:	a009883a 	mov	r4,r20
    369c:	900b883a 	mov	r5,r18
    36a0:	100d883a 	mov	r6,r2
    36a4:	180f883a 	mov	r7,r3
    36a8:	00089100 	call	8910 <__muldf3>
    36ac:	1029883a 	mov	r20,r2
    36b0:	1825883a 	mov	r18,r3
    36b4:	98011626 	beq	r19,zero,3b10 <__ieee754_log+0x5ac>
    36b8:	9809883a 	mov	r4,r19
    36bc:	0009a9c0 	call	9a9c <__floatsidf>
    36c0:	01cff9b4 	movhi	r7,16358
    36c4:	01bfb834 	movhi	r6,65248
    36c8:	39cb9084 	addi	r7,r7,11842
    36cc:	1009883a 	mov	r4,r2
    36d0:	180b883a 	mov	r5,r3
    36d4:	102b883a 	mov	r21,r2
    36d8:	1827883a 	mov	r19,r3
    36dc:	00089100 	call	8910 <__muldf3>
    36e0:	018d5e74 	movhi	r6,13689
    36e4:	01cf7ab4 	movhi	r7,15850
    36e8:	318f1d84 	addi	r6,r6,15478
    36ec:	39ce7bc4 	addi	r7,r7,14831
    36f0:	a809883a 	mov	r4,r21
    36f4:	980b883a 	mov	r5,r19
    36f8:	102b883a 	mov	r21,r2
    36fc:	1827883a 	mov	r19,r3
    3700:	00089100 	call	8910 <__muldf3>
    3704:	a009883a 	mov	r4,r20
    3708:	900b883a 	mov	r5,r18
    370c:	100d883a 	mov	r6,r2
    3710:	180f883a 	mov	r7,r3
    3714:	00090bc0 	call	90bc <__subdf3>
    3718:	880d883a 	mov	r6,r17
    371c:	800f883a 	mov	r7,r16
    3720:	1009883a 	mov	r4,r2
    3724:	180b883a 	mov	r5,r3
    3728:	00090bc0 	call	90bc <__subdf3>
    372c:	100d883a 	mov	r6,r2
    3730:	180f883a 	mov	r7,r3
    3734:	a809883a 	mov	r4,r21
    3738:	980b883a 	mov	r5,r19
    373c:	00090bc0 	call	90bc <__subdf3>
    3740:	00000806 	br	3764 <__ieee754_log+0x200>
    3744:	2807883a 	mov	r3,r5
    3748:	011ffc34 	movhi	r4,32752
    374c:	000d883a 	mov	r6,zero
    3750:	193fa016 	blt	r3,r4,35d4 <__ieee754_log+0x70>
    3754:	100d883a 	mov	r6,r2
    3758:	1009883a 	mov	r4,r2
    375c:	380b883a 	mov	r5,r7
    3760:	00074bc0 	call	74bc <__adddf3>
    3764:	dfc00d17 	ldw	ra,52(sp)
    3768:	df000c17 	ldw	fp,48(sp)
    376c:	ddc00b17 	ldw	r23,44(sp)
    3770:	dd800a17 	ldw	r22,40(sp)
    3774:	dd400917 	ldw	r21,36(sp)
    3778:	dd000817 	ldw	r20,32(sp)
    377c:	dcc00717 	ldw	r19,28(sp)
    3780:	dc800617 	ldw	r18,24(sp)
    3784:	dc400517 	ldw	r17,20(sp)
    3788:	dc000417 	ldw	r16,16(sp)
    378c:	dec00e04 	addi	sp,sp,56
    3790:	f800283a 	ret
    3794:	01d00034 	movhi	r7,16384
    3798:	1009883a 	mov	r4,r2
    379c:	180b883a 	mov	r5,r3
    37a0:	00074bc0 	call	74bc <__adddf3>
    37a4:	100d883a 	mov	r6,r2
    37a8:	180f883a 	mov	r7,r3
    37ac:	800b883a 	mov	r5,r16
    37b0:	8809883a 	mov	r4,r17
    37b4:	0007dac0 	call	7dac <__divdf3>
    37b8:	9809883a 	mov	r4,r19
    37bc:	102d883a 	mov	r22,r2
    37c0:	182b883a 	mov	r21,r3
    37c4:	0009a9c0 	call	9a9c <__floatsidf>
    37c8:	b00d883a 	mov	r6,r22
    37cc:	a80f883a 	mov	r7,r21
    37d0:	b009883a 	mov	r4,r22
    37d4:	a80b883a 	mov	r5,r21
    37d8:	1039883a 	mov	fp,r2
    37dc:	d8c00315 	stw	r3,12(sp)
    37e0:	00089100 	call	8910 <__muldf3>
    37e4:	1015883a 	mov	r10,r2
    37e8:	00bffeb4 	movhi	r2,65530
    37ec:	10bae184 	addi	r2,r2,-5242
    37f0:	9097883a 	add	r11,r18,r2
    37f4:	500d883a 	mov	r6,r10
    37f8:	5009883a 	mov	r4,r10
    37fc:	180f883a 	mov	r7,r3
    3800:	180b883a 	mov	r5,r3
    3804:	dac00215 	stw	r11,8(sp)
    3808:	da800115 	stw	r10,4(sp)
    380c:	d8c00015 	stw	r3,0(sp)
    3810:	00089100 	call	8910 <__muldf3>
    3814:	01b7cfb4 	movhi	r6,57150
    3818:	01cff0f4 	movhi	r7,16323
    381c:	31949104 	addi	r6,r6,21060
    3820:	39fc4484 	addi	r7,r7,-3822
    3824:	1009883a 	mov	r4,r2
    3828:	180b883a 	mov	r5,r3
    382c:	1829883a 	mov	r20,r3
    3830:	102f883a 	mov	r23,r2
    3834:	00089100 	call	8910 <__muldf3>
    3838:	01a5b2f4 	movhi	r6,38603
    383c:	01cff1f4 	movhi	r7,16327
    3840:	3180f784 	addi	r6,r6,990
    3844:	39d19904 	addi	r7,r7,18020
    3848:	1009883a 	mov	r4,r2
    384c:	180b883a 	mov	r5,r3
    3850:	00074bc0 	call	74bc <__adddf3>
    3854:	a00f883a 	mov	r7,r20
    3858:	b80d883a 	mov	r6,r23
    385c:	1009883a 	mov	r4,r2
    3860:	180b883a 	mov	r5,r3
    3864:	00089100 	call	8910 <__muldf3>
    3868:	01a508f4 	movhi	r6,37923
    386c:	01cff4b4 	movhi	r7,16338
    3870:	31a4d644 	addi	r6,r6,-27815
    3874:	39d24904 	addi	r7,r7,18724
    3878:	1009883a 	mov	r4,r2
    387c:	180b883a 	mov	r5,r3
    3880:	00074bc0 	call	74bc <__adddf3>
    3884:	a00f883a 	mov	r7,r20
    3888:	b80d883a 	mov	r6,r23
    388c:	1009883a 	mov	r4,r2
    3890:	180b883a 	mov	r5,r3
    3894:	00089100 	call	8910 <__muldf3>
    3898:	01955574 	movhi	r6,21845
    389c:	01cff974 	movhi	r7,16357
    38a0:	319564c4 	addi	r6,r6,21907
    38a4:	39d55544 	addi	r7,r7,21845
    38a8:	1009883a 	mov	r4,r2
    38ac:	180b883a 	mov	r5,r3
    38b0:	00074bc0 	call	74bc <__adddf3>
    38b4:	da800117 	ldw	r10,4(sp)
    38b8:	da400017 	ldw	r9,0(sp)
    38bc:	1009883a 	mov	r4,r2
    38c0:	500d883a 	mov	r6,r10
    38c4:	480f883a 	mov	r7,r9
    38c8:	180b883a 	mov	r5,r3
    38cc:	00089100 	call	8910 <__muldf3>
    38d0:	01b41e74 	movhi	r6,53369
    38d4:	01cff134 	movhi	r7,16324
    38d8:	a00b883a 	mov	r5,r20
    38dc:	31b1a7c4 	addi	r6,r6,-14689
    38e0:	39e68244 	addi	r7,r7,-26103
    38e4:	b809883a 	mov	r4,r23
    38e8:	d8800115 	stw	r2,4(sp)
    38ec:	d8c00015 	stw	r3,0(sp)
    38f0:	00089100 	call	8910 <__muldf3>
    38f4:	018763b4 	movhi	r6,7566
    38f8:	01cff334 	movhi	r7,16332
    38fc:	319e2bc4 	addi	r6,r6,30895
    3900:	39dc7144 	addi	r7,r7,29125
    3904:	1009883a 	mov	r4,r2
    3908:	180b883a 	mov	r5,r3
    390c:	00074bc0 	call	74bc <__adddf3>
    3910:	a00f883a 	mov	r7,r20
    3914:	b80d883a 	mov	r6,r23
    3918:	1009883a 	mov	r4,r2
    391c:	180b883a 	mov	r5,r3
    3920:	00089100 	call	8910 <__muldf3>
    3924:	01a66634 	movhi	r6,39320
    3928:	01cff6b4 	movhi	r7,16346
    392c:	31be8104 	addi	r6,r6,-1532
    3930:	39e66644 	addi	r7,r7,-26215
    3934:	1009883a 	mov	r4,r2
    3938:	180b883a 	mov	r5,r3
    393c:	00074bc0 	call	74bc <__adddf3>
    3940:	a00f883a 	mov	r7,r20
    3944:	b80d883a 	mov	r6,r23
    3948:	1009883a 	mov	r4,r2
    394c:	180b883a 	mov	r5,r3
    3950:	00089100 	call	8910 <__muldf3>
    3954:	da800117 	ldw	r10,4(sp)
    3958:	da400017 	ldw	r9,0(sp)
    395c:	100d883a 	mov	r6,r2
    3960:	180f883a 	mov	r7,r3
    3964:	480b883a 	mov	r5,r9
    3968:	5009883a 	mov	r4,r10
    396c:	00074bc0 	call	74bc <__adddf3>
    3970:	dac00217 	ldw	r11,8(sp)
    3974:	014001f4 	movhi	r5,7
    3978:	296e1444 	addi	r5,r5,-18351
    397c:	2ca5c83a 	sub	r18,r5,r18
    3980:	92e4b03a 	or	r18,r18,r11
    3984:	1829883a 	mov	r20,r3
    3988:	0480470e 	bge	zero,r18,3aa8 <__ieee754_log+0x544>
    398c:	000d883a 	mov	r6,zero
    3990:	01cff834 	movhi	r7,16352
    3994:	8809883a 	mov	r4,r17
    3998:	800b883a 	mov	r5,r16
    399c:	d8800115 	stw	r2,4(sp)
    39a0:	00089100 	call	8910 <__muldf3>
    39a4:	880d883a 	mov	r6,r17
    39a8:	800f883a 	mov	r7,r16
    39ac:	1009883a 	mov	r4,r2
    39b0:	180b883a 	mov	r5,r3
    39b4:	00089100 	call	8910 <__muldf3>
    39b8:	da000117 	ldw	r8,4(sp)
    39bc:	a00b883a 	mov	r5,r20
    39c0:	100d883a 	mov	r6,r2
    39c4:	4009883a 	mov	r4,r8
    39c8:	180f883a 	mov	r7,r3
    39cc:	1825883a 	mov	r18,r3
    39d0:	d8800015 	stw	r2,0(sp)
    39d4:	00074bc0 	call	74bc <__adddf3>
    39d8:	a80f883a 	mov	r7,r21
    39dc:	b00d883a 	mov	r6,r22
    39e0:	1009883a 	mov	r4,r2
    39e4:	180b883a 	mov	r5,r3
    39e8:	00089100 	call	8910 <__muldf3>
    39ec:	da400017 	ldw	r9,0(sp)
    39f0:	102b883a 	mov	r21,r2
    39f4:	1829883a 	mov	r20,r3
    39f8:	9800531e 	bne	r19,zero,3b48 <__ieee754_log+0x5e4>
    39fc:	4809883a 	mov	r4,r9
    3a00:	900b883a 	mov	r5,r18
    3a04:	100d883a 	mov	r6,r2
    3a08:	180f883a 	mov	r7,r3
    3a0c:	00090bc0 	call	90bc <__subdf3>
    3a10:	100d883a 	mov	r6,r2
    3a14:	180f883a 	mov	r7,r3
    3a18:	8809883a 	mov	r4,r17
    3a1c:	800b883a 	mov	r5,r16
    3a20:	00090bc0 	call	90bc <__subdf3>
    3a24:	003f4f06 	br	3764 <__ieee754_log+0x200>
    3a28:	000d883a 	mov	r6,zero
    3a2c:	000f883a 	mov	r7,zero
    3a30:	0009883a 	mov	r4,zero
    3a34:	0170d434 	movhi	r5,50000
    3a38:	0007dac0 	call	7dac <__divdf3>
    3a3c:	003f4906 	br	3764 <__ieee754_log+0x200>
    3a40:	98006826 	beq	r19,zero,3be4 <__ieee754_log+0x680>
    3a44:	9809883a 	mov	r4,r19
    3a48:	0009a9c0 	call	9a9c <__floatsidf>
    3a4c:	01cff9b4 	movhi	r7,16358
    3a50:	01bfb834 	movhi	r6,65248
    3a54:	39cb9084 	addi	r7,r7,11842
    3a58:	1009883a 	mov	r4,r2
    3a5c:	180b883a 	mov	r5,r3
    3a60:	1023883a 	mov	r17,r2
    3a64:	1821883a 	mov	r16,r3
    3a68:	00089100 	call	8910 <__muldf3>
    3a6c:	018d5e74 	movhi	r6,13689
    3a70:	01cf7ab4 	movhi	r7,15850
    3a74:	8809883a 	mov	r4,r17
    3a78:	800b883a 	mov	r5,r16
    3a7c:	318f1d84 	addi	r6,r6,15478
    3a80:	39ce7bc4 	addi	r7,r7,14831
    3a84:	1027883a 	mov	r19,r2
    3a88:	1825883a 	mov	r18,r3
    3a8c:	00089100 	call	8910 <__muldf3>
    3a90:	100d883a 	mov	r6,r2
    3a94:	180f883a 	mov	r7,r3
    3a98:	9809883a 	mov	r4,r19
    3a9c:	900b883a 	mov	r5,r18
    3aa0:	00074bc0 	call	74bc <__adddf3>
    3aa4:	003f2f06 	br	3764 <__ieee754_log+0x200>
    3aa8:	100d883a 	mov	r6,r2
    3aac:	180f883a 	mov	r7,r3
    3ab0:	8809883a 	mov	r4,r17
    3ab4:	800b883a 	mov	r5,r16
    3ab8:	00090bc0 	call	90bc <__subdf3>
    3abc:	b00d883a 	mov	r6,r22
    3ac0:	a80f883a 	mov	r7,r21
    3ac4:	1009883a 	mov	r4,r2
    3ac8:	180b883a 	mov	r5,r3
    3acc:	00089100 	call	8910 <__muldf3>
    3ad0:	1029883a 	mov	r20,r2
    3ad4:	1825883a 	mov	r18,r3
    3ad8:	98000d26 	beq	r19,zero,3b10 <__ieee754_log+0x5ac>
    3adc:	dcc00317 	ldw	r19,12(sp)
    3ae0:	01cff9b4 	movhi	r7,16358
    3ae4:	01bfb834 	movhi	r6,65248
    3ae8:	39cb9084 	addi	r7,r7,11842
    3aec:	e009883a 	mov	r4,fp
    3af0:	980b883a 	mov	r5,r19
    3af4:	00089100 	call	8910 <__muldf3>
    3af8:	018d5e74 	movhi	r6,13689
    3afc:	01cf7ab4 	movhi	r7,15850
    3b00:	318f1d84 	addi	r6,r6,15478
    3b04:	39ce7bc4 	addi	r7,r7,14831
    3b08:	e009883a 	mov	r4,fp
    3b0c:	003ef906 	br	36f4 <__ieee754_log+0x190>
    3b10:	a00d883a 	mov	r6,r20
    3b14:	900f883a 	mov	r7,r18
    3b18:	8809883a 	mov	r4,r17
    3b1c:	800b883a 	mov	r5,r16
    3b20:	00090bc0 	call	90bc <__subdf3>
    3b24:	003f0f06 	br	3764 <__ieee754_log+0x200>
    3b28:	200d883a 	mov	r6,r4
    3b2c:	00090bc0 	call	90bc <__subdf3>
    3b30:	000d883a 	mov	r6,zero
    3b34:	000f883a 	mov	r7,zero
    3b38:	1009883a 	mov	r4,r2
    3b3c:	180b883a 	mov	r5,r3
    3b40:	0007dac0 	call	7dac <__divdf3>
    3b44:	003f0706 	br	3764 <__ieee754_log+0x200>
    3b48:	dcc00317 	ldw	r19,12(sp)
    3b4c:	01cff9b4 	movhi	r7,16358
    3b50:	e009883a 	mov	r4,fp
    3b54:	980b883a 	mov	r5,r19
    3b58:	01bfb834 	movhi	r6,65248
    3b5c:	39cb9084 	addi	r7,r7,11842
    3b60:	da400015 	stw	r9,0(sp)
    3b64:	00089100 	call	8910 <__muldf3>
    3b68:	018d5e74 	movhi	r6,13689
    3b6c:	01cf7ab4 	movhi	r7,15850
    3b70:	e009883a 	mov	r4,fp
    3b74:	980b883a 	mov	r5,r19
    3b78:	318f1d84 	addi	r6,r6,15478
    3b7c:	39ce7bc4 	addi	r7,r7,14831
    3b80:	102d883a 	mov	r22,r2
    3b84:	1827883a 	mov	r19,r3
    3b88:	00089100 	call	8910 <__muldf3>
    3b8c:	a80d883a 	mov	r6,r21
    3b90:	a00f883a 	mov	r7,r20
    3b94:	1009883a 	mov	r4,r2
    3b98:	180b883a 	mov	r5,r3
    3b9c:	00074bc0 	call	74bc <__adddf3>
    3ba0:	da400017 	ldw	r9,0(sp)
    3ba4:	900b883a 	mov	r5,r18
    3ba8:	100d883a 	mov	r6,r2
    3bac:	4809883a 	mov	r4,r9
    3bb0:	180f883a 	mov	r7,r3
    3bb4:	00090bc0 	call	90bc <__subdf3>
    3bb8:	880d883a 	mov	r6,r17
    3bbc:	800f883a 	mov	r7,r16
    3bc0:	1009883a 	mov	r4,r2
    3bc4:	180b883a 	mov	r5,r3
    3bc8:	00090bc0 	call	90bc <__subdf3>
    3bcc:	100d883a 	mov	r6,r2
    3bd0:	180f883a 	mov	r7,r3
    3bd4:	b009883a 	mov	r4,r22
    3bd8:	980b883a 	mov	r5,r19
    3bdc:	00090bc0 	call	90bc <__subdf3>
    3be0:	003ee006 	br	3764 <__ieee754_log+0x200>
    3be4:	0005883a 	mov	r2,zero
    3be8:	0007883a 	mov	r3,zero
    3bec:	003edd06 	br	3764 <__ieee754_log+0x200>

00003bf0 <__ieee754_pow>:
    3bf0:	00e00034 	movhi	r3,32768
    3bf4:	deffeb04 	addi	sp,sp,-84
    3bf8:	18ffffc4 	addi	r3,r3,-1
    3bfc:	dc000b15 	stw	r16,44(sp)
    3c00:	3021883a 	mov	r16,r6
    3c04:	38cc703a 	and	r6,r7,r3
    3c08:	dd401015 	stw	r21,64(sp)
    3c0c:	dc400c15 	stw	r17,48(sp)
    3c10:	dfc01415 	stw	ra,80(sp)
    3c14:	df001315 	stw	fp,76(sp)
    3c18:	ddc01215 	stw	r23,72(sp)
    3c1c:	dd801115 	stw	r22,68(sp)
    3c20:	dd000f15 	stw	r20,60(sp)
    3c24:	dcc00e15 	stw	r19,56(sp)
    3c28:	dc800d15 	stw	r18,52(sp)
    3c2c:	3404b03a 	or	r2,r6,r16
    3c30:	3823883a 	mov	r17,r7
    3c34:	282b883a 	mov	r21,r5
    3c38:	1000191e 	bne	r2,zero,3ca0 <__ieee754_pow+0xb0>
    3c3c:	2880023c 	xorhi	r2,r5,8
    3c40:	2006d7fa 	srli	r3,r4,31
    3c44:	1004907a 	slli	r2,r2,1
    3c48:	017ffc34 	movhi	r5,65520
    3c4c:	200c907a 	slli	r6,r4,1
    3c50:	1884b03a 	or	r2,r3,r2
    3c54:	2880202e 	bgeu	r5,r2,3cd8 <__ieee754_pow+0xe8>
    3c58:	800d883a 	mov	r6,r16
    3c5c:	880f883a 	mov	r7,r17
    3c60:	a80b883a 	mov	r5,r21
    3c64:	00074bc0 	call	74bc <__adddf3>
    3c68:	102d883a 	mov	r22,r2
    3c6c:	b005883a 	mov	r2,r22
    3c70:	dfc01417 	ldw	ra,80(sp)
    3c74:	df001317 	ldw	fp,76(sp)
    3c78:	ddc01217 	ldw	r23,72(sp)
    3c7c:	dd801117 	ldw	r22,68(sp)
    3c80:	dd401017 	ldw	r21,64(sp)
    3c84:	dd000f17 	ldw	r20,60(sp)
    3c88:	dcc00e17 	ldw	r19,56(sp)
    3c8c:	dc800d17 	ldw	r18,52(sp)
    3c90:	dc400c17 	ldw	r17,48(sp)
    3c94:	dc000b17 	ldw	r16,44(sp)
    3c98:	dec01504 	addi	sp,sp,84
    3c9c:	f800283a 	ret
    3ca0:	28e6703a 	and	r19,r5,r3
    3ca4:	009ffc34 	movhi	r2,32752
    3ca8:	14c00f0e 	bge	r2,r19,3ce8 <__ieee754_pow+0xf8>
    3cac:	00b00434 	movhi	r2,49168
    3cb0:	a885883a 	add	r2,r21,r2
    3cb4:	1104b03a 	or	r2,r2,r4
    3cb8:	103fe71e 	bne	r2,zero,3c58 <__ieee754_pow+0x68>
    3cbc:	8880023c 	xorhi	r2,r17,8
    3cc0:	8006d7fa 	srli	r3,r16,31
    3cc4:	1004907a 	slli	r2,r2,1
    3cc8:	017ffc34 	movhi	r5,65520
    3ccc:	800c907a 	slli	r6,r16,1
    3cd0:	1884b03a 	or	r2,r3,r2
    3cd4:	28bfe036 	bltu	r5,r2,3c58 <__ieee754_pow+0x68>
    3cd8:	11402726 	beq	r2,r5,3d78 <__ieee754_pow+0x188>
    3cdc:	002d883a 	mov	r22,zero
    3ce0:	00cffc34 	movhi	r3,16368
    3ce4:	003fe106 	br	3c6c <__ieee754_pow+0x7c>
    3ce8:	98802526 	beq	r19,r2,3d80 <__ieee754_pow+0x190>
    3cec:	009ffc34 	movhi	r2,32752
    3cf0:	11bfee16 	blt	r2,r6,3cac <__ieee754_pow+0xbc>
    3cf4:	30802426 	beq	r6,r2,3d88 <__ieee754_pow+0x198>
    3cf8:	a8006e16 	blt	r21,zero,3eb4 <__ieee754_pow+0x2c4>
    3cfc:	0025883a 	mov	r18,zero
    3d00:	80002326 	beq	r16,zero,3d90 <__ieee754_pow+0x1a0>
    3d04:	00e00034 	movhi	r3,32768
    3d08:	18ffffc4 	addi	r3,r3,-1
    3d0c:	202d883a 	mov	r22,r4
    3d10:	a8c6703a 	and	r3,r21,r3
    3d14:	20003a26 	beq	r4,zero,3e00 <__ieee754_pow+0x210>
    3d18:	a828d7fa 	srli	r20,r21,31
    3d1c:	a53fffc4 	addi	r20,r20,-1
    3d20:	9504b03a 	or	r2,r18,r20
    3d24:	10008026 	beq	r2,zero,3f28 <__ieee754_pow+0x338>
    3d28:	00907834 	movhi	r2,16864
    3d2c:	1180810e 	bge	r2,r6,3f34 <__ieee754_pow+0x344>
    3d30:	0090fc34 	movhi	r2,17392
    3d34:	11834f0e 	bge	r2,r6,4a74 <__ieee754_pow+0xe84>
    3d38:	008ffc34 	movhi	r2,16368
    3d3c:	9880480e 	bge	r19,r2,3e60 <__ieee754_pow+0x270>
    3d40:	88004816 	blt	r17,zero,3e64 <__ieee754_pow+0x274>
    3d44:	0009883a 	mov	r4,zero
    3d48:	dfc01417 	ldw	ra,80(sp)
    3d4c:	df001317 	ldw	fp,76(sp)
    3d50:	ddc01217 	ldw	r23,72(sp)
    3d54:	dd801117 	ldw	r22,68(sp)
    3d58:	dd401017 	ldw	r21,64(sp)
    3d5c:	dd000f17 	ldw	r20,60(sp)
    3d60:	dcc00e17 	ldw	r19,56(sp)
    3d64:	dc800d17 	ldw	r18,52(sp)
    3d68:	dc400c17 	ldw	r17,48(sp)
    3d6c:	dc000b17 	ldw	r16,44(sp)
    3d70:	dec01504 	addi	sp,sp,84
    3d74:	0006bd01 	jmpi	6bd0 <__math_uflow>
    3d78:	303fd826 	beq	r6,zero,3cdc <__ieee754_pow+0xec>
    3d7c:	003fb606 	br	3c58 <__ieee754_pow+0x68>
    3d80:	203fb51e 	bne	r4,zero,3c58 <__ieee754_pow+0x68>
    3d84:	003fd906 	br	3cec <__ieee754_pow+0xfc>
    3d88:	803fdb26 	beq	r16,zero,3cf8 <__ieee754_pow+0x108>
    3d8c:	003fc706 	br	3cac <__ieee754_pow+0xbc>
    3d90:	009ffc34 	movhi	r2,32752
    3d94:	30805a26 	beq	r6,r2,3f00 <__ieee754_pow+0x310>
    3d98:	008ffc34 	movhi	r2,16368
    3d9c:	30831026 	beq	r6,r2,49e0 <__ieee754_pow+0xdf0>
    3da0:	00900034 	movhi	r2,16384
    3da4:	8883a626 	beq	r17,r2,4c40 <__ieee754_pow+0x1050>
    3da8:	008ff834 	movhi	r2,16352
    3dac:	88bfd51e 	bne	r17,r2,3d04 <__ieee754_pow+0x114>
    3db0:	a83fd416 	blt	r21,zero,3d04 <__ieee754_pow+0x114>
    3db4:	a80b883a 	mov	r5,r21
    3db8:	dfc01417 	ldw	ra,80(sp)
    3dbc:	df001317 	ldw	fp,76(sp)
    3dc0:	ddc01217 	ldw	r23,72(sp)
    3dc4:	dd801117 	ldw	r22,68(sp)
    3dc8:	dd401017 	ldw	r21,64(sp)
    3dcc:	dd000f17 	ldw	r20,60(sp)
    3dd0:	dcc00e17 	ldw	r19,56(sp)
    3dd4:	dc800d17 	ldw	r18,52(sp)
    3dd8:	dc400c17 	ldw	r17,48(sp)
    3ddc:	dc000b17 	ldw	r16,44(sp)
    3de0:	dec01504 	addi	sp,sp,84
    3de4:	00054441 	jmpi	5444 <__ieee754_sqrt>
    3de8:	20004f1e 	bne	r4,zero,3f28 <__ieee754_pow+0x338>
    3dec:	00e00034 	movhi	r3,32768
    3df0:	18ffffc4 	addi	r3,r3,-1
    3df4:	002d883a 	mov	r22,zero
    3df8:	a8c6703a 	and	r3,r21,r3
    3dfc:	0025883a 	mov	r18,zero
    3e00:	98000526 	beq	r19,zero,3e18 <__ieee754_pow+0x228>
    3e04:	00900034 	movhi	r2,16384
    3e08:	10bfffc4 	addi	r2,r2,-1
    3e0c:	a884703a 	and	r2,r21,r2
    3e10:	014ffc34 	movhi	r5,16368
    3e14:	117fc01e 	bne	r2,r5,3d18 <__ieee754_pow+0x128>
    3e18:	88001f16 	blt	r17,zero,3e98 <__ieee754_pow+0x2a8>
    3e1c:	a83f930e 	bge	r21,zero,3c6c <__ieee754_pow+0x7c>
    3e20:	00b00434 	movhi	r2,49168
    3e24:	9885883a 	add	r2,r19,r2
    3e28:	1484b03a 	or	r2,r2,r18
    3e2c:	10038a1e 	bne	r2,zero,4c58 <__ieee754_pow+0x1068>
    3e30:	b00d883a 	mov	r6,r22
    3e34:	180f883a 	mov	r7,r3
    3e38:	3009883a 	mov	r4,r6
    3e3c:	380b883a 	mov	r5,r7
    3e40:	00090bc0 	call	90bc <__subdf3>
    3e44:	100d883a 	mov	r6,r2
    3e48:	180f883a 	mov	r7,r3
    3e4c:	1009883a 	mov	r4,r2
    3e50:	180b883a 	mov	r5,r3
    3e54:	0007dac0 	call	7dac <__divdf3>
    3e58:	102d883a 	mov	r22,r2
    3e5c:	003f8306 	br	3c6c <__ieee754_pow+0x7c>
    3e60:	047fb80e 	bge	zero,r17,3d44 <__ieee754_pow+0x154>
    3e64:	0009883a 	mov	r4,zero
    3e68:	dfc01417 	ldw	ra,80(sp)
    3e6c:	df001317 	ldw	fp,76(sp)
    3e70:	ddc01217 	ldw	r23,72(sp)
    3e74:	dd801117 	ldw	r22,68(sp)
    3e78:	dd401017 	ldw	r21,64(sp)
    3e7c:	dd000f17 	ldw	r20,60(sp)
    3e80:	dcc00e17 	ldw	r19,56(sp)
    3e84:	dc800d17 	ldw	r18,52(sp)
    3e88:	dc400c17 	ldw	r17,48(sp)
    3e8c:	dc000b17 	ldw	r16,44(sp)
    3e90:	dec01504 	addi	sp,sp,84
    3e94:	0006be81 	jmpi	6be8 <__math_oflow>
    3e98:	180f883a 	mov	r7,r3
    3e9c:	000d883a 	mov	r6,zero
    3ea0:	0009883a 	mov	r4,zero
    3ea4:	014ffc34 	movhi	r5,16368
    3ea8:	0007dac0 	call	7dac <__divdf3>
    3eac:	102d883a 	mov	r22,r2
    3eb0:	003fda06 	br	3e1c <__ieee754_pow+0x22c>
    3eb4:	0090d034 	movhi	r2,17216
    3eb8:	30800e0e 	bge	r6,r2,3ef4 <__ieee754_pow+0x304>
    3ebc:	008ffc34 	movhi	r2,16368
    3ec0:	30800916 	blt	r6,r2,3ee8 <__ieee754_pow+0x2f8>
    3ec4:	3005d53a 	srai	r2,r6,20
    3ec8:	10bf0044 	addi	r2,r2,-1023
    3ecc:	10c00550 	cmplti	r3,r2,21
    3ed0:	18034c1e 	bne	r3,zero,4c04 <__ieee754_pow+0x1014>
    3ed4:	00c00d04 	movi	r3,52
    3ed8:	1885c83a 	sub	r2,r3,r2
    3edc:	8086d83a 	srl	r3,r16,r2
    3ee0:	1884983a 	sll	r2,r3,r2
    3ee4:	14037926 	beq	r2,r16,4ccc <__ieee754_pow+0x10dc>
    3ee8:	0025883a 	mov	r18,zero
    3eec:	803faa26 	beq	r16,zero,3d98 <__ieee754_pow+0x1a8>
    3ef0:	003f8406 	br	3d04 <__ieee754_pow+0x114>
    3ef4:	04800084 	movi	r18,2
    3ef8:	803f821e 	bne	r16,zero,3d04 <__ieee754_pow+0x114>
    3efc:	003fa406 	br	3d90 <__ieee754_pow+0x1a0>
    3f00:	00b00434 	movhi	r2,49168
    3f04:	9885883a 	add	r2,r19,r2
    3f08:	1104b03a 	or	r2,r2,r4
    3f0c:	103f7326 	beq	r2,zero,3cdc <__ieee754_pow+0xec>
    3f10:	008ffc34 	movhi	r2,16368
    3f14:	002d883a 	mov	r22,zero
    3f18:	98833716 	blt	r19,r2,4bf8 <__ieee754_pow+0x1008>
    3f1c:	88033416 	blt	r17,zero,4bf0 <__ieee754_pow+0x1000>
    3f20:	8807883a 	mov	r3,r17
    3f24:	003f5106 	br	3c6c <__ieee754_pow+0x7c>
    3f28:	200d883a 	mov	r6,r4
    3f2c:	a80f883a 	mov	r7,r21
    3f30:	003fc106 	br	3e38 <__ieee754_pow+0x248>
    3f34:	ad5ffc2c 	andhi	r21,r21,32752
    3f38:	a802cc1e 	bne	r21,zero,4a6c <__ieee754_pow+0xe7c>
    3f3c:	180b883a 	mov	r5,r3
    3f40:	000d883a 	mov	r6,zero
    3f44:	01d0d034 	movhi	r7,17216
    3f48:	00089100 	call	8910 <__muldf3>
    3f4c:	102d883a 	mov	r22,r2
    3f50:	1827883a 	mov	r19,r3
    3f54:	017ff2c4 	movi	r5,-53
    3f58:	9809d53a 	srai	r4,r19,20
    3f5c:	00800434 	movhi	r2,16
    3f60:	10bfffc4 	addi	r2,r2,-1
    3f64:	00c00134 	movhi	r3,4
    3f68:	213f0044 	addi	r4,r4,-1023
    3f6c:	9884703a 	and	r2,r19,r2
    3f70:	18e62384 	addi	r3,r3,-26482
    3f74:	2159883a 	add	r12,r4,r5
    3f78:	170ffc34 	orhi	fp,r2,16368
    3f7c:	1880060e 	bge	r3,r2,3f98 <__ieee754_pow+0x3a8>
    3f80:	00c00334 	movhi	r3,12
    3f84:	18ed9e44 	addi	r3,r3,-18823
    3f88:	1883370e 	bge	r3,r2,4c68 <__ieee754_pow+0x1078>
    3f8c:	00bffc34 	movhi	r2,65520
    3f90:	63000044 	addi	r12,r12,1
    3f94:	e0b9883a 	add	fp,fp,r2
    3f98:	d8000015 	stw	zero,0(sp)
    3f9c:	d8000115 	stw	zero,4(sp)
    3fa0:	d8000a15 	stw	zero,40(sp)
    3fa4:	001f883a 	mov	r15,zero
    3fa8:	002f883a 	mov	r23,zero
    3fac:	034ffc34 	movhi	r13,16368
    3fb0:	680f883a 	mov	r7,r13
    3fb4:	b009883a 	mov	r4,r22
    3fb8:	e00b883a 	mov	r5,fp
    3fbc:	000d883a 	mov	r6,zero
    3fc0:	dbc00915 	stw	r15,36(sp)
    3fc4:	db000815 	stw	r12,32(sp)
    3fc8:	db400215 	stw	r13,8(sp)
    3fcc:	00090bc0 	call	90bc <__subdf3>
    3fd0:	db400217 	ldw	r13,8(sp)
    3fd4:	b009883a 	mov	r4,r22
    3fd8:	e00b883a 	mov	r5,fp
    3fdc:	680f883a 	mov	r7,r13
    3fe0:	000d883a 	mov	r6,zero
    3fe4:	db400615 	stw	r13,24(sp)
    3fe8:	d8800315 	stw	r2,12(sp)
    3fec:	d8c00215 	stw	r3,8(sp)
    3ff0:	00074bc0 	call	74bc <__adddf3>
    3ff4:	100d883a 	mov	r6,r2
    3ff8:	180f883a 	mov	r7,r3
    3ffc:	0009883a 	mov	r4,zero
    4000:	014ffc34 	movhi	r5,16368
    4004:	0007dac0 	call	7dac <__divdf3>
    4008:	dac00217 	ldw	r11,8(sp)
    400c:	da400317 	ldw	r9,12(sp)
    4010:	100d883a 	mov	r6,r2
    4014:	580b883a 	mov	r5,r11
    4018:	4809883a 	mov	r4,r9
    401c:	180f883a 	mov	r7,r3
    4020:	d8800515 	stw	r2,20(sp)
    4024:	d8c00415 	stw	r3,16(sp)
    4028:	00089100 	call	8910 <__muldf3>
    402c:	e009d07a 	srai	r4,fp,1
    4030:	01400234 	movhi	r5,8
    4034:	000d883a 	mov	r6,zero
    4038:	21080034 	orhi	r4,r4,8192
    403c:	2149883a 	add	r4,r4,r5
    4040:	25ef883a 	add	r23,r4,r23
    4044:	b80f883a 	mov	r7,r23
    4048:	0009883a 	mov	r4,zero
    404c:	180b883a 	mov	r5,r3
    4050:	1827883a 	mov	r19,r3
    4054:	102b883a 	mov	r21,r2
    4058:	00089100 	call	8910 <__muldf3>
    405c:	da400317 	ldw	r9,12(sp)
    4060:	dac00217 	ldw	r11,8(sp)
    4064:	100d883a 	mov	r6,r2
    4068:	4809883a 	mov	r4,r9
    406c:	580b883a 	mov	r5,r11
    4070:	180f883a 	mov	r7,r3
    4074:	00090bc0 	call	90bc <__subdf3>
    4078:	db400617 	ldw	r13,24(sp)
    407c:	b80b883a 	mov	r5,r23
    4080:	000d883a 	mov	r6,zero
    4084:	680f883a 	mov	r7,r13
    4088:	0009883a 	mov	r4,zero
    408c:	182f883a 	mov	r23,r3
    4090:	d8800215 	stw	r2,8(sp)
    4094:	00090bc0 	call	90bc <__subdf3>
    4098:	b009883a 	mov	r4,r22
    409c:	e00b883a 	mov	r5,fp
    40a0:	100d883a 	mov	r6,r2
    40a4:	180f883a 	mov	r7,r3
    40a8:	00090bc0 	call	90bc <__subdf3>
    40ac:	980f883a 	mov	r7,r19
    40b0:	000d883a 	mov	r6,zero
    40b4:	1009883a 	mov	r4,r2
    40b8:	180b883a 	mov	r5,r3
    40bc:	00089100 	call	8910 <__muldf3>
    40c0:	dac00217 	ldw	r11,8(sp)
    40c4:	b80b883a 	mov	r5,r23
    40c8:	100d883a 	mov	r6,r2
    40cc:	5809883a 	mov	r4,r11
    40d0:	180f883a 	mov	r7,r3
    40d4:	00090bc0 	call	90bc <__subdf3>
    40d8:	da000417 	ldw	r8,16(sp)
    40dc:	da800517 	ldw	r10,20(sp)
    40e0:	1009883a 	mov	r4,r2
    40e4:	400f883a 	mov	r7,r8
    40e8:	500d883a 	mov	r6,r10
    40ec:	180b883a 	mov	r5,r3
    40f0:	00089100 	call	8910 <__muldf3>
    40f4:	a80d883a 	mov	r6,r21
    40f8:	980f883a 	mov	r7,r19
    40fc:	a809883a 	mov	r4,r21
    4100:	980b883a 	mov	r5,r19
    4104:	d8800415 	stw	r2,16(sp)
    4108:	d8c00315 	stw	r3,12(sp)
    410c:	00089100 	call	8910 <__muldf3>
    4110:	01929174 	movhi	r6,19013
    4114:	01cff2b4 	movhi	r7,16330
    4118:	3193bbc4 	addi	r6,r6,20207
    411c:	39df8a04 	addi	r7,r7,32296
    4120:	1009883a 	mov	r4,r2
    4124:	180b883a 	mov	r5,r3
    4128:	102f883a 	mov	r23,r2
    412c:	182d883a 	mov	r22,r3
    4130:	00089100 	call	8910 <__muldf3>
    4134:	01a4f2b4 	movhi	r6,37834
    4138:	01cff3b4 	movhi	r7,16334
    413c:	31b6d944 	addi	r6,r6,-9371
    4140:	39e19284 	addi	r7,r7,-31158
    4144:	1009883a 	mov	r4,r2
    4148:	180b883a 	mov	r5,r3
    414c:	00074bc0 	call	74bc <__adddf3>
    4150:	b80d883a 	mov	r6,r23
    4154:	b00f883a 	mov	r7,r22
    4158:	1009883a 	mov	r4,r2
    415c:	180b883a 	mov	r5,r3
    4160:	00089100 	call	8910 <__muldf3>
    4164:	01aa4774 	movhi	r6,43293
    4168:	01cff474 	movhi	r7,16337
    416c:	31904044 	addi	r6,r6,16641
    4170:	39dd1804 	addi	r7,r7,29792
    4174:	1009883a 	mov	r4,r2
    4178:	180b883a 	mov	r5,r3
    417c:	00074bc0 	call	74bc <__adddf3>
    4180:	b80d883a 	mov	r6,r23
    4184:	b00f883a 	mov	r7,r22
    4188:	1009883a 	mov	r4,r2
    418c:	180b883a 	mov	r5,r3
    4190:	00089100 	call	8910 <__muldf3>
    4194:	019463f4 	movhi	r6,20879
    4198:	01cff574 	movhi	r7,16341
    419c:	31899344 	addi	r6,r6,9805
    41a0:	39d55544 	addi	r7,r7,21845
    41a4:	1009883a 	mov	r4,r2
    41a8:	180b883a 	mov	r5,r3
    41ac:	00074bc0 	call	74bc <__adddf3>
    41b0:	b80d883a 	mov	r6,r23
    41b4:	b00f883a 	mov	r7,r22
    41b8:	1009883a 	mov	r4,r2
    41bc:	180b883a 	mov	r5,r3
    41c0:	00089100 	call	8910 <__muldf3>
    41c4:	01b6dc34 	movhi	r6,56176
    41c8:	01cff6f4 	movhi	r7,16347
    41cc:	31aaffc4 	addi	r6,r6,-21505
    41d0:	39db6d84 	addi	r7,r7,28086
    41d4:	1009883a 	mov	r4,r2
    41d8:	180b883a 	mov	r5,r3
    41dc:	00074bc0 	call	74bc <__adddf3>
    41e0:	b80d883a 	mov	r6,r23
    41e4:	b00f883a 	mov	r7,r22
    41e8:	1009883a 	mov	r4,r2
    41ec:	180b883a 	mov	r5,r3
    41f0:	00089100 	call	8910 <__muldf3>
    41f4:	018cccf4 	movhi	r6,13107
    41f8:	01cff8f4 	movhi	r7,16355
    41fc:	318cc0c4 	addi	r6,r6,13059
    4200:	39ccccc4 	addi	r7,r7,13107
    4204:	1009883a 	mov	r4,r2
    4208:	180b883a 	mov	r5,r3
    420c:	00074bc0 	call	74bc <__adddf3>
    4210:	b80d883a 	mov	r6,r23
    4214:	b00f883a 	mov	r7,r22
    4218:	b809883a 	mov	r4,r23
    421c:	b00b883a 	mov	r5,r22
    4220:	1839883a 	mov	fp,r3
    4224:	d8800215 	stw	r2,8(sp)
    4228:	00089100 	call	8910 <__muldf3>
    422c:	dac00217 	ldw	r11,8(sp)
    4230:	e00b883a 	mov	r5,fp
    4234:	100d883a 	mov	r6,r2
    4238:	5809883a 	mov	r4,r11
    423c:	180f883a 	mov	r7,r3
    4240:	00089100 	call	8910 <__muldf3>
    4244:	980f883a 	mov	r7,r19
    4248:	a809883a 	mov	r4,r21
    424c:	980b883a 	mov	r5,r19
    4250:	000d883a 	mov	r6,zero
    4254:	102f883a 	mov	r23,r2
    4258:	182d883a 	mov	r22,r3
    425c:	00074bc0 	call	74bc <__adddf3>
    4260:	da800417 	ldw	r10,16(sp)
    4264:	da400317 	ldw	r9,12(sp)
    4268:	1009883a 	mov	r4,r2
    426c:	500d883a 	mov	r6,r10
    4270:	480f883a 	mov	r7,r9
    4274:	180b883a 	mov	r5,r3
    4278:	da800715 	stw	r10,28(sp)
    427c:	da400615 	stw	r9,24(sp)
    4280:	00089100 	call	8910 <__muldf3>
    4284:	b80d883a 	mov	r6,r23
    4288:	b00f883a 	mov	r7,r22
    428c:	1009883a 	mov	r4,r2
    4290:	180b883a 	mov	r5,r3
    4294:	00074bc0 	call	74bc <__adddf3>
    4298:	980f883a 	mov	r7,r19
    429c:	980b883a 	mov	r5,r19
    42a0:	000d883a 	mov	r6,zero
    42a4:	0009883a 	mov	r4,zero
    42a8:	d8800315 	stw	r2,12(sp)
    42ac:	d8c00215 	stw	r3,8(sp)
    42b0:	00089100 	call	8910 <__muldf3>
    42b4:	000d883a 	mov	r6,zero
    42b8:	01d00234 	movhi	r7,16392
    42bc:	1009883a 	mov	r4,r2
    42c0:	180b883a 	mov	r5,r3
    42c4:	d8800515 	stw	r2,20(sp)
    42c8:	d8c00415 	stw	r3,16(sp)
    42cc:	00074bc0 	call	74bc <__adddf3>
    42d0:	da000317 	ldw	r8,12(sp)
    42d4:	dac00217 	ldw	r11,8(sp)
    42d8:	1009883a 	mov	r4,r2
    42dc:	400d883a 	mov	r6,r8
    42e0:	580f883a 	mov	r7,r11
    42e4:	180b883a 	mov	r5,r3
    42e8:	00074bc0 	call	74bc <__adddf3>
    42ec:	980b883a 	mov	r5,r19
    42f0:	000d883a 	mov	r6,zero
    42f4:	180f883a 	mov	r7,r3
    42f8:	0009883a 	mov	r4,zero
    42fc:	182d883a 	mov	r22,r3
    4300:	00089100 	call	8910 <__muldf3>
    4304:	b00b883a 	mov	r5,r22
    4308:	000d883a 	mov	r6,zero
    430c:	01d00234 	movhi	r7,16392
    4310:	0009883a 	mov	r4,zero
    4314:	1039883a 	mov	fp,r2
    4318:	182f883a 	mov	r23,r3
    431c:	00090bc0 	call	90bc <__subdf3>
    4320:	db800517 	ldw	r14,20(sp)
    4324:	db400417 	ldw	r13,16(sp)
    4328:	1009883a 	mov	r4,r2
    432c:	700d883a 	mov	r6,r14
    4330:	680f883a 	mov	r7,r13
    4334:	180b883a 	mov	r5,r3
    4338:	00090bc0 	call	90bc <__subdf3>
    433c:	da000317 	ldw	r8,12(sp)
    4340:	dac00217 	ldw	r11,8(sp)
    4344:	100d883a 	mov	r6,r2
    4348:	4009883a 	mov	r4,r8
    434c:	580b883a 	mov	r5,r11
    4350:	180f883a 	mov	r7,r3
    4354:	00090bc0 	call	90bc <__subdf3>
    4358:	a80d883a 	mov	r6,r21
    435c:	980f883a 	mov	r7,r19
    4360:	1009883a 	mov	r4,r2
    4364:	180b883a 	mov	r5,r3
    4368:	00089100 	call	8910 <__muldf3>
    436c:	da800717 	ldw	r10,28(sp)
    4370:	da400617 	ldw	r9,24(sp)
    4374:	b00f883a 	mov	r7,r22
    4378:	5009883a 	mov	r4,r10
    437c:	480b883a 	mov	r5,r9
    4380:	000d883a 	mov	r6,zero
    4384:	102b883a 	mov	r21,r2
    4388:	1827883a 	mov	r19,r3
    438c:	00089100 	call	8910 <__muldf3>
    4390:	a809883a 	mov	r4,r21
    4394:	980b883a 	mov	r5,r19
    4398:	100d883a 	mov	r6,r2
    439c:	180f883a 	mov	r7,r3
    43a0:	00074bc0 	call	74bc <__adddf3>
    43a4:	e009883a 	mov	r4,fp
    43a8:	b80b883a 	mov	r5,r23
    43ac:	100d883a 	mov	r6,r2
    43b0:	180f883a 	mov	r7,r3
    43b4:	102d883a 	mov	r22,r2
    43b8:	182b883a 	mov	r21,r3
    43bc:	00074bc0 	call	74bc <__adddf3>
    43c0:	01cffbf4 	movhi	r7,16367
    43c4:	01b80034 	movhi	r6,57344
    43c8:	39f1c244 	addi	r7,r7,-14583
    43cc:	0009883a 	mov	r4,zero
    43d0:	180b883a 	mov	r5,r3
    43d4:	1827883a 	mov	r19,r3
    43d8:	00089100 	call	8910 <__muldf3>
    43dc:	e00d883a 	mov	r6,fp
    43e0:	b80f883a 	mov	r7,r23
    43e4:	980b883a 	mov	r5,r19
    43e8:	0009883a 	mov	r4,zero
    43ec:	1039883a 	mov	fp,r2
    43f0:	182f883a 	mov	r23,r3
    43f4:	00090bc0 	call	90bc <__subdf3>
    43f8:	b009883a 	mov	r4,r22
    43fc:	a80b883a 	mov	r5,r21
    4400:	100d883a 	mov	r6,r2
    4404:	180f883a 	mov	r7,r3
    4408:	00090bc0 	call	90bc <__subdf3>
    440c:	01b70eb4 	movhi	r6,56378
    4410:	01cffbf4 	movhi	r7,16367
    4414:	3180ff44 	addi	r6,r6,1021
    4418:	39f1c244 	addi	r7,r7,-14583
    441c:	1009883a 	mov	r4,r2
    4420:	180b883a 	mov	r5,r3
    4424:	00089100 	call	8910 <__muldf3>
    4428:	018516f4 	movhi	r6,5211
    442c:	01ef8fb4 	movhi	r7,48702
    4430:	980b883a 	mov	r5,r19
    4434:	31807d44 	addi	r6,r6,501
    4438:	39cbf804 	addi	r7,r7,12256
    443c:	0009883a 	mov	r4,zero
    4440:	102d883a 	mov	r22,r2
    4444:	182b883a 	mov	r21,r3
    4448:	00089100 	call	8910 <__muldf3>
    444c:	b009883a 	mov	r4,r22
    4450:	a80b883a 	mov	r5,r21
    4454:	100d883a 	mov	r6,r2
    4458:	180f883a 	mov	r7,r3
    445c:	00074bc0 	call	74bc <__adddf3>
    4460:	dbc00917 	ldw	r15,36(sp)
    4464:	d9800a17 	ldw	r6,40(sp)
    4468:	180b883a 	mov	r5,r3
    446c:	780f883a 	mov	r7,r15
    4470:	1009883a 	mov	r4,r2
    4474:	00074bc0 	call	74bc <__adddf3>
    4478:	db000817 	ldw	r12,32(sp)
    447c:	102d883a 	mov	r22,r2
    4480:	182b883a 	mov	r21,r3
    4484:	6009883a 	mov	r4,r12
    4488:	0009a9c0 	call	9a9c <__floatsidf>
    448c:	b00d883a 	mov	r6,r22
    4490:	a80f883a 	mov	r7,r21
    4494:	e009883a 	mov	r4,fp
    4498:	b80b883a 	mov	r5,r23
    449c:	d8800315 	stw	r2,12(sp)
    44a0:	d8c00215 	stw	r3,8(sp)
    44a4:	00074bc0 	call	74bc <__adddf3>
    44a8:	d9800017 	ldw	r6,0(sp)
    44ac:	d9c00117 	ldw	r7,4(sp)
    44b0:	1009883a 	mov	r4,r2
    44b4:	180b883a 	mov	r5,r3
    44b8:	00074bc0 	call	74bc <__adddf3>
    44bc:	da800317 	ldw	r10,12(sp)
    44c0:	da400217 	ldw	r9,8(sp)
    44c4:	1009883a 	mov	r4,r2
    44c8:	500d883a 	mov	r6,r10
    44cc:	480f883a 	mov	r7,r9
    44d0:	180b883a 	mov	r5,r3
    44d4:	00074bc0 	call	74bc <__adddf3>
    44d8:	da800317 	ldw	r10,12(sp)
    44dc:	da400217 	ldw	r9,8(sp)
    44e0:	0009883a 	mov	r4,zero
    44e4:	500d883a 	mov	r6,r10
    44e8:	480f883a 	mov	r7,r9
    44ec:	180b883a 	mov	r5,r3
    44f0:	1827883a 	mov	r19,r3
    44f4:	00090bc0 	call	90bc <__subdf3>
    44f8:	d9800017 	ldw	r6,0(sp)
    44fc:	d9c00117 	ldw	r7,4(sp)
    4500:	1009883a 	mov	r4,r2
    4504:	180b883a 	mov	r5,r3
    4508:	00090bc0 	call	90bc <__subdf3>
    450c:	e00d883a 	mov	r6,fp
    4510:	b80f883a 	mov	r7,r23
    4514:	1009883a 	mov	r4,r2
    4518:	180b883a 	mov	r5,r3
    451c:	00090bc0 	call	90bc <__subdf3>
    4520:	b009883a 	mov	r4,r22
    4524:	100d883a 	mov	r6,r2
    4528:	180f883a 	mov	r7,r3
    452c:	a80b883a 	mov	r5,r21
    4530:	94bfffc4 	addi	r18,r18,-1
    4534:	00090bc0 	call	90bc <__subdf3>
    4538:	9528b03a 	or	r20,r18,r20
    453c:	102f883a 	mov	r23,r2
    4540:	182d883a 	mov	r22,r3
    4544:	a001471e 	bne	r20,zero,4a64 <__ieee754_pow+0xe74>
    4548:	052ffc34 	movhi	r20,49136
    454c:	880f883a 	mov	r7,r17
    4550:	8009883a 	mov	r4,r16
    4554:	880b883a 	mov	r5,r17
    4558:	000d883a 	mov	r6,zero
    455c:	00090bc0 	call	90bc <__subdf3>
    4560:	980f883a 	mov	r7,r19
    4564:	000d883a 	mov	r6,zero
    4568:	1009883a 	mov	r4,r2
    456c:	180b883a 	mov	r5,r3
    4570:	00089100 	call	8910 <__muldf3>
    4574:	800d883a 	mov	r6,r16
    4578:	880f883a 	mov	r7,r17
    457c:	b809883a 	mov	r4,r23
    4580:	b00b883a 	mov	r5,r22
    4584:	102b883a 	mov	r21,r2
    4588:	1825883a 	mov	r18,r3
    458c:	00089100 	call	8910 <__muldf3>
    4590:	a809883a 	mov	r4,r21
    4594:	900b883a 	mov	r5,r18
    4598:	100d883a 	mov	r6,r2
    459c:	180f883a 	mov	r7,r3
    45a0:	00074bc0 	call	74bc <__adddf3>
    45a4:	880f883a 	mov	r7,r17
    45a8:	980b883a 	mov	r5,r19
    45ac:	000d883a 	mov	r6,zero
    45b0:	0009883a 	mov	r4,zero
    45b4:	1027883a 	mov	r19,r2
    45b8:	182b883a 	mov	r21,r3
    45bc:	00089100 	call	8910 <__muldf3>
    45c0:	a80b883a 	mov	r5,r21
    45c4:	100d883a 	mov	r6,r2
    45c8:	180f883a 	mov	r7,r3
    45cc:	9809883a 	mov	r4,r19
    45d0:	1023883a 	mov	r17,r2
    45d4:	1825883a 	mov	r18,r3
    45d8:	00074bc0 	call	74bc <__adddf3>
    45dc:	01502434 	movhi	r5,16528
    45e0:	1821883a 	mov	r16,r3
    45e4:	8817883a 	mov	r11,r17
    45e8:	902f883a 	mov	r23,r18
    45ec:	102d883a 	mov	r22,r2
    45f0:	1839883a 	mov	fp,r3
    45f4:	1940fe16 	blt	r3,r5,49f0 <__ieee754_pow+0xe00>
    45f8:	1947c83a 	sub	r3,r3,r5
    45fc:	1d86b03a 	or	r3,r3,r22
    4600:	1801ab1e 	bne	r3,zero,4cb0 <__ieee754_pow+0x10c0>
    4604:	01994b34 	movhi	r6,25900
    4608:	01cf25f4 	movhi	r7,15511
    460c:	31a0bf84 	addi	r6,r6,-32002
    4610:	39c551c4 	addi	r7,r7,5447
    4614:	9809883a 	mov	r4,r19
    4618:	a80b883a 	mov	r5,r21
    461c:	00074bc0 	call	74bc <__adddf3>
    4620:	880d883a 	mov	r6,r17
    4624:	900f883a 	mov	r7,r18
    4628:	b009883a 	mov	r4,r22
    462c:	800b883a 	mov	r5,r16
    4630:	1039883a 	mov	fp,r2
    4634:	182f883a 	mov	r23,r3
    4638:	00090bc0 	call	90bc <__subdf3>
    463c:	100d883a 	mov	r6,r2
    4640:	180f883a 	mov	r7,r3
    4644:	e009883a 	mov	r4,fp
    4648:	b80b883a 	mov	r5,r23
    464c:	00087400 	call	8740 <__gedf2>
    4650:	00819716 	blt	zero,r2,4cb0 <__ieee754_pow+0x10c0>
    4654:	8009d53a 	srai	r4,r16,20
    4658:	2101ffcc 	andi	r4,r4,2047
    465c:	00c00434 	movhi	r3,16
    4660:	213f0084 	addi	r4,r4,-1022
    4664:	1909d83a 	sra	r4,r3,r4
    4668:	00800434 	movhi	r2,16
    466c:	10bfffc4 	addi	r2,r2,-1
    4670:	2407883a 	add	r3,r4,r16
    4674:	1809d53a 	srai	r4,r3,20
    4678:	18ac703a 	and	r22,r3,r2
    467c:	b5800434 	orhi	r22,r22,16
    4680:	2101ffcc 	andi	r4,r4,2047
    4684:	213f0044 	addi	r4,r4,-1023
    4688:	110fd83a 	sra	r7,r2,r4
    468c:	00800504 	movi	r2,20
    4690:	1109c83a 	sub	r4,r2,r4
    4694:	b105d83a 	sra	r2,r22,r4
    4698:	01ce303a 	nor	r7,zero,r7
    469c:	38ce703a 	and	r7,r7,r3
    46a0:	d8800215 	stw	r2,8(sp)
    46a4:	8000020e 	bge	r16,zero,46b0 <__ieee754_pow+0xac0>
    46a8:	0085c83a 	sub	r2,zero,r2
    46ac:	d8800215 	stw	r2,8(sp)
    46b0:	000d883a 	mov	r6,zero
    46b4:	8809883a 	mov	r4,r17
    46b8:	900b883a 	mov	r5,r18
    46bc:	00090bc0 	call	90bc <__subdf3>
    46c0:	100d883a 	mov	r6,r2
    46c4:	180f883a 	mov	r7,r3
    46c8:	9809883a 	mov	r4,r19
    46cc:	a80b883a 	mov	r5,r21
    46d0:	182f883a 	mov	r23,r3
    46d4:	d8800015 	stw	r2,0(sp)
    46d8:	00074bc0 	call	74bc <__adddf3>
    46dc:	d8800217 	ldw	r2,8(sp)
    46e0:	dac00017 	ldw	r11,0(sp)
    46e4:	1839883a 	mov	fp,r3
    46e8:	1004953a 	slli	r2,r2,20
    46ec:	d8800115 	stw	r2,4(sp)
    46f0:	01cff9b4 	movhi	r7,16358
    46f4:	e00b883a 	mov	r5,fp
    46f8:	000d883a 	mov	r6,zero
    46fc:	39cb90c4 	addi	r7,r7,11843
    4700:	0009883a 	mov	r4,zero
    4704:	dac00015 	stw	r11,0(sp)
    4708:	00089100 	call	8910 <__muldf3>
    470c:	dac00017 	ldw	r11,0(sp)
    4710:	b80f883a 	mov	r7,r23
    4714:	e00b883a 	mov	r5,fp
    4718:	580d883a 	mov	r6,r11
    471c:	0009883a 	mov	r4,zero
    4720:	182f883a 	mov	r23,r3
    4724:	102d883a 	mov	r22,r2
    4728:	00090bc0 	call	90bc <__subdf3>
    472c:	9809883a 	mov	r4,r19
    4730:	a80b883a 	mov	r5,r21
    4734:	100d883a 	mov	r6,r2
    4738:	180f883a 	mov	r7,r3
    473c:	00090bc0 	call	90bc <__subdf3>
    4740:	01bfbeb4 	movhi	r6,65274
    4744:	01cff9b4 	movhi	r7,16358
    4748:	318e7bc4 	addi	r6,r6,14831
    474c:	39cb9084 	addi	r7,r7,11842
    4750:	1009883a 	mov	r4,r2
    4754:	180b883a 	mov	r5,r3
    4758:	00089100 	call	8910 <__muldf3>
    475c:	01832a34 	movhi	r6,3240
    4760:	01ef8834 	movhi	r7,48672
    4764:	e00b883a 	mov	r5,fp
    4768:	319b0e44 	addi	r6,r6,27705
    476c:	39d71844 	addi	r7,r7,23649
    4770:	0009883a 	mov	r4,zero
    4774:	1023883a 	mov	r17,r2
    4778:	1821883a 	mov	r16,r3
    477c:	00089100 	call	8910 <__muldf3>
    4780:	8809883a 	mov	r4,r17
    4784:	800b883a 	mov	r5,r16
    4788:	100d883a 	mov	r6,r2
    478c:	180f883a 	mov	r7,r3
    4790:	00074bc0 	call	74bc <__adddf3>
    4794:	b80b883a 	mov	r5,r23
    4798:	100d883a 	mov	r6,r2
    479c:	180f883a 	mov	r7,r3
    47a0:	b009883a 	mov	r4,r22
    47a4:	1027883a 	mov	r19,r2
    47a8:	1825883a 	mov	r18,r3
    47ac:	00074bc0 	call	74bc <__adddf3>
    47b0:	b80f883a 	mov	r7,r23
    47b4:	b00d883a 	mov	r6,r22
    47b8:	1009883a 	mov	r4,r2
    47bc:	180b883a 	mov	r5,r3
    47c0:	1023883a 	mov	r17,r2
    47c4:	1821883a 	mov	r16,r3
    47c8:	00090bc0 	call	90bc <__subdf3>
    47cc:	9809883a 	mov	r4,r19
    47d0:	900b883a 	mov	r5,r18
    47d4:	100d883a 	mov	r6,r2
    47d8:	180f883a 	mov	r7,r3
    47dc:	00090bc0 	call	90bc <__subdf3>
    47e0:	880d883a 	mov	r6,r17
    47e4:	800f883a 	mov	r7,r16
    47e8:	8809883a 	mov	r4,r17
    47ec:	800b883a 	mov	r5,r16
    47f0:	1039883a 	mov	fp,r2
    47f4:	182b883a 	mov	r21,r3
    47f8:	00089100 	call	8910 <__muldf3>
    47fc:	019caff4 	movhi	r6,29375
    4800:	01cf99b4 	movhi	r7,15974
    4804:	31a93404 	addi	r6,r6,-23344
    4808:	39cdda44 	addi	r7,r7,14185
    480c:	1009883a 	mov	r4,r2
    4810:	180b883a 	mov	r5,r3
    4814:	1027883a 	mov	r19,r2
    4818:	1825883a 	mov	r18,r3
    481c:	00089100 	call	8910 <__muldf3>
    4820:	01b174b4 	movhi	r6,50642
    4824:	01cfaf34 	movhi	r7,16060
    4828:	319afc44 	addi	r6,r6,27633
    482c:	39ef5044 	addi	r7,r7,-17087
    4830:	1009883a 	mov	r4,r2
    4834:	180b883a 	mov	r5,r3
    4838:	00090bc0 	call	90bc <__subdf3>
    483c:	980d883a 	mov	r6,r19
    4840:	900f883a 	mov	r7,r18
    4844:	1009883a 	mov	r4,r2
    4848:	180b883a 	mov	r5,r3
    484c:	00089100 	call	8910 <__muldf3>
    4850:	01abc9b4 	movhi	r6,44838
    4854:	01cfc474 	movhi	r7,16145
    4858:	31b78b04 	addi	r6,r6,-8660
    485c:	39d59a84 	addi	r7,r7,22122
    4860:	1009883a 	mov	r4,r2
    4864:	180b883a 	mov	r5,r3
    4868:	00074bc0 	call	74bc <__adddf3>
    486c:	980d883a 	mov	r6,r19
    4870:	900f883a 	mov	r7,r18
    4874:	1009883a 	mov	r4,r2
    4878:	180b883a 	mov	r5,r3
    487c:	00089100 	call	8910 <__muldf3>
    4880:	0185aff4 	movhi	r6,5823
    4884:	01cfd9f4 	movhi	r7,16231
    4888:	31af64c4 	addi	r6,r6,-17005
    488c:	39f05b04 	addi	r7,r7,-16020
    4890:	1009883a 	mov	r4,r2
    4894:	180b883a 	mov	r5,r3
    4898:	00090bc0 	call	90bc <__subdf3>
    489c:	980d883a 	mov	r6,r19
    48a0:	900f883a 	mov	r7,r18
    48a4:	1009883a 	mov	r4,r2
    48a8:	180b883a 	mov	r5,r3
    48ac:	00089100 	call	8910 <__muldf3>
    48b0:	01955574 	movhi	r6,21845
    48b4:	01cff174 	movhi	r7,16325
    48b8:	31954f84 	addi	r6,r6,21822
    48bc:	39d55544 	addi	r7,r7,21845
    48c0:	1009883a 	mov	r4,r2
    48c4:	180b883a 	mov	r5,r3
    48c8:	00074bc0 	call	74bc <__adddf3>
    48cc:	980d883a 	mov	r6,r19
    48d0:	900f883a 	mov	r7,r18
    48d4:	1009883a 	mov	r4,r2
    48d8:	180b883a 	mov	r5,r3
    48dc:	00089100 	call	8910 <__muldf3>
    48e0:	100d883a 	mov	r6,r2
    48e4:	180f883a 	mov	r7,r3
    48e8:	8809883a 	mov	r4,r17
    48ec:	800b883a 	mov	r5,r16
    48f0:	00090bc0 	call	90bc <__subdf3>
    48f4:	100d883a 	mov	r6,r2
    48f8:	180f883a 	mov	r7,r3
    48fc:	8809883a 	mov	r4,r17
    4900:	800b883a 	mov	r5,r16
    4904:	1027883a 	mov	r19,r2
    4908:	1825883a 	mov	r18,r3
    490c:	00089100 	call	8910 <__muldf3>
    4910:	9809883a 	mov	r4,r19
    4914:	900b883a 	mov	r5,r18
    4918:	000d883a 	mov	r6,zero
    491c:	01d00034 	movhi	r7,16384
    4920:	182f883a 	mov	r23,r3
    4924:	d8800015 	stw	r2,0(sp)
    4928:	00090bc0 	call	90bc <__subdf3>
    492c:	da400017 	ldw	r9,0(sp)
    4930:	100d883a 	mov	r6,r2
    4934:	180f883a 	mov	r7,r3
    4938:	4809883a 	mov	r4,r9
    493c:	b80b883a 	mov	r5,r23
    4940:	0007dac0 	call	7dac <__divdf3>
    4944:	e00d883a 	mov	r6,fp
    4948:	a80f883a 	mov	r7,r21
    494c:	8809883a 	mov	r4,r17
    4950:	800b883a 	mov	r5,r16
    4954:	1027883a 	mov	r19,r2
    4958:	1825883a 	mov	r18,r3
    495c:	00089100 	call	8910 <__muldf3>
    4960:	e00d883a 	mov	r6,fp
    4964:	a80f883a 	mov	r7,r21
    4968:	1009883a 	mov	r4,r2
    496c:	180b883a 	mov	r5,r3
    4970:	00074bc0 	call	74bc <__adddf3>
    4974:	100d883a 	mov	r6,r2
    4978:	180f883a 	mov	r7,r3
    497c:	9809883a 	mov	r4,r19
    4980:	900b883a 	mov	r5,r18
    4984:	00090bc0 	call	90bc <__subdf3>
    4988:	880d883a 	mov	r6,r17
    498c:	800f883a 	mov	r7,r16
    4990:	1009883a 	mov	r4,r2
    4994:	180b883a 	mov	r5,r3
    4998:	00090bc0 	call	90bc <__subdf3>
    499c:	100d883a 	mov	r6,r2
    49a0:	0009883a 	mov	r4,zero
    49a4:	014ffc34 	movhi	r5,16368
    49a8:	180f883a 	mov	r7,r3
    49ac:	00090bc0 	call	90bc <__subdf3>
    49b0:	180b883a 	mov	r5,r3
    49b4:	d8c00117 	ldw	r3,4(sp)
    49b8:	1009883a 	mov	r4,r2
    49bc:	194d883a 	add	r6,r3,r5
    49c0:	3007d53a 	srai	r3,r6,20
    49c4:	00c0b50e 	bge	zero,r3,4c9c <__ieee754_pow+0x10ac>
    49c8:	300b883a 	mov	r5,r6
    49cc:	000d883a 	mov	r6,zero
    49d0:	a00f883a 	mov	r7,r20
    49d4:	00089100 	call	8910 <__muldf3>
    49d8:	102d883a 	mov	r22,r2
    49dc:	003ca306 	br	3c6c <__ieee754_pow+0x7c>
    49e0:	88009016 	blt	r17,zero,4c24 <__ieee754_pow+0x1034>
    49e4:	202d883a 	mov	r22,r4
    49e8:	a807883a 	mov	r3,r21
    49ec:	003c9f06 	br	3c6c <__ieee754_pow+0x7c>
    49f0:	01200034 	movhi	r4,32768
    49f4:	213fffc4 	addi	r4,r4,-1
    49f8:	00902474 	movhi	r2,16529
    49fc:	1908703a 	and	r4,r3,r4
    4a00:	10b2ffc4 	addi	r2,r2,-13313
    4a04:	1100750e 	bge	r2,r4,4bdc <__ieee754_pow+0xfec>
    4a08:	008fdbf4 	movhi	r2,16239
    4a0c:	108d0004 	addi	r2,r2,13312
    4a10:	1885883a 	add	r2,r3,r2
    4a14:	1584b03a 	or	r2,r2,r22
    4a18:	10000b1e 	bne	r2,zero,4a48 <__ieee754_pow+0xe58>
    4a1c:	880d883a 	mov	r6,r17
    4a20:	900f883a 	mov	r7,r18
    4a24:	b009883a 	mov	r4,r22
    4a28:	180b883a 	mov	r5,r3
    4a2c:	00090bc0 	call	90bc <__subdf3>
    4a30:	980d883a 	mov	r6,r19
    4a34:	a80f883a 	mov	r7,r21
    4a38:	1009883a 	mov	r4,r2
    4a3c:	180b883a 	mov	r5,r3
    4a40:	00087400 	call	8740 <__gedf2>
    4a44:	103f0316 	blt	r2,zero,4654 <__ieee754_pow+0xa64>
    4a48:	0009883a 	mov	r4,zero
    4a4c:	000d883a 	mov	r6,zero
    4a50:	000f883a 	mov	r7,zero
    4a54:	a00b883a 	mov	r5,r20
    4a58:	00088280 	call	8828 <__ledf2>
    4a5c:	1008803a 	cmplt	r4,r2,zero
    4a60:	003cb906 	br	3d48 <__ieee754_pow+0x158>
    4a64:	050ffc34 	movhi	r20,16368
    4a68:	003eb806 	br	454c <__ieee754_pow+0x95c>
    4a6c:	000b883a 	mov	r5,zero
    4a70:	003d3906 	br	3f58 <__ieee754_pow+0x368>
    4a74:	008ffc34 	movhi	r2,16368
    4a78:	10bfff84 	addi	r2,r2,-2
    4a7c:	14fcb00e 	bge	r2,r19,3d40 <__ieee754_pow+0x150>
    4a80:	008ffc34 	movhi	r2,16368
    4a84:	14fcf616 	blt	r2,r19,3e60 <__ieee754_pow+0x270>
    4a88:	000d883a 	mov	r6,zero
    4a8c:	01cffc34 	movhi	r7,16368
    4a90:	180b883a 	mov	r5,r3
    4a94:	00090bc0 	call	90bc <__subdf3>
    4a98:	01cffdf4 	movhi	r7,16375
    4a9c:	01980034 	movhi	r6,24576
    4aa0:	39c551c4 	addi	r7,r7,5447
    4aa4:	1009883a 	mov	r4,r2
    4aa8:	180b883a 	mov	r5,r3
    4aac:	102b883a 	mov	r21,r2
    4ab0:	1827883a 	mov	r19,r3
    4ab4:	00089100 	call	8910 <__muldf3>
    4ab8:	01be17b4 	movhi	r6,63582
    4abc:	01cf9574 	movhi	r7,15957
    4ac0:	a809883a 	mov	r4,r21
    4ac4:	980b883a 	mov	r5,r19
    4ac8:	31b7d104 	addi	r6,r6,-8380
    4acc:	39eb82c4 	addi	r7,r7,-20981
    4ad0:	1039883a 	mov	fp,r2
    4ad4:	182f883a 	mov	r23,r3
    4ad8:	00089100 	call	8910 <__muldf3>
    4adc:	a809883a 	mov	r4,r21
    4ae0:	980b883a 	mov	r5,r19
    4ae4:	000d883a 	mov	r6,zero
    4ae8:	01cff434 	movhi	r7,16336
    4aec:	182d883a 	mov	r22,r3
    4af0:	d8800215 	stw	r2,8(sp)
    4af4:	00089100 	call	8910 <__muldf3>
    4af8:	01155574 	movhi	r4,21845
    4afc:	014ff574 	movhi	r5,16341
    4b00:	100d883a 	mov	r6,r2
    4b04:	180f883a 	mov	r7,r3
    4b08:	21155544 	addi	r4,r4,21845
    4b0c:	29555544 	addi	r5,r5,21845
    4b10:	00090bc0 	call	90bc <__subdf3>
    4b14:	a80d883a 	mov	r6,r21
    4b18:	980f883a 	mov	r7,r19
    4b1c:	1009883a 	mov	r4,r2
    4b20:	180b883a 	mov	r5,r3
    4b24:	00089100 	call	8910 <__muldf3>
    4b28:	100d883a 	mov	r6,r2
    4b2c:	180f883a 	mov	r7,r3
    4b30:	0009883a 	mov	r4,zero
    4b34:	014ff834 	movhi	r5,16352
    4b38:	00090bc0 	call	90bc <__subdf3>
    4b3c:	a80d883a 	mov	r6,r21
    4b40:	980f883a 	mov	r7,r19
    4b44:	a809883a 	mov	r4,r21
    4b48:	980b883a 	mov	r5,r19
    4b4c:	d8800115 	stw	r2,4(sp)
    4b50:	d8c00015 	stw	r3,0(sp)
    4b54:	00089100 	call	8910 <__muldf3>
    4b58:	da800117 	ldw	r10,4(sp)
    4b5c:	da400017 	ldw	r9,0(sp)
    4b60:	100d883a 	mov	r6,r2
    4b64:	5009883a 	mov	r4,r10
    4b68:	480b883a 	mov	r5,r9
    4b6c:	180f883a 	mov	r7,r3
    4b70:	00089100 	call	8910 <__muldf3>
    4b74:	01994b34 	movhi	r6,25900
    4b78:	01cffdf4 	movhi	r7,16375
    4b7c:	31a0bf84 	addi	r6,r6,-32002
    4b80:	39c551c4 	addi	r7,r7,5447
    4b84:	1009883a 	mov	r4,r2
    4b88:	180b883a 	mov	r5,r3
    4b8c:	00089100 	call	8910 <__muldf3>
    4b90:	da000217 	ldw	r8,8(sp)
    4b94:	b00b883a 	mov	r5,r22
    4b98:	100d883a 	mov	r6,r2
    4b9c:	4009883a 	mov	r4,r8
    4ba0:	180f883a 	mov	r7,r3
    4ba4:	00090bc0 	call	90bc <__subdf3>
    4ba8:	100d883a 	mov	r6,r2
    4bac:	180f883a 	mov	r7,r3
    4bb0:	e009883a 	mov	r4,fp
    4bb4:	b80b883a 	mov	r5,r23
    4bb8:	102d883a 	mov	r22,r2
    4bbc:	182b883a 	mov	r21,r3
    4bc0:	00074bc0 	call	74bc <__adddf3>
    4bc4:	1827883a 	mov	r19,r3
    4bc8:	e00d883a 	mov	r6,fp
    4bcc:	b80f883a 	mov	r7,r23
    4bd0:	0009883a 	mov	r4,zero
    4bd4:	180b883a 	mov	r5,r3
    4bd8:	003e5006 	br	451c <__ieee754_pow+0x92c>
    4bdc:	008ff834 	movhi	r2,16352
    4be0:	11004316 	blt	r2,r4,4cf0 <__ieee754_pow+0x1100>
    4be4:	d8000115 	stw	zero,4(sp)
    4be8:	d8000215 	stw	zero,8(sp)
    4bec:	003ec006 	br	46f0 <__ieee754_pow+0xb00>
    4bf0:	0007883a 	mov	r3,zero
    4bf4:	003c1d06 	br	3c6c <__ieee754_pow+0x7c>
    4bf8:	883ffd0e 	bge	r17,zero,4bf0 <__ieee754_pow+0x1000>
    4bfc:	88e0003c 	xorhi	r3,r17,32768
    4c00:	003c1a06 	br	3c6c <__ieee754_pow+0x7c>
    4c04:	803c781e 	bne	r16,zero,3de8 <__ieee754_pow+0x1f8>
    4c08:	00c00504 	movi	r3,20
    4c0c:	1885c83a 	sub	r2,r3,r2
    4c10:	3087d83a 	sra	r3,r6,r2
    4c14:	1884983a 	sll	r2,r3,r2
    4c18:	11803126 	beq	r2,r6,4ce0 <__ieee754_pow+0x10f0>
    4c1c:	0025883a 	mov	r18,zero
    4c20:	003c5d06 	br	3d98 <__ieee754_pow+0x1a8>
    4c24:	200d883a 	mov	r6,r4
    4c28:	a80f883a 	mov	r7,r21
    4c2c:	0009883a 	mov	r4,zero
    4c30:	014ffc34 	movhi	r5,16368
    4c34:	0007dac0 	call	7dac <__divdf3>
    4c38:	102d883a 	mov	r22,r2
    4c3c:	003c0b06 	br	3c6c <__ieee754_pow+0x7c>
    4c40:	200d883a 	mov	r6,r4
    4c44:	a80f883a 	mov	r7,r21
    4c48:	a80b883a 	mov	r5,r21
    4c4c:	00089100 	call	8910 <__muldf3>
    4c50:	102d883a 	mov	r22,r2
    4c54:	003c0506 	br	3c6c <__ieee754_pow+0x7c>
    4c58:	94800058 	cmpnei	r18,r18,1
    4c5c:	903c031e 	bne	r18,zero,3c6c <__ieee754_pow+0x7c>
    4c60:	18e0003c 	xorhi	r3,r3,32768
    4c64:	003c0106 	br	3c6c <__ieee754_pow+0x7c>
    4c68:	008ff8f4 	movhi	r2,16355
    4c6c:	10ae00c4 	addi	r2,r2,-18429
    4c70:	00d0f434 	movhi	r3,17360
    4c74:	03cf9374 	movhi	r15,15949
    4c78:	01100034 	movhi	r4,16384
    4c7c:	d8800115 	stw	r2,4(sp)
    4c80:	18b40184 	addi	r2,r3,-12282
    4c84:	d9000015 	stw	r4,0(sp)
    4c88:	d8800a15 	stw	r2,40(sp)
    4c8c:	7bff7ac4 	addi	r15,r15,-533
    4c90:	05c00134 	movhi	r23,4
    4c94:	034ffe34 	movhi	r13,16376
    4c98:	003cc506 	br	3fb0 <__ieee754_pow+0x3c0>
    4c9c:	d9800217 	ldw	r6,8(sp)
    4ca0:	0006dd80 	call	6dd8 <scalbn>
    4ca4:	1009883a 	mov	r4,r2
    4ca8:	180b883a 	mov	r5,r3
    4cac:	003f4706 	br	49cc <__ieee754_pow+0xddc>
    4cb0:	0009883a 	mov	r4,zero
    4cb4:	000d883a 	mov	r6,zero
    4cb8:	000f883a 	mov	r7,zero
    4cbc:	a00b883a 	mov	r5,r20
    4cc0:	00088280 	call	8828 <__ledf2>
    4cc4:	1008803a 	cmplt	r4,r2,zero
    4cc8:	003c6706 	br	3e68 <__ieee754_pow+0x278>
    4ccc:	18c0004c 	andi	r3,r3,1
    4cd0:	04800084 	movi	r18,2
    4cd4:	90e5c83a 	sub	r18,r18,r3
    4cd8:	803c2f26 	beq	r16,zero,3d98 <__ieee754_pow+0x1a8>
    4cdc:	003c0906 	br	3d04 <__ieee754_pow+0x114>
    4ce0:	18c0004c 	andi	r3,r3,1
    4ce4:	04800084 	movi	r18,2
    4ce8:	90e5c83a 	sub	r18,r18,r3
    4cec:	003c2a06 	br	3d98 <__ieee754_pow+0x1a8>
    4cf0:	2009d53a 	srai	r4,r4,20
    4cf4:	003e5906 	br	465c <__ieee754_pow+0xa6c>

00004cf8 <__ieee754_rem_pio2>:
    4cf8:	deffea04 	addi	sp,sp,-88
    4cfc:	dc000c15 	stw	r16,48(sp)
    4d00:	04200034 	movhi	r16,32768
    4d04:	843fffc4 	addi	r16,r16,-1
    4d08:	008ffa74 	movhi	r2,16361
    4d0c:	dcc00f15 	stw	r19,60(sp)
    4d10:	dc800e15 	stw	r18,56(sp)
    4d14:	dc400d15 	stw	r17,52(sp)
    4d18:	dfc01515 	stw	ra,84(sp)
    4d1c:	df001415 	stw	fp,80(sp)
    4d20:	ddc01315 	stw	r23,76(sp)
    4d24:	dd801215 	stw	r22,72(sp)
    4d28:	dd401115 	stw	r21,68(sp)
    4d2c:	dd001015 	stw	r20,64(sp)
    4d30:	2c20703a 	and	r16,r5,r16
    4d34:	10887ec4 	addi	r2,r2,8699
    4d38:	2825883a 	mov	r18,r5
    4d3c:	2027883a 	mov	r19,r4
    4d40:	3023883a 	mov	r17,r6
    4d44:	14008b0e 	bge	r2,r16,4f74 <__ieee754_rem_pio2+0x27c>
    4d48:	009000f4 	movhi	r2,16387
    4d4c:	10b65ec4 	addi	r2,r2,-9861
    4d50:	14002f16 	blt	r2,r16,4e10 <__ieee754_rem_pio2+0x118>
    4d54:	01cffe74 	movhi	r7,16377
    4d58:	01951034 	movhi	r6,21568
    4d5c:	39c87ec4 	addi	r7,r7,8699
    4d60:	01417e0e 	bge	zero,r5,535c <__ieee754_rem_pio2+0x664>
    4d64:	00090bc0 	call	90bc <__subdf3>
    4d68:	018ffe74 	movhi	r6,16377
    4d6c:	31887ec4 	addi	r6,r6,8699
    4d70:	1009883a 	mov	r4,r2
    4d74:	180b883a 	mov	r5,r3
    4d78:	8180cb26 	beq	r16,r6,50a8 <__ieee754_rem_pio2+0x3b0>
    4d7c:	018698b4 	movhi	r6,6754
    4d80:	01cf7474 	movhi	r7,15825
    4d84:	3198cc44 	addi	r6,r6,25393
    4d88:	39ed1844 	addi	r7,r7,-19359
    4d8c:	d8800315 	stw	r2,12(sp)
    4d90:	d8c00215 	stw	r3,8(sp)
    4d94:	00090bc0 	call	90bc <__subdf3>
    4d98:	d9000317 	ldw	r4,12(sp)
    4d9c:	d9400217 	ldw	r5,8(sp)
    4da0:	100d883a 	mov	r6,r2
    4da4:	180f883a 	mov	r7,r3
    4da8:	88800015 	stw	r2,0(r17)
    4dac:	88c00115 	stw	r3,4(r17)
    4db0:	00090bc0 	call	90bc <__subdf3>
    4db4:	018698b4 	movhi	r6,6754
    4db8:	01cf7474 	movhi	r7,15825
    4dbc:	3198cc44 	addi	r6,r6,25393
    4dc0:	39ed1844 	addi	r7,r7,-19359
    4dc4:	1009883a 	mov	r4,r2
    4dc8:	180b883a 	mov	r5,r3
    4dcc:	00090bc0 	call	90bc <__subdf3>
    4dd0:	88800215 	stw	r2,8(r17)
    4dd4:	88c00315 	stw	r3,12(r17)
    4dd8:	05000044 	movi	r20,1
    4ddc:	a005883a 	mov	r2,r20
    4de0:	dfc01517 	ldw	ra,84(sp)
    4de4:	df001417 	ldw	fp,80(sp)
    4de8:	ddc01317 	ldw	r23,76(sp)
    4dec:	dd801217 	ldw	r22,72(sp)
    4df0:	dd401117 	ldw	r21,68(sp)
    4df4:	dd001017 	ldw	r20,64(sp)
    4df8:	dcc00f17 	ldw	r19,60(sp)
    4dfc:	dc800e17 	ldw	r18,56(sp)
    4e00:	dc400d17 	ldw	r17,52(sp)
    4e04:	dc000c17 	ldw	r16,48(sp)
    4e08:	dec01604 	addi	sp,sp,88
    4e0c:	f800283a 	ret
    4e10:	00904e74 	movhi	r2,16697
    4e14:	10887ec4 	addi	r2,r2,8699
    4e18:	14005c16 	blt	r2,r16,4f8c <__ieee754_rem_pio2+0x294>
    4e1c:	019b72b4 	movhi	r6,28106
    4e20:	01cff934 	movhi	r7,16356
    4e24:	31b220c4 	addi	r6,r6,-14205
    4e28:	39d7cc04 	addi	r7,r7,24368
    4e2c:	800b883a 	mov	r5,r16
    4e30:	00089100 	call	8910 <__muldf3>
    4e34:	000d883a 	mov	r6,zero
    4e38:	01cff834 	movhi	r7,16352
    4e3c:	1009883a 	mov	r4,r2
    4e40:	180b883a 	mov	r5,r3
    4e44:	00074bc0 	call	74bc <__adddf3>
    4e48:	180b883a 	mov	r5,r3
    4e4c:	1009883a 	mov	r4,r2
    4e50:	0009a1c0 	call	9a1c <__fixdfsi>
    4e54:	1009883a 	mov	r4,r2
    4e58:	1029883a 	mov	r20,r2
    4e5c:	0009a9c0 	call	9a9c <__floatsidf>
    4e60:	01cffe74 	movhi	r7,16377
    4e64:	01951034 	movhi	r6,21568
    4e68:	39c87ec4 	addi	r7,r7,8699
    4e6c:	1009883a 	mov	r4,r2
    4e70:	180b883a 	mov	r5,r3
    4e74:	102d883a 	mov	r22,r2
    4e78:	182b883a 	mov	r21,r3
    4e7c:	00089100 	call	8910 <__muldf3>
    4e80:	9809883a 	mov	r4,r19
    4e84:	100d883a 	mov	r6,r2
    4e88:	180f883a 	mov	r7,r3
    4e8c:	800b883a 	mov	r5,r16
    4e90:	00090bc0 	call	90bc <__subdf3>
    4e94:	018698b4 	movhi	r6,6754
    4e98:	01cf7474 	movhi	r7,15825
    4e9c:	3198cc44 	addi	r6,r6,25393
    4ea0:	39ed1844 	addi	r7,r7,-19359
    4ea4:	b009883a 	mov	r4,r22
    4ea8:	a80b883a 	mov	r5,r21
    4eac:	1039883a 	mov	fp,r2
    4eb0:	d8c00215 	stw	r3,8(sp)
    4eb4:	00089100 	call	8910 <__muldf3>
    4eb8:	db000217 	ldw	r12,8(sp)
    4ebc:	e009883a 	mov	r4,fp
    4ec0:	100d883a 	mov	r6,r2
    4ec4:	600b883a 	mov	r5,r12
    4ec8:	180f883a 	mov	r7,r3
    4ecc:	db000315 	stw	r12,12(sp)
    4ed0:	102f883a 	mov	r23,r2
    4ed4:	1827883a 	mov	r19,r3
    4ed8:	df000415 	stw	fp,16(sp)
    4edc:	00090bc0 	call	90bc <__subdf3>
    4ee0:	a1000808 	cmpgei	r4,r20,32
    4ee4:	db000317 	ldw	r12,12(sp)
    4ee8:	1017883a 	mov	r11,r2
    4eec:	1815883a 	mov	r10,r3
    4ef0:	e01b883a 	mov	r13,fp
    4ef4:	2000851e 	bne	r4,zero,510c <__ieee754_rem_pio2+0x414>
    4ef8:	a00a90ba 	slli	r5,r20,2
    4efc:	01000074 	movhi	r4,1
    4f00:	2909883a 	add	r4,r5,r4
    4f04:	211de817 	ldw	r4,30624(r4)
    4f08:	24008026 	beq	r4,r16,510c <__ieee754_rem_pio2+0x414>
    4f0c:	88800015 	stw	r2,0(r17)
    4f10:	88c00115 	stw	r3,4(r17)
    4f14:	580d883a 	mov	r6,r11
    4f18:	500f883a 	mov	r7,r10
    4f1c:	6809883a 	mov	r4,r13
    4f20:	600b883a 	mov	r5,r12
    4f24:	dac00315 	stw	r11,12(sp)
    4f28:	da800215 	stw	r10,8(sp)
    4f2c:	00090bc0 	call	90bc <__subdf3>
    4f30:	b80d883a 	mov	r6,r23
    4f34:	980f883a 	mov	r7,r19
    4f38:	1009883a 	mov	r4,r2
    4f3c:	180b883a 	mov	r5,r3
    4f40:	00090bc0 	call	90bc <__subdf3>
    4f44:	88800215 	stw	r2,8(r17)
    4f48:	88c00315 	stw	r3,12(r17)
    4f4c:	903fa30e 	bge	r18,zero,4ddc <__ieee754_rem_pio2+0xe4>
    4f50:	da800217 	ldw	r10,8(sp)
    4f54:	dac00317 	ldw	r11,12(sp)
    4f58:	18e0003c 	xorhi	r3,r3,32768
    4f5c:	52a0003c 	xorhi	r10,r10,32768
    4f60:	8ac00015 	stw	r11,0(r17)
    4f64:	8a800115 	stw	r10,4(r17)
    4f68:	88c00315 	stw	r3,12(r17)
    4f6c:	0529c83a 	sub	r20,zero,r20
    4f70:	003f9a06 	br	4ddc <__ieee754_rem_pio2+0xe4>
    4f74:	89000015 	stw	r4,0(r17)
    4f78:	89400115 	stw	r5,4(r17)
    4f7c:	30000215 	stw	zero,8(r6)
    4f80:	30000315 	stw	zero,12(r6)
    4f84:	0029883a 	mov	r20,zero
    4f88:	003f9406 	br	4ddc <__ieee754_rem_pio2+0xe4>
    4f8c:	009ffc34 	movhi	r2,32752
    4f90:	8080670e 	bge	r16,r2,5130 <__ieee754_rem_pio2+0x438>
    4f94:	8029d53a 	srai	r20,r16,20
    4f98:	a53efa84 	addi	r20,r20,-1046
    4f9c:	a00a953a 	slli	r5,r20,20
    4fa0:	8161c83a 	sub	r16,r16,r5
    4fa4:	800b883a 	mov	r5,r16
    4fa8:	0009a1c0 	call	9a1c <__fixdfsi>
    4fac:	1009883a 	mov	r4,r2
    4fb0:	0009a9c0 	call	9a9c <__floatsidf>
    4fb4:	9809883a 	mov	r4,r19
    4fb8:	800b883a 	mov	r5,r16
    4fbc:	100d883a 	mov	r6,r2
    4fc0:	180f883a 	mov	r7,r3
    4fc4:	d8800615 	stw	r2,24(sp)
    4fc8:	d8c00715 	stw	r3,28(sp)
    4fcc:	00090bc0 	call	90bc <__subdf3>
    4fd0:	000d883a 	mov	r6,zero
    4fd4:	01d05c34 	movhi	r7,16752
    4fd8:	1009883a 	mov	r4,r2
    4fdc:	180b883a 	mov	r5,r3
    4fe0:	00089100 	call	8910 <__muldf3>
    4fe4:	180b883a 	mov	r5,r3
    4fe8:	1009883a 	mov	r4,r2
    4fec:	1821883a 	mov	r16,r3
    4ff0:	1027883a 	mov	r19,r2
    4ff4:	0009a1c0 	call	9a1c <__fixdfsi>
    4ff8:	1009883a 	mov	r4,r2
    4ffc:	102b883a 	mov	r21,r2
    5000:	0009a9c0 	call	9a9c <__floatsidf>
    5004:	100d883a 	mov	r6,r2
    5008:	180f883a 	mov	r7,r3
    500c:	9809883a 	mov	r4,r19
    5010:	800b883a 	mov	r5,r16
    5014:	d8800815 	stw	r2,32(sp)
    5018:	d8c00915 	stw	r3,36(sp)
    501c:	00090bc0 	call	90bc <__subdf3>
    5020:	000d883a 	mov	r6,zero
    5024:	01d05c34 	movhi	r7,16752
    5028:	1009883a 	mov	r4,r2
    502c:	180b883a 	mov	r5,r3
    5030:	00089100 	call	8910 <__muldf3>
    5034:	1009883a 	mov	r4,r2
    5038:	180b883a 	mov	r5,r3
    503c:	000d883a 	mov	r6,zero
    5040:	000f883a 	mov	r7,zero
    5044:	d8800a15 	stw	r2,40(sp)
    5048:	d8c00b15 	stw	r3,44(sp)
    504c:	00086c00 	call	86c0 <__eqdf2>
    5050:	1000c01e 	bne	r2,zero,5354 <__ieee754_rem_pio2+0x65c>
    5054:	a800bd1e 	bne	r21,zero,534c <__ieee754_rem_pio2+0x654>
    5058:	01c00044 	movi	r7,1
    505c:	00800074 	movhi	r2,1
    5060:	109e0904 	addi	r2,r2,30756
    5064:	d8800115 	stw	r2,4(sp)
    5068:	00800084 	movi	r2,2
    506c:	a00d883a 	mov	r6,r20
    5070:	d8800015 	stw	r2,0(sp)
    5074:	880b883a 	mov	r5,r17
    5078:	d9000604 	addi	r4,sp,24
    507c:	0005b5c0 	call	5b5c <__kernel_rem_pio2>
    5080:	1029883a 	mov	r20,r2
    5084:	903f550e 	bge	r18,zero,4ddc <__ieee754_rem_pio2+0xe4>
    5088:	88c00117 	ldw	r3,4(r17)
    508c:	88800317 	ldw	r2,12(r17)
    5090:	0529c83a 	sub	r20,zero,r20
    5094:	18e0003c 	xorhi	r3,r3,32768
    5098:	10a0003c 	xorhi	r2,r2,32768
    509c:	88c00115 	stw	r3,4(r17)
    50a0:	88800315 	stw	r2,12(r17)
    50a4:	003f4d06 	br	4ddc <__ieee754_rem_pio2+0xe4>
    50a8:	01cf7474 	movhi	r7,15825
    50ac:	01869834 	movhi	r6,6752
    50b0:	39ed1844 	addi	r7,r7,-19359
    50b4:	00090bc0 	call	90bc <__subdf3>
    50b8:	018b80f4 	movhi	r6,11779
    50bc:	01cee8f4 	movhi	r7,15267
    50c0:	319c1cc4 	addi	r6,r6,28787
    50c4:	39c66284 	addi	r7,r7,6538
    50c8:	1009883a 	mov	r4,r2
    50cc:	180b883a 	mov	r5,r3
    50d0:	1025883a 	mov	r18,r2
    50d4:	1821883a 	mov	r16,r3
    50d8:	00090bc0 	call	90bc <__subdf3>
    50dc:	100d883a 	mov	r6,r2
    50e0:	180f883a 	mov	r7,r3
    50e4:	9009883a 	mov	r4,r18
    50e8:	800b883a 	mov	r5,r16
    50ec:	88800015 	stw	r2,0(r17)
    50f0:	88c00115 	stw	r3,4(r17)
    50f4:	00090bc0 	call	90bc <__subdf3>
    50f8:	018b80f4 	movhi	r6,11779
    50fc:	01cee8f4 	movhi	r7,15267
    5100:	319c1cc4 	addi	r6,r6,28787
    5104:	39c66284 	addi	r7,r7,6538
    5108:	003f2e06 	br	4dc4 <__ieee754_rem_pio2+0xcc>
    510c:	1812d53a 	srli	r9,r3,20
    5110:	8021d53a 	srai	r16,r16,20
    5114:	4a41ffcc 	andi	r9,r9,2047
    5118:	8253c83a 	sub	r9,r16,r9
    511c:	4a400448 	cmpgei	r9,r9,17
    5120:	48000c1e 	bne	r9,zero,5154 <__ieee754_rem_pio2+0x45c>
    5124:	88800015 	stw	r2,0(r17)
    5128:	88c00115 	stw	r3,4(r17)
    512c:	003f7906 	br	4f14 <__ieee754_rem_pio2+0x21c>
    5130:	200d883a 	mov	r6,r4
    5134:	280f883a 	mov	r7,r5
    5138:	00090bc0 	call	90bc <__subdf3>
    513c:	88800215 	stw	r2,8(r17)
    5140:	88c00315 	stw	r3,12(r17)
    5144:	88800015 	stw	r2,0(r17)
    5148:	88c00115 	stw	r3,4(r17)
    514c:	0029883a 	mov	r20,zero
    5150:	003f2206 	br	4ddc <__ieee754_rem_pio2+0xe4>
    5154:	01cf7474 	movhi	r7,15825
    5158:	01869834 	movhi	r6,6752
    515c:	39ed1844 	addi	r7,r7,-19359
    5160:	b009883a 	mov	r4,r22
    5164:	a80b883a 	mov	r5,r21
    5168:	00089100 	call	8910 <__muldf3>
    516c:	d9400217 	ldw	r5,8(sp)
    5170:	100d883a 	mov	r6,r2
    5174:	180f883a 	mov	r7,r3
    5178:	e009883a 	mov	r4,fp
    517c:	102f883a 	mov	r23,r2
    5180:	1827883a 	mov	r19,r3
    5184:	00090bc0 	call	90bc <__subdf3>
    5188:	d9400217 	ldw	r5,8(sp)
    518c:	100d883a 	mov	r6,r2
    5190:	180f883a 	mov	r7,r3
    5194:	e009883a 	mov	r4,fp
    5198:	d8800315 	stw	r2,12(sp)
    519c:	d8c00415 	stw	r3,16(sp)
    51a0:	00090bc0 	call	90bc <__subdf3>
    51a4:	b80d883a 	mov	r6,r23
    51a8:	980f883a 	mov	r7,r19
    51ac:	1009883a 	mov	r4,r2
    51b0:	180b883a 	mov	r5,r3
    51b4:	00090bc0 	call	90bc <__subdf3>
    51b8:	018b80f4 	movhi	r6,11779
    51bc:	01cee8f4 	movhi	r7,15267
    51c0:	319c1cc4 	addi	r6,r6,28787
    51c4:	39c66284 	addi	r7,r7,6538
    51c8:	b009883a 	mov	r4,r22
    51cc:	a80b883a 	mov	r5,r21
    51d0:	102f883a 	mov	r23,r2
    51d4:	1827883a 	mov	r19,r3
    51d8:	00089100 	call	8910 <__muldf3>
    51dc:	b80d883a 	mov	r6,r23
    51e0:	980f883a 	mov	r7,r19
    51e4:	1009883a 	mov	r4,r2
    51e8:	180b883a 	mov	r5,r3
    51ec:	00090bc0 	call	90bc <__subdf3>
    51f0:	da400417 	ldw	r9,16(sp)
    51f4:	db800317 	ldw	r14,12(sp)
    51f8:	100d883a 	mov	r6,r2
    51fc:	480b883a 	mov	r5,r9
    5200:	7009883a 	mov	r4,r14
    5204:	180f883a 	mov	r7,r3
    5208:	da400215 	stw	r9,8(sp)
    520c:	102f883a 	mov	r23,r2
    5210:	1827883a 	mov	r19,r3
    5214:	00090bc0 	call	90bc <__subdf3>
    5218:	1815883a 	mov	r10,r3
    521c:	1806d53a 	srli	r3,r3,20
    5220:	da400217 	ldw	r9,8(sp)
    5224:	db800317 	ldw	r14,12(sp)
    5228:	18c1ffcc 	andi	r3,r3,2047
    522c:	80e1c83a 	sub	r16,r16,r3
    5230:	84000c88 	cmpgei	r16,r16,50
    5234:	1017883a 	mov	r11,r2
    5238:	80003f26 	beq	r16,zero,5338 <__ieee754_rem_pio2+0x640>
    523c:	01cee8f4 	movhi	r7,15267
    5240:	018b8034 	movhi	r6,11776
    5244:	39c66284 	addi	r7,r7,6538
    5248:	b009883a 	mov	r4,r22
    524c:	a80b883a 	mov	r5,r21
    5250:	da400315 	stw	r9,12(sp)
    5254:	db800215 	stw	r14,8(sp)
    5258:	00089100 	call	8910 <__muldf3>
    525c:	db800217 	ldw	r14,8(sp)
    5260:	da400317 	ldw	r9,12(sp)
    5264:	100d883a 	mov	r6,r2
    5268:	7009883a 	mov	r4,r14
    526c:	480b883a 	mov	r5,r9
    5270:	180f883a 	mov	r7,r3
    5274:	1027883a 	mov	r19,r2
    5278:	1821883a 	mov	r16,r3
    527c:	db800515 	stw	r14,20(sp)
    5280:	da400415 	stw	r9,16(sp)
    5284:	00090bc0 	call	90bc <__subdf3>
    5288:	db800517 	ldw	r14,20(sp)
    528c:	da400417 	ldw	r9,16(sp)
    5290:	100d883a 	mov	r6,r2
    5294:	7009883a 	mov	r4,r14
    5298:	480b883a 	mov	r5,r9
    529c:	180f883a 	mov	r7,r3
    52a0:	d8800315 	stw	r2,12(sp)
    52a4:	d8c00215 	stw	r3,8(sp)
    52a8:	00090bc0 	call	90bc <__subdf3>
    52ac:	980d883a 	mov	r6,r19
    52b0:	800f883a 	mov	r7,r16
    52b4:	1009883a 	mov	r4,r2
    52b8:	180b883a 	mov	r5,r3
    52bc:	00090bc0 	call	90bc <__subdf3>
    52c0:	01894834 	movhi	r6,9504
    52c4:	01ce5f34 	movhi	r7,14716
    52c8:	31927044 	addi	r6,r6,18881
    52cc:	39e0e684 	addi	r7,r7,-31846
    52d0:	b009883a 	mov	r4,r22
    52d4:	a80b883a 	mov	r5,r21
    52d8:	1027883a 	mov	r19,r2
    52dc:	1821883a 	mov	r16,r3
    52e0:	00089100 	call	8910 <__muldf3>
    52e4:	980d883a 	mov	r6,r19
    52e8:	800f883a 	mov	r7,r16
    52ec:	1009883a 	mov	r4,r2
    52f0:	180b883a 	mov	r5,r3
    52f4:	00090bc0 	call	90bc <__subdf3>
    52f8:	db400317 	ldw	r13,12(sp)
    52fc:	db000217 	ldw	r12,8(sp)
    5300:	100d883a 	mov	r6,r2
    5304:	6809883a 	mov	r4,r13
    5308:	600b883a 	mov	r5,r12
    530c:	180f883a 	mov	r7,r3
    5310:	102f883a 	mov	r23,r2
    5314:	1827883a 	mov	r19,r3
    5318:	00090bc0 	call	90bc <__subdf3>
    531c:	db400317 	ldw	r13,12(sp)
    5320:	db000217 	ldw	r12,8(sp)
    5324:	1017883a 	mov	r11,r2
    5328:	1815883a 	mov	r10,r3
    532c:	88800015 	stw	r2,0(r17)
    5330:	88c00115 	stw	r3,4(r17)
    5334:	003ef706 	br	4f14 <__ieee754_rem_pio2+0x21c>
    5338:	88800015 	stw	r2,0(r17)
    533c:	8a800115 	stw	r10,4(r17)
    5340:	701b883a 	mov	r13,r14
    5344:	4819883a 	mov	r12,r9
    5348:	003ef206 	br	4f14 <__ieee754_rem_pio2+0x21c>
    534c:	01c00084 	movi	r7,2
    5350:	003f4206 	br	505c <__ieee754_rem_pio2+0x364>
    5354:	01c000c4 	movi	r7,3
    5358:	003f4006 	br	505c <__ieee754_rem_pio2+0x364>
    535c:	00074bc0 	call	74bc <__adddf3>
    5360:	010ffe74 	movhi	r4,16377
    5364:	21087ec4 	addi	r4,r4,8699
    5368:	1027883a 	mov	r19,r2
    536c:	1825883a 	mov	r18,r3
    5370:	81001926 	beq	r16,r4,53d8 <__ieee754_rem_pio2+0x6e0>
    5374:	018698b4 	movhi	r6,6754
    5378:	01cf7474 	movhi	r7,15825
    537c:	3198cc44 	addi	r6,r6,25393
    5380:	39ed1844 	addi	r7,r7,-19359
    5384:	1009883a 	mov	r4,r2
    5388:	180b883a 	mov	r5,r3
    538c:	00074bc0 	call	74bc <__adddf3>
    5390:	100d883a 	mov	r6,r2
    5394:	180f883a 	mov	r7,r3
    5398:	9809883a 	mov	r4,r19
    539c:	900b883a 	mov	r5,r18
    53a0:	88800015 	stw	r2,0(r17)
    53a4:	88c00115 	stw	r3,4(r17)
    53a8:	00090bc0 	call	90bc <__subdf3>
    53ac:	018698b4 	movhi	r6,6754
    53b0:	01cf7474 	movhi	r7,15825
    53b4:	3198cc44 	addi	r6,r6,25393
    53b8:	39ed1844 	addi	r7,r7,-19359
    53bc:	1009883a 	mov	r4,r2
    53c0:	180b883a 	mov	r5,r3
    53c4:	00074bc0 	call	74bc <__adddf3>
    53c8:	88800215 	stw	r2,8(r17)
    53cc:	88c00315 	stw	r3,12(r17)
    53d0:	053fffc4 	movi	r20,-1
    53d4:	003e8106 	br	4ddc <__ieee754_rem_pio2+0xe4>
    53d8:	01cf7474 	movhi	r7,15825
    53dc:	01869834 	movhi	r6,6752
    53e0:	39ed1844 	addi	r7,r7,-19359
    53e4:	1009883a 	mov	r4,r2
    53e8:	180b883a 	mov	r5,r3
    53ec:	00074bc0 	call	74bc <__adddf3>
    53f0:	018b80f4 	movhi	r6,11779
    53f4:	01cee8f4 	movhi	r7,15267
    53f8:	319c1cc4 	addi	r6,r6,28787
    53fc:	39c66284 	addi	r7,r7,6538
    5400:	1009883a 	mov	r4,r2
    5404:	180b883a 	mov	r5,r3
    5408:	1025883a 	mov	r18,r2
    540c:	1821883a 	mov	r16,r3
    5410:	00074bc0 	call	74bc <__adddf3>
    5414:	100d883a 	mov	r6,r2
    5418:	180f883a 	mov	r7,r3
    541c:	9009883a 	mov	r4,r18
    5420:	800b883a 	mov	r5,r16
    5424:	88800015 	stw	r2,0(r17)
    5428:	88c00115 	stw	r3,4(r17)
    542c:	00090bc0 	call	90bc <__subdf3>
    5430:	018b80f4 	movhi	r6,11779
    5434:	01cee8f4 	movhi	r7,15267
    5438:	319c1cc4 	addi	r6,r6,28787
    543c:	39c66284 	addi	r7,r7,6538
    5440:	003fde06 	br	53bc <__ieee754_rem_pio2+0x6c4>

00005444 <__ieee754_sqrt>:
    5444:	defffd04 	addi	sp,sp,-12
    5448:	dc400115 	stw	r17,4(sp)
    544c:	dc000015 	stw	r16,0(sp)
    5450:	dfc00215 	stw	ra,8(sp)
    5454:	28dffc2c 	andhi	r3,r5,32752
    5458:	009ffc34 	movhi	r2,32752
    545c:	2821883a 	mov	r16,r5
    5460:	2023883a 	mov	r17,r4
    5464:	18807726 	beq	r3,r2,5644 <__ieee754_sqrt+0x200>
    5468:	2011883a 	mov	r8,r4
    546c:	01403a0e 	bge	zero,r5,5558 <__ieee754_sqrt+0x114>
    5470:	2807d53a 	srai	r3,r5,20
    5474:	18004626 	beq	r3,zero,5590 <__ieee754_sqrt+0x14c>
    5478:	00800434 	movhi	r2,16
    547c:	1aff0044 	addi	r11,r3,-1023
    5480:	10bfffc4 	addi	r2,r2,-1
    5484:	8084703a 	and	r2,r16,r2
    5488:	5900004c 	andi	r4,r11,1
    548c:	10c00434 	orhi	r3,r2,16
    5490:	20000426 	beq	r4,zero,54a4 <__ieee754_sqrt+0x60>
    5494:	4004d7fa 	srli	r2,r8,31
    5498:	18c7883a 	add	r3,r3,r3
    549c:	4211883a 	add	r8,r8,r8
    54a0:	10c7883a 	add	r3,r2,r3
    54a4:	4004d7fa 	srli	r2,r8,31
    54a8:	5817d07a 	srai	r11,r11,1
    54ac:	18c7883a 	add	r3,r3,r3
    54b0:	1887883a 	add	r3,r3,r2
    54b4:	4209883a 	add	r4,r8,r8
    54b8:	01c00584 	movi	r7,22
    54bc:	0019883a 	mov	r12,zero
    54c0:	000b883a 	mov	r5,zero
    54c4:	00800834 	movhi	r2,32
    54c8:	288d883a 	add	r6,r5,r2
    54cc:	2010d7fa 	srli	r8,r4,31
    54d0:	39ffffc4 	addi	r7,r7,-1
    54d4:	19800316 	blt	r3,r6,54e4 <__ieee754_sqrt+0xa0>
    54d8:	1987c83a 	sub	r3,r3,r6
    54dc:	308b883a 	add	r5,r6,r2
    54e0:	6099883a 	add	r12,r12,r2
    54e4:	18c7883a 	add	r3,r3,r3
    54e8:	1004d07a 	srli	r2,r2,1
    54ec:	40c7883a 	add	r3,r8,r3
    54f0:	2109883a 	add	r4,r4,r4
    54f4:	383ff41e 	bne	r7,zero,54c8 <__ieee754_sqrt+0x84>
    54f8:	0013883a 	mov	r9,zero
    54fc:	00800804 	movi	r2,32
    5500:	01a00034 	movhi	r6,32768
    5504:	00000806 	br	5528 <__ieee754_sqrt+0xe4>
    5508:	19403326 	beq	r3,r5,55d8 <__ieee754_sqrt+0x194>
    550c:	2010d7fa 	srli	r8,r4,31
    5510:	18c7883a 	add	r3,r3,r3
    5514:	10bfffc4 	addi	r2,r2,-1
    5518:	300cd07a 	srli	r6,r6,1
    551c:	1a07883a 	add	r3,r3,r8
    5520:	2109883a 	add	r4,r4,r4
    5524:	10003226 	beq	r2,zero,55f0 <__ieee754_sqrt+0x1ac>
    5528:	31d1883a 	add	r8,r6,r7
    552c:	28fff60e 	bge	r5,r3,5508 <__ieee754_sqrt+0xc4>
    5530:	418f883a 	add	r7,r8,r6
    5534:	40002516 	blt	r8,zero,55cc <__ieee754_sqrt+0x188>
    5538:	2815883a 	mov	r10,r5
    553c:	1947c83a 	sub	r3,r3,r5
    5540:	2200012e 	bgeu	r4,r8,5548 <__ieee754_sqrt+0x104>
    5544:	18ffffc4 	addi	r3,r3,-1
    5548:	2209c83a 	sub	r4,r4,r8
    554c:	4993883a 	add	r9,r9,r6
    5550:	500b883a 	mov	r5,r10
    5554:	003fed06 	br	550c <__ieee754_sqrt+0xc8>
    5558:	00a00034 	movhi	r2,32768
    555c:	10bfffc4 	addi	r2,r2,-1
    5560:	2884703a 	and	r2,r5,r2
    5564:	1104b03a 	or	r2,r2,r4
    5568:	10004826 	beq	r2,zero,568c <__ieee754_sqrt+0x248>
    556c:	28003e1e 	bne	r5,zero,5668 <__ieee754_sqrt+0x224>
    5570:	0007883a 	mov	r3,zero
    5574:	4004d2fa 	srli	r2,r8,11
    5578:	18fffac4 	addi	r3,r3,-21
    557c:	4010957a 	slli	r8,r8,21
    5580:	1021883a 	mov	r16,r2
    5584:	103ffb26 	beq	r2,zero,5574 <__ieee754_sqrt+0x130>
    5588:	1100042c 	andhi	r4,r2,16
    558c:	2000441e 	bne	r4,zero,56a0 <__ieee754_sqrt+0x25c>
    5590:	0005883a 	mov	r2,zero
    5594:	8421883a 	add	r16,r16,r16
    5598:	8140042c 	andhi	r5,r16,16
    559c:	1009883a 	mov	r4,r2
    55a0:	10800044 	addi	r2,r2,1
    55a4:	283ffb26 	beq	r5,zero,5594 <__ieee754_sqrt+0x150>
    55a8:	01800804 	movi	r6,32
    55ac:	400b883a 	mov	r5,r8
    55b0:	308dc83a 	sub	r6,r6,r2
    55b4:	4090983a 	sll	r8,r8,r2
    55b8:	8005883a 	mov	r2,r16
    55bc:	298ed83a 	srl	r7,r5,r6
    55c0:	1907c83a 	sub	r3,r3,r4
    55c4:	38a0b03a 	or	r16,r7,r2
    55c8:	003fab06 	br	5478 <__ieee754_sqrt+0x34>
    55cc:	383fda16 	blt	r7,zero,5538 <__ieee754_sqrt+0xf4>
    55d0:	2a800044 	addi	r10,r5,1
    55d4:	003fd906 	br	553c <__ieee754_sqrt+0xf8>
    55d8:	223fcc36 	bltu	r4,r8,550c <__ieee754_sqrt+0xc8>
    55dc:	418f883a 	add	r7,r8,r6
    55e0:	403ffa16 	blt	r8,zero,55cc <__ieee754_sqrt+0x188>
    55e4:	1815883a 	mov	r10,r3
    55e8:	0007883a 	mov	r3,zero
    55ec:	003fd606 	br	5548 <__ieee754_sqrt+0x104>
    55f0:	1906b03a 	or	r3,r3,r4
    55f4:	18000e1e 	bne	r3,zero,5630 <__ieee754_sqrt+0x1ec>
    55f8:	4804d07a 	srli	r2,r9,1
    55fc:	6007d07a 	srai	r3,r12,1
    5600:	01cff834 	movhi	r7,16352
    5604:	6300004c 	andi	r12,r12,1
    5608:	19cf883a 	add	r7,r3,r7
    560c:	60000126 	beq	r12,zero,5614 <__ieee754_sqrt+0x1d0>
    5610:	10a00034 	orhi	r2,r2,32768
    5614:	5806953a 	slli	r3,r11,20
    5618:	19c7883a 	add	r3,r3,r7
    561c:	dfc00217 	ldw	ra,8(sp)
    5620:	dc400117 	ldw	r17,4(sp)
    5624:	dc000017 	ldw	r16,0(sp)
    5628:	dec00304 	addi	sp,sp,12
    562c:	f800283a 	ret
    5630:	48ffffd8 	cmpnei	r3,r9,-1
    5634:	18001826 	beq	r3,zero,5698 <__ieee754_sqrt+0x254>
    5638:	48800044 	addi	r2,r9,1
    563c:	1004d07a 	srli	r2,r2,1
    5640:	003fee06 	br	55fc <__ieee754_sqrt+0x1b8>
    5644:	200d883a 	mov	r6,r4
    5648:	280f883a 	mov	r7,r5
    564c:	00089100 	call	8910 <__muldf3>
    5650:	880d883a 	mov	r6,r17
    5654:	800f883a 	mov	r7,r16
    5658:	1009883a 	mov	r4,r2
    565c:	180b883a 	mov	r5,r3
    5660:	00074bc0 	call	74bc <__adddf3>
    5664:	003fed06 	br	561c <__ieee754_sqrt+0x1d8>
    5668:	200d883a 	mov	r6,r4
    566c:	280f883a 	mov	r7,r5
    5670:	00090bc0 	call	90bc <__subdf3>
    5674:	100d883a 	mov	r6,r2
    5678:	180f883a 	mov	r7,r3
    567c:	1009883a 	mov	r4,r2
    5680:	180b883a 	mov	r5,r3
    5684:	0007dac0 	call	7dac <__divdf3>
    5688:	003fe406 	br	561c <__ieee754_sqrt+0x1d8>
    568c:	2005883a 	mov	r2,r4
    5690:	2807883a 	mov	r3,r5
    5694:	003fe106 	br	561c <__ieee754_sqrt+0x1d8>
    5698:	63000044 	addi	r12,r12,1
    569c:	003fd706 	br	55fc <__ieee754_sqrt+0x1b8>
    56a0:	400b883a 	mov	r5,r8
    56a4:	01800804 	movi	r6,32
    56a8:	013fffc4 	movi	r4,-1
    56ac:	003fc306 	br	55bc <__ieee754_sqrt+0x178>

000056b0 <__kernel_cos>:
    56b0:	defff204 	addi	sp,sp,-56
    56b4:	dc000415 	stw	r16,16(sp)
    56b8:	04200034 	movhi	r16,32768
    56bc:	843fffc4 	addi	r16,r16,-1
    56c0:	df000c15 	stw	fp,48(sp)
    56c4:	ddc00b15 	stw	r23,44(sp)
    56c8:	dd800a15 	stw	r22,40(sp)
    56cc:	dd400915 	stw	r21,36(sp)
    56d0:	dc800615 	stw	r18,24(sp)
    56d4:	dfc00d15 	stw	ra,52(sp)
    56d8:	dd000815 	stw	r20,32(sp)
    56dc:	dcc00715 	stw	r19,28(sp)
    56e0:	dc400515 	stw	r17,20(sp)
    56e4:	2c24703a 	and	r18,r5,r16
    56e8:	008f9034 	movhi	r2,15936
    56ec:	2839883a 	mov	fp,r5
    56f0:	202b883a 	mov	r21,r4
    56f4:	302d883a 	mov	r22,r6
    56f8:	382f883a 	mov	r23,r7
    56fc:	9080750e 	bge	r18,r2,58d4 <__kernel_cos+0x224>
    5700:	0009a1c0 	call	9a1c <__fixdfsi>
    5704:	10011226 	beq	r2,zero,5b50 <__kernel_cos+0x4a0>
    5708:	a80d883a 	mov	r6,r21
    570c:	e00f883a 	mov	r7,fp
    5710:	a809883a 	mov	r4,r21
    5714:	e00b883a 	mov	r5,fp
    5718:	00089100 	call	8910 <__muldf3>
    571c:	01afa234 	movhi	r6,48776
    5720:	01ef6a74 	movhi	r7,48553
    5724:	318e3504 	addi	r6,r6,14548
    5728:	39feba44 	addi	r7,r7,-1303
    572c:	1009883a 	mov	r4,r2
    5730:	180b883a 	mov	r5,r3
    5734:	1023883a 	mov	r17,r2
    5738:	1821883a 	mov	r16,r3
    573c:	00089100 	call	8910 <__muldf3>
    5740:	01af6d74 	movhi	r6,48565
    5744:	01cf88b4 	movhi	r7,15906
    5748:	31ac7104 	addi	r6,r6,-20028
    574c:	39fba784 	addi	r7,r7,-4450
    5750:	1009883a 	mov	r4,r2
    5754:	180b883a 	mov	r5,r3
    5758:	00074bc0 	call	74bc <__adddf3>
    575c:	880d883a 	mov	r6,r17
    5760:	800f883a 	mov	r7,r16
    5764:	1009883a 	mov	r4,r2
    5768:	180b883a 	mov	r5,r3
    576c:	00089100 	call	8910 <__muldf3>
    5770:	01a02734 	movhi	r6,32924
    5774:	01cfa4b4 	movhi	r7,16018
    5778:	3194ab44 	addi	r6,r6,21165
    577c:	39df93c4 	addi	r7,r7,32335
    5780:	1009883a 	mov	r4,r2
    5784:	180b883a 	mov	r5,r3
    5788:	00090bc0 	call	90bc <__subdf3>
    578c:	880d883a 	mov	r6,r17
    5790:	800f883a 	mov	r7,r16
    5794:	1009883a 	mov	r4,r2
    5798:	180b883a 	mov	r5,r3
    579c:	00089100 	call	8910 <__muldf3>
    57a0:	018672f4 	movhi	r6,6603
    57a4:	01cfbeb4 	movhi	r7,16122
    57a8:	31856404 	addi	r6,r6,5520
    57ac:	39c06804 	addi	r7,r7,416
    57b0:	1009883a 	mov	r4,r2
    57b4:	180b883a 	mov	r5,r3
    57b8:	00074bc0 	call	74bc <__adddf3>
    57bc:	880d883a 	mov	r6,r17
    57c0:	800f883a 	mov	r7,r16
    57c4:	1009883a 	mov	r4,r2
    57c8:	180b883a 	mov	r5,r3
    57cc:	00089100 	call	8910 <__muldf3>
    57d0:	0185b074 	movhi	r6,5825
    57d4:	01cfd5f4 	movhi	r7,16215
    57d8:	31945dc4 	addi	r6,r6,20855
    57dc:	39f05b04 	addi	r7,r7,-16020
    57e0:	1009883a 	mov	r4,r2
    57e4:	180b883a 	mov	r5,r3
    57e8:	00090bc0 	call	90bc <__subdf3>
    57ec:	880d883a 	mov	r6,r17
    57f0:	800f883a 	mov	r7,r16
    57f4:	1009883a 	mov	r4,r2
    57f8:	180b883a 	mov	r5,r3
    57fc:	00089100 	call	8910 <__muldf3>
    5800:	01955574 	movhi	r6,21845
    5804:	01cfe974 	movhi	r7,16293
    5808:	31955304 	addi	r6,r6,21836
    580c:	39d55544 	addi	r7,r7,21845
    5810:	1009883a 	mov	r4,r2
    5814:	180b883a 	mov	r5,r3
    5818:	00074bc0 	call	74bc <__adddf3>
    581c:	880d883a 	mov	r6,r17
    5820:	800f883a 	mov	r7,r16
    5824:	1009883a 	mov	r4,r2
    5828:	180b883a 	mov	r5,r3
    582c:	00089100 	call	8910 <__muldf3>
    5830:	1017883a 	mov	r11,r2
    5834:	1815883a 	mov	r10,r3
    5838:	8809883a 	mov	r4,r17
    583c:	800b883a 	mov	r5,r16
    5840:	000d883a 	mov	r6,zero
    5844:	01cff834 	movhi	r7,16352
    5848:	da800115 	stw	r10,4(sp)
    584c:	dac00015 	stw	r11,0(sp)
    5850:	00089100 	call	8910 <__muldf3>
    5854:	dac00017 	ldw	r11,0(sp)
    5858:	da800117 	ldw	r10,4(sp)
    585c:	8809883a 	mov	r4,r17
    5860:	580d883a 	mov	r6,r11
    5864:	500f883a 	mov	r7,r10
    5868:	800b883a 	mov	r5,r16
    586c:	1023883a 	mov	r17,r2
    5870:	1821883a 	mov	r16,r3
    5874:	00089100 	call	8910 <__muldf3>
    5878:	b00d883a 	mov	r6,r22
    587c:	b80f883a 	mov	r7,r23
    5880:	a809883a 	mov	r4,r21
    5884:	e00b883a 	mov	r5,fp
    5888:	1027883a 	mov	r19,r2
    588c:	1825883a 	mov	r18,r3
    5890:	00089100 	call	8910 <__muldf3>
    5894:	9809883a 	mov	r4,r19
    5898:	900b883a 	mov	r5,r18
    589c:	100d883a 	mov	r6,r2
    58a0:	180f883a 	mov	r7,r3
    58a4:	00090bc0 	call	90bc <__subdf3>
    58a8:	8809883a 	mov	r4,r17
    58ac:	800b883a 	mov	r5,r16
    58b0:	100d883a 	mov	r6,r2
    58b4:	180f883a 	mov	r7,r3
    58b8:	00090bc0 	call	90bc <__subdf3>
    58bc:	100d883a 	mov	r6,r2
    58c0:	180f883a 	mov	r7,r3
    58c4:	0009883a 	mov	r4,zero
    58c8:	014ffc34 	movhi	r5,16368
    58cc:	00090bc0 	call	90bc <__subdf3>
    58d0:	00008f06 	br	5b10 <__kernel_cos+0x460>
    58d4:	200d883a 	mov	r6,r4
    58d8:	280f883a 	mov	r7,r5
    58dc:	00089100 	call	8910 <__muldf3>
    58e0:	01afa234 	movhi	r6,48776
    58e4:	01ef6a74 	movhi	r7,48553
    58e8:	318e3504 	addi	r6,r6,14548
    58ec:	39feba44 	addi	r7,r7,-1303
    58f0:	1009883a 	mov	r4,r2
    58f4:	180b883a 	mov	r5,r3
    58f8:	1029883a 	mov	r20,r2
    58fc:	1827883a 	mov	r19,r3
    5900:	00089100 	call	8910 <__muldf3>
    5904:	01af6d74 	movhi	r6,48565
    5908:	01cf88b4 	movhi	r7,15906
    590c:	31ac7104 	addi	r6,r6,-20028
    5910:	39fba784 	addi	r7,r7,-4450
    5914:	1009883a 	mov	r4,r2
    5918:	180b883a 	mov	r5,r3
    591c:	00074bc0 	call	74bc <__adddf3>
    5920:	a00d883a 	mov	r6,r20
    5924:	980f883a 	mov	r7,r19
    5928:	1009883a 	mov	r4,r2
    592c:	180b883a 	mov	r5,r3
    5930:	00089100 	call	8910 <__muldf3>
    5934:	01a02734 	movhi	r6,32924
    5938:	01cfa4b4 	movhi	r7,16018
    593c:	3194ab44 	addi	r6,r6,21165
    5940:	39df93c4 	addi	r7,r7,32335
    5944:	1009883a 	mov	r4,r2
    5948:	180b883a 	mov	r5,r3
    594c:	00090bc0 	call	90bc <__subdf3>
    5950:	a00d883a 	mov	r6,r20
    5954:	980f883a 	mov	r7,r19
    5958:	1009883a 	mov	r4,r2
    595c:	180b883a 	mov	r5,r3
    5960:	00089100 	call	8910 <__muldf3>
    5964:	018672f4 	movhi	r6,6603
    5968:	01cfbeb4 	movhi	r7,16122
    596c:	31856404 	addi	r6,r6,5520
    5970:	39c06804 	addi	r7,r7,416
    5974:	1009883a 	mov	r4,r2
    5978:	180b883a 	mov	r5,r3
    597c:	00074bc0 	call	74bc <__adddf3>
    5980:	a00d883a 	mov	r6,r20
    5984:	980f883a 	mov	r7,r19
    5988:	1009883a 	mov	r4,r2
    598c:	180b883a 	mov	r5,r3
    5990:	00089100 	call	8910 <__muldf3>
    5994:	0185b074 	movhi	r6,5825
    5998:	01cfd5f4 	movhi	r7,16215
    599c:	31945dc4 	addi	r6,r6,20855
    59a0:	39f05b04 	addi	r7,r7,-16020
    59a4:	1009883a 	mov	r4,r2
    59a8:	180b883a 	mov	r5,r3
    59ac:	00090bc0 	call	90bc <__subdf3>
    59b0:	a00d883a 	mov	r6,r20
    59b4:	980f883a 	mov	r7,r19
    59b8:	1009883a 	mov	r4,r2
    59bc:	180b883a 	mov	r5,r3
    59c0:	00089100 	call	8910 <__muldf3>
    59c4:	01955574 	movhi	r6,21845
    59c8:	01cfe974 	movhi	r7,16293
    59cc:	31955304 	addi	r6,r6,21836
    59d0:	39d55544 	addi	r7,r7,21845
    59d4:	1009883a 	mov	r4,r2
    59d8:	180b883a 	mov	r5,r3
    59dc:	00074bc0 	call	74bc <__adddf3>
    59e0:	1009883a 	mov	r4,r2
    59e4:	a00d883a 	mov	r6,r20
    59e8:	980f883a 	mov	r7,r19
    59ec:	180b883a 	mov	r5,r3
    59f0:	00089100 	call	8910 <__muldf3>
    59f4:	010ff4f4 	movhi	r4,16339
    59f8:	210ccc84 	addi	r4,r4,13106
    59fc:	1013883a 	mov	r9,r2
    5a00:	1811883a 	mov	r8,r3
    5a04:	a023883a 	mov	r17,r20
    5a08:	9821883a 	mov	r16,r19
    5a0c:	1017883a 	mov	r11,r2
    5a10:	1815883a 	mov	r10,r3
    5a14:	24bf880e 	bge	r4,r18,5838 <__kernel_cos+0x188>
    5a18:	008ffa74 	movhi	r2,16361
    5a1c:	14804816 	blt	r2,r18,5b40 <__kernel_cos+0x490>
    5a20:	043ff834 	movhi	r16,65504
    5a24:	9421883a 	add	r16,r18,r16
    5a28:	000d883a 	mov	r6,zero
    5a2c:	800f883a 	mov	r7,r16
    5a30:	0009883a 	mov	r4,zero
    5a34:	014ffc34 	movhi	r5,16368
    5a38:	da400015 	stw	r9,0(sp)
    5a3c:	d8c00115 	stw	r3,4(sp)
    5a40:	00090bc0 	call	90bc <__subdf3>
    5a44:	da400017 	ldw	r9,0(sp)
    5a48:	da000117 	ldw	r8,4(sp)
    5a4c:	1017883a 	mov	r11,r2
    5a50:	1815883a 	mov	r10,r3
    5a54:	980b883a 	mov	r5,r19
    5a58:	000d883a 	mov	r6,zero
    5a5c:	01cff834 	movhi	r7,16352
    5a60:	a009883a 	mov	r4,r20
    5a64:	da800115 	stw	r10,4(sp)
    5a68:	dac00015 	stw	r11,0(sp)
    5a6c:	da000315 	stw	r8,12(sp)
    5a70:	da400215 	stw	r9,8(sp)
    5a74:	00089100 	call	8910 <__muldf3>
    5a78:	800f883a 	mov	r7,r16
    5a7c:	000d883a 	mov	r6,zero
    5a80:	1009883a 	mov	r4,r2
    5a84:	180b883a 	mov	r5,r3
    5a88:	00090bc0 	call	90bc <__subdf3>
    5a8c:	da400217 	ldw	r9,8(sp)
    5a90:	da000317 	ldw	r8,12(sp)
    5a94:	980b883a 	mov	r5,r19
    5a98:	480d883a 	mov	r6,r9
    5a9c:	400f883a 	mov	r7,r8
    5aa0:	a009883a 	mov	r4,r20
    5aa4:	1023883a 	mov	r17,r2
    5aa8:	1821883a 	mov	r16,r3
    5aac:	00089100 	call	8910 <__muldf3>
    5ab0:	b00d883a 	mov	r6,r22
    5ab4:	b80f883a 	mov	r7,r23
    5ab8:	a809883a 	mov	r4,r21
    5abc:	e00b883a 	mov	r5,fp
    5ac0:	1027883a 	mov	r19,r2
    5ac4:	1825883a 	mov	r18,r3
    5ac8:	00089100 	call	8910 <__muldf3>
    5acc:	100d883a 	mov	r6,r2
    5ad0:	180f883a 	mov	r7,r3
    5ad4:	9809883a 	mov	r4,r19
    5ad8:	900b883a 	mov	r5,r18
    5adc:	00090bc0 	call	90bc <__subdf3>
    5ae0:	100d883a 	mov	r6,r2
    5ae4:	180f883a 	mov	r7,r3
    5ae8:	8809883a 	mov	r4,r17
    5aec:	800b883a 	mov	r5,r16
    5af0:	00090bc0 	call	90bc <__subdf3>
    5af4:	dac00017 	ldw	r11,0(sp)
    5af8:	da800117 	ldw	r10,4(sp)
    5afc:	100d883a 	mov	r6,r2
    5b00:	180f883a 	mov	r7,r3
    5b04:	5809883a 	mov	r4,r11
    5b08:	500b883a 	mov	r5,r10
    5b0c:	00090bc0 	call	90bc <__subdf3>
    5b10:	dfc00d17 	ldw	ra,52(sp)
    5b14:	df000c17 	ldw	fp,48(sp)
    5b18:	ddc00b17 	ldw	r23,44(sp)
    5b1c:	dd800a17 	ldw	r22,40(sp)
    5b20:	dd400917 	ldw	r21,36(sp)
    5b24:	dd000817 	ldw	r20,32(sp)
    5b28:	dcc00717 	ldw	r19,28(sp)
    5b2c:	dc800617 	ldw	r18,24(sp)
    5b30:	dc400517 	ldw	r17,20(sp)
    5b34:	dc000417 	ldw	r16,16(sp)
    5b38:	dec00e04 	addi	sp,sp,56
    5b3c:	f800283a 	ret
    5b40:	0017883a 	mov	r11,zero
    5b44:	028ff9f4 	movhi	r10,16359
    5b48:	040ff4b4 	movhi	r16,16338
    5b4c:	003fc106 	br	5a54 <__kernel_cos+0x3a4>
    5b50:	0005883a 	mov	r2,zero
    5b54:	00cffc34 	movhi	r3,16368
    5b58:	003fed06 	br	5b10 <__kernel_cos+0x460>

00005b5c <__kernel_rem_pio2>:
    5b5c:	deff5f04 	addi	sp,sp,-644
    5b60:	d880a117 	ldw	r2,644(sp)
    5b64:	dc009715 	stw	r16,604(sp)
    5b68:	dfc0a015 	stw	ra,640(sp)
    5b6c:	100690ba 	slli	r3,r2,2
    5b70:	00800074 	movhi	r2,1
    5b74:	df009f15 	stw	fp,636(sp)
    5b78:	1885883a 	add	r2,r3,r2
    5b7c:	109e5b17 	ldw	r2,31084(r2)
    5b80:	ddc09e15 	stw	r23,632(sp)
    5b84:	dd809d15 	stw	r22,628(sp)
    5b88:	d8800515 	stw	r2,20(sp)
    5b8c:	38bfffc4 	addi	r2,r7,-1
    5b90:	dd409c15 	stw	r21,624(sp)
    5b94:	dd009b15 	stw	r20,620(sp)
    5b98:	dcc09a15 	stw	r19,616(sp)
    5b9c:	dc809915 	stw	r18,612(sp)
    5ba0:	dc409815 	stw	r17,608(sp)
    5ba4:	d9c00715 	stw	r7,28(sp)
    5ba8:	30fffb10 	cmplti	r3,r6,-20
    5bac:	d9000215 	stw	r4,8(sp)
    5bb0:	d9400915 	stw	r5,36(sp)
    5bb4:	d8800115 	stw	r2,4(sp)
    5bb8:	3021883a 	mov	r16,r6
    5bbc:	18028c1e 	bne	r3,zero,65f0 <__kernel_rem_pio2+0xa94>
    5bc0:	01400604 	movi	r5,24
    5bc4:	313fff44 	addi	r4,r6,-3
    5bc8:	0006f980 	call	6f98 <__divsi3>
    5bcc:	d8800615 	stw	r2,24(sp)
    5bd0:	10800044 	addi	r2,r2,1
    5bd4:	100690ba 	slli	r3,r2,2
    5bd8:	10c5c83a 	sub	r2,r2,r3
    5bdc:	100690fa 	slli	r3,r2,3
    5be0:	d9000117 	ldw	r4,4(sp)
    5be4:	80c7883a 	add	r3,r16,r3
    5be8:	d8800517 	ldw	r2,20(sp)
    5bec:	d8c00315 	stw	r3,12(sp)
    5bf0:	d8c00617 	ldw	r3,24(sp)
    5bf4:	1105883a 	add	r2,r2,r4
    5bf8:	1925c83a 	sub	r18,r3,r4
    5bfc:	10000f16 	blt	r2,zero,5c3c <__kernel_rem_pio2+0xe0>
    5c00:	902290ba 	slli	r17,r18,2
    5c04:	d8c0a217 	ldw	r3,648(sp)
    5c08:	10800044 	addi	r2,r2,1
    5c0c:	dc001f04 	addi	r16,sp,124
    5c10:	1c63883a 	add	r17,r3,r17
    5c14:	14a7883a 	add	r19,r2,r18
    5c18:	90016016 	blt	r18,zero,619c <__kernel_rem_pio2+0x640>
    5c1c:	89000017 	ldw	r4,0(r17)
    5c20:	0009a9c0 	call	9a9c <__floatsidf>
    5c24:	80800015 	stw	r2,0(r16)
    5c28:	80c00115 	stw	r3,4(r16)
    5c2c:	94800044 	addi	r18,r18,1
    5c30:	84000204 	addi	r16,r16,8
    5c34:	8c400104 	addi	r17,r17,4
    5c38:	94fff71e 	bne	r18,r19,5c18 <__kernel_rem_pio2+0xbc>
    5c3c:	d8800517 	ldw	r2,20(sp)
    5c40:	10002516 	blt	r2,zero,5cd8 <__kernel_rem_pio2+0x17c>
    5c44:	dcc00117 	ldw	r19,4(sp)
    5c48:	d8c01f04 	addi	r3,sp,124
    5c4c:	dc406f04 	addi	r17,sp,444
    5c50:	982490fa 	slli	r18,r19,3
    5c54:	94000204 	addi	r16,r18,8
    5c58:	1ca5883a 	add	r18,r3,r18
    5c5c:	d8c00717 	ldw	r3,28(sp)
    5c60:	10ef883a 	add	r23,r2,r3
    5c64:	d8800217 	ldw	r2,8(sp)
    5c68:	80a1883a 	add	r16,r16,r2
    5c6c:	d8800117 	ldw	r2,4(sp)
    5c70:	10015f16 	blt	r2,zero,61f0 <__kernel_rem_pio2+0x694>
    5c74:	dd000217 	ldw	r20,8(sp)
    5c78:	902d883a 	mov	r22,r18
    5c7c:	0039883a 	mov	fp,zero
    5c80:	002b883a 	mov	r21,zero
    5c84:	b1800017 	ldw	r6,0(r22)
    5c88:	b1c00117 	ldw	r7,4(r22)
    5c8c:	a1000017 	ldw	r4,0(r20)
    5c90:	a1400117 	ldw	r5,4(r20)
    5c94:	a5000204 	addi	r20,r20,8
    5c98:	b5bffe04 	addi	r22,r22,-8
    5c9c:	00089100 	call	8910 <__muldf3>
    5ca0:	e009883a 	mov	r4,fp
    5ca4:	a80b883a 	mov	r5,r21
    5ca8:	100d883a 	mov	r6,r2
    5cac:	180f883a 	mov	r7,r3
    5cb0:	00074bc0 	call	74bc <__adddf3>
    5cb4:	1039883a 	mov	fp,r2
    5cb8:	182b883a 	mov	r21,r3
    5cbc:	a43ff11e 	bne	r20,r16,5c84 <__kernel_rem_pio2+0x128>
    5cc0:	8f000015 	stw	fp,0(r17)
    5cc4:	8d400115 	stw	r21,4(r17)
    5cc8:	9cc00044 	addi	r19,r19,1
    5ccc:	8c400204 	addi	r17,r17,8
    5cd0:	94800204 	addi	r18,r18,8
    5cd4:	9dffe51e 	bne	r19,r23,5c6c <__kernel_rem_pio2+0x110>
    5cd8:	dc400517 	ldw	r17,20(sp)
    5cdc:	d8c00717 	ldw	r3,28(sp)
    5ce0:	d9000217 	ldw	r4,8(sp)
    5ce4:	88bfffc4 	addi	r2,r17,-1
    5ce8:	180690fa 	slli	r3,r3,3
    5cec:	883890ba 	slli	fp,r17,2
    5cf0:	100490ba 	slli	r2,r2,2
    5cf4:	243ffe04 	addi	r16,r4,-8
    5cf8:	80e1883a 	add	r16,r16,r3
    5cfc:	e1000b04 	addi	r4,fp,44
    5d00:	10808c04 	addi	r2,r2,560
    5d04:	d8c00b04 	addi	r3,sp,44
    5d08:	26c9883a 	add	r4,r4,sp
    5d0c:	10c5883a 	add	r2,r2,r3
    5d10:	d9000415 	stw	r4,16(sp)
    5d14:	d8800815 	stw	r2,32(sp)
    5d18:	883890fa 	slli	fp,r17,3
    5d1c:	d8c00b04 	addi	r3,sp,44
    5d20:	e0808c04 	addi	r2,fp,560
    5d24:	10c5883a 	add	r2,r2,r3
    5d28:	157fd817 	ldw	r21,-160(r2)
    5d2c:	153fd917 	ldw	r20,-156(r2)
    5d30:	0440280e 	bge	zero,r17,5dd4 <__kernel_rem_pio2+0x278>
    5d34:	d8806f04 	addi	r2,sp,444
    5d38:	1725883a 	add	r18,r2,fp
    5d3c:	1827883a 	mov	r19,r3
    5d40:	000d883a 	mov	r6,zero
    5d44:	01cf9c34 	movhi	r7,15984
    5d48:	a809883a 	mov	r4,r21
    5d4c:	a00b883a 	mov	r5,r20
    5d50:	00089100 	call	8910 <__muldf3>
    5d54:	180b883a 	mov	r5,r3
    5d58:	1009883a 	mov	r4,r2
    5d5c:	0009a1c0 	call	9a1c <__fixdfsi>
    5d60:	1009883a 	mov	r4,r2
    5d64:	0009a9c0 	call	9a9c <__floatsidf>
    5d68:	000d883a 	mov	r6,zero
    5d6c:	01d05c34 	movhi	r7,16752
    5d70:	1009883a 	mov	r4,r2
    5d74:	180b883a 	mov	r5,r3
    5d78:	102f883a 	mov	r23,r2
    5d7c:	182d883a 	mov	r22,r3
    5d80:	00089100 	call	8910 <__muldf3>
    5d84:	100d883a 	mov	r6,r2
    5d88:	180f883a 	mov	r7,r3
    5d8c:	a809883a 	mov	r4,r21
    5d90:	a00b883a 	mov	r5,r20
    5d94:	00090bc0 	call	90bc <__subdf3>
    5d98:	180b883a 	mov	r5,r3
    5d9c:	1009883a 	mov	r4,r2
    5da0:	0009a1c0 	call	9a1c <__fixdfsi>
    5da4:	91bffe17 	ldw	r6,-8(r18)
    5da8:	91ffff17 	ldw	r7,-4(r18)
    5dac:	98800015 	stw	r2,0(r19)
    5db0:	b809883a 	mov	r4,r23
    5db4:	b00b883a 	mov	r5,r22
    5db8:	00074bc0 	call	74bc <__adddf3>
    5dbc:	102b883a 	mov	r21,r2
    5dc0:	94bffe04 	addi	r18,r18,-8
    5dc4:	d8806f04 	addi	r2,sp,444
    5dc8:	1829883a 	mov	r20,r3
    5dcc:	9cc00104 	addi	r19,r19,4
    5dd0:	14bfdb1e 	bne	r2,r18,5d40 <__kernel_rem_pio2+0x1e4>
    5dd4:	dd800317 	ldw	r22,12(sp)
    5dd8:	a809883a 	mov	r4,r21
    5ddc:	a00b883a 	mov	r5,r20
    5de0:	b00d883a 	mov	r6,r22
    5de4:	0006dd80 	call	6dd8 <scalbn>
    5de8:	000d883a 	mov	r6,zero
    5dec:	01cff034 	movhi	r7,16320
    5df0:	1009883a 	mov	r4,r2
    5df4:	180b883a 	mov	r5,r3
    5df8:	1029883a 	mov	r20,r2
    5dfc:	1827883a 	mov	r19,r3
    5e00:	00089100 	call	8910 <__muldf3>
    5e04:	1009883a 	mov	r4,r2
    5e08:	180b883a 	mov	r5,r3
    5e0c:	0002e900 	call	2e90 <floor>
    5e10:	000d883a 	mov	r6,zero
    5e14:	01d00834 	movhi	r7,16416
    5e18:	1009883a 	mov	r4,r2
    5e1c:	180b883a 	mov	r5,r3
    5e20:	00089100 	call	8910 <__muldf3>
    5e24:	100d883a 	mov	r6,r2
    5e28:	180f883a 	mov	r7,r3
    5e2c:	a009883a 	mov	r4,r20
    5e30:	980b883a 	mov	r5,r19
    5e34:	00090bc0 	call	90bc <__subdf3>
    5e38:	180b883a 	mov	r5,r3
    5e3c:	1009883a 	mov	r4,r2
    5e40:	1827883a 	mov	r19,r3
    5e44:	102b883a 	mov	r21,r2
    5e48:	0009a1c0 	call	9a1c <__fixdfsi>
    5e4c:	1009883a 	mov	r4,r2
    5e50:	1029883a 	mov	r20,r2
    5e54:	0009a9c0 	call	9a9c <__floatsidf>
    5e58:	980b883a 	mov	r5,r19
    5e5c:	100d883a 	mov	r6,r2
    5e60:	180f883a 	mov	r7,r3
    5e64:	a809883a 	mov	r4,r21
    5e68:	00090bc0 	call	90bc <__subdf3>
    5e6c:	1025883a 	mov	r18,r2
    5e70:	1027883a 	mov	r19,r2
    5e74:	1813883a 	mov	r9,r3
    5e78:	0580670e 	bge	zero,r22,6018 <__kernel_rem_pio2+0x4bc>
    5e7c:	88bfffc4 	addi	r2,r17,-1
    5e80:	100490ba 	slli	r2,r2,2
    5e84:	d9400b04 	addi	r5,sp,44
    5e88:	01000604 	movi	r4,24
    5e8c:	10808c04 	addi	r2,r2,560
    5e90:	1145883a 	add	r2,r2,r5
    5e94:	117f7417 	ldw	r5,-560(r2)
    5e98:	2589c83a 	sub	r4,r4,r22
    5e9c:	054005c4 	movi	r21,23
    5ea0:	290dd83a 	sra	r6,r5,r4
    5ea4:	adabc83a 	sub	r21,r21,r22
    5ea8:	3108983a 	sll	r4,r6,r4
    5eac:	a1a9883a 	add	r20,r20,r6
    5eb0:	2909c83a 	sub	r4,r5,r4
    5eb4:	256bd83a 	sra	r21,r4,r21
    5eb8:	113f7415 	stw	r4,-560(r2)
    5ebc:	05406016 	blt	zero,r21,6040 <__kernel_rem_pio2+0x4e4>
    5ec0:	480b883a 	mov	r5,r9
    5ec4:	000d883a 	mov	r6,zero
    5ec8:	000f883a 	mov	r7,zero
    5ecc:	9809883a 	mov	r4,r19
    5ed0:	da400015 	stw	r9,0(sp)
    5ed4:	00086c00 	call	86c0 <__eqdf2>
    5ed8:	da400017 	ldw	r9,0(sp)
    5edc:	1001d21e 	bne	r2,zero,6628 <__kernel_rem_pio2+0xacc>
    5ee0:	d8800517 	ldw	r2,20(sp)
    5ee4:	8cffffc4 	addi	r19,r17,-1
    5ee8:	98800a16 	blt	r19,r2,5f14 <__kernel_rem_pio2+0x3b8>
    5eec:	880490ba 	slli	r2,r17,2
    5ef0:	d9400417 	ldw	r5,16(sp)
    5ef4:	0007883a 	mov	r3,zero
    5ef8:	10800b04 	addi	r2,r2,44
    5efc:	16c5883a 	add	r2,r2,sp
    5f00:	113fff17 	ldw	r4,-4(r2)
    5f04:	10bfff04 	addi	r2,r2,-4
    5f08:	1906b03a 	or	r3,r3,r4
    5f0c:	117ffc1e 	bne	r2,r5,5f00 <__kernel_rem_pio2+0x3a4>
    5f10:	1800ba1e 	bne	r3,zero,61fc <__kernel_rem_pio2+0x6a0>
    5f14:	d8800817 	ldw	r2,32(sp)
    5f18:	10bf7417 	ldw	r2,-560(r2)
    5f1c:	1000b11e 	bne	r2,zero,61e4 <__kernel_rem_pio2+0x688>
    5f20:	d8800417 	ldw	r2,16(sp)
    5f24:	05000044 	movi	r20,1
    5f28:	10fffe17 	ldw	r3,-8(r2)
    5f2c:	a5000044 	addi	r20,r20,1
    5f30:	10bfff04 	addi	r2,r2,-4
    5f34:	183ffc26 	beq	r3,zero,5f28 <__kernel_rem_pio2+0x3cc>
    5f38:	8d05883a 	add	r2,r17,r20
    5f3c:	8d400044 	addi	r21,r17,1
    5f40:	d8800015 	stw	r2,0(sp)
    5f44:	d8800617 	ldw	r2,24(sp)
    5f48:	88a7883a 	add	r19,r17,r2
    5f4c:	d8800717 	ldw	r2,28(sp)
    5f50:	982690ba 	slli	r19,r19,2
    5f54:	1463883a 	add	r17,r2,r17
    5f58:	d880a217 	ldw	r2,648(sp)
    5f5c:	882290fa 	slli	r17,r17,3
    5f60:	14e7883a 	add	r19,r2,r19
    5f64:	d8801f04 	addi	r2,sp,124
    5f68:	1463883a 	add	r17,r2,r17
    5f6c:	d8806f04 	addi	r2,sp,444
    5f70:	1725883a 	add	r18,r2,fp
    5f74:	99000117 	ldw	r4,4(r19)
    5f78:	0009a9c0 	call	9a9c <__floatsidf>
    5f7c:	1009883a 	mov	r4,r2
    5f80:	88800015 	stw	r2,0(r17)
    5f84:	d8800117 	ldw	r2,4(sp)
    5f88:	88c00115 	stw	r3,4(r17)
    5f8c:	180b883a 	mov	r5,r3
    5f90:	10001e16 	blt	r2,zero,600c <__kernel_rem_pio2+0x4b0>
    5f94:	dd000217 	ldw	r20,8(sp)
    5f98:	882f883a 	mov	r23,r17
    5f9c:	002d883a 	mov	r22,zero
    5fa0:	0039883a 	mov	fp,zero
    5fa4:	00000306 	br	5fb4 <__kernel_rem_pio2+0x458>
    5fa8:	b9000017 	ldw	r4,0(r23)
    5fac:	b9400117 	ldw	r5,4(r23)
    5fb0:	a5000204 	addi	r20,r20,8
    5fb4:	a1800017 	ldw	r6,0(r20)
    5fb8:	a1c00117 	ldw	r7,4(r20)
    5fbc:	bdfffe04 	addi	r23,r23,-8
    5fc0:	00089100 	call	8910 <__muldf3>
    5fc4:	b009883a 	mov	r4,r22
    5fc8:	e00b883a 	mov	r5,fp
    5fcc:	100d883a 	mov	r6,r2
    5fd0:	180f883a 	mov	r7,r3
    5fd4:	00074bc0 	call	74bc <__adddf3>
    5fd8:	102d883a 	mov	r22,r2
    5fdc:	1839883a 	mov	fp,r3
    5fe0:	a43ff11e 	bne	r20,r16,5fa8 <__kernel_rem_pio2+0x44c>
    5fe4:	d8800017 	ldw	r2,0(sp)
    5fe8:	95800215 	stw	r22,8(r18)
    5fec:	97000315 	stw	fp,12(r18)
    5ff0:	ad400044 	addi	r21,r21,1
    5ff4:	9cc00104 	addi	r19,r19,4
    5ff8:	8c400204 	addi	r17,r17,8
    5ffc:	94800204 	addi	r18,r18,8
    6000:	157fdc0e 	bge	r2,r21,5f74 <__kernel_rem_pio2+0x418>
    6004:	1023883a 	mov	r17,r2
    6008:	003f4306 	br	5d18 <__kernel_rem_pio2+0x1bc>
    600c:	002d883a 	mov	r22,zero
    6010:	0039883a 	mov	fp,zero
    6014:	003ff306 	br	5fe4 <__kernel_rem_pio2+0x488>
    6018:	d8800317 	ldw	r2,12(sp)
    601c:	1000651e 	bne	r2,zero,61b4 <__kernel_rem_pio2+0x658>
    6020:	88bfffc4 	addi	r2,r17,-1
    6024:	100490ba 	slli	r2,r2,2
    6028:	d9000b04 	addi	r4,sp,44
    602c:	10808c04 	addi	r2,r2,560
    6030:	1105883a 	add	r2,r2,r4
    6034:	157f7417 	ldw	r21,-560(r2)
    6038:	a82bd5fa 	srai	r21,r21,23
    603c:	057fa00e 	bge	zero,r21,5ec0 <__kernel_rem_pio2+0x364>
    6040:	a5000044 	addi	r20,r20,1
    6044:	0441ac0e 	bge	zero,r17,66f8 <__kernel_rem_pio2+0xb9c>
    6048:	da800b17 	ldw	r10,44(sp)
    604c:	5000561e 	bne	r10,zero,61a8 <__kernel_rem_pio2+0x64c>
    6050:	88800060 	cmpeqi	r2,r17,1
    6054:	1000271e 	bne	r2,zero,60f4 <__kernel_rem_pio2+0x598>
    6058:	da800c17 	ldw	r10,48(sp)
    605c:	d9400c04 	addi	r5,sp,48
    6060:	00800044 	movi	r2,1
    6064:	11000044 	addi	r4,r2,1
    6068:	29400104 	addi	r5,r5,4
    606c:	5000061e 	bne	r10,zero,6088 <__kernel_rem_pio2+0x52c>
    6070:	89002026 	beq	r17,r4,60f4 <__kernel_rem_pio2+0x598>
    6074:	2a800017 	ldw	r10,0(r5)
    6078:	2005883a 	mov	r2,r4
    607c:	11000044 	addi	r4,r2,1
    6080:	29400104 	addi	r5,r5,4
    6084:	503ffa26 	beq	r10,zero,6070 <__kernel_rem_pio2+0x514>
    6088:	100490ba 	slli	r2,r2,2
    608c:	01404034 	movhi	r5,256
    6090:	2a95c83a 	sub	r10,r5,r10
    6094:	10808c04 	addi	r2,r2,560
    6098:	d9400b04 	addi	r5,sp,44
    609c:	1145883a 	add	r2,r2,r5
    60a0:	12bf7415 	stw	r10,-560(r2)
    60a4:	2440120e 	bge	r4,r17,60f0 <__kernel_rem_pio2+0x594>
    60a8:	200890ba 	slli	r4,r4,2
    60ac:	880490ba 	slli	r2,r17,2
    60b0:	d9c00b04 	addi	r7,sp,44
    60b4:	21408c04 	addi	r5,r4,560
    60b8:	01804034 	movhi	r6,256
    60bc:	29cb883a 	add	r5,r5,r7
    60c0:	21000b04 	addi	r4,r4,44
    60c4:	10800b04 	addi	r2,r2,44
    60c8:	297f7417 	ldw	r5,-560(r5)
    60cc:	26c9883a 	add	r4,r4,sp
    60d0:	16c5883a 	add	r2,r2,sp
    60d4:	31bfffc4 	addi	r6,r6,-1
    60d8:	00000106 	br	60e0 <__kernel_rem_pio2+0x584>
    60dc:	21400017 	ldw	r5,0(r4)
    60e0:	314bc83a 	sub	r5,r6,r5
    60e4:	21400015 	stw	r5,0(r4)
    60e8:	21000104 	addi	r4,r4,4
    60ec:	20bffb1e 	bne	r4,r2,60dc <__kernel_rem_pio2+0x580>
    60f0:	02800044 	movi	r10,1
    60f4:	d9000317 	ldw	r4,12(sp)
    60f8:	01000e0e 	bge	zero,r4,6134 <__kernel_rem_pio2+0x5d8>
    60fc:	20800060 	cmpeqi	r2,r4,1
    6100:	1001371e 	bne	r2,zero,65e0 <__kernel_rem_pio2+0xa84>
    6104:	208000a0 	cmpeqi	r2,r4,2
    6108:	10000a26 	beq	r2,zero,6134 <__kernel_rem_pio2+0x5d8>
    610c:	88bfffc4 	addi	r2,r17,-1
    6110:	100490ba 	slli	r2,r2,2
    6114:	01401034 	movhi	r5,64
    6118:	d9000b04 	addi	r4,sp,44
    611c:	10808c04 	addi	r2,r2,560
    6120:	1105883a 	add	r2,r2,r4
    6124:	113f7417 	ldw	r4,-560(r2)
    6128:	297fffc4 	addi	r5,r5,-1
    612c:	2148703a 	and	r4,r4,r5
    6130:	113f7415 	stw	r4,-560(r2)
    6134:	a8800098 	cmpnei	r2,r21,2
    6138:	103f611e 	bne	r2,zero,5ec0 <__kernel_rem_pio2+0x364>
    613c:	900d883a 	mov	r6,r18
    6140:	180f883a 	mov	r7,r3
    6144:	0009883a 	mov	r4,zero
    6148:	014ffc34 	movhi	r5,16368
    614c:	da800015 	stw	r10,0(sp)
    6150:	00090bc0 	call	90bc <__subdf3>
    6154:	da800017 	ldw	r10,0(sp)
    6158:	1027883a 	mov	r19,r2
    615c:	1813883a 	mov	r9,r3
    6160:	503f5726 	beq	r10,zero,5ec0 <__kernel_rem_pio2+0x364>
    6164:	d9800317 	ldw	r6,12(sp)
    6168:	0009883a 	mov	r4,zero
    616c:	014ffc34 	movhi	r5,16368
    6170:	d8c00015 	stw	r3,0(sp)
    6174:	0006dd80 	call	6dd8 <scalbn>
    6178:	da400017 	ldw	r9,0(sp)
    617c:	9809883a 	mov	r4,r19
    6180:	100d883a 	mov	r6,r2
    6184:	480b883a 	mov	r5,r9
    6188:	180f883a 	mov	r7,r3
    618c:	00090bc0 	call	90bc <__subdf3>
    6190:	1027883a 	mov	r19,r2
    6194:	1813883a 	mov	r9,r3
    6198:	003f4906 	br	5ec0 <__kernel_rem_pio2+0x364>
    619c:	0005883a 	mov	r2,zero
    61a0:	0007883a 	mov	r3,zero
    61a4:	003e9f06 	br	5c24 <__kernel_rem_pio2+0xc8>
    61a8:	01000044 	movi	r4,1
    61ac:	0005883a 	mov	r2,zero
    61b0:	003fb506 	br	6088 <__kernel_rem_pio2+0x52c>
    61b4:	180b883a 	mov	r5,r3
    61b8:	000d883a 	mov	r6,zero
    61bc:	01cff834 	movhi	r7,16352
    61c0:	9009883a 	mov	r4,r18
    61c4:	d8c00a15 	stw	r3,40(sp)
    61c8:	d8c00015 	stw	r3,0(sp)
    61cc:	00087400 	call	8740 <__gedf2>
    61d0:	da400017 	ldw	r9,0(sp)
    61d4:	d8c00a17 	ldw	r3,40(sp)
    61d8:	1001080e 	bge	r2,zero,65fc <__kernel_rem_pio2+0xaa0>
    61dc:	002b883a 	mov	r21,zero
    61e0:	003f3706 	br	5ec0 <__kernel_rem_pio2+0x364>
    61e4:	8d400044 	addi	r21,r17,1
    61e8:	dd400015 	stw	r21,0(sp)
    61ec:	003f5506 	br	5f44 <__kernel_rem_pio2+0x3e8>
    61f0:	0039883a 	mov	fp,zero
    61f4:	002b883a 	mov	r21,zero
    61f8:	003eb106 	br	5cc0 <__kernel_rem_pio2+0x164>
    61fc:	d8c00317 	ldw	r3,12(sp)
    6200:	980490ba 	slli	r2,r19,2
    6204:	d9400b04 	addi	r5,sp,44
    6208:	193ffa04 	addi	r4,r3,-24
    620c:	10c08c04 	addi	r3,r2,560
    6210:	1947883a 	add	r3,r3,r5
    6214:	18ff7417 	ldw	r3,-560(r3)
    6218:	dd400215 	stw	r21,8(sp)
    621c:	d9000315 	stw	r4,12(sp)
    6220:	1800091e 	bne	r3,zero,6248 <__kernel_rem_pio2+0x6ec>
    6224:	10800b04 	addi	r2,r2,44
    6228:	16c5883a 	add	r2,r2,sp
    622c:	2007883a 	mov	r3,r4
    6230:	113fff17 	ldw	r4,-4(r2)
    6234:	9cffffc4 	addi	r19,r19,-1
    6238:	10bfff04 	addi	r2,r2,-4
    623c:	18fffa04 	addi	r3,r3,-24
    6240:	203ffb26 	beq	r4,zero,6230 <__kernel_rem_pio2+0x6d4>
    6244:	d8c00315 	stw	r3,12(sp)
    6248:	d9800317 	ldw	r6,12(sp)
    624c:	0009883a 	mov	r4,zero
    6250:	014ffc34 	movhi	r5,16368
    6254:	0006dd80 	call	6dd8 <scalbn>
    6258:	1021883a 	mov	r16,r2
    625c:	1823883a 	mov	r17,r3
    6260:	98017116 	blt	r19,zero,6828 <__kernel_rem_pio2+0xccc>
    6264:	980490fa 	slli	r2,r19,3
    6268:	982c90ba 	slli	r22,r19,2
    626c:	d8c06f04 	addi	r3,sp,444
    6270:	18b9883a 	add	fp,r3,r2
    6274:	d8800315 	stw	r2,12(sp)
    6278:	b0800b04 	addi	r2,r22,44
    627c:	df000115 	stw	fp,4(sp)
    6280:	16ed883a 	add	r22,r2,sp
    6284:	b1000017 	ldw	r4,0(r22)
    6288:	e73ffe04 	addi	fp,fp,-8
    628c:	0009a9c0 	call	9a9c <__floatsidf>
    6290:	800d883a 	mov	r6,r16
    6294:	880f883a 	mov	r7,r17
    6298:	1009883a 	mov	r4,r2
    629c:	180b883a 	mov	r5,r3
    62a0:	00089100 	call	8910 <__muldf3>
    62a4:	8009883a 	mov	r4,r16
    62a8:	880b883a 	mov	r5,r17
    62ac:	000d883a 	mov	r6,zero
    62b0:	01cf9c34 	movhi	r7,15984
    62b4:	e0800215 	stw	r2,8(fp)
    62b8:	e0c00315 	stw	r3,12(fp)
    62bc:	00089100 	call	8910 <__muldf3>
    62c0:	b009883a 	mov	r4,r22
    62c4:	1021883a 	mov	r16,r2
    62c8:	d8800b04 	addi	r2,sp,44
    62cc:	1823883a 	mov	r17,r3
    62d0:	b5bfff04 	addi	r22,r22,-4
    62d4:	113feb1e 	bne	r2,r4,6284 <__kernel_rem_pio2+0x728>
    62d8:	05cffe74 	movhi	r23,16377
    62dc:	dc800517 	ldw	r18,20(sp)
    62e0:	bdc87ec4 	addi	r23,r23,8699
    62e4:	dd800117 	ldw	r22,4(sp)
    62e8:	d8804704 	addi	r2,sp,284
    62ec:	dd000415 	stw	r20,16(sp)
    62f0:	dcc00015 	stw	r19,0(sp)
    62f4:	ddc00115 	stw	r23,4(sp)
    62f8:	0021883a 	mov	r16,zero
    62fc:	102b883a 	mov	r21,r2
    6300:	90002316 	blt	r18,zero,6390 <__kernel_rem_pio2+0x834>
    6304:	04c00074 	movhi	r19,1
    6308:	d9400117 	ldw	r5,4(sp)
    630c:	9cde4b04 	addi	r19,r19,31020
    6310:	b02f883a 	mov	r23,r22
    6314:	01100034 	movhi	r4,16384
    6318:	0039883a 	mov	fp,zero
    631c:	0023883a 	mov	r17,zero
    6320:	0029883a 	mov	r20,zero
    6324:	00000506 	br	633c <__kernel_rem_pio2+0x7e0>
    6328:	9cc00204 	addi	r19,r19,8
    632c:	bdc00204 	addi	r23,r23,8
    6330:	85000e16 	blt	r16,r20,636c <__kernel_rem_pio2+0x810>
    6334:	99000017 	ldw	r4,0(r19)
    6338:	99400117 	ldw	r5,4(r19)
    633c:	b9800017 	ldw	r6,0(r23)
    6340:	b9c00117 	ldw	r7,4(r23)
    6344:	a5000044 	addi	r20,r20,1
    6348:	00089100 	call	8910 <__muldf3>
    634c:	e009883a 	mov	r4,fp
    6350:	880b883a 	mov	r5,r17
    6354:	100d883a 	mov	r6,r2
    6358:	180f883a 	mov	r7,r3
    635c:	00074bc0 	call	74bc <__adddf3>
    6360:	1039883a 	mov	fp,r2
    6364:	1823883a 	mov	r17,r3
    6368:	953fef0e 	bge	r18,r20,6328 <__kernel_rem_pio2+0x7cc>
    636c:	d8c00017 	ldw	r3,0(sp)
    6370:	af000015 	stw	fp,0(r21)
    6374:	ac400115 	stw	r17,4(r21)
    6378:	80800044 	addi	r2,r16,1
    637c:	ad400204 	addi	r21,r21,8
    6380:	b5bffe04 	addi	r22,r22,-8
    6384:	1c000526 	beq	r3,r16,639c <__kernel_rem_pio2+0x840>
    6388:	1021883a 	mov	r16,r2
    638c:	903fdd0e 	bge	r18,zero,6304 <__kernel_rem_pio2+0x7a8>
    6390:	0039883a 	mov	fp,zero
    6394:	0023883a 	mov	r17,zero
    6398:	003ff406 	br	636c <__kernel_rem_pio2+0x810>
    639c:	d880a117 	ldw	r2,644(sp)
    63a0:	dd000417 	ldw	r20,16(sp)
    63a4:	dcc00017 	ldw	r19,0(sp)
    63a8:	108000c8 	cmpgei	r2,r2,3
    63ac:	1000241e 	bne	r2,zero,6440 <__kernel_rem_pio2+0x8e4>
    63b0:	d880a117 	ldw	r2,644(sp)
    63b4:	0080d216 	blt	zero,r2,6700 <__kernel_rem_pio2+0xba4>
    63b8:	1000141e 	bne	r2,zero,640c <__kernel_rem_pio2+0x8b0>
    63bc:	d8c00317 	ldw	r3,12(sp)
    63c0:	d8804704 	addi	r2,sp,284
    63c4:	0009883a 	mov	r4,zero
    63c8:	10eb883a 	add	r21,r2,r3
    63cc:	000b883a 	mov	r5,zero
    63d0:	a9800017 	ldw	r6,0(r21)
    63d4:	a9c00117 	ldw	r7,4(r21)
    63d8:	00074bc0 	call	74bc <__adddf3>
    63dc:	a80d883a 	mov	r6,r21
    63e0:	1009883a 	mov	r4,r2
    63e4:	d8804704 	addi	r2,sp,284
    63e8:	180b883a 	mov	r5,r3
    63ec:	ad7ffe04 	addi	r21,r21,-8
    63f0:	11bff71e 	bne	r2,r6,63d0 <__kernel_rem_pio2+0x874>
    63f4:	d8800217 	ldw	r2,8(sp)
    63f8:	10000126 	beq	r2,zero,6400 <__kernel_rem_pio2+0x8a4>
    63fc:	2960003c 	xorhi	r5,r5,32768
    6400:	d8800917 	ldw	r2,36(sp)
    6404:	11000015 	stw	r4,0(r2)
    6408:	11400115 	stw	r5,4(r2)
    640c:	a08001cc 	andi	r2,r20,7
    6410:	dfc0a017 	ldw	ra,640(sp)
    6414:	df009f17 	ldw	fp,636(sp)
    6418:	ddc09e17 	ldw	r23,632(sp)
    641c:	dd809d17 	ldw	r22,628(sp)
    6420:	dd409c17 	ldw	r21,624(sp)
    6424:	dd009b17 	ldw	r20,620(sp)
    6428:	dcc09a17 	ldw	r19,616(sp)
    642c:	dc809917 	ldw	r18,612(sp)
    6430:	dc409817 	ldw	r17,608(sp)
    6434:	dc009717 	ldw	r16,604(sp)
    6438:	dec0a104 	addi	sp,sp,644
    643c:	f800283a 	ret
    6440:	d880a117 	ldw	r2,644(sp)
    6444:	108000e0 	cmpeqi	r2,r2,3
    6448:	103ff026 	beq	r2,zero,640c <__kernel_rem_pio2+0x8b0>
    644c:	98010226 	beq	r19,zero,6858 <__kernel_rem_pio2+0xcfc>
    6450:	d8c00317 	ldw	r3,12(sp)
    6454:	d9000b04 	addi	r4,sp,44
    6458:	18808c04 	addi	r2,r3,560
    645c:	1105883a 	add	r2,r2,r4
    6460:	14bfb017 	ldw	r18,-320(r2)
    6464:	147fb117 	ldw	r17,-316(r2)
    6468:	d8804704 	addi	r2,sp,284
    646c:	10e1883a 	add	r16,r2,r3
    6470:	85bffe17 	ldw	r22,-8(r16)
    6474:	857fff17 	ldw	r21,-4(r16)
    6478:	9009883a 	mov	r4,r18
    647c:	880b883a 	mov	r5,r17
    6480:	b00d883a 	mov	r6,r22
    6484:	a80f883a 	mov	r7,r21
    6488:	00074bc0 	call	74bc <__adddf3>
    648c:	100d883a 	mov	r6,r2
    6490:	180f883a 	mov	r7,r3
    6494:	b009883a 	mov	r4,r22
    6498:	a80b883a 	mov	r5,r21
    649c:	9039883a 	mov	fp,r18
    64a0:	882f883a 	mov	r23,r17
    64a4:	1025883a 	mov	r18,r2
    64a8:	1823883a 	mov	r17,r3
    64ac:	00090bc0 	call	90bc <__subdf3>
    64b0:	e00d883a 	mov	r6,fp
    64b4:	b80f883a 	mov	r7,r23
    64b8:	1009883a 	mov	r4,r2
    64bc:	180b883a 	mov	r5,r3
    64c0:	00074bc0 	call	74bc <__adddf3>
    64c4:	80800015 	stw	r2,0(r16)
    64c8:	80c00115 	stw	r3,4(r16)
    64cc:	84bffe15 	stw	r18,-8(r16)
    64d0:	847fff15 	stw	r17,-4(r16)
    64d4:	d8804704 	addi	r2,sp,284
    64d8:	843ffe04 	addi	r16,r16,-8
    64dc:	143fe41e 	bne	r2,r16,6470 <__kernel_rem_pio2+0x914>
    64e0:	9cc00088 	cmpgei	r19,r19,2
    64e4:	9800dc26 	beq	r19,zero,6858 <__kernel_rem_pio2+0xcfc>
    64e8:	d8c00317 	ldw	r3,12(sp)
    64ec:	d9000b04 	addi	r4,sp,44
    64f0:	dc404904 	addi	r17,sp,292
    64f4:	18808c04 	addi	r2,r3,560
    64f8:	1105883a 	add	r2,r2,r4
    64fc:	14ffb017 	ldw	r19,-320(r2)
    6500:	14bfb117 	ldw	r18,-316(r2)
    6504:	d8804704 	addi	r2,sp,284
    6508:	10eb883a 	add	r21,r2,r3
    650c:	a821883a 	mov	r16,r21
    6510:	dd000015 	stw	r20,0(sp)
    6514:	85fffe17 	ldw	r23,-8(r16)
    6518:	85bfff17 	ldw	r22,-4(r16)
    651c:	9809883a 	mov	r4,r19
    6520:	900b883a 	mov	r5,r18
    6524:	b80d883a 	mov	r6,r23
    6528:	b00f883a 	mov	r7,r22
    652c:	00074bc0 	call	74bc <__adddf3>
    6530:	100d883a 	mov	r6,r2
    6534:	180f883a 	mov	r7,r3
    6538:	b809883a 	mov	r4,r23
    653c:	b00b883a 	mov	r5,r22
    6540:	9829883a 	mov	r20,r19
    6544:	9039883a 	mov	fp,r18
    6548:	1027883a 	mov	r19,r2
    654c:	1825883a 	mov	r18,r3
    6550:	00090bc0 	call	90bc <__subdf3>
    6554:	a00d883a 	mov	r6,r20
    6558:	e00f883a 	mov	r7,fp
    655c:	1009883a 	mov	r4,r2
    6560:	180b883a 	mov	r5,r3
    6564:	00074bc0 	call	74bc <__adddf3>
    6568:	80800015 	stw	r2,0(r16)
    656c:	80c00115 	stw	r3,4(r16)
    6570:	84fffe15 	stw	r19,-8(r16)
    6574:	84bfff15 	stw	r18,-4(r16)
    6578:	843ffe04 	addi	r16,r16,-8
    657c:	8c3fe51e 	bne	r17,r16,6514 <__kernel_rem_pio2+0x9b8>
    6580:	dd000017 	ldw	r20,0(sp)
    6584:	0009883a 	mov	r4,zero
    6588:	000b883a 	mov	r5,zero
    658c:	a9800017 	ldw	r6,0(r21)
    6590:	a9c00117 	ldw	r7,4(r21)
    6594:	ad7ffe04 	addi	r21,r21,-8
    6598:	00074bc0 	call	74bc <__adddf3>
    659c:	1009883a 	mov	r4,r2
    65a0:	180b883a 	mov	r5,r3
    65a4:	8d7ff91e 	bne	r17,r21,658c <__kernel_rem_pio2+0xa30>
    65a8:	da000217 	ldw	r8,8(sp)
    65ac:	d9c04717 	ldw	r7,284(sp)
    65b0:	d8c04817 	ldw	r3,288(sp)
    65b4:	d9804917 	ldw	r6,292(sp)
    65b8:	d8804a17 	ldw	r2,296(sp)
    65bc:	4000891e 	bne	r8,zero,67e4 <__kernel_rem_pio2+0xc88>
    65c0:	da000917 	ldw	r8,36(sp)
    65c4:	41c00015 	stw	r7,0(r8)
    65c8:	40c00115 	stw	r3,4(r8)
    65cc:	41800215 	stw	r6,8(r8)
    65d0:	40800315 	stw	r2,12(r8)
    65d4:	41000415 	stw	r4,16(r8)
    65d8:	41400515 	stw	r5,20(r8)
    65dc:	003f8b06 	br	640c <__kernel_rem_pio2+0x8b0>
    65e0:	88bfffc4 	addi	r2,r17,-1
    65e4:	100490ba 	slli	r2,r2,2
    65e8:	01402034 	movhi	r5,128
    65ec:	003eca06 	br	6118 <__kernel_rem_pio2+0x5bc>
    65f0:	00fffa04 	movi	r3,-24
    65f4:	d8000615 	stw	zero,24(sp)
    65f8:	003d7906 	br	5be0 <__kernel_rem_pio2+0x84>
    65fc:	a5000044 	addi	r20,r20,1
    6600:	05400084 	movi	r21,2
    6604:	047e9016 	blt	zero,r17,6048 <__kernel_rem_pio2+0x4ec>
    6608:	480f883a 	mov	r7,r9
    660c:	900d883a 	mov	r6,r18
    6610:	0009883a 	mov	r4,zero
    6614:	014ffc34 	movhi	r5,16368
    6618:	00090bc0 	call	90bc <__subdf3>
    661c:	1027883a 	mov	r19,r2
    6620:	1813883a 	mov	r9,r3
    6624:	003e2606 	br	5ec0 <__kernel_rem_pio2+0x364>
    6628:	ddc00317 	ldw	r23,12(sp)
    662c:	9809883a 	mov	r4,r19
    6630:	480b883a 	mov	r5,r9
    6634:	05cdc83a 	sub	r6,zero,r23
    6638:	dd400215 	stw	r21,8(sp)
    663c:	0006dd80 	call	6dd8 <scalbn>
    6640:	000d883a 	mov	r6,zero
    6644:	01d05c34 	movhi	r7,16752
    6648:	1009883a 	mov	r4,r2
    664c:	180b883a 	mov	r5,r3
    6650:	1025883a 	mov	r18,r2
    6654:	1821883a 	mov	r16,r3
    6658:	00087400 	call	8740 <__gedf2>
    665c:	10005716 	blt	r2,zero,67bc <__kernel_rem_pio2+0xc60>
    6660:	000d883a 	mov	r6,zero
    6664:	01cf9c34 	movhi	r7,15984
    6668:	9009883a 	mov	r4,r18
    666c:	800b883a 	mov	r5,r16
    6670:	00089100 	call	8910 <__muldf3>
    6674:	882c90ba 	slli	r22,r17,2
    6678:	180b883a 	mov	r5,r3
    667c:	1009883a 	mov	r4,r2
    6680:	0009a1c0 	call	9a1c <__fixdfsi>
    6684:	1009883a 	mov	r4,r2
    6688:	102b883a 	mov	r21,r2
    668c:	d8c00b04 	addi	r3,sp,44
    6690:	b0808c04 	addi	r2,r22,560
    6694:	10ed883a 	add	r22,r2,r3
    6698:	0009a9c0 	call	9a9c <__floatsidf>
    669c:	000d883a 	mov	r6,zero
    66a0:	01d05c34 	movhi	r7,16752
    66a4:	1009883a 	mov	r4,r2
    66a8:	180b883a 	mov	r5,r3
    66ac:	00089100 	call	8910 <__muldf3>
    66b0:	100d883a 	mov	r6,r2
    66b4:	180f883a 	mov	r7,r3
    66b8:	9009883a 	mov	r4,r18
    66bc:	800b883a 	mov	r5,r16
    66c0:	00090bc0 	call	90bc <__subdf3>
    66c4:	180b883a 	mov	r5,r3
    66c8:	1009883a 	mov	r4,r2
    66cc:	0009a1c0 	call	9a1c <__fixdfsi>
    66d0:	8cc00044 	addi	r19,r17,1
    66d4:	980690ba 	slli	r3,r19,2
    66d8:	b0bf7415 	stw	r2,-560(r22)
    66dc:	b8800604 	addi	r2,r23,24
    66e0:	d8800315 	stw	r2,12(sp)
    66e4:	18808c04 	addi	r2,r3,560
    66e8:	d8c00b04 	addi	r3,sp,44
    66ec:	10c7883a 	add	r3,r2,r3
    66f0:	1d7f7415 	stw	r21,-560(r3)
    66f4:	003ed406 	br	6248 <__kernel_rem_pio2+0x6ec>
    66f8:	0015883a 	mov	r10,zero
    66fc:	003e7d06 	br	60f4 <__kernel_rem_pio2+0x598>
    6700:	d8c00317 	ldw	r3,12(sp)
    6704:	d8804704 	addi	r2,sp,284
    6708:	10eb883a 	add	r21,r2,r3
    670c:	0005883a 	mov	r2,zero
    6710:	0007883a 	mov	r3,zero
    6714:	1009883a 	mov	r4,r2
    6718:	180b883a 	mov	r5,r3
    671c:	a9800017 	ldw	r6,0(r21)
    6720:	a9c00117 	ldw	r7,4(r21)
    6724:	00074bc0 	call	74bc <__adddf3>
    6728:	a80d883a 	mov	r6,r21
    672c:	1009883a 	mov	r4,r2
    6730:	d8804704 	addi	r2,sp,284
    6734:	180b883a 	mov	r5,r3
    6738:	ad7ffe04 	addi	r21,r21,-8
    673c:	11bff71e 	bne	r2,r6,671c <__kernel_rem_pio2+0xbc0>
    6740:	2005883a 	mov	r2,r4
    6744:	d9000217 	ldw	r4,8(sp)
    6748:	20002a1e 	bne	r4,zero,67f4 <__kernel_rem_pio2+0xc98>
    674c:	d9800917 	ldw	r6,36(sp)
    6750:	d9004717 	ldw	r4,284(sp)
    6754:	d9404817 	ldw	r5,288(sp)
    6758:	30800015 	stw	r2,0(r6)
    675c:	30c00115 	stw	r3,4(r6)
    6760:	180f883a 	mov	r7,r3
    6764:	100d883a 	mov	r6,r2
    6768:	00090bc0 	call	90bc <__subdf3>
    676c:	1009883a 	mov	r4,r2
    6770:	180b883a 	mov	r5,r3
    6774:	04c00d0e 	bge	zero,r19,67ac <__kernel_rem_pio2+0xc50>
    6778:	dc004904 	addi	r16,sp,292
    677c:	04400044 	movi	r17,1
    6780:	81800017 	ldw	r6,0(r16)
    6784:	81c00117 	ldw	r7,4(r16)
    6788:	8c400044 	addi	r17,r17,1
    678c:	84000204 	addi	r16,r16,8
    6790:	00074bc0 	call	74bc <__adddf3>
    6794:	1009883a 	mov	r4,r2
    6798:	180b883a 	mov	r5,r3
    679c:	9c7ff80e 	bge	r19,r17,6780 <__kernel_rem_pio2+0xc24>
    67a0:	d8800217 	ldw	r2,8(sp)
    67a4:	10000126 	beq	r2,zero,67ac <__kernel_rem_pio2+0xc50>
    67a8:	2960003c 	xorhi	r5,r5,32768
    67ac:	d8800917 	ldw	r2,36(sp)
    67b0:	11000215 	stw	r4,8(r2)
    67b4:	11400315 	stw	r5,12(r2)
    67b8:	003f1406 	br	640c <__kernel_rem_pio2+0x8b0>
    67bc:	880490ba 	slli	r2,r17,2
    67c0:	800b883a 	mov	r5,r16
    67c4:	d8c00b04 	addi	r3,sp,44
    67c8:	10808c04 	addi	r2,r2,560
    67cc:	9009883a 	mov	r4,r18
    67d0:	10e1883a 	add	r16,r2,r3
    67d4:	0009a1c0 	call	9a1c <__fixdfsi>
    67d8:	80bf7415 	stw	r2,-560(r16)
    67dc:	8827883a 	mov	r19,r17
    67e0:	003e9906 	br	6248 <__kernel_rem_pio2+0x6ec>
    67e4:	18e0003c 	xorhi	r3,r3,32768
    67e8:	10a0003c 	xorhi	r2,r2,32768
    67ec:	2960003c 	xorhi	r5,r5,32768
    67f0:	003f7306 	br	65c0 <__kernel_rem_pio2+0xa64>
    67f4:	d9c00917 	ldw	r7,36(sp)
    67f8:	d9004717 	ldw	r4,284(sp)
    67fc:	d9404817 	ldw	r5,288(sp)
    6800:	19a0003c 	xorhi	r6,r3,32768
    6804:	39800115 	stw	r6,4(r7)
    6808:	38800015 	stw	r2,0(r7)
    680c:	100d883a 	mov	r6,r2
    6810:	180f883a 	mov	r7,r3
    6814:	00090bc0 	call	90bc <__subdf3>
    6818:	1009883a 	mov	r4,r2
    681c:	180b883a 	mov	r5,r3
    6820:	04ffd516 	blt	zero,r19,6778 <__kernel_rem_pio2+0xc1c>
    6824:	003fe006 	br	67a8 <__kernel_rem_pio2+0xc4c>
    6828:	d880a117 	ldw	r2,644(sp)
    682c:	108000c8 	cmpgei	r2,r2,3
    6830:	1000061e 	bne	r2,zero,684c <__kernel_rem_pio2+0xcf0>
    6834:	d880a117 	ldw	r2,644(sp)
    6838:	00800a16 	blt	zero,r2,6864 <__kernel_rem_pio2+0xd08>
    683c:	103ef31e 	bne	r2,zero,640c <__kernel_rem_pio2+0x8b0>
    6840:	0009883a 	mov	r4,zero
    6844:	000b883a 	mov	r5,zero
    6848:	003eea06 	br	63f4 <__kernel_rem_pio2+0x898>
    684c:	d880a117 	ldw	r2,644(sp)
    6850:	108000e0 	cmpeqi	r2,r2,3
    6854:	103eed26 	beq	r2,zero,640c <__kernel_rem_pio2+0x8b0>
    6858:	0009883a 	mov	r4,zero
    685c:	000b883a 	mov	r5,zero
    6860:	003f5106 	br	65a8 <__kernel_rem_pio2+0xa4c>
    6864:	0005883a 	mov	r2,zero
    6868:	0007883a 	mov	r3,zero
    686c:	003fb506 	br	6744 <__kernel_rem_pio2+0xbe8>

00006870 <__kernel_sin>:
    6870:	02200034 	movhi	r8,32768
    6874:	defff304 	addi	sp,sp,-52
    6878:	423fffc4 	addi	r8,r8,-1
    687c:	dd400815 	stw	r21,32(sp)
    6880:	dd000715 	stw	r20,28(sp)
    6884:	dc400415 	stw	r17,16(sp)
    6888:	dc000315 	stw	r16,12(sp)
    688c:	dfc00c15 	stw	ra,48(sp)
    6890:	df000b15 	stw	fp,44(sp)
    6894:	ddc00a15 	stw	r23,40(sp)
    6898:	dd800915 	stw	r22,36(sp)
    689c:	dcc00615 	stw	r19,24(sp)
    68a0:	dc800515 	stw	r18,20(sp)
    68a4:	2a10703a 	and	r8,r5,r8
    68a8:	00cf9034 	movhi	r3,15936
    68ac:	2821883a 	mov	r16,r5
    68b0:	2023883a 	mov	r17,r4
    68b4:	302b883a 	mov	r21,r6
    68b8:	3829883a 	mov	r20,r7
    68bc:	40c0020e 	bge	r8,r3,68c8 <__kernel_sin+0x58>
    68c0:	0009a1c0 	call	9a1c <__fixdfsi>
    68c4:	10009926 	beq	r2,zero,6b2c <__kernel_sin+0x2bc>
    68c8:	880d883a 	mov	r6,r17
    68cc:	800f883a 	mov	r7,r16
    68d0:	8809883a 	mov	r4,r17
    68d4:	800b883a 	mov	r5,r16
    68d8:	00089100 	call	8910 <__muldf3>
    68dc:	100d883a 	mov	r6,r2
    68e0:	180f883a 	mov	r7,r3
    68e4:	8809883a 	mov	r4,r17
    68e8:	800b883a 	mov	r5,r16
    68ec:	1027883a 	mov	r19,r2
    68f0:	1825883a 	mov	r18,r3
    68f4:	00089100 	call	8910 <__muldf3>
    68f8:	0196b434 	movhi	r6,23248
    68fc:	01cf79b4 	movhi	r7,15846
    6900:	31b55f04 	addi	r6,r6,-10884
    6904:	39f64e84 	addi	r7,r7,-9926
    6908:	9809883a 	mov	r4,r19
    690c:	900b883a 	mov	r5,r18
    6910:	102f883a 	mov	r23,r2
    6914:	182d883a 	mov	r22,r3
    6918:	00089100 	call	8910 <__muldf3>
    691c:	01a28b34 	movhi	r6,35372
    6920:	01cf96f4 	movhi	r7,15963
    6924:	31a73ac4 	addi	r6,r6,-25365
    6928:	39f97984 	addi	r7,r7,-6682
    692c:	1009883a 	mov	r4,r2
    6930:	180b883a 	mov	r5,r3
    6934:	00090bc0 	call	90bc <__subdf3>
    6938:	980d883a 	mov	r6,r19
    693c:	900f883a 	mov	r7,r18
    6940:	1009883a 	mov	r4,r2
    6944:	180b883a 	mov	r5,r3
    6948:	00089100 	call	8910 <__muldf3>
    694c:	0195ecb4 	movhi	r6,22450
    6950:	01cfb1f4 	movhi	r7,16071
    6954:	31bf9f44 	addi	r6,r6,-387
    6958:	39c778c4 	addi	r7,r7,7651
    695c:	1009883a 	mov	r4,r2
    6960:	180b883a 	mov	r5,r3
    6964:	00074bc0 	call	74bc <__adddf3>
    6968:	980d883a 	mov	r6,r19
    696c:	900f883a 	mov	r7,r18
    6970:	1009883a 	mov	r4,r2
    6974:	180b883a 	mov	r5,r3
    6978:	00089100 	call	8910 <__muldf3>
    697c:	01867074 	movhi	r6,6593
    6980:	01cfcab4 	movhi	r7,16170
    6984:	31987544 	addi	r6,r6,25045
    6988:	39c06804 	addi	r7,r7,416
    698c:	1009883a 	mov	r4,r2
    6990:	180b883a 	mov	r5,r3
    6994:	00090bc0 	call	90bc <__subdf3>
    6998:	980d883a 	mov	r6,r19
    699c:	900f883a 	mov	r7,r18
    69a0:	1009883a 	mov	r4,r2
    69a4:	180b883a 	mov	r5,r3
    69a8:	00089100 	call	8910 <__muldf3>
    69ac:	01844474 	movhi	r6,4369
    69b0:	01cfe074 	movhi	r7,16257
    69b4:	31be2984 	addi	r6,r6,-1882
    69b8:	39c44444 	addi	r7,r7,4369
    69bc:	1009883a 	mov	r4,r2
    69c0:	180b883a 	mov	r5,r3
    69c4:	00074bc0 	call	74bc <__adddf3>
    69c8:	1011883a 	mov	r8,r2
    69cc:	d8800d17 	ldw	r2,52(sp)
    69d0:	1839883a 	mov	fp,r3
    69d4:	10003e26 	beq	r2,zero,6ad0 <__kernel_sin+0x260>
    69d8:	000d883a 	mov	r6,zero
    69dc:	01cff834 	movhi	r7,16352
    69e0:	a809883a 	mov	r4,r21
    69e4:	a00b883a 	mov	r5,r20
    69e8:	da000215 	stw	r8,8(sp)
    69ec:	00089100 	call	8910 <__muldf3>
    69f0:	da000217 	ldw	r8,8(sp)
    69f4:	e00f883a 	mov	r7,fp
    69f8:	b809883a 	mov	r4,r23
    69fc:	400d883a 	mov	r6,r8
    6a00:	b00b883a 	mov	r5,r22
    6a04:	d8800115 	stw	r2,4(sp)
    6a08:	d8c00015 	stw	r3,0(sp)
    6a0c:	00089100 	call	8910 <__muldf3>
    6a10:	da800117 	ldw	r10,4(sp)
    6a14:	da400017 	ldw	r9,0(sp)
    6a18:	100d883a 	mov	r6,r2
    6a1c:	5009883a 	mov	r4,r10
    6a20:	480b883a 	mov	r5,r9
    6a24:	180f883a 	mov	r7,r3
    6a28:	00090bc0 	call	90bc <__subdf3>
    6a2c:	980d883a 	mov	r6,r19
    6a30:	900f883a 	mov	r7,r18
    6a34:	1009883a 	mov	r4,r2
    6a38:	180b883a 	mov	r5,r3
    6a3c:	00089100 	call	8910 <__muldf3>
    6a40:	a80d883a 	mov	r6,r21
    6a44:	a00f883a 	mov	r7,r20
    6a48:	1009883a 	mov	r4,r2
    6a4c:	180b883a 	mov	r5,r3
    6a50:	00090bc0 	call	90bc <__subdf3>
    6a54:	01955574 	movhi	r6,21845
    6a58:	01cff174 	movhi	r7,16325
    6a5c:	31955244 	addi	r6,r6,21833
    6a60:	39d55544 	addi	r7,r7,21845
    6a64:	b809883a 	mov	r4,r23
    6a68:	b00b883a 	mov	r5,r22
    6a6c:	1027883a 	mov	r19,r2
    6a70:	1825883a 	mov	r18,r3
    6a74:	00089100 	call	8910 <__muldf3>
    6a78:	100d883a 	mov	r6,r2
    6a7c:	180f883a 	mov	r7,r3
    6a80:	9809883a 	mov	r4,r19
    6a84:	900b883a 	mov	r5,r18
    6a88:	00074bc0 	call	74bc <__adddf3>
    6a8c:	100d883a 	mov	r6,r2
    6a90:	180f883a 	mov	r7,r3
    6a94:	8809883a 	mov	r4,r17
    6a98:	800b883a 	mov	r5,r16
    6a9c:	00090bc0 	call	90bc <__subdf3>
    6aa0:	dfc00c17 	ldw	ra,48(sp)
    6aa4:	df000b17 	ldw	fp,44(sp)
    6aa8:	ddc00a17 	ldw	r23,40(sp)
    6aac:	dd800917 	ldw	r22,36(sp)
    6ab0:	dd400817 	ldw	r21,32(sp)
    6ab4:	dd000717 	ldw	r20,28(sp)
    6ab8:	dcc00617 	ldw	r19,24(sp)
    6abc:	dc800517 	ldw	r18,20(sp)
    6ac0:	dc400417 	ldw	r17,16(sp)
    6ac4:	dc000317 	ldw	r16,12(sp)
    6ac8:	dec00d04 	addi	sp,sp,52
    6acc:	f800283a 	ret
    6ad0:	400d883a 	mov	r6,r8
    6ad4:	9809883a 	mov	r4,r19
    6ad8:	900b883a 	mov	r5,r18
    6adc:	180f883a 	mov	r7,r3
    6ae0:	00089100 	call	8910 <__muldf3>
    6ae4:	01955574 	movhi	r6,21845
    6ae8:	01cff174 	movhi	r7,16325
    6aec:	31955244 	addi	r6,r6,21833
    6af0:	39d55544 	addi	r7,r7,21845
    6af4:	1009883a 	mov	r4,r2
    6af8:	180b883a 	mov	r5,r3
    6afc:	00090bc0 	call	90bc <__subdf3>
    6b00:	b80d883a 	mov	r6,r23
    6b04:	b00f883a 	mov	r7,r22
    6b08:	1009883a 	mov	r4,r2
    6b0c:	180b883a 	mov	r5,r3
    6b10:	00089100 	call	8910 <__muldf3>
    6b14:	880d883a 	mov	r6,r17
    6b18:	800f883a 	mov	r7,r16
    6b1c:	1009883a 	mov	r4,r2
    6b20:	180b883a 	mov	r5,r3
    6b24:	00074bc0 	call	74bc <__adddf3>
    6b28:	003fdd06 	br	6aa0 <__kernel_sin+0x230>
    6b2c:	8805883a 	mov	r2,r17
    6b30:	8007883a 	mov	r3,r16
    6b34:	003fda06 	br	6aa0 <__kernel_sin+0x230>

00006b38 <with_errno>:
    6b38:	defffc04 	addi	sp,sp,-16
    6b3c:	dc800215 	stw	r18,8(sp)
    6b40:	dc400115 	stw	r17,4(sp)
    6b44:	dc000015 	stw	r16,0(sp)
    6b48:	dfc00315 	stw	ra,12(sp)
    6b4c:	2023883a 	mov	r17,r4
    6b50:	2821883a 	mov	r16,r5
    6b54:	3025883a 	mov	r18,r6
    6b58:	0009ea40 	call	9ea4 <__errno>
    6b5c:	14800015 	stw	r18,0(r2)
    6b60:	8007883a 	mov	r3,r16
    6b64:	8805883a 	mov	r2,r17
    6b68:	dfc00317 	ldw	ra,12(sp)
    6b6c:	dc800217 	ldw	r18,8(sp)
    6b70:	dc400117 	ldw	r17,4(sp)
    6b74:	dc000017 	ldw	r16,0(sp)
    6b78:	dec00404 	addi	sp,sp,16
    6b7c:	f800283a 	ret

00006b80 <xflow>:
    6b80:	defffd04 	addi	sp,sp,-12
    6b84:	2005883a 	mov	r2,r4
    6b88:	dfc00215 	stw	ra,8(sp)
    6b8c:	2809883a 	mov	r4,r5
    6b90:	300b883a 	mov	r5,r6
    6b94:	10000c26 	beq	r2,zero,6bc8 <xflow+0x48>
    6b98:	30a0003c 	xorhi	r2,r6,32768
    6b9c:	d9000015 	stw	r4,0(sp)
    6ba0:	d8800115 	stw	r2,4(sp)
    6ba4:	d9800017 	ldw	r6,0(sp)
    6ba8:	d9c00117 	ldw	r7,4(sp)
    6bac:	00089100 	call	8910 <__muldf3>
    6bb0:	01800884 	movi	r6,34
    6bb4:	1009883a 	mov	r4,r2
    6bb8:	180b883a 	mov	r5,r3
    6bbc:	dfc00217 	ldw	ra,8(sp)
    6bc0:	dec00304 	addi	sp,sp,12
    6bc4:	0006b381 	jmpi	6b38 <with_errno>
    6bc8:	3005883a 	mov	r2,r6
    6bcc:	003ff306 	br	6b9c <xflow+0x1c>

00006bd0 <__math_uflow>:
    6bd0:	000b883a 	mov	r5,zero
    6bd4:	01840034 	movhi	r6,4096
    6bd8:	0006b801 	jmpi	6b80 <xflow>

00006bdc <__math_may_uflow>:
    6bdc:	000b883a 	mov	r5,zero
    6be0:	01879634 	movhi	r6,7768
    6be4:	0006b801 	jmpi	6b80 <xflow>

00006be8 <__math_oflow>:
    6be8:	000b883a 	mov	r5,zero
    6bec:	019c0034 	movhi	r6,28672
    6bf0:	0006b801 	jmpi	6b80 <xflow>

00006bf4 <__math_divzero>:
    6bf4:	defffd04 	addi	sp,sp,-12
    6bf8:	dfc00215 	stw	ra,8(sp)
    6bfc:	20000e1e 	bne	r4,zero,6c38 <__math_divzero+0x44>
    6c00:	008ffc34 	movhi	r2,16368
    6c04:	d8000015 	stw	zero,0(sp)
    6c08:	d8800115 	stw	r2,4(sp)
    6c0c:	d9000017 	ldw	r4,0(sp)
    6c10:	d9400117 	ldw	r5,4(sp)
    6c14:	000d883a 	mov	r6,zero
    6c18:	000f883a 	mov	r7,zero
    6c1c:	0007dac0 	call	7dac <__divdf3>
    6c20:	01800884 	movi	r6,34
    6c24:	1009883a 	mov	r4,r2
    6c28:	180b883a 	mov	r5,r3
    6c2c:	dfc00217 	ldw	ra,8(sp)
    6c30:	dec00304 	addi	sp,sp,12
    6c34:	0006b381 	jmpi	6b38 <with_errno>
    6c38:	00affc34 	movhi	r2,49136
    6c3c:	003ff106 	br	6c04 <__math_divzero+0x10>

00006c40 <__math_invalid>:
    6c40:	defffd04 	addi	sp,sp,-12
    6c44:	200d883a 	mov	r6,r4
    6c48:	280f883a 	mov	r7,r5
    6c4c:	dfc00215 	stw	ra,8(sp)
    6c50:	dc400115 	stw	r17,4(sp)
    6c54:	dc000015 	stw	r16,0(sp)
    6c58:	2023883a 	mov	r17,r4
    6c5c:	2821883a 	mov	r16,r5
    6c60:	00090bc0 	call	90bc <__subdf3>
    6c64:	100d883a 	mov	r6,r2
    6c68:	180f883a 	mov	r7,r3
    6c6c:	1009883a 	mov	r4,r2
    6c70:	180b883a 	mov	r5,r3
    6c74:	0007dac0 	call	7dac <__divdf3>
    6c78:	880d883a 	mov	r6,r17
    6c7c:	800f883a 	mov	r7,r16
    6c80:	8809883a 	mov	r4,r17
    6c84:	800b883a 	mov	r5,r16
    6c88:	1023883a 	mov	r17,r2
    6c8c:	1821883a 	mov	r16,r3
    6c90:	00099c80 	call	99c8 <__unorddf2>
    6c94:	1000081e 	bne	r2,zero,6cb8 <__math_invalid+0x78>
    6c98:	01800844 	movi	r6,33
    6c9c:	8809883a 	mov	r4,r17
    6ca0:	800b883a 	mov	r5,r16
    6ca4:	dfc00217 	ldw	ra,8(sp)
    6ca8:	dc400117 	ldw	r17,4(sp)
    6cac:	dc000017 	ldw	r16,0(sp)
    6cb0:	dec00304 	addi	sp,sp,12
    6cb4:	0006b381 	jmpi	6b38 <with_errno>
    6cb8:	8805883a 	mov	r2,r17
    6cbc:	8007883a 	mov	r3,r16
    6cc0:	dfc00217 	ldw	ra,8(sp)
    6cc4:	dc400117 	ldw	r17,4(sp)
    6cc8:	dc000017 	ldw	r16,0(sp)
    6ccc:	dec00304 	addi	sp,sp,12
    6cd0:	f800283a 	ret

00006cd4 <__math_check_uflow>:
    6cd4:	defffd04 	addi	sp,sp,-12
    6cd8:	000d883a 	mov	r6,zero
    6cdc:	000f883a 	mov	r7,zero
    6ce0:	dc400115 	stw	r17,4(sp)
    6ce4:	dc000015 	stw	r16,0(sp)
    6ce8:	dfc00215 	stw	ra,8(sp)
    6cec:	2023883a 	mov	r17,r4
    6cf0:	2821883a 	mov	r16,r5
    6cf4:	00086c00 	call	86c0 <__eqdf2>
    6cf8:	10000726 	beq	r2,zero,6d18 <__math_check_uflow+0x44>
    6cfc:	8805883a 	mov	r2,r17
    6d00:	8007883a 	mov	r3,r16
    6d04:	dfc00217 	ldw	ra,8(sp)
    6d08:	dc400117 	ldw	r17,4(sp)
    6d0c:	dc000017 	ldw	r16,0(sp)
    6d10:	dec00304 	addi	sp,sp,12
    6d14:	f800283a 	ret
    6d18:	01800884 	movi	r6,34
    6d1c:	8809883a 	mov	r4,r17
    6d20:	800b883a 	mov	r5,r16
    6d24:	dfc00217 	ldw	ra,8(sp)
    6d28:	dc400117 	ldw	r17,4(sp)
    6d2c:	dc000017 	ldw	r16,0(sp)
    6d30:	dec00304 	addi	sp,sp,12
    6d34:	0006b381 	jmpi	6b38 <with_errno>

00006d38 <__math_check_oflow>:
    6d38:	00a00034 	movhi	r2,32768
    6d3c:	defffc04 	addi	sp,sp,-16
    6d40:	10bfffc4 	addi	r2,r2,-1
    6d44:	dc000015 	stw	r16,0(sp)
    6d48:	01dffc34 	movhi	r7,32752
    6d4c:	28a0703a 	and	r16,r5,r2
    6d50:	dc400115 	stw	r17,4(sp)
    6d54:	01bfffc4 	movi	r6,-1
    6d58:	2823883a 	mov	r17,r5
    6d5c:	39ffffc4 	addi	r7,r7,-1
    6d60:	800b883a 	mov	r5,r16
    6d64:	dc800215 	stw	r18,8(sp)
    6d68:	dfc00315 	stw	ra,12(sp)
    6d6c:	2025883a 	mov	r18,r4
    6d70:	00099c80 	call	99c8 <__unorddf2>
    6d74:	1000071e 	bne	r2,zero,6d94 <__math_check_oflow+0x5c>
    6d78:	01dffc34 	movhi	r7,32752
    6d7c:	01bfffc4 	movi	r6,-1
    6d80:	39ffffc4 	addi	r7,r7,-1
    6d84:	9009883a 	mov	r4,r18
    6d88:	800b883a 	mov	r5,r16
    6d8c:	00088280 	call	8828 <__ledf2>
    6d90:	00800816 	blt	zero,r2,6db4 <__math_check_oflow+0x7c>
    6d94:	9005883a 	mov	r2,r18
    6d98:	8807883a 	mov	r3,r17
    6d9c:	dfc00317 	ldw	ra,12(sp)
    6da0:	dc800217 	ldw	r18,8(sp)
    6da4:	dc400117 	ldw	r17,4(sp)
    6da8:	dc000017 	ldw	r16,0(sp)
    6dac:	dec00404 	addi	sp,sp,16
    6db0:	f800283a 	ret
    6db4:	01800884 	movi	r6,34
    6db8:	9009883a 	mov	r4,r18
    6dbc:	880b883a 	mov	r5,r17
    6dc0:	dfc00317 	ldw	ra,12(sp)
    6dc4:	dc800217 	ldw	r18,8(sp)
    6dc8:	dc400117 	ldw	r17,4(sp)
    6dcc:	dc000017 	ldw	r16,0(sp)
    6dd0:	dec00404 	addi	sp,sp,16
    6dd4:	0006b381 	jmpi	6b38 <with_errno>

00006dd8 <scalbn>:
    6dd8:	2807d53a 	srai	r3,r5,20
    6ddc:	defffe04 	addi	sp,sp,-8
    6de0:	dc000015 	stw	r16,0(sp)
    6de4:	dfc00115 	stw	ra,4(sp)
    6de8:	18c1ffcc 	andi	r3,r3,2047
    6dec:	280f883a 	mov	r7,r5
    6df0:	2005883a 	mov	r2,r4
    6df4:	3021883a 	mov	r16,r6
    6df8:	1800241e 	bne	r3,zero,6e8c <scalbn+0xb4>
    6dfc:	00e00034 	movhi	r3,32768
    6e00:	18ffffc4 	addi	r3,r3,-1
    6e04:	28c6703a 	and	r3,r5,r3
    6e08:	1906b03a 	or	r3,r3,r4
    6e0c:	18003626 	beq	r3,zero,6ee8 <scalbn+0x110>
    6e10:	000d883a 	mov	r6,zero
    6e14:	01d0d434 	movhi	r7,17232
    6e18:	00089100 	call	8910 <__muldf3>
    6e1c:	01bffff4 	movhi	r6,65535
    6e20:	318f2c04 	addi	r6,r6,15536
    6e24:	1009883a 	mov	r4,r2
    6e28:	180f883a 	mov	r7,r3
    6e2c:	81804d16 	blt	r16,r6,6f64 <scalbn+0x18c>
    6e30:	1807d53a 	srai	r3,r3,20
    6e34:	3811883a 	mov	r8,r7
    6e38:	18c1ffcc 	andi	r3,r3,2047
    6e3c:	18fff284 	addi	r3,r3,-54
    6e40:	80c7883a 	add	r3,r16,r3
    6e44:	1901ffd0 	cmplti	r4,r3,2047
    6e48:	20001926 	beq	r4,zero,6eb0 <scalbn+0xd8>
    6e4c:	00c03c16 	blt	zero,r3,6f40 <scalbn+0x168>
    6e50:	193ff2c8 	cmpgei	r4,r3,-53
    6e54:	20002c1e 	bne	r4,zero,6f08 <scalbn+0x130>
    6e58:	00b0d414 	movui	r2,50000
    6e5c:	14001416 	blt	r2,r16,6eb0 <scalbn+0xd8>
    6e60:	0130be74 	movhi	r4,49913
    6e64:	01406974 	movhi	r5,421
    6e68:	213cd644 	addi	r4,r4,-3239
    6e6c:	295b87c4 	addi	r5,r5,28191
    6e70:	38004616 	blt	r7,zero,6f8c <scalbn+0x1b4>
    6e74:	01b0be74 	movhi	r6,49913
    6e78:	01c06974 	movhi	r7,421
    6e7c:	31bcd644 	addi	r6,r6,-3239
    6e80:	39db87c4 	addi	r7,r7,28191
    6e84:	00089100 	call	8910 <__muldf3>
    6e88:	00001306 	br	6ed8 <scalbn+0x100>
    6e8c:	1981ffd8 	cmpnei	r6,r3,2047
    6e90:	2811883a 	mov	r8,r5
    6e94:	303fea1e 	bne	r6,zero,6e40 <scalbn+0x68>
    6e98:	200d883a 	mov	r6,r4
    6e9c:	00074bc0 	call	74bc <__adddf3>
    6ea0:	dfc00117 	ldw	ra,4(sp)
    6ea4:	dc000017 	ldw	r16,0(sp)
    6ea8:	dec00204 	addi	sp,sp,8
    6eac:	f800283a 	ret
    6eb0:	01220034 	movhi	r4,34816
    6eb4:	015f8e34 	movhi	r5,32312
    6eb8:	211d6704 	addi	r4,r4,30108
    6ebc:	29790f04 	addi	r5,r5,-7108
    6ec0:	38000e16 	blt	r7,zero,6efc <scalbn+0x124>
    6ec4:	01a20034 	movhi	r6,34816
    6ec8:	01df8e34 	movhi	r7,32312
    6ecc:	319d6704 	addi	r6,r6,30108
    6ed0:	39f90f04 	addi	r7,r7,-7108
    6ed4:	00089100 	call	8910 <__muldf3>
    6ed8:	dfc00117 	ldw	ra,4(sp)
    6edc:	dc000017 	ldw	r16,0(sp)
    6ee0:	dec00204 	addi	sp,sp,8
    6ee4:	f800283a 	ret
    6ee8:	2807883a 	mov	r3,r5
    6eec:	dfc00117 	ldw	ra,4(sp)
    6ef0:	dc000017 	ldw	r16,0(sp)
    6ef4:	dec00204 	addi	sp,sp,8
    6ef8:	f800283a 	ret
    6efc:	017f8e34 	movhi	r5,65080
    6f00:	29790f04 	addi	r5,r5,-7108
    6f04:	003fef06 	br	6ec4 <scalbn+0xec>
    6f08:	18c00d84 	addi	r3,r3,54
    6f0c:	1806953a 	slli	r3,r3,20
    6f10:	01600434 	movhi	r5,32784
    6f14:	297fffc4 	addi	r5,r5,-1
    6f18:	414a703a 	and	r5,r8,r5
    6f1c:	000d883a 	mov	r6,zero
    6f20:	01cf2434 	movhi	r7,15504
    6f24:	1009883a 	mov	r4,r2
    6f28:	194ab03a 	or	r5,r3,r5
    6f2c:	00089100 	call	8910 <__muldf3>
    6f30:	dfc00117 	ldw	ra,4(sp)
    6f34:	dc000017 	ldw	r16,0(sp)
    6f38:	dec00204 	addi	sp,sp,8
    6f3c:	f800283a 	ret
    6f40:	1806953a 	slli	r3,r3,20
    6f44:	01e00434 	movhi	r7,32784
    6f48:	39ffffc4 	addi	r7,r7,-1
    6f4c:	41ce703a 	and	r7,r8,r7
    6f50:	38c6b03a 	or	r3,r7,r3
    6f54:	dfc00117 	ldw	ra,4(sp)
    6f58:	dc000017 	ldw	r16,0(sp)
    6f5c:	dec00204 	addi	sp,sp,8
    6f60:	f800283a 	ret
    6f64:	01b0be74 	movhi	r6,49913
    6f68:	01c06974 	movhi	r7,421
    6f6c:	31bcd644 	addi	r6,r6,-3239
    6f70:	39db87c4 	addi	r7,r7,28191
    6f74:	180b883a 	mov	r5,r3
    6f78:	00089100 	call	8910 <__muldf3>
    6f7c:	dfc00117 	ldw	ra,4(sp)
    6f80:	dc000017 	ldw	r16,0(sp)
    6f84:	dec00204 	addi	sp,sp,8
    6f88:	f800283a 	ret
    6f8c:	01606974 	movhi	r5,33189
    6f90:	295b87c4 	addi	r5,r5,28191
    6f94:	003fb706 	br	6e74 <scalbn+0x9c>

00006f98 <__divsi3>:
    6f98:	20001a16 	blt	r4,zero,7004 <__divsi3+0x6c>
    6f9c:	000f883a 	mov	r7,zero
    6fa0:	2800020e 	bge	r5,zero,6fac <__divsi3+0x14>
    6fa4:	014bc83a 	sub	r5,zero,r5
    6fa8:	39c0005c 	xori	r7,r7,1
    6fac:	200d883a 	mov	r6,r4
    6fb0:	00c00044 	movi	r3,1
    6fb4:	2900092e 	bgeu	r5,r4,6fdc <__divsi3+0x44>
    6fb8:	00800804 	movi	r2,32
    6fbc:	00c00044 	movi	r3,1
    6fc0:	00000106 	br	6fc8 <__divsi3+0x30>
    6fc4:	10001226 	beq	r2,zero,7010 <__divsi3+0x78>
    6fc8:	294b883a 	add	r5,r5,r5
    6fcc:	10bfffc4 	addi	r2,r2,-1
    6fd0:	18c7883a 	add	r3,r3,r3
    6fd4:	293ffb36 	bltu	r5,r4,6fc4 <__divsi3+0x2c>
    6fd8:	18000d26 	beq	r3,zero,7010 <__divsi3+0x78>
    6fdc:	0005883a 	mov	r2,zero
    6fe0:	31400236 	bltu	r6,r5,6fec <__divsi3+0x54>
    6fe4:	314dc83a 	sub	r6,r6,r5
    6fe8:	10c4b03a 	or	r2,r2,r3
    6fec:	1806d07a 	srli	r3,r3,1
    6ff0:	280ad07a 	srli	r5,r5,1
    6ff4:	183ffa1e 	bne	r3,zero,6fe0 <__divsi3+0x48>
    6ff8:	38000126 	beq	r7,zero,7000 <__divsi3+0x68>
    6ffc:	0085c83a 	sub	r2,zero,r2
    7000:	f800283a 	ret
    7004:	0109c83a 	sub	r4,zero,r4
    7008:	01c00044 	movi	r7,1
    700c:	003fe406 	br	6fa0 <__divsi3+0x8>
    7010:	0005883a 	mov	r2,zero
    7014:	003ff806 	br	6ff8 <__divsi3+0x60>

00007018 <__modsi3>:
    7018:	20001916 	blt	r4,zero,7080 <__modsi3+0x68>
    701c:	000f883a 	mov	r7,zero
    7020:	2005883a 	mov	r2,r4
    7024:	2800010e 	bge	r5,zero,702c <__modsi3+0x14>
    7028:	014bc83a 	sub	r5,zero,r5
    702c:	00c00044 	movi	r3,1
    7030:	2900092e 	bgeu	r5,r4,7058 <__modsi3+0x40>
    7034:	01800804 	movi	r6,32
    7038:	00c00044 	movi	r3,1
    703c:	00000106 	br	7044 <__modsi3+0x2c>
    7040:	30000d26 	beq	r6,zero,7078 <__modsi3+0x60>
    7044:	294b883a 	add	r5,r5,r5
    7048:	31bfffc4 	addi	r6,r6,-1
    704c:	18c7883a 	add	r3,r3,r3
    7050:	293ffb36 	bltu	r5,r4,7040 <__modsi3+0x28>
    7054:	18000826 	beq	r3,zero,7078 <__modsi3+0x60>
    7058:	1806d07a 	srli	r3,r3,1
    705c:	11400136 	bltu	r2,r5,7064 <__modsi3+0x4c>
    7060:	1145c83a 	sub	r2,r2,r5
    7064:	280ad07a 	srli	r5,r5,1
    7068:	183ffb1e 	bne	r3,zero,7058 <__modsi3+0x40>
    706c:	38000126 	beq	r7,zero,7074 <__modsi3+0x5c>
    7070:	0085c83a 	sub	r2,zero,r2
    7074:	f800283a 	ret
    7078:	2005883a 	mov	r2,r4
    707c:	003ffb06 	br	706c <__modsi3+0x54>
    7080:	0109c83a 	sub	r4,zero,r4
    7084:	01c00044 	movi	r7,1
    7088:	003fe506 	br	7020 <__modsi3+0x8>

0000708c <__udivsi3>:
    708c:	200d883a 	mov	r6,r4
    7090:	2900152e 	bgeu	r5,r4,70e8 <__udivsi3+0x5c>
    7094:	28001416 	blt	r5,zero,70e8 <__udivsi3+0x5c>
    7098:	00800804 	movi	r2,32
    709c:	00c00044 	movi	r3,1
    70a0:	00000206 	br	70ac <__udivsi3+0x20>
    70a4:	10000e26 	beq	r2,zero,70e0 <__udivsi3+0x54>
    70a8:	28000516 	blt	r5,zero,70c0 <__udivsi3+0x34>
    70ac:	294b883a 	add	r5,r5,r5
    70b0:	10bfffc4 	addi	r2,r2,-1
    70b4:	18c7883a 	add	r3,r3,r3
    70b8:	293ffa36 	bltu	r5,r4,70a4 <__udivsi3+0x18>
    70bc:	18000826 	beq	r3,zero,70e0 <__udivsi3+0x54>
    70c0:	0005883a 	mov	r2,zero
    70c4:	31400236 	bltu	r6,r5,70d0 <__udivsi3+0x44>
    70c8:	314dc83a 	sub	r6,r6,r5
    70cc:	10c4b03a 	or	r2,r2,r3
    70d0:	1806d07a 	srli	r3,r3,1
    70d4:	280ad07a 	srli	r5,r5,1
    70d8:	183ffa1e 	bne	r3,zero,70c4 <__udivsi3+0x38>
    70dc:	f800283a 	ret
    70e0:	0005883a 	mov	r2,zero
    70e4:	f800283a 	ret
    70e8:	00c00044 	movi	r3,1
    70ec:	003ff406 	br	70c0 <__udivsi3+0x34>

000070f0 <__umodsi3>:
    70f0:	2005883a 	mov	r2,r4
    70f4:	2900132e 	bgeu	r5,r4,7144 <__umodsi3+0x54>
    70f8:	28001216 	blt	r5,zero,7144 <__umodsi3+0x54>
    70fc:	01800804 	movi	r6,32
    7100:	00c00044 	movi	r3,1
    7104:	00000206 	br	7110 <__umodsi3+0x20>
    7108:	30000c26 	beq	r6,zero,713c <__umodsi3+0x4c>
    710c:	28000516 	blt	r5,zero,7124 <__umodsi3+0x34>
    7110:	294b883a 	add	r5,r5,r5
    7114:	31bfffc4 	addi	r6,r6,-1
    7118:	18c7883a 	add	r3,r3,r3
    711c:	293ffa36 	bltu	r5,r4,7108 <__umodsi3+0x18>
    7120:	18000626 	beq	r3,zero,713c <__umodsi3+0x4c>
    7124:	1806d07a 	srli	r3,r3,1
    7128:	11400136 	bltu	r2,r5,7130 <__umodsi3+0x40>
    712c:	1145c83a 	sub	r2,r2,r5
    7130:	280ad07a 	srli	r5,r5,1
    7134:	183ffb1e 	bne	r3,zero,7124 <__umodsi3+0x34>
    7138:	f800283a 	ret
    713c:	2005883a 	mov	r2,r4
    7140:	f800283a 	ret
    7144:	00c00044 	movi	r3,1
    7148:	003ff606 	br	7124 <__umodsi3+0x34>

0000714c <__mulsi3>:
    714c:	0005883a 	mov	r2,zero
    7150:	20000726 	beq	r4,zero,7170 <__mulsi3+0x24>
    7154:	20c0004c 	andi	r3,r4,1
    7158:	2008d07a 	srli	r4,r4,1
    715c:	18000126 	beq	r3,zero,7164 <__mulsi3+0x18>
    7160:	1145883a 	add	r2,r2,r5
    7164:	294b883a 	add	r5,r5,r5
    7168:	203ffa1e 	bne	r4,zero,7154 <__mulsi3+0x8>
    716c:	f800283a 	ret
    7170:	f800283a 	ret

00007174 <__eqsf2>:
    7174:	200cd5fa 	srli	r6,r4,23
    7178:	2806d5fa 	srli	r3,r5,23
    717c:	00802034 	movhi	r2,128
    7180:	31803fcc 	andi	r6,r6,255
    7184:	10bfffc4 	addi	r2,r2,-1
    7188:	31c03fd8 	cmpnei	r7,r6,255
    718c:	2010d7fa 	srli	r8,r4,31
    7190:	2812d7fa 	srli	r9,r5,31
    7194:	1108703a 	and	r4,r2,r4
    7198:	18c03fcc 	andi	r3,r3,255
    719c:	1144703a 	and	r2,r2,r5
    71a0:	38000626 	beq	r7,zero,71bc <__eqsf2+0x48>
    71a4:	19403fe0 	cmpeqi	r5,r3,255
    71a8:	2800021e 	bne	r5,zero,71b4 <__eqsf2+0x40>
    71ac:	30c0011e 	bne	r6,r3,71b4 <__eqsf2+0x40>
    71b0:	20800626 	beq	r4,r2,71cc <__eqsf2+0x58>
    71b4:	00800044 	movi	r2,1
    71b8:	f800283a 	ret
    71bc:	203ffd1e 	bne	r4,zero,71b4 <__eqsf2+0x40>
    71c0:	18c03fd8 	cmpnei	r3,r3,255
    71c4:	183ffb1e 	bne	r3,zero,71b4 <__eqsf2+0x40>
    71c8:	103ffa1e 	bne	r2,zero,71b4 <__eqsf2+0x40>
    71cc:	42400326 	beq	r8,r9,71dc <__eqsf2+0x68>
    71d0:	303ff81e 	bne	r6,zero,71b4 <__eqsf2+0x40>
    71d4:	2004c03a 	cmpne	r2,r4,zero
    71d8:	f800283a 	ret
    71dc:	0005883a 	mov	r2,zero
    71e0:	f800283a 	ret

000071e4 <__gesf2>:
    71e4:	200cd5fa 	srli	r6,r4,23
    71e8:	280ed5fa 	srli	r7,r5,23
    71ec:	00c02034 	movhi	r3,128
    71f0:	31803fcc 	andi	r6,r6,255
    71f4:	18ffffc4 	addi	r3,r3,-1
    71f8:	32003fd8 	cmpnei	r8,r6,255
    71fc:	2012d7fa 	srli	r9,r4,31
    7200:	2804d7fa 	srli	r2,r5,31
    7204:	1908703a 	and	r4,r3,r4
    7208:	1946703a 	and	r3,r3,r5
    720c:	39403fcc 	andi	r5,r7,255
    7210:	40000826 	beq	r8,zero,7234 <__gesf2+0x50>
    7214:	29c03fd8 	cmpnei	r7,r5,255
    7218:	38000926 	beq	r7,zero,7240 <__gesf2+0x5c>
    721c:	3000121e 	bne	r6,zero,7268 <__gesf2+0x84>
    7220:	28000e1e 	bne	r5,zero,725c <__gesf2+0x78>
    7224:	18000d1e 	bne	r3,zero,725c <__gesf2+0x78>
    7228:	2000081e 	bne	r4,zero,724c <__gesf2+0x68>
    722c:	0005883a 	mov	r2,zero
    7230:	f800283a 	ret
    7234:	2000171e 	bne	r4,zero,7294 <__gesf2+0xb0>
    7238:	29c03fe0 	cmpeqi	r7,r5,255
    723c:	38000a26 	beq	r7,zero,7268 <__gesf2+0x84>
    7240:	1800141e 	bne	r3,zero,7294 <__gesf2+0xb0>
    7244:	30000526 	beq	r6,zero,725c <__gesf2+0x78>
    7248:	48800a26 	beq	r9,r2,7274 <__gesf2+0x90>
    724c:	00800044 	movi	r2,1
    7250:	48000426 	beq	r9,zero,7264 <__gesf2+0x80>
    7254:	00bfffc4 	movi	r2,-1
    7258:	f800283a 	ret
    725c:	203ffa1e 	bne	r4,zero,7248 <__gesf2+0x64>
    7260:	103ffc26 	beq	r2,zero,7254 <__gesf2+0x70>
    7264:	f800283a 	ret
    7268:	283ff71e 	bne	r5,zero,7248 <__gesf2+0x64>
    726c:	183ff61e 	bne	r3,zero,7248 <__gesf2+0x64>
    7270:	003ff606 	br	724c <__gesf2+0x68>
    7274:	29800416 	blt	r5,r6,7288 <__gesf2+0xa4>
    7278:	317ff916 	blt	r6,r5,7260 <__gesf2+0x7c>
    727c:	19000236 	bltu	r3,r4,7288 <__gesf2+0xa4>
    7280:	20ffea2e 	bgeu	r4,r3,722c <__gesf2+0x48>
    7284:	003ff606 	br	7260 <__gesf2+0x7c>
    7288:	103ff21e 	bne	r2,zero,7254 <__gesf2+0x70>
    728c:	00800044 	movi	r2,1
    7290:	f800283a 	ret
    7294:	00bfff84 	movi	r2,-2
    7298:	f800283a 	ret

0000729c <__floatsisf>:
    729c:	defffd04 	addi	sp,sp,-12
    72a0:	dfc00215 	stw	ra,8(sp)
    72a4:	dc400115 	stw	r17,4(sp)
    72a8:	dc000015 	stw	r16,0(sp)
    72ac:	20001226 	beq	r4,zero,72f8 <__floatsisf+0x5c>
    72b0:	2022d7fa 	srli	r17,r4,31
    72b4:	2021883a 	mov	r16,r4
    72b8:	20003816 	blt	r4,zero,739c <__floatsisf+0x100>
    72bc:	8009883a 	mov	r4,r16
    72c0:	0009e500 	call	9e50 <__clzsi2>
    72c4:	1009883a 	mov	r4,r2
    72c8:	00802784 	movi	r2,158
    72cc:	1105c83a 	sub	r2,r2,r4
    72d0:	10c025c8 	cmpgei	r3,r2,151
    72d4:	1800151e 	bne	r3,zero,732c <__floatsisf+0x90>
    72d8:	20c00248 	cmpgei	r3,r4,9
    72dc:	18003126 	beq	r3,zero,73a4 <__floatsisf+0x108>
    72e0:	213ffe04 	addi	r4,r4,-8
    72e4:	8120983a 	sll	r16,r16,r4
    72e8:	00c02034 	movhi	r3,128
    72ec:	18ffffc4 	addi	r3,r3,-1
    72f0:	80e0703a 	and	r16,r16,r3
    72f4:	00000306 	br	7304 <__floatsisf+0x68>
    72f8:	0023883a 	mov	r17,zero
    72fc:	0005883a 	mov	r2,zero
    7300:	0021883a 	mov	r16,zero
    7304:	10803fcc 	andi	r2,r2,255
    7308:	100495fa 	slli	r2,r2,23
    730c:	882297fa 	slli	r17,r17,31
    7310:	1404b03a 	or	r2,r2,r16
    7314:	1444b03a 	or	r2,r2,r17
    7318:	dfc00217 	ldw	ra,8(sp)
    731c:	dc400117 	ldw	r17,4(sp)
    7320:	dc000017 	ldw	r16,0(sp)
    7324:	dec00304 	addi	sp,sp,12
    7328:	f800283a 	ret
    732c:	10c02690 	cmplti	r3,r2,154
    7330:	1800071e 	bne	r3,zero,7350 <__floatsisf+0xb4>
    7334:	20c006c4 	addi	r3,r4,27
    7338:	01400144 	movi	r5,5
    733c:	80c6983a 	sll	r3,r16,r3
    7340:	290bc83a 	sub	r5,r5,r4
    7344:	814ad83a 	srl	r5,r16,r5
    7348:	1806c03a 	cmpne	r3,r3,zero
    734c:	28e0b03a 	or	r16,r5,r3
    7350:	20c00188 	cmpgei	r3,r4,6
    7354:	1800171e 	bne	r3,zero,73b4 <__floatsisf+0x118>
    7358:	00ff0034 	movhi	r3,64512
    735c:	18ffffc4 	addi	r3,r3,-1
    7360:	818001cc 	andi	r6,r16,7
    7364:	80ca703a 	and	r5,r16,r3
    7368:	30000926 	beq	r6,zero,7390 <__floatsisf+0xf4>
    736c:	818003cc 	andi	r6,r16,15
    7370:	31800120 	cmpeqi	r6,r6,4
    7374:	3000061e 	bne	r6,zero,7390 <__floatsisf+0xf4>
    7378:	29400104 	addi	r5,r5,4
    737c:	2981002c 	andhi	r6,r5,1024
    7380:	30000326 	beq	r6,zero,7390 <__floatsisf+0xf4>
    7384:	28ca703a 	and	r5,r5,r3
    7388:	00c027c4 	movi	r3,159
    738c:	1905c83a 	sub	r2,r3,r4
    7390:	282091ba 	slli	r16,r5,6
    7394:	8020d27a 	srli	r16,r16,9
    7398:	003fda06 	br	7304 <__floatsisf+0x68>
    739c:	0121c83a 	sub	r16,zero,r4
    73a0:	003fc606 	br	72bc <__floatsisf+0x20>
    73a4:	01002034 	movhi	r4,128
    73a8:	213fffc4 	addi	r4,r4,-1
    73ac:	8120703a 	and	r16,r16,r4
    73b0:	003fd406 	br	7304 <__floatsisf+0x68>
    73b4:	20fffec4 	addi	r3,r4,-5
    73b8:	80e0983a 	sll	r16,r16,r3
    73bc:	003fe606 	br	7358 <__floatsisf+0xbc>

000073c0 <__floatunsisf>:
    73c0:	defffe04 	addi	sp,sp,-8
    73c4:	dfc00115 	stw	ra,4(sp)
    73c8:	dc000015 	stw	r16,0(sp)
    73cc:	20000f26 	beq	r4,zero,740c <__floatunsisf+0x4c>
    73d0:	2021883a 	mov	r16,r4
    73d4:	0009e500 	call	9e50 <__clzsi2>
    73d8:	1009883a 	mov	r4,r2
    73dc:	00802784 	movi	r2,158
    73e0:	1105c83a 	sub	r2,r2,r4
    73e4:	10c025c8 	cmpgei	r3,r2,151
    73e8:	1800111e 	bne	r3,zero,7430 <__floatunsisf+0x70>
    73ec:	20c00248 	cmpgei	r3,r4,9
    73f0:	18002b26 	beq	r3,zero,74a0 <__floatunsisf+0xe0>
    73f4:	213ffe04 	addi	r4,r4,-8
    73f8:	8120983a 	sll	r16,r16,r4
    73fc:	00c02034 	movhi	r3,128
    7400:	18ffffc4 	addi	r3,r3,-1
    7404:	80e0703a 	and	r16,r16,r3
    7408:	00000206 	br	7414 <__floatunsisf+0x54>
    740c:	0005883a 	mov	r2,zero
    7410:	0021883a 	mov	r16,zero
    7414:	10803fcc 	andi	r2,r2,255
    7418:	100495fa 	slli	r2,r2,23
    741c:	1404b03a 	or	r2,r2,r16
    7420:	dfc00117 	ldw	ra,4(sp)
    7424:	dc000017 	ldw	r16,0(sp)
    7428:	dec00204 	addi	sp,sp,8
    742c:	f800283a 	ret
    7430:	10c02690 	cmplti	r3,r2,154
    7434:	1800071e 	bne	r3,zero,7454 <__floatunsisf+0x94>
    7438:	20c006c4 	addi	r3,r4,27
    743c:	80ca983a 	sll	r5,r16,r3
    7440:	00c00144 	movi	r3,5
    7444:	1907c83a 	sub	r3,r3,r4
    7448:	80e0d83a 	srl	r16,r16,r3
    744c:	2806c03a 	cmpne	r3,r5,zero
    7450:	1c20b03a 	or	r16,r3,r16
    7454:	20c00188 	cmpgei	r3,r4,6
    7458:	1800151e 	bne	r3,zero,74b0 <__floatunsisf+0xf0>
    745c:	00ff0034 	movhi	r3,64512
    7460:	18ffffc4 	addi	r3,r3,-1
    7464:	818001cc 	andi	r6,r16,7
    7468:	80ca703a 	and	r5,r16,r3
    746c:	30000926 	beq	r6,zero,7494 <__floatunsisf+0xd4>
    7470:	840003cc 	andi	r16,r16,15
    7474:	84000120 	cmpeqi	r16,r16,4
    7478:	8000061e 	bne	r16,zero,7494 <__floatunsisf+0xd4>
    747c:	29400104 	addi	r5,r5,4
    7480:	2981002c 	andhi	r6,r5,1024
    7484:	30000326 	beq	r6,zero,7494 <__floatunsisf+0xd4>
    7488:	28ca703a 	and	r5,r5,r3
    748c:	00c027c4 	movi	r3,159
    7490:	1905c83a 	sub	r2,r3,r4
    7494:	282091ba 	slli	r16,r5,6
    7498:	8020d27a 	srli	r16,r16,9
    749c:	003fdd06 	br	7414 <__floatunsisf+0x54>
    74a0:	01002034 	movhi	r4,128
    74a4:	213fffc4 	addi	r4,r4,-1
    74a8:	8120703a 	and	r16,r16,r4
    74ac:	003fd906 	br	7414 <__floatunsisf+0x54>
    74b0:	20fffec4 	addi	r3,r4,-5
    74b4:	80e0983a 	sll	r16,r16,r3
    74b8:	003fe806 	br	745c <__floatunsisf+0x9c>

000074bc <__adddf3>:
    74bc:	02000434 	movhi	r8,16
    74c0:	423fffc4 	addi	r8,r8,-1
    74c4:	2806d53a 	srli	r3,r5,20
    74c8:	3804d53a 	srli	r2,r7,20
    74cc:	2a14703a 	and	r10,r5,r8
    74d0:	3a12703a 	and	r9,r7,r8
    74d4:	280ad7fa 	srli	r5,r5,31
    74d8:	501490fa 	slli	r10,r10,3
    74dc:	2018d77a 	srli	r12,r4,29
    74e0:	481290fa 	slli	r9,r9,3
    74e4:	3016d77a 	srli	r11,r6,29
    74e8:	380ed7fa 	srli	r7,r7,31
    74ec:	defffb04 	addi	sp,sp,-20
    74f0:	dc800215 	stw	r18,8(sp)
    74f4:	dc000015 	stw	r16,0(sp)
    74f8:	1c81ffcc 	andi	r18,r3,2047
    74fc:	1081ffcc 	andi	r2,r2,2047
    7500:	dfc00415 	stw	ra,16(sp)
    7504:	dcc00315 	stw	r19,12(sp)
    7508:	dc400115 	stw	r17,4(sp)
    750c:	201c90fa 	slli	r14,r4,3
    7510:	301a90fa 	slli	r13,r6,3
    7514:	2821883a 	mov	r16,r5
    7518:	6294b03a 	or	r10,r12,r10
    751c:	5a52b03a 	or	r9,r11,r9
    7520:	9087c83a 	sub	r3,r18,r2
    7524:	29c06126 	beq	r5,r7,76ac <__adddf3+0x1f0>
    7528:	00c0550e 	bge	zero,r3,7680 <__adddf3+0x1c4>
    752c:	10007326 	beq	r2,zero,76fc <__adddf3+0x240>
    7530:	9081ffd8 	cmpnei	r2,r18,2047
    7534:	1000b826 	beq	r2,zero,7818 <__adddf3+0x35c>
    7538:	4a402034 	orhi	r9,r9,128
    753c:	18800e48 	cmpgei	r2,r3,57
    7540:	1000ee1e 	bne	r2,zero,78fc <__adddf3+0x440>
    7544:	18800808 	cmpgei	r2,r3,32
    7548:	10012d1e 	bne	r2,zero,7a00 <__adddf3+0x544>
    754c:	00800804 	movi	r2,32
    7550:	10c5c83a 	sub	r2,r2,r3
    7554:	68c8d83a 	srl	r4,r13,r3
    7558:	48a2983a 	sll	r17,r9,r2
    755c:	689a983a 	sll	r13,r13,r2
    7560:	48c6d83a 	srl	r3,r9,r3
    7564:	8922b03a 	or	r17,r17,r4
    7568:	681ac03a 	cmpne	r13,r13,zero
    756c:	8b62b03a 	or	r17,r17,r13
    7570:	50d5c83a 	sub	r10,r10,r3
    7574:	7463c83a 	sub	r17,r14,r17
    7578:	7451803a 	cmpltu	r8,r14,r17
    757c:	5211c83a 	sub	r8,r10,r8
    7580:	4080202c 	andhi	r2,r8,128
    7584:	10008826 	beq	r2,zero,77a8 <__adddf3+0x2ec>
    7588:	02402034 	movhi	r9,128
    758c:	4a7fffc4 	addi	r9,r9,-1
    7590:	4266703a 	and	r19,r8,r9
    7594:	9800ae26 	beq	r19,zero,7850 <__adddf3+0x394>
    7598:	9809883a 	mov	r4,r19
    759c:	0009e500 	call	9e50 <__clzsi2>
    75a0:	10fffe04 	addi	r3,r2,-8
    75a4:	02000804 	movi	r8,32
    75a8:	40d1c83a 	sub	r8,r8,r3
    75ac:	8a10d83a 	srl	r8,r17,r8
    75b0:	98d2983a 	sll	r9,r19,r3
    75b4:	88e2983a 	sll	r17,r17,r3
    75b8:	4250b03a 	or	r8,r8,r9
    75bc:	1c80ad16 	blt	r3,r18,7874 <__adddf3+0x3b8>
    75c0:	1c87c83a 	sub	r3,r3,r18
    75c4:	19000044 	addi	r4,r3,1
    75c8:	20800808 	cmpgei	r2,r4,32
    75cc:	10006a1e 	bne	r2,zero,7778 <__adddf3+0x2bc>
    75d0:	00800804 	movi	r2,32
    75d4:	1105c83a 	sub	r2,r2,r4
    75d8:	8906d83a 	srl	r3,r17,r4
    75dc:	88a2983a 	sll	r17,r17,r2
    75e0:	4084983a 	sll	r2,r8,r2
    75e4:	4110d83a 	srl	r8,r8,r4
    75e8:	8822c03a 	cmpne	r17,r17,zero
    75ec:	10c4b03a 	or	r2,r2,r3
    75f0:	1462b03a 	or	r17,r2,r17
    75f4:	0025883a 	mov	r18,zero
    75f8:	888001cc 	andi	r2,r17,7
    75fc:	10000726 	beq	r2,zero,761c <__adddf3+0x160>
    7600:	888003cc 	andi	r2,r17,15
    7604:	10800120 	cmpeqi	r2,r2,4
    7608:	1000041e 	bne	r2,zero,761c <__adddf3+0x160>
    760c:	88c00104 	addi	r3,r17,4
    7610:	1c63803a 	cmpltu	r17,r3,r17
    7614:	4451883a 	add	r8,r8,r17
    7618:	1823883a 	mov	r17,r3
    761c:	4080202c 	andhi	r2,r8,128
    7620:	10006326 	beq	r2,zero,77b0 <__adddf3+0x2f4>
    7624:	90c00044 	addi	r3,r18,1
    7628:	1881ffe0 	cmpeqi	r2,r3,2047
    762c:	18c1ffcc 	andi	r3,r3,2047
    7630:	1000751e 	bne	r2,zero,7808 <__adddf3+0x34c>
    7634:	00bfe034 	movhi	r2,65408
    7638:	10bfffc4 	addi	r2,r2,-1
    763c:	4090703a 	and	r8,r8,r2
    7640:	4004977a 	slli	r2,r8,29
    7644:	4010927a 	slli	r8,r8,9
    7648:	8822d0fa 	srli	r17,r17,3
    764c:	4010d33a 	srli	r8,r8,12
    7650:	1444b03a 	or	r2,r2,r17
    7654:	1806953a 	slli	r3,r3,20
    7658:	802097fa 	slli	r16,r16,31
    765c:	1a06b03a 	or	r3,r3,r8
    7660:	1c06b03a 	or	r3,r3,r16
    7664:	dfc00417 	ldw	ra,16(sp)
    7668:	dcc00317 	ldw	r19,12(sp)
    766c:	dc800217 	ldw	r18,8(sp)
    7670:	dc400117 	ldw	r17,4(sp)
    7674:	dc000017 	ldw	r16,0(sp)
    7678:	dec00504 	addi	sp,sp,20
    767c:	f800283a 	ret
    7680:	18002626 	beq	r3,zero,771c <__adddf3+0x260>
    7684:	1487c83a 	sub	r3,r2,r18
    7688:	9000b51e 	bne	r18,zero,7960 <__adddf3+0x4a4>
    768c:	5388b03a 	or	r4,r10,r14
    7690:	20010f26 	beq	r4,zero,7ad0 <__adddf3+0x614>
    7694:	193fffc4 	addi	r4,r3,-1
    7698:	20016126 	beq	r4,zero,7c20 <__adddf3+0x764>
    769c:	18c1ffd8 	cmpnei	r3,r3,2047
    76a0:	18012e26 	beq	r3,zero,7b5c <__adddf3+0x6a0>
    76a4:	2007883a 	mov	r3,r4
    76a8:	0000b006 	br	796c <__adddf3+0x4b0>
    76ac:	00c0760e 	bge	zero,r3,7888 <__adddf3+0x3cc>
    76b0:	10002926 	beq	r2,zero,7758 <__adddf3+0x29c>
    76b4:	9081ffd8 	cmpnei	r2,r18,2047
    76b8:	10012126 	beq	r2,zero,7b40 <__adddf3+0x684>
    76bc:	4a402034 	orhi	r9,r9,128
    76c0:	18800e48 	cmpgei	r2,r3,57
    76c4:	1000461e 	bne	r2,zero,77e0 <__adddf3+0x324>
    76c8:	18800808 	cmpgei	r2,r3,32
    76cc:	1000e326 	beq	r2,zero,7a5c <__adddf3+0x5a0>
    76d0:	1c7ff804 	addi	r17,r3,-32
    76d4:	19000820 	cmpeqi	r4,r3,32
    76d8:	4c44d83a 	srl	r2,r9,r17
    76dc:	2000041e 	bne	r4,zero,76f0 <__adddf3+0x234>
    76e0:	01001004 	movi	r4,64
    76e4:	20c7c83a 	sub	r3,r4,r3
    76e8:	48d2983a 	sll	r9,r9,r3
    76ec:	6a5ab03a 	or	r13,r13,r9
    76f0:	6822c03a 	cmpne	r17,r13,zero
    76f4:	88a2b03a 	or	r17,r17,r2
    76f8:	00003b06 	br	77e8 <__adddf3+0x32c>
    76fc:	4b44b03a 	or	r2,r9,r13
    7700:	10008126 	beq	r2,zero,7908 <__adddf3+0x44c>
    7704:	18bfffc4 	addi	r2,r3,-1
    7708:	10010726 	beq	r2,zero,7b28 <__adddf3+0x66c>
    770c:	18c1ffd8 	cmpnei	r3,r3,2047
    7710:	18004126 	beq	r3,zero,7818 <__adddf3+0x35c>
    7714:	1007883a 	mov	r3,r2
    7718:	003f8806 	br	753c <__adddf3+0x80>
    771c:	90800044 	addi	r2,r18,1
    7720:	1081ff8c 	andi	r2,r2,2046
    7724:	1000a01e 	bne	r2,zero,79a8 <__adddf3+0x4ec>
    7728:	538ab03a 	or	r5,r10,r14
    772c:	4b44b03a 	or	r2,r9,r13
    7730:	9000ef1e 	bne	r18,zero,7af0 <__adddf3+0x634>
    7734:	28014126 	beq	r5,zero,7c3c <__adddf3+0x780>
    7738:	1001491e 	bne	r2,zero,7c60 <__adddf3+0x7a4>
    773c:	500a977a 	slli	r5,r10,29
    7740:	00880034 	movhi	r2,8192
    7744:	10bfffc4 	addi	r2,r2,-1
    7748:	2084703a 	and	r2,r4,r2
    774c:	5014d0fa 	srli	r10,r10,3
    7750:	1144b03a 	or	r2,r2,r5
    7754:	00001d06 	br	77cc <__adddf3+0x310>
    7758:	4b44b03a 	or	r2,r9,r13
    775c:	10006a26 	beq	r2,zero,7908 <__adddf3+0x44c>
    7760:	18bfffc4 	addi	r2,r3,-1
    7764:	1000e826 	beq	r2,zero,7b08 <__adddf3+0x64c>
    7768:	18c1ffd8 	cmpnei	r3,r3,2047
    776c:	1800f426 	beq	r3,zero,7b40 <__adddf3+0x684>
    7770:	1007883a 	mov	r3,r2
    7774:	003fd206 	br	76c0 <__adddf3+0x204>
    7778:	18fff844 	addi	r3,r3,-31
    777c:	20800820 	cmpeqi	r2,r4,32
    7780:	40c6d83a 	srl	r3,r8,r3
    7784:	1000041e 	bne	r2,zero,7798 <__adddf3+0x2dc>
    7788:	00801004 	movi	r2,64
    778c:	1109c83a 	sub	r4,r2,r4
    7790:	4110983a 	sll	r8,r8,r4
    7794:	8a22b03a 	or	r17,r17,r8
    7798:	8822c03a 	cmpne	r17,r17,zero
    779c:	88e2b03a 	or	r17,r17,r3
    77a0:	0011883a 	mov	r8,zero
    77a4:	0025883a 	mov	r18,zero
    77a8:	888001cc 	andi	r2,r17,7
    77ac:	103f941e 	bne	r2,zero,7600 <__adddf3+0x144>
    77b0:	8822d0fa 	srli	r17,r17,3
    77b4:	4004977a 	slli	r2,r8,29
    77b8:	4014d0fa 	srli	r10,r8,3
    77bc:	9007883a 	mov	r3,r18
    77c0:	8884b03a 	or	r2,r17,r2
    77c4:	1901ffe0 	cmpeqi	r4,r3,2047
    77c8:	2000191e 	bne	r4,zero,7830 <__adddf3+0x374>
    77cc:	02000434 	movhi	r8,16
    77d0:	423fffc4 	addi	r8,r8,-1
    77d4:	5210703a 	and	r8,r10,r8
    77d8:	18c1ffcc 	andi	r3,r3,2047
    77dc:	003f9d06 	br	7654 <__adddf3+0x198>
    77e0:	4b62b03a 	or	r17,r9,r13
    77e4:	8822c03a 	cmpne	r17,r17,zero
    77e8:	8ba3883a 	add	r17,r17,r14
    77ec:	8b91803a 	cmpltu	r8,r17,r14
    77f0:	4291883a 	add	r8,r8,r10
    77f4:	4080202c 	andhi	r2,r8,128
    77f8:	103feb26 	beq	r2,zero,77a8 <__adddf3+0x2ec>
    77fc:	94800044 	addi	r18,r18,1
    7800:	9081ffe0 	cmpeqi	r2,r18,2047
    7804:	10007426 	beq	r2,zero,79d8 <__adddf3+0x51c>
    7808:	00c1ffc4 	movi	r3,2047
    780c:	0011883a 	mov	r8,zero
    7810:	0005883a 	mov	r2,zero
    7814:	003f8f06 	br	7654 <__adddf3+0x198>
    7818:	500a977a 	slli	r5,r10,29
    781c:	00c80034 	movhi	r3,8192
    7820:	18ffffc4 	addi	r3,r3,-1
    7824:	5014d0fa 	srli	r10,r10,3
    7828:	20c4703a 	and	r2,r4,r3
    782c:	1144b03a 	or	r2,r2,r5
    7830:	1286b03a 	or	r3,r2,r10
    7834:	18015926 	beq	r3,zero,7d9c <__adddf3+0x8e0>
    7838:	00c00434 	movhi	r3,16
    783c:	18ffffc4 	addi	r3,r3,-1
    7840:	52000234 	orhi	r8,r10,8
    7844:	40d0703a 	and	r8,r8,r3
    7848:	00c1ffc4 	movi	r3,2047
    784c:	003f8106 	br	7654 <__adddf3+0x198>
    7850:	8809883a 	mov	r4,r17
    7854:	0009e500 	call	9e50 <__clzsi2>
    7858:	10c00604 	addi	r3,r2,24
    785c:	19000808 	cmpgei	r4,r3,32
    7860:	203f5026 	beq	r4,zero,75a4 <__adddf3+0xe8>
    7864:	123ffe04 	addi	r8,r2,-8
    7868:	8a10983a 	sll	r8,r17,r8
    786c:	0023883a 	mov	r17,zero
    7870:	1cbf530e 	bge	r3,r18,75c0 <__adddf3+0x104>
    7874:	00bfe034 	movhi	r2,65408
    7878:	10bfffc4 	addi	r2,r2,-1
    787c:	90e5c83a 	sub	r18,r18,r3
    7880:	4090703a 	and	r8,r8,r2
    7884:	003f5c06 	br	75f8 <__adddf3+0x13c>
    7888:	18002626 	beq	r3,zero,7924 <__adddf3+0x468>
    788c:	1487c83a 	sub	r3,r2,r18
    7890:	90006e1e 	bne	r18,zero,7a4c <__adddf3+0x590>
    7894:	5388b03a 	or	r4,r10,r14
    7898:	2000fd26 	beq	r4,zero,7c90 <__adddf3+0x7d4>
    789c:	193fffc4 	addi	r4,r3,-1
    78a0:	20013626 	beq	r4,zero,7d7c <__adddf3+0x8c0>
    78a4:	18c1ffd8 	cmpnei	r3,r3,2047
    78a8:	1800b426 	beq	r3,zero,7b7c <__adddf3+0x6c0>
    78ac:	2007883a 	mov	r3,r4
    78b0:	19000e48 	cmpgei	r4,r3,57
    78b4:	2000b81e 	bne	r4,zero,7b98 <__adddf3+0x6dc>
    78b8:	19000808 	cmpgei	r4,r3,32
    78bc:	2001241e 	bne	r4,zero,7d50 <__adddf3+0x894>
    78c0:	01000804 	movi	r4,32
    78c4:	20c9c83a 	sub	r4,r4,r3
    78c8:	5122983a 	sll	r17,r10,r4
    78cc:	70cad83a 	srl	r5,r14,r3
    78d0:	7108983a 	sll	r4,r14,r4
    78d4:	50d4d83a 	srl	r10,r10,r3
    78d8:	8962b03a 	or	r17,r17,r5
    78dc:	2008c03a 	cmpne	r4,r4,zero
    78e0:	8922b03a 	or	r17,r17,r4
    78e4:	4a93883a 	add	r9,r9,r10
    78e8:	8b63883a 	add	r17,r17,r13
    78ec:	8b51803a 	cmpltu	r8,r17,r13
    78f0:	4251883a 	add	r8,r8,r9
    78f4:	1025883a 	mov	r18,r2
    78f8:	003fbe06 	br	77f4 <__adddf3+0x338>
    78fc:	4b62b03a 	or	r17,r9,r13
    7900:	8822c03a 	cmpne	r17,r17,zero
    7904:	003f1b06 	br	7574 <__adddf3+0xb8>
    7908:	500c977a 	slli	r6,r10,29
    790c:	01480034 	movhi	r5,8192
    7910:	297fffc4 	addi	r5,r5,-1
    7914:	2144703a 	and	r2,r4,r5
    7918:	5014d0fa 	srli	r10,r10,3
    791c:	3084b03a 	or	r2,r6,r2
    7920:	003fa806 	br	77c4 <__adddf3+0x308>
    7924:	90800044 	addi	r2,r18,1
    7928:	1141ff8c 	andi	r5,r2,2046
    792c:	2800561e 	bne	r5,zero,7a88 <__adddf3+0x5cc>
    7930:	5384b03a 	or	r2,r10,r14
    7934:	9000a61e 	bne	r18,zero,7bd0 <__adddf3+0x714>
    7938:	1000ee26 	beq	r2,zero,7cf4 <__adddf3+0x838>
    793c:	4b44b03a 	or	r2,r9,r13
    7940:	1000f31e 	bne	r2,zero,7d10 <__adddf3+0x854>
    7944:	5004977a 	slli	r2,r10,29
    7948:	01480034 	movhi	r5,8192
    794c:	297fffc4 	addi	r5,r5,-1
    7950:	2148703a 	and	r4,r4,r5
    7954:	5014d0fa 	srli	r10,r10,3
    7958:	1104b03a 	or	r2,r2,r4
    795c:	003f9b06 	br	77cc <__adddf3+0x310>
    7960:	1101ffd8 	cmpnei	r4,r2,2047
    7964:	20007d26 	beq	r4,zero,7b5c <__adddf3+0x6a0>
    7968:	52802034 	orhi	r10,r10,128
    796c:	19000e48 	cmpgei	r4,r3,57
    7970:	20002e1e 	bne	r4,zero,7a2c <__adddf3+0x570>
    7974:	19000808 	cmpgei	r4,r3,32
    7978:	20008a1e 	bne	r4,zero,7ba4 <__adddf3+0x6e8>
    797c:	01000804 	movi	r4,32
    7980:	20c9c83a 	sub	r4,r4,r3
    7984:	5122983a 	sll	r17,r10,r4
    7988:	70cad83a 	srl	r5,r14,r3
    798c:	711c983a 	sll	r14,r14,r4
    7990:	50d4d83a 	srl	r10,r10,r3
    7994:	8962b03a 	or	r17,r17,r5
    7998:	701cc03a 	cmpne	r14,r14,zero
    799c:	8ba2b03a 	or	r17,r17,r14
    79a0:	4a93c83a 	sub	r9,r9,r10
    79a4:	00002306 	br	7a34 <__adddf3+0x578>
    79a8:	7363c83a 	sub	r17,r14,r13
    79ac:	5267c83a 	sub	r19,r10,r9
    79b0:	7451803a 	cmpltu	r8,r14,r17
    79b4:	9a27c83a 	sub	r19,r19,r8
    79b8:	9880202c 	andhi	r2,r19,128
    79bc:	10003e1e 	bne	r2,zero,7ab8 <__adddf3+0x5fc>
    79c0:	8cc4b03a 	or	r2,r17,r19
    79c4:	103ef31e 	bne	r2,zero,7594 <__adddf3+0xd8>
    79c8:	0015883a 	mov	r10,zero
    79cc:	0021883a 	mov	r16,zero
    79d0:	003f7e06 	br	77cc <__adddf3+0x310>
    79d4:	04800084 	movi	r18,2
    79d8:	00bfe034 	movhi	r2,65408
    79dc:	10bfffc4 	addi	r2,r2,-1
    79e0:	8806d07a 	srli	r3,r17,1
    79e4:	4090703a 	and	r8,r8,r2
    79e8:	400497fa 	slli	r2,r8,31
    79ec:	8c40004c 	andi	r17,r17,1
    79f0:	1c62b03a 	or	r17,r3,r17
    79f4:	4010d07a 	srli	r8,r8,1
    79f8:	1462b03a 	or	r17,r2,r17
    79fc:	003efe06 	br	75f8 <__adddf3+0x13c>
    7a00:	1c7ff804 	addi	r17,r3,-32
    7a04:	19000820 	cmpeqi	r4,r3,32
    7a08:	4c44d83a 	srl	r2,r9,r17
    7a0c:	2000041e 	bne	r4,zero,7a20 <__adddf3+0x564>
    7a10:	01001004 	movi	r4,64
    7a14:	20c7c83a 	sub	r3,r4,r3
    7a18:	48d2983a 	sll	r9,r9,r3
    7a1c:	6a5ab03a 	or	r13,r13,r9
    7a20:	6822c03a 	cmpne	r17,r13,zero
    7a24:	88a2b03a 	or	r17,r17,r2
    7a28:	003ed206 	br	7574 <__adddf3+0xb8>
    7a2c:	5394b03a 	or	r10,r10,r14
    7a30:	5022c03a 	cmpne	r17,r10,zero
    7a34:	6c63c83a 	sub	r17,r13,r17
    7a38:	6c51803a 	cmpltu	r8,r13,r17
    7a3c:	4a11c83a 	sub	r8,r9,r8
    7a40:	3821883a 	mov	r16,r7
    7a44:	1025883a 	mov	r18,r2
    7a48:	003ecd06 	br	7580 <__adddf3+0xc4>
    7a4c:	1101ffd8 	cmpnei	r4,r2,2047
    7a50:	20004a26 	beq	r4,zero,7b7c <__adddf3+0x6c0>
    7a54:	52802034 	orhi	r10,r10,128
    7a58:	003f9506 	br	78b0 <__adddf3+0x3f4>
    7a5c:	00800804 	movi	r2,32
    7a60:	10c5c83a 	sub	r2,r2,r3
    7a64:	68c8d83a 	srl	r4,r13,r3
    7a68:	48a2983a 	sll	r17,r9,r2
    7a6c:	689a983a 	sll	r13,r13,r2
    7a70:	48c6d83a 	srl	r3,r9,r3
    7a74:	8922b03a 	or	r17,r17,r4
    7a78:	681ac03a 	cmpne	r13,r13,zero
    7a7c:	8b62b03a 	or	r17,r17,r13
    7a80:	50d5883a 	add	r10,r10,r3
    7a84:	003f5806 	br	77e8 <__adddf3+0x32c>
    7a88:	10c1ffe0 	cmpeqi	r3,r2,2047
    7a8c:	183f5e1e 	bne	r3,zero,7808 <__adddf3+0x34c>
    7a90:	7351883a 	add	r8,r14,r13
    7a94:	4387803a 	cmpltu	r3,r8,r14
    7a98:	5255883a 	add	r10,r10,r9
    7a9c:	50c7883a 	add	r3,r10,r3
    7aa0:	401ad07a 	srli	r13,r8,1
    7aa4:	182297fa 	slli	r17,r3,31
    7aa8:	1810d07a 	srli	r8,r3,1
    7aac:	1025883a 	mov	r18,r2
    7ab0:	8b62b03a 	or	r17,r17,r13
    7ab4:	003f3c06 	br	77a8 <__adddf3+0x2ec>
    7ab8:	6ba3c83a 	sub	r17,r13,r14
    7abc:	4a93c83a 	sub	r9,r9,r10
    7ac0:	6c51803a 	cmpltu	r8,r13,r17
    7ac4:	4a27c83a 	sub	r19,r9,r8
    7ac8:	3821883a 	mov	r16,r7
    7acc:	003eb106 	br	7594 <__adddf3+0xd8>
    7ad0:	480a977a 	slli	r5,r9,29
    7ad4:	01080034 	movhi	r4,8192
    7ad8:	213fffc4 	addi	r4,r4,-1
    7adc:	3104703a 	and	r2,r6,r4
    7ae0:	4814d0fa 	srli	r10,r9,3
    7ae4:	1144b03a 	or	r2,r2,r5
    7ae8:	3821883a 	mov	r16,r7
    7aec:	003f3506 	br	77c4 <__adddf3+0x308>
    7af0:	28006e1e 	bne	r5,zero,7cac <__adddf3+0x7f0>
    7af4:	1000191e 	bne	r2,zero,7b5c <__adddf3+0x6a0>
    7af8:	0021883a 	mov	r16,zero
    7afc:	4015883a 	mov	r10,r8
    7b00:	00bfffc4 	movi	r2,-1
    7b04:	003f4c06 	br	7838 <__adddf3+0x37c>
    7b08:	7363883a 	add	r17,r14,r13
    7b0c:	5255883a 	add	r10,r10,r9
    7b10:	8b91803a 	cmpltu	r8,r17,r14
    7b14:	5211883a 	add	r8,r10,r8
    7b18:	4080202c 	andhi	r2,r8,128
    7b1c:	103fad1e 	bne	r2,zero,79d4 <__adddf3+0x518>
    7b20:	04800044 	movi	r18,1
    7b24:	003f2006 	br	77a8 <__adddf3+0x2ec>
    7b28:	7363c83a 	sub	r17,r14,r13
    7b2c:	5255c83a 	sub	r10,r10,r9
    7b30:	7451803a 	cmpltu	r8,r14,r17
    7b34:	5211c83a 	sub	r8,r10,r8
    7b38:	04800044 	movi	r18,1
    7b3c:	003e9006 	br	7580 <__adddf3+0xc4>
    7b40:	5004977a 	slli	r2,r10,29
    7b44:	00c80034 	movhi	r3,8192
    7b48:	18ffffc4 	addi	r3,r3,-1
    7b4c:	20c8703a 	and	r4,r4,r3
    7b50:	5014d0fa 	srli	r10,r10,3
    7b54:	1104b03a 	or	r2,r2,r4
    7b58:	003f3506 	br	7830 <__adddf3+0x374>
    7b5c:	4806977a 	slli	r3,r9,29
    7b60:	00880034 	movhi	r2,8192
    7b64:	10bfffc4 	addi	r2,r2,-1
    7b68:	3084703a 	and	r2,r6,r2
    7b6c:	4814d0fa 	srli	r10,r9,3
    7b70:	10c4b03a 	or	r2,r2,r3
    7b74:	3821883a 	mov	r16,r7
    7b78:	003f2d06 	br	7830 <__adddf3+0x374>
    7b7c:	4804977a 	slli	r2,r9,29
    7b80:	00c80034 	movhi	r3,8192
    7b84:	18ffffc4 	addi	r3,r3,-1
    7b88:	30cc703a 	and	r6,r6,r3
    7b8c:	4814d0fa 	srli	r10,r9,3
    7b90:	1184b03a 	or	r2,r2,r6
    7b94:	003f2606 	br	7830 <__adddf3+0x374>
    7b98:	5394b03a 	or	r10,r10,r14
    7b9c:	5022c03a 	cmpne	r17,r10,zero
    7ba0:	003f5106 	br	78e8 <__adddf3+0x42c>
    7ba4:	1c7ff804 	addi	r17,r3,-32
    7ba8:	19400820 	cmpeqi	r5,r3,32
    7bac:	5448d83a 	srl	r4,r10,r17
    7bb0:	2800041e 	bne	r5,zero,7bc4 <__adddf3+0x708>
    7bb4:	01401004 	movi	r5,64
    7bb8:	28c7c83a 	sub	r3,r5,r3
    7bbc:	50d4983a 	sll	r10,r10,r3
    7bc0:	729cb03a 	or	r14,r14,r10
    7bc4:	7022c03a 	cmpne	r17,r14,zero
    7bc8:	8922b03a 	or	r17,r17,r4
    7bcc:	003f9906 	br	7a34 <__adddf3+0x578>
    7bd0:	103fea26 	beq	r2,zero,7b7c <__adddf3+0x6c0>
    7bd4:	4b50b03a 	or	r8,r9,r13
    7bd8:	500a977a 	slli	r5,r10,29
    7bdc:	5014d0fa 	srli	r10,r10,3
    7be0:	40005626 	beq	r8,zero,7d3c <__adddf3+0x880>
    7be4:	00c80034 	movhi	r3,8192
    7be8:	18ffffc4 	addi	r3,r3,-1
    7bec:	20c4703a 	and	r2,r4,r3
    7bf0:	5100022c 	andhi	r4,r10,8
    7bf4:	1144b03a 	or	r2,r2,r5
    7bf8:	203f0d26 	beq	r4,zero,7830 <__adddf3+0x374>
    7bfc:	4808d0fa 	srli	r4,r9,3
    7c00:	2140022c 	andhi	r5,r4,8
    7c04:	283f0a1e 	bne	r5,zero,7830 <__adddf3+0x374>
    7c08:	4804977a 	slli	r2,r9,29
    7c0c:	30cc703a 	and	r6,r6,r3
    7c10:	3821883a 	mov	r16,r7
    7c14:	3084b03a 	or	r2,r6,r2
    7c18:	2015883a 	mov	r10,r4
    7c1c:	003f0406 	br	7830 <__adddf3+0x374>
    7c20:	6ba3c83a 	sub	r17,r13,r14
    7c24:	4a95c83a 	sub	r10,r9,r10
    7c28:	6c51803a 	cmpltu	r8,r13,r17
    7c2c:	5211c83a 	sub	r8,r10,r8
    7c30:	3821883a 	mov	r16,r7
    7c34:	04800044 	movi	r18,1
    7c38:	003e5106 	br	7580 <__adddf3+0xc4>
    7c3c:	103f6226 	beq	r2,zero,79c8 <__adddf3+0x50c>
    7c40:	4808977a 	slli	r4,r9,29
    7c44:	00880034 	movhi	r2,8192
    7c48:	10bfffc4 	addi	r2,r2,-1
    7c4c:	3084703a 	and	r2,r6,r2
    7c50:	4814d0fa 	srli	r10,r9,3
    7c54:	1104b03a 	or	r2,r2,r4
    7c58:	3821883a 	mov	r16,r7
    7c5c:	003edb06 	br	77cc <__adddf3+0x310>
    7c60:	7363c83a 	sub	r17,r14,r13
    7c64:	7445803a 	cmpltu	r2,r14,r17
    7c68:	5251c83a 	sub	r8,r10,r9
    7c6c:	4091c83a 	sub	r8,r8,r2
    7c70:	4080202c 	andhi	r2,r8,128
    7c74:	10004626 	beq	r2,zero,7d90 <__adddf3+0x8d4>
    7c78:	6ba3c83a 	sub	r17,r13,r14
    7c7c:	4a95c83a 	sub	r10,r9,r10
    7c80:	6c51803a 	cmpltu	r8,r13,r17
    7c84:	5211c83a 	sub	r8,r10,r8
    7c88:	3821883a 	mov	r16,r7
    7c8c:	003e5a06 	br	75f8 <__adddf3+0x13c>
    7c90:	4804977a 	slli	r2,r9,29
    7c94:	01080034 	movhi	r4,8192
    7c98:	213fffc4 	addi	r4,r4,-1
    7c9c:	310c703a 	and	r6,r6,r4
    7ca0:	4814d0fa 	srli	r10,r9,3
    7ca4:	1184b03a 	or	r2,r2,r6
    7ca8:	003ec606 	br	77c4 <__adddf3+0x308>
    7cac:	500a977a 	slli	r5,r10,29
    7cb0:	5014d0fa 	srli	r10,r10,3
    7cb4:	10002126 	beq	r2,zero,7d3c <__adddf3+0x880>
    7cb8:	00c80034 	movhi	r3,8192
    7cbc:	18ffffc4 	addi	r3,r3,-1
    7cc0:	20c4703a 	and	r2,r4,r3
    7cc4:	5100022c 	andhi	r4,r10,8
    7cc8:	1144b03a 	or	r2,r2,r5
    7ccc:	203ed826 	beq	r4,zero,7830 <__adddf3+0x374>
    7cd0:	4808d0fa 	srli	r4,r9,3
    7cd4:	2140022c 	andhi	r5,r4,8
    7cd8:	283ed51e 	bne	r5,zero,7830 <__adddf3+0x374>
    7cdc:	4812977a 	slli	r9,r9,29
    7ce0:	30c4703a 	and	r2,r6,r3
    7ce4:	3821883a 	mov	r16,r7
    7ce8:	1244b03a 	or	r2,r2,r9
    7cec:	2015883a 	mov	r10,r4
    7cf0:	003ecf06 	br	7830 <__adddf3+0x374>
    7cf4:	4804977a 	slli	r2,r9,29
    7cf8:	01080034 	movhi	r4,8192
    7cfc:	213fffc4 	addi	r4,r4,-1
    7d00:	310c703a 	and	r6,r6,r4
    7d04:	4814d0fa 	srli	r10,r9,3
    7d08:	1184b03a 	or	r2,r2,r6
    7d0c:	003eaf06 	br	77cc <__adddf3+0x310>
    7d10:	7363883a 	add	r17,r14,r13
    7d14:	5255883a 	add	r10,r10,r9
    7d18:	8b91803a 	cmpltu	r8,r17,r14
    7d1c:	5211883a 	add	r8,r10,r8
    7d20:	4080202c 	andhi	r2,r8,128
    7d24:	103ea026 	beq	r2,zero,77a8 <__adddf3+0x2ec>
    7d28:	00bfe034 	movhi	r2,65408
    7d2c:	10bfffc4 	addi	r2,r2,-1
    7d30:	4090703a 	and	r8,r8,r2
    7d34:	04800044 	movi	r18,1
    7d38:	003e9b06 	br	77a8 <__adddf3+0x2ec>
    7d3c:	00880034 	movhi	r2,8192
    7d40:	10bfffc4 	addi	r2,r2,-1
    7d44:	2084703a 	and	r2,r4,r2
    7d48:	1144b03a 	or	r2,r2,r5
    7d4c:	003eb806 	br	7830 <__adddf3+0x374>
    7d50:	193ff804 	addi	r4,r3,-32
    7d54:	19400820 	cmpeqi	r5,r3,32
    7d58:	5108d83a 	srl	r4,r10,r4
    7d5c:	2800041e 	bne	r5,zero,7d70 <__adddf3+0x8b4>
    7d60:	01401004 	movi	r5,64
    7d64:	28c7c83a 	sub	r3,r5,r3
    7d68:	50d4983a 	sll	r10,r10,r3
    7d6c:	729cb03a 	or	r14,r14,r10
    7d70:	7022c03a 	cmpne	r17,r14,zero
    7d74:	8922b03a 	or	r17,r17,r4
    7d78:	003edb06 	br	78e8 <__adddf3+0x42c>
    7d7c:	7363883a 	add	r17,r14,r13
    7d80:	5255883a 	add	r10,r10,r9
    7d84:	8b51803a 	cmpltu	r8,r17,r13
    7d88:	5211883a 	add	r8,r10,r8
    7d8c:	003f6206 	br	7b18 <__adddf3+0x65c>
    7d90:	8a04b03a 	or	r2,r17,r8
    7d94:	103f0c26 	beq	r2,zero,79c8 <__adddf3+0x50c>
    7d98:	003e8306 	br	77a8 <__adddf3+0x2ec>
    7d9c:	0005883a 	mov	r2,zero
    7da0:	00c1ffc4 	movi	r3,2047
    7da4:	0011883a 	mov	r8,zero
    7da8:	003e2a06 	br	7654 <__adddf3+0x198>

00007dac <__divdf3>:
    7dac:	2810d53a 	srli	r8,r5,20
    7db0:	defff004 	addi	sp,sp,-64
    7db4:	dc000615 	stw	r16,24(sp)
    7db8:	04000434 	movhi	r16,16
    7dbc:	ddc00d15 	stw	r23,52(sp)
    7dc0:	dd800c15 	stw	r22,48(sp)
    7dc4:	dd400b15 	stw	r21,44(sp)
    7dc8:	dd000a15 	stw	r20,40(sp)
    7dcc:	843fffc4 	addi	r16,r16,-1
    7dd0:	dfc00f15 	stw	ra,60(sp)
    7dd4:	df000e15 	stw	fp,56(sp)
    7dd8:	dcc00915 	stw	r19,36(sp)
    7ddc:	dc800815 	stw	r18,32(sp)
    7de0:	dc400715 	stw	r17,28(sp)
    7de4:	4201ffcc 	andi	r8,r8,2047
    7de8:	282cd7fa 	srli	r22,r5,31
    7dec:	302f883a 	mov	r23,r6
    7df0:	382b883a 	mov	r21,r7
    7df4:	2029883a 	mov	r20,r4
    7df8:	2c20703a 	and	r16,r5,r16
    7dfc:	40014426 	beq	r8,zero,8310 <__divdf3+0x564>
    7e00:	4081ffe0 	cmpeqi	r2,r8,2047
    7e04:	1001551e 	bne	r2,zero,835c <__divdf3+0x5b0>
    7e08:	2024d77a 	srli	r18,r4,29
    7e0c:	800a90fa 	slli	r5,r16,3
    7e10:	202890fa 	slli	r20,r4,3
    7e14:	447f0044 	addi	r17,r8,-1023
    7e18:	914ab03a 	or	r5,r18,r5
    7e1c:	2c802034 	orhi	r18,r5,128
    7e20:	0021883a 	mov	r16,zero
    7e24:	0039883a 	mov	fp,zero
    7e28:	a810d53a 	srli	r8,r21,20
    7e2c:	00c00434 	movhi	r3,16
    7e30:	18ffffc4 	addi	r3,r3,-1
    7e34:	4201ffcc 	andi	r8,r8,2047
    7e38:	a826d7fa 	srli	r19,r21,31
    7e3c:	a8ea703a 	and	r21,r21,r3
    7e40:	40012226 	beq	r8,zero,82cc <__divdf3+0x520>
    7e44:	4081ffe0 	cmpeqi	r2,r8,2047
    7e48:	10014b1e 	bne	r2,zero,8378 <__divdf3+0x5cc>
    7e4c:	a80690fa 	slli	r3,r21,3
    7e50:	b804d77a 	srli	r2,r23,29
    7e54:	b81290fa 	slli	r9,r23,3
    7e58:	423f0044 	addi	r8,r8,-1023
    7e5c:	10c6b03a 	or	r3,r2,r3
    7e60:	1d402034 	orhi	r21,r3,128
    7e64:	8a23c83a 	sub	r17,r17,r8
    7e68:	0007883a 	mov	r3,zero
    7e6c:	80800428 	cmpgeui	r2,r16,16
    7e70:	b4cef03a 	xor	r7,r22,r19
    7e74:	1000391e 	bne	r2,zero,7f5c <__divdf3+0x1b0>
    7e78:	800c90ba 	slli	r6,r16,2
    7e7c:	00800034 	movhi	r2,0
    7e80:	3085883a 	add	r2,r6,r2
    7e84:	109fa317 	ldw	r2,32396(r2)
    7e88:	1000683a 	jmp	r2
    7e8c:	00007f5c 	xori	zero,zero,509
    7e90:	00007f38 	rdprs	zero,zero,508
    7e94:	00007ee8 	cmpgeui	zero,zero,507
    7e98:	00007f48 	cmpgei	zero,zero,509
    7e9c:	00007ee8 	cmpgeui	zero,zero,507
    7ea0:	000083dc 	xori	zero,zero,527
    7ea4:	00007ee8 	cmpgeui	zero,zero,507
    7ea8:	00007f48 	cmpgei	zero,zero,509
    7eac:	00007f38 	rdprs	zero,zero,508
    7eb0:	00007f38 	rdprs	zero,zero,508
    7eb4:	000083dc 	xori	zero,zero,527
    7eb8:	00007f48 	cmpgei	zero,zero,509
    7ebc:	00007ecc 	andi	zero,zero,507
    7ec0:	00007ecc 	andi	zero,zero,507
    7ec4:	00007ecc 	andi	zero,zero,507
    7ec8:	0000846c 	andhi	zero,zero,529
    7ecc:	b00f883a 	mov	r7,r22
    7ed0:	e08000a0 	cmpeqi	r2,fp,2
    7ed4:	1000181e 	bne	r2,zero,7f38 <__divdf3+0x18c>
    7ed8:	e08000e0 	cmpeqi	r2,fp,3
    7edc:	1001ef1e 	bne	r2,zero,869c <__divdf3+0x8f0>
    7ee0:	e0800060 	cmpeqi	r2,fp,1
    7ee4:	1000e626 	beq	r2,zero,8280 <__divdf3+0x4d4>
    7ee8:	0007883a 	mov	r3,zero
    7eec:	000b883a 	mov	r5,zero
    7ef0:	0029883a 	mov	r20,zero
    7ef4:	1806953a 	slli	r3,r3,20
    7ef8:	380e97fa 	slli	r7,r7,31
    7efc:	a005883a 	mov	r2,r20
    7f00:	1946b03a 	or	r3,r3,r5
    7f04:	19c6b03a 	or	r3,r3,r7
    7f08:	dfc00f17 	ldw	ra,60(sp)
    7f0c:	df000e17 	ldw	fp,56(sp)
    7f10:	ddc00d17 	ldw	r23,52(sp)
    7f14:	dd800c17 	ldw	r22,48(sp)
    7f18:	dd400b17 	ldw	r21,44(sp)
    7f1c:	dd000a17 	ldw	r20,40(sp)
    7f20:	dcc00917 	ldw	r19,36(sp)
    7f24:	dc800817 	ldw	r18,32(sp)
    7f28:	dc400717 	ldw	r17,28(sp)
    7f2c:	dc000617 	ldw	r16,24(sp)
    7f30:	dec01004 	addi	sp,sp,64
    7f34:	f800283a 	ret
    7f38:	00c1ffc4 	movi	r3,2047
    7f3c:	000b883a 	mov	r5,zero
    7f40:	0029883a 	mov	r20,zero
    7f44:	003feb06 	br	7ef4 <__divdf3+0x148>
    7f48:	980f883a 	mov	r7,r19
    7f4c:	a825883a 	mov	r18,r21
    7f50:	4829883a 	mov	r20,r9
    7f54:	1839883a 	mov	fp,r3
    7f58:	003fdd06 	br	7ed0 <__divdf3+0x124>
    7f5c:	ac815d36 	bltu	r21,r18,84d4 <__divdf3+0x728>
    7f60:	ac815b26 	beq	r21,r18,84d0 <__divdf3+0x724>
    7f64:	8c7fffc4 	addi	r17,r17,-1
    7f68:	a039883a 	mov	fp,r20
    7f6c:	9021883a 	mov	r16,r18
    7f70:	002d883a 	mov	r22,zero
    7f74:	a806923a 	slli	r3,r21,8
    7f78:	482ad63a 	srli	r21,r9,24
    7f7c:	8009883a 	mov	r4,r16
    7f80:	182ed43a 	srli	r23,r3,16
    7f84:	a8eab03a 	or	r21,r21,r3
    7f88:	d9c00015 	stw	r7,0(sp)
    7f8c:	b80b883a 	mov	r5,r23
    7f90:	4826923a 	slli	r19,r9,8
    7f94:	ad3fffcc 	andi	r20,r21,65535
    7f98:	000708c0 	call	708c <__udivsi3>
    7f9c:	100b883a 	mov	r5,r2
    7fa0:	a009883a 	mov	r4,r20
    7fa4:	1025883a 	mov	r18,r2
    7fa8:	000714c0 	call	714c <__mulsi3>
    7fac:	8009883a 	mov	r4,r16
    7fb0:	b80b883a 	mov	r5,r23
    7fb4:	1021883a 	mov	r16,r2
    7fb8:	00070f00 	call	70f0 <__umodsi3>
    7fbc:	1004943a 	slli	r2,r2,16
    7fc0:	e008d43a 	srli	r4,fp,16
    7fc4:	d9c00017 	ldw	r7,0(sp)
    7fc8:	2088b03a 	or	r4,r4,r2
    7fcc:	2400042e 	bgeu	r4,r16,7fe0 <__divdf3+0x234>
    7fd0:	2549883a 	add	r4,r4,r21
    7fd4:	90bfffc4 	addi	r2,r18,-1
    7fd8:	25416e2e 	bgeu	r4,r21,8594 <__divdf3+0x7e8>
    7fdc:	1025883a 	mov	r18,r2
    7fe0:	2421c83a 	sub	r16,r4,r16
    7fe4:	b80b883a 	mov	r5,r23
    7fe8:	8009883a 	mov	r4,r16
    7fec:	d9c00215 	stw	r7,8(sp)
    7ff0:	000708c0 	call	708c <__udivsi3>
    7ff4:	100b883a 	mov	r5,r2
    7ff8:	a009883a 	mov	r4,r20
    7ffc:	d8800115 	stw	r2,4(sp)
    8000:	000714c0 	call	714c <__mulsi3>
    8004:	b80b883a 	mov	r5,r23
    8008:	8009883a 	mov	r4,r16
    800c:	d8800015 	stw	r2,0(sp)
    8010:	00070f00 	call	70f0 <__umodsi3>
    8014:	100c943a 	slli	r6,r2,16
    8018:	da000017 	ldw	r8,0(sp)
    801c:	e73fffcc 	andi	fp,fp,65535
    8020:	e18cb03a 	or	r6,fp,r6
    8024:	d8c00117 	ldw	r3,4(sp)
    8028:	d9c00217 	ldw	r7,8(sp)
    802c:	3200042e 	bgeu	r6,r8,8040 <__divdf3+0x294>
    8030:	354d883a 	add	r6,r6,r21
    8034:	18bfffc4 	addi	r2,r3,-1
    8038:	3541522e 	bgeu	r6,r21,8584 <__divdf3+0x7d8>
    803c:	1007883a 	mov	r3,r2
    8040:	9024943a 	slli	r18,r18,16
    8044:	9f3fffcc 	andi	fp,r19,65535
    8048:	320dc83a 	sub	r6,r6,r8
    804c:	90e4b03a 	or	r18,r18,r3
    8050:	9012d43a 	srli	r9,r18,16
    8054:	92ffffcc 	andi	r11,r18,65535
    8058:	5809883a 	mov	r4,r11
    805c:	e00b883a 	mov	r5,fp
    8060:	d9c00515 	stw	r7,20(sp)
    8064:	d9800315 	stw	r6,12(sp)
    8068:	dac00415 	stw	r11,16(sp)
    806c:	da400015 	stw	r9,0(sp)
    8070:	000714c0 	call	714c <__mulsi3>
    8074:	da400017 	ldw	r9,0(sp)
    8078:	e00b883a 	mov	r5,fp
    807c:	d8800215 	stw	r2,8(sp)
    8080:	4809883a 	mov	r4,r9
    8084:	000714c0 	call	714c <__mulsi3>
    8088:	da400017 	ldw	r9,0(sp)
    808c:	9820d43a 	srli	r16,r19,16
    8090:	d8800115 	stw	r2,4(sp)
    8094:	4809883a 	mov	r4,r9
    8098:	800b883a 	mov	r5,r16
    809c:	000714c0 	call	714c <__mulsi3>
    80a0:	dac00417 	ldw	r11,16(sp)
    80a4:	8009883a 	mov	r4,r16
    80a8:	d8800015 	stw	r2,0(sp)
    80ac:	580b883a 	mov	r5,r11
    80b0:	000714c0 	call	714c <__mulsi3>
    80b4:	da000217 	ldw	r8,8(sp)
    80b8:	da400117 	ldw	r9,4(sp)
    80bc:	da800017 	ldw	r10,0(sp)
    80c0:	4008d43a 	srli	r4,r8,16
    80c4:	1247883a 	add	r3,r2,r9
    80c8:	d9800317 	ldw	r6,12(sp)
    80cc:	20c7883a 	add	r3,r4,r3
    80d0:	d9c00517 	ldw	r7,20(sp)
    80d4:	1a40022e 	bgeu	r3,r9,80e0 <__divdf3+0x334>
    80d8:	00800074 	movhi	r2,1
    80dc:	5095883a 	add	r10,r10,r2
    80e0:	1808d43a 	srli	r4,r3,16
    80e4:	1806943a 	slli	r3,r3,16
    80e8:	423fffcc 	andi	r8,r8,65535
    80ec:	2285883a 	add	r2,r4,r10
    80f0:	1a07883a 	add	r3,r3,r8
    80f4:	30800236 	bltu	r6,r2,8100 <__divdf3+0x354>
    80f8:	30800a1e 	bne	r6,r2,8124 <__divdf3+0x378>
    80fc:	b0c0092e 	bgeu	r22,r3,8124 <__divdf3+0x378>
    8100:	b4ed883a 	add	r22,r22,r19
    8104:	b4c9803a 	cmpltu	r4,r22,r19
    8108:	2549883a 	add	r4,r4,r21
    810c:	310d883a 	add	r6,r6,r4
    8110:	913fffc4 	addi	r4,r18,-1
    8114:	a981182e 	bgeu	r21,r6,8578 <__divdf3+0x7cc>
    8118:	30814a36 	bltu	r6,r2,8644 <__divdf3+0x898>
    811c:	11814826 	beq	r2,r6,8640 <__divdf3+0x894>
    8120:	2025883a 	mov	r18,r4
    8124:	b0c7c83a 	sub	r3,r22,r3
    8128:	3085c83a 	sub	r2,r6,r2
    812c:	b0ed803a 	cmpltu	r22,r22,r3
    8130:	15adc83a 	sub	r22,r2,r22
    8134:	ad813026 	beq	r21,r22,85f8 <__divdf3+0x84c>
    8138:	b009883a 	mov	r4,r22
    813c:	b80b883a 	mov	r5,r23
    8140:	d8c00215 	stw	r3,8(sp)
    8144:	d9c00115 	stw	r7,4(sp)
    8148:	000708c0 	call	708c <__udivsi3>
    814c:	100b883a 	mov	r5,r2
    8150:	a009883a 	mov	r4,r20
    8154:	d8800015 	stw	r2,0(sp)
    8158:	000714c0 	call	714c <__mulsi3>
    815c:	b009883a 	mov	r4,r22
    8160:	b80b883a 	mov	r5,r23
    8164:	102d883a 	mov	r22,r2
    8168:	00070f00 	call	70f0 <__umodsi3>
    816c:	d8c00217 	ldw	r3,8(sp)
    8170:	1004943a 	slli	r2,r2,16
    8174:	d9800017 	ldw	r6,0(sp)
    8178:	1808d43a 	srli	r4,r3,16
    817c:	d9c00117 	ldw	r7,4(sp)
    8180:	2088b03a 	or	r4,r4,r2
    8184:	2580f536 	bltu	r4,r22,855c <__divdf3+0x7b0>
    8188:	25adc83a 	sub	r22,r4,r22
    818c:	b009883a 	mov	r4,r22
    8190:	b80b883a 	mov	r5,r23
    8194:	d8c00315 	stw	r3,12(sp)
    8198:	d9c00215 	stw	r7,8(sp)
    819c:	d9800115 	stw	r6,4(sp)
    81a0:	000708c0 	call	708c <__udivsi3>
    81a4:	100b883a 	mov	r5,r2
    81a8:	a009883a 	mov	r4,r20
    81ac:	d8800015 	stw	r2,0(sp)
    81b0:	000714c0 	call	714c <__mulsi3>
    81b4:	b009883a 	mov	r4,r22
    81b8:	b80b883a 	mov	r5,r23
    81bc:	102d883a 	mov	r22,r2
    81c0:	00070f00 	call	70f0 <__umodsi3>
    81c4:	d8c00317 	ldw	r3,12(sp)
    81c8:	1004943a 	slli	r2,r2,16
    81cc:	da000017 	ldw	r8,0(sp)
    81d0:	18ffffcc 	andi	r3,r3,65535
    81d4:	1886b03a 	or	r3,r3,r2
    81d8:	d9800117 	ldw	r6,4(sp)
    81dc:	d9c00217 	ldw	r7,8(sp)
    81e0:	1d80d736 	bltu	r3,r22,8540 <__divdf3+0x794>
    81e4:	3028943a 	slli	r20,r6,16
    81e8:	e009883a 	mov	r4,fp
    81ec:	d9c00215 	stw	r7,8(sp)
    81f0:	a228b03a 	or	r20,r20,r8
    81f4:	a1bfffcc 	andi	r6,r20,65535
    81f8:	a02ed43a 	srli	r23,r20,16
    81fc:	300b883a 	mov	r5,r6
    8200:	1dadc83a 	sub	r22,r3,r22
    8204:	d9800115 	stw	r6,4(sp)
    8208:	000714c0 	call	714c <__mulsi3>
    820c:	e00b883a 	mov	r5,fp
    8210:	b809883a 	mov	r4,r23
    8214:	d8800015 	stw	r2,0(sp)
    8218:	000714c0 	call	714c <__mulsi3>
    821c:	8009883a 	mov	r4,r16
    8220:	b80b883a 	mov	r5,r23
    8224:	1039883a 	mov	fp,r2
    8228:	000714c0 	call	714c <__mulsi3>
    822c:	d9800117 	ldw	r6,4(sp)
    8230:	8009883a 	mov	r4,r16
    8234:	1021883a 	mov	r16,r2
    8238:	300b883a 	mov	r5,r6
    823c:	000714c0 	call	714c <__mulsi3>
    8240:	da000017 	ldw	r8,0(sp)
    8244:	1705883a 	add	r2,r2,fp
    8248:	d9c00217 	ldw	r7,8(sp)
    824c:	4006d43a 	srli	r3,r8,16
    8250:	1887883a 	add	r3,r3,r2
    8254:	1f00022e 	bgeu	r3,fp,8260 <__divdf3+0x4b4>
    8258:	00800074 	movhi	r2,1
    825c:	80a1883a 	add	r16,r16,r2
    8260:	1808d43a 	srli	r4,r3,16
    8264:	1806943a 	slli	r3,r3,16
    8268:	45ffffcc 	andi	r23,r8,65535
    826c:	2409883a 	add	r4,r4,r16
    8270:	1dc7883a 	add	r3,r3,r23
    8274:	b1008f36 	bltu	r22,r4,84b4 <__divdf3+0x708>
    8278:	b1008d26 	beq	r22,r4,84b0 <__divdf3+0x704>
    827c:	a5000054 	ori	r20,r20,1
    8280:	8980ffc4 	addi	r6,r17,1023
    8284:	01805c0e 	bge	zero,r6,83f8 <__divdf3+0x64c>
    8288:	a08001cc 	andi	r2,r20,7
    828c:	1000e01e 	bne	r2,zero,8610 <__divdf3+0x864>
    8290:	a008d0fa 	srli	r4,r20,3
    8294:	9080402c 	andhi	r2,r18,256
    8298:	10000426 	beq	r2,zero,82ac <__divdf3+0x500>
    829c:	00bfc034 	movhi	r2,65280
    82a0:	10bfffc4 	addi	r2,r2,-1
    82a4:	90a4703a 	and	r18,r18,r2
    82a8:	89810004 	addi	r6,r17,1024
    82ac:	3081ffc8 	cmpgei	r2,r6,2047
    82b0:	103f211e 	bne	r2,zero,7f38 <__divdf3+0x18c>
    82b4:	9028977a 	slli	r20,r18,29
    82b8:	900a927a 	slli	r5,r18,9
    82bc:	30c1ffcc 	andi	r3,r6,2047
    82c0:	a128b03a 	or	r20,r20,r4
    82c4:	280ad33a 	srli	r5,r5,12
    82c8:	003f0a06 	br	7ef4 <__divdf3+0x148>
    82cc:	add2b03a 	or	r9,r21,r23
    82d0:	48003e26 	beq	r9,zero,83cc <__divdf3+0x620>
    82d4:	a8008f26 	beq	r21,zero,8514 <__divdf3+0x768>
    82d8:	a809883a 	mov	r4,r21
    82dc:	0009e500 	call	9e50 <__clzsi2>
    82e0:	117ffd44 	addi	r5,r2,-11
    82e4:	01000744 	movi	r4,29
    82e8:	127ffe04 	addi	r9,r2,-8
    82ec:	2149c83a 	sub	r4,r4,r5
    82f0:	aa46983a 	sll	r3,r21,r9
    82f4:	b908d83a 	srl	r4,r23,r4
    82f8:	ba52983a 	sll	r9,r23,r9
    82fc:	20eab03a 	or	r21,r4,r3
    8300:	1451883a 	add	r8,r2,r17
    8304:	4440fcc4 	addi	r17,r8,1011
    8308:	0007883a 	mov	r3,zero
    830c:	003ed706 	br	7e6c <__divdf3+0xc0>
    8310:	8124b03a 	or	r18,r16,r4
    8314:	2027883a 	mov	r19,r4
    8318:	90002726 	beq	r18,zero,83b8 <__divdf3+0x60c>
    831c:	80007326 	beq	r16,zero,84ec <__divdf3+0x740>
    8320:	8009883a 	mov	r4,r16
    8324:	0009e500 	call	9e50 <__clzsi2>
    8328:	113ffd44 	addi	r4,r2,-11
    832c:	00c00744 	movi	r3,29
    8330:	14bffe04 	addi	r18,r2,-8
    8334:	1907c83a 	sub	r3,r3,r4
    8338:	848a983a 	sll	r5,r16,r18
    833c:	98c6d83a 	srl	r3,r19,r3
    8340:	9ca8983a 	sll	r20,r19,r18
    8344:	1964b03a 	or	r18,r3,r5
    8348:	023f0344 	movi	r8,-1011
    834c:	40a3c83a 	sub	r17,r8,r2
    8350:	0021883a 	mov	r16,zero
    8354:	0039883a 	mov	fp,zero
    8358:	003eb306 	br	7e28 <__divdf3+0x7c>
    835c:	8124b03a 	or	r18,r16,r4
    8360:	9000101e 	bne	r18,zero,83a4 <__divdf3+0x5f8>
    8364:	0029883a 	mov	r20,zero
    8368:	04000204 	movi	r16,8
    836c:	0441ffc4 	movi	r17,2047
    8370:	07000084 	movi	fp,2
    8374:	003eac06 	br	7e28 <__divdf3+0x7c>
    8378:	add2b03a 	or	r9,r21,r23
    837c:	8c7e0044 	addi	r17,r17,-2047
    8380:	4800041e 	bne	r9,zero,8394 <__divdf3+0x5e8>
    8384:	84000094 	ori	r16,r16,2
    8388:	002b883a 	mov	r21,zero
    838c:	00c00084 	movi	r3,2
    8390:	003eb606 	br	7e6c <__divdf3+0xc0>
    8394:	840000d4 	ori	r16,r16,3
    8398:	b813883a 	mov	r9,r23
    839c:	00c000c4 	movi	r3,3
    83a0:	003eb206 	br	7e6c <__divdf3+0xc0>
    83a4:	8025883a 	mov	r18,r16
    83a8:	0441ffc4 	movi	r17,2047
    83ac:	04000304 	movi	r16,12
    83b0:	070000c4 	movi	fp,3
    83b4:	003e9c06 	br	7e28 <__divdf3+0x7c>
    83b8:	0029883a 	mov	r20,zero
    83bc:	04000104 	movi	r16,4
    83c0:	0023883a 	mov	r17,zero
    83c4:	07000044 	movi	fp,1
    83c8:	003e9706 	br	7e28 <__divdf3+0x7c>
    83cc:	84000054 	ori	r16,r16,1
    83d0:	002b883a 	mov	r21,zero
    83d4:	00c00044 	movi	r3,1
    83d8:	003ea406 	br	7e6c <__divdf3+0xc0>
    83dc:	01400434 	movhi	r5,16
    83e0:	000f883a 	mov	r7,zero
    83e4:	297fffc4 	addi	r5,r5,-1
    83e8:	053fffc4 	movi	r20,-1
    83ec:	00c1ffc4 	movi	r3,2047
    83f0:	003ec006 	br	7ef4 <__divdf3+0x148>
    83f4:	053fffc4 	movi	r20,-1
    83f8:	01400044 	movi	r5,1
    83fc:	298bc83a 	sub	r5,r5,r6
    8400:	28800e48 	cmpgei	r2,r5,57
    8404:	103eb81e 	bne	r2,zero,7ee8 <__divdf3+0x13c>
    8408:	28800808 	cmpgei	r2,r5,32
    840c:	1000651e 	bne	r2,zero,85a4 <__divdf3+0x7f8>
    8410:	8a010784 	addi	r8,r17,1054
    8414:	9204983a 	sll	r2,r18,r8
    8418:	a146d83a 	srl	r3,r20,r5
    841c:	a210983a 	sll	r8,r20,r8
    8420:	914ad83a 	srl	r5,r18,r5
    8424:	10e8b03a 	or	r20,r2,r3
    8428:	4010c03a 	cmpne	r8,r8,zero
    842c:	a228b03a 	or	r20,r20,r8
    8430:	a08001cc 	andi	r2,r20,7
    8434:	10000726 	beq	r2,zero,8454 <__divdf3+0x6a8>
    8438:	a08003cc 	andi	r2,r20,15
    843c:	10800120 	cmpeqi	r2,r2,4
    8440:	1000041e 	bne	r2,zero,8454 <__divdf3+0x6a8>
    8444:	a0800104 	addi	r2,r20,4
    8448:	1529803a 	cmpltu	r20,r2,r20
    844c:	2d0b883a 	add	r5,r5,r20
    8450:	1029883a 	mov	r20,r2
    8454:	2880202c 	andhi	r2,r5,128
    8458:	10008c26 	beq	r2,zero,868c <__divdf3+0x8e0>
    845c:	00c00044 	movi	r3,1
    8460:	000b883a 	mov	r5,zero
    8464:	0029883a 	mov	r20,zero
    8468:	003ea206 	br	7ef4 <__divdf3+0x148>
    846c:	9080022c 	andhi	r2,r18,8
    8470:	10000926 	beq	r2,zero,8498 <__divdf3+0x6ec>
    8474:	a880022c 	andhi	r2,r21,8
    8478:	1000071e 	bne	r2,zero,8498 <__divdf3+0x6ec>
    847c:	00800434 	movhi	r2,16
    8480:	a9400234 	orhi	r5,r21,8
    8484:	10bfffc4 	addi	r2,r2,-1
    8488:	288a703a 	and	r5,r5,r2
    848c:	980f883a 	mov	r7,r19
    8490:	4829883a 	mov	r20,r9
    8494:	003fd506 	br	83ec <__divdf3+0x640>
    8498:	00800434 	movhi	r2,16
    849c:	91400234 	orhi	r5,r18,8
    84a0:	10bfffc4 	addi	r2,r2,-1
    84a4:	288a703a 	and	r5,r5,r2
    84a8:	b00f883a 	mov	r7,r22
    84ac:	003fcf06 	br	83ec <__divdf3+0x640>
    84b0:	183f7326 	beq	r3,zero,8280 <__divdf3+0x4d4>
    84b4:	adad883a 	add	r22,r21,r22
    84b8:	a0bfffc4 	addi	r2,r20,-1
    84bc:	b5404a36 	bltu	r22,r21,85e8 <__divdf3+0x83c>
    84c0:	b1006636 	bltu	r22,r4,865c <__divdf3+0x8b0>
    84c4:	b1007a26 	beq	r22,r4,86b0 <__divdf3+0x904>
    84c8:	1029883a 	mov	r20,r2
    84cc:	003f6b06 	br	827c <__divdf3+0x4d0>
    84d0:	a27ea436 	bltu	r20,r9,7f64 <__divdf3+0x1b8>
    84d4:	903897fa 	slli	fp,r18,31
    84d8:	a004d07a 	srli	r2,r20,1
    84dc:	9020d07a 	srli	r16,r18,1
    84e0:	a02c97fa 	slli	r22,r20,31
    84e4:	e0b8b03a 	or	fp,fp,r2
    84e8:	003ea206 	br	7f74 <__divdf3+0x1c8>
    84ec:	0009e500 	call	9e50 <__clzsi2>
    84f0:	11000544 	addi	r4,r2,21
    84f4:	20c00748 	cmpgei	r3,r4,29
    84f8:	100b883a 	mov	r5,r2
    84fc:	10800804 	addi	r2,r2,32
    8500:	183f8a26 	beq	r3,zero,832c <__divdf3+0x580>
    8504:	297ffe04 	addi	r5,r5,-8
    8508:	a164983a 	sll	r18,r20,r5
    850c:	0029883a 	mov	r20,zero
    8510:	003f8d06 	br	8348 <__divdf3+0x59c>
    8514:	b809883a 	mov	r4,r23
    8518:	0009e500 	call	9e50 <__clzsi2>
    851c:	11400544 	addi	r5,r2,21
    8520:	29000748 	cmpgei	r4,r5,29
    8524:	1007883a 	mov	r3,r2
    8528:	10800804 	addi	r2,r2,32
    852c:	203f6d26 	beq	r4,zero,82e4 <__divdf3+0x538>
    8530:	18fffe04 	addi	r3,r3,-8
    8534:	b8ea983a 	sll	r21,r23,r3
    8538:	0013883a 	mov	r9,zero
    853c:	003f7006 	br	8300 <__divdf3+0x554>
    8540:	1d47883a 	add	r3,r3,r21
    8544:	40bfffc4 	addi	r2,r8,-1
    8548:	1d403936 	bltu	r3,r21,8630 <__divdf3+0x884>
    854c:	1d80382e 	bgeu	r3,r22,8630 <__divdf3+0x884>
    8550:	423fff84 	addi	r8,r8,-2
    8554:	1d47883a 	add	r3,r3,r21
    8558:	003f2206 	br	81e4 <__divdf3+0x438>
    855c:	2549883a 	add	r4,r4,r21
    8560:	30bfffc4 	addi	r2,r6,-1
    8564:	25403436 	bltu	r4,r21,8638 <__divdf3+0x88c>
    8568:	2580332e 	bgeu	r4,r22,8638 <__divdf3+0x88c>
    856c:	31bfff84 	addi	r6,r6,-2
    8570:	2549883a 	add	r4,r4,r21
    8574:	003f0406 	br	8188 <__divdf3+0x3dc>
    8578:	a9bee91e 	bne	r21,r6,8120 <__divdf3+0x374>
    857c:	b4fee836 	bltu	r22,r19,8120 <__divdf3+0x374>
    8580:	003ee506 	br	8118 <__divdf3+0x36c>
    8584:	323ead2e 	bgeu	r6,r8,803c <__divdf3+0x290>
    8588:	18ffff84 	addi	r3,r3,-2
    858c:	354d883a 	add	r6,r6,r21
    8590:	003eab06 	br	8040 <__divdf3+0x294>
    8594:	243e912e 	bgeu	r4,r16,7fdc <__divdf3+0x230>
    8598:	94bfff84 	addi	r18,r18,-2
    859c:	2549883a 	add	r4,r4,r21
    85a0:	003e8f06 	br	7fe0 <__divdf3+0x234>
    85a4:	00fff844 	movi	r3,-31
    85a8:	1987c83a 	sub	r3,r3,r6
    85ac:	29400820 	cmpeqi	r5,r5,32
    85b0:	90c6d83a 	srl	r3,r18,r3
    85b4:	2800031e 	bne	r5,zero,85c4 <__divdf3+0x818>
    85b8:	89410f84 	addi	r5,r17,1086
    85bc:	914a983a 	sll	r5,r18,r5
    85c0:	a168b03a 	or	r20,r20,r5
    85c4:	a028c03a 	cmpne	r20,r20,zero
    85c8:	a0e8b03a 	or	r20,r20,r3
    85cc:	a48001cc 	andi	r18,r20,7
    85d0:	90002a1e 	bne	r18,zero,867c <__divdf3+0x8d0>
    85d4:	000b883a 	mov	r5,zero
    85d8:	a028d0fa 	srli	r20,r20,3
    85dc:	0007883a 	mov	r3,zero
    85e0:	a4a8b03a 	or	r20,r20,r18
    85e4:	003e4306 	br	7ef4 <__divdf3+0x148>
    85e8:	1029883a 	mov	r20,r2
    85ec:	b13f231e 	bne	r22,r4,827c <__divdf3+0x4d0>
    85f0:	1cff221e 	bne	r3,r19,827c <__divdf3+0x4d0>
    85f4:	003f2206 	br	8280 <__divdf3+0x4d4>
    85f8:	8980ffc4 	addi	r6,r17,1023
    85fc:	01bf7d0e 	bge	zero,r6,83f4 <__divdf3+0x648>
    8600:	0009883a 	mov	r4,zero
    8604:	05000044 	movi	r20,1
    8608:	9525883a 	add	r18,r18,r20
    860c:	003f2106 	br	8294 <__divdf3+0x4e8>
    8610:	a08003cc 	andi	r2,r20,15
    8614:	10800118 	cmpnei	r2,r2,4
    8618:	103f1d26 	beq	r2,zero,8290 <__divdf3+0x4e4>
    861c:	a1000104 	addi	r4,r20,4
    8620:	00bffec4 	movi	r2,-5
    8624:	2008d0fa 	srli	r4,r4,3
    8628:	1529803a 	cmpltu	r20,r2,r20
    862c:	003ff606 	br	8608 <__divdf3+0x85c>
    8630:	1011883a 	mov	r8,r2
    8634:	003eeb06 	br	81e4 <__divdf3+0x438>
    8638:	100d883a 	mov	r6,r2
    863c:	003ed206 	br	8188 <__divdf3+0x3dc>
    8640:	b0feb72e 	bgeu	r22,r3,8120 <__divdf3+0x374>
    8644:	b4ed883a 	add	r22,r22,r19
    8648:	b4c9803a 	cmpltu	r4,r22,r19
    864c:	2549883a 	add	r4,r4,r21
    8650:	94bfff84 	addi	r18,r18,-2
    8654:	310d883a 	add	r6,r6,r4
    8658:	003eb206 	br	8124 <__divdf3+0x378>
    865c:	9cc5883a 	add	r2,r19,r19
    8660:	14e7803a 	cmpltu	r19,r2,r19
    8664:	9d6b883a 	add	r21,r19,r21
    8668:	b56d883a 	add	r22,r22,r21
    866c:	a53fff84 	addi	r20,r20,-2
    8670:	1027883a 	mov	r19,r2
    8674:	b13fde26 	beq	r22,r4,85f0 <__divdf3+0x844>
    8678:	003f0006 	br	827c <__divdf3+0x4d0>
    867c:	a08003cc 	andi	r2,r20,15
    8680:	10800118 	cmpnei	r2,r2,4
    8684:	000b883a 	mov	r5,zero
    8688:	103f6e1e 	bne	r2,zero,8444 <__divdf3+0x698>
    868c:	2804927a 	slli	r2,r5,9
    8690:	2824977a 	slli	r18,r5,29
    8694:	100ad33a 	srli	r5,r2,12
    8698:	003fcf06 	br	85d8 <__divdf3+0x82c>
    869c:	00800434 	movhi	r2,16
    86a0:	91400234 	orhi	r5,r18,8
    86a4:	10bfffc4 	addi	r2,r2,-1
    86a8:	288a703a 	and	r5,r5,r2
    86ac:	003f4f06 	br	83ec <__divdf3+0x640>
    86b0:	98ffea36 	bltu	r19,r3,865c <__divdf3+0x8b0>
    86b4:	1029883a 	mov	r20,r2
    86b8:	1cfef01e 	bne	r3,r19,827c <__divdf3+0x4d0>
    86bc:	003ef006 	br	8280 <__divdf3+0x4d4>

000086c0 <__eqdf2>:
    86c0:	2810d53a 	srli	r8,r5,20
    86c4:	3806d53a 	srli	r3,r7,20
    86c8:	00800434 	movhi	r2,16
    86cc:	4201ffcc 	andi	r8,r8,2047
    86d0:	10bfffc4 	addi	r2,r2,-1
    86d4:	4241ffd8 	cmpnei	r9,r8,2047
    86d8:	2814d7fa 	srli	r10,r5,31
    86dc:	3816d7fa 	srli	r11,r7,31
    86e0:	288a703a 	and	r5,r5,r2
    86e4:	388e703a 	and	r7,r7,r2
    86e8:	1881ffcc 	andi	r2,r3,2047
    86ec:	48000626 	beq	r9,zero,8708 <__eqdf2+0x48>
    86f0:	10c1ffe0 	cmpeqi	r3,r2,2047
    86f4:	1800021e 	bne	r3,zero,8700 <__eqdf2+0x40>
    86f8:	4080011e 	bne	r8,r2,8700 <__eqdf2+0x40>
    86fc:	29c00826 	beq	r5,r7,8720 <__eqdf2+0x60>
    8700:	00800044 	movi	r2,1
    8704:	f800283a 	ret
    8708:	2906b03a 	or	r3,r5,r4
    870c:	183ffc1e 	bne	r3,zero,8700 <__eqdf2+0x40>
    8710:	1081ffd8 	cmpnei	r2,r2,2047
    8714:	103ffa1e 	bne	r2,zero,8700 <__eqdf2+0x40>
    8718:	398eb03a 	or	r7,r7,r6
    871c:	383ff81e 	bne	r7,zero,8700 <__eqdf2+0x40>
    8720:	21bff71e 	bne	r4,r6,8700 <__eqdf2+0x40>
    8724:	52c00426 	beq	r10,r11,8738 <__eqdf2+0x78>
    8728:	403ff51e 	bne	r8,zero,8700 <__eqdf2+0x40>
    872c:	290ab03a 	or	r5,r5,r4
    8730:	2804c03a 	cmpne	r2,r5,zero
    8734:	f800283a 	ret
    8738:	0005883a 	mov	r2,zero
    873c:	f800283a 	ret

00008740 <__gedf2>:
    8740:	2810d53a 	srli	r8,r5,20
    8744:	3812d53a 	srli	r9,r7,20
    8748:	00c00434 	movhi	r3,16
    874c:	4201ffcc 	andi	r8,r8,2047
    8750:	18ffffc4 	addi	r3,r3,-1
    8754:	4281ffd8 	cmpnei	r10,r8,2047
    8758:	2816d7fa 	srli	r11,r5,31
    875c:	3804d7fa 	srli	r2,r7,31
    8760:	28ca703a 	and	r5,r5,r3
    8764:	38ce703a 	and	r7,r7,r3
    8768:	48c1ffcc 	andi	r3,r9,2047
    876c:	50000a26 	beq	r10,zero,8798 <__gedf2+0x58>
    8770:	1a41ffd8 	cmpnei	r9,r3,2047
    8774:	48000c26 	beq	r9,zero,87a8 <__gedf2+0x68>
    8778:	4000171e 	bne	r8,zero,87d8 <__gedf2+0x98>
    877c:	2912b03a 	or	r9,r5,r4
    8780:	1800121e 	bne	r3,zero,87cc <__gedf2+0x8c>
    8784:	3994b03a 	or	r10,r7,r6
    8788:	5000101e 	bne	r10,zero,87cc <__gedf2+0x8c>
    878c:	48000a1e 	bne	r9,zero,87b8 <__gedf2+0x78>
    8790:	0005883a 	mov	r2,zero
    8794:	f800283a 	ret
    8798:	2912b03a 	or	r9,r5,r4
    879c:	48001d1e 	bne	r9,zero,8814 <__gedf2+0xd4>
    87a0:	1a41ffe0 	cmpeqi	r9,r3,2047
    87a4:	48000c26 	beq	r9,zero,87d8 <__gedf2+0x98>
    87a8:	3992b03a 	or	r9,r7,r6
    87ac:	4800191e 	bne	r9,zero,8814 <__gedf2+0xd4>
    87b0:	40000526 	beq	r8,zero,87c8 <__gedf2+0x88>
    87b4:	58800c26 	beq	r11,r2,87e8 <__gedf2+0xa8>
    87b8:	00800044 	movi	r2,1
    87bc:	58000526 	beq	r11,zero,87d4 <__gedf2+0x94>
    87c0:	00bfffc4 	movi	r2,-1
    87c4:	f800283a 	ret
    87c8:	2912b03a 	or	r9,r5,r4
    87cc:	483ff91e 	bne	r9,zero,87b4 <__gedf2+0x74>
    87d0:	103ffb26 	beq	r2,zero,87c0 <__gedf2+0x80>
    87d4:	f800283a 	ret
    87d8:	183ff61e 	bne	r3,zero,87b4 <__gedf2+0x74>
    87dc:	3992b03a 	or	r9,r7,r6
    87e0:	483ff41e 	bne	r9,zero,87b4 <__gedf2+0x74>
    87e4:	003ff406 	br	87b8 <__gedf2+0x78>
    87e8:	1a000716 	blt	r3,r8,8808 <__gedf2+0xc8>
    87ec:	40fff816 	blt	r8,r3,87d0 <__gedf2+0x90>
    87f0:	397ff136 	bltu	r7,r5,87b8 <__gedf2+0x78>
    87f4:	29c00926 	beq	r5,r7,881c <__gedf2+0xdc>
    87f8:	29ffe52e 	bgeu	r5,r7,8790 <__gedf2+0x50>
    87fc:	583ff026 	beq	r11,zero,87c0 <__gedf2+0x80>
    8800:	5805883a 	mov	r2,r11
    8804:	f800283a 	ret
    8808:	103fed1e 	bne	r2,zero,87c0 <__gedf2+0x80>
    880c:	00800044 	movi	r2,1
    8810:	f800283a 	ret
    8814:	00bfff84 	movi	r2,-2
    8818:	f800283a 	ret
    881c:	313fe636 	bltu	r6,r4,87b8 <__gedf2+0x78>
    8820:	21bfdb2e 	bgeu	r4,r6,8790 <__gedf2+0x50>
    8824:	003ff506 	br	87fc <__gedf2+0xbc>

00008828 <__ledf2>:
    8828:	2810d53a 	srli	r8,r5,20
    882c:	3812d53a 	srli	r9,r7,20
    8830:	00c00434 	movhi	r3,16
    8834:	4201ffcc 	andi	r8,r8,2047
    8838:	18ffffc4 	addi	r3,r3,-1
    883c:	4281ffd8 	cmpnei	r10,r8,2047
    8840:	2816d7fa 	srli	r11,r5,31
    8844:	3804d7fa 	srli	r2,r7,31
    8848:	28ca703a 	and	r5,r5,r3
    884c:	38ce703a 	and	r7,r7,r3
    8850:	48c1ffcc 	andi	r3,r9,2047
    8854:	50000a26 	beq	r10,zero,8880 <__ledf2+0x58>
    8858:	1a41ffd8 	cmpnei	r9,r3,2047
    885c:	48000c26 	beq	r9,zero,8890 <__ledf2+0x68>
    8860:	4000191e 	bne	r8,zero,88c8 <__ledf2+0xa0>
    8864:	2912b03a 	or	r9,r5,r4
    8868:	18000d1e 	bne	r3,zero,88a0 <__ledf2+0x78>
    886c:	3994b03a 	or	r10,r7,r6
    8870:	50000b1e 	bne	r10,zero,88a0 <__ledf2+0x78>
    8874:	48000c1e 	bne	r9,zero,88a8 <__ledf2+0x80>
    8878:	0005883a 	mov	r2,zero
    887c:	f800283a 	ret
    8880:	2912b03a 	or	r9,r5,r4
    8884:	48000c1e 	bne	r9,zero,88b8 <__ledf2+0x90>
    8888:	1a41ffe0 	cmpeqi	r9,r3,2047
    888c:	48000e26 	beq	r9,zero,88c8 <__ledf2+0xa0>
    8890:	3992b03a 	or	r9,r7,r6
    8894:	4800081e 	bne	r9,zero,88b8 <__ledf2+0x90>
    8898:	4000021e 	bne	r8,zero,88a4 <__ledf2+0x7c>
    889c:	2912b03a 	or	r9,r5,r4
    88a0:	48000726 	beq	r9,zero,88c0 <__ledf2+0x98>
    88a4:	58800c26 	beq	r11,r2,88d8 <__ledf2+0xb0>
    88a8:	00800044 	movi	r2,1
    88ac:	58000526 	beq	r11,zero,88c4 <__ledf2+0x9c>
    88b0:	00bfffc4 	movi	r2,-1
    88b4:	f800283a 	ret
    88b8:	00800084 	movi	r2,2
    88bc:	f800283a 	ret
    88c0:	103ffb26 	beq	r2,zero,88b0 <__ledf2+0x88>
    88c4:	f800283a 	ret
    88c8:	183ff61e 	bne	r3,zero,88a4 <__ledf2+0x7c>
    88cc:	3992b03a 	or	r9,r7,r6
    88d0:	483ff41e 	bne	r9,zero,88a4 <__ledf2+0x7c>
    88d4:	003ff406 	br	88a8 <__ledf2+0x80>
    88d8:	1a00030e 	bge	r3,r8,88e8 <__ledf2+0xc0>
    88dc:	103ff41e 	bne	r2,zero,88b0 <__ledf2+0x88>
    88e0:	00800044 	movi	r2,1
    88e4:	f800283a 	ret
    88e8:	40fff516 	blt	r8,r3,88c0 <__ledf2+0x98>
    88ec:	397fee36 	bltu	r7,r5,88a8 <__ledf2+0x80>
    88f0:	29c00426 	beq	r5,r7,8904 <__ledf2+0xdc>
    88f4:	29ffe02e 	bgeu	r5,r7,8878 <__ledf2+0x50>
    88f8:	583fed26 	beq	r11,zero,88b0 <__ledf2+0x88>
    88fc:	5805883a 	mov	r2,r11
    8900:	f800283a 	ret
    8904:	313fe836 	bltu	r6,r4,88a8 <__ledf2+0x80>
    8908:	21bfdb2e 	bgeu	r4,r6,8878 <__ledf2+0x50>
    890c:	003ffa06 	br	88f8 <__ledf2+0xd0>

00008910 <__muldf3>:
    8910:	2810d53a 	srli	r8,r5,20
    8914:	defff004 	addi	sp,sp,-64
    8918:	00800434 	movhi	r2,16
    891c:	df000e15 	stw	fp,56(sp)
    8920:	dd000a15 	stw	r20,40(sp)
    8924:	dcc00915 	stw	r19,36(sp)
    8928:	dc400715 	stw	r17,28(sp)
    892c:	10bfffc4 	addi	r2,r2,-1
    8930:	dfc00f15 	stw	ra,60(sp)
    8934:	ddc00d15 	stw	r23,52(sp)
    8938:	dd800c15 	stw	r22,48(sp)
    893c:	dd400b15 	stw	r21,44(sp)
    8940:	dc800815 	stw	r18,32(sp)
    8944:	dc000615 	stw	r16,24(sp)
    8948:	4201ffcc 	andi	r8,r8,2047
    894c:	2828d7fa 	srli	r20,r5,31
    8950:	2023883a 	mov	r17,r4
    8954:	3039883a 	mov	fp,r6
    8958:	28a6703a 	and	r19,r5,r2
    895c:	40013426 	beq	r8,zero,8e30 <__muldf3+0x520>
    8960:	4081ffe0 	cmpeqi	r2,r8,2047
    8964:	1001461e 	bne	r2,zero,8e80 <__muldf3+0x570>
    8968:	980a90fa 	slli	r5,r19,3
    896c:	2026d77a 	srli	r19,r4,29
    8970:	202490fa 	slli	r18,r4,3
    8974:	423f0044 	addi	r8,r8,-1023
    8978:	9966b03a 	or	r19,r19,r5
    897c:	9cc02034 	orhi	r19,r19,128
    8980:	002b883a 	mov	r21,zero
    8984:	002d883a 	mov	r22,zero
    8988:	3804d53a 	srli	r2,r7,20
    898c:	00c00434 	movhi	r3,16
    8990:	18ffffc4 	addi	r3,r3,-1
    8994:	1081ffcc 	andi	r2,r2,2047
    8998:	382ed7fa 	srli	r23,r7,31
    899c:	38e0703a 	and	r16,r7,r3
    89a0:	10011026 	beq	r2,zero,8de4 <__muldf3+0x4d4>
    89a4:	10c1ffe0 	cmpeqi	r3,r2,2047
    89a8:	18013c1e 	bne	r3,zero,8e9c <__muldf3+0x58c>
    89ac:	e008d77a 	srli	r4,fp,29
    89b0:	802090fa 	slli	r16,r16,3
    89b4:	e02290fa 	slli	r17,fp,3
    89b8:	10bf0044 	addi	r2,r2,-1023
    89bc:	2420b03a 	or	r16,r4,r16
    89c0:	84002034 	orhi	r16,r16,128
    89c4:	4091883a 	add	r8,r8,r2
    89c8:	0009883a 	mov	r4,zero
    89cc:	a8800428 	cmpgeui	r2,r21,16
    89d0:	a5ccf03a 	xor	r6,r20,r23
    89d4:	41c00044 	addi	r7,r8,1
    89d8:	1000371e 	bne	r2,zero,8ab8 <__muldf3+0x1a8>
    89dc:	a80490ba 	slli	r2,r21,2
    89e0:	00c00074 	movhi	r3,1
    89e4:	10c7883a 	add	r3,r2,r3
    89e8:	18a27c17 	ldw	r2,-30224(r3)
    89ec:	1000683a 	jmp	r2
    89f0:	00008ab8 	rdprs	zero,zero,554
    89f4:	00008a34 	movhi	zero,552
    89f8:	00008a34 	movhi	zero,552
    89fc:	00008a30 	cmpltui	zero,zero,552
    8a00:	00008a40 	call	8a4 <kf_bfly3+0x38>
    8a04:	00008a40 	call	8a4 <kf_bfly3+0x38>
    8a08:	00008f10 	cmplti	zero,zero,572
    8a0c:	00008a30 	cmpltui	zero,zero,552
    8a10:	00008a40 	call	8a4 <kf_bfly3+0x38>
    8a14:	00008f10 	cmplti	zero,zero,572
    8a18:	00008a40 	call	8a4 <kf_bfly3+0x38>
    8a1c:	00008a30 	cmpltui	zero,zero,552
    8a20:	00008eb8 	rdprs	zero,zero,570
    8a24:	00008eb8 	rdprs	zero,zero,570
    8a28:	00008eb8 	rdprs	zero,zero,570
    8a2c:	00008f9c 	xori	zero,zero,574
    8a30:	b80d883a 	mov	r6,r23
    8a34:	8027883a 	mov	r19,r16
    8a38:	8825883a 	mov	r18,r17
    8a3c:	202d883a 	mov	r22,r4
    8a40:	b08000a0 	cmpeqi	r2,r22,2
    8a44:	1000181e 	bne	r2,zero,8aa8 <__muldf3+0x198>
    8a48:	b08000e0 	cmpeqi	r2,r22,3
    8a4c:	1001961e 	bne	r2,zero,90a8 <__muldf3+0x798>
    8a50:	b0800060 	cmpeqi	r2,r22,1
    8a54:	1000c926 	beq	r2,zero,8d7c <__muldf3+0x46c>
    8a58:	0007883a 	mov	r3,zero
    8a5c:	0027883a 	mov	r19,zero
    8a60:	0025883a 	mov	r18,zero
    8a64:	1806953a 	slli	r3,r3,20
    8a68:	300c97fa 	slli	r6,r6,31
    8a6c:	9005883a 	mov	r2,r18
    8a70:	1cc6b03a 	or	r3,r3,r19
    8a74:	1986b03a 	or	r3,r3,r6
    8a78:	dfc00f17 	ldw	ra,60(sp)
    8a7c:	df000e17 	ldw	fp,56(sp)
    8a80:	ddc00d17 	ldw	r23,52(sp)
    8a84:	dd800c17 	ldw	r22,48(sp)
    8a88:	dd400b17 	ldw	r21,44(sp)
    8a8c:	dd000a17 	ldw	r20,40(sp)
    8a90:	dcc00917 	ldw	r19,36(sp)
    8a94:	dc800817 	ldw	r18,32(sp)
    8a98:	dc400717 	ldw	r17,28(sp)
    8a9c:	dc000617 	ldw	r16,24(sp)
    8aa0:	dec01004 	addi	sp,sp,64
    8aa4:	f800283a 	ret
    8aa8:	00c1ffc4 	movi	r3,2047
    8aac:	0027883a 	mov	r19,zero
    8ab0:	0025883a 	mov	r18,zero
    8ab4:	003feb06 	br	8a64 <__muldf3+0x154>
    8ab8:	9028d43a 	srli	r20,r18,16
    8abc:	8f3fffcc 	andi	fp,r17,65535
    8ac0:	957fffcc 	andi	r21,r18,65535
    8ac4:	a80b883a 	mov	r5,r21
    8ac8:	e009883a 	mov	r4,fp
    8acc:	d9800315 	stw	r6,12(sp)
    8ad0:	da000215 	stw	r8,8(sp)
    8ad4:	d9c00115 	stw	r7,4(sp)
    8ad8:	8822d43a 	srli	r17,r17,16
    8adc:	000714c0 	call	714c <__mulsi3>
    8ae0:	e00b883a 	mov	r5,fp
    8ae4:	a009883a 	mov	r4,r20
    8ae8:	102d883a 	mov	r22,r2
    8aec:	000714c0 	call	714c <__mulsi3>
    8af0:	880b883a 	mov	r5,r17
    8af4:	a009883a 	mov	r4,r20
    8af8:	102f883a 	mov	r23,r2
    8afc:	000714c0 	call	714c <__mulsi3>
    8b00:	a80b883a 	mov	r5,r21
    8b04:	8809883a 	mov	r4,r17
    8b08:	d8800015 	stw	r2,0(sp)
    8b0c:	000714c0 	call	714c <__mulsi3>
    8b10:	b006d43a 	srli	r3,r22,16
    8b14:	15e5883a 	add	r18,r2,r23
    8b18:	d9c00117 	ldw	r7,4(sp)
    8b1c:	1c87883a 	add	r3,r3,r18
    8b20:	da000217 	ldw	r8,8(sp)
    8b24:	d9800317 	ldw	r6,12(sp)
    8b28:	1dc0042e 	bgeu	r3,r23,8b3c <__muldf3+0x22c>
    8b2c:	d9000017 	ldw	r4,0(sp)
    8b30:	00800074 	movhi	r2,1
    8b34:	2085883a 	add	r2,r4,r2
    8b38:	d8800015 	stw	r2,0(sp)
    8b3c:	1804943a 	slli	r2,r3,16
    8b40:	85ffffcc 	andi	r23,r16,65535
    8b44:	b5bfffcc 	andi	r22,r22,65535
    8b48:	1585883a 	add	r2,r2,r22
    8b4c:	a80b883a 	mov	r5,r21
    8b50:	b809883a 	mov	r4,r23
    8b54:	1824d43a 	srli	r18,r3,16
    8b58:	d9800515 	stw	r6,20(sp)
    8b5c:	da000415 	stw	r8,16(sp)
    8b60:	d9c00315 	stw	r7,12(sp)
    8b64:	8020d43a 	srli	r16,r16,16
    8b68:	d8800115 	stw	r2,4(sp)
    8b6c:	000714c0 	call	714c <__mulsi3>
    8b70:	a009883a 	mov	r4,r20
    8b74:	b80b883a 	mov	r5,r23
    8b78:	d8800215 	stw	r2,8(sp)
    8b7c:	000714c0 	call	714c <__mulsi3>
    8b80:	a009883a 	mov	r4,r20
    8b84:	800b883a 	mov	r5,r16
    8b88:	102d883a 	mov	r22,r2
    8b8c:	000714c0 	call	714c <__mulsi3>
    8b90:	a80b883a 	mov	r5,r21
    8b94:	8009883a 	mov	r4,r16
    8b98:	1029883a 	mov	r20,r2
    8b9c:	000714c0 	call	714c <__mulsi3>
    8ba0:	da800217 	ldw	r10,8(sp)
    8ba4:	1585883a 	add	r2,r2,r22
    8ba8:	d9c00317 	ldw	r7,12(sp)
    8bac:	5006d43a 	srli	r3,r10,16
    8bb0:	da000417 	ldw	r8,16(sp)
    8bb4:	d9800517 	ldw	r6,20(sp)
    8bb8:	1887883a 	add	r3,r3,r2
    8bbc:	1d80022e 	bgeu	r3,r22,8bc8 <__muldf3+0x2b8>
    8bc0:	00800074 	movhi	r2,1
    8bc4:	a0a9883a 	add	r20,r20,r2
    8bc8:	1804d43a 	srli	r2,r3,16
    8bcc:	1806943a 	slli	r3,r3,16
    8bd0:	982cd43a 	srli	r22,r19,16
    8bd4:	9d7fffcc 	andi	r21,r19,65535
    8bd8:	e009883a 	mov	r4,fp
    8bdc:	54ffffcc 	andi	r19,r10,65535
    8be0:	a80b883a 	mov	r5,r21
    8be4:	1ce7883a 	add	r19,r3,r19
    8be8:	d9800515 	stw	r6,20(sp)
    8bec:	da000415 	stw	r8,16(sp)
    8bf0:	d9c00315 	stw	r7,12(sp)
    8bf4:	1529883a 	add	r20,r2,r20
    8bf8:	000714c0 	call	714c <__mulsi3>
    8bfc:	e00b883a 	mov	r5,fp
    8c00:	b009883a 	mov	r4,r22
    8c04:	d8800215 	stw	r2,8(sp)
    8c08:	000714c0 	call	714c <__mulsi3>
    8c0c:	8809883a 	mov	r4,r17
    8c10:	b00b883a 	mov	r5,r22
    8c14:	1039883a 	mov	fp,r2
    8c18:	000714c0 	call	714c <__mulsi3>
    8c1c:	8809883a 	mov	r4,r17
    8c20:	a80b883a 	mov	r5,r21
    8c24:	1023883a 	mov	r17,r2
    8c28:	000714c0 	call	714c <__mulsi3>
    8c2c:	d8c00217 	ldw	r3,8(sp)
    8c30:	1705883a 	add	r2,r2,fp
    8c34:	d9c00317 	ldw	r7,12(sp)
    8c38:	1808d43a 	srli	r4,r3,16
    8c3c:	da000417 	ldw	r8,16(sp)
    8c40:	d9800517 	ldw	r6,20(sp)
    8c44:	2089883a 	add	r4,r4,r2
    8c48:	94e5883a 	add	r18,r18,r19
    8c4c:	2700022e 	bgeu	r4,fp,8c58 <__muldf3+0x348>
    8c50:	00800074 	movhi	r2,1
    8c54:	88a3883a 	add	r17,r17,r2
    8c58:	2004d43a 	srli	r2,r4,16
    8c5c:	2038943a 	slli	fp,r4,16
    8c60:	18ffffcc 	andi	r3,r3,65535
    8c64:	b809883a 	mov	r4,r23
    8c68:	a80b883a 	mov	r5,r21
    8c6c:	d9800415 	stw	r6,16(sp)
    8c70:	da000315 	stw	r8,12(sp)
    8c74:	d9c00215 	stw	r7,8(sp)
    8c78:	e0f9883a 	add	fp,fp,r3
    8c7c:	1463883a 	add	r17,r2,r17
    8c80:	000714c0 	call	714c <__mulsi3>
    8c84:	b80b883a 	mov	r5,r23
    8c88:	b009883a 	mov	r4,r22
    8c8c:	102f883a 	mov	r23,r2
    8c90:	000714c0 	call	714c <__mulsi3>
    8c94:	b00b883a 	mov	r5,r22
    8c98:	8009883a 	mov	r4,r16
    8c9c:	102d883a 	mov	r22,r2
    8ca0:	000714c0 	call	714c <__mulsi3>
    8ca4:	a80b883a 	mov	r5,r21
    8ca8:	8009883a 	mov	r4,r16
    8cac:	1021883a 	mov	r16,r2
    8cb0:	000714c0 	call	714c <__mulsi3>
    8cb4:	b80ad43a 	srli	r5,r23,16
    8cb8:	1585883a 	add	r2,r2,r22
    8cbc:	d9c00217 	ldw	r7,8(sp)
    8cc0:	288b883a 	add	r5,r5,r2
    8cc4:	da000317 	ldw	r8,12(sp)
    8cc8:	d9800417 	ldw	r6,16(sp)
    8ccc:	2d80022e 	bgeu	r5,r22,8cd8 <__muldf3+0x3c8>
    8cd0:	00800074 	movhi	r2,1
    8cd4:	80a1883a 	add	r16,r16,r2
    8cd8:	2806943a 	slli	r3,r5,16
    8cdc:	d8800017 	ldw	r2,0(sp)
    8ce0:	bdffffcc 	andi	r23,r23,65535
    8ce4:	1dc7883a 	add	r3,r3,r23
    8ce8:	90ab883a 	add	r21,r18,r2
    8cec:	acd5803a 	cmpltu	r10,r21,r19
    8cf0:	1d07883a 	add	r3,r3,r20
    8cf4:	af2b883a 	add	r21,r21,fp
    8cf8:	1a97883a 	add	r11,r3,r10
    8cfc:	af09803a 	cmpltu	r4,r21,fp
    8d00:	2826d43a 	srli	r19,r5,16
    8d04:	5c53883a 	add	r9,r11,r17
    8d08:	4905883a 	add	r2,r9,r4
    8d0c:	1d07803a 	cmpltu	r3,r3,r20
    8d10:	5a95803a 	cmpltu	r10,r11,r10
    8d14:	1a86b03a 	or	r3,r3,r10
    8d18:	1109803a 	cmpltu	r4,r2,r4
    8d1c:	4c53803a 	cmpltu	r9,r9,r17
    8d20:	1ce7883a 	add	r19,r3,r19
    8d24:	4908b03a 	or	r4,r9,r4
    8d28:	a824927a 	slli	r18,r21,9
    8d2c:	d8c00117 	ldw	r3,4(sp)
    8d30:	9927883a 	add	r19,r19,r4
    8d34:	9c27883a 	add	r19,r19,r16
    8d38:	9826927a 	slli	r19,r19,9
    8d3c:	a82ad5fa 	srli	r21,r21,23
    8d40:	100ad5fa 	srli	r5,r2,23
    8d44:	90e4b03a 	or	r18,r18,r3
    8d48:	1004927a 	slli	r2,r2,9
    8d4c:	9024c03a 	cmpne	r18,r18,zero
    8d50:	9564b03a 	or	r18,r18,r21
    8d54:	98c0402c 	andhi	r3,r19,256
    8d58:	90a4b03a 	or	r18,r18,r2
    8d5c:	9966b03a 	or	r19,r19,r5
    8d60:	1800b626 	beq	r3,zero,903c <__muldf3+0x72c>
    8d64:	9006d07a 	srli	r3,r18,1
    8d68:	980497fa 	slli	r2,r19,31
    8d6c:	9480004c 	andi	r18,r18,1
    8d70:	9826d07a 	srli	r19,r19,1
    8d74:	1c86b03a 	or	r3,r3,r18
    8d78:	18a4b03a 	or	r18,r3,r2
    8d7c:	3900ffc4 	addi	r4,r7,1023
    8d80:	0100690e 	bge	zero,r4,8f28 <__muldf3+0x618>
    8d84:	908001cc 	andi	r2,r18,7
    8d88:	10000726 	beq	r2,zero,8da8 <__muldf3+0x498>
    8d8c:	908003cc 	andi	r2,r18,15
    8d90:	10800120 	cmpeqi	r2,r2,4
    8d94:	1000041e 	bne	r2,zero,8da8 <__muldf3+0x498>
    8d98:	90800104 	addi	r2,r18,4
    8d9c:	14a5803a 	cmpltu	r18,r2,r18
    8da0:	9ca7883a 	add	r19,r19,r18
    8da4:	1025883a 	mov	r18,r2
    8da8:	9880402c 	andhi	r2,r19,256
    8dac:	10000426 	beq	r2,zero,8dc0 <__muldf3+0x4b0>
    8db0:	00bfc034 	movhi	r2,65280
    8db4:	10bfffc4 	addi	r2,r2,-1
    8db8:	98a6703a 	and	r19,r19,r2
    8dbc:	39010004 	addi	r4,r7,1024
    8dc0:	2081ffc8 	cmpgei	r2,r4,2047
    8dc4:	103f381e 	bne	r2,zero,8aa8 <__muldf3+0x198>
    8dc8:	9804977a 	slli	r2,r19,29
    8dcc:	9024d0fa 	srli	r18,r18,3
    8dd0:	9826927a 	slli	r19,r19,9
    8dd4:	20c1ffcc 	andi	r3,r4,2047
    8dd8:	14a4b03a 	or	r18,r2,r18
    8ddc:	9826d33a 	srli	r19,r19,12
    8de0:	003f2006 	br	8a64 <__muldf3+0x154>
    8de4:	8722b03a 	or	r17,r16,fp
    8de8:	88004526 	beq	r17,zero,8f00 <__muldf3+0x5f0>
    8dec:	da000015 	stw	r8,0(sp)
    8df0:	80008626 	beq	r16,zero,900c <__muldf3+0x6fc>
    8df4:	8009883a 	mov	r4,r16
    8df8:	0009e500 	call	9e50 <__clzsi2>
    8dfc:	da000017 	ldw	r8,0(sp)
    8e00:	117ffd44 	addi	r5,r2,-11
    8e04:	01000744 	movi	r4,29
    8e08:	147ffe04 	addi	r17,r2,-8
    8e0c:	2149c83a 	sub	r4,r4,r5
    8e10:	8460983a 	sll	r16,r16,r17
    8e14:	e108d83a 	srl	r4,fp,r4
    8e18:	e462983a 	sll	r17,fp,r17
    8e1c:	2420b03a 	or	r16,r4,r16
    8e20:	4091c83a 	sub	r8,r8,r2
    8e24:	423f0344 	addi	r8,r8,-1011
    8e28:	0009883a 	mov	r4,zero
    8e2c:	003ee706 	br	89cc <__muldf3+0xbc>
    8e30:	9924b03a 	or	r18,r19,r4
    8e34:	90002d26 	beq	r18,zero,8eec <__muldf3+0x5dc>
    8e38:	d9c00015 	stw	r7,0(sp)
    8e3c:	98006826 	beq	r19,zero,8fe0 <__muldf3+0x6d0>
    8e40:	9809883a 	mov	r4,r19
    8e44:	0009e500 	call	9e50 <__clzsi2>
    8e48:	d9c00017 	ldw	r7,0(sp)
    8e4c:	113ffd44 	addi	r4,r2,-11
    8e50:	00c00744 	movi	r3,29
    8e54:	14bffe04 	addi	r18,r2,-8
    8e58:	1907c83a 	sub	r3,r3,r4
    8e5c:	9ca6983a 	sll	r19,r19,r18
    8e60:	88c6d83a 	srl	r3,r17,r3
    8e64:	8ca4983a 	sll	r18,r17,r18
    8e68:	1ce6b03a 	or	r19,r3,r19
    8e6c:	023f0344 	movi	r8,-1011
    8e70:	4091c83a 	sub	r8,r8,r2
    8e74:	002b883a 	mov	r21,zero
    8e78:	002d883a 	mov	r22,zero
    8e7c:	003ec206 	br	8988 <__muldf3+0x78>
    8e80:	9924b03a 	or	r18,r19,r4
    8e84:	9000141e 	bne	r18,zero,8ed8 <__muldf3+0x5c8>
    8e88:	0027883a 	mov	r19,zero
    8e8c:	05400204 	movi	r21,8
    8e90:	0201ffc4 	movi	r8,2047
    8e94:	05800084 	movi	r22,2
    8e98:	003ebb06 	br	8988 <__muldf3+0x78>
    8e9c:	8722b03a 	or	r17,r16,fp
    8ea0:	4201ffc4 	addi	r8,r8,2047
    8ea4:	8800081e 	bne	r17,zero,8ec8 <__muldf3+0x5b8>
    8ea8:	ad400094 	ori	r21,r21,2
    8eac:	0021883a 	mov	r16,zero
    8eb0:	01000084 	movi	r4,2
    8eb4:	003ec506 	br	89cc <__muldf3+0xbc>
    8eb8:	b08000a0 	cmpeqi	r2,r22,2
    8ebc:	a00d883a 	mov	r6,r20
    8ec0:	103ee126 	beq	r2,zero,8a48 <__muldf3+0x138>
    8ec4:	003ef806 	br	8aa8 <__muldf3+0x198>
    8ec8:	ad4000d4 	ori	r21,r21,3
    8ecc:	e023883a 	mov	r17,fp
    8ed0:	010000c4 	movi	r4,3
    8ed4:	003ebd06 	br	89cc <__muldf3+0xbc>
    8ed8:	2025883a 	mov	r18,r4
    8edc:	05400304 	movi	r21,12
    8ee0:	0201ffc4 	movi	r8,2047
    8ee4:	058000c4 	movi	r22,3
    8ee8:	003ea706 	br	8988 <__muldf3+0x78>
    8eec:	0027883a 	mov	r19,zero
    8ef0:	05400104 	movi	r21,4
    8ef4:	0011883a 	mov	r8,zero
    8ef8:	05800044 	movi	r22,1
    8efc:	003ea206 	br	8988 <__muldf3+0x78>
    8f00:	ad400054 	ori	r21,r21,1
    8f04:	0021883a 	mov	r16,zero
    8f08:	01000044 	movi	r4,1
    8f0c:	003eaf06 	br	89cc <__muldf3+0xbc>
    8f10:	04c00434 	movhi	r19,16
    8f14:	000d883a 	mov	r6,zero
    8f18:	9cffffc4 	addi	r19,r19,-1
    8f1c:	04bfffc4 	movi	r18,-1
    8f20:	00c1ffc4 	movi	r3,2047
    8f24:	003ecf06 	br	8a64 <__muldf3+0x154>
    8f28:	00800044 	movi	r2,1
    8f2c:	1105c83a 	sub	r2,r2,r4
    8f30:	10c00e48 	cmpgei	r3,r2,57
    8f34:	183ec81e 	bne	r3,zero,8a58 <__muldf3+0x148>
    8f38:	10c00808 	cmpgei	r3,r2,32
    8f3c:	1800411e 	bne	r3,zero,9044 <__muldf3+0x734>
    8f40:	39c10784 	addi	r7,r7,1054
    8f44:	99c6983a 	sll	r3,r19,r7
    8f48:	9088d83a 	srl	r4,r18,r2
    8f4c:	91ce983a 	sll	r7,r18,r7
    8f50:	98a6d83a 	srl	r19,r19,r2
    8f54:	1904b03a 	or	r2,r3,r4
    8f58:	3824c03a 	cmpne	r18,r7,zero
    8f5c:	1484b03a 	or	r2,r2,r18
    8f60:	10c001cc 	andi	r3,r2,7
    8f64:	18000726 	beq	r3,zero,8f84 <__muldf3+0x674>
    8f68:	10c003cc 	andi	r3,r2,15
    8f6c:	18c00120 	cmpeqi	r3,r3,4
    8f70:	1800041e 	bne	r3,zero,8f84 <__muldf3+0x674>
    8f74:	10c00104 	addi	r3,r2,4
    8f78:	1885803a 	cmpltu	r2,r3,r2
    8f7c:	98a7883a 	add	r19,r19,r2
    8f80:	1805883a 	mov	r2,r3
    8f84:	98c0202c 	andhi	r3,r19,128
    8f88:	18004326 	beq	r3,zero,9098 <__muldf3+0x788>
    8f8c:	00c00044 	movi	r3,1
    8f90:	0027883a 	mov	r19,zero
    8f94:	0025883a 	mov	r18,zero
    8f98:	003eb206 	br	8a64 <__muldf3+0x154>
    8f9c:	9880022c 	andhi	r2,r19,8
    8fa0:	10000926 	beq	r2,zero,8fc8 <__muldf3+0x6b8>
    8fa4:	8080022c 	andhi	r2,r16,8
    8fa8:	1000071e 	bne	r2,zero,8fc8 <__muldf3+0x6b8>
    8fac:	00800434 	movhi	r2,16
    8fb0:	84c00234 	orhi	r19,r16,8
    8fb4:	10bfffc4 	addi	r2,r2,-1
    8fb8:	98a6703a 	and	r19,r19,r2
    8fbc:	b80d883a 	mov	r6,r23
    8fc0:	8825883a 	mov	r18,r17
    8fc4:	003fd606 	br	8f20 <__muldf3+0x610>
    8fc8:	00800434 	movhi	r2,16
    8fcc:	9cc00234 	orhi	r19,r19,8
    8fd0:	10bfffc4 	addi	r2,r2,-1
    8fd4:	98a6703a 	and	r19,r19,r2
    8fd8:	a00d883a 	mov	r6,r20
    8fdc:	003fd006 	br	8f20 <__muldf3+0x610>
    8fe0:	0009e500 	call	9e50 <__clzsi2>
    8fe4:	11000544 	addi	r4,r2,21
    8fe8:	21400748 	cmpgei	r5,r4,29
    8fec:	1007883a 	mov	r3,r2
    8ff0:	d9c00017 	ldw	r7,0(sp)
    8ff4:	10800804 	addi	r2,r2,32
    8ff8:	283f9526 	beq	r5,zero,8e50 <__muldf3+0x540>
    8ffc:	18fffe04 	addi	r3,r3,-8
    9000:	88e6983a 	sll	r19,r17,r3
    9004:	0025883a 	mov	r18,zero
    9008:	003f9806 	br	8e6c <__muldf3+0x55c>
    900c:	e009883a 	mov	r4,fp
    9010:	0009e500 	call	9e50 <__clzsi2>
    9014:	11400544 	addi	r5,r2,21
    9018:	29000748 	cmpgei	r4,r5,29
    901c:	1007883a 	mov	r3,r2
    9020:	da000017 	ldw	r8,0(sp)
    9024:	10800804 	addi	r2,r2,32
    9028:	203f7626 	beq	r4,zero,8e04 <__muldf3+0x4f4>
    902c:	1c3ffe04 	addi	r16,r3,-8
    9030:	e420983a 	sll	r16,fp,r16
    9034:	0023883a 	mov	r17,zero
    9038:	003f7906 	br	8e20 <__muldf3+0x510>
    903c:	400f883a 	mov	r7,r8
    9040:	003f4e06 	br	8d7c <__muldf3+0x46c>
    9044:	00fff844 	movi	r3,-31
    9048:	1907c83a 	sub	r3,r3,r4
    904c:	10800820 	cmpeqi	r2,r2,32
    9050:	98c6d83a 	srl	r3,r19,r3
    9054:	1000031e 	bne	r2,zero,9064 <__muldf3+0x754>
    9058:	39c10f84 	addi	r7,r7,1086
    905c:	99e6983a 	sll	r19,r19,r7
    9060:	94e4b03a 	or	r18,r18,r19
    9064:	9024c03a 	cmpne	r18,r18,zero
    9068:	90c4b03a 	or	r2,r18,r3
    906c:	148001cc 	andi	r18,r2,7
    9070:	9000051e 	bne	r18,zero,9088 <__muldf3+0x778>
    9074:	0027883a 	mov	r19,zero
    9078:	1004d0fa 	srli	r2,r2,3
    907c:	0007883a 	mov	r3,zero
    9080:	14a4b03a 	or	r18,r2,r18
    9084:	003e7706 	br	8a64 <__muldf3+0x154>
    9088:	10c003cc 	andi	r3,r2,15
    908c:	18c00118 	cmpnei	r3,r3,4
    9090:	0027883a 	mov	r19,zero
    9094:	183fb71e 	bne	r3,zero,8f74 <__muldf3+0x664>
    9098:	9806927a 	slli	r3,r19,9
    909c:	9824977a 	slli	r18,r19,29
    90a0:	1826d33a 	srli	r19,r3,12
    90a4:	003ff406 	br	9078 <__muldf3+0x768>
    90a8:	00800434 	movhi	r2,16
    90ac:	9cc00234 	orhi	r19,r19,8
    90b0:	10bfffc4 	addi	r2,r2,-1
    90b4:	98a6703a 	and	r19,r19,r2
    90b8:	003f9906 	br	8f20 <__muldf3+0x610>

000090bc <__subdf3>:
    90bc:	00800434 	movhi	r2,16
    90c0:	defffb04 	addi	sp,sp,-20
    90c4:	3812d53a 	srli	r9,r7,20
    90c8:	10bfffc4 	addi	r2,r2,-1
    90cc:	2886703a 	and	r3,r5,r2
    90d0:	dc000015 	stw	r16,0(sp)
    90d4:	3884703a 	and	r2,r7,r2
    90d8:	2820d53a 	srli	r16,r5,20
    90dc:	3014d77a 	srli	r10,r6,29
    90e0:	280ad7fa 	srli	r5,r5,31
    90e4:	180690fa 	slli	r3,r3,3
    90e8:	2016d77a 	srli	r11,r4,29
    90ec:	100490fa 	slli	r2,r2,3
    90f0:	4a41ffcc 	andi	r9,r9,2047
    90f4:	dc800215 	stw	r18,8(sp)
    90f8:	8401ffcc 	andi	r16,r16,2047
    90fc:	dfc00415 	stw	ra,16(sp)
    9100:	dcc00315 	stw	r19,12(sp)
    9104:	dc400115 	stw	r17,4(sp)
    9108:	4b01ffd8 	cmpnei	r12,r9,2047
    910c:	3810d7fa 	srli	r8,r7,31
    9110:	2825883a 	mov	r18,r5
    9114:	5084b03a 	or	r2,r10,r2
    9118:	201c90fa 	slli	r14,r4,3
    911c:	301a90fa 	slli	r13,r6,3
    9120:	29403fcc 	andi	r5,r5,255
    9124:	58ceb03a 	or	r7,r11,r3
    9128:	8255c83a 	sub	r10,r16,r9
    912c:	60006826 	beq	r12,zero,92d0 <__subdf3+0x214>
    9130:	42c0005c 	xori	r11,r8,1
    9134:	2ac07326 	beq	r5,r11,9304 <__subdf3+0x248>
    9138:	0280590e 	bge	zero,r10,92a0 <__subdf3+0x1e4>
    913c:	4800691e 	bne	r9,zero,92e4 <__subdf3+0x228>
    9140:	1346b03a 	or	r3,r2,r13
    9144:	1800e826 	beq	r3,zero,94e8 <__subdf3+0x42c>
    9148:	50ffffc4 	addi	r3,r10,-1
    914c:	18018126 	beq	r3,zero,9754 <__subdf3+0x698>
    9150:	5281ffd8 	cmpnei	r10,r10,2047
    9154:	5000eb26 	beq	r10,zero,9504 <__subdf3+0x448>
    9158:	1815883a 	mov	r10,r3
    915c:	50c00e48 	cmpgei	r3,r10,57
    9160:	1800651e 	bne	r3,zero,92f8 <__subdf3+0x23c>
    9164:	50c00808 	cmpgei	r3,r10,32
    9168:	18012a1e 	bne	r3,zero,9614 <__subdf3+0x558>
    916c:	00c00804 	movi	r3,32
    9170:	1a87c83a 	sub	r3,r3,r10
    9174:	10e2983a 	sll	r17,r2,r3
    9178:	6a88d83a 	srl	r4,r13,r10
    917c:	68da983a 	sll	r13,r13,r3
    9180:	1284d83a 	srl	r2,r2,r10
    9184:	8922b03a 	or	r17,r17,r4
    9188:	681ac03a 	cmpne	r13,r13,zero
    918c:	8b62b03a 	or	r17,r17,r13
    9190:	388fc83a 	sub	r7,r7,r2
    9194:	7463c83a 	sub	r17,r14,r17
    9198:	7445803a 	cmpltu	r2,r14,r17
    919c:	3889c83a 	sub	r4,r7,r2
    91a0:	2080202c 	andhi	r2,r4,128
    91a4:	10008e26 	beq	r2,zero,93e0 <__subdf3+0x324>
    91a8:	04c02034 	movhi	r19,128
    91ac:	9cffffc4 	addi	r19,r19,-1
    91b0:	24e6703a 	and	r19,r4,r19
    91b4:	9800a626 	beq	r19,zero,9450 <__subdf3+0x394>
    91b8:	9809883a 	mov	r4,r19
    91bc:	0009e500 	call	9e50 <__clzsi2>
    91c0:	117ffe04 	addi	r5,r2,-8
    91c4:	01000804 	movi	r4,32
    91c8:	2149c83a 	sub	r4,r4,r5
    91cc:	8908d83a 	srl	r4,r17,r4
    91d0:	9944983a 	sll	r2,r19,r5
    91d4:	8962983a 	sll	r17,r17,r5
    91d8:	2084b03a 	or	r2,r4,r2
    91dc:	2c00a516 	blt	r5,r16,9474 <__subdf3+0x3b8>
    91e0:	2c0bc83a 	sub	r5,r5,r16
    91e4:	29000044 	addi	r4,r5,1
    91e8:	20c00808 	cmpgei	r3,r4,32
    91ec:	1800701e 	bne	r3,zero,93b0 <__subdf3+0x2f4>
    91f0:	00c00804 	movi	r3,32
    91f4:	1907c83a 	sub	r3,r3,r4
    91f8:	890ad83a 	srl	r5,r17,r4
    91fc:	88e2983a 	sll	r17,r17,r3
    9200:	10c6983a 	sll	r3,r2,r3
    9204:	1108d83a 	srl	r4,r2,r4
    9208:	8822c03a 	cmpne	r17,r17,zero
    920c:	1946b03a 	or	r3,r3,r5
    9210:	1c62b03a 	or	r17,r3,r17
    9214:	0021883a 	mov	r16,zero
    9218:	888001cc 	andi	r2,r17,7
    921c:	10000726 	beq	r2,zero,923c <__subdf3+0x180>
    9220:	888003cc 	andi	r2,r17,15
    9224:	10800120 	cmpeqi	r2,r2,4
    9228:	1000041e 	bne	r2,zero,923c <__subdf3+0x180>
    922c:	88800104 	addi	r2,r17,4
    9230:	1463803a 	cmpltu	r17,r2,r17
    9234:	2449883a 	add	r4,r4,r17
    9238:	1023883a 	mov	r17,r2
    923c:	2080202c 	andhi	r2,r4,128
    9240:	10006926 	beq	r2,zero,93e8 <__subdf3+0x32c>
    9244:	84000044 	addi	r16,r16,1
    9248:	8081ffe0 	cmpeqi	r2,r16,2047
    924c:	8401ffcc 	andi	r16,r16,2047
    9250:	10007b1e 	bne	r2,zero,9440 <__subdf3+0x384>
    9254:	00bfe034 	movhi	r2,65408
    9258:	10bfffc4 	addi	r2,r2,-1
    925c:	2084703a 	and	r2,r4,r2
    9260:	1006927a 	slli	r3,r2,9
    9264:	8822d0fa 	srli	r17,r17,3
    9268:	1008977a 	slli	r4,r2,29
    926c:	1806d33a 	srli	r3,r3,12
    9270:	2444b03a 	or	r2,r4,r17
    9274:	8020953a 	slli	r16,r16,20
    9278:	902497fa 	slli	r18,r18,31
    927c:	80c6b03a 	or	r3,r16,r3
    9280:	1c86b03a 	or	r3,r3,r18
    9284:	dfc00417 	ldw	ra,16(sp)
    9288:	dcc00317 	ldw	r19,12(sp)
    928c:	dc800217 	ldw	r18,8(sp)
    9290:	dc400117 	ldw	r17,4(sp)
    9294:	dc000017 	ldw	r16,0(sp)
    9298:	dec00504 	addi	sp,sp,20
    929c:	f800283a 	ret
    92a0:	50002c26 	beq	r10,zero,9354 <__subdf3+0x298>
    92a4:	4c15c83a 	sub	r10,r9,r16
    92a8:	5825883a 	mov	r18,r11
    92ac:	8000b21e 	bne	r16,zero,9578 <__subdf3+0x4bc>
    92b0:	3b86b03a 	or	r3,r7,r14
    92b4:	18010826 	beq	r3,zero,96d8 <__subdf3+0x61c>
    92b8:	50ffffc4 	addi	r3,r10,-1
    92bc:	18015a26 	beq	r3,zero,9828 <__subdf3+0x76c>
    92c0:	5401ffd8 	cmpnei	r16,r10,2047
    92c4:	80012926 	beq	r16,zero,976c <__subdf3+0x6b0>
    92c8:	1815883a 	mov	r10,r3
    92cc:	0000ac06 	br	9580 <__subdf3+0x4c4>
    92d0:	1346b03a 	or	r3,r2,r13
    92d4:	183f9626 	beq	r3,zero,9130 <__subdf3+0x74>
    92d8:	42c03fcc 	andi	r11,r8,255
    92dc:	2a006a26 	beq	r5,r8,9488 <__subdf3+0x3cc>
    92e0:	02bfef0e 	bge	zero,r10,92a0 <__subdf3+0x1e4>
    92e4:	80c1ffd8 	cmpnei	r3,r16,2047
    92e8:	18008626 	beq	r3,zero,9504 <__subdf3+0x448>
    92ec:	50c00e48 	cmpgei	r3,r10,57
    92f0:	10802034 	orhi	r2,r2,128
    92f4:	183f9b26 	beq	r3,zero,9164 <__subdf3+0xa8>
    92f8:	1344b03a 	or	r2,r2,r13
    92fc:	1022c03a 	cmpne	r17,r2,zero
    9300:	003fa406 	br	9194 <__subdf3+0xd8>
    9304:	0280600e 	bge	zero,r10,9488 <__subdf3+0x3cc>
    9308:	48002126 	beq	r9,zero,9390 <__subdf3+0x2d4>
    930c:	80c1ffd8 	cmpnei	r3,r16,2047
    9310:	18011d26 	beq	r3,zero,9788 <__subdf3+0x6cc>
    9314:	10802034 	orhi	r2,r2,128
    9318:	50c00e48 	cmpgei	r3,r10,57
    931c:	18003e1e 	bne	r3,zero,9418 <__subdf3+0x35c>
    9320:	50c00808 	cmpgei	r3,r10,32
    9324:	1800d526 	beq	r3,zero,967c <__subdf3+0x5c0>
    9328:	547ff804 	addi	r17,r10,-32
    932c:	51000820 	cmpeqi	r4,r10,32
    9330:	1446d83a 	srl	r3,r2,r17
    9334:	2000041e 	bne	r4,zero,9348 <__subdf3+0x28c>
    9338:	01001004 	movi	r4,64
    933c:	2295c83a 	sub	r10,r4,r10
    9340:	1284983a 	sll	r2,r2,r10
    9344:	689ab03a 	or	r13,r13,r2
    9348:	6822c03a 	cmpne	r17,r13,zero
    934c:	88e2b03a 	or	r17,r17,r3
    9350:	00003306 	br	9420 <__subdf3+0x364>
    9354:	80c00044 	addi	r3,r16,1
    9358:	18c1ff8c 	andi	r3,r3,2046
    935c:	1800971e 	bne	r3,zero,95bc <__subdf3+0x500>
    9360:	1350b03a 	or	r8,r2,r13
    9364:	3b86b03a 	or	r3,r7,r14
    9368:	8000e21e 	bne	r16,zero,96f4 <__subdf3+0x638>
    936c:	18012526 	beq	r3,zero,9804 <__subdf3+0x748>
    9370:	4001411e 	bne	r8,zero,9878 <__subdf3+0x7bc>
    9374:	3806977a 	slli	r3,r7,29
    9378:	00880034 	movhi	r2,8192
    937c:	10bfffc4 	addi	r2,r2,-1
    9380:	208a703a 	and	r5,r4,r2
    9384:	3810d0fa 	srli	r8,r7,3
    9388:	28c4b03a 	or	r2,r5,r3
    938c:	00001d06 	br	9404 <__subdf3+0x348>
    9390:	1346b03a 	or	r3,r2,r13
    9394:	18005426 	beq	r3,zero,94e8 <__subdf3+0x42c>
    9398:	50ffffc4 	addi	r3,r10,-1
    939c:	1800e526 	beq	r3,zero,9734 <__subdf3+0x678>
    93a0:	5281ffd8 	cmpnei	r10,r10,2047
    93a4:	50012d26 	beq	r10,zero,985c <__subdf3+0x7a0>
    93a8:	1815883a 	mov	r10,r3
    93ac:	003fda06 	br	9318 <__subdf3+0x25c>
    93b0:	297ff844 	addi	r5,r5,-31
    93b4:	20c00820 	cmpeqi	r3,r4,32
    93b8:	114ad83a 	srl	r5,r2,r5
    93bc:	1800041e 	bne	r3,zero,93d0 <__subdf3+0x314>
    93c0:	00c01004 	movi	r3,64
    93c4:	1909c83a 	sub	r4,r3,r4
    93c8:	1104983a 	sll	r2,r2,r4
    93cc:	88a2b03a 	or	r17,r17,r2
    93d0:	8822c03a 	cmpne	r17,r17,zero
    93d4:	8962b03a 	or	r17,r17,r5
    93d8:	0009883a 	mov	r4,zero
    93dc:	0021883a 	mov	r16,zero
    93e0:	888001cc 	andi	r2,r17,7
    93e4:	103f8e1e 	bne	r2,zero,9220 <__subdf3+0x164>
    93e8:	8822d0fa 	srli	r17,r17,3
    93ec:	2004977a 	slli	r2,r4,29
    93f0:	2010d0fa 	srli	r8,r4,3
    93f4:	8015883a 	mov	r10,r16
    93f8:	8884b03a 	or	r2,r17,r2
    93fc:	50c1ffe0 	cmpeqi	r3,r10,2047
    9400:	18016f1e 	bne	r3,zero,99c0 <__subdf3+0x904>
    9404:	00c00434 	movhi	r3,16
    9408:	18ffffc4 	addi	r3,r3,-1
    940c:	40c6703a 	and	r3,r8,r3
    9410:	5401ffcc 	andi	r16,r10,2047
    9414:	003f9706 	br	9274 <__subdf3+0x1b8>
    9418:	1344b03a 	or	r2,r2,r13
    941c:	1022c03a 	cmpne	r17,r2,zero
    9420:	8ba3883a 	add	r17,r17,r14
    9424:	8b85803a 	cmpltu	r2,r17,r14
    9428:	11c9883a 	add	r4,r2,r7
    942c:	2080202c 	andhi	r2,r4,128
    9430:	103feb26 	beq	r2,zero,93e0 <__subdf3+0x324>
    9434:	84000044 	addi	r16,r16,1
    9438:	8081ffe0 	cmpeqi	r2,r16,2047
    943c:	10006b26 	beq	r2,zero,95ec <__subdf3+0x530>
    9440:	0401ffc4 	movi	r16,2047
    9444:	0007883a 	mov	r3,zero
    9448:	0005883a 	mov	r2,zero
    944c:	003f8906 	br	9274 <__subdf3+0x1b8>
    9450:	8809883a 	mov	r4,r17
    9454:	0009e500 	call	9e50 <__clzsi2>
    9458:	11400604 	addi	r5,r2,24
    945c:	28c00808 	cmpgei	r3,r5,32
    9460:	183f5826 	beq	r3,zero,91c4 <__subdf3+0x108>
    9464:	10bffe04 	addi	r2,r2,-8
    9468:	8884983a 	sll	r2,r17,r2
    946c:	0023883a 	mov	r17,zero
    9470:	2c3f5b0e 	bge	r5,r16,91e0 <__subdf3+0x124>
    9474:	013fe034 	movhi	r4,65408
    9478:	213fffc4 	addi	r4,r4,-1
    947c:	8161c83a 	sub	r16,r16,r5
    9480:	1108703a 	and	r4,r2,r4
    9484:	003f6406 	br	9218 <__subdf3+0x15c>
    9488:	50002c26 	beq	r10,zero,953c <__subdf3+0x480>
    948c:	4c15c83a 	sub	r10,r9,r16
    9490:	80007226 	beq	r16,zero,965c <__subdf3+0x5a0>
    9494:	6000ea26 	beq	r12,zero,9840 <__subdf3+0x784>
    9498:	39c02034 	orhi	r7,r7,128
    949c:	50c00e48 	cmpgei	r3,r10,57
    94a0:	1800c01e 	bne	r3,zero,97a4 <__subdf3+0x6e8>
    94a4:	50c00808 	cmpgei	r3,r10,32
    94a8:	1801261e 	bne	r3,zero,9944 <__subdf3+0x888>
    94ac:	00c00804 	movi	r3,32
    94b0:	1a87c83a 	sub	r3,r3,r10
    94b4:	38e2983a 	sll	r17,r7,r3
    94b8:	7288d83a 	srl	r4,r14,r10
    94bc:	70c6983a 	sll	r3,r14,r3
    94c0:	3a8ed83a 	srl	r7,r7,r10
    94c4:	8922b03a 	or	r17,r17,r4
    94c8:	1806c03a 	cmpne	r3,r3,zero
    94cc:	88e2b03a 	or	r17,r17,r3
    94d0:	11c5883a 	add	r2,r2,r7
    94d4:	8b63883a 	add	r17,r17,r13
    94d8:	8b49803a 	cmpltu	r4,r17,r13
    94dc:	2089883a 	add	r4,r4,r2
    94e0:	4821883a 	mov	r16,r9
    94e4:	003fd106 	br	942c <__subdf3+0x370>
    94e8:	380c977a 	slli	r6,r7,29
    94ec:	00880034 	movhi	r2,8192
    94f0:	10bfffc4 	addi	r2,r2,-1
    94f4:	2088703a 	and	r4,r4,r2
    94f8:	3810d0fa 	srli	r8,r7,3
    94fc:	2184b03a 	or	r2,r4,r6
    9500:	003fbe06 	br	93fc <__subdf3+0x340>
    9504:	380c977a 	slli	r6,r7,29
    9508:	00880034 	movhi	r2,8192
    950c:	10bfffc4 	addi	r2,r2,-1
    9510:	380ed0fa 	srli	r7,r7,3
    9514:	2084703a 	and	r2,r4,r2
    9518:	1184b03a 	or	r2,r2,r6
    951c:	3886b03a 	or	r3,r7,r2
    9520:	18012326 	beq	r3,zero,99b0 <__subdf3+0x8f4>
    9524:	01000434 	movhi	r4,16
    9528:	38c00234 	orhi	r3,r7,8
    952c:	213fffc4 	addi	r4,r4,-1
    9530:	1906703a 	and	r3,r3,r4
    9534:	0401ffc4 	movi	r16,2047
    9538:	003f4e06 	br	9274 <__subdf3+0x1b8>
    953c:	80c00044 	addi	r3,r16,1
    9540:	1941ff8c 	andi	r5,r3,2046
    9544:	2800581e 	bne	r5,zero,96a8 <__subdf3+0x5ec>
    9548:	3b86b03a 	or	r3,r7,r14
    954c:	8000a31e 	bne	r16,zero,97dc <__subdf3+0x720>
    9550:	1800ea26 	beq	r3,zero,98fc <__subdf3+0x840>
    9554:	1346b03a 	or	r3,r2,r13
    9558:	1800ef1e 	bne	r3,zero,9918 <__subdf3+0x85c>
    955c:	380a977a 	slli	r5,r7,29
    9560:	00880034 	movhi	r2,8192
    9564:	10bfffc4 	addi	r2,r2,-1
    9568:	2084703a 	and	r2,r4,r2
    956c:	3810d0fa 	srli	r8,r7,3
    9570:	2884b03a 	or	r2,r5,r2
    9574:	003fa306 	br	9404 <__subdf3+0x348>
    9578:	60007c26 	beq	r12,zero,976c <__subdf3+0x6b0>
    957c:	39c02034 	orhi	r7,r7,128
    9580:	50c00e48 	cmpgei	r3,r10,57
    9584:	18002e1e 	bne	r3,zero,9640 <__subdf3+0x584>
    9588:	50c00808 	cmpgei	r3,r10,32
    958c:	1800881e 	bne	r3,zero,97b0 <__subdf3+0x6f4>
    9590:	00c00804 	movi	r3,32
    9594:	1a87c83a 	sub	r3,r3,r10
    9598:	7288d83a 	srl	r4,r14,r10
    959c:	38e2983a 	sll	r17,r7,r3
    95a0:	70dc983a 	sll	r14,r14,r3
    95a4:	3aa0d83a 	srl	r16,r7,r10
    95a8:	8922b03a 	or	r17,r17,r4
    95ac:	701cc03a 	cmpne	r14,r14,zero
    95b0:	8ba2b03a 	or	r17,r17,r14
    95b4:	1405c83a 	sub	r2,r2,r16
    95b8:	00002306 	br	9648 <__subdf3+0x58c>
    95bc:	7363c83a 	sub	r17,r14,r13
    95c0:	3889c83a 	sub	r4,r7,r2
    95c4:	7467803a 	cmpltu	r19,r14,r17
    95c8:	24e7c83a 	sub	r19,r4,r19
    95cc:	98c0202c 	andhi	r3,r19,128
    95d0:	1800521e 	bne	r3,zero,971c <__subdf3+0x660>
    95d4:	8cc4b03a 	or	r2,r17,r19
    95d8:	103ef61e 	bne	r2,zero,91b4 <__subdf3+0xf8>
    95dc:	0011883a 	mov	r8,zero
    95e0:	0025883a 	mov	r18,zero
    95e4:	003f8706 	br	9404 <__subdf3+0x348>
    95e8:	04000084 	movi	r16,2
    95ec:	00bfe034 	movhi	r2,65408
    95f0:	10bfffc4 	addi	r2,r2,-1
    95f4:	8806d07a 	srli	r3,r17,1
    95f8:	2084703a 	and	r2,r4,r2
    95fc:	100a97fa 	slli	r5,r2,31
    9600:	8c40004c 	andi	r17,r17,1
    9604:	1c62b03a 	or	r17,r3,r17
    9608:	1008d07a 	srli	r4,r2,1
    960c:	2c62b03a 	or	r17,r5,r17
    9610:	003f0106 	br	9218 <__subdf3+0x15c>
    9614:	547ff804 	addi	r17,r10,-32
    9618:	51000820 	cmpeqi	r4,r10,32
    961c:	1446d83a 	srl	r3,r2,r17
    9620:	2000041e 	bne	r4,zero,9634 <__subdf3+0x578>
    9624:	01001004 	movi	r4,64
    9628:	2295c83a 	sub	r10,r4,r10
    962c:	1284983a 	sll	r2,r2,r10
    9630:	689ab03a 	or	r13,r13,r2
    9634:	6822c03a 	cmpne	r17,r13,zero
    9638:	88e2b03a 	or	r17,r17,r3
    963c:	003ed506 	br	9194 <__subdf3+0xd8>
    9640:	3ba2b03a 	or	r17,r7,r14
    9644:	8822c03a 	cmpne	r17,r17,zero
    9648:	6c63c83a 	sub	r17,r13,r17
    964c:	6c49803a 	cmpltu	r4,r13,r17
    9650:	1109c83a 	sub	r4,r2,r4
    9654:	4821883a 	mov	r16,r9
    9658:	003ed106 	br	91a0 <__subdf3+0xe4>
    965c:	3b86b03a 	or	r3,r7,r14
    9660:	18001d26 	beq	r3,zero,96d8 <__subdf3+0x61c>
    9664:	50ffffc4 	addi	r3,r10,-1
    9668:	1800c126 	beq	r3,zero,9970 <__subdf3+0x8b4>
    966c:	5281ffd8 	cmpnei	r10,r10,2047
    9670:	50003e26 	beq	r10,zero,976c <__subdf3+0x6b0>
    9674:	1815883a 	mov	r10,r3
    9678:	003f8806 	br	949c <__subdf3+0x3e0>
    967c:	00c00804 	movi	r3,32
    9680:	1a87c83a 	sub	r3,r3,r10
    9684:	10e2983a 	sll	r17,r2,r3
    9688:	6a88d83a 	srl	r4,r13,r10
    968c:	68da983a 	sll	r13,r13,r3
    9690:	1284d83a 	srl	r2,r2,r10
    9694:	8922b03a 	or	r17,r17,r4
    9698:	681ac03a 	cmpne	r13,r13,zero
    969c:	8b62b03a 	or	r17,r17,r13
    96a0:	388f883a 	add	r7,r7,r2
    96a4:	003f5e06 	br	9420 <__subdf3+0x364>
    96a8:	1901ffe0 	cmpeqi	r4,r3,2047
    96ac:	203f641e 	bne	r4,zero,9440 <__subdf3+0x384>
    96b0:	735b883a 	add	r13,r14,r13
    96b4:	6b89803a 	cmpltu	r4,r13,r14
    96b8:	3885883a 	add	r2,r7,r2
    96bc:	1105883a 	add	r2,r2,r4
    96c0:	102297fa 	slli	r17,r2,31
    96c4:	681ad07a 	srli	r13,r13,1
    96c8:	1008d07a 	srli	r4,r2,1
    96cc:	1821883a 	mov	r16,r3
    96d0:	8b62b03a 	or	r17,r17,r13
    96d4:	003f4206 	br	93e0 <__subdf3+0x324>
    96d8:	1008977a 	slli	r4,r2,29
    96dc:	00c80034 	movhi	r3,8192
    96e0:	18ffffc4 	addi	r3,r3,-1
    96e4:	30cc703a 	and	r6,r6,r3
    96e8:	1010d0fa 	srli	r8,r2,3
    96ec:	3104b03a 	or	r2,r6,r4
    96f0:	003f4206 	br	93fc <__subdf3+0x340>
    96f4:	18006c1e 	bne	r3,zero,98a8 <__subdf3+0x7ec>
    96f8:	4000a826 	beq	r8,zero,999c <__subdf3+0x8e0>
    96fc:	1008977a 	slli	r4,r2,29
    9700:	00c80034 	movhi	r3,8192
    9704:	18ffffc4 	addi	r3,r3,-1
    9708:	30c6703a 	and	r3,r6,r3
    970c:	100ed0fa 	srli	r7,r2,3
    9710:	5825883a 	mov	r18,r11
    9714:	1904b03a 	or	r2,r3,r4
    9718:	003f8006 	br	951c <__subdf3+0x460>
    971c:	6ba3c83a 	sub	r17,r13,r14
    9720:	11c5c83a 	sub	r2,r2,r7
    9724:	6c49803a 	cmpltu	r4,r13,r17
    9728:	1127c83a 	sub	r19,r2,r4
    972c:	5825883a 	mov	r18,r11
    9730:	003ea006 	br	91b4 <__subdf3+0xf8>
    9734:	7363883a 	add	r17,r14,r13
    9738:	3885883a 	add	r2,r7,r2
    973c:	8b9d803a 	cmpltu	r14,r17,r14
    9740:	1389883a 	add	r4,r2,r14
    9744:	2080202c 	andhi	r2,r4,128
    9748:	103fa71e 	bne	r2,zero,95e8 <__subdf3+0x52c>
    974c:	04000044 	movi	r16,1
    9750:	003f2306 	br	93e0 <__subdf3+0x324>
    9754:	7363c83a 	sub	r17,r14,r13
    9758:	3885c83a 	sub	r2,r7,r2
    975c:	745d803a 	cmpltu	r14,r14,r17
    9760:	1389c83a 	sub	r4,r2,r14
    9764:	04000044 	movi	r16,1
    9768:	003e8d06 	br	91a0 <__subdf3+0xe4>
    976c:	1008977a 	slli	r4,r2,29
    9770:	00c80034 	movhi	r3,8192
    9774:	18ffffc4 	addi	r3,r3,-1
    9778:	30c6703a 	and	r3,r6,r3
    977c:	100ed0fa 	srli	r7,r2,3
    9780:	1904b03a 	or	r2,r3,r4
    9784:	003f6506 	br	951c <__subdf3+0x460>
    9788:	380c977a 	slli	r6,r7,29
    978c:	00880034 	movhi	r2,8192
    9790:	10bfffc4 	addi	r2,r2,-1
    9794:	2088703a 	and	r4,r4,r2
    9798:	380ed0fa 	srli	r7,r7,3
    979c:	2184b03a 	or	r2,r4,r6
    97a0:	003f5e06 	br	951c <__subdf3+0x460>
    97a4:	3ba2b03a 	or	r17,r7,r14
    97a8:	8822c03a 	cmpne	r17,r17,zero
    97ac:	003f4906 	br	94d4 <__subdf3+0x418>
    97b0:	547ff804 	addi	r17,r10,-32
    97b4:	51000820 	cmpeqi	r4,r10,32
    97b8:	3c46d83a 	srl	r3,r7,r17
    97bc:	2000041e 	bne	r4,zero,97d0 <__subdf3+0x714>
    97c0:	01001004 	movi	r4,64
    97c4:	2295c83a 	sub	r10,r4,r10
    97c8:	3a8e983a 	sll	r7,r7,r10
    97cc:	71dcb03a 	or	r14,r14,r7
    97d0:	7022c03a 	cmpne	r17,r14,zero
    97d4:	88e2b03a 	or	r17,r17,r3
    97d8:	003f9b06 	br	9648 <__subdf3+0x58c>
    97dc:	18001826 	beq	r3,zero,9840 <__subdf3+0x784>
    97e0:	135ab03a 	or	r13,r2,r13
    97e4:	380a977a 	slli	r5,r7,29
    97e8:	380ed0fa 	srli	r7,r7,3
    97ec:	6800311e 	bne	r13,zero,98b4 <__subdf3+0x7f8>
    97f0:	00880034 	movhi	r2,8192
    97f4:	10bfffc4 	addi	r2,r2,-1
    97f8:	2084703a 	and	r2,r4,r2
    97fc:	1144b03a 	or	r2,r2,r5
    9800:	003f4606 	br	951c <__subdf3+0x460>
    9804:	40005f26 	beq	r8,zero,9984 <__subdf3+0x8c8>
    9808:	1008977a 	slli	r4,r2,29
    980c:	00c80034 	movhi	r3,8192
    9810:	18ffffc4 	addi	r3,r3,-1
    9814:	30cc703a 	and	r6,r6,r3
    9818:	1010d0fa 	srli	r8,r2,3
    981c:	5825883a 	mov	r18,r11
    9820:	3104b03a 	or	r2,r6,r4
    9824:	003ef706 	br	9404 <__subdf3+0x348>
    9828:	6ba3c83a 	sub	r17,r13,r14
    982c:	11c5c83a 	sub	r2,r2,r7
    9830:	6c5b803a 	cmpltu	r13,r13,r17
    9834:	1349c83a 	sub	r4,r2,r13
    9838:	04000044 	movi	r16,1
    983c:	003e5806 	br	91a0 <__subdf3+0xe4>
    9840:	1006977a 	slli	r3,r2,29
    9844:	01080034 	movhi	r4,8192
    9848:	213fffc4 	addi	r4,r4,-1
    984c:	3108703a 	and	r4,r6,r4
    9850:	100ed0fa 	srli	r7,r2,3
    9854:	1904b03a 	or	r2,r3,r4
    9858:	003f3006 	br	951c <__subdf3+0x460>
    985c:	3806977a 	slli	r3,r7,29
    9860:	00880034 	movhi	r2,8192
    9864:	10bfffc4 	addi	r2,r2,-1
    9868:	2084703a 	and	r2,r4,r2
    986c:	380ed0fa 	srli	r7,r7,3
    9870:	10c4b03a 	or	r2,r2,r3
    9874:	003f2906 	br	951c <__subdf3+0x460>
    9878:	7363c83a 	sub	r17,r14,r13
    987c:	7447803a 	cmpltu	r3,r14,r17
    9880:	3889c83a 	sub	r4,r7,r2
    9884:	20c9c83a 	sub	r4,r4,r3
    9888:	20c0202c 	andhi	r3,r4,128
    988c:	18004026 	beq	r3,zero,9990 <__subdf3+0x8d4>
    9890:	6ba3c83a 	sub	r17,r13,r14
    9894:	11c5c83a 	sub	r2,r2,r7
    9898:	6c5b803a 	cmpltu	r13,r13,r17
    989c:	1349c83a 	sub	r4,r2,r13
    98a0:	5825883a 	mov	r18,r11
    98a4:	003e5c06 	br	9218 <__subdf3+0x15c>
    98a8:	380a977a 	slli	r5,r7,29
    98ac:	380ed0fa 	srli	r7,r7,3
    98b0:	403fcf26 	beq	r8,zero,97f0 <__subdf3+0x734>
    98b4:	00c80034 	movhi	r3,8192
    98b8:	18ffffc4 	addi	r3,r3,-1
    98bc:	20c8703a 	and	r4,r4,r3
    98c0:	3a00022c 	andhi	r8,r7,8
    98c4:	2148b03a 	or	r4,r4,r5
    98c8:	40000826 	beq	r8,zero,98ec <__subdf3+0x830>
    98cc:	100ad0fa 	srli	r5,r2,3
    98d0:	2a00022c 	andhi	r8,r5,8
    98d4:	4000051e 	bne	r8,zero,98ec <__subdf3+0x830>
    98d8:	1004977a 	slli	r2,r2,29
    98dc:	30c6703a 	and	r3,r6,r3
    98e0:	5825883a 	mov	r18,r11
    98e4:	1888b03a 	or	r4,r3,r2
    98e8:	280f883a 	mov	r7,r5
    98ec:	380e90fa 	slli	r7,r7,3
    98f0:	2005883a 	mov	r2,r4
    98f4:	380ed0fa 	srli	r7,r7,3
    98f8:	003f0806 	br	951c <__subdf3+0x460>
    98fc:	100a977a 	slli	r5,r2,29
    9900:	00c80034 	movhi	r3,8192
    9904:	18ffffc4 	addi	r3,r3,-1
    9908:	30c6703a 	and	r3,r6,r3
    990c:	1010d0fa 	srli	r8,r2,3
    9910:	28c4b03a 	or	r2,r5,r3
    9914:	003ebb06 	br	9404 <__subdf3+0x348>
    9918:	7363883a 	add	r17,r14,r13
    991c:	3885883a 	add	r2,r7,r2
    9920:	8b9d803a 	cmpltu	r14,r17,r14
    9924:	1389883a 	add	r4,r2,r14
    9928:	2080202c 	andhi	r2,r4,128
    992c:	103eac26 	beq	r2,zero,93e0 <__subdf3+0x324>
    9930:	00bfe034 	movhi	r2,65408
    9934:	10bfffc4 	addi	r2,r2,-1
    9938:	2088703a 	and	r4,r4,r2
    993c:	04000044 	movi	r16,1
    9940:	003ea706 	br	93e0 <__subdf3+0x324>
    9944:	50fff804 	addi	r3,r10,-32
    9948:	51000820 	cmpeqi	r4,r10,32
    994c:	38c6d83a 	srl	r3,r7,r3
    9950:	2000041e 	bne	r4,zero,9964 <__subdf3+0x8a8>
    9954:	01001004 	movi	r4,64
    9958:	2295c83a 	sub	r10,r4,r10
    995c:	3a8e983a 	sll	r7,r7,r10
    9960:	71dcb03a 	or	r14,r14,r7
    9964:	7022c03a 	cmpne	r17,r14,zero
    9968:	88e2b03a 	or	r17,r17,r3
    996c:	003ed906 	br	94d4 <__subdf3+0x418>
    9970:	7363883a 	add	r17,r14,r13
    9974:	3885883a 	add	r2,r7,r2
    9978:	8b5b803a 	cmpltu	r13,r17,r13
    997c:	1349883a 	add	r4,r2,r13
    9980:	003f7006 	br	9744 <__subdf3+0x688>
    9984:	0005883a 	mov	r2,zero
    9988:	0025883a 	mov	r18,zero
    998c:	003e9d06 	br	9404 <__subdf3+0x348>
    9990:	8904b03a 	or	r2,r17,r4
    9994:	103f1126 	beq	r2,zero,95dc <__subdf3+0x520>
    9998:	003e9106 	br	93e0 <__subdf3+0x324>
    999c:	01c00434 	movhi	r7,16
    99a0:	00bfffc4 	movi	r2,-1
    99a4:	39ffffc4 	addi	r7,r7,-1
    99a8:	0025883a 	mov	r18,zero
    99ac:	003edd06 	br	9524 <__subdf3+0x468>
    99b0:	0005883a 	mov	r2,zero
    99b4:	0401ffc4 	movi	r16,2047
    99b8:	0007883a 	mov	r3,zero
    99bc:	003e2d06 	br	9274 <__subdf3+0x1b8>
    99c0:	400f883a 	mov	r7,r8
    99c4:	003ed506 	br	951c <__subdf3+0x460>

000099c8 <__unorddf2>:
    99c8:	2806d53a 	srli	r3,r5,20
    99cc:	3810d53a 	srli	r8,r7,20
    99d0:	02400434 	movhi	r9,16
    99d4:	18c1ffcc 	andi	r3,r3,2047
    99d8:	4a7fffc4 	addi	r9,r9,-1
    99dc:	18c1ffd8 	cmpnei	r3,r3,2047
    99e0:	2a4a703a 	and	r5,r5,r9
    99e4:	3a4e703a 	and	r7,r7,r9
    99e8:	4201ffcc 	andi	r8,r8,2047
    99ec:	18000426 	beq	r3,zero,9a00 <__unorddf2+0x38>
    99f0:	4201ffd8 	cmpnei	r8,r8,2047
    99f4:	40000626 	beq	r8,zero,9a10 <__unorddf2+0x48>
    99f8:	0005883a 	mov	r2,zero
    99fc:	f800283a 	ret
    9a00:	290ab03a 	or	r5,r5,r4
    9a04:	283ffa26 	beq	r5,zero,99f0 <__unorddf2+0x28>
    9a08:	00800044 	movi	r2,1
    9a0c:	f800283a 	ret
    9a10:	398eb03a 	or	r7,r7,r6
    9a14:	3804c03a 	cmpne	r2,r7,zero
    9a18:	f800283a 	ret

00009a1c <__fixdfsi>:
    9a1c:	2806d53a 	srli	r3,r5,20
    9a20:	01800434 	movhi	r6,16
    9a24:	31bfffc4 	addi	r6,r6,-1
    9a28:	18c1ffcc 	andi	r3,r3,2047
    9a2c:	19c0ffd0 	cmplti	r7,r3,1023
    9a30:	2810d7fa 	srli	r8,r5,31
    9a34:	298a703a 	and	r5,r5,r6
    9a38:	3800061e 	bne	r7,zero,9a54 <__fixdfsi+0x38>
    9a3c:	18810790 	cmplti	r2,r3,1054
    9a40:	1000061e 	bne	r2,zero,9a5c <__fixdfsi+0x40>
    9a44:	00a00034 	movhi	r2,32768
    9a48:	10bfffc4 	addi	r2,r2,-1
    9a4c:	4085883a 	add	r2,r8,r2
    9a50:	f800283a 	ret
    9a54:	0005883a 	mov	r2,zero
    9a58:	f800283a 	ret
    9a5c:	01810cc4 	movi	r6,1075
    9a60:	30cdc83a 	sub	r6,r6,r3
    9a64:	30800808 	cmpgei	r2,r6,32
    9a68:	29400434 	orhi	r5,r5,16
    9a6c:	1000071e 	bne	r2,zero,9a8c <__fixdfsi+0x70>
    9a70:	18befb44 	addi	r2,r3,-1043
    9a74:	2884983a 	sll	r2,r5,r2
    9a78:	2188d83a 	srl	r4,r4,r6
    9a7c:	1104b03a 	or	r2,r2,r4
    9a80:	403ff526 	beq	r8,zero,9a58 <__fixdfsi+0x3c>
    9a84:	0085c83a 	sub	r2,zero,r2
    9a88:	f800283a 	ret
    9a8c:	008104c4 	movi	r2,1043
    9a90:	10c5c83a 	sub	r2,r2,r3
    9a94:	2884d83a 	srl	r2,r5,r2
    9a98:	003ff906 	br	9a80 <__fixdfsi+0x64>

00009a9c <__floatsidf>:
    9a9c:	defffd04 	addi	sp,sp,-12
    9aa0:	dfc00215 	stw	ra,8(sp)
    9aa4:	dc400115 	stw	r17,4(sp)
    9aa8:	dc000015 	stw	r16,0(sp)
    9aac:	20001326 	beq	r4,zero,9afc <__floatsidf+0x60>
    9ab0:	2022d7fa 	srli	r17,r4,31
    9ab4:	2021883a 	mov	r16,r4
    9ab8:	20002416 	blt	r4,zero,9b4c <__floatsidf+0xb0>
    9abc:	8009883a 	mov	r4,r16
    9ac0:	0009e500 	call	9e50 <__clzsi2>
    9ac4:	01010784 	movi	r4,1054
    9ac8:	2089c83a 	sub	r4,r4,r2
    9acc:	114002c8 	cmpgei	r5,r2,11
    9ad0:	20c1ffcc 	andi	r3,r4,2047
    9ad4:	2800161e 	bne	r5,zero,9b30 <__floatsidf+0x94>
    9ad8:	010002c4 	movi	r4,11
    9adc:	2089c83a 	sub	r4,r4,r2
    9ae0:	810ad83a 	srl	r5,r16,r4
    9ae4:	01000434 	movhi	r4,16
    9ae8:	10800544 	addi	r2,r2,21
    9aec:	213fffc4 	addi	r4,r4,-1
    9af0:	8084983a 	sll	r2,r16,r2
    9af4:	290a703a 	and	r5,r5,r4
    9af8:	00000406 	br	9b0c <__floatsidf+0x70>
    9afc:	0023883a 	mov	r17,zero
    9b00:	0007883a 	mov	r3,zero
    9b04:	000b883a 	mov	r5,zero
    9b08:	0005883a 	mov	r2,zero
    9b0c:	1808953a 	slli	r4,r3,20
    9b10:	880697fa 	slli	r3,r17,31
    9b14:	2148b03a 	or	r4,r4,r5
    9b18:	20c6b03a 	or	r3,r4,r3
    9b1c:	dfc00217 	ldw	ra,8(sp)
    9b20:	dc400117 	ldw	r17,4(sp)
    9b24:	dc000017 	ldw	r16,0(sp)
    9b28:	dec00304 	addi	sp,sp,12
    9b2c:	f800283a 	ret
    9b30:	10bffd44 	addi	r2,r2,-11
    9b34:	808a983a 	sll	r5,r16,r2
    9b38:	00800434 	movhi	r2,16
    9b3c:	10bfffc4 	addi	r2,r2,-1
    9b40:	288a703a 	and	r5,r5,r2
    9b44:	0005883a 	mov	r2,zero
    9b48:	003ff006 	br	9b0c <__floatsidf+0x70>
    9b4c:	0121c83a 	sub	r16,zero,r4
    9b50:	003fda06 	br	9abc <__floatsidf+0x20>

00009b54 <__floatunsidf>:
    9b54:	defffe04 	addi	sp,sp,-8
    9b58:	dc000015 	stw	r16,0(sp)
    9b5c:	dfc00115 	stw	ra,4(sp)
    9b60:	2021883a 	mov	r16,r4
    9b64:	20000f26 	beq	r4,zero,9ba4 <__floatunsidf+0x50>
    9b68:	0009e500 	call	9e50 <__clzsi2>
    9b6c:	00c10784 	movi	r3,1054
    9b70:	1887c83a 	sub	r3,r3,r2
    9b74:	110002c8 	cmpgei	r4,r2,11
    9b78:	18c1ffcc 	andi	r3,r3,2047
    9b7c:	2000121e 	bne	r4,zero,9bc8 <__floatunsidf+0x74>
    9b80:	014002c4 	movi	r5,11
    9b84:	288bc83a 	sub	r5,r5,r2
    9b88:	814ad83a 	srl	r5,r16,r5
    9b8c:	01000434 	movhi	r4,16
    9b90:	10800544 	addi	r2,r2,21
    9b94:	213fffc4 	addi	r4,r4,-1
    9b98:	80a0983a 	sll	r16,r16,r2
    9b9c:	290a703a 	and	r5,r5,r4
    9ba0:	00000206 	br	9bac <__floatunsidf+0x58>
    9ba4:	0007883a 	mov	r3,zero
    9ba8:	000b883a 	mov	r5,zero
    9bac:	1806953a 	slli	r3,r3,20
    9bb0:	8005883a 	mov	r2,r16
    9bb4:	1946b03a 	or	r3,r3,r5
    9bb8:	dfc00117 	ldw	ra,4(sp)
    9bbc:	dc000017 	ldw	r16,0(sp)
    9bc0:	dec00204 	addi	sp,sp,8
    9bc4:	f800283a 	ret
    9bc8:	117ffd44 	addi	r5,r2,-11
    9bcc:	814a983a 	sll	r5,r16,r5
    9bd0:	00800434 	movhi	r2,16
    9bd4:	10bfffc4 	addi	r2,r2,-1
    9bd8:	288a703a 	and	r5,r5,r2
    9bdc:	0021883a 	mov	r16,zero
    9be0:	003ff206 	br	9bac <__floatunsidf+0x58>

00009be4 <__extendsfdf2>:
    9be4:	200ad5fa 	srli	r5,r4,23
    9be8:	defffd04 	addi	sp,sp,-12
    9bec:	dc000015 	stw	r16,0(sp)
    9bf0:	29403fcc 	andi	r5,r5,255
    9bf4:	04002034 	movhi	r16,128
    9bf8:	28800044 	addi	r2,r5,1
    9bfc:	dc400115 	stw	r17,4(sp)
    9c00:	843fffc4 	addi	r16,r16,-1
    9c04:	dfc00215 	stw	ra,8(sp)
    9c08:	10803f8c 	andi	r2,r2,254
    9c0c:	2022d7fa 	srli	r17,r4,31
    9c10:	8120703a 	and	r16,r16,r4
    9c14:	10000d26 	beq	r2,zero,9c4c <__extendsfdf2+0x68>
    9c18:	8008d0fa 	srli	r4,r16,3
    9c1c:	8020977a 	slli	r16,r16,29
    9c20:	28c0e004 	addi	r3,r5,896
    9c24:	180a953a 	slli	r5,r3,20
    9c28:	880697fa 	slli	r3,r17,31
    9c2c:	8005883a 	mov	r2,r16
    9c30:	290ab03a 	or	r5,r5,r4
    9c34:	28c6b03a 	or	r3,r5,r3
    9c38:	dfc00217 	ldw	ra,8(sp)
    9c3c:	dc400117 	ldw	r17,4(sp)
    9c40:	dc000017 	ldw	r16,0(sp)
    9c44:	dec00304 	addi	sp,sp,12
    9c48:	f800283a 	ret
    9c4c:	2800111e 	bne	r5,zero,9c94 <__extendsfdf2+0xb0>
    9c50:	80001926 	beq	r16,zero,9cb8 <__extendsfdf2+0xd4>
    9c54:	8009883a 	mov	r4,r16
    9c58:	0009e500 	call	9e50 <__clzsi2>
    9c5c:	10c002c8 	cmpgei	r3,r2,11
    9c60:	18001b1e 	bne	r3,zero,9cd0 <__extendsfdf2+0xec>
    9c64:	010002c4 	movi	r4,11
    9c68:	2089c83a 	sub	r4,r4,r2
    9c6c:	10c00544 	addi	r3,r2,21
    9c70:	810ad83a 	srl	r5,r16,r4
    9c74:	80e0983a 	sll	r16,r16,r3
    9c78:	01000434 	movhi	r4,16
    9c7c:	00c0e244 	movi	r3,905
    9c80:	213fffc4 	addi	r4,r4,-1
    9c84:	1887c83a 	sub	r3,r3,r2
    9c88:	2908703a 	and	r4,r5,r4
    9c8c:	18c1ffcc 	andi	r3,r3,2047
    9c90:	003fe406 	br	9c24 <__extendsfdf2+0x40>
    9c94:	80000b26 	beq	r16,zero,9cc4 <__extendsfdf2+0xe0>
    9c98:	800ad0fa 	srli	r5,r16,3
    9c9c:	00800434 	movhi	r2,16
    9ca0:	10bfffc4 	addi	r2,r2,-1
    9ca4:	29000234 	orhi	r4,r5,8
    9ca8:	8020977a 	slli	r16,r16,29
    9cac:	2088703a 	and	r4,r4,r2
    9cb0:	00c1ffc4 	movi	r3,2047
    9cb4:	003fdb06 	br	9c24 <__extendsfdf2+0x40>
    9cb8:	0007883a 	mov	r3,zero
    9cbc:	0009883a 	mov	r4,zero
    9cc0:	003fd806 	br	9c24 <__extendsfdf2+0x40>
    9cc4:	00c1ffc4 	movi	r3,2047
    9cc8:	0009883a 	mov	r4,zero
    9ccc:	003fd506 	br	9c24 <__extendsfdf2+0x40>
    9cd0:	113ffd44 	addi	r4,r2,-11
    9cd4:	810a983a 	sll	r5,r16,r4
    9cd8:	0021883a 	mov	r16,zero
    9cdc:	003fe606 	br	9c78 <__extendsfdf2+0x94>

00009ce0 <__truncdfsf2>:
    9ce0:	2804d53a 	srli	r2,r5,20
    9ce4:	00c00434 	movhi	r3,16
    9ce8:	18ffffc4 	addi	r3,r3,-1
    9cec:	28c6703a 	and	r3,r5,r3
    9cf0:	180c90fa 	slli	r6,r3,3
    9cf4:	1081ffcc 	andi	r2,r2,2047
    9cf8:	2006d77a 	srli	r3,r4,29
    9cfc:	11c00044 	addi	r7,r2,1
    9d00:	39c1ff8c 	andi	r7,r7,2046
    9d04:	280ad7fa 	srli	r5,r5,31
    9d08:	201090fa 	slli	r8,r4,3
    9d0c:	1986b03a 	or	r3,r3,r6
    9d10:	38000b26 	beq	r7,zero,9d40 <__truncdfsf2+0x60>
    9d14:	11bf2004 	addi	r6,r2,-896
    9d18:	31c03fc8 	cmpgei	r7,r6,255
    9d1c:	38001226 	beq	r7,zero,9d68 <__truncdfsf2+0x88>
    9d20:	00bfffc4 	movi	r2,-1
    9d24:	0007883a 	mov	r3,zero
    9d28:	10803fcc 	andi	r2,r2,255
    9d2c:	100495fa 	slli	r2,r2,23
    9d30:	280a97fa 	slli	r5,r5,31
    9d34:	10c4b03a 	or	r2,r2,r3
    9d38:	1144b03a 	or	r2,r2,r5
    9d3c:	f800283a 	ret
    9d40:	1a10b03a 	or	r8,r3,r8
    9d44:	1000041e 	bne	r2,zero,9d58 <__truncdfsf2+0x78>
    9d48:	40001d1e 	bne	r8,zero,9dc0 <__truncdfsf2+0xe0>
    9d4c:	0005883a 	mov	r2,zero
    9d50:	0007883a 	mov	r3,zero
    9d54:	003ff406 	br	9d28 <__truncdfsf2+0x48>
    9d58:	403ff126 	beq	r8,zero,9d20 <__truncdfsf2+0x40>
    9d5c:	18c01034 	orhi	r3,r3,64
    9d60:	00bfffc4 	movi	r2,-1
    9d64:	003ff006 	br	9d28 <__truncdfsf2+0x48>
    9d68:	0180170e 	bge	zero,r6,9dc8 <__truncdfsf2+0xe8>
    9d6c:	200891ba 	slli	r4,r4,6
    9d70:	180690fa 	slli	r3,r3,3
    9d74:	4010d77a 	srli	r8,r8,29
    9d78:	2008c03a 	cmpne	r4,r4,zero
    9d7c:	20c6b03a 	or	r3,r4,r3
    9d80:	1a06b03a 	or	r3,r3,r8
    9d84:	188001cc 	andi	r2,r3,7
    9d88:	10002f26 	beq	r2,zero,9e48 <__truncdfsf2+0x168>
    9d8c:	188003cc 	andi	r2,r3,15
    9d90:	10800118 	cmpnei	r2,r2,4
    9d94:	10000126 	beq	r2,zero,9d9c <__truncdfsf2+0xbc>
    9d98:	18c00104 	addi	r3,r3,4
    9d9c:	1881002c 	andhi	r2,r3,1024
    9da0:	10002926 	beq	r2,zero,9e48 <__truncdfsf2+0x168>
    9da4:	30800044 	addi	r2,r6,1
    9da8:	11003fe0 	cmpeqi	r4,r2,255
    9dac:	203fdc1e 	bne	r4,zero,9d20 <__truncdfsf2+0x40>
    9db0:	180691ba 	slli	r3,r3,6
    9db4:	1806d27a 	srli	r3,r3,9
    9db8:	003fdb06 	br	9d28 <__truncdfsf2+0x48>
    9dbc:	0005883a 	mov	r2,zero
    9dc0:	00c00144 	movi	r3,5
    9dc4:	003ffa06 	br	9db0 <__truncdfsf2+0xd0>
    9dc8:	313ffa50 	cmplti	r4,r6,-23
    9dcc:	203ffb1e 	bne	r4,zero,9dbc <__truncdfsf2+0xdc>
    9dd0:	01c00784 	movi	r7,30
    9dd4:	398fc83a 	sub	r7,r7,r6
    9dd8:	3a400808 	cmpgei	r9,r7,32
    9ddc:	19002034 	orhi	r4,r3,128
    9de0:	48001126 	beq	r9,zero,9e28 <__truncdfsf2+0x148>
    9de4:	00ffff84 	movi	r3,-2
    9de8:	198dc83a 	sub	r6,r3,r6
    9dec:	39c00820 	cmpeqi	r7,r7,32
    9df0:	218cd83a 	srl	r6,r4,r6
    9df4:	3800031e 	bne	r7,zero,9e04 <__truncdfsf2+0x124>
    9df8:	10ff2884 	addi	r3,r2,-862
    9dfc:	20c8983a 	sll	r4,r4,r3
    9e00:	4110b03a 	or	r8,r8,r4
    9e04:	4006c03a 	cmpne	r3,r8,zero
    9e08:	1986b03a 	or	r3,r3,r6
    9e0c:	188001cc 	andi	r2,r3,7
    9e10:	000d883a 	mov	r6,zero
    9e14:	103fdd1e 	bne	r2,zero,9d8c <__truncdfsf2+0xac>
    9e18:	1881002c 	andhi	r2,r3,1024
    9e1c:	103fe426 	beq	r2,zero,9db0 <__truncdfsf2+0xd0>
    9e20:	00800044 	movi	r2,1
    9e24:	003fe206 	br	9db0 <__truncdfsf2+0xd0>
    9e28:	10ff2084 	addi	r3,r2,-894
    9e2c:	40c4983a 	sll	r2,r8,r3
    9e30:	20c8983a 	sll	r4,r4,r3
    9e34:	41c6d83a 	srl	r3,r8,r7
    9e38:	1004c03a 	cmpne	r2,r2,zero
    9e3c:	1108b03a 	or	r4,r2,r4
    9e40:	1906b03a 	or	r3,r3,r4
    9e44:	003ff106 	br	9e0c <__truncdfsf2+0x12c>
    9e48:	3005883a 	mov	r2,r6
    9e4c:	003fd806 	br	9db0 <__truncdfsf2+0xd0>

00009e50 <__clzsi2>:
    9e50:	00bfffd4 	movui	r2,65535
    9e54:	11000436 	bltu	r2,r4,9e68 <__clzsi2+0x18>
    9e58:	20804030 	cmpltui	r2,r4,256
    9e5c:	10000e26 	beq	r2,zero,9e98 <__clzsi2+0x48>
    9e60:	01400804 	movi	r5,32
    9e64:	00000406 	br	9e78 <__clzsi2+0x28>
    9e68:	00804034 	movhi	r2,256
    9e6c:	20800736 	bltu	r4,r2,9e8c <__clzsi2+0x3c>
    9e70:	2008d63a 	srli	r4,r4,24
    9e74:	01400204 	movi	r5,8
    9e78:	00c00074 	movhi	r3,1
    9e7c:	20c7883a 	add	r3,r4,r3
    9e80:	189e5f03 	ldbu	r2,31100(r3)
    9e84:	2885c83a 	sub	r2,r5,r2
    9e88:	f800283a 	ret
    9e8c:	2008d43a 	srli	r4,r4,16
    9e90:	01400404 	movi	r5,16
    9e94:	003ff806 	br	9e78 <__clzsi2+0x28>
    9e98:	2008d23a 	srli	r4,r4,8
    9e9c:	01400604 	movi	r5,24
    9ea0:	003ff506 	br	9e78 <__clzsi2+0x28>

00009ea4 <__errno>:
    9ea4:	008000b4 	movhi	r2,2
    9ea8:	10a71e17 	ldw	r2,-25480(r2)
    9eac:	f800283a 	ret

00009eb0 <malloc>:
    9eb0:	008000b4 	movhi	r2,2
    9eb4:	200b883a 	mov	r5,r4
    9eb8:	11271e17 	ldw	r4,-25480(r2)
    9ebc:	0009ed01 	jmpi	9ed0 <_malloc_r>

00009ec0 <free>:
    9ec0:	008000b4 	movhi	r2,2
    9ec4:	200b883a 	mov	r5,r4
    9ec8:	11271e17 	ldw	r4,-25480(r2)
    9ecc:	000ec241 	jmpi	ec24 <_free_r>

00009ed0 <_malloc_r>:
    9ed0:	defff604 	addi	sp,sp,-40
    9ed4:	dc400115 	stw	r17,4(sp)
    9ed8:	2c4002c4 	addi	r17,r5,11
    9edc:	dc800215 	stw	r18,8(sp)
    9ee0:	dfc00915 	stw	ra,36(sp)
    9ee4:	df000815 	stw	fp,32(sp)
    9ee8:	ddc00715 	stw	r23,28(sp)
    9eec:	dd800615 	stw	r22,24(sp)
    9ef0:	dd400515 	stw	r21,20(sp)
    9ef4:	dd000415 	stw	r20,16(sp)
    9ef8:	dcc00315 	stw	r19,12(sp)
    9efc:	dc000015 	stw	r16,0(sp)
    9f00:	888005e8 	cmpgeui	r2,r17,23
    9f04:	2025883a 	mov	r18,r4
    9f08:	10001b1e 	bne	r2,zero,9f78 <_malloc_r+0xa8>
    9f0c:	29400468 	cmpgeui	r5,r5,17
    9f10:	2800821e 	bne	r5,zero,a11c <_malloc_r+0x24c>
    9f14:	0014e880 	call	14e88 <__malloc_lock>
    9f18:	04400404 	movi	r17,16
    9f1c:	00800604 	movi	r2,24
    9f20:	01c00084 	movi	r7,2
    9f24:	04c000b4 	movhi	r19,2
    9f28:	9ce11004 	addi	r19,r19,-31680
    9f2c:	9885883a 	add	r2,r19,r2
    9f30:	14000117 	ldw	r16,4(r2)
    9f34:	10fffe04 	addi	r3,r2,-8
    9f38:	80c08b26 	beq	r16,r3,a168 <_malloc_r+0x298>
    9f3c:	80800117 	ldw	r2,4(r16)
    9f40:	81000317 	ldw	r4,12(r16)
    9f44:	00ffff04 	movi	r3,-4
    9f48:	10c4703a 	and	r2,r2,r3
    9f4c:	81400217 	ldw	r5,8(r16)
    9f50:	8085883a 	add	r2,r16,r2
    9f54:	10c00117 	ldw	r3,4(r2)
    9f58:	29000315 	stw	r4,12(r5)
    9f5c:	21400215 	stw	r5,8(r4)
    9f60:	18c00054 	ori	r3,r3,1
    9f64:	10c00115 	stw	r3,4(r2)
    9f68:	9009883a 	mov	r4,r18
    9f6c:	0014eac0 	call	14eac <__malloc_unlock>
    9f70:	80800204 	addi	r2,r16,8
    9f74:	00006c06 	br	a128 <_malloc_r+0x258>
    9f78:	00bffe04 	movi	r2,-8
    9f7c:	88a2703a 	and	r17,r17,r2
    9f80:	88006616 	blt	r17,zero,a11c <_malloc_r+0x24c>
    9f84:	89406536 	bltu	r17,r5,a11c <_malloc_r+0x24c>
    9f88:	0014e880 	call	14e88 <__malloc_lock>
    9f8c:	88807e28 	cmpgeui	r2,r17,504
    9f90:	10012226 	beq	r2,zero,a41c <_malloc_r+0x54c>
    9f94:	8804d27a 	srli	r2,r17,9
    9f98:	10006f26 	beq	r2,zero,a158 <_malloc_r+0x288>
    9f9c:	10c00168 	cmpgeui	r3,r2,5
    9fa0:	1800fe1e 	bne	r3,zero,a39c <_malloc_r+0x4cc>
    9fa4:	8804d1ba 	srli	r2,r17,6
    9fa8:	11c00e44 	addi	r7,r2,57
    9fac:	380890fa 	slli	r4,r7,3
    9fb0:	12000e04 	addi	r8,r2,56
    9fb4:	04c000b4 	movhi	r19,2
    9fb8:	9ce11004 	addi	r19,r19,-31680
    9fbc:	9909883a 	add	r4,r19,r4
    9fc0:	24000117 	ldw	r16,4(r4)
    9fc4:	213ffe04 	addi	r4,r4,-8
    9fc8:	24000b26 	beq	r4,r16,9ff8 <_malloc_r+0x128>
    9fcc:	01bfff04 	movi	r6,-4
    9fd0:	00000306 	br	9fe0 <_malloc_r+0x110>
    9fd4:	1800d60e 	bge	r3,zero,a330 <_malloc_r+0x460>
    9fd8:	84000317 	ldw	r16,12(r16)
    9fdc:	24000626 	beq	r4,r16,9ff8 <_malloc_r+0x128>
    9fe0:	80800117 	ldw	r2,4(r16)
    9fe4:	1184703a 	and	r2,r2,r6
    9fe8:	1447c83a 	sub	r3,r2,r17
    9fec:	19400408 	cmpgei	r5,r3,16
    9ff0:	283ff826 	beq	r5,zero,9fd4 <_malloc_r+0x104>
    9ff4:	400f883a 	mov	r7,r8
    9ff8:	9c000417 	ldw	r16,16(r19)
    9ffc:	024000b4 	movhi	r9,2
    a000:	4a611204 	addi	r9,r9,-31672
    a004:	82405f26 	beq	r16,r9,a184 <_malloc_r+0x2b4>
    a008:	80c00117 	ldw	r3,4(r16)
    a00c:	00bfff04 	movi	r2,-4
    a010:	1884703a 	and	r2,r3,r2
    a014:	1447c83a 	sub	r3,r2,r17
    a018:	19000410 	cmplti	r4,r3,16
    a01c:	20010a26 	beq	r4,zero,a448 <_malloc_r+0x578>
    a020:	9a400515 	stw	r9,20(r19)
    a024:	9a400415 	stw	r9,16(r19)
    a028:	1800ff0e 	bge	r3,zero,a428 <_malloc_r+0x558>
    a02c:	10c08028 	cmpgeui	r3,r2,512
    a030:	1800c11e 	bne	r3,zero,a338 <_malloc_r+0x468>
    a034:	1006d0fa 	srli	r3,r2,3
    a038:	1008d17a 	srli	r4,r2,5
    a03c:	00800044 	movi	r2,1
    a040:	18c00044 	addi	r3,r3,1
    a044:	180690fa 	slli	r3,r3,3
    a048:	99400117 	ldw	r5,4(r19)
    a04c:	1104983a 	sll	r2,r2,r4
    a050:	98c7883a 	add	r3,r19,r3
    a054:	19000017 	ldw	r4,0(r3)
    a058:	1144b03a 	or	r2,r2,r5
    a05c:	197ffe04 	addi	r5,r3,-8
    a060:	81400315 	stw	r5,12(r16)
    a064:	81000215 	stw	r4,8(r16)
    a068:	98800115 	stw	r2,4(r19)
    a06c:	1c000015 	stw	r16,0(r3)
    a070:	24000315 	stw	r16,12(r4)
    a074:	3807d0ba 	srai	r3,r7,2
    a078:	01000044 	movi	r4,1
    a07c:	20c8983a 	sll	r4,r4,r3
    a080:	11004536 	bltu	r2,r4,a198 <_malloc_r+0x2c8>
    a084:	2086703a 	and	r3,r4,r2
    a088:	18000a1e 	bne	r3,zero,a0b4 <_malloc_r+0x1e4>
    a08c:	00ffff04 	movi	r3,-4
    a090:	2109883a 	add	r4,r4,r4
    a094:	38ce703a 	and	r7,r7,r3
    a098:	2086703a 	and	r3,r4,r2
    a09c:	39c00104 	addi	r7,r7,4
    a0a0:	1800041e 	bne	r3,zero,a0b4 <_malloc_r+0x1e4>
    a0a4:	2109883a 	add	r4,r4,r4
    a0a8:	2086703a 	and	r3,r4,r2
    a0ac:	39c00104 	addi	r7,r7,4
    a0b0:	183ffc26 	beq	r3,zero,a0a4 <_malloc_r+0x1d4>
    a0b4:	02bfff04 	movi	r10,-4
    a0b8:	381690fa 	slli	r11,r7,3
    a0bc:	3819883a 	mov	r12,r7
    a0c0:	9ad7883a 	add	r11,r19,r11
    a0c4:	5811883a 	mov	r8,r11
    a0c8:	40800317 	ldw	r2,12(r8)
    a0cc:	4080bc26 	beq	r8,r2,a3c0 <_malloc_r+0x4f0>
    a0d0:	10c00117 	ldw	r3,4(r2)
    a0d4:	1021883a 	mov	r16,r2
    a0d8:	10800317 	ldw	r2,12(r2)
    a0dc:	1a86703a 	and	r3,r3,r10
    a0e0:	1c4bc83a 	sub	r5,r3,r17
    a0e4:	29800410 	cmplti	r6,r5,16
    a0e8:	3000ba26 	beq	r6,zero,a3d4 <_malloc_r+0x504>
    a0ec:	283ff716 	blt	r5,zero,a0cc <_malloc_r+0x1fc>
    a0f0:	80c7883a 	add	r3,r16,r3
    a0f4:	19400117 	ldw	r5,4(r3)
    a0f8:	81800217 	ldw	r6,8(r16)
    a0fc:	9009883a 	mov	r4,r18
    a100:	29400054 	ori	r5,r5,1
    a104:	19400115 	stw	r5,4(r3)
    a108:	30800315 	stw	r2,12(r6)
    a10c:	11800215 	stw	r6,8(r2)
    a110:	0014eac0 	call	14eac <__malloc_unlock>
    a114:	80800204 	addi	r2,r16,8
    a118:	00000306 	br	a128 <_malloc_r+0x258>
    a11c:	00800304 	movi	r2,12
    a120:	90800015 	stw	r2,0(r18)
    a124:	0005883a 	mov	r2,zero
    a128:	dfc00917 	ldw	ra,36(sp)
    a12c:	df000817 	ldw	fp,32(sp)
    a130:	ddc00717 	ldw	r23,28(sp)
    a134:	dd800617 	ldw	r22,24(sp)
    a138:	dd400517 	ldw	r21,20(sp)
    a13c:	dd000417 	ldw	r20,16(sp)
    a140:	dcc00317 	ldw	r19,12(sp)
    a144:	dc800217 	ldw	r18,8(sp)
    a148:	dc400117 	ldw	r17,4(sp)
    a14c:	dc000017 	ldw	r16,0(sp)
    a150:	dec00a04 	addi	sp,sp,40
    a154:	f800283a 	ret
    a158:	01008004 	movi	r4,512
    a15c:	01c01004 	movi	r7,64
    a160:	02000fc4 	movi	r8,63
    a164:	003f9306 	br	9fb4 <_malloc_r+0xe4>
    a168:	14000317 	ldw	r16,12(r2)
    a16c:	39c00084 	addi	r7,r7,2
    a170:	143f721e 	bne	r2,r16,9f3c <_malloc_r+0x6c>
    a174:	9c000417 	ldw	r16,16(r19)
    a178:	024000b4 	movhi	r9,2
    a17c:	4a611204 	addi	r9,r9,-31672
    a180:	827fa11e 	bne	r16,r9,a008 <_malloc_r+0x138>
    a184:	3807d0ba 	srai	r3,r7,2
    a188:	01000044 	movi	r4,1
    a18c:	98800117 	ldw	r2,4(r19)
    a190:	20c8983a 	sll	r4,r4,r3
    a194:	113fbb2e 	bgeu	r2,r4,a084 <_malloc_r+0x1b4>
    a198:	9c000217 	ldw	r16,8(r19)
    a19c:	00bfff04 	movi	r2,-4
    a1a0:	85400117 	ldw	r21,4(r16)
    a1a4:	a8ac703a 	and	r22,r21,r2
    a1a8:	b4400336 	bltu	r22,r17,a1b8 <_malloc_r+0x2e8>
    a1ac:	b445c83a 	sub	r2,r22,r17
    a1b0:	10c00408 	cmpgei	r3,r2,16
    a1b4:	1800541e 	bne	r3,zero,a308 <_malloc_r+0x438>
    a1b8:	008000b4 	movhi	r2,2
    a1bc:	10a71f17 	ldw	r2,-25476(r2)
    a1c0:	00c000b4 	movhi	r3,2
    a1c4:	1d6e5117 	ldw	r21,-18108(r3)
    a1c8:	10bfffd8 	cmpnei	r2,r2,-1
    a1cc:	85b9883a 	add	fp,r16,r22
    a1d0:	8d6b883a 	add	r21,r17,r21
    a1d4:	1000d626 	beq	r2,zero,a530 <_malloc_r+0x660>
    a1d8:	ad4403c4 	addi	r21,r21,4111
    a1dc:	00bc0004 	movi	r2,-4096
    a1e0:	a8aa703a 	and	r21,r21,r2
    a1e4:	a80b883a 	mov	r5,r21
    a1e8:	9009883a 	mov	r4,r18
    a1ec:	000a8380 	call	a838 <_sbrk_r>
    a1f0:	102f883a 	mov	r23,r2
    a1f4:	10bfffd8 	cmpnei	r2,r2,-1
    a1f8:	1000a826 	beq	r2,zero,a49c <_malloc_r+0x5cc>
    a1fc:	bf00a636 	bltu	r23,fp,a498 <_malloc_r+0x5c8>
    a200:	008000b4 	movhi	r2,2
    a204:	152e5c17 	ldw	r20,-18064(r2)
    a208:	ad29883a 	add	r20,r21,r20
    a20c:	152e5c15 	stw	r20,-18064(r2)
    a210:	a007883a 	mov	r3,r20
    a214:	e5c0ec26 	beq	fp,r23,a5c8 <_malloc_r+0x6f8>
    a218:	008000b4 	movhi	r2,2
    a21c:	10a71f17 	ldw	r2,-25476(r2)
    a220:	10bfffd8 	cmpnei	r2,r2,-1
    a224:	1000ef26 	beq	r2,zero,a5e4 <_malloc_r+0x714>
    a228:	bf39c83a 	sub	fp,r23,fp
    a22c:	e0c7883a 	add	r3,fp,r3
    a230:	008000b4 	movhi	r2,2
    a234:	10ee5c15 	stw	r3,-18064(r2)
    a238:	bf0001cc 	andi	fp,r23,7
    a23c:	e000c526 	beq	fp,zero,a554 <_malloc_r+0x684>
    a240:	bf2fc83a 	sub	r23,r23,fp
    a244:	bdc00204 	addi	r23,r23,8
    a248:	05040204 	movi	r20,4104
    a24c:	a729c83a 	sub	r20,r20,fp
    a250:	bd6b883a 	add	r21,r23,r21
    a254:	a569c83a 	sub	r20,r20,r21
    a258:	a503ffcc 	andi	r20,r20,4095
    a25c:	a00b883a 	mov	r5,r20
    a260:	9009883a 	mov	r4,r18
    a264:	000a8380 	call	a838 <_sbrk_r>
    a268:	10ffffe0 	cmpeqi	r3,r2,-1
    a26c:	1800f31e 	bne	r3,zero,a63c <_malloc_r+0x76c>
    a270:	15c5c83a 	sub	r2,r2,r23
    a274:	152b883a 	add	r21,r2,r20
    a278:	008000b4 	movhi	r2,2
    a27c:	116e5c17 	ldw	r5,-18064(r2)
    a280:	9dc00215 	stw	r23,8(r19)
    a284:	ad400054 	ori	r21,r21,1
    a288:	a169883a 	add	r20,r20,r5
    a28c:	152e5c15 	stw	r20,-18064(r2)
    a290:	bd400115 	stw	r21,4(r23)
    a294:	84c0d626 	beq	r16,r19,a5f0 <_malloc_r+0x720>
    a298:	b0800428 	cmpgeui	r2,r22,16
    a29c:	1000d626 	beq	r2,zero,a5f8 <_malloc_r+0x728>
    a2a0:	80c00117 	ldw	r3,4(r16)
    a2a4:	013ffe04 	movi	r4,-8
    a2a8:	b0bffd04 	addi	r2,r22,-12
    a2ac:	1104703a 	and	r2,r2,r4
    a2b0:	18c0004c 	andi	r3,r3,1
    a2b4:	1886b03a 	or	r3,r3,r2
    a2b8:	80c00115 	stw	r3,4(r16)
    a2bc:	01000144 	movi	r4,5
    a2c0:	8087883a 	add	r3,r16,r2
    a2c4:	19000115 	stw	r4,4(r3)
    a2c8:	19000215 	stw	r4,8(r3)
    a2cc:	10800428 	cmpgeui	r2,r2,16
    a2d0:	1000df1e 	bne	r2,zero,a650 <_malloc_r+0x780>
    a2d4:	bd400117 	ldw	r21,4(r23)
    a2d8:	b821883a 	mov	r16,r23
    a2dc:	008000b4 	movhi	r2,2
    a2e0:	10ae5017 	ldw	r2,-18112(r2)
    a2e4:	1500022e 	bgeu	r2,r20,a2f0 <_malloc_r+0x420>
    a2e8:	008000b4 	movhi	r2,2
    a2ec:	152e5015 	stw	r20,-18112(r2)
    a2f0:	008000b4 	movhi	r2,2
    a2f4:	10ae4f17 	ldw	r2,-18116(r2)
    a2f8:	15006a2e 	bgeu	r2,r20,a4a4 <_malloc_r+0x5d4>
    a2fc:	008000b4 	movhi	r2,2
    a300:	152e4f15 	stw	r20,-18116(r2)
    a304:	00006706 	br	a4a4 <_malloc_r+0x5d4>
    a308:	88c00054 	ori	r3,r17,1
    a30c:	80c00115 	stw	r3,4(r16)
    a310:	8463883a 	add	r17,r16,r17
    a314:	10800054 	ori	r2,r2,1
    a318:	9c400215 	stw	r17,8(r19)
    a31c:	88800115 	stw	r2,4(r17)
    a320:	9009883a 	mov	r4,r18
    a324:	0014eac0 	call	14eac <__malloc_unlock>
    a328:	80800204 	addi	r2,r16,8
    a32c:	003f7e06 	br	a128 <_malloc_r+0x258>
    a330:	81000317 	ldw	r4,12(r16)
    a334:	003f0506 	br	9f4c <_malloc_r+0x7c>
    a338:	1006d27a 	srli	r3,r2,9
    a33c:	19000168 	cmpgeui	r4,r3,5
    a340:	20005026 	beq	r4,zero,a484 <_malloc_r+0x5b4>
    a344:	19000568 	cmpgeui	r4,r3,21
    a348:	20008c1e 	bne	r4,zero,a57c <_malloc_r+0x6ac>
    a34c:	19401704 	addi	r5,r3,92
    a350:	280a90fa 	slli	r5,r5,3
    a354:	190016c4 	addi	r4,r3,91
    a358:	994b883a 	add	r5,r19,r5
    a35c:	28c00017 	ldw	r3,0(r5)
    a360:	297ffe04 	addi	r5,r5,-8
    a364:	28c07426 	beq	r5,r3,a538 <_malloc_r+0x668>
    a368:	01bfff04 	movi	r6,-4
    a36c:	19000117 	ldw	r4,4(r3)
    a370:	2188703a 	and	r4,r4,r6
    a374:	1100022e 	bgeu	r2,r4,a380 <_malloc_r+0x4b0>
    a378:	18c00217 	ldw	r3,8(r3)
    a37c:	28fffb1e 	bne	r5,r3,a36c <_malloc_r+0x49c>
    a380:	19400317 	ldw	r5,12(r3)
    a384:	98800117 	ldw	r2,4(r19)
    a388:	81400315 	stw	r5,12(r16)
    a38c:	80c00215 	stw	r3,8(r16)
    a390:	2c000215 	stw	r16,8(r5)
    a394:	1c000315 	stw	r16,12(r3)
    a398:	003f3606 	br	a074 <_malloc_r+0x1a4>
    a39c:	10c00568 	cmpgeui	r3,r2,21
    a3a0:	18004a26 	beq	r3,zero,a4cc <_malloc_r+0x5fc>
    a3a4:	10c01568 	cmpgeui	r3,r2,85
    a3a8:	18007b1e 	bne	r3,zero,a598 <_malloc_r+0x6c8>
    a3ac:	8804d33a 	srli	r2,r17,12
    a3b0:	11c01bc4 	addi	r7,r2,111
    a3b4:	380890fa 	slli	r4,r7,3
    a3b8:	12001b84 	addi	r8,r2,110
    a3bc:	003efd06 	br	9fb4 <_malloc_r+0xe4>
    a3c0:	63000044 	addi	r12,r12,1
    a3c4:	608000cc 	andi	r2,r12,3
    a3c8:	42000204 	addi	r8,r8,8
    a3cc:	103f3e1e 	bne	r2,zero,a0c8 <_malloc_r+0x1f8>
    a3d0:	00004506 	br	a4e8 <_malloc_r+0x618>
    a3d4:	81000217 	ldw	r4,8(r16)
    a3d8:	89800054 	ori	r6,r17,1
    a3dc:	81800115 	stw	r6,4(r16)
    a3e0:	20800315 	stw	r2,12(r4)
    a3e4:	11000215 	stw	r4,8(r2)
    a3e8:	8463883a 	add	r17,r16,r17
    a3ec:	9c400515 	stw	r17,20(r19)
    a3f0:	9c400415 	stw	r17,16(r19)
    a3f4:	28800054 	ori	r2,r5,1
    a3f8:	88800115 	stw	r2,4(r17)
    a3fc:	8a400315 	stw	r9,12(r17)
    a400:	8a400215 	stw	r9,8(r17)
    a404:	80c7883a 	add	r3,r16,r3
    a408:	19400015 	stw	r5,0(r3)
    a40c:	9009883a 	mov	r4,r18
    a410:	0014eac0 	call	14eac <__malloc_unlock>
    a414:	80800204 	addi	r2,r16,8
    a418:	003f4306 	br	a128 <_malloc_r+0x258>
    a41c:	880ed0fa 	srli	r7,r17,3
    a420:	88800204 	addi	r2,r17,8
    a424:	003ebf06 	br	9f24 <_malloc_r+0x54>
    a428:	8085883a 	add	r2,r16,r2
    a42c:	10c00117 	ldw	r3,4(r2)
    a430:	9009883a 	mov	r4,r18
    a434:	18c00054 	ori	r3,r3,1
    a438:	10c00115 	stw	r3,4(r2)
    a43c:	0014eac0 	call	14eac <__malloc_unlock>
    a440:	80800204 	addi	r2,r16,8
    a444:	003f3806 	br	a128 <_malloc_r+0x258>
    a448:	89000054 	ori	r4,r17,1
    a44c:	81000115 	stw	r4,4(r16)
    a450:	8463883a 	add	r17,r16,r17
    a454:	9c400515 	stw	r17,20(r19)
    a458:	9c400415 	stw	r17,16(r19)
    a45c:	19000054 	ori	r4,r3,1
    a460:	89000115 	stw	r4,4(r17)
    a464:	8085883a 	add	r2,r16,r2
    a468:	8a400315 	stw	r9,12(r17)
    a46c:	8a400215 	stw	r9,8(r17)
    a470:	10c00015 	stw	r3,0(r2)
    a474:	9009883a 	mov	r4,r18
    a478:	0014eac0 	call	14eac <__malloc_unlock>
    a47c:	80800204 	addi	r2,r16,8
    a480:	003f2906 	br	a128 <_malloc_r+0x258>
    a484:	1006d1ba 	srli	r3,r2,6
    a488:	19400e44 	addi	r5,r3,57
    a48c:	280a90fa 	slli	r5,r5,3
    a490:	19000e04 	addi	r4,r3,56
    a494:	003fb006 	br	a358 <_malloc_r+0x488>
    a498:	84c04626 	beq	r16,r19,a5b4 <_malloc_r+0x6e4>
    a49c:	9c000217 	ldw	r16,8(r19)
    a4a0:	85400117 	ldw	r21,4(r16)
    a4a4:	00bfff04 	movi	r2,-4
    a4a8:	a8aa703a 	and	r21,r21,r2
    a4ac:	ac45c83a 	sub	r2,r21,r17
    a4b0:	ac400236 	bltu	r21,r17,a4bc <_malloc_r+0x5ec>
    a4b4:	10c00408 	cmpgei	r3,r2,16
    a4b8:	183f931e 	bne	r3,zero,a308 <_malloc_r+0x438>
    a4bc:	9009883a 	mov	r4,r18
    a4c0:	0014eac0 	call	14eac <__malloc_unlock>
    a4c4:	0005883a 	mov	r2,zero
    a4c8:	003f1706 	br	a128 <_malloc_r+0x258>
    a4cc:	11c01704 	addi	r7,r2,92
    a4d0:	380890fa 	slli	r4,r7,3
    a4d4:	120016c4 	addi	r8,r2,91
    a4d8:	003eb606 	br	9fb4 <_malloc_r+0xe4>
    a4dc:	58800217 	ldw	r2,8(r11)
    a4e0:	39ffffc4 	addi	r7,r7,-1
    a4e4:	12c0701e 	bne	r2,r11,a6a8 <_malloc_r+0x7d8>
    a4e8:	388000cc 	andi	r2,r7,3
    a4ec:	5afffe04 	addi	r11,r11,-8
    a4f0:	103ffa1e 	bne	r2,zero,a4dc <_malloc_r+0x60c>
    a4f4:	98c00117 	ldw	r3,4(r19)
    a4f8:	0104303a 	nor	r2,zero,r4
    a4fc:	10c4703a 	and	r2,r2,r3
    a500:	98800115 	stw	r2,4(r19)
    a504:	2109883a 	add	r4,r4,r4
    a508:	113f2336 	bltu	r2,r4,a198 <_malloc_r+0x2c8>
    a50c:	203f2226 	beq	r4,zero,a198 <_malloc_r+0x2c8>
    a510:	2086703a 	and	r3,r4,r2
    a514:	1800041e 	bne	r3,zero,a528 <_malloc_r+0x658>
    a518:	2109883a 	add	r4,r4,r4
    a51c:	2086703a 	and	r3,r4,r2
    a520:	63000104 	addi	r12,r12,4
    a524:	183ffc26 	beq	r3,zero,a518 <_malloc_r+0x648>
    a528:	600f883a 	mov	r7,r12
    a52c:	003ee206 	br	a0b8 <_malloc_r+0x1e8>
    a530:	ad400404 	addi	r21,r21,16
    a534:	003f2b06 	br	a1e4 <_malloc_r+0x314>
    a538:	2009d0ba 	srai	r4,r4,2
    a53c:	00800044 	movi	r2,1
    a540:	99800117 	ldw	r6,4(r19)
    a544:	1104983a 	sll	r2,r2,r4
    a548:	1184b03a 	or	r2,r2,r6
    a54c:	98800115 	stw	r2,4(r19)
    a550:	003f8d06 	br	a388 <_malloc_r+0x4b8>
    a554:	bd69883a 	add	r20,r23,r21
    a558:	0529c83a 	sub	r20,zero,r20
    a55c:	a503ffcc 	andi	r20,r20,4095
    a560:	a00b883a 	mov	r5,r20
    a564:	9009883a 	mov	r4,r18
    a568:	000a8380 	call	a838 <_sbrk_r>
    a56c:	10ffffe0 	cmpeqi	r3,r2,-1
    a570:	183f3f26 	beq	r3,zero,a270 <_malloc_r+0x3a0>
    a574:	0029883a 	mov	r20,zero
    a578:	003f3f06 	br	a278 <_malloc_r+0x3a8>
    a57c:	19001568 	cmpgeui	r4,r3,85
    a580:	2000201e 	bne	r4,zero,a604 <_malloc_r+0x734>
    a584:	1006d33a 	srli	r3,r2,12
    a588:	19401bc4 	addi	r5,r3,111
    a58c:	280a90fa 	slli	r5,r5,3
    a590:	19001b84 	addi	r4,r3,110
    a594:	003f7006 	br	a358 <_malloc_r+0x488>
    a598:	10c05568 	cmpgeui	r3,r2,341
    a59c:	1800201e 	bne	r3,zero,a620 <_malloc_r+0x750>
    a5a0:	8804d3fa 	srli	r2,r17,15
    a5a4:	11c01e04 	addi	r7,r2,120
    a5a8:	380890fa 	slli	r4,r7,3
    a5ac:	12001dc4 	addi	r8,r2,119
    a5b0:	003e8006 	br	9fb4 <_malloc_r+0xe4>
    a5b4:	008000b4 	movhi	r2,2
    a5b8:	10ee5c17 	ldw	r3,-18064(r2)
    a5bc:	a8c7883a 	add	r3,r21,r3
    a5c0:	10ee5c15 	stw	r3,-18064(r2)
    a5c4:	003f1406 	br	a218 <_malloc_r+0x348>
    a5c8:	e083ffcc 	andi	r2,fp,4095
    a5cc:	103f121e 	bne	r2,zero,a218 <_malloc_r+0x348>
    a5d0:	9c000217 	ldw	r16,8(r19)
    a5d4:	b56b883a 	add	r21,r22,r21
    a5d8:	ad400054 	ori	r21,r21,1
    a5dc:	85400115 	stw	r21,4(r16)
    a5e0:	003f3e06 	br	a2dc <_malloc_r+0x40c>
    a5e4:	008000b4 	movhi	r2,2
    a5e8:	15e71f15 	stw	r23,-25476(r2)
    a5ec:	003f1206 	br	a238 <_malloc_r+0x368>
    a5f0:	b821883a 	mov	r16,r23
    a5f4:	003f3906 	br	a2dc <_malloc_r+0x40c>
    a5f8:	00800044 	movi	r2,1
    a5fc:	b8800115 	stw	r2,4(r23)
    a600:	003fae06 	br	a4bc <_malloc_r+0x5ec>
    a604:	19005568 	cmpgeui	r4,r3,341
    a608:	2000191e 	bne	r4,zero,a670 <_malloc_r+0x7a0>
    a60c:	1006d3fa 	srli	r3,r2,15
    a610:	19401e04 	addi	r5,r3,120
    a614:	280a90fa 	slli	r5,r5,3
    a618:	19001dc4 	addi	r4,r3,119
    a61c:	003f4e06 	br	a358 <_malloc_r+0x488>
    a620:	10815568 	cmpgeui	r2,r2,1365
    a624:	1000191e 	bne	r2,zero,a68c <_malloc_r+0x7bc>
    a628:	8804d4ba 	srli	r2,r17,18
    a62c:	11c01f44 	addi	r7,r2,125
    a630:	380890fa 	slli	r4,r7,3
    a634:	12001f04 	addi	r8,r2,124
    a638:	003e5e06 	br	9fb4 <_malloc_r+0xe4>
    a63c:	e73ffe04 	addi	fp,fp,-8
    a640:	af2b883a 	add	r21,r21,fp
    a644:	adebc83a 	sub	r21,r21,r23
    a648:	0029883a 	mov	r20,zero
    a64c:	003f0a06 	br	a278 <_malloc_r+0x3a8>
    a650:	81400204 	addi	r5,r16,8
    a654:	9009883a 	mov	r4,r18
    a658:	000ec240 	call	ec24 <_free_r>
    a65c:	9c000217 	ldw	r16,8(r19)
    a660:	008000b4 	movhi	r2,2
    a664:	152e5c17 	ldw	r20,-18064(r2)
    a668:	85400117 	ldw	r21,4(r16)
    a66c:	003f1b06 	br	a2dc <_malloc_r+0x40c>
    a670:	18c15568 	cmpgeui	r3,r3,1365
    a674:	1800091e 	bne	r3,zero,a69c <_malloc_r+0x7cc>
    a678:	1006d4ba 	srli	r3,r2,18
    a67c:	19401f44 	addi	r5,r3,125
    a680:	280a90fa 	slli	r5,r5,3
    a684:	19001f04 	addi	r4,r3,124
    a688:	003f3306 	br	a358 <_malloc_r+0x488>
    a68c:	0100fe04 	movi	r4,1016
    a690:	01c01fc4 	movi	r7,127
    a694:	02001f84 	movi	r8,126
    a698:	003e4606 	br	9fb4 <_malloc_r+0xe4>
    a69c:	0140fe04 	movi	r5,1016
    a6a0:	01001f84 	movi	r4,126
    a6a4:	003f2c06 	br	a358 <_malloc_r+0x488>
    a6a8:	98800117 	ldw	r2,4(r19)
    a6ac:	003f9506 	br	a504 <_malloc_r+0x634>

0000a6b0 <memcpy>:
    a6b0:	30c00430 	cmpltui	r3,r6,16
    a6b4:	2005883a 	mov	r2,r4
    a6b8:	18002d1e 	bne	r3,zero,a770 <memcpy+0xc0>
    a6bc:	2906b03a 	or	r3,r5,r4
    a6c0:	18c000cc 	andi	r3,r3,3
    a6c4:	1800351e 	bne	r3,zero,a79c <memcpy+0xec>
    a6c8:	32fffc04 	addi	r11,r6,-16
    a6cc:	5816d13a 	srli	r11,r11,4
    a6d0:	280f883a 	mov	r7,r5
    a6d4:	2007883a 	mov	r3,r4
    a6d8:	5ac00044 	addi	r11,r11,1
    a6dc:	5816913a 	slli	r11,r11,4
    a6e0:	22d5883a 	add	r10,r4,r11
    a6e4:	39000117 	ldw	r4,4(r7)
    a6e8:	3a400017 	ldw	r9,0(r7)
    a6ec:	3a000217 	ldw	r8,8(r7)
    a6f0:	19000115 	stw	r4,4(r3)
    a6f4:	39000317 	ldw	r4,12(r7)
    a6f8:	1a400015 	stw	r9,0(r3)
    a6fc:	1a000215 	stw	r8,8(r3)
    a700:	19000315 	stw	r4,12(r3)
    a704:	18c00404 	addi	r3,r3,16
    a708:	39c00404 	addi	r7,r7,16
    a70c:	50fff51e 	bne	r10,r3,a6e4 <memcpy+0x34>
    a710:	3100030c 	andi	r4,r6,12
    a714:	2acb883a 	add	r5,r5,r11
    a718:	320003cc 	andi	r8,r6,15
    a71c:	20002226 	beq	r4,zero,a7a8 <memcpy+0xf8>
    a720:	280f883a 	mov	r7,r5
    a724:	1813883a 	mov	r9,r3
    a728:	39c00104 	addi	r7,r7,4
    a72c:	3abfff17 	ldw	r10,-4(r7)
    a730:	41c9c83a 	sub	r4,r8,r7
    a734:	2909883a 	add	r4,r5,r4
    a738:	4a800015 	stw	r10,0(r9)
    a73c:	21000128 	cmpgeui	r4,r4,4
    a740:	4a400104 	addi	r9,r9,4
    a744:	203ff81e 	bne	r4,zero,a728 <memcpy+0x78>
    a748:	413fff04 	addi	r4,r8,-4
    a74c:	2008d0ba 	srli	r4,r4,2
    a750:	318000cc 	andi	r6,r6,3
    a754:	31ffffc4 	addi	r7,r6,-1
    a758:	21000044 	addi	r4,r4,1
    a75c:	200890ba 	slli	r4,r4,2
    a760:	1907883a 	add	r3,r3,r4
    a764:	290b883a 	add	r5,r5,r4
    a768:	3000041e 	bne	r6,zero,a77c <memcpy+0xcc>
    a76c:	f800283a 	ret
    a770:	2007883a 	mov	r3,r4
    a774:	31ffffc4 	addi	r7,r6,-1
    a778:	303ffc26 	beq	r6,zero,a76c <memcpy+0xbc>
    a77c:	39c00044 	addi	r7,r7,1
    a780:	19cf883a 	add	r7,r3,r7
    a784:	29800003 	ldbu	r6,0(r5)
    a788:	18c00044 	addi	r3,r3,1
    a78c:	29400044 	addi	r5,r5,1
    a790:	19bfffc5 	stb	r6,-1(r3)
    a794:	38fffb1e 	bne	r7,r3,a784 <memcpy+0xd4>
    a798:	f800283a 	ret
    a79c:	31ffffc4 	addi	r7,r6,-1
    a7a0:	2007883a 	mov	r3,r4
    a7a4:	003ff506 	br	a77c <memcpy+0xcc>
    a7a8:	400d883a 	mov	r6,r8
    a7ac:	003ff106 	br	a774 <memcpy+0xc4>

0000a7b0 <_printf_r>:
    a7b0:	defffd04 	addi	sp,sp,-12
    a7b4:	2805883a 	mov	r2,r5
    a7b8:	dfc00015 	stw	ra,0(sp)
    a7bc:	d9800115 	stw	r6,4(sp)
    a7c0:	d9c00215 	stw	r7,8(sp)
    a7c4:	21400217 	ldw	r5,8(r4)
    a7c8:	d9c00104 	addi	r7,sp,4
    a7cc:	100d883a 	mov	r6,r2
    a7d0:	000a8900 	call	a890 <___vfprintf_internal_r>
    a7d4:	dfc00017 	ldw	ra,0(sp)
    a7d8:	dec00304 	addi	sp,sp,12
    a7dc:	f800283a 	ret

0000a7e0 <printf>:
    a7e0:	defffc04 	addi	sp,sp,-16
    a7e4:	dfc00015 	stw	ra,0(sp)
    a7e8:	d9400115 	stw	r5,4(sp)
    a7ec:	d9800215 	stw	r6,8(sp)
    a7f0:	d9c00315 	stw	r7,12(sp)
    a7f4:	008000b4 	movhi	r2,2
    a7f8:	10a71e17 	ldw	r2,-25480(r2)
    a7fc:	200b883a 	mov	r5,r4
    a800:	d9800104 	addi	r6,sp,4
    a804:	11000217 	ldw	r4,8(r2)
    a808:	000c8a80 	call	c8a8 <__vfprintf_internal>
    a80c:	dfc00017 	ldw	ra,0(sp)
    a810:	dec00404 	addi	sp,sp,16
    a814:	f800283a 	ret

0000a818 <_putchar_r>:
    a818:	21800217 	ldw	r6,8(r4)
    a81c:	00106781 	jmpi	10678 <_putc_r>

0000a820 <putchar>:
    a820:	008000b4 	movhi	r2,2
    a824:	10a71e17 	ldw	r2,-25480(r2)
    a828:	200b883a 	mov	r5,r4
    a82c:	11800217 	ldw	r6,8(r2)
    a830:	1009883a 	mov	r4,r2
    a834:	00106781 	jmpi	10678 <_putc_r>

0000a838 <_sbrk_r>:
    a838:	defffe04 	addi	sp,sp,-8
    a83c:	dc000015 	stw	r16,0(sp)
    a840:	008000b4 	movhi	r2,2
    a844:	2021883a 	mov	r16,r4
    a848:	2809883a 	mov	r4,r5
    a84c:	dfc00115 	stw	ra,4(sp)
    a850:	102e5215 	stw	zero,-18104(r2)
    a854:	00150840 	call	15084 <sbrk>
    a858:	10ffffd8 	cmpnei	r3,r2,-1
    a85c:	18000426 	beq	r3,zero,a870 <_sbrk_r+0x38>
    a860:	dfc00117 	ldw	ra,4(sp)
    a864:	dc000017 	ldw	r16,0(sp)
    a868:	dec00204 	addi	sp,sp,8
    a86c:	f800283a 	ret
    a870:	00c000b4 	movhi	r3,2
    a874:	18ee5217 	ldw	r3,-18104(r3)
    a878:	183ff926 	beq	r3,zero,a860 <_sbrk_r+0x28>
    a87c:	80c00015 	stw	r3,0(r16)
    a880:	dfc00117 	ldw	ra,4(sp)
    a884:	dc000017 	ldw	r16,0(sp)
    a888:	dec00204 	addi	sp,sp,8
    a88c:	f800283a 	ret

0000a890 <___vfprintf_internal_r>:
    a890:	deffbf04 	addi	sp,sp,-260
    a894:	dfc04015 	stw	ra,256(sp)
    a898:	dd803d15 	stw	r22,244(sp)
    a89c:	dcc03a15 	stw	r19,232(sp)
    a8a0:	dc803915 	stw	r18,228(sp)
    a8a4:	2027883a 	mov	r19,r4
    a8a8:	2825883a 	mov	r18,r5
    a8ac:	302d883a 	mov	r22,r6
    a8b0:	d9c00615 	stw	r7,24(sp)
    a8b4:	df003f15 	stw	fp,252(sp)
    a8b8:	ddc03e15 	stw	r23,248(sp)
    a8bc:	dd403c15 	stw	r21,240(sp)
    a8c0:	dd003b15 	stw	r20,236(sp)
    a8c4:	dc403815 	stw	r17,224(sp)
    a8c8:	dc003715 	stw	r16,220(sp)
    a8cc:	000f0680 	call	f068 <_localeconv_r>
    a8d0:	10800017 	ldw	r2,0(r2)
    a8d4:	1009883a 	mov	r4,r2
    a8d8:	d8800d15 	stw	r2,52(sp)
    a8dc:	00109640 	call	10964 <strlen>
    a8e0:	d8800b15 	stw	r2,44(sp)
    a8e4:	98000226 	beq	r19,zero,a8f0 <___vfprintf_internal_r+0x60>
    a8e8:	98800e17 	ldw	r2,56(r19)
    a8ec:	1001e026 	beq	r2,zero,b070 <___vfprintf_internal_r+0x7e0>
    a8f0:	9080030b 	ldhu	r2,12(r18)
    a8f4:	10c8000c 	andi	r3,r2,8192
    a8f8:	1800061e 	bne	r3,zero,a914 <___vfprintf_internal_r+0x84>
    a8fc:	90c01917 	ldw	r3,100(r18)
    a900:	0137ffc4 	movi	r4,-8193
    a904:	10880014 	ori	r2,r2,8192
    a908:	1906703a 	and	r3,r3,r4
    a90c:	9080030d 	sth	r2,12(r18)
    a910:	90c01915 	stw	r3,100(r18)
    a914:	10c0020c 	andi	r3,r2,8
    a918:	1800fc26 	beq	r3,zero,ad0c <___vfprintf_internal_r+0x47c>
    a91c:	90c00417 	ldw	r3,16(r18)
    a920:	1800fa26 	beq	r3,zero,ad0c <___vfprintf_internal_r+0x47c>
    a924:	1080068c 	andi	r2,r2,26
    a928:	10800298 	cmpnei	r2,r2,10
    a92c:	1000ff26 	beq	r2,zero,ad2c <___vfprintf_internal_r+0x49c>
    a930:	d8802704 	addi	r2,sp,156
    a934:	b02f883a 	mov	r23,r22
    a938:	d8801a15 	stw	r2,104(sp)
    a93c:	d8001c15 	stw	zero,112(sp)
    a940:	d8001b15 	stw	zero,108(sp)
    a944:	d8000815 	stw	zero,32(sp)
    a948:	d8000915 	stw	zero,36(sp)
    a94c:	d8000a15 	stw	zero,40(sp)
    a950:	d8000c15 	stw	zero,48(sp)
    a954:	d8001015 	stw	zero,64(sp)
    a958:	d8000515 	stw	zero,20(sp)
    a95c:	102d883a 	mov	r22,r2
    a960:	b8800007 	ldb	r2,0(r23)
    a964:	1000d726 	beq	r2,zero,acc4 <___vfprintf_internal_r+0x434>
    a968:	b821883a 	mov	r16,r23
    a96c:	00000306 	br	a97c <___vfprintf_internal_r+0xec>
    a970:	80800047 	ldb	r2,1(r16)
    a974:	84000044 	addi	r16,r16,1
    a978:	10012226 	beq	r2,zero,ae04 <___vfprintf_internal_r+0x574>
    a97c:	10800958 	cmpnei	r2,r2,37
    a980:	103ffb1e 	bne	r2,zero,a970 <___vfprintf_internal_r+0xe0>
    a984:	85e3c83a 	sub	r17,r16,r23
    a988:	85c1201e 	bne	r16,r23,ae0c <___vfprintf_internal_r+0x57c>
    a98c:	80800003 	ldbu	r2,0(r16)
    a990:	10803fcc 	andi	r2,r2,255
    a994:	1080201c 	xori	r2,r2,128
    a998:	10bfe004 	addi	r2,r2,-128
    a99c:	1000c926 	beq	r2,zero,acc4 <___vfprintf_internal_r+0x434>
    a9a0:	82c00047 	ldb	r11,1(r16)
    a9a4:	85c00044 	addi	r23,r16,1
    a9a8:	d8001345 	stb	zero,77(sp)
    a9ac:	0009883a 	mov	r4,zero
    a9b0:	000b883a 	mov	r5,zero
    a9b4:	023fffc4 	movi	r8,-1
    a9b8:	0021883a 	mov	r16,zero
    a9bc:	0019883a 	mov	r12,zero
    a9c0:	bdc00044 	addi	r23,r23,1
    a9c4:	5839883a 	mov	fp,r11
    a9c8:	e0bff804 	addi	r2,fp,-32
    a9cc:	10c01668 	cmpgeui	r3,r2,89
    a9d0:	18006c1e 	bne	r3,zero,ab84 <___vfprintf_internal_r+0x2f4>
    a9d4:	100490ba 	slli	r2,r2,2
    a9d8:	00c00074 	movhi	r3,1
    a9dc:	10c7883a 	add	r3,r2,r3
    a9e0:	18aa7a17 	ldw	r2,-22040(r3)
    a9e4:	1000683a 	jmp	r2
    a9e8:	0000b29c 	xori	zero,zero,714
    a9ec:	0000ab84 	movi	zero,686
    a9f0:	0000ab84 	movi	zero,686
    a9f4:	0000b290 	cmplti	zero,zero,714
    a9f8:	0000ab84 	movi	zero,686
    a9fc:	0000ab84 	movi	zero,686
    aa00:	0000ab84 	movi	zero,686
    aa04:	0000ab84 	movi	zero,686
    aa08:	0000ab84 	movi	zero,686
    aa0c:	0000ab84 	movi	zero,686
    aa10:	0000b114 	movui	zero,708
    aa14:	0000b280 	call	b28 <kf_bfly3+0x2bc>
    aa18:	0000ab84 	movi	zero,686
    aa1c:	0000b12c 	andhi	zero,zero,708
    aa20:	0000b138 	rdprs	zero,zero,708
    aa24:	0000ab84 	movi	zero,686
    aa28:	0000b274 	movhi	zero,713
    aa2c:	0000ab4c 	andi	zero,zero,685
    aa30:	0000ab4c 	andi	zero,zero,685
    aa34:	0000ab4c 	andi	zero,zero,685
    aa38:	0000ab4c 	andi	zero,zero,685
    aa3c:	0000ab4c 	andi	zero,zero,685
    aa40:	0000ab4c 	andi	zero,zero,685
    aa44:	0000ab4c 	andi	zero,zero,685
    aa48:	0000ab4c 	andi	zero,zero,685
    aa4c:	0000ab4c 	andi	zero,zero,685
    aa50:	0000ab84 	movi	zero,686
    aa54:	0000ab84 	movi	zero,686
    aa58:	0000ab84 	movi	zero,686
    aa5c:	0000ab84 	movi	zero,686
    aa60:	0000ab84 	movi	zero,686
    aa64:	0000ab84 	movi	zero,686
    aa68:	0000ab84 	movi	zero,686
    aa6c:	0000ab84 	movi	zero,686
    aa70:	0000ab84 	movi	zero,686
    aa74:	0000ab84 	movi	zero,686
    aa78:	0000b184 	movi	zero,710
    aa7c:	0000ae68 	cmpgeui	zero,zero,697
    aa80:	0000ab84 	movi	zero,686
    aa84:	0000ae68 	cmpgeui	zero,zero,697
    aa88:	0000ab84 	movi	zero,686
    aa8c:	0000ab84 	movi	zero,686
    aa90:	0000ab84 	movi	zero,686
    aa94:	0000ab84 	movi	zero,686
    aa98:	0000b41c 	xori	zero,zero,720
    aa9c:	0000ab84 	movi	zero,686
    aaa0:	0000ab84 	movi	zero,686
    aaa4:	0000ad9c 	xori	zero,zero,694
    aaa8:	0000ab84 	movi	zero,686
    aaac:	0000ab84 	movi	zero,686
    aab0:	0000ab84 	movi	zero,686
    aab4:	0000ab84 	movi	zero,686
    aab8:	0000ab84 	movi	zero,686
    aabc:	0000ad74 	movhi	zero,693
    aac0:	0000ab84 	movi	zero,686
    aac4:	0000ab84 	movi	zero,686
    aac8:	0000b45c 	xori	zero,zero,721
    aacc:	0000ab84 	movi	zero,686
    aad0:	0000ab84 	movi	zero,686
    aad4:	0000ab84 	movi	zero,686
    aad8:	0000ab84 	movi	zero,686
    aadc:	0000ab84 	movi	zero,686
    aae0:	0000ab84 	movi	zero,686
    aae4:	0000ab84 	movi	zero,686
    aae8:	0000ab84 	movi	zero,686
    aaec:	0000ab84 	movi	zero,686
    aaf0:	0000ab84 	movi	zero,686
    aaf4:	0000b434 	movhi	zero,720
    aaf8:	0000b07c 	xorhi	zero,zero,705
    aafc:	0000ae68 	cmpgeui	zero,zero,697
    ab00:	0000ae68 	cmpgeui	zero,zero,697
    ab04:	0000ae68 	cmpgeui	zero,zero,697
    ab08:	0000b428 	cmpgeui	zero,zero,720
    ab0c:	0000b07c 	xorhi	zero,zero,705
    ab10:	0000ab84 	movi	zero,686
    ab14:	0000ab84 	movi	zero,686
    ab18:	0000b2c8 	cmpgei	zero,zero,715
    ab1c:	0000ab84 	movi	zero,686
    ab20:	0000b3dc 	xori	zero,zero,719
    ab24:	0000ada0 	cmpeqi	zero,zero,694
    ab28:	0000b39c 	xori	zero,zero,718
    ab2c:	0000b390 	cmplti	zero,zero,718
    ab30:	0000ab84 	movi	zero,686
    ab34:	0000b338 	rdprs	zero,zero,716
    ab38:	0000ab84 	movi	zero,686
    ab3c:	0000ad78 	rdprs	zero,zero,693
    ab40:	0000ab84 	movi	zero,686
    ab44:	0000ab84 	movi	zero,686
    ab48:	0000b2f0 	cmpltui	zero,zero,715
    ab4c:	0021883a 	mov	r16,zero
    ab50:	e0fff404 	addi	r3,fp,-48
    ab54:	800490ba 	slli	r2,r16,2
    ab58:	bf000007 	ldb	fp,0(r23)
    ab5c:	bdc00044 	addi	r23,r23,1
    ab60:	1421883a 	add	r16,r2,r16
    ab64:	8421883a 	add	r16,r16,r16
    ab68:	1c21883a 	add	r16,r3,r16
    ab6c:	e0fff404 	addi	r3,fp,-48
    ab70:	188002b0 	cmpltui	r2,r3,10
    ab74:	103ff71e 	bne	r2,zero,ab54 <___vfprintf_internal_r+0x2c4>
    ab78:	e0bff804 	addi	r2,fp,-32
    ab7c:	10c01668 	cmpgeui	r3,r2,89
    ab80:	183f9426 	beq	r3,zero,a9d4 <___vfprintf_internal_r+0x144>
    ab84:	21003fcc 	andi	r4,r4,255
    ab88:	2006541e 	bne	r4,zero,c4dc <___vfprintf_internal_r+0x1c4c>
    ab8c:	e0004d26 	beq	fp,zero,acc4 <___vfprintf_internal_r+0x434>
    ab90:	df001d05 	stb	fp,116(sp)
    ab94:	d8001345 	stb	zero,77(sp)
    ab98:	05000044 	movi	r20,1
    ab9c:	05400044 	movi	r21,1
    aba0:	dc401d04 	addi	r17,sp,116
    aba4:	db000415 	stw	r12,16(sp)
    aba8:	0011883a 	mov	r8,zero
    abac:	d8000715 	stw	zero,28(sp)
    abb0:	d8800417 	ldw	r2,16(sp)
    abb4:	1380008c 	andi	r14,r2,2
    abb8:	70000126 	beq	r14,zero,abc0 <___vfprintf_internal_r+0x330>
    abbc:	a5000084 	addi	r20,r20,2
    abc0:	d8800417 	ldw	r2,16(sp)
    abc4:	d8c01c17 	ldw	r3,112(sp)
    abc8:	1340210c 	andi	r13,r2,132
    abcc:	6800021e 	bne	r13,zero,abd8 <___vfprintf_internal_r+0x348>
    abd0:	850fc83a 	sub	r7,r16,r20
    abd4:	01c36b16 	blt	zero,r7,b984 <___vfprintf_internal_r+0x10f4>
    abd8:	d8801347 	ldb	r2,77(sp)
    abdc:	10000c26 	beq	r2,zero,ac10 <___vfprintf_internal_r+0x380>
    abe0:	d8801b17 	ldw	r2,108(sp)
    abe4:	d9001344 	addi	r4,sp,77
    abe8:	18c00044 	addi	r3,r3,1
    abec:	10800044 	addi	r2,r2,1
    abf0:	b1000015 	stw	r4,0(r22)
    abf4:	01000044 	movi	r4,1
    abf8:	d8801b15 	stw	r2,108(sp)
    abfc:	b1000115 	stw	r4,4(r22)
    ac00:	d8c01c15 	stw	r3,112(sp)
    ac04:	10800208 	cmpgei	r2,r2,8
    ac08:	10039f1e 	bne	r2,zero,ba88 <___vfprintf_internal_r+0x11f8>
    ac0c:	b5800204 	addi	r22,r22,8
    ac10:	70000c26 	beq	r14,zero,ac44 <___vfprintf_internal_r+0x3b4>
    ac14:	d8801b17 	ldw	r2,108(sp)
    ac18:	d9001384 	addi	r4,sp,78
    ac1c:	18c00084 	addi	r3,r3,2
    ac20:	10800044 	addi	r2,r2,1
    ac24:	b1000015 	stw	r4,0(r22)
    ac28:	01000084 	movi	r4,2
    ac2c:	d8801b15 	stw	r2,108(sp)
    ac30:	b1000115 	stw	r4,4(r22)
    ac34:	d8c01c15 	stw	r3,112(sp)
    ac38:	10800208 	cmpgei	r2,r2,8
    ac3c:	1003a01e 	bne	r2,zero,bac0 <___vfprintf_internal_r+0x1230>
    ac40:	b5800204 	addi	r22,r22,8
    ac44:	6b402018 	cmpnei	r13,r13,128
    ac48:	68025c26 	beq	r13,zero,b5bc <___vfprintf_internal_r+0xd2c>
    ac4c:	4551c83a 	sub	r8,r8,r21
    ac50:	02029416 	blt	zero,r8,b6a4 <___vfprintf_internal_r+0xe14>
    ac54:	d8800417 	ldw	r2,16(sp)
    ac58:	1080400c 	andi	r2,r2,256
    ac5c:	1002111e 	bne	r2,zero,b4a4 <___vfprintf_internal_r+0xc14>
    ac60:	d8801b17 	ldw	r2,108(sp)
    ac64:	1d47883a 	add	r3,r3,r21
    ac68:	b4400015 	stw	r17,0(r22)
    ac6c:	10800044 	addi	r2,r2,1
    ac70:	b5400115 	stw	r21,4(r22)
    ac74:	d8801b15 	stw	r2,108(sp)
    ac78:	d8c01c15 	stw	r3,112(sp)
    ac7c:	10800208 	cmpgei	r2,r2,8
    ac80:	1002fd1e 	bne	r2,zero,b878 <___vfprintf_internal_r+0xfe8>
    ac84:	b5800204 	addi	r22,r22,8
    ac88:	d8800417 	ldw	r2,16(sp)
    ac8c:	1440010c 	andi	r17,r2,4
    ac90:	88000226 	beq	r17,zero,ac9c <___vfprintf_internal_r+0x40c>
    ac94:	8523c83a 	sub	r17,r16,r20
    ac98:	0440c616 	blt	zero,r17,afb4 <___vfprintf_internal_r+0x724>
    ac9c:	8500010e 	bge	r16,r20,aca4 <___vfprintf_internal_r+0x414>
    aca0:	a021883a 	mov	r16,r20
    aca4:	d8800517 	ldw	r2,20(sp)
    aca8:	1405883a 	add	r2,r2,r16
    acac:	d8800515 	stw	r2,20(sp)
    acb0:	1802c31e 	bne	r3,zero,b7c0 <___vfprintf_internal_r+0xf30>
    acb4:	b8800007 	ldb	r2,0(r23)
    acb8:	d8001b15 	stw	zero,108(sp)
    acbc:	dd802704 	addi	r22,sp,156
    acc0:	103f291e 	bne	r2,zero,a968 <___vfprintf_internal_r+0xd8>
    acc4:	d8801c17 	ldw	r2,112(sp)
    acc8:	1005ff1e 	bne	r2,zero,c4c8 <___vfprintf_internal_r+0x1c38>
    accc:	9080030b 	ldhu	r2,12(r18)
    acd0:	1080100c 	andi	r2,r2,64
    acd4:	1006ab1e 	bne	r2,zero,c784 <___vfprintf_internal_r+0x1ef4>
    acd8:	d8800517 	ldw	r2,20(sp)
    acdc:	dfc04017 	ldw	ra,256(sp)
    ace0:	df003f17 	ldw	fp,252(sp)
    ace4:	ddc03e17 	ldw	r23,248(sp)
    ace8:	dd803d17 	ldw	r22,244(sp)
    acec:	dd403c17 	ldw	r21,240(sp)
    acf0:	dd003b17 	ldw	r20,236(sp)
    acf4:	dcc03a17 	ldw	r19,232(sp)
    acf8:	dc803917 	ldw	r18,228(sp)
    acfc:	dc403817 	ldw	r17,224(sp)
    ad00:	dc003717 	ldw	r16,220(sp)
    ad04:	dec04104 	addi	sp,sp,260
    ad08:	f800283a 	ret
    ad0c:	900b883a 	mov	r5,r18
    ad10:	9809883a 	mov	r4,r19
    ad14:	000c9840 	call	c984 <__swsetup_r>
    ad18:	10069a1e 	bne	r2,zero,c784 <___vfprintf_internal_r+0x1ef4>
    ad1c:	9080030b 	ldhu	r2,12(r18)
    ad20:	1080068c 	andi	r2,r2,26
    ad24:	10800298 	cmpnei	r2,r2,10
    ad28:	103f011e 	bne	r2,zero,a930 <___vfprintf_internal_r+0xa0>
    ad2c:	9080038f 	ldh	r2,14(r18)
    ad30:	103eff16 	blt	r2,zero,a930 <___vfprintf_internal_r+0xa0>
    ad34:	d9c00617 	ldw	r7,24(sp)
    ad38:	b00d883a 	mov	r6,r22
    ad3c:	900b883a 	mov	r5,r18
    ad40:	9809883a 	mov	r4,r19
    ad44:	dfc04017 	ldw	ra,256(sp)
    ad48:	df003f17 	ldw	fp,252(sp)
    ad4c:	ddc03e17 	ldw	r23,248(sp)
    ad50:	dd803d17 	ldw	r22,244(sp)
    ad54:	dd403c17 	ldw	r21,240(sp)
    ad58:	dd003b17 	ldw	r20,236(sp)
    ad5c:	dcc03a17 	ldw	r19,232(sp)
    ad60:	dc803917 	ldw	r18,228(sp)
    ad64:	dc403817 	ldw	r17,224(sp)
    ad68:	dc003717 	ldw	r16,220(sp)
    ad6c:	dec04104 	addi	sp,sp,260
    ad70:	000c8c41 	jmpi	c8c4 <__sbprintf>
    ad74:	63000414 	ori	r12,r12,16
    ad78:	6080080c 	andi	r2,r12,32
    ad7c:	10008126 	beq	r2,zero,af84 <___vfprintf_internal_r+0x6f4>
    ad80:	d8c00617 	ldw	r3,24(sp)
    ad84:	00800044 	movi	r2,1
    ad88:	1d000017 	ldw	r20,0(r3)
    ad8c:	1d400117 	ldw	r21,4(r3)
    ad90:	18c00204 	addi	r3,r3,8
    ad94:	d8c00615 	stw	r3,24(sp)
    ad98:	00000906 	br	adc0 <___vfprintf_internal_r+0x530>
    ad9c:	63000414 	ori	r12,r12,16
    ada0:	6080080c 	andi	r2,r12,32
    ada4:	10006b26 	beq	r2,zero,af54 <___vfprintf_internal_r+0x6c4>
    ada8:	d8c00617 	ldw	r3,24(sp)
    adac:	0005883a 	mov	r2,zero
    adb0:	1d000017 	ldw	r20,0(r3)
    adb4:	1d400117 	ldw	r21,4(r3)
    adb8:	18c00204 	addi	r3,r3,8
    adbc:	d8c00615 	stw	r3,24(sp)
    adc0:	d8001345 	stb	zero,77(sp)
    adc4:	40ffffe0 	cmpeqi	r3,r8,-1
    adc8:	001b883a 	mov	r13,zero
    adcc:	18010a1e 	bne	r3,zero,b1f8 <___vfprintf_internal_r+0x968>
    add0:	047fdfc4 	movi	r17,-129
    add4:	6448703a 	and	r4,r12,r17
    add8:	a546b03a 	or	r3,r20,r21
    addc:	d9000415 	stw	r4,16(sp)
    ade0:	1802e61e 	bne	r3,zero,b97c <___vfprintf_internal_r+0x10ec>
    ade4:	4002601e 	bne	r8,zero,b768 <___vfprintf_internal_r+0xed8>
    ade8:	1003ae1e 	bne	r2,zero,bca4 <___vfprintf_internal_r+0x1414>
    adec:	6540004c 	andi	r21,r12,1
    adf0:	a803e426 	beq	r21,zero,bd84 <___vfprintf_internal_r+0x14f4>
    adf4:	00800c04 	movi	r2,48
    adf8:	d88026c5 	stb	r2,155(sp)
    adfc:	dc4026c4 	addi	r17,sp,155
    ae00:	0000ba06 	br	b0ec <___vfprintf_internal_r+0x85c>
    ae04:	85e3c83a 	sub	r17,r16,r23
    ae08:	85ffae26 	beq	r16,r23,acc4 <___vfprintf_internal_r+0x434>
    ae0c:	d8c01c17 	ldw	r3,112(sp)
    ae10:	d8801b17 	ldw	r2,108(sp)
    ae14:	b5c00015 	stw	r23,0(r22)
    ae18:	1c47883a 	add	r3,r3,r17
    ae1c:	10800044 	addi	r2,r2,1
    ae20:	d8801b15 	stw	r2,108(sp)
    ae24:	b4400115 	stw	r17,4(r22)
    ae28:	d8c01c15 	stw	r3,112(sp)
    ae2c:	10800208 	cmpgei	r2,r2,8
    ae30:	1000061e 	bne	r2,zero,ae4c <___vfprintf_internal_r+0x5bc>
    ae34:	b5800204 	addi	r22,r22,8
    ae38:	d8c00517 	ldw	r3,20(sp)
    ae3c:	80800003 	ldbu	r2,0(r16)
    ae40:	1c47883a 	add	r3,r3,r17
    ae44:	d8c00515 	stw	r3,20(sp)
    ae48:	003ed106 	br	a990 <___vfprintf_internal_r+0x100>
    ae4c:	d9801a04 	addi	r6,sp,104
    ae50:	900b883a 	mov	r5,r18
    ae54:	9809883a 	mov	r4,r19
    ae58:	0010af00 	call	10af0 <__sprint_r>
    ae5c:	103f9b1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    ae60:	dd802704 	addi	r22,sp,156
    ae64:	003ff406 	br	ae38 <___vfprintf_internal_r+0x5a8>
    ae68:	21003fcc 	andi	r4,r4,255
    ae6c:	2006291e 	bne	r4,zero,c714 <___vfprintf_internal_r+0x1e84>
    ae70:	d8c00617 	ldw	r3,24(sp)
    ae74:	6080020c 	andi	r2,r12,8
    ae78:	19000204 	addi	r4,r3,8
    ae7c:	d9000e15 	stw	r4,56(sp)
    ae80:	1003c21e 	bne	r2,zero,bd8c <___vfprintf_internal_r+0x14fc>
    ae84:	d8800617 	ldw	r2,24(sp)
    ae88:	10c00017 	ldw	r3,0(r2)
    ae8c:	10800117 	ldw	r2,4(r2)
    ae90:	d8c00915 	stw	r3,36(sp)
    ae94:	d8800a15 	stw	r2,40(sp)
    ae98:	dd400a17 	ldw	r21,40(sp)
    ae9c:	dd000917 	ldw	r20,36(sp)
    aea0:	00a00034 	movhi	r2,32768
    aea4:	10bfffc4 	addi	r2,r2,-1
    aea8:	a8a2703a 	and	r17,r21,r2
    aeac:	01dffc34 	movhi	r7,32752
    aeb0:	01bfffc4 	movi	r6,-1
    aeb4:	39ffffc4 	addi	r7,r7,-1
    aeb8:	a009883a 	mov	r4,r20
    aebc:	880b883a 	mov	r5,r17
    aec0:	da000615 	stw	r8,24(sp)
    aec4:	db000415 	stw	r12,16(sp)
    aec8:	00099c80 	call	99c8 <__unorddf2>
    aecc:	db000417 	ldw	r12,16(sp)
    aed0:	da000617 	ldw	r8,24(sp)
    aed4:	10044d1e 	bne	r2,zero,c00c <___vfprintf_internal_r+0x177c>
    aed8:	01dffc34 	movhi	r7,32752
    aedc:	01bfffc4 	movi	r6,-1
    aee0:	39ffffc4 	addi	r7,r7,-1
    aee4:	a009883a 	mov	r4,r20
    aee8:	880b883a 	mov	r5,r17
    aeec:	00088280 	call	8828 <__ledf2>
    aef0:	db000417 	ldw	r12,16(sp)
    aef4:	da000617 	ldw	r8,24(sp)
    aef8:	0084440e 	bge	zero,r2,c00c <___vfprintf_internal_r+0x177c>
    aefc:	000d883a 	mov	r6,zero
    af00:	000f883a 	mov	r7,zero
    af04:	a009883a 	mov	r4,r20
    af08:	a80b883a 	mov	r5,r21
    af0c:	00088280 	call	8828 <__ledf2>
    af10:	db000417 	ldw	r12,16(sp)
    af14:	10055916 	blt	r2,zero,c47c <___vfprintf_internal_r+0x1bec>
    af18:	db401343 	ldbu	r13,77(sp)
    af1c:	e0801210 	cmplti	r2,fp,72
    af20:	1005471e 	bne	r2,zero,c440 <___vfprintf_internal_r+0x1bb0>
    af24:	04400074 	movhi	r17,1
    af28:	8c5ea004 	addi	r17,r17,31360
    af2c:	00bfdfc4 	movi	r2,-129
    af30:	6084703a 	and	r2,r12,r2
    af34:	d8800415 	stw	r2,16(sp)
    af38:	d8800e17 	ldw	r2,56(sp)
    af3c:	050000c4 	movi	r20,3
    af40:	054000c4 	movi	r21,3
    af44:	d8800615 	stw	r2,24(sp)
    af48:	0011883a 	mov	r8,zero
    af4c:	d8000715 	stw	zero,28(sp)
    af50:	00006a06 	br	b0fc <___vfprintf_internal_r+0x86c>
    af54:	d8c00617 	ldw	r3,24(sp)
    af58:	6080040c 	andi	r2,r12,16
    af5c:	1d000017 	ldw	r20,0(r3)
    af60:	18c00104 	addi	r3,r3,4
    af64:	d8c00615 	stw	r3,24(sp)
    af68:	1000031e 	bne	r2,zero,af78 <___vfprintf_internal_r+0x6e8>
    af6c:	6080100c 	andi	r2,r12,64
    af70:	10000126 	beq	r2,zero,af78 <___vfprintf_internal_r+0x6e8>
    af74:	a53fffcc 	andi	r20,r20,65535
    af78:	002b883a 	mov	r21,zero
    af7c:	0005883a 	mov	r2,zero
    af80:	003f8f06 	br	adc0 <___vfprintf_internal_r+0x530>
    af84:	d8c00617 	ldw	r3,24(sp)
    af88:	6080040c 	andi	r2,r12,16
    af8c:	1d000017 	ldw	r20,0(r3)
    af90:	18c00104 	addi	r3,r3,4
    af94:	d8c00615 	stw	r3,24(sp)
    af98:	1000031e 	bne	r2,zero,afa8 <___vfprintf_internal_r+0x718>
    af9c:	6080100c 	andi	r2,r12,64
    afa0:	10000126 	beq	r2,zero,afa8 <___vfprintf_internal_r+0x718>
    afa4:	a53fffcc 	andi	r20,r20,65535
    afa8:	002b883a 	mov	r21,zero
    afac:	00800044 	movi	r2,1
    afb0:	003f8306 	br	adc0 <___vfprintf_internal_r+0x530>
    afb4:	03000074 	movhi	r12,1
    afb8:	89000450 	cmplti	r4,r17,17
    afbc:	d8801b17 	ldw	r2,108(sp)
    afc0:	631eb404 	addi	r12,r12,31440
    afc4:	20001b1e 	bne	r4,zero,b034 <___vfprintf_internal_r+0x7a4>
    afc8:	05400404 	movi	r21,16
    afcc:	6039883a 	mov	fp,r12
    afd0:	00000406 	br	afe4 <___vfprintf_internal_r+0x754>
    afd4:	8c7ffc04 	addi	r17,r17,-16
    afd8:	89000448 	cmpgei	r4,r17,17
    afdc:	b5800204 	addi	r22,r22,8
    afe0:	20001326 	beq	r4,zero,b030 <___vfprintf_internal_r+0x7a0>
    afe4:	10800044 	addi	r2,r2,1
    afe8:	18c00404 	addi	r3,r3,16
    afec:	b7000015 	stw	fp,0(r22)
    aff0:	b5400115 	stw	r21,4(r22)
    aff4:	d8c01c15 	stw	r3,112(sp)
    aff8:	d8801b15 	stw	r2,108(sp)
    affc:	11000208 	cmpgei	r4,r2,8
    b000:	203ff426 	beq	r4,zero,afd4 <___vfprintf_internal_r+0x744>
    b004:	d9801a04 	addi	r6,sp,104
    b008:	900b883a 	mov	r5,r18
    b00c:	9809883a 	mov	r4,r19
    b010:	0010af00 	call	10af0 <__sprint_r>
    b014:	103f2d1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    b018:	8c7ffc04 	addi	r17,r17,-16
    b01c:	89000448 	cmpgei	r4,r17,17
    b020:	d8c01c17 	ldw	r3,112(sp)
    b024:	d8801b17 	ldw	r2,108(sp)
    b028:	dd802704 	addi	r22,sp,156
    b02c:	203fed1e 	bne	r4,zero,afe4 <___vfprintf_internal_r+0x754>
    b030:	e019883a 	mov	r12,fp
    b034:	10800044 	addi	r2,r2,1
    b038:	1c47883a 	add	r3,r3,r17
    b03c:	d8801b15 	stw	r2,108(sp)
    b040:	b3000015 	stw	r12,0(r22)
    b044:	b4400115 	stw	r17,4(r22)
    b048:	d8c01c15 	stw	r3,112(sp)
    b04c:	10800210 	cmplti	r2,r2,8
    b050:	103f121e 	bne	r2,zero,ac9c <___vfprintf_internal_r+0x40c>
    b054:	d9801a04 	addi	r6,sp,104
    b058:	900b883a 	mov	r5,r18
    b05c:	9809883a 	mov	r4,r19
    b060:	0010af00 	call	10af0 <__sprint_r>
    b064:	103f191e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    b068:	d8c01c17 	ldw	r3,112(sp)
    b06c:	003f0b06 	br	ac9c <___vfprintf_internal_r+0x40c>
    b070:	9809883a 	mov	r4,r19
    b074:	000eac00 	call	eac0 <__sinit>
    b078:	003e1d06 	br	a8f0 <___vfprintf_internal_r+0x60>
    b07c:	21003fcc 	andi	r4,r4,255
    b080:	2005a61e 	bne	r4,zero,c71c <___vfprintf_internal_r+0x1e8c>
    b084:	6080080c 	andi	r2,r12,32
    b088:	10004326 	beq	r2,zero,b198 <___vfprintf_internal_r+0x908>
    b08c:	d8c00617 	ldw	r3,24(sp)
    b090:	18800117 	ldw	r2,4(r3)
    b094:	1d000017 	ldw	r20,0(r3)
    b098:	18c00204 	addi	r3,r3,8
    b09c:	d8c00615 	stw	r3,24(sp)
    b0a0:	102b883a 	mov	r21,r2
    b0a4:	10004a16 	blt	r2,zero,b1d0 <___vfprintf_internal_r+0x940>
    b0a8:	40bfffd8 	cmpnei	r2,r8,-1
    b0ac:	db401343 	ldbu	r13,77(sp)
    b0b0:	10000626 	beq	r2,zero,b0cc <___vfprintf_internal_r+0x83c>
    b0b4:	047fdfc4 	movi	r17,-129
    b0b8:	6446703a 	and	r3,r12,r17
    b0bc:	a544b03a 	or	r2,r20,r21
    b0c0:	d8c00415 	stw	r3,16(sp)
    b0c4:	1002f626 	beq	r2,zero,bca0 <___vfprintf_internal_r+0x1410>
    b0c8:	db000417 	ldw	r12,16(sp)
    b0cc:	a8037f1e 	bne	r21,zero,becc <___vfprintf_internal_r+0x163c>
    b0d0:	a08002a8 	cmpgeui	r2,r20,10
    b0d4:	10037d1e 	bne	r2,zero,becc <___vfprintf_internal_r+0x163c>
    b0d8:	a5000c04 	addi	r20,r20,48
    b0dc:	dd0026c5 	stb	r20,155(sp)
    b0e0:	db000415 	stw	r12,16(sp)
    b0e4:	05400044 	movi	r21,1
    b0e8:	dc4026c4 	addi	r17,sp,155
    b0ec:	4029883a 	mov	r20,r8
    b0f0:	4540010e 	bge	r8,r21,b0f8 <___vfprintf_internal_r+0x868>
    b0f4:	a829883a 	mov	r20,r21
    b0f8:	d8000715 	stw	zero,28(sp)
    b0fc:	6b403fcc 	andi	r13,r13,255
    b100:	6b40201c 	xori	r13,r13,128
    b104:	6b7fe004 	addi	r13,r13,-128
    b108:	683ea926 	beq	r13,zero,abb0 <___vfprintf_internal_r+0x320>
    b10c:	a5000044 	addi	r20,r20,1
    b110:	003ea706 	br	abb0 <___vfprintf_internal_r+0x320>
    b114:	d8800617 	ldw	r2,24(sp)
    b118:	14000017 	ldw	r16,0(r2)
    b11c:	10800104 	addi	r2,r2,4
    b120:	8003150e 	bge	r16,zero,bd78 <___vfprintf_internal_r+0x14e8>
    b124:	0421c83a 	sub	r16,zero,r16
    b128:	d8800615 	stw	r2,24(sp)
    b12c:	bac00007 	ldb	r11,0(r23)
    b130:	63000114 	ori	r12,r12,4
    b134:	003e2206 	br	a9c0 <___vfprintf_internal_r+0x130>
    b138:	bf000007 	ldb	fp,0(r23)
    b13c:	b8800044 	addi	r2,r23,1
    b140:	e0c00aa0 	cmpeqi	r3,fp,42
    b144:	1805c91e 	bne	r3,zero,c86c <___vfprintf_internal_r+0x1fdc>
    b148:	e0fff404 	addi	r3,fp,-48
    b14c:	198002b0 	cmpltui	r6,r3,10
    b150:	102f883a 	mov	r23,r2
    b154:	0011883a 	mov	r8,zero
    b158:	303e1b26 	beq	r6,zero,a9c8 <___vfprintf_internal_r+0x138>
    b15c:	400490ba 	slli	r2,r8,2
    b160:	bf000007 	ldb	fp,0(r23)
    b164:	bdc00044 	addi	r23,r23,1
    b168:	1211883a 	add	r8,r2,r8
    b16c:	4211883a 	add	r8,r8,r8
    b170:	40d1883a 	add	r8,r8,r3
    b174:	e0fff404 	addi	r3,fp,-48
    b178:	188002b0 	cmpltui	r2,r3,10
    b17c:	103ff71e 	bne	r2,zero,b15c <___vfprintf_internal_r+0x8cc>
    b180:	003e1106 	br	a9c8 <___vfprintf_internal_r+0x138>
    b184:	21003fcc 	andi	r4,r4,255
    b188:	20055e1e 	bne	r4,zero,c704 <___vfprintf_internal_r+0x1e74>
    b18c:	63000414 	ori	r12,r12,16
    b190:	6080080c 	andi	r2,r12,32
    b194:	103fbd1e 	bne	r2,zero,b08c <___vfprintf_internal_r+0x7fc>
    b198:	d8c00617 	ldw	r3,24(sp)
    b19c:	6080040c 	andi	r2,r12,16
    b1a0:	1d000017 	ldw	r20,0(r3)
    b1a4:	18c00104 	addi	r3,r3,4
    b1a8:	d8c00615 	stw	r3,24(sp)
    b1ac:	1002e91e 	bne	r2,zero,bd54 <___vfprintf_internal_r+0x14c4>
    b1b0:	6080100c 	andi	r2,r12,64
    b1b4:	1002e726 	beq	r2,zero,bd54 <___vfprintf_internal_r+0x14c4>
    b1b8:	a53fffcc 	andi	r20,r20,65535
    b1bc:	a520001c 	xori	r20,r20,32768
    b1c0:	a5200004 	addi	r20,r20,-32768
    b1c4:	a02bd7fa 	srai	r21,r20,31
    b1c8:	a805883a 	mov	r2,r21
    b1cc:	103fb60e 	bge	r2,zero,b0a8 <___vfprintf_internal_r+0x818>
    b1d0:	a004c03a 	cmpne	r2,r20,zero
    b1d4:	056bc83a 	sub	r21,zero,r21
    b1d8:	a8abc83a 	sub	r21,r21,r2
    b1dc:	00800b44 	movi	r2,45
    b1e0:	d8801345 	stb	r2,77(sp)
    b1e4:	40ffffe0 	cmpeqi	r3,r8,-1
    b1e8:	0529c83a 	sub	r20,zero,r20
    b1ec:	03400b44 	movi	r13,45
    b1f0:	00800044 	movi	r2,1
    b1f4:	183ef626 	beq	r3,zero,add0 <___vfprintf_internal_r+0x540>
    b1f8:	10c00060 	cmpeqi	r3,r2,1
    b1fc:	183fb31e 	bne	r3,zero,b0cc <___vfprintf_internal_r+0x83c>
    b200:	108000a0 	cmpeqi	r2,r2,2
    b204:	10015d1e 	bne	r2,zero,b77c <___vfprintf_internal_r+0xeec>
    b208:	dc402704 	addi	r17,sp,156
    b20c:	a006d0fa 	srli	r3,r20,3
    b210:	a808977a 	slli	r4,r21,29
    b214:	a82ad0fa 	srli	r21,r21,3
    b218:	a50001cc 	andi	r20,r20,7
    b21c:	a0800c04 	addi	r2,r20,48
    b220:	20e8b03a 	or	r20,r4,r3
    b224:	88bfffc5 	stb	r2,-1(r17)
    b228:	a546b03a 	or	r3,r20,r21
    b22c:	880b883a 	mov	r5,r17
    b230:	8c7fffc4 	addi	r17,r17,-1
    b234:	183ff51e 	bne	r3,zero,b20c <___vfprintf_internal_r+0x97c>
    b238:	60c0004c 	andi	r3,r12,1
    b23c:	18015c26 	beq	r3,zero,b7b0 <___vfprintf_internal_r+0xf20>
    b240:	10803fcc 	andi	r2,r2,255
    b244:	1080201c 	xori	r2,r2,128
    b248:	10bfe004 	addi	r2,r2,-128
    b24c:	10800c18 	cmpnei	r2,r2,48
    b250:	10015726 	beq	r2,zero,b7b0 <___vfprintf_internal_r+0xf20>
    b254:	00800c04 	movi	r2,48
    b258:	297fff84 	addi	r5,r5,-2
    b25c:	88bfffc5 	stb	r2,-1(r17)
    b260:	d8802704 	addi	r2,sp,156
    b264:	116bc83a 	sub	r21,r2,r5
    b268:	db000415 	stw	r12,16(sp)
    b26c:	2823883a 	mov	r17,r5
    b270:	003f9e06 	br	b0ec <___vfprintf_internal_r+0x85c>
    b274:	bac00007 	ldb	r11,0(r23)
    b278:	63002014 	ori	r12,r12,128
    b27c:	003dd006 	br	a9c0 <___vfprintf_internal_r+0x130>
    b280:	bac00007 	ldb	r11,0(r23)
    b284:	01000044 	movi	r4,1
    b288:	01400ac4 	movi	r5,43
    b28c:	003dcc06 	br	a9c0 <___vfprintf_internal_r+0x130>
    b290:	bac00007 	ldb	r11,0(r23)
    b294:	63000054 	ori	r12,r12,1
    b298:	003dc906 	br	a9c0 <___vfprintf_internal_r+0x130>
    b29c:	28803fcc 	andi	r2,r5,255
    b2a0:	1080201c 	xori	r2,r2,128
    b2a4:	10bfe004 	addi	r2,r2,-128
    b2a8:	bf000003 	ldbu	fp,0(r23)
    b2ac:	10000c1e 	bne	r2,zero,b2e0 <___vfprintf_internal_r+0xa50>
    b2b0:	e2c03fcc 	andi	r11,fp,255
    b2b4:	5ac0201c 	xori	r11,r11,128
    b2b8:	01000044 	movi	r4,1
    b2bc:	01400804 	movi	r5,32
    b2c0:	5affe004 	addi	r11,r11,-128
    b2c4:	003dbe06 	br	a9c0 <___vfprintf_internal_r+0x130>
    b2c8:	bac00007 	ldb	r11,0(r23)
    b2cc:	58801b18 	cmpnei	r2,r11,108
    b2d0:	1002a71e 	bne	r2,zero,bd70 <___vfprintf_internal_r+0x14e0>
    b2d4:	bf000043 	ldbu	fp,1(r23)
    b2d8:	63000814 	ori	r12,r12,32
    b2dc:	bdc00044 	addi	r23,r23,1
    b2e0:	e2c03fcc 	andi	r11,fp,255
    b2e4:	5ac0201c 	xori	r11,r11,128
    b2e8:	5affe004 	addi	r11,r11,-128
    b2ec:	003db406 	br	a9c0 <___vfprintf_internal_r+0x130>
    b2f0:	21003fcc 	andi	r4,r4,255
    b2f4:	20050b1e 	bne	r4,zero,c724 <___vfprintf_internal_r+0x1e94>
    b2f8:	00800074 	movhi	r2,1
    b2fc:	109ea304 	addi	r2,r2,31372
    b300:	d8800c15 	stw	r2,48(sp)
    b304:	6080080c 	andi	r2,r12,32
    b308:	10005b26 	beq	r2,zero,b478 <___vfprintf_internal_r+0xbe8>
    b30c:	d8800617 	ldw	r2,24(sp)
    b310:	15000017 	ldw	r20,0(r2)
    b314:	15400117 	ldw	r21,4(r2)
    b318:	10800204 	addi	r2,r2,8
    b31c:	d8800615 	stw	r2,24(sp)
    b320:	6080004c 	andi	r2,r12,1
    b324:	10000226 	beq	r2,zero,b330 <___vfprintf_internal_r+0xaa0>
    b328:	a544b03a 	or	r2,r20,r21
    b32c:	10029c1e 	bne	r2,zero,bda0 <___vfprintf_internal_r+0x1510>
    b330:	00800084 	movi	r2,2
    b334:	003ea206 	br	adc0 <___vfprintf_internal_r+0x530>
    b338:	d8800617 	ldw	r2,24(sp)
    b33c:	d8001345 	stb	zero,77(sp)
    b340:	14400017 	ldw	r17,0(r2)
    b344:	10c00104 	addi	r3,r2,4
    b348:	8802ba26 	beq	r17,zero,be34 <___vfprintf_internal_r+0x15a4>
    b34c:	40bfffe0 	cmpeqi	r2,r8,-1
    b350:	1003c61e 	bne	r2,zero,c26c <___vfprintf_internal_r+0x19dc>
    b354:	400d883a 	mov	r6,r8
    b358:	000b883a 	mov	r5,zero
    b35c:	8809883a 	mov	r4,r17
    b360:	d8c00715 	stw	r3,28(sp)
    b364:	db000615 	stw	r12,24(sp)
    b368:	da000415 	stw	r8,16(sp)
    b36c:	000f2c80 	call	f2c8 <memchr>
    b370:	da000417 	ldw	r8,16(sp)
    b374:	db000617 	ldw	r12,24(sp)
    b378:	d8c00717 	ldw	r3,28(sp)
    b37c:	1004d126 	beq	r2,zero,c6c4 <___vfprintf_internal_r+0x1e34>
    b380:	146bc83a 	sub	r21,r2,r17
    b384:	a829883a 	mov	r20,r21
    b388:	d8c00615 	stw	r3,24(sp)
    b38c:	003e0506 	br	aba4 <___vfprintf_internal_r+0x314>
    b390:	bac00007 	ldb	r11,0(r23)
    b394:	63000814 	ori	r12,r12,32
    b398:	003d8906 	br	a9c0 <___vfprintf_internal_r+0x130>
    b39c:	d8c00617 	ldw	r3,24(sp)
    b3a0:	00800c04 	movi	r2,48
    b3a4:	d8801385 	stb	r2,78(sp)
    b3a8:	00801e04 	movi	r2,120
    b3ac:	01000074 	movhi	r4,1
    b3b0:	d88013c5 	stb	r2,79(sp)
    b3b4:	18800104 	addi	r2,r3,4
    b3b8:	d8800615 	stw	r2,24(sp)
    b3bc:	209ea304 	addi	r2,r4,31372
    b3c0:	d8800c15 	stw	r2,48(sp)
    b3c4:	1d000017 	ldw	r20,0(r3)
    b3c8:	002b883a 	mov	r21,zero
    b3cc:	63000094 	ori	r12,r12,2
    b3d0:	00800084 	movi	r2,2
    b3d4:	07001e04 	movi	fp,120
    b3d8:	003e7906 	br	adc0 <___vfprintf_internal_r+0x530>
    b3dc:	21003fcc 	andi	r4,r4,255
    b3e0:	2004ca1e 	bne	r4,zero,c70c <___vfprintf_internal_r+0x1e7c>
    b3e4:	d9000617 	ldw	r4,24(sp)
    b3e8:	6080080c 	andi	r2,r12,32
    b3ec:	20c00104 	addi	r3,r4,4
    b3f0:	1002711e 	bne	r2,zero,bdb8 <___vfprintf_internal_r+0x1528>
    b3f4:	6080040c 	andi	r2,r12,16
    b3f8:	1002dc1e 	bne	r2,zero,bf6c <___vfprintf_internal_r+0x16dc>
    b3fc:	6300100c 	andi	r12,r12,64
    b400:	6002da26 	beq	r12,zero,bf6c <___vfprintf_internal_r+0x16dc>
    b404:	d8800617 	ldw	r2,24(sp)
    b408:	d8c00615 	stw	r3,24(sp)
    b40c:	d8c00517 	ldw	r3,20(sp)
    b410:	10800017 	ldw	r2,0(r2)
    b414:	10c0000d 	sth	r3,0(r2)
    b418:	003d5106 	br	a960 <___vfprintf_internal_r+0xd0>
    b41c:	bac00007 	ldb	r11,0(r23)
    b420:	63000214 	ori	r12,r12,8
    b424:	003d6606 	br	a9c0 <___vfprintf_internal_r+0x130>
    b428:	bac00007 	ldb	r11,0(r23)
    b42c:	63001014 	ori	r12,r12,64
    b430:	003d6306 	br	a9c0 <___vfprintf_internal_r+0x130>
    b434:	d8c00617 	ldw	r3,24(sp)
    b438:	d8001345 	stb	zero,77(sp)
    b43c:	05000044 	movi	r20,1
    b440:	18800017 	ldw	r2,0(r3)
    b444:	18c00104 	addi	r3,r3,4
    b448:	d8c00615 	stw	r3,24(sp)
    b44c:	d8801d05 	stb	r2,116(sp)
    b450:	05400044 	movi	r21,1
    b454:	dc401d04 	addi	r17,sp,116
    b458:	003dd206 	br	aba4 <___vfprintf_internal_r+0x314>
    b45c:	21003fcc 	andi	r4,r4,255
    b460:	2004b21e 	bne	r4,zero,c72c <___vfprintf_internal_r+0x1e9c>
    b464:	00800074 	movhi	r2,1
    b468:	109ea804 	addi	r2,r2,31392
    b46c:	d8800c15 	stw	r2,48(sp)
    b470:	6080080c 	andi	r2,r12,32
    b474:	103fa51e 	bne	r2,zero,b30c <___vfprintf_internal_r+0xa7c>
    b478:	d8c00617 	ldw	r3,24(sp)
    b47c:	6080040c 	andi	r2,r12,16
    b480:	1d000017 	ldw	r20,0(r3)
    b484:	18c00104 	addi	r3,r3,4
    b488:	d8c00615 	stw	r3,24(sp)
    b48c:	10022f1e 	bne	r2,zero,bd4c <___vfprintf_internal_r+0x14bc>
    b490:	6080100c 	andi	r2,r12,64
    b494:	10022d26 	beq	r2,zero,bd4c <___vfprintf_internal_r+0x14bc>
    b498:	a53fffcc 	andi	r20,r20,65535
    b49c:	002b883a 	mov	r21,zero
    b4a0:	003f9f06 	br	b320 <___vfprintf_internal_r+0xa90>
    b4a4:	e2c01990 	cmplti	r11,fp,102
    b4a8:	5800fb1e 	bne	r11,zero,b898 <___vfprintf_internal_r+0x1008>
    b4ac:	d9000917 	ldw	r4,36(sp)
    b4b0:	d9400a17 	ldw	r5,40(sp)
    b4b4:	000d883a 	mov	r6,zero
    b4b8:	000f883a 	mov	r7,zero
    b4bc:	d8c00e15 	stw	r3,56(sp)
    b4c0:	00086c00 	call	86c0 <__eqdf2>
    b4c4:	d8c00e17 	ldw	r3,56(sp)
    b4c8:	1001891e 	bne	r2,zero,baf0 <___vfprintf_internal_r+0x1260>
    b4cc:	d8801b17 	ldw	r2,108(sp)
    b4d0:	01000074 	movhi	r4,1
    b4d4:	211eaf04 	addi	r4,r4,31420
    b4d8:	10800044 	addi	r2,r2,1
    b4dc:	18c00044 	addi	r3,r3,1
    b4e0:	b1000015 	stw	r4,0(r22)
    b4e4:	01000044 	movi	r4,1
    b4e8:	d8801b15 	stw	r2,108(sp)
    b4ec:	b1000115 	stw	r4,4(r22)
    b4f0:	d8c01c15 	stw	r3,112(sp)
    b4f4:	10800208 	cmpgei	r2,r2,8
    b4f8:	10034a1e 	bne	r2,zero,c224 <___vfprintf_internal_r+0x1994>
    b4fc:	b5800204 	addi	r22,r22,8
    b500:	d8801417 	ldw	r2,80(sp)
    b504:	d9000817 	ldw	r4,32(sp)
    b508:	1102150e 	bge	r2,r4,bd60 <___vfprintf_internal_r+0x14d0>
    b50c:	d8800d17 	ldw	r2,52(sp)
    b510:	d9000b17 	ldw	r4,44(sp)
    b514:	b0800015 	stw	r2,0(r22)
    b518:	d8801b17 	ldw	r2,108(sp)
    b51c:	1907883a 	add	r3,r3,r4
    b520:	b1000115 	stw	r4,4(r22)
    b524:	10800044 	addi	r2,r2,1
    b528:	d8801b15 	stw	r2,108(sp)
    b52c:	d8c01c15 	stw	r3,112(sp)
    b530:	10800208 	cmpgei	r2,r2,8
    b534:	1002371e 	bne	r2,zero,be14 <___vfprintf_internal_r+0x1584>
    b538:	b5800204 	addi	r22,r22,8
    b53c:	d8800817 	ldw	r2,32(sp)
    b540:	157fffc4 	addi	r21,r2,-1
    b544:	057dd00e 	bge	zero,r21,ac88 <___vfprintf_internal_r+0x3f8>
    b548:	01c00074 	movhi	r7,1
    b54c:	a9000450 	cmplti	r4,r21,17
    b550:	d8801b17 	ldw	r2,108(sp)
    b554:	39deb004 	addi	r7,r7,31424
    b558:	20032e1e 	bne	r4,zero,c214 <___vfprintf_internal_r+0x1984>
    b55c:	07000404 	movi	fp,16
    b560:	3823883a 	mov	r17,r7
    b564:	00000406 	br	b578 <___vfprintf_internal_r+0xce8>
    b568:	b5800204 	addi	r22,r22,8
    b56c:	ad7ffc04 	addi	r21,r21,-16
    b570:	a9000448 	cmpgei	r4,r21,17
    b574:	20032626 	beq	r4,zero,c210 <___vfprintf_internal_r+0x1980>
    b578:	10800044 	addi	r2,r2,1
    b57c:	18c00404 	addi	r3,r3,16
    b580:	b4400015 	stw	r17,0(r22)
    b584:	b7000115 	stw	fp,4(r22)
    b588:	d8c01c15 	stw	r3,112(sp)
    b58c:	d8801b15 	stw	r2,108(sp)
    b590:	11000208 	cmpgei	r4,r2,8
    b594:	203ff426 	beq	r4,zero,b568 <___vfprintf_internal_r+0xcd8>
    b598:	d9801a04 	addi	r6,sp,104
    b59c:	900b883a 	mov	r5,r18
    b5a0:	9809883a 	mov	r4,r19
    b5a4:	0010af00 	call	10af0 <__sprint_r>
    b5a8:	103dc81e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    b5ac:	d8c01c17 	ldw	r3,112(sp)
    b5b0:	d8801b17 	ldw	r2,108(sp)
    b5b4:	dd802704 	addi	r22,sp,156
    b5b8:	003fec06 	br	b56c <___vfprintf_internal_r+0xcdc>
    b5bc:	8519c83a 	sub	r12,r16,r20
    b5c0:	033da20e 	bge	zero,r12,ac4c <___vfprintf_internal_r+0x3bc>
    b5c4:	01c00074 	movhi	r7,1
    b5c8:	61000450 	cmplti	r4,r12,17
    b5cc:	d8801b17 	ldw	r2,108(sp)
    b5d0:	39deb004 	addi	r7,r7,31424
    b5d4:	2000281e 	bne	r4,zero,b678 <___vfprintf_internal_r+0xde8>
    b5d8:	dc400e15 	stw	r17,56(sp)
    b5dc:	dc000f15 	stw	r16,60(sp)
    b5e0:	b009883a 	mov	r4,r22
    b5e4:	03400404 	movi	r13,16
    b5e8:	a02d883a 	mov	r22,r20
    b5ec:	6021883a 	mov	r16,r12
    b5f0:	4029883a 	mov	r20,r8
    b5f4:	3823883a 	mov	r17,r7
    b5f8:	00000406 	br	b60c <___vfprintf_internal_r+0xd7c>
    b5fc:	843ffc04 	addi	r16,r16,-16
    b600:	81400448 	cmpgei	r5,r16,17
    b604:	21000204 	addi	r4,r4,8
    b608:	28001426 	beq	r5,zero,b65c <___vfprintf_internal_r+0xdcc>
    b60c:	10800044 	addi	r2,r2,1
    b610:	18c00404 	addi	r3,r3,16
    b614:	24400015 	stw	r17,0(r4)
    b618:	23400115 	stw	r13,4(r4)
    b61c:	d8c01c15 	stw	r3,112(sp)
    b620:	d8801b15 	stw	r2,108(sp)
    b624:	11400208 	cmpgei	r5,r2,8
    b628:	283ff426 	beq	r5,zero,b5fc <___vfprintf_internal_r+0xd6c>
    b62c:	d9801a04 	addi	r6,sp,104
    b630:	900b883a 	mov	r5,r18
    b634:	9809883a 	mov	r4,r19
    b638:	0010af00 	call	10af0 <__sprint_r>
    b63c:	103da31e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    b640:	843ffc04 	addi	r16,r16,-16
    b644:	81400448 	cmpgei	r5,r16,17
    b648:	d8c01c17 	ldw	r3,112(sp)
    b64c:	d8801b17 	ldw	r2,108(sp)
    b650:	d9002704 	addi	r4,sp,156
    b654:	03400404 	movi	r13,16
    b658:	283fec1e 	bne	r5,zero,b60c <___vfprintf_internal_r+0xd7c>
    b65c:	8019883a 	mov	r12,r16
    b660:	880f883a 	mov	r7,r17
    b664:	dc000f17 	ldw	r16,60(sp)
    b668:	dc400e17 	ldw	r17,56(sp)
    b66c:	a011883a 	mov	r8,r20
    b670:	b029883a 	mov	r20,r22
    b674:	202d883a 	mov	r22,r4
    b678:	10800044 	addi	r2,r2,1
    b67c:	1b07883a 	add	r3,r3,r12
    b680:	d8801b15 	stw	r2,108(sp)
    b684:	b1c00015 	stw	r7,0(r22)
    b688:	b3000115 	stw	r12,4(r22)
    b68c:	d8c01c15 	stw	r3,112(sp)
    b690:	10800208 	cmpgei	r2,r2,8
    b694:	1002eb1e 	bne	r2,zero,c244 <___vfprintf_internal_r+0x19b4>
    b698:	4551c83a 	sub	r8,r8,r21
    b69c:	b5800204 	addi	r22,r22,8
    b6a0:	023d6c0e 	bge	zero,r8,ac54 <___vfprintf_internal_r+0x3c4>
    b6a4:	01c00074 	movhi	r7,1
    b6a8:	41000450 	cmplti	r4,r8,17
    b6ac:	d8801b17 	ldw	r2,108(sp)
    b6b0:	39deb004 	addi	r7,r7,31424
    b6b4:	2000221e 	bne	r4,zero,b740 <___vfprintf_internal_r+0xeb0>
    b6b8:	dc400e15 	stw	r17,56(sp)
    b6bc:	dc000f15 	stw	r16,60(sp)
    b6c0:	03000404 	movi	r12,16
    b6c4:	4021883a 	mov	r16,r8
    b6c8:	3823883a 	mov	r17,r7
    b6cc:	00000406 	br	b6e0 <___vfprintf_internal_r+0xe50>
    b6d0:	843ffc04 	addi	r16,r16,-16
    b6d4:	81000448 	cmpgei	r4,r16,17
    b6d8:	b5800204 	addi	r22,r22,8
    b6dc:	20001426 	beq	r4,zero,b730 <___vfprintf_internal_r+0xea0>
    b6e0:	10800044 	addi	r2,r2,1
    b6e4:	18c00404 	addi	r3,r3,16
    b6e8:	b4400015 	stw	r17,0(r22)
    b6ec:	b3000115 	stw	r12,4(r22)
    b6f0:	d8c01c15 	stw	r3,112(sp)
    b6f4:	d8801b15 	stw	r2,108(sp)
    b6f8:	11000208 	cmpgei	r4,r2,8
    b6fc:	203ff426 	beq	r4,zero,b6d0 <___vfprintf_internal_r+0xe40>
    b700:	d9801a04 	addi	r6,sp,104
    b704:	900b883a 	mov	r5,r18
    b708:	9809883a 	mov	r4,r19
    b70c:	0010af00 	call	10af0 <__sprint_r>
    b710:	103d6e1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    b714:	843ffc04 	addi	r16,r16,-16
    b718:	81000448 	cmpgei	r4,r16,17
    b71c:	d8c01c17 	ldw	r3,112(sp)
    b720:	d8801b17 	ldw	r2,108(sp)
    b724:	dd802704 	addi	r22,sp,156
    b728:	03000404 	movi	r12,16
    b72c:	203fec1e 	bne	r4,zero,b6e0 <___vfprintf_internal_r+0xe50>
    b730:	8011883a 	mov	r8,r16
    b734:	880f883a 	mov	r7,r17
    b738:	dc000f17 	ldw	r16,60(sp)
    b73c:	dc400e17 	ldw	r17,56(sp)
    b740:	10800044 	addi	r2,r2,1
    b744:	1a07883a 	add	r3,r3,r8
    b748:	d8801b15 	stw	r2,108(sp)
    b74c:	b1c00015 	stw	r7,0(r22)
    b750:	b2000115 	stw	r8,4(r22)
    b754:	d8c01c15 	stw	r3,112(sp)
    b758:	10800208 	cmpgei	r2,r2,8
    b75c:	1001731e 	bne	r2,zero,bd2c <___vfprintf_internal_r+0x149c>
    b760:	b5800204 	addi	r22,r22,8
    b764:	003d3b06 	br	ac54 <___vfprintf_internal_r+0x3c4>
    b768:	10c00060 	cmpeqi	r3,r2,1
    b76c:	1803831e 	bne	r3,zero,c57c <___vfprintf_internal_r+0x1cec>
    b770:	108000a0 	cmpeqi	r2,r2,2
    b774:	db000417 	ldw	r12,16(sp)
    b778:	103ea326 	beq	r2,zero,b208 <___vfprintf_internal_r+0x978>
    b77c:	d9000c17 	ldw	r4,48(sp)
    b780:	dc402704 	addi	r17,sp,156
    b784:	a08003cc 	andi	r2,r20,15
    b788:	a806973a 	slli	r3,r21,28
    b78c:	a028d13a 	srli	r20,r20,4
    b790:	2085883a 	add	r2,r4,r2
    b794:	10800003 	ldbu	r2,0(r2)
    b798:	a82ad13a 	srli	r21,r21,4
    b79c:	1d28b03a 	or	r20,r3,r20
    b7a0:	88bfffc5 	stb	r2,-1(r17)
    b7a4:	a544b03a 	or	r2,r20,r21
    b7a8:	8c7fffc4 	addi	r17,r17,-1
    b7ac:	103ff51e 	bne	r2,zero,b784 <___vfprintf_internal_r+0xef4>
    b7b0:	d8802704 	addi	r2,sp,156
    b7b4:	146bc83a 	sub	r21,r2,r17
    b7b8:	db000415 	stw	r12,16(sp)
    b7bc:	003e4b06 	br	b0ec <___vfprintf_internal_r+0x85c>
    b7c0:	d9801a04 	addi	r6,sp,104
    b7c4:	900b883a 	mov	r5,r18
    b7c8:	9809883a 	mov	r4,r19
    b7cc:	0010af00 	call	10af0 <__sprint_r>
    b7d0:	103d3826 	beq	r2,zero,acb4 <___vfprintf_internal_r+0x424>
    b7d4:	003d3d06 	br	accc <___vfprintf_internal_r+0x43c>
    b7d8:	d8801b17 	ldw	r2,108(sp)
    b7dc:	01000074 	movhi	r4,1
    b7e0:	211eaf04 	addi	r4,r4,31420
    b7e4:	10800044 	addi	r2,r2,1
    b7e8:	18c00044 	addi	r3,r3,1
    b7ec:	b1000015 	stw	r4,0(r22)
    b7f0:	01000044 	movi	r4,1
    b7f4:	d8801b15 	stw	r2,108(sp)
    b7f8:	b1000115 	stw	r4,4(r22)
    b7fc:	d8c01c15 	stw	r3,112(sp)
    b800:	10800208 	cmpgei	r2,r2,8
    b804:	1003211e 	bne	r2,zero,c48c <___vfprintf_internal_r+0x1bfc>
    b808:	b5800204 	addi	r22,r22,8
    b80c:	2802a51e 	bne	r5,zero,c2a4 <___vfprintf_internal_r+0x1a14>
    b810:	d8800417 	ldw	r2,16(sp)
    b814:	d9000817 	ldw	r4,32(sp)
    b818:	1080004c 	andi	r2,r2,1
    b81c:	1104b03a 	or	r2,r2,r4
    b820:	103d1926 	beq	r2,zero,ac88 <___vfprintf_internal_r+0x3f8>
    b824:	d8800d17 	ldw	r2,52(sp)
    b828:	d9000b17 	ldw	r4,44(sp)
    b82c:	b0800015 	stw	r2,0(r22)
    b830:	d8801b17 	ldw	r2,108(sp)
    b834:	20c7883a 	add	r3,r4,r3
    b838:	b1000115 	stw	r4,4(r22)
    b83c:	10800044 	addi	r2,r2,1
    b840:	d8c01c15 	stw	r3,112(sp)
    b844:	d8801b15 	stw	r2,108(sp)
    b848:	11000208 	cmpgei	r4,r2,8
    b84c:	2003381e 	bne	r4,zero,c530 <___vfprintf_internal_r+0x1ca0>
    b850:	b5800204 	addi	r22,r22,8
    b854:	d9000817 	ldw	r4,32(sp)
    b858:	10800044 	addi	r2,r2,1
    b85c:	d8801b15 	stw	r2,108(sp)
    b860:	20c7883a 	add	r3,r4,r3
    b864:	b4400015 	stw	r17,0(r22)
    b868:	b1000115 	stw	r4,4(r22)
    b86c:	d8c01c15 	stw	r3,112(sp)
    b870:	10800208 	cmpgei	r2,r2,8
    b874:	103d0326 	beq	r2,zero,ac84 <___vfprintf_internal_r+0x3f4>
    b878:	d9801a04 	addi	r6,sp,104
    b87c:	900b883a 	mov	r5,r18
    b880:	9809883a 	mov	r4,r19
    b884:	0010af00 	call	10af0 <__sprint_r>
    b888:	103d101e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    b88c:	d8c01c17 	ldw	r3,112(sp)
    b890:	dd802704 	addi	r22,sp,156
    b894:	003cfc06 	br	ac88 <___vfprintf_internal_r+0x3f8>
    b898:	d8800817 	ldw	r2,32(sp)
    b89c:	dd401b17 	ldw	r21,108(sp)
    b8a0:	18c00044 	addi	r3,r3,1
    b8a4:	10800088 	cmpgei	r2,r2,2
    b8a8:	ad400044 	addi	r21,r21,1
    b8ac:	b7000204 	addi	fp,r22,8
    b8b0:	1000e826 	beq	r2,zero,bc54 <___vfprintf_internal_r+0x13c4>
    b8b4:	00800044 	movi	r2,1
    b8b8:	b0800115 	stw	r2,4(r22)
    b8bc:	b4400015 	stw	r17,0(r22)
    b8c0:	d8c01c15 	stw	r3,112(sp)
    b8c4:	dd401b15 	stw	r21,108(sp)
    b8c8:	a8800210 	cmplti	r2,r21,8
    b8cc:	1001ad26 	beq	r2,zero,bf84 <___vfprintf_internal_r+0x16f4>
    b8d0:	d8800b17 	ldw	r2,44(sp)
    b8d4:	d9000d17 	ldw	r4,52(sp)
    b8d8:	ad400044 	addi	r21,r21,1
    b8dc:	1887883a 	add	r3,r3,r2
    b8e0:	e0800115 	stw	r2,4(fp)
    b8e4:	e1000015 	stw	r4,0(fp)
    b8e8:	d8c01c15 	stw	r3,112(sp)
    b8ec:	dd401b15 	stw	r21,108(sp)
    b8f0:	a8800208 	cmpgei	r2,r21,8
    b8f4:	1001ac1e 	bne	r2,zero,bfa8 <___vfprintf_internal_r+0x1718>
    b8f8:	e7000204 	addi	fp,fp,8
    b8fc:	d9000917 	ldw	r4,36(sp)
    b900:	d9400a17 	ldw	r5,40(sp)
    b904:	000d883a 	mov	r6,zero
    b908:	000f883a 	mov	r7,zero
    b90c:	d8c00715 	stw	r3,28(sp)
    b910:	00086c00 	call	86c0 <__eqdf2>
    b914:	d8c00817 	ldw	r3,32(sp)
    b918:	1dbfffc4 	addi	r22,r3,-1
    b91c:	d8c00717 	ldw	r3,28(sp)
    b920:	1000e426 	beq	r2,zero,bcb4 <___vfprintf_internal_r+0x1424>
    b924:	8a400044 	addi	r9,r17,1
    b928:	ad400044 	addi	r21,r21,1
    b92c:	1d87883a 	add	r3,r3,r22
    b930:	e2400015 	stw	r9,0(fp)
    b934:	e5800115 	stw	r22,4(fp)
    b938:	d8c01c15 	stw	r3,112(sp)
    b93c:	dd401b15 	stw	r21,108(sp)
    b940:	a8800208 	cmpgei	r2,r21,8
    b944:	1000cd1e 	bne	r2,zero,bc7c <___vfprintf_internal_r+0x13ec>
    b948:	e7000204 	addi	fp,fp,8
    b94c:	d9001017 	ldw	r4,64(sp)
    b950:	ad400044 	addi	r21,r21,1
    b954:	d8801644 	addi	r2,sp,89
    b958:	20c7883a 	add	r3,r4,r3
    b95c:	dd401b15 	stw	r21,108(sp)
    b960:	e0800015 	stw	r2,0(fp)
    b964:	e1000115 	stw	r4,4(fp)
    b968:	d8c01c15 	stw	r3,112(sp)
    b96c:	ad400208 	cmpgei	r21,r21,8
    b970:	a83fc11e 	bne	r21,zero,b878 <___vfprintf_internal_r+0xfe8>
    b974:	e5800204 	addi	r22,fp,8
    b978:	003cc306 	br	ac88 <___vfprintf_internal_r+0x3f8>
    b97c:	db000417 	ldw	r12,16(sp)
    b980:	003e1d06 	br	b1f8 <___vfprintf_internal_r+0x968>
    b984:	03000074 	movhi	r12,1
    b988:	39000450 	cmplti	r4,r7,17
    b98c:	d8801b17 	ldw	r2,108(sp)
    b990:	631eb404 	addi	r12,r12,31440
    b994:	2000321e 	bne	r4,zero,ba60 <___vfprintf_internal_r+0x11d0>
    b998:	dc401115 	stw	r17,68(sp)
    b99c:	b009883a 	mov	r4,r22
    b9a0:	9023883a 	mov	r17,r18
    b9a4:	a82d883a 	mov	r22,r21
    b9a8:	ddc01215 	stw	r23,72(sp)
    b9ac:	03c00404 	movi	r15,16
    b9b0:	a02f883a 	mov	r23,r20
    b9b4:	db800e15 	stw	r14,56(sp)
    b9b8:	8029883a 	mov	r20,r16
    b9bc:	db400f15 	stw	r13,60(sp)
    b9c0:	402b883a 	mov	r21,r8
    b9c4:	3821883a 	mov	r16,r7
    b9c8:	6025883a 	mov	r18,r12
    b9cc:	00000406 	br	b9e0 <___vfprintf_internal_r+0x1150>
    b9d0:	843ffc04 	addi	r16,r16,-16
    b9d4:	81800448 	cmpgei	r6,r16,17
    b9d8:	21000204 	addi	r4,r4,8
    b9dc:	30001426 	beq	r6,zero,ba30 <___vfprintf_internal_r+0x11a0>
    b9e0:	10800044 	addi	r2,r2,1
    b9e4:	18c00404 	addi	r3,r3,16
    b9e8:	24800015 	stw	r18,0(r4)
    b9ec:	23c00115 	stw	r15,4(r4)
    b9f0:	d8c01c15 	stw	r3,112(sp)
    b9f4:	d8801b15 	stw	r2,108(sp)
    b9f8:	11800208 	cmpgei	r6,r2,8
    b9fc:	303ff426 	beq	r6,zero,b9d0 <___vfprintf_internal_r+0x1140>
    ba00:	d9801a04 	addi	r6,sp,104
    ba04:	880b883a 	mov	r5,r17
    ba08:	9809883a 	mov	r4,r19
    ba0c:	0010af00 	call	10af0 <__sprint_r>
    ba10:	10017c1e 	bne	r2,zero,c004 <___vfprintf_internal_r+0x1774>
    ba14:	843ffc04 	addi	r16,r16,-16
    ba18:	81800448 	cmpgei	r6,r16,17
    ba1c:	d8c01c17 	ldw	r3,112(sp)
    ba20:	d8801b17 	ldw	r2,108(sp)
    ba24:	d9002704 	addi	r4,sp,156
    ba28:	03c00404 	movi	r15,16
    ba2c:	303fec1e 	bne	r6,zero,b9e0 <___vfprintf_internal_r+0x1150>
    ba30:	800f883a 	mov	r7,r16
    ba34:	9019883a 	mov	r12,r18
    ba38:	a021883a 	mov	r16,r20
    ba3c:	8825883a 	mov	r18,r17
    ba40:	b829883a 	mov	r20,r23
    ba44:	db800e17 	ldw	r14,56(sp)
    ba48:	db400f17 	ldw	r13,60(sp)
    ba4c:	ddc01217 	ldw	r23,72(sp)
    ba50:	dc401117 	ldw	r17,68(sp)
    ba54:	a811883a 	mov	r8,r21
    ba58:	b02b883a 	mov	r21,r22
    ba5c:	202d883a 	mov	r22,r4
    ba60:	10800044 	addi	r2,r2,1
    ba64:	19c7883a 	add	r3,r3,r7
    ba68:	d8801b15 	stw	r2,108(sp)
    ba6c:	b3000015 	stw	r12,0(r22)
    ba70:	b1c00115 	stw	r7,4(r22)
    ba74:	d8c01c15 	stw	r3,112(sp)
    ba78:	10800208 	cmpgei	r2,r2,8
    ba7c:	1001531e 	bne	r2,zero,bfcc <___vfprintf_internal_r+0x173c>
    ba80:	b5800204 	addi	r22,r22,8
    ba84:	003c5406 	br	abd8 <___vfprintf_internal_r+0x348>
    ba88:	d9801a04 	addi	r6,sp,104
    ba8c:	900b883a 	mov	r5,r18
    ba90:	9809883a 	mov	r4,r19
    ba94:	da001115 	stw	r8,68(sp)
    ba98:	db400f15 	stw	r13,60(sp)
    ba9c:	db800e15 	stw	r14,56(sp)
    baa0:	0010af00 	call	10af0 <__sprint_r>
    baa4:	103c891e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    baa8:	d8c01c17 	ldw	r3,112(sp)
    baac:	da001117 	ldw	r8,68(sp)
    bab0:	db400f17 	ldw	r13,60(sp)
    bab4:	db800e17 	ldw	r14,56(sp)
    bab8:	dd802704 	addi	r22,sp,156
    babc:	003c5406 	br	ac10 <___vfprintf_internal_r+0x380>
    bac0:	d9801a04 	addi	r6,sp,104
    bac4:	900b883a 	mov	r5,r18
    bac8:	9809883a 	mov	r4,r19
    bacc:	da000f15 	stw	r8,60(sp)
    bad0:	db400e15 	stw	r13,56(sp)
    bad4:	0010af00 	call	10af0 <__sprint_r>
    bad8:	103c7c1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    badc:	d8c01c17 	ldw	r3,112(sp)
    bae0:	da000f17 	ldw	r8,60(sp)
    bae4:	db400e17 	ldw	r13,56(sp)
    bae8:	dd802704 	addi	r22,sp,156
    baec:	003c5506 	br	ac44 <___vfprintf_internal_r+0x3b4>
    baf0:	d9401417 	ldw	r5,80(sp)
    baf4:	017f380e 	bge	zero,r5,b7d8 <___vfprintf_internal_r+0xf48>
    baf8:	d8800717 	ldw	r2,28(sp)
    bafc:	d9000817 	ldw	r4,32(sp)
    bb00:	102b883a 	mov	r21,r2
    bb04:	2080b316 	blt	r4,r2,bdd4 <___vfprintf_internal_r+0x1544>
    bb08:	05400a0e 	bge	zero,r21,bb34 <___vfprintf_internal_r+0x12a4>
    bb0c:	d8801b17 	ldw	r2,108(sp)
    bb10:	1d47883a 	add	r3,r3,r21
    bb14:	b4400015 	stw	r17,0(r22)
    bb18:	10800044 	addi	r2,r2,1
    bb1c:	d8801b15 	stw	r2,108(sp)
    bb20:	b5400115 	stw	r21,4(r22)
    bb24:	d8c01c15 	stw	r3,112(sp)
    bb28:	10800208 	cmpgei	r2,r2,8
    bb2c:	1002cf1e 	bne	r2,zero,c66c <___vfprintf_internal_r+0x1ddc>
    bb30:	b5800204 	addi	r22,r22,8
    bb34:	a800b516 	blt	r21,zero,be0c <___vfprintf_internal_r+0x157c>
    bb38:	d8800717 	ldw	r2,28(sp)
    bb3c:	156bc83a 	sub	r21,r2,r21
    bb40:	0540c416 	blt	zero,r21,be54 <___vfprintf_internal_r+0x15c4>
    bb44:	dd401417 	ldw	r21,80(sp)
    bb48:	d8800817 	ldw	r2,32(sp)
    bb4c:	a880a40e 	bge	r21,r2,bde0 <___vfprintf_internal_r+0x1550>
    bb50:	d8800d17 	ldw	r2,52(sp)
    bb54:	d9000b17 	ldw	r4,44(sp)
    bb58:	b0800015 	stw	r2,0(r22)
    bb5c:	d8801b17 	ldw	r2,108(sp)
    bb60:	1907883a 	add	r3,r3,r4
    bb64:	b1000115 	stw	r4,4(r22)
    bb68:	10800044 	addi	r2,r2,1
    bb6c:	d8801b15 	stw	r2,108(sp)
    bb70:	d8c01c15 	stw	r3,112(sp)
    bb74:	10800208 	cmpgei	r2,r2,8
    bb78:	1002b31e 	bne	r2,zero,c648 <___vfprintf_internal_r+0x1db8>
    bb7c:	b5800204 	addi	r22,r22,8
    bb80:	d9000817 	ldw	r4,32(sp)
    bb84:	d9400717 	ldw	r5,28(sp)
    bb88:	2545c83a 	sub	r2,r4,r21
    bb8c:	2149c83a 	sub	r4,r4,r5
    bb90:	102b883a 	mov	r21,r2
    bb94:	2080010e 	bge	r4,r2,bb9c <___vfprintf_internal_r+0x130c>
    bb98:	202b883a 	mov	r21,r4
    bb9c:	05400c0e 	bge	zero,r21,bbd0 <___vfprintf_internal_r+0x1340>
    bba0:	d9000717 	ldw	r4,28(sp)
    bba4:	1d47883a 	add	r3,r3,r21
    bba8:	b5400115 	stw	r21,4(r22)
    bbac:	8913883a 	add	r9,r17,r4
    bbb0:	d9001b17 	ldw	r4,108(sp)
    bbb4:	b2400015 	stw	r9,0(r22)
    bbb8:	d8c01c15 	stw	r3,112(sp)
    bbbc:	21000044 	addi	r4,r4,1
    bbc0:	d9001b15 	stw	r4,108(sp)
    bbc4:	21000208 	cmpgei	r4,r4,8
    bbc8:	2002b31e 	bne	r4,zero,c698 <___vfprintf_internal_r+0x1e08>
    bbcc:	b5800204 	addi	r22,r22,8
    bbd0:	a800010e 	bge	r21,zero,bbd8 <___vfprintf_internal_r+0x1348>
    bbd4:	002b883a 	mov	r21,zero
    bbd8:	156bc83a 	sub	r21,r2,r21
    bbdc:	057c2a0e 	bge	zero,r21,ac88 <___vfprintf_internal_r+0x3f8>
    bbe0:	01c00074 	movhi	r7,1
    bbe4:	a9000450 	cmplti	r4,r21,17
    bbe8:	d8801b17 	ldw	r2,108(sp)
    bbec:	39deb004 	addi	r7,r7,31424
    bbf0:	2001881e 	bne	r4,zero,c214 <___vfprintf_internal_r+0x1984>
    bbf4:	07000404 	movi	fp,16
    bbf8:	3823883a 	mov	r17,r7
    bbfc:	00000406 	br	bc10 <___vfprintf_internal_r+0x1380>
    bc00:	b5800204 	addi	r22,r22,8
    bc04:	ad7ffc04 	addi	r21,r21,-16
    bc08:	a9000448 	cmpgei	r4,r21,17
    bc0c:	20018026 	beq	r4,zero,c210 <___vfprintf_internal_r+0x1980>
    bc10:	10800044 	addi	r2,r2,1
    bc14:	18c00404 	addi	r3,r3,16
    bc18:	b4400015 	stw	r17,0(r22)
    bc1c:	b7000115 	stw	fp,4(r22)
    bc20:	d8c01c15 	stw	r3,112(sp)
    bc24:	d8801b15 	stw	r2,108(sp)
    bc28:	11000208 	cmpgei	r4,r2,8
    bc2c:	203ff426 	beq	r4,zero,bc00 <___vfprintf_internal_r+0x1370>
    bc30:	d9801a04 	addi	r6,sp,104
    bc34:	900b883a 	mov	r5,r18
    bc38:	9809883a 	mov	r4,r19
    bc3c:	0010af00 	call	10af0 <__sprint_r>
    bc40:	103c221e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    bc44:	d8c01c17 	ldw	r3,112(sp)
    bc48:	d8801b17 	ldw	r2,108(sp)
    bc4c:	dd802704 	addi	r22,sp,156
    bc50:	003fec06 	br	bc04 <___vfprintf_internal_r+0x1374>
    bc54:	d8800417 	ldw	r2,16(sp)
    bc58:	1080004c 	andi	r2,r2,1
    bc5c:	103f151e 	bne	r2,zero,b8b4 <___vfprintf_internal_r+0x1024>
    bc60:	00800044 	movi	r2,1
    bc64:	b0800115 	stw	r2,4(r22)
    bc68:	b4400015 	stw	r17,0(r22)
    bc6c:	d8c01c15 	stw	r3,112(sp)
    bc70:	dd401b15 	stw	r21,108(sp)
    bc74:	a8800210 	cmplti	r2,r21,8
    bc78:	103f341e 	bne	r2,zero,b94c <___vfprintf_internal_r+0x10bc>
    bc7c:	d9801a04 	addi	r6,sp,104
    bc80:	900b883a 	mov	r5,r18
    bc84:	9809883a 	mov	r4,r19
    bc88:	0010af00 	call	10af0 <__sprint_r>
    bc8c:	103c0f1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    bc90:	d8c01c17 	ldw	r3,112(sp)
    bc94:	dd401b17 	ldw	r21,108(sp)
    bc98:	df002704 	addi	fp,sp,156
    bc9c:	003f2b06 	br	b94c <___vfprintf_internal_r+0x10bc>
    bca0:	4002361e 	bne	r8,zero,c57c <___vfprintf_internal_r+0x1cec>
    bca4:	0011883a 	mov	r8,zero
    bca8:	002b883a 	mov	r21,zero
    bcac:	dc402704 	addi	r17,sp,156
    bcb0:	003d0e06 	br	b0ec <___vfprintf_internal_r+0x85c>
    bcb4:	05bf250e 	bge	zero,r22,b94c <___vfprintf_internal_r+0x10bc>
    bcb8:	01c00074 	movhi	r7,1
    bcbc:	b0800450 	cmplti	r2,r22,17
    bcc0:	39deb004 	addi	r7,r7,31424
    bcc4:	1001731e 	bne	r2,zero,c294 <___vfprintf_internal_r+0x1a04>
    bcc8:	dc000715 	stw	r16,28(sp)
    bccc:	04400404 	movi	r17,16
    bcd0:	3821883a 	mov	r16,r7
    bcd4:	00000406 	br	bce8 <___vfprintf_internal_r+0x1458>
    bcd8:	e7000204 	addi	fp,fp,8
    bcdc:	b5bffc04 	addi	r22,r22,-16
    bce0:	b0800448 	cmpgei	r2,r22,17
    bce4:	10016926 	beq	r2,zero,c28c <___vfprintf_internal_r+0x19fc>
    bce8:	ad400044 	addi	r21,r21,1
    bcec:	18c00404 	addi	r3,r3,16
    bcf0:	e4000015 	stw	r16,0(fp)
    bcf4:	e4400115 	stw	r17,4(fp)
    bcf8:	d8c01c15 	stw	r3,112(sp)
    bcfc:	dd401b15 	stw	r21,108(sp)
    bd00:	a8800208 	cmpgei	r2,r21,8
    bd04:	103ff426 	beq	r2,zero,bcd8 <___vfprintf_internal_r+0x1448>
    bd08:	d9801a04 	addi	r6,sp,104
    bd0c:	900b883a 	mov	r5,r18
    bd10:	9809883a 	mov	r4,r19
    bd14:	0010af00 	call	10af0 <__sprint_r>
    bd18:	103bec1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    bd1c:	d8c01c17 	ldw	r3,112(sp)
    bd20:	dd401b17 	ldw	r21,108(sp)
    bd24:	df002704 	addi	fp,sp,156
    bd28:	003fec06 	br	bcdc <___vfprintf_internal_r+0x144c>
    bd2c:	d9801a04 	addi	r6,sp,104
    bd30:	900b883a 	mov	r5,r18
    bd34:	9809883a 	mov	r4,r19
    bd38:	0010af00 	call	10af0 <__sprint_r>
    bd3c:	103be31e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    bd40:	d8c01c17 	ldw	r3,112(sp)
    bd44:	dd802704 	addi	r22,sp,156
    bd48:	003bc206 	br	ac54 <___vfprintf_internal_r+0x3c4>
    bd4c:	002b883a 	mov	r21,zero
    bd50:	003d7306 	br	b320 <___vfprintf_internal_r+0xa90>
    bd54:	a02bd7fa 	srai	r21,r20,31
    bd58:	a805883a 	mov	r2,r21
    bd5c:	003cd106 	br	b0a4 <___vfprintf_internal_r+0x814>
    bd60:	d8800417 	ldw	r2,16(sp)
    bd64:	1080004c 	andi	r2,r2,1
    bd68:	103bc726 	beq	r2,zero,ac88 <___vfprintf_internal_r+0x3f8>
    bd6c:	003de706 	br	b50c <___vfprintf_internal_r+0xc7c>
    bd70:	63000414 	ori	r12,r12,16
    bd74:	003b1206 	br	a9c0 <___vfprintf_internal_r+0x130>
    bd78:	bac00007 	ldb	r11,0(r23)
    bd7c:	d8800615 	stw	r2,24(sp)
    bd80:	003b0f06 	br	a9c0 <___vfprintf_internal_r+0x130>
    bd84:	dc402704 	addi	r17,sp,156
    bd88:	003cd806 	br	b0ec <___vfprintf_internal_r+0x85c>
    bd8c:	18800017 	ldw	r2,0(r3)
    bd90:	d8800915 	stw	r2,36(sp)
    bd94:	18800117 	ldw	r2,4(r3)
    bd98:	d8800a15 	stw	r2,40(sp)
    bd9c:	003c3e06 	br	ae98 <___vfprintf_internal_r+0x608>
    bda0:	00800c04 	movi	r2,48
    bda4:	d8801385 	stb	r2,78(sp)
    bda8:	df0013c5 	stb	fp,79(sp)
    bdac:	63000094 	ori	r12,r12,2
    bdb0:	00800084 	movi	r2,2
    bdb4:	003c0206 	br	adc0 <___vfprintf_internal_r+0x530>
    bdb8:	d9400517 	ldw	r5,20(sp)
    bdbc:	20800017 	ldw	r2,0(r4)
    bdc0:	d8c00615 	stw	r3,24(sp)
    bdc4:	2809d7fa 	srai	r4,r5,31
    bdc8:	11400015 	stw	r5,0(r2)
    bdcc:	11000115 	stw	r4,4(r2)
    bdd0:	003ae306 	br	a960 <___vfprintf_internal_r+0xd0>
    bdd4:	202b883a 	mov	r21,r4
    bdd8:	057f4c16 	blt	zero,r21,bb0c <___vfprintf_internal_r+0x127c>
    bddc:	003f5506 	br	bb34 <___vfprintf_internal_r+0x12a4>
    bde0:	d8800417 	ldw	r2,16(sp)
    bde4:	1080004c 	andi	r2,r2,1
    bde8:	103f591e 	bne	r2,zero,bb50 <___vfprintf_internal_r+0x12c0>
    bdec:	d9000817 	ldw	r4,32(sp)
    bdf0:	d9400717 	ldw	r5,28(sp)
    bdf4:	2545c83a 	sub	r2,r4,r21
    bdf8:	2179c83a 	sub	fp,r4,r5
    bdfc:	102b883a 	mov	r21,r2
    be00:	e0bf730e 	bge	fp,r2,bbd0 <___vfprintf_internal_r+0x1340>
    be04:	e02b883a 	mov	r21,fp
    be08:	003f7106 	br	bbd0 <___vfprintf_internal_r+0x1340>
    be0c:	002b883a 	mov	r21,zero
    be10:	003f4906 	br	bb38 <___vfprintf_internal_r+0x12a8>
    be14:	d9801a04 	addi	r6,sp,104
    be18:	900b883a 	mov	r5,r18
    be1c:	9809883a 	mov	r4,r19
    be20:	0010af00 	call	10af0 <__sprint_r>
    be24:	103ba91e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    be28:	d8c01c17 	ldw	r3,112(sp)
    be2c:	dd802704 	addi	r22,sp,156
    be30:	003dc206 	br	b53c <___vfprintf_internal_r+0xcac>
    be34:	408001f0 	cmpltui	r2,r8,7
    be38:	402b883a 	mov	r21,r8
    be3c:	1001a026 	beq	r2,zero,c4c0 <___vfprintf_internal_r+0x1c30>
    be40:	04400074 	movhi	r17,1
    be44:	a829883a 	mov	r20,r21
    be48:	d8c00615 	stw	r3,24(sp)
    be4c:	8c5ead04 	addi	r17,r17,31412
    be50:	003b5406 	br	aba4 <___vfprintf_internal_r+0x314>
    be54:	01c00074 	movhi	r7,1
    be58:	a9000450 	cmplti	r4,r21,17
    be5c:	d8801b17 	ldw	r2,108(sp)
    be60:	39deb004 	addi	r7,r7,31424
    be64:	20017b1e 	bne	r4,zero,c454 <___vfprintf_internal_r+0x1bc4>
    be68:	dc000e15 	stw	r16,56(sp)
    be6c:	07000404 	movi	fp,16
    be70:	3821883a 	mov	r16,r7
    be74:	00000406 	br	be88 <___vfprintf_internal_r+0x15f8>
    be78:	b5800204 	addi	r22,r22,8
    be7c:	ad7ffc04 	addi	r21,r21,-16
    be80:	a9000448 	cmpgei	r4,r21,17
    be84:	20017126 	beq	r4,zero,c44c <___vfprintf_internal_r+0x1bbc>
    be88:	10800044 	addi	r2,r2,1
    be8c:	18c00404 	addi	r3,r3,16
    be90:	b4000015 	stw	r16,0(r22)
    be94:	b7000115 	stw	fp,4(r22)
    be98:	d8c01c15 	stw	r3,112(sp)
    be9c:	d8801b15 	stw	r2,108(sp)
    bea0:	11000208 	cmpgei	r4,r2,8
    bea4:	203ff426 	beq	r4,zero,be78 <___vfprintf_internal_r+0x15e8>
    bea8:	d9801a04 	addi	r6,sp,104
    beac:	900b883a 	mov	r5,r18
    beb0:	9809883a 	mov	r4,r19
    beb4:	0010af00 	call	10af0 <__sprint_r>
    beb8:	103b841e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    bebc:	d8c01c17 	ldw	r3,112(sp)
    bec0:	d8801b17 	ldw	r2,108(sp)
    bec4:	dd802704 	addi	r22,sp,156
    bec8:	003fec06 	br	be7c <___vfprintf_internal_r+0x15ec>
    becc:	dc402704 	addi	r17,sp,156
    bed0:	a805883a 	mov	r2,r21
    bed4:	dc000715 	stw	r16,28(sp)
    bed8:	902b883a 	mov	r21,r18
    bedc:	8821883a 	mov	r16,r17
    bee0:	db000415 	stw	r12,16(sp)
    bee4:	a023883a 	mov	r17,r20
    bee8:	da000e15 	stw	r8,56(sp)
    beec:	9829883a 	mov	r20,r19
    bef0:	1025883a 	mov	r18,r2
    bef4:	6827883a 	mov	r19,r13
    bef8:	8809883a 	mov	r4,r17
    befc:	900b883a 	mov	r5,r18
    bf00:	01800284 	movi	r6,10
    bf04:	000f883a 	mov	r7,zero
    bf08:	00141580 	call	14158 <__umoddi3>
    bf0c:	10800c04 	addi	r2,r2,48
    bf10:	8809883a 	mov	r4,r17
    bf14:	900b883a 	mov	r5,r18
    bf18:	01800284 	movi	r6,10
    bf1c:	000f883a 	mov	r7,zero
    bf20:	80bfffc5 	stb	r2,-1(r16)
    bf24:	0013b380 	call	13b38 <__udivdi3>
    bf28:	900d883a 	mov	r6,r18
    bf2c:	880f883a 	mov	r7,r17
    bf30:	843fffc4 	addi	r16,r16,-1
    bf34:	1023883a 	mov	r17,r2
    bf38:	1825883a 	mov	r18,r3
    bf3c:	303fee1e 	bne	r6,zero,bef8 <___vfprintf_internal_r+0x1668>
    bf40:	39c002a8 	cmpgeui	r7,r7,10
    bf44:	383fec1e 	bne	r7,zero,bef8 <___vfprintf_internal_r+0x1668>
    bf48:	8023883a 	mov	r17,r16
    bf4c:	d8802704 	addi	r2,sp,156
    bf50:	981b883a 	mov	r13,r19
    bf54:	a825883a 	mov	r18,r21
    bf58:	dc000717 	ldw	r16,28(sp)
    bf5c:	da000e17 	ldw	r8,56(sp)
    bf60:	a027883a 	mov	r19,r20
    bf64:	146bc83a 	sub	r21,r2,r17
    bf68:	003c6006 	br	b0ec <___vfprintf_internal_r+0x85c>
    bf6c:	d8800617 	ldw	r2,24(sp)
    bf70:	10800017 	ldw	r2,0(r2)
    bf74:	d8c00615 	stw	r3,24(sp)
    bf78:	d8c00517 	ldw	r3,20(sp)
    bf7c:	10c00015 	stw	r3,0(r2)
    bf80:	003a7706 	br	a960 <___vfprintf_internal_r+0xd0>
    bf84:	d9801a04 	addi	r6,sp,104
    bf88:	900b883a 	mov	r5,r18
    bf8c:	9809883a 	mov	r4,r19
    bf90:	0010af00 	call	10af0 <__sprint_r>
    bf94:	103b4d1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    bf98:	d8c01c17 	ldw	r3,112(sp)
    bf9c:	dd401b17 	ldw	r21,108(sp)
    bfa0:	df002704 	addi	fp,sp,156
    bfa4:	003e4a06 	br	b8d0 <___vfprintf_internal_r+0x1040>
    bfa8:	d9801a04 	addi	r6,sp,104
    bfac:	900b883a 	mov	r5,r18
    bfb0:	9809883a 	mov	r4,r19
    bfb4:	0010af00 	call	10af0 <__sprint_r>
    bfb8:	103b441e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    bfbc:	d8c01c17 	ldw	r3,112(sp)
    bfc0:	dd401b17 	ldw	r21,108(sp)
    bfc4:	df002704 	addi	fp,sp,156
    bfc8:	003e4c06 	br	b8fc <___vfprintf_internal_r+0x106c>
    bfcc:	d9801a04 	addi	r6,sp,104
    bfd0:	900b883a 	mov	r5,r18
    bfd4:	9809883a 	mov	r4,r19
    bfd8:	da001115 	stw	r8,68(sp)
    bfdc:	db400f15 	stw	r13,60(sp)
    bfe0:	db800e15 	stw	r14,56(sp)
    bfe4:	0010af00 	call	10af0 <__sprint_r>
    bfe8:	103b381e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    bfec:	d8c01c17 	ldw	r3,112(sp)
    bff0:	da001117 	ldw	r8,68(sp)
    bff4:	db400f17 	ldw	r13,60(sp)
    bff8:	db800e17 	ldw	r14,56(sp)
    bffc:	dd802704 	addi	r22,sp,156
    c000:	003af506 	br	abd8 <___vfprintf_internal_r+0x348>
    c004:	8825883a 	mov	r18,r17
    c008:	003b3006 	br	accc <___vfprintf_internal_r+0x43c>
    c00c:	d9000917 	ldw	r4,36(sp)
    c010:	d9400a17 	ldw	r5,40(sp)
    c014:	da000615 	stw	r8,24(sp)
    c018:	200d883a 	mov	r6,r4
    c01c:	280f883a 	mov	r7,r5
    c020:	db000415 	stw	r12,16(sp)
    c024:	00099c80 	call	99c8 <__unorddf2>
    c028:	db000417 	ldw	r12,16(sp)
    c02c:	da000617 	ldw	r8,24(sp)
    c030:	1001f51e 	bne	r2,zero,c808 <___vfprintf_internal_r+0x1f78>
    c034:	057ff7c4 	movi	r21,-33
    c038:	40bfffe0 	cmpeqi	r2,r8,-1
    c03c:	e56a703a 	and	r21,fp,r21
    c040:	1001931e 	bne	r2,zero,c690 <___vfprintf_internal_r+0x1e00>
    c044:	a88011d8 	cmpnei	r2,r21,71
    c048:	10013626 	beq	r2,zero,c524 <___vfprintf_internal_r+0x1c94>
    c04c:	60804014 	ori	r2,r12,256
    c050:	d8800415 	stw	r2,16(sp)
    c054:	d8800a17 	ldw	r2,40(sp)
    c058:	10011516 	blt	r2,zero,c4b0 <___vfprintf_internal_r+0x1c20>
    c05c:	dd000a17 	ldw	r20,40(sp)
    c060:	d8000605 	stb	zero,24(sp)
    c064:	e08019a0 	cmpeqi	r2,fp,102
    c068:	d8800f15 	stw	r2,60(sp)
    c06c:	1000b91e 	bne	r2,zero,c354 <___vfprintf_internal_r+0x1ac4>
    c070:	e08011a0 	cmpeqi	r2,fp,70
    c074:	1000b71e 	bne	r2,zero,c354 <___vfprintf_internal_r+0x1ac4>
    c078:	a8801158 	cmpnei	r2,r21,69
    c07c:	10014126 	beq	r2,zero,c584 <___vfprintf_internal_r+0x1cf4>
    c080:	d8801804 	addi	r2,sp,96
    c084:	d8800315 	stw	r2,12(sp)
    c088:	d9400917 	ldw	r5,36(sp)
    c08c:	d8801504 	addi	r2,sp,84
    c090:	d8800215 	stw	r2,8(sp)
    c094:	d8801404 	addi	r2,sp,80
    c098:	da000015 	stw	r8,0(sp)
    c09c:	9809883a 	mov	r4,r19
    c0a0:	d8800115 	stw	r2,4(sp)
    c0a4:	01c00084 	movi	r7,2
    c0a8:	a00d883a 	mov	r6,r20
    c0ac:	db000815 	stw	r12,32(sp)
    c0b0:	da000715 	stw	r8,28(sp)
    c0b4:	000cd080 	call	cd08 <_dtoa_r>
    c0b8:	da000717 	ldw	r8,28(sp)
    c0bc:	e10019d8 	cmpnei	r4,fp,103
    c0c0:	db000817 	ldw	r12,32(sp)
    c0c4:	1023883a 	mov	r17,r2
    c0c8:	4007883a 	mov	r3,r8
    c0cc:	2001411e 	bne	r4,zero,c5d4 <___vfprintf_internal_r+0x1d44>
    c0d0:	6080004c 	andi	r2,r12,1
    c0d4:	1001411e 	bne	r2,zero,c5dc <___vfprintf_internal_r+0x1d4c>
    c0d8:	d8801417 	ldw	r2,80(sp)
    c0dc:	ad4011e0 	cmpeqi	r21,r21,71
    c0e0:	d8800715 	stw	r2,28(sp)
    c0e4:	d8801817 	ldw	r2,96(sp)
    c0e8:	1445c83a 	sub	r2,r2,r17
    c0ec:	d8800815 	stw	r2,32(sp)
    c0f0:	a8000526 	beq	r21,zero,c108 <___vfprintf_internal_r+0x1878>
    c0f4:	d8c00717 	ldw	r3,28(sp)
    c0f8:	18bfff50 	cmplti	r2,r3,-3
    c0fc:	1000011e 	bne	r2,zero,c104 <___vfprintf_internal_r+0x1874>
    c100:	40c1460e 	bge	r8,r3,c61c <___vfprintf_internal_r+0x1d8c>
    c104:	e73fff84 	addi	fp,fp,-2
    c108:	d8800717 	ldw	r2,28(sp)
    c10c:	df001645 	stb	fp,89(sp)
    c110:	157fffc4 	addi	r21,r2,-1
    c114:	dd401415 	stw	r21,80(sp)
    c118:	a801ab16 	blt	r21,zero,c7c8 <___vfprintf_internal_r+0x1f38>
    c11c:	00800ac4 	movi	r2,43
    c120:	d8801685 	stb	r2,90(sp)
    c124:	a8800290 	cmplti	r2,r21,10
    c128:	1001a01e 	bne	r2,zero,c7ac <___vfprintf_internal_r+0x1f1c>
    c12c:	d98019c4 	addi	r6,sp,103
    c130:	9029883a 	mov	r20,r18
    c134:	dc400715 	stw	r17,28(sp)
    c138:	8025883a 	mov	r18,r16
    c13c:	db000f15 	stw	r12,60(sp)
    c140:	3021883a 	mov	r16,r6
    c144:	a809883a 	mov	r4,r21
    c148:	01400284 	movi	r5,10
    c14c:	00070180 	call	7018 <__modsi3>
    c150:	10800c04 	addi	r2,r2,48
    c154:	a809883a 	mov	r4,r21
    c158:	80bfffc5 	stb	r2,-1(r16)
    c15c:	01400284 	movi	r5,10
    c160:	0006f980 	call	6f98 <__divsi3>
    c164:	a9001908 	cmpgei	r4,r21,100
    c168:	8023883a 	mov	r17,r16
    c16c:	102b883a 	mov	r21,r2
    c170:	843fffc4 	addi	r16,r16,-1
    c174:	203ff31e 	bne	r4,zero,c144 <___vfprintf_internal_r+0x18b4>
    c178:	800d883a 	mov	r6,r16
    c17c:	11000c04 	addi	r4,r2,48
    c180:	9021883a 	mov	r16,r18
    c184:	a025883a 	mov	r18,r20
    c188:	8829883a 	mov	r20,r17
    c18c:	a0bfff84 	addi	r2,r20,-2
    c190:	313fffc5 	stb	r4,-1(r6)
    c194:	d8c019c4 	addi	r3,sp,103
    c198:	db000f17 	ldw	r12,60(sp)
    c19c:	dc400717 	ldw	r17,28(sp)
    c1a0:	10c1be2e 	bgeu	r2,r3,c89c <___vfprintf_internal_r+0x200c>
    c1a4:	d8c016c4 	addi	r3,sp,91
    c1a8:	00000106 	br	c1b0 <___vfprintf_internal_r+0x1920>
    c1ac:	11000003 	ldbu	r4,0(r2)
    c1b0:	19000005 	stb	r4,0(r3)
    c1b4:	10800044 	addi	r2,r2,1
    c1b8:	d90019c4 	addi	r4,sp,103
    c1bc:	18c00044 	addi	r3,r3,1
    c1c0:	113ffa1e 	bne	r2,r4,c1ac <___vfprintf_internal_r+0x191c>
    c1c4:	d8801a44 	addi	r2,sp,105
    c1c8:	d8c016c4 	addi	r3,sp,91
    c1cc:	1505c83a 	sub	r2,r2,r20
    c1d0:	1885883a 	add	r2,r3,r2
    c1d4:	d8c01644 	addi	r3,sp,89
    c1d8:	10c5c83a 	sub	r2,r2,r3
    c1dc:	d8801015 	stw	r2,64(sp)
    c1e0:	d8c00817 	ldw	r3,32(sp)
    c1e4:	d9001017 	ldw	r4,64(sp)
    c1e8:	18800088 	cmpgei	r2,r3,2
    c1ec:	192b883a 	add	r21,r3,r4
    c1f0:	10018126 	beq	r2,zero,c7f8 <___vfprintf_internal_r+0x1f68>
    c1f4:	d8800b17 	ldw	r2,44(sp)
    c1f8:	a8ab883a 	add	r21,r21,r2
    c1fc:	a829883a 	mov	r20,r21
    c200:	a800010e 	bge	r21,zero,c208 <___vfprintf_internal_r+0x1978>
    c204:	0029883a 	mov	r20,zero
    c208:	d8000715 	stw	zero,28(sp)
    c20c:	00008406 	br	c420 <___vfprintf_internal_r+0x1b90>
    c210:	880f883a 	mov	r7,r17
    c214:	10800044 	addi	r2,r2,1
    c218:	1d47883a 	add	r3,r3,r21
    c21c:	b1c00015 	stw	r7,0(r22)
    c220:	003a9306 	br	ac70 <___vfprintf_internal_r+0x3e0>
    c224:	d9801a04 	addi	r6,sp,104
    c228:	900b883a 	mov	r5,r18
    c22c:	9809883a 	mov	r4,r19
    c230:	0010af00 	call	10af0 <__sprint_r>
    c234:	103aa51e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c238:	d8c01c17 	ldw	r3,112(sp)
    c23c:	dd802704 	addi	r22,sp,156
    c240:	003caf06 	br	b500 <___vfprintf_internal_r+0xc70>
    c244:	d9801a04 	addi	r6,sp,104
    c248:	900b883a 	mov	r5,r18
    c24c:	9809883a 	mov	r4,r19
    c250:	da000e15 	stw	r8,56(sp)
    c254:	0010af00 	call	10af0 <__sprint_r>
    c258:	103a9c1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c25c:	d8c01c17 	ldw	r3,112(sp)
    c260:	da000e17 	ldw	r8,56(sp)
    c264:	dd802704 	addi	r22,sp,156
    c268:	003a7806 	br	ac4c <___vfprintf_internal_r+0x3bc>
    c26c:	8809883a 	mov	r4,r17
    c270:	db000415 	stw	r12,16(sp)
    c274:	d8c00615 	stw	r3,24(sp)
    c278:	00109640 	call	10964 <strlen>
    c27c:	db000417 	ldw	r12,16(sp)
    c280:	102b883a 	mov	r21,r2
    c284:	1029883a 	mov	r20,r2
    c288:	003a4606 	br	aba4 <___vfprintf_internal_r+0x314>
    c28c:	800f883a 	mov	r7,r16
    c290:	dc000717 	ldw	r16,28(sp)
    c294:	ad400044 	addi	r21,r21,1
    c298:	1d87883a 	add	r3,r3,r22
    c29c:	e1c00015 	stw	r7,0(fp)
    c2a0:	003da406 	br	b934 <___vfprintf_internal_r+0x10a4>
    c2a4:	d8800d17 	ldw	r2,52(sp)
    c2a8:	d9000b17 	ldw	r4,44(sp)
    c2ac:	b0800015 	stw	r2,0(r22)
    c2b0:	d8801b17 	ldw	r2,108(sp)
    c2b4:	20c7883a 	add	r3,r4,r3
    c2b8:	b1000115 	stw	r4,4(r22)
    c2bc:	10800044 	addi	r2,r2,1
    c2c0:	d8c01c15 	stw	r3,112(sp)
    c2c4:	d8801b15 	stw	r2,108(sp)
    c2c8:	11000208 	cmpgei	r4,r2,8
    c2cc:	2000981e 	bne	r4,zero,c530 <___vfprintf_internal_r+0x1ca0>
    c2d0:	b5800204 	addi	r22,r22,8
    c2d4:	283d5f0e 	bge	r5,zero,b854 <___vfprintf_internal_r+0xfc4>
    c2d8:	01c00074 	movhi	r7,1
    c2dc:	293ffc08 	cmpgei	r4,r5,-16
    c2e0:	39deb004 	addi	r7,r7,31424
    c2e4:	0179c83a 	sub	fp,zero,r5
    c2e8:	2001151e 	bne	r4,zero,c740 <___vfprintf_internal_r+0x1eb0>
    c2ec:	dc000715 	stw	r16,28(sp)
    c2f0:	05400404 	movi	r21,16
    c2f4:	9021883a 	mov	r16,r18
    c2f8:	3825883a 	mov	r18,r7
    c2fc:	00000406 	br	c310 <___vfprintf_internal_r+0x1a80>
    c300:	b5800204 	addi	r22,r22,8
    c304:	e73ffc04 	addi	fp,fp,-16
    c308:	e1800448 	cmpgei	r6,fp,17
    c30c:	30010926 	beq	r6,zero,c734 <___vfprintf_internal_r+0x1ea4>
    c310:	10800044 	addi	r2,r2,1
    c314:	18c00404 	addi	r3,r3,16
    c318:	b4800015 	stw	r18,0(r22)
    c31c:	b5400115 	stw	r21,4(r22)
    c320:	d8c01c15 	stw	r3,112(sp)
    c324:	d8801b15 	stw	r2,108(sp)
    c328:	11800208 	cmpgei	r6,r2,8
    c32c:	303ff426 	beq	r6,zero,c300 <___vfprintf_internal_r+0x1a70>
    c330:	d9801a04 	addi	r6,sp,104
    c334:	800b883a 	mov	r5,r16
    c338:	9809883a 	mov	r4,r19
    c33c:	0010af00 	call	10af0 <__sprint_r>
    c340:	1001411e 	bne	r2,zero,c848 <___vfprintf_internal_r+0x1fb8>
    c344:	d8c01c17 	ldw	r3,112(sp)
    c348:	d8801b17 	ldw	r2,108(sp)
    c34c:	dd802704 	addi	r22,sp,156
    c350:	003fec06 	br	c304 <___vfprintf_internal_r+0x1a74>
    c354:	d8801804 	addi	r2,sp,96
    c358:	d8800315 	stw	r2,12(sp)
    c35c:	d9400917 	ldw	r5,36(sp)
    c360:	d8801504 	addi	r2,sp,84
    c364:	d8800215 	stw	r2,8(sp)
    c368:	d8801404 	addi	r2,sp,80
    c36c:	da000015 	stw	r8,0(sp)
    c370:	d8800115 	stw	r2,4(sp)
    c374:	01c000c4 	movi	r7,3
    c378:	a00d883a 	mov	r6,r20
    c37c:	9809883a 	mov	r4,r19
    c380:	db000815 	stw	r12,32(sp)
    c384:	da000715 	stw	r8,28(sp)
    c388:	000cd080 	call	cd08 <_dtoa_r>
    c38c:	da000717 	ldw	r8,28(sp)
    c390:	1023883a 	mov	r17,r2
    c394:	db000817 	ldw	r12,32(sp)
    c398:	1207883a 	add	r3,r2,r8
    c39c:	88800007 	ldb	r2,0(r17)
    c3a0:	10800c20 	cmpeqi	r2,r2,48
    c3a4:	10004f1e 	bne	r2,zero,c4e4 <___vfprintf_internal_r+0x1c54>
    c3a8:	d8801417 	ldw	r2,80(sp)
    c3ac:	1893883a 	add	r9,r3,r2
    c3b0:	d9000917 	ldw	r4,36(sp)
    c3b4:	000d883a 	mov	r6,zero
    c3b8:	000f883a 	mov	r7,zero
    c3bc:	a00b883a 	mov	r5,r20
    c3c0:	da401115 	stw	r9,68(sp)
    c3c4:	da000815 	stw	r8,32(sp)
    c3c8:	db000715 	stw	r12,28(sp)
    c3cc:	00086c00 	call	86c0 <__eqdf2>
    c3d0:	db000717 	ldw	r12,28(sp)
    c3d4:	da000817 	ldw	r8,32(sp)
    c3d8:	da401117 	ldw	r9,68(sp)
    c3dc:	1000811e 	bne	r2,zero,c5e4 <___vfprintf_internal_r+0x1d54>
    c3e0:	4805883a 	mov	r2,r9
    c3e4:	d8c01417 	ldw	r3,80(sp)
    c3e8:	1445c83a 	sub	r2,r2,r17
    c3ec:	ad4011d8 	cmpnei	r21,r21,71
    c3f0:	d8c00715 	stw	r3,28(sp)
    c3f4:	d8800815 	stw	r2,32(sp)
    c3f8:	a83f3e26 	beq	r21,zero,c0f4 <___vfprintf_internal_r+0x1864>
    c3fc:	d8800f17 	ldw	r2,60(sp)
    c400:	103f4126 	beq	r2,zero,c108 <___vfprintf_internal_r+0x1878>
    c404:	d8c00717 	ldw	r3,28(sp)
    c408:	6080004c 	andi	r2,r12,1
    c40c:	1204b03a 	or	r2,r2,r8
    c410:	00c1050e 	bge	zero,r3,c828 <___vfprintf_internal_r+0x1f98>
    c414:	1000f11e 	bne	r2,zero,c7dc <___vfprintf_internal_r+0x1f4c>
    c418:	dd400717 	ldw	r21,28(sp)
    c41c:	a829883a 	mov	r20,r21
    c420:	d8800607 	ldb	r2,24(sp)
    c424:	10007826 	beq	r2,zero,c608 <___vfprintf_internal_r+0x1d78>
    c428:	00800b44 	movi	r2,45
    c42c:	d8801345 	stb	r2,77(sp)
    c430:	d8800e17 	ldw	r2,56(sp)
    c434:	0011883a 	mov	r8,zero
    c438:	d8800615 	stw	r2,24(sp)
    c43c:	003b3306 	br	b10c <___vfprintf_internal_r+0x87c>
    c440:	04400074 	movhi	r17,1
    c444:	8c5e9f04 	addi	r17,r17,31356
    c448:	003ab806 	br	af2c <___vfprintf_internal_r+0x69c>
    c44c:	800f883a 	mov	r7,r16
    c450:	dc000e17 	ldw	r16,56(sp)
    c454:	10800044 	addi	r2,r2,1
    c458:	1d47883a 	add	r3,r3,r21
    c45c:	d8801b15 	stw	r2,108(sp)
    c460:	b1c00015 	stw	r7,0(r22)
    c464:	b5400115 	stw	r21,4(r22)
    c468:	d8c01c15 	stw	r3,112(sp)
    c46c:	10800208 	cmpgei	r2,r2,8
    c470:	10003a1e 	bne	r2,zero,c55c <___vfprintf_internal_r+0x1ccc>
    c474:	b5800204 	addi	r22,r22,8
    c478:	003db206 	br	bb44 <___vfprintf_internal_r+0x12b4>
    c47c:	00800b44 	movi	r2,45
    c480:	d8801345 	stb	r2,77(sp)
    c484:	03400b44 	movi	r13,45
    c488:	003aa406 	br	af1c <___vfprintf_internal_r+0x68c>
    c48c:	d9801a04 	addi	r6,sp,104
    c490:	900b883a 	mov	r5,r18
    c494:	9809883a 	mov	r4,r19
    c498:	0010af00 	call	10af0 <__sprint_r>
    c49c:	103a0b1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c4a0:	d9401417 	ldw	r5,80(sp)
    c4a4:	d8c01c17 	ldw	r3,112(sp)
    c4a8:	dd802704 	addi	r22,sp,156
    c4ac:	003cd706 	br	b80c <___vfprintf_internal_r+0xf7c>
    c4b0:	1520003c 	xorhi	r20,r2,32768
    c4b4:	00800b44 	movi	r2,45
    c4b8:	d8800605 	stb	r2,24(sp)
    c4bc:	003ee906 	br	c064 <___vfprintf_internal_r+0x17d4>
    c4c0:	05400184 	movi	r21,6
    c4c4:	003e5e06 	br	be40 <___vfprintf_internal_r+0x15b0>
    c4c8:	d9801a04 	addi	r6,sp,104
    c4cc:	900b883a 	mov	r5,r18
    c4d0:	9809883a 	mov	r4,r19
    c4d4:	0010af00 	call	10af0 <__sprint_r>
    c4d8:	0039fc06 	br	accc <___vfprintf_internal_r+0x43c>
    c4dc:	d9401345 	stb	r5,77(sp)
    c4e0:	0039aa06 	br	ab8c <___vfprintf_internal_r+0x2fc>
    c4e4:	d9000917 	ldw	r4,36(sp)
    c4e8:	000d883a 	mov	r6,zero
    c4ec:	000f883a 	mov	r7,zero
    c4f0:	a00b883a 	mov	r5,r20
    c4f4:	d8c01115 	stw	r3,68(sp)
    c4f8:	da000815 	stw	r8,32(sp)
    c4fc:	db000715 	stw	r12,28(sp)
    c500:	00086c00 	call	86c0 <__eqdf2>
    c504:	db000717 	ldw	r12,28(sp)
    c508:	da000817 	ldw	r8,32(sp)
    c50c:	d8c01117 	ldw	r3,68(sp)
    c510:	103fa526 	beq	r2,zero,c3a8 <___vfprintf_internal_r+0x1b18>
    c514:	00800044 	movi	r2,1
    c518:	1205c83a 	sub	r2,r2,r8
    c51c:	d8801415 	stw	r2,80(sp)
    c520:	003fa206 	br	c3ac <___vfprintf_internal_r+0x1b1c>
    c524:	403ec91e 	bne	r8,zero,c04c <___vfprintf_internal_r+0x17bc>
    c528:	02000044 	movi	r8,1
    c52c:	003ec706 	br	c04c <___vfprintf_internal_r+0x17bc>
    c530:	d9801a04 	addi	r6,sp,104
    c534:	900b883a 	mov	r5,r18
    c538:	9809883a 	mov	r4,r19
    c53c:	0010af00 	call	10af0 <__sprint_r>
    c540:	1039e21e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c544:	d9401417 	ldw	r5,80(sp)
    c548:	d8c01c17 	ldw	r3,112(sp)
    c54c:	d8801b17 	ldw	r2,108(sp)
    c550:	dd802704 	addi	r22,sp,156
    c554:	283cbf0e 	bge	r5,zero,b854 <___vfprintf_internal_r+0xfc4>
    c558:	003f5f06 	br	c2d8 <___vfprintf_internal_r+0x1a48>
    c55c:	d9801a04 	addi	r6,sp,104
    c560:	900b883a 	mov	r5,r18
    c564:	9809883a 	mov	r4,r19
    c568:	0010af00 	call	10af0 <__sprint_r>
    c56c:	1039d71e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c570:	d8c01c17 	ldw	r3,112(sp)
    c574:	dd802704 	addi	r22,sp,156
    c578:	003d7206 	br	bb44 <___vfprintf_internal_r+0x12b4>
    c57c:	db000417 	ldw	r12,16(sp)
    c580:	003ad506 	br	b0d8 <___vfprintf_internal_r+0x848>
    c584:	d8801804 	addi	r2,sp,96
    c588:	d8800315 	stw	r2,12(sp)
    c58c:	d9400917 	ldw	r5,36(sp)
    c590:	d8801504 	addi	r2,sp,84
    c594:	40c00044 	addi	r3,r8,1
    c598:	d8800215 	stw	r2,8(sp)
    c59c:	d8801404 	addi	r2,sp,80
    c5a0:	d8c00015 	stw	r3,0(sp)
    c5a4:	d8800115 	stw	r2,4(sp)
    c5a8:	01c00084 	movi	r7,2
    c5ac:	a00d883a 	mov	r6,r20
    c5b0:	9809883a 	mov	r4,r19
    c5b4:	db001115 	stw	r12,68(sp)
    c5b8:	da000815 	stw	r8,32(sp)
    c5bc:	d8c00715 	stw	r3,28(sp)
    c5c0:	000cd080 	call	cd08 <_dtoa_r>
    c5c4:	d8c00717 	ldw	r3,28(sp)
    c5c8:	da000817 	ldw	r8,32(sp)
    c5cc:	db001117 	ldw	r12,68(sp)
    c5d0:	1023883a 	mov	r17,r2
    c5d4:	e08011d8 	cmpnei	r2,fp,71
    c5d8:	103ebd26 	beq	r2,zero,c0d0 <___vfprintf_internal_r+0x1840>
    c5dc:	88d3883a 	add	r9,r17,r3
    c5e0:	003f7306 	br	c3b0 <___vfprintf_internal_r+0x1b20>
    c5e4:	d8801817 	ldw	r2,96(sp)
    c5e8:	127f7e2e 	bgeu	r2,r9,c3e4 <___vfprintf_internal_r+0x1b54>
    c5ec:	01000c04 	movi	r4,48
    c5f0:	10c00044 	addi	r3,r2,1
    c5f4:	d8c01815 	stw	r3,96(sp)
    c5f8:	11000005 	stb	r4,0(r2)
    c5fc:	d8801817 	ldw	r2,96(sp)
    c600:	127ffb36 	bltu	r2,r9,c5f0 <___vfprintf_internal_r+0x1d60>
    c604:	003f7706 	br	c3e4 <___vfprintf_internal_r+0x1b54>
    c608:	d8800e17 	ldw	r2,56(sp)
    c60c:	db401343 	ldbu	r13,77(sp)
    c610:	0011883a 	mov	r8,zero
    c614:	d8800615 	stw	r2,24(sp)
    c618:	003ab806 	br	b0fc <___vfprintf_internal_r+0x86c>
    c61c:	d8800717 	ldw	r2,28(sp)
    c620:	d8c00817 	ldw	r3,32(sp)
    c624:	10c02b16 	blt	r2,r3,c6d4 <___vfprintf_internal_r+0x1e44>
    c628:	6300004c 	andi	r12,r12,1
    c62c:	6000581e 	bne	r12,zero,c790 <___vfprintf_internal_r+0x1f00>
    c630:	1029883a 	mov	r20,r2
    c634:	1000010e 	bge	r2,zero,c63c <___vfprintf_internal_r+0x1dac>
    c638:	0029883a 	mov	r20,zero
    c63c:	dd400717 	ldw	r21,28(sp)
    c640:	070019c4 	movi	fp,103
    c644:	003f7606 	br	c420 <___vfprintf_internal_r+0x1b90>
    c648:	d9801a04 	addi	r6,sp,104
    c64c:	900b883a 	mov	r5,r18
    c650:	9809883a 	mov	r4,r19
    c654:	0010af00 	call	10af0 <__sprint_r>
    c658:	10399c1e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c65c:	dd401417 	ldw	r21,80(sp)
    c660:	d8c01c17 	ldw	r3,112(sp)
    c664:	dd802704 	addi	r22,sp,156
    c668:	003d4506 	br	bb80 <___vfprintf_internal_r+0x12f0>
    c66c:	d9801a04 	addi	r6,sp,104
    c670:	900b883a 	mov	r5,r18
    c674:	9809883a 	mov	r4,r19
    c678:	0010af00 	call	10af0 <__sprint_r>
    c67c:	1039931e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c680:	d8c01c17 	ldw	r3,112(sp)
    c684:	dd802704 	addi	r22,sp,156
    c688:	a83d2b0e 	bge	r21,zero,bb38 <___vfprintf_internal_r+0x12a8>
    c68c:	003ddf06 	br	be0c <___vfprintf_internal_r+0x157c>
    c690:	02000184 	movi	r8,6
    c694:	003e6d06 	br	c04c <___vfprintf_internal_r+0x17bc>
    c698:	d9801a04 	addi	r6,sp,104
    c69c:	900b883a 	mov	r5,r18
    c6a0:	9809883a 	mov	r4,r19
    c6a4:	0010af00 	call	10af0 <__sprint_r>
    c6a8:	1039881e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c6ac:	d8801417 	ldw	r2,80(sp)
    c6b0:	d9000817 	ldw	r4,32(sp)
    c6b4:	d8c01c17 	ldw	r3,112(sp)
    c6b8:	dd802704 	addi	r22,sp,156
    c6bc:	2085c83a 	sub	r2,r4,r2
    c6c0:	003d4306 	br	bbd0 <___vfprintf_internal_r+0x1340>
    c6c4:	4029883a 	mov	r20,r8
    c6c8:	d8c00615 	stw	r3,24(sp)
    c6cc:	402b883a 	mov	r21,r8
    c6d0:	00393406 	br	aba4 <___vfprintf_internal_r+0x314>
    c6d4:	d8800817 	ldw	r2,32(sp)
    c6d8:	d8c00b17 	ldw	r3,44(sp)
    c6dc:	10eb883a 	add	r21,r2,r3
    c6e0:	d8800717 	ldw	r2,28(sp)
    c6e4:	00800316 	blt	zero,r2,c6f4 <___vfprintf_internal_r+0x1e64>
    c6e8:	d8800717 	ldw	r2,28(sp)
    c6ec:	a8abc83a 	sub	r21,r21,r2
    c6f0:	ad400044 	addi	r21,r21,1
    c6f4:	a829883a 	mov	r20,r21
    c6f8:	a8002a16 	blt	r21,zero,c7a4 <___vfprintf_internal_r+0x1f14>
    c6fc:	070019c4 	movi	fp,103
    c700:	003f4706 	br	c420 <___vfprintf_internal_r+0x1b90>
    c704:	d9401345 	stb	r5,77(sp)
    c708:	003aa006 	br	b18c <___vfprintf_internal_r+0x8fc>
    c70c:	d9401345 	stb	r5,77(sp)
    c710:	003b3406 	br	b3e4 <___vfprintf_internal_r+0xb54>
    c714:	d9401345 	stb	r5,77(sp)
    c718:	0039d506 	br	ae70 <___vfprintf_internal_r+0x5e0>
    c71c:	d9401345 	stb	r5,77(sp)
    c720:	003a5806 	br	b084 <___vfprintf_internal_r+0x7f4>
    c724:	d9401345 	stb	r5,77(sp)
    c728:	003af306 	br	b2f8 <___vfprintf_internal_r+0xa68>
    c72c:	d9401345 	stb	r5,77(sp)
    c730:	003b4c06 	br	b464 <___vfprintf_internal_r+0xbd4>
    c734:	900f883a 	mov	r7,r18
    c738:	8025883a 	mov	r18,r16
    c73c:	dc000717 	ldw	r16,28(sp)
    c740:	10800044 	addi	r2,r2,1
    c744:	1f07883a 	add	r3,r3,fp
    c748:	b1c00015 	stw	r7,0(r22)
    c74c:	b7000115 	stw	fp,4(r22)
    c750:	d8c01c15 	stw	r3,112(sp)
    c754:	d8801b15 	stw	r2,108(sp)
    c758:	11000208 	cmpgei	r4,r2,8
    c75c:	203c3c26 	beq	r4,zero,b850 <___vfprintf_internal_r+0xfc0>
    c760:	d9801a04 	addi	r6,sp,104
    c764:	900b883a 	mov	r5,r18
    c768:	9809883a 	mov	r4,r19
    c76c:	0010af00 	call	10af0 <__sprint_r>
    c770:	1039561e 	bne	r2,zero,accc <___vfprintf_internal_r+0x43c>
    c774:	d8c01c17 	ldw	r3,112(sp)
    c778:	d8801b17 	ldw	r2,108(sp)
    c77c:	dd802704 	addi	r22,sp,156
    c780:	003c3406 	br	b854 <___vfprintf_internal_r+0xfc4>
    c784:	00bfffc4 	movi	r2,-1
    c788:	d8800515 	stw	r2,20(sp)
    c78c:	00395206 	br	acd8 <___vfprintf_internal_r+0x448>
    c790:	d8800717 	ldw	r2,28(sp)
    c794:	d8c00b17 	ldw	r3,44(sp)
    c798:	10eb883a 	add	r21,r2,r3
    c79c:	a829883a 	mov	r20,r21
    c7a0:	a83fd60e 	bge	r21,zero,c6fc <___vfprintf_internal_r+0x1e6c>
    c7a4:	0029883a 	mov	r20,zero
    c7a8:	003fd406 	br	c6fc <___vfprintf_internal_r+0x1e6c>
    c7ac:	00800c04 	movi	r2,48
    c7b0:	ad400c04 	addi	r21,r21,48
    c7b4:	d88016c5 	stb	r2,91(sp)
    c7b8:	00800104 	movi	r2,4
    c7bc:	dd401705 	stb	r21,92(sp)
    c7c0:	d8801015 	stw	r2,64(sp)
    c7c4:	003e8606 	br	c1e0 <___vfprintf_internal_r+0x1950>
    c7c8:	05400044 	movi	r21,1
    c7cc:	a8abc83a 	sub	r21,r21,r2
    c7d0:	00800b44 	movi	r2,45
    c7d4:	d8801685 	stb	r2,90(sp)
    c7d8:	003e5206 	br	c124 <___vfprintf_internal_r+0x1894>
    c7dc:	d8800b17 	ldw	r2,44(sp)
    c7e0:	18ab883a 	add	r21,r3,r2
    c7e4:	aa2b883a 	add	r21,r21,r8
    c7e8:	a829883a 	mov	r20,r21
    c7ec:	a83f0c0e 	bge	r21,zero,c420 <___vfprintf_internal_r+0x1b90>
    c7f0:	0029883a 	mov	r20,zero
    c7f4:	003f0a06 	br	c420 <___vfprintf_internal_r+0x1b90>
    c7f8:	6080004c 	andi	r2,r12,1
    c7fc:	d8800715 	stw	r2,28(sp)
    c800:	103e7c1e 	bne	r2,zero,c1f4 <___vfprintf_internal_r+0x1964>
    c804:	003ff806 	br	c7e8 <___vfprintf_internal_r+0x1f58>
    c808:	d8800a17 	ldw	r2,40(sp)
    c80c:	10001316 	blt	r2,zero,c85c <___vfprintf_internal_r+0x1fcc>
    c810:	db401343 	ldbu	r13,77(sp)
    c814:	e0801210 	cmplti	r2,fp,72
    c818:	10000d1e 	bne	r2,zero,c850 <___vfprintf_internal_r+0x1fc0>
    c81c:	04400074 	movhi	r17,1
    c820:	8c5ea204 	addi	r17,r17,31368
    c824:	0039c106 	br	af2c <___vfprintf_internal_r+0x69c>
    c828:	1000031e 	bne	r2,zero,c838 <___vfprintf_internal_r+0x1fa8>
    c82c:	05000044 	movi	r20,1
    c830:	05400044 	movi	r21,1
    c834:	003efa06 	br	c420 <___vfprintf_internal_r+0x1b90>
    c838:	d8800b17 	ldw	r2,44(sp)
    c83c:	15400044 	addi	r21,r2,1
    c840:	aa2b883a 	add	r21,r21,r8
    c844:	003fe806 	br	c7e8 <___vfprintf_internal_r+0x1f58>
    c848:	8025883a 	mov	r18,r16
    c84c:	00391f06 	br	accc <___vfprintf_internal_r+0x43c>
    c850:	04400074 	movhi	r17,1
    c854:	8c5ea104 	addi	r17,r17,31364
    c858:	0039b406 	br	af2c <___vfprintf_internal_r+0x69c>
    c85c:	00800b44 	movi	r2,45
    c860:	d8801345 	stb	r2,77(sp)
    c864:	03400b44 	movi	r13,45
    c868:	003fea06 	br	c814 <___vfprintf_internal_r+0x1f84>
    c86c:	d8c00617 	ldw	r3,24(sp)
    c870:	1a000017 	ldw	r8,0(r3)
    c874:	18c00104 	addi	r3,r3,4
    c878:	4000010e 	bge	r8,zero,c880 <___vfprintf_internal_r+0x1ff0>
    c87c:	023fffc4 	movi	r8,-1
    c880:	bf000043 	ldbu	fp,1(r23)
    c884:	d8c00615 	stw	r3,24(sp)
    c888:	102f883a 	mov	r23,r2
    c88c:	e2c03fcc 	andi	r11,fp,255
    c890:	5ac0201c 	xori	r11,r11,128
    c894:	5affe004 	addi	r11,r11,-128
    c898:	00384906 	br	a9c0 <___vfprintf_internal_r+0x130>
    c89c:	00800084 	movi	r2,2
    c8a0:	d8801015 	stw	r2,64(sp)
    c8a4:	003e4e06 	br	c1e0 <___vfprintf_internal_r+0x1950>

0000c8a8 <__vfprintf_internal>:
    c8a8:	00c000b4 	movhi	r3,2
    c8ac:	2005883a 	mov	r2,r4
    c8b0:	19271e17 	ldw	r4,-25480(r3)
    c8b4:	300f883a 	mov	r7,r6
    c8b8:	280d883a 	mov	r6,r5
    c8bc:	100b883a 	mov	r5,r2
    c8c0:	000a8901 	jmpi	a890 <___vfprintf_internal_r>

0000c8c4 <__sbprintf>:
    c8c4:	2880030b 	ldhu	r2,12(r5)
    c8c8:	2b001917 	ldw	r12,100(r5)
    c8cc:	2ac0038b 	ldhu	r11,14(r5)
    c8d0:	2a800717 	ldw	r10,28(r5)
    c8d4:	2a400917 	ldw	r9,36(r5)
    c8d8:	defee204 	addi	sp,sp,-1144
    c8dc:	da001a04 	addi	r8,sp,104
    c8e0:	00c10004 	movi	r3,1024
    c8e4:	dc011a15 	stw	r16,1128(sp)
    c8e8:	10bfff4c 	andi	r2,r2,65533
    c8ec:	2821883a 	mov	r16,r5
    c8f0:	d80b883a 	mov	r5,sp
    c8f4:	dc811c15 	stw	r18,1136(sp)
    c8f8:	dc411b15 	stw	r17,1132(sp)
    c8fc:	dfc11d15 	stw	ra,1140(sp)
    c900:	2025883a 	mov	r18,r4
    c904:	d880030d 	sth	r2,12(sp)
    c908:	db001915 	stw	r12,100(sp)
    c90c:	dac0038d 	sth	r11,14(sp)
    c910:	da800715 	stw	r10,28(sp)
    c914:	da400915 	stw	r9,36(sp)
    c918:	da000015 	stw	r8,0(sp)
    c91c:	da000415 	stw	r8,16(sp)
    c920:	d8c00215 	stw	r3,8(sp)
    c924:	d8c00515 	stw	r3,20(sp)
    c928:	d8000615 	stw	zero,24(sp)
    c92c:	000a8900 	call	a890 <___vfprintf_internal_r>
    c930:	1023883a 	mov	r17,r2
    c934:	10000d0e 	bge	r2,zero,c96c <__sbprintf+0xa8>
    c938:	d880030b 	ldhu	r2,12(sp)
    c93c:	1080100c 	andi	r2,r2,64
    c940:	10000326 	beq	r2,zero,c950 <__sbprintf+0x8c>
    c944:	8080030b 	ldhu	r2,12(r16)
    c948:	10801014 	ori	r2,r2,64
    c94c:	8080030d 	sth	r2,12(r16)
    c950:	8805883a 	mov	r2,r17
    c954:	dfc11d17 	ldw	ra,1140(sp)
    c958:	dc811c17 	ldw	r18,1136(sp)
    c95c:	dc411b17 	ldw	r17,1132(sp)
    c960:	dc011a17 	ldw	r16,1128(sp)
    c964:	dec11e04 	addi	sp,sp,1144
    c968:	f800283a 	ret
    c96c:	d80b883a 	mov	r5,sp
    c970:	9009883a 	mov	r4,r18
    c974:	000e6780 	call	e678 <_fflush_r>
    c978:	103fef26 	beq	r2,zero,c938 <__sbprintf+0x74>
    c97c:	047fffc4 	movi	r17,-1
    c980:	003fed06 	br	c938 <__sbprintf+0x74>

0000c984 <__swsetup_r>:
    c984:	008000b4 	movhi	r2,2
    c988:	10a71e17 	ldw	r2,-25480(r2)
    c98c:	defffd04 	addi	sp,sp,-12
    c990:	dc400115 	stw	r17,4(sp)
    c994:	dc000015 	stw	r16,0(sp)
    c998:	dfc00215 	stw	ra,8(sp)
    c99c:	2023883a 	mov	r17,r4
    c9a0:	2821883a 	mov	r16,r5
    c9a4:	10000226 	beq	r2,zero,c9b0 <__swsetup_r+0x2c>
    c9a8:	10c00e17 	ldw	r3,56(r2)
    c9ac:	18001f26 	beq	r3,zero,ca2c <__swsetup_r+0xa8>
    c9b0:	8180030b 	ldhu	r6,12(r16)
    c9b4:	30c0020c 	andi	r3,r6,8
    c9b8:	3005883a 	mov	r2,r6
    c9bc:	18002126 	beq	r3,zero,ca44 <__swsetup_r+0xc0>
    c9c0:	80c00417 	ldw	r3,16(r16)
    c9c4:	18002826 	beq	r3,zero,ca68 <__swsetup_r+0xe4>
    c9c8:	1100004c 	andi	r4,r2,1
    c9cc:	20000b1e 	bne	r4,zero,c9fc <__swsetup_r+0x78>
    c9d0:	1100008c 	andi	r4,r2,2
    c9d4:	20002e1e 	bne	r4,zero,ca90 <__swsetup_r+0x10c>
    c9d8:	81000517 	ldw	r4,20(r16)
    c9dc:	81000215 	stw	r4,8(r16)
    c9e0:	18000b26 	beq	r3,zero,ca10 <__swsetup_r+0x8c>
    c9e4:	0005883a 	mov	r2,zero
    c9e8:	dfc00217 	ldw	ra,8(sp)
    c9ec:	dc400117 	ldw	r17,4(sp)
    c9f0:	dc000017 	ldw	r16,0(sp)
    c9f4:	dec00304 	addi	sp,sp,12
    c9f8:	f800283a 	ret
    c9fc:	81000517 	ldw	r4,20(r16)
    ca00:	80000215 	stw	zero,8(r16)
    ca04:	0109c83a 	sub	r4,zero,r4
    ca08:	81000615 	stw	r4,24(r16)
    ca0c:	183ff51e 	bne	r3,zero,c9e4 <__swsetup_r+0x60>
    ca10:	10c0200c 	andi	r3,r2,128
    ca14:	0005883a 	mov	r2,zero
    ca18:	183ff326 	beq	r3,zero,c9e8 <__swsetup_r+0x64>
    ca1c:	31801014 	ori	r6,r6,64
    ca20:	8180030d 	sth	r6,12(r16)
    ca24:	00bfffc4 	movi	r2,-1
    ca28:	003fef06 	br	c9e8 <__swsetup_r+0x64>
    ca2c:	1009883a 	mov	r4,r2
    ca30:	000eac00 	call	eac0 <__sinit>
    ca34:	8180030b 	ldhu	r6,12(r16)
    ca38:	30c0020c 	andi	r3,r6,8
    ca3c:	3005883a 	mov	r2,r6
    ca40:	183fdf1e 	bne	r3,zero,c9c0 <__swsetup_r+0x3c>
    ca44:	3080040c 	andi	r2,r6,16
    ca48:	10002126 	beq	r2,zero,cad0 <__swsetup_r+0x14c>
    ca4c:	3080010c 	andi	r2,r6,4
    ca50:	1000111e 	bne	r2,zero,ca98 <__swsetup_r+0x114>
    ca54:	80c00417 	ldw	r3,16(r16)
    ca58:	30800214 	ori	r2,r6,8
    ca5c:	8080030d 	sth	r2,12(r16)
    ca60:	100d883a 	mov	r6,r2
    ca64:	183fd81e 	bne	r3,zero,c9c8 <__swsetup_r+0x44>
    ca68:	1100a00c 	andi	r4,r2,640
    ca6c:	21008020 	cmpeqi	r4,r4,512
    ca70:	203fd51e 	bne	r4,zero,c9c8 <__swsetup_r+0x44>
    ca74:	800b883a 	mov	r5,r16
    ca78:	8809883a 	mov	r4,r17
    ca7c:	000f0800 	call	f080 <__smakebuf_r>
    ca80:	8180030b 	ldhu	r6,12(r16)
    ca84:	80c00417 	ldw	r3,16(r16)
    ca88:	3005883a 	mov	r2,r6
    ca8c:	003fce06 	br	c9c8 <__swsetup_r+0x44>
    ca90:	0009883a 	mov	r4,zero
    ca94:	003fd106 	br	c9dc <__swsetup_r+0x58>
    ca98:	81400c17 	ldw	r5,48(r16)
    ca9c:	28000626 	beq	r5,zero,cab8 <__swsetup_r+0x134>
    caa0:	80801004 	addi	r2,r16,64
    caa4:	28800326 	beq	r5,r2,cab4 <__swsetup_r+0x130>
    caa8:	8809883a 	mov	r4,r17
    caac:	000ec240 	call	ec24 <_free_r>
    cab0:	8180030b 	ldhu	r6,12(r16)
    cab4:	80000c15 	stw	zero,48(r16)
    cab8:	80c00417 	ldw	r3,16(r16)
    cabc:	00bff6c4 	movi	r2,-37
    cac0:	118c703a 	and	r6,r2,r6
    cac4:	80000115 	stw	zero,4(r16)
    cac8:	80c00015 	stw	r3,0(r16)
    cacc:	003fe206 	br	ca58 <__swsetup_r+0xd4>
    cad0:	00800244 	movi	r2,9
    cad4:	88800015 	stw	r2,0(r17)
    cad8:	31801014 	ori	r6,r6,64
    cadc:	8180030d 	sth	r6,12(r16)
    cae0:	00bfffc4 	movi	r2,-1
    cae4:	003fc006 	br	c9e8 <__swsetup_r+0x64>

0000cae8 <quorem>:
    cae8:	defff204 	addi	sp,sp,-56
    caec:	dc400515 	stw	r17,20(sp)
    caf0:	20800417 	ldw	r2,16(r4)
    caf4:	2c400417 	ldw	r17,16(r5)
    caf8:	dfc00d15 	stw	ra,52(sp)
    cafc:	df000c15 	stw	fp,48(sp)
    cb00:	ddc00b15 	stw	r23,44(sp)
    cb04:	dd800a15 	stw	r22,40(sp)
    cb08:	dd400915 	stw	r21,36(sp)
    cb0c:	dd000815 	stw	r20,32(sp)
    cb10:	dcc00715 	stw	r19,28(sp)
    cb14:	dc800615 	stw	r18,24(sp)
    cb18:	dc000415 	stw	r16,16(sp)
    cb1c:	d9000115 	stw	r4,4(sp)
    cb20:	d9400215 	stw	r5,8(sp)
    cb24:	14407616 	blt	r2,r17,cd00 <quorem+0x218>
    cb28:	8c7fffc4 	addi	r17,r17,-1
    cb2c:	882a90ba 	slli	r21,r17,2
    cb30:	2f000504 	addi	fp,r5,20
    cb34:	25800504 	addi	r22,r4,20
    cb38:	e565883a 	add	r18,fp,r21
    cb3c:	b545883a 	add	r2,r22,r21
    cb40:	95c00017 	ldw	r23,0(r18)
    cb44:	15000017 	ldw	r20,0(r2)
    cb48:	dd800015 	stw	r22,0(sp)
    cb4c:	bdc00044 	addi	r23,r23,1
    cb50:	b80b883a 	mov	r5,r23
    cb54:	a009883a 	mov	r4,r20
    cb58:	d8800315 	stw	r2,12(sp)
    cb5c:	000708c0 	call	708c <__udivsi3>
    cb60:	1021883a 	mov	r16,r2
    cb64:	a5c02f36 	bltu	r20,r23,cc24 <quorem+0x13c>
    cb68:	e029883a 	mov	r20,fp
    cb6c:	002b883a 	mov	r21,zero
    cb70:	002f883a 	mov	r23,zero
    cb74:	a4c00017 	ldw	r19,0(r20)
    cb78:	800b883a 	mov	r5,r16
    cb7c:	b5800104 	addi	r22,r22,4
    cb80:	993fffcc 	andi	r4,r19,65535
    cb84:	000714c0 	call	714c <__mulsi3>
    cb88:	9808d43a 	srli	r4,r19,16
    cb8c:	800b883a 	mov	r5,r16
    cb90:	156b883a 	add	r21,r2,r21
    cb94:	000714c0 	call	714c <__mulsi3>
    cb98:	b0ffff17 	ldw	r3,-4(r22)
    cb9c:	a80ad43a 	srli	r5,r21,16
    cba0:	a93fffcc 	andi	r4,r21,65535
    cba4:	19bfffcc 	andi	r6,r3,65535
    cba8:	b909c83a 	sub	r4,r23,r4
    cbac:	2189883a 	add	r4,r4,r6
    cbb0:	1806d43a 	srli	r3,r3,16
    cbb4:	1145883a 	add	r2,r2,r5
    cbb8:	200bd43a 	srai	r5,r4,16
    cbbc:	11bfffcc 	andi	r6,r2,65535
    cbc0:	1987c83a 	sub	r3,r3,r6
    cbc4:	1947883a 	add	r3,r3,r5
    cbc8:	180a943a 	slli	r5,r3,16
    cbcc:	213fffcc 	andi	r4,r4,65535
    cbd0:	a5000104 	addi	r20,r20,4
    cbd4:	2908b03a 	or	r4,r5,r4
    cbd8:	b13fff15 	stw	r4,-4(r22)
    cbdc:	102ad43a 	srli	r21,r2,16
    cbe0:	182fd43a 	srai	r23,r3,16
    cbe4:	953fe32e 	bgeu	r18,r20,cb74 <quorem+0x8c>
    cbe8:	d8c00317 	ldw	r3,12(sp)
    cbec:	18800017 	ldw	r2,0(r3)
    cbf0:	10000c1e 	bne	r2,zero,cc24 <quorem+0x13c>
    cbf4:	d8800017 	ldw	r2,0(sp)
    cbf8:	1d7fff04 	addi	r21,r3,-4
    cbfc:	15400436 	bltu	r2,r21,cc10 <quorem+0x128>
    cc00:	00000606 	br	cc1c <quorem+0x134>
    cc04:	d8800017 	ldw	r2,0(sp)
    cc08:	8c7fffc4 	addi	r17,r17,-1
    cc0c:	1540032e 	bgeu	r2,r21,cc1c <quorem+0x134>
    cc10:	a8800017 	ldw	r2,0(r21)
    cc14:	ad7fff04 	addi	r21,r21,-4
    cc18:	103ffa26 	beq	r2,zero,cc04 <quorem+0x11c>
    cc1c:	d8800117 	ldw	r2,4(sp)
    cc20:	14400415 	stw	r17,16(r2)
    cc24:	d9400217 	ldw	r5,8(sp)
    cc28:	d9000117 	ldw	r4,4(sp)
    cc2c:	000ff3c0 	call	ff3c <__mcmp>
    cc30:	10002616 	blt	r2,zero,cccc <quorem+0x1e4>
    cc34:	d9400017 	ldw	r5,0(sp)
    cc38:	84000044 	addi	r16,r16,1
    cc3c:	0007883a 	mov	r3,zero
    cc40:	e1000017 	ldw	r4,0(fp)
    cc44:	29800017 	ldw	r6,0(r5)
    cc48:	29400104 	addi	r5,r5,4
    cc4c:	20bfffcc 	andi	r2,r4,65535
    cc50:	1887c83a 	sub	r3,r3,r2
    cc54:	30bfffcc 	andi	r2,r6,65535
    cc58:	1885883a 	add	r2,r3,r2
    cc5c:	2008d43a 	srli	r4,r4,16
    cc60:	3006d43a 	srli	r3,r6,16
    cc64:	100fd43a 	srai	r7,r2,16
    cc68:	11bfffcc 	andi	r6,r2,65535
    cc6c:	1907c83a 	sub	r3,r3,r4
    cc70:	19c7883a 	add	r3,r3,r7
    cc74:	1804943a 	slli	r2,r3,16
    cc78:	e7000104 	addi	fp,fp,4
    cc7c:	1807d43a 	srai	r3,r3,16
    cc80:	1184b03a 	or	r2,r2,r6
    cc84:	28bfff15 	stw	r2,-4(r5)
    cc88:	973fed2e 	bgeu	r18,fp,cc40 <quorem+0x158>
    cc8c:	880490ba 	slli	r2,r17,2
    cc90:	d9000017 	ldw	r4,0(sp)
    cc94:	2085883a 	add	r2,r4,r2
    cc98:	10c00017 	ldw	r3,0(r2)
    cc9c:	18000b1e 	bne	r3,zero,cccc <quorem+0x1e4>
    cca0:	10bfff04 	addi	r2,r2,-4
    cca4:	20800436 	bltu	r4,r2,ccb8 <quorem+0x1d0>
    cca8:	00000606 	br	ccc4 <quorem+0x1dc>
    ccac:	d8c00017 	ldw	r3,0(sp)
    ccb0:	8c7fffc4 	addi	r17,r17,-1
    ccb4:	1880032e 	bgeu	r3,r2,ccc4 <quorem+0x1dc>
    ccb8:	10c00017 	ldw	r3,0(r2)
    ccbc:	10bfff04 	addi	r2,r2,-4
    ccc0:	183ffa26 	beq	r3,zero,ccac <quorem+0x1c4>
    ccc4:	d8800117 	ldw	r2,4(sp)
    ccc8:	14400415 	stw	r17,16(r2)
    cccc:	8005883a 	mov	r2,r16
    ccd0:	dfc00d17 	ldw	ra,52(sp)
    ccd4:	df000c17 	ldw	fp,48(sp)
    ccd8:	ddc00b17 	ldw	r23,44(sp)
    ccdc:	dd800a17 	ldw	r22,40(sp)
    cce0:	dd400917 	ldw	r21,36(sp)
    cce4:	dd000817 	ldw	r20,32(sp)
    cce8:	dcc00717 	ldw	r19,28(sp)
    ccec:	dc800617 	ldw	r18,24(sp)
    ccf0:	dc400517 	ldw	r17,20(sp)
    ccf4:	dc000417 	ldw	r16,16(sp)
    ccf8:	dec00e04 	addi	sp,sp,56
    ccfc:	f800283a 	ret
    cd00:	0005883a 	mov	r2,zero
    cd04:	003ff206 	br	ccd0 <quorem+0x1e8>

0000cd08 <_dtoa_r>:
    cd08:	20801017 	ldw	r2,64(r4)
    cd0c:	deffe304 	addi	sp,sp,-116
    cd10:	df001b15 	stw	fp,108(sp)
    cd14:	dcc01615 	stw	r19,88(sp)
    cd18:	dc801515 	stw	r18,84(sp)
    cd1c:	dc401415 	stw	r17,80(sp)
    cd20:	dc001315 	stw	r16,76(sp)
    cd24:	dfc01c15 	stw	ra,112(sp)
    cd28:	ddc01a15 	stw	r23,104(sp)
    cd2c:	dd801915 	stw	r22,100(sp)
    cd30:	dd401815 	stw	r21,96(sp)
    cd34:	dd001715 	stw	r20,92(sp)
    cd38:	d9c00215 	stw	r7,8(sp)
    cd3c:	dc001f17 	ldw	r16,124(sp)
    cd40:	2039883a 	mov	fp,r4
    cd44:	3025883a 	mov	r18,r6
    cd48:	2827883a 	mov	r19,r5
    cd4c:	3023883a 	mov	r17,r6
    cd50:	10000826 	beq	r2,zero,cd74 <_dtoa_r+0x6c>
    cd54:	21801117 	ldw	r6,68(r4)
    cd58:	00c00044 	movi	r3,1
    cd5c:	100b883a 	mov	r5,r2
    cd60:	1986983a 	sll	r3,r3,r6
    cd64:	11800115 	stw	r6,4(r2)
    cd68:	10c00215 	stw	r3,8(r2)
    cd6c:	000f52c0 	call	f52c <_Bfree>
    cd70:	e0001015 	stw	zero,64(fp)
    cd74:	90018916 	blt	r18,zero,d39c <_dtoa_r+0x694>
    cd78:	80000015 	stw	zero,0(r16)
    cd7c:	909ffc2c 	andhi	r2,r18,32752
    cd80:	00dffc34 	movhi	r3,32752
    cd84:	10c18e26 	beq	r2,r3,d3c0 <_dtoa_r+0x6b8>
    cd88:	000d883a 	mov	r6,zero
    cd8c:	000f883a 	mov	r7,zero
    cd90:	9809883a 	mov	r4,r19
    cd94:	880b883a 	mov	r5,r17
    cd98:	00086c00 	call	86c0 <__eqdf2>
    cd9c:	1000191e 	bne	r2,zero,ce04 <_dtoa_r+0xfc>
    cda0:	d8c01e17 	ldw	r3,120(sp)
    cda4:	00800044 	movi	r2,1
    cda8:	18800015 	stw	r2,0(r3)
    cdac:	d8802017 	ldw	r2,128(sp)
    cdb0:	1002ff26 	beq	r2,zero,d9b0 <_dtoa_r+0xca8>
    cdb4:	d9002017 	ldw	r4,128(sp)
    cdb8:	00800074 	movhi	r2,1
    cdbc:	109eaf44 	addi	r2,r2,31421
    cdc0:	00c00074 	movhi	r3,1
    cdc4:	20800015 	stw	r2,0(r4)
    cdc8:	189eaf04 	addi	r2,r3,31420
    cdcc:	d8800115 	stw	r2,4(sp)
    cdd0:	d8800117 	ldw	r2,4(sp)
    cdd4:	dfc01c17 	ldw	ra,112(sp)
    cdd8:	df001b17 	ldw	fp,108(sp)
    cddc:	ddc01a17 	ldw	r23,104(sp)
    cde0:	dd801917 	ldw	r22,100(sp)
    cde4:	dd401817 	ldw	r21,96(sp)
    cde8:	dd001717 	ldw	r20,92(sp)
    cdec:	dcc01617 	ldw	r19,88(sp)
    cdf0:	dc801517 	ldw	r18,84(sp)
    cdf4:	dc401417 	ldw	r17,80(sp)
    cdf8:	dc001317 	ldw	r16,76(sp)
    cdfc:	dec01d04 	addi	sp,sp,116
    ce00:	f800283a 	ret
    ce04:	d8801104 	addi	r2,sp,68
    ce08:	9020d53a 	srli	r16,r18,20
    ce0c:	d8800015 	stw	r2,0(sp)
    ce10:	d9c01204 	addi	r7,sp,72
    ce14:	980b883a 	mov	r5,r19
    ce18:	880d883a 	mov	r6,r17
    ce1c:	e009883a 	mov	r4,fp
    ce20:	00103240 	call	10324 <__d2b>
    ce24:	102f883a 	mov	r23,r2
    ce28:	8001781e 	bne	r16,zero,d40c <_dtoa_r+0x704>
    ce2c:	dd001117 	ldw	r20,68(sp)
    ce30:	dc001217 	ldw	r16,72(sp)
    ce34:	a421883a 	add	r16,r20,r16
    ce38:	80810c84 	addi	r2,r16,1074
    ce3c:	10c00850 	cmplti	r3,r2,33
    ce40:	1802eb1e 	bne	r3,zero,d9f0 <_dtoa_r+0xce8>
    ce44:	01001004 	movi	r4,64
    ce48:	2085c83a 	sub	r2,r4,r2
    ce4c:	81010484 	addi	r4,r16,1042
    ce50:	90a4983a 	sll	r18,r18,r2
    ce54:	9908d83a 	srl	r4,r19,r4
    ce58:	9108b03a 	or	r4,r18,r4
    ce5c:	0009b540 	call	9b54 <__floatunsidf>
    ce60:	1009883a 	mov	r4,r2
    ce64:	017f8434 	movhi	r5,65040
    ce68:	00800044 	movi	r2,1
    ce6c:	194b883a 	add	r5,r3,r5
    ce70:	843fffc4 	addi	r16,r16,-1
    ce74:	d8800915 	stw	r2,36(sp)
    ce78:	000d883a 	mov	r6,zero
    ce7c:	01cffe34 	movhi	r7,16376
    ce80:	00090bc0 	call	90bc <__subdf3>
    ce84:	0198dbf4 	movhi	r6,25455
    ce88:	01cff4f4 	movhi	r7,16339
    ce8c:	3190d844 	addi	r6,r6,17249
    ce90:	39e1e9c4 	addi	r7,r7,-30809
    ce94:	1009883a 	mov	r4,r2
    ce98:	180b883a 	mov	r5,r3
    ce9c:	00089100 	call	8910 <__muldf3>
    cea0:	01a2d874 	movhi	r6,35681
    cea4:	01cff1f4 	movhi	r7,16327
    cea8:	31b22cc4 	addi	r6,r6,-14157
    ceac:	39e28a04 	addi	r7,r7,-30168
    ceb0:	180b883a 	mov	r5,r3
    ceb4:	1009883a 	mov	r4,r2
    ceb8:	00074bc0 	call	74bc <__adddf3>
    cebc:	8009883a 	mov	r4,r16
    cec0:	102b883a 	mov	r21,r2
    cec4:	1825883a 	mov	r18,r3
    cec8:	0009a9c0 	call	9a9c <__floatsidf>
    cecc:	019427f4 	movhi	r6,20639
    ced0:	01cff4f4 	movhi	r7,16339
    ced4:	319e7ec4 	addi	r6,r6,31227
    ced8:	39d104c4 	addi	r7,r7,17427
    cedc:	1009883a 	mov	r4,r2
    cee0:	180b883a 	mov	r5,r3
    cee4:	00089100 	call	8910 <__muldf3>
    cee8:	100d883a 	mov	r6,r2
    ceec:	180f883a 	mov	r7,r3
    cef0:	a809883a 	mov	r4,r21
    cef4:	900b883a 	mov	r5,r18
    cef8:	00074bc0 	call	74bc <__adddf3>
    cefc:	1009883a 	mov	r4,r2
    cf00:	180b883a 	mov	r5,r3
    cf04:	1025883a 	mov	r18,r2
    cf08:	182d883a 	mov	r22,r3
    cf0c:	0009a1c0 	call	9a1c <__fixdfsi>
    cf10:	000d883a 	mov	r6,zero
    cf14:	000f883a 	mov	r7,zero
    cf18:	9009883a 	mov	r4,r18
    cf1c:	b00b883a 	mov	r5,r22
    cf20:	102b883a 	mov	r21,r2
    cf24:	00088280 	call	8828 <__ledf2>
    cf28:	10029716 	blt	r2,zero,d988 <_dtoa_r+0xc80>
    cf2c:	a421c83a 	sub	r16,r20,r16
    cf30:	a88005e8 	cmpgeui	r2,r21,23
    cf34:	85bfffc4 	addi	r22,r16,-1
    cf38:	10028b1e 	bne	r2,zero,d968 <_dtoa_r+0xc60>
    cf3c:	a80690fa 	slli	r3,r21,3
    cf40:	00800074 	movhi	r2,1
    cf44:	109ef804 	addi	r2,r2,31712
    cf48:	10c5883a 	add	r2,r2,r3
    cf4c:	11800017 	ldw	r6,0(r2)
    cf50:	11c00117 	ldw	r7,4(r2)
    cf54:	9809883a 	mov	r4,r19
    cf58:	880b883a 	mov	r5,r17
    cf5c:	00088280 	call	8828 <__ledf2>
    cf60:	10025f0e 	bge	r2,zero,d8e0 <_dtoa_r+0xbd8>
    cf64:	d8000815 	stw	zero,32(sp)
    cf68:	ad7fffc4 	addi	r21,r21,-1
    cf6c:	b0028116 	blt	r22,zero,d974 <_dtoa_r+0xc6c>
    cf70:	d8000415 	stw	zero,16(sp)
    cf74:	a8025d0e 	bge	r21,zero,d8ec <_dtoa_r+0xbe4>
    cf78:	d8800417 	ldw	r2,16(sp)
    cf7c:	d8c00217 	ldw	r3,8(sp)
    cf80:	dd400615 	stw	r21,24(sp)
    cf84:	1545c83a 	sub	r2,r2,r21
    cf88:	d8800415 	stw	r2,16(sp)
    cf8c:	0545c83a 	sub	r2,zero,r21
    cf90:	d8800715 	stw	r2,28(sp)
    cf94:	188002a8 	cmpgeui	r2,r3,10
    cf98:	002b883a 	mov	r21,zero
    cf9c:	1002591e 	bne	r2,zero,d904 <_dtoa_r+0xbfc>
    cfa0:	18800190 	cmplti	r2,r3,6
    cfa4:	1002961e 	bne	r2,zero,da00 <_dtoa_r+0xcf8>
    cfa8:	18bfff04 	addi	r2,r3,-4
    cfac:	d8800215 	stw	r2,8(sp)
    cfb0:	0021883a 	mov	r16,zero
    cfb4:	d8c00217 	ldw	r3,8(sp)
    cfb8:	18800120 	cmpeqi	r2,r3,4
    cfbc:	10036d1e 	bne	r2,zero,dd74 <_dtoa_r+0x106c>
    cfc0:	18800160 	cmpeqi	r2,r3,5
    cfc4:	1003291e 	bne	r2,zero,dc6c <_dtoa_r+0xf64>
    cfc8:	188000a0 	cmpeqi	r2,r3,2
    cfcc:	10025926 	beq	r2,zero,d934 <_dtoa_r+0xc2c>
    cfd0:	d8000515 	stw	zero,20(sp)
    cfd4:	d8801d17 	ldw	r2,116(sp)
    cfd8:	0083340e 	bge	zero,r2,dcac <_dtoa_r+0xfa4>
    cfdc:	d8800b15 	stw	r2,44(sp)
    cfe0:	d8800315 	stw	r2,12(sp)
    cfe4:	100d883a 	mov	r6,r2
    cfe8:	e0001115 	stw	zero,68(fp)
    cfec:	30800610 	cmplti	r2,r6,24
    cff0:	1004f61e 	bne	r2,zero,e3cc <_dtoa_r+0x16c4>
    cff4:	00c00044 	movi	r3,1
    cff8:	00800104 	movi	r2,4
    cffc:	1085883a 	add	r2,r2,r2
    d000:	11000504 	addi	r4,r2,20
    d004:	180b883a 	mov	r5,r3
    d008:	18c00044 	addi	r3,r3,1
    d00c:	313ffb2e 	bgeu	r6,r4,cffc <_dtoa_r+0x2f4>
    d010:	e1401115 	stw	r5,68(fp)
    d014:	e009883a 	mov	r4,fp
    d018:	000f4880 	call	f488 <_Balloc>
    d01c:	d8800115 	stw	r2,4(sp)
    d020:	1004e326 	beq	r2,zero,e3b0 <_dtoa_r+0x16a8>
    d024:	d8800117 	ldw	r2,4(sp)
    d028:	e0801015 	stw	r2,64(fp)
    d02c:	d8800317 	ldw	r2,12(sp)
    d030:	108003e8 	cmpgeui	r2,r2,15
    d034:	1001091e 	bne	r2,zero,d45c <_dtoa_r+0x754>
    d038:	80010826 	beq	r16,zero,d45c <_dtoa_r+0x754>
    d03c:	d9000617 	ldw	r4,24(sp)
    d040:	0103970e 	bge	zero,r4,dea0 <_dtoa_r+0x1198>
    d044:	208003cc 	andi	r2,r4,15
    d048:	100690fa 	slli	r3,r2,3
    d04c:	2029d13a 	srai	r20,r4,4
    d050:	00800074 	movhi	r2,1
    d054:	109ef804 	addi	r2,r2,31712
    d058:	10c5883a 	add	r2,r2,r3
    d05c:	a0c0040c 	andi	r3,r20,16
    d060:	12800017 	ldw	r10,0(r2)
    d064:	12400117 	ldw	r9,4(r2)
    d068:	18033c26 	beq	r3,zero,dd5c <_dtoa_r+0x1054>
    d06c:	00800074 	movhi	r2,1
    d070:	109eee04 	addi	r2,r2,31672
    d074:	11800817 	ldw	r6,32(r2)
    d078:	11c00917 	ldw	r7,36(r2)
    d07c:	9809883a 	mov	r4,r19
    d080:	880b883a 	mov	r5,r17
    d084:	da400e15 	stw	r9,56(sp)
    d088:	da800d15 	stw	r10,52(sp)
    d08c:	0007dac0 	call	7dac <__divdf3>
    d090:	da800d17 	ldw	r10,52(sp)
    d094:	da400e17 	ldw	r9,56(sp)
    d098:	a50003cc 	andi	r20,r20,15
    d09c:	d8800a15 	stw	r2,40(sp)
    d0a0:	d8c00c15 	stw	r3,48(sp)
    d0a4:	040000c4 	movi	r16,3
    d0a8:	a0001126 	beq	r20,zero,d0f0 <_dtoa_r+0x3e8>
    d0ac:	04800074 	movhi	r18,1
    d0b0:	949eee04 	addi	r18,r18,31672
    d0b4:	5009883a 	mov	r4,r10
    d0b8:	480b883a 	mov	r5,r9
    d0bc:	a180004c 	andi	r6,r20,1
    d0c0:	30000626 	beq	r6,zero,d0dc <_dtoa_r+0x3d4>
    d0c4:	91800017 	ldw	r6,0(r18)
    d0c8:	91c00117 	ldw	r7,4(r18)
    d0cc:	84000044 	addi	r16,r16,1
    d0d0:	00089100 	call	8910 <__muldf3>
    d0d4:	1009883a 	mov	r4,r2
    d0d8:	180b883a 	mov	r5,r3
    d0dc:	a029d07a 	srai	r20,r20,1
    d0e0:	94800204 	addi	r18,r18,8
    d0e4:	a03ff51e 	bne	r20,zero,d0bc <_dtoa_r+0x3b4>
    d0e8:	2015883a 	mov	r10,r4
    d0ec:	2813883a 	mov	r9,r5
    d0f0:	d9000a17 	ldw	r4,40(sp)
    d0f4:	d9400c17 	ldw	r5,48(sp)
    d0f8:	500d883a 	mov	r6,r10
    d0fc:	480f883a 	mov	r7,r9
    d100:	0007dac0 	call	7dac <__divdf3>
    d104:	d8800a15 	stw	r2,40(sp)
    d108:	1825883a 	mov	r18,r3
    d10c:	d8800817 	ldw	r2,32(sp)
    d110:	10000726 	beq	r2,zero,d130 <_dtoa_r+0x428>
    d114:	dd000a17 	ldw	r20,40(sp)
    d118:	000d883a 	mov	r6,zero
    d11c:	01cffc34 	movhi	r7,16368
    d120:	a009883a 	mov	r4,r20
    d124:	900b883a 	mov	r5,r18
    d128:	00088280 	call	8828 <__ledf2>
    d12c:	10044516 	blt	r2,zero,e244 <_dtoa_r+0x153c>
    d130:	8009883a 	mov	r4,r16
    d134:	0009a9c0 	call	9a9c <__floatsidf>
    d138:	d9800a17 	ldw	r6,40(sp)
    d13c:	900f883a 	mov	r7,r18
    d140:	1009883a 	mov	r4,r2
    d144:	180b883a 	mov	r5,r3
    d148:	00089100 	call	8910 <__muldf3>
    d14c:	000d883a 	mov	r6,zero
    d150:	01d00734 	movhi	r7,16412
    d154:	1009883a 	mov	r4,r2
    d158:	180b883a 	mov	r5,r3
    d15c:	00074bc0 	call	74bc <__adddf3>
    d160:	1029883a 	mov	r20,r2
    d164:	00bf3034 	movhi	r2,64704
    d168:	1885883a 	add	r2,r3,r2
    d16c:	d8800c15 	stw	r2,48(sp)
    d170:	d8800317 	ldw	r2,12(sp)
    d174:	10032d26 	beq	r2,zero,de2c <_dtoa_r+0x1124>
    d178:	d8800617 	ldw	r2,24(sp)
    d17c:	d8801015 	stw	r2,64(sp)
    d180:	d8800317 	ldw	r2,12(sp)
    d184:	d8800d15 	stw	r2,52(sp)
    d188:	d8800d17 	ldw	r2,52(sp)
    d18c:	dc000a17 	ldw	r16,40(sp)
    d190:	900b883a 	mov	r5,r18
    d194:	10bfffc4 	addi	r2,r2,-1
    d198:	100690fa 	slli	r3,r2,3
    d19c:	00800074 	movhi	r2,1
    d1a0:	109ef804 	addi	r2,r2,31712
    d1a4:	10c5883a 	add	r2,r2,r3
    d1a8:	12c00017 	ldw	r11,0(r2)
    d1ac:	13000117 	ldw	r12,4(r2)
    d1b0:	8009883a 	mov	r4,r16
    d1b4:	dac00e15 	stw	r11,56(sp)
    d1b8:	db000a15 	stw	r12,40(sp)
    d1bc:	0009a1c0 	call	9a1c <__fixdfsi>
    d1c0:	1009883a 	mov	r4,r2
    d1c4:	10800c04 	addi	r2,r2,48
    d1c8:	d8800f15 	stw	r2,60(sp)
    d1cc:	0009a9c0 	call	9a9c <__floatsidf>
    d1d0:	8009883a 	mov	r4,r16
    d1d4:	100d883a 	mov	r6,r2
    d1d8:	180f883a 	mov	r7,r3
    d1dc:	900b883a 	mov	r5,r18
    d1e0:	00090bc0 	call	90bc <__subdf3>
    d1e4:	d9000117 	ldw	r4,4(sp)
    d1e8:	dac00e17 	ldw	r11,56(sp)
    d1ec:	db000a17 	ldw	r12,40(sp)
    d1f0:	1825883a 	mov	r18,r3
    d1f4:	d8c00517 	ldw	r3,20(sp)
    d1f8:	22000044 	addi	r8,r4,1
    d1fc:	da000e15 	stw	r8,56(sp)
    d200:	1021883a 	mov	r16,r2
    d204:	580d883a 	mov	r6,r11
    d208:	600f883a 	mov	r7,r12
    d20c:	1803b226 	beq	r3,zero,e0d8 <_dtoa_r+0x13d0>
    d210:	0009883a 	mov	r4,zero
    d214:	014ff834 	movhi	r5,16352
    d218:	0007dac0 	call	7dac <__divdf3>
    d21c:	d9c00c17 	ldw	r7,48(sp)
    d220:	a00d883a 	mov	r6,r20
    d224:	1009883a 	mov	r4,r2
    d228:	180b883a 	mov	r5,r3
    d22c:	00090bc0 	call	90bc <__subdf3>
    d230:	d9000117 	ldw	r4,4(sp)
    d234:	1029883a 	mov	r20,r2
    d238:	d8800f17 	ldw	r2,60(sp)
    d23c:	800d883a 	mov	r6,r16
    d240:	900f883a 	mov	r7,r18
    d244:	20800005 	stb	r2,0(r4)
    d248:	180b883a 	mov	r5,r3
    d24c:	a009883a 	mov	r4,r20
    d250:	d8c00a15 	stw	r3,40(sp)
    d254:	00087400 	call	8740 <__gedf2>
    d258:	da000e17 	ldw	r8,56(sp)
    d25c:	0083e516 	blt	zero,r2,e1f4 <_dtoa_r+0x14ec>
    d260:	0005883a 	mov	r2,zero
    d264:	dd400e15 	stw	r21,56(sp)
    d268:	dd800f15 	stw	r22,60(sp)
    d26c:	ddc00c15 	stw	r23,48(sp)
    d270:	dd800d17 	ldw	r22,52(sp)
    d274:	402b883a 	mov	r21,r8
    d278:	dc400d15 	stw	r17,52(sp)
    d27c:	dc400a17 	ldw	r17,40(sp)
    d280:	dcc00a15 	stw	r19,40(sp)
    d284:	1027883a 	mov	r19,r2
    d288:	00002606 	br	d324 <_dtoa_r+0x61c>
    d28c:	9cc00044 	addi	r19,r19,1
    d290:	9d806d0e 	bge	r19,r22,d448 <_dtoa_r+0x740>
    d294:	a009883a 	mov	r4,r20
    d298:	880b883a 	mov	r5,r17
    d29c:	000d883a 	mov	r6,zero
    d2a0:	01d00934 	movhi	r7,16420
    d2a4:	00089100 	call	8910 <__muldf3>
    d2a8:	000d883a 	mov	r6,zero
    d2ac:	01d00934 	movhi	r7,16420
    d2b0:	8009883a 	mov	r4,r16
    d2b4:	900b883a 	mov	r5,r18
    d2b8:	1029883a 	mov	r20,r2
    d2bc:	1823883a 	mov	r17,r3
    d2c0:	00089100 	call	8910 <__muldf3>
    d2c4:	180b883a 	mov	r5,r3
    d2c8:	1009883a 	mov	r4,r2
    d2cc:	1821883a 	mov	r16,r3
    d2d0:	1025883a 	mov	r18,r2
    d2d4:	0009a1c0 	call	9a1c <__fixdfsi>
    d2d8:	1009883a 	mov	r4,r2
    d2dc:	102f883a 	mov	r23,r2
    d2e0:	0009a9c0 	call	9a9c <__floatsidf>
    d2e4:	9009883a 	mov	r4,r18
    d2e8:	800b883a 	mov	r5,r16
    d2ec:	100d883a 	mov	r6,r2
    d2f0:	180f883a 	mov	r7,r3
    d2f4:	00090bc0 	call	90bc <__subdf3>
    d2f8:	ad400044 	addi	r21,r21,1
    d2fc:	ba000c04 	addi	r8,r23,48
    d300:	aa3fffc5 	stb	r8,-1(r21)
    d304:	a00d883a 	mov	r6,r20
    d308:	880f883a 	mov	r7,r17
    d30c:	1009883a 	mov	r4,r2
    d310:	180b883a 	mov	r5,r3
    d314:	1021883a 	mov	r16,r2
    d318:	1825883a 	mov	r18,r3
    d31c:	00088280 	call	8828 <__ledf2>
    d320:	10040516 	blt	r2,zero,e338 <_dtoa_r+0x1630>
    d324:	800d883a 	mov	r6,r16
    d328:	900f883a 	mov	r7,r18
    d32c:	0009883a 	mov	r4,zero
    d330:	014ffc34 	movhi	r5,16368
    d334:	00090bc0 	call	90bc <__subdf3>
    d338:	a00d883a 	mov	r6,r20
    d33c:	880f883a 	mov	r7,r17
    d340:	1009883a 	mov	r4,r2
    d344:	180b883a 	mov	r5,r3
    d348:	00088280 	call	8828 <__ledf2>
    d34c:	103fcf0e 	bge	r2,zero,d28c <_dtoa_r+0x584>
    d350:	d8801017 	ldw	r2,64(sp)
    d354:	ddc00c17 	ldw	r23,48(sp)
    d358:	d9000117 	ldw	r4,4(sp)
    d35c:	a829883a 	mov	r20,r21
    d360:	14c00044 	addi	r19,r2,1
    d364:	00000106 	br	d36c <_dtoa_r+0x664>
    d368:	a103d826 	beq	r20,r4,e2cc <_dtoa_r+0x15c4>
    d36c:	a0ffffc3 	ldbu	r3,-1(r20)
    d370:	a011883a 	mov	r8,r20
    d374:	a53fffc4 	addi	r20,r20,-1
    d378:	18803fcc 	andi	r2,r3,255
    d37c:	1080201c 	xori	r2,r2,128
    d380:	10bfe004 	addi	r2,r2,-128
    d384:	10800e60 	cmpeqi	r2,r2,57
    d388:	103ff71e 	bne	r2,zero,d368 <_dtoa_r+0x660>
    d38c:	18c00044 	addi	r3,r3,1
    d390:	a0c00005 	stb	r3,0(r20)
    d394:	dcc00215 	stw	r19,8(sp)
    d398:	00014406 	br	d8ac <_dtoa_r+0xba4>
    d39c:	04600034 	movhi	r17,32768
    d3a0:	8c7fffc4 	addi	r17,r17,-1
    d3a4:	9462703a 	and	r17,r18,r17
    d3a8:	00800044 	movi	r2,1
    d3ac:	8825883a 	mov	r18,r17
    d3b0:	80800015 	stw	r2,0(r16)
    d3b4:	00dffc34 	movhi	r3,32752
    d3b8:	909ffc2c 	andhi	r2,r18,32752
    d3bc:	10fe721e 	bne	r2,r3,cd88 <_dtoa_r+0x80>
    d3c0:	d9001e17 	ldw	r4,120(sp)
    d3c4:	00800434 	movhi	r2,16
    d3c8:	10bfffc4 	addi	r2,r2,-1
    d3cc:	9084703a 	and	r2,r18,r2
    d3d0:	00c9c3c4 	movi	r3,9999
    d3d4:	20c00015 	stw	r3,0(r4)
    d3d8:	14e6b03a 	or	r19,r2,r19
    d3dc:	9800141e 	bne	r19,zero,d430 <_dtoa_r+0x728>
    d3e0:	d8802017 	ldw	r2,128(sp)
    d3e4:	10041126 	beq	r2,zero,e42c <_dtoa_r+0x1724>
    d3e8:	00800074 	movhi	r2,1
    d3ec:	1007883a 	mov	r3,r2
    d3f0:	18deb904 	addi	r3,r3,31460
    d3f4:	00800074 	movhi	r2,1
    d3f8:	d8c00115 	stw	r3,4(sp)
    d3fc:	109ebb04 	addi	r2,r2,31468
    d400:	d8c02017 	ldw	r3,128(sp)
    d404:	18800015 	stw	r2,0(r3)
    d408:	003e7106 	br	cdd0 <_dtoa_r+0xc8>
    d40c:	01400434 	movhi	r5,16
    d410:	297fffc4 	addi	r5,r5,-1
    d414:	894a703a 	and	r5,r17,r5
    d418:	dd001117 	ldw	r20,68(sp)
    d41c:	9809883a 	mov	r4,r19
    d420:	294ffc34 	orhi	r5,r5,16368
    d424:	843f0044 	addi	r16,r16,-1023
    d428:	d8000915 	stw	zero,36(sp)
    d42c:	003e9206 	br	ce78 <_dtoa_r+0x170>
    d430:	d8802017 	ldw	r2,128(sp)
    d434:	1002061e 	bne	r2,zero,dc50 <_dtoa_r+0xf48>
    d438:	00800074 	movhi	r2,1
    d43c:	109eb804 	addi	r2,r2,31456
    d440:	d8800115 	stw	r2,4(sp)
    d444:	003e6206 	br	cdd0 <_dtoa_r+0xc8>
    d448:	dd400e17 	ldw	r21,56(sp)
    d44c:	dd800f17 	ldw	r22,60(sp)
    d450:	ddc00c17 	ldw	r23,48(sp)
    d454:	dc400d17 	ldw	r17,52(sp)
    d458:	dcc00a17 	ldw	r19,40(sp)
    d45c:	d8801217 	ldw	r2,72(sp)
    d460:	10006e16 	blt	r2,zero,d61c <_dtoa_r+0x914>
    d464:	d9000617 	ldw	r4,24(sp)
    d468:	20c003c8 	cmpgei	r3,r4,15
    d46c:	18006b1e 	bne	r3,zero,d61c <_dtoa_r+0x914>
    d470:	200690fa 	slli	r3,r4,3
    d474:	00800074 	movhi	r2,1
    d478:	109ef804 	addi	r2,r2,31712
    d47c:	10c5883a 	add	r2,r2,r3
    d480:	14000017 	ldw	r16,0(r2)
    d484:	14800117 	ldw	r18,4(r2)
    d488:	d8801d17 	ldw	r2,116(sp)
    d48c:	1000150e 	bge	r2,zero,d4e4 <_dtoa_r+0x7dc>
    d490:	d8800317 	ldw	r2,12(sp)
    d494:	00801316 	blt	zero,r2,d4e4 <_dtoa_r+0x7dc>
    d498:	d8800317 	ldw	r2,12(sp)
    d49c:	1002771e 	bne	r2,zero,de7c <_dtoa_r+0x1174>
    d4a0:	8009883a 	mov	r4,r16
    d4a4:	000d883a 	mov	r6,zero
    d4a8:	01d00534 	movhi	r7,16404
    d4ac:	900b883a 	mov	r5,r18
    d4b0:	00089100 	call	8910 <__muldf3>
    d4b4:	100d883a 	mov	r6,r2
    d4b8:	180f883a 	mov	r7,r3
    d4bc:	9809883a 	mov	r4,r19
    d4c0:	880b883a 	mov	r5,r17
    d4c4:	00088280 	call	8828 <__ledf2>
    d4c8:	0029883a 	mov	r20,zero
    d4cc:	0021883a 	mov	r16,zero
    d4d0:	00820916 	blt	zero,r2,dcf8 <_dtoa_r+0xff0>
    d4d4:	d8801d17 	ldw	r2,116(sp)
    d4d8:	da000117 	ldw	r8,4(sp)
    d4dc:	00a6303a 	nor	r19,zero,r2
    d4e0:	00020b06 	br	dd10 <_dtoa_r+0x1008>
    d4e4:	800d883a 	mov	r6,r16
    d4e8:	900f883a 	mov	r7,r18
    d4ec:	9809883a 	mov	r4,r19
    d4f0:	880b883a 	mov	r5,r17
    d4f4:	0007dac0 	call	7dac <__divdf3>
    d4f8:	180b883a 	mov	r5,r3
    d4fc:	1009883a 	mov	r4,r2
    d500:	0009a1c0 	call	9a1c <__fixdfsi>
    d504:	1009883a 	mov	r4,r2
    d508:	102b883a 	mov	r21,r2
    d50c:	0009a9c0 	call	9a9c <__floatsidf>
    d510:	800d883a 	mov	r6,r16
    d514:	900f883a 	mov	r7,r18
    d518:	1009883a 	mov	r4,r2
    d51c:	180b883a 	mov	r5,r3
    d520:	00089100 	call	8910 <__muldf3>
    d524:	100d883a 	mov	r6,r2
    d528:	9809883a 	mov	r4,r19
    d52c:	880b883a 	mov	r5,r17
    d530:	180f883a 	mov	r7,r3
    d534:	00090bc0 	call	90bc <__subdf3>
    d538:	d9800117 	ldw	r6,4(sp)
    d53c:	dd800317 	ldw	r22,12(sp)
    d540:	1009883a 	mov	r4,r2
    d544:	a8800c04 	addi	r2,r21,48
    d548:	30800005 	stb	r2,0(r6)
    d54c:	b0800060 	cmpeqi	r2,r22,1
    d550:	180b883a 	mov	r5,r3
    d554:	35000044 	addi	r20,r6,1
    d558:	10029c1e 	bne	r2,zero,dfcc <_dtoa_r+0x12c4>
    d55c:	04400044 	movi	r17,1
    d560:	ddc00215 	stw	r23,8(sp)
    d564:	00001c06 	br	d5d8 <_dtoa_r+0x8d0>
    d568:	800d883a 	mov	r6,r16
    d56c:	900f883a 	mov	r7,r18
    d570:	a809883a 	mov	r4,r21
    d574:	980b883a 	mov	r5,r19
    d578:	0007dac0 	call	7dac <__divdf3>
    d57c:	180b883a 	mov	r5,r3
    d580:	1009883a 	mov	r4,r2
    d584:	0009a1c0 	call	9a1c <__fixdfsi>
    d588:	1009883a 	mov	r4,r2
    d58c:	102f883a 	mov	r23,r2
    d590:	0009a9c0 	call	9a9c <__floatsidf>
    d594:	800d883a 	mov	r6,r16
    d598:	900f883a 	mov	r7,r18
    d59c:	1009883a 	mov	r4,r2
    d5a0:	180b883a 	mov	r5,r3
    d5a4:	00089100 	call	8910 <__muldf3>
    d5a8:	a809883a 	mov	r4,r21
    d5ac:	980b883a 	mov	r5,r19
    d5b0:	100d883a 	mov	r6,r2
    d5b4:	180f883a 	mov	r7,r3
    d5b8:	00090bc0 	call	90bc <__subdf3>
    d5bc:	b9000c04 	addi	r4,r23,48
    d5c0:	a1000005 	stb	r4,0(r20)
    d5c4:	8c400044 	addi	r17,r17,1
    d5c8:	a5000044 	addi	r20,r20,1
    d5cc:	1009883a 	mov	r4,r2
    d5d0:	180b883a 	mov	r5,r3
    d5d4:	b4427b26 	beq	r22,r17,dfc4 <_dtoa_r+0x12bc>
    d5d8:	000d883a 	mov	r6,zero
    d5dc:	01d00934 	movhi	r7,16420
    d5e0:	00089100 	call	8910 <__muldf3>
    d5e4:	000d883a 	mov	r6,zero
    d5e8:	000f883a 	mov	r7,zero
    d5ec:	1009883a 	mov	r4,r2
    d5f0:	180b883a 	mov	r5,r3
    d5f4:	102b883a 	mov	r21,r2
    d5f8:	1827883a 	mov	r19,r3
    d5fc:	00086c00 	call	86c0 <__eqdf2>
    d600:	103fd91e 	bne	r2,zero,d568 <_dtoa_r+0x860>
    d604:	d8800617 	ldw	r2,24(sp)
    d608:	ddc00217 	ldw	r23,8(sp)
    d60c:	a011883a 	mov	r8,r20
    d610:	10800044 	addi	r2,r2,1
    d614:	d8800215 	stw	r2,8(sp)
    d618:	0000a406 	br	d8ac <_dtoa_r+0xba4>
    d61c:	d8c00517 	ldw	r3,20(sp)
    d620:	1800e726 	beq	r3,zero,d9c0 <_dtoa_r+0xcb8>
    d624:	d8c00217 	ldw	r3,8(sp)
    d628:	18c00088 	cmpgei	r3,r3,2
    d62c:	1801e526 	beq	r3,zero,ddc4 <_dtoa_r+0x10bc>
    d630:	d8800317 	ldw	r2,12(sp)
    d634:	153fffc4 	addi	r20,r2,-1
    d638:	d8800717 	ldw	r2,28(sp)
    d63c:	1501c50e 	bge	r2,r20,dd54 <_dtoa_r+0x104c>
    d640:	d8800717 	ldw	r2,28(sp)
    d644:	dd000715 	stw	r20,28(sp)
    d648:	a085c83a 	sub	r2,r20,r2
    d64c:	a8ab883a 	add	r21,r21,r2
    d650:	0029883a 	mov	r20,zero
    d654:	d8800317 	ldw	r2,12(sp)
    d658:	10028b16 	blt	r2,zero,e088 <_dtoa_r+0x1380>
    d65c:	d8c00417 	ldw	r3,16(sp)
    d660:	b0ad883a 	add	r22,r22,r2
    d664:	1885883a 	add	r2,r3,r2
    d668:	1825883a 	mov	r18,r3
    d66c:	d8800415 	stw	r2,16(sp)
    d670:	01400044 	movi	r5,1
    d674:	e009883a 	mov	r4,fp
    d678:	000f8f80 	call	f8f8 <__i2b>
    d67c:	1021883a 	mov	r16,r2
    d680:	0480080e 	bge	zero,r18,d6a4 <_dtoa_r+0x99c>
    d684:	0580070e 	bge	zero,r22,d6a4 <_dtoa_r+0x99c>
    d688:	9005883a 	mov	r2,r18
    d68c:	b481a916 	blt	r22,r18,dd34 <_dtoa_r+0x102c>
    d690:	d8c00417 	ldw	r3,16(sp)
    d694:	90a5c83a 	sub	r18,r18,r2
    d698:	b0adc83a 	sub	r22,r22,r2
    d69c:	1887c83a 	sub	r3,r3,r2
    d6a0:	d8c00415 	stw	r3,16(sp)
    d6a4:	d8800717 	ldw	r2,28(sp)
    d6a8:	10001526 	beq	r2,zero,d700 <_dtoa_r+0x9f8>
    d6ac:	d8800517 	ldw	r2,20(sp)
    d6b0:	1001f526 	beq	r2,zero,de88 <_dtoa_r+0x1180>
    d6b4:	05000f0e 	bge	zero,r20,d6f4 <_dtoa_r+0x9ec>
    d6b8:	800b883a 	mov	r5,r16
    d6bc:	a00d883a 	mov	r6,r20
    d6c0:	e009883a 	mov	r4,fp
    d6c4:	000fc6c0 	call	fc6c <__pow5mult>
    d6c8:	b80d883a 	mov	r6,r23
    d6cc:	100b883a 	mov	r5,r2
    d6d0:	e009883a 	mov	r4,fp
    d6d4:	1021883a 	mov	r16,r2
    d6d8:	000f9a80 	call	f9a8 <__multiply>
    d6dc:	b80b883a 	mov	r5,r23
    d6e0:	e009883a 	mov	r4,fp
    d6e4:	d8800915 	stw	r2,36(sp)
    d6e8:	000f52c0 	call	f52c <_Bfree>
    d6ec:	d8800917 	ldw	r2,36(sp)
    d6f0:	102f883a 	mov	r23,r2
    d6f4:	d8800717 	ldw	r2,28(sp)
    d6f8:	150dc83a 	sub	r6,r2,r20
    d6fc:	15025d1e 	bne	r2,r20,e074 <_dtoa_r+0x136c>
    d700:	01400044 	movi	r5,1
    d704:	e009883a 	mov	r4,fp
    d708:	000f8f80 	call	f8f8 <__i2b>
    d70c:	1029883a 	mov	r20,r2
    d710:	0540bd16 	blt	zero,r21,da08 <_dtoa_r+0xd00>
    d714:	d8800217 	ldw	r2,8(sp)
    d718:	10800088 	cmpgei	r2,r2,2
    d71c:	10015626 	beq	r2,zero,dc78 <_dtoa_r+0xf70>
    d720:	0023883a 	mov	r17,zero
    d724:	00800044 	movi	r2,1
    d728:	a800c01e 	bne	r21,zero,da2c <_dtoa_r+0xd24>
    d72c:	1585883a 	add	r2,r2,r22
    d730:	108007cc 	andi	r2,r2,31
    d734:	1000ac26 	beq	r2,zero,d9e8 <_dtoa_r+0xce0>
    d738:	00c00804 	movi	r3,32
    d73c:	1887c83a 	sub	r3,r3,r2
    d740:	19000150 	cmplti	r4,r3,5
    d744:	20033d1e 	bne	r4,zero,e43c <_dtoa_r+0x1734>
    d748:	00c00704 	movi	r3,28
    d74c:	1885c83a 	sub	r2,r3,r2
    d750:	d8c00417 	ldw	r3,16(sp)
    d754:	90a5883a 	add	r18,r18,r2
    d758:	b0ad883a 	add	r22,r22,r2
    d75c:	1887883a 	add	r3,r3,r2
    d760:	d8c00415 	stw	r3,16(sp)
    d764:	d8800417 	ldw	r2,16(sp)
    d768:	00809916 	blt	zero,r2,d9d0 <_dtoa_r+0xcc8>
    d76c:	0580050e 	bge	zero,r22,d784 <_dtoa_r+0xa7c>
    d770:	a00b883a 	mov	r5,r20
    d774:	b00d883a 	mov	r6,r22
    d778:	e009883a 	mov	r4,fp
    d77c:	000fdb40 	call	fdb4 <__lshift>
    d780:	1029883a 	mov	r20,r2
    d784:	d8800817 	ldw	r2,32(sp)
    d788:	10011d1e 	bne	r2,zero,dc00 <_dtoa_r+0xef8>
    d78c:	d8800317 	ldw	r2,12(sp)
    d790:	00810a0e 	bge	zero,r2,dbbc <_dtoa_r+0xeb4>
    d794:	d8800517 	ldw	r2,20(sp)
    d798:	1000b71e 	bne	r2,zero,da78 <_dtoa_r+0xd70>
    d79c:	d8800617 	ldw	r2,24(sp)
    d7a0:	10800044 	addi	r2,r2,1
    d7a4:	d8800215 	stw	r2,8(sp)
    d7a8:	dc800317 	ldw	r18,12(sp)
    d7ac:	dd400117 	ldw	r21,4(sp)
    d7b0:	04400044 	movi	r17,1
    d7b4:	00000706 	br	d7d4 <_dtoa_r+0xacc>
    d7b8:	b80b883a 	mov	r5,r23
    d7bc:	000f883a 	mov	r7,zero
    d7c0:	01800284 	movi	r6,10
    d7c4:	e009883a 	mov	r4,fp
    d7c8:	000f5500 	call	f550 <__multadd>
    d7cc:	102f883a 	mov	r23,r2
    d7d0:	8c400044 	addi	r17,r17,1
    d7d4:	a00b883a 	mov	r5,r20
    d7d8:	b809883a 	mov	r4,r23
    d7dc:	000cae80 	call	cae8 <quorem>
    d7e0:	14c00c04 	addi	r19,r2,48
    d7e4:	ac45883a 	add	r2,r21,r17
    d7e8:	14ffffc5 	stb	r19,-1(r2)
    d7ec:	8cbff216 	blt	r17,r18,d7b8 <_dtoa_r+0xab0>
    d7f0:	d8800317 	ldw	r2,12(sp)
    d7f4:	00815d0e 	bge	zero,r2,dd6c <_dtoa_r+0x1064>
    d7f8:	d8c00117 	ldw	r3,4(sp)
    d7fc:	0023883a 	mov	r17,zero
    d800:	1891883a 	add	r8,r3,r2
    d804:	b80b883a 	mov	r5,r23
    d808:	01800044 	movi	r6,1
    d80c:	e009883a 	mov	r4,fp
    d810:	da000315 	stw	r8,12(sp)
    d814:	000fdb40 	call	fdb4 <__lshift>
    d818:	a00b883a 	mov	r5,r20
    d81c:	1009883a 	mov	r4,r2
    d820:	102f883a 	mov	r23,r2
    d824:	000ff3c0 	call	ff3c <__mcmp>
    d828:	da000317 	ldw	r8,12(sp)
    d82c:	0081540e 	bge	zero,r2,dd80 <_dtoa_r+0x1078>
    d830:	413fffc3 	ldbu	r4,-1(r8)
    d834:	d9400117 	ldw	r5,4(sp)
    d838:	00000306 	br	d848 <_dtoa_r+0xb40>
    d83c:	28c15a26 	beq	r5,r3,dda8 <_dtoa_r+0x10a0>
    d840:	193fffc3 	ldbu	r4,-1(r3)
    d844:	1811883a 	mov	r8,r3
    d848:	20803fcc 	andi	r2,r4,255
    d84c:	1080201c 	xori	r2,r2,128
    d850:	10bfe004 	addi	r2,r2,-128
    d854:	10800e60 	cmpeqi	r2,r2,57
    d858:	40ffffc4 	addi	r3,r8,-1
    d85c:	103ff71e 	bne	r2,zero,d83c <_dtoa_r+0xb34>
    d860:	21000044 	addi	r4,r4,1
    d864:	19000005 	stb	r4,0(r3)
    d868:	a00b883a 	mov	r5,r20
    d86c:	e009883a 	mov	r4,fp
    d870:	da000315 	stw	r8,12(sp)
    d874:	000f52c0 	call	f52c <_Bfree>
    d878:	da000317 	ldw	r8,12(sp)
    d87c:	80000b26 	beq	r16,zero,d8ac <_dtoa_r+0xba4>
    d880:	88000526 	beq	r17,zero,d898 <_dtoa_r+0xb90>
    d884:	8c000426 	beq	r17,r16,d898 <_dtoa_r+0xb90>
    d888:	880b883a 	mov	r5,r17
    d88c:	e009883a 	mov	r4,fp
    d890:	000f52c0 	call	f52c <_Bfree>
    d894:	da000317 	ldw	r8,12(sp)
    d898:	800b883a 	mov	r5,r16
    d89c:	e009883a 	mov	r4,fp
    d8a0:	da000315 	stw	r8,12(sp)
    d8a4:	000f52c0 	call	f52c <_Bfree>
    d8a8:	da000317 	ldw	r8,12(sp)
    d8ac:	b80b883a 	mov	r5,r23
    d8b0:	e009883a 	mov	r4,fp
    d8b4:	da000315 	stw	r8,12(sp)
    d8b8:	000f52c0 	call	f52c <_Bfree>
    d8bc:	da000317 	ldw	r8,12(sp)
    d8c0:	d8801e17 	ldw	r2,120(sp)
    d8c4:	d8c00217 	ldw	r3,8(sp)
    d8c8:	40000005 	stb	zero,0(r8)
    d8cc:	10c00015 	stw	r3,0(r2)
    d8d0:	d8802017 	ldw	r2,128(sp)
    d8d4:	103d3e26 	beq	r2,zero,cdd0 <_dtoa_r+0xc8>
    d8d8:	12000015 	stw	r8,0(r2)
    d8dc:	003d3c06 	br	cdd0 <_dtoa_r+0xc8>
    d8e0:	d8000815 	stw	zero,32(sp)
    d8e4:	b0002316 	blt	r22,zero,d974 <_dtoa_r+0xc6c>
    d8e8:	d8000415 	stw	zero,16(sp)
    d8ec:	d8c00217 	ldw	r3,8(sp)
    d8f0:	dd400615 	stw	r21,24(sp)
    d8f4:	d8000715 	stw	zero,28(sp)
    d8f8:	188002a8 	cmpgeui	r2,r3,10
    d8fc:	b56d883a 	add	r22,r22,r21
    d900:	103da726 	beq	r2,zero,cfa0 <_dtoa_r+0x298>
    d904:	00800044 	movi	r2,1
    d908:	d8800515 	stw	r2,20(sp)
    d90c:	00bfffc4 	movi	r2,-1
    d910:	04000044 	movi	r16,1
    d914:	d8000215 	stw	zero,8(sp)
    d918:	d8800315 	stw	r2,12(sp)
    d91c:	d8001d15 	stw	zero,116(sp)
    d920:	d8800317 	ldw	r2,12(sp)
    d924:	e0001115 	stw	zero,68(fp)
    d928:	000b883a 	mov	r5,zero
    d92c:	d8800b15 	stw	r2,44(sp)
    d930:	003db806 	br	d014 <_dtoa_r+0x30c>
    d934:	188000e0 	cmpeqi	r2,r3,3
    d938:	d8000515 	stw	zero,20(sp)
    d93c:	1002a526 	beq	r2,zero,e3d4 <_dtoa_r+0x16cc>
    d940:	d8801d17 	ldw	r2,116(sp)
    d944:	d8c00617 	ldw	r3,24(sp)
    d948:	10c5883a 	add	r2,r2,r3
    d94c:	d8800b15 	stw	r2,44(sp)
    d950:	10800044 	addi	r2,r2,1
    d954:	d8800315 	stw	r2,12(sp)
    d958:	100d883a 	mov	r6,r2
    d95c:	00bda216 	blt	zero,r2,cfe8 <_dtoa_r+0x2e0>
    d960:	01800044 	movi	r6,1
    d964:	003da006 	br	cfe8 <_dtoa_r+0x2e0>
    d968:	00800044 	movi	r2,1
    d96c:	d8800815 	stw	r2,32(sp)
    d970:	b03d7f0e 	bge	r22,zero,cf70 <_dtoa_r+0x268>
    d974:	00800044 	movi	r2,1
    d978:	1405c83a 	sub	r2,r2,r16
    d97c:	d8800415 	stw	r2,16(sp)
    d980:	002d883a 	mov	r22,zero
    d984:	003d7b06 	br	cf74 <_dtoa_r+0x26c>
    d988:	a809883a 	mov	r4,r21
    d98c:	0009a9c0 	call	9a9c <__floatsidf>
    d990:	900d883a 	mov	r6,r18
    d994:	b00f883a 	mov	r7,r22
    d998:	1009883a 	mov	r4,r2
    d99c:	180b883a 	mov	r5,r3
    d9a0:	00086c00 	call	86c0 <__eqdf2>
    d9a4:	103d6126 	beq	r2,zero,cf2c <_dtoa_r+0x224>
    d9a8:	ad7fffc4 	addi	r21,r21,-1
    d9ac:	003d5f06 	br	cf2c <_dtoa_r+0x224>
    d9b0:	00800074 	movhi	r2,1
    d9b4:	109eaf04 	addi	r2,r2,31420
    d9b8:	d8800115 	stw	r2,4(sp)
    d9bc:	003d0406 	br	cdd0 <_dtoa_r+0xc8>
    d9c0:	dd000717 	ldw	r20,28(sp)
    d9c4:	dc800417 	ldw	r18,16(sp)
    d9c8:	0021883a 	mov	r16,zero
    d9cc:	003f2c06 	br	d680 <_dtoa_r+0x978>
    d9d0:	b80b883a 	mov	r5,r23
    d9d4:	100d883a 	mov	r6,r2
    d9d8:	e009883a 	mov	r4,fp
    d9dc:	000fdb40 	call	fdb4 <__lshift>
    d9e0:	102f883a 	mov	r23,r2
    d9e4:	003f6106 	br	d76c <_dtoa_r+0xa64>
    d9e8:	00800704 	movi	r2,28
    d9ec:	003f5806 	br	d750 <_dtoa_r+0xa48>
    d9f0:	01000804 	movi	r4,32
    d9f4:	2089c83a 	sub	r4,r4,r2
    d9f8:	9908983a 	sll	r4,r19,r4
    d9fc:	003d1706 	br	ce5c <_dtoa_r+0x154>
    da00:	04000044 	movi	r16,1
    da04:	003d6b06 	br	cfb4 <_dtoa_r+0x2ac>
    da08:	100b883a 	mov	r5,r2
    da0c:	a80d883a 	mov	r6,r21
    da10:	e009883a 	mov	r4,fp
    da14:	000fc6c0 	call	fc6c <__pow5mult>
    da18:	d8c00217 	ldw	r3,8(sp)
    da1c:	1029883a 	mov	r20,r2
    da20:	18c00090 	cmplti	r3,r3,2
    da24:	18014b1e 	bne	r3,zero,df54 <_dtoa_r+0x124c>
    da28:	0023883a 	mov	r17,zero
    da2c:	a0800417 	ldw	r2,16(r20)
    da30:	10800104 	addi	r2,r2,4
    da34:	100490ba 	slli	r2,r2,2
    da38:	a085883a 	add	r2,r20,r2
    da3c:	11000017 	ldw	r4,0(r2)
    da40:	000f7e40 	call	f7e4 <__hi0bits>
    da44:	00c00804 	movi	r3,32
    da48:	1885c83a 	sub	r2,r3,r2
    da4c:	003f3706 	br	d72c <_dtoa_r+0xa24>
    da50:	800b883a 	mov	r5,r16
    da54:	000f883a 	mov	r7,zero
    da58:	01800284 	movi	r6,10
    da5c:	e009883a 	mov	r4,fp
    da60:	000f5500 	call	f550 <__multadd>
    da64:	1021883a 	mov	r16,r2
    da68:	d8800b17 	ldw	r2,44(sp)
    da6c:	0082460e 	bge	zero,r2,e388 <_dtoa_r+0x1680>
    da70:	dd400615 	stw	r21,24(sp)
    da74:	d8800315 	stw	r2,12(sp)
    da78:	0480b016 	blt	zero,r18,dd3c <_dtoa_r+0x1034>
    da7c:	88016c1e 	bne	r17,zero,e030 <_dtoa_r+0x1328>
    da80:	8025883a 	mov	r18,r16
    da84:	dd800117 	ldw	r22,4(sp)
    da88:	d9000317 	ldw	r4,12(sp)
    da8c:	98c0004c 	andi	r3,r19,1
    da90:	b0bfffc4 	addi	r2,r22,-1
    da94:	1105883a 	add	r2,r2,r4
    da98:	d8800515 	stw	r2,20(sp)
    da9c:	d8800217 	ldw	r2,8(sp)
    daa0:	d8c00815 	stw	r3,32(sp)
    daa4:	1884b03a 	or	r2,r3,r2
    daa8:	d8800715 	stw	r2,28(sp)
    daac:	00002b06 	br	db5c <_dtoa_r+0xe54>
    dab0:	b809883a 	mov	r4,r23
    dab4:	d9400415 	stw	r5,16(sp)
    dab8:	000ff3c0 	call	ff3c <__mcmp>
    dabc:	d9400417 	ldw	r5,16(sp)
    dac0:	e009883a 	mov	r4,fp
    dac4:	d8800315 	stw	r2,12(sp)
    dac8:	000f52c0 	call	f52c <_Bfree>
    dacc:	d8800317 	ldw	r2,12(sp)
    dad0:	1000021e 	bne	r2,zero,dadc <_dtoa_r+0xdd4>
    dad4:	d8c00717 	ldw	r3,28(sp)
    dad8:	18021d26 	beq	r3,zero,e350 <_dtoa_r+0x1648>
    dadc:	b2000044 	addi	r8,r22,1
    dae0:	da000315 	stw	r8,12(sp)
    dae4:	88012116 	blt	r17,zero,df6c <_dtoa_r+0x1264>
    dae8:	d8c00217 	ldw	r3,8(sp)
    daec:	88e2b03a 	or	r17,r17,r3
    daf0:	d8c00817 	ldw	r3,32(sp)
    daf4:	1c62b03a 	or	r17,r3,r17
    daf8:	88011c26 	beq	r17,zero,df6c <_dtoa_r+0x1264>
    dafc:	00816616 	blt	zero,r2,e098 <_dtoa_r+0x1390>
    db00:	d8800517 	ldw	r2,20(sp)
    db04:	b4c00005 	stb	r19,0(r22)
    db08:	15816d26 	beq	r2,r22,e0c0 <_dtoa_r+0x13b8>
    db0c:	b80b883a 	mov	r5,r23
    db10:	000f883a 	mov	r7,zero
    db14:	01800284 	movi	r6,10
    db18:	e009883a 	mov	r4,fp
    db1c:	000f5500 	call	f550 <__multadd>
    db20:	102f883a 	mov	r23,r2
    db24:	800b883a 	mov	r5,r16
    db28:	000f883a 	mov	r7,zero
    db2c:	01800284 	movi	r6,10
    db30:	e009883a 	mov	r4,fp
    db34:	84801d26 	beq	r16,r18,dbac <_dtoa_r+0xea4>
    db38:	000f5500 	call	f550 <__multadd>
    db3c:	900b883a 	mov	r5,r18
    db40:	000f883a 	mov	r7,zero
    db44:	01800284 	movi	r6,10
    db48:	e009883a 	mov	r4,fp
    db4c:	1021883a 	mov	r16,r2
    db50:	000f5500 	call	f550 <__multadd>
    db54:	1025883a 	mov	r18,r2
    db58:	dd800317 	ldw	r22,12(sp)
    db5c:	a00b883a 	mov	r5,r20
    db60:	b809883a 	mov	r4,r23
    db64:	000cae80 	call	cae8 <quorem>
    db68:	800b883a 	mov	r5,r16
    db6c:	b809883a 	mov	r4,r23
    db70:	102b883a 	mov	r21,r2
    db74:	000ff3c0 	call	ff3c <__mcmp>
    db78:	a00b883a 	mov	r5,r20
    db7c:	900d883a 	mov	r6,r18
    db80:	e009883a 	mov	r4,fp
    db84:	1023883a 	mov	r17,r2
    db88:	000ff940 	call	ff94 <__mdiff>
    db8c:	100b883a 	mov	r5,r2
    db90:	10800317 	ldw	r2,12(r2)
    db94:	acc00c04 	addi	r19,r21,48
    db98:	103fc526 	beq	r2,zero,dab0 <_dtoa_r+0xda8>
    db9c:	e009883a 	mov	r4,fp
    dba0:	000f52c0 	call	f52c <_Bfree>
    dba4:	00800044 	movi	r2,1
    dba8:	003fcc06 	br	dadc <_dtoa_r+0xdd4>
    dbac:	000f5500 	call	f550 <__multadd>
    dbb0:	1021883a 	mov	r16,r2
    dbb4:	1025883a 	mov	r18,r2
    dbb8:	003fe706 	br	db58 <_dtoa_r+0xe50>
    dbbc:	d8800217 	ldw	r2,8(sp)
    dbc0:	108000d0 	cmplti	r2,r2,3
    dbc4:	10004026 	beq	r2,zero,dcc8 <_dtoa_r+0xfc0>
    dbc8:	d8800517 	ldw	r2,20(sp)
    dbcc:	103faa1e 	bne	r2,zero,da78 <_dtoa_r+0xd70>
    dbd0:	a00b883a 	mov	r5,r20
    dbd4:	b809883a 	mov	r4,r23
    dbd8:	000cae80 	call	cae8 <quorem>
    dbdc:	14c00c04 	addi	r19,r2,48
    dbe0:	d8800117 	ldw	r2,4(sp)
    dbe4:	0023883a 	mov	r17,zero
    dbe8:	12000044 	addi	r8,r2,1
    dbec:	14c00005 	stb	r19,0(r2)
    dbf0:	d8800617 	ldw	r2,24(sp)
    dbf4:	10800044 	addi	r2,r2,1
    dbf8:	d8800215 	stw	r2,8(sp)
    dbfc:	003f0106 	br	d804 <_dtoa_r+0xafc>
    dc00:	a00b883a 	mov	r5,r20
    dc04:	b809883a 	mov	r4,r23
    dc08:	000ff3c0 	call	ff3c <__mcmp>
    dc0c:	103edf0e 	bge	r2,zero,d78c <_dtoa_r+0xa84>
    dc10:	b80b883a 	mov	r5,r23
    dc14:	000f883a 	mov	r7,zero
    dc18:	01800284 	movi	r6,10
    dc1c:	e009883a 	mov	r4,fp
    dc20:	000f5500 	call	f550 <__multadd>
    dc24:	d8c00617 	ldw	r3,24(sp)
    dc28:	102f883a 	mov	r23,r2
    dc2c:	d8800517 	ldw	r2,20(sp)
    dc30:	1d7fffc4 	addi	r21,r3,-1
    dc34:	103f861e 	bne	r2,zero,da50 <_dtoa_r+0xd48>
    dc38:	d8800b17 	ldw	r2,44(sp)
    dc3c:	0081cb0e 	bge	zero,r2,e36c <_dtoa_r+0x1664>
    dc40:	d8c00617 	ldw	r3,24(sp)
    dc44:	d8800315 	stw	r2,12(sp)
    dc48:	d8c00215 	stw	r3,8(sp)
    dc4c:	003ed606 	br	d7a8 <_dtoa_r+0xaa0>
    dc50:	00800074 	movhi	r2,1
    dc54:	1007883a 	mov	r3,r2
    dc58:	18deb804 	addi	r3,r3,31456
    dc5c:	00800074 	movhi	r2,1
    dc60:	d8c00115 	stw	r3,4(sp)
    dc64:	109eb8c4 	addi	r2,r2,31459
    dc68:	003de506 	br	d400 <_dtoa_r+0x6f8>
    dc6c:	00800044 	movi	r2,1
    dc70:	d8800515 	stw	r2,20(sp)
    dc74:	003f3206 	br	d940 <_dtoa_r+0xc38>
    dc78:	983ea91e 	bne	r19,zero,d720 <_dtoa_r+0xa18>
    dc7c:	00800434 	movhi	r2,16
    dc80:	10bfffc4 	addi	r2,r2,-1
    dc84:	8884703a 	and	r2,r17,r2
    dc88:	103ea51e 	bne	r2,zero,d720 <_dtoa_r+0xa18>
    dc8c:	8c5ffc2c 	andhi	r17,r17,32752
    dc90:	883ea326 	beq	r17,zero,d720 <_dtoa_r+0xa18>
    dc94:	d8800417 	ldw	r2,16(sp)
    dc98:	b5800044 	addi	r22,r22,1
    dc9c:	04400044 	movi	r17,1
    dca0:	10800044 	addi	r2,r2,1
    dca4:	d8800415 	stw	r2,16(sp)
    dca8:	003e9e06 	br	d724 <_dtoa_r+0xa1c>
    dcac:	00800044 	movi	r2,1
    dcb0:	d8800315 	stw	r2,12(sp)
    dcb4:	d8801d15 	stw	r2,116(sp)
    dcb8:	003f1906 	br	d920 <_dtoa_r+0xc18>
    dcbc:	d8800b17 	ldw	r2,44(sp)
    dcc0:	dd400615 	stw	r21,24(sp)
    dcc4:	d8800315 	stw	r2,12(sp)
    dcc8:	d8800317 	ldw	r2,12(sp)
    dccc:	103e011e 	bne	r2,zero,d4d4 <_dtoa_r+0x7cc>
    dcd0:	a00b883a 	mov	r5,r20
    dcd4:	e009883a 	mov	r4,fp
    dcd8:	000f883a 	mov	r7,zero
    dcdc:	01800144 	movi	r6,5
    dce0:	000f5500 	call	f550 <__multadd>
    dce4:	100b883a 	mov	r5,r2
    dce8:	b809883a 	mov	r4,r23
    dcec:	1029883a 	mov	r20,r2
    dcf0:	000ff3c0 	call	ff3c <__mcmp>
    dcf4:	00bdf70e 	bge	zero,r2,d4d4 <_dtoa_r+0x7cc>
    dcf8:	d8c00117 	ldw	r3,4(sp)
    dcfc:	00800c44 	movi	r2,49
    dd00:	18800005 	stb	r2,0(r3)
    dd04:	d8800617 	ldw	r2,24(sp)
    dd08:	1a000044 	addi	r8,r3,1
    dd0c:	14c00044 	addi	r19,r2,1
    dd10:	a00b883a 	mov	r5,r20
    dd14:	e009883a 	mov	r4,fp
    dd18:	da000315 	stw	r8,12(sp)
    dd1c:	000f52c0 	call	f52c <_Bfree>
    dd20:	98800044 	addi	r2,r19,1
    dd24:	d8800215 	stw	r2,8(sp)
    dd28:	da000317 	ldw	r8,12(sp)
    dd2c:	803eda1e 	bne	r16,zero,d898 <_dtoa_r+0xb90>
    dd30:	003ede06 	br	d8ac <_dtoa_r+0xba4>
    dd34:	b005883a 	mov	r2,r22
    dd38:	003e5506 	br	d690 <_dtoa_r+0x988>
    dd3c:	800b883a 	mov	r5,r16
    dd40:	900d883a 	mov	r6,r18
    dd44:	e009883a 	mov	r4,fp
    dd48:	000fdb40 	call	fdb4 <__lshift>
    dd4c:	1021883a 	mov	r16,r2
    dd50:	003f4a06 	br	da7c <_dtoa_r+0xd74>
    dd54:	1529c83a 	sub	r20,r2,r20
    dd58:	003e3e06 	br	d654 <_dtoa_r+0x94c>
    dd5c:	dcc00a15 	stw	r19,40(sp)
    dd60:	dc400c15 	stw	r17,48(sp)
    dd64:	04000084 	movi	r16,2
    dd68:	003ccf06 	br	d0a8 <_dtoa_r+0x3a0>
    dd6c:	00800044 	movi	r2,1
    dd70:	003ea106 	br	d7f8 <_dtoa_r+0xaf0>
    dd74:	00800044 	movi	r2,1
    dd78:	d8800515 	stw	r2,20(sp)
    dd7c:	003c9506 	br	cfd4 <_dtoa_r+0x2cc>
    dd80:	1000021e 	bne	r2,zero,dd8c <_dtoa_r+0x1084>
    dd84:	98c0004c 	andi	r3,r19,1
    dd88:	183ea91e 	bne	r3,zero,d830 <_dtoa_r+0xb28>
    dd8c:	40bfffc7 	ldb	r2,-1(r8)
    dd90:	4007883a 	mov	r3,r8
    dd94:	423fffc4 	addi	r8,r8,-1
    dd98:	10800c20 	cmpeqi	r2,r2,48
    dd9c:	103ffb1e 	bne	r2,zero,dd8c <_dtoa_r+0x1084>
    dda0:	1811883a 	mov	r8,r3
    dda4:	003eb006 	br	d868 <_dtoa_r+0xb60>
    dda8:	d8c00117 	ldw	r3,4(sp)
    ddac:	00800c44 	movi	r2,49
    ddb0:	18800005 	stb	r2,0(r3)
    ddb4:	d8800217 	ldw	r2,8(sp)
    ddb8:	10800044 	addi	r2,r2,1
    ddbc:	d8800215 	stw	r2,8(sp)
    ddc0:	003ea906 	br	d868 <_dtoa_r+0xb60>
    ddc4:	d8c00917 	ldw	r3,36(sp)
    ddc8:	18010e26 	beq	r3,zero,e204 <_dtoa_r+0x14fc>
    ddcc:	d8c00417 	ldw	r3,16(sp)
    ddd0:	10810cc4 	addi	r2,r2,1075
    ddd4:	b0ad883a 	add	r22,r22,r2
    ddd8:	1885883a 	add	r2,r3,r2
    dddc:	dd000717 	ldw	r20,28(sp)
    dde0:	1825883a 	mov	r18,r3
    dde4:	d8800415 	stw	r2,16(sp)
    dde8:	003e2106 	br	d670 <_dtoa_r+0x968>
    ddec:	8009883a 	mov	r4,r16
    ddf0:	0009a9c0 	call	9a9c <__floatsidf>
    ddf4:	d9800a17 	ldw	r6,40(sp)
    ddf8:	900f883a 	mov	r7,r18
    ddfc:	1009883a 	mov	r4,r2
    de00:	180b883a 	mov	r5,r3
    de04:	00089100 	call	8910 <__muldf3>
    de08:	000d883a 	mov	r6,zero
    de0c:	01d00734 	movhi	r7,16412
    de10:	1009883a 	mov	r4,r2
    de14:	180b883a 	mov	r5,r3
    de18:	00074bc0 	call	74bc <__adddf3>
    de1c:	1029883a 	mov	r20,r2
    de20:	00bf3034 	movhi	r2,64704
    de24:	1885883a 	add	r2,r3,r2
    de28:	d8800c15 	stw	r2,48(sp)
    de2c:	d9000a17 	ldw	r4,40(sp)
    de30:	900b883a 	mov	r5,r18
    de34:	000d883a 	mov	r6,zero
    de38:	01d00534 	movhi	r7,16404
    de3c:	00090bc0 	call	90bc <__subdf3>
    de40:	d9c00c17 	ldw	r7,48(sp)
    de44:	a00d883a 	mov	r6,r20
    de48:	1009883a 	mov	r4,r2
    de4c:	180b883a 	mov	r5,r3
    de50:	1025883a 	mov	r18,r2
    de54:	1821883a 	mov	r16,r3
    de58:	00087400 	call	8740 <__gedf2>
    de5c:	00812b16 	blt	zero,r2,e30c <_dtoa_r+0x1604>
    de60:	d8800c17 	ldw	r2,48(sp)
    de64:	a00d883a 	mov	r6,r20
    de68:	9009883a 	mov	r4,r18
    de6c:	11e0003c 	xorhi	r7,r2,32768
    de70:	800b883a 	mov	r5,r16
    de74:	00088280 	call	8828 <__ledf2>
    de78:	103d780e 	bge	r2,zero,d45c <_dtoa_r+0x754>
    de7c:	0029883a 	mov	r20,zero
    de80:	0021883a 	mov	r16,zero
    de84:	003d9306 	br	d4d4 <_dtoa_r+0x7cc>
    de88:	d9800717 	ldw	r6,28(sp)
    de8c:	b80b883a 	mov	r5,r23
    de90:	e009883a 	mov	r4,fp
    de94:	000fc6c0 	call	fc6c <__pow5mult>
    de98:	102f883a 	mov	r23,r2
    de9c:	003e1806 	br	d700 <_dtoa_r+0x9f8>
    dea0:	d8800617 	ldw	r2,24(sp)
    dea4:	1000e326 	beq	r2,zero,e234 <_dtoa_r+0x152c>
    dea8:	00a9c83a 	sub	r20,zero,r2
    deac:	a08003cc 	andi	r2,r20,15
    deb0:	100690fa 	slli	r3,r2,3
    deb4:	00800074 	movhi	r2,1
    deb8:	109ef804 	addi	r2,r2,31712
    debc:	10c5883a 	add	r2,r2,r3
    dec0:	11800017 	ldw	r6,0(r2)
    dec4:	11c00117 	ldw	r7,4(r2)
    dec8:	9809883a 	mov	r4,r19
    decc:	880b883a 	mov	r5,r17
    ded0:	a029d13a 	srai	r20,r20,4
    ded4:	00089100 	call	8910 <__muldf3>
    ded8:	d8800a15 	stw	r2,40(sp)
    dedc:	1825883a 	mov	r18,r3
    dee0:	a0013126 	beq	r20,zero,e3a8 <_dtoa_r+0x16a0>
    dee4:	02000074 	movhi	r8,1
    dee8:	04000084 	movi	r16,2
    deec:	421eee04 	addi	r8,r8,31672
    def0:	180b883a 	mov	r5,r3
    def4:	dc400c15 	stw	r17,48(sp)
    def8:	1009883a 	mov	r4,r2
    defc:	8023883a 	mov	r17,r16
    df00:	0007883a 	mov	r3,zero
    df04:	4021883a 	mov	r16,r8
    df08:	a180004c 	andi	r6,r20,1
    df0c:	30000726 	beq	r6,zero,df2c <_dtoa_r+0x1224>
    df10:	81800017 	ldw	r6,0(r16)
    df14:	81c00117 	ldw	r7,4(r16)
    df18:	8c400044 	addi	r17,r17,1
    df1c:	00089100 	call	8910 <__muldf3>
    df20:	180b883a 	mov	r5,r3
    df24:	1009883a 	mov	r4,r2
    df28:	00c00044 	movi	r3,1
    df2c:	a029d07a 	srai	r20,r20,1
    df30:	84000204 	addi	r16,r16,8
    df34:	a03ff41e 	bne	r20,zero,df08 <_dtoa_r+0x1200>
    df38:	18c03fcc 	andi	r3,r3,255
    df3c:	8821883a 	mov	r16,r17
    df40:	dc400c17 	ldw	r17,48(sp)
    df44:	183c7126 	beq	r3,zero,d10c <_dtoa_r+0x404>
    df48:	d9000a15 	stw	r4,40(sp)
    df4c:	2825883a 	mov	r18,r5
    df50:	003c6e06 	br	d10c <_dtoa_r+0x404>
    df54:	983eb41e 	bne	r19,zero,da28 <_dtoa_r+0xd20>
    df58:	00800434 	movhi	r2,16
    df5c:	10bfffc4 	addi	r2,r2,-1
    df60:	8884703a 	and	r2,r17,r2
    df64:	103f4926 	beq	r2,zero,dc8c <_dtoa_r+0xf84>
    df68:	003eaf06 	br	da28 <_dtoa_r+0xd20>
    df6c:	00800e0e 	bge	zero,r2,dfa8 <_dtoa_r+0x12a0>
    df70:	b80b883a 	mov	r5,r23
    df74:	01800044 	movi	r6,1
    df78:	e009883a 	mov	r4,fp
    df7c:	da000215 	stw	r8,8(sp)
    df80:	000fdb40 	call	fdb4 <__lshift>
    df84:	a00b883a 	mov	r5,r20
    df88:	1009883a 	mov	r4,r2
    df8c:	102f883a 	mov	r23,r2
    df90:	000ff3c0 	call	ff3c <__mcmp>
    df94:	da000217 	ldw	r8,8(sp)
    df98:	0080e30e 	bge	zero,r2,e328 <_dtoa_r+0x1620>
    df9c:	98c00e60 	cmpeqi	r3,r19,57
    dfa0:	1800cf1e 	bne	r3,zero,e2e0 <_dtoa_r+0x15d8>
    dfa4:	acc00c44 	addi	r19,r21,49
    dfa8:	8023883a 	mov	r17,r16
    dfac:	d8800617 	ldw	r2,24(sp)
    dfb0:	b4c00005 	stb	r19,0(r22)
    dfb4:	9021883a 	mov	r16,r18
    dfb8:	10800044 	addi	r2,r2,1
    dfbc:	d8800215 	stw	r2,8(sp)
    dfc0:	003e2906 	br	d868 <_dtoa_r+0xb60>
    dfc4:	b82b883a 	mov	r21,r23
    dfc8:	ddc00217 	ldw	r23,8(sp)
    dfcc:	200d883a 	mov	r6,r4
    dfd0:	280f883a 	mov	r7,r5
    dfd4:	00074bc0 	call	74bc <__adddf3>
    dfd8:	102d883a 	mov	r22,r2
    dfdc:	1009883a 	mov	r4,r2
    dfe0:	d8800617 	ldw	r2,24(sp)
    dfe4:	800d883a 	mov	r6,r16
    dfe8:	900f883a 	mov	r7,r18
    dfec:	10800044 	addi	r2,r2,1
    dff0:	180b883a 	mov	r5,r3
    dff4:	1823883a 	mov	r17,r3
    dff8:	1027883a 	mov	r19,r2
    dffc:	d8800215 	stw	r2,8(sp)
    e000:	00087400 	call	8740 <__gedf2>
    e004:	00808916 	blt	zero,r2,e22c <_dtoa_r+0x1524>
    e008:	800d883a 	mov	r6,r16
    e00c:	900f883a 	mov	r7,r18
    e010:	b009883a 	mov	r4,r22
    e014:	880b883a 	mov	r5,r17
    e018:	00086c00 	call	86c0 <__eqdf2>
    e01c:	1000021e 	bne	r2,zero,e028 <_dtoa_r+0x1320>
    e020:	ad40004c 	andi	r21,r21,1
    e024:	a800811e 	bne	r21,zero,e22c <_dtoa_r+0x1524>
    e028:	a011883a 	mov	r8,r20
    e02c:	003e1f06 	br	d8ac <_dtoa_r+0xba4>
    e030:	81400117 	ldw	r5,4(r16)
    e034:	e009883a 	mov	r4,fp
    e038:	000f4880 	call	f488 <_Balloc>
    e03c:	1023883a 	mov	r17,r2
    e040:	1000f326 	beq	r2,zero,e410 <_dtoa_r+0x1708>
    e044:	81800417 	ldw	r6,16(r16)
    e048:	81400304 	addi	r5,r16,12
    e04c:	11000304 	addi	r4,r2,12
    e050:	31800084 	addi	r6,r6,2
    e054:	300c90ba 	slli	r6,r6,2
    e058:	000a6b00 	call	a6b0 <memcpy>
    e05c:	01800044 	movi	r6,1
    e060:	880b883a 	mov	r5,r17
    e064:	e009883a 	mov	r4,fp
    e068:	000fdb40 	call	fdb4 <__lshift>
    e06c:	1025883a 	mov	r18,r2
    e070:	003e8406 	br	da84 <_dtoa_r+0xd7c>
    e074:	b80b883a 	mov	r5,r23
    e078:	e009883a 	mov	r4,fp
    e07c:	000fc6c0 	call	fc6c <__pow5mult>
    e080:	102f883a 	mov	r23,r2
    e084:	003d9e06 	br	d700 <_dtoa_r+0x9f8>
    e088:	d8800417 	ldw	r2,16(sp)
    e08c:	d8c00317 	ldw	r3,12(sp)
    e090:	10e5c83a 	sub	r18,r2,r3
    e094:	003d7606 	br	d670 <_dtoa_r+0x968>
    e098:	98800e58 	cmpnei	r2,r19,57
    e09c:	10009026 	beq	r2,zero,e2e0 <_dtoa_r+0x15d8>
    e0a0:	d8800617 	ldw	r2,24(sp)
    e0a4:	98c00044 	addi	r3,r19,1
    e0a8:	8023883a 	mov	r17,r16
    e0ac:	10800044 	addi	r2,r2,1
    e0b0:	d8800215 	stw	r2,8(sp)
    e0b4:	b0c00005 	stb	r3,0(r22)
    e0b8:	9021883a 	mov	r16,r18
    e0bc:	003dea06 	br	d868 <_dtoa_r+0xb60>
    e0c0:	d8800617 	ldw	r2,24(sp)
    e0c4:	8023883a 	mov	r17,r16
    e0c8:	9021883a 	mov	r16,r18
    e0cc:	10800044 	addi	r2,r2,1
    e0d0:	d8800215 	stw	r2,8(sp)
    e0d4:	003dcb06 	br	d804 <_dtoa_r+0xafc>
    e0d8:	d9400c17 	ldw	r5,48(sp)
    e0dc:	a009883a 	mov	r4,r20
    e0e0:	00089100 	call	8910 <__muldf3>
    e0e4:	d9400117 	ldw	r5,4(sp)
    e0e8:	d9000f17 	ldw	r4,60(sp)
    e0ec:	d9800d17 	ldw	r6,52(sp)
    e0f0:	d8800a15 	stw	r2,40(sp)
    e0f4:	29000005 	stb	r4,0(r5)
    e0f8:	d8c00c15 	stw	r3,48(sp)
    e0fc:	31000058 	cmpnei	r4,r6,1
    e100:	da000e17 	ldw	r8,56(sp)
    e104:	29a9883a 	add	r20,r5,r6
    e108:	20009d26 	beq	r4,zero,e380 <_dtoa_r+0x1678>
    e10c:	dc400d15 	stw	r17,52(sp)
    e110:	8009883a 	mov	r4,r16
    e114:	900b883a 	mov	r5,r18
    e118:	4023883a 	mov	r17,r8
    e11c:	dcc00e15 	stw	r19,56(sp)
    e120:	000d883a 	mov	r6,zero
    e124:	01d00934 	movhi	r7,16420
    e128:	00089100 	call	8910 <__muldf3>
    e12c:	180b883a 	mov	r5,r3
    e130:	1009883a 	mov	r4,r2
    e134:	1825883a 	mov	r18,r3
    e138:	1027883a 	mov	r19,r2
    e13c:	0009a1c0 	call	9a1c <__fixdfsi>
    e140:	1009883a 	mov	r4,r2
    e144:	1021883a 	mov	r16,r2
    e148:	0009a9c0 	call	9a9c <__floatsidf>
    e14c:	9809883a 	mov	r4,r19
    e150:	900b883a 	mov	r5,r18
    e154:	100d883a 	mov	r6,r2
    e158:	180f883a 	mov	r7,r3
    e15c:	8c400044 	addi	r17,r17,1
    e160:	84000c04 	addi	r16,r16,48
    e164:	00090bc0 	call	90bc <__subdf3>
    e168:	8c3fffc5 	stb	r16,-1(r17)
    e16c:	1009883a 	mov	r4,r2
    e170:	180b883a 	mov	r5,r3
    e174:	a47fea1e 	bne	r20,r17,e120 <_dtoa_r+0x1418>
    e178:	dc400d17 	ldw	r17,52(sp)
    e17c:	dcc00e17 	ldw	r19,56(sp)
    e180:	1021883a 	mov	r16,r2
    e184:	1825883a 	mov	r18,r3
    e188:	d9000a17 	ldw	r4,40(sp)
    e18c:	d9400c17 	ldw	r5,48(sp)
    e190:	000d883a 	mov	r6,zero
    e194:	01cff834 	movhi	r7,16352
    e198:	00074bc0 	call	74bc <__adddf3>
    e19c:	800d883a 	mov	r6,r16
    e1a0:	900f883a 	mov	r7,r18
    e1a4:	1009883a 	mov	r4,r2
    e1a8:	180b883a 	mov	r5,r3
    e1ac:	00088280 	call	8828 <__ledf2>
    e1b0:	10005916 	blt	r2,zero,e318 <_dtoa_r+0x1610>
    e1b4:	d9800a17 	ldw	r6,40(sp)
    e1b8:	d9c00c17 	ldw	r7,48(sp)
    e1bc:	0009883a 	mov	r4,zero
    e1c0:	014ff834 	movhi	r5,16352
    e1c4:	00090bc0 	call	90bc <__subdf3>
    e1c8:	800d883a 	mov	r6,r16
    e1cc:	900f883a 	mov	r7,r18
    e1d0:	1009883a 	mov	r4,r2
    e1d4:	180b883a 	mov	r5,r3
    e1d8:	00087400 	call	8740 <__gedf2>
    e1dc:	00bc9f0e 	bge	zero,r2,d45c <_dtoa_r+0x754>
    e1e0:	a0bfffc7 	ldb	r2,-1(r20)
    e1e4:	a011883a 	mov	r8,r20
    e1e8:	a53fffc4 	addi	r20,r20,-1
    e1ec:	10800c20 	cmpeqi	r2,r2,48
    e1f0:	103ffb1e 	bne	r2,zero,e1e0 <_dtoa_r+0x14d8>
    e1f4:	d8801017 	ldw	r2,64(sp)
    e1f8:	10800044 	addi	r2,r2,1
    e1fc:	d8800215 	stw	r2,8(sp)
    e200:	003daa06 	br	d8ac <_dtoa_r+0xba4>
    e204:	d8c01117 	ldw	r3,68(sp)
    e208:	d9000417 	ldw	r4,16(sp)
    e20c:	00800d84 	movi	r2,54
    e210:	10c5c83a 	sub	r2,r2,r3
    e214:	b0ad883a 	add	r22,r22,r2
    e218:	2085883a 	add	r2,r4,r2
    e21c:	dd000717 	ldw	r20,28(sp)
    e220:	2025883a 	mov	r18,r4
    e224:	d8800415 	stw	r2,16(sp)
    e228:	003d1106 	br	d670 <_dtoa_r+0x968>
    e22c:	d9000117 	ldw	r4,4(sp)
    e230:	003c4e06 	br	d36c <_dtoa_r+0x664>
    e234:	dcc00a15 	stw	r19,40(sp)
    e238:	8825883a 	mov	r18,r17
    e23c:	04000084 	movi	r16,2
    e240:	003bb206 	br	d10c <_dtoa_r+0x404>
    e244:	d8800317 	ldw	r2,12(sp)
    e248:	103ee826 	beq	r2,zero,ddec <_dtoa_r+0x10e4>
    e24c:	d8800b17 	ldw	r2,44(sp)
    e250:	00bc820e 	bge	zero,r2,d45c <_dtoa_r+0x754>
    e254:	900b883a 	mov	r5,r18
    e258:	a009883a 	mov	r4,r20
    e25c:	000d883a 	mov	r6,zero
    e260:	01d00934 	movhi	r7,16420
    e264:	00089100 	call	8910 <__muldf3>
    e268:	81000044 	addi	r4,r16,1
    e26c:	1029883a 	mov	r20,r2
    e270:	1825883a 	mov	r18,r3
    e274:	d8800a15 	stw	r2,40(sp)
    e278:	0009a9c0 	call	9a9c <__floatsidf>
    e27c:	a00d883a 	mov	r6,r20
    e280:	900f883a 	mov	r7,r18
    e284:	1009883a 	mov	r4,r2
    e288:	180b883a 	mov	r5,r3
    e28c:	00089100 	call	8910 <__muldf3>
    e290:	1009883a 	mov	r4,r2
    e294:	000d883a 	mov	r6,zero
    e298:	01d00734 	movhi	r7,16412
    e29c:	180b883a 	mov	r5,r3
    e2a0:	00074bc0 	call	74bc <__adddf3>
    e2a4:	d9000617 	ldw	r4,24(sp)
    e2a8:	1029883a 	mov	r20,r2
    e2ac:	00bf3034 	movhi	r2,64704
    e2b0:	1887883a 	add	r3,r3,r2
    e2b4:	d8800b17 	ldw	r2,44(sp)
    e2b8:	213fffc4 	addi	r4,r4,-1
    e2bc:	d9001015 	stw	r4,64(sp)
    e2c0:	d8c00c15 	stw	r3,48(sp)
    e2c4:	d8800d15 	stw	r2,52(sp)
    e2c8:	003baf06 	br	d188 <_dtoa_r+0x480>
    e2cc:	00c00c44 	movi	r3,49
    e2d0:	9cc00044 	addi	r19,r19,1
    e2d4:	003c2e06 	br	d390 <_dtoa_r+0x688>
    e2d8:	b0800044 	addi	r2,r22,1
    e2dc:	d8800315 	stw	r2,12(sp)
    e2e0:	00800e44 	movi	r2,57
    e2e4:	b0800005 	stb	r2,0(r22)
    e2e8:	d8800617 	ldw	r2,24(sp)
    e2ec:	8023883a 	mov	r17,r16
    e2f0:	da000317 	ldw	r8,12(sp)
    e2f4:	10800044 	addi	r2,r2,1
    e2f8:	d9400117 	ldw	r5,4(sp)
    e2fc:	d8800215 	stw	r2,8(sp)
    e300:	9021883a 	mov	r16,r18
    e304:	01000e44 	movi	r4,57
    e308:	003d4f06 	br	d848 <_dtoa_r+0xb40>
    e30c:	0029883a 	mov	r20,zero
    e310:	0021883a 	mov	r16,zero
    e314:	003e7806 	br	dcf8 <_dtoa_r+0xff0>
    e318:	d8801017 	ldw	r2,64(sp)
    e31c:	d9000117 	ldw	r4,4(sp)
    e320:	14c00044 	addi	r19,r2,1
    e324:	003c1106 	br	d36c <_dtoa_r+0x664>
    e328:	103f1f1e 	bne	r2,zero,dfa8 <_dtoa_r+0x12a0>
    e32c:	9880004c 	andi	r2,r19,1
    e330:	103f1a1e 	bne	r2,zero,df9c <_dtoa_r+0x1294>
    e334:	003f1c06 	br	dfa8 <_dtoa_r+0x12a0>
    e338:	d8801017 	ldw	r2,64(sp)
    e33c:	ddc00c17 	ldw	r23,48(sp)
    e340:	a811883a 	mov	r8,r21
    e344:	10800044 	addi	r2,r2,1
    e348:	d8800215 	stw	r2,8(sp)
    e34c:	003d5706 	br	d8ac <_dtoa_r+0xba4>
    e350:	98800e60 	cmpeqi	r2,r19,57
    e354:	103fe01e 	bne	r2,zero,e2d8 <_dtoa_r+0x15d0>
    e358:	0440010e 	bge	zero,r17,e360 <_dtoa_r+0x1658>
    e35c:	acc00c44 	addi	r19,r21,49
    e360:	8023883a 	mov	r17,r16
    e364:	b2000044 	addi	r8,r22,1
    e368:	003f1006 	br	dfac <_dtoa_r+0x12a4>
    e36c:	d8800217 	ldw	r2,8(sp)
    e370:	108000c8 	cmpgei	r2,r2,3
    e374:	103e511e 	bne	r2,zero,dcbc <_dtoa_r+0xfb4>
    e378:	dd400615 	stw	r21,24(sp)
    e37c:	003e1406 	br	dbd0 <_dtoa_r+0xec8>
    e380:	4029883a 	mov	r20,r8
    e384:	003f8006 	br	e188 <_dtoa_r+0x1480>
    e388:	d8800217 	ldw	r2,8(sp)
    e38c:	108000c8 	cmpgei	r2,r2,3
    e390:	103e4a1e 	bne	r2,zero,dcbc <_dtoa_r+0xfb4>
    e394:	d8800b17 	ldw	r2,44(sp)
    e398:	dd400615 	stw	r21,24(sp)
    e39c:	d8800315 	stw	r2,12(sp)
    e3a0:	04bdb60e 	bge	zero,r18,da7c <_dtoa_r+0xd74>
    e3a4:	003e6506 	br	dd3c <_dtoa_r+0x1034>
    e3a8:	04000084 	movi	r16,2
    e3ac:	003b5706 	br	d10c <_dtoa_r+0x404>
    e3b0:	01c00074 	movhi	r7,1
    e3b4:	01000074 	movhi	r4,1
    e3b8:	39debc04 	addi	r7,r7,31472
    e3bc:	000d883a 	mov	r6,zero
    e3c0:	01406a84 	movi	r5,426
    e3c4:	211ec104 	addi	r4,r4,31492
    e3c8:	00120600 	call	12060 <__assert_func>
    e3cc:	000b883a 	mov	r5,zero
    e3d0:	003b1006 	br	d014 <_dtoa_r+0x30c>
    e3d4:	e0001115 	stw	zero,68(fp)
    e3d8:	000b883a 	mov	r5,zero
    e3dc:	e009883a 	mov	r4,fp
    e3e0:	000f4880 	call	f488 <_Balloc>
    e3e4:	d8800115 	stw	r2,4(sp)
    e3e8:	103ff126 	beq	r2,zero,e3b0 <_dtoa_r+0x16a8>
    e3ec:	d8800117 	ldw	r2,4(sp)
    e3f0:	d8001d15 	stw	zero,116(sp)
    e3f4:	e0801015 	stw	r2,64(fp)
    e3f8:	00bfffc4 	movi	r2,-1
    e3fc:	d8800315 	stw	r2,12(sp)
    e400:	d8800b15 	stw	r2,44(sp)
    e404:	00800044 	movi	r2,1
    e408:	d8800515 	stw	r2,20(sp)
    e40c:	003c1306 	br	d45c <_dtoa_r+0x754>
    e410:	01c00074 	movhi	r7,1
    e414:	01000074 	movhi	r4,1
    e418:	39debc04 	addi	r7,r7,31472
    e41c:	000d883a 	mov	r6,zero
    e420:	0140ba84 	movi	r5,746
    e424:	211ec104 	addi	r4,r4,31492
    e428:	00120600 	call	12060 <__assert_func>
    e42c:	00800074 	movhi	r2,1
    e430:	109eb904 	addi	r2,r2,31460
    e434:	d8800115 	stw	r2,4(sp)
    e438:	003a6506 	br	cdd0 <_dtoa_r+0xc8>
    e43c:	18c00120 	cmpeqi	r3,r3,4
    e440:	183cc81e 	bne	r3,zero,d764 <_dtoa_r+0xa5c>
    e444:	00c00f04 	movi	r3,60
    e448:	1885c83a 	sub	r2,r3,r2
    e44c:	003cc006 	br	d750 <_dtoa_r+0xa48>

0000e450 <__sflush_r>:
    e450:	2880030b 	ldhu	r2,12(r5)
    e454:	defffb04 	addi	sp,sp,-20
    e458:	dcc00315 	stw	r19,12(sp)
    e45c:	dc000015 	stw	r16,0(sp)
    e460:	dfc00415 	stw	ra,16(sp)
    e464:	dc800215 	stw	r18,8(sp)
    e468:	dc400115 	stw	r17,4(sp)
    e46c:	10c0020c 	andi	r3,r2,8
    e470:	2821883a 	mov	r16,r5
    e474:	2027883a 	mov	r19,r4
    e478:	18003f1e 	bne	r3,zero,e578 <__sflush_r+0x128>
    e47c:	28c00117 	ldw	r3,4(r5)
    e480:	10820014 	ori	r2,r2,2048
    e484:	2880030d 	sth	r2,12(r5)
    e488:	00c0550e 	bge	zero,r3,e5e0 <__sflush_r+0x190>
    e48c:	82000a17 	ldw	r8,40(r16)
    e490:	40003126 	beq	r8,zero,e558 <__sflush_r+0x108>
    e494:	9c400017 	ldw	r17,0(r19)
    e498:	1104000c 	andi	r4,r2,4096
    e49c:	98000015 	stw	zero,0(r19)
    e4a0:	1007883a 	mov	r3,r2
    e4a4:	2000531e 	bne	r4,zero,e5f4 <__sflush_r+0x1a4>
    e4a8:	81400717 	ldw	r5,28(r16)
    e4ac:	01c00044 	movi	r7,1
    e4b0:	000d883a 	mov	r6,zero
    e4b4:	9809883a 	mov	r4,r19
    e4b8:	403ee83a 	callr	r8
    e4bc:	10ffffd8 	cmpnei	r3,r2,-1
    e4c0:	18005826 	beq	r3,zero,e624 <__sflush_r+0x1d4>
    e4c4:	80c0030b 	ldhu	r3,12(r16)
    e4c8:	82000a17 	ldw	r8,40(r16)
    e4cc:	18c0010c 	andi	r3,r3,4
    e4d0:	18000626 	beq	r3,zero,e4ec <__sflush_r+0x9c>
    e4d4:	81000117 	ldw	r4,4(r16)
    e4d8:	80c00c17 	ldw	r3,48(r16)
    e4dc:	1105c83a 	sub	r2,r2,r4
    e4e0:	18000226 	beq	r3,zero,e4ec <__sflush_r+0x9c>
    e4e4:	80c00f17 	ldw	r3,60(r16)
    e4e8:	10c5c83a 	sub	r2,r2,r3
    e4ec:	81400717 	ldw	r5,28(r16)
    e4f0:	100d883a 	mov	r6,r2
    e4f4:	000f883a 	mov	r7,zero
    e4f8:	9809883a 	mov	r4,r19
    e4fc:	403ee83a 	callr	r8
    e500:	10ffffd8 	cmpnei	r3,r2,-1
    e504:	18003d1e 	bne	r3,zero,e5fc <__sflush_r+0x1ac>
    e508:	99000017 	ldw	r4,0(r19)
    e50c:	80c0030b 	ldhu	r3,12(r16)
    e510:	20004e26 	beq	r4,zero,e64c <__sflush_r+0x1fc>
    e514:	21400760 	cmpeqi	r5,r4,29
    e518:	2800021e 	bne	r5,zero,e524 <__sflush_r+0xd4>
    e51c:	210005a0 	cmpeqi	r4,r4,22
    e520:	20002c26 	beq	r4,zero,e5d4 <__sflush_r+0x184>
    e524:	80800417 	ldw	r2,16(r16)
    e528:	18fdffcc 	andi	r3,r3,63487
    e52c:	80c0030d 	sth	r3,12(r16)
    e530:	80000115 	stw	zero,4(r16)
    e534:	80800015 	stw	r2,0(r16)
    e538:	81400c17 	ldw	r5,48(r16)
    e53c:	9c400015 	stw	r17,0(r19)
    e540:	28000526 	beq	r5,zero,e558 <__sflush_r+0x108>
    e544:	80801004 	addi	r2,r16,64
    e548:	28800226 	beq	r5,r2,e554 <__sflush_r+0x104>
    e54c:	9809883a 	mov	r4,r19
    e550:	000ec240 	call	ec24 <_free_r>
    e554:	80000c15 	stw	zero,48(r16)
    e558:	0005883a 	mov	r2,zero
    e55c:	dfc00417 	ldw	ra,16(sp)
    e560:	dcc00317 	ldw	r19,12(sp)
    e564:	dc800217 	ldw	r18,8(sp)
    e568:	dc400117 	ldw	r17,4(sp)
    e56c:	dc000017 	ldw	r16,0(sp)
    e570:	dec00504 	addi	sp,sp,20
    e574:	f800283a 	ret
    e578:	2c800417 	ldw	r18,16(r5)
    e57c:	903ff626 	beq	r18,zero,e558 <__sflush_r+0x108>
    e580:	2c400017 	ldw	r17,0(r5)
    e584:	108000cc 	andi	r2,r2,3
    e588:	2c800015 	stw	r18,0(r5)
    e58c:	8ca3c83a 	sub	r17,r17,r18
    e590:	1000161e 	bne	r2,zero,e5ec <__sflush_r+0x19c>
    e594:	28800517 	ldw	r2,20(r5)
    e598:	80800215 	stw	r2,8(r16)
    e59c:	04400316 	blt	zero,r17,e5ac <__sflush_r+0x15c>
    e5a0:	003fed06 	br	e558 <__sflush_r+0x108>
    e5a4:	90a5883a 	add	r18,r18,r2
    e5a8:	047feb0e 	bge	zero,r17,e558 <__sflush_r+0x108>
    e5ac:	80800917 	ldw	r2,36(r16)
    e5b0:	81400717 	ldw	r5,28(r16)
    e5b4:	880f883a 	mov	r7,r17
    e5b8:	900d883a 	mov	r6,r18
    e5bc:	9809883a 	mov	r4,r19
    e5c0:	103ee83a 	callr	r2
    e5c4:	88a3c83a 	sub	r17,r17,r2
    e5c8:	00bff616 	blt	zero,r2,e5a4 <__sflush_r+0x154>
    e5cc:	80c0030b 	ldhu	r3,12(r16)
    e5d0:	00bfffc4 	movi	r2,-1
    e5d4:	18c01014 	ori	r3,r3,64
    e5d8:	80c0030d 	sth	r3,12(r16)
    e5dc:	003fdf06 	br	e55c <__sflush_r+0x10c>
    e5e0:	28c00f17 	ldw	r3,60(r5)
    e5e4:	00ffa916 	blt	zero,r3,e48c <__sflush_r+0x3c>
    e5e8:	003fdb06 	br	e558 <__sflush_r+0x108>
    e5ec:	0005883a 	mov	r2,zero
    e5f0:	003fe906 	br	e598 <__sflush_r+0x148>
    e5f4:	80801417 	ldw	r2,80(r16)
    e5f8:	003fb406 	br	e4cc <__sflush_r+0x7c>
    e5fc:	80c0030b 	ldhu	r3,12(r16)
    e600:	81000417 	ldw	r4,16(r16)
    e604:	80000115 	stw	zero,4(r16)
    e608:	197dffcc 	andi	r5,r3,63487
    e60c:	8140030d 	sth	r5,12(r16)
    e610:	81000015 	stw	r4,0(r16)
    e614:	18c4000c 	andi	r3,r3,4096
    e618:	183fc726 	beq	r3,zero,e538 <__sflush_r+0xe8>
    e61c:	80801415 	stw	r2,80(r16)
    e620:	003fc506 	br	e538 <__sflush_r+0xe8>
    e624:	98c00017 	ldw	r3,0(r19)
    e628:	183fa626 	beq	r3,zero,e4c4 <__sflush_r+0x74>
    e62c:	19000760 	cmpeqi	r4,r3,29
    e630:	20000e1e 	bne	r4,zero,e66c <__sflush_r+0x21c>
    e634:	18c00598 	cmpnei	r3,r3,22
    e638:	18000c26 	beq	r3,zero,e66c <__sflush_r+0x21c>
    e63c:	80c0030b 	ldhu	r3,12(r16)
    e640:	18c01014 	ori	r3,r3,64
    e644:	80c0030d 	sth	r3,12(r16)
    e648:	003fc406 	br	e55c <__sflush_r+0x10c>
    e64c:	81000417 	ldw	r4,16(r16)
    e650:	197dffcc 	andi	r5,r3,63487
    e654:	8140030d 	sth	r5,12(r16)
    e658:	80000115 	stw	zero,4(r16)
    e65c:	81000015 	stw	r4,0(r16)
    e660:	18c4000c 	andi	r3,r3,4096
    e664:	183fb426 	beq	r3,zero,e538 <__sflush_r+0xe8>
    e668:	003fec06 	br	e61c <__sflush_r+0x1cc>
    e66c:	9c400015 	stw	r17,0(r19)
    e670:	0005883a 	mov	r2,zero
    e674:	003fb906 	br	e55c <__sflush_r+0x10c>

0000e678 <_fflush_r>:
    e678:	defffd04 	addi	sp,sp,-12
    e67c:	dc000115 	stw	r16,4(sp)
    e680:	dfc00215 	stw	ra,8(sp)
    e684:	2021883a 	mov	r16,r4
    e688:	20000226 	beq	r4,zero,e694 <_fflush_r+0x1c>
    e68c:	20800e17 	ldw	r2,56(r4)
    e690:	10000726 	beq	r2,zero,e6b0 <_fflush_r+0x38>
    e694:	2880030f 	ldh	r2,12(r5)
    e698:	10000a1e 	bne	r2,zero,e6c4 <_fflush_r+0x4c>
    e69c:	0005883a 	mov	r2,zero
    e6a0:	dfc00217 	ldw	ra,8(sp)
    e6a4:	dc000117 	ldw	r16,4(sp)
    e6a8:	dec00304 	addi	sp,sp,12
    e6ac:	f800283a 	ret
    e6b0:	d9400015 	stw	r5,0(sp)
    e6b4:	000eac00 	call	eac0 <__sinit>
    e6b8:	d9400017 	ldw	r5,0(sp)
    e6bc:	2880030f 	ldh	r2,12(r5)
    e6c0:	103ff626 	beq	r2,zero,e69c <_fflush_r+0x24>
    e6c4:	8009883a 	mov	r4,r16
    e6c8:	dfc00217 	ldw	ra,8(sp)
    e6cc:	dc000117 	ldw	r16,4(sp)
    e6d0:	dec00304 	addi	sp,sp,12
    e6d4:	000e4501 	jmpi	e450 <__sflush_r>

0000e6d8 <fflush>:
    e6d8:	20001726 	beq	r4,zero,e738 <fflush+0x60>
    e6dc:	008000b4 	movhi	r2,2
    e6e0:	200b883a 	mov	r5,r4
    e6e4:	11271e17 	ldw	r4,-25480(r2)
    e6e8:	20000226 	beq	r4,zero,e6f4 <fflush+0x1c>
    e6ec:	20800e17 	ldw	r2,56(r4)
    e6f0:	10000526 	beq	r2,zero,e708 <fflush+0x30>
    e6f4:	2880030f 	ldh	r2,12(r5)
    e6f8:	1000021e 	bne	r2,zero,e704 <fflush+0x2c>
    e6fc:	0005883a 	mov	r2,zero
    e700:	f800283a 	ret
    e704:	000e4501 	jmpi	e450 <__sflush_r>
    e708:	defffd04 	addi	sp,sp,-12
    e70c:	d9400115 	stw	r5,4(sp)
    e710:	d9000015 	stw	r4,0(sp)
    e714:	dfc00215 	stw	ra,8(sp)
    e718:	000eac00 	call	eac0 <__sinit>
    e71c:	d9400117 	ldw	r5,4(sp)
    e720:	d9000017 	ldw	r4,0(sp)
    e724:	2880030f 	ldh	r2,12(r5)
    e728:	10000826 	beq	r2,zero,e74c <fflush+0x74>
    e72c:	dfc00217 	ldw	ra,8(sp)
    e730:	dec00304 	addi	sp,sp,12
    e734:	000e4501 	jmpi	e450 <__sflush_r>
    e738:	008000b4 	movhi	r2,2
    e73c:	11271d17 	ldw	r4,-25484(r2)
    e740:	01400074 	movhi	r5,1
    e744:	29799e04 	addi	r5,r5,-6536
    e748:	000efb81 	jmpi	efb8 <_fwalk_reent>
    e74c:	0005883a 	mov	r2,zero
    e750:	dfc00217 	ldw	ra,8(sp)
    e754:	dec00304 	addi	sp,sp,12
    e758:	f800283a 	ret

0000e75c <__fp_lock>:
    e75c:	0005883a 	mov	r2,zero
    e760:	f800283a 	ret

0000e764 <_cleanup_r>:
    e764:	01400074 	movhi	r5,1
    e768:	2948bb04 	addi	r5,r5,8940
    e76c:	000efb81 	jmpi	efb8 <_fwalk_reent>

0000e770 <__fp_unlock>:
    e770:	0005883a 	mov	r2,zero
    e774:	f800283a 	ret

0000e778 <__sinit.part.0>:
    e778:	00c00074 	movhi	r3,1
    e77c:	20800117 	ldw	r2,4(r4)
    e780:	18f9d904 	addi	r3,r3,-6300
    e784:	20c00f15 	stw	r3,60(r4)
    e788:	2140bb04 	addi	r5,r4,748
    e78c:	00c000c4 	movi	r3,3
    e790:	20c0b915 	stw	r3,740(r4)
    e794:	2140ba15 	stw	r5,744(r4)
    e798:	2000b815 	stw	zero,736(r4)
    e79c:	10001705 	stb	zero,92(r2)
    e7a0:	10001745 	stb	zero,93(r2)
    e7a4:	10001785 	stb	zero,94(r2)
    e7a8:	100017c5 	stb	zero,95(r2)
    e7ac:	10001805 	stb	zero,96(r2)
    e7b0:	10001845 	stb	zero,97(r2)
    e7b4:	10001885 	stb	zero,98(r2)
    e7b8:	100018c5 	stb	zero,99(r2)
    e7bc:	00c00104 	movi	r3,4
    e7c0:	10c00315 	stw	r3,12(r2)
    e7c4:	02000074 	movhi	r8,1
    e7c8:	20c00217 	ldw	r3,8(r4)
    e7cc:	01c00074 	movhi	r7,1
    e7d0:	01800074 	movhi	r6,1
    e7d4:	01400074 	movhi	r5,1
    e7d8:	42020904 	addi	r8,r8,2084
    e7dc:	39c22004 	addi	r7,r7,2176
    e7e0:	31824004 	addi	r6,r6,2304
    e7e4:	29425704 	addi	r5,r5,2396
    e7e8:	02400074 	movhi	r9,1
    e7ec:	10001915 	stw	zero,100(r2)
    e7f0:	10000015 	stw	zero,0(r2)
    e7f4:	10000115 	stw	zero,4(r2)
    e7f8:	10000215 	stw	zero,8(r2)
    e7fc:	10000415 	stw	zero,16(r2)
    e800:	10000515 	stw	zero,20(r2)
    e804:	10000615 	stw	zero,24(r2)
    e808:	10800715 	stw	r2,28(r2)
    e80c:	12000815 	stw	r8,32(r2)
    e810:	11c00915 	stw	r7,36(r2)
    e814:	11800a15 	stw	r6,40(r2)
    e818:	11400b15 	stw	r5,44(r2)
    e81c:	4a400284 	addi	r9,r9,10
    e820:	1a400315 	stw	r9,12(r3)
    e824:	18001915 	stw	zero,100(r3)
    e828:	18000015 	stw	zero,0(r3)
    e82c:	18000115 	stw	zero,4(r3)
    e830:	18000215 	stw	zero,8(r3)
    e834:	18000415 	stw	zero,16(r3)
    e838:	18001705 	stb	zero,92(r3)
    e83c:	18001745 	stb	zero,93(r3)
    e840:	18001785 	stb	zero,94(r3)
    e844:	180017c5 	stb	zero,95(r3)
    e848:	18001805 	stb	zero,96(r3)
    e84c:	18001845 	stb	zero,97(r3)
    e850:	18001885 	stb	zero,98(r3)
    e854:	180018c5 	stb	zero,99(r3)
    e858:	20800317 	ldw	r2,12(r4)
    e85c:	024000b4 	movhi	r9,2
    e860:	18000515 	stw	zero,20(r3)
    e864:	18000615 	stw	zero,24(r3)
    e868:	18c00715 	stw	r3,28(r3)
    e86c:	1a000815 	stw	r8,32(r3)
    e870:	19c00915 	stw	r7,36(r3)
    e874:	19800a15 	stw	r6,40(r3)
    e878:	19400b15 	stw	r5,44(r3)
    e87c:	4a400484 	addi	r9,r9,18
    e880:	10001915 	stw	zero,100(r2)
    e884:	10000015 	stw	zero,0(r2)
    e888:	10000115 	stw	zero,4(r2)
    e88c:	10000215 	stw	zero,8(r2)
    e890:	12400315 	stw	r9,12(r2)
    e894:	10000415 	stw	zero,16(r2)
    e898:	10000515 	stw	zero,20(r2)
    e89c:	10000615 	stw	zero,24(r2)
    e8a0:	10001705 	stb	zero,92(r2)
    e8a4:	10001745 	stb	zero,93(r2)
    e8a8:	10001785 	stb	zero,94(r2)
    e8ac:	100017c5 	stb	zero,95(r2)
    e8b0:	10001805 	stb	zero,96(r2)
    e8b4:	10001845 	stb	zero,97(r2)
    e8b8:	10001885 	stb	zero,98(r2)
    e8bc:	100018c5 	stb	zero,99(r2)
    e8c0:	10800715 	stw	r2,28(r2)
    e8c4:	12000815 	stw	r8,32(r2)
    e8c8:	11c00915 	stw	r7,36(r2)
    e8cc:	11800a15 	stw	r6,40(r2)
    e8d0:	11400b15 	stw	r5,44(r2)
    e8d4:	00800044 	movi	r2,1
    e8d8:	20800e15 	stw	r2,56(r4)
    e8dc:	f800283a 	ret

0000e8e0 <__sfmoreglue>:
    e8e0:	defffc04 	addi	sp,sp,-16
    e8e4:	dc800215 	stw	r18,8(sp)
    e8e8:	2825883a 	mov	r18,r5
    e8ec:	dc000015 	stw	r16,0(sp)
    e8f0:	01401a04 	movi	r5,104
    e8f4:	2021883a 	mov	r16,r4
    e8f8:	913fffc4 	addi	r4,r18,-1
    e8fc:	dfc00315 	stw	ra,12(sp)
    e900:	dc400115 	stw	r17,4(sp)
    e904:	000714c0 	call	714c <__mulsi3>
    e908:	8009883a 	mov	r4,r16
    e90c:	11401d04 	addi	r5,r2,116
    e910:	1023883a 	mov	r17,r2
    e914:	0009ed00 	call	9ed0 <_malloc_r>
    e918:	1021883a 	mov	r16,r2
    e91c:	10000726 	beq	r2,zero,e93c <__sfmoreglue+0x5c>
    e920:	11000304 	addi	r4,r2,12
    e924:	10000015 	stw	zero,0(r2)
    e928:	14800115 	stw	r18,4(r2)
    e92c:	11000215 	stw	r4,8(r2)
    e930:	89801a04 	addi	r6,r17,104
    e934:	000b883a 	mov	r5,zero
    e938:	000f3980 	call	f398 <memset>
    e93c:	8005883a 	mov	r2,r16
    e940:	dfc00317 	ldw	ra,12(sp)
    e944:	dc800217 	ldw	r18,8(sp)
    e948:	dc400117 	ldw	r17,4(sp)
    e94c:	dc000017 	ldw	r16,0(sp)
    e950:	dec00404 	addi	sp,sp,16
    e954:	f800283a 	ret

0000e958 <__sfp>:
    e958:	defffb04 	addi	sp,sp,-20
    e95c:	008000b4 	movhi	r2,2
    e960:	dc000015 	stw	r16,0(sp)
    e964:	14271d17 	ldw	r16,-25484(r2)
    e968:	dc400115 	stw	r17,4(sp)
    e96c:	dfc00415 	stw	ra,16(sp)
    e970:	80800e17 	ldw	r2,56(r16)
    e974:	dcc00315 	stw	r19,12(sp)
    e978:	dc800215 	stw	r18,8(sp)
    e97c:	2023883a 	mov	r17,r4
    e980:	10003126 	beq	r2,zero,ea48 <__sfp+0xf0>
    e984:	8100ba17 	ldw	r4,744(r16)
    e988:	8140b917 	ldw	r5,740(r16)
    e98c:	04c00104 	movi	r19,4
    e990:	8400b804 	addi	r16,r16,736
    e994:	297fffc4 	addi	r5,r5,-1
    e998:	2800050e 	bge	r5,zero,e9b0 <__sfp+0x58>
    e99c:	00002406 	br	ea30 <__sfp+0xd8>
    e9a0:	297fffc4 	addi	r5,r5,-1
    e9a4:	28bfffd8 	cmpnei	r2,r5,-1
    e9a8:	21001a04 	addi	r4,r4,104
    e9ac:	10002026 	beq	r2,zero,ea30 <__sfp+0xd8>
    e9b0:	2080030f 	ldh	r2,12(r4)
    e9b4:	103ffa1e 	bne	r2,zero,e9a0 <__sfp+0x48>
    e9b8:	00bffff4 	movhi	r2,65535
    e9bc:	10800044 	addi	r2,r2,1
    e9c0:	20001915 	stw	zero,100(r4)
    e9c4:	20000015 	stw	zero,0(r4)
    e9c8:	20000115 	stw	zero,4(r4)
    e9cc:	20000215 	stw	zero,8(r4)
    e9d0:	20800315 	stw	r2,12(r4)
    e9d4:	20000415 	stw	zero,16(r4)
    e9d8:	20000515 	stw	zero,20(r4)
    e9dc:	20000615 	stw	zero,24(r4)
    e9e0:	20001705 	stb	zero,92(r4)
    e9e4:	20001745 	stb	zero,93(r4)
    e9e8:	20001785 	stb	zero,94(r4)
    e9ec:	200017c5 	stb	zero,95(r4)
    e9f0:	20001805 	stb	zero,96(r4)
    e9f4:	20001845 	stb	zero,97(r4)
    e9f8:	20001885 	stb	zero,98(r4)
    e9fc:	200018c5 	stb	zero,99(r4)
    ea00:	20000c15 	stw	zero,48(r4)
    ea04:	20000d15 	stw	zero,52(r4)
    ea08:	20001115 	stw	zero,68(r4)
    ea0c:	20001215 	stw	zero,72(r4)
    ea10:	2005883a 	mov	r2,r4
    ea14:	dfc00417 	ldw	ra,16(sp)
    ea18:	dcc00317 	ldw	r19,12(sp)
    ea1c:	dc800217 	ldw	r18,8(sp)
    ea20:	dc400117 	ldw	r17,4(sp)
    ea24:	dc000017 	ldw	r16,0(sp)
    ea28:	dec00504 	addi	sp,sp,20
    ea2c:	f800283a 	ret
    ea30:	80800017 	ldw	r2,0(r16)
    ea34:	10000726 	beq	r2,zero,ea54 <__sfp+0xfc>
    ea38:	11000217 	ldw	r4,8(r2)
    ea3c:	11400117 	ldw	r5,4(r2)
    ea40:	1021883a 	mov	r16,r2
    ea44:	003fd306 	br	e994 <__sfp+0x3c>
    ea48:	8009883a 	mov	r4,r16
    ea4c:	000e7780 	call	e778 <__sinit.part.0>
    ea50:	003fcc06 	br	e984 <__sfp+0x2c>
    ea54:	01406b04 	movi	r5,428
    ea58:	8809883a 	mov	r4,r17
    ea5c:	0009ed00 	call	9ed0 <_malloc_r>
    ea60:	1025883a 	mov	r18,r2
    ea64:	10000c26 	beq	r2,zero,ea98 <__sfp+0x140>
    ea68:	11000304 	addi	r4,r2,12
    ea6c:	11000215 	stw	r4,8(r2)
    ea70:	000b883a 	mov	r5,zero
    ea74:	10000015 	stw	zero,0(r2)
    ea78:	14c00115 	stw	r19,4(r2)
    ea7c:	01806804 	movi	r6,416
    ea80:	000f3980 	call	f398 <memset>
    ea84:	1009883a 	mov	r4,r2
    ea88:	84800015 	stw	r18,0(r16)
    ea8c:	014000c4 	movi	r5,3
    ea90:	9021883a 	mov	r16,r18
    ea94:	003fc606 	br	e9b0 <__sfp+0x58>
    ea98:	80000015 	stw	zero,0(r16)
    ea9c:	00800304 	movi	r2,12
    eaa0:	88800015 	stw	r2,0(r17)
    eaa4:	0009883a 	mov	r4,zero
    eaa8:	003fd906 	br	ea10 <__sfp+0xb8>

0000eaac <_cleanup>:
    eaac:	008000b4 	movhi	r2,2
    eab0:	11271d17 	ldw	r4,-25484(r2)
    eab4:	01400074 	movhi	r5,1
    eab8:	2948bb04 	addi	r5,r5,8940
    eabc:	000efb81 	jmpi	efb8 <_fwalk_reent>

0000eac0 <__sinit>:
    eac0:	20800e17 	ldw	r2,56(r4)
    eac4:	10000126 	beq	r2,zero,eacc <__sinit+0xc>
    eac8:	f800283a 	ret
    eacc:	000e7781 	jmpi	e778 <__sinit.part.0>

0000ead0 <__sfp_lock_acquire>:
    ead0:	f800283a 	ret

0000ead4 <__sfp_lock_release>:
    ead4:	f800283a 	ret

0000ead8 <__sinit_lock_acquire>:
    ead8:	f800283a 	ret

0000eadc <__sinit_lock_release>:
    eadc:	f800283a 	ret

0000eae0 <__fp_lock_all>:
    eae0:	008000b4 	movhi	r2,2
    eae4:	11271e17 	ldw	r4,-25480(r2)
    eae8:	01400074 	movhi	r5,1
    eaec:	2979d704 	addi	r5,r5,-6308
    eaf0:	000ef201 	jmpi	ef20 <_fwalk>

0000eaf4 <__fp_unlock_all>:
    eaf4:	008000b4 	movhi	r2,2
    eaf8:	11271e17 	ldw	r4,-25480(r2)
    eafc:	01400074 	movhi	r5,1
    eb00:	2979dc04 	addi	r5,r5,-6288
    eb04:	000ef201 	jmpi	ef20 <_fwalk>

0000eb08 <_malloc_trim_r>:
    eb08:	defffb04 	addi	sp,sp,-20
    eb0c:	dcc00315 	stw	r19,12(sp)
    eb10:	04c000b4 	movhi	r19,2
    eb14:	dc800215 	stw	r18,8(sp)
    eb18:	dc400115 	stw	r17,4(sp)
    eb1c:	dc000015 	stw	r16,0(sp)
    eb20:	dfc00415 	stw	ra,16(sp)
    eb24:	2821883a 	mov	r16,r5
    eb28:	9ce11004 	addi	r19,r19,-31680
    eb2c:	2025883a 	mov	r18,r4
    eb30:	0014e880 	call	14e88 <__malloc_lock>
    eb34:	98800217 	ldw	r2,8(r19)
    eb38:	14400117 	ldw	r17,4(r2)
    eb3c:	00bfff04 	movi	r2,-4
    eb40:	88a2703a 	and	r17,r17,r2
    eb44:	8c21c83a 	sub	r16,r17,r16
    eb48:	8403fbc4 	addi	r16,r16,4079
    eb4c:	8020d33a 	srli	r16,r16,12
    eb50:	843fffc4 	addi	r16,r16,-1
    eb54:	8020933a 	slli	r16,r16,12
    eb58:	80840008 	cmpgei	r2,r16,4096
    eb5c:	10000626 	beq	r2,zero,eb78 <_malloc_trim_r+0x70>
    eb60:	000b883a 	mov	r5,zero
    eb64:	9009883a 	mov	r4,r18
    eb68:	000a8380 	call	a838 <_sbrk_r>
    eb6c:	98c00217 	ldw	r3,8(r19)
    eb70:	1c47883a 	add	r3,r3,r17
    eb74:	10c00a26 	beq	r2,r3,eba0 <_malloc_trim_r+0x98>
    eb78:	9009883a 	mov	r4,r18
    eb7c:	0014eac0 	call	14eac <__malloc_unlock>
    eb80:	0005883a 	mov	r2,zero
    eb84:	dfc00417 	ldw	ra,16(sp)
    eb88:	dcc00317 	ldw	r19,12(sp)
    eb8c:	dc800217 	ldw	r18,8(sp)
    eb90:	dc400117 	ldw	r17,4(sp)
    eb94:	dc000017 	ldw	r16,0(sp)
    eb98:	dec00504 	addi	sp,sp,20
    eb9c:	f800283a 	ret
    eba0:	040bc83a 	sub	r5,zero,r16
    eba4:	9009883a 	mov	r4,r18
    eba8:	000a8380 	call	a838 <_sbrk_r>
    ebac:	10bfffd8 	cmpnei	r2,r2,-1
    ebb0:	10000d26 	beq	r2,zero,ebe8 <_malloc_trim_r+0xe0>
    ebb4:	008000b4 	movhi	r2,2
    ebb8:	10ae5c17 	ldw	r2,-18064(r2)
    ebbc:	98c00217 	ldw	r3,8(r19)
    ebc0:	8c23c83a 	sub	r17,r17,r16
    ebc4:	8c400054 	ori	r17,r17,1
    ebc8:	1421c83a 	sub	r16,r2,r16
    ebcc:	1c400115 	stw	r17,4(r3)
    ebd0:	008000b4 	movhi	r2,2
    ebd4:	9009883a 	mov	r4,r18
    ebd8:	142e5c15 	stw	r16,-18064(r2)
    ebdc:	0014eac0 	call	14eac <__malloc_unlock>
    ebe0:	00800044 	movi	r2,1
    ebe4:	003fe706 	br	eb84 <_malloc_trim_r+0x7c>
    ebe8:	000b883a 	mov	r5,zero
    ebec:	9009883a 	mov	r4,r18
    ebf0:	000a8380 	call	a838 <_sbrk_r>
    ebf4:	99000217 	ldw	r4,8(r19)
    ebf8:	1107c83a 	sub	r3,r2,r4
    ebfc:	19400410 	cmplti	r5,r3,16
    ec00:	283fdd1e 	bne	r5,zero,eb78 <_malloc_trim_r+0x70>
    ec04:	014000b4 	movhi	r5,2
    ec08:	29671f17 	ldw	r5,-25476(r5)
    ec0c:	18c00054 	ori	r3,r3,1
    ec10:	20c00115 	stw	r3,4(r4)
    ec14:	1145c83a 	sub	r2,r2,r5
    ec18:	014000b4 	movhi	r5,2
    ec1c:	28ae5c15 	stw	r2,-18064(r5)
    ec20:	003fd506 	br	eb78 <_malloc_trim_r+0x70>

0000ec24 <_free_r>:
    ec24:	28004f26 	beq	r5,zero,ed64 <_free_r+0x140>
    ec28:	defffd04 	addi	sp,sp,-12
    ec2c:	dc400115 	stw	r17,4(sp)
    ec30:	dc000015 	stw	r16,0(sp)
    ec34:	2023883a 	mov	r17,r4
    ec38:	2821883a 	mov	r16,r5
    ec3c:	dfc00215 	stw	ra,8(sp)
    ec40:	0014e880 	call	14e88 <__malloc_lock>
    ec44:	81ffff17 	ldw	r7,-4(r16)
    ec48:	00bfff84 	movi	r2,-2
    ec4c:	80fffe04 	addi	r3,r16,-8
    ec50:	3884703a 	and	r2,r7,r2
    ec54:	010000b4 	movhi	r4,2
    ec58:	188d883a 	add	r6,r3,r2
    ec5c:	21211004 	addi	r4,r4,-31680
    ec60:	31400117 	ldw	r5,4(r6)
    ec64:	22000217 	ldw	r8,8(r4)
    ec68:	027fff04 	movi	r9,-4
    ec6c:	2a4a703a 	and	r5,r5,r9
    ec70:	41806426 	beq	r8,r6,ee04 <_free_r+0x1e0>
    ec74:	31400115 	stw	r5,4(r6)
    ec78:	39c0004c 	andi	r7,r7,1
    ec7c:	3151883a 	add	r8,r6,r5
    ec80:	3800281e 	bne	r7,zero,ed24 <_free_r+0x100>
    ec84:	82bffe17 	ldw	r10,-8(r16)
    ec88:	42000117 	ldw	r8,4(r8)
    ec8c:	01c000b4 	movhi	r7,2
    ec90:	1a87c83a 	sub	r3,r3,r10
    ec94:	1a400217 	ldw	r9,8(r3)
    ec98:	39e11204 	addi	r7,r7,-31672
    ec9c:	1285883a 	add	r2,r2,r10
    eca0:	4200004c 	andi	r8,r8,1
    eca4:	49c04c26 	beq	r9,r7,edd8 <_free_r+0x1b4>
    eca8:	1a800317 	ldw	r10,12(r3)
    ecac:	4a800315 	stw	r10,12(r9)
    ecb0:	52400215 	stw	r9,8(r10)
    ecb4:	40007126 	beq	r8,zero,ee7c <_free_r+0x258>
    ecb8:	11400054 	ori	r5,r2,1
    ecbc:	19400115 	stw	r5,4(r3)
    ecc0:	30800015 	stw	r2,0(r6)
    ecc4:	11408028 	cmpgeui	r5,r2,512
    ecc8:	28002c1e 	bne	r5,zero,ed7c <_free_r+0x158>
    eccc:	100ad0fa 	srli	r5,r2,3
    ecd0:	100cd17a 	srli	r6,r2,5
    ecd4:	00800044 	movi	r2,1
    ecd8:	29400044 	addi	r5,r5,1
    ecdc:	280a90fa 	slli	r5,r5,3
    ece0:	21c00117 	ldw	r7,4(r4)
    ece4:	1184983a 	sll	r2,r2,r6
    ece8:	214b883a 	add	r5,r4,r5
    ecec:	29800017 	ldw	r6,0(r5)
    ecf0:	11c4b03a 	or	r2,r2,r7
    ecf4:	29fffe04 	addi	r7,r5,-8
    ecf8:	19c00315 	stw	r7,12(r3)
    ecfc:	19800215 	stw	r6,8(r3)
    ed00:	20800115 	stw	r2,4(r4)
    ed04:	28c00015 	stw	r3,0(r5)
    ed08:	30c00315 	stw	r3,12(r6)
    ed0c:	8809883a 	mov	r4,r17
    ed10:	dfc00217 	ldw	ra,8(sp)
    ed14:	dc400117 	ldw	r17,4(sp)
    ed18:	dc000017 	ldw	r16,0(sp)
    ed1c:	dec00304 	addi	sp,sp,12
    ed20:	0014eac1 	jmpi	14eac <__malloc_unlock>
    ed24:	41c00117 	ldw	r7,4(r8)
    ed28:	39c0004c 	andi	r7,r7,1
    ed2c:	38000e1e 	bne	r7,zero,ed68 <_free_r+0x144>
    ed30:	01c000b4 	movhi	r7,2
    ed34:	1145883a 	add	r2,r2,r5
    ed38:	39e11204 	addi	r7,r7,-31672
    ed3c:	31400217 	ldw	r5,8(r6)
    ed40:	12400054 	ori	r9,r2,1
    ed44:	1891883a 	add	r8,r3,r2
    ed48:	29c05226 	beq	r5,r7,ee94 <_free_r+0x270>
    ed4c:	31800317 	ldw	r6,12(r6)
    ed50:	29800315 	stw	r6,12(r5)
    ed54:	31400215 	stw	r5,8(r6)
    ed58:	1a400115 	stw	r9,4(r3)
    ed5c:	40800015 	stw	r2,0(r8)
    ed60:	003fd806 	br	ecc4 <_free_r+0xa0>
    ed64:	f800283a 	ret
    ed68:	11400054 	ori	r5,r2,1
    ed6c:	817fff15 	stw	r5,-4(r16)
    ed70:	30800015 	stw	r2,0(r6)
    ed74:	11408028 	cmpgeui	r5,r2,512
    ed78:	283fd426 	beq	r5,zero,eccc <_free_r+0xa8>
    ed7c:	100ad27a 	srli	r5,r2,9
    ed80:	29800168 	cmpgeui	r6,r5,5
    ed84:	3000341e 	bne	r6,zero,ee58 <_free_r+0x234>
    ed88:	100ad1ba 	srli	r5,r2,6
    ed8c:	29800e44 	addi	r6,r5,57
    ed90:	300c90fa 	slli	r6,r6,3
    ed94:	29c00e04 	addi	r7,r5,56
    ed98:	218d883a 	add	r6,r4,r6
    ed9c:	31400017 	ldw	r5,0(r6)
    eda0:	31bffe04 	addi	r6,r6,-8
    eda4:	31404226 	beq	r6,r5,eeb0 <_free_r+0x28c>
    eda8:	01ffff04 	movi	r7,-4
    edac:	29000117 	ldw	r4,4(r5)
    edb0:	21c8703a 	and	r4,r4,r7
    edb4:	1100022e 	bgeu	r2,r4,edc0 <_free_r+0x19c>
    edb8:	29400217 	ldw	r5,8(r5)
    edbc:	317ffb1e 	bne	r6,r5,edac <_free_r+0x188>
    edc0:	29800317 	ldw	r6,12(r5)
    edc4:	19800315 	stw	r6,12(r3)
    edc8:	19400215 	stw	r5,8(r3)
    edcc:	30c00215 	stw	r3,8(r6)
    edd0:	28c00315 	stw	r3,12(r5)
    edd4:	003fcd06 	br	ed0c <_free_r+0xe8>
    edd8:	40004d1e 	bne	r8,zero,ef10 <_free_r+0x2ec>
    eddc:	31000317 	ldw	r4,12(r6)
    ede0:	31800217 	ldw	r6,8(r6)
    ede4:	2885883a 	add	r2,r5,r2
    ede8:	11400054 	ori	r5,r2,1
    edec:	31000315 	stw	r4,12(r6)
    edf0:	21800215 	stw	r6,8(r4)
    edf4:	19400115 	stw	r5,4(r3)
    edf8:	1887883a 	add	r3,r3,r2
    edfc:	18800015 	stw	r2,0(r3)
    ee00:	003fc206 	br	ed0c <_free_r+0xe8>
    ee04:	39c0004c 	andi	r7,r7,1
    ee08:	1145883a 	add	r2,r2,r5
    ee0c:	3800071e 	bne	r7,zero,ee2c <_free_r+0x208>
    ee10:	81fffe17 	ldw	r7,-8(r16)
    ee14:	19c7c83a 	sub	r3,r3,r7
    ee18:	19400317 	ldw	r5,12(r3)
    ee1c:	19800217 	ldw	r6,8(r3)
    ee20:	11c5883a 	add	r2,r2,r7
    ee24:	31400315 	stw	r5,12(r6)
    ee28:	29800215 	stw	r6,8(r5)
    ee2c:	014000b4 	movhi	r5,2
    ee30:	11800054 	ori	r6,r2,1
    ee34:	29672017 	ldw	r5,-25472(r5)
    ee38:	19800115 	stw	r6,4(r3)
    ee3c:	20c00215 	stw	r3,8(r4)
    ee40:	117fb236 	bltu	r2,r5,ed0c <_free_r+0xe8>
    ee44:	008000b4 	movhi	r2,2
    ee48:	116e5117 	ldw	r5,-18108(r2)
    ee4c:	8809883a 	mov	r4,r17
    ee50:	000eb080 	call	eb08 <_malloc_trim_r>
    ee54:	003fad06 	br	ed0c <_free_r+0xe8>
    ee58:	29800568 	cmpgeui	r6,r5,21
    ee5c:	30000926 	beq	r6,zero,ee84 <_free_r+0x260>
    ee60:	29801568 	cmpgeui	r6,r5,85
    ee64:	3000191e 	bne	r6,zero,eecc <_free_r+0x2a8>
    ee68:	100ad33a 	srli	r5,r2,12
    ee6c:	29801bc4 	addi	r6,r5,111
    ee70:	300c90fa 	slli	r6,r6,3
    ee74:	29c01b84 	addi	r7,r5,110
    ee78:	003fc706 	br	ed98 <_free_r+0x174>
    ee7c:	1145883a 	add	r2,r2,r5
    ee80:	003fae06 	br	ed3c <_free_r+0x118>
    ee84:	29801704 	addi	r6,r5,92
    ee88:	300c90fa 	slli	r6,r6,3
    ee8c:	29c016c4 	addi	r7,r5,91
    ee90:	003fc106 	br	ed98 <_free_r+0x174>
    ee94:	20c00515 	stw	r3,20(r4)
    ee98:	20c00415 	stw	r3,16(r4)
    ee9c:	19c00315 	stw	r7,12(r3)
    eea0:	19c00215 	stw	r7,8(r3)
    eea4:	1a400115 	stw	r9,4(r3)
    eea8:	40800015 	stw	r2,0(r8)
    eeac:	003f9706 	br	ed0c <_free_r+0xe8>
    eeb0:	380fd0ba 	srai	r7,r7,2
    eeb4:	00800044 	movi	r2,1
    eeb8:	22000117 	ldw	r8,4(r4)
    eebc:	11ce983a 	sll	r7,r2,r7
    eec0:	3a0eb03a 	or	r7,r7,r8
    eec4:	21c00115 	stw	r7,4(r4)
    eec8:	003fbe06 	br	edc4 <_free_r+0x1a0>
    eecc:	29805568 	cmpgeui	r6,r5,341
    eed0:	3000051e 	bne	r6,zero,eee8 <_free_r+0x2c4>
    eed4:	100ad3fa 	srli	r5,r2,15
    eed8:	29801e04 	addi	r6,r5,120
    eedc:	300c90fa 	slli	r6,r6,3
    eee0:	29c01dc4 	addi	r7,r5,119
    eee4:	003fac06 	br	ed98 <_free_r+0x174>
    eee8:	29415568 	cmpgeui	r5,r5,1365
    eeec:	2800051e 	bne	r5,zero,ef04 <_free_r+0x2e0>
    eef0:	100ad4ba 	srli	r5,r2,18
    eef4:	29801f44 	addi	r6,r5,125
    eef8:	300c90fa 	slli	r6,r6,3
    eefc:	29c01f04 	addi	r7,r5,124
    ef00:	003fa506 	br	ed98 <_free_r+0x174>
    ef04:	0180fe04 	movi	r6,1016
    ef08:	01c01f84 	movi	r7,126
    ef0c:	003fa206 	br	ed98 <_free_r+0x174>
    ef10:	11000054 	ori	r4,r2,1
    ef14:	19000115 	stw	r4,4(r3)
    ef18:	30800015 	stw	r2,0(r6)
    ef1c:	003f7b06 	br	ed0c <_free_r+0xe8>

0000ef20 <_fwalk>:
    ef20:	defffa04 	addi	sp,sp,-24
    ef24:	dd000415 	stw	r20,16(sp)
    ef28:	dcc00315 	stw	r19,12(sp)
    ef2c:	dc800215 	stw	r18,8(sp)
    ef30:	dfc00515 	stw	ra,20(sp)
    ef34:	dc400115 	stw	r17,4(sp)
    ef38:	dc000015 	stw	r16,0(sp)
    ef3c:	2827883a 	mov	r19,r5
    ef40:	2480b804 	addi	r18,r4,736
    ef44:	0029883a 	mov	r20,zero
    ef48:	94400117 	ldw	r17,4(r18)
    ef4c:	94000217 	ldw	r16,8(r18)
    ef50:	8c7fffc4 	addi	r17,r17,-1
    ef54:	88000d16 	blt	r17,zero,ef8c <_fwalk+0x6c>
    ef58:	8080030b 	ldhu	r2,12(r16)
    ef5c:	8c7fffc4 	addi	r17,r17,-1
    ef60:	108000b0 	cmpltui	r2,r2,2
    ef64:	1000061e 	bne	r2,zero,ef80 <_fwalk+0x60>
    ef68:	8080038f 	ldh	r2,14(r16)
    ef6c:	8009883a 	mov	r4,r16
    ef70:	10bfffe0 	cmpeqi	r2,r2,-1
    ef74:	1000021e 	bne	r2,zero,ef80 <_fwalk+0x60>
    ef78:	983ee83a 	callr	r19
    ef7c:	a0a8b03a 	or	r20,r20,r2
    ef80:	88bfffd8 	cmpnei	r2,r17,-1
    ef84:	84001a04 	addi	r16,r16,104
    ef88:	103ff31e 	bne	r2,zero,ef58 <_fwalk+0x38>
    ef8c:	94800017 	ldw	r18,0(r18)
    ef90:	903fed1e 	bne	r18,zero,ef48 <_fwalk+0x28>
    ef94:	a005883a 	mov	r2,r20
    ef98:	dfc00517 	ldw	ra,20(sp)
    ef9c:	dd000417 	ldw	r20,16(sp)
    efa0:	dcc00317 	ldw	r19,12(sp)
    efa4:	dc800217 	ldw	r18,8(sp)
    efa8:	dc400117 	ldw	r17,4(sp)
    efac:	dc000017 	ldw	r16,0(sp)
    efb0:	dec00604 	addi	sp,sp,24
    efb4:	f800283a 	ret

0000efb8 <_fwalk_reent>:
    efb8:	defff904 	addi	sp,sp,-28
    efbc:	dd400515 	stw	r21,20(sp)
    efc0:	dd000415 	stw	r20,16(sp)
    efc4:	dcc00315 	stw	r19,12(sp)
    efc8:	dc800215 	stw	r18,8(sp)
    efcc:	dfc00615 	stw	ra,24(sp)
    efd0:	dc400115 	stw	r17,4(sp)
    efd4:	dc000015 	stw	r16,0(sp)
    efd8:	202b883a 	mov	r21,r4
    efdc:	2827883a 	mov	r19,r5
    efe0:	2480b804 	addi	r18,r4,736
    efe4:	0029883a 	mov	r20,zero
    efe8:	94400117 	ldw	r17,4(r18)
    efec:	94000217 	ldw	r16,8(r18)
    eff0:	8c7fffc4 	addi	r17,r17,-1
    eff4:	88000e16 	blt	r17,zero,f030 <_fwalk_reent+0x78>
    eff8:	8080030b 	ldhu	r2,12(r16)
    effc:	8c7fffc4 	addi	r17,r17,-1
    f000:	108000b0 	cmpltui	r2,r2,2
    f004:	1000071e 	bne	r2,zero,f024 <_fwalk_reent+0x6c>
    f008:	8080038f 	ldh	r2,14(r16)
    f00c:	800b883a 	mov	r5,r16
    f010:	a809883a 	mov	r4,r21
    f014:	10bfffe0 	cmpeqi	r2,r2,-1
    f018:	1000021e 	bne	r2,zero,f024 <_fwalk_reent+0x6c>
    f01c:	983ee83a 	callr	r19
    f020:	a0a8b03a 	or	r20,r20,r2
    f024:	88bfffd8 	cmpnei	r2,r17,-1
    f028:	84001a04 	addi	r16,r16,104
    f02c:	103ff21e 	bne	r2,zero,eff8 <_fwalk_reent+0x40>
    f030:	94800017 	ldw	r18,0(r18)
    f034:	903fec1e 	bne	r18,zero,efe8 <_fwalk_reent+0x30>
    f038:	a005883a 	mov	r2,r20
    f03c:	dfc00617 	ldw	ra,24(sp)
    f040:	dd400517 	ldw	r21,20(sp)
    f044:	dd000417 	ldw	r20,16(sp)
    f048:	dcc00317 	ldw	r19,12(sp)
    f04c:	dc800217 	ldw	r18,8(sp)
    f050:	dc400117 	ldw	r17,4(sp)
    f054:	dc000017 	ldw	r16,0(sp)
    f058:	dec00704 	addi	sp,sp,28
    f05c:	f800283a 	ret

0000f060 <__localeconv_l>:
    f060:	20803c04 	addi	r2,r4,240
    f064:	f800283a 	ret

0000f068 <_localeconv_r>:
    f068:	008000b4 	movhi	r2,2
    f06c:	10a24e04 	addi	r2,r2,-30408
    f070:	f800283a 	ret

0000f074 <localeconv>:
    f074:	008000b4 	movhi	r2,2
    f078:	10a24e04 	addi	r2,r2,-30408
    f07c:	f800283a 	ret

0000f080 <__smakebuf_r>:
    f080:	2880030b 	ldhu	r2,12(r5)
    f084:	deffe804 	addi	sp,sp,-96
    f088:	dc001215 	stw	r16,72(sp)
    f08c:	dfc01715 	stw	ra,92(sp)
    f090:	dd001615 	stw	r20,88(sp)
    f094:	dcc01515 	stw	r19,84(sp)
    f098:	dc801415 	stw	r18,80(sp)
    f09c:	dc401315 	stw	r17,76(sp)
    f0a0:	10c0008c 	andi	r3,r2,2
    f0a4:	2821883a 	mov	r16,r5
    f0a8:	18000d26 	beq	r3,zero,f0e0 <__smakebuf_r+0x60>
    f0ac:	288010c4 	addi	r2,r5,67
    f0b0:	28800015 	stw	r2,0(r5)
    f0b4:	28800415 	stw	r2,16(r5)
    f0b8:	00800044 	movi	r2,1
    f0bc:	28800515 	stw	r2,20(r5)
    f0c0:	dfc01717 	ldw	ra,92(sp)
    f0c4:	dd001617 	ldw	r20,88(sp)
    f0c8:	dcc01517 	ldw	r19,84(sp)
    f0cc:	dc801417 	ldw	r18,80(sp)
    f0d0:	dc401317 	ldw	r17,76(sp)
    f0d4:	dc001217 	ldw	r16,72(sp)
    f0d8:	dec01804 	addi	sp,sp,96
    f0dc:	f800283a 	ret
    f0e0:	2940038f 	ldh	r5,14(r5)
    f0e4:	2023883a 	mov	r17,r4
    f0e8:	28002816 	blt	r5,zero,f18c <__smakebuf_r+0x10c>
    f0ec:	d80d883a 	mov	r6,sp
    f0f0:	00126240 	call	12624 <_fstat_r>
    f0f4:	10002416 	blt	r2,zero,f188 <__smakebuf_r+0x108>
    f0f8:	d8800117 	ldw	r2,4(sp)
    f0fc:	10bc000c 	andi	r2,r2,61440
    f100:	10880018 	cmpnei	r2,r2,8192
    f104:	1000461e 	bne	r2,zero,f220 <__smakebuf_r+0x1a0>
    f108:	8140038f 	ldh	r5,14(r16)
    f10c:	8809883a 	mov	r4,r17
    f110:	0012b180 	call	12b18 <_isatty_r>
    f114:	10003e26 	beq	r2,zero,f210 <__smakebuf_r+0x190>
    f118:	8080030b 	ldhu	r2,12(r16)
    f11c:	80c010c4 	addi	r3,r16,67
    f120:	80c00015 	stw	r3,0(r16)
    f124:	10800054 	ori	r2,r2,1
    f128:	8080030d 	sth	r2,12(r16)
    f12c:	00800044 	movi	r2,1
    f130:	80c00415 	stw	r3,16(r16)
    f134:	80800515 	stw	r2,20(r16)
    f138:	04c00044 	movi	r19,1
    f13c:	05010004 	movi	r20,1024
    f140:	04820004 	movi	r18,2048
    f144:	a00b883a 	mov	r5,r20
    f148:	8809883a 	mov	r4,r17
    f14c:	0009ed00 	call	9ed0 <_malloc_r>
    f150:	10001726 	beq	r2,zero,f1b0 <__smakebuf_r+0x130>
    f154:	80c0030b 	ldhu	r3,12(r16)
    f158:	01000074 	movhi	r4,1
    f15c:	2139d904 	addi	r4,r4,-6300
    f160:	89000f15 	stw	r4,60(r17)
    f164:	18c02014 	ori	r3,r3,128
    f168:	80c0030d 	sth	r3,12(r16)
    f16c:	80800015 	stw	r2,0(r16)
    f170:	80800415 	stw	r2,16(r16)
    f174:	85000515 	stw	r20,20(r16)
    f178:	98001d1e 	bne	r19,zero,f1f0 <__smakebuf_r+0x170>
    f17c:	90c6b03a 	or	r3,r18,r3
    f180:	80c0030d 	sth	r3,12(r16)
    f184:	003fce06 	br	f0c0 <__smakebuf_r+0x40>
    f188:	8080030b 	ldhu	r2,12(r16)
    f18c:	1080200c 	andi	r2,r2,128
    f190:	0027883a 	mov	r19,zero
    f194:	10001326 	beq	r2,zero,f1e4 <__smakebuf_r+0x164>
    f198:	05001004 	movi	r20,64
    f19c:	a00b883a 	mov	r5,r20
    f1a0:	8809883a 	mov	r4,r17
    f1a4:	0025883a 	mov	r18,zero
    f1a8:	0009ed00 	call	9ed0 <_malloc_r>
    f1ac:	103fe91e 	bne	r2,zero,f154 <__smakebuf_r+0xd4>
    f1b0:	8080030b 	ldhu	r2,12(r16)
    f1b4:	10c0800c 	andi	r3,r2,512
    f1b8:	183fc11e 	bne	r3,zero,f0c0 <__smakebuf_r+0x40>
    f1bc:	00ffff04 	movi	r3,-4
    f1c0:	10c4703a 	and	r2,r2,r3
    f1c4:	10800094 	ori	r2,r2,2
    f1c8:	80c010c4 	addi	r3,r16,67
    f1cc:	8080030d 	sth	r2,12(r16)
    f1d0:	00800044 	movi	r2,1
    f1d4:	80c00015 	stw	r3,0(r16)
    f1d8:	80c00415 	stw	r3,16(r16)
    f1dc:	80800515 	stw	r2,20(r16)
    f1e0:	003fb706 	br	f0c0 <__smakebuf_r+0x40>
    f1e4:	05010004 	movi	r20,1024
    f1e8:	0025883a 	mov	r18,zero
    f1ec:	003fd506 	br	f144 <__smakebuf_r+0xc4>
    f1f0:	8140038f 	ldh	r5,14(r16)
    f1f4:	8809883a 	mov	r4,r17
    f1f8:	0012b180 	call	12b18 <_isatty_r>
    f1fc:	80c0030b 	ldhu	r3,12(r16)
    f200:	103fde26 	beq	r2,zero,f17c <__smakebuf_r+0xfc>
    f204:	18ffff0c 	andi	r3,r3,65532
    f208:	18c00054 	ori	r3,r3,1
    f20c:	003fdb06 	br	f17c <__smakebuf_r+0xfc>
    f210:	04c00044 	movi	r19,1
    f214:	05010004 	movi	r20,1024
    f218:	04820004 	movi	r18,2048
    f21c:	003fc906 	br	f144 <__smakebuf_r+0xc4>
    f220:	0027883a 	mov	r19,zero
    f224:	05010004 	movi	r20,1024
    f228:	04820004 	movi	r18,2048
    f22c:	003fc506 	br	f144 <__smakebuf_r+0xc4>

0000f230 <__swhatbuf_r>:
    f230:	deffea04 	addi	sp,sp,-88
    f234:	dc001215 	stw	r16,72(sp)
    f238:	2821883a 	mov	r16,r5
    f23c:	2940038f 	ldh	r5,14(r5)
    f240:	dc801415 	stw	r18,80(sp)
    f244:	dc401315 	stw	r17,76(sp)
    f248:	dfc01515 	stw	ra,84(sp)
    f24c:	3023883a 	mov	r17,r6
    f250:	3825883a 	mov	r18,r7
    f254:	28001016 	blt	r5,zero,f298 <__swhatbuf_r+0x68>
    f258:	d80d883a 	mov	r6,sp
    f25c:	00126240 	call	12624 <_fstat_r>
    f260:	10000d16 	blt	r2,zero,f298 <__swhatbuf_r+0x68>
    f264:	d8c00117 	ldw	r3,4(sp)
    f268:	00820004 	movi	r2,2048
    f26c:	18fc000c 	andi	r3,r3,61440
    f270:	18c80020 	cmpeqi	r3,r3,8192
    f274:	90c00015 	stw	r3,0(r18)
    f278:	00c10004 	movi	r3,1024
    f27c:	88c00015 	stw	r3,0(r17)
    f280:	dfc01517 	ldw	ra,84(sp)
    f284:	dc801417 	ldw	r18,80(sp)
    f288:	dc401317 	ldw	r17,76(sp)
    f28c:	dc001217 	ldw	r16,72(sp)
    f290:	dec01604 	addi	sp,sp,88
    f294:	f800283a 	ret
    f298:	8080030b 	ldhu	r2,12(r16)
    f29c:	90000015 	stw	zero,0(r18)
    f2a0:	1080200c 	andi	r2,r2,128
    f2a4:	10000426 	beq	r2,zero,f2b8 <__swhatbuf_r+0x88>
    f2a8:	00801004 	movi	r2,64
    f2ac:	88800015 	stw	r2,0(r17)
    f2b0:	0005883a 	mov	r2,zero
    f2b4:	003ff206 	br	f280 <__swhatbuf_r+0x50>
    f2b8:	00810004 	movi	r2,1024
    f2bc:	88800015 	stw	r2,0(r17)
    f2c0:	0005883a 	mov	r2,zero
    f2c4:	003fee06 	br	f280 <__swhatbuf_r+0x50>

0000f2c8 <memchr>:
    f2c8:	208000cc 	andi	r2,r4,3
    f2cc:	280f883a 	mov	r7,r5
    f2d0:	10000e26 	beq	r2,zero,f30c <memchr+0x44>
    f2d4:	30bfffc4 	addi	r2,r6,-1
    f2d8:	30001726 	beq	r6,zero,f338 <memchr+0x70>
    f2dc:	29803fcc 	andi	r6,r5,255
    f2e0:	00000606 	br	f2fc <memchr+0x34>
    f2e4:	21000044 	addi	r4,r4,1
    f2e8:	20c000cc 	andi	r3,r4,3
    f2ec:	18000826 	beq	r3,zero,f310 <memchr+0x48>
    f2f0:	10bfffc4 	addi	r2,r2,-1
    f2f4:	10ffffe0 	cmpeqi	r3,r2,-1
    f2f8:	18000f1e 	bne	r3,zero,f338 <memchr+0x70>
    f2fc:	20c00003 	ldbu	r3,0(r4)
    f300:	19bff81e 	bne	r3,r6,f2e4 <memchr+0x1c>
    f304:	2005883a 	mov	r2,r4
    f308:	f800283a 	ret
    f30c:	3005883a 	mov	r2,r6
    f310:	10c00128 	cmpgeui	r3,r2,4
    f314:	18000a1e 	bne	r3,zero,f340 <memchr+0x78>
    f318:	10001e26 	beq	r2,zero,f394 <memchr+0xcc>
    f31c:	2087883a 	add	r3,r4,r2
    f320:	39803fcc 	andi	r6,r7,255
    f324:	2005883a 	mov	r2,r4
    f328:	11000003 	ldbu	r4,0(r2)
    f32c:	21bff626 	beq	r4,r6,f308 <memchr+0x40>
    f330:	10800044 	addi	r2,r2,1
    f334:	18bffc1e 	bne	r3,r2,f328 <memchr+0x60>
    f338:	0005883a 	mov	r2,zero
    f33c:	f800283a 	ret
    f340:	29403fcc 	andi	r5,r5,255
    f344:	280c923a 	slli	r6,r5,8
    f348:	027fbff4 	movhi	r9,65279
    f34c:	02202074 	movhi	r8,32897
    f350:	314ab03a 	or	r5,r6,r5
    f354:	280c943a 	slli	r6,r5,16
    f358:	4a7fbfc4 	addi	r9,r9,-257
    f35c:	42202004 	addi	r8,r8,-32640
    f360:	314cb03a 	or	r6,r6,r5
    f364:	20c00017 	ldw	r3,0(r4)
    f368:	30c6f03a 	xor	r3,r6,r3
    f36c:	1a4b883a 	add	r5,r3,r9
    f370:	00c6303a 	nor	r3,zero,r3
    f374:	28c6703a 	and	r3,r5,r3
    f378:	1a06703a 	and	r3,r3,r8
    f37c:	183fe71e 	bne	r3,zero,f31c <memchr+0x54>
    f380:	10bfff04 	addi	r2,r2,-4
    f384:	10c00128 	cmpgeui	r3,r2,4
    f388:	21000104 	addi	r4,r4,4
    f38c:	183ff51e 	bne	r3,zero,f364 <memchr+0x9c>
    f390:	003fe106 	br	f318 <memchr+0x50>
    f394:	f800283a 	ret

0000f398 <memset>:
    f398:	20c000cc 	andi	r3,r4,3
    f39c:	2005883a 	mov	r2,r4
    f3a0:	18003626 	beq	r3,zero,f47c <memset+0xe4>
    f3a4:	31ffffc4 	addi	r7,r6,-1
    f3a8:	30003326 	beq	r6,zero,f478 <memset+0xe0>
    f3ac:	2811883a 	mov	r8,r5
    f3b0:	2007883a 	mov	r3,r4
    f3b4:	00000306 	br	f3c4 <memset+0x2c>
    f3b8:	39ffffc4 	addi	r7,r7,-1
    f3bc:	39bfffe0 	cmpeqi	r6,r7,-1
    f3c0:	30002d1e 	bne	r6,zero,f478 <memset+0xe0>
    f3c4:	18c00044 	addi	r3,r3,1
    f3c8:	198000cc 	andi	r6,r3,3
    f3cc:	1a3fffc5 	stb	r8,-1(r3)
    f3d0:	303ff91e 	bne	r6,zero,f3b8 <memset+0x20>
    f3d4:	39000130 	cmpltui	r4,r7,4
    f3d8:	2000221e 	bne	r4,zero,f464 <memset+0xcc>
    f3dc:	29003fcc 	andi	r4,r5,255
    f3e0:	200c923a 	slli	r6,r4,8
    f3e4:	3a000430 	cmpltui	r8,r7,16
    f3e8:	3108b03a 	or	r4,r6,r4
    f3ec:	200c943a 	slli	r6,r4,16
    f3f0:	310cb03a 	or	r6,r6,r4
    f3f4:	40000e1e 	bne	r8,zero,f430 <memset+0x98>
    f3f8:	393ffc04 	addi	r4,r7,-16
    f3fc:	2008d13a 	srli	r4,r4,4
    f400:	21000044 	addi	r4,r4,1
    f404:	2008913a 	slli	r4,r4,4
    f408:	1909883a 	add	r4,r3,r4
    f40c:	19800015 	stw	r6,0(r3)
    f410:	19800115 	stw	r6,4(r3)
    f414:	19800215 	stw	r6,8(r3)
    f418:	19800315 	stw	r6,12(r3)
    f41c:	18c00404 	addi	r3,r3,16
    f420:	20fffa1e 	bne	r4,r3,f40c <memset+0x74>
    f424:	3900030c 	andi	r4,r7,12
    f428:	39c003cc 	andi	r7,r7,15
    f42c:	20000d26 	beq	r4,zero,f464 <memset+0xcc>
    f430:	1811883a 	mov	r8,r3
    f434:	42000104 	addi	r8,r8,4
    f438:	3a09c83a 	sub	r4,r7,r8
    f43c:	1909883a 	add	r4,r3,r4
    f440:	21000128 	cmpgeui	r4,r4,4
    f444:	41bfff15 	stw	r6,-4(r8)
    f448:	203ffa1e 	bne	r4,zero,f434 <memset+0x9c>
    f44c:	393fff04 	addi	r4,r7,-4
    f450:	2008d0ba 	srli	r4,r4,2
    f454:	39c000cc 	andi	r7,r7,3
    f458:	21000044 	addi	r4,r4,1
    f45c:	200890ba 	slli	r4,r4,2
    f460:	1907883a 	add	r3,r3,r4
    f464:	38000426 	beq	r7,zero,f478 <memset+0xe0>
    f468:	19cf883a 	add	r7,r3,r7
    f46c:	18c00044 	addi	r3,r3,1
    f470:	197fffc5 	stb	r5,-1(r3)
    f474:	38fffd1e 	bne	r7,r3,f46c <memset+0xd4>
    f478:	f800283a 	ret
    f47c:	2007883a 	mov	r3,r4
    f480:	300f883a 	mov	r7,r6
    f484:	003fd306 	br	f3d4 <memset+0x3c>

0000f488 <_Balloc>:
    f488:	20801317 	ldw	r2,76(r4)
    f48c:	defffc04 	addi	sp,sp,-16
    f490:	dc400115 	stw	r17,4(sp)
    f494:	dc000015 	stw	r16,0(sp)
    f498:	dfc00315 	stw	ra,12(sp)
    f49c:	dc800215 	stw	r18,8(sp)
    f4a0:	2021883a 	mov	r16,r4
    f4a4:	2823883a 	mov	r17,r5
    f4a8:	10000e26 	beq	r2,zero,f4e4 <_Balloc+0x5c>
    f4ac:	880690ba 	slli	r3,r17,2
    f4b0:	10c7883a 	add	r3,r2,r3
    f4b4:	18800017 	ldw	r2,0(r3)
    f4b8:	10001126 	beq	r2,zero,f500 <_Balloc+0x78>
    f4bc:	11000017 	ldw	r4,0(r2)
    f4c0:	19000015 	stw	r4,0(r3)
    f4c4:	10000415 	stw	zero,16(r2)
    f4c8:	10000315 	stw	zero,12(r2)
    f4cc:	dfc00317 	ldw	ra,12(sp)
    f4d0:	dc800217 	ldw	r18,8(sp)
    f4d4:	dc400117 	ldw	r17,4(sp)
    f4d8:	dc000017 	ldw	r16,0(sp)
    f4dc:	dec00404 	addi	sp,sp,16
    f4e0:	f800283a 	ret
    f4e4:	01800844 	movi	r6,33
    f4e8:	01400104 	movi	r5,4
    f4ec:	00120d80 	call	120d8 <_calloc_r>
    f4f0:	80801315 	stw	r2,76(r16)
    f4f4:	103fed1e 	bne	r2,zero,f4ac <_Balloc+0x24>
    f4f8:	0005883a 	mov	r2,zero
    f4fc:	003ff306 	br	f4cc <_Balloc+0x44>
    f500:	04800044 	movi	r18,1
    f504:	9464983a 	sll	r18,r18,r17
    f508:	01400044 	movi	r5,1
    f50c:	8009883a 	mov	r4,r16
    f510:	91800144 	addi	r6,r18,5
    f514:	300c90ba 	slli	r6,r6,2
    f518:	00120d80 	call	120d8 <_calloc_r>
    f51c:	103ff626 	beq	r2,zero,f4f8 <_Balloc+0x70>
    f520:	14400115 	stw	r17,4(r2)
    f524:	14800215 	stw	r18,8(r2)
    f528:	003fe606 	br	f4c4 <_Balloc+0x3c>

0000f52c <_Bfree>:
    f52c:	28000726 	beq	r5,zero,f54c <_Bfree+0x20>
    f530:	28c00117 	ldw	r3,4(r5)
    f534:	20801317 	ldw	r2,76(r4)
    f538:	180690ba 	slli	r3,r3,2
    f53c:	10c5883a 	add	r2,r2,r3
    f540:	10c00017 	ldw	r3,0(r2)
    f544:	28c00015 	stw	r3,0(r5)
    f548:	11400015 	stw	r5,0(r2)
    f54c:	f800283a 	ret

0000f550 <__multadd>:
    f550:	defff704 	addi	sp,sp,-36
    f554:	dc800215 	stw	r18,8(sp)
    f558:	2c800417 	ldw	r18,16(r5)
    f55c:	ddc00715 	stw	r23,28(sp)
    f560:	dd800615 	stw	r22,24(sp)
    f564:	dd400515 	stw	r21,20(sp)
    f568:	dd000415 	stw	r20,16(sp)
    f56c:	dcc00315 	stw	r19,12(sp)
    f570:	dc400115 	stw	r17,4(sp)
    f574:	dfc00815 	stw	ra,32(sp)
    f578:	dc000015 	stw	r16,0(sp)
    f57c:	2827883a 	mov	r19,r5
    f580:	2029883a 	mov	r20,r4
    f584:	302b883a 	mov	r21,r6
    f588:	3823883a 	mov	r17,r7
    f58c:	2d800504 	addi	r22,r5,20
    f590:	002f883a 	mov	r23,zero
    f594:	b4000017 	ldw	r16,0(r22)
    f598:	a80b883a 	mov	r5,r21
    f59c:	b5800104 	addi	r22,r22,4
    f5a0:	813fffcc 	andi	r4,r16,65535
    f5a4:	000714c0 	call	714c <__mulsi3>
    f5a8:	8008d43a 	srli	r4,r16,16
    f5ac:	a80b883a 	mov	r5,r21
    f5b0:	1461883a 	add	r16,r2,r17
    f5b4:	000714c0 	call	714c <__mulsi3>
    f5b8:	800ed43a 	srli	r7,r16,16
    f5bc:	843fffcc 	andi	r16,r16,65535
    f5c0:	bdc00044 	addi	r23,r23,1
    f5c4:	11c5883a 	add	r2,r2,r7
    f5c8:	1006943a 	slli	r3,r2,16
    f5cc:	1022d43a 	srli	r17,r2,16
    f5d0:	1c21883a 	add	r16,r3,r16
    f5d4:	b43fff15 	stw	r16,-4(r22)
    f5d8:	bcbfee16 	blt	r23,r18,f594 <__multadd+0x44>
    f5dc:	88000826 	beq	r17,zero,f600 <__multadd+0xb0>
    f5e0:	98800217 	ldw	r2,8(r19)
    f5e4:	9080120e 	bge	r18,r2,f630 <__multadd+0xe0>
    f5e8:	90800144 	addi	r2,r18,5
    f5ec:	100490ba 	slli	r2,r2,2
    f5f0:	94800044 	addi	r18,r18,1
    f5f4:	9885883a 	add	r2,r19,r2
    f5f8:	14400015 	stw	r17,0(r2)
    f5fc:	9c800415 	stw	r18,16(r19)
    f600:	9805883a 	mov	r2,r19
    f604:	dfc00817 	ldw	ra,32(sp)
    f608:	ddc00717 	ldw	r23,28(sp)
    f60c:	dd800617 	ldw	r22,24(sp)
    f610:	dd400517 	ldw	r21,20(sp)
    f614:	dd000417 	ldw	r20,16(sp)
    f618:	dcc00317 	ldw	r19,12(sp)
    f61c:	dc800217 	ldw	r18,8(sp)
    f620:	dc400117 	ldw	r17,4(sp)
    f624:	dc000017 	ldw	r16,0(sp)
    f628:	dec00904 	addi	sp,sp,36
    f62c:	f800283a 	ret
    f630:	99400117 	ldw	r5,4(r19)
    f634:	a009883a 	mov	r4,r20
    f638:	29400044 	addi	r5,r5,1
    f63c:	000f4880 	call	f488 <_Balloc>
    f640:	1021883a 	mov	r16,r2
    f644:	10001226 	beq	r2,zero,f690 <__multadd+0x140>
    f648:	99800417 	ldw	r6,16(r19)
    f64c:	99400304 	addi	r5,r19,12
    f650:	11000304 	addi	r4,r2,12
    f654:	31800084 	addi	r6,r6,2
    f658:	300c90ba 	slli	r6,r6,2
    f65c:	000a6b00 	call	a6b0 <memcpy>
    f660:	98000926 	beq	r19,zero,f688 <__multadd+0x138>
    f664:	98c00117 	ldw	r3,4(r19)
    f668:	a0801317 	ldw	r2,76(r20)
    f66c:	180690ba 	slli	r3,r3,2
    f670:	10c5883a 	add	r2,r2,r3
    f674:	10c00017 	ldw	r3,0(r2)
    f678:	98c00015 	stw	r3,0(r19)
    f67c:	14c00015 	stw	r19,0(r2)
    f680:	8027883a 	mov	r19,r16
    f684:	003fd806 	br	f5e8 <__multadd+0x98>
    f688:	8027883a 	mov	r19,r16
    f68c:	003fd606 	br	f5e8 <__multadd+0x98>
    f690:	01c00074 	movhi	r7,1
    f694:	01000074 	movhi	r4,1
    f698:	39debc04 	addi	r7,r7,31472
    f69c:	000d883a 	mov	r6,zero
    f6a0:	01402d44 	movi	r5,181
    f6a4:	211ed104 	addi	r4,r4,31556
    f6a8:	00120600 	call	12060 <__assert_func>

0000f6ac <__s2b>:
    f6ac:	defff904 	addi	sp,sp,-28
    f6b0:	dc800215 	stw	r18,8(sp)
    f6b4:	dc000015 	stw	r16,0(sp)
    f6b8:	2025883a 	mov	r18,r4
    f6bc:	2821883a 	mov	r16,r5
    f6c0:	39000204 	addi	r4,r7,8
    f6c4:	01400244 	movi	r5,9
    f6c8:	dcc00315 	stw	r19,12(sp)
    f6cc:	dc400115 	stw	r17,4(sp)
    f6d0:	dfc00615 	stw	ra,24(sp)
    f6d4:	3823883a 	mov	r17,r7
    f6d8:	dd400515 	stw	r21,20(sp)
    f6dc:	dd000415 	stw	r20,16(sp)
    f6e0:	3027883a 	mov	r19,r6
    f6e4:	0006f980 	call	6f98 <__divsi3>
    f6e8:	88c00290 	cmplti	r3,r17,10
    f6ec:	1800341e 	bne	r3,zero,f7c0 <__s2b+0x114>
    f6f0:	00c00044 	movi	r3,1
    f6f4:	000b883a 	mov	r5,zero
    f6f8:	18c7883a 	add	r3,r3,r3
    f6fc:	29400044 	addi	r5,r5,1
    f700:	18bffd16 	blt	r3,r2,f6f8 <__s2b+0x4c>
    f704:	9009883a 	mov	r4,r18
    f708:	000f4880 	call	f488 <_Balloc>
    f70c:	100b883a 	mov	r5,r2
    f710:	10002d26 	beq	r2,zero,f7c8 <__s2b+0x11c>
    f714:	d8800717 	ldw	r2,28(sp)
    f718:	28800515 	stw	r2,20(r5)
    f71c:	00800044 	movi	r2,1
    f720:	28800415 	stw	r2,16(r5)
    f724:	98800290 	cmplti	r2,r19,10
    f728:	1000221e 	bne	r2,zero,f7b4 <__s2b+0x108>
    f72c:	85400244 	addi	r21,r16,9
    f730:	a829883a 	mov	r20,r21
    f734:	84e1883a 	add	r16,r16,r19
    f738:	a1c00007 	ldb	r7,0(r20)
    f73c:	01800284 	movi	r6,10
    f740:	9009883a 	mov	r4,r18
    f744:	39fff404 	addi	r7,r7,-48
    f748:	000f5500 	call	f550 <__multadd>
    f74c:	a5000044 	addi	r20,r20,1
    f750:	100b883a 	mov	r5,r2
    f754:	a43ff81e 	bne	r20,r16,f738 <__s2b+0x8c>
    f758:	9c3ffe04 	addi	r16,r19,-8
    f75c:	ac21883a 	add	r16,r21,r16
    f760:	9c400a0e 	bge	r19,r17,f78c <__s2b+0xe0>
    f764:	8ce3c83a 	sub	r17,r17,r19
    f768:	8463883a 	add	r17,r16,r17
    f76c:	81c00007 	ldb	r7,0(r16)
    f770:	01800284 	movi	r6,10
    f774:	9009883a 	mov	r4,r18
    f778:	39fff404 	addi	r7,r7,-48
    f77c:	000f5500 	call	f550 <__multadd>
    f780:	84000044 	addi	r16,r16,1
    f784:	100b883a 	mov	r5,r2
    f788:	8c3ff81e 	bne	r17,r16,f76c <__s2b+0xc0>
    f78c:	2805883a 	mov	r2,r5
    f790:	dfc00617 	ldw	ra,24(sp)
    f794:	dd400517 	ldw	r21,20(sp)
    f798:	dd000417 	ldw	r20,16(sp)
    f79c:	dcc00317 	ldw	r19,12(sp)
    f7a0:	dc800217 	ldw	r18,8(sp)
    f7a4:	dc400117 	ldw	r17,4(sp)
    f7a8:	dc000017 	ldw	r16,0(sp)
    f7ac:	dec00704 	addi	sp,sp,28
    f7b0:	f800283a 	ret
    f7b4:	84000284 	addi	r16,r16,10
    f7b8:	04c00244 	movi	r19,9
    f7bc:	003fe806 	br	f760 <__s2b+0xb4>
    f7c0:	000b883a 	mov	r5,zero
    f7c4:	003fcf06 	br	f704 <__s2b+0x58>
    f7c8:	01c00074 	movhi	r7,1
    f7cc:	01000074 	movhi	r4,1
    f7d0:	39debc04 	addi	r7,r7,31472
    f7d4:	000d883a 	mov	r6,zero
    f7d8:	01403384 	movi	r5,206
    f7dc:	211ed104 	addi	r4,r4,31556
    f7e0:	00120600 	call	12060 <__assert_func>

0000f7e4 <__hi0bits>:
    f7e4:	20bfffec 	andhi	r2,r4,65535
    f7e8:	1000131e 	bne	r2,zero,f838 <__hi0bits+0x54>
    f7ec:	2008943a 	slli	r4,r4,16
    f7f0:	00800404 	movi	r2,16
    f7f4:	20ffc02c 	andhi	r3,r4,65280
    f7f8:	1800021e 	bne	r3,zero,f804 <__hi0bits+0x20>
    f7fc:	2008923a 	slli	r4,r4,8
    f800:	10800204 	addi	r2,r2,8
    f804:	20fc002c 	andhi	r3,r4,61440
    f808:	1800021e 	bne	r3,zero,f814 <__hi0bits+0x30>
    f80c:	2008913a 	slli	r4,r4,4
    f810:	10800104 	addi	r2,r2,4
    f814:	20f0002c 	andhi	r3,r4,49152
    f818:	1800021e 	bne	r3,zero,f824 <__hi0bits+0x40>
    f81c:	200890ba 	slli	r4,r4,2
    f820:	10800084 	addi	r2,r2,2
    f824:	20000316 	blt	r4,zero,f834 <__hi0bits+0x50>
    f828:	2110002c 	andhi	r4,r4,16384
    f82c:	10800044 	addi	r2,r2,1
    f830:	20000326 	beq	r4,zero,f840 <__hi0bits+0x5c>
    f834:	f800283a 	ret
    f838:	0005883a 	mov	r2,zero
    f83c:	003fed06 	br	f7f4 <__hi0bits+0x10>
    f840:	00800804 	movi	r2,32
    f844:	f800283a 	ret

0000f848 <__lo0bits>:
    f848:	20c00017 	ldw	r3,0(r4)
    f84c:	188001cc 	andi	r2,r3,7
    f850:	10000826 	beq	r2,zero,f874 <__lo0bits+0x2c>
    f854:	1880004c 	andi	r2,r3,1
    f858:	10001f1e 	bne	r2,zero,f8d8 <__lo0bits+0x90>
    f85c:	1880008c 	andi	r2,r3,2
    f860:	10002126 	beq	r2,zero,f8e8 <__lo0bits+0xa0>
    f864:	1806d07a 	srli	r3,r3,1
    f868:	00800044 	movi	r2,1
    f86c:	20c00015 	stw	r3,0(r4)
    f870:	f800283a 	ret
    f874:	18bfffcc 	andi	r2,r3,65535
    f878:	10001426 	beq	r2,zero,f8cc <__lo0bits+0x84>
    f87c:	0005883a 	mov	r2,zero
    f880:	19403fcc 	andi	r5,r3,255
    f884:	2800021e 	bne	r5,zero,f890 <__lo0bits+0x48>
    f888:	1806d23a 	srli	r3,r3,8
    f88c:	10800204 	addi	r2,r2,8
    f890:	194003cc 	andi	r5,r3,15
    f894:	2800021e 	bne	r5,zero,f8a0 <__lo0bits+0x58>
    f898:	1806d13a 	srli	r3,r3,4
    f89c:	10800104 	addi	r2,r2,4
    f8a0:	194000cc 	andi	r5,r3,3
    f8a4:	2800021e 	bne	r5,zero,f8b0 <__lo0bits+0x68>
    f8a8:	1806d0ba 	srli	r3,r3,2
    f8ac:	10800084 	addi	r2,r2,2
    f8b0:	1940004c 	andi	r5,r3,1
    f8b4:	2800031e 	bne	r5,zero,f8c4 <__lo0bits+0x7c>
    f8b8:	1806d07a 	srli	r3,r3,1
    f8bc:	10800044 	addi	r2,r2,1
    f8c0:	18000726 	beq	r3,zero,f8e0 <__lo0bits+0x98>
    f8c4:	20c00015 	stw	r3,0(r4)
    f8c8:	f800283a 	ret
    f8cc:	1806d43a 	srli	r3,r3,16
    f8d0:	00800404 	movi	r2,16
    f8d4:	003fea06 	br	f880 <__lo0bits+0x38>
    f8d8:	0005883a 	mov	r2,zero
    f8dc:	f800283a 	ret
    f8e0:	00800804 	movi	r2,32
    f8e4:	f800283a 	ret
    f8e8:	1806d0ba 	srli	r3,r3,2
    f8ec:	00800084 	movi	r2,2
    f8f0:	20c00015 	stw	r3,0(r4)
    f8f4:	f800283a 	ret

0000f8f8 <__i2b>:
    f8f8:	20c01317 	ldw	r3,76(r4)
    f8fc:	defffd04 	addi	sp,sp,-12
    f900:	dc400115 	stw	r17,4(sp)
    f904:	dc000015 	stw	r16,0(sp)
    f908:	dfc00215 	stw	ra,8(sp)
    f90c:	2021883a 	mov	r16,r4
    f910:	2823883a 	mov	r17,r5
    f914:	18000d26 	beq	r3,zero,f94c <__i2b+0x54>
    f918:	18800117 	ldw	r2,4(r3)
    f91c:	10001826 	beq	r2,zero,f980 <__i2b+0x88>
    f920:	11000017 	ldw	r4,0(r2)
    f924:	19000115 	stw	r4,4(r3)
    f928:	00c00044 	movi	r3,1
    f92c:	10000315 	stw	zero,12(r2)
    f930:	14400515 	stw	r17,20(r2)
    f934:	10c00415 	stw	r3,16(r2)
    f938:	dfc00217 	ldw	ra,8(sp)
    f93c:	dc400117 	ldw	r17,4(sp)
    f940:	dc000017 	ldw	r16,0(sp)
    f944:	dec00304 	addi	sp,sp,12
    f948:	f800283a 	ret
    f94c:	01800844 	movi	r6,33
    f950:	01400104 	movi	r5,4
    f954:	00120d80 	call	120d8 <_calloc_r>
    f958:	80801315 	stw	r2,76(r16)
    f95c:	1007883a 	mov	r3,r2
    f960:	103fed1e 	bne	r2,zero,f918 <__i2b+0x20>
    f964:	01c00074 	movhi	r7,1
    f968:	01000074 	movhi	r4,1
    f96c:	39debc04 	addi	r7,r7,31472
    f970:	000d883a 	mov	r6,zero
    f974:	01405004 	movi	r5,320
    f978:	211ed104 	addi	r4,r4,31556
    f97c:	00120600 	call	12060 <__assert_func>
    f980:	01800704 	movi	r6,28
    f984:	01400044 	movi	r5,1
    f988:	8009883a 	mov	r4,r16
    f98c:	00120d80 	call	120d8 <_calloc_r>
    f990:	103ff426 	beq	r2,zero,f964 <__i2b+0x6c>
    f994:	00c00044 	movi	r3,1
    f998:	10c00115 	stw	r3,4(r2)
    f99c:	00c00084 	movi	r3,2
    f9a0:	10c00215 	stw	r3,8(r2)
    f9a4:	003fe006 	br	f928 <__i2b+0x30>

0000f9a8 <__multiply>:
    f9a8:	defff004 	addi	sp,sp,-64
    f9ac:	dd800c15 	stw	r22,48(sp)
    f9b0:	dc400715 	stw	r17,28(sp)
    f9b4:	2d800417 	ldw	r22,16(r5)
    f9b8:	34400417 	ldw	r17,16(r6)
    f9bc:	dc800815 	stw	r18,32(sp)
    f9c0:	dc000615 	stw	r16,24(sp)
    f9c4:	dfc00f15 	stw	ra,60(sp)
    f9c8:	df000e15 	stw	fp,56(sp)
    f9cc:	ddc00d15 	stw	r23,52(sp)
    f9d0:	dd400b15 	stw	r21,44(sp)
    f9d4:	dd000a15 	stw	r20,40(sp)
    f9d8:	dcc00915 	stw	r19,36(sp)
    f9dc:	2825883a 	mov	r18,r5
    f9e0:	3021883a 	mov	r16,r6
    f9e4:	b4400516 	blt	r22,r17,f9fc <__multiply+0x54>
    f9e8:	8807883a 	mov	r3,r17
    f9ec:	2821883a 	mov	r16,r5
    f9f0:	b023883a 	mov	r17,r22
    f9f4:	3025883a 	mov	r18,r6
    f9f8:	182d883a 	mov	r22,r3
    f9fc:	80800217 	ldw	r2,8(r16)
    fa00:	8d87883a 	add	r3,r17,r22
    fa04:	d8c00015 	stw	r3,0(sp)
    fa08:	81400117 	ldw	r5,4(r16)
    fa0c:	10c0010e 	bge	r2,r3,fa14 <__multiply+0x6c>
    fa10:	29400044 	addi	r5,r5,1
    fa14:	000f4880 	call	f488 <_Balloc>
    fa18:	d8800515 	stw	r2,20(sp)
    fa1c:	10008c26 	beq	r2,zero,fc50 <__multiply+0x2a8>
    fa20:	d8800017 	ldw	r2,0(sp)
    fa24:	102690ba 	slli	r19,r2,2
    fa28:	d8800517 	ldw	r2,20(sp)
    fa2c:	15000504 	addi	r20,r2,20
    fa30:	a4c5883a 	add	r2,r20,r19
    fa34:	d8800115 	stw	r2,4(sp)
    fa38:	a0800a2e 	bgeu	r20,r2,fa64 <__multiply+0xbc>
    fa3c:	d8800117 	ldw	r2,4(sp)
    fa40:	d8c00517 	ldw	r3,20(sp)
    fa44:	000b883a 	mov	r5,zero
    fa48:	a009883a 	mov	r4,r20
    fa4c:	10cdc83a 	sub	r6,r2,r3
    fa50:	31bffac4 	addi	r6,r6,-21
    fa54:	300cd0ba 	srli	r6,r6,2
    fa58:	31800044 	addi	r6,r6,1
    fa5c:	300c90ba 	slli	r6,r6,2
    fa60:	000f3980 	call	f398 <memset>
    fa64:	b02c90ba 	slli	r22,r22,2
    fa68:	882290ba 	slli	r17,r17,2
    fa6c:	94800504 	addi	r18,r18,20
    fa70:	80800504 	addi	r2,r16,20
    fa74:	9587883a 	add	r3,r18,r22
    fa78:	d8800315 	stw	r2,12(sp)
    fa7c:	d8c00215 	stw	r3,8(sp)
    fa80:	1463883a 	add	r17,r2,r17
    fa84:	90c0542e 	bgeu	r18,r3,fbd8 <__multiply+0x230>
    fa88:	80800544 	addi	r2,r16,21
    fa8c:	88806d36 	bltu	r17,r2,fc44 <__multiply+0x29c>
    fa90:	8c05c83a 	sub	r2,r17,r16
    fa94:	10bffac4 	addi	r2,r2,-21
    fa98:	1004d0ba 	srli	r2,r2,2
    fa9c:	10800044 	addi	r2,r2,1
    faa0:	100490ba 	slli	r2,r2,2
    faa4:	d8800415 	stw	r2,16(sp)
    faa8:	00000606 	br	fac4 <__multiply+0x11c>
    faac:	102ad43a 	srli	r21,r2,16
    fab0:	a800271e 	bne	r21,zero,fb50 <__multiply+0x1a8>
    fab4:	d8800217 	ldw	r2,8(sp)
    fab8:	94800104 	addi	r18,r18,4
    fabc:	a5000104 	addi	r20,r20,4
    fac0:	9080452e 	bgeu	r18,r2,fbd8 <__multiply+0x230>
    fac4:	90800017 	ldw	r2,0(r18)
    fac8:	15ffffcc 	andi	r23,r2,65535
    facc:	b83ff726 	beq	r23,zero,faac <__multiply+0x104>
    fad0:	dd400317 	ldw	r21,12(sp)
    fad4:	a02d883a 	mov	r22,r20
    fad8:	0027883a 	mov	r19,zero
    fadc:	af000017 	ldw	fp,0(r21)
    fae0:	b4000017 	ldw	r16,0(r22)
    fae4:	b80b883a 	mov	r5,r23
    fae8:	e13fffcc 	andi	r4,fp,65535
    faec:	000714c0 	call	714c <__mulsi3>
    faf0:	e008d43a 	srli	r4,fp,16
    faf4:	823fffcc 	andi	r8,r16,65535
    faf8:	1205883a 	add	r2,r2,r8
    fafc:	b80b883a 	mov	r5,r23
    fb00:	14e7883a 	add	r19,r2,r19
    fb04:	8020d43a 	srli	r16,r16,16
    fb08:	000714c0 	call	714c <__mulsi3>
    fb0c:	9808d43a 	srli	r4,r19,16
    fb10:	1405883a 	add	r2,r2,r16
    fb14:	98ffffcc 	andi	r3,r19,65535
    fb18:	1105883a 	add	r2,r2,r4
    fb1c:	1008943a 	slli	r4,r2,16
    fb20:	b5800104 	addi	r22,r22,4
    fb24:	ad400104 	addi	r21,r21,4
    fb28:	20c6b03a 	or	r3,r4,r3
    fb2c:	b0ffff15 	stw	r3,-4(r22)
    fb30:	1026d43a 	srli	r19,r2,16
    fb34:	ac7fe936 	bltu	r21,r17,fadc <__multiply+0x134>
    fb38:	d8800417 	ldw	r2,16(sp)
    fb3c:	a085883a 	add	r2,r20,r2
    fb40:	14c00015 	stw	r19,0(r2)
    fb44:	90800017 	ldw	r2,0(r18)
    fb48:	102ad43a 	srli	r21,r2,16
    fb4c:	a83fd926 	beq	r21,zero,fab4 <__multiply+0x10c>
    fb50:	a5c00017 	ldw	r23,0(r20)
    fb54:	dd800317 	ldw	r22,12(sp)
    fb58:	a027883a 	mov	r19,r20
    fb5c:	b821883a 	mov	r16,r23
    fb60:	0039883a 	mov	fp,zero
    fb64:	b100000b 	ldhu	r4,0(r22)
    fb68:	a80b883a 	mov	r5,r21
    fb6c:	9cc00104 	addi	r19,r19,4
    fb70:	000714c0 	call	714c <__mulsi3>
    fb74:	800cd43a 	srli	r6,r16,16
    fb78:	b8ffffcc 	andi	r3,r23,65535
    fb7c:	b5800104 	addi	r22,r22,4
    fb80:	118d883a 	add	r6,r2,r6
    fb84:	3739883a 	add	fp,r6,fp
    fb88:	e004943a 	slli	r2,fp,16
    fb8c:	9c000017 	ldw	r16,0(r19)
    fb90:	a80b883a 	mov	r5,r21
    fb94:	10c6b03a 	or	r3,r2,r3
    fb98:	98ffff15 	stw	r3,-4(r19)
    fb9c:	b13fff8b 	ldhu	r4,-2(r22)
    fba0:	000714c0 	call	714c <__mulsi3>
    fba4:	e00cd43a 	srli	r6,fp,16
    fba8:	80ffffcc 	andi	r3,r16,65535
    fbac:	10c7883a 	add	r3,r2,r3
    fbb0:	19af883a 	add	r23,r3,r6
    fbb4:	b838d43a 	srli	fp,r23,16
    fbb8:	b47fea36 	bltu	r22,r17,fb64 <__multiply+0x1bc>
    fbbc:	d8800417 	ldw	r2,16(sp)
    fbc0:	94800104 	addi	r18,r18,4
    fbc4:	a085883a 	add	r2,r20,r2
    fbc8:	15c00015 	stw	r23,0(r2)
    fbcc:	d8800217 	ldw	r2,8(sp)
    fbd0:	a5000104 	addi	r20,r20,4
    fbd4:	90bfbb36 	bltu	r18,r2,fac4 <__multiply+0x11c>
    fbd8:	d8800017 	ldw	r2,0(sp)
    fbdc:	00800516 	blt	zero,r2,fbf4 <__multiply+0x24c>
    fbe0:	00000906 	br	fc08 <__multiply+0x260>
    fbe4:	d8800017 	ldw	r2,0(sp)
    fbe8:	10bfffc4 	addi	r2,r2,-1
    fbec:	d8800015 	stw	r2,0(sp)
    fbf0:	10000526 	beq	r2,zero,fc08 <__multiply+0x260>
    fbf4:	d8c00117 	ldw	r3,4(sp)
    fbf8:	18bfff17 	ldw	r2,-4(r3)
    fbfc:	18ffff04 	addi	r3,r3,-4
    fc00:	d8c00115 	stw	r3,4(sp)
    fc04:	103ff726 	beq	r2,zero,fbe4 <__multiply+0x23c>
    fc08:	d8800517 	ldw	r2,20(sp)
    fc0c:	d8c00017 	ldw	r3,0(sp)
    fc10:	10c00415 	stw	r3,16(r2)
    fc14:	dfc00f17 	ldw	ra,60(sp)
    fc18:	df000e17 	ldw	fp,56(sp)
    fc1c:	ddc00d17 	ldw	r23,52(sp)
    fc20:	dd800c17 	ldw	r22,48(sp)
    fc24:	dd400b17 	ldw	r21,44(sp)
    fc28:	dd000a17 	ldw	r20,40(sp)
    fc2c:	dcc00917 	ldw	r19,36(sp)
    fc30:	dc800817 	ldw	r18,32(sp)
    fc34:	dc400717 	ldw	r17,28(sp)
    fc38:	dc000617 	ldw	r16,24(sp)
    fc3c:	dec01004 	addi	sp,sp,64
    fc40:	f800283a 	ret
    fc44:	00800104 	movi	r2,4
    fc48:	d8800415 	stw	r2,16(sp)
    fc4c:	003f9d06 	br	fac4 <__multiply+0x11c>
    fc50:	01c00074 	movhi	r7,1
    fc54:	01000074 	movhi	r4,1
    fc58:	39debc04 	addi	r7,r7,31472
    fc5c:	000d883a 	mov	r6,zero
    fc60:	01405744 	movi	r5,349
    fc64:	211ed104 	addi	r4,r4,31556
    fc68:	00120600 	call	12060 <__assert_func>

0000fc6c <__pow5mult>:
    fc6c:	defffb04 	addi	sp,sp,-20
    fc70:	dcc00315 	stw	r19,12(sp)
    fc74:	dc000015 	stw	r16,0(sp)
    fc78:	dfc00415 	stw	ra,16(sp)
    fc7c:	dc800215 	stw	r18,8(sp)
    fc80:	dc400115 	stw	r17,4(sp)
    fc84:	308000cc 	andi	r2,r6,3
    fc88:	3021883a 	mov	r16,r6
    fc8c:	2027883a 	mov	r19,r4
    fc90:	10002d1e 	bne	r2,zero,fd48 <__pow5mult+0xdc>
    fc94:	2825883a 	mov	r18,r5
    fc98:	8021d0ba 	srai	r16,r16,2
    fc9c:	80001926 	beq	r16,zero,fd04 <__pow5mult+0x98>
    fca0:	9c401217 	ldw	r17,72(r19)
    fca4:	8800061e 	bne	r17,zero,fcc0 <__pow5mult+0x54>
    fca8:	00002f06 	br	fd68 <__pow5mult+0xfc>
    fcac:	8021d07a 	srai	r16,r16,1
    fcb0:	80001426 	beq	r16,zero,fd04 <__pow5mult+0x98>
    fcb4:	88800017 	ldw	r2,0(r17)
    fcb8:	10001a26 	beq	r2,zero,fd24 <__pow5mult+0xb8>
    fcbc:	1023883a 	mov	r17,r2
    fcc0:	8080004c 	andi	r2,r16,1
    fcc4:	103ff926 	beq	r2,zero,fcac <__pow5mult+0x40>
    fcc8:	880d883a 	mov	r6,r17
    fccc:	900b883a 	mov	r5,r18
    fcd0:	9809883a 	mov	r4,r19
    fcd4:	000f9a80 	call	f9a8 <__multiply>
    fcd8:	90001926 	beq	r18,zero,fd40 <__pow5mult+0xd4>
    fcdc:	91000117 	ldw	r4,4(r18)
    fce0:	98c01317 	ldw	r3,76(r19)
    fce4:	8021d07a 	srai	r16,r16,1
    fce8:	200890ba 	slli	r4,r4,2
    fcec:	1907883a 	add	r3,r3,r4
    fcf0:	19000017 	ldw	r4,0(r3)
    fcf4:	91000015 	stw	r4,0(r18)
    fcf8:	1c800015 	stw	r18,0(r3)
    fcfc:	1025883a 	mov	r18,r2
    fd00:	803fec1e 	bne	r16,zero,fcb4 <__pow5mult+0x48>
    fd04:	9005883a 	mov	r2,r18
    fd08:	dfc00417 	ldw	ra,16(sp)
    fd0c:	dcc00317 	ldw	r19,12(sp)
    fd10:	dc800217 	ldw	r18,8(sp)
    fd14:	dc400117 	ldw	r17,4(sp)
    fd18:	dc000017 	ldw	r16,0(sp)
    fd1c:	dec00504 	addi	sp,sp,20
    fd20:	f800283a 	ret
    fd24:	880d883a 	mov	r6,r17
    fd28:	880b883a 	mov	r5,r17
    fd2c:	9809883a 	mov	r4,r19
    fd30:	000f9a80 	call	f9a8 <__multiply>
    fd34:	88800015 	stw	r2,0(r17)
    fd38:	10000015 	stw	zero,0(r2)
    fd3c:	003fdf06 	br	fcbc <__pow5mult+0x50>
    fd40:	1025883a 	mov	r18,r2
    fd44:	003fd906 	br	fcac <__pow5mult+0x40>
    fd48:	100490ba 	slli	r2,r2,2
    fd4c:	00c00074 	movhi	r3,1
    fd50:	000f883a 	mov	r7,zero
    fd54:	10c7883a 	add	r3,r2,r3
    fd58:	199ee017 	ldw	r6,31616(r3)
    fd5c:	000f5500 	call	f550 <__multadd>
    fd60:	1025883a 	mov	r18,r2
    fd64:	003fcc06 	br	fc98 <__pow5mult+0x2c>
    fd68:	01400044 	movi	r5,1
    fd6c:	9809883a 	mov	r4,r19
    fd70:	000f4880 	call	f488 <_Balloc>
    fd74:	1023883a 	mov	r17,r2
    fd78:	10000726 	beq	r2,zero,fd98 <__pow5mult+0x12c>
    fd7c:	00809c44 	movi	r2,625
    fd80:	88800515 	stw	r2,20(r17)
    fd84:	00800044 	movi	r2,1
    fd88:	88800415 	stw	r2,16(r17)
    fd8c:	9c401215 	stw	r17,72(r19)
    fd90:	88000015 	stw	zero,0(r17)
    fd94:	003fca06 	br	fcc0 <__pow5mult+0x54>
    fd98:	01c00074 	movhi	r7,1
    fd9c:	01000074 	movhi	r4,1
    fda0:	39debc04 	addi	r7,r7,31472
    fda4:	000d883a 	mov	r6,zero
    fda8:	01405004 	movi	r5,320
    fdac:	211ed104 	addi	r4,r4,31556
    fdb0:	00120600 	call	12060 <__assert_func>

0000fdb4 <__lshift>:
    fdb4:	defff804 	addi	sp,sp,-32
    fdb8:	dd800615 	stw	r22,24(sp)
    fdbc:	dc000015 	stw	r16,0(sp)
    fdc0:	302dd17a 	srai	r22,r6,5
    fdc4:	2c000417 	ldw	r16,16(r5)
    fdc8:	28800217 	ldw	r2,8(r5)
    fdcc:	dd000415 	stw	r20,16(sp)
    fdd0:	b421883a 	add	r16,r22,r16
    fdd4:	dcc00315 	stw	r19,12(sp)
    fdd8:	dc800215 	stw	r18,8(sp)
    fddc:	dc400115 	stw	r17,4(sp)
    fde0:	dfc00715 	stw	ra,28(sp)
    fde4:	dd400515 	stw	r21,20(sp)
    fde8:	85000044 	addi	r20,r16,1
    fdec:	2827883a 	mov	r19,r5
    fdf0:	3025883a 	mov	r18,r6
    fdf4:	29400117 	ldw	r5,4(r5)
    fdf8:	2023883a 	mov	r17,r4
    fdfc:	1500030e 	bge	r2,r20,fe0c <__lshift+0x58>
    fe00:	1085883a 	add	r2,r2,r2
    fe04:	29400044 	addi	r5,r5,1
    fe08:	153ffd16 	blt	r2,r20,fe00 <__lshift+0x4c>
    fe0c:	8809883a 	mov	r4,r17
    fe10:	000f4880 	call	f488 <_Balloc>
    fe14:	102b883a 	mov	r21,r2
    fe18:	10004126 	beq	r2,zero,ff20 <__lshift+0x16c>
    fe1c:	11000504 	addi	r4,r2,20
    fe20:	0580050e 	bge	zero,r22,fe38 <__lshift+0x84>
    fe24:	b02c90ba 	slli	r22,r22,2
    fe28:	000b883a 	mov	r5,zero
    fe2c:	b00d883a 	mov	r6,r22
    fe30:	000f3980 	call	f398 <memset>
    fe34:	1589883a 	add	r4,r2,r22
    fe38:	9a000417 	ldw	r8,16(r19)
    fe3c:	98c00504 	addi	r3,r19,20
    fe40:	948007cc 	andi	r18,r18,31
    fe44:	401090ba 	slli	r8,r8,2
    fe48:	1a11883a 	add	r8,r3,r8
    fe4c:	90002c26 	beq	r18,zero,ff00 <__lshift+0x14c>
    fe50:	01400804 	movi	r5,32
    fe54:	2c8bc83a 	sub	r5,r5,r18
    fe58:	2005883a 	mov	r2,r4
    fe5c:	000f883a 	mov	r7,zero
    fe60:	19800017 	ldw	r6,0(r3)
    fe64:	10800104 	addi	r2,r2,4
    fe68:	18c00104 	addi	r3,r3,4
    fe6c:	348c983a 	sll	r6,r6,r18
    fe70:	31ccb03a 	or	r6,r6,r7
    fe74:	11bfff15 	stw	r6,-4(r2)
    fe78:	19bfff17 	ldw	r6,-4(r3)
    fe7c:	314ed83a 	srl	r7,r6,r5
    fe80:	1a3ff736 	bltu	r3,r8,fe60 <__lshift+0xac>
    fe84:	98800544 	addi	r2,r19,21
    fe88:	40802336 	bltu	r8,r2,ff18 <__lshift+0x164>
    fe8c:	44c7c83a 	sub	r3,r8,r19
    fe90:	18fffac4 	addi	r3,r3,-21
    fe94:	1806d0ba 	srli	r3,r3,2
    fe98:	18c00044 	addi	r3,r3,1
    fe9c:	180690ba 	slli	r3,r3,2
    fea0:	20c9883a 	add	r4,r4,r3
    fea4:	21c00015 	stw	r7,0(r4)
    fea8:	38000126 	beq	r7,zero,feb0 <__lshift+0xfc>
    feac:	a021883a 	mov	r16,r20
    feb0:	ac000415 	stw	r16,16(r21)
    feb4:	98000726 	beq	r19,zero,fed4 <__lshift+0x120>
    feb8:	98c00117 	ldw	r3,4(r19)
    febc:	88801317 	ldw	r2,76(r17)
    fec0:	180690ba 	slli	r3,r3,2
    fec4:	10c5883a 	add	r2,r2,r3
    fec8:	10c00017 	ldw	r3,0(r2)
    fecc:	98c00015 	stw	r3,0(r19)
    fed0:	14c00015 	stw	r19,0(r2)
    fed4:	a805883a 	mov	r2,r21
    fed8:	dfc00717 	ldw	ra,28(sp)
    fedc:	dd800617 	ldw	r22,24(sp)
    fee0:	dd400517 	ldw	r21,20(sp)
    fee4:	dd000417 	ldw	r20,16(sp)
    fee8:	dcc00317 	ldw	r19,12(sp)
    feec:	dc800217 	ldw	r18,8(sp)
    fef0:	dc400117 	ldw	r17,4(sp)
    fef4:	dc000017 	ldw	r16,0(sp)
    fef8:	dec00804 	addi	sp,sp,32
    fefc:	f800283a 	ret
    ff00:	18800017 	ldw	r2,0(r3)
    ff04:	18c00104 	addi	r3,r3,4
    ff08:	21000104 	addi	r4,r4,4
    ff0c:	20bfff15 	stw	r2,-4(r4)
    ff10:	1a3ffb36 	bltu	r3,r8,ff00 <__lshift+0x14c>
    ff14:	003fe606 	br	feb0 <__lshift+0xfc>
    ff18:	00c00104 	movi	r3,4
    ff1c:	003fe006 	br	fea0 <__lshift+0xec>
    ff20:	01c00074 	movhi	r7,1
    ff24:	01000074 	movhi	r4,1
    ff28:	39debc04 	addi	r7,r7,31472
    ff2c:	000d883a 	mov	r6,zero
    ff30:	01407644 	movi	r5,473
    ff34:	211ed104 	addi	r4,r4,31556
    ff38:	00120600 	call	12060 <__assert_func>

0000ff3c <__mcmp>:
    ff3c:	21800417 	ldw	r6,16(r4)
    ff40:	28c00417 	ldw	r3,16(r5)
    ff44:	30c5c83a 	sub	r2,r6,r3
    ff48:	30c00e1e 	bne	r6,r3,ff84 <__mcmp+0x48>
    ff4c:	180690ba 	slli	r3,r3,2
    ff50:	21c00504 	addi	r7,r4,20
    ff54:	29400504 	addi	r5,r5,20
    ff58:	38c9883a 	add	r4,r7,r3
    ff5c:	28c7883a 	add	r3,r5,r3
    ff60:	00000106 	br	ff68 <__mcmp+0x2c>
    ff64:	3900082e 	bgeu	r7,r4,ff88 <__mcmp+0x4c>
    ff68:	21bfff17 	ldw	r6,-4(r4)
    ff6c:	197fff17 	ldw	r5,-4(r3)
    ff70:	213fff04 	addi	r4,r4,-4
    ff74:	18ffff04 	addi	r3,r3,-4
    ff78:	317ffa26 	beq	r6,r5,ff64 <__mcmp+0x28>
    ff7c:	3140032e 	bgeu	r6,r5,ff8c <__mcmp+0x50>
    ff80:	00bfffc4 	movi	r2,-1
    ff84:	f800283a 	ret
    ff88:	f800283a 	ret
    ff8c:	00800044 	movi	r2,1
    ff90:	f800283a 	ret

0000ff94 <__mdiff>:
    ff94:	28800417 	ldw	r2,16(r5)
    ff98:	30c00417 	ldw	r3,16(r6)
    ff9c:	defffc04 	addi	sp,sp,-16
    ffa0:	dc800215 	stw	r18,8(sp)
    ffa4:	dc400115 	stw	r17,4(sp)
    ffa8:	dc000015 	stw	r16,0(sp)
    ffac:	dfc00315 	stw	ra,12(sp)
    ffb0:	2823883a 	mov	r17,r5
    ffb4:	3021883a 	mov	r16,r6
    ffb8:	10e5c83a 	sub	r18,r2,r3
    ffbc:	10c0641e 	bne	r2,r3,10150 <__mdiff+0x1bc>
    ffc0:	180c90ba 	slli	r6,r3,2
    ffc4:	29400504 	addi	r5,r5,20
    ffc8:	80c00504 	addi	r3,r16,20
    ffcc:	2985883a 	add	r2,r5,r6
    ffd0:	1987883a 	add	r3,r3,r6
    ffd4:	00000106 	br	ffdc <__mdiff+0x48>
    ffd8:	2880642e 	bgeu	r5,r2,1016c <__mdiff+0x1d8>
    ffdc:	11bfff17 	ldw	r6,-4(r2)
    ffe0:	19ffff17 	ldw	r7,-4(r3)
    ffe4:	10bfff04 	addi	r2,r2,-4
    ffe8:	18ffff04 	addi	r3,r3,-4
    ffec:	31fffa26 	beq	r6,r7,ffd8 <__mdiff+0x44>
    fff0:	31c05236 	bltu	r6,r7,1013c <__mdiff+0x1a8>
    fff4:	89400117 	ldw	r5,4(r17)
    fff8:	000f4880 	call	f488 <_Balloc>
    fffc:	10006226 	beq	r2,zero,10188 <__mdiff+0x1f4>
   10000:	8a400417 	ldw	r9,16(r17)
   10004:	83000417 	ldw	r12,16(r16)
   10008:	8ac00504 	addi	r11,r17,20
   1000c:	481090ba 	slli	r8,r9,2
   10010:	601890ba 	slli	r12,r12,2
   10014:	81800504 	addi	r6,r16,20
   10018:	13400504 	addi	r13,r2,20
   1001c:	14800315 	stw	r18,12(r2)
   10020:	5a11883a 	add	r8,r11,r8
   10024:	3319883a 	add	r12,r6,r12
   10028:	681d883a 	mov	r14,r13
   1002c:	5815883a 	mov	r10,r11
   10030:	0007883a 	mov	r3,zero
   10034:	51000017 	ldw	r4,0(r10)
   10038:	31c00017 	ldw	r7,0(r6)
   1003c:	73800104 	addi	r14,r14,4
   10040:	217fffcc 	andi	r5,r4,65535
   10044:	28cb883a 	add	r5,r5,r3
   10048:	38ffffcc 	andi	r3,r7,65535
   1004c:	28cbc83a 	sub	r5,r5,r3
   10050:	380ed43a 	srli	r7,r7,16
   10054:	2006d43a 	srli	r3,r4,16
   10058:	2809d43a 	srai	r4,r5,16
   1005c:	297fffcc 	andi	r5,r5,65535
   10060:	19c7c83a 	sub	r3,r3,r7
   10064:	1907883a 	add	r3,r3,r4
   10068:	1808943a 	slli	r4,r3,16
   1006c:	31800104 	addi	r6,r6,4
   10070:	1807d43a 	srai	r3,r3,16
   10074:	214ab03a 	or	r5,r4,r5
   10078:	717fff15 	stw	r5,-4(r14)
   1007c:	52800104 	addi	r10,r10,4
   10080:	333fec36 	bltu	r6,r12,10034 <__mdiff+0xa0>
   10084:	640fc83a 	sub	r7,r12,r16
   10088:	39fffac4 	addi	r7,r7,-21
   1008c:	84000544 	addi	r16,r16,21
   10090:	380ed0ba 	srli	r7,r7,2
   10094:	64003336 	bltu	r12,r16,10164 <__mdiff+0x1d0>
   10098:	380890ba 	slli	r4,r7,2
   1009c:	6909883a 	add	r4,r13,r4
   100a0:	64002e36 	bltu	r12,r16,1015c <__mdiff+0x1c8>
   100a4:	39800044 	addi	r6,r7,1
   100a8:	300c90ba 	slli	r6,r6,2
   100ac:	5997883a 	add	r11,r11,r6
   100b0:	699b883a 	add	r13,r13,r6
   100b4:	5a00152e 	bgeu	r11,r8,1010c <__mdiff+0x178>
   100b8:	680f883a 	mov	r7,r13
   100bc:	580d883a 	mov	r6,r11
   100c0:	31000017 	ldw	r4,0(r6)
   100c4:	39c00104 	addi	r7,r7,4
   100c8:	31800104 	addi	r6,r6,4
   100cc:	217fffcc 	andi	r5,r4,65535
   100d0:	28cb883a 	add	r5,r5,r3
   100d4:	2815d43a 	srai	r10,r5,16
   100d8:	2006d43a 	srli	r3,r4,16
   100dc:	297fffcc 	andi	r5,r5,65535
   100e0:	1a87883a 	add	r3,r3,r10
   100e4:	1814943a 	slli	r10,r3,16
   100e8:	1807d43a 	srai	r3,r3,16
   100ec:	514ab03a 	or	r5,r10,r5
   100f0:	397fff15 	stw	r5,-4(r7)
   100f4:	323ff236 	bltu	r6,r8,100c0 <__mdiff+0x12c>
   100f8:	413fffc4 	addi	r4,r8,-1
   100fc:	22c9c83a 	sub	r4,r4,r11
   10100:	2008d0ba 	srli	r4,r4,2
   10104:	200890ba 	slli	r4,r4,2
   10108:	6909883a 	add	r4,r13,r4
   1010c:	2800041e 	bne	r5,zero,10120 <__mdiff+0x18c>
   10110:	20ffff17 	ldw	r3,-4(r4)
   10114:	4a7fffc4 	addi	r9,r9,-1
   10118:	213fff04 	addi	r4,r4,-4
   1011c:	183ffc26 	beq	r3,zero,10110 <__mdiff+0x17c>
   10120:	12400415 	stw	r9,16(r2)
   10124:	dfc00317 	ldw	ra,12(sp)
   10128:	dc800217 	ldw	r18,8(sp)
   1012c:	dc400117 	ldw	r17,4(sp)
   10130:	dc000017 	ldw	r16,0(sp)
   10134:	dec00404 	addi	sp,sp,16
   10138:	f800283a 	ret
   1013c:	8805883a 	mov	r2,r17
   10140:	04800044 	movi	r18,1
   10144:	8023883a 	mov	r17,r16
   10148:	1021883a 	mov	r16,r2
   1014c:	003fa906 	br	fff4 <__mdiff+0x60>
   10150:	903ffa16 	blt	r18,zero,1013c <__mdiff+0x1a8>
   10154:	0025883a 	mov	r18,zero
   10158:	003fa606 	br	fff4 <__mdiff+0x60>
   1015c:	01800104 	movi	r6,4
   10160:	003fd206 	br	100ac <__mdiff+0x118>
   10164:	0009883a 	mov	r4,zero
   10168:	003fcc06 	br	1009c <__mdiff+0x108>
   1016c:	000b883a 	mov	r5,zero
   10170:	000f4880 	call	f488 <_Balloc>
   10174:	10000b26 	beq	r2,zero,101a4 <__mdiff+0x210>
   10178:	00c00044 	movi	r3,1
   1017c:	10c00415 	stw	r3,16(r2)
   10180:	10000515 	stw	zero,20(r2)
   10184:	003fe706 	br	10124 <__mdiff+0x190>
   10188:	01c00074 	movhi	r7,1
   1018c:	01000074 	movhi	r4,1
   10190:	39debc04 	addi	r7,r7,31472
   10194:	000d883a 	mov	r6,zero
   10198:	01409004 	movi	r5,576
   1019c:	211ed104 	addi	r4,r4,31556
   101a0:	00120600 	call	12060 <__assert_func>
   101a4:	01c00074 	movhi	r7,1
   101a8:	01000074 	movhi	r4,1
   101ac:	39debc04 	addi	r7,r7,31472
   101b0:	000d883a 	mov	r6,zero
   101b4:	01408c84 	movi	r5,562
   101b8:	211ed104 	addi	r4,r4,31556
   101bc:	00120600 	call	12060 <__assert_func>

000101c0 <__ulp>:
   101c0:	28dffc2c 	andhi	r3,r5,32752
   101c4:	017f3034 	movhi	r5,64704
   101c8:	1947883a 	add	r3,r3,r5
   101cc:	00c0020e 	bge	zero,r3,101d8 <__ulp+0x18>
   101d0:	0005883a 	mov	r2,zero
   101d4:	f800283a 	ret
   101d8:	00c7c83a 	sub	r3,zero,r3
   101dc:	1807d53a 	srai	r3,r3,20
   101e0:	18800508 	cmpgei	r2,r3,20
   101e4:	1000041e 	bne	r2,zero,101f8 <__ulp+0x38>
   101e8:	00800234 	movhi	r2,8
   101ec:	10c7d83a 	sra	r3,r2,r3
   101f0:	0005883a 	mov	r2,zero
   101f4:	f800283a 	ret
   101f8:	193ffb04 	addi	r4,r3,-20
   101fc:	208007c8 	cmpgei	r2,r4,31
   10200:	0007883a 	mov	r3,zero
   10204:	1000031e 	bne	r2,zero,10214 <__ulp+0x54>
   10208:	00a00034 	movhi	r2,32768
   1020c:	1104d83a 	srl	r2,r2,r4
   10210:	f800283a 	ret
   10214:	00800044 	movi	r2,1
   10218:	f800283a 	ret

0001021c <__b2d>:
   1021c:	defffa04 	addi	sp,sp,-24
   10220:	dc400115 	stw	r17,4(sp)
   10224:	24400417 	ldw	r17,16(r4)
   10228:	dc000015 	stw	r16,0(sp)
   1022c:	24000504 	addi	r16,r4,20
   10230:	882290ba 	slli	r17,r17,2
   10234:	dc800215 	stw	r18,8(sp)
   10238:	dd000415 	stw	r20,16(sp)
   1023c:	8463883a 	add	r17,r16,r17
   10240:	8cbfff17 	ldw	r18,-4(r17)
   10244:	dcc00315 	stw	r19,12(sp)
   10248:	dfc00515 	stw	ra,20(sp)
   1024c:	9009883a 	mov	r4,r18
   10250:	2827883a 	mov	r19,r5
   10254:	000f7e40 	call	f7e4 <__hi0bits>
   10258:	00c00804 	movi	r3,32
   1025c:	1889c83a 	sub	r4,r3,r2
   10260:	99000015 	stw	r4,0(r19)
   10264:	110002c8 	cmpgei	r4,r2,11
   10268:	8d3fff04 	addi	r20,r17,-4
   1026c:	20002026 	beq	r4,zero,102f0 <__b2d+0xd4>
   10270:	10bffd44 	addi	r2,r2,-11
   10274:	85000e2e 	bgeu	r16,r20,102b0 <__b2d+0x94>
   10278:	897ffe17 	ldw	r5,-8(r17)
   1027c:	10001226 	beq	r2,zero,102c8 <__b2d+0xac>
   10280:	1889c83a 	sub	r4,r3,r2
   10284:	90a4983a 	sll	r18,r18,r2
   10288:	2906d83a 	srl	r3,r5,r4
   1028c:	89bffe04 	addi	r6,r17,-8
   10290:	2884983a 	sll	r2,r5,r2
   10294:	90e4b03a 	or	r18,r18,r3
   10298:	90cffc34 	orhi	r3,r18,16368
   1029c:	81800c2e 	bgeu	r16,r6,102d0 <__b2d+0xb4>
   102a0:	897ffd17 	ldw	r5,-12(r17)
   102a4:	2908d83a 	srl	r4,r5,r4
   102a8:	1104b03a 	or	r2,r2,r4
   102ac:	00000806 	br	102d0 <__b2d+0xb4>
   102b0:	10000426 	beq	r2,zero,102c4 <__b2d+0xa8>
   102b4:	90a4983a 	sll	r18,r18,r2
   102b8:	0005883a 	mov	r2,zero
   102bc:	90cffc34 	orhi	r3,r18,16368
   102c0:	00000306 	br	102d0 <__b2d+0xb4>
   102c4:	000b883a 	mov	r5,zero
   102c8:	90cffc34 	orhi	r3,r18,16368
   102cc:	2805883a 	mov	r2,r5
   102d0:	dfc00517 	ldw	ra,20(sp)
   102d4:	dd000417 	ldw	r20,16(sp)
   102d8:	dcc00317 	ldw	r19,12(sp)
   102dc:	dc800217 	ldw	r18,8(sp)
   102e0:	dc400117 	ldw	r17,4(sp)
   102e4:	dc000017 	ldw	r16,0(sp)
   102e8:	dec00604 	addi	sp,sp,24
   102ec:	f800283a 	ret
   102f0:	014002c4 	movi	r5,11
   102f4:	2889c83a 	sub	r4,r5,r2
   102f8:	9106d83a 	srl	r3,r18,r4
   102fc:	18cffc34 	orhi	r3,r3,16368
   10300:	85000536 	bltu	r16,r20,10318 <__b2d+0xfc>
   10304:	000b883a 	mov	r5,zero
   10308:	10800544 	addi	r2,r2,21
   1030c:	9084983a 	sll	r2,r18,r2
   10310:	1144b03a 	or	r2,r2,r5
   10314:	003fee06 	br	102d0 <__b2d+0xb4>
   10318:	897ffe17 	ldw	r5,-8(r17)
   1031c:	290ad83a 	srl	r5,r5,r4
   10320:	003ff906 	br	10308 <__b2d+0xec>

00010324 <__d2b>:
   10324:	defff804 	addi	sp,sp,-32
   10328:	dd000615 	stw	r20,24(sp)
   1032c:	2829883a 	mov	r20,r5
   10330:	01400044 	movi	r5,1
   10334:	dcc00515 	stw	r19,20(sp)
   10338:	dc000215 	stw	r16,8(sp)
   1033c:	dfc00715 	stw	ra,28(sp)
   10340:	dc800415 	stw	r18,16(sp)
   10344:	dc400315 	stw	r17,12(sp)
   10348:	3021883a 	mov	r16,r6
   1034c:	3827883a 	mov	r19,r7
   10350:	000f4880 	call	f488 <_Balloc>
   10354:	10004526 	beq	r2,zero,1046c <__d2b+0x148>
   10358:	8024d53a 	srli	r18,r16,20
   1035c:	01800434 	movhi	r6,16
   10360:	31bfffc4 	addi	r6,r6,-1
   10364:	9481ffcc 	andi	r18,r18,2047
   10368:	1023883a 	mov	r17,r2
   1036c:	81a0703a 	and	r16,r16,r6
   10370:	90000126 	beq	r18,zero,10378 <__d2b+0x54>
   10374:	84000434 	orhi	r16,r16,16
   10378:	dc000115 	stw	r16,4(sp)
   1037c:	a0002226 	beq	r20,zero,10408 <__d2b+0xe4>
   10380:	d809883a 	mov	r4,sp
   10384:	dd000015 	stw	r20,0(sp)
   10388:	000f8480 	call	f848 <__lo0bits>
   1038c:	d8c00117 	ldw	r3,4(sp)
   10390:	10003326 	beq	r2,zero,10460 <__d2b+0x13c>
   10394:	01000804 	movi	r4,32
   10398:	2089c83a 	sub	r4,r4,r2
   1039c:	1908983a 	sll	r4,r3,r4
   103a0:	d9400017 	ldw	r5,0(sp)
   103a4:	1886d83a 	srl	r3,r3,r2
   103a8:	2148b03a 	or	r4,r4,r5
   103ac:	89000515 	stw	r4,20(r17)
   103b0:	d8c00115 	stw	r3,4(sp)
   103b4:	88c00615 	stw	r3,24(r17)
   103b8:	1800271e 	bne	r3,zero,10458 <__d2b+0x134>
   103bc:	04000044 	movi	r16,1
   103c0:	8c000415 	stw	r16,16(r17)
   103c4:	90001926 	beq	r18,zero,1042c <__d2b+0x108>
   103c8:	00c00d44 	movi	r3,53
   103cc:	94bef344 	addi	r18,r18,-1075
   103d0:	90a5883a 	add	r18,r18,r2
   103d4:	1885c83a 	sub	r2,r3,r2
   103d8:	d8c00817 	ldw	r3,32(sp)
   103dc:	9c800015 	stw	r18,0(r19)
   103e0:	18800015 	stw	r2,0(r3)
   103e4:	8805883a 	mov	r2,r17
   103e8:	dfc00717 	ldw	ra,28(sp)
   103ec:	dd000617 	ldw	r20,24(sp)
   103f0:	dcc00517 	ldw	r19,20(sp)
   103f4:	dc800417 	ldw	r18,16(sp)
   103f8:	dc400317 	ldw	r17,12(sp)
   103fc:	dc000217 	ldw	r16,8(sp)
   10400:	dec00804 	addi	sp,sp,32
   10404:	f800283a 	ret
   10408:	d9000104 	addi	r4,sp,4
   1040c:	000f8480 	call	f848 <__lo0bits>
   10410:	00c00044 	movi	r3,1
   10414:	88c00415 	stw	r3,16(r17)
   10418:	d8c00117 	ldw	r3,4(sp)
   1041c:	10800804 	addi	r2,r2,32
   10420:	04000044 	movi	r16,1
   10424:	88c00515 	stw	r3,20(r17)
   10428:	903fe71e 	bne	r18,zero,103c8 <__d2b+0xa4>
   1042c:	800690ba 	slli	r3,r16,2
   10430:	10bef384 	addi	r2,r2,-1074
   10434:	98800015 	stw	r2,0(r19)
   10438:	88c5883a 	add	r2,r17,r3
   1043c:	11000417 	ldw	r4,16(r2)
   10440:	8020917a 	slli	r16,r16,5
   10444:	000f7e40 	call	f7e4 <__hi0bits>
   10448:	80a1c83a 	sub	r16,r16,r2
   1044c:	d8800817 	ldw	r2,32(sp)
   10450:	14000015 	stw	r16,0(r2)
   10454:	003fe306 	br	103e4 <__d2b+0xc0>
   10458:	04000084 	movi	r16,2
   1045c:	003fd806 	br	103c0 <__d2b+0x9c>
   10460:	d9000017 	ldw	r4,0(sp)
   10464:	89000515 	stw	r4,20(r17)
   10468:	003fd206 	br	103b4 <__d2b+0x90>
   1046c:	01c00074 	movhi	r7,1
   10470:	01000074 	movhi	r4,1
   10474:	39debc04 	addi	r7,r7,31472
   10478:	000d883a 	mov	r6,zero
   1047c:	0140c284 	movi	r5,778
   10480:	211ed104 	addi	r4,r4,31556
   10484:	00120600 	call	12060 <__assert_func>

00010488 <__ratio>:
   10488:	defff904 	addi	sp,sp,-28
   1048c:	dc400315 	stw	r17,12(sp)
   10490:	2823883a 	mov	r17,r5
   10494:	d80b883a 	mov	r5,sp
   10498:	dfc00615 	stw	ra,24(sp)
   1049c:	dcc00515 	stw	r19,20(sp)
   104a0:	dc800415 	stw	r18,16(sp)
   104a4:	2027883a 	mov	r19,r4
   104a8:	dc000215 	stw	r16,8(sp)
   104ac:	001021c0 	call	1021c <__b2d>
   104b0:	d9400104 	addi	r5,sp,4
   104b4:	8809883a 	mov	r4,r17
   104b8:	1025883a 	mov	r18,r2
   104bc:	1821883a 	mov	r16,r3
   104c0:	001021c0 	call	1021c <__b2d>
   104c4:	89000417 	ldw	r4,16(r17)
   104c8:	9a000417 	ldw	r8,16(r19)
   104cc:	d9400117 	ldw	r5,4(sp)
   104d0:	100d883a 	mov	r6,r2
   104d4:	4111c83a 	sub	r8,r8,r4
   104d8:	d9000017 	ldw	r4,0(sp)
   104dc:	4010917a 	slli	r8,r8,5
   104e0:	180f883a 	mov	r7,r3
   104e4:	2149c83a 	sub	r4,r4,r5
   104e8:	4111883a 	add	r8,r8,r4
   104ec:	02000c0e 	bge	zero,r8,10520 <__ratio+0x98>
   104f0:	4010953a 	slli	r8,r8,20
   104f4:	4421883a 	add	r16,r8,r16
   104f8:	9009883a 	mov	r4,r18
   104fc:	800b883a 	mov	r5,r16
   10500:	0007dac0 	call	7dac <__divdf3>
   10504:	dfc00617 	ldw	ra,24(sp)
   10508:	dcc00517 	ldw	r19,20(sp)
   1050c:	dc800417 	ldw	r18,16(sp)
   10510:	dc400317 	ldw	r17,12(sp)
   10514:	dc000217 	ldw	r16,8(sp)
   10518:	dec00704 	addi	sp,sp,28
   1051c:	f800283a 	ret
   10520:	4010953a 	slli	r8,r8,20
   10524:	1a0fc83a 	sub	r7,r3,r8
   10528:	003ff306 	br	104f8 <__ratio+0x70>

0001052c <_mprec_log10>:
   1052c:	defffe04 	addi	sp,sp,-8
   10530:	dc000015 	stw	r16,0(sp)
   10534:	dfc00115 	stw	ra,4(sp)
   10538:	20800608 	cmpgei	r2,r4,24
   1053c:	2021883a 	mov	r16,r4
   10540:	10000f26 	beq	r2,zero,10580 <_mprec_log10+0x54>
   10544:	0009883a 	mov	r4,zero
   10548:	014ffc34 	movhi	r5,16368
   1054c:	000d883a 	mov	r6,zero
   10550:	01d00934 	movhi	r7,16420
   10554:	00089100 	call	8910 <__muldf3>
   10558:	843fffc4 	addi	r16,r16,-1
   1055c:	1009883a 	mov	r4,r2
   10560:	180b883a 	mov	r5,r3
   10564:	803ff91e 	bne	r16,zero,1054c <_mprec_log10+0x20>
   10568:	2005883a 	mov	r2,r4
   1056c:	2807883a 	mov	r3,r5
   10570:	dfc00117 	ldw	ra,4(sp)
   10574:	dc000017 	ldw	r16,0(sp)
   10578:	dec00204 	addi	sp,sp,8
   1057c:	f800283a 	ret
   10580:	202090fa 	slli	r16,r4,3
   10584:	00800074 	movhi	r2,1
   10588:	109ef804 	addi	r2,r2,31712
   1058c:	1421883a 	add	r16,r2,r16
   10590:	81000017 	ldw	r4,0(r16)
   10594:	81400117 	ldw	r5,4(r16)
   10598:	003ff306 	br	10568 <_mprec_log10+0x3c>

0001059c <__copybits>:
   1059c:	297fffc4 	addi	r5,r5,-1
   105a0:	280fd17a 	srai	r7,r5,5
   105a4:	31400417 	ldw	r5,16(r6)
   105a8:	30800504 	addi	r2,r6,20
   105ac:	39c00044 	addi	r7,r7,1
   105b0:	280a90ba 	slli	r5,r5,2
   105b4:	380e90ba 	slli	r7,r7,2
   105b8:	114b883a 	add	r5,r2,r5
   105bc:	21cf883a 	add	r7,r4,r7
   105c0:	11400c2e 	bgeu	r2,r5,105f4 <__copybits+0x58>
   105c4:	2007883a 	mov	r3,r4
   105c8:	12000017 	ldw	r8,0(r2)
   105cc:	10800104 	addi	r2,r2,4
   105d0:	18c00104 	addi	r3,r3,4
   105d4:	1a3fff15 	stw	r8,-4(r3)
   105d8:	117ffb36 	bltu	r2,r5,105c8 <__copybits+0x2c>
   105dc:	2985c83a 	sub	r2,r5,r6
   105e0:	10bffac4 	addi	r2,r2,-21
   105e4:	1004d0ba 	srli	r2,r2,2
   105e8:	10800044 	addi	r2,r2,1
   105ec:	100490ba 	slli	r2,r2,2
   105f0:	2089883a 	add	r4,r4,r2
   105f4:	21c0072e 	bgeu	r4,r7,10614 <__copybits+0x78>
   105f8:	39bfffc4 	addi	r6,r7,-1
   105fc:	310dc83a 	sub	r6,r6,r4
   10600:	300cd0ba 	srli	r6,r6,2
   10604:	000b883a 	mov	r5,zero
   10608:	31800044 	addi	r6,r6,1
   1060c:	300c90ba 	slli	r6,r6,2
   10610:	000f3981 	jmpi	f398 <memset>
   10614:	f800283a 	ret

00010618 <__any_on>:
   10618:	20c00417 	ldw	r3,16(r4)
   1061c:	280dd17a 	srai	r6,r5,5
   10620:	21000504 	addi	r4,r4,20
   10624:	1980080e 	bge	r3,r6,10648 <__any_on+0x30>
   10628:	180490ba 	slli	r2,r3,2
   1062c:	2085883a 	add	r2,r4,r2
   10630:	20800f2e 	bgeu	r4,r2,10670 <__any_on+0x58>
   10634:	10ffff17 	ldw	r3,-4(r2)
   10638:	10bfff04 	addi	r2,r2,-4
   1063c:	183ffc26 	beq	r3,zero,10630 <__any_on+0x18>
   10640:	00800044 	movi	r2,1
   10644:	f800283a 	ret
   10648:	300490ba 	slli	r2,r6,2
   1064c:	2085883a 	add	r2,r4,r2
   10650:	30fff70e 	bge	r6,r3,10630 <__any_on+0x18>
   10654:	294007cc 	andi	r5,r5,31
   10658:	283ff526 	beq	r5,zero,10630 <__any_on+0x18>
   1065c:	11800017 	ldw	r6,0(r2)
   10660:	3146d83a 	srl	r3,r6,r5
   10664:	194a983a 	sll	r5,r3,r5
   10668:	317ff51e 	bne	r6,r5,10640 <__any_on+0x28>
   1066c:	003ff006 	br	10630 <__any_on+0x18>
   10670:	0005883a 	mov	r2,zero
   10674:	f800283a 	ret

00010678 <_putc_r>:
   10678:	defffc04 	addi	sp,sp,-16
   1067c:	dc400215 	stw	r17,8(sp)
   10680:	dfc00315 	stw	ra,12(sp)
   10684:	2023883a 	mov	r17,r4
   10688:	20000226 	beq	r4,zero,10694 <_putc_r+0x1c>
   1068c:	20800e17 	ldw	r2,56(r4)
   10690:	10000e26 	beq	r2,zero,106cc <_putc_r+0x54>
   10694:	30800217 	ldw	r2,8(r6)
   10698:	10bfffc4 	addi	r2,r2,-1
   1069c:	30800215 	stw	r2,8(r6)
   106a0:	10001316 	blt	r2,zero,106f0 <_putc_r+0x78>
   106a4:	30800017 	ldw	r2,0(r6)
   106a8:	11400005 	stb	r5,0(r2)
   106ac:	30800017 	ldw	r2,0(r6)
   106b0:	10c00044 	addi	r3,r2,1
   106b4:	30c00015 	stw	r3,0(r6)
   106b8:	10800003 	ldbu	r2,0(r2)
   106bc:	dfc00317 	ldw	ra,12(sp)
   106c0:	dc400217 	ldw	r17,8(sp)
   106c4:	dec00404 	addi	sp,sp,16
   106c8:	f800283a 	ret
   106cc:	d9800115 	stw	r6,4(sp)
   106d0:	d9400015 	stw	r5,0(sp)
   106d4:	000eac00 	call	eac0 <__sinit>
   106d8:	d9800117 	ldw	r6,4(sp)
   106dc:	d9400017 	ldw	r5,0(sp)
   106e0:	30800217 	ldw	r2,8(r6)
   106e4:	10bfffc4 	addi	r2,r2,-1
   106e8:	30800215 	stw	r2,8(r6)
   106ec:	103fed0e 	bge	r2,zero,106a4 <_putc_r+0x2c>
   106f0:	30c00617 	ldw	r3,24(r6)
   106f4:	10c00e16 	blt	r2,r3,10730 <_putc_r+0xb8>
   106f8:	30800017 	ldw	r2,0(r6)
   106fc:	11400005 	stb	r5,0(r2)
   10700:	30c00017 	ldw	r3,0(r6)
   10704:	18800003 	ldbu	r2,0(r3)
   10708:	108002a0 	cmpeqi	r2,r2,10
   1070c:	1000071e 	bne	r2,zero,1072c <_putc_r+0xb4>
   10710:	18800044 	addi	r2,r3,1
   10714:	30800015 	stw	r2,0(r6)
   10718:	18800003 	ldbu	r2,0(r3)
   1071c:	dfc00317 	ldw	ra,12(sp)
   10720:	dc400217 	ldw	r17,8(sp)
   10724:	dec00404 	addi	sp,sp,16
   10728:	f800283a 	ret
   1072c:	01400284 	movi	r5,10
   10730:	8809883a 	mov	r4,r17
   10734:	dfc00317 	ldw	ra,12(sp)
   10738:	dc400217 	ldw	r17,8(sp)
   1073c:	dec00404 	addi	sp,sp,16
   10740:	0011e441 	jmpi	11e44 <__swbuf_r>

00010744 <putc>:
   10744:	defffc04 	addi	sp,sp,-16
   10748:	008000b4 	movhi	r2,2
   1074c:	dc800215 	stw	r18,8(sp)
   10750:	14a71e17 	ldw	r18,-25480(r2)
   10754:	dc400115 	stw	r17,4(sp)
   10758:	dfc00315 	stw	ra,12(sp)
   1075c:	2023883a 	mov	r17,r4
   10760:	90000226 	beq	r18,zero,1076c <putc+0x28>
   10764:	90800e17 	ldw	r2,56(r18)
   10768:	10000f26 	beq	r2,zero,107a8 <putc+0x64>
   1076c:	28800217 	ldw	r2,8(r5)
   10770:	10bfffc4 	addi	r2,r2,-1
   10774:	28800215 	stw	r2,8(r5)
   10778:	10001316 	blt	r2,zero,107c8 <putc+0x84>
   1077c:	28800017 	ldw	r2,0(r5)
   10780:	14400005 	stb	r17,0(r2)
   10784:	28800017 	ldw	r2,0(r5)
   10788:	10c00044 	addi	r3,r2,1
   1078c:	28c00015 	stw	r3,0(r5)
   10790:	10800003 	ldbu	r2,0(r2)
   10794:	dfc00317 	ldw	ra,12(sp)
   10798:	dc800217 	ldw	r18,8(sp)
   1079c:	dc400117 	ldw	r17,4(sp)
   107a0:	dec00404 	addi	sp,sp,16
   107a4:	f800283a 	ret
   107a8:	9009883a 	mov	r4,r18
   107ac:	d9400015 	stw	r5,0(sp)
   107b0:	000eac00 	call	eac0 <__sinit>
   107b4:	d9400017 	ldw	r5,0(sp)
   107b8:	28800217 	ldw	r2,8(r5)
   107bc:	10bfffc4 	addi	r2,r2,-1
   107c0:	28800215 	stw	r2,8(r5)
   107c4:	103fed0e 	bge	r2,zero,1077c <putc+0x38>
   107c8:	28c00617 	ldw	r3,24(r5)
   107cc:	10c00a16 	blt	r2,r3,107f8 <putc+0xb4>
   107d0:	28800017 	ldw	r2,0(r5)
   107d4:	14400005 	stb	r17,0(r2)
   107d8:	28c00017 	ldw	r3,0(r5)
   107dc:	18800003 	ldbu	r2,0(r3)
   107e0:	108002a0 	cmpeqi	r2,r2,10
   107e4:	10000c1e 	bne	r2,zero,10818 <putc+0xd4>
   107e8:	18800044 	addi	r2,r3,1
   107ec:	28800015 	stw	r2,0(r5)
   107f0:	18800003 	ldbu	r2,0(r3)
   107f4:	003fe706 	br	10794 <putc+0x50>
   107f8:	280d883a 	mov	r6,r5
   107fc:	880b883a 	mov	r5,r17
   10800:	9009883a 	mov	r4,r18
   10804:	dfc00317 	ldw	ra,12(sp)
   10808:	dc800217 	ldw	r18,8(sp)
   1080c:	dc400117 	ldw	r17,4(sp)
   10810:	dec00404 	addi	sp,sp,16
   10814:	0011e441 	jmpi	11e44 <__swbuf_r>
   10818:	280d883a 	mov	r6,r5
   1081c:	01400284 	movi	r5,10
   10820:	003ff706 	br	10800 <putc+0xbc>

00010824 <__sread>:
   10824:	defffe04 	addi	sp,sp,-8
   10828:	dc000015 	stw	r16,0(sp)
   1082c:	2821883a 	mov	r16,r5
   10830:	2940038f 	ldh	r5,14(r5)
   10834:	dfc00115 	stw	ra,4(sp)
   10838:	0012e440 	call	12e44 <_read_r>
   1083c:	10000716 	blt	r2,zero,1085c <__sread+0x38>
   10840:	80c01417 	ldw	r3,80(r16)
   10844:	1887883a 	add	r3,r3,r2
   10848:	80c01415 	stw	r3,80(r16)
   1084c:	dfc00117 	ldw	ra,4(sp)
   10850:	dc000017 	ldw	r16,0(sp)
   10854:	dec00204 	addi	sp,sp,8
   10858:	f800283a 	ret
   1085c:	80c0030b 	ldhu	r3,12(r16)
   10860:	18fbffcc 	andi	r3,r3,61439
   10864:	80c0030d 	sth	r3,12(r16)
   10868:	dfc00117 	ldw	ra,4(sp)
   1086c:	dc000017 	ldw	r16,0(sp)
   10870:	dec00204 	addi	sp,sp,8
   10874:	f800283a 	ret

00010878 <__seofread>:
   10878:	0005883a 	mov	r2,zero
   1087c:	f800283a 	ret

00010880 <__swrite>:
   10880:	2880030b 	ldhu	r2,12(r5)
   10884:	defffb04 	addi	sp,sp,-20
   10888:	dcc00315 	stw	r19,12(sp)
   1088c:	dc800215 	stw	r18,8(sp)
   10890:	dc400115 	stw	r17,4(sp)
   10894:	dc000015 	stw	r16,0(sp)
   10898:	dfc00415 	stw	ra,16(sp)
   1089c:	10c0400c 	andi	r3,r2,256
   108a0:	2821883a 	mov	r16,r5
   108a4:	2023883a 	mov	r17,r4
   108a8:	3025883a 	mov	r18,r6
   108ac:	3827883a 	mov	r19,r7
   108b0:	18000d1e 	bne	r3,zero,108e8 <__swrite+0x68>
   108b4:	8140038f 	ldh	r5,14(r16)
   108b8:	10bbffcc 	andi	r2,r2,61439
   108bc:	980f883a 	mov	r7,r19
   108c0:	900d883a 	mov	r6,r18
   108c4:	8809883a 	mov	r4,r17
   108c8:	8080030d 	sth	r2,12(r16)
   108cc:	dfc00417 	ldw	ra,16(sp)
   108d0:	dcc00317 	ldw	r19,12(sp)
   108d4:	dc800217 	ldw	r18,8(sp)
   108d8:	dc400117 	ldw	r17,4(sp)
   108dc:	dc000017 	ldw	r16,0(sp)
   108e0:	dec00504 	addi	sp,sp,20
   108e4:	0011fa41 	jmpi	11fa4 <_write_r>
   108e8:	2940038f 	ldh	r5,14(r5)
   108ec:	01c00084 	movi	r7,2
   108f0:	000d883a 	mov	r6,zero
   108f4:	0012c640 	call	12c64 <_lseek_r>
   108f8:	8080030b 	ldhu	r2,12(r16)
   108fc:	003fed06 	br	108b4 <__swrite+0x34>

00010900 <__sseek>:
   10900:	defffe04 	addi	sp,sp,-8
   10904:	dc000015 	stw	r16,0(sp)
   10908:	2821883a 	mov	r16,r5
   1090c:	2940038f 	ldh	r5,14(r5)
   10910:	dfc00115 	stw	ra,4(sp)
   10914:	0012c640 	call	12c64 <_lseek_r>
   10918:	10ffffd8 	cmpnei	r3,r2,-1
   1091c:	18000826 	beq	r3,zero,10940 <__sseek+0x40>
   10920:	80c0030b 	ldhu	r3,12(r16)
   10924:	80801415 	stw	r2,80(r16)
   10928:	18c40014 	ori	r3,r3,4096
   1092c:	80c0030d 	sth	r3,12(r16)
   10930:	dfc00117 	ldw	ra,4(sp)
   10934:	dc000017 	ldw	r16,0(sp)
   10938:	dec00204 	addi	sp,sp,8
   1093c:	f800283a 	ret
   10940:	80c0030b 	ldhu	r3,12(r16)
   10944:	18fbffcc 	andi	r3,r3,61439
   10948:	80c0030d 	sth	r3,12(r16)
   1094c:	dfc00117 	ldw	ra,4(sp)
   10950:	dc000017 	ldw	r16,0(sp)
   10954:	dec00204 	addi	sp,sp,8
   10958:	f800283a 	ret

0001095c <__sclose>:
   1095c:	2940038f 	ldh	r5,14(r5)
   10960:	00120081 	jmpi	12008 <_close_r>

00010964 <strlen>:
   10964:	208000cc 	andi	r2,r4,3
   10968:	10000926 	beq	r2,zero,10990 <strlen+0x2c>
   1096c:	2005883a 	mov	r2,r4
   10970:	00000306 	br	10980 <strlen+0x1c>
   10974:	10800044 	addi	r2,r2,1
   10978:	10c000cc 	andi	r3,r2,3
   1097c:	18000526 	beq	r3,zero,10994 <strlen+0x30>
   10980:	10c00007 	ldb	r3,0(r2)
   10984:	183ffb1e 	bne	r3,zero,10974 <strlen+0x10>
   10988:	1105c83a 	sub	r2,r2,r4
   1098c:	f800283a 	ret
   10990:	2005883a 	mov	r2,r4
   10994:	11400017 	ldw	r5,0(r2)
   10998:	01ffbff4 	movhi	r7,65279
   1099c:	39ffbfc4 	addi	r7,r7,-257
   109a0:	29c7883a 	add	r3,r5,r7
   109a4:	01a02074 	movhi	r6,32897
   109a8:	014a303a 	nor	r5,zero,r5
   109ac:	1946703a 	and	r3,r3,r5
   109b0:	31a02004 	addi	r6,r6,-32640
   109b4:	1986703a 	and	r3,r3,r6
   109b8:	1800071e 	bne	r3,zero,109d8 <strlen+0x74>
   109bc:	11400117 	ldw	r5,4(r2)
   109c0:	10800104 	addi	r2,r2,4
   109c4:	29c7883a 	add	r3,r5,r7
   109c8:	014a303a 	nor	r5,zero,r5
   109cc:	1946703a 	and	r3,r3,r5
   109d0:	1986703a 	and	r3,r3,r6
   109d4:	183ff926 	beq	r3,zero,109bc <strlen+0x58>
   109d8:	10c00007 	ldb	r3,0(r2)
   109dc:	183fea26 	beq	r3,zero,10988 <strlen+0x24>
   109e0:	10c00047 	ldb	r3,1(r2)
   109e4:	10800044 	addi	r2,r2,1
   109e8:	183fe726 	beq	r3,zero,10988 <strlen+0x24>
   109ec:	10c00047 	ldb	r3,1(r2)
   109f0:	10800044 	addi	r2,r2,1
   109f4:	183ffa1e 	bne	r3,zero,109e0 <strlen+0x7c>
   109f8:	003fe306 	br	10988 <strlen+0x24>

000109fc <__sprint_r.part.0>:
   109fc:	28801917 	ldw	r2,100(r5)
   10a00:	defff604 	addi	sp,sp,-40
   10a04:	dcc00315 	stw	r19,12(sp)
   10a08:	dfc00915 	stw	ra,36(sp)
   10a0c:	df000815 	stw	fp,32(sp)
   10a10:	ddc00715 	stw	r23,28(sp)
   10a14:	dd800615 	stw	r22,24(sp)
   10a18:	dd400515 	stw	r21,20(sp)
   10a1c:	dd000415 	stw	r20,16(sp)
   10a20:	dc800215 	stw	r18,8(sp)
   10a24:	dc400115 	stw	r17,4(sp)
   10a28:	dc000015 	stw	r16,0(sp)
   10a2c:	1088000c 	andi	r2,r2,8192
   10a30:	3027883a 	mov	r19,r6
   10a34:	10002c26 	beq	r2,zero,10ae8 <__sprint_r.part.0+0xec>
   10a38:	30800217 	ldw	r2,8(r6)
   10a3c:	35000017 	ldw	r20,0(r6)
   10a40:	2821883a 	mov	r16,r5
   10a44:	2023883a 	mov	r17,r4
   10a48:	05bfff04 	movi	r22,-4
   10a4c:	10002426 	beq	r2,zero,10ae0 <__sprint_r.part.0+0xe4>
   10a50:	a5400117 	ldw	r21,4(r20)
   10a54:	a5c00017 	ldw	r23,0(r20)
   10a58:	a824d0ba 	srli	r18,r21,2
   10a5c:	90001b26 	beq	r18,zero,10acc <__sprint_r.part.0+0xd0>
   10a60:	0039883a 	mov	fp,zero
   10a64:	00000206 	br	10a70 <__sprint_r.part.0+0x74>
   10a68:	bdc00104 	addi	r23,r23,4
   10a6c:	97001626 	beq	r18,fp,10ac8 <__sprint_r.part.0+0xcc>
   10a70:	b9400017 	ldw	r5,0(r23)
   10a74:	800d883a 	mov	r6,r16
   10a78:	8809883a 	mov	r4,r17
   10a7c:	00125880 	call	12588 <_fputwc_r>
   10a80:	10bfffe0 	cmpeqi	r2,r2,-1
   10a84:	e7000044 	addi	fp,fp,1
   10a88:	103ff726 	beq	r2,zero,10a68 <__sprint_r.part.0+0x6c>
   10a8c:	00bfffc4 	movi	r2,-1
   10a90:	98000215 	stw	zero,8(r19)
   10a94:	98000115 	stw	zero,4(r19)
   10a98:	dfc00917 	ldw	ra,36(sp)
   10a9c:	df000817 	ldw	fp,32(sp)
   10aa0:	ddc00717 	ldw	r23,28(sp)
   10aa4:	dd800617 	ldw	r22,24(sp)
   10aa8:	dd400517 	ldw	r21,20(sp)
   10aac:	dd000417 	ldw	r20,16(sp)
   10ab0:	dcc00317 	ldw	r19,12(sp)
   10ab4:	dc800217 	ldw	r18,8(sp)
   10ab8:	dc400117 	ldw	r17,4(sp)
   10abc:	dc000017 	ldw	r16,0(sp)
   10ac0:	dec00a04 	addi	sp,sp,40
   10ac4:	f800283a 	ret
   10ac8:	98800217 	ldw	r2,8(r19)
   10acc:	adaa703a 	and	r21,r21,r22
   10ad0:	1545c83a 	sub	r2,r2,r21
   10ad4:	98800215 	stw	r2,8(r19)
   10ad8:	a5000204 	addi	r20,r20,8
   10adc:	103fdc1e 	bne	r2,zero,10a50 <__sprint_r.part.0+0x54>
   10ae0:	0005883a 	mov	r2,zero
   10ae4:	003fea06 	br	10a90 <__sprint_r.part.0+0x94>
   10ae8:	00126840 	call	12684 <__sfvwrite_r>
   10aec:	003fe806 	br	10a90 <__sprint_r.part.0+0x94>

00010af0 <__sprint_r>:
   10af0:	30c00217 	ldw	r3,8(r6)
   10af4:	18000126 	beq	r3,zero,10afc <__sprint_r+0xc>
   10af8:	00109fc1 	jmpi	109fc <__sprint_r.part.0>
   10afc:	30000115 	stw	zero,4(r6)
   10b00:	0005883a 	mov	r2,zero
   10b04:	f800283a 	ret

00010b08 <___vfiprintf_internal_r>:
   10b08:	deffcf04 	addi	sp,sp,-196
   10b0c:	dd802d15 	stw	r22,180(sp)
   10b10:	dd402c15 	stw	r21,176(sp)
   10b14:	dd002b15 	stw	r20,172(sp)
   10b18:	dfc03015 	stw	ra,192(sp)
   10b1c:	df002f15 	stw	fp,188(sp)
   10b20:	ddc02e15 	stw	r23,184(sp)
   10b24:	dcc02a15 	stw	r19,168(sp)
   10b28:	dc802915 	stw	r18,164(sp)
   10b2c:	dc402815 	stw	r17,160(sp)
   10b30:	dc002715 	stw	r16,156(sp)
   10b34:	d9c00415 	stw	r7,16(sp)
   10b38:	202d883a 	mov	r22,r4
   10b3c:	282b883a 	mov	r21,r5
   10b40:	3029883a 	mov	r20,r6
   10b44:	20000226 	beq	r4,zero,10b50 <___vfiprintf_internal_r+0x48>
   10b48:	20800e17 	ldw	r2,56(r4)
   10b4c:	1001ba26 	beq	r2,zero,11238 <___vfiprintf_internal_r+0x730>
   10b50:	a880030b 	ldhu	r2,12(r21)
   10b54:	10c8000c 	andi	r3,r2,8192
   10b58:	1800061e 	bne	r3,zero,10b74 <___vfiprintf_internal_r+0x6c>
   10b5c:	a8c01917 	ldw	r3,100(r21)
   10b60:	0137ffc4 	movi	r4,-8193
   10b64:	10880014 	ori	r2,r2,8192
   10b68:	1906703a 	and	r3,r3,r4
   10b6c:	a880030d 	sth	r2,12(r21)
   10b70:	a8c01915 	stw	r3,100(r21)
   10b74:	10c0020c 	andi	r3,r2,8
   10b78:	18010526 	beq	r3,zero,10f90 <___vfiprintf_internal_r+0x488>
   10b7c:	a8c00417 	ldw	r3,16(r21)
   10b80:	18010326 	beq	r3,zero,10f90 <___vfiprintf_internal_r+0x488>
   10b84:	1080068c 	andi	r2,r2,26
   10b88:	10800298 	cmpnei	r2,r2,10
   10b8c:	10010826 	beq	r2,zero,10fb0 <___vfiprintf_internal_r+0x4a8>
   10b90:	dc801704 	addi	r18,sp,92
   10b94:	dc800a15 	stw	r18,40(sp)
   10b98:	d8000c15 	stw	zero,48(sp)
   10b9c:	d8000b15 	stw	zero,44(sp)
   10ba0:	9021883a 	mov	r16,r18
   10ba4:	d8000515 	stw	zero,20(sp)
   10ba8:	d8000115 	stw	zero,4(sp)
   10bac:	a0800007 	ldb	r2,0(r20)
   10bb0:	1000e526 	beq	r2,zero,10f48 <___vfiprintf_internal_r+0x440>
   10bb4:	a023883a 	mov	r17,r20
   10bb8:	00000306 	br	10bc8 <___vfiprintf_internal_r+0xc0>
   10bbc:	88800047 	ldb	r2,1(r17)
   10bc0:	8c400044 	addi	r17,r17,1
   10bc4:	10013026 	beq	r2,zero,11088 <___vfiprintf_internal_r+0x580>
   10bc8:	10800958 	cmpnei	r2,r2,37
   10bcc:	103ffb1e 	bne	r2,zero,10bbc <___vfiprintf_internal_r+0xb4>
   10bd0:	8d27c83a 	sub	r19,r17,r20
   10bd4:	8d012e1e 	bne	r17,r20,11090 <___vfiprintf_internal_r+0x588>
   10bd8:	88800003 	ldbu	r2,0(r17)
   10bdc:	10803fcc 	andi	r2,r2,255
   10be0:	1080201c 	xori	r2,r2,128
   10be4:	10bfe004 	addi	r2,r2,-128
   10be8:	1000d726 	beq	r2,zero,10f48 <___vfiprintf_internal_r+0x440>
   10bec:	88800047 	ldb	r2,1(r17)
   10bf0:	8d000044 	addi	r20,r17,1
   10bf4:	d8000945 	stb	zero,37(sp)
   10bf8:	000b883a 	mov	r5,zero
   10bfc:	000d883a 	mov	r6,zero
   10c00:	023fffc4 	movi	r8,-1
   10c04:	0023883a 	mov	r17,zero
   10c08:	001b883a 	mov	r13,zero
   10c0c:	a5000044 	addi	r20,r20,1
   10c10:	10fff804 	addi	r3,r2,-32
   10c14:	19001668 	cmpgeui	r4,r3,89
   10c18:	20006c1e 	bne	r4,zero,10dcc <___vfiprintf_internal_r+0x2c4>
   10c1c:	180690ba 	slli	r3,r3,2
   10c20:	01000074 	movhi	r4,1
   10c24:	1909883a 	add	r4,r3,r4
   10c28:	20c30c17 	ldw	r3,3120(r4)
   10c2c:	1800683a 	jmp	r3
   10c30:	00011458 	cmpnei	zero,zero,1105
   10c34:	00010dcc 	andi	zero,zero,1079
   10c38:	00010dcc 	andi	zero,zero,1079
   10c3c:	0001144c 	andi	zero,zero,1105
   10c40:	00010dcc 	andi	zero,zero,1079
   10c44:	00010dcc 	andi	zero,zero,1079
   10c48:	00010dcc 	andi	zero,zero,1079
   10c4c:	00010dcc 	andi	zero,zero,1079
   10c50:	00010dcc 	andi	zero,zero,1079
   10c54:	00010dcc 	andi	zero,zero,1079
   10c58:	000112b4 	movhi	zero,1098
   10c5c:	0001143c 	xorhi	zero,zero,1104
   10c60:	00010dcc 	andi	zero,zero,1079
   10c64:	000112cc 	andi	zero,zero,1099
   10c68:	000112d8 	cmpnei	zero,zero,1099
   10c6c:	00010dcc 	andi	zero,zero,1079
   10c70:	00011430 	cmpltui	zero,zero,1104
   10c74:	00010d94 	movui	zero,1078
   10c78:	00010d94 	movui	zero,1078
   10c7c:	00010d94 	movui	zero,1078
   10c80:	00010d94 	movui	zero,1078
   10c84:	00010d94 	movui	zero,1078
   10c88:	00010d94 	movui	zero,1078
   10c8c:	00010d94 	movui	zero,1078
   10c90:	00010d94 	movui	zero,1078
   10c94:	00010d94 	movui	zero,1078
   10c98:	00010dcc 	andi	zero,zero,1079
   10c9c:	00010dcc 	andi	zero,zero,1079
   10ca0:	00010dcc 	andi	zero,zero,1079
   10ca4:	00010dcc 	andi	zero,zero,1079
   10ca8:	00010dcc 	andi	zero,zero,1079
   10cac:	00010dcc 	andi	zero,zero,1079
   10cb0:	00010dcc 	andi	zero,zero,1079
   10cb4:	00010dcc 	andi	zero,zero,1079
   10cb8:	00010dcc 	andi	zero,zero,1079
   10cbc:	00010dcc 	andi	zero,zero,1079
   10cc0:	00011324 	muli	zero,zero,1100
   10cc4:	00010dcc 	andi	zero,zero,1079
   10cc8:	00010dcc 	andi	zero,zero,1079
   10ccc:	00010dcc 	andi	zero,zero,1079
   10cd0:	00010dcc 	andi	zero,zero,1079
   10cd4:	00010dcc 	andi	zero,zero,1079
   10cd8:	00010dcc 	andi	zero,zero,1079
   10cdc:	00010dcc 	andi	zero,zero,1079
   10ce0:	00010dcc 	andi	zero,zero,1079
   10ce4:	00010dcc 	andi	zero,zero,1079
   10ce8:	00010dcc 	andi	zero,zero,1079
   10cec:	00011020 	cmpeqi	zero,zero,1088
   10cf0:	00010dcc 	andi	zero,zero,1079
   10cf4:	00010dcc 	andi	zero,zero,1079
   10cf8:	00010dcc 	andi	zero,zero,1079
   10cfc:	00010dcc 	andi	zero,zero,1079
   10d00:	00010dcc 	andi	zero,zero,1079
   10d04:	00010ff8 	rdprs	zero,zero,1087
   10d08:	00010dcc 	andi	zero,zero,1079
   10d0c:	00010dcc 	andi	zero,zero,1079
   10d10:	00011528 	cmpgeui	zero,zero,1108
   10d14:	00010dcc 	andi	zero,zero,1079
   10d18:	00010dcc 	andi	zero,zero,1079
   10d1c:	00010dcc 	andi	zero,zero,1079
   10d20:	00010dcc 	andi	zero,zero,1079
   10d24:	00010dcc 	andi	zero,zero,1079
   10d28:	00010dcc 	andi	zero,zero,1079
   10d2c:	00010dcc 	andi	zero,zero,1079
   10d30:	00010dcc 	andi	zero,zero,1079
   10d34:	00010dcc 	andi	zero,zero,1079
   10d38:	00010dcc 	andi	zero,zero,1079
   10d3c:	00011500 	call	1150 <kf_bfly5+0x544>
   10d40:	00011240 	call	1124 <kf_bfly5+0x518>
   10d44:	00010dcc 	andi	zero,zero,1079
   10d48:	00010dcc 	andi	zero,zero,1079
   10d4c:	00010dcc 	andi	zero,zero,1079
   10d50:	000114a0 	cmpeqi	zero,zero,1106
   10d54:	00011240 	call	1124 <kf_bfly5+0x518>
   10d58:	00010dcc 	andi	zero,zero,1079
   10d5c:	00010dcc 	andi	zero,zero,1079
   10d60:	000114ec 	andhi	zero,zero,1107
   10d64:	00010dcc 	andi	zero,zero,1079
   10d68:	000114ac 	andhi	zero,zero,1106
   10d6c:	00011024 	muli	zero,zero,1088
   10d70:	0001161c 	xori	zero,zero,1112
   10d74:	00011610 	cmplti	zero,zero,1112
   10d78:	00010dcc 	andi	zero,zero,1079
   10d7c:	000115b8 	rdprs	zero,zero,1110
   10d80:	00010dcc 	andi	zero,zero,1079
   10d84:	00010ffc 	xorhi	zero,zero,1087
   10d88:	00010dcc 	andi	zero,zero,1079
   10d8c:	00010dcc 	andi	zero,zero,1079
   10d90:	00011570 	cmpltui	zero,zero,1109
   10d94:	0023883a 	mov	r17,zero
   10d98:	113ff404 	addi	r4,r2,-48
   10d9c:	880690ba 	slli	r3,r17,2
   10da0:	a0800007 	ldb	r2,0(r20)
   10da4:	a5000044 	addi	r20,r20,1
   10da8:	1c63883a 	add	r17,r3,r17
   10dac:	8c63883a 	add	r17,r17,r17
   10db0:	2463883a 	add	r17,r4,r17
   10db4:	113ff404 	addi	r4,r2,-48
   10db8:	20c002b0 	cmpltui	r3,r4,10
   10dbc:	183ff71e 	bne	r3,zero,10d9c <___vfiprintf_internal_r+0x294>
   10dc0:	10fff804 	addi	r3,r2,-32
   10dc4:	19001668 	cmpgeui	r4,r3,89
   10dc8:	203f9426 	beq	r4,zero,10c1c <___vfiprintf_internal_r+0x114>
   10dcc:	29403fcc 	andi	r5,r5,255
   10dd0:	2803b61e 	bne	r5,zero,11cac <___vfiprintf_internal_r+0x11a4>
   10dd4:	10005c26 	beq	r2,zero,10f48 <___vfiprintf_internal_r+0x440>
   10dd8:	d8800d05 	stb	r2,52(sp)
   10ddc:	d8000945 	stb	zero,37(sp)
   10de0:	05c00044 	movi	r23,1
   10de4:	07000044 	movi	fp,1
   10de8:	dcc00d04 	addi	r19,sp,52
   10dec:	db400015 	stw	r13,0(sp)
   10df0:	0011883a 	mov	r8,zero
   10df4:	d8800017 	ldw	r2,0(sp)
   10df8:	1380008c 	andi	r14,r2,2
   10dfc:	70000126 	beq	r14,zero,10e04 <___vfiprintf_internal_r+0x2fc>
   10e00:	bdc00084 	addi	r23,r23,2
   10e04:	d8800017 	ldw	r2,0(sp)
   10e08:	d9000b17 	ldw	r4,44(sp)
   10e0c:	1340210c 	andi	r13,r2,132
   10e10:	21800044 	addi	r6,r4,1
   10e14:	d8800c17 	ldw	r2,48(sp)
   10e18:	300b883a 	mov	r5,r6
   10e1c:	6800021e 	bne	r13,zero,10e28 <___vfiprintf_internal_r+0x320>
   10e20:	8dc7c83a 	sub	r3,r17,r23
   10e24:	00c2e516 	blt	zero,r3,119bc <___vfiprintf_internal_r+0xeb4>
   10e28:	d8c00947 	ldb	r3,37(sp)
   10e2c:	18000c26 	beq	r3,zero,10e60 <___vfiprintf_internal_r+0x358>
   10e30:	d8c00944 	addi	r3,sp,37
   10e34:	10800044 	addi	r2,r2,1
   10e38:	80c00015 	stw	r3,0(r16)
   10e3c:	00c00044 	movi	r3,1
   10e40:	80c00115 	stw	r3,4(r16)
   10e44:	d8800c15 	stw	r2,48(sp)
   10e48:	d9400b15 	stw	r5,44(sp)
   10e4c:	28c00208 	cmpgei	r3,r5,8
   10e50:	1802a01e 	bne	r3,zero,118d4 <___vfiprintf_internal_r+0xdcc>
   10e54:	2809883a 	mov	r4,r5
   10e58:	84000204 	addi	r16,r16,8
   10e5c:	29400044 	addi	r5,r5,1
   10e60:	70001726 	beq	r14,zero,10ec0 <___vfiprintf_internal_r+0x3b8>
   10e64:	d8c00984 	addi	r3,sp,38
   10e68:	10800084 	addi	r2,r2,2
   10e6c:	80c00015 	stw	r3,0(r16)
   10e70:	00c00084 	movi	r3,2
   10e74:	80c00115 	stw	r3,4(r16)
   10e78:	d8800c15 	stw	r2,48(sp)
   10e7c:	d9400b15 	stw	r5,44(sp)
   10e80:	28c00208 	cmpgei	r3,r5,8
   10e84:	1802aa26 	beq	r3,zero,11930 <___vfiprintf_internal_r+0xe28>
   10e88:	10032526 	beq	r2,zero,11b20 <___vfiprintf_internal_r+0x1018>
   10e8c:	d9800a04 	addi	r6,sp,40
   10e90:	a80b883a 	mov	r5,r21
   10e94:	b009883a 	mov	r4,r22
   10e98:	da000315 	stw	r8,12(sp)
   10e9c:	db400215 	stw	r13,8(sp)
   10ea0:	00109fc0 	call	109fc <__sprint_r.part.0>
   10ea4:	10002a1e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   10ea8:	d9000b17 	ldw	r4,44(sp)
   10eac:	d8800c17 	ldw	r2,48(sp)
   10eb0:	da000317 	ldw	r8,12(sp)
   10eb4:	db400217 	ldw	r13,8(sp)
   10eb8:	9021883a 	mov	r16,r18
   10ebc:	21400044 	addi	r5,r4,1
   10ec0:	6b402018 	cmpnei	r13,r13,128
   10ec4:	6801f126 	beq	r13,zero,1168c <___vfiprintf_internal_r+0xb84>
   10ec8:	4711c83a 	sub	r8,r8,fp
   10ecc:	02022e16 	blt	zero,r8,11788 <___vfiprintf_internal_r+0xc80>
   10ed0:	e085883a 	add	r2,fp,r2
   10ed4:	d9400b15 	stw	r5,44(sp)
   10ed8:	84c00015 	stw	r19,0(r16)
   10edc:	87000115 	stw	fp,4(r16)
   10ee0:	d8800c15 	stw	r2,48(sp)
   10ee4:	29400208 	cmpgei	r5,r5,8
   10ee8:	2801e226 	beq	r5,zero,11674 <___vfiprintf_internal_r+0xb6c>
   10eec:	10009826 	beq	r2,zero,11150 <___vfiprintf_internal_r+0x648>
   10ef0:	d9800a04 	addi	r6,sp,40
   10ef4:	a80b883a 	mov	r5,r21
   10ef8:	b009883a 	mov	r4,r22
   10efc:	00109fc0 	call	109fc <__sprint_r.part.0>
   10f00:	1000131e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   10f04:	d8800c17 	ldw	r2,48(sp)
   10f08:	9021883a 	mov	r16,r18
   10f0c:	d8c00017 	ldw	r3,0(sp)
   10f10:	1cc0010c 	andi	r19,r3,4
   10f14:	98000226 	beq	r19,zero,10f20 <___vfiprintf_internal_r+0x418>
   10f18:	8de7c83a 	sub	r19,r17,r23
   10f1c:	04c09316 	blt	zero,r19,1116c <___vfiprintf_internal_r+0x664>
   10f20:	8dc0010e 	bge	r17,r23,10f28 <___vfiprintf_internal_r+0x420>
   10f24:	b823883a 	mov	r17,r23
   10f28:	d8c00117 	ldw	r3,4(sp)
   10f2c:	1c47883a 	add	r3,r3,r17
   10f30:	d8c00115 	stw	r3,4(sp)
   10f34:	10025d1e 	bne	r2,zero,118ac <___vfiprintf_internal_r+0xda4>
   10f38:	a0800007 	ldb	r2,0(r20)
   10f3c:	d8000b15 	stw	zero,44(sp)
   10f40:	9021883a 	mov	r16,r18
   10f44:	103f1b1e 	bne	r2,zero,10bb4 <___vfiprintf_internal_r+0xac>
   10f48:	d8800c17 	ldw	r2,48(sp)
   10f4c:	1003591e 	bne	r2,zero,11cb4 <___vfiprintf_internal_r+0x11ac>
   10f50:	a880030b 	ldhu	r2,12(r21)
   10f54:	1080100c 	andi	r2,r2,64
   10f58:	1003741e 	bne	r2,zero,11d2c <___vfiprintf_internal_r+0x1224>
   10f5c:	d8800117 	ldw	r2,4(sp)
   10f60:	dfc03017 	ldw	ra,192(sp)
   10f64:	df002f17 	ldw	fp,188(sp)
   10f68:	ddc02e17 	ldw	r23,184(sp)
   10f6c:	dd802d17 	ldw	r22,180(sp)
   10f70:	dd402c17 	ldw	r21,176(sp)
   10f74:	dd002b17 	ldw	r20,172(sp)
   10f78:	dcc02a17 	ldw	r19,168(sp)
   10f7c:	dc802917 	ldw	r18,164(sp)
   10f80:	dc402817 	ldw	r17,160(sp)
   10f84:	dc002717 	ldw	r16,156(sp)
   10f88:	dec03104 	addi	sp,sp,196
   10f8c:	f800283a 	ret
   10f90:	a80b883a 	mov	r5,r21
   10f94:	b009883a 	mov	r4,r22
   10f98:	000c9840 	call	c984 <__swsetup_r>
   10f9c:	1003631e 	bne	r2,zero,11d2c <___vfiprintf_internal_r+0x1224>
   10fa0:	a880030b 	ldhu	r2,12(r21)
   10fa4:	1080068c 	andi	r2,r2,26
   10fa8:	10800298 	cmpnei	r2,r2,10
   10fac:	103ef81e 	bne	r2,zero,10b90 <___vfiprintf_internal_r+0x88>
   10fb0:	a880038f 	ldh	r2,14(r21)
   10fb4:	103ef616 	blt	r2,zero,10b90 <___vfiprintf_internal_r+0x88>
   10fb8:	d9c00417 	ldw	r7,16(sp)
   10fbc:	a00d883a 	mov	r6,r20
   10fc0:	a80b883a 	mov	r5,r21
   10fc4:	b009883a 	mov	r4,r22
   10fc8:	dfc03017 	ldw	ra,192(sp)
   10fcc:	df002f17 	ldw	fp,188(sp)
   10fd0:	ddc02e17 	ldw	r23,184(sp)
   10fd4:	dd802d17 	ldw	r22,180(sp)
   10fd8:	dd402c17 	ldw	r21,176(sp)
   10fdc:	dd002b17 	ldw	r20,172(sp)
   10fe0:	dcc02a17 	ldw	r19,168(sp)
   10fe4:	dc802917 	ldw	r18,164(sp)
   10fe8:	dc402817 	ldw	r17,160(sp)
   10fec:	dc002717 	ldw	r16,156(sp)
   10ff0:	dec03104 	addi	sp,sp,196
   10ff4:	0011d841 	jmpi	11d84 <__sbprintf>
   10ff8:	6b400414 	ori	r13,r13,16
   10ffc:	6880080c 	andi	r2,r13,32
   11000:	10004726 	beq	r2,zero,11120 <___vfiprintf_internal_r+0x618>
   11004:	d8c00417 	ldw	r3,16(sp)
   11008:	00800044 	movi	r2,1
   1100c:	1dc00017 	ldw	r23,0(r3)
   11010:	1f000117 	ldw	fp,4(r3)
   11014:	18c00204 	addi	r3,r3,8
   11018:	d8c00415 	stw	r3,16(sp)
   1101c:	00000906 	br	11044 <___vfiprintf_internal_r+0x53c>
   11020:	6b400414 	ori	r13,r13,16
   11024:	6880080c 	andi	r2,r13,32
   11028:	10003126 	beq	r2,zero,110f0 <___vfiprintf_internal_r+0x5e8>
   1102c:	d8c00417 	ldw	r3,16(sp)
   11030:	0005883a 	mov	r2,zero
   11034:	1dc00017 	ldw	r23,0(r3)
   11038:	1f000117 	ldw	fp,4(r3)
   1103c:	18c00204 	addi	r3,r3,8
   11040:	d8c00415 	stw	r3,16(sp)
   11044:	d8000945 	stb	zero,37(sp)
   11048:	40ffffe0 	cmpeqi	r3,r8,-1
   1104c:	001d883a 	mov	r14,zero
   11050:	1800d11e 	bne	r3,zero,11398 <___vfiprintf_internal_r+0x890>
   11054:	04ffdfc4 	movi	r19,-129
   11058:	6cc8703a 	and	r4,r13,r19
   1105c:	bf06b03a 	or	r3,r23,fp
   11060:	d9000015 	stw	r4,0(sp)
   11064:	1802361e 	bne	r3,zero,11940 <___vfiprintf_internal_r+0xe38>
   11068:	4001fb1e 	bne	r8,zero,11858 <___vfiprintf_internal_r+0xd50>
   1106c:	1002a31e 	bne	r2,zero,11afc <___vfiprintf_internal_r+0xff4>
   11070:	6f00004c 	andi	fp,r13,1
   11074:	e002c726 	beq	fp,zero,11b94 <___vfiprintf_internal_r+0x108c>
   11078:	00800c04 	movi	r2,48
   1107c:	d88016c5 	stb	r2,91(sp)
   11080:	dcc016c4 	addi	r19,sp,91
   11084:	0000e106 	br	1140c <___vfiprintf_internal_r+0x904>
   11088:	8d27c83a 	sub	r19,r17,r20
   1108c:	8d3fae26 	beq	r17,r20,10f48 <___vfiprintf_internal_r+0x440>
   11090:	d8c00c17 	ldw	r3,48(sp)
   11094:	d8800b17 	ldw	r2,44(sp)
   11098:	85000015 	stw	r20,0(r16)
   1109c:	98c7883a 	add	r3,r19,r3
   110a0:	10800044 	addi	r2,r2,1
   110a4:	d8800b15 	stw	r2,44(sp)
   110a8:	84c00115 	stw	r19,4(r16)
   110ac:	d8c00c15 	stw	r3,48(sp)
   110b0:	10800208 	cmpgei	r2,r2,8
   110b4:	1000061e 	bne	r2,zero,110d0 <___vfiprintf_internal_r+0x5c8>
   110b8:	84000204 	addi	r16,r16,8
   110bc:	d8c00117 	ldw	r3,4(sp)
   110c0:	88800003 	ldbu	r2,0(r17)
   110c4:	1cc7883a 	add	r3,r3,r19
   110c8:	d8c00115 	stw	r3,4(sp)
   110cc:	003ec306 	br	10bdc <___vfiprintf_internal_r+0xd4>
   110d0:	18028626 	beq	r3,zero,11aec <___vfiprintf_internal_r+0xfe4>
   110d4:	d9800a04 	addi	r6,sp,40
   110d8:	a80b883a 	mov	r5,r21
   110dc:	b009883a 	mov	r4,r22
   110e0:	00109fc0 	call	109fc <__sprint_r.part.0>
   110e4:	103f9a1e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   110e8:	9021883a 	mov	r16,r18
   110ec:	003ff306 	br	110bc <___vfiprintf_internal_r+0x5b4>
   110f0:	d8c00417 	ldw	r3,16(sp)
   110f4:	6880040c 	andi	r2,r13,16
   110f8:	1dc00017 	ldw	r23,0(r3)
   110fc:	18c00104 	addi	r3,r3,4
   11100:	d8c00415 	stw	r3,16(sp)
   11104:	1000031e 	bne	r2,zero,11114 <___vfiprintf_internal_r+0x60c>
   11108:	6880100c 	andi	r2,r13,64
   1110c:	10000126 	beq	r2,zero,11114 <___vfiprintf_internal_r+0x60c>
   11110:	bdffffcc 	andi	r23,r23,65535
   11114:	0039883a 	mov	fp,zero
   11118:	0005883a 	mov	r2,zero
   1111c:	003fc906 	br	11044 <___vfiprintf_internal_r+0x53c>
   11120:	d8c00417 	ldw	r3,16(sp)
   11124:	6880040c 	andi	r2,r13,16
   11128:	1dc00017 	ldw	r23,0(r3)
   1112c:	18c00104 	addi	r3,r3,4
   11130:	d8c00415 	stw	r3,16(sp)
   11134:	1000031e 	bne	r2,zero,11144 <___vfiprintf_internal_r+0x63c>
   11138:	6880100c 	andi	r2,r13,64
   1113c:	10000126 	beq	r2,zero,11144 <___vfiprintf_internal_r+0x63c>
   11140:	bdffffcc 	andi	r23,r23,65535
   11144:	0039883a 	mov	fp,zero
   11148:	00800044 	movi	r2,1
   1114c:	003fbd06 	br	11044 <___vfiprintf_internal_r+0x53c>
   11150:	d8c00017 	ldw	r3,0(sp)
   11154:	d8000b15 	stw	zero,44(sp)
   11158:	1cc0010c 	andi	r19,r3,4
   1115c:	98025226 	beq	r19,zero,11aa8 <___vfiprintf_internal_r+0xfa0>
   11160:	8de7c83a 	sub	r19,r17,r23
   11164:	04c2500e 	bge	zero,r19,11aa8 <___vfiprintf_internal_r+0xfa0>
   11168:	9021883a 	mov	r16,r18
   1116c:	98c00450 	cmplti	r3,r19,17
   11170:	d9000b17 	ldw	r4,44(sp)
   11174:	01c00074 	movhi	r7,1
   11178:	1802e61e 	bne	r3,zero,11d14 <___vfiprintf_internal_r+0x120c>
   1117c:	39df2e04 	addi	r7,r7,31928
   11180:	07000404 	movi	fp,16
   11184:	00000606 	br	111a0 <___vfiprintf_internal_r+0x698>
   11188:	21400084 	addi	r5,r4,2
   1118c:	84000204 	addi	r16,r16,8
   11190:	1809883a 	mov	r4,r3
   11194:	9cfffc04 	addi	r19,r19,-16
   11198:	98c00448 	cmpgei	r3,r19,17
   1119c:	18001726 	beq	r3,zero,111fc <___vfiprintf_internal_r+0x6f4>
   111a0:	20c00044 	addi	r3,r4,1
   111a4:	10800404 	addi	r2,r2,16
   111a8:	81c00015 	stw	r7,0(r16)
   111ac:	87000115 	stw	fp,4(r16)
   111b0:	d8800c15 	stw	r2,48(sp)
   111b4:	d8c00b15 	stw	r3,44(sp)
   111b8:	19400208 	cmpgei	r5,r3,8
   111bc:	283ff226 	beq	r5,zero,11188 <___vfiprintf_internal_r+0x680>
   111c0:	d9800a04 	addi	r6,sp,40
   111c4:	a80b883a 	mov	r5,r21
   111c8:	b009883a 	mov	r4,r22
   111cc:	10012b26 	beq	r2,zero,1167c <___vfiprintf_internal_r+0xb74>
   111d0:	d9c00015 	stw	r7,0(sp)
   111d4:	00109fc0 	call	109fc <__sprint_r.part.0>
   111d8:	103f5d1e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   111dc:	d9000b17 	ldw	r4,44(sp)
   111e0:	9cfffc04 	addi	r19,r19,-16
   111e4:	98c00448 	cmpgei	r3,r19,17
   111e8:	d8800c17 	ldw	r2,48(sp)
   111ec:	d9c00017 	ldw	r7,0(sp)
   111f0:	9021883a 	mov	r16,r18
   111f4:	21400044 	addi	r5,r4,1
   111f8:	183fe91e 	bne	r3,zero,111a0 <___vfiprintf_internal_r+0x698>
   111fc:	14c5883a 	add	r2,r2,r19
   11200:	d9400b15 	stw	r5,44(sp)
   11204:	81c00015 	stw	r7,0(r16)
   11208:	84c00115 	stw	r19,4(r16)
   1120c:	d8800c15 	stw	r2,48(sp)
   11210:	29400210 	cmplti	r5,r5,8
   11214:	283f421e 	bne	r5,zero,10f20 <___vfiprintf_internal_r+0x418>
   11218:	10022326 	beq	r2,zero,11aa8 <___vfiprintf_internal_r+0xfa0>
   1121c:	d9800a04 	addi	r6,sp,40
   11220:	a80b883a 	mov	r5,r21
   11224:	b009883a 	mov	r4,r22
   11228:	00109fc0 	call	109fc <__sprint_r.part.0>
   1122c:	103f481e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   11230:	d8800c17 	ldw	r2,48(sp)
   11234:	003f3a06 	br	10f20 <___vfiprintf_internal_r+0x418>
   11238:	000eac00 	call	eac0 <__sinit>
   1123c:	003e4406 	br	10b50 <___vfiprintf_internal_r+0x48>
   11240:	29403fcc 	andi	r5,r5,255
   11244:	2802b11e 	bne	r5,zero,11d0c <___vfiprintf_internal_r+0x1204>
   11248:	6880080c 	andi	r2,r13,32
   1124c:	10003a26 	beq	r2,zero,11338 <___vfiprintf_internal_r+0x830>
   11250:	d8c00417 	ldw	r3,16(sp)
   11254:	18800117 	ldw	r2,4(r3)
   11258:	1dc00017 	ldw	r23,0(r3)
   1125c:	18c00204 	addi	r3,r3,8
   11260:	d8c00415 	stw	r3,16(sp)
   11264:	1039883a 	mov	fp,r2
   11268:	10004116 	blt	r2,zero,11370 <___vfiprintf_internal_r+0x868>
   1126c:	40bfffd8 	cmpnei	r2,r8,-1
   11270:	db800943 	ldbu	r14,37(sp)
   11274:	10000626 	beq	r2,zero,11290 <___vfiprintf_internal_r+0x788>
   11278:	04ffdfc4 	movi	r19,-129
   1127c:	6cc6703a 	and	r3,r13,r19
   11280:	bf04b03a 	or	r2,r23,fp
   11284:	d8c00015 	stw	r3,0(sp)
   11288:	10021b26 	beq	r2,zero,11af8 <___vfiprintf_internal_r+0xff0>
   1128c:	db400017 	ldw	r13,0(sp)
   11290:	e001ad1e 	bne	fp,zero,11948 <___vfiprintf_internal_r+0xe40>
   11294:	b88002a8 	cmpgeui	r2,r23,10
   11298:	1001ab1e 	bne	r2,zero,11948 <___vfiprintf_internal_r+0xe40>
   1129c:	bdc00c04 	addi	r23,r23,48
   112a0:	ddc016c5 	stb	r23,91(sp)
   112a4:	db400015 	stw	r13,0(sp)
   112a8:	07000044 	movi	fp,1
   112ac:	dcc016c4 	addi	r19,sp,91
   112b0:	00005606 	br	1140c <___vfiprintf_internal_r+0x904>
   112b4:	d8800417 	ldw	r2,16(sp)
   112b8:	14400017 	ldw	r17,0(r2)
   112bc:	10c00104 	addi	r3,r2,4
   112c0:	8802310e 	bge	r17,zero,11b88 <___vfiprintf_internal_r+0x1080>
   112c4:	0463c83a 	sub	r17,zero,r17
   112c8:	d8c00415 	stw	r3,16(sp)
   112cc:	a0800007 	ldb	r2,0(r20)
   112d0:	6b400114 	ori	r13,r13,4
   112d4:	003e4d06 	br	10c0c <___vfiprintf_internal_r+0x104>
   112d8:	a0800007 	ldb	r2,0(r20)
   112dc:	a0c00044 	addi	r3,r20,1
   112e0:	11000aa0 	cmpeqi	r4,r2,42
   112e4:	2002941e 	bne	r4,zero,11d38 <___vfiprintf_internal_r+0x1230>
   112e8:	113ff404 	addi	r4,r2,-48
   112ec:	21c002b0 	cmpltui	r7,r4,10
   112f0:	1829883a 	mov	r20,r3
   112f4:	0011883a 	mov	r8,zero
   112f8:	383e4526 	beq	r7,zero,10c10 <___vfiprintf_internal_r+0x108>
   112fc:	400690ba 	slli	r3,r8,2
   11300:	a0800007 	ldb	r2,0(r20)
   11304:	a5000044 	addi	r20,r20,1
   11308:	1a11883a 	add	r8,r3,r8
   1130c:	4211883a 	add	r8,r8,r8
   11310:	4111883a 	add	r8,r8,r4
   11314:	113ff404 	addi	r4,r2,-48
   11318:	20c002b0 	cmpltui	r3,r4,10
   1131c:	183ff71e 	bne	r3,zero,112fc <___vfiprintf_internal_r+0x7f4>
   11320:	003e3b06 	br	10c10 <___vfiprintf_internal_r+0x108>
   11324:	29403fcc 	andi	r5,r5,255
   11328:	28026d1e 	bne	r5,zero,11ce0 <___vfiprintf_internal_r+0x11d8>
   1132c:	6b400414 	ori	r13,r13,16
   11330:	6880080c 	andi	r2,r13,32
   11334:	103fc61e 	bne	r2,zero,11250 <___vfiprintf_internal_r+0x748>
   11338:	d8c00417 	ldw	r3,16(sp)
   1133c:	6880040c 	andi	r2,r13,16
   11340:	1dc00017 	ldw	r23,0(r3)
   11344:	18c00104 	addi	r3,r3,4
   11348:	d8c00415 	stw	r3,16(sp)
   1134c:	1001f11e 	bne	r2,zero,11b14 <___vfiprintf_internal_r+0x100c>
   11350:	6880100c 	andi	r2,r13,64
   11354:	1001ef26 	beq	r2,zero,11b14 <___vfiprintf_internal_r+0x100c>
   11358:	bdffffcc 	andi	r23,r23,65535
   1135c:	bde0001c 	xori	r23,r23,32768
   11360:	bde00004 	addi	r23,r23,-32768
   11364:	b839d7fa 	srai	fp,r23,31
   11368:	e005883a 	mov	r2,fp
   1136c:	103fbf0e 	bge	r2,zero,1126c <___vfiprintf_internal_r+0x764>
   11370:	b804c03a 	cmpne	r2,r23,zero
   11374:	0739c83a 	sub	fp,zero,fp
   11378:	e0b9c83a 	sub	fp,fp,r2
   1137c:	00800b44 	movi	r2,45
   11380:	d8800945 	stb	r2,37(sp)
   11384:	40ffffe0 	cmpeqi	r3,r8,-1
   11388:	05efc83a 	sub	r23,zero,r23
   1138c:	03800b44 	movi	r14,45
   11390:	00800044 	movi	r2,1
   11394:	183f2f26 	beq	r3,zero,11054 <___vfiprintf_internal_r+0x54c>
   11398:	10c00060 	cmpeqi	r3,r2,1
   1139c:	183fbc1e 	bne	r3,zero,11290 <___vfiprintf_internal_r+0x788>
   113a0:	108000a0 	cmpeqi	r2,r2,2
   113a4:	1001311e 	bne	r2,zero,1186c <___vfiprintf_internal_r+0xd64>
   113a8:	9027883a 	mov	r19,r18
   113ac:	e008977a 	slli	r4,fp,29
   113b0:	b806d0fa 	srli	r3,r23,3
   113b4:	e038d0fa 	srli	fp,fp,3
   113b8:	b88001cc 	andi	r2,r23,7
   113bc:	10800c04 	addi	r2,r2,48
   113c0:	20eeb03a 	or	r23,r4,r3
   113c4:	98bfffc5 	stb	r2,-1(r19)
   113c8:	bf06b03a 	or	r3,r23,fp
   113cc:	980b883a 	mov	r5,r19
   113d0:	9cffffc4 	addi	r19,r19,-1
   113d4:	183ff51e 	bne	r3,zero,113ac <___vfiprintf_internal_r+0x8a4>
   113d8:	68c0004c 	andi	r3,r13,1
   113dc:	18013026 	beq	r3,zero,118a0 <___vfiprintf_internal_r+0xd98>
   113e0:	10803fcc 	andi	r2,r2,255
   113e4:	1080201c 	xori	r2,r2,128
   113e8:	10bfe004 	addi	r2,r2,-128
   113ec:	10800c18 	cmpnei	r2,r2,48
   113f0:	10012b26 	beq	r2,zero,118a0 <___vfiprintf_internal_r+0xd98>
   113f4:	297fff84 	addi	r5,r5,-2
   113f8:	00800c04 	movi	r2,48
   113fc:	98bfffc5 	stb	r2,-1(r19)
   11400:	9179c83a 	sub	fp,r18,r5
   11404:	db400015 	stw	r13,0(sp)
   11408:	2827883a 	mov	r19,r5
   1140c:	e02f883a 	mov	r23,fp
   11410:	e200010e 	bge	fp,r8,11418 <___vfiprintf_internal_r+0x910>
   11414:	402f883a 	mov	r23,r8
   11418:	73803fcc 	andi	r14,r14,255
   1141c:	7380201c 	xori	r14,r14,128
   11420:	73bfe004 	addi	r14,r14,-128
   11424:	703e7326 	beq	r14,zero,10df4 <___vfiprintf_internal_r+0x2ec>
   11428:	bdc00044 	addi	r23,r23,1
   1142c:	003e7106 	br	10df4 <___vfiprintf_internal_r+0x2ec>
   11430:	a0800007 	ldb	r2,0(r20)
   11434:	6b402014 	ori	r13,r13,128
   11438:	003df406 	br	10c0c <___vfiprintf_internal_r+0x104>
   1143c:	a0800007 	ldb	r2,0(r20)
   11440:	01400044 	movi	r5,1
   11444:	01800ac4 	movi	r6,43
   11448:	003df006 	br	10c0c <___vfiprintf_internal_r+0x104>
   1144c:	a0800007 	ldb	r2,0(r20)
   11450:	6b400054 	ori	r13,r13,1
   11454:	003ded06 	br	10c0c <___vfiprintf_internal_r+0x104>
   11458:	30c03fcc 	andi	r3,r6,255
   1145c:	18c0201c 	xori	r3,r3,128
   11460:	18ffe004 	addi	r3,r3,-128
   11464:	a0800003 	ldbu	r2,0(r20)
   11468:	1800091e 	bne	r3,zero,11490 <___vfiprintf_internal_r+0x988>
   1146c:	10803fcc 	andi	r2,r2,255
   11470:	1080201c 	xori	r2,r2,128
   11474:	01400044 	movi	r5,1
   11478:	01800804 	movi	r6,32
   1147c:	10bfe004 	addi	r2,r2,-128
   11480:	003de206 	br	10c0c <___vfiprintf_internal_r+0x104>
   11484:	a0800043 	ldbu	r2,1(r20)
   11488:	6b400814 	ori	r13,r13,32
   1148c:	a5000044 	addi	r20,r20,1
   11490:	10803fcc 	andi	r2,r2,255
   11494:	1080201c 	xori	r2,r2,128
   11498:	10bfe004 	addi	r2,r2,-128
   1149c:	003ddb06 	br	10c0c <___vfiprintf_internal_r+0x104>
   114a0:	a0800007 	ldb	r2,0(r20)
   114a4:	6b401014 	ori	r13,r13,64
   114a8:	003dd806 	br	10c0c <___vfiprintf_internal_r+0x104>
   114ac:	29403fcc 	andi	r5,r5,255
   114b0:	28020f1e 	bne	r5,zero,11cf0 <___vfiprintf_internal_r+0x11e8>
   114b4:	d9000417 	ldw	r4,16(sp)
   114b8:	6880080c 	andi	r2,r13,32
   114bc:	20c00104 	addi	r3,r4,4
   114c0:	1001c01e 	bne	r2,zero,11bc4 <___vfiprintf_internal_r+0x10bc>
   114c4:	6880040c 	andi	r2,r13,16
   114c8:	1001df1e 	bne	r2,zero,11c48 <___vfiprintf_internal_r+0x1140>
   114cc:	6b40100c 	andi	r13,r13,64
   114d0:	6801dd26 	beq	r13,zero,11c48 <___vfiprintf_internal_r+0x1140>
   114d4:	d8800417 	ldw	r2,16(sp)
   114d8:	d8c00415 	stw	r3,16(sp)
   114dc:	d8c00117 	ldw	r3,4(sp)
   114e0:	10800017 	ldw	r2,0(r2)
   114e4:	10c0000d 	sth	r3,0(r2)
   114e8:	003db006 	br	10bac <___vfiprintf_internal_r+0xa4>
   114ec:	a0800007 	ldb	r2,0(r20)
   114f0:	10c01b18 	cmpnei	r3,r2,108
   114f4:	183fe326 	beq	r3,zero,11484 <___vfiprintf_internal_r+0x97c>
   114f8:	6b400414 	ori	r13,r13,16
   114fc:	003dc306 	br	10c0c <___vfiprintf_internal_r+0x104>
   11500:	d8c00417 	ldw	r3,16(sp)
   11504:	d8000945 	stb	zero,37(sp)
   11508:	05c00044 	movi	r23,1
   1150c:	18800017 	ldw	r2,0(r3)
   11510:	18c00104 	addi	r3,r3,4
   11514:	d8c00415 	stw	r3,16(sp)
   11518:	d8800d05 	stb	r2,52(sp)
   1151c:	07000044 	movi	fp,1
   11520:	dcc00d04 	addi	r19,sp,52
   11524:	003e3106 	br	10dec <___vfiprintf_internal_r+0x2e4>
   11528:	29403fcc 	andi	r5,r5,255
   1152c:	2801ee1e 	bne	r5,zero,11ce8 <___vfiprintf_internal_r+0x11e0>
   11530:	00c00074 	movhi	r3,1
   11534:	18dea804 	addi	r3,r3,31392
   11538:	d8c00515 	stw	r3,20(sp)
   1153c:	68c0080c 	andi	r3,r13,32
   11540:	18001226 	beq	r3,zero,1158c <___vfiprintf_internal_r+0xa84>
   11544:	d8c00417 	ldw	r3,16(sp)
   11548:	1dc00017 	ldw	r23,0(r3)
   1154c:	1f000117 	ldw	fp,4(r3)
   11550:	18c00204 	addi	r3,r3,8
   11554:	d8c00415 	stw	r3,16(sp)
   11558:	68c0004c 	andi	r3,r13,1
   1155c:	18000226 	beq	r3,zero,11568 <___vfiprintf_internal_r+0xa60>
   11560:	bf06b03a 	or	r3,r23,fp
   11564:	1801911e 	bne	r3,zero,11bac <___vfiprintf_internal_r+0x10a4>
   11568:	00800084 	movi	r2,2
   1156c:	003eb506 	br	11044 <___vfiprintf_internal_r+0x53c>
   11570:	29403fcc 	andi	r5,r5,255
   11574:	2801e01e 	bne	r5,zero,11cf8 <___vfiprintf_internal_r+0x11f0>
   11578:	00c00074 	movhi	r3,1
   1157c:	18dea304 	addi	r3,r3,31372
   11580:	d8c00515 	stw	r3,20(sp)
   11584:	68c0080c 	andi	r3,r13,32
   11588:	183fee1e 	bne	r3,zero,11544 <___vfiprintf_internal_r+0xa3c>
   1158c:	d9000417 	ldw	r4,16(sp)
   11590:	68c0040c 	andi	r3,r13,16
   11594:	25c00017 	ldw	r23,0(r4)
   11598:	21000104 	addi	r4,r4,4
   1159c:	d9000415 	stw	r4,16(sp)
   115a0:	18015a1e 	bne	r3,zero,11b0c <___vfiprintf_internal_r+0x1004>
   115a4:	68c0100c 	andi	r3,r13,64
   115a8:	18015826 	beq	r3,zero,11b0c <___vfiprintf_internal_r+0x1004>
   115ac:	bdffffcc 	andi	r23,r23,65535
   115b0:	0039883a 	mov	fp,zero
   115b4:	003fe806 	br	11558 <___vfiprintf_internal_r+0xa50>
   115b8:	d8800417 	ldw	r2,16(sp)
   115bc:	d8000945 	stb	zero,37(sp)
   115c0:	14c00017 	ldw	r19,0(r2)
   115c4:	10c00104 	addi	r3,r2,4
   115c8:	9801a526 	beq	r19,zero,11c60 <___vfiprintf_internal_r+0x1158>
   115cc:	40bfffe0 	cmpeqi	r2,r8,-1
   115d0:	10018a1e 	bne	r2,zero,11bfc <___vfiprintf_internal_r+0x10f4>
   115d4:	400d883a 	mov	r6,r8
   115d8:	000b883a 	mov	r5,zero
   115dc:	9809883a 	mov	r4,r19
   115e0:	d8c00315 	stw	r3,12(sp)
   115e4:	db400215 	stw	r13,8(sp)
   115e8:	da000015 	stw	r8,0(sp)
   115ec:	000f2c80 	call	f2c8 <memchr>
   115f0:	da000017 	ldw	r8,0(sp)
   115f4:	db400217 	ldw	r13,8(sp)
   115f8:	d8c00317 	ldw	r3,12(sp)
   115fc:	1001b426 	beq	r2,zero,11cd0 <___vfiprintf_internal_r+0x11c8>
   11600:	14f9c83a 	sub	fp,r2,r19
   11604:	e02f883a 	mov	r23,fp
   11608:	d8c00415 	stw	r3,16(sp)
   1160c:	003df706 	br	10dec <___vfiprintf_internal_r+0x2e4>
   11610:	a0800007 	ldb	r2,0(r20)
   11614:	6b400814 	ori	r13,r13,32
   11618:	003d7c06 	br	10c0c <___vfiprintf_internal_r+0x104>
   1161c:	d8c00417 	ldw	r3,16(sp)
   11620:	00800c04 	movi	r2,48
   11624:	d8800985 	stb	r2,38(sp)
   11628:	00801e04 	movi	r2,120
   1162c:	01000074 	movhi	r4,1
   11630:	d88009c5 	stb	r2,39(sp)
   11634:	18800104 	addi	r2,r3,4
   11638:	d8800415 	stw	r2,16(sp)
   1163c:	209ea304 	addi	r2,r4,31372
   11640:	d8800515 	stw	r2,20(sp)
   11644:	1dc00017 	ldw	r23,0(r3)
   11648:	0039883a 	mov	fp,zero
   1164c:	6b400094 	ori	r13,r13,2
   11650:	00800084 	movi	r2,2
   11654:	003e7b06 	br	11044 <___vfiprintf_internal_r+0x53c>
   11658:	00c00044 	movi	r3,1
   1165c:	e005883a 	mov	r2,fp
   11660:	dcc01715 	stw	r19,92(sp)
   11664:	df001815 	stw	fp,96(sp)
   11668:	df000c15 	stw	fp,48(sp)
   1166c:	d8c00b15 	stw	r3,44(sp)
   11670:	9021883a 	mov	r16,r18
   11674:	84000204 	addi	r16,r16,8
   11678:	003e2406 	br	10f0c <___vfiprintf_internal_r+0x404>
   1167c:	01400044 	movi	r5,1
   11680:	0009883a 	mov	r4,zero
   11684:	9021883a 	mov	r16,r18
   11688:	003ec206 	br	11194 <___vfiprintf_internal_r+0x68c>
   1168c:	8dc7c83a 	sub	r3,r17,r23
   11690:	00fe0d0e 	bge	zero,r3,10ec8 <___vfiprintf_internal_r+0x3c0>
   11694:	19800450 	cmplti	r6,r3,17
   11698:	01c00074 	movhi	r7,1
   1169c:	3001a01e 	bne	r6,zero,11d20 <___vfiprintf_internal_r+0x1218>
   116a0:	39df2a04 	addi	r7,r7,31912
   116a4:	03400404 	movi	r13,16
   116a8:	00000606 	br	116c4 <___vfiprintf_internal_r+0xbbc>
   116ac:	21800084 	addi	r6,r4,2
   116b0:	84000204 	addi	r16,r16,8
   116b4:	2809883a 	mov	r4,r5
   116b8:	18fffc04 	addi	r3,r3,-16
   116bc:	19400448 	cmpgei	r5,r3,17
   116c0:	28001c26 	beq	r5,zero,11734 <___vfiprintf_internal_r+0xc2c>
   116c4:	21400044 	addi	r5,r4,1
   116c8:	10800404 	addi	r2,r2,16
   116cc:	81c00015 	stw	r7,0(r16)
   116d0:	83400115 	stw	r13,4(r16)
   116d4:	d8800c15 	stw	r2,48(sp)
   116d8:	d9400b15 	stw	r5,44(sp)
   116dc:	29800208 	cmpgei	r6,r5,8
   116e0:	303ff226 	beq	r6,zero,116ac <___vfiprintf_internal_r+0xba4>
   116e4:	d9800a04 	addi	r6,sp,40
   116e8:	a80b883a 	mov	r5,r21
   116ec:	b009883a 	mov	r4,r22
   116f0:	10007426 	beq	r2,zero,118c4 <___vfiprintf_internal_r+0xdbc>
   116f4:	d9c00615 	stw	r7,24(sp)
   116f8:	d8c00315 	stw	r3,12(sp)
   116fc:	da000215 	stw	r8,8(sp)
   11700:	00109fc0 	call	109fc <__sprint_r.part.0>
   11704:	103e121e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   11708:	d8c00317 	ldw	r3,12(sp)
   1170c:	d9000b17 	ldw	r4,44(sp)
   11710:	d8800c17 	ldw	r2,48(sp)
   11714:	18fffc04 	addi	r3,r3,-16
   11718:	19400448 	cmpgei	r5,r3,17
   1171c:	d9c00617 	ldw	r7,24(sp)
   11720:	da000217 	ldw	r8,8(sp)
   11724:	9021883a 	mov	r16,r18
   11728:	21800044 	addi	r6,r4,1
   1172c:	03400404 	movi	r13,16
   11730:	283fe41e 	bne	r5,zero,116c4 <___vfiprintf_internal_r+0xbbc>
   11734:	10c5883a 	add	r2,r2,r3
   11738:	80c00115 	stw	r3,4(r16)
   1173c:	81c00015 	stw	r7,0(r16)
   11740:	d8800c15 	stw	r2,48(sp)
   11744:	d9800b15 	stw	r6,44(sp)
   11748:	30c00208 	cmpgei	r3,r6,8
   1174c:	18011326 	beq	r3,zero,11b9c <___vfiprintf_internal_r+0x1094>
   11750:	10014b26 	beq	r2,zero,11c80 <___vfiprintf_internal_r+0x1178>
   11754:	d9800a04 	addi	r6,sp,40
   11758:	a80b883a 	mov	r5,r21
   1175c:	b009883a 	mov	r4,r22
   11760:	da000215 	stw	r8,8(sp)
   11764:	00109fc0 	call	109fc <__sprint_r.part.0>
   11768:	103df91e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   1176c:	da000217 	ldw	r8,8(sp)
   11770:	d9000b17 	ldw	r4,44(sp)
   11774:	d8800c17 	ldw	r2,48(sp)
   11778:	4711c83a 	sub	r8,r8,fp
   1177c:	9021883a 	mov	r16,r18
   11780:	21400044 	addi	r5,r4,1
   11784:	023dd20e 	bge	zero,r8,10ed0 <___vfiprintf_internal_r+0x3c8>
   11788:	01c00074 	movhi	r7,1
   1178c:	40c00450 	cmplti	r3,r8,17
   11790:	39df2a04 	addi	r7,r7,31912
   11794:	03400404 	movi	r13,16
   11798:	18000726 	beq	r3,zero,117b8 <___vfiprintf_internal_r+0xcb0>
   1179c:	00002006 	br	11820 <___vfiprintf_internal_r+0xd18>
   117a0:	21400084 	addi	r5,r4,2
   117a4:	84000204 	addi	r16,r16,8
   117a8:	1809883a 	mov	r4,r3
   117ac:	423ffc04 	addi	r8,r8,-16
   117b0:	40c00448 	cmpgei	r3,r8,17
   117b4:	18001a26 	beq	r3,zero,11820 <___vfiprintf_internal_r+0xd18>
   117b8:	20c00044 	addi	r3,r4,1
   117bc:	10800404 	addi	r2,r2,16
   117c0:	81c00015 	stw	r7,0(r16)
   117c4:	83400115 	stw	r13,4(r16)
   117c8:	d8800c15 	stw	r2,48(sp)
   117cc:	d8c00b15 	stw	r3,44(sp)
   117d0:	19400208 	cmpgei	r5,r3,8
   117d4:	283ff226 	beq	r5,zero,117a0 <___vfiprintf_internal_r+0xc98>
   117d8:	d9800a04 	addi	r6,sp,40
   117dc:	a80b883a 	mov	r5,r21
   117e0:	b009883a 	mov	r4,r22
   117e4:	10001826 	beq	r2,zero,11848 <___vfiprintf_internal_r+0xd40>
   117e8:	d9c00315 	stw	r7,12(sp)
   117ec:	da000215 	stw	r8,8(sp)
   117f0:	00109fc0 	call	109fc <__sprint_r.part.0>
   117f4:	103dd61e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   117f8:	da000217 	ldw	r8,8(sp)
   117fc:	d9000b17 	ldw	r4,44(sp)
   11800:	d8800c17 	ldw	r2,48(sp)
   11804:	423ffc04 	addi	r8,r8,-16
   11808:	40c00448 	cmpgei	r3,r8,17
   1180c:	d9c00317 	ldw	r7,12(sp)
   11810:	9021883a 	mov	r16,r18
   11814:	21400044 	addi	r5,r4,1
   11818:	03400404 	movi	r13,16
   1181c:	183fe61e 	bne	r3,zero,117b8 <___vfiprintf_internal_r+0xcb0>
   11820:	1205883a 	add	r2,r2,r8
   11824:	81c00015 	stw	r7,0(r16)
   11828:	82000115 	stw	r8,4(r16)
   1182c:	d8800c15 	stw	r2,48(sp)
   11830:	d9400b15 	stw	r5,44(sp)
   11834:	28c00208 	cmpgei	r3,r5,8
   11838:	1800a11e 	bne	r3,zero,11ac0 <___vfiprintf_internal_r+0xfb8>
   1183c:	84000204 	addi	r16,r16,8
   11840:	29400044 	addi	r5,r5,1
   11844:	003da206 	br	10ed0 <___vfiprintf_internal_r+0x3c8>
   11848:	01400044 	movi	r5,1
   1184c:	0009883a 	mov	r4,zero
   11850:	9021883a 	mov	r16,r18
   11854:	003fd506 	br	117ac <___vfiprintf_internal_r+0xca4>
   11858:	10c00060 	cmpeqi	r3,r2,1
   1185c:	18011a1e 	bne	r3,zero,11cc8 <___vfiprintf_internal_r+0x11c0>
   11860:	108000a0 	cmpeqi	r2,r2,2
   11864:	db400017 	ldw	r13,0(sp)
   11868:	103ecf26 	beq	r2,zero,113a8 <___vfiprintf_internal_r+0x8a0>
   1186c:	9027883a 	mov	r19,r18
   11870:	d9000517 	ldw	r4,20(sp)
   11874:	b88003cc 	andi	r2,r23,15
   11878:	e006973a 	slli	r3,fp,28
   1187c:	b82ed13a 	srli	r23,r23,4
   11880:	2085883a 	add	r2,r4,r2
   11884:	10800003 	ldbu	r2,0(r2)
   11888:	e038d13a 	srli	fp,fp,4
   1188c:	1deeb03a 	or	r23,r3,r23
   11890:	98bfffc5 	stb	r2,-1(r19)
   11894:	bf04b03a 	or	r2,r23,fp
   11898:	9cffffc4 	addi	r19,r19,-1
   1189c:	103ff41e 	bne	r2,zero,11870 <___vfiprintf_internal_r+0xd68>
   118a0:	94f9c83a 	sub	fp,r18,r19
   118a4:	db400015 	stw	r13,0(sp)
   118a8:	003ed806 	br	1140c <___vfiprintf_internal_r+0x904>
   118ac:	d9800a04 	addi	r6,sp,40
   118b0:	a80b883a 	mov	r5,r21
   118b4:	b009883a 	mov	r4,r22
   118b8:	00109fc0 	call	109fc <__sprint_r.part.0>
   118bc:	103d9e26 	beq	r2,zero,10f38 <___vfiprintf_internal_r+0x430>
   118c0:	003da306 	br	10f50 <___vfiprintf_internal_r+0x448>
   118c4:	01800044 	movi	r6,1
   118c8:	0009883a 	mov	r4,zero
   118cc:	9021883a 	mov	r16,r18
   118d0:	003f7906 	br	116b8 <___vfiprintf_internal_r+0xbb0>
   118d4:	10009626 	beq	r2,zero,11b30 <___vfiprintf_internal_r+0x1028>
   118d8:	d9800a04 	addi	r6,sp,40
   118dc:	a80b883a 	mov	r5,r21
   118e0:	b009883a 	mov	r4,r22
   118e4:	da000615 	stw	r8,24(sp)
   118e8:	db400315 	stw	r13,12(sp)
   118ec:	db800215 	stw	r14,8(sp)
   118f0:	00109fc0 	call	109fc <__sprint_r.part.0>
   118f4:	103d961e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   118f8:	d9000b17 	ldw	r4,44(sp)
   118fc:	d8800c17 	ldw	r2,48(sp)
   11900:	da000617 	ldw	r8,24(sp)
   11904:	db400317 	ldw	r13,12(sp)
   11908:	db800217 	ldw	r14,8(sp)
   1190c:	9021883a 	mov	r16,r18
   11910:	21400044 	addi	r5,r4,1
   11914:	003d5206 	br	10e60 <___vfiprintf_internal_r+0x358>
   11918:	d8800984 	addi	r2,sp,38
   1191c:	d8801715 	stw	r2,92(sp)
   11920:	00800084 	movi	r2,2
   11924:	d8801815 	stw	r2,96(sp)
   11928:	01400044 	movi	r5,1
   1192c:	9021883a 	mov	r16,r18
   11930:	2809883a 	mov	r4,r5
   11934:	84000204 	addi	r16,r16,8
   11938:	21400044 	addi	r5,r4,1
   1193c:	003d6006 	br	10ec0 <___vfiprintf_internal_r+0x3b8>
   11940:	db400017 	ldw	r13,0(sp)
   11944:	003e9406 	br	11398 <___vfiprintf_internal_r+0x890>
   11948:	9027883a 	mov	r19,r18
   1194c:	b809883a 	mov	r4,r23
   11950:	e00b883a 	mov	r5,fp
   11954:	01800284 	movi	r6,10
   11958:	000f883a 	mov	r7,zero
   1195c:	db800315 	stw	r14,12(sp)
   11960:	da000215 	stw	r8,8(sp)
   11964:	db400015 	stw	r13,0(sp)
   11968:	00141580 	call	14158 <__umoddi3>
   1196c:	10800c04 	addi	r2,r2,48
   11970:	b809883a 	mov	r4,r23
   11974:	e00b883a 	mov	r5,fp
   11978:	98bfffc5 	stb	r2,-1(r19)
   1197c:	01800284 	movi	r6,10
   11980:	000f883a 	mov	r7,zero
   11984:	0013b380 	call	13b38 <__udivdi3>
   11988:	e009883a 	mov	r4,fp
   1198c:	b80b883a 	mov	r5,r23
   11990:	db400017 	ldw	r13,0(sp)
   11994:	da000217 	ldw	r8,8(sp)
   11998:	db800317 	ldw	r14,12(sp)
   1199c:	9cffffc4 	addi	r19,r19,-1
   119a0:	102f883a 	mov	r23,r2
   119a4:	1839883a 	mov	fp,r3
   119a8:	203fe81e 	bne	r4,zero,1194c <___vfiprintf_internal_r+0xe44>
   119ac:	294002a8 	cmpgeui	r5,r5,10
   119b0:	283fe61e 	bne	r5,zero,1194c <___vfiprintf_internal_r+0xe44>
   119b4:	94f9c83a 	sub	fp,r18,r19
   119b8:	003e9406 	br	1140c <___vfiprintf_internal_r+0x904>
   119bc:	19400450 	cmplti	r5,r3,17
   119c0:	01c00074 	movhi	r7,1
   119c4:	2800ce1e 	bne	r5,zero,11d00 <___vfiprintf_internal_r+0x11f8>
   119c8:	39df2e04 	addi	r7,r7,31928
   119cc:	03c00404 	movi	r15,16
   119d0:	00000706 	br	119f0 <___vfiprintf_internal_r+0xee8>
   119d4:	27c00084 	addi	ra,r4,2
   119d8:	84000204 	addi	r16,r16,8
   119dc:	3009883a 	mov	r4,r6
   119e0:	18fffc04 	addi	r3,r3,-16
   119e4:	19400448 	cmpgei	r5,r3,17
   119e8:	28002026 	beq	r5,zero,11a6c <___vfiprintf_internal_r+0xf64>
   119ec:	21800044 	addi	r6,r4,1
   119f0:	10800404 	addi	r2,r2,16
   119f4:	81c00015 	stw	r7,0(r16)
   119f8:	83c00115 	stw	r15,4(r16)
   119fc:	d8800c15 	stw	r2,48(sp)
   11a00:	d9800b15 	stw	r6,44(sp)
   11a04:	31400208 	cmpgei	r5,r6,8
   11a08:	283ff226 	beq	r5,zero,119d4 <___vfiprintf_internal_r+0xecc>
   11a0c:	d9800a04 	addi	r6,sp,40
   11a10:	a80b883a 	mov	r5,r21
   11a14:	b009883a 	mov	r4,r22
   11a18:	10001f26 	beq	r2,zero,11a98 <___vfiprintf_internal_r+0xf90>
   11a1c:	d9c00815 	stw	r7,32(sp)
   11a20:	d8c00715 	stw	r3,28(sp)
   11a24:	da000615 	stw	r8,24(sp)
   11a28:	db400315 	stw	r13,12(sp)
   11a2c:	db800215 	stw	r14,8(sp)
   11a30:	00109fc0 	call	109fc <__sprint_r.part.0>
   11a34:	103d461e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   11a38:	d8c00717 	ldw	r3,28(sp)
   11a3c:	d9000b17 	ldw	r4,44(sp)
   11a40:	d8800c17 	ldw	r2,48(sp)
   11a44:	18fffc04 	addi	r3,r3,-16
   11a48:	19400448 	cmpgei	r5,r3,17
   11a4c:	d9c00817 	ldw	r7,32(sp)
   11a50:	da000617 	ldw	r8,24(sp)
   11a54:	db400317 	ldw	r13,12(sp)
   11a58:	db800217 	ldw	r14,8(sp)
   11a5c:	9021883a 	mov	r16,r18
   11a60:	27c00044 	addi	ra,r4,1
   11a64:	03c00404 	movi	r15,16
   11a68:	283fe01e 	bne	r5,zero,119ec <___vfiprintf_internal_r+0xee4>
   11a6c:	10c5883a 	add	r2,r2,r3
   11a70:	80c00115 	stw	r3,4(r16)
   11a74:	81c00015 	stw	r7,0(r16)
   11a78:	d8800c15 	stw	r2,48(sp)
   11a7c:	dfc00b15 	stw	ra,44(sp)
   11a80:	f8c00208 	cmpgei	r3,ra,8
   11a84:	18002f1e 	bne	r3,zero,11b44 <___vfiprintf_internal_r+0x103c>
   11a88:	84000204 	addi	r16,r16,8
   11a8c:	f9400044 	addi	r5,ra,1
   11a90:	f809883a 	mov	r4,ra
   11a94:	003ce406 	br	10e28 <___vfiprintf_internal_r+0x320>
   11a98:	0009883a 	mov	r4,zero
   11a9c:	07c00044 	movi	ra,1
   11aa0:	9021883a 	mov	r16,r18
   11aa4:	003fce06 	br	119e0 <___vfiprintf_internal_r+0xed8>
   11aa8:	8dc0010e 	bge	r17,r23,11ab0 <___vfiprintf_internal_r+0xfa8>
   11aac:	b823883a 	mov	r17,r23
   11ab0:	d8800117 	ldw	r2,4(sp)
   11ab4:	1445883a 	add	r2,r2,r17
   11ab8:	d8800115 	stw	r2,4(sp)
   11abc:	003d1e06 	br	10f38 <___vfiprintf_internal_r+0x430>
   11ac0:	103ee526 	beq	r2,zero,11658 <___vfiprintf_internal_r+0xb50>
   11ac4:	d9800a04 	addi	r6,sp,40
   11ac8:	a80b883a 	mov	r5,r21
   11acc:	b009883a 	mov	r4,r22
   11ad0:	00109fc0 	call	109fc <__sprint_r.part.0>
   11ad4:	103d1e1e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   11ad8:	d9400b17 	ldw	r5,44(sp)
   11adc:	d8800c17 	ldw	r2,48(sp)
   11ae0:	9021883a 	mov	r16,r18
   11ae4:	29400044 	addi	r5,r5,1
   11ae8:	003cf906 	br	10ed0 <___vfiprintf_internal_r+0x3c8>
   11aec:	d8000b15 	stw	zero,44(sp)
   11af0:	9021883a 	mov	r16,r18
   11af4:	003d7106 	br	110bc <___vfiprintf_internal_r+0x5b4>
   11af8:	4000731e 	bne	r8,zero,11cc8 <___vfiprintf_internal_r+0x11c0>
   11afc:	0011883a 	mov	r8,zero
   11b00:	0039883a 	mov	fp,zero
   11b04:	9027883a 	mov	r19,r18
   11b08:	003e4006 	br	1140c <___vfiprintf_internal_r+0x904>
   11b0c:	0039883a 	mov	fp,zero
   11b10:	003e9106 	br	11558 <___vfiprintf_internal_r+0xa50>
   11b14:	b839d7fa 	srai	fp,r23,31
   11b18:	e005883a 	mov	r2,fp
   11b1c:	003dd206 	br	11268 <___vfiprintf_internal_r+0x760>
   11b20:	01400044 	movi	r5,1
   11b24:	0009883a 	mov	r4,zero
   11b28:	9021883a 	mov	r16,r18
   11b2c:	003ce406 	br	10ec0 <___vfiprintf_internal_r+0x3b8>
   11b30:	70002b1e 	bne	r14,zero,11be0 <___vfiprintf_internal_r+0x10d8>
   11b34:	0009883a 	mov	r4,zero
   11b38:	01400044 	movi	r5,1
   11b3c:	9021883a 	mov	r16,r18
   11b40:	003cdf06 	br	10ec0 <___vfiprintf_internal_r+0x3b8>
   11b44:	10003726 	beq	r2,zero,11c24 <___vfiprintf_internal_r+0x111c>
   11b48:	d9800a04 	addi	r6,sp,40
   11b4c:	a80b883a 	mov	r5,r21
   11b50:	b009883a 	mov	r4,r22
   11b54:	da000615 	stw	r8,24(sp)
   11b58:	db400315 	stw	r13,12(sp)
   11b5c:	db800215 	stw	r14,8(sp)
   11b60:	00109fc0 	call	109fc <__sprint_r.part.0>
   11b64:	103cfa1e 	bne	r2,zero,10f50 <___vfiprintf_internal_r+0x448>
   11b68:	d9000b17 	ldw	r4,44(sp)
   11b6c:	d8800c17 	ldw	r2,48(sp)
   11b70:	da000617 	ldw	r8,24(sp)
   11b74:	db400317 	ldw	r13,12(sp)
   11b78:	db800217 	ldw	r14,8(sp)
   11b7c:	9021883a 	mov	r16,r18
   11b80:	21400044 	addi	r5,r4,1
   11b84:	003ca806 	br	10e28 <___vfiprintf_internal_r+0x320>
   11b88:	a0800007 	ldb	r2,0(r20)
   11b8c:	d8c00415 	stw	r3,16(sp)
   11b90:	003c1e06 	br	10c0c <___vfiprintf_internal_r+0x104>
   11b94:	9027883a 	mov	r19,r18
   11b98:	003e1c06 	br	1140c <___vfiprintf_internal_r+0x904>
   11b9c:	84000204 	addi	r16,r16,8
   11ba0:	31400044 	addi	r5,r6,1
   11ba4:	3009883a 	mov	r4,r6
   11ba8:	003cc706 	br	10ec8 <___vfiprintf_internal_r+0x3c0>
   11bac:	00c00c04 	movi	r3,48
   11bb0:	d88009c5 	stb	r2,39(sp)
   11bb4:	d8c00985 	stb	r3,38(sp)
   11bb8:	6b400094 	ori	r13,r13,2
   11bbc:	00800084 	movi	r2,2
   11bc0:	003d2006 	br	11044 <___vfiprintf_internal_r+0x53c>
   11bc4:	d9400117 	ldw	r5,4(sp)
   11bc8:	20800017 	ldw	r2,0(r4)
   11bcc:	d8c00415 	stw	r3,16(sp)
   11bd0:	2809d7fa 	srai	r4,r5,31
   11bd4:	11400015 	stw	r5,0(r2)
   11bd8:	11000115 	stw	r4,4(r2)
   11bdc:	003bf306 	br	10bac <___vfiprintf_internal_r+0xa4>
   11be0:	d8800984 	addi	r2,sp,38
   11be4:	d8801715 	stw	r2,92(sp)
   11be8:	00800084 	movi	r2,2
   11bec:	d8801815 	stw	r2,96(sp)
   11bf0:	01000044 	movi	r4,1
   11bf4:	9021883a 	mov	r16,r18
   11bf8:	003f4e06 	br	11934 <___vfiprintf_internal_r+0xe2c>
   11bfc:	9809883a 	mov	r4,r19
   11c00:	d8c00215 	stw	r3,8(sp)
   11c04:	db400015 	stw	r13,0(sp)
   11c08:	00109640 	call	10964 <strlen>
   11c0c:	d8c00217 	ldw	r3,8(sp)
   11c10:	db400017 	ldw	r13,0(sp)
   11c14:	1039883a 	mov	fp,r2
   11c18:	102f883a 	mov	r23,r2
   11c1c:	d8c00415 	stw	r3,16(sp)
   11c20:	003c7206 	br	10dec <___vfiprintf_internal_r+0x2e4>
   11c24:	d8c00947 	ldb	r3,37(sp)
   11c28:	18001b26 	beq	r3,zero,11c98 <___vfiprintf_internal_r+0x1190>
   11c2c:	d8800944 	addi	r2,sp,37
   11c30:	d8801715 	stw	r2,92(sp)
   11c34:	00800044 	movi	r2,1
   11c38:	d8801815 	stw	r2,96(sp)
   11c3c:	01400044 	movi	r5,1
   11c40:	9021883a 	mov	r16,r18
   11c44:	003c8306 	br	10e54 <___vfiprintf_internal_r+0x34c>
   11c48:	d8800417 	ldw	r2,16(sp)
   11c4c:	10800017 	ldw	r2,0(r2)
   11c50:	d8c00415 	stw	r3,16(sp)
   11c54:	d8c00117 	ldw	r3,4(sp)
   11c58:	10c00015 	stw	r3,0(r2)
   11c5c:	003bd306 	br	10bac <___vfiprintf_internal_r+0xa4>
   11c60:	408001f0 	cmpltui	r2,r8,7
   11c64:	4039883a 	mov	fp,r8
   11c68:	10000926 	beq	r2,zero,11c90 <___vfiprintf_internal_r+0x1188>
   11c6c:	04c00074 	movhi	r19,1
   11c70:	e02f883a 	mov	r23,fp
   11c74:	d8c00415 	stw	r3,16(sp)
   11c78:	9cdead04 	addi	r19,r19,31412
   11c7c:	003c5b06 	br	10dec <___vfiprintf_internal_r+0x2e4>
   11c80:	01400044 	movi	r5,1
   11c84:	0009883a 	mov	r4,zero
   11c88:	9021883a 	mov	r16,r18
   11c8c:	003c8e06 	br	10ec8 <___vfiprintf_internal_r+0x3c0>
   11c90:	07000184 	movi	fp,6
   11c94:	003ff506 	br	11c6c <___vfiprintf_internal_r+0x1164>
   11c98:	703f1f1e 	bne	r14,zero,11918 <___vfiprintf_internal_r+0xe10>
   11c9c:	0009883a 	mov	r4,zero
   11ca0:	01400044 	movi	r5,1
   11ca4:	9021883a 	mov	r16,r18
   11ca8:	003c8706 	br	10ec8 <___vfiprintf_internal_r+0x3c0>
   11cac:	d9800945 	stb	r6,37(sp)
   11cb0:	003c4806 	br	10dd4 <___vfiprintf_internal_r+0x2cc>
   11cb4:	d9800a04 	addi	r6,sp,40
   11cb8:	a80b883a 	mov	r5,r21
   11cbc:	b009883a 	mov	r4,r22
   11cc0:	00109fc0 	call	109fc <__sprint_r.part.0>
   11cc4:	003ca206 	br	10f50 <___vfiprintf_internal_r+0x448>
   11cc8:	db400017 	ldw	r13,0(sp)
   11ccc:	003d7306 	br	1129c <___vfiprintf_internal_r+0x794>
   11cd0:	402f883a 	mov	r23,r8
   11cd4:	d8c00415 	stw	r3,16(sp)
   11cd8:	4039883a 	mov	fp,r8
   11cdc:	003c4306 	br	10dec <___vfiprintf_internal_r+0x2e4>
   11ce0:	d9800945 	stb	r6,37(sp)
   11ce4:	003d9106 	br	1132c <___vfiprintf_internal_r+0x824>
   11ce8:	d9800945 	stb	r6,37(sp)
   11cec:	003e1006 	br	11530 <___vfiprintf_internal_r+0xa28>
   11cf0:	d9800945 	stb	r6,37(sp)
   11cf4:	003def06 	br	114b4 <___vfiprintf_internal_r+0x9ac>
   11cf8:	d9800945 	stb	r6,37(sp)
   11cfc:	003e1e06 	br	11578 <___vfiprintf_internal_r+0xa70>
   11d00:	303f883a 	mov	ra,r6
   11d04:	39df2e04 	addi	r7,r7,31928
   11d08:	003f5806 	br	11a6c <___vfiprintf_internal_r+0xf64>
   11d0c:	d9800945 	stb	r6,37(sp)
   11d10:	003d4d06 	br	11248 <___vfiprintf_internal_r+0x740>
   11d14:	21400044 	addi	r5,r4,1
   11d18:	39df2e04 	addi	r7,r7,31928
   11d1c:	003d3706 	br	111fc <___vfiprintf_internal_r+0x6f4>
   11d20:	280d883a 	mov	r6,r5
   11d24:	39df2a04 	addi	r7,r7,31912
   11d28:	003e8206 	br	11734 <___vfiprintf_internal_r+0xc2c>
   11d2c:	00bfffc4 	movi	r2,-1
   11d30:	d8800115 	stw	r2,4(sp)
   11d34:	003c8906 	br	10f5c <___vfiprintf_internal_r+0x454>
   11d38:	d8800417 	ldw	r2,16(sp)
   11d3c:	12000017 	ldw	r8,0(r2)
   11d40:	11000104 	addi	r4,r2,4
   11d44:	4000010e 	bge	r8,zero,11d4c <___vfiprintf_internal_r+0x1244>
   11d48:	023fffc4 	movi	r8,-1
   11d4c:	a0800043 	ldbu	r2,1(r20)
   11d50:	d9000415 	stw	r4,16(sp)
   11d54:	1829883a 	mov	r20,r3
   11d58:	10803fcc 	andi	r2,r2,255
   11d5c:	1080201c 	xori	r2,r2,128
   11d60:	10bfe004 	addi	r2,r2,-128
   11d64:	003ba906 	br	10c0c <___vfiprintf_internal_r+0x104>

00011d68 <__vfiprintf_internal>:
   11d68:	00c000b4 	movhi	r3,2
   11d6c:	2005883a 	mov	r2,r4
   11d70:	19271e17 	ldw	r4,-25480(r3)
   11d74:	300f883a 	mov	r7,r6
   11d78:	280d883a 	mov	r6,r5
   11d7c:	100b883a 	mov	r5,r2
   11d80:	0010b081 	jmpi	10b08 <___vfiprintf_internal_r>

00011d84 <__sbprintf>:
   11d84:	2880030b 	ldhu	r2,12(r5)
   11d88:	2b001917 	ldw	r12,100(r5)
   11d8c:	2ac0038b 	ldhu	r11,14(r5)
   11d90:	2a800717 	ldw	r10,28(r5)
   11d94:	2a400917 	ldw	r9,36(r5)
   11d98:	defee204 	addi	sp,sp,-1144
   11d9c:	da001a04 	addi	r8,sp,104
   11da0:	00c10004 	movi	r3,1024
   11da4:	dc011a15 	stw	r16,1128(sp)
   11da8:	10bfff4c 	andi	r2,r2,65533
   11dac:	2821883a 	mov	r16,r5
   11db0:	d80b883a 	mov	r5,sp
   11db4:	dc811c15 	stw	r18,1136(sp)
   11db8:	dc411b15 	stw	r17,1132(sp)
   11dbc:	dfc11d15 	stw	ra,1140(sp)
   11dc0:	2025883a 	mov	r18,r4
   11dc4:	d880030d 	sth	r2,12(sp)
   11dc8:	db001915 	stw	r12,100(sp)
   11dcc:	dac0038d 	sth	r11,14(sp)
   11dd0:	da800715 	stw	r10,28(sp)
   11dd4:	da400915 	stw	r9,36(sp)
   11dd8:	da000015 	stw	r8,0(sp)
   11ddc:	da000415 	stw	r8,16(sp)
   11de0:	d8c00215 	stw	r3,8(sp)
   11de4:	d8c00515 	stw	r3,20(sp)
   11de8:	d8000615 	stw	zero,24(sp)
   11dec:	0010b080 	call	10b08 <___vfiprintf_internal_r>
   11df0:	1023883a 	mov	r17,r2
   11df4:	10000d0e 	bge	r2,zero,11e2c <__sbprintf+0xa8>
   11df8:	d880030b 	ldhu	r2,12(sp)
   11dfc:	1080100c 	andi	r2,r2,64
   11e00:	10000326 	beq	r2,zero,11e10 <__sbprintf+0x8c>
   11e04:	8080030b 	ldhu	r2,12(r16)
   11e08:	10801014 	ori	r2,r2,64
   11e0c:	8080030d 	sth	r2,12(r16)
   11e10:	8805883a 	mov	r2,r17
   11e14:	dfc11d17 	ldw	ra,1140(sp)
   11e18:	dc811c17 	ldw	r18,1136(sp)
   11e1c:	dc411b17 	ldw	r17,1132(sp)
   11e20:	dc011a17 	ldw	r16,1128(sp)
   11e24:	dec11e04 	addi	sp,sp,1144
   11e28:	f800283a 	ret
   11e2c:	d80b883a 	mov	r5,sp
   11e30:	9009883a 	mov	r4,r18
   11e34:	000e6780 	call	e678 <_fflush_r>
   11e38:	103fef26 	beq	r2,zero,11df8 <__sbprintf+0x74>
   11e3c:	047fffc4 	movi	r17,-1
   11e40:	003fed06 	br	11df8 <__sbprintf+0x74>

00011e44 <__swbuf_r>:
   11e44:	defffb04 	addi	sp,sp,-20
   11e48:	dcc00315 	stw	r19,12(sp)
   11e4c:	dc400115 	stw	r17,4(sp)
   11e50:	dc000015 	stw	r16,0(sp)
   11e54:	dfc00415 	stw	ra,16(sp)
   11e58:	dc800215 	stw	r18,8(sp)
   11e5c:	2027883a 	mov	r19,r4
   11e60:	2823883a 	mov	r17,r5
   11e64:	3021883a 	mov	r16,r6
   11e68:	20000226 	beq	r4,zero,11e74 <__swbuf_r+0x30>
   11e6c:	20800e17 	ldw	r2,56(r4)
   11e70:	10003e26 	beq	r2,zero,11f6c <__swbuf_r+0x128>
   11e74:	80800617 	ldw	r2,24(r16)
   11e78:	80c0030b 	ldhu	r3,12(r16)
   11e7c:	80800215 	stw	r2,8(r16)
   11e80:	1880020c 	andi	r2,r3,8
   11e84:	10001f26 	beq	r2,zero,11f04 <__swbuf_r+0xc0>
   11e88:	80800417 	ldw	r2,16(r16)
   11e8c:	10001d26 	beq	r2,zero,11f04 <__swbuf_r+0xc0>
   11e90:	1948000c 	andi	r5,r3,8192
   11e94:	8c803fcc 	andi	r18,r17,255
   11e98:	28002326 	beq	r5,zero,11f28 <__swbuf_r+0xe4>
   11e9c:	80c00017 	ldw	r3,0(r16)
   11ea0:	81000517 	ldw	r4,20(r16)
   11ea4:	1885c83a 	sub	r2,r3,r2
   11ea8:	1100290e 	bge	r2,r4,11f50 <__swbuf_r+0x10c>
   11eac:	10800044 	addi	r2,r2,1
   11eb0:	81400217 	ldw	r5,8(r16)
   11eb4:	19000044 	addi	r4,r3,1
   11eb8:	81000015 	stw	r4,0(r16)
   11ebc:	297fffc4 	addi	r5,r5,-1
   11ec0:	81400215 	stw	r5,8(r16)
   11ec4:	1c400005 	stb	r17,0(r3)
   11ec8:	80c00517 	ldw	r3,20(r16)
   11ecc:	18802926 	beq	r3,r2,11f74 <__swbuf_r+0x130>
   11ed0:	8080030b 	ldhu	r2,12(r16)
   11ed4:	1080004c 	andi	r2,r2,1
   11ed8:	10000226 	beq	r2,zero,11ee4 <__swbuf_r+0xa0>
   11edc:	90800298 	cmpnei	r2,r18,10
   11ee0:	10002426 	beq	r2,zero,11f74 <__swbuf_r+0x130>
   11ee4:	9005883a 	mov	r2,r18
   11ee8:	dfc00417 	ldw	ra,16(sp)
   11eec:	dcc00317 	ldw	r19,12(sp)
   11ef0:	dc800217 	ldw	r18,8(sp)
   11ef4:	dc400117 	ldw	r17,4(sp)
   11ef8:	dc000017 	ldw	r16,0(sp)
   11efc:	dec00504 	addi	sp,sp,20
   11f00:	f800283a 	ret
   11f04:	800b883a 	mov	r5,r16
   11f08:	9809883a 	mov	r4,r19
   11f0c:	000c9840 	call	c984 <__swsetup_r>
   11f10:	10001c1e 	bne	r2,zero,11f84 <__swbuf_r+0x140>
   11f14:	80c0030b 	ldhu	r3,12(r16)
   11f18:	80800417 	ldw	r2,16(r16)
   11f1c:	8c803fcc 	andi	r18,r17,255
   11f20:	1948000c 	andi	r5,r3,8192
   11f24:	283fdd1e 	bne	r5,zero,11e9c <__swbuf_r+0x58>
   11f28:	81001917 	ldw	r4,100(r16)
   11f2c:	18c80014 	ori	r3,r3,8192
   11f30:	0177ffc4 	movi	r5,-8193
   11f34:	2148703a 	and	r4,r4,r5
   11f38:	80c0030d 	sth	r3,12(r16)
   11f3c:	80c00017 	ldw	r3,0(r16)
   11f40:	81001915 	stw	r4,100(r16)
   11f44:	81000517 	ldw	r4,20(r16)
   11f48:	1885c83a 	sub	r2,r3,r2
   11f4c:	113fd716 	blt	r2,r4,11eac <__swbuf_r+0x68>
   11f50:	800b883a 	mov	r5,r16
   11f54:	9809883a 	mov	r4,r19
   11f58:	000e6780 	call	e678 <_fflush_r>
   11f5c:	1000091e 	bne	r2,zero,11f84 <__swbuf_r+0x140>
   11f60:	80c00017 	ldw	r3,0(r16)
   11f64:	00800044 	movi	r2,1
   11f68:	003fd106 	br	11eb0 <__swbuf_r+0x6c>
   11f6c:	000eac00 	call	eac0 <__sinit>
   11f70:	003fc006 	br	11e74 <__swbuf_r+0x30>
   11f74:	800b883a 	mov	r5,r16
   11f78:	9809883a 	mov	r4,r19
   11f7c:	000e6780 	call	e678 <_fflush_r>
   11f80:	103fd826 	beq	r2,zero,11ee4 <__swbuf_r+0xa0>
   11f84:	04bfffc4 	movi	r18,-1
   11f88:	003fd606 	br	11ee4 <__swbuf_r+0xa0>

00011f8c <__swbuf>:
   11f8c:	00c000b4 	movhi	r3,2
   11f90:	2005883a 	mov	r2,r4
   11f94:	19271e17 	ldw	r4,-25480(r3)
   11f98:	280d883a 	mov	r6,r5
   11f9c:	100b883a 	mov	r5,r2
   11fa0:	0011e441 	jmpi	11e44 <__swbuf_r>

00011fa4 <_write_r>:
   11fa4:	2807883a 	mov	r3,r5
   11fa8:	defffe04 	addi	sp,sp,-8
   11fac:	dc000015 	stw	r16,0(sp)
   11fb0:	300b883a 	mov	r5,r6
   11fb4:	008000b4 	movhi	r2,2
   11fb8:	380d883a 	mov	r6,r7
   11fbc:	2021883a 	mov	r16,r4
   11fc0:	1809883a 	mov	r4,r3
   11fc4:	dfc00115 	stw	ra,4(sp)
   11fc8:	102e5215 	stw	zero,-18104(r2)
   11fcc:	00151780 	call	15178 <write>
   11fd0:	10ffffd8 	cmpnei	r3,r2,-1
   11fd4:	18000426 	beq	r3,zero,11fe8 <_write_r+0x44>
   11fd8:	dfc00117 	ldw	ra,4(sp)
   11fdc:	dc000017 	ldw	r16,0(sp)
   11fe0:	dec00204 	addi	sp,sp,8
   11fe4:	f800283a 	ret
   11fe8:	00c000b4 	movhi	r3,2
   11fec:	18ee5217 	ldw	r3,-18104(r3)
   11ff0:	183ff926 	beq	r3,zero,11fd8 <_write_r+0x34>
   11ff4:	80c00015 	stw	r3,0(r16)
   11ff8:	dfc00117 	ldw	ra,4(sp)
   11ffc:	dc000017 	ldw	r16,0(sp)
   12000:	dec00204 	addi	sp,sp,8
   12004:	f800283a 	ret

00012008 <_close_r>:
   12008:	defffe04 	addi	sp,sp,-8
   1200c:	dc000015 	stw	r16,0(sp)
   12010:	008000b4 	movhi	r2,2
   12014:	2021883a 	mov	r16,r4
   12018:	2809883a 	mov	r4,r5
   1201c:	dfc00115 	stw	ra,4(sp)
   12020:	102e5215 	stw	zero,-18104(r2)
   12024:	00147580 	call	14758 <close>
   12028:	10ffffd8 	cmpnei	r3,r2,-1
   1202c:	18000426 	beq	r3,zero,12040 <_close_r+0x38>
   12030:	dfc00117 	ldw	ra,4(sp)
   12034:	dc000017 	ldw	r16,0(sp)
   12038:	dec00204 	addi	sp,sp,8
   1203c:	f800283a 	ret
   12040:	00c000b4 	movhi	r3,2
   12044:	18ee5217 	ldw	r3,-18104(r3)
   12048:	183ff926 	beq	r3,zero,12030 <_close_r+0x28>
   1204c:	80c00015 	stw	r3,0(r16)
   12050:	dfc00117 	ldw	ra,4(sp)
   12054:	dc000017 	ldw	r16,0(sp)
   12058:	dec00204 	addi	sp,sp,8
   1205c:	f800283a 	ret

00012060 <__assert_func>:
   12060:	008000b4 	movhi	r2,2
   12064:	12271e17 	ldw	r8,-25480(r2)
   12068:	defffc04 	addi	sp,sp,-16
   1206c:	3807883a 	mov	r3,r7
   12070:	3005883a 	mov	r2,r6
   12074:	dfc00315 	stw	ra,12(sp)
   12078:	42400317 	ldw	r9,12(r8)
   1207c:	200f883a 	mov	r7,r4
   12080:	2811883a 	mov	r8,r5
   12084:	180d883a 	mov	r6,r3
   12088:	10000a26 	beq	r2,zero,120b4 <__assert_func+0x54>
   1208c:	00c00074 	movhi	r3,1
   12090:	18df3204 	addi	r3,r3,31944
   12094:	01400074 	movhi	r5,1
   12098:	295f3604 	addi	r5,r5,31960
   1209c:	4809883a 	mov	r4,r9
   120a0:	d8c00115 	stw	r3,4(sp)
   120a4:	da000015 	stw	r8,0(sp)
   120a8:	d8800215 	stw	r2,8(sp)
   120ac:	00123ec0 	call	123ec <fiprintf>
   120b0:	00135d00 	call	135d0 <abort>
   120b4:	00c00074 	movhi	r3,1
   120b8:	18df3504 	addi	r3,r3,31956
   120bc:	1805883a 	mov	r2,r3
   120c0:	003ff406 	br	12094 <__assert_func+0x34>

000120c4 <__assert>:
   120c4:	deffff04 	addi	sp,sp,-4
   120c8:	300f883a 	mov	r7,r6
   120cc:	000d883a 	mov	r6,zero
   120d0:	dfc00015 	stw	ra,0(sp)
   120d4:	00120600 	call	12060 <__assert_func>

000120d8 <_calloc_r>:
   120d8:	2806d43a 	srli	r3,r5,16
   120dc:	defffb04 	addi	sp,sp,-20
   120e0:	dc400115 	stw	r17,4(sp)
   120e4:	dc000015 	stw	r16,0(sp)
   120e8:	dfc00415 	stw	ra,16(sp)
   120ec:	dcc00315 	stw	r19,12(sp)
   120f0:	dc800215 	stw	r18,8(sp)
   120f4:	3022d43a 	srli	r17,r6,16
   120f8:	2805883a 	mov	r2,r5
   120fc:	2021883a 	mov	r16,r4
   12100:	18002d1e 	bne	r3,zero,121b8 <_calloc_r+0xe0>
   12104:	88003e1e 	bne	r17,zero,12200 <_calloc_r+0x128>
   12108:	317fffcc 	andi	r5,r6,65535
   1210c:	113fffcc 	andi	r4,r2,65535
   12110:	000714c0 	call	714c <__mulsi3>
   12114:	100b883a 	mov	r5,r2
   12118:	8009883a 	mov	r4,r16
   1211c:	0009ed00 	call	9ed0 <_malloc_r>
   12120:	1009883a 	mov	r4,r2
   12124:	10001626 	beq	r2,zero,12180 <_calloc_r+0xa8>
   12128:	11bfff17 	ldw	r6,-4(r2)
   1212c:	00bfff04 	movi	r2,-4
   12130:	308c703a 	and	r6,r6,r2
   12134:	31bfff04 	addi	r6,r6,-4
   12138:	30800968 	cmpgeui	r2,r6,37
   1213c:	1000181e 	bne	r2,zero,121a0 <_calloc_r+0xc8>
   12140:	30800530 	cmpltui	r2,r6,20
   12144:	10000a1e 	bne	r2,zero,12170 <_calloc_r+0x98>
   12148:	20000015 	stw	zero,0(r4)
   1214c:	20000115 	stw	zero,4(r4)
   12150:	30800728 	cmpgeui	r2,r6,28
   12154:	10001626 	beq	r2,zero,121b0 <_calloc_r+0xd8>
   12158:	20000215 	stw	zero,8(r4)
   1215c:	20000315 	stw	zero,12(r4)
   12160:	31800920 	cmpeqi	r6,r6,36
   12164:	30002d1e 	bne	r6,zero,1221c <_calloc_r+0x144>
   12168:	20800404 	addi	r2,r4,16
   1216c:	00000106 	br	12174 <_calloc_r+0x9c>
   12170:	2005883a 	mov	r2,r4
   12174:	10000015 	stw	zero,0(r2)
   12178:	10000115 	stw	zero,4(r2)
   1217c:	10000215 	stw	zero,8(r2)
   12180:	2005883a 	mov	r2,r4
   12184:	dfc00417 	ldw	ra,16(sp)
   12188:	dcc00317 	ldw	r19,12(sp)
   1218c:	dc800217 	ldw	r18,8(sp)
   12190:	dc400117 	ldw	r17,4(sp)
   12194:	dc000017 	ldw	r16,0(sp)
   12198:	dec00504 	addi	sp,sp,20
   1219c:	f800283a 	ret
   121a0:	000b883a 	mov	r5,zero
   121a4:	000f3980 	call	f398 <memset>
   121a8:	1009883a 	mov	r4,r2
   121ac:	003ff406 	br	12180 <_calloc_r+0xa8>
   121b0:	20800204 	addi	r2,r4,8
   121b4:	003fef06 	br	12174 <_calloc_r+0x9c>
   121b8:	8800131e 	bne	r17,zero,12208 <_calloc_r+0x130>
   121bc:	1823883a 	mov	r17,r3
   121c0:	3027883a 	mov	r19,r6
   121c4:	317fffcc 	andi	r5,r6,65535
   121c8:	113fffcc 	andi	r4,r2,65535
   121cc:	000714c0 	call	714c <__mulsi3>
   121d0:	897fffcc 	andi	r5,r17,65535
   121d4:	993fffcc 	andi	r4,r19,65535
   121d8:	1025883a 	mov	r18,r2
   121dc:	000714c0 	call	714c <__mulsi3>
   121e0:	900ad43a 	srli	r5,r18,16
   121e4:	114b883a 	add	r5,r2,r5
   121e8:	2804d43a 	srli	r2,r5,16
   121ec:	1000061e 	bne	r2,zero,12208 <_calloc_r+0x130>
   121f0:	280a943a 	slli	r5,r5,16
   121f4:	94bfffcc 	andi	r18,r18,65535
   121f8:	2c8ab03a 	or	r5,r5,r18
   121fc:	003fc606 	br	12118 <_calloc_r+0x40>
   12200:	2827883a 	mov	r19,r5
   12204:	003fef06 	br	121c4 <_calloc_r+0xec>
   12208:	0009ea40 	call	9ea4 <__errno>
   1220c:	00c00304 	movi	r3,12
   12210:	10c00015 	stw	r3,0(r2)
   12214:	0009883a 	mov	r4,zero
   12218:	003fd906 	br	12180 <_calloc_r+0xa8>
   1221c:	20000415 	stw	zero,16(r4)
   12220:	20800604 	addi	r2,r4,24
   12224:	20000515 	stw	zero,20(r4)
   12228:	003fd206 	br	12174 <_calloc_r+0x9c>

0001222c <_fclose_r.part.0>:
   1222c:	defffc04 	addi	sp,sp,-16
   12230:	dc800215 	stw	r18,8(sp)
   12234:	dc400115 	stw	r17,4(sp)
   12238:	dc000015 	stw	r16,0(sp)
   1223c:	dfc00315 	stw	ra,12(sp)
   12240:	2821883a 	mov	r16,r5
   12244:	2023883a 	mov	r17,r4
   12248:	000e4500 	call	e450 <__sflush_r>
   1224c:	80c00b17 	ldw	r3,44(r16)
   12250:	1025883a 	mov	r18,r2
   12254:	18000426 	beq	r3,zero,12268 <_fclose_r.part.0+0x3c>
   12258:	81400717 	ldw	r5,28(r16)
   1225c:	8809883a 	mov	r4,r17
   12260:	183ee83a 	callr	r3
   12264:	10001916 	blt	r2,zero,122cc <_fclose_r.part.0+0xa0>
   12268:	8080030b 	ldhu	r2,12(r16)
   1226c:	1080200c 	andi	r2,r2,128
   12270:	10001a1e 	bne	r2,zero,122dc <_fclose_r.part.0+0xb0>
   12274:	81400c17 	ldw	r5,48(r16)
   12278:	28000526 	beq	r5,zero,12290 <_fclose_r.part.0+0x64>
   1227c:	80801004 	addi	r2,r16,64
   12280:	28800226 	beq	r5,r2,1228c <_fclose_r.part.0+0x60>
   12284:	8809883a 	mov	r4,r17
   12288:	000ec240 	call	ec24 <_free_r>
   1228c:	80000c15 	stw	zero,48(r16)
   12290:	81401117 	ldw	r5,68(r16)
   12294:	28000326 	beq	r5,zero,122a4 <_fclose_r.part.0+0x78>
   12298:	8809883a 	mov	r4,r17
   1229c:	000ec240 	call	ec24 <_free_r>
   122a0:	80001115 	stw	zero,68(r16)
   122a4:	000ead00 	call	ead0 <__sfp_lock_acquire>
   122a8:	8000030d 	sth	zero,12(r16)
   122ac:	000ead40 	call	ead4 <__sfp_lock_release>
   122b0:	9005883a 	mov	r2,r18
   122b4:	dfc00317 	ldw	ra,12(sp)
   122b8:	dc800217 	ldw	r18,8(sp)
   122bc:	dc400117 	ldw	r17,4(sp)
   122c0:	dc000017 	ldw	r16,0(sp)
   122c4:	dec00404 	addi	sp,sp,16
   122c8:	f800283a 	ret
   122cc:	8080030b 	ldhu	r2,12(r16)
   122d0:	04bfffc4 	movi	r18,-1
   122d4:	1080200c 	andi	r2,r2,128
   122d8:	103fe626 	beq	r2,zero,12274 <_fclose_r.part.0+0x48>
   122dc:	81400417 	ldw	r5,16(r16)
   122e0:	8809883a 	mov	r4,r17
   122e4:	000ec240 	call	ec24 <_free_r>
   122e8:	003fe206 	br	12274 <_fclose_r.part.0+0x48>

000122ec <_fclose_r>:
   122ec:	28001926 	beq	r5,zero,12354 <_fclose_r+0x68>
   122f0:	defffd04 	addi	sp,sp,-12
   122f4:	dc000115 	stw	r16,4(sp)
   122f8:	dfc00215 	stw	ra,8(sp)
   122fc:	2021883a 	mov	r16,r4
   12300:	20000226 	beq	r4,zero,1230c <_fclose_r+0x20>
   12304:	20800e17 	ldw	r2,56(r4)
   12308:	10000c26 	beq	r2,zero,1233c <_fclose_r+0x50>
   1230c:	2880030f 	ldh	r2,12(r5)
   12310:	1000051e 	bne	r2,zero,12328 <_fclose_r+0x3c>
   12314:	0005883a 	mov	r2,zero
   12318:	dfc00217 	ldw	ra,8(sp)
   1231c:	dc000117 	ldw	r16,4(sp)
   12320:	dec00304 	addi	sp,sp,12
   12324:	f800283a 	ret
   12328:	8009883a 	mov	r4,r16
   1232c:	dfc00217 	ldw	ra,8(sp)
   12330:	dc000117 	ldw	r16,4(sp)
   12334:	dec00304 	addi	sp,sp,12
   12338:	001222c1 	jmpi	1222c <_fclose_r.part.0>
   1233c:	d9400015 	stw	r5,0(sp)
   12340:	000eac00 	call	eac0 <__sinit>
   12344:	d9400017 	ldw	r5,0(sp)
   12348:	2880030f 	ldh	r2,12(r5)
   1234c:	103ff126 	beq	r2,zero,12314 <_fclose_r+0x28>
   12350:	003ff506 	br	12328 <_fclose_r+0x3c>
   12354:	0005883a 	mov	r2,zero
   12358:	f800283a 	ret

0001235c <fclose>:
   1235c:	20000826 	beq	r4,zero,12380 <fclose+0x24>
   12360:	008000b4 	movhi	r2,2
   12364:	200b883a 	mov	r5,r4
   12368:	11271e17 	ldw	r4,-25480(r2)
   1236c:	20000226 	beq	r4,zero,12378 <fclose+0x1c>
   12370:	20800e17 	ldw	r2,56(r4)
   12374:	10000526 	beq	r2,zero,1238c <fclose+0x30>
   12378:	2880030f 	ldh	r2,12(r5)
   1237c:	1000021e 	bne	r2,zero,12388 <fclose+0x2c>
   12380:	0005883a 	mov	r2,zero
   12384:	f800283a 	ret
   12388:	001222c1 	jmpi	1222c <_fclose_r.part.0>
   1238c:	defffd04 	addi	sp,sp,-12
   12390:	d9400115 	stw	r5,4(sp)
   12394:	d9000015 	stw	r4,0(sp)
   12398:	dfc00215 	stw	ra,8(sp)
   1239c:	000eac00 	call	eac0 <__sinit>
   123a0:	d9400117 	ldw	r5,4(sp)
   123a4:	d9000017 	ldw	r4,0(sp)
   123a8:	2880030f 	ldh	r2,12(r5)
   123ac:	10000326 	beq	r2,zero,123bc <fclose+0x60>
   123b0:	dfc00217 	ldw	ra,8(sp)
   123b4:	dec00304 	addi	sp,sp,12
   123b8:	001222c1 	jmpi	1222c <_fclose_r.part.0>
   123bc:	0005883a 	mov	r2,zero
   123c0:	dfc00217 	ldw	ra,8(sp)
   123c4:	dec00304 	addi	sp,sp,12
   123c8:	f800283a 	ret

000123cc <_fiprintf_r>:
   123cc:	defffe04 	addi	sp,sp,-8
   123d0:	dfc00015 	stw	ra,0(sp)
   123d4:	d9c00115 	stw	r7,4(sp)
   123d8:	d9c00104 	addi	r7,sp,4
   123dc:	001349c0 	call	1349c <_vfiprintf_r>
   123e0:	dfc00017 	ldw	ra,0(sp)
   123e4:	dec00204 	addi	sp,sp,8
   123e8:	f800283a 	ret

000123ec <fiprintf>:
   123ec:	defffd04 	addi	sp,sp,-12
   123f0:	2005883a 	mov	r2,r4
   123f4:	dfc00015 	stw	ra,0(sp)
   123f8:	d9800115 	stw	r6,4(sp)
   123fc:	d9c00215 	stw	r7,8(sp)
   12400:	00c000b4 	movhi	r3,2
   12404:	19271e17 	ldw	r4,-25480(r3)
   12408:	280d883a 	mov	r6,r5
   1240c:	d9c00104 	addi	r7,sp,4
   12410:	100b883a 	mov	r5,r2
   12414:	001349c0 	call	1349c <_vfiprintf_r>
   12418:	dfc00017 	ldw	ra,0(sp)
   1241c:	dec00304 	addi	sp,sp,12
   12420:	f800283a 	ret

00012424 <__fputwc>:
   12424:	defff904 	addi	sp,sp,-28
   12428:	dcc00415 	stw	r19,16(sp)
   1242c:	dc800315 	stw	r18,12(sp)
   12430:	dc000115 	stw	r16,4(sp)
   12434:	dfc00615 	stw	ra,24(sp)
   12438:	dd000515 	stw	r20,20(sp)
   1243c:	dc400215 	stw	r17,8(sp)
   12440:	2025883a 	mov	r18,r4
   12444:	2827883a 	mov	r19,r5
   12448:	3021883a 	mov	r16,r6
   1244c:	0012be40 	call	12be4 <__locale_mb_cur_max>
   12450:	10800058 	cmpnei	r2,r2,1
   12454:	1000071e 	bne	r2,zero,12474 <__fputwc+0x50>
   12458:	98bfffc4 	addi	r2,r19,-1
   1245c:	10803fe8 	cmpgeui	r2,r2,255
   12460:	1000041e 	bne	r2,zero,12474 <__fputwc+0x50>
   12464:	980b883a 	mov	r5,r19
   12468:	dcc000c5 	stb	r19,3(sp)
   1246c:	05000044 	movi	r20,1
   12470:	00000a06 	br	1249c <__fputwc+0x78>
   12474:	81c01704 	addi	r7,r16,92
   12478:	980d883a 	mov	r6,r19
   1247c:	d94000c4 	addi	r5,sp,3
   12480:	9009883a 	mov	r4,r18
   12484:	00134a00 	call	134a0 <_wcrtomb_r>
   12488:	1029883a 	mov	r20,r2
   1248c:	10bfffd8 	cmpnei	r2,r2,-1
   12490:	10003926 	beq	r2,zero,12578 <__fputwc+0x154>
   12494:	a0001f26 	beq	r20,zero,12514 <__fputwc+0xf0>
   12498:	d94000c3 	ldbu	r5,3(sp)
   1249c:	0023883a 	mov	r17,zero
   124a0:	00000a06 	br	124cc <__fputwc+0xa8>
   124a4:	80800017 	ldw	r2,0(r16)
   124a8:	11400005 	stb	r5,0(r2)
   124ac:	80c00017 	ldw	r3,0(r16)
   124b0:	18c00044 	addi	r3,r3,1
   124b4:	80c00015 	stw	r3,0(r16)
   124b8:	8c400044 	addi	r17,r17,1
   124bc:	d88000c4 	addi	r2,sp,3
   124c0:	1447883a 	add	r3,r2,r17
   124c4:	8d00132e 	bgeu	r17,r20,12514 <__fputwc+0xf0>
   124c8:	19400003 	ldbu	r5,0(r3)
   124cc:	80c00217 	ldw	r3,8(r16)
   124d0:	18ffffc4 	addi	r3,r3,-1
   124d4:	80c00215 	stw	r3,8(r16)
   124d8:	183ff20e 	bge	r3,zero,124a4 <__fputwc+0x80>
   124dc:	80800617 	ldw	r2,24(r16)
   124e0:	18801616 	blt	r3,r2,1253c <__fputwc+0x118>
   124e4:	80800017 	ldw	r2,0(r16)
   124e8:	11400005 	stb	r5,0(r2)
   124ec:	80800017 	ldw	r2,0(r16)
   124f0:	10c00003 	ldbu	r3,0(r2)
   124f4:	10800044 	addi	r2,r2,1
   124f8:	18c002a0 	cmpeqi	r3,r3,10
   124fc:	1800171e 	bne	r3,zero,1255c <__fputwc+0x138>
   12500:	80800015 	stw	r2,0(r16)
   12504:	8c400044 	addi	r17,r17,1
   12508:	d88000c4 	addi	r2,sp,3
   1250c:	1447883a 	add	r3,r2,r17
   12510:	8d3fed36 	bltu	r17,r20,124c8 <__fputwc+0xa4>
   12514:	9829883a 	mov	r20,r19
   12518:	a005883a 	mov	r2,r20
   1251c:	dfc00617 	ldw	ra,24(sp)
   12520:	dd000517 	ldw	r20,20(sp)
   12524:	dcc00417 	ldw	r19,16(sp)
   12528:	dc800317 	ldw	r18,12(sp)
   1252c:	dc400217 	ldw	r17,8(sp)
   12530:	dc000117 	ldw	r16,4(sp)
   12534:	dec00704 	addi	sp,sp,28
   12538:	f800283a 	ret
   1253c:	29403fcc 	andi	r5,r5,255
   12540:	800d883a 	mov	r6,r16
   12544:	9009883a 	mov	r4,r18
   12548:	0011e440 	call	11e44 <__swbuf_r>
   1254c:	10bfffe0 	cmpeqi	r2,r2,-1
   12550:	103fd926 	beq	r2,zero,124b8 <__fputwc+0x94>
   12554:	053fffc4 	movi	r20,-1
   12558:	003fef06 	br	12518 <__fputwc+0xf4>
   1255c:	800d883a 	mov	r6,r16
   12560:	01400284 	movi	r5,10
   12564:	9009883a 	mov	r4,r18
   12568:	0011e440 	call	11e44 <__swbuf_r>
   1256c:	10bfffe0 	cmpeqi	r2,r2,-1
   12570:	103fd126 	beq	r2,zero,124b8 <__fputwc+0x94>
   12574:	003ff706 	br	12554 <__fputwc+0x130>
   12578:	8080030b 	ldhu	r2,12(r16)
   1257c:	10801014 	ori	r2,r2,64
   12580:	8080030d 	sth	r2,12(r16)
   12584:	003fe406 	br	12518 <__fputwc+0xf4>

00012588 <_fputwc_r>:
   12588:	3080030b 	ldhu	r2,12(r6)
   1258c:	10c8000c 	andi	r3,r2,8192
   12590:	1800051e 	bne	r3,zero,125a8 <_fputwc_r+0x20>
   12594:	30c01917 	ldw	r3,100(r6)
   12598:	10880014 	ori	r2,r2,8192
   1259c:	3080030d 	sth	r2,12(r6)
   125a0:	18880014 	ori	r2,r3,8192
   125a4:	30801915 	stw	r2,100(r6)
   125a8:	00124241 	jmpi	12424 <__fputwc>

000125ac <fputwc>:
   125ac:	defffc04 	addi	sp,sp,-16
   125b0:	008000b4 	movhi	r2,2
   125b4:	dc000215 	stw	r16,8(sp)
   125b8:	14271e17 	ldw	r16,-25480(r2)
   125bc:	dfc00315 	stw	ra,12(sp)
   125c0:	280d883a 	mov	r6,r5
   125c4:	200b883a 	mov	r5,r4
   125c8:	80000226 	beq	r16,zero,125d4 <fputwc+0x28>
   125cc:	80800e17 	ldw	r2,56(r16)
   125d0:	10000d26 	beq	r2,zero,12608 <fputwc+0x5c>
   125d4:	3080030b 	ldhu	r2,12(r6)
   125d8:	10c8000c 	andi	r3,r2,8192
   125dc:	1800051e 	bne	r3,zero,125f4 <fputwc+0x48>
   125e0:	30c01917 	ldw	r3,100(r6)
   125e4:	10880014 	ori	r2,r2,8192
   125e8:	3080030d 	sth	r2,12(r6)
   125ec:	18880014 	ori	r2,r3,8192
   125f0:	30801915 	stw	r2,100(r6)
   125f4:	8009883a 	mov	r4,r16
   125f8:	dfc00317 	ldw	ra,12(sp)
   125fc:	dc000217 	ldw	r16,8(sp)
   12600:	dec00404 	addi	sp,sp,16
   12604:	00124241 	jmpi	12424 <__fputwc>
   12608:	d9000015 	stw	r4,0(sp)
   1260c:	8009883a 	mov	r4,r16
   12610:	d9800115 	stw	r6,4(sp)
   12614:	000eac00 	call	eac0 <__sinit>
   12618:	d9800117 	ldw	r6,4(sp)
   1261c:	d9400017 	ldw	r5,0(sp)
   12620:	003fec06 	br	125d4 <fputwc+0x28>

00012624 <_fstat_r>:
   12624:	2807883a 	mov	r3,r5
   12628:	defffe04 	addi	sp,sp,-8
   1262c:	dc000015 	stw	r16,0(sp)
   12630:	008000b4 	movhi	r2,2
   12634:	300b883a 	mov	r5,r6
   12638:	2021883a 	mov	r16,r4
   1263c:	1809883a 	mov	r4,r3
   12640:	dfc00115 	stw	ra,4(sp)
   12644:	102e5215 	stw	zero,-18104(r2)
   12648:	00148d40 	call	148d4 <fstat>
   1264c:	10ffffd8 	cmpnei	r3,r2,-1
   12650:	18000426 	beq	r3,zero,12664 <_fstat_r+0x40>
   12654:	dfc00117 	ldw	ra,4(sp)
   12658:	dc000017 	ldw	r16,0(sp)
   1265c:	dec00204 	addi	sp,sp,8
   12660:	f800283a 	ret
   12664:	00c000b4 	movhi	r3,2
   12668:	18ee5217 	ldw	r3,-18104(r3)
   1266c:	183ff926 	beq	r3,zero,12654 <_fstat_r+0x30>
   12670:	80c00015 	stw	r3,0(r16)
   12674:	dfc00117 	ldw	ra,4(sp)
   12678:	dc000017 	ldw	r16,0(sp)
   1267c:	dec00204 	addi	sp,sp,8
   12680:	f800283a 	ret

00012684 <__sfvwrite_r>:
   12684:	30800217 	ldw	r2,8(r6)
   12688:	10009b26 	beq	r2,zero,128f8 <__sfvwrite_r+0x274>
   1268c:	2a00030b 	ldhu	r8,12(r5)
   12690:	defff404 	addi	sp,sp,-48
   12694:	dd400715 	stw	r21,28(sp)
   12698:	dd000615 	stw	r20,24(sp)
   1269c:	dc000215 	stw	r16,8(sp)
   126a0:	dfc00b15 	stw	ra,44(sp)
   126a4:	df000a15 	stw	fp,40(sp)
   126a8:	ddc00915 	stw	r23,36(sp)
   126ac:	dd800815 	stw	r22,32(sp)
   126b0:	dcc00515 	stw	r19,20(sp)
   126b4:	dc800415 	stw	r18,16(sp)
   126b8:	dc400315 	stw	r17,12(sp)
   126bc:	4080020c 	andi	r2,r8,8
   126c0:	3029883a 	mov	r20,r6
   126c4:	202b883a 	mov	r21,r4
   126c8:	2821883a 	mov	r16,r5
   126cc:	10002626 	beq	r2,zero,12768 <__sfvwrite_r+0xe4>
   126d0:	28800417 	ldw	r2,16(r5)
   126d4:	10002426 	beq	r2,zero,12768 <__sfvwrite_r+0xe4>
   126d8:	4080008c 	andi	r2,r8,2
   126dc:	a4400017 	ldw	r17,0(r20)
   126e0:	10002926 	beq	r2,zero,12788 <__sfvwrite_r+0x104>
   126e4:	05a00034 	movhi	r22,32768
   126e8:	0027883a 	mov	r19,zero
   126ec:	0025883a 	mov	r18,zero
   126f0:	b5bf0004 	addi	r22,r22,-1024
   126f4:	980d883a 	mov	r6,r19
   126f8:	a809883a 	mov	r4,r21
   126fc:	90007126 	beq	r18,zero,128c4 <__sfvwrite_r+0x240>
   12700:	900f883a 	mov	r7,r18
   12704:	b480012e 	bgeu	r22,r18,1270c <__sfvwrite_r+0x88>
   12708:	b00f883a 	mov	r7,r22
   1270c:	80800917 	ldw	r2,36(r16)
   12710:	81400717 	ldw	r5,28(r16)
   12714:	103ee83a 	callr	r2
   12718:	0080720e 	bge	zero,r2,128e4 <__sfvwrite_r+0x260>
   1271c:	a0c00217 	ldw	r3,8(r20)
   12720:	98a7883a 	add	r19,r19,r2
   12724:	90a5c83a 	sub	r18,r18,r2
   12728:	1885c83a 	sub	r2,r3,r2
   1272c:	a0800215 	stw	r2,8(r20)
   12730:	103ff01e 	bne	r2,zero,126f4 <__sfvwrite_r+0x70>
   12734:	0005883a 	mov	r2,zero
   12738:	dfc00b17 	ldw	ra,44(sp)
   1273c:	df000a17 	ldw	fp,40(sp)
   12740:	ddc00917 	ldw	r23,36(sp)
   12744:	dd800817 	ldw	r22,32(sp)
   12748:	dd400717 	ldw	r21,28(sp)
   1274c:	dd000617 	ldw	r20,24(sp)
   12750:	dcc00517 	ldw	r19,20(sp)
   12754:	dc800417 	ldw	r18,16(sp)
   12758:	dc400317 	ldw	r17,12(sp)
   1275c:	dc000217 	ldw	r16,8(sp)
   12760:	dec00c04 	addi	sp,sp,48
   12764:	f800283a 	ret
   12768:	800b883a 	mov	r5,r16
   1276c:	a809883a 	mov	r4,r21
   12770:	000c9840 	call	c984 <__swsetup_r>
   12774:	1000e61e 	bne	r2,zero,12b10 <__sfvwrite_r+0x48c>
   12778:	8200030b 	ldhu	r8,12(r16)
   1277c:	a4400017 	ldw	r17,0(r20)
   12780:	4080008c 	andi	r2,r8,2
   12784:	103fd71e 	bne	r2,zero,126e4 <__sfvwrite_r+0x60>
   12788:	4080004c 	andi	r2,r8,1
   1278c:	10005c1e 	bne	r2,zero,12900 <__sfvwrite_r+0x27c>
   12790:	00a00034 	movhi	r2,32768
   12794:	10bfff84 	addi	r2,r2,-2
   12798:	00e00034 	movhi	r3,32768
   1279c:	d8800015 	stw	r2,0(sp)
   127a0:	18bfffc4 	addi	r2,r3,-1
   127a4:	0039883a 	mov	fp,zero
   127a8:	0025883a 	mov	r18,zero
   127ac:	d8800115 	stw	r2,4(sp)
   127b0:	90004026 	beq	r18,zero,128b4 <__sfvwrite_r+0x230>
   127b4:	4080800c 	andi	r2,r8,512
   127b8:	81000017 	ldw	r4,0(r16)
   127bc:	85c00217 	ldw	r23,8(r16)
   127c0:	10008826 	beq	r2,zero,129e4 <__sfvwrite_r+0x360>
   127c4:	b82d883a 	mov	r22,r23
   127c8:	95c0ae36 	bltu	r18,r23,12a84 <__sfvwrite_r+0x400>
   127cc:	4081200c 	andi	r2,r8,1152
   127d0:	10002626 	beq	r2,zero,1286c <__sfvwrite_r+0x1e8>
   127d4:	81800517 	ldw	r6,20(r16)
   127d8:	81400417 	ldw	r5,16(r16)
   127dc:	3185883a 	add	r2,r6,r6
   127e0:	1185883a 	add	r2,r2,r6
   127e4:	1026d7fa 	srli	r19,r2,31
   127e8:	216dc83a 	sub	r22,r4,r5
   127ec:	b1000044 	addi	r4,r22,1
   127f0:	98a7883a 	add	r19,r19,r2
   127f4:	9827d07a 	srai	r19,r19,1
   127f8:	2485883a 	add	r2,r4,r18
   127fc:	980d883a 	mov	r6,r19
   12800:	9880022e 	bgeu	r19,r2,1280c <__sfvwrite_r+0x188>
   12804:	1027883a 	mov	r19,r2
   12808:	100d883a 	mov	r6,r2
   1280c:	4201000c 	andi	r8,r8,1024
   12810:	4000af26 	beq	r8,zero,12ad0 <__sfvwrite_r+0x44c>
   12814:	300b883a 	mov	r5,r6
   12818:	a809883a 	mov	r4,r21
   1281c:	0009ed00 	call	9ed0 <_malloc_r>
   12820:	1000b726 	beq	r2,zero,12b00 <__sfvwrite_r+0x47c>
   12824:	81400417 	ldw	r5,16(r16)
   12828:	b00d883a 	mov	r6,r22
   1282c:	1009883a 	mov	r4,r2
   12830:	000a6b00 	call	a6b0 <memcpy>
   12834:	100f883a 	mov	r7,r2
   12838:	8080030b 	ldhu	r2,12(r16)
   1283c:	00fedfc4 	movi	r3,-1153
   12840:	10c4703a 	and	r2,r2,r3
   12844:	10802014 	ori	r2,r2,128
   12848:	8080030d 	sth	r2,12(r16)
   1284c:	3d89883a 	add	r4,r7,r22
   12850:	9d85c83a 	sub	r2,r19,r22
   12854:	81c00415 	stw	r7,16(r16)
   12858:	81000015 	stw	r4,0(r16)
   1285c:	84c00515 	stw	r19,20(r16)
   12860:	902f883a 	mov	r23,r18
   12864:	80800215 	stw	r2,8(r16)
   12868:	902d883a 	mov	r22,r18
   1286c:	b00d883a 	mov	r6,r22
   12870:	e00b883a 	mov	r5,fp
   12874:	0012d180 	call	12d18 <memmove>
   12878:	81000217 	ldw	r4,8(r16)
   1287c:	80800017 	ldw	r2,0(r16)
   12880:	9027883a 	mov	r19,r18
   12884:	25c9c83a 	sub	r4,r4,r23
   12888:	1585883a 	add	r2,r2,r22
   1288c:	81000215 	stw	r4,8(r16)
   12890:	80800015 	stw	r2,0(r16)
   12894:	0025883a 	mov	r18,zero
   12898:	a1800217 	ldw	r6,8(r20)
   1289c:	e4f9883a 	add	fp,fp,r19
   128a0:	34e7c83a 	sub	r19,r6,r19
   128a4:	a4c00215 	stw	r19,8(r20)
   128a8:	983fa226 	beq	r19,zero,12734 <__sfvwrite_r+0xb0>
   128ac:	8200030b 	ldhu	r8,12(r16)
   128b0:	903fc01e 	bne	r18,zero,127b4 <__sfvwrite_r+0x130>
   128b4:	8f000017 	ldw	fp,0(r17)
   128b8:	8c800117 	ldw	r18,4(r17)
   128bc:	8c400204 	addi	r17,r17,8
   128c0:	003fbb06 	br	127b0 <__sfvwrite_r+0x12c>
   128c4:	8cc00017 	ldw	r19,0(r17)
   128c8:	8c800117 	ldw	r18,4(r17)
   128cc:	8c400204 	addi	r17,r17,8
   128d0:	003f8806 	br	126f4 <__sfvwrite_r+0x70>
   128d4:	800b883a 	mov	r5,r16
   128d8:	a809883a 	mov	r4,r21
   128dc:	000e6780 	call	e678 <_fflush_r>
   128e0:	10002226 	beq	r2,zero,1296c <__sfvwrite_r+0x2e8>
   128e4:	8080030b 	ldhu	r2,12(r16)
   128e8:	10801014 	ori	r2,r2,64
   128ec:	8080030d 	sth	r2,12(r16)
   128f0:	00bfffc4 	movi	r2,-1
   128f4:	003f9006 	br	12738 <__sfvwrite_r+0xb4>
   128f8:	0005883a 	mov	r2,zero
   128fc:	f800283a 	ret
   12900:	002d883a 	mov	r22,zero
   12904:	0039883a 	mov	fp,zero
   12908:	0005883a 	mov	r2,zero
   1290c:	002f883a 	mov	r23,zero
   12910:	b0001d26 	beq	r22,zero,12988 <__sfvwrite_r+0x304>
   12914:	10002026 	beq	r2,zero,12998 <__sfvwrite_r+0x314>
   12918:	e027883a 	mov	r19,fp
   1291c:	b4c0012e 	bgeu	r22,r19,12924 <__sfvwrite_r+0x2a0>
   12920:	b027883a 	mov	r19,r22
   12924:	81000017 	ldw	r4,0(r16)
   12928:	80800417 	ldw	r2,16(r16)
   1292c:	81c00517 	ldw	r7,20(r16)
   12930:	1100032e 	bgeu	r2,r4,12940 <__sfvwrite_r+0x2bc>
   12934:	84800217 	ldw	r18,8(r16)
   12938:	3ca5883a 	add	r18,r7,r18
   1293c:	94c01e16 	blt	r18,r19,129b8 <__sfvwrite_r+0x334>
   12940:	99c05316 	blt	r19,r7,12a90 <__sfvwrite_r+0x40c>
   12944:	80800917 	ldw	r2,36(r16)
   12948:	81400717 	ldw	r5,28(r16)
   1294c:	b80d883a 	mov	r6,r23
   12950:	a809883a 	mov	r4,r21
   12954:	103ee83a 	callr	r2
   12958:	1025883a 	mov	r18,r2
   1295c:	00bfe10e 	bge	zero,r2,128e4 <__sfvwrite_r+0x260>
   12960:	e4b9c83a 	sub	fp,fp,r18
   12964:	e03fdb26 	beq	fp,zero,128d4 <__sfvwrite_r+0x250>
   12968:	00800044 	movi	r2,1
   1296c:	a1800217 	ldw	r6,8(r20)
   12970:	bcaf883a 	add	r23,r23,r18
   12974:	b4adc83a 	sub	r22,r22,r18
   12978:	34a5c83a 	sub	r18,r6,r18
   1297c:	a4800215 	stw	r18,8(r20)
   12980:	903f6c26 	beq	r18,zero,12734 <__sfvwrite_r+0xb0>
   12984:	b03fe31e 	bne	r22,zero,12914 <__sfvwrite_r+0x290>
   12988:	8d800117 	ldw	r22,4(r17)
   1298c:	8dc00017 	ldw	r23,0(r17)
   12990:	8c400204 	addi	r17,r17,8
   12994:	b03ffc26 	beq	r22,zero,12988 <__sfvwrite_r+0x304>
   12998:	b00d883a 	mov	r6,r22
   1299c:	01400284 	movi	r5,10
   129a0:	b809883a 	mov	r4,r23
   129a4:	000f2c80 	call	f2c8 <memchr>
   129a8:	10004626 	beq	r2,zero,12ac4 <__sfvwrite_r+0x440>
   129ac:	10800044 	addi	r2,r2,1
   129b0:	15f9c83a 	sub	fp,r2,r23
   129b4:	003fd806 	br	12918 <__sfvwrite_r+0x294>
   129b8:	b80b883a 	mov	r5,r23
   129bc:	900d883a 	mov	r6,r18
   129c0:	0012d180 	call	12d18 <memmove>
   129c4:	80800017 	ldw	r2,0(r16)
   129c8:	800b883a 	mov	r5,r16
   129cc:	a809883a 	mov	r4,r21
   129d0:	1485883a 	add	r2,r2,r18
   129d4:	80800015 	stw	r2,0(r16)
   129d8:	000e6780 	call	e678 <_fflush_r>
   129dc:	103fe026 	beq	r2,zero,12960 <__sfvwrite_r+0x2dc>
   129e0:	003fc006 	br	128e4 <__sfvwrite_r+0x260>
   129e4:	80800417 	ldw	r2,16(r16)
   129e8:	11001436 	bltu	r2,r4,12a3c <__sfvwrite_r+0x3b8>
   129ec:	84c00517 	ldw	r19,20(r16)
   129f0:	94c01236 	bltu	r18,r19,12a3c <__sfvwrite_r+0x3b8>
   129f4:	d8800017 	ldw	r2,0(sp)
   129f8:	1480302e 	bgeu	r2,r18,12abc <__sfvwrite_r+0x438>
   129fc:	d9000117 	ldw	r4,4(sp)
   12a00:	980b883a 	mov	r5,r19
   12a04:	0006f980 	call	6f98 <__divsi3>
   12a08:	980b883a 	mov	r5,r19
   12a0c:	1009883a 	mov	r4,r2
   12a10:	000714c0 	call	714c <__mulsi3>
   12a14:	82000917 	ldw	r8,36(r16)
   12a18:	81400717 	ldw	r5,28(r16)
   12a1c:	100f883a 	mov	r7,r2
   12a20:	e00d883a 	mov	r6,fp
   12a24:	a809883a 	mov	r4,r21
   12a28:	403ee83a 	callr	r8
   12a2c:	1027883a 	mov	r19,r2
   12a30:	00bfac0e 	bge	zero,r2,128e4 <__sfvwrite_r+0x260>
   12a34:	94e5c83a 	sub	r18,r18,r19
   12a38:	003f9706 	br	12898 <__sfvwrite_r+0x214>
   12a3c:	b827883a 	mov	r19,r23
   12a40:	95c0012e 	bgeu	r18,r23,12a48 <__sfvwrite_r+0x3c4>
   12a44:	9027883a 	mov	r19,r18
   12a48:	980d883a 	mov	r6,r19
   12a4c:	e00b883a 	mov	r5,fp
   12a50:	0012d180 	call	12d18 <memmove>
   12a54:	80800217 	ldw	r2,8(r16)
   12a58:	81000017 	ldw	r4,0(r16)
   12a5c:	14c5c83a 	sub	r2,r2,r19
   12a60:	24c9883a 	add	r4,r4,r19
   12a64:	80800215 	stw	r2,8(r16)
   12a68:	81000015 	stw	r4,0(r16)
   12a6c:	103ff11e 	bne	r2,zero,12a34 <__sfvwrite_r+0x3b0>
   12a70:	800b883a 	mov	r5,r16
   12a74:	a809883a 	mov	r4,r21
   12a78:	000e6780 	call	e678 <_fflush_r>
   12a7c:	103fed26 	beq	r2,zero,12a34 <__sfvwrite_r+0x3b0>
   12a80:	003f9806 	br	128e4 <__sfvwrite_r+0x260>
   12a84:	902f883a 	mov	r23,r18
   12a88:	902d883a 	mov	r22,r18
   12a8c:	003f7706 	br	1286c <__sfvwrite_r+0x1e8>
   12a90:	980d883a 	mov	r6,r19
   12a94:	b80b883a 	mov	r5,r23
   12a98:	0012d180 	call	12d18 <memmove>
   12a9c:	80c00217 	ldw	r3,8(r16)
   12aa0:	80800017 	ldw	r2,0(r16)
   12aa4:	9825883a 	mov	r18,r19
   12aa8:	1cc7c83a 	sub	r3,r3,r19
   12aac:	14c5883a 	add	r2,r2,r19
   12ab0:	80c00215 	stw	r3,8(r16)
   12ab4:	80800015 	stw	r2,0(r16)
   12ab8:	003fa906 	br	12960 <__sfvwrite_r+0x2dc>
   12abc:	9009883a 	mov	r4,r18
   12ac0:	003fcf06 	br	12a00 <__sfvwrite_r+0x37c>
   12ac4:	b4c00044 	addi	r19,r22,1
   12ac8:	9839883a 	mov	fp,r19
   12acc:	003f9306 	br	1291c <__sfvwrite_r+0x298>
   12ad0:	a809883a 	mov	r4,r21
   12ad4:	0012ea80 	call	12ea8 <_realloc_r>
   12ad8:	100f883a 	mov	r7,r2
   12adc:	103f5b1e 	bne	r2,zero,1284c <__sfvwrite_r+0x1c8>
   12ae0:	81400417 	ldw	r5,16(r16)
   12ae4:	a809883a 	mov	r4,r21
   12ae8:	000ec240 	call	ec24 <_free_r>
   12aec:	8080030b 	ldhu	r2,12(r16)
   12af0:	00c00304 	movi	r3,12
   12af4:	a8c00015 	stw	r3,0(r21)
   12af8:	10bfdfcc 	andi	r2,r2,65407
   12afc:	003f7a06 	br	128e8 <__sfvwrite_r+0x264>
   12b00:	00c00304 	movi	r3,12
   12b04:	8080030b 	ldhu	r2,12(r16)
   12b08:	a8c00015 	stw	r3,0(r21)
   12b0c:	003f7606 	br	128e8 <__sfvwrite_r+0x264>
   12b10:	00bfffc4 	movi	r2,-1
   12b14:	003f0806 	br	12738 <__sfvwrite_r+0xb4>

00012b18 <_isatty_r>:
   12b18:	defffe04 	addi	sp,sp,-8
   12b1c:	dc000015 	stw	r16,0(sp)
   12b20:	008000b4 	movhi	r2,2
   12b24:	2021883a 	mov	r16,r4
   12b28:	2809883a 	mov	r4,r5
   12b2c:	dfc00115 	stw	ra,4(sp)
   12b30:	102e5215 	stw	zero,-18104(r2)
   12b34:	00149ec0 	call	149ec <isatty>
   12b38:	10ffffd8 	cmpnei	r3,r2,-1
   12b3c:	18000426 	beq	r3,zero,12b50 <_isatty_r+0x38>
   12b40:	dfc00117 	ldw	ra,4(sp)
   12b44:	dc000017 	ldw	r16,0(sp)
   12b48:	dec00204 	addi	sp,sp,8
   12b4c:	f800283a 	ret
   12b50:	00c000b4 	movhi	r3,2
   12b54:	18ee5217 	ldw	r3,-18104(r3)
   12b58:	183ff926 	beq	r3,zero,12b40 <_isatty_r+0x28>
   12b5c:	80c00015 	stw	r3,0(r16)
   12b60:	dfc00117 	ldw	ra,4(sp)
   12b64:	dc000017 	ldw	r16,0(sp)
   12b68:	dec00204 	addi	sp,sp,8
   12b6c:	f800283a 	ret

00012b70 <_setlocale_r>:
   12b70:	30001626 	beq	r6,zero,12bcc <_setlocale_r+0x5c>
   12b74:	01400074 	movhi	r5,1
   12b78:	defffe04 	addi	sp,sp,-8
   12b7c:	295f4304 	addi	r5,r5,32012
   12b80:	3009883a 	mov	r4,r6
   12b84:	dc000015 	stw	r16,0(sp)
   12b88:	dfc00115 	stw	ra,4(sp)
   12b8c:	3021883a 	mov	r16,r6
   12b90:	00133e40 	call	133e4 <strcmp>
   12b94:	1000061e 	bne	r2,zero,12bb0 <_setlocale_r+0x40>
   12b98:	00800074 	movhi	r2,1
   12b9c:	109f4204 	addi	r2,r2,32008
   12ba0:	dfc00117 	ldw	ra,4(sp)
   12ba4:	dc000017 	ldw	r16,0(sp)
   12ba8:	dec00204 	addi	sp,sp,8
   12bac:	f800283a 	ret
   12bb0:	80800003 	ldbu	r2,0(r16)
   12bb4:	10bfef44 	addi	r2,r2,-67
   12bb8:	10000726 	beq	r2,zero,12bd8 <_setlocale_r+0x68>
   12bbc:	80800003 	ldbu	r2,0(r16)
   12bc0:	103ff526 	beq	r2,zero,12b98 <_setlocale_r+0x28>
   12bc4:	0005883a 	mov	r2,zero
   12bc8:	003ff506 	br	12ba0 <_setlocale_r+0x30>
   12bcc:	00800074 	movhi	r2,1
   12bd0:	109f4204 	addi	r2,r2,32008
   12bd4:	f800283a 	ret
   12bd8:	80800043 	ldbu	r2,1(r16)
   12bdc:	103fee26 	beq	r2,zero,12b98 <_setlocale_r+0x28>
   12be0:	003ff606 	br	12bbc <_setlocale_r+0x4c>

00012be4 <__locale_mb_cur_max>:
   12be4:	008000b4 	movhi	r2,2
   12be8:	10a25c07 	ldb	r2,-30352(r2)
   12bec:	f800283a 	ret

00012bf0 <setlocale>:
   12bf0:	28001626 	beq	r5,zero,12c4c <setlocale+0x5c>
   12bf4:	defffe04 	addi	sp,sp,-8
   12bf8:	dc000015 	stw	r16,0(sp)
   12bfc:	2821883a 	mov	r16,r5
   12c00:	01400074 	movhi	r5,1
   12c04:	295f4304 	addi	r5,r5,32012
   12c08:	8009883a 	mov	r4,r16
   12c0c:	dfc00115 	stw	ra,4(sp)
   12c10:	00133e40 	call	133e4 <strcmp>
   12c14:	1000061e 	bne	r2,zero,12c30 <setlocale+0x40>
   12c18:	00800074 	movhi	r2,1
   12c1c:	109f4204 	addi	r2,r2,32008
   12c20:	dfc00117 	ldw	ra,4(sp)
   12c24:	dc000017 	ldw	r16,0(sp)
   12c28:	dec00204 	addi	sp,sp,8
   12c2c:	f800283a 	ret
   12c30:	80800003 	ldbu	r2,0(r16)
   12c34:	10bfef44 	addi	r2,r2,-67
   12c38:	10000726 	beq	r2,zero,12c58 <setlocale+0x68>
   12c3c:	80800003 	ldbu	r2,0(r16)
   12c40:	103ff526 	beq	r2,zero,12c18 <setlocale+0x28>
   12c44:	0005883a 	mov	r2,zero
   12c48:	003ff506 	br	12c20 <setlocale+0x30>
   12c4c:	00800074 	movhi	r2,1
   12c50:	109f4204 	addi	r2,r2,32008
   12c54:	f800283a 	ret
   12c58:	80800043 	ldbu	r2,1(r16)
   12c5c:	103fee26 	beq	r2,zero,12c18 <setlocale+0x28>
   12c60:	003ff606 	br	12c3c <setlocale+0x4c>

00012c64 <_lseek_r>:
   12c64:	2807883a 	mov	r3,r5
   12c68:	defffe04 	addi	sp,sp,-8
   12c6c:	dc000015 	stw	r16,0(sp)
   12c70:	300b883a 	mov	r5,r6
   12c74:	008000b4 	movhi	r2,2
   12c78:	380d883a 	mov	r6,r7
   12c7c:	2021883a 	mov	r16,r4
   12c80:	1809883a 	mov	r4,r3
   12c84:	dfc00115 	stw	ra,4(sp)
   12c88:	102e5215 	stw	zero,-18104(r2)
   12c8c:	0014d2c0 	call	14d2c <lseek>
   12c90:	10ffffd8 	cmpnei	r3,r2,-1
   12c94:	18000426 	beq	r3,zero,12ca8 <_lseek_r+0x44>
   12c98:	dfc00117 	ldw	ra,4(sp)
   12c9c:	dc000017 	ldw	r16,0(sp)
   12ca0:	dec00204 	addi	sp,sp,8
   12ca4:	f800283a 	ret
   12ca8:	00c000b4 	movhi	r3,2
   12cac:	18ee5217 	ldw	r3,-18104(r3)
   12cb0:	183ff926 	beq	r3,zero,12c98 <_lseek_r+0x34>
   12cb4:	80c00015 	stw	r3,0(r16)
   12cb8:	dfc00117 	ldw	ra,4(sp)
   12cbc:	dc000017 	ldw	r16,0(sp)
   12cc0:	dec00204 	addi	sp,sp,8
   12cc4:	f800283a 	ret

00012cc8 <_mbtowc_r>:
   12cc8:	008000b4 	movhi	r2,2
   12ccc:	10a24b17 	ldw	r2,-30420(r2)
   12cd0:	1000683a 	jmp	r2

00012cd4 <__ascii_mbtowc>:
   12cd4:	deffff04 	addi	sp,sp,-4
   12cd8:	28000826 	beq	r5,zero,12cfc <__ascii_mbtowc+0x28>
   12cdc:	30000926 	beq	r6,zero,12d04 <__ascii_mbtowc+0x30>
   12ce0:	38000b26 	beq	r7,zero,12d10 <__ascii_mbtowc+0x3c>
   12ce4:	30800003 	ldbu	r2,0(r6)
   12ce8:	28800015 	stw	r2,0(r5)
   12cec:	30800003 	ldbu	r2,0(r6)
   12cf0:	1004c03a 	cmpne	r2,r2,zero
   12cf4:	dec00104 	addi	sp,sp,4
   12cf8:	f800283a 	ret
   12cfc:	d80b883a 	mov	r5,sp
   12d00:	303ff71e 	bne	r6,zero,12ce0 <__ascii_mbtowc+0xc>
   12d04:	0005883a 	mov	r2,zero
   12d08:	dec00104 	addi	sp,sp,4
   12d0c:	f800283a 	ret
   12d10:	00bfff84 	movi	r2,-2
   12d14:	003ff706 	br	12cf4 <__ascii_mbtowc+0x20>

00012d18 <memmove>:
   12d18:	2005883a 	mov	r2,r4
   12d1c:	29000a2e 	bgeu	r5,r4,12d48 <memmove+0x30>
   12d20:	2989883a 	add	r4,r5,r6
   12d24:	1100082e 	bgeu	r2,r4,12d48 <memmove+0x30>
   12d28:	1187883a 	add	r3,r2,r6
   12d2c:	30003e26 	beq	r6,zero,12e28 <memmove+0x110>
   12d30:	217fffc3 	ldbu	r5,-1(r4)
   12d34:	18ffffc4 	addi	r3,r3,-1
   12d38:	213fffc4 	addi	r4,r4,-1
   12d3c:	19400005 	stb	r5,0(r3)
   12d40:	10fffb1e 	bne	r2,r3,12d30 <memmove+0x18>
   12d44:	f800283a 	ret
   12d48:	30c00430 	cmpltui	r3,r6,16
   12d4c:	18000b26 	beq	r3,zero,12d7c <memmove+0x64>
   12d50:	1007883a 	mov	r3,r2
   12d54:	31ffffc4 	addi	r7,r6,-1
   12d58:	30003726 	beq	r6,zero,12e38 <memmove+0x120>
   12d5c:	39c00044 	addi	r7,r7,1
   12d60:	29cf883a 	add	r7,r5,r7
   12d64:	29800003 	ldbu	r6,0(r5)
   12d68:	29400044 	addi	r5,r5,1
   12d6c:	18c00044 	addi	r3,r3,1
   12d70:	19bfffc5 	stb	r6,-1(r3)
   12d74:	29fffb1e 	bne	r5,r7,12d64 <memmove+0x4c>
   12d78:	f800283a 	ret
   12d7c:	2886b03a 	or	r3,r5,r2
   12d80:	18c000cc 	andi	r3,r3,3
   12d84:	1800291e 	bne	r3,zero,12e2c <memmove+0x114>
   12d88:	327ffc04 	addi	r9,r6,-16
   12d8c:	4812d13a 	srli	r9,r9,4
   12d90:	280f883a 	mov	r7,r5
   12d94:	1007883a 	mov	r3,r2
   12d98:	4a400044 	addi	r9,r9,1
   12d9c:	4812913a 	slli	r9,r9,4
   12da0:	1251883a 	add	r8,r2,r9
   12da4:	39000017 	ldw	r4,0(r7)
   12da8:	39c00404 	addi	r7,r7,16
   12dac:	18c00404 	addi	r3,r3,16
   12db0:	193ffc15 	stw	r4,-16(r3)
   12db4:	393ffd17 	ldw	r4,-12(r7)
   12db8:	193ffd15 	stw	r4,-12(r3)
   12dbc:	393ffe17 	ldw	r4,-8(r7)
   12dc0:	193ffe15 	stw	r4,-8(r3)
   12dc4:	393fff17 	ldw	r4,-4(r7)
   12dc8:	193fff15 	stw	r4,-4(r3)
   12dcc:	40fff51e 	bne	r8,r3,12da4 <memmove+0x8c>
   12dd0:	3100030c 	andi	r4,r6,12
   12dd4:	2a4b883a 	add	r5,r5,r9
   12dd8:	320003cc 	andi	r8,r6,15
   12ddc:	20001726 	beq	r4,zero,12e3c <memmove+0x124>
   12de0:	2813883a 	mov	r9,r5
   12de4:	180f883a 	mov	r7,r3
   12de8:	4a800017 	ldw	r10,0(r9)
   12dec:	39c00104 	addi	r7,r7,4
   12df0:	41c9c83a 	sub	r4,r8,r7
   12df4:	1909883a 	add	r4,r3,r4
   12df8:	21000128 	cmpgeui	r4,r4,4
   12dfc:	3abfff15 	stw	r10,-4(r7)
   12e00:	4a400104 	addi	r9,r9,4
   12e04:	203ff81e 	bne	r4,zero,12de8 <memmove+0xd0>
   12e08:	413fff04 	addi	r4,r8,-4
   12e0c:	2008d0ba 	srli	r4,r4,2
   12e10:	318000cc 	andi	r6,r6,3
   12e14:	21000044 	addi	r4,r4,1
   12e18:	200890ba 	slli	r4,r4,2
   12e1c:	1907883a 	add	r3,r3,r4
   12e20:	290b883a 	add	r5,r5,r4
   12e24:	003fcb06 	br	12d54 <memmove+0x3c>
   12e28:	f800283a 	ret
   12e2c:	31ffffc4 	addi	r7,r6,-1
   12e30:	1007883a 	mov	r3,r2
   12e34:	003fc906 	br	12d5c <memmove+0x44>
   12e38:	f800283a 	ret
   12e3c:	400d883a 	mov	r6,r8
   12e40:	003fc406 	br	12d54 <memmove+0x3c>

00012e44 <_read_r>:
   12e44:	2807883a 	mov	r3,r5
   12e48:	defffe04 	addi	sp,sp,-8
   12e4c:	dc000015 	stw	r16,0(sp)
   12e50:	300b883a 	mov	r5,r6
   12e54:	008000b4 	movhi	r2,2
   12e58:	380d883a 	mov	r6,r7
   12e5c:	2021883a 	mov	r16,r4
   12e60:	1809883a 	mov	r4,r3
   12e64:	dfc00115 	stw	ra,4(sp)
   12e68:	102e5215 	stw	zero,-18104(r2)
   12e6c:	0014f0c0 	call	14f0c <read>
   12e70:	10ffffd8 	cmpnei	r3,r2,-1
   12e74:	18000426 	beq	r3,zero,12e88 <_read_r+0x44>
   12e78:	dfc00117 	ldw	ra,4(sp)
   12e7c:	dc000017 	ldw	r16,0(sp)
   12e80:	dec00204 	addi	sp,sp,8
   12e84:	f800283a 	ret
   12e88:	00c000b4 	movhi	r3,2
   12e8c:	18ee5217 	ldw	r3,-18104(r3)
   12e90:	183ff926 	beq	r3,zero,12e78 <_read_r+0x34>
   12e94:	80c00015 	stw	r3,0(r16)
   12e98:	dfc00117 	ldw	ra,4(sp)
   12e9c:	dc000017 	ldw	r16,0(sp)
   12ea0:	dec00204 	addi	sp,sp,8
   12ea4:	f800283a 	ret

00012ea8 <_realloc_r>:
   12ea8:	defff604 	addi	sp,sp,-40
   12eac:	dc800215 	stw	r18,8(sp)
   12eb0:	dfc00915 	stw	ra,36(sp)
   12eb4:	df000815 	stw	fp,32(sp)
   12eb8:	ddc00715 	stw	r23,28(sp)
   12ebc:	dd800615 	stw	r22,24(sp)
   12ec0:	dd400515 	stw	r21,20(sp)
   12ec4:	dd000415 	stw	r20,16(sp)
   12ec8:	dcc00315 	stw	r19,12(sp)
   12ecc:	dc400115 	stw	r17,4(sp)
   12ed0:	dc000015 	stw	r16,0(sp)
   12ed4:	3025883a 	mov	r18,r6
   12ed8:	28008b26 	beq	r5,zero,13108 <_realloc_r+0x260>
   12edc:	2821883a 	mov	r16,r5
   12ee0:	2027883a 	mov	r19,r4
   12ee4:	944002c4 	addi	r17,r18,11
   12ee8:	0014e880 	call	14e88 <__malloc_lock>
   12eec:	888005f0 	cmpltui	r2,r17,23
   12ef0:	1000521e 	bne	r2,zero,1303c <_realloc_r+0x194>
   12ef4:	017ffe04 	movi	r5,-8
   12ef8:	8962703a 	and	r17,r17,r5
   12efc:	8807883a 	mov	r3,r17
   12f00:	88005116 	blt	r17,zero,13048 <_realloc_r+0x1a0>
   12f04:	8c805036 	bltu	r17,r18,13048 <_realloc_r+0x1a0>
   12f08:	80bfff17 	ldw	r2,-4(r16)
   12f0c:	017fff04 	movi	r5,-4
   12f10:	857ffe04 	addi	r21,r16,-8
   12f14:	1168703a 	and	r20,r2,r5
   12f18:	a0c0390e 	bge	r20,r3,13000 <_realloc_r+0x158>
   12f1c:	05c000b4 	movhi	r23,2
   12f20:	bde11004 	addi	r23,r23,-31680
   12f24:	ba000217 	ldw	r8,8(r23)
   12f28:	ad0f883a 	add	r7,r21,r20
   12f2c:	39000117 	ldw	r4,4(r7)
   12f30:	41c08e26 	beq	r8,r7,1316c <_realloc_r+0x2c4>
   12f34:	01bfff84 	movi	r6,-2
   12f38:	218c703a 	and	r6,r4,r6
   12f3c:	398d883a 	add	r6,r7,r6
   12f40:	31800117 	ldw	r6,4(r6)
   12f44:	3180004c 	andi	r6,r6,1
   12f48:	30004f1e 	bne	r6,zero,13088 <_realloc_r+0x1e0>
   12f4c:	2148703a 	and	r4,r4,r5
   12f50:	a10b883a 	add	r5,r20,r4
   12f54:	28c0bb0e 	bge	r5,r3,13244 <_realloc_r+0x39c>
   12f58:	1080004c 	andi	r2,r2,1
   12f5c:	10004c1e 	bne	r2,zero,13090 <_realloc_r+0x1e8>
   12f60:	873ffe17 	ldw	fp,-8(r16)
   12f64:	00bfff04 	movi	r2,-4
   12f68:	af39c83a 	sub	fp,r21,fp
   12f6c:	e1400117 	ldw	r5,4(fp)
   12f70:	288a703a 	and	r5,r5,r2
   12f74:	38000426 	beq	r7,zero,12f88 <_realloc_r+0xe0>
   12f78:	a16d883a 	add	r22,r20,r5
   12f7c:	b12d883a 	add	r22,r22,r4
   12f80:	41c0ba26 	beq	r8,r7,1326c <_realloc_r+0x3c4>
   12f84:	b0c0930e 	bge	r22,r3,131d4 <_realloc_r+0x32c>
   12f88:	e0004126 	beq	fp,zero,13090 <_realloc_r+0x1e8>
   12f8c:	a16d883a 	add	r22,r20,r5
   12f90:	b0c03f16 	blt	r22,r3,13090 <_realloc_r+0x1e8>
   12f94:	e0800317 	ldw	r2,12(fp)
   12f98:	e0c00217 	ldw	r3,8(fp)
   12f9c:	a1bfff04 	addi	r6,r20,-4
   12fa0:	31400968 	cmpgeui	r5,r6,37
   12fa4:	18800315 	stw	r2,12(r3)
   12fa8:	10c00215 	stw	r3,8(r2)
   12fac:	e1000204 	addi	r4,fp,8
   12fb0:	2800941e 	bne	r5,zero,13204 <_realloc_r+0x35c>
   12fb4:	30800530 	cmpltui	r2,r6,20
   12fb8:	1000db1e 	bne	r2,zero,13328 <_realloc_r+0x480>
   12fbc:	80c00017 	ldw	r3,0(r16)
   12fc0:	30800728 	cmpgeui	r2,r6,28
   12fc4:	e0c00215 	stw	r3,8(fp)
   12fc8:	80c00117 	ldw	r3,4(r16)
   12fcc:	e0c00315 	stw	r3,12(fp)
   12fd0:	1000d71e 	bne	r2,zero,13330 <_realloc_r+0x488>
   12fd4:	84000204 	addi	r16,r16,8
   12fd8:	e0800404 	addi	r2,fp,16
   12fdc:	80c00017 	ldw	r3,0(r16)
   12fe0:	b029883a 	mov	r20,r22
   12fe4:	e02b883a 	mov	r21,fp
   12fe8:	10c00015 	stw	r3,0(r2)
   12fec:	80c00117 	ldw	r3,4(r16)
   12ff0:	10c00115 	stw	r3,4(r2)
   12ff4:	80c00217 	ldw	r3,8(r16)
   12ff8:	2021883a 	mov	r16,r4
   12ffc:	10c00215 	stw	r3,8(r2)
   13000:	a9800117 	ldw	r6,4(r21)
   13004:	a447c83a 	sub	r3,r20,r17
   13008:	19000430 	cmpltui	r4,r3,16
   1300c:	3180004c 	andi	r6,r6,1
   13010:	ad05883a 	add	r2,r21,r20
   13014:	20004926 	beq	r4,zero,1313c <_realloc_r+0x294>
   13018:	a18cb03a 	or	r6,r20,r6
   1301c:	a9800115 	stw	r6,4(r21)
   13020:	10c00117 	ldw	r3,4(r2)
   13024:	18c00054 	ori	r3,r3,1
   13028:	10c00115 	stw	r3,4(r2)
   1302c:	9809883a 	mov	r4,r19
   13030:	0014eac0 	call	14eac <__malloc_unlock>
   13034:	8025883a 	mov	r18,r16
   13038:	00000606 	br	13054 <_realloc_r+0x1ac>
   1303c:	04400404 	movi	r17,16
   13040:	00c00404 	movi	r3,16
   13044:	8cbfb02e 	bgeu	r17,r18,12f08 <_realloc_r+0x60>
   13048:	00800304 	movi	r2,12
   1304c:	98800015 	stw	r2,0(r19)
   13050:	0025883a 	mov	r18,zero
   13054:	9005883a 	mov	r2,r18
   13058:	dfc00917 	ldw	ra,36(sp)
   1305c:	df000817 	ldw	fp,32(sp)
   13060:	ddc00717 	ldw	r23,28(sp)
   13064:	dd800617 	ldw	r22,24(sp)
   13068:	dd400517 	ldw	r21,20(sp)
   1306c:	dd000417 	ldw	r20,16(sp)
   13070:	dcc00317 	ldw	r19,12(sp)
   13074:	dc800217 	ldw	r18,8(sp)
   13078:	dc400117 	ldw	r17,4(sp)
   1307c:	dc000017 	ldw	r16,0(sp)
   13080:	dec00a04 	addi	sp,sp,40
   13084:	f800283a 	ret
   13088:	1080004c 	andi	r2,r2,1
   1308c:	10006826 	beq	r2,zero,13230 <_realloc_r+0x388>
   13090:	900b883a 	mov	r5,r18
   13094:	9809883a 	mov	r4,r19
   13098:	0009ed00 	call	9ed0 <_malloc_r>
   1309c:	1025883a 	mov	r18,r2
   130a0:	10001626 	beq	r2,zero,130fc <_realloc_r+0x254>
   130a4:	80bfff17 	ldw	r2,-4(r16)
   130a8:	013fff84 	movi	r4,-2
   130ac:	90fffe04 	addi	r3,r18,-8
   130b0:	1104703a 	and	r2,r2,r4
   130b4:	a885883a 	add	r2,r21,r2
   130b8:	10c05826 	beq	r2,r3,1321c <_realloc_r+0x374>
   130bc:	a1bfff04 	addi	r6,r20,-4
   130c0:	30800968 	cmpgeui	r2,r6,37
   130c4:	1000651e 	bne	r2,zero,1325c <_realloc_r+0x3b4>
   130c8:	30800530 	cmpltui	r2,r6,20
   130cc:	10003826 	beq	r2,zero,131b0 <_realloc_r+0x308>
   130d0:	9005883a 	mov	r2,r18
   130d4:	8007883a 	mov	r3,r16
   130d8:	19000017 	ldw	r4,0(r3)
   130dc:	11000015 	stw	r4,0(r2)
   130e0:	19000117 	ldw	r4,4(r3)
   130e4:	11000115 	stw	r4,4(r2)
   130e8:	18c00217 	ldw	r3,8(r3)
   130ec:	10c00215 	stw	r3,8(r2)
   130f0:	800b883a 	mov	r5,r16
   130f4:	9809883a 	mov	r4,r19
   130f8:	000ec240 	call	ec24 <_free_r>
   130fc:	9809883a 	mov	r4,r19
   13100:	0014eac0 	call	14eac <__malloc_unlock>
   13104:	003fd306 	br	13054 <_realloc_r+0x1ac>
   13108:	300b883a 	mov	r5,r6
   1310c:	dfc00917 	ldw	ra,36(sp)
   13110:	df000817 	ldw	fp,32(sp)
   13114:	ddc00717 	ldw	r23,28(sp)
   13118:	dd800617 	ldw	r22,24(sp)
   1311c:	dd400517 	ldw	r21,20(sp)
   13120:	dd000417 	ldw	r20,16(sp)
   13124:	dcc00317 	ldw	r19,12(sp)
   13128:	dc800217 	ldw	r18,8(sp)
   1312c:	dc400117 	ldw	r17,4(sp)
   13130:	dc000017 	ldw	r16,0(sp)
   13134:	dec00a04 	addi	sp,sp,40
   13138:	0009ed01 	jmpi	9ed0 <_malloc_r>
   1313c:	344cb03a 	or	r6,r6,r17
   13140:	a9800115 	stw	r6,4(r21)
   13144:	ac4b883a 	add	r5,r21,r17
   13148:	18c00054 	ori	r3,r3,1
   1314c:	28c00115 	stw	r3,4(r5)
   13150:	10c00117 	ldw	r3,4(r2)
   13154:	29400204 	addi	r5,r5,8
   13158:	9809883a 	mov	r4,r19
   1315c:	18c00054 	ori	r3,r3,1
   13160:	10c00115 	stw	r3,4(r2)
   13164:	000ec240 	call	ec24 <_free_r>
   13168:	003fb006 	br	1302c <_realloc_r+0x184>
   1316c:	2148703a 	and	r4,r4,r5
   13170:	a10b883a 	add	r5,r20,r4
   13174:	89800404 	addi	r6,r17,16
   13178:	29bf7716 	blt	r5,r6,12f58 <_realloc_r+0xb0>
   1317c:	ac6b883a 	add	r21,r21,r17
   13180:	2c45c83a 	sub	r2,r5,r17
   13184:	bd400215 	stw	r21,8(r23)
   13188:	10800054 	ori	r2,r2,1
   1318c:	a8800115 	stw	r2,4(r21)
   13190:	80bfff17 	ldw	r2,-4(r16)
   13194:	9809883a 	mov	r4,r19
   13198:	8025883a 	mov	r18,r16
   1319c:	1080004c 	andi	r2,r2,1
   131a0:	1462b03a 	or	r17,r2,r17
   131a4:	847fff15 	stw	r17,-4(r16)
   131a8:	0014eac0 	call	14eac <__malloc_unlock>
   131ac:	003fa906 	br	13054 <_realloc_r+0x1ac>
   131b0:	80c00017 	ldw	r3,0(r16)
   131b4:	30800728 	cmpgeui	r2,r6,28
   131b8:	90c00015 	stw	r3,0(r18)
   131bc:	80c00117 	ldw	r3,4(r16)
   131c0:	90c00115 	stw	r3,4(r18)
   131c4:	10004f1e 	bne	r2,zero,13304 <_realloc_r+0x45c>
   131c8:	80c00204 	addi	r3,r16,8
   131cc:	90800204 	addi	r2,r18,8
   131d0:	003fc106 	br	130d8 <_realloc_r+0x230>
   131d4:	38800317 	ldw	r2,12(r7)
   131d8:	38c00217 	ldw	r3,8(r7)
   131dc:	a1bfff04 	addi	r6,r20,-4
   131e0:	31400968 	cmpgeui	r5,r6,37
   131e4:	18800315 	stw	r2,12(r3)
   131e8:	10c00215 	stw	r3,8(r2)
   131ec:	e0c00217 	ldw	r3,8(fp)
   131f0:	e0800317 	ldw	r2,12(fp)
   131f4:	e1000204 	addi	r4,fp,8
   131f8:	18800315 	stw	r2,12(r3)
   131fc:	10c00215 	stw	r3,8(r2)
   13200:	283f6c26 	beq	r5,zero,12fb4 <_realloc_r+0x10c>
   13204:	800b883a 	mov	r5,r16
   13208:	0012d180 	call	12d18 <memmove>
   1320c:	1021883a 	mov	r16,r2
   13210:	b029883a 	mov	r20,r22
   13214:	e02b883a 	mov	r21,fp
   13218:	003f7906 	br	13000 <_realloc_r+0x158>
   1321c:	90bfff17 	ldw	r2,-4(r18)
   13220:	00ffff04 	movi	r3,-4
   13224:	10c4703a 	and	r2,r2,r3
   13228:	a0a9883a 	add	r20,r20,r2
   1322c:	003f7406 	br	13000 <_realloc_r+0x158>
   13230:	873ffe17 	ldw	fp,-8(r16)
   13234:	af39c83a 	sub	fp,r21,fp
   13238:	e0800117 	ldw	r2,4(fp)
   1323c:	114a703a 	and	r5,r2,r5
   13240:	003f5106 	br	12f88 <_realloc_r+0xe0>
   13244:	38800317 	ldw	r2,12(r7)
   13248:	38c00217 	ldw	r3,8(r7)
   1324c:	2829883a 	mov	r20,r5
   13250:	18800315 	stw	r2,12(r3)
   13254:	10c00215 	stw	r3,8(r2)
   13258:	003f6906 	br	13000 <_realloc_r+0x158>
   1325c:	800b883a 	mov	r5,r16
   13260:	9009883a 	mov	r4,r18
   13264:	0012d180 	call	12d18 <memmove>
   13268:	003fa106 	br	130f0 <_realloc_r+0x248>
   1326c:	88800404 	addi	r2,r17,16
   13270:	b0bf4516 	blt	r22,r2,12f88 <_realloc_r+0xe0>
   13274:	e0800317 	ldw	r2,12(fp)
   13278:	e0c00217 	ldw	r3,8(fp)
   1327c:	a1bfff04 	addi	r6,r20,-4
   13280:	31000968 	cmpgeui	r4,r6,37
   13284:	18800315 	stw	r2,12(r3)
   13288:	10c00215 	stw	r3,8(r2)
   1328c:	e4800204 	addi	r18,fp,8
   13290:	2000391e 	bne	r4,zero,13378 <_realloc_r+0x4d0>
   13294:	30800530 	cmpltui	r2,r6,20
   13298:	1000351e 	bne	r2,zero,13370 <_realloc_r+0x4c8>
   1329c:	80c00017 	ldw	r3,0(r16)
   132a0:	30800728 	cmpgeui	r2,r6,28
   132a4:	e0c00215 	stw	r3,8(fp)
   132a8:	80c00117 	ldw	r3,4(r16)
   132ac:	e0c00315 	stw	r3,12(fp)
   132b0:	10003c1e 	bne	r2,zero,133a4 <_realloc_r+0x4fc>
   132b4:	84000204 	addi	r16,r16,8
   132b8:	e0800404 	addi	r2,fp,16
   132bc:	80c00017 	ldw	r3,0(r16)
   132c0:	10c00015 	stw	r3,0(r2)
   132c4:	80c00117 	ldw	r3,4(r16)
   132c8:	10c00115 	stw	r3,4(r2)
   132cc:	80c00217 	ldw	r3,8(r16)
   132d0:	10c00215 	stw	r3,8(r2)
   132d4:	e447883a 	add	r3,fp,r17
   132d8:	b445c83a 	sub	r2,r22,r17
   132dc:	b8c00215 	stw	r3,8(r23)
   132e0:	10800054 	ori	r2,r2,1
   132e4:	18800115 	stw	r2,4(r3)
   132e8:	e0800117 	ldw	r2,4(fp)
   132ec:	9809883a 	mov	r4,r19
   132f0:	1080004c 	andi	r2,r2,1
   132f4:	1462b03a 	or	r17,r2,r17
   132f8:	e4400115 	stw	r17,4(fp)
   132fc:	0014eac0 	call	14eac <__malloc_unlock>
   13300:	003f5406 	br	13054 <_realloc_r+0x1ac>
   13304:	80800217 	ldw	r2,8(r16)
   13308:	31800920 	cmpeqi	r6,r6,36
   1330c:	90800215 	stw	r2,8(r18)
   13310:	80800317 	ldw	r2,12(r16)
   13314:	90800315 	stw	r2,12(r18)
   13318:	30000e1e 	bne	r6,zero,13354 <_realloc_r+0x4ac>
   1331c:	80c00404 	addi	r3,r16,16
   13320:	90800404 	addi	r2,r18,16
   13324:	003f6c06 	br	130d8 <_realloc_r+0x230>
   13328:	2005883a 	mov	r2,r4
   1332c:	003f2b06 	br	12fdc <_realloc_r+0x134>
   13330:	80800217 	ldw	r2,8(r16)
   13334:	31800920 	cmpeqi	r6,r6,36
   13338:	e0800415 	stw	r2,16(fp)
   1333c:	80800317 	ldw	r2,12(r16)
   13340:	e0800515 	stw	r2,20(fp)
   13344:	3000101e 	bne	r6,zero,13388 <_realloc_r+0x4e0>
   13348:	84000404 	addi	r16,r16,16
   1334c:	e0800604 	addi	r2,fp,24
   13350:	003f2206 	br	12fdc <_realloc_r+0x134>
   13354:	81000417 	ldw	r4,16(r16)
   13358:	80c00604 	addi	r3,r16,24
   1335c:	90800604 	addi	r2,r18,24
   13360:	91000415 	stw	r4,16(r18)
   13364:	81000517 	ldw	r4,20(r16)
   13368:	91000515 	stw	r4,20(r18)
   1336c:	003f5a06 	br	130d8 <_realloc_r+0x230>
   13370:	9005883a 	mov	r2,r18
   13374:	003fd106 	br	132bc <_realloc_r+0x414>
   13378:	800b883a 	mov	r5,r16
   1337c:	9009883a 	mov	r4,r18
   13380:	0012d180 	call	12d18 <memmove>
   13384:	003fd306 	br	132d4 <_realloc_r+0x42c>
   13388:	80c00417 	ldw	r3,16(r16)
   1338c:	84000604 	addi	r16,r16,24
   13390:	e0800804 	addi	r2,fp,32
   13394:	e0c00615 	stw	r3,24(fp)
   13398:	80ffff17 	ldw	r3,-4(r16)
   1339c:	e0c00715 	stw	r3,28(fp)
   133a0:	003f0e06 	br	12fdc <_realloc_r+0x134>
   133a4:	80800217 	ldw	r2,8(r16)
   133a8:	31800920 	cmpeqi	r6,r6,36
   133ac:	e0800415 	stw	r2,16(fp)
   133b0:	80800317 	ldw	r2,12(r16)
   133b4:	e0800515 	stw	r2,20(fp)
   133b8:	3000031e 	bne	r6,zero,133c8 <_realloc_r+0x520>
   133bc:	84000404 	addi	r16,r16,16
   133c0:	e0800604 	addi	r2,fp,24
   133c4:	003fbd06 	br	132bc <_realloc_r+0x414>
   133c8:	80c00417 	ldw	r3,16(r16)
   133cc:	84000604 	addi	r16,r16,24
   133d0:	e0800804 	addi	r2,fp,32
   133d4:	e0c00615 	stw	r3,24(fp)
   133d8:	80ffff17 	ldw	r3,-4(r16)
   133dc:	e0c00715 	stw	r3,28(fp)
   133e0:	003fb606 	br	132bc <_realloc_r+0x414>

000133e4 <strcmp>:
   133e4:	2144b03a 	or	r2,r4,r5
   133e8:	108000cc 	andi	r2,r2,3
   133ec:	1000141e 	bne	r2,zero,13440 <strcmp+0x5c>
   133f0:	20800017 	ldw	r2,0(r4)
   133f4:	28c00017 	ldw	r3,0(r5)
   133f8:	10c0111e 	bne	r2,r3,13440 <strcmp+0x5c>
   133fc:	01ffbff4 	movhi	r7,65279
   13400:	01a02074 	movhi	r6,32897
   13404:	39ffbfc4 	addi	r7,r7,-257
   13408:	31a02004 	addi	r6,r6,-32640
   1340c:	00000306 	br	1341c <strcmp+0x38>
   13410:	20800017 	ldw	r2,0(r4)
   13414:	28c00017 	ldw	r3,0(r5)
   13418:	10c0091e 	bne	r2,r3,13440 <strcmp+0x5c>
   1341c:	11c7883a 	add	r3,r2,r7
   13420:	0084303a 	nor	r2,zero,r2
   13424:	1884703a 	and	r2,r3,r2
   13428:	1184703a 	and	r2,r2,r6
   1342c:	21000104 	addi	r4,r4,4
   13430:	29400104 	addi	r5,r5,4
   13434:	103ff626 	beq	r2,zero,13410 <strcmp+0x2c>
   13438:	0005883a 	mov	r2,zero
   1343c:	f800283a 	ret
   13440:	20c00003 	ldbu	r3,0(r4)
   13444:	18803fcc 	andi	r2,r3,255
   13448:	1080201c 	xori	r2,r2,128
   1344c:	10bfe004 	addi	r2,r2,-128
   13450:	1000071e 	bne	r2,zero,13470 <strcmp+0x8c>
   13454:	00000a06 	br	13480 <strcmp+0x9c>
   13458:	20c00003 	ldbu	r3,0(r4)
   1345c:	29400044 	addi	r5,r5,1
   13460:	18803fcc 	andi	r2,r3,255
   13464:	1080201c 	xori	r2,r2,128
   13468:	10bfe004 	addi	r2,r2,-128
   1346c:	10000726 	beq	r2,zero,1348c <strcmp+0xa8>
   13470:	29800007 	ldb	r6,0(r5)
   13474:	21000044 	addi	r4,r4,1
   13478:	30bff726 	beq	r6,r2,13458 <strcmp+0x74>
   1347c:	18803fcc 	andi	r2,r3,255
   13480:	28c00003 	ldbu	r3,0(r5)
   13484:	10c5c83a 	sub	r2,r2,r3
   13488:	f800283a 	ret
   1348c:	28c00003 	ldbu	r3,0(r5)
   13490:	0005883a 	mov	r2,zero
   13494:	10c5c83a 	sub	r2,r2,r3
   13498:	f800283a 	ret

0001349c <_vfiprintf_r>:
   1349c:	0010b081 	jmpi	10b08 <___vfiprintf_internal_r>

000134a0 <_wcrtomb_r>:
   134a0:	defffa04 	addi	sp,sp,-24
   134a4:	dc400415 	stw	r17,16(sp)
   134a8:	dc000315 	stw	r16,12(sp)
   134ac:	008000b4 	movhi	r2,2
   134b0:	dfc00515 	stw	ra,20(sp)
   134b4:	10a24a17 	ldw	r2,-30424(r2)
   134b8:	2023883a 	mov	r17,r4
   134bc:	3821883a 	mov	r16,r7
   134c0:	28000826 	beq	r5,zero,134e4 <_wcrtomb_r+0x44>
   134c4:	103ee83a 	callr	r2
   134c8:	10ffffd8 	cmpnei	r3,r2,-1
   134cc:	18000a26 	beq	r3,zero,134f8 <_wcrtomb_r+0x58>
   134d0:	dfc00517 	ldw	ra,20(sp)
   134d4:	dc400417 	ldw	r17,16(sp)
   134d8:	dc000317 	ldw	r16,12(sp)
   134dc:	dec00604 	addi	sp,sp,24
   134e0:	f800283a 	ret
   134e4:	000d883a 	mov	r6,zero
   134e8:	d9400084 	addi	r5,sp,2
   134ec:	103ee83a 	callr	r2
   134f0:	10ffffd8 	cmpnei	r3,r2,-1
   134f4:	183ff61e 	bne	r3,zero,134d0 <_wcrtomb_r+0x30>
   134f8:	00802284 	movi	r2,138
   134fc:	80000015 	stw	zero,0(r16)
   13500:	88800015 	stw	r2,0(r17)
   13504:	00bfffc4 	movi	r2,-1
   13508:	003ff106 	br	134d0 <_wcrtomb_r+0x30>

0001350c <wcrtomb>:
   1350c:	defffa04 	addi	sp,sp,-24
   13510:	00c000b4 	movhi	r3,2
   13514:	dc400415 	stw	r17,16(sp)
   13518:	dc000315 	stw	r16,12(sp)
   1351c:	1c671e17 	ldw	r17,-25480(r3)
   13520:	dfc00515 	stw	ra,20(sp)
   13524:	00c000b4 	movhi	r3,2
   13528:	18e24a17 	ldw	r3,-30424(r3)
   1352c:	3021883a 	mov	r16,r6
   13530:	20000c26 	beq	r4,zero,13564 <wcrtomb+0x58>
   13534:	280d883a 	mov	r6,r5
   13538:	800f883a 	mov	r7,r16
   1353c:	200b883a 	mov	r5,r4
   13540:	8809883a 	mov	r4,r17
   13544:	183ee83a 	callr	r3
   13548:	10ffffd8 	cmpnei	r3,r2,-1
   1354c:	18000c26 	beq	r3,zero,13580 <wcrtomb+0x74>
   13550:	dfc00517 	ldw	ra,20(sp)
   13554:	dc400417 	ldw	r17,16(sp)
   13558:	dc000317 	ldw	r16,12(sp)
   1355c:	dec00604 	addi	sp,sp,24
   13560:	f800283a 	ret
   13564:	300f883a 	mov	r7,r6
   13568:	d9400084 	addi	r5,sp,2
   1356c:	000d883a 	mov	r6,zero
   13570:	8809883a 	mov	r4,r17
   13574:	183ee83a 	callr	r3
   13578:	10ffffd8 	cmpnei	r3,r2,-1
   1357c:	183ff41e 	bne	r3,zero,13550 <wcrtomb+0x44>
   13580:	00802284 	movi	r2,138
   13584:	80000015 	stw	zero,0(r16)
   13588:	88800015 	stw	r2,0(r17)
   1358c:	00bfffc4 	movi	r2,-1
   13590:	003fef06 	br	13550 <wcrtomb+0x44>

00013594 <_wctomb_r>:
   13594:	008000b4 	movhi	r2,2
   13598:	10a24a17 	ldw	r2,-30424(r2)
   1359c:	1000683a 	jmp	r2

000135a0 <__ascii_wctomb>:
   135a0:	28000926 	beq	r5,zero,135c8 <__ascii_wctomb+0x28>
   135a4:	30804030 	cmpltui	r2,r6,256
   135a8:	10000326 	beq	r2,zero,135b8 <__ascii_wctomb+0x18>
   135ac:	29800005 	stb	r6,0(r5)
   135b0:	00800044 	movi	r2,1
   135b4:	f800283a 	ret
   135b8:	00802284 	movi	r2,138
   135bc:	20800015 	stw	r2,0(r4)
   135c0:	00bfffc4 	movi	r2,-1
   135c4:	f800283a 	ret
   135c8:	0005883a 	mov	r2,zero
   135cc:	f800283a 	ret

000135d0 <abort>:
   135d0:	deffff04 	addi	sp,sp,-4
   135d4:	01000184 	movi	r4,6
   135d8:	dfc00015 	stw	ra,0(sp)
   135dc:	001385c0 	call	1385c <raise>
   135e0:	01000044 	movi	r4,1
   135e4:	00148600 	call	14860 <_exit>

000135e8 <_init_signal_r>:
   135e8:	2080b717 	ldw	r2,732(r4)
   135ec:	10000226 	beq	r2,zero,135f8 <_init_signal_r+0x10>
   135f0:	0005883a 	mov	r2,zero
   135f4:	f800283a 	ret
   135f8:	defffe04 	addi	sp,sp,-8
   135fc:	01402004 	movi	r5,128
   13600:	dc000015 	stw	r16,0(sp)
   13604:	dfc00115 	stw	ra,4(sp)
   13608:	2021883a 	mov	r16,r4
   1360c:	0009ed00 	call	9ed0 <_malloc_r>
   13610:	8080b715 	stw	r2,732(r16)
   13614:	1009883a 	mov	r4,r2
   13618:	10000826 	beq	r2,zero,1363c <_init_signal_r+0x54>
   1361c:	01802004 	movi	r6,128
   13620:	000b883a 	mov	r5,zero
   13624:	000f3980 	call	f398 <memset>
   13628:	0005883a 	mov	r2,zero
   1362c:	dfc00117 	ldw	ra,4(sp)
   13630:	dc000017 	ldw	r16,0(sp)
   13634:	dec00204 	addi	sp,sp,8
   13638:	f800283a 	ret
   1363c:	00bfffc4 	movi	r2,-1
   13640:	003ffa06 	br	1362c <_init_signal_r+0x44>

00013644 <_signal_r>:
   13644:	defffc04 	addi	sp,sp,-16
   13648:	dc400115 	stw	r17,4(sp)
   1364c:	dfc00315 	stw	ra,12(sp)
   13650:	dc800215 	stw	r18,8(sp)
   13654:	dc000015 	stw	r16,0(sp)
   13658:	28800830 	cmpltui	r2,r5,32
   1365c:	2023883a 	mov	r17,r4
   13660:	10000e26 	beq	r2,zero,1369c <_signal_r+0x58>
   13664:	20c0b717 	ldw	r3,732(r4)
   13668:	2821883a 	mov	r16,r5
   1366c:	3025883a 	mov	r18,r6
   13670:	18000e26 	beq	r3,zero,136ac <_signal_r+0x68>
   13674:	802090ba 	slli	r16,r16,2
   13678:	1c21883a 	add	r16,r3,r16
   1367c:	80800017 	ldw	r2,0(r16)
   13680:	84800015 	stw	r18,0(r16)
   13684:	dfc00317 	ldw	ra,12(sp)
   13688:	dc800217 	ldw	r18,8(sp)
   1368c:	dc400117 	ldw	r17,4(sp)
   13690:	dc000017 	ldw	r16,0(sp)
   13694:	dec00404 	addi	sp,sp,16
   13698:	f800283a 	ret
   1369c:	00800584 	movi	r2,22
   136a0:	20800015 	stw	r2,0(r4)
   136a4:	00bfffc4 	movi	r2,-1
   136a8:	003ff606 	br	13684 <_signal_r+0x40>
   136ac:	01402004 	movi	r5,128
   136b0:	0009ed00 	call	9ed0 <_malloc_r>
   136b4:	8880b715 	stw	r2,732(r17)
   136b8:	10000626 	beq	r2,zero,136d4 <_signal_r+0x90>
   136bc:	01802004 	movi	r6,128
   136c0:	000b883a 	mov	r5,zero
   136c4:	1009883a 	mov	r4,r2
   136c8:	000f3980 	call	f398 <memset>
   136cc:	1007883a 	mov	r3,r2
   136d0:	003fe806 	br	13674 <_signal_r+0x30>
   136d4:	00bfffc4 	movi	r2,-1
   136d8:	003fea06 	br	13684 <_signal_r+0x40>

000136dc <_raise_r>:
   136dc:	28800830 	cmpltui	r2,r5,32
   136e0:	10002b26 	beq	r2,zero,13790 <_raise_r+0xb4>
   136e4:	2080b717 	ldw	r2,732(r4)
   136e8:	defffd04 	addi	sp,sp,-12
   136ec:	dc000115 	stw	r16,4(sp)
   136f0:	dfc00215 	stw	ra,8(sp)
   136f4:	2821883a 	mov	r16,r5
   136f8:	10001026 	beq	r2,zero,1373c <_raise_r+0x60>
   136fc:	280690ba 	slli	r3,r5,2
   13700:	10c5883a 	add	r2,r2,r3
   13704:	10c00017 	ldw	r3,0(r2)
   13708:	18000c26 	beq	r3,zero,1373c <_raise_r+0x60>
   1370c:	19400060 	cmpeqi	r5,r3,1
   13710:	28001a1e 	bne	r5,zero,1377c <_raise_r+0xa0>
   13714:	197fffd8 	cmpnei	r5,r3,-1
   13718:	28001126 	beq	r5,zero,13760 <_raise_r+0x84>
   1371c:	10000015 	stw	zero,0(r2)
   13720:	8009883a 	mov	r4,r16
   13724:	183ee83a 	callr	r3
   13728:	0005883a 	mov	r2,zero
   1372c:	dfc00217 	ldw	ra,8(sp)
   13730:	dc000117 	ldw	r16,4(sp)
   13734:	dec00304 	addi	sp,sp,12
   13738:	f800283a 	ret
   1373c:	d9000015 	stw	r4,0(sp)
   13740:	0013b340 	call	13b34 <_getpid_r>
   13744:	d9000017 	ldw	r4,0(sp)
   13748:	800d883a 	mov	r6,r16
   1374c:	100b883a 	mov	r5,r2
   13750:	dfc00217 	ldw	ra,8(sp)
   13754:	dc000117 	ldw	r16,4(sp)
   13758:	dec00304 	addi	sp,sp,12
   1375c:	0013ad41 	jmpi	13ad4 <_kill_r>
   13760:	00800584 	movi	r2,22
   13764:	20800015 	stw	r2,0(r4)
   13768:	00800044 	movi	r2,1
   1376c:	dfc00217 	ldw	ra,8(sp)
   13770:	dc000117 	ldw	r16,4(sp)
   13774:	dec00304 	addi	sp,sp,12
   13778:	f800283a 	ret
   1377c:	0005883a 	mov	r2,zero
   13780:	dfc00217 	ldw	ra,8(sp)
   13784:	dc000117 	ldw	r16,4(sp)
   13788:	dec00304 	addi	sp,sp,12
   1378c:	f800283a 	ret
   13790:	00800584 	movi	r2,22
   13794:	20800015 	stw	r2,0(r4)
   13798:	00bfffc4 	movi	r2,-1
   1379c:	f800283a 	ret

000137a0 <__sigtramp_r>:
   137a0:	28800830 	cmpltui	r2,r5,32
   137a4:	10002b26 	beq	r2,zero,13854 <__sigtramp_r+0xb4>
   137a8:	20c0b717 	ldw	r3,732(r4)
   137ac:	defffd04 	addi	sp,sp,-12
   137b0:	dc400115 	stw	r17,4(sp)
   137b4:	dc000015 	stw	r16,0(sp)
   137b8:	dfc00215 	stw	ra,8(sp)
   137bc:	2821883a 	mov	r16,r5
   137c0:	2023883a 	mov	r17,r4
   137c4:	18001326 	beq	r3,zero,13814 <__sigtramp_r+0x74>
   137c8:	800490ba 	slli	r2,r16,2
   137cc:	1887883a 	add	r3,r3,r2
   137d0:	18800017 	ldw	r2,0(r3)
   137d4:	10000d26 	beq	r2,zero,1380c <__sigtramp_r+0x6c>
   137d8:	113fffe0 	cmpeqi	r4,r2,-1
   137dc:	2000191e 	bne	r4,zero,13844 <__sigtramp_r+0xa4>
   137e0:	11000060 	cmpeqi	r4,r2,1
   137e4:	2000151e 	bne	r4,zero,1383c <__sigtramp_r+0x9c>
   137e8:	18000015 	stw	zero,0(r3)
   137ec:	8009883a 	mov	r4,r16
   137f0:	103ee83a 	callr	r2
   137f4:	0005883a 	mov	r2,zero
   137f8:	dfc00217 	ldw	ra,8(sp)
   137fc:	dc400117 	ldw	r17,4(sp)
   13800:	dc000017 	ldw	r16,0(sp)
   13804:	dec00304 	addi	sp,sp,12
   13808:	f800283a 	ret
   1380c:	00800044 	movi	r2,1
   13810:	003ff906 	br	137f8 <__sigtramp_r+0x58>
   13814:	01402004 	movi	r5,128
   13818:	0009ed00 	call	9ed0 <_malloc_r>
   1381c:	8880b715 	stw	r2,732(r17)
   13820:	10000a26 	beq	r2,zero,1384c <__sigtramp_r+0xac>
   13824:	01802004 	movi	r6,128
   13828:	000b883a 	mov	r5,zero
   1382c:	1009883a 	mov	r4,r2
   13830:	000f3980 	call	f398 <memset>
   13834:	1007883a 	mov	r3,r2
   13838:	003fe306 	br	137c8 <__sigtramp_r+0x28>
   1383c:	008000c4 	movi	r2,3
   13840:	003fed06 	br	137f8 <__sigtramp_r+0x58>
   13844:	00800084 	movi	r2,2
   13848:	003feb06 	br	137f8 <__sigtramp_r+0x58>
   1384c:	00bfffc4 	movi	r2,-1
   13850:	003fe906 	br	137f8 <__sigtramp_r+0x58>
   13854:	00bfffc4 	movi	r2,-1
   13858:	f800283a 	ret

0001385c <raise>:
   1385c:	defffd04 	addi	sp,sp,-12
   13860:	dc400115 	stw	r17,4(sp)
   13864:	00c000b4 	movhi	r3,2
   13868:	dfc00215 	stw	ra,8(sp)
   1386c:	dc000015 	stw	r16,0(sp)
   13870:	20800830 	cmpltui	r2,r4,32
   13874:	1c671e17 	ldw	r17,-25480(r3)
   13878:	10002326 	beq	r2,zero,13908 <raise+0xac>
   1387c:	8880b717 	ldw	r2,732(r17)
   13880:	2021883a 	mov	r16,r4
   13884:	10001026 	beq	r2,zero,138c8 <raise+0x6c>
   13888:	200690ba 	slli	r3,r4,2
   1388c:	10c5883a 	add	r2,r2,r3
   13890:	10c00017 	ldw	r3,0(r2)
   13894:	18000c26 	beq	r3,zero,138c8 <raise+0x6c>
   13898:	19400060 	cmpeqi	r5,r3,1
   1389c:	2800181e 	bne	r5,zero,13900 <raise+0xa4>
   138a0:	197fffd8 	cmpnei	r5,r3,-1
   138a4:	28001226 	beq	r5,zero,138f0 <raise+0x94>
   138a8:	10000015 	stw	zero,0(r2)
   138ac:	183ee83a 	callr	r3
   138b0:	0005883a 	mov	r2,zero
   138b4:	dfc00217 	ldw	ra,8(sp)
   138b8:	dc400117 	ldw	r17,4(sp)
   138bc:	dc000017 	ldw	r16,0(sp)
   138c0:	dec00304 	addi	sp,sp,12
   138c4:	f800283a 	ret
   138c8:	8809883a 	mov	r4,r17
   138cc:	0013b340 	call	13b34 <_getpid_r>
   138d0:	800d883a 	mov	r6,r16
   138d4:	100b883a 	mov	r5,r2
   138d8:	8809883a 	mov	r4,r17
   138dc:	dfc00217 	ldw	ra,8(sp)
   138e0:	dc400117 	ldw	r17,4(sp)
   138e4:	dc000017 	ldw	r16,0(sp)
   138e8:	dec00304 	addi	sp,sp,12
   138ec:	0013ad41 	jmpi	13ad4 <_kill_r>
   138f0:	00800584 	movi	r2,22
   138f4:	88800015 	stw	r2,0(r17)
   138f8:	00800044 	movi	r2,1
   138fc:	003fed06 	br	138b4 <raise+0x58>
   13900:	0005883a 	mov	r2,zero
   13904:	003feb06 	br	138b4 <raise+0x58>
   13908:	00800584 	movi	r2,22
   1390c:	88800015 	stw	r2,0(r17)
   13910:	00bfffc4 	movi	r2,-1
   13914:	003fe706 	br	138b4 <raise+0x58>

00013918 <signal>:
   13918:	defffc04 	addi	sp,sp,-16
   1391c:	dc800215 	stw	r18,8(sp)
   13920:	00c000b4 	movhi	r3,2
   13924:	dfc00315 	stw	ra,12(sp)
   13928:	dc400115 	stw	r17,4(sp)
   1392c:	dc000015 	stw	r16,0(sp)
   13930:	20800830 	cmpltui	r2,r4,32
   13934:	1ca71e17 	ldw	r18,-25480(r3)
   13938:	10000e26 	beq	r2,zero,13974 <signal+0x5c>
   1393c:	2021883a 	mov	r16,r4
   13940:	9100b717 	ldw	r4,732(r18)
   13944:	2823883a 	mov	r17,r5
   13948:	20000e26 	beq	r4,zero,13984 <signal+0x6c>
   1394c:	802090ba 	slli	r16,r16,2
   13950:	2421883a 	add	r16,r4,r16
   13954:	80800017 	ldw	r2,0(r16)
   13958:	84400015 	stw	r17,0(r16)
   1395c:	dfc00317 	ldw	ra,12(sp)
   13960:	dc800217 	ldw	r18,8(sp)
   13964:	dc400117 	ldw	r17,4(sp)
   13968:	dc000017 	ldw	r16,0(sp)
   1396c:	dec00404 	addi	sp,sp,16
   13970:	f800283a 	ret
   13974:	00800584 	movi	r2,22
   13978:	90800015 	stw	r2,0(r18)
   1397c:	00bfffc4 	movi	r2,-1
   13980:	003ff606 	br	1395c <signal+0x44>
   13984:	9009883a 	mov	r4,r18
   13988:	01402004 	movi	r5,128
   1398c:	0009ed00 	call	9ed0 <_malloc_r>
   13990:	9080b715 	stw	r2,732(r18)
   13994:	1009883a 	mov	r4,r2
   13998:	10000526 	beq	r2,zero,139b0 <signal+0x98>
   1399c:	01802004 	movi	r6,128
   139a0:	000b883a 	mov	r5,zero
   139a4:	000f3980 	call	f398 <memset>
   139a8:	1009883a 	mov	r4,r2
   139ac:	003fe706 	br	1394c <signal+0x34>
   139b0:	00bfffc4 	movi	r2,-1
   139b4:	003fe906 	br	1395c <signal+0x44>

000139b8 <_init_signal>:
   139b8:	defffe04 	addi	sp,sp,-8
   139bc:	008000b4 	movhi	r2,2
   139c0:	dc000015 	stw	r16,0(sp)
   139c4:	14271e17 	ldw	r16,-25480(r2)
   139c8:	dfc00115 	stw	ra,4(sp)
   139cc:	8080b717 	ldw	r2,732(r16)
   139d0:	10000526 	beq	r2,zero,139e8 <_init_signal+0x30>
   139d4:	0005883a 	mov	r2,zero
   139d8:	dfc00117 	ldw	ra,4(sp)
   139dc:	dc000017 	ldw	r16,0(sp)
   139e0:	dec00204 	addi	sp,sp,8
   139e4:	f800283a 	ret
   139e8:	8009883a 	mov	r4,r16
   139ec:	01402004 	movi	r5,128
   139f0:	0009ed00 	call	9ed0 <_malloc_r>
   139f4:	8080b715 	stw	r2,732(r16)
   139f8:	1009883a 	mov	r4,r2
   139fc:	10000426 	beq	r2,zero,13a10 <_init_signal+0x58>
   13a00:	01802004 	movi	r6,128
   13a04:	000b883a 	mov	r5,zero
   13a08:	000f3980 	call	f398 <memset>
   13a0c:	003ff106 	br	139d4 <_init_signal+0x1c>
   13a10:	00bfffc4 	movi	r2,-1
   13a14:	003ff006 	br	139d8 <_init_signal+0x20>

00013a18 <__sigtramp>:
   13a18:	defffd04 	addi	sp,sp,-12
   13a1c:	dc400115 	stw	r17,4(sp)
   13a20:	00c000b4 	movhi	r3,2
   13a24:	dfc00215 	stw	ra,8(sp)
   13a28:	dc000015 	stw	r16,0(sp)
   13a2c:	20800830 	cmpltui	r2,r4,32
   13a30:	1c671e17 	ldw	r17,-25480(r3)
   13a34:	10002526 	beq	r2,zero,13acc <__sigtramp+0xb4>
   13a38:	88c0b717 	ldw	r3,732(r17)
   13a3c:	2021883a 	mov	r16,r4
   13a40:	18001326 	beq	r3,zero,13a90 <__sigtramp+0x78>
   13a44:	800890ba 	slli	r4,r16,2
   13a48:	1907883a 	add	r3,r3,r4
   13a4c:	18800017 	ldw	r2,0(r3)
   13a50:	10000d26 	beq	r2,zero,13a88 <__sigtramp+0x70>
   13a54:	113fffe0 	cmpeqi	r4,r2,-1
   13a58:	20001a1e 	bne	r4,zero,13ac4 <__sigtramp+0xac>
   13a5c:	11000060 	cmpeqi	r4,r2,1
   13a60:	2000161e 	bne	r4,zero,13abc <__sigtramp+0xa4>
   13a64:	18000015 	stw	zero,0(r3)
   13a68:	8009883a 	mov	r4,r16
   13a6c:	103ee83a 	callr	r2
   13a70:	0005883a 	mov	r2,zero
   13a74:	dfc00217 	ldw	ra,8(sp)
   13a78:	dc400117 	ldw	r17,4(sp)
   13a7c:	dc000017 	ldw	r16,0(sp)
   13a80:	dec00304 	addi	sp,sp,12
   13a84:	f800283a 	ret
   13a88:	00800044 	movi	r2,1
   13a8c:	003ff906 	br	13a74 <__sigtramp+0x5c>
   13a90:	01402004 	movi	r5,128
   13a94:	8809883a 	mov	r4,r17
   13a98:	0009ed00 	call	9ed0 <_malloc_r>
   13a9c:	8880b715 	stw	r2,732(r17)
   13aa0:	10000a26 	beq	r2,zero,13acc <__sigtramp+0xb4>
   13aa4:	01802004 	movi	r6,128
   13aa8:	000b883a 	mov	r5,zero
   13aac:	1009883a 	mov	r4,r2
   13ab0:	000f3980 	call	f398 <memset>
   13ab4:	1007883a 	mov	r3,r2
   13ab8:	003fe206 	br	13a44 <__sigtramp+0x2c>
   13abc:	008000c4 	movi	r2,3
   13ac0:	003fec06 	br	13a74 <__sigtramp+0x5c>
   13ac4:	00800084 	movi	r2,2
   13ac8:	003fea06 	br	13a74 <__sigtramp+0x5c>
   13acc:	00bfffc4 	movi	r2,-1
   13ad0:	003fe806 	br	13a74 <__sigtramp+0x5c>

00013ad4 <_kill_r>:
   13ad4:	2807883a 	mov	r3,r5
   13ad8:	defffe04 	addi	sp,sp,-8
   13adc:	dc000015 	stw	r16,0(sp)
   13ae0:	008000b4 	movhi	r2,2
   13ae4:	300b883a 	mov	r5,r6
   13ae8:	2021883a 	mov	r16,r4
   13aec:	1809883a 	mov	r4,r3
   13af0:	dfc00115 	stw	ra,4(sp)
   13af4:	102e5215 	stw	zero,-18104(r2)
   13af8:	0014ad80 	call	14ad8 <kill>
   13afc:	10ffffd8 	cmpnei	r3,r2,-1
   13b00:	18000426 	beq	r3,zero,13b14 <_kill_r+0x40>
   13b04:	dfc00117 	ldw	ra,4(sp)
   13b08:	dc000017 	ldw	r16,0(sp)
   13b0c:	dec00204 	addi	sp,sp,8
   13b10:	f800283a 	ret
   13b14:	00c000b4 	movhi	r3,2
   13b18:	18ee5217 	ldw	r3,-18104(r3)
   13b1c:	183ff926 	beq	r3,zero,13b04 <_kill_r+0x30>
   13b20:	80c00015 	stw	r3,0(r16)
   13b24:	dfc00117 	ldw	ra,4(sp)
   13b28:	dc000017 	ldw	r16,0(sp)
   13b2c:	dec00204 	addi	sp,sp,8
   13b30:	f800283a 	ret

00013b34 <_getpid_r>:
   13b34:	00149901 	jmpi	14990 <getpid>

00013b38 <__udivdi3>:
   13b38:	defff504 	addi	sp,sp,-44
   13b3c:	dd000515 	stw	r20,20(sp)
   13b40:	dc800315 	stw	r18,12(sp)
   13b44:	dfc00a15 	stw	ra,40(sp)
   13b48:	df000915 	stw	fp,36(sp)
   13b4c:	ddc00815 	stw	r23,32(sp)
   13b50:	dd800715 	stw	r22,28(sp)
   13b54:	dd400615 	stw	r21,24(sp)
   13b58:	dcc00415 	stw	r19,16(sp)
   13b5c:	dc400215 	stw	r17,8(sp)
   13b60:	dc000115 	stw	r16,4(sp)
   13b64:	2029883a 	mov	r20,r4
   13b68:	2825883a 	mov	r18,r5
   13b6c:	3800461e 	bne	r7,zero,13c88 <__udivdi3+0x150>
   13b70:	3823883a 	mov	r17,r7
   13b74:	3021883a 	mov	r16,r6
   13b78:	2027883a 	mov	r19,r4
   13b7c:	2980622e 	bgeu	r5,r6,13d08 <__udivdi3+0x1d0>
   13b80:	00bfffd4 	movui	r2,65535
   13b84:	282b883a 	mov	r21,r5
   13b88:	1180aa2e 	bgeu	r2,r6,13e34 <__udivdi3+0x2fc>
   13b8c:	00804034 	movhi	r2,256
   13b90:	30815a36 	bltu	r6,r2,140fc <__udivdi3+0x5c4>
   13b94:	3006d63a 	srli	r3,r6,24
   13b98:	04400604 	movi	r17,24
   13b9c:	00800074 	movhi	r2,1
   13ba0:	1885883a 	add	r2,r3,r2
   13ba4:	109e5f03 	ldbu	r2,31100(r2)
   13ba8:	00c00804 	movi	r3,32
   13bac:	1463883a 	add	r17,r2,r17
   13bb0:	1c45c83a 	sub	r2,r3,r17
   13bb4:	1c400526 	beq	r3,r17,13bcc <__udivdi3+0x94>
   13bb8:	9086983a 	sll	r3,r18,r2
   13bbc:	a462d83a 	srl	r17,r20,r17
   13bc0:	30a0983a 	sll	r16,r6,r2
   13bc4:	a0a6983a 	sll	r19,r20,r2
   13bc8:	88eab03a 	or	r21,r17,r3
   13bcc:	802cd43a 	srli	r22,r16,16
   13bd0:	a809883a 	mov	r4,r21
   13bd4:	853fffcc 	andi	r20,r16,65535
   13bd8:	b00b883a 	mov	r5,r22
   13bdc:	00070f00 	call	70f0 <__umodsi3>
   13be0:	a809883a 	mov	r4,r21
   13be4:	b00b883a 	mov	r5,r22
   13be8:	1025883a 	mov	r18,r2
   13bec:	000708c0 	call	708c <__udivsi3>
   13bf0:	a009883a 	mov	r4,r20
   13bf4:	100b883a 	mov	r5,r2
   13bf8:	102b883a 	mov	r21,r2
   13bfc:	000714c0 	call	714c <__mulsi3>
   13c00:	9024943a 	slli	r18,r18,16
   13c04:	9808d43a 	srli	r4,r19,16
   13c08:	9108b03a 	or	r4,r18,r4
   13c0c:	2080052e 	bgeu	r4,r2,13c24 <__udivdi3+0xec>
   13c10:	2409883a 	add	r4,r4,r16
   13c14:	a8ffffc4 	addi	r3,r21,-1
   13c18:	24000136 	bltu	r4,r16,13c20 <__udivdi3+0xe8>
   13c1c:	20814836 	bltu	r4,r2,14140 <__udivdi3+0x608>
   13c20:	182b883a 	mov	r21,r3
   13c24:	20a3c83a 	sub	r17,r4,r2
   13c28:	8809883a 	mov	r4,r17
   13c2c:	b00b883a 	mov	r5,r22
   13c30:	00070f00 	call	70f0 <__umodsi3>
   13c34:	8809883a 	mov	r4,r17
   13c38:	1023883a 	mov	r17,r2
   13c3c:	b00b883a 	mov	r5,r22
   13c40:	8822943a 	slli	r17,r17,16
   13c44:	000708c0 	call	708c <__udivsi3>
   13c48:	100b883a 	mov	r5,r2
   13c4c:	a009883a 	mov	r4,r20
   13c50:	9cffffcc 	andi	r19,r19,65535
   13c54:	1025883a 	mov	r18,r2
   13c58:	8ce6b03a 	or	r19,r17,r19
   13c5c:	000714c0 	call	714c <__mulsi3>
   13c60:	9880052e 	bgeu	r19,r2,13c78 <__udivdi3+0x140>
   13c64:	84e7883a 	add	r19,r16,r19
   13c68:	90ffffc4 	addi	r3,r18,-1
   13c6c:	9c000136 	bltu	r19,r16,13c74 <__udivdi3+0x13c>
   13c70:	98813136 	bltu	r19,r2,14138 <__udivdi3+0x600>
   13c74:	1825883a 	mov	r18,r3
   13c78:	a80c943a 	slli	r6,r21,16
   13c7c:	0007883a 	mov	r3,zero
   13c80:	3484b03a 	or	r2,r6,r18
   13c84:	00000306 	br	13c94 <__udivdi3+0x15c>
   13c88:	29c00e2e 	bgeu	r5,r7,13cc4 <__udivdi3+0x18c>
   13c8c:	0007883a 	mov	r3,zero
   13c90:	0005883a 	mov	r2,zero
   13c94:	dfc00a17 	ldw	ra,40(sp)
   13c98:	df000917 	ldw	fp,36(sp)
   13c9c:	ddc00817 	ldw	r23,32(sp)
   13ca0:	dd800717 	ldw	r22,28(sp)
   13ca4:	dd400617 	ldw	r21,24(sp)
   13ca8:	dd000517 	ldw	r20,20(sp)
   13cac:	dcc00417 	ldw	r19,16(sp)
   13cb0:	dc800317 	ldw	r18,12(sp)
   13cb4:	dc400217 	ldw	r17,8(sp)
   13cb8:	dc000117 	ldw	r16,4(sp)
   13cbc:	dec00b04 	addi	sp,sp,44
   13cc0:	f800283a 	ret
   13cc4:	00bfffd4 	movui	r2,65535
   13cc8:	11c05f2e 	bgeu	r2,r7,13e48 <__udivdi3+0x310>
   13ccc:	00804034 	movhi	r2,256
   13cd0:	3880fc36 	bltu	r7,r2,140c4 <__udivdi3+0x58c>
   13cd4:	3804d63a 	srli	r2,r7,24
   13cd8:	01000604 	movi	r4,24
   13cdc:	00c00074 	movhi	r3,1
   13ce0:	10c7883a 	add	r3,r2,r3
   13ce4:	189e5f03 	ldbu	r2,31100(r3)
   13ce8:	00c00804 	movi	r3,32
   13cec:	1105883a 	add	r2,r2,r4
   13cf0:	18a3c83a 	sub	r17,r3,r2
   13cf4:	1880901e 	bne	r3,r2,13f38 <__udivdi3+0x400>
   13cf8:	3c80f736 	bltu	r7,r18,140d8 <__udivdi3+0x5a0>
   13cfc:	a185403a 	cmpgeu	r2,r20,r6
   13d00:	0007883a 	mov	r3,zero
   13d04:	003fe306 	br	13c94 <__udivdi3+0x15c>
   13d08:	3000041e 	bne	r6,zero,13d1c <__udivdi3+0x1e4>
   13d0c:	000b883a 	mov	r5,zero
   13d10:	01000044 	movi	r4,1
   13d14:	000708c0 	call	708c <__udivsi3>
   13d18:	1021883a 	mov	r16,r2
   13d1c:	00bfffd4 	movui	r2,65535
   13d20:	14003f2e 	bgeu	r2,r16,13e20 <__udivdi3+0x2e8>
   13d24:	00804034 	movhi	r2,256
   13d28:	8080f136 	bltu	r16,r2,140f0 <__udivdi3+0x5b8>
   13d2c:	8006d63a 	srli	r3,r16,24
   13d30:	04400604 	movi	r17,24
   13d34:	00800074 	movhi	r2,1
   13d38:	1885883a 	add	r2,r3,r2
   13d3c:	109e5f03 	ldbu	r2,31100(r2)
   13d40:	00c00804 	movi	r3,32
   13d44:	1463883a 	add	r17,r2,r17
   13d48:	1c45c83a 	sub	r2,r3,r17
   13d4c:	1c40431e 	bne	r3,r17,13e5c <__udivdi3+0x324>
   13d50:	802cd43a 	srli	r22,r16,16
   13d54:	9423c83a 	sub	r17,r18,r16
   13d58:	853fffcc 	andi	r20,r16,65535
   13d5c:	00c00044 	movi	r3,1
   13d60:	b00b883a 	mov	r5,r22
   13d64:	8809883a 	mov	r4,r17
   13d68:	d8c00015 	stw	r3,0(sp)
   13d6c:	00070f00 	call	70f0 <__umodsi3>
   13d70:	b00b883a 	mov	r5,r22
   13d74:	8809883a 	mov	r4,r17
   13d78:	1025883a 	mov	r18,r2
   13d7c:	000708c0 	call	708c <__udivsi3>
   13d80:	1009883a 	mov	r4,r2
   13d84:	a00b883a 	mov	r5,r20
   13d88:	102b883a 	mov	r21,r2
   13d8c:	000714c0 	call	714c <__mulsi3>
   13d90:	9024943a 	slli	r18,r18,16
   13d94:	9808d43a 	srli	r4,r19,16
   13d98:	d8c00017 	ldw	r3,0(sp)
   13d9c:	9108b03a 	or	r4,r18,r4
   13da0:	2080052e 	bgeu	r4,r2,13db8 <__udivdi3+0x280>
   13da4:	2409883a 	add	r4,r4,r16
   13da8:	a97fffc4 	addi	r5,r21,-1
   13dac:	24000136 	bltu	r4,r16,13db4 <__udivdi3+0x27c>
   13db0:	2080e636 	bltu	r4,r2,1414c <__udivdi3+0x614>
   13db4:	282b883a 	mov	r21,r5
   13db8:	20a3c83a 	sub	r17,r4,r2
   13dbc:	8809883a 	mov	r4,r17
   13dc0:	b00b883a 	mov	r5,r22
   13dc4:	d8c00015 	stw	r3,0(sp)
   13dc8:	00070f00 	call	70f0 <__umodsi3>
   13dcc:	8809883a 	mov	r4,r17
   13dd0:	1023883a 	mov	r17,r2
   13dd4:	b00b883a 	mov	r5,r22
   13dd8:	8822943a 	slli	r17,r17,16
   13ddc:	000708c0 	call	708c <__udivsi3>
   13de0:	a00b883a 	mov	r5,r20
   13de4:	1009883a 	mov	r4,r2
   13de8:	9cffffcc 	andi	r19,r19,65535
   13dec:	1025883a 	mov	r18,r2
   13df0:	8ce6b03a 	or	r19,r17,r19
   13df4:	000714c0 	call	714c <__mulsi3>
   13df8:	d8c00017 	ldw	r3,0(sp)
   13dfc:	9880052e 	bgeu	r19,r2,13e14 <__udivdi3+0x2dc>
   13e00:	84e7883a 	add	r19,r16,r19
   13e04:	913fffc4 	addi	r4,r18,-1
   13e08:	9c000136 	bltu	r19,r16,13e10 <__udivdi3+0x2d8>
   13e0c:	9880c836 	bltu	r19,r2,14130 <__udivdi3+0x5f8>
   13e10:	2025883a 	mov	r18,r4
   13e14:	a80c943a 	slli	r6,r21,16
   13e18:	3484b03a 	or	r2,r6,r18
   13e1c:	003f9d06 	br	13c94 <__udivdi3+0x15c>
   13e20:	80804030 	cmpltui	r2,r16,256
   13e24:	1000b81e 	bne	r2,zero,14108 <__udivdi3+0x5d0>
   13e28:	8006d23a 	srli	r3,r16,8
   13e2c:	04400204 	movi	r17,8
   13e30:	003fc006 	br	13d34 <__udivdi3+0x1fc>
   13e34:	30804030 	cmpltui	r2,r6,256
   13e38:	1000a51e 	bne	r2,zero,140d0 <__udivdi3+0x598>
   13e3c:	3006d23a 	srli	r3,r6,8
   13e40:	04400204 	movi	r17,8
   13e44:	003f5506 	br	13b9c <__udivdi3+0x64>
   13e48:	38804030 	cmpltui	r2,r7,256
   13e4c:	1000a51e 	bne	r2,zero,140e4 <__udivdi3+0x5ac>
   13e50:	3804d23a 	srli	r2,r7,8
   13e54:	01000204 	movi	r4,8
   13e58:	003fa006 	br	13cdc <__udivdi3+0x1a4>
   13e5c:	80a0983a 	sll	r16,r16,r2
   13e60:	946ed83a 	srl	r23,r18,r17
   13e64:	9086983a 	sll	r3,r18,r2
   13e68:	802cd43a 	srli	r22,r16,16
   13e6c:	a462d83a 	srl	r17,r20,r17
   13e70:	b809883a 	mov	r4,r23
   13e74:	b00b883a 	mov	r5,r22
   13e78:	88eab03a 	or	r21,r17,r3
   13e7c:	a0a6983a 	sll	r19,r20,r2
   13e80:	00070f00 	call	70f0 <__umodsi3>
   13e84:	b809883a 	mov	r4,r23
   13e88:	b00b883a 	mov	r5,r22
   13e8c:	1025883a 	mov	r18,r2
   13e90:	853fffcc 	andi	r20,r16,65535
   13e94:	000708c0 	call	708c <__udivsi3>
   13e98:	a009883a 	mov	r4,r20
   13e9c:	100b883a 	mov	r5,r2
   13ea0:	102f883a 	mov	r23,r2
   13ea4:	000714c0 	call	714c <__mulsi3>
   13ea8:	9024943a 	slli	r18,r18,16
   13eac:	a808d43a 	srli	r4,r21,16
   13eb0:	9108b03a 	or	r4,r18,r4
   13eb4:	2080062e 	bgeu	r4,r2,13ed0 <__udivdi3+0x398>
   13eb8:	2409883a 	add	r4,r4,r16
   13ebc:	b8ffffc4 	addi	r3,r23,-1
   13ec0:	24009936 	bltu	r4,r16,14128 <__udivdi3+0x5f0>
   13ec4:	2080982e 	bgeu	r4,r2,14128 <__udivdi3+0x5f0>
   13ec8:	bdffff84 	addi	r23,r23,-2
   13ecc:	2409883a 	add	r4,r4,r16
   13ed0:	20a3c83a 	sub	r17,r4,r2
   13ed4:	8809883a 	mov	r4,r17
   13ed8:	b00b883a 	mov	r5,r22
   13edc:	00070f00 	call	70f0 <__umodsi3>
   13ee0:	1025883a 	mov	r18,r2
   13ee4:	8809883a 	mov	r4,r17
   13ee8:	b00b883a 	mov	r5,r22
   13eec:	9024943a 	slli	r18,r18,16
   13ef0:	000708c0 	call	708c <__udivsi3>
   13ef4:	100b883a 	mov	r5,r2
   13ef8:	a009883a 	mov	r4,r20
   13efc:	ac7fffcc 	andi	r17,r21,65535
   13f00:	1039883a 	mov	fp,r2
   13f04:	9462b03a 	or	r17,r18,r17
   13f08:	000714c0 	call	714c <__mulsi3>
   13f0c:	8880062e 	bgeu	r17,r2,13f28 <__udivdi3+0x3f0>
   13f10:	8c23883a 	add	r17,r17,r16
   13f14:	e0ffffc4 	addi	r3,fp,-1
   13f18:	8c007f36 	bltu	r17,r16,14118 <__udivdi3+0x5e0>
   13f1c:	88807e2e 	bgeu	r17,r2,14118 <__udivdi3+0x5e0>
   13f20:	e73fff84 	addi	fp,fp,-2
   13f24:	8c23883a 	add	r17,r17,r16
   13f28:	b806943a 	slli	r3,r23,16
   13f2c:	88a3c83a 	sub	r17,r17,r2
   13f30:	1f06b03a 	or	r3,r3,fp
   13f34:	003f8a06 	br	13d60 <__udivdi3+0x228>
   13f38:	30a6d83a 	srl	r19,r6,r2
   13f3c:	3c4e983a 	sll	r7,r7,r17
   13f40:	90a0d83a 	srl	r16,r18,r2
   13f44:	9446983a 	sll	r3,r18,r17
   13f48:	99e6b03a 	or	r19,r19,r7
   13f4c:	a084d83a 	srl	r2,r20,r2
   13f50:	9838d43a 	srli	fp,r19,16
   13f54:	8009883a 	mov	r4,r16
   13f58:	10eab03a 	or	r21,r2,r3
   13f5c:	e00b883a 	mov	r5,fp
   13f60:	346c983a 	sll	r22,r6,r17
   13f64:	dd400015 	stw	r21,0(sp)
   13f68:	00070f00 	call	70f0 <__umodsi3>
   13f6c:	8009883a 	mov	r4,r16
   13f70:	e00b883a 	mov	r5,fp
   13f74:	102f883a 	mov	r23,r2
   13f78:	9cbfffcc 	andi	r18,r19,65535
   13f7c:	000708c0 	call	708c <__udivsi3>
   13f80:	9009883a 	mov	r4,r18
   13f84:	100b883a 	mov	r5,r2
   13f88:	1021883a 	mov	r16,r2
   13f8c:	000714c0 	call	714c <__mulsi3>
   13f90:	b82e943a 	slli	r23,r23,16
   13f94:	a808d43a 	srli	r4,r21,16
   13f98:	b908b03a 	or	r4,r23,r4
   13f9c:	2080062e 	bgeu	r4,r2,13fb8 <__udivdi3+0x480>
   13fa0:	24c9883a 	add	r4,r4,r19
   13fa4:	817fffc4 	addi	r5,r16,-1
   13fa8:	24c05d36 	bltu	r4,r19,14120 <__udivdi3+0x5e8>
   13fac:	20805c2e 	bgeu	r4,r2,14120 <__udivdi3+0x5e8>
   13fb0:	843fff84 	addi	r16,r16,-2
   13fb4:	24c9883a 	add	r4,r4,r19
   13fb8:	20abc83a 	sub	r21,r4,r2
   13fbc:	a809883a 	mov	r4,r21
   13fc0:	e00b883a 	mov	r5,fp
   13fc4:	00070f00 	call	70f0 <__umodsi3>
   13fc8:	a809883a 	mov	r4,r21
   13fcc:	e00b883a 	mov	r5,fp
   13fd0:	102b883a 	mov	r21,r2
   13fd4:	000708c0 	call	708c <__udivsi3>
   13fd8:	9009883a 	mov	r4,r18
   13fdc:	100b883a 	mov	r5,r2
   13fe0:	102f883a 	mov	r23,r2
   13fe4:	000714c0 	call	714c <__mulsi3>
   13fe8:	d8c00017 	ldw	r3,0(sp)
   13fec:	a82a943a 	slli	r21,r21,16
   13ff0:	100d883a 	mov	r6,r2
   13ff4:	1cbfffcc 	andi	r18,r3,65535
   13ff8:	aca4b03a 	or	r18,r21,r18
   13ffc:	9080062e 	bgeu	r18,r2,14018 <__udivdi3+0x4e0>
   14000:	94e5883a 	add	r18,r18,r19
   14004:	b8bfffc4 	addi	r2,r23,-1
   14008:	94c04136 	bltu	r18,r19,14110 <__udivdi3+0x5d8>
   1400c:	9180402e 	bgeu	r18,r6,14110 <__udivdi3+0x5d8>
   14010:	bdffff84 	addi	r23,r23,-2
   14014:	94e5883a 	add	r18,r18,r19
   14018:	8004943a 	slli	r2,r16,16
   1401c:	bd7fffcc 	andi	r21,r23,65535
   14020:	b73fffcc 	andi	fp,r22,65535
   14024:	15e0b03a 	or	r16,r2,r23
   14028:	8026d43a 	srli	r19,r16,16
   1402c:	a809883a 	mov	r4,r21
   14030:	e00b883a 	mov	r5,fp
   14034:	91a5c83a 	sub	r18,r18,r6
   14038:	b02cd43a 	srli	r22,r22,16
   1403c:	000714c0 	call	714c <__mulsi3>
   14040:	9809883a 	mov	r4,r19
   14044:	e00b883a 	mov	r5,fp
   14048:	102f883a 	mov	r23,r2
   1404c:	000714c0 	call	714c <__mulsi3>
   14050:	9809883a 	mov	r4,r19
   14054:	b00b883a 	mov	r5,r22
   14058:	1027883a 	mov	r19,r2
   1405c:	000714c0 	call	714c <__mulsi3>
   14060:	a809883a 	mov	r4,r21
   14064:	b00b883a 	mov	r5,r22
   14068:	102b883a 	mov	r21,r2
   1406c:	000714c0 	call	714c <__mulsi3>
   14070:	b806d43a 	srli	r3,r23,16
   14074:	14c5883a 	add	r2,r2,r19
   14078:	1887883a 	add	r3,r3,r2
   1407c:	1cc0022e 	bgeu	r3,r19,14088 <__udivdi3+0x550>
   14080:	00800074 	movhi	r2,1
   14084:	a8ab883a 	add	r21,r21,r2
   14088:	1804d43a 	srli	r2,r3,16
   1408c:	156b883a 	add	r21,r2,r21
   14090:	95400936 	bltu	r18,r21,140b8 <__udivdi3+0x580>
   14094:	95400326 	beq	r18,r21,140a4 <__udivdi3+0x56c>
   14098:	8005883a 	mov	r2,r16
   1409c:	0007883a 	mov	r3,zero
   140a0:	003efc06 	br	13c94 <__udivdi3+0x15c>
   140a4:	1806943a 	slli	r3,r3,16
   140a8:	a44c983a 	sll	r6,r20,r17
   140ac:	bdffffcc 	andi	r23,r23,65535
   140b0:	1dc7883a 	add	r3,r3,r23
   140b4:	30fff82e 	bgeu	r6,r3,14098 <__udivdi3+0x560>
   140b8:	80bfffc4 	addi	r2,r16,-1
   140bc:	0007883a 	mov	r3,zero
   140c0:	003ef406 	br	13c94 <__udivdi3+0x15c>
   140c4:	3804d43a 	srli	r2,r7,16
   140c8:	01000404 	movi	r4,16
   140cc:	003f0306 	br	13cdc <__udivdi3+0x1a4>
   140d0:	3007883a 	mov	r3,r6
   140d4:	003eb106 	br	13b9c <__udivdi3+0x64>
   140d8:	0007883a 	mov	r3,zero
   140dc:	00800044 	movi	r2,1
   140e0:	003eec06 	br	13c94 <__udivdi3+0x15c>
   140e4:	3805883a 	mov	r2,r7
   140e8:	0009883a 	mov	r4,zero
   140ec:	003efb06 	br	13cdc <__udivdi3+0x1a4>
   140f0:	8006d43a 	srli	r3,r16,16
   140f4:	04400404 	movi	r17,16
   140f8:	003f0e06 	br	13d34 <__udivdi3+0x1fc>
   140fc:	3006d43a 	srli	r3,r6,16
   14100:	04400404 	movi	r17,16
   14104:	003ea506 	br	13b9c <__udivdi3+0x64>
   14108:	8007883a 	mov	r3,r16
   1410c:	003f0906 	br	13d34 <__udivdi3+0x1fc>
   14110:	102f883a 	mov	r23,r2
   14114:	003fc006 	br	14018 <__udivdi3+0x4e0>
   14118:	1839883a 	mov	fp,r3
   1411c:	003f8206 	br	13f28 <__udivdi3+0x3f0>
   14120:	2821883a 	mov	r16,r5
   14124:	003fa406 	br	13fb8 <__udivdi3+0x480>
   14128:	182f883a 	mov	r23,r3
   1412c:	003f6806 	br	13ed0 <__udivdi3+0x398>
   14130:	94bfff84 	addi	r18,r18,-2
   14134:	003f3706 	br	13e14 <__udivdi3+0x2dc>
   14138:	94bfff84 	addi	r18,r18,-2
   1413c:	003ece06 	br	13c78 <__udivdi3+0x140>
   14140:	ad7fff84 	addi	r21,r21,-2
   14144:	2409883a 	add	r4,r4,r16
   14148:	003eb606 	br	13c24 <__udivdi3+0xec>
   1414c:	ad7fff84 	addi	r21,r21,-2
   14150:	2409883a 	add	r4,r4,r16
   14154:	003f1806 	br	13db8 <__udivdi3+0x280>

00014158 <__umoddi3>:
   14158:	defff304 	addi	sp,sp,-52
   1415c:	dc400415 	stw	r17,16(sp)
   14160:	dc000315 	stw	r16,12(sp)
   14164:	dfc00c15 	stw	ra,48(sp)
   14168:	df000b15 	stw	fp,44(sp)
   1416c:	ddc00a15 	stw	r23,40(sp)
   14170:	dd800915 	stw	r22,36(sp)
   14174:	dd400815 	stw	r21,32(sp)
   14178:	dd000715 	stw	r20,28(sp)
   1417c:	dcc00615 	stw	r19,24(sp)
   14180:	dc800515 	stw	r18,20(sp)
   14184:	2823883a 	mov	r17,r5
   14188:	2021883a 	mov	r16,r4
   1418c:	38003b1e 	bne	r7,zero,1427c <__umoddi3+0x124>
   14190:	3825883a 	mov	r18,r7
   14194:	3029883a 	mov	r20,r6
   14198:	2027883a 	mov	r19,r4
   1419c:	29805b2e 	bgeu	r5,r6,1430c <__umoddi3+0x1b4>
   141a0:	00bfffd4 	movui	r2,65535
   141a4:	282d883a 	mov	r22,r5
   141a8:	11809a2e 	bgeu	r2,r6,14414 <__umoddi3+0x2bc>
   141ac:	00804034 	movhi	r2,256
   141b0:	30814436 	bltu	r6,r2,146c4 <__umoddi3+0x56c>
   141b4:	3006d63a 	srli	r3,r6,24
   141b8:	04800604 	movi	r18,24
   141bc:	00800074 	movhi	r2,1
   141c0:	1885883a 	add	r2,r3,r2
   141c4:	109e5f03 	ldbu	r2,31100(r2)
   141c8:	00c00804 	movi	r3,32
   141cc:	1485883a 	add	r2,r2,r18
   141d0:	18a5c83a 	sub	r18,r3,r2
   141d4:	18800526 	beq	r3,r2,141ec <__umoddi3+0x94>
   141d8:	8ca2983a 	sll	r17,r17,r18
   141dc:	8084d83a 	srl	r2,r16,r2
   141e0:	34a8983a 	sll	r20,r6,r18
   141e4:	84a6983a 	sll	r19,r16,r18
   141e8:	146cb03a 	or	r22,r2,r17
   141ec:	a02ed43a 	srli	r23,r20,16
   141f0:	b009883a 	mov	r4,r22
   141f4:	a57fffcc 	andi	r21,r20,65535
   141f8:	b80b883a 	mov	r5,r23
   141fc:	00070f00 	call	70f0 <__umodsi3>
   14200:	b80b883a 	mov	r5,r23
   14204:	b009883a 	mov	r4,r22
   14208:	1023883a 	mov	r17,r2
   1420c:	000708c0 	call	708c <__udivsi3>
   14210:	a809883a 	mov	r4,r21
   14214:	100b883a 	mov	r5,r2
   14218:	000714c0 	call	714c <__mulsi3>
   1421c:	8822943a 	slli	r17,r17,16
   14220:	9808d43a 	srli	r4,r19,16
   14224:	8908b03a 	or	r4,r17,r4
   14228:	2080042e 	bgeu	r4,r2,1423c <__umoddi3+0xe4>
   1422c:	2509883a 	add	r4,r4,r20
   14230:	25000236 	bltu	r4,r20,1423c <__umoddi3+0xe4>
   14234:	2080012e 	bgeu	r4,r2,1423c <__umoddi3+0xe4>
   14238:	2509883a 	add	r4,r4,r20
   1423c:	20a1c83a 	sub	r16,r4,r2
   14240:	b80b883a 	mov	r5,r23
   14244:	8009883a 	mov	r4,r16
   14248:	00070f00 	call	70f0 <__umodsi3>
   1424c:	b80b883a 	mov	r5,r23
   14250:	8009883a 	mov	r4,r16
   14254:	1023883a 	mov	r17,r2
   14258:	000708c0 	call	708c <__udivsi3>
   1425c:	8822943a 	slli	r17,r17,16
   14260:	100b883a 	mov	r5,r2
   14264:	a809883a 	mov	r4,r21
   14268:	000714c0 	call	714c <__mulsi3>
   1426c:	98ffffcc 	andi	r3,r19,65535
   14270:	88c6b03a 	or	r3,r17,r3
   14274:	18805e2e 	bgeu	r3,r2,143f0 <__umoddi3+0x298>
   14278:	00005906 	br	143e0 <__umoddi3+0x288>
   1427c:	2005883a 	mov	r2,r4
   14280:	29c00d2e 	bgeu	r5,r7,142b8 <__umoddi3+0x160>
   14284:	2807883a 	mov	r3,r5
   14288:	dfc00c17 	ldw	ra,48(sp)
   1428c:	df000b17 	ldw	fp,44(sp)
   14290:	ddc00a17 	ldw	r23,40(sp)
   14294:	dd800917 	ldw	r22,36(sp)
   14298:	dd400817 	ldw	r21,32(sp)
   1429c:	dd000717 	ldw	r20,28(sp)
   142a0:	dcc00617 	ldw	r19,24(sp)
   142a4:	dc800517 	ldw	r18,20(sp)
   142a8:	dc400417 	ldw	r17,16(sp)
   142ac:	dc000317 	ldw	r16,12(sp)
   142b0:	dec00d04 	addi	sp,sp,52
   142b4:	f800283a 	ret
   142b8:	013fffd4 	movui	r4,65535
   142bc:	2807883a 	mov	r3,r5
   142c0:	21c0592e 	bgeu	r4,r7,14428 <__umoddi3+0x2d0>
   142c4:	01004034 	movhi	r4,256
   142c8:	39010336 	bltu	r7,r4,146d8 <__umoddi3+0x580>
   142cc:	3808d63a 	srli	r4,r7,24
   142d0:	02000604 	movi	r8,24
   142d4:	01400074 	movhi	r5,1
   142d8:	214b883a 	add	r5,r4,r5
   142dc:	2d1e5f03 	ldbu	r20,31100(r5)
   142e0:	01000804 	movi	r4,32
   142e4:	a229883a 	add	r20,r20,r8
   142e8:	252bc83a 	sub	r21,r4,r20
   142ec:	2500531e 	bne	r4,r20,1443c <__umoddi3+0x2e4>
   142f0:	3c400136 	bltu	r7,r17,142f8 <__umoddi3+0x1a0>
   142f4:	81bfe436 	bltu	r16,r6,14288 <__umoddi3+0x130>
   142f8:	8185c83a 	sub	r2,r16,r6
   142fc:	89cfc83a 	sub	r7,r17,r7
   14300:	8087803a 	cmpltu	r3,r16,r2
   14304:	38c7c83a 	sub	r3,r7,r3
   14308:	003fdf06 	br	14288 <__umoddi3+0x130>
   1430c:	3000041e 	bne	r6,zero,14320 <__umoddi3+0x1c8>
   14310:	000b883a 	mov	r5,zero
   14314:	01000044 	movi	r4,1
   14318:	000708c0 	call	708c <__udivsi3>
   1431c:	1029883a 	mov	r20,r2
   14320:	00bfffd4 	movui	r2,65535
   14324:	1500362e 	bgeu	r2,r20,14400 <__umoddi3+0x2a8>
   14328:	00804034 	movhi	r2,256
   1432c:	a080ed36 	bltu	r20,r2,146e4 <__umoddi3+0x58c>
   14330:	a006d63a 	srli	r3,r20,24
   14334:	04800604 	movi	r18,24
   14338:	00800074 	movhi	r2,1
   1433c:	1885883a 	add	r2,r3,r2
   14340:	159e5f03 	ldbu	r22,31100(r2)
   14344:	00800804 	movi	r2,32
   14348:	b4ad883a 	add	r22,r22,r18
   1434c:	15a5c83a 	sub	r18,r2,r22
   14350:	1580a51e 	bne	r2,r22,145e8 <__umoddi3+0x490>
   14354:	a02ed43a 	srli	r23,r20,16
   14358:	8d23c83a 	sub	r17,r17,r20
   1435c:	a57fffcc 	andi	r21,r20,65535
   14360:	8809883a 	mov	r4,r17
   14364:	b80b883a 	mov	r5,r23
   14368:	00070f00 	call	70f0 <__umodsi3>
   1436c:	8809883a 	mov	r4,r17
   14370:	b80b883a 	mov	r5,r23
   14374:	1023883a 	mov	r17,r2
   14378:	000708c0 	call	708c <__udivsi3>
   1437c:	1009883a 	mov	r4,r2
   14380:	a80b883a 	mov	r5,r21
   14384:	000714c0 	call	714c <__mulsi3>
   14388:	8822943a 	slli	r17,r17,16
   1438c:	9808d43a 	srli	r4,r19,16
   14390:	8908b03a 	or	r4,r17,r4
   14394:	2080032e 	bgeu	r4,r2,143a4 <__umoddi3+0x24c>
   14398:	2509883a 	add	r4,r4,r20
   1439c:	25000136 	bltu	r4,r20,143a4 <__umoddi3+0x24c>
   143a0:	2080dc36 	bltu	r4,r2,14714 <__umoddi3+0x5bc>
   143a4:	20a1c83a 	sub	r16,r4,r2
   143a8:	b80b883a 	mov	r5,r23
   143ac:	8009883a 	mov	r4,r16
   143b0:	00070f00 	call	70f0 <__umodsi3>
   143b4:	b80b883a 	mov	r5,r23
   143b8:	8009883a 	mov	r4,r16
   143bc:	1023883a 	mov	r17,r2
   143c0:	8822943a 	slli	r17,r17,16
   143c4:	000708c0 	call	708c <__udivsi3>
   143c8:	a80b883a 	mov	r5,r21
   143cc:	1009883a 	mov	r4,r2
   143d0:	000714c0 	call	714c <__mulsi3>
   143d4:	9cffffcc 	andi	r19,r19,65535
   143d8:	8cc6b03a 	or	r3,r17,r19
   143dc:	1880042e 	bgeu	r3,r2,143f0 <__umoddi3+0x298>
   143e0:	1d07883a 	add	r3,r3,r20
   143e4:	1d000236 	bltu	r3,r20,143f0 <__umoddi3+0x298>
   143e8:	1880012e 	bgeu	r3,r2,143f0 <__umoddi3+0x298>
   143ec:	1d07883a 	add	r3,r3,r20
   143f0:	1885c83a 	sub	r2,r3,r2
   143f4:	1484d83a 	srl	r2,r2,r18
   143f8:	0007883a 	mov	r3,zero
   143fc:	003fa206 	br	14288 <__umoddi3+0x130>
   14400:	a0804030 	cmpltui	r2,r20,256
   14404:	1000ba1e 	bne	r2,zero,146f0 <__umoddi3+0x598>
   14408:	a006d23a 	srli	r3,r20,8
   1440c:	04800204 	movi	r18,8
   14410:	003fc906 	br	14338 <__umoddi3+0x1e0>
   14414:	30804030 	cmpltui	r2,r6,256
   14418:	1000ad1e 	bne	r2,zero,146d0 <__umoddi3+0x578>
   1441c:	3006d23a 	srli	r3,r6,8
   14420:	04800204 	movi	r18,8
   14424:	003f6506 	br	141bc <__umoddi3+0x64>
   14428:	39004030 	cmpltui	r4,r7,256
   1442c:	2000b21e 	bne	r4,zero,146f8 <__umoddi3+0x5a0>
   14430:	3808d23a 	srli	r4,r7,8
   14434:	02000204 	movi	r8,8
   14438:	003fa606 	br	142d4 <__umoddi3+0x17c>
   1443c:	3d4e983a 	sll	r7,r7,r21
   14440:	3508d83a 	srl	r4,r6,r20
   14444:	8d2cd83a 	srl	r22,r17,r20
   14448:	8504d83a 	srl	r2,r16,r20
   1444c:	21e4b03a 	or	r18,r4,r7
   14450:	8d62983a 	sll	r17,r17,r21
   14454:	9026d43a 	srli	r19,r18,16
   14458:	354c983a 	sll	r6,r6,r21
   1445c:	1444b03a 	or	r2,r2,r17
   14460:	b009883a 	mov	r4,r22
   14464:	980b883a 	mov	r5,r19
   14468:	d9800115 	stw	r6,4(sp)
   1446c:	d8800015 	stw	r2,0(sp)
   14470:	00070f00 	call	70f0 <__umodsi3>
   14474:	980b883a 	mov	r5,r19
   14478:	b009883a 	mov	r4,r22
   1447c:	102f883a 	mov	r23,r2
   14480:	947fffcc 	andi	r17,r18,65535
   14484:	000708c0 	call	708c <__udivsi3>
   14488:	8809883a 	mov	r4,r17
   1448c:	100b883a 	mov	r5,r2
   14490:	1039883a 	mov	fp,r2
   14494:	000714c0 	call	714c <__mulsi3>
   14498:	d8c00017 	ldw	r3,0(sp)
   1449c:	b82e943a 	slli	r23,r23,16
   144a0:	8560983a 	sll	r16,r16,r21
   144a4:	1808d43a 	srli	r4,r3,16
   144a8:	b908b03a 	or	r4,r23,r4
   144ac:	2080062e 	bgeu	r4,r2,144c8 <__umoddi3+0x370>
   144b0:	2489883a 	add	r4,r4,r18
   144b4:	e17fffc4 	addi	r5,fp,-1
   144b8:	24809436 	bltu	r4,r18,1470c <__umoddi3+0x5b4>
   144bc:	2080932e 	bgeu	r4,r2,1470c <__umoddi3+0x5b4>
   144c0:	e73fff84 	addi	fp,fp,-2
   144c4:	2489883a 	add	r4,r4,r18
   144c8:	20adc83a 	sub	r22,r4,r2
   144cc:	980b883a 	mov	r5,r19
   144d0:	b009883a 	mov	r4,r22
   144d4:	00070f00 	call	70f0 <__umodsi3>
   144d8:	980b883a 	mov	r5,r19
   144dc:	b009883a 	mov	r4,r22
   144e0:	102f883a 	mov	r23,r2
   144e4:	000708c0 	call	708c <__udivsi3>
   144e8:	100b883a 	mov	r5,r2
   144ec:	8809883a 	mov	r4,r17
   144f0:	d8800215 	stw	r2,8(sp)
   144f4:	000714c0 	call	714c <__mulsi3>
   144f8:	d8c00017 	ldw	r3,0(sp)
   144fc:	b82e943a 	slli	r23,r23,16
   14500:	d9400217 	ldw	r5,8(sp)
   14504:	1c7fffcc 	andi	r17,r3,65535
   14508:	bc62b03a 	or	r17,r23,r17
   1450c:	8880062e 	bgeu	r17,r2,14528 <__umoddi3+0x3d0>
   14510:	8ca3883a 	add	r17,r17,r18
   14514:	28ffffc4 	addi	r3,r5,-1
   14518:	8c807a36 	bltu	r17,r18,14704 <__umoddi3+0x5ac>
   1451c:	8880792e 	bgeu	r17,r2,14704 <__umoddi3+0x5ac>
   14520:	297fff84 	addi	r5,r5,-2
   14524:	8ca3883a 	add	r17,r17,r18
   14528:	e02c943a 	slli	r22,fp,16
   1452c:	d9c00117 	ldw	r7,4(sp)
   14530:	29bfffcc 	andi	r6,r5,65535
   14534:	b16cb03a 	or	r22,r22,r5
   14538:	38ffffcc 	andi	r3,r7,65535
   1453c:	b02cd43a 	srli	r22,r22,16
   14540:	180b883a 	mov	r5,r3
   14544:	3009883a 	mov	r4,r6
   14548:	3838d43a 	srli	fp,r7,16
   1454c:	182f883a 	mov	r23,r3
   14550:	d9800015 	stw	r6,0(sp)
   14554:	88a3c83a 	sub	r17,r17,r2
   14558:	000714c0 	call	714c <__mulsi3>
   1455c:	b80b883a 	mov	r5,r23
   14560:	b009883a 	mov	r4,r22
   14564:	102f883a 	mov	r23,r2
   14568:	000714c0 	call	714c <__mulsi3>
   1456c:	e00b883a 	mov	r5,fp
   14570:	b009883a 	mov	r4,r22
   14574:	102d883a 	mov	r22,r2
   14578:	000714c0 	call	714c <__mulsi3>
   1457c:	d9800017 	ldw	r6,0(sp)
   14580:	e00b883a 	mov	r5,fp
   14584:	1039883a 	mov	fp,r2
   14588:	3009883a 	mov	r4,r6
   1458c:	000714c0 	call	714c <__mulsi3>
   14590:	b808d43a 	srli	r4,r23,16
   14594:	1585883a 	add	r2,r2,r22
   14598:	2089883a 	add	r4,r4,r2
   1459c:	2580022e 	bgeu	r4,r22,145a8 <__umoddi3+0x450>
   145a0:	00800074 	movhi	r2,1
   145a4:	e0b9883a 	add	fp,fp,r2
   145a8:	2006d43a 	srli	r3,r4,16
   145ac:	2008943a 	slli	r4,r4,16
   145b0:	bdffffcc 	andi	r23,r23,65535
   145b4:	1f07883a 	add	r3,r3,fp
   145b8:	25c9883a 	add	r4,r4,r23
   145bc:	88c03a36 	bltu	r17,r3,146a8 <__umoddi3+0x550>
   145c0:	88c03826 	beq	r17,r3,146a4 <__umoddi3+0x54c>
   145c4:	8109c83a 	sub	r4,r16,r4
   145c8:	8121803a 	cmpltu	r16,r16,r4
   145cc:	88c7c83a 	sub	r3,r17,r3
   145d0:	1c07c83a 	sub	r3,r3,r16
   145d4:	1d04983a 	sll	r2,r3,r20
   145d8:	2548d83a 	srl	r4,r4,r21
   145dc:	1d46d83a 	srl	r3,r3,r21
   145e0:	1104b03a 	or	r2,r2,r4
   145e4:	003f2806 	br	14288 <__umoddi3+0x130>
   145e8:	a4a8983a 	sll	r20,r20,r18
   145ec:	8da6d83a 	srl	r19,r17,r22
   145f0:	8ca2983a 	sll	r17,r17,r18
   145f4:	a02ed43a 	srli	r23,r20,16
   145f8:	9809883a 	mov	r4,r19
   145fc:	85acd83a 	srl	r22,r16,r22
   14600:	b80b883a 	mov	r5,r23
   14604:	00070f00 	call	70f0 <__umodsi3>
   14608:	9809883a 	mov	r4,r19
   1460c:	b80b883a 	mov	r5,r23
   14610:	b46cb03a 	or	r22,r22,r17
   14614:	a57fffcc 	andi	r21,r20,65535
   14618:	1023883a 	mov	r17,r2
   1461c:	000708c0 	call	708c <__udivsi3>
   14620:	a809883a 	mov	r4,r21
   14624:	100b883a 	mov	r5,r2
   14628:	000714c0 	call	714c <__mulsi3>
   1462c:	8822943a 	slli	r17,r17,16
   14630:	b008d43a 	srli	r4,r22,16
   14634:	84a6983a 	sll	r19,r16,r18
   14638:	8908b03a 	or	r4,r17,r4
   1463c:	2080042e 	bgeu	r4,r2,14650 <__umoddi3+0x4f8>
   14640:	2509883a 	add	r4,r4,r20
   14644:	25000236 	bltu	r4,r20,14650 <__umoddi3+0x4f8>
   14648:	2080012e 	bgeu	r4,r2,14650 <__umoddi3+0x4f8>
   1464c:	2509883a 	add	r4,r4,r20
   14650:	20a1c83a 	sub	r16,r4,r2
   14654:	8009883a 	mov	r4,r16
   14658:	b80b883a 	mov	r5,r23
   1465c:	00070f00 	call	70f0 <__umodsi3>
   14660:	8009883a 	mov	r4,r16
   14664:	1021883a 	mov	r16,r2
   14668:	b80b883a 	mov	r5,r23
   1466c:	8020943a 	slli	r16,r16,16
   14670:	000708c0 	call	708c <__udivsi3>
   14674:	100b883a 	mov	r5,r2
   14678:	a809883a 	mov	r4,r21
   1467c:	b47fffcc 	andi	r17,r22,65535
   14680:	000714c0 	call	714c <__mulsi3>
   14684:	8462b03a 	or	r17,r16,r17
   14688:	8880042e 	bgeu	r17,r2,1469c <__umoddi3+0x544>
   1468c:	8d23883a 	add	r17,r17,r20
   14690:	8d000236 	bltu	r17,r20,1469c <__umoddi3+0x544>
   14694:	8880012e 	bgeu	r17,r2,1469c <__umoddi3+0x544>
   14698:	8d23883a 	add	r17,r17,r20
   1469c:	88a3c83a 	sub	r17,r17,r2
   146a0:	003f2f06 	br	14360 <__umoddi3+0x208>
   146a4:	813fc72e 	bgeu	r16,r4,145c4 <__umoddi3+0x46c>
   146a8:	d8800117 	ldw	r2,4(sp)
   146ac:	20a7c83a 	sub	r19,r4,r2
   146b0:	24c9803a 	cmpltu	r4,r4,r19
   146b4:	2489883a 	add	r4,r4,r18
   146b8:	1907c83a 	sub	r3,r3,r4
   146bc:	9809883a 	mov	r4,r19
   146c0:	003fc006 	br	145c4 <__umoddi3+0x46c>
   146c4:	3006d43a 	srli	r3,r6,16
   146c8:	04800404 	movi	r18,16
   146cc:	003ebb06 	br	141bc <__umoddi3+0x64>
   146d0:	3007883a 	mov	r3,r6
   146d4:	003eb906 	br	141bc <__umoddi3+0x64>
   146d8:	3808d43a 	srli	r4,r7,16
   146dc:	02000404 	movi	r8,16
   146e0:	003efc06 	br	142d4 <__umoddi3+0x17c>
   146e4:	a006d43a 	srli	r3,r20,16
   146e8:	04800404 	movi	r18,16
   146ec:	003f1206 	br	14338 <__umoddi3+0x1e0>
   146f0:	a007883a 	mov	r3,r20
   146f4:	003f1006 	br	14338 <__umoddi3+0x1e0>
   146f8:	3809883a 	mov	r4,r7
   146fc:	0011883a 	mov	r8,zero
   14700:	003ef406 	br	142d4 <__umoddi3+0x17c>
   14704:	180b883a 	mov	r5,r3
   14708:	003f8706 	br	14528 <__umoddi3+0x3d0>
   1470c:	2839883a 	mov	fp,r5
   14710:	003f6d06 	br	144c8 <__umoddi3+0x370>
   14714:	2509883a 	add	r4,r4,r20
   14718:	003f2206 	br	143a4 <__umoddi3+0x24c>

0001471c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1471c:	defffe04 	addi	sp,sp,-8
   14720:	dfc00115 	stw	ra,4(sp)
   14724:	df000015 	stw	fp,0(sp)
   14728:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1472c:	d0a00917 	ldw	r2,-32732(gp)
   14730:	10000326 	beq	r2,zero,14740 <alt_get_errno+0x24>
   14734:	d0a00917 	ldw	r2,-32732(gp)
   14738:	103ee83a 	callr	r2
   1473c:	00000106 	br	14744 <alt_get_errno+0x28>
   14740:	d0a73504 	addi	r2,gp,-25388
}
   14744:	e037883a 	mov	sp,fp
   14748:	dfc00117 	ldw	ra,4(sp)
   1474c:	df000017 	ldw	fp,0(sp)
   14750:	dec00204 	addi	sp,sp,8
   14754:	f800283a 	ret

00014758 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   14758:	defffb04 	addi	sp,sp,-20
   1475c:	dfc00415 	stw	ra,16(sp)
   14760:	df000315 	stw	fp,12(sp)
   14764:	df000304 	addi	fp,sp,12
   14768:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1476c:	e0bffd17 	ldw	r2,-12(fp)
   14770:	10000916 	blt	r2,zero,14798 <close+0x40>
   14774:	e0fffd17 	ldw	r3,-12(fp)
   14778:	1805883a 	mov	r2,r3
   1477c:	1085883a 	add	r2,r2,r2
   14780:	10c5883a 	add	r2,r2,r3
   14784:	100490ba 	slli	r2,r2,2
   14788:	00c000b4 	movhi	r3,2
   1478c:	18e27704 	addi	r3,r3,-30244
   14790:	10c5883a 	add	r2,r2,r3
   14794:	00000106 	br	1479c <close+0x44>
   14798:	0005883a 	mov	r2,zero
   1479c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   147a0:	e0bfff17 	ldw	r2,-4(fp)
   147a4:	10001926 	beq	r2,zero,1480c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	10800017 	ldw	r2,0(r2)
   147b0:	10800417 	ldw	r2,16(r2)
   147b4:	10000626 	beq	r2,zero,147d0 <close+0x78>
   147b8:	e0bfff17 	ldw	r2,-4(fp)
   147bc:	10800017 	ldw	r2,0(r2)
   147c0:	10800417 	ldw	r2,16(r2)
   147c4:	e13fff17 	ldw	r4,-4(fp)
   147c8:	103ee83a 	callr	r2
   147cc:	00000106 	br	147d4 <close+0x7c>
   147d0:	0005883a 	mov	r2,zero
   147d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   147d8:	e13ffd17 	ldw	r4,-12(fp)
   147dc:	00150140 	call	15014 <alt_release_fd>
    if (rval < 0)
   147e0:	e0bffe17 	ldw	r2,-8(fp)
   147e4:	1000070e 	bge	r2,zero,14804 <close+0xac>
    {
      ALT_ERRNO = -rval;
   147e8:	001471c0 	call	1471c <alt_get_errno>
   147ec:	1007883a 	mov	r3,r2
   147f0:	e0bffe17 	ldw	r2,-8(fp)
   147f4:	0085c83a 	sub	r2,zero,r2
   147f8:	18800015 	stw	r2,0(r3)
      return -1;
   147fc:	00bfffc4 	movi	r2,-1
   14800:	00000706 	br	14820 <close+0xc8>
    }
    return 0;
   14804:	0005883a 	mov	r2,zero
   14808:	00000506 	br	14820 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1480c:	001471c0 	call	1471c <alt_get_errno>
   14810:	1007883a 	mov	r3,r2
   14814:	00801444 	movi	r2,81
   14818:	18800015 	stw	r2,0(r3)
    return -1;
   1481c:	00bfffc4 	movi	r2,-1
  }
}
   14820:	e037883a 	mov	sp,fp
   14824:	dfc00117 	ldw	ra,4(sp)
   14828:	df000017 	ldw	fp,0(sp)
   1482c:	dec00204 	addi	sp,sp,8
   14830:	f800283a 	ret

00014834 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   14834:	defffc04 	addi	sp,sp,-16
   14838:	df000315 	stw	fp,12(sp)
   1483c:	df000304 	addi	fp,sp,12
   14840:	e13fff15 	stw	r4,-4(fp)
   14844:	e17ffe15 	stw	r5,-8(fp)
   14848:	e1bffd15 	stw	r6,-12(fp)
  return len;
   1484c:	e0bffd17 	ldw	r2,-12(fp)
}
   14850:	e037883a 	mov	sp,fp
   14854:	df000017 	ldw	fp,0(sp)
   14858:	dec00104 	addi	sp,sp,4
   1485c:	f800283a 	ret

00014860 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14860:	defffd04 	addi	sp,sp,-12
   14864:	df000215 	stw	fp,8(sp)
   14868:	df000204 	addi	fp,sp,8
   1486c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14870:	0001883a 	nop
   14874:	e0bffe17 	ldw	r2,-8(fp)
   14878:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1487c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14880:	10000226 	beq	r2,zero,1488c <_exit+0x2c>
    ALT_SIM_FAIL();
   14884:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   14888:	00000106 	br	14890 <_exit+0x30>
    ALT_SIM_PASS();
   1488c:	002af0b0 	cmpltui	zero,zero,43970
}
   14890:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14894:	003fff06 	br	14894 <_exit+0x34>

00014898 <alt_get_errno>:
{
   14898:	defffe04 	addi	sp,sp,-8
   1489c:	dfc00115 	stw	ra,4(sp)
   148a0:	df000015 	stw	fp,0(sp)
   148a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   148a8:	d0a00917 	ldw	r2,-32732(gp)
   148ac:	10000326 	beq	r2,zero,148bc <alt_get_errno+0x24>
   148b0:	d0a00917 	ldw	r2,-32732(gp)
   148b4:	103ee83a 	callr	r2
   148b8:	00000106 	br	148c0 <alt_get_errno+0x28>
   148bc:	d0a73504 	addi	r2,gp,-25388
}
   148c0:	e037883a 	mov	sp,fp
   148c4:	dfc00117 	ldw	ra,4(sp)
   148c8:	df000017 	ldw	fp,0(sp)
   148cc:	dec00204 	addi	sp,sp,8
   148d0:	f800283a 	ret

000148d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   148d4:	defffb04 	addi	sp,sp,-20
   148d8:	dfc00415 	stw	ra,16(sp)
   148dc:	df000315 	stw	fp,12(sp)
   148e0:	df000304 	addi	fp,sp,12
   148e4:	e13ffe15 	stw	r4,-8(fp)
   148e8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   148ec:	e0bffe17 	ldw	r2,-8(fp)
   148f0:	10000916 	blt	r2,zero,14918 <fstat+0x44>
   148f4:	e0fffe17 	ldw	r3,-8(fp)
   148f8:	1805883a 	mov	r2,r3
   148fc:	1085883a 	add	r2,r2,r2
   14900:	10c5883a 	add	r2,r2,r3
   14904:	100490ba 	slli	r2,r2,2
   14908:	00c000b4 	movhi	r3,2
   1490c:	18e27704 	addi	r3,r3,-30244
   14910:	10c5883a 	add	r2,r2,r3
   14914:	00000106 	br	1491c <fstat+0x48>
   14918:	0005883a 	mov	r2,zero
   1491c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   14920:	e0bfff17 	ldw	r2,-4(fp)
   14924:	10001026 	beq	r2,zero,14968 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   14928:	e0bfff17 	ldw	r2,-4(fp)
   1492c:	10800017 	ldw	r2,0(r2)
   14930:	10800817 	ldw	r2,32(r2)
   14934:	10000726 	beq	r2,zero,14954 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   14938:	e0bfff17 	ldw	r2,-4(fp)
   1493c:	10800017 	ldw	r2,0(r2)
   14940:	10800817 	ldw	r2,32(r2)
   14944:	e17ffd17 	ldw	r5,-12(fp)
   14948:	e13fff17 	ldw	r4,-4(fp)
   1494c:	103ee83a 	callr	r2
   14950:	00000a06 	br	1497c <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   14954:	e0bffd17 	ldw	r2,-12(fp)
   14958:	00c80004 	movi	r3,8192
   1495c:	10c00115 	stw	r3,4(r2)
      return 0;
   14960:	0005883a 	mov	r2,zero
   14964:	00000506 	br	1497c <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14968:	00148980 	call	14898 <alt_get_errno>
   1496c:	1007883a 	mov	r3,r2
   14970:	00801444 	movi	r2,81
   14974:	18800015 	stw	r2,0(r3)
    return -1;
   14978:	00bfffc4 	movi	r2,-1
  }
}
   1497c:	e037883a 	mov	sp,fp
   14980:	dfc00117 	ldw	ra,4(sp)
   14984:	df000017 	ldw	fp,0(sp)
   14988:	dec00204 	addi	sp,sp,8
   1498c:	f800283a 	ret

00014990 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   14990:	deffff04 	addi	sp,sp,-4
   14994:	df000015 	stw	fp,0(sp)
   14998:	d839883a 	mov	fp,sp
  return 0;
   1499c:	0005883a 	mov	r2,zero
}
   149a0:	e037883a 	mov	sp,fp
   149a4:	df000017 	ldw	fp,0(sp)
   149a8:	dec00104 	addi	sp,sp,4
   149ac:	f800283a 	ret

000149b0 <alt_get_errno>:
{
   149b0:	defffe04 	addi	sp,sp,-8
   149b4:	dfc00115 	stw	ra,4(sp)
   149b8:	df000015 	stw	fp,0(sp)
   149bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   149c0:	d0a00917 	ldw	r2,-32732(gp)
   149c4:	10000326 	beq	r2,zero,149d4 <alt_get_errno+0x24>
   149c8:	d0a00917 	ldw	r2,-32732(gp)
   149cc:	103ee83a 	callr	r2
   149d0:	00000106 	br	149d8 <alt_get_errno+0x28>
   149d4:	d0a73504 	addi	r2,gp,-25388
}
   149d8:	e037883a 	mov	sp,fp
   149dc:	dfc00117 	ldw	ra,4(sp)
   149e0:	df000017 	ldw	fp,0(sp)
   149e4:	dec00204 	addi	sp,sp,8
   149e8:	f800283a 	ret

000149ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   149ec:	deffea04 	addi	sp,sp,-88
   149f0:	dfc01515 	stw	ra,84(sp)
   149f4:	df001415 	stw	fp,80(sp)
   149f8:	df001404 	addi	fp,sp,80
   149fc:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14a00:	e0bfec17 	ldw	r2,-80(fp)
   14a04:	10000916 	blt	r2,zero,14a2c <isatty+0x40>
   14a08:	e0ffec17 	ldw	r3,-80(fp)
   14a0c:	1805883a 	mov	r2,r3
   14a10:	1085883a 	add	r2,r2,r2
   14a14:	10c5883a 	add	r2,r2,r3
   14a18:	100490ba 	slli	r2,r2,2
   14a1c:	00c000b4 	movhi	r3,2
   14a20:	18e27704 	addi	r3,r3,-30244
   14a24:	10c5883a 	add	r2,r2,r3
   14a28:	00000106 	br	14a30 <isatty+0x44>
   14a2c:	0005883a 	mov	r2,zero
   14a30:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   14a34:	e0bfff17 	ldw	r2,-4(fp)
   14a38:	10000e26 	beq	r2,zero,14a74 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   14a3c:	e0bfff17 	ldw	r2,-4(fp)
   14a40:	10800017 	ldw	r2,0(r2)
   14a44:	10800817 	ldw	r2,32(r2)
   14a48:	1000021e 	bne	r2,zero,14a54 <isatty+0x68>
    {
      return 1;
   14a4c:	00800044 	movi	r2,1
   14a50:	00000d06 	br	14a88 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   14a54:	e0bfed04 	addi	r2,fp,-76
   14a58:	100b883a 	mov	r5,r2
   14a5c:	e13fec17 	ldw	r4,-80(fp)
   14a60:	00148d40 	call	148d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   14a64:	e0bfee17 	ldw	r2,-72(fp)
   14a68:	10880020 	cmpeqi	r2,r2,8192
   14a6c:	10803fcc 	andi	r2,r2,255
   14a70:	00000506 	br	14a88 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14a74:	00149b00 	call	149b0 <alt_get_errno>
   14a78:	1007883a 	mov	r3,r2
   14a7c:	00801444 	movi	r2,81
   14a80:	18800015 	stw	r2,0(r3)
    return 0;
   14a84:	0005883a 	mov	r2,zero
  }
}
   14a88:	e037883a 	mov	sp,fp
   14a8c:	dfc00117 	ldw	ra,4(sp)
   14a90:	df000017 	ldw	fp,0(sp)
   14a94:	dec00204 	addi	sp,sp,8
   14a98:	f800283a 	ret

00014a9c <alt_get_errno>:
{
   14a9c:	defffe04 	addi	sp,sp,-8
   14aa0:	dfc00115 	stw	ra,4(sp)
   14aa4:	df000015 	stw	fp,0(sp)
   14aa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14aac:	d0a00917 	ldw	r2,-32732(gp)
   14ab0:	10000326 	beq	r2,zero,14ac0 <alt_get_errno+0x24>
   14ab4:	d0a00917 	ldw	r2,-32732(gp)
   14ab8:	103ee83a 	callr	r2
   14abc:	00000106 	br	14ac4 <alt_get_errno+0x28>
   14ac0:	d0a73504 	addi	r2,gp,-25388
}
   14ac4:	e037883a 	mov	sp,fp
   14ac8:	dfc00117 	ldw	ra,4(sp)
   14acc:	df000017 	ldw	fp,0(sp)
   14ad0:	dec00204 	addi	sp,sp,8
   14ad4:	f800283a 	ret

00014ad8 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   14ad8:	defffb04 	addi	sp,sp,-20
   14adc:	dfc00415 	stw	ra,16(sp)
   14ae0:	df000315 	stw	fp,12(sp)
   14ae4:	df000304 	addi	fp,sp,12
   14ae8:	e13ffe15 	stw	r4,-8(fp)
   14aec:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   14af0:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   14af4:	e0bffe17 	ldw	r2,-8(fp)
   14af8:	00802e16 	blt	zero,r2,14bb4 <kill+0xdc>
  {
    switch (sig)
   14afc:	e0bffd17 	ldw	r2,-12(fp)
   14b00:	10800828 	cmpgeui	r2,r2,32
   14b04:	1000281e 	bne	r2,zero,14ba8 <kill+0xd0>
   14b08:	e0bffd17 	ldw	r2,-12(fp)
   14b0c:	100690ba 	slli	r3,r2,2
   14b10:	00800074 	movhi	r2,1
   14b14:	1885883a 	add	r2,r3,r2
   14b18:	1092c817 	ldw	r2,19232(r2)
   14b1c:	1000683a 	jmp	r2
   14b20:	00014bc8 	cmpgei	zero,zero,1327
   14b24:	00014ba8 	cmpgeui	zero,zero,1326
   14b28:	00014ba8 	cmpgeui	zero,zero,1326
   14b2c:	00014ba0 	cmpeqi	zero,zero,1326
   14b30:	00014ba0 	cmpeqi	zero,zero,1326
   14b34:	00014ba0 	cmpeqi	zero,zero,1326
   14b38:	00014ba0 	cmpeqi	zero,zero,1326
   14b3c:	00014ba8 	cmpgeui	zero,zero,1326
   14b40:	00014ba0 	cmpeqi	zero,zero,1326
   14b44:	00014ba0 	cmpeqi	zero,zero,1326
   14b48:	00014ba0 	cmpeqi	zero,zero,1326
   14b4c:	00014ba0 	cmpeqi	zero,zero,1326
   14b50:	00014ba0 	cmpeqi	zero,zero,1326
   14b54:	00014ba0 	cmpeqi	zero,zero,1326
   14b58:	00014ba0 	cmpeqi	zero,zero,1326
   14b5c:	00014ba0 	cmpeqi	zero,zero,1326
   14b60:	00014bc8 	cmpgei	zero,zero,1327
   14b64:	00014ba8 	cmpgeui	zero,zero,1326
   14b68:	00014ba8 	cmpgeui	zero,zero,1326
   14b6c:	00014ba8 	cmpgeui	zero,zero,1326
   14b70:	00014bc8 	cmpgei	zero,zero,1327
   14b74:	00014ba8 	cmpgeui	zero,zero,1326
   14b78:	00014ba8 	cmpgeui	zero,zero,1326
   14b7c:	00014ba0 	cmpeqi	zero,zero,1326
   14b80:	00014ba0 	cmpeqi	zero,zero,1326
   14b84:	00014ba0 	cmpeqi	zero,zero,1326
   14b88:	00014ba0 	cmpeqi	zero,zero,1326
   14b8c:	00014ba0 	cmpeqi	zero,zero,1326
   14b90:	00014ba8 	cmpgeui	zero,zero,1326
   14b94:	00014ba8 	cmpgeui	zero,zero,1326
   14b98:	00014ba0 	cmpeqi	zero,zero,1326
   14b9c:	00014ba0 	cmpeqi	zero,zero,1326
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   14ba0:	0009883a 	mov	r4,zero
   14ba4:	00148600 	call	14860 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   14ba8:	00800584 	movi	r2,22
   14bac:	e0bfff15 	stw	r2,-4(fp)
   14bb0:	00000606 	br	14bcc <kill+0xf4>
    }
  }

  else if (pid > 0)
   14bb4:	e0bffe17 	ldw	r2,-8(fp)
   14bb8:	0080040e 	bge	zero,r2,14bcc <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   14bbc:	008000c4 	movi	r2,3
   14bc0:	e0bfff15 	stw	r2,-4(fp)
   14bc4:	00000106 	br	14bcc <kill+0xf4>
      break;
   14bc8:	0001883a 	nop
  }

  if (status)
   14bcc:	e0bfff17 	ldw	r2,-4(fp)
   14bd0:	10000626 	beq	r2,zero,14bec <kill+0x114>
  {
    ALT_ERRNO = status;
   14bd4:	0014a9c0 	call	14a9c <alt_get_errno>
   14bd8:	1007883a 	mov	r3,r2
   14bdc:	e0bfff17 	ldw	r2,-4(fp)
   14be0:	18800015 	stw	r2,0(r3)
    return -1;
   14be4:	00bfffc4 	movi	r2,-1
   14be8:	00000106 	br	14bf0 <kill+0x118>
  }

  return 0;
   14bec:	0005883a 	mov	r2,zero
}
   14bf0:	e037883a 	mov	sp,fp
   14bf4:	dfc00117 	ldw	ra,4(sp)
   14bf8:	df000017 	ldw	fp,0(sp)
   14bfc:	dec00204 	addi	sp,sp,8
   14c00:	f800283a 	ret

00014c04 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14c04:	defffc04 	addi	sp,sp,-16
   14c08:	df000315 	stw	fp,12(sp)
   14c0c:	df000304 	addi	fp,sp,12
   14c10:	e13fff15 	stw	r4,-4(fp)
   14c14:	e17ffe15 	stw	r5,-8(fp)
   14c18:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   14c1c:	e0fffe17 	ldw	r3,-8(fp)
   14c20:	e0bfff17 	ldw	r2,-4(fp)
   14c24:	18800c26 	beq	r3,r2,14c58 <alt_load_section+0x54>
  {
    while( to != end )
   14c28:	00000806 	br	14c4c <alt_load_section+0x48>
    {
      *to++ = *from++;
   14c2c:	e0ffff17 	ldw	r3,-4(fp)
   14c30:	18800104 	addi	r2,r3,4
   14c34:	e0bfff15 	stw	r2,-4(fp)
   14c38:	e0bffe17 	ldw	r2,-8(fp)
   14c3c:	11000104 	addi	r4,r2,4
   14c40:	e13ffe15 	stw	r4,-8(fp)
   14c44:	18c00017 	ldw	r3,0(r3)
   14c48:	10c00015 	stw	r3,0(r2)
    while( to != end )
   14c4c:	e0fffe17 	ldw	r3,-8(fp)
   14c50:	e0bffd17 	ldw	r2,-12(fp)
   14c54:	18bff51e 	bne	r3,r2,14c2c <alt_load_section+0x28>
    }
  }
}
   14c58:	0001883a 	nop
   14c5c:	e037883a 	mov	sp,fp
   14c60:	df000017 	ldw	fp,0(sp)
   14c64:	dec00104 	addi	sp,sp,4
   14c68:	f800283a 	ret

00014c6c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   14c6c:	defffe04 	addi	sp,sp,-8
   14c70:	dfc00115 	stw	ra,4(sp)
   14c74:	df000015 	stw	fp,0(sp)
   14c78:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   14c7c:	018000b4 	movhi	r6,2
   14c80:	31a72b04 	addi	r6,r6,-25428
   14c84:	014000b4 	movhi	r5,2
   14c88:	29600704 	addi	r5,r5,-32740
   14c8c:	010000b4 	movhi	r4,2
   14c90:	21272b04 	addi	r4,r4,-25428
   14c94:	0014c040 	call	14c04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   14c98:	01800034 	movhi	r6,0
   14c9c:	31808a04 	addi	r6,r6,552
   14ca0:	01400034 	movhi	r5,0
   14ca4:	29400804 	addi	r5,r5,32
   14ca8:	01000034 	movhi	r4,0
   14cac:	21000804 	addi	r4,r4,32
   14cb0:	0014c040 	call	14c04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14cb4:	018000b4 	movhi	r6,2
   14cb8:	31a00704 	addi	r6,r6,-32740
   14cbc:	01400074 	movhi	r5,1
   14cc0:	295dd804 	addi	r5,r5,30560
   14cc4:	01000074 	movhi	r4,1
   14cc8:	211dd804 	addi	r4,r4,30560
   14ccc:	0014c040 	call	14c04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14cd0:	00168e00 	call	168e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14cd4:	0016b3c0 	call	16b3c <alt_icache_flush_all>
}
   14cd8:	0001883a 	nop
   14cdc:	e037883a 	mov	sp,fp
   14ce0:	dfc00117 	ldw	ra,4(sp)
   14ce4:	df000017 	ldw	fp,0(sp)
   14ce8:	dec00204 	addi	sp,sp,8
   14cec:	f800283a 	ret

00014cf0 <alt_get_errno>:
{
   14cf0:	defffe04 	addi	sp,sp,-8
   14cf4:	dfc00115 	stw	ra,4(sp)
   14cf8:	df000015 	stw	fp,0(sp)
   14cfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14d00:	d0a00917 	ldw	r2,-32732(gp)
   14d04:	10000326 	beq	r2,zero,14d14 <alt_get_errno+0x24>
   14d08:	d0a00917 	ldw	r2,-32732(gp)
   14d0c:	103ee83a 	callr	r2
   14d10:	00000106 	br	14d18 <alt_get_errno+0x28>
   14d14:	d0a73504 	addi	r2,gp,-25388
}
   14d18:	e037883a 	mov	sp,fp
   14d1c:	dfc00117 	ldw	ra,4(sp)
   14d20:	df000017 	ldw	fp,0(sp)
   14d24:	dec00204 	addi	sp,sp,8
   14d28:	f800283a 	ret

00014d2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14d2c:	defff904 	addi	sp,sp,-28
   14d30:	dfc00615 	stw	ra,24(sp)
   14d34:	df000515 	stw	fp,20(sp)
   14d38:	df000504 	addi	fp,sp,20
   14d3c:	e13ffd15 	stw	r4,-12(fp)
   14d40:	e17ffc15 	stw	r5,-16(fp)
   14d44:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   14d48:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14d4c:	e0bffd17 	ldw	r2,-12(fp)
   14d50:	10000916 	blt	r2,zero,14d78 <lseek+0x4c>
   14d54:	e0fffd17 	ldw	r3,-12(fp)
   14d58:	1805883a 	mov	r2,r3
   14d5c:	1085883a 	add	r2,r2,r2
   14d60:	10c5883a 	add	r2,r2,r3
   14d64:	100490ba 	slli	r2,r2,2
   14d68:	00c000b4 	movhi	r3,2
   14d6c:	18e27704 	addi	r3,r3,-30244
   14d70:	10c5883a 	add	r2,r2,r3
   14d74:	00000106 	br	14d7c <lseek+0x50>
   14d78:	0005883a 	mov	r2,zero
   14d7c:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   14d80:	e0bffe17 	ldw	r2,-8(fp)
   14d84:	10001026 	beq	r2,zero,14dc8 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14d88:	e0bffe17 	ldw	r2,-8(fp)
   14d8c:	10800017 	ldw	r2,0(r2)
   14d90:	10800717 	ldw	r2,28(r2)
   14d94:	10000926 	beq	r2,zero,14dbc <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14d98:	e0bffe17 	ldw	r2,-8(fp)
   14d9c:	10800017 	ldw	r2,0(r2)
   14da0:	10800717 	ldw	r2,28(r2)
   14da4:	e1bffb17 	ldw	r6,-20(fp)
   14da8:	e17ffc17 	ldw	r5,-16(fp)
   14dac:	e13ffe17 	ldw	r4,-8(fp)
   14db0:	103ee83a 	callr	r2
   14db4:	e0bfff15 	stw	r2,-4(fp)
   14db8:	00000506 	br	14dd0 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14dbc:	00bfde84 	movi	r2,-134
   14dc0:	e0bfff15 	stw	r2,-4(fp)
   14dc4:	00000206 	br	14dd0 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   14dc8:	00bfebc4 	movi	r2,-81
   14dcc:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   14dd0:	e0bfff17 	ldw	r2,-4(fp)
   14dd4:	1000070e 	bge	r2,zero,14df4 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   14dd8:	0014cf00 	call	14cf0 <alt_get_errno>
   14ddc:	1007883a 	mov	r3,r2
   14de0:	e0bfff17 	ldw	r2,-4(fp)
   14de4:	0085c83a 	sub	r2,zero,r2
   14de8:	18800015 	stw	r2,0(r3)
    rc = -1;
   14dec:	00bfffc4 	movi	r2,-1
   14df0:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   14df4:	e0bfff17 	ldw	r2,-4(fp)
}
   14df8:	e037883a 	mov	sp,fp
   14dfc:	dfc00117 	ldw	ra,4(sp)
   14e00:	df000017 	ldw	fp,0(sp)
   14e04:	dec00204 	addi	sp,sp,8
   14e08:	f800283a 	ret

00014e0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14e0c:	defffd04 	addi	sp,sp,-12
   14e10:	dfc00215 	stw	ra,8(sp)
   14e14:	df000115 	stw	fp,4(sp)
   14e18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14e1c:	0009883a 	mov	r4,zero
   14e20:	00152b00 	call	152b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14e24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14e28:	00152ec0 	call	152ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14e2c:	01800074 	movhi	r6,1
   14e30:	319fea04 	addi	r6,r6,32680
   14e34:	01400074 	movhi	r5,1
   14e38:	295fea04 	addi	r5,r5,32680
   14e3c:	01000074 	movhi	r4,1
   14e40:	211fea04 	addi	r4,r4,32680
   14e44:	0016c300 	call	16c30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14e48:	00169e40 	call	169e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14e4c:	01000074 	movhi	r4,1
   14e50:	211a9204 	addi	r4,r4,27208
   14e54:	00174f00 	call	174f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14e58:	d0a73717 	ldw	r2,-25380(gp)
   14e5c:	d0e73817 	ldw	r3,-25376(gp)
   14e60:	d1273917 	ldw	r4,-25372(gp)
   14e64:	200d883a 	mov	r6,r4
   14e68:	180b883a 	mov	r5,r3
   14e6c:	1009883a 	mov	r4,r2
   14e70:	0001e0c0 	call	1e0c <main>
   14e74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14e78:	01000044 	movi	r4,1
   14e7c:	00147580 	call	14758 <close>
  exit (result);
   14e80:	e13fff17 	ldw	r4,-4(fp)
   14e84:	00175040 	call	17504 <exit>

00014e88 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14e88:	defffe04 	addi	sp,sp,-8
   14e8c:	df000115 	stw	fp,4(sp)
   14e90:	df000104 	addi	fp,sp,4
   14e94:	e13fff15 	stw	r4,-4(fp)
}
   14e98:	0001883a 	nop
   14e9c:	e037883a 	mov	sp,fp
   14ea0:	df000017 	ldw	fp,0(sp)
   14ea4:	dec00104 	addi	sp,sp,4
   14ea8:	f800283a 	ret

00014eac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14eac:	defffe04 	addi	sp,sp,-8
   14eb0:	df000115 	stw	fp,4(sp)
   14eb4:	df000104 	addi	fp,sp,4
   14eb8:	e13fff15 	stw	r4,-4(fp)
}
   14ebc:	0001883a 	nop
   14ec0:	e037883a 	mov	sp,fp
   14ec4:	df000017 	ldw	fp,0(sp)
   14ec8:	dec00104 	addi	sp,sp,4
   14ecc:	f800283a 	ret

00014ed0 <alt_get_errno>:
{
   14ed0:	defffe04 	addi	sp,sp,-8
   14ed4:	dfc00115 	stw	ra,4(sp)
   14ed8:	df000015 	stw	fp,0(sp)
   14edc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14ee0:	d0a00917 	ldw	r2,-32732(gp)
   14ee4:	10000326 	beq	r2,zero,14ef4 <alt_get_errno+0x24>
   14ee8:	d0a00917 	ldw	r2,-32732(gp)
   14eec:	103ee83a 	callr	r2
   14ef0:	00000106 	br	14ef8 <alt_get_errno+0x28>
   14ef4:	d0a73504 	addi	r2,gp,-25388
}
   14ef8:	e037883a 	mov	sp,fp
   14efc:	dfc00117 	ldw	ra,4(sp)
   14f00:	df000017 	ldw	fp,0(sp)
   14f04:	dec00204 	addi	sp,sp,8
   14f08:	f800283a 	ret

00014f0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   14f0c:	defff904 	addi	sp,sp,-28
   14f10:	dfc00615 	stw	ra,24(sp)
   14f14:	df000515 	stw	fp,20(sp)
   14f18:	df000504 	addi	fp,sp,20
   14f1c:	e13ffd15 	stw	r4,-12(fp)
   14f20:	e17ffc15 	stw	r5,-16(fp)
   14f24:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14f28:	e0bffd17 	ldw	r2,-12(fp)
   14f2c:	10000916 	blt	r2,zero,14f54 <read+0x48>
   14f30:	e0fffd17 	ldw	r3,-12(fp)
   14f34:	1805883a 	mov	r2,r3
   14f38:	1085883a 	add	r2,r2,r2
   14f3c:	10c5883a 	add	r2,r2,r3
   14f40:	100490ba 	slli	r2,r2,2
   14f44:	00c000b4 	movhi	r3,2
   14f48:	18e27704 	addi	r3,r3,-30244
   14f4c:	10c5883a 	add	r2,r2,r3
   14f50:	00000106 	br	14f58 <read+0x4c>
   14f54:	0005883a 	mov	r2,zero
   14f58:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   14f5c:	e0bfff17 	ldw	r2,-4(fp)
   14f60:	10002226 	beq	r2,zero,14fec <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14f64:	e0bfff17 	ldw	r2,-4(fp)
   14f68:	10800217 	ldw	r2,8(r2)
   14f6c:	108000cc 	andi	r2,r2,3
   14f70:	10800060 	cmpeqi	r2,r2,1
   14f74:	1000181e 	bne	r2,zero,14fd8 <read+0xcc>
        (fd->dev->read))
   14f78:	e0bfff17 	ldw	r2,-4(fp)
   14f7c:	10800017 	ldw	r2,0(r2)
   14f80:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   14f84:	10001426 	beq	r2,zero,14fd8 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   14f88:	e0bfff17 	ldw	r2,-4(fp)
   14f8c:	10800017 	ldw	r2,0(r2)
   14f90:	10800517 	ldw	r2,20(r2)
   14f94:	e0fffb17 	ldw	r3,-20(fp)
   14f98:	180d883a 	mov	r6,r3
   14f9c:	e17ffc17 	ldw	r5,-16(fp)
   14fa0:	e13fff17 	ldw	r4,-4(fp)
   14fa4:	103ee83a 	callr	r2
   14fa8:	e0bffe15 	stw	r2,-8(fp)
   14fac:	e0bffe17 	ldw	r2,-8(fp)
   14fb0:	1000070e 	bge	r2,zero,14fd0 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   14fb4:	0014ed00 	call	14ed0 <alt_get_errno>
   14fb8:	1007883a 	mov	r3,r2
   14fbc:	e0bffe17 	ldw	r2,-8(fp)
   14fc0:	0085c83a 	sub	r2,zero,r2
   14fc4:	18800015 	stw	r2,0(r3)
          return -1;
   14fc8:	00bfffc4 	movi	r2,-1
   14fcc:	00000c06 	br	15000 <read+0xf4>
        }
        return rval;
   14fd0:	e0bffe17 	ldw	r2,-8(fp)
   14fd4:	00000a06 	br	15000 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   14fd8:	0014ed00 	call	14ed0 <alt_get_errno>
   14fdc:	1007883a 	mov	r3,r2
   14fe0:	00800344 	movi	r2,13
   14fe4:	18800015 	stw	r2,0(r3)
   14fe8:	00000406 	br	14ffc <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   14fec:	0014ed00 	call	14ed0 <alt_get_errno>
   14ff0:	1007883a 	mov	r3,r2
   14ff4:	00801444 	movi	r2,81
   14ff8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14ffc:	00bfffc4 	movi	r2,-1
}
   15000:	e037883a 	mov	sp,fp
   15004:	dfc00117 	ldw	ra,4(sp)
   15008:	df000017 	ldw	fp,0(sp)
   1500c:	dec00204 	addi	sp,sp,8
   15010:	f800283a 	ret

00015014 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   15014:	defffe04 	addi	sp,sp,-8
   15018:	df000115 	stw	fp,4(sp)
   1501c:	df000104 	addi	fp,sp,4
   15020:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   15024:	e0bfff17 	ldw	r2,-4(fp)
   15028:	108000d0 	cmplti	r2,r2,3
   1502c:	1000101e 	bne	r2,zero,15070 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   15030:	e0ffff17 	ldw	r3,-4(fp)
   15034:	1805883a 	mov	r2,r3
   15038:	1085883a 	add	r2,r2,r2
   1503c:	10c5883a 	add	r2,r2,r3
   15040:	100490ba 	slli	r2,r2,2
   15044:	00c000b4 	movhi	r3,2
   15048:	10c7883a 	add	r3,r2,r3
   1504c:	18227915 	stw	zero,-30236(r3)
    alt_fd_list[fd].dev      = 0;
   15050:	e0ffff17 	ldw	r3,-4(fp)
   15054:	1805883a 	mov	r2,r3
   15058:	1085883a 	add	r2,r2,r2
   1505c:	10c5883a 	add	r2,r2,r3
   15060:	100490ba 	slli	r2,r2,2
   15064:	00c000b4 	movhi	r3,2
   15068:	10c7883a 	add	r3,r2,r3
   1506c:	18227715 	stw	zero,-30244(r3)
  }
}
   15070:	0001883a 	nop
   15074:	e037883a 	mov	sp,fp
   15078:	df000017 	ldw	fp,0(sp)
   1507c:	dec00104 	addi	sp,sp,4
   15080:	f800283a 	ret

00015084 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   15084:	defff904 	addi	sp,sp,-28
   15088:	df000615 	stw	fp,24(sp)
   1508c:	df000604 	addi	fp,sp,24
   15090:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   15094:	0005303a 	rdctl	r2,status
   15098:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1509c:	e0fffd17 	ldw	r3,-12(fp)
   150a0:	00bfff84 	movi	r2,-2
   150a4:	1884703a 	and	r2,r3,r2
   150a8:	1001703a 	wrctl	status,r2
  return context;
   150ac:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   150b0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   150b4:	d0a00a17 	ldw	r2,-32728(gp)
   150b8:	10c000c4 	addi	r3,r2,3
   150bc:	00bfff04 	movi	r2,-4
   150c0:	1884703a 	and	r2,r3,r2
   150c4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   150c8:	d0e00a17 	ldw	r3,-32728(gp)
   150cc:	e0bffa17 	ldw	r2,-24(fp)
   150d0:	1887883a 	add	r3,r3,r2
   150d4:	00820034 	movhi	r2,2048
   150d8:	10800004 	addi	r2,r2,0
   150dc:	10c0072e 	bgeu	r2,r3,150fc <sbrk+0x78>
   150e0:	e0bfff17 	ldw	r2,-4(fp)
   150e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   150e8:	e0bffc17 	ldw	r2,-16(fp)
   150ec:	1001703a 	wrctl	status,r2
}
   150f0:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   150f4:	00bfffc4 	movi	r2,-1
   150f8:	00000c06 	br	1512c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   150fc:	d0a00a17 	ldw	r2,-32728(gp)
   15100:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   15104:	d0e00a17 	ldw	r3,-32728(gp)
   15108:	e0bffa17 	ldw	r2,-24(fp)
   1510c:	1885883a 	add	r2,r3,r2
   15110:	d0a00a15 	stw	r2,-32728(gp)
   15114:	e0bfff17 	ldw	r2,-4(fp)
   15118:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   1511c:	e0bffb17 	ldw	r2,-20(fp)
   15120:	1001703a 	wrctl	status,r2
}
   15124:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   15128:	e0bffe17 	ldw	r2,-8(fp)
} 
   1512c:	e037883a 	mov	sp,fp
   15130:	df000017 	ldw	fp,0(sp)
   15134:	dec00104 	addi	sp,sp,4
   15138:	f800283a 	ret

0001513c <alt_get_errno>:
{
   1513c:	defffe04 	addi	sp,sp,-8
   15140:	dfc00115 	stw	ra,4(sp)
   15144:	df000015 	stw	fp,0(sp)
   15148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1514c:	d0a00917 	ldw	r2,-32732(gp)
   15150:	10000326 	beq	r2,zero,15160 <alt_get_errno+0x24>
   15154:	d0a00917 	ldw	r2,-32732(gp)
   15158:	103ee83a 	callr	r2
   1515c:	00000106 	br	15164 <alt_get_errno+0x28>
   15160:	d0a73504 	addi	r2,gp,-25388
}
   15164:	e037883a 	mov	sp,fp
   15168:	dfc00117 	ldw	ra,4(sp)
   1516c:	df000017 	ldw	fp,0(sp)
   15170:	dec00204 	addi	sp,sp,8
   15174:	f800283a 	ret

00015178 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   15178:	defff904 	addi	sp,sp,-28
   1517c:	dfc00615 	stw	ra,24(sp)
   15180:	df000515 	stw	fp,20(sp)
   15184:	df000504 	addi	fp,sp,20
   15188:	e13ffd15 	stw	r4,-12(fp)
   1518c:	e17ffc15 	stw	r5,-16(fp)
   15190:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15194:	e0bffd17 	ldw	r2,-12(fp)
   15198:	10000916 	blt	r2,zero,151c0 <write+0x48>
   1519c:	e0fffd17 	ldw	r3,-12(fp)
   151a0:	1805883a 	mov	r2,r3
   151a4:	1085883a 	add	r2,r2,r2
   151a8:	10c5883a 	add	r2,r2,r3
   151ac:	100490ba 	slli	r2,r2,2
   151b0:	00c000b4 	movhi	r3,2
   151b4:	18e27704 	addi	r3,r3,-30244
   151b8:	10c5883a 	add	r2,r2,r3
   151bc:	00000106 	br	151c4 <write+0x4c>
   151c0:	0005883a 	mov	r2,zero
   151c4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   151c8:	e0bfff17 	ldw	r2,-4(fp)
   151cc:	10002126 	beq	r2,zero,15254 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   151d0:	e0bfff17 	ldw	r2,-4(fp)
   151d4:	10800217 	ldw	r2,8(r2)
   151d8:	108000cc 	andi	r2,r2,3
   151dc:	10001826 	beq	r2,zero,15240 <write+0xc8>
   151e0:	e0bfff17 	ldw	r2,-4(fp)
   151e4:	10800017 	ldw	r2,0(r2)
   151e8:	10800617 	ldw	r2,24(r2)
   151ec:	10001426 	beq	r2,zero,15240 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   151f0:	e0bfff17 	ldw	r2,-4(fp)
   151f4:	10800017 	ldw	r2,0(r2)
   151f8:	10800617 	ldw	r2,24(r2)
   151fc:	e0fffb17 	ldw	r3,-20(fp)
   15200:	180d883a 	mov	r6,r3
   15204:	e17ffc17 	ldw	r5,-16(fp)
   15208:	e13fff17 	ldw	r4,-4(fp)
   1520c:	103ee83a 	callr	r2
   15210:	e0bffe15 	stw	r2,-8(fp)
   15214:	e0bffe17 	ldw	r2,-8(fp)
   15218:	1000070e 	bge	r2,zero,15238 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   1521c:	001513c0 	call	1513c <alt_get_errno>
   15220:	1007883a 	mov	r3,r2
   15224:	e0bffe17 	ldw	r2,-8(fp)
   15228:	0085c83a 	sub	r2,zero,r2
   1522c:	18800015 	stw	r2,0(r3)
        return -1;
   15230:	00bfffc4 	movi	r2,-1
   15234:	00000c06 	br	15268 <write+0xf0>
      }
      return rval;
   15238:	e0bffe17 	ldw	r2,-8(fp)
   1523c:	00000a06 	br	15268 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   15240:	001513c0 	call	1513c <alt_get_errno>
   15244:	1007883a 	mov	r3,r2
   15248:	00800344 	movi	r2,13
   1524c:	18800015 	stw	r2,0(r3)
   15250:	00000406 	br	15264 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   15254:	001513c0 	call	1513c <alt_get_errno>
   15258:	1007883a 	mov	r3,r2
   1525c:	00801444 	movi	r2,81
   15260:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15264:	00bfffc4 	movi	r2,-1
}
   15268:	e037883a 	mov	sp,fp
   1526c:	dfc00117 	ldw	ra,4(sp)
   15270:	df000017 	ldw	fp,0(sp)
   15274:	dec00204 	addi	sp,sp,8
   15278:	f800283a 	ret

0001527c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1527c:	defffd04 	addi	sp,sp,-12
   15280:	dfc00215 	stw	ra,8(sp)
   15284:	df000115 	stw	fp,4(sp)
   15288:	df000104 	addi	fp,sp,4
   1528c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15290:	d1600604 	addi	r5,gp,-32744
   15294:	e13fff17 	ldw	r4,-4(fp)
   15298:	001693c0 	call	1693c <alt_dev_llist_insert>
}
   1529c:	e037883a 	mov	sp,fp
   152a0:	dfc00117 	ldw	ra,4(sp)
   152a4:	df000017 	ldw	fp,0(sp)
   152a8:	dec00204 	addi	sp,sp,8
   152ac:	f800283a 	ret

000152b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   152b0:	defffd04 	addi	sp,sp,-12
   152b4:	dfc00215 	stw	ra,8(sp)
   152b8:	df000115 	stw	fp,4(sp)
   152bc:	df000104 	addi	fp,sp,4
   152c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   152c4:	00172740 	call	17274 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   152c8:	00800044 	movi	r2,1
   152cc:	1001703a 	wrctl	status,r2
}
   152d0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   152d4:	0001883a 	nop
   152d8:	e037883a 	mov	sp,fp
   152dc:	dfc00117 	ldw	ra,4(sp)
   152e0:	df000017 	ldw	fp,0(sp)
   152e4:	dec00204 	addi	sp,sp,8
   152e8:	f800283a 	ret

000152ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   152ec:	defffe04 	addi	sp,sp,-8
   152f0:	dfc00115 	stw	ra,4(sp)
   152f4:	df000015 	stw	fp,0(sp)
   152f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   152fc:	01c00204 	movi	r7,8
   15300:	01800144 	movi	r6,5
   15304:	000b883a 	mov	r5,zero
   15308:	013fc834 	movhi	r4,65312
   1530c:	21080004 	addi	r4,r4,8192
   15310:	0015e780 	call	15e78 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   15314:	01800104 	movi	r6,4
   15318:	000b883a 	mov	r5,zero
   1531c:	010000b4 	movhi	r4,2
   15320:	2122e104 	addi	r4,r4,-29820
   15324:	00154f00 	call	154f0 <altera_avalon_jtag_uart_init>
   15328:	010000b4 	movhi	r4,2
   1532c:	2122d704 	addi	r4,r4,-29860
   15330:	001527c0 	call	1527c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   15334:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   15338:	010000b4 	movhi	r4,2
   1533c:	2126ef04 	addi	r4,r4,-25668
   15340:	001527c0 	call	1527c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   15344:	010000b4 	movhi	r4,2
   15348:	2126fb04 	addi	r4,r4,-25620
   1534c:	001527c0 	call	1527c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   15350:	010000b4 	movhi	r4,2
   15354:	21270704 	addi	r4,r4,-25572
   15358:	0015fa80 	call	15fa8 <alt_up_character_lcd_init>
   1535c:	010000b4 	movhi	r4,2
   15360:	21270704 	addi	r4,r4,-25572
   15364:	001527c0 	call	1527c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15368:	010000b4 	movhi	r4,2
   1536c:	21271204 	addi	r4,r4,-25528
   15370:	001527c0 	call	1527c <alt_dev_reg>
}
   15374:	0001883a 	nop
   15378:	e037883a 	mov	sp,fp
   1537c:	dfc00117 	ldw	ra,4(sp)
   15380:	df000017 	ldw	fp,0(sp)
   15384:	dec00204 	addi	sp,sp,8
   15388:	f800283a 	ret

0001538c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1538c:	defffa04 	addi	sp,sp,-24
   15390:	dfc00515 	stw	ra,20(sp)
   15394:	df000415 	stw	fp,16(sp)
   15398:	df000404 	addi	fp,sp,16
   1539c:	e13ffe15 	stw	r4,-8(fp)
   153a0:	e17ffd15 	stw	r5,-12(fp)
   153a4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   153a8:	e0bffe17 	ldw	r2,-8(fp)
   153ac:	10800017 	ldw	r2,0(r2)
   153b0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   153b4:	e0bfff17 	ldw	r2,-4(fp)
   153b8:	10c00a04 	addi	r3,r2,40
   153bc:	e0bffe17 	ldw	r2,-8(fp)
   153c0:	10800217 	ldw	r2,8(r2)
   153c4:	100f883a 	mov	r7,r2
   153c8:	e1bffc17 	ldw	r6,-16(fp)
   153cc:	e17ffd17 	ldw	r5,-12(fp)
   153d0:	1809883a 	mov	r4,r3
   153d4:	00159b00 	call	159b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   153d8:	e037883a 	mov	sp,fp
   153dc:	dfc00117 	ldw	ra,4(sp)
   153e0:	df000017 	ldw	fp,0(sp)
   153e4:	dec00204 	addi	sp,sp,8
   153e8:	f800283a 	ret

000153ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   153ec:	defffa04 	addi	sp,sp,-24
   153f0:	dfc00515 	stw	ra,20(sp)
   153f4:	df000415 	stw	fp,16(sp)
   153f8:	df000404 	addi	fp,sp,16
   153fc:	e13ffe15 	stw	r4,-8(fp)
   15400:	e17ffd15 	stw	r5,-12(fp)
   15404:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15408:	e0bffe17 	ldw	r2,-8(fp)
   1540c:	10800017 	ldw	r2,0(r2)
   15410:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15414:	e0bfff17 	ldw	r2,-4(fp)
   15418:	10c00a04 	addi	r3,r2,40
   1541c:	e0bffe17 	ldw	r2,-8(fp)
   15420:	10800217 	ldw	r2,8(r2)
   15424:	100f883a 	mov	r7,r2
   15428:	e1bffc17 	ldw	r6,-16(fp)
   1542c:	e17ffd17 	ldw	r5,-12(fp)
   15430:	1809883a 	mov	r4,r3
   15434:	0015bd00 	call	15bd0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15438:	e037883a 	mov	sp,fp
   1543c:	dfc00117 	ldw	ra,4(sp)
   15440:	df000017 	ldw	fp,0(sp)
   15444:	dec00204 	addi	sp,sp,8
   15448:	f800283a 	ret

0001544c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1544c:	defffc04 	addi	sp,sp,-16
   15450:	dfc00315 	stw	ra,12(sp)
   15454:	df000215 	stw	fp,8(sp)
   15458:	df000204 	addi	fp,sp,8
   1545c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15460:	e0bffe17 	ldw	r2,-8(fp)
   15464:	10800017 	ldw	r2,0(r2)
   15468:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1546c:	e0bfff17 	ldw	r2,-4(fp)
   15470:	10c00a04 	addi	r3,r2,40
   15474:	e0bffe17 	ldw	r2,-8(fp)
   15478:	10800217 	ldw	r2,8(r2)
   1547c:	100b883a 	mov	r5,r2
   15480:	1809883a 	mov	r4,r3
   15484:	00158540 	call	15854 <altera_avalon_jtag_uart_close>
}
   15488:	e037883a 	mov	sp,fp
   1548c:	dfc00117 	ldw	ra,4(sp)
   15490:	df000017 	ldw	fp,0(sp)
   15494:	dec00204 	addi	sp,sp,8
   15498:	f800283a 	ret

0001549c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1549c:	defffa04 	addi	sp,sp,-24
   154a0:	dfc00515 	stw	ra,20(sp)
   154a4:	df000415 	stw	fp,16(sp)
   154a8:	df000404 	addi	fp,sp,16
   154ac:	e13ffe15 	stw	r4,-8(fp)
   154b0:	e17ffd15 	stw	r5,-12(fp)
   154b4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   154b8:	e0bffe17 	ldw	r2,-8(fp)
   154bc:	10800017 	ldw	r2,0(r2)
   154c0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   154c4:	e0bfff17 	ldw	r2,-4(fp)
   154c8:	10800a04 	addi	r2,r2,40
   154cc:	e1bffc17 	ldw	r6,-16(fp)
   154d0:	e17ffd17 	ldw	r5,-12(fp)
   154d4:	1009883a 	mov	r4,r2
   154d8:	00158bc0 	call	158bc <altera_avalon_jtag_uart_ioctl>
}
   154dc:	e037883a 	mov	sp,fp
   154e0:	dfc00117 	ldw	ra,4(sp)
   154e4:	df000017 	ldw	fp,0(sp)
   154e8:	dec00204 	addi	sp,sp,8
   154ec:	f800283a 	ret

000154f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   154f0:	defffb04 	addi	sp,sp,-20
   154f4:	dfc00415 	stw	ra,16(sp)
   154f8:	df000315 	stw	fp,12(sp)
   154fc:	df000304 	addi	fp,sp,12
   15500:	e13fff15 	stw	r4,-4(fp)
   15504:	e17ffe15 	stw	r5,-8(fp)
   15508:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1550c:	e0bfff17 	ldw	r2,-4(fp)
   15510:	00c00044 	movi	r3,1
   15514:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15518:	e0bfff17 	ldw	r2,-4(fp)
   1551c:	10800017 	ldw	r2,0(r2)
   15520:	10800104 	addi	r2,r2,4
   15524:	1007883a 	mov	r3,r2
   15528:	e0bfff17 	ldw	r2,-4(fp)
   1552c:	10800817 	ldw	r2,32(r2)
   15530:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   15534:	e0bffd17 	ldw	r2,-12(fp)
   15538:	01800074 	movhi	r6,1
   1553c:	31956904 	addi	r6,r6,21924
   15540:	e17fff17 	ldw	r5,-4(fp)
   15544:	1009883a 	mov	r4,r2
   15548:	0016cac0 	call	16cac <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1554c:	e0bfff17 	ldw	r2,-4(fp)
   15550:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15554:	e0bfff17 	ldw	r2,-4(fp)
   15558:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1555c:	d0e73b17 	ldw	r3,-25364(gp)
   15560:	e1ffff17 	ldw	r7,-4(fp)
   15564:	01800074 	movhi	r6,1
   15568:	3195ed04 	addi	r6,r6,22452
   1556c:	180b883a 	mov	r5,r3
   15570:	1009883a 	mov	r4,r2
   15574:	00167800 	call	16780 <alt_alarm_start>
   15578:	1000040e 	bge	r2,zero,1558c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1557c:	e0ffff17 	ldw	r3,-4(fp)
   15580:	00a00034 	movhi	r2,32768
   15584:	10bfffc4 	addi	r2,r2,-1
   15588:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1558c:	0001883a 	nop
   15590:	e037883a 	mov	sp,fp
   15594:	dfc00117 	ldw	ra,4(sp)
   15598:	df000017 	ldw	fp,0(sp)
   1559c:	dec00204 	addi	sp,sp,8
   155a0:	f800283a 	ret

000155a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   155a4:	defff704 	addi	sp,sp,-36
   155a8:	df000815 	stw	fp,32(sp)
   155ac:	df000804 	addi	fp,sp,32
   155b0:	e13ff915 	stw	r4,-28(fp)
   155b4:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   155b8:	e0bff917 	ldw	r2,-28(fp)
   155bc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   155c0:	e0bffd17 	ldw	r2,-12(fp)
   155c4:	10800017 	ldw	r2,0(r2)
   155c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   155cc:	e0bffc17 	ldw	r2,-16(fp)
   155d0:	10800104 	addi	r2,r2,4
   155d4:	10800037 	ldwio	r2,0(r2)
   155d8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   155dc:	e0bffb17 	ldw	r2,-20(fp)
   155e0:	1080c00c 	andi	r2,r2,768
   155e4:	10006d26 	beq	r2,zero,1579c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   155e8:	e0bffb17 	ldw	r2,-20(fp)
   155ec:	1080400c 	andi	r2,r2,256
   155f0:	10003526 	beq	r2,zero,156c8 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   155f4:	00800074 	movhi	r2,1
   155f8:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   155fc:	e0bffd17 	ldw	r2,-12(fp)
   15600:	10800a17 	ldw	r2,40(r2)
   15604:	10800044 	addi	r2,r2,1
   15608:	1081ffcc 	andi	r2,r2,2047
   1560c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   15610:	e0bffd17 	ldw	r2,-12(fp)
   15614:	10800b17 	ldw	r2,44(r2)
   15618:	e0fffa17 	ldw	r3,-24(fp)
   1561c:	18801526 	beq	r3,r2,15674 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15620:	e0bffc17 	ldw	r2,-16(fp)
   15624:	10800037 	ldwio	r2,0(r2)
   15628:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1562c:	e0bfff17 	ldw	r2,-4(fp)
   15630:	10a0000c 	andi	r2,r2,32768
   15634:	10001126 	beq	r2,zero,1567c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15638:	e0bffd17 	ldw	r2,-12(fp)
   1563c:	10800a17 	ldw	r2,40(r2)
   15640:	e0ffff17 	ldw	r3,-4(fp)
   15644:	1809883a 	mov	r4,r3
   15648:	e0fffd17 	ldw	r3,-12(fp)
   1564c:	1885883a 	add	r2,r3,r2
   15650:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15654:	e0bffd17 	ldw	r2,-12(fp)
   15658:	10800a17 	ldw	r2,40(r2)
   1565c:	10800044 	addi	r2,r2,1
   15660:	10c1ffcc 	andi	r3,r2,2047
   15664:	e0bffd17 	ldw	r2,-12(fp)
   15668:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1566c:	0001883a 	nop
      {
   15670:	003fe206 	br	155fc <altera_avalon_jtag_uart_irq+0x58>
          break;
   15674:	0001883a 	nop
   15678:	00000106 	br	15680 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   1567c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15680:	e0bfff17 	ldw	r2,-4(fp)
   15684:	10bfffec 	andhi	r2,r2,65535
   15688:	10000f26 	beq	r2,zero,156c8 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1568c:	e0bffd17 	ldw	r2,-12(fp)
   15690:	10c00817 	ldw	r3,32(r2)
   15694:	00bfff84 	movi	r2,-2
   15698:	1886703a 	and	r3,r3,r2
   1569c:	e0bffd17 	ldw	r2,-12(fp)
   156a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   156a4:	e0bffc17 	ldw	r2,-16(fp)
   156a8:	10800104 	addi	r2,r2,4
   156ac:	1007883a 	mov	r3,r2
   156b0:	e0bffd17 	ldw	r2,-12(fp)
   156b4:	10800817 	ldw	r2,32(r2)
   156b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   156bc:	e0bffc17 	ldw	r2,-16(fp)
   156c0:	10800104 	addi	r2,r2,4
   156c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   156c8:	e0bffb17 	ldw	r2,-20(fp)
   156cc:	1080800c 	andi	r2,r2,512
   156d0:	103fbe26 	beq	r2,zero,155cc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   156d4:	e0bffb17 	ldw	r2,-20(fp)
   156d8:	1004d43a 	srli	r2,r2,16
   156dc:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   156e0:	00001406 	br	15734 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   156e4:	e0bffc17 	ldw	r2,-16(fp)
   156e8:	e0fffd17 	ldw	r3,-12(fp)
   156ec:	18c00d17 	ldw	r3,52(r3)
   156f0:	e13ffd17 	ldw	r4,-12(fp)
   156f4:	20c7883a 	add	r3,r4,r3
   156f8:	18c20e03 	ldbu	r3,2104(r3)
   156fc:	18c03fcc 	andi	r3,r3,255
   15700:	18c0201c 	xori	r3,r3,128
   15704:	18ffe004 	addi	r3,r3,-128
   15708:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1570c:	e0bffd17 	ldw	r2,-12(fp)
   15710:	10800d17 	ldw	r2,52(r2)
   15714:	10800044 	addi	r2,r2,1
   15718:	10c1ffcc 	andi	r3,r2,2047
   1571c:	e0bffd17 	ldw	r2,-12(fp)
   15720:	10c00d15 	stw	r3,52(r2)
   15724:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   15728:	e0bffe17 	ldw	r2,-8(fp)
   1572c:	10bfffc4 	addi	r2,r2,-1
   15730:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   15734:	e0bffe17 	ldw	r2,-8(fp)
   15738:	10000526 	beq	r2,zero,15750 <altera_avalon_jtag_uart_irq+0x1ac>
   1573c:	e0bffd17 	ldw	r2,-12(fp)
   15740:	10c00d17 	ldw	r3,52(r2)
   15744:	e0bffd17 	ldw	r2,-12(fp)
   15748:	10800c17 	ldw	r2,48(r2)
   1574c:	18bfe51e 	bne	r3,r2,156e4 <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
   15750:	e0bffe17 	ldw	r2,-8(fp)
   15754:	103f9d26 	beq	r2,zero,155cc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15758:	e0bffd17 	ldw	r2,-12(fp)
   1575c:	10c00817 	ldw	r3,32(r2)
   15760:	00bfff44 	movi	r2,-3
   15764:	1886703a 	and	r3,r3,r2
   15768:	e0bffd17 	ldw	r2,-12(fp)
   1576c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15770:	e0bffd17 	ldw	r2,-12(fp)
   15774:	10800017 	ldw	r2,0(r2)
   15778:	10800104 	addi	r2,r2,4
   1577c:	1007883a 	mov	r3,r2
   15780:	e0bffd17 	ldw	r2,-12(fp)
   15784:	10800817 	ldw	r2,32(r2)
   15788:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1578c:	e0bffc17 	ldw	r2,-16(fp)
   15790:	10800104 	addi	r2,r2,4
   15794:	10800037 	ldwio	r2,0(r2)
  {
   15798:	003f8c06 	br	155cc <altera_avalon_jtag_uart_irq+0x28>
      break;
   1579c:	0001883a 	nop
      }
    }
  }
}
   157a0:	0001883a 	nop
   157a4:	e037883a 	mov	sp,fp
   157a8:	df000017 	ldw	fp,0(sp)
   157ac:	dec00104 	addi	sp,sp,4
   157b0:	f800283a 	ret

000157b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   157b4:	defffc04 	addi	sp,sp,-16
   157b8:	df000315 	stw	fp,12(sp)
   157bc:	df000304 	addi	fp,sp,12
   157c0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   157c4:	e0bffd17 	ldw	r2,-12(fp)
   157c8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   157cc:	e0bfff17 	ldw	r2,-4(fp)
   157d0:	10800017 	ldw	r2,0(r2)
   157d4:	10800104 	addi	r2,r2,4
   157d8:	10800037 	ldwio	r2,0(r2)
   157dc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   157e0:	e0bffe17 	ldw	r2,-8(fp)
   157e4:	1081000c 	andi	r2,r2,1024
   157e8:	10000b26 	beq	r2,zero,15818 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   157ec:	e0bfff17 	ldw	r2,-4(fp)
   157f0:	10800017 	ldw	r2,0(r2)
   157f4:	10800104 	addi	r2,r2,4
   157f8:	1007883a 	mov	r3,r2
   157fc:	e0bfff17 	ldw	r2,-4(fp)
   15800:	10800817 	ldw	r2,32(r2)
   15804:	10810014 	ori	r2,r2,1024
   15808:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1580c:	e0bfff17 	ldw	r2,-4(fp)
   15810:	10000915 	stw	zero,36(r2)
   15814:	00000a06 	br	15840 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15818:	e0bfff17 	ldw	r2,-4(fp)
   1581c:	10c00917 	ldw	r3,36(r2)
   15820:	00a00034 	movhi	r2,32768
   15824:	10bfff04 	addi	r2,r2,-4
   15828:	10c00536 	bltu	r2,r3,15840 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1582c:	e0bfff17 	ldw	r2,-4(fp)
   15830:	10800917 	ldw	r2,36(r2)
   15834:	10c00044 	addi	r3,r2,1
   15838:	e0bfff17 	ldw	r2,-4(fp)
   1583c:	10c00915 	stw	r3,36(r2)
   15840:	d0a73b17 	ldw	r2,-25364(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   15844:	e037883a 	mov	sp,fp
   15848:	df000017 	ldw	fp,0(sp)
   1584c:	dec00104 	addi	sp,sp,4
   15850:	f800283a 	ret

00015854 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15854:	defffd04 	addi	sp,sp,-12
   15858:	df000215 	stw	fp,8(sp)
   1585c:	df000204 	addi	fp,sp,8
   15860:	e13fff15 	stw	r4,-4(fp)
   15864:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15868:	00000506 	br	15880 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1586c:	e0bffe17 	ldw	r2,-8(fp)
   15870:	1090000c 	andi	r2,r2,16384
   15874:	10000226 	beq	r2,zero,15880 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15878:	00bffd44 	movi	r2,-11
   1587c:	00000b06 	br	158ac <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15880:	e0bfff17 	ldw	r2,-4(fp)
   15884:	10c00d17 	ldw	r3,52(r2)
   15888:	e0bfff17 	ldw	r2,-4(fp)
   1588c:	10800c17 	ldw	r2,48(r2)
   15890:	18800526 	beq	r3,r2,158a8 <altera_avalon_jtag_uart_close+0x54>
   15894:	e0bfff17 	ldw	r2,-4(fp)
   15898:	10c00917 	ldw	r3,36(r2)
   1589c:	e0bfff17 	ldw	r2,-4(fp)
   158a0:	10800117 	ldw	r2,4(r2)
   158a4:	18bff136 	bltu	r3,r2,1586c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   158a8:	0005883a 	mov	r2,zero
}
   158ac:	e037883a 	mov	sp,fp
   158b0:	df000017 	ldw	fp,0(sp)
   158b4:	dec00104 	addi	sp,sp,4
   158b8:	f800283a 	ret

000158bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   158bc:	defffa04 	addi	sp,sp,-24
   158c0:	df000515 	stw	fp,20(sp)
   158c4:	df000504 	addi	fp,sp,20
   158c8:	e13ffd15 	stw	r4,-12(fp)
   158cc:	e17ffc15 	stw	r5,-16(fp)
   158d0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   158d4:	00bff9c4 	movi	r2,-25
   158d8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   158dc:	e0bffc17 	ldw	r2,-16(fp)
   158e0:	109a8060 	cmpeqi	r2,r2,27137
   158e4:	1000041e 	bne	r2,zero,158f8 <altera_avalon_jtag_uart_ioctl+0x3c>
   158e8:	e0bffc17 	ldw	r2,-16(fp)
   158ec:	109a80a0 	cmpeqi	r2,r2,27138
   158f0:	1000181e 	bne	r2,zero,15954 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   158f4:	00002906 	br	1599c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   158f8:	e0bffd17 	ldw	r2,-12(fp)
   158fc:	10c00117 	ldw	r3,4(r2)
   15900:	00a00034 	movhi	r2,32768
   15904:	10bfffc4 	addi	r2,r2,-1
   15908:	18802126 	beq	r3,r2,15990 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   1590c:	e0bffb17 	ldw	r2,-20(fp)
   15910:	10800017 	ldw	r2,0(r2)
   15914:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15918:	e0bffe17 	ldw	r2,-8(fp)
   1591c:	10800090 	cmplti	r2,r2,2
   15920:	1000061e 	bne	r2,zero,1593c <altera_avalon_jtag_uart_ioctl+0x80>
   15924:	e0fffe17 	ldw	r3,-8(fp)
   15928:	00a00034 	movhi	r2,32768
   1592c:	10bfffc4 	addi	r2,r2,-1
   15930:	18800226 	beq	r3,r2,1593c <altera_avalon_jtag_uart_ioctl+0x80>
   15934:	e0bffe17 	ldw	r2,-8(fp)
   15938:	00000206 	br	15944 <altera_avalon_jtag_uart_ioctl+0x88>
   1593c:	00a00034 	movhi	r2,32768
   15940:	10bfff84 	addi	r2,r2,-2
   15944:	e0fffd17 	ldw	r3,-12(fp)
   15948:	18800115 	stw	r2,4(r3)
      rc = 0;
   1594c:	e03fff15 	stw	zero,-4(fp)
    break;
   15950:	00000f06 	br	15990 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   15954:	e0bffd17 	ldw	r2,-12(fp)
   15958:	10c00117 	ldw	r3,4(r2)
   1595c:	00a00034 	movhi	r2,32768
   15960:	10bfffc4 	addi	r2,r2,-1
   15964:	18800c26 	beq	r3,r2,15998 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15968:	e0bffd17 	ldw	r2,-12(fp)
   1596c:	10c00917 	ldw	r3,36(r2)
   15970:	e0bffd17 	ldw	r2,-12(fp)
   15974:	10800117 	ldw	r2,4(r2)
   15978:	1885803a 	cmpltu	r2,r3,r2
   1597c:	10c03fcc 	andi	r3,r2,255
   15980:	e0bffb17 	ldw	r2,-20(fp)
   15984:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15988:	e03fff15 	stw	zero,-4(fp)
    break;
   1598c:	00000206 	br	15998 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   15990:	0001883a 	nop
   15994:	00000106 	br	1599c <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   15998:	0001883a 	nop
  }

  return rc;
   1599c:	e0bfff17 	ldw	r2,-4(fp)
}
   159a0:	e037883a 	mov	sp,fp
   159a4:	df000017 	ldw	fp,0(sp)
   159a8:	dec00104 	addi	sp,sp,4
   159ac:	f800283a 	ret

000159b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   159b0:	defff304 	addi	sp,sp,-52
   159b4:	dfc00c15 	stw	ra,48(sp)
   159b8:	df000b15 	stw	fp,44(sp)
   159bc:	df000b04 	addi	fp,sp,44
   159c0:	e13ff815 	stw	r4,-32(fp)
   159c4:	e17ff715 	stw	r5,-36(fp)
   159c8:	e1bff615 	stw	r6,-40(fp)
   159cc:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   159d0:	e0bff717 	ldw	r2,-36(fp)
   159d4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   159d8:	00004706 	br	15af8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   159dc:	e0bff817 	ldw	r2,-32(fp)
   159e0:	10800a17 	ldw	r2,40(r2)
   159e4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   159e8:	e0bff817 	ldw	r2,-32(fp)
   159ec:	10800b17 	ldw	r2,44(r2)
   159f0:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   159f4:	e0fffd17 	ldw	r3,-12(fp)
   159f8:	e0bffc17 	ldw	r2,-16(fp)
   159fc:	18800536 	bltu	r3,r2,15a14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   15a00:	e0fffd17 	ldw	r3,-12(fp)
   15a04:	e0bffc17 	ldw	r2,-16(fp)
   15a08:	1885c83a 	sub	r2,r3,r2
   15a0c:	e0bffe15 	stw	r2,-8(fp)
   15a10:	00000406 	br	15a24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15a14:	00c20004 	movi	r3,2048
   15a18:	e0bffc17 	ldw	r2,-16(fp)
   15a1c:	1885c83a 	sub	r2,r3,r2
   15a20:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   15a24:	e0bffe17 	ldw	r2,-8(fp)
   15a28:	10001e26 	beq	r2,zero,15aa4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15a2c:	e0fff617 	ldw	r3,-40(fp)
   15a30:	e0bffe17 	ldw	r2,-8(fp)
   15a34:	1880022e 	bgeu	r3,r2,15a40 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   15a38:	e0bff617 	ldw	r2,-40(fp)
   15a3c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15a40:	e0bff817 	ldw	r2,-32(fp)
   15a44:	10c00e04 	addi	r3,r2,56
   15a48:	e0bffc17 	ldw	r2,-16(fp)
   15a4c:	1885883a 	add	r2,r3,r2
   15a50:	e1bffe17 	ldw	r6,-8(fp)
   15a54:	100b883a 	mov	r5,r2
   15a58:	e13fff17 	ldw	r4,-4(fp)
   15a5c:	000a6b00 	call	a6b0 <memcpy>
      ptr   += n;
   15a60:	e0ffff17 	ldw	r3,-4(fp)
   15a64:	e0bffe17 	ldw	r2,-8(fp)
   15a68:	1885883a 	add	r2,r3,r2
   15a6c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   15a70:	e0fff617 	ldw	r3,-40(fp)
   15a74:	e0bffe17 	ldw	r2,-8(fp)
   15a78:	1885c83a 	sub	r2,r3,r2
   15a7c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15a80:	e0fffc17 	ldw	r3,-16(fp)
   15a84:	e0bffe17 	ldw	r2,-8(fp)
   15a88:	1885883a 	add	r2,r3,r2
   15a8c:	10c1ffcc 	andi	r3,r2,2047
   15a90:	e0bff817 	ldw	r2,-32(fp)
   15a94:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   15a98:	e0bff617 	ldw	r2,-40(fp)
   15a9c:	00bfcf16 	blt	zero,r2,159dc <altera_avalon_jtag_uart_read+0x2c>
   15aa0:	00000106 	br	15aa8 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   15aa4:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   15aa8:	e0ffff17 	ldw	r3,-4(fp)
   15aac:	e0bff717 	ldw	r2,-36(fp)
   15ab0:	1880141e 	bne	r3,r2,15b04 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15ab4:	e0bff517 	ldw	r2,-44(fp)
   15ab8:	1090000c 	andi	r2,r2,16384
   15abc:	1000131e 	bne	r2,zero,15b0c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15ac0:	0001883a 	nop
   15ac4:	e0bff817 	ldw	r2,-32(fp)
   15ac8:	10800a17 	ldw	r2,40(r2)
   15acc:	e0fffd17 	ldw	r3,-12(fp)
   15ad0:	1880051e 	bne	r3,r2,15ae8 <altera_avalon_jtag_uart_read+0x138>
   15ad4:	e0bff817 	ldw	r2,-32(fp)
   15ad8:	10c00917 	ldw	r3,36(r2)
   15adc:	e0bff817 	ldw	r2,-32(fp)
   15ae0:	10800117 	ldw	r2,4(r2)
   15ae4:	18bff736 	bltu	r3,r2,15ac4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15ae8:	e0bff817 	ldw	r2,-32(fp)
   15aec:	10800a17 	ldw	r2,40(r2)
   15af0:	e0fffd17 	ldw	r3,-12(fp)
   15af4:	18800726 	beq	r3,r2,15b14 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   15af8:	e0bff617 	ldw	r2,-40(fp)
   15afc:	00bfb716 	blt	zero,r2,159dc <altera_avalon_jtag_uart_read+0x2c>
   15b00:	00000506 	br	15b18 <altera_avalon_jtag_uart_read+0x168>
      break;
   15b04:	0001883a 	nop
   15b08:	00000306 	br	15b18 <altera_avalon_jtag_uart_read+0x168>
      break;
   15b0c:	0001883a 	nop
   15b10:	00000106 	br	15b18 <altera_avalon_jtag_uart_read+0x168>
      break;
   15b14:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   15b18:	e0ffff17 	ldw	r3,-4(fp)
   15b1c:	e0bff717 	ldw	r2,-36(fp)
   15b20:	18801926 	beq	r3,r2,15b88 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   15b24:	0005303a 	rdctl	r2,status
   15b28:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b2c:	e0fff917 	ldw	r3,-28(fp)
   15b30:	00bfff84 	movi	r2,-2
   15b34:	1884703a 	and	r2,r3,r2
   15b38:	1001703a 	wrctl	status,r2
  return context;
   15b3c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15b40:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15b44:	e0bff817 	ldw	r2,-32(fp)
   15b48:	10800817 	ldw	r2,32(r2)
   15b4c:	10c00054 	ori	r3,r2,1
   15b50:	e0bff817 	ldw	r2,-32(fp)
   15b54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15b58:	e0bff817 	ldw	r2,-32(fp)
   15b5c:	10800017 	ldw	r2,0(r2)
   15b60:	10800104 	addi	r2,r2,4
   15b64:	1007883a 	mov	r3,r2
   15b68:	e0bff817 	ldw	r2,-32(fp)
   15b6c:	10800817 	ldw	r2,32(r2)
   15b70:	18800035 	stwio	r2,0(r3)
   15b74:	e0bffb17 	ldw	r2,-20(fp)
   15b78:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   15b7c:	e0bffa17 	ldw	r2,-24(fp)
   15b80:	1001703a 	wrctl	status,r2
}
   15b84:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15b88:	e0ffff17 	ldw	r3,-4(fp)
   15b8c:	e0bff717 	ldw	r2,-36(fp)
   15b90:	18800426 	beq	r3,r2,15ba4 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   15b94:	e0ffff17 	ldw	r3,-4(fp)
   15b98:	e0bff717 	ldw	r2,-36(fp)
   15b9c:	1885c83a 	sub	r2,r3,r2
   15ba0:	00000606 	br	15bbc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   15ba4:	e0bff517 	ldw	r2,-44(fp)
   15ba8:	1090000c 	andi	r2,r2,16384
   15bac:	10000226 	beq	r2,zero,15bb8 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   15bb0:	00bffd44 	movi	r2,-11
   15bb4:	00000106 	br	15bbc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   15bb8:	00bffec4 	movi	r2,-5
}
   15bbc:	e037883a 	mov	sp,fp
   15bc0:	dfc00117 	ldw	ra,4(sp)
   15bc4:	df000017 	ldw	fp,0(sp)
   15bc8:	dec00204 	addi	sp,sp,8
   15bcc:	f800283a 	ret

00015bd0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15bd0:	defff304 	addi	sp,sp,-52
   15bd4:	dfc00c15 	stw	ra,48(sp)
   15bd8:	df000b15 	stw	fp,44(sp)
   15bdc:	df000b04 	addi	fp,sp,44
   15be0:	e13ff815 	stw	r4,-32(fp)
   15be4:	e17ff715 	stw	r5,-36(fp)
   15be8:	e1bff615 	stw	r6,-40(fp)
   15bec:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15bf0:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15bf4:	e0bff717 	ldw	r2,-36(fp)
   15bf8:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15bfc:	00003706 	br	15cdc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15c00:	e0bff817 	ldw	r2,-32(fp)
   15c04:	10800c17 	ldw	r2,48(r2)
   15c08:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   15c0c:	e0bff817 	ldw	r2,-32(fp)
   15c10:	10800d17 	ldw	r2,52(r2)
   15c14:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   15c18:	e0fffc17 	ldw	r3,-16(fp)
   15c1c:	e0bfff17 	ldw	r2,-4(fp)
   15c20:	1880062e 	bgeu	r3,r2,15c3c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   15c24:	e0ffff17 	ldw	r3,-4(fp)
   15c28:	e0bffc17 	ldw	r2,-16(fp)
   15c2c:	1885c83a 	sub	r2,r3,r2
   15c30:	10bfffc4 	addi	r2,r2,-1
   15c34:	e0bffe15 	stw	r2,-8(fp)
   15c38:	00000b06 	br	15c68 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15c3c:	e0bfff17 	ldw	r2,-4(fp)
   15c40:	10000526 	beq	r2,zero,15c58 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15c44:	00c20004 	movi	r3,2048
   15c48:	e0bffc17 	ldw	r2,-16(fp)
   15c4c:	1885c83a 	sub	r2,r3,r2
   15c50:	e0bffe15 	stw	r2,-8(fp)
   15c54:	00000406 	br	15c68 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15c58:	00c1ffc4 	movi	r3,2047
   15c5c:	e0bffc17 	ldw	r2,-16(fp)
   15c60:	1885c83a 	sub	r2,r3,r2
   15c64:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   15c68:	e0bffe17 	ldw	r2,-8(fp)
   15c6c:	10001e26 	beq	r2,zero,15ce8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15c70:	e0fff617 	ldw	r3,-40(fp)
   15c74:	e0bffe17 	ldw	r2,-8(fp)
   15c78:	1880022e 	bgeu	r3,r2,15c84 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15c7c:	e0bff617 	ldw	r2,-40(fp)
   15c80:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15c84:	e0bff817 	ldw	r2,-32(fp)
   15c88:	10c20e04 	addi	r3,r2,2104
   15c8c:	e0bffc17 	ldw	r2,-16(fp)
   15c90:	1885883a 	add	r2,r3,r2
   15c94:	e1bffe17 	ldw	r6,-8(fp)
   15c98:	e17ff717 	ldw	r5,-36(fp)
   15c9c:	1009883a 	mov	r4,r2
   15ca0:	000a6b00 	call	a6b0 <memcpy>
      ptr   += n;
   15ca4:	e0fff717 	ldw	r3,-36(fp)
   15ca8:	e0bffe17 	ldw	r2,-8(fp)
   15cac:	1885883a 	add	r2,r3,r2
   15cb0:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   15cb4:	e0fff617 	ldw	r3,-40(fp)
   15cb8:	e0bffe17 	ldw	r2,-8(fp)
   15cbc:	1885c83a 	sub	r2,r3,r2
   15cc0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15cc4:	e0fffc17 	ldw	r3,-16(fp)
   15cc8:	e0bffe17 	ldw	r2,-8(fp)
   15ccc:	1885883a 	add	r2,r3,r2
   15cd0:	10c1ffcc 	andi	r3,r2,2047
   15cd4:	e0bff817 	ldw	r2,-32(fp)
   15cd8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   15cdc:	e0bff617 	ldw	r2,-40(fp)
   15ce0:	00bfc716 	blt	zero,r2,15c00 <altera_avalon_jtag_uart_write+0x30>
   15ce4:	00000106 	br	15cec <altera_avalon_jtag_uart_write+0x11c>
        break;
   15ce8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   15cec:	0005303a 	rdctl	r2,status
   15cf0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cf4:	e0fff917 	ldw	r3,-28(fp)
   15cf8:	00bfff84 	movi	r2,-2
   15cfc:	1884703a 	and	r2,r3,r2
   15d00:	1001703a 	wrctl	status,r2
  return context;
   15d04:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15d08:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15d0c:	e0bff817 	ldw	r2,-32(fp)
   15d10:	10800817 	ldw	r2,32(r2)
   15d14:	10c00094 	ori	r3,r2,2
   15d18:	e0bff817 	ldw	r2,-32(fp)
   15d1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15d20:	e0bff817 	ldw	r2,-32(fp)
   15d24:	10800017 	ldw	r2,0(r2)
   15d28:	10800104 	addi	r2,r2,4
   15d2c:	1007883a 	mov	r3,r2
   15d30:	e0bff817 	ldw	r2,-32(fp)
   15d34:	10800817 	ldw	r2,32(r2)
   15d38:	18800035 	stwio	r2,0(r3)
   15d3c:	e0bffb17 	ldw	r2,-20(fp)
   15d40:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   15d44:	e0bffa17 	ldw	r2,-24(fp)
   15d48:	1001703a 	wrctl	status,r2
}
   15d4c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15d50:	e0bff617 	ldw	r2,-40(fp)
   15d54:	0080100e 	bge	zero,r2,15d98 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   15d58:	e0bff517 	ldw	r2,-44(fp)
   15d5c:	1090000c 	andi	r2,r2,16384
   15d60:	1000101e 	bne	r2,zero,15da4 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15d64:	0001883a 	nop
   15d68:	e0bff817 	ldw	r2,-32(fp)
   15d6c:	10800d17 	ldw	r2,52(r2)
   15d70:	e0ffff17 	ldw	r3,-4(fp)
   15d74:	1880051e 	bne	r3,r2,15d8c <altera_avalon_jtag_uart_write+0x1bc>
   15d78:	e0bff817 	ldw	r2,-32(fp)
   15d7c:	10c00917 	ldw	r3,36(r2)
   15d80:	e0bff817 	ldw	r2,-32(fp)
   15d84:	10800117 	ldw	r2,4(r2)
   15d88:	18bff736 	bltu	r3,r2,15d68 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   15d8c:	e0bff817 	ldw	r2,-32(fp)
   15d90:	10800917 	ldw	r2,36(r2)
   15d94:	1000051e 	bne	r2,zero,15dac <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   15d98:	e0bff617 	ldw	r2,-40(fp)
   15d9c:	00bfcf16 	blt	zero,r2,15cdc <altera_avalon_jtag_uart_write+0x10c>
   15da0:	00000306 	br	15db0 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   15da4:	0001883a 	nop
   15da8:	00000106 	br	15db0 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   15dac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   15db0:	e0fff717 	ldw	r3,-36(fp)
   15db4:	e0bffd17 	ldw	r2,-12(fp)
   15db8:	18800426 	beq	r3,r2,15dcc <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   15dbc:	e0fff717 	ldw	r3,-36(fp)
   15dc0:	e0bffd17 	ldw	r2,-12(fp)
   15dc4:	1885c83a 	sub	r2,r3,r2
   15dc8:	00000606 	br	15de4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   15dcc:	e0bff517 	ldw	r2,-44(fp)
   15dd0:	1090000c 	andi	r2,r2,16384
   15dd4:	10000226 	beq	r2,zero,15de0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   15dd8:	00bffd44 	movi	r2,-11
   15ddc:	00000106 	br	15de4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   15de0:	00bffec4 	movi	r2,-5
}
   15de4:	e037883a 	mov	sp,fp
   15de8:	dfc00117 	ldw	ra,4(sp)
   15dec:	df000017 	ldw	fp,0(sp)
   15df0:	dec00204 	addi	sp,sp,8
   15df4:	f800283a 	ret

00015df8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15df8:	defff904 	addi	sp,sp,-28
   15dfc:	dfc00615 	stw	ra,24(sp)
   15e00:	df000515 	stw	fp,20(sp)
   15e04:	df000504 	addi	fp,sp,20
   15e08:	e13ffc15 	stw	r4,-16(fp)
   15e0c:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15e10:	0007883a 	mov	r3,zero
   15e14:	e0bffc17 	ldw	r2,-16(fp)
   15e18:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15e1c:	e0bffc17 	ldw	r2,-16(fp)
   15e20:	10800104 	addi	r2,r2,4
   15e24:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   15e28:	0005303a 	rdctl	r2,status
   15e2c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e30:	e0fffd17 	ldw	r3,-12(fp)
   15e34:	00bfff84 	movi	r2,-2
   15e38:	1884703a 	and	r2,r3,r2
   15e3c:	1001703a 	wrctl	status,r2
  return context;
   15e40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15e44:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   15e48:	00171480 	call	17148 <alt_tick>
   15e4c:	e0bfff17 	ldw	r2,-4(fp)
   15e50:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   15e54:	e0bffe17 	ldw	r2,-8(fp)
   15e58:	1001703a 	wrctl	status,r2
}
   15e5c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   15e60:	0001883a 	nop
   15e64:	e037883a 	mov	sp,fp
   15e68:	dfc00117 	ldw	ra,4(sp)
   15e6c:	df000017 	ldw	fp,0(sp)
   15e70:	dec00204 	addi	sp,sp,8
   15e74:	f800283a 	ret

00015e78 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15e78:	defff904 	addi	sp,sp,-28
   15e7c:	dfc00615 	stw	ra,24(sp)
   15e80:	df000515 	stw	fp,20(sp)
   15e84:	df000504 	addi	fp,sp,20
   15e88:	e13ffe15 	stw	r4,-8(fp)
   15e8c:	e17ffd15 	stw	r5,-12(fp)
   15e90:	e1bffc15 	stw	r6,-16(fp)
   15e94:	e1fffb15 	stw	r7,-20(fp)
   15e98:	e0bffb17 	ldw	r2,-20(fp)
   15e9c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   15ea0:	d0a73b17 	ldw	r2,-25364(gp)
   15ea4:	1000031e 	bne	r2,zero,15eb4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   15ea8:	e0bfff17 	ldw	r2,-4(fp)
   15eac:	d0a73b15 	stw	r2,-25364(gp)
    return 0;
   15eb0:	00000106 	br	15eb8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   15eb4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   15eb8:	e0bffe17 	ldw	r2,-8(fp)
   15ebc:	10800104 	addi	r2,r2,4
   15ec0:	00c001c4 	movi	r3,7
   15ec4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   15ec8:	01800074 	movhi	r6,1
   15ecc:	31977e04 	addi	r6,r6,24056
   15ed0:	e17ffe17 	ldw	r5,-8(fp)
   15ed4:	e13ffc17 	ldw	r4,-16(fp)
   15ed8:	0016cac0 	call	16cac <alt_irq_register>
#endif  
}
   15edc:	0001883a 	nop
   15ee0:	e037883a 	mov	sp,fp
   15ee4:	dfc00117 	ldw	ra,4(sp)
   15ee8:	df000017 	ldw	fp,0(sp)
   15eec:	dec00204 	addi	sp,sp,8
   15ef0:	f800283a 	ret

00015ef4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   15ef4:	defffc04 	addi	sp,sp,-16
   15ef8:	df000315 	stw	fp,12(sp)
   15efc:	df000304 	addi	fp,sp,12
   15f00:	e13ffe15 	stw	r4,-8(fp)
   15f04:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   15f08:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
   15f0c:	e0bffd17 	ldw	r2,-12(fp)
   15f10:	1000061e 	bne	r2,zero,15f2c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   15f14:	e0bffe17 	ldw	r2,-8(fp)
   15f18:	1007883a 	mov	r3,r2
   15f1c:	e0bfffc3 	ldbu	r2,-1(fp)
   15f20:	10c4b03a 	or	r2,r2,r3
   15f24:	e0bfffc5 	stb	r2,-1(fp)
   15f28:	00000806 	br	15f4c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   15f2c:	e0bffe17 	ldw	r2,-8(fp)
   15f30:	1007883a 	mov	r3,r2
   15f34:	e0bfffc3 	ldbu	r2,-1(fp)
   15f38:	10c4b03a 	or	r2,r2,r3
   15f3c:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
   15f40:	e0bfffc3 	ldbu	r2,-1(fp)
   15f44:	10801014 	ori	r2,r2,64
   15f48:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   15f4c:	e0ffffc3 	ldbu	r3,-1(fp)
   15f50:	00bfe004 	movi	r2,-128
   15f54:	1884b03a 	or	r2,r3,r2
}
   15f58:	e037883a 	mov	sp,fp
   15f5c:	df000017 	ldw	fp,0(sp)
   15f60:	dec00104 	addi	sp,sp,4
   15f64:	f800283a 	ret

00015f68 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   15f68:	defffd04 	addi	sp,sp,-12
   15f6c:	df000215 	stw	fp,8(sp)
   15f70:	df000204 	addi	fp,sp,8
   15f74:	e13fff15 	stw	r4,-4(fp)
   15f78:	2805883a 	mov	r2,r5
   15f7c:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   15f80:	e0bfff17 	ldw	r2,-4(fp)
   15f84:	10800a17 	ldw	r2,40(r2)
   15f88:	1007883a 	mov	r3,r2
   15f8c:	e0bffe03 	ldbu	r2,-8(fp)
   15f90:	18800025 	stbio	r2,0(r3)
}
   15f94:	0001883a 	nop
   15f98:	e037883a 	mov	sp,fp
   15f9c:	df000017 	ldw	fp,0(sp)
   15fa0:	dec00104 	addi	sp,sp,4
   15fa4:	f800283a 	ret

00015fa8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   15fa8:	defffe04 	addi	sp,sp,-8
   15fac:	df000115 	stw	fp,4(sp)
   15fb0:	df000104 	addi	fp,sp,4
   15fb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   15fb8:	e0bfff17 	ldw	r2,-4(fp)
   15fbc:	10800a17 	ldw	r2,40(r2)
   15fc0:	1007883a 	mov	r3,r2
   15fc4:	00800044 	movi	r2,1
   15fc8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   15fcc:	0001883a 	nop
   15fd0:	e037883a 	mov	sp,fp
   15fd4:	df000017 	ldw	fp,0(sp)
   15fd8:	dec00104 	addi	sp,sp,4
   15fdc:	f800283a 	ret

00015fe0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   15fe0:	defffc04 	addi	sp,sp,-16
   15fe4:	dfc00315 	stw	ra,12(sp)
   15fe8:	df000215 	stw	fp,8(sp)
   15fec:	df000204 	addi	fp,sp,8
   15ff0:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   15ff4:	d1600604 	addi	r5,gp,-32744
   15ff8:	e13ffe17 	ldw	r4,-8(fp)
   15ffc:	0016aac0 	call	16aac <alt_find_dev>
   16000:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   16004:	e0bfff17 	ldw	r2,-4(fp)
}
   16008:	e037883a 	mov	sp,fp
   1600c:	dfc00117 	ldw	ra,4(sp)
   16010:	df000017 	ldw	fp,0(sp)
   16014:	dec00204 	addi	sp,sp,8
   16018:	f800283a 	ret

0001601c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1601c:	defffb04 	addi	sp,sp,-20
   16020:	df000415 	stw	fp,16(sp)
   16024:	df000404 	addi	fp,sp,16
   16028:	e13ffe15 	stw	r4,-8(fp)
   1602c:	e17ffd15 	stw	r5,-12(fp)
   16030:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   16034:	e03fff15 	stw	zero,-4(fp)
   16038:	00000f06 	br	16078 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1603c:	e0bffe17 	ldw	r2,-8(fp)
   16040:	10800a17 	ldw	r2,40(r2)
   16044:	10800044 	addi	r2,r2,1
   16048:	1009883a 	mov	r4,r2
   1604c:	e0fffd17 	ldw	r3,-12(fp)
   16050:	e0bfff17 	ldw	r2,-4(fp)
   16054:	1885883a 	add	r2,r3,r2
   16058:	10800003 	ldbu	r2,0(r2)
   1605c:	10803fcc 	andi	r2,r2,255
   16060:	1080201c 	xori	r2,r2,128
   16064:	10bfe004 	addi	r2,r2,-128
   16068:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
   1606c:	e0bfff17 	ldw	r2,-4(fp)
   16070:	10800044 	addi	r2,r2,1
   16074:	e0bfff15 	stw	r2,-4(fp)
   16078:	e0ffff17 	ldw	r3,-4(fp)
   1607c:	e0bffc17 	ldw	r2,-16(fp)
   16080:	18bfee36 	bltu	r3,r2,1603c <alt_up_character_lcd_write+0x20>
	}
}
   16084:	0001883a 	nop
   16088:	0001883a 	nop
   1608c:	e037883a 	mov	sp,fp
   16090:	df000017 	ldw	fp,0(sp)
   16094:	dec00104 	addi	sp,sp,4
   16098:	f800283a 	ret

0001609c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1609c:	defffd04 	addi	sp,sp,-12
   160a0:	df000215 	stw	fp,8(sp)
   160a4:	df000204 	addi	fp,sp,8
   160a8:	e13fff15 	stw	r4,-4(fp)
   160ac:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
   160b0:	00000d06 	br	160e8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   160b4:	e0bfff17 	ldw	r2,-4(fp)
   160b8:	10800a17 	ldw	r2,40(r2)
   160bc:	10800044 	addi	r2,r2,1
   160c0:	1007883a 	mov	r3,r2
   160c4:	e0bffe17 	ldw	r2,-8(fp)
   160c8:	10800003 	ldbu	r2,0(r2)
   160cc:	10803fcc 	andi	r2,r2,255
   160d0:	1080201c 	xori	r2,r2,128
   160d4:	10bfe004 	addi	r2,r2,-128
   160d8:	18800025 	stbio	r2,0(r3)
		++ptr;
   160dc:	e0bffe17 	ldw	r2,-8(fp)
   160e0:	10800044 	addi	r2,r2,1
   160e4:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
   160e8:	e0bffe17 	ldw	r2,-8(fp)
   160ec:	10800003 	ldbu	r2,0(r2)
   160f0:	10803fcc 	andi	r2,r2,255
   160f4:	1080201c 	xori	r2,r2,128
   160f8:	10bfe004 	addi	r2,r2,-128
   160fc:	103fed1e 	bne	r2,zero,160b4 <alt_up_character_lcd_string+0x18>
	}
}
   16100:	0001883a 	nop
   16104:	0001883a 	nop
   16108:	e037883a 	mov	sp,fp
   1610c:	df000017 	ldw	fp,0(sp)
   16110:	dec00104 	addi	sp,sp,4
   16114:	f800283a 	ret

00016118 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   16118:	defffb04 	addi	sp,sp,-20
   1611c:	dfc00415 	stw	ra,16(sp)
   16120:	df000315 	stw	fp,12(sp)
   16124:	df000304 	addi	fp,sp,12
   16128:	e13fff15 	stw	r4,-4(fp)
   1612c:	e17ffe15 	stw	r5,-8(fp)
   16130:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   16134:	e0bfff17 	ldw	r2,-4(fp)
   16138:	10800017 	ldw	r2,0(r2)
   1613c:	e0fffd17 	ldw	r3,-12(fp)
   16140:	180d883a 	mov	r6,r3
   16144:	e17ffe17 	ldw	r5,-8(fp)
   16148:	1009883a 	mov	r4,r2
   1614c:	001601c0 	call	1601c <alt_up_character_lcd_write>
	return 0;
   16150:	0005883a 	mov	r2,zero
}
   16154:	e037883a 	mov	sp,fp
   16158:	dfc00117 	ldw	ra,4(sp)
   1615c:	df000017 	ldw	fp,0(sp)
   16160:	dec00204 	addi	sp,sp,8
   16164:	f800283a 	ret

00016168 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   16168:	defffa04 	addi	sp,sp,-24
   1616c:	dfc00515 	stw	ra,20(sp)
   16170:	df000415 	stw	fp,16(sp)
   16174:	df000404 	addi	fp,sp,16
   16178:	e13ffe15 	stw	r4,-8(fp)
   1617c:	e17ffd15 	stw	r5,-12(fp)
   16180:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   16184:	e0bffd17 	ldw	r2,-12(fp)
   16188:	10800a28 	cmpgeui	r2,r2,40
   1618c:	1000031e 	bne	r2,zero,1619c <alt_up_character_lcd_set_cursor_pos+0x34>
   16190:	e0bffc17 	ldw	r2,-16(fp)
   16194:	108000b0 	cmpltui	r2,r2,2
   16198:	1000021e 	bne	r2,zero,161a4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1619c:	00bfffc4 	movi	r2,-1
   161a0:	00000906 	br	161c8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   161a4:	e17ffc17 	ldw	r5,-16(fp)
   161a8:	e13ffd17 	ldw	r4,-12(fp)
   161ac:	0015ef40 	call	15ef4 <get_DDRAM_addr>
   161b0:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   161b4:	e0bfffc3 	ldbu	r2,-1(fp)
   161b8:	100b883a 	mov	r5,r2
   161bc:	e13ffe17 	ldw	r4,-8(fp)
   161c0:	0015f680 	call	15f68 <alt_up_character_lcd_send_cmd>
	return 0;
   161c4:	0005883a 	mov	r2,zero
}
   161c8:	e037883a 	mov	sp,fp
   161cc:	dfc00117 	ldw	ra,4(sp)
   161d0:	df000017 	ldw	fp,0(sp)
   161d4:	dec00204 	addi	sp,sp,8
   161d8:	f800283a 	ret

000161dc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   161dc:	defffb04 	addi	sp,sp,-20
   161e0:	dfc00415 	stw	ra,16(sp)
   161e4:	df000315 	stw	fp,12(sp)
   161e8:	df000304 	addi	fp,sp,12
   161ec:	e13ffe15 	stw	r4,-8(fp)
   161f0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   161f4:	e0bffd17 	ldw	r2,-12(fp)
   161f8:	10001526 	beq	r2,zero,16250 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   161fc:	e0bffd17 	ldw	r2,-12(fp)
   16200:	0080020e 	bge	zero,r2,1620c <alt_up_character_lcd_shift_cursor+0x30>
   16204:	00800504 	movi	r2,20
   16208:	00000106 	br	16210 <alt_up_character_lcd_shift_cursor+0x34>
   1620c:	00800404 	movi	r2,16
   16210:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16214:	e0bffd17 	ldw	r2,-12(fp)
   16218:	1000010e 	bge	r2,zero,16220 <alt_up_character_lcd_shift_cursor+0x44>
   1621c:	0085c83a 	sub	r2,zero,r2
   16220:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16224:	00000406 	br	16238 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16228:	e0bfff83 	ldbu	r2,-2(fp)
   1622c:	100b883a 	mov	r5,r2
   16230:	e13ffe17 	ldw	r4,-8(fp)
   16234:	0015f680 	call	15f68 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   16238:	e0bfffc3 	ldbu	r2,-1(fp)
   1623c:	10ffffc4 	addi	r3,r2,-1
   16240:	e0ffffc5 	stb	r3,-1(fp)
   16244:	10803fcc 	andi	r2,r2,255
   16248:	103ff71e 	bne	r2,zero,16228 <alt_up_character_lcd_shift_cursor+0x4c>
   1624c:	00000106 	br	16254 <alt_up_character_lcd_shift_cursor+0x78>
		return;
   16250:	0001883a 	nop
}
   16254:	e037883a 	mov	sp,fp
   16258:	dfc00117 	ldw	ra,4(sp)
   1625c:	df000017 	ldw	fp,0(sp)
   16260:	dec00204 	addi	sp,sp,8
   16264:	f800283a 	ret

00016268 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16268:	defffb04 	addi	sp,sp,-20
   1626c:	dfc00415 	stw	ra,16(sp)
   16270:	df000315 	stw	fp,12(sp)
   16274:	df000304 	addi	fp,sp,12
   16278:	e13ffe15 	stw	r4,-8(fp)
   1627c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   16280:	e0bffd17 	ldw	r2,-12(fp)
   16284:	10001526 	beq	r2,zero,162dc <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   16288:	e0bffd17 	ldw	r2,-12(fp)
   1628c:	0080020e 	bge	zero,r2,16298 <alt_up_character_lcd_shift_display+0x30>
   16290:	00800704 	movi	r2,28
   16294:	00000106 	br	1629c <alt_up_character_lcd_shift_display+0x34>
   16298:	00800604 	movi	r2,24
   1629c:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   162a0:	e0bffd17 	ldw	r2,-12(fp)
   162a4:	1000010e 	bge	r2,zero,162ac <alt_up_character_lcd_shift_display+0x44>
   162a8:	0085c83a 	sub	r2,zero,r2
   162ac:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   162b0:	00000406 	br	162c4 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   162b4:	e0bfff83 	ldbu	r2,-2(fp)
   162b8:	100b883a 	mov	r5,r2
   162bc:	e13ffe17 	ldw	r4,-8(fp)
   162c0:	0015f680 	call	15f68 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   162c4:	e0bfffc3 	ldbu	r2,-1(fp)
   162c8:	10ffffc4 	addi	r3,r2,-1
   162cc:	e0ffffc5 	stb	r3,-1(fp)
   162d0:	10803fcc 	andi	r2,r2,255
   162d4:	103ff71e 	bne	r2,zero,162b4 <alt_up_character_lcd_shift_display+0x4c>
   162d8:	00000106 	br	162e0 <alt_up_character_lcd_shift_display+0x78>
		return;
   162dc:	0001883a 	nop
}
   162e0:	e037883a 	mov	sp,fp
   162e4:	dfc00117 	ldw	ra,4(sp)
   162e8:	df000017 	ldw	fp,0(sp)
   162ec:	dec00204 	addi	sp,sp,8
   162f0:	f800283a 	ret

000162f4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   162f4:	defffa04 	addi	sp,sp,-24
   162f8:	dfc00515 	stw	ra,20(sp)
   162fc:	df000415 	stw	fp,16(sp)
   16300:	df000404 	addi	fp,sp,16
   16304:	e13ffe15 	stw	r4,-8(fp)
   16308:	e17ffd15 	stw	r5,-12(fp)
   1630c:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   16310:	e0bffd17 	ldw	r2,-12(fp)
   16314:	10800a28 	cmpgeui	r2,r2,40
   16318:	1000031e 	bne	r2,zero,16328 <alt_up_character_lcd_erase_pos+0x34>
   1631c:	e0bffc17 	ldw	r2,-16(fp)
   16320:	108000b0 	cmpltui	r2,r2,2
   16324:	1000021e 	bne	r2,zero,16330 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   16328:	00bfffc4 	movi	r2,-1
   1632c:	00000f06 	br	1636c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16330:	e17ffc17 	ldw	r5,-16(fp)
   16334:	e13ffd17 	ldw	r4,-12(fp)
   16338:	0015ef40 	call	15ef4 <get_DDRAM_addr>
   1633c:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   16340:	e0bfffc3 	ldbu	r2,-1(fp)
   16344:	100b883a 	mov	r5,r2
   16348:	e13ffe17 	ldw	r4,-8(fp)
   1634c:	0015f680 	call	15f68 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   16350:	e0bffe17 	ldw	r2,-8(fp)
   16354:	10800a17 	ldw	r2,40(r2)
   16358:	10800044 	addi	r2,r2,1
   1635c:	1007883a 	mov	r3,r2
   16360:	00800084 	movi	r2,2
   16364:	18800025 	stbio	r2,0(r3)
	return 0;
   16368:	0005883a 	mov	r2,zero
}
   1636c:	e037883a 	mov	sp,fp
   16370:	dfc00117 	ldw	ra,4(sp)
   16374:	df000017 	ldw	fp,0(sp)
   16378:	dec00204 	addi	sp,sp,8
   1637c:	f800283a 	ret

00016380 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   16380:	defffd04 	addi	sp,sp,-12
   16384:	dfc00215 	stw	ra,8(sp)
   16388:	df000115 	stw	fp,4(sp)
   1638c:	df000104 	addi	fp,sp,4
   16390:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   16394:	01400304 	movi	r5,12
   16398:	e13fff17 	ldw	r4,-4(fp)
   1639c:	0015f680 	call	15f68 <alt_up_character_lcd_send_cmd>
}
   163a0:	0001883a 	nop
   163a4:	e037883a 	mov	sp,fp
   163a8:	dfc00117 	ldw	ra,4(sp)
   163ac:	df000017 	ldw	fp,0(sp)
   163b0:	dec00204 	addi	sp,sp,8
   163b4:	f800283a 	ret

000163b8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   163b8:	defffd04 	addi	sp,sp,-12
   163bc:	dfc00215 	stw	ra,8(sp)
   163c0:	df000115 	stw	fp,4(sp)
   163c4:	df000104 	addi	fp,sp,4
   163c8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   163cc:	014003c4 	movi	r5,15
   163d0:	e13fff17 	ldw	r4,-4(fp)
   163d4:	0015f680 	call	15f68 <alt_up_character_lcd_send_cmd>
}
   163d8:	0001883a 	nop
   163dc:	e037883a 	mov	sp,fp
   163e0:	dfc00117 	ldw	ra,4(sp)
   163e4:	df000017 	ldw	fp,0(sp)
   163e8:	dec00204 	addi	sp,sp,8
   163ec:	f800283a 	ret

000163f0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   163f0:	defffd04 	addi	sp,sp,-12
   163f4:	df000215 	stw	fp,8(sp)
   163f8:	df000204 	addi	fp,sp,8
   163fc:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   16400:	e0bffe17 	ldw	r2,-8(fp)
   16404:	10800a17 	ldw	r2,40(r2)
   16408:	10800104 	addi	r2,r2,4
   1640c:	10800037 	ldwio	r2,0(r2)
   16410:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   16414:	e0bfff17 	ldw	r2,-4(fp)
   16418:	10800054 	ori	r2,r2,1
   1641c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   16420:	e0bffe17 	ldw	r2,-8(fp)
   16424:	10800a17 	ldw	r2,40(r2)
   16428:	10800104 	addi	r2,r2,4
   1642c:	1007883a 	mov	r3,r2
   16430:	e0bfff17 	ldw	r2,-4(fp)
   16434:	18800035 	stwio	r2,0(r3)
}
   16438:	0001883a 	nop
   1643c:	e037883a 	mov	sp,fp
   16440:	df000017 	ldw	fp,0(sp)
   16444:	dec00104 	addi	sp,sp,4
   16448:	f800283a 	ret

0001644c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1644c:	defffd04 	addi	sp,sp,-12
   16450:	df000215 	stw	fp,8(sp)
   16454:	df000204 	addi	fp,sp,8
   16458:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1645c:	e0bffe17 	ldw	r2,-8(fp)
   16460:	10800a17 	ldw	r2,40(r2)
   16464:	10800104 	addi	r2,r2,4
   16468:	10800037 	ldwio	r2,0(r2)
   1646c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   16470:	e0ffff17 	ldw	r3,-4(fp)
   16474:	00bfff84 	movi	r2,-2
   16478:	1884703a 	and	r2,r3,r2
   1647c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   16480:	e0bffe17 	ldw	r2,-8(fp)
   16484:	10800a17 	ldw	r2,40(r2)
   16488:	10800104 	addi	r2,r2,4
   1648c:	1007883a 	mov	r3,r2
   16490:	e0bfff17 	ldw	r2,-4(fp)
   16494:	18800035 	stwio	r2,0(r3)
}
   16498:	0001883a 	nop
   1649c:	e037883a 	mov	sp,fp
   164a0:	df000017 	ldw	fp,0(sp)
   164a4:	dec00104 	addi	sp,sp,4
   164a8:	f800283a 	ret

000164ac <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   164ac:	defffd04 	addi	sp,sp,-12
   164b0:	df000215 	stw	fp,8(sp)
   164b4:	df000204 	addi	fp,sp,8
   164b8:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
   164bc:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   164c0:	e0bffe17 	ldw	r2,-8(fp)
   164c4:	10800a17 	ldw	r2,40(r2)
   164c8:	10800084 	addi	r2,r2,2
   164cc:	1080002b 	ldhuio	r2,0(r2)
   164d0:	10bfffcc 	andi	r2,r2,65535
   164d4:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   164d8:	e0bfff8b 	ldhu	r2,-2(fp)
}
   164dc:	e037883a 	mov	sp,fp
   164e0:	df000017 	ldw	fp,0(sp)
   164e4:	dec00104 	addi	sp,sp,4
   164e8:	f800283a 	ret

000164ec <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   164ec:	defffd04 	addi	sp,sp,-12
   164f0:	df000215 	stw	fp,8(sp)
   164f4:	df000204 	addi	fp,sp,8
   164f8:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   164fc:	e0bffe17 	ldw	r2,-8(fp)
   16500:	10800a17 	ldw	r2,40(r2)
   16504:	10800104 	addi	r2,r2,4
   16508:	10800037 	ldwio	r2,0(r2)
   1650c:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   16510:	e0bfff17 	ldw	r2,-4(fp)
   16514:	1004d43a 	srli	r2,r2,16
}
   16518:	e037883a 	mov	sp,fp
   1651c:	df000017 	ldw	fp,0(sp)
   16520:	dec00104 	addi	sp,sp,4
   16524:	f800283a 	ret

00016528 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   16528:	defffd04 	addi	sp,sp,-12
   1652c:	df000215 	stw	fp,8(sp)
   16530:	df000204 	addi	fp,sp,8
   16534:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   16538:	e0bffe17 	ldw	r2,-8(fp)
   1653c:	1004d27a 	srli	r2,r2,9
   16540:	1080004c 	andi	r2,r2,1
   16544:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
   16548:	e0bfff17 	ldw	r2,-4(fp)
   1654c:	10000226 	beq	r2,zero,16558 <alt_up_rs232_check_parity+0x30>
   16550:	00bfffc4 	movi	r2,-1
   16554:	00000106 	br	1655c <alt_up_rs232_check_parity+0x34>
   16558:	0005883a 	mov	r2,zero
}
   1655c:	e037883a 	mov	sp,fp
   16560:	df000017 	ldw	fp,0(sp)
   16564:	dec00104 	addi	sp,sp,4
   16568:	f800283a 	ret

0001656c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1656c:	defffd04 	addi	sp,sp,-12
   16570:	df000215 	stw	fp,8(sp)
   16574:	df000204 	addi	fp,sp,8
   16578:	e13fff15 	stw	r4,-4(fp)
   1657c:	2805883a 	mov	r2,r5
   16580:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   16584:	e0bfff17 	ldw	r2,-4(fp)
   16588:	10800a17 	ldw	r2,40(r2)
   1658c:	1007883a 	mov	r3,r2
   16590:	e0bffe03 	ldbu	r2,-8(fp)
   16594:	18800035 	stwio	r2,0(r3)
	return 0;
   16598:	0005883a 	mov	r2,zero
}
   1659c:	e037883a 	mov	sp,fp
   165a0:	df000017 	ldw	fp,0(sp)
   165a4:	dec00104 	addi	sp,sp,4
   165a8:	f800283a 	ret

000165ac <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   165ac:	defffa04 	addi	sp,sp,-24
   165b0:	dfc00515 	stw	ra,20(sp)
   165b4:	df000415 	stw	fp,16(sp)
   165b8:	df000404 	addi	fp,sp,16
   165bc:	e13ffe15 	stw	r4,-8(fp)
   165c0:	e17ffd15 	stw	r5,-12(fp)
   165c4:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   165c8:	e0bffe17 	ldw	r2,-8(fp)
   165cc:	10800a17 	ldw	r2,40(r2)
   165d0:	10800037 	ldwio	r2,0(r2)
   165d4:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   165d8:	e0bfff17 	ldw	r2,-4(fp)
   165dc:	1007883a 	mov	r3,r2
   165e0:	e0bffd17 	ldw	r2,-12(fp)
   165e4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   165e8:	e13fff17 	ldw	r4,-4(fp)
   165ec:	00165280 	call	16528 <alt_up_rs232_check_parity>
   165f0:	1007883a 	mov	r3,r2
   165f4:	e0bffc17 	ldw	r2,-16(fp)
   165f8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   165fc:	e0bfff17 	ldw	r2,-4(fp)
   16600:	1004d3fa 	srli	r2,r2,15
   16604:	1080004c 	andi	r2,r2,1
   16608:	10bfffc4 	addi	r2,r2,-1
}
   1660c:	e037883a 	mov	sp,fp
   16610:	dfc00117 	ldw	ra,4(sp)
   16614:	df000017 	ldw	fp,0(sp)
   16618:	dec00204 	addi	sp,sp,8
   1661c:	f800283a 	ret

00016620 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   16620:	defff804 	addi	sp,sp,-32
   16624:	dfc00715 	stw	ra,28(sp)
   16628:	df000615 	stw	fp,24(sp)
   1662c:	df000604 	addi	fp,sp,24
   16630:	e13ffc15 	stw	r4,-16(fp)
   16634:	e17ffb15 	stw	r5,-20(fp)
   16638:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1663c:	e0bffc17 	ldw	r2,-16(fp)
   16640:	10800017 	ldw	r2,0(r2)
   16644:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   16648:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
   1664c:	00000c06 	br	16680 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   16650:	e0bffb17 	ldw	r2,-20(fp)
   16654:	10c00044 	addi	r3,r2,1
   16658:	e0fffb15 	stw	r3,-20(fp)
   1665c:	e0fffdc4 	addi	r3,fp,-9
   16660:	180d883a 	mov	r6,r3
   16664:	100b883a 	mov	r5,r2
   16668:	e13ffe17 	ldw	r4,-8(fp)
   1666c:	00165ac0 	call	165ac <alt_up_rs232_read_data>
   16670:	1000081e 	bne	r2,zero,16694 <alt_up_rs232_read_fd+0x74>
			count++;
   16674:	e0bfff17 	ldw	r2,-4(fp)
   16678:	10800044 	addi	r2,r2,1
   1667c:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
   16680:	e0bffa17 	ldw	r2,-24(fp)
   16684:	10ffffc4 	addi	r3,r2,-1
   16688:	e0fffa15 	stw	r3,-24(fp)
   1668c:	103ff01e 	bne	r2,zero,16650 <alt_up_rs232_read_fd+0x30>
   16690:	00000106 	br	16698 <alt_up_rs232_read_fd+0x78>
		else
			break;
   16694:	0001883a 	nop
	}
	return count;
   16698:	e0bfff17 	ldw	r2,-4(fp)
}
   1669c:	e037883a 	mov	sp,fp
   166a0:	dfc00117 	ldw	ra,4(sp)
   166a4:	df000017 	ldw	fp,0(sp)
   166a8:	dec00204 	addi	sp,sp,8
   166ac:	f800283a 	ret

000166b0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   166b0:	defff904 	addi	sp,sp,-28
   166b4:	dfc00615 	stw	ra,24(sp)
   166b8:	df000515 	stw	fp,20(sp)
   166bc:	df000504 	addi	fp,sp,20
   166c0:	e13ffd15 	stw	r4,-12(fp)
   166c4:	e17ffc15 	stw	r5,-16(fp)
   166c8:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   166cc:	e0bffd17 	ldw	r2,-12(fp)
   166d0:	10800017 	ldw	r2,0(r2)
   166d4:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   166d8:	e03fff15 	stw	zero,-4(fp)
	while(len--)
   166dc:	00000d06 	br	16714 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   166e0:	e0bffc17 	ldw	r2,-16(fp)
   166e4:	10800003 	ldbu	r2,0(r2)
   166e8:	10803fcc 	andi	r2,r2,255
   166ec:	100b883a 	mov	r5,r2
   166f0:	e13ffe17 	ldw	r4,-8(fp)
   166f4:	001656c0 	call	1656c <alt_up_rs232_write_data>
   166f8:	10000b1e 	bne	r2,zero,16728 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   166fc:	e0bfff17 	ldw	r2,-4(fp)
   16700:	10800044 	addi	r2,r2,1
   16704:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
   16708:	e0bffc17 	ldw	r2,-16(fp)
   1670c:	10800044 	addi	r2,r2,1
   16710:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
   16714:	e0bffb17 	ldw	r2,-20(fp)
   16718:	10ffffc4 	addi	r3,r2,-1
   1671c:	e0fffb15 	stw	r3,-20(fp)
   16720:	103fef1e 	bne	r2,zero,166e0 <alt_up_rs232_write_fd+0x30>
   16724:	00000106 	br	1672c <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
   16728:	0001883a 	nop
	}
	return count;
   1672c:	e0bfff17 	ldw	r2,-4(fp)
}
   16730:	e037883a 	mov	sp,fp
   16734:	dfc00117 	ldw	ra,4(sp)
   16738:	df000017 	ldw	fp,0(sp)
   1673c:	dec00204 	addi	sp,sp,8
   16740:	f800283a 	ret

00016744 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   16744:	defffc04 	addi	sp,sp,-16
   16748:	dfc00315 	stw	ra,12(sp)
   1674c:	df000215 	stw	fp,8(sp)
   16750:	df000204 	addi	fp,sp,8
   16754:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   16758:	d1600604 	addi	r5,gp,-32744
   1675c:	e13ffe17 	ldw	r4,-8(fp)
   16760:	0016aac0 	call	16aac <alt_find_dev>
   16764:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   16768:	e0bfff17 	ldw	r2,-4(fp)
}
   1676c:	e037883a 	mov	sp,fp
   16770:	dfc00117 	ldw	ra,4(sp)
   16774:	df000017 	ldw	fp,0(sp)
   16778:	dec00204 	addi	sp,sp,8
   1677c:	f800283a 	ret

00016780 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   16780:	defff404 	addi	sp,sp,-48
   16784:	df000b15 	stw	fp,44(sp)
   16788:	df000b04 	addi	fp,sp,44
   1678c:	e13ff815 	stw	r4,-32(fp)
   16790:	e17ff715 	stw	r5,-36(fp)
   16794:	e1bff615 	stw	r6,-40(fp)
   16798:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   1679c:	e03ffe15 	stw	zero,-8(fp)
   167a0:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   167a4:	d0a73b17 	ldw	r2,-25364(gp)
  
  if (alt_ticks_per_second ())
   167a8:	10004826 	beq	r2,zero,168cc <alt_alarm_start+0x14c>
  {
    if (alarm)
   167ac:	e0bff817 	ldw	r2,-32(fp)
   167b0:	10004426 	beq	r2,zero,168c4 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   167b4:	e0bff817 	ldw	r2,-32(fp)
   167b8:	e0fff617 	ldw	r3,-40(fp)
   167bc:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   167c0:	e0bff817 	ldw	r2,-32(fp)
   167c4:	e0fff517 	ldw	r3,-44(fp)
   167c8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   167cc:	0005303a 	rdctl	r2,status
   167d0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167d4:	e0fff917 	ldw	r3,-28(fp)
   167d8:	00bfff84 	movi	r2,-2
   167dc:	1884703a 	and	r2,r3,r2
   167e0:	1001703a 	wrctl	status,r2
  return context;
   167e4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   167e8:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   167ec:	d0a73c17 	ldw	r2,-25360(gp)
   167f0:	d0e73d17 	ldw	r3,-25356(gp)
      
      current_nticks = alt_nticks();
   167f4:	e0bffe15 	stw	r2,-8(fp)
   167f8:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   167fc:	e0bff717 	ldw	r2,-36(fp)
   16800:	1011883a 	mov	r8,r2
   16804:	0013883a 	mov	r9,zero
   16808:	e13ffe17 	ldw	r4,-8(fp)
   1680c:	e17fff17 	ldw	r5,-4(fp)
   16810:	4105883a 	add	r2,r8,r4
   16814:	120d803a 	cmpltu	r6,r2,r8
   16818:	4947883a 	add	r3,r9,r5
   1681c:	30c9883a 	add	r4,r6,r3
   16820:	2007883a 	mov	r3,r4
   16824:	1009883a 	mov	r4,r2
   16828:	180b883a 	mov	r5,r3
   1682c:	01800044 	movi	r6,1
   16830:	000f883a 	mov	r7,zero
   16834:	2185883a 	add	r2,r4,r6
   16838:	1111803a 	cmpltu	r8,r2,r4
   1683c:	29c7883a 	add	r3,r5,r7
   16840:	40c9883a 	add	r4,r8,r3
   16844:	2007883a 	mov	r3,r4
   16848:	1009883a 	mov	r4,r2
   1684c:	180b883a 	mov	r5,r3
   16850:	e0bff817 	ldw	r2,-32(fp)
   16854:	11000215 	stw	r4,8(r2)
   16858:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1685c:	e0bff817 	ldw	r2,-32(fp)
   16860:	d0e00c04 	addi	r3,gp,-32720
   16864:	e0fffb15 	stw	r3,-20(fp)
   16868:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1686c:	e0bffa17 	ldw	r2,-24(fp)
   16870:	e0fffb17 	ldw	r3,-20(fp)
   16874:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16878:	e0bffb17 	ldw	r2,-20(fp)
   1687c:	10c00017 	ldw	r3,0(r2)
   16880:	e0bffa17 	ldw	r2,-24(fp)
   16884:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16888:	e0bffb17 	ldw	r2,-20(fp)
   1688c:	10800017 	ldw	r2,0(r2)
   16890:	e0fffa17 	ldw	r3,-24(fp)
   16894:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16898:	e0bffb17 	ldw	r2,-20(fp)
   1689c:	e0fffa17 	ldw	r3,-24(fp)
   168a0:	10c00015 	stw	r3,0(r2)
}
   168a4:	0001883a 	nop
   168a8:	e0bffd17 	ldw	r2,-12(fp)
   168ac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   168b0:	e0bffc17 	ldw	r2,-16(fp)
   168b4:	1001703a 	wrctl	status,r2
}
   168b8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   168bc:	0005883a 	mov	r2,zero
   168c0:	00000306 	br	168d0 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   168c4:	00bffa84 	movi	r2,-22
   168c8:	00000106 	br	168d0 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   168cc:	00bfde84 	movi	r2,-134
  }
}
   168d0:	e037883a 	mov	sp,fp
   168d4:	df000017 	ldw	fp,0(sp)
   168d8:	dec00104 	addi	sp,sp,4
   168dc:	f800283a 	ret

000168e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   168e0:	deffff04 	addi	sp,sp,-4
   168e4:	df000015 	stw	fp,0(sp)
   168e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   168ec:	0001883a 	nop
   168f0:	e037883a 	mov	sp,fp
   168f4:	df000017 	ldw	fp,0(sp)
   168f8:	dec00104 	addi	sp,sp,4
   168fc:	f800283a 	ret

00016900 <alt_get_errno>:
{
   16900:	defffe04 	addi	sp,sp,-8
   16904:	dfc00115 	stw	ra,4(sp)
   16908:	df000015 	stw	fp,0(sp)
   1690c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16910:	d0a00917 	ldw	r2,-32732(gp)
   16914:	10000326 	beq	r2,zero,16924 <alt_get_errno+0x24>
   16918:	d0a00917 	ldw	r2,-32732(gp)
   1691c:	103ee83a 	callr	r2
   16920:	00000106 	br	16928 <alt_get_errno+0x28>
   16924:	d0a73504 	addi	r2,gp,-25388
}
   16928:	e037883a 	mov	sp,fp
   1692c:	dfc00117 	ldw	ra,4(sp)
   16930:	df000017 	ldw	fp,0(sp)
   16934:	dec00204 	addi	sp,sp,8
   16938:	f800283a 	ret

0001693c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1693c:	defffa04 	addi	sp,sp,-24
   16940:	dfc00515 	stw	ra,20(sp)
   16944:	df000415 	stw	fp,16(sp)
   16948:	df000404 	addi	fp,sp,16
   1694c:	e13ffd15 	stw	r4,-12(fp)
   16950:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16954:	e0bffd17 	ldw	r2,-12(fp)
   16958:	10000326 	beq	r2,zero,16968 <alt_dev_llist_insert+0x2c>
   1695c:	e0bffd17 	ldw	r2,-12(fp)
   16960:	10800217 	ldw	r2,8(r2)
   16964:	1000061e 	bne	r2,zero,16980 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   16968:	00169000 	call	16900 <alt_get_errno>
   1696c:	1007883a 	mov	r3,r2
   16970:	00800584 	movi	r2,22
   16974:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   16978:	00bffa84 	movi	r2,-22
   1697c:	00001406 	br	169d0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16980:	e0bffd17 	ldw	r2,-12(fp)
   16984:	e0fffc17 	ldw	r3,-16(fp)
   16988:	e0ffff15 	stw	r3,-4(fp)
   1698c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   16990:	e0bffe17 	ldw	r2,-8(fp)
   16994:	e0ffff17 	ldw	r3,-4(fp)
   16998:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1699c:	e0bfff17 	ldw	r2,-4(fp)
   169a0:	10c00017 	ldw	r3,0(r2)
   169a4:	e0bffe17 	ldw	r2,-8(fp)
   169a8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   169ac:	e0bfff17 	ldw	r2,-4(fp)
   169b0:	10800017 	ldw	r2,0(r2)
   169b4:	e0fffe17 	ldw	r3,-8(fp)
   169b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   169bc:	e0bfff17 	ldw	r2,-4(fp)
   169c0:	e0fffe17 	ldw	r3,-8(fp)
   169c4:	10c00015 	stw	r3,0(r2)
}
   169c8:	0001883a 	nop

  return 0;  
   169cc:	0005883a 	mov	r2,zero
}
   169d0:	e037883a 	mov	sp,fp
   169d4:	dfc00117 	ldw	ra,4(sp)
   169d8:	df000017 	ldw	fp,0(sp)
   169dc:	dec00204 	addi	sp,sp,8
   169e0:	f800283a 	ret

000169e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   169e4:	defffd04 	addi	sp,sp,-12
   169e8:	dfc00215 	stw	ra,8(sp)
   169ec:	df000115 	stw	fp,4(sp)
   169f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   169f4:	00800074 	movhi	r2,1
   169f8:	109dd704 	addi	r2,r2,30556
   169fc:	e0bfff15 	stw	r2,-4(fp)
   16a00:	00000606 	br	16a1c <_do_ctors+0x38>
        (*ctor) (); 
   16a04:	e0bfff17 	ldw	r2,-4(fp)
   16a08:	10800017 	ldw	r2,0(r2)
   16a0c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16a10:	e0bfff17 	ldw	r2,-4(fp)
   16a14:	10bfff04 	addi	r2,r2,-4
   16a18:	e0bfff15 	stw	r2,-4(fp)
   16a1c:	e0ffff17 	ldw	r3,-4(fp)
   16a20:	00800074 	movhi	r2,1
   16a24:	109dd804 	addi	r2,r2,30560
   16a28:	18bff62e 	bgeu	r3,r2,16a04 <_do_ctors+0x20>
}
   16a2c:	0001883a 	nop
   16a30:	0001883a 	nop
   16a34:	e037883a 	mov	sp,fp
   16a38:	dfc00117 	ldw	ra,4(sp)
   16a3c:	df000017 	ldw	fp,0(sp)
   16a40:	dec00204 	addi	sp,sp,8
   16a44:	f800283a 	ret

00016a48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16a48:	defffd04 	addi	sp,sp,-12
   16a4c:	dfc00215 	stw	ra,8(sp)
   16a50:	df000115 	stw	fp,4(sp)
   16a54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16a58:	00800074 	movhi	r2,1
   16a5c:	109dd704 	addi	r2,r2,30556
   16a60:	e0bfff15 	stw	r2,-4(fp)
   16a64:	00000606 	br	16a80 <_do_dtors+0x38>
        (*dtor) (); 
   16a68:	e0bfff17 	ldw	r2,-4(fp)
   16a6c:	10800017 	ldw	r2,0(r2)
   16a70:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16a74:	e0bfff17 	ldw	r2,-4(fp)
   16a78:	10bfff04 	addi	r2,r2,-4
   16a7c:	e0bfff15 	stw	r2,-4(fp)
   16a80:	e0ffff17 	ldw	r3,-4(fp)
   16a84:	00800074 	movhi	r2,1
   16a88:	109dd804 	addi	r2,r2,30560
   16a8c:	18bff62e 	bgeu	r3,r2,16a68 <_do_dtors+0x20>
}
   16a90:	0001883a 	nop
   16a94:	0001883a 	nop
   16a98:	e037883a 	mov	sp,fp
   16a9c:	dfc00117 	ldw	ra,4(sp)
   16aa0:	df000017 	ldw	fp,0(sp)
   16aa4:	dec00204 	addi	sp,sp,8
   16aa8:	f800283a 	ret

00016aac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16aac:	defffa04 	addi	sp,sp,-24
   16ab0:	dfc00515 	stw	ra,20(sp)
   16ab4:	df000415 	stw	fp,16(sp)
   16ab8:	df000404 	addi	fp,sp,16
   16abc:	e13ffd15 	stw	r4,-12(fp)
   16ac0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16ac4:	e0bffc17 	ldw	r2,-16(fp)
   16ac8:	10800017 	ldw	r2,0(r2)
   16acc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16ad0:	e13ffd17 	ldw	r4,-12(fp)
   16ad4:	00109640 	call	10964 <strlen>
   16ad8:	10800044 	addi	r2,r2,1
   16adc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16ae0:	00000d06 	br	16b18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16ae4:	e0bfff17 	ldw	r2,-4(fp)
   16ae8:	10800217 	ldw	r2,8(r2)
   16aec:	e0fffe17 	ldw	r3,-8(fp)
   16af0:	180d883a 	mov	r6,r3
   16af4:	e17ffd17 	ldw	r5,-12(fp)
   16af8:	1009883a 	mov	r4,r2
   16afc:	00175380 	call	17538 <memcmp>
   16b00:	1000021e 	bne	r2,zero,16b0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16b04:	e0bfff17 	ldw	r2,-4(fp)
   16b08:	00000706 	br	16b28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16b0c:	e0bfff17 	ldw	r2,-4(fp)
   16b10:	10800017 	ldw	r2,0(r2)
   16b14:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   16b18:	e0ffff17 	ldw	r3,-4(fp)
   16b1c:	e0bffc17 	ldw	r2,-16(fp)
   16b20:	18bff01e 	bne	r3,r2,16ae4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   16b24:	0005883a 	mov	r2,zero
}
   16b28:	e037883a 	mov	sp,fp
   16b2c:	dfc00117 	ldw	ra,4(sp)
   16b30:	df000017 	ldw	fp,0(sp)
   16b34:	dec00204 	addi	sp,sp,8
   16b38:	f800283a 	ret

00016b3c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16b3c:	deffff04 	addi	sp,sp,-4
   16b40:	df000015 	stw	fp,0(sp)
   16b44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   16b48:	0001883a 	nop
   16b4c:	e037883a 	mov	sp,fp
   16b50:	df000017 	ldw	fp,0(sp)
   16b54:	dec00104 	addi	sp,sp,4
   16b58:	f800283a 	ret

00016b5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16b5c:	defff904 	addi	sp,sp,-28
   16b60:	dfc00615 	stw	ra,24(sp)
   16b64:	df000515 	stw	fp,20(sp)
   16b68:	df000504 	addi	fp,sp,20
   16b6c:	e13ffe15 	stw	r4,-8(fp)
   16b70:	e17ffd15 	stw	r5,-12(fp)
   16b74:	e1bffc15 	stw	r6,-16(fp)
   16b78:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   16b7c:	e1bffb17 	ldw	r6,-20(fp)
   16b80:	e17ffc17 	ldw	r5,-16(fp)
   16b84:	e13ffd17 	ldw	r4,-12(fp)
   16b88:	0016f440 	call	16f44 <open>
   16b8c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   16b90:	e0bfff17 	ldw	r2,-4(fp)
   16b94:	10002016 	blt	r2,zero,16c18 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   16b98:	e0ffff17 	ldw	r3,-4(fp)
   16b9c:	1805883a 	mov	r2,r3
   16ba0:	1085883a 	add	r2,r2,r2
   16ba4:	10c5883a 	add	r2,r2,r3
   16ba8:	100490ba 	slli	r2,r2,2
   16bac:	00c000b4 	movhi	r3,2
   16bb0:	10c7883a 	add	r3,r2,r3
   16bb4:	18e27717 	ldw	r3,-30244(r3)
   16bb8:	e0bffe17 	ldw	r2,-8(fp)
   16bbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16bc0:	e0ffff17 	ldw	r3,-4(fp)
   16bc4:	1805883a 	mov	r2,r3
   16bc8:	1085883a 	add	r2,r2,r2
   16bcc:	10c5883a 	add	r2,r2,r3
   16bd0:	100490ba 	slli	r2,r2,2
   16bd4:	00c000b4 	movhi	r3,2
   16bd8:	10c7883a 	add	r3,r2,r3
   16bdc:	18e27817 	ldw	r3,-30240(r3)
   16be0:	e0bffe17 	ldw	r2,-8(fp)
   16be4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16be8:	e0ffff17 	ldw	r3,-4(fp)
   16bec:	1805883a 	mov	r2,r3
   16bf0:	1085883a 	add	r2,r2,r2
   16bf4:	10c5883a 	add	r2,r2,r3
   16bf8:	100490ba 	slli	r2,r2,2
   16bfc:	00c000b4 	movhi	r3,2
   16c00:	10c7883a 	add	r3,r2,r3
   16c04:	18e27917 	ldw	r3,-30236(r3)
   16c08:	e0bffe17 	ldw	r2,-8(fp)
   16c0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16c10:	e13fff17 	ldw	r4,-4(fp)
   16c14:	00150140 	call	15014 <alt_release_fd>
  }
} 
   16c18:	0001883a 	nop
   16c1c:	e037883a 	mov	sp,fp
   16c20:	dfc00117 	ldw	ra,4(sp)
   16c24:	df000017 	ldw	fp,0(sp)
   16c28:	dec00204 	addi	sp,sp,8
   16c2c:	f800283a 	ret

00016c30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16c30:	defffb04 	addi	sp,sp,-20
   16c34:	dfc00415 	stw	ra,16(sp)
   16c38:	df000315 	stw	fp,12(sp)
   16c3c:	df000304 	addi	fp,sp,12
   16c40:	e13fff15 	stw	r4,-4(fp)
   16c44:	e17ffe15 	stw	r5,-8(fp)
   16c48:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16c4c:	01c07fc4 	movi	r7,511
   16c50:	01800044 	movi	r6,1
   16c54:	e17fff17 	ldw	r5,-4(fp)
   16c58:	010000b4 	movhi	r4,2
   16c5c:	21227a04 	addi	r4,r4,-30232
   16c60:	0016b5c0 	call	16b5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16c64:	01c07fc4 	movi	r7,511
   16c68:	000d883a 	mov	r6,zero
   16c6c:	e17ffe17 	ldw	r5,-8(fp)
   16c70:	010000b4 	movhi	r4,2
   16c74:	21227704 	addi	r4,r4,-30244
   16c78:	0016b5c0 	call	16b5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16c7c:	01c07fc4 	movi	r7,511
   16c80:	01800044 	movi	r6,1
   16c84:	e17ffd17 	ldw	r5,-12(fp)
   16c88:	010000b4 	movhi	r4,2
   16c8c:	21227d04 	addi	r4,r4,-30220
   16c90:	0016b5c0 	call	16b5c <alt_open_fd>
}  
   16c94:	0001883a 	nop
   16c98:	e037883a 	mov	sp,fp
   16c9c:	dfc00117 	ldw	ra,4(sp)
   16ca0:	df000017 	ldw	fp,0(sp)
   16ca4:	dec00204 	addi	sp,sp,8
   16ca8:	f800283a 	ret

00016cac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   16cac:	defff004 	addi	sp,sp,-64
   16cb0:	df000f15 	stw	fp,60(sp)
   16cb4:	df000f04 	addi	fp,sp,60
   16cb8:	e13ff315 	stw	r4,-52(fp)
   16cbc:	e17ff215 	stw	r5,-56(fp)
   16cc0:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   16cc4:	00bffa84 	movi	r2,-22
   16cc8:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   16ccc:	e0bff317 	ldw	r2,-52(fp)
   16cd0:	10800828 	cmpgeui	r2,r2,32
   16cd4:	1000501e 	bne	r2,zero,16e18 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   16cd8:	0005303a 	rdctl	r2,status
   16cdc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ce0:	e0fffd17 	ldw	r3,-12(fp)
   16ce4:	00bfff84 	movi	r2,-2
   16ce8:	1884703a 	and	r2,r3,r2
   16cec:	1001703a 	wrctl	status,r2
  return context;
   16cf0:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   16cf4:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   16cf8:	e0bff317 	ldw	r2,-52(fp)
   16cfc:	100890fa 	slli	r4,r2,3
   16d00:	e0fff117 	ldw	r3,-60(fp)
   16d04:	008000b4 	movhi	r2,2
   16d08:	2085883a 	add	r2,r4,r2
   16d0c:	10ee6615 	stw	r3,-18024(r2)
    alt_irq[id].context = context;
   16d10:	e0bff317 	ldw	r2,-52(fp)
   16d14:	100890fa 	slli	r4,r2,3
   16d18:	e0fff217 	ldw	r3,-56(fp)
   16d1c:	008000b4 	movhi	r2,2
   16d20:	2085883a 	add	r2,r4,r2
   16d24:	10ee6715 	stw	r3,-18020(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   16d28:	e0bff117 	ldw	r2,-60(fp)
   16d2c:	10001a26 	beq	r2,zero,16d98 <alt_irq_register+0xec>
   16d30:	e0bff317 	ldw	r2,-52(fp)
   16d34:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   16d38:	0005303a 	rdctl	r2,status
   16d3c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d40:	e0fffb17 	ldw	r3,-20(fp)
   16d44:	00bfff84 	movi	r2,-2
   16d48:	1884703a 	and	r2,r3,r2
   16d4c:	1001703a 	wrctl	status,r2
  return context;
   16d50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16d54:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   16d58:	00c00044 	movi	r3,1
   16d5c:	e0bffc17 	ldw	r2,-16(fp)
   16d60:	1884983a 	sll	r2,r3,r2
   16d64:	1007883a 	mov	r3,r2
   16d68:	d0a73a17 	ldw	r2,-25368(gp)
   16d6c:	1884b03a 	or	r2,r3,r2
   16d70:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16d74:	d0a73a17 	ldw	r2,-25368(gp)
   16d78:	100170fa 	wrctl	ienable,r2
   16d7c:	e0bffa17 	ldw	r2,-24(fp)
   16d80:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   16d84:	e0bff917 	ldw	r2,-28(fp)
   16d88:	1001703a 	wrctl	status,r2
}
   16d8c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   16d90:	0005883a 	mov	r2,zero
   16d94:	00001a06 	br	16e00 <alt_irq_register+0x154>
   16d98:	e0bff317 	ldw	r2,-52(fp)
   16d9c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   16da0:	0005303a 	rdctl	r2,status
   16da4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16da8:	e0fff717 	ldw	r3,-36(fp)
   16dac:	00bfff84 	movi	r2,-2
   16db0:	1884703a 	and	r2,r3,r2
   16db4:	1001703a 	wrctl	status,r2
  return context;
   16db8:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   16dbc:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   16dc0:	00c00044 	movi	r3,1
   16dc4:	e0bff817 	ldw	r2,-32(fp)
   16dc8:	1884983a 	sll	r2,r3,r2
   16dcc:	0084303a 	nor	r2,zero,r2
   16dd0:	1007883a 	mov	r3,r2
   16dd4:	d0a73a17 	ldw	r2,-25368(gp)
   16dd8:	1884703a 	and	r2,r3,r2
   16ddc:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16de0:	d0a73a17 	ldw	r2,-25368(gp)
   16de4:	100170fa 	wrctl	ienable,r2
   16de8:	e0bff617 	ldw	r2,-40(fp)
   16dec:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   16df0:	e0bff517 	ldw	r2,-44(fp)
   16df4:	1001703a 	wrctl	status,r2
}
   16df8:	0001883a 	nop
  return 0;
   16dfc:	0005883a 	mov	r2,zero
   16e00:	e0bfff15 	stw	r2,-4(fp)
   16e04:	e0bffe17 	ldw	r2,-8(fp)
   16e08:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   16e0c:	e0bff417 	ldw	r2,-48(fp)
   16e10:	1001703a 	wrctl	status,r2
}
   16e14:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   16e18:	e0bfff17 	ldw	r2,-4(fp)
}
   16e1c:	e037883a 	mov	sp,fp
   16e20:	df000017 	ldw	fp,0(sp)
   16e24:	dec00104 	addi	sp,sp,4
   16e28:	f800283a 	ret

00016e2c <alt_get_errno>:
{
   16e2c:	defffe04 	addi	sp,sp,-8
   16e30:	dfc00115 	stw	ra,4(sp)
   16e34:	df000015 	stw	fp,0(sp)
   16e38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16e3c:	d0a00917 	ldw	r2,-32732(gp)
   16e40:	10000326 	beq	r2,zero,16e50 <alt_get_errno+0x24>
   16e44:	d0a00917 	ldw	r2,-32732(gp)
   16e48:	103ee83a 	callr	r2
   16e4c:	00000106 	br	16e54 <alt_get_errno+0x28>
   16e50:	d0a73504 	addi	r2,gp,-25388
}
   16e54:	e037883a 	mov	sp,fp
   16e58:	dfc00117 	ldw	ra,4(sp)
   16e5c:	df000017 	ldw	fp,0(sp)
   16e60:	dec00204 	addi	sp,sp,8
   16e64:	f800283a 	ret

00016e68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16e68:	defffd04 	addi	sp,sp,-12
   16e6c:	df000215 	stw	fp,8(sp)
   16e70:	df000204 	addi	fp,sp,8
   16e74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16e78:	e0bffe17 	ldw	r2,-8(fp)
   16e7c:	10800217 	ldw	r2,8(r2)
   16e80:	10d00034 	orhi	r3,r2,16384
   16e84:	e0bffe17 	ldw	r2,-8(fp)
   16e88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16e8c:	e03fff15 	stw	zero,-4(fp)
   16e90:	00002306 	br	16f20 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16e94:	e0ffff17 	ldw	r3,-4(fp)
   16e98:	1805883a 	mov	r2,r3
   16e9c:	1085883a 	add	r2,r2,r2
   16ea0:	10c5883a 	add	r2,r2,r3
   16ea4:	100490ba 	slli	r2,r2,2
   16ea8:	00c000b4 	movhi	r3,2
   16eac:	10c7883a 	add	r3,r2,r3
   16eb0:	18e27717 	ldw	r3,-30244(r3)
   16eb4:	e0bffe17 	ldw	r2,-8(fp)
   16eb8:	10800017 	ldw	r2,0(r2)
   16ebc:	1880151e 	bne	r3,r2,16f14 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16ec0:	e0ffff17 	ldw	r3,-4(fp)
   16ec4:	1805883a 	mov	r2,r3
   16ec8:	1085883a 	add	r2,r2,r2
   16ecc:	10c5883a 	add	r2,r2,r3
   16ed0:	100490ba 	slli	r2,r2,2
   16ed4:	00c000b4 	movhi	r3,2
   16ed8:	10c7883a 	add	r3,r2,r3
   16edc:	18a27917 	ldw	r2,-30236(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   16ee0:	10000c0e 	bge	r2,zero,16f14 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   16ee4:	e0ffff17 	ldw	r3,-4(fp)
   16ee8:	1805883a 	mov	r2,r3
   16eec:	1085883a 	add	r2,r2,r2
   16ef0:	10c5883a 	add	r2,r2,r3
   16ef4:	100490ba 	slli	r2,r2,2
   16ef8:	00c000b4 	movhi	r3,2
   16efc:	18e27704 	addi	r3,r3,-30244
   16f00:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16f04:	e0fffe17 	ldw	r3,-8(fp)
   16f08:	18800226 	beq	r3,r2,16f14 <alt_file_locked+0xac>
    {
      return -EACCES;
   16f0c:	00bffcc4 	movi	r2,-13
   16f10:	00000806 	br	16f34 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   16f14:	e0bfff17 	ldw	r2,-4(fp)
   16f18:	10800044 	addi	r2,r2,1
   16f1c:	e0bfff15 	stw	r2,-4(fp)
   16f20:	d0a00817 	ldw	r2,-32736(gp)
   16f24:	1007883a 	mov	r3,r2
   16f28:	e0bfff17 	ldw	r2,-4(fp)
   16f2c:	18bfd92e 	bgeu	r3,r2,16e94 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16f30:	0005883a 	mov	r2,zero
}
   16f34:	e037883a 	mov	sp,fp
   16f38:	df000017 	ldw	fp,0(sp)
   16f3c:	dec00104 	addi	sp,sp,4
   16f40:	f800283a 	ret

00016f44 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   16f44:	defff604 	addi	sp,sp,-40
   16f48:	dfc00915 	stw	ra,36(sp)
   16f4c:	df000815 	stw	fp,32(sp)
   16f50:	df000804 	addi	fp,sp,32
   16f54:	e13ffa15 	stw	r4,-24(fp)
   16f58:	e17ff915 	stw	r5,-28(fp)
   16f5c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16f60:	00bfffc4 	movi	r2,-1
   16f64:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   16f68:	00bffb44 	movi	r2,-19
   16f6c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   16f70:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   16f74:	d1600604 	addi	r5,gp,-32744
   16f78:	e13ffa17 	ldw	r4,-24(fp)
   16f7c:	0016aac0 	call	16aac <alt_find_dev>
   16f80:	e0bfff15 	stw	r2,-4(fp)
   16f84:	e0bfff17 	ldw	r2,-4(fp)
   16f88:	1000051e 	bne	r2,zero,16fa0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16f8c:	e13ffa17 	ldw	r4,-24(fp)
   16f90:	00172980 	call	17298 <alt_find_file>
   16f94:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   16f98:	00800044 	movi	r2,1
   16f9c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   16fa0:	e0bfff17 	ldw	r2,-4(fp)
   16fa4:	10002c26 	beq	r2,zero,17058 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   16fa8:	e13fff17 	ldw	r4,-4(fp)
   16fac:	00173a00 	call	173a0 <alt_get_fd>
   16fb0:	e0bffe15 	stw	r2,-8(fp)
   16fb4:	e0bffe17 	ldw	r2,-8(fp)
   16fb8:	1000030e 	bge	r2,zero,16fc8 <open+0x84>
    {
      status = index;
   16fbc:	e0bffe17 	ldw	r2,-8(fp)
   16fc0:	e0bffd15 	stw	r2,-12(fp)
   16fc4:	00002606 	br	17060 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   16fc8:	e0fffe17 	ldw	r3,-8(fp)
   16fcc:	1805883a 	mov	r2,r3
   16fd0:	1085883a 	add	r2,r2,r2
   16fd4:	10c5883a 	add	r2,r2,r3
   16fd8:	100490ba 	slli	r2,r2,2
   16fdc:	00c000b4 	movhi	r3,2
   16fe0:	18e27704 	addi	r3,r3,-30244
   16fe4:	10c5883a 	add	r2,r2,r3
   16fe8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   16fec:	e0fff917 	ldw	r3,-28(fp)
   16ff0:	00900034 	movhi	r2,16384
   16ff4:	10bfffc4 	addi	r2,r2,-1
   16ff8:	1886703a 	and	r3,r3,r2
   16ffc:	e0bffb17 	ldw	r2,-20(fp)
   17000:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   17004:	e0bffc17 	ldw	r2,-16(fp)
   17008:	1000051e 	bne	r2,zero,17020 <open+0xdc>
   1700c:	e13ffb17 	ldw	r4,-20(fp)
   17010:	0016e680 	call	16e68 <alt_file_locked>
   17014:	e0bffd15 	stw	r2,-12(fp)
   17018:	e0bffd17 	ldw	r2,-12(fp)
   1701c:	10001016 	blt	r2,zero,17060 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   17020:	e0bfff17 	ldw	r2,-4(fp)
   17024:	10800317 	ldw	r2,12(r2)
   17028:	10000826 	beq	r2,zero,1704c <open+0x108>
   1702c:	e0bfff17 	ldw	r2,-4(fp)
   17030:	10800317 	ldw	r2,12(r2)
   17034:	e1fff817 	ldw	r7,-32(fp)
   17038:	e1bff917 	ldw	r6,-28(fp)
   1703c:	e17ffa17 	ldw	r5,-24(fp)
   17040:	e13ffb17 	ldw	r4,-20(fp)
   17044:	103ee83a 	callr	r2
   17048:	00000106 	br	17050 <open+0x10c>
   1704c:	0005883a 	mov	r2,zero
   17050:	e0bffd15 	stw	r2,-12(fp)
   17054:	00000206 	br	17060 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   17058:	00bffb44 	movi	r2,-19
   1705c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   17060:	e0bffd17 	ldw	r2,-12(fp)
   17064:	1000090e 	bge	r2,zero,1708c <open+0x148>
  {
    alt_release_fd (index);  
   17068:	e13ffe17 	ldw	r4,-8(fp)
   1706c:	00150140 	call	15014 <alt_release_fd>
    ALT_ERRNO = -status;
   17070:	0016e2c0 	call	16e2c <alt_get_errno>
   17074:	1007883a 	mov	r3,r2
   17078:	e0bffd17 	ldw	r2,-12(fp)
   1707c:	0085c83a 	sub	r2,zero,r2
   17080:	18800015 	stw	r2,0(r3)
    return -1;
   17084:	00bfffc4 	movi	r2,-1
   17088:	00000106 	br	17090 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   1708c:	e0bffe17 	ldw	r2,-8(fp)
}
   17090:	e037883a 	mov	sp,fp
   17094:	dfc00117 	ldw	ra,4(sp)
   17098:	df000017 	ldw	fp,0(sp)
   1709c:	dec00204 	addi	sp,sp,8
   170a0:	f800283a 	ret

000170a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   170a4:	defffa04 	addi	sp,sp,-24
   170a8:	df000515 	stw	fp,20(sp)
   170ac:	df000504 	addi	fp,sp,20
   170b0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   170b4:	0005303a 	rdctl	r2,status
   170b8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170bc:	e0fffc17 	ldw	r3,-16(fp)
   170c0:	00bfff84 	movi	r2,-2
   170c4:	1884703a 	and	r2,r3,r2
   170c8:	1001703a 	wrctl	status,r2
  return context;
   170cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   170d0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   170d4:	e0bffb17 	ldw	r2,-20(fp)
   170d8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   170dc:	e0bffd17 	ldw	r2,-12(fp)
   170e0:	10800017 	ldw	r2,0(r2)
   170e4:	e0fffd17 	ldw	r3,-12(fp)
   170e8:	18c00117 	ldw	r3,4(r3)
   170ec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   170f0:	e0bffd17 	ldw	r2,-12(fp)
   170f4:	10800117 	ldw	r2,4(r2)
   170f8:	e0fffd17 	ldw	r3,-12(fp)
   170fc:	18c00017 	ldw	r3,0(r3)
   17100:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   17104:	e0bffd17 	ldw	r2,-12(fp)
   17108:	e0fffd17 	ldw	r3,-12(fp)
   1710c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   17110:	e0bffd17 	ldw	r2,-12(fp)
   17114:	e0fffd17 	ldw	r3,-12(fp)
   17118:	10c00015 	stw	r3,0(r2)
} 
   1711c:	0001883a 	nop
   17120:	e0bfff17 	ldw	r2,-4(fp)
   17124:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   17128:	e0bffe17 	ldw	r2,-8(fp)
   1712c:	1001703a 	wrctl	status,r2
}
   17130:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   17134:	0001883a 	nop
   17138:	e037883a 	mov	sp,fp
   1713c:	df000017 	ldw	fp,0(sp)
   17140:	dec00104 	addi	sp,sp,4
   17144:	f800283a 	ret

00017148 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   17148:	defff904 	addi	sp,sp,-28
   1714c:	dfc00615 	stw	ra,24(sp)
   17150:	df000515 	stw	fp,20(sp)
   17154:	dc400415 	stw	r17,16(sp)
   17158:	dc000315 	stw	r16,12(sp)
   1715c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   17160:	d0a00c17 	ldw	r2,-32720(gp)
   17164:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   17168:	d1273c17 	ldw	r4,-25360(gp)
   1716c:	d1673d17 	ldw	r5,-25356(gp)
   17170:	01800044 	movi	r6,1
   17174:	000f883a 	mov	r7,zero
   17178:	2185883a 	add	r2,r4,r6
   1717c:	1111803a 	cmpltu	r8,r2,r4
   17180:	29c7883a 	add	r3,r5,r7
   17184:	40c9883a 	add	r4,r8,r3
   17188:	2007883a 	mov	r3,r4
   1718c:	1009883a 	mov	r4,r2
   17190:	180b883a 	mov	r5,r3
   17194:	d1273c15 	stw	r4,-25360(gp)
   17198:	d1673d15 	stw	r5,-25356(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1719c:	00002906 	br	17244 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   171a0:	e0bffd17 	ldw	r2,-12(fp)
   171a4:	10800017 	ldw	r2,0(r2)
   171a8:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   171ac:	e13ffd17 	ldw	r4,-12(fp)
   171b0:	20800217 	ldw	r2,8(r4)
   171b4:	20c00317 	ldw	r3,12(r4)
   171b8:	d1273c17 	ldw	r4,-25360(gp)
   171bc:	d1673d17 	ldw	r5,-25356(gp)
   171c0:	28c01e36 	bltu	r5,r3,1723c <alt_tick+0xf4>
   171c4:	1940011e 	bne	r3,r5,171cc <alt_tick+0x84>
   171c8:	20801c36 	bltu	r4,r2,1723c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   171cc:	e0bffd17 	ldw	r2,-12(fp)
   171d0:	10800417 	ldw	r2,16(r2)
   171d4:	e0fffd17 	ldw	r3,-12(fp)
   171d8:	18c00517 	ldw	r3,20(r3)
   171dc:	1809883a 	mov	r4,r3
   171e0:	103ee83a 	callr	r2
   171e4:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   171e8:	e0bffb17 	ldw	r2,-20(fp)
   171ec:	1000031e 	bne	r2,zero,171fc <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   171f0:	e13ffd17 	ldw	r4,-12(fp)
   171f4:	00170a40 	call	170a4 <alt_alarm_stop>
   171f8:	00001006 	br	1723c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   171fc:	e0bffd17 	ldw	r2,-12(fp)
   17200:	11000217 	ldw	r4,8(r2)
   17204:	11400317 	ldw	r5,12(r2)
   17208:	e0bffb17 	ldw	r2,-20(fp)
   1720c:	1021883a 	mov	r16,r2
   17210:	0023883a 	mov	r17,zero
   17214:	2405883a 	add	r2,r4,r16
   17218:	110d803a 	cmpltu	r6,r2,r4
   1721c:	2c47883a 	add	r3,r5,r17
   17220:	30c9883a 	add	r4,r6,r3
   17224:	2007883a 	mov	r3,r4
   17228:	1009883a 	mov	r4,r2
   1722c:	180b883a 	mov	r5,r3
   17230:	e0bffd17 	ldw	r2,-12(fp)
   17234:	11000215 	stw	r4,8(r2)
   17238:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   1723c:	e0bffc17 	ldw	r2,-16(fp)
   17240:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   17244:	e0fffd17 	ldw	r3,-12(fp)
   17248:	d0a00c04 	addi	r2,gp,-32720
   1724c:	18bfd41e 	bne	r3,r2,171a0 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   17250:	0001883a 	nop
}
   17254:	0001883a 	nop
   17258:	e6fffe04 	addi	sp,fp,-8
   1725c:	dfc00317 	ldw	ra,12(sp)
   17260:	df000217 	ldw	fp,8(sp)
   17264:	dc400117 	ldw	r17,4(sp)
   17268:	dc000017 	ldw	r16,0(sp)
   1726c:	dec00404 	addi	sp,sp,16
   17270:	f800283a 	ret

00017274 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   17274:	deffff04 	addi	sp,sp,-4
   17278:	df000015 	stw	fp,0(sp)
   1727c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17280:	000170fa 	wrctl	ienable,zero
}
   17284:	0001883a 	nop
   17288:	e037883a 	mov	sp,fp
   1728c:	df000017 	ldw	fp,0(sp)
   17290:	dec00104 	addi	sp,sp,4
   17294:	f800283a 	ret

00017298 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17298:	defffb04 	addi	sp,sp,-20
   1729c:	dfc00415 	stw	ra,16(sp)
   172a0:	df000315 	stw	fp,12(sp)
   172a4:	df000304 	addi	fp,sp,12
   172a8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   172ac:	d0a00417 	ldw	r2,-32752(gp)
   172b0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   172b4:	00003106 	br	1737c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   172b8:	e0bfff17 	ldw	r2,-4(fp)
   172bc:	10800217 	ldw	r2,8(r2)
   172c0:	1009883a 	mov	r4,r2
   172c4:	00109640 	call	10964 <strlen>
   172c8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   172cc:	e0bfff17 	ldw	r2,-4(fp)
   172d0:	10c00217 	ldw	r3,8(r2)
   172d4:	e0bffe17 	ldw	r2,-8(fp)
   172d8:	10bfffc4 	addi	r2,r2,-1
   172dc:	1885883a 	add	r2,r3,r2
   172e0:	10800003 	ldbu	r2,0(r2)
   172e4:	10803fcc 	andi	r2,r2,255
   172e8:	1080201c 	xori	r2,r2,128
   172ec:	10bfe004 	addi	r2,r2,-128
   172f0:	10800bd8 	cmpnei	r2,r2,47
   172f4:	1000031e 	bne	r2,zero,17304 <alt_find_file+0x6c>
    {
      len -= 1;
   172f8:	e0bffe17 	ldw	r2,-8(fp)
   172fc:	10bfffc4 	addi	r2,r2,-1
   17300:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17304:	e0bffe17 	ldw	r2,-8(fp)
   17308:	e0fffd17 	ldw	r3,-12(fp)
   1730c:	1885883a 	add	r2,r3,r2
   17310:	10800003 	ldbu	r2,0(r2)
   17314:	10803fcc 	andi	r2,r2,255
   17318:	1080201c 	xori	r2,r2,128
   1731c:	10bfe004 	addi	r2,r2,-128
   17320:	10800be0 	cmpeqi	r2,r2,47
   17324:	1000081e 	bne	r2,zero,17348 <alt_find_file+0xb0>
   17328:	e0bffe17 	ldw	r2,-8(fp)
   1732c:	e0fffd17 	ldw	r3,-12(fp)
   17330:	1885883a 	add	r2,r3,r2
   17334:	10800003 	ldbu	r2,0(r2)
   17338:	10803fcc 	andi	r2,r2,255
   1733c:	1080201c 	xori	r2,r2,128
   17340:	10bfe004 	addi	r2,r2,-128
   17344:	10000a1e 	bne	r2,zero,17370 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17348:	e0bfff17 	ldw	r2,-4(fp)
   1734c:	10800217 	ldw	r2,8(r2)
   17350:	e0fffe17 	ldw	r3,-8(fp)
   17354:	180d883a 	mov	r6,r3
   17358:	e17ffd17 	ldw	r5,-12(fp)
   1735c:	1009883a 	mov	r4,r2
   17360:	00175380 	call	17538 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   17364:	1000021e 	bne	r2,zero,17370 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   17368:	e0bfff17 	ldw	r2,-4(fp)
   1736c:	00000706 	br	1738c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   17370:	e0bfff17 	ldw	r2,-4(fp)
   17374:	10800017 	ldw	r2,0(r2)
   17378:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   1737c:	e0ffff17 	ldw	r3,-4(fp)
   17380:	d0a00404 	addi	r2,gp,-32752
   17384:	18bfcc1e 	bne	r3,r2,172b8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   17388:	0005883a 	mov	r2,zero
}
   1738c:	e037883a 	mov	sp,fp
   17390:	dfc00117 	ldw	ra,4(sp)
   17394:	df000017 	ldw	fp,0(sp)
   17398:	dec00204 	addi	sp,sp,8
   1739c:	f800283a 	ret

000173a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   173a0:	defffc04 	addi	sp,sp,-16
   173a4:	df000315 	stw	fp,12(sp)
   173a8:	df000304 	addi	fp,sp,12
   173ac:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   173b0:	00bffa04 	movi	r2,-24
   173b4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   173b8:	e03fff15 	stw	zero,-4(fp)
   173bc:	00001d06 	br	17434 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   173c0:	e0ffff17 	ldw	r3,-4(fp)
   173c4:	1805883a 	mov	r2,r3
   173c8:	1085883a 	add	r2,r2,r2
   173cc:	10c5883a 	add	r2,r2,r3
   173d0:	100490ba 	slli	r2,r2,2
   173d4:	00c000b4 	movhi	r3,2
   173d8:	10c7883a 	add	r3,r2,r3
   173dc:	18a27717 	ldw	r2,-30244(r3)
   173e0:	1000111e 	bne	r2,zero,17428 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   173e4:	e0ffff17 	ldw	r3,-4(fp)
   173e8:	1805883a 	mov	r2,r3
   173ec:	1085883a 	add	r2,r2,r2
   173f0:	10c5883a 	add	r2,r2,r3
   173f4:	100490ba 	slli	r2,r2,2
   173f8:	e13ffd17 	ldw	r4,-12(fp)
   173fc:	00c000b4 	movhi	r3,2
   17400:	10c7883a 	add	r3,r2,r3
   17404:	19227715 	stw	r4,-30244(r3)
      if (i > alt_max_fd)
   17408:	d0e00817 	ldw	r3,-32736(gp)
   1740c:	e0bfff17 	ldw	r2,-4(fp)
   17410:	1880020e 	bge	r3,r2,1741c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   17414:	e0bfff17 	ldw	r2,-4(fp)
   17418:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   1741c:	e0bfff17 	ldw	r2,-4(fp)
   17420:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   17424:	00000706 	br	17444 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   17428:	e0bfff17 	ldw	r2,-4(fp)
   1742c:	10800044 	addi	r2,r2,1
   17430:	e0bfff15 	stw	r2,-4(fp)
   17434:	e0bfff17 	ldw	r2,-4(fp)
   17438:	10800810 	cmplti	r2,r2,32
   1743c:	103fe01e 	bne	r2,zero,173c0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   17440:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   17444:	e0bffe17 	ldw	r2,-8(fp)
}
   17448:	e037883a 	mov	sp,fp
   1744c:	df000017 	ldw	fp,0(sp)
   17450:	dec00104 	addi	sp,sp,4
   17454:	f800283a 	ret

00017458 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   17458:	defffe04 	addi	sp,sp,-8
   1745c:	df000115 	stw	fp,4(sp)
   17460:	df000104 	addi	fp,sp,4
   17464:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   17468:	e0bfff17 	ldw	r2,-4(fp)
   1746c:	10bffe84 	addi	r2,r2,-6
   17470:	10c00428 	cmpgeui	r3,r2,16
   17474:	1800191e 	bne	r3,zero,174dc <alt_exception_cause_generated_bad_addr+0x84>
   17478:	100690ba 	slli	r3,r2,2
   1747c:	00800074 	movhi	r2,1
   17480:	1885883a 	add	r2,r3,r2
   17484:	109d2317 	ldw	r2,29836(r2)
   17488:	1000683a 	jmp	r2
   1748c:	000174cc 	andi	zero,zero,1491
   17490:	000174cc 	andi	zero,zero,1491
   17494:	000174dc 	xori	zero,zero,1491
   17498:	000174dc 	xori	zero,zero,1491
   1749c:	000174dc 	xori	zero,zero,1491
   174a0:	000174cc 	andi	zero,zero,1491
   174a4:	000174d4 	movui	zero,1491
   174a8:	000174dc 	xori	zero,zero,1491
   174ac:	000174cc 	andi	zero,zero,1491
   174b0:	000174cc 	andi	zero,zero,1491
   174b4:	000174dc 	xori	zero,zero,1491
   174b8:	000174cc 	andi	zero,zero,1491
   174bc:	000174d4 	movui	zero,1491
   174c0:	000174dc 	xori	zero,zero,1491
   174c4:	000174dc 	xori	zero,zero,1491
   174c8:	000174cc 	andi	zero,zero,1491
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   174cc:	00800044 	movi	r2,1
   174d0:	00000306 	br	174e0 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   174d4:	0005883a 	mov	r2,zero
   174d8:	00000106 	br	174e0 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   174dc:	0005883a 	mov	r2,zero
  }
}
   174e0:	e037883a 	mov	sp,fp
   174e4:	df000017 	ldw	fp,0(sp)
   174e8:	dec00104 	addi	sp,sp,4
   174ec:	f800283a 	ret

000174f0 <atexit>:
   174f0:	200b883a 	mov	r5,r4
   174f4:	000f883a 	mov	r7,zero
   174f8:	000d883a 	mov	r6,zero
   174fc:	0009883a 	mov	r4,zero
   17500:	00175b01 	jmpi	175b0 <__register_exitproc>

00017504 <exit>:
   17504:	defffe04 	addi	sp,sp,-8
   17508:	000b883a 	mov	r5,zero
   1750c:	dc000015 	stw	r16,0(sp)
   17510:	dfc00115 	stw	ra,4(sp)
   17514:	2021883a 	mov	r16,r4
   17518:	00176400 	call	17640 <__call_exitprocs>
   1751c:	008000b4 	movhi	r2,2
   17520:	11271d17 	ldw	r4,-25484(r2)
   17524:	20800f17 	ldw	r2,60(r4)
   17528:	10000126 	beq	r2,zero,17530 <exit+0x2c>
   1752c:	103ee83a 	callr	r2
   17530:	8009883a 	mov	r4,r16
   17534:	00148600 	call	14860 <_exit>

00017538 <memcmp>:
   17538:	30800130 	cmpltui	r2,r6,4
   1753c:	10000b1e 	bne	r2,zero,1756c <memcmp+0x34>
   17540:	2144b03a 	or	r2,r4,r5
   17544:	108000cc 	andi	r2,r2,3
   17548:	1000171e 	bne	r2,zero,175a8 <memcmp+0x70>
   1754c:	20c00017 	ldw	r3,0(r4)
   17550:	28800017 	ldw	r2,0(r5)
   17554:	1880141e 	bne	r3,r2,175a8 <memcmp+0x70>
   17558:	31bfff04 	addi	r6,r6,-4
   1755c:	30800128 	cmpgeui	r2,r6,4
   17560:	21000104 	addi	r4,r4,4
   17564:	29400104 	addi	r5,r5,4
   17568:	103ff81e 	bne	r2,zero,1754c <memcmp+0x14>
   1756c:	30bfffc4 	addi	r2,r6,-1
   17570:	30000b26 	beq	r6,zero,175a0 <memcmp+0x68>
   17574:	11800044 	addi	r6,r2,1
   17578:	218d883a 	add	r6,r4,r6
   1757c:	00000106 	br	17584 <memcmp+0x4c>
   17580:	21800726 	beq	r4,r6,175a0 <memcmp+0x68>
   17584:	20800003 	ldbu	r2,0(r4)
   17588:	28c00003 	ldbu	r3,0(r5)
   1758c:	21000044 	addi	r4,r4,1
   17590:	29400044 	addi	r5,r5,1
   17594:	10fffa26 	beq	r2,r3,17580 <memcmp+0x48>
   17598:	10c5c83a 	sub	r2,r2,r3
   1759c:	f800283a 	ret
   175a0:	0005883a 	mov	r2,zero
   175a4:	f800283a 	ret
   175a8:	30bfffc4 	addi	r2,r6,-1
   175ac:	003ff106 	br	17574 <memcmp+0x3c>

000175b0 <__register_exitproc>:
   175b0:	008000b4 	movhi	r2,2
   175b4:	10e71d17 	ldw	r3,-25484(r2)
   175b8:	18805217 	ldw	r2,328(r3)
   175bc:	10001726 	beq	r2,zero,1761c <__register_exitproc+0x6c>
   175c0:	10c00117 	ldw	r3,4(r2)
   175c4:	1a000808 	cmpgei	r8,r3,32
   175c8:	40001b1e 	bne	r8,zero,17638 <__register_exitproc+0x88>
   175cc:	20000b26 	beq	r4,zero,175fc <__register_exitproc+0x4c>
   175d0:	181090ba 	slli	r8,r3,2
   175d4:	02400044 	movi	r9,1
   175d8:	48d2983a 	sll	r9,r9,r3
   175dc:	1211883a 	add	r8,r2,r8
   175e0:	41802215 	stw	r6,136(r8)
   175e4:	11806217 	ldw	r6,392(r2)
   175e8:	21000098 	cmpnei	r4,r4,2
   175ec:	324cb03a 	or	r6,r6,r9
   175f0:	11806215 	stw	r6,392(r2)
   175f4:	41c04215 	stw	r7,264(r8)
   175f8:	20000b26 	beq	r4,zero,17628 <__register_exitproc+0x78>
   175fc:	19000084 	addi	r4,r3,2
   17600:	200890ba 	slli	r4,r4,2
   17604:	18c00044 	addi	r3,r3,1
   17608:	10c00115 	stw	r3,4(r2)
   1760c:	1105883a 	add	r2,r2,r4
   17610:	11400015 	stw	r5,0(r2)
   17614:	0005883a 	mov	r2,zero
   17618:	f800283a 	ret
   1761c:	18805304 	addi	r2,r3,332
   17620:	18805215 	stw	r2,328(r3)
   17624:	003fe606 	br	175c0 <__register_exitproc+0x10>
   17628:	11006317 	ldw	r4,396(r2)
   1762c:	2252b03a 	or	r9,r4,r9
   17630:	12406315 	stw	r9,396(r2)
   17634:	003ff106 	br	175fc <__register_exitproc+0x4c>
   17638:	00bfffc4 	movi	r2,-1
   1763c:	f800283a 	ret

00017640 <__call_exitprocs>:
   17640:	defff704 	addi	sp,sp,-36
   17644:	008000b4 	movhi	r2,2
   17648:	dcc00315 	stw	r19,12(sp)
   1764c:	14e71d17 	ldw	r19,-25484(r2)
   17650:	dc800215 	stw	r18,8(sp)
   17654:	dfc00815 	stw	ra,32(sp)
   17658:	9c805217 	ldw	r18,328(r19)
   1765c:	ddc00715 	stw	r23,28(sp)
   17660:	dd800615 	stw	r22,24(sp)
   17664:	dd400515 	stw	r21,20(sp)
   17668:	dd000415 	stw	r20,16(sp)
   1766c:	dc400115 	stw	r17,4(sp)
   17670:	dc000015 	stw	r16,0(sp)
   17674:	90001026 	beq	r18,zero,176b8 <__call_exitprocs+0x78>
   17678:	202b883a 	mov	r21,r4
   1767c:	282d883a 	mov	r22,r5
   17680:	05000044 	movi	r20,1
   17684:	94000117 	ldw	r16,4(r18)
   17688:	847fffc4 	addi	r17,r16,-1
   1768c:	88000a16 	blt	r17,zero,176b8 <__call_exitprocs+0x78>
   17690:	84000044 	addi	r16,r16,1
   17694:	802090ba 	slli	r16,r16,2
   17698:	9421883a 	add	r16,r18,r16
   1769c:	b0001126 	beq	r22,zero,176e4 <__call_exitprocs+0xa4>
   176a0:	80804017 	ldw	r2,256(r16)
   176a4:	15800f26 	beq	r2,r22,176e4 <__call_exitprocs+0xa4>
   176a8:	8c7fffc4 	addi	r17,r17,-1
   176ac:	88bfffd8 	cmpnei	r2,r17,-1
   176b0:	843fff04 	addi	r16,r16,-4
   176b4:	103ff91e 	bne	r2,zero,1769c <__call_exitprocs+0x5c>
   176b8:	dfc00817 	ldw	ra,32(sp)
   176bc:	ddc00717 	ldw	r23,28(sp)
   176c0:	dd800617 	ldw	r22,24(sp)
   176c4:	dd400517 	ldw	r21,20(sp)
   176c8:	dd000417 	ldw	r20,16(sp)
   176cc:	dcc00317 	ldw	r19,12(sp)
   176d0:	dc800217 	ldw	r18,8(sp)
   176d4:	dc400117 	ldw	r17,4(sp)
   176d8:	dc000017 	ldw	r16,0(sp)
   176dc:	dec00904 	addi	sp,sp,36
   176e0:	f800283a 	ret
   176e4:	90800117 	ldw	r2,4(r18)
   176e8:	81800017 	ldw	r6,0(r16)
   176ec:	10bfffc4 	addi	r2,r2,-1
   176f0:	14401726 	beq	r2,r17,17750 <__call_exitprocs+0x110>
   176f4:	80000015 	stw	zero,0(r16)
   176f8:	303feb26 	beq	r6,zero,176a8 <__call_exitprocs+0x68>
   176fc:	a446983a 	sll	r3,r20,r17
   17700:	90806217 	ldw	r2,392(r18)
   17704:	95c00117 	ldw	r23,4(r18)
   17708:	1884703a 	and	r2,r3,r2
   1770c:	1000081e 	bne	r2,zero,17730 <__call_exitprocs+0xf0>
   17710:	303ee83a 	callr	r6
   17714:	90c00117 	ldw	r3,4(r18)
   17718:	98805217 	ldw	r2,328(r19)
   1771c:	1dc0011e 	bne	r3,r23,17724 <__call_exitprocs+0xe4>
   17720:	90bfe126 	beq	r18,r2,176a8 <__call_exitprocs+0x68>
   17724:	103fe426 	beq	r2,zero,176b8 <__call_exitprocs+0x78>
   17728:	1025883a 	mov	r18,r2
   1772c:	003fd506 	br	17684 <__call_exitprocs+0x44>
   17730:	90806317 	ldw	r2,396(r18)
   17734:	81002017 	ldw	r4,128(r16)
   17738:	1886703a 	and	r3,r3,r2
   1773c:	1800061e 	bne	r3,zero,17758 <__call_exitprocs+0x118>
   17740:	200b883a 	mov	r5,r4
   17744:	a809883a 	mov	r4,r21
   17748:	303ee83a 	callr	r6
   1774c:	003ff106 	br	17714 <__call_exitprocs+0xd4>
   17750:	94400115 	stw	r17,4(r18)
   17754:	003fe806 	br	176f8 <__call_exitprocs+0xb8>
   17758:	303ee83a 	callr	r6
   1775c:	003fed06 	br	17714 <__call_exitprocs+0xd4>
