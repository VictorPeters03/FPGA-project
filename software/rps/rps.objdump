
rps.elf:     file format elf32-littlenios2
rps.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010738 memsz 0x00010738 flags r-x
    LOAD off    0x00011758 vaddr 0x00010758 paddr 0x000123e8 align 2**12
         filesz 0x00001c90 memsz 0x00001c90 flags rw-
    LOAD off    0x00000078 vaddr 0x00014078 paddr 0x00014078 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fe6c  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006b0  000100a8  000100a8  000110a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c90  00010758  000123e8  00011758  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00014078  00014078  00014078  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000141d4  000141d4  000133e8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000133e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001078  00000000  00000000  00013418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0002e3ce  00000000  00000000  00014490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000b5fe  00000000  00000000  0004285e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00016e0f  00000000  00000000  0004de5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002708  00000000  00000000  00064c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004379  00000000  00000000  00067374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001dbbc  00000000  00000000  0006b6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000020  00000000  00000000  000892ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002448  00000000  00000000  000892d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0008eea1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0008eea4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008eea9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008eeaa  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008eeab  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008eeaf  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008eeb3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0008eeb7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0008eec0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0008eec9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  0008eed2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  0008eee1  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000dcc54  00000000  00000000  0008ef0d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
000100a8 l    d  .rodata	00000000 .rodata
00010758 l    d  .rwdata	00000000 .rwdata
00014078 l    d  .bss	00000000 .bss
000141d4 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/school/Jaar-3/Periode-4/FPGA/FPGA-project/software/rps_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000025e4 l     F .text	000000c0 __sbprintf
0001010c l     O .rodata	00000010 blanks.1
000100fc l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002808 l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004458 l     F .text	00000008 __fp_lock
0000446c l     F .text	00000008 __fp_unlock
00004474 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010758 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000101c0 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00006de4 l     F .text	000000f4 __sprint_r.part.0
0000815c l     F .text	000000c0 __sbprintf
000102f4 l     O .rodata	00000010 blanks.1
000102e4 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fclose.c
00008438 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d08c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d1fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d308 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0000d3e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d550 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d63c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d810 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000123d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000da58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000db8c l     F .text	00000034 alt_dev_reg
00011298 l     O .rwdata	00001060 JTAG_UART
000122f8 l     O .rwdata	00000030 AV_Config
00012328 l     O .rwdata	00000030 Audio_Subsystem_Audio
00012358 l     O .rwdata	0000002c Char_LCD_16x2
00012384 l     O .rwdata	0000002c Serial_Port
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000deb4 l     F .text	00000210 altera_avalon_jtag_uart_irq
0000e0c4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e708 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000f210 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f480 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f72c l     F .text	0000003c alt_get_errno
0000f768 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000140a8 g     O .bss	00000004 alt_instruction_exception_handler
00006a68 g     F .text	00000070 _mprec_log10
00006b54 g     F .text	00000060 __any_on
00008d14 g     F .text	00000058 _isatty_r
000101cc g     O .rodata	00000028 __mprec_tinytens
0000d74c g     F .text	0000007c alt_main
000140d4 g     O .bss	00000100 alt_irq
00008e60 g     F .text	00000064 _lseek_r
000123e8 g       *ABS*	00000000 __flash_rwdata_start
0000e878 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000bc4c g     F .text	00000080 .hidden __eqdf2
000141d4 g       *ABS*	00000000 __alt_heap_start
00009e30 g     F .text	00000060 _kill_r
00000588 g     F .text	00000038 printf
000097fc g     F .text	0000006c _wcrtomb_r
000099a0 g     F .text	00000098 _signal_r
00006ce8 g     F .text	0000005c __sseek
000047ac g     F .text	00000010 __sinit
0000969c g     F .text	00000148 __swbuf_r
00008d6c g     F .text	00000074 _setlocale_r
000045dc g     F .text	00000068 __sfmoreglue
0000d7ec g     F .text	00000024 __malloc_unlock
0000ef30 g     F .text	00000090 alt_up_rs232_read_fd
00008f14 g     F .text	0000012c memmove
00004798 g     F .text	00000014 _cleanup
00005a54 g     F .text	000000a4 _Balloc
0000bccc g     F .text	000000e8 .hidden __gtdf2
0000fb44 g     F .text	00000024 altera_nios2_gen2_irq_init
0000842c g     F .text	0000000c __errno
0000e804 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00004d4c g     F .text	00000008 __localeconv_l
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008830 g     F .text	00000060 _fstat_r
00014084 g     O .bss	00000004 errno
00006c60 g     F .text	00000008 __seofread
00014090 g     O .bss	00000004 alt_argv
0001a3b0 g       *ABS*	00000000 _gp
0000d2e8 g     F .text	00000020 getpid
00011118 g     O .rwdata	00000180 alt_fd_list
0000f3bc g     F .text	00000090 alt_find_dev
00005864 g     F .text	00000100 memcpy
0000ea28 g     F .text	00000050 alt_up_character_lcd_write_fd
00004460 g     F .text	0000000c _cleanup_r
0000cef0 g     F .text	000000b8 .hidden __floatsidf
0000f530 g     F .text	0000007c alt_io_redirect
0000bdb4 g     F .text	000000e8 .hidden __ltdf2
000100a8 g       *ABS*	00000000 __DTOR_END__
0000eebc g     F .text	00000074 alt_up_rs232_read_data
0000fda0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000069c0 g     F .text	000000a8 __ratio
00008140 g     F .text	0000001c __vfiprintf_internal
0000e2c0 g     F .text	00000220 altera_avalon_jtag_uart_read
00000558 g     F .text	00000030 _printf_r
0000aa4c g     F .text	00000064 .hidden __udivsi3
0000d344 g     F .text	000000a4 isatty
00009a38 g     F .text	000000c4 _raise_r
000082d8 g     F .text	00000064 __assert_func
0001021c g     O .rodata	000000c8 __mprec_tens
0000fd10 g     F .text	00000090 alt_icache_flush
00014080 g     O .bss	00000004 __malloc_top_pad
00009e90 g     F .text	00000004 _getpid_r
00004d54 g     F .text	0000000c _localeconv_r
00008890 g     F .text	00000484 __sfvwrite_r
00005ea0 g     F .text	000000b0 __i2b
00009afc g     F .text	000000bc __sigtramp_r
00006bb4 g     F .text	00000058 _sbrk_r
00009040 g     F .text	00000064 _read_r
000123d0 g     O .rwdata	00000004 alt_max_fd
0000ee38 g     F .text	00000044 alt_up_rs232_check_parity
000084f8 g     F .text	00000070 _fclose_r
000043d4 g     F .text	00000084 fflush
0001407c g     O .bss	00000004 __malloc_max_sbrked_mem
0000f5ac g     F .text	00000180 alt_irq_register
0000ab0c g     F .text	000008f0 .hidden __adddf3
00006754 g     F .text	00000108 __b2d
0000a424 g     F .text	00000534 .hidden __umoddi3
0000d678 g     F .text	000000d4 lseek
000123b0 g     O .rwdata	00000004 _global_impure_ptr
000090a4 g     F .text	0000053c _realloc_r
000141d4 g       *ABS*	00000000 __bss_end
0000fa18 g     F .text	0000012c alt_tick
00009e94 g     F .text	00000590 .hidden __udivdi3
00008794 g     F .text	00000024 _fputwc_r
000101f4 g     O .rodata	00000028 __mprec_bigtens
00005c54 g     F .text	00000138 __s2b
0000992c g     F .text	00000018 abort
0000cfa8 g     F .text	00000090 .hidden __floatunsidf
00006474 g     F .text	00000058 __mcmp
000047cc g     F .text	00000014 __fp_lock_all
0000048c g     F .text	000000cc check_KEYs
0000f974 g     F .text	000000a4 alt_alarm_stop
00014098 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000cc alt_irq_handler
000110f0 g     O .rwdata	00000028 alt_dev_null
0000ecc8 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000f1f0 g     F .text	00000020 alt_dcache_flush_all
00005d8c g     F .text	00000064 __hi0bits
0000ce70 g     F .text	00000080 .hidden __fixdfsi
000123e8 g       *ABS*	00000000 __ram_rwdata_end
000123c8 g     O .rwdata	00000008 alt_dev_list
0000da94 g     F .text	000000f8 write
00010758 g       *ABS*	00000000 __ram_rodata_end
0000d238 g     F .text	000000b0 fstat
0000efc0 g     F .text	00000094 alt_up_rs232_write_fd
0000d424 g     F .text	0000012c kill
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000bdb4 g     F .text	000000e8 .hidden __ledf2
000061a4 g     F .text	00000148 __pow5mult
00006ef0 g     F .text	00001250 ___vfiprintf_internal_r
0000aab0 g     F .text	0000005c .hidden __umodsi3
000141d4 g       *ABS*	00000000 end
0000de00 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001c8 g     F .exceptions	00000074 alt_instruction_exception_entry
000100a8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000e788 g     F .text	0000007c alt_avalon_timer_sc_init
0000d038 g     F .text	00000054 .hidden __clzsi2
0000e4e0 g     F .text	00000228 altera_avalon_jtag_uart_write
000047bc g     F .text	00000004 __sfp_lock_acquire
00005794 g     F .text	000000d0 memchr
0000e92c g     F .text	00000080 alt_up_character_lcd_write
000005c0 g     F .text	00002008 ___vfprintf_internal_r
00004910 g     F .text	000002fc _free_r
00010458 g     O .rodata	00000180 _ctype_b
00008de0 g     F .text	0000000c __locale_mb_cur_max
0000ff88 g     F .text	00000120 __call_exitprocs
000123b8 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
0001409c g     O .bss	00000004 _alt_tick_rate
000062ec g     F .text	00000188 __lshift
000140a0 g     O .bss	00000008 _alt_nticks
00009c74 g     F .text	000000a0 signal
0000d84c g     F .text	000000fc read
0000dbfc g     F .text	000000a0 alt_sys_init
0000eb78 g     F .text	0000008c alt_up_character_lcd_shift_display
0000fef8 g     F .text	00000090 __register_exitproc
0000edfc g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00005f50 g     F .text	00000254 __multiply
0000ec04 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000e164 g     F .text	00000068 altera_avalon_jtag_uart_close
00010758 g       *ABS*	00000000 __ram_rwdata_start
000100a8 g       *ABS*	00000000 __ram_rodata_start
000140ac g     O .bss	00000028 __malloc_current_mallinfo
0000685c g     F .text	00000164 __d2b
0000dc9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000fc70 g     F .text	000000a0 alt_get_fd
00008280 g     F .text	00000058 _close_r
0000fe80 g     F .text	00000078 memcmp
0000dd5c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000141d4 g       *ABS*	00000000 __alt_stack_base
0000ddac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000026a4 g     F .text	00000164 __swsetup_r
0000b3fc g     F .text	00000850 .hidden __divdf3
00004644 g     F .text	00000154 __sfp
00006ad8 g     F .text	0000007c __copybits
00010b7c g     O .rwdata	00000408 __malloc_av_
000047c8 g     F .text	00000004 __sinit_lock_release
0000be9c g     F .text	00000674 .hidden __muldf3
00006c0c g     F .text	00000054 __sread
0000ed5c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000fb68 g     F .text	00000108 alt_find_file
0000f24c g     F .text	000000a8 alt_dev_llist_insert
0000d7c8 g     F .text	00000024 __malloc_lock
0000d9a0 g     F .text	000000b8 sbrk
00004374 g     F .text	00000060 _fflush_r
00008350 g     F .text	000000dc _calloc_r
00014078 g       *ABS*	00000000 __bss_start
00005964 g     F .text	000000f0 memset
00000278 g     F .text	00000214 main
00014094 g     O .bss	00000004 alt_envp
00014078 g     O .bss	00000004 __malloc_max_total_mem
0000dcfc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000097e4 g     F .text	00000018 __swbuf
0000eaec g     F .text	0000008c alt_up_character_lcd_shift_cursor
00006d44 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00008568 g     F .text	00000070 fclose
00002a04 g     F .text	00001748 _dtoa_r
00004fb4 g     F .text	000007e0 _malloc_r
000098fc g     F .text	00000030 __ascii_wctomb
000123d4 g     O .rwdata	00000004 alt_errno
000085d8 g     F .text	00000020 _fiprintf_r
00009d14 g     F .text	00000060 _init_signal
00004c0c g     F .text	00000098 _fwalk
00008ec4 g     F .text	0000000c _mbtowc_r
0000a958 g     F .text	00000080 .hidden __divsi3
0000e8f0 g     F .text	0000003c alt_up_character_lcd_open_dev
000047f4 g     F .text	0000011c _malloc_trim_r
000100a8 g       *ABS*	00000000 __CTOR_END__
0000e8b8 g     F .text	00000038 alt_up_character_lcd_init
000095e0 g     F .text	000000b8 strcmp
000100a8 g       *ABS*	00000000 __flash_rodata_start
000100a8 g       *ABS*	00000000 __DTOR_LIST__
0000f054 g     F .text	0000003c alt_up_rs232_open_dev
0000bc4c g     F .text	00000080 .hidden __nedf2
0000dbc0 g     F .text	0000003c alt_irq_init
0000d948 g     F .text	00000058 alt_release_fd
0000ec90 g     F .text	00000038 alt_up_character_lcd_cursor_off
000105d8 g     O .rodata	00000100 .hidden __clz_tab
00014088 g     O .bss	00000004 _PathLocale
0000fe38 g     F .text	00000014 atexit
0000821c g     F .text	00000064 _write_r
00008dec g     F .text	00000074 setlocale
000123b4 g     O .rwdata	00000004 _impure_ptr
0001408c g     O .bss	00000004 alt_argc
0000414c g     F .text	00000228 __sflush_r
0000f358 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00008ed0 g     F .text	00000044 __ascii_mbtowc
000066f8 g     F .text	0000005c __ulp
000047e0 g     F .text	00000014 __fp_unlock_all
000123c0 g     O .rwdata	00000008 alt_fs_list
0000ed00 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000ee7c g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004d60 g     F .text	0000000c localeconv
00004f1c g     F .text	00000098 __swhatbuf_r
000123e8 g       *ABS*	00000000 _edata
000141d4 g       *ABS*	00000000 _end
00008630 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
0000e1cc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00006c68 g     F .text	00000080 __swrite
000123bc g     O .rwdata	00000004 __malloc_trim_threshold
0000fe4c g     F .text	00000034 exit
000085f8 g     F .text	00000038 fiprintf
00009698 g     F .text	00000004 _vfiprintf_r
00004ca4 g     F .text	000000a8 _fwalk_reent
000064cc g     F .text	0000022c __mdiff
0000a9d8 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000047c0 g     F .text	00000004 __sfp_lock_release
0000e9ac g     F .text	0000007c alt_up_character_lcd_string
00010354 g     O .rodata	00000101 _ctype_
0000ce1c g     F .text	00000054 .hidden __unorddf2
0000d1c4 g     F .text	00000038 _exit
0000f090 g     F .text	00000160 alt_alarm_start
00004d6c g     F .text	000001b0 __smakebuf_r
00006d4c g     F .text	00000098 strlen
00009944 g     F .text	0000005c _init_signal_r
0000f820 g     F .text	00000154 open
0000bccc g     F .text	000000e8 .hidden __gedf2
0000833c g     F .text	00000014 __assert
00006ed8 g     F .text	00000018 __sprint_r
0000f44c g     F .text	00000034 alt_icache_flush_all
0000ea78 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
000123dc g     O .rwdata	00000004 alt_priority_mask
000025c8 g     F .text	0000001c __vfprintf_internal
000098f0 g     F .text	0000000c _wctomb_r
0000c510 g     F .text	0000090c .hidden __subdf3
00005df0 g     F .text	000000b0 __lo0bits
000123e0 g     O .rwdata	00000008 alt_alarm_list
0000f2f4 g     F .text	00000064 _do_ctors
00009d74 g     F .text	000000bc __sigtramp
0000edbc g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00009868 g     F .text	00000088 wcrtomb
0000d0c8 g     F .text	000000d0 close
00010f84 g     O .rwdata	0000016c __global_locale
0000d5b8 g     F .text	00000084 alt_load
000087b8 g     F .text	00000078 fputwc
00009bb8 g     F .text	000000bc raise
000047c4 g     F .text	00000004 __sinit_lock_acquire
00005b1c g     F .text	00000138 __multadd
00005af8 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08408f14 	ori	at,at,572
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	00800074 	movhi	r2,1
 148:	1885883a 	add	r2,r3,r2
 14c:	10d03517 	ldw	r3,16596(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	00800074 	movhi	r2,1
 15c:	2085883a 	add	r2,r4,r2
 160:	10903617 	ldw	r2,16600(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	0001883a 	nop
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1dc:	000531fa 	rdctl	r2,exception
 1e0:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e4:	e0bfff17 	ldw	r2,-4(fp)
 1e8:	1004d0ba 	srli	r2,r2,2
 1ec:	108007cc 	andi	r2,r2,31
 1f0:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f4:	0005333a 	rdctl	r2,badaddr
 1f8:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a73e17 	ldw	r2,-25352(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a73e17 	ldw	r2,-25352(gp)
 208:	e0ffff17 	ldw	r3,-4(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17ffd17 	ldw	r5,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     244:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     248:	d6a8ec14 	ori	gp,gp,41904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     250:	10901e14 	ori	r2,r2,16504

    movhi r3, %hi(__bss_end)
     254:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     258:	18d07514 	ori	r3,r3,16852

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	000d5b80 	call	d5b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000d74c0 	call	d74c <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <alt_after_alt_main>

00000278 <main>:
 * 	1. records audio for 10 seconds when KEY[0] is pressed. LEDR[0] is lit
 *	   while recording.
 * 	2. plays the recorded audio when KEY[1] is pressed. LEDR[1] is lit while
 *	   playing.
 ******************************************************************************/
int main(void) {
     278:	defffe04 	addi	sp,sp,-8
     27c:	dfc00115 	stw	ra,4(sp)
     280:	df000015 	stw	fp,0(sp)
     284:	d839883a 	mov	fp,sp
     288:	023ffdb4 	movhi	r8,65526
     28c:	420efa04 	addi	r8,r8,15336
     290:	da37883a 	add	sp,sp,r8
    /* Declare volatile pointers to I/O registers (volatile means that IO load
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile int * red_LED_ptr = (int *)LED_BASE;
     294:	00bfc834 	movhi	r2,65312
     298:	e0bffe15 	stw	r2,-8(fp)
    volatile int * audio_ptr   = (int *)AUDIO_BASE;
     29c:	00bfc834 	movhi	r2,65312
     2a0:	108c1004 	addi	r2,r2,12352
     2a4:	e0bffd15 	stw	r2,-12(fp)

    printf("TESTTESTTEST");
     2a8:	01000074 	movhi	r4,1
     2ac:	21002a04 	addi	r4,r4,168
     2b0:	00005880 	call	588 <printf>

    /* used for audio record/playback */
    int fifospace;
    int record = 0, play = 0, buffer_index = 0;
     2b4:	e03ffc15 	stw	zero,-16(fp)
     2b8:	e03ffb15 	stw	zero,-20(fp)
     2bc:	e03ffa15 	stw	zero,-24(fp)
    int left_buffer[BUF_SIZE];
    int right_buffer[BUF_SIZE];

    /* read and echo audio data */
    record = 0;
     2c0:	e03ffc15 	stw	zero,-16(fp)
    play   = 0;
     2c4:	e03ffb15 	stw	zero,-20(fp)

    while (1) {
        check_KEYs(&record, &play, &buffer_index);
     2c8:	e13ffa04 	addi	r4,fp,-24
     2cc:	e0fffb04 	addi	r3,fp,-20
     2d0:	e0bffc04 	addi	r2,fp,-16
     2d4:	200d883a 	mov	r6,r4
     2d8:	180b883a 	mov	r5,r3
     2dc:	1009883a 	mov	r4,r2
     2e0:	000048c0 	call	48c <check_KEYs>
        if (record) {
     2e4:	e0bffc17 	ldw	r2,-16(fp)
     2e8:	10003226 	beq	r2,zero,3b4 <main+0x13c>
            *(red_LED_ptr) = 0x1; // turn on LEDR[0]
     2ec:	e0bffe17 	ldw	r2,-8(fp)
     2f0:	00c00044 	movi	r3,1
     2f4:	10c00015 	stw	r3,0(r2)

            fifospace =
     2f8:	e0bffd17 	ldw	r2,-12(fp)
     2fc:	10800117 	ldw	r2,4(r2)
     300:	e0bfff15 	stw	r2,-4(fp)
                *(audio_ptr + 1); // read the audio port fifospace register
            if ((fifospace & 0x000000FF) > BUF_THRESHOLD) // check RARC
     304:	e0bfff17 	ldw	r2,-4(fp)
     308:	10803fcc 	andi	r2,r2,255
     30c:	10801850 	cmplti	r2,r2,97
     310:	103fed1e 	bne	r2,zero,2c8 <main+0x50>
            {
                // store data until the the audio-in FIFO is empty or the buffer
                // is full
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
     314:	00001f06 	br	394 <main+0x11c>
                    left_buffer[buffer_index]  = *(audio_ptr + 2);
     318:	e17ffa17 	ldw	r5,-24(fp)
     31c:	e0bffd17 	ldw	r2,-12(fp)
     320:	10c00217 	ldw	r3,8(r2)
     324:	00bffef4 	movhi	r2,65531
     328:	10877a04 	addi	r2,r2,7656
     32c:	e089883a 	add	r4,fp,r2
     330:	280490ba 	slli	r2,r5,2
     334:	2085883a 	add	r2,r4,r2
     338:	10c00015 	stw	r3,0(r2)
                    right_buffer[buffer_index] = *(audio_ptr + 3);
     33c:	e17ffa17 	ldw	r5,-24(fp)
     340:	e0bffd17 	ldw	r2,-12(fp)
     344:	10c00317 	ldw	r3,12(r2)
     348:	00bffdb4 	movhi	r2,65526
     34c:	108efa04 	addi	r2,r2,15336
     350:	e089883a 	add	r4,fp,r2
     354:	280490ba 	slli	r2,r5,2
     358:	2085883a 	add	r2,r4,r2
     35c:	10c00015 	stw	r3,0(r2)
                    ++buffer_index;
     360:	e0bffa17 	ldw	r2,-24(fp)
     364:	10800044 	addi	r2,r2,1
     368:	e0bffa15 	stw	r2,-24(fp)

                    if (buffer_index == BUF_SIZE) {
     36c:	e0fffa17 	ldw	r3,-24(fp)
     370:	00800074 	movhi	r2,1
     374:	108e2004 	addi	r2,r2,14464
     378:	1880031e 	bne	r3,r2,388 <main+0x110>
                        // done recording
                        record         = 0;
     37c:	e03ffc15 	stw	zero,-16(fp)
                        *(red_LED_ptr) = 0x0; // turn off LEDR
     380:	e0bffe17 	ldw	r2,-8(fp)
     384:	10000015 	stw	zero,0(r2)
                    }
                    fifospace = *(audio_ptr +
     388:	e0bffd17 	ldw	r2,-12(fp)
     38c:	10800117 	ldw	r2,4(r2)
     390:	e0bfff15 	stw	r2,-4(fp)
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10803fcc 	andi	r2,r2,255
     39c:	103fca26 	beq	r2,zero,2c8 <main+0x50>
     3a0:	e0fffa17 	ldw	r3,-24(fp)
     3a4:	00800074 	movhi	r2,1
     3a8:	108e1fc4 	addi	r2,r2,14463
     3ac:	10ffda0e 	bge	r2,r3,318 <main+0xa0>
     3b0:	003fc506 	br	2c8 <main+0x50>
                                  1); // read the audio port fifospace register
                }
            }
        } else if (play) {
     3b4:	e0bffb17 	ldw	r2,-20(fp)
     3b8:	103fc326 	beq	r2,zero,2c8 <main+0x50>
            *(red_LED_ptr) = 0x2; // turn on LEDR_1
     3bc:	e0bffe17 	ldw	r2,-8(fp)
     3c0:	00c00084 	movi	r3,2
     3c4:	10c00015 	stw	r3,0(r2)
            fifospace =
     3c8:	e0bffd17 	ldw	r2,-12(fp)
     3cc:	10800117 	ldw	r2,4(r2)
     3d0:	e0bfff15 	stw	r2,-4(fp)
                *(audio_ptr + 1); // read the audio port fifospace register
            if ((fifospace & 0x00FF0000) > BUF_THRESHOLD) // check WSRC
     3d4:	e0bfff17 	ldw	r2,-4(fp)
     3d8:	10803fec 	andhi	r2,r2,255
     3dc:	10801850 	cmplti	r2,r2,97
     3e0:	103fb91e 	bne	r2,zero,2c8 <main+0x50>
            {
                // output data until the buffer is empty or the audio-out FIFO
                // is full
                while ((fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE)) {
     3e4:	00002106 	br	46c <main+0x1f4>
                    *(audio_ptr + 2) = left_buffer[buffer_index];
     3e8:	e17ffa17 	ldw	r5,-24(fp)
     3ec:	e0bffd17 	ldw	r2,-12(fp)
     3f0:	10c00204 	addi	r3,r2,8
     3f4:	00bffef4 	movhi	r2,65531
     3f8:	10877a04 	addi	r2,r2,7656
     3fc:	e089883a 	add	r4,fp,r2
     400:	280490ba 	slli	r2,r5,2
     404:	2085883a 	add	r2,r4,r2
     408:	10800017 	ldw	r2,0(r2)
     40c:	18800015 	stw	r2,0(r3)
                    *(audio_ptr + 3) = right_buffer[buffer_index];
     410:	e17ffa17 	ldw	r5,-24(fp)
     414:	e0bffd17 	ldw	r2,-12(fp)
     418:	10c00304 	addi	r3,r2,12
     41c:	00bffdb4 	movhi	r2,65526
     420:	108efa04 	addi	r2,r2,15336
     424:	e089883a 	add	r4,fp,r2
     428:	280490ba 	slli	r2,r5,2
     42c:	2085883a 	add	r2,r4,r2
     430:	10800017 	ldw	r2,0(r2)
     434:	18800015 	stw	r2,0(r3)
                    ++buffer_index;
     438:	e0bffa17 	ldw	r2,-24(fp)
     43c:	10800044 	addi	r2,r2,1
     440:	e0bffa15 	stw	r2,-24(fp)

                    if (buffer_index == BUF_SIZE) {
     444:	e0fffa17 	ldw	r3,-24(fp)
     448:	00800074 	movhi	r2,1
     44c:	108e2004 	addi	r2,r2,14464
     450:	1880031e 	bne	r3,r2,460 <main+0x1e8>
                        // done playback
                        play           = 0;
     454:	e03ffb15 	stw	zero,-20(fp)
                        *(red_LED_ptr) = 0x0; // turn off LEDR
     458:	e0bffe17 	ldw	r2,-8(fp)
     45c:	10000015 	stw	zero,0(r2)
                    }
                    fifospace = *(audio_ptr +
     460:	e0bffd17 	ldw	r2,-12(fp)
     464:	10800117 	ldw	r2,4(r2)
     468:	e0bfff15 	stw	r2,-4(fp)
                while ((fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE)) {
     46c:	e0bfff17 	ldw	r2,-4(fp)
     470:	10803fec 	andhi	r2,r2,255
     474:	103f9426 	beq	r2,zero,2c8 <main+0x50>
     478:	e0fffa17 	ldw	r3,-24(fp)
     47c:	00800074 	movhi	r2,1
     480:	108e1fc4 	addi	r2,r2,14463
     484:	10ffd80e 	bge	r2,r3,3e8 <main+0x170>
        check_KEYs(&record, &play, &buffer_index);
     488:	003f8f06 	br	2c8 <main+0x50>

0000048c <check_KEYs>:
}

/****************************************************************************************
 * Subroutine to read KEYs
****************************************************************************************/
void check_KEYs(int * KEY0, int * KEY1, int * counter) {
     48c:	defff904 	addi	sp,sp,-28
     490:	df000615 	stw	fp,24(sp)
     494:	df000604 	addi	fp,sp,24
     498:	e13ffc15 	stw	r4,-16(fp)
     49c:	e17ffb15 	stw	r5,-20(fp)
     4a0:	e1bffa15 	stw	r6,-24(fp)
    volatile int * KEY_ptr   = (int *)KEY_BASE;
     4a4:	00bfc834 	movhi	r2,65312
     4a8:	10801404 	addi	r2,r2,80
     4ac:	e0bfff15 	stw	r2,-4(fp)
    volatile int * audio_ptr = (int *)AUDIO_BASE;
     4b0:	00bfc834 	movhi	r2,65312
     4b4:	108c1004 	addi	r2,r2,12352
     4b8:	e0bffe15 	stw	r2,-8(fp)
    int            KEY_value;

    KEY_value = *(KEY_ptr); // read the pushbutton KEY values
     4bc:	e0bfff17 	ldw	r2,-4(fp)
     4c0:	10800017 	ldw	r2,0(r2)
     4c4:	e0bffd15 	stw	r2,-12(fp)
    while (*KEY_ptr)
     4c8:	0001883a 	nop
     4cc:	e0bfff17 	ldw	r2,-4(fp)
     4d0:	10800017 	ldw	r2,0(r2)
     4d4:	103ffd1e 	bne	r2,zero,4cc <check_KEYs+0x40>
        ; // wait for pushbutton KEY release

    if (KEY_value == 0x1) // check KEY0
     4d8:	e0bffd17 	ldw	r2,-12(fp)
     4dc:	10800058 	cmpnei	r2,r2,1
     4e0:	10000b1e 	bne	r2,zero,510 <check_KEYs+0x84>
    {
        // reset counter to start recording
        *counter = 0;
     4e4:	e0bffa17 	ldw	r2,-24(fp)
     4e8:	10000015 	stw	zero,0(r2)
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
     4ec:	e0bffe17 	ldw	r2,-8(fp)
     4f0:	00c00104 	movi	r3,4
     4f4:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
     4f8:	e0bffe17 	ldw	r2,-8(fp)
     4fc:	10000015 	stw	zero,0(r2)

        *KEY0 = 1;
     500:	e0bffc17 	ldw	r2,-16(fp)
     504:	00c00044 	movi	r3,1
     508:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x8;
        *(audio_ptr) = 0x0;

        *KEY1 = 1;
    }
}
     50c:	00000d06 	br	544 <check_KEYs+0xb8>
    } else if (KEY_value == 0x2) // check KEY1
     510:	e0bffd17 	ldw	r2,-12(fp)
     514:	10800098 	cmpnei	r2,r2,2
     518:	10000a1e 	bne	r2,zero,544 <check_KEYs+0xb8>
        *counter = 0;
     51c:	e0bffa17 	ldw	r2,-24(fp)
     520:	10000015 	stw	zero,0(r2)
        *(audio_ptr) = 0x8;
     524:	e0bffe17 	ldw	r2,-8(fp)
     528:	00c00204 	movi	r3,8
     52c:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
     530:	e0bffe17 	ldw	r2,-8(fp)
     534:	10000015 	stw	zero,0(r2)
        *KEY1 = 1;
     538:	e0bffb17 	ldw	r2,-20(fp)
     53c:	00c00044 	movi	r3,1
     540:	10c00015 	stw	r3,0(r2)
}
     544:	0001883a 	nop
     548:	e037883a 	mov	sp,fp
     54c:	df000017 	ldw	fp,0(sp)
     550:	dec00104 	addi	sp,sp,4
     554:	f800283a 	ret

00000558 <_printf_r>:
     558:	defffd04 	addi	sp,sp,-12
     55c:	2805883a 	mov	r2,r5
     560:	dfc00015 	stw	ra,0(sp)
     564:	d9800115 	stw	r6,4(sp)
     568:	d9c00215 	stw	r7,8(sp)
     56c:	21400217 	ldw	r5,8(r4)
     570:	d9c00104 	addi	r7,sp,4
     574:	100d883a 	mov	r6,r2
     578:	00005c00 	call	5c0 <___vfprintf_internal_r>
     57c:	dfc00017 	ldw	ra,0(sp)
     580:	dec00304 	addi	sp,sp,12
     584:	f800283a 	ret

00000588 <printf>:
     588:	defffc04 	addi	sp,sp,-16
     58c:	dfc00015 	stw	ra,0(sp)
     590:	d9400115 	stw	r5,4(sp)
     594:	d9800215 	stw	r6,8(sp)
     598:	d9c00315 	stw	r7,12(sp)
     59c:	00800074 	movhi	r2,1
     5a0:	1088ed17 	ldw	r2,9140(r2)
     5a4:	200b883a 	mov	r5,r4
     5a8:	d9800104 	addi	r6,sp,4
     5ac:	11000217 	ldw	r4,8(r2)
     5b0:	00025c80 	call	25c8 <__vfprintf_internal>
     5b4:	dfc00017 	ldw	ra,0(sp)
     5b8:	dec00404 	addi	sp,sp,16
     5bc:	f800283a 	ret

000005c0 <___vfprintf_internal_r>:
     5c0:	deffbf04 	addi	sp,sp,-260
     5c4:	dfc04015 	stw	ra,256(sp)
     5c8:	dd803d15 	stw	r22,244(sp)
     5cc:	dcc03a15 	stw	r19,232(sp)
     5d0:	dc803915 	stw	r18,228(sp)
     5d4:	2027883a 	mov	r19,r4
     5d8:	2825883a 	mov	r18,r5
     5dc:	302d883a 	mov	r22,r6
     5e0:	d9c00615 	stw	r7,24(sp)
     5e4:	df003f15 	stw	fp,252(sp)
     5e8:	ddc03e15 	stw	r23,248(sp)
     5ec:	dd403c15 	stw	r21,240(sp)
     5f0:	dd003b15 	stw	r20,236(sp)
     5f4:	dc403815 	stw	r17,224(sp)
     5f8:	dc003715 	stw	r16,220(sp)
     5fc:	0004d540 	call	4d54 <_localeconv_r>
     600:	10800017 	ldw	r2,0(r2)
     604:	1009883a 	mov	r4,r2
     608:	d8800d15 	stw	r2,52(sp)
     60c:	0006d4c0 	call	6d4c <strlen>
     610:	d8800b15 	stw	r2,44(sp)
     614:	98000226 	beq	r19,zero,620 <___vfprintf_internal_r+0x60>
     618:	98800e17 	ldw	r2,56(r19)
     61c:	1001de26 	beq	r2,zero,d98 <___vfprintf_internal_r+0x7d8>
     620:	9080030b 	ldhu	r2,12(r18)
     624:	10c8000c 	andi	r3,r2,8192
     628:	1800061e 	bne	r3,zero,644 <___vfprintf_internal_r+0x84>
     62c:	90c01917 	ldw	r3,100(r18)
     630:	0137ffc4 	movi	r4,-8193
     634:	10880014 	ori	r2,r2,8192
     638:	1906703a 	and	r3,r3,r4
     63c:	9080030d 	sth	r2,12(r18)
     640:	90c01915 	stw	r3,100(r18)
     644:	10c0020c 	andi	r3,r2,8
     648:	1800fa26 	beq	r3,zero,a34 <___vfprintf_internal_r+0x474>
     64c:	90c00417 	ldw	r3,16(r18)
     650:	1800f826 	beq	r3,zero,a34 <___vfprintf_internal_r+0x474>
     654:	1080068c 	andi	r2,r2,26
     658:	10800298 	cmpnei	r2,r2,10
     65c:	1000fd26 	beq	r2,zero,a54 <___vfprintf_internal_r+0x494>
     660:	d8802704 	addi	r2,sp,156
     664:	b02f883a 	mov	r23,r22
     668:	d8801a15 	stw	r2,104(sp)
     66c:	d8001c15 	stw	zero,112(sp)
     670:	d8001b15 	stw	zero,108(sp)
     674:	d8000815 	stw	zero,32(sp)
     678:	d8000915 	stw	zero,36(sp)
     67c:	d8000a15 	stw	zero,40(sp)
     680:	d8000c15 	stw	zero,48(sp)
     684:	d8001015 	stw	zero,64(sp)
     688:	d8000515 	stw	zero,20(sp)
     68c:	102d883a 	mov	r22,r2
     690:	b8800007 	ldb	r2,0(r23)
     694:	1000d526 	beq	r2,zero,9ec <___vfprintf_internal_r+0x42c>
     698:	b821883a 	mov	r16,r23
     69c:	00000306 	br	6ac <___vfprintf_internal_r+0xec>
     6a0:	80800047 	ldb	r2,1(r16)
     6a4:	84000044 	addi	r16,r16,1
     6a8:	10012026 	beq	r2,zero,b2c <___vfprintf_internal_r+0x56c>
     6ac:	10800958 	cmpnei	r2,r2,37
     6b0:	103ffb1e 	bne	r2,zero,6a0 <___vfprintf_internal_r+0xe0>
     6b4:	85e3c83a 	sub	r17,r16,r23
     6b8:	85c11e1e 	bne	r16,r23,b34 <___vfprintf_internal_r+0x574>
     6bc:	80800003 	ldbu	r2,0(r16)
     6c0:	10803fcc 	andi	r2,r2,255
     6c4:	1080201c 	xori	r2,r2,128
     6c8:	10bfe004 	addi	r2,r2,-128
     6cc:	1000c726 	beq	r2,zero,9ec <___vfprintf_internal_r+0x42c>
     6d0:	82c00047 	ldb	r11,1(r16)
     6d4:	85c00044 	addi	r23,r16,1
     6d8:	d8001345 	stb	zero,77(sp)
     6dc:	0009883a 	mov	r4,zero
     6e0:	000b883a 	mov	r5,zero
     6e4:	023fffc4 	movi	r8,-1
     6e8:	0021883a 	mov	r16,zero
     6ec:	0019883a 	mov	r12,zero
     6f0:	bdc00044 	addi	r23,r23,1
     6f4:	5839883a 	mov	fp,r11
     6f8:	e0bff804 	addi	r2,fp,-32
     6fc:	10c01668 	cmpgeui	r3,r2,89
     700:	18006a1e 	bne	r3,zero,8ac <___vfprintf_internal_r+0x2ec>
     704:	100490ba 	slli	r2,r2,2
     708:	00c00034 	movhi	r3,0
     70c:	10c7883a 	add	r3,r2,r3
     710:	1881c617 	ldw	r2,1816(r3)
     714:	1000683a 	jmp	r2
     718:	00000fbc 	xorhi	zero,zero,62
     71c:	000008ac 	andhi	zero,zero,34
     720:	000008ac 	andhi	zero,zero,34
     724:	00000fb0 	cmpltui	zero,zero,62
     728:	000008ac 	andhi	zero,zero,34
     72c:	000008ac 	andhi	zero,zero,34
     730:	000008ac 	andhi	zero,zero,34
     734:	000008ac 	andhi	zero,zero,34
     738:	000008ac 	andhi	zero,zero,34
     73c:	000008ac 	andhi	zero,zero,34
     740:	00000e3c 	xorhi	zero,zero,56
     744:	00000fa0 	cmpeqi	zero,zero,62
     748:	000008ac 	andhi	zero,zero,34
     74c:	00000e54 	movui	zero,57
     750:	00000e60 	cmpeqi	zero,zero,57
     754:	000008ac 	andhi	zero,zero,34
     758:	00000f94 	movui	zero,62
     75c:	0000087c 	xorhi	zero,zero,33
     760:	0000087c 	xorhi	zero,zero,33
     764:	0000087c 	xorhi	zero,zero,33
     768:	0000087c 	xorhi	zero,zero,33
     76c:	0000087c 	xorhi	zero,zero,33
     770:	0000087c 	xorhi	zero,zero,33
     774:	0000087c 	xorhi	zero,zero,33
     778:	0000087c 	xorhi	zero,zero,33
     77c:	0000087c 	xorhi	zero,zero,33
     780:	000008ac 	andhi	zero,zero,34
     784:	000008ac 	andhi	zero,zero,34
     788:	000008ac 	andhi	zero,zero,34
     78c:	000008ac 	andhi	zero,zero,34
     790:	000008ac 	andhi	zero,zero,34
     794:	000008ac 	andhi	zero,zero,34
     798:	000008ac 	andhi	zero,zero,34
     79c:	000008ac 	andhi	zero,zero,34
     7a0:	000008ac 	andhi	zero,zero,34
     7a4:	000008ac 	andhi	zero,zero,34
     7a8:	00000ea4 	muli	zero,zero,58
     7ac:	00000b90 	cmplti	zero,zero,46
     7b0:	000008ac 	andhi	zero,zero,34
     7b4:	00000b90 	cmplti	zero,zero,46
     7b8:	000008ac 	andhi	zero,zero,34
     7bc:	000008ac 	andhi	zero,zero,34
     7c0:	000008ac 	andhi	zero,zero,34
     7c4:	000008ac 	andhi	zero,zero,34
     7c8:	0000113c 	xorhi	zero,zero,68
     7cc:	000008ac 	andhi	zero,zero,34
     7d0:	000008ac 	andhi	zero,zero,34
     7d4:	00000ac4 	movi	zero,43
     7d8:	000008ac 	andhi	zero,zero,34
     7dc:	000008ac 	andhi	zero,zero,34
     7e0:	000008ac 	andhi	zero,zero,34
     7e4:	000008ac 	andhi	zero,zero,34
     7e8:	000008ac 	andhi	zero,zero,34
     7ec:	00000a9c 	xori	zero,zero,42
     7f0:	000008ac 	andhi	zero,zero,34
     7f4:	000008ac 	andhi	zero,zero,34
     7f8:	0000117c 	xorhi	zero,zero,69
     7fc:	000008ac 	andhi	zero,zero,34
     800:	000008ac 	andhi	zero,zero,34
     804:	000008ac 	andhi	zero,zero,34
     808:	000008ac 	andhi	zero,zero,34
     80c:	000008ac 	andhi	zero,zero,34
     810:	000008ac 	andhi	zero,zero,34
     814:	000008ac 	andhi	zero,zero,34
     818:	000008ac 	andhi	zero,zero,34
     81c:	000008ac 	andhi	zero,zero,34
     820:	000008ac 	andhi	zero,zero,34
     824:	00001154 	movui	zero,69
     828:	00000da4 	muli	zero,zero,54
     82c:	00000b90 	cmplti	zero,zero,46
     830:	00000b90 	cmplti	zero,zero,46
     834:	00000b90 	cmplti	zero,zero,46
     838:	00001148 	cmpgei	zero,zero,69
     83c:	00000da4 	muli	zero,zero,54
     840:	000008ac 	andhi	zero,zero,34
     844:	000008ac 	andhi	zero,zero,34
     848:	00000fe8 	cmpgeui	zero,zero,63
     84c:	000008ac 	andhi	zero,zero,34
     850:	000010fc 	xorhi	zero,zero,67
     854:	00000ac8 	cmpgei	zero,zero,43
     858:	000010bc 	xorhi	zero,zero,66
     85c:	000010b0 	cmpltui	zero,zero,66
     860:	000008ac 	andhi	zero,zero,34
     864:	00001058 	cmpnei	zero,zero,65
     868:	000008ac 	andhi	zero,zero,34
     86c:	00000aa0 	cmpeqi	zero,zero,42
     870:	000008ac 	andhi	zero,zero,34
     874:	000008ac 	andhi	zero,zero,34
     878:	00001010 	cmplti	zero,zero,64
     87c:	0021883a 	mov	r16,zero
     880:	e0bff404 	addi	r2,fp,-48
     884:	bf000007 	ldb	fp,0(r23)
     888:	840002a4 	muli	r16,r16,10
     88c:	bdc00044 	addi	r23,r23,1
     890:	1421883a 	add	r16,r2,r16
     894:	e0bff404 	addi	r2,fp,-48
     898:	10c002b0 	cmpltui	r3,r2,10
     89c:	183ff91e 	bne	r3,zero,884 <___vfprintf_internal_r+0x2c4>
     8a0:	e0bff804 	addi	r2,fp,-32
     8a4:	10c01668 	cmpgeui	r3,r2,89
     8a8:	183f9626 	beq	r3,zero,704 <___vfprintf_internal_r+0x144>
     8ac:	21003fcc 	andi	r4,r4,255
     8b0:	2006521e 	bne	r4,zero,21fc <___vfprintf_internal_r+0x1c3c>
     8b4:	e0004d26 	beq	fp,zero,9ec <___vfprintf_internal_r+0x42c>
     8b8:	df001d05 	stb	fp,116(sp)
     8bc:	d8001345 	stb	zero,77(sp)
     8c0:	05000044 	movi	r20,1
     8c4:	05400044 	movi	r21,1
     8c8:	dc401d04 	addi	r17,sp,116
     8cc:	db000415 	stw	r12,16(sp)
     8d0:	0011883a 	mov	r8,zero
     8d4:	d8000715 	stw	zero,28(sp)
     8d8:	d8800417 	ldw	r2,16(sp)
     8dc:	1380008c 	andi	r14,r2,2
     8e0:	70000126 	beq	r14,zero,8e8 <___vfprintf_internal_r+0x328>
     8e4:	a5000084 	addi	r20,r20,2
     8e8:	d8800417 	ldw	r2,16(sp)
     8ec:	d8c01c17 	ldw	r3,112(sp)
     8f0:	1340210c 	andi	r13,r2,132
     8f4:	6800021e 	bne	r13,zero,900 <___vfprintf_internal_r+0x340>
     8f8:	850fc83a 	sub	r7,r16,r20
     8fc:	01c36916 	blt	zero,r7,16a4 <___vfprintf_internal_r+0x10e4>
     900:	d8801347 	ldb	r2,77(sp)
     904:	10000c26 	beq	r2,zero,938 <___vfprintf_internal_r+0x378>
     908:	d8801b17 	ldw	r2,108(sp)
     90c:	d9001344 	addi	r4,sp,77
     910:	18c00044 	addi	r3,r3,1
     914:	10800044 	addi	r2,r2,1
     918:	b1000015 	stw	r4,0(r22)
     91c:	01000044 	movi	r4,1
     920:	d8801b15 	stw	r2,108(sp)
     924:	b1000115 	stw	r4,4(r22)
     928:	d8c01c15 	stw	r3,112(sp)
     92c:	10800208 	cmpgei	r2,r2,8
     930:	10039d1e 	bne	r2,zero,17a8 <___vfprintf_internal_r+0x11e8>
     934:	b5800204 	addi	r22,r22,8
     938:	70000c26 	beq	r14,zero,96c <___vfprintf_internal_r+0x3ac>
     93c:	d8801b17 	ldw	r2,108(sp)
     940:	d9001384 	addi	r4,sp,78
     944:	18c00084 	addi	r3,r3,2
     948:	10800044 	addi	r2,r2,1
     94c:	b1000015 	stw	r4,0(r22)
     950:	01000084 	movi	r4,2
     954:	d8801b15 	stw	r2,108(sp)
     958:	b1000115 	stw	r4,4(r22)
     95c:	d8c01c15 	stw	r3,112(sp)
     960:	10800208 	cmpgei	r2,r2,8
     964:	10039e1e 	bne	r2,zero,17e0 <___vfprintf_internal_r+0x1220>
     968:	b5800204 	addi	r22,r22,8
     96c:	6b402018 	cmpnei	r13,r13,128
     970:	68025a26 	beq	r13,zero,12dc <___vfprintf_internal_r+0xd1c>
     974:	4551c83a 	sub	r8,r8,r21
     978:	02029216 	blt	zero,r8,13c4 <___vfprintf_internal_r+0xe04>
     97c:	d8800417 	ldw	r2,16(sp)
     980:	1080400c 	andi	r2,r2,256
     984:	10020f1e 	bne	r2,zero,11c4 <___vfprintf_internal_r+0xc04>
     988:	d8801b17 	ldw	r2,108(sp)
     98c:	1d47883a 	add	r3,r3,r21
     990:	b4400015 	stw	r17,0(r22)
     994:	10800044 	addi	r2,r2,1
     998:	b5400115 	stw	r21,4(r22)
     99c:	d8801b15 	stw	r2,108(sp)
     9a0:	d8c01c15 	stw	r3,112(sp)
     9a4:	10800208 	cmpgei	r2,r2,8
     9a8:	1002fb1e 	bne	r2,zero,1598 <___vfprintf_internal_r+0xfd8>
     9ac:	b5800204 	addi	r22,r22,8
     9b0:	d8800417 	ldw	r2,16(sp)
     9b4:	1440010c 	andi	r17,r2,4
     9b8:	88000226 	beq	r17,zero,9c4 <___vfprintf_internal_r+0x404>
     9bc:	8523c83a 	sub	r17,r16,r20
     9c0:	0440c616 	blt	zero,r17,cdc <___vfprintf_internal_r+0x71c>
     9c4:	8500010e 	bge	r16,r20,9cc <___vfprintf_internal_r+0x40c>
     9c8:	a021883a 	mov	r16,r20
     9cc:	d8800517 	ldw	r2,20(sp)
     9d0:	1405883a 	add	r2,r2,r16
     9d4:	d8800515 	stw	r2,20(sp)
     9d8:	1802c11e 	bne	r3,zero,14e0 <___vfprintf_internal_r+0xf20>
     9dc:	b8800007 	ldb	r2,0(r23)
     9e0:	d8001b15 	stw	zero,108(sp)
     9e4:	dd802704 	addi	r22,sp,156
     9e8:	103f2b1e 	bne	r2,zero,698 <___vfprintf_internal_r+0xd8>
     9ec:	d8801c17 	ldw	r2,112(sp)
     9f0:	1005fd1e 	bne	r2,zero,21e8 <___vfprintf_internal_r+0x1c28>
     9f4:	9080030b 	ldhu	r2,12(r18)
     9f8:	1080100c 	andi	r2,r2,64
     9fc:	1006a91e 	bne	r2,zero,24a4 <___vfprintf_internal_r+0x1ee4>
     a00:	d8800517 	ldw	r2,20(sp)
     a04:	dfc04017 	ldw	ra,256(sp)
     a08:	df003f17 	ldw	fp,252(sp)
     a0c:	ddc03e17 	ldw	r23,248(sp)
     a10:	dd803d17 	ldw	r22,244(sp)
     a14:	dd403c17 	ldw	r21,240(sp)
     a18:	dd003b17 	ldw	r20,236(sp)
     a1c:	dcc03a17 	ldw	r19,232(sp)
     a20:	dc803917 	ldw	r18,228(sp)
     a24:	dc403817 	ldw	r17,224(sp)
     a28:	dc003717 	ldw	r16,220(sp)
     a2c:	dec04104 	addi	sp,sp,260
     a30:	f800283a 	ret
     a34:	900b883a 	mov	r5,r18
     a38:	9809883a 	mov	r4,r19
     a3c:	00026a40 	call	26a4 <__swsetup_r>
     a40:	1006981e 	bne	r2,zero,24a4 <___vfprintf_internal_r+0x1ee4>
     a44:	9080030b 	ldhu	r2,12(r18)
     a48:	1080068c 	andi	r2,r2,26
     a4c:	10800298 	cmpnei	r2,r2,10
     a50:	103f031e 	bne	r2,zero,660 <___vfprintf_internal_r+0xa0>
     a54:	9080038f 	ldh	r2,14(r18)
     a58:	103f0116 	blt	r2,zero,660 <___vfprintf_internal_r+0xa0>
     a5c:	d9c00617 	ldw	r7,24(sp)
     a60:	b00d883a 	mov	r6,r22
     a64:	900b883a 	mov	r5,r18
     a68:	9809883a 	mov	r4,r19
     a6c:	dfc04017 	ldw	ra,256(sp)
     a70:	df003f17 	ldw	fp,252(sp)
     a74:	ddc03e17 	ldw	r23,248(sp)
     a78:	dd803d17 	ldw	r22,244(sp)
     a7c:	dd403c17 	ldw	r21,240(sp)
     a80:	dd003b17 	ldw	r20,236(sp)
     a84:	dcc03a17 	ldw	r19,232(sp)
     a88:	dc803917 	ldw	r18,228(sp)
     a8c:	dc403817 	ldw	r17,224(sp)
     a90:	dc003717 	ldw	r16,220(sp)
     a94:	dec04104 	addi	sp,sp,260
     a98:	00025e41 	jmpi	25e4 <__sbprintf>
     a9c:	63000414 	ori	r12,r12,16
     aa0:	6080080c 	andi	r2,r12,32
     aa4:	10008126 	beq	r2,zero,cac <___vfprintf_internal_r+0x6ec>
     aa8:	d8c00617 	ldw	r3,24(sp)
     aac:	00800044 	movi	r2,1
     ab0:	1d000017 	ldw	r20,0(r3)
     ab4:	1d400117 	ldw	r21,4(r3)
     ab8:	18c00204 	addi	r3,r3,8
     abc:	d8c00615 	stw	r3,24(sp)
     ac0:	00000906 	br	ae8 <___vfprintf_internal_r+0x528>
     ac4:	63000414 	ori	r12,r12,16
     ac8:	6080080c 	andi	r2,r12,32
     acc:	10006b26 	beq	r2,zero,c7c <___vfprintf_internal_r+0x6bc>
     ad0:	d8c00617 	ldw	r3,24(sp)
     ad4:	0005883a 	mov	r2,zero
     ad8:	1d000017 	ldw	r20,0(r3)
     adc:	1d400117 	ldw	r21,4(r3)
     ae0:	18c00204 	addi	r3,r3,8
     ae4:	d8c00615 	stw	r3,24(sp)
     ae8:	d8001345 	stb	zero,77(sp)
     aec:	40ffffe0 	cmpeqi	r3,r8,-1
     af0:	001b883a 	mov	r13,zero
     af4:	1801081e 	bne	r3,zero,f18 <___vfprintf_internal_r+0x958>
     af8:	047fdfc4 	movi	r17,-129
     afc:	6448703a 	and	r4,r12,r17
     b00:	a546b03a 	or	r3,r20,r21
     b04:	d9000415 	stw	r4,16(sp)
     b08:	1802e41e 	bne	r3,zero,169c <___vfprintf_internal_r+0x10dc>
     b0c:	40025e1e 	bne	r8,zero,1488 <___vfprintf_internal_r+0xec8>
     b10:	1003ac1e 	bne	r2,zero,19c4 <___vfprintf_internal_r+0x1404>
     b14:	6540004c 	andi	r21,r12,1
     b18:	a803e226 	beq	r21,zero,1aa4 <___vfprintf_internal_r+0x14e4>
     b1c:	00800c04 	movi	r2,48
     b20:	d88026c5 	stb	r2,155(sp)
     b24:	dc4026c4 	addi	r17,sp,155
     b28:	0000ba06 	br	e14 <___vfprintf_internal_r+0x854>
     b2c:	85e3c83a 	sub	r17,r16,r23
     b30:	85ffae26 	beq	r16,r23,9ec <___vfprintf_internal_r+0x42c>
     b34:	d8c01c17 	ldw	r3,112(sp)
     b38:	d8801b17 	ldw	r2,108(sp)
     b3c:	b5c00015 	stw	r23,0(r22)
     b40:	1c47883a 	add	r3,r3,r17
     b44:	10800044 	addi	r2,r2,1
     b48:	d8801b15 	stw	r2,108(sp)
     b4c:	b4400115 	stw	r17,4(r22)
     b50:	d8c01c15 	stw	r3,112(sp)
     b54:	10800208 	cmpgei	r2,r2,8
     b58:	1000061e 	bne	r2,zero,b74 <___vfprintf_internal_r+0x5b4>
     b5c:	b5800204 	addi	r22,r22,8
     b60:	d8c00517 	ldw	r3,20(sp)
     b64:	80800003 	ldbu	r2,0(r16)
     b68:	1c47883a 	add	r3,r3,r17
     b6c:	d8c00515 	stw	r3,20(sp)
     b70:	003ed306 	br	6c0 <___vfprintf_internal_r+0x100>
     b74:	d9801a04 	addi	r6,sp,104
     b78:	900b883a 	mov	r5,r18
     b7c:	9809883a 	mov	r4,r19
     b80:	0006ed80 	call	6ed8 <__sprint_r>
     b84:	103f9b1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
     b88:	dd802704 	addi	r22,sp,156
     b8c:	003ff406 	br	b60 <___vfprintf_internal_r+0x5a0>
     b90:	21003fcc 	andi	r4,r4,255
     b94:	2006271e 	bne	r4,zero,2434 <___vfprintf_internal_r+0x1e74>
     b98:	d8c00617 	ldw	r3,24(sp)
     b9c:	6080020c 	andi	r2,r12,8
     ba0:	19000204 	addi	r4,r3,8
     ba4:	d9000e15 	stw	r4,56(sp)
     ba8:	1003c01e 	bne	r2,zero,1aac <___vfprintf_internal_r+0x14ec>
     bac:	d8800617 	ldw	r2,24(sp)
     bb0:	10c00017 	ldw	r3,0(r2)
     bb4:	10800117 	ldw	r2,4(r2)
     bb8:	d8c00915 	stw	r3,36(sp)
     bbc:	d8800a15 	stw	r2,40(sp)
     bc0:	dd400a17 	ldw	r21,40(sp)
     bc4:	dd000917 	ldw	r20,36(sp)
     bc8:	00a00034 	movhi	r2,32768
     bcc:	10bfffc4 	addi	r2,r2,-1
     bd0:	a8a2703a 	and	r17,r21,r2
     bd4:	01dffc34 	movhi	r7,32752
     bd8:	01bfffc4 	movi	r6,-1
     bdc:	39ffffc4 	addi	r7,r7,-1
     be0:	a009883a 	mov	r4,r20
     be4:	880b883a 	mov	r5,r17
     be8:	da000615 	stw	r8,24(sp)
     bec:	db000415 	stw	r12,16(sp)
     bf0:	000ce1c0 	call	ce1c <__unorddf2>
     bf4:	db000417 	ldw	r12,16(sp)
     bf8:	da000617 	ldw	r8,24(sp)
     bfc:	10044b1e 	bne	r2,zero,1d2c <___vfprintf_internal_r+0x176c>
     c00:	01dffc34 	movhi	r7,32752
     c04:	01bfffc4 	movi	r6,-1
     c08:	39ffffc4 	addi	r7,r7,-1
     c0c:	a009883a 	mov	r4,r20
     c10:	880b883a 	mov	r5,r17
     c14:	000bdb40 	call	bdb4 <__ledf2>
     c18:	db000417 	ldw	r12,16(sp)
     c1c:	da000617 	ldw	r8,24(sp)
     c20:	0084420e 	bge	zero,r2,1d2c <___vfprintf_internal_r+0x176c>
     c24:	000d883a 	mov	r6,zero
     c28:	000f883a 	mov	r7,zero
     c2c:	a009883a 	mov	r4,r20
     c30:	a80b883a 	mov	r5,r21
     c34:	000bdb40 	call	bdb4 <__ledf2>
     c38:	db000417 	ldw	r12,16(sp)
     c3c:	10055716 	blt	r2,zero,219c <___vfprintf_internal_r+0x1bdc>
     c40:	db401343 	ldbu	r13,77(sp)
     c44:	e0801210 	cmplti	r2,fp,72
     c48:	1005451e 	bne	r2,zero,2160 <___vfprintf_internal_r+0x1ba0>
     c4c:	04400074 	movhi	r17,1
     c50:	8c402f04 	addi	r17,r17,188
     c54:	00bfdfc4 	movi	r2,-129
     c58:	6084703a 	and	r2,r12,r2
     c5c:	d8800415 	stw	r2,16(sp)
     c60:	d8800e17 	ldw	r2,56(sp)
     c64:	050000c4 	movi	r20,3
     c68:	054000c4 	movi	r21,3
     c6c:	d8800615 	stw	r2,24(sp)
     c70:	0011883a 	mov	r8,zero
     c74:	d8000715 	stw	zero,28(sp)
     c78:	00006a06 	br	e24 <___vfprintf_internal_r+0x864>
     c7c:	d8c00617 	ldw	r3,24(sp)
     c80:	6080040c 	andi	r2,r12,16
     c84:	1d000017 	ldw	r20,0(r3)
     c88:	18c00104 	addi	r3,r3,4
     c8c:	d8c00615 	stw	r3,24(sp)
     c90:	1000031e 	bne	r2,zero,ca0 <___vfprintf_internal_r+0x6e0>
     c94:	6080100c 	andi	r2,r12,64
     c98:	10000126 	beq	r2,zero,ca0 <___vfprintf_internal_r+0x6e0>
     c9c:	a53fffcc 	andi	r20,r20,65535
     ca0:	002b883a 	mov	r21,zero
     ca4:	0005883a 	mov	r2,zero
     ca8:	003f8f06 	br	ae8 <___vfprintf_internal_r+0x528>
     cac:	d8c00617 	ldw	r3,24(sp)
     cb0:	6080040c 	andi	r2,r12,16
     cb4:	1d000017 	ldw	r20,0(r3)
     cb8:	18c00104 	addi	r3,r3,4
     cbc:	d8c00615 	stw	r3,24(sp)
     cc0:	1000031e 	bne	r2,zero,cd0 <___vfprintf_internal_r+0x710>
     cc4:	6080100c 	andi	r2,r12,64
     cc8:	10000126 	beq	r2,zero,cd0 <___vfprintf_internal_r+0x710>
     ccc:	a53fffcc 	andi	r20,r20,65535
     cd0:	002b883a 	mov	r21,zero
     cd4:	00800044 	movi	r2,1
     cd8:	003f8306 	br	ae8 <___vfprintf_internal_r+0x528>
     cdc:	03000074 	movhi	r12,1
     ce0:	89000450 	cmplti	r4,r17,17
     ce4:	d8801b17 	ldw	r2,108(sp)
     ce8:	63004304 	addi	r12,r12,268
     cec:	20001b1e 	bne	r4,zero,d5c <___vfprintf_internal_r+0x79c>
     cf0:	05400404 	movi	r21,16
     cf4:	6039883a 	mov	fp,r12
     cf8:	00000406 	br	d0c <___vfprintf_internal_r+0x74c>
     cfc:	8c7ffc04 	addi	r17,r17,-16
     d00:	89000448 	cmpgei	r4,r17,17
     d04:	b5800204 	addi	r22,r22,8
     d08:	20001326 	beq	r4,zero,d58 <___vfprintf_internal_r+0x798>
     d0c:	10800044 	addi	r2,r2,1
     d10:	18c00404 	addi	r3,r3,16
     d14:	b7000015 	stw	fp,0(r22)
     d18:	b5400115 	stw	r21,4(r22)
     d1c:	d8c01c15 	stw	r3,112(sp)
     d20:	d8801b15 	stw	r2,108(sp)
     d24:	11000208 	cmpgei	r4,r2,8
     d28:	203ff426 	beq	r4,zero,cfc <___vfprintf_internal_r+0x73c>
     d2c:	d9801a04 	addi	r6,sp,104
     d30:	900b883a 	mov	r5,r18
     d34:	9809883a 	mov	r4,r19
     d38:	0006ed80 	call	6ed8 <__sprint_r>
     d3c:	103f2d1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
     d40:	8c7ffc04 	addi	r17,r17,-16
     d44:	89000448 	cmpgei	r4,r17,17
     d48:	d8c01c17 	ldw	r3,112(sp)
     d4c:	d8801b17 	ldw	r2,108(sp)
     d50:	dd802704 	addi	r22,sp,156
     d54:	203fed1e 	bne	r4,zero,d0c <___vfprintf_internal_r+0x74c>
     d58:	e019883a 	mov	r12,fp
     d5c:	10800044 	addi	r2,r2,1
     d60:	1c47883a 	add	r3,r3,r17
     d64:	d8801b15 	stw	r2,108(sp)
     d68:	b3000015 	stw	r12,0(r22)
     d6c:	b4400115 	stw	r17,4(r22)
     d70:	d8c01c15 	stw	r3,112(sp)
     d74:	10800210 	cmplti	r2,r2,8
     d78:	103f121e 	bne	r2,zero,9c4 <___vfprintf_internal_r+0x404>
     d7c:	d9801a04 	addi	r6,sp,104
     d80:	900b883a 	mov	r5,r18
     d84:	9809883a 	mov	r4,r19
     d88:	0006ed80 	call	6ed8 <__sprint_r>
     d8c:	103f191e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
     d90:	d8c01c17 	ldw	r3,112(sp)
     d94:	003f0b06 	br	9c4 <___vfprintf_internal_r+0x404>
     d98:	9809883a 	mov	r4,r19
     d9c:	00047ac0 	call	47ac <__sinit>
     da0:	003e1f06 	br	620 <___vfprintf_internal_r+0x60>
     da4:	21003fcc 	andi	r4,r4,255
     da8:	2005a41e 	bne	r4,zero,243c <___vfprintf_internal_r+0x1e7c>
     dac:	6080080c 	andi	r2,r12,32
     db0:	10004126 	beq	r2,zero,eb8 <___vfprintf_internal_r+0x8f8>
     db4:	d8c00617 	ldw	r3,24(sp)
     db8:	18800117 	ldw	r2,4(r3)
     dbc:	1d000017 	ldw	r20,0(r3)
     dc0:	18c00204 	addi	r3,r3,8
     dc4:	d8c00615 	stw	r3,24(sp)
     dc8:	102b883a 	mov	r21,r2
     dcc:	10004816 	blt	r2,zero,ef0 <___vfprintf_internal_r+0x930>
     dd0:	40bfffd8 	cmpnei	r2,r8,-1
     dd4:	db401343 	ldbu	r13,77(sp)
     dd8:	10000626 	beq	r2,zero,df4 <___vfprintf_internal_r+0x834>
     ddc:	047fdfc4 	movi	r17,-129
     de0:	6446703a 	and	r3,r12,r17
     de4:	a544b03a 	or	r2,r20,r21
     de8:	d8c00415 	stw	r3,16(sp)
     dec:	1002f426 	beq	r2,zero,19c0 <___vfprintf_internal_r+0x1400>
     df0:	db000417 	ldw	r12,16(sp)
     df4:	a8037d1e 	bne	r21,zero,1bec <___vfprintf_internal_r+0x162c>
     df8:	a08002a8 	cmpgeui	r2,r20,10
     dfc:	10037b1e 	bne	r2,zero,1bec <___vfprintf_internal_r+0x162c>
     e00:	a5000c04 	addi	r20,r20,48
     e04:	dd0026c5 	stb	r20,155(sp)
     e08:	db000415 	stw	r12,16(sp)
     e0c:	05400044 	movi	r21,1
     e10:	dc4026c4 	addi	r17,sp,155
     e14:	4029883a 	mov	r20,r8
     e18:	4540010e 	bge	r8,r21,e20 <___vfprintf_internal_r+0x860>
     e1c:	a829883a 	mov	r20,r21
     e20:	d8000715 	stw	zero,28(sp)
     e24:	6b403fcc 	andi	r13,r13,255
     e28:	6b40201c 	xori	r13,r13,128
     e2c:	6b7fe004 	addi	r13,r13,-128
     e30:	683ea926 	beq	r13,zero,8d8 <___vfprintf_internal_r+0x318>
     e34:	a5000044 	addi	r20,r20,1
     e38:	003ea706 	br	8d8 <___vfprintf_internal_r+0x318>
     e3c:	d8800617 	ldw	r2,24(sp)
     e40:	14000017 	ldw	r16,0(r2)
     e44:	10800104 	addi	r2,r2,4
     e48:	8003130e 	bge	r16,zero,1a98 <___vfprintf_internal_r+0x14d8>
     e4c:	0421c83a 	sub	r16,zero,r16
     e50:	d8800615 	stw	r2,24(sp)
     e54:	bac00007 	ldb	r11,0(r23)
     e58:	63000114 	ori	r12,r12,4
     e5c:	003e2406 	br	6f0 <___vfprintf_internal_r+0x130>
     e60:	bf000007 	ldb	fp,0(r23)
     e64:	b8c00044 	addi	r3,r23,1
     e68:	e0800aa0 	cmpeqi	r2,fp,42
     e6c:	1005c71e 	bne	r2,zero,258c <___vfprintf_internal_r+0x1fcc>
     e70:	e0bff404 	addi	r2,fp,-48
     e74:	118002b0 	cmpltui	r6,r2,10
     e78:	182f883a 	mov	r23,r3
     e7c:	0011883a 	mov	r8,zero
     e80:	303e1d26 	beq	r6,zero,6f8 <___vfprintf_internal_r+0x138>
     e84:	bf000007 	ldb	fp,0(r23)
     e88:	420002a4 	muli	r8,r8,10
     e8c:	bdc00044 	addi	r23,r23,1
     e90:	4091883a 	add	r8,r8,r2
     e94:	e0bff404 	addi	r2,fp,-48
     e98:	10c002b0 	cmpltui	r3,r2,10
     e9c:	183ff91e 	bne	r3,zero,e84 <___vfprintf_internal_r+0x8c4>
     ea0:	003e1506 	br	6f8 <___vfprintf_internal_r+0x138>
     ea4:	21003fcc 	andi	r4,r4,255
     ea8:	20055e1e 	bne	r4,zero,2424 <___vfprintf_internal_r+0x1e64>
     eac:	63000414 	ori	r12,r12,16
     eb0:	6080080c 	andi	r2,r12,32
     eb4:	103fbf1e 	bne	r2,zero,db4 <___vfprintf_internal_r+0x7f4>
     eb8:	d8c00617 	ldw	r3,24(sp)
     ebc:	6080040c 	andi	r2,r12,16
     ec0:	1d000017 	ldw	r20,0(r3)
     ec4:	18c00104 	addi	r3,r3,4
     ec8:	d8c00615 	stw	r3,24(sp)
     ecc:	1002e91e 	bne	r2,zero,1a74 <___vfprintf_internal_r+0x14b4>
     ed0:	6080100c 	andi	r2,r12,64
     ed4:	1002e726 	beq	r2,zero,1a74 <___vfprintf_internal_r+0x14b4>
     ed8:	a53fffcc 	andi	r20,r20,65535
     edc:	a520001c 	xori	r20,r20,32768
     ee0:	a5200004 	addi	r20,r20,-32768
     ee4:	a02bd7fa 	srai	r21,r20,31
     ee8:	a805883a 	mov	r2,r21
     eec:	103fb80e 	bge	r2,zero,dd0 <___vfprintf_internal_r+0x810>
     ef0:	a004c03a 	cmpne	r2,r20,zero
     ef4:	056bc83a 	sub	r21,zero,r21
     ef8:	a8abc83a 	sub	r21,r21,r2
     efc:	00800b44 	movi	r2,45
     f00:	d8801345 	stb	r2,77(sp)
     f04:	40ffffe0 	cmpeqi	r3,r8,-1
     f08:	0529c83a 	sub	r20,zero,r20
     f0c:	03400b44 	movi	r13,45
     f10:	00800044 	movi	r2,1
     f14:	183ef826 	beq	r3,zero,af8 <___vfprintf_internal_r+0x538>
     f18:	10c00060 	cmpeqi	r3,r2,1
     f1c:	183fb51e 	bne	r3,zero,df4 <___vfprintf_internal_r+0x834>
     f20:	108000a0 	cmpeqi	r2,r2,2
     f24:	10015d1e 	bne	r2,zero,149c <___vfprintf_internal_r+0xedc>
     f28:	dc402704 	addi	r17,sp,156
     f2c:	a006d0fa 	srli	r3,r20,3
     f30:	a808977a 	slli	r4,r21,29
     f34:	a82ad0fa 	srli	r21,r21,3
     f38:	a50001cc 	andi	r20,r20,7
     f3c:	a0800c04 	addi	r2,r20,48
     f40:	20e8b03a 	or	r20,r4,r3
     f44:	88bfffc5 	stb	r2,-1(r17)
     f48:	a546b03a 	or	r3,r20,r21
     f4c:	880b883a 	mov	r5,r17
     f50:	8c7fffc4 	addi	r17,r17,-1
     f54:	183ff51e 	bne	r3,zero,f2c <___vfprintf_internal_r+0x96c>
     f58:	60c0004c 	andi	r3,r12,1
     f5c:	18015c26 	beq	r3,zero,14d0 <___vfprintf_internal_r+0xf10>
     f60:	10803fcc 	andi	r2,r2,255
     f64:	1080201c 	xori	r2,r2,128
     f68:	10bfe004 	addi	r2,r2,-128
     f6c:	10800c18 	cmpnei	r2,r2,48
     f70:	10015726 	beq	r2,zero,14d0 <___vfprintf_internal_r+0xf10>
     f74:	00800c04 	movi	r2,48
     f78:	297fff84 	addi	r5,r5,-2
     f7c:	88bfffc5 	stb	r2,-1(r17)
     f80:	d8802704 	addi	r2,sp,156
     f84:	116bc83a 	sub	r21,r2,r5
     f88:	db000415 	stw	r12,16(sp)
     f8c:	2823883a 	mov	r17,r5
     f90:	003fa006 	br	e14 <___vfprintf_internal_r+0x854>
     f94:	bac00007 	ldb	r11,0(r23)
     f98:	63002014 	ori	r12,r12,128
     f9c:	003dd406 	br	6f0 <___vfprintf_internal_r+0x130>
     fa0:	bac00007 	ldb	r11,0(r23)
     fa4:	01000044 	movi	r4,1
     fa8:	01400ac4 	movi	r5,43
     fac:	003dd006 	br	6f0 <___vfprintf_internal_r+0x130>
     fb0:	bac00007 	ldb	r11,0(r23)
     fb4:	63000054 	ori	r12,r12,1
     fb8:	003dcd06 	br	6f0 <___vfprintf_internal_r+0x130>
     fbc:	28803fcc 	andi	r2,r5,255
     fc0:	1080201c 	xori	r2,r2,128
     fc4:	10bfe004 	addi	r2,r2,-128
     fc8:	bf000003 	ldbu	fp,0(r23)
     fcc:	10000c1e 	bne	r2,zero,1000 <___vfprintf_internal_r+0xa40>
     fd0:	e2c03fcc 	andi	r11,fp,255
     fd4:	5ac0201c 	xori	r11,r11,128
     fd8:	01000044 	movi	r4,1
     fdc:	01400804 	movi	r5,32
     fe0:	5affe004 	addi	r11,r11,-128
     fe4:	003dc206 	br	6f0 <___vfprintf_internal_r+0x130>
     fe8:	bac00007 	ldb	r11,0(r23)
     fec:	58801b18 	cmpnei	r2,r11,108
     ff0:	1002a71e 	bne	r2,zero,1a90 <___vfprintf_internal_r+0x14d0>
     ff4:	bf000043 	ldbu	fp,1(r23)
     ff8:	63000814 	ori	r12,r12,32
     ffc:	bdc00044 	addi	r23,r23,1
    1000:	e2c03fcc 	andi	r11,fp,255
    1004:	5ac0201c 	xori	r11,r11,128
    1008:	5affe004 	addi	r11,r11,-128
    100c:	003db806 	br	6f0 <___vfprintf_internal_r+0x130>
    1010:	21003fcc 	andi	r4,r4,255
    1014:	20050b1e 	bne	r4,zero,2444 <___vfprintf_internal_r+0x1e84>
    1018:	00800074 	movhi	r2,1
    101c:	10803204 	addi	r2,r2,200
    1020:	d8800c15 	stw	r2,48(sp)
    1024:	6080080c 	andi	r2,r12,32
    1028:	10005b26 	beq	r2,zero,1198 <___vfprintf_internal_r+0xbd8>
    102c:	d8800617 	ldw	r2,24(sp)
    1030:	15000017 	ldw	r20,0(r2)
    1034:	15400117 	ldw	r21,4(r2)
    1038:	10800204 	addi	r2,r2,8
    103c:	d8800615 	stw	r2,24(sp)
    1040:	6080004c 	andi	r2,r12,1
    1044:	10000226 	beq	r2,zero,1050 <___vfprintf_internal_r+0xa90>
    1048:	a544b03a 	or	r2,r20,r21
    104c:	10029c1e 	bne	r2,zero,1ac0 <___vfprintf_internal_r+0x1500>
    1050:	00800084 	movi	r2,2
    1054:	003ea406 	br	ae8 <___vfprintf_internal_r+0x528>
    1058:	d8800617 	ldw	r2,24(sp)
    105c:	d8001345 	stb	zero,77(sp)
    1060:	14400017 	ldw	r17,0(r2)
    1064:	10c00104 	addi	r3,r2,4
    1068:	8802ba26 	beq	r17,zero,1b54 <___vfprintf_internal_r+0x1594>
    106c:	40bfffe0 	cmpeqi	r2,r8,-1
    1070:	1003c61e 	bne	r2,zero,1f8c <___vfprintf_internal_r+0x19cc>
    1074:	400d883a 	mov	r6,r8
    1078:	000b883a 	mov	r5,zero
    107c:	8809883a 	mov	r4,r17
    1080:	d8c00715 	stw	r3,28(sp)
    1084:	db000615 	stw	r12,24(sp)
    1088:	da000415 	stw	r8,16(sp)
    108c:	00057940 	call	5794 <memchr>
    1090:	da000417 	ldw	r8,16(sp)
    1094:	db000617 	ldw	r12,24(sp)
    1098:	d8c00717 	ldw	r3,28(sp)
    109c:	1004d126 	beq	r2,zero,23e4 <___vfprintf_internal_r+0x1e24>
    10a0:	146bc83a 	sub	r21,r2,r17
    10a4:	a829883a 	mov	r20,r21
    10a8:	d8c00615 	stw	r3,24(sp)
    10ac:	003e0706 	br	8cc <___vfprintf_internal_r+0x30c>
    10b0:	bac00007 	ldb	r11,0(r23)
    10b4:	63000814 	ori	r12,r12,32
    10b8:	003d8d06 	br	6f0 <___vfprintf_internal_r+0x130>
    10bc:	d8c00617 	ldw	r3,24(sp)
    10c0:	00800c04 	movi	r2,48
    10c4:	d8801385 	stb	r2,78(sp)
    10c8:	00801e04 	movi	r2,120
    10cc:	01000074 	movhi	r4,1
    10d0:	d88013c5 	stb	r2,79(sp)
    10d4:	18800104 	addi	r2,r3,4
    10d8:	d8800615 	stw	r2,24(sp)
    10dc:	20803204 	addi	r2,r4,200
    10e0:	d8800c15 	stw	r2,48(sp)
    10e4:	1d000017 	ldw	r20,0(r3)
    10e8:	002b883a 	mov	r21,zero
    10ec:	63000094 	ori	r12,r12,2
    10f0:	00800084 	movi	r2,2
    10f4:	07001e04 	movi	fp,120
    10f8:	003e7b06 	br	ae8 <___vfprintf_internal_r+0x528>
    10fc:	21003fcc 	andi	r4,r4,255
    1100:	2004ca1e 	bne	r4,zero,242c <___vfprintf_internal_r+0x1e6c>
    1104:	d9000617 	ldw	r4,24(sp)
    1108:	6080080c 	andi	r2,r12,32
    110c:	20c00104 	addi	r3,r4,4
    1110:	1002711e 	bne	r2,zero,1ad8 <___vfprintf_internal_r+0x1518>
    1114:	6080040c 	andi	r2,r12,16
    1118:	1002dc1e 	bne	r2,zero,1c8c <___vfprintf_internal_r+0x16cc>
    111c:	6300100c 	andi	r12,r12,64
    1120:	6002da26 	beq	r12,zero,1c8c <___vfprintf_internal_r+0x16cc>
    1124:	d8800617 	ldw	r2,24(sp)
    1128:	d8c00615 	stw	r3,24(sp)
    112c:	d8c00517 	ldw	r3,20(sp)
    1130:	10800017 	ldw	r2,0(r2)
    1134:	10c0000d 	sth	r3,0(r2)
    1138:	003d5506 	br	690 <___vfprintf_internal_r+0xd0>
    113c:	bac00007 	ldb	r11,0(r23)
    1140:	63000214 	ori	r12,r12,8
    1144:	003d6a06 	br	6f0 <___vfprintf_internal_r+0x130>
    1148:	bac00007 	ldb	r11,0(r23)
    114c:	63001014 	ori	r12,r12,64
    1150:	003d6706 	br	6f0 <___vfprintf_internal_r+0x130>
    1154:	d8c00617 	ldw	r3,24(sp)
    1158:	d8001345 	stb	zero,77(sp)
    115c:	05000044 	movi	r20,1
    1160:	18800017 	ldw	r2,0(r3)
    1164:	18c00104 	addi	r3,r3,4
    1168:	d8c00615 	stw	r3,24(sp)
    116c:	d8801d05 	stb	r2,116(sp)
    1170:	05400044 	movi	r21,1
    1174:	dc401d04 	addi	r17,sp,116
    1178:	003dd406 	br	8cc <___vfprintf_internal_r+0x30c>
    117c:	21003fcc 	andi	r4,r4,255
    1180:	2004b21e 	bne	r4,zero,244c <___vfprintf_internal_r+0x1e8c>
    1184:	00800074 	movhi	r2,1
    1188:	10803704 	addi	r2,r2,220
    118c:	d8800c15 	stw	r2,48(sp)
    1190:	6080080c 	andi	r2,r12,32
    1194:	103fa51e 	bne	r2,zero,102c <___vfprintf_internal_r+0xa6c>
    1198:	d8c00617 	ldw	r3,24(sp)
    119c:	6080040c 	andi	r2,r12,16
    11a0:	1d000017 	ldw	r20,0(r3)
    11a4:	18c00104 	addi	r3,r3,4
    11a8:	d8c00615 	stw	r3,24(sp)
    11ac:	10022f1e 	bne	r2,zero,1a6c <___vfprintf_internal_r+0x14ac>
    11b0:	6080100c 	andi	r2,r12,64
    11b4:	10022d26 	beq	r2,zero,1a6c <___vfprintf_internal_r+0x14ac>
    11b8:	a53fffcc 	andi	r20,r20,65535
    11bc:	002b883a 	mov	r21,zero
    11c0:	003f9f06 	br	1040 <___vfprintf_internal_r+0xa80>
    11c4:	e2c01990 	cmplti	r11,fp,102
    11c8:	5800fb1e 	bne	r11,zero,15b8 <___vfprintf_internal_r+0xff8>
    11cc:	d9000917 	ldw	r4,36(sp)
    11d0:	d9400a17 	ldw	r5,40(sp)
    11d4:	000d883a 	mov	r6,zero
    11d8:	000f883a 	mov	r7,zero
    11dc:	d8c00e15 	stw	r3,56(sp)
    11e0:	000bc4c0 	call	bc4c <__eqdf2>
    11e4:	d8c00e17 	ldw	r3,56(sp)
    11e8:	1001891e 	bne	r2,zero,1810 <___vfprintf_internal_r+0x1250>
    11ec:	d8801b17 	ldw	r2,108(sp)
    11f0:	01000074 	movhi	r4,1
    11f4:	21003e04 	addi	r4,r4,248
    11f8:	10800044 	addi	r2,r2,1
    11fc:	18c00044 	addi	r3,r3,1
    1200:	b1000015 	stw	r4,0(r22)
    1204:	01000044 	movi	r4,1
    1208:	d8801b15 	stw	r2,108(sp)
    120c:	b1000115 	stw	r4,4(r22)
    1210:	d8c01c15 	stw	r3,112(sp)
    1214:	10800208 	cmpgei	r2,r2,8
    1218:	10034a1e 	bne	r2,zero,1f44 <___vfprintf_internal_r+0x1984>
    121c:	b5800204 	addi	r22,r22,8
    1220:	d8801417 	ldw	r2,80(sp)
    1224:	d9000817 	ldw	r4,32(sp)
    1228:	1102150e 	bge	r2,r4,1a80 <___vfprintf_internal_r+0x14c0>
    122c:	d8800d17 	ldw	r2,52(sp)
    1230:	d9000b17 	ldw	r4,44(sp)
    1234:	b0800015 	stw	r2,0(r22)
    1238:	d8801b17 	ldw	r2,108(sp)
    123c:	1907883a 	add	r3,r3,r4
    1240:	b1000115 	stw	r4,4(r22)
    1244:	10800044 	addi	r2,r2,1
    1248:	d8801b15 	stw	r2,108(sp)
    124c:	d8c01c15 	stw	r3,112(sp)
    1250:	10800208 	cmpgei	r2,r2,8
    1254:	1002371e 	bne	r2,zero,1b34 <___vfprintf_internal_r+0x1574>
    1258:	b5800204 	addi	r22,r22,8
    125c:	d8800817 	ldw	r2,32(sp)
    1260:	157fffc4 	addi	r21,r2,-1
    1264:	057dd20e 	bge	zero,r21,9b0 <___vfprintf_internal_r+0x3f0>
    1268:	01c00074 	movhi	r7,1
    126c:	a9000450 	cmplti	r4,r21,17
    1270:	d8801b17 	ldw	r2,108(sp)
    1274:	39c03f04 	addi	r7,r7,252
    1278:	20032e1e 	bne	r4,zero,1f34 <___vfprintf_internal_r+0x1974>
    127c:	07000404 	movi	fp,16
    1280:	3823883a 	mov	r17,r7
    1284:	00000406 	br	1298 <___vfprintf_internal_r+0xcd8>
    1288:	b5800204 	addi	r22,r22,8
    128c:	ad7ffc04 	addi	r21,r21,-16
    1290:	a9000448 	cmpgei	r4,r21,17
    1294:	20032626 	beq	r4,zero,1f30 <___vfprintf_internal_r+0x1970>
    1298:	10800044 	addi	r2,r2,1
    129c:	18c00404 	addi	r3,r3,16
    12a0:	b4400015 	stw	r17,0(r22)
    12a4:	b7000115 	stw	fp,4(r22)
    12a8:	d8c01c15 	stw	r3,112(sp)
    12ac:	d8801b15 	stw	r2,108(sp)
    12b0:	11000208 	cmpgei	r4,r2,8
    12b4:	203ff426 	beq	r4,zero,1288 <___vfprintf_internal_r+0xcc8>
    12b8:	d9801a04 	addi	r6,sp,104
    12bc:	900b883a 	mov	r5,r18
    12c0:	9809883a 	mov	r4,r19
    12c4:	0006ed80 	call	6ed8 <__sprint_r>
    12c8:	103dca1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    12cc:	d8c01c17 	ldw	r3,112(sp)
    12d0:	d8801b17 	ldw	r2,108(sp)
    12d4:	dd802704 	addi	r22,sp,156
    12d8:	003fec06 	br	128c <___vfprintf_internal_r+0xccc>
    12dc:	8519c83a 	sub	r12,r16,r20
    12e0:	033da40e 	bge	zero,r12,974 <___vfprintf_internal_r+0x3b4>
    12e4:	01c00074 	movhi	r7,1
    12e8:	61000450 	cmplti	r4,r12,17
    12ec:	d8801b17 	ldw	r2,108(sp)
    12f0:	39c03f04 	addi	r7,r7,252
    12f4:	2000281e 	bne	r4,zero,1398 <___vfprintf_internal_r+0xdd8>
    12f8:	dc400e15 	stw	r17,56(sp)
    12fc:	dc000f15 	stw	r16,60(sp)
    1300:	b009883a 	mov	r4,r22
    1304:	03400404 	movi	r13,16
    1308:	a02d883a 	mov	r22,r20
    130c:	6021883a 	mov	r16,r12
    1310:	4029883a 	mov	r20,r8
    1314:	3823883a 	mov	r17,r7
    1318:	00000406 	br	132c <___vfprintf_internal_r+0xd6c>
    131c:	843ffc04 	addi	r16,r16,-16
    1320:	81400448 	cmpgei	r5,r16,17
    1324:	21000204 	addi	r4,r4,8
    1328:	28001426 	beq	r5,zero,137c <___vfprintf_internal_r+0xdbc>
    132c:	10800044 	addi	r2,r2,1
    1330:	18c00404 	addi	r3,r3,16
    1334:	24400015 	stw	r17,0(r4)
    1338:	23400115 	stw	r13,4(r4)
    133c:	d8c01c15 	stw	r3,112(sp)
    1340:	d8801b15 	stw	r2,108(sp)
    1344:	11400208 	cmpgei	r5,r2,8
    1348:	283ff426 	beq	r5,zero,131c <___vfprintf_internal_r+0xd5c>
    134c:	d9801a04 	addi	r6,sp,104
    1350:	900b883a 	mov	r5,r18
    1354:	9809883a 	mov	r4,r19
    1358:	0006ed80 	call	6ed8 <__sprint_r>
    135c:	103da51e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1360:	843ffc04 	addi	r16,r16,-16
    1364:	81400448 	cmpgei	r5,r16,17
    1368:	d8c01c17 	ldw	r3,112(sp)
    136c:	d8801b17 	ldw	r2,108(sp)
    1370:	d9002704 	addi	r4,sp,156
    1374:	03400404 	movi	r13,16
    1378:	283fec1e 	bne	r5,zero,132c <___vfprintf_internal_r+0xd6c>
    137c:	8019883a 	mov	r12,r16
    1380:	880f883a 	mov	r7,r17
    1384:	dc000f17 	ldw	r16,60(sp)
    1388:	dc400e17 	ldw	r17,56(sp)
    138c:	a011883a 	mov	r8,r20
    1390:	b029883a 	mov	r20,r22
    1394:	202d883a 	mov	r22,r4
    1398:	10800044 	addi	r2,r2,1
    139c:	1b07883a 	add	r3,r3,r12
    13a0:	d8801b15 	stw	r2,108(sp)
    13a4:	b1c00015 	stw	r7,0(r22)
    13a8:	b3000115 	stw	r12,4(r22)
    13ac:	d8c01c15 	stw	r3,112(sp)
    13b0:	10800208 	cmpgei	r2,r2,8
    13b4:	1002eb1e 	bne	r2,zero,1f64 <___vfprintf_internal_r+0x19a4>
    13b8:	4551c83a 	sub	r8,r8,r21
    13bc:	b5800204 	addi	r22,r22,8
    13c0:	023d6e0e 	bge	zero,r8,97c <___vfprintf_internal_r+0x3bc>
    13c4:	01c00074 	movhi	r7,1
    13c8:	41000450 	cmplti	r4,r8,17
    13cc:	d8801b17 	ldw	r2,108(sp)
    13d0:	39c03f04 	addi	r7,r7,252
    13d4:	2000221e 	bne	r4,zero,1460 <___vfprintf_internal_r+0xea0>
    13d8:	dc400e15 	stw	r17,56(sp)
    13dc:	dc000f15 	stw	r16,60(sp)
    13e0:	03000404 	movi	r12,16
    13e4:	4021883a 	mov	r16,r8
    13e8:	3823883a 	mov	r17,r7
    13ec:	00000406 	br	1400 <___vfprintf_internal_r+0xe40>
    13f0:	843ffc04 	addi	r16,r16,-16
    13f4:	81000448 	cmpgei	r4,r16,17
    13f8:	b5800204 	addi	r22,r22,8
    13fc:	20001426 	beq	r4,zero,1450 <___vfprintf_internal_r+0xe90>
    1400:	10800044 	addi	r2,r2,1
    1404:	18c00404 	addi	r3,r3,16
    1408:	b4400015 	stw	r17,0(r22)
    140c:	b3000115 	stw	r12,4(r22)
    1410:	d8c01c15 	stw	r3,112(sp)
    1414:	d8801b15 	stw	r2,108(sp)
    1418:	11000208 	cmpgei	r4,r2,8
    141c:	203ff426 	beq	r4,zero,13f0 <___vfprintf_internal_r+0xe30>
    1420:	d9801a04 	addi	r6,sp,104
    1424:	900b883a 	mov	r5,r18
    1428:	9809883a 	mov	r4,r19
    142c:	0006ed80 	call	6ed8 <__sprint_r>
    1430:	103d701e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1434:	843ffc04 	addi	r16,r16,-16
    1438:	81000448 	cmpgei	r4,r16,17
    143c:	d8c01c17 	ldw	r3,112(sp)
    1440:	d8801b17 	ldw	r2,108(sp)
    1444:	dd802704 	addi	r22,sp,156
    1448:	03000404 	movi	r12,16
    144c:	203fec1e 	bne	r4,zero,1400 <___vfprintf_internal_r+0xe40>
    1450:	8011883a 	mov	r8,r16
    1454:	880f883a 	mov	r7,r17
    1458:	dc000f17 	ldw	r16,60(sp)
    145c:	dc400e17 	ldw	r17,56(sp)
    1460:	10800044 	addi	r2,r2,1
    1464:	1a07883a 	add	r3,r3,r8
    1468:	d8801b15 	stw	r2,108(sp)
    146c:	b1c00015 	stw	r7,0(r22)
    1470:	b2000115 	stw	r8,4(r22)
    1474:	d8c01c15 	stw	r3,112(sp)
    1478:	10800208 	cmpgei	r2,r2,8
    147c:	1001731e 	bne	r2,zero,1a4c <___vfprintf_internal_r+0x148c>
    1480:	b5800204 	addi	r22,r22,8
    1484:	003d3d06 	br	97c <___vfprintf_internal_r+0x3bc>
    1488:	10c00060 	cmpeqi	r3,r2,1
    148c:	1803831e 	bne	r3,zero,229c <___vfprintf_internal_r+0x1cdc>
    1490:	108000a0 	cmpeqi	r2,r2,2
    1494:	db000417 	ldw	r12,16(sp)
    1498:	103ea326 	beq	r2,zero,f28 <___vfprintf_internal_r+0x968>
    149c:	d9000c17 	ldw	r4,48(sp)
    14a0:	dc402704 	addi	r17,sp,156
    14a4:	a08003cc 	andi	r2,r20,15
    14a8:	a806973a 	slli	r3,r21,28
    14ac:	a028d13a 	srli	r20,r20,4
    14b0:	2085883a 	add	r2,r4,r2
    14b4:	10800003 	ldbu	r2,0(r2)
    14b8:	a82ad13a 	srli	r21,r21,4
    14bc:	1d28b03a 	or	r20,r3,r20
    14c0:	88bfffc5 	stb	r2,-1(r17)
    14c4:	a544b03a 	or	r2,r20,r21
    14c8:	8c7fffc4 	addi	r17,r17,-1
    14cc:	103ff51e 	bne	r2,zero,14a4 <___vfprintf_internal_r+0xee4>
    14d0:	d8802704 	addi	r2,sp,156
    14d4:	146bc83a 	sub	r21,r2,r17
    14d8:	db000415 	stw	r12,16(sp)
    14dc:	003e4d06 	br	e14 <___vfprintf_internal_r+0x854>
    14e0:	d9801a04 	addi	r6,sp,104
    14e4:	900b883a 	mov	r5,r18
    14e8:	9809883a 	mov	r4,r19
    14ec:	0006ed80 	call	6ed8 <__sprint_r>
    14f0:	103d3a26 	beq	r2,zero,9dc <___vfprintf_internal_r+0x41c>
    14f4:	003d3f06 	br	9f4 <___vfprintf_internal_r+0x434>
    14f8:	d8801b17 	ldw	r2,108(sp)
    14fc:	01000074 	movhi	r4,1
    1500:	21003e04 	addi	r4,r4,248
    1504:	10800044 	addi	r2,r2,1
    1508:	18c00044 	addi	r3,r3,1
    150c:	b1000015 	stw	r4,0(r22)
    1510:	01000044 	movi	r4,1
    1514:	d8801b15 	stw	r2,108(sp)
    1518:	b1000115 	stw	r4,4(r22)
    151c:	d8c01c15 	stw	r3,112(sp)
    1520:	10800208 	cmpgei	r2,r2,8
    1524:	1003211e 	bne	r2,zero,21ac <___vfprintf_internal_r+0x1bec>
    1528:	b5800204 	addi	r22,r22,8
    152c:	2802a51e 	bne	r5,zero,1fc4 <___vfprintf_internal_r+0x1a04>
    1530:	d8800417 	ldw	r2,16(sp)
    1534:	d9000817 	ldw	r4,32(sp)
    1538:	1080004c 	andi	r2,r2,1
    153c:	1104b03a 	or	r2,r2,r4
    1540:	103d1b26 	beq	r2,zero,9b0 <___vfprintf_internal_r+0x3f0>
    1544:	d8800d17 	ldw	r2,52(sp)
    1548:	d9000b17 	ldw	r4,44(sp)
    154c:	b0800015 	stw	r2,0(r22)
    1550:	d8801b17 	ldw	r2,108(sp)
    1554:	20c7883a 	add	r3,r4,r3
    1558:	b1000115 	stw	r4,4(r22)
    155c:	10800044 	addi	r2,r2,1
    1560:	d8c01c15 	stw	r3,112(sp)
    1564:	d8801b15 	stw	r2,108(sp)
    1568:	11000208 	cmpgei	r4,r2,8
    156c:	2003381e 	bne	r4,zero,2250 <___vfprintf_internal_r+0x1c90>
    1570:	b5800204 	addi	r22,r22,8
    1574:	d9000817 	ldw	r4,32(sp)
    1578:	10800044 	addi	r2,r2,1
    157c:	d8801b15 	stw	r2,108(sp)
    1580:	20c7883a 	add	r3,r4,r3
    1584:	b4400015 	stw	r17,0(r22)
    1588:	b1000115 	stw	r4,4(r22)
    158c:	d8c01c15 	stw	r3,112(sp)
    1590:	10800208 	cmpgei	r2,r2,8
    1594:	103d0526 	beq	r2,zero,9ac <___vfprintf_internal_r+0x3ec>
    1598:	d9801a04 	addi	r6,sp,104
    159c:	900b883a 	mov	r5,r18
    15a0:	9809883a 	mov	r4,r19
    15a4:	0006ed80 	call	6ed8 <__sprint_r>
    15a8:	103d121e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    15ac:	d8c01c17 	ldw	r3,112(sp)
    15b0:	dd802704 	addi	r22,sp,156
    15b4:	003cfe06 	br	9b0 <___vfprintf_internal_r+0x3f0>
    15b8:	d8800817 	ldw	r2,32(sp)
    15bc:	dd401b17 	ldw	r21,108(sp)
    15c0:	18c00044 	addi	r3,r3,1
    15c4:	10800088 	cmpgei	r2,r2,2
    15c8:	ad400044 	addi	r21,r21,1
    15cc:	b7000204 	addi	fp,r22,8
    15d0:	1000e826 	beq	r2,zero,1974 <___vfprintf_internal_r+0x13b4>
    15d4:	00800044 	movi	r2,1
    15d8:	b0800115 	stw	r2,4(r22)
    15dc:	b4400015 	stw	r17,0(r22)
    15e0:	d8c01c15 	stw	r3,112(sp)
    15e4:	dd401b15 	stw	r21,108(sp)
    15e8:	a8800210 	cmplti	r2,r21,8
    15ec:	1001ad26 	beq	r2,zero,1ca4 <___vfprintf_internal_r+0x16e4>
    15f0:	d8800b17 	ldw	r2,44(sp)
    15f4:	d9000d17 	ldw	r4,52(sp)
    15f8:	ad400044 	addi	r21,r21,1
    15fc:	1887883a 	add	r3,r3,r2
    1600:	e0800115 	stw	r2,4(fp)
    1604:	e1000015 	stw	r4,0(fp)
    1608:	d8c01c15 	stw	r3,112(sp)
    160c:	dd401b15 	stw	r21,108(sp)
    1610:	a8800208 	cmpgei	r2,r21,8
    1614:	1001ac1e 	bne	r2,zero,1cc8 <___vfprintf_internal_r+0x1708>
    1618:	e7000204 	addi	fp,fp,8
    161c:	d9000917 	ldw	r4,36(sp)
    1620:	d9400a17 	ldw	r5,40(sp)
    1624:	000d883a 	mov	r6,zero
    1628:	000f883a 	mov	r7,zero
    162c:	d8c00715 	stw	r3,28(sp)
    1630:	000bc4c0 	call	bc4c <__eqdf2>
    1634:	d8c00817 	ldw	r3,32(sp)
    1638:	1dbfffc4 	addi	r22,r3,-1
    163c:	d8c00717 	ldw	r3,28(sp)
    1640:	1000e426 	beq	r2,zero,19d4 <___vfprintf_internal_r+0x1414>
    1644:	8a400044 	addi	r9,r17,1
    1648:	ad400044 	addi	r21,r21,1
    164c:	1d87883a 	add	r3,r3,r22
    1650:	e2400015 	stw	r9,0(fp)
    1654:	e5800115 	stw	r22,4(fp)
    1658:	d8c01c15 	stw	r3,112(sp)
    165c:	dd401b15 	stw	r21,108(sp)
    1660:	a8800208 	cmpgei	r2,r21,8
    1664:	1000cd1e 	bne	r2,zero,199c <___vfprintf_internal_r+0x13dc>
    1668:	e7000204 	addi	fp,fp,8
    166c:	d9001017 	ldw	r4,64(sp)
    1670:	ad400044 	addi	r21,r21,1
    1674:	d8801644 	addi	r2,sp,89
    1678:	20c7883a 	add	r3,r4,r3
    167c:	dd401b15 	stw	r21,108(sp)
    1680:	e0800015 	stw	r2,0(fp)
    1684:	e1000115 	stw	r4,4(fp)
    1688:	d8c01c15 	stw	r3,112(sp)
    168c:	ad400208 	cmpgei	r21,r21,8
    1690:	a83fc11e 	bne	r21,zero,1598 <___vfprintf_internal_r+0xfd8>
    1694:	e5800204 	addi	r22,fp,8
    1698:	003cc506 	br	9b0 <___vfprintf_internal_r+0x3f0>
    169c:	db000417 	ldw	r12,16(sp)
    16a0:	003e1d06 	br	f18 <___vfprintf_internal_r+0x958>
    16a4:	03000074 	movhi	r12,1
    16a8:	39000450 	cmplti	r4,r7,17
    16ac:	d8801b17 	ldw	r2,108(sp)
    16b0:	63004304 	addi	r12,r12,268
    16b4:	2000321e 	bne	r4,zero,1780 <___vfprintf_internal_r+0x11c0>
    16b8:	dc401115 	stw	r17,68(sp)
    16bc:	b009883a 	mov	r4,r22
    16c0:	9023883a 	mov	r17,r18
    16c4:	a82d883a 	mov	r22,r21
    16c8:	ddc01215 	stw	r23,72(sp)
    16cc:	03c00404 	movi	r15,16
    16d0:	a02f883a 	mov	r23,r20
    16d4:	db800e15 	stw	r14,56(sp)
    16d8:	8029883a 	mov	r20,r16
    16dc:	db400f15 	stw	r13,60(sp)
    16e0:	402b883a 	mov	r21,r8
    16e4:	3821883a 	mov	r16,r7
    16e8:	6025883a 	mov	r18,r12
    16ec:	00000406 	br	1700 <___vfprintf_internal_r+0x1140>
    16f0:	843ffc04 	addi	r16,r16,-16
    16f4:	81800448 	cmpgei	r6,r16,17
    16f8:	21000204 	addi	r4,r4,8
    16fc:	30001426 	beq	r6,zero,1750 <___vfprintf_internal_r+0x1190>
    1700:	10800044 	addi	r2,r2,1
    1704:	18c00404 	addi	r3,r3,16
    1708:	24800015 	stw	r18,0(r4)
    170c:	23c00115 	stw	r15,4(r4)
    1710:	d8c01c15 	stw	r3,112(sp)
    1714:	d8801b15 	stw	r2,108(sp)
    1718:	11800208 	cmpgei	r6,r2,8
    171c:	303ff426 	beq	r6,zero,16f0 <___vfprintf_internal_r+0x1130>
    1720:	d9801a04 	addi	r6,sp,104
    1724:	880b883a 	mov	r5,r17
    1728:	9809883a 	mov	r4,r19
    172c:	0006ed80 	call	6ed8 <__sprint_r>
    1730:	10017c1e 	bne	r2,zero,1d24 <___vfprintf_internal_r+0x1764>
    1734:	843ffc04 	addi	r16,r16,-16
    1738:	81800448 	cmpgei	r6,r16,17
    173c:	d8c01c17 	ldw	r3,112(sp)
    1740:	d8801b17 	ldw	r2,108(sp)
    1744:	d9002704 	addi	r4,sp,156
    1748:	03c00404 	movi	r15,16
    174c:	303fec1e 	bne	r6,zero,1700 <___vfprintf_internal_r+0x1140>
    1750:	800f883a 	mov	r7,r16
    1754:	9019883a 	mov	r12,r18
    1758:	a021883a 	mov	r16,r20
    175c:	8825883a 	mov	r18,r17
    1760:	b829883a 	mov	r20,r23
    1764:	db800e17 	ldw	r14,56(sp)
    1768:	db400f17 	ldw	r13,60(sp)
    176c:	ddc01217 	ldw	r23,72(sp)
    1770:	dc401117 	ldw	r17,68(sp)
    1774:	a811883a 	mov	r8,r21
    1778:	b02b883a 	mov	r21,r22
    177c:	202d883a 	mov	r22,r4
    1780:	10800044 	addi	r2,r2,1
    1784:	19c7883a 	add	r3,r3,r7
    1788:	d8801b15 	stw	r2,108(sp)
    178c:	b3000015 	stw	r12,0(r22)
    1790:	b1c00115 	stw	r7,4(r22)
    1794:	d8c01c15 	stw	r3,112(sp)
    1798:	10800208 	cmpgei	r2,r2,8
    179c:	1001531e 	bne	r2,zero,1cec <___vfprintf_internal_r+0x172c>
    17a0:	b5800204 	addi	r22,r22,8
    17a4:	003c5606 	br	900 <___vfprintf_internal_r+0x340>
    17a8:	d9801a04 	addi	r6,sp,104
    17ac:	900b883a 	mov	r5,r18
    17b0:	9809883a 	mov	r4,r19
    17b4:	da001115 	stw	r8,68(sp)
    17b8:	db400f15 	stw	r13,60(sp)
    17bc:	db800e15 	stw	r14,56(sp)
    17c0:	0006ed80 	call	6ed8 <__sprint_r>
    17c4:	103c8b1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    17c8:	d8c01c17 	ldw	r3,112(sp)
    17cc:	da001117 	ldw	r8,68(sp)
    17d0:	db400f17 	ldw	r13,60(sp)
    17d4:	db800e17 	ldw	r14,56(sp)
    17d8:	dd802704 	addi	r22,sp,156
    17dc:	003c5606 	br	938 <___vfprintf_internal_r+0x378>
    17e0:	d9801a04 	addi	r6,sp,104
    17e4:	900b883a 	mov	r5,r18
    17e8:	9809883a 	mov	r4,r19
    17ec:	da000f15 	stw	r8,60(sp)
    17f0:	db400e15 	stw	r13,56(sp)
    17f4:	0006ed80 	call	6ed8 <__sprint_r>
    17f8:	103c7e1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    17fc:	d8c01c17 	ldw	r3,112(sp)
    1800:	da000f17 	ldw	r8,60(sp)
    1804:	db400e17 	ldw	r13,56(sp)
    1808:	dd802704 	addi	r22,sp,156
    180c:	003c5706 	br	96c <___vfprintf_internal_r+0x3ac>
    1810:	d9401417 	ldw	r5,80(sp)
    1814:	017f380e 	bge	zero,r5,14f8 <___vfprintf_internal_r+0xf38>
    1818:	d8800717 	ldw	r2,28(sp)
    181c:	d9000817 	ldw	r4,32(sp)
    1820:	102b883a 	mov	r21,r2
    1824:	2080b316 	blt	r4,r2,1af4 <___vfprintf_internal_r+0x1534>
    1828:	05400a0e 	bge	zero,r21,1854 <___vfprintf_internal_r+0x1294>
    182c:	d8801b17 	ldw	r2,108(sp)
    1830:	1d47883a 	add	r3,r3,r21
    1834:	b4400015 	stw	r17,0(r22)
    1838:	10800044 	addi	r2,r2,1
    183c:	d8801b15 	stw	r2,108(sp)
    1840:	b5400115 	stw	r21,4(r22)
    1844:	d8c01c15 	stw	r3,112(sp)
    1848:	10800208 	cmpgei	r2,r2,8
    184c:	1002cf1e 	bne	r2,zero,238c <___vfprintf_internal_r+0x1dcc>
    1850:	b5800204 	addi	r22,r22,8
    1854:	a800b516 	blt	r21,zero,1b2c <___vfprintf_internal_r+0x156c>
    1858:	d8800717 	ldw	r2,28(sp)
    185c:	156bc83a 	sub	r21,r2,r21
    1860:	0540c416 	blt	zero,r21,1b74 <___vfprintf_internal_r+0x15b4>
    1864:	dd401417 	ldw	r21,80(sp)
    1868:	d8800817 	ldw	r2,32(sp)
    186c:	a880a40e 	bge	r21,r2,1b00 <___vfprintf_internal_r+0x1540>
    1870:	d8800d17 	ldw	r2,52(sp)
    1874:	d9000b17 	ldw	r4,44(sp)
    1878:	b0800015 	stw	r2,0(r22)
    187c:	d8801b17 	ldw	r2,108(sp)
    1880:	1907883a 	add	r3,r3,r4
    1884:	b1000115 	stw	r4,4(r22)
    1888:	10800044 	addi	r2,r2,1
    188c:	d8801b15 	stw	r2,108(sp)
    1890:	d8c01c15 	stw	r3,112(sp)
    1894:	10800208 	cmpgei	r2,r2,8
    1898:	1002b31e 	bne	r2,zero,2368 <___vfprintf_internal_r+0x1da8>
    189c:	b5800204 	addi	r22,r22,8
    18a0:	d9000817 	ldw	r4,32(sp)
    18a4:	d9400717 	ldw	r5,28(sp)
    18a8:	2545c83a 	sub	r2,r4,r21
    18ac:	2149c83a 	sub	r4,r4,r5
    18b0:	102b883a 	mov	r21,r2
    18b4:	2080010e 	bge	r4,r2,18bc <___vfprintf_internal_r+0x12fc>
    18b8:	202b883a 	mov	r21,r4
    18bc:	05400c0e 	bge	zero,r21,18f0 <___vfprintf_internal_r+0x1330>
    18c0:	d9000717 	ldw	r4,28(sp)
    18c4:	1d47883a 	add	r3,r3,r21
    18c8:	b5400115 	stw	r21,4(r22)
    18cc:	8913883a 	add	r9,r17,r4
    18d0:	d9001b17 	ldw	r4,108(sp)
    18d4:	b2400015 	stw	r9,0(r22)
    18d8:	d8c01c15 	stw	r3,112(sp)
    18dc:	21000044 	addi	r4,r4,1
    18e0:	d9001b15 	stw	r4,108(sp)
    18e4:	21000208 	cmpgei	r4,r4,8
    18e8:	2002b31e 	bne	r4,zero,23b8 <___vfprintf_internal_r+0x1df8>
    18ec:	b5800204 	addi	r22,r22,8
    18f0:	a800010e 	bge	r21,zero,18f8 <___vfprintf_internal_r+0x1338>
    18f4:	002b883a 	mov	r21,zero
    18f8:	156bc83a 	sub	r21,r2,r21
    18fc:	057c2c0e 	bge	zero,r21,9b0 <___vfprintf_internal_r+0x3f0>
    1900:	01c00074 	movhi	r7,1
    1904:	a9000450 	cmplti	r4,r21,17
    1908:	d8801b17 	ldw	r2,108(sp)
    190c:	39c03f04 	addi	r7,r7,252
    1910:	2001881e 	bne	r4,zero,1f34 <___vfprintf_internal_r+0x1974>
    1914:	07000404 	movi	fp,16
    1918:	3823883a 	mov	r17,r7
    191c:	00000406 	br	1930 <___vfprintf_internal_r+0x1370>
    1920:	b5800204 	addi	r22,r22,8
    1924:	ad7ffc04 	addi	r21,r21,-16
    1928:	a9000448 	cmpgei	r4,r21,17
    192c:	20018026 	beq	r4,zero,1f30 <___vfprintf_internal_r+0x1970>
    1930:	10800044 	addi	r2,r2,1
    1934:	18c00404 	addi	r3,r3,16
    1938:	b4400015 	stw	r17,0(r22)
    193c:	b7000115 	stw	fp,4(r22)
    1940:	d8c01c15 	stw	r3,112(sp)
    1944:	d8801b15 	stw	r2,108(sp)
    1948:	11000208 	cmpgei	r4,r2,8
    194c:	203ff426 	beq	r4,zero,1920 <___vfprintf_internal_r+0x1360>
    1950:	d9801a04 	addi	r6,sp,104
    1954:	900b883a 	mov	r5,r18
    1958:	9809883a 	mov	r4,r19
    195c:	0006ed80 	call	6ed8 <__sprint_r>
    1960:	103c241e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1964:	d8c01c17 	ldw	r3,112(sp)
    1968:	d8801b17 	ldw	r2,108(sp)
    196c:	dd802704 	addi	r22,sp,156
    1970:	003fec06 	br	1924 <___vfprintf_internal_r+0x1364>
    1974:	d8800417 	ldw	r2,16(sp)
    1978:	1080004c 	andi	r2,r2,1
    197c:	103f151e 	bne	r2,zero,15d4 <___vfprintf_internal_r+0x1014>
    1980:	00800044 	movi	r2,1
    1984:	b0800115 	stw	r2,4(r22)
    1988:	b4400015 	stw	r17,0(r22)
    198c:	d8c01c15 	stw	r3,112(sp)
    1990:	dd401b15 	stw	r21,108(sp)
    1994:	a8800210 	cmplti	r2,r21,8
    1998:	103f341e 	bne	r2,zero,166c <___vfprintf_internal_r+0x10ac>
    199c:	d9801a04 	addi	r6,sp,104
    19a0:	900b883a 	mov	r5,r18
    19a4:	9809883a 	mov	r4,r19
    19a8:	0006ed80 	call	6ed8 <__sprint_r>
    19ac:	103c111e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    19b0:	d8c01c17 	ldw	r3,112(sp)
    19b4:	dd401b17 	ldw	r21,108(sp)
    19b8:	df002704 	addi	fp,sp,156
    19bc:	003f2b06 	br	166c <___vfprintf_internal_r+0x10ac>
    19c0:	4002361e 	bne	r8,zero,229c <___vfprintf_internal_r+0x1cdc>
    19c4:	0011883a 	mov	r8,zero
    19c8:	002b883a 	mov	r21,zero
    19cc:	dc402704 	addi	r17,sp,156
    19d0:	003d1006 	br	e14 <___vfprintf_internal_r+0x854>
    19d4:	05bf250e 	bge	zero,r22,166c <___vfprintf_internal_r+0x10ac>
    19d8:	01c00074 	movhi	r7,1
    19dc:	b0800450 	cmplti	r2,r22,17
    19e0:	39c03f04 	addi	r7,r7,252
    19e4:	1001731e 	bne	r2,zero,1fb4 <___vfprintf_internal_r+0x19f4>
    19e8:	dc000715 	stw	r16,28(sp)
    19ec:	04400404 	movi	r17,16
    19f0:	3821883a 	mov	r16,r7
    19f4:	00000406 	br	1a08 <___vfprintf_internal_r+0x1448>
    19f8:	e7000204 	addi	fp,fp,8
    19fc:	b5bffc04 	addi	r22,r22,-16
    1a00:	b0800448 	cmpgei	r2,r22,17
    1a04:	10016926 	beq	r2,zero,1fac <___vfprintf_internal_r+0x19ec>
    1a08:	ad400044 	addi	r21,r21,1
    1a0c:	18c00404 	addi	r3,r3,16
    1a10:	e4000015 	stw	r16,0(fp)
    1a14:	e4400115 	stw	r17,4(fp)
    1a18:	d8c01c15 	stw	r3,112(sp)
    1a1c:	dd401b15 	stw	r21,108(sp)
    1a20:	a8800208 	cmpgei	r2,r21,8
    1a24:	103ff426 	beq	r2,zero,19f8 <___vfprintf_internal_r+0x1438>
    1a28:	d9801a04 	addi	r6,sp,104
    1a2c:	900b883a 	mov	r5,r18
    1a30:	9809883a 	mov	r4,r19
    1a34:	0006ed80 	call	6ed8 <__sprint_r>
    1a38:	103bee1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1a3c:	d8c01c17 	ldw	r3,112(sp)
    1a40:	dd401b17 	ldw	r21,108(sp)
    1a44:	df002704 	addi	fp,sp,156
    1a48:	003fec06 	br	19fc <___vfprintf_internal_r+0x143c>
    1a4c:	d9801a04 	addi	r6,sp,104
    1a50:	900b883a 	mov	r5,r18
    1a54:	9809883a 	mov	r4,r19
    1a58:	0006ed80 	call	6ed8 <__sprint_r>
    1a5c:	103be51e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1a60:	d8c01c17 	ldw	r3,112(sp)
    1a64:	dd802704 	addi	r22,sp,156
    1a68:	003bc406 	br	97c <___vfprintf_internal_r+0x3bc>
    1a6c:	002b883a 	mov	r21,zero
    1a70:	003d7306 	br	1040 <___vfprintf_internal_r+0xa80>
    1a74:	a02bd7fa 	srai	r21,r20,31
    1a78:	a805883a 	mov	r2,r21
    1a7c:	003cd306 	br	dcc <___vfprintf_internal_r+0x80c>
    1a80:	d8800417 	ldw	r2,16(sp)
    1a84:	1080004c 	andi	r2,r2,1
    1a88:	103bc926 	beq	r2,zero,9b0 <___vfprintf_internal_r+0x3f0>
    1a8c:	003de706 	br	122c <___vfprintf_internal_r+0xc6c>
    1a90:	63000414 	ori	r12,r12,16
    1a94:	003b1606 	br	6f0 <___vfprintf_internal_r+0x130>
    1a98:	bac00007 	ldb	r11,0(r23)
    1a9c:	d8800615 	stw	r2,24(sp)
    1aa0:	003b1306 	br	6f0 <___vfprintf_internal_r+0x130>
    1aa4:	dc402704 	addi	r17,sp,156
    1aa8:	003cda06 	br	e14 <___vfprintf_internal_r+0x854>
    1aac:	18800017 	ldw	r2,0(r3)
    1ab0:	d8800915 	stw	r2,36(sp)
    1ab4:	18800117 	ldw	r2,4(r3)
    1ab8:	d8800a15 	stw	r2,40(sp)
    1abc:	003c4006 	br	bc0 <___vfprintf_internal_r+0x600>
    1ac0:	00800c04 	movi	r2,48
    1ac4:	d8801385 	stb	r2,78(sp)
    1ac8:	df0013c5 	stb	fp,79(sp)
    1acc:	63000094 	ori	r12,r12,2
    1ad0:	00800084 	movi	r2,2
    1ad4:	003c0406 	br	ae8 <___vfprintf_internal_r+0x528>
    1ad8:	d9400517 	ldw	r5,20(sp)
    1adc:	20800017 	ldw	r2,0(r4)
    1ae0:	d8c00615 	stw	r3,24(sp)
    1ae4:	2809d7fa 	srai	r4,r5,31
    1ae8:	11400015 	stw	r5,0(r2)
    1aec:	11000115 	stw	r4,4(r2)
    1af0:	003ae706 	br	690 <___vfprintf_internal_r+0xd0>
    1af4:	202b883a 	mov	r21,r4
    1af8:	057f4c16 	blt	zero,r21,182c <___vfprintf_internal_r+0x126c>
    1afc:	003f5506 	br	1854 <___vfprintf_internal_r+0x1294>
    1b00:	d8800417 	ldw	r2,16(sp)
    1b04:	1080004c 	andi	r2,r2,1
    1b08:	103f591e 	bne	r2,zero,1870 <___vfprintf_internal_r+0x12b0>
    1b0c:	d9000817 	ldw	r4,32(sp)
    1b10:	d9400717 	ldw	r5,28(sp)
    1b14:	2545c83a 	sub	r2,r4,r21
    1b18:	2179c83a 	sub	fp,r4,r5
    1b1c:	102b883a 	mov	r21,r2
    1b20:	e0bf730e 	bge	fp,r2,18f0 <___vfprintf_internal_r+0x1330>
    1b24:	e02b883a 	mov	r21,fp
    1b28:	003f7106 	br	18f0 <___vfprintf_internal_r+0x1330>
    1b2c:	002b883a 	mov	r21,zero
    1b30:	003f4906 	br	1858 <___vfprintf_internal_r+0x1298>
    1b34:	d9801a04 	addi	r6,sp,104
    1b38:	900b883a 	mov	r5,r18
    1b3c:	9809883a 	mov	r4,r19
    1b40:	0006ed80 	call	6ed8 <__sprint_r>
    1b44:	103bab1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1b48:	d8c01c17 	ldw	r3,112(sp)
    1b4c:	dd802704 	addi	r22,sp,156
    1b50:	003dc206 	br	125c <___vfprintf_internal_r+0xc9c>
    1b54:	408001f0 	cmpltui	r2,r8,7
    1b58:	402b883a 	mov	r21,r8
    1b5c:	1001a026 	beq	r2,zero,21e0 <___vfprintf_internal_r+0x1c20>
    1b60:	04400074 	movhi	r17,1
    1b64:	a829883a 	mov	r20,r21
    1b68:	d8c00615 	stw	r3,24(sp)
    1b6c:	8c403c04 	addi	r17,r17,240
    1b70:	003b5606 	br	8cc <___vfprintf_internal_r+0x30c>
    1b74:	01c00074 	movhi	r7,1
    1b78:	a9000450 	cmplti	r4,r21,17
    1b7c:	d8801b17 	ldw	r2,108(sp)
    1b80:	39c03f04 	addi	r7,r7,252
    1b84:	20017b1e 	bne	r4,zero,2174 <___vfprintf_internal_r+0x1bb4>
    1b88:	dc000e15 	stw	r16,56(sp)
    1b8c:	07000404 	movi	fp,16
    1b90:	3821883a 	mov	r16,r7
    1b94:	00000406 	br	1ba8 <___vfprintf_internal_r+0x15e8>
    1b98:	b5800204 	addi	r22,r22,8
    1b9c:	ad7ffc04 	addi	r21,r21,-16
    1ba0:	a9000448 	cmpgei	r4,r21,17
    1ba4:	20017126 	beq	r4,zero,216c <___vfprintf_internal_r+0x1bac>
    1ba8:	10800044 	addi	r2,r2,1
    1bac:	18c00404 	addi	r3,r3,16
    1bb0:	b4000015 	stw	r16,0(r22)
    1bb4:	b7000115 	stw	fp,4(r22)
    1bb8:	d8c01c15 	stw	r3,112(sp)
    1bbc:	d8801b15 	stw	r2,108(sp)
    1bc0:	11000208 	cmpgei	r4,r2,8
    1bc4:	203ff426 	beq	r4,zero,1b98 <___vfprintf_internal_r+0x15d8>
    1bc8:	d9801a04 	addi	r6,sp,104
    1bcc:	900b883a 	mov	r5,r18
    1bd0:	9809883a 	mov	r4,r19
    1bd4:	0006ed80 	call	6ed8 <__sprint_r>
    1bd8:	103b861e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1bdc:	d8c01c17 	ldw	r3,112(sp)
    1be0:	d8801b17 	ldw	r2,108(sp)
    1be4:	dd802704 	addi	r22,sp,156
    1be8:	003fec06 	br	1b9c <___vfprintf_internal_r+0x15dc>
    1bec:	dc402704 	addi	r17,sp,156
    1bf0:	a805883a 	mov	r2,r21
    1bf4:	dc000715 	stw	r16,28(sp)
    1bf8:	902b883a 	mov	r21,r18
    1bfc:	8821883a 	mov	r16,r17
    1c00:	db000415 	stw	r12,16(sp)
    1c04:	a023883a 	mov	r17,r20
    1c08:	da000e15 	stw	r8,56(sp)
    1c0c:	9829883a 	mov	r20,r19
    1c10:	1025883a 	mov	r18,r2
    1c14:	6827883a 	mov	r19,r13
    1c18:	8809883a 	mov	r4,r17
    1c1c:	900b883a 	mov	r5,r18
    1c20:	01800284 	movi	r6,10
    1c24:	000f883a 	mov	r7,zero
    1c28:	000a4240 	call	a424 <__umoddi3>
    1c2c:	10800c04 	addi	r2,r2,48
    1c30:	8809883a 	mov	r4,r17
    1c34:	900b883a 	mov	r5,r18
    1c38:	01800284 	movi	r6,10
    1c3c:	000f883a 	mov	r7,zero
    1c40:	80bfffc5 	stb	r2,-1(r16)
    1c44:	0009e940 	call	9e94 <__udivdi3>
    1c48:	900d883a 	mov	r6,r18
    1c4c:	880f883a 	mov	r7,r17
    1c50:	843fffc4 	addi	r16,r16,-1
    1c54:	1023883a 	mov	r17,r2
    1c58:	1825883a 	mov	r18,r3
    1c5c:	303fee1e 	bne	r6,zero,1c18 <___vfprintf_internal_r+0x1658>
    1c60:	39c002a8 	cmpgeui	r7,r7,10
    1c64:	383fec1e 	bne	r7,zero,1c18 <___vfprintf_internal_r+0x1658>
    1c68:	8023883a 	mov	r17,r16
    1c6c:	d8802704 	addi	r2,sp,156
    1c70:	981b883a 	mov	r13,r19
    1c74:	a825883a 	mov	r18,r21
    1c78:	dc000717 	ldw	r16,28(sp)
    1c7c:	da000e17 	ldw	r8,56(sp)
    1c80:	a027883a 	mov	r19,r20
    1c84:	146bc83a 	sub	r21,r2,r17
    1c88:	003c6206 	br	e14 <___vfprintf_internal_r+0x854>
    1c8c:	d8800617 	ldw	r2,24(sp)
    1c90:	10800017 	ldw	r2,0(r2)
    1c94:	d8c00615 	stw	r3,24(sp)
    1c98:	d8c00517 	ldw	r3,20(sp)
    1c9c:	10c00015 	stw	r3,0(r2)
    1ca0:	003a7b06 	br	690 <___vfprintf_internal_r+0xd0>
    1ca4:	d9801a04 	addi	r6,sp,104
    1ca8:	900b883a 	mov	r5,r18
    1cac:	9809883a 	mov	r4,r19
    1cb0:	0006ed80 	call	6ed8 <__sprint_r>
    1cb4:	103b4f1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1cb8:	d8c01c17 	ldw	r3,112(sp)
    1cbc:	dd401b17 	ldw	r21,108(sp)
    1cc0:	df002704 	addi	fp,sp,156
    1cc4:	003e4a06 	br	15f0 <___vfprintf_internal_r+0x1030>
    1cc8:	d9801a04 	addi	r6,sp,104
    1ccc:	900b883a 	mov	r5,r18
    1cd0:	9809883a 	mov	r4,r19
    1cd4:	0006ed80 	call	6ed8 <__sprint_r>
    1cd8:	103b461e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1cdc:	d8c01c17 	ldw	r3,112(sp)
    1ce0:	dd401b17 	ldw	r21,108(sp)
    1ce4:	df002704 	addi	fp,sp,156
    1ce8:	003e4c06 	br	161c <___vfprintf_internal_r+0x105c>
    1cec:	d9801a04 	addi	r6,sp,104
    1cf0:	900b883a 	mov	r5,r18
    1cf4:	9809883a 	mov	r4,r19
    1cf8:	da001115 	stw	r8,68(sp)
    1cfc:	db400f15 	stw	r13,60(sp)
    1d00:	db800e15 	stw	r14,56(sp)
    1d04:	0006ed80 	call	6ed8 <__sprint_r>
    1d08:	103b3a1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1d0c:	d8c01c17 	ldw	r3,112(sp)
    1d10:	da001117 	ldw	r8,68(sp)
    1d14:	db400f17 	ldw	r13,60(sp)
    1d18:	db800e17 	ldw	r14,56(sp)
    1d1c:	dd802704 	addi	r22,sp,156
    1d20:	003af706 	br	900 <___vfprintf_internal_r+0x340>
    1d24:	8825883a 	mov	r18,r17
    1d28:	003b3206 	br	9f4 <___vfprintf_internal_r+0x434>
    1d2c:	d9000917 	ldw	r4,36(sp)
    1d30:	d9400a17 	ldw	r5,40(sp)
    1d34:	da000615 	stw	r8,24(sp)
    1d38:	200d883a 	mov	r6,r4
    1d3c:	280f883a 	mov	r7,r5
    1d40:	db000415 	stw	r12,16(sp)
    1d44:	000ce1c0 	call	ce1c <__unorddf2>
    1d48:	db000417 	ldw	r12,16(sp)
    1d4c:	da000617 	ldw	r8,24(sp)
    1d50:	1001f51e 	bne	r2,zero,2528 <___vfprintf_internal_r+0x1f68>
    1d54:	057ff7c4 	movi	r21,-33
    1d58:	40bfffe0 	cmpeqi	r2,r8,-1
    1d5c:	e56a703a 	and	r21,fp,r21
    1d60:	1001931e 	bne	r2,zero,23b0 <___vfprintf_internal_r+0x1df0>
    1d64:	a88011d8 	cmpnei	r2,r21,71
    1d68:	10013626 	beq	r2,zero,2244 <___vfprintf_internal_r+0x1c84>
    1d6c:	60804014 	ori	r2,r12,256
    1d70:	d8800415 	stw	r2,16(sp)
    1d74:	d8800a17 	ldw	r2,40(sp)
    1d78:	10011516 	blt	r2,zero,21d0 <___vfprintf_internal_r+0x1c10>
    1d7c:	dd000a17 	ldw	r20,40(sp)
    1d80:	d8000605 	stb	zero,24(sp)
    1d84:	e08019a0 	cmpeqi	r2,fp,102
    1d88:	d8800f15 	stw	r2,60(sp)
    1d8c:	1000b91e 	bne	r2,zero,2074 <___vfprintf_internal_r+0x1ab4>
    1d90:	e08011a0 	cmpeqi	r2,fp,70
    1d94:	1000b71e 	bne	r2,zero,2074 <___vfprintf_internal_r+0x1ab4>
    1d98:	a8801158 	cmpnei	r2,r21,69
    1d9c:	10014126 	beq	r2,zero,22a4 <___vfprintf_internal_r+0x1ce4>
    1da0:	d8801804 	addi	r2,sp,96
    1da4:	d8800315 	stw	r2,12(sp)
    1da8:	d9400917 	ldw	r5,36(sp)
    1dac:	d8801504 	addi	r2,sp,84
    1db0:	d8800215 	stw	r2,8(sp)
    1db4:	d8801404 	addi	r2,sp,80
    1db8:	da000015 	stw	r8,0(sp)
    1dbc:	9809883a 	mov	r4,r19
    1dc0:	d8800115 	stw	r2,4(sp)
    1dc4:	01c00084 	movi	r7,2
    1dc8:	a00d883a 	mov	r6,r20
    1dcc:	db000815 	stw	r12,32(sp)
    1dd0:	da000715 	stw	r8,28(sp)
    1dd4:	0002a040 	call	2a04 <_dtoa_r>
    1dd8:	da000717 	ldw	r8,28(sp)
    1ddc:	e10019d8 	cmpnei	r4,fp,103
    1de0:	db000817 	ldw	r12,32(sp)
    1de4:	1023883a 	mov	r17,r2
    1de8:	4007883a 	mov	r3,r8
    1dec:	2001411e 	bne	r4,zero,22f4 <___vfprintf_internal_r+0x1d34>
    1df0:	6080004c 	andi	r2,r12,1
    1df4:	1001411e 	bne	r2,zero,22fc <___vfprintf_internal_r+0x1d3c>
    1df8:	d8801417 	ldw	r2,80(sp)
    1dfc:	ad4011e0 	cmpeqi	r21,r21,71
    1e00:	d8800715 	stw	r2,28(sp)
    1e04:	d8801817 	ldw	r2,96(sp)
    1e08:	1445c83a 	sub	r2,r2,r17
    1e0c:	d8800815 	stw	r2,32(sp)
    1e10:	a8000526 	beq	r21,zero,1e28 <___vfprintf_internal_r+0x1868>
    1e14:	d8c00717 	ldw	r3,28(sp)
    1e18:	18bfff50 	cmplti	r2,r3,-3
    1e1c:	1000011e 	bne	r2,zero,1e24 <___vfprintf_internal_r+0x1864>
    1e20:	40c1460e 	bge	r8,r3,233c <___vfprintf_internal_r+0x1d7c>
    1e24:	e73fff84 	addi	fp,fp,-2
    1e28:	d8800717 	ldw	r2,28(sp)
    1e2c:	df001645 	stb	fp,89(sp)
    1e30:	157fffc4 	addi	r21,r2,-1
    1e34:	dd401415 	stw	r21,80(sp)
    1e38:	a801ab16 	blt	r21,zero,24e8 <___vfprintf_internal_r+0x1f28>
    1e3c:	00800ac4 	movi	r2,43
    1e40:	d8801685 	stb	r2,90(sp)
    1e44:	a8800290 	cmplti	r2,r21,10
    1e48:	1001a01e 	bne	r2,zero,24cc <___vfprintf_internal_r+0x1f0c>
    1e4c:	d98019c4 	addi	r6,sp,103
    1e50:	9029883a 	mov	r20,r18
    1e54:	dc400715 	stw	r17,28(sp)
    1e58:	8025883a 	mov	r18,r16
    1e5c:	db000f15 	stw	r12,60(sp)
    1e60:	3021883a 	mov	r16,r6
    1e64:	a809883a 	mov	r4,r21
    1e68:	01400284 	movi	r5,10
    1e6c:	000a9d80 	call	a9d8 <__modsi3>
    1e70:	10800c04 	addi	r2,r2,48
    1e74:	a809883a 	mov	r4,r21
    1e78:	80bfffc5 	stb	r2,-1(r16)
    1e7c:	01400284 	movi	r5,10
    1e80:	000a9580 	call	a958 <__divsi3>
    1e84:	a9001908 	cmpgei	r4,r21,100
    1e88:	8023883a 	mov	r17,r16
    1e8c:	102b883a 	mov	r21,r2
    1e90:	843fffc4 	addi	r16,r16,-1
    1e94:	203ff31e 	bne	r4,zero,1e64 <___vfprintf_internal_r+0x18a4>
    1e98:	800d883a 	mov	r6,r16
    1e9c:	11000c04 	addi	r4,r2,48
    1ea0:	9021883a 	mov	r16,r18
    1ea4:	a025883a 	mov	r18,r20
    1ea8:	8829883a 	mov	r20,r17
    1eac:	a0bfff84 	addi	r2,r20,-2
    1eb0:	313fffc5 	stb	r4,-1(r6)
    1eb4:	d8c019c4 	addi	r3,sp,103
    1eb8:	db000f17 	ldw	r12,60(sp)
    1ebc:	dc400717 	ldw	r17,28(sp)
    1ec0:	10c1be2e 	bgeu	r2,r3,25bc <___vfprintf_internal_r+0x1ffc>
    1ec4:	d8c016c4 	addi	r3,sp,91
    1ec8:	00000106 	br	1ed0 <___vfprintf_internal_r+0x1910>
    1ecc:	11000003 	ldbu	r4,0(r2)
    1ed0:	19000005 	stb	r4,0(r3)
    1ed4:	10800044 	addi	r2,r2,1
    1ed8:	d90019c4 	addi	r4,sp,103
    1edc:	18c00044 	addi	r3,r3,1
    1ee0:	113ffa1e 	bne	r2,r4,1ecc <___vfprintf_internal_r+0x190c>
    1ee4:	d8801a44 	addi	r2,sp,105
    1ee8:	d8c016c4 	addi	r3,sp,91
    1eec:	1505c83a 	sub	r2,r2,r20
    1ef0:	1885883a 	add	r2,r3,r2
    1ef4:	d8c01644 	addi	r3,sp,89
    1ef8:	10c5c83a 	sub	r2,r2,r3
    1efc:	d8801015 	stw	r2,64(sp)
    1f00:	d8c00817 	ldw	r3,32(sp)
    1f04:	d9001017 	ldw	r4,64(sp)
    1f08:	18800088 	cmpgei	r2,r3,2
    1f0c:	192b883a 	add	r21,r3,r4
    1f10:	10018126 	beq	r2,zero,2518 <___vfprintf_internal_r+0x1f58>
    1f14:	d8800b17 	ldw	r2,44(sp)
    1f18:	a8ab883a 	add	r21,r21,r2
    1f1c:	a829883a 	mov	r20,r21
    1f20:	a800010e 	bge	r21,zero,1f28 <___vfprintf_internal_r+0x1968>
    1f24:	0029883a 	mov	r20,zero
    1f28:	d8000715 	stw	zero,28(sp)
    1f2c:	00008406 	br	2140 <___vfprintf_internal_r+0x1b80>
    1f30:	880f883a 	mov	r7,r17
    1f34:	10800044 	addi	r2,r2,1
    1f38:	1d47883a 	add	r3,r3,r21
    1f3c:	b1c00015 	stw	r7,0(r22)
    1f40:	003a9506 	br	998 <___vfprintf_internal_r+0x3d8>
    1f44:	d9801a04 	addi	r6,sp,104
    1f48:	900b883a 	mov	r5,r18
    1f4c:	9809883a 	mov	r4,r19
    1f50:	0006ed80 	call	6ed8 <__sprint_r>
    1f54:	103aa71e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1f58:	d8c01c17 	ldw	r3,112(sp)
    1f5c:	dd802704 	addi	r22,sp,156
    1f60:	003caf06 	br	1220 <___vfprintf_internal_r+0xc60>
    1f64:	d9801a04 	addi	r6,sp,104
    1f68:	900b883a 	mov	r5,r18
    1f6c:	9809883a 	mov	r4,r19
    1f70:	da000e15 	stw	r8,56(sp)
    1f74:	0006ed80 	call	6ed8 <__sprint_r>
    1f78:	103a9e1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    1f7c:	d8c01c17 	ldw	r3,112(sp)
    1f80:	da000e17 	ldw	r8,56(sp)
    1f84:	dd802704 	addi	r22,sp,156
    1f88:	003a7a06 	br	974 <___vfprintf_internal_r+0x3b4>
    1f8c:	8809883a 	mov	r4,r17
    1f90:	db000415 	stw	r12,16(sp)
    1f94:	d8c00615 	stw	r3,24(sp)
    1f98:	0006d4c0 	call	6d4c <strlen>
    1f9c:	db000417 	ldw	r12,16(sp)
    1fa0:	102b883a 	mov	r21,r2
    1fa4:	1029883a 	mov	r20,r2
    1fa8:	003a4806 	br	8cc <___vfprintf_internal_r+0x30c>
    1fac:	800f883a 	mov	r7,r16
    1fb0:	dc000717 	ldw	r16,28(sp)
    1fb4:	ad400044 	addi	r21,r21,1
    1fb8:	1d87883a 	add	r3,r3,r22
    1fbc:	e1c00015 	stw	r7,0(fp)
    1fc0:	003da406 	br	1654 <___vfprintf_internal_r+0x1094>
    1fc4:	d8800d17 	ldw	r2,52(sp)
    1fc8:	d9000b17 	ldw	r4,44(sp)
    1fcc:	b0800015 	stw	r2,0(r22)
    1fd0:	d8801b17 	ldw	r2,108(sp)
    1fd4:	20c7883a 	add	r3,r4,r3
    1fd8:	b1000115 	stw	r4,4(r22)
    1fdc:	10800044 	addi	r2,r2,1
    1fe0:	d8c01c15 	stw	r3,112(sp)
    1fe4:	d8801b15 	stw	r2,108(sp)
    1fe8:	11000208 	cmpgei	r4,r2,8
    1fec:	2000981e 	bne	r4,zero,2250 <___vfprintf_internal_r+0x1c90>
    1ff0:	b5800204 	addi	r22,r22,8
    1ff4:	283d5f0e 	bge	r5,zero,1574 <___vfprintf_internal_r+0xfb4>
    1ff8:	01c00074 	movhi	r7,1
    1ffc:	293ffc08 	cmpgei	r4,r5,-16
    2000:	39c03f04 	addi	r7,r7,252
    2004:	0179c83a 	sub	fp,zero,r5
    2008:	2001151e 	bne	r4,zero,2460 <___vfprintf_internal_r+0x1ea0>
    200c:	dc000715 	stw	r16,28(sp)
    2010:	05400404 	movi	r21,16
    2014:	9021883a 	mov	r16,r18
    2018:	3825883a 	mov	r18,r7
    201c:	00000406 	br	2030 <___vfprintf_internal_r+0x1a70>
    2020:	b5800204 	addi	r22,r22,8
    2024:	e73ffc04 	addi	fp,fp,-16
    2028:	e1800448 	cmpgei	r6,fp,17
    202c:	30010926 	beq	r6,zero,2454 <___vfprintf_internal_r+0x1e94>
    2030:	10800044 	addi	r2,r2,1
    2034:	18c00404 	addi	r3,r3,16
    2038:	b4800015 	stw	r18,0(r22)
    203c:	b5400115 	stw	r21,4(r22)
    2040:	d8c01c15 	stw	r3,112(sp)
    2044:	d8801b15 	stw	r2,108(sp)
    2048:	11800208 	cmpgei	r6,r2,8
    204c:	303ff426 	beq	r6,zero,2020 <___vfprintf_internal_r+0x1a60>
    2050:	d9801a04 	addi	r6,sp,104
    2054:	800b883a 	mov	r5,r16
    2058:	9809883a 	mov	r4,r19
    205c:	0006ed80 	call	6ed8 <__sprint_r>
    2060:	1001411e 	bne	r2,zero,2568 <___vfprintf_internal_r+0x1fa8>
    2064:	d8c01c17 	ldw	r3,112(sp)
    2068:	d8801b17 	ldw	r2,108(sp)
    206c:	dd802704 	addi	r22,sp,156
    2070:	003fec06 	br	2024 <___vfprintf_internal_r+0x1a64>
    2074:	d8801804 	addi	r2,sp,96
    2078:	d8800315 	stw	r2,12(sp)
    207c:	d9400917 	ldw	r5,36(sp)
    2080:	d8801504 	addi	r2,sp,84
    2084:	d8800215 	stw	r2,8(sp)
    2088:	d8801404 	addi	r2,sp,80
    208c:	da000015 	stw	r8,0(sp)
    2090:	d8800115 	stw	r2,4(sp)
    2094:	01c000c4 	movi	r7,3
    2098:	a00d883a 	mov	r6,r20
    209c:	9809883a 	mov	r4,r19
    20a0:	db000815 	stw	r12,32(sp)
    20a4:	da000715 	stw	r8,28(sp)
    20a8:	0002a040 	call	2a04 <_dtoa_r>
    20ac:	da000717 	ldw	r8,28(sp)
    20b0:	1023883a 	mov	r17,r2
    20b4:	db000817 	ldw	r12,32(sp)
    20b8:	1207883a 	add	r3,r2,r8
    20bc:	88800007 	ldb	r2,0(r17)
    20c0:	10800c20 	cmpeqi	r2,r2,48
    20c4:	10004f1e 	bne	r2,zero,2204 <___vfprintf_internal_r+0x1c44>
    20c8:	d8801417 	ldw	r2,80(sp)
    20cc:	1893883a 	add	r9,r3,r2
    20d0:	d9000917 	ldw	r4,36(sp)
    20d4:	000d883a 	mov	r6,zero
    20d8:	000f883a 	mov	r7,zero
    20dc:	a00b883a 	mov	r5,r20
    20e0:	da401115 	stw	r9,68(sp)
    20e4:	da000815 	stw	r8,32(sp)
    20e8:	db000715 	stw	r12,28(sp)
    20ec:	000bc4c0 	call	bc4c <__eqdf2>
    20f0:	db000717 	ldw	r12,28(sp)
    20f4:	da000817 	ldw	r8,32(sp)
    20f8:	da401117 	ldw	r9,68(sp)
    20fc:	1000811e 	bne	r2,zero,2304 <___vfprintf_internal_r+0x1d44>
    2100:	4805883a 	mov	r2,r9
    2104:	d8c01417 	ldw	r3,80(sp)
    2108:	1445c83a 	sub	r2,r2,r17
    210c:	ad4011d8 	cmpnei	r21,r21,71
    2110:	d8c00715 	stw	r3,28(sp)
    2114:	d8800815 	stw	r2,32(sp)
    2118:	a83f3e26 	beq	r21,zero,1e14 <___vfprintf_internal_r+0x1854>
    211c:	d8800f17 	ldw	r2,60(sp)
    2120:	103f4126 	beq	r2,zero,1e28 <___vfprintf_internal_r+0x1868>
    2124:	d8c00717 	ldw	r3,28(sp)
    2128:	6080004c 	andi	r2,r12,1
    212c:	1204b03a 	or	r2,r2,r8
    2130:	00c1050e 	bge	zero,r3,2548 <___vfprintf_internal_r+0x1f88>
    2134:	1000f11e 	bne	r2,zero,24fc <___vfprintf_internal_r+0x1f3c>
    2138:	dd400717 	ldw	r21,28(sp)
    213c:	a829883a 	mov	r20,r21
    2140:	d8800607 	ldb	r2,24(sp)
    2144:	10007826 	beq	r2,zero,2328 <___vfprintf_internal_r+0x1d68>
    2148:	00800b44 	movi	r2,45
    214c:	d8801345 	stb	r2,77(sp)
    2150:	d8800e17 	ldw	r2,56(sp)
    2154:	0011883a 	mov	r8,zero
    2158:	d8800615 	stw	r2,24(sp)
    215c:	003b3506 	br	e34 <___vfprintf_internal_r+0x874>
    2160:	04400074 	movhi	r17,1
    2164:	8c402e04 	addi	r17,r17,184
    2168:	003aba06 	br	c54 <___vfprintf_internal_r+0x694>
    216c:	800f883a 	mov	r7,r16
    2170:	dc000e17 	ldw	r16,56(sp)
    2174:	10800044 	addi	r2,r2,1
    2178:	1d47883a 	add	r3,r3,r21
    217c:	d8801b15 	stw	r2,108(sp)
    2180:	b1c00015 	stw	r7,0(r22)
    2184:	b5400115 	stw	r21,4(r22)
    2188:	d8c01c15 	stw	r3,112(sp)
    218c:	10800208 	cmpgei	r2,r2,8
    2190:	10003a1e 	bne	r2,zero,227c <___vfprintf_internal_r+0x1cbc>
    2194:	b5800204 	addi	r22,r22,8
    2198:	003db206 	br	1864 <___vfprintf_internal_r+0x12a4>
    219c:	00800b44 	movi	r2,45
    21a0:	d8801345 	stb	r2,77(sp)
    21a4:	03400b44 	movi	r13,45
    21a8:	003aa606 	br	c44 <___vfprintf_internal_r+0x684>
    21ac:	d9801a04 	addi	r6,sp,104
    21b0:	900b883a 	mov	r5,r18
    21b4:	9809883a 	mov	r4,r19
    21b8:	0006ed80 	call	6ed8 <__sprint_r>
    21bc:	103a0d1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    21c0:	d9401417 	ldw	r5,80(sp)
    21c4:	d8c01c17 	ldw	r3,112(sp)
    21c8:	dd802704 	addi	r22,sp,156
    21cc:	003cd706 	br	152c <___vfprintf_internal_r+0xf6c>
    21d0:	1520003c 	xorhi	r20,r2,32768
    21d4:	00800b44 	movi	r2,45
    21d8:	d8800605 	stb	r2,24(sp)
    21dc:	003ee906 	br	1d84 <___vfprintf_internal_r+0x17c4>
    21e0:	05400184 	movi	r21,6
    21e4:	003e5e06 	br	1b60 <___vfprintf_internal_r+0x15a0>
    21e8:	d9801a04 	addi	r6,sp,104
    21ec:	900b883a 	mov	r5,r18
    21f0:	9809883a 	mov	r4,r19
    21f4:	0006ed80 	call	6ed8 <__sprint_r>
    21f8:	0039fe06 	br	9f4 <___vfprintf_internal_r+0x434>
    21fc:	d9401345 	stb	r5,77(sp)
    2200:	0039ac06 	br	8b4 <___vfprintf_internal_r+0x2f4>
    2204:	d9000917 	ldw	r4,36(sp)
    2208:	000d883a 	mov	r6,zero
    220c:	000f883a 	mov	r7,zero
    2210:	a00b883a 	mov	r5,r20
    2214:	d8c01115 	stw	r3,68(sp)
    2218:	da000815 	stw	r8,32(sp)
    221c:	db000715 	stw	r12,28(sp)
    2220:	000bc4c0 	call	bc4c <__eqdf2>
    2224:	db000717 	ldw	r12,28(sp)
    2228:	da000817 	ldw	r8,32(sp)
    222c:	d8c01117 	ldw	r3,68(sp)
    2230:	103fa526 	beq	r2,zero,20c8 <___vfprintf_internal_r+0x1b08>
    2234:	00800044 	movi	r2,1
    2238:	1205c83a 	sub	r2,r2,r8
    223c:	d8801415 	stw	r2,80(sp)
    2240:	003fa206 	br	20cc <___vfprintf_internal_r+0x1b0c>
    2244:	403ec91e 	bne	r8,zero,1d6c <___vfprintf_internal_r+0x17ac>
    2248:	02000044 	movi	r8,1
    224c:	003ec706 	br	1d6c <___vfprintf_internal_r+0x17ac>
    2250:	d9801a04 	addi	r6,sp,104
    2254:	900b883a 	mov	r5,r18
    2258:	9809883a 	mov	r4,r19
    225c:	0006ed80 	call	6ed8 <__sprint_r>
    2260:	1039e41e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    2264:	d9401417 	ldw	r5,80(sp)
    2268:	d8c01c17 	ldw	r3,112(sp)
    226c:	d8801b17 	ldw	r2,108(sp)
    2270:	dd802704 	addi	r22,sp,156
    2274:	283cbf0e 	bge	r5,zero,1574 <___vfprintf_internal_r+0xfb4>
    2278:	003f5f06 	br	1ff8 <___vfprintf_internal_r+0x1a38>
    227c:	d9801a04 	addi	r6,sp,104
    2280:	900b883a 	mov	r5,r18
    2284:	9809883a 	mov	r4,r19
    2288:	0006ed80 	call	6ed8 <__sprint_r>
    228c:	1039d91e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    2290:	d8c01c17 	ldw	r3,112(sp)
    2294:	dd802704 	addi	r22,sp,156
    2298:	003d7206 	br	1864 <___vfprintf_internal_r+0x12a4>
    229c:	db000417 	ldw	r12,16(sp)
    22a0:	003ad706 	br	e00 <___vfprintf_internal_r+0x840>
    22a4:	d8801804 	addi	r2,sp,96
    22a8:	d8800315 	stw	r2,12(sp)
    22ac:	d9400917 	ldw	r5,36(sp)
    22b0:	d8801504 	addi	r2,sp,84
    22b4:	40c00044 	addi	r3,r8,1
    22b8:	d8800215 	stw	r2,8(sp)
    22bc:	d8801404 	addi	r2,sp,80
    22c0:	d8c00015 	stw	r3,0(sp)
    22c4:	d8800115 	stw	r2,4(sp)
    22c8:	01c00084 	movi	r7,2
    22cc:	a00d883a 	mov	r6,r20
    22d0:	9809883a 	mov	r4,r19
    22d4:	db001115 	stw	r12,68(sp)
    22d8:	da000815 	stw	r8,32(sp)
    22dc:	d8c00715 	stw	r3,28(sp)
    22e0:	0002a040 	call	2a04 <_dtoa_r>
    22e4:	d8c00717 	ldw	r3,28(sp)
    22e8:	da000817 	ldw	r8,32(sp)
    22ec:	db001117 	ldw	r12,68(sp)
    22f0:	1023883a 	mov	r17,r2
    22f4:	e08011d8 	cmpnei	r2,fp,71
    22f8:	103ebd26 	beq	r2,zero,1df0 <___vfprintf_internal_r+0x1830>
    22fc:	88d3883a 	add	r9,r17,r3
    2300:	003f7306 	br	20d0 <___vfprintf_internal_r+0x1b10>
    2304:	d8801817 	ldw	r2,96(sp)
    2308:	127f7e2e 	bgeu	r2,r9,2104 <___vfprintf_internal_r+0x1b44>
    230c:	01000c04 	movi	r4,48
    2310:	10c00044 	addi	r3,r2,1
    2314:	d8c01815 	stw	r3,96(sp)
    2318:	11000005 	stb	r4,0(r2)
    231c:	d8801817 	ldw	r2,96(sp)
    2320:	127ffb36 	bltu	r2,r9,2310 <___vfprintf_internal_r+0x1d50>
    2324:	003f7706 	br	2104 <___vfprintf_internal_r+0x1b44>
    2328:	d8800e17 	ldw	r2,56(sp)
    232c:	db401343 	ldbu	r13,77(sp)
    2330:	0011883a 	mov	r8,zero
    2334:	d8800615 	stw	r2,24(sp)
    2338:	003aba06 	br	e24 <___vfprintf_internal_r+0x864>
    233c:	d8800717 	ldw	r2,28(sp)
    2340:	d8c00817 	ldw	r3,32(sp)
    2344:	10c02b16 	blt	r2,r3,23f4 <___vfprintf_internal_r+0x1e34>
    2348:	6300004c 	andi	r12,r12,1
    234c:	6000581e 	bne	r12,zero,24b0 <___vfprintf_internal_r+0x1ef0>
    2350:	1029883a 	mov	r20,r2
    2354:	1000010e 	bge	r2,zero,235c <___vfprintf_internal_r+0x1d9c>
    2358:	0029883a 	mov	r20,zero
    235c:	dd400717 	ldw	r21,28(sp)
    2360:	070019c4 	movi	fp,103
    2364:	003f7606 	br	2140 <___vfprintf_internal_r+0x1b80>
    2368:	d9801a04 	addi	r6,sp,104
    236c:	900b883a 	mov	r5,r18
    2370:	9809883a 	mov	r4,r19
    2374:	0006ed80 	call	6ed8 <__sprint_r>
    2378:	10399e1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    237c:	dd401417 	ldw	r21,80(sp)
    2380:	d8c01c17 	ldw	r3,112(sp)
    2384:	dd802704 	addi	r22,sp,156
    2388:	003d4506 	br	18a0 <___vfprintf_internal_r+0x12e0>
    238c:	d9801a04 	addi	r6,sp,104
    2390:	900b883a 	mov	r5,r18
    2394:	9809883a 	mov	r4,r19
    2398:	0006ed80 	call	6ed8 <__sprint_r>
    239c:	1039951e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    23a0:	d8c01c17 	ldw	r3,112(sp)
    23a4:	dd802704 	addi	r22,sp,156
    23a8:	a83d2b0e 	bge	r21,zero,1858 <___vfprintf_internal_r+0x1298>
    23ac:	003ddf06 	br	1b2c <___vfprintf_internal_r+0x156c>
    23b0:	02000184 	movi	r8,6
    23b4:	003e6d06 	br	1d6c <___vfprintf_internal_r+0x17ac>
    23b8:	d9801a04 	addi	r6,sp,104
    23bc:	900b883a 	mov	r5,r18
    23c0:	9809883a 	mov	r4,r19
    23c4:	0006ed80 	call	6ed8 <__sprint_r>
    23c8:	10398a1e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    23cc:	d8801417 	ldw	r2,80(sp)
    23d0:	d9000817 	ldw	r4,32(sp)
    23d4:	d8c01c17 	ldw	r3,112(sp)
    23d8:	dd802704 	addi	r22,sp,156
    23dc:	2085c83a 	sub	r2,r4,r2
    23e0:	003d4306 	br	18f0 <___vfprintf_internal_r+0x1330>
    23e4:	4029883a 	mov	r20,r8
    23e8:	d8c00615 	stw	r3,24(sp)
    23ec:	402b883a 	mov	r21,r8
    23f0:	00393606 	br	8cc <___vfprintf_internal_r+0x30c>
    23f4:	d8800817 	ldw	r2,32(sp)
    23f8:	d8c00b17 	ldw	r3,44(sp)
    23fc:	10eb883a 	add	r21,r2,r3
    2400:	d8800717 	ldw	r2,28(sp)
    2404:	00800316 	blt	zero,r2,2414 <___vfprintf_internal_r+0x1e54>
    2408:	d8800717 	ldw	r2,28(sp)
    240c:	a8abc83a 	sub	r21,r21,r2
    2410:	ad400044 	addi	r21,r21,1
    2414:	a829883a 	mov	r20,r21
    2418:	a8002a16 	blt	r21,zero,24c4 <___vfprintf_internal_r+0x1f04>
    241c:	070019c4 	movi	fp,103
    2420:	003f4706 	br	2140 <___vfprintf_internal_r+0x1b80>
    2424:	d9401345 	stb	r5,77(sp)
    2428:	003aa006 	br	eac <___vfprintf_internal_r+0x8ec>
    242c:	d9401345 	stb	r5,77(sp)
    2430:	003b3406 	br	1104 <___vfprintf_internal_r+0xb44>
    2434:	d9401345 	stb	r5,77(sp)
    2438:	0039d706 	br	b98 <___vfprintf_internal_r+0x5d8>
    243c:	d9401345 	stb	r5,77(sp)
    2440:	003a5a06 	br	dac <___vfprintf_internal_r+0x7ec>
    2444:	d9401345 	stb	r5,77(sp)
    2448:	003af306 	br	1018 <___vfprintf_internal_r+0xa58>
    244c:	d9401345 	stb	r5,77(sp)
    2450:	003b4c06 	br	1184 <___vfprintf_internal_r+0xbc4>
    2454:	900f883a 	mov	r7,r18
    2458:	8025883a 	mov	r18,r16
    245c:	dc000717 	ldw	r16,28(sp)
    2460:	10800044 	addi	r2,r2,1
    2464:	1f07883a 	add	r3,r3,fp
    2468:	b1c00015 	stw	r7,0(r22)
    246c:	b7000115 	stw	fp,4(r22)
    2470:	d8c01c15 	stw	r3,112(sp)
    2474:	d8801b15 	stw	r2,108(sp)
    2478:	11000208 	cmpgei	r4,r2,8
    247c:	203c3c26 	beq	r4,zero,1570 <___vfprintf_internal_r+0xfb0>
    2480:	d9801a04 	addi	r6,sp,104
    2484:	900b883a 	mov	r5,r18
    2488:	9809883a 	mov	r4,r19
    248c:	0006ed80 	call	6ed8 <__sprint_r>
    2490:	1039581e 	bne	r2,zero,9f4 <___vfprintf_internal_r+0x434>
    2494:	d8c01c17 	ldw	r3,112(sp)
    2498:	d8801b17 	ldw	r2,108(sp)
    249c:	dd802704 	addi	r22,sp,156
    24a0:	003c3406 	br	1574 <___vfprintf_internal_r+0xfb4>
    24a4:	00bfffc4 	movi	r2,-1
    24a8:	d8800515 	stw	r2,20(sp)
    24ac:	00395406 	br	a00 <___vfprintf_internal_r+0x440>
    24b0:	d8800717 	ldw	r2,28(sp)
    24b4:	d8c00b17 	ldw	r3,44(sp)
    24b8:	10eb883a 	add	r21,r2,r3
    24bc:	a829883a 	mov	r20,r21
    24c0:	a83fd60e 	bge	r21,zero,241c <___vfprintf_internal_r+0x1e5c>
    24c4:	0029883a 	mov	r20,zero
    24c8:	003fd406 	br	241c <___vfprintf_internal_r+0x1e5c>
    24cc:	00800c04 	movi	r2,48
    24d0:	ad400c04 	addi	r21,r21,48
    24d4:	d88016c5 	stb	r2,91(sp)
    24d8:	00800104 	movi	r2,4
    24dc:	dd401705 	stb	r21,92(sp)
    24e0:	d8801015 	stw	r2,64(sp)
    24e4:	003e8606 	br	1f00 <___vfprintf_internal_r+0x1940>
    24e8:	05400044 	movi	r21,1
    24ec:	a8abc83a 	sub	r21,r21,r2
    24f0:	00800b44 	movi	r2,45
    24f4:	d8801685 	stb	r2,90(sp)
    24f8:	003e5206 	br	1e44 <___vfprintf_internal_r+0x1884>
    24fc:	d8800b17 	ldw	r2,44(sp)
    2500:	18ab883a 	add	r21,r3,r2
    2504:	aa2b883a 	add	r21,r21,r8
    2508:	a829883a 	mov	r20,r21
    250c:	a83f0c0e 	bge	r21,zero,2140 <___vfprintf_internal_r+0x1b80>
    2510:	0029883a 	mov	r20,zero
    2514:	003f0a06 	br	2140 <___vfprintf_internal_r+0x1b80>
    2518:	6080004c 	andi	r2,r12,1
    251c:	d8800715 	stw	r2,28(sp)
    2520:	103e7c1e 	bne	r2,zero,1f14 <___vfprintf_internal_r+0x1954>
    2524:	003ff806 	br	2508 <___vfprintf_internal_r+0x1f48>
    2528:	d8800a17 	ldw	r2,40(sp)
    252c:	10001316 	blt	r2,zero,257c <___vfprintf_internal_r+0x1fbc>
    2530:	db401343 	ldbu	r13,77(sp)
    2534:	e0801210 	cmplti	r2,fp,72
    2538:	10000d1e 	bne	r2,zero,2570 <___vfprintf_internal_r+0x1fb0>
    253c:	04400074 	movhi	r17,1
    2540:	8c403104 	addi	r17,r17,196
    2544:	0039c306 	br	c54 <___vfprintf_internal_r+0x694>
    2548:	1000031e 	bne	r2,zero,2558 <___vfprintf_internal_r+0x1f98>
    254c:	05000044 	movi	r20,1
    2550:	05400044 	movi	r21,1
    2554:	003efa06 	br	2140 <___vfprintf_internal_r+0x1b80>
    2558:	d8800b17 	ldw	r2,44(sp)
    255c:	15400044 	addi	r21,r2,1
    2560:	aa2b883a 	add	r21,r21,r8
    2564:	003fe806 	br	2508 <___vfprintf_internal_r+0x1f48>
    2568:	8025883a 	mov	r18,r16
    256c:	00392106 	br	9f4 <___vfprintf_internal_r+0x434>
    2570:	04400074 	movhi	r17,1
    2574:	8c403004 	addi	r17,r17,192
    2578:	0039b606 	br	c54 <___vfprintf_internal_r+0x694>
    257c:	00800b44 	movi	r2,45
    2580:	d8801345 	stb	r2,77(sp)
    2584:	03400b44 	movi	r13,45
    2588:	003fea06 	br	2534 <___vfprintf_internal_r+0x1f74>
    258c:	d8800617 	ldw	r2,24(sp)
    2590:	12000017 	ldw	r8,0(r2)
    2594:	10800104 	addi	r2,r2,4
    2598:	4000010e 	bge	r8,zero,25a0 <___vfprintf_internal_r+0x1fe0>
    259c:	023fffc4 	movi	r8,-1
    25a0:	bf000043 	ldbu	fp,1(r23)
    25a4:	d8800615 	stw	r2,24(sp)
    25a8:	182f883a 	mov	r23,r3
    25ac:	e2c03fcc 	andi	r11,fp,255
    25b0:	5ac0201c 	xori	r11,r11,128
    25b4:	5affe004 	addi	r11,r11,-128
    25b8:	00384d06 	br	6f0 <___vfprintf_internal_r+0x130>
    25bc:	00800084 	movi	r2,2
    25c0:	d8801015 	stw	r2,64(sp)
    25c4:	003e4e06 	br	1f00 <___vfprintf_internal_r+0x1940>

000025c8 <__vfprintf_internal>:
    25c8:	00c00074 	movhi	r3,1
    25cc:	2005883a 	mov	r2,r4
    25d0:	1908ed17 	ldw	r4,9140(r3)
    25d4:	300f883a 	mov	r7,r6
    25d8:	280d883a 	mov	r6,r5
    25dc:	100b883a 	mov	r5,r2
    25e0:	00005c01 	jmpi	5c0 <___vfprintf_internal_r>

000025e4 <__sbprintf>:
    25e4:	2880030b 	ldhu	r2,12(r5)
    25e8:	2b001917 	ldw	r12,100(r5)
    25ec:	2ac0038b 	ldhu	r11,14(r5)
    25f0:	2a800717 	ldw	r10,28(r5)
    25f4:	2a400917 	ldw	r9,36(r5)
    25f8:	defee204 	addi	sp,sp,-1144
    25fc:	da001a04 	addi	r8,sp,104
    2600:	00c10004 	movi	r3,1024
    2604:	dc011a15 	stw	r16,1128(sp)
    2608:	10bfff4c 	andi	r2,r2,65533
    260c:	2821883a 	mov	r16,r5
    2610:	d80b883a 	mov	r5,sp
    2614:	dc811c15 	stw	r18,1136(sp)
    2618:	dc411b15 	stw	r17,1132(sp)
    261c:	dfc11d15 	stw	ra,1140(sp)
    2620:	2025883a 	mov	r18,r4
    2624:	d880030d 	sth	r2,12(sp)
    2628:	db001915 	stw	r12,100(sp)
    262c:	dac0038d 	sth	r11,14(sp)
    2630:	da800715 	stw	r10,28(sp)
    2634:	da400915 	stw	r9,36(sp)
    2638:	da000015 	stw	r8,0(sp)
    263c:	da000415 	stw	r8,16(sp)
    2640:	d8c00215 	stw	r3,8(sp)
    2644:	d8c00515 	stw	r3,20(sp)
    2648:	d8000615 	stw	zero,24(sp)
    264c:	00005c00 	call	5c0 <___vfprintf_internal_r>
    2650:	1023883a 	mov	r17,r2
    2654:	10000d0e 	bge	r2,zero,268c <__sbprintf+0xa8>
    2658:	d880030b 	ldhu	r2,12(sp)
    265c:	1080100c 	andi	r2,r2,64
    2660:	10000326 	beq	r2,zero,2670 <__sbprintf+0x8c>
    2664:	8080030b 	ldhu	r2,12(r16)
    2668:	10801014 	ori	r2,r2,64
    266c:	8080030d 	sth	r2,12(r16)
    2670:	8805883a 	mov	r2,r17
    2674:	dfc11d17 	ldw	ra,1140(sp)
    2678:	dc811c17 	ldw	r18,1136(sp)
    267c:	dc411b17 	ldw	r17,1132(sp)
    2680:	dc011a17 	ldw	r16,1128(sp)
    2684:	dec11e04 	addi	sp,sp,1144
    2688:	f800283a 	ret
    268c:	d80b883a 	mov	r5,sp
    2690:	9009883a 	mov	r4,r18
    2694:	00043740 	call	4374 <_fflush_r>
    2698:	103fef26 	beq	r2,zero,2658 <__sbprintf+0x74>
    269c:	047fffc4 	movi	r17,-1
    26a0:	003fed06 	br	2658 <__sbprintf+0x74>

000026a4 <__swsetup_r>:
    26a4:	00800074 	movhi	r2,1
    26a8:	1088ed17 	ldw	r2,9140(r2)
    26ac:	defffd04 	addi	sp,sp,-12
    26b0:	dc400115 	stw	r17,4(sp)
    26b4:	dc000015 	stw	r16,0(sp)
    26b8:	dfc00215 	stw	ra,8(sp)
    26bc:	2023883a 	mov	r17,r4
    26c0:	2821883a 	mov	r16,r5
    26c4:	10000226 	beq	r2,zero,26d0 <__swsetup_r+0x2c>
    26c8:	10c00e17 	ldw	r3,56(r2)
    26cc:	18001f26 	beq	r3,zero,274c <__swsetup_r+0xa8>
    26d0:	8180030b 	ldhu	r6,12(r16)
    26d4:	30c0020c 	andi	r3,r6,8
    26d8:	3005883a 	mov	r2,r6
    26dc:	18002126 	beq	r3,zero,2764 <__swsetup_r+0xc0>
    26e0:	80c00417 	ldw	r3,16(r16)
    26e4:	18002826 	beq	r3,zero,2788 <__swsetup_r+0xe4>
    26e8:	1100004c 	andi	r4,r2,1
    26ec:	20000b1e 	bne	r4,zero,271c <__swsetup_r+0x78>
    26f0:	1100008c 	andi	r4,r2,2
    26f4:	20002e1e 	bne	r4,zero,27b0 <__swsetup_r+0x10c>
    26f8:	81000517 	ldw	r4,20(r16)
    26fc:	81000215 	stw	r4,8(r16)
    2700:	18000b26 	beq	r3,zero,2730 <__swsetup_r+0x8c>
    2704:	0005883a 	mov	r2,zero
    2708:	dfc00217 	ldw	ra,8(sp)
    270c:	dc400117 	ldw	r17,4(sp)
    2710:	dc000017 	ldw	r16,0(sp)
    2714:	dec00304 	addi	sp,sp,12
    2718:	f800283a 	ret
    271c:	81000517 	ldw	r4,20(r16)
    2720:	80000215 	stw	zero,8(r16)
    2724:	0109c83a 	sub	r4,zero,r4
    2728:	81000615 	stw	r4,24(r16)
    272c:	183ff51e 	bne	r3,zero,2704 <__swsetup_r+0x60>
    2730:	10c0200c 	andi	r3,r2,128
    2734:	0005883a 	mov	r2,zero
    2738:	183ff326 	beq	r3,zero,2708 <__swsetup_r+0x64>
    273c:	31801014 	ori	r6,r6,64
    2740:	8180030d 	sth	r6,12(r16)
    2744:	00bfffc4 	movi	r2,-1
    2748:	003fef06 	br	2708 <__swsetup_r+0x64>
    274c:	1009883a 	mov	r4,r2
    2750:	00047ac0 	call	47ac <__sinit>
    2754:	8180030b 	ldhu	r6,12(r16)
    2758:	30c0020c 	andi	r3,r6,8
    275c:	3005883a 	mov	r2,r6
    2760:	183fdf1e 	bne	r3,zero,26e0 <__swsetup_r+0x3c>
    2764:	3080040c 	andi	r2,r6,16
    2768:	10002126 	beq	r2,zero,27f0 <__swsetup_r+0x14c>
    276c:	3080010c 	andi	r2,r6,4
    2770:	1000111e 	bne	r2,zero,27b8 <__swsetup_r+0x114>
    2774:	80c00417 	ldw	r3,16(r16)
    2778:	30800214 	ori	r2,r6,8
    277c:	8080030d 	sth	r2,12(r16)
    2780:	100d883a 	mov	r6,r2
    2784:	183fd81e 	bne	r3,zero,26e8 <__swsetup_r+0x44>
    2788:	1100a00c 	andi	r4,r2,640
    278c:	21008020 	cmpeqi	r4,r4,512
    2790:	203fd51e 	bne	r4,zero,26e8 <__swsetup_r+0x44>
    2794:	800b883a 	mov	r5,r16
    2798:	8809883a 	mov	r4,r17
    279c:	0004d6c0 	call	4d6c <__smakebuf_r>
    27a0:	8180030b 	ldhu	r6,12(r16)
    27a4:	80c00417 	ldw	r3,16(r16)
    27a8:	3005883a 	mov	r2,r6
    27ac:	003fce06 	br	26e8 <__swsetup_r+0x44>
    27b0:	0009883a 	mov	r4,zero
    27b4:	003fd106 	br	26fc <__swsetup_r+0x58>
    27b8:	81400c17 	ldw	r5,48(r16)
    27bc:	28000626 	beq	r5,zero,27d8 <__swsetup_r+0x134>
    27c0:	80801004 	addi	r2,r16,64
    27c4:	28800326 	beq	r5,r2,27d4 <__swsetup_r+0x130>
    27c8:	8809883a 	mov	r4,r17
    27cc:	00049100 	call	4910 <_free_r>
    27d0:	8180030b 	ldhu	r6,12(r16)
    27d4:	80000c15 	stw	zero,48(r16)
    27d8:	80c00417 	ldw	r3,16(r16)
    27dc:	00bff6c4 	movi	r2,-37
    27e0:	118c703a 	and	r6,r2,r6
    27e4:	80000115 	stw	zero,4(r16)
    27e8:	80c00015 	stw	r3,0(r16)
    27ec:	003fe206 	br	2778 <__swsetup_r+0xd4>
    27f0:	00800244 	movi	r2,9
    27f4:	88800015 	stw	r2,0(r17)
    27f8:	31801014 	ori	r6,r6,64
    27fc:	8180030d 	sth	r6,12(r16)
    2800:	00bfffc4 	movi	r2,-1
    2804:	003fc006 	br	2708 <__swsetup_r+0x64>

00002808 <quorem>:
    2808:	defff504 	addi	sp,sp,-44
    280c:	dc800315 	stw	r18,12(sp)
    2810:	20800417 	ldw	r2,16(r4)
    2814:	2c800417 	ldw	r18,16(r5)
    2818:	dfc00a15 	stw	ra,40(sp)
    281c:	df000915 	stw	fp,36(sp)
    2820:	ddc00815 	stw	r23,32(sp)
    2824:	dd800715 	stw	r22,28(sp)
    2828:	dd400615 	stw	r21,24(sp)
    282c:	dd000515 	stw	r20,20(sp)
    2830:	dcc00415 	stw	r19,16(sp)
    2834:	dc400215 	stw	r17,8(sp)
    2838:	dc000115 	stw	r16,4(sp)
    283c:	14806f16 	blt	r2,r18,29fc <quorem+0x1f4>
    2840:	94bfffc4 	addi	r18,r18,-1
    2844:	902c90ba 	slli	r22,r18,2
    2848:	2c000504 	addi	r16,r5,20
    284c:	25000504 	addi	r20,r4,20
    2850:	85a7883a 	add	r19,r16,r22
    2854:	9f000017 	ldw	fp,0(r19)
    2858:	a5ad883a 	add	r22,r20,r22
    285c:	202b883a 	mov	r21,r4
    2860:	b1000017 	ldw	r4,0(r22)
    2864:	e7000044 	addi	fp,fp,1
    2868:	282f883a 	mov	r23,r5
    286c:	e00b883a 	mov	r5,fp
    2870:	d9000015 	stw	r4,0(sp)
    2874:	000aa4c0 	call	aa4c <__udivsi3>
    2878:	d9000017 	ldw	r4,0(sp)
    287c:	1023883a 	mov	r17,r2
    2880:	27002a36 	bltu	r4,fp,292c <quorem+0x124>
    2884:	800b883a 	mov	r5,r16
    2888:	a009883a 	mov	r4,r20
    288c:	0013883a 	mov	r9,zero
    2890:	0007883a 	mov	r3,zero
    2894:	2a000017 	ldw	r8,0(r5)
    2898:	21800017 	ldw	r6,0(r4)
    289c:	21000104 	addi	r4,r4,4
    28a0:	40bfffcc 	andi	r2,r8,65535
    28a4:	1445383a 	mul	r2,r2,r17
    28a8:	400ed43a 	srli	r7,r8,16
    28ac:	32bfffcc 	andi	r10,r6,65535
    28b0:	1245883a 	add	r2,r2,r9
    28b4:	1012d43a 	srli	r9,r2,16
    28b8:	123fffcc 	andi	r8,r2,65535
    28bc:	3c4f383a 	mul	r7,r7,r17
    28c0:	1a07c83a 	sub	r3,r3,r8
    28c4:	1a91883a 	add	r8,r3,r10
    28c8:	3006d43a 	srli	r3,r6,16
    28cc:	4005d43a 	srai	r2,r8,16
    28d0:	3a4f883a 	add	r7,r7,r9
    28d4:	39bfffcc 	andi	r6,r7,65535
    28d8:	1987c83a 	sub	r3,r3,r6
    28dc:	1887883a 	add	r3,r3,r2
    28e0:	1804943a 	slli	r2,r3,16
    28e4:	423fffcc 	andi	r8,r8,65535
    28e8:	29400104 	addi	r5,r5,4
    28ec:	1210b03a 	or	r8,r2,r8
    28f0:	223fff15 	stw	r8,-4(r4)
    28f4:	3812d43a 	srli	r9,r7,16
    28f8:	1807d43a 	srai	r3,r3,16
    28fc:	997fe52e 	bgeu	r19,r5,2894 <quorem+0x8c>
    2900:	b0800017 	ldw	r2,0(r22)
    2904:	1000091e 	bne	r2,zero,292c <quorem+0x124>
    2908:	b5bfff04 	addi	r22,r22,-4
    290c:	a5800336 	bltu	r20,r22,291c <quorem+0x114>
    2910:	00000506 	br	2928 <quorem+0x120>
    2914:	94bfffc4 	addi	r18,r18,-1
    2918:	a580032e 	bgeu	r20,r22,2928 <quorem+0x120>
    291c:	b0800017 	ldw	r2,0(r22)
    2920:	b5bfff04 	addi	r22,r22,-4
    2924:	103ffb26 	beq	r2,zero,2914 <quorem+0x10c>
    2928:	ac800415 	stw	r18,16(r21)
    292c:	b80b883a 	mov	r5,r23
    2930:	a809883a 	mov	r4,r21
    2934:	00064740 	call	6474 <__mcmp>
    2938:	10002316 	blt	r2,zero,29c8 <quorem+0x1c0>
    293c:	8c400044 	addi	r17,r17,1
    2940:	a00d883a 	mov	r6,r20
    2944:	0007883a 	mov	r3,zero
    2948:	81000017 	ldw	r4,0(r16)
    294c:	31400017 	ldw	r5,0(r6)
    2950:	31800104 	addi	r6,r6,4
    2954:	20bfffcc 	andi	r2,r4,65535
    2958:	1887c83a 	sub	r3,r3,r2
    295c:	28bfffcc 	andi	r2,r5,65535
    2960:	1885883a 	add	r2,r3,r2
    2964:	2008d43a 	srli	r4,r4,16
    2968:	2806d43a 	srli	r3,r5,16
    296c:	100fd43a 	srai	r7,r2,16
    2970:	117fffcc 	andi	r5,r2,65535
    2974:	1907c83a 	sub	r3,r3,r4
    2978:	19c7883a 	add	r3,r3,r7
    297c:	1804943a 	slli	r2,r3,16
    2980:	84000104 	addi	r16,r16,4
    2984:	1807d43a 	srai	r3,r3,16
    2988:	1144b03a 	or	r2,r2,r5
    298c:	30bfff15 	stw	r2,-4(r6)
    2990:	9c3fed2e 	bgeu	r19,r16,2948 <quorem+0x140>
    2994:	900490ba 	slli	r2,r18,2
    2998:	a085883a 	add	r2,r20,r2
    299c:	10c00017 	ldw	r3,0(r2)
    29a0:	1800091e 	bne	r3,zero,29c8 <quorem+0x1c0>
    29a4:	10bfff04 	addi	r2,r2,-4
    29a8:	a0800336 	bltu	r20,r2,29b8 <quorem+0x1b0>
    29ac:	00000506 	br	29c4 <quorem+0x1bc>
    29b0:	94bfffc4 	addi	r18,r18,-1
    29b4:	a080032e 	bgeu	r20,r2,29c4 <quorem+0x1bc>
    29b8:	10c00017 	ldw	r3,0(r2)
    29bc:	10bfff04 	addi	r2,r2,-4
    29c0:	183ffb26 	beq	r3,zero,29b0 <quorem+0x1a8>
    29c4:	ac800415 	stw	r18,16(r21)
    29c8:	8805883a 	mov	r2,r17
    29cc:	dfc00a17 	ldw	ra,40(sp)
    29d0:	df000917 	ldw	fp,36(sp)
    29d4:	ddc00817 	ldw	r23,32(sp)
    29d8:	dd800717 	ldw	r22,28(sp)
    29dc:	dd400617 	ldw	r21,24(sp)
    29e0:	dd000517 	ldw	r20,20(sp)
    29e4:	dcc00417 	ldw	r19,16(sp)
    29e8:	dc800317 	ldw	r18,12(sp)
    29ec:	dc400217 	ldw	r17,8(sp)
    29f0:	dc000117 	ldw	r16,4(sp)
    29f4:	dec00b04 	addi	sp,sp,44
    29f8:	f800283a 	ret
    29fc:	0005883a 	mov	r2,zero
    2a00:	003ff206 	br	29cc <quorem+0x1c4>

00002a04 <_dtoa_r>:
    2a04:	20801017 	ldw	r2,64(r4)
    2a08:	deffe304 	addi	sp,sp,-116
    2a0c:	df001b15 	stw	fp,108(sp)
    2a10:	dcc01615 	stw	r19,88(sp)
    2a14:	dc801515 	stw	r18,84(sp)
    2a18:	dc401415 	stw	r17,80(sp)
    2a1c:	dc001315 	stw	r16,76(sp)
    2a20:	dfc01c15 	stw	ra,112(sp)
    2a24:	ddc01a15 	stw	r23,104(sp)
    2a28:	dd801915 	stw	r22,100(sp)
    2a2c:	dd401815 	stw	r21,96(sp)
    2a30:	dd001715 	stw	r20,92(sp)
    2a34:	d9c00215 	stw	r7,8(sp)
    2a38:	dc001f17 	ldw	r16,124(sp)
    2a3c:	2039883a 	mov	fp,r4
    2a40:	3025883a 	mov	r18,r6
    2a44:	2827883a 	mov	r19,r5
    2a48:	3023883a 	mov	r17,r6
    2a4c:	10000826 	beq	r2,zero,2a70 <_dtoa_r+0x6c>
    2a50:	21801117 	ldw	r6,68(r4)
    2a54:	00c00044 	movi	r3,1
    2a58:	100b883a 	mov	r5,r2
    2a5c:	1986983a 	sll	r3,r3,r6
    2a60:	11800115 	stw	r6,4(r2)
    2a64:	10c00215 	stw	r3,8(r2)
    2a68:	0005af80 	call	5af8 <_Bfree>
    2a6c:	e0001015 	stw	zero,64(fp)
    2a70:	90018916 	blt	r18,zero,3098 <_dtoa_r+0x694>
    2a74:	80000015 	stw	zero,0(r16)
    2a78:	909ffc2c 	andhi	r2,r18,32752
    2a7c:	00dffc34 	movhi	r3,32752
    2a80:	10c18e26 	beq	r2,r3,30bc <_dtoa_r+0x6b8>
    2a84:	000d883a 	mov	r6,zero
    2a88:	000f883a 	mov	r7,zero
    2a8c:	9809883a 	mov	r4,r19
    2a90:	880b883a 	mov	r5,r17
    2a94:	000bc4c0 	call	bc4c <__eqdf2>
    2a98:	1000191e 	bne	r2,zero,2b00 <_dtoa_r+0xfc>
    2a9c:	d8c01e17 	ldw	r3,120(sp)
    2aa0:	00800044 	movi	r2,1
    2aa4:	18800015 	stw	r2,0(r3)
    2aa8:	d8802017 	ldw	r2,128(sp)
    2aac:	1002ff26 	beq	r2,zero,36ac <_dtoa_r+0xca8>
    2ab0:	d9002017 	ldw	r4,128(sp)
    2ab4:	00800074 	movhi	r2,1
    2ab8:	10803e44 	addi	r2,r2,249
    2abc:	00c00074 	movhi	r3,1
    2ac0:	20800015 	stw	r2,0(r4)
    2ac4:	18803e04 	addi	r2,r3,248
    2ac8:	d8800115 	stw	r2,4(sp)
    2acc:	d8800117 	ldw	r2,4(sp)
    2ad0:	dfc01c17 	ldw	ra,112(sp)
    2ad4:	df001b17 	ldw	fp,108(sp)
    2ad8:	ddc01a17 	ldw	r23,104(sp)
    2adc:	dd801917 	ldw	r22,100(sp)
    2ae0:	dd401817 	ldw	r21,96(sp)
    2ae4:	dd001717 	ldw	r20,92(sp)
    2ae8:	dcc01617 	ldw	r19,88(sp)
    2aec:	dc801517 	ldw	r18,84(sp)
    2af0:	dc401417 	ldw	r17,80(sp)
    2af4:	dc001317 	ldw	r16,76(sp)
    2af8:	dec01d04 	addi	sp,sp,116
    2afc:	f800283a 	ret
    2b00:	d8801104 	addi	r2,sp,68
    2b04:	9020d53a 	srli	r16,r18,20
    2b08:	d8800015 	stw	r2,0(sp)
    2b0c:	d9c01204 	addi	r7,sp,72
    2b10:	980b883a 	mov	r5,r19
    2b14:	880d883a 	mov	r6,r17
    2b18:	e009883a 	mov	r4,fp
    2b1c:	000685c0 	call	685c <__d2b>
    2b20:	102f883a 	mov	r23,r2
    2b24:	8001781e 	bne	r16,zero,3108 <_dtoa_r+0x704>
    2b28:	dd001117 	ldw	r20,68(sp)
    2b2c:	dc001217 	ldw	r16,72(sp)
    2b30:	a421883a 	add	r16,r20,r16
    2b34:	80810c84 	addi	r2,r16,1074
    2b38:	10c00850 	cmplti	r3,r2,33
    2b3c:	1802eb1e 	bne	r3,zero,36ec <_dtoa_r+0xce8>
    2b40:	01001004 	movi	r4,64
    2b44:	2085c83a 	sub	r2,r4,r2
    2b48:	81010484 	addi	r4,r16,1042
    2b4c:	90a4983a 	sll	r18,r18,r2
    2b50:	9908d83a 	srl	r4,r19,r4
    2b54:	9108b03a 	or	r4,r18,r4
    2b58:	000cfa80 	call	cfa8 <__floatunsidf>
    2b5c:	1009883a 	mov	r4,r2
    2b60:	017f8434 	movhi	r5,65040
    2b64:	00800044 	movi	r2,1
    2b68:	194b883a 	add	r5,r3,r5
    2b6c:	843fffc4 	addi	r16,r16,-1
    2b70:	d8800915 	stw	r2,36(sp)
    2b74:	000d883a 	mov	r6,zero
    2b78:	01cffe34 	movhi	r7,16376
    2b7c:	000c5100 	call	c510 <__subdf3>
    2b80:	0198dbf4 	movhi	r6,25455
    2b84:	01cff4f4 	movhi	r7,16339
    2b88:	3190d844 	addi	r6,r6,17249
    2b8c:	39e1e9c4 	addi	r7,r7,-30809
    2b90:	1009883a 	mov	r4,r2
    2b94:	180b883a 	mov	r5,r3
    2b98:	000be9c0 	call	be9c <__muldf3>
    2b9c:	01a2d874 	movhi	r6,35681
    2ba0:	01cff1f4 	movhi	r7,16327
    2ba4:	31b22cc4 	addi	r6,r6,-14157
    2ba8:	39e28a04 	addi	r7,r7,-30168
    2bac:	180b883a 	mov	r5,r3
    2bb0:	1009883a 	mov	r4,r2
    2bb4:	000ab0c0 	call	ab0c <__adddf3>
    2bb8:	8009883a 	mov	r4,r16
    2bbc:	102b883a 	mov	r21,r2
    2bc0:	1825883a 	mov	r18,r3
    2bc4:	000cef00 	call	cef0 <__floatsidf>
    2bc8:	019427f4 	movhi	r6,20639
    2bcc:	01cff4f4 	movhi	r7,16339
    2bd0:	319e7ec4 	addi	r6,r6,31227
    2bd4:	39d104c4 	addi	r7,r7,17427
    2bd8:	1009883a 	mov	r4,r2
    2bdc:	180b883a 	mov	r5,r3
    2be0:	000be9c0 	call	be9c <__muldf3>
    2be4:	100d883a 	mov	r6,r2
    2be8:	180f883a 	mov	r7,r3
    2bec:	a809883a 	mov	r4,r21
    2bf0:	900b883a 	mov	r5,r18
    2bf4:	000ab0c0 	call	ab0c <__adddf3>
    2bf8:	1009883a 	mov	r4,r2
    2bfc:	180b883a 	mov	r5,r3
    2c00:	1025883a 	mov	r18,r2
    2c04:	182d883a 	mov	r22,r3
    2c08:	000ce700 	call	ce70 <__fixdfsi>
    2c0c:	000d883a 	mov	r6,zero
    2c10:	000f883a 	mov	r7,zero
    2c14:	9009883a 	mov	r4,r18
    2c18:	b00b883a 	mov	r5,r22
    2c1c:	102b883a 	mov	r21,r2
    2c20:	000bdb40 	call	bdb4 <__ledf2>
    2c24:	10029716 	blt	r2,zero,3684 <_dtoa_r+0xc80>
    2c28:	a421c83a 	sub	r16,r20,r16
    2c2c:	a88005e8 	cmpgeui	r2,r21,23
    2c30:	85bfffc4 	addi	r22,r16,-1
    2c34:	10028b1e 	bne	r2,zero,3664 <_dtoa_r+0xc60>
    2c38:	a80690fa 	slli	r3,r21,3
    2c3c:	00800074 	movhi	r2,1
    2c40:	10808704 	addi	r2,r2,540
    2c44:	10c5883a 	add	r2,r2,r3
    2c48:	11800017 	ldw	r6,0(r2)
    2c4c:	11c00117 	ldw	r7,4(r2)
    2c50:	9809883a 	mov	r4,r19
    2c54:	880b883a 	mov	r5,r17
    2c58:	000bdb40 	call	bdb4 <__ledf2>
    2c5c:	10025f0e 	bge	r2,zero,35dc <_dtoa_r+0xbd8>
    2c60:	d8000815 	stw	zero,32(sp)
    2c64:	ad7fffc4 	addi	r21,r21,-1
    2c68:	b0028116 	blt	r22,zero,3670 <_dtoa_r+0xc6c>
    2c6c:	d8000415 	stw	zero,16(sp)
    2c70:	a8025d0e 	bge	r21,zero,35e8 <_dtoa_r+0xbe4>
    2c74:	d8800417 	ldw	r2,16(sp)
    2c78:	d8c00217 	ldw	r3,8(sp)
    2c7c:	dd400615 	stw	r21,24(sp)
    2c80:	1545c83a 	sub	r2,r2,r21
    2c84:	d8800415 	stw	r2,16(sp)
    2c88:	0545c83a 	sub	r2,zero,r21
    2c8c:	d8800715 	stw	r2,28(sp)
    2c90:	188002a8 	cmpgeui	r2,r3,10
    2c94:	002b883a 	mov	r21,zero
    2c98:	1002591e 	bne	r2,zero,3600 <_dtoa_r+0xbfc>
    2c9c:	18800190 	cmplti	r2,r3,6
    2ca0:	1002961e 	bne	r2,zero,36fc <_dtoa_r+0xcf8>
    2ca4:	18bfff04 	addi	r2,r3,-4
    2ca8:	d8800215 	stw	r2,8(sp)
    2cac:	0021883a 	mov	r16,zero
    2cb0:	d8c00217 	ldw	r3,8(sp)
    2cb4:	18800120 	cmpeqi	r2,r3,4
    2cb8:	10036d1e 	bne	r2,zero,3a70 <_dtoa_r+0x106c>
    2cbc:	18800160 	cmpeqi	r2,r3,5
    2cc0:	1003291e 	bne	r2,zero,3968 <_dtoa_r+0xf64>
    2cc4:	188000a0 	cmpeqi	r2,r3,2
    2cc8:	10025926 	beq	r2,zero,3630 <_dtoa_r+0xc2c>
    2ccc:	d8000515 	stw	zero,20(sp)
    2cd0:	d8801d17 	ldw	r2,116(sp)
    2cd4:	0083340e 	bge	zero,r2,39a8 <_dtoa_r+0xfa4>
    2cd8:	d8800b15 	stw	r2,44(sp)
    2cdc:	d8800315 	stw	r2,12(sp)
    2ce0:	100d883a 	mov	r6,r2
    2ce4:	e0001115 	stw	zero,68(fp)
    2ce8:	30800610 	cmplti	r2,r6,24
    2cec:	1004f61e 	bne	r2,zero,40c8 <_dtoa_r+0x16c4>
    2cf0:	00c00044 	movi	r3,1
    2cf4:	00800104 	movi	r2,4
    2cf8:	1085883a 	add	r2,r2,r2
    2cfc:	11000504 	addi	r4,r2,20
    2d00:	180b883a 	mov	r5,r3
    2d04:	18c00044 	addi	r3,r3,1
    2d08:	313ffb2e 	bgeu	r6,r4,2cf8 <_dtoa_r+0x2f4>
    2d0c:	e1401115 	stw	r5,68(fp)
    2d10:	e009883a 	mov	r4,fp
    2d14:	0005a540 	call	5a54 <_Balloc>
    2d18:	d8800115 	stw	r2,4(sp)
    2d1c:	1004e326 	beq	r2,zero,40ac <_dtoa_r+0x16a8>
    2d20:	d8800117 	ldw	r2,4(sp)
    2d24:	e0801015 	stw	r2,64(fp)
    2d28:	d8800317 	ldw	r2,12(sp)
    2d2c:	108003e8 	cmpgeui	r2,r2,15
    2d30:	1001091e 	bne	r2,zero,3158 <_dtoa_r+0x754>
    2d34:	80010826 	beq	r16,zero,3158 <_dtoa_r+0x754>
    2d38:	d9000617 	ldw	r4,24(sp)
    2d3c:	0103970e 	bge	zero,r4,3b9c <_dtoa_r+0x1198>
    2d40:	208003cc 	andi	r2,r4,15
    2d44:	100690fa 	slli	r3,r2,3
    2d48:	2029d13a 	srai	r20,r4,4
    2d4c:	00800074 	movhi	r2,1
    2d50:	10808704 	addi	r2,r2,540
    2d54:	10c5883a 	add	r2,r2,r3
    2d58:	a0c0040c 	andi	r3,r20,16
    2d5c:	12800017 	ldw	r10,0(r2)
    2d60:	12400117 	ldw	r9,4(r2)
    2d64:	18033c26 	beq	r3,zero,3a58 <_dtoa_r+0x1054>
    2d68:	00800074 	movhi	r2,1
    2d6c:	10807d04 	addi	r2,r2,500
    2d70:	11800817 	ldw	r6,32(r2)
    2d74:	11c00917 	ldw	r7,36(r2)
    2d78:	9809883a 	mov	r4,r19
    2d7c:	880b883a 	mov	r5,r17
    2d80:	da400e15 	stw	r9,56(sp)
    2d84:	da800d15 	stw	r10,52(sp)
    2d88:	000b3fc0 	call	b3fc <__divdf3>
    2d8c:	da800d17 	ldw	r10,52(sp)
    2d90:	da400e17 	ldw	r9,56(sp)
    2d94:	a50003cc 	andi	r20,r20,15
    2d98:	d8800a15 	stw	r2,40(sp)
    2d9c:	d8c00c15 	stw	r3,48(sp)
    2da0:	040000c4 	movi	r16,3
    2da4:	a0001126 	beq	r20,zero,2dec <_dtoa_r+0x3e8>
    2da8:	04800074 	movhi	r18,1
    2dac:	94807d04 	addi	r18,r18,500
    2db0:	5009883a 	mov	r4,r10
    2db4:	480b883a 	mov	r5,r9
    2db8:	a180004c 	andi	r6,r20,1
    2dbc:	30000626 	beq	r6,zero,2dd8 <_dtoa_r+0x3d4>
    2dc0:	91800017 	ldw	r6,0(r18)
    2dc4:	91c00117 	ldw	r7,4(r18)
    2dc8:	84000044 	addi	r16,r16,1
    2dcc:	000be9c0 	call	be9c <__muldf3>
    2dd0:	1009883a 	mov	r4,r2
    2dd4:	180b883a 	mov	r5,r3
    2dd8:	a029d07a 	srai	r20,r20,1
    2ddc:	94800204 	addi	r18,r18,8
    2de0:	a03ff51e 	bne	r20,zero,2db8 <_dtoa_r+0x3b4>
    2de4:	2015883a 	mov	r10,r4
    2de8:	2813883a 	mov	r9,r5
    2dec:	d9000a17 	ldw	r4,40(sp)
    2df0:	d9400c17 	ldw	r5,48(sp)
    2df4:	500d883a 	mov	r6,r10
    2df8:	480f883a 	mov	r7,r9
    2dfc:	000b3fc0 	call	b3fc <__divdf3>
    2e00:	d8800a15 	stw	r2,40(sp)
    2e04:	1825883a 	mov	r18,r3
    2e08:	d8800817 	ldw	r2,32(sp)
    2e0c:	10000726 	beq	r2,zero,2e2c <_dtoa_r+0x428>
    2e10:	dd000a17 	ldw	r20,40(sp)
    2e14:	000d883a 	mov	r6,zero
    2e18:	01cffc34 	movhi	r7,16368
    2e1c:	a009883a 	mov	r4,r20
    2e20:	900b883a 	mov	r5,r18
    2e24:	000bdb40 	call	bdb4 <__ledf2>
    2e28:	10044516 	blt	r2,zero,3f40 <_dtoa_r+0x153c>
    2e2c:	8009883a 	mov	r4,r16
    2e30:	000cef00 	call	cef0 <__floatsidf>
    2e34:	d9800a17 	ldw	r6,40(sp)
    2e38:	900f883a 	mov	r7,r18
    2e3c:	1009883a 	mov	r4,r2
    2e40:	180b883a 	mov	r5,r3
    2e44:	000be9c0 	call	be9c <__muldf3>
    2e48:	000d883a 	mov	r6,zero
    2e4c:	01d00734 	movhi	r7,16412
    2e50:	1009883a 	mov	r4,r2
    2e54:	180b883a 	mov	r5,r3
    2e58:	000ab0c0 	call	ab0c <__adddf3>
    2e5c:	1029883a 	mov	r20,r2
    2e60:	00bf3034 	movhi	r2,64704
    2e64:	1885883a 	add	r2,r3,r2
    2e68:	d8800c15 	stw	r2,48(sp)
    2e6c:	d8800317 	ldw	r2,12(sp)
    2e70:	10032d26 	beq	r2,zero,3b28 <_dtoa_r+0x1124>
    2e74:	d8800617 	ldw	r2,24(sp)
    2e78:	d8801015 	stw	r2,64(sp)
    2e7c:	d8800317 	ldw	r2,12(sp)
    2e80:	d8800d15 	stw	r2,52(sp)
    2e84:	d8800d17 	ldw	r2,52(sp)
    2e88:	dc000a17 	ldw	r16,40(sp)
    2e8c:	900b883a 	mov	r5,r18
    2e90:	10bfffc4 	addi	r2,r2,-1
    2e94:	100690fa 	slli	r3,r2,3
    2e98:	00800074 	movhi	r2,1
    2e9c:	10808704 	addi	r2,r2,540
    2ea0:	10c5883a 	add	r2,r2,r3
    2ea4:	12c00017 	ldw	r11,0(r2)
    2ea8:	13000117 	ldw	r12,4(r2)
    2eac:	8009883a 	mov	r4,r16
    2eb0:	dac00e15 	stw	r11,56(sp)
    2eb4:	db000a15 	stw	r12,40(sp)
    2eb8:	000ce700 	call	ce70 <__fixdfsi>
    2ebc:	1009883a 	mov	r4,r2
    2ec0:	10800c04 	addi	r2,r2,48
    2ec4:	d8800f15 	stw	r2,60(sp)
    2ec8:	000cef00 	call	cef0 <__floatsidf>
    2ecc:	8009883a 	mov	r4,r16
    2ed0:	100d883a 	mov	r6,r2
    2ed4:	180f883a 	mov	r7,r3
    2ed8:	900b883a 	mov	r5,r18
    2edc:	000c5100 	call	c510 <__subdf3>
    2ee0:	d9000117 	ldw	r4,4(sp)
    2ee4:	dac00e17 	ldw	r11,56(sp)
    2ee8:	db000a17 	ldw	r12,40(sp)
    2eec:	1825883a 	mov	r18,r3
    2ef0:	d8c00517 	ldw	r3,20(sp)
    2ef4:	22000044 	addi	r8,r4,1
    2ef8:	da000e15 	stw	r8,56(sp)
    2efc:	1021883a 	mov	r16,r2
    2f00:	580d883a 	mov	r6,r11
    2f04:	600f883a 	mov	r7,r12
    2f08:	1803b226 	beq	r3,zero,3dd4 <_dtoa_r+0x13d0>
    2f0c:	0009883a 	mov	r4,zero
    2f10:	014ff834 	movhi	r5,16352
    2f14:	000b3fc0 	call	b3fc <__divdf3>
    2f18:	d9c00c17 	ldw	r7,48(sp)
    2f1c:	a00d883a 	mov	r6,r20
    2f20:	1009883a 	mov	r4,r2
    2f24:	180b883a 	mov	r5,r3
    2f28:	000c5100 	call	c510 <__subdf3>
    2f2c:	d9000117 	ldw	r4,4(sp)
    2f30:	1029883a 	mov	r20,r2
    2f34:	d8800f17 	ldw	r2,60(sp)
    2f38:	800d883a 	mov	r6,r16
    2f3c:	900f883a 	mov	r7,r18
    2f40:	20800005 	stb	r2,0(r4)
    2f44:	180b883a 	mov	r5,r3
    2f48:	a009883a 	mov	r4,r20
    2f4c:	d8c00a15 	stw	r3,40(sp)
    2f50:	000bccc0 	call	bccc <__gedf2>
    2f54:	da000e17 	ldw	r8,56(sp)
    2f58:	0083e516 	blt	zero,r2,3ef0 <_dtoa_r+0x14ec>
    2f5c:	0005883a 	mov	r2,zero
    2f60:	dd400e15 	stw	r21,56(sp)
    2f64:	dd800f15 	stw	r22,60(sp)
    2f68:	ddc00c15 	stw	r23,48(sp)
    2f6c:	dd800d17 	ldw	r22,52(sp)
    2f70:	402b883a 	mov	r21,r8
    2f74:	dc400d15 	stw	r17,52(sp)
    2f78:	dc400a17 	ldw	r17,40(sp)
    2f7c:	dcc00a15 	stw	r19,40(sp)
    2f80:	1027883a 	mov	r19,r2
    2f84:	00002606 	br	3020 <_dtoa_r+0x61c>
    2f88:	9cc00044 	addi	r19,r19,1
    2f8c:	9d806d0e 	bge	r19,r22,3144 <_dtoa_r+0x740>
    2f90:	a009883a 	mov	r4,r20
    2f94:	880b883a 	mov	r5,r17
    2f98:	000d883a 	mov	r6,zero
    2f9c:	01d00934 	movhi	r7,16420
    2fa0:	000be9c0 	call	be9c <__muldf3>
    2fa4:	000d883a 	mov	r6,zero
    2fa8:	01d00934 	movhi	r7,16420
    2fac:	8009883a 	mov	r4,r16
    2fb0:	900b883a 	mov	r5,r18
    2fb4:	1029883a 	mov	r20,r2
    2fb8:	1823883a 	mov	r17,r3
    2fbc:	000be9c0 	call	be9c <__muldf3>
    2fc0:	180b883a 	mov	r5,r3
    2fc4:	1009883a 	mov	r4,r2
    2fc8:	1821883a 	mov	r16,r3
    2fcc:	1025883a 	mov	r18,r2
    2fd0:	000ce700 	call	ce70 <__fixdfsi>
    2fd4:	1009883a 	mov	r4,r2
    2fd8:	102f883a 	mov	r23,r2
    2fdc:	000cef00 	call	cef0 <__floatsidf>
    2fe0:	9009883a 	mov	r4,r18
    2fe4:	800b883a 	mov	r5,r16
    2fe8:	100d883a 	mov	r6,r2
    2fec:	180f883a 	mov	r7,r3
    2ff0:	000c5100 	call	c510 <__subdf3>
    2ff4:	ad400044 	addi	r21,r21,1
    2ff8:	ba000c04 	addi	r8,r23,48
    2ffc:	aa3fffc5 	stb	r8,-1(r21)
    3000:	a00d883a 	mov	r6,r20
    3004:	880f883a 	mov	r7,r17
    3008:	1009883a 	mov	r4,r2
    300c:	180b883a 	mov	r5,r3
    3010:	1021883a 	mov	r16,r2
    3014:	1825883a 	mov	r18,r3
    3018:	000bdb40 	call	bdb4 <__ledf2>
    301c:	10040516 	blt	r2,zero,4034 <_dtoa_r+0x1630>
    3020:	800d883a 	mov	r6,r16
    3024:	900f883a 	mov	r7,r18
    3028:	0009883a 	mov	r4,zero
    302c:	014ffc34 	movhi	r5,16368
    3030:	000c5100 	call	c510 <__subdf3>
    3034:	a00d883a 	mov	r6,r20
    3038:	880f883a 	mov	r7,r17
    303c:	1009883a 	mov	r4,r2
    3040:	180b883a 	mov	r5,r3
    3044:	000bdb40 	call	bdb4 <__ledf2>
    3048:	103fcf0e 	bge	r2,zero,2f88 <_dtoa_r+0x584>
    304c:	d8801017 	ldw	r2,64(sp)
    3050:	ddc00c17 	ldw	r23,48(sp)
    3054:	d9000117 	ldw	r4,4(sp)
    3058:	a829883a 	mov	r20,r21
    305c:	14c00044 	addi	r19,r2,1
    3060:	00000106 	br	3068 <_dtoa_r+0x664>
    3064:	a103d826 	beq	r20,r4,3fc8 <_dtoa_r+0x15c4>
    3068:	a0ffffc3 	ldbu	r3,-1(r20)
    306c:	a011883a 	mov	r8,r20
    3070:	a53fffc4 	addi	r20,r20,-1
    3074:	18803fcc 	andi	r2,r3,255
    3078:	1080201c 	xori	r2,r2,128
    307c:	10bfe004 	addi	r2,r2,-128
    3080:	10800e60 	cmpeqi	r2,r2,57
    3084:	103ff71e 	bne	r2,zero,3064 <_dtoa_r+0x660>
    3088:	18c00044 	addi	r3,r3,1
    308c:	a0c00005 	stb	r3,0(r20)
    3090:	dcc00215 	stw	r19,8(sp)
    3094:	00014406 	br	35a8 <_dtoa_r+0xba4>
    3098:	04600034 	movhi	r17,32768
    309c:	8c7fffc4 	addi	r17,r17,-1
    30a0:	9462703a 	and	r17,r18,r17
    30a4:	00800044 	movi	r2,1
    30a8:	8825883a 	mov	r18,r17
    30ac:	80800015 	stw	r2,0(r16)
    30b0:	00dffc34 	movhi	r3,32752
    30b4:	909ffc2c 	andhi	r2,r18,32752
    30b8:	10fe721e 	bne	r2,r3,2a84 <_dtoa_r+0x80>
    30bc:	d9001e17 	ldw	r4,120(sp)
    30c0:	00800434 	movhi	r2,16
    30c4:	10bfffc4 	addi	r2,r2,-1
    30c8:	9084703a 	and	r2,r18,r2
    30cc:	00c9c3c4 	movi	r3,9999
    30d0:	20c00015 	stw	r3,0(r4)
    30d4:	14e6b03a 	or	r19,r2,r19
    30d8:	9800141e 	bne	r19,zero,312c <_dtoa_r+0x728>
    30dc:	d8802017 	ldw	r2,128(sp)
    30e0:	10041126 	beq	r2,zero,4128 <_dtoa_r+0x1724>
    30e4:	00800074 	movhi	r2,1
    30e8:	1007883a 	mov	r3,r2
    30ec:	18c04804 	addi	r3,r3,288
    30f0:	00800074 	movhi	r2,1
    30f4:	d8c00115 	stw	r3,4(sp)
    30f8:	10804a04 	addi	r2,r2,296
    30fc:	d8c02017 	ldw	r3,128(sp)
    3100:	18800015 	stw	r2,0(r3)
    3104:	003e7106 	br	2acc <_dtoa_r+0xc8>
    3108:	01400434 	movhi	r5,16
    310c:	297fffc4 	addi	r5,r5,-1
    3110:	894a703a 	and	r5,r17,r5
    3114:	dd001117 	ldw	r20,68(sp)
    3118:	9809883a 	mov	r4,r19
    311c:	294ffc34 	orhi	r5,r5,16368
    3120:	843f0044 	addi	r16,r16,-1023
    3124:	d8000915 	stw	zero,36(sp)
    3128:	003e9206 	br	2b74 <_dtoa_r+0x170>
    312c:	d8802017 	ldw	r2,128(sp)
    3130:	1002061e 	bne	r2,zero,394c <_dtoa_r+0xf48>
    3134:	00800074 	movhi	r2,1
    3138:	10804704 	addi	r2,r2,284
    313c:	d8800115 	stw	r2,4(sp)
    3140:	003e6206 	br	2acc <_dtoa_r+0xc8>
    3144:	dd400e17 	ldw	r21,56(sp)
    3148:	dd800f17 	ldw	r22,60(sp)
    314c:	ddc00c17 	ldw	r23,48(sp)
    3150:	dc400d17 	ldw	r17,52(sp)
    3154:	dcc00a17 	ldw	r19,40(sp)
    3158:	d8801217 	ldw	r2,72(sp)
    315c:	10006e16 	blt	r2,zero,3318 <_dtoa_r+0x914>
    3160:	d9000617 	ldw	r4,24(sp)
    3164:	20c003c8 	cmpgei	r3,r4,15
    3168:	18006b1e 	bne	r3,zero,3318 <_dtoa_r+0x914>
    316c:	200690fa 	slli	r3,r4,3
    3170:	00800074 	movhi	r2,1
    3174:	10808704 	addi	r2,r2,540
    3178:	10c5883a 	add	r2,r2,r3
    317c:	14000017 	ldw	r16,0(r2)
    3180:	14800117 	ldw	r18,4(r2)
    3184:	d8801d17 	ldw	r2,116(sp)
    3188:	1000150e 	bge	r2,zero,31e0 <_dtoa_r+0x7dc>
    318c:	d8800317 	ldw	r2,12(sp)
    3190:	00801316 	blt	zero,r2,31e0 <_dtoa_r+0x7dc>
    3194:	d8800317 	ldw	r2,12(sp)
    3198:	1002771e 	bne	r2,zero,3b78 <_dtoa_r+0x1174>
    319c:	8009883a 	mov	r4,r16
    31a0:	000d883a 	mov	r6,zero
    31a4:	01d00534 	movhi	r7,16404
    31a8:	900b883a 	mov	r5,r18
    31ac:	000be9c0 	call	be9c <__muldf3>
    31b0:	100d883a 	mov	r6,r2
    31b4:	180f883a 	mov	r7,r3
    31b8:	9809883a 	mov	r4,r19
    31bc:	880b883a 	mov	r5,r17
    31c0:	000bdb40 	call	bdb4 <__ledf2>
    31c4:	0029883a 	mov	r20,zero
    31c8:	0021883a 	mov	r16,zero
    31cc:	00820916 	blt	zero,r2,39f4 <_dtoa_r+0xff0>
    31d0:	d8801d17 	ldw	r2,116(sp)
    31d4:	da000117 	ldw	r8,4(sp)
    31d8:	00a6303a 	nor	r19,zero,r2
    31dc:	00020b06 	br	3a0c <_dtoa_r+0x1008>
    31e0:	800d883a 	mov	r6,r16
    31e4:	900f883a 	mov	r7,r18
    31e8:	9809883a 	mov	r4,r19
    31ec:	880b883a 	mov	r5,r17
    31f0:	000b3fc0 	call	b3fc <__divdf3>
    31f4:	180b883a 	mov	r5,r3
    31f8:	1009883a 	mov	r4,r2
    31fc:	000ce700 	call	ce70 <__fixdfsi>
    3200:	1009883a 	mov	r4,r2
    3204:	102b883a 	mov	r21,r2
    3208:	000cef00 	call	cef0 <__floatsidf>
    320c:	800d883a 	mov	r6,r16
    3210:	900f883a 	mov	r7,r18
    3214:	1009883a 	mov	r4,r2
    3218:	180b883a 	mov	r5,r3
    321c:	000be9c0 	call	be9c <__muldf3>
    3220:	100d883a 	mov	r6,r2
    3224:	9809883a 	mov	r4,r19
    3228:	880b883a 	mov	r5,r17
    322c:	180f883a 	mov	r7,r3
    3230:	000c5100 	call	c510 <__subdf3>
    3234:	d9800117 	ldw	r6,4(sp)
    3238:	dd800317 	ldw	r22,12(sp)
    323c:	1009883a 	mov	r4,r2
    3240:	a8800c04 	addi	r2,r21,48
    3244:	30800005 	stb	r2,0(r6)
    3248:	b0800060 	cmpeqi	r2,r22,1
    324c:	180b883a 	mov	r5,r3
    3250:	35000044 	addi	r20,r6,1
    3254:	10029c1e 	bne	r2,zero,3cc8 <_dtoa_r+0x12c4>
    3258:	04400044 	movi	r17,1
    325c:	ddc00215 	stw	r23,8(sp)
    3260:	00001c06 	br	32d4 <_dtoa_r+0x8d0>
    3264:	800d883a 	mov	r6,r16
    3268:	900f883a 	mov	r7,r18
    326c:	a809883a 	mov	r4,r21
    3270:	980b883a 	mov	r5,r19
    3274:	000b3fc0 	call	b3fc <__divdf3>
    3278:	180b883a 	mov	r5,r3
    327c:	1009883a 	mov	r4,r2
    3280:	000ce700 	call	ce70 <__fixdfsi>
    3284:	1009883a 	mov	r4,r2
    3288:	102f883a 	mov	r23,r2
    328c:	000cef00 	call	cef0 <__floatsidf>
    3290:	800d883a 	mov	r6,r16
    3294:	900f883a 	mov	r7,r18
    3298:	1009883a 	mov	r4,r2
    329c:	180b883a 	mov	r5,r3
    32a0:	000be9c0 	call	be9c <__muldf3>
    32a4:	a809883a 	mov	r4,r21
    32a8:	980b883a 	mov	r5,r19
    32ac:	100d883a 	mov	r6,r2
    32b0:	180f883a 	mov	r7,r3
    32b4:	000c5100 	call	c510 <__subdf3>
    32b8:	b9000c04 	addi	r4,r23,48
    32bc:	a1000005 	stb	r4,0(r20)
    32c0:	8c400044 	addi	r17,r17,1
    32c4:	a5000044 	addi	r20,r20,1
    32c8:	1009883a 	mov	r4,r2
    32cc:	180b883a 	mov	r5,r3
    32d0:	b4427b26 	beq	r22,r17,3cc0 <_dtoa_r+0x12bc>
    32d4:	000d883a 	mov	r6,zero
    32d8:	01d00934 	movhi	r7,16420
    32dc:	000be9c0 	call	be9c <__muldf3>
    32e0:	000d883a 	mov	r6,zero
    32e4:	000f883a 	mov	r7,zero
    32e8:	1009883a 	mov	r4,r2
    32ec:	180b883a 	mov	r5,r3
    32f0:	102b883a 	mov	r21,r2
    32f4:	1827883a 	mov	r19,r3
    32f8:	000bc4c0 	call	bc4c <__eqdf2>
    32fc:	103fd91e 	bne	r2,zero,3264 <_dtoa_r+0x860>
    3300:	d8800617 	ldw	r2,24(sp)
    3304:	ddc00217 	ldw	r23,8(sp)
    3308:	a011883a 	mov	r8,r20
    330c:	10800044 	addi	r2,r2,1
    3310:	d8800215 	stw	r2,8(sp)
    3314:	0000a406 	br	35a8 <_dtoa_r+0xba4>
    3318:	d8c00517 	ldw	r3,20(sp)
    331c:	1800e726 	beq	r3,zero,36bc <_dtoa_r+0xcb8>
    3320:	d8c00217 	ldw	r3,8(sp)
    3324:	18c00088 	cmpgei	r3,r3,2
    3328:	1801e526 	beq	r3,zero,3ac0 <_dtoa_r+0x10bc>
    332c:	d8800317 	ldw	r2,12(sp)
    3330:	153fffc4 	addi	r20,r2,-1
    3334:	d8800717 	ldw	r2,28(sp)
    3338:	1501c50e 	bge	r2,r20,3a50 <_dtoa_r+0x104c>
    333c:	d8800717 	ldw	r2,28(sp)
    3340:	dd000715 	stw	r20,28(sp)
    3344:	a085c83a 	sub	r2,r20,r2
    3348:	a8ab883a 	add	r21,r21,r2
    334c:	0029883a 	mov	r20,zero
    3350:	d8800317 	ldw	r2,12(sp)
    3354:	10028b16 	blt	r2,zero,3d84 <_dtoa_r+0x1380>
    3358:	d8c00417 	ldw	r3,16(sp)
    335c:	b0ad883a 	add	r22,r22,r2
    3360:	1885883a 	add	r2,r3,r2
    3364:	1825883a 	mov	r18,r3
    3368:	d8800415 	stw	r2,16(sp)
    336c:	01400044 	movi	r5,1
    3370:	e009883a 	mov	r4,fp
    3374:	0005ea00 	call	5ea0 <__i2b>
    3378:	1021883a 	mov	r16,r2
    337c:	0480080e 	bge	zero,r18,33a0 <_dtoa_r+0x99c>
    3380:	0580070e 	bge	zero,r22,33a0 <_dtoa_r+0x99c>
    3384:	9005883a 	mov	r2,r18
    3388:	b481a916 	blt	r22,r18,3a30 <_dtoa_r+0x102c>
    338c:	d8c00417 	ldw	r3,16(sp)
    3390:	90a5c83a 	sub	r18,r18,r2
    3394:	b0adc83a 	sub	r22,r22,r2
    3398:	1887c83a 	sub	r3,r3,r2
    339c:	d8c00415 	stw	r3,16(sp)
    33a0:	d8800717 	ldw	r2,28(sp)
    33a4:	10001526 	beq	r2,zero,33fc <_dtoa_r+0x9f8>
    33a8:	d8800517 	ldw	r2,20(sp)
    33ac:	1001f526 	beq	r2,zero,3b84 <_dtoa_r+0x1180>
    33b0:	05000f0e 	bge	zero,r20,33f0 <_dtoa_r+0x9ec>
    33b4:	800b883a 	mov	r5,r16
    33b8:	a00d883a 	mov	r6,r20
    33bc:	e009883a 	mov	r4,fp
    33c0:	00061a40 	call	61a4 <__pow5mult>
    33c4:	b80d883a 	mov	r6,r23
    33c8:	100b883a 	mov	r5,r2
    33cc:	e009883a 	mov	r4,fp
    33d0:	1021883a 	mov	r16,r2
    33d4:	0005f500 	call	5f50 <__multiply>
    33d8:	b80b883a 	mov	r5,r23
    33dc:	e009883a 	mov	r4,fp
    33e0:	d8800915 	stw	r2,36(sp)
    33e4:	0005af80 	call	5af8 <_Bfree>
    33e8:	d8800917 	ldw	r2,36(sp)
    33ec:	102f883a 	mov	r23,r2
    33f0:	d8800717 	ldw	r2,28(sp)
    33f4:	150dc83a 	sub	r6,r2,r20
    33f8:	15025d1e 	bne	r2,r20,3d70 <_dtoa_r+0x136c>
    33fc:	01400044 	movi	r5,1
    3400:	e009883a 	mov	r4,fp
    3404:	0005ea00 	call	5ea0 <__i2b>
    3408:	1029883a 	mov	r20,r2
    340c:	0540bd16 	blt	zero,r21,3704 <_dtoa_r+0xd00>
    3410:	d8800217 	ldw	r2,8(sp)
    3414:	10800088 	cmpgei	r2,r2,2
    3418:	10015626 	beq	r2,zero,3974 <_dtoa_r+0xf70>
    341c:	0023883a 	mov	r17,zero
    3420:	00800044 	movi	r2,1
    3424:	a800c01e 	bne	r21,zero,3728 <_dtoa_r+0xd24>
    3428:	1585883a 	add	r2,r2,r22
    342c:	108007cc 	andi	r2,r2,31
    3430:	1000ac26 	beq	r2,zero,36e4 <_dtoa_r+0xce0>
    3434:	00c00804 	movi	r3,32
    3438:	1887c83a 	sub	r3,r3,r2
    343c:	19000150 	cmplti	r4,r3,5
    3440:	20033d1e 	bne	r4,zero,4138 <_dtoa_r+0x1734>
    3444:	00c00704 	movi	r3,28
    3448:	1885c83a 	sub	r2,r3,r2
    344c:	d8c00417 	ldw	r3,16(sp)
    3450:	90a5883a 	add	r18,r18,r2
    3454:	b0ad883a 	add	r22,r22,r2
    3458:	1887883a 	add	r3,r3,r2
    345c:	d8c00415 	stw	r3,16(sp)
    3460:	d8800417 	ldw	r2,16(sp)
    3464:	00809916 	blt	zero,r2,36cc <_dtoa_r+0xcc8>
    3468:	0580050e 	bge	zero,r22,3480 <_dtoa_r+0xa7c>
    346c:	a00b883a 	mov	r5,r20
    3470:	b00d883a 	mov	r6,r22
    3474:	e009883a 	mov	r4,fp
    3478:	00062ec0 	call	62ec <__lshift>
    347c:	1029883a 	mov	r20,r2
    3480:	d8800817 	ldw	r2,32(sp)
    3484:	10011d1e 	bne	r2,zero,38fc <_dtoa_r+0xef8>
    3488:	d8800317 	ldw	r2,12(sp)
    348c:	00810a0e 	bge	zero,r2,38b8 <_dtoa_r+0xeb4>
    3490:	d8800517 	ldw	r2,20(sp)
    3494:	1000b71e 	bne	r2,zero,3774 <_dtoa_r+0xd70>
    3498:	d8800617 	ldw	r2,24(sp)
    349c:	10800044 	addi	r2,r2,1
    34a0:	d8800215 	stw	r2,8(sp)
    34a4:	dc800317 	ldw	r18,12(sp)
    34a8:	dd400117 	ldw	r21,4(sp)
    34ac:	04400044 	movi	r17,1
    34b0:	00000706 	br	34d0 <_dtoa_r+0xacc>
    34b4:	b80b883a 	mov	r5,r23
    34b8:	000f883a 	mov	r7,zero
    34bc:	01800284 	movi	r6,10
    34c0:	e009883a 	mov	r4,fp
    34c4:	0005b1c0 	call	5b1c <__multadd>
    34c8:	102f883a 	mov	r23,r2
    34cc:	8c400044 	addi	r17,r17,1
    34d0:	a00b883a 	mov	r5,r20
    34d4:	b809883a 	mov	r4,r23
    34d8:	00028080 	call	2808 <quorem>
    34dc:	14c00c04 	addi	r19,r2,48
    34e0:	ac45883a 	add	r2,r21,r17
    34e4:	14ffffc5 	stb	r19,-1(r2)
    34e8:	8cbff216 	blt	r17,r18,34b4 <_dtoa_r+0xab0>
    34ec:	d8800317 	ldw	r2,12(sp)
    34f0:	00815d0e 	bge	zero,r2,3a68 <_dtoa_r+0x1064>
    34f4:	d8c00117 	ldw	r3,4(sp)
    34f8:	0023883a 	mov	r17,zero
    34fc:	1891883a 	add	r8,r3,r2
    3500:	b80b883a 	mov	r5,r23
    3504:	01800044 	movi	r6,1
    3508:	e009883a 	mov	r4,fp
    350c:	da000315 	stw	r8,12(sp)
    3510:	00062ec0 	call	62ec <__lshift>
    3514:	a00b883a 	mov	r5,r20
    3518:	1009883a 	mov	r4,r2
    351c:	102f883a 	mov	r23,r2
    3520:	00064740 	call	6474 <__mcmp>
    3524:	da000317 	ldw	r8,12(sp)
    3528:	0081540e 	bge	zero,r2,3a7c <_dtoa_r+0x1078>
    352c:	413fffc3 	ldbu	r4,-1(r8)
    3530:	d9400117 	ldw	r5,4(sp)
    3534:	00000306 	br	3544 <_dtoa_r+0xb40>
    3538:	28c15a26 	beq	r5,r3,3aa4 <_dtoa_r+0x10a0>
    353c:	193fffc3 	ldbu	r4,-1(r3)
    3540:	1811883a 	mov	r8,r3
    3544:	20803fcc 	andi	r2,r4,255
    3548:	1080201c 	xori	r2,r2,128
    354c:	10bfe004 	addi	r2,r2,-128
    3550:	10800e60 	cmpeqi	r2,r2,57
    3554:	40ffffc4 	addi	r3,r8,-1
    3558:	103ff71e 	bne	r2,zero,3538 <_dtoa_r+0xb34>
    355c:	21000044 	addi	r4,r4,1
    3560:	19000005 	stb	r4,0(r3)
    3564:	a00b883a 	mov	r5,r20
    3568:	e009883a 	mov	r4,fp
    356c:	da000315 	stw	r8,12(sp)
    3570:	0005af80 	call	5af8 <_Bfree>
    3574:	da000317 	ldw	r8,12(sp)
    3578:	80000b26 	beq	r16,zero,35a8 <_dtoa_r+0xba4>
    357c:	88000526 	beq	r17,zero,3594 <_dtoa_r+0xb90>
    3580:	8c000426 	beq	r17,r16,3594 <_dtoa_r+0xb90>
    3584:	880b883a 	mov	r5,r17
    3588:	e009883a 	mov	r4,fp
    358c:	0005af80 	call	5af8 <_Bfree>
    3590:	da000317 	ldw	r8,12(sp)
    3594:	800b883a 	mov	r5,r16
    3598:	e009883a 	mov	r4,fp
    359c:	da000315 	stw	r8,12(sp)
    35a0:	0005af80 	call	5af8 <_Bfree>
    35a4:	da000317 	ldw	r8,12(sp)
    35a8:	b80b883a 	mov	r5,r23
    35ac:	e009883a 	mov	r4,fp
    35b0:	da000315 	stw	r8,12(sp)
    35b4:	0005af80 	call	5af8 <_Bfree>
    35b8:	da000317 	ldw	r8,12(sp)
    35bc:	d8801e17 	ldw	r2,120(sp)
    35c0:	d8c00217 	ldw	r3,8(sp)
    35c4:	40000005 	stb	zero,0(r8)
    35c8:	10c00015 	stw	r3,0(r2)
    35cc:	d8802017 	ldw	r2,128(sp)
    35d0:	103d3e26 	beq	r2,zero,2acc <_dtoa_r+0xc8>
    35d4:	12000015 	stw	r8,0(r2)
    35d8:	003d3c06 	br	2acc <_dtoa_r+0xc8>
    35dc:	d8000815 	stw	zero,32(sp)
    35e0:	b0002316 	blt	r22,zero,3670 <_dtoa_r+0xc6c>
    35e4:	d8000415 	stw	zero,16(sp)
    35e8:	d8c00217 	ldw	r3,8(sp)
    35ec:	dd400615 	stw	r21,24(sp)
    35f0:	d8000715 	stw	zero,28(sp)
    35f4:	188002a8 	cmpgeui	r2,r3,10
    35f8:	b56d883a 	add	r22,r22,r21
    35fc:	103da726 	beq	r2,zero,2c9c <_dtoa_r+0x298>
    3600:	00800044 	movi	r2,1
    3604:	d8800515 	stw	r2,20(sp)
    3608:	00bfffc4 	movi	r2,-1
    360c:	04000044 	movi	r16,1
    3610:	d8000215 	stw	zero,8(sp)
    3614:	d8800315 	stw	r2,12(sp)
    3618:	d8001d15 	stw	zero,116(sp)
    361c:	d8800317 	ldw	r2,12(sp)
    3620:	e0001115 	stw	zero,68(fp)
    3624:	000b883a 	mov	r5,zero
    3628:	d8800b15 	stw	r2,44(sp)
    362c:	003db806 	br	2d10 <_dtoa_r+0x30c>
    3630:	188000e0 	cmpeqi	r2,r3,3
    3634:	d8000515 	stw	zero,20(sp)
    3638:	1002a526 	beq	r2,zero,40d0 <_dtoa_r+0x16cc>
    363c:	d8801d17 	ldw	r2,116(sp)
    3640:	d8c00617 	ldw	r3,24(sp)
    3644:	10c5883a 	add	r2,r2,r3
    3648:	d8800b15 	stw	r2,44(sp)
    364c:	10800044 	addi	r2,r2,1
    3650:	d8800315 	stw	r2,12(sp)
    3654:	100d883a 	mov	r6,r2
    3658:	00bda216 	blt	zero,r2,2ce4 <_dtoa_r+0x2e0>
    365c:	01800044 	movi	r6,1
    3660:	003da006 	br	2ce4 <_dtoa_r+0x2e0>
    3664:	00800044 	movi	r2,1
    3668:	d8800815 	stw	r2,32(sp)
    366c:	b03d7f0e 	bge	r22,zero,2c6c <_dtoa_r+0x268>
    3670:	00800044 	movi	r2,1
    3674:	1405c83a 	sub	r2,r2,r16
    3678:	d8800415 	stw	r2,16(sp)
    367c:	002d883a 	mov	r22,zero
    3680:	003d7b06 	br	2c70 <_dtoa_r+0x26c>
    3684:	a809883a 	mov	r4,r21
    3688:	000cef00 	call	cef0 <__floatsidf>
    368c:	900d883a 	mov	r6,r18
    3690:	b00f883a 	mov	r7,r22
    3694:	1009883a 	mov	r4,r2
    3698:	180b883a 	mov	r5,r3
    369c:	000bc4c0 	call	bc4c <__eqdf2>
    36a0:	103d6126 	beq	r2,zero,2c28 <_dtoa_r+0x224>
    36a4:	ad7fffc4 	addi	r21,r21,-1
    36a8:	003d5f06 	br	2c28 <_dtoa_r+0x224>
    36ac:	00800074 	movhi	r2,1
    36b0:	10803e04 	addi	r2,r2,248
    36b4:	d8800115 	stw	r2,4(sp)
    36b8:	003d0406 	br	2acc <_dtoa_r+0xc8>
    36bc:	dd000717 	ldw	r20,28(sp)
    36c0:	dc800417 	ldw	r18,16(sp)
    36c4:	0021883a 	mov	r16,zero
    36c8:	003f2c06 	br	337c <_dtoa_r+0x978>
    36cc:	b80b883a 	mov	r5,r23
    36d0:	100d883a 	mov	r6,r2
    36d4:	e009883a 	mov	r4,fp
    36d8:	00062ec0 	call	62ec <__lshift>
    36dc:	102f883a 	mov	r23,r2
    36e0:	003f6106 	br	3468 <_dtoa_r+0xa64>
    36e4:	00800704 	movi	r2,28
    36e8:	003f5806 	br	344c <_dtoa_r+0xa48>
    36ec:	01000804 	movi	r4,32
    36f0:	2089c83a 	sub	r4,r4,r2
    36f4:	9908983a 	sll	r4,r19,r4
    36f8:	003d1706 	br	2b58 <_dtoa_r+0x154>
    36fc:	04000044 	movi	r16,1
    3700:	003d6b06 	br	2cb0 <_dtoa_r+0x2ac>
    3704:	100b883a 	mov	r5,r2
    3708:	a80d883a 	mov	r6,r21
    370c:	e009883a 	mov	r4,fp
    3710:	00061a40 	call	61a4 <__pow5mult>
    3714:	d8c00217 	ldw	r3,8(sp)
    3718:	1029883a 	mov	r20,r2
    371c:	18c00090 	cmplti	r3,r3,2
    3720:	18014b1e 	bne	r3,zero,3c50 <_dtoa_r+0x124c>
    3724:	0023883a 	mov	r17,zero
    3728:	a0800417 	ldw	r2,16(r20)
    372c:	10800104 	addi	r2,r2,4
    3730:	100490ba 	slli	r2,r2,2
    3734:	a085883a 	add	r2,r20,r2
    3738:	11000017 	ldw	r4,0(r2)
    373c:	0005d8c0 	call	5d8c <__hi0bits>
    3740:	00c00804 	movi	r3,32
    3744:	1885c83a 	sub	r2,r3,r2
    3748:	003f3706 	br	3428 <_dtoa_r+0xa24>
    374c:	800b883a 	mov	r5,r16
    3750:	000f883a 	mov	r7,zero
    3754:	01800284 	movi	r6,10
    3758:	e009883a 	mov	r4,fp
    375c:	0005b1c0 	call	5b1c <__multadd>
    3760:	1021883a 	mov	r16,r2
    3764:	d8800b17 	ldw	r2,44(sp)
    3768:	0082460e 	bge	zero,r2,4084 <_dtoa_r+0x1680>
    376c:	dd400615 	stw	r21,24(sp)
    3770:	d8800315 	stw	r2,12(sp)
    3774:	0480b016 	blt	zero,r18,3a38 <_dtoa_r+0x1034>
    3778:	88016c1e 	bne	r17,zero,3d2c <_dtoa_r+0x1328>
    377c:	8025883a 	mov	r18,r16
    3780:	dd800117 	ldw	r22,4(sp)
    3784:	d9000317 	ldw	r4,12(sp)
    3788:	98c0004c 	andi	r3,r19,1
    378c:	b0bfffc4 	addi	r2,r22,-1
    3790:	1105883a 	add	r2,r2,r4
    3794:	d8800515 	stw	r2,20(sp)
    3798:	d8800217 	ldw	r2,8(sp)
    379c:	d8c00815 	stw	r3,32(sp)
    37a0:	1884b03a 	or	r2,r3,r2
    37a4:	d8800715 	stw	r2,28(sp)
    37a8:	00002b06 	br	3858 <_dtoa_r+0xe54>
    37ac:	b809883a 	mov	r4,r23
    37b0:	d9400415 	stw	r5,16(sp)
    37b4:	00064740 	call	6474 <__mcmp>
    37b8:	d9400417 	ldw	r5,16(sp)
    37bc:	e009883a 	mov	r4,fp
    37c0:	d8800315 	stw	r2,12(sp)
    37c4:	0005af80 	call	5af8 <_Bfree>
    37c8:	d8800317 	ldw	r2,12(sp)
    37cc:	1000021e 	bne	r2,zero,37d8 <_dtoa_r+0xdd4>
    37d0:	d8c00717 	ldw	r3,28(sp)
    37d4:	18021d26 	beq	r3,zero,404c <_dtoa_r+0x1648>
    37d8:	b2000044 	addi	r8,r22,1
    37dc:	da000315 	stw	r8,12(sp)
    37e0:	88012116 	blt	r17,zero,3c68 <_dtoa_r+0x1264>
    37e4:	d8c00217 	ldw	r3,8(sp)
    37e8:	88e2b03a 	or	r17,r17,r3
    37ec:	d8c00817 	ldw	r3,32(sp)
    37f0:	1c62b03a 	or	r17,r3,r17
    37f4:	88011c26 	beq	r17,zero,3c68 <_dtoa_r+0x1264>
    37f8:	00816616 	blt	zero,r2,3d94 <_dtoa_r+0x1390>
    37fc:	d8800517 	ldw	r2,20(sp)
    3800:	b4c00005 	stb	r19,0(r22)
    3804:	15816d26 	beq	r2,r22,3dbc <_dtoa_r+0x13b8>
    3808:	b80b883a 	mov	r5,r23
    380c:	000f883a 	mov	r7,zero
    3810:	01800284 	movi	r6,10
    3814:	e009883a 	mov	r4,fp
    3818:	0005b1c0 	call	5b1c <__multadd>
    381c:	102f883a 	mov	r23,r2
    3820:	800b883a 	mov	r5,r16
    3824:	000f883a 	mov	r7,zero
    3828:	01800284 	movi	r6,10
    382c:	e009883a 	mov	r4,fp
    3830:	84801d26 	beq	r16,r18,38a8 <_dtoa_r+0xea4>
    3834:	0005b1c0 	call	5b1c <__multadd>
    3838:	900b883a 	mov	r5,r18
    383c:	000f883a 	mov	r7,zero
    3840:	01800284 	movi	r6,10
    3844:	e009883a 	mov	r4,fp
    3848:	1021883a 	mov	r16,r2
    384c:	0005b1c0 	call	5b1c <__multadd>
    3850:	1025883a 	mov	r18,r2
    3854:	dd800317 	ldw	r22,12(sp)
    3858:	a00b883a 	mov	r5,r20
    385c:	b809883a 	mov	r4,r23
    3860:	00028080 	call	2808 <quorem>
    3864:	800b883a 	mov	r5,r16
    3868:	b809883a 	mov	r4,r23
    386c:	102b883a 	mov	r21,r2
    3870:	00064740 	call	6474 <__mcmp>
    3874:	a00b883a 	mov	r5,r20
    3878:	900d883a 	mov	r6,r18
    387c:	e009883a 	mov	r4,fp
    3880:	1023883a 	mov	r17,r2
    3884:	00064cc0 	call	64cc <__mdiff>
    3888:	100b883a 	mov	r5,r2
    388c:	10800317 	ldw	r2,12(r2)
    3890:	acc00c04 	addi	r19,r21,48
    3894:	103fc526 	beq	r2,zero,37ac <_dtoa_r+0xda8>
    3898:	e009883a 	mov	r4,fp
    389c:	0005af80 	call	5af8 <_Bfree>
    38a0:	00800044 	movi	r2,1
    38a4:	003fcc06 	br	37d8 <_dtoa_r+0xdd4>
    38a8:	0005b1c0 	call	5b1c <__multadd>
    38ac:	1021883a 	mov	r16,r2
    38b0:	1025883a 	mov	r18,r2
    38b4:	003fe706 	br	3854 <_dtoa_r+0xe50>
    38b8:	d8800217 	ldw	r2,8(sp)
    38bc:	108000d0 	cmplti	r2,r2,3
    38c0:	10004026 	beq	r2,zero,39c4 <_dtoa_r+0xfc0>
    38c4:	d8800517 	ldw	r2,20(sp)
    38c8:	103faa1e 	bne	r2,zero,3774 <_dtoa_r+0xd70>
    38cc:	a00b883a 	mov	r5,r20
    38d0:	b809883a 	mov	r4,r23
    38d4:	00028080 	call	2808 <quorem>
    38d8:	14c00c04 	addi	r19,r2,48
    38dc:	d8800117 	ldw	r2,4(sp)
    38e0:	0023883a 	mov	r17,zero
    38e4:	12000044 	addi	r8,r2,1
    38e8:	14c00005 	stb	r19,0(r2)
    38ec:	d8800617 	ldw	r2,24(sp)
    38f0:	10800044 	addi	r2,r2,1
    38f4:	d8800215 	stw	r2,8(sp)
    38f8:	003f0106 	br	3500 <_dtoa_r+0xafc>
    38fc:	a00b883a 	mov	r5,r20
    3900:	b809883a 	mov	r4,r23
    3904:	00064740 	call	6474 <__mcmp>
    3908:	103edf0e 	bge	r2,zero,3488 <_dtoa_r+0xa84>
    390c:	b80b883a 	mov	r5,r23
    3910:	000f883a 	mov	r7,zero
    3914:	01800284 	movi	r6,10
    3918:	e009883a 	mov	r4,fp
    391c:	0005b1c0 	call	5b1c <__multadd>
    3920:	d8c00617 	ldw	r3,24(sp)
    3924:	102f883a 	mov	r23,r2
    3928:	d8800517 	ldw	r2,20(sp)
    392c:	1d7fffc4 	addi	r21,r3,-1
    3930:	103f861e 	bne	r2,zero,374c <_dtoa_r+0xd48>
    3934:	d8800b17 	ldw	r2,44(sp)
    3938:	0081cb0e 	bge	zero,r2,4068 <_dtoa_r+0x1664>
    393c:	d8c00617 	ldw	r3,24(sp)
    3940:	d8800315 	stw	r2,12(sp)
    3944:	d8c00215 	stw	r3,8(sp)
    3948:	003ed606 	br	34a4 <_dtoa_r+0xaa0>
    394c:	00800074 	movhi	r2,1
    3950:	1007883a 	mov	r3,r2
    3954:	18c04704 	addi	r3,r3,284
    3958:	00800074 	movhi	r2,1
    395c:	d8c00115 	stw	r3,4(sp)
    3960:	108047c4 	addi	r2,r2,287
    3964:	003de506 	br	30fc <_dtoa_r+0x6f8>
    3968:	00800044 	movi	r2,1
    396c:	d8800515 	stw	r2,20(sp)
    3970:	003f3206 	br	363c <_dtoa_r+0xc38>
    3974:	983ea91e 	bne	r19,zero,341c <_dtoa_r+0xa18>
    3978:	00800434 	movhi	r2,16
    397c:	10bfffc4 	addi	r2,r2,-1
    3980:	8884703a 	and	r2,r17,r2
    3984:	103ea51e 	bne	r2,zero,341c <_dtoa_r+0xa18>
    3988:	8c5ffc2c 	andhi	r17,r17,32752
    398c:	883ea326 	beq	r17,zero,341c <_dtoa_r+0xa18>
    3990:	d8800417 	ldw	r2,16(sp)
    3994:	b5800044 	addi	r22,r22,1
    3998:	04400044 	movi	r17,1
    399c:	10800044 	addi	r2,r2,1
    39a0:	d8800415 	stw	r2,16(sp)
    39a4:	003e9e06 	br	3420 <_dtoa_r+0xa1c>
    39a8:	00800044 	movi	r2,1
    39ac:	d8800315 	stw	r2,12(sp)
    39b0:	d8801d15 	stw	r2,116(sp)
    39b4:	003f1906 	br	361c <_dtoa_r+0xc18>
    39b8:	d8800b17 	ldw	r2,44(sp)
    39bc:	dd400615 	stw	r21,24(sp)
    39c0:	d8800315 	stw	r2,12(sp)
    39c4:	d8800317 	ldw	r2,12(sp)
    39c8:	103e011e 	bne	r2,zero,31d0 <_dtoa_r+0x7cc>
    39cc:	a00b883a 	mov	r5,r20
    39d0:	e009883a 	mov	r4,fp
    39d4:	000f883a 	mov	r7,zero
    39d8:	01800144 	movi	r6,5
    39dc:	0005b1c0 	call	5b1c <__multadd>
    39e0:	100b883a 	mov	r5,r2
    39e4:	b809883a 	mov	r4,r23
    39e8:	1029883a 	mov	r20,r2
    39ec:	00064740 	call	6474 <__mcmp>
    39f0:	00bdf70e 	bge	zero,r2,31d0 <_dtoa_r+0x7cc>
    39f4:	d8c00117 	ldw	r3,4(sp)
    39f8:	00800c44 	movi	r2,49
    39fc:	18800005 	stb	r2,0(r3)
    3a00:	d8800617 	ldw	r2,24(sp)
    3a04:	1a000044 	addi	r8,r3,1
    3a08:	14c00044 	addi	r19,r2,1
    3a0c:	a00b883a 	mov	r5,r20
    3a10:	e009883a 	mov	r4,fp
    3a14:	da000315 	stw	r8,12(sp)
    3a18:	0005af80 	call	5af8 <_Bfree>
    3a1c:	98800044 	addi	r2,r19,1
    3a20:	d8800215 	stw	r2,8(sp)
    3a24:	da000317 	ldw	r8,12(sp)
    3a28:	803eda1e 	bne	r16,zero,3594 <_dtoa_r+0xb90>
    3a2c:	003ede06 	br	35a8 <_dtoa_r+0xba4>
    3a30:	b005883a 	mov	r2,r22
    3a34:	003e5506 	br	338c <_dtoa_r+0x988>
    3a38:	800b883a 	mov	r5,r16
    3a3c:	900d883a 	mov	r6,r18
    3a40:	e009883a 	mov	r4,fp
    3a44:	00062ec0 	call	62ec <__lshift>
    3a48:	1021883a 	mov	r16,r2
    3a4c:	003f4a06 	br	3778 <_dtoa_r+0xd74>
    3a50:	1529c83a 	sub	r20,r2,r20
    3a54:	003e3e06 	br	3350 <_dtoa_r+0x94c>
    3a58:	dcc00a15 	stw	r19,40(sp)
    3a5c:	dc400c15 	stw	r17,48(sp)
    3a60:	04000084 	movi	r16,2
    3a64:	003ccf06 	br	2da4 <_dtoa_r+0x3a0>
    3a68:	00800044 	movi	r2,1
    3a6c:	003ea106 	br	34f4 <_dtoa_r+0xaf0>
    3a70:	00800044 	movi	r2,1
    3a74:	d8800515 	stw	r2,20(sp)
    3a78:	003c9506 	br	2cd0 <_dtoa_r+0x2cc>
    3a7c:	1000021e 	bne	r2,zero,3a88 <_dtoa_r+0x1084>
    3a80:	98c0004c 	andi	r3,r19,1
    3a84:	183ea91e 	bne	r3,zero,352c <_dtoa_r+0xb28>
    3a88:	40bfffc7 	ldb	r2,-1(r8)
    3a8c:	4007883a 	mov	r3,r8
    3a90:	423fffc4 	addi	r8,r8,-1
    3a94:	10800c20 	cmpeqi	r2,r2,48
    3a98:	103ffb1e 	bne	r2,zero,3a88 <_dtoa_r+0x1084>
    3a9c:	1811883a 	mov	r8,r3
    3aa0:	003eb006 	br	3564 <_dtoa_r+0xb60>
    3aa4:	d8c00117 	ldw	r3,4(sp)
    3aa8:	00800c44 	movi	r2,49
    3aac:	18800005 	stb	r2,0(r3)
    3ab0:	d8800217 	ldw	r2,8(sp)
    3ab4:	10800044 	addi	r2,r2,1
    3ab8:	d8800215 	stw	r2,8(sp)
    3abc:	003ea906 	br	3564 <_dtoa_r+0xb60>
    3ac0:	d8c00917 	ldw	r3,36(sp)
    3ac4:	18010e26 	beq	r3,zero,3f00 <_dtoa_r+0x14fc>
    3ac8:	d8c00417 	ldw	r3,16(sp)
    3acc:	10810cc4 	addi	r2,r2,1075
    3ad0:	b0ad883a 	add	r22,r22,r2
    3ad4:	1885883a 	add	r2,r3,r2
    3ad8:	dd000717 	ldw	r20,28(sp)
    3adc:	1825883a 	mov	r18,r3
    3ae0:	d8800415 	stw	r2,16(sp)
    3ae4:	003e2106 	br	336c <_dtoa_r+0x968>
    3ae8:	8009883a 	mov	r4,r16
    3aec:	000cef00 	call	cef0 <__floatsidf>
    3af0:	d9800a17 	ldw	r6,40(sp)
    3af4:	900f883a 	mov	r7,r18
    3af8:	1009883a 	mov	r4,r2
    3afc:	180b883a 	mov	r5,r3
    3b00:	000be9c0 	call	be9c <__muldf3>
    3b04:	000d883a 	mov	r6,zero
    3b08:	01d00734 	movhi	r7,16412
    3b0c:	1009883a 	mov	r4,r2
    3b10:	180b883a 	mov	r5,r3
    3b14:	000ab0c0 	call	ab0c <__adddf3>
    3b18:	1029883a 	mov	r20,r2
    3b1c:	00bf3034 	movhi	r2,64704
    3b20:	1885883a 	add	r2,r3,r2
    3b24:	d8800c15 	stw	r2,48(sp)
    3b28:	d9000a17 	ldw	r4,40(sp)
    3b2c:	900b883a 	mov	r5,r18
    3b30:	000d883a 	mov	r6,zero
    3b34:	01d00534 	movhi	r7,16404
    3b38:	000c5100 	call	c510 <__subdf3>
    3b3c:	d9c00c17 	ldw	r7,48(sp)
    3b40:	a00d883a 	mov	r6,r20
    3b44:	1009883a 	mov	r4,r2
    3b48:	180b883a 	mov	r5,r3
    3b4c:	1025883a 	mov	r18,r2
    3b50:	1821883a 	mov	r16,r3
    3b54:	000bccc0 	call	bccc <__gedf2>
    3b58:	00812b16 	blt	zero,r2,4008 <_dtoa_r+0x1604>
    3b5c:	d8800c17 	ldw	r2,48(sp)
    3b60:	a00d883a 	mov	r6,r20
    3b64:	9009883a 	mov	r4,r18
    3b68:	11e0003c 	xorhi	r7,r2,32768
    3b6c:	800b883a 	mov	r5,r16
    3b70:	000bdb40 	call	bdb4 <__ledf2>
    3b74:	103d780e 	bge	r2,zero,3158 <_dtoa_r+0x754>
    3b78:	0029883a 	mov	r20,zero
    3b7c:	0021883a 	mov	r16,zero
    3b80:	003d9306 	br	31d0 <_dtoa_r+0x7cc>
    3b84:	d9800717 	ldw	r6,28(sp)
    3b88:	b80b883a 	mov	r5,r23
    3b8c:	e009883a 	mov	r4,fp
    3b90:	00061a40 	call	61a4 <__pow5mult>
    3b94:	102f883a 	mov	r23,r2
    3b98:	003e1806 	br	33fc <_dtoa_r+0x9f8>
    3b9c:	d8800617 	ldw	r2,24(sp)
    3ba0:	1000e326 	beq	r2,zero,3f30 <_dtoa_r+0x152c>
    3ba4:	00a9c83a 	sub	r20,zero,r2
    3ba8:	a08003cc 	andi	r2,r20,15
    3bac:	100690fa 	slli	r3,r2,3
    3bb0:	00800074 	movhi	r2,1
    3bb4:	10808704 	addi	r2,r2,540
    3bb8:	10c5883a 	add	r2,r2,r3
    3bbc:	11800017 	ldw	r6,0(r2)
    3bc0:	11c00117 	ldw	r7,4(r2)
    3bc4:	9809883a 	mov	r4,r19
    3bc8:	880b883a 	mov	r5,r17
    3bcc:	a029d13a 	srai	r20,r20,4
    3bd0:	000be9c0 	call	be9c <__muldf3>
    3bd4:	d8800a15 	stw	r2,40(sp)
    3bd8:	1825883a 	mov	r18,r3
    3bdc:	a0013126 	beq	r20,zero,40a4 <_dtoa_r+0x16a0>
    3be0:	02000074 	movhi	r8,1
    3be4:	04000084 	movi	r16,2
    3be8:	42007d04 	addi	r8,r8,500
    3bec:	180b883a 	mov	r5,r3
    3bf0:	dc400c15 	stw	r17,48(sp)
    3bf4:	1009883a 	mov	r4,r2
    3bf8:	8023883a 	mov	r17,r16
    3bfc:	0007883a 	mov	r3,zero
    3c00:	4021883a 	mov	r16,r8
    3c04:	a180004c 	andi	r6,r20,1
    3c08:	30000726 	beq	r6,zero,3c28 <_dtoa_r+0x1224>
    3c0c:	81800017 	ldw	r6,0(r16)
    3c10:	81c00117 	ldw	r7,4(r16)
    3c14:	8c400044 	addi	r17,r17,1
    3c18:	000be9c0 	call	be9c <__muldf3>
    3c1c:	180b883a 	mov	r5,r3
    3c20:	1009883a 	mov	r4,r2
    3c24:	00c00044 	movi	r3,1
    3c28:	a029d07a 	srai	r20,r20,1
    3c2c:	84000204 	addi	r16,r16,8
    3c30:	a03ff41e 	bne	r20,zero,3c04 <_dtoa_r+0x1200>
    3c34:	18c03fcc 	andi	r3,r3,255
    3c38:	8821883a 	mov	r16,r17
    3c3c:	dc400c17 	ldw	r17,48(sp)
    3c40:	183c7126 	beq	r3,zero,2e08 <_dtoa_r+0x404>
    3c44:	d9000a15 	stw	r4,40(sp)
    3c48:	2825883a 	mov	r18,r5
    3c4c:	003c6e06 	br	2e08 <_dtoa_r+0x404>
    3c50:	983eb41e 	bne	r19,zero,3724 <_dtoa_r+0xd20>
    3c54:	00800434 	movhi	r2,16
    3c58:	10bfffc4 	addi	r2,r2,-1
    3c5c:	8884703a 	and	r2,r17,r2
    3c60:	103f4926 	beq	r2,zero,3988 <_dtoa_r+0xf84>
    3c64:	003eaf06 	br	3724 <_dtoa_r+0xd20>
    3c68:	00800e0e 	bge	zero,r2,3ca4 <_dtoa_r+0x12a0>
    3c6c:	b80b883a 	mov	r5,r23
    3c70:	01800044 	movi	r6,1
    3c74:	e009883a 	mov	r4,fp
    3c78:	da000215 	stw	r8,8(sp)
    3c7c:	00062ec0 	call	62ec <__lshift>
    3c80:	a00b883a 	mov	r5,r20
    3c84:	1009883a 	mov	r4,r2
    3c88:	102f883a 	mov	r23,r2
    3c8c:	00064740 	call	6474 <__mcmp>
    3c90:	da000217 	ldw	r8,8(sp)
    3c94:	0080e30e 	bge	zero,r2,4024 <_dtoa_r+0x1620>
    3c98:	98c00e60 	cmpeqi	r3,r19,57
    3c9c:	1800cf1e 	bne	r3,zero,3fdc <_dtoa_r+0x15d8>
    3ca0:	acc00c44 	addi	r19,r21,49
    3ca4:	8023883a 	mov	r17,r16
    3ca8:	d8800617 	ldw	r2,24(sp)
    3cac:	b4c00005 	stb	r19,0(r22)
    3cb0:	9021883a 	mov	r16,r18
    3cb4:	10800044 	addi	r2,r2,1
    3cb8:	d8800215 	stw	r2,8(sp)
    3cbc:	003e2906 	br	3564 <_dtoa_r+0xb60>
    3cc0:	b82b883a 	mov	r21,r23
    3cc4:	ddc00217 	ldw	r23,8(sp)
    3cc8:	200d883a 	mov	r6,r4
    3ccc:	280f883a 	mov	r7,r5
    3cd0:	000ab0c0 	call	ab0c <__adddf3>
    3cd4:	102d883a 	mov	r22,r2
    3cd8:	1009883a 	mov	r4,r2
    3cdc:	d8800617 	ldw	r2,24(sp)
    3ce0:	800d883a 	mov	r6,r16
    3ce4:	900f883a 	mov	r7,r18
    3ce8:	10800044 	addi	r2,r2,1
    3cec:	180b883a 	mov	r5,r3
    3cf0:	1823883a 	mov	r17,r3
    3cf4:	1027883a 	mov	r19,r2
    3cf8:	d8800215 	stw	r2,8(sp)
    3cfc:	000bccc0 	call	bccc <__gedf2>
    3d00:	00808916 	blt	zero,r2,3f28 <_dtoa_r+0x1524>
    3d04:	800d883a 	mov	r6,r16
    3d08:	900f883a 	mov	r7,r18
    3d0c:	b009883a 	mov	r4,r22
    3d10:	880b883a 	mov	r5,r17
    3d14:	000bc4c0 	call	bc4c <__eqdf2>
    3d18:	1000021e 	bne	r2,zero,3d24 <_dtoa_r+0x1320>
    3d1c:	ad40004c 	andi	r21,r21,1
    3d20:	a800811e 	bne	r21,zero,3f28 <_dtoa_r+0x1524>
    3d24:	a011883a 	mov	r8,r20
    3d28:	003e1f06 	br	35a8 <_dtoa_r+0xba4>
    3d2c:	81400117 	ldw	r5,4(r16)
    3d30:	e009883a 	mov	r4,fp
    3d34:	0005a540 	call	5a54 <_Balloc>
    3d38:	1023883a 	mov	r17,r2
    3d3c:	1000f326 	beq	r2,zero,410c <_dtoa_r+0x1708>
    3d40:	81800417 	ldw	r6,16(r16)
    3d44:	81400304 	addi	r5,r16,12
    3d48:	11000304 	addi	r4,r2,12
    3d4c:	31800084 	addi	r6,r6,2
    3d50:	300c90ba 	slli	r6,r6,2
    3d54:	00058640 	call	5864 <memcpy>
    3d58:	01800044 	movi	r6,1
    3d5c:	880b883a 	mov	r5,r17
    3d60:	e009883a 	mov	r4,fp
    3d64:	00062ec0 	call	62ec <__lshift>
    3d68:	1025883a 	mov	r18,r2
    3d6c:	003e8406 	br	3780 <_dtoa_r+0xd7c>
    3d70:	b80b883a 	mov	r5,r23
    3d74:	e009883a 	mov	r4,fp
    3d78:	00061a40 	call	61a4 <__pow5mult>
    3d7c:	102f883a 	mov	r23,r2
    3d80:	003d9e06 	br	33fc <_dtoa_r+0x9f8>
    3d84:	d8800417 	ldw	r2,16(sp)
    3d88:	d8c00317 	ldw	r3,12(sp)
    3d8c:	10e5c83a 	sub	r18,r2,r3
    3d90:	003d7606 	br	336c <_dtoa_r+0x968>
    3d94:	98800e58 	cmpnei	r2,r19,57
    3d98:	10009026 	beq	r2,zero,3fdc <_dtoa_r+0x15d8>
    3d9c:	d8800617 	ldw	r2,24(sp)
    3da0:	98c00044 	addi	r3,r19,1
    3da4:	8023883a 	mov	r17,r16
    3da8:	10800044 	addi	r2,r2,1
    3dac:	d8800215 	stw	r2,8(sp)
    3db0:	b0c00005 	stb	r3,0(r22)
    3db4:	9021883a 	mov	r16,r18
    3db8:	003dea06 	br	3564 <_dtoa_r+0xb60>
    3dbc:	d8800617 	ldw	r2,24(sp)
    3dc0:	8023883a 	mov	r17,r16
    3dc4:	9021883a 	mov	r16,r18
    3dc8:	10800044 	addi	r2,r2,1
    3dcc:	d8800215 	stw	r2,8(sp)
    3dd0:	003dcb06 	br	3500 <_dtoa_r+0xafc>
    3dd4:	d9400c17 	ldw	r5,48(sp)
    3dd8:	a009883a 	mov	r4,r20
    3ddc:	000be9c0 	call	be9c <__muldf3>
    3de0:	d9400117 	ldw	r5,4(sp)
    3de4:	d9000f17 	ldw	r4,60(sp)
    3de8:	d9800d17 	ldw	r6,52(sp)
    3dec:	d8800a15 	stw	r2,40(sp)
    3df0:	29000005 	stb	r4,0(r5)
    3df4:	d8c00c15 	stw	r3,48(sp)
    3df8:	31000058 	cmpnei	r4,r6,1
    3dfc:	da000e17 	ldw	r8,56(sp)
    3e00:	29a9883a 	add	r20,r5,r6
    3e04:	20009d26 	beq	r4,zero,407c <_dtoa_r+0x1678>
    3e08:	dc400d15 	stw	r17,52(sp)
    3e0c:	8009883a 	mov	r4,r16
    3e10:	900b883a 	mov	r5,r18
    3e14:	4023883a 	mov	r17,r8
    3e18:	dcc00e15 	stw	r19,56(sp)
    3e1c:	000d883a 	mov	r6,zero
    3e20:	01d00934 	movhi	r7,16420
    3e24:	000be9c0 	call	be9c <__muldf3>
    3e28:	180b883a 	mov	r5,r3
    3e2c:	1009883a 	mov	r4,r2
    3e30:	1825883a 	mov	r18,r3
    3e34:	1027883a 	mov	r19,r2
    3e38:	000ce700 	call	ce70 <__fixdfsi>
    3e3c:	1009883a 	mov	r4,r2
    3e40:	1021883a 	mov	r16,r2
    3e44:	000cef00 	call	cef0 <__floatsidf>
    3e48:	9809883a 	mov	r4,r19
    3e4c:	900b883a 	mov	r5,r18
    3e50:	100d883a 	mov	r6,r2
    3e54:	180f883a 	mov	r7,r3
    3e58:	8c400044 	addi	r17,r17,1
    3e5c:	84000c04 	addi	r16,r16,48
    3e60:	000c5100 	call	c510 <__subdf3>
    3e64:	8c3fffc5 	stb	r16,-1(r17)
    3e68:	1009883a 	mov	r4,r2
    3e6c:	180b883a 	mov	r5,r3
    3e70:	a47fea1e 	bne	r20,r17,3e1c <_dtoa_r+0x1418>
    3e74:	dc400d17 	ldw	r17,52(sp)
    3e78:	dcc00e17 	ldw	r19,56(sp)
    3e7c:	1021883a 	mov	r16,r2
    3e80:	1825883a 	mov	r18,r3
    3e84:	d9000a17 	ldw	r4,40(sp)
    3e88:	d9400c17 	ldw	r5,48(sp)
    3e8c:	000d883a 	mov	r6,zero
    3e90:	01cff834 	movhi	r7,16352
    3e94:	000ab0c0 	call	ab0c <__adddf3>
    3e98:	800d883a 	mov	r6,r16
    3e9c:	900f883a 	mov	r7,r18
    3ea0:	1009883a 	mov	r4,r2
    3ea4:	180b883a 	mov	r5,r3
    3ea8:	000bdb40 	call	bdb4 <__ledf2>
    3eac:	10005916 	blt	r2,zero,4014 <_dtoa_r+0x1610>
    3eb0:	d9800a17 	ldw	r6,40(sp)
    3eb4:	d9c00c17 	ldw	r7,48(sp)
    3eb8:	0009883a 	mov	r4,zero
    3ebc:	014ff834 	movhi	r5,16352
    3ec0:	000c5100 	call	c510 <__subdf3>
    3ec4:	800d883a 	mov	r6,r16
    3ec8:	900f883a 	mov	r7,r18
    3ecc:	1009883a 	mov	r4,r2
    3ed0:	180b883a 	mov	r5,r3
    3ed4:	000bccc0 	call	bccc <__gedf2>
    3ed8:	00bc9f0e 	bge	zero,r2,3158 <_dtoa_r+0x754>
    3edc:	a0bfffc7 	ldb	r2,-1(r20)
    3ee0:	a011883a 	mov	r8,r20
    3ee4:	a53fffc4 	addi	r20,r20,-1
    3ee8:	10800c20 	cmpeqi	r2,r2,48
    3eec:	103ffb1e 	bne	r2,zero,3edc <_dtoa_r+0x14d8>
    3ef0:	d8801017 	ldw	r2,64(sp)
    3ef4:	10800044 	addi	r2,r2,1
    3ef8:	d8800215 	stw	r2,8(sp)
    3efc:	003daa06 	br	35a8 <_dtoa_r+0xba4>
    3f00:	d8c01117 	ldw	r3,68(sp)
    3f04:	d9000417 	ldw	r4,16(sp)
    3f08:	00800d84 	movi	r2,54
    3f0c:	10c5c83a 	sub	r2,r2,r3
    3f10:	b0ad883a 	add	r22,r22,r2
    3f14:	2085883a 	add	r2,r4,r2
    3f18:	dd000717 	ldw	r20,28(sp)
    3f1c:	2025883a 	mov	r18,r4
    3f20:	d8800415 	stw	r2,16(sp)
    3f24:	003d1106 	br	336c <_dtoa_r+0x968>
    3f28:	d9000117 	ldw	r4,4(sp)
    3f2c:	003c4e06 	br	3068 <_dtoa_r+0x664>
    3f30:	dcc00a15 	stw	r19,40(sp)
    3f34:	8825883a 	mov	r18,r17
    3f38:	04000084 	movi	r16,2
    3f3c:	003bb206 	br	2e08 <_dtoa_r+0x404>
    3f40:	d8800317 	ldw	r2,12(sp)
    3f44:	103ee826 	beq	r2,zero,3ae8 <_dtoa_r+0x10e4>
    3f48:	d8800b17 	ldw	r2,44(sp)
    3f4c:	00bc820e 	bge	zero,r2,3158 <_dtoa_r+0x754>
    3f50:	900b883a 	mov	r5,r18
    3f54:	a009883a 	mov	r4,r20
    3f58:	000d883a 	mov	r6,zero
    3f5c:	01d00934 	movhi	r7,16420
    3f60:	000be9c0 	call	be9c <__muldf3>
    3f64:	81000044 	addi	r4,r16,1
    3f68:	1029883a 	mov	r20,r2
    3f6c:	1825883a 	mov	r18,r3
    3f70:	d8800a15 	stw	r2,40(sp)
    3f74:	000cef00 	call	cef0 <__floatsidf>
    3f78:	a00d883a 	mov	r6,r20
    3f7c:	900f883a 	mov	r7,r18
    3f80:	1009883a 	mov	r4,r2
    3f84:	180b883a 	mov	r5,r3
    3f88:	000be9c0 	call	be9c <__muldf3>
    3f8c:	1009883a 	mov	r4,r2
    3f90:	000d883a 	mov	r6,zero
    3f94:	01d00734 	movhi	r7,16412
    3f98:	180b883a 	mov	r5,r3
    3f9c:	000ab0c0 	call	ab0c <__adddf3>
    3fa0:	d9000617 	ldw	r4,24(sp)
    3fa4:	1029883a 	mov	r20,r2
    3fa8:	00bf3034 	movhi	r2,64704
    3fac:	1887883a 	add	r3,r3,r2
    3fb0:	d8800b17 	ldw	r2,44(sp)
    3fb4:	213fffc4 	addi	r4,r4,-1
    3fb8:	d9001015 	stw	r4,64(sp)
    3fbc:	d8c00c15 	stw	r3,48(sp)
    3fc0:	d8800d15 	stw	r2,52(sp)
    3fc4:	003baf06 	br	2e84 <_dtoa_r+0x480>
    3fc8:	00c00c44 	movi	r3,49
    3fcc:	9cc00044 	addi	r19,r19,1
    3fd0:	003c2e06 	br	308c <_dtoa_r+0x688>
    3fd4:	b0800044 	addi	r2,r22,1
    3fd8:	d8800315 	stw	r2,12(sp)
    3fdc:	00800e44 	movi	r2,57
    3fe0:	b0800005 	stb	r2,0(r22)
    3fe4:	d8800617 	ldw	r2,24(sp)
    3fe8:	8023883a 	mov	r17,r16
    3fec:	da000317 	ldw	r8,12(sp)
    3ff0:	10800044 	addi	r2,r2,1
    3ff4:	d9400117 	ldw	r5,4(sp)
    3ff8:	d8800215 	stw	r2,8(sp)
    3ffc:	9021883a 	mov	r16,r18
    4000:	01000e44 	movi	r4,57
    4004:	003d4f06 	br	3544 <_dtoa_r+0xb40>
    4008:	0029883a 	mov	r20,zero
    400c:	0021883a 	mov	r16,zero
    4010:	003e7806 	br	39f4 <_dtoa_r+0xff0>
    4014:	d8801017 	ldw	r2,64(sp)
    4018:	d9000117 	ldw	r4,4(sp)
    401c:	14c00044 	addi	r19,r2,1
    4020:	003c1106 	br	3068 <_dtoa_r+0x664>
    4024:	103f1f1e 	bne	r2,zero,3ca4 <_dtoa_r+0x12a0>
    4028:	9880004c 	andi	r2,r19,1
    402c:	103f1a1e 	bne	r2,zero,3c98 <_dtoa_r+0x1294>
    4030:	003f1c06 	br	3ca4 <_dtoa_r+0x12a0>
    4034:	d8801017 	ldw	r2,64(sp)
    4038:	ddc00c17 	ldw	r23,48(sp)
    403c:	a811883a 	mov	r8,r21
    4040:	10800044 	addi	r2,r2,1
    4044:	d8800215 	stw	r2,8(sp)
    4048:	003d5706 	br	35a8 <_dtoa_r+0xba4>
    404c:	98800e60 	cmpeqi	r2,r19,57
    4050:	103fe01e 	bne	r2,zero,3fd4 <_dtoa_r+0x15d0>
    4054:	0440010e 	bge	zero,r17,405c <_dtoa_r+0x1658>
    4058:	acc00c44 	addi	r19,r21,49
    405c:	8023883a 	mov	r17,r16
    4060:	b2000044 	addi	r8,r22,1
    4064:	003f1006 	br	3ca8 <_dtoa_r+0x12a4>
    4068:	d8800217 	ldw	r2,8(sp)
    406c:	108000c8 	cmpgei	r2,r2,3
    4070:	103e511e 	bne	r2,zero,39b8 <_dtoa_r+0xfb4>
    4074:	dd400615 	stw	r21,24(sp)
    4078:	003e1406 	br	38cc <_dtoa_r+0xec8>
    407c:	4029883a 	mov	r20,r8
    4080:	003f8006 	br	3e84 <_dtoa_r+0x1480>
    4084:	d8800217 	ldw	r2,8(sp)
    4088:	108000c8 	cmpgei	r2,r2,3
    408c:	103e4a1e 	bne	r2,zero,39b8 <_dtoa_r+0xfb4>
    4090:	d8800b17 	ldw	r2,44(sp)
    4094:	dd400615 	stw	r21,24(sp)
    4098:	d8800315 	stw	r2,12(sp)
    409c:	04bdb60e 	bge	zero,r18,3778 <_dtoa_r+0xd74>
    40a0:	003e6506 	br	3a38 <_dtoa_r+0x1034>
    40a4:	04000084 	movi	r16,2
    40a8:	003b5706 	br	2e08 <_dtoa_r+0x404>
    40ac:	01c00074 	movhi	r7,1
    40b0:	01000074 	movhi	r4,1
    40b4:	39c04b04 	addi	r7,r7,300
    40b8:	000d883a 	mov	r6,zero
    40bc:	01406a84 	movi	r5,426
    40c0:	21005004 	addi	r4,r4,320
    40c4:	00082d80 	call	82d8 <__assert_func>
    40c8:	000b883a 	mov	r5,zero
    40cc:	003b1006 	br	2d10 <_dtoa_r+0x30c>
    40d0:	e0001115 	stw	zero,68(fp)
    40d4:	000b883a 	mov	r5,zero
    40d8:	e009883a 	mov	r4,fp
    40dc:	0005a540 	call	5a54 <_Balloc>
    40e0:	d8800115 	stw	r2,4(sp)
    40e4:	103ff126 	beq	r2,zero,40ac <_dtoa_r+0x16a8>
    40e8:	d8800117 	ldw	r2,4(sp)
    40ec:	d8001d15 	stw	zero,116(sp)
    40f0:	e0801015 	stw	r2,64(fp)
    40f4:	00bfffc4 	movi	r2,-1
    40f8:	d8800315 	stw	r2,12(sp)
    40fc:	d8800b15 	stw	r2,44(sp)
    4100:	00800044 	movi	r2,1
    4104:	d8800515 	stw	r2,20(sp)
    4108:	003c1306 	br	3158 <_dtoa_r+0x754>
    410c:	01c00074 	movhi	r7,1
    4110:	01000074 	movhi	r4,1
    4114:	39c04b04 	addi	r7,r7,300
    4118:	000d883a 	mov	r6,zero
    411c:	0140ba84 	movi	r5,746
    4120:	21005004 	addi	r4,r4,320
    4124:	00082d80 	call	82d8 <__assert_func>
    4128:	00800074 	movhi	r2,1
    412c:	10804804 	addi	r2,r2,288
    4130:	d8800115 	stw	r2,4(sp)
    4134:	003a6506 	br	2acc <_dtoa_r+0xc8>
    4138:	18c00120 	cmpeqi	r3,r3,4
    413c:	183cc81e 	bne	r3,zero,3460 <_dtoa_r+0xa5c>
    4140:	00c00f04 	movi	r3,60
    4144:	1885c83a 	sub	r2,r3,r2
    4148:	003cc006 	br	344c <_dtoa_r+0xa48>

0000414c <__sflush_r>:
    414c:	2880030b 	ldhu	r2,12(r5)
    4150:	defffb04 	addi	sp,sp,-20
    4154:	dcc00315 	stw	r19,12(sp)
    4158:	dc000015 	stw	r16,0(sp)
    415c:	dfc00415 	stw	ra,16(sp)
    4160:	dc800215 	stw	r18,8(sp)
    4164:	dc400115 	stw	r17,4(sp)
    4168:	10c0020c 	andi	r3,r2,8
    416c:	2821883a 	mov	r16,r5
    4170:	2027883a 	mov	r19,r4
    4174:	18003f1e 	bne	r3,zero,4274 <__sflush_r+0x128>
    4178:	28c00117 	ldw	r3,4(r5)
    417c:	10820014 	ori	r2,r2,2048
    4180:	2880030d 	sth	r2,12(r5)
    4184:	00c0550e 	bge	zero,r3,42dc <__sflush_r+0x190>
    4188:	82000a17 	ldw	r8,40(r16)
    418c:	40003126 	beq	r8,zero,4254 <__sflush_r+0x108>
    4190:	9c400017 	ldw	r17,0(r19)
    4194:	1104000c 	andi	r4,r2,4096
    4198:	98000015 	stw	zero,0(r19)
    419c:	1007883a 	mov	r3,r2
    41a0:	2000531e 	bne	r4,zero,42f0 <__sflush_r+0x1a4>
    41a4:	81400717 	ldw	r5,28(r16)
    41a8:	01c00044 	movi	r7,1
    41ac:	000d883a 	mov	r6,zero
    41b0:	9809883a 	mov	r4,r19
    41b4:	403ee83a 	callr	r8
    41b8:	10ffffd8 	cmpnei	r3,r2,-1
    41bc:	18005826 	beq	r3,zero,4320 <__sflush_r+0x1d4>
    41c0:	80c0030b 	ldhu	r3,12(r16)
    41c4:	82000a17 	ldw	r8,40(r16)
    41c8:	18c0010c 	andi	r3,r3,4
    41cc:	18000626 	beq	r3,zero,41e8 <__sflush_r+0x9c>
    41d0:	81000117 	ldw	r4,4(r16)
    41d4:	80c00c17 	ldw	r3,48(r16)
    41d8:	1105c83a 	sub	r2,r2,r4
    41dc:	18000226 	beq	r3,zero,41e8 <__sflush_r+0x9c>
    41e0:	80c00f17 	ldw	r3,60(r16)
    41e4:	10c5c83a 	sub	r2,r2,r3
    41e8:	81400717 	ldw	r5,28(r16)
    41ec:	100d883a 	mov	r6,r2
    41f0:	000f883a 	mov	r7,zero
    41f4:	9809883a 	mov	r4,r19
    41f8:	403ee83a 	callr	r8
    41fc:	10ffffd8 	cmpnei	r3,r2,-1
    4200:	18003d1e 	bne	r3,zero,42f8 <__sflush_r+0x1ac>
    4204:	99000017 	ldw	r4,0(r19)
    4208:	80c0030b 	ldhu	r3,12(r16)
    420c:	20004e26 	beq	r4,zero,4348 <__sflush_r+0x1fc>
    4210:	21400760 	cmpeqi	r5,r4,29
    4214:	2800021e 	bne	r5,zero,4220 <__sflush_r+0xd4>
    4218:	210005a0 	cmpeqi	r4,r4,22
    421c:	20002c26 	beq	r4,zero,42d0 <__sflush_r+0x184>
    4220:	80800417 	ldw	r2,16(r16)
    4224:	18fdffcc 	andi	r3,r3,63487
    4228:	80c0030d 	sth	r3,12(r16)
    422c:	80000115 	stw	zero,4(r16)
    4230:	80800015 	stw	r2,0(r16)
    4234:	81400c17 	ldw	r5,48(r16)
    4238:	9c400015 	stw	r17,0(r19)
    423c:	28000526 	beq	r5,zero,4254 <__sflush_r+0x108>
    4240:	80801004 	addi	r2,r16,64
    4244:	28800226 	beq	r5,r2,4250 <__sflush_r+0x104>
    4248:	9809883a 	mov	r4,r19
    424c:	00049100 	call	4910 <_free_r>
    4250:	80000c15 	stw	zero,48(r16)
    4254:	0005883a 	mov	r2,zero
    4258:	dfc00417 	ldw	ra,16(sp)
    425c:	dcc00317 	ldw	r19,12(sp)
    4260:	dc800217 	ldw	r18,8(sp)
    4264:	dc400117 	ldw	r17,4(sp)
    4268:	dc000017 	ldw	r16,0(sp)
    426c:	dec00504 	addi	sp,sp,20
    4270:	f800283a 	ret
    4274:	2c800417 	ldw	r18,16(r5)
    4278:	903ff626 	beq	r18,zero,4254 <__sflush_r+0x108>
    427c:	2c400017 	ldw	r17,0(r5)
    4280:	108000cc 	andi	r2,r2,3
    4284:	2c800015 	stw	r18,0(r5)
    4288:	8ca3c83a 	sub	r17,r17,r18
    428c:	1000161e 	bne	r2,zero,42e8 <__sflush_r+0x19c>
    4290:	28800517 	ldw	r2,20(r5)
    4294:	80800215 	stw	r2,8(r16)
    4298:	04400316 	blt	zero,r17,42a8 <__sflush_r+0x15c>
    429c:	003fed06 	br	4254 <__sflush_r+0x108>
    42a0:	90a5883a 	add	r18,r18,r2
    42a4:	047feb0e 	bge	zero,r17,4254 <__sflush_r+0x108>
    42a8:	80800917 	ldw	r2,36(r16)
    42ac:	81400717 	ldw	r5,28(r16)
    42b0:	880f883a 	mov	r7,r17
    42b4:	900d883a 	mov	r6,r18
    42b8:	9809883a 	mov	r4,r19
    42bc:	103ee83a 	callr	r2
    42c0:	88a3c83a 	sub	r17,r17,r2
    42c4:	00bff616 	blt	zero,r2,42a0 <__sflush_r+0x154>
    42c8:	80c0030b 	ldhu	r3,12(r16)
    42cc:	00bfffc4 	movi	r2,-1
    42d0:	18c01014 	ori	r3,r3,64
    42d4:	80c0030d 	sth	r3,12(r16)
    42d8:	003fdf06 	br	4258 <__sflush_r+0x10c>
    42dc:	28c00f17 	ldw	r3,60(r5)
    42e0:	00ffa916 	blt	zero,r3,4188 <__sflush_r+0x3c>
    42e4:	003fdb06 	br	4254 <__sflush_r+0x108>
    42e8:	0005883a 	mov	r2,zero
    42ec:	003fe906 	br	4294 <__sflush_r+0x148>
    42f0:	80801417 	ldw	r2,80(r16)
    42f4:	003fb406 	br	41c8 <__sflush_r+0x7c>
    42f8:	80c0030b 	ldhu	r3,12(r16)
    42fc:	81000417 	ldw	r4,16(r16)
    4300:	80000115 	stw	zero,4(r16)
    4304:	197dffcc 	andi	r5,r3,63487
    4308:	8140030d 	sth	r5,12(r16)
    430c:	81000015 	stw	r4,0(r16)
    4310:	18c4000c 	andi	r3,r3,4096
    4314:	183fc726 	beq	r3,zero,4234 <__sflush_r+0xe8>
    4318:	80801415 	stw	r2,80(r16)
    431c:	003fc506 	br	4234 <__sflush_r+0xe8>
    4320:	98c00017 	ldw	r3,0(r19)
    4324:	183fa626 	beq	r3,zero,41c0 <__sflush_r+0x74>
    4328:	19000760 	cmpeqi	r4,r3,29
    432c:	20000e1e 	bne	r4,zero,4368 <__sflush_r+0x21c>
    4330:	18c00598 	cmpnei	r3,r3,22
    4334:	18000c26 	beq	r3,zero,4368 <__sflush_r+0x21c>
    4338:	80c0030b 	ldhu	r3,12(r16)
    433c:	18c01014 	ori	r3,r3,64
    4340:	80c0030d 	sth	r3,12(r16)
    4344:	003fc406 	br	4258 <__sflush_r+0x10c>
    4348:	81000417 	ldw	r4,16(r16)
    434c:	197dffcc 	andi	r5,r3,63487
    4350:	8140030d 	sth	r5,12(r16)
    4354:	80000115 	stw	zero,4(r16)
    4358:	81000015 	stw	r4,0(r16)
    435c:	18c4000c 	andi	r3,r3,4096
    4360:	183fb426 	beq	r3,zero,4234 <__sflush_r+0xe8>
    4364:	003fec06 	br	4318 <__sflush_r+0x1cc>
    4368:	9c400015 	stw	r17,0(r19)
    436c:	0005883a 	mov	r2,zero
    4370:	003fb906 	br	4258 <__sflush_r+0x10c>

00004374 <_fflush_r>:
    4374:	defffd04 	addi	sp,sp,-12
    4378:	dc000115 	stw	r16,4(sp)
    437c:	dfc00215 	stw	ra,8(sp)
    4380:	2021883a 	mov	r16,r4
    4384:	20000226 	beq	r4,zero,4390 <_fflush_r+0x1c>
    4388:	20800e17 	ldw	r2,56(r4)
    438c:	10000726 	beq	r2,zero,43ac <_fflush_r+0x38>
    4390:	2880030f 	ldh	r2,12(r5)
    4394:	10000a1e 	bne	r2,zero,43c0 <_fflush_r+0x4c>
    4398:	0005883a 	mov	r2,zero
    439c:	dfc00217 	ldw	ra,8(sp)
    43a0:	dc000117 	ldw	r16,4(sp)
    43a4:	dec00304 	addi	sp,sp,12
    43a8:	f800283a 	ret
    43ac:	d9400015 	stw	r5,0(sp)
    43b0:	00047ac0 	call	47ac <__sinit>
    43b4:	d9400017 	ldw	r5,0(sp)
    43b8:	2880030f 	ldh	r2,12(r5)
    43bc:	103ff626 	beq	r2,zero,4398 <_fflush_r+0x24>
    43c0:	8009883a 	mov	r4,r16
    43c4:	dfc00217 	ldw	ra,8(sp)
    43c8:	dc000117 	ldw	r16,4(sp)
    43cc:	dec00304 	addi	sp,sp,12
    43d0:	000414c1 	jmpi	414c <__sflush_r>

000043d4 <fflush>:
    43d4:	20001726 	beq	r4,zero,4434 <fflush+0x60>
    43d8:	00800074 	movhi	r2,1
    43dc:	200b883a 	mov	r5,r4
    43e0:	1108ed17 	ldw	r4,9140(r2)
    43e4:	20000226 	beq	r4,zero,43f0 <fflush+0x1c>
    43e8:	20800e17 	ldw	r2,56(r4)
    43ec:	10000526 	beq	r2,zero,4404 <fflush+0x30>
    43f0:	2880030f 	ldh	r2,12(r5)
    43f4:	1000021e 	bne	r2,zero,4400 <fflush+0x2c>
    43f8:	0005883a 	mov	r2,zero
    43fc:	f800283a 	ret
    4400:	000414c1 	jmpi	414c <__sflush_r>
    4404:	defffd04 	addi	sp,sp,-12
    4408:	d9400115 	stw	r5,4(sp)
    440c:	d9000015 	stw	r4,0(sp)
    4410:	dfc00215 	stw	ra,8(sp)
    4414:	00047ac0 	call	47ac <__sinit>
    4418:	d9400117 	ldw	r5,4(sp)
    441c:	d9000017 	ldw	r4,0(sp)
    4420:	2880030f 	ldh	r2,12(r5)
    4424:	10000826 	beq	r2,zero,4448 <fflush+0x74>
    4428:	dfc00217 	ldw	ra,8(sp)
    442c:	dec00304 	addi	sp,sp,12
    4430:	000414c1 	jmpi	414c <__sflush_r>
    4434:	00800074 	movhi	r2,1
    4438:	1108ec17 	ldw	r4,9136(r2)
    443c:	01400034 	movhi	r5,0
    4440:	2950dd04 	addi	r5,r5,17268
    4444:	0004ca41 	jmpi	4ca4 <_fwalk_reent>
    4448:	0005883a 	mov	r2,zero
    444c:	dfc00217 	ldw	ra,8(sp)
    4450:	dec00304 	addi	sp,sp,12
    4454:	f800283a 	ret

00004458 <__fp_lock>:
    4458:	0005883a 	mov	r2,zero
    445c:	f800283a 	ret

00004460 <_cleanup_r>:
    4460:	01400074 	movhi	r5,1
    4464:	29613e04 	addi	r5,r5,-31496
    4468:	0004ca41 	jmpi	4ca4 <_fwalk_reent>

0000446c <__fp_unlock>:
    446c:	0005883a 	mov	r2,zero
    4470:	f800283a 	ret

00004474 <__sinit.part.0>:
    4474:	00c00034 	movhi	r3,0
    4478:	20800117 	ldw	r2,4(r4)
    447c:	18d11804 	addi	r3,r3,17504
    4480:	20c00f15 	stw	r3,60(r4)
    4484:	2140bb04 	addi	r5,r4,748
    4488:	00c000c4 	movi	r3,3
    448c:	20c0b915 	stw	r3,740(r4)
    4490:	2140ba15 	stw	r5,744(r4)
    4494:	2000b815 	stw	zero,736(r4)
    4498:	10001705 	stb	zero,92(r2)
    449c:	10001745 	stb	zero,93(r2)
    44a0:	10001785 	stb	zero,94(r2)
    44a4:	100017c5 	stb	zero,95(r2)
    44a8:	10001805 	stb	zero,96(r2)
    44ac:	10001845 	stb	zero,97(r2)
    44b0:	10001885 	stb	zero,98(r2)
    44b4:	100018c5 	stb	zero,99(r2)
    44b8:	00c00104 	movi	r3,4
    44bc:	10c00315 	stw	r3,12(r2)
    44c0:	02000034 	movhi	r8,0
    44c4:	20c00217 	ldw	r3,8(r4)
    44c8:	01c00034 	movhi	r7,0
    44cc:	01800034 	movhi	r6,0
    44d0:	01400034 	movhi	r5,0
    44d4:	421b0304 	addi	r8,r8,27660
    44d8:	39db1a04 	addi	r7,r7,27752
    44dc:	319b3a04 	addi	r6,r6,27880
    44e0:	295b5104 	addi	r5,r5,27972
    44e4:	02400074 	movhi	r9,1
    44e8:	10001915 	stw	zero,100(r2)
    44ec:	10000015 	stw	zero,0(r2)
    44f0:	10000115 	stw	zero,4(r2)
    44f4:	10000215 	stw	zero,8(r2)
    44f8:	10000415 	stw	zero,16(r2)
    44fc:	10000515 	stw	zero,20(r2)
    4500:	10000615 	stw	zero,24(r2)
    4504:	10800715 	stw	r2,28(r2)
    4508:	12000815 	stw	r8,32(r2)
    450c:	11c00915 	stw	r7,36(r2)
    4510:	11800a15 	stw	r6,40(r2)
    4514:	11400b15 	stw	r5,44(r2)
    4518:	4a400284 	addi	r9,r9,10
    451c:	1a400315 	stw	r9,12(r3)
    4520:	18001915 	stw	zero,100(r3)
    4524:	18000015 	stw	zero,0(r3)
    4528:	18000115 	stw	zero,4(r3)
    452c:	18000215 	stw	zero,8(r3)
    4530:	18000415 	stw	zero,16(r3)
    4534:	18001705 	stb	zero,92(r3)
    4538:	18001745 	stb	zero,93(r3)
    453c:	18001785 	stb	zero,94(r3)
    4540:	180017c5 	stb	zero,95(r3)
    4544:	18001805 	stb	zero,96(r3)
    4548:	18001845 	stb	zero,97(r3)
    454c:	18001885 	stb	zero,98(r3)
    4550:	180018c5 	stb	zero,99(r3)
    4554:	20800317 	ldw	r2,12(r4)
    4558:	024000b4 	movhi	r9,2
    455c:	18000515 	stw	zero,20(r3)
    4560:	18000615 	stw	zero,24(r3)
    4564:	18c00715 	stw	r3,28(r3)
    4568:	1a000815 	stw	r8,32(r3)
    456c:	19c00915 	stw	r7,36(r3)
    4570:	19800a15 	stw	r6,40(r3)
    4574:	19400b15 	stw	r5,44(r3)
    4578:	4a400484 	addi	r9,r9,18
    457c:	10001915 	stw	zero,100(r2)
    4580:	10000015 	stw	zero,0(r2)
    4584:	10000115 	stw	zero,4(r2)
    4588:	10000215 	stw	zero,8(r2)
    458c:	12400315 	stw	r9,12(r2)
    4590:	10000415 	stw	zero,16(r2)
    4594:	10000515 	stw	zero,20(r2)
    4598:	10000615 	stw	zero,24(r2)
    459c:	10001705 	stb	zero,92(r2)
    45a0:	10001745 	stb	zero,93(r2)
    45a4:	10001785 	stb	zero,94(r2)
    45a8:	100017c5 	stb	zero,95(r2)
    45ac:	10001805 	stb	zero,96(r2)
    45b0:	10001845 	stb	zero,97(r2)
    45b4:	10001885 	stb	zero,98(r2)
    45b8:	100018c5 	stb	zero,99(r2)
    45bc:	10800715 	stw	r2,28(r2)
    45c0:	12000815 	stw	r8,32(r2)
    45c4:	11c00915 	stw	r7,36(r2)
    45c8:	11800a15 	stw	r6,40(r2)
    45cc:	11400b15 	stw	r5,44(r2)
    45d0:	00800044 	movi	r2,1
    45d4:	20800e15 	stw	r2,56(r4)
    45d8:	f800283a 	ret

000045dc <__sfmoreglue>:
    45dc:	defffc04 	addi	sp,sp,-16
    45e0:	dc400115 	stw	r17,4(sp)
    45e4:	2c7fffc4 	addi	r17,r5,-1
    45e8:	8c401a24 	muli	r17,r17,104
    45ec:	dc800215 	stw	r18,8(sp)
    45f0:	2825883a 	mov	r18,r5
    45f4:	89401d04 	addi	r5,r17,116
    45f8:	dc000015 	stw	r16,0(sp)
    45fc:	dfc00315 	stw	ra,12(sp)
    4600:	0004fb40 	call	4fb4 <_malloc_r>
    4604:	1021883a 	mov	r16,r2
    4608:	10000726 	beq	r2,zero,4628 <__sfmoreglue+0x4c>
    460c:	11000304 	addi	r4,r2,12
    4610:	10000015 	stw	zero,0(r2)
    4614:	14800115 	stw	r18,4(r2)
    4618:	11000215 	stw	r4,8(r2)
    461c:	89801a04 	addi	r6,r17,104
    4620:	000b883a 	mov	r5,zero
    4624:	00059640 	call	5964 <memset>
    4628:	8005883a 	mov	r2,r16
    462c:	dfc00317 	ldw	ra,12(sp)
    4630:	dc800217 	ldw	r18,8(sp)
    4634:	dc400117 	ldw	r17,4(sp)
    4638:	dc000017 	ldw	r16,0(sp)
    463c:	dec00404 	addi	sp,sp,16
    4640:	f800283a 	ret

00004644 <__sfp>:
    4644:	defffb04 	addi	sp,sp,-20
    4648:	00800074 	movhi	r2,1
    464c:	dc000015 	stw	r16,0(sp)
    4650:	1408ec17 	ldw	r16,9136(r2)
    4654:	dc400115 	stw	r17,4(sp)
    4658:	dfc00415 	stw	ra,16(sp)
    465c:	80800e17 	ldw	r2,56(r16)
    4660:	dcc00315 	stw	r19,12(sp)
    4664:	dc800215 	stw	r18,8(sp)
    4668:	2023883a 	mov	r17,r4
    466c:	10003126 	beq	r2,zero,4734 <__sfp+0xf0>
    4670:	8100ba17 	ldw	r4,744(r16)
    4674:	8140b917 	ldw	r5,740(r16)
    4678:	04c00104 	movi	r19,4
    467c:	8400b804 	addi	r16,r16,736
    4680:	297fffc4 	addi	r5,r5,-1
    4684:	2800050e 	bge	r5,zero,469c <__sfp+0x58>
    4688:	00002406 	br	471c <__sfp+0xd8>
    468c:	297fffc4 	addi	r5,r5,-1
    4690:	28bfffd8 	cmpnei	r2,r5,-1
    4694:	21001a04 	addi	r4,r4,104
    4698:	10002026 	beq	r2,zero,471c <__sfp+0xd8>
    469c:	2080030f 	ldh	r2,12(r4)
    46a0:	103ffa1e 	bne	r2,zero,468c <__sfp+0x48>
    46a4:	00bffff4 	movhi	r2,65535
    46a8:	10800044 	addi	r2,r2,1
    46ac:	20001915 	stw	zero,100(r4)
    46b0:	20000015 	stw	zero,0(r4)
    46b4:	20000115 	stw	zero,4(r4)
    46b8:	20000215 	stw	zero,8(r4)
    46bc:	20800315 	stw	r2,12(r4)
    46c0:	20000415 	stw	zero,16(r4)
    46c4:	20000515 	stw	zero,20(r4)
    46c8:	20000615 	stw	zero,24(r4)
    46cc:	20001705 	stb	zero,92(r4)
    46d0:	20001745 	stb	zero,93(r4)
    46d4:	20001785 	stb	zero,94(r4)
    46d8:	200017c5 	stb	zero,95(r4)
    46dc:	20001805 	stb	zero,96(r4)
    46e0:	20001845 	stb	zero,97(r4)
    46e4:	20001885 	stb	zero,98(r4)
    46e8:	200018c5 	stb	zero,99(r4)
    46ec:	20000c15 	stw	zero,48(r4)
    46f0:	20000d15 	stw	zero,52(r4)
    46f4:	20001115 	stw	zero,68(r4)
    46f8:	20001215 	stw	zero,72(r4)
    46fc:	2005883a 	mov	r2,r4
    4700:	dfc00417 	ldw	ra,16(sp)
    4704:	dcc00317 	ldw	r19,12(sp)
    4708:	dc800217 	ldw	r18,8(sp)
    470c:	dc400117 	ldw	r17,4(sp)
    4710:	dc000017 	ldw	r16,0(sp)
    4714:	dec00504 	addi	sp,sp,20
    4718:	f800283a 	ret
    471c:	80800017 	ldw	r2,0(r16)
    4720:	10000726 	beq	r2,zero,4740 <__sfp+0xfc>
    4724:	11000217 	ldw	r4,8(r2)
    4728:	11400117 	ldw	r5,4(r2)
    472c:	1021883a 	mov	r16,r2
    4730:	003fd306 	br	4680 <__sfp+0x3c>
    4734:	8009883a 	mov	r4,r16
    4738:	00044740 	call	4474 <__sinit.part.0>
    473c:	003fcc06 	br	4670 <__sfp+0x2c>
    4740:	01406b04 	movi	r5,428
    4744:	8809883a 	mov	r4,r17
    4748:	0004fb40 	call	4fb4 <_malloc_r>
    474c:	1025883a 	mov	r18,r2
    4750:	10000c26 	beq	r2,zero,4784 <__sfp+0x140>
    4754:	11000304 	addi	r4,r2,12
    4758:	11000215 	stw	r4,8(r2)
    475c:	000b883a 	mov	r5,zero
    4760:	10000015 	stw	zero,0(r2)
    4764:	14c00115 	stw	r19,4(r2)
    4768:	01806804 	movi	r6,416
    476c:	00059640 	call	5964 <memset>
    4770:	1009883a 	mov	r4,r2
    4774:	84800015 	stw	r18,0(r16)
    4778:	014000c4 	movi	r5,3
    477c:	9021883a 	mov	r16,r18
    4780:	003fc606 	br	469c <__sfp+0x58>
    4784:	80000015 	stw	zero,0(r16)
    4788:	00800304 	movi	r2,12
    478c:	88800015 	stw	r2,0(r17)
    4790:	0009883a 	mov	r4,zero
    4794:	003fd906 	br	46fc <__sfp+0xb8>

00004798 <_cleanup>:
    4798:	00800074 	movhi	r2,1
    479c:	1108ec17 	ldw	r4,9136(r2)
    47a0:	01400074 	movhi	r5,1
    47a4:	29613e04 	addi	r5,r5,-31496
    47a8:	0004ca41 	jmpi	4ca4 <_fwalk_reent>

000047ac <__sinit>:
    47ac:	20800e17 	ldw	r2,56(r4)
    47b0:	10000126 	beq	r2,zero,47b8 <__sinit+0xc>
    47b4:	f800283a 	ret
    47b8:	00044741 	jmpi	4474 <__sinit.part.0>

000047bc <__sfp_lock_acquire>:
    47bc:	f800283a 	ret

000047c0 <__sfp_lock_release>:
    47c0:	f800283a 	ret

000047c4 <__sinit_lock_acquire>:
    47c4:	f800283a 	ret

000047c8 <__sinit_lock_release>:
    47c8:	f800283a 	ret

000047cc <__fp_lock_all>:
    47cc:	00800074 	movhi	r2,1
    47d0:	1108ed17 	ldw	r4,9140(r2)
    47d4:	01400034 	movhi	r5,0
    47d8:	29511604 	addi	r5,r5,17496
    47dc:	0004c0c1 	jmpi	4c0c <_fwalk>

000047e0 <__fp_unlock_all>:
    47e0:	00800074 	movhi	r2,1
    47e4:	1108ed17 	ldw	r4,9140(r2)
    47e8:	01400034 	movhi	r5,0
    47ec:	29511b04 	addi	r5,r5,17516
    47f0:	0004c0c1 	jmpi	4c0c <_fwalk>

000047f4 <_malloc_trim_r>:
    47f4:	defffb04 	addi	sp,sp,-20
    47f8:	dcc00315 	stw	r19,12(sp)
    47fc:	04c00074 	movhi	r19,1
    4800:	dc800215 	stw	r18,8(sp)
    4804:	dc400115 	stw	r17,4(sp)
    4808:	dc000015 	stw	r16,0(sp)
    480c:	dfc00415 	stw	ra,16(sp)
    4810:	2821883a 	mov	r16,r5
    4814:	9cc2df04 	addi	r19,r19,2940
    4818:	2025883a 	mov	r18,r4
    481c:	000d7c80 	call	d7c8 <__malloc_lock>
    4820:	98800217 	ldw	r2,8(r19)
    4824:	14400117 	ldw	r17,4(r2)
    4828:	00bfff04 	movi	r2,-4
    482c:	88a2703a 	and	r17,r17,r2
    4830:	8c21c83a 	sub	r16,r17,r16
    4834:	8403fbc4 	addi	r16,r16,4079
    4838:	8020d33a 	srli	r16,r16,12
    483c:	843fffc4 	addi	r16,r16,-1
    4840:	8020933a 	slli	r16,r16,12
    4844:	80840008 	cmpgei	r2,r16,4096
    4848:	10000626 	beq	r2,zero,4864 <_malloc_trim_r+0x70>
    484c:	000b883a 	mov	r5,zero
    4850:	9009883a 	mov	r4,r18
    4854:	0006bb40 	call	6bb4 <_sbrk_r>
    4858:	98c00217 	ldw	r3,8(r19)
    485c:	1c47883a 	add	r3,r3,r17
    4860:	10c00a26 	beq	r2,r3,488c <_malloc_trim_r+0x98>
    4864:	9009883a 	mov	r4,r18
    4868:	000d7ec0 	call	d7ec <__malloc_unlock>
    486c:	0005883a 	mov	r2,zero
    4870:	dfc00417 	ldw	ra,16(sp)
    4874:	dcc00317 	ldw	r19,12(sp)
    4878:	dc800217 	ldw	r18,8(sp)
    487c:	dc400117 	ldw	r17,4(sp)
    4880:	dc000017 	ldw	r16,0(sp)
    4884:	dec00504 	addi	sp,sp,20
    4888:	f800283a 	ret
    488c:	040bc83a 	sub	r5,zero,r16
    4890:	9009883a 	mov	r4,r18
    4894:	0006bb40 	call	6bb4 <_sbrk_r>
    4898:	10bfffd8 	cmpnei	r2,r2,-1
    489c:	10000d26 	beq	r2,zero,48d4 <_malloc_trim_r+0xe0>
    48a0:	00800074 	movhi	r2,1
    48a4:	10902b17 	ldw	r2,16556(r2)
    48a8:	98c00217 	ldw	r3,8(r19)
    48ac:	8c23c83a 	sub	r17,r17,r16
    48b0:	8c400054 	ori	r17,r17,1
    48b4:	1421c83a 	sub	r16,r2,r16
    48b8:	1c400115 	stw	r17,4(r3)
    48bc:	00800074 	movhi	r2,1
    48c0:	9009883a 	mov	r4,r18
    48c4:	14102b15 	stw	r16,16556(r2)
    48c8:	000d7ec0 	call	d7ec <__malloc_unlock>
    48cc:	00800044 	movi	r2,1
    48d0:	003fe706 	br	4870 <_malloc_trim_r+0x7c>
    48d4:	000b883a 	mov	r5,zero
    48d8:	9009883a 	mov	r4,r18
    48dc:	0006bb40 	call	6bb4 <_sbrk_r>
    48e0:	99000217 	ldw	r4,8(r19)
    48e4:	1107c83a 	sub	r3,r2,r4
    48e8:	19400410 	cmplti	r5,r3,16
    48ec:	283fdd1e 	bne	r5,zero,4864 <_malloc_trim_r+0x70>
    48f0:	01400074 	movhi	r5,1
    48f4:	2948ee17 	ldw	r5,9144(r5)
    48f8:	18c00054 	ori	r3,r3,1
    48fc:	20c00115 	stw	r3,4(r4)
    4900:	1145c83a 	sub	r2,r2,r5
    4904:	01400074 	movhi	r5,1
    4908:	28902b15 	stw	r2,16556(r5)
    490c:	003fd506 	br	4864 <_malloc_trim_r+0x70>

00004910 <_free_r>:
    4910:	28004f26 	beq	r5,zero,4a50 <_free_r+0x140>
    4914:	defffd04 	addi	sp,sp,-12
    4918:	dc400115 	stw	r17,4(sp)
    491c:	dc000015 	stw	r16,0(sp)
    4920:	2023883a 	mov	r17,r4
    4924:	2821883a 	mov	r16,r5
    4928:	dfc00215 	stw	ra,8(sp)
    492c:	000d7c80 	call	d7c8 <__malloc_lock>
    4930:	81ffff17 	ldw	r7,-4(r16)
    4934:	00bfff84 	movi	r2,-2
    4938:	80fffe04 	addi	r3,r16,-8
    493c:	3884703a 	and	r2,r7,r2
    4940:	01000074 	movhi	r4,1
    4944:	188d883a 	add	r6,r3,r2
    4948:	2102df04 	addi	r4,r4,2940
    494c:	31400117 	ldw	r5,4(r6)
    4950:	22000217 	ldw	r8,8(r4)
    4954:	027fff04 	movi	r9,-4
    4958:	2a4a703a 	and	r5,r5,r9
    495c:	41806426 	beq	r8,r6,4af0 <_free_r+0x1e0>
    4960:	31400115 	stw	r5,4(r6)
    4964:	39c0004c 	andi	r7,r7,1
    4968:	3151883a 	add	r8,r6,r5
    496c:	3800281e 	bne	r7,zero,4a10 <_free_r+0x100>
    4970:	82bffe17 	ldw	r10,-8(r16)
    4974:	42000117 	ldw	r8,4(r8)
    4978:	01c00074 	movhi	r7,1
    497c:	1a87c83a 	sub	r3,r3,r10
    4980:	1a400217 	ldw	r9,8(r3)
    4984:	39c2e104 	addi	r7,r7,2948
    4988:	1285883a 	add	r2,r2,r10
    498c:	4200004c 	andi	r8,r8,1
    4990:	49c04c26 	beq	r9,r7,4ac4 <_free_r+0x1b4>
    4994:	1a800317 	ldw	r10,12(r3)
    4998:	4a800315 	stw	r10,12(r9)
    499c:	52400215 	stw	r9,8(r10)
    49a0:	40007126 	beq	r8,zero,4b68 <_free_r+0x258>
    49a4:	11400054 	ori	r5,r2,1
    49a8:	19400115 	stw	r5,4(r3)
    49ac:	30800015 	stw	r2,0(r6)
    49b0:	11408028 	cmpgeui	r5,r2,512
    49b4:	28002c1e 	bne	r5,zero,4a68 <_free_r+0x158>
    49b8:	100ad0fa 	srli	r5,r2,3
    49bc:	100cd17a 	srli	r6,r2,5
    49c0:	00800044 	movi	r2,1
    49c4:	29400044 	addi	r5,r5,1
    49c8:	280a90fa 	slli	r5,r5,3
    49cc:	21c00117 	ldw	r7,4(r4)
    49d0:	1184983a 	sll	r2,r2,r6
    49d4:	214b883a 	add	r5,r4,r5
    49d8:	29800017 	ldw	r6,0(r5)
    49dc:	11c4b03a 	or	r2,r2,r7
    49e0:	29fffe04 	addi	r7,r5,-8
    49e4:	19c00315 	stw	r7,12(r3)
    49e8:	19800215 	stw	r6,8(r3)
    49ec:	20800115 	stw	r2,4(r4)
    49f0:	28c00015 	stw	r3,0(r5)
    49f4:	30c00315 	stw	r3,12(r6)
    49f8:	8809883a 	mov	r4,r17
    49fc:	dfc00217 	ldw	ra,8(sp)
    4a00:	dc400117 	ldw	r17,4(sp)
    4a04:	dc000017 	ldw	r16,0(sp)
    4a08:	dec00304 	addi	sp,sp,12
    4a0c:	000d7ec1 	jmpi	d7ec <__malloc_unlock>
    4a10:	41c00117 	ldw	r7,4(r8)
    4a14:	39c0004c 	andi	r7,r7,1
    4a18:	38000e1e 	bne	r7,zero,4a54 <_free_r+0x144>
    4a1c:	01c00074 	movhi	r7,1
    4a20:	1145883a 	add	r2,r2,r5
    4a24:	39c2e104 	addi	r7,r7,2948
    4a28:	31400217 	ldw	r5,8(r6)
    4a2c:	12400054 	ori	r9,r2,1
    4a30:	1891883a 	add	r8,r3,r2
    4a34:	29c05226 	beq	r5,r7,4b80 <_free_r+0x270>
    4a38:	31800317 	ldw	r6,12(r6)
    4a3c:	29800315 	stw	r6,12(r5)
    4a40:	31400215 	stw	r5,8(r6)
    4a44:	1a400115 	stw	r9,4(r3)
    4a48:	40800015 	stw	r2,0(r8)
    4a4c:	003fd806 	br	49b0 <_free_r+0xa0>
    4a50:	f800283a 	ret
    4a54:	11400054 	ori	r5,r2,1
    4a58:	817fff15 	stw	r5,-4(r16)
    4a5c:	30800015 	stw	r2,0(r6)
    4a60:	11408028 	cmpgeui	r5,r2,512
    4a64:	283fd426 	beq	r5,zero,49b8 <_free_r+0xa8>
    4a68:	100ad27a 	srli	r5,r2,9
    4a6c:	29800168 	cmpgeui	r6,r5,5
    4a70:	3000341e 	bne	r6,zero,4b44 <_free_r+0x234>
    4a74:	100ad1ba 	srli	r5,r2,6
    4a78:	29800e44 	addi	r6,r5,57
    4a7c:	300c90fa 	slli	r6,r6,3
    4a80:	29c00e04 	addi	r7,r5,56
    4a84:	218d883a 	add	r6,r4,r6
    4a88:	31400017 	ldw	r5,0(r6)
    4a8c:	31bffe04 	addi	r6,r6,-8
    4a90:	31404226 	beq	r6,r5,4b9c <_free_r+0x28c>
    4a94:	01ffff04 	movi	r7,-4
    4a98:	29000117 	ldw	r4,4(r5)
    4a9c:	21c8703a 	and	r4,r4,r7
    4aa0:	1100022e 	bgeu	r2,r4,4aac <_free_r+0x19c>
    4aa4:	29400217 	ldw	r5,8(r5)
    4aa8:	317ffb1e 	bne	r6,r5,4a98 <_free_r+0x188>
    4aac:	29800317 	ldw	r6,12(r5)
    4ab0:	19800315 	stw	r6,12(r3)
    4ab4:	19400215 	stw	r5,8(r3)
    4ab8:	30c00215 	stw	r3,8(r6)
    4abc:	28c00315 	stw	r3,12(r5)
    4ac0:	003fcd06 	br	49f8 <_free_r+0xe8>
    4ac4:	40004d1e 	bne	r8,zero,4bfc <_free_r+0x2ec>
    4ac8:	31000317 	ldw	r4,12(r6)
    4acc:	31800217 	ldw	r6,8(r6)
    4ad0:	2885883a 	add	r2,r5,r2
    4ad4:	11400054 	ori	r5,r2,1
    4ad8:	31000315 	stw	r4,12(r6)
    4adc:	21800215 	stw	r6,8(r4)
    4ae0:	19400115 	stw	r5,4(r3)
    4ae4:	1887883a 	add	r3,r3,r2
    4ae8:	18800015 	stw	r2,0(r3)
    4aec:	003fc206 	br	49f8 <_free_r+0xe8>
    4af0:	39c0004c 	andi	r7,r7,1
    4af4:	1145883a 	add	r2,r2,r5
    4af8:	3800071e 	bne	r7,zero,4b18 <_free_r+0x208>
    4afc:	81fffe17 	ldw	r7,-8(r16)
    4b00:	19c7c83a 	sub	r3,r3,r7
    4b04:	19400317 	ldw	r5,12(r3)
    4b08:	19800217 	ldw	r6,8(r3)
    4b0c:	11c5883a 	add	r2,r2,r7
    4b10:	31400315 	stw	r5,12(r6)
    4b14:	29800215 	stw	r6,8(r5)
    4b18:	01400074 	movhi	r5,1
    4b1c:	11800054 	ori	r6,r2,1
    4b20:	2948ef17 	ldw	r5,9148(r5)
    4b24:	19800115 	stw	r6,4(r3)
    4b28:	20c00215 	stw	r3,8(r4)
    4b2c:	117fb236 	bltu	r2,r5,49f8 <_free_r+0xe8>
    4b30:	00800074 	movhi	r2,1
    4b34:	11502017 	ldw	r5,16512(r2)
    4b38:	8809883a 	mov	r4,r17
    4b3c:	00047f40 	call	47f4 <_malloc_trim_r>
    4b40:	003fad06 	br	49f8 <_free_r+0xe8>
    4b44:	29800568 	cmpgeui	r6,r5,21
    4b48:	30000926 	beq	r6,zero,4b70 <_free_r+0x260>
    4b4c:	29801568 	cmpgeui	r6,r5,85
    4b50:	3000191e 	bne	r6,zero,4bb8 <_free_r+0x2a8>
    4b54:	100ad33a 	srli	r5,r2,12
    4b58:	29801bc4 	addi	r6,r5,111
    4b5c:	300c90fa 	slli	r6,r6,3
    4b60:	29c01b84 	addi	r7,r5,110
    4b64:	003fc706 	br	4a84 <_free_r+0x174>
    4b68:	1145883a 	add	r2,r2,r5
    4b6c:	003fae06 	br	4a28 <_free_r+0x118>
    4b70:	29801704 	addi	r6,r5,92
    4b74:	300c90fa 	slli	r6,r6,3
    4b78:	29c016c4 	addi	r7,r5,91
    4b7c:	003fc106 	br	4a84 <_free_r+0x174>
    4b80:	20c00515 	stw	r3,20(r4)
    4b84:	20c00415 	stw	r3,16(r4)
    4b88:	19c00315 	stw	r7,12(r3)
    4b8c:	19c00215 	stw	r7,8(r3)
    4b90:	1a400115 	stw	r9,4(r3)
    4b94:	40800015 	stw	r2,0(r8)
    4b98:	003f9706 	br	49f8 <_free_r+0xe8>
    4b9c:	380fd0ba 	srai	r7,r7,2
    4ba0:	00800044 	movi	r2,1
    4ba4:	22000117 	ldw	r8,4(r4)
    4ba8:	11ce983a 	sll	r7,r2,r7
    4bac:	3a0eb03a 	or	r7,r7,r8
    4bb0:	21c00115 	stw	r7,4(r4)
    4bb4:	003fbe06 	br	4ab0 <_free_r+0x1a0>
    4bb8:	29805568 	cmpgeui	r6,r5,341
    4bbc:	3000051e 	bne	r6,zero,4bd4 <_free_r+0x2c4>
    4bc0:	100ad3fa 	srli	r5,r2,15
    4bc4:	29801e04 	addi	r6,r5,120
    4bc8:	300c90fa 	slli	r6,r6,3
    4bcc:	29c01dc4 	addi	r7,r5,119
    4bd0:	003fac06 	br	4a84 <_free_r+0x174>
    4bd4:	29415568 	cmpgeui	r5,r5,1365
    4bd8:	2800051e 	bne	r5,zero,4bf0 <_free_r+0x2e0>
    4bdc:	100ad4ba 	srli	r5,r2,18
    4be0:	29801f44 	addi	r6,r5,125
    4be4:	300c90fa 	slli	r6,r6,3
    4be8:	29c01f04 	addi	r7,r5,124
    4bec:	003fa506 	br	4a84 <_free_r+0x174>
    4bf0:	0180fe04 	movi	r6,1016
    4bf4:	01c01f84 	movi	r7,126
    4bf8:	003fa206 	br	4a84 <_free_r+0x174>
    4bfc:	11000054 	ori	r4,r2,1
    4c00:	19000115 	stw	r4,4(r3)
    4c04:	30800015 	stw	r2,0(r6)
    4c08:	003f7b06 	br	49f8 <_free_r+0xe8>

00004c0c <_fwalk>:
    4c0c:	defffa04 	addi	sp,sp,-24
    4c10:	dd000415 	stw	r20,16(sp)
    4c14:	dcc00315 	stw	r19,12(sp)
    4c18:	dc800215 	stw	r18,8(sp)
    4c1c:	dfc00515 	stw	ra,20(sp)
    4c20:	dc400115 	stw	r17,4(sp)
    4c24:	dc000015 	stw	r16,0(sp)
    4c28:	2827883a 	mov	r19,r5
    4c2c:	2480b804 	addi	r18,r4,736
    4c30:	0029883a 	mov	r20,zero
    4c34:	94400117 	ldw	r17,4(r18)
    4c38:	94000217 	ldw	r16,8(r18)
    4c3c:	8c7fffc4 	addi	r17,r17,-1
    4c40:	88000d16 	blt	r17,zero,4c78 <_fwalk+0x6c>
    4c44:	8080030b 	ldhu	r2,12(r16)
    4c48:	8c7fffc4 	addi	r17,r17,-1
    4c4c:	108000b0 	cmpltui	r2,r2,2
    4c50:	1000061e 	bne	r2,zero,4c6c <_fwalk+0x60>
    4c54:	8080038f 	ldh	r2,14(r16)
    4c58:	8009883a 	mov	r4,r16
    4c5c:	10bfffe0 	cmpeqi	r2,r2,-1
    4c60:	1000021e 	bne	r2,zero,4c6c <_fwalk+0x60>
    4c64:	983ee83a 	callr	r19
    4c68:	a0a8b03a 	or	r20,r20,r2
    4c6c:	88bfffd8 	cmpnei	r2,r17,-1
    4c70:	84001a04 	addi	r16,r16,104
    4c74:	103ff31e 	bne	r2,zero,4c44 <_fwalk+0x38>
    4c78:	94800017 	ldw	r18,0(r18)
    4c7c:	903fed1e 	bne	r18,zero,4c34 <_fwalk+0x28>
    4c80:	a005883a 	mov	r2,r20
    4c84:	dfc00517 	ldw	ra,20(sp)
    4c88:	dd000417 	ldw	r20,16(sp)
    4c8c:	dcc00317 	ldw	r19,12(sp)
    4c90:	dc800217 	ldw	r18,8(sp)
    4c94:	dc400117 	ldw	r17,4(sp)
    4c98:	dc000017 	ldw	r16,0(sp)
    4c9c:	dec00604 	addi	sp,sp,24
    4ca0:	f800283a 	ret

00004ca4 <_fwalk_reent>:
    4ca4:	defff904 	addi	sp,sp,-28
    4ca8:	dd400515 	stw	r21,20(sp)
    4cac:	dd000415 	stw	r20,16(sp)
    4cb0:	dcc00315 	stw	r19,12(sp)
    4cb4:	dc800215 	stw	r18,8(sp)
    4cb8:	dfc00615 	stw	ra,24(sp)
    4cbc:	dc400115 	stw	r17,4(sp)
    4cc0:	dc000015 	stw	r16,0(sp)
    4cc4:	202b883a 	mov	r21,r4
    4cc8:	2827883a 	mov	r19,r5
    4ccc:	2480b804 	addi	r18,r4,736
    4cd0:	0029883a 	mov	r20,zero
    4cd4:	94400117 	ldw	r17,4(r18)
    4cd8:	94000217 	ldw	r16,8(r18)
    4cdc:	8c7fffc4 	addi	r17,r17,-1
    4ce0:	88000e16 	blt	r17,zero,4d1c <_fwalk_reent+0x78>
    4ce4:	8080030b 	ldhu	r2,12(r16)
    4ce8:	8c7fffc4 	addi	r17,r17,-1
    4cec:	108000b0 	cmpltui	r2,r2,2
    4cf0:	1000071e 	bne	r2,zero,4d10 <_fwalk_reent+0x6c>
    4cf4:	8080038f 	ldh	r2,14(r16)
    4cf8:	800b883a 	mov	r5,r16
    4cfc:	a809883a 	mov	r4,r21
    4d00:	10bfffe0 	cmpeqi	r2,r2,-1
    4d04:	1000021e 	bne	r2,zero,4d10 <_fwalk_reent+0x6c>
    4d08:	983ee83a 	callr	r19
    4d0c:	a0a8b03a 	or	r20,r20,r2
    4d10:	88bfffd8 	cmpnei	r2,r17,-1
    4d14:	84001a04 	addi	r16,r16,104
    4d18:	103ff21e 	bne	r2,zero,4ce4 <_fwalk_reent+0x40>
    4d1c:	94800017 	ldw	r18,0(r18)
    4d20:	903fec1e 	bne	r18,zero,4cd4 <_fwalk_reent+0x30>
    4d24:	a005883a 	mov	r2,r20
    4d28:	dfc00617 	ldw	ra,24(sp)
    4d2c:	dd400517 	ldw	r21,20(sp)
    4d30:	dd000417 	ldw	r20,16(sp)
    4d34:	dcc00317 	ldw	r19,12(sp)
    4d38:	dc800217 	ldw	r18,8(sp)
    4d3c:	dc400117 	ldw	r17,4(sp)
    4d40:	dc000017 	ldw	r16,0(sp)
    4d44:	dec00704 	addi	sp,sp,28
    4d48:	f800283a 	ret

00004d4c <__localeconv_l>:
    4d4c:	20803c04 	addi	r2,r4,240
    4d50:	f800283a 	ret

00004d54 <_localeconv_r>:
    4d54:	00800074 	movhi	r2,1
    4d58:	10841d04 	addi	r2,r2,4212
    4d5c:	f800283a 	ret

00004d60 <localeconv>:
    4d60:	00800074 	movhi	r2,1
    4d64:	10841d04 	addi	r2,r2,4212
    4d68:	f800283a 	ret

00004d6c <__smakebuf_r>:
    4d6c:	2880030b 	ldhu	r2,12(r5)
    4d70:	deffe804 	addi	sp,sp,-96
    4d74:	dc001215 	stw	r16,72(sp)
    4d78:	dfc01715 	stw	ra,92(sp)
    4d7c:	dd001615 	stw	r20,88(sp)
    4d80:	dcc01515 	stw	r19,84(sp)
    4d84:	dc801415 	stw	r18,80(sp)
    4d88:	dc401315 	stw	r17,76(sp)
    4d8c:	10c0008c 	andi	r3,r2,2
    4d90:	2821883a 	mov	r16,r5
    4d94:	18000d26 	beq	r3,zero,4dcc <__smakebuf_r+0x60>
    4d98:	288010c4 	addi	r2,r5,67
    4d9c:	28800015 	stw	r2,0(r5)
    4da0:	28800415 	stw	r2,16(r5)
    4da4:	00800044 	movi	r2,1
    4da8:	28800515 	stw	r2,20(r5)
    4dac:	dfc01717 	ldw	ra,92(sp)
    4db0:	dd001617 	ldw	r20,88(sp)
    4db4:	dcc01517 	ldw	r19,84(sp)
    4db8:	dc801417 	ldw	r18,80(sp)
    4dbc:	dc401317 	ldw	r17,76(sp)
    4dc0:	dc001217 	ldw	r16,72(sp)
    4dc4:	dec01804 	addi	sp,sp,96
    4dc8:	f800283a 	ret
    4dcc:	2940038f 	ldh	r5,14(r5)
    4dd0:	2023883a 	mov	r17,r4
    4dd4:	28002816 	blt	r5,zero,4e78 <__smakebuf_r+0x10c>
    4dd8:	d80d883a 	mov	r6,sp
    4ddc:	00088300 	call	8830 <_fstat_r>
    4de0:	10002416 	blt	r2,zero,4e74 <__smakebuf_r+0x108>
    4de4:	d8800117 	ldw	r2,4(sp)
    4de8:	10bc000c 	andi	r2,r2,61440
    4dec:	10880018 	cmpnei	r2,r2,8192
    4df0:	1000461e 	bne	r2,zero,4f0c <__smakebuf_r+0x1a0>
    4df4:	8140038f 	ldh	r5,14(r16)
    4df8:	8809883a 	mov	r4,r17
    4dfc:	0008d140 	call	8d14 <_isatty_r>
    4e00:	10003e26 	beq	r2,zero,4efc <__smakebuf_r+0x190>
    4e04:	8080030b 	ldhu	r2,12(r16)
    4e08:	80c010c4 	addi	r3,r16,67
    4e0c:	80c00015 	stw	r3,0(r16)
    4e10:	10800054 	ori	r2,r2,1
    4e14:	8080030d 	sth	r2,12(r16)
    4e18:	00800044 	movi	r2,1
    4e1c:	80c00415 	stw	r3,16(r16)
    4e20:	80800515 	stw	r2,20(r16)
    4e24:	04c00044 	movi	r19,1
    4e28:	05010004 	movi	r20,1024
    4e2c:	04820004 	movi	r18,2048
    4e30:	a00b883a 	mov	r5,r20
    4e34:	8809883a 	mov	r4,r17
    4e38:	0004fb40 	call	4fb4 <_malloc_r>
    4e3c:	10001726 	beq	r2,zero,4e9c <__smakebuf_r+0x130>
    4e40:	80c0030b 	ldhu	r3,12(r16)
    4e44:	01000034 	movhi	r4,0
    4e48:	21111804 	addi	r4,r4,17504
    4e4c:	89000f15 	stw	r4,60(r17)
    4e50:	18c02014 	ori	r3,r3,128
    4e54:	80c0030d 	sth	r3,12(r16)
    4e58:	80800015 	stw	r2,0(r16)
    4e5c:	80800415 	stw	r2,16(r16)
    4e60:	85000515 	stw	r20,20(r16)
    4e64:	98001d1e 	bne	r19,zero,4edc <__smakebuf_r+0x170>
    4e68:	90c6b03a 	or	r3,r18,r3
    4e6c:	80c0030d 	sth	r3,12(r16)
    4e70:	003fce06 	br	4dac <__smakebuf_r+0x40>
    4e74:	8080030b 	ldhu	r2,12(r16)
    4e78:	1080200c 	andi	r2,r2,128
    4e7c:	0027883a 	mov	r19,zero
    4e80:	10001326 	beq	r2,zero,4ed0 <__smakebuf_r+0x164>
    4e84:	05001004 	movi	r20,64
    4e88:	a00b883a 	mov	r5,r20
    4e8c:	8809883a 	mov	r4,r17
    4e90:	0025883a 	mov	r18,zero
    4e94:	0004fb40 	call	4fb4 <_malloc_r>
    4e98:	103fe91e 	bne	r2,zero,4e40 <__smakebuf_r+0xd4>
    4e9c:	8080030b 	ldhu	r2,12(r16)
    4ea0:	10c0800c 	andi	r3,r2,512
    4ea4:	183fc11e 	bne	r3,zero,4dac <__smakebuf_r+0x40>
    4ea8:	00ffff04 	movi	r3,-4
    4eac:	10c4703a 	and	r2,r2,r3
    4eb0:	10800094 	ori	r2,r2,2
    4eb4:	80c010c4 	addi	r3,r16,67
    4eb8:	8080030d 	sth	r2,12(r16)
    4ebc:	00800044 	movi	r2,1
    4ec0:	80c00015 	stw	r3,0(r16)
    4ec4:	80c00415 	stw	r3,16(r16)
    4ec8:	80800515 	stw	r2,20(r16)
    4ecc:	003fb706 	br	4dac <__smakebuf_r+0x40>
    4ed0:	05010004 	movi	r20,1024
    4ed4:	0025883a 	mov	r18,zero
    4ed8:	003fd506 	br	4e30 <__smakebuf_r+0xc4>
    4edc:	8140038f 	ldh	r5,14(r16)
    4ee0:	8809883a 	mov	r4,r17
    4ee4:	0008d140 	call	8d14 <_isatty_r>
    4ee8:	80c0030b 	ldhu	r3,12(r16)
    4eec:	103fde26 	beq	r2,zero,4e68 <__smakebuf_r+0xfc>
    4ef0:	18ffff0c 	andi	r3,r3,65532
    4ef4:	18c00054 	ori	r3,r3,1
    4ef8:	003fdb06 	br	4e68 <__smakebuf_r+0xfc>
    4efc:	04c00044 	movi	r19,1
    4f00:	05010004 	movi	r20,1024
    4f04:	04820004 	movi	r18,2048
    4f08:	003fc906 	br	4e30 <__smakebuf_r+0xc4>
    4f0c:	0027883a 	mov	r19,zero
    4f10:	05010004 	movi	r20,1024
    4f14:	04820004 	movi	r18,2048
    4f18:	003fc506 	br	4e30 <__smakebuf_r+0xc4>

00004f1c <__swhatbuf_r>:
    4f1c:	deffea04 	addi	sp,sp,-88
    4f20:	dc001215 	stw	r16,72(sp)
    4f24:	2821883a 	mov	r16,r5
    4f28:	2940038f 	ldh	r5,14(r5)
    4f2c:	dc801415 	stw	r18,80(sp)
    4f30:	dc401315 	stw	r17,76(sp)
    4f34:	dfc01515 	stw	ra,84(sp)
    4f38:	3023883a 	mov	r17,r6
    4f3c:	3825883a 	mov	r18,r7
    4f40:	28001016 	blt	r5,zero,4f84 <__swhatbuf_r+0x68>
    4f44:	d80d883a 	mov	r6,sp
    4f48:	00088300 	call	8830 <_fstat_r>
    4f4c:	10000d16 	blt	r2,zero,4f84 <__swhatbuf_r+0x68>
    4f50:	d8c00117 	ldw	r3,4(sp)
    4f54:	00820004 	movi	r2,2048
    4f58:	18fc000c 	andi	r3,r3,61440
    4f5c:	18c80020 	cmpeqi	r3,r3,8192
    4f60:	90c00015 	stw	r3,0(r18)
    4f64:	00c10004 	movi	r3,1024
    4f68:	88c00015 	stw	r3,0(r17)
    4f6c:	dfc01517 	ldw	ra,84(sp)
    4f70:	dc801417 	ldw	r18,80(sp)
    4f74:	dc401317 	ldw	r17,76(sp)
    4f78:	dc001217 	ldw	r16,72(sp)
    4f7c:	dec01604 	addi	sp,sp,88
    4f80:	f800283a 	ret
    4f84:	8080030b 	ldhu	r2,12(r16)
    4f88:	90000015 	stw	zero,0(r18)
    4f8c:	1080200c 	andi	r2,r2,128
    4f90:	10000426 	beq	r2,zero,4fa4 <__swhatbuf_r+0x88>
    4f94:	00801004 	movi	r2,64
    4f98:	88800015 	stw	r2,0(r17)
    4f9c:	0005883a 	mov	r2,zero
    4fa0:	003ff206 	br	4f6c <__swhatbuf_r+0x50>
    4fa4:	00810004 	movi	r2,1024
    4fa8:	88800015 	stw	r2,0(r17)
    4fac:	0005883a 	mov	r2,zero
    4fb0:	003fee06 	br	4f6c <__swhatbuf_r+0x50>

00004fb4 <_malloc_r>:
    4fb4:	defff604 	addi	sp,sp,-40
    4fb8:	dc400115 	stw	r17,4(sp)
    4fbc:	2c4002c4 	addi	r17,r5,11
    4fc0:	dc800215 	stw	r18,8(sp)
    4fc4:	dfc00915 	stw	ra,36(sp)
    4fc8:	df000815 	stw	fp,32(sp)
    4fcc:	ddc00715 	stw	r23,28(sp)
    4fd0:	dd800615 	stw	r22,24(sp)
    4fd4:	dd400515 	stw	r21,20(sp)
    4fd8:	dd000415 	stw	r20,16(sp)
    4fdc:	dcc00315 	stw	r19,12(sp)
    4fe0:	dc000015 	stw	r16,0(sp)
    4fe4:	888005e8 	cmpgeui	r2,r17,23
    4fe8:	2025883a 	mov	r18,r4
    4fec:	10001b1e 	bne	r2,zero,505c <_malloc_r+0xa8>
    4ff0:	29400468 	cmpgeui	r5,r5,17
    4ff4:	2800821e 	bne	r5,zero,5200 <_malloc_r+0x24c>
    4ff8:	000d7c80 	call	d7c8 <__malloc_lock>
    4ffc:	04400404 	movi	r17,16
    5000:	00800604 	movi	r2,24
    5004:	01c00084 	movi	r7,2
    5008:	04c00074 	movhi	r19,1
    500c:	9cc2df04 	addi	r19,r19,2940
    5010:	9885883a 	add	r2,r19,r2
    5014:	14000117 	ldw	r16,4(r2)
    5018:	10fffe04 	addi	r3,r2,-8
    501c:	80c08b26 	beq	r16,r3,524c <_malloc_r+0x298>
    5020:	80800117 	ldw	r2,4(r16)
    5024:	81000317 	ldw	r4,12(r16)
    5028:	00ffff04 	movi	r3,-4
    502c:	10c4703a 	and	r2,r2,r3
    5030:	81400217 	ldw	r5,8(r16)
    5034:	8085883a 	add	r2,r16,r2
    5038:	10c00117 	ldw	r3,4(r2)
    503c:	29000315 	stw	r4,12(r5)
    5040:	21400215 	stw	r5,8(r4)
    5044:	18c00054 	ori	r3,r3,1
    5048:	10c00115 	stw	r3,4(r2)
    504c:	9009883a 	mov	r4,r18
    5050:	000d7ec0 	call	d7ec <__malloc_unlock>
    5054:	80800204 	addi	r2,r16,8
    5058:	00006c06 	br	520c <_malloc_r+0x258>
    505c:	00bffe04 	movi	r2,-8
    5060:	88a2703a 	and	r17,r17,r2
    5064:	88006616 	blt	r17,zero,5200 <_malloc_r+0x24c>
    5068:	89406536 	bltu	r17,r5,5200 <_malloc_r+0x24c>
    506c:	000d7c80 	call	d7c8 <__malloc_lock>
    5070:	88807e28 	cmpgeui	r2,r17,504
    5074:	10012226 	beq	r2,zero,5500 <_malloc_r+0x54c>
    5078:	8804d27a 	srli	r2,r17,9
    507c:	10006f26 	beq	r2,zero,523c <_malloc_r+0x288>
    5080:	10c00168 	cmpgeui	r3,r2,5
    5084:	1800fe1e 	bne	r3,zero,5480 <_malloc_r+0x4cc>
    5088:	8804d1ba 	srli	r2,r17,6
    508c:	11c00e44 	addi	r7,r2,57
    5090:	380890fa 	slli	r4,r7,3
    5094:	12000e04 	addi	r8,r2,56
    5098:	04c00074 	movhi	r19,1
    509c:	9cc2df04 	addi	r19,r19,2940
    50a0:	9909883a 	add	r4,r19,r4
    50a4:	24000117 	ldw	r16,4(r4)
    50a8:	213ffe04 	addi	r4,r4,-8
    50ac:	24000b26 	beq	r4,r16,50dc <_malloc_r+0x128>
    50b0:	01bfff04 	movi	r6,-4
    50b4:	00000306 	br	50c4 <_malloc_r+0x110>
    50b8:	1800d60e 	bge	r3,zero,5414 <_malloc_r+0x460>
    50bc:	84000317 	ldw	r16,12(r16)
    50c0:	24000626 	beq	r4,r16,50dc <_malloc_r+0x128>
    50c4:	80800117 	ldw	r2,4(r16)
    50c8:	1184703a 	and	r2,r2,r6
    50cc:	1447c83a 	sub	r3,r2,r17
    50d0:	19400408 	cmpgei	r5,r3,16
    50d4:	283ff826 	beq	r5,zero,50b8 <_malloc_r+0x104>
    50d8:	400f883a 	mov	r7,r8
    50dc:	9c000417 	ldw	r16,16(r19)
    50e0:	02400074 	movhi	r9,1
    50e4:	4a42e104 	addi	r9,r9,2948
    50e8:	82405f26 	beq	r16,r9,5268 <_malloc_r+0x2b4>
    50ec:	80c00117 	ldw	r3,4(r16)
    50f0:	00bfff04 	movi	r2,-4
    50f4:	1884703a 	and	r2,r3,r2
    50f8:	1447c83a 	sub	r3,r2,r17
    50fc:	19000410 	cmplti	r4,r3,16
    5100:	20010a26 	beq	r4,zero,552c <_malloc_r+0x578>
    5104:	9a400515 	stw	r9,20(r19)
    5108:	9a400415 	stw	r9,16(r19)
    510c:	1800ff0e 	bge	r3,zero,550c <_malloc_r+0x558>
    5110:	10c08028 	cmpgeui	r3,r2,512
    5114:	1800c11e 	bne	r3,zero,541c <_malloc_r+0x468>
    5118:	1006d0fa 	srli	r3,r2,3
    511c:	1008d17a 	srli	r4,r2,5
    5120:	00800044 	movi	r2,1
    5124:	18c00044 	addi	r3,r3,1
    5128:	180690fa 	slli	r3,r3,3
    512c:	99400117 	ldw	r5,4(r19)
    5130:	1104983a 	sll	r2,r2,r4
    5134:	98c7883a 	add	r3,r19,r3
    5138:	19000017 	ldw	r4,0(r3)
    513c:	1144b03a 	or	r2,r2,r5
    5140:	197ffe04 	addi	r5,r3,-8
    5144:	81400315 	stw	r5,12(r16)
    5148:	81000215 	stw	r4,8(r16)
    514c:	98800115 	stw	r2,4(r19)
    5150:	1c000015 	stw	r16,0(r3)
    5154:	24000315 	stw	r16,12(r4)
    5158:	3807d0ba 	srai	r3,r7,2
    515c:	01000044 	movi	r4,1
    5160:	20c8983a 	sll	r4,r4,r3
    5164:	11004536 	bltu	r2,r4,527c <_malloc_r+0x2c8>
    5168:	2086703a 	and	r3,r4,r2
    516c:	18000a1e 	bne	r3,zero,5198 <_malloc_r+0x1e4>
    5170:	00ffff04 	movi	r3,-4
    5174:	2109883a 	add	r4,r4,r4
    5178:	38ce703a 	and	r7,r7,r3
    517c:	2086703a 	and	r3,r4,r2
    5180:	39c00104 	addi	r7,r7,4
    5184:	1800041e 	bne	r3,zero,5198 <_malloc_r+0x1e4>
    5188:	2109883a 	add	r4,r4,r4
    518c:	2086703a 	and	r3,r4,r2
    5190:	39c00104 	addi	r7,r7,4
    5194:	183ffc26 	beq	r3,zero,5188 <_malloc_r+0x1d4>
    5198:	02bfff04 	movi	r10,-4
    519c:	381690fa 	slli	r11,r7,3
    51a0:	3819883a 	mov	r12,r7
    51a4:	9ad7883a 	add	r11,r19,r11
    51a8:	5811883a 	mov	r8,r11
    51ac:	40800317 	ldw	r2,12(r8)
    51b0:	4080bc26 	beq	r8,r2,54a4 <_malloc_r+0x4f0>
    51b4:	10c00117 	ldw	r3,4(r2)
    51b8:	1021883a 	mov	r16,r2
    51bc:	10800317 	ldw	r2,12(r2)
    51c0:	1a86703a 	and	r3,r3,r10
    51c4:	1c4bc83a 	sub	r5,r3,r17
    51c8:	29800410 	cmplti	r6,r5,16
    51cc:	3000ba26 	beq	r6,zero,54b8 <_malloc_r+0x504>
    51d0:	283ff716 	blt	r5,zero,51b0 <_malloc_r+0x1fc>
    51d4:	80c7883a 	add	r3,r16,r3
    51d8:	19400117 	ldw	r5,4(r3)
    51dc:	81800217 	ldw	r6,8(r16)
    51e0:	9009883a 	mov	r4,r18
    51e4:	29400054 	ori	r5,r5,1
    51e8:	19400115 	stw	r5,4(r3)
    51ec:	30800315 	stw	r2,12(r6)
    51f0:	11800215 	stw	r6,8(r2)
    51f4:	000d7ec0 	call	d7ec <__malloc_unlock>
    51f8:	80800204 	addi	r2,r16,8
    51fc:	00000306 	br	520c <_malloc_r+0x258>
    5200:	00800304 	movi	r2,12
    5204:	90800015 	stw	r2,0(r18)
    5208:	0005883a 	mov	r2,zero
    520c:	dfc00917 	ldw	ra,36(sp)
    5210:	df000817 	ldw	fp,32(sp)
    5214:	ddc00717 	ldw	r23,28(sp)
    5218:	dd800617 	ldw	r22,24(sp)
    521c:	dd400517 	ldw	r21,20(sp)
    5220:	dd000417 	ldw	r20,16(sp)
    5224:	dcc00317 	ldw	r19,12(sp)
    5228:	dc800217 	ldw	r18,8(sp)
    522c:	dc400117 	ldw	r17,4(sp)
    5230:	dc000017 	ldw	r16,0(sp)
    5234:	dec00a04 	addi	sp,sp,40
    5238:	f800283a 	ret
    523c:	01008004 	movi	r4,512
    5240:	01c01004 	movi	r7,64
    5244:	02000fc4 	movi	r8,63
    5248:	003f9306 	br	5098 <_malloc_r+0xe4>
    524c:	14000317 	ldw	r16,12(r2)
    5250:	39c00084 	addi	r7,r7,2
    5254:	143f721e 	bne	r2,r16,5020 <_malloc_r+0x6c>
    5258:	9c000417 	ldw	r16,16(r19)
    525c:	02400074 	movhi	r9,1
    5260:	4a42e104 	addi	r9,r9,2948
    5264:	827fa11e 	bne	r16,r9,50ec <_malloc_r+0x138>
    5268:	3807d0ba 	srai	r3,r7,2
    526c:	01000044 	movi	r4,1
    5270:	98800117 	ldw	r2,4(r19)
    5274:	20c8983a 	sll	r4,r4,r3
    5278:	113fbb2e 	bgeu	r2,r4,5168 <_malloc_r+0x1b4>
    527c:	9c000217 	ldw	r16,8(r19)
    5280:	00bfff04 	movi	r2,-4
    5284:	85400117 	ldw	r21,4(r16)
    5288:	a8ac703a 	and	r22,r21,r2
    528c:	b4400336 	bltu	r22,r17,529c <_malloc_r+0x2e8>
    5290:	b445c83a 	sub	r2,r22,r17
    5294:	10c00408 	cmpgei	r3,r2,16
    5298:	1800541e 	bne	r3,zero,53ec <_malloc_r+0x438>
    529c:	00800074 	movhi	r2,1
    52a0:	1088ee17 	ldw	r2,9144(r2)
    52a4:	00c00074 	movhi	r3,1
    52a8:	1d502017 	ldw	r21,16512(r3)
    52ac:	10bfffd8 	cmpnei	r2,r2,-1
    52b0:	85b9883a 	add	fp,r16,r22
    52b4:	8d6b883a 	add	r21,r17,r21
    52b8:	1000d626 	beq	r2,zero,5614 <_malloc_r+0x660>
    52bc:	ad4403c4 	addi	r21,r21,4111
    52c0:	00bc0004 	movi	r2,-4096
    52c4:	a8aa703a 	and	r21,r21,r2
    52c8:	a80b883a 	mov	r5,r21
    52cc:	9009883a 	mov	r4,r18
    52d0:	0006bb40 	call	6bb4 <_sbrk_r>
    52d4:	102f883a 	mov	r23,r2
    52d8:	10bfffd8 	cmpnei	r2,r2,-1
    52dc:	1000a826 	beq	r2,zero,5580 <_malloc_r+0x5cc>
    52e0:	bf00a636 	bltu	r23,fp,557c <_malloc_r+0x5c8>
    52e4:	00800074 	movhi	r2,1
    52e8:	15102b17 	ldw	r20,16556(r2)
    52ec:	ad29883a 	add	r20,r21,r20
    52f0:	15102b15 	stw	r20,16556(r2)
    52f4:	a007883a 	mov	r3,r20
    52f8:	e5c0ec26 	beq	fp,r23,56ac <_malloc_r+0x6f8>
    52fc:	00800074 	movhi	r2,1
    5300:	1088ee17 	ldw	r2,9144(r2)
    5304:	10bfffd8 	cmpnei	r2,r2,-1
    5308:	1000ef26 	beq	r2,zero,56c8 <_malloc_r+0x714>
    530c:	bf39c83a 	sub	fp,r23,fp
    5310:	e0c7883a 	add	r3,fp,r3
    5314:	00800074 	movhi	r2,1
    5318:	10d02b15 	stw	r3,16556(r2)
    531c:	bf0001cc 	andi	fp,r23,7
    5320:	e000c526 	beq	fp,zero,5638 <_malloc_r+0x684>
    5324:	bf2fc83a 	sub	r23,r23,fp
    5328:	bdc00204 	addi	r23,r23,8
    532c:	05040204 	movi	r20,4104
    5330:	a729c83a 	sub	r20,r20,fp
    5334:	bd6b883a 	add	r21,r23,r21
    5338:	a569c83a 	sub	r20,r20,r21
    533c:	a503ffcc 	andi	r20,r20,4095
    5340:	a00b883a 	mov	r5,r20
    5344:	9009883a 	mov	r4,r18
    5348:	0006bb40 	call	6bb4 <_sbrk_r>
    534c:	10ffffe0 	cmpeqi	r3,r2,-1
    5350:	1800f31e 	bne	r3,zero,5720 <_malloc_r+0x76c>
    5354:	15c5c83a 	sub	r2,r2,r23
    5358:	152b883a 	add	r21,r2,r20
    535c:	00800074 	movhi	r2,1
    5360:	11502b17 	ldw	r5,16556(r2)
    5364:	9dc00215 	stw	r23,8(r19)
    5368:	ad400054 	ori	r21,r21,1
    536c:	a169883a 	add	r20,r20,r5
    5370:	15102b15 	stw	r20,16556(r2)
    5374:	bd400115 	stw	r21,4(r23)
    5378:	84c0d626 	beq	r16,r19,56d4 <_malloc_r+0x720>
    537c:	b0800428 	cmpgeui	r2,r22,16
    5380:	1000d626 	beq	r2,zero,56dc <_malloc_r+0x728>
    5384:	80c00117 	ldw	r3,4(r16)
    5388:	013ffe04 	movi	r4,-8
    538c:	b0bffd04 	addi	r2,r22,-12
    5390:	1104703a 	and	r2,r2,r4
    5394:	18c0004c 	andi	r3,r3,1
    5398:	1886b03a 	or	r3,r3,r2
    539c:	80c00115 	stw	r3,4(r16)
    53a0:	01000144 	movi	r4,5
    53a4:	8087883a 	add	r3,r16,r2
    53a8:	19000115 	stw	r4,4(r3)
    53ac:	19000215 	stw	r4,8(r3)
    53b0:	10800428 	cmpgeui	r2,r2,16
    53b4:	1000df1e 	bne	r2,zero,5734 <_malloc_r+0x780>
    53b8:	bd400117 	ldw	r21,4(r23)
    53bc:	b821883a 	mov	r16,r23
    53c0:	00800074 	movhi	r2,1
    53c4:	10901f17 	ldw	r2,16508(r2)
    53c8:	1500022e 	bgeu	r2,r20,53d4 <_malloc_r+0x420>
    53cc:	00800074 	movhi	r2,1
    53d0:	15101f15 	stw	r20,16508(r2)
    53d4:	00800074 	movhi	r2,1
    53d8:	10901e17 	ldw	r2,16504(r2)
    53dc:	15006a2e 	bgeu	r2,r20,5588 <_malloc_r+0x5d4>
    53e0:	00800074 	movhi	r2,1
    53e4:	15101e15 	stw	r20,16504(r2)
    53e8:	00006706 	br	5588 <_malloc_r+0x5d4>
    53ec:	88c00054 	ori	r3,r17,1
    53f0:	80c00115 	stw	r3,4(r16)
    53f4:	8463883a 	add	r17,r16,r17
    53f8:	10800054 	ori	r2,r2,1
    53fc:	9c400215 	stw	r17,8(r19)
    5400:	88800115 	stw	r2,4(r17)
    5404:	9009883a 	mov	r4,r18
    5408:	000d7ec0 	call	d7ec <__malloc_unlock>
    540c:	80800204 	addi	r2,r16,8
    5410:	003f7e06 	br	520c <_malloc_r+0x258>
    5414:	81000317 	ldw	r4,12(r16)
    5418:	003f0506 	br	5030 <_malloc_r+0x7c>
    541c:	1006d27a 	srli	r3,r2,9
    5420:	19000168 	cmpgeui	r4,r3,5
    5424:	20005026 	beq	r4,zero,5568 <_malloc_r+0x5b4>
    5428:	19000568 	cmpgeui	r4,r3,21
    542c:	20008c1e 	bne	r4,zero,5660 <_malloc_r+0x6ac>
    5430:	19401704 	addi	r5,r3,92
    5434:	280a90fa 	slli	r5,r5,3
    5438:	190016c4 	addi	r4,r3,91
    543c:	994b883a 	add	r5,r19,r5
    5440:	28c00017 	ldw	r3,0(r5)
    5444:	297ffe04 	addi	r5,r5,-8
    5448:	28c07426 	beq	r5,r3,561c <_malloc_r+0x668>
    544c:	01bfff04 	movi	r6,-4
    5450:	19000117 	ldw	r4,4(r3)
    5454:	2188703a 	and	r4,r4,r6
    5458:	1100022e 	bgeu	r2,r4,5464 <_malloc_r+0x4b0>
    545c:	18c00217 	ldw	r3,8(r3)
    5460:	28fffb1e 	bne	r5,r3,5450 <_malloc_r+0x49c>
    5464:	19400317 	ldw	r5,12(r3)
    5468:	98800117 	ldw	r2,4(r19)
    546c:	81400315 	stw	r5,12(r16)
    5470:	80c00215 	stw	r3,8(r16)
    5474:	2c000215 	stw	r16,8(r5)
    5478:	1c000315 	stw	r16,12(r3)
    547c:	003f3606 	br	5158 <_malloc_r+0x1a4>
    5480:	10c00568 	cmpgeui	r3,r2,21
    5484:	18004a26 	beq	r3,zero,55b0 <_malloc_r+0x5fc>
    5488:	10c01568 	cmpgeui	r3,r2,85
    548c:	18007b1e 	bne	r3,zero,567c <_malloc_r+0x6c8>
    5490:	8804d33a 	srli	r2,r17,12
    5494:	11c01bc4 	addi	r7,r2,111
    5498:	380890fa 	slli	r4,r7,3
    549c:	12001b84 	addi	r8,r2,110
    54a0:	003efd06 	br	5098 <_malloc_r+0xe4>
    54a4:	63000044 	addi	r12,r12,1
    54a8:	608000cc 	andi	r2,r12,3
    54ac:	42000204 	addi	r8,r8,8
    54b0:	103f3e1e 	bne	r2,zero,51ac <_malloc_r+0x1f8>
    54b4:	00004506 	br	55cc <_malloc_r+0x618>
    54b8:	81000217 	ldw	r4,8(r16)
    54bc:	89800054 	ori	r6,r17,1
    54c0:	81800115 	stw	r6,4(r16)
    54c4:	20800315 	stw	r2,12(r4)
    54c8:	11000215 	stw	r4,8(r2)
    54cc:	8463883a 	add	r17,r16,r17
    54d0:	9c400515 	stw	r17,20(r19)
    54d4:	9c400415 	stw	r17,16(r19)
    54d8:	28800054 	ori	r2,r5,1
    54dc:	88800115 	stw	r2,4(r17)
    54e0:	8a400315 	stw	r9,12(r17)
    54e4:	8a400215 	stw	r9,8(r17)
    54e8:	80c7883a 	add	r3,r16,r3
    54ec:	19400015 	stw	r5,0(r3)
    54f0:	9009883a 	mov	r4,r18
    54f4:	000d7ec0 	call	d7ec <__malloc_unlock>
    54f8:	80800204 	addi	r2,r16,8
    54fc:	003f4306 	br	520c <_malloc_r+0x258>
    5500:	880ed0fa 	srli	r7,r17,3
    5504:	88800204 	addi	r2,r17,8
    5508:	003ebf06 	br	5008 <_malloc_r+0x54>
    550c:	8085883a 	add	r2,r16,r2
    5510:	10c00117 	ldw	r3,4(r2)
    5514:	9009883a 	mov	r4,r18
    5518:	18c00054 	ori	r3,r3,1
    551c:	10c00115 	stw	r3,4(r2)
    5520:	000d7ec0 	call	d7ec <__malloc_unlock>
    5524:	80800204 	addi	r2,r16,8
    5528:	003f3806 	br	520c <_malloc_r+0x258>
    552c:	89000054 	ori	r4,r17,1
    5530:	81000115 	stw	r4,4(r16)
    5534:	8463883a 	add	r17,r16,r17
    5538:	9c400515 	stw	r17,20(r19)
    553c:	9c400415 	stw	r17,16(r19)
    5540:	19000054 	ori	r4,r3,1
    5544:	89000115 	stw	r4,4(r17)
    5548:	8085883a 	add	r2,r16,r2
    554c:	8a400315 	stw	r9,12(r17)
    5550:	8a400215 	stw	r9,8(r17)
    5554:	10c00015 	stw	r3,0(r2)
    5558:	9009883a 	mov	r4,r18
    555c:	000d7ec0 	call	d7ec <__malloc_unlock>
    5560:	80800204 	addi	r2,r16,8
    5564:	003f2906 	br	520c <_malloc_r+0x258>
    5568:	1006d1ba 	srli	r3,r2,6
    556c:	19400e44 	addi	r5,r3,57
    5570:	280a90fa 	slli	r5,r5,3
    5574:	19000e04 	addi	r4,r3,56
    5578:	003fb006 	br	543c <_malloc_r+0x488>
    557c:	84c04626 	beq	r16,r19,5698 <_malloc_r+0x6e4>
    5580:	9c000217 	ldw	r16,8(r19)
    5584:	85400117 	ldw	r21,4(r16)
    5588:	00bfff04 	movi	r2,-4
    558c:	a8aa703a 	and	r21,r21,r2
    5590:	ac45c83a 	sub	r2,r21,r17
    5594:	ac400236 	bltu	r21,r17,55a0 <_malloc_r+0x5ec>
    5598:	10c00408 	cmpgei	r3,r2,16
    559c:	183f931e 	bne	r3,zero,53ec <_malloc_r+0x438>
    55a0:	9009883a 	mov	r4,r18
    55a4:	000d7ec0 	call	d7ec <__malloc_unlock>
    55a8:	0005883a 	mov	r2,zero
    55ac:	003f1706 	br	520c <_malloc_r+0x258>
    55b0:	11c01704 	addi	r7,r2,92
    55b4:	380890fa 	slli	r4,r7,3
    55b8:	120016c4 	addi	r8,r2,91
    55bc:	003eb606 	br	5098 <_malloc_r+0xe4>
    55c0:	58800217 	ldw	r2,8(r11)
    55c4:	39ffffc4 	addi	r7,r7,-1
    55c8:	12c0701e 	bne	r2,r11,578c <_malloc_r+0x7d8>
    55cc:	388000cc 	andi	r2,r7,3
    55d0:	5afffe04 	addi	r11,r11,-8
    55d4:	103ffa1e 	bne	r2,zero,55c0 <_malloc_r+0x60c>
    55d8:	98c00117 	ldw	r3,4(r19)
    55dc:	0104303a 	nor	r2,zero,r4
    55e0:	10c4703a 	and	r2,r2,r3
    55e4:	98800115 	stw	r2,4(r19)
    55e8:	2109883a 	add	r4,r4,r4
    55ec:	113f2336 	bltu	r2,r4,527c <_malloc_r+0x2c8>
    55f0:	203f2226 	beq	r4,zero,527c <_malloc_r+0x2c8>
    55f4:	2086703a 	and	r3,r4,r2
    55f8:	1800041e 	bne	r3,zero,560c <_malloc_r+0x658>
    55fc:	2109883a 	add	r4,r4,r4
    5600:	2086703a 	and	r3,r4,r2
    5604:	63000104 	addi	r12,r12,4
    5608:	183ffc26 	beq	r3,zero,55fc <_malloc_r+0x648>
    560c:	600f883a 	mov	r7,r12
    5610:	003ee206 	br	519c <_malloc_r+0x1e8>
    5614:	ad400404 	addi	r21,r21,16
    5618:	003f2b06 	br	52c8 <_malloc_r+0x314>
    561c:	2009d0ba 	srai	r4,r4,2
    5620:	00800044 	movi	r2,1
    5624:	99800117 	ldw	r6,4(r19)
    5628:	1104983a 	sll	r2,r2,r4
    562c:	1184b03a 	or	r2,r2,r6
    5630:	98800115 	stw	r2,4(r19)
    5634:	003f8d06 	br	546c <_malloc_r+0x4b8>
    5638:	bd69883a 	add	r20,r23,r21
    563c:	0529c83a 	sub	r20,zero,r20
    5640:	a503ffcc 	andi	r20,r20,4095
    5644:	a00b883a 	mov	r5,r20
    5648:	9009883a 	mov	r4,r18
    564c:	0006bb40 	call	6bb4 <_sbrk_r>
    5650:	10ffffe0 	cmpeqi	r3,r2,-1
    5654:	183f3f26 	beq	r3,zero,5354 <_malloc_r+0x3a0>
    5658:	0029883a 	mov	r20,zero
    565c:	003f3f06 	br	535c <_malloc_r+0x3a8>
    5660:	19001568 	cmpgeui	r4,r3,85
    5664:	2000201e 	bne	r4,zero,56e8 <_malloc_r+0x734>
    5668:	1006d33a 	srli	r3,r2,12
    566c:	19401bc4 	addi	r5,r3,111
    5670:	280a90fa 	slli	r5,r5,3
    5674:	19001b84 	addi	r4,r3,110
    5678:	003f7006 	br	543c <_malloc_r+0x488>
    567c:	10c05568 	cmpgeui	r3,r2,341
    5680:	1800201e 	bne	r3,zero,5704 <_malloc_r+0x750>
    5684:	8804d3fa 	srli	r2,r17,15
    5688:	11c01e04 	addi	r7,r2,120
    568c:	380890fa 	slli	r4,r7,3
    5690:	12001dc4 	addi	r8,r2,119
    5694:	003e8006 	br	5098 <_malloc_r+0xe4>
    5698:	00800074 	movhi	r2,1
    569c:	10d02b17 	ldw	r3,16556(r2)
    56a0:	a8c7883a 	add	r3,r21,r3
    56a4:	10d02b15 	stw	r3,16556(r2)
    56a8:	003f1406 	br	52fc <_malloc_r+0x348>
    56ac:	e083ffcc 	andi	r2,fp,4095
    56b0:	103f121e 	bne	r2,zero,52fc <_malloc_r+0x348>
    56b4:	9c000217 	ldw	r16,8(r19)
    56b8:	b56b883a 	add	r21,r22,r21
    56bc:	ad400054 	ori	r21,r21,1
    56c0:	85400115 	stw	r21,4(r16)
    56c4:	003f3e06 	br	53c0 <_malloc_r+0x40c>
    56c8:	00800074 	movhi	r2,1
    56cc:	15c8ee15 	stw	r23,9144(r2)
    56d0:	003f1206 	br	531c <_malloc_r+0x368>
    56d4:	b821883a 	mov	r16,r23
    56d8:	003f3906 	br	53c0 <_malloc_r+0x40c>
    56dc:	00800044 	movi	r2,1
    56e0:	b8800115 	stw	r2,4(r23)
    56e4:	003fae06 	br	55a0 <_malloc_r+0x5ec>
    56e8:	19005568 	cmpgeui	r4,r3,341
    56ec:	2000191e 	bne	r4,zero,5754 <_malloc_r+0x7a0>
    56f0:	1006d3fa 	srli	r3,r2,15
    56f4:	19401e04 	addi	r5,r3,120
    56f8:	280a90fa 	slli	r5,r5,3
    56fc:	19001dc4 	addi	r4,r3,119
    5700:	003f4e06 	br	543c <_malloc_r+0x488>
    5704:	10815568 	cmpgeui	r2,r2,1365
    5708:	1000191e 	bne	r2,zero,5770 <_malloc_r+0x7bc>
    570c:	8804d4ba 	srli	r2,r17,18
    5710:	11c01f44 	addi	r7,r2,125
    5714:	380890fa 	slli	r4,r7,3
    5718:	12001f04 	addi	r8,r2,124
    571c:	003e5e06 	br	5098 <_malloc_r+0xe4>
    5720:	e73ffe04 	addi	fp,fp,-8
    5724:	af2b883a 	add	r21,r21,fp
    5728:	adebc83a 	sub	r21,r21,r23
    572c:	0029883a 	mov	r20,zero
    5730:	003f0a06 	br	535c <_malloc_r+0x3a8>
    5734:	81400204 	addi	r5,r16,8
    5738:	9009883a 	mov	r4,r18
    573c:	00049100 	call	4910 <_free_r>
    5740:	9c000217 	ldw	r16,8(r19)
    5744:	00800074 	movhi	r2,1
    5748:	15102b17 	ldw	r20,16556(r2)
    574c:	85400117 	ldw	r21,4(r16)
    5750:	003f1b06 	br	53c0 <_malloc_r+0x40c>
    5754:	18c15568 	cmpgeui	r3,r3,1365
    5758:	1800091e 	bne	r3,zero,5780 <_malloc_r+0x7cc>
    575c:	1006d4ba 	srli	r3,r2,18
    5760:	19401f44 	addi	r5,r3,125
    5764:	280a90fa 	slli	r5,r5,3
    5768:	19001f04 	addi	r4,r3,124
    576c:	003f3306 	br	543c <_malloc_r+0x488>
    5770:	0100fe04 	movi	r4,1016
    5774:	01c01fc4 	movi	r7,127
    5778:	02001f84 	movi	r8,126
    577c:	003e4606 	br	5098 <_malloc_r+0xe4>
    5780:	0140fe04 	movi	r5,1016
    5784:	01001f84 	movi	r4,126
    5788:	003f2c06 	br	543c <_malloc_r+0x488>
    578c:	98800117 	ldw	r2,4(r19)
    5790:	003f9506 	br	55e8 <_malloc_r+0x634>

00005794 <memchr>:
    5794:	208000cc 	andi	r2,r4,3
    5798:	280f883a 	mov	r7,r5
    579c:	10000e26 	beq	r2,zero,57d8 <memchr+0x44>
    57a0:	30bfffc4 	addi	r2,r6,-1
    57a4:	30001726 	beq	r6,zero,5804 <memchr+0x70>
    57a8:	29803fcc 	andi	r6,r5,255
    57ac:	00000606 	br	57c8 <memchr+0x34>
    57b0:	21000044 	addi	r4,r4,1
    57b4:	20c000cc 	andi	r3,r4,3
    57b8:	18000826 	beq	r3,zero,57dc <memchr+0x48>
    57bc:	10bfffc4 	addi	r2,r2,-1
    57c0:	10ffffe0 	cmpeqi	r3,r2,-1
    57c4:	18000f1e 	bne	r3,zero,5804 <memchr+0x70>
    57c8:	20c00003 	ldbu	r3,0(r4)
    57cc:	19bff81e 	bne	r3,r6,57b0 <memchr+0x1c>
    57d0:	2005883a 	mov	r2,r4
    57d4:	f800283a 	ret
    57d8:	3005883a 	mov	r2,r6
    57dc:	10c00128 	cmpgeui	r3,r2,4
    57e0:	18000a1e 	bne	r3,zero,580c <memchr+0x78>
    57e4:	10001e26 	beq	r2,zero,5860 <memchr+0xcc>
    57e8:	2087883a 	add	r3,r4,r2
    57ec:	39803fcc 	andi	r6,r7,255
    57f0:	2005883a 	mov	r2,r4
    57f4:	11000003 	ldbu	r4,0(r2)
    57f8:	21bff626 	beq	r4,r6,57d4 <memchr+0x40>
    57fc:	10800044 	addi	r2,r2,1
    5800:	18bffc1e 	bne	r3,r2,57f4 <memchr+0x60>
    5804:	0005883a 	mov	r2,zero
    5808:	f800283a 	ret
    580c:	29403fcc 	andi	r5,r5,255
    5810:	280c923a 	slli	r6,r5,8
    5814:	027fbff4 	movhi	r9,65279
    5818:	02202074 	movhi	r8,32897
    581c:	314ab03a 	or	r5,r6,r5
    5820:	280c943a 	slli	r6,r5,16
    5824:	4a7fbfc4 	addi	r9,r9,-257
    5828:	42202004 	addi	r8,r8,-32640
    582c:	314cb03a 	or	r6,r6,r5
    5830:	20c00017 	ldw	r3,0(r4)
    5834:	30c6f03a 	xor	r3,r6,r3
    5838:	1a4b883a 	add	r5,r3,r9
    583c:	00c6303a 	nor	r3,zero,r3
    5840:	28c6703a 	and	r3,r5,r3
    5844:	1a06703a 	and	r3,r3,r8
    5848:	183fe71e 	bne	r3,zero,57e8 <memchr+0x54>
    584c:	10bfff04 	addi	r2,r2,-4
    5850:	10c00128 	cmpgeui	r3,r2,4
    5854:	21000104 	addi	r4,r4,4
    5858:	183ff51e 	bne	r3,zero,5830 <memchr+0x9c>
    585c:	003fe106 	br	57e4 <memchr+0x50>
    5860:	f800283a 	ret

00005864 <memcpy>:
    5864:	30c00430 	cmpltui	r3,r6,16
    5868:	2005883a 	mov	r2,r4
    586c:	18002d1e 	bne	r3,zero,5924 <memcpy+0xc0>
    5870:	2906b03a 	or	r3,r5,r4
    5874:	18c000cc 	andi	r3,r3,3
    5878:	1800351e 	bne	r3,zero,5950 <memcpy+0xec>
    587c:	32fffc04 	addi	r11,r6,-16
    5880:	5816d13a 	srli	r11,r11,4
    5884:	280f883a 	mov	r7,r5
    5888:	2007883a 	mov	r3,r4
    588c:	5ac00044 	addi	r11,r11,1
    5890:	5816913a 	slli	r11,r11,4
    5894:	22d5883a 	add	r10,r4,r11
    5898:	39000117 	ldw	r4,4(r7)
    589c:	3a400017 	ldw	r9,0(r7)
    58a0:	3a000217 	ldw	r8,8(r7)
    58a4:	19000115 	stw	r4,4(r3)
    58a8:	39000317 	ldw	r4,12(r7)
    58ac:	1a400015 	stw	r9,0(r3)
    58b0:	1a000215 	stw	r8,8(r3)
    58b4:	19000315 	stw	r4,12(r3)
    58b8:	18c00404 	addi	r3,r3,16
    58bc:	39c00404 	addi	r7,r7,16
    58c0:	50fff51e 	bne	r10,r3,5898 <memcpy+0x34>
    58c4:	3100030c 	andi	r4,r6,12
    58c8:	2acb883a 	add	r5,r5,r11
    58cc:	320003cc 	andi	r8,r6,15
    58d0:	20002226 	beq	r4,zero,595c <memcpy+0xf8>
    58d4:	280f883a 	mov	r7,r5
    58d8:	1813883a 	mov	r9,r3
    58dc:	39c00104 	addi	r7,r7,4
    58e0:	3abfff17 	ldw	r10,-4(r7)
    58e4:	41c9c83a 	sub	r4,r8,r7
    58e8:	2909883a 	add	r4,r5,r4
    58ec:	4a800015 	stw	r10,0(r9)
    58f0:	21000128 	cmpgeui	r4,r4,4
    58f4:	4a400104 	addi	r9,r9,4
    58f8:	203ff81e 	bne	r4,zero,58dc <memcpy+0x78>
    58fc:	413fff04 	addi	r4,r8,-4
    5900:	2008d0ba 	srli	r4,r4,2
    5904:	318000cc 	andi	r6,r6,3
    5908:	31ffffc4 	addi	r7,r6,-1
    590c:	21000044 	addi	r4,r4,1
    5910:	200890ba 	slli	r4,r4,2
    5914:	1907883a 	add	r3,r3,r4
    5918:	290b883a 	add	r5,r5,r4
    591c:	3000041e 	bne	r6,zero,5930 <memcpy+0xcc>
    5920:	f800283a 	ret
    5924:	2007883a 	mov	r3,r4
    5928:	31ffffc4 	addi	r7,r6,-1
    592c:	303ffc26 	beq	r6,zero,5920 <memcpy+0xbc>
    5930:	39c00044 	addi	r7,r7,1
    5934:	19cf883a 	add	r7,r3,r7
    5938:	29800003 	ldbu	r6,0(r5)
    593c:	18c00044 	addi	r3,r3,1
    5940:	29400044 	addi	r5,r5,1
    5944:	19bfffc5 	stb	r6,-1(r3)
    5948:	38fffb1e 	bne	r7,r3,5938 <memcpy+0xd4>
    594c:	f800283a 	ret
    5950:	31ffffc4 	addi	r7,r6,-1
    5954:	2007883a 	mov	r3,r4
    5958:	003ff506 	br	5930 <memcpy+0xcc>
    595c:	400d883a 	mov	r6,r8
    5960:	003ff106 	br	5928 <memcpy+0xc4>

00005964 <memset>:
    5964:	20c000cc 	andi	r3,r4,3
    5968:	2005883a 	mov	r2,r4
    596c:	18003626 	beq	r3,zero,5a48 <memset+0xe4>
    5970:	31ffffc4 	addi	r7,r6,-1
    5974:	30003326 	beq	r6,zero,5a44 <memset+0xe0>
    5978:	2811883a 	mov	r8,r5
    597c:	2007883a 	mov	r3,r4
    5980:	00000306 	br	5990 <memset+0x2c>
    5984:	39ffffc4 	addi	r7,r7,-1
    5988:	39bfffe0 	cmpeqi	r6,r7,-1
    598c:	30002d1e 	bne	r6,zero,5a44 <memset+0xe0>
    5990:	18c00044 	addi	r3,r3,1
    5994:	198000cc 	andi	r6,r3,3
    5998:	1a3fffc5 	stb	r8,-1(r3)
    599c:	303ff91e 	bne	r6,zero,5984 <memset+0x20>
    59a0:	39000130 	cmpltui	r4,r7,4
    59a4:	2000221e 	bne	r4,zero,5a30 <memset+0xcc>
    59a8:	29003fcc 	andi	r4,r5,255
    59ac:	200c923a 	slli	r6,r4,8
    59b0:	3a000430 	cmpltui	r8,r7,16
    59b4:	3108b03a 	or	r4,r6,r4
    59b8:	200c943a 	slli	r6,r4,16
    59bc:	310cb03a 	or	r6,r6,r4
    59c0:	40000e1e 	bne	r8,zero,59fc <memset+0x98>
    59c4:	393ffc04 	addi	r4,r7,-16
    59c8:	2008d13a 	srli	r4,r4,4
    59cc:	21000044 	addi	r4,r4,1
    59d0:	2008913a 	slli	r4,r4,4
    59d4:	1909883a 	add	r4,r3,r4
    59d8:	19800015 	stw	r6,0(r3)
    59dc:	19800115 	stw	r6,4(r3)
    59e0:	19800215 	stw	r6,8(r3)
    59e4:	19800315 	stw	r6,12(r3)
    59e8:	18c00404 	addi	r3,r3,16
    59ec:	20fffa1e 	bne	r4,r3,59d8 <memset+0x74>
    59f0:	3900030c 	andi	r4,r7,12
    59f4:	39c003cc 	andi	r7,r7,15
    59f8:	20000d26 	beq	r4,zero,5a30 <memset+0xcc>
    59fc:	1811883a 	mov	r8,r3
    5a00:	42000104 	addi	r8,r8,4
    5a04:	3a09c83a 	sub	r4,r7,r8
    5a08:	1909883a 	add	r4,r3,r4
    5a0c:	21000128 	cmpgeui	r4,r4,4
    5a10:	41bfff15 	stw	r6,-4(r8)
    5a14:	203ffa1e 	bne	r4,zero,5a00 <memset+0x9c>
    5a18:	393fff04 	addi	r4,r7,-4
    5a1c:	2008d0ba 	srli	r4,r4,2
    5a20:	39c000cc 	andi	r7,r7,3
    5a24:	21000044 	addi	r4,r4,1
    5a28:	200890ba 	slli	r4,r4,2
    5a2c:	1907883a 	add	r3,r3,r4
    5a30:	38000426 	beq	r7,zero,5a44 <memset+0xe0>
    5a34:	19cf883a 	add	r7,r3,r7
    5a38:	18c00044 	addi	r3,r3,1
    5a3c:	197fffc5 	stb	r5,-1(r3)
    5a40:	38fffd1e 	bne	r7,r3,5a38 <memset+0xd4>
    5a44:	f800283a 	ret
    5a48:	2007883a 	mov	r3,r4
    5a4c:	300f883a 	mov	r7,r6
    5a50:	003fd306 	br	59a0 <memset+0x3c>

00005a54 <_Balloc>:
    5a54:	20801317 	ldw	r2,76(r4)
    5a58:	defffc04 	addi	sp,sp,-16
    5a5c:	dc400115 	stw	r17,4(sp)
    5a60:	dc000015 	stw	r16,0(sp)
    5a64:	dfc00315 	stw	ra,12(sp)
    5a68:	dc800215 	stw	r18,8(sp)
    5a6c:	2021883a 	mov	r16,r4
    5a70:	2823883a 	mov	r17,r5
    5a74:	10000e26 	beq	r2,zero,5ab0 <_Balloc+0x5c>
    5a78:	880690ba 	slli	r3,r17,2
    5a7c:	10c7883a 	add	r3,r2,r3
    5a80:	18800017 	ldw	r2,0(r3)
    5a84:	10001126 	beq	r2,zero,5acc <_Balloc+0x78>
    5a88:	11000017 	ldw	r4,0(r2)
    5a8c:	19000015 	stw	r4,0(r3)
    5a90:	10000415 	stw	zero,16(r2)
    5a94:	10000315 	stw	zero,12(r2)
    5a98:	dfc00317 	ldw	ra,12(sp)
    5a9c:	dc800217 	ldw	r18,8(sp)
    5aa0:	dc400117 	ldw	r17,4(sp)
    5aa4:	dc000017 	ldw	r16,0(sp)
    5aa8:	dec00404 	addi	sp,sp,16
    5aac:	f800283a 	ret
    5ab0:	01800844 	movi	r6,33
    5ab4:	01400104 	movi	r5,4
    5ab8:	00083500 	call	8350 <_calloc_r>
    5abc:	80801315 	stw	r2,76(r16)
    5ac0:	103fed1e 	bne	r2,zero,5a78 <_Balloc+0x24>
    5ac4:	0005883a 	mov	r2,zero
    5ac8:	003ff306 	br	5a98 <_Balloc+0x44>
    5acc:	04800044 	movi	r18,1
    5ad0:	9464983a 	sll	r18,r18,r17
    5ad4:	01400044 	movi	r5,1
    5ad8:	8009883a 	mov	r4,r16
    5adc:	91800144 	addi	r6,r18,5
    5ae0:	300c90ba 	slli	r6,r6,2
    5ae4:	00083500 	call	8350 <_calloc_r>
    5ae8:	103ff626 	beq	r2,zero,5ac4 <_Balloc+0x70>
    5aec:	14400115 	stw	r17,4(r2)
    5af0:	14800215 	stw	r18,8(r2)
    5af4:	003fe606 	br	5a90 <_Balloc+0x3c>

00005af8 <_Bfree>:
    5af8:	28000726 	beq	r5,zero,5b18 <_Bfree+0x20>
    5afc:	28c00117 	ldw	r3,4(r5)
    5b00:	20801317 	ldw	r2,76(r4)
    5b04:	180690ba 	slli	r3,r3,2
    5b08:	10c5883a 	add	r2,r2,r3
    5b0c:	10c00017 	ldw	r3,0(r2)
    5b10:	28c00015 	stw	r3,0(r5)
    5b14:	11400015 	stw	r5,0(r2)
    5b18:	f800283a 	ret

00005b1c <__multadd>:
    5b1c:	defffa04 	addi	sp,sp,-24
    5b20:	dc400115 	stw	r17,4(sp)
    5b24:	2c400417 	ldw	r17,16(r5)
    5b28:	dcc00315 	stw	r19,12(sp)
    5b2c:	dc800215 	stw	r18,8(sp)
    5b30:	dc000015 	stw	r16,0(sp)
    5b34:	dfc00515 	stw	ra,20(sp)
    5b38:	dd000415 	stw	r20,16(sp)
    5b3c:	2825883a 	mov	r18,r5
    5b40:	2027883a 	mov	r19,r4
    5b44:	3821883a 	mov	r16,r7
    5b48:	2a400504 	addi	r9,r5,20
    5b4c:	0015883a 	mov	r10,zero
    5b50:	48c00017 	ldw	r3,0(r9)
    5b54:	4a400104 	addi	r9,r9,4
    5b58:	52800044 	addi	r10,r10,1
    5b5c:	1a3fffcc 	andi	r8,r3,65535
    5b60:	4191383a 	mul	r8,r8,r6
    5b64:	180ed43a 	srli	r7,r3,16
    5b68:	4407883a 	add	r3,r8,r16
    5b6c:	1810d43a 	srli	r8,r3,16
    5b70:	398f383a 	mul	r7,r7,r6
    5b74:	18ffffcc 	andi	r3,r3,65535
    5b78:	3a0f883a 	add	r7,r7,r8
    5b7c:	3810943a 	slli	r8,r7,16
    5b80:	3820d43a 	srli	r16,r7,16
    5b84:	40c7883a 	add	r3,r8,r3
    5b88:	48ffff15 	stw	r3,-4(r9)
    5b8c:	547ff016 	blt	r10,r17,5b50 <__multadd+0x34>
    5b90:	80000826 	beq	r16,zero,5bb4 <__multadd+0x98>
    5b94:	90800217 	ldw	r2,8(r18)
    5b98:	88800f0e 	bge	r17,r2,5bd8 <__multadd+0xbc>
    5b9c:	88800144 	addi	r2,r17,5
    5ba0:	100490ba 	slli	r2,r2,2
    5ba4:	8c400044 	addi	r17,r17,1
    5ba8:	9085883a 	add	r2,r18,r2
    5bac:	14000015 	stw	r16,0(r2)
    5bb0:	94400415 	stw	r17,16(r18)
    5bb4:	9005883a 	mov	r2,r18
    5bb8:	dfc00517 	ldw	ra,20(sp)
    5bbc:	dd000417 	ldw	r20,16(sp)
    5bc0:	dcc00317 	ldw	r19,12(sp)
    5bc4:	dc800217 	ldw	r18,8(sp)
    5bc8:	dc400117 	ldw	r17,4(sp)
    5bcc:	dc000017 	ldw	r16,0(sp)
    5bd0:	dec00604 	addi	sp,sp,24
    5bd4:	f800283a 	ret
    5bd8:	91400117 	ldw	r5,4(r18)
    5bdc:	9809883a 	mov	r4,r19
    5be0:	29400044 	addi	r5,r5,1
    5be4:	0005a540 	call	5a54 <_Balloc>
    5be8:	1029883a 	mov	r20,r2
    5bec:	10001226 	beq	r2,zero,5c38 <__multadd+0x11c>
    5bf0:	91800417 	ldw	r6,16(r18)
    5bf4:	91400304 	addi	r5,r18,12
    5bf8:	11000304 	addi	r4,r2,12
    5bfc:	31800084 	addi	r6,r6,2
    5c00:	300c90ba 	slli	r6,r6,2
    5c04:	00058640 	call	5864 <memcpy>
    5c08:	90000926 	beq	r18,zero,5c30 <__multadd+0x114>
    5c0c:	90c00117 	ldw	r3,4(r18)
    5c10:	98801317 	ldw	r2,76(r19)
    5c14:	180690ba 	slli	r3,r3,2
    5c18:	10c5883a 	add	r2,r2,r3
    5c1c:	10c00017 	ldw	r3,0(r2)
    5c20:	90c00015 	stw	r3,0(r18)
    5c24:	14800015 	stw	r18,0(r2)
    5c28:	a025883a 	mov	r18,r20
    5c2c:	003fdb06 	br	5b9c <__multadd+0x80>
    5c30:	a025883a 	mov	r18,r20
    5c34:	003fd906 	br	5b9c <__multadd+0x80>
    5c38:	01c00074 	movhi	r7,1
    5c3c:	01000074 	movhi	r4,1
    5c40:	39c04b04 	addi	r7,r7,300
    5c44:	000d883a 	mov	r6,zero
    5c48:	01402d44 	movi	r5,181
    5c4c:	21006004 	addi	r4,r4,384
    5c50:	00082d80 	call	82d8 <__assert_func>

00005c54 <__s2b>:
    5c54:	defff904 	addi	sp,sp,-28
    5c58:	dc800215 	stw	r18,8(sp)
    5c5c:	dc000015 	stw	r16,0(sp)
    5c60:	2025883a 	mov	r18,r4
    5c64:	2821883a 	mov	r16,r5
    5c68:	39000204 	addi	r4,r7,8
    5c6c:	01400244 	movi	r5,9
    5c70:	dcc00315 	stw	r19,12(sp)
    5c74:	dc400115 	stw	r17,4(sp)
    5c78:	dfc00615 	stw	ra,24(sp)
    5c7c:	3823883a 	mov	r17,r7
    5c80:	dd400515 	stw	r21,20(sp)
    5c84:	dd000415 	stw	r20,16(sp)
    5c88:	3027883a 	mov	r19,r6
    5c8c:	000a9580 	call	a958 <__divsi3>
    5c90:	88c00290 	cmplti	r3,r17,10
    5c94:	1800341e 	bne	r3,zero,5d68 <__s2b+0x114>
    5c98:	00c00044 	movi	r3,1
    5c9c:	000b883a 	mov	r5,zero
    5ca0:	18c7883a 	add	r3,r3,r3
    5ca4:	29400044 	addi	r5,r5,1
    5ca8:	18bffd16 	blt	r3,r2,5ca0 <__s2b+0x4c>
    5cac:	9009883a 	mov	r4,r18
    5cb0:	0005a540 	call	5a54 <_Balloc>
    5cb4:	100b883a 	mov	r5,r2
    5cb8:	10002d26 	beq	r2,zero,5d70 <__s2b+0x11c>
    5cbc:	d8800717 	ldw	r2,28(sp)
    5cc0:	28800515 	stw	r2,20(r5)
    5cc4:	00800044 	movi	r2,1
    5cc8:	28800415 	stw	r2,16(r5)
    5ccc:	98800290 	cmplti	r2,r19,10
    5cd0:	1000221e 	bne	r2,zero,5d5c <__s2b+0x108>
    5cd4:	85400244 	addi	r21,r16,9
    5cd8:	a829883a 	mov	r20,r21
    5cdc:	84e1883a 	add	r16,r16,r19
    5ce0:	a1c00007 	ldb	r7,0(r20)
    5ce4:	01800284 	movi	r6,10
    5ce8:	9009883a 	mov	r4,r18
    5cec:	39fff404 	addi	r7,r7,-48
    5cf0:	0005b1c0 	call	5b1c <__multadd>
    5cf4:	a5000044 	addi	r20,r20,1
    5cf8:	100b883a 	mov	r5,r2
    5cfc:	a43ff81e 	bne	r20,r16,5ce0 <__s2b+0x8c>
    5d00:	9c3ffe04 	addi	r16,r19,-8
    5d04:	ac21883a 	add	r16,r21,r16
    5d08:	9c400a0e 	bge	r19,r17,5d34 <__s2b+0xe0>
    5d0c:	8ce3c83a 	sub	r17,r17,r19
    5d10:	8463883a 	add	r17,r16,r17
    5d14:	81c00007 	ldb	r7,0(r16)
    5d18:	01800284 	movi	r6,10
    5d1c:	9009883a 	mov	r4,r18
    5d20:	39fff404 	addi	r7,r7,-48
    5d24:	0005b1c0 	call	5b1c <__multadd>
    5d28:	84000044 	addi	r16,r16,1
    5d2c:	100b883a 	mov	r5,r2
    5d30:	8c3ff81e 	bne	r17,r16,5d14 <__s2b+0xc0>
    5d34:	2805883a 	mov	r2,r5
    5d38:	dfc00617 	ldw	ra,24(sp)
    5d3c:	dd400517 	ldw	r21,20(sp)
    5d40:	dd000417 	ldw	r20,16(sp)
    5d44:	dcc00317 	ldw	r19,12(sp)
    5d48:	dc800217 	ldw	r18,8(sp)
    5d4c:	dc400117 	ldw	r17,4(sp)
    5d50:	dc000017 	ldw	r16,0(sp)
    5d54:	dec00704 	addi	sp,sp,28
    5d58:	f800283a 	ret
    5d5c:	84000284 	addi	r16,r16,10
    5d60:	04c00244 	movi	r19,9
    5d64:	003fe806 	br	5d08 <__s2b+0xb4>
    5d68:	000b883a 	mov	r5,zero
    5d6c:	003fcf06 	br	5cac <__s2b+0x58>
    5d70:	01c00074 	movhi	r7,1
    5d74:	01000074 	movhi	r4,1
    5d78:	39c04b04 	addi	r7,r7,300
    5d7c:	000d883a 	mov	r6,zero
    5d80:	01403384 	movi	r5,206
    5d84:	21006004 	addi	r4,r4,384
    5d88:	00082d80 	call	82d8 <__assert_func>

00005d8c <__hi0bits>:
    5d8c:	20bfffec 	andhi	r2,r4,65535
    5d90:	1000131e 	bne	r2,zero,5de0 <__hi0bits+0x54>
    5d94:	2008943a 	slli	r4,r4,16
    5d98:	00800404 	movi	r2,16
    5d9c:	20ffc02c 	andhi	r3,r4,65280
    5da0:	1800021e 	bne	r3,zero,5dac <__hi0bits+0x20>
    5da4:	2008923a 	slli	r4,r4,8
    5da8:	10800204 	addi	r2,r2,8
    5dac:	20fc002c 	andhi	r3,r4,61440
    5db0:	1800021e 	bne	r3,zero,5dbc <__hi0bits+0x30>
    5db4:	2008913a 	slli	r4,r4,4
    5db8:	10800104 	addi	r2,r2,4
    5dbc:	20f0002c 	andhi	r3,r4,49152
    5dc0:	1800021e 	bne	r3,zero,5dcc <__hi0bits+0x40>
    5dc4:	200890ba 	slli	r4,r4,2
    5dc8:	10800084 	addi	r2,r2,2
    5dcc:	20000316 	blt	r4,zero,5ddc <__hi0bits+0x50>
    5dd0:	2110002c 	andhi	r4,r4,16384
    5dd4:	10800044 	addi	r2,r2,1
    5dd8:	20000326 	beq	r4,zero,5de8 <__hi0bits+0x5c>
    5ddc:	f800283a 	ret
    5de0:	0005883a 	mov	r2,zero
    5de4:	003fed06 	br	5d9c <__hi0bits+0x10>
    5de8:	00800804 	movi	r2,32
    5dec:	f800283a 	ret

00005df0 <__lo0bits>:
    5df0:	20c00017 	ldw	r3,0(r4)
    5df4:	188001cc 	andi	r2,r3,7
    5df8:	10000826 	beq	r2,zero,5e1c <__lo0bits+0x2c>
    5dfc:	1880004c 	andi	r2,r3,1
    5e00:	10001f1e 	bne	r2,zero,5e80 <__lo0bits+0x90>
    5e04:	1880008c 	andi	r2,r3,2
    5e08:	10002126 	beq	r2,zero,5e90 <__lo0bits+0xa0>
    5e0c:	1806d07a 	srli	r3,r3,1
    5e10:	00800044 	movi	r2,1
    5e14:	20c00015 	stw	r3,0(r4)
    5e18:	f800283a 	ret
    5e1c:	18bfffcc 	andi	r2,r3,65535
    5e20:	10001426 	beq	r2,zero,5e74 <__lo0bits+0x84>
    5e24:	0005883a 	mov	r2,zero
    5e28:	19403fcc 	andi	r5,r3,255
    5e2c:	2800021e 	bne	r5,zero,5e38 <__lo0bits+0x48>
    5e30:	1806d23a 	srli	r3,r3,8
    5e34:	10800204 	addi	r2,r2,8
    5e38:	194003cc 	andi	r5,r3,15
    5e3c:	2800021e 	bne	r5,zero,5e48 <__lo0bits+0x58>
    5e40:	1806d13a 	srli	r3,r3,4
    5e44:	10800104 	addi	r2,r2,4
    5e48:	194000cc 	andi	r5,r3,3
    5e4c:	2800021e 	bne	r5,zero,5e58 <__lo0bits+0x68>
    5e50:	1806d0ba 	srli	r3,r3,2
    5e54:	10800084 	addi	r2,r2,2
    5e58:	1940004c 	andi	r5,r3,1
    5e5c:	2800031e 	bne	r5,zero,5e6c <__lo0bits+0x7c>
    5e60:	1806d07a 	srli	r3,r3,1
    5e64:	10800044 	addi	r2,r2,1
    5e68:	18000726 	beq	r3,zero,5e88 <__lo0bits+0x98>
    5e6c:	20c00015 	stw	r3,0(r4)
    5e70:	f800283a 	ret
    5e74:	1806d43a 	srli	r3,r3,16
    5e78:	00800404 	movi	r2,16
    5e7c:	003fea06 	br	5e28 <__lo0bits+0x38>
    5e80:	0005883a 	mov	r2,zero
    5e84:	f800283a 	ret
    5e88:	00800804 	movi	r2,32
    5e8c:	f800283a 	ret
    5e90:	1806d0ba 	srli	r3,r3,2
    5e94:	00800084 	movi	r2,2
    5e98:	20c00015 	stw	r3,0(r4)
    5e9c:	f800283a 	ret

00005ea0 <__i2b>:
    5ea0:	20c01317 	ldw	r3,76(r4)
    5ea4:	defffd04 	addi	sp,sp,-12
    5ea8:	dc400115 	stw	r17,4(sp)
    5eac:	dc000015 	stw	r16,0(sp)
    5eb0:	dfc00215 	stw	ra,8(sp)
    5eb4:	2021883a 	mov	r16,r4
    5eb8:	2823883a 	mov	r17,r5
    5ebc:	18000d26 	beq	r3,zero,5ef4 <__i2b+0x54>
    5ec0:	18800117 	ldw	r2,4(r3)
    5ec4:	10001826 	beq	r2,zero,5f28 <__i2b+0x88>
    5ec8:	11000017 	ldw	r4,0(r2)
    5ecc:	19000115 	stw	r4,4(r3)
    5ed0:	00c00044 	movi	r3,1
    5ed4:	10000315 	stw	zero,12(r2)
    5ed8:	14400515 	stw	r17,20(r2)
    5edc:	10c00415 	stw	r3,16(r2)
    5ee0:	dfc00217 	ldw	ra,8(sp)
    5ee4:	dc400117 	ldw	r17,4(sp)
    5ee8:	dc000017 	ldw	r16,0(sp)
    5eec:	dec00304 	addi	sp,sp,12
    5ef0:	f800283a 	ret
    5ef4:	01800844 	movi	r6,33
    5ef8:	01400104 	movi	r5,4
    5efc:	00083500 	call	8350 <_calloc_r>
    5f00:	80801315 	stw	r2,76(r16)
    5f04:	1007883a 	mov	r3,r2
    5f08:	103fed1e 	bne	r2,zero,5ec0 <__i2b+0x20>
    5f0c:	01c00074 	movhi	r7,1
    5f10:	01000074 	movhi	r4,1
    5f14:	39c04b04 	addi	r7,r7,300
    5f18:	000d883a 	mov	r6,zero
    5f1c:	01405004 	movi	r5,320
    5f20:	21006004 	addi	r4,r4,384
    5f24:	00082d80 	call	82d8 <__assert_func>
    5f28:	01800704 	movi	r6,28
    5f2c:	01400044 	movi	r5,1
    5f30:	8009883a 	mov	r4,r16
    5f34:	00083500 	call	8350 <_calloc_r>
    5f38:	103ff426 	beq	r2,zero,5f0c <__i2b+0x6c>
    5f3c:	00c00044 	movi	r3,1
    5f40:	10c00115 	stw	r3,4(r2)
    5f44:	00c00084 	movi	r3,2
    5f48:	10c00215 	stw	r3,8(r2)
    5f4c:	003fe006 	br	5ed0 <__i2b+0x30>

00005f50 <__multiply>:
    5f50:	defff804 	addi	sp,sp,-32
    5f54:	dd400515 	stw	r21,20(sp)
    5f58:	dd000415 	stw	r20,16(sp)
    5f5c:	35400417 	ldw	r21,16(r6)
    5f60:	2d000417 	ldw	r20,16(r5)
    5f64:	dd800615 	stw	r22,24(sp)
    5f68:	dcc00315 	stw	r19,12(sp)
    5f6c:	dfc00715 	stw	ra,28(sp)
    5f70:	dc800215 	stw	r18,8(sp)
    5f74:	dc400115 	stw	r17,4(sp)
    5f78:	dc000015 	stw	r16,0(sp)
    5f7c:	282d883a 	mov	r22,r5
    5f80:	3027883a 	mov	r19,r6
    5f84:	a5400516 	blt	r20,r21,5f9c <__multiply+0x4c>
    5f88:	a807883a 	mov	r3,r21
    5f8c:	2827883a 	mov	r19,r5
    5f90:	a02b883a 	mov	r21,r20
    5f94:	302d883a 	mov	r22,r6
    5f98:	1829883a 	mov	r20,r3
    5f9c:	98800217 	ldw	r2,8(r19)
    5fa0:	ad23883a 	add	r17,r21,r20
    5fa4:	99400117 	ldw	r5,4(r19)
    5fa8:	1440010e 	bge	r2,r17,5fb0 <__multiply+0x60>
    5fac:	29400044 	addi	r5,r5,1
    5fb0:	0005a540 	call	5a54 <_Balloc>
    5fb4:	1025883a 	mov	r18,r2
    5fb8:	10007326 	beq	r2,zero,6188 <__multiply+0x238>
    5fbc:	882090ba 	slli	r16,r17,2
    5fc0:	11000504 	addi	r4,r2,20
    5fc4:	2421883a 	add	r16,r4,r16
    5fc8:	2400082e 	bgeu	r4,r16,5fec <__multiply+0x9c>
    5fcc:	808dc83a 	sub	r6,r16,r2
    5fd0:	31bffac4 	addi	r6,r6,-21
    5fd4:	300cd0ba 	srli	r6,r6,2
    5fd8:	000b883a 	mov	r5,zero
    5fdc:	31800044 	addi	r6,r6,1
    5fe0:	300c90ba 	slli	r6,r6,2
    5fe4:	00059640 	call	5964 <memset>
    5fe8:	1009883a 	mov	r4,r2
    5fec:	a01290ba 	slli	r9,r20,2
    5ff0:	a80e90ba 	slli	r7,r21,2
    5ff4:	b0800504 	addi	r2,r22,20
    5ff8:	9a800504 	addi	r10,r19,20
    5ffc:	1253883a 	add	r9,r2,r9
    6000:	51cf883a 	add	r7,r10,r7
    6004:	12404b2e 	bgeu	r2,r9,6134 <__multiply+0x1e4>
    6008:	98c00544 	addi	r3,r19,21
    600c:	38c05c36 	bltu	r7,r3,6180 <__multiply+0x230>
    6010:	3cd1c83a 	sub	r8,r7,r19
    6014:	423ffac4 	addi	r8,r8,-21
    6018:	4010d0ba 	srli	r8,r8,2
    601c:	42000044 	addi	r8,r8,1
    6020:	401090ba 	slli	r8,r8,2
    6024:	00000506 	br	603c <__multiply+0xec>
    6028:	6018d43a 	srli	r12,r12,16
    602c:	6000231e 	bne	r12,zero,60bc <__multiply+0x16c>
    6030:	10800104 	addi	r2,r2,4
    6034:	21000104 	addi	r4,r4,4
    6038:	12403e2e 	bgeu	r2,r9,6134 <__multiply+0x1e4>
    603c:	13000017 	ldw	r12,0(r2)
    6040:	63bfffcc 	andi	r14,r12,65535
    6044:	703ff826 	beq	r14,zero,6028 <__multiply+0xd8>
    6048:	201b883a 	mov	r13,r4
    604c:	5019883a 	mov	r12,r10
    6050:	001f883a 	mov	r15,zero
    6054:	61400017 	ldw	r5,0(r12)
    6058:	6ac00017 	ldw	r11,0(r13)
    605c:	6b400104 	addi	r13,r13,4
    6060:	29bfffcc 	andi	r6,r5,65535
    6064:	338d383a 	mul	r6,r6,r14
    6068:	2806d43a 	srli	r3,r5,16
    606c:	597fffcc 	andi	r5,r11,65535
    6070:	314d883a 	add	r6,r6,r5
    6074:	33cd883a 	add	r6,r6,r15
    6078:	1b87383a 	mul	r3,r3,r14
    607c:	5816d43a 	srli	r11,r11,16
    6080:	300ad43a 	srli	r5,r6,16
    6084:	31bfffcc 	andi	r6,r6,65535
    6088:	1ac7883a 	add	r3,r3,r11
    608c:	1947883a 	add	r3,r3,r5
    6090:	180a943a 	slli	r5,r3,16
    6094:	63000104 	addi	r12,r12,4
    6098:	181ed43a 	srli	r15,r3,16
    609c:	298cb03a 	or	r6,r5,r6
    60a0:	69bfff15 	stw	r6,-4(r13)
    60a4:	61ffeb36 	bltu	r12,r7,6054 <__multiply+0x104>
    60a8:	2207883a 	add	r3,r4,r8
    60ac:	1bc00015 	stw	r15,0(r3)
    60b0:	13000017 	ldw	r12,0(r2)
    60b4:	6018d43a 	srli	r12,r12,16
    60b8:	603fdd26 	beq	r12,zero,6030 <__multiply+0xe0>
    60bc:	20c00017 	ldw	r3,0(r4)
    60c0:	201b883a 	mov	r13,r4
    60c4:	5017883a 	mov	r11,r10
    60c8:	181d883a 	mov	r14,r3
    60cc:	001f883a 	mov	r15,zero
    60d0:	5980000b 	ldhu	r6,0(r11)
    60d4:	703ed43a 	srli	ra,r14,16
    60d8:	197fffcc 	andi	r5,r3,65535
    60dc:	3307383a 	mul	r3,r6,r12
    60e0:	5ac00104 	addi	r11,r11,4
    60e4:	6b800117 	ldw	r14,4(r13)
    60e8:	1fc7883a 	add	r3,r3,ra
    60ec:	1bc7883a 	add	r3,r3,r15
    60f0:	181e943a 	slli	r15,r3,16
    60f4:	180cd43a 	srli	r6,r3,16
    60f8:	77ffffcc 	andi	ra,r14,65535
    60fc:	794ab03a 	or	r5,r15,r5
    6100:	69400015 	stw	r5,0(r13)
    6104:	58ffff8b 	ldhu	r3,-2(r11)
    6108:	6b400104 	addi	r13,r13,4
    610c:	1b07383a 	mul	r3,r3,r12
    6110:	1fc7883a 	add	r3,r3,ra
    6114:	1987883a 	add	r3,r3,r6
    6118:	181ed43a 	srli	r15,r3,16
    611c:	59ffec36 	bltu	r11,r7,60d0 <__multiply+0x180>
    6120:	220b883a 	add	r5,r4,r8
    6124:	28c00015 	stw	r3,0(r5)
    6128:	10800104 	addi	r2,r2,4
    612c:	21000104 	addi	r4,r4,4
    6130:	127fc236 	bltu	r2,r9,603c <__multiply+0xec>
    6134:	04400316 	blt	zero,r17,6144 <__multiply+0x1f4>
    6138:	00000506 	br	6150 <__multiply+0x200>
    613c:	8c7fffc4 	addi	r17,r17,-1
    6140:	88000326 	beq	r17,zero,6150 <__multiply+0x200>
    6144:	80bfff17 	ldw	r2,-4(r16)
    6148:	843fff04 	addi	r16,r16,-4
    614c:	103ffb26 	beq	r2,zero,613c <__multiply+0x1ec>
    6150:	9005883a 	mov	r2,r18
    6154:	94400415 	stw	r17,16(r18)
    6158:	dfc00717 	ldw	ra,28(sp)
    615c:	dd800617 	ldw	r22,24(sp)
    6160:	dd400517 	ldw	r21,20(sp)
    6164:	dd000417 	ldw	r20,16(sp)
    6168:	dcc00317 	ldw	r19,12(sp)
    616c:	dc800217 	ldw	r18,8(sp)
    6170:	dc400117 	ldw	r17,4(sp)
    6174:	dc000017 	ldw	r16,0(sp)
    6178:	dec00804 	addi	sp,sp,32
    617c:	f800283a 	ret
    6180:	02000104 	movi	r8,4
    6184:	003fad06 	br	603c <__multiply+0xec>
    6188:	01c00074 	movhi	r7,1
    618c:	01000074 	movhi	r4,1
    6190:	39c04b04 	addi	r7,r7,300
    6194:	000d883a 	mov	r6,zero
    6198:	01405744 	movi	r5,349
    619c:	21006004 	addi	r4,r4,384
    61a0:	00082d80 	call	82d8 <__assert_func>

000061a4 <__pow5mult>:
    61a4:	defffb04 	addi	sp,sp,-20
    61a8:	dcc00315 	stw	r19,12(sp)
    61ac:	dc000015 	stw	r16,0(sp)
    61b0:	dfc00415 	stw	ra,16(sp)
    61b4:	dc800215 	stw	r18,8(sp)
    61b8:	dc400115 	stw	r17,4(sp)
    61bc:	308000cc 	andi	r2,r6,3
    61c0:	3021883a 	mov	r16,r6
    61c4:	2027883a 	mov	r19,r4
    61c8:	10002d1e 	bne	r2,zero,6280 <__pow5mult+0xdc>
    61cc:	2825883a 	mov	r18,r5
    61d0:	8021d0ba 	srai	r16,r16,2
    61d4:	80001926 	beq	r16,zero,623c <__pow5mult+0x98>
    61d8:	9c401217 	ldw	r17,72(r19)
    61dc:	8800061e 	bne	r17,zero,61f8 <__pow5mult+0x54>
    61e0:	00002f06 	br	62a0 <__pow5mult+0xfc>
    61e4:	8021d07a 	srai	r16,r16,1
    61e8:	80001426 	beq	r16,zero,623c <__pow5mult+0x98>
    61ec:	88800017 	ldw	r2,0(r17)
    61f0:	10001a26 	beq	r2,zero,625c <__pow5mult+0xb8>
    61f4:	1023883a 	mov	r17,r2
    61f8:	8080004c 	andi	r2,r16,1
    61fc:	103ff926 	beq	r2,zero,61e4 <__pow5mult+0x40>
    6200:	880d883a 	mov	r6,r17
    6204:	900b883a 	mov	r5,r18
    6208:	9809883a 	mov	r4,r19
    620c:	0005f500 	call	5f50 <__multiply>
    6210:	90001926 	beq	r18,zero,6278 <__pow5mult+0xd4>
    6214:	91000117 	ldw	r4,4(r18)
    6218:	98c01317 	ldw	r3,76(r19)
    621c:	8021d07a 	srai	r16,r16,1
    6220:	200890ba 	slli	r4,r4,2
    6224:	1907883a 	add	r3,r3,r4
    6228:	19000017 	ldw	r4,0(r3)
    622c:	91000015 	stw	r4,0(r18)
    6230:	1c800015 	stw	r18,0(r3)
    6234:	1025883a 	mov	r18,r2
    6238:	803fec1e 	bne	r16,zero,61ec <__pow5mult+0x48>
    623c:	9005883a 	mov	r2,r18
    6240:	dfc00417 	ldw	ra,16(sp)
    6244:	dcc00317 	ldw	r19,12(sp)
    6248:	dc800217 	ldw	r18,8(sp)
    624c:	dc400117 	ldw	r17,4(sp)
    6250:	dc000017 	ldw	r16,0(sp)
    6254:	dec00504 	addi	sp,sp,20
    6258:	f800283a 	ret
    625c:	880d883a 	mov	r6,r17
    6260:	880b883a 	mov	r5,r17
    6264:	9809883a 	mov	r4,r19
    6268:	0005f500 	call	5f50 <__multiply>
    626c:	88800015 	stw	r2,0(r17)
    6270:	10000015 	stw	zero,0(r2)
    6274:	003fdf06 	br	61f4 <__pow5mult+0x50>
    6278:	1025883a 	mov	r18,r2
    627c:	003fd906 	br	61e4 <__pow5mult+0x40>
    6280:	100490ba 	slli	r2,r2,2
    6284:	00c00074 	movhi	r3,1
    6288:	000f883a 	mov	r7,zero
    628c:	10c7883a 	add	r3,r2,r3
    6290:	19806f17 	ldw	r6,444(r3)
    6294:	0005b1c0 	call	5b1c <__multadd>
    6298:	1025883a 	mov	r18,r2
    629c:	003fcc06 	br	61d0 <__pow5mult+0x2c>
    62a0:	01400044 	movi	r5,1
    62a4:	9809883a 	mov	r4,r19
    62a8:	0005a540 	call	5a54 <_Balloc>
    62ac:	1023883a 	mov	r17,r2
    62b0:	10000726 	beq	r2,zero,62d0 <__pow5mult+0x12c>
    62b4:	00809c44 	movi	r2,625
    62b8:	88800515 	stw	r2,20(r17)
    62bc:	00800044 	movi	r2,1
    62c0:	88800415 	stw	r2,16(r17)
    62c4:	9c401215 	stw	r17,72(r19)
    62c8:	88000015 	stw	zero,0(r17)
    62cc:	003fca06 	br	61f8 <__pow5mult+0x54>
    62d0:	01c00074 	movhi	r7,1
    62d4:	01000074 	movhi	r4,1
    62d8:	39c04b04 	addi	r7,r7,300
    62dc:	000d883a 	mov	r6,zero
    62e0:	01405004 	movi	r5,320
    62e4:	21006004 	addi	r4,r4,384
    62e8:	00082d80 	call	82d8 <__assert_func>

000062ec <__lshift>:
    62ec:	defff804 	addi	sp,sp,-32
    62f0:	dd800615 	stw	r22,24(sp)
    62f4:	dc000015 	stw	r16,0(sp)
    62f8:	302dd17a 	srai	r22,r6,5
    62fc:	2c000417 	ldw	r16,16(r5)
    6300:	28800217 	ldw	r2,8(r5)
    6304:	dd000415 	stw	r20,16(sp)
    6308:	b421883a 	add	r16,r22,r16
    630c:	dcc00315 	stw	r19,12(sp)
    6310:	dc800215 	stw	r18,8(sp)
    6314:	dc400115 	stw	r17,4(sp)
    6318:	dfc00715 	stw	ra,28(sp)
    631c:	dd400515 	stw	r21,20(sp)
    6320:	85000044 	addi	r20,r16,1
    6324:	2827883a 	mov	r19,r5
    6328:	3025883a 	mov	r18,r6
    632c:	29400117 	ldw	r5,4(r5)
    6330:	2023883a 	mov	r17,r4
    6334:	1500030e 	bge	r2,r20,6344 <__lshift+0x58>
    6338:	1085883a 	add	r2,r2,r2
    633c:	29400044 	addi	r5,r5,1
    6340:	153ffd16 	blt	r2,r20,6338 <__lshift+0x4c>
    6344:	8809883a 	mov	r4,r17
    6348:	0005a540 	call	5a54 <_Balloc>
    634c:	102b883a 	mov	r21,r2
    6350:	10004126 	beq	r2,zero,6458 <__lshift+0x16c>
    6354:	11000504 	addi	r4,r2,20
    6358:	0580050e 	bge	zero,r22,6370 <__lshift+0x84>
    635c:	b02c90ba 	slli	r22,r22,2
    6360:	000b883a 	mov	r5,zero
    6364:	b00d883a 	mov	r6,r22
    6368:	00059640 	call	5964 <memset>
    636c:	1589883a 	add	r4,r2,r22
    6370:	9a000417 	ldw	r8,16(r19)
    6374:	98c00504 	addi	r3,r19,20
    6378:	948007cc 	andi	r18,r18,31
    637c:	401090ba 	slli	r8,r8,2
    6380:	1a11883a 	add	r8,r3,r8
    6384:	90002c26 	beq	r18,zero,6438 <__lshift+0x14c>
    6388:	01400804 	movi	r5,32
    638c:	2c8bc83a 	sub	r5,r5,r18
    6390:	2005883a 	mov	r2,r4
    6394:	000f883a 	mov	r7,zero
    6398:	19800017 	ldw	r6,0(r3)
    639c:	10800104 	addi	r2,r2,4
    63a0:	18c00104 	addi	r3,r3,4
    63a4:	348c983a 	sll	r6,r6,r18
    63a8:	31ccb03a 	or	r6,r6,r7
    63ac:	11bfff15 	stw	r6,-4(r2)
    63b0:	19bfff17 	ldw	r6,-4(r3)
    63b4:	314ed83a 	srl	r7,r6,r5
    63b8:	1a3ff736 	bltu	r3,r8,6398 <__lshift+0xac>
    63bc:	98800544 	addi	r2,r19,21
    63c0:	40802336 	bltu	r8,r2,6450 <__lshift+0x164>
    63c4:	44c7c83a 	sub	r3,r8,r19
    63c8:	18fffac4 	addi	r3,r3,-21
    63cc:	1806d0ba 	srli	r3,r3,2
    63d0:	18c00044 	addi	r3,r3,1
    63d4:	180690ba 	slli	r3,r3,2
    63d8:	20c9883a 	add	r4,r4,r3
    63dc:	21c00015 	stw	r7,0(r4)
    63e0:	38000126 	beq	r7,zero,63e8 <__lshift+0xfc>
    63e4:	a021883a 	mov	r16,r20
    63e8:	ac000415 	stw	r16,16(r21)
    63ec:	98000726 	beq	r19,zero,640c <__lshift+0x120>
    63f0:	98c00117 	ldw	r3,4(r19)
    63f4:	88801317 	ldw	r2,76(r17)
    63f8:	180690ba 	slli	r3,r3,2
    63fc:	10c5883a 	add	r2,r2,r3
    6400:	10c00017 	ldw	r3,0(r2)
    6404:	98c00015 	stw	r3,0(r19)
    6408:	14c00015 	stw	r19,0(r2)
    640c:	a805883a 	mov	r2,r21
    6410:	dfc00717 	ldw	ra,28(sp)
    6414:	dd800617 	ldw	r22,24(sp)
    6418:	dd400517 	ldw	r21,20(sp)
    641c:	dd000417 	ldw	r20,16(sp)
    6420:	dcc00317 	ldw	r19,12(sp)
    6424:	dc800217 	ldw	r18,8(sp)
    6428:	dc400117 	ldw	r17,4(sp)
    642c:	dc000017 	ldw	r16,0(sp)
    6430:	dec00804 	addi	sp,sp,32
    6434:	f800283a 	ret
    6438:	18800017 	ldw	r2,0(r3)
    643c:	18c00104 	addi	r3,r3,4
    6440:	21000104 	addi	r4,r4,4
    6444:	20bfff15 	stw	r2,-4(r4)
    6448:	1a3ffb36 	bltu	r3,r8,6438 <__lshift+0x14c>
    644c:	003fe606 	br	63e8 <__lshift+0xfc>
    6450:	00c00104 	movi	r3,4
    6454:	003fe006 	br	63d8 <__lshift+0xec>
    6458:	01c00074 	movhi	r7,1
    645c:	01000074 	movhi	r4,1
    6460:	39c04b04 	addi	r7,r7,300
    6464:	000d883a 	mov	r6,zero
    6468:	01407644 	movi	r5,473
    646c:	21006004 	addi	r4,r4,384
    6470:	00082d80 	call	82d8 <__assert_func>

00006474 <__mcmp>:
    6474:	21800417 	ldw	r6,16(r4)
    6478:	28c00417 	ldw	r3,16(r5)
    647c:	30c5c83a 	sub	r2,r6,r3
    6480:	30c00e1e 	bne	r6,r3,64bc <__mcmp+0x48>
    6484:	180690ba 	slli	r3,r3,2
    6488:	21c00504 	addi	r7,r4,20
    648c:	29400504 	addi	r5,r5,20
    6490:	38c9883a 	add	r4,r7,r3
    6494:	28c7883a 	add	r3,r5,r3
    6498:	00000106 	br	64a0 <__mcmp+0x2c>
    649c:	3900082e 	bgeu	r7,r4,64c0 <__mcmp+0x4c>
    64a0:	21bfff17 	ldw	r6,-4(r4)
    64a4:	197fff17 	ldw	r5,-4(r3)
    64a8:	213fff04 	addi	r4,r4,-4
    64ac:	18ffff04 	addi	r3,r3,-4
    64b0:	317ffa26 	beq	r6,r5,649c <__mcmp+0x28>
    64b4:	3140032e 	bgeu	r6,r5,64c4 <__mcmp+0x50>
    64b8:	00bfffc4 	movi	r2,-1
    64bc:	f800283a 	ret
    64c0:	f800283a 	ret
    64c4:	00800044 	movi	r2,1
    64c8:	f800283a 	ret

000064cc <__mdiff>:
    64cc:	28800417 	ldw	r2,16(r5)
    64d0:	30c00417 	ldw	r3,16(r6)
    64d4:	defffc04 	addi	sp,sp,-16
    64d8:	dc800215 	stw	r18,8(sp)
    64dc:	dc400115 	stw	r17,4(sp)
    64e0:	dc000015 	stw	r16,0(sp)
    64e4:	dfc00315 	stw	ra,12(sp)
    64e8:	2823883a 	mov	r17,r5
    64ec:	3021883a 	mov	r16,r6
    64f0:	10e5c83a 	sub	r18,r2,r3
    64f4:	10c0641e 	bne	r2,r3,6688 <__mdiff+0x1bc>
    64f8:	180c90ba 	slli	r6,r3,2
    64fc:	29400504 	addi	r5,r5,20
    6500:	80c00504 	addi	r3,r16,20
    6504:	2985883a 	add	r2,r5,r6
    6508:	1987883a 	add	r3,r3,r6
    650c:	00000106 	br	6514 <__mdiff+0x48>
    6510:	2880642e 	bgeu	r5,r2,66a4 <__mdiff+0x1d8>
    6514:	11bfff17 	ldw	r6,-4(r2)
    6518:	19ffff17 	ldw	r7,-4(r3)
    651c:	10bfff04 	addi	r2,r2,-4
    6520:	18ffff04 	addi	r3,r3,-4
    6524:	31fffa26 	beq	r6,r7,6510 <__mdiff+0x44>
    6528:	31c05236 	bltu	r6,r7,6674 <__mdiff+0x1a8>
    652c:	89400117 	ldw	r5,4(r17)
    6530:	0005a540 	call	5a54 <_Balloc>
    6534:	10006226 	beq	r2,zero,66c0 <__mdiff+0x1f4>
    6538:	8a400417 	ldw	r9,16(r17)
    653c:	83000417 	ldw	r12,16(r16)
    6540:	8ac00504 	addi	r11,r17,20
    6544:	481090ba 	slli	r8,r9,2
    6548:	601890ba 	slli	r12,r12,2
    654c:	81800504 	addi	r6,r16,20
    6550:	13400504 	addi	r13,r2,20
    6554:	14800315 	stw	r18,12(r2)
    6558:	5a11883a 	add	r8,r11,r8
    655c:	3319883a 	add	r12,r6,r12
    6560:	681d883a 	mov	r14,r13
    6564:	5815883a 	mov	r10,r11
    6568:	0007883a 	mov	r3,zero
    656c:	51000017 	ldw	r4,0(r10)
    6570:	31c00017 	ldw	r7,0(r6)
    6574:	73800104 	addi	r14,r14,4
    6578:	217fffcc 	andi	r5,r4,65535
    657c:	28cb883a 	add	r5,r5,r3
    6580:	38ffffcc 	andi	r3,r7,65535
    6584:	28cbc83a 	sub	r5,r5,r3
    6588:	380ed43a 	srli	r7,r7,16
    658c:	2006d43a 	srli	r3,r4,16
    6590:	2809d43a 	srai	r4,r5,16
    6594:	297fffcc 	andi	r5,r5,65535
    6598:	19c7c83a 	sub	r3,r3,r7
    659c:	1907883a 	add	r3,r3,r4
    65a0:	1808943a 	slli	r4,r3,16
    65a4:	31800104 	addi	r6,r6,4
    65a8:	1807d43a 	srai	r3,r3,16
    65ac:	214ab03a 	or	r5,r4,r5
    65b0:	717fff15 	stw	r5,-4(r14)
    65b4:	52800104 	addi	r10,r10,4
    65b8:	333fec36 	bltu	r6,r12,656c <__mdiff+0xa0>
    65bc:	640fc83a 	sub	r7,r12,r16
    65c0:	39fffac4 	addi	r7,r7,-21
    65c4:	84000544 	addi	r16,r16,21
    65c8:	380ed0ba 	srli	r7,r7,2
    65cc:	64003336 	bltu	r12,r16,669c <__mdiff+0x1d0>
    65d0:	380890ba 	slli	r4,r7,2
    65d4:	6909883a 	add	r4,r13,r4
    65d8:	64002e36 	bltu	r12,r16,6694 <__mdiff+0x1c8>
    65dc:	39800044 	addi	r6,r7,1
    65e0:	300c90ba 	slli	r6,r6,2
    65e4:	5997883a 	add	r11,r11,r6
    65e8:	699b883a 	add	r13,r13,r6
    65ec:	5a00152e 	bgeu	r11,r8,6644 <__mdiff+0x178>
    65f0:	680f883a 	mov	r7,r13
    65f4:	580d883a 	mov	r6,r11
    65f8:	31000017 	ldw	r4,0(r6)
    65fc:	39c00104 	addi	r7,r7,4
    6600:	31800104 	addi	r6,r6,4
    6604:	217fffcc 	andi	r5,r4,65535
    6608:	28cb883a 	add	r5,r5,r3
    660c:	2815d43a 	srai	r10,r5,16
    6610:	2006d43a 	srli	r3,r4,16
    6614:	297fffcc 	andi	r5,r5,65535
    6618:	1a87883a 	add	r3,r3,r10
    661c:	1814943a 	slli	r10,r3,16
    6620:	1807d43a 	srai	r3,r3,16
    6624:	514ab03a 	or	r5,r10,r5
    6628:	397fff15 	stw	r5,-4(r7)
    662c:	323ff236 	bltu	r6,r8,65f8 <__mdiff+0x12c>
    6630:	413fffc4 	addi	r4,r8,-1
    6634:	22c9c83a 	sub	r4,r4,r11
    6638:	2008d0ba 	srli	r4,r4,2
    663c:	200890ba 	slli	r4,r4,2
    6640:	6909883a 	add	r4,r13,r4
    6644:	2800041e 	bne	r5,zero,6658 <__mdiff+0x18c>
    6648:	20ffff17 	ldw	r3,-4(r4)
    664c:	4a7fffc4 	addi	r9,r9,-1
    6650:	213fff04 	addi	r4,r4,-4
    6654:	183ffc26 	beq	r3,zero,6648 <__mdiff+0x17c>
    6658:	12400415 	stw	r9,16(r2)
    665c:	dfc00317 	ldw	ra,12(sp)
    6660:	dc800217 	ldw	r18,8(sp)
    6664:	dc400117 	ldw	r17,4(sp)
    6668:	dc000017 	ldw	r16,0(sp)
    666c:	dec00404 	addi	sp,sp,16
    6670:	f800283a 	ret
    6674:	8805883a 	mov	r2,r17
    6678:	04800044 	movi	r18,1
    667c:	8023883a 	mov	r17,r16
    6680:	1021883a 	mov	r16,r2
    6684:	003fa906 	br	652c <__mdiff+0x60>
    6688:	903ffa16 	blt	r18,zero,6674 <__mdiff+0x1a8>
    668c:	0025883a 	mov	r18,zero
    6690:	003fa606 	br	652c <__mdiff+0x60>
    6694:	01800104 	movi	r6,4
    6698:	003fd206 	br	65e4 <__mdiff+0x118>
    669c:	0009883a 	mov	r4,zero
    66a0:	003fcc06 	br	65d4 <__mdiff+0x108>
    66a4:	000b883a 	mov	r5,zero
    66a8:	0005a540 	call	5a54 <_Balloc>
    66ac:	10000b26 	beq	r2,zero,66dc <__mdiff+0x210>
    66b0:	00c00044 	movi	r3,1
    66b4:	10c00415 	stw	r3,16(r2)
    66b8:	10000515 	stw	zero,20(r2)
    66bc:	003fe706 	br	665c <__mdiff+0x190>
    66c0:	01c00074 	movhi	r7,1
    66c4:	01000074 	movhi	r4,1
    66c8:	39c04b04 	addi	r7,r7,300
    66cc:	000d883a 	mov	r6,zero
    66d0:	01409004 	movi	r5,576
    66d4:	21006004 	addi	r4,r4,384
    66d8:	00082d80 	call	82d8 <__assert_func>
    66dc:	01c00074 	movhi	r7,1
    66e0:	01000074 	movhi	r4,1
    66e4:	39c04b04 	addi	r7,r7,300
    66e8:	000d883a 	mov	r6,zero
    66ec:	01408c84 	movi	r5,562
    66f0:	21006004 	addi	r4,r4,384
    66f4:	00082d80 	call	82d8 <__assert_func>

000066f8 <__ulp>:
    66f8:	28dffc2c 	andhi	r3,r5,32752
    66fc:	017f3034 	movhi	r5,64704
    6700:	1947883a 	add	r3,r3,r5
    6704:	00c0020e 	bge	zero,r3,6710 <__ulp+0x18>
    6708:	0005883a 	mov	r2,zero
    670c:	f800283a 	ret
    6710:	00c7c83a 	sub	r3,zero,r3
    6714:	1807d53a 	srai	r3,r3,20
    6718:	18800508 	cmpgei	r2,r3,20
    671c:	1000041e 	bne	r2,zero,6730 <__ulp+0x38>
    6720:	00800234 	movhi	r2,8
    6724:	10c7d83a 	sra	r3,r2,r3
    6728:	0005883a 	mov	r2,zero
    672c:	f800283a 	ret
    6730:	193ffb04 	addi	r4,r3,-20
    6734:	208007c8 	cmpgei	r2,r4,31
    6738:	0007883a 	mov	r3,zero
    673c:	1000031e 	bne	r2,zero,674c <__ulp+0x54>
    6740:	00a00034 	movhi	r2,32768
    6744:	1104d83a 	srl	r2,r2,r4
    6748:	f800283a 	ret
    674c:	00800044 	movi	r2,1
    6750:	f800283a 	ret

00006754 <__b2d>:
    6754:	defffa04 	addi	sp,sp,-24
    6758:	dc400115 	stw	r17,4(sp)
    675c:	24400417 	ldw	r17,16(r4)
    6760:	dc000015 	stw	r16,0(sp)
    6764:	24000504 	addi	r16,r4,20
    6768:	882290ba 	slli	r17,r17,2
    676c:	dc800215 	stw	r18,8(sp)
    6770:	dd000415 	stw	r20,16(sp)
    6774:	8463883a 	add	r17,r16,r17
    6778:	8cbfff17 	ldw	r18,-4(r17)
    677c:	dcc00315 	stw	r19,12(sp)
    6780:	dfc00515 	stw	ra,20(sp)
    6784:	9009883a 	mov	r4,r18
    6788:	2827883a 	mov	r19,r5
    678c:	0005d8c0 	call	5d8c <__hi0bits>
    6790:	00c00804 	movi	r3,32
    6794:	1889c83a 	sub	r4,r3,r2
    6798:	99000015 	stw	r4,0(r19)
    679c:	110002c8 	cmpgei	r4,r2,11
    67a0:	8d3fff04 	addi	r20,r17,-4
    67a4:	20002026 	beq	r4,zero,6828 <__b2d+0xd4>
    67a8:	10bffd44 	addi	r2,r2,-11
    67ac:	85000e2e 	bgeu	r16,r20,67e8 <__b2d+0x94>
    67b0:	897ffe17 	ldw	r5,-8(r17)
    67b4:	10001226 	beq	r2,zero,6800 <__b2d+0xac>
    67b8:	1889c83a 	sub	r4,r3,r2
    67bc:	90a4983a 	sll	r18,r18,r2
    67c0:	2906d83a 	srl	r3,r5,r4
    67c4:	89bffe04 	addi	r6,r17,-8
    67c8:	2884983a 	sll	r2,r5,r2
    67cc:	90e4b03a 	or	r18,r18,r3
    67d0:	90cffc34 	orhi	r3,r18,16368
    67d4:	81800c2e 	bgeu	r16,r6,6808 <__b2d+0xb4>
    67d8:	897ffd17 	ldw	r5,-12(r17)
    67dc:	2908d83a 	srl	r4,r5,r4
    67e0:	1104b03a 	or	r2,r2,r4
    67e4:	00000806 	br	6808 <__b2d+0xb4>
    67e8:	10000426 	beq	r2,zero,67fc <__b2d+0xa8>
    67ec:	90a4983a 	sll	r18,r18,r2
    67f0:	0005883a 	mov	r2,zero
    67f4:	90cffc34 	orhi	r3,r18,16368
    67f8:	00000306 	br	6808 <__b2d+0xb4>
    67fc:	000b883a 	mov	r5,zero
    6800:	90cffc34 	orhi	r3,r18,16368
    6804:	2805883a 	mov	r2,r5
    6808:	dfc00517 	ldw	ra,20(sp)
    680c:	dd000417 	ldw	r20,16(sp)
    6810:	dcc00317 	ldw	r19,12(sp)
    6814:	dc800217 	ldw	r18,8(sp)
    6818:	dc400117 	ldw	r17,4(sp)
    681c:	dc000017 	ldw	r16,0(sp)
    6820:	dec00604 	addi	sp,sp,24
    6824:	f800283a 	ret
    6828:	014002c4 	movi	r5,11
    682c:	2889c83a 	sub	r4,r5,r2
    6830:	9106d83a 	srl	r3,r18,r4
    6834:	18cffc34 	orhi	r3,r3,16368
    6838:	85000536 	bltu	r16,r20,6850 <__b2d+0xfc>
    683c:	000b883a 	mov	r5,zero
    6840:	10800544 	addi	r2,r2,21
    6844:	9084983a 	sll	r2,r18,r2
    6848:	1144b03a 	or	r2,r2,r5
    684c:	003fee06 	br	6808 <__b2d+0xb4>
    6850:	897ffe17 	ldw	r5,-8(r17)
    6854:	290ad83a 	srl	r5,r5,r4
    6858:	003ff906 	br	6840 <__b2d+0xec>

0000685c <__d2b>:
    685c:	defff804 	addi	sp,sp,-32
    6860:	dd000615 	stw	r20,24(sp)
    6864:	2829883a 	mov	r20,r5
    6868:	01400044 	movi	r5,1
    686c:	dcc00515 	stw	r19,20(sp)
    6870:	dc000215 	stw	r16,8(sp)
    6874:	dfc00715 	stw	ra,28(sp)
    6878:	dc800415 	stw	r18,16(sp)
    687c:	dc400315 	stw	r17,12(sp)
    6880:	3021883a 	mov	r16,r6
    6884:	3827883a 	mov	r19,r7
    6888:	0005a540 	call	5a54 <_Balloc>
    688c:	10004526 	beq	r2,zero,69a4 <__d2b+0x148>
    6890:	8024d53a 	srli	r18,r16,20
    6894:	01800434 	movhi	r6,16
    6898:	31bfffc4 	addi	r6,r6,-1
    689c:	9481ffcc 	andi	r18,r18,2047
    68a0:	1023883a 	mov	r17,r2
    68a4:	81a0703a 	and	r16,r16,r6
    68a8:	90000126 	beq	r18,zero,68b0 <__d2b+0x54>
    68ac:	84000434 	orhi	r16,r16,16
    68b0:	dc000115 	stw	r16,4(sp)
    68b4:	a0002226 	beq	r20,zero,6940 <__d2b+0xe4>
    68b8:	d809883a 	mov	r4,sp
    68bc:	dd000015 	stw	r20,0(sp)
    68c0:	0005df00 	call	5df0 <__lo0bits>
    68c4:	d8c00117 	ldw	r3,4(sp)
    68c8:	10003326 	beq	r2,zero,6998 <__d2b+0x13c>
    68cc:	01000804 	movi	r4,32
    68d0:	2089c83a 	sub	r4,r4,r2
    68d4:	1908983a 	sll	r4,r3,r4
    68d8:	d9400017 	ldw	r5,0(sp)
    68dc:	1886d83a 	srl	r3,r3,r2
    68e0:	2148b03a 	or	r4,r4,r5
    68e4:	89000515 	stw	r4,20(r17)
    68e8:	d8c00115 	stw	r3,4(sp)
    68ec:	88c00615 	stw	r3,24(r17)
    68f0:	1800271e 	bne	r3,zero,6990 <__d2b+0x134>
    68f4:	04000044 	movi	r16,1
    68f8:	8c000415 	stw	r16,16(r17)
    68fc:	90001926 	beq	r18,zero,6964 <__d2b+0x108>
    6900:	00c00d44 	movi	r3,53
    6904:	94bef344 	addi	r18,r18,-1075
    6908:	90a5883a 	add	r18,r18,r2
    690c:	1885c83a 	sub	r2,r3,r2
    6910:	d8c00817 	ldw	r3,32(sp)
    6914:	9c800015 	stw	r18,0(r19)
    6918:	18800015 	stw	r2,0(r3)
    691c:	8805883a 	mov	r2,r17
    6920:	dfc00717 	ldw	ra,28(sp)
    6924:	dd000617 	ldw	r20,24(sp)
    6928:	dcc00517 	ldw	r19,20(sp)
    692c:	dc800417 	ldw	r18,16(sp)
    6930:	dc400317 	ldw	r17,12(sp)
    6934:	dc000217 	ldw	r16,8(sp)
    6938:	dec00804 	addi	sp,sp,32
    693c:	f800283a 	ret
    6940:	d9000104 	addi	r4,sp,4
    6944:	0005df00 	call	5df0 <__lo0bits>
    6948:	00c00044 	movi	r3,1
    694c:	88c00415 	stw	r3,16(r17)
    6950:	d8c00117 	ldw	r3,4(sp)
    6954:	10800804 	addi	r2,r2,32
    6958:	04000044 	movi	r16,1
    695c:	88c00515 	stw	r3,20(r17)
    6960:	903fe71e 	bne	r18,zero,6900 <__d2b+0xa4>
    6964:	800690ba 	slli	r3,r16,2
    6968:	10bef384 	addi	r2,r2,-1074
    696c:	98800015 	stw	r2,0(r19)
    6970:	88c5883a 	add	r2,r17,r3
    6974:	11000417 	ldw	r4,16(r2)
    6978:	8020917a 	slli	r16,r16,5
    697c:	0005d8c0 	call	5d8c <__hi0bits>
    6980:	80a1c83a 	sub	r16,r16,r2
    6984:	d8800817 	ldw	r2,32(sp)
    6988:	14000015 	stw	r16,0(r2)
    698c:	003fe306 	br	691c <__d2b+0xc0>
    6990:	04000084 	movi	r16,2
    6994:	003fd806 	br	68f8 <__d2b+0x9c>
    6998:	d9000017 	ldw	r4,0(sp)
    699c:	89000515 	stw	r4,20(r17)
    69a0:	003fd206 	br	68ec <__d2b+0x90>
    69a4:	01c00074 	movhi	r7,1
    69a8:	01000074 	movhi	r4,1
    69ac:	39c04b04 	addi	r7,r7,300
    69b0:	000d883a 	mov	r6,zero
    69b4:	0140c284 	movi	r5,778
    69b8:	21006004 	addi	r4,r4,384
    69bc:	00082d80 	call	82d8 <__assert_func>

000069c0 <__ratio>:
    69c0:	defff904 	addi	sp,sp,-28
    69c4:	dc400315 	stw	r17,12(sp)
    69c8:	2823883a 	mov	r17,r5
    69cc:	d80b883a 	mov	r5,sp
    69d0:	dfc00615 	stw	ra,24(sp)
    69d4:	dcc00515 	stw	r19,20(sp)
    69d8:	dc800415 	stw	r18,16(sp)
    69dc:	2027883a 	mov	r19,r4
    69e0:	dc000215 	stw	r16,8(sp)
    69e4:	00067540 	call	6754 <__b2d>
    69e8:	d9400104 	addi	r5,sp,4
    69ec:	8809883a 	mov	r4,r17
    69f0:	1025883a 	mov	r18,r2
    69f4:	1821883a 	mov	r16,r3
    69f8:	00067540 	call	6754 <__b2d>
    69fc:	89000417 	ldw	r4,16(r17)
    6a00:	9a000417 	ldw	r8,16(r19)
    6a04:	d9400117 	ldw	r5,4(sp)
    6a08:	100d883a 	mov	r6,r2
    6a0c:	4111c83a 	sub	r8,r8,r4
    6a10:	d9000017 	ldw	r4,0(sp)
    6a14:	4010917a 	slli	r8,r8,5
    6a18:	180f883a 	mov	r7,r3
    6a1c:	2149c83a 	sub	r4,r4,r5
    6a20:	4111883a 	add	r8,r8,r4
    6a24:	02000c0e 	bge	zero,r8,6a58 <__ratio+0x98>
    6a28:	4010953a 	slli	r8,r8,20
    6a2c:	4421883a 	add	r16,r8,r16
    6a30:	9009883a 	mov	r4,r18
    6a34:	800b883a 	mov	r5,r16
    6a38:	000b3fc0 	call	b3fc <__divdf3>
    6a3c:	dfc00617 	ldw	ra,24(sp)
    6a40:	dcc00517 	ldw	r19,20(sp)
    6a44:	dc800417 	ldw	r18,16(sp)
    6a48:	dc400317 	ldw	r17,12(sp)
    6a4c:	dc000217 	ldw	r16,8(sp)
    6a50:	dec00704 	addi	sp,sp,28
    6a54:	f800283a 	ret
    6a58:	00bffc34 	movhi	r2,65520
    6a5c:	4091383a 	mul	r8,r8,r2
    6a60:	40cf883a 	add	r7,r8,r3
    6a64:	003ff206 	br	6a30 <__ratio+0x70>

00006a68 <_mprec_log10>:
    6a68:	defffe04 	addi	sp,sp,-8
    6a6c:	dc000015 	stw	r16,0(sp)
    6a70:	dfc00115 	stw	ra,4(sp)
    6a74:	20800608 	cmpgei	r2,r4,24
    6a78:	2021883a 	mov	r16,r4
    6a7c:	10000f26 	beq	r2,zero,6abc <_mprec_log10+0x54>
    6a80:	0009883a 	mov	r4,zero
    6a84:	014ffc34 	movhi	r5,16368
    6a88:	000d883a 	mov	r6,zero
    6a8c:	01d00934 	movhi	r7,16420
    6a90:	000be9c0 	call	be9c <__muldf3>
    6a94:	843fffc4 	addi	r16,r16,-1
    6a98:	1009883a 	mov	r4,r2
    6a9c:	180b883a 	mov	r5,r3
    6aa0:	803ff91e 	bne	r16,zero,6a88 <_mprec_log10+0x20>
    6aa4:	2005883a 	mov	r2,r4
    6aa8:	2807883a 	mov	r3,r5
    6aac:	dfc00117 	ldw	ra,4(sp)
    6ab0:	dc000017 	ldw	r16,0(sp)
    6ab4:	dec00204 	addi	sp,sp,8
    6ab8:	f800283a 	ret
    6abc:	202090fa 	slli	r16,r4,3
    6ac0:	00800074 	movhi	r2,1
    6ac4:	10808704 	addi	r2,r2,540
    6ac8:	1421883a 	add	r16,r2,r16
    6acc:	81000017 	ldw	r4,0(r16)
    6ad0:	81400117 	ldw	r5,4(r16)
    6ad4:	003ff306 	br	6aa4 <_mprec_log10+0x3c>

00006ad8 <__copybits>:
    6ad8:	297fffc4 	addi	r5,r5,-1
    6adc:	280fd17a 	srai	r7,r5,5
    6ae0:	31400417 	ldw	r5,16(r6)
    6ae4:	30800504 	addi	r2,r6,20
    6ae8:	39c00044 	addi	r7,r7,1
    6aec:	280a90ba 	slli	r5,r5,2
    6af0:	380e90ba 	slli	r7,r7,2
    6af4:	114b883a 	add	r5,r2,r5
    6af8:	21cf883a 	add	r7,r4,r7
    6afc:	11400c2e 	bgeu	r2,r5,6b30 <__copybits+0x58>
    6b00:	2007883a 	mov	r3,r4
    6b04:	12000017 	ldw	r8,0(r2)
    6b08:	10800104 	addi	r2,r2,4
    6b0c:	18c00104 	addi	r3,r3,4
    6b10:	1a3fff15 	stw	r8,-4(r3)
    6b14:	117ffb36 	bltu	r2,r5,6b04 <__copybits+0x2c>
    6b18:	2985c83a 	sub	r2,r5,r6
    6b1c:	10bffac4 	addi	r2,r2,-21
    6b20:	1004d0ba 	srli	r2,r2,2
    6b24:	10800044 	addi	r2,r2,1
    6b28:	100490ba 	slli	r2,r2,2
    6b2c:	2089883a 	add	r4,r4,r2
    6b30:	21c0072e 	bgeu	r4,r7,6b50 <__copybits+0x78>
    6b34:	39bfffc4 	addi	r6,r7,-1
    6b38:	310dc83a 	sub	r6,r6,r4
    6b3c:	300cd0ba 	srli	r6,r6,2
    6b40:	000b883a 	mov	r5,zero
    6b44:	31800044 	addi	r6,r6,1
    6b48:	300c90ba 	slli	r6,r6,2
    6b4c:	00059641 	jmpi	5964 <memset>
    6b50:	f800283a 	ret

00006b54 <__any_on>:
    6b54:	20c00417 	ldw	r3,16(r4)
    6b58:	280dd17a 	srai	r6,r5,5
    6b5c:	21000504 	addi	r4,r4,20
    6b60:	1980080e 	bge	r3,r6,6b84 <__any_on+0x30>
    6b64:	180490ba 	slli	r2,r3,2
    6b68:	2085883a 	add	r2,r4,r2
    6b6c:	20800f2e 	bgeu	r4,r2,6bac <__any_on+0x58>
    6b70:	10ffff17 	ldw	r3,-4(r2)
    6b74:	10bfff04 	addi	r2,r2,-4
    6b78:	183ffc26 	beq	r3,zero,6b6c <__any_on+0x18>
    6b7c:	00800044 	movi	r2,1
    6b80:	f800283a 	ret
    6b84:	300490ba 	slli	r2,r6,2
    6b88:	2085883a 	add	r2,r4,r2
    6b8c:	30fff70e 	bge	r6,r3,6b6c <__any_on+0x18>
    6b90:	294007cc 	andi	r5,r5,31
    6b94:	283ff526 	beq	r5,zero,6b6c <__any_on+0x18>
    6b98:	11800017 	ldw	r6,0(r2)
    6b9c:	3146d83a 	srl	r3,r6,r5
    6ba0:	194a983a 	sll	r5,r3,r5
    6ba4:	317ff51e 	bne	r6,r5,6b7c <__any_on+0x28>
    6ba8:	003ff006 	br	6b6c <__any_on+0x18>
    6bac:	0005883a 	mov	r2,zero
    6bb0:	f800283a 	ret

00006bb4 <_sbrk_r>:
    6bb4:	defffe04 	addi	sp,sp,-8
    6bb8:	dc000015 	stw	r16,0(sp)
    6bbc:	00800074 	movhi	r2,1
    6bc0:	2021883a 	mov	r16,r4
    6bc4:	2809883a 	mov	r4,r5
    6bc8:	dfc00115 	stw	ra,4(sp)
    6bcc:	10102115 	stw	zero,16516(r2)
    6bd0:	000d9a00 	call	d9a0 <sbrk>
    6bd4:	10ffffd8 	cmpnei	r3,r2,-1
    6bd8:	18000426 	beq	r3,zero,6bec <_sbrk_r+0x38>
    6bdc:	dfc00117 	ldw	ra,4(sp)
    6be0:	dc000017 	ldw	r16,0(sp)
    6be4:	dec00204 	addi	sp,sp,8
    6be8:	f800283a 	ret
    6bec:	00c00074 	movhi	r3,1
    6bf0:	18d02117 	ldw	r3,16516(r3)
    6bf4:	183ff926 	beq	r3,zero,6bdc <_sbrk_r+0x28>
    6bf8:	80c00015 	stw	r3,0(r16)
    6bfc:	dfc00117 	ldw	ra,4(sp)
    6c00:	dc000017 	ldw	r16,0(sp)
    6c04:	dec00204 	addi	sp,sp,8
    6c08:	f800283a 	ret

00006c0c <__sread>:
    6c0c:	defffe04 	addi	sp,sp,-8
    6c10:	dc000015 	stw	r16,0(sp)
    6c14:	2821883a 	mov	r16,r5
    6c18:	2940038f 	ldh	r5,14(r5)
    6c1c:	dfc00115 	stw	ra,4(sp)
    6c20:	00090400 	call	9040 <_read_r>
    6c24:	10000716 	blt	r2,zero,6c44 <__sread+0x38>
    6c28:	80c01417 	ldw	r3,80(r16)
    6c2c:	1887883a 	add	r3,r3,r2
    6c30:	80c01415 	stw	r3,80(r16)
    6c34:	dfc00117 	ldw	ra,4(sp)
    6c38:	dc000017 	ldw	r16,0(sp)
    6c3c:	dec00204 	addi	sp,sp,8
    6c40:	f800283a 	ret
    6c44:	80c0030b 	ldhu	r3,12(r16)
    6c48:	18fbffcc 	andi	r3,r3,61439
    6c4c:	80c0030d 	sth	r3,12(r16)
    6c50:	dfc00117 	ldw	ra,4(sp)
    6c54:	dc000017 	ldw	r16,0(sp)
    6c58:	dec00204 	addi	sp,sp,8
    6c5c:	f800283a 	ret

00006c60 <__seofread>:
    6c60:	0005883a 	mov	r2,zero
    6c64:	f800283a 	ret

00006c68 <__swrite>:
    6c68:	2880030b 	ldhu	r2,12(r5)
    6c6c:	defffb04 	addi	sp,sp,-20
    6c70:	dcc00315 	stw	r19,12(sp)
    6c74:	dc800215 	stw	r18,8(sp)
    6c78:	dc400115 	stw	r17,4(sp)
    6c7c:	dc000015 	stw	r16,0(sp)
    6c80:	dfc00415 	stw	ra,16(sp)
    6c84:	10c0400c 	andi	r3,r2,256
    6c88:	2821883a 	mov	r16,r5
    6c8c:	2023883a 	mov	r17,r4
    6c90:	3025883a 	mov	r18,r6
    6c94:	3827883a 	mov	r19,r7
    6c98:	18000d1e 	bne	r3,zero,6cd0 <__swrite+0x68>
    6c9c:	8140038f 	ldh	r5,14(r16)
    6ca0:	10bbffcc 	andi	r2,r2,61439
    6ca4:	980f883a 	mov	r7,r19
    6ca8:	900d883a 	mov	r6,r18
    6cac:	8809883a 	mov	r4,r17
    6cb0:	8080030d 	sth	r2,12(r16)
    6cb4:	dfc00417 	ldw	ra,16(sp)
    6cb8:	dcc00317 	ldw	r19,12(sp)
    6cbc:	dc800217 	ldw	r18,8(sp)
    6cc0:	dc400117 	ldw	r17,4(sp)
    6cc4:	dc000017 	ldw	r16,0(sp)
    6cc8:	dec00504 	addi	sp,sp,20
    6ccc:	000821c1 	jmpi	821c <_write_r>
    6cd0:	2940038f 	ldh	r5,14(r5)
    6cd4:	01c00084 	movi	r7,2
    6cd8:	000d883a 	mov	r6,zero
    6cdc:	0008e600 	call	8e60 <_lseek_r>
    6ce0:	8080030b 	ldhu	r2,12(r16)
    6ce4:	003fed06 	br	6c9c <__swrite+0x34>

00006ce8 <__sseek>:
    6ce8:	defffe04 	addi	sp,sp,-8
    6cec:	dc000015 	stw	r16,0(sp)
    6cf0:	2821883a 	mov	r16,r5
    6cf4:	2940038f 	ldh	r5,14(r5)
    6cf8:	dfc00115 	stw	ra,4(sp)
    6cfc:	0008e600 	call	8e60 <_lseek_r>
    6d00:	10ffffd8 	cmpnei	r3,r2,-1
    6d04:	18000826 	beq	r3,zero,6d28 <__sseek+0x40>
    6d08:	80c0030b 	ldhu	r3,12(r16)
    6d0c:	80801415 	stw	r2,80(r16)
    6d10:	18c40014 	ori	r3,r3,4096
    6d14:	80c0030d 	sth	r3,12(r16)
    6d18:	dfc00117 	ldw	ra,4(sp)
    6d1c:	dc000017 	ldw	r16,0(sp)
    6d20:	dec00204 	addi	sp,sp,8
    6d24:	f800283a 	ret
    6d28:	80c0030b 	ldhu	r3,12(r16)
    6d2c:	18fbffcc 	andi	r3,r3,61439
    6d30:	80c0030d 	sth	r3,12(r16)
    6d34:	dfc00117 	ldw	ra,4(sp)
    6d38:	dc000017 	ldw	r16,0(sp)
    6d3c:	dec00204 	addi	sp,sp,8
    6d40:	f800283a 	ret

00006d44 <__sclose>:
    6d44:	2940038f 	ldh	r5,14(r5)
    6d48:	00082801 	jmpi	8280 <_close_r>

00006d4c <strlen>:
    6d4c:	208000cc 	andi	r2,r4,3
    6d50:	10000926 	beq	r2,zero,6d78 <strlen+0x2c>
    6d54:	2005883a 	mov	r2,r4
    6d58:	00000306 	br	6d68 <strlen+0x1c>
    6d5c:	10800044 	addi	r2,r2,1
    6d60:	10c000cc 	andi	r3,r2,3
    6d64:	18000526 	beq	r3,zero,6d7c <strlen+0x30>
    6d68:	10c00007 	ldb	r3,0(r2)
    6d6c:	183ffb1e 	bne	r3,zero,6d5c <strlen+0x10>
    6d70:	1105c83a 	sub	r2,r2,r4
    6d74:	f800283a 	ret
    6d78:	2005883a 	mov	r2,r4
    6d7c:	11400017 	ldw	r5,0(r2)
    6d80:	01ffbff4 	movhi	r7,65279
    6d84:	39ffbfc4 	addi	r7,r7,-257
    6d88:	29c7883a 	add	r3,r5,r7
    6d8c:	01a02074 	movhi	r6,32897
    6d90:	014a303a 	nor	r5,zero,r5
    6d94:	1946703a 	and	r3,r3,r5
    6d98:	31a02004 	addi	r6,r6,-32640
    6d9c:	1986703a 	and	r3,r3,r6
    6da0:	1800071e 	bne	r3,zero,6dc0 <strlen+0x74>
    6da4:	11400117 	ldw	r5,4(r2)
    6da8:	10800104 	addi	r2,r2,4
    6dac:	29c7883a 	add	r3,r5,r7
    6db0:	014a303a 	nor	r5,zero,r5
    6db4:	1946703a 	and	r3,r3,r5
    6db8:	1986703a 	and	r3,r3,r6
    6dbc:	183ff926 	beq	r3,zero,6da4 <strlen+0x58>
    6dc0:	10c00007 	ldb	r3,0(r2)
    6dc4:	183fea26 	beq	r3,zero,6d70 <strlen+0x24>
    6dc8:	10c00047 	ldb	r3,1(r2)
    6dcc:	10800044 	addi	r2,r2,1
    6dd0:	183fe726 	beq	r3,zero,6d70 <strlen+0x24>
    6dd4:	10c00047 	ldb	r3,1(r2)
    6dd8:	10800044 	addi	r2,r2,1
    6ddc:	183ffa1e 	bne	r3,zero,6dc8 <strlen+0x7c>
    6de0:	003fe306 	br	6d70 <strlen+0x24>

00006de4 <__sprint_r.part.0>:
    6de4:	28801917 	ldw	r2,100(r5)
    6de8:	defff604 	addi	sp,sp,-40
    6dec:	dcc00315 	stw	r19,12(sp)
    6df0:	dfc00915 	stw	ra,36(sp)
    6df4:	df000815 	stw	fp,32(sp)
    6df8:	ddc00715 	stw	r23,28(sp)
    6dfc:	dd800615 	stw	r22,24(sp)
    6e00:	dd400515 	stw	r21,20(sp)
    6e04:	dd000415 	stw	r20,16(sp)
    6e08:	dc800215 	stw	r18,8(sp)
    6e0c:	dc400115 	stw	r17,4(sp)
    6e10:	dc000015 	stw	r16,0(sp)
    6e14:	1088000c 	andi	r2,r2,8192
    6e18:	3027883a 	mov	r19,r6
    6e1c:	10002c26 	beq	r2,zero,6ed0 <__sprint_r.part.0+0xec>
    6e20:	30800217 	ldw	r2,8(r6)
    6e24:	35000017 	ldw	r20,0(r6)
    6e28:	2821883a 	mov	r16,r5
    6e2c:	2023883a 	mov	r17,r4
    6e30:	05bfff04 	movi	r22,-4
    6e34:	10002426 	beq	r2,zero,6ec8 <__sprint_r.part.0+0xe4>
    6e38:	a5400117 	ldw	r21,4(r20)
    6e3c:	a5c00017 	ldw	r23,0(r20)
    6e40:	a824d0ba 	srli	r18,r21,2
    6e44:	90001b26 	beq	r18,zero,6eb4 <__sprint_r.part.0+0xd0>
    6e48:	0039883a 	mov	fp,zero
    6e4c:	00000206 	br	6e58 <__sprint_r.part.0+0x74>
    6e50:	bdc00104 	addi	r23,r23,4
    6e54:	97001626 	beq	r18,fp,6eb0 <__sprint_r.part.0+0xcc>
    6e58:	b9400017 	ldw	r5,0(r23)
    6e5c:	800d883a 	mov	r6,r16
    6e60:	8809883a 	mov	r4,r17
    6e64:	00087940 	call	8794 <_fputwc_r>
    6e68:	10bfffe0 	cmpeqi	r2,r2,-1
    6e6c:	e7000044 	addi	fp,fp,1
    6e70:	103ff726 	beq	r2,zero,6e50 <__sprint_r.part.0+0x6c>
    6e74:	00bfffc4 	movi	r2,-1
    6e78:	98000215 	stw	zero,8(r19)
    6e7c:	98000115 	stw	zero,4(r19)
    6e80:	dfc00917 	ldw	ra,36(sp)
    6e84:	df000817 	ldw	fp,32(sp)
    6e88:	ddc00717 	ldw	r23,28(sp)
    6e8c:	dd800617 	ldw	r22,24(sp)
    6e90:	dd400517 	ldw	r21,20(sp)
    6e94:	dd000417 	ldw	r20,16(sp)
    6e98:	dcc00317 	ldw	r19,12(sp)
    6e9c:	dc800217 	ldw	r18,8(sp)
    6ea0:	dc400117 	ldw	r17,4(sp)
    6ea4:	dc000017 	ldw	r16,0(sp)
    6ea8:	dec00a04 	addi	sp,sp,40
    6eac:	f800283a 	ret
    6eb0:	98800217 	ldw	r2,8(r19)
    6eb4:	adaa703a 	and	r21,r21,r22
    6eb8:	1545c83a 	sub	r2,r2,r21
    6ebc:	98800215 	stw	r2,8(r19)
    6ec0:	a5000204 	addi	r20,r20,8
    6ec4:	103fdc1e 	bne	r2,zero,6e38 <__sprint_r.part.0+0x54>
    6ec8:	0005883a 	mov	r2,zero
    6ecc:	003fea06 	br	6e78 <__sprint_r.part.0+0x94>
    6ed0:	00088900 	call	8890 <__sfvwrite_r>
    6ed4:	003fe806 	br	6e78 <__sprint_r.part.0+0x94>

00006ed8 <__sprint_r>:
    6ed8:	30c00217 	ldw	r3,8(r6)
    6edc:	18000126 	beq	r3,zero,6ee4 <__sprint_r+0xc>
    6ee0:	0006de41 	jmpi	6de4 <__sprint_r.part.0>
    6ee4:	30000115 	stw	zero,4(r6)
    6ee8:	0005883a 	mov	r2,zero
    6eec:	f800283a 	ret

00006ef0 <___vfiprintf_internal_r>:
    6ef0:	deffcf04 	addi	sp,sp,-196
    6ef4:	dd802d15 	stw	r22,180(sp)
    6ef8:	dd402c15 	stw	r21,176(sp)
    6efc:	dd002b15 	stw	r20,172(sp)
    6f00:	dfc03015 	stw	ra,192(sp)
    6f04:	df002f15 	stw	fp,188(sp)
    6f08:	ddc02e15 	stw	r23,184(sp)
    6f0c:	dcc02a15 	stw	r19,168(sp)
    6f10:	dc802915 	stw	r18,164(sp)
    6f14:	dc402815 	stw	r17,160(sp)
    6f18:	dc002715 	stw	r16,156(sp)
    6f1c:	d9c00415 	stw	r7,16(sp)
    6f20:	202d883a 	mov	r22,r4
    6f24:	282b883a 	mov	r21,r5
    6f28:	3029883a 	mov	r20,r6
    6f2c:	20000226 	beq	r4,zero,6f38 <___vfiprintf_internal_r+0x48>
    6f30:	20800e17 	ldw	r2,56(r4)
    6f34:	1001b826 	beq	r2,zero,7618 <___vfiprintf_internal_r+0x728>
    6f38:	a880030b 	ldhu	r2,12(r21)
    6f3c:	10c8000c 	andi	r3,r2,8192
    6f40:	1800061e 	bne	r3,zero,6f5c <___vfiprintf_internal_r+0x6c>
    6f44:	a8c01917 	ldw	r3,100(r21)
    6f48:	0137ffc4 	movi	r4,-8193
    6f4c:	10880014 	ori	r2,r2,8192
    6f50:	1906703a 	and	r3,r3,r4
    6f54:	a880030d 	sth	r2,12(r21)
    6f58:	a8c01915 	stw	r3,100(r21)
    6f5c:	10c0020c 	andi	r3,r2,8
    6f60:	18010326 	beq	r3,zero,7370 <___vfiprintf_internal_r+0x480>
    6f64:	a8c00417 	ldw	r3,16(r21)
    6f68:	18010126 	beq	r3,zero,7370 <___vfiprintf_internal_r+0x480>
    6f6c:	1080068c 	andi	r2,r2,26
    6f70:	10800298 	cmpnei	r2,r2,10
    6f74:	10010626 	beq	r2,zero,7390 <___vfiprintf_internal_r+0x4a0>
    6f78:	dc801704 	addi	r18,sp,92
    6f7c:	dc800a15 	stw	r18,40(sp)
    6f80:	d8000c15 	stw	zero,48(sp)
    6f84:	d8000b15 	stw	zero,44(sp)
    6f88:	9021883a 	mov	r16,r18
    6f8c:	d8000515 	stw	zero,20(sp)
    6f90:	d8000115 	stw	zero,4(sp)
    6f94:	a0800007 	ldb	r2,0(r20)
    6f98:	1000e326 	beq	r2,zero,7328 <___vfiprintf_internal_r+0x438>
    6f9c:	a023883a 	mov	r17,r20
    6fa0:	00000306 	br	6fb0 <___vfiprintf_internal_r+0xc0>
    6fa4:	88800047 	ldb	r2,1(r17)
    6fa8:	8c400044 	addi	r17,r17,1
    6fac:	10012e26 	beq	r2,zero,7468 <___vfiprintf_internal_r+0x578>
    6fb0:	10800958 	cmpnei	r2,r2,37
    6fb4:	103ffb1e 	bne	r2,zero,6fa4 <___vfiprintf_internal_r+0xb4>
    6fb8:	8d27c83a 	sub	r19,r17,r20
    6fbc:	8d012c1e 	bne	r17,r20,7470 <___vfiprintf_internal_r+0x580>
    6fc0:	88800003 	ldbu	r2,0(r17)
    6fc4:	10803fcc 	andi	r2,r2,255
    6fc8:	1080201c 	xori	r2,r2,128
    6fcc:	10bfe004 	addi	r2,r2,-128
    6fd0:	1000d526 	beq	r2,zero,7328 <___vfiprintf_internal_r+0x438>
    6fd4:	88800047 	ldb	r2,1(r17)
    6fd8:	8d000044 	addi	r20,r17,1
    6fdc:	d8000945 	stb	zero,37(sp)
    6fe0:	000b883a 	mov	r5,zero
    6fe4:	000d883a 	mov	r6,zero
    6fe8:	023fffc4 	movi	r8,-1
    6fec:	0023883a 	mov	r17,zero
    6ff0:	001b883a 	mov	r13,zero
    6ff4:	a5000044 	addi	r20,r20,1
    6ff8:	10fff804 	addi	r3,r2,-32
    6ffc:	19001668 	cmpgeui	r4,r3,89
    7000:	20006a1e 	bne	r4,zero,71ac <___vfiprintf_internal_r+0x2bc>
    7004:	180690ba 	slli	r3,r3,2
    7008:	01000034 	movhi	r4,0
    700c:	1909883a 	add	r4,r3,r4
    7010:	20dc0617 	ldw	r3,28696(r4)
    7014:	1800683a 	jmp	r3
    7018:	00007830 	cmpltui	zero,zero,480
    701c:	000071ac 	andhi	zero,zero,454
    7020:	000071ac 	andhi	zero,zero,454
    7024:	00007824 	muli	zero,zero,480
    7028:	000071ac 	andhi	zero,zero,454
    702c:	000071ac 	andhi	zero,zero,454
    7030:	000071ac 	andhi	zero,zero,454
    7034:	000071ac 	andhi	zero,zero,454
    7038:	000071ac 	andhi	zero,zero,454
    703c:	000071ac 	andhi	zero,zero,454
    7040:	00007694 	movui	zero,474
    7044:	00007814 	movui	zero,480
    7048:	000071ac 	andhi	zero,zero,454
    704c:	000076ac 	andhi	zero,zero,474
    7050:	000076b8 	rdprs	zero,zero,474
    7054:	000071ac 	andhi	zero,zero,454
    7058:	00007808 	cmpgei	zero,zero,480
    705c:	0000717c 	xorhi	zero,zero,453
    7060:	0000717c 	xorhi	zero,zero,453
    7064:	0000717c 	xorhi	zero,zero,453
    7068:	0000717c 	xorhi	zero,zero,453
    706c:	0000717c 	xorhi	zero,zero,453
    7070:	0000717c 	xorhi	zero,zero,453
    7074:	0000717c 	xorhi	zero,zero,453
    7078:	0000717c 	xorhi	zero,zero,453
    707c:	0000717c 	xorhi	zero,zero,453
    7080:	000071ac 	andhi	zero,zero,454
    7084:	000071ac 	andhi	zero,zero,454
    7088:	000071ac 	andhi	zero,zero,454
    708c:	000071ac 	andhi	zero,zero,454
    7090:	000071ac 	andhi	zero,zero,454
    7094:	000071ac 	andhi	zero,zero,454
    7098:	000071ac 	andhi	zero,zero,454
    709c:	000071ac 	andhi	zero,zero,454
    70a0:	000071ac 	andhi	zero,zero,454
    70a4:	000071ac 	andhi	zero,zero,454
    70a8:	000076fc 	xorhi	zero,zero,475
    70ac:	000071ac 	andhi	zero,zero,454
    70b0:	000071ac 	andhi	zero,zero,454
    70b4:	000071ac 	andhi	zero,zero,454
    70b8:	000071ac 	andhi	zero,zero,454
    70bc:	000071ac 	andhi	zero,zero,454
    70c0:	000071ac 	andhi	zero,zero,454
    70c4:	000071ac 	andhi	zero,zero,454
    70c8:	000071ac 	andhi	zero,zero,454
    70cc:	000071ac 	andhi	zero,zero,454
    70d0:	000071ac 	andhi	zero,zero,454
    70d4:	00007400 	call	740 <___vfprintf_internal_r+0x180>
    70d8:	000071ac 	andhi	zero,zero,454
    70dc:	000071ac 	andhi	zero,zero,454
    70e0:	000071ac 	andhi	zero,zero,454
    70e4:	000071ac 	andhi	zero,zero,454
    70e8:	000071ac 	andhi	zero,zero,454
    70ec:	000073d8 	cmpnei	zero,zero,463
    70f0:	000071ac 	andhi	zero,zero,454
    70f4:	000071ac 	andhi	zero,zero,454
    70f8:	00007900 	call	790 <___vfprintf_internal_r+0x1d0>
    70fc:	000071ac 	andhi	zero,zero,454
    7100:	000071ac 	andhi	zero,zero,454
    7104:	000071ac 	andhi	zero,zero,454
    7108:	000071ac 	andhi	zero,zero,454
    710c:	000071ac 	andhi	zero,zero,454
    7110:	000071ac 	andhi	zero,zero,454
    7114:	000071ac 	andhi	zero,zero,454
    7118:	000071ac 	andhi	zero,zero,454
    711c:	000071ac 	andhi	zero,zero,454
    7120:	000071ac 	andhi	zero,zero,454
    7124:	000078d8 	cmpnei	zero,zero,483
    7128:	00007620 	cmpeqi	zero,zero,472
    712c:	000071ac 	andhi	zero,zero,454
    7130:	000071ac 	andhi	zero,zero,454
    7134:	000071ac 	andhi	zero,zero,454
    7138:	00007878 	rdprs	zero,zero,481
    713c:	00007620 	cmpeqi	zero,zero,472
    7140:	000071ac 	andhi	zero,zero,454
    7144:	000071ac 	andhi	zero,zero,454
    7148:	000078c4 	movi	zero,483
    714c:	000071ac 	andhi	zero,zero,454
    7150:	00007884 	movi	zero,482
    7154:	00007404 	movi	zero,464
    7158:	000079f4 	movhi	zero,487
    715c:	000079e8 	cmpgeui	zero,zero,487
    7160:	000071ac 	andhi	zero,zero,454
    7164:	00007990 	cmplti	zero,zero,486
    7168:	000071ac 	andhi	zero,zero,454
    716c:	000073dc 	xori	zero,zero,463
    7170:	000071ac 	andhi	zero,zero,454
    7174:	000071ac 	andhi	zero,zero,454
    7178:	00007948 	cmpgei	zero,zero,485
    717c:	0023883a 	mov	r17,zero
    7180:	10fff404 	addi	r3,r2,-48
    7184:	a0800007 	ldb	r2,0(r20)
    7188:	8c4002a4 	muli	r17,r17,10
    718c:	a5000044 	addi	r20,r20,1
    7190:	1c63883a 	add	r17,r3,r17
    7194:	10fff404 	addi	r3,r2,-48
    7198:	190002b0 	cmpltui	r4,r3,10
    719c:	203ff91e 	bne	r4,zero,7184 <___vfiprintf_internal_r+0x294>
    71a0:	10fff804 	addi	r3,r2,-32
    71a4:	19001668 	cmpgeui	r4,r3,89
    71a8:	203f9626 	beq	r4,zero,7004 <___vfiprintf_internal_r+0x114>
    71ac:	29403fcc 	andi	r5,r5,255
    71b0:	2803b41e 	bne	r5,zero,8084 <___vfiprintf_internal_r+0x1194>
    71b4:	10005c26 	beq	r2,zero,7328 <___vfiprintf_internal_r+0x438>
    71b8:	d8800d05 	stb	r2,52(sp)
    71bc:	d8000945 	stb	zero,37(sp)
    71c0:	05c00044 	movi	r23,1
    71c4:	07000044 	movi	fp,1
    71c8:	dcc00d04 	addi	r19,sp,52
    71cc:	db400015 	stw	r13,0(sp)
    71d0:	0011883a 	mov	r8,zero
    71d4:	d8800017 	ldw	r2,0(sp)
    71d8:	1380008c 	andi	r14,r2,2
    71dc:	70000126 	beq	r14,zero,71e4 <___vfiprintf_internal_r+0x2f4>
    71e0:	bdc00084 	addi	r23,r23,2
    71e4:	d8800017 	ldw	r2,0(sp)
    71e8:	d9000b17 	ldw	r4,44(sp)
    71ec:	1340210c 	andi	r13,r2,132
    71f0:	21800044 	addi	r6,r4,1
    71f4:	d8800c17 	ldw	r2,48(sp)
    71f8:	300b883a 	mov	r5,r6
    71fc:	6800021e 	bne	r13,zero,7208 <___vfiprintf_internal_r+0x318>
    7200:	8dc7c83a 	sub	r3,r17,r23
    7204:	00c2e316 	blt	zero,r3,7d94 <___vfiprintf_internal_r+0xea4>
    7208:	d8c00947 	ldb	r3,37(sp)
    720c:	18000c26 	beq	r3,zero,7240 <___vfiprintf_internal_r+0x350>
    7210:	d8c00944 	addi	r3,sp,37
    7214:	10800044 	addi	r2,r2,1
    7218:	80c00015 	stw	r3,0(r16)
    721c:	00c00044 	movi	r3,1
    7220:	80c00115 	stw	r3,4(r16)
    7224:	d8800c15 	stw	r2,48(sp)
    7228:	d9400b15 	stw	r5,44(sp)
    722c:	28c00208 	cmpgei	r3,r5,8
    7230:	18029e1e 	bne	r3,zero,7cac <___vfiprintf_internal_r+0xdbc>
    7234:	2809883a 	mov	r4,r5
    7238:	84000204 	addi	r16,r16,8
    723c:	29400044 	addi	r5,r5,1
    7240:	70001726 	beq	r14,zero,72a0 <___vfiprintf_internal_r+0x3b0>
    7244:	d8c00984 	addi	r3,sp,38
    7248:	10800084 	addi	r2,r2,2
    724c:	80c00015 	stw	r3,0(r16)
    7250:	00c00084 	movi	r3,2
    7254:	80c00115 	stw	r3,4(r16)
    7258:	d8800c15 	stw	r2,48(sp)
    725c:	d9400b15 	stw	r5,44(sp)
    7260:	28c00208 	cmpgei	r3,r5,8
    7264:	1802a826 	beq	r3,zero,7d08 <___vfiprintf_internal_r+0xe18>
    7268:	10032326 	beq	r2,zero,7ef8 <___vfiprintf_internal_r+0x1008>
    726c:	d9800a04 	addi	r6,sp,40
    7270:	a80b883a 	mov	r5,r21
    7274:	b009883a 	mov	r4,r22
    7278:	da000315 	stw	r8,12(sp)
    727c:	db400215 	stw	r13,8(sp)
    7280:	0006de40 	call	6de4 <__sprint_r.part.0>
    7284:	10002a1e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7288:	d9000b17 	ldw	r4,44(sp)
    728c:	d8800c17 	ldw	r2,48(sp)
    7290:	da000317 	ldw	r8,12(sp)
    7294:	db400217 	ldw	r13,8(sp)
    7298:	9021883a 	mov	r16,r18
    729c:	21400044 	addi	r5,r4,1
    72a0:	6b402018 	cmpnei	r13,r13,128
    72a4:	6801ef26 	beq	r13,zero,7a64 <___vfiprintf_internal_r+0xb74>
    72a8:	4711c83a 	sub	r8,r8,fp
    72ac:	02022c16 	blt	zero,r8,7b60 <___vfiprintf_internal_r+0xc70>
    72b0:	e085883a 	add	r2,fp,r2
    72b4:	d9400b15 	stw	r5,44(sp)
    72b8:	84c00015 	stw	r19,0(r16)
    72bc:	87000115 	stw	fp,4(r16)
    72c0:	d8800c15 	stw	r2,48(sp)
    72c4:	29400208 	cmpgei	r5,r5,8
    72c8:	2801e026 	beq	r5,zero,7a4c <___vfiprintf_internal_r+0xb5c>
    72cc:	10009826 	beq	r2,zero,7530 <___vfiprintf_internal_r+0x640>
    72d0:	d9800a04 	addi	r6,sp,40
    72d4:	a80b883a 	mov	r5,r21
    72d8:	b009883a 	mov	r4,r22
    72dc:	0006de40 	call	6de4 <__sprint_r.part.0>
    72e0:	1000131e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    72e4:	d8800c17 	ldw	r2,48(sp)
    72e8:	9021883a 	mov	r16,r18
    72ec:	d8c00017 	ldw	r3,0(sp)
    72f0:	1cc0010c 	andi	r19,r3,4
    72f4:	98000226 	beq	r19,zero,7300 <___vfiprintf_internal_r+0x410>
    72f8:	8de7c83a 	sub	r19,r17,r23
    72fc:	04c09316 	blt	zero,r19,754c <___vfiprintf_internal_r+0x65c>
    7300:	8dc0010e 	bge	r17,r23,7308 <___vfiprintf_internal_r+0x418>
    7304:	b823883a 	mov	r17,r23
    7308:	d8c00117 	ldw	r3,4(sp)
    730c:	1c47883a 	add	r3,r3,r17
    7310:	d8c00115 	stw	r3,4(sp)
    7314:	10025b1e 	bne	r2,zero,7c84 <___vfiprintf_internal_r+0xd94>
    7318:	a0800007 	ldb	r2,0(r20)
    731c:	d8000b15 	stw	zero,44(sp)
    7320:	9021883a 	mov	r16,r18
    7324:	103f1d1e 	bne	r2,zero,6f9c <___vfiprintf_internal_r+0xac>
    7328:	d8800c17 	ldw	r2,48(sp)
    732c:	1003571e 	bne	r2,zero,808c <___vfiprintf_internal_r+0x119c>
    7330:	a880030b 	ldhu	r2,12(r21)
    7334:	1080100c 	andi	r2,r2,64
    7338:	1003721e 	bne	r2,zero,8104 <___vfiprintf_internal_r+0x1214>
    733c:	d8800117 	ldw	r2,4(sp)
    7340:	dfc03017 	ldw	ra,192(sp)
    7344:	df002f17 	ldw	fp,188(sp)
    7348:	ddc02e17 	ldw	r23,184(sp)
    734c:	dd802d17 	ldw	r22,180(sp)
    7350:	dd402c17 	ldw	r21,176(sp)
    7354:	dd002b17 	ldw	r20,172(sp)
    7358:	dcc02a17 	ldw	r19,168(sp)
    735c:	dc802917 	ldw	r18,164(sp)
    7360:	dc402817 	ldw	r17,160(sp)
    7364:	dc002717 	ldw	r16,156(sp)
    7368:	dec03104 	addi	sp,sp,196
    736c:	f800283a 	ret
    7370:	a80b883a 	mov	r5,r21
    7374:	b009883a 	mov	r4,r22
    7378:	00026a40 	call	26a4 <__swsetup_r>
    737c:	1003611e 	bne	r2,zero,8104 <___vfiprintf_internal_r+0x1214>
    7380:	a880030b 	ldhu	r2,12(r21)
    7384:	1080068c 	andi	r2,r2,26
    7388:	10800298 	cmpnei	r2,r2,10
    738c:	103efa1e 	bne	r2,zero,6f78 <___vfiprintf_internal_r+0x88>
    7390:	a880038f 	ldh	r2,14(r21)
    7394:	103ef816 	blt	r2,zero,6f78 <___vfiprintf_internal_r+0x88>
    7398:	d9c00417 	ldw	r7,16(sp)
    739c:	a00d883a 	mov	r6,r20
    73a0:	a80b883a 	mov	r5,r21
    73a4:	b009883a 	mov	r4,r22
    73a8:	dfc03017 	ldw	ra,192(sp)
    73ac:	df002f17 	ldw	fp,188(sp)
    73b0:	ddc02e17 	ldw	r23,184(sp)
    73b4:	dd802d17 	ldw	r22,180(sp)
    73b8:	dd402c17 	ldw	r21,176(sp)
    73bc:	dd002b17 	ldw	r20,172(sp)
    73c0:	dcc02a17 	ldw	r19,168(sp)
    73c4:	dc802917 	ldw	r18,164(sp)
    73c8:	dc402817 	ldw	r17,160(sp)
    73cc:	dc002717 	ldw	r16,156(sp)
    73d0:	dec03104 	addi	sp,sp,196
    73d4:	000815c1 	jmpi	815c <__sbprintf>
    73d8:	6b400414 	ori	r13,r13,16
    73dc:	6880080c 	andi	r2,r13,32
    73e0:	10004726 	beq	r2,zero,7500 <___vfiprintf_internal_r+0x610>
    73e4:	d8c00417 	ldw	r3,16(sp)
    73e8:	00800044 	movi	r2,1
    73ec:	1dc00017 	ldw	r23,0(r3)
    73f0:	1f000117 	ldw	fp,4(r3)
    73f4:	18c00204 	addi	r3,r3,8
    73f8:	d8c00415 	stw	r3,16(sp)
    73fc:	00000906 	br	7424 <___vfiprintf_internal_r+0x534>
    7400:	6b400414 	ori	r13,r13,16
    7404:	6880080c 	andi	r2,r13,32
    7408:	10003126 	beq	r2,zero,74d0 <___vfiprintf_internal_r+0x5e0>
    740c:	d8c00417 	ldw	r3,16(sp)
    7410:	0005883a 	mov	r2,zero
    7414:	1dc00017 	ldw	r23,0(r3)
    7418:	1f000117 	ldw	fp,4(r3)
    741c:	18c00204 	addi	r3,r3,8
    7420:	d8c00415 	stw	r3,16(sp)
    7424:	d8000945 	stb	zero,37(sp)
    7428:	40ffffe0 	cmpeqi	r3,r8,-1
    742c:	001d883a 	mov	r14,zero
    7430:	1800cf1e 	bne	r3,zero,7770 <___vfiprintf_internal_r+0x880>
    7434:	04ffdfc4 	movi	r19,-129
    7438:	6cc8703a 	and	r4,r13,r19
    743c:	bf06b03a 	or	r3,r23,fp
    7440:	d9000015 	stw	r4,0(sp)
    7444:	1802341e 	bne	r3,zero,7d18 <___vfiprintf_internal_r+0xe28>
    7448:	4001f91e 	bne	r8,zero,7c30 <___vfiprintf_internal_r+0xd40>
    744c:	1002a11e 	bne	r2,zero,7ed4 <___vfiprintf_internal_r+0xfe4>
    7450:	6f00004c 	andi	fp,r13,1
    7454:	e002c526 	beq	fp,zero,7f6c <___vfiprintf_internal_r+0x107c>
    7458:	00800c04 	movi	r2,48
    745c:	d88016c5 	stb	r2,91(sp)
    7460:	dcc016c4 	addi	r19,sp,91
    7464:	0000df06 	br	77e4 <___vfiprintf_internal_r+0x8f4>
    7468:	8d27c83a 	sub	r19,r17,r20
    746c:	8d3fae26 	beq	r17,r20,7328 <___vfiprintf_internal_r+0x438>
    7470:	d8c00c17 	ldw	r3,48(sp)
    7474:	d8800b17 	ldw	r2,44(sp)
    7478:	85000015 	stw	r20,0(r16)
    747c:	98c7883a 	add	r3,r19,r3
    7480:	10800044 	addi	r2,r2,1
    7484:	d8800b15 	stw	r2,44(sp)
    7488:	84c00115 	stw	r19,4(r16)
    748c:	d8c00c15 	stw	r3,48(sp)
    7490:	10800208 	cmpgei	r2,r2,8
    7494:	1000061e 	bne	r2,zero,74b0 <___vfiprintf_internal_r+0x5c0>
    7498:	84000204 	addi	r16,r16,8
    749c:	d8c00117 	ldw	r3,4(sp)
    74a0:	88800003 	ldbu	r2,0(r17)
    74a4:	1cc7883a 	add	r3,r3,r19
    74a8:	d8c00115 	stw	r3,4(sp)
    74ac:	003ec506 	br	6fc4 <___vfiprintf_internal_r+0xd4>
    74b0:	18028426 	beq	r3,zero,7ec4 <___vfiprintf_internal_r+0xfd4>
    74b4:	d9800a04 	addi	r6,sp,40
    74b8:	a80b883a 	mov	r5,r21
    74bc:	b009883a 	mov	r4,r22
    74c0:	0006de40 	call	6de4 <__sprint_r.part.0>
    74c4:	103f9a1e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    74c8:	9021883a 	mov	r16,r18
    74cc:	003ff306 	br	749c <___vfiprintf_internal_r+0x5ac>
    74d0:	d8c00417 	ldw	r3,16(sp)
    74d4:	6880040c 	andi	r2,r13,16
    74d8:	1dc00017 	ldw	r23,0(r3)
    74dc:	18c00104 	addi	r3,r3,4
    74e0:	d8c00415 	stw	r3,16(sp)
    74e4:	1000031e 	bne	r2,zero,74f4 <___vfiprintf_internal_r+0x604>
    74e8:	6880100c 	andi	r2,r13,64
    74ec:	10000126 	beq	r2,zero,74f4 <___vfiprintf_internal_r+0x604>
    74f0:	bdffffcc 	andi	r23,r23,65535
    74f4:	0039883a 	mov	fp,zero
    74f8:	0005883a 	mov	r2,zero
    74fc:	003fc906 	br	7424 <___vfiprintf_internal_r+0x534>
    7500:	d8c00417 	ldw	r3,16(sp)
    7504:	6880040c 	andi	r2,r13,16
    7508:	1dc00017 	ldw	r23,0(r3)
    750c:	18c00104 	addi	r3,r3,4
    7510:	d8c00415 	stw	r3,16(sp)
    7514:	1000031e 	bne	r2,zero,7524 <___vfiprintf_internal_r+0x634>
    7518:	6880100c 	andi	r2,r13,64
    751c:	10000126 	beq	r2,zero,7524 <___vfiprintf_internal_r+0x634>
    7520:	bdffffcc 	andi	r23,r23,65535
    7524:	0039883a 	mov	fp,zero
    7528:	00800044 	movi	r2,1
    752c:	003fbd06 	br	7424 <___vfiprintf_internal_r+0x534>
    7530:	d8c00017 	ldw	r3,0(sp)
    7534:	d8000b15 	stw	zero,44(sp)
    7538:	1cc0010c 	andi	r19,r3,4
    753c:	98025026 	beq	r19,zero,7e80 <___vfiprintf_internal_r+0xf90>
    7540:	8de7c83a 	sub	r19,r17,r23
    7544:	04c24e0e 	bge	zero,r19,7e80 <___vfiprintf_internal_r+0xf90>
    7548:	9021883a 	mov	r16,r18
    754c:	98c00450 	cmplti	r3,r19,17
    7550:	d9000b17 	ldw	r4,44(sp)
    7554:	01c00074 	movhi	r7,1
    7558:	1802e41e 	bne	r3,zero,80ec <___vfiprintf_internal_r+0x11fc>
    755c:	39c0bd04 	addi	r7,r7,756
    7560:	07000404 	movi	fp,16
    7564:	00000606 	br	7580 <___vfiprintf_internal_r+0x690>
    7568:	21400084 	addi	r5,r4,2
    756c:	84000204 	addi	r16,r16,8
    7570:	1809883a 	mov	r4,r3
    7574:	9cfffc04 	addi	r19,r19,-16
    7578:	98c00448 	cmpgei	r3,r19,17
    757c:	18001726 	beq	r3,zero,75dc <___vfiprintf_internal_r+0x6ec>
    7580:	20c00044 	addi	r3,r4,1
    7584:	10800404 	addi	r2,r2,16
    7588:	81c00015 	stw	r7,0(r16)
    758c:	87000115 	stw	fp,4(r16)
    7590:	d8800c15 	stw	r2,48(sp)
    7594:	d8c00b15 	stw	r3,44(sp)
    7598:	19400208 	cmpgei	r5,r3,8
    759c:	283ff226 	beq	r5,zero,7568 <___vfiprintf_internal_r+0x678>
    75a0:	d9800a04 	addi	r6,sp,40
    75a4:	a80b883a 	mov	r5,r21
    75a8:	b009883a 	mov	r4,r22
    75ac:	10012926 	beq	r2,zero,7a54 <___vfiprintf_internal_r+0xb64>
    75b0:	d9c00015 	stw	r7,0(sp)
    75b4:	0006de40 	call	6de4 <__sprint_r.part.0>
    75b8:	103f5d1e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    75bc:	d9000b17 	ldw	r4,44(sp)
    75c0:	9cfffc04 	addi	r19,r19,-16
    75c4:	98c00448 	cmpgei	r3,r19,17
    75c8:	d8800c17 	ldw	r2,48(sp)
    75cc:	d9c00017 	ldw	r7,0(sp)
    75d0:	9021883a 	mov	r16,r18
    75d4:	21400044 	addi	r5,r4,1
    75d8:	183fe91e 	bne	r3,zero,7580 <___vfiprintf_internal_r+0x690>
    75dc:	14c5883a 	add	r2,r2,r19
    75e0:	d9400b15 	stw	r5,44(sp)
    75e4:	81c00015 	stw	r7,0(r16)
    75e8:	84c00115 	stw	r19,4(r16)
    75ec:	d8800c15 	stw	r2,48(sp)
    75f0:	29400210 	cmplti	r5,r5,8
    75f4:	283f421e 	bne	r5,zero,7300 <___vfiprintf_internal_r+0x410>
    75f8:	10022126 	beq	r2,zero,7e80 <___vfiprintf_internal_r+0xf90>
    75fc:	d9800a04 	addi	r6,sp,40
    7600:	a80b883a 	mov	r5,r21
    7604:	b009883a 	mov	r4,r22
    7608:	0006de40 	call	6de4 <__sprint_r.part.0>
    760c:	103f481e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7610:	d8800c17 	ldw	r2,48(sp)
    7614:	003f3a06 	br	7300 <___vfiprintf_internal_r+0x410>
    7618:	00047ac0 	call	47ac <__sinit>
    761c:	003e4606 	br	6f38 <___vfiprintf_internal_r+0x48>
    7620:	29403fcc 	andi	r5,r5,255
    7624:	2802af1e 	bne	r5,zero,80e4 <___vfiprintf_internal_r+0x11f4>
    7628:	6880080c 	andi	r2,r13,32
    762c:	10003826 	beq	r2,zero,7710 <___vfiprintf_internal_r+0x820>
    7630:	d8c00417 	ldw	r3,16(sp)
    7634:	18800117 	ldw	r2,4(r3)
    7638:	1dc00017 	ldw	r23,0(r3)
    763c:	18c00204 	addi	r3,r3,8
    7640:	d8c00415 	stw	r3,16(sp)
    7644:	1039883a 	mov	fp,r2
    7648:	10003f16 	blt	r2,zero,7748 <___vfiprintf_internal_r+0x858>
    764c:	40bfffd8 	cmpnei	r2,r8,-1
    7650:	db800943 	ldbu	r14,37(sp)
    7654:	10000626 	beq	r2,zero,7670 <___vfiprintf_internal_r+0x780>
    7658:	04ffdfc4 	movi	r19,-129
    765c:	6cc6703a 	and	r3,r13,r19
    7660:	bf04b03a 	or	r2,r23,fp
    7664:	d8c00015 	stw	r3,0(sp)
    7668:	10021926 	beq	r2,zero,7ed0 <___vfiprintf_internal_r+0xfe0>
    766c:	db400017 	ldw	r13,0(sp)
    7670:	e001ab1e 	bne	fp,zero,7d20 <___vfiprintf_internal_r+0xe30>
    7674:	b88002a8 	cmpgeui	r2,r23,10
    7678:	1001a91e 	bne	r2,zero,7d20 <___vfiprintf_internal_r+0xe30>
    767c:	bdc00c04 	addi	r23,r23,48
    7680:	ddc016c5 	stb	r23,91(sp)
    7684:	db400015 	stw	r13,0(sp)
    7688:	07000044 	movi	fp,1
    768c:	dcc016c4 	addi	r19,sp,91
    7690:	00005406 	br	77e4 <___vfiprintf_internal_r+0x8f4>
    7694:	d8800417 	ldw	r2,16(sp)
    7698:	14400017 	ldw	r17,0(r2)
    769c:	10c00104 	addi	r3,r2,4
    76a0:	88022f0e 	bge	r17,zero,7f60 <___vfiprintf_internal_r+0x1070>
    76a4:	0463c83a 	sub	r17,zero,r17
    76a8:	d8c00415 	stw	r3,16(sp)
    76ac:	a0800007 	ldb	r2,0(r20)
    76b0:	6b400114 	ori	r13,r13,4
    76b4:	003e4f06 	br	6ff4 <___vfiprintf_internal_r+0x104>
    76b8:	a0800007 	ldb	r2,0(r20)
    76bc:	a1000044 	addi	r4,r20,1
    76c0:	10c00aa0 	cmpeqi	r3,r2,42
    76c4:	1802921e 	bne	r3,zero,8110 <___vfiprintf_internal_r+0x1220>
    76c8:	10fff404 	addi	r3,r2,-48
    76cc:	19c002b0 	cmpltui	r7,r3,10
    76d0:	2029883a 	mov	r20,r4
    76d4:	0011883a 	mov	r8,zero
    76d8:	383e4726 	beq	r7,zero,6ff8 <___vfiprintf_internal_r+0x108>
    76dc:	a0800007 	ldb	r2,0(r20)
    76e0:	420002a4 	muli	r8,r8,10
    76e4:	a5000044 	addi	r20,r20,1
    76e8:	40d1883a 	add	r8,r8,r3
    76ec:	10fff404 	addi	r3,r2,-48
    76f0:	190002b0 	cmpltui	r4,r3,10
    76f4:	203ff91e 	bne	r4,zero,76dc <___vfiprintf_internal_r+0x7ec>
    76f8:	003e3f06 	br	6ff8 <___vfiprintf_internal_r+0x108>
    76fc:	29403fcc 	andi	r5,r5,255
    7700:	28026d1e 	bne	r5,zero,80b8 <___vfiprintf_internal_r+0x11c8>
    7704:	6b400414 	ori	r13,r13,16
    7708:	6880080c 	andi	r2,r13,32
    770c:	103fc81e 	bne	r2,zero,7630 <___vfiprintf_internal_r+0x740>
    7710:	d8c00417 	ldw	r3,16(sp)
    7714:	6880040c 	andi	r2,r13,16
    7718:	1dc00017 	ldw	r23,0(r3)
    771c:	18c00104 	addi	r3,r3,4
    7720:	d8c00415 	stw	r3,16(sp)
    7724:	1001f11e 	bne	r2,zero,7eec <___vfiprintf_internal_r+0xffc>
    7728:	6880100c 	andi	r2,r13,64
    772c:	1001ef26 	beq	r2,zero,7eec <___vfiprintf_internal_r+0xffc>
    7730:	bdffffcc 	andi	r23,r23,65535
    7734:	bde0001c 	xori	r23,r23,32768
    7738:	bde00004 	addi	r23,r23,-32768
    773c:	b839d7fa 	srai	fp,r23,31
    7740:	e005883a 	mov	r2,fp
    7744:	103fc10e 	bge	r2,zero,764c <___vfiprintf_internal_r+0x75c>
    7748:	b804c03a 	cmpne	r2,r23,zero
    774c:	0739c83a 	sub	fp,zero,fp
    7750:	e0b9c83a 	sub	fp,fp,r2
    7754:	00800b44 	movi	r2,45
    7758:	d8800945 	stb	r2,37(sp)
    775c:	40ffffe0 	cmpeqi	r3,r8,-1
    7760:	05efc83a 	sub	r23,zero,r23
    7764:	03800b44 	movi	r14,45
    7768:	00800044 	movi	r2,1
    776c:	183f3126 	beq	r3,zero,7434 <___vfiprintf_internal_r+0x544>
    7770:	10c00060 	cmpeqi	r3,r2,1
    7774:	183fbe1e 	bne	r3,zero,7670 <___vfiprintf_internal_r+0x780>
    7778:	108000a0 	cmpeqi	r2,r2,2
    777c:	1001311e 	bne	r2,zero,7c44 <___vfiprintf_internal_r+0xd54>
    7780:	9027883a 	mov	r19,r18
    7784:	e008977a 	slli	r4,fp,29
    7788:	b806d0fa 	srli	r3,r23,3
    778c:	e038d0fa 	srli	fp,fp,3
    7790:	b88001cc 	andi	r2,r23,7
    7794:	10800c04 	addi	r2,r2,48
    7798:	20eeb03a 	or	r23,r4,r3
    779c:	98bfffc5 	stb	r2,-1(r19)
    77a0:	bf06b03a 	or	r3,r23,fp
    77a4:	980b883a 	mov	r5,r19
    77a8:	9cffffc4 	addi	r19,r19,-1
    77ac:	183ff51e 	bne	r3,zero,7784 <___vfiprintf_internal_r+0x894>
    77b0:	68c0004c 	andi	r3,r13,1
    77b4:	18013026 	beq	r3,zero,7c78 <___vfiprintf_internal_r+0xd88>
    77b8:	10803fcc 	andi	r2,r2,255
    77bc:	1080201c 	xori	r2,r2,128
    77c0:	10bfe004 	addi	r2,r2,-128
    77c4:	10800c18 	cmpnei	r2,r2,48
    77c8:	10012b26 	beq	r2,zero,7c78 <___vfiprintf_internal_r+0xd88>
    77cc:	297fff84 	addi	r5,r5,-2
    77d0:	00800c04 	movi	r2,48
    77d4:	98bfffc5 	stb	r2,-1(r19)
    77d8:	9179c83a 	sub	fp,r18,r5
    77dc:	db400015 	stw	r13,0(sp)
    77e0:	2827883a 	mov	r19,r5
    77e4:	e02f883a 	mov	r23,fp
    77e8:	e200010e 	bge	fp,r8,77f0 <___vfiprintf_internal_r+0x900>
    77ec:	402f883a 	mov	r23,r8
    77f0:	73803fcc 	andi	r14,r14,255
    77f4:	7380201c 	xori	r14,r14,128
    77f8:	73bfe004 	addi	r14,r14,-128
    77fc:	703e7526 	beq	r14,zero,71d4 <___vfiprintf_internal_r+0x2e4>
    7800:	bdc00044 	addi	r23,r23,1
    7804:	003e7306 	br	71d4 <___vfiprintf_internal_r+0x2e4>
    7808:	a0800007 	ldb	r2,0(r20)
    780c:	6b402014 	ori	r13,r13,128
    7810:	003df806 	br	6ff4 <___vfiprintf_internal_r+0x104>
    7814:	a0800007 	ldb	r2,0(r20)
    7818:	01400044 	movi	r5,1
    781c:	01800ac4 	movi	r6,43
    7820:	003df406 	br	6ff4 <___vfiprintf_internal_r+0x104>
    7824:	a0800007 	ldb	r2,0(r20)
    7828:	6b400054 	ori	r13,r13,1
    782c:	003df106 	br	6ff4 <___vfiprintf_internal_r+0x104>
    7830:	30c03fcc 	andi	r3,r6,255
    7834:	18c0201c 	xori	r3,r3,128
    7838:	18ffe004 	addi	r3,r3,-128
    783c:	a0800003 	ldbu	r2,0(r20)
    7840:	1800091e 	bne	r3,zero,7868 <___vfiprintf_internal_r+0x978>
    7844:	10803fcc 	andi	r2,r2,255
    7848:	1080201c 	xori	r2,r2,128
    784c:	01400044 	movi	r5,1
    7850:	01800804 	movi	r6,32
    7854:	10bfe004 	addi	r2,r2,-128
    7858:	003de606 	br	6ff4 <___vfiprintf_internal_r+0x104>
    785c:	a0800043 	ldbu	r2,1(r20)
    7860:	6b400814 	ori	r13,r13,32
    7864:	a5000044 	addi	r20,r20,1
    7868:	10803fcc 	andi	r2,r2,255
    786c:	1080201c 	xori	r2,r2,128
    7870:	10bfe004 	addi	r2,r2,-128
    7874:	003ddf06 	br	6ff4 <___vfiprintf_internal_r+0x104>
    7878:	a0800007 	ldb	r2,0(r20)
    787c:	6b401014 	ori	r13,r13,64
    7880:	003ddc06 	br	6ff4 <___vfiprintf_internal_r+0x104>
    7884:	29403fcc 	andi	r5,r5,255
    7888:	28020f1e 	bne	r5,zero,80c8 <___vfiprintf_internal_r+0x11d8>
    788c:	d9000417 	ldw	r4,16(sp)
    7890:	6880080c 	andi	r2,r13,32
    7894:	20c00104 	addi	r3,r4,4
    7898:	1001c01e 	bne	r2,zero,7f9c <___vfiprintf_internal_r+0x10ac>
    789c:	6880040c 	andi	r2,r13,16
    78a0:	1001df1e 	bne	r2,zero,8020 <___vfiprintf_internal_r+0x1130>
    78a4:	6b40100c 	andi	r13,r13,64
    78a8:	6801dd26 	beq	r13,zero,8020 <___vfiprintf_internal_r+0x1130>
    78ac:	d8800417 	ldw	r2,16(sp)
    78b0:	d8c00415 	stw	r3,16(sp)
    78b4:	d8c00117 	ldw	r3,4(sp)
    78b8:	10800017 	ldw	r2,0(r2)
    78bc:	10c0000d 	sth	r3,0(r2)
    78c0:	003db406 	br	6f94 <___vfiprintf_internal_r+0xa4>
    78c4:	a0800007 	ldb	r2,0(r20)
    78c8:	10c01b18 	cmpnei	r3,r2,108
    78cc:	183fe326 	beq	r3,zero,785c <___vfiprintf_internal_r+0x96c>
    78d0:	6b400414 	ori	r13,r13,16
    78d4:	003dc706 	br	6ff4 <___vfiprintf_internal_r+0x104>
    78d8:	d8c00417 	ldw	r3,16(sp)
    78dc:	d8000945 	stb	zero,37(sp)
    78e0:	05c00044 	movi	r23,1
    78e4:	18800017 	ldw	r2,0(r3)
    78e8:	18c00104 	addi	r3,r3,4
    78ec:	d8c00415 	stw	r3,16(sp)
    78f0:	d8800d05 	stb	r2,52(sp)
    78f4:	07000044 	movi	fp,1
    78f8:	dcc00d04 	addi	r19,sp,52
    78fc:	003e3306 	br	71cc <___vfiprintf_internal_r+0x2dc>
    7900:	29403fcc 	andi	r5,r5,255
    7904:	2801ee1e 	bne	r5,zero,80c0 <___vfiprintf_internal_r+0x11d0>
    7908:	00c00074 	movhi	r3,1
    790c:	18c03704 	addi	r3,r3,220
    7910:	d8c00515 	stw	r3,20(sp)
    7914:	68c0080c 	andi	r3,r13,32
    7918:	18001226 	beq	r3,zero,7964 <___vfiprintf_internal_r+0xa74>
    791c:	d8c00417 	ldw	r3,16(sp)
    7920:	1dc00017 	ldw	r23,0(r3)
    7924:	1f000117 	ldw	fp,4(r3)
    7928:	18c00204 	addi	r3,r3,8
    792c:	d8c00415 	stw	r3,16(sp)
    7930:	68c0004c 	andi	r3,r13,1
    7934:	18000226 	beq	r3,zero,7940 <___vfiprintf_internal_r+0xa50>
    7938:	bf06b03a 	or	r3,r23,fp
    793c:	1801911e 	bne	r3,zero,7f84 <___vfiprintf_internal_r+0x1094>
    7940:	00800084 	movi	r2,2
    7944:	003eb706 	br	7424 <___vfiprintf_internal_r+0x534>
    7948:	29403fcc 	andi	r5,r5,255
    794c:	2801e01e 	bne	r5,zero,80d0 <___vfiprintf_internal_r+0x11e0>
    7950:	00c00074 	movhi	r3,1
    7954:	18c03204 	addi	r3,r3,200
    7958:	d8c00515 	stw	r3,20(sp)
    795c:	68c0080c 	andi	r3,r13,32
    7960:	183fee1e 	bne	r3,zero,791c <___vfiprintf_internal_r+0xa2c>
    7964:	d9000417 	ldw	r4,16(sp)
    7968:	68c0040c 	andi	r3,r13,16
    796c:	25c00017 	ldw	r23,0(r4)
    7970:	21000104 	addi	r4,r4,4
    7974:	d9000415 	stw	r4,16(sp)
    7978:	18015a1e 	bne	r3,zero,7ee4 <___vfiprintf_internal_r+0xff4>
    797c:	68c0100c 	andi	r3,r13,64
    7980:	18015826 	beq	r3,zero,7ee4 <___vfiprintf_internal_r+0xff4>
    7984:	bdffffcc 	andi	r23,r23,65535
    7988:	0039883a 	mov	fp,zero
    798c:	003fe806 	br	7930 <___vfiprintf_internal_r+0xa40>
    7990:	d8800417 	ldw	r2,16(sp)
    7994:	d8000945 	stb	zero,37(sp)
    7998:	14c00017 	ldw	r19,0(r2)
    799c:	10c00104 	addi	r3,r2,4
    79a0:	9801a526 	beq	r19,zero,8038 <___vfiprintf_internal_r+0x1148>
    79a4:	40bfffe0 	cmpeqi	r2,r8,-1
    79a8:	10018a1e 	bne	r2,zero,7fd4 <___vfiprintf_internal_r+0x10e4>
    79ac:	400d883a 	mov	r6,r8
    79b0:	000b883a 	mov	r5,zero
    79b4:	9809883a 	mov	r4,r19
    79b8:	d8c00315 	stw	r3,12(sp)
    79bc:	db400215 	stw	r13,8(sp)
    79c0:	da000015 	stw	r8,0(sp)
    79c4:	00057940 	call	5794 <memchr>
    79c8:	da000017 	ldw	r8,0(sp)
    79cc:	db400217 	ldw	r13,8(sp)
    79d0:	d8c00317 	ldw	r3,12(sp)
    79d4:	1001b426 	beq	r2,zero,80a8 <___vfiprintf_internal_r+0x11b8>
    79d8:	14f9c83a 	sub	fp,r2,r19
    79dc:	e02f883a 	mov	r23,fp
    79e0:	d8c00415 	stw	r3,16(sp)
    79e4:	003df906 	br	71cc <___vfiprintf_internal_r+0x2dc>
    79e8:	a0800007 	ldb	r2,0(r20)
    79ec:	6b400814 	ori	r13,r13,32
    79f0:	003d8006 	br	6ff4 <___vfiprintf_internal_r+0x104>
    79f4:	d8c00417 	ldw	r3,16(sp)
    79f8:	00800c04 	movi	r2,48
    79fc:	d8800985 	stb	r2,38(sp)
    7a00:	00801e04 	movi	r2,120
    7a04:	01000074 	movhi	r4,1
    7a08:	d88009c5 	stb	r2,39(sp)
    7a0c:	18800104 	addi	r2,r3,4
    7a10:	d8800415 	stw	r2,16(sp)
    7a14:	20803204 	addi	r2,r4,200
    7a18:	d8800515 	stw	r2,20(sp)
    7a1c:	1dc00017 	ldw	r23,0(r3)
    7a20:	0039883a 	mov	fp,zero
    7a24:	6b400094 	ori	r13,r13,2
    7a28:	00800084 	movi	r2,2
    7a2c:	003e7d06 	br	7424 <___vfiprintf_internal_r+0x534>
    7a30:	00c00044 	movi	r3,1
    7a34:	e005883a 	mov	r2,fp
    7a38:	dcc01715 	stw	r19,92(sp)
    7a3c:	df001815 	stw	fp,96(sp)
    7a40:	df000c15 	stw	fp,48(sp)
    7a44:	d8c00b15 	stw	r3,44(sp)
    7a48:	9021883a 	mov	r16,r18
    7a4c:	84000204 	addi	r16,r16,8
    7a50:	003e2606 	br	72ec <___vfiprintf_internal_r+0x3fc>
    7a54:	01400044 	movi	r5,1
    7a58:	0009883a 	mov	r4,zero
    7a5c:	9021883a 	mov	r16,r18
    7a60:	003ec406 	br	7574 <___vfiprintf_internal_r+0x684>
    7a64:	8dc7c83a 	sub	r3,r17,r23
    7a68:	00fe0f0e 	bge	zero,r3,72a8 <___vfiprintf_internal_r+0x3b8>
    7a6c:	19800450 	cmplti	r6,r3,17
    7a70:	01c00074 	movhi	r7,1
    7a74:	3001a01e 	bne	r6,zero,80f8 <___vfiprintf_internal_r+0x1208>
    7a78:	39c0b904 	addi	r7,r7,740
    7a7c:	03400404 	movi	r13,16
    7a80:	00000606 	br	7a9c <___vfiprintf_internal_r+0xbac>
    7a84:	21800084 	addi	r6,r4,2
    7a88:	84000204 	addi	r16,r16,8
    7a8c:	2809883a 	mov	r4,r5
    7a90:	18fffc04 	addi	r3,r3,-16
    7a94:	19400448 	cmpgei	r5,r3,17
    7a98:	28001c26 	beq	r5,zero,7b0c <___vfiprintf_internal_r+0xc1c>
    7a9c:	21400044 	addi	r5,r4,1
    7aa0:	10800404 	addi	r2,r2,16
    7aa4:	81c00015 	stw	r7,0(r16)
    7aa8:	83400115 	stw	r13,4(r16)
    7aac:	d8800c15 	stw	r2,48(sp)
    7ab0:	d9400b15 	stw	r5,44(sp)
    7ab4:	29800208 	cmpgei	r6,r5,8
    7ab8:	303ff226 	beq	r6,zero,7a84 <___vfiprintf_internal_r+0xb94>
    7abc:	d9800a04 	addi	r6,sp,40
    7ac0:	a80b883a 	mov	r5,r21
    7ac4:	b009883a 	mov	r4,r22
    7ac8:	10007426 	beq	r2,zero,7c9c <___vfiprintf_internal_r+0xdac>
    7acc:	d9c00615 	stw	r7,24(sp)
    7ad0:	d8c00315 	stw	r3,12(sp)
    7ad4:	da000215 	stw	r8,8(sp)
    7ad8:	0006de40 	call	6de4 <__sprint_r.part.0>
    7adc:	103e141e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7ae0:	d8c00317 	ldw	r3,12(sp)
    7ae4:	d9000b17 	ldw	r4,44(sp)
    7ae8:	d8800c17 	ldw	r2,48(sp)
    7aec:	18fffc04 	addi	r3,r3,-16
    7af0:	19400448 	cmpgei	r5,r3,17
    7af4:	d9c00617 	ldw	r7,24(sp)
    7af8:	da000217 	ldw	r8,8(sp)
    7afc:	9021883a 	mov	r16,r18
    7b00:	21800044 	addi	r6,r4,1
    7b04:	03400404 	movi	r13,16
    7b08:	283fe41e 	bne	r5,zero,7a9c <___vfiprintf_internal_r+0xbac>
    7b0c:	10c5883a 	add	r2,r2,r3
    7b10:	80c00115 	stw	r3,4(r16)
    7b14:	81c00015 	stw	r7,0(r16)
    7b18:	d8800c15 	stw	r2,48(sp)
    7b1c:	d9800b15 	stw	r6,44(sp)
    7b20:	30c00208 	cmpgei	r3,r6,8
    7b24:	18011326 	beq	r3,zero,7f74 <___vfiprintf_internal_r+0x1084>
    7b28:	10014b26 	beq	r2,zero,8058 <___vfiprintf_internal_r+0x1168>
    7b2c:	d9800a04 	addi	r6,sp,40
    7b30:	a80b883a 	mov	r5,r21
    7b34:	b009883a 	mov	r4,r22
    7b38:	da000215 	stw	r8,8(sp)
    7b3c:	0006de40 	call	6de4 <__sprint_r.part.0>
    7b40:	103dfb1e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7b44:	da000217 	ldw	r8,8(sp)
    7b48:	d9000b17 	ldw	r4,44(sp)
    7b4c:	d8800c17 	ldw	r2,48(sp)
    7b50:	4711c83a 	sub	r8,r8,fp
    7b54:	9021883a 	mov	r16,r18
    7b58:	21400044 	addi	r5,r4,1
    7b5c:	023dd40e 	bge	zero,r8,72b0 <___vfiprintf_internal_r+0x3c0>
    7b60:	01c00074 	movhi	r7,1
    7b64:	40c00450 	cmplti	r3,r8,17
    7b68:	39c0b904 	addi	r7,r7,740
    7b6c:	03400404 	movi	r13,16
    7b70:	18000726 	beq	r3,zero,7b90 <___vfiprintf_internal_r+0xca0>
    7b74:	00002006 	br	7bf8 <___vfiprintf_internal_r+0xd08>
    7b78:	21400084 	addi	r5,r4,2
    7b7c:	84000204 	addi	r16,r16,8
    7b80:	1809883a 	mov	r4,r3
    7b84:	423ffc04 	addi	r8,r8,-16
    7b88:	40c00448 	cmpgei	r3,r8,17
    7b8c:	18001a26 	beq	r3,zero,7bf8 <___vfiprintf_internal_r+0xd08>
    7b90:	20c00044 	addi	r3,r4,1
    7b94:	10800404 	addi	r2,r2,16
    7b98:	81c00015 	stw	r7,0(r16)
    7b9c:	83400115 	stw	r13,4(r16)
    7ba0:	d8800c15 	stw	r2,48(sp)
    7ba4:	d8c00b15 	stw	r3,44(sp)
    7ba8:	19400208 	cmpgei	r5,r3,8
    7bac:	283ff226 	beq	r5,zero,7b78 <___vfiprintf_internal_r+0xc88>
    7bb0:	d9800a04 	addi	r6,sp,40
    7bb4:	a80b883a 	mov	r5,r21
    7bb8:	b009883a 	mov	r4,r22
    7bbc:	10001826 	beq	r2,zero,7c20 <___vfiprintf_internal_r+0xd30>
    7bc0:	d9c00315 	stw	r7,12(sp)
    7bc4:	da000215 	stw	r8,8(sp)
    7bc8:	0006de40 	call	6de4 <__sprint_r.part.0>
    7bcc:	103dd81e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7bd0:	da000217 	ldw	r8,8(sp)
    7bd4:	d9000b17 	ldw	r4,44(sp)
    7bd8:	d8800c17 	ldw	r2,48(sp)
    7bdc:	423ffc04 	addi	r8,r8,-16
    7be0:	40c00448 	cmpgei	r3,r8,17
    7be4:	d9c00317 	ldw	r7,12(sp)
    7be8:	9021883a 	mov	r16,r18
    7bec:	21400044 	addi	r5,r4,1
    7bf0:	03400404 	movi	r13,16
    7bf4:	183fe61e 	bne	r3,zero,7b90 <___vfiprintf_internal_r+0xca0>
    7bf8:	1205883a 	add	r2,r2,r8
    7bfc:	81c00015 	stw	r7,0(r16)
    7c00:	82000115 	stw	r8,4(r16)
    7c04:	d8800c15 	stw	r2,48(sp)
    7c08:	d9400b15 	stw	r5,44(sp)
    7c0c:	28c00208 	cmpgei	r3,r5,8
    7c10:	1800a11e 	bne	r3,zero,7e98 <___vfiprintf_internal_r+0xfa8>
    7c14:	84000204 	addi	r16,r16,8
    7c18:	29400044 	addi	r5,r5,1
    7c1c:	003da406 	br	72b0 <___vfiprintf_internal_r+0x3c0>
    7c20:	01400044 	movi	r5,1
    7c24:	0009883a 	mov	r4,zero
    7c28:	9021883a 	mov	r16,r18
    7c2c:	003fd506 	br	7b84 <___vfiprintf_internal_r+0xc94>
    7c30:	10c00060 	cmpeqi	r3,r2,1
    7c34:	18011a1e 	bne	r3,zero,80a0 <___vfiprintf_internal_r+0x11b0>
    7c38:	108000a0 	cmpeqi	r2,r2,2
    7c3c:	db400017 	ldw	r13,0(sp)
    7c40:	103ecf26 	beq	r2,zero,7780 <___vfiprintf_internal_r+0x890>
    7c44:	9027883a 	mov	r19,r18
    7c48:	d9000517 	ldw	r4,20(sp)
    7c4c:	b88003cc 	andi	r2,r23,15
    7c50:	e006973a 	slli	r3,fp,28
    7c54:	b82ed13a 	srli	r23,r23,4
    7c58:	2085883a 	add	r2,r4,r2
    7c5c:	10800003 	ldbu	r2,0(r2)
    7c60:	e038d13a 	srli	fp,fp,4
    7c64:	1deeb03a 	or	r23,r3,r23
    7c68:	98bfffc5 	stb	r2,-1(r19)
    7c6c:	bf04b03a 	or	r2,r23,fp
    7c70:	9cffffc4 	addi	r19,r19,-1
    7c74:	103ff41e 	bne	r2,zero,7c48 <___vfiprintf_internal_r+0xd58>
    7c78:	94f9c83a 	sub	fp,r18,r19
    7c7c:	db400015 	stw	r13,0(sp)
    7c80:	003ed806 	br	77e4 <___vfiprintf_internal_r+0x8f4>
    7c84:	d9800a04 	addi	r6,sp,40
    7c88:	a80b883a 	mov	r5,r21
    7c8c:	b009883a 	mov	r4,r22
    7c90:	0006de40 	call	6de4 <__sprint_r.part.0>
    7c94:	103da026 	beq	r2,zero,7318 <___vfiprintf_internal_r+0x428>
    7c98:	003da506 	br	7330 <___vfiprintf_internal_r+0x440>
    7c9c:	01800044 	movi	r6,1
    7ca0:	0009883a 	mov	r4,zero
    7ca4:	9021883a 	mov	r16,r18
    7ca8:	003f7906 	br	7a90 <___vfiprintf_internal_r+0xba0>
    7cac:	10009626 	beq	r2,zero,7f08 <___vfiprintf_internal_r+0x1018>
    7cb0:	d9800a04 	addi	r6,sp,40
    7cb4:	a80b883a 	mov	r5,r21
    7cb8:	b009883a 	mov	r4,r22
    7cbc:	da000615 	stw	r8,24(sp)
    7cc0:	db400315 	stw	r13,12(sp)
    7cc4:	db800215 	stw	r14,8(sp)
    7cc8:	0006de40 	call	6de4 <__sprint_r.part.0>
    7ccc:	103d981e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7cd0:	d9000b17 	ldw	r4,44(sp)
    7cd4:	d8800c17 	ldw	r2,48(sp)
    7cd8:	da000617 	ldw	r8,24(sp)
    7cdc:	db400317 	ldw	r13,12(sp)
    7ce0:	db800217 	ldw	r14,8(sp)
    7ce4:	9021883a 	mov	r16,r18
    7ce8:	21400044 	addi	r5,r4,1
    7cec:	003d5406 	br	7240 <___vfiprintf_internal_r+0x350>
    7cf0:	d8800984 	addi	r2,sp,38
    7cf4:	d8801715 	stw	r2,92(sp)
    7cf8:	00800084 	movi	r2,2
    7cfc:	d8801815 	stw	r2,96(sp)
    7d00:	01400044 	movi	r5,1
    7d04:	9021883a 	mov	r16,r18
    7d08:	2809883a 	mov	r4,r5
    7d0c:	84000204 	addi	r16,r16,8
    7d10:	21400044 	addi	r5,r4,1
    7d14:	003d6206 	br	72a0 <___vfiprintf_internal_r+0x3b0>
    7d18:	db400017 	ldw	r13,0(sp)
    7d1c:	003e9406 	br	7770 <___vfiprintf_internal_r+0x880>
    7d20:	9027883a 	mov	r19,r18
    7d24:	b809883a 	mov	r4,r23
    7d28:	e00b883a 	mov	r5,fp
    7d2c:	01800284 	movi	r6,10
    7d30:	000f883a 	mov	r7,zero
    7d34:	db800315 	stw	r14,12(sp)
    7d38:	da000215 	stw	r8,8(sp)
    7d3c:	db400015 	stw	r13,0(sp)
    7d40:	000a4240 	call	a424 <__umoddi3>
    7d44:	10800c04 	addi	r2,r2,48
    7d48:	b809883a 	mov	r4,r23
    7d4c:	e00b883a 	mov	r5,fp
    7d50:	98bfffc5 	stb	r2,-1(r19)
    7d54:	01800284 	movi	r6,10
    7d58:	000f883a 	mov	r7,zero
    7d5c:	0009e940 	call	9e94 <__udivdi3>
    7d60:	e009883a 	mov	r4,fp
    7d64:	b80b883a 	mov	r5,r23
    7d68:	db400017 	ldw	r13,0(sp)
    7d6c:	da000217 	ldw	r8,8(sp)
    7d70:	db800317 	ldw	r14,12(sp)
    7d74:	9cffffc4 	addi	r19,r19,-1
    7d78:	102f883a 	mov	r23,r2
    7d7c:	1839883a 	mov	fp,r3
    7d80:	203fe81e 	bne	r4,zero,7d24 <___vfiprintf_internal_r+0xe34>
    7d84:	294002a8 	cmpgeui	r5,r5,10
    7d88:	283fe61e 	bne	r5,zero,7d24 <___vfiprintf_internal_r+0xe34>
    7d8c:	94f9c83a 	sub	fp,r18,r19
    7d90:	003e9406 	br	77e4 <___vfiprintf_internal_r+0x8f4>
    7d94:	19400450 	cmplti	r5,r3,17
    7d98:	01c00074 	movhi	r7,1
    7d9c:	2800ce1e 	bne	r5,zero,80d8 <___vfiprintf_internal_r+0x11e8>
    7da0:	39c0bd04 	addi	r7,r7,756
    7da4:	03c00404 	movi	r15,16
    7da8:	00000706 	br	7dc8 <___vfiprintf_internal_r+0xed8>
    7dac:	27c00084 	addi	ra,r4,2
    7db0:	84000204 	addi	r16,r16,8
    7db4:	3009883a 	mov	r4,r6
    7db8:	18fffc04 	addi	r3,r3,-16
    7dbc:	19400448 	cmpgei	r5,r3,17
    7dc0:	28002026 	beq	r5,zero,7e44 <___vfiprintf_internal_r+0xf54>
    7dc4:	21800044 	addi	r6,r4,1
    7dc8:	10800404 	addi	r2,r2,16
    7dcc:	81c00015 	stw	r7,0(r16)
    7dd0:	83c00115 	stw	r15,4(r16)
    7dd4:	d8800c15 	stw	r2,48(sp)
    7dd8:	d9800b15 	stw	r6,44(sp)
    7ddc:	31400208 	cmpgei	r5,r6,8
    7de0:	283ff226 	beq	r5,zero,7dac <___vfiprintf_internal_r+0xebc>
    7de4:	d9800a04 	addi	r6,sp,40
    7de8:	a80b883a 	mov	r5,r21
    7dec:	b009883a 	mov	r4,r22
    7df0:	10001f26 	beq	r2,zero,7e70 <___vfiprintf_internal_r+0xf80>
    7df4:	d9c00815 	stw	r7,32(sp)
    7df8:	d8c00715 	stw	r3,28(sp)
    7dfc:	da000615 	stw	r8,24(sp)
    7e00:	db400315 	stw	r13,12(sp)
    7e04:	db800215 	stw	r14,8(sp)
    7e08:	0006de40 	call	6de4 <__sprint_r.part.0>
    7e0c:	103d481e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7e10:	d8c00717 	ldw	r3,28(sp)
    7e14:	d9000b17 	ldw	r4,44(sp)
    7e18:	d8800c17 	ldw	r2,48(sp)
    7e1c:	18fffc04 	addi	r3,r3,-16
    7e20:	19400448 	cmpgei	r5,r3,17
    7e24:	d9c00817 	ldw	r7,32(sp)
    7e28:	da000617 	ldw	r8,24(sp)
    7e2c:	db400317 	ldw	r13,12(sp)
    7e30:	db800217 	ldw	r14,8(sp)
    7e34:	9021883a 	mov	r16,r18
    7e38:	27c00044 	addi	ra,r4,1
    7e3c:	03c00404 	movi	r15,16
    7e40:	283fe01e 	bne	r5,zero,7dc4 <___vfiprintf_internal_r+0xed4>
    7e44:	10c5883a 	add	r2,r2,r3
    7e48:	80c00115 	stw	r3,4(r16)
    7e4c:	81c00015 	stw	r7,0(r16)
    7e50:	d8800c15 	stw	r2,48(sp)
    7e54:	dfc00b15 	stw	ra,44(sp)
    7e58:	f8c00208 	cmpgei	r3,ra,8
    7e5c:	18002f1e 	bne	r3,zero,7f1c <___vfiprintf_internal_r+0x102c>
    7e60:	84000204 	addi	r16,r16,8
    7e64:	f9400044 	addi	r5,ra,1
    7e68:	f809883a 	mov	r4,ra
    7e6c:	003ce606 	br	7208 <___vfiprintf_internal_r+0x318>
    7e70:	0009883a 	mov	r4,zero
    7e74:	07c00044 	movi	ra,1
    7e78:	9021883a 	mov	r16,r18
    7e7c:	003fce06 	br	7db8 <___vfiprintf_internal_r+0xec8>
    7e80:	8dc0010e 	bge	r17,r23,7e88 <___vfiprintf_internal_r+0xf98>
    7e84:	b823883a 	mov	r17,r23
    7e88:	d8800117 	ldw	r2,4(sp)
    7e8c:	1445883a 	add	r2,r2,r17
    7e90:	d8800115 	stw	r2,4(sp)
    7e94:	003d2006 	br	7318 <___vfiprintf_internal_r+0x428>
    7e98:	103ee526 	beq	r2,zero,7a30 <___vfiprintf_internal_r+0xb40>
    7e9c:	d9800a04 	addi	r6,sp,40
    7ea0:	a80b883a 	mov	r5,r21
    7ea4:	b009883a 	mov	r4,r22
    7ea8:	0006de40 	call	6de4 <__sprint_r.part.0>
    7eac:	103d201e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7eb0:	d9400b17 	ldw	r5,44(sp)
    7eb4:	d8800c17 	ldw	r2,48(sp)
    7eb8:	9021883a 	mov	r16,r18
    7ebc:	29400044 	addi	r5,r5,1
    7ec0:	003cfb06 	br	72b0 <___vfiprintf_internal_r+0x3c0>
    7ec4:	d8000b15 	stw	zero,44(sp)
    7ec8:	9021883a 	mov	r16,r18
    7ecc:	003d7306 	br	749c <___vfiprintf_internal_r+0x5ac>
    7ed0:	4000731e 	bne	r8,zero,80a0 <___vfiprintf_internal_r+0x11b0>
    7ed4:	0011883a 	mov	r8,zero
    7ed8:	0039883a 	mov	fp,zero
    7edc:	9027883a 	mov	r19,r18
    7ee0:	003e4006 	br	77e4 <___vfiprintf_internal_r+0x8f4>
    7ee4:	0039883a 	mov	fp,zero
    7ee8:	003e9106 	br	7930 <___vfiprintf_internal_r+0xa40>
    7eec:	b839d7fa 	srai	fp,r23,31
    7ef0:	e005883a 	mov	r2,fp
    7ef4:	003dd406 	br	7648 <___vfiprintf_internal_r+0x758>
    7ef8:	01400044 	movi	r5,1
    7efc:	0009883a 	mov	r4,zero
    7f00:	9021883a 	mov	r16,r18
    7f04:	003ce606 	br	72a0 <___vfiprintf_internal_r+0x3b0>
    7f08:	70002b1e 	bne	r14,zero,7fb8 <___vfiprintf_internal_r+0x10c8>
    7f0c:	0009883a 	mov	r4,zero
    7f10:	01400044 	movi	r5,1
    7f14:	9021883a 	mov	r16,r18
    7f18:	003ce106 	br	72a0 <___vfiprintf_internal_r+0x3b0>
    7f1c:	10003726 	beq	r2,zero,7ffc <___vfiprintf_internal_r+0x110c>
    7f20:	d9800a04 	addi	r6,sp,40
    7f24:	a80b883a 	mov	r5,r21
    7f28:	b009883a 	mov	r4,r22
    7f2c:	da000615 	stw	r8,24(sp)
    7f30:	db400315 	stw	r13,12(sp)
    7f34:	db800215 	stw	r14,8(sp)
    7f38:	0006de40 	call	6de4 <__sprint_r.part.0>
    7f3c:	103cfc1e 	bne	r2,zero,7330 <___vfiprintf_internal_r+0x440>
    7f40:	d9000b17 	ldw	r4,44(sp)
    7f44:	d8800c17 	ldw	r2,48(sp)
    7f48:	da000617 	ldw	r8,24(sp)
    7f4c:	db400317 	ldw	r13,12(sp)
    7f50:	db800217 	ldw	r14,8(sp)
    7f54:	9021883a 	mov	r16,r18
    7f58:	21400044 	addi	r5,r4,1
    7f5c:	003caa06 	br	7208 <___vfiprintf_internal_r+0x318>
    7f60:	a0800007 	ldb	r2,0(r20)
    7f64:	d8c00415 	stw	r3,16(sp)
    7f68:	003c2206 	br	6ff4 <___vfiprintf_internal_r+0x104>
    7f6c:	9027883a 	mov	r19,r18
    7f70:	003e1c06 	br	77e4 <___vfiprintf_internal_r+0x8f4>
    7f74:	84000204 	addi	r16,r16,8
    7f78:	31400044 	addi	r5,r6,1
    7f7c:	3009883a 	mov	r4,r6
    7f80:	003cc906 	br	72a8 <___vfiprintf_internal_r+0x3b8>
    7f84:	00c00c04 	movi	r3,48
    7f88:	d88009c5 	stb	r2,39(sp)
    7f8c:	d8c00985 	stb	r3,38(sp)
    7f90:	6b400094 	ori	r13,r13,2
    7f94:	00800084 	movi	r2,2
    7f98:	003d2206 	br	7424 <___vfiprintf_internal_r+0x534>
    7f9c:	d9400117 	ldw	r5,4(sp)
    7fa0:	20800017 	ldw	r2,0(r4)
    7fa4:	d8c00415 	stw	r3,16(sp)
    7fa8:	2809d7fa 	srai	r4,r5,31
    7fac:	11400015 	stw	r5,0(r2)
    7fb0:	11000115 	stw	r4,4(r2)
    7fb4:	003bf706 	br	6f94 <___vfiprintf_internal_r+0xa4>
    7fb8:	d8800984 	addi	r2,sp,38
    7fbc:	d8801715 	stw	r2,92(sp)
    7fc0:	00800084 	movi	r2,2
    7fc4:	d8801815 	stw	r2,96(sp)
    7fc8:	01000044 	movi	r4,1
    7fcc:	9021883a 	mov	r16,r18
    7fd0:	003f4e06 	br	7d0c <___vfiprintf_internal_r+0xe1c>
    7fd4:	9809883a 	mov	r4,r19
    7fd8:	d8c00215 	stw	r3,8(sp)
    7fdc:	db400015 	stw	r13,0(sp)
    7fe0:	0006d4c0 	call	6d4c <strlen>
    7fe4:	d8c00217 	ldw	r3,8(sp)
    7fe8:	db400017 	ldw	r13,0(sp)
    7fec:	1039883a 	mov	fp,r2
    7ff0:	102f883a 	mov	r23,r2
    7ff4:	d8c00415 	stw	r3,16(sp)
    7ff8:	003c7406 	br	71cc <___vfiprintf_internal_r+0x2dc>
    7ffc:	d8c00947 	ldb	r3,37(sp)
    8000:	18001b26 	beq	r3,zero,8070 <___vfiprintf_internal_r+0x1180>
    8004:	d8800944 	addi	r2,sp,37
    8008:	d8801715 	stw	r2,92(sp)
    800c:	00800044 	movi	r2,1
    8010:	d8801815 	stw	r2,96(sp)
    8014:	01400044 	movi	r5,1
    8018:	9021883a 	mov	r16,r18
    801c:	003c8506 	br	7234 <___vfiprintf_internal_r+0x344>
    8020:	d8800417 	ldw	r2,16(sp)
    8024:	10800017 	ldw	r2,0(r2)
    8028:	d8c00415 	stw	r3,16(sp)
    802c:	d8c00117 	ldw	r3,4(sp)
    8030:	10c00015 	stw	r3,0(r2)
    8034:	003bd706 	br	6f94 <___vfiprintf_internal_r+0xa4>
    8038:	408001f0 	cmpltui	r2,r8,7
    803c:	4039883a 	mov	fp,r8
    8040:	10000926 	beq	r2,zero,8068 <___vfiprintf_internal_r+0x1178>
    8044:	04c00074 	movhi	r19,1
    8048:	e02f883a 	mov	r23,fp
    804c:	d8c00415 	stw	r3,16(sp)
    8050:	9cc03c04 	addi	r19,r19,240
    8054:	003c5d06 	br	71cc <___vfiprintf_internal_r+0x2dc>
    8058:	01400044 	movi	r5,1
    805c:	0009883a 	mov	r4,zero
    8060:	9021883a 	mov	r16,r18
    8064:	003c9006 	br	72a8 <___vfiprintf_internal_r+0x3b8>
    8068:	07000184 	movi	fp,6
    806c:	003ff506 	br	8044 <___vfiprintf_internal_r+0x1154>
    8070:	703f1f1e 	bne	r14,zero,7cf0 <___vfiprintf_internal_r+0xe00>
    8074:	0009883a 	mov	r4,zero
    8078:	01400044 	movi	r5,1
    807c:	9021883a 	mov	r16,r18
    8080:	003c8906 	br	72a8 <___vfiprintf_internal_r+0x3b8>
    8084:	d9800945 	stb	r6,37(sp)
    8088:	003c4a06 	br	71b4 <___vfiprintf_internal_r+0x2c4>
    808c:	d9800a04 	addi	r6,sp,40
    8090:	a80b883a 	mov	r5,r21
    8094:	b009883a 	mov	r4,r22
    8098:	0006de40 	call	6de4 <__sprint_r.part.0>
    809c:	003ca406 	br	7330 <___vfiprintf_internal_r+0x440>
    80a0:	db400017 	ldw	r13,0(sp)
    80a4:	003d7506 	br	767c <___vfiprintf_internal_r+0x78c>
    80a8:	402f883a 	mov	r23,r8
    80ac:	d8c00415 	stw	r3,16(sp)
    80b0:	4039883a 	mov	fp,r8
    80b4:	003c4506 	br	71cc <___vfiprintf_internal_r+0x2dc>
    80b8:	d9800945 	stb	r6,37(sp)
    80bc:	003d9106 	br	7704 <___vfiprintf_internal_r+0x814>
    80c0:	d9800945 	stb	r6,37(sp)
    80c4:	003e1006 	br	7908 <___vfiprintf_internal_r+0xa18>
    80c8:	d9800945 	stb	r6,37(sp)
    80cc:	003def06 	br	788c <___vfiprintf_internal_r+0x99c>
    80d0:	d9800945 	stb	r6,37(sp)
    80d4:	003e1e06 	br	7950 <___vfiprintf_internal_r+0xa60>
    80d8:	303f883a 	mov	ra,r6
    80dc:	39c0bd04 	addi	r7,r7,756
    80e0:	003f5806 	br	7e44 <___vfiprintf_internal_r+0xf54>
    80e4:	d9800945 	stb	r6,37(sp)
    80e8:	003d4f06 	br	7628 <___vfiprintf_internal_r+0x738>
    80ec:	21400044 	addi	r5,r4,1
    80f0:	39c0bd04 	addi	r7,r7,756
    80f4:	003d3906 	br	75dc <___vfiprintf_internal_r+0x6ec>
    80f8:	280d883a 	mov	r6,r5
    80fc:	39c0b904 	addi	r7,r7,740
    8100:	003e8206 	br	7b0c <___vfiprintf_internal_r+0xc1c>
    8104:	00bfffc4 	movi	r2,-1
    8108:	d8800115 	stw	r2,4(sp)
    810c:	003c8b06 	br	733c <___vfiprintf_internal_r+0x44c>
    8110:	d8800417 	ldw	r2,16(sp)
    8114:	12000017 	ldw	r8,0(r2)
    8118:	10c00104 	addi	r3,r2,4
    811c:	4000010e 	bge	r8,zero,8124 <___vfiprintf_internal_r+0x1234>
    8120:	023fffc4 	movi	r8,-1
    8124:	a0800043 	ldbu	r2,1(r20)
    8128:	d8c00415 	stw	r3,16(sp)
    812c:	2029883a 	mov	r20,r4
    8130:	10803fcc 	andi	r2,r2,255
    8134:	1080201c 	xori	r2,r2,128
    8138:	10bfe004 	addi	r2,r2,-128
    813c:	003bad06 	br	6ff4 <___vfiprintf_internal_r+0x104>

00008140 <__vfiprintf_internal>:
    8140:	00c00074 	movhi	r3,1
    8144:	2005883a 	mov	r2,r4
    8148:	1908ed17 	ldw	r4,9140(r3)
    814c:	300f883a 	mov	r7,r6
    8150:	280d883a 	mov	r6,r5
    8154:	100b883a 	mov	r5,r2
    8158:	0006ef01 	jmpi	6ef0 <___vfiprintf_internal_r>

0000815c <__sbprintf>:
    815c:	2880030b 	ldhu	r2,12(r5)
    8160:	2b001917 	ldw	r12,100(r5)
    8164:	2ac0038b 	ldhu	r11,14(r5)
    8168:	2a800717 	ldw	r10,28(r5)
    816c:	2a400917 	ldw	r9,36(r5)
    8170:	defee204 	addi	sp,sp,-1144
    8174:	da001a04 	addi	r8,sp,104
    8178:	00c10004 	movi	r3,1024
    817c:	dc011a15 	stw	r16,1128(sp)
    8180:	10bfff4c 	andi	r2,r2,65533
    8184:	2821883a 	mov	r16,r5
    8188:	d80b883a 	mov	r5,sp
    818c:	dc811c15 	stw	r18,1136(sp)
    8190:	dc411b15 	stw	r17,1132(sp)
    8194:	dfc11d15 	stw	ra,1140(sp)
    8198:	2025883a 	mov	r18,r4
    819c:	d880030d 	sth	r2,12(sp)
    81a0:	db001915 	stw	r12,100(sp)
    81a4:	dac0038d 	sth	r11,14(sp)
    81a8:	da800715 	stw	r10,28(sp)
    81ac:	da400915 	stw	r9,36(sp)
    81b0:	da000015 	stw	r8,0(sp)
    81b4:	da000415 	stw	r8,16(sp)
    81b8:	d8c00215 	stw	r3,8(sp)
    81bc:	d8c00515 	stw	r3,20(sp)
    81c0:	d8000615 	stw	zero,24(sp)
    81c4:	0006ef00 	call	6ef0 <___vfiprintf_internal_r>
    81c8:	1023883a 	mov	r17,r2
    81cc:	10000d0e 	bge	r2,zero,8204 <__sbprintf+0xa8>
    81d0:	d880030b 	ldhu	r2,12(sp)
    81d4:	1080100c 	andi	r2,r2,64
    81d8:	10000326 	beq	r2,zero,81e8 <__sbprintf+0x8c>
    81dc:	8080030b 	ldhu	r2,12(r16)
    81e0:	10801014 	ori	r2,r2,64
    81e4:	8080030d 	sth	r2,12(r16)
    81e8:	8805883a 	mov	r2,r17
    81ec:	dfc11d17 	ldw	ra,1140(sp)
    81f0:	dc811c17 	ldw	r18,1136(sp)
    81f4:	dc411b17 	ldw	r17,1132(sp)
    81f8:	dc011a17 	ldw	r16,1128(sp)
    81fc:	dec11e04 	addi	sp,sp,1144
    8200:	f800283a 	ret
    8204:	d80b883a 	mov	r5,sp
    8208:	9009883a 	mov	r4,r18
    820c:	00043740 	call	4374 <_fflush_r>
    8210:	103fef26 	beq	r2,zero,81d0 <__sbprintf+0x74>
    8214:	047fffc4 	movi	r17,-1
    8218:	003fed06 	br	81d0 <__sbprintf+0x74>

0000821c <_write_r>:
    821c:	2807883a 	mov	r3,r5
    8220:	defffe04 	addi	sp,sp,-8
    8224:	dc000015 	stw	r16,0(sp)
    8228:	300b883a 	mov	r5,r6
    822c:	00800074 	movhi	r2,1
    8230:	380d883a 	mov	r6,r7
    8234:	2021883a 	mov	r16,r4
    8238:	1809883a 	mov	r4,r3
    823c:	dfc00115 	stw	ra,4(sp)
    8240:	10102115 	stw	zero,16516(r2)
    8244:	000da940 	call	da94 <write>
    8248:	10ffffd8 	cmpnei	r3,r2,-1
    824c:	18000426 	beq	r3,zero,8260 <_write_r+0x44>
    8250:	dfc00117 	ldw	ra,4(sp)
    8254:	dc000017 	ldw	r16,0(sp)
    8258:	dec00204 	addi	sp,sp,8
    825c:	f800283a 	ret
    8260:	00c00074 	movhi	r3,1
    8264:	18d02117 	ldw	r3,16516(r3)
    8268:	183ff926 	beq	r3,zero,8250 <_write_r+0x34>
    826c:	80c00015 	stw	r3,0(r16)
    8270:	dfc00117 	ldw	ra,4(sp)
    8274:	dc000017 	ldw	r16,0(sp)
    8278:	dec00204 	addi	sp,sp,8
    827c:	f800283a 	ret

00008280 <_close_r>:
    8280:	defffe04 	addi	sp,sp,-8
    8284:	dc000015 	stw	r16,0(sp)
    8288:	00800074 	movhi	r2,1
    828c:	2021883a 	mov	r16,r4
    8290:	2809883a 	mov	r4,r5
    8294:	dfc00115 	stw	ra,4(sp)
    8298:	10102115 	stw	zero,16516(r2)
    829c:	000d0c80 	call	d0c8 <close>
    82a0:	10ffffd8 	cmpnei	r3,r2,-1
    82a4:	18000426 	beq	r3,zero,82b8 <_close_r+0x38>
    82a8:	dfc00117 	ldw	ra,4(sp)
    82ac:	dc000017 	ldw	r16,0(sp)
    82b0:	dec00204 	addi	sp,sp,8
    82b4:	f800283a 	ret
    82b8:	00c00074 	movhi	r3,1
    82bc:	18d02117 	ldw	r3,16516(r3)
    82c0:	183ff926 	beq	r3,zero,82a8 <_close_r+0x28>
    82c4:	80c00015 	stw	r3,0(r16)
    82c8:	dfc00117 	ldw	ra,4(sp)
    82cc:	dc000017 	ldw	r16,0(sp)
    82d0:	dec00204 	addi	sp,sp,8
    82d4:	f800283a 	ret

000082d8 <__assert_func>:
    82d8:	00800074 	movhi	r2,1
    82dc:	1208ed17 	ldw	r8,9140(r2)
    82e0:	defffc04 	addi	sp,sp,-16
    82e4:	3807883a 	mov	r3,r7
    82e8:	3005883a 	mov	r2,r6
    82ec:	dfc00315 	stw	ra,12(sp)
    82f0:	42400317 	ldw	r9,12(r8)
    82f4:	200f883a 	mov	r7,r4
    82f8:	2811883a 	mov	r8,r5
    82fc:	180d883a 	mov	r6,r3
    8300:	10000a26 	beq	r2,zero,832c <__assert_func+0x54>
    8304:	00c00074 	movhi	r3,1
    8308:	18c0c104 	addi	r3,r3,772
    830c:	01400074 	movhi	r5,1
    8310:	2940c504 	addi	r5,r5,788
    8314:	4809883a 	mov	r4,r9
    8318:	d8c00115 	stw	r3,4(sp)
    831c:	da000015 	stw	r8,0(sp)
    8320:	d8800215 	stw	r2,8(sp)
    8324:	00085f80 	call	85f8 <fiprintf>
    8328:	000992c0 	call	992c <abort>
    832c:	00c00074 	movhi	r3,1
    8330:	18c0c404 	addi	r3,r3,784
    8334:	1805883a 	mov	r2,r3
    8338:	003ff406 	br	830c <__assert_func+0x34>

0000833c <__assert>:
    833c:	deffff04 	addi	sp,sp,-4
    8340:	300f883a 	mov	r7,r6
    8344:	000d883a 	mov	r6,zero
    8348:	dfc00015 	stw	ra,0(sp)
    834c:	00082d80 	call	82d8 <__assert_func>

00008350 <_calloc_r>:
    8350:	2984383a 	mulxuu	r2,r5,r6
    8354:	deffff04 	addi	sp,sp,-4
    8358:	dfc00015 	stw	ra,0(sp)
    835c:	298b383a 	mul	r5,r5,r6
    8360:	1000261e 	bne	r2,zero,83fc <_calloc_r+0xac>
    8364:	0004fb40 	call	4fb4 <_malloc_r>
    8368:	1009883a 	mov	r4,r2
    836c:	10001626 	beq	r2,zero,83c8 <_calloc_r+0x78>
    8370:	11bfff17 	ldw	r6,-4(r2)
    8374:	00bfff04 	movi	r2,-4
    8378:	308c703a 	and	r6,r6,r2
    837c:	31bfff04 	addi	r6,r6,-4
    8380:	30800968 	cmpgeui	r2,r6,37
    8384:	1000141e 	bne	r2,zero,83d8 <_calloc_r+0x88>
    8388:	30800530 	cmpltui	r2,r6,20
    838c:	10000a1e 	bne	r2,zero,83b8 <_calloc_r+0x68>
    8390:	20000015 	stw	zero,0(r4)
    8394:	20000115 	stw	zero,4(r4)
    8398:	30800728 	cmpgeui	r2,r6,28
    839c:	10001526 	beq	r2,zero,83f4 <_calloc_r+0xa4>
    83a0:	20000215 	stw	zero,8(r4)
    83a4:	20000315 	stw	zero,12(r4)
    83a8:	31800920 	cmpeqi	r6,r6,36
    83ac:	30001b1e 	bne	r6,zero,841c <_calloc_r+0xcc>
    83b0:	20800404 	addi	r2,r4,16
    83b4:	00000106 	br	83bc <_calloc_r+0x6c>
    83b8:	2005883a 	mov	r2,r4
    83bc:	10000015 	stw	zero,0(r2)
    83c0:	10000115 	stw	zero,4(r2)
    83c4:	10000215 	stw	zero,8(r2)
    83c8:	2005883a 	mov	r2,r4
    83cc:	dfc00017 	ldw	ra,0(sp)
    83d0:	dec00104 	addi	sp,sp,4
    83d4:	f800283a 	ret
    83d8:	000b883a 	mov	r5,zero
    83dc:	00059640 	call	5964 <memset>
    83e0:	1009883a 	mov	r4,r2
    83e4:	2005883a 	mov	r2,r4
    83e8:	dfc00017 	ldw	ra,0(sp)
    83ec:	dec00104 	addi	sp,sp,4
    83f0:	f800283a 	ret
    83f4:	20800204 	addi	r2,r4,8
    83f8:	003ff006 	br	83bc <_calloc_r+0x6c>
    83fc:	000842c0 	call	842c <__errno>
    8400:	00c00304 	movi	r3,12
    8404:	0009883a 	mov	r4,zero
    8408:	10c00015 	stw	r3,0(r2)
    840c:	2005883a 	mov	r2,r4
    8410:	dfc00017 	ldw	ra,0(sp)
    8414:	dec00104 	addi	sp,sp,4
    8418:	f800283a 	ret
    841c:	20000415 	stw	zero,16(r4)
    8420:	20800604 	addi	r2,r4,24
    8424:	20000515 	stw	zero,20(r4)
    8428:	003fe406 	br	83bc <_calloc_r+0x6c>

0000842c <__errno>:
    842c:	00800074 	movhi	r2,1
    8430:	1088ed17 	ldw	r2,9140(r2)
    8434:	f800283a 	ret

00008438 <_fclose_r.part.0>:
    8438:	defffc04 	addi	sp,sp,-16
    843c:	dc800215 	stw	r18,8(sp)
    8440:	dc400115 	stw	r17,4(sp)
    8444:	dc000015 	stw	r16,0(sp)
    8448:	dfc00315 	stw	ra,12(sp)
    844c:	2821883a 	mov	r16,r5
    8450:	2023883a 	mov	r17,r4
    8454:	000414c0 	call	414c <__sflush_r>
    8458:	80c00b17 	ldw	r3,44(r16)
    845c:	1025883a 	mov	r18,r2
    8460:	18000426 	beq	r3,zero,8474 <_fclose_r.part.0+0x3c>
    8464:	81400717 	ldw	r5,28(r16)
    8468:	8809883a 	mov	r4,r17
    846c:	183ee83a 	callr	r3
    8470:	10001916 	blt	r2,zero,84d8 <_fclose_r.part.0+0xa0>
    8474:	8080030b 	ldhu	r2,12(r16)
    8478:	1080200c 	andi	r2,r2,128
    847c:	10001a1e 	bne	r2,zero,84e8 <_fclose_r.part.0+0xb0>
    8480:	81400c17 	ldw	r5,48(r16)
    8484:	28000526 	beq	r5,zero,849c <_fclose_r.part.0+0x64>
    8488:	80801004 	addi	r2,r16,64
    848c:	28800226 	beq	r5,r2,8498 <_fclose_r.part.0+0x60>
    8490:	8809883a 	mov	r4,r17
    8494:	00049100 	call	4910 <_free_r>
    8498:	80000c15 	stw	zero,48(r16)
    849c:	81401117 	ldw	r5,68(r16)
    84a0:	28000326 	beq	r5,zero,84b0 <_fclose_r.part.0+0x78>
    84a4:	8809883a 	mov	r4,r17
    84a8:	00049100 	call	4910 <_free_r>
    84ac:	80001115 	stw	zero,68(r16)
    84b0:	00047bc0 	call	47bc <__sfp_lock_acquire>
    84b4:	8000030d 	sth	zero,12(r16)
    84b8:	00047c00 	call	47c0 <__sfp_lock_release>
    84bc:	9005883a 	mov	r2,r18
    84c0:	dfc00317 	ldw	ra,12(sp)
    84c4:	dc800217 	ldw	r18,8(sp)
    84c8:	dc400117 	ldw	r17,4(sp)
    84cc:	dc000017 	ldw	r16,0(sp)
    84d0:	dec00404 	addi	sp,sp,16
    84d4:	f800283a 	ret
    84d8:	8080030b 	ldhu	r2,12(r16)
    84dc:	04bfffc4 	movi	r18,-1
    84e0:	1080200c 	andi	r2,r2,128
    84e4:	103fe626 	beq	r2,zero,8480 <_fclose_r.part.0+0x48>
    84e8:	81400417 	ldw	r5,16(r16)
    84ec:	8809883a 	mov	r4,r17
    84f0:	00049100 	call	4910 <_free_r>
    84f4:	003fe206 	br	8480 <_fclose_r.part.0+0x48>

000084f8 <_fclose_r>:
    84f8:	28001926 	beq	r5,zero,8560 <_fclose_r+0x68>
    84fc:	defffd04 	addi	sp,sp,-12
    8500:	dc000115 	stw	r16,4(sp)
    8504:	dfc00215 	stw	ra,8(sp)
    8508:	2021883a 	mov	r16,r4
    850c:	20000226 	beq	r4,zero,8518 <_fclose_r+0x20>
    8510:	20800e17 	ldw	r2,56(r4)
    8514:	10000c26 	beq	r2,zero,8548 <_fclose_r+0x50>
    8518:	2880030f 	ldh	r2,12(r5)
    851c:	1000051e 	bne	r2,zero,8534 <_fclose_r+0x3c>
    8520:	0005883a 	mov	r2,zero
    8524:	dfc00217 	ldw	ra,8(sp)
    8528:	dc000117 	ldw	r16,4(sp)
    852c:	dec00304 	addi	sp,sp,12
    8530:	f800283a 	ret
    8534:	8009883a 	mov	r4,r16
    8538:	dfc00217 	ldw	ra,8(sp)
    853c:	dc000117 	ldw	r16,4(sp)
    8540:	dec00304 	addi	sp,sp,12
    8544:	00084381 	jmpi	8438 <_fclose_r.part.0>
    8548:	d9400015 	stw	r5,0(sp)
    854c:	00047ac0 	call	47ac <__sinit>
    8550:	d9400017 	ldw	r5,0(sp)
    8554:	2880030f 	ldh	r2,12(r5)
    8558:	103ff126 	beq	r2,zero,8520 <_fclose_r+0x28>
    855c:	003ff506 	br	8534 <_fclose_r+0x3c>
    8560:	0005883a 	mov	r2,zero
    8564:	f800283a 	ret

00008568 <fclose>:
    8568:	20000826 	beq	r4,zero,858c <fclose+0x24>
    856c:	00800074 	movhi	r2,1
    8570:	200b883a 	mov	r5,r4
    8574:	1108ed17 	ldw	r4,9140(r2)
    8578:	20000226 	beq	r4,zero,8584 <fclose+0x1c>
    857c:	20800e17 	ldw	r2,56(r4)
    8580:	10000526 	beq	r2,zero,8598 <fclose+0x30>
    8584:	2880030f 	ldh	r2,12(r5)
    8588:	1000021e 	bne	r2,zero,8594 <fclose+0x2c>
    858c:	0005883a 	mov	r2,zero
    8590:	f800283a 	ret
    8594:	00084381 	jmpi	8438 <_fclose_r.part.0>
    8598:	defffd04 	addi	sp,sp,-12
    859c:	d9400115 	stw	r5,4(sp)
    85a0:	d9000015 	stw	r4,0(sp)
    85a4:	dfc00215 	stw	ra,8(sp)
    85a8:	00047ac0 	call	47ac <__sinit>
    85ac:	d9400117 	ldw	r5,4(sp)
    85b0:	d9000017 	ldw	r4,0(sp)
    85b4:	2880030f 	ldh	r2,12(r5)
    85b8:	10000326 	beq	r2,zero,85c8 <fclose+0x60>
    85bc:	dfc00217 	ldw	ra,8(sp)
    85c0:	dec00304 	addi	sp,sp,12
    85c4:	00084381 	jmpi	8438 <_fclose_r.part.0>
    85c8:	0005883a 	mov	r2,zero
    85cc:	dfc00217 	ldw	ra,8(sp)
    85d0:	dec00304 	addi	sp,sp,12
    85d4:	f800283a 	ret

000085d8 <_fiprintf_r>:
    85d8:	defffe04 	addi	sp,sp,-8
    85dc:	dfc00015 	stw	ra,0(sp)
    85e0:	d9c00115 	stw	r7,4(sp)
    85e4:	d9c00104 	addi	r7,sp,4
    85e8:	00096980 	call	9698 <_vfiprintf_r>
    85ec:	dfc00017 	ldw	ra,0(sp)
    85f0:	dec00204 	addi	sp,sp,8
    85f4:	f800283a 	ret

000085f8 <fiprintf>:
    85f8:	defffd04 	addi	sp,sp,-12
    85fc:	2005883a 	mov	r2,r4
    8600:	dfc00015 	stw	ra,0(sp)
    8604:	d9800115 	stw	r6,4(sp)
    8608:	d9c00215 	stw	r7,8(sp)
    860c:	00c00074 	movhi	r3,1
    8610:	1908ed17 	ldw	r4,9140(r3)
    8614:	280d883a 	mov	r6,r5
    8618:	d9c00104 	addi	r7,sp,4
    861c:	100b883a 	mov	r5,r2
    8620:	00096980 	call	9698 <_vfiprintf_r>
    8624:	dfc00017 	ldw	ra,0(sp)
    8628:	dec00304 	addi	sp,sp,12
    862c:	f800283a 	ret

00008630 <__fputwc>:
    8630:	defff904 	addi	sp,sp,-28
    8634:	dcc00415 	stw	r19,16(sp)
    8638:	dc800315 	stw	r18,12(sp)
    863c:	dc000115 	stw	r16,4(sp)
    8640:	dfc00615 	stw	ra,24(sp)
    8644:	dd000515 	stw	r20,20(sp)
    8648:	dc400215 	stw	r17,8(sp)
    864c:	2025883a 	mov	r18,r4
    8650:	2827883a 	mov	r19,r5
    8654:	3021883a 	mov	r16,r6
    8658:	0008de00 	call	8de0 <__locale_mb_cur_max>
    865c:	10800058 	cmpnei	r2,r2,1
    8660:	1000071e 	bne	r2,zero,8680 <__fputwc+0x50>
    8664:	98bfffc4 	addi	r2,r19,-1
    8668:	10803fe8 	cmpgeui	r2,r2,255
    866c:	1000041e 	bne	r2,zero,8680 <__fputwc+0x50>
    8670:	980b883a 	mov	r5,r19
    8674:	dcc000c5 	stb	r19,3(sp)
    8678:	05000044 	movi	r20,1
    867c:	00000a06 	br	86a8 <__fputwc+0x78>
    8680:	81c01704 	addi	r7,r16,92
    8684:	980d883a 	mov	r6,r19
    8688:	d94000c4 	addi	r5,sp,3
    868c:	9009883a 	mov	r4,r18
    8690:	00097fc0 	call	97fc <_wcrtomb_r>
    8694:	1029883a 	mov	r20,r2
    8698:	10bfffd8 	cmpnei	r2,r2,-1
    869c:	10003926 	beq	r2,zero,8784 <__fputwc+0x154>
    86a0:	a0001f26 	beq	r20,zero,8720 <__fputwc+0xf0>
    86a4:	d94000c3 	ldbu	r5,3(sp)
    86a8:	0023883a 	mov	r17,zero
    86ac:	00000a06 	br	86d8 <__fputwc+0xa8>
    86b0:	80800017 	ldw	r2,0(r16)
    86b4:	11400005 	stb	r5,0(r2)
    86b8:	80c00017 	ldw	r3,0(r16)
    86bc:	18c00044 	addi	r3,r3,1
    86c0:	80c00015 	stw	r3,0(r16)
    86c4:	8c400044 	addi	r17,r17,1
    86c8:	d88000c4 	addi	r2,sp,3
    86cc:	1447883a 	add	r3,r2,r17
    86d0:	8d00132e 	bgeu	r17,r20,8720 <__fputwc+0xf0>
    86d4:	19400003 	ldbu	r5,0(r3)
    86d8:	80c00217 	ldw	r3,8(r16)
    86dc:	18ffffc4 	addi	r3,r3,-1
    86e0:	80c00215 	stw	r3,8(r16)
    86e4:	183ff20e 	bge	r3,zero,86b0 <__fputwc+0x80>
    86e8:	80800617 	ldw	r2,24(r16)
    86ec:	18801616 	blt	r3,r2,8748 <__fputwc+0x118>
    86f0:	80800017 	ldw	r2,0(r16)
    86f4:	11400005 	stb	r5,0(r2)
    86f8:	80800017 	ldw	r2,0(r16)
    86fc:	10c00003 	ldbu	r3,0(r2)
    8700:	10800044 	addi	r2,r2,1
    8704:	18c002a0 	cmpeqi	r3,r3,10
    8708:	1800171e 	bne	r3,zero,8768 <__fputwc+0x138>
    870c:	80800015 	stw	r2,0(r16)
    8710:	8c400044 	addi	r17,r17,1
    8714:	d88000c4 	addi	r2,sp,3
    8718:	1447883a 	add	r3,r2,r17
    871c:	8d3fed36 	bltu	r17,r20,86d4 <__fputwc+0xa4>
    8720:	9829883a 	mov	r20,r19
    8724:	a005883a 	mov	r2,r20
    8728:	dfc00617 	ldw	ra,24(sp)
    872c:	dd000517 	ldw	r20,20(sp)
    8730:	dcc00417 	ldw	r19,16(sp)
    8734:	dc800317 	ldw	r18,12(sp)
    8738:	dc400217 	ldw	r17,8(sp)
    873c:	dc000117 	ldw	r16,4(sp)
    8740:	dec00704 	addi	sp,sp,28
    8744:	f800283a 	ret
    8748:	29403fcc 	andi	r5,r5,255
    874c:	800d883a 	mov	r6,r16
    8750:	9009883a 	mov	r4,r18
    8754:	000969c0 	call	969c <__swbuf_r>
    8758:	10bfffe0 	cmpeqi	r2,r2,-1
    875c:	103fd926 	beq	r2,zero,86c4 <__fputwc+0x94>
    8760:	053fffc4 	movi	r20,-1
    8764:	003fef06 	br	8724 <__fputwc+0xf4>
    8768:	800d883a 	mov	r6,r16
    876c:	01400284 	movi	r5,10
    8770:	9009883a 	mov	r4,r18
    8774:	000969c0 	call	969c <__swbuf_r>
    8778:	10bfffe0 	cmpeqi	r2,r2,-1
    877c:	103fd126 	beq	r2,zero,86c4 <__fputwc+0x94>
    8780:	003ff706 	br	8760 <__fputwc+0x130>
    8784:	8080030b 	ldhu	r2,12(r16)
    8788:	10801014 	ori	r2,r2,64
    878c:	8080030d 	sth	r2,12(r16)
    8790:	003fe406 	br	8724 <__fputwc+0xf4>

00008794 <_fputwc_r>:
    8794:	3080030b 	ldhu	r2,12(r6)
    8798:	10c8000c 	andi	r3,r2,8192
    879c:	1800051e 	bne	r3,zero,87b4 <_fputwc_r+0x20>
    87a0:	30c01917 	ldw	r3,100(r6)
    87a4:	10880014 	ori	r2,r2,8192
    87a8:	3080030d 	sth	r2,12(r6)
    87ac:	18880014 	ori	r2,r3,8192
    87b0:	30801915 	stw	r2,100(r6)
    87b4:	00086301 	jmpi	8630 <__fputwc>

000087b8 <fputwc>:
    87b8:	defffc04 	addi	sp,sp,-16
    87bc:	00800074 	movhi	r2,1
    87c0:	dc000215 	stw	r16,8(sp)
    87c4:	1408ed17 	ldw	r16,9140(r2)
    87c8:	dfc00315 	stw	ra,12(sp)
    87cc:	280d883a 	mov	r6,r5
    87d0:	200b883a 	mov	r5,r4
    87d4:	80000226 	beq	r16,zero,87e0 <fputwc+0x28>
    87d8:	80800e17 	ldw	r2,56(r16)
    87dc:	10000d26 	beq	r2,zero,8814 <fputwc+0x5c>
    87e0:	3080030b 	ldhu	r2,12(r6)
    87e4:	10c8000c 	andi	r3,r2,8192
    87e8:	1800051e 	bne	r3,zero,8800 <fputwc+0x48>
    87ec:	30c01917 	ldw	r3,100(r6)
    87f0:	10880014 	ori	r2,r2,8192
    87f4:	3080030d 	sth	r2,12(r6)
    87f8:	18880014 	ori	r2,r3,8192
    87fc:	30801915 	stw	r2,100(r6)
    8800:	8009883a 	mov	r4,r16
    8804:	dfc00317 	ldw	ra,12(sp)
    8808:	dc000217 	ldw	r16,8(sp)
    880c:	dec00404 	addi	sp,sp,16
    8810:	00086301 	jmpi	8630 <__fputwc>
    8814:	d9000015 	stw	r4,0(sp)
    8818:	8009883a 	mov	r4,r16
    881c:	d9800115 	stw	r6,4(sp)
    8820:	00047ac0 	call	47ac <__sinit>
    8824:	d9800117 	ldw	r6,4(sp)
    8828:	d9400017 	ldw	r5,0(sp)
    882c:	003fec06 	br	87e0 <fputwc+0x28>

00008830 <_fstat_r>:
    8830:	2807883a 	mov	r3,r5
    8834:	defffe04 	addi	sp,sp,-8
    8838:	dc000015 	stw	r16,0(sp)
    883c:	00800074 	movhi	r2,1
    8840:	300b883a 	mov	r5,r6
    8844:	2021883a 	mov	r16,r4
    8848:	1809883a 	mov	r4,r3
    884c:	dfc00115 	stw	ra,4(sp)
    8850:	10102115 	stw	zero,16516(r2)
    8854:	000d2380 	call	d238 <fstat>
    8858:	10ffffd8 	cmpnei	r3,r2,-1
    885c:	18000426 	beq	r3,zero,8870 <_fstat_r+0x40>
    8860:	dfc00117 	ldw	ra,4(sp)
    8864:	dc000017 	ldw	r16,0(sp)
    8868:	dec00204 	addi	sp,sp,8
    886c:	f800283a 	ret
    8870:	00c00074 	movhi	r3,1
    8874:	18d02117 	ldw	r3,16516(r3)
    8878:	183ff926 	beq	r3,zero,8860 <_fstat_r+0x30>
    887c:	80c00015 	stw	r3,0(r16)
    8880:	dfc00117 	ldw	ra,4(sp)
    8884:	dc000017 	ldw	r16,0(sp)
    8888:	dec00204 	addi	sp,sp,8
    888c:	f800283a 	ret

00008890 <__sfvwrite_r>:
    8890:	30800217 	ldw	r2,8(r6)
    8894:	10009a26 	beq	r2,zero,8b00 <__sfvwrite_r+0x270>
    8898:	2a00030b 	ldhu	r8,12(r5)
    889c:	defff404 	addi	sp,sp,-48
    88a0:	dd400715 	stw	r21,28(sp)
    88a4:	dd000615 	stw	r20,24(sp)
    88a8:	dc000215 	stw	r16,8(sp)
    88ac:	dfc00b15 	stw	ra,44(sp)
    88b0:	df000a15 	stw	fp,40(sp)
    88b4:	ddc00915 	stw	r23,36(sp)
    88b8:	dd800815 	stw	r22,32(sp)
    88bc:	dcc00515 	stw	r19,20(sp)
    88c0:	dc800415 	stw	r18,16(sp)
    88c4:	dc400315 	stw	r17,12(sp)
    88c8:	4080020c 	andi	r2,r8,8
    88cc:	3029883a 	mov	r20,r6
    88d0:	202b883a 	mov	r21,r4
    88d4:	2821883a 	mov	r16,r5
    88d8:	10002626 	beq	r2,zero,8974 <__sfvwrite_r+0xe4>
    88dc:	28800417 	ldw	r2,16(r5)
    88e0:	10002426 	beq	r2,zero,8974 <__sfvwrite_r+0xe4>
    88e4:	4080008c 	andi	r2,r8,2
    88e8:	a4400017 	ldw	r17,0(r20)
    88ec:	10002926 	beq	r2,zero,8994 <__sfvwrite_r+0x104>
    88f0:	05a00034 	movhi	r22,32768
    88f4:	0027883a 	mov	r19,zero
    88f8:	0025883a 	mov	r18,zero
    88fc:	b5bf0004 	addi	r22,r22,-1024
    8900:	980d883a 	mov	r6,r19
    8904:	a809883a 	mov	r4,r21
    8908:	90007026 	beq	r18,zero,8acc <__sfvwrite_r+0x23c>
    890c:	900f883a 	mov	r7,r18
    8910:	b480012e 	bgeu	r22,r18,8918 <__sfvwrite_r+0x88>
    8914:	b00f883a 	mov	r7,r22
    8918:	80800917 	ldw	r2,36(r16)
    891c:	81400717 	ldw	r5,28(r16)
    8920:	103ee83a 	callr	r2
    8924:	0080710e 	bge	zero,r2,8aec <__sfvwrite_r+0x25c>
    8928:	a0c00217 	ldw	r3,8(r20)
    892c:	98a7883a 	add	r19,r19,r2
    8930:	90a5c83a 	sub	r18,r18,r2
    8934:	1885c83a 	sub	r2,r3,r2
    8938:	a0800215 	stw	r2,8(r20)
    893c:	103ff01e 	bne	r2,zero,8900 <__sfvwrite_r+0x70>
    8940:	0005883a 	mov	r2,zero
    8944:	dfc00b17 	ldw	ra,44(sp)
    8948:	df000a17 	ldw	fp,40(sp)
    894c:	ddc00917 	ldw	r23,36(sp)
    8950:	dd800817 	ldw	r22,32(sp)
    8954:	dd400717 	ldw	r21,28(sp)
    8958:	dd000617 	ldw	r20,24(sp)
    895c:	dcc00517 	ldw	r19,20(sp)
    8960:	dc800417 	ldw	r18,16(sp)
    8964:	dc400317 	ldw	r17,12(sp)
    8968:	dc000217 	ldw	r16,8(sp)
    896c:	dec00c04 	addi	sp,sp,48
    8970:	f800283a 	ret
    8974:	800b883a 	mov	r5,r16
    8978:	a809883a 	mov	r4,r21
    897c:	00026a40 	call	26a4 <__swsetup_r>
    8980:	1000e21e 	bne	r2,zero,8d0c <__sfvwrite_r+0x47c>
    8984:	8200030b 	ldhu	r8,12(r16)
    8988:	a4400017 	ldw	r17,0(r20)
    898c:	4080008c 	andi	r2,r8,2
    8990:	103fd71e 	bne	r2,zero,88f0 <__sfvwrite_r+0x60>
    8994:	4080004c 	andi	r2,r8,1
    8998:	10005b1e 	bne	r2,zero,8b08 <__sfvwrite_r+0x278>
    899c:	00a00034 	movhi	r2,32768
    89a0:	10bfff84 	addi	r2,r2,-2
    89a4:	00e00034 	movhi	r3,32768
    89a8:	d8800015 	stw	r2,0(sp)
    89ac:	18bfffc4 	addi	r2,r3,-1
    89b0:	0039883a 	mov	fp,zero
    89b4:	0025883a 	mov	r18,zero
    89b8:	d8800115 	stw	r2,4(sp)
    89bc:	90003f26 	beq	r18,zero,8abc <__sfvwrite_r+0x22c>
    89c0:	4080800c 	andi	r2,r8,512
    89c4:	81000017 	ldw	r4,0(r16)
    89c8:	85c00217 	ldw	r23,8(r16)
    89cc:	10008726 	beq	r2,zero,8bec <__sfvwrite_r+0x35c>
    89d0:	b82d883a 	mov	r22,r23
    89d4:	95c0aa36 	bltu	r18,r23,8c80 <__sfvwrite_r+0x3f0>
    89d8:	4081200c 	andi	r2,r8,1152
    89dc:	10002526 	beq	r2,zero,8a74 <__sfvwrite_r+0x1e4>
    89e0:	80800517 	ldw	r2,20(r16)
    89e4:	81400417 	ldw	r5,16(r16)
    89e8:	108000e4 	muli	r2,r2,3
    89ec:	216dc83a 	sub	r22,r4,r5
    89f0:	b1000044 	addi	r4,r22,1
    89f4:	1026d7fa 	srli	r19,r2,31
    89f8:	2489883a 	add	r4,r4,r18
    89fc:	9885883a 	add	r2,r19,r2
    8a00:	1027d07a 	srai	r19,r2,1
    8a04:	980d883a 	mov	r6,r19
    8a08:	9900022e 	bgeu	r19,r4,8a14 <__sfvwrite_r+0x184>
    8a0c:	2027883a 	mov	r19,r4
    8a10:	200d883a 	mov	r6,r4
    8a14:	4201000c 	andi	r8,r8,1024
    8a18:	4000ac26 	beq	r8,zero,8ccc <__sfvwrite_r+0x43c>
    8a1c:	300b883a 	mov	r5,r6
    8a20:	a809883a 	mov	r4,r21
    8a24:	0004fb40 	call	4fb4 <_malloc_r>
    8a28:	1000b426 	beq	r2,zero,8cfc <__sfvwrite_r+0x46c>
    8a2c:	81400417 	ldw	r5,16(r16)
    8a30:	b00d883a 	mov	r6,r22
    8a34:	1009883a 	mov	r4,r2
    8a38:	00058640 	call	5864 <memcpy>
    8a3c:	100f883a 	mov	r7,r2
    8a40:	8080030b 	ldhu	r2,12(r16)
    8a44:	00fedfc4 	movi	r3,-1153
    8a48:	10c4703a 	and	r2,r2,r3
    8a4c:	10802014 	ori	r2,r2,128
    8a50:	8080030d 	sth	r2,12(r16)
    8a54:	3d89883a 	add	r4,r7,r22
    8a58:	9d85c83a 	sub	r2,r19,r22
    8a5c:	81c00415 	stw	r7,16(r16)
    8a60:	81000015 	stw	r4,0(r16)
    8a64:	84c00515 	stw	r19,20(r16)
    8a68:	902f883a 	mov	r23,r18
    8a6c:	80800215 	stw	r2,8(r16)
    8a70:	902d883a 	mov	r22,r18
    8a74:	b00d883a 	mov	r6,r22
    8a78:	e00b883a 	mov	r5,fp
    8a7c:	0008f140 	call	8f14 <memmove>
    8a80:	81000217 	ldw	r4,8(r16)
    8a84:	80800017 	ldw	r2,0(r16)
    8a88:	9027883a 	mov	r19,r18
    8a8c:	25c9c83a 	sub	r4,r4,r23
    8a90:	1585883a 	add	r2,r2,r22
    8a94:	81000215 	stw	r4,8(r16)
    8a98:	80800015 	stw	r2,0(r16)
    8a9c:	0025883a 	mov	r18,zero
    8aa0:	a1800217 	ldw	r6,8(r20)
    8aa4:	e4f9883a 	add	fp,fp,r19
    8aa8:	34e7c83a 	sub	r19,r6,r19
    8aac:	a4c00215 	stw	r19,8(r20)
    8ab0:	983fa326 	beq	r19,zero,8940 <__sfvwrite_r+0xb0>
    8ab4:	8200030b 	ldhu	r8,12(r16)
    8ab8:	903fc11e 	bne	r18,zero,89c0 <__sfvwrite_r+0x130>
    8abc:	8f000017 	ldw	fp,0(r17)
    8ac0:	8c800117 	ldw	r18,4(r17)
    8ac4:	8c400204 	addi	r17,r17,8
    8ac8:	003fbc06 	br	89bc <__sfvwrite_r+0x12c>
    8acc:	8cc00017 	ldw	r19,0(r17)
    8ad0:	8c800117 	ldw	r18,4(r17)
    8ad4:	8c400204 	addi	r17,r17,8
    8ad8:	003f8906 	br	8900 <__sfvwrite_r+0x70>
    8adc:	800b883a 	mov	r5,r16
    8ae0:	a809883a 	mov	r4,r21
    8ae4:	00043740 	call	4374 <_fflush_r>
    8ae8:	10002226 	beq	r2,zero,8b74 <__sfvwrite_r+0x2e4>
    8aec:	8080030b 	ldhu	r2,12(r16)
    8af0:	10801014 	ori	r2,r2,64
    8af4:	8080030d 	sth	r2,12(r16)
    8af8:	00bfffc4 	movi	r2,-1
    8afc:	003f9106 	br	8944 <__sfvwrite_r+0xb4>
    8b00:	0005883a 	mov	r2,zero
    8b04:	f800283a 	ret
    8b08:	002d883a 	mov	r22,zero
    8b0c:	0039883a 	mov	fp,zero
    8b10:	0005883a 	mov	r2,zero
    8b14:	002f883a 	mov	r23,zero
    8b18:	b0001d26 	beq	r22,zero,8b90 <__sfvwrite_r+0x300>
    8b1c:	10002026 	beq	r2,zero,8ba0 <__sfvwrite_r+0x310>
    8b20:	e027883a 	mov	r19,fp
    8b24:	b4c0012e 	bgeu	r22,r19,8b2c <__sfvwrite_r+0x29c>
    8b28:	b027883a 	mov	r19,r22
    8b2c:	81000017 	ldw	r4,0(r16)
    8b30:	80800417 	ldw	r2,16(r16)
    8b34:	81c00517 	ldw	r7,20(r16)
    8b38:	1100032e 	bgeu	r2,r4,8b48 <__sfvwrite_r+0x2b8>
    8b3c:	84800217 	ldw	r18,8(r16)
    8b40:	3ca5883a 	add	r18,r7,r18
    8b44:	94c01e16 	blt	r18,r19,8bc0 <__sfvwrite_r+0x330>
    8b48:	99c05016 	blt	r19,r7,8c8c <__sfvwrite_r+0x3fc>
    8b4c:	80800917 	ldw	r2,36(r16)
    8b50:	81400717 	ldw	r5,28(r16)
    8b54:	b80d883a 	mov	r6,r23
    8b58:	a809883a 	mov	r4,r21
    8b5c:	103ee83a 	callr	r2
    8b60:	1025883a 	mov	r18,r2
    8b64:	00bfe10e 	bge	zero,r2,8aec <__sfvwrite_r+0x25c>
    8b68:	e4b9c83a 	sub	fp,fp,r18
    8b6c:	e03fdb26 	beq	fp,zero,8adc <__sfvwrite_r+0x24c>
    8b70:	00800044 	movi	r2,1
    8b74:	a1800217 	ldw	r6,8(r20)
    8b78:	bcaf883a 	add	r23,r23,r18
    8b7c:	b4adc83a 	sub	r22,r22,r18
    8b80:	34a5c83a 	sub	r18,r6,r18
    8b84:	a4800215 	stw	r18,8(r20)
    8b88:	903f6d26 	beq	r18,zero,8940 <__sfvwrite_r+0xb0>
    8b8c:	b03fe31e 	bne	r22,zero,8b1c <__sfvwrite_r+0x28c>
    8b90:	8d800117 	ldw	r22,4(r17)
    8b94:	8dc00017 	ldw	r23,0(r17)
    8b98:	8c400204 	addi	r17,r17,8
    8b9c:	b03ffc26 	beq	r22,zero,8b90 <__sfvwrite_r+0x300>
    8ba0:	b00d883a 	mov	r6,r22
    8ba4:	01400284 	movi	r5,10
    8ba8:	b809883a 	mov	r4,r23
    8bac:	00057940 	call	5794 <memchr>
    8bb0:	10004326 	beq	r2,zero,8cc0 <__sfvwrite_r+0x430>
    8bb4:	10800044 	addi	r2,r2,1
    8bb8:	15f9c83a 	sub	fp,r2,r23
    8bbc:	003fd806 	br	8b20 <__sfvwrite_r+0x290>
    8bc0:	b80b883a 	mov	r5,r23
    8bc4:	900d883a 	mov	r6,r18
    8bc8:	0008f140 	call	8f14 <memmove>
    8bcc:	80800017 	ldw	r2,0(r16)
    8bd0:	800b883a 	mov	r5,r16
    8bd4:	a809883a 	mov	r4,r21
    8bd8:	1485883a 	add	r2,r2,r18
    8bdc:	80800015 	stw	r2,0(r16)
    8be0:	00043740 	call	4374 <_fflush_r>
    8be4:	103fe026 	beq	r2,zero,8b68 <__sfvwrite_r+0x2d8>
    8be8:	003fc006 	br	8aec <__sfvwrite_r+0x25c>
    8bec:	80800417 	ldw	r2,16(r16)
    8bf0:	11001136 	bltu	r2,r4,8c38 <__sfvwrite_r+0x3a8>
    8bf4:	84c00517 	ldw	r19,20(r16)
    8bf8:	94c00f36 	bltu	r18,r19,8c38 <__sfvwrite_r+0x3a8>
    8bfc:	d8800017 	ldw	r2,0(sp)
    8c00:	14802d2e 	bgeu	r2,r18,8cb8 <__sfvwrite_r+0x428>
    8c04:	d9000117 	ldw	r4,4(sp)
    8c08:	980b883a 	mov	r5,r19
    8c0c:	000a9580 	call	a958 <__divsi3>
    8c10:	14cf383a 	mul	r7,r2,r19
    8c14:	82000917 	ldw	r8,36(r16)
    8c18:	81400717 	ldw	r5,28(r16)
    8c1c:	e00d883a 	mov	r6,fp
    8c20:	a809883a 	mov	r4,r21
    8c24:	403ee83a 	callr	r8
    8c28:	1027883a 	mov	r19,r2
    8c2c:	00bfaf0e 	bge	zero,r2,8aec <__sfvwrite_r+0x25c>
    8c30:	94e5c83a 	sub	r18,r18,r19
    8c34:	003f9a06 	br	8aa0 <__sfvwrite_r+0x210>
    8c38:	b827883a 	mov	r19,r23
    8c3c:	95c0012e 	bgeu	r18,r23,8c44 <__sfvwrite_r+0x3b4>
    8c40:	9027883a 	mov	r19,r18
    8c44:	980d883a 	mov	r6,r19
    8c48:	e00b883a 	mov	r5,fp
    8c4c:	0008f140 	call	8f14 <memmove>
    8c50:	80800217 	ldw	r2,8(r16)
    8c54:	81000017 	ldw	r4,0(r16)
    8c58:	14c5c83a 	sub	r2,r2,r19
    8c5c:	24c9883a 	add	r4,r4,r19
    8c60:	80800215 	stw	r2,8(r16)
    8c64:	81000015 	stw	r4,0(r16)
    8c68:	103ff11e 	bne	r2,zero,8c30 <__sfvwrite_r+0x3a0>
    8c6c:	800b883a 	mov	r5,r16
    8c70:	a809883a 	mov	r4,r21
    8c74:	00043740 	call	4374 <_fflush_r>
    8c78:	103fed26 	beq	r2,zero,8c30 <__sfvwrite_r+0x3a0>
    8c7c:	003f9b06 	br	8aec <__sfvwrite_r+0x25c>
    8c80:	902f883a 	mov	r23,r18
    8c84:	902d883a 	mov	r22,r18
    8c88:	003f7a06 	br	8a74 <__sfvwrite_r+0x1e4>
    8c8c:	980d883a 	mov	r6,r19
    8c90:	b80b883a 	mov	r5,r23
    8c94:	0008f140 	call	8f14 <memmove>
    8c98:	80c00217 	ldw	r3,8(r16)
    8c9c:	80800017 	ldw	r2,0(r16)
    8ca0:	9825883a 	mov	r18,r19
    8ca4:	1cc7c83a 	sub	r3,r3,r19
    8ca8:	14c5883a 	add	r2,r2,r19
    8cac:	80c00215 	stw	r3,8(r16)
    8cb0:	80800015 	stw	r2,0(r16)
    8cb4:	003fac06 	br	8b68 <__sfvwrite_r+0x2d8>
    8cb8:	9009883a 	mov	r4,r18
    8cbc:	003fd206 	br	8c08 <__sfvwrite_r+0x378>
    8cc0:	b4c00044 	addi	r19,r22,1
    8cc4:	9839883a 	mov	fp,r19
    8cc8:	003f9606 	br	8b24 <__sfvwrite_r+0x294>
    8ccc:	a809883a 	mov	r4,r21
    8cd0:	00090a40 	call	90a4 <_realloc_r>
    8cd4:	100f883a 	mov	r7,r2
    8cd8:	103f5e1e 	bne	r2,zero,8a54 <__sfvwrite_r+0x1c4>
    8cdc:	81400417 	ldw	r5,16(r16)
    8ce0:	a809883a 	mov	r4,r21
    8ce4:	00049100 	call	4910 <_free_r>
    8ce8:	8080030b 	ldhu	r2,12(r16)
    8cec:	00c00304 	movi	r3,12
    8cf0:	a8c00015 	stw	r3,0(r21)
    8cf4:	10bfdfcc 	andi	r2,r2,65407
    8cf8:	003f7d06 	br	8af0 <__sfvwrite_r+0x260>
    8cfc:	00c00304 	movi	r3,12
    8d00:	8080030b 	ldhu	r2,12(r16)
    8d04:	a8c00015 	stw	r3,0(r21)
    8d08:	003f7906 	br	8af0 <__sfvwrite_r+0x260>
    8d0c:	00bfffc4 	movi	r2,-1
    8d10:	003f0c06 	br	8944 <__sfvwrite_r+0xb4>

00008d14 <_isatty_r>:
    8d14:	defffe04 	addi	sp,sp,-8
    8d18:	dc000015 	stw	r16,0(sp)
    8d1c:	00800074 	movhi	r2,1
    8d20:	2021883a 	mov	r16,r4
    8d24:	2809883a 	mov	r4,r5
    8d28:	dfc00115 	stw	ra,4(sp)
    8d2c:	10102115 	stw	zero,16516(r2)
    8d30:	000d3440 	call	d344 <isatty>
    8d34:	10ffffd8 	cmpnei	r3,r2,-1
    8d38:	18000426 	beq	r3,zero,8d4c <_isatty_r+0x38>
    8d3c:	dfc00117 	ldw	ra,4(sp)
    8d40:	dc000017 	ldw	r16,0(sp)
    8d44:	dec00204 	addi	sp,sp,8
    8d48:	f800283a 	ret
    8d4c:	00c00074 	movhi	r3,1
    8d50:	18d02117 	ldw	r3,16516(r3)
    8d54:	183ff926 	beq	r3,zero,8d3c <_isatty_r+0x28>
    8d58:	80c00015 	stw	r3,0(r16)
    8d5c:	dfc00117 	ldw	ra,4(sp)
    8d60:	dc000017 	ldw	r16,0(sp)
    8d64:	dec00204 	addi	sp,sp,8
    8d68:	f800283a 	ret

00008d6c <_setlocale_r>:
    8d6c:	30001626 	beq	r6,zero,8dc8 <_setlocale_r+0x5c>
    8d70:	01400074 	movhi	r5,1
    8d74:	defffe04 	addi	sp,sp,-8
    8d78:	2940d204 	addi	r5,r5,840
    8d7c:	3009883a 	mov	r4,r6
    8d80:	dc000015 	stw	r16,0(sp)
    8d84:	dfc00115 	stw	ra,4(sp)
    8d88:	3021883a 	mov	r16,r6
    8d8c:	00095e00 	call	95e0 <strcmp>
    8d90:	1000061e 	bne	r2,zero,8dac <_setlocale_r+0x40>
    8d94:	00800074 	movhi	r2,1
    8d98:	1080d104 	addi	r2,r2,836
    8d9c:	dfc00117 	ldw	ra,4(sp)
    8da0:	dc000017 	ldw	r16,0(sp)
    8da4:	dec00204 	addi	sp,sp,8
    8da8:	f800283a 	ret
    8dac:	80800003 	ldbu	r2,0(r16)
    8db0:	10bfef44 	addi	r2,r2,-67
    8db4:	10000726 	beq	r2,zero,8dd4 <_setlocale_r+0x68>
    8db8:	80800003 	ldbu	r2,0(r16)
    8dbc:	103ff526 	beq	r2,zero,8d94 <_setlocale_r+0x28>
    8dc0:	0005883a 	mov	r2,zero
    8dc4:	003ff506 	br	8d9c <_setlocale_r+0x30>
    8dc8:	00800074 	movhi	r2,1
    8dcc:	1080d104 	addi	r2,r2,836
    8dd0:	f800283a 	ret
    8dd4:	80800043 	ldbu	r2,1(r16)
    8dd8:	103fee26 	beq	r2,zero,8d94 <_setlocale_r+0x28>
    8ddc:	003ff606 	br	8db8 <_setlocale_r+0x4c>

00008de0 <__locale_mb_cur_max>:
    8de0:	00800074 	movhi	r2,1
    8de4:	10842b07 	ldb	r2,4268(r2)
    8de8:	f800283a 	ret

00008dec <setlocale>:
    8dec:	28001626 	beq	r5,zero,8e48 <setlocale+0x5c>
    8df0:	defffe04 	addi	sp,sp,-8
    8df4:	dc000015 	stw	r16,0(sp)
    8df8:	2821883a 	mov	r16,r5
    8dfc:	01400074 	movhi	r5,1
    8e00:	2940d204 	addi	r5,r5,840
    8e04:	8009883a 	mov	r4,r16
    8e08:	dfc00115 	stw	ra,4(sp)
    8e0c:	00095e00 	call	95e0 <strcmp>
    8e10:	1000061e 	bne	r2,zero,8e2c <setlocale+0x40>
    8e14:	00800074 	movhi	r2,1
    8e18:	1080d104 	addi	r2,r2,836
    8e1c:	dfc00117 	ldw	ra,4(sp)
    8e20:	dc000017 	ldw	r16,0(sp)
    8e24:	dec00204 	addi	sp,sp,8
    8e28:	f800283a 	ret
    8e2c:	80800003 	ldbu	r2,0(r16)
    8e30:	10bfef44 	addi	r2,r2,-67
    8e34:	10000726 	beq	r2,zero,8e54 <setlocale+0x68>
    8e38:	80800003 	ldbu	r2,0(r16)
    8e3c:	103ff526 	beq	r2,zero,8e14 <setlocale+0x28>
    8e40:	0005883a 	mov	r2,zero
    8e44:	003ff506 	br	8e1c <setlocale+0x30>
    8e48:	00800074 	movhi	r2,1
    8e4c:	1080d104 	addi	r2,r2,836
    8e50:	f800283a 	ret
    8e54:	80800043 	ldbu	r2,1(r16)
    8e58:	103fee26 	beq	r2,zero,8e14 <setlocale+0x28>
    8e5c:	003ff606 	br	8e38 <setlocale+0x4c>

00008e60 <_lseek_r>:
    8e60:	2807883a 	mov	r3,r5
    8e64:	defffe04 	addi	sp,sp,-8
    8e68:	dc000015 	stw	r16,0(sp)
    8e6c:	300b883a 	mov	r5,r6
    8e70:	00800074 	movhi	r2,1
    8e74:	380d883a 	mov	r6,r7
    8e78:	2021883a 	mov	r16,r4
    8e7c:	1809883a 	mov	r4,r3
    8e80:	dfc00115 	stw	ra,4(sp)
    8e84:	10102115 	stw	zero,16516(r2)
    8e88:	000d6780 	call	d678 <lseek>
    8e8c:	10ffffd8 	cmpnei	r3,r2,-1
    8e90:	18000426 	beq	r3,zero,8ea4 <_lseek_r+0x44>
    8e94:	dfc00117 	ldw	ra,4(sp)
    8e98:	dc000017 	ldw	r16,0(sp)
    8e9c:	dec00204 	addi	sp,sp,8
    8ea0:	f800283a 	ret
    8ea4:	00c00074 	movhi	r3,1
    8ea8:	18d02117 	ldw	r3,16516(r3)
    8eac:	183ff926 	beq	r3,zero,8e94 <_lseek_r+0x34>
    8eb0:	80c00015 	stw	r3,0(r16)
    8eb4:	dfc00117 	ldw	ra,4(sp)
    8eb8:	dc000017 	ldw	r16,0(sp)
    8ebc:	dec00204 	addi	sp,sp,8
    8ec0:	f800283a 	ret

00008ec4 <_mbtowc_r>:
    8ec4:	00800074 	movhi	r2,1
    8ec8:	10841a17 	ldw	r2,4200(r2)
    8ecc:	1000683a 	jmp	r2

00008ed0 <__ascii_mbtowc>:
    8ed0:	deffff04 	addi	sp,sp,-4
    8ed4:	28000826 	beq	r5,zero,8ef8 <__ascii_mbtowc+0x28>
    8ed8:	30000926 	beq	r6,zero,8f00 <__ascii_mbtowc+0x30>
    8edc:	38000b26 	beq	r7,zero,8f0c <__ascii_mbtowc+0x3c>
    8ee0:	30800003 	ldbu	r2,0(r6)
    8ee4:	28800015 	stw	r2,0(r5)
    8ee8:	30800003 	ldbu	r2,0(r6)
    8eec:	1004c03a 	cmpne	r2,r2,zero
    8ef0:	dec00104 	addi	sp,sp,4
    8ef4:	f800283a 	ret
    8ef8:	d80b883a 	mov	r5,sp
    8efc:	303ff71e 	bne	r6,zero,8edc <__ascii_mbtowc+0xc>
    8f00:	0005883a 	mov	r2,zero
    8f04:	dec00104 	addi	sp,sp,4
    8f08:	f800283a 	ret
    8f0c:	00bfff84 	movi	r2,-2
    8f10:	003ff706 	br	8ef0 <__ascii_mbtowc+0x20>

00008f14 <memmove>:
    8f14:	2005883a 	mov	r2,r4
    8f18:	29000a2e 	bgeu	r5,r4,8f44 <memmove+0x30>
    8f1c:	2989883a 	add	r4,r5,r6
    8f20:	1100082e 	bgeu	r2,r4,8f44 <memmove+0x30>
    8f24:	1187883a 	add	r3,r2,r6
    8f28:	30003e26 	beq	r6,zero,9024 <memmove+0x110>
    8f2c:	217fffc3 	ldbu	r5,-1(r4)
    8f30:	18ffffc4 	addi	r3,r3,-1
    8f34:	213fffc4 	addi	r4,r4,-1
    8f38:	19400005 	stb	r5,0(r3)
    8f3c:	10fffb1e 	bne	r2,r3,8f2c <memmove+0x18>
    8f40:	f800283a 	ret
    8f44:	30c00430 	cmpltui	r3,r6,16
    8f48:	18000b26 	beq	r3,zero,8f78 <memmove+0x64>
    8f4c:	1007883a 	mov	r3,r2
    8f50:	31ffffc4 	addi	r7,r6,-1
    8f54:	30003726 	beq	r6,zero,9034 <memmove+0x120>
    8f58:	39c00044 	addi	r7,r7,1
    8f5c:	29cf883a 	add	r7,r5,r7
    8f60:	29800003 	ldbu	r6,0(r5)
    8f64:	29400044 	addi	r5,r5,1
    8f68:	18c00044 	addi	r3,r3,1
    8f6c:	19bfffc5 	stb	r6,-1(r3)
    8f70:	29fffb1e 	bne	r5,r7,8f60 <memmove+0x4c>
    8f74:	f800283a 	ret
    8f78:	2886b03a 	or	r3,r5,r2
    8f7c:	18c000cc 	andi	r3,r3,3
    8f80:	1800291e 	bne	r3,zero,9028 <memmove+0x114>
    8f84:	327ffc04 	addi	r9,r6,-16
    8f88:	4812d13a 	srli	r9,r9,4
    8f8c:	280f883a 	mov	r7,r5
    8f90:	1007883a 	mov	r3,r2
    8f94:	4a400044 	addi	r9,r9,1
    8f98:	4812913a 	slli	r9,r9,4
    8f9c:	1251883a 	add	r8,r2,r9
    8fa0:	39000017 	ldw	r4,0(r7)
    8fa4:	39c00404 	addi	r7,r7,16
    8fa8:	18c00404 	addi	r3,r3,16
    8fac:	193ffc15 	stw	r4,-16(r3)
    8fb0:	393ffd17 	ldw	r4,-12(r7)
    8fb4:	193ffd15 	stw	r4,-12(r3)
    8fb8:	393ffe17 	ldw	r4,-8(r7)
    8fbc:	193ffe15 	stw	r4,-8(r3)
    8fc0:	393fff17 	ldw	r4,-4(r7)
    8fc4:	193fff15 	stw	r4,-4(r3)
    8fc8:	40fff51e 	bne	r8,r3,8fa0 <memmove+0x8c>
    8fcc:	3100030c 	andi	r4,r6,12
    8fd0:	2a4b883a 	add	r5,r5,r9
    8fd4:	320003cc 	andi	r8,r6,15
    8fd8:	20001726 	beq	r4,zero,9038 <memmove+0x124>
    8fdc:	2813883a 	mov	r9,r5
    8fe0:	180f883a 	mov	r7,r3
    8fe4:	4a800017 	ldw	r10,0(r9)
    8fe8:	39c00104 	addi	r7,r7,4
    8fec:	41c9c83a 	sub	r4,r8,r7
    8ff0:	1909883a 	add	r4,r3,r4
    8ff4:	21000128 	cmpgeui	r4,r4,4
    8ff8:	3abfff15 	stw	r10,-4(r7)
    8ffc:	4a400104 	addi	r9,r9,4
    9000:	203ff81e 	bne	r4,zero,8fe4 <memmove+0xd0>
    9004:	413fff04 	addi	r4,r8,-4
    9008:	2008d0ba 	srli	r4,r4,2
    900c:	318000cc 	andi	r6,r6,3
    9010:	21000044 	addi	r4,r4,1
    9014:	200890ba 	slli	r4,r4,2
    9018:	1907883a 	add	r3,r3,r4
    901c:	290b883a 	add	r5,r5,r4
    9020:	003fcb06 	br	8f50 <memmove+0x3c>
    9024:	f800283a 	ret
    9028:	31ffffc4 	addi	r7,r6,-1
    902c:	1007883a 	mov	r3,r2
    9030:	003fc906 	br	8f58 <memmove+0x44>
    9034:	f800283a 	ret
    9038:	400d883a 	mov	r6,r8
    903c:	003fc406 	br	8f50 <memmove+0x3c>

00009040 <_read_r>:
    9040:	2807883a 	mov	r3,r5
    9044:	defffe04 	addi	sp,sp,-8
    9048:	dc000015 	stw	r16,0(sp)
    904c:	300b883a 	mov	r5,r6
    9050:	00800074 	movhi	r2,1
    9054:	380d883a 	mov	r6,r7
    9058:	2021883a 	mov	r16,r4
    905c:	1809883a 	mov	r4,r3
    9060:	dfc00115 	stw	ra,4(sp)
    9064:	10102115 	stw	zero,16516(r2)
    9068:	000d84c0 	call	d84c <read>
    906c:	10ffffd8 	cmpnei	r3,r2,-1
    9070:	18000426 	beq	r3,zero,9084 <_read_r+0x44>
    9074:	dfc00117 	ldw	ra,4(sp)
    9078:	dc000017 	ldw	r16,0(sp)
    907c:	dec00204 	addi	sp,sp,8
    9080:	f800283a 	ret
    9084:	00c00074 	movhi	r3,1
    9088:	18d02117 	ldw	r3,16516(r3)
    908c:	183ff926 	beq	r3,zero,9074 <_read_r+0x34>
    9090:	80c00015 	stw	r3,0(r16)
    9094:	dfc00117 	ldw	ra,4(sp)
    9098:	dc000017 	ldw	r16,0(sp)
    909c:	dec00204 	addi	sp,sp,8
    90a0:	f800283a 	ret

000090a4 <_realloc_r>:
    90a4:	defff604 	addi	sp,sp,-40
    90a8:	dc800215 	stw	r18,8(sp)
    90ac:	dfc00915 	stw	ra,36(sp)
    90b0:	df000815 	stw	fp,32(sp)
    90b4:	ddc00715 	stw	r23,28(sp)
    90b8:	dd800615 	stw	r22,24(sp)
    90bc:	dd400515 	stw	r21,20(sp)
    90c0:	dd000415 	stw	r20,16(sp)
    90c4:	dcc00315 	stw	r19,12(sp)
    90c8:	dc400115 	stw	r17,4(sp)
    90cc:	dc000015 	stw	r16,0(sp)
    90d0:	3025883a 	mov	r18,r6
    90d4:	28008b26 	beq	r5,zero,9304 <_realloc_r+0x260>
    90d8:	2821883a 	mov	r16,r5
    90dc:	2027883a 	mov	r19,r4
    90e0:	944002c4 	addi	r17,r18,11
    90e4:	000d7c80 	call	d7c8 <__malloc_lock>
    90e8:	888005f0 	cmpltui	r2,r17,23
    90ec:	1000521e 	bne	r2,zero,9238 <_realloc_r+0x194>
    90f0:	017ffe04 	movi	r5,-8
    90f4:	8962703a 	and	r17,r17,r5
    90f8:	8807883a 	mov	r3,r17
    90fc:	88005116 	blt	r17,zero,9244 <_realloc_r+0x1a0>
    9100:	8c805036 	bltu	r17,r18,9244 <_realloc_r+0x1a0>
    9104:	80bfff17 	ldw	r2,-4(r16)
    9108:	017fff04 	movi	r5,-4
    910c:	857ffe04 	addi	r21,r16,-8
    9110:	1168703a 	and	r20,r2,r5
    9114:	a0c0390e 	bge	r20,r3,91fc <_realloc_r+0x158>
    9118:	05c00074 	movhi	r23,1
    911c:	bdc2df04 	addi	r23,r23,2940
    9120:	ba000217 	ldw	r8,8(r23)
    9124:	ad0f883a 	add	r7,r21,r20
    9128:	39000117 	ldw	r4,4(r7)
    912c:	41c08e26 	beq	r8,r7,9368 <_realloc_r+0x2c4>
    9130:	01bfff84 	movi	r6,-2
    9134:	218c703a 	and	r6,r4,r6
    9138:	398d883a 	add	r6,r7,r6
    913c:	31800117 	ldw	r6,4(r6)
    9140:	3180004c 	andi	r6,r6,1
    9144:	30004f1e 	bne	r6,zero,9284 <_realloc_r+0x1e0>
    9148:	2148703a 	and	r4,r4,r5
    914c:	a10b883a 	add	r5,r20,r4
    9150:	28c0bb0e 	bge	r5,r3,9440 <_realloc_r+0x39c>
    9154:	1080004c 	andi	r2,r2,1
    9158:	10004c1e 	bne	r2,zero,928c <_realloc_r+0x1e8>
    915c:	873ffe17 	ldw	fp,-8(r16)
    9160:	00bfff04 	movi	r2,-4
    9164:	af39c83a 	sub	fp,r21,fp
    9168:	e1400117 	ldw	r5,4(fp)
    916c:	288a703a 	and	r5,r5,r2
    9170:	38000426 	beq	r7,zero,9184 <_realloc_r+0xe0>
    9174:	a16d883a 	add	r22,r20,r5
    9178:	b12d883a 	add	r22,r22,r4
    917c:	41c0ba26 	beq	r8,r7,9468 <_realloc_r+0x3c4>
    9180:	b0c0930e 	bge	r22,r3,93d0 <_realloc_r+0x32c>
    9184:	e0004126 	beq	fp,zero,928c <_realloc_r+0x1e8>
    9188:	a16d883a 	add	r22,r20,r5
    918c:	b0c03f16 	blt	r22,r3,928c <_realloc_r+0x1e8>
    9190:	e0800317 	ldw	r2,12(fp)
    9194:	e0c00217 	ldw	r3,8(fp)
    9198:	a1bfff04 	addi	r6,r20,-4
    919c:	31400968 	cmpgeui	r5,r6,37
    91a0:	18800315 	stw	r2,12(r3)
    91a4:	10c00215 	stw	r3,8(r2)
    91a8:	e1000204 	addi	r4,fp,8
    91ac:	2800941e 	bne	r5,zero,9400 <_realloc_r+0x35c>
    91b0:	30800530 	cmpltui	r2,r6,20
    91b4:	1000db1e 	bne	r2,zero,9524 <_realloc_r+0x480>
    91b8:	80c00017 	ldw	r3,0(r16)
    91bc:	30800728 	cmpgeui	r2,r6,28
    91c0:	e0c00215 	stw	r3,8(fp)
    91c4:	80c00117 	ldw	r3,4(r16)
    91c8:	e0c00315 	stw	r3,12(fp)
    91cc:	1000d71e 	bne	r2,zero,952c <_realloc_r+0x488>
    91d0:	84000204 	addi	r16,r16,8
    91d4:	e0800404 	addi	r2,fp,16
    91d8:	80c00017 	ldw	r3,0(r16)
    91dc:	b029883a 	mov	r20,r22
    91e0:	e02b883a 	mov	r21,fp
    91e4:	10c00015 	stw	r3,0(r2)
    91e8:	80c00117 	ldw	r3,4(r16)
    91ec:	10c00115 	stw	r3,4(r2)
    91f0:	80c00217 	ldw	r3,8(r16)
    91f4:	2021883a 	mov	r16,r4
    91f8:	10c00215 	stw	r3,8(r2)
    91fc:	a9800117 	ldw	r6,4(r21)
    9200:	a447c83a 	sub	r3,r20,r17
    9204:	19000430 	cmpltui	r4,r3,16
    9208:	3180004c 	andi	r6,r6,1
    920c:	ad05883a 	add	r2,r21,r20
    9210:	20004926 	beq	r4,zero,9338 <_realloc_r+0x294>
    9214:	a18cb03a 	or	r6,r20,r6
    9218:	a9800115 	stw	r6,4(r21)
    921c:	10c00117 	ldw	r3,4(r2)
    9220:	18c00054 	ori	r3,r3,1
    9224:	10c00115 	stw	r3,4(r2)
    9228:	9809883a 	mov	r4,r19
    922c:	000d7ec0 	call	d7ec <__malloc_unlock>
    9230:	8025883a 	mov	r18,r16
    9234:	00000606 	br	9250 <_realloc_r+0x1ac>
    9238:	04400404 	movi	r17,16
    923c:	00c00404 	movi	r3,16
    9240:	8cbfb02e 	bgeu	r17,r18,9104 <_realloc_r+0x60>
    9244:	00800304 	movi	r2,12
    9248:	98800015 	stw	r2,0(r19)
    924c:	0025883a 	mov	r18,zero
    9250:	9005883a 	mov	r2,r18
    9254:	dfc00917 	ldw	ra,36(sp)
    9258:	df000817 	ldw	fp,32(sp)
    925c:	ddc00717 	ldw	r23,28(sp)
    9260:	dd800617 	ldw	r22,24(sp)
    9264:	dd400517 	ldw	r21,20(sp)
    9268:	dd000417 	ldw	r20,16(sp)
    926c:	dcc00317 	ldw	r19,12(sp)
    9270:	dc800217 	ldw	r18,8(sp)
    9274:	dc400117 	ldw	r17,4(sp)
    9278:	dc000017 	ldw	r16,0(sp)
    927c:	dec00a04 	addi	sp,sp,40
    9280:	f800283a 	ret
    9284:	1080004c 	andi	r2,r2,1
    9288:	10006826 	beq	r2,zero,942c <_realloc_r+0x388>
    928c:	900b883a 	mov	r5,r18
    9290:	9809883a 	mov	r4,r19
    9294:	0004fb40 	call	4fb4 <_malloc_r>
    9298:	1025883a 	mov	r18,r2
    929c:	10001626 	beq	r2,zero,92f8 <_realloc_r+0x254>
    92a0:	80bfff17 	ldw	r2,-4(r16)
    92a4:	013fff84 	movi	r4,-2
    92a8:	90fffe04 	addi	r3,r18,-8
    92ac:	1104703a 	and	r2,r2,r4
    92b0:	a885883a 	add	r2,r21,r2
    92b4:	10c05826 	beq	r2,r3,9418 <_realloc_r+0x374>
    92b8:	a1bfff04 	addi	r6,r20,-4
    92bc:	30800968 	cmpgeui	r2,r6,37
    92c0:	1000651e 	bne	r2,zero,9458 <_realloc_r+0x3b4>
    92c4:	30800530 	cmpltui	r2,r6,20
    92c8:	10003826 	beq	r2,zero,93ac <_realloc_r+0x308>
    92cc:	9005883a 	mov	r2,r18
    92d0:	8007883a 	mov	r3,r16
    92d4:	19000017 	ldw	r4,0(r3)
    92d8:	11000015 	stw	r4,0(r2)
    92dc:	19000117 	ldw	r4,4(r3)
    92e0:	11000115 	stw	r4,4(r2)
    92e4:	18c00217 	ldw	r3,8(r3)
    92e8:	10c00215 	stw	r3,8(r2)
    92ec:	800b883a 	mov	r5,r16
    92f0:	9809883a 	mov	r4,r19
    92f4:	00049100 	call	4910 <_free_r>
    92f8:	9809883a 	mov	r4,r19
    92fc:	000d7ec0 	call	d7ec <__malloc_unlock>
    9300:	003fd306 	br	9250 <_realloc_r+0x1ac>
    9304:	300b883a 	mov	r5,r6
    9308:	dfc00917 	ldw	ra,36(sp)
    930c:	df000817 	ldw	fp,32(sp)
    9310:	ddc00717 	ldw	r23,28(sp)
    9314:	dd800617 	ldw	r22,24(sp)
    9318:	dd400517 	ldw	r21,20(sp)
    931c:	dd000417 	ldw	r20,16(sp)
    9320:	dcc00317 	ldw	r19,12(sp)
    9324:	dc800217 	ldw	r18,8(sp)
    9328:	dc400117 	ldw	r17,4(sp)
    932c:	dc000017 	ldw	r16,0(sp)
    9330:	dec00a04 	addi	sp,sp,40
    9334:	0004fb41 	jmpi	4fb4 <_malloc_r>
    9338:	344cb03a 	or	r6,r6,r17
    933c:	a9800115 	stw	r6,4(r21)
    9340:	ac4b883a 	add	r5,r21,r17
    9344:	18c00054 	ori	r3,r3,1
    9348:	28c00115 	stw	r3,4(r5)
    934c:	10c00117 	ldw	r3,4(r2)
    9350:	29400204 	addi	r5,r5,8
    9354:	9809883a 	mov	r4,r19
    9358:	18c00054 	ori	r3,r3,1
    935c:	10c00115 	stw	r3,4(r2)
    9360:	00049100 	call	4910 <_free_r>
    9364:	003fb006 	br	9228 <_realloc_r+0x184>
    9368:	2148703a 	and	r4,r4,r5
    936c:	a10b883a 	add	r5,r20,r4
    9370:	89800404 	addi	r6,r17,16
    9374:	29bf7716 	blt	r5,r6,9154 <_realloc_r+0xb0>
    9378:	ac6b883a 	add	r21,r21,r17
    937c:	2c45c83a 	sub	r2,r5,r17
    9380:	bd400215 	stw	r21,8(r23)
    9384:	10800054 	ori	r2,r2,1
    9388:	a8800115 	stw	r2,4(r21)
    938c:	80bfff17 	ldw	r2,-4(r16)
    9390:	9809883a 	mov	r4,r19
    9394:	8025883a 	mov	r18,r16
    9398:	1080004c 	andi	r2,r2,1
    939c:	1462b03a 	or	r17,r2,r17
    93a0:	847fff15 	stw	r17,-4(r16)
    93a4:	000d7ec0 	call	d7ec <__malloc_unlock>
    93a8:	003fa906 	br	9250 <_realloc_r+0x1ac>
    93ac:	80c00017 	ldw	r3,0(r16)
    93b0:	30800728 	cmpgeui	r2,r6,28
    93b4:	90c00015 	stw	r3,0(r18)
    93b8:	80c00117 	ldw	r3,4(r16)
    93bc:	90c00115 	stw	r3,4(r18)
    93c0:	10004f1e 	bne	r2,zero,9500 <_realloc_r+0x45c>
    93c4:	80c00204 	addi	r3,r16,8
    93c8:	90800204 	addi	r2,r18,8
    93cc:	003fc106 	br	92d4 <_realloc_r+0x230>
    93d0:	38800317 	ldw	r2,12(r7)
    93d4:	38c00217 	ldw	r3,8(r7)
    93d8:	a1bfff04 	addi	r6,r20,-4
    93dc:	31400968 	cmpgeui	r5,r6,37
    93e0:	18800315 	stw	r2,12(r3)
    93e4:	10c00215 	stw	r3,8(r2)
    93e8:	e0c00217 	ldw	r3,8(fp)
    93ec:	e0800317 	ldw	r2,12(fp)
    93f0:	e1000204 	addi	r4,fp,8
    93f4:	18800315 	stw	r2,12(r3)
    93f8:	10c00215 	stw	r3,8(r2)
    93fc:	283f6c26 	beq	r5,zero,91b0 <_realloc_r+0x10c>
    9400:	800b883a 	mov	r5,r16
    9404:	0008f140 	call	8f14 <memmove>
    9408:	1021883a 	mov	r16,r2
    940c:	b029883a 	mov	r20,r22
    9410:	e02b883a 	mov	r21,fp
    9414:	003f7906 	br	91fc <_realloc_r+0x158>
    9418:	90bfff17 	ldw	r2,-4(r18)
    941c:	00ffff04 	movi	r3,-4
    9420:	10c4703a 	and	r2,r2,r3
    9424:	a0a9883a 	add	r20,r20,r2
    9428:	003f7406 	br	91fc <_realloc_r+0x158>
    942c:	873ffe17 	ldw	fp,-8(r16)
    9430:	af39c83a 	sub	fp,r21,fp
    9434:	e0800117 	ldw	r2,4(fp)
    9438:	114a703a 	and	r5,r2,r5
    943c:	003f5106 	br	9184 <_realloc_r+0xe0>
    9440:	38800317 	ldw	r2,12(r7)
    9444:	38c00217 	ldw	r3,8(r7)
    9448:	2829883a 	mov	r20,r5
    944c:	18800315 	stw	r2,12(r3)
    9450:	10c00215 	stw	r3,8(r2)
    9454:	003f6906 	br	91fc <_realloc_r+0x158>
    9458:	800b883a 	mov	r5,r16
    945c:	9009883a 	mov	r4,r18
    9460:	0008f140 	call	8f14 <memmove>
    9464:	003fa106 	br	92ec <_realloc_r+0x248>
    9468:	88800404 	addi	r2,r17,16
    946c:	b0bf4516 	blt	r22,r2,9184 <_realloc_r+0xe0>
    9470:	e0800317 	ldw	r2,12(fp)
    9474:	e0c00217 	ldw	r3,8(fp)
    9478:	a1bfff04 	addi	r6,r20,-4
    947c:	31000968 	cmpgeui	r4,r6,37
    9480:	18800315 	stw	r2,12(r3)
    9484:	10c00215 	stw	r3,8(r2)
    9488:	e4800204 	addi	r18,fp,8
    948c:	2000391e 	bne	r4,zero,9574 <_realloc_r+0x4d0>
    9490:	30800530 	cmpltui	r2,r6,20
    9494:	1000351e 	bne	r2,zero,956c <_realloc_r+0x4c8>
    9498:	80c00017 	ldw	r3,0(r16)
    949c:	30800728 	cmpgeui	r2,r6,28
    94a0:	e0c00215 	stw	r3,8(fp)
    94a4:	80c00117 	ldw	r3,4(r16)
    94a8:	e0c00315 	stw	r3,12(fp)
    94ac:	10003c1e 	bne	r2,zero,95a0 <_realloc_r+0x4fc>
    94b0:	84000204 	addi	r16,r16,8
    94b4:	e0800404 	addi	r2,fp,16
    94b8:	80c00017 	ldw	r3,0(r16)
    94bc:	10c00015 	stw	r3,0(r2)
    94c0:	80c00117 	ldw	r3,4(r16)
    94c4:	10c00115 	stw	r3,4(r2)
    94c8:	80c00217 	ldw	r3,8(r16)
    94cc:	10c00215 	stw	r3,8(r2)
    94d0:	e447883a 	add	r3,fp,r17
    94d4:	b445c83a 	sub	r2,r22,r17
    94d8:	b8c00215 	stw	r3,8(r23)
    94dc:	10800054 	ori	r2,r2,1
    94e0:	18800115 	stw	r2,4(r3)
    94e4:	e0800117 	ldw	r2,4(fp)
    94e8:	9809883a 	mov	r4,r19
    94ec:	1080004c 	andi	r2,r2,1
    94f0:	1462b03a 	or	r17,r2,r17
    94f4:	e4400115 	stw	r17,4(fp)
    94f8:	000d7ec0 	call	d7ec <__malloc_unlock>
    94fc:	003f5406 	br	9250 <_realloc_r+0x1ac>
    9500:	80800217 	ldw	r2,8(r16)
    9504:	31800920 	cmpeqi	r6,r6,36
    9508:	90800215 	stw	r2,8(r18)
    950c:	80800317 	ldw	r2,12(r16)
    9510:	90800315 	stw	r2,12(r18)
    9514:	30000e1e 	bne	r6,zero,9550 <_realloc_r+0x4ac>
    9518:	80c00404 	addi	r3,r16,16
    951c:	90800404 	addi	r2,r18,16
    9520:	003f6c06 	br	92d4 <_realloc_r+0x230>
    9524:	2005883a 	mov	r2,r4
    9528:	003f2b06 	br	91d8 <_realloc_r+0x134>
    952c:	80800217 	ldw	r2,8(r16)
    9530:	31800920 	cmpeqi	r6,r6,36
    9534:	e0800415 	stw	r2,16(fp)
    9538:	80800317 	ldw	r2,12(r16)
    953c:	e0800515 	stw	r2,20(fp)
    9540:	3000101e 	bne	r6,zero,9584 <_realloc_r+0x4e0>
    9544:	84000404 	addi	r16,r16,16
    9548:	e0800604 	addi	r2,fp,24
    954c:	003f2206 	br	91d8 <_realloc_r+0x134>
    9550:	81000417 	ldw	r4,16(r16)
    9554:	80c00604 	addi	r3,r16,24
    9558:	90800604 	addi	r2,r18,24
    955c:	91000415 	stw	r4,16(r18)
    9560:	81000517 	ldw	r4,20(r16)
    9564:	91000515 	stw	r4,20(r18)
    9568:	003f5a06 	br	92d4 <_realloc_r+0x230>
    956c:	9005883a 	mov	r2,r18
    9570:	003fd106 	br	94b8 <_realloc_r+0x414>
    9574:	800b883a 	mov	r5,r16
    9578:	9009883a 	mov	r4,r18
    957c:	0008f140 	call	8f14 <memmove>
    9580:	003fd306 	br	94d0 <_realloc_r+0x42c>
    9584:	80c00417 	ldw	r3,16(r16)
    9588:	84000604 	addi	r16,r16,24
    958c:	e0800804 	addi	r2,fp,32
    9590:	e0c00615 	stw	r3,24(fp)
    9594:	80ffff17 	ldw	r3,-4(r16)
    9598:	e0c00715 	stw	r3,28(fp)
    959c:	003f0e06 	br	91d8 <_realloc_r+0x134>
    95a0:	80800217 	ldw	r2,8(r16)
    95a4:	31800920 	cmpeqi	r6,r6,36
    95a8:	e0800415 	stw	r2,16(fp)
    95ac:	80800317 	ldw	r2,12(r16)
    95b0:	e0800515 	stw	r2,20(fp)
    95b4:	3000031e 	bne	r6,zero,95c4 <_realloc_r+0x520>
    95b8:	84000404 	addi	r16,r16,16
    95bc:	e0800604 	addi	r2,fp,24
    95c0:	003fbd06 	br	94b8 <_realloc_r+0x414>
    95c4:	80c00417 	ldw	r3,16(r16)
    95c8:	84000604 	addi	r16,r16,24
    95cc:	e0800804 	addi	r2,fp,32
    95d0:	e0c00615 	stw	r3,24(fp)
    95d4:	80ffff17 	ldw	r3,-4(r16)
    95d8:	e0c00715 	stw	r3,28(fp)
    95dc:	003fb606 	br	94b8 <_realloc_r+0x414>

000095e0 <strcmp>:
    95e0:	2144b03a 	or	r2,r4,r5
    95e4:	108000cc 	andi	r2,r2,3
    95e8:	1000141e 	bne	r2,zero,963c <strcmp+0x5c>
    95ec:	20800017 	ldw	r2,0(r4)
    95f0:	28c00017 	ldw	r3,0(r5)
    95f4:	10c0111e 	bne	r2,r3,963c <strcmp+0x5c>
    95f8:	01ffbff4 	movhi	r7,65279
    95fc:	01a02074 	movhi	r6,32897
    9600:	39ffbfc4 	addi	r7,r7,-257
    9604:	31a02004 	addi	r6,r6,-32640
    9608:	00000306 	br	9618 <strcmp+0x38>
    960c:	20800017 	ldw	r2,0(r4)
    9610:	28c00017 	ldw	r3,0(r5)
    9614:	10c0091e 	bne	r2,r3,963c <strcmp+0x5c>
    9618:	11c7883a 	add	r3,r2,r7
    961c:	0084303a 	nor	r2,zero,r2
    9620:	1884703a 	and	r2,r3,r2
    9624:	1184703a 	and	r2,r2,r6
    9628:	21000104 	addi	r4,r4,4
    962c:	29400104 	addi	r5,r5,4
    9630:	103ff626 	beq	r2,zero,960c <strcmp+0x2c>
    9634:	0005883a 	mov	r2,zero
    9638:	f800283a 	ret
    963c:	20c00003 	ldbu	r3,0(r4)
    9640:	18803fcc 	andi	r2,r3,255
    9644:	1080201c 	xori	r2,r2,128
    9648:	10bfe004 	addi	r2,r2,-128
    964c:	1000071e 	bne	r2,zero,966c <strcmp+0x8c>
    9650:	00000a06 	br	967c <strcmp+0x9c>
    9654:	20c00003 	ldbu	r3,0(r4)
    9658:	29400044 	addi	r5,r5,1
    965c:	18803fcc 	andi	r2,r3,255
    9660:	1080201c 	xori	r2,r2,128
    9664:	10bfe004 	addi	r2,r2,-128
    9668:	10000726 	beq	r2,zero,9688 <strcmp+0xa8>
    966c:	29800007 	ldb	r6,0(r5)
    9670:	21000044 	addi	r4,r4,1
    9674:	30bff726 	beq	r6,r2,9654 <strcmp+0x74>
    9678:	18803fcc 	andi	r2,r3,255
    967c:	28c00003 	ldbu	r3,0(r5)
    9680:	10c5c83a 	sub	r2,r2,r3
    9684:	f800283a 	ret
    9688:	28c00003 	ldbu	r3,0(r5)
    968c:	0005883a 	mov	r2,zero
    9690:	10c5c83a 	sub	r2,r2,r3
    9694:	f800283a 	ret

00009698 <_vfiprintf_r>:
    9698:	0006ef01 	jmpi	6ef0 <___vfiprintf_internal_r>

0000969c <__swbuf_r>:
    969c:	defffb04 	addi	sp,sp,-20
    96a0:	dcc00315 	stw	r19,12(sp)
    96a4:	dc400115 	stw	r17,4(sp)
    96a8:	dc000015 	stw	r16,0(sp)
    96ac:	dfc00415 	stw	ra,16(sp)
    96b0:	dc800215 	stw	r18,8(sp)
    96b4:	2027883a 	mov	r19,r4
    96b8:	2823883a 	mov	r17,r5
    96bc:	3021883a 	mov	r16,r6
    96c0:	20000226 	beq	r4,zero,96cc <__swbuf_r+0x30>
    96c4:	20800e17 	ldw	r2,56(r4)
    96c8:	10003e26 	beq	r2,zero,97c4 <__swbuf_r+0x128>
    96cc:	80800617 	ldw	r2,24(r16)
    96d0:	80c0030b 	ldhu	r3,12(r16)
    96d4:	80800215 	stw	r2,8(r16)
    96d8:	1880020c 	andi	r2,r3,8
    96dc:	10001f26 	beq	r2,zero,975c <__swbuf_r+0xc0>
    96e0:	80800417 	ldw	r2,16(r16)
    96e4:	10001d26 	beq	r2,zero,975c <__swbuf_r+0xc0>
    96e8:	1948000c 	andi	r5,r3,8192
    96ec:	8c803fcc 	andi	r18,r17,255
    96f0:	28002326 	beq	r5,zero,9780 <__swbuf_r+0xe4>
    96f4:	80c00017 	ldw	r3,0(r16)
    96f8:	81000517 	ldw	r4,20(r16)
    96fc:	1885c83a 	sub	r2,r3,r2
    9700:	1100290e 	bge	r2,r4,97a8 <__swbuf_r+0x10c>
    9704:	10800044 	addi	r2,r2,1
    9708:	81400217 	ldw	r5,8(r16)
    970c:	19000044 	addi	r4,r3,1
    9710:	81000015 	stw	r4,0(r16)
    9714:	297fffc4 	addi	r5,r5,-1
    9718:	81400215 	stw	r5,8(r16)
    971c:	1c400005 	stb	r17,0(r3)
    9720:	80c00517 	ldw	r3,20(r16)
    9724:	18802926 	beq	r3,r2,97cc <__swbuf_r+0x130>
    9728:	8080030b 	ldhu	r2,12(r16)
    972c:	1080004c 	andi	r2,r2,1
    9730:	10000226 	beq	r2,zero,973c <__swbuf_r+0xa0>
    9734:	90800298 	cmpnei	r2,r18,10
    9738:	10002426 	beq	r2,zero,97cc <__swbuf_r+0x130>
    973c:	9005883a 	mov	r2,r18
    9740:	dfc00417 	ldw	ra,16(sp)
    9744:	dcc00317 	ldw	r19,12(sp)
    9748:	dc800217 	ldw	r18,8(sp)
    974c:	dc400117 	ldw	r17,4(sp)
    9750:	dc000017 	ldw	r16,0(sp)
    9754:	dec00504 	addi	sp,sp,20
    9758:	f800283a 	ret
    975c:	800b883a 	mov	r5,r16
    9760:	9809883a 	mov	r4,r19
    9764:	00026a40 	call	26a4 <__swsetup_r>
    9768:	10001c1e 	bne	r2,zero,97dc <__swbuf_r+0x140>
    976c:	80c0030b 	ldhu	r3,12(r16)
    9770:	80800417 	ldw	r2,16(r16)
    9774:	8c803fcc 	andi	r18,r17,255
    9778:	1948000c 	andi	r5,r3,8192
    977c:	283fdd1e 	bne	r5,zero,96f4 <__swbuf_r+0x58>
    9780:	81001917 	ldw	r4,100(r16)
    9784:	18c80014 	ori	r3,r3,8192
    9788:	0177ffc4 	movi	r5,-8193
    978c:	2148703a 	and	r4,r4,r5
    9790:	80c0030d 	sth	r3,12(r16)
    9794:	80c00017 	ldw	r3,0(r16)
    9798:	81001915 	stw	r4,100(r16)
    979c:	81000517 	ldw	r4,20(r16)
    97a0:	1885c83a 	sub	r2,r3,r2
    97a4:	113fd716 	blt	r2,r4,9704 <__swbuf_r+0x68>
    97a8:	800b883a 	mov	r5,r16
    97ac:	9809883a 	mov	r4,r19
    97b0:	00043740 	call	4374 <_fflush_r>
    97b4:	1000091e 	bne	r2,zero,97dc <__swbuf_r+0x140>
    97b8:	80c00017 	ldw	r3,0(r16)
    97bc:	00800044 	movi	r2,1
    97c0:	003fd106 	br	9708 <__swbuf_r+0x6c>
    97c4:	00047ac0 	call	47ac <__sinit>
    97c8:	003fc006 	br	96cc <__swbuf_r+0x30>
    97cc:	800b883a 	mov	r5,r16
    97d0:	9809883a 	mov	r4,r19
    97d4:	00043740 	call	4374 <_fflush_r>
    97d8:	103fd826 	beq	r2,zero,973c <__swbuf_r+0xa0>
    97dc:	04bfffc4 	movi	r18,-1
    97e0:	003fd606 	br	973c <__swbuf_r+0xa0>

000097e4 <__swbuf>:
    97e4:	00c00074 	movhi	r3,1
    97e8:	2005883a 	mov	r2,r4
    97ec:	1908ed17 	ldw	r4,9140(r3)
    97f0:	280d883a 	mov	r6,r5
    97f4:	100b883a 	mov	r5,r2
    97f8:	000969c1 	jmpi	969c <__swbuf_r>

000097fc <_wcrtomb_r>:
    97fc:	defffa04 	addi	sp,sp,-24
    9800:	dc400415 	stw	r17,16(sp)
    9804:	dc000315 	stw	r16,12(sp)
    9808:	00800074 	movhi	r2,1
    980c:	dfc00515 	stw	ra,20(sp)
    9810:	10841917 	ldw	r2,4196(r2)
    9814:	2023883a 	mov	r17,r4
    9818:	3821883a 	mov	r16,r7
    981c:	28000826 	beq	r5,zero,9840 <_wcrtomb_r+0x44>
    9820:	103ee83a 	callr	r2
    9824:	10ffffd8 	cmpnei	r3,r2,-1
    9828:	18000a26 	beq	r3,zero,9854 <_wcrtomb_r+0x58>
    982c:	dfc00517 	ldw	ra,20(sp)
    9830:	dc400417 	ldw	r17,16(sp)
    9834:	dc000317 	ldw	r16,12(sp)
    9838:	dec00604 	addi	sp,sp,24
    983c:	f800283a 	ret
    9840:	000d883a 	mov	r6,zero
    9844:	d9400084 	addi	r5,sp,2
    9848:	103ee83a 	callr	r2
    984c:	10ffffd8 	cmpnei	r3,r2,-1
    9850:	183ff61e 	bne	r3,zero,982c <_wcrtomb_r+0x30>
    9854:	00802284 	movi	r2,138
    9858:	80000015 	stw	zero,0(r16)
    985c:	88800015 	stw	r2,0(r17)
    9860:	00bfffc4 	movi	r2,-1
    9864:	003ff106 	br	982c <_wcrtomb_r+0x30>

00009868 <wcrtomb>:
    9868:	defffa04 	addi	sp,sp,-24
    986c:	00c00074 	movhi	r3,1
    9870:	dc400415 	stw	r17,16(sp)
    9874:	dc000315 	stw	r16,12(sp)
    9878:	1c48ed17 	ldw	r17,9140(r3)
    987c:	dfc00515 	stw	ra,20(sp)
    9880:	00c00074 	movhi	r3,1
    9884:	18c41917 	ldw	r3,4196(r3)
    9888:	3021883a 	mov	r16,r6
    988c:	20000c26 	beq	r4,zero,98c0 <wcrtomb+0x58>
    9890:	280d883a 	mov	r6,r5
    9894:	800f883a 	mov	r7,r16
    9898:	200b883a 	mov	r5,r4
    989c:	8809883a 	mov	r4,r17
    98a0:	183ee83a 	callr	r3
    98a4:	10ffffd8 	cmpnei	r3,r2,-1
    98a8:	18000c26 	beq	r3,zero,98dc <wcrtomb+0x74>
    98ac:	dfc00517 	ldw	ra,20(sp)
    98b0:	dc400417 	ldw	r17,16(sp)
    98b4:	dc000317 	ldw	r16,12(sp)
    98b8:	dec00604 	addi	sp,sp,24
    98bc:	f800283a 	ret
    98c0:	300f883a 	mov	r7,r6
    98c4:	d9400084 	addi	r5,sp,2
    98c8:	000d883a 	mov	r6,zero
    98cc:	8809883a 	mov	r4,r17
    98d0:	183ee83a 	callr	r3
    98d4:	10ffffd8 	cmpnei	r3,r2,-1
    98d8:	183ff41e 	bne	r3,zero,98ac <wcrtomb+0x44>
    98dc:	00802284 	movi	r2,138
    98e0:	80000015 	stw	zero,0(r16)
    98e4:	88800015 	stw	r2,0(r17)
    98e8:	00bfffc4 	movi	r2,-1
    98ec:	003fef06 	br	98ac <wcrtomb+0x44>

000098f0 <_wctomb_r>:
    98f0:	00800074 	movhi	r2,1
    98f4:	10841917 	ldw	r2,4196(r2)
    98f8:	1000683a 	jmp	r2

000098fc <__ascii_wctomb>:
    98fc:	28000926 	beq	r5,zero,9924 <__ascii_wctomb+0x28>
    9900:	30804030 	cmpltui	r2,r6,256
    9904:	10000326 	beq	r2,zero,9914 <__ascii_wctomb+0x18>
    9908:	29800005 	stb	r6,0(r5)
    990c:	00800044 	movi	r2,1
    9910:	f800283a 	ret
    9914:	00802284 	movi	r2,138
    9918:	20800015 	stw	r2,0(r4)
    991c:	00bfffc4 	movi	r2,-1
    9920:	f800283a 	ret
    9924:	0005883a 	mov	r2,zero
    9928:	f800283a 	ret

0000992c <abort>:
    992c:	deffff04 	addi	sp,sp,-4
    9930:	01000184 	movi	r4,6
    9934:	dfc00015 	stw	ra,0(sp)
    9938:	0009bb80 	call	9bb8 <raise>
    993c:	01000044 	movi	r4,1
    9940:	000d1c40 	call	d1c4 <_exit>

00009944 <_init_signal_r>:
    9944:	2080b717 	ldw	r2,732(r4)
    9948:	10000226 	beq	r2,zero,9954 <_init_signal_r+0x10>
    994c:	0005883a 	mov	r2,zero
    9950:	f800283a 	ret
    9954:	defffe04 	addi	sp,sp,-8
    9958:	01402004 	movi	r5,128
    995c:	dc000015 	stw	r16,0(sp)
    9960:	dfc00115 	stw	ra,4(sp)
    9964:	2021883a 	mov	r16,r4
    9968:	0004fb40 	call	4fb4 <_malloc_r>
    996c:	8080b715 	stw	r2,732(r16)
    9970:	1009883a 	mov	r4,r2
    9974:	10000826 	beq	r2,zero,9998 <_init_signal_r+0x54>
    9978:	01802004 	movi	r6,128
    997c:	000b883a 	mov	r5,zero
    9980:	00059640 	call	5964 <memset>
    9984:	0005883a 	mov	r2,zero
    9988:	dfc00117 	ldw	ra,4(sp)
    998c:	dc000017 	ldw	r16,0(sp)
    9990:	dec00204 	addi	sp,sp,8
    9994:	f800283a 	ret
    9998:	00bfffc4 	movi	r2,-1
    999c:	003ffa06 	br	9988 <_init_signal_r+0x44>

000099a0 <_signal_r>:
    99a0:	defffc04 	addi	sp,sp,-16
    99a4:	dc400115 	stw	r17,4(sp)
    99a8:	dfc00315 	stw	ra,12(sp)
    99ac:	dc800215 	stw	r18,8(sp)
    99b0:	dc000015 	stw	r16,0(sp)
    99b4:	28800830 	cmpltui	r2,r5,32
    99b8:	2023883a 	mov	r17,r4
    99bc:	10000e26 	beq	r2,zero,99f8 <_signal_r+0x58>
    99c0:	20c0b717 	ldw	r3,732(r4)
    99c4:	2821883a 	mov	r16,r5
    99c8:	3025883a 	mov	r18,r6
    99cc:	18000e26 	beq	r3,zero,9a08 <_signal_r+0x68>
    99d0:	802090ba 	slli	r16,r16,2
    99d4:	1c21883a 	add	r16,r3,r16
    99d8:	80800017 	ldw	r2,0(r16)
    99dc:	84800015 	stw	r18,0(r16)
    99e0:	dfc00317 	ldw	ra,12(sp)
    99e4:	dc800217 	ldw	r18,8(sp)
    99e8:	dc400117 	ldw	r17,4(sp)
    99ec:	dc000017 	ldw	r16,0(sp)
    99f0:	dec00404 	addi	sp,sp,16
    99f4:	f800283a 	ret
    99f8:	00800584 	movi	r2,22
    99fc:	20800015 	stw	r2,0(r4)
    9a00:	00bfffc4 	movi	r2,-1
    9a04:	003ff606 	br	99e0 <_signal_r+0x40>
    9a08:	01402004 	movi	r5,128
    9a0c:	0004fb40 	call	4fb4 <_malloc_r>
    9a10:	8880b715 	stw	r2,732(r17)
    9a14:	10000626 	beq	r2,zero,9a30 <_signal_r+0x90>
    9a18:	01802004 	movi	r6,128
    9a1c:	000b883a 	mov	r5,zero
    9a20:	1009883a 	mov	r4,r2
    9a24:	00059640 	call	5964 <memset>
    9a28:	1007883a 	mov	r3,r2
    9a2c:	003fe806 	br	99d0 <_signal_r+0x30>
    9a30:	00bfffc4 	movi	r2,-1
    9a34:	003fea06 	br	99e0 <_signal_r+0x40>

00009a38 <_raise_r>:
    9a38:	28800830 	cmpltui	r2,r5,32
    9a3c:	10002b26 	beq	r2,zero,9aec <_raise_r+0xb4>
    9a40:	2080b717 	ldw	r2,732(r4)
    9a44:	defffd04 	addi	sp,sp,-12
    9a48:	dc000115 	stw	r16,4(sp)
    9a4c:	dfc00215 	stw	ra,8(sp)
    9a50:	2821883a 	mov	r16,r5
    9a54:	10001026 	beq	r2,zero,9a98 <_raise_r+0x60>
    9a58:	280690ba 	slli	r3,r5,2
    9a5c:	10c5883a 	add	r2,r2,r3
    9a60:	10c00017 	ldw	r3,0(r2)
    9a64:	18000c26 	beq	r3,zero,9a98 <_raise_r+0x60>
    9a68:	19400060 	cmpeqi	r5,r3,1
    9a6c:	28001a1e 	bne	r5,zero,9ad8 <_raise_r+0xa0>
    9a70:	197fffd8 	cmpnei	r5,r3,-1
    9a74:	28001126 	beq	r5,zero,9abc <_raise_r+0x84>
    9a78:	10000015 	stw	zero,0(r2)
    9a7c:	8009883a 	mov	r4,r16
    9a80:	183ee83a 	callr	r3
    9a84:	0005883a 	mov	r2,zero
    9a88:	dfc00217 	ldw	ra,8(sp)
    9a8c:	dc000117 	ldw	r16,4(sp)
    9a90:	dec00304 	addi	sp,sp,12
    9a94:	f800283a 	ret
    9a98:	d9000015 	stw	r4,0(sp)
    9a9c:	0009e900 	call	9e90 <_getpid_r>
    9aa0:	d9000017 	ldw	r4,0(sp)
    9aa4:	800d883a 	mov	r6,r16
    9aa8:	100b883a 	mov	r5,r2
    9aac:	dfc00217 	ldw	ra,8(sp)
    9ab0:	dc000117 	ldw	r16,4(sp)
    9ab4:	dec00304 	addi	sp,sp,12
    9ab8:	0009e301 	jmpi	9e30 <_kill_r>
    9abc:	00800584 	movi	r2,22
    9ac0:	20800015 	stw	r2,0(r4)
    9ac4:	00800044 	movi	r2,1
    9ac8:	dfc00217 	ldw	ra,8(sp)
    9acc:	dc000117 	ldw	r16,4(sp)
    9ad0:	dec00304 	addi	sp,sp,12
    9ad4:	f800283a 	ret
    9ad8:	0005883a 	mov	r2,zero
    9adc:	dfc00217 	ldw	ra,8(sp)
    9ae0:	dc000117 	ldw	r16,4(sp)
    9ae4:	dec00304 	addi	sp,sp,12
    9ae8:	f800283a 	ret
    9aec:	00800584 	movi	r2,22
    9af0:	20800015 	stw	r2,0(r4)
    9af4:	00bfffc4 	movi	r2,-1
    9af8:	f800283a 	ret

00009afc <__sigtramp_r>:
    9afc:	28800830 	cmpltui	r2,r5,32
    9b00:	10002b26 	beq	r2,zero,9bb0 <__sigtramp_r+0xb4>
    9b04:	20c0b717 	ldw	r3,732(r4)
    9b08:	defffd04 	addi	sp,sp,-12
    9b0c:	dc400115 	stw	r17,4(sp)
    9b10:	dc000015 	stw	r16,0(sp)
    9b14:	dfc00215 	stw	ra,8(sp)
    9b18:	2821883a 	mov	r16,r5
    9b1c:	2023883a 	mov	r17,r4
    9b20:	18001326 	beq	r3,zero,9b70 <__sigtramp_r+0x74>
    9b24:	800490ba 	slli	r2,r16,2
    9b28:	1887883a 	add	r3,r3,r2
    9b2c:	18800017 	ldw	r2,0(r3)
    9b30:	10000d26 	beq	r2,zero,9b68 <__sigtramp_r+0x6c>
    9b34:	113fffe0 	cmpeqi	r4,r2,-1
    9b38:	2000191e 	bne	r4,zero,9ba0 <__sigtramp_r+0xa4>
    9b3c:	11000060 	cmpeqi	r4,r2,1
    9b40:	2000151e 	bne	r4,zero,9b98 <__sigtramp_r+0x9c>
    9b44:	18000015 	stw	zero,0(r3)
    9b48:	8009883a 	mov	r4,r16
    9b4c:	103ee83a 	callr	r2
    9b50:	0005883a 	mov	r2,zero
    9b54:	dfc00217 	ldw	ra,8(sp)
    9b58:	dc400117 	ldw	r17,4(sp)
    9b5c:	dc000017 	ldw	r16,0(sp)
    9b60:	dec00304 	addi	sp,sp,12
    9b64:	f800283a 	ret
    9b68:	00800044 	movi	r2,1
    9b6c:	003ff906 	br	9b54 <__sigtramp_r+0x58>
    9b70:	01402004 	movi	r5,128
    9b74:	0004fb40 	call	4fb4 <_malloc_r>
    9b78:	8880b715 	stw	r2,732(r17)
    9b7c:	10000a26 	beq	r2,zero,9ba8 <__sigtramp_r+0xac>
    9b80:	01802004 	movi	r6,128
    9b84:	000b883a 	mov	r5,zero
    9b88:	1009883a 	mov	r4,r2
    9b8c:	00059640 	call	5964 <memset>
    9b90:	1007883a 	mov	r3,r2
    9b94:	003fe306 	br	9b24 <__sigtramp_r+0x28>
    9b98:	008000c4 	movi	r2,3
    9b9c:	003fed06 	br	9b54 <__sigtramp_r+0x58>
    9ba0:	00800084 	movi	r2,2
    9ba4:	003feb06 	br	9b54 <__sigtramp_r+0x58>
    9ba8:	00bfffc4 	movi	r2,-1
    9bac:	003fe906 	br	9b54 <__sigtramp_r+0x58>
    9bb0:	00bfffc4 	movi	r2,-1
    9bb4:	f800283a 	ret

00009bb8 <raise>:
    9bb8:	defffd04 	addi	sp,sp,-12
    9bbc:	dc400115 	stw	r17,4(sp)
    9bc0:	00c00074 	movhi	r3,1
    9bc4:	dfc00215 	stw	ra,8(sp)
    9bc8:	dc000015 	stw	r16,0(sp)
    9bcc:	20800830 	cmpltui	r2,r4,32
    9bd0:	1c48ed17 	ldw	r17,9140(r3)
    9bd4:	10002326 	beq	r2,zero,9c64 <raise+0xac>
    9bd8:	8880b717 	ldw	r2,732(r17)
    9bdc:	2021883a 	mov	r16,r4
    9be0:	10001026 	beq	r2,zero,9c24 <raise+0x6c>
    9be4:	200690ba 	slli	r3,r4,2
    9be8:	10c5883a 	add	r2,r2,r3
    9bec:	10c00017 	ldw	r3,0(r2)
    9bf0:	18000c26 	beq	r3,zero,9c24 <raise+0x6c>
    9bf4:	19400060 	cmpeqi	r5,r3,1
    9bf8:	2800181e 	bne	r5,zero,9c5c <raise+0xa4>
    9bfc:	197fffd8 	cmpnei	r5,r3,-1
    9c00:	28001226 	beq	r5,zero,9c4c <raise+0x94>
    9c04:	10000015 	stw	zero,0(r2)
    9c08:	183ee83a 	callr	r3
    9c0c:	0005883a 	mov	r2,zero
    9c10:	dfc00217 	ldw	ra,8(sp)
    9c14:	dc400117 	ldw	r17,4(sp)
    9c18:	dc000017 	ldw	r16,0(sp)
    9c1c:	dec00304 	addi	sp,sp,12
    9c20:	f800283a 	ret
    9c24:	8809883a 	mov	r4,r17
    9c28:	0009e900 	call	9e90 <_getpid_r>
    9c2c:	800d883a 	mov	r6,r16
    9c30:	100b883a 	mov	r5,r2
    9c34:	8809883a 	mov	r4,r17
    9c38:	dfc00217 	ldw	ra,8(sp)
    9c3c:	dc400117 	ldw	r17,4(sp)
    9c40:	dc000017 	ldw	r16,0(sp)
    9c44:	dec00304 	addi	sp,sp,12
    9c48:	0009e301 	jmpi	9e30 <_kill_r>
    9c4c:	00800584 	movi	r2,22
    9c50:	88800015 	stw	r2,0(r17)
    9c54:	00800044 	movi	r2,1
    9c58:	003fed06 	br	9c10 <raise+0x58>
    9c5c:	0005883a 	mov	r2,zero
    9c60:	003feb06 	br	9c10 <raise+0x58>
    9c64:	00800584 	movi	r2,22
    9c68:	88800015 	stw	r2,0(r17)
    9c6c:	00bfffc4 	movi	r2,-1
    9c70:	003fe706 	br	9c10 <raise+0x58>

00009c74 <signal>:
    9c74:	defffc04 	addi	sp,sp,-16
    9c78:	dc800215 	stw	r18,8(sp)
    9c7c:	00c00074 	movhi	r3,1
    9c80:	dfc00315 	stw	ra,12(sp)
    9c84:	dc400115 	stw	r17,4(sp)
    9c88:	dc000015 	stw	r16,0(sp)
    9c8c:	20800830 	cmpltui	r2,r4,32
    9c90:	1c88ed17 	ldw	r18,9140(r3)
    9c94:	10000e26 	beq	r2,zero,9cd0 <signal+0x5c>
    9c98:	2021883a 	mov	r16,r4
    9c9c:	9100b717 	ldw	r4,732(r18)
    9ca0:	2823883a 	mov	r17,r5
    9ca4:	20000e26 	beq	r4,zero,9ce0 <signal+0x6c>
    9ca8:	802090ba 	slli	r16,r16,2
    9cac:	2421883a 	add	r16,r4,r16
    9cb0:	80800017 	ldw	r2,0(r16)
    9cb4:	84400015 	stw	r17,0(r16)
    9cb8:	dfc00317 	ldw	ra,12(sp)
    9cbc:	dc800217 	ldw	r18,8(sp)
    9cc0:	dc400117 	ldw	r17,4(sp)
    9cc4:	dc000017 	ldw	r16,0(sp)
    9cc8:	dec00404 	addi	sp,sp,16
    9ccc:	f800283a 	ret
    9cd0:	00800584 	movi	r2,22
    9cd4:	90800015 	stw	r2,0(r18)
    9cd8:	00bfffc4 	movi	r2,-1
    9cdc:	003ff606 	br	9cb8 <signal+0x44>
    9ce0:	9009883a 	mov	r4,r18
    9ce4:	01402004 	movi	r5,128
    9ce8:	0004fb40 	call	4fb4 <_malloc_r>
    9cec:	9080b715 	stw	r2,732(r18)
    9cf0:	1009883a 	mov	r4,r2
    9cf4:	10000526 	beq	r2,zero,9d0c <signal+0x98>
    9cf8:	01802004 	movi	r6,128
    9cfc:	000b883a 	mov	r5,zero
    9d00:	00059640 	call	5964 <memset>
    9d04:	1009883a 	mov	r4,r2
    9d08:	003fe706 	br	9ca8 <signal+0x34>
    9d0c:	00bfffc4 	movi	r2,-1
    9d10:	003fe906 	br	9cb8 <signal+0x44>

00009d14 <_init_signal>:
    9d14:	defffe04 	addi	sp,sp,-8
    9d18:	00800074 	movhi	r2,1
    9d1c:	dc000015 	stw	r16,0(sp)
    9d20:	1408ed17 	ldw	r16,9140(r2)
    9d24:	dfc00115 	stw	ra,4(sp)
    9d28:	8080b717 	ldw	r2,732(r16)
    9d2c:	10000526 	beq	r2,zero,9d44 <_init_signal+0x30>
    9d30:	0005883a 	mov	r2,zero
    9d34:	dfc00117 	ldw	ra,4(sp)
    9d38:	dc000017 	ldw	r16,0(sp)
    9d3c:	dec00204 	addi	sp,sp,8
    9d40:	f800283a 	ret
    9d44:	8009883a 	mov	r4,r16
    9d48:	01402004 	movi	r5,128
    9d4c:	0004fb40 	call	4fb4 <_malloc_r>
    9d50:	8080b715 	stw	r2,732(r16)
    9d54:	1009883a 	mov	r4,r2
    9d58:	10000426 	beq	r2,zero,9d6c <_init_signal+0x58>
    9d5c:	01802004 	movi	r6,128
    9d60:	000b883a 	mov	r5,zero
    9d64:	00059640 	call	5964 <memset>
    9d68:	003ff106 	br	9d30 <_init_signal+0x1c>
    9d6c:	00bfffc4 	movi	r2,-1
    9d70:	003ff006 	br	9d34 <_init_signal+0x20>

00009d74 <__sigtramp>:
    9d74:	defffd04 	addi	sp,sp,-12
    9d78:	dc400115 	stw	r17,4(sp)
    9d7c:	00c00074 	movhi	r3,1
    9d80:	dfc00215 	stw	ra,8(sp)
    9d84:	dc000015 	stw	r16,0(sp)
    9d88:	20800830 	cmpltui	r2,r4,32
    9d8c:	1c48ed17 	ldw	r17,9140(r3)
    9d90:	10002526 	beq	r2,zero,9e28 <__sigtramp+0xb4>
    9d94:	88c0b717 	ldw	r3,732(r17)
    9d98:	2021883a 	mov	r16,r4
    9d9c:	18001326 	beq	r3,zero,9dec <__sigtramp+0x78>
    9da0:	800890ba 	slli	r4,r16,2
    9da4:	1907883a 	add	r3,r3,r4
    9da8:	18800017 	ldw	r2,0(r3)
    9dac:	10000d26 	beq	r2,zero,9de4 <__sigtramp+0x70>
    9db0:	113fffe0 	cmpeqi	r4,r2,-1
    9db4:	20001a1e 	bne	r4,zero,9e20 <__sigtramp+0xac>
    9db8:	11000060 	cmpeqi	r4,r2,1
    9dbc:	2000161e 	bne	r4,zero,9e18 <__sigtramp+0xa4>
    9dc0:	18000015 	stw	zero,0(r3)
    9dc4:	8009883a 	mov	r4,r16
    9dc8:	103ee83a 	callr	r2
    9dcc:	0005883a 	mov	r2,zero
    9dd0:	dfc00217 	ldw	ra,8(sp)
    9dd4:	dc400117 	ldw	r17,4(sp)
    9dd8:	dc000017 	ldw	r16,0(sp)
    9ddc:	dec00304 	addi	sp,sp,12
    9de0:	f800283a 	ret
    9de4:	00800044 	movi	r2,1
    9de8:	003ff906 	br	9dd0 <__sigtramp+0x5c>
    9dec:	01402004 	movi	r5,128
    9df0:	8809883a 	mov	r4,r17
    9df4:	0004fb40 	call	4fb4 <_malloc_r>
    9df8:	8880b715 	stw	r2,732(r17)
    9dfc:	10000a26 	beq	r2,zero,9e28 <__sigtramp+0xb4>
    9e00:	01802004 	movi	r6,128
    9e04:	000b883a 	mov	r5,zero
    9e08:	1009883a 	mov	r4,r2
    9e0c:	00059640 	call	5964 <memset>
    9e10:	1007883a 	mov	r3,r2
    9e14:	003fe206 	br	9da0 <__sigtramp+0x2c>
    9e18:	008000c4 	movi	r2,3
    9e1c:	003fec06 	br	9dd0 <__sigtramp+0x5c>
    9e20:	00800084 	movi	r2,2
    9e24:	003fea06 	br	9dd0 <__sigtramp+0x5c>
    9e28:	00bfffc4 	movi	r2,-1
    9e2c:	003fe806 	br	9dd0 <__sigtramp+0x5c>

00009e30 <_kill_r>:
    9e30:	2807883a 	mov	r3,r5
    9e34:	defffe04 	addi	sp,sp,-8
    9e38:	dc000015 	stw	r16,0(sp)
    9e3c:	00800074 	movhi	r2,1
    9e40:	300b883a 	mov	r5,r6
    9e44:	2021883a 	mov	r16,r4
    9e48:	1809883a 	mov	r4,r3
    9e4c:	dfc00115 	stw	ra,4(sp)
    9e50:	10102115 	stw	zero,16516(r2)
    9e54:	000d4240 	call	d424 <kill>
    9e58:	10ffffd8 	cmpnei	r3,r2,-1
    9e5c:	18000426 	beq	r3,zero,9e70 <_kill_r+0x40>
    9e60:	dfc00117 	ldw	ra,4(sp)
    9e64:	dc000017 	ldw	r16,0(sp)
    9e68:	dec00204 	addi	sp,sp,8
    9e6c:	f800283a 	ret
    9e70:	00c00074 	movhi	r3,1
    9e74:	18d02117 	ldw	r3,16516(r3)
    9e78:	183ff926 	beq	r3,zero,9e60 <_kill_r+0x30>
    9e7c:	80c00015 	stw	r3,0(r16)
    9e80:	dfc00117 	ldw	ra,4(sp)
    9e84:	dc000017 	ldw	r16,0(sp)
    9e88:	dec00204 	addi	sp,sp,8
    9e8c:	f800283a 	ret

00009e90 <_getpid_r>:
    9e90:	000d2e81 	jmpi	d2e8 <getpid>

00009e94 <__udivdi3>:
    9e94:	defff504 	addi	sp,sp,-44
    9e98:	dcc00415 	stw	r19,16(sp)
    9e9c:	dc000115 	stw	r16,4(sp)
    9ea0:	dfc00a15 	stw	ra,40(sp)
    9ea4:	df000915 	stw	fp,36(sp)
    9ea8:	ddc00815 	stw	r23,32(sp)
    9eac:	dd800715 	stw	r22,28(sp)
    9eb0:	dd400615 	stw	r21,24(sp)
    9eb4:	dd000515 	stw	r20,20(sp)
    9eb8:	dc800315 	stw	r18,12(sp)
    9ebc:	dc400215 	stw	r17,8(sp)
    9ec0:	2027883a 	mov	r19,r4
    9ec4:	2821883a 	mov	r16,r5
    9ec8:	3800411e 	bne	r7,zero,9fd0 <__udivdi3+0x13c>
    9ecc:	3829883a 	mov	r20,r7
    9ed0:	3023883a 	mov	r17,r6
    9ed4:	2025883a 	mov	r18,r4
    9ed8:	29805d2e 	bgeu	r5,r6,a050 <__udivdi3+0x1bc>
    9edc:	00bfffd4 	movui	r2,65535
    9ee0:	282b883a 	mov	r21,r5
    9ee4:	1180a02e 	bgeu	r2,r6,a168 <__udivdi3+0x2d4>
    9ee8:	00804034 	movhi	r2,256
    9eec:	30813636 	bltu	r6,r2,a3c8 <__udivdi3+0x534>
    9ef0:	3006d63a 	srli	r3,r6,24
    9ef4:	05000604 	movi	r20,24
    9ef8:	00800074 	movhi	r2,1
    9efc:	1885883a 	add	r2,r3,r2
    9f00:	10817603 	ldbu	r2,1496(r2)
    9f04:	00c00804 	movi	r3,32
    9f08:	1505883a 	add	r2,r2,r20
    9f0c:	1889c83a 	sub	r4,r3,r2
    9f10:	18800526 	beq	r3,r2,9f28 <__udivdi3+0x94>
    9f14:	8120983a 	sll	r16,r16,r4
    9f18:	9884d83a 	srl	r2,r19,r2
    9f1c:	3122983a 	sll	r17,r6,r4
    9f20:	9924983a 	sll	r18,r19,r4
    9f24:	142ab03a 	or	r21,r2,r16
    9f28:	882cd43a 	srli	r22,r17,16
    9f2c:	a809883a 	mov	r4,r21
    9f30:	8d3fffcc 	andi	r20,r17,65535
    9f34:	b00b883a 	mov	r5,r22
    9f38:	000aab00 	call	aab0 <__umodsi3>
    9f3c:	a809883a 	mov	r4,r21
    9f40:	b00b883a 	mov	r5,r22
    9f44:	1027883a 	mov	r19,r2
    9f48:	000aa4c0 	call	aa4c <__udivsi3>
    9f4c:	9826943a 	slli	r19,r19,16
    9f50:	9008d43a 	srli	r4,r18,16
    9f54:	1021883a 	mov	r16,r2
    9f58:	a085383a 	mul	r2,r20,r2
    9f5c:	9908b03a 	or	r4,r19,r4
    9f60:	2080052e 	bgeu	r4,r2,9f78 <__udivdi3+0xe4>
    9f64:	2449883a 	add	r4,r4,r17
    9f68:	80ffffc4 	addi	r3,r16,-1
    9f6c:	24400136 	bltu	r4,r17,9f74 <__udivdi3+0xe0>
    9f70:	20812636 	bltu	r4,r2,a40c <__udivdi3+0x578>
    9f74:	1821883a 	mov	r16,r3
    9f78:	20a7c83a 	sub	r19,r4,r2
    9f7c:	9809883a 	mov	r4,r19
    9f80:	b00b883a 	mov	r5,r22
    9f84:	000aab00 	call	aab0 <__umodsi3>
    9f88:	9809883a 	mov	r4,r19
    9f8c:	b00b883a 	mov	r5,r22
    9f90:	1027883a 	mov	r19,r2
    9f94:	9826943a 	slli	r19,r19,16
    9f98:	000aa4c0 	call	aa4c <__udivsi3>
    9f9c:	a0a9383a 	mul	r20,r20,r2
    9fa0:	94bfffcc 	andi	r18,r18,65535
    9fa4:	9ca4b03a 	or	r18,r19,r18
    9fa8:	9500052e 	bgeu	r18,r20,9fc0 <__udivdi3+0x12c>
    9fac:	8ca5883a 	add	r18,r17,r18
    9fb0:	10ffffc4 	addi	r3,r2,-1
    9fb4:	94400136 	bltu	r18,r17,9fbc <__udivdi3+0x128>
    9fb8:	95011236 	bltu	r18,r20,a404 <__udivdi3+0x570>
    9fbc:	1805883a 	mov	r2,r3
    9fc0:	8020943a 	slli	r16,r16,16
    9fc4:	0007883a 	mov	r3,zero
    9fc8:	8084b03a 	or	r2,r16,r2
    9fcc:	00000306 	br	9fdc <__udivdi3+0x148>
    9fd0:	29c00e2e 	bgeu	r5,r7,a00c <__udivdi3+0x178>
    9fd4:	0007883a 	mov	r3,zero
    9fd8:	0005883a 	mov	r2,zero
    9fdc:	dfc00a17 	ldw	ra,40(sp)
    9fe0:	df000917 	ldw	fp,36(sp)
    9fe4:	ddc00817 	ldw	r23,32(sp)
    9fe8:	dd800717 	ldw	r22,28(sp)
    9fec:	dd400617 	ldw	r21,24(sp)
    9ff0:	dd000517 	ldw	r20,20(sp)
    9ff4:	dcc00417 	ldw	r19,16(sp)
    9ff8:	dc800317 	ldw	r18,12(sp)
    9ffc:	dc400217 	ldw	r17,8(sp)
    a000:	dc000117 	ldw	r16,4(sp)
    a004:	dec00b04 	addi	sp,sp,44
    a008:	f800283a 	ret
    a00c:	00bfffd4 	movui	r2,65535
    a010:	11c05a2e 	bgeu	r2,r7,a17c <__udivdi3+0x2e8>
    a014:	00804034 	movhi	r2,256
    a018:	3880dd36 	bltu	r7,r2,a390 <__udivdi3+0x4fc>
    a01c:	3804d63a 	srli	r2,r7,24
    a020:	01000604 	movi	r4,24
    a024:	00c00074 	movhi	r3,1
    a028:	10c7883a 	add	r3,r2,r3
    a02c:	18817603 	ldbu	r2,1496(r3)
    a030:	00c00804 	movi	r3,32
    a034:	1105883a 	add	r2,r2,r4
    a038:	18abc83a 	sub	r21,r3,r2
    a03c:	1880861e 	bne	r3,r2,a258 <__udivdi3+0x3c4>
    a040:	3c00d836 	bltu	r7,r16,a3a4 <__udivdi3+0x510>
    a044:	9985403a 	cmpgeu	r2,r19,r6
    a048:	0007883a 	mov	r3,zero
    a04c:	003fe306 	br	9fdc <__udivdi3+0x148>
    a050:	3000041e 	bne	r6,zero,a064 <__udivdi3+0x1d0>
    a054:	000b883a 	mov	r5,zero
    a058:	01000044 	movi	r4,1
    a05c:	000aa4c0 	call	aa4c <__udivsi3>
    a060:	1023883a 	mov	r17,r2
    a064:	00bfffd4 	movui	r2,65535
    a068:	14403a2e 	bgeu	r2,r17,a154 <__udivdi3+0x2c0>
    a06c:	00804034 	movhi	r2,256
    a070:	8880d236 	bltu	r17,r2,a3bc <__udivdi3+0x528>
    a074:	8806d63a 	srli	r3,r17,24
    a078:	05000604 	movi	r20,24
    a07c:	00800074 	movhi	r2,1
    a080:	1885883a 	add	r2,r3,r2
    a084:	10817603 	ldbu	r2,1496(r2)
    a088:	00c00804 	movi	r3,32
    a08c:	1505883a 	add	r2,r2,r20
    a090:	188dc83a 	sub	r6,r3,r2
    a094:	18803e1e 	bne	r3,r2,a190 <__udivdi3+0x2fc>
    a098:	882ad43a 	srli	r21,r17,16
    a09c:	8461c83a 	sub	r16,r16,r17
    a0a0:	8cffffcc 	andi	r19,r17,65535
    a0a4:	00c00044 	movi	r3,1
    a0a8:	8009883a 	mov	r4,r16
    a0ac:	a80b883a 	mov	r5,r21
    a0b0:	d8c00015 	stw	r3,0(sp)
    a0b4:	000aab00 	call	aab0 <__umodsi3>
    a0b8:	8009883a 	mov	r4,r16
    a0bc:	a80b883a 	mov	r5,r21
    a0c0:	1021883a 	mov	r16,r2
    a0c4:	000aa4c0 	call	aa4c <__udivsi3>
    a0c8:	8020943a 	slli	r16,r16,16
    a0cc:	9008d43a 	srli	r4,r18,16
    a0d0:	1029883a 	mov	r20,r2
    a0d4:	14c5383a 	mul	r2,r2,r19
    a0d8:	8108b03a 	or	r4,r16,r4
    a0dc:	d8c00017 	ldw	r3,0(sp)
    a0e0:	2080052e 	bgeu	r4,r2,a0f8 <__udivdi3+0x264>
    a0e4:	2449883a 	add	r4,r4,r17
    a0e8:	a17fffc4 	addi	r5,r20,-1
    a0ec:	24400136 	bltu	r4,r17,a0f4 <__udivdi3+0x260>
    a0f0:	2080c936 	bltu	r4,r2,a418 <__udivdi3+0x584>
    a0f4:	2829883a 	mov	r20,r5
    a0f8:	20a1c83a 	sub	r16,r4,r2
    a0fc:	8009883a 	mov	r4,r16
    a100:	a80b883a 	mov	r5,r21
    a104:	d8c00015 	stw	r3,0(sp)
    a108:	000aab00 	call	aab0 <__umodsi3>
    a10c:	8009883a 	mov	r4,r16
    a110:	a80b883a 	mov	r5,r21
    a114:	1021883a 	mov	r16,r2
    a118:	8020943a 	slli	r16,r16,16
    a11c:	000aa4c0 	call	aa4c <__udivsi3>
    a120:	14e7383a 	mul	r19,r2,r19
    a124:	94bfffcc 	andi	r18,r18,65535
    a128:	84a4b03a 	or	r18,r16,r18
    a12c:	d8c00017 	ldw	r3,0(sp)
    a130:	94c0052e 	bgeu	r18,r19,a148 <__udivdi3+0x2b4>
    a134:	8ca5883a 	add	r18,r17,r18
    a138:	113fffc4 	addi	r4,r2,-1
    a13c:	94400136 	bltu	r18,r17,a144 <__udivdi3+0x2b0>
    a140:	94c0ae36 	bltu	r18,r19,a3fc <__udivdi3+0x568>
    a144:	2005883a 	mov	r2,r4
    a148:	a00c943a 	slli	r6,r20,16
    a14c:	3084b03a 	or	r2,r6,r2
    a150:	003fa206 	br	9fdc <__udivdi3+0x148>
    a154:	88804030 	cmpltui	r2,r17,256
    a158:	10009e1e 	bne	r2,zero,a3d4 <__udivdi3+0x540>
    a15c:	8806d23a 	srli	r3,r17,8
    a160:	05000204 	movi	r20,8
    a164:	003fc506 	br	a07c <__udivdi3+0x1e8>
    a168:	30804030 	cmpltui	r2,r6,256
    a16c:	10008b1e 	bne	r2,zero,a39c <__udivdi3+0x508>
    a170:	3006d23a 	srli	r3,r6,8
    a174:	05000204 	movi	r20,8
    a178:	003f5f06 	br	9ef8 <__udivdi3+0x64>
    a17c:	38804030 	cmpltui	r2,r7,256
    a180:	10008b1e 	bne	r2,zero,a3b0 <__udivdi3+0x51c>
    a184:	3804d23a 	srli	r2,r7,8
    a188:	01000204 	movi	r4,8
    a18c:	003fa506 	br	a024 <__udivdi3+0x190>
    a190:	89a2983a 	sll	r17,r17,r6
    a194:	80acd83a 	srl	r22,r16,r2
    a198:	81a0983a 	sll	r16,r16,r6
    a19c:	882ad43a 	srli	r21,r17,16
    a1a0:	9884d83a 	srl	r2,r19,r2
    a1a4:	b009883a 	mov	r4,r22
    a1a8:	a80b883a 	mov	r5,r21
    a1ac:	99a4983a 	sll	r18,r19,r6
    a1b0:	1428b03a 	or	r20,r2,r16
    a1b4:	000aab00 	call	aab0 <__umodsi3>
    a1b8:	b009883a 	mov	r4,r22
    a1bc:	a80b883a 	mov	r5,r21
    a1c0:	1021883a 	mov	r16,r2
    a1c4:	000aa4c0 	call	aa4c <__udivsi3>
    a1c8:	8008943a 	slli	r4,r16,16
    a1cc:	a00ad43a 	srli	r5,r20,16
    a1d0:	8cffffcc 	andi	r19,r17,65535
    a1d4:	98a1383a 	mul	r16,r19,r2
    a1d8:	2148b03a 	or	r4,r4,r5
    a1dc:	102d883a 	mov	r22,r2
    a1e0:	2400062e 	bgeu	r4,r16,a1fc <__udivdi3+0x368>
    a1e4:	2449883a 	add	r4,r4,r17
    a1e8:	10bfffc4 	addi	r2,r2,-1
    a1ec:	24408136 	bltu	r4,r17,a3f4 <__udivdi3+0x560>
    a1f0:	2400802e 	bgeu	r4,r16,a3f4 <__udivdi3+0x560>
    a1f4:	b5bfff84 	addi	r22,r22,-2
    a1f8:	2449883a 	add	r4,r4,r17
    a1fc:	2421c83a 	sub	r16,r4,r16
    a200:	8009883a 	mov	r4,r16
    a204:	a80b883a 	mov	r5,r21
    a208:	000aab00 	call	aab0 <__umodsi3>
    a20c:	8009883a 	mov	r4,r16
    a210:	a80b883a 	mov	r5,r21
    a214:	1021883a 	mov	r16,r2
    a218:	8020943a 	slli	r16,r16,16
    a21c:	000aa4c0 	call	aa4c <__udivsi3>
    a220:	9889383a 	mul	r4,r19,r2
    a224:	a53fffcc 	andi	r20,r20,65535
    a228:	8520b03a 	or	r16,r16,r20
    a22c:	8100062e 	bgeu	r16,r4,a248 <__udivdi3+0x3b4>
    a230:	8461883a 	add	r16,r16,r17
    a234:	10ffffc4 	addi	r3,r2,-1
    a238:	84406a36 	bltu	r16,r17,a3e4 <__udivdi3+0x550>
    a23c:	8100692e 	bgeu	r16,r4,a3e4 <__udivdi3+0x550>
    a240:	10bfff84 	addi	r2,r2,-2
    a244:	8461883a 	add	r16,r16,r17
    a248:	b006943a 	slli	r3,r22,16
    a24c:	8121c83a 	sub	r16,r16,r4
    a250:	1886b03a 	or	r3,r3,r2
    a254:	003f9406 	br	a0a8 <__udivdi3+0x214>
    a258:	30acd83a 	srl	r22,r6,r2
    a25c:	3d4e983a 	sll	r7,r7,r21
    a260:	80a4d83a 	srl	r18,r16,r2
    a264:	8546983a 	sll	r3,r16,r21
    a268:	b1ecb03a 	or	r22,r22,r7
    a26c:	b038d43a 	srli	fp,r22,16
    a270:	9884d83a 	srl	r2,r19,r2
    a274:	9009883a 	mov	r4,r18
    a278:	e00b883a 	mov	r5,fp
    a27c:	10e2b03a 	or	r17,r2,r3
    a280:	3568983a 	sll	r20,r6,r21
    a284:	000aab00 	call	aab0 <__umodsi3>
    a288:	9009883a 	mov	r4,r18
    a28c:	e00b883a 	mov	r5,fp
    a290:	1025883a 	mov	r18,r2
    a294:	000aa4c0 	call	aa4c <__udivsi3>
    a298:	9008943a 	slli	r4,r18,16
    a29c:	8806d43a 	srli	r3,r17,16
    a2a0:	b5ffffcc 	andi	r23,r22,65535
    a2a4:	b8a5383a 	mul	r18,r23,r2
    a2a8:	20c8b03a 	or	r4,r4,r3
    a2ac:	1021883a 	mov	r16,r2
    a2b0:	2480062e 	bgeu	r4,r18,a2cc <__udivdi3+0x438>
    a2b4:	2589883a 	add	r4,r4,r22
    a2b8:	10bfffc4 	addi	r2,r2,-1
    a2bc:	25804b36 	bltu	r4,r22,a3ec <__udivdi3+0x558>
    a2c0:	24804a2e 	bgeu	r4,r18,a3ec <__udivdi3+0x558>
    a2c4:	843fff84 	addi	r16,r16,-2
    a2c8:	2589883a 	add	r4,r4,r22
    a2cc:	24a5c83a 	sub	r18,r4,r18
    a2d0:	9009883a 	mov	r4,r18
    a2d4:	e00b883a 	mov	r5,fp
    a2d8:	000aab00 	call	aab0 <__umodsi3>
    a2dc:	9009883a 	mov	r4,r18
    a2e0:	e00b883a 	mov	r5,fp
    a2e4:	1025883a 	mov	r18,r2
    a2e8:	9024943a 	slli	r18,r18,16
    a2ec:	000aa4c0 	call	aa4c <__udivsi3>
    a2f0:	b8af383a 	mul	r23,r23,r2
    a2f4:	8c7fffcc 	andi	r17,r17,65535
    a2f8:	9462b03a 	or	r17,r18,r17
    a2fc:	8dc0062e 	bgeu	r17,r23,a318 <__udivdi3+0x484>
    a300:	8da3883a 	add	r17,r17,r22
    a304:	10ffffc4 	addi	r3,r2,-1
    a308:	8d803436 	bltu	r17,r22,a3dc <__udivdi3+0x548>
    a30c:	8dc0332e 	bgeu	r17,r23,a3dc <__udivdi3+0x548>
    a310:	10bfff84 	addi	r2,r2,-2
    a314:	8da3883a 	add	r17,r17,r22
    a318:	8020943a 	slli	r16,r16,16
    a31c:	10ffffcc 	andi	r3,r2,65535
    a320:	a00ed43a 	srli	r7,r20,16
    a324:	8084b03a 	or	r2,r16,r2
    a328:	1008d43a 	srli	r4,r2,16
    a32c:	a1bfffcc 	andi	r6,r20,65535
    a330:	1991383a 	mul	r8,r3,r6
    a334:	218d383a 	mul	r6,r4,r6
    a338:	19c7383a 	mul	r3,r3,r7
    a33c:	400ad43a 	srli	r5,r8,16
    a340:	21c9383a 	mul	r4,r4,r7
    a344:	1987883a 	add	r3,r3,r6
    a348:	28c7883a 	add	r3,r5,r3
    a34c:	8de3c83a 	sub	r17,r17,r23
    a350:	1980022e 	bgeu	r3,r6,a35c <__udivdi3+0x4c8>
    a354:	01400074 	movhi	r5,1
    a358:	2149883a 	add	r4,r4,r5
    a35c:	180ad43a 	srli	r5,r3,16
    a360:	2909883a 	add	r4,r5,r4
    a364:	89000836 	bltu	r17,r4,a388 <__udivdi3+0x4f4>
    a368:	89000226 	beq	r17,r4,a374 <__udivdi3+0x4e0>
    a36c:	0007883a 	mov	r3,zero
    a370:	003f1a06 	br	9fdc <__udivdi3+0x148>
    a374:	1806943a 	slli	r3,r3,16
    a378:	9d4c983a 	sll	r6,r19,r21
    a37c:	423fffcc 	andi	r8,r8,65535
    a380:	1a07883a 	add	r3,r3,r8
    a384:	30fff92e 	bgeu	r6,r3,a36c <__udivdi3+0x4d8>
    a388:	10bfffc4 	addi	r2,r2,-1
    a38c:	003ff706 	br	a36c <__udivdi3+0x4d8>
    a390:	3804d43a 	srli	r2,r7,16
    a394:	01000404 	movi	r4,16
    a398:	003f2206 	br	a024 <__udivdi3+0x190>
    a39c:	3007883a 	mov	r3,r6
    a3a0:	003ed506 	br	9ef8 <__udivdi3+0x64>
    a3a4:	0007883a 	mov	r3,zero
    a3a8:	00800044 	movi	r2,1
    a3ac:	003f0b06 	br	9fdc <__udivdi3+0x148>
    a3b0:	3805883a 	mov	r2,r7
    a3b4:	0009883a 	mov	r4,zero
    a3b8:	003f1a06 	br	a024 <__udivdi3+0x190>
    a3bc:	8806d43a 	srli	r3,r17,16
    a3c0:	05000404 	movi	r20,16
    a3c4:	003f2d06 	br	a07c <__udivdi3+0x1e8>
    a3c8:	3006d43a 	srli	r3,r6,16
    a3cc:	05000404 	movi	r20,16
    a3d0:	003ec906 	br	9ef8 <__udivdi3+0x64>
    a3d4:	8807883a 	mov	r3,r17
    a3d8:	003f2806 	br	a07c <__udivdi3+0x1e8>
    a3dc:	1805883a 	mov	r2,r3
    a3e0:	003fcd06 	br	a318 <__udivdi3+0x484>
    a3e4:	1805883a 	mov	r2,r3
    a3e8:	003f9706 	br	a248 <__udivdi3+0x3b4>
    a3ec:	1021883a 	mov	r16,r2
    a3f0:	003fb606 	br	a2cc <__udivdi3+0x438>
    a3f4:	102d883a 	mov	r22,r2
    a3f8:	003f8006 	br	a1fc <__udivdi3+0x368>
    a3fc:	10bfff84 	addi	r2,r2,-2
    a400:	003f5106 	br	a148 <__udivdi3+0x2b4>
    a404:	10bfff84 	addi	r2,r2,-2
    a408:	003eed06 	br	9fc0 <__udivdi3+0x12c>
    a40c:	843fff84 	addi	r16,r16,-2
    a410:	2449883a 	add	r4,r4,r17
    a414:	003ed806 	br	9f78 <__udivdi3+0xe4>
    a418:	a53fff84 	addi	r20,r20,-2
    a41c:	2449883a 	add	r4,r4,r17
    a420:	003f3506 	br	a0f8 <__udivdi3+0x264>

0000a424 <__umoddi3>:
    a424:	defff504 	addi	sp,sp,-44
    a428:	dc400215 	stw	r17,8(sp)
    a42c:	dc000115 	stw	r16,4(sp)
    a430:	dfc00a15 	stw	ra,40(sp)
    a434:	df000915 	stw	fp,36(sp)
    a438:	ddc00815 	stw	r23,32(sp)
    a43c:	dd800715 	stw	r22,28(sp)
    a440:	dd400615 	stw	r21,24(sp)
    a444:	dd000515 	stw	r20,20(sp)
    a448:	dcc00415 	stw	r19,16(sp)
    a44c:	dc800315 	stw	r18,12(sp)
    a450:	2823883a 	mov	r17,r5
    a454:	2021883a 	mov	r16,r4
    a458:	3800371e 	bne	r7,zero,a538 <__umoddi3+0x114>
    a45c:	3825883a 	mov	r18,r7
    a460:	3029883a 	mov	r20,r6
    a464:	2027883a 	mov	r19,r4
    a468:	2980572e 	bgeu	r5,r6,a5c8 <__umoddi3+0x1a4>
    a46c:	00bfffd4 	movui	r2,65535
    a470:	282b883a 	mov	r21,r5
    a474:	1180922e 	bgeu	r2,r6,a6c0 <__umoddi3+0x29c>
    a478:	00804034 	movhi	r2,256
    a47c:	30812036 	bltu	r6,r2,a900 <__umoddi3+0x4dc>
    a480:	3006d63a 	srli	r3,r6,24
    a484:	04800604 	movi	r18,24
    a488:	00800074 	movhi	r2,1
    a48c:	1885883a 	add	r2,r3,r2
    a490:	10817603 	ldbu	r2,1496(r2)
    a494:	00c00804 	movi	r3,32
    a498:	1485883a 	add	r2,r2,r18
    a49c:	18a5c83a 	sub	r18,r3,r2
    a4a0:	18800526 	beq	r3,r2,a4b8 <__umoddi3+0x94>
    a4a4:	8ca2983a 	sll	r17,r17,r18
    a4a8:	8084d83a 	srl	r2,r16,r2
    a4ac:	34a8983a 	sll	r20,r6,r18
    a4b0:	84a6983a 	sll	r19,r16,r18
    a4b4:	146ab03a 	or	r21,r2,r17
    a4b8:	a02cd43a 	srli	r22,r20,16
    a4bc:	a809883a 	mov	r4,r21
    a4c0:	a43fffcc 	andi	r16,r20,65535
    a4c4:	b00b883a 	mov	r5,r22
    a4c8:	000aab00 	call	aab0 <__umodsi3>
    a4cc:	a809883a 	mov	r4,r21
    a4d0:	b00b883a 	mov	r5,r22
    a4d4:	1023883a 	mov	r17,r2
    a4d8:	000aa4c0 	call	aa4c <__udivsi3>
    a4dc:	8822943a 	slli	r17,r17,16
    a4e0:	9808d43a 	srli	r4,r19,16
    a4e4:	80ab383a 	mul	r21,r16,r2
    a4e8:	8908b03a 	or	r4,r17,r4
    a4ec:	2540042e 	bgeu	r4,r21,a500 <__umoddi3+0xdc>
    a4f0:	2509883a 	add	r4,r4,r20
    a4f4:	25000236 	bltu	r4,r20,a500 <__umoddi3+0xdc>
    a4f8:	2540012e 	bgeu	r4,r21,a500 <__umoddi3+0xdc>
    a4fc:	2509883a 	add	r4,r4,r20
    a500:	256bc83a 	sub	r21,r4,r21
    a504:	b00b883a 	mov	r5,r22
    a508:	a809883a 	mov	r4,r21
    a50c:	000aab00 	call	aab0 <__umodsi3>
    a510:	1023883a 	mov	r17,r2
    a514:	b00b883a 	mov	r5,r22
    a518:	a809883a 	mov	r4,r21
    a51c:	000aa4c0 	call	aa4c <__udivsi3>
    a520:	8822943a 	slli	r17,r17,16
    a524:	8085383a 	mul	r2,r16,r2
    a528:	98ffffcc 	andi	r3,r19,65535
    a52c:	88c6b03a 	or	r3,r17,r3
    a530:	18805a2e 	bgeu	r3,r2,a69c <__umoddi3+0x278>
    a534:	00005506 	br	a68c <__umoddi3+0x268>
    a538:	2005883a 	mov	r2,r4
    a53c:	29c00d2e 	bgeu	r5,r7,a574 <__umoddi3+0x150>
    a540:	2807883a 	mov	r3,r5
    a544:	dfc00a17 	ldw	ra,40(sp)
    a548:	df000917 	ldw	fp,36(sp)
    a54c:	ddc00817 	ldw	r23,32(sp)
    a550:	dd800717 	ldw	r22,28(sp)
    a554:	dd400617 	ldw	r21,24(sp)
    a558:	dd000517 	ldw	r20,20(sp)
    a55c:	dcc00417 	ldw	r19,16(sp)
    a560:	dc800317 	ldw	r18,12(sp)
    a564:	dc400217 	ldw	r17,8(sp)
    a568:	dc000117 	ldw	r16,4(sp)
    a56c:	dec00b04 	addi	sp,sp,44
    a570:	f800283a 	ret
    a574:	013fffd4 	movui	r4,65535
    a578:	2807883a 	mov	r3,r5
    a57c:	21c0552e 	bgeu	r4,r7,a6d4 <__umoddi3+0x2b0>
    a580:	01004034 	movhi	r4,256
    a584:	3900e336 	bltu	r7,r4,a914 <__umoddi3+0x4f0>
    a588:	3808d63a 	srli	r4,r7,24
    a58c:	02000604 	movi	r8,24
    a590:	01400074 	movhi	r5,1
    a594:	214b883a 	add	r5,r4,r5
    a598:	2d417603 	ldbu	r21,1496(r5)
    a59c:	01000804 	movi	r4,32
    a5a0:	aa2b883a 	add	r21,r21,r8
    a5a4:	2569c83a 	sub	r20,r4,r21
    a5a8:	25404f1e 	bne	r4,r21,a6e8 <__umoddi3+0x2c4>
    a5ac:	3c400136 	bltu	r7,r17,a5b4 <__umoddi3+0x190>
    a5b0:	81bfe436 	bltu	r16,r6,a544 <__umoddi3+0x120>
    a5b4:	8185c83a 	sub	r2,r16,r6
    a5b8:	89cfc83a 	sub	r7,r17,r7
    a5bc:	8087803a 	cmpltu	r3,r16,r2
    a5c0:	38c7c83a 	sub	r3,r7,r3
    a5c4:	003fdf06 	br	a544 <__umoddi3+0x120>
    a5c8:	3000041e 	bne	r6,zero,a5dc <__umoddi3+0x1b8>
    a5cc:	000b883a 	mov	r5,zero
    a5d0:	01000044 	movi	r4,1
    a5d4:	000aa4c0 	call	aa4c <__udivsi3>
    a5d8:	1029883a 	mov	r20,r2
    a5dc:	00bfffd4 	movui	r2,65535
    a5e0:	1500322e 	bgeu	r2,r20,a6ac <__umoddi3+0x288>
    a5e4:	00804034 	movhi	r2,256
    a5e8:	a080cd36 	bltu	r20,r2,a920 <__umoddi3+0x4fc>
    a5ec:	a006d63a 	srli	r3,r20,24
    a5f0:	04800604 	movi	r18,24
    a5f4:	00800074 	movhi	r2,1
    a5f8:	1885883a 	add	r2,r3,r2
    a5fc:	15817603 	ldbu	r22,1496(r2)
    a600:	00800804 	movi	r2,32
    a604:	b4ad883a 	add	r22,r22,r18
    a608:	15a5c83a 	sub	r18,r2,r22
    a60c:	15808a1e 	bne	r2,r22,a838 <__umoddi3+0x414>
    a610:	a02ed43a 	srli	r23,r20,16
    a614:	8d23c83a 	sub	r17,r17,r20
    a618:	a57fffcc 	andi	r21,r20,65535
    a61c:	b80b883a 	mov	r5,r23
    a620:	8809883a 	mov	r4,r17
    a624:	000aab00 	call	aab0 <__umodsi3>
    a628:	8809883a 	mov	r4,r17
    a62c:	b80b883a 	mov	r5,r23
    a630:	102d883a 	mov	r22,r2
    a634:	000aa4c0 	call	aa4c <__udivsi3>
    a638:	b02c943a 	slli	r22,r22,16
    a63c:	9808d43a 	srli	r4,r19,16
    a640:	1561383a 	mul	r16,r2,r21
    a644:	b108b03a 	or	r4,r22,r4
    a648:	2400032e 	bgeu	r4,r16,a658 <__umoddi3+0x234>
    a64c:	2509883a 	add	r4,r4,r20
    a650:	25000136 	bltu	r4,r20,a658 <__umoddi3+0x234>
    a654:	2400be36 	bltu	r4,r16,a950 <__umoddi3+0x52c>
    a658:	2421c83a 	sub	r16,r4,r16
    a65c:	b80b883a 	mov	r5,r23
    a660:	8009883a 	mov	r4,r16
    a664:	000aab00 	call	aab0 <__umodsi3>
    a668:	1023883a 	mov	r17,r2
    a66c:	b80b883a 	mov	r5,r23
    a670:	8009883a 	mov	r4,r16
    a674:	000aa4c0 	call	aa4c <__udivsi3>
    a678:	8822943a 	slli	r17,r17,16
    a67c:	1545383a 	mul	r2,r2,r21
    a680:	98ffffcc 	andi	r3,r19,65535
    a684:	88c6b03a 	or	r3,r17,r3
    a688:	1880042e 	bgeu	r3,r2,a69c <__umoddi3+0x278>
    a68c:	1d07883a 	add	r3,r3,r20
    a690:	1d000236 	bltu	r3,r20,a69c <__umoddi3+0x278>
    a694:	1880012e 	bgeu	r3,r2,a69c <__umoddi3+0x278>
    a698:	1d07883a 	add	r3,r3,r20
    a69c:	1885c83a 	sub	r2,r3,r2
    a6a0:	1484d83a 	srl	r2,r2,r18
    a6a4:	0007883a 	mov	r3,zero
    a6a8:	003fa606 	br	a544 <__umoddi3+0x120>
    a6ac:	a0804030 	cmpltui	r2,r20,256
    a6b0:	10009e1e 	bne	r2,zero,a92c <__umoddi3+0x508>
    a6b4:	a006d23a 	srli	r3,r20,8
    a6b8:	04800204 	movi	r18,8
    a6bc:	003fcd06 	br	a5f4 <__umoddi3+0x1d0>
    a6c0:	30804030 	cmpltui	r2,r6,256
    a6c4:	1000911e 	bne	r2,zero,a90c <__umoddi3+0x4e8>
    a6c8:	3006d23a 	srli	r3,r6,8
    a6cc:	04800204 	movi	r18,8
    a6d0:	003f6d06 	br	a488 <__umoddi3+0x64>
    a6d4:	39004030 	cmpltui	r4,r7,256
    a6d8:	2000961e 	bne	r4,zero,a934 <__umoddi3+0x510>
    a6dc:	3808d23a 	srli	r4,r7,8
    a6e0:	02000204 	movi	r8,8
    a6e4:	003faa06 	br	a590 <__umoddi3+0x16c>
    a6e8:	3d0e983a 	sll	r7,r7,r20
    a6ec:	3544d83a 	srl	r2,r6,r21
    a6f0:	8d64d83a 	srl	r18,r17,r21
    a6f4:	8d22983a 	sll	r17,r17,r20
    a6f8:	11eeb03a 	or	r23,r2,r7
    a6fc:	b838d43a 	srli	fp,r23,16
    a700:	8544d83a 	srl	r2,r16,r21
    a704:	9009883a 	mov	r4,r18
    a708:	e00b883a 	mov	r5,fp
    a70c:	3526983a 	sll	r19,r6,r20
    a710:	1462b03a 	or	r17,r2,r17
    a714:	000aab00 	call	aab0 <__umodsi3>
    a718:	9009883a 	mov	r4,r18
    a71c:	e00b883a 	mov	r5,fp
    a720:	1025883a 	mov	r18,r2
    a724:	000aa4c0 	call	aa4c <__udivsi3>
    a728:	9008943a 	slli	r4,r18,16
    a72c:	8806d43a 	srli	r3,r17,16
    a730:	b9ffffcc 	andi	r7,r23,65535
    a734:	38a5383a 	mul	r18,r7,r2
    a738:	20c8b03a 	or	r4,r4,r3
    a73c:	8520983a 	sll	r16,r16,r20
    a740:	102d883a 	mov	r22,r2
    a744:	2480062e 	bgeu	r4,r18,a760 <__umoddi3+0x33c>
    a748:	25c9883a 	add	r4,r4,r23
    a74c:	10bfffc4 	addi	r2,r2,-1
    a750:	25c07d36 	bltu	r4,r23,a948 <__umoddi3+0x524>
    a754:	24807c2e 	bgeu	r4,r18,a948 <__umoddi3+0x524>
    a758:	b5bfff84 	addi	r22,r22,-2
    a75c:	25c9883a 	add	r4,r4,r23
    a760:	24a5c83a 	sub	r18,r4,r18
    a764:	9009883a 	mov	r4,r18
    a768:	e00b883a 	mov	r5,fp
    a76c:	d9c00015 	stw	r7,0(sp)
    a770:	000aab00 	call	aab0 <__umodsi3>
    a774:	9009883a 	mov	r4,r18
    a778:	e00b883a 	mov	r5,fp
    a77c:	1025883a 	mov	r18,r2
    a780:	000aa4c0 	call	aa4c <__udivsi3>
    a784:	d9c00017 	ldw	r7,0(sp)
    a788:	9024943a 	slli	r18,r18,16
    a78c:	8c7fffcc 	andi	r17,r17,65535
    a790:	388f383a 	mul	r7,r7,r2
    a794:	9448b03a 	or	r4,r18,r17
    a798:	21c0062e 	bgeu	r4,r7,a7b4 <__umoddi3+0x390>
    a79c:	25c9883a 	add	r4,r4,r23
    a7a0:	10ffffc4 	addi	r3,r2,-1
    a7a4:	25c06636 	bltu	r4,r23,a940 <__umoddi3+0x51c>
    a7a8:	21c0652e 	bgeu	r4,r7,a940 <__umoddi3+0x51c>
    a7ac:	10bfff84 	addi	r2,r2,-2
    a7b0:	25c9883a 	add	r4,r4,r23
    a7b4:	b00a943a 	slli	r5,r22,16
    a7b8:	11bfffcc 	andi	r6,r2,65535
    a7bc:	9806d43a 	srli	r3,r19,16
    a7c0:	2884b03a 	or	r2,r5,r2
    a7c4:	102cd43a 	srli	r22,r2,16
    a7c8:	997fffcc 	andi	r5,r19,65535
    a7cc:	3151383a 	mul	r8,r6,r5
    a7d0:	b14b383a 	mul	r5,r22,r5
    a7d4:	30cd383a 	mul	r6,r6,r3
    a7d8:	4004d43a 	srli	r2,r8,16
    a7dc:	b0ed383a 	mul	r22,r22,r3
    a7e0:	314d883a 	add	r6,r6,r5
    a7e4:	1185883a 	add	r2,r2,r6
    a7e8:	21c9c83a 	sub	r4,r4,r7
    a7ec:	1140022e 	bgeu	r2,r5,a7f8 <__umoddi3+0x3d4>
    a7f0:	00c00074 	movhi	r3,1
    a7f4:	b0ed883a 	add	r22,r22,r3
    a7f8:	1006d43a 	srli	r3,r2,16
    a7fc:	1004943a 	slli	r2,r2,16
    a800:	423fffcc 	andi	r8,r8,65535
    a804:	1dad883a 	add	r22,r3,r22
    a808:	1205883a 	add	r2,r2,r8
    a80c:	25803636 	bltu	r4,r22,a8e8 <__umoddi3+0x4c4>
    a810:	25803426 	beq	r4,r22,a8e4 <__umoddi3+0x4c0>
    a814:	8085c83a 	sub	r2,r16,r2
    a818:	8087803a 	cmpltu	r3,r16,r2
    a81c:	2589c83a 	sub	r4,r4,r22
    a820:	20c7c83a 	sub	r3,r4,r3
    a824:	1d60983a 	sll	r16,r3,r21
    a828:	1504d83a 	srl	r2,r2,r20
    a82c:	1d06d83a 	srl	r3,r3,r20
    a830:	8084b03a 	or	r2,r16,r2
    a834:	003f4306 	br	a544 <__umoddi3+0x120>
    a838:	a4a8983a 	sll	r20,r20,r18
    a83c:	8daad83a 	srl	r21,r17,r22
    a840:	8ca2983a 	sll	r17,r17,r18
    a844:	a02ed43a 	srli	r23,r20,16
    a848:	a809883a 	mov	r4,r21
    a84c:	85acd83a 	srl	r22,r16,r22
    a850:	b80b883a 	mov	r5,r23
    a854:	000aab00 	call	aab0 <__umodsi3>
    a858:	a809883a 	mov	r4,r21
    a85c:	b80b883a 	mov	r5,r23
    a860:	b46cb03a 	or	r22,r22,r17
    a864:	1027883a 	mov	r19,r2
    a868:	000aa4c0 	call	aa4c <__udivsi3>
    a86c:	9826943a 	slli	r19,r19,16
    a870:	b008d43a 	srli	r4,r22,16
    a874:	a57fffcc 	andi	r21,r20,65535
    a878:	a8a3383a 	mul	r17,r21,r2
    a87c:	9908b03a 	or	r4,r19,r4
    a880:	84a6983a 	sll	r19,r16,r18
    a884:	2440042e 	bgeu	r4,r17,a898 <__umoddi3+0x474>
    a888:	2509883a 	add	r4,r4,r20
    a88c:	25000236 	bltu	r4,r20,a898 <__umoddi3+0x474>
    a890:	2440012e 	bgeu	r4,r17,a898 <__umoddi3+0x474>
    a894:	2509883a 	add	r4,r4,r20
    a898:	2463c83a 	sub	r17,r4,r17
    a89c:	8809883a 	mov	r4,r17
    a8a0:	b80b883a 	mov	r5,r23
    a8a4:	000aab00 	call	aab0 <__umodsi3>
    a8a8:	1021883a 	mov	r16,r2
    a8ac:	8809883a 	mov	r4,r17
    a8b0:	b80b883a 	mov	r5,r23
    a8b4:	8020943a 	slli	r16,r16,16
    a8b8:	000aa4c0 	call	aa4c <__udivsi3>
    a8bc:	a885383a 	mul	r2,r21,r2
    a8c0:	b47fffcc 	andi	r17,r22,65535
    a8c4:	8462b03a 	or	r17,r16,r17
    a8c8:	8880042e 	bgeu	r17,r2,a8dc <__umoddi3+0x4b8>
    a8cc:	8d23883a 	add	r17,r17,r20
    a8d0:	8d000236 	bltu	r17,r20,a8dc <__umoddi3+0x4b8>
    a8d4:	8880012e 	bgeu	r17,r2,a8dc <__umoddi3+0x4b8>
    a8d8:	8d23883a 	add	r17,r17,r20
    a8dc:	88a3c83a 	sub	r17,r17,r2
    a8e0:	003f4e06 	br	a61c <__umoddi3+0x1f8>
    a8e4:	80bfcb2e 	bgeu	r16,r2,a814 <__umoddi3+0x3f0>
    a8e8:	14e7c83a 	sub	r19,r2,r19
    a8ec:	14c5803a 	cmpltu	r2,r2,r19
    a8f0:	15c5883a 	add	r2,r2,r23
    a8f4:	b0adc83a 	sub	r22,r22,r2
    a8f8:	9805883a 	mov	r2,r19
    a8fc:	003fc506 	br	a814 <__umoddi3+0x3f0>
    a900:	3006d43a 	srli	r3,r6,16
    a904:	04800404 	movi	r18,16
    a908:	003edf06 	br	a488 <__umoddi3+0x64>
    a90c:	3007883a 	mov	r3,r6
    a910:	003edd06 	br	a488 <__umoddi3+0x64>
    a914:	3808d43a 	srli	r4,r7,16
    a918:	02000404 	movi	r8,16
    a91c:	003f1c06 	br	a590 <__umoddi3+0x16c>
    a920:	a006d43a 	srli	r3,r20,16
    a924:	04800404 	movi	r18,16
    a928:	003f3206 	br	a5f4 <__umoddi3+0x1d0>
    a92c:	a007883a 	mov	r3,r20
    a930:	003f3006 	br	a5f4 <__umoddi3+0x1d0>
    a934:	3809883a 	mov	r4,r7
    a938:	0011883a 	mov	r8,zero
    a93c:	003f1406 	br	a590 <__umoddi3+0x16c>
    a940:	1805883a 	mov	r2,r3
    a944:	003f9b06 	br	a7b4 <__umoddi3+0x390>
    a948:	102d883a 	mov	r22,r2
    a94c:	003f8406 	br	a760 <__umoddi3+0x33c>
    a950:	2509883a 	add	r4,r4,r20
    a954:	003f4006 	br	a658 <__umoddi3+0x234>

0000a958 <__divsi3>:
    a958:	20001a16 	blt	r4,zero,a9c4 <__divsi3+0x6c>
    a95c:	000f883a 	mov	r7,zero
    a960:	2800020e 	bge	r5,zero,a96c <__divsi3+0x14>
    a964:	014bc83a 	sub	r5,zero,r5
    a968:	39c0005c 	xori	r7,r7,1
    a96c:	200d883a 	mov	r6,r4
    a970:	00c00044 	movi	r3,1
    a974:	2900092e 	bgeu	r5,r4,a99c <__divsi3+0x44>
    a978:	00800804 	movi	r2,32
    a97c:	00c00044 	movi	r3,1
    a980:	00000106 	br	a988 <__divsi3+0x30>
    a984:	10001226 	beq	r2,zero,a9d0 <__divsi3+0x78>
    a988:	294b883a 	add	r5,r5,r5
    a98c:	10bfffc4 	addi	r2,r2,-1
    a990:	18c7883a 	add	r3,r3,r3
    a994:	293ffb36 	bltu	r5,r4,a984 <__divsi3+0x2c>
    a998:	18000d26 	beq	r3,zero,a9d0 <__divsi3+0x78>
    a99c:	0005883a 	mov	r2,zero
    a9a0:	31400236 	bltu	r6,r5,a9ac <__divsi3+0x54>
    a9a4:	314dc83a 	sub	r6,r6,r5
    a9a8:	10c4b03a 	or	r2,r2,r3
    a9ac:	1806d07a 	srli	r3,r3,1
    a9b0:	280ad07a 	srli	r5,r5,1
    a9b4:	183ffa1e 	bne	r3,zero,a9a0 <__divsi3+0x48>
    a9b8:	38000126 	beq	r7,zero,a9c0 <__divsi3+0x68>
    a9bc:	0085c83a 	sub	r2,zero,r2
    a9c0:	f800283a 	ret
    a9c4:	0109c83a 	sub	r4,zero,r4
    a9c8:	01c00044 	movi	r7,1
    a9cc:	003fe406 	br	a960 <__divsi3+0x8>
    a9d0:	0005883a 	mov	r2,zero
    a9d4:	003ff806 	br	a9b8 <__divsi3+0x60>

0000a9d8 <__modsi3>:
    a9d8:	20001916 	blt	r4,zero,aa40 <__modsi3+0x68>
    a9dc:	000f883a 	mov	r7,zero
    a9e0:	2005883a 	mov	r2,r4
    a9e4:	2800010e 	bge	r5,zero,a9ec <__modsi3+0x14>
    a9e8:	014bc83a 	sub	r5,zero,r5
    a9ec:	00c00044 	movi	r3,1
    a9f0:	2900092e 	bgeu	r5,r4,aa18 <__modsi3+0x40>
    a9f4:	01800804 	movi	r6,32
    a9f8:	00c00044 	movi	r3,1
    a9fc:	00000106 	br	aa04 <__modsi3+0x2c>
    aa00:	30000d26 	beq	r6,zero,aa38 <__modsi3+0x60>
    aa04:	294b883a 	add	r5,r5,r5
    aa08:	31bfffc4 	addi	r6,r6,-1
    aa0c:	18c7883a 	add	r3,r3,r3
    aa10:	293ffb36 	bltu	r5,r4,aa00 <__modsi3+0x28>
    aa14:	18000826 	beq	r3,zero,aa38 <__modsi3+0x60>
    aa18:	1806d07a 	srli	r3,r3,1
    aa1c:	11400136 	bltu	r2,r5,aa24 <__modsi3+0x4c>
    aa20:	1145c83a 	sub	r2,r2,r5
    aa24:	280ad07a 	srli	r5,r5,1
    aa28:	183ffb1e 	bne	r3,zero,aa18 <__modsi3+0x40>
    aa2c:	38000126 	beq	r7,zero,aa34 <__modsi3+0x5c>
    aa30:	0085c83a 	sub	r2,zero,r2
    aa34:	f800283a 	ret
    aa38:	2005883a 	mov	r2,r4
    aa3c:	003ffb06 	br	aa2c <__modsi3+0x54>
    aa40:	0109c83a 	sub	r4,zero,r4
    aa44:	01c00044 	movi	r7,1
    aa48:	003fe506 	br	a9e0 <__modsi3+0x8>

0000aa4c <__udivsi3>:
    aa4c:	200d883a 	mov	r6,r4
    aa50:	2900152e 	bgeu	r5,r4,aaa8 <__udivsi3+0x5c>
    aa54:	28001416 	blt	r5,zero,aaa8 <__udivsi3+0x5c>
    aa58:	00800804 	movi	r2,32
    aa5c:	00c00044 	movi	r3,1
    aa60:	00000206 	br	aa6c <__udivsi3+0x20>
    aa64:	10000e26 	beq	r2,zero,aaa0 <__udivsi3+0x54>
    aa68:	28000516 	blt	r5,zero,aa80 <__udivsi3+0x34>
    aa6c:	294b883a 	add	r5,r5,r5
    aa70:	10bfffc4 	addi	r2,r2,-1
    aa74:	18c7883a 	add	r3,r3,r3
    aa78:	293ffa36 	bltu	r5,r4,aa64 <__udivsi3+0x18>
    aa7c:	18000826 	beq	r3,zero,aaa0 <__udivsi3+0x54>
    aa80:	0005883a 	mov	r2,zero
    aa84:	31400236 	bltu	r6,r5,aa90 <__udivsi3+0x44>
    aa88:	314dc83a 	sub	r6,r6,r5
    aa8c:	10c4b03a 	or	r2,r2,r3
    aa90:	1806d07a 	srli	r3,r3,1
    aa94:	280ad07a 	srli	r5,r5,1
    aa98:	183ffa1e 	bne	r3,zero,aa84 <__udivsi3+0x38>
    aa9c:	f800283a 	ret
    aaa0:	0005883a 	mov	r2,zero
    aaa4:	f800283a 	ret
    aaa8:	00c00044 	movi	r3,1
    aaac:	003ff406 	br	aa80 <__udivsi3+0x34>

0000aab0 <__umodsi3>:
    aab0:	2005883a 	mov	r2,r4
    aab4:	2900132e 	bgeu	r5,r4,ab04 <__umodsi3+0x54>
    aab8:	28001216 	blt	r5,zero,ab04 <__umodsi3+0x54>
    aabc:	01800804 	movi	r6,32
    aac0:	00c00044 	movi	r3,1
    aac4:	00000206 	br	aad0 <__umodsi3+0x20>
    aac8:	30000c26 	beq	r6,zero,aafc <__umodsi3+0x4c>
    aacc:	28000516 	blt	r5,zero,aae4 <__umodsi3+0x34>
    aad0:	294b883a 	add	r5,r5,r5
    aad4:	31bfffc4 	addi	r6,r6,-1
    aad8:	18c7883a 	add	r3,r3,r3
    aadc:	293ffa36 	bltu	r5,r4,aac8 <__umodsi3+0x18>
    aae0:	18000626 	beq	r3,zero,aafc <__umodsi3+0x4c>
    aae4:	1806d07a 	srli	r3,r3,1
    aae8:	11400136 	bltu	r2,r5,aaf0 <__umodsi3+0x40>
    aaec:	1145c83a 	sub	r2,r2,r5
    aaf0:	280ad07a 	srli	r5,r5,1
    aaf4:	183ffb1e 	bne	r3,zero,aae4 <__umodsi3+0x34>
    aaf8:	f800283a 	ret
    aafc:	2005883a 	mov	r2,r4
    ab00:	f800283a 	ret
    ab04:	00c00044 	movi	r3,1
    ab08:	003ff606 	br	aae4 <__umodsi3+0x34>

0000ab0c <__adddf3>:
    ab0c:	02000434 	movhi	r8,16
    ab10:	423fffc4 	addi	r8,r8,-1
    ab14:	2806d53a 	srli	r3,r5,20
    ab18:	3804d53a 	srli	r2,r7,20
    ab1c:	2a14703a 	and	r10,r5,r8
    ab20:	3a12703a 	and	r9,r7,r8
    ab24:	280ad7fa 	srli	r5,r5,31
    ab28:	501490fa 	slli	r10,r10,3
    ab2c:	2018d77a 	srli	r12,r4,29
    ab30:	481290fa 	slli	r9,r9,3
    ab34:	3016d77a 	srli	r11,r6,29
    ab38:	380ed7fa 	srli	r7,r7,31
    ab3c:	defffb04 	addi	sp,sp,-20
    ab40:	dc800215 	stw	r18,8(sp)
    ab44:	dc000015 	stw	r16,0(sp)
    ab48:	1c81ffcc 	andi	r18,r3,2047
    ab4c:	1081ffcc 	andi	r2,r2,2047
    ab50:	dfc00415 	stw	ra,16(sp)
    ab54:	dcc00315 	stw	r19,12(sp)
    ab58:	dc400115 	stw	r17,4(sp)
    ab5c:	201c90fa 	slli	r14,r4,3
    ab60:	301a90fa 	slli	r13,r6,3
    ab64:	2821883a 	mov	r16,r5
    ab68:	6294b03a 	or	r10,r12,r10
    ab6c:	5a52b03a 	or	r9,r11,r9
    ab70:	9087c83a 	sub	r3,r18,r2
    ab74:	29c06126 	beq	r5,r7,acfc <__adddf3+0x1f0>
    ab78:	00c0550e 	bge	zero,r3,acd0 <__adddf3+0x1c4>
    ab7c:	10007326 	beq	r2,zero,ad4c <__adddf3+0x240>
    ab80:	9081ffd8 	cmpnei	r2,r18,2047
    ab84:	1000b826 	beq	r2,zero,ae68 <__adddf3+0x35c>
    ab88:	4a402034 	orhi	r9,r9,128
    ab8c:	18800e48 	cmpgei	r2,r3,57
    ab90:	1000ee1e 	bne	r2,zero,af4c <__adddf3+0x440>
    ab94:	18800808 	cmpgei	r2,r3,32
    ab98:	10012d1e 	bne	r2,zero,b050 <__adddf3+0x544>
    ab9c:	00800804 	movi	r2,32
    aba0:	10c5c83a 	sub	r2,r2,r3
    aba4:	68c8d83a 	srl	r4,r13,r3
    aba8:	48a2983a 	sll	r17,r9,r2
    abac:	689a983a 	sll	r13,r13,r2
    abb0:	48c6d83a 	srl	r3,r9,r3
    abb4:	8922b03a 	or	r17,r17,r4
    abb8:	681ac03a 	cmpne	r13,r13,zero
    abbc:	8b62b03a 	or	r17,r17,r13
    abc0:	50d5c83a 	sub	r10,r10,r3
    abc4:	7463c83a 	sub	r17,r14,r17
    abc8:	7451803a 	cmpltu	r8,r14,r17
    abcc:	5211c83a 	sub	r8,r10,r8
    abd0:	4080202c 	andhi	r2,r8,128
    abd4:	10008826 	beq	r2,zero,adf8 <__adddf3+0x2ec>
    abd8:	02402034 	movhi	r9,128
    abdc:	4a7fffc4 	addi	r9,r9,-1
    abe0:	4266703a 	and	r19,r8,r9
    abe4:	9800ae26 	beq	r19,zero,aea0 <__adddf3+0x394>
    abe8:	9809883a 	mov	r4,r19
    abec:	000d0380 	call	d038 <__clzsi2>
    abf0:	10fffe04 	addi	r3,r2,-8
    abf4:	02000804 	movi	r8,32
    abf8:	40d1c83a 	sub	r8,r8,r3
    abfc:	8a10d83a 	srl	r8,r17,r8
    ac00:	98d2983a 	sll	r9,r19,r3
    ac04:	88e2983a 	sll	r17,r17,r3
    ac08:	4250b03a 	or	r8,r8,r9
    ac0c:	1c80ad16 	blt	r3,r18,aec4 <__adddf3+0x3b8>
    ac10:	1c87c83a 	sub	r3,r3,r18
    ac14:	19000044 	addi	r4,r3,1
    ac18:	20800808 	cmpgei	r2,r4,32
    ac1c:	10006a1e 	bne	r2,zero,adc8 <__adddf3+0x2bc>
    ac20:	00800804 	movi	r2,32
    ac24:	1105c83a 	sub	r2,r2,r4
    ac28:	8906d83a 	srl	r3,r17,r4
    ac2c:	88a2983a 	sll	r17,r17,r2
    ac30:	4084983a 	sll	r2,r8,r2
    ac34:	4110d83a 	srl	r8,r8,r4
    ac38:	8822c03a 	cmpne	r17,r17,zero
    ac3c:	10c4b03a 	or	r2,r2,r3
    ac40:	1462b03a 	or	r17,r2,r17
    ac44:	0025883a 	mov	r18,zero
    ac48:	888001cc 	andi	r2,r17,7
    ac4c:	10000726 	beq	r2,zero,ac6c <__adddf3+0x160>
    ac50:	888003cc 	andi	r2,r17,15
    ac54:	10800120 	cmpeqi	r2,r2,4
    ac58:	1000041e 	bne	r2,zero,ac6c <__adddf3+0x160>
    ac5c:	88c00104 	addi	r3,r17,4
    ac60:	1c63803a 	cmpltu	r17,r3,r17
    ac64:	4451883a 	add	r8,r8,r17
    ac68:	1823883a 	mov	r17,r3
    ac6c:	4080202c 	andhi	r2,r8,128
    ac70:	10006326 	beq	r2,zero,ae00 <__adddf3+0x2f4>
    ac74:	90c00044 	addi	r3,r18,1
    ac78:	1881ffe0 	cmpeqi	r2,r3,2047
    ac7c:	18c1ffcc 	andi	r3,r3,2047
    ac80:	1000751e 	bne	r2,zero,ae58 <__adddf3+0x34c>
    ac84:	00bfe034 	movhi	r2,65408
    ac88:	10bfffc4 	addi	r2,r2,-1
    ac8c:	4090703a 	and	r8,r8,r2
    ac90:	4004977a 	slli	r2,r8,29
    ac94:	4010927a 	slli	r8,r8,9
    ac98:	8822d0fa 	srli	r17,r17,3
    ac9c:	4010d33a 	srli	r8,r8,12
    aca0:	1444b03a 	or	r2,r2,r17
    aca4:	1806953a 	slli	r3,r3,20
    aca8:	802097fa 	slli	r16,r16,31
    acac:	1a06b03a 	or	r3,r3,r8
    acb0:	1c06b03a 	or	r3,r3,r16
    acb4:	dfc00417 	ldw	ra,16(sp)
    acb8:	dcc00317 	ldw	r19,12(sp)
    acbc:	dc800217 	ldw	r18,8(sp)
    acc0:	dc400117 	ldw	r17,4(sp)
    acc4:	dc000017 	ldw	r16,0(sp)
    acc8:	dec00504 	addi	sp,sp,20
    accc:	f800283a 	ret
    acd0:	18002626 	beq	r3,zero,ad6c <__adddf3+0x260>
    acd4:	1487c83a 	sub	r3,r2,r18
    acd8:	9000b51e 	bne	r18,zero,afb0 <__adddf3+0x4a4>
    acdc:	5388b03a 	or	r4,r10,r14
    ace0:	20010f26 	beq	r4,zero,b120 <__adddf3+0x614>
    ace4:	193fffc4 	addi	r4,r3,-1
    ace8:	20016126 	beq	r4,zero,b270 <__adddf3+0x764>
    acec:	18c1ffd8 	cmpnei	r3,r3,2047
    acf0:	18012e26 	beq	r3,zero,b1ac <__adddf3+0x6a0>
    acf4:	2007883a 	mov	r3,r4
    acf8:	0000b006 	br	afbc <__adddf3+0x4b0>
    acfc:	00c0760e 	bge	zero,r3,aed8 <__adddf3+0x3cc>
    ad00:	10002926 	beq	r2,zero,ada8 <__adddf3+0x29c>
    ad04:	9081ffd8 	cmpnei	r2,r18,2047
    ad08:	10012126 	beq	r2,zero,b190 <__adddf3+0x684>
    ad0c:	4a402034 	orhi	r9,r9,128
    ad10:	18800e48 	cmpgei	r2,r3,57
    ad14:	1000461e 	bne	r2,zero,ae30 <__adddf3+0x324>
    ad18:	18800808 	cmpgei	r2,r3,32
    ad1c:	1000e326 	beq	r2,zero,b0ac <__adddf3+0x5a0>
    ad20:	1c7ff804 	addi	r17,r3,-32
    ad24:	19000820 	cmpeqi	r4,r3,32
    ad28:	4c44d83a 	srl	r2,r9,r17
    ad2c:	2000041e 	bne	r4,zero,ad40 <__adddf3+0x234>
    ad30:	01001004 	movi	r4,64
    ad34:	20c7c83a 	sub	r3,r4,r3
    ad38:	48d2983a 	sll	r9,r9,r3
    ad3c:	6a5ab03a 	or	r13,r13,r9
    ad40:	6822c03a 	cmpne	r17,r13,zero
    ad44:	88a2b03a 	or	r17,r17,r2
    ad48:	00003b06 	br	ae38 <__adddf3+0x32c>
    ad4c:	4b44b03a 	or	r2,r9,r13
    ad50:	10008126 	beq	r2,zero,af58 <__adddf3+0x44c>
    ad54:	18bfffc4 	addi	r2,r3,-1
    ad58:	10010726 	beq	r2,zero,b178 <__adddf3+0x66c>
    ad5c:	18c1ffd8 	cmpnei	r3,r3,2047
    ad60:	18004126 	beq	r3,zero,ae68 <__adddf3+0x35c>
    ad64:	1007883a 	mov	r3,r2
    ad68:	003f8806 	br	ab8c <__adddf3+0x80>
    ad6c:	90800044 	addi	r2,r18,1
    ad70:	1081ff8c 	andi	r2,r2,2046
    ad74:	1000a01e 	bne	r2,zero,aff8 <__adddf3+0x4ec>
    ad78:	538ab03a 	or	r5,r10,r14
    ad7c:	4b44b03a 	or	r2,r9,r13
    ad80:	9000ef1e 	bne	r18,zero,b140 <__adddf3+0x634>
    ad84:	28014126 	beq	r5,zero,b28c <__adddf3+0x780>
    ad88:	1001491e 	bne	r2,zero,b2b0 <__adddf3+0x7a4>
    ad8c:	500a977a 	slli	r5,r10,29
    ad90:	00880034 	movhi	r2,8192
    ad94:	10bfffc4 	addi	r2,r2,-1
    ad98:	2084703a 	and	r2,r4,r2
    ad9c:	5014d0fa 	srli	r10,r10,3
    ada0:	1144b03a 	or	r2,r2,r5
    ada4:	00001d06 	br	ae1c <__adddf3+0x310>
    ada8:	4b44b03a 	or	r2,r9,r13
    adac:	10006a26 	beq	r2,zero,af58 <__adddf3+0x44c>
    adb0:	18bfffc4 	addi	r2,r3,-1
    adb4:	1000e826 	beq	r2,zero,b158 <__adddf3+0x64c>
    adb8:	18c1ffd8 	cmpnei	r3,r3,2047
    adbc:	1800f426 	beq	r3,zero,b190 <__adddf3+0x684>
    adc0:	1007883a 	mov	r3,r2
    adc4:	003fd206 	br	ad10 <__adddf3+0x204>
    adc8:	18fff844 	addi	r3,r3,-31
    adcc:	20800820 	cmpeqi	r2,r4,32
    add0:	40c6d83a 	srl	r3,r8,r3
    add4:	1000041e 	bne	r2,zero,ade8 <__adddf3+0x2dc>
    add8:	00801004 	movi	r2,64
    addc:	1109c83a 	sub	r4,r2,r4
    ade0:	4110983a 	sll	r8,r8,r4
    ade4:	8a22b03a 	or	r17,r17,r8
    ade8:	8822c03a 	cmpne	r17,r17,zero
    adec:	88e2b03a 	or	r17,r17,r3
    adf0:	0011883a 	mov	r8,zero
    adf4:	0025883a 	mov	r18,zero
    adf8:	888001cc 	andi	r2,r17,7
    adfc:	103f941e 	bne	r2,zero,ac50 <__adddf3+0x144>
    ae00:	8822d0fa 	srli	r17,r17,3
    ae04:	4004977a 	slli	r2,r8,29
    ae08:	4014d0fa 	srli	r10,r8,3
    ae0c:	9007883a 	mov	r3,r18
    ae10:	8884b03a 	or	r2,r17,r2
    ae14:	1901ffe0 	cmpeqi	r4,r3,2047
    ae18:	2000191e 	bne	r4,zero,ae80 <__adddf3+0x374>
    ae1c:	02000434 	movhi	r8,16
    ae20:	423fffc4 	addi	r8,r8,-1
    ae24:	5210703a 	and	r8,r10,r8
    ae28:	18c1ffcc 	andi	r3,r3,2047
    ae2c:	003f9d06 	br	aca4 <__adddf3+0x198>
    ae30:	4b62b03a 	or	r17,r9,r13
    ae34:	8822c03a 	cmpne	r17,r17,zero
    ae38:	8ba3883a 	add	r17,r17,r14
    ae3c:	8b91803a 	cmpltu	r8,r17,r14
    ae40:	4291883a 	add	r8,r8,r10
    ae44:	4080202c 	andhi	r2,r8,128
    ae48:	103feb26 	beq	r2,zero,adf8 <__adddf3+0x2ec>
    ae4c:	94800044 	addi	r18,r18,1
    ae50:	9081ffe0 	cmpeqi	r2,r18,2047
    ae54:	10007426 	beq	r2,zero,b028 <__adddf3+0x51c>
    ae58:	00c1ffc4 	movi	r3,2047
    ae5c:	0011883a 	mov	r8,zero
    ae60:	0005883a 	mov	r2,zero
    ae64:	003f8f06 	br	aca4 <__adddf3+0x198>
    ae68:	500a977a 	slli	r5,r10,29
    ae6c:	00c80034 	movhi	r3,8192
    ae70:	18ffffc4 	addi	r3,r3,-1
    ae74:	5014d0fa 	srli	r10,r10,3
    ae78:	20c4703a 	and	r2,r4,r3
    ae7c:	1144b03a 	or	r2,r2,r5
    ae80:	1286b03a 	or	r3,r2,r10
    ae84:	18015926 	beq	r3,zero,b3ec <__adddf3+0x8e0>
    ae88:	00c00434 	movhi	r3,16
    ae8c:	18ffffc4 	addi	r3,r3,-1
    ae90:	52000234 	orhi	r8,r10,8
    ae94:	40d0703a 	and	r8,r8,r3
    ae98:	00c1ffc4 	movi	r3,2047
    ae9c:	003f8106 	br	aca4 <__adddf3+0x198>
    aea0:	8809883a 	mov	r4,r17
    aea4:	000d0380 	call	d038 <__clzsi2>
    aea8:	10c00604 	addi	r3,r2,24
    aeac:	19000808 	cmpgei	r4,r3,32
    aeb0:	203f5026 	beq	r4,zero,abf4 <__adddf3+0xe8>
    aeb4:	123ffe04 	addi	r8,r2,-8
    aeb8:	8a10983a 	sll	r8,r17,r8
    aebc:	0023883a 	mov	r17,zero
    aec0:	1cbf530e 	bge	r3,r18,ac10 <__adddf3+0x104>
    aec4:	00bfe034 	movhi	r2,65408
    aec8:	10bfffc4 	addi	r2,r2,-1
    aecc:	90e5c83a 	sub	r18,r18,r3
    aed0:	4090703a 	and	r8,r8,r2
    aed4:	003f5c06 	br	ac48 <__adddf3+0x13c>
    aed8:	18002626 	beq	r3,zero,af74 <__adddf3+0x468>
    aedc:	1487c83a 	sub	r3,r2,r18
    aee0:	90006e1e 	bne	r18,zero,b09c <__adddf3+0x590>
    aee4:	5388b03a 	or	r4,r10,r14
    aee8:	2000fd26 	beq	r4,zero,b2e0 <__adddf3+0x7d4>
    aeec:	193fffc4 	addi	r4,r3,-1
    aef0:	20013626 	beq	r4,zero,b3cc <__adddf3+0x8c0>
    aef4:	18c1ffd8 	cmpnei	r3,r3,2047
    aef8:	1800b426 	beq	r3,zero,b1cc <__adddf3+0x6c0>
    aefc:	2007883a 	mov	r3,r4
    af00:	19000e48 	cmpgei	r4,r3,57
    af04:	2000b81e 	bne	r4,zero,b1e8 <__adddf3+0x6dc>
    af08:	19000808 	cmpgei	r4,r3,32
    af0c:	2001241e 	bne	r4,zero,b3a0 <__adddf3+0x894>
    af10:	01000804 	movi	r4,32
    af14:	20c9c83a 	sub	r4,r4,r3
    af18:	5122983a 	sll	r17,r10,r4
    af1c:	70cad83a 	srl	r5,r14,r3
    af20:	7108983a 	sll	r4,r14,r4
    af24:	50d4d83a 	srl	r10,r10,r3
    af28:	8962b03a 	or	r17,r17,r5
    af2c:	2008c03a 	cmpne	r4,r4,zero
    af30:	8922b03a 	or	r17,r17,r4
    af34:	4a93883a 	add	r9,r9,r10
    af38:	8b63883a 	add	r17,r17,r13
    af3c:	8b51803a 	cmpltu	r8,r17,r13
    af40:	4251883a 	add	r8,r8,r9
    af44:	1025883a 	mov	r18,r2
    af48:	003fbe06 	br	ae44 <__adddf3+0x338>
    af4c:	4b62b03a 	or	r17,r9,r13
    af50:	8822c03a 	cmpne	r17,r17,zero
    af54:	003f1b06 	br	abc4 <__adddf3+0xb8>
    af58:	500c977a 	slli	r6,r10,29
    af5c:	01480034 	movhi	r5,8192
    af60:	297fffc4 	addi	r5,r5,-1
    af64:	2144703a 	and	r2,r4,r5
    af68:	5014d0fa 	srli	r10,r10,3
    af6c:	3084b03a 	or	r2,r6,r2
    af70:	003fa806 	br	ae14 <__adddf3+0x308>
    af74:	90800044 	addi	r2,r18,1
    af78:	1141ff8c 	andi	r5,r2,2046
    af7c:	2800561e 	bne	r5,zero,b0d8 <__adddf3+0x5cc>
    af80:	5384b03a 	or	r2,r10,r14
    af84:	9000a61e 	bne	r18,zero,b220 <__adddf3+0x714>
    af88:	1000ee26 	beq	r2,zero,b344 <__adddf3+0x838>
    af8c:	4b44b03a 	or	r2,r9,r13
    af90:	1000f31e 	bne	r2,zero,b360 <__adddf3+0x854>
    af94:	5004977a 	slli	r2,r10,29
    af98:	01480034 	movhi	r5,8192
    af9c:	297fffc4 	addi	r5,r5,-1
    afa0:	2148703a 	and	r4,r4,r5
    afa4:	5014d0fa 	srli	r10,r10,3
    afa8:	1104b03a 	or	r2,r2,r4
    afac:	003f9b06 	br	ae1c <__adddf3+0x310>
    afb0:	1101ffd8 	cmpnei	r4,r2,2047
    afb4:	20007d26 	beq	r4,zero,b1ac <__adddf3+0x6a0>
    afb8:	52802034 	orhi	r10,r10,128
    afbc:	19000e48 	cmpgei	r4,r3,57
    afc0:	20002e1e 	bne	r4,zero,b07c <__adddf3+0x570>
    afc4:	19000808 	cmpgei	r4,r3,32
    afc8:	20008a1e 	bne	r4,zero,b1f4 <__adddf3+0x6e8>
    afcc:	01000804 	movi	r4,32
    afd0:	20c9c83a 	sub	r4,r4,r3
    afd4:	5122983a 	sll	r17,r10,r4
    afd8:	70cad83a 	srl	r5,r14,r3
    afdc:	711c983a 	sll	r14,r14,r4
    afe0:	50d4d83a 	srl	r10,r10,r3
    afe4:	8962b03a 	or	r17,r17,r5
    afe8:	701cc03a 	cmpne	r14,r14,zero
    afec:	8ba2b03a 	or	r17,r17,r14
    aff0:	4a93c83a 	sub	r9,r9,r10
    aff4:	00002306 	br	b084 <__adddf3+0x578>
    aff8:	7363c83a 	sub	r17,r14,r13
    affc:	5267c83a 	sub	r19,r10,r9
    b000:	7451803a 	cmpltu	r8,r14,r17
    b004:	9a27c83a 	sub	r19,r19,r8
    b008:	9880202c 	andhi	r2,r19,128
    b00c:	10003e1e 	bne	r2,zero,b108 <__adddf3+0x5fc>
    b010:	8cc4b03a 	or	r2,r17,r19
    b014:	103ef31e 	bne	r2,zero,abe4 <__adddf3+0xd8>
    b018:	0015883a 	mov	r10,zero
    b01c:	0021883a 	mov	r16,zero
    b020:	003f7e06 	br	ae1c <__adddf3+0x310>
    b024:	04800084 	movi	r18,2
    b028:	00bfe034 	movhi	r2,65408
    b02c:	10bfffc4 	addi	r2,r2,-1
    b030:	8806d07a 	srli	r3,r17,1
    b034:	4090703a 	and	r8,r8,r2
    b038:	400497fa 	slli	r2,r8,31
    b03c:	8c40004c 	andi	r17,r17,1
    b040:	1c62b03a 	or	r17,r3,r17
    b044:	4010d07a 	srli	r8,r8,1
    b048:	1462b03a 	or	r17,r2,r17
    b04c:	003efe06 	br	ac48 <__adddf3+0x13c>
    b050:	1c7ff804 	addi	r17,r3,-32
    b054:	19000820 	cmpeqi	r4,r3,32
    b058:	4c44d83a 	srl	r2,r9,r17
    b05c:	2000041e 	bne	r4,zero,b070 <__adddf3+0x564>
    b060:	01001004 	movi	r4,64
    b064:	20c7c83a 	sub	r3,r4,r3
    b068:	48d2983a 	sll	r9,r9,r3
    b06c:	6a5ab03a 	or	r13,r13,r9
    b070:	6822c03a 	cmpne	r17,r13,zero
    b074:	88a2b03a 	or	r17,r17,r2
    b078:	003ed206 	br	abc4 <__adddf3+0xb8>
    b07c:	5394b03a 	or	r10,r10,r14
    b080:	5022c03a 	cmpne	r17,r10,zero
    b084:	6c63c83a 	sub	r17,r13,r17
    b088:	6c51803a 	cmpltu	r8,r13,r17
    b08c:	4a11c83a 	sub	r8,r9,r8
    b090:	3821883a 	mov	r16,r7
    b094:	1025883a 	mov	r18,r2
    b098:	003ecd06 	br	abd0 <__adddf3+0xc4>
    b09c:	1101ffd8 	cmpnei	r4,r2,2047
    b0a0:	20004a26 	beq	r4,zero,b1cc <__adddf3+0x6c0>
    b0a4:	52802034 	orhi	r10,r10,128
    b0a8:	003f9506 	br	af00 <__adddf3+0x3f4>
    b0ac:	00800804 	movi	r2,32
    b0b0:	10c5c83a 	sub	r2,r2,r3
    b0b4:	68c8d83a 	srl	r4,r13,r3
    b0b8:	48a2983a 	sll	r17,r9,r2
    b0bc:	689a983a 	sll	r13,r13,r2
    b0c0:	48c6d83a 	srl	r3,r9,r3
    b0c4:	8922b03a 	or	r17,r17,r4
    b0c8:	681ac03a 	cmpne	r13,r13,zero
    b0cc:	8b62b03a 	or	r17,r17,r13
    b0d0:	50d5883a 	add	r10,r10,r3
    b0d4:	003f5806 	br	ae38 <__adddf3+0x32c>
    b0d8:	10c1ffe0 	cmpeqi	r3,r2,2047
    b0dc:	183f5e1e 	bne	r3,zero,ae58 <__adddf3+0x34c>
    b0e0:	7351883a 	add	r8,r14,r13
    b0e4:	4387803a 	cmpltu	r3,r8,r14
    b0e8:	5255883a 	add	r10,r10,r9
    b0ec:	50c7883a 	add	r3,r10,r3
    b0f0:	401ad07a 	srli	r13,r8,1
    b0f4:	182297fa 	slli	r17,r3,31
    b0f8:	1810d07a 	srli	r8,r3,1
    b0fc:	1025883a 	mov	r18,r2
    b100:	8b62b03a 	or	r17,r17,r13
    b104:	003f3c06 	br	adf8 <__adddf3+0x2ec>
    b108:	6ba3c83a 	sub	r17,r13,r14
    b10c:	4a93c83a 	sub	r9,r9,r10
    b110:	6c51803a 	cmpltu	r8,r13,r17
    b114:	4a27c83a 	sub	r19,r9,r8
    b118:	3821883a 	mov	r16,r7
    b11c:	003eb106 	br	abe4 <__adddf3+0xd8>
    b120:	480a977a 	slli	r5,r9,29
    b124:	01080034 	movhi	r4,8192
    b128:	213fffc4 	addi	r4,r4,-1
    b12c:	3104703a 	and	r2,r6,r4
    b130:	4814d0fa 	srli	r10,r9,3
    b134:	1144b03a 	or	r2,r2,r5
    b138:	3821883a 	mov	r16,r7
    b13c:	003f3506 	br	ae14 <__adddf3+0x308>
    b140:	28006e1e 	bne	r5,zero,b2fc <__adddf3+0x7f0>
    b144:	1000191e 	bne	r2,zero,b1ac <__adddf3+0x6a0>
    b148:	0021883a 	mov	r16,zero
    b14c:	4015883a 	mov	r10,r8
    b150:	00bfffc4 	movi	r2,-1
    b154:	003f4c06 	br	ae88 <__adddf3+0x37c>
    b158:	7363883a 	add	r17,r14,r13
    b15c:	5255883a 	add	r10,r10,r9
    b160:	8b91803a 	cmpltu	r8,r17,r14
    b164:	5211883a 	add	r8,r10,r8
    b168:	4080202c 	andhi	r2,r8,128
    b16c:	103fad1e 	bne	r2,zero,b024 <__adddf3+0x518>
    b170:	04800044 	movi	r18,1
    b174:	003f2006 	br	adf8 <__adddf3+0x2ec>
    b178:	7363c83a 	sub	r17,r14,r13
    b17c:	5255c83a 	sub	r10,r10,r9
    b180:	7451803a 	cmpltu	r8,r14,r17
    b184:	5211c83a 	sub	r8,r10,r8
    b188:	04800044 	movi	r18,1
    b18c:	003e9006 	br	abd0 <__adddf3+0xc4>
    b190:	5004977a 	slli	r2,r10,29
    b194:	00c80034 	movhi	r3,8192
    b198:	18ffffc4 	addi	r3,r3,-1
    b19c:	20c8703a 	and	r4,r4,r3
    b1a0:	5014d0fa 	srli	r10,r10,3
    b1a4:	1104b03a 	or	r2,r2,r4
    b1a8:	003f3506 	br	ae80 <__adddf3+0x374>
    b1ac:	4806977a 	slli	r3,r9,29
    b1b0:	00880034 	movhi	r2,8192
    b1b4:	10bfffc4 	addi	r2,r2,-1
    b1b8:	3084703a 	and	r2,r6,r2
    b1bc:	4814d0fa 	srli	r10,r9,3
    b1c0:	10c4b03a 	or	r2,r2,r3
    b1c4:	3821883a 	mov	r16,r7
    b1c8:	003f2d06 	br	ae80 <__adddf3+0x374>
    b1cc:	4804977a 	slli	r2,r9,29
    b1d0:	00c80034 	movhi	r3,8192
    b1d4:	18ffffc4 	addi	r3,r3,-1
    b1d8:	30cc703a 	and	r6,r6,r3
    b1dc:	4814d0fa 	srli	r10,r9,3
    b1e0:	1184b03a 	or	r2,r2,r6
    b1e4:	003f2606 	br	ae80 <__adddf3+0x374>
    b1e8:	5394b03a 	or	r10,r10,r14
    b1ec:	5022c03a 	cmpne	r17,r10,zero
    b1f0:	003f5106 	br	af38 <__adddf3+0x42c>
    b1f4:	1c7ff804 	addi	r17,r3,-32
    b1f8:	19400820 	cmpeqi	r5,r3,32
    b1fc:	5448d83a 	srl	r4,r10,r17
    b200:	2800041e 	bne	r5,zero,b214 <__adddf3+0x708>
    b204:	01401004 	movi	r5,64
    b208:	28c7c83a 	sub	r3,r5,r3
    b20c:	50d4983a 	sll	r10,r10,r3
    b210:	729cb03a 	or	r14,r14,r10
    b214:	7022c03a 	cmpne	r17,r14,zero
    b218:	8922b03a 	or	r17,r17,r4
    b21c:	003f9906 	br	b084 <__adddf3+0x578>
    b220:	103fea26 	beq	r2,zero,b1cc <__adddf3+0x6c0>
    b224:	4b50b03a 	or	r8,r9,r13
    b228:	500a977a 	slli	r5,r10,29
    b22c:	5014d0fa 	srli	r10,r10,3
    b230:	40005626 	beq	r8,zero,b38c <__adddf3+0x880>
    b234:	00c80034 	movhi	r3,8192
    b238:	18ffffc4 	addi	r3,r3,-1
    b23c:	20c4703a 	and	r2,r4,r3
    b240:	5100022c 	andhi	r4,r10,8
    b244:	1144b03a 	or	r2,r2,r5
    b248:	203f0d26 	beq	r4,zero,ae80 <__adddf3+0x374>
    b24c:	4808d0fa 	srli	r4,r9,3
    b250:	2140022c 	andhi	r5,r4,8
    b254:	283f0a1e 	bne	r5,zero,ae80 <__adddf3+0x374>
    b258:	4804977a 	slli	r2,r9,29
    b25c:	30cc703a 	and	r6,r6,r3
    b260:	3821883a 	mov	r16,r7
    b264:	3084b03a 	or	r2,r6,r2
    b268:	2015883a 	mov	r10,r4
    b26c:	003f0406 	br	ae80 <__adddf3+0x374>
    b270:	6ba3c83a 	sub	r17,r13,r14
    b274:	4a95c83a 	sub	r10,r9,r10
    b278:	6c51803a 	cmpltu	r8,r13,r17
    b27c:	5211c83a 	sub	r8,r10,r8
    b280:	3821883a 	mov	r16,r7
    b284:	04800044 	movi	r18,1
    b288:	003e5106 	br	abd0 <__adddf3+0xc4>
    b28c:	103f6226 	beq	r2,zero,b018 <__adddf3+0x50c>
    b290:	4808977a 	slli	r4,r9,29
    b294:	00880034 	movhi	r2,8192
    b298:	10bfffc4 	addi	r2,r2,-1
    b29c:	3084703a 	and	r2,r6,r2
    b2a0:	4814d0fa 	srli	r10,r9,3
    b2a4:	1104b03a 	or	r2,r2,r4
    b2a8:	3821883a 	mov	r16,r7
    b2ac:	003edb06 	br	ae1c <__adddf3+0x310>
    b2b0:	7363c83a 	sub	r17,r14,r13
    b2b4:	7445803a 	cmpltu	r2,r14,r17
    b2b8:	5251c83a 	sub	r8,r10,r9
    b2bc:	4091c83a 	sub	r8,r8,r2
    b2c0:	4080202c 	andhi	r2,r8,128
    b2c4:	10004626 	beq	r2,zero,b3e0 <__adddf3+0x8d4>
    b2c8:	6ba3c83a 	sub	r17,r13,r14
    b2cc:	4a95c83a 	sub	r10,r9,r10
    b2d0:	6c51803a 	cmpltu	r8,r13,r17
    b2d4:	5211c83a 	sub	r8,r10,r8
    b2d8:	3821883a 	mov	r16,r7
    b2dc:	003e5a06 	br	ac48 <__adddf3+0x13c>
    b2e0:	4804977a 	slli	r2,r9,29
    b2e4:	01080034 	movhi	r4,8192
    b2e8:	213fffc4 	addi	r4,r4,-1
    b2ec:	310c703a 	and	r6,r6,r4
    b2f0:	4814d0fa 	srli	r10,r9,3
    b2f4:	1184b03a 	or	r2,r2,r6
    b2f8:	003ec606 	br	ae14 <__adddf3+0x308>
    b2fc:	500a977a 	slli	r5,r10,29
    b300:	5014d0fa 	srli	r10,r10,3
    b304:	10002126 	beq	r2,zero,b38c <__adddf3+0x880>
    b308:	00c80034 	movhi	r3,8192
    b30c:	18ffffc4 	addi	r3,r3,-1
    b310:	20c4703a 	and	r2,r4,r3
    b314:	5100022c 	andhi	r4,r10,8
    b318:	1144b03a 	or	r2,r2,r5
    b31c:	203ed826 	beq	r4,zero,ae80 <__adddf3+0x374>
    b320:	4808d0fa 	srli	r4,r9,3
    b324:	2140022c 	andhi	r5,r4,8
    b328:	283ed51e 	bne	r5,zero,ae80 <__adddf3+0x374>
    b32c:	4812977a 	slli	r9,r9,29
    b330:	30c4703a 	and	r2,r6,r3
    b334:	3821883a 	mov	r16,r7
    b338:	1244b03a 	or	r2,r2,r9
    b33c:	2015883a 	mov	r10,r4
    b340:	003ecf06 	br	ae80 <__adddf3+0x374>
    b344:	4804977a 	slli	r2,r9,29
    b348:	01080034 	movhi	r4,8192
    b34c:	213fffc4 	addi	r4,r4,-1
    b350:	310c703a 	and	r6,r6,r4
    b354:	4814d0fa 	srli	r10,r9,3
    b358:	1184b03a 	or	r2,r2,r6
    b35c:	003eaf06 	br	ae1c <__adddf3+0x310>
    b360:	7363883a 	add	r17,r14,r13
    b364:	5255883a 	add	r10,r10,r9
    b368:	8b91803a 	cmpltu	r8,r17,r14
    b36c:	5211883a 	add	r8,r10,r8
    b370:	4080202c 	andhi	r2,r8,128
    b374:	103ea026 	beq	r2,zero,adf8 <__adddf3+0x2ec>
    b378:	00bfe034 	movhi	r2,65408
    b37c:	10bfffc4 	addi	r2,r2,-1
    b380:	4090703a 	and	r8,r8,r2
    b384:	04800044 	movi	r18,1
    b388:	003e9b06 	br	adf8 <__adddf3+0x2ec>
    b38c:	00880034 	movhi	r2,8192
    b390:	10bfffc4 	addi	r2,r2,-1
    b394:	2084703a 	and	r2,r4,r2
    b398:	1144b03a 	or	r2,r2,r5
    b39c:	003eb806 	br	ae80 <__adddf3+0x374>
    b3a0:	193ff804 	addi	r4,r3,-32
    b3a4:	19400820 	cmpeqi	r5,r3,32
    b3a8:	5108d83a 	srl	r4,r10,r4
    b3ac:	2800041e 	bne	r5,zero,b3c0 <__adddf3+0x8b4>
    b3b0:	01401004 	movi	r5,64
    b3b4:	28c7c83a 	sub	r3,r5,r3
    b3b8:	50d4983a 	sll	r10,r10,r3
    b3bc:	729cb03a 	or	r14,r14,r10
    b3c0:	7022c03a 	cmpne	r17,r14,zero
    b3c4:	8922b03a 	or	r17,r17,r4
    b3c8:	003edb06 	br	af38 <__adddf3+0x42c>
    b3cc:	7363883a 	add	r17,r14,r13
    b3d0:	5255883a 	add	r10,r10,r9
    b3d4:	8b51803a 	cmpltu	r8,r17,r13
    b3d8:	5211883a 	add	r8,r10,r8
    b3dc:	003f6206 	br	b168 <__adddf3+0x65c>
    b3e0:	8a04b03a 	or	r2,r17,r8
    b3e4:	103f0c26 	beq	r2,zero,b018 <__adddf3+0x50c>
    b3e8:	003e8306 	br	adf8 <__adddf3+0x2ec>
    b3ec:	0005883a 	mov	r2,zero
    b3f0:	00c1ffc4 	movi	r3,2047
    b3f4:	0011883a 	mov	r8,zero
    b3f8:	003e2a06 	br	aca4 <__adddf3+0x198>

0000b3fc <__divdf3>:
    b3fc:	2804d53a 	srli	r2,r5,20
    b400:	defff304 	addi	sp,sp,-52
    b404:	dc000315 	stw	r16,12(sp)
    b408:	04000434 	movhi	r16,16
    b40c:	ddc00a15 	stw	r23,40(sp)
    b410:	dd800915 	stw	r22,36(sp)
    b414:	dc800515 	stw	r18,20(sp)
    b418:	843fffc4 	addi	r16,r16,-1
    b41c:	dfc00c15 	stw	ra,48(sp)
    b420:	df000b15 	stw	fp,44(sp)
    b424:	dd400815 	stw	r21,32(sp)
    b428:	dd000715 	stw	r20,28(sp)
    b42c:	dcc00615 	stw	r19,24(sp)
    b430:	dc400415 	stw	r17,16(sp)
    b434:	1081ffcc 	andi	r2,r2,2047
    b438:	282cd7fa 	srli	r22,r5,31
    b43c:	302f883a 	mov	r23,r6
    b440:	2025883a 	mov	r18,r4
    b444:	2c20703a 	and	r16,r5,r16
    b448:	10010d26 	beq	r2,zero,b880 <__divdf3+0x484>
    b44c:	10c1ffe0 	cmpeqi	r3,r2,2047
    b450:	1801201e 	bne	r3,zero,b8d4 <__divdf3+0x4d8>
    b454:	2028d77a 	srli	r20,r4,29
    b458:	800a90fa 	slli	r5,r16,3
    b45c:	202490fa 	slli	r18,r4,3
    b460:	14ff0044 	addi	r19,r2,-1023
    b464:	a14ab03a 	or	r5,r20,r5
    b468:	2d002034 	orhi	r20,r5,128
    b46c:	0021883a 	mov	r16,zero
    b470:	0039883a 	mov	fp,zero
    b474:	3804d53a 	srli	r2,r7,20
    b478:	00c00434 	movhi	r3,16
    b47c:	18ffffc4 	addi	r3,r3,-1
    b480:	1081ffcc 	andi	r2,r2,2047
    b484:	3810d7fa 	srli	r8,r7,31
    b488:	38e2703a 	and	r17,r7,r3
    b48c:	1000e926 	beq	r2,zero,b834 <__divdf3+0x438>
    b490:	10c1ffe0 	cmpeqi	r3,r2,2047
    b494:	1801161e 	bne	r3,zero,b8f0 <__divdf3+0x4f4>
    b498:	880690fa 	slli	r3,r17,3
    b49c:	b822d77a 	srli	r17,r23,29
    b4a0:	b81290fa 	slli	r9,r23,3
    b4a4:	10bf0044 	addi	r2,r2,-1023
    b4a8:	88c6b03a 	or	r3,r17,r3
    b4ac:	1c402034 	orhi	r17,r3,128
    b4b0:	98a7c83a 	sub	r19,r19,r2
    b4b4:	0007883a 	mov	r3,zero
    b4b8:	80800428 	cmpgeui	r2,r16,16
    b4bc:	b22af03a 	xor	r21,r22,r8
    b4c0:	1000391e 	bne	r2,zero,b5a8 <__divdf3+0x1ac>
    b4c4:	800490ba 	slli	r2,r16,2
    b4c8:	01800074 	movhi	r6,1
    b4cc:	118d883a 	add	r6,r2,r6
    b4d0:	30ad3617 	ldw	r2,-19240(r6)
    b4d4:	1000683a 	jmp	r2
    b4d8:	0000b5a8 	cmpgeui	zero,zero,726
    b4dc:	0000b584 	movi	zero,726
    b4e0:	0000b534 	movhi	zero,724
    b4e4:	0000b594 	movui	zero,726
    b4e8:	0000b534 	movhi	zero,724
    b4ec:	0000b954 	movui	zero,741
    b4f0:	0000b534 	movhi	zero,724
    b4f4:	0000b594 	movui	zero,726
    b4f8:	0000b584 	movi	zero,726
    b4fc:	0000b584 	movi	zero,726
    b500:	0000b954 	movui	zero,741
    b504:	0000b594 	movui	zero,726
    b508:	0000b518 	cmpnei	zero,zero,724
    b50c:	0000b518 	cmpnei	zero,zero,724
    b510:	0000b518 	cmpnei	zero,zero,724
    b514:	0000b9e4 	muli	zero,zero,743
    b518:	b02b883a 	mov	r21,r22
    b51c:	e08000a0 	cmpeqi	r2,fp,2
    b520:	1000181e 	bne	r2,zero,b584 <__divdf3+0x188>
    b524:	e08000e0 	cmpeqi	r2,fp,3
    b528:	1001bf1e 	bne	r2,zero,bc28 <__divdf3+0x82c>
    b52c:	e0800060 	cmpeqi	r2,fp,1
    b530:	1000ad26 	beq	r2,zero,b7e8 <__divdf3+0x3ec>
    b534:	0007883a 	mov	r3,zero
    b538:	000b883a 	mov	r5,zero
    b53c:	0025883a 	mov	r18,zero
    b540:	1806953a 	slli	r3,r3,20
    b544:	a82a97fa 	slli	r21,r21,31
    b548:	9005883a 	mov	r2,r18
    b54c:	1946b03a 	or	r3,r3,r5
    b550:	1d46b03a 	or	r3,r3,r21
    b554:	dfc00c17 	ldw	ra,48(sp)
    b558:	df000b17 	ldw	fp,44(sp)
    b55c:	ddc00a17 	ldw	r23,40(sp)
    b560:	dd800917 	ldw	r22,36(sp)
    b564:	dd400817 	ldw	r21,32(sp)
    b568:	dd000717 	ldw	r20,28(sp)
    b56c:	dcc00617 	ldw	r19,24(sp)
    b570:	dc800517 	ldw	r18,20(sp)
    b574:	dc400417 	ldw	r17,16(sp)
    b578:	dc000317 	ldw	r16,12(sp)
    b57c:	dec00d04 	addi	sp,sp,52
    b580:	f800283a 	ret
    b584:	00c1ffc4 	movi	r3,2047
    b588:	000b883a 	mov	r5,zero
    b58c:	0025883a 	mov	r18,zero
    b590:	003feb06 	br	b540 <__divdf3+0x144>
    b594:	402b883a 	mov	r21,r8
    b598:	8829883a 	mov	r20,r17
    b59c:	4825883a 	mov	r18,r9
    b5a0:	1839883a 	mov	fp,r3
    b5a4:	003fdd06 	br	b51c <__divdf3+0x120>
    b5a8:	8d012836 	bltu	r17,r20,ba4c <__divdf3+0x650>
    b5ac:	8d012626 	beq	r17,r20,ba48 <__divdf3+0x64c>
    b5b0:	9cffffc4 	addi	r19,r19,-1
    b5b4:	0021883a 	mov	r16,zero
    b5b8:	8806923a 	slli	r3,r17,8
    b5bc:	480cd63a 	srli	r6,r9,24
    b5c0:	4804923a 	slli	r2,r9,8
    b5c4:	1838d43a 	srli	fp,r3,16
    b5c8:	a009883a 	mov	r4,r20
    b5cc:	30ecb03a 	or	r22,r6,r3
    b5d0:	e00b883a 	mov	r5,fp
    b5d4:	d8800015 	stw	r2,0(sp)
    b5d8:	000aa4c0 	call	aa4c <__udivsi3>
    b5dc:	a009883a 	mov	r4,r20
    b5e0:	e00b883a 	mov	r5,fp
    b5e4:	d8800115 	stw	r2,4(sp)
    b5e8:	000aab00 	call	aab0 <__umodsi3>
    b5ec:	d8c00117 	ldw	r3,4(sp)
    b5f0:	1004943a 	slli	r2,r2,16
    b5f4:	9008d43a 	srli	r4,r18,16
    b5f8:	b47fffcc 	andi	r17,r22,65535
    b5fc:	88ef383a 	mul	r23,r17,r3
    b600:	2088b03a 	or	r4,r4,r2
    b604:	25c0042e 	bgeu	r4,r23,b618 <__divdf3+0x21c>
    b608:	2589883a 	add	r4,r4,r22
    b60c:	18bfffc4 	addi	r2,r3,-1
    b610:	2581412e 	bgeu	r4,r22,bb18 <__divdf3+0x71c>
    b614:	1007883a 	mov	r3,r2
    b618:	25efc83a 	sub	r23,r4,r23
    b61c:	e00b883a 	mov	r5,fp
    b620:	b809883a 	mov	r4,r23
    b624:	d8c00115 	stw	r3,4(sp)
    b628:	000aa4c0 	call	aa4c <__udivsi3>
    b62c:	b809883a 	mov	r4,r23
    b630:	e00b883a 	mov	r5,fp
    b634:	1029883a 	mov	r20,r2
    b638:	000aab00 	call	aab0 <__umodsi3>
    b63c:	1008943a 	slli	r4,r2,16
    b640:	8d13383a 	mul	r9,r17,r20
    b644:	94bfffcc 	andi	r18,r18,65535
    b648:	9108b03a 	or	r4,r18,r4
    b64c:	d8c00117 	ldw	r3,4(sp)
    b650:	2240042e 	bgeu	r4,r9,b664 <__divdf3+0x268>
    b654:	2589883a 	add	r4,r4,r22
    b658:	a0bfffc4 	addi	r2,r20,-1
    b65c:	25812a2e 	bgeu	r4,r22,bb08 <__divdf3+0x70c>
    b660:	1029883a 	mov	r20,r2
    b664:	180a943a 	slli	r5,r3,16
    b668:	d8800017 	ldw	r2,0(sp)
    b66c:	2249c83a 	sub	r4,r4,r9
    b670:	2d28b03a 	or	r20,r5,r20
    b674:	100ed43a 	srli	r7,r2,16
    b678:	123fffcc 	andi	r8,r2,65535
    b67c:	a00ad43a 	srli	r5,r20,16
    b680:	a0bfffcc 	andi	r2,r20,65535
    b684:	122f383a 	mul	r23,r2,r8
    b688:	2a15383a 	mul	r10,r5,r8
    b68c:	3887383a 	mul	r3,r7,r2
    b690:	b804d43a 	srli	r2,r23,16
    b694:	29cb383a 	mul	r5,r5,r7
    b698:	1a87883a 	add	r3,r3,r10
    b69c:	10c5883a 	add	r2,r2,r3
    b6a0:	1280022e 	bgeu	r2,r10,b6ac <__divdf3+0x2b0>
    b6a4:	00c00074 	movhi	r3,1
    b6a8:	28cb883a 	add	r5,r5,r3
    b6ac:	1006d43a 	srli	r3,r2,16
    b6b0:	1004943a 	slli	r2,r2,16
    b6b4:	bdffffcc 	andi	r23,r23,65535
    b6b8:	1947883a 	add	r3,r3,r5
    b6bc:	15ef883a 	add	r23,r2,r23
    b6c0:	20c00236 	bltu	r4,r3,b6cc <__divdf3+0x2d0>
    b6c4:	20c00b1e 	bne	r4,r3,b6f4 <__divdf3+0x2f8>
    b6c8:	85c00a2e 	bgeu	r16,r23,b6f4 <__divdf3+0x2f8>
    b6cc:	d8800017 	ldw	r2,0(sp)
    b6d0:	80a1883a 	add	r16,r16,r2
    b6d4:	8085803a 	cmpltu	r2,r16,r2
    b6d8:	1585883a 	add	r2,r2,r22
    b6dc:	2089883a 	add	r4,r4,r2
    b6e0:	a0bfffc4 	addi	r2,r20,-1
    b6e4:	b101042e 	bgeu	r22,r4,baf8 <__divdf3+0x6fc>
    b6e8:	20c13836 	bltu	r4,r3,bbcc <__divdf3+0x7d0>
    b6ec:	19013626 	beq	r3,r4,bbc8 <__divdf3+0x7cc>
    b6f0:	1029883a 	mov	r20,r2
    b6f4:	85efc83a 	sub	r23,r16,r23
    b6f8:	20c9c83a 	sub	r4,r4,r3
    b6fc:	85e1803a 	cmpltu	r16,r16,r23
    b700:	2421c83a 	sub	r16,r4,r16
    b704:	b4011e26 	beq	r22,r16,bb80 <__divdf3+0x784>
    b708:	8009883a 	mov	r4,r16
    b70c:	e00b883a 	mov	r5,fp
    b710:	da000215 	stw	r8,8(sp)
    b714:	d9c00115 	stw	r7,4(sp)
    b718:	000aa4c0 	call	aa4c <__udivsi3>
    b71c:	8009883a 	mov	r4,r16
    b720:	e00b883a 	mov	r5,fp
    b724:	1025883a 	mov	r18,r2
    b728:	000aab00 	call	aab0 <__umodsi3>
    b72c:	1004943a 	slli	r2,r2,16
    b730:	b808d43a 	srli	r4,r23,16
    b734:	8ca1383a 	mul	r16,r17,r18
    b738:	d9c00117 	ldw	r7,4(sp)
    b73c:	2088b03a 	or	r4,r4,r2
    b740:	da000217 	ldw	r8,8(sp)
    b744:	2400e536 	bltu	r4,r16,badc <__divdf3+0x6e0>
    b748:	2421c83a 	sub	r16,r4,r16
    b74c:	8009883a 	mov	r4,r16
    b750:	e00b883a 	mov	r5,fp
    b754:	da000215 	stw	r8,8(sp)
    b758:	d9c00115 	stw	r7,4(sp)
    b75c:	000aa4c0 	call	aa4c <__udivsi3>
    b760:	8009883a 	mov	r4,r16
    b764:	e00b883a 	mov	r5,fp
    b768:	1021883a 	mov	r16,r2
    b76c:	000aab00 	call	aab0 <__umodsi3>
    b770:	1004943a 	slli	r2,r2,16
    b774:	8c23383a 	mul	r17,r17,r16
    b778:	bdffffcc 	andi	r23,r23,65535
    b77c:	b8aeb03a 	or	r23,r23,r2
    b780:	d9c00117 	ldw	r7,4(sp)
    b784:	da000217 	ldw	r8,8(sp)
    b788:	bc40cd36 	bltu	r23,r17,bac0 <__divdf3+0x6c4>
    b78c:	9008943a 	slli	r4,r18,16
    b790:	bc63c83a 	sub	r17,r23,r17
    b794:	2424b03a 	or	r18,r4,r16
    b798:	900ad43a 	srli	r5,r18,16
    b79c:	90bfffcc 	andi	r2,r18,65535
    b7a0:	4089383a 	mul	r4,r8,r2
    b7a4:	3885383a 	mul	r2,r7,r2
    b7a8:	2a11383a 	mul	r8,r5,r8
    b7ac:	2006d43a 	srli	r3,r4,16
    b7b0:	394f383a 	mul	r7,r7,r5
    b7b4:	1205883a 	add	r2,r2,r8
    b7b8:	1887883a 	add	r3,r3,r2
    b7bc:	1a00022e 	bgeu	r3,r8,b7c8 <__divdf3+0x3cc>
    b7c0:	00800074 	movhi	r2,1
    b7c4:	388f883a 	add	r7,r7,r2
    b7c8:	1804d43a 	srli	r2,r3,16
    b7cc:	1806943a 	slli	r3,r3,16
    b7d0:	213fffcc 	andi	r4,r4,65535
    b7d4:	11cf883a 	add	r7,r2,r7
    b7d8:	1907883a 	add	r3,r3,r4
    b7dc:	89c09336 	bltu	r17,r7,ba2c <__divdf3+0x630>
    b7e0:	89c09126 	beq	r17,r7,ba28 <__divdf3+0x62c>
    b7e4:	94800054 	ori	r18,r18,1
    b7e8:	9980ffc4 	addi	r6,r19,1023
    b7ec:	0180600e 	bge	zero,r6,b970 <__divdf3+0x574>
    b7f0:	908001cc 	andi	r2,r18,7
    b7f4:	1000e81e 	bne	r2,zero,bb98 <__divdf3+0x79c>
    b7f8:	900ed0fa 	srli	r7,r18,3
    b7fc:	a080402c 	andhi	r2,r20,256
    b800:	10000426 	beq	r2,zero,b814 <__divdf3+0x418>
    b804:	00bfc034 	movhi	r2,65280
    b808:	10bfffc4 	addi	r2,r2,-1
    b80c:	a0a8703a 	and	r20,r20,r2
    b810:	99810004 	addi	r6,r19,1024
    b814:	3081ffc8 	cmpgei	r2,r6,2047
    b818:	103f5a1e 	bne	r2,zero,b584 <__divdf3+0x188>
    b81c:	a008977a 	slli	r4,r20,29
    b820:	a00a927a 	slli	r5,r20,9
    b824:	30c1ffcc 	andi	r3,r6,2047
    b828:	21e4b03a 	or	r18,r4,r7
    b82c:	280ad33a 	srli	r5,r5,12
    b830:	003f4306 	br	b540 <__divdf3+0x144>
    b834:	8dd2b03a 	or	r9,r17,r23
    b838:	48004226 	beq	r9,zero,b944 <__divdf3+0x548>
    b83c:	da000015 	stw	r8,0(sp)
    b840:	88009326 	beq	r17,zero,ba90 <__divdf3+0x694>
    b844:	8809883a 	mov	r4,r17
    b848:	000d0380 	call	d038 <__clzsi2>
    b84c:	da000017 	ldw	r8,0(sp)
    b850:	117ffd44 	addi	r5,r2,-11
    b854:	01000744 	movi	r4,29
    b858:	127ffe04 	addi	r9,r2,-8
    b85c:	2149c83a 	sub	r4,r4,r5
    b860:	8a46983a 	sll	r3,r17,r9
    b864:	b908d83a 	srl	r4,r23,r4
    b868:	ba52983a 	sll	r9,r23,r9
    b86c:	20e2b03a 	or	r17,r4,r3
    b870:	14c5883a 	add	r2,r2,r19
    b874:	14c0fcc4 	addi	r19,r2,1011
    b878:	0007883a 	mov	r3,zero
    b87c:	003f0e06 	br	b4b8 <__divdf3+0xbc>
    b880:	8128b03a 	or	r20,r16,r4
    b884:	2023883a 	mov	r17,r4
    b888:	a0002926 	beq	r20,zero,b930 <__divdf3+0x534>
    b88c:	d9c00015 	stw	r7,0(sp)
    b890:	80007426 	beq	r16,zero,ba64 <__divdf3+0x668>
    b894:	8009883a 	mov	r4,r16
    b898:	000d0380 	call	d038 <__clzsi2>
    b89c:	d9c00017 	ldw	r7,0(sp)
    b8a0:	10fffd44 	addi	r3,r2,-11
    b8a4:	05000744 	movi	r20,29
    b8a8:	113ffe04 	addi	r4,r2,-8
    b8ac:	a0e9c83a 	sub	r20,r20,r3
    b8b0:	810a983a 	sll	r5,r16,r4
    b8b4:	8d28d83a 	srl	r20,r17,r20
    b8b8:	8924983a 	sll	r18,r17,r4
    b8bc:	a168b03a 	or	r20,r20,r5
    b8c0:	04ff0344 	movi	r19,-1011
    b8c4:	98a7c83a 	sub	r19,r19,r2
    b8c8:	0021883a 	mov	r16,zero
    b8cc:	0039883a 	mov	fp,zero
    b8d0:	003ee806 	br	b474 <__divdf3+0x78>
    b8d4:	8128b03a 	or	r20,r16,r4
    b8d8:	a000101e 	bne	r20,zero,b91c <__divdf3+0x520>
    b8dc:	0025883a 	mov	r18,zero
    b8e0:	04000204 	movi	r16,8
    b8e4:	04c1ffc4 	movi	r19,2047
    b8e8:	07000084 	movi	fp,2
    b8ec:	003ee106 	br	b474 <__divdf3+0x78>
    b8f0:	8dd2b03a 	or	r9,r17,r23
    b8f4:	9cfe0044 	addi	r19,r19,-2047
    b8f8:	4800041e 	bne	r9,zero,b90c <__divdf3+0x510>
    b8fc:	84000094 	ori	r16,r16,2
    b900:	0023883a 	mov	r17,zero
    b904:	00c00084 	movi	r3,2
    b908:	003eeb06 	br	b4b8 <__divdf3+0xbc>
    b90c:	840000d4 	ori	r16,r16,3
    b910:	b813883a 	mov	r9,r23
    b914:	00c000c4 	movi	r3,3
    b918:	003ee706 	br	b4b8 <__divdf3+0xbc>
    b91c:	8029883a 	mov	r20,r16
    b920:	04c1ffc4 	movi	r19,2047
    b924:	04000304 	movi	r16,12
    b928:	070000c4 	movi	fp,3
    b92c:	003ed106 	br	b474 <__divdf3+0x78>
    b930:	0025883a 	mov	r18,zero
    b934:	04000104 	movi	r16,4
    b938:	0027883a 	mov	r19,zero
    b93c:	07000044 	movi	fp,1
    b940:	003ecc06 	br	b474 <__divdf3+0x78>
    b944:	84000054 	ori	r16,r16,1
    b948:	0023883a 	mov	r17,zero
    b94c:	00c00044 	movi	r3,1
    b950:	003ed906 	br	b4b8 <__divdf3+0xbc>
    b954:	01400434 	movhi	r5,16
    b958:	002b883a 	mov	r21,zero
    b95c:	297fffc4 	addi	r5,r5,-1
    b960:	04bfffc4 	movi	r18,-1
    b964:	00c1ffc4 	movi	r3,2047
    b968:	003ef506 	br	b540 <__divdf3+0x144>
    b96c:	04bfffc4 	movi	r18,-1
    b970:	01400044 	movi	r5,1
    b974:	298bc83a 	sub	r5,r5,r6
    b978:	28800e48 	cmpgei	r2,r5,57
    b97c:	103eed1e 	bne	r2,zero,b534 <__divdf3+0x138>
    b980:	28800808 	cmpgei	r2,r5,32
    b984:	1000681e 	bne	r2,zero,bb28 <__divdf3+0x72c>
    b988:	98810784 	addi	r2,r19,1054
    b98c:	a086983a 	sll	r3,r20,r2
    b990:	9148d83a 	srl	r4,r18,r5
    b994:	9084983a 	sll	r2,r18,r2
    b998:	a14ad83a 	srl	r5,r20,r5
    b99c:	1924b03a 	or	r18,r3,r4
    b9a0:	1004c03a 	cmpne	r2,r2,zero
    b9a4:	90a4b03a 	or	r18,r18,r2
    b9a8:	908001cc 	andi	r2,r18,7
    b9ac:	10000726 	beq	r2,zero,b9cc <__divdf3+0x5d0>
    b9b0:	908003cc 	andi	r2,r18,15
    b9b4:	10800120 	cmpeqi	r2,r2,4
    b9b8:	1000041e 	bne	r2,zero,b9cc <__divdf3+0x5d0>
    b9bc:	90800104 	addi	r2,r18,4
    b9c0:	14a5803a 	cmpltu	r18,r2,r18
    b9c4:	2c8b883a 	add	r5,r5,r18
    b9c8:	1025883a 	mov	r18,r2
    b9cc:	2880202c 	andhi	r2,r5,128
    b9d0:	10009126 	beq	r2,zero,bc18 <__divdf3+0x81c>
    b9d4:	00c00044 	movi	r3,1
    b9d8:	000b883a 	mov	r5,zero
    b9dc:	0025883a 	mov	r18,zero
    b9e0:	003ed706 	br	b540 <__divdf3+0x144>
    b9e4:	a080022c 	andhi	r2,r20,8
    b9e8:	10000926 	beq	r2,zero,ba10 <__divdf3+0x614>
    b9ec:	8880022c 	andhi	r2,r17,8
    b9f0:	1000071e 	bne	r2,zero,ba10 <__divdf3+0x614>
    b9f4:	00800434 	movhi	r2,16
    b9f8:	89400234 	orhi	r5,r17,8
    b9fc:	10bfffc4 	addi	r2,r2,-1
    ba00:	288a703a 	and	r5,r5,r2
    ba04:	402b883a 	mov	r21,r8
    ba08:	4825883a 	mov	r18,r9
    ba0c:	003fd506 	br	b964 <__divdf3+0x568>
    ba10:	00800434 	movhi	r2,16
    ba14:	a1400234 	orhi	r5,r20,8
    ba18:	10bfffc4 	addi	r2,r2,-1
    ba1c:	288a703a 	and	r5,r5,r2
    ba20:	b02b883a 	mov	r21,r22
    ba24:	003fcf06 	br	b964 <__divdf3+0x568>
    ba28:	183f6f26 	beq	r3,zero,b7e8 <__divdf3+0x3ec>
    ba2c:	b463883a 	add	r17,r22,r17
    ba30:	90bfffc4 	addi	r2,r18,-1
    ba34:	8d804d36 	bltu	r17,r22,bb6c <__divdf3+0x770>
    ba38:	89c06b36 	bltu	r17,r7,bbe8 <__divdf3+0x7ec>
    ba3c:	89c07f26 	beq	r17,r7,bc3c <__divdf3+0x840>
    ba40:	1025883a 	mov	r18,r2
    ba44:	003f6706 	br	b7e4 <__divdf3+0x3e8>
    ba48:	927ed936 	bltu	r18,r9,b5b0 <__divdf3+0x1b4>
    ba4c:	a00897fa 	slli	r4,r20,31
    ba50:	9004d07a 	srli	r2,r18,1
    ba54:	902097fa 	slli	r16,r18,31
    ba58:	a028d07a 	srli	r20,r20,1
    ba5c:	20a4b03a 	or	r18,r4,r2
    ba60:	003ed506 	br	b5b8 <__divdf3+0x1bc>
    ba64:	000d0380 	call	d038 <__clzsi2>
    ba68:	10c00544 	addi	r3,r2,21
    ba6c:	19000748 	cmpgei	r4,r3,29
    ba70:	100b883a 	mov	r5,r2
    ba74:	d9c00017 	ldw	r7,0(sp)
    ba78:	10800804 	addi	r2,r2,32
    ba7c:	203f8926 	beq	r4,zero,b8a4 <__divdf3+0x4a8>
    ba80:	297ffe04 	addi	r5,r5,-8
    ba84:	9168983a 	sll	r20,r18,r5
    ba88:	0025883a 	mov	r18,zero
    ba8c:	003f8c06 	br	b8c0 <__divdf3+0x4c4>
    ba90:	b809883a 	mov	r4,r23
    ba94:	000d0380 	call	d038 <__clzsi2>
    ba98:	11400544 	addi	r5,r2,21
    ba9c:	29000748 	cmpgei	r4,r5,29
    baa0:	1007883a 	mov	r3,r2
    baa4:	da000017 	ldw	r8,0(sp)
    baa8:	10800804 	addi	r2,r2,32
    baac:	203f6926 	beq	r4,zero,b854 <__divdf3+0x458>
    bab0:	18fffe04 	addi	r3,r3,-8
    bab4:	b8e2983a 	sll	r17,r23,r3
    bab8:	0013883a 	mov	r9,zero
    babc:	003f6c06 	br	b870 <__divdf3+0x474>
    bac0:	bdaf883a 	add	r23,r23,r22
    bac4:	80bfffc4 	addi	r2,r16,-1
    bac8:	bd803b36 	bltu	r23,r22,bbb8 <__divdf3+0x7bc>
    bacc:	bc403a2e 	bgeu	r23,r17,bbb8 <__divdf3+0x7bc>
    bad0:	843fff84 	addi	r16,r16,-2
    bad4:	bdaf883a 	add	r23,r23,r22
    bad8:	003f2c06 	br	b78c <__divdf3+0x390>
    badc:	2589883a 	add	r4,r4,r22
    bae0:	90bfffc4 	addi	r2,r18,-1
    bae4:	25803636 	bltu	r4,r22,bbc0 <__divdf3+0x7c4>
    bae8:	2400352e 	bgeu	r4,r16,bbc0 <__divdf3+0x7c4>
    baec:	94bfff84 	addi	r18,r18,-2
    baf0:	2589883a 	add	r4,r4,r22
    baf4:	003f1406 	br	b748 <__divdf3+0x34c>
    baf8:	b13efd1e 	bne	r22,r4,b6f0 <__divdf3+0x2f4>
    bafc:	d9400017 	ldw	r5,0(sp)
    bb00:	817efb36 	bltu	r16,r5,b6f0 <__divdf3+0x2f4>
    bb04:	003ef806 	br	b6e8 <__divdf3+0x2ec>
    bb08:	227ed52e 	bgeu	r4,r9,b660 <__divdf3+0x264>
    bb0c:	a53fff84 	addi	r20,r20,-2
    bb10:	2589883a 	add	r4,r4,r22
    bb14:	003ed306 	br	b664 <__divdf3+0x268>
    bb18:	25febe2e 	bgeu	r4,r23,b614 <__divdf3+0x218>
    bb1c:	18ffff84 	addi	r3,r3,-2
    bb20:	2589883a 	add	r4,r4,r22
    bb24:	003ebc06 	br	b618 <__divdf3+0x21c>
    bb28:	00fff844 	movi	r3,-31
    bb2c:	1987c83a 	sub	r3,r3,r6
    bb30:	29400820 	cmpeqi	r5,r5,32
    bb34:	a0c6d83a 	srl	r3,r20,r3
    bb38:	2800031e 	bne	r5,zero,bb48 <__divdf3+0x74c>
    bb3c:	99410f84 	addi	r5,r19,1086
    bb40:	a14a983a 	sll	r5,r20,r5
    bb44:	9164b03a 	or	r18,r18,r5
    bb48:	9024c03a 	cmpne	r18,r18,zero
    bb4c:	90e4b03a 	or	r18,r18,r3
    bb50:	910001cc 	andi	r4,r18,7
    bb54:	20002c1e 	bne	r4,zero,bc08 <__divdf3+0x80c>
    bb58:	000b883a 	mov	r5,zero
    bb5c:	9024d0fa 	srli	r18,r18,3
    bb60:	0007883a 	mov	r3,zero
    bb64:	9124b03a 	or	r18,r18,r4
    bb68:	003e7506 	br	b540 <__divdf3+0x144>
    bb6c:	1025883a 	mov	r18,r2
    bb70:	89ff1c1e 	bne	r17,r7,b7e4 <__divdf3+0x3e8>
    bb74:	d8800017 	ldw	r2,0(sp)
    bb78:	18bf1a1e 	bne	r3,r2,b7e4 <__divdf3+0x3e8>
    bb7c:	003f1a06 	br	b7e8 <__divdf3+0x3ec>
    bb80:	9980ffc4 	addi	r6,r19,1023
    bb84:	01bf790e 	bge	zero,r6,b96c <__divdf3+0x570>
    bb88:	000f883a 	mov	r7,zero
    bb8c:	01000044 	movi	r4,1
    bb90:	a129883a 	add	r20,r20,r4
    bb94:	003f1906 	br	b7fc <__divdf3+0x400>
    bb98:	908003cc 	andi	r2,r18,15
    bb9c:	10800118 	cmpnei	r2,r2,4
    bba0:	103f1526 	beq	r2,zero,b7f8 <__divdf3+0x3fc>
    bba4:	91c00104 	addi	r7,r18,4
    bba8:	013ffec4 	movi	r4,-5
    bbac:	380ed0fa 	srli	r7,r7,3
    bbb0:	2489803a 	cmpltu	r4,r4,r18
    bbb4:	003ff606 	br	bb90 <__divdf3+0x794>
    bbb8:	1021883a 	mov	r16,r2
    bbbc:	003ef306 	br	b78c <__divdf3+0x390>
    bbc0:	1025883a 	mov	r18,r2
    bbc4:	003ee006 	br	b748 <__divdf3+0x34c>
    bbc8:	85fec92e 	bgeu	r16,r23,b6f0 <__divdf3+0x2f4>
    bbcc:	d8800017 	ldw	r2,0(sp)
    bbd0:	a53fff84 	addi	r20,r20,-2
    bbd4:	80a1883a 	add	r16,r16,r2
    bbd8:	8085803a 	cmpltu	r2,r16,r2
    bbdc:	1585883a 	add	r2,r2,r22
    bbe0:	2089883a 	add	r4,r4,r2
    bbe4:	003ec306 	br	b6f4 <__divdf3+0x2f8>
    bbe8:	d9000017 	ldw	r4,0(sp)
    bbec:	94bfff84 	addi	r18,r18,-2
    bbf0:	2105883a 	add	r2,r4,r4
    bbf4:	1109803a 	cmpltu	r4,r2,r4
    bbf8:	258d883a 	add	r6,r4,r22
    bbfc:	89a3883a 	add	r17,r17,r6
    bc00:	d8800015 	stw	r2,0(sp)
    bc04:	003fda06 	br	bb70 <__divdf3+0x774>
    bc08:	908003cc 	andi	r2,r18,15
    bc0c:	10800118 	cmpnei	r2,r2,4
    bc10:	000b883a 	mov	r5,zero
    bc14:	103f691e 	bne	r2,zero,b9bc <__divdf3+0x5c0>
    bc18:	2804927a 	slli	r2,r5,9
    bc1c:	2808977a 	slli	r4,r5,29
    bc20:	100ad33a 	srli	r5,r2,12
    bc24:	003fcd06 	br	bb5c <__divdf3+0x760>
    bc28:	00800434 	movhi	r2,16
    bc2c:	a1400234 	orhi	r5,r20,8
    bc30:	10bfffc4 	addi	r2,r2,-1
    bc34:	288a703a 	and	r5,r5,r2
    bc38:	003f4a06 	br	b964 <__divdf3+0x568>
    bc3c:	d9000017 	ldw	r4,0(sp)
    bc40:	20ffe936 	bltu	r4,r3,bbe8 <__divdf3+0x7ec>
    bc44:	1025883a 	mov	r18,r2
    bc48:	003fca06 	br	bb74 <__divdf3+0x778>

0000bc4c <__eqdf2>:
    bc4c:	2810d53a 	srli	r8,r5,20
    bc50:	3806d53a 	srli	r3,r7,20
    bc54:	00800434 	movhi	r2,16
    bc58:	4201ffcc 	andi	r8,r8,2047
    bc5c:	10bfffc4 	addi	r2,r2,-1
    bc60:	4241ffd8 	cmpnei	r9,r8,2047
    bc64:	2814d7fa 	srli	r10,r5,31
    bc68:	3816d7fa 	srli	r11,r7,31
    bc6c:	288a703a 	and	r5,r5,r2
    bc70:	388e703a 	and	r7,r7,r2
    bc74:	1881ffcc 	andi	r2,r3,2047
    bc78:	48000626 	beq	r9,zero,bc94 <__eqdf2+0x48>
    bc7c:	10c1ffe0 	cmpeqi	r3,r2,2047
    bc80:	1800021e 	bne	r3,zero,bc8c <__eqdf2+0x40>
    bc84:	4080011e 	bne	r8,r2,bc8c <__eqdf2+0x40>
    bc88:	29c00826 	beq	r5,r7,bcac <__eqdf2+0x60>
    bc8c:	00800044 	movi	r2,1
    bc90:	f800283a 	ret
    bc94:	2906b03a 	or	r3,r5,r4
    bc98:	183ffc1e 	bne	r3,zero,bc8c <__eqdf2+0x40>
    bc9c:	1081ffd8 	cmpnei	r2,r2,2047
    bca0:	103ffa1e 	bne	r2,zero,bc8c <__eqdf2+0x40>
    bca4:	398eb03a 	or	r7,r7,r6
    bca8:	383ff81e 	bne	r7,zero,bc8c <__eqdf2+0x40>
    bcac:	21bff71e 	bne	r4,r6,bc8c <__eqdf2+0x40>
    bcb0:	52c00426 	beq	r10,r11,bcc4 <__eqdf2+0x78>
    bcb4:	403ff51e 	bne	r8,zero,bc8c <__eqdf2+0x40>
    bcb8:	290ab03a 	or	r5,r5,r4
    bcbc:	2804c03a 	cmpne	r2,r5,zero
    bcc0:	f800283a 	ret
    bcc4:	0005883a 	mov	r2,zero
    bcc8:	f800283a 	ret

0000bccc <__gedf2>:
    bccc:	2810d53a 	srli	r8,r5,20
    bcd0:	3812d53a 	srli	r9,r7,20
    bcd4:	00c00434 	movhi	r3,16
    bcd8:	4201ffcc 	andi	r8,r8,2047
    bcdc:	18ffffc4 	addi	r3,r3,-1
    bce0:	4281ffd8 	cmpnei	r10,r8,2047
    bce4:	2816d7fa 	srli	r11,r5,31
    bce8:	3804d7fa 	srli	r2,r7,31
    bcec:	28ca703a 	and	r5,r5,r3
    bcf0:	38ce703a 	and	r7,r7,r3
    bcf4:	48c1ffcc 	andi	r3,r9,2047
    bcf8:	50000a26 	beq	r10,zero,bd24 <__gedf2+0x58>
    bcfc:	1a41ffd8 	cmpnei	r9,r3,2047
    bd00:	48000c26 	beq	r9,zero,bd34 <__gedf2+0x68>
    bd04:	4000171e 	bne	r8,zero,bd64 <__gedf2+0x98>
    bd08:	2912b03a 	or	r9,r5,r4
    bd0c:	1800121e 	bne	r3,zero,bd58 <__gedf2+0x8c>
    bd10:	3994b03a 	or	r10,r7,r6
    bd14:	5000101e 	bne	r10,zero,bd58 <__gedf2+0x8c>
    bd18:	48000a1e 	bne	r9,zero,bd44 <__gedf2+0x78>
    bd1c:	0005883a 	mov	r2,zero
    bd20:	f800283a 	ret
    bd24:	2912b03a 	or	r9,r5,r4
    bd28:	48001d1e 	bne	r9,zero,bda0 <__gedf2+0xd4>
    bd2c:	1a41ffe0 	cmpeqi	r9,r3,2047
    bd30:	48000c26 	beq	r9,zero,bd64 <__gedf2+0x98>
    bd34:	3992b03a 	or	r9,r7,r6
    bd38:	4800191e 	bne	r9,zero,bda0 <__gedf2+0xd4>
    bd3c:	40000526 	beq	r8,zero,bd54 <__gedf2+0x88>
    bd40:	58800c26 	beq	r11,r2,bd74 <__gedf2+0xa8>
    bd44:	00800044 	movi	r2,1
    bd48:	58000526 	beq	r11,zero,bd60 <__gedf2+0x94>
    bd4c:	00bfffc4 	movi	r2,-1
    bd50:	f800283a 	ret
    bd54:	2912b03a 	or	r9,r5,r4
    bd58:	483ff91e 	bne	r9,zero,bd40 <__gedf2+0x74>
    bd5c:	103ffb26 	beq	r2,zero,bd4c <__gedf2+0x80>
    bd60:	f800283a 	ret
    bd64:	183ff61e 	bne	r3,zero,bd40 <__gedf2+0x74>
    bd68:	3992b03a 	or	r9,r7,r6
    bd6c:	483ff41e 	bne	r9,zero,bd40 <__gedf2+0x74>
    bd70:	003ff406 	br	bd44 <__gedf2+0x78>
    bd74:	1a000716 	blt	r3,r8,bd94 <__gedf2+0xc8>
    bd78:	40fff816 	blt	r8,r3,bd5c <__gedf2+0x90>
    bd7c:	397ff136 	bltu	r7,r5,bd44 <__gedf2+0x78>
    bd80:	29c00926 	beq	r5,r7,bda8 <__gedf2+0xdc>
    bd84:	29ffe52e 	bgeu	r5,r7,bd1c <__gedf2+0x50>
    bd88:	583ff026 	beq	r11,zero,bd4c <__gedf2+0x80>
    bd8c:	5805883a 	mov	r2,r11
    bd90:	f800283a 	ret
    bd94:	103fed1e 	bne	r2,zero,bd4c <__gedf2+0x80>
    bd98:	00800044 	movi	r2,1
    bd9c:	f800283a 	ret
    bda0:	00bfff84 	movi	r2,-2
    bda4:	f800283a 	ret
    bda8:	313fe636 	bltu	r6,r4,bd44 <__gedf2+0x78>
    bdac:	21bfdb2e 	bgeu	r4,r6,bd1c <__gedf2+0x50>
    bdb0:	003ff506 	br	bd88 <__gedf2+0xbc>

0000bdb4 <__ledf2>:
    bdb4:	2810d53a 	srli	r8,r5,20
    bdb8:	3812d53a 	srli	r9,r7,20
    bdbc:	00c00434 	movhi	r3,16
    bdc0:	4201ffcc 	andi	r8,r8,2047
    bdc4:	18ffffc4 	addi	r3,r3,-1
    bdc8:	4281ffd8 	cmpnei	r10,r8,2047
    bdcc:	2816d7fa 	srli	r11,r5,31
    bdd0:	3804d7fa 	srli	r2,r7,31
    bdd4:	28ca703a 	and	r5,r5,r3
    bdd8:	38ce703a 	and	r7,r7,r3
    bddc:	48c1ffcc 	andi	r3,r9,2047
    bde0:	50000a26 	beq	r10,zero,be0c <__ledf2+0x58>
    bde4:	1a41ffd8 	cmpnei	r9,r3,2047
    bde8:	48000c26 	beq	r9,zero,be1c <__ledf2+0x68>
    bdec:	4000191e 	bne	r8,zero,be54 <__ledf2+0xa0>
    bdf0:	2912b03a 	or	r9,r5,r4
    bdf4:	18000d1e 	bne	r3,zero,be2c <__ledf2+0x78>
    bdf8:	3994b03a 	or	r10,r7,r6
    bdfc:	50000b1e 	bne	r10,zero,be2c <__ledf2+0x78>
    be00:	48000c1e 	bne	r9,zero,be34 <__ledf2+0x80>
    be04:	0005883a 	mov	r2,zero
    be08:	f800283a 	ret
    be0c:	2912b03a 	or	r9,r5,r4
    be10:	48000c1e 	bne	r9,zero,be44 <__ledf2+0x90>
    be14:	1a41ffe0 	cmpeqi	r9,r3,2047
    be18:	48000e26 	beq	r9,zero,be54 <__ledf2+0xa0>
    be1c:	3992b03a 	or	r9,r7,r6
    be20:	4800081e 	bne	r9,zero,be44 <__ledf2+0x90>
    be24:	4000021e 	bne	r8,zero,be30 <__ledf2+0x7c>
    be28:	2912b03a 	or	r9,r5,r4
    be2c:	48000726 	beq	r9,zero,be4c <__ledf2+0x98>
    be30:	58800c26 	beq	r11,r2,be64 <__ledf2+0xb0>
    be34:	00800044 	movi	r2,1
    be38:	58000526 	beq	r11,zero,be50 <__ledf2+0x9c>
    be3c:	00bfffc4 	movi	r2,-1
    be40:	f800283a 	ret
    be44:	00800084 	movi	r2,2
    be48:	f800283a 	ret
    be4c:	103ffb26 	beq	r2,zero,be3c <__ledf2+0x88>
    be50:	f800283a 	ret
    be54:	183ff61e 	bne	r3,zero,be30 <__ledf2+0x7c>
    be58:	3992b03a 	or	r9,r7,r6
    be5c:	483ff41e 	bne	r9,zero,be30 <__ledf2+0x7c>
    be60:	003ff406 	br	be34 <__ledf2+0x80>
    be64:	1a00030e 	bge	r3,r8,be74 <__ledf2+0xc0>
    be68:	103ff41e 	bne	r2,zero,be3c <__ledf2+0x88>
    be6c:	00800044 	movi	r2,1
    be70:	f800283a 	ret
    be74:	40fff516 	blt	r8,r3,be4c <__ledf2+0x98>
    be78:	397fee36 	bltu	r7,r5,be34 <__ledf2+0x80>
    be7c:	29c00426 	beq	r5,r7,be90 <__ledf2+0xdc>
    be80:	29ffe02e 	bgeu	r5,r7,be04 <__ledf2+0x50>
    be84:	583fed26 	beq	r11,zero,be3c <__ledf2+0x88>
    be88:	5805883a 	mov	r2,r11
    be8c:	f800283a 	ret
    be90:	313fe836 	bltu	r6,r4,be34 <__ledf2+0x80>
    be94:	21bfdb2e 	bgeu	r4,r6,be04 <__ledf2+0x50>
    be98:	003ffa06 	br	be84 <__ledf2+0xd0>

0000be9c <__muldf3>:
    be9c:	2804d53a 	srli	r2,r5,20
    bea0:	defff504 	addi	sp,sp,-44
    bea4:	02000434 	movhi	r8,16
    bea8:	df000915 	stw	fp,36(sp)
    beac:	dd000515 	stw	r20,20(sp)
    beb0:	dcc00415 	stw	r19,16(sp)
    beb4:	dc000115 	stw	r16,4(sp)
    beb8:	423fffc4 	addi	r8,r8,-1
    bebc:	dfc00a15 	stw	ra,40(sp)
    bec0:	ddc00815 	stw	r23,32(sp)
    bec4:	dd800715 	stw	r22,28(sp)
    bec8:	dd400615 	stw	r21,24(sp)
    becc:	dc800315 	stw	r18,12(sp)
    bed0:	dc400215 	stw	r17,8(sp)
    bed4:	1081ffcc 	andi	r2,r2,2047
    bed8:	2828d7fa 	srli	r20,r5,31
    bedc:	2027883a 	mov	r19,r4
    bee0:	3039883a 	mov	fp,r6
    bee4:	2a20703a 	and	r16,r5,r8
    bee8:	1000e726 	beq	r2,zero,c288 <__muldf3+0x3ec>
    beec:	10c1ffe0 	cmpeqi	r3,r2,2047
    bef0:	1800f91e 	bne	r3,zero,c2d8 <__muldf3+0x43c>
    bef4:	800a90fa 	slli	r5,r16,3
    bef8:	2020d77a 	srli	r16,r4,29
    befc:	202490fa 	slli	r18,r4,3
    bf00:	14ff0044 	addi	r19,r2,-1023
    bf04:	8160b03a 	or	r16,r16,r5
    bf08:	84002034 	orhi	r16,r16,128
    bf0c:	002b883a 	mov	r21,zero
    bf10:	002d883a 	mov	r22,zero
    bf14:	3804d53a 	srli	r2,r7,20
    bf18:	00c00434 	movhi	r3,16
    bf1c:	18ffffc4 	addi	r3,r3,-1
    bf20:	1081ffcc 	andi	r2,r2,2047
    bf24:	382ed7fa 	srli	r23,r7,31
    bf28:	38e2703a 	and	r17,r7,r3
    bf2c:	1000c526 	beq	r2,zero,c244 <__muldf3+0x3a8>
    bf30:	10c1ffe0 	cmpeqi	r3,r2,2047
    bf34:	1800ef1e 	bne	r3,zero,c2f4 <__muldf3+0x458>
    bf38:	880690fa 	slli	r3,r17,3
    bf3c:	e022d77a 	srli	r17,fp,29
    bf40:	e00a90fa 	slli	r5,fp,3
    bf44:	10bf0044 	addi	r2,r2,-1023
    bf48:	88e2b03a 	or	r17,r17,r3
    bf4c:	8c402034 	orhi	r17,r17,128
    bf50:	98a7883a 	add	r19,r19,r2
    bf54:	0007883a 	mov	r3,zero
    bf58:	a8800428 	cmpgeui	r2,r21,16
    bf5c:	a5ccf03a 	xor	r6,r20,r23
    bf60:	9a000044 	addi	r8,r19,1
    bf64:	1000371e 	bne	r2,zero,c044 <__muldf3+0x1a8>
    bf68:	a80490ba 	slli	r2,r21,2
    bf6c:	01000074 	movhi	r4,1
    bf70:	1109883a 	add	r4,r2,r4
    bf74:	20afdf17 	ldw	r2,-16516(r4)
    bf78:	1000683a 	jmp	r2
    bf7c:	0000c044 	movi	zero,769
    bf80:	0000bfc0 	call	bfc <___vfprintf_internal_r+0x63c>
    bf84:	0000bfc0 	call	bfc <___vfprintf_internal_r+0x63c>
    bf88:	0000bfbc 	xorhi	zero,zero,766
    bf8c:	0000bfcc 	andi	zero,zero,767
    bf90:	0000bfcc 	andi	zero,zero,767
    bf94:	0000c368 	cmpgeui	zero,zero,781
    bf98:	0000bfbc 	xorhi	zero,zero,766
    bf9c:	0000bfcc 	andi	zero,zero,767
    bfa0:	0000c368 	cmpgeui	zero,zero,781
    bfa4:	0000bfcc 	andi	zero,zero,767
    bfa8:	0000bfbc 	xorhi	zero,zero,766
    bfac:	0000c310 	cmplti	zero,zero,780
    bfb0:	0000c310 	cmplti	zero,zero,780
    bfb4:	0000c310 	cmplti	zero,zero,780
    bfb8:	0000c3f4 	movhi	zero,783
    bfbc:	b80d883a 	mov	r6,r23
    bfc0:	8821883a 	mov	r16,r17
    bfc4:	2825883a 	mov	r18,r5
    bfc8:	182d883a 	mov	r22,r3
    bfcc:	b08000a0 	cmpeqi	r2,r22,2
    bfd0:	1000181e 	bne	r2,zero,c034 <__muldf3+0x198>
    bfd4:	b08000e0 	cmpeqi	r2,r22,3
    bfd8:	1001481e 	bne	r2,zero,c4fc <__muldf3+0x660>
    bfdc:	b0800060 	cmpeqi	r2,r22,1
    bfe0:	10007e26 	beq	r2,zero,c1dc <__muldf3+0x340>
    bfe4:	0007883a 	mov	r3,zero
    bfe8:	0021883a 	mov	r16,zero
    bfec:	0025883a 	mov	r18,zero
    bff0:	1806953a 	slli	r3,r3,20
    bff4:	300c97fa 	slli	r6,r6,31
    bff8:	9005883a 	mov	r2,r18
    bffc:	1c06b03a 	or	r3,r3,r16
    c000:	1986b03a 	or	r3,r3,r6
    c004:	dfc00a17 	ldw	ra,40(sp)
    c008:	df000917 	ldw	fp,36(sp)
    c00c:	ddc00817 	ldw	r23,32(sp)
    c010:	dd800717 	ldw	r22,28(sp)
    c014:	dd400617 	ldw	r21,24(sp)
    c018:	dd000517 	ldw	r20,20(sp)
    c01c:	dcc00417 	ldw	r19,16(sp)
    c020:	dc800317 	ldw	r18,12(sp)
    c024:	dc400217 	ldw	r17,8(sp)
    c028:	dc000117 	ldw	r16,4(sp)
    c02c:	dec00b04 	addi	sp,sp,44
    c030:	f800283a 	ret
    c034:	00c1ffc4 	movi	r3,2047
    c038:	0021883a 	mov	r16,zero
    c03c:	0025883a 	mov	r18,zero
    c040:	003feb06 	br	bff0 <__muldf3+0x154>
    c044:	9004d43a 	srli	r2,r18,16
    c048:	281ed43a 	srli	r15,r5,16
    c04c:	94bfffcc 	andi	r18,r18,65535
    c050:	297fffcc 	andi	r5,r5,65535
    c054:	2c89383a 	mul	r4,r5,r18
    c058:	114f383a 	mul	r7,r2,r5
    c05c:	7c87383a 	mul	r3,r15,r18
    c060:	2012d43a 	srli	r9,r4,16
    c064:	13dd383a 	mul	r14,r2,r15
    c068:	19c7883a 	add	r3,r3,r7
    c06c:	48d3883a 	add	r9,r9,r3
    c070:	49c0022e 	bgeu	r9,r7,c07c <__muldf3+0x1e0>
    c074:	00c00074 	movhi	r3,1
    c078:	70dd883a 	add	r14,r14,r3
    c07c:	881ad43a 	srli	r13,r17,16
    c080:	8c7fffcc 	andi	r17,r17,65535
    c084:	8c87383a 	mul	r3,r17,r18
    c088:	144f383a 	mul	r7,r2,r17
    c08c:	6ca5383a 	mul	r18,r13,r18
    c090:	1816d43a 	srli	r11,r3,16
    c094:	4814943a 	slli	r10,r9,16
    c098:	91e5883a 	add	r18,r18,r7
    c09c:	213fffcc 	andi	r4,r4,65535
    c0a0:	5c97883a 	add	r11,r11,r18
    c0a4:	4818d43a 	srli	r12,r9,16
    c0a8:	1345383a 	mul	r2,r2,r13
    c0ac:	5115883a 	add	r10,r10,r4
    c0b0:	59c0022e 	bgeu	r11,r7,c0bc <__muldf3+0x220>
    c0b4:	01000074 	movhi	r4,1
    c0b8:	1105883a 	add	r2,r2,r4
    c0bc:	8028d43a 	srli	r20,r16,16
    c0c0:	827fffcc 	andi	r9,r16,65535
    c0c4:	2a6b383a 	mul	r21,r5,r9
    c0c8:	7a49383a 	mul	r4,r15,r9
    c0cc:	a14b383a 	mul	r5,r20,r5
    c0d0:	580e943a 	slli	r7,r11,16
    c0d4:	a82cd43a 	srli	r22,r21,16
    c0d8:	5824d43a 	srli	r18,r11,16
    c0dc:	18ffffcc 	andi	r3,r3,65535
    c0e0:	2149883a 	add	r4,r4,r5
    c0e4:	38cf883a 	add	r7,r7,r3
    c0e8:	b109883a 	add	r4,r22,r4
    c0ec:	7d1f383a 	mul	r15,r15,r20
    c0f0:	9097883a 	add	r11,r18,r2
    c0f4:	61c7883a 	add	r3,r12,r7
    c0f8:	2140022e 	bgeu	r4,r5,c104 <__muldf3+0x268>
    c0fc:	00800074 	movhi	r2,1
    c100:	789f883a 	add	r15,r15,r2
    c104:	8a65383a 	mul	r18,r17,r9
    c108:	6a53383a 	mul	r9,r13,r9
    c10c:	a463383a 	mul	r17,r20,r17
    c110:	9020d43a 	srli	r16,r18,16
    c114:	200ad43a 	srli	r5,r4,16
    c118:	2008943a 	slli	r4,r4,16
    c11c:	4c53883a 	add	r9,r9,r17
    c120:	ab3fffcc 	andi	r12,r21,65535
    c124:	8253883a 	add	r9,r16,r9
    c128:	6d1b383a 	mul	r13,r13,r20
    c12c:	2bdf883a 	add	r15,r5,r15
    c130:	2309883a 	add	r4,r4,r12
    c134:	4c40022e 	bgeu	r9,r17,c140 <__muldf3+0x2a4>
    c138:	00800074 	movhi	r2,1
    c13c:	689b883a 	add	r13,r13,r2
    c140:	4804943a 	slli	r2,r9,16
    c144:	917fffcc 	andi	r5,r18,65535
    c148:	1b87883a 	add	r3,r3,r14
    c14c:	1145883a 	add	r2,r2,r5
    c150:	19cf803a 	cmpltu	r7,r3,r7
    c154:	12c5883a 	add	r2,r2,r11
    c158:	1907883a 	add	r3,r3,r4
    c15c:	11dd883a 	add	r14,r2,r7
    c160:	1909803a 	cmpltu	r4,r3,r4
    c164:	73cb883a 	add	r5,r14,r15
    c168:	4812d43a 	srli	r9,r9,16
    c16c:	2919883a 	add	r12,r5,r4
    c170:	12c5803a 	cmpltu	r2,r2,r11
    c174:	71e1803a 	cmpltu	r16,r14,r7
    c178:	1420b03a 	or	r16,r2,r16
    c17c:	2bcb803a 	cmpltu	r5,r5,r15
    c180:	6109803a 	cmpltu	r4,r12,r4
    c184:	2908b03a 	or	r4,r5,r4
    c188:	8261883a 	add	r16,r16,r9
    c18c:	1824927a 	slli	r18,r3,9
    c190:	8121883a 	add	r16,r16,r4
    c194:	8361883a 	add	r16,r16,r13
    c198:	8020927a 	slli	r16,r16,9
    c19c:	1806d5fa 	srli	r3,r3,23
    c1a0:	600ad5fa 	srli	r5,r12,23
    c1a4:	6004927a 	slli	r2,r12,9
    c1a8:	92a4b03a 	or	r18,r18,r10
    c1ac:	9024c03a 	cmpne	r18,r18,zero
    c1b0:	90e4b03a 	or	r18,r18,r3
    c1b4:	80c0402c 	andhi	r3,r16,256
    c1b8:	90a4b03a 	or	r18,r18,r2
    c1bc:	8160b03a 	or	r16,r16,r5
    c1c0:	1800b326 	beq	r3,zero,c490 <__muldf3+0x5f4>
    c1c4:	9006d07a 	srli	r3,r18,1
    c1c8:	800497fa 	slli	r2,r16,31
    c1cc:	9480004c 	andi	r18,r18,1
    c1d0:	8020d07a 	srli	r16,r16,1
    c1d4:	1c86b03a 	or	r3,r3,r18
    c1d8:	18a4b03a 	or	r18,r3,r2
    c1dc:	4100ffc4 	addi	r4,r8,1023
    c1e0:	0100670e 	bge	zero,r4,c380 <__muldf3+0x4e4>
    c1e4:	908001cc 	andi	r2,r18,7
    c1e8:	10000726 	beq	r2,zero,c208 <__muldf3+0x36c>
    c1ec:	908003cc 	andi	r2,r18,15
    c1f0:	10800120 	cmpeqi	r2,r2,4
    c1f4:	1000041e 	bne	r2,zero,c208 <__muldf3+0x36c>
    c1f8:	90800104 	addi	r2,r18,4
    c1fc:	14a5803a 	cmpltu	r18,r2,r18
    c200:	84a1883a 	add	r16,r16,r18
    c204:	1025883a 	mov	r18,r2
    c208:	8080402c 	andhi	r2,r16,256
    c20c:	10000426 	beq	r2,zero,c220 <__muldf3+0x384>
    c210:	00bfc034 	movhi	r2,65280
    c214:	10bfffc4 	addi	r2,r2,-1
    c218:	80a0703a 	and	r16,r16,r2
    c21c:	41010004 	addi	r4,r8,1024
    c220:	2081ffc8 	cmpgei	r2,r4,2047
    c224:	103f831e 	bne	r2,zero,c034 <__muldf3+0x198>
    c228:	8004977a 	slli	r2,r16,29
    c22c:	9024d0fa 	srli	r18,r18,3
    c230:	8020927a 	slli	r16,r16,9
    c234:	20c1ffcc 	andi	r3,r4,2047
    c238:	14a4b03a 	or	r18,r2,r18
    c23c:	8020d33a 	srli	r16,r16,12
    c240:	003f6b06 	br	bff0 <__muldf3+0x154>
    c244:	8f0ab03a 	or	r5,r17,fp
    c248:	28004326 	beq	r5,zero,c358 <__muldf3+0x4bc>
    c24c:	88008526 	beq	r17,zero,c464 <__muldf3+0x5c8>
    c250:	8809883a 	mov	r4,r17
    c254:	000d0380 	call	d038 <__clzsi2>
    c258:	11bffd44 	addi	r6,r2,-11
    c25c:	01000744 	movi	r4,29
    c260:	117ffe04 	addi	r5,r2,-8
    c264:	2189c83a 	sub	r4,r4,r6
    c268:	8962983a 	sll	r17,r17,r5
    c26c:	e108d83a 	srl	r4,fp,r4
    c270:	e14a983a 	sll	r5,fp,r5
    c274:	2462b03a 	or	r17,r4,r17
    c278:	9885c83a 	sub	r2,r19,r2
    c27c:	14ff0344 	addi	r19,r2,-1011
    c280:	0007883a 	mov	r3,zero
    c284:	003f3406 	br	bf58 <__muldf3+0xbc>
    c288:	8124b03a 	or	r18,r16,r4
    c28c:	90002d26 	beq	r18,zero,c344 <__muldf3+0x4a8>
    c290:	d9c00015 	stw	r7,0(sp)
    c294:	80006826 	beq	r16,zero,c438 <__muldf3+0x59c>
    c298:	8009883a 	mov	r4,r16
    c29c:	000d0380 	call	d038 <__clzsi2>
    c2a0:	d9c00017 	ldw	r7,0(sp)
    c2a4:	113ffd44 	addi	r4,r2,-11
    c2a8:	00c00744 	movi	r3,29
    c2ac:	14bffe04 	addi	r18,r2,-8
    c2b0:	1907c83a 	sub	r3,r3,r4
    c2b4:	84a0983a 	sll	r16,r16,r18
    c2b8:	98c6d83a 	srl	r3,r19,r3
    c2bc:	9ca4983a 	sll	r18,r19,r18
    c2c0:	1c20b03a 	or	r16,r3,r16
    c2c4:	04ff0344 	movi	r19,-1011
    c2c8:	98a7c83a 	sub	r19,r19,r2
    c2cc:	002b883a 	mov	r21,zero
    c2d0:	002d883a 	mov	r22,zero
    c2d4:	003f0f06 	br	bf14 <__muldf3+0x78>
    c2d8:	8124b03a 	or	r18,r16,r4
    c2dc:	9000141e 	bne	r18,zero,c330 <__muldf3+0x494>
    c2e0:	0021883a 	mov	r16,zero
    c2e4:	05400204 	movi	r21,8
    c2e8:	04c1ffc4 	movi	r19,2047
    c2ec:	05800084 	movi	r22,2
    c2f0:	003f0806 	br	bf14 <__muldf3+0x78>
    c2f4:	8f0ab03a 	or	r5,r17,fp
    c2f8:	9cc1ffc4 	addi	r19,r19,2047
    c2fc:	2800081e 	bne	r5,zero,c320 <__muldf3+0x484>
    c300:	ad400094 	ori	r21,r21,2
    c304:	0023883a 	mov	r17,zero
    c308:	00c00084 	movi	r3,2
    c30c:	003f1206 	br	bf58 <__muldf3+0xbc>
    c310:	b08000a0 	cmpeqi	r2,r22,2
    c314:	a00d883a 	mov	r6,r20
    c318:	103f2e26 	beq	r2,zero,bfd4 <__muldf3+0x138>
    c31c:	003f4506 	br	c034 <__muldf3+0x198>
    c320:	ad4000d4 	ori	r21,r21,3
    c324:	e00b883a 	mov	r5,fp
    c328:	00c000c4 	movi	r3,3
    c32c:	003f0a06 	br	bf58 <__muldf3+0xbc>
    c330:	2025883a 	mov	r18,r4
    c334:	05400304 	movi	r21,12
    c338:	04c1ffc4 	movi	r19,2047
    c33c:	058000c4 	movi	r22,3
    c340:	003ef406 	br	bf14 <__muldf3+0x78>
    c344:	0021883a 	mov	r16,zero
    c348:	05400104 	movi	r21,4
    c34c:	0027883a 	mov	r19,zero
    c350:	05800044 	movi	r22,1
    c354:	003eef06 	br	bf14 <__muldf3+0x78>
    c358:	ad400054 	ori	r21,r21,1
    c35c:	0023883a 	mov	r17,zero
    c360:	00c00044 	movi	r3,1
    c364:	003efc06 	br	bf58 <__muldf3+0xbc>
    c368:	04000434 	movhi	r16,16
    c36c:	000d883a 	mov	r6,zero
    c370:	843fffc4 	addi	r16,r16,-1
    c374:	04bfffc4 	movi	r18,-1
    c378:	00c1ffc4 	movi	r3,2047
    c37c:	003f1c06 	br	bff0 <__muldf3+0x154>
    c380:	00800044 	movi	r2,1
    c384:	1105c83a 	sub	r2,r2,r4
    c388:	10c00e48 	cmpgei	r3,r2,57
    c38c:	183f151e 	bne	r3,zero,bfe4 <__muldf3+0x148>
    c390:	10c00808 	cmpgei	r3,r2,32
    c394:	1800401e 	bne	r3,zero,c498 <__muldf3+0x5fc>
    c398:	42010784 	addi	r8,r8,1054
    c39c:	8206983a 	sll	r3,r16,r8
    c3a0:	9088d83a 	srl	r4,r18,r2
    c3a4:	9210983a 	sll	r8,r18,r8
    c3a8:	80a0d83a 	srl	r16,r16,r2
    c3ac:	1904b03a 	or	r2,r3,r4
    c3b0:	4024c03a 	cmpne	r18,r8,zero
    c3b4:	1484b03a 	or	r2,r2,r18
    c3b8:	10c001cc 	andi	r3,r2,7
    c3bc:	18000726 	beq	r3,zero,c3dc <__muldf3+0x540>
    c3c0:	10c003cc 	andi	r3,r2,15
    c3c4:	18c00120 	cmpeqi	r3,r3,4
    c3c8:	1800041e 	bne	r3,zero,c3dc <__muldf3+0x540>
    c3cc:	10c00104 	addi	r3,r2,4
    c3d0:	1885803a 	cmpltu	r2,r3,r2
    c3d4:	80a1883a 	add	r16,r16,r2
    c3d8:	1805883a 	mov	r2,r3
    c3dc:	80c0202c 	andhi	r3,r16,128
    c3e0:	18004226 	beq	r3,zero,c4ec <__muldf3+0x650>
    c3e4:	00c00044 	movi	r3,1
    c3e8:	0021883a 	mov	r16,zero
    c3ec:	0025883a 	mov	r18,zero
    c3f0:	003eff06 	br	bff0 <__muldf3+0x154>
    c3f4:	8080022c 	andhi	r2,r16,8
    c3f8:	10000926 	beq	r2,zero,c420 <__muldf3+0x584>
    c3fc:	8880022c 	andhi	r2,r17,8
    c400:	1000071e 	bne	r2,zero,c420 <__muldf3+0x584>
    c404:	00800434 	movhi	r2,16
    c408:	8c000234 	orhi	r16,r17,8
    c40c:	10bfffc4 	addi	r2,r2,-1
    c410:	80a0703a 	and	r16,r16,r2
    c414:	b80d883a 	mov	r6,r23
    c418:	2825883a 	mov	r18,r5
    c41c:	003fd606 	br	c378 <__muldf3+0x4dc>
    c420:	00800434 	movhi	r2,16
    c424:	84000234 	orhi	r16,r16,8
    c428:	10bfffc4 	addi	r2,r2,-1
    c42c:	80a0703a 	and	r16,r16,r2
    c430:	a00d883a 	mov	r6,r20
    c434:	003fd006 	br	c378 <__muldf3+0x4dc>
    c438:	000d0380 	call	d038 <__clzsi2>
    c43c:	11000544 	addi	r4,r2,21
    c440:	21400748 	cmpgei	r5,r4,29
    c444:	1007883a 	mov	r3,r2
    c448:	d9c00017 	ldw	r7,0(sp)
    c44c:	10800804 	addi	r2,r2,32
    c450:	283f9526 	beq	r5,zero,c2a8 <__muldf3+0x40c>
    c454:	18fffe04 	addi	r3,r3,-8
    c458:	98e0983a 	sll	r16,r19,r3
    c45c:	0025883a 	mov	r18,zero
    c460:	003f9806 	br	c2c4 <__muldf3+0x428>
    c464:	e009883a 	mov	r4,fp
    c468:	000d0380 	call	d038 <__clzsi2>
    c46c:	11800544 	addi	r6,r2,21
    c470:	31000748 	cmpgei	r4,r6,29
    c474:	1007883a 	mov	r3,r2
    c478:	10800804 	addi	r2,r2,32
    c47c:	203f7726 	beq	r4,zero,c25c <__muldf3+0x3c0>
    c480:	1c7ffe04 	addi	r17,r3,-8
    c484:	e462983a 	sll	r17,fp,r17
    c488:	000b883a 	mov	r5,zero
    c48c:	003f7a06 	br	c278 <__muldf3+0x3dc>
    c490:	9811883a 	mov	r8,r19
    c494:	003f5106 	br	c1dc <__muldf3+0x340>
    c498:	00fff844 	movi	r3,-31
    c49c:	1907c83a 	sub	r3,r3,r4
    c4a0:	10800820 	cmpeqi	r2,r2,32
    c4a4:	80c6d83a 	srl	r3,r16,r3
    c4a8:	1000031e 	bne	r2,zero,c4b8 <__muldf3+0x61c>
    c4ac:	42010f84 	addi	r8,r8,1086
    c4b0:	8220983a 	sll	r16,r16,r8
    c4b4:	9424b03a 	or	r18,r18,r16
    c4b8:	9024c03a 	cmpne	r18,r18,zero
    c4bc:	90c4b03a 	or	r2,r18,r3
    c4c0:	148001cc 	andi	r18,r2,7
    c4c4:	9000051e 	bne	r18,zero,c4dc <__muldf3+0x640>
    c4c8:	0021883a 	mov	r16,zero
    c4cc:	1004d0fa 	srli	r2,r2,3
    c4d0:	0007883a 	mov	r3,zero
    c4d4:	14a4b03a 	or	r18,r2,r18
    c4d8:	003ec506 	br	bff0 <__muldf3+0x154>
    c4dc:	10c003cc 	andi	r3,r2,15
    c4e0:	18c00118 	cmpnei	r3,r3,4
    c4e4:	0021883a 	mov	r16,zero
    c4e8:	183fb81e 	bne	r3,zero,c3cc <__muldf3+0x530>
    c4ec:	8006927a 	slli	r3,r16,9
    c4f0:	8024977a 	slli	r18,r16,29
    c4f4:	1820d33a 	srli	r16,r3,12
    c4f8:	003ff406 	br	c4cc <__muldf3+0x630>
    c4fc:	00800434 	movhi	r2,16
    c500:	84000234 	orhi	r16,r16,8
    c504:	10bfffc4 	addi	r2,r2,-1
    c508:	80a0703a 	and	r16,r16,r2
    c50c:	003f9a06 	br	c378 <__muldf3+0x4dc>

0000c510 <__subdf3>:
    c510:	00800434 	movhi	r2,16
    c514:	defffb04 	addi	sp,sp,-20
    c518:	3812d53a 	srli	r9,r7,20
    c51c:	10bfffc4 	addi	r2,r2,-1
    c520:	2886703a 	and	r3,r5,r2
    c524:	dc000015 	stw	r16,0(sp)
    c528:	3884703a 	and	r2,r7,r2
    c52c:	2820d53a 	srli	r16,r5,20
    c530:	3014d77a 	srli	r10,r6,29
    c534:	280ad7fa 	srli	r5,r5,31
    c538:	180690fa 	slli	r3,r3,3
    c53c:	2016d77a 	srli	r11,r4,29
    c540:	100490fa 	slli	r2,r2,3
    c544:	4a41ffcc 	andi	r9,r9,2047
    c548:	dc800215 	stw	r18,8(sp)
    c54c:	8401ffcc 	andi	r16,r16,2047
    c550:	dfc00415 	stw	ra,16(sp)
    c554:	dcc00315 	stw	r19,12(sp)
    c558:	dc400115 	stw	r17,4(sp)
    c55c:	4b01ffd8 	cmpnei	r12,r9,2047
    c560:	3810d7fa 	srli	r8,r7,31
    c564:	2825883a 	mov	r18,r5
    c568:	5084b03a 	or	r2,r10,r2
    c56c:	201c90fa 	slli	r14,r4,3
    c570:	301a90fa 	slli	r13,r6,3
    c574:	29403fcc 	andi	r5,r5,255
    c578:	58ceb03a 	or	r7,r11,r3
    c57c:	8255c83a 	sub	r10,r16,r9
    c580:	60006826 	beq	r12,zero,c724 <__subdf3+0x214>
    c584:	42c0005c 	xori	r11,r8,1
    c588:	2ac07326 	beq	r5,r11,c758 <__subdf3+0x248>
    c58c:	0280590e 	bge	zero,r10,c6f4 <__subdf3+0x1e4>
    c590:	4800691e 	bne	r9,zero,c738 <__subdf3+0x228>
    c594:	1346b03a 	or	r3,r2,r13
    c598:	1800e826 	beq	r3,zero,c93c <__subdf3+0x42c>
    c59c:	50ffffc4 	addi	r3,r10,-1
    c5a0:	18018126 	beq	r3,zero,cba8 <__subdf3+0x698>
    c5a4:	5281ffd8 	cmpnei	r10,r10,2047
    c5a8:	5000eb26 	beq	r10,zero,c958 <__subdf3+0x448>
    c5ac:	1815883a 	mov	r10,r3
    c5b0:	50c00e48 	cmpgei	r3,r10,57
    c5b4:	1800651e 	bne	r3,zero,c74c <__subdf3+0x23c>
    c5b8:	50c00808 	cmpgei	r3,r10,32
    c5bc:	18012a1e 	bne	r3,zero,ca68 <__subdf3+0x558>
    c5c0:	00c00804 	movi	r3,32
    c5c4:	1a87c83a 	sub	r3,r3,r10
    c5c8:	10e2983a 	sll	r17,r2,r3
    c5cc:	6a88d83a 	srl	r4,r13,r10
    c5d0:	68da983a 	sll	r13,r13,r3
    c5d4:	1284d83a 	srl	r2,r2,r10
    c5d8:	8922b03a 	or	r17,r17,r4
    c5dc:	681ac03a 	cmpne	r13,r13,zero
    c5e0:	8b62b03a 	or	r17,r17,r13
    c5e4:	388fc83a 	sub	r7,r7,r2
    c5e8:	7463c83a 	sub	r17,r14,r17
    c5ec:	7445803a 	cmpltu	r2,r14,r17
    c5f0:	3889c83a 	sub	r4,r7,r2
    c5f4:	2080202c 	andhi	r2,r4,128
    c5f8:	10008e26 	beq	r2,zero,c834 <__subdf3+0x324>
    c5fc:	04c02034 	movhi	r19,128
    c600:	9cffffc4 	addi	r19,r19,-1
    c604:	24e6703a 	and	r19,r4,r19
    c608:	9800a626 	beq	r19,zero,c8a4 <__subdf3+0x394>
    c60c:	9809883a 	mov	r4,r19
    c610:	000d0380 	call	d038 <__clzsi2>
    c614:	117ffe04 	addi	r5,r2,-8
    c618:	01000804 	movi	r4,32
    c61c:	2149c83a 	sub	r4,r4,r5
    c620:	8908d83a 	srl	r4,r17,r4
    c624:	9944983a 	sll	r2,r19,r5
    c628:	8962983a 	sll	r17,r17,r5
    c62c:	2084b03a 	or	r2,r4,r2
    c630:	2c00a516 	blt	r5,r16,c8c8 <__subdf3+0x3b8>
    c634:	2c0bc83a 	sub	r5,r5,r16
    c638:	29000044 	addi	r4,r5,1
    c63c:	20c00808 	cmpgei	r3,r4,32
    c640:	1800701e 	bne	r3,zero,c804 <__subdf3+0x2f4>
    c644:	00c00804 	movi	r3,32
    c648:	1907c83a 	sub	r3,r3,r4
    c64c:	890ad83a 	srl	r5,r17,r4
    c650:	88e2983a 	sll	r17,r17,r3
    c654:	10c6983a 	sll	r3,r2,r3
    c658:	1108d83a 	srl	r4,r2,r4
    c65c:	8822c03a 	cmpne	r17,r17,zero
    c660:	1946b03a 	or	r3,r3,r5
    c664:	1c62b03a 	or	r17,r3,r17
    c668:	0021883a 	mov	r16,zero
    c66c:	888001cc 	andi	r2,r17,7
    c670:	10000726 	beq	r2,zero,c690 <__subdf3+0x180>
    c674:	888003cc 	andi	r2,r17,15
    c678:	10800120 	cmpeqi	r2,r2,4
    c67c:	1000041e 	bne	r2,zero,c690 <__subdf3+0x180>
    c680:	88800104 	addi	r2,r17,4
    c684:	1463803a 	cmpltu	r17,r2,r17
    c688:	2449883a 	add	r4,r4,r17
    c68c:	1023883a 	mov	r17,r2
    c690:	2080202c 	andhi	r2,r4,128
    c694:	10006926 	beq	r2,zero,c83c <__subdf3+0x32c>
    c698:	84000044 	addi	r16,r16,1
    c69c:	8081ffe0 	cmpeqi	r2,r16,2047
    c6a0:	8401ffcc 	andi	r16,r16,2047
    c6a4:	10007b1e 	bne	r2,zero,c894 <__subdf3+0x384>
    c6a8:	00bfe034 	movhi	r2,65408
    c6ac:	10bfffc4 	addi	r2,r2,-1
    c6b0:	2084703a 	and	r2,r4,r2
    c6b4:	1006927a 	slli	r3,r2,9
    c6b8:	8822d0fa 	srli	r17,r17,3
    c6bc:	1008977a 	slli	r4,r2,29
    c6c0:	1806d33a 	srli	r3,r3,12
    c6c4:	2444b03a 	or	r2,r4,r17
    c6c8:	8020953a 	slli	r16,r16,20
    c6cc:	902497fa 	slli	r18,r18,31
    c6d0:	80c6b03a 	or	r3,r16,r3
    c6d4:	1c86b03a 	or	r3,r3,r18
    c6d8:	dfc00417 	ldw	ra,16(sp)
    c6dc:	dcc00317 	ldw	r19,12(sp)
    c6e0:	dc800217 	ldw	r18,8(sp)
    c6e4:	dc400117 	ldw	r17,4(sp)
    c6e8:	dc000017 	ldw	r16,0(sp)
    c6ec:	dec00504 	addi	sp,sp,20
    c6f0:	f800283a 	ret
    c6f4:	50002c26 	beq	r10,zero,c7a8 <__subdf3+0x298>
    c6f8:	4c15c83a 	sub	r10,r9,r16
    c6fc:	5825883a 	mov	r18,r11
    c700:	8000b21e 	bne	r16,zero,c9cc <__subdf3+0x4bc>
    c704:	3b86b03a 	or	r3,r7,r14
    c708:	18010826 	beq	r3,zero,cb2c <__subdf3+0x61c>
    c70c:	50ffffc4 	addi	r3,r10,-1
    c710:	18015a26 	beq	r3,zero,cc7c <__subdf3+0x76c>
    c714:	5401ffd8 	cmpnei	r16,r10,2047
    c718:	80012926 	beq	r16,zero,cbc0 <__subdf3+0x6b0>
    c71c:	1815883a 	mov	r10,r3
    c720:	0000ac06 	br	c9d4 <__subdf3+0x4c4>
    c724:	1346b03a 	or	r3,r2,r13
    c728:	183f9626 	beq	r3,zero,c584 <__subdf3+0x74>
    c72c:	42c03fcc 	andi	r11,r8,255
    c730:	2a006a26 	beq	r5,r8,c8dc <__subdf3+0x3cc>
    c734:	02bfef0e 	bge	zero,r10,c6f4 <__subdf3+0x1e4>
    c738:	80c1ffd8 	cmpnei	r3,r16,2047
    c73c:	18008626 	beq	r3,zero,c958 <__subdf3+0x448>
    c740:	50c00e48 	cmpgei	r3,r10,57
    c744:	10802034 	orhi	r2,r2,128
    c748:	183f9b26 	beq	r3,zero,c5b8 <__subdf3+0xa8>
    c74c:	1344b03a 	or	r2,r2,r13
    c750:	1022c03a 	cmpne	r17,r2,zero
    c754:	003fa406 	br	c5e8 <__subdf3+0xd8>
    c758:	0280600e 	bge	zero,r10,c8dc <__subdf3+0x3cc>
    c75c:	48002126 	beq	r9,zero,c7e4 <__subdf3+0x2d4>
    c760:	80c1ffd8 	cmpnei	r3,r16,2047
    c764:	18011d26 	beq	r3,zero,cbdc <__subdf3+0x6cc>
    c768:	10802034 	orhi	r2,r2,128
    c76c:	50c00e48 	cmpgei	r3,r10,57
    c770:	18003e1e 	bne	r3,zero,c86c <__subdf3+0x35c>
    c774:	50c00808 	cmpgei	r3,r10,32
    c778:	1800d526 	beq	r3,zero,cad0 <__subdf3+0x5c0>
    c77c:	547ff804 	addi	r17,r10,-32
    c780:	51000820 	cmpeqi	r4,r10,32
    c784:	1446d83a 	srl	r3,r2,r17
    c788:	2000041e 	bne	r4,zero,c79c <__subdf3+0x28c>
    c78c:	01001004 	movi	r4,64
    c790:	2295c83a 	sub	r10,r4,r10
    c794:	1284983a 	sll	r2,r2,r10
    c798:	689ab03a 	or	r13,r13,r2
    c79c:	6822c03a 	cmpne	r17,r13,zero
    c7a0:	88e2b03a 	or	r17,r17,r3
    c7a4:	00003306 	br	c874 <__subdf3+0x364>
    c7a8:	80c00044 	addi	r3,r16,1
    c7ac:	18c1ff8c 	andi	r3,r3,2046
    c7b0:	1800971e 	bne	r3,zero,ca10 <__subdf3+0x500>
    c7b4:	1350b03a 	or	r8,r2,r13
    c7b8:	3b86b03a 	or	r3,r7,r14
    c7bc:	8000e21e 	bne	r16,zero,cb48 <__subdf3+0x638>
    c7c0:	18012526 	beq	r3,zero,cc58 <__subdf3+0x748>
    c7c4:	4001411e 	bne	r8,zero,cccc <__subdf3+0x7bc>
    c7c8:	3806977a 	slli	r3,r7,29
    c7cc:	00880034 	movhi	r2,8192
    c7d0:	10bfffc4 	addi	r2,r2,-1
    c7d4:	208a703a 	and	r5,r4,r2
    c7d8:	3810d0fa 	srli	r8,r7,3
    c7dc:	28c4b03a 	or	r2,r5,r3
    c7e0:	00001d06 	br	c858 <__subdf3+0x348>
    c7e4:	1346b03a 	or	r3,r2,r13
    c7e8:	18005426 	beq	r3,zero,c93c <__subdf3+0x42c>
    c7ec:	50ffffc4 	addi	r3,r10,-1
    c7f0:	1800e526 	beq	r3,zero,cb88 <__subdf3+0x678>
    c7f4:	5281ffd8 	cmpnei	r10,r10,2047
    c7f8:	50012d26 	beq	r10,zero,ccb0 <__subdf3+0x7a0>
    c7fc:	1815883a 	mov	r10,r3
    c800:	003fda06 	br	c76c <__subdf3+0x25c>
    c804:	297ff844 	addi	r5,r5,-31
    c808:	20c00820 	cmpeqi	r3,r4,32
    c80c:	114ad83a 	srl	r5,r2,r5
    c810:	1800041e 	bne	r3,zero,c824 <__subdf3+0x314>
    c814:	00c01004 	movi	r3,64
    c818:	1909c83a 	sub	r4,r3,r4
    c81c:	1104983a 	sll	r2,r2,r4
    c820:	88a2b03a 	or	r17,r17,r2
    c824:	8822c03a 	cmpne	r17,r17,zero
    c828:	8962b03a 	or	r17,r17,r5
    c82c:	0009883a 	mov	r4,zero
    c830:	0021883a 	mov	r16,zero
    c834:	888001cc 	andi	r2,r17,7
    c838:	103f8e1e 	bne	r2,zero,c674 <__subdf3+0x164>
    c83c:	8822d0fa 	srli	r17,r17,3
    c840:	2004977a 	slli	r2,r4,29
    c844:	2010d0fa 	srli	r8,r4,3
    c848:	8015883a 	mov	r10,r16
    c84c:	8884b03a 	or	r2,r17,r2
    c850:	50c1ffe0 	cmpeqi	r3,r10,2047
    c854:	18016f1e 	bne	r3,zero,ce14 <__subdf3+0x904>
    c858:	00c00434 	movhi	r3,16
    c85c:	18ffffc4 	addi	r3,r3,-1
    c860:	40c6703a 	and	r3,r8,r3
    c864:	5401ffcc 	andi	r16,r10,2047
    c868:	003f9706 	br	c6c8 <__subdf3+0x1b8>
    c86c:	1344b03a 	or	r2,r2,r13
    c870:	1022c03a 	cmpne	r17,r2,zero
    c874:	8ba3883a 	add	r17,r17,r14
    c878:	8b85803a 	cmpltu	r2,r17,r14
    c87c:	11c9883a 	add	r4,r2,r7
    c880:	2080202c 	andhi	r2,r4,128
    c884:	103feb26 	beq	r2,zero,c834 <__subdf3+0x324>
    c888:	84000044 	addi	r16,r16,1
    c88c:	8081ffe0 	cmpeqi	r2,r16,2047
    c890:	10006b26 	beq	r2,zero,ca40 <__subdf3+0x530>
    c894:	0401ffc4 	movi	r16,2047
    c898:	0007883a 	mov	r3,zero
    c89c:	0005883a 	mov	r2,zero
    c8a0:	003f8906 	br	c6c8 <__subdf3+0x1b8>
    c8a4:	8809883a 	mov	r4,r17
    c8a8:	000d0380 	call	d038 <__clzsi2>
    c8ac:	11400604 	addi	r5,r2,24
    c8b0:	28c00808 	cmpgei	r3,r5,32
    c8b4:	183f5826 	beq	r3,zero,c618 <__subdf3+0x108>
    c8b8:	10bffe04 	addi	r2,r2,-8
    c8bc:	8884983a 	sll	r2,r17,r2
    c8c0:	0023883a 	mov	r17,zero
    c8c4:	2c3f5b0e 	bge	r5,r16,c634 <__subdf3+0x124>
    c8c8:	013fe034 	movhi	r4,65408
    c8cc:	213fffc4 	addi	r4,r4,-1
    c8d0:	8161c83a 	sub	r16,r16,r5
    c8d4:	1108703a 	and	r4,r2,r4
    c8d8:	003f6406 	br	c66c <__subdf3+0x15c>
    c8dc:	50002c26 	beq	r10,zero,c990 <__subdf3+0x480>
    c8e0:	4c15c83a 	sub	r10,r9,r16
    c8e4:	80007226 	beq	r16,zero,cab0 <__subdf3+0x5a0>
    c8e8:	6000ea26 	beq	r12,zero,cc94 <__subdf3+0x784>
    c8ec:	39c02034 	orhi	r7,r7,128
    c8f0:	50c00e48 	cmpgei	r3,r10,57
    c8f4:	1800c01e 	bne	r3,zero,cbf8 <__subdf3+0x6e8>
    c8f8:	50c00808 	cmpgei	r3,r10,32
    c8fc:	1801261e 	bne	r3,zero,cd98 <__subdf3+0x888>
    c900:	00c00804 	movi	r3,32
    c904:	1a87c83a 	sub	r3,r3,r10
    c908:	38e2983a 	sll	r17,r7,r3
    c90c:	7288d83a 	srl	r4,r14,r10
    c910:	70c6983a 	sll	r3,r14,r3
    c914:	3a8ed83a 	srl	r7,r7,r10
    c918:	8922b03a 	or	r17,r17,r4
    c91c:	1806c03a 	cmpne	r3,r3,zero
    c920:	88e2b03a 	or	r17,r17,r3
    c924:	11c5883a 	add	r2,r2,r7
    c928:	8b63883a 	add	r17,r17,r13
    c92c:	8b49803a 	cmpltu	r4,r17,r13
    c930:	2089883a 	add	r4,r4,r2
    c934:	4821883a 	mov	r16,r9
    c938:	003fd106 	br	c880 <__subdf3+0x370>
    c93c:	380c977a 	slli	r6,r7,29
    c940:	00880034 	movhi	r2,8192
    c944:	10bfffc4 	addi	r2,r2,-1
    c948:	2088703a 	and	r4,r4,r2
    c94c:	3810d0fa 	srli	r8,r7,3
    c950:	2184b03a 	or	r2,r4,r6
    c954:	003fbe06 	br	c850 <__subdf3+0x340>
    c958:	380c977a 	slli	r6,r7,29
    c95c:	00880034 	movhi	r2,8192
    c960:	10bfffc4 	addi	r2,r2,-1
    c964:	380ed0fa 	srli	r7,r7,3
    c968:	2084703a 	and	r2,r4,r2
    c96c:	1184b03a 	or	r2,r2,r6
    c970:	3886b03a 	or	r3,r7,r2
    c974:	18012326 	beq	r3,zero,ce04 <__subdf3+0x8f4>
    c978:	01000434 	movhi	r4,16
    c97c:	38c00234 	orhi	r3,r7,8
    c980:	213fffc4 	addi	r4,r4,-1
    c984:	1906703a 	and	r3,r3,r4
    c988:	0401ffc4 	movi	r16,2047
    c98c:	003f4e06 	br	c6c8 <__subdf3+0x1b8>
    c990:	80c00044 	addi	r3,r16,1
    c994:	1941ff8c 	andi	r5,r3,2046
    c998:	2800581e 	bne	r5,zero,cafc <__subdf3+0x5ec>
    c99c:	3b86b03a 	or	r3,r7,r14
    c9a0:	8000a31e 	bne	r16,zero,cc30 <__subdf3+0x720>
    c9a4:	1800ea26 	beq	r3,zero,cd50 <__subdf3+0x840>
    c9a8:	1346b03a 	or	r3,r2,r13
    c9ac:	1800ef1e 	bne	r3,zero,cd6c <__subdf3+0x85c>
    c9b0:	380a977a 	slli	r5,r7,29
    c9b4:	00880034 	movhi	r2,8192
    c9b8:	10bfffc4 	addi	r2,r2,-1
    c9bc:	2084703a 	and	r2,r4,r2
    c9c0:	3810d0fa 	srli	r8,r7,3
    c9c4:	2884b03a 	or	r2,r5,r2
    c9c8:	003fa306 	br	c858 <__subdf3+0x348>
    c9cc:	60007c26 	beq	r12,zero,cbc0 <__subdf3+0x6b0>
    c9d0:	39c02034 	orhi	r7,r7,128
    c9d4:	50c00e48 	cmpgei	r3,r10,57
    c9d8:	18002e1e 	bne	r3,zero,ca94 <__subdf3+0x584>
    c9dc:	50c00808 	cmpgei	r3,r10,32
    c9e0:	1800881e 	bne	r3,zero,cc04 <__subdf3+0x6f4>
    c9e4:	00c00804 	movi	r3,32
    c9e8:	1a87c83a 	sub	r3,r3,r10
    c9ec:	7288d83a 	srl	r4,r14,r10
    c9f0:	38e2983a 	sll	r17,r7,r3
    c9f4:	70dc983a 	sll	r14,r14,r3
    c9f8:	3aa0d83a 	srl	r16,r7,r10
    c9fc:	8922b03a 	or	r17,r17,r4
    ca00:	701cc03a 	cmpne	r14,r14,zero
    ca04:	8ba2b03a 	or	r17,r17,r14
    ca08:	1405c83a 	sub	r2,r2,r16
    ca0c:	00002306 	br	ca9c <__subdf3+0x58c>
    ca10:	7363c83a 	sub	r17,r14,r13
    ca14:	3889c83a 	sub	r4,r7,r2
    ca18:	7467803a 	cmpltu	r19,r14,r17
    ca1c:	24e7c83a 	sub	r19,r4,r19
    ca20:	98c0202c 	andhi	r3,r19,128
    ca24:	1800521e 	bne	r3,zero,cb70 <__subdf3+0x660>
    ca28:	8cc4b03a 	or	r2,r17,r19
    ca2c:	103ef61e 	bne	r2,zero,c608 <__subdf3+0xf8>
    ca30:	0011883a 	mov	r8,zero
    ca34:	0025883a 	mov	r18,zero
    ca38:	003f8706 	br	c858 <__subdf3+0x348>
    ca3c:	04000084 	movi	r16,2
    ca40:	00bfe034 	movhi	r2,65408
    ca44:	10bfffc4 	addi	r2,r2,-1
    ca48:	8806d07a 	srli	r3,r17,1
    ca4c:	2084703a 	and	r2,r4,r2
    ca50:	100a97fa 	slli	r5,r2,31
    ca54:	8c40004c 	andi	r17,r17,1
    ca58:	1c62b03a 	or	r17,r3,r17
    ca5c:	1008d07a 	srli	r4,r2,1
    ca60:	2c62b03a 	or	r17,r5,r17
    ca64:	003f0106 	br	c66c <__subdf3+0x15c>
    ca68:	547ff804 	addi	r17,r10,-32
    ca6c:	51000820 	cmpeqi	r4,r10,32
    ca70:	1446d83a 	srl	r3,r2,r17
    ca74:	2000041e 	bne	r4,zero,ca88 <__subdf3+0x578>
    ca78:	01001004 	movi	r4,64
    ca7c:	2295c83a 	sub	r10,r4,r10
    ca80:	1284983a 	sll	r2,r2,r10
    ca84:	689ab03a 	or	r13,r13,r2
    ca88:	6822c03a 	cmpne	r17,r13,zero
    ca8c:	88e2b03a 	or	r17,r17,r3
    ca90:	003ed506 	br	c5e8 <__subdf3+0xd8>
    ca94:	3ba2b03a 	or	r17,r7,r14
    ca98:	8822c03a 	cmpne	r17,r17,zero
    ca9c:	6c63c83a 	sub	r17,r13,r17
    caa0:	6c49803a 	cmpltu	r4,r13,r17
    caa4:	1109c83a 	sub	r4,r2,r4
    caa8:	4821883a 	mov	r16,r9
    caac:	003ed106 	br	c5f4 <__subdf3+0xe4>
    cab0:	3b86b03a 	or	r3,r7,r14
    cab4:	18001d26 	beq	r3,zero,cb2c <__subdf3+0x61c>
    cab8:	50ffffc4 	addi	r3,r10,-1
    cabc:	1800c126 	beq	r3,zero,cdc4 <__subdf3+0x8b4>
    cac0:	5281ffd8 	cmpnei	r10,r10,2047
    cac4:	50003e26 	beq	r10,zero,cbc0 <__subdf3+0x6b0>
    cac8:	1815883a 	mov	r10,r3
    cacc:	003f8806 	br	c8f0 <__subdf3+0x3e0>
    cad0:	00c00804 	movi	r3,32
    cad4:	1a87c83a 	sub	r3,r3,r10
    cad8:	10e2983a 	sll	r17,r2,r3
    cadc:	6a88d83a 	srl	r4,r13,r10
    cae0:	68da983a 	sll	r13,r13,r3
    cae4:	1284d83a 	srl	r2,r2,r10
    cae8:	8922b03a 	or	r17,r17,r4
    caec:	681ac03a 	cmpne	r13,r13,zero
    caf0:	8b62b03a 	or	r17,r17,r13
    caf4:	388f883a 	add	r7,r7,r2
    caf8:	003f5e06 	br	c874 <__subdf3+0x364>
    cafc:	1901ffe0 	cmpeqi	r4,r3,2047
    cb00:	203f641e 	bne	r4,zero,c894 <__subdf3+0x384>
    cb04:	735b883a 	add	r13,r14,r13
    cb08:	6b89803a 	cmpltu	r4,r13,r14
    cb0c:	3885883a 	add	r2,r7,r2
    cb10:	1105883a 	add	r2,r2,r4
    cb14:	102297fa 	slli	r17,r2,31
    cb18:	681ad07a 	srli	r13,r13,1
    cb1c:	1008d07a 	srli	r4,r2,1
    cb20:	1821883a 	mov	r16,r3
    cb24:	8b62b03a 	or	r17,r17,r13
    cb28:	003f4206 	br	c834 <__subdf3+0x324>
    cb2c:	1008977a 	slli	r4,r2,29
    cb30:	00c80034 	movhi	r3,8192
    cb34:	18ffffc4 	addi	r3,r3,-1
    cb38:	30cc703a 	and	r6,r6,r3
    cb3c:	1010d0fa 	srli	r8,r2,3
    cb40:	3104b03a 	or	r2,r6,r4
    cb44:	003f4206 	br	c850 <__subdf3+0x340>
    cb48:	18006c1e 	bne	r3,zero,ccfc <__subdf3+0x7ec>
    cb4c:	4000a826 	beq	r8,zero,cdf0 <__subdf3+0x8e0>
    cb50:	1008977a 	slli	r4,r2,29
    cb54:	00c80034 	movhi	r3,8192
    cb58:	18ffffc4 	addi	r3,r3,-1
    cb5c:	30c6703a 	and	r3,r6,r3
    cb60:	100ed0fa 	srli	r7,r2,3
    cb64:	5825883a 	mov	r18,r11
    cb68:	1904b03a 	or	r2,r3,r4
    cb6c:	003f8006 	br	c970 <__subdf3+0x460>
    cb70:	6ba3c83a 	sub	r17,r13,r14
    cb74:	11c5c83a 	sub	r2,r2,r7
    cb78:	6c49803a 	cmpltu	r4,r13,r17
    cb7c:	1127c83a 	sub	r19,r2,r4
    cb80:	5825883a 	mov	r18,r11
    cb84:	003ea006 	br	c608 <__subdf3+0xf8>
    cb88:	7363883a 	add	r17,r14,r13
    cb8c:	3885883a 	add	r2,r7,r2
    cb90:	8b9d803a 	cmpltu	r14,r17,r14
    cb94:	1389883a 	add	r4,r2,r14
    cb98:	2080202c 	andhi	r2,r4,128
    cb9c:	103fa71e 	bne	r2,zero,ca3c <__subdf3+0x52c>
    cba0:	04000044 	movi	r16,1
    cba4:	003f2306 	br	c834 <__subdf3+0x324>
    cba8:	7363c83a 	sub	r17,r14,r13
    cbac:	3885c83a 	sub	r2,r7,r2
    cbb0:	745d803a 	cmpltu	r14,r14,r17
    cbb4:	1389c83a 	sub	r4,r2,r14
    cbb8:	04000044 	movi	r16,1
    cbbc:	003e8d06 	br	c5f4 <__subdf3+0xe4>
    cbc0:	1008977a 	slli	r4,r2,29
    cbc4:	00c80034 	movhi	r3,8192
    cbc8:	18ffffc4 	addi	r3,r3,-1
    cbcc:	30c6703a 	and	r3,r6,r3
    cbd0:	100ed0fa 	srli	r7,r2,3
    cbd4:	1904b03a 	or	r2,r3,r4
    cbd8:	003f6506 	br	c970 <__subdf3+0x460>
    cbdc:	380c977a 	slli	r6,r7,29
    cbe0:	00880034 	movhi	r2,8192
    cbe4:	10bfffc4 	addi	r2,r2,-1
    cbe8:	2088703a 	and	r4,r4,r2
    cbec:	380ed0fa 	srli	r7,r7,3
    cbf0:	2184b03a 	or	r2,r4,r6
    cbf4:	003f5e06 	br	c970 <__subdf3+0x460>
    cbf8:	3ba2b03a 	or	r17,r7,r14
    cbfc:	8822c03a 	cmpne	r17,r17,zero
    cc00:	003f4906 	br	c928 <__subdf3+0x418>
    cc04:	547ff804 	addi	r17,r10,-32
    cc08:	51000820 	cmpeqi	r4,r10,32
    cc0c:	3c46d83a 	srl	r3,r7,r17
    cc10:	2000041e 	bne	r4,zero,cc24 <__subdf3+0x714>
    cc14:	01001004 	movi	r4,64
    cc18:	2295c83a 	sub	r10,r4,r10
    cc1c:	3a8e983a 	sll	r7,r7,r10
    cc20:	71dcb03a 	or	r14,r14,r7
    cc24:	7022c03a 	cmpne	r17,r14,zero
    cc28:	88e2b03a 	or	r17,r17,r3
    cc2c:	003f9b06 	br	ca9c <__subdf3+0x58c>
    cc30:	18001826 	beq	r3,zero,cc94 <__subdf3+0x784>
    cc34:	135ab03a 	or	r13,r2,r13
    cc38:	380a977a 	slli	r5,r7,29
    cc3c:	380ed0fa 	srli	r7,r7,3
    cc40:	6800311e 	bne	r13,zero,cd08 <__subdf3+0x7f8>
    cc44:	00880034 	movhi	r2,8192
    cc48:	10bfffc4 	addi	r2,r2,-1
    cc4c:	2084703a 	and	r2,r4,r2
    cc50:	1144b03a 	or	r2,r2,r5
    cc54:	003f4606 	br	c970 <__subdf3+0x460>
    cc58:	40005f26 	beq	r8,zero,cdd8 <__subdf3+0x8c8>
    cc5c:	1008977a 	slli	r4,r2,29
    cc60:	00c80034 	movhi	r3,8192
    cc64:	18ffffc4 	addi	r3,r3,-1
    cc68:	30cc703a 	and	r6,r6,r3
    cc6c:	1010d0fa 	srli	r8,r2,3
    cc70:	5825883a 	mov	r18,r11
    cc74:	3104b03a 	or	r2,r6,r4
    cc78:	003ef706 	br	c858 <__subdf3+0x348>
    cc7c:	6ba3c83a 	sub	r17,r13,r14
    cc80:	11c5c83a 	sub	r2,r2,r7
    cc84:	6c5b803a 	cmpltu	r13,r13,r17
    cc88:	1349c83a 	sub	r4,r2,r13
    cc8c:	04000044 	movi	r16,1
    cc90:	003e5806 	br	c5f4 <__subdf3+0xe4>
    cc94:	1006977a 	slli	r3,r2,29
    cc98:	01080034 	movhi	r4,8192
    cc9c:	213fffc4 	addi	r4,r4,-1
    cca0:	3108703a 	and	r4,r6,r4
    cca4:	100ed0fa 	srli	r7,r2,3
    cca8:	1904b03a 	or	r2,r3,r4
    ccac:	003f3006 	br	c970 <__subdf3+0x460>
    ccb0:	3806977a 	slli	r3,r7,29
    ccb4:	00880034 	movhi	r2,8192
    ccb8:	10bfffc4 	addi	r2,r2,-1
    ccbc:	2084703a 	and	r2,r4,r2
    ccc0:	380ed0fa 	srli	r7,r7,3
    ccc4:	10c4b03a 	or	r2,r2,r3
    ccc8:	003f2906 	br	c970 <__subdf3+0x460>
    cccc:	7363c83a 	sub	r17,r14,r13
    ccd0:	7447803a 	cmpltu	r3,r14,r17
    ccd4:	3889c83a 	sub	r4,r7,r2
    ccd8:	20c9c83a 	sub	r4,r4,r3
    ccdc:	20c0202c 	andhi	r3,r4,128
    cce0:	18004026 	beq	r3,zero,cde4 <__subdf3+0x8d4>
    cce4:	6ba3c83a 	sub	r17,r13,r14
    cce8:	11c5c83a 	sub	r2,r2,r7
    ccec:	6c5b803a 	cmpltu	r13,r13,r17
    ccf0:	1349c83a 	sub	r4,r2,r13
    ccf4:	5825883a 	mov	r18,r11
    ccf8:	003e5c06 	br	c66c <__subdf3+0x15c>
    ccfc:	380a977a 	slli	r5,r7,29
    cd00:	380ed0fa 	srli	r7,r7,3
    cd04:	403fcf26 	beq	r8,zero,cc44 <__subdf3+0x734>
    cd08:	00c80034 	movhi	r3,8192
    cd0c:	18ffffc4 	addi	r3,r3,-1
    cd10:	20c8703a 	and	r4,r4,r3
    cd14:	3a00022c 	andhi	r8,r7,8
    cd18:	2148b03a 	or	r4,r4,r5
    cd1c:	40000826 	beq	r8,zero,cd40 <__subdf3+0x830>
    cd20:	100ad0fa 	srli	r5,r2,3
    cd24:	2a00022c 	andhi	r8,r5,8
    cd28:	4000051e 	bne	r8,zero,cd40 <__subdf3+0x830>
    cd2c:	1004977a 	slli	r2,r2,29
    cd30:	30c6703a 	and	r3,r6,r3
    cd34:	5825883a 	mov	r18,r11
    cd38:	1888b03a 	or	r4,r3,r2
    cd3c:	280f883a 	mov	r7,r5
    cd40:	380e90fa 	slli	r7,r7,3
    cd44:	2005883a 	mov	r2,r4
    cd48:	380ed0fa 	srli	r7,r7,3
    cd4c:	003f0806 	br	c970 <__subdf3+0x460>
    cd50:	100a977a 	slli	r5,r2,29
    cd54:	00c80034 	movhi	r3,8192
    cd58:	18ffffc4 	addi	r3,r3,-1
    cd5c:	30c6703a 	and	r3,r6,r3
    cd60:	1010d0fa 	srli	r8,r2,3
    cd64:	28c4b03a 	or	r2,r5,r3
    cd68:	003ebb06 	br	c858 <__subdf3+0x348>
    cd6c:	7363883a 	add	r17,r14,r13
    cd70:	3885883a 	add	r2,r7,r2
    cd74:	8b9d803a 	cmpltu	r14,r17,r14
    cd78:	1389883a 	add	r4,r2,r14
    cd7c:	2080202c 	andhi	r2,r4,128
    cd80:	103eac26 	beq	r2,zero,c834 <__subdf3+0x324>
    cd84:	00bfe034 	movhi	r2,65408
    cd88:	10bfffc4 	addi	r2,r2,-1
    cd8c:	2088703a 	and	r4,r4,r2
    cd90:	04000044 	movi	r16,1
    cd94:	003ea706 	br	c834 <__subdf3+0x324>
    cd98:	50fff804 	addi	r3,r10,-32
    cd9c:	51000820 	cmpeqi	r4,r10,32
    cda0:	38c6d83a 	srl	r3,r7,r3
    cda4:	2000041e 	bne	r4,zero,cdb8 <__subdf3+0x8a8>
    cda8:	01001004 	movi	r4,64
    cdac:	2295c83a 	sub	r10,r4,r10
    cdb0:	3a8e983a 	sll	r7,r7,r10
    cdb4:	71dcb03a 	or	r14,r14,r7
    cdb8:	7022c03a 	cmpne	r17,r14,zero
    cdbc:	88e2b03a 	or	r17,r17,r3
    cdc0:	003ed906 	br	c928 <__subdf3+0x418>
    cdc4:	7363883a 	add	r17,r14,r13
    cdc8:	3885883a 	add	r2,r7,r2
    cdcc:	8b5b803a 	cmpltu	r13,r17,r13
    cdd0:	1349883a 	add	r4,r2,r13
    cdd4:	003f7006 	br	cb98 <__subdf3+0x688>
    cdd8:	0005883a 	mov	r2,zero
    cddc:	0025883a 	mov	r18,zero
    cde0:	003e9d06 	br	c858 <__subdf3+0x348>
    cde4:	8904b03a 	or	r2,r17,r4
    cde8:	103f1126 	beq	r2,zero,ca30 <__subdf3+0x520>
    cdec:	003e9106 	br	c834 <__subdf3+0x324>
    cdf0:	01c00434 	movhi	r7,16
    cdf4:	00bfffc4 	movi	r2,-1
    cdf8:	39ffffc4 	addi	r7,r7,-1
    cdfc:	0025883a 	mov	r18,zero
    ce00:	003edd06 	br	c978 <__subdf3+0x468>
    ce04:	0005883a 	mov	r2,zero
    ce08:	0401ffc4 	movi	r16,2047
    ce0c:	0007883a 	mov	r3,zero
    ce10:	003e2d06 	br	c6c8 <__subdf3+0x1b8>
    ce14:	400f883a 	mov	r7,r8
    ce18:	003ed506 	br	c970 <__subdf3+0x460>

0000ce1c <__unorddf2>:
    ce1c:	2806d53a 	srli	r3,r5,20
    ce20:	3810d53a 	srli	r8,r7,20
    ce24:	02400434 	movhi	r9,16
    ce28:	18c1ffcc 	andi	r3,r3,2047
    ce2c:	4a7fffc4 	addi	r9,r9,-1
    ce30:	18c1ffd8 	cmpnei	r3,r3,2047
    ce34:	2a4a703a 	and	r5,r5,r9
    ce38:	3a4e703a 	and	r7,r7,r9
    ce3c:	4201ffcc 	andi	r8,r8,2047
    ce40:	18000426 	beq	r3,zero,ce54 <__unorddf2+0x38>
    ce44:	4201ffd8 	cmpnei	r8,r8,2047
    ce48:	40000626 	beq	r8,zero,ce64 <__unorddf2+0x48>
    ce4c:	0005883a 	mov	r2,zero
    ce50:	f800283a 	ret
    ce54:	290ab03a 	or	r5,r5,r4
    ce58:	283ffa26 	beq	r5,zero,ce44 <__unorddf2+0x28>
    ce5c:	00800044 	movi	r2,1
    ce60:	f800283a 	ret
    ce64:	398eb03a 	or	r7,r7,r6
    ce68:	3804c03a 	cmpne	r2,r7,zero
    ce6c:	f800283a 	ret

0000ce70 <__fixdfsi>:
    ce70:	2806d53a 	srli	r3,r5,20
    ce74:	01800434 	movhi	r6,16
    ce78:	31bfffc4 	addi	r6,r6,-1
    ce7c:	18c1ffcc 	andi	r3,r3,2047
    ce80:	19c0ffd0 	cmplti	r7,r3,1023
    ce84:	2810d7fa 	srli	r8,r5,31
    ce88:	298a703a 	and	r5,r5,r6
    ce8c:	3800061e 	bne	r7,zero,cea8 <__fixdfsi+0x38>
    ce90:	18810790 	cmplti	r2,r3,1054
    ce94:	1000061e 	bne	r2,zero,ceb0 <__fixdfsi+0x40>
    ce98:	00a00034 	movhi	r2,32768
    ce9c:	10bfffc4 	addi	r2,r2,-1
    cea0:	4085883a 	add	r2,r8,r2
    cea4:	f800283a 	ret
    cea8:	0005883a 	mov	r2,zero
    ceac:	f800283a 	ret
    ceb0:	01810cc4 	movi	r6,1075
    ceb4:	30cdc83a 	sub	r6,r6,r3
    ceb8:	30800808 	cmpgei	r2,r6,32
    cebc:	29400434 	orhi	r5,r5,16
    cec0:	1000071e 	bne	r2,zero,cee0 <__fixdfsi+0x70>
    cec4:	18befb44 	addi	r2,r3,-1043
    cec8:	2884983a 	sll	r2,r5,r2
    cecc:	2188d83a 	srl	r4,r4,r6
    ced0:	1104b03a 	or	r2,r2,r4
    ced4:	403ff526 	beq	r8,zero,ceac <__fixdfsi+0x3c>
    ced8:	0085c83a 	sub	r2,zero,r2
    cedc:	f800283a 	ret
    cee0:	008104c4 	movi	r2,1043
    cee4:	10c5c83a 	sub	r2,r2,r3
    cee8:	2884d83a 	srl	r2,r5,r2
    ceec:	003ff906 	br	ced4 <__fixdfsi+0x64>

0000cef0 <__floatsidf>:
    cef0:	defffd04 	addi	sp,sp,-12
    cef4:	dfc00215 	stw	ra,8(sp)
    cef8:	dc400115 	stw	r17,4(sp)
    cefc:	dc000015 	stw	r16,0(sp)
    cf00:	20001326 	beq	r4,zero,cf50 <__floatsidf+0x60>
    cf04:	2022d7fa 	srli	r17,r4,31
    cf08:	2021883a 	mov	r16,r4
    cf0c:	20002416 	blt	r4,zero,cfa0 <__floatsidf+0xb0>
    cf10:	8009883a 	mov	r4,r16
    cf14:	000d0380 	call	d038 <__clzsi2>
    cf18:	01010784 	movi	r4,1054
    cf1c:	2089c83a 	sub	r4,r4,r2
    cf20:	114002c8 	cmpgei	r5,r2,11
    cf24:	20c1ffcc 	andi	r3,r4,2047
    cf28:	2800161e 	bne	r5,zero,cf84 <__floatsidf+0x94>
    cf2c:	010002c4 	movi	r4,11
    cf30:	2089c83a 	sub	r4,r4,r2
    cf34:	810ad83a 	srl	r5,r16,r4
    cf38:	01000434 	movhi	r4,16
    cf3c:	10800544 	addi	r2,r2,21
    cf40:	213fffc4 	addi	r4,r4,-1
    cf44:	8084983a 	sll	r2,r16,r2
    cf48:	290a703a 	and	r5,r5,r4
    cf4c:	00000406 	br	cf60 <__floatsidf+0x70>
    cf50:	0023883a 	mov	r17,zero
    cf54:	0007883a 	mov	r3,zero
    cf58:	000b883a 	mov	r5,zero
    cf5c:	0005883a 	mov	r2,zero
    cf60:	1808953a 	slli	r4,r3,20
    cf64:	880697fa 	slli	r3,r17,31
    cf68:	2148b03a 	or	r4,r4,r5
    cf6c:	20c6b03a 	or	r3,r4,r3
    cf70:	dfc00217 	ldw	ra,8(sp)
    cf74:	dc400117 	ldw	r17,4(sp)
    cf78:	dc000017 	ldw	r16,0(sp)
    cf7c:	dec00304 	addi	sp,sp,12
    cf80:	f800283a 	ret
    cf84:	10bffd44 	addi	r2,r2,-11
    cf88:	808a983a 	sll	r5,r16,r2
    cf8c:	00800434 	movhi	r2,16
    cf90:	10bfffc4 	addi	r2,r2,-1
    cf94:	288a703a 	and	r5,r5,r2
    cf98:	0005883a 	mov	r2,zero
    cf9c:	003ff006 	br	cf60 <__floatsidf+0x70>
    cfa0:	0121c83a 	sub	r16,zero,r4
    cfa4:	003fda06 	br	cf10 <__floatsidf+0x20>

0000cfa8 <__floatunsidf>:
    cfa8:	defffe04 	addi	sp,sp,-8
    cfac:	dc000015 	stw	r16,0(sp)
    cfb0:	dfc00115 	stw	ra,4(sp)
    cfb4:	2021883a 	mov	r16,r4
    cfb8:	20000f26 	beq	r4,zero,cff8 <__floatunsidf+0x50>
    cfbc:	000d0380 	call	d038 <__clzsi2>
    cfc0:	00c10784 	movi	r3,1054
    cfc4:	1887c83a 	sub	r3,r3,r2
    cfc8:	110002c8 	cmpgei	r4,r2,11
    cfcc:	18c1ffcc 	andi	r3,r3,2047
    cfd0:	2000121e 	bne	r4,zero,d01c <__floatunsidf+0x74>
    cfd4:	014002c4 	movi	r5,11
    cfd8:	288bc83a 	sub	r5,r5,r2
    cfdc:	814ad83a 	srl	r5,r16,r5
    cfe0:	01000434 	movhi	r4,16
    cfe4:	10800544 	addi	r2,r2,21
    cfe8:	213fffc4 	addi	r4,r4,-1
    cfec:	80a0983a 	sll	r16,r16,r2
    cff0:	290a703a 	and	r5,r5,r4
    cff4:	00000206 	br	d000 <__floatunsidf+0x58>
    cff8:	0007883a 	mov	r3,zero
    cffc:	000b883a 	mov	r5,zero
    d000:	1806953a 	slli	r3,r3,20
    d004:	8005883a 	mov	r2,r16
    d008:	1946b03a 	or	r3,r3,r5
    d00c:	dfc00117 	ldw	ra,4(sp)
    d010:	dc000017 	ldw	r16,0(sp)
    d014:	dec00204 	addi	sp,sp,8
    d018:	f800283a 	ret
    d01c:	117ffd44 	addi	r5,r2,-11
    d020:	814a983a 	sll	r5,r16,r5
    d024:	00800434 	movhi	r2,16
    d028:	10bfffc4 	addi	r2,r2,-1
    d02c:	288a703a 	and	r5,r5,r2
    d030:	0021883a 	mov	r16,zero
    d034:	003ff206 	br	d000 <__floatunsidf+0x58>

0000d038 <__clzsi2>:
    d038:	00bfffd4 	movui	r2,65535
    d03c:	11000436 	bltu	r2,r4,d050 <__clzsi2+0x18>
    d040:	20804030 	cmpltui	r2,r4,256
    d044:	10000e26 	beq	r2,zero,d080 <__clzsi2+0x48>
    d048:	01400804 	movi	r5,32
    d04c:	00000406 	br	d060 <__clzsi2+0x28>
    d050:	00804034 	movhi	r2,256
    d054:	20800736 	bltu	r4,r2,d074 <__clzsi2+0x3c>
    d058:	2008d63a 	srli	r4,r4,24
    d05c:	01400204 	movi	r5,8
    d060:	00c00074 	movhi	r3,1
    d064:	20c7883a 	add	r3,r4,r3
    d068:	18817603 	ldbu	r2,1496(r3)
    d06c:	2885c83a 	sub	r2,r5,r2
    d070:	f800283a 	ret
    d074:	2008d43a 	srli	r4,r4,16
    d078:	01400404 	movi	r5,16
    d07c:	003ff806 	br	d060 <__clzsi2+0x28>
    d080:	2008d23a 	srli	r4,r4,8
    d084:	01400604 	movi	r5,24
    d088:	003ff506 	br	d060 <__clzsi2+0x28>

0000d08c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d08c:	defffe04 	addi	sp,sp,-8
    d090:	dfc00115 	stw	ra,4(sp)
    d094:	df000015 	stw	fp,0(sp)
    d098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d09c:	d0a00917 	ldw	r2,-32732(gp)
    d0a0:	10000326 	beq	r2,zero,d0b0 <alt_get_errno+0x24>
    d0a4:	d0a00917 	ldw	r2,-32732(gp)
    d0a8:	103ee83a 	callr	r2
    d0ac:	00000106 	br	d0b4 <alt_get_errno+0x28>
    d0b0:	d0a73504 	addi	r2,gp,-25388
}
    d0b4:	e037883a 	mov	sp,fp
    d0b8:	dfc00117 	ldw	ra,4(sp)
    d0bc:	df000017 	ldw	fp,0(sp)
    d0c0:	dec00204 	addi	sp,sp,8
    d0c4:	f800283a 	ret

0000d0c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d0c8:	defffb04 	addi	sp,sp,-20
    d0cc:	dfc00415 	stw	ra,16(sp)
    d0d0:	df000315 	stw	fp,12(sp)
    d0d4:	df000304 	addi	fp,sp,12
    d0d8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d0dc:	e0bffd17 	ldw	r2,-12(fp)
    d0e0:	10000616 	blt	r2,zero,d0fc <close+0x34>
    d0e4:	e0bffd17 	ldw	r2,-12(fp)
    d0e8:	10c00324 	muli	r3,r2,12
    d0ec:	00800074 	movhi	r2,1
    d0f0:	10844604 	addi	r2,r2,4376
    d0f4:	1885883a 	add	r2,r3,r2
    d0f8:	00000106 	br	d100 <close+0x38>
    d0fc:	0005883a 	mov	r2,zero
    d100:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    d104:	e0bfff17 	ldw	r2,-4(fp)
    d108:	10001926 	beq	r2,zero,d170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d10c:	e0bfff17 	ldw	r2,-4(fp)
    d110:	10800017 	ldw	r2,0(r2)
    d114:	10800417 	ldw	r2,16(r2)
    d118:	10000626 	beq	r2,zero,d134 <close+0x6c>
    d11c:	e0bfff17 	ldw	r2,-4(fp)
    d120:	10800017 	ldw	r2,0(r2)
    d124:	10800417 	ldw	r2,16(r2)
    d128:	e13fff17 	ldw	r4,-4(fp)
    d12c:	103ee83a 	callr	r2
    d130:	00000106 	br	d138 <close+0x70>
    d134:	0005883a 	mov	r2,zero
    d138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d13c:	e13ffd17 	ldw	r4,-12(fp)
    d140:	000d9480 	call	d948 <alt_release_fd>
    if (rval < 0)
    d144:	e0bffe17 	ldw	r2,-8(fp)
    d148:	1000070e 	bge	r2,zero,d168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d14c:	000d08c0 	call	d08c <alt_get_errno>
    d150:	1007883a 	mov	r3,r2
    d154:	e0bffe17 	ldw	r2,-8(fp)
    d158:	0085c83a 	sub	r2,zero,r2
    d15c:	18800015 	stw	r2,0(r3)
      return -1;
    d160:	00bfffc4 	movi	r2,-1
    d164:	00000706 	br	d184 <close+0xbc>
    }
    return 0;
    d168:	0005883a 	mov	r2,zero
    d16c:	00000506 	br	d184 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d170:	000d08c0 	call	d08c <alt_get_errno>
    d174:	1007883a 	mov	r3,r2
    d178:	00801444 	movi	r2,81
    d17c:	18800015 	stw	r2,0(r3)
    return -1;
    d180:	00bfffc4 	movi	r2,-1
  }
}
    d184:	e037883a 	mov	sp,fp
    d188:	dfc00117 	ldw	ra,4(sp)
    d18c:	df000017 	ldw	fp,0(sp)
    d190:	dec00204 	addi	sp,sp,8
    d194:	f800283a 	ret

0000d198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d198:	defffc04 	addi	sp,sp,-16
    d19c:	df000315 	stw	fp,12(sp)
    d1a0:	df000304 	addi	fp,sp,12
    d1a4:	e13fff15 	stw	r4,-4(fp)
    d1a8:	e17ffe15 	stw	r5,-8(fp)
    d1ac:	e1bffd15 	stw	r6,-12(fp)
  return len;
    d1b0:	e0bffd17 	ldw	r2,-12(fp)
}
    d1b4:	e037883a 	mov	sp,fp
    d1b8:	df000017 	ldw	fp,0(sp)
    d1bc:	dec00104 	addi	sp,sp,4
    d1c0:	f800283a 	ret

0000d1c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d1c4:	defffd04 	addi	sp,sp,-12
    d1c8:	df000215 	stw	fp,8(sp)
    d1cc:	df000204 	addi	fp,sp,8
    d1d0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    d1d4:	0001883a 	nop
    d1d8:	e0bffe17 	ldw	r2,-8(fp)
    d1dc:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    d1e0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d1e4:	10000226 	beq	r2,zero,d1f0 <_exit+0x2c>
    ALT_SIM_FAIL();
    d1e8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    d1ec:	00000106 	br	d1f4 <_exit+0x30>
    ALT_SIM_PASS();
    d1f0:	002af0b0 	cmpltui	zero,zero,43970
}
    d1f4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d1f8:	003fff06 	br	d1f8 <_exit+0x34>

0000d1fc <alt_get_errno>:
{
    d1fc:	defffe04 	addi	sp,sp,-8
    d200:	dfc00115 	stw	ra,4(sp)
    d204:	df000015 	stw	fp,0(sp)
    d208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d20c:	d0a00917 	ldw	r2,-32732(gp)
    d210:	10000326 	beq	r2,zero,d220 <alt_get_errno+0x24>
    d214:	d0a00917 	ldw	r2,-32732(gp)
    d218:	103ee83a 	callr	r2
    d21c:	00000106 	br	d224 <alt_get_errno+0x28>
    d220:	d0a73504 	addi	r2,gp,-25388
}
    d224:	e037883a 	mov	sp,fp
    d228:	dfc00117 	ldw	ra,4(sp)
    d22c:	df000017 	ldw	fp,0(sp)
    d230:	dec00204 	addi	sp,sp,8
    d234:	f800283a 	ret

0000d238 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d238:	defffb04 	addi	sp,sp,-20
    d23c:	dfc00415 	stw	ra,16(sp)
    d240:	df000315 	stw	fp,12(sp)
    d244:	df000304 	addi	fp,sp,12
    d248:	e13ffe15 	stw	r4,-8(fp)
    d24c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d250:	e0bffe17 	ldw	r2,-8(fp)
    d254:	10000616 	blt	r2,zero,d270 <fstat+0x38>
    d258:	e0bffe17 	ldw	r2,-8(fp)
    d25c:	10c00324 	muli	r3,r2,12
    d260:	00800074 	movhi	r2,1
    d264:	10844604 	addi	r2,r2,4376
    d268:	1885883a 	add	r2,r3,r2
    d26c:	00000106 	br	d274 <fstat+0x3c>
    d270:	0005883a 	mov	r2,zero
    d274:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    d278:	e0bfff17 	ldw	r2,-4(fp)
    d27c:	10001026 	beq	r2,zero,d2c0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d280:	e0bfff17 	ldw	r2,-4(fp)
    d284:	10800017 	ldw	r2,0(r2)
    d288:	10800817 	ldw	r2,32(r2)
    d28c:	10000726 	beq	r2,zero,d2ac <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d290:	e0bfff17 	ldw	r2,-4(fp)
    d294:	10800017 	ldw	r2,0(r2)
    d298:	10800817 	ldw	r2,32(r2)
    d29c:	e17ffd17 	ldw	r5,-12(fp)
    d2a0:	e13fff17 	ldw	r4,-4(fp)
    d2a4:	103ee83a 	callr	r2
    d2a8:	00000a06 	br	d2d4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d2ac:	e0bffd17 	ldw	r2,-12(fp)
    d2b0:	00c80004 	movi	r3,8192
    d2b4:	10c00115 	stw	r3,4(r2)
      return 0;
    d2b8:	0005883a 	mov	r2,zero
    d2bc:	00000506 	br	d2d4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d2c0:	000d1fc0 	call	d1fc <alt_get_errno>
    d2c4:	1007883a 	mov	r3,r2
    d2c8:	00801444 	movi	r2,81
    d2cc:	18800015 	stw	r2,0(r3)
    return -1;
    d2d0:	00bfffc4 	movi	r2,-1
  }
}
    d2d4:	e037883a 	mov	sp,fp
    d2d8:	dfc00117 	ldw	ra,4(sp)
    d2dc:	df000017 	ldw	fp,0(sp)
    d2e0:	dec00204 	addi	sp,sp,8
    d2e4:	f800283a 	ret

0000d2e8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    d2e8:	deffff04 	addi	sp,sp,-4
    d2ec:	df000015 	stw	fp,0(sp)
    d2f0:	d839883a 	mov	fp,sp
  return 0;
    d2f4:	0005883a 	mov	r2,zero
}
    d2f8:	e037883a 	mov	sp,fp
    d2fc:	df000017 	ldw	fp,0(sp)
    d300:	dec00104 	addi	sp,sp,4
    d304:	f800283a 	ret

0000d308 <alt_get_errno>:
{
    d308:	defffe04 	addi	sp,sp,-8
    d30c:	dfc00115 	stw	ra,4(sp)
    d310:	df000015 	stw	fp,0(sp)
    d314:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d318:	d0a00917 	ldw	r2,-32732(gp)
    d31c:	10000326 	beq	r2,zero,d32c <alt_get_errno+0x24>
    d320:	d0a00917 	ldw	r2,-32732(gp)
    d324:	103ee83a 	callr	r2
    d328:	00000106 	br	d330 <alt_get_errno+0x28>
    d32c:	d0a73504 	addi	r2,gp,-25388
}
    d330:	e037883a 	mov	sp,fp
    d334:	dfc00117 	ldw	ra,4(sp)
    d338:	df000017 	ldw	fp,0(sp)
    d33c:	dec00204 	addi	sp,sp,8
    d340:	f800283a 	ret

0000d344 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d344:	deffea04 	addi	sp,sp,-88
    d348:	dfc01515 	stw	ra,84(sp)
    d34c:	df001415 	stw	fp,80(sp)
    d350:	df001404 	addi	fp,sp,80
    d354:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d358:	e0bfec17 	ldw	r2,-80(fp)
    d35c:	10000616 	blt	r2,zero,d378 <isatty+0x34>
    d360:	e0bfec17 	ldw	r2,-80(fp)
    d364:	10c00324 	muli	r3,r2,12
    d368:	00800074 	movhi	r2,1
    d36c:	10844604 	addi	r2,r2,4376
    d370:	1885883a 	add	r2,r3,r2
    d374:	00000106 	br	d37c <isatty+0x38>
    d378:	0005883a 	mov	r2,zero
    d37c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    d380:	e0bfff17 	ldw	r2,-4(fp)
    d384:	10000e26 	beq	r2,zero,d3c0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d388:	e0bfff17 	ldw	r2,-4(fp)
    d38c:	10800017 	ldw	r2,0(r2)
    d390:	10800817 	ldw	r2,32(r2)
    d394:	1000021e 	bne	r2,zero,d3a0 <isatty+0x5c>
    {
      return 1;
    d398:	00800044 	movi	r2,1
    d39c:	00000d06 	br	d3d4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d3a0:	e0bfed04 	addi	r2,fp,-76
    d3a4:	100b883a 	mov	r5,r2
    d3a8:	e13fec17 	ldw	r4,-80(fp)
    d3ac:	000d2380 	call	d238 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d3b0:	e0bfee17 	ldw	r2,-72(fp)
    d3b4:	10880020 	cmpeqi	r2,r2,8192
    d3b8:	10803fcc 	andi	r2,r2,255
    d3bc:	00000506 	br	d3d4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d3c0:	000d3080 	call	d308 <alt_get_errno>
    d3c4:	1007883a 	mov	r3,r2
    d3c8:	00801444 	movi	r2,81
    d3cc:	18800015 	stw	r2,0(r3)
    return 0;
    d3d0:	0005883a 	mov	r2,zero
  }
}
    d3d4:	e037883a 	mov	sp,fp
    d3d8:	dfc00117 	ldw	ra,4(sp)
    d3dc:	df000017 	ldw	fp,0(sp)
    d3e0:	dec00204 	addi	sp,sp,8
    d3e4:	f800283a 	ret

0000d3e8 <alt_get_errno>:
{
    d3e8:	defffe04 	addi	sp,sp,-8
    d3ec:	dfc00115 	stw	ra,4(sp)
    d3f0:	df000015 	stw	fp,0(sp)
    d3f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d3f8:	d0a00917 	ldw	r2,-32732(gp)
    d3fc:	10000326 	beq	r2,zero,d40c <alt_get_errno+0x24>
    d400:	d0a00917 	ldw	r2,-32732(gp)
    d404:	103ee83a 	callr	r2
    d408:	00000106 	br	d410 <alt_get_errno+0x28>
    d40c:	d0a73504 	addi	r2,gp,-25388
}
    d410:	e037883a 	mov	sp,fp
    d414:	dfc00117 	ldw	ra,4(sp)
    d418:	df000017 	ldw	fp,0(sp)
    d41c:	dec00204 	addi	sp,sp,8
    d420:	f800283a 	ret

0000d424 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    d424:	defffb04 	addi	sp,sp,-20
    d428:	dfc00415 	stw	ra,16(sp)
    d42c:	df000315 	stw	fp,12(sp)
    d430:	df000304 	addi	fp,sp,12
    d434:	e13ffe15 	stw	r4,-8(fp)
    d438:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
    d43c:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
    d440:	e0bffe17 	ldw	r2,-8(fp)
    d444:	00802e16 	blt	zero,r2,d500 <kill+0xdc>
  {
    switch (sig)
    d448:	e0bffd17 	ldw	r2,-12(fp)
    d44c:	10800828 	cmpgeui	r2,r2,32
    d450:	1000281e 	bne	r2,zero,d4f4 <kill+0xd0>
    d454:	e0bffd17 	ldw	r2,-12(fp)
    d458:	100690ba 	slli	r3,r2,2
    d45c:	00800074 	movhi	r2,1
    d460:	1885883a 	add	r2,r3,r2
    d464:	10b51b17 	ldw	r2,-11156(r2)
    d468:	1000683a 	jmp	r2
    d46c:	0000d514 	movui	zero,852
    d470:	0000d4f4 	movhi	zero,851
    d474:	0000d4f4 	movhi	zero,851
    d478:	0000d4ec 	andhi	zero,zero,851
    d47c:	0000d4ec 	andhi	zero,zero,851
    d480:	0000d4ec 	andhi	zero,zero,851
    d484:	0000d4ec 	andhi	zero,zero,851
    d488:	0000d4f4 	movhi	zero,851
    d48c:	0000d4ec 	andhi	zero,zero,851
    d490:	0000d4ec 	andhi	zero,zero,851
    d494:	0000d4ec 	andhi	zero,zero,851
    d498:	0000d4ec 	andhi	zero,zero,851
    d49c:	0000d4ec 	andhi	zero,zero,851
    d4a0:	0000d4ec 	andhi	zero,zero,851
    d4a4:	0000d4ec 	andhi	zero,zero,851
    d4a8:	0000d4ec 	andhi	zero,zero,851
    d4ac:	0000d514 	movui	zero,852
    d4b0:	0000d4f4 	movhi	zero,851
    d4b4:	0000d4f4 	movhi	zero,851
    d4b8:	0000d4f4 	movhi	zero,851
    d4bc:	0000d514 	movui	zero,852
    d4c0:	0000d4f4 	movhi	zero,851
    d4c4:	0000d4f4 	movhi	zero,851
    d4c8:	0000d4ec 	andhi	zero,zero,851
    d4cc:	0000d4ec 	andhi	zero,zero,851
    d4d0:	0000d4ec 	andhi	zero,zero,851
    d4d4:	0000d4ec 	andhi	zero,zero,851
    d4d8:	0000d4ec 	andhi	zero,zero,851
    d4dc:	0000d4f4 	movhi	zero,851
    d4e0:	0000d4f4 	movhi	zero,851
    d4e4:	0000d4ec 	andhi	zero,zero,851
    d4e8:	0000d4ec 	andhi	zero,zero,851
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    d4ec:	0009883a 	mov	r4,zero
    d4f0:	000d1c40 	call	d1c4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    d4f4:	00800584 	movi	r2,22
    d4f8:	e0bfff15 	stw	r2,-4(fp)
    d4fc:	00000606 	br	d518 <kill+0xf4>
    }
  }

  else if (pid > 0)
    d500:	e0bffe17 	ldw	r2,-8(fp)
    d504:	0080040e 	bge	zero,r2,d518 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    d508:	008000c4 	movi	r2,3
    d50c:	e0bfff15 	stw	r2,-4(fp)
    d510:	00000106 	br	d518 <kill+0xf4>
      break;
    d514:	0001883a 	nop
  }

  if (status)
    d518:	e0bfff17 	ldw	r2,-4(fp)
    d51c:	10000626 	beq	r2,zero,d538 <kill+0x114>
  {
    ALT_ERRNO = status;
    d520:	000d3e80 	call	d3e8 <alt_get_errno>
    d524:	1007883a 	mov	r3,r2
    d528:	e0bfff17 	ldw	r2,-4(fp)
    d52c:	18800015 	stw	r2,0(r3)
    return -1;
    d530:	00bfffc4 	movi	r2,-1
    d534:	00000106 	br	d53c <kill+0x118>
  }

  return 0;
    d538:	0005883a 	mov	r2,zero
}
    d53c:	e037883a 	mov	sp,fp
    d540:	dfc00117 	ldw	ra,4(sp)
    d544:	df000017 	ldw	fp,0(sp)
    d548:	dec00204 	addi	sp,sp,8
    d54c:	f800283a 	ret

0000d550 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d550:	defffc04 	addi	sp,sp,-16
    d554:	df000315 	stw	fp,12(sp)
    d558:	df000304 	addi	fp,sp,12
    d55c:	e13fff15 	stw	r4,-4(fp)
    d560:	e17ffe15 	stw	r5,-8(fp)
    d564:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    d568:	e0fffe17 	ldw	r3,-8(fp)
    d56c:	e0bfff17 	ldw	r2,-4(fp)
    d570:	18800c26 	beq	r3,r2,d5a4 <alt_load_section+0x54>
  {
    while( to != end )
    d574:	00000806 	br	d598 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d578:	e0ffff17 	ldw	r3,-4(fp)
    d57c:	18800104 	addi	r2,r3,4
    d580:	e0bfff15 	stw	r2,-4(fp)
    d584:	e0bffe17 	ldw	r2,-8(fp)
    d588:	11000104 	addi	r4,r2,4
    d58c:	e13ffe15 	stw	r4,-8(fp)
    d590:	18c00017 	ldw	r3,0(r3)
    d594:	10c00015 	stw	r3,0(r2)
    while( to != end )
    d598:	e0fffe17 	ldw	r3,-8(fp)
    d59c:	e0bffd17 	ldw	r2,-12(fp)
    d5a0:	18bff51e 	bne	r3,r2,d578 <alt_load_section+0x28>
    }
  }
}
    d5a4:	0001883a 	nop
    d5a8:	e037883a 	mov	sp,fp
    d5ac:	df000017 	ldw	fp,0(sp)
    d5b0:	dec00104 	addi	sp,sp,4
    d5b4:	f800283a 	ret

0000d5b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d5b8:	defffe04 	addi	sp,sp,-8
    d5bc:	dfc00115 	stw	ra,4(sp)
    d5c0:	df000015 	stw	fp,0(sp)
    d5c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d5c8:	01800074 	movhi	r6,1
    d5cc:	3188fa04 	addi	r6,r6,9192
    d5d0:	01400074 	movhi	r5,1
    d5d4:	2941d604 	addi	r5,r5,1880
    d5d8:	01000074 	movhi	r4,1
    d5dc:	2108fa04 	addi	r4,r4,9192
    d5e0:	000d5500 	call	d550 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d5e4:	01800034 	movhi	r6,0
    d5e8:	31808f04 	addi	r6,r6,572
    d5ec:	01400034 	movhi	r5,0
    d5f0:	29400804 	addi	r5,r5,32
    d5f4:	01000034 	movhi	r4,0
    d5f8:	21000804 	addi	r4,r4,32
    d5fc:	000d5500 	call	d550 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d600:	01800074 	movhi	r6,1
    d604:	3181d604 	addi	r6,r6,1880
    d608:	01400074 	movhi	r5,1
    d60c:	29402a04 	addi	r5,r5,168
    d610:	01000074 	movhi	r4,1
    d614:	21002a04 	addi	r4,r4,168
    d618:	000d5500 	call	d550 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d61c:	000f1f00 	call	f1f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d620:	000f44c0 	call	f44c <alt_icache_flush_all>
}
    d624:	0001883a 	nop
    d628:	e037883a 	mov	sp,fp
    d62c:	dfc00117 	ldw	ra,4(sp)
    d630:	df000017 	ldw	fp,0(sp)
    d634:	dec00204 	addi	sp,sp,8
    d638:	f800283a 	ret

0000d63c <alt_get_errno>:
{
    d63c:	defffe04 	addi	sp,sp,-8
    d640:	dfc00115 	stw	ra,4(sp)
    d644:	df000015 	stw	fp,0(sp)
    d648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d64c:	d0a00917 	ldw	r2,-32732(gp)
    d650:	10000326 	beq	r2,zero,d660 <alt_get_errno+0x24>
    d654:	d0a00917 	ldw	r2,-32732(gp)
    d658:	103ee83a 	callr	r2
    d65c:	00000106 	br	d664 <alt_get_errno+0x28>
    d660:	d0a73504 	addi	r2,gp,-25388
}
    d664:	e037883a 	mov	sp,fp
    d668:	dfc00117 	ldw	ra,4(sp)
    d66c:	df000017 	ldw	fp,0(sp)
    d670:	dec00204 	addi	sp,sp,8
    d674:	f800283a 	ret

0000d678 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d678:	defff904 	addi	sp,sp,-28
    d67c:	dfc00615 	stw	ra,24(sp)
    d680:	df000515 	stw	fp,20(sp)
    d684:	df000504 	addi	fp,sp,20
    d688:	e13ffd15 	stw	r4,-12(fp)
    d68c:	e17ffc15 	stw	r5,-16(fp)
    d690:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d694:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d698:	e0bffd17 	ldw	r2,-12(fp)
    d69c:	10000616 	blt	r2,zero,d6b8 <lseek+0x40>
    d6a0:	e0bffd17 	ldw	r2,-12(fp)
    d6a4:	10c00324 	muli	r3,r2,12
    d6a8:	00800074 	movhi	r2,1
    d6ac:	10844604 	addi	r2,r2,4376
    d6b0:	1885883a 	add	r2,r3,r2
    d6b4:	00000106 	br	d6bc <lseek+0x44>
    d6b8:	0005883a 	mov	r2,zero
    d6bc:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    d6c0:	e0bffe17 	ldw	r2,-8(fp)
    d6c4:	10001026 	beq	r2,zero,d708 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d6c8:	e0bffe17 	ldw	r2,-8(fp)
    d6cc:	10800017 	ldw	r2,0(r2)
    d6d0:	10800717 	ldw	r2,28(r2)
    d6d4:	10000926 	beq	r2,zero,d6fc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d6d8:	e0bffe17 	ldw	r2,-8(fp)
    d6dc:	10800017 	ldw	r2,0(r2)
    d6e0:	10800717 	ldw	r2,28(r2)
    d6e4:	e1bffb17 	ldw	r6,-20(fp)
    d6e8:	e17ffc17 	ldw	r5,-16(fp)
    d6ec:	e13ffe17 	ldw	r4,-8(fp)
    d6f0:	103ee83a 	callr	r2
    d6f4:	e0bfff15 	stw	r2,-4(fp)
    d6f8:	00000506 	br	d710 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d6fc:	00bfde84 	movi	r2,-134
    d700:	e0bfff15 	stw	r2,-4(fp)
    d704:	00000206 	br	d710 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d708:	00bfebc4 	movi	r2,-81
    d70c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    d710:	e0bfff17 	ldw	r2,-4(fp)
    d714:	1000070e 	bge	r2,zero,d734 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d718:	000d63c0 	call	d63c <alt_get_errno>
    d71c:	1007883a 	mov	r3,r2
    d720:	e0bfff17 	ldw	r2,-4(fp)
    d724:	0085c83a 	sub	r2,zero,r2
    d728:	18800015 	stw	r2,0(r3)
    rc = -1;
    d72c:	00bfffc4 	movi	r2,-1
    d730:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    d734:	e0bfff17 	ldw	r2,-4(fp)
}
    d738:	e037883a 	mov	sp,fp
    d73c:	dfc00117 	ldw	ra,4(sp)
    d740:	df000017 	ldw	fp,0(sp)
    d744:	dec00204 	addi	sp,sp,8
    d748:	f800283a 	ret

0000d74c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d74c:	defffd04 	addi	sp,sp,-12
    d750:	dfc00215 	stw	ra,8(sp)
    d754:	df000115 	stw	fp,4(sp)
    d758:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d75c:	0009883a 	mov	r4,zero
    d760:	000dbc00 	call	dbc0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d764:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d768:	000dbfc0 	call	dbfc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d76c:	01800074 	movhi	r6,1
    d770:	3181b904 	addi	r6,r6,1764
    d774:	01400074 	movhi	r5,1
    d778:	2941b904 	addi	r5,r5,1764
    d77c:	01000074 	movhi	r4,1
    d780:	2101b904 	addi	r4,r4,1764
    d784:	000f5300 	call	f530 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d788:	000f2f40 	call	f2f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d78c:	01000074 	movhi	r4,1
    d790:	213cd604 	addi	r4,r4,-3240
    d794:	000fe380 	call	fe38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d798:	d0a73717 	ldw	r2,-25380(gp)
    d79c:	d0e73817 	ldw	r3,-25376(gp)
    d7a0:	d1273917 	ldw	r4,-25372(gp)
    d7a4:	200d883a 	mov	r6,r4
    d7a8:	180b883a 	mov	r5,r3
    d7ac:	1009883a 	mov	r4,r2
    d7b0:	00002780 	call	278 <main>
    d7b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d7b8:	01000044 	movi	r4,1
    d7bc:	000d0c80 	call	d0c8 <close>
  exit (result);
    d7c0:	e13fff17 	ldw	r4,-4(fp)
    d7c4:	000fe4c0 	call	fe4c <exit>

0000d7c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d7c8:	defffe04 	addi	sp,sp,-8
    d7cc:	df000115 	stw	fp,4(sp)
    d7d0:	df000104 	addi	fp,sp,4
    d7d4:	e13fff15 	stw	r4,-4(fp)
}
    d7d8:	0001883a 	nop
    d7dc:	e037883a 	mov	sp,fp
    d7e0:	df000017 	ldw	fp,0(sp)
    d7e4:	dec00104 	addi	sp,sp,4
    d7e8:	f800283a 	ret

0000d7ec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d7ec:	defffe04 	addi	sp,sp,-8
    d7f0:	df000115 	stw	fp,4(sp)
    d7f4:	df000104 	addi	fp,sp,4
    d7f8:	e13fff15 	stw	r4,-4(fp)
}
    d7fc:	0001883a 	nop
    d800:	e037883a 	mov	sp,fp
    d804:	df000017 	ldw	fp,0(sp)
    d808:	dec00104 	addi	sp,sp,4
    d80c:	f800283a 	ret

0000d810 <alt_get_errno>:
{
    d810:	defffe04 	addi	sp,sp,-8
    d814:	dfc00115 	stw	ra,4(sp)
    d818:	df000015 	stw	fp,0(sp)
    d81c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d820:	d0a00917 	ldw	r2,-32732(gp)
    d824:	10000326 	beq	r2,zero,d834 <alt_get_errno+0x24>
    d828:	d0a00917 	ldw	r2,-32732(gp)
    d82c:	103ee83a 	callr	r2
    d830:	00000106 	br	d838 <alt_get_errno+0x28>
    d834:	d0a73504 	addi	r2,gp,-25388
}
    d838:	e037883a 	mov	sp,fp
    d83c:	dfc00117 	ldw	ra,4(sp)
    d840:	df000017 	ldw	fp,0(sp)
    d844:	dec00204 	addi	sp,sp,8
    d848:	f800283a 	ret

0000d84c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d84c:	defff904 	addi	sp,sp,-28
    d850:	dfc00615 	stw	ra,24(sp)
    d854:	df000515 	stw	fp,20(sp)
    d858:	df000504 	addi	fp,sp,20
    d85c:	e13ffd15 	stw	r4,-12(fp)
    d860:	e17ffc15 	stw	r5,-16(fp)
    d864:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d868:	e0bffd17 	ldw	r2,-12(fp)
    d86c:	10000616 	blt	r2,zero,d888 <read+0x3c>
    d870:	e0bffd17 	ldw	r2,-12(fp)
    d874:	10c00324 	muli	r3,r2,12
    d878:	00800074 	movhi	r2,1
    d87c:	10844604 	addi	r2,r2,4376
    d880:	1885883a 	add	r2,r3,r2
    d884:	00000106 	br	d88c <read+0x40>
    d888:	0005883a 	mov	r2,zero
    d88c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    d890:	e0bfff17 	ldw	r2,-4(fp)
    d894:	10002226 	beq	r2,zero,d920 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d898:	e0bfff17 	ldw	r2,-4(fp)
    d89c:	10800217 	ldw	r2,8(r2)
    d8a0:	108000cc 	andi	r2,r2,3
    d8a4:	10800060 	cmpeqi	r2,r2,1
    d8a8:	1000181e 	bne	r2,zero,d90c <read+0xc0>
        (fd->dev->read))
    d8ac:	e0bfff17 	ldw	r2,-4(fp)
    d8b0:	10800017 	ldw	r2,0(r2)
    d8b4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d8b8:	10001426 	beq	r2,zero,d90c <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d8bc:	e0bfff17 	ldw	r2,-4(fp)
    d8c0:	10800017 	ldw	r2,0(r2)
    d8c4:	10800517 	ldw	r2,20(r2)
    d8c8:	e0fffb17 	ldw	r3,-20(fp)
    d8cc:	180d883a 	mov	r6,r3
    d8d0:	e17ffc17 	ldw	r5,-16(fp)
    d8d4:	e13fff17 	ldw	r4,-4(fp)
    d8d8:	103ee83a 	callr	r2
    d8dc:	e0bffe15 	stw	r2,-8(fp)
    d8e0:	e0bffe17 	ldw	r2,-8(fp)
    d8e4:	1000070e 	bge	r2,zero,d904 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d8e8:	000d8100 	call	d810 <alt_get_errno>
    d8ec:	1007883a 	mov	r3,r2
    d8f0:	e0bffe17 	ldw	r2,-8(fp)
    d8f4:	0085c83a 	sub	r2,zero,r2
    d8f8:	18800015 	stw	r2,0(r3)
          return -1;
    d8fc:	00bfffc4 	movi	r2,-1
    d900:	00000c06 	br	d934 <read+0xe8>
        }
        return rval;
    d904:	e0bffe17 	ldw	r2,-8(fp)
    d908:	00000a06 	br	d934 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d90c:	000d8100 	call	d810 <alt_get_errno>
    d910:	1007883a 	mov	r3,r2
    d914:	00800344 	movi	r2,13
    d918:	18800015 	stw	r2,0(r3)
    d91c:	00000406 	br	d930 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d920:	000d8100 	call	d810 <alt_get_errno>
    d924:	1007883a 	mov	r3,r2
    d928:	00801444 	movi	r2,81
    d92c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d930:	00bfffc4 	movi	r2,-1
}
    d934:	e037883a 	mov	sp,fp
    d938:	dfc00117 	ldw	ra,4(sp)
    d93c:	df000017 	ldw	fp,0(sp)
    d940:	dec00204 	addi	sp,sp,8
    d944:	f800283a 	ret

0000d948 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d948:	defffe04 	addi	sp,sp,-8
    d94c:	df000115 	stw	fp,4(sp)
    d950:	df000104 	addi	fp,sp,4
    d954:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d958:	e0bfff17 	ldw	r2,-4(fp)
    d95c:	108000d0 	cmplti	r2,r2,3
    d960:	10000a1e 	bne	r2,zero,d98c <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
    d964:	e0bfff17 	ldw	r2,-4(fp)
    d968:	10c00324 	muli	r3,r2,12
    d96c:	00800074 	movhi	r2,1
    d970:	1885883a 	add	r2,r3,r2
    d974:	10044815 	stw	zero,4384(r2)
    alt_fd_list[fd].dev      = 0;
    d978:	e0bfff17 	ldw	r2,-4(fp)
    d97c:	10c00324 	muli	r3,r2,12
    d980:	00800074 	movhi	r2,1
    d984:	1885883a 	add	r2,r3,r2
    d988:	10044615 	stw	zero,4376(r2)
  }
}
    d98c:	0001883a 	nop
    d990:	e037883a 	mov	sp,fp
    d994:	df000017 	ldw	fp,0(sp)
    d998:	dec00104 	addi	sp,sp,4
    d99c:	f800283a 	ret

0000d9a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d9a0:	defff904 	addi	sp,sp,-28
    d9a4:	df000615 	stw	fp,24(sp)
    d9a8:	df000604 	addi	fp,sp,24
    d9ac:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    d9b0:	0005303a 	rdctl	r2,status
    d9b4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d9b8:	e0fffd17 	ldw	r3,-12(fp)
    d9bc:	00bfff84 	movi	r2,-2
    d9c0:	1884703a 	and	r2,r3,r2
    d9c4:	1001703a 	wrctl	status,r2
  return context;
    d9c8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d9cc:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d9d0:	d0a00a17 	ldw	r2,-32728(gp)
    d9d4:	10c000c4 	addi	r3,r2,3
    d9d8:	00bfff04 	movi	r2,-4
    d9dc:	1884703a 	and	r2,r3,r2
    d9e0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d9e4:	d0e00a17 	ldw	r3,-32728(gp)
    d9e8:	e0bffa17 	ldw	r2,-24(fp)
    d9ec:	1887883a 	add	r3,r3,r2
    d9f0:	00810034 	movhi	r2,1024
    d9f4:	10800004 	addi	r2,r2,0
    d9f8:	10c0072e 	bgeu	r2,r3,da18 <sbrk+0x78>
    d9fc:	e0bfff17 	ldw	r2,-4(fp)
    da00:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    da04:	e0bffc17 	ldw	r2,-16(fp)
    da08:	1001703a 	wrctl	status,r2
}
    da0c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    da10:	00bfffc4 	movi	r2,-1
    da14:	00000c06 	br	da48 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    da18:	d0a00a17 	ldw	r2,-32728(gp)
    da1c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    da20:	d0e00a17 	ldw	r3,-32728(gp)
    da24:	e0bffa17 	ldw	r2,-24(fp)
    da28:	1885883a 	add	r2,r3,r2
    da2c:	d0a00a15 	stw	r2,-32728(gp)
    da30:	e0bfff17 	ldw	r2,-4(fp)
    da34:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    da38:	e0bffb17 	ldw	r2,-20(fp)
    da3c:	1001703a 	wrctl	status,r2
}
    da40:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    da44:	e0bffe17 	ldw	r2,-8(fp)
} 
    da48:	e037883a 	mov	sp,fp
    da4c:	df000017 	ldw	fp,0(sp)
    da50:	dec00104 	addi	sp,sp,4
    da54:	f800283a 	ret

0000da58 <alt_get_errno>:
{
    da58:	defffe04 	addi	sp,sp,-8
    da5c:	dfc00115 	stw	ra,4(sp)
    da60:	df000015 	stw	fp,0(sp)
    da64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    da68:	d0a00917 	ldw	r2,-32732(gp)
    da6c:	10000326 	beq	r2,zero,da7c <alt_get_errno+0x24>
    da70:	d0a00917 	ldw	r2,-32732(gp)
    da74:	103ee83a 	callr	r2
    da78:	00000106 	br	da80 <alt_get_errno+0x28>
    da7c:	d0a73504 	addi	r2,gp,-25388
}
    da80:	e037883a 	mov	sp,fp
    da84:	dfc00117 	ldw	ra,4(sp)
    da88:	df000017 	ldw	fp,0(sp)
    da8c:	dec00204 	addi	sp,sp,8
    da90:	f800283a 	ret

0000da94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    da94:	defff904 	addi	sp,sp,-28
    da98:	dfc00615 	stw	ra,24(sp)
    da9c:	df000515 	stw	fp,20(sp)
    daa0:	df000504 	addi	fp,sp,20
    daa4:	e13ffd15 	stw	r4,-12(fp)
    daa8:	e17ffc15 	stw	r5,-16(fp)
    daac:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dab0:	e0bffd17 	ldw	r2,-12(fp)
    dab4:	10000616 	blt	r2,zero,dad0 <write+0x3c>
    dab8:	e0bffd17 	ldw	r2,-12(fp)
    dabc:	10c00324 	muli	r3,r2,12
    dac0:	00800074 	movhi	r2,1
    dac4:	10844604 	addi	r2,r2,4376
    dac8:	1885883a 	add	r2,r3,r2
    dacc:	00000106 	br	dad4 <write+0x40>
    dad0:	0005883a 	mov	r2,zero
    dad4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    dad8:	e0bfff17 	ldw	r2,-4(fp)
    dadc:	10002126 	beq	r2,zero,db64 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    dae0:	e0bfff17 	ldw	r2,-4(fp)
    dae4:	10800217 	ldw	r2,8(r2)
    dae8:	108000cc 	andi	r2,r2,3
    daec:	10001826 	beq	r2,zero,db50 <write+0xbc>
    daf0:	e0bfff17 	ldw	r2,-4(fp)
    daf4:	10800017 	ldw	r2,0(r2)
    daf8:	10800617 	ldw	r2,24(r2)
    dafc:	10001426 	beq	r2,zero,db50 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    db00:	e0bfff17 	ldw	r2,-4(fp)
    db04:	10800017 	ldw	r2,0(r2)
    db08:	10800617 	ldw	r2,24(r2)
    db0c:	e0fffb17 	ldw	r3,-20(fp)
    db10:	180d883a 	mov	r6,r3
    db14:	e17ffc17 	ldw	r5,-16(fp)
    db18:	e13fff17 	ldw	r4,-4(fp)
    db1c:	103ee83a 	callr	r2
    db20:	e0bffe15 	stw	r2,-8(fp)
    db24:	e0bffe17 	ldw	r2,-8(fp)
    db28:	1000070e 	bge	r2,zero,db48 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    db2c:	000da580 	call	da58 <alt_get_errno>
    db30:	1007883a 	mov	r3,r2
    db34:	e0bffe17 	ldw	r2,-8(fp)
    db38:	0085c83a 	sub	r2,zero,r2
    db3c:	18800015 	stw	r2,0(r3)
        return -1;
    db40:	00bfffc4 	movi	r2,-1
    db44:	00000c06 	br	db78 <write+0xe4>
      }
      return rval;
    db48:	e0bffe17 	ldw	r2,-8(fp)
    db4c:	00000a06 	br	db78 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    db50:	000da580 	call	da58 <alt_get_errno>
    db54:	1007883a 	mov	r3,r2
    db58:	00800344 	movi	r2,13
    db5c:	18800015 	stw	r2,0(r3)
    db60:	00000406 	br	db74 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    db64:	000da580 	call	da58 <alt_get_errno>
    db68:	1007883a 	mov	r3,r2
    db6c:	00801444 	movi	r2,81
    db70:	18800015 	stw	r2,0(r3)
  }
  return -1;
    db74:	00bfffc4 	movi	r2,-1
}
    db78:	e037883a 	mov	sp,fp
    db7c:	dfc00117 	ldw	ra,4(sp)
    db80:	df000017 	ldw	fp,0(sp)
    db84:	dec00204 	addi	sp,sp,8
    db88:	f800283a 	ret

0000db8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    db8c:	defffd04 	addi	sp,sp,-12
    db90:	dfc00215 	stw	ra,8(sp)
    db94:	df000115 	stw	fp,4(sp)
    db98:	df000104 	addi	fp,sp,4
    db9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    dba0:	d1600604 	addi	r5,gp,-32744
    dba4:	e13fff17 	ldw	r4,-4(fp)
    dba8:	000f24c0 	call	f24c <alt_dev_llist_insert>
}
    dbac:	e037883a 	mov	sp,fp
    dbb0:	dfc00117 	ldw	ra,4(sp)
    dbb4:	df000017 	ldw	fp,0(sp)
    dbb8:	dec00204 	addi	sp,sp,8
    dbbc:	f800283a 	ret

0000dbc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    dbc0:	defffd04 	addi	sp,sp,-12
    dbc4:	dfc00215 	stw	ra,8(sp)
    dbc8:	df000115 	stw	fp,4(sp)
    dbcc:	df000104 	addi	fp,sp,4
    dbd0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    dbd4:	000fb440 	call	fb44 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    dbd8:	00800044 	movi	r2,1
    dbdc:	1001703a 	wrctl	status,r2
}
    dbe0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    dbe4:	0001883a 	nop
    dbe8:	e037883a 	mov	sp,fp
    dbec:	dfc00117 	ldw	ra,4(sp)
    dbf0:	df000017 	ldw	fp,0(sp)
    dbf4:	dec00204 	addi	sp,sp,8
    dbf8:	f800283a 	ret

0000dbfc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    dbfc:	defffe04 	addi	sp,sp,-8
    dc00:	dfc00115 	stw	ra,4(sp)
    dc04:	df000015 	stw	fp,0(sp)
    dc08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    dc0c:	01c00204 	movi	r7,8
    dc10:	000d883a 	mov	r6,zero
    dc14:	000b883a 	mov	r5,zero
    dc18:	013fc834 	movhi	r4,65312
    dc1c:	21080004 	addi	r4,r4,8192
    dc20:	000e7880 	call	e788 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    dc24:	01800204 	movi	r6,8
    dc28:	000b883a 	mov	r5,zero
    dc2c:	01000074 	movhi	r4,1
    dc30:	2104b004 	addi	r4,r4,4800
    dc34:	000de000 	call	de00 <altera_avalon_jtag_uart_init>
    dc38:	01000074 	movhi	r4,1
    dc3c:	2104a604 	addi	r4,r4,4760
    dc40:	000db8c0 	call	db8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    dc44:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    dc48:	01000074 	movhi	r4,1
    dc4c:	2108be04 	addi	r4,r4,8952
    dc50:	000db8c0 	call	db8c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    dc54:	01000074 	movhi	r4,1
    dc58:	2108ca04 	addi	r4,r4,9000
    dc5c:	000db8c0 	call	db8c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    dc60:	01000074 	movhi	r4,1
    dc64:	2108d604 	addi	r4,r4,9048
    dc68:	000e8b80 	call	e8b8 <alt_up_character_lcd_init>
    dc6c:	01000074 	movhi	r4,1
    dc70:	2108d604 	addi	r4,r4,9048
    dc74:	000db8c0 	call	db8c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    dc78:	01000074 	movhi	r4,1
    dc7c:	2108e104 	addi	r4,r4,9092
    dc80:	000db8c0 	call	db8c <alt_dev_reg>
}
    dc84:	0001883a 	nop
    dc88:	e037883a 	mov	sp,fp
    dc8c:	dfc00117 	ldw	ra,4(sp)
    dc90:	df000017 	ldw	fp,0(sp)
    dc94:	dec00204 	addi	sp,sp,8
    dc98:	f800283a 	ret

0000dc9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    dc9c:	defffa04 	addi	sp,sp,-24
    dca0:	dfc00515 	stw	ra,20(sp)
    dca4:	df000415 	stw	fp,16(sp)
    dca8:	df000404 	addi	fp,sp,16
    dcac:	e13ffe15 	stw	r4,-8(fp)
    dcb0:	e17ffd15 	stw	r5,-12(fp)
    dcb4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dcb8:	e0bffe17 	ldw	r2,-8(fp)
    dcbc:	10800017 	ldw	r2,0(r2)
    dcc0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    dcc4:	e0bfff17 	ldw	r2,-4(fp)
    dcc8:	10c00a04 	addi	r3,r2,40
    dccc:	e0bffe17 	ldw	r2,-8(fp)
    dcd0:	10800217 	ldw	r2,8(r2)
    dcd4:	100f883a 	mov	r7,r2
    dcd8:	e1bffc17 	ldw	r6,-16(fp)
    dcdc:	e17ffd17 	ldw	r5,-12(fp)
    dce0:	1809883a 	mov	r4,r3
    dce4:	000e2c00 	call	e2c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    dce8:	e037883a 	mov	sp,fp
    dcec:	dfc00117 	ldw	ra,4(sp)
    dcf0:	df000017 	ldw	fp,0(sp)
    dcf4:	dec00204 	addi	sp,sp,8
    dcf8:	f800283a 	ret

0000dcfc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    dcfc:	defffa04 	addi	sp,sp,-24
    dd00:	dfc00515 	stw	ra,20(sp)
    dd04:	df000415 	stw	fp,16(sp)
    dd08:	df000404 	addi	fp,sp,16
    dd0c:	e13ffe15 	stw	r4,-8(fp)
    dd10:	e17ffd15 	stw	r5,-12(fp)
    dd14:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dd18:	e0bffe17 	ldw	r2,-8(fp)
    dd1c:	10800017 	ldw	r2,0(r2)
    dd20:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    dd24:	e0bfff17 	ldw	r2,-4(fp)
    dd28:	10c00a04 	addi	r3,r2,40
    dd2c:	e0bffe17 	ldw	r2,-8(fp)
    dd30:	10800217 	ldw	r2,8(r2)
    dd34:	100f883a 	mov	r7,r2
    dd38:	e1bffc17 	ldw	r6,-16(fp)
    dd3c:	e17ffd17 	ldw	r5,-12(fp)
    dd40:	1809883a 	mov	r4,r3
    dd44:	000e4e00 	call	e4e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    dd48:	e037883a 	mov	sp,fp
    dd4c:	dfc00117 	ldw	ra,4(sp)
    dd50:	df000017 	ldw	fp,0(sp)
    dd54:	dec00204 	addi	sp,sp,8
    dd58:	f800283a 	ret

0000dd5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    dd5c:	defffc04 	addi	sp,sp,-16
    dd60:	dfc00315 	stw	ra,12(sp)
    dd64:	df000215 	stw	fp,8(sp)
    dd68:	df000204 	addi	fp,sp,8
    dd6c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dd70:	e0bffe17 	ldw	r2,-8(fp)
    dd74:	10800017 	ldw	r2,0(r2)
    dd78:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    dd7c:	e0bfff17 	ldw	r2,-4(fp)
    dd80:	10c00a04 	addi	r3,r2,40
    dd84:	e0bffe17 	ldw	r2,-8(fp)
    dd88:	10800217 	ldw	r2,8(r2)
    dd8c:	100b883a 	mov	r5,r2
    dd90:	1809883a 	mov	r4,r3
    dd94:	000e1640 	call	e164 <altera_avalon_jtag_uart_close>
}
    dd98:	e037883a 	mov	sp,fp
    dd9c:	dfc00117 	ldw	ra,4(sp)
    dda0:	df000017 	ldw	fp,0(sp)
    dda4:	dec00204 	addi	sp,sp,8
    dda8:	f800283a 	ret

0000ddac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ddac:	defffa04 	addi	sp,sp,-24
    ddb0:	dfc00515 	stw	ra,20(sp)
    ddb4:	df000415 	stw	fp,16(sp)
    ddb8:	df000404 	addi	fp,sp,16
    ddbc:	e13ffe15 	stw	r4,-8(fp)
    ddc0:	e17ffd15 	stw	r5,-12(fp)
    ddc4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ddc8:	e0bffe17 	ldw	r2,-8(fp)
    ddcc:	10800017 	ldw	r2,0(r2)
    ddd0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ddd4:	e0bfff17 	ldw	r2,-4(fp)
    ddd8:	10800a04 	addi	r2,r2,40
    dddc:	e1bffc17 	ldw	r6,-16(fp)
    dde0:	e17ffd17 	ldw	r5,-12(fp)
    dde4:	1009883a 	mov	r4,r2
    dde8:	000e1cc0 	call	e1cc <altera_avalon_jtag_uart_ioctl>
}
    ddec:	e037883a 	mov	sp,fp
    ddf0:	dfc00117 	ldw	ra,4(sp)
    ddf4:	df000017 	ldw	fp,0(sp)
    ddf8:	dec00204 	addi	sp,sp,8
    ddfc:	f800283a 	ret

0000de00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    de00:	defffb04 	addi	sp,sp,-20
    de04:	dfc00415 	stw	ra,16(sp)
    de08:	df000315 	stw	fp,12(sp)
    de0c:	df000304 	addi	fp,sp,12
    de10:	e13fff15 	stw	r4,-4(fp)
    de14:	e17ffe15 	stw	r5,-8(fp)
    de18:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    de1c:	e0bfff17 	ldw	r2,-4(fp)
    de20:	00c00044 	movi	r3,1
    de24:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    de28:	e0bfff17 	ldw	r2,-4(fp)
    de2c:	10800017 	ldw	r2,0(r2)
    de30:	10800104 	addi	r2,r2,4
    de34:	1007883a 	mov	r3,r2
    de38:	e0bfff17 	ldw	r2,-4(fp)
    de3c:	10800817 	ldw	r2,32(r2)
    de40:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    de44:	e0bffd17 	ldw	r2,-12(fp)
    de48:	01800074 	movhi	r6,1
    de4c:	31b7ad04 	addi	r6,r6,-8524
    de50:	e17fff17 	ldw	r5,-4(fp)
    de54:	1009883a 	mov	r4,r2
    de58:	000f5ac0 	call	f5ac <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    de5c:	e0bfff17 	ldw	r2,-4(fp)
    de60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    de64:	e0bfff17 	ldw	r2,-4(fp)
    de68:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    de6c:	d0e73b17 	ldw	r3,-25364(gp)
    de70:	e1ffff17 	ldw	r7,-4(fp)
    de74:	01800074 	movhi	r6,1
    de78:	31b83104 	addi	r6,r6,-7996
    de7c:	180b883a 	mov	r5,r3
    de80:	1009883a 	mov	r4,r2
    de84:	000f0900 	call	f090 <alt_alarm_start>
    de88:	1000040e 	bge	r2,zero,de9c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    de8c:	e0ffff17 	ldw	r3,-4(fp)
    de90:	00a00034 	movhi	r2,32768
    de94:	10bfffc4 	addi	r2,r2,-1
    de98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    de9c:	0001883a 	nop
    dea0:	e037883a 	mov	sp,fp
    dea4:	dfc00117 	ldw	ra,4(sp)
    dea8:	df000017 	ldw	fp,0(sp)
    deac:	dec00204 	addi	sp,sp,8
    deb0:	f800283a 	ret

0000deb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    deb4:	defff704 	addi	sp,sp,-36
    deb8:	df000815 	stw	fp,32(sp)
    debc:	df000804 	addi	fp,sp,32
    dec0:	e13ff915 	stw	r4,-28(fp)
    dec4:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    dec8:	e0bff917 	ldw	r2,-28(fp)
    decc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    ded0:	e0bffd17 	ldw	r2,-12(fp)
    ded4:	10800017 	ldw	r2,0(r2)
    ded8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dedc:	e0bffc17 	ldw	r2,-16(fp)
    dee0:	10800104 	addi	r2,r2,4
    dee4:	10800037 	ldwio	r2,0(r2)
    dee8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    deec:	e0bffb17 	ldw	r2,-20(fp)
    def0:	1080c00c 	andi	r2,r2,768
    def4:	10006d26 	beq	r2,zero,e0ac <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    def8:	e0bffb17 	ldw	r2,-20(fp)
    defc:	1080400c 	andi	r2,r2,256
    df00:	10003526 	beq	r2,zero,dfd8 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    df04:	00800074 	movhi	r2,1
    df08:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    df0c:	e0bffd17 	ldw	r2,-12(fp)
    df10:	10800a17 	ldw	r2,40(r2)
    df14:	10800044 	addi	r2,r2,1
    df18:	1081ffcc 	andi	r2,r2,2047
    df1c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    df20:	e0bffd17 	ldw	r2,-12(fp)
    df24:	10800b17 	ldw	r2,44(r2)
    df28:	e0fffa17 	ldw	r3,-24(fp)
    df2c:	18801526 	beq	r3,r2,df84 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    df30:	e0bffc17 	ldw	r2,-16(fp)
    df34:	10800037 	ldwio	r2,0(r2)
    df38:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    df3c:	e0bfff17 	ldw	r2,-4(fp)
    df40:	10a0000c 	andi	r2,r2,32768
    df44:	10001126 	beq	r2,zero,df8c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    df48:	e0bffd17 	ldw	r2,-12(fp)
    df4c:	10800a17 	ldw	r2,40(r2)
    df50:	e0ffff17 	ldw	r3,-4(fp)
    df54:	1809883a 	mov	r4,r3
    df58:	e0fffd17 	ldw	r3,-12(fp)
    df5c:	1885883a 	add	r2,r3,r2
    df60:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    df64:	e0bffd17 	ldw	r2,-12(fp)
    df68:	10800a17 	ldw	r2,40(r2)
    df6c:	10800044 	addi	r2,r2,1
    df70:	10c1ffcc 	andi	r3,r2,2047
    df74:	e0bffd17 	ldw	r2,-12(fp)
    df78:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    df7c:	0001883a 	nop
      {
    df80:	003fe206 	br	df0c <altera_avalon_jtag_uart_irq+0x58>
          break;
    df84:	0001883a 	nop
    df88:	00000106 	br	df90 <altera_avalon_jtag_uart_irq+0xdc>
          break;
    df8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    df90:	e0bfff17 	ldw	r2,-4(fp)
    df94:	10bfffec 	andhi	r2,r2,65535
    df98:	10000f26 	beq	r2,zero,dfd8 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    df9c:	e0bffd17 	ldw	r2,-12(fp)
    dfa0:	10c00817 	ldw	r3,32(r2)
    dfa4:	00bfff84 	movi	r2,-2
    dfa8:	1886703a 	and	r3,r3,r2
    dfac:	e0bffd17 	ldw	r2,-12(fp)
    dfb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    dfb4:	e0bffc17 	ldw	r2,-16(fp)
    dfb8:	10800104 	addi	r2,r2,4
    dfbc:	1007883a 	mov	r3,r2
    dfc0:	e0bffd17 	ldw	r2,-12(fp)
    dfc4:	10800817 	ldw	r2,32(r2)
    dfc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dfcc:	e0bffc17 	ldw	r2,-16(fp)
    dfd0:	10800104 	addi	r2,r2,4
    dfd4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    dfd8:	e0bffb17 	ldw	r2,-20(fp)
    dfdc:	1080800c 	andi	r2,r2,512
    dfe0:	103fbe26 	beq	r2,zero,dedc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dfe4:	e0bffb17 	ldw	r2,-20(fp)
    dfe8:	1004d43a 	srli	r2,r2,16
    dfec:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dff0:	00001406 	br	e044 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dff4:	e0bffc17 	ldw	r2,-16(fp)
    dff8:	e0fffd17 	ldw	r3,-12(fp)
    dffc:	18c00d17 	ldw	r3,52(r3)
    e000:	e13ffd17 	ldw	r4,-12(fp)
    e004:	20c7883a 	add	r3,r4,r3
    e008:	18c20e03 	ldbu	r3,2104(r3)
    e00c:	18c03fcc 	andi	r3,r3,255
    e010:	18c0201c 	xori	r3,r3,128
    e014:	18ffe004 	addi	r3,r3,-128
    e018:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e01c:	e0bffd17 	ldw	r2,-12(fp)
    e020:	10800d17 	ldw	r2,52(r2)
    e024:	10800044 	addi	r2,r2,1
    e028:	10c1ffcc 	andi	r3,r2,2047
    e02c:	e0bffd17 	ldw	r2,-12(fp)
    e030:	10c00d15 	stw	r3,52(r2)
    e034:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e038:	e0bffe17 	ldw	r2,-8(fp)
    e03c:	10bfffc4 	addi	r2,r2,-1
    e040:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    e044:	e0bffe17 	ldw	r2,-8(fp)
    e048:	10000526 	beq	r2,zero,e060 <altera_avalon_jtag_uart_irq+0x1ac>
    e04c:	e0bffd17 	ldw	r2,-12(fp)
    e050:	10c00d17 	ldw	r3,52(r2)
    e054:	e0bffd17 	ldw	r2,-12(fp)
    e058:	10800c17 	ldw	r2,48(r2)
    e05c:	18bfe51e 	bne	r3,r2,dff4 <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
    e060:	e0bffe17 	ldw	r2,-8(fp)
    e064:	103f9d26 	beq	r2,zero,dedc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e068:	e0bffd17 	ldw	r2,-12(fp)
    e06c:	10c00817 	ldw	r3,32(r2)
    e070:	00bfff44 	movi	r2,-3
    e074:	1886703a 	and	r3,r3,r2
    e078:	e0bffd17 	ldw	r2,-12(fp)
    e07c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e080:	e0bffd17 	ldw	r2,-12(fp)
    e084:	10800017 	ldw	r2,0(r2)
    e088:	10800104 	addi	r2,r2,4
    e08c:	1007883a 	mov	r3,r2
    e090:	e0bffd17 	ldw	r2,-12(fp)
    e094:	10800817 	ldw	r2,32(r2)
    e098:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e09c:	e0bffc17 	ldw	r2,-16(fp)
    e0a0:	10800104 	addi	r2,r2,4
    e0a4:	10800037 	ldwio	r2,0(r2)
  {
    e0a8:	003f8c06 	br	dedc <altera_avalon_jtag_uart_irq+0x28>
      break;
    e0ac:	0001883a 	nop
      }
    }
  }
}
    e0b0:	0001883a 	nop
    e0b4:	e037883a 	mov	sp,fp
    e0b8:	df000017 	ldw	fp,0(sp)
    e0bc:	dec00104 	addi	sp,sp,4
    e0c0:	f800283a 	ret

0000e0c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e0c4:	defffc04 	addi	sp,sp,-16
    e0c8:	df000315 	stw	fp,12(sp)
    e0cc:	df000304 	addi	fp,sp,12
    e0d0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e0d4:	e0bffd17 	ldw	r2,-12(fp)
    e0d8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e0dc:	e0bfff17 	ldw	r2,-4(fp)
    e0e0:	10800017 	ldw	r2,0(r2)
    e0e4:	10800104 	addi	r2,r2,4
    e0e8:	10800037 	ldwio	r2,0(r2)
    e0ec:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e0f0:	e0bffe17 	ldw	r2,-8(fp)
    e0f4:	1081000c 	andi	r2,r2,1024
    e0f8:	10000b26 	beq	r2,zero,e128 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e0fc:	e0bfff17 	ldw	r2,-4(fp)
    e100:	10800017 	ldw	r2,0(r2)
    e104:	10800104 	addi	r2,r2,4
    e108:	1007883a 	mov	r3,r2
    e10c:	e0bfff17 	ldw	r2,-4(fp)
    e110:	10800817 	ldw	r2,32(r2)
    e114:	10810014 	ori	r2,r2,1024
    e118:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e11c:	e0bfff17 	ldw	r2,-4(fp)
    e120:	10000915 	stw	zero,36(r2)
    e124:	00000a06 	br	e150 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e128:	e0bfff17 	ldw	r2,-4(fp)
    e12c:	10c00917 	ldw	r3,36(r2)
    e130:	00a00034 	movhi	r2,32768
    e134:	10bfff04 	addi	r2,r2,-4
    e138:	10c00536 	bltu	r2,r3,e150 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e13c:	e0bfff17 	ldw	r2,-4(fp)
    e140:	10800917 	ldw	r2,36(r2)
    e144:	10c00044 	addi	r3,r2,1
    e148:	e0bfff17 	ldw	r2,-4(fp)
    e14c:	10c00915 	stw	r3,36(r2)
    e150:	d0a73b17 	ldw	r2,-25364(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e154:	e037883a 	mov	sp,fp
    e158:	df000017 	ldw	fp,0(sp)
    e15c:	dec00104 	addi	sp,sp,4
    e160:	f800283a 	ret

0000e164 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e164:	defffd04 	addi	sp,sp,-12
    e168:	df000215 	stw	fp,8(sp)
    e16c:	df000204 	addi	fp,sp,8
    e170:	e13fff15 	stw	r4,-4(fp)
    e174:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e178:	00000506 	br	e190 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e17c:	e0bffe17 	ldw	r2,-8(fp)
    e180:	1090000c 	andi	r2,r2,16384
    e184:	10000226 	beq	r2,zero,e190 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e188:	00bffd44 	movi	r2,-11
    e18c:	00000b06 	br	e1bc <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e190:	e0bfff17 	ldw	r2,-4(fp)
    e194:	10c00d17 	ldw	r3,52(r2)
    e198:	e0bfff17 	ldw	r2,-4(fp)
    e19c:	10800c17 	ldw	r2,48(r2)
    e1a0:	18800526 	beq	r3,r2,e1b8 <altera_avalon_jtag_uart_close+0x54>
    e1a4:	e0bfff17 	ldw	r2,-4(fp)
    e1a8:	10c00917 	ldw	r3,36(r2)
    e1ac:	e0bfff17 	ldw	r2,-4(fp)
    e1b0:	10800117 	ldw	r2,4(r2)
    e1b4:	18bff136 	bltu	r3,r2,e17c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    e1b8:	0005883a 	mov	r2,zero
}
    e1bc:	e037883a 	mov	sp,fp
    e1c0:	df000017 	ldw	fp,0(sp)
    e1c4:	dec00104 	addi	sp,sp,4
    e1c8:	f800283a 	ret

0000e1cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e1cc:	defffa04 	addi	sp,sp,-24
    e1d0:	df000515 	stw	fp,20(sp)
    e1d4:	df000504 	addi	fp,sp,20
    e1d8:	e13ffd15 	stw	r4,-12(fp)
    e1dc:	e17ffc15 	stw	r5,-16(fp)
    e1e0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    e1e4:	00bff9c4 	movi	r2,-25
    e1e8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    e1ec:	e0bffc17 	ldw	r2,-16(fp)
    e1f0:	109a8060 	cmpeqi	r2,r2,27137
    e1f4:	1000041e 	bne	r2,zero,e208 <altera_avalon_jtag_uart_ioctl+0x3c>
    e1f8:	e0bffc17 	ldw	r2,-16(fp)
    e1fc:	109a80a0 	cmpeqi	r2,r2,27138
    e200:	1000181e 	bne	r2,zero,e264 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    e204:	00002906 	br	e2ac <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    e208:	e0bffd17 	ldw	r2,-12(fp)
    e20c:	10c00117 	ldw	r3,4(r2)
    e210:	00a00034 	movhi	r2,32768
    e214:	10bfffc4 	addi	r2,r2,-1
    e218:	18802126 	beq	r3,r2,e2a0 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    e21c:	e0bffb17 	ldw	r2,-20(fp)
    e220:	10800017 	ldw	r2,0(r2)
    e224:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e228:	e0bffe17 	ldw	r2,-8(fp)
    e22c:	10800090 	cmplti	r2,r2,2
    e230:	1000061e 	bne	r2,zero,e24c <altera_avalon_jtag_uart_ioctl+0x80>
    e234:	e0fffe17 	ldw	r3,-8(fp)
    e238:	00a00034 	movhi	r2,32768
    e23c:	10bfffc4 	addi	r2,r2,-1
    e240:	18800226 	beq	r3,r2,e24c <altera_avalon_jtag_uart_ioctl+0x80>
    e244:	e0bffe17 	ldw	r2,-8(fp)
    e248:	00000206 	br	e254 <altera_avalon_jtag_uart_ioctl+0x88>
    e24c:	00a00034 	movhi	r2,32768
    e250:	10bfff84 	addi	r2,r2,-2
    e254:	e0fffd17 	ldw	r3,-12(fp)
    e258:	18800115 	stw	r2,4(r3)
      rc = 0;
    e25c:	e03fff15 	stw	zero,-4(fp)
    break;
    e260:	00000f06 	br	e2a0 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    e264:	e0bffd17 	ldw	r2,-12(fp)
    e268:	10c00117 	ldw	r3,4(r2)
    e26c:	00a00034 	movhi	r2,32768
    e270:	10bfffc4 	addi	r2,r2,-1
    e274:	18800c26 	beq	r3,r2,e2a8 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e278:	e0bffd17 	ldw	r2,-12(fp)
    e27c:	10c00917 	ldw	r3,36(r2)
    e280:	e0bffd17 	ldw	r2,-12(fp)
    e284:	10800117 	ldw	r2,4(r2)
    e288:	1885803a 	cmpltu	r2,r3,r2
    e28c:	10c03fcc 	andi	r3,r2,255
    e290:	e0bffb17 	ldw	r2,-20(fp)
    e294:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e298:	e03fff15 	stw	zero,-4(fp)
    break;
    e29c:	00000206 	br	e2a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    e2a0:	0001883a 	nop
    e2a4:	00000106 	br	e2ac <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    e2a8:	0001883a 	nop
  }

  return rc;
    e2ac:	e0bfff17 	ldw	r2,-4(fp)
}
    e2b0:	e037883a 	mov	sp,fp
    e2b4:	df000017 	ldw	fp,0(sp)
    e2b8:	dec00104 	addi	sp,sp,4
    e2bc:	f800283a 	ret

0000e2c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e2c0:	defff304 	addi	sp,sp,-52
    e2c4:	dfc00c15 	stw	ra,48(sp)
    e2c8:	df000b15 	stw	fp,44(sp)
    e2cc:	df000b04 	addi	fp,sp,44
    e2d0:	e13ff815 	stw	r4,-32(fp)
    e2d4:	e17ff715 	stw	r5,-36(fp)
    e2d8:	e1bff615 	stw	r6,-40(fp)
    e2dc:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
    e2e0:	e0bff717 	ldw	r2,-36(fp)
    e2e4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e2e8:	00004706 	br	e408 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e2ec:	e0bff817 	ldw	r2,-32(fp)
    e2f0:	10800a17 	ldw	r2,40(r2)
    e2f4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    e2f8:	e0bff817 	ldw	r2,-32(fp)
    e2fc:	10800b17 	ldw	r2,44(r2)
    e300:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    e304:	e0fffd17 	ldw	r3,-12(fp)
    e308:	e0bffc17 	ldw	r2,-16(fp)
    e30c:	18800536 	bltu	r3,r2,e324 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e310:	e0fffd17 	ldw	r3,-12(fp)
    e314:	e0bffc17 	ldw	r2,-16(fp)
    e318:	1885c83a 	sub	r2,r3,r2
    e31c:	e0bffe15 	stw	r2,-8(fp)
    e320:	00000406 	br	e334 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e324:	00c20004 	movi	r3,2048
    e328:	e0bffc17 	ldw	r2,-16(fp)
    e32c:	1885c83a 	sub	r2,r3,r2
    e330:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    e334:	e0bffe17 	ldw	r2,-8(fp)
    e338:	10001e26 	beq	r2,zero,e3b4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e33c:	e0fff617 	ldw	r3,-40(fp)
    e340:	e0bffe17 	ldw	r2,-8(fp)
    e344:	1880022e 	bgeu	r3,r2,e350 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e348:	e0bff617 	ldw	r2,-40(fp)
    e34c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e350:	e0bff817 	ldw	r2,-32(fp)
    e354:	10c00e04 	addi	r3,r2,56
    e358:	e0bffc17 	ldw	r2,-16(fp)
    e35c:	1885883a 	add	r2,r3,r2
    e360:	e1bffe17 	ldw	r6,-8(fp)
    e364:	100b883a 	mov	r5,r2
    e368:	e13fff17 	ldw	r4,-4(fp)
    e36c:	00058640 	call	5864 <memcpy>
      ptr   += n;
    e370:	e0ffff17 	ldw	r3,-4(fp)
    e374:	e0bffe17 	ldw	r2,-8(fp)
    e378:	1885883a 	add	r2,r3,r2
    e37c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    e380:	e0fff617 	ldw	r3,-40(fp)
    e384:	e0bffe17 	ldw	r2,-8(fp)
    e388:	1885c83a 	sub	r2,r3,r2
    e38c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e390:	e0fffc17 	ldw	r3,-16(fp)
    e394:	e0bffe17 	ldw	r2,-8(fp)
    e398:	1885883a 	add	r2,r3,r2
    e39c:	10c1ffcc 	andi	r3,r2,2047
    e3a0:	e0bff817 	ldw	r2,-32(fp)
    e3a4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e3a8:	e0bff617 	ldw	r2,-40(fp)
    e3ac:	00bfcf16 	blt	zero,r2,e2ec <altera_avalon_jtag_uart_read+0x2c>
    e3b0:	00000106 	br	e3b8 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
    e3b4:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    e3b8:	e0ffff17 	ldw	r3,-4(fp)
    e3bc:	e0bff717 	ldw	r2,-36(fp)
    e3c0:	1880141e 	bne	r3,r2,e414 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e3c4:	e0bff517 	ldw	r2,-44(fp)
    e3c8:	1090000c 	andi	r2,r2,16384
    e3cc:	1000131e 	bne	r2,zero,e41c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e3d0:	0001883a 	nop
    e3d4:	e0bff817 	ldw	r2,-32(fp)
    e3d8:	10800a17 	ldw	r2,40(r2)
    e3dc:	e0fffd17 	ldw	r3,-12(fp)
    e3e0:	1880051e 	bne	r3,r2,e3f8 <altera_avalon_jtag_uart_read+0x138>
    e3e4:	e0bff817 	ldw	r2,-32(fp)
    e3e8:	10c00917 	ldw	r3,36(r2)
    e3ec:	e0bff817 	ldw	r2,-32(fp)
    e3f0:	10800117 	ldw	r2,4(r2)
    e3f4:	18bff736 	bltu	r3,r2,e3d4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e3f8:	e0bff817 	ldw	r2,-32(fp)
    e3fc:	10800a17 	ldw	r2,40(r2)
    e400:	e0fffd17 	ldw	r3,-12(fp)
    e404:	18800726 	beq	r3,r2,e424 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
    e408:	e0bff617 	ldw	r2,-40(fp)
    e40c:	00bfb716 	blt	zero,r2,e2ec <altera_avalon_jtag_uart_read+0x2c>
    e410:	00000506 	br	e428 <altera_avalon_jtag_uart_read+0x168>
      break;
    e414:	0001883a 	nop
    e418:	00000306 	br	e428 <altera_avalon_jtag_uart_read+0x168>
      break;
    e41c:	0001883a 	nop
    e420:	00000106 	br	e428 <altera_avalon_jtag_uart_read+0x168>
      break;
    e424:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e428:	e0ffff17 	ldw	r3,-4(fp)
    e42c:	e0bff717 	ldw	r2,-36(fp)
    e430:	18801926 	beq	r3,r2,e498 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
    e434:	0005303a 	rdctl	r2,status
    e438:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e43c:	e0fff917 	ldw	r3,-28(fp)
    e440:	00bfff84 	movi	r2,-2
    e444:	1884703a 	and	r2,r3,r2
    e448:	1001703a 	wrctl	status,r2
  return context;
    e44c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e450:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e454:	e0bff817 	ldw	r2,-32(fp)
    e458:	10800817 	ldw	r2,32(r2)
    e45c:	10c00054 	ori	r3,r2,1
    e460:	e0bff817 	ldw	r2,-32(fp)
    e464:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e468:	e0bff817 	ldw	r2,-32(fp)
    e46c:	10800017 	ldw	r2,0(r2)
    e470:	10800104 	addi	r2,r2,4
    e474:	1007883a 	mov	r3,r2
    e478:	e0bff817 	ldw	r2,-32(fp)
    e47c:	10800817 	ldw	r2,32(r2)
    e480:	18800035 	stwio	r2,0(r3)
    e484:	e0bffb17 	ldw	r2,-20(fp)
    e488:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    e48c:	e0bffa17 	ldw	r2,-24(fp)
    e490:	1001703a 	wrctl	status,r2
}
    e494:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e498:	e0ffff17 	ldw	r3,-4(fp)
    e49c:	e0bff717 	ldw	r2,-36(fp)
    e4a0:	18800426 	beq	r3,r2,e4b4 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
    e4a4:	e0ffff17 	ldw	r3,-4(fp)
    e4a8:	e0bff717 	ldw	r2,-36(fp)
    e4ac:	1885c83a 	sub	r2,r3,r2
    e4b0:	00000606 	br	e4cc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    e4b4:	e0bff517 	ldw	r2,-44(fp)
    e4b8:	1090000c 	andi	r2,r2,16384
    e4bc:	10000226 	beq	r2,zero,e4c8 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
    e4c0:	00bffd44 	movi	r2,-11
    e4c4:	00000106 	br	e4cc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    e4c8:	00bffec4 	movi	r2,-5
}
    e4cc:	e037883a 	mov	sp,fp
    e4d0:	dfc00117 	ldw	ra,4(sp)
    e4d4:	df000017 	ldw	fp,0(sp)
    e4d8:	dec00204 	addi	sp,sp,8
    e4dc:	f800283a 	ret

0000e4e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e4e0:	defff304 	addi	sp,sp,-52
    e4e4:	dfc00c15 	stw	ra,48(sp)
    e4e8:	df000b15 	stw	fp,44(sp)
    e4ec:	df000b04 	addi	fp,sp,44
    e4f0:	e13ff815 	stw	r4,-32(fp)
    e4f4:	e17ff715 	stw	r5,-36(fp)
    e4f8:	e1bff615 	stw	r6,-40(fp)
    e4fc:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e500:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e504:	e0bff717 	ldw	r2,-36(fp)
    e508:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e50c:	00003706 	br	e5ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e510:	e0bff817 	ldw	r2,-32(fp)
    e514:	10800c17 	ldw	r2,48(r2)
    e518:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    e51c:	e0bff817 	ldw	r2,-32(fp)
    e520:	10800d17 	ldw	r2,52(r2)
    e524:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    e528:	e0fffc17 	ldw	r3,-16(fp)
    e52c:	e0bfff17 	ldw	r2,-4(fp)
    e530:	1880062e 	bgeu	r3,r2,e54c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e534:	e0ffff17 	ldw	r3,-4(fp)
    e538:	e0bffc17 	ldw	r2,-16(fp)
    e53c:	1885c83a 	sub	r2,r3,r2
    e540:	10bfffc4 	addi	r2,r2,-1
    e544:	e0bffe15 	stw	r2,-8(fp)
    e548:	00000b06 	br	e578 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e54c:	e0bfff17 	ldw	r2,-4(fp)
    e550:	10000526 	beq	r2,zero,e568 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e554:	00c20004 	movi	r3,2048
    e558:	e0bffc17 	ldw	r2,-16(fp)
    e55c:	1885c83a 	sub	r2,r3,r2
    e560:	e0bffe15 	stw	r2,-8(fp)
    e564:	00000406 	br	e578 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e568:	00c1ffc4 	movi	r3,2047
    e56c:	e0bffc17 	ldw	r2,-16(fp)
    e570:	1885c83a 	sub	r2,r3,r2
    e574:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    e578:	e0bffe17 	ldw	r2,-8(fp)
    e57c:	10001e26 	beq	r2,zero,e5f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e580:	e0fff617 	ldw	r3,-40(fp)
    e584:	e0bffe17 	ldw	r2,-8(fp)
    e588:	1880022e 	bgeu	r3,r2,e594 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e58c:	e0bff617 	ldw	r2,-40(fp)
    e590:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e594:	e0bff817 	ldw	r2,-32(fp)
    e598:	10c20e04 	addi	r3,r2,2104
    e59c:	e0bffc17 	ldw	r2,-16(fp)
    e5a0:	1885883a 	add	r2,r3,r2
    e5a4:	e1bffe17 	ldw	r6,-8(fp)
    e5a8:	e17ff717 	ldw	r5,-36(fp)
    e5ac:	1009883a 	mov	r4,r2
    e5b0:	00058640 	call	5864 <memcpy>
      ptr   += n;
    e5b4:	e0fff717 	ldw	r3,-36(fp)
    e5b8:	e0bffe17 	ldw	r2,-8(fp)
    e5bc:	1885883a 	add	r2,r3,r2
    e5c0:	e0bff715 	stw	r2,-36(fp)
      count -= n;
    e5c4:	e0fff617 	ldw	r3,-40(fp)
    e5c8:	e0bffe17 	ldw	r2,-8(fp)
    e5cc:	1885c83a 	sub	r2,r3,r2
    e5d0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e5d4:	e0fffc17 	ldw	r3,-16(fp)
    e5d8:	e0bffe17 	ldw	r2,-8(fp)
    e5dc:	1885883a 	add	r2,r3,r2
    e5e0:	10c1ffcc 	andi	r3,r2,2047
    e5e4:	e0bff817 	ldw	r2,-32(fp)
    e5e8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
    e5ec:	e0bff617 	ldw	r2,-40(fp)
    e5f0:	00bfc716 	blt	zero,r2,e510 <altera_avalon_jtag_uart_write+0x30>
    e5f4:	00000106 	br	e5fc <altera_avalon_jtag_uart_write+0x11c>
        break;
    e5f8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    e5fc:	0005303a 	rdctl	r2,status
    e600:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e604:	e0fff917 	ldw	r3,-28(fp)
    e608:	00bfff84 	movi	r2,-2
    e60c:	1884703a 	and	r2,r3,r2
    e610:	1001703a 	wrctl	status,r2
  return context;
    e614:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e618:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e61c:	e0bff817 	ldw	r2,-32(fp)
    e620:	10800817 	ldw	r2,32(r2)
    e624:	10c00094 	ori	r3,r2,2
    e628:	e0bff817 	ldw	r2,-32(fp)
    e62c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e630:	e0bff817 	ldw	r2,-32(fp)
    e634:	10800017 	ldw	r2,0(r2)
    e638:	10800104 	addi	r2,r2,4
    e63c:	1007883a 	mov	r3,r2
    e640:	e0bff817 	ldw	r2,-32(fp)
    e644:	10800817 	ldw	r2,32(r2)
    e648:	18800035 	stwio	r2,0(r3)
    e64c:	e0bffb17 	ldw	r2,-20(fp)
    e650:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    e654:	e0bffa17 	ldw	r2,-24(fp)
    e658:	1001703a 	wrctl	status,r2
}
    e65c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e660:	e0bff617 	ldw	r2,-40(fp)
    e664:	0080100e 	bge	zero,r2,e6a8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    e668:	e0bff517 	ldw	r2,-44(fp)
    e66c:	1090000c 	andi	r2,r2,16384
    e670:	1000101e 	bne	r2,zero,e6b4 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e674:	0001883a 	nop
    e678:	e0bff817 	ldw	r2,-32(fp)
    e67c:	10800d17 	ldw	r2,52(r2)
    e680:	e0ffff17 	ldw	r3,-4(fp)
    e684:	1880051e 	bne	r3,r2,e69c <altera_avalon_jtag_uart_write+0x1bc>
    e688:	e0bff817 	ldw	r2,-32(fp)
    e68c:	10c00917 	ldw	r3,36(r2)
    e690:	e0bff817 	ldw	r2,-32(fp)
    e694:	10800117 	ldw	r2,4(r2)
    e698:	18bff736 	bltu	r3,r2,e678 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e69c:	e0bff817 	ldw	r2,-32(fp)
    e6a0:	10800917 	ldw	r2,36(r2)
    e6a4:	1000051e 	bne	r2,zero,e6bc <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
    e6a8:	e0bff617 	ldw	r2,-40(fp)
    e6ac:	00bfcf16 	blt	zero,r2,e5ec <altera_avalon_jtag_uart_write+0x10c>
    e6b0:	00000306 	br	e6c0 <altera_avalon_jtag_uart_write+0x1e0>
        break;
    e6b4:	0001883a 	nop
    e6b8:	00000106 	br	e6c0 <altera_avalon_jtag_uart_write+0x1e0>
         break;
    e6bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e6c0:	e0fff717 	ldw	r3,-36(fp)
    e6c4:	e0bffd17 	ldw	r2,-12(fp)
    e6c8:	18800426 	beq	r3,r2,e6dc <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
    e6cc:	e0fff717 	ldw	r3,-36(fp)
    e6d0:	e0bffd17 	ldw	r2,-12(fp)
    e6d4:	1885c83a 	sub	r2,r3,r2
    e6d8:	00000606 	br	e6f4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
    e6dc:	e0bff517 	ldw	r2,-44(fp)
    e6e0:	1090000c 	andi	r2,r2,16384
    e6e4:	10000226 	beq	r2,zero,e6f0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
    e6e8:	00bffd44 	movi	r2,-11
    e6ec:	00000106 	br	e6f4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e6f0:	00bffec4 	movi	r2,-5
}
    e6f4:	e037883a 	mov	sp,fp
    e6f8:	dfc00117 	ldw	ra,4(sp)
    e6fc:	df000017 	ldw	fp,0(sp)
    e700:	dec00204 	addi	sp,sp,8
    e704:	f800283a 	ret

0000e708 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e708:	defff904 	addi	sp,sp,-28
    e70c:	dfc00615 	stw	ra,24(sp)
    e710:	df000515 	stw	fp,20(sp)
    e714:	df000504 	addi	fp,sp,20
    e718:	e13ffc15 	stw	r4,-16(fp)
    e71c:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e720:	0007883a 	mov	r3,zero
    e724:	e0bffc17 	ldw	r2,-16(fp)
    e728:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e72c:	e0bffc17 	ldw	r2,-16(fp)
    e730:	10800104 	addi	r2,r2,4
    e734:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    e738:	0005303a 	rdctl	r2,status
    e73c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e740:	e0fffd17 	ldw	r3,-12(fp)
    e744:	00bfff84 	movi	r2,-2
    e748:	1884703a 	and	r2,r3,r2
    e74c:	1001703a 	wrctl	status,r2
  return context;
    e750:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e754:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    e758:	000fa180 	call	fa18 <alt_tick>
    e75c:	e0bfff17 	ldw	r2,-4(fp)
    e760:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    e764:	e0bffe17 	ldw	r2,-8(fp)
    e768:	1001703a 	wrctl	status,r2
}
    e76c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    e770:	0001883a 	nop
    e774:	e037883a 	mov	sp,fp
    e778:	dfc00117 	ldw	ra,4(sp)
    e77c:	df000017 	ldw	fp,0(sp)
    e780:	dec00204 	addi	sp,sp,8
    e784:	f800283a 	ret

0000e788 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e788:	defff904 	addi	sp,sp,-28
    e78c:	dfc00615 	stw	ra,24(sp)
    e790:	df000515 	stw	fp,20(sp)
    e794:	df000504 	addi	fp,sp,20
    e798:	e13ffe15 	stw	r4,-8(fp)
    e79c:	e17ffd15 	stw	r5,-12(fp)
    e7a0:	e1bffc15 	stw	r6,-16(fp)
    e7a4:	e1fffb15 	stw	r7,-20(fp)
    e7a8:	e0bffb17 	ldw	r2,-20(fp)
    e7ac:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e7b0:	d0a73b17 	ldw	r2,-25364(gp)
    e7b4:	1000031e 	bne	r2,zero,e7c4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    e7b8:	e0bfff17 	ldw	r2,-4(fp)
    e7bc:	d0a73b15 	stw	r2,-25364(gp)
    return 0;
    e7c0:	00000106 	br	e7c8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    e7c4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e7c8:	e0bffe17 	ldw	r2,-8(fp)
    e7cc:	10800104 	addi	r2,r2,4
    e7d0:	00c001c4 	movi	r3,7
    e7d4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e7d8:	01800074 	movhi	r6,1
    e7dc:	31b9c204 	addi	r6,r6,-6392
    e7e0:	e17ffe17 	ldw	r5,-8(fp)
    e7e4:	e13ffc17 	ldw	r4,-16(fp)
    e7e8:	000f5ac0 	call	f5ac <alt_irq_register>
#endif  
}
    e7ec:	0001883a 	nop
    e7f0:	e037883a 	mov	sp,fp
    e7f4:	dfc00117 	ldw	ra,4(sp)
    e7f8:	df000017 	ldw	fp,0(sp)
    e7fc:	dec00204 	addi	sp,sp,8
    e800:	f800283a 	ret

0000e804 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    e804:	defffc04 	addi	sp,sp,-16
    e808:	df000315 	stw	fp,12(sp)
    e80c:	df000304 	addi	fp,sp,12
    e810:	e13ffe15 	stw	r4,-8(fp)
    e814:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    e818:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
    e81c:	e0bffd17 	ldw	r2,-12(fp)
    e820:	1000061e 	bne	r2,zero,e83c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    e824:	e0bffe17 	ldw	r2,-8(fp)
    e828:	1007883a 	mov	r3,r2
    e82c:	e0bfffc3 	ldbu	r2,-1(fp)
    e830:	10c4b03a 	or	r2,r2,r3
    e834:	e0bfffc5 	stb	r2,-1(fp)
    e838:	00000806 	br	e85c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    e83c:	e0bffe17 	ldw	r2,-8(fp)
    e840:	1007883a 	mov	r3,r2
    e844:	e0bfffc3 	ldbu	r2,-1(fp)
    e848:	10c4b03a 	or	r2,r2,r3
    e84c:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
    e850:	e0bfffc3 	ldbu	r2,-1(fp)
    e854:	10801014 	ori	r2,r2,64
    e858:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    e85c:	e0ffffc3 	ldbu	r3,-1(fp)
    e860:	00bfe004 	movi	r2,-128
    e864:	1884b03a 	or	r2,r3,r2
}
    e868:	e037883a 	mov	sp,fp
    e86c:	df000017 	ldw	fp,0(sp)
    e870:	dec00104 	addi	sp,sp,4
    e874:	f800283a 	ret

0000e878 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    e878:	defffd04 	addi	sp,sp,-12
    e87c:	df000215 	stw	fp,8(sp)
    e880:	df000204 	addi	fp,sp,8
    e884:	e13fff15 	stw	r4,-4(fp)
    e888:	2805883a 	mov	r2,r5
    e88c:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    e890:	e0bfff17 	ldw	r2,-4(fp)
    e894:	10800a17 	ldw	r2,40(r2)
    e898:	1007883a 	mov	r3,r2
    e89c:	e0bffe03 	ldbu	r2,-8(fp)
    e8a0:	18800025 	stbio	r2,0(r3)
}
    e8a4:	0001883a 	nop
    e8a8:	e037883a 	mov	sp,fp
    e8ac:	df000017 	ldw	fp,0(sp)
    e8b0:	dec00104 	addi	sp,sp,4
    e8b4:	f800283a 	ret

0000e8b8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    e8b8:	defffe04 	addi	sp,sp,-8
    e8bc:	df000115 	stw	fp,4(sp)
    e8c0:	df000104 	addi	fp,sp,4
    e8c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    e8c8:	e0bfff17 	ldw	r2,-4(fp)
    e8cc:	10800a17 	ldw	r2,40(r2)
    e8d0:	1007883a 	mov	r3,r2
    e8d4:	00800044 	movi	r2,1
    e8d8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    e8dc:	0001883a 	nop
    e8e0:	e037883a 	mov	sp,fp
    e8e4:	df000017 	ldw	fp,0(sp)
    e8e8:	dec00104 	addi	sp,sp,4
    e8ec:	f800283a 	ret

0000e8f0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    e8f0:	defffc04 	addi	sp,sp,-16
    e8f4:	dfc00315 	stw	ra,12(sp)
    e8f8:	df000215 	stw	fp,8(sp)
    e8fc:	df000204 	addi	fp,sp,8
    e900:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    e904:	d1600604 	addi	r5,gp,-32744
    e908:	e13ffe17 	ldw	r4,-8(fp)
    e90c:	000f3bc0 	call	f3bc <alt_find_dev>
    e910:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    e914:	e0bfff17 	ldw	r2,-4(fp)
}
    e918:	e037883a 	mov	sp,fp
    e91c:	dfc00117 	ldw	ra,4(sp)
    e920:	df000017 	ldw	fp,0(sp)
    e924:	dec00204 	addi	sp,sp,8
    e928:	f800283a 	ret

0000e92c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    e92c:	defffb04 	addi	sp,sp,-20
    e930:	df000415 	stw	fp,16(sp)
    e934:	df000404 	addi	fp,sp,16
    e938:	e13ffe15 	stw	r4,-8(fp)
    e93c:	e17ffd15 	stw	r5,-12(fp)
    e940:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    e944:	e03fff15 	stw	zero,-4(fp)
    e948:	00000f06 	br	e988 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    e94c:	e0bffe17 	ldw	r2,-8(fp)
    e950:	10800a17 	ldw	r2,40(r2)
    e954:	10800044 	addi	r2,r2,1
    e958:	1009883a 	mov	r4,r2
    e95c:	e0fffd17 	ldw	r3,-12(fp)
    e960:	e0bfff17 	ldw	r2,-4(fp)
    e964:	1885883a 	add	r2,r3,r2
    e968:	10800003 	ldbu	r2,0(r2)
    e96c:	10803fcc 	andi	r2,r2,255
    e970:	1080201c 	xori	r2,r2,128
    e974:	10bfe004 	addi	r2,r2,-128
    e978:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
    e97c:	e0bfff17 	ldw	r2,-4(fp)
    e980:	10800044 	addi	r2,r2,1
    e984:	e0bfff15 	stw	r2,-4(fp)
    e988:	e0ffff17 	ldw	r3,-4(fp)
    e98c:	e0bffc17 	ldw	r2,-16(fp)
    e990:	18bfee36 	bltu	r3,r2,e94c <alt_up_character_lcd_write+0x20>
	}
}
    e994:	0001883a 	nop
    e998:	0001883a 	nop
    e99c:	e037883a 	mov	sp,fp
    e9a0:	df000017 	ldw	fp,0(sp)
    e9a4:	dec00104 	addi	sp,sp,4
    e9a8:	f800283a 	ret

0000e9ac <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    e9ac:	defffd04 	addi	sp,sp,-12
    e9b0:	df000215 	stw	fp,8(sp)
    e9b4:	df000204 	addi	fp,sp,8
    e9b8:	e13fff15 	stw	r4,-4(fp)
    e9bc:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
    e9c0:	00000d06 	br	e9f8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    e9c4:	e0bfff17 	ldw	r2,-4(fp)
    e9c8:	10800a17 	ldw	r2,40(r2)
    e9cc:	10800044 	addi	r2,r2,1
    e9d0:	1007883a 	mov	r3,r2
    e9d4:	e0bffe17 	ldw	r2,-8(fp)
    e9d8:	10800003 	ldbu	r2,0(r2)
    e9dc:	10803fcc 	andi	r2,r2,255
    e9e0:	1080201c 	xori	r2,r2,128
    e9e4:	10bfe004 	addi	r2,r2,-128
    e9e8:	18800025 	stbio	r2,0(r3)
		++ptr;
    e9ec:	e0bffe17 	ldw	r2,-8(fp)
    e9f0:	10800044 	addi	r2,r2,1
    e9f4:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
    e9f8:	e0bffe17 	ldw	r2,-8(fp)
    e9fc:	10800003 	ldbu	r2,0(r2)
    ea00:	10803fcc 	andi	r2,r2,255
    ea04:	1080201c 	xori	r2,r2,128
    ea08:	10bfe004 	addi	r2,r2,-128
    ea0c:	103fed1e 	bne	r2,zero,e9c4 <alt_up_character_lcd_string+0x18>
	}
}
    ea10:	0001883a 	nop
    ea14:	0001883a 	nop
    ea18:	e037883a 	mov	sp,fp
    ea1c:	df000017 	ldw	fp,0(sp)
    ea20:	dec00104 	addi	sp,sp,4
    ea24:	f800283a 	ret

0000ea28 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    ea28:	defffb04 	addi	sp,sp,-20
    ea2c:	dfc00415 	stw	ra,16(sp)
    ea30:	df000315 	stw	fp,12(sp)
    ea34:	df000304 	addi	fp,sp,12
    ea38:	e13fff15 	stw	r4,-4(fp)
    ea3c:	e17ffe15 	stw	r5,-8(fp)
    ea40:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    ea44:	e0bfff17 	ldw	r2,-4(fp)
    ea48:	10800017 	ldw	r2,0(r2)
    ea4c:	e0fffd17 	ldw	r3,-12(fp)
    ea50:	180d883a 	mov	r6,r3
    ea54:	e17ffe17 	ldw	r5,-8(fp)
    ea58:	1009883a 	mov	r4,r2
    ea5c:	000e92c0 	call	e92c <alt_up_character_lcd_write>
	return 0;
    ea60:	0005883a 	mov	r2,zero
}
    ea64:	e037883a 	mov	sp,fp
    ea68:	dfc00117 	ldw	ra,4(sp)
    ea6c:	df000017 	ldw	fp,0(sp)
    ea70:	dec00204 	addi	sp,sp,8
    ea74:	f800283a 	ret

0000ea78 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    ea78:	defffa04 	addi	sp,sp,-24
    ea7c:	dfc00515 	stw	ra,20(sp)
    ea80:	df000415 	stw	fp,16(sp)
    ea84:	df000404 	addi	fp,sp,16
    ea88:	e13ffe15 	stw	r4,-8(fp)
    ea8c:	e17ffd15 	stw	r5,-12(fp)
    ea90:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    ea94:	e0bffd17 	ldw	r2,-12(fp)
    ea98:	10800a28 	cmpgeui	r2,r2,40
    ea9c:	1000031e 	bne	r2,zero,eaac <alt_up_character_lcd_set_cursor_pos+0x34>
    eaa0:	e0bffc17 	ldw	r2,-16(fp)
    eaa4:	108000b0 	cmpltui	r2,r2,2
    eaa8:	1000021e 	bne	r2,zero,eab4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    eaac:	00bfffc4 	movi	r2,-1
    eab0:	00000906 	br	ead8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    eab4:	e17ffc17 	ldw	r5,-16(fp)
    eab8:	e13ffd17 	ldw	r4,-12(fp)
    eabc:	000e8040 	call	e804 <get_DDRAM_addr>
    eac0:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    eac4:	e0bfffc3 	ldbu	r2,-1(fp)
    eac8:	100b883a 	mov	r5,r2
    eacc:	e13ffe17 	ldw	r4,-8(fp)
    ead0:	000e8780 	call	e878 <alt_up_character_lcd_send_cmd>
	return 0;
    ead4:	0005883a 	mov	r2,zero
}
    ead8:	e037883a 	mov	sp,fp
    eadc:	dfc00117 	ldw	ra,4(sp)
    eae0:	df000017 	ldw	fp,0(sp)
    eae4:	dec00204 	addi	sp,sp,8
    eae8:	f800283a 	ret

0000eaec <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    eaec:	defffb04 	addi	sp,sp,-20
    eaf0:	dfc00415 	stw	ra,16(sp)
    eaf4:	df000315 	stw	fp,12(sp)
    eaf8:	df000304 	addi	fp,sp,12
    eafc:	e13ffe15 	stw	r4,-8(fp)
    eb00:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    eb04:	e0bffd17 	ldw	r2,-12(fp)
    eb08:	10001526 	beq	r2,zero,eb60 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    eb0c:	e0bffd17 	ldw	r2,-12(fp)
    eb10:	0080020e 	bge	zero,r2,eb1c <alt_up_character_lcd_shift_cursor+0x30>
    eb14:	00800504 	movi	r2,20
    eb18:	00000106 	br	eb20 <alt_up_character_lcd_shift_cursor+0x34>
    eb1c:	00800404 	movi	r2,16
    eb20:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    eb24:	e0bffd17 	ldw	r2,-12(fp)
    eb28:	1000010e 	bge	r2,zero,eb30 <alt_up_character_lcd_shift_cursor+0x44>
    eb2c:	0085c83a 	sub	r2,zero,r2
    eb30:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    eb34:	00000406 	br	eb48 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    eb38:	e0bfff83 	ldbu	r2,-2(fp)
    eb3c:	100b883a 	mov	r5,r2
    eb40:	e13ffe17 	ldw	r4,-8(fp)
    eb44:	000e8780 	call	e878 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    eb48:	e0bfffc3 	ldbu	r2,-1(fp)
    eb4c:	10ffffc4 	addi	r3,r2,-1
    eb50:	e0ffffc5 	stb	r3,-1(fp)
    eb54:	10803fcc 	andi	r2,r2,255
    eb58:	103ff71e 	bne	r2,zero,eb38 <alt_up_character_lcd_shift_cursor+0x4c>
    eb5c:	00000106 	br	eb64 <alt_up_character_lcd_shift_cursor+0x78>
		return;
    eb60:	0001883a 	nop
}
    eb64:	e037883a 	mov	sp,fp
    eb68:	dfc00117 	ldw	ra,4(sp)
    eb6c:	df000017 	ldw	fp,0(sp)
    eb70:	dec00204 	addi	sp,sp,8
    eb74:	f800283a 	ret

0000eb78 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    eb78:	defffb04 	addi	sp,sp,-20
    eb7c:	dfc00415 	stw	ra,16(sp)
    eb80:	df000315 	stw	fp,12(sp)
    eb84:	df000304 	addi	fp,sp,12
    eb88:	e13ffe15 	stw	r4,-8(fp)
    eb8c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    eb90:	e0bffd17 	ldw	r2,-12(fp)
    eb94:	10001526 	beq	r2,zero,ebec <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    eb98:	e0bffd17 	ldw	r2,-12(fp)
    eb9c:	0080020e 	bge	zero,r2,eba8 <alt_up_character_lcd_shift_display+0x30>
    eba0:	00800704 	movi	r2,28
    eba4:	00000106 	br	ebac <alt_up_character_lcd_shift_display+0x34>
    eba8:	00800604 	movi	r2,24
    ebac:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    ebb0:	e0bffd17 	ldw	r2,-12(fp)
    ebb4:	1000010e 	bge	r2,zero,ebbc <alt_up_character_lcd_shift_display+0x44>
    ebb8:	0085c83a 	sub	r2,zero,r2
    ebbc:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ebc0:	00000406 	br	ebd4 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ebc4:	e0bfff83 	ldbu	r2,-2(fp)
    ebc8:	100b883a 	mov	r5,r2
    ebcc:	e13ffe17 	ldw	r4,-8(fp)
    ebd0:	000e8780 	call	e878 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    ebd4:	e0bfffc3 	ldbu	r2,-1(fp)
    ebd8:	10ffffc4 	addi	r3,r2,-1
    ebdc:	e0ffffc5 	stb	r3,-1(fp)
    ebe0:	10803fcc 	andi	r2,r2,255
    ebe4:	103ff71e 	bne	r2,zero,ebc4 <alt_up_character_lcd_shift_display+0x4c>
    ebe8:	00000106 	br	ebf0 <alt_up_character_lcd_shift_display+0x78>
		return;
    ebec:	0001883a 	nop
}
    ebf0:	e037883a 	mov	sp,fp
    ebf4:	dfc00117 	ldw	ra,4(sp)
    ebf8:	df000017 	ldw	fp,0(sp)
    ebfc:	dec00204 	addi	sp,sp,8
    ec00:	f800283a 	ret

0000ec04 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    ec04:	defffa04 	addi	sp,sp,-24
    ec08:	dfc00515 	stw	ra,20(sp)
    ec0c:	df000415 	stw	fp,16(sp)
    ec10:	df000404 	addi	fp,sp,16
    ec14:	e13ffe15 	stw	r4,-8(fp)
    ec18:	e17ffd15 	stw	r5,-12(fp)
    ec1c:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    ec20:	e0bffd17 	ldw	r2,-12(fp)
    ec24:	10800a28 	cmpgeui	r2,r2,40
    ec28:	1000031e 	bne	r2,zero,ec38 <alt_up_character_lcd_erase_pos+0x34>
    ec2c:	e0bffc17 	ldw	r2,-16(fp)
    ec30:	108000b0 	cmpltui	r2,r2,2
    ec34:	1000021e 	bne	r2,zero,ec40 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    ec38:	00bfffc4 	movi	r2,-1
    ec3c:	00000f06 	br	ec7c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    ec40:	e17ffc17 	ldw	r5,-16(fp)
    ec44:	e13ffd17 	ldw	r4,-12(fp)
    ec48:	000e8040 	call	e804 <get_DDRAM_addr>
    ec4c:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    ec50:	e0bfffc3 	ldbu	r2,-1(fp)
    ec54:	100b883a 	mov	r5,r2
    ec58:	e13ffe17 	ldw	r4,-8(fp)
    ec5c:	000e8780 	call	e878 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    ec60:	e0bffe17 	ldw	r2,-8(fp)
    ec64:	10800a17 	ldw	r2,40(r2)
    ec68:	10800044 	addi	r2,r2,1
    ec6c:	1007883a 	mov	r3,r2
    ec70:	00800084 	movi	r2,2
    ec74:	18800025 	stbio	r2,0(r3)
	return 0;
    ec78:	0005883a 	mov	r2,zero
}
    ec7c:	e037883a 	mov	sp,fp
    ec80:	dfc00117 	ldw	ra,4(sp)
    ec84:	df000017 	ldw	fp,0(sp)
    ec88:	dec00204 	addi	sp,sp,8
    ec8c:	f800283a 	ret

0000ec90 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    ec90:	defffd04 	addi	sp,sp,-12
    ec94:	dfc00215 	stw	ra,8(sp)
    ec98:	df000115 	stw	fp,4(sp)
    ec9c:	df000104 	addi	fp,sp,4
    eca0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    eca4:	01400304 	movi	r5,12
    eca8:	e13fff17 	ldw	r4,-4(fp)
    ecac:	000e8780 	call	e878 <alt_up_character_lcd_send_cmd>
}
    ecb0:	0001883a 	nop
    ecb4:	e037883a 	mov	sp,fp
    ecb8:	dfc00117 	ldw	ra,4(sp)
    ecbc:	df000017 	ldw	fp,0(sp)
    ecc0:	dec00204 	addi	sp,sp,8
    ecc4:	f800283a 	ret

0000ecc8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    ecc8:	defffd04 	addi	sp,sp,-12
    eccc:	dfc00215 	stw	ra,8(sp)
    ecd0:	df000115 	stw	fp,4(sp)
    ecd4:	df000104 	addi	fp,sp,4
    ecd8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    ecdc:	014003c4 	movi	r5,15
    ece0:	e13fff17 	ldw	r4,-4(fp)
    ece4:	000e8780 	call	e878 <alt_up_character_lcd_send_cmd>
}
    ece8:	0001883a 	nop
    ecec:	e037883a 	mov	sp,fp
    ecf0:	dfc00117 	ldw	ra,4(sp)
    ecf4:	df000017 	ldw	fp,0(sp)
    ecf8:	dec00204 	addi	sp,sp,8
    ecfc:	f800283a 	ret

0000ed00 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ed00:	defffd04 	addi	sp,sp,-12
    ed04:	df000215 	stw	fp,8(sp)
    ed08:	df000204 	addi	fp,sp,8
    ed0c:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ed10:	e0bffe17 	ldw	r2,-8(fp)
    ed14:	10800a17 	ldw	r2,40(r2)
    ed18:	10800104 	addi	r2,r2,4
    ed1c:	10800037 	ldwio	r2,0(r2)
    ed20:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    ed24:	e0bfff17 	ldw	r2,-4(fp)
    ed28:	10800054 	ori	r2,r2,1
    ed2c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ed30:	e0bffe17 	ldw	r2,-8(fp)
    ed34:	10800a17 	ldw	r2,40(r2)
    ed38:	10800104 	addi	r2,r2,4
    ed3c:	1007883a 	mov	r3,r2
    ed40:	e0bfff17 	ldw	r2,-4(fp)
    ed44:	18800035 	stwio	r2,0(r3)
}
    ed48:	0001883a 	nop
    ed4c:	e037883a 	mov	sp,fp
    ed50:	df000017 	ldw	fp,0(sp)
    ed54:	dec00104 	addi	sp,sp,4
    ed58:	f800283a 	ret

0000ed5c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ed5c:	defffd04 	addi	sp,sp,-12
    ed60:	df000215 	stw	fp,8(sp)
    ed64:	df000204 	addi	fp,sp,8
    ed68:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ed6c:	e0bffe17 	ldw	r2,-8(fp)
    ed70:	10800a17 	ldw	r2,40(r2)
    ed74:	10800104 	addi	r2,r2,4
    ed78:	10800037 	ldwio	r2,0(r2)
    ed7c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    ed80:	e0ffff17 	ldw	r3,-4(fp)
    ed84:	00bfff84 	movi	r2,-2
    ed88:	1884703a 	and	r2,r3,r2
    ed8c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ed90:	e0bffe17 	ldw	r2,-8(fp)
    ed94:	10800a17 	ldw	r2,40(r2)
    ed98:	10800104 	addi	r2,r2,4
    ed9c:	1007883a 	mov	r3,r2
    eda0:	e0bfff17 	ldw	r2,-4(fp)
    eda4:	18800035 	stwio	r2,0(r3)
}
    eda8:	0001883a 	nop
    edac:	e037883a 	mov	sp,fp
    edb0:	df000017 	ldw	fp,0(sp)
    edb4:	dec00104 	addi	sp,sp,4
    edb8:	f800283a 	ret

0000edbc <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    edbc:	defffd04 	addi	sp,sp,-12
    edc0:	df000215 	stw	fp,8(sp)
    edc4:	df000204 	addi	fp,sp,8
    edc8:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
    edcc:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    edd0:	e0bffe17 	ldw	r2,-8(fp)
    edd4:	10800a17 	ldw	r2,40(r2)
    edd8:	10800084 	addi	r2,r2,2
    eddc:	1080002b 	ldhuio	r2,0(r2)
    ede0:	10bfffcc 	andi	r2,r2,65535
    ede4:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    ede8:	e0bfff8b 	ldhu	r2,-2(fp)
}
    edec:	e037883a 	mov	sp,fp
    edf0:	df000017 	ldw	fp,0(sp)
    edf4:	dec00104 	addi	sp,sp,4
    edf8:	f800283a 	ret

0000edfc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    edfc:	defffd04 	addi	sp,sp,-12
    ee00:	df000215 	stw	fp,8(sp)
    ee04:	df000204 	addi	fp,sp,8
    ee08:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ee0c:	e0bffe17 	ldw	r2,-8(fp)
    ee10:	10800a17 	ldw	r2,40(r2)
    ee14:	10800104 	addi	r2,r2,4
    ee18:	10800037 	ldwio	r2,0(r2)
    ee1c:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    ee20:	e0bfff17 	ldw	r2,-4(fp)
    ee24:	1004d43a 	srli	r2,r2,16
}
    ee28:	e037883a 	mov	sp,fp
    ee2c:	df000017 	ldw	fp,0(sp)
    ee30:	dec00104 	addi	sp,sp,4
    ee34:	f800283a 	ret

0000ee38 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    ee38:	defffd04 	addi	sp,sp,-12
    ee3c:	df000215 	stw	fp,8(sp)
    ee40:	df000204 	addi	fp,sp,8
    ee44:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    ee48:	e0bffe17 	ldw	r2,-8(fp)
    ee4c:	1004d27a 	srli	r2,r2,9
    ee50:	1080004c 	andi	r2,r2,1
    ee54:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
    ee58:	e0bfff17 	ldw	r2,-4(fp)
    ee5c:	10000226 	beq	r2,zero,ee68 <alt_up_rs232_check_parity+0x30>
    ee60:	00bfffc4 	movi	r2,-1
    ee64:	00000106 	br	ee6c <alt_up_rs232_check_parity+0x34>
    ee68:	0005883a 	mov	r2,zero
}
    ee6c:	e037883a 	mov	sp,fp
    ee70:	df000017 	ldw	fp,0(sp)
    ee74:	dec00104 	addi	sp,sp,4
    ee78:	f800283a 	ret

0000ee7c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    ee7c:	defffd04 	addi	sp,sp,-12
    ee80:	df000215 	stw	fp,8(sp)
    ee84:	df000204 	addi	fp,sp,8
    ee88:	e13fff15 	stw	r4,-4(fp)
    ee8c:	2805883a 	mov	r2,r5
    ee90:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    ee94:	e0bfff17 	ldw	r2,-4(fp)
    ee98:	10800a17 	ldw	r2,40(r2)
    ee9c:	1007883a 	mov	r3,r2
    eea0:	e0bffe03 	ldbu	r2,-8(fp)
    eea4:	18800035 	stwio	r2,0(r3)
	return 0;
    eea8:	0005883a 	mov	r2,zero
}
    eeac:	e037883a 	mov	sp,fp
    eeb0:	df000017 	ldw	fp,0(sp)
    eeb4:	dec00104 	addi	sp,sp,4
    eeb8:	f800283a 	ret

0000eebc <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    eebc:	defffa04 	addi	sp,sp,-24
    eec0:	dfc00515 	stw	ra,20(sp)
    eec4:	df000415 	stw	fp,16(sp)
    eec8:	df000404 	addi	fp,sp,16
    eecc:	e13ffe15 	stw	r4,-8(fp)
    eed0:	e17ffd15 	stw	r5,-12(fp)
    eed4:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    eed8:	e0bffe17 	ldw	r2,-8(fp)
    eedc:	10800a17 	ldw	r2,40(r2)
    eee0:	10800037 	ldwio	r2,0(r2)
    eee4:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    eee8:	e0bfff17 	ldw	r2,-4(fp)
    eeec:	1007883a 	mov	r3,r2
    eef0:	e0bffd17 	ldw	r2,-12(fp)
    eef4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    eef8:	e13fff17 	ldw	r4,-4(fp)
    eefc:	000ee380 	call	ee38 <alt_up_rs232_check_parity>
    ef00:	1007883a 	mov	r3,r2
    ef04:	e0bffc17 	ldw	r2,-16(fp)
    ef08:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    ef0c:	e0bfff17 	ldw	r2,-4(fp)
    ef10:	1004d3fa 	srli	r2,r2,15
    ef14:	1080004c 	andi	r2,r2,1
    ef18:	10bfffc4 	addi	r2,r2,-1
}
    ef1c:	e037883a 	mov	sp,fp
    ef20:	dfc00117 	ldw	ra,4(sp)
    ef24:	df000017 	ldw	fp,0(sp)
    ef28:	dec00204 	addi	sp,sp,8
    ef2c:	f800283a 	ret

0000ef30 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    ef30:	defff804 	addi	sp,sp,-32
    ef34:	dfc00715 	stw	ra,28(sp)
    ef38:	df000615 	stw	fp,24(sp)
    ef3c:	df000604 	addi	fp,sp,24
    ef40:	e13ffc15 	stw	r4,-16(fp)
    ef44:	e17ffb15 	stw	r5,-20(fp)
    ef48:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    ef4c:	e0bffc17 	ldw	r2,-16(fp)
    ef50:	10800017 	ldw	r2,0(r2)
    ef54:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    ef58:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
    ef5c:	00000c06 	br	ef90 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    ef60:	e0bffb17 	ldw	r2,-20(fp)
    ef64:	10c00044 	addi	r3,r2,1
    ef68:	e0fffb15 	stw	r3,-20(fp)
    ef6c:	e0fffdc4 	addi	r3,fp,-9
    ef70:	180d883a 	mov	r6,r3
    ef74:	100b883a 	mov	r5,r2
    ef78:	e13ffe17 	ldw	r4,-8(fp)
    ef7c:	000eebc0 	call	eebc <alt_up_rs232_read_data>
    ef80:	1000081e 	bne	r2,zero,efa4 <alt_up_rs232_read_fd+0x74>
			count++;
    ef84:	e0bfff17 	ldw	r2,-4(fp)
    ef88:	10800044 	addi	r2,r2,1
    ef8c:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    ef90:	e0bffa17 	ldw	r2,-24(fp)
    ef94:	10ffffc4 	addi	r3,r2,-1
    ef98:	e0fffa15 	stw	r3,-24(fp)
    ef9c:	103ff01e 	bne	r2,zero,ef60 <alt_up_rs232_read_fd+0x30>
    efa0:	00000106 	br	efa8 <alt_up_rs232_read_fd+0x78>
		else
			break;
    efa4:	0001883a 	nop
	}
	return count;
    efa8:	e0bfff17 	ldw	r2,-4(fp)
}
    efac:	e037883a 	mov	sp,fp
    efb0:	dfc00117 	ldw	ra,4(sp)
    efb4:	df000017 	ldw	fp,0(sp)
    efb8:	dec00204 	addi	sp,sp,8
    efbc:	f800283a 	ret

0000efc0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    efc0:	defff904 	addi	sp,sp,-28
    efc4:	dfc00615 	stw	ra,24(sp)
    efc8:	df000515 	stw	fp,20(sp)
    efcc:	df000504 	addi	fp,sp,20
    efd0:	e13ffd15 	stw	r4,-12(fp)
    efd4:	e17ffc15 	stw	r5,-16(fp)
    efd8:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    efdc:	e0bffd17 	ldw	r2,-12(fp)
    efe0:	10800017 	ldw	r2,0(r2)
    efe4:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    efe8:	e03fff15 	stw	zero,-4(fp)
	while(len--)
    efec:	00000d06 	br	f024 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    eff0:	e0bffc17 	ldw	r2,-16(fp)
    eff4:	10800003 	ldbu	r2,0(r2)
    eff8:	10803fcc 	andi	r2,r2,255
    effc:	100b883a 	mov	r5,r2
    f000:	e13ffe17 	ldw	r4,-8(fp)
    f004:	000ee7c0 	call	ee7c <alt_up_rs232_write_data>
    f008:	10000b1e 	bne	r2,zero,f038 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    f00c:	e0bfff17 	ldw	r2,-4(fp)
    f010:	10800044 	addi	r2,r2,1
    f014:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
    f018:	e0bffc17 	ldw	r2,-16(fp)
    f01c:	10800044 	addi	r2,r2,1
    f020:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
    f024:	e0bffb17 	ldw	r2,-20(fp)
    f028:	10ffffc4 	addi	r3,r2,-1
    f02c:	e0fffb15 	stw	r3,-20(fp)
    f030:	103fef1e 	bne	r2,zero,eff0 <alt_up_rs232_write_fd+0x30>
    f034:	00000106 	br	f03c <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
    f038:	0001883a 	nop
	}
	return count;
    f03c:	e0bfff17 	ldw	r2,-4(fp)
}
    f040:	e037883a 	mov	sp,fp
    f044:	dfc00117 	ldw	ra,4(sp)
    f048:	df000017 	ldw	fp,0(sp)
    f04c:	dec00204 	addi	sp,sp,8
    f050:	f800283a 	ret

0000f054 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    f054:	defffc04 	addi	sp,sp,-16
    f058:	dfc00315 	stw	ra,12(sp)
    f05c:	df000215 	stw	fp,8(sp)
    f060:	df000204 	addi	fp,sp,8
    f064:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    f068:	d1600604 	addi	r5,gp,-32744
    f06c:	e13ffe17 	ldw	r4,-8(fp)
    f070:	000f3bc0 	call	f3bc <alt_find_dev>
    f074:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    f078:	e0bfff17 	ldw	r2,-4(fp)
}
    f07c:	e037883a 	mov	sp,fp
    f080:	dfc00117 	ldw	ra,4(sp)
    f084:	df000017 	ldw	fp,0(sp)
    f088:	dec00204 	addi	sp,sp,8
    f08c:	f800283a 	ret

0000f090 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    f090:	defff404 	addi	sp,sp,-48
    f094:	df000b15 	stw	fp,44(sp)
    f098:	df000b04 	addi	fp,sp,44
    f09c:	e13ff815 	stw	r4,-32(fp)
    f0a0:	e17ff715 	stw	r5,-36(fp)
    f0a4:	e1bff615 	stw	r6,-40(fp)
    f0a8:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    f0ac:	e03ffe15 	stw	zero,-8(fp)
    f0b0:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
    f0b4:	d0a73b17 	ldw	r2,-25364(gp)
  
  if (alt_ticks_per_second ())
    f0b8:	10004826 	beq	r2,zero,f1dc <alt_alarm_start+0x14c>
  {
    if (alarm)
    f0bc:	e0bff817 	ldw	r2,-32(fp)
    f0c0:	10004426 	beq	r2,zero,f1d4 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
    f0c4:	e0bff817 	ldw	r2,-32(fp)
    f0c8:	e0fff617 	ldw	r3,-40(fp)
    f0cc:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
    f0d0:	e0bff817 	ldw	r2,-32(fp)
    f0d4:	e0fff517 	ldw	r3,-44(fp)
    f0d8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    f0dc:	0005303a 	rdctl	r2,status
    f0e0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0e4:	e0fff917 	ldw	r3,-28(fp)
    f0e8:	00bfff84 	movi	r2,-2
    f0ec:	1884703a 	and	r2,r3,r2
    f0f0:	1001703a 	wrctl	status,r2
  return context;
    f0f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    f0f8:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f0fc:	d0a73c17 	ldw	r2,-25360(gp)
    f100:	d0e73d17 	ldw	r3,-25356(gp)
      
      current_nticks = alt_nticks();
    f104:	e0bffe15 	stw	r2,-8(fp)
    f108:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    f10c:	e0bff717 	ldw	r2,-36(fp)
    f110:	1011883a 	mov	r8,r2
    f114:	0013883a 	mov	r9,zero
    f118:	e13ffe17 	ldw	r4,-8(fp)
    f11c:	e17fff17 	ldw	r5,-4(fp)
    f120:	4105883a 	add	r2,r8,r4
    f124:	120d803a 	cmpltu	r6,r2,r8
    f128:	4947883a 	add	r3,r9,r5
    f12c:	30c9883a 	add	r4,r6,r3
    f130:	2007883a 	mov	r3,r4
    f134:	1009883a 	mov	r4,r2
    f138:	180b883a 	mov	r5,r3
    f13c:	01800044 	movi	r6,1
    f140:	000f883a 	mov	r7,zero
    f144:	2185883a 	add	r2,r4,r6
    f148:	1111803a 	cmpltu	r8,r2,r4
    f14c:	29c7883a 	add	r3,r5,r7
    f150:	40c9883a 	add	r4,r8,r3
    f154:	2007883a 	mov	r3,r4
    f158:	1009883a 	mov	r4,r2
    f15c:	180b883a 	mov	r5,r3
    f160:	e0bff817 	ldw	r2,-32(fp)
    f164:	11000215 	stw	r4,8(r2)
    f168:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    f16c:	e0bff817 	ldw	r2,-32(fp)
    f170:	d0e00c04 	addi	r3,gp,-32720
    f174:	e0fffb15 	stw	r3,-20(fp)
    f178:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f17c:	e0bffa17 	ldw	r2,-24(fp)
    f180:	e0fffb17 	ldw	r3,-20(fp)
    f184:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f188:	e0bffb17 	ldw	r2,-20(fp)
    f18c:	10c00017 	ldw	r3,0(r2)
    f190:	e0bffa17 	ldw	r2,-24(fp)
    f194:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    f198:	e0bffb17 	ldw	r2,-20(fp)
    f19c:	10800017 	ldw	r2,0(r2)
    f1a0:	e0fffa17 	ldw	r3,-24(fp)
    f1a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f1a8:	e0bffb17 	ldw	r2,-20(fp)
    f1ac:	e0fffa17 	ldw	r3,-24(fp)
    f1b0:	10c00015 	stw	r3,0(r2)
}
    f1b4:	0001883a 	nop
    f1b8:	e0bffd17 	ldw	r2,-12(fp)
    f1bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    f1c0:	e0bffc17 	ldw	r2,-16(fp)
    f1c4:	1001703a 	wrctl	status,r2
}
    f1c8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
    f1cc:	0005883a 	mov	r2,zero
    f1d0:	00000306 	br	f1e0 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
    f1d4:	00bffa84 	movi	r2,-22
    f1d8:	00000106 	br	f1e0 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
    f1dc:	00bfde84 	movi	r2,-134
  }
}
    f1e0:	e037883a 	mov	sp,fp
    f1e4:	df000017 	ldw	fp,0(sp)
    f1e8:	dec00104 	addi	sp,sp,4
    f1ec:	f800283a 	ret

0000f1f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f1f0:	deffff04 	addi	sp,sp,-4
    f1f4:	df000015 	stw	fp,0(sp)
    f1f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f1fc:	0001883a 	nop
    f200:	e037883a 	mov	sp,fp
    f204:	df000017 	ldw	fp,0(sp)
    f208:	dec00104 	addi	sp,sp,4
    f20c:	f800283a 	ret

0000f210 <alt_get_errno>:
{
    f210:	defffe04 	addi	sp,sp,-8
    f214:	dfc00115 	stw	ra,4(sp)
    f218:	df000015 	stw	fp,0(sp)
    f21c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f220:	d0a00917 	ldw	r2,-32732(gp)
    f224:	10000326 	beq	r2,zero,f234 <alt_get_errno+0x24>
    f228:	d0a00917 	ldw	r2,-32732(gp)
    f22c:	103ee83a 	callr	r2
    f230:	00000106 	br	f238 <alt_get_errno+0x28>
    f234:	d0a73504 	addi	r2,gp,-25388
}
    f238:	e037883a 	mov	sp,fp
    f23c:	dfc00117 	ldw	ra,4(sp)
    f240:	df000017 	ldw	fp,0(sp)
    f244:	dec00204 	addi	sp,sp,8
    f248:	f800283a 	ret

0000f24c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f24c:	defffa04 	addi	sp,sp,-24
    f250:	dfc00515 	stw	ra,20(sp)
    f254:	df000415 	stw	fp,16(sp)
    f258:	df000404 	addi	fp,sp,16
    f25c:	e13ffd15 	stw	r4,-12(fp)
    f260:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f264:	e0bffd17 	ldw	r2,-12(fp)
    f268:	10000326 	beq	r2,zero,f278 <alt_dev_llist_insert+0x2c>
    f26c:	e0bffd17 	ldw	r2,-12(fp)
    f270:	10800217 	ldw	r2,8(r2)
    f274:	1000061e 	bne	r2,zero,f290 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    f278:	000f2100 	call	f210 <alt_get_errno>
    f27c:	1007883a 	mov	r3,r2
    f280:	00800584 	movi	r2,22
    f284:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    f288:	00bffa84 	movi	r2,-22
    f28c:	00001406 	br	f2e0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    f290:	e0bffd17 	ldw	r2,-12(fp)
    f294:	e0fffc17 	ldw	r3,-16(fp)
    f298:	e0ffff15 	stw	r3,-4(fp)
    f29c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    f2a0:	e0bffe17 	ldw	r2,-8(fp)
    f2a4:	e0ffff17 	ldw	r3,-4(fp)
    f2a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    f2ac:	e0bfff17 	ldw	r2,-4(fp)
    f2b0:	10c00017 	ldw	r3,0(r2)
    f2b4:	e0bffe17 	ldw	r2,-8(fp)
    f2b8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    f2bc:	e0bfff17 	ldw	r2,-4(fp)
    f2c0:	10800017 	ldw	r2,0(r2)
    f2c4:	e0fffe17 	ldw	r3,-8(fp)
    f2c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f2cc:	e0bfff17 	ldw	r2,-4(fp)
    f2d0:	e0fffe17 	ldw	r3,-8(fp)
    f2d4:	10c00015 	stw	r3,0(r2)
}
    f2d8:	0001883a 	nop

  return 0;  
    f2dc:	0005883a 	mov	r2,zero
}
    f2e0:	e037883a 	mov	sp,fp
    f2e4:	dfc00117 	ldw	ra,4(sp)
    f2e8:	df000017 	ldw	fp,0(sp)
    f2ec:	dec00204 	addi	sp,sp,8
    f2f0:	f800283a 	ret

0000f2f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f2f4:	defffd04 	addi	sp,sp,-12
    f2f8:	dfc00215 	stw	ra,8(sp)
    f2fc:	df000115 	stw	fp,4(sp)
    f300:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f304:	00800074 	movhi	r2,1
    f308:	10802904 	addi	r2,r2,164
    f30c:	e0bfff15 	stw	r2,-4(fp)
    f310:	00000606 	br	f32c <_do_ctors+0x38>
        (*ctor) (); 
    f314:	e0bfff17 	ldw	r2,-4(fp)
    f318:	10800017 	ldw	r2,0(r2)
    f31c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f320:	e0bfff17 	ldw	r2,-4(fp)
    f324:	10bfff04 	addi	r2,r2,-4
    f328:	e0bfff15 	stw	r2,-4(fp)
    f32c:	e0ffff17 	ldw	r3,-4(fp)
    f330:	00800074 	movhi	r2,1
    f334:	10802a04 	addi	r2,r2,168
    f338:	18bff62e 	bgeu	r3,r2,f314 <_do_ctors+0x20>
}
    f33c:	0001883a 	nop
    f340:	0001883a 	nop
    f344:	e037883a 	mov	sp,fp
    f348:	dfc00117 	ldw	ra,4(sp)
    f34c:	df000017 	ldw	fp,0(sp)
    f350:	dec00204 	addi	sp,sp,8
    f354:	f800283a 	ret

0000f358 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f358:	defffd04 	addi	sp,sp,-12
    f35c:	dfc00215 	stw	ra,8(sp)
    f360:	df000115 	stw	fp,4(sp)
    f364:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f368:	00800074 	movhi	r2,1
    f36c:	10802904 	addi	r2,r2,164
    f370:	e0bfff15 	stw	r2,-4(fp)
    f374:	00000606 	br	f390 <_do_dtors+0x38>
        (*dtor) (); 
    f378:	e0bfff17 	ldw	r2,-4(fp)
    f37c:	10800017 	ldw	r2,0(r2)
    f380:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f384:	e0bfff17 	ldw	r2,-4(fp)
    f388:	10bfff04 	addi	r2,r2,-4
    f38c:	e0bfff15 	stw	r2,-4(fp)
    f390:	e0ffff17 	ldw	r3,-4(fp)
    f394:	00800074 	movhi	r2,1
    f398:	10802a04 	addi	r2,r2,168
    f39c:	18bff62e 	bgeu	r3,r2,f378 <_do_dtors+0x20>
}
    f3a0:	0001883a 	nop
    f3a4:	0001883a 	nop
    f3a8:	e037883a 	mov	sp,fp
    f3ac:	dfc00117 	ldw	ra,4(sp)
    f3b0:	df000017 	ldw	fp,0(sp)
    f3b4:	dec00204 	addi	sp,sp,8
    f3b8:	f800283a 	ret

0000f3bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f3bc:	defffa04 	addi	sp,sp,-24
    f3c0:	dfc00515 	stw	ra,20(sp)
    f3c4:	df000415 	stw	fp,16(sp)
    f3c8:	df000404 	addi	fp,sp,16
    f3cc:	e13ffd15 	stw	r4,-12(fp)
    f3d0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f3d4:	e0bffc17 	ldw	r2,-16(fp)
    f3d8:	10800017 	ldw	r2,0(r2)
    f3dc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f3e0:	e13ffd17 	ldw	r4,-12(fp)
    f3e4:	0006d4c0 	call	6d4c <strlen>
    f3e8:	10800044 	addi	r2,r2,1
    f3ec:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f3f0:	00000d06 	br	f428 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f3f4:	e0bfff17 	ldw	r2,-4(fp)
    f3f8:	10800217 	ldw	r2,8(r2)
    f3fc:	e0fffe17 	ldw	r3,-8(fp)
    f400:	180d883a 	mov	r6,r3
    f404:	e17ffd17 	ldw	r5,-12(fp)
    f408:	1009883a 	mov	r4,r2
    f40c:	000fe800 	call	fe80 <memcmp>
    f410:	1000021e 	bne	r2,zero,f41c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f414:	e0bfff17 	ldw	r2,-4(fp)
    f418:	00000706 	br	f438 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f41c:	e0bfff17 	ldw	r2,-4(fp)
    f420:	10800017 	ldw	r2,0(r2)
    f424:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    f428:	e0ffff17 	ldw	r3,-4(fp)
    f42c:	e0bffc17 	ldw	r2,-16(fp)
    f430:	18bff01e 	bne	r3,r2,f3f4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    f434:	0005883a 	mov	r2,zero
}
    f438:	e037883a 	mov	sp,fp
    f43c:	dfc00117 	ldw	ra,4(sp)
    f440:	df000017 	ldw	fp,0(sp)
    f444:	dec00204 	addi	sp,sp,8
    f448:	f800283a 	ret

0000f44c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f44c:	defffe04 	addi	sp,sp,-8
    f450:	dfc00115 	stw	ra,4(sp)
    f454:	df000015 	stw	fp,0(sp)
    f458:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f45c:	01440004 	movi	r5,4096
    f460:	0009883a 	mov	r4,zero
    f464:	000fd100 	call	fd10 <alt_icache_flush>
#endif
}
    f468:	0001883a 	nop
    f46c:	e037883a 	mov	sp,fp
    f470:	dfc00117 	ldw	ra,4(sp)
    f474:	df000017 	ldw	fp,0(sp)
    f478:	dec00204 	addi	sp,sp,8
    f47c:	f800283a 	ret

0000f480 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f480:	defff904 	addi	sp,sp,-28
    f484:	dfc00615 	stw	ra,24(sp)
    f488:	df000515 	stw	fp,20(sp)
    f48c:	df000504 	addi	fp,sp,20
    f490:	e13ffe15 	stw	r4,-8(fp)
    f494:	e17ffd15 	stw	r5,-12(fp)
    f498:	e1bffc15 	stw	r6,-16(fp)
    f49c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    f4a0:	e1bffb17 	ldw	r6,-20(fp)
    f4a4:	e17ffc17 	ldw	r5,-16(fp)
    f4a8:	e13ffd17 	ldw	r4,-12(fp)
    f4ac:	000f8200 	call	f820 <open>
    f4b0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    f4b4:	e0bfff17 	ldw	r2,-4(fp)
    f4b8:	10001716 	blt	r2,zero,f518 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
    f4bc:	e0bfff17 	ldw	r2,-4(fp)
    f4c0:	10c00324 	muli	r3,r2,12
    f4c4:	00800074 	movhi	r2,1
    f4c8:	1885883a 	add	r2,r3,r2
    f4cc:	10c44617 	ldw	r3,4376(r2)
    f4d0:	e0bffe17 	ldw	r2,-8(fp)
    f4d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f4d8:	e0bfff17 	ldw	r2,-4(fp)
    f4dc:	10c00324 	muli	r3,r2,12
    f4e0:	00800074 	movhi	r2,1
    f4e4:	1885883a 	add	r2,r3,r2
    f4e8:	10c44717 	ldw	r3,4380(r2)
    f4ec:	e0bffe17 	ldw	r2,-8(fp)
    f4f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f4f4:	e0bfff17 	ldw	r2,-4(fp)
    f4f8:	10c00324 	muli	r3,r2,12
    f4fc:	00800074 	movhi	r2,1
    f500:	1885883a 	add	r2,r3,r2
    f504:	10c44817 	ldw	r3,4384(r2)
    f508:	e0bffe17 	ldw	r2,-8(fp)
    f50c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f510:	e13fff17 	ldw	r4,-4(fp)
    f514:	000d9480 	call	d948 <alt_release_fd>
  }
} 
    f518:	0001883a 	nop
    f51c:	e037883a 	mov	sp,fp
    f520:	dfc00117 	ldw	ra,4(sp)
    f524:	df000017 	ldw	fp,0(sp)
    f528:	dec00204 	addi	sp,sp,8
    f52c:	f800283a 	ret

0000f530 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f530:	defffb04 	addi	sp,sp,-20
    f534:	dfc00415 	stw	ra,16(sp)
    f538:	df000315 	stw	fp,12(sp)
    f53c:	df000304 	addi	fp,sp,12
    f540:	e13fff15 	stw	r4,-4(fp)
    f544:	e17ffe15 	stw	r5,-8(fp)
    f548:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f54c:	01c07fc4 	movi	r7,511
    f550:	01800044 	movi	r6,1
    f554:	e17fff17 	ldw	r5,-4(fp)
    f558:	01000074 	movhi	r4,1
    f55c:	21044904 	addi	r4,r4,4388
    f560:	000f4800 	call	f480 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f564:	01c07fc4 	movi	r7,511
    f568:	000d883a 	mov	r6,zero
    f56c:	e17ffe17 	ldw	r5,-8(fp)
    f570:	01000074 	movhi	r4,1
    f574:	21044604 	addi	r4,r4,4376
    f578:	000f4800 	call	f480 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f57c:	01c07fc4 	movi	r7,511
    f580:	01800044 	movi	r6,1
    f584:	e17ffd17 	ldw	r5,-12(fp)
    f588:	01000074 	movhi	r4,1
    f58c:	21044c04 	addi	r4,r4,4400
    f590:	000f4800 	call	f480 <alt_open_fd>
}  
    f594:	0001883a 	nop
    f598:	e037883a 	mov	sp,fp
    f59c:	dfc00117 	ldw	ra,4(sp)
    f5a0:	df000017 	ldw	fp,0(sp)
    f5a4:	dec00204 	addi	sp,sp,8
    f5a8:	f800283a 	ret

0000f5ac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    f5ac:	defff004 	addi	sp,sp,-64
    f5b0:	df000f15 	stw	fp,60(sp)
    f5b4:	df000f04 	addi	fp,sp,60
    f5b8:	e13ff315 	stw	r4,-52(fp)
    f5bc:	e17ff215 	stw	r5,-56(fp)
    f5c0:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
    f5c4:	00bffa84 	movi	r2,-22
    f5c8:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f5cc:	e0bff317 	ldw	r2,-52(fp)
    f5d0:	10800828 	cmpgeui	r2,r2,32
    f5d4:	1000501e 	bne	r2,zero,f718 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
    f5d8:	0005303a 	rdctl	r2,status
    f5dc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5e0:	e0fffd17 	ldw	r3,-12(fp)
    f5e4:	00bfff84 	movi	r2,-2
    f5e8:	1884703a 	and	r2,r3,r2
    f5ec:	1001703a 	wrctl	status,r2
  return context;
    f5f0:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    f5f4:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
    f5f8:	e0bff317 	ldw	r2,-52(fp)
    f5fc:	100890fa 	slli	r4,r2,3
    f600:	e0fff117 	ldw	r3,-60(fp)
    f604:	00800074 	movhi	r2,1
    f608:	2085883a 	add	r2,r4,r2
    f60c:	10d03515 	stw	r3,16596(r2)
    alt_irq[id].context = context;
    f610:	e0bff317 	ldw	r2,-52(fp)
    f614:	100890fa 	slli	r4,r2,3
    f618:	e0fff217 	ldw	r3,-56(fp)
    f61c:	00800074 	movhi	r2,1
    f620:	2085883a 	add	r2,r4,r2
    f624:	10d03615 	stw	r3,16600(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    f628:	e0bff117 	ldw	r2,-60(fp)
    f62c:	10001a26 	beq	r2,zero,f698 <alt_irq_register+0xec>
    f630:	e0bff317 	ldw	r2,-52(fp)
    f634:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
    f638:	0005303a 	rdctl	r2,status
    f63c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f640:	e0fffb17 	ldw	r3,-20(fp)
    f644:	00bfff84 	movi	r2,-2
    f648:	1884703a 	and	r2,r3,r2
    f64c:	1001703a 	wrctl	status,r2
  return context;
    f650:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    f654:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
    f658:	00c00044 	movi	r3,1
    f65c:	e0bffc17 	ldw	r2,-16(fp)
    f660:	1884983a 	sll	r2,r3,r2
    f664:	1007883a 	mov	r3,r2
    f668:	d0a73a17 	ldw	r2,-25368(gp)
    f66c:	1884b03a 	or	r2,r3,r2
    f670:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f674:	d0a73a17 	ldw	r2,-25368(gp)
    f678:	100170fa 	wrctl	ienable,r2
    f67c:	e0bffa17 	ldw	r2,-24(fp)
    f680:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
    f684:	e0bff917 	ldw	r2,-28(fp)
    f688:	1001703a 	wrctl	status,r2
}
    f68c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    f690:	0005883a 	mov	r2,zero
    f694:	00001a06 	br	f700 <alt_irq_register+0x154>
    f698:	e0bff317 	ldw	r2,-52(fp)
    f69c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
    f6a0:	0005303a 	rdctl	r2,status
    f6a4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6a8:	e0fff717 	ldw	r3,-36(fp)
    f6ac:	00bfff84 	movi	r2,-2
    f6b0:	1884703a 	and	r2,r3,r2
    f6b4:	1001703a 	wrctl	status,r2
  return context;
    f6b8:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
    f6bc:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
    f6c0:	00c00044 	movi	r3,1
    f6c4:	e0bff817 	ldw	r2,-32(fp)
    f6c8:	1884983a 	sll	r2,r3,r2
    f6cc:	0084303a 	nor	r2,zero,r2
    f6d0:	1007883a 	mov	r3,r2
    f6d4:	d0a73a17 	ldw	r2,-25368(gp)
    f6d8:	1884703a 	and	r2,r3,r2
    f6dc:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f6e0:	d0a73a17 	ldw	r2,-25368(gp)
    f6e4:	100170fa 	wrctl	ienable,r2
    f6e8:	e0bff617 	ldw	r2,-40(fp)
    f6ec:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    f6f0:	e0bff517 	ldw	r2,-44(fp)
    f6f4:	1001703a 	wrctl	status,r2
}
    f6f8:	0001883a 	nop
  return 0;
    f6fc:	0005883a 	mov	r2,zero
    f700:	e0bfff15 	stw	r2,-4(fp)
    f704:	e0bffe17 	ldw	r2,-8(fp)
    f708:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    f70c:	e0bff417 	ldw	r2,-48(fp)
    f710:	1001703a 	wrctl	status,r2
}
    f714:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
    f718:	e0bfff17 	ldw	r2,-4(fp)
}
    f71c:	e037883a 	mov	sp,fp
    f720:	df000017 	ldw	fp,0(sp)
    f724:	dec00104 	addi	sp,sp,4
    f728:	f800283a 	ret

0000f72c <alt_get_errno>:
{
    f72c:	defffe04 	addi	sp,sp,-8
    f730:	dfc00115 	stw	ra,4(sp)
    f734:	df000015 	stw	fp,0(sp)
    f738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f73c:	d0a00917 	ldw	r2,-32732(gp)
    f740:	10000326 	beq	r2,zero,f750 <alt_get_errno+0x24>
    f744:	d0a00917 	ldw	r2,-32732(gp)
    f748:	103ee83a 	callr	r2
    f74c:	00000106 	br	f754 <alt_get_errno+0x28>
    f750:	d0a73504 	addi	r2,gp,-25388
}
    f754:	e037883a 	mov	sp,fp
    f758:	dfc00117 	ldw	ra,4(sp)
    f75c:	df000017 	ldw	fp,0(sp)
    f760:	dec00204 	addi	sp,sp,8
    f764:	f800283a 	ret

0000f768 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f768:	defffd04 	addi	sp,sp,-12
    f76c:	df000215 	stw	fp,8(sp)
    f770:	df000204 	addi	fp,sp,8
    f774:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f778:	e0bffe17 	ldw	r2,-8(fp)
    f77c:	10800217 	ldw	r2,8(r2)
    f780:	10d00034 	orhi	r3,r2,16384
    f784:	e0bffe17 	ldw	r2,-8(fp)
    f788:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f78c:	e03fff15 	stw	zero,-4(fp)
    f790:	00001a06 	br	f7fc <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f794:	e0bfff17 	ldw	r2,-4(fp)
    f798:	10c00324 	muli	r3,r2,12
    f79c:	00800074 	movhi	r2,1
    f7a0:	1885883a 	add	r2,r3,r2
    f7a4:	10c44617 	ldw	r3,4376(r2)
    f7a8:	e0bffe17 	ldw	r2,-8(fp)
    f7ac:	10800017 	ldw	r2,0(r2)
    f7b0:	18800f1e 	bne	r3,r2,f7f0 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f7b4:	e0bfff17 	ldw	r2,-4(fp)
    f7b8:	10c00324 	muli	r3,r2,12
    f7bc:	00800074 	movhi	r2,1
    f7c0:	1885883a 	add	r2,r3,r2
    f7c4:	10844817 	ldw	r2,4384(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
    f7c8:	1000090e 	bge	r2,zero,f7f0 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
    f7cc:	e0bfff17 	ldw	r2,-4(fp)
    f7d0:	10c00324 	muli	r3,r2,12
    f7d4:	00800074 	movhi	r2,1
    f7d8:	10844604 	addi	r2,r2,4376
    f7dc:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f7e0:	e0fffe17 	ldw	r3,-8(fp)
    f7e4:	18800226 	beq	r3,r2,f7f0 <alt_file_locked+0x88>
    {
      return -EACCES;
    f7e8:	00bffcc4 	movi	r2,-13
    f7ec:	00000806 	br	f810 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
    f7f0:	e0bfff17 	ldw	r2,-4(fp)
    f7f4:	10800044 	addi	r2,r2,1
    f7f8:	e0bfff15 	stw	r2,-4(fp)
    f7fc:	d0a00817 	ldw	r2,-32736(gp)
    f800:	1007883a 	mov	r3,r2
    f804:	e0bfff17 	ldw	r2,-4(fp)
    f808:	18bfe22e 	bgeu	r3,r2,f794 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f80c:	0005883a 	mov	r2,zero
}
    f810:	e037883a 	mov	sp,fp
    f814:	df000017 	ldw	fp,0(sp)
    f818:	dec00104 	addi	sp,sp,4
    f81c:	f800283a 	ret

0000f820 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f820:	defff604 	addi	sp,sp,-40
    f824:	dfc00915 	stw	ra,36(sp)
    f828:	df000815 	stw	fp,32(sp)
    f82c:	df000804 	addi	fp,sp,32
    f830:	e13ffa15 	stw	r4,-24(fp)
    f834:	e17ff915 	stw	r5,-28(fp)
    f838:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f83c:	00bfffc4 	movi	r2,-1
    f840:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    f844:	00bffb44 	movi	r2,-19
    f848:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    f84c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f850:	d1600604 	addi	r5,gp,-32744
    f854:	e13ffa17 	ldw	r4,-24(fp)
    f858:	000f3bc0 	call	f3bc <alt_find_dev>
    f85c:	e0bfff15 	stw	r2,-4(fp)
    f860:	e0bfff17 	ldw	r2,-4(fp)
    f864:	1000051e 	bne	r2,zero,f87c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f868:	e13ffa17 	ldw	r4,-24(fp)
    f86c:	000fb680 	call	fb68 <alt_find_file>
    f870:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    f874:	00800044 	movi	r2,1
    f878:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f87c:	e0bfff17 	ldw	r2,-4(fp)
    f880:	10002926 	beq	r2,zero,f928 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f884:	e13fff17 	ldw	r4,-4(fp)
    f888:	000fc700 	call	fc70 <alt_get_fd>
    f88c:	e0bffe15 	stw	r2,-8(fp)
    f890:	e0bffe17 	ldw	r2,-8(fp)
    f894:	1000030e 	bge	r2,zero,f8a4 <open+0x84>
    {
      status = index;
    f898:	e0bffe17 	ldw	r2,-8(fp)
    f89c:	e0bffd15 	stw	r2,-12(fp)
    f8a0:	00002306 	br	f930 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    f8a4:	e0bffe17 	ldw	r2,-8(fp)
    f8a8:	10c00324 	muli	r3,r2,12
    f8ac:	00800074 	movhi	r2,1
    f8b0:	10844604 	addi	r2,r2,4376
    f8b4:	1885883a 	add	r2,r3,r2
    f8b8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f8bc:	e0fff917 	ldw	r3,-28(fp)
    f8c0:	00900034 	movhi	r2,16384
    f8c4:	10bfffc4 	addi	r2,r2,-1
    f8c8:	1886703a 	and	r3,r3,r2
    f8cc:	e0bffb17 	ldw	r2,-20(fp)
    f8d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f8d4:	e0bffc17 	ldw	r2,-16(fp)
    f8d8:	1000051e 	bne	r2,zero,f8f0 <open+0xd0>
    f8dc:	e13ffb17 	ldw	r4,-20(fp)
    f8e0:	000f7680 	call	f768 <alt_file_locked>
    f8e4:	e0bffd15 	stw	r2,-12(fp)
    f8e8:	e0bffd17 	ldw	r2,-12(fp)
    f8ec:	10001016 	blt	r2,zero,f930 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f8f0:	e0bfff17 	ldw	r2,-4(fp)
    f8f4:	10800317 	ldw	r2,12(r2)
    f8f8:	10000826 	beq	r2,zero,f91c <open+0xfc>
    f8fc:	e0bfff17 	ldw	r2,-4(fp)
    f900:	10800317 	ldw	r2,12(r2)
    f904:	e1fff817 	ldw	r7,-32(fp)
    f908:	e1bff917 	ldw	r6,-28(fp)
    f90c:	e17ffa17 	ldw	r5,-24(fp)
    f910:	e13ffb17 	ldw	r4,-20(fp)
    f914:	103ee83a 	callr	r2
    f918:	00000106 	br	f920 <open+0x100>
    f91c:	0005883a 	mov	r2,zero
    f920:	e0bffd15 	stw	r2,-12(fp)
    f924:	00000206 	br	f930 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f928:	00bffb44 	movi	r2,-19
    f92c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f930:	e0bffd17 	ldw	r2,-12(fp)
    f934:	1000090e 	bge	r2,zero,f95c <open+0x13c>
  {
    alt_release_fd (index);  
    f938:	e13ffe17 	ldw	r4,-8(fp)
    f93c:	000d9480 	call	d948 <alt_release_fd>
    ALT_ERRNO = -status;
    f940:	000f72c0 	call	f72c <alt_get_errno>
    f944:	1007883a 	mov	r3,r2
    f948:	e0bffd17 	ldw	r2,-12(fp)
    f94c:	0085c83a 	sub	r2,zero,r2
    f950:	18800015 	stw	r2,0(r3)
    return -1;
    f954:	00bfffc4 	movi	r2,-1
    f958:	00000106 	br	f960 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    f95c:	e0bffe17 	ldw	r2,-8(fp)
}
    f960:	e037883a 	mov	sp,fp
    f964:	dfc00117 	ldw	ra,4(sp)
    f968:	df000017 	ldw	fp,0(sp)
    f96c:	dec00204 	addi	sp,sp,8
    f970:	f800283a 	ret

0000f974 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f974:	defffa04 	addi	sp,sp,-24
    f978:	df000515 	stw	fp,20(sp)
    f97c:	df000504 	addi	fp,sp,20
    f980:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    f984:	0005303a 	rdctl	r2,status
    f988:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f98c:	e0fffc17 	ldw	r3,-16(fp)
    f990:	00bfff84 	movi	r2,-2
    f994:	1884703a 	and	r2,r3,r2
    f998:	1001703a 	wrctl	status,r2
  return context;
    f99c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f9a0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    f9a4:	e0bffb17 	ldw	r2,-20(fp)
    f9a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f9ac:	e0bffd17 	ldw	r2,-12(fp)
    f9b0:	10800017 	ldw	r2,0(r2)
    f9b4:	e0fffd17 	ldw	r3,-12(fp)
    f9b8:	18c00117 	ldw	r3,4(r3)
    f9bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f9c0:	e0bffd17 	ldw	r2,-12(fp)
    f9c4:	10800117 	ldw	r2,4(r2)
    f9c8:	e0fffd17 	ldw	r3,-12(fp)
    f9cc:	18c00017 	ldw	r3,0(r3)
    f9d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f9d4:	e0bffd17 	ldw	r2,-12(fp)
    f9d8:	e0fffd17 	ldw	r3,-12(fp)
    f9dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f9e0:	e0bffd17 	ldw	r2,-12(fp)
    f9e4:	e0fffd17 	ldw	r3,-12(fp)
    f9e8:	10c00015 	stw	r3,0(r2)
} 
    f9ec:	0001883a 	nop
    f9f0:	e0bfff17 	ldw	r2,-4(fp)
    f9f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    f9f8:	e0bffe17 	ldw	r2,-8(fp)
    f9fc:	1001703a 	wrctl	status,r2
}
    fa00:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    fa04:	0001883a 	nop
    fa08:	e037883a 	mov	sp,fp
    fa0c:	df000017 	ldw	fp,0(sp)
    fa10:	dec00104 	addi	sp,sp,4
    fa14:	f800283a 	ret

0000fa18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fa18:	defff904 	addi	sp,sp,-28
    fa1c:	dfc00615 	stw	ra,24(sp)
    fa20:	df000515 	stw	fp,20(sp)
    fa24:	dc400415 	stw	r17,16(sp)
    fa28:	dc000315 	stw	r16,12(sp)
    fa2c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fa30:	d0a00c17 	ldw	r2,-32720(gp)
    fa34:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fa38:	d1273c17 	ldw	r4,-25360(gp)
    fa3c:	d1673d17 	ldw	r5,-25356(gp)
    fa40:	01800044 	movi	r6,1
    fa44:	000f883a 	mov	r7,zero
    fa48:	2185883a 	add	r2,r4,r6
    fa4c:	1111803a 	cmpltu	r8,r2,r4
    fa50:	29c7883a 	add	r3,r5,r7
    fa54:	40c9883a 	add	r4,r8,r3
    fa58:	2007883a 	mov	r3,r4
    fa5c:	1009883a 	mov	r4,r2
    fa60:	180b883a 	mov	r5,r3
    fa64:	d1273c15 	stw	r4,-25360(gp)
    fa68:	d1673d15 	stw	r5,-25356(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fa6c:	00002906 	br	fb14 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
    fa70:	e0bffd17 	ldw	r2,-12(fp)
    fa74:	10800017 	ldw	r2,0(r2)
    fa78:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    fa7c:	e13ffd17 	ldw	r4,-12(fp)
    fa80:	20800217 	ldw	r2,8(r4)
    fa84:	20c00317 	ldw	r3,12(r4)
    fa88:	d1273c17 	ldw	r4,-25360(gp)
    fa8c:	d1673d17 	ldw	r5,-25356(gp)
    fa90:	28c01e36 	bltu	r5,r3,fb0c <alt_tick+0xf4>
    fa94:	1940011e 	bne	r3,r5,fa9c <alt_tick+0x84>
    fa98:	20801c36 	bltu	r4,r2,fb0c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
    fa9c:	e0bffd17 	ldw	r2,-12(fp)
    faa0:	10800417 	ldw	r2,16(r2)
    faa4:	e0fffd17 	ldw	r3,-12(fp)
    faa8:	18c00517 	ldw	r3,20(r3)
    faac:	1809883a 	mov	r4,r3
    fab0:	103ee83a 	callr	r2
    fab4:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fab8:	e0bffb17 	ldw	r2,-20(fp)
    fabc:	1000031e 	bne	r2,zero,facc <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
    fac0:	e13ffd17 	ldw	r4,-12(fp)
    fac4:	000f9740 	call	f974 <alt_alarm_stop>
    fac8:	00001006 	br	fb0c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
    facc:	e0bffd17 	ldw	r2,-12(fp)
    fad0:	11000217 	ldw	r4,8(r2)
    fad4:	11400317 	ldw	r5,12(r2)
    fad8:	e0bffb17 	ldw	r2,-20(fp)
    fadc:	1021883a 	mov	r16,r2
    fae0:	0023883a 	mov	r17,zero
    fae4:	2405883a 	add	r2,r4,r16
    fae8:	110d803a 	cmpltu	r6,r2,r4
    faec:	2c47883a 	add	r3,r5,r17
    faf0:	30c9883a 	add	r4,r6,r3
    faf4:	2007883a 	mov	r3,r4
    faf8:	1009883a 	mov	r4,r2
    fafc:	180b883a 	mov	r5,r3
    fb00:	e0bffd17 	ldw	r2,-12(fp)
    fb04:	11000215 	stw	r4,8(r2)
    fb08:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
    fb0c:	e0bffc17 	ldw	r2,-16(fp)
    fb10:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    fb14:	e0fffd17 	ldw	r3,-12(fp)
    fb18:	d0a00c04 	addi	r2,gp,-32720
    fb1c:	18bfd41e 	bne	r3,r2,fa70 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    fb20:	0001883a 	nop
}
    fb24:	0001883a 	nop
    fb28:	e6fffe04 	addi	sp,fp,-8
    fb2c:	dfc00317 	ldw	ra,12(sp)
    fb30:	df000217 	ldw	fp,8(sp)
    fb34:	dc400117 	ldw	r17,4(sp)
    fb38:	dc000017 	ldw	r16,0(sp)
    fb3c:	dec00404 	addi	sp,sp,16
    fb40:	f800283a 	ret

0000fb44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    fb44:	deffff04 	addi	sp,sp,-4
    fb48:	df000015 	stw	fp,0(sp)
    fb4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    fb50:	000170fa 	wrctl	ienable,zero
}
    fb54:	0001883a 	nop
    fb58:	e037883a 	mov	sp,fp
    fb5c:	df000017 	ldw	fp,0(sp)
    fb60:	dec00104 	addi	sp,sp,4
    fb64:	f800283a 	ret

0000fb68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fb68:	defffb04 	addi	sp,sp,-20
    fb6c:	dfc00415 	stw	ra,16(sp)
    fb70:	df000315 	stw	fp,12(sp)
    fb74:	df000304 	addi	fp,sp,12
    fb78:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fb7c:	d0a00417 	ldw	r2,-32752(gp)
    fb80:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fb84:	00003106 	br	fc4c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    fb88:	e0bfff17 	ldw	r2,-4(fp)
    fb8c:	10800217 	ldw	r2,8(r2)
    fb90:	1009883a 	mov	r4,r2
    fb94:	0006d4c0 	call	6d4c <strlen>
    fb98:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    fb9c:	e0bfff17 	ldw	r2,-4(fp)
    fba0:	10c00217 	ldw	r3,8(r2)
    fba4:	e0bffe17 	ldw	r2,-8(fp)
    fba8:	10bfffc4 	addi	r2,r2,-1
    fbac:	1885883a 	add	r2,r3,r2
    fbb0:	10800003 	ldbu	r2,0(r2)
    fbb4:	10803fcc 	andi	r2,r2,255
    fbb8:	1080201c 	xori	r2,r2,128
    fbbc:	10bfe004 	addi	r2,r2,-128
    fbc0:	10800bd8 	cmpnei	r2,r2,47
    fbc4:	1000031e 	bne	r2,zero,fbd4 <alt_find_file+0x6c>
    {
      len -= 1;
    fbc8:	e0bffe17 	ldw	r2,-8(fp)
    fbcc:	10bfffc4 	addi	r2,r2,-1
    fbd0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fbd4:	e0bffe17 	ldw	r2,-8(fp)
    fbd8:	e0fffd17 	ldw	r3,-12(fp)
    fbdc:	1885883a 	add	r2,r3,r2
    fbe0:	10800003 	ldbu	r2,0(r2)
    fbe4:	10803fcc 	andi	r2,r2,255
    fbe8:	1080201c 	xori	r2,r2,128
    fbec:	10bfe004 	addi	r2,r2,-128
    fbf0:	10800be0 	cmpeqi	r2,r2,47
    fbf4:	1000081e 	bne	r2,zero,fc18 <alt_find_file+0xb0>
    fbf8:	e0bffe17 	ldw	r2,-8(fp)
    fbfc:	e0fffd17 	ldw	r3,-12(fp)
    fc00:	1885883a 	add	r2,r3,r2
    fc04:	10800003 	ldbu	r2,0(r2)
    fc08:	10803fcc 	andi	r2,r2,255
    fc0c:	1080201c 	xori	r2,r2,128
    fc10:	10bfe004 	addi	r2,r2,-128
    fc14:	10000a1e 	bne	r2,zero,fc40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    fc18:	e0bfff17 	ldw	r2,-4(fp)
    fc1c:	10800217 	ldw	r2,8(r2)
    fc20:	e0fffe17 	ldw	r3,-8(fp)
    fc24:	180d883a 	mov	r6,r3
    fc28:	e17ffd17 	ldw	r5,-12(fp)
    fc2c:	1009883a 	mov	r4,r2
    fc30:	000fe800 	call	fe80 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    fc34:	1000021e 	bne	r2,zero,fc40 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    fc38:	e0bfff17 	ldw	r2,-4(fp)
    fc3c:	00000706 	br	fc5c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    fc40:	e0bfff17 	ldw	r2,-4(fp)
    fc44:	10800017 	ldw	r2,0(r2)
    fc48:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    fc4c:	e0ffff17 	ldw	r3,-4(fp)
    fc50:	d0a00404 	addi	r2,gp,-32752
    fc54:	18bfcc1e 	bne	r3,r2,fb88 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    fc58:	0005883a 	mov	r2,zero
}
    fc5c:	e037883a 	mov	sp,fp
    fc60:	dfc00117 	ldw	ra,4(sp)
    fc64:	df000017 	ldw	fp,0(sp)
    fc68:	dec00204 	addi	sp,sp,8
    fc6c:	f800283a 	ret

0000fc70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fc70:	defffc04 	addi	sp,sp,-16
    fc74:	df000315 	stw	fp,12(sp)
    fc78:	df000304 	addi	fp,sp,12
    fc7c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    fc80:	00bffa04 	movi	r2,-24
    fc84:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fc88:	e03fff15 	stw	zero,-4(fp)
    fc8c:	00001706 	br	fcec <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
    fc90:	e0bfff17 	ldw	r2,-4(fp)
    fc94:	10c00324 	muli	r3,r2,12
    fc98:	00800074 	movhi	r2,1
    fc9c:	1885883a 	add	r2,r3,r2
    fca0:	10844617 	ldw	r2,4376(r2)
    fca4:	10000e1e 	bne	r2,zero,fce0 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
    fca8:	e0bfff17 	ldw	r2,-4(fp)
    fcac:	11000324 	muli	r4,r2,12
    fcb0:	e0fffd17 	ldw	r3,-12(fp)
    fcb4:	00800074 	movhi	r2,1
    fcb8:	2085883a 	add	r2,r4,r2
    fcbc:	10c44615 	stw	r3,4376(r2)
      if (i > alt_max_fd)
    fcc0:	d0e00817 	ldw	r3,-32736(gp)
    fcc4:	e0bfff17 	ldw	r2,-4(fp)
    fcc8:	1880020e 	bge	r3,r2,fcd4 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
    fccc:	e0bfff17 	ldw	r2,-4(fp)
    fcd0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    fcd4:	e0bfff17 	ldw	r2,-4(fp)
    fcd8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    fcdc:	00000706 	br	fcfc <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
    fce0:	e0bfff17 	ldw	r2,-4(fp)
    fce4:	10800044 	addi	r2,r2,1
    fce8:	e0bfff15 	stw	r2,-4(fp)
    fcec:	e0bfff17 	ldw	r2,-4(fp)
    fcf0:	10800810 	cmplti	r2,r2,32
    fcf4:	103fe61e 	bne	r2,zero,fc90 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    fcf8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    fcfc:	e0bffe17 	ldw	r2,-8(fp)
}
    fd00:	e037883a 	mov	sp,fp
    fd04:	df000017 	ldw	fp,0(sp)
    fd08:	dec00104 	addi	sp,sp,4
    fd0c:	f800283a 	ret

0000fd10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    fd10:	defffb04 	addi	sp,sp,-20
    fd14:	df000415 	stw	fp,16(sp)
    fd18:	df000404 	addi	fp,sp,16
    fd1c:	e13ffd15 	stw	r4,-12(fp)
    fd20:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    fd24:	e0bffc17 	ldw	r2,-16(fp)
    fd28:	10840070 	cmpltui	r2,r2,4097
    fd2c:	1000021e 	bne	r2,zero,fd38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    fd30:	00840004 	movi	r2,4096
    fd34:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
    fd38:	e0fffd17 	ldw	r3,-12(fp)
    fd3c:	e0bffc17 	ldw	r2,-16(fp)
    fd40:	1885883a 	add	r2,r3,r2
    fd44:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fd48:	e0bffd17 	ldw	r2,-12(fp)
    fd4c:	e0bfff15 	stw	r2,-4(fp)
    fd50:	00000506 	br	fd68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fd54:	e0bfff17 	ldw	r2,-4(fp)
    fd58:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fd5c:	e0bfff17 	ldw	r2,-4(fp)
    fd60:	10800804 	addi	r2,r2,32
    fd64:	e0bfff15 	stw	r2,-4(fp)
    fd68:	e0ffff17 	ldw	r3,-4(fp)
    fd6c:	e0bffe17 	ldw	r2,-8(fp)
    fd70:	18bff836 	bltu	r3,r2,fd54 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fd74:	e0bffd17 	ldw	r2,-12(fp)
    fd78:	108007cc 	andi	r2,r2,31
    fd7c:	10000226 	beq	r2,zero,fd88 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fd80:	e0bfff17 	ldw	r2,-4(fp)
    fd84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fd88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    fd8c:	0001883a 	nop
    fd90:	e037883a 	mov	sp,fp
    fd94:	df000017 	ldw	fp,0(sp)
    fd98:	dec00104 	addi	sp,sp,4
    fd9c:	f800283a 	ret

0000fda0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    fda0:	defffe04 	addi	sp,sp,-8
    fda4:	df000115 	stw	fp,4(sp)
    fda8:	df000104 	addi	fp,sp,4
    fdac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    fdb0:	e0bfff17 	ldw	r2,-4(fp)
    fdb4:	10bffe84 	addi	r2,r2,-6
    fdb8:	10c00428 	cmpgeui	r3,r2,16
    fdbc:	1800191e 	bne	r3,zero,fe24 <alt_exception_cause_generated_bad_addr+0x84>
    fdc0:	100690ba 	slli	r3,r2,2
    fdc4:	00800074 	movhi	r2,1
    fdc8:	1885883a 	add	r2,r3,r2
    fdcc:	10bf7517 	ldw	r2,-556(r2)
    fdd0:	1000683a 	jmp	r2
    fdd4:	0000fe14 	movui	zero,1016
    fdd8:	0000fe14 	movui	zero,1016
    fddc:	0000fe24 	muli	zero,zero,1016
    fde0:	0000fe24 	muli	zero,zero,1016
    fde4:	0000fe24 	muli	zero,zero,1016
    fde8:	0000fe14 	movui	zero,1016
    fdec:	0000fe1c 	xori	zero,zero,1016
    fdf0:	0000fe24 	muli	zero,zero,1016
    fdf4:	0000fe14 	movui	zero,1016
    fdf8:	0000fe14 	movui	zero,1016
    fdfc:	0000fe24 	muli	zero,zero,1016
    fe00:	0000fe14 	movui	zero,1016
    fe04:	0000fe1c 	xori	zero,zero,1016
    fe08:	0000fe24 	muli	zero,zero,1016
    fe0c:	0000fe24 	muli	zero,zero,1016
    fe10:	0000fe14 	movui	zero,1016
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fe14:	00800044 	movi	r2,1
    fe18:	00000306 	br	fe28 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fe1c:	0005883a 	mov	r2,zero
    fe20:	00000106 	br	fe28 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    fe24:	0005883a 	mov	r2,zero
  }
}
    fe28:	e037883a 	mov	sp,fp
    fe2c:	df000017 	ldw	fp,0(sp)
    fe30:	dec00104 	addi	sp,sp,4
    fe34:	f800283a 	ret

0000fe38 <atexit>:
    fe38:	200b883a 	mov	r5,r4
    fe3c:	000f883a 	mov	r7,zero
    fe40:	000d883a 	mov	r6,zero
    fe44:	0009883a 	mov	r4,zero
    fe48:	000fef81 	jmpi	fef8 <__register_exitproc>

0000fe4c <exit>:
    fe4c:	defffe04 	addi	sp,sp,-8
    fe50:	000b883a 	mov	r5,zero
    fe54:	dc000015 	stw	r16,0(sp)
    fe58:	dfc00115 	stw	ra,4(sp)
    fe5c:	2021883a 	mov	r16,r4
    fe60:	000ff880 	call	ff88 <__call_exitprocs>
    fe64:	00800074 	movhi	r2,1
    fe68:	1108ec17 	ldw	r4,9136(r2)
    fe6c:	20800f17 	ldw	r2,60(r4)
    fe70:	10000126 	beq	r2,zero,fe78 <exit+0x2c>
    fe74:	103ee83a 	callr	r2
    fe78:	8009883a 	mov	r4,r16
    fe7c:	000d1c40 	call	d1c4 <_exit>

0000fe80 <memcmp>:
    fe80:	30800130 	cmpltui	r2,r6,4
    fe84:	10000b1e 	bne	r2,zero,feb4 <memcmp+0x34>
    fe88:	2144b03a 	or	r2,r4,r5
    fe8c:	108000cc 	andi	r2,r2,3
    fe90:	1000171e 	bne	r2,zero,fef0 <memcmp+0x70>
    fe94:	20c00017 	ldw	r3,0(r4)
    fe98:	28800017 	ldw	r2,0(r5)
    fe9c:	1880141e 	bne	r3,r2,fef0 <memcmp+0x70>
    fea0:	31bfff04 	addi	r6,r6,-4
    fea4:	30800128 	cmpgeui	r2,r6,4
    fea8:	21000104 	addi	r4,r4,4
    feac:	29400104 	addi	r5,r5,4
    feb0:	103ff81e 	bne	r2,zero,fe94 <memcmp+0x14>
    feb4:	30bfffc4 	addi	r2,r6,-1
    feb8:	30000b26 	beq	r6,zero,fee8 <memcmp+0x68>
    febc:	11800044 	addi	r6,r2,1
    fec0:	218d883a 	add	r6,r4,r6
    fec4:	00000106 	br	fecc <memcmp+0x4c>
    fec8:	21800726 	beq	r4,r6,fee8 <memcmp+0x68>
    fecc:	20800003 	ldbu	r2,0(r4)
    fed0:	28c00003 	ldbu	r3,0(r5)
    fed4:	21000044 	addi	r4,r4,1
    fed8:	29400044 	addi	r5,r5,1
    fedc:	10fffa26 	beq	r2,r3,fec8 <memcmp+0x48>
    fee0:	10c5c83a 	sub	r2,r2,r3
    fee4:	f800283a 	ret
    fee8:	0005883a 	mov	r2,zero
    feec:	f800283a 	ret
    fef0:	30bfffc4 	addi	r2,r6,-1
    fef4:	003ff106 	br	febc <memcmp+0x3c>

0000fef8 <__register_exitproc>:
    fef8:	00800074 	movhi	r2,1
    fefc:	10c8ec17 	ldw	r3,9136(r2)
    ff00:	18805217 	ldw	r2,328(r3)
    ff04:	10001726 	beq	r2,zero,ff64 <__register_exitproc+0x6c>
    ff08:	10c00117 	ldw	r3,4(r2)
    ff0c:	1a000808 	cmpgei	r8,r3,32
    ff10:	40001b1e 	bne	r8,zero,ff80 <__register_exitproc+0x88>
    ff14:	20000b26 	beq	r4,zero,ff44 <__register_exitproc+0x4c>
    ff18:	181090ba 	slli	r8,r3,2
    ff1c:	02400044 	movi	r9,1
    ff20:	48d2983a 	sll	r9,r9,r3
    ff24:	1211883a 	add	r8,r2,r8
    ff28:	41802215 	stw	r6,136(r8)
    ff2c:	11806217 	ldw	r6,392(r2)
    ff30:	21000098 	cmpnei	r4,r4,2
    ff34:	324cb03a 	or	r6,r6,r9
    ff38:	11806215 	stw	r6,392(r2)
    ff3c:	41c04215 	stw	r7,264(r8)
    ff40:	20000b26 	beq	r4,zero,ff70 <__register_exitproc+0x78>
    ff44:	19000084 	addi	r4,r3,2
    ff48:	200890ba 	slli	r4,r4,2
    ff4c:	18c00044 	addi	r3,r3,1
    ff50:	10c00115 	stw	r3,4(r2)
    ff54:	1105883a 	add	r2,r2,r4
    ff58:	11400015 	stw	r5,0(r2)
    ff5c:	0005883a 	mov	r2,zero
    ff60:	f800283a 	ret
    ff64:	18805304 	addi	r2,r3,332
    ff68:	18805215 	stw	r2,328(r3)
    ff6c:	003fe606 	br	ff08 <__register_exitproc+0x10>
    ff70:	11006317 	ldw	r4,396(r2)
    ff74:	2252b03a 	or	r9,r4,r9
    ff78:	12406315 	stw	r9,396(r2)
    ff7c:	003ff106 	br	ff44 <__register_exitproc+0x4c>
    ff80:	00bfffc4 	movi	r2,-1
    ff84:	f800283a 	ret

0000ff88 <__call_exitprocs>:
    ff88:	defff704 	addi	sp,sp,-36
    ff8c:	00800074 	movhi	r2,1
    ff90:	dcc00315 	stw	r19,12(sp)
    ff94:	14c8ec17 	ldw	r19,9136(r2)
    ff98:	dc800215 	stw	r18,8(sp)
    ff9c:	dfc00815 	stw	ra,32(sp)
    ffa0:	9c805217 	ldw	r18,328(r19)
    ffa4:	ddc00715 	stw	r23,28(sp)
    ffa8:	dd800615 	stw	r22,24(sp)
    ffac:	dd400515 	stw	r21,20(sp)
    ffb0:	dd000415 	stw	r20,16(sp)
    ffb4:	dc400115 	stw	r17,4(sp)
    ffb8:	dc000015 	stw	r16,0(sp)
    ffbc:	90001026 	beq	r18,zero,10000 <__call_exitprocs+0x78>
    ffc0:	202b883a 	mov	r21,r4
    ffc4:	282d883a 	mov	r22,r5
    ffc8:	05000044 	movi	r20,1
    ffcc:	94000117 	ldw	r16,4(r18)
    ffd0:	847fffc4 	addi	r17,r16,-1
    ffd4:	88000a16 	blt	r17,zero,10000 <__call_exitprocs+0x78>
    ffd8:	84000044 	addi	r16,r16,1
    ffdc:	802090ba 	slli	r16,r16,2
    ffe0:	9421883a 	add	r16,r18,r16
    ffe4:	b0001126 	beq	r22,zero,1002c <__call_exitprocs+0xa4>
    ffe8:	80804017 	ldw	r2,256(r16)
    ffec:	15800f26 	beq	r2,r22,1002c <__call_exitprocs+0xa4>
    fff0:	8c7fffc4 	addi	r17,r17,-1
    fff4:	88bfffd8 	cmpnei	r2,r17,-1
    fff8:	843fff04 	addi	r16,r16,-4
    fffc:	103ff91e 	bne	r2,zero,ffe4 <__call_exitprocs+0x5c>
   10000:	dfc00817 	ldw	ra,32(sp)
   10004:	ddc00717 	ldw	r23,28(sp)
   10008:	dd800617 	ldw	r22,24(sp)
   1000c:	dd400517 	ldw	r21,20(sp)
   10010:	dd000417 	ldw	r20,16(sp)
   10014:	dcc00317 	ldw	r19,12(sp)
   10018:	dc800217 	ldw	r18,8(sp)
   1001c:	dc400117 	ldw	r17,4(sp)
   10020:	dc000017 	ldw	r16,0(sp)
   10024:	dec00904 	addi	sp,sp,36
   10028:	f800283a 	ret
   1002c:	90800117 	ldw	r2,4(r18)
   10030:	81800017 	ldw	r6,0(r16)
   10034:	10bfffc4 	addi	r2,r2,-1
   10038:	14401726 	beq	r2,r17,10098 <__call_exitprocs+0x110>
   1003c:	80000015 	stw	zero,0(r16)
   10040:	303feb26 	beq	r6,zero,fff0 <__call_exitprocs+0x68>
   10044:	a446983a 	sll	r3,r20,r17
   10048:	90806217 	ldw	r2,392(r18)
   1004c:	95c00117 	ldw	r23,4(r18)
   10050:	1884703a 	and	r2,r3,r2
   10054:	1000081e 	bne	r2,zero,10078 <__call_exitprocs+0xf0>
   10058:	303ee83a 	callr	r6
   1005c:	90c00117 	ldw	r3,4(r18)
   10060:	98805217 	ldw	r2,328(r19)
   10064:	1dc0011e 	bne	r3,r23,1006c <__call_exitprocs+0xe4>
   10068:	90bfe126 	beq	r18,r2,fff0 <__call_exitprocs+0x68>
   1006c:	103fe426 	beq	r2,zero,10000 <__call_exitprocs+0x78>
   10070:	1025883a 	mov	r18,r2
   10074:	003fd506 	br	ffcc <__call_exitprocs+0x44>
   10078:	90806317 	ldw	r2,396(r18)
   1007c:	81002017 	ldw	r4,128(r16)
   10080:	1886703a 	and	r3,r3,r2
   10084:	1800061e 	bne	r3,zero,100a0 <__call_exitprocs+0x118>
   10088:	200b883a 	mov	r5,r4
   1008c:	a809883a 	mov	r4,r21
   10090:	303ee83a 	callr	r6
   10094:	003ff106 	br	1005c <__call_exitprocs+0xd4>
   10098:	94400115 	stw	r17,4(r18)
   1009c:	003fe806 	br	10040 <__call_exitprocs+0xb8>
   100a0:	303ee83a 	callr	r6
   100a4:	003fed06 	br	1005c <__call_exitprocs+0xd4>
