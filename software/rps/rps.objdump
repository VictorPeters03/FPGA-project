
rps.elf:     file format elf32-littlenios2
rps.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000228

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000111fc memsz 0x000111fc flags r-x
    LOAD off    0x0001221c vaddr 0x0001121c paddr 0x00012eac align 2**12
         filesz 0x00001c90 memsz 0x00001c90 flags rw-
    LOAD off    0x00000b3c vaddr 0x00014b3c paddr 0x00014b3c align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001093c  00000228  00000228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006b8  00010b64  00010b64  00011b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c90  0001121c  00012eac  0001221c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00014b3c  00014b3c  00014b3c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00014c98  00014c98  00013eac  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00013eac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001100  00000000  00000000  00013ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0002f983  00000000  00000000  00014fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000bccd  00000000  00000000  00044963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00017907  00000000  00000000  00050630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002838  00000000  00000000  00067f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004571  00000000  00000000  0006a770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e80e  00000000  00000000  0006ece1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  0008d4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000025c0  00000000  00000000  0008d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00093359  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0009335c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00093361  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00093362  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00093363  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00093367  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009336b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0009336f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00093378  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00093381  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  0009338a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  00093399  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000a4f39  00000000  00000000  000933c5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000228 l    d  .text	00000000 .text
00010b64 l    d  .rodata	00000000 .rodata
0001121c l    d  .rwdata	00000000 .rwdata
00014b3c l    d  .bss	00000000 .bss
00014c98 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/school/Jaar-3/Periode-4/FPGA/FPGA-project/software/rps_bsp//obj/HAL/src/crt0.o
00000260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002cc4 l     F .text	000000c0 __sbprintf
00010cd0 l     O .rodata	00000010 blanks.1
00010cc0 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002ee8 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004b5c l     F .text	00000008 __fp_lock
00004b70 l     F .text	00000008 __fp_unlock
00004b78 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001121c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010d84 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007fec l     F .text	000000f4 __sprint_r.part.0
00009374 l     F .text	000000c0 __sbprintf
00010eb8 l     O .rodata	00000010 blanks.1
00010ea8 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fclose.c
000096c8 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000db20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000dc38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000dc9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ddb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0000dea0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e008 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e0f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e2d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012e9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e540 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e680 l     F .text	00000034 alt_dev_reg
00011d5c l     O .rwdata	00001060 JTAG_UART
00012dbc l     O .rwdata	00000030 AV_Config
00012dec l     O .rwdata	00000030 Audio_Subsystem_Audio
00012e1c l     O .rwdata	0000002c Char_LCD_16x2
00012e48 l     O .rwdata	0000002c Serial_Port
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e9a8 l     F .text	00000210 altera_avalon_jtag_uart_irq
0000ebb8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f1fc l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000fd04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ff60 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010230 l     F .text	0000003c alt_get_errno
0001026c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00014b6c g     O .bss	00000004 alt_instruction_exception_handler
000077cc g     F .text	00000070 _mprec_log10
000078b8 g     F .text	00000060 __any_on
00009b20 g     F .text	00000058 _isatty_r
00010d90 g     O .rodata	00000028 __mprec_tinytens
0000e210 g     F .text	0000007c alt_main
00000b1c g     F .text	000000cc _puts_r
00014b98 g     O .bss	00000100 alt_irq
00009c6c g     F .text	00000064 _lseek_r
00012eac g       *ABS*	00000000 __flash_rwdata_start
0000f36c g     F .text	00000040 alt_up_character_lcd_send_cmd
0000c5fc g     F .text	00000080 .hidden __eqdf2
00014c98 g       *ABS*	00000000 __alt_heap_start
0000a5d4 g     F .text	00000060 _kill_r
00000ae4 g     F .text	00000038 printf
00009fa0 g     F .text	0000006c _wcrtomb_r
0000a144 g     F .text	00000098 _signal_r
00007f88 g     F .text	0000005c __sseek
00004ec0 g     F .text	00000010 __sinit
00009e40 g     F .text	00000148 __swbuf_r
00009b78 g     F .text	00000074 _setlocale_r
00004ce0 g     F .text	00000078 __sfmoreglue
0000e2b0 g     F .text	00000024 __malloc_unlock
0000fa24 g     F .text	00000090 alt_up_rs232_read_fd
0000650c g     F .text	0000012c memmove
00004eac g     F .text	00000014 _cleanup
00006728 g     F .text	000000a4 _Balloc
000007d0 g     F .text	00000070 .hidden __fixsfsi
0000c67c g     F .text	000000e8 .hidden __gtdf2
00010678 g     F .text	00000024 altera_nios2_gen2_irq_init
000096bc g     F .text	0000000c __errno
0000f2f8 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000000c __reset
000058f4 g     F .text	00000008 __localeconv_l
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009ac0 g     F .text	00000060 _fstat_r
00014b48 g     O .bss	00000004 errno
00007f00 g     F .text	00000008 __seofread
00014b54 g     O .bss	00000004 alt_argv
0001ae74 g       *ABS*	00000000 _gp
0000dd94 g     F .text	00000020 getpid
00011bdc g     O .rwdata	00000180 alt_fd_list
0000feb0 g     F .text	00000090 alt_find_dev
0000640c g     F .text	00000100 memcpy
0000f51c g     F .text	00000050 alt_up_character_lcd_write_fd
00004b64 g     F .text	0000000c _cleanup_r
0000d9d8 g     F .text	000000b8 .hidden __floatsidf
00010034 g     F .text	0000007c alt_io_redirect
0000c764 g     F .text	000000e8 .hidden __ltdf2
00010b64 g       *ABS*	00000000 __DTOR_END__
0000f9b0 g     F .text	00000074 alt_up_rs232_read_data
00000be8 g     F .text	00000010 puts
0001085c g     F .text	00000098 alt_exception_cause_generated_bad_addr
00007728 g     F .text	000000a4 __ratio
00009358 g     F .text	0000001c __vfiprintf_internal
0000edb4 g     F .text	00000220 altera_avalon_jtag_uart_read
00000ab4 g     F .text	00000030 _printf_r
0000b310 g     F .text	00000064 .hidden __udivsi3
0000ddf0 g     F .text	000000b0 isatty
0000a1dc g     F .text	000000c4 _raise_r
000094f0 g     F .text	00000064 __assert_func
00010de0 g     O .rodata	000000c8 __mprec_tens
00014b44 g     O .bss	00000004 __malloc_top_pad
0000a634 g     F .text	00000004 _getpid_r
000058fc g     F .text	0000000c _localeconv_r
00006b98 g     F .text	000000b0 __i2b
00005320 g     F .text	00000494 __sfvwrite_r
0000a2a0 g     F .text	000000bc __sigtramp_r
00007e54 g     F .text	00000058 _sbrk_r
00009d20 g     F .text	00000064 _read_r
00012e94 g     O .rwdata	00000004 alt_max_fd
0000f92c g     F .text	00000044 alt_up_rs232_check_parity
00009788 g     F .text	00000070 _fclose_r
00004ad8 g     F .text	00000084 fflush
00014b40 g     O .bss	00000004 __malloc_max_sbrked_mem
000100b0 g     F .text	00000180 alt_irq_register
00000964 g     F .text	000000fc .hidden __extendsfdf2
0000b3f8 g     F .text	000008f0 .hidden __adddf3
000074bc g     F .text	00000108 __b2d
0000ac58 g     F .text	000005c4 .hidden __umoddi3
0000e130 g     F .text	000000e0 lseek
00012e74 g     O .rwdata	00000004 _global_impure_ptr
00007918 g     F .text	0000053c _realloc_r
00014c98 g       *ABS*	00000000 __bss_end
0001054c g     F .text	0000012c alt_tick
0000a638 g     F .text	00000620 .hidden __udivdi3
00009a24 g     F .text	00000024 _fputwc_r
00010db8 g     O .rodata	00000028 __mprec_bigtens
0000694c g     F .text	00000138 __s2b
0000a0d0 g     F .text	00000018 abort
0000da90 g     F .text	00000090 .hidden __floatunsidf
000071dc g     F .text	00000058 __mcmp
00004ee0 g     F .text	00000014 __fp_lock_all
00000714 g     F .text	000000bc denormalize_audio
00000528 g     F .text	000000cc check_KEYs
000104a8 g     F .text	000000a4 alt_alarm_stop
00014b5c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000cc alt_irq_handler
00011bb4 g     O .rwdata	00000028 alt_dev_null
0000f7bc g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000fce4 g     F .text	00000020 alt_dcache_flush_all
00006a84 g     F .text	00000064 __hi0bits
0000d958 g     F .text	00000080 .hidden __fixdfsi
00012eac g       *ABS*	00000000 __ram_rwdata_end
00012e8c g     O .rwdata	00000008 alt_dev_list
0000e57c g     F .text	00000104 write
0001121c g       *ABS*	00000000 __ram_rodata_end
0000dcd8 g     F .text	000000bc fstat
0000fab4 g     F .text	00000094 alt_up_rs232_write_fd
0000dedc g     F .text	0000012c kill
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000c764 g     F .text	000000e8 .hidden __ledf2
00006f0c g     F .text	00000148 __pow5mult
000080f8 g     F .text	00001260 ___vfiprintf_internal_r
0000b374 g     F .text	0000005c .hidden __umodsi3
00014c98 g       *ABS*	00000000 end
0000e8f4 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001c8 g     F .exceptions	00000060 alt_instruction_exception_entry
00010b64 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000f27c g     F .text	0000007c alt_avalon_timer_sc_init
00000a60 g     F .text	00000054 .hidden __clzsi2
0000efd4 g     F .text	00000228 altera_avalon_jtag_uart_write
00004ed0 g     F .text	00000004 __sfp_lock_acquire
0000633c g     F .text	000000d0 memchr
0000f420 g     F .text	00000080 alt_up_character_lcd_write
00000c90 g     F .text	00002018 ___vfprintf_internal_r
00005024 g     F .text	000002fc _free_r
0001101c g     O .rodata	00000180 _ctype_b
00009bec g     F .text	0000000c __locale_mb_cur_max
00010a44 g     F .text	00000120 __call_exitprocs
00012e7c g     O .rwdata	00000004 __malloc_sbrk_base
00000228 g     F .text	0000003c _start
00014b60 g     O .bss	00000004 _alt_tick_rate
00007054 g     F .text	00000188 __lshift
00014b64 g     O .bss	00000008 _alt_nticks
0000a418 g     F .text	000000a0 signal
0000e310 g     F .text	00000108 read
0000e6f0 g     F .text	000000a0 alt_sys_init
0000f66c g     F .text	0000008c alt_up_character_lcd_shift_display
00000840 g     F .text	00000124 .hidden __floatsisf
000109b4 g     F .text	00000090 __register_exitproc
0000f8f0 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000005f4 g     F .text	00000120 normalize_audio
00006c48 g     F .text	000002c4 __multiply
0000f6f8 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000ec58 g     F .text	00000068 altera_avalon_jtag_uart_close
0000b3d0 g     F .text	00000028 .hidden __mulsi3
0001121c g       *ABS*	00000000 __ram_rwdata_start
00010b64 g       *ABS*	00000000 __ram_rodata_start
00014b70 g     O .bss	00000028 __malloc_current_mallinfo
000075c4 g     F .text	00000164 __d2b
0000e790 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000107a4 g     F .text	000000b8 alt_get_fd
00009498 g     F .text	00000058 _close_r
0001093c g     F .text	00000078 memcmp
0000e850 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014c98 g       *ABS*	00000000 __alt_stack_base
0000e8a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002d84 g     F .text	00000164 __swsetup_r
0000bce8 g     F .text	00000914 .hidden __divdf3
00004d58 g     F .text	00000154 __sfp
0000783c g     F .text	0000007c __copybits
00011640 g     O .rwdata	00000408 __malloc_av_
00004edc g     F .text	00000004 __sinit_lock_release
0000c84c g     F .text	000007ac .hidden __muldf3
00007eac g     F .text	00000054 __sread
0000f850 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001069c g     F .text	00000108 alt_find_file
0000fd40 g     F .text	000000a8 alt_dev_llist_insert
0000e28c g     F .text	00000024 __malloc_lock
0000e488 g     F .text	000000b8 sbrk
00004a78 g     F .text	00000060 _fflush_r
00009568 g     F .text	00000154 _calloc_r
00014b3c g       *ABS*	00000000 __bss_start
00006638 g     F .text	000000f0 memset
00000264 g     F .text	000002c4 main
00014b58 g     O .bss	00000004 alt_envp
00014b3c g     O .bss	00000004 __malloc_max_total_mem
0000e7f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009f88 g     F .text	00000018 __swbuf
0000f5e0 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00007fe4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
000097f8 g     F .text	00000070 fclose
00003108 g     F .text	00001748 _dtoa_r
00005b5c g     F .text	000007e0 _malloc_r
0000a0a0 g     F .text	00000030 __ascii_wctomb
00012e98 g     O .rwdata	00000004 alt_errno
00009868 g     F .text	00000020 _fiprintf_r
0000a4b8 g     F .text	00000060 _init_signal
000057b4 g     F .text	00000098 _fwalk
00009cd0 g     F .text	0000000c _mbtowc_r
0000b21c g     F .text	00000080 .hidden __divsi3
0000f3e4 g     F .text	0000003c alt_up_character_lcd_open_dev
00004f08 g     F .text	0000011c _malloc_trim_r
00010b64 g       *ABS*	00000000 __CTOR_END__
0000f3ac g     F .text	00000038 alt_up_character_lcd_init
00009d84 g     F .text	000000b8 strcmp
00010b64 g       *ABS*	00000000 __flash_rodata_start
00010b64 g       *ABS*	00000000 __DTOR_LIST__
0000fb48 g     F .text	0000003c alt_up_rs232_open_dev
0000c5fc g     F .text	00000080 .hidden __nedf2
0000e6b4 g     F .text	0000003c alt_irq_init
0000e418 g     F .text	00000070 alt_release_fd
0000f784 g     F .text	00000038 alt_up_character_lcd_cursor_off
00010b78 g     O .rodata	00000100 .hidden __clz_tab
00014b4c g     O .bss	00000004 _PathLocale
000108f4 g     F .text	00000014 atexit
00009434 g     F .text	00000064 _write_r
00009bf8 g     F .text	00000074 setlocale
00012e78 g     O .rwdata	00000004 _impure_ptr
00014b50 g     O .bss	00000004 alt_argc
00004850 g     F .text	00000228 __sflush_r
0000fe4c g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00009cdc g     F .text	00000044 __ascii_mbtowc
00007460 g     F .text	0000005c __ulp
00004ef4 g     F .text	00000014 __fp_unlock_all
00012e84 g     O .rwdata	00000008 alt_fs_list
0000f7f4 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000f970 g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005908 g     F .text	0000000c localeconv
00005ac4 g     F .text	00000098 __swhatbuf_r
00012eac g       *ABS*	00000000 _edata
00014c98 g       *ABS*	00000000 _end
000098c0 g     F .text	00000164 __fputwc
00000228 g       *ABS*	00000000 __ram_exceptions_end
0000ecc0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00007f08 g     F .text	00000080 __swrite
00012e80 g     O .rwdata	00000004 __malloc_trim_threshold
00010908 g     F .text	00000034 exit
00009888 g     F .text	00000038 fiprintf
00009e3c g     F .text	00000004 _vfiprintf_r
0000584c g     F .text	000000a8 _fwalk_reent
00007234 g     F .text	0000022c __mdiff
0000b29c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004ed4 g     F .text	00000004 __sfp_lock_release
0000f4a0 g     F .text	0000007c alt_up_character_lcd_string
00010f18 g     O .rodata	00000101 _ctype_
0000d904 g     F .text	00000054 .hidden __unorddf2
0000dc64 g     F .text	00000038 _exit
0000fb84 g     F .text	00000160 alt_alarm_start
00005914 g     F .text	000001b0 __smakebuf_r
00000bf8 g     F .text	00000098 strlen
0000a0e8 g     F .text	0000005c _init_signal_r
00010348 g     F .text	00000160 open
0000c67c g     F .text	000000e8 .hidden __gedf2
00009554 g     F .text	00000014 __assert
000080e0 g     F .text	00000018 __sprint_r
0000ff40 g     F .text	00000020 alt_icache_flush_all
0000f56c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00012ea0 g     O .rwdata	00000004 alt_priority_mask
00002ca8 g     F .text	0000001c __vfprintf_internal
0000a094 g     F .text	0000000c _wctomb_r
0000cff8 g     F .text	0000090c .hidden __subdf3
00006ae8 g     F .text	000000b0 __lo0bits
00012ea4 g     O .rwdata	00000008 alt_alarm_list
0000fde8 g     F .text	00000064 _do_ctors
0000a518 g     F .text	000000bc __sigtramp
0000f8b0 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000a00c g     F .text	00000088 wcrtomb
0000db5c g     F .text	000000dc close
00011a48 g     O .rwdata	0000016c __global_locale
0000e070 g     F .text	00000084 alt_load
00009a48 g     F .text	00000078 fputwc
0000a35c g     F .text	000000bc raise
00004ed8 g     F .text	00000004 __sinit_lock_acquire
000067f0 g     F .text	0000015c __multadd
000067cc g     F .text	00000024 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408a14 	ori	at,at,552
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	00800074 	movhi	r2,1
 148:	1885883a 	add	r2,r3,r2
 14c:	10d2e617 	ldw	r3,19352(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	00800074 	movhi	r2,1
 15c:	2085883a 	add	r2,r4,r2
 160:	1092e717 	ldw	r2,19356(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	0001883a 	nop
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1dc:	00bfffc4 	movi	r2,-1
 1e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 1e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1e8:	d0a73e17 	ldw	r2,-25352(gp)
 1ec:	10000726 	beq	r2,zero,20c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f0:	d0a73e17 	ldw	r2,-25352(gp)
 1f4:	e0ffff17 	ldw	r3,-4(fp)
 1f8:	e1bffe17 	ldw	r6,-8(fp)
 1fc:	e17ffd17 	ldw	r5,-12(fp)
 200:	1809883a 	mov	r4,r3
 204:	103ee83a 	callr	r2
 208:	00000206 	br	214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 20c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 210:	0005883a 	mov	r2,zero
}
 214:	e037883a 	mov	sp,fp
 218:	dfc00117 	ldw	ra,4(sp)
 21c:	df000017 	ldw	fp,0(sp)
 220:	dec00204 	addi	sp,sp,8
 224:	f800283a 	ret

Disassembly of section .text:

00000228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     228:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     22c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     230:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     234:	d6ab9d14 	ori	gp,gp,44660
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     238:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     23c:	1092cf14 	ori	r2,r2,19260

    movhi r3, %hi(__bss_end)
     240:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     244:	18d32614 	ori	r3,r3,19608

    beq r2, r3, 1f
     248:	10c00326 	beq	r2,r3,258 <_start+0x30>

0:
    stw zero, (r2)
     24c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     254:	10fffd36 	bltu	r2,r3,24c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     258:	000e0700 	call	e070 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     25c:	000e2100 	call	e210 <alt_main>

00000260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     260:	003fff06 	br	260 <alt_after_alt_main>

00000264 <main>:
 * 	1. records audio for 10 seconds when KEY[0] is pressed. LEDR[0] is lit
 *	   while recording.
 * 	2. plays the recorded audio when KEY[1] is pressed. LEDR[1] is lit while
 *	   playing.
 ******************************************************************************/
int main(void) {
     264:	defffd04 	addi	sp,sp,-12
     268:	dfc00215 	stw	ra,8(sp)
     26c:	df000115 	stw	fp,4(sp)
     270:	dc000015 	stw	r16,0(sp)
     274:	df000104 	addi	fp,sp,4
     278:	023ffbb4 	movhi	r8,65518
     27c:	421af904 	addi	r8,r8,27620
     280:	da37883a 	add	sp,sp,r8
    /* Declare volatile pointers to I/O registers (volatile means that IO load
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile int * red_LED_ptr = (int *)LED_BASE;
     284:	00bfc834 	movhi	r2,65312
     288:	e0bffc15 	stw	r2,-16(fp)
    volatile int * audio_ptr   = (int *)AUDIO_BASE;
     28c:	00bfc834 	movhi	r2,65312
     290:	108c1004 	addi	r2,r2,12352
     294:	e0bffb15 	stw	r2,-20(fp)

    /* used for audio record/playback */
    int fifospace;
    int record = 0, play = 0, buffer_index = 0;
     298:	e03ffa15 	stw	zero,-24(fp)
     29c:	e03ff915 	stw	zero,-28(fp)
     2a0:	e03ff815 	stw	zero,-32(fp)
    float left_buffer[BUF_SIZE];
    int right_buffer[BUF_SIZE];
    float normalized_buffer[BUF_SIZE];

    /* read and echo audio data */
    record = 0;
     2a4:	e03ffa15 	stw	zero,-24(fp)
    play   = 0;
     2a8:	e03ff915 	stw	zero,-28(fp)

    while (1) {
        check_KEYs(&record, &play, &buffer_index);
     2ac:	e13ff804 	addi	r4,fp,-32
     2b0:	e0fff904 	addi	r3,fp,-28
     2b4:	e0bffa04 	addi	r2,fp,-24
     2b8:	200d883a 	mov	r6,r4
     2bc:	180b883a 	mov	r5,r3
     2c0:	1009883a 	mov	r4,r2
     2c4:	00005280 	call	528 <check_KEYs>
        if (record) {
     2c8:	e0bffa17 	ldw	r2,-24(fp)
     2cc:	10005a26 	beq	r2,zero,438 <main+0x1d4>
            *(red_LED_ptr) = 0x1; // turn on LEDR[0]
     2d0:	e0bffc17 	ldw	r2,-16(fp)
     2d4:	00c00044 	movi	r3,1
     2d8:	10c00015 	stw	r3,0(r2)

            fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     2dc:	e0bffb17 	ldw	r2,-20(fp)
     2e0:	10800117 	ldw	r2,4(r2)
     2e4:	e0bffe15 	stw	r2,-8(fp)
            if ((fifospace & 0x000000FF) > BUF_THRESHOLD) // check RARC
     2e8:	e0bffe17 	ldw	r2,-8(fp)
     2ec:	10803fcc 	andi	r2,r2,255
     2f0:	10801850 	cmplti	r2,r2,97
     2f4:	103fed1e 	bne	r2,zero,2ac <main+0x48>
            {
                // store data until the the audio-in FIFO is empty or the buffer is full
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
     2f8:	00004706 	br	418 <main+0x1b4>
                    left_buffer[buffer_index]  = *(audio_ptr + 2);
     2fc:	e0bffb17 	ldw	r2,-20(fp)
     300:	10800204 	addi	r2,r2,8
     304:	10800017 	ldw	r2,0(r2)
     308:	e43ff817 	ldw	r16,-32(fp)
     30c:	1009883a 	mov	r4,r2
     310:	00008400 	call	840 <__floatsisf>
     314:	1009883a 	mov	r4,r2
     318:	00bffeb4 	movhi	r2,65530
     31c:	1088f904 	addi	r2,r2,9188
     320:	10bfff04 	addi	r2,r2,-4
     324:	1707883a 	add	r3,r2,fp
     328:	800490ba 	slli	r2,r16,2
     32c:	1885883a 	add	r2,r3,r2
     330:	11000015 	stw	r4,0(r2)
                    //printf("%d\n", *(audio_ptr + 2));
                    //right_buffer[buffer_index] = *(audio_ptr + 3);
                    right_buffer[buffer_index] = *(audio_ptr + 3);
     334:	e17ff817 	ldw	r5,-32(fp)
     338:	e0bffb17 	ldw	r2,-20(fp)
     33c:	10c00317 	ldw	r3,12(r2)
     340:	00bffd34 	movhi	r2,65524
     344:	1091f904 	addi	r2,r2,18404
     348:	10bfff04 	addi	r2,r2,-4
     34c:	1709883a 	add	r4,r2,fp
     350:	280490ba 	slli	r2,r5,2
     354:	2085883a 	add	r2,r4,r2
     358:	10c00015 	stw	r3,0(r2)
                    ++buffer_index;
     35c:	e0bff817 	ldw	r2,-32(fp)
     360:	10800044 	addi	r2,r2,1
     364:	e0bff815 	stw	r2,-32(fp)

                    if (buffer_index == BUF_SIZE) {
     368:	e0fff817 	ldw	r3,-32(fp)
     36c:	00800074 	movhi	r2,1
     370:	109dc004 	addi	r2,r2,30464
     374:	1880251e 	bne	r3,r2,40c <main+0x1a8>
                        // done recording
                        record = 0;
     378:	e03ffa15 	stw	zero,-24(fp)
                        *(red_LED_ptr) = 0x0; // turn off LEDR
     37c:	e0bffc17 	ldw	r2,-16(fp)
     380:	10000015 	stw	zero,0(r2)
                        *(red_LED_ptr) = 0x4;
     384:	e0bffc17 	ldw	r2,-16(fp)
     388:	00c00104 	movi	r3,4
     38c:	10c00015 	stw	r3,0(r2)
                        //normalize_audio(left_buffer, normalized_buffer, BUF_SIZE);
                        //denormalize_audio(left_buffer, normalized_buffer, BUF_SIZE);
                        *(red_LED_ptr) = 0x0;
     390:	e0bffc17 	ldw	r2,-16(fp)
     394:	10000015 	stw	zero,0(r2)
                        for (int i = 48000; i < 54000; i++) {
     398:	00aee014 	movui	r2,48000
     39c:	e0bffd15 	stw	r2,-12(fp)
     3a0:	00001406 	br	3f4 <main+0x190>
                            printf("%f\n", left_buffer[i]);
     3a4:	00bffeb4 	movhi	r2,65530
     3a8:	1088f904 	addi	r2,r2,9188
     3ac:	10bfff04 	addi	r2,r2,-4
     3b0:	1707883a 	add	r3,r2,fp
     3b4:	e0bffd17 	ldw	r2,-12(fp)
     3b8:	100490ba 	slli	r2,r2,2
     3bc:	1885883a 	add	r2,r3,r2
     3c0:	10c00017 	ldw	r3,0(r2)
     3c4:	1809883a 	mov	r4,r3
     3c8:	00009640 	call	964 <__extendsfdf2>
     3cc:	100d883a 	mov	r6,r2
     3d0:	180f883a 	mov	r7,r3
     3d4:	300b883a 	mov	r5,r6
     3d8:	380d883a 	mov	r6,r7
     3dc:	01000074 	movhi	r4,1
     3e0:	2102d904 	addi	r4,r4,2916
     3e4:	0000ae40 	call	ae4 <printf>
                        for (int i = 48000; i < 54000; i++) {
     3e8:	e0bffd17 	ldw	r2,-12(fp)
     3ec:	10800044 	addi	r2,r2,1
     3f0:	e0bffd15 	stw	r2,-12(fp)
     3f4:	e0bffd17 	ldw	r2,-12(fp)
     3f8:	00f4bbd4 	movui	r3,53999
     3fc:	18bfe90e 	bge	r3,r2,3a4 <main+0x140>
                        }
                        printf("\n-------------\n");
     400:	01000074 	movhi	r4,1
     404:	2102da04 	addi	r4,r4,2920
     408:	0000be80 	call	be8 <puts>
                    }
                    fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     40c:	e0bffb17 	ldw	r2,-20(fp)
     410:	10800117 	ldw	r2,4(r2)
     414:	e0bffe15 	stw	r2,-8(fp)
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
     418:	e0bffe17 	ldw	r2,-8(fp)
     41c:	10803fcc 	andi	r2,r2,255
     420:	103fa226 	beq	r2,zero,2ac <main+0x48>
     424:	e0fff817 	ldw	r3,-32(fp)
     428:	00800074 	movhi	r2,1
     42c:	109dbfc4 	addi	r2,r2,30463
     430:	10ffb20e 	bge	r2,r3,2fc <main+0x98>
     434:	003f9d06 	br	2ac <main+0x48>
                }
            }
        } else if (play) {
     438:	e0bff917 	ldw	r2,-28(fp)
     43c:	103f9b26 	beq	r2,zero,2ac <main+0x48>
            //buffer_index = 0; // reset buffer index for playback
            //denormalize_audio(normalized_buffer, left_buffer, BUF_SIZE);
            *(red_LED_ptr) = 0x2; // turn on LEDR_1
     440:	e0bffc17 	ldw	r2,-16(fp)
     444:	00c00084 	movi	r3,2
     448:	10c00015 	stw	r3,0(r2)
            fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     44c:	e0bffb17 	ldw	r2,-20(fp)
     450:	10800117 	ldw	r2,4(r2)
     454:	e0bffe15 	stw	r2,-8(fp)
            if ((fifospace & 0x00FF0000) > BUF_THRESHOLD) // check WSRC
     458:	e0bffe17 	ldw	r2,-8(fp)
     45c:	10803fec 	andhi	r2,r2,255
     460:	10801850 	cmplti	r2,r2,97
     464:	103f911e 	bne	r2,zero,2ac <main+0x48>
            {
                // output data until the buffer is empty or the audio-out FIFO is full
                while ((fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE)) {
     468:	00002706 	br	508 <main+0x2a4>
                    *(audio_ptr + 2) = left_buffer[buffer_index];
     46c:	e13ff817 	ldw	r4,-32(fp)
     470:	00bffeb4 	movhi	r2,65530
     474:	1088f904 	addi	r2,r2,9188
     478:	10bfff04 	addi	r2,r2,-4
     47c:	1707883a 	add	r3,r2,fp
     480:	200490ba 	slli	r2,r4,2
     484:	1885883a 	add	r2,r3,r2
     488:	10c00017 	ldw	r3,0(r2)
     48c:	e0bffb17 	ldw	r2,-20(fp)
     490:	14000204 	addi	r16,r2,8
     494:	1809883a 	mov	r4,r3
     498:	00007d00 	call	7d0 <__fixsfsi>
     49c:	80800015 	stw	r2,0(r16)
                    *(audio_ptr + 3) = left_buffer[buffer_index];
     4a0:	e13ff817 	ldw	r4,-32(fp)
     4a4:	00bffeb4 	movhi	r2,65530
     4a8:	1088f904 	addi	r2,r2,9188
     4ac:	10bfff04 	addi	r2,r2,-4
     4b0:	1707883a 	add	r3,r2,fp
     4b4:	200490ba 	slli	r2,r4,2
     4b8:	1885883a 	add	r2,r3,r2
     4bc:	10c00017 	ldw	r3,0(r2)
     4c0:	e0bffb17 	ldw	r2,-20(fp)
     4c4:	14000304 	addi	r16,r2,12
     4c8:	1809883a 	mov	r4,r3
     4cc:	00007d00 	call	7d0 <__fixsfsi>
     4d0:	80800015 	stw	r2,0(r16)
                    ++buffer_index;
     4d4:	e0bff817 	ldw	r2,-32(fp)
     4d8:	10800044 	addi	r2,r2,1
     4dc:	e0bff815 	stw	r2,-32(fp)

                    if (buffer_index == BUF_SIZE) {
     4e0:	e0fff817 	ldw	r3,-32(fp)
     4e4:	00800074 	movhi	r2,1
     4e8:	109dc004 	addi	r2,r2,30464
     4ec:	1880031e 	bne	r3,r2,4fc <main+0x298>
                        // done playback
                        play = 0;
     4f0:	e03ff915 	stw	zero,-28(fp)
                        *(red_LED_ptr) = 0x0; // turn off LEDR
     4f4:	e0bffc17 	ldw	r2,-16(fp)
     4f8:	10000015 	stw	zero,0(r2)
                    }
                    fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     4fc:	e0bffb17 	ldw	r2,-20(fp)
     500:	10800117 	ldw	r2,4(r2)
     504:	e0bffe15 	stw	r2,-8(fp)
                while ((fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE)) {
     508:	e0bffe17 	ldw	r2,-8(fp)
     50c:	10803fec 	andhi	r2,r2,255
     510:	103f6626 	beq	r2,zero,2ac <main+0x48>
     514:	e0fff817 	ldw	r3,-32(fp)
     518:	00800074 	movhi	r2,1
     51c:	109dbfc4 	addi	r2,r2,30463
     520:	10ffd20e 	bge	r2,r3,46c <main+0x208>
        check_KEYs(&record, &play, &buffer_index);
     524:	003f6106 	br	2ac <main+0x48>

00000528 <check_KEYs>:
}

/****************************************************************************************
 * Subroutine to read KEYs
****************************************************************************************/
void check_KEYs(int * KEY0, int * KEY1, int * counter) {
     528:	defff904 	addi	sp,sp,-28
     52c:	df000615 	stw	fp,24(sp)
     530:	df000604 	addi	fp,sp,24
     534:	e13ffc15 	stw	r4,-16(fp)
     538:	e17ffb15 	stw	r5,-20(fp)
     53c:	e1bffa15 	stw	r6,-24(fp)
    volatile int * KEY_ptr   = (int *)KEY_BASE;
     540:	00bfc834 	movhi	r2,65312
     544:	10801404 	addi	r2,r2,80
     548:	e0bfff15 	stw	r2,-4(fp)
    volatile int * audio_ptr = (int *)AUDIO_BASE;
     54c:	00bfc834 	movhi	r2,65312
     550:	108c1004 	addi	r2,r2,12352
     554:	e0bffe15 	stw	r2,-8(fp)
    int KEY_value;

    KEY_value = *(KEY_ptr); // read the pushbutton KEY values
     558:	e0bfff17 	ldw	r2,-4(fp)
     55c:	10800017 	ldw	r2,0(r2)
     560:	e0bffd15 	stw	r2,-12(fp)
    while (*KEY_ptr); // wait for pushbutton KEY release
     564:	0001883a 	nop
     568:	e0bfff17 	ldw	r2,-4(fp)
     56c:	10800017 	ldw	r2,0(r2)
     570:	103ffd1e 	bne	r2,zero,568 <check_KEYs+0x40>

    if (KEY_value == 0x1) // check KEY0
     574:	e0bffd17 	ldw	r2,-12(fp)
     578:	10800058 	cmpnei	r2,r2,1
     57c:	10000b1e 	bne	r2,zero,5ac <check_KEYs+0x84>
    {
        // reset counter to start recording
        *counter = 0;
     580:	e0bffa17 	ldw	r2,-24(fp)
     584:	10000015 	stw	zero,0(r2)
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
     588:	e0bffe17 	ldw	r2,-8(fp)
     58c:	00c00104 	movi	r3,4
     590:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
     594:	e0bffe17 	ldw	r2,-8(fp)
     598:	10000015 	stw	zero,0(r2)

        *KEY0 = 1;
     59c:	e0bffc17 	ldw	r2,-16(fp)
     5a0:	00c00044 	movi	r3,1
     5a4:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x8;
        *(audio_ptr) = 0x0;

        *KEY1 = 1;
    }
}
     5a8:	00000d06 	br	5e0 <check_KEYs+0xb8>
    else if (KEY_value == 0x2) // check KEY1
     5ac:	e0bffd17 	ldw	r2,-12(fp)
     5b0:	10800098 	cmpnei	r2,r2,2
     5b4:	10000a1e 	bne	r2,zero,5e0 <check_KEYs+0xb8>
        *counter = 0;
     5b8:	e0bffa17 	ldw	r2,-24(fp)
     5bc:	10000015 	stw	zero,0(r2)
        *(audio_ptr) = 0x8;
     5c0:	e0bffe17 	ldw	r2,-8(fp)
     5c4:	00c00204 	movi	r3,8
     5c8:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
     5cc:	e0bffe17 	ldw	r2,-8(fp)
     5d0:	10000015 	stw	zero,0(r2)
        *KEY1 = 1;
     5d4:	e0bffb17 	ldw	r2,-20(fp)
     5d8:	00c00044 	movi	r3,1
     5dc:	10c00015 	stw	r3,0(r2)
}
     5e0:	0001883a 	nop
     5e4:	e037883a 	mov	sp,fp
     5e8:	df000017 	ldw	fp,0(sp)
     5ec:	dec00104 	addi	sp,sp,4
     5f0:	f800283a 	ret

000005f4 <normalize_audio>:

void normalize_audio(short int *input_buffer, float *output_buffer, int size) {
     5f4:	defff604 	addi	sp,sp,-40
     5f8:	dfc00915 	stw	ra,36(sp)
     5fc:	df000815 	stw	fp,32(sp)
     600:	dc000715 	stw	r16,28(sp)
     604:	df000804 	addi	fp,sp,32
     608:	e13ffa15 	stw	r4,-24(fp)
     60c:	e17ff915 	stw	r5,-28(fp)
     610:	e1bff815 	stw	r6,-32(fp)
    int max_val = 0;
     614:	e03ffe15 	stw	zero,-8(fp)
    // Find the maximum absolute value in the input buffer
    for (int i = 0; i < size; i++) {
     618:	e03ffd15 	stw	zero,-12(fp)
     61c:	00001506 	br	674 <normalize_audio+0x80>
        int abs_val = abs(input_buffer[i]);
     620:	e0bffd17 	ldw	r2,-12(fp)
     624:	1085883a 	add	r2,r2,r2
     628:	1007883a 	mov	r3,r2
     62c:	e0bffa17 	ldw	r2,-24(fp)
     630:	10c5883a 	add	r2,r2,r3
     634:	1080000b 	ldhu	r2,0(r2)
     638:	10ffffcc 	andi	r3,r2,65535
     63c:	18e0001c 	xori	r3,r3,32768
     640:	18e00004 	addi	r3,r3,-32768
     644:	1800010e 	bge	r3,zero,64c <normalize_audio+0x58>
     648:	0085c83a 	sub	r2,zero,r2
     64c:	10bfffcc 	andi	r2,r2,65535
     650:	e0bffb15 	stw	r2,-20(fp)
        if (abs_val > max_val) {
     654:	e0bffb17 	ldw	r2,-20(fp)
     658:	e0fffe17 	ldw	r3,-8(fp)
     65c:	1880020e 	bge	r3,r2,668 <normalize_audio+0x74>
            max_val = abs_val;
     660:	e0bffb17 	ldw	r2,-20(fp)
     664:	e0bffe15 	stw	r2,-8(fp)
    for (int i = 0; i < size; i++) {
     668:	e0bffd17 	ldw	r2,-12(fp)
     66c:	10800044 	addi	r2,r2,1
     670:	e0bffd15 	stw	r2,-12(fp)
     674:	e0fffd17 	ldw	r3,-12(fp)
     678:	e0bff817 	ldw	r2,-32(fp)
     67c:	18bfe816 	blt	r3,r2,620 <normalize_audio+0x2c>
        }
    }
    // Normalize the input buffer to the range [-1, 1]
    for (int i = 0; i < size; i++) {
     680:	e03ffc15 	stw	zero,-16(fp)
     684:	00001806 	br	6e8 <normalize_audio+0xf4>
        output_buffer[i] = (float)input_buffer[i] / max_val;
     688:	e0bffc17 	ldw	r2,-16(fp)
     68c:	1085883a 	add	r2,r2,r2
     690:	1007883a 	mov	r3,r2
     694:	e0bffa17 	ldw	r2,-24(fp)
     698:	10c5883a 	add	r2,r2,r3
     69c:	1080000b 	ldhu	r2,0(r2)
     6a0:	10bfffcc 	andi	r2,r2,65535
     6a4:	10a0001c 	xori	r2,r2,32768
     6a8:	10a00004 	addi	r2,r2,-32768
     6ac:	1009883a 	mov	r4,r2
     6b0:	00008400 	call	840 <__floatsisf>
     6b4:	1021883a 	mov	r16,r2
     6b8:	e13ffe17 	ldw	r4,-8(fp)
     6bc:	00008400 	call	840 <__floatsisf>
     6c0:	1009883a 	mov	r4,r2
     6c4:	e0bffc17 	ldw	r2,-16(fp)
     6c8:	100490ba 	slli	r2,r2,2
     6cc:	e0fff917 	ldw	r3,-28(fp)
     6d0:	1885883a 	add	r2,r3,r2
     6d4:	8107fff2 	custom	255,r3,r16,r4
     6d8:	10c00015 	stw	r3,0(r2)
    for (int i = 0; i < size; i++) {
     6dc:	e0bffc17 	ldw	r2,-16(fp)
     6e0:	10800044 	addi	r2,r2,1
     6e4:	e0bffc15 	stw	r2,-16(fp)
     6e8:	e0fffc17 	ldw	r3,-16(fp)
     6ec:	e0bff817 	ldw	r2,-32(fp)
     6f0:	18bfe516 	blt	r3,r2,688 <normalize_audio+0x94>
    }
}
     6f4:	0001883a 	nop
     6f8:	0001883a 	nop
     6fc:	e6ffff04 	addi	sp,fp,-4
     700:	dfc00217 	ldw	ra,8(sp)
     704:	df000117 	ldw	fp,4(sp)
     708:	dc000017 	ldw	r16,0(sp)
     70c:	dec00304 	addi	sp,sp,12
     710:	f800283a 	ret

00000714 <denormalize_audio>:

void denormalize_audio(short int *input_buffer, float *output_buffer, int size) {
     714:	defff804 	addi	sp,sp,-32
     718:	dfc00715 	stw	ra,28(sp)
     71c:	df000615 	stw	fp,24(sp)
     720:	dc000515 	stw	r16,20(sp)
     724:	df000604 	addi	fp,sp,24
     728:	e13ffc15 	stw	r4,-16(fp)
     72c:	e17ffb15 	stw	r5,-20(fp)
     730:	e1bffa15 	stw	r6,-24(fp)
    int max_val = 32767; // Assuming 16-bit audio
     734:	009fffc4 	movi	r2,32767
     738:	e0bffd15 	stw	r2,-12(fp)
    // Denormalize the input buffer back to the range of the original audio
    for (int i = 0; i < size; i++) {
     73c:	e03ffe15 	stw	zero,-8(fp)
     740:	00001806 	br	7a4 <denormalize_audio+0x90>
        output_buffer[i] = (float)input_buffer[i] * max_val;
     744:	e0bffe17 	ldw	r2,-8(fp)
     748:	1085883a 	add	r2,r2,r2
     74c:	1007883a 	mov	r3,r2
     750:	e0bffc17 	ldw	r2,-16(fp)
     754:	10c5883a 	add	r2,r2,r3
     758:	1080000b 	ldhu	r2,0(r2)
     75c:	10bfffcc 	andi	r2,r2,65535
     760:	10a0001c 	xori	r2,r2,32768
     764:	10a00004 	addi	r2,r2,-32768
     768:	1009883a 	mov	r4,r2
     76c:	00008400 	call	840 <__floatsisf>
     770:	1021883a 	mov	r16,r2
     774:	e13ffd17 	ldw	r4,-12(fp)
     778:	00008400 	call	840 <__floatsisf>
     77c:	1009883a 	mov	r4,r2
     780:	e0bffe17 	ldw	r2,-8(fp)
     784:	100490ba 	slli	r2,r2,2
     788:	e0fffb17 	ldw	r3,-20(fp)
     78c:	1885883a 	add	r2,r3,r2
     790:	8107ff32 	custom	252,r3,r16,r4
     794:	10c00015 	stw	r3,0(r2)
    for (int i = 0; i < size; i++) {
     798:	e0bffe17 	ldw	r2,-8(fp)
     79c:	10800044 	addi	r2,r2,1
     7a0:	e0bffe15 	stw	r2,-8(fp)
     7a4:	e0fffe17 	ldw	r3,-8(fp)
     7a8:	e0bffa17 	ldw	r2,-24(fp)
     7ac:	18bfe516 	blt	r3,r2,744 <denormalize_audio+0x30>
    }
}
     7b0:	0001883a 	nop
     7b4:	0001883a 	nop
     7b8:	e6ffff04 	addi	sp,fp,-4
     7bc:	dfc00217 	ldw	ra,8(sp)
     7c0:	df000117 	ldw	fp,4(sp)
     7c4:	dc000017 	ldw	r16,0(sp)
     7c8:	dec00304 	addi	sp,sp,12
     7cc:	f800283a 	ret

000007d0 <__fixsfsi>:
     7d0:	200ad5fa 	srli	r5,r4,23
     7d4:	00c02034 	movhi	r3,128
     7d8:	18ffffc4 	addi	r3,r3,-1
     7dc:	29403fcc 	andi	r5,r5,255
     7e0:	29801fd0 	cmplti	r6,r5,127
     7e4:	200ed7fa 	srli	r7,r4,31
     7e8:	1906703a 	and	r3,r3,r4
     7ec:	3000061e 	bne	r6,zero,808 <__fixsfsi+0x38>
     7f0:	28802790 	cmplti	r2,r5,158
     7f4:	1000061e 	bne	r2,zero,810 <__fixsfsi+0x40>
     7f8:	00a00034 	movhi	r2,32768
     7fc:	10bfffc4 	addi	r2,r2,-1
     800:	3885883a 	add	r2,r7,r2
     804:	f800283a 	ret
     808:	0005883a 	mov	r2,zero
     80c:	f800283a 	ret
     810:	28802590 	cmplti	r2,r5,150
     814:	18c02034 	orhi	r3,r3,128
     818:	1000051e 	bne	r2,zero,830 <__fixsfsi+0x60>
     81c:	28bfda84 	addi	r2,r5,-150
     820:	1884983a 	sll	r2,r3,r2
     824:	383ff926 	beq	r7,zero,80c <__fixsfsi+0x3c>
     828:	0085c83a 	sub	r2,zero,r2
     82c:	f800283a 	ret
     830:	00802584 	movi	r2,150
     834:	1145c83a 	sub	r2,r2,r5
     838:	1884d83a 	srl	r2,r3,r2
     83c:	003ff906 	br	824 <__fixsfsi+0x54>

00000840 <__floatsisf>:
     840:	defffd04 	addi	sp,sp,-12
     844:	dfc00215 	stw	ra,8(sp)
     848:	dc400115 	stw	r17,4(sp)
     84c:	dc000015 	stw	r16,0(sp)
     850:	20001226 	beq	r4,zero,89c <__floatsisf+0x5c>
     854:	2022d7fa 	srli	r17,r4,31
     858:	2021883a 	mov	r16,r4
     85c:	20003816 	blt	r4,zero,940 <__floatsisf+0x100>
     860:	8009883a 	mov	r4,r16
     864:	0000a600 	call	a60 <__clzsi2>
     868:	1009883a 	mov	r4,r2
     86c:	00802784 	movi	r2,158
     870:	1105c83a 	sub	r2,r2,r4
     874:	10c025c8 	cmpgei	r3,r2,151
     878:	1800151e 	bne	r3,zero,8d0 <__floatsisf+0x90>
     87c:	20c00248 	cmpgei	r3,r4,9
     880:	18003126 	beq	r3,zero,948 <__floatsisf+0x108>
     884:	213ffe04 	addi	r4,r4,-8
     888:	8120983a 	sll	r16,r16,r4
     88c:	00c02034 	movhi	r3,128
     890:	18ffffc4 	addi	r3,r3,-1
     894:	80e0703a 	and	r16,r16,r3
     898:	00000306 	br	8a8 <__floatsisf+0x68>
     89c:	0023883a 	mov	r17,zero
     8a0:	0005883a 	mov	r2,zero
     8a4:	0021883a 	mov	r16,zero
     8a8:	10803fcc 	andi	r2,r2,255
     8ac:	100495fa 	slli	r2,r2,23
     8b0:	882297fa 	slli	r17,r17,31
     8b4:	1404b03a 	or	r2,r2,r16
     8b8:	1444b03a 	or	r2,r2,r17
     8bc:	dfc00217 	ldw	ra,8(sp)
     8c0:	dc400117 	ldw	r17,4(sp)
     8c4:	dc000017 	ldw	r16,0(sp)
     8c8:	dec00304 	addi	sp,sp,12
     8cc:	f800283a 	ret
     8d0:	10c02690 	cmplti	r3,r2,154
     8d4:	1800071e 	bne	r3,zero,8f4 <__floatsisf+0xb4>
     8d8:	20c006c4 	addi	r3,r4,27
     8dc:	01400144 	movi	r5,5
     8e0:	80c6983a 	sll	r3,r16,r3
     8e4:	290bc83a 	sub	r5,r5,r4
     8e8:	814ad83a 	srl	r5,r16,r5
     8ec:	1806c03a 	cmpne	r3,r3,zero
     8f0:	28e0b03a 	or	r16,r5,r3
     8f4:	20c00188 	cmpgei	r3,r4,6
     8f8:	1800171e 	bne	r3,zero,958 <__floatsisf+0x118>
     8fc:	00ff0034 	movhi	r3,64512
     900:	18ffffc4 	addi	r3,r3,-1
     904:	818001cc 	andi	r6,r16,7
     908:	80ca703a 	and	r5,r16,r3
     90c:	30000926 	beq	r6,zero,934 <__floatsisf+0xf4>
     910:	818003cc 	andi	r6,r16,15
     914:	31800120 	cmpeqi	r6,r6,4
     918:	3000061e 	bne	r6,zero,934 <__floatsisf+0xf4>
     91c:	29400104 	addi	r5,r5,4
     920:	2981002c 	andhi	r6,r5,1024
     924:	30000326 	beq	r6,zero,934 <__floatsisf+0xf4>
     928:	28ca703a 	and	r5,r5,r3
     92c:	00c027c4 	movi	r3,159
     930:	1905c83a 	sub	r2,r3,r4
     934:	282091ba 	slli	r16,r5,6
     938:	8020d27a 	srli	r16,r16,9
     93c:	003fda06 	br	8a8 <__floatsisf+0x68>
     940:	0121c83a 	sub	r16,zero,r4
     944:	003fc606 	br	860 <__floatsisf+0x20>
     948:	01002034 	movhi	r4,128
     94c:	213fffc4 	addi	r4,r4,-1
     950:	8120703a 	and	r16,r16,r4
     954:	003fd406 	br	8a8 <__floatsisf+0x68>
     958:	20fffec4 	addi	r3,r4,-5
     95c:	80e0983a 	sll	r16,r16,r3
     960:	003fe606 	br	8fc <__floatsisf+0xbc>

00000964 <__extendsfdf2>:
     964:	200ad5fa 	srli	r5,r4,23
     968:	defffd04 	addi	sp,sp,-12
     96c:	dc000015 	stw	r16,0(sp)
     970:	29403fcc 	andi	r5,r5,255
     974:	04002034 	movhi	r16,128
     978:	28800044 	addi	r2,r5,1
     97c:	dc400115 	stw	r17,4(sp)
     980:	843fffc4 	addi	r16,r16,-1
     984:	dfc00215 	stw	ra,8(sp)
     988:	10803f8c 	andi	r2,r2,254
     98c:	2022d7fa 	srli	r17,r4,31
     990:	8120703a 	and	r16,r16,r4
     994:	10000d26 	beq	r2,zero,9cc <__extendsfdf2+0x68>
     998:	8008d0fa 	srli	r4,r16,3
     99c:	8020977a 	slli	r16,r16,29
     9a0:	28c0e004 	addi	r3,r5,896
     9a4:	180a953a 	slli	r5,r3,20
     9a8:	880697fa 	slli	r3,r17,31
     9ac:	8005883a 	mov	r2,r16
     9b0:	290ab03a 	or	r5,r5,r4
     9b4:	28c6b03a 	or	r3,r5,r3
     9b8:	dfc00217 	ldw	ra,8(sp)
     9bc:	dc400117 	ldw	r17,4(sp)
     9c0:	dc000017 	ldw	r16,0(sp)
     9c4:	dec00304 	addi	sp,sp,12
     9c8:	f800283a 	ret
     9cc:	2800111e 	bne	r5,zero,a14 <__extendsfdf2+0xb0>
     9d0:	80001926 	beq	r16,zero,a38 <__extendsfdf2+0xd4>
     9d4:	8009883a 	mov	r4,r16
     9d8:	0000a600 	call	a60 <__clzsi2>
     9dc:	10c002c8 	cmpgei	r3,r2,11
     9e0:	18001b1e 	bne	r3,zero,a50 <__extendsfdf2+0xec>
     9e4:	010002c4 	movi	r4,11
     9e8:	2089c83a 	sub	r4,r4,r2
     9ec:	10c00544 	addi	r3,r2,21
     9f0:	810ad83a 	srl	r5,r16,r4
     9f4:	80e0983a 	sll	r16,r16,r3
     9f8:	01000434 	movhi	r4,16
     9fc:	00c0e244 	movi	r3,905
     a00:	213fffc4 	addi	r4,r4,-1
     a04:	1887c83a 	sub	r3,r3,r2
     a08:	2908703a 	and	r4,r5,r4
     a0c:	18c1ffcc 	andi	r3,r3,2047
     a10:	003fe406 	br	9a4 <__extendsfdf2+0x40>
     a14:	80000b26 	beq	r16,zero,a44 <__extendsfdf2+0xe0>
     a18:	800ad0fa 	srli	r5,r16,3
     a1c:	00800434 	movhi	r2,16
     a20:	10bfffc4 	addi	r2,r2,-1
     a24:	29000234 	orhi	r4,r5,8
     a28:	8020977a 	slli	r16,r16,29
     a2c:	2088703a 	and	r4,r4,r2
     a30:	00c1ffc4 	movi	r3,2047
     a34:	003fdb06 	br	9a4 <__extendsfdf2+0x40>
     a38:	0007883a 	mov	r3,zero
     a3c:	0009883a 	mov	r4,zero
     a40:	003fd806 	br	9a4 <__extendsfdf2+0x40>
     a44:	00c1ffc4 	movi	r3,2047
     a48:	0009883a 	mov	r4,zero
     a4c:	003fd506 	br	9a4 <__extendsfdf2+0x40>
     a50:	113ffd44 	addi	r4,r2,-11
     a54:	810a983a 	sll	r5,r16,r4
     a58:	0021883a 	mov	r16,zero
     a5c:	003fe606 	br	9f8 <__extendsfdf2+0x94>

00000a60 <__clzsi2>:
     a60:	00bfffd4 	movui	r2,65535
     a64:	11000436 	bltu	r2,r4,a78 <__clzsi2+0x18>
     a68:	20804030 	cmpltui	r2,r4,256
     a6c:	10000e26 	beq	r2,zero,aa8 <__clzsi2+0x48>
     a70:	01400804 	movi	r5,32
     a74:	00000406 	br	a88 <__clzsi2+0x28>
     a78:	00804034 	movhi	r2,256
     a7c:	20800736 	bltu	r4,r2,a9c <__clzsi2+0x3c>
     a80:	2008d63a 	srli	r4,r4,24
     a84:	01400204 	movi	r5,8
     a88:	00c00074 	movhi	r3,1
     a8c:	20c7883a 	add	r3,r4,r3
     a90:	1882de03 	ldbu	r2,2936(r3)
     a94:	2885c83a 	sub	r2,r5,r2
     a98:	f800283a 	ret
     a9c:	2008d43a 	srli	r4,r4,16
     aa0:	01400404 	movi	r5,16
     aa4:	003ff806 	br	a88 <__clzsi2+0x28>
     aa8:	2008d23a 	srli	r4,r4,8
     aac:	01400604 	movi	r5,24
     ab0:	003ff506 	br	a88 <__clzsi2+0x28>

00000ab4 <_printf_r>:
     ab4:	defffd04 	addi	sp,sp,-12
     ab8:	2805883a 	mov	r2,r5
     abc:	dfc00015 	stw	ra,0(sp)
     ac0:	d9800115 	stw	r6,4(sp)
     ac4:	d9c00215 	stw	r7,8(sp)
     ac8:	21400217 	ldw	r5,8(r4)
     acc:	d9c00104 	addi	r7,sp,4
     ad0:	100d883a 	mov	r6,r2
     ad4:	0000c900 	call	c90 <___vfprintf_internal_r>
     ad8:	dfc00017 	ldw	ra,0(sp)
     adc:	dec00304 	addi	sp,sp,12
     ae0:	f800283a 	ret

00000ae4 <printf>:
     ae4:	defffc04 	addi	sp,sp,-16
     ae8:	dfc00015 	stw	ra,0(sp)
     aec:	d9400115 	stw	r5,4(sp)
     af0:	d9800215 	stw	r6,8(sp)
     af4:	d9c00315 	stw	r7,12(sp)
     af8:	00800074 	movhi	r2,1
     afc:	108b9e17 	ldw	r2,11896(r2)
     b00:	200b883a 	mov	r5,r4
     b04:	d9800104 	addi	r6,sp,4
     b08:	11000217 	ldw	r4,8(r2)
     b0c:	0002ca80 	call	2ca8 <__vfprintf_internal>
     b10:	dfc00017 	ldw	ra,0(sp)
     b14:	dec00404 	addi	sp,sp,16
     b18:	f800283a 	ret

00000b1c <_puts_r>:
     b1c:	defff504 	addi	sp,sp,-44
     b20:	dc000815 	stw	r16,32(sp)
     b24:	2021883a 	mov	r16,r4
     b28:	2809883a 	mov	r4,r5
     b2c:	dc400915 	stw	r17,36(sp)
     b30:	dfc00a15 	stw	ra,40(sp)
     b34:	2823883a 	mov	r17,r5
     b38:	0000bf80 	call	bf8 <strlen>
     b3c:	11000044 	addi	r4,r2,1
     b40:	d8800515 	stw	r2,20(sp)
     b44:	00800044 	movi	r2,1
     b48:	00c00074 	movhi	r3,1
     b4c:	d8800715 	stw	r2,28(sp)
     b50:	d8800404 	addi	r2,sp,16
     b54:	18c31e04 	addi	r3,r3,3192
     b58:	d8800115 	stw	r2,4(sp)
     b5c:	00800084 	movi	r2,2
     b60:	dc400415 	stw	r17,16(sp)
     b64:	d8c00615 	stw	r3,24(sp)
     b68:	d9000315 	stw	r4,12(sp)
     b6c:	d8800215 	stw	r2,8(sp)
     b70:	81400217 	ldw	r5,8(r16)
     b74:	80000226 	beq	r16,zero,b80 <_puts_r+0x64>
     b78:	80800e17 	ldw	r2,56(r16)
     b7c:	10001326 	beq	r2,zero,bcc <_puts_r+0xb0>
     b80:	2880030b 	ldhu	r2,12(r5)
     b84:	10c8000c 	andi	r3,r2,8192
     b88:	1800061e 	bne	r3,zero,ba4 <_puts_r+0x88>
     b8c:	28c01917 	ldw	r3,100(r5)
     b90:	0137ffc4 	movi	r4,-8193
     b94:	10880014 	ori	r2,r2,8192
     b98:	1906703a 	and	r3,r3,r4
     b9c:	2880030d 	sth	r2,12(r5)
     ba0:	28c01915 	stw	r3,100(r5)
     ba4:	d9800104 	addi	r6,sp,4
     ba8:	8009883a 	mov	r4,r16
     bac:	00053200 	call	5320 <__sfvwrite_r>
     bb0:	10000b1e 	bne	r2,zero,be0 <_puts_r+0xc4>
     bb4:	00800284 	movi	r2,10
     bb8:	dfc00a17 	ldw	ra,40(sp)
     bbc:	dc400917 	ldw	r17,36(sp)
     bc0:	dc000817 	ldw	r16,32(sp)
     bc4:	dec00b04 	addi	sp,sp,44
     bc8:	f800283a 	ret
     bcc:	8009883a 	mov	r4,r16
     bd0:	d9400015 	stw	r5,0(sp)
     bd4:	0004ec00 	call	4ec0 <__sinit>
     bd8:	d9400017 	ldw	r5,0(sp)
     bdc:	003fe806 	br	b80 <_puts_r+0x64>
     be0:	00bfffc4 	movi	r2,-1
     be4:	003ff406 	br	bb8 <_puts_r+0x9c>

00000be8 <puts>:
     be8:	00800074 	movhi	r2,1
     bec:	200b883a 	mov	r5,r4
     bf0:	110b9e17 	ldw	r4,11896(r2)
     bf4:	0000b1c1 	jmpi	b1c <_puts_r>

00000bf8 <strlen>:
     bf8:	208000cc 	andi	r2,r4,3
     bfc:	10000926 	beq	r2,zero,c24 <strlen+0x2c>
     c00:	2005883a 	mov	r2,r4
     c04:	00000306 	br	c14 <strlen+0x1c>
     c08:	10800044 	addi	r2,r2,1
     c0c:	10c000cc 	andi	r3,r2,3
     c10:	18000526 	beq	r3,zero,c28 <strlen+0x30>
     c14:	10c00007 	ldb	r3,0(r2)
     c18:	183ffb1e 	bne	r3,zero,c08 <strlen+0x10>
     c1c:	1105c83a 	sub	r2,r2,r4
     c20:	f800283a 	ret
     c24:	2005883a 	mov	r2,r4
     c28:	11400017 	ldw	r5,0(r2)
     c2c:	01ffbff4 	movhi	r7,65279
     c30:	39ffbfc4 	addi	r7,r7,-257
     c34:	29c7883a 	add	r3,r5,r7
     c38:	01a02074 	movhi	r6,32897
     c3c:	014a303a 	nor	r5,zero,r5
     c40:	1946703a 	and	r3,r3,r5
     c44:	31a02004 	addi	r6,r6,-32640
     c48:	1986703a 	and	r3,r3,r6
     c4c:	1800071e 	bne	r3,zero,c6c <strlen+0x74>
     c50:	11400117 	ldw	r5,4(r2)
     c54:	10800104 	addi	r2,r2,4
     c58:	29c7883a 	add	r3,r5,r7
     c5c:	014a303a 	nor	r5,zero,r5
     c60:	1946703a 	and	r3,r3,r5
     c64:	1986703a 	and	r3,r3,r6
     c68:	183ff926 	beq	r3,zero,c50 <strlen+0x58>
     c6c:	10c00007 	ldb	r3,0(r2)
     c70:	183fea26 	beq	r3,zero,c1c <strlen+0x24>
     c74:	10c00047 	ldb	r3,1(r2)
     c78:	10800044 	addi	r2,r2,1
     c7c:	183fe726 	beq	r3,zero,c1c <strlen+0x24>
     c80:	10c00047 	ldb	r3,1(r2)
     c84:	10800044 	addi	r2,r2,1
     c88:	183ffa1e 	bne	r3,zero,c74 <strlen+0x7c>
     c8c:	003fe306 	br	c1c <strlen+0x24>

00000c90 <___vfprintf_internal_r>:
     c90:	deffbf04 	addi	sp,sp,-260
     c94:	dfc04015 	stw	ra,256(sp)
     c98:	dd803d15 	stw	r22,244(sp)
     c9c:	dcc03a15 	stw	r19,232(sp)
     ca0:	dc803915 	stw	r18,228(sp)
     ca4:	2027883a 	mov	r19,r4
     ca8:	2825883a 	mov	r18,r5
     cac:	302d883a 	mov	r22,r6
     cb0:	d9c00615 	stw	r7,24(sp)
     cb4:	df003f15 	stw	fp,252(sp)
     cb8:	ddc03e15 	stw	r23,248(sp)
     cbc:	dd403c15 	stw	r21,240(sp)
     cc0:	dd003b15 	stw	r20,236(sp)
     cc4:	dc403815 	stw	r17,224(sp)
     cc8:	dc003715 	stw	r16,220(sp)
     ccc:	00058fc0 	call	58fc <_localeconv_r>
     cd0:	10800017 	ldw	r2,0(r2)
     cd4:	1009883a 	mov	r4,r2
     cd8:	d8800d15 	stw	r2,52(sp)
     cdc:	0000bf80 	call	bf8 <strlen>
     ce0:	d8800b15 	stw	r2,44(sp)
     ce4:	98000226 	beq	r19,zero,cf0 <___vfprintf_internal_r+0x60>
     ce8:	98800e17 	ldw	r2,56(r19)
     cec:	1001e026 	beq	r2,zero,1470 <___vfprintf_internal_r+0x7e0>
     cf0:	9080030b 	ldhu	r2,12(r18)
     cf4:	10c8000c 	andi	r3,r2,8192
     cf8:	1800061e 	bne	r3,zero,d14 <___vfprintf_internal_r+0x84>
     cfc:	90c01917 	ldw	r3,100(r18)
     d00:	0137ffc4 	movi	r4,-8193
     d04:	10880014 	ori	r2,r2,8192
     d08:	1906703a 	and	r3,r3,r4
     d0c:	9080030d 	sth	r2,12(r18)
     d10:	90c01915 	stw	r3,100(r18)
     d14:	10c0020c 	andi	r3,r2,8
     d18:	1800fc26 	beq	r3,zero,110c <___vfprintf_internal_r+0x47c>
     d1c:	90c00417 	ldw	r3,16(r18)
     d20:	1800fa26 	beq	r3,zero,110c <___vfprintf_internal_r+0x47c>
     d24:	1080068c 	andi	r2,r2,26
     d28:	10800298 	cmpnei	r2,r2,10
     d2c:	1000ff26 	beq	r2,zero,112c <___vfprintf_internal_r+0x49c>
     d30:	d8802704 	addi	r2,sp,156
     d34:	b02f883a 	mov	r23,r22
     d38:	d8801a15 	stw	r2,104(sp)
     d3c:	d8001c15 	stw	zero,112(sp)
     d40:	d8001b15 	stw	zero,108(sp)
     d44:	d8000815 	stw	zero,32(sp)
     d48:	d8000915 	stw	zero,36(sp)
     d4c:	d8000a15 	stw	zero,40(sp)
     d50:	d8000c15 	stw	zero,48(sp)
     d54:	d8001015 	stw	zero,64(sp)
     d58:	d8000515 	stw	zero,20(sp)
     d5c:	102d883a 	mov	r22,r2
     d60:	b8800007 	ldb	r2,0(r23)
     d64:	1000d726 	beq	r2,zero,10c4 <___vfprintf_internal_r+0x434>
     d68:	b821883a 	mov	r16,r23
     d6c:	00000306 	br	d7c <___vfprintf_internal_r+0xec>
     d70:	80800047 	ldb	r2,1(r16)
     d74:	84000044 	addi	r16,r16,1
     d78:	10012226 	beq	r2,zero,1204 <___vfprintf_internal_r+0x574>
     d7c:	10800958 	cmpnei	r2,r2,37
     d80:	103ffb1e 	bne	r2,zero,d70 <___vfprintf_internal_r+0xe0>
     d84:	85e3c83a 	sub	r17,r16,r23
     d88:	85c1201e 	bne	r16,r23,120c <___vfprintf_internal_r+0x57c>
     d8c:	80800003 	ldbu	r2,0(r16)
     d90:	10803fcc 	andi	r2,r2,255
     d94:	1080201c 	xori	r2,r2,128
     d98:	10bfe004 	addi	r2,r2,-128
     d9c:	1000c926 	beq	r2,zero,10c4 <___vfprintf_internal_r+0x434>
     da0:	82c00047 	ldb	r11,1(r16)
     da4:	85c00044 	addi	r23,r16,1
     da8:	d8001345 	stb	zero,77(sp)
     dac:	0009883a 	mov	r4,zero
     db0:	000b883a 	mov	r5,zero
     db4:	023fffc4 	movi	r8,-1
     db8:	0021883a 	mov	r16,zero
     dbc:	0019883a 	mov	r12,zero
     dc0:	bdc00044 	addi	r23,r23,1
     dc4:	5839883a 	mov	fp,r11
     dc8:	e0bff804 	addi	r2,fp,-32
     dcc:	10c01668 	cmpgeui	r3,r2,89
     dd0:	18006c1e 	bne	r3,zero,f84 <___vfprintf_internal_r+0x2f4>
     dd4:	100490ba 	slli	r2,r2,2
     dd8:	00c00034 	movhi	r3,0
     ddc:	10c7883a 	add	r3,r2,r3
     de0:	18837a17 	ldw	r2,3560(r3)
     de4:	1000683a 	jmp	r2
     de8:	0000169c 	xori	zero,zero,90
     dec:	00000f84 	movi	zero,62
     df0:	00000f84 	movi	zero,62
     df4:	00001690 	cmplti	zero,zero,90
     df8:	00000f84 	movi	zero,62
     dfc:	00000f84 	movi	zero,62
     e00:	00000f84 	movi	zero,62
     e04:	00000f84 	movi	zero,62
     e08:	00000f84 	movi	zero,62
     e0c:	00000f84 	movi	zero,62
     e10:	00001514 	movui	zero,84
     e14:	00001680 	call	168 <alt_irq_handler+0x6c>
     e18:	00000f84 	movi	zero,62
     e1c:	0000152c 	andhi	zero,zero,84
     e20:	00001538 	rdprs	zero,zero,84
     e24:	00000f84 	movi	zero,62
     e28:	00001674 	movhi	zero,89
     e2c:	00000f4c 	andi	zero,zero,61
     e30:	00000f4c 	andi	zero,zero,61
     e34:	00000f4c 	andi	zero,zero,61
     e38:	00000f4c 	andi	zero,zero,61
     e3c:	00000f4c 	andi	zero,zero,61
     e40:	00000f4c 	andi	zero,zero,61
     e44:	00000f4c 	andi	zero,zero,61
     e48:	00000f4c 	andi	zero,zero,61
     e4c:	00000f4c 	andi	zero,zero,61
     e50:	00000f84 	movi	zero,62
     e54:	00000f84 	movi	zero,62
     e58:	00000f84 	movi	zero,62
     e5c:	00000f84 	movi	zero,62
     e60:	00000f84 	movi	zero,62
     e64:	00000f84 	movi	zero,62
     e68:	00000f84 	movi	zero,62
     e6c:	00000f84 	movi	zero,62
     e70:	00000f84 	movi	zero,62
     e74:	00000f84 	movi	zero,62
     e78:	00001584 	movi	zero,86
     e7c:	00001268 	cmpgeui	zero,zero,73
     e80:	00000f84 	movi	zero,62
     e84:	00001268 	cmpgeui	zero,zero,73
     e88:	00000f84 	movi	zero,62
     e8c:	00000f84 	movi	zero,62
     e90:	00000f84 	movi	zero,62
     e94:	00000f84 	movi	zero,62
     e98:	0000181c 	xori	zero,zero,96
     e9c:	00000f84 	movi	zero,62
     ea0:	00000f84 	movi	zero,62
     ea4:	0000119c 	xori	zero,zero,70
     ea8:	00000f84 	movi	zero,62
     eac:	00000f84 	movi	zero,62
     eb0:	00000f84 	movi	zero,62
     eb4:	00000f84 	movi	zero,62
     eb8:	00000f84 	movi	zero,62
     ebc:	00001174 	movhi	zero,69
     ec0:	00000f84 	movi	zero,62
     ec4:	00000f84 	movi	zero,62
     ec8:	0000185c 	xori	zero,zero,97
     ecc:	00000f84 	movi	zero,62
     ed0:	00000f84 	movi	zero,62
     ed4:	00000f84 	movi	zero,62
     ed8:	00000f84 	movi	zero,62
     edc:	00000f84 	movi	zero,62
     ee0:	00000f84 	movi	zero,62
     ee4:	00000f84 	movi	zero,62
     ee8:	00000f84 	movi	zero,62
     eec:	00000f84 	movi	zero,62
     ef0:	00000f84 	movi	zero,62
     ef4:	00001834 	movhi	zero,96
     ef8:	0000147c 	xorhi	zero,zero,81
     efc:	00001268 	cmpgeui	zero,zero,73
     f00:	00001268 	cmpgeui	zero,zero,73
     f04:	00001268 	cmpgeui	zero,zero,73
     f08:	00001828 	cmpgeui	zero,zero,96
     f0c:	0000147c 	xorhi	zero,zero,81
     f10:	00000f84 	movi	zero,62
     f14:	00000f84 	movi	zero,62
     f18:	000016c8 	cmpgei	zero,zero,91
     f1c:	00000f84 	movi	zero,62
     f20:	000017dc 	xori	zero,zero,95
     f24:	000011a0 	cmpeqi	zero,zero,70
     f28:	0000179c 	xori	zero,zero,94
     f2c:	00001790 	cmplti	zero,zero,94
     f30:	00000f84 	movi	zero,62
     f34:	00001738 	rdprs	zero,zero,92
     f38:	00000f84 	movi	zero,62
     f3c:	00001178 	rdprs	zero,zero,69
     f40:	00000f84 	movi	zero,62
     f44:	00000f84 	movi	zero,62
     f48:	000016f0 	cmpltui	zero,zero,91
     f4c:	0021883a 	mov	r16,zero
     f50:	e0fff404 	addi	r3,fp,-48
     f54:	800490ba 	slli	r2,r16,2
     f58:	bf000007 	ldb	fp,0(r23)
     f5c:	bdc00044 	addi	r23,r23,1
     f60:	1421883a 	add	r16,r2,r16
     f64:	8421883a 	add	r16,r16,r16
     f68:	1c21883a 	add	r16,r3,r16
     f6c:	e0fff404 	addi	r3,fp,-48
     f70:	188002b0 	cmpltui	r2,r3,10
     f74:	103ff71e 	bne	r2,zero,f54 <___vfprintf_internal_r+0x2c4>
     f78:	e0bff804 	addi	r2,fp,-32
     f7c:	10c01668 	cmpgeui	r3,r2,89
     f80:	183f9426 	beq	r3,zero,dd4 <___vfprintf_internal_r+0x144>
     f84:	21003fcc 	andi	r4,r4,255
     f88:	2006541e 	bne	r4,zero,28dc <___vfprintf_internal_r+0x1c4c>
     f8c:	e0004d26 	beq	fp,zero,10c4 <___vfprintf_internal_r+0x434>
     f90:	df001d05 	stb	fp,116(sp)
     f94:	d8001345 	stb	zero,77(sp)
     f98:	05000044 	movi	r20,1
     f9c:	05400044 	movi	r21,1
     fa0:	dc401d04 	addi	r17,sp,116
     fa4:	db000415 	stw	r12,16(sp)
     fa8:	0011883a 	mov	r8,zero
     fac:	d8000715 	stw	zero,28(sp)
     fb0:	d8800417 	ldw	r2,16(sp)
     fb4:	1380008c 	andi	r14,r2,2
     fb8:	70000126 	beq	r14,zero,fc0 <___vfprintf_internal_r+0x330>
     fbc:	a5000084 	addi	r20,r20,2
     fc0:	d8800417 	ldw	r2,16(sp)
     fc4:	d8c01c17 	ldw	r3,112(sp)
     fc8:	1340210c 	andi	r13,r2,132
     fcc:	6800021e 	bne	r13,zero,fd8 <___vfprintf_internal_r+0x348>
     fd0:	850fc83a 	sub	r7,r16,r20
     fd4:	01c36b16 	blt	zero,r7,1d84 <___vfprintf_internal_r+0x10f4>
     fd8:	d8801347 	ldb	r2,77(sp)
     fdc:	10000c26 	beq	r2,zero,1010 <___vfprintf_internal_r+0x380>
     fe0:	d8801b17 	ldw	r2,108(sp)
     fe4:	d9001344 	addi	r4,sp,77
     fe8:	18c00044 	addi	r3,r3,1
     fec:	10800044 	addi	r2,r2,1
     ff0:	b1000015 	stw	r4,0(r22)
     ff4:	01000044 	movi	r4,1
     ff8:	d8801b15 	stw	r2,108(sp)
     ffc:	b1000115 	stw	r4,4(r22)
    1000:	d8c01c15 	stw	r3,112(sp)
    1004:	10800208 	cmpgei	r2,r2,8
    1008:	10039f1e 	bne	r2,zero,1e88 <___vfprintf_internal_r+0x11f8>
    100c:	b5800204 	addi	r22,r22,8
    1010:	70000c26 	beq	r14,zero,1044 <___vfprintf_internal_r+0x3b4>
    1014:	d8801b17 	ldw	r2,108(sp)
    1018:	d9001384 	addi	r4,sp,78
    101c:	18c00084 	addi	r3,r3,2
    1020:	10800044 	addi	r2,r2,1
    1024:	b1000015 	stw	r4,0(r22)
    1028:	01000084 	movi	r4,2
    102c:	d8801b15 	stw	r2,108(sp)
    1030:	b1000115 	stw	r4,4(r22)
    1034:	d8c01c15 	stw	r3,112(sp)
    1038:	10800208 	cmpgei	r2,r2,8
    103c:	1003a01e 	bne	r2,zero,1ec0 <___vfprintf_internal_r+0x1230>
    1040:	b5800204 	addi	r22,r22,8
    1044:	6b402018 	cmpnei	r13,r13,128
    1048:	68025c26 	beq	r13,zero,19bc <___vfprintf_internal_r+0xd2c>
    104c:	4551c83a 	sub	r8,r8,r21
    1050:	02029416 	blt	zero,r8,1aa4 <___vfprintf_internal_r+0xe14>
    1054:	d8800417 	ldw	r2,16(sp)
    1058:	1080400c 	andi	r2,r2,256
    105c:	1002111e 	bne	r2,zero,18a4 <___vfprintf_internal_r+0xc14>
    1060:	d8801b17 	ldw	r2,108(sp)
    1064:	1d47883a 	add	r3,r3,r21
    1068:	b4400015 	stw	r17,0(r22)
    106c:	10800044 	addi	r2,r2,1
    1070:	b5400115 	stw	r21,4(r22)
    1074:	d8801b15 	stw	r2,108(sp)
    1078:	d8c01c15 	stw	r3,112(sp)
    107c:	10800208 	cmpgei	r2,r2,8
    1080:	1002fd1e 	bne	r2,zero,1c78 <___vfprintf_internal_r+0xfe8>
    1084:	b5800204 	addi	r22,r22,8
    1088:	d8800417 	ldw	r2,16(sp)
    108c:	1440010c 	andi	r17,r2,4
    1090:	88000226 	beq	r17,zero,109c <___vfprintf_internal_r+0x40c>
    1094:	8523c83a 	sub	r17,r16,r20
    1098:	0440c616 	blt	zero,r17,13b4 <___vfprintf_internal_r+0x724>
    109c:	8500010e 	bge	r16,r20,10a4 <___vfprintf_internal_r+0x414>
    10a0:	a021883a 	mov	r16,r20
    10a4:	d8800517 	ldw	r2,20(sp)
    10a8:	1405883a 	add	r2,r2,r16
    10ac:	d8800515 	stw	r2,20(sp)
    10b0:	1802c31e 	bne	r3,zero,1bc0 <___vfprintf_internal_r+0xf30>
    10b4:	b8800007 	ldb	r2,0(r23)
    10b8:	d8001b15 	stw	zero,108(sp)
    10bc:	dd802704 	addi	r22,sp,156
    10c0:	103f291e 	bne	r2,zero,d68 <___vfprintf_internal_r+0xd8>
    10c4:	d8801c17 	ldw	r2,112(sp)
    10c8:	1005ff1e 	bne	r2,zero,28c8 <___vfprintf_internal_r+0x1c38>
    10cc:	9080030b 	ldhu	r2,12(r18)
    10d0:	1080100c 	andi	r2,r2,64
    10d4:	1006ab1e 	bne	r2,zero,2b84 <___vfprintf_internal_r+0x1ef4>
    10d8:	d8800517 	ldw	r2,20(sp)
    10dc:	dfc04017 	ldw	ra,256(sp)
    10e0:	df003f17 	ldw	fp,252(sp)
    10e4:	ddc03e17 	ldw	r23,248(sp)
    10e8:	dd803d17 	ldw	r22,244(sp)
    10ec:	dd403c17 	ldw	r21,240(sp)
    10f0:	dd003b17 	ldw	r20,236(sp)
    10f4:	dcc03a17 	ldw	r19,232(sp)
    10f8:	dc803917 	ldw	r18,228(sp)
    10fc:	dc403817 	ldw	r17,224(sp)
    1100:	dc003717 	ldw	r16,220(sp)
    1104:	dec04104 	addi	sp,sp,260
    1108:	f800283a 	ret
    110c:	900b883a 	mov	r5,r18
    1110:	9809883a 	mov	r4,r19
    1114:	0002d840 	call	2d84 <__swsetup_r>
    1118:	10069a1e 	bne	r2,zero,2b84 <___vfprintf_internal_r+0x1ef4>
    111c:	9080030b 	ldhu	r2,12(r18)
    1120:	1080068c 	andi	r2,r2,26
    1124:	10800298 	cmpnei	r2,r2,10
    1128:	103f011e 	bne	r2,zero,d30 <___vfprintf_internal_r+0xa0>
    112c:	9080038f 	ldh	r2,14(r18)
    1130:	103eff16 	blt	r2,zero,d30 <___vfprintf_internal_r+0xa0>
    1134:	d9c00617 	ldw	r7,24(sp)
    1138:	b00d883a 	mov	r6,r22
    113c:	900b883a 	mov	r5,r18
    1140:	9809883a 	mov	r4,r19
    1144:	dfc04017 	ldw	ra,256(sp)
    1148:	df003f17 	ldw	fp,252(sp)
    114c:	ddc03e17 	ldw	r23,248(sp)
    1150:	dd803d17 	ldw	r22,244(sp)
    1154:	dd403c17 	ldw	r21,240(sp)
    1158:	dd003b17 	ldw	r20,236(sp)
    115c:	dcc03a17 	ldw	r19,232(sp)
    1160:	dc803917 	ldw	r18,228(sp)
    1164:	dc403817 	ldw	r17,224(sp)
    1168:	dc003717 	ldw	r16,220(sp)
    116c:	dec04104 	addi	sp,sp,260
    1170:	0002cc41 	jmpi	2cc4 <__sbprintf>
    1174:	63000414 	ori	r12,r12,16
    1178:	6080080c 	andi	r2,r12,32
    117c:	10008126 	beq	r2,zero,1384 <___vfprintf_internal_r+0x6f4>
    1180:	d8c00617 	ldw	r3,24(sp)
    1184:	00800044 	movi	r2,1
    1188:	1d000017 	ldw	r20,0(r3)
    118c:	1d400117 	ldw	r21,4(r3)
    1190:	18c00204 	addi	r3,r3,8
    1194:	d8c00615 	stw	r3,24(sp)
    1198:	00000906 	br	11c0 <___vfprintf_internal_r+0x530>
    119c:	63000414 	ori	r12,r12,16
    11a0:	6080080c 	andi	r2,r12,32
    11a4:	10006b26 	beq	r2,zero,1354 <___vfprintf_internal_r+0x6c4>
    11a8:	d8c00617 	ldw	r3,24(sp)
    11ac:	0005883a 	mov	r2,zero
    11b0:	1d000017 	ldw	r20,0(r3)
    11b4:	1d400117 	ldw	r21,4(r3)
    11b8:	18c00204 	addi	r3,r3,8
    11bc:	d8c00615 	stw	r3,24(sp)
    11c0:	d8001345 	stb	zero,77(sp)
    11c4:	40ffffe0 	cmpeqi	r3,r8,-1
    11c8:	001b883a 	mov	r13,zero
    11cc:	18010a1e 	bne	r3,zero,15f8 <___vfprintf_internal_r+0x968>
    11d0:	047fdfc4 	movi	r17,-129
    11d4:	6448703a 	and	r4,r12,r17
    11d8:	a546b03a 	or	r3,r20,r21
    11dc:	d9000415 	stw	r4,16(sp)
    11e0:	1802e61e 	bne	r3,zero,1d7c <___vfprintf_internal_r+0x10ec>
    11e4:	4002601e 	bne	r8,zero,1b68 <___vfprintf_internal_r+0xed8>
    11e8:	1003ae1e 	bne	r2,zero,20a4 <___vfprintf_internal_r+0x1414>
    11ec:	6540004c 	andi	r21,r12,1
    11f0:	a803e426 	beq	r21,zero,2184 <___vfprintf_internal_r+0x14f4>
    11f4:	00800c04 	movi	r2,48
    11f8:	d88026c5 	stb	r2,155(sp)
    11fc:	dc4026c4 	addi	r17,sp,155
    1200:	0000ba06 	br	14ec <___vfprintf_internal_r+0x85c>
    1204:	85e3c83a 	sub	r17,r16,r23
    1208:	85ffae26 	beq	r16,r23,10c4 <___vfprintf_internal_r+0x434>
    120c:	d8c01c17 	ldw	r3,112(sp)
    1210:	d8801b17 	ldw	r2,108(sp)
    1214:	b5c00015 	stw	r23,0(r22)
    1218:	1c47883a 	add	r3,r3,r17
    121c:	10800044 	addi	r2,r2,1
    1220:	d8801b15 	stw	r2,108(sp)
    1224:	b4400115 	stw	r17,4(r22)
    1228:	d8c01c15 	stw	r3,112(sp)
    122c:	10800208 	cmpgei	r2,r2,8
    1230:	1000061e 	bne	r2,zero,124c <___vfprintf_internal_r+0x5bc>
    1234:	b5800204 	addi	r22,r22,8
    1238:	d8c00517 	ldw	r3,20(sp)
    123c:	80800003 	ldbu	r2,0(r16)
    1240:	1c47883a 	add	r3,r3,r17
    1244:	d8c00515 	stw	r3,20(sp)
    1248:	003ed106 	br	d90 <___vfprintf_internal_r+0x100>
    124c:	d9801a04 	addi	r6,sp,104
    1250:	900b883a 	mov	r5,r18
    1254:	9809883a 	mov	r4,r19
    1258:	00080e00 	call	80e0 <__sprint_r>
    125c:	103f9b1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    1260:	dd802704 	addi	r22,sp,156
    1264:	003ff406 	br	1238 <___vfprintf_internal_r+0x5a8>
    1268:	21003fcc 	andi	r4,r4,255
    126c:	2006291e 	bne	r4,zero,2b14 <___vfprintf_internal_r+0x1e84>
    1270:	d8c00617 	ldw	r3,24(sp)
    1274:	6080020c 	andi	r2,r12,8
    1278:	19000204 	addi	r4,r3,8
    127c:	d9000e15 	stw	r4,56(sp)
    1280:	1003c21e 	bne	r2,zero,218c <___vfprintf_internal_r+0x14fc>
    1284:	d8800617 	ldw	r2,24(sp)
    1288:	10c00017 	ldw	r3,0(r2)
    128c:	10800117 	ldw	r2,4(r2)
    1290:	d8c00915 	stw	r3,36(sp)
    1294:	d8800a15 	stw	r2,40(sp)
    1298:	dd400a17 	ldw	r21,40(sp)
    129c:	dd000917 	ldw	r20,36(sp)
    12a0:	00a00034 	movhi	r2,32768
    12a4:	10bfffc4 	addi	r2,r2,-1
    12a8:	a8a2703a 	and	r17,r21,r2
    12ac:	01dffc34 	movhi	r7,32752
    12b0:	01bfffc4 	movi	r6,-1
    12b4:	39ffffc4 	addi	r7,r7,-1
    12b8:	a009883a 	mov	r4,r20
    12bc:	880b883a 	mov	r5,r17
    12c0:	da000615 	stw	r8,24(sp)
    12c4:	db000415 	stw	r12,16(sp)
    12c8:	000d9040 	call	d904 <__unorddf2>
    12cc:	db000417 	ldw	r12,16(sp)
    12d0:	da000617 	ldw	r8,24(sp)
    12d4:	10044d1e 	bne	r2,zero,240c <___vfprintf_internal_r+0x177c>
    12d8:	01dffc34 	movhi	r7,32752
    12dc:	01bfffc4 	movi	r6,-1
    12e0:	39ffffc4 	addi	r7,r7,-1
    12e4:	a009883a 	mov	r4,r20
    12e8:	880b883a 	mov	r5,r17
    12ec:	000c7640 	call	c764 <__ledf2>
    12f0:	db000417 	ldw	r12,16(sp)
    12f4:	da000617 	ldw	r8,24(sp)
    12f8:	0084440e 	bge	zero,r2,240c <___vfprintf_internal_r+0x177c>
    12fc:	000d883a 	mov	r6,zero
    1300:	000f883a 	mov	r7,zero
    1304:	a009883a 	mov	r4,r20
    1308:	a80b883a 	mov	r5,r21
    130c:	000c7640 	call	c764 <__ledf2>
    1310:	db000417 	ldw	r12,16(sp)
    1314:	10055916 	blt	r2,zero,287c <___vfprintf_internal_r+0x1bec>
    1318:	db401343 	ldbu	r13,77(sp)
    131c:	e0801210 	cmplti	r2,fp,72
    1320:	1005471e 	bne	r2,zero,2840 <___vfprintf_internal_r+0x1bb0>
    1324:	04400074 	movhi	r17,1
    1328:	8c432004 	addi	r17,r17,3200
    132c:	00bfdfc4 	movi	r2,-129
    1330:	6084703a 	and	r2,r12,r2
    1334:	d8800415 	stw	r2,16(sp)
    1338:	d8800e17 	ldw	r2,56(sp)
    133c:	050000c4 	movi	r20,3
    1340:	054000c4 	movi	r21,3
    1344:	d8800615 	stw	r2,24(sp)
    1348:	0011883a 	mov	r8,zero
    134c:	d8000715 	stw	zero,28(sp)
    1350:	00006a06 	br	14fc <___vfprintf_internal_r+0x86c>
    1354:	d8c00617 	ldw	r3,24(sp)
    1358:	6080040c 	andi	r2,r12,16
    135c:	1d000017 	ldw	r20,0(r3)
    1360:	18c00104 	addi	r3,r3,4
    1364:	d8c00615 	stw	r3,24(sp)
    1368:	1000031e 	bne	r2,zero,1378 <___vfprintf_internal_r+0x6e8>
    136c:	6080100c 	andi	r2,r12,64
    1370:	10000126 	beq	r2,zero,1378 <___vfprintf_internal_r+0x6e8>
    1374:	a53fffcc 	andi	r20,r20,65535
    1378:	002b883a 	mov	r21,zero
    137c:	0005883a 	mov	r2,zero
    1380:	003f8f06 	br	11c0 <___vfprintf_internal_r+0x530>
    1384:	d8c00617 	ldw	r3,24(sp)
    1388:	6080040c 	andi	r2,r12,16
    138c:	1d000017 	ldw	r20,0(r3)
    1390:	18c00104 	addi	r3,r3,4
    1394:	d8c00615 	stw	r3,24(sp)
    1398:	1000031e 	bne	r2,zero,13a8 <___vfprintf_internal_r+0x718>
    139c:	6080100c 	andi	r2,r12,64
    13a0:	10000126 	beq	r2,zero,13a8 <___vfprintf_internal_r+0x718>
    13a4:	a53fffcc 	andi	r20,r20,65535
    13a8:	002b883a 	mov	r21,zero
    13ac:	00800044 	movi	r2,1
    13b0:	003f8306 	br	11c0 <___vfprintf_internal_r+0x530>
    13b4:	03000074 	movhi	r12,1
    13b8:	89000450 	cmplti	r4,r17,17
    13bc:	d8801b17 	ldw	r2,108(sp)
    13c0:	63033404 	addi	r12,r12,3280
    13c4:	20001b1e 	bne	r4,zero,1434 <___vfprintf_internal_r+0x7a4>
    13c8:	05400404 	movi	r21,16
    13cc:	6039883a 	mov	fp,r12
    13d0:	00000406 	br	13e4 <___vfprintf_internal_r+0x754>
    13d4:	8c7ffc04 	addi	r17,r17,-16
    13d8:	89000448 	cmpgei	r4,r17,17
    13dc:	b5800204 	addi	r22,r22,8
    13e0:	20001326 	beq	r4,zero,1430 <___vfprintf_internal_r+0x7a0>
    13e4:	10800044 	addi	r2,r2,1
    13e8:	18c00404 	addi	r3,r3,16
    13ec:	b7000015 	stw	fp,0(r22)
    13f0:	b5400115 	stw	r21,4(r22)
    13f4:	d8c01c15 	stw	r3,112(sp)
    13f8:	d8801b15 	stw	r2,108(sp)
    13fc:	11000208 	cmpgei	r4,r2,8
    1400:	203ff426 	beq	r4,zero,13d4 <___vfprintf_internal_r+0x744>
    1404:	d9801a04 	addi	r6,sp,104
    1408:	900b883a 	mov	r5,r18
    140c:	9809883a 	mov	r4,r19
    1410:	00080e00 	call	80e0 <__sprint_r>
    1414:	103f2d1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    1418:	8c7ffc04 	addi	r17,r17,-16
    141c:	89000448 	cmpgei	r4,r17,17
    1420:	d8c01c17 	ldw	r3,112(sp)
    1424:	d8801b17 	ldw	r2,108(sp)
    1428:	dd802704 	addi	r22,sp,156
    142c:	203fed1e 	bne	r4,zero,13e4 <___vfprintf_internal_r+0x754>
    1430:	e019883a 	mov	r12,fp
    1434:	10800044 	addi	r2,r2,1
    1438:	1c47883a 	add	r3,r3,r17
    143c:	d8801b15 	stw	r2,108(sp)
    1440:	b3000015 	stw	r12,0(r22)
    1444:	b4400115 	stw	r17,4(r22)
    1448:	d8c01c15 	stw	r3,112(sp)
    144c:	10800210 	cmplti	r2,r2,8
    1450:	103f121e 	bne	r2,zero,109c <___vfprintf_internal_r+0x40c>
    1454:	d9801a04 	addi	r6,sp,104
    1458:	900b883a 	mov	r5,r18
    145c:	9809883a 	mov	r4,r19
    1460:	00080e00 	call	80e0 <__sprint_r>
    1464:	103f191e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    1468:	d8c01c17 	ldw	r3,112(sp)
    146c:	003f0b06 	br	109c <___vfprintf_internal_r+0x40c>
    1470:	9809883a 	mov	r4,r19
    1474:	0004ec00 	call	4ec0 <__sinit>
    1478:	003e1d06 	br	cf0 <___vfprintf_internal_r+0x60>
    147c:	21003fcc 	andi	r4,r4,255
    1480:	2005a61e 	bne	r4,zero,2b1c <___vfprintf_internal_r+0x1e8c>
    1484:	6080080c 	andi	r2,r12,32
    1488:	10004326 	beq	r2,zero,1598 <___vfprintf_internal_r+0x908>
    148c:	d8c00617 	ldw	r3,24(sp)
    1490:	18800117 	ldw	r2,4(r3)
    1494:	1d000017 	ldw	r20,0(r3)
    1498:	18c00204 	addi	r3,r3,8
    149c:	d8c00615 	stw	r3,24(sp)
    14a0:	102b883a 	mov	r21,r2
    14a4:	10004a16 	blt	r2,zero,15d0 <___vfprintf_internal_r+0x940>
    14a8:	40bfffd8 	cmpnei	r2,r8,-1
    14ac:	db401343 	ldbu	r13,77(sp)
    14b0:	10000626 	beq	r2,zero,14cc <___vfprintf_internal_r+0x83c>
    14b4:	047fdfc4 	movi	r17,-129
    14b8:	6446703a 	and	r3,r12,r17
    14bc:	a544b03a 	or	r2,r20,r21
    14c0:	d8c00415 	stw	r3,16(sp)
    14c4:	1002f626 	beq	r2,zero,20a0 <___vfprintf_internal_r+0x1410>
    14c8:	db000417 	ldw	r12,16(sp)
    14cc:	a8037f1e 	bne	r21,zero,22cc <___vfprintf_internal_r+0x163c>
    14d0:	a08002a8 	cmpgeui	r2,r20,10
    14d4:	10037d1e 	bne	r2,zero,22cc <___vfprintf_internal_r+0x163c>
    14d8:	a5000c04 	addi	r20,r20,48
    14dc:	dd0026c5 	stb	r20,155(sp)
    14e0:	db000415 	stw	r12,16(sp)
    14e4:	05400044 	movi	r21,1
    14e8:	dc4026c4 	addi	r17,sp,155
    14ec:	4029883a 	mov	r20,r8
    14f0:	4540010e 	bge	r8,r21,14f8 <___vfprintf_internal_r+0x868>
    14f4:	a829883a 	mov	r20,r21
    14f8:	d8000715 	stw	zero,28(sp)
    14fc:	6b403fcc 	andi	r13,r13,255
    1500:	6b40201c 	xori	r13,r13,128
    1504:	6b7fe004 	addi	r13,r13,-128
    1508:	683ea926 	beq	r13,zero,fb0 <___vfprintf_internal_r+0x320>
    150c:	a5000044 	addi	r20,r20,1
    1510:	003ea706 	br	fb0 <___vfprintf_internal_r+0x320>
    1514:	d8800617 	ldw	r2,24(sp)
    1518:	14000017 	ldw	r16,0(r2)
    151c:	10800104 	addi	r2,r2,4
    1520:	8003150e 	bge	r16,zero,2178 <___vfprintf_internal_r+0x14e8>
    1524:	0421c83a 	sub	r16,zero,r16
    1528:	d8800615 	stw	r2,24(sp)
    152c:	bac00007 	ldb	r11,0(r23)
    1530:	63000114 	ori	r12,r12,4
    1534:	003e2206 	br	dc0 <___vfprintf_internal_r+0x130>
    1538:	bf000007 	ldb	fp,0(r23)
    153c:	b8800044 	addi	r2,r23,1
    1540:	e0c00aa0 	cmpeqi	r3,fp,42
    1544:	1805c91e 	bne	r3,zero,2c6c <___vfprintf_internal_r+0x1fdc>
    1548:	e0fff404 	addi	r3,fp,-48
    154c:	198002b0 	cmpltui	r6,r3,10
    1550:	102f883a 	mov	r23,r2
    1554:	0011883a 	mov	r8,zero
    1558:	303e1b26 	beq	r6,zero,dc8 <___vfprintf_internal_r+0x138>
    155c:	400490ba 	slli	r2,r8,2
    1560:	bf000007 	ldb	fp,0(r23)
    1564:	bdc00044 	addi	r23,r23,1
    1568:	1211883a 	add	r8,r2,r8
    156c:	4211883a 	add	r8,r8,r8
    1570:	40d1883a 	add	r8,r8,r3
    1574:	e0fff404 	addi	r3,fp,-48
    1578:	188002b0 	cmpltui	r2,r3,10
    157c:	103ff71e 	bne	r2,zero,155c <___vfprintf_internal_r+0x8cc>
    1580:	003e1106 	br	dc8 <___vfprintf_internal_r+0x138>
    1584:	21003fcc 	andi	r4,r4,255
    1588:	20055e1e 	bne	r4,zero,2b04 <___vfprintf_internal_r+0x1e74>
    158c:	63000414 	ori	r12,r12,16
    1590:	6080080c 	andi	r2,r12,32
    1594:	103fbd1e 	bne	r2,zero,148c <___vfprintf_internal_r+0x7fc>
    1598:	d8c00617 	ldw	r3,24(sp)
    159c:	6080040c 	andi	r2,r12,16
    15a0:	1d000017 	ldw	r20,0(r3)
    15a4:	18c00104 	addi	r3,r3,4
    15a8:	d8c00615 	stw	r3,24(sp)
    15ac:	1002e91e 	bne	r2,zero,2154 <___vfprintf_internal_r+0x14c4>
    15b0:	6080100c 	andi	r2,r12,64
    15b4:	1002e726 	beq	r2,zero,2154 <___vfprintf_internal_r+0x14c4>
    15b8:	a53fffcc 	andi	r20,r20,65535
    15bc:	a520001c 	xori	r20,r20,32768
    15c0:	a5200004 	addi	r20,r20,-32768
    15c4:	a02bd7fa 	srai	r21,r20,31
    15c8:	a805883a 	mov	r2,r21
    15cc:	103fb60e 	bge	r2,zero,14a8 <___vfprintf_internal_r+0x818>
    15d0:	a004c03a 	cmpne	r2,r20,zero
    15d4:	056bc83a 	sub	r21,zero,r21
    15d8:	a8abc83a 	sub	r21,r21,r2
    15dc:	00800b44 	movi	r2,45
    15e0:	d8801345 	stb	r2,77(sp)
    15e4:	40ffffe0 	cmpeqi	r3,r8,-1
    15e8:	0529c83a 	sub	r20,zero,r20
    15ec:	03400b44 	movi	r13,45
    15f0:	00800044 	movi	r2,1
    15f4:	183ef626 	beq	r3,zero,11d0 <___vfprintf_internal_r+0x540>
    15f8:	10c00060 	cmpeqi	r3,r2,1
    15fc:	183fb31e 	bne	r3,zero,14cc <___vfprintf_internal_r+0x83c>
    1600:	108000a0 	cmpeqi	r2,r2,2
    1604:	10015d1e 	bne	r2,zero,1b7c <___vfprintf_internal_r+0xeec>
    1608:	dc402704 	addi	r17,sp,156
    160c:	a006d0fa 	srli	r3,r20,3
    1610:	a808977a 	slli	r4,r21,29
    1614:	a82ad0fa 	srli	r21,r21,3
    1618:	a50001cc 	andi	r20,r20,7
    161c:	a0800c04 	addi	r2,r20,48
    1620:	20e8b03a 	or	r20,r4,r3
    1624:	88bfffc5 	stb	r2,-1(r17)
    1628:	a546b03a 	or	r3,r20,r21
    162c:	880b883a 	mov	r5,r17
    1630:	8c7fffc4 	addi	r17,r17,-1
    1634:	183ff51e 	bne	r3,zero,160c <___vfprintf_internal_r+0x97c>
    1638:	60c0004c 	andi	r3,r12,1
    163c:	18015c26 	beq	r3,zero,1bb0 <___vfprintf_internal_r+0xf20>
    1640:	10803fcc 	andi	r2,r2,255
    1644:	1080201c 	xori	r2,r2,128
    1648:	10bfe004 	addi	r2,r2,-128
    164c:	10800c18 	cmpnei	r2,r2,48
    1650:	10015726 	beq	r2,zero,1bb0 <___vfprintf_internal_r+0xf20>
    1654:	00800c04 	movi	r2,48
    1658:	297fff84 	addi	r5,r5,-2
    165c:	88bfffc5 	stb	r2,-1(r17)
    1660:	d8802704 	addi	r2,sp,156
    1664:	116bc83a 	sub	r21,r2,r5
    1668:	db000415 	stw	r12,16(sp)
    166c:	2823883a 	mov	r17,r5
    1670:	003f9e06 	br	14ec <___vfprintf_internal_r+0x85c>
    1674:	bac00007 	ldb	r11,0(r23)
    1678:	63002014 	ori	r12,r12,128
    167c:	003dd006 	br	dc0 <___vfprintf_internal_r+0x130>
    1680:	bac00007 	ldb	r11,0(r23)
    1684:	01000044 	movi	r4,1
    1688:	01400ac4 	movi	r5,43
    168c:	003dcc06 	br	dc0 <___vfprintf_internal_r+0x130>
    1690:	bac00007 	ldb	r11,0(r23)
    1694:	63000054 	ori	r12,r12,1
    1698:	003dc906 	br	dc0 <___vfprintf_internal_r+0x130>
    169c:	28803fcc 	andi	r2,r5,255
    16a0:	1080201c 	xori	r2,r2,128
    16a4:	10bfe004 	addi	r2,r2,-128
    16a8:	bf000003 	ldbu	fp,0(r23)
    16ac:	10000c1e 	bne	r2,zero,16e0 <___vfprintf_internal_r+0xa50>
    16b0:	e2c03fcc 	andi	r11,fp,255
    16b4:	5ac0201c 	xori	r11,r11,128
    16b8:	01000044 	movi	r4,1
    16bc:	01400804 	movi	r5,32
    16c0:	5affe004 	addi	r11,r11,-128
    16c4:	003dbe06 	br	dc0 <___vfprintf_internal_r+0x130>
    16c8:	bac00007 	ldb	r11,0(r23)
    16cc:	58801b18 	cmpnei	r2,r11,108
    16d0:	1002a71e 	bne	r2,zero,2170 <___vfprintf_internal_r+0x14e0>
    16d4:	bf000043 	ldbu	fp,1(r23)
    16d8:	63000814 	ori	r12,r12,32
    16dc:	bdc00044 	addi	r23,r23,1
    16e0:	e2c03fcc 	andi	r11,fp,255
    16e4:	5ac0201c 	xori	r11,r11,128
    16e8:	5affe004 	addi	r11,r11,-128
    16ec:	003db406 	br	dc0 <___vfprintf_internal_r+0x130>
    16f0:	21003fcc 	andi	r4,r4,255
    16f4:	20050b1e 	bne	r4,zero,2b24 <___vfprintf_internal_r+0x1e94>
    16f8:	00800074 	movhi	r2,1
    16fc:	10832304 	addi	r2,r2,3212
    1700:	d8800c15 	stw	r2,48(sp)
    1704:	6080080c 	andi	r2,r12,32
    1708:	10005b26 	beq	r2,zero,1878 <___vfprintf_internal_r+0xbe8>
    170c:	d8800617 	ldw	r2,24(sp)
    1710:	15000017 	ldw	r20,0(r2)
    1714:	15400117 	ldw	r21,4(r2)
    1718:	10800204 	addi	r2,r2,8
    171c:	d8800615 	stw	r2,24(sp)
    1720:	6080004c 	andi	r2,r12,1
    1724:	10000226 	beq	r2,zero,1730 <___vfprintf_internal_r+0xaa0>
    1728:	a544b03a 	or	r2,r20,r21
    172c:	10029c1e 	bne	r2,zero,21a0 <___vfprintf_internal_r+0x1510>
    1730:	00800084 	movi	r2,2
    1734:	003ea206 	br	11c0 <___vfprintf_internal_r+0x530>
    1738:	d8800617 	ldw	r2,24(sp)
    173c:	d8001345 	stb	zero,77(sp)
    1740:	14400017 	ldw	r17,0(r2)
    1744:	10c00104 	addi	r3,r2,4
    1748:	8802ba26 	beq	r17,zero,2234 <___vfprintf_internal_r+0x15a4>
    174c:	40bfffe0 	cmpeqi	r2,r8,-1
    1750:	1003c61e 	bne	r2,zero,266c <___vfprintf_internal_r+0x19dc>
    1754:	400d883a 	mov	r6,r8
    1758:	000b883a 	mov	r5,zero
    175c:	8809883a 	mov	r4,r17
    1760:	d8c00715 	stw	r3,28(sp)
    1764:	db000615 	stw	r12,24(sp)
    1768:	da000415 	stw	r8,16(sp)
    176c:	000633c0 	call	633c <memchr>
    1770:	da000417 	ldw	r8,16(sp)
    1774:	db000617 	ldw	r12,24(sp)
    1778:	d8c00717 	ldw	r3,28(sp)
    177c:	1004d126 	beq	r2,zero,2ac4 <___vfprintf_internal_r+0x1e34>
    1780:	146bc83a 	sub	r21,r2,r17
    1784:	a829883a 	mov	r20,r21
    1788:	d8c00615 	stw	r3,24(sp)
    178c:	003e0506 	br	fa4 <___vfprintf_internal_r+0x314>
    1790:	bac00007 	ldb	r11,0(r23)
    1794:	63000814 	ori	r12,r12,32
    1798:	003d8906 	br	dc0 <___vfprintf_internal_r+0x130>
    179c:	d8c00617 	ldw	r3,24(sp)
    17a0:	00800c04 	movi	r2,48
    17a4:	d8801385 	stb	r2,78(sp)
    17a8:	00801e04 	movi	r2,120
    17ac:	01000074 	movhi	r4,1
    17b0:	d88013c5 	stb	r2,79(sp)
    17b4:	18800104 	addi	r2,r3,4
    17b8:	d8800615 	stw	r2,24(sp)
    17bc:	20832304 	addi	r2,r4,3212
    17c0:	d8800c15 	stw	r2,48(sp)
    17c4:	1d000017 	ldw	r20,0(r3)
    17c8:	002b883a 	mov	r21,zero
    17cc:	63000094 	ori	r12,r12,2
    17d0:	00800084 	movi	r2,2
    17d4:	07001e04 	movi	fp,120
    17d8:	003e7906 	br	11c0 <___vfprintf_internal_r+0x530>
    17dc:	21003fcc 	andi	r4,r4,255
    17e0:	2004ca1e 	bne	r4,zero,2b0c <___vfprintf_internal_r+0x1e7c>
    17e4:	d9000617 	ldw	r4,24(sp)
    17e8:	6080080c 	andi	r2,r12,32
    17ec:	20c00104 	addi	r3,r4,4
    17f0:	1002711e 	bne	r2,zero,21b8 <___vfprintf_internal_r+0x1528>
    17f4:	6080040c 	andi	r2,r12,16
    17f8:	1002dc1e 	bne	r2,zero,236c <___vfprintf_internal_r+0x16dc>
    17fc:	6300100c 	andi	r12,r12,64
    1800:	6002da26 	beq	r12,zero,236c <___vfprintf_internal_r+0x16dc>
    1804:	d8800617 	ldw	r2,24(sp)
    1808:	d8c00615 	stw	r3,24(sp)
    180c:	d8c00517 	ldw	r3,20(sp)
    1810:	10800017 	ldw	r2,0(r2)
    1814:	10c0000d 	sth	r3,0(r2)
    1818:	003d5106 	br	d60 <___vfprintf_internal_r+0xd0>
    181c:	bac00007 	ldb	r11,0(r23)
    1820:	63000214 	ori	r12,r12,8
    1824:	003d6606 	br	dc0 <___vfprintf_internal_r+0x130>
    1828:	bac00007 	ldb	r11,0(r23)
    182c:	63001014 	ori	r12,r12,64
    1830:	003d6306 	br	dc0 <___vfprintf_internal_r+0x130>
    1834:	d8c00617 	ldw	r3,24(sp)
    1838:	d8001345 	stb	zero,77(sp)
    183c:	05000044 	movi	r20,1
    1840:	18800017 	ldw	r2,0(r3)
    1844:	18c00104 	addi	r3,r3,4
    1848:	d8c00615 	stw	r3,24(sp)
    184c:	d8801d05 	stb	r2,116(sp)
    1850:	05400044 	movi	r21,1
    1854:	dc401d04 	addi	r17,sp,116
    1858:	003dd206 	br	fa4 <___vfprintf_internal_r+0x314>
    185c:	21003fcc 	andi	r4,r4,255
    1860:	2004b21e 	bne	r4,zero,2b2c <___vfprintf_internal_r+0x1e9c>
    1864:	00800074 	movhi	r2,1
    1868:	10832804 	addi	r2,r2,3232
    186c:	d8800c15 	stw	r2,48(sp)
    1870:	6080080c 	andi	r2,r12,32
    1874:	103fa51e 	bne	r2,zero,170c <___vfprintf_internal_r+0xa7c>
    1878:	d8c00617 	ldw	r3,24(sp)
    187c:	6080040c 	andi	r2,r12,16
    1880:	1d000017 	ldw	r20,0(r3)
    1884:	18c00104 	addi	r3,r3,4
    1888:	d8c00615 	stw	r3,24(sp)
    188c:	10022f1e 	bne	r2,zero,214c <___vfprintf_internal_r+0x14bc>
    1890:	6080100c 	andi	r2,r12,64
    1894:	10022d26 	beq	r2,zero,214c <___vfprintf_internal_r+0x14bc>
    1898:	a53fffcc 	andi	r20,r20,65535
    189c:	002b883a 	mov	r21,zero
    18a0:	003f9f06 	br	1720 <___vfprintf_internal_r+0xa90>
    18a4:	e2c01990 	cmplti	r11,fp,102
    18a8:	5800fb1e 	bne	r11,zero,1c98 <___vfprintf_internal_r+0x1008>
    18ac:	d9000917 	ldw	r4,36(sp)
    18b0:	d9400a17 	ldw	r5,40(sp)
    18b4:	000d883a 	mov	r6,zero
    18b8:	000f883a 	mov	r7,zero
    18bc:	d8c00e15 	stw	r3,56(sp)
    18c0:	000c5fc0 	call	c5fc <__eqdf2>
    18c4:	d8c00e17 	ldw	r3,56(sp)
    18c8:	1001891e 	bne	r2,zero,1ef0 <___vfprintf_internal_r+0x1260>
    18cc:	d8801b17 	ldw	r2,108(sp)
    18d0:	01000074 	movhi	r4,1
    18d4:	21032f04 	addi	r4,r4,3260
    18d8:	10800044 	addi	r2,r2,1
    18dc:	18c00044 	addi	r3,r3,1
    18e0:	b1000015 	stw	r4,0(r22)
    18e4:	01000044 	movi	r4,1
    18e8:	d8801b15 	stw	r2,108(sp)
    18ec:	b1000115 	stw	r4,4(r22)
    18f0:	d8c01c15 	stw	r3,112(sp)
    18f4:	10800208 	cmpgei	r2,r2,8
    18f8:	10034a1e 	bne	r2,zero,2624 <___vfprintf_internal_r+0x1994>
    18fc:	b5800204 	addi	r22,r22,8
    1900:	d8801417 	ldw	r2,80(sp)
    1904:	d9000817 	ldw	r4,32(sp)
    1908:	1102150e 	bge	r2,r4,2160 <___vfprintf_internal_r+0x14d0>
    190c:	d8800d17 	ldw	r2,52(sp)
    1910:	d9000b17 	ldw	r4,44(sp)
    1914:	b0800015 	stw	r2,0(r22)
    1918:	d8801b17 	ldw	r2,108(sp)
    191c:	1907883a 	add	r3,r3,r4
    1920:	b1000115 	stw	r4,4(r22)
    1924:	10800044 	addi	r2,r2,1
    1928:	d8801b15 	stw	r2,108(sp)
    192c:	d8c01c15 	stw	r3,112(sp)
    1930:	10800208 	cmpgei	r2,r2,8
    1934:	1002371e 	bne	r2,zero,2214 <___vfprintf_internal_r+0x1584>
    1938:	b5800204 	addi	r22,r22,8
    193c:	d8800817 	ldw	r2,32(sp)
    1940:	157fffc4 	addi	r21,r2,-1
    1944:	057dd00e 	bge	zero,r21,1088 <___vfprintf_internal_r+0x3f8>
    1948:	01c00074 	movhi	r7,1
    194c:	a9000450 	cmplti	r4,r21,17
    1950:	d8801b17 	ldw	r2,108(sp)
    1954:	39c33004 	addi	r7,r7,3264
    1958:	20032e1e 	bne	r4,zero,2614 <___vfprintf_internal_r+0x1984>
    195c:	07000404 	movi	fp,16
    1960:	3823883a 	mov	r17,r7
    1964:	00000406 	br	1978 <___vfprintf_internal_r+0xce8>
    1968:	b5800204 	addi	r22,r22,8
    196c:	ad7ffc04 	addi	r21,r21,-16
    1970:	a9000448 	cmpgei	r4,r21,17
    1974:	20032626 	beq	r4,zero,2610 <___vfprintf_internal_r+0x1980>
    1978:	10800044 	addi	r2,r2,1
    197c:	18c00404 	addi	r3,r3,16
    1980:	b4400015 	stw	r17,0(r22)
    1984:	b7000115 	stw	fp,4(r22)
    1988:	d8c01c15 	stw	r3,112(sp)
    198c:	d8801b15 	stw	r2,108(sp)
    1990:	11000208 	cmpgei	r4,r2,8
    1994:	203ff426 	beq	r4,zero,1968 <___vfprintf_internal_r+0xcd8>
    1998:	d9801a04 	addi	r6,sp,104
    199c:	900b883a 	mov	r5,r18
    19a0:	9809883a 	mov	r4,r19
    19a4:	00080e00 	call	80e0 <__sprint_r>
    19a8:	103dc81e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    19ac:	d8c01c17 	ldw	r3,112(sp)
    19b0:	d8801b17 	ldw	r2,108(sp)
    19b4:	dd802704 	addi	r22,sp,156
    19b8:	003fec06 	br	196c <___vfprintf_internal_r+0xcdc>
    19bc:	8519c83a 	sub	r12,r16,r20
    19c0:	033da20e 	bge	zero,r12,104c <___vfprintf_internal_r+0x3bc>
    19c4:	01c00074 	movhi	r7,1
    19c8:	61000450 	cmplti	r4,r12,17
    19cc:	d8801b17 	ldw	r2,108(sp)
    19d0:	39c33004 	addi	r7,r7,3264
    19d4:	2000281e 	bne	r4,zero,1a78 <___vfprintf_internal_r+0xde8>
    19d8:	dc400e15 	stw	r17,56(sp)
    19dc:	dc000f15 	stw	r16,60(sp)
    19e0:	b009883a 	mov	r4,r22
    19e4:	03400404 	movi	r13,16
    19e8:	a02d883a 	mov	r22,r20
    19ec:	6021883a 	mov	r16,r12
    19f0:	4029883a 	mov	r20,r8
    19f4:	3823883a 	mov	r17,r7
    19f8:	00000406 	br	1a0c <___vfprintf_internal_r+0xd7c>
    19fc:	843ffc04 	addi	r16,r16,-16
    1a00:	81400448 	cmpgei	r5,r16,17
    1a04:	21000204 	addi	r4,r4,8
    1a08:	28001426 	beq	r5,zero,1a5c <___vfprintf_internal_r+0xdcc>
    1a0c:	10800044 	addi	r2,r2,1
    1a10:	18c00404 	addi	r3,r3,16
    1a14:	24400015 	stw	r17,0(r4)
    1a18:	23400115 	stw	r13,4(r4)
    1a1c:	d8c01c15 	stw	r3,112(sp)
    1a20:	d8801b15 	stw	r2,108(sp)
    1a24:	11400208 	cmpgei	r5,r2,8
    1a28:	283ff426 	beq	r5,zero,19fc <___vfprintf_internal_r+0xd6c>
    1a2c:	d9801a04 	addi	r6,sp,104
    1a30:	900b883a 	mov	r5,r18
    1a34:	9809883a 	mov	r4,r19
    1a38:	00080e00 	call	80e0 <__sprint_r>
    1a3c:	103da31e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    1a40:	843ffc04 	addi	r16,r16,-16
    1a44:	81400448 	cmpgei	r5,r16,17
    1a48:	d8c01c17 	ldw	r3,112(sp)
    1a4c:	d8801b17 	ldw	r2,108(sp)
    1a50:	d9002704 	addi	r4,sp,156
    1a54:	03400404 	movi	r13,16
    1a58:	283fec1e 	bne	r5,zero,1a0c <___vfprintf_internal_r+0xd7c>
    1a5c:	8019883a 	mov	r12,r16
    1a60:	880f883a 	mov	r7,r17
    1a64:	dc000f17 	ldw	r16,60(sp)
    1a68:	dc400e17 	ldw	r17,56(sp)
    1a6c:	a011883a 	mov	r8,r20
    1a70:	b029883a 	mov	r20,r22
    1a74:	202d883a 	mov	r22,r4
    1a78:	10800044 	addi	r2,r2,1
    1a7c:	1b07883a 	add	r3,r3,r12
    1a80:	d8801b15 	stw	r2,108(sp)
    1a84:	b1c00015 	stw	r7,0(r22)
    1a88:	b3000115 	stw	r12,4(r22)
    1a8c:	d8c01c15 	stw	r3,112(sp)
    1a90:	10800208 	cmpgei	r2,r2,8
    1a94:	1002eb1e 	bne	r2,zero,2644 <___vfprintf_internal_r+0x19b4>
    1a98:	4551c83a 	sub	r8,r8,r21
    1a9c:	b5800204 	addi	r22,r22,8
    1aa0:	023d6c0e 	bge	zero,r8,1054 <___vfprintf_internal_r+0x3c4>
    1aa4:	01c00074 	movhi	r7,1
    1aa8:	41000450 	cmplti	r4,r8,17
    1aac:	d8801b17 	ldw	r2,108(sp)
    1ab0:	39c33004 	addi	r7,r7,3264
    1ab4:	2000221e 	bne	r4,zero,1b40 <___vfprintf_internal_r+0xeb0>
    1ab8:	dc400e15 	stw	r17,56(sp)
    1abc:	dc000f15 	stw	r16,60(sp)
    1ac0:	03000404 	movi	r12,16
    1ac4:	4021883a 	mov	r16,r8
    1ac8:	3823883a 	mov	r17,r7
    1acc:	00000406 	br	1ae0 <___vfprintf_internal_r+0xe50>
    1ad0:	843ffc04 	addi	r16,r16,-16
    1ad4:	81000448 	cmpgei	r4,r16,17
    1ad8:	b5800204 	addi	r22,r22,8
    1adc:	20001426 	beq	r4,zero,1b30 <___vfprintf_internal_r+0xea0>
    1ae0:	10800044 	addi	r2,r2,1
    1ae4:	18c00404 	addi	r3,r3,16
    1ae8:	b4400015 	stw	r17,0(r22)
    1aec:	b3000115 	stw	r12,4(r22)
    1af0:	d8c01c15 	stw	r3,112(sp)
    1af4:	d8801b15 	stw	r2,108(sp)
    1af8:	11000208 	cmpgei	r4,r2,8
    1afc:	203ff426 	beq	r4,zero,1ad0 <___vfprintf_internal_r+0xe40>
    1b00:	d9801a04 	addi	r6,sp,104
    1b04:	900b883a 	mov	r5,r18
    1b08:	9809883a 	mov	r4,r19
    1b0c:	00080e00 	call	80e0 <__sprint_r>
    1b10:	103d6e1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    1b14:	843ffc04 	addi	r16,r16,-16
    1b18:	81000448 	cmpgei	r4,r16,17
    1b1c:	d8c01c17 	ldw	r3,112(sp)
    1b20:	d8801b17 	ldw	r2,108(sp)
    1b24:	dd802704 	addi	r22,sp,156
    1b28:	03000404 	movi	r12,16
    1b2c:	203fec1e 	bne	r4,zero,1ae0 <___vfprintf_internal_r+0xe50>
    1b30:	8011883a 	mov	r8,r16
    1b34:	880f883a 	mov	r7,r17
    1b38:	dc000f17 	ldw	r16,60(sp)
    1b3c:	dc400e17 	ldw	r17,56(sp)
    1b40:	10800044 	addi	r2,r2,1
    1b44:	1a07883a 	add	r3,r3,r8
    1b48:	d8801b15 	stw	r2,108(sp)
    1b4c:	b1c00015 	stw	r7,0(r22)
    1b50:	b2000115 	stw	r8,4(r22)
    1b54:	d8c01c15 	stw	r3,112(sp)
    1b58:	10800208 	cmpgei	r2,r2,8
    1b5c:	1001731e 	bne	r2,zero,212c <___vfprintf_internal_r+0x149c>
    1b60:	b5800204 	addi	r22,r22,8
    1b64:	003d3b06 	br	1054 <___vfprintf_internal_r+0x3c4>
    1b68:	10c00060 	cmpeqi	r3,r2,1
    1b6c:	1803831e 	bne	r3,zero,297c <___vfprintf_internal_r+0x1cec>
    1b70:	108000a0 	cmpeqi	r2,r2,2
    1b74:	db000417 	ldw	r12,16(sp)
    1b78:	103ea326 	beq	r2,zero,1608 <___vfprintf_internal_r+0x978>
    1b7c:	d9000c17 	ldw	r4,48(sp)
    1b80:	dc402704 	addi	r17,sp,156
    1b84:	a08003cc 	andi	r2,r20,15
    1b88:	a806973a 	slli	r3,r21,28
    1b8c:	a028d13a 	srli	r20,r20,4
    1b90:	2085883a 	add	r2,r4,r2
    1b94:	10800003 	ldbu	r2,0(r2)
    1b98:	a82ad13a 	srli	r21,r21,4
    1b9c:	1d28b03a 	or	r20,r3,r20
    1ba0:	88bfffc5 	stb	r2,-1(r17)
    1ba4:	a544b03a 	or	r2,r20,r21
    1ba8:	8c7fffc4 	addi	r17,r17,-1
    1bac:	103ff51e 	bne	r2,zero,1b84 <___vfprintf_internal_r+0xef4>
    1bb0:	d8802704 	addi	r2,sp,156
    1bb4:	146bc83a 	sub	r21,r2,r17
    1bb8:	db000415 	stw	r12,16(sp)
    1bbc:	003e4b06 	br	14ec <___vfprintf_internal_r+0x85c>
    1bc0:	d9801a04 	addi	r6,sp,104
    1bc4:	900b883a 	mov	r5,r18
    1bc8:	9809883a 	mov	r4,r19
    1bcc:	00080e00 	call	80e0 <__sprint_r>
    1bd0:	103d3826 	beq	r2,zero,10b4 <___vfprintf_internal_r+0x424>
    1bd4:	003d3d06 	br	10cc <___vfprintf_internal_r+0x43c>
    1bd8:	d8801b17 	ldw	r2,108(sp)
    1bdc:	01000074 	movhi	r4,1
    1be0:	21032f04 	addi	r4,r4,3260
    1be4:	10800044 	addi	r2,r2,1
    1be8:	18c00044 	addi	r3,r3,1
    1bec:	b1000015 	stw	r4,0(r22)
    1bf0:	01000044 	movi	r4,1
    1bf4:	d8801b15 	stw	r2,108(sp)
    1bf8:	b1000115 	stw	r4,4(r22)
    1bfc:	d8c01c15 	stw	r3,112(sp)
    1c00:	10800208 	cmpgei	r2,r2,8
    1c04:	1003211e 	bne	r2,zero,288c <___vfprintf_internal_r+0x1bfc>
    1c08:	b5800204 	addi	r22,r22,8
    1c0c:	2802a51e 	bne	r5,zero,26a4 <___vfprintf_internal_r+0x1a14>
    1c10:	d8800417 	ldw	r2,16(sp)
    1c14:	d9000817 	ldw	r4,32(sp)
    1c18:	1080004c 	andi	r2,r2,1
    1c1c:	1104b03a 	or	r2,r2,r4
    1c20:	103d1926 	beq	r2,zero,1088 <___vfprintf_internal_r+0x3f8>
    1c24:	d8800d17 	ldw	r2,52(sp)
    1c28:	d9000b17 	ldw	r4,44(sp)
    1c2c:	b0800015 	stw	r2,0(r22)
    1c30:	d8801b17 	ldw	r2,108(sp)
    1c34:	20c7883a 	add	r3,r4,r3
    1c38:	b1000115 	stw	r4,4(r22)
    1c3c:	10800044 	addi	r2,r2,1
    1c40:	d8c01c15 	stw	r3,112(sp)
    1c44:	d8801b15 	stw	r2,108(sp)
    1c48:	11000208 	cmpgei	r4,r2,8
    1c4c:	2003381e 	bne	r4,zero,2930 <___vfprintf_internal_r+0x1ca0>
    1c50:	b5800204 	addi	r22,r22,8
    1c54:	d9000817 	ldw	r4,32(sp)
    1c58:	10800044 	addi	r2,r2,1
    1c5c:	d8801b15 	stw	r2,108(sp)
    1c60:	20c7883a 	add	r3,r4,r3
    1c64:	b4400015 	stw	r17,0(r22)
    1c68:	b1000115 	stw	r4,4(r22)
    1c6c:	d8c01c15 	stw	r3,112(sp)
    1c70:	10800208 	cmpgei	r2,r2,8
    1c74:	103d0326 	beq	r2,zero,1084 <___vfprintf_internal_r+0x3f4>
    1c78:	d9801a04 	addi	r6,sp,104
    1c7c:	900b883a 	mov	r5,r18
    1c80:	9809883a 	mov	r4,r19
    1c84:	00080e00 	call	80e0 <__sprint_r>
    1c88:	103d101e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    1c8c:	d8c01c17 	ldw	r3,112(sp)
    1c90:	dd802704 	addi	r22,sp,156
    1c94:	003cfc06 	br	1088 <___vfprintf_internal_r+0x3f8>
    1c98:	d8800817 	ldw	r2,32(sp)
    1c9c:	dd401b17 	ldw	r21,108(sp)
    1ca0:	18c00044 	addi	r3,r3,1
    1ca4:	10800088 	cmpgei	r2,r2,2
    1ca8:	ad400044 	addi	r21,r21,1
    1cac:	b7000204 	addi	fp,r22,8
    1cb0:	1000e826 	beq	r2,zero,2054 <___vfprintf_internal_r+0x13c4>
    1cb4:	00800044 	movi	r2,1
    1cb8:	b0800115 	stw	r2,4(r22)
    1cbc:	b4400015 	stw	r17,0(r22)
    1cc0:	d8c01c15 	stw	r3,112(sp)
    1cc4:	dd401b15 	stw	r21,108(sp)
    1cc8:	a8800210 	cmplti	r2,r21,8
    1ccc:	1001ad26 	beq	r2,zero,2384 <___vfprintf_internal_r+0x16f4>
    1cd0:	d8800b17 	ldw	r2,44(sp)
    1cd4:	d9000d17 	ldw	r4,52(sp)
    1cd8:	ad400044 	addi	r21,r21,1
    1cdc:	1887883a 	add	r3,r3,r2
    1ce0:	e0800115 	stw	r2,4(fp)
    1ce4:	e1000015 	stw	r4,0(fp)
    1ce8:	d8c01c15 	stw	r3,112(sp)
    1cec:	dd401b15 	stw	r21,108(sp)
    1cf0:	a8800208 	cmpgei	r2,r21,8
    1cf4:	1001ac1e 	bne	r2,zero,23a8 <___vfprintf_internal_r+0x1718>
    1cf8:	e7000204 	addi	fp,fp,8
    1cfc:	d9000917 	ldw	r4,36(sp)
    1d00:	d9400a17 	ldw	r5,40(sp)
    1d04:	000d883a 	mov	r6,zero
    1d08:	000f883a 	mov	r7,zero
    1d0c:	d8c00715 	stw	r3,28(sp)
    1d10:	000c5fc0 	call	c5fc <__eqdf2>
    1d14:	d8c00817 	ldw	r3,32(sp)
    1d18:	1dbfffc4 	addi	r22,r3,-1
    1d1c:	d8c00717 	ldw	r3,28(sp)
    1d20:	1000e426 	beq	r2,zero,20b4 <___vfprintf_internal_r+0x1424>
    1d24:	8a400044 	addi	r9,r17,1
    1d28:	ad400044 	addi	r21,r21,1
    1d2c:	1d87883a 	add	r3,r3,r22
    1d30:	e2400015 	stw	r9,0(fp)
    1d34:	e5800115 	stw	r22,4(fp)
    1d38:	d8c01c15 	stw	r3,112(sp)
    1d3c:	dd401b15 	stw	r21,108(sp)
    1d40:	a8800208 	cmpgei	r2,r21,8
    1d44:	1000cd1e 	bne	r2,zero,207c <___vfprintf_internal_r+0x13ec>
    1d48:	e7000204 	addi	fp,fp,8
    1d4c:	d9001017 	ldw	r4,64(sp)
    1d50:	ad400044 	addi	r21,r21,1
    1d54:	d8801644 	addi	r2,sp,89
    1d58:	20c7883a 	add	r3,r4,r3
    1d5c:	dd401b15 	stw	r21,108(sp)
    1d60:	e0800015 	stw	r2,0(fp)
    1d64:	e1000115 	stw	r4,4(fp)
    1d68:	d8c01c15 	stw	r3,112(sp)
    1d6c:	ad400208 	cmpgei	r21,r21,8
    1d70:	a83fc11e 	bne	r21,zero,1c78 <___vfprintf_internal_r+0xfe8>
    1d74:	e5800204 	addi	r22,fp,8
    1d78:	003cc306 	br	1088 <___vfprintf_internal_r+0x3f8>
    1d7c:	db000417 	ldw	r12,16(sp)
    1d80:	003e1d06 	br	15f8 <___vfprintf_internal_r+0x968>
    1d84:	03000074 	movhi	r12,1
    1d88:	39000450 	cmplti	r4,r7,17
    1d8c:	d8801b17 	ldw	r2,108(sp)
    1d90:	63033404 	addi	r12,r12,3280
    1d94:	2000321e 	bne	r4,zero,1e60 <___vfprintf_internal_r+0x11d0>
    1d98:	dc401115 	stw	r17,68(sp)
    1d9c:	b009883a 	mov	r4,r22
    1da0:	9023883a 	mov	r17,r18
    1da4:	a82d883a 	mov	r22,r21
    1da8:	ddc01215 	stw	r23,72(sp)
    1dac:	03c00404 	movi	r15,16
    1db0:	a02f883a 	mov	r23,r20
    1db4:	db800e15 	stw	r14,56(sp)
    1db8:	8029883a 	mov	r20,r16
    1dbc:	db400f15 	stw	r13,60(sp)
    1dc0:	402b883a 	mov	r21,r8
    1dc4:	3821883a 	mov	r16,r7
    1dc8:	6025883a 	mov	r18,r12
    1dcc:	00000406 	br	1de0 <___vfprintf_internal_r+0x1150>
    1dd0:	843ffc04 	addi	r16,r16,-16
    1dd4:	81800448 	cmpgei	r6,r16,17
    1dd8:	21000204 	addi	r4,r4,8
    1ddc:	30001426 	beq	r6,zero,1e30 <___vfprintf_internal_r+0x11a0>
    1de0:	10800044 	addi	r2,r2,1
    1de4:	18c00404 	addi	r3,r3,16
    1de8:	24800015 	stw	r18,0(r4)
    1dec:	23c00115 	stw	r15,4(r4)
    1df0:	d8c01c15 	stw	r3,112(sp)
    1df4:	d8801b15 	stw	r2,108(sp)
    1df8:	11800208 	cmpgei	r6,r2,8
    1dfc:	303ff426 	beq	r6,zero,1dd0 <___vfprintf_internal_r+0x1140>
    1e00:	d9801a04 	addi	r6,sp,104
    1e04:	880b883a 	mov	r5,r17
    1e08:	9809883a 	mov	r4,r19
    1e0c:	00080e00 	call	80e0 <__sprint_r>
    1e10:	10017c1e 	bne	r2,zero,2404 <___vfprintf_internal_r+0x1774>
    1e14:	843ffc04 	addi	r16,r16,-16
    1e18:	81800448 	cmpgei	r6,r16,17
    1e1c:	d8c01c17 	ldw	r3,112(sp)
    1e20:	d8801b17 	ldw	r2,108(sp)
    1e24:	d9002704 	addi	r4,sp,156
    1e28:	03c00404 	movi	r15,16
    1e2c:	303fec1e 	bne	r6,zero,1de0 <___vfprintf_internal_r+0x1150>
    1e30:	800f883a 	mov	r7,r16
    1e34:	9019883a 	mov	r12,r18
    1e38:	a021883a 	mov	r16,r20
    1e3c:	8825883a 	mov	r18,r17
    1e40:	b829883a 	mov	r20,r23
    1e44:	db800e17 	ldw	r14,56(sp)
    1e48:	db400f17 	ldw	r13,60(sp)
    1e4c:	ddc01217 	ldw	r23,72(sp)
    1e50:	dc401117 	ldw	r17,68(sp)
    1e54:	a811883a 	mov	r8,r21
    1e58:	b02b883a 	mov	r21,r22
    1e5c:	202d883a 	mov	r22,r4
    1e60:	10800044 	addi	r2,r2,1
    1e64:	19c7883a 	add	r3,r3,r7
    1e68:	d8801b15 	stw	r2,108(sp)
    1e6c:	b3000015 	stw	r12,0(r22)
    1e70:	b1c00115 	stw	r7,4(r22)
    1e74:	d8c01c15 	stw	r3,112(sp)
    1e78:	10800208 	cmpgei	r2,r2,8
    1e7c:	1001531e 	bne	r2,zero,23cc <___vfprintf_internal_r+0x173c>
    1e80:	b5800204 	addi	r22,r22,8
    1e84:	003c5406 	br	fd8 <___vfprintf_internal_r+0x348>
    1e88:	d9801a04 	addi	r6,sp,104
    1e8c:	900b883a 	mov	r5,r18
    1e90:	9809883a 	mov	r4,r19
    1e94:	da001115 	stw	r8,68(sp)
    1e98:	db400f15 	stw	r13,60(sp)
    1e9c:	db800e15 	stw	r14,56(sp)
    1ea0:	00080e00 	call	80e0 <__sprint_r>
    1ea4:	103c891e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    1ea8:	d8c01c17 	ldw	r3,112(sp)
    1eac:	da001117 	ldw	r8,68(sp)
    1eb0:	db400f17 	ldw	r13,60(sp)
    1eb4:	db800e17 	ldw	r14,56(sp)
    1eb8:	dd802704 	addi	r22,sp,156
    1ebc:	003c5406 	br	1010 <___vfprintf_internal_r+0x380>
    1ec0:	d9801a04 	addi	r6,sp,104
    1ec4:	900b883a 	mov	r5,r18
    1ec8:	9809883a 	mov	r4,r19
    1ecc:	da000f15 	stw	r8,60(sp)
    1ed0:	db400e15 	stw	r13,56(sp)
    1ed4:	00080e00 	call	80e0 <__sprint_r>
    1ed8:	103c7c1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    1edc:	d8c01c17 	ldw	r3,112(sp)
    1ee0:	da000f17 	ldw	r8,60(sp)
    1ee4:	db400e17 	ldw	r13,56(sp)
    1ee8:	dd802704 	addi	r22,sp,156
    1eec:	003c5506 	br	1044 <___vfprintf_internal_r+0x3b4>
    1ef0:	d9401417 	ldw	r5,80(sp)
    1ef4:	017f380e 	bge	zero,r5,1bd8 <___vfprintf_internal_r+0xf48>
    1ef8:	d8800717 	ldw	r2,28(sp)
    1efc:	d9000817 	ldw	r4,32(sp)
    1f00:	102b883a 	mov	r21,r2
    1f04:	2080b316 	blt	r4,r2,21d4 <___vfprintf_internal_r+0x1544>
    1f08:	05400a0e 	bge	zero,r21,1f34 <___vfprintf_internal_r+0x12a4>
    1f0c:	d8801b17 	ldw	r2,108(sp)
    1f10:	1d47883a 	add	r3,r3,r21
    1f14:	b4400015 	stw	r17,0(r22)
    1f18:	10800044 	addi	r2,r2,1
    1f1c:	d8801b15 	stw	r2,108(sp)
    1f20:	b5400115 	stw	r21,4(r22)
    1f24:	d8c01c15 	stw	r3,112(sp)
    1f28:	10800208 	cmpgei	r2,r2,8
    1f2c:	1002cf1e 	bne	r2,zero,2a6c <___vfprintf_internal_r+0x1ddc>
    1f30:	b5800204 	addi	r22,r22,8
    1f34:	a800b516 	blt	r21,zero,220c <___vfprintf_internal_r+0x157c>
    1f38:	d8800717 	ldw	r2,28(sp)
    1f3c:	156bc83a 	sub	r21,r2,r21
    1f40:	0540c416 	blt	zero,r21,2254 <___vfprintf_internal_r+0x15c4>
    1f44:	dd401417 	ldw	r21,80(sp)
    1f48:	d8800817 	ldw	r2,32(sp)
    1f4c:	a880a40e 	bge	r21,r2,21e0 <___vfprintf_internal_r+0x1550>
    1f50:	d8800d17 	ldw	r2,52(sp)
    1f54:	d9000b17 	ldw	r4,44(sp)
    1f58:	b0800015 	stw	r2,0(r22)
    1f5c:	d8801b17 	ldw	r2,108(sp)
    1f60:	1907883a 	add	r3,r3,r4
    1f64:	b1000115 	stw	r4,4(r22)
    1f68:	10800044 	addi	r2,r2,1
    1f6c:	d8801b15 	stw	r2,108(sp)
    1f70:	d8c01c15 	stw	r3,112(sp)
    1f74:	10800208 	cmpgei	r2,r2,8
    1f78:	1002b31e 	bne	r2,zero,2a48 <___vfprintf_internal_r+0x1db8>
    1f7c:	b5800204 	addi	r22,r22,8
    1f80:	d9000817 	ldw	r4,32(sp)
    1f84:	d9400717 	ldw	r5,28(sp)
    1f88:	2545c83a 	sub	r2,r4,r21
    1f8c:	2149c83a 	sub	r4,r4,r5
    1f90:	102b883a 	mov	r21,r2
    1f94:	2080010e 	bge	r4,r2,1f9c <___vfprintf_internal_r+0x130c>
    1f98:	202b883a 	mov	r21,r4
    1f9c:	05400c0e 	bge	zero,r21,1fd0 <___vfprintf_internal_r+0x1340>
    1fa0:	d9000717 	ldw	r4,28(sp)
    1fa4:	1d47883a 	add	r3,r3,r21
    1fa8:	b5400115 	stw	r21,4(r22)
    1fac:	8913883a 	add	r9,r17,r4
    1fb0:	d9001b17 	ldw	r4,108(sp)
    1fb4:	b2400015 	stw	r9,0(r22)
    1fb8:	d8c01c15 	stw	r3,112(sp)
    1fbc:	21000044 	addi	r4,r4,1
    1fc0:	d9001b15 	stw	r4,108(sp)
    1fc4:	21000208 	cmpgei	r4,r4,8
    1fc8:	2002b31e 	bne	r4,zero,2a98 <___vfprintf_internal_r+0x1e08>
    1fcc:	b5800204 	addi	r22,r22,8
    1fd0:	a800010e 	bge	r21,zero,1fd8 <___vfprintf_internal_r+0x1348>
    1fd4:	002b883a 	mov	r21,zero
    1fd8:	156bc83a 	sub	r21,r2,r21
    1fdc:	057c2a0e 	bge	zero,r21,1088 <___vfprintf_internal_r+0x3f8>
    1fe0:	01c00074 	movhi	r7,1
    1fe4:	a9000450 	cmplti	r4,r21,17
    1fe8:	d8801b17 	ldw	r2,108(sp)
    1fec:	39c33004 	addi	r7,r7,3264
    1ff0:	2001881e 	bne	r4,zero,2614 <___vfprintf_internal_r+0x1984>
    1ff4:	07000404 	movi	fp,16
    1ff8:	3823883a 	mov	r17,r7
    1ffc:	00000406 	br	2010 <___vfprintf_internal_r+0x1380>
    2000:	b5800204 	addi	r22,r22,8
    2004:	ad7ffc04 	addi	r21,r21,-16
    2008:	a9000448 	cmpgei	r4,r21,17
    200c:	20018026 	beq	r4,zero,2610 <___vfprintf_internal_r+0x1980>
    2010:	10800044 	addi	r2,r2,1
    2014:	18c00404 	addi	r3,r3,16
    2018:	b4400015 	stw	r17,0(r22)
    201c:	b7000115 	stw	fp,4(r22)
    2020:	d8c01c15 	stw	r3,112(sp)
    2024:	d8801b15 	stw	r2,108(sp)
    2028:	11000208 	cmpgei	r4,r2,8
    202c:	203ff426 	beq	r4,zero,2000 <___vfprintf_internal_r+0x1370>
    2030:	d9801a04 	addi	r6,sp,104
    2034:	900b883a 	mov	r5,r18
    2038:	9809883a 	mov	r4,r19
    203c:	00080e00 	call	80e0 <__sprint_r>
    2040:	103c221e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2044:	d8c01c17 	ldw	r3,112(sp)
    2048:	d8801b17 	ldw	r2,108(sp)
    204c:	dd802704 	addi	r22,sp,156
    2050:	003fec06 	br	2004 <___vfprintf_internal_r+0x1374>
    2054:	d8800417 	ldw	r2,16(sp)
    2058:	1080004c 	andi	r2,r2,1
    205c:	103f151e 	bne	r2,zero,1cb4 <___vfprintf_internal_r+0x1024>
    2060:	00800044 	movi	r2,1
    2064:	b0800115 	stw	r2,4(r22)
    2068:	b4400015 	stw	r17,0(r22)
    206c:	d8c01c15 	stw	r3,112(sp)
    2070:	dd401b15 	stw	r21,108(sp)
    2074:	a8800210 	cmplti	r2,r21,8
    2078:	103f341e 	bne	r2,zero,1d4c <___vfprintf_internal_r+0x10bc>
    207c:	d9801a04 	addi	r6,sp,104
    2080:	900b883a 	mov	r5,r18
    2084:	9809883a 	mov	r4,r19
    2088:	00080e00 	call	80e0 <__sprint_r>
    208c:	103c0f1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2090:	d8c01c17 	ldw	r3,112(sp)
    2094:	dd401b17 	ldw	r21,108(sp)
    2098:	df002704 	addi	fp,sp,156
    209c:	003f2b06 	br	1d4c <___vfprintf_internal_r+0x10bc>
    20a0:	4002361e 	bne	r8,zero,297c <___vfprintf_internal_r+0x1cec>
    20a4:	0011883a 	mov	r8,zero
    20a8:	002b883a 	mov	r21,zero
    20ac:	dc402704 	addi	r17,sp,156
    20b0:	003d0e06 	br	14ec <___vfprintf_internal_r+0x85c>
    20b4:	05bf250e 	bge	zero,r22,1d4c <___vfprintf_internal_r+0x10bc>
    20b8:	01c00074 	movhi	r7,1
    20bc:	b0800450 	cmplti	r2,r22,17
    20c0:	39c33004 	addi	r7,r7,3264
    20c4:	1001731e 	bne	r2,zero,2694 <___vfprintf_internal_r+0x1a04>
    20c8:	dc000715 	stw	r16,28(sp)
    20cc:	04400404 	movi	r17,16
    20d0:	3821883a 	mov	r16,r7
    20d4:	00000406 	br	20e8 <___vfprintf_internal_r+0x1458>
    20d8:	e7000204 	addi	fp,fp,8
    20dc:	b5bffc04 	addi	r22,r22,-16
    20e0:	b0800448 	cmpgei	r2,r22,17
    20e4:	10016926 	beq	r2,zero,268c <___vfprintf_internal_r+0x19fc>
    20e8:	ad400044 	addi	r21,r21,1
    20ec:	18c00404 	addi	r3,r3,16
    20f0:	e4000015 	stw	r16,0(fp)
    20f4:	e4400115 	stw	r17,4(fp)
    20f8:	d8c01c15 	stw	r3,112(sp)
    20fc:	dd401b15 	stw	r21,108(sp)
    2100:	a8800208 	cmpgei	r2,r21,8
    2104:	103ff426 	beq	r2,zero,20d8 <___vfprintf_internal_r+0x1448>
    2108:	d9801a04 	addi	r6,sp,104
    210c:	900b883a 	mov	r5,r18
    2110:	9809883a 	mov	r4,r19
    2114:	00080e00 	call	80e0 <__sprint_r>
    2118:	103bec1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    211c:	d8c01c17 	ldw	r3,112(sp)
    2120:	dd401b17 	ldw	r21,108(sp)
    2124:	df002704 	addi	fp,sp,156
    2128:	003fec06 	br	20dc <___vfprintf_internal_r+0x144c>
    212c:	d9801a04 	addi	r6,sp,104
    2130:	900b883a 	mov	r5,r18
    2134:	9809883a 	mov	r4,r19
    2138:	00080e00 	call	80e0 <__sprint_r>
    213c:	103be31e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2140:	d8c01c17 	ldw	r3,112(sp)
    2144:	dd802704 	addi	r22,sp,156
    2148:	003bc206 	br	1054 <___vfprintf_internal_r+0x3c4>
    214c:	002b883a 	mov	r21,zero
    2150:	003d7306 	br	1720 <___vfprintf_internal_r+0xa90>
    2154:	a02bd7fa 	srai	r21,r20,31
    2158:	a805883a 	mov	r2,r21
    215c:	003cd106 	br	14a4 <___vfprintf_internal_r+0x814>
    2160:	d8800417 	ldw	r2,16(sp)
    2164:	1080004c 	andi	r2,r2,1
    2168:	103bc726 	beq	r2,zero,1088 <___vfprintf_internal_r+0x3f8>
    216c:	003de706 	br	190c <___vfprintf_internal_r+0xc7c>
    2170:	63000414 	ori	r12,r12,16
    2174:	003b1206 	br	dc0 <___vfprintf_internal_r+0x130>
    2178:	bac00007 	ldb	r11,0(r23)
    217c:	d8800615 	stw	r2,24(sp)
    2180:	003b0f06 	br	dc0 <___vfprintf_internal_r+0x130>
    2184:	dc402704 	addi	r17,sp,156
    2188:	003cd806 	br	14ec <___vfprintf_internal_r+0x85c>
    218c:	18800017 	ldw	r2,0(r3)
    2190:	d8800915 	stw	r2,36(sp)
    2194:	18800117 	ldw	r2,4(r3)
    2198:	d8800a15 	stw	r2,40(sp)
    219c:	003c3e06 	br	1298 <___vfprintf_internal_r+0x608>
    21a0:	00800c04 	movi	r2,48
    21a4:	d8801385 	stb	r2,78(sp)
    21a8:	df0013c5 	stb	fp,79(sp)
    21ac:	63000094 	ori	r12,r12,2
    21b0:	00800084 	movi	r2,2
    21b4:	003c0206 	br	11c0 <___vfprintf_internal_r+0x530>
    21b8:	d9400517 	ldw	r5,20(sp)
    21bc:	20800017 	ldw	r2,0(r4)
    21c0:	d8c00615 	stw	r3,24(sp)
    21c4:	2809d7fa 	srai	r4,r5,31
    21c8:	11400015 	stw	r5,0(r2)
    21cc:	11000115 	stw	r4,4(r2)
    21d0:	003ae306 	br	d60 <___vfprintf_internal_r+0xd0>
    21d4:	202b883a 	mov	r21,r4
    21d8:	057f4c16 	blt	zero,r21,1f0c <___vfprintf_internal_r+0x127c>
    21dc:	003f5506 	br	1f34 <___vfprintf_internal_r+0x12a4>
    21e0:	d8800417 	ldw	r2,16(sp)
    21e4:	1080004c 	andi	r2,r2,1
    21e8:	103f591e 	bne	r2,zero,1f50 <___vfprintf_internal_r+0x12c0>
    21ec:	d9000817 	ldw	r4,32(sp)
    21f0:	d9400717 	ldw	r5,28(sp)
    21f4:	2545c83a 	sub	r2,r4,r21
    21f8:	2179c83a 	sub	fp,r4,r5
    21fc:	102b883a 	mov	r21,r2
    2200:	e0bf730e 	bge	fp,r2,1fd0 <___vfprintf_internal_r+0x1340>
    2204:	e02b883a 	mov	r21,fp
    2208:	003f7106 	br	1fd0 <___vfprintf_internal_r+0x1340>
    220c:	002b883a 	mov	r21,zero
    2210:	003f4906 	br	1f38 <___vfprintf_internal_r+0x12a8>
    2214:	d9801a04 	addi	r6,sp,104
    2218:	900b883a 	mov	r5,r18
    221c:	9809883a 	mov	r4,r19
    2220:	00080e00 	call	80e0 <__sprint_r>
    2224:	103ba91e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2228:	d8c01c17 	ldw	r3,112(sp)
    222c:	dd802704 	addi	r22,sp,156
    2230:	003dc206 	br	193c <___vfprintf_internal_r+0xcac>
    2234:	408001f0 	cmpltui	r2,r8,7
    2238:	402b883a 	mov	r21,r8
    223c:	1001a026 	beq	r2,zero,28c0 <___vfprintf_internal_r+0x1c30>
    2240:	04400074 	movhi	r17,1
    2244:	a829883a 	mov	r20,r21
    2248:	d8c00615 	stw	r3,24(sp)
    224c:	8c432d04 	addi	r17,r17,3252
    2250:	003b5406 	br	fa4 <___vfprintf_internal_r+0x314>
    2254:	01c00074 	movhi	r7,1
    2258:	a9000450 	cmplti	r4,r21,17
    225c:	d8801b17 	ldw	r2,108(sp)
    2260:	39c33004 	addi	r7,r7,3264
    2264:	20017b1e 	bne	r4,zero,2854 <___vfprintf_internal_r+0x1bc4>
    2268:	dc000e15 	stw	r16,56(sp)
    226c:	07000404 	movi	fp,16
    2270:	3821883a 	mov	r16,r7
    2274:	00000406 	br	2288 <___vfprintf_internal_r+0x15f8>
    2278:	b5800204 	addi	r22,r22,8
    227c:	ad7ffc04 	addi	r21,r21,-16
    2280:	a9000448 	cmpgei	r4,r21,17
    2284:	20017126 	beq	r4,zero,284c <___vfprintf_internal_r+0x1bbc>
    2288:	10800044 	addi	r2,r2,1
    228c:	18c00404 	addi	r3,r3,16
    2290:	b4000015 	stw	r16,0(r22)
    2294:	b7000115 	stw	fp,4(r22)
    2298:	d8c01c15 	stw	r3,112(sp)
    229c:	d8801b15 	stw	r2,108(sp)
    22a0:	11000208 	cmpgei	r4,r2,8
    22a4:	203ff426 	beq	r4,zero,2278 <___vfprintf_internal_r+0x15e8>
    22a8:	d9801a04 	addi	r6,sp,104
    22ac:	900b883a 	mov	r5,r18
    22b0:	9809883a 	mov	r4,r19
    22b4:	00080e00 	call	80e0 <__sprint_r>
    22b8:	103b841e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    22bc:	d8c01c17 	ldw	r3,112(sp)
    22c0:	d8801b17 	ldw	r2,108(sp)
    22c4:	dd802704 	addi	r22,sp,156
    22c8:	003fec06 	br	227c <___vfprintf_internal_r+0x15ec>
    22cc:	dc402704 	addi	r17,sp,156
    22d0:	a805883a 	mov	r2,r21
    22d4:	dc000715 	stw	r16,28(sp)
    22d8:	902b883a 	mov	r21,r18
    22dc:	8821883a 	mov	r16,r17
    22e0:	db000415 	stw	r12,16(sp)
    22e4:	a023883a 	mov	r17,r20
    22e8:	da000e15 	stw	r8,56(sp)
    22ec:	9829883a 	mov	r20,r19
    22f0:	1025883a 	mov	r18,r2
    22f4:	6827883a 	mov	r19,r13
    22f8:	8809883a 	mov	r4,r17
    22fc:	900b883a 	mov	r5,r18
    2300:	01800284 	movi	r6,10
    2304:	000f883a 	mov	r7,zero
    2308:	000ac580 	call	ac58 <__umoddi3>
    230c:	10800c04 	addi	r2,r2,48
    2310:	8809883a 	mov	r4,r17
    2314:	900b883a 	mov	r5,r18
    2318:	01800284 	movi	r6,10
    231c:	000f883a 	mov	r7,zero
    2320:	80bfffc5 	stb	r2,-1(r16)
    2324:	000a6380 	call	a638 <__udivdi3>
    2328:	900d883a 	mov	r6,r18
    232c:	880f883a 	mov	r7,r17
    2330:	843fffc4 	addi	r16,r16,-1
    2334:	1023883a 	mov	r17,r2
    2338:	1825883a 	mov	r18,r3
    233c:	303fee1e 	bne	r6,zero,22f8 <___vfprintf_internal_r+0x1668>
    2340:	39c002a8 	cmpgeui	r7,r7,10
    2344:	383fec1e 	bne	r7,zero,22f8 <___vfprintf_internal_r+0x1668>
    2348:	8023883a 	mov	r17,r16
    234c:	d8802704 	addi	r2,sp,156
    2350:	981b883a 	mov	r13,r19
    2354:	a825883a 	mov	r18,r21
    2358:	dc000717 	ldw	r16,28(sp)
    235c:	da000e17 	ldw	r8,56(sp)
    2360:	a027883a 	mov	r19,r20
    2364:	146bc83a 	sub	r21,r2,r17
    2368:	003c6006 	br	14ec <___vfprintf_internal_r+0x85c>
    236c:	d8800617 	ldw	r2,24(sp)
    2370:	10800017 	ldw	r2,0(r2)
    2374:	d8c00615 	stw	r3,24(sp)
    2378:	d8c00517 	ldw	r3,20(sp)
    237c:	10c00015 	stw	r3,0(r2)
    2380:	003a7706 	br	d60 <___vfprintf_internal_r+0xd0>
    2384:	d9801a04 	addi	r6,sp,104
    2388:	900b883a 	mov	r5,r18
    238c:	9809883a 	mov	r4,r19
    2390:	00080e00 	call	80e0 <__sprint_r>
    2394:	103b4d1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2398:	d8c01c17 	ldw	r3,112(sp)
    239c:	dd401b17 	ldw	r21,108(sp)
    23a0:	df002704 	addi	fp,sp,156
    23a4:	003e4a06 	br	1cd0 <___vfprintf_internal_r+0x1040>
    23a8:	d9801a04 	addi	r6,sp,104
    23ac:	900b883a 	mov	r5,r18
    23b0:	9809883a 	mov	r4,r19
    23b4:	00080e00 	call	80e0 <__sprint_r>
    23b8:	103b441e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    23bc:	d8c01c17 	ldw	r3,112(sp)
    23c0:	dd401b17 	ldw	r21,108(sp)
    23c4:	df002704 	addi	fp,sp,156
    23c8:	003e4c06 	br	1cfc <___vfprintf_internal_r+0x106c>
    23cc:	d9801a04 	addi	r6,sp,104
    23d0:	900b883a 	mov	r5,r18
    23d4:	9809883a 	mov	r4,r19
    23d8:	da001115 	stw	r8,68(sp)
    23dc:	db400f15 	stw	r13,60(sp)
    23e0:	db800e15 	stw	r14,56(sp)
    23e4:	00080e00 	call	80e0 <__sprint_r>
    23e8:	103b381e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    23ec:	d8c01c17 	ldw	r3,112(sp)
    23f0:	da001117 	ldw	r8,68(sp)
    23f4:	db400f17 	ldw	r13,60(sp)
    23f8:	db800e17 	ldw	r14,56(sp)
    23fc:	dd802704 	addi	r22,sp,156
    2400:	003af506 	br	fd8 <___vfprintf_internal_r+0x348>
    2404:	8825883a 	mov	r18,r17
    2408:	003b3006 	br	10cc <___vfprintf_internal_r+0x43c>
    240c:	d9000917 	ldw	r4,36(sp)
    2410:	d9400a17 	ldw	r5,40(sp)
    2414:	da000615 	stw	r8,24(sp)
    2418:	200d883a 	mov	r6,r4
    241c:	280f883a 	mov	r7,r5
    2420:	db000415 	stw	r12,16(sp)
    2424:	000d9040 	call	d904 <__unorddf2>
    2428:	db000417 	ldw	r12,16(sp)
    242c:	da000617 	ldw	r8,24(sp)
    2430:	1001f51e 	bne	r2,zero,2c08 <___vfprintf_internal_r+0x1f78>
    2434:	057ff7c4 	movi	r21,-33
    2438:	40bfffe0 	cmpeqi	r2,r8,-1
    243c:	e56a703a 	and	r21,fp,r21
    2440:	1001931e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x1e00>
    2444:	a88011d8 	cmpnei	r2,r21,71
    2448:	10013626 	beq	r2,zero,2924 <___vfprintf_internal_r+0x1c94>
    244c:	60804014 	ori	r2,r12,256
    2450:	d8800415 	stw	r2,16(sp)
    2454:	d8800a17 	ldw	r2,40(sp)
    2458:	10011516 	blt	r2,zero,28b0 <___vfprintf_internal_r+0x1c20>
    245c:	dd000a17 	ldw	r20,40(sp)
    2460:	d8000605 	stb	zero,24(sp)
    2464:	e08019a0 	cmpeqi	r2,fp,102
    2468:	d8800f15 	stw	r2,60(sp)
    246c:	1000b91e 	bne	r2,zero,2754 <___vfprintf_internal_r+0x1ac4>
    2470:	e08011a0 	cmpeqi	r2,fp,70
    2474:	1000b71e 	bne	r2,zero,2754 <___vfprintf_internal_r+0x1ac4>
    2478:	a8801158 	cmpnei	r2,r21,69
    247c:	10014126 	beq	r2,zero,2984 <___vfprintf_internal_r+0x1cf4>
    2480:	d8801804 	addi	r2,sp,96
    2484:	d8800315 	stw	r2,12(sp)
    2488:	d9400917 	ldw	r5,36(sp)
    248c:	d8801504 	addi	r2,sp,84
    2490:	d8800215 	stw	r2,8(sp)
    2494:	d8801404 	addi	r2,sp,80
    2498:	da000015 	stw	r8,0(sp)
    249c:	9809883a 	mov	r4,r19
    24a0:	d8800115 	stw	r2,4(sp)
    24a4:	01c00084 	movi	r7,2
    24a8:	a00d883a 	mov	r6,r20
    24ac:	db000815 	stw	r12,32(sp)
    24b0:	da000715 	stw	r8,28(sp)
    24b4:	00031080 	call	3108 <_dtoa_r>
    24b8:	da000717 	ldw	r8,28(sp)
    24bc:	e10019d8 	cmpnei	r4,fp,103
    24c0:	db000817 	ldw	r12,32(sp)
    24c4:	1023883a 	mov	r17,r2
    24c8:	4007883a 	mov	r3,r8
    24cc:	2001411e 	bne	r4,zero,29d4 <___vfprintf_internal_r+0x1d44>
    24d0:	6080004c 	andi	r2,r12,1
    24d4:	1001411e 	bne	r2,zero,29dc <___vfprintf_internal_r+0x1d4c>
    24d8:	d8801417 	ldw	r2,80(sp)
    24dc:	ad4011e0 	cmpeqi	r21,r21,71
    24e0:	d8800715 	stw	r2,28(sp)
    24e4:	d8801817 	ldw	r2,96(sp)
    24e8:	1445c83a 	sub	r2,r2,r17
    24ec:	d8800815 	stw	r2,32(sp)
    24f0:	a8000526 	beq	r21,zero,2508 <___vfprintf_internal_r+0x1878>
    24f4:	d8c00717 	ldw	r3,28(sp)
    24f8:	18bfff50 	cmplti	r2,r3,-3
    24fc:	1000011e 	bne	r2,zero,2504 <___vfprintf_internal_r+0x1874>
    2500:	40c1460e 	bge	r8,r3,2a1c <___vfprintf_internal_r+0x1d8c>
    2504:	e73fff84 	addi	fp,fp,-2
    2508:	d8800717 	ldw	r2,28(sp)
    250c:	df001645 	stb	fp,89(sp)
    2510:	157fffc4 	addi	r21,r2,-1
    2514:	dd401415 	stw	r21,80(sp)
    2518:	a801ab16 	blt	r21,zero,2bc8 <___vfprintf_internal_r+0x1f38>
    251c:	00800ac4 	movi	r2,43
    2520:	d8801685 	stb	r2,90(sp)
    2524:	a8800290 	cmplti	r2,r21,10
    2528:	1001a01e 	bne	r2,zero,2bac <___vfprintf_internal_r+0x1f1c>
    252c:	d98019c4 	addi	r6,sp,103
    2530:	9029883a 	mov	r20,r18
    2534:	dc400715 	stw	r17,28(sp)
    2538:	8025883a 	mov	r18,r16
    253c:	db000f15 	stw	r12,60(sp)
    2540:	3021883a 	mov	r16,r6
    2544:	a809883a 	mov	r4,r21
    2548:	01400284 	movi	r5,10
    254c:	000b29c0 	call	b29c <__modsi3>
    2550:	10800c04 	addi	r2,r2,48
    2554:	a809883a 	mov	r4,r21
    2558:	80bfffc5 	stb	r2,-1(r16)
    255c:	01400284 	movi	r5,10
    2560:	000b21c0 	call	b21c <__divsi3>
    2564:	a9001908 	cmpgei	r4,r21,100
    2568:	8023883a 	mov	r17,r16
    256c:	102b883a 	mov	r21,r2
    2570:	843fffc4 	addi	r16,r16,-1
    2574:	203ff31e 	bne	r4,zero,2544 <___vfprintf_internal_r+0x18b4>
    2578:	800d883a 	mov	r6,r16
    257c:	11000c04 	addi	r4,r2,48
    2580:	9021883a 	mov	r16,r18
    2584:	a025883a 	mov	r18,r20
    2588:	8829883a 	mov	r20,r17
    258c:	a0bfff84 	addi	r2,r20,-2
    2590:	313fffc5 	stb	r4,-1(r6)
    2594:	d8c019c4 	addi	r3,sp,103
    2598:	db000f17 	ldw	r12,60(sp)
    259c:	dc400717 	ldw	r17,28(sp)
    25a0:	10c1be2e 	bgeu	r2,r3,2c9c <___vfprintf_internal_r+0x200c>
    25a4:	d8c016c4 	addi	r3,sp,91
    25a8:	00000106 	br	25b0 <___vfprintf_internal_r+0x1920>
    25ac:	11000003 	ldbu	r4,0(r2)
    25b0:	19000005 	stb	r4,0(r3)
    25b4:	10800044 	addi	r2,r2,1
    25b8:	d90019c4 	addi	r4,sp,103
    25bc:	18c00044 	addi	r3,r3,1
    25c0:	113ffa1e 	bne	r2,r4,25ac <___vfprintf_internal_r+0x191c>
    25c4:	d8801a44 	addi	r2,sp,105
    25c8:	d8c016c4 	addi	r3,sp,91
    25cc:	1505c83a 	sub	r2,r2,r20
    25d0:	1885883a 	add	r2,r3,r2
    25d4:	d8c01644 	addi	r3,sp,89
    25d8:	10c5c83a 	sub	r2,r2,r3
    25dc:	d8801015 	stw	r2,64(sp)
    25e0:	d8c00817 	ldw	r3,32(sp)
    25e4:	d9001017 	ldw	r4,64(sp)
    25e8:	18800088 	cmpgei	r2,r3,2
    25ec:	192b883a 	add	r21,r3,r4
    25f0:	10018126 	beq	r2,zero,2bf8 <___vfprintf_internal_r+0x1f68>
    25f4:	d8800b17 	ldw	r2,44(sp)
    25f8:	a8ab883a 	add	r21,r21,r2
    25fc:	a829883a 	mov	r20,r21
    2600:	a800010e 	bge	r21,zero,2608 <___vfprintf_internal_r+0x1978>
    2604:	0029883a 	mov	r20,zero
    2608:	d8000715 	stw	zero,28(sp)
    260c:	00008406 	br	2820 <___vfprintf_internal_r+0x1b90>
    2610:	880f883a 	mov	r7,r17
    2614:	10800044 	addi	r2,r2,1
    2618:	1d47883a 	add	r3,r3,r21
    261c:	b1c00015 	stw	r7,0(r22)
    2620:	003a9306 	br	1070 <___vfprintf_internal_r+0x3e0>
    2624:	d9801a04 	addi	r6,sp,104
    2628:	900b883a 	mov	r5,r18
    262c:	9809883a 	mov	r4,r19
    2630:	00080e00 	call	80e0 <__sprint_r>
    2634:	103aa51e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2638:	d8c01c17 	ldw	r3,112(sp)
    263c:	dd802704 	addi	r22,sp,156
    2640:	003caf06 	br	1900 <___vfprintf_internal_r+0xc70>
    2644:	d9801a04 	addi	r6,sp,104
    2648:	900b883a 	mov	r5,r18
    264c:	9809883a 	mov	r4,r19
    2650:	da000e15 	stw	r8,56(sp)
    2654:	00080e00 	call	80e0 <__sprint_r>
    2658:	103a9c1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    265c:	d8c01c17 	ldw	r3,112(sp)
    2660:	da000e17 	ldw	r8,56(sp)
    2664:	dd802704 	addi	r22,sp,156
    2668:	003a7806 	br	104c <___vfprintf_internal_r+0x3bc>
    266c:	8809883a 	mov	r4,r17
    2670:	db000415 	stw	r12,16(sp)
    2674:	d8c00615 	stw	r3,24(sp)
    2678:	0000bf80 	call	bf8 <strlen>
    267c:	db000417 	ldw	r12,16(sp)
    2680:	102b883a 	mov	r21,r2
    2684:	1029883a 	mov	r20,r2
    2688:	003a4606 	br	fa4 <___vfprintf_internal_r+0x314>
    268c:	800f883a 	mov	r7,r16
    2690:	dc000717 	ldw	r16,28(sp)
    2694:	ad400044 	addi	r21,r21,1
    2698:	1d87883a 	add	r3,r3,r22
    269c:	e1c00015 	stw	r7,0(fp)
    26a0:	003da406 	br	1d34 <___vfprintf_internal_r+0x10a4>
    26a4:	d8800d17 	ldw	r2,52(sp)
    26a8:	d9000b17 	ldw	r4,44(sp)
    26ac:	b0800015 	stw	r2,0(r22)
    26b0:	d8801b17 	ldw	r2,108(sp)
    26b4:	20c7883a 	add	r3,r4,r3
    26b8:	b1000115 	stw	r4,4(r22)
    26bc:	10800044 	addi	r2,r2,1
    26c0:	d8c01c15 	stw	r3,112(sp)
    26c4:	d8801b15 	stw	r2,108(sp)
    26c8:	11000208 	cmpgei	r4,r2,8
    26cc:	2000981e 	bne	r4,zero,2930 <___vfprintf_internal_r+0x1ca0>
    26d0:	b5800204 	addi	r22,r22,8
    26d4:	283d5f0e 	bge	r5,zero,1c54 <___vfprintf_internal_r+0xfc4>
    26d8:	01c00074 	movhi	r7,1
    26dc:	293ffc08 	cmpgei	r4,r5,-16
    26e0:	39c33004 	addi	r7,r7,3264
    26e4:	0179c83a 	sub	fp,zero,r5
    26e8:	2001151e 	bne	r4,zero,2b40 <___vfprintf_internal_r+0x1eb0>
    26ec:	dc000715 	stw	r16,28(sp)
    26f0:	05400404 	movi	r21,16
    26f4:	9021883a 	mov	r16,r18
    26f8:	3825883a 	mov	r18,r7
    26fc:	00000406 	br	2710 <___vfprintf_internal_r+0x1a80>
    2700:	b5800204 	addi	r22,r22,8
    2704:	e73ffc04 	addi	fp,fp,-16
    2708:	e1800448 	cmpgei	r6,fp,17
    270c:	30010926 	beq	r6,zero,2b34 <___vfprintf_internal_r+0x1ea4>
    2710:	10800044 	addi	r2,r2,1
    2714:	18c00404 	addi	r3,r3,16
    2718:	b4800015 	stw	r18,0(r22)
    271c:	b5400115 	stw	r21,4(r22)
    2720:	d8c01c15 	stw	r3,112(sp)
    2724:	d8801b15 	stw	r2,108(sp)
    2728:	11800208 	cmpgei	r6,r2,8
    272c:	303ff426 	beq	r6,zero,2700 <___vfprintf_internal_r+0x1a70>
    2730:	d9801a04 	addi	r6,sp,104
    2734:	800b883a 	mov	r5,r16
    2738:	9809883a 	mov	r4,r19
    273c:	00080e00 	call	80e0 <__sprint_r>
    2740:	1001411e 	bne	r2,zero,2c48 <___vfprintf_internal_r+0x1fb8>
    2744:	d8c01c17 	ldw	r3,112(sp)
    2748:	d8801b17 	ldw	r2,108(sp)
    274c:	dd802704 	addi	r22,sp,156
    2750:	003fec06 	br	2704 <___vfprintf_internal_r+0x1a74>
    2754:	d8801804 	addi	r2,sp,96
    2758:	d8800315 	stw	r2,12(sp)
    275c:	d9400917 	ldw	r5,36(sp)
    2760:	d8801504 	addi	r2,sp,84
    2764:	d8800215 	stw	r2,8(sp)
    2768:	d8801404 	addi	r2,sp,80
    276c:	da000015 	stw	r8,0(sp)
    2770:	d8800115 	stw	r2,4(sp)
    2774:	01c000c4 	movi	r7,3
    2778:	a00d883a 	mov	r6,r20
    277c:	9809883a 	mov	r4,r19
    2780:	db000815 	stw	r12,32(sp)
    2784:	da000715 	stw	r8,28(sp)
    2788:	00031080 	call	3108 <_dtoa_r>
    278c:	da000717 	ldw	r8,28(sp)
    2790:	1023883a 	mov	r17,r2
    2794:	db000817 	ldw	r12,32(sp)
    2798:	1207883a 	add	r3,r2,r8
    279c:	88800007 	ldb	r2,0(r17)
    27a0:	10800c20 	cmpeqi	r2,r2,48
    27a4:	10004f1e 	bne	r2,zero,28e4 <___vfprintf_internal_r+0x1c54>
    27a8:	d8801417 	ldw	r2,80(sp)
    27ac:	1893883a 	add	r9,r3,r2
    27b0:	d9000917 	ldw	r4,36(sp)
    27b4:	000d883a 	mov	r6,zero
    27b8:	000f883a 	mov	r7,zero
    27bc:	a00b883a 	mov	r5,r20
    27c0:	da401115 	stw	r9,68(sp)
    27c4:	da000815 	stw	r8,32(sp)
    27c8:	db000715 	stw	r12,28(sp)
    27cc:	000c5fc0 	call	c5fc <__eqdf2>
    27d0:	db000717 	ldw	r12,28(sp)
    27d4:	da000817 	ldw	r8,32(sp)
    27d8:	da401117 	ldw	r9,68(sp)
    27dc:	1000811e 	bne	r2,zero,29e4 <___vfprintf_internal_r+0x1d54>
    27e0:	4805883a 	mov	r2,r9
    27e4:	d8c01417 	ldw	r3,80(sp)
    27e8:	1445c83a 	sub	r2,r2,r17
    27ec:	ad4011d8 	cmpnei	r21,r21,71
    27f0:	d8c00715 	stw	r3,28(sp)
    27f4:	d8800815 	stw	r2,32(sp)
    27f8:	a83f3e26 	beq	r21,zero,24f4 <___vfprintf_internal_r+0x1864>
    27fc:	d8800f17 	ldw	r2,60(sp)
    2800:	103f4126 	beq	r2,zero,2508 <___vfprintf_internal_r+0x1878>
    2804:	d8c00717 	ldw	r3,28(sp)
    2808:	6080004c 	andi	r2,r12,1
    280c:	1204b03a 	or	r2,r2,r8
    2810:	00c1050e 	bge	zero,r3,2c28 <___vfprintf_internal_r+0x1f98>
    2814:	1000f11e 	bne	r2,zero,2bdc <___vfprintf_internal_r+0x1f4c>
    2818:	dd400717 	ldw	r21,28(sp)
    281c:	a829883a 	mov	r20,r21
    2820:	d8800607 	ldb	r2,24(sp)
    2824:	10007826 	beq	r2,zero,2a08 <___vfprintf_internal_r+0x1d78>
    2828:	00800b44 	movi	r2,45
    282c:	d8801345 	stb	r2,77(sp)
    2830:	d8800e17 	ldw	r2,56(sp)
    2834:	0011883a 	mov	r8,zero
    2838:	d8800615 	stw	r2,24(sp)
    283c:	003b3306 	br	150c <___vfprintf_internal_r+0x87c>
    2840:	04400074 	movhi	r17,1
    2844:	8c431f04 	addi	r17,r17,3196
    2848:	003ab806 	br	132c <___vfprintf_internal_r+0x69c>
    284c:	800f883a 	mov	r7,r16
    2850:	dc000e17 	ldw	r16,56(sp)
    2854:	10800044 	addi	r2,r2,1
    2858:	1d47883a 	add	r3,r3,r21
    285c:	d8801b15 	stw	r2,108(sp)
    2860:	b1c00015 	stw	r7,0(r22)
    2864:	b5400115 	stw	r21,4(r22)
    2868:	d8c01c15 	stw	r3,112(sp)
    286c:	10800208 	cmpgei	r2,r2,8
    2870:	10003a1e 	bne	r2,zero,295c <___vfprintf_internal_r+0x1ccc>
    2874:	b5800204 	addi	r22,r22,8
    2878:	003db206 	br	1f44 <___vfprintf_internal_r+0x12b4>
    287c:	00800b44 	movi	r2,45
    2880:	d8801345 	stb	r2,77(sp)
    2884:	03400b44 	movi	r13,45
    2888:	003aa406 	br	131c <___vfprintf_internal_r+0x68c>
    288c:	d9801a04 	addi	r6,sp,104
    2890:	900b883a 	mov	r5,r18
    2894:	9809883a 	mov	r4,r19
    2898:	00080e00 	call	80e0 <__sprint_r>
    289c:	103a0b1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    28a0:	d9401417 	ldw	r5,80(sp)
    28a4:	d8c01c17 	ldw	r3,112(sp)
    28a8:	dd802704 	addi	r22,sp,156
    28ac:	003cd706 	br	1c0c <___vfprintf_internal_r+0xf7c>
    28b0:	1520003c 	xorhi	r20,r2,32768
    28b4:	00800b44 	movi	r2,45
    28b8:	d8800605 	stb	r2,24(sp)
    28bc:	003ee906 	br	2464 <___vfprintf_internal_r+0x17d4>
    28c0:	05400184 	movi	r21,6
    28c4:	003e5e06 	br	2240 <___vfprintf_internal_r+0x15b0>
    28c8:	d9801a04 	addi	r6,sp,104
    28cc:	900b883a 	mov	r5,r18
    28d0:	9809883a 	mov	r4,r19
    28d4:	00080e00 	call	80e0 <__sprint_r>
    28d8:	0039fc06 	br	10cc <___vfprintf_internal_r+0x43c>
    28dc:	d9401345 	stb	r5,77(sp)
    28e0:	0039aa06 	br	f8c <___vfprintf_internal_r+0x2fc>
    28e4:	d9000917 	ldw	r4,36(sp)
    28e8:	000d883a 	mov	r6,zero
    28ec:	000f883a 	mov	r7,zero
    28f0:	a00b883a 	mov	r5,r20
    28f4:	d8c01115 	stw	r3,68(sp)
    28f8:	da000815 	stw	r8,32(sp)
    28fc:	db000715 	stw	r12,28(sp)
    2900:	000c5fc0 	call	c5fc <__eqdf2>
    2904:	db000717 	ldw	r12,28(sp)
    2908:	da000817 	ldw	r8,32(sp)
    290c:	d8c01117 	ldw	r3,68(sp)
    2910:	103fa526 	beq	r2,zero,27a8 <___vfprintf_internal_r+0x1b18>
    2914:	00800044 	movi	r2,1
    2918:	1205c83a 	sub	r2,r2,r8
    291c:	d8801415 	stw	r2,80(sp)
    2920:	003fa206 	br	27ac <___vfprintf_internal_r+0x1b1c>
    2924:	403ec91e 	bne	r8,zero,244c <___vfprintf_internal_r+0x17bc>
    2928:	02000044 	movi	r8,1
    292c:	003ec706 	br	244c <___vfprintf_internal_r+0x17bc>
    2930:	d9801a04 	addi	r6,sp,104
    2934:	900b883a 	mov	r5,r18
    2938:	9809883a 	mov	r4,r19
    293c:	00080e00 	call	80e0 <__sprint_r>
    2940:	1039e21e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2944:	d9401417 	ldw	r5,80(sp)
    2948:	d8c01c17 	ldw	r3,112(sp)
    294c:	d8801b17 	ldw	r2,108(sp)
    2950:	dd802704 	addi	r22,sp,156
    2954:	283cbf0e 	bge	r5,zero,1c54 <___vfprintf_internal_r+0xfc4>
    2958:	003f5f06 	br	26d8 <___vfprintf_internal_r+0x1a48>
    295c:	d9801a04 	addi	r6,sp,104
    2960:	900b883a 	mov	r5,r18
    2964:	9809883a 	mov	r4,r19
    2968:	00080e00 	call	80e0 <__sprint_r>
    296c:	1039d71e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2970:	d8c01c17 	ldw	r3,112(sp)
    2974:	dd802704 	addi	r22,sp,156
    2978:	003d7206 	br	1f44 <___vfprintf_internal_r+0x12b4>
    297c:	db000417 	ldw	r12,16(sp)
    2980:	003ad506 	br	14d8 <___vfprintf_internal_r+0x848>
    2984:	d8801804 	addi	r2,sp,96
    2988:	d8800315 	stw	r2,12(sp)
    298c:	d9400917 	ldw	r5,36(sp)
    2990:	d8801504 	addi	r2,sp,84
    2994:	40c00044 	addi	r3,r8,1
    2998:	d8800215 	stw	r2,8(sp)
    299c:	d8801404 	addi	r2,sp,80
    29a0:	d8c00015 	stw	r3,0(sp)
    29a4:	d8800115 	stw	r2,4(sp)
    29a8:	01c00084 	movi	r7,2
    29ac:	a00d883a 	mov	r6,r20
    29b0:	9809883a 	mov	r4,r19
    29b4:	db001115 	stw	r12,68(sp)
    29b8:	da000815 	stw	r8,32(sp)
    29bc:	d8c00715 	stw	r3,28(sp)
    29c0:	00031080 	call	3108 <_dtoa_r>
    29c4:	d8c00717 	ldw	r3,28(sp)
    29c8:	da000817 	ldw	r8,32(sp)
    29cc:	db001117 	ldw	r12,68(sp)
    29d0:	1023883a 	mov	r17,r2
    29d4:	e08011d8 	cmpnei	r2,fp,71
    29d8:	103ebd26 	beq	r2,zero,24d0 <___vfprintf_internal_r+0x1840>
    29dc:	88d3883a 	add	r9,r17,r3
    29e0:	003f7306 	br	27b0 <___vfprintf_internal_r+0x1b20>
    29e4:	d8801817 	ldw	r2,96(sp)
    29e8:	127f7e2e 	bgeu	r2,r9,27e4 <___vfprintf_internal_r+0x1b54>
    29ec:	01000c04 	movi	r4,48
    29f0:	10c00044 	addi	r3,r2,1
    29f4:	d8c01815 	stw	r3,96(sp)
    29f8:	11000005 	stb	r4,0(r2)
    29fc:	d8801817 	ldw	r2,96(sp)
    2a00:	127ffb36 	bltu	r2,r9,29f0 <___vfprintf_internal_r+0x1d60>
    2a04:	003f7706 	br	27e4 <___vfprintf_internal_r+0x1b54>
    2a08:	d8800e17 	ldw	r2,56(sp)
    2a0c:	db401343 	ldbu	r13,77(sp)
    2a10:	0011883a 	mov	r8,zero
    2a14:	d8800615 	stw	r2,24(sp)
    2a18:	003ab806 	br	14fc <___vfprintf_internal_r+0x86c>
    2a1c:	d8800717 	ldw	r2,28(sp)
    2a20:	d8c00817 	ldw	r3,32(sp)
    2a24:	10c02b16 	blt	r2,r3,2ad4 <___vfprintf_internal_r+0x1e44>
    2a28:	6300004c 	andi	r12,r12,1
    2a2c:	6000581e 	bne	r12,zero,2b90 <___vfprintf_internal_r+0x1f00>
    2a30:	1029883a 	mov	r20,r2
    2a34:	1000010e 	bge	r2,zero,2a3c <___vfprintf_internal_r+0x1dac>
    2a38:	0029883a 	mov	r20,zero
    2a3c:	dd400717 	ldw	r21,28(sp)
    2a40:	070019c4 	movi	fp,103
    2a44:	003f7606 	br	2820 <___vfprintf_internal_r+0x1b90>
    2a48:	d9801a04 	addi	r6,sp,104
    2a4c:	900b883a 	mov	r5,r18
    2a50:	9809883a 	mov	r4,r19
    2a54:	00080e00 	call	80e0 <__sprint_r>
    2a58:	10399c1e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2a5c:	dd401417 	ldw	r21,80(sp)
    2a60:	d8c01c17 	ldw	r3,112(sp)
    2a64:	dd802704 	addi	r22,sp,156
    2a68:	003d4506 	br	1f80 <___vfprintf_internal_r+0x12f0>
    2a6c:	d9801a04 	addi	r6,sp,104
    2a70:	900b883a 	mov	r5,r18
    2a74:	9809883a 	mov	r4,r19
    2a78:	00080e00 	call	80e0 <__sprint_r>
    2a7c:	1039931e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2a80:	d8c01c17 	ldw	r3,112(sp)
    2a84:	dd802704 	addi	r22,sp,156
    2a88:	a83d2b0e 	bge	r21,zero,1f38 <___vfprintf_internal_r+0x12a8>
    2a8c:	003ddf06 	br	220c <___vfprintf_internal_r+0x157c>
    2a90:	02000184 	movi	r8,6
    2a94:	003e6d06 	br	244c <___vfprintf_internal_r+0x17bc>
    2a98:	d9801a04 	addi	r6,sp,104
    2a9c:	900b883a 	mov	r5,r18
    2aa0:	9809883a 	mov	r4,r19
    2aa4:	00080e00 	call	80e0 <__sprint_r>
    2aa8:	1039881e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2aac:	d8801417 	ldw	r2,80(sp)
    2ab0:	d9000817 	ldw	r4,32(sp)
    2ab4:	d8c01c17 	ldw	r3,112(sp)
    2ab8:	dd802704 	addi	r22,sp,156
    2abc:	2085c83a 	sub	r2,r4,r2
    2ac0:	003d4306 	br	1fd0 <___vfprintf_internal_r+0x1340>
    2ac4:	4029883a 	mov	r20,r8
    2ac8:	d8c00615 	stw	r3,24(sp)
    2acc:	402b883a 	mov	r21,r8
    2ad0:	00393406 	br	fa4 <___vfprintf_internal_r+0x314>
    2ad4:	d8800817 	ldw	r2,32(sp)
    2ad8:	d8c00b17 	ldw	r3,44(sp)
    2adc:	10eb883a 	add	r21,r2,r3
    2ae0:	d8800717 	ldw	r2,28(sp)
    2ae4:	00800316 	blt	zero,r2,2af4 <___vfprintf_internal_r+0x1e64>
    2ae8:	d8800717 	ldw	r2,28(sp)
    2aec:	a8abc83a 	sub	r21,r21,r2
    2af0:	ad400044 	addi	r21,r21,1
    2af4:	a829883a 	mov	r20,r21
    2af8:	a8002a16 	blt	r21,zero,2ba4 <___vfprintf_internal_r+0x1f14>
    2afc:	070019c4 	movi	fp,103
    2b00:	003f4706 	br	2820 <___vfprintf_internal_r+0x1b90>
    2b04:	d9401345 	stb	r5,77(sp)
    2b08:	003aa006 	br	158c <___vfprintf_internal_r+0x8fc>
    2b0c:	d9401345 	stb	r5,77(sp)
    2b10:	003b3406 	br	17e4 <___vfprintf_internal_r+0xb54>
    2b14:	d9401345 	stb	r5,77(sp)
    2b18:	0039d506 	br	1270 <___vfprintf_internal_r+0x5e0>
    2b1c:	d9401345 	stb	r5,77(sp)
    2b20:	003a5806 	br	1484 <___vfprintf_internal_r+0x7f4>
    2b24:	d9401345 	stb	r5,77(sp)
    2b28:	003af306 	br	16f8 <___vfprintf_internal_r+0xa68>
    2b2c:	d9401345 	stb	r5,77(sp)
    2b30:	003b4c06 	br	1864 <___vfprintf_internal_r+0xbd4>
    2b34:	900f883a 	mov	r7,r18
    2b38:	8025883a 	mov	r18,r16
    2b3c:	dc000717 	ldw	r16,28(sp)
    2b40:	10800044 	addi	r2,r2,1
    2b44:	1f07883a 	add	r3,r3,fp
    2b48:	b1c00015 	stw	r7,0(r22)
    2b4c:	b7000115 	stw	fp,4(r22)
    2b50:	d8c01c15 	stw	r3,112(sp)
    2b54:	d8801b15 	stw	r2,108(sp)
    2b58:	11000208 	cmpgei	r4,r2,8
    2b5c:	203c3c26 	beq	r4,zero,1c50 <___vfprintf_internal_r+0xfc0>
    2b60:	d9801a04 	addi	r6,sp,104
    2b64:	900b883a 	mov	r5,r18
    2b68:	9809883a 	mov	r4,r19
    2b6c:	00080e00 	call	80e0 <__sprint_r>
    2b70:	1039561e 	bne	r2,zero,10cc <___vfprintf_internal_r+0x43c>
    2b74:	d8c01c17 	ldw	r3,112(sp)
    2b78:	d8801b17 	ldw	r2,108(sp)
    2b7c:	dd802704 	addi	r22,sp,156
    2b80:	003c3406 	br	1c54 <___vfprintf_internal_r+0xfc4>
    2b84:	00bfffc4 	movi	r2,-1
    2b88:	d8800515 	stw	r2,20(sp)
    2b8c:	00395206 	br	10d8 <___vfprintf_internal_r+0x448>
    2b90:	d8800717 	ldw	r2,28(sp)
    2b94:	d8c00b17 	ldw	r3,44(sp)
    2b98:	10eb883a 	add	r21,r2,r3
    2b9c:	a829883a 	mov	r20,r21
    2ba0:	a83fd60e 	bge	r21,zero,2afc <___vfprintf_internal_r+0x1e6c>
    2ba4:	0029883a 	mov	r20,zero
    2ba8:	003fd406 	br	2afc <___vfprintf_internal_r+0x1e6c>
    2bac:	00800c04 	movi	r2,48
    2bb0:	ad400c04 	addi	r21,r21,48
    2bb4:	d88016c5 	stb	r2,91(sp)
    2bb8:	00800104 	movi	r2,4
    2bbc:	dd401705 	stb	r21,92(sp)
    2bc0:	d8801015 	stw	r2,64(sp)
    2bc4:	003e8606 	br	25e0 <___vfprintf_internal_r+0x1950>
    2bc8:	05400044 	movi	r21,1
    2bcc:	a8abc83a 	sub	r21,r21,r2
    2bd0:	00800b44 	movi	r2,45
    2bd4:	d8801685 	stb	r2,90(sp)
    2bd8:	003e5206 	br	2524 <___vfprintf_internal_r+0x1894>
    2bdc:	d8800b17 	ldw	r2,44(sp)
    2be0:	18ab883a 	add	r21,r3,r2
    2be4:	aa2b883a 	add	r21,r21,r8
    2be8:	a829883a 	mov	r20,r21
    2bec:	a83f0c0e 	bge	r21,zero,2820 <___vfprintf_internal_r+0x1b90>
    2bf0:	0029883a 	mov	r20,zero
    2bf4:	003f0a06 	br	2820 <___vfprintf_internal_r+0x1b90>
    2bf8:	6080004c 	andi	r2,r12,1
    2bfc:	d8800715 	stw	r2,28(sp)
    2c00:	103e7c1e 	bne	r2,zero,25f4 <___vfprintf_internal_r+0x1964>
    2c04:	003ff806 	br	2be8 <___vfprintf_internal_r+0x1f58>
    2c08:	d8800a17 	ldw	r2,40(sp)
    2c0c:	10001316 	blt	r2,zero,2c5c <___vfprintf_internal_r+0x1fcc>
    2c10:	db401343 	ldbu	r13,77(sp)
    2c14:	e0801210 	cmplti	r2,fp,72
    2c18:	10000d1e 	bne	r2,zero,2c50 <___vfprintf_internal_r+0x1fc0>
    2c1c:	04400074 	movhi	r17,1
    2c20:	8c432204 	addi	r17,r17,3208
    2c24:	0039c106 	br	132c <___vfprintf_internal_r+0x69c>
    2c28:	1000031e 	bne	r2,zero,2c38 <___vfprintf_internal_r+0x1fa8>
    2c2c:	05000044 	movi	r20,1
    2c30:	05400044 	movi	r21,1
    2c34:	003efa06 	br	2820 <___vfprintf_internal_r+0x1b90>
    2c38:	d8800b17 	ldw	r2,44(sp)
    2c3c:	15400044 	addi	r21,r2,1
    2c40:	aa2b883a 	add	r21,r21,r8
    2c44:	003fe806 	br	2be8 <___vfprintf_internal_r+0x1f58>
    2c48:	8025883a 	mov	r18,r16
    2c4c:	00391f06 	br	10cc <___vfprintf_internal_r+0x43c>
    2c50:	04400074 	movhi	r17,1
    2c54:	8c432104 	addi	r17,r17,3204
    2c58:	0039b406 	br	132c <___vfprintf_internal_r+0x69c>
    2c5c:	00800b44 	movi	r2,45
    2c60:	d8801345 	stb	r2,77(sp)
    2c64:	03400b44 	movi	r13,45
    2c68:	003fea06 	br	2c14 <___vfprintf_internal_r+0x1f84>
    2c6c:	d8c00617 	ldw	r3,24(sp)
    2c70:	1a000017 	ldw	r8,0(r3)
    2c74:	18c00104 	addi	r3,r3,4
    2c78:	4000010e 	bge	r8,zero,2c80 <___vfprintf_internal_r+0x1ff0>
    2c7c:	023fffc4 	movi	r8,-1
    2c80:	bf000043 	ldbu	fp,1(r23)
    2c84:	d8c00615 	stw	r3,24(sp)
    2c88:	102f883a 	mov	r23,r2
    2c8c:	e2c03fcc 	andi	r11,fp,255
    2c90:	5ac0201c 	xori	r11,r11,128
    2c94:	5affe004 	addi	r11,r11,-128
    2c98:	00384906 	br	dc0 <___vfprintf_internal_r+0x130>
    2c9c:	00800084 	movi	r2,2
    2ca0:	d8801015 	stw	r2,64(sp)
    2ca4:	003e4e06 	br	25e0 <___vfprintf_internal_r+0x1950>

00002ca8 <__vfprintf_internal>:
    2ca8:	00c00074 	movhi	r3,1
    2cac:	2005883a 	mov	r2,r4
    2cb0:	190b9e17 	ldw	r4,11896(r3)
    2cb4:	300f883a 	mov	r7,r6
    2cb8:	280d883a 	mov	r6,r5
    2cbc:	100b883a 	mov	r5,r2
    2cc0:	0000c901 	jmpi	c90 <___vfprintf_internal_r>

00002cc4 <__sbprintf>:
    2cc4:	2880030b 	ldhu	r2,12(r5)
    2cc8:	2b001917 	ldw	r12,100(r5)
    2ccc:	2ac0038b 	ldhu	r11,14(r5)
    2cd0:	2a800717 	ldw	r10,28(r5)
    2cd4:	2a400917 	ldw	r9,36(r5)
    2cd8:	defee204 	addi	sp,sp,-1144
    2cdc:	da001a04 	addi	r8,sp,104
    2ce0:	00c10004 	movi	r3,1024
    2ce4:	dc011a15 	stw	r16,1128(sp)
    2ce8:	10bfff4c 	andi	r2,r2,65533
    2cec:	2821883a 	mov	r16,r5
    2cf0:	d80b883a 	mov	r5,sp
    2cf4:	dc811c15 	stw	r18,1136(sp)
    2cf8:	dc411b15 	stw	r17,1132(sp)
    2cfc:	dfc11d15 	stw	ra,1140(sp)
    2d00:	2025883a 	mov	r18,r4
    2d04:	d880030d 	sth	r2,12(sp)
    2d08:	db001915 	stw	r12,100(sp)
    2d0c:	dac0038d 	sth	r11,14(sp)
    2d10:	da800715 	stw	r10,28(sp)
    2d14:	da400915 	stw	r9,36(sp)
    2d18:	da000015 	stw	r8,0(sp)
    2d1c:	da000415 	stw	r8,16(sp)
    2d20:	d8c00215 	stw	r3,8(sp)
    2d24:	d8c00515 	stw	r3,20(sp)
    2d28:	d8000615 	stw	zero,24(sp)
    2d2c:	0000c900 	call	c90 <___vfprintf_internal_r>
    2d30:	1023883a 	mov	r17,r2
    2d34:	10000d0e 	bge	r2,zero,2d6c <__sbprintf+0xa8>
    2d38:	d880030b 	ldhu	r2,12(sp)
    2d3c:	1080100c 	andi	r2,r2,64
    2d40:	10000326 	beq	r2,zero,2d50 <__sbprintf+0x8c>
    2d44:	8080030b 	ldhu	r2,12(r16)
    2d48:	10801014 	ori	r2,r2,64
    2d4c:	8080030d 	sth	r2,12(r16)
    2d50:	8805883a 	mov	r2,r17
    2d54:	dfc11d17 	ldw	ra,1140(sp)
    2d58:	dc811c17 	ldw	r18,1136(sp)
    2d5c:	dc411b17 	ldw	r17,1132(sp)
    2d60:	dc011a17 	ldw	r16,1128(sp)
    2d64:	dec11e04 	addi	sp,sp,1144
    2d68:	f800283a 	ret
    2d6c:	d80b883a 	mov	r5,sp
    2d70:	9009883a 	mov	r4,r18
    2d74:	0004a780 	call	4a78 <_fflush_r>
    2d78:	103fef26 	beq	r2,zero,2d38 <__sbprintf+0x74>
    2d7c:	047fffc4 	movi	r17,-1
    2d80:	003fed06 	br	2d38 <__sbprintf+0x74>

00002d84 <__swsetup_r>:
    2d84:	00800074 	movhi	r2,1
    2d88:	108b9e17 	ldw	r2,11896(r2)
    2d8c:	defffd04 	addi	sp,sp,-12
    2d90:	dc400115 	stw	r17,4(sp)
    2d94:	dc000015 	stw	r16,0(sp)
    2d98:	dfc00215 	stw	ra,8(sp)
    2d9c:	2023883a 	mov	r17,r4
    2da0:	2821883a 	mov	r16,r5
    2da4:	10000226 	beq	r2,zero,2db0 <__swsetup_r+0x2c>
    2da8:	10c00e17 	ldw	r3,56(r2)
    2dac:	18001f26 	beq	r3,zero,2e2c <__swsetup_r+0xa8>
    2db0:	8180030b 	ldhu	r6,12(r16)
    2db4:	30c0020c 	andi	r3,r6,8
    2db8:	3005883a 	mov	r2,r6
    2dbc:	18002126 	beq	r3,zero,2e44 <__swsetup_r+0xc0>
    2dc0:	80c00417 	ldw	r3,16(r16)
    2dc4:	18002826 	beq	r3,zero,2e68 <__swsetup_r+0xe4>
    2dc8:	1100004c 	andi	r4,r2,1
    2dcc:	20000b1e 	bne	r4,zero,2dfc <__swsetup_r+0x78>
    2dd0:	1100008c 	andi	r4,r2,2
    2dd4:	20002e1e 	bne	r4,zero,2e90 <__swsetup_r+0x10c>
    2dd8:	81000517 	ldw	r4,20(r16)
    2ddc:	81000215 	stw	r4,8(r16)
    2de0:	18000b26 	beq	r3,zero,2e10 <__swsetup_r+0x8c>
    2de4:	0005883a 	mov	r2,zero
    2de8:	dfc00217 	ldw	ra,8(sp)
    2dec:	dc400117 	ldw	r17,4(sp)
    2df0:	dc000017 	ldw	r16,0(sp)
    2df4:	dec00304 	addi	sp,sp,12
    2df8:	f800283a 	ret
    2dfc:	81000517 	ldw	r4,20(r16)
    2e00:	80000215 	stw	zero,8(r16)
    2e04:	0109c83a 	sub	r4,zero,r4
    2e08:	81000615 	stw	r4,24(r16)
    2e0c:	183ff51e 	bne	r3,zero,2de4 <__swsetup_r+0x60>
    2e10:	10c0200c 	andi	r3,r2,128
    2e14:	0005883a 	mov	r2,zero
    2e18:	183ff326 	beq	r3,zero,2de8 <__swsetup_r+0x64>
    2e1c:	31801014 	ori	r6,r6,64
    2e20:	8180030d 	sth	r6,12(r16)
    2e24:	00bfffc4 	movi	r2,-1
    2e28:	003fef06 	br	2de8 <__swsetup_r+0x64>
    2e2c:	1009883a 	mov	r4,r2
    2e30:	0004ec00 	call	4ec0 <__sinit>
    2e34:	8180030b 	ldhu	r6,12(r16)
    2e38:	30c0020c 	andi	r3,r6,8
    2e3c:	3005883a 	mov	r2,r6
    2e40:	183fdf1e 	bne	r3,zero,2dc0 <__swsetup_r+0x3c>
    2e44:	3080040c 	andi	r2,r6,16
    2e48:	10002126 	beq	r2,zero,2ed0 <__swsetup_r+0x14c>
    2e4c:	3080010c 	andi	r2,r6,4
    2e50:	1000111e 	bne	r2,zero,2e98 <__swsetup_r+0x114>
    2e54:	80c00417 	ldw	r3,16(r16)
    2e58:	30800214 	ori	r2,r6,8
    2e5c:	8080030d 	sth	r2,12(r16)
    2e60:	100d883a 	mov	r6,r2
    2e64:	183fd81e 	bne	r3,zero,2dc8 <__swsetup_r+0x44>
    2e68:	1100a00c 	andi	r4,r2,640
    2e6c:	21008020 	cmpeqi	r4,r4,512
    2e70:	203fd51e 	bne	r4,zero,2dc8 <__swsetup_r+0x44>
    2e74:	800b883a 	mov	r5,r16
    2e78:	8809883a 	mov	r4,r17
    2e7c:	00059140 	call	5914 <__smakebuf_r>
    2e80:	8180030b 	ldhu	r6,12(r16)
    2e84:	80c00417 	ldw	r3,16(r16)
    2e88:	3005883a 	mov	r2,r6
    2e8c:	003fce06 	br	2dc8 <__swsetup_r+0x44>
    2e90:	0009883a 	mov	r4,zero
    2e94:	003fd106 	br	2ddc <__swsetup_r+0x58>
    2e98:	81400c17 	ldw	r5,48(r16)
    2e9c:	28000626 	beq	r5,zero,2eb8 <__swsetup_r+0x134>
    2ea0:	80801004 	addi	r2,r16,64
    2ea4:	28800326 	beq	r5,r2,2eb4 <__swsetup_r+0x130>
    2ea8:	8809883a 	mov	r4,r17
    2eac:	00050240 	call	5024 <_free_r>
    2eb0:	8180030b 	ldhu	r6,12(r16)
    2eb4:	80000c15 	stw	zero,48(r16)
    2eb8:	80c00417 	ldw	r3,16(r16)
    2ebc:	00bff6c4 	movi	r2,-37
    2ec0:	118c703a 	and	r6,r2,r6
    2ec4:	80000115 	stw	zero,4(r16)
    2ec8:	80c00015 	stw	r3,0(r16)
    2ecc:	003fe206 	br	2e58 <__swsetup_r+0xd4>
    2ed0:	00800244 	movi	r2,9
    2ed4:	88800015 	stw	r2,0(r17)
    2ed8:	31801014 	ori	r6,r6,64
    2edc:	8180030d 	sth	r6,12(r16)
    2ee0:	00bfffc4 	movi	r2,-1
    2ee4:	003fc006 	br	2de8 <__swsetup_r+0x64>

00002ee8 <quorem>:
    2ee8:	defff204 	addi	sp,sp,-56
    2eec:	dc400515 	stw	r17,20(sp)
    2ef0:	20800417 	ldw	r2,16(r4)
    2ef4:	2c400417 	ldw	r17,16(r5)
    2ef8:	dfc00d15 	stw	ra,52(sp)
    2efc:	df000c15 	stw	fp,48(sp)
    2f00:	ddc00b15 	stw	r23,44(sp)
    2f04:	dd800a15 	stw	r22,40(sp)
    2f08:	dd400915 	stw	r21,36(sp)
    2f0c:	dd000815 	stw	r20,32(sp)
    2f10:	dcc00715 	stw	r19,28(sp)
    2f14:	dc800615 	stw	r18,24(sp)
    2f18:	dc000415 	stw	r16,16(sp)
    2f1c:	d9000115 	stw	r4,4(sp)
    2f20:	d9400215 	stw	r5,8(sp)
    2f24:	14407616 	blt	r2,r17,3100 <quorem+0x218>
    2f28:	8c7fffc4 	addi	r17,r17,-1
    2f2c:	882a90ba 	slli	r21,r17,2
    2f30:	2f000504 	addi	fp,r5,20
    2f34:	25800504 	addi	r22,r4,20
    2f38:	e565883a 	add	r18,fp,r21
    2f3c:	b545883a 	add	r2,r22,r21
    2f40:	95c00017 	ldw	r23,0(r18)
    2f44:	15000017 	ldw	r20,0(r2)
    2f48:	dd800015 	stw	r22,0(sp)
    2f4c:	bdc00044 	addi	r23,r23,1
    2f50:	b80b883a 	mov	r5,r23
    2f54:	a009883a 	mov	r4,r20
    2f58:	d8800315 	stw	r2,12(sp)
    2f5c:	000b3100 	call	b310 <__udivsi3>
    2f60:	1021883a 	mov	r16,r2
    2f64:	a5c02f36 	bltu	r20,r23,3024 <quorem+0x13c>
    2f68:	e029883a 	mov	r20,fp
    2f6c:	002b883a 	mov	r21,zero
    2f70:	002f883a 	mov	r23,zero
    2f74:	a4c00017 	ldw	r19,0(r20)
    2f78:	800b883a 	mov	r5,r16
    2f7c:	b5800104 	addi	r22,r22,4
    2f80:	993fffcc 	andi	r4,r19,65535
    2f84:	000b3d00 	call	b3d0 <__mulsi3>
    2f88:	9808d43a 	srli	r4,r19,16
    2f8c:	800b883a 	mov	r5,r16
    2f90:	156b883a 	add	r21,r2,r21
    2f94:	000b3d00 	call	b3d0 <__mulsi3>
    2f98:	b0ffff17 	ldw	r3,-4(r22)
    2f9c:	a80ad43a 	srli	r5,r21,16
    2fa0:	a93fffcc 	andi	r4,r21,65535
    2fa4:	19bfffcc 	andi	r6,r3,65535
    2fa8:	b909c83a 	sub	r4,r23,r4
    2fac:	2189883a 	add	r4,r4,r6
    2fb0:	1806d43a 	srli	r3,r3,16
    2fb4:	1145883a 	add	r2,r2,r5
    2fb8:	200bd43a 	srai	r5,r4,16
    2fbc:	11bfffcc 	andi	r6,r2,65535
    2fc0:	1987c83a 	sub	r3,r3,r6
    2fc4:	1947883a 	add	r3,r3,r5
    2fc8:	180a943a 	slli	r5,r3,16
    2fcc:	213fffcc 	andi	r4,r4,65535
    2fd0:	a5000104 	addi	r20,r20,4
    2fd4:	2908b03a 	or	r4,r5,r4
    2fd8:	b13fff15 	stw	r4,-4(r22)
    2fdc:	102ad43a 	srli	r21,r2,16
    2fe0:	182fd43a 	srai	r23,r3,16
    2fe4:	953fe32e 	bgeu	r18,r20,2f74 <quorem+0x8c>
    2fe8:	d8c00317 	ldw	r3,12(sp)
    2fec:	18800017 	ldw	r2,0(r3)
    2ff0:	10000c1e 	bne	r2,zero,3024 <quorem+0x13c>
    2ff4:	d8800017 	ldw	r2,0(sp)
    2ff8:	1d7fff04 	addi	r21,r3,-4
    2ffc:	15400436 	bltu	r2,r21,3010 <quorem+0x128>
    3000:	00000606 	br	301c <quorem+0x134>
    3004:	d8800017 	ldw	r2,0(sp)
    3008:	8c7fffc4 	addi	r17,r17,-1
    300c:	1540032e 	bgeu	r2,r21,301c <quorem+0x134>
    3010:	a8800017 	ldw	r2,0(r21)
    3014:	ad7fff04 	addi	r21,r21,-4
    3018:	103ffa26 	beq	r2,zero,3004 <quorem+0x11c>
    301c:	d8800117 	ldw	r2,4(sp)
    3020:	14400415 	stw	r17,16(r2)
    3024:	d9400217 	ldw	r5,8(sp)
    3028:	d9000117 	ldw	r4,4(sp)
    302c:	00071dc0 	call	71dc <__mcmp>
    3030:	10002616 	blt	r2,zero,30cc <quorem+0x1e4>
    3034:	d9400017 	ldw	r5,0(sp)
    3038:	84000044 	addi	r16,r16,1
    303c:	0007883a 	mov	r3,zero
    3040:	e1000017 	ldw	r4,0(fp)
    3044:	29800017 	ldw	r6,0(r5)
    3048:	29400104 	addi	r5,r5,4
    304c:	20bfffcc 	andi	r2,r4,65535
    3050:	1887c83a 	sub	r3,r3,r2
    3054:	30bfffcc 	andi	r2,r6,65535
    3058:	1885883a 	add	r2,r3,r2
    305c:	2008d43a 	srli	r4,r4,16
    3060:	3006d43a 	srli	r3,r6,16
    3064:	100fd43a 	srai	r7,r2,16
    3068:	11bfffcc 	andi	r6,r2,65535
    306c:	1907c83a 	sub	r3,r3,r4
    3070:	19c7883a 	add	r3,r3,r7
    3074:	1804943a 	slli	r2,r3,16
    3078:	e7000104 	addi	fp,fp,4
    307c:	1807d43a 	srai	r3,r3,16
    3080:	1184b03a 	or	r2,r2,r6
    3084:	28bfff15 	stw	r2,-4(r5)
    3088:	973fed2e 	bgeu	r18,fp,3040 <quorem+0x158>
    308c:	880490ba 	slli	r2,r17,2
    3090:	d9000017 	ldw	r4,0(sp)
    3094:	2085883a 	add	r2,r4,r2
    3098:	10c00017 	ldw	r3,0(r2)
    309c:	18000b1e 	bne	r3,zero,30cc <quorem+0x1e4>
    30a0:	10bfff04 	addi	r2,r2,-4
    30a4:	20800436 	bltu	r4,r2,30b8 <quorem+0x1d0>
    30a8:	00000606 	br	30c4 <quorem+0x1dc>
    30ac:	d8c00017 	ldw	r3,0(sp)
    30b0:	8c7fffc4 	addi	r17,r17,-1
    30b4:	1880032e 	bgeu	r3,r2,30c4 <quorem+0x1dc>
    30b8:	10c00017 	ldw	r3,0(r2)
    30bc:	10bfff04 	addi	r2,r2,-4
    30c0:	183ffa26 	beq	r3,zero,30ac <quorem+0x1c4>
    30c4:	d8800117 	ldw	r2,4(sp)
    30c8:	14400415 	stw	r17,16(r2)
    30cc:	8005883a 	mov	r2,r16
    30d0:	dfc00d17 	ldw	ra,52(sp)
    30d4:	df000c17 	ldw	fp,48(sp)
    30d8:	ddc00b17 	ldw	r23,44(sp)
    30dc:	dd800a17 	ldw	r22,40(sp)
    30e0:	dd400917 	ldw	r21,36(sp)
    30e4:	dd000817 	ldw	r20,32(sp)
    30e8:	dcc00717 	ldw	r19,28(sp)
    30ec:	dc800617 	ldw	r18,24(sp)
    30f0:	dc400517 	ldw	r17,20(sp)
    30f4:	dc000417 	ldw	r16,16(sp)
    30f8:	dec00e04 	addi	sp,sp,56
    30fc:	f800283a 	ret
    3100:	0005883a 	mov	r2,zero
    3104:	003ff206 	br	30d0 <quorem+0x1e8>

00003108 <_dtoa_r>:
    3108:	20801017 	ldw	r2,64(r4)
    310c:	deffe304 	addi	sp,sp,-116
    3110:	df001b15 	stw	fp,108(sp)
    3114:	dcc01615 	stw	r19,88(sp)
    3118:	dc801515 	stw	r18,84(sp)
    311c:	dc401415 	stw	r17,80(sp)
    3120:	dc001315 	stw	r16,76(sp)
    3124:	dfc01c15 	stw	ra,112(sp)
    3128:	ddc01a15 	stw	r23,104(sp)
    312c:	dd801915 	stw	r22,100(sp)
    3130:	dd401815 	stw	r21,96(sp)
    3134:	dd001715 	stw	r20,92(sp)
    3138:	d9c00215 	stw	r7,8(sp)
    313c:	dc001f17 	ldw	r16,124(sp)
    3140:	2039883a 	mov	fp,r4
    3144:	3025883a 	mov	r18,r6
    3148:	2827883a 	mov	r19,r5
    314c:	3023883a 	mov	r17,r6
    3150:	10000826 	beq	r2,zero,3174 <_dtoa_r+0x6c>
    3154:	21801117 	ldw	r6,68(r4)
    3158:	00c00044 	movi	r3,1
    315c:	100b883a 	mov	r5,r2
    3160:	1986983a 	sll	r3,r3,r6
    3164:	11800115 	stw	r6,4(r2)
    3168:	10c00215 	stw	r3,8(r2)
    316c:	00067cc0 	call	67cc <_Bfree>
    3170:	e0001015 	stw	zero,64(fp)
    3174:	90018916 	blt	r18,zero,379c <_dtoa_r+0x694>
    3178:	80000015 	stw	zero,0(r16)
    317c:	909ffc2c 	andhi	r2,r18,32752
    3180:	00dffc34 	movhi	r3,32752
    3184:	10c18e26 	beq	r2,r3,37c0 <_dtoa_r+0x6b8>
    3188:	000d883a 	mov	r6,zero
    318c:	000f883a 	mov	r7,zero
    3190:	9809883a 	mov	r4,r19
    3194:	880b883a 	mov	r5,r17
    3198:	000c5fc0 	call	c5fc <__eqdf2>
    319c:	1000191e 	bne	r2,zero,3204 <_dtoa_r+0xfc>
    31a0:	d8c01e17 	ldw	r3,120(sp)
    31a4:	00800044 	movi	r2,1
    31a8:	18800015 	stw	r2,0(r3)
    31ac:	d8802017 	ldw	r2,128(sp)
    31b0:	1002ff26 	beq	r2,zero,3db0 <_dtoa_r+0xca8>
    31b4:	d9002017 	ldw	r4,128(sp)
    31b8:	00800074 	movhi	r2,1
    31bc:	10832f44 	addi	r2,r2,3261
    31c0:	00c00074 	movhi	r3,1
    31c4:	20800015 	stw	r2,0(r4)
    31c8:	18832f04 	addi	r2,r3,3260
    31cc:	d8800115 	stw	r2,4(sp)
    31d0:	d8800117 	ldw	r2,4(sp)
    31d4:	dfc01c17 	ldw	ra,112(sp)
    31d8:	df001b17 	ldw	fp,108(sp)
    31dc:	ddc01a17 	ldw	r23,104(sp)
    31e0:	dd801917 	ldw	r22,100(sp)
    31e4:	dd401817 	ldw	r21,96(sp)
    31e8:	dd001717 	ldw	r20,92(sp)
    31ec:	dcc01617 	ldw	r19,88(sp)
    31f0:	dc801517 	ldw	r18,84(sp)
    31f4:	dc401417 	ldw	r17,80(sp)
    31f8:	dc001317 	ldw	r16,76(sp)
    31fc:	dec01d04 	addi	sp,sp,116
    3200:	f800283a 	ret
    3204:	d8801104 	addi	r2,sp,68
    3208:	9020d53a 	srli	r16,r18,20
    320c:	d8800015 	stw	r2,0(sp)
    3210:	d9c01204 	addi	r7,sp,72
    3214:	980b883a 	mov	r5,r19
    3218:	880d883a 	mov	r6,r17
    321c:	e009883a 	mov	r4,fp
    3220:	00075c40 	call	75c4 <__d2b>
    3224:	102f883a 	mov	r23,r2
    3228:	8001781e 	bne	r16,zero,380c <_dtoa_r+0x704>
    322c:	dd001117 	ldw	r20,68(sp)
    3230:	dc001217 	ldw	r16,72(sp)
    3234:	a421883a 	add	r16,r20,r16
    3238:	80810c84 	addi	r2,r16,1074
    323c:	10c00850 	cmplti	r3,r2,33
    3240:	1802eb1e 	bne	r3,zero,3df0 <_dtoa_r+0xce8>
    3244:	01001004 	movi	r4,64
    3248:	2085c83a 	sub	r2,r4,r2
    324c:	81010484 	addi	r4,r16,1042
    3250:	90a4983a 	sll	r18,r18,r2
    3254:	9908d83a 	srl	r4,r19,r4
    3258:	9108b03a 	or	r4,r18,r4
    325c:	000da900 	call	da90 <__floatunsidf>
    3260:	1009883a 	mov	r4,r2
    3264:	017f8434 	movhi	r5,65040
    3268:	00800044 	movi	r2,1
    326c:	194b883a 	add	r5,r3,r5
    3270:	843fffc4 	addi	r16,r16,-1
    3274:	d8800915 	stw	r2,36(sp)
    3278:	000d883a 	mov	r6,zero
    327c:	01cffe34 	movhi	r7,16376
    3280:	000cff80 	call	cff8 <__subdf3>
    3284:	0198dbf4 	movhi	r6,25455
    3288:	01cff4f4 	movhi	r7,16339
    328c:	3190d844 	addi	r6,r6,17249
    3290:	39e1e9c4 	addi	r7,r7,-30809
    3294:	1009883a 	mov	r4,r2
    3298:	180b883a 	mov	r5,r3
    329c:	000c84c0 	call	c84c <__muldf3>
    32a0:	01a2d874 	movhi	r6,35681
    32a4:	01cff1f4 	movhi	r7,16327
    32a8:	31b22cc4 	addi	r6,r6,-14157
    32ac:	39e28a04 	addi	r7,r7,-30168
    32b0:	180b883a 	mov	r5,r3
    32b4:	1009883a 	mov	r4,r2
    32b8:	000b3f80 	call	b3f8 <__adddf3>
    32bc:	8009883a 	mov	r4,r16
    32c0:	102b883a 	mov	r21,r2
    32c4:	1825883a 	mov	r18,r3
    32c8:	000d9d80 	call	d9d8 <__floatsidf>
    32cc:	019427f4 	movhi	r6,20639
    32d0:	01cff4f4 	movhi	r7,16339
    32d4:	319e7ec4 	addi	r6,r6,31227
    32d8:	39d104c4 	addi	r7,r7,17427
    32dc:	1009883a 	mov	r4,r2
    32e0:	180b883a 	mov	r5,r3
    32e4:	000c84c0 	call	c84c <__muldf3>
    32e8:	100d883a 	mov	r6,r2
    32ec:	180f883a 	mov	r7,r3
    32f0:	a809883a 	mov	r4,r21
    32f4:	900b883a 	mov	r5,r18
    32f8:	000b3f80 	call	b3f8 <__adddf3>
    32fc:	1009883a 	mov	r4,r2
    3300:	180b883a 	mov	r5,r3
    3304:	1025883a 	mov	r18,r2
    3308:	182d883a 	mov	r22,r3
    330c:	000d9580 	call	d958 <__fixdfsi>
    3310:	000d883a 	mov	r6,zero
    3314:	000f883a 	mov	r7,zero
    3318:	9009883a 	mov	r4,r18
    331c:	b00b883a 	mov	r5,r22
    3320:	102b883a 	mov	r21,r2
    3324:	000c7640 	call	c764 <__ledf2>
    3328:	10029716 	blt	r2,zero,3d88 <_dtoa_r+0xc80>
    332c:	a421c83a 	sub	r16,r20,r16
    3330:	a88005e8 	cmpgeui	r2,r21,23
    3334:	85bfffc4 	addi	r22,r16,-1
    3338:	10028b1e 	bne	r2,zero,3d68 <_dtoa_r+0xc60>
    333c:	a80690fa 	slli	r3,r21,3
    3340:	00800074 	movhi	r2,1
    3344:	10837804 	addi	r2,r2,3552
    3348:	10c5883a 	add	r2,r2,r3
    334c:	11800017 	ldw	r6,0(r2)
    3350:	11c00117 	ldw	r7,4(r2)
    3354:	9809883a 	mov	r4,r19
    3358:	880b883a 	mov	r5,r17
    335c:	000c7640 	call	c764 <__ledf2>
    3360:	10025f0e 	bge	r2,zero,3ce0 <_dtoa_r+0xbd8>
    3364:	d8000815 	stw	zero,32(sp)
    3368:	ad7fffc4 	addi	r21,r21,-1
    336c:	b0028116 	blt	r22,zero,3d74 <_dtoa_r+0xc6c>
    3370:	d8000415 	stw	zero,16(sp)
    3374:	a8025d0e 	bge	r21,zero,3cec <_dtoa_r+0xbe4>
    3378:	d8800417 	ldw	r2,16(sp)
    337c:	d8c00217 	ldw	r3,8(sp)
    3380:	dd400615 	stw	r21,24(sp)
    3384:	1545c83a 	sub	r2,r2,r21
    3388:	d8800415 	stw	r2,16(sp)
    338c:	0545c83a 	sub	r2,zero,r21
    3390:	d8800715 	stw	r2,28(sp)
    3394:	188002a8 	cmpgeui	r2,r3,10
    3398:	002b883a 	mov	r21,zero
    339c:	1002591e 	bne	r2,zero,3d04 <_dtoa_r+0xbfc>
    33a0:	18800190 	cmplti	r2,r3,6
    33a4:	1002961e 	bne	r2,zero,3e00 <_dtoa_r+0xcf8>
    33a8:	18bfff04 	addi	r2,r3,-4
    33ac:	d8800215 	stw	r2,8(sp)
    33b0:	0021883a 	mov	r16,zero
    33b4:	d8c00217 	ldw	r3,8(sp)
    33b8:	18800120 	cmpeqi	r2,r3,4
    33bc:	10036d1e 	bne	r2,zero,4174 <_dtoa_r+0x106c>
    33c0:	18800160 	cmpeqi	r2,r3,5
    33c4:	1003291e 	bne	r2,zero,406c <_dtoa_r+0xf64>
    33c8:	188000a0 	cmpeqi	r2,r3,2
    33cc:	10025926 	beq	r2,zero,3d34 <_dtoa_r+0xc2c>
    33d0:	d8000515 	stw	zero,20(sp)
    33d4:	d8801d17 	ldw	r2,116(sp)
    33d8:	0083340e 	bge	zero,r2,40ac <_dtoa_r+0xfa4>
    33dc:	d8800b15 	stw	r2,44(sp)
    33e0:	d8800315 	stw	r2,12(sp)
    33e4:	100d883a 	mov	r6,r2
    33e8:	e0001115 	stw	zero,68(fp)
    33ec:	30800610 	cmplti	r2,r6,24
    33f0:	1004f61e 	bne	r2,zero,47cc <_dtoa_r+0x16c4>
    33f4:	00c00044 	movi	r3,1
    33f8:	00800104 	movi	r2,4
    33fc:	1085883a 	add	r2,r2,r2
    3400:	11000504 	addi	r4,r2,20
    3404:	180b883a 	mov	r5,r3
    3408:	18c00044 	addi	r3,r3,1
    340c:	313ffb2e 	bgeu	r6,r4,33fc <_dtoa_r+0x2f4>
    3410:	e1401115 	stw	r5,68(fp)
    3414:	e009883a 	mov	r4,fp
    3418:	00067280 	call	6728 <_Balloc>
    341c:	d8800115 	stw	r2,4(sp)
    3420:	1004e326 	beq	r2,zero,47b0 <_dtoa_r+0x16a8>
    3424:	d8800117 	ldw	r2,4(sp)
    3428:	e0801015 	stw	r2,64(fp)
    342c:	d8800317 	ldw	r2,12(sp)
    3430:	108003e8 	cmpgeui	r2,r2,15
    3434:	1001091e 	bne	r2,zero,385c <_dtoa_r+0x754>
    3438:	80010826 	beq	r16,zero,385c <_dtoa_r+0x754>
    343c:	d9000617 	ldw	r4,24(sp)
    3440:	0103970e 	bge	zero,r4,42a0 <_dtoa_r+0x1198>
    3444:	208003cc 	andi	r2,r4,15
    3448:	100690fa 	slli	r3,r2,3
    344c:	2029d13a 	srai	r20,r4,4
    3450:	00800074 	movhi	r2,1
    3454:	10837804 	addi	r2,r2,3552
    3458:	10c5883a 	add	r2,r2,r3
    345c:	a0c0040c 	andi	r3,r20,16
    3460:	12800017 	ldw	r10,0(r2)
    3464:	12400117 	ldw	r9,4(r2)
    3468:	18033c26 	beq	r3,zero,415c <_dtoa_r+0x1054>
    346c:	00800074 	movhi	r2,1
    3470:	10836e04 	addi	r2,r2,3512
    3474:	11800817 	ldw	r6,32(r2)
    3478:	11c00917 	ldw	r7,36(r2)
    347c:	9809883a 	mov	r4,r19
    3480:	880b883a 	mov	r5,r17
    3484:	da400e15 	stw	r9,56(sp)
    3488:	da800d15 	stw	r10,52(sp)
    348c:	000bce80 	call	bce8 <__divdf3>
    3490:	da800d17 	ldw	r10,52(sp)
    3494:	da400e17 	ldw	r9,56(sp)
    3498:	a50003cc 	andi	r20,r20,15
    349c:	d8800a15 	stw	r2,40(sp)
    34a0:	d8c00c15 	stw	r3,48(sp)
    34a4:	040000c4 	movi	r16,3
    34a8:	a0001126 	beq	r20,zero,34f0 <_dtoa_r+0x3e8>
    34ac:	04800074 	movhi	r18,1
    34b0:	94836e04 	addi	r18,r18,3512
    34b4:	5009883a 	mov	r4,r10
    34b8:	480b883a 	mov	r5,r9
    34bc:	a180004c 	andi	r6,r20,1
    34c0:	30000626 	beq	r6,zero,34dc <_dtoa_r+0x3d4>
    34c4:	91800017 	ldw	r6,0(r18)
    34c8:	91c00117 	ldw	r7,4(r18)
    34cc:	84000044 	addi	r16,r16,1
    34d0:	000c84c0 	call	c84c <__muldf3>
    34d4:	1009883a 	mov	r4,r2
    34d8:	180b883a 	mov	r5,r3
    34dc:	a029d07a 	srai	r20,r20,1
    34e0:	94800204 	addi	r18,r18,8
    34e4:	a03ff51e 	bne	r20,zero,34bc <_dtoa_r+0x3b4>
    34e8:	2015883a 	mov	r10,r4
    34ec:	2813883a 	mov	r9,r5
    34f0:	d9000a17 	ldw	r4,40(sp)
    34f4:	d9400c17 	ldw	r5,48(sp)
    34f8:	500d883a 	mov	r6,r10
    34fc:	480f883a 	mov	r7,r9
    3500:	000bce80 	call	bce8 <__divdf3>
    3504:	d8800a15 	stw	r2,40(sp)
    3508:	1825883a 	mov	r18,r3
    350c:	d8800817 	ldw	r2,32(sp)
    3510:	10000726 	beq	r2,zero,3530 <_dtoa_r+0x428>
    3514:	dd000a17 	ldw	r20,40(sp)
    3518:	000d883a 	mov	r6,zero
    351c:	01cffc34 	movhi	r7,16368
    3520:	a009883a 	mov	r4,r20
    3524:	900b883a 	mov	r5,r18
    3528:	000c7640 	call	c764 <__ledf2>
    352c:	10044516 	blt	r2,zero,4644 <_dtoa_r+0x153c>
    3530:	8009883a 	mov	r4,r16
    3534:	000d9d80 	call	d9d8 <__floatsidf>
    3538:	d9800a17 	ldw	r6,40(sp)
    353c:	900f883a 	mov	r7,r18
    3540:	1009883a 	mov	r4,r2
    3544:	180b883a 	mov	r5,r3
    3548:	000c84c0 	call	c84c <__muldf3>
    354c:	000d883a 	mov	r6,zero
    3550:	01d00734 	movhi	r7,16412
    3554:	1009883a 	mov	r4,r2
    3558:	180b883a 	mov	r5,r3
    355c:	000b3f80 	call	b3f8 <__adddf3>
    3560:	1029883a 	mov	r20,r2
    3564:	00bf3034 	movhi	r2,64704
    3568:	1885883a 	add	r2,r3,r2
    356c:	d8800c15 	stw	r2,48(sp)
    3570:	d8800317 	ldw	r2,12(sp)
    3574:	10032d26 	beq	r2,zero,422c <_dtoa_r+0x1124>
    3578:	d8800617 	ldw	r2,24(sp)
    357c:	d8801015 	stw	r2,64(sp)
    3580:	d8800317 	ldw	r2,12(sp)
    3584:	d8800d15 	stw	r2,52(sp)
    3588:	d8800d17 	ldw	r2,52(sp)
    358c:	dc000a17 	ldw	r16,40(sp)
    3590:	900b883a 	mov	r5,r18
    3594:	10bfffc4 	addi	r2,r2,-1
    3598:	100690fa 	slli	r3,r2,3
    359c:	00800074 	movhi	r2,1
    35a0:	10837804 	addi	r2,r2,3552
    35a4:	10c5883a 	add	r2,r2,r3
    35a8:	12c00017 	ldw	r11,0(r2)
    35ac:	13000117 	ldw	r12,4(r2)
    35b0:	8009883a 	mov	r4,r16
    35b4:	dac00e15 	stw	r11,56(sp)
    35b8:	db000a15 	stw	r12,40(sp)
    35bc:	000d9580 	call	d958 <__fixdfsi>
    35c0:	1009883a 	mov	r4,r2
    35c4:	10800c04 	addi	r2,r2,48
    35c8:	d8800f15 	stw	r2,60(sp)
    35cc:	000d9d80 	call	d9d8 <__floatsidf>
    35d0:	8009883a 	mov	r4,r16
    35d4:	100d883a 	mov	r6,r2
    35d8:	180f883a 	mov	r7,r3
    35dc:	900b883a 	mov	r5,r18
    35e0:	000cff80 	call	cff8 <__subdf3>
    35e4:	d9000117 	ldw	r4,4(sp)
    35e8:	dac00e17 	ldw	r11,56(sp)
    35ec:	db000a17 	ldw	r12,40(sp)
    35f0:	1825883a 	mov	r18,r3
    35f4:	d8c00517 	ldw	r3,20(sp)
    35f8:	22000044 	addi	r8,r4,1
    35fc:	da000e15 	stw	r8,56(sp)
    3600:	1021883a 	mov	r16,r2
    3604:	580d883a 	mov	r6,r11
    3608:	600f883a 	mov	r7,r12
    360c:	1803b226 	beq	r3,zero,44d8 <_dtoa_r+0x13d0>
    3610:	0009883a 	mov	r4,zero
    3614:	014ff834 	movhi	r5,16352
    3618:	000bce80 	call	bce8 <__divdf3>
    361c:	d9c00c17 	ldw	r7,48(sp)
    3620:	a00d883a 	mov	r6,r20
    3624:	1009883a 	mov	r4,r2
    3628:	180b883a 	mov	r5,r3
    362c:	000cff80 	call	cff8 <__subdf3>
    3630:	d9000117 	ldw	r4,4(sp)
    3634:	1029883a 	mov	r20,r2
    3638:	d8800f17 	ldw	r2,60(sp)
    363c:	800d883a 	mov	r6,r16
    3640:	900f883a 	mov	r7,r18
    3644:	20800005 	stb	r2,0(r4)
    3648:	180b883a 	mov	r5,r3
    364c:	a009883a 	mov	r4,r20
    3650:	d8c00a15 	stw	r3,40(sp)
    3654:	000c67c0 	call	c67c <__gedf2>
    3658:	da000e17 	ldw	r8,56(sp)
    365c:	0083e516 	blt	zero,r2,45f4 <_dtoa_r+0x14ec>
    3660:	0005883a 	mov	r2,zero
    3664:	dd400e15 	stw	r21,56(sp)
    3668:	dd800f15 	stw	r22,60(sp)
    366c:	ddc00c15 	stw	r23,48(sp)
    3670:	dd800d17 	ldw	r22,52(sp)
    3674:	402b883a 	mov	r21,r8
    3678:	dc400d15 	stw	r17,52(sp)
    367c:	dc400a17 	ldw	r17,40(sp)
    3680:	dcc00a15 	stw	r19,40(sp)
    3684:	1027883a 	mov	r19,r2
    3688:	00002606 	br	3724 <_dtoa_r+0x61c>
    368c:	9cc00044 	addi	r19,r19,1
    3690:	9d806d0e 	bge	r19,r22,3848 <_dtoa_r+0x740>
    3694:	a009883a 	mov	r4,r20
    3698:	880b883a 	mov	r5,r17
    369c:	000d883a 	mov	r6,zero
    36a0:	01d00934 	movhi	r7,16420
    36a4:	000c84c0 	call	c84c <__muldf3>
    36a8:	000d883a 	mov	r6,zero
    36ac:	01d00934 	movhi	r7,16420
    36b0:	8009883a 	mov	r4,r16
    36b4:	900b883a 	mov	r5,r18
    36b8:	1029883a 	mov	r20,r2
    36bc:	1823883a 	mov	r17,r3
    36c0:	000c84c0 	call	c84c <__muldf3>
    36c4:	180b883a 	mov	r5,r3
    36c8:	1009883a 	mov	r4,r2
    36cc:	1821883a 	mov	r16,r3
    36d0:	1025883a 	mov	r18,r2
    36d4:	000d9580 	call	d958 <__fixdfsi>
    36d8:	1009883a 	mov	r4,r2
    36dc:	102f883a 	mov	r23,r2
    36e0:	000d9d80 	call	d9d8 <__floatsidf>
    36e4:	9009883a 	mov	r4,r18
    36e8:	800b883a 	mov	r5,r16
    36ec:	100d883a 	mov	r6,r2
    36f0:	180f883a 	mov	r7,r3
    36f4:	000cff80 	call	cff8 <__subdf3>
    36f8:	ad400044 	addi	r21,r21,1
    36fc:	ba000c04 	addi	r8,r23,48
    3700:	aa3fffc5 	stb	r8,-1(r21)
    3704:	a00d883a 	mov	r6,r20
    3708:	880f883a 	mov	r7,r17
    370c:	1009883a 	mov	r4,r2
    3710:	180b883a 	mov	r5,r3
    3714:	1021883a 	mov	r16,r2
    3718:	1825883a 	mov	r18,r3
    371c:	000c7640 	call	c764 <__ledf2>
    3720:	10040516 	blt	r2,zero,4738 <_dtoa_r+0x1630>
    3724:	800d883a 	mov	r6,r16
    3728:	900f883a 	mov	r7,r18
    372c:	0009883a 	mov	r4,zero
    3730:	014ffc34 	movhi	r5,16368
    3734:	000cff80 	call	cff8 <__subdf3>
    3738:	a00d883a 	mov	r6,r20
    373c:	880f883a 	mov	r7,r17
    3740:	1009883a 	mov	r4,r2
    3744:	180b883a 	mov	r5,r3
    3748:	000c7640 	call	c764 <__ledf2>
    374c:	103fcf0e 	bge	r2,zero,368c <_dtoa_r+0x584>
    3750:	d8801017 	ldw	r2,64(sp)
    3754:	ddc00c17 	ldw	r23,48(sp)
    3758:	d9000117 	ldw	r4,4(sp)
    375c:	a829883a 	mov	r20,r21
    3760:	14c00044 	addi	r19,r2,1
    3764:	00000106 	br	376c <_dtoa_r+0x664>
    3768:	a103d826 	beq	r20,r4,46cc <_dtoa_r+0x15c4>
    376c:	a0ffffc3 	ldbu	r3,-1(r20)
    3770:	a011883a 	mov	r8,r20
    3774:	a53fffc4 	addi	r20,r20,-1
    3778:	18803fcc 	andi	r2,r3,255
    377c:	1080201c 	xori	r2,r2,128
    3780:	10bfe004 	addi	r2,r2,-128
    3784:	10800e60 	cmpeqi	r2,r2,57
    3788:	103ff71e 	bne	r2,zero,3768 <_dtoa_r+0x660>
    378c:	18c00044 	addi	r3,r3,1
    3790:	a0c00005 	stb	r3,0(r20)
    3794:	dcc00215 	stw	r19,8(sp)
    3798:	00014406 	br	3cac <_dtoa_r+0xba4>
    379c:	04600034 	movhi	r17,32768
    37a0:	8c7fffc4 	addi	r17,r17,-1
    37a4:	9462703a 	and	r17,r18,r17
    37a8:	00800044 	movi	r2,1
    37ac:	8825883a 	mov	r18,r17
    37b0:	80800015 	stw	r2,0(r16)
    37b4:	00dffc34 	movhi	r3,32752
    37b8:	909ffc2c 	andhi	r2,r18,32752
    37bc:	10fe721e 	bne	r2,r3,3188 <_dtoa_r+0x80>
    37c0:	d9001e17 	ldw	r4,120(sp)
    37c4:	00800434 	movhi	r2,16
    37c8:	10bfffc4 	addi	r2,r2,-1
    37cc:	9084703a 	and	r2,r18,r2
    37d0:	00c9c3c4 	movi	r3,9999
    37d4:	20c00015 	stw	r3,0(r4)
    37d8:	14e6b03a 	or	r19,r2,r19
    37dc:	9800141e 	bne	r19,zero,3830 <_dtoa_r+0x728>
    37e0:	d8802017 	ldw	r2,128(sp)
    37e4:	10041126 	beq	r2,zero,482c <_dtoa_r+0x1724>
    37e8:	00800074 	movhi	r2,1
    37ec:	1007883a 	mov	r3,r2
    37f0:	18c33904 	addi	r3,r3,3300
    37f4:	00800074 	movhi	r2,1
    37f8:	d8c00115 	stw	r3,4(sp)
    37fc:	10833b04 	addi	r2,r2,3308
    3800:	d8c02017 	ldw	r3,128(sp)
    3804:	18800015 	stw	r2,0(r3)
    3808:	003e7106 	br	31d0 <_dtoa_r+0xc8>
    380c:	01400434 	movhi	r5,16
    3810:	297fffc4 	addi	r5,r5,-1
    3814:	894a703a 	and	r5,r17,r5
    3818:	dd001117 	ldw	r20,68(sp)
    381c:	9809883a 	mov	r4,r19
    3820:	294ffc34 	orhi	r5,r5,16368
    3824:	843f0044 	addi	r16,r16,-1023
    3828:	d8000915 	stw	zero,36(sp)
    382c:	003e9206 	br	3278 <_dtoa_r+0x170>
    3830:	d8802017 	ldw	r2,128(sp)
    3834:	1002061e 	bne	r2,zero,4050 <_dtoa_r+0xf48>
    3838:	00800074 	movhi	r2,1
    383c:	10833804 	addi	r2,r2,3296
    3840:	d8800115 	stw	r2,4(sp)
    3844:	003e6206 	br	31d0 <_dtoa_r+0xc8>
    3848:	dd400e17 	ldw	r21,56(sp)
    384c:	dd800f17 	ldw	r22,60(sp)
    3850:	ddc00c17 	ldw	r23,48(sp)
    3854:	dc400d17 	ldw	r17,52(sp)
    3858:	dcc00a17 	ldw	r19,40(sp)
    385c:	d8801217 	ldw	r2,72(sp)
    3860:	10006e16 	blt	r2,zero,3a1c <_dtoa_r+0x914>
    3864:	d9000617 	ldw	r4,24(sp)
    3868:	20c003c8 	cmpgei	r3,r4,15
    386c:	18006b1e 	bne	r3,zero,3a1c <_dtoa_r+0x914>
    3870:	200690fa 	slli	r3,r4,3
    3874:	00800074 	movhi	r2,1
    3878:	10837804 	addi	r2,r2,3552
    387c:	10c5883a 	add	r2,r2,r3
    3880:	14000017 	ldw	r16,0(r2)
    3884:	14800117 	ldw	r18,4(r2)
    3888:	d8801d17 	ldw	r2,116(sp)
    388c:	1000150e 	bge	r2,zero,38e4 <_dtoa_r+0x7dc>
    3890:	d8800317 	ldw	r2,12(sp)
    3894:	00801316 	blt	zero,r2,38e4 <_dtoa_r+0x7dc>
    3898:	d8800317 	ldw	r2,12(sp)
    389c:	1002771e 	bne	r2,zero,427c <_dtoa_r+0x1174>
    38a0:	8009883a 	mov	r4,r16
    38a4:	000d883a 	mov	r6,zero
    38a8:	01d00534 	movhi	r7,16404
    38ac:	900b883a 	mov	r5,r18
    38b0:	000c84c0 	call	c84c <__muldf3>
    38b4:	100d883a 	mov	r6,r2
    38b8:	180f883a 	mov	r7,r3
    38bc:	9809883a 	mov	r4,r19
    38c0:	880b883a 	mov	r5,r17
    38c4:	000c7640 	call	c764 <__ledf2>
    38c8:	0029883a 	mov	r20,zero
    38cc:	0021883a 	mov	r16,zero
    38d0:	00820916 	blt	zero,r2,40f8 <_dtoa_r+0xff0>
    38d4:	d8801d17 	ldw	r2,116(sp)
    38d8:	da000117 	ldw	r8,4(sp)
    38dc:	00a6303a 	nor	r19,zero,r2
    38e0:	00020b06 	br	4110 <_dtoa_r+0x1008>
    38e4:	800d883a 	mov	r6,r16
    38e8:	900f883a 	mov	r7,r18
    38ec:	9809883a 	mov	r4,r19
    38f0:	880b883a 	mov	r5,r17
    38f4:	000bce80 	call	bce8 <__divdf3>
    38f8:	180b883a 	mov	r5,r3
    38fc:	1009883a 	mov	r4,r2
    3900:	000d9580 	call	d958 <__fixdfsi>
    3904:	1009883a 	mov	r4,r2
    3908:	102b883a 	mov	r21,r2
    390c:	000d9d80 	call	d9d8 <__floatsidf>
    3910:	800d883a 	mov	r6,r16
    3914:	900f883a 	mov	r7,r18
    3918:	1009883a 	mov	r4,r2
    391c:	180b883a 	mov	r5,r3
    3920:	000c84c0 	call	c84c <__muldf3>
    3924:	100d883a 	mov	r6,r2
    3928:	9809883a 	mov	r4,r19
    392c:	880b883a 	mov	r5,r17
    3930:	180f883a 	mov	r7,r3
    3934:	000cff80 	call	cff8 <__subdf3>
    3938:	d9800117 	ldw	r6,4(sp)
    393c:	dd800317 	ldw	r22,12(sp)
    3940:	1009883a 	mov	r4,r2
    3944:	a8800c04 	addi	r2,r21,48
    3948:	30800005 	stb	r2,0(r6)
    394c:	b0800060 	cmpeqi	r2,r22,1
    3950:	180b883a 	mov	r5,r3
    3954:	35000044 	addi	r20,r6,1
    3958:	10029c1e 	bne	r2,zero,43cc <_dtoa_r+0x12c4>
    395c:	04400044 	movi	r17,1
    3960:	ddc00215 	stw	r23,8(sp)
    3964:	00001c06 	br	39d8 <_dtoa_r+0x8d0>
    3968:	800d883a 	mov	r6,r16
    396c:	900f883a 	mov	r7,r18
    3970:	a809883a 	mov	r4,r21
    3974:	980b883a 	mov	r5,r19
    3978:	000bce80 	call	bce8 <__divdf3>
    397c:	180b883a 	mov	r5,r3
    3980:	1009883a 	mov	r4,r2
    3984:	000d9580 	call	d958 <__fixdfsi>
    3988:	1009883a 	mov	r4,r2
    398c:	102f883a 	mov	r23,r2
    3990:	000d9d80 	call	d9d8 <__floatsidf>
    3994:	800d883a 	mov	r6,r16
    3998:	900f883a 	mov	r7,r18
    399c:	1009883a 	mov	r4,r2
    39a0:	180b883a 	mov	r5,r3
    39a4:	000c84c0 	call	c84c <__muldf3>
    39a8:	a809883a 	mov	r4,r21
    39ac:	980b883a 	mov	r5,r19
    39b0:	100d883a 	mov	r6,r2
    39b4:	180f883a 	mov	r7,r3
    39b8:	000cff80 	call	cff8 <__subdf3>
    39bc:	b9000c04 	addi	r4,r23,48
    39c0:	a1000005 	stb	r4,0(r20)
    39c4:	8c400044 	addi	r17,r17,1
    39c8:	a5000044 	addi	r20,r20,1
    39cc:	1009883a 	mov	r4,r2
    39d0:	180b883a 	mov	r5,r3
    39d4:	b4427b26 	beq	r22,r17,43c4 <_dtoa_r+0x12bc>
    39d8:	000d883a 	mov	r6,zero
    39dc:	01d00934 	movhi	r7,16420
    39e0:	000c84c0 	call	c84c <__muldf3>
    39e4:	000d883a 	mov	r6,zero
    39e8:	000f883a 	mov	r7,zero
    39ec:	1009883a 	mov	r4,r2
    39f0:	180b883a 	mov	r5,r3
    39f4:	102b883a 	mov	r21,r2
    39f8:	1827883a 	mov	r19,r3
    39fc:	000c5fc0 	call	c5fc <__eqdf2>
    3a00:	103fd91e 	bne	r2,zero,3968 <_dtoa_r+0x860>
    3a04:	d8800617 	ldw	r2,24(sp)
    3a08:	ddc00217 	ldw	r23,8(sp)
    3a0c:	a011883a 	mov	r8,r20
    3a10:	10800044 	addi	r2,r2,1
    3a14:	d8800215 	stw	r2,8(sp)
    3a18:	0000a406 	br	3cac <_dtoa_r+0xba4>
    3a1c:	d8c00517 	ldw	r3,20(sp)
    3a20:	1800e726 	beq	r3,zero,3dc0 <_dtoa_r+0xcb8>
    3a24:	d8c00217 	ldw	r3,8(sp)
    3a28:	18c00088 	cmpgei	r3,r3,2
    3a2c:	1801e526 	beq	r3,zero,41c4 <_dtoa_r+0x10bc>
    3a30:	d8800317 	ldw	r2,12(sp)
    3a34:	153fffc4 	addi	r20,r2,-1
    3a38:	d8800717 	ldw	r2,28(sp)
    3a3c:	1501c50e 	bge	r2,r20,4154 <_dtoa_r+0x104c>
    3a40:	d8800717 	ldw	r2,28(sp)
    3a44:	dd000715 	stw	r20,28(sp)
    3a48:	a085c83a 	sub	r2,r20,r2
    3a4c:	a8ab883a 	add	r21,r21,r2
    3a50:	0029883a 	mov	r20,zero
    3a54:	d8800317 	ldw	r2,12(sp)
    3a58:	10028b16 	blt	r2,zero,4488 <_dtoa_r+0x1380>
    3a5c:	d8c00417 	ldw	r3,16(sp)
    3a60:	b0ad883a 	add	r22,r22,r2
    3a64:	1885883a 	add	r2,r3,r2
    3a68:	1825883a 	mov	r18,r3
    3a6c:	d8800415 	stw	r2,16(sp)
    3a70:	01400044 	movi	r5,1
    3a74:	e009883a 	mov	r4,fp
    3a78:	0006b980 	call	6b98 <__i2b>
    3a7c:	1021883a 	mov	r16,r2
    3a80:	0480080e 	bge	zero,r18,3aa4 <_dtoa_r+0x99c>
    3a84:	0580070e 	bge	zero,r22,3aa4 <_dtoa_r+0x99c>
    3a88:	9005883a 	mov	r2,r18
    3a8c:	b481a916 	blt	r22,r18,4134 <_dtoa_r+0x102c>
    3a90:	d8c00417 	ldw	r3,16(sp)
    3a94:	90a5c83a 	sub	r18,r18,r2
    3a98:	b0adc83a 	sub	r22,r22,r2
    3a9c:	1887c83a 	sub	r3,r3,r2
    3aa0:	d8c00415 	stw	r3,16(sp)
    3aa4:	d8800717 	ldw	r2,28(sp)
    3aa8:	10001526 	beq	r2,zero,3b00 <_dtoa_r+0x9f8>
    3aac:	d8800517 	ldw	r2,20(sp)
    3ab0:	1001f526 	beq	r2,zero,4288 <_dtoa_r+0x1180>
    3ab4:	05000f0e 	bge	zero,r20,3af4 <_dtoa_r+0x9ec>
    3ab8:	800b883a 	mov	r5,r16
    3abc:	a00d883a 	mov	r6,r20
    3ac0:	e009883a 	mov	r4,fp
    3ac4:	0006f0c0 	call	6f0c <__pow5mult>
    3ac8:	b80d883a 	mov	r6,r23
    3acc:	100b883a 	mov	r5,r2
    3ad0:	e009883a 	mov	r4,fp
    3ad4:	1021883a 	mov	r16,r2
    3ad8:	0006c480 	call	6c48 <__multiply>
    3adc:	b80b883a 	mov	r5,r23
    3ae0:	e009883a 	mov	r4,fp
    3ae4:	d8800915 	stw	r2,36(sp)
    3ae8:	00067cc0 	call	67cc <_Bfree>
    3aec:	d8800917 	ldw	r2,36(sp)
    3af0:	102f883a 	mov	r23,r2
    3af4:	d8800717 	ldw	r2,28(sp)
    3af8:	150dc83a 	sub	r6,r2,r20
    3afc:	15025d1e 	bne	r2,r20,4474 <_dtoa_r+0x136c>
    3b00:	01400044 	movi	r5,1
    3b04:	e009883a 	mov	r4,fp
    3b08:	0006b980 	call	6b98 <__i2b>
    3b0c:	1029883a 	mov	r20,r2
    3b10:	0540bd16 	blt	zero,r21,3e08 <_dtoa_r+0xd00>
    3b14:	d8800217 	ldw	r2,8(sp)
    3b18:	10800088 	cmpgei	r2,r2,2
    3b1c:	10015626 	beq	r2,zero,4078 <_dtoa_r+0xf70>
    3b20:	0023883a 	mov	r17,zero
    3b24:	00800044 	movi	r2,1
    3b28:	a800c01e 	bne	r21,zero,3e2c <_dtoa_r+0xd24>
    3b2c:	1585883a 	add	r2,r2,r22
    3b30:	108007cc 	andi	r2,r2,31
    3b34:	1000ac26 	beq	r2,zero,3de8 <_dtoa_r+0xce0>
    3b38:	00c00804 	movi	r3,32
    3b3c:	1887c83a 	sub	r3,r3,r2
    3b40:	19000150 	cmplti	r4,r3,5
    3b44:	20033d1e 	bne	r4,zero,483c <_dtoa_r+0x1734>
    3b48:	00c00704 	movi	r3,28
    3b4c:	1885c83a 	sub	r2,r3,r2
    3b50:	d8c00417 	ldw	r3,16(sp)
    3b54:	90a5883a 	add	r18,r18,r2
    3b58:	b0ad883a 	add	r22,r22,r2
    3b5c:	1887883a 	add	r3,r3,r2
    3b60:	d8c00415 	stw	r3,16(sp)
    3b64:	d8800417 	ldw	r2,16(sp)
    3b68:	00809916 	blt	zero,r2,3dd0 <_dtoa_r+0xcc8>
    3b6c:	0580050e 	bge	zero,r22,3b84 <_dtoa_r+0xa7c>
    3b70:	a00b883a 	mov	r5,r20
    3b74:	b00d883a 	mov	r6,r22
    3b78:	e009883a 	mov	r4,fp
    3b7c:	00070540 	call	7054 <__lshift>
    3b80:	1029883a 	mov	r20,r2
    3b84:	d8800817 	ldw	r2,32(sp)
    3b88:	10011d1e 	bne	r2,zero,4000 <_dtoa_r+0xef8>
    3b8c:	d8800317 	ldw	r2,12(sp)
    3b90:	00810a0e 	bge	zero,r2,3fbc <_dtoa_r+0xeb4>
    3b94:	d8800517 	ldw	r2,20(sp)
    3b98:	1000b71e 	bne	r2,zero,3e78 <_dtoa_r+0xd70>
    3b9c:	d8800617 	ldw	r2,24(sp)
    3ba0:	10800044 	addi	r2,r2,1
    3ba4:	d8800215 	stw	r2,8(sp)
    3ba8:	dc800317 	ldw	r18,12(sp)
    3bac:	dd400117 	ldw	r21,4(sp)
    3bb0:	04400044 	movi	r17,1
    3bb4:	00000706 	br	3bd4 <_dtoa_r+0xacc>
    3bb8:	b80b883a 	mov	r5,r23
    3bbc:	000f883a 	mov	r7,zero
    3bc0:	01800284 	movi	r6,10
    3bc4:	e009883a 	mov	r4,fp
    3bc8:	00067f00 	call	67f0 <__multadd>
    3bcc:	102f883a 	mov	r23,r2
    3bd0:	8c400044 	addi	r17,r17,1
    3bd4:	a00b883a 	mov	r5,r20
    3bd8:	b809883a 	mov	r4,r23
    3bdc:	0002ee80 	call	2ee8 <quorem>
    3be0:	14c00c04 	addi	r19,r2,48
    3be4:	ac45883a 	add	r2,r21,r17
    3be8:	14ffffc5 	stb	r19,-1(r2)
    3bec:	8cbff216 	blt	r17,r18,3bb8 <_dtoa_r+0xab0>
    3bf0:	d8800317 	ldw	r2,12(sp)
    3bf4:	00815d0e 	bge	zero,r2,416c <_dtoa_r+0x1064>
    3bf8:	d8c00117 	ldw	r3,4(sp)
    3bfc:	0023883a 	mov	r17,zero
    3c00:	1891883a 	add	r8,r3,r2
    3c04:	b80b883a 	mov	r5,r23
    3c08:	01800044 	movi	r6,1
    3c0c:	e009883a 	mov	r4,fp
    3c10:	da000315 	stw	r8,12(sp)
    3c14:	00070540 	call	7054 <__lshift>
    3c18:	a00b883a 	mov	r5,r20
    3c1c:	1009883a 	mov	r4,r2
    3c20:	102f883a 	mov	r23,r2
    3c24:	00071dc0 	call	71dc <__mcmp>
    3c28:	da000317 	ldw	r8,12(sp)
    3c2c:	0081540e 	bge	zero,r2,4180 <_dtoa_r+0x1078>
    3c30:	413fffc3 	ldbu	r4,-1(r8)
    3c34:	d9400117 	ldw	r5,4(sp)
    3c38:	00000306 	br	3c48 <_dtoa_r+0xb40>
    3c3c:	28c15a26 	beq	r5,r3,41a8 <_dtoa_r+0x10a0>
    3c40:	193fffc3 	ldbu	r4,-1(r3)
    3c44:	1811883a 	mov	r8,r3
    3c48:	20803fcc 	andi	r2,r4,255
    3c4c:	1080201c 	xori	r2,r2,128
    3c50:	10bfe004 	addi	r2,r2,-128
    3c54:	10800e60 	cmpeqi	r2,r2,57
    3c58:	40ffffc4 	addi	r3,r8,-1
    3c5c:	103ff71e 	bne	r2,zero,3c3c <_dtoa_r+0xb34>
    3c60:	21000044 	addi	r4,r4,1
    3c64:	19000005 	stb	r4,0(r3)
    3c68:	a00b883a 	mov	r5,r20
    3c6c:	e009883a 	mov	r4,fp
    3c70:	da000315 	stw	r8,12(sp)
    3c74:	00067cc0 	call	67cc <_Bfree>
    3c78:	da000317 	ldw	r8,12(sp)
    3c7c:	80000b26 	beq	r16,zero,3cac <_dtoa_r+0xba4>
    3c80:	88000526 	beq	r17,zero,3c98 <_dtoa_r+0xb90>
    3c84:	8c000426 	beq	r17,r16,3c98 <_dtoa_r+0xb90>
    3c88:	880b883a 	mov	r5,r17
    3c8c:	e009883a 	mov	r4,fp
    3c90:	00067cc0 	call	67cc <_Bfree>
    3c94:	da000317 	ldw	r8,12(sp)
    3c98:	800b883a 	mov	r5,r16
    3c9c:	e009883a 	mov	r4,fp
    3ca0:	da000315 	stw	r8,12(sp)
    3ca4:	00067cc0 	call	67cc <_Bfree>
    3ca8:	da000317 	ldw	r8,12(sp)
    3cac:	b80b883a 	mov	r5,r23
    3cb0:	e009883a 	mov	r4,fp
    3cb4:	da000315 	stw	r8,12(sp)
    3cb8:	00067cc0 	call	67cc <_Bfree>
    3cbc:	da000317 	ldw	r8,12(sp)
    3cc0:	d8801e17 	ldw	r2,120(sp)
    3cc4:	d8c00217 	ldw	r3,8(sp)
    3cc8:	40000005 	stb	zero,0(r8)
    3ccc:	10c00015 	stw	r3,0(r2)
    3cd0:	d8802017 	ldw	r2,128(sp)
    3cd4:	103d3e26 	beq	r2,zero,31d0 <_dtoa_r+0xc8>
    3cd8:	12000015 	stw	r8,0(r2)
    3cdc:	003d3c06 	br	31d0 <_dtoa_r+0xc8>
    3ce0:	d8000815 	stw	zero,32(sp)
    3ce4:	b0002316 	blt	r22,zero,3d74 <_dtoa_r+0xc6c>
    3ce8:	d8000415 	stw	zero,16(sp)
    3cec:	d8c00217 	ldw	r3,8(sp)
    3cf0:	dd400615 	stw	r21,24(sp)
    3cf4:	d8000715 	stw	zero,28(sp)
    3cf8:	188002a8 	cmpgeui	r2,r3,10
    3cfc:	b56d883a 	add	r22,r22,r21
    3d00:	103da726 	beq	r2,zero,33a0 <_dtoa_r+0x298>
    3d04:	00800044 	movi	r2,1
    3d08:	d8800515 	stw	r2,20(sp)
    3d0c:	00bfffc4 	movi	r2,-1
    3d10:	04000044 	movi	r16,1
    3d14:	d8000215 	stw	zero,8(sp)
    3d18:	d8800315 	stw	r2,12(sp)
    3d1c:	d8001d15 	stw	zero,116(sp)
    3d20:	d8800317 	ldw	r2,12(sp)
    3d24:	e0001115 	stw	zero,68(fp)
    3d28:	000b883a 	mov	r5,zero
    3d2c:	d8800b15 	stw	r2,44(sp)
    3d30:	003db806 	br	3414 <_dtoa_r+0x30c>
    3d34:	188000e0 	cmpeqi	r2,r3,3
    3d38:	d8000515 	stw	zero,20(sp)
    3d3c:	1002a526 	beq	r2,zero,47d4 <_dtoa_r+0x16cc>
    3d40:	d8801d17 	ldw	r2,116(sp)
    3d44:	d8c00617 	ldw	r3,24(sp)
    3d48:	10c5883a 	add	r2,r2,r3
    3d4c:	d8800b15 	stw	r2,44(sp)
    3d50:	10800044 	addi	r2,r2,1
    3d54:	d8800315 	stw	r2,12(sp)
    3d58:	100d883a 	mov	r6,r2
    3d5c:	00bda216 	blt	zero,r2,33e8 <_dtoa_r+0x2e0>
    3d60:	01800044 	movi	r6,1
    3d64:	003da006 	br	33e8 <_dtoa_r+0x2e0>
    3d68:	00800044 	movi	r2,1
    3d6c:	d8800815 	stw	r2,32(sp)
    3d70:	b03d7f0e 	bge	r22,zero,3370 <_dtoa_r+0x268>
    3d74:	00800044 	movi	r2,1
    3d78:	1405c83a 	sub	r2,r2,r16
    3d7c:	d8800415 	stw	r2,16(sp)
    3d80:	002d883a 	mov	r22,zero
    3d84:	003d7b06 	br	3374 <_dtoa_r+0x26c>
    3d88:	a809883a 	mov	r4,r21
    3d8c:	000d9d80 	call	d9d8 <__floatsidf>
    3d90:	900d883a 	mov	r6,r18
    3d94:	b00f883a 	mov	r7,r22
    3d98:	1009883a 	mov	r4,r2
    3d9c:	180b883a 	mov	r5,r3
    3da0:	000c5fc0 	call	c5fc <__eqdf2>
    3da4:	103d6126 	beq	r2,zero,332c <_dtoa_r+0x224>
    3da8:	ad7fffc4 	addi	r21,r21,-1
    3dac:	003d5f06 	br	332c <_dtoa_r+0x224>
    3db0:	00800074 	movhi	r2,1
    3db4:	10832f04 	addi	r2,r2,3260
    3db8:	d8800115 	stw	r2,4(sp)
    3dbc:	003d0406 	br	31d0 <_dtoa_r+0xc8>
    3dc0:	dd000717 	ldw	r20,28(sp)
    3dc4:	dc800417 	ldw	r18,16(sp)
    3dc8:	0021883a 	mov	r16,zero
    3dcc:	003f2c06 	br	3a80 <_dtoa_r+0x978>
    3dd0:	b80b883a 	mov	r5,r23
    3dd4:	100d883a 	mov	r6,r2
    3dd8:	e009883a 	mov	r4,fp
    3ddc:	00070540 	call	7054 <__lshift>
    3de0:	102f883a 	mov	r23,r2
    3de4:	003f6106 	br	3b6c <_dtoa_r+0xa64>
    3de8:	00800704 	movi	r2,28
    3dec:	003f5806 	br	3b50 <_dtoa_r+0xa48>
    3df0:	01000804 	movi	r4,32
    3df4:	2089c83a 	sub	r4,r4,r2
    3df8:	9908983a 	sll	r4,r19,r4
    3dfc:	003d1706 	br	325c <_dtoa_r+0x154>
    3e00:	04000044 	movi	r16,1
    3e04:	003d6b06 	br	33b4 <_dtoa_r+0x2ac>
    3e08:	100b883a 	mov	r5,r2
    3e0c:	a80d883a 	mov	r6,r21
    3e10:	e009883a 	mov	r4,fp
    3e14:	0006f0c0 	call	6f0c <__pow5mult>
    3e18:	d8c00217 	ldw	r3,8(sp)
    3e1c:	1029883a 	mov	r20,r2
    3e20:	18c00090 	cmplti	r3,r3,2
    3e24:	18014b1e 	bne	r3,zero,4354 <_dtoa_r+0x124c>
    3e28:	0023883a 	mov	r17,zero
    3e2c:	a0800417 	ldw	r2,16(r20)
    3e30:	10800104 	addi	r2,r2,4
    3e34:	100490ba 	slli	r2,r2,2
    3e38:	a085883a 	add	r2,r20,r2
    3e3c:	11000017 	ldw	r4,0(r2)
    3e40:	0006a840 	call	6a84 <__hi0bits>
    3e44:	00c00804 	movi	r3,32
    3e48:	1885c83a 	sub	r2,r3,r2
    3e4c:	003f3706 	br	3b2c <_dtoa_r+0xa24>
    3e50:	800b883a 	mov	r5,r16
    3e54:	000f883a 	mov	r7,zero
    3e58:	01800284 	movi	r6,10
    3e5c:	e009883a 	mov	r4,fp
    3e60:	00067f00 	call	67f0 <__multadd>
    3e64:	1021883a 	mov	r16,r2
    3e68:	d8800b17 	ldw	r2,44(sp)
    3e6c:	0082460e 	bge	zero,r2,4788 <_dtoa_r+0x1680>
    3e70:	dd400615 	stw	r21,24(sp)
    3e74:	d8800315 	stw	r2,12(sp)
    3e78:	0480b016 	blt	zero,r18,413c <_dtoa_r+0x1034>
    3e7c:	88016c1e 	bne	r17,zero,4430 <_dtoa_r+0x1328>
    3e80:	8025883a 	mov	r18,r16
    3e84:	dd800117 	ldw	r22,4(sp)
    3e88:	d9000317 	ldw	r4,12(sp)
    3e8c:	98c0004c 	andi	r3,r19,1
    3e90:	b0bfffc4 	addi	r2,r22,-1
    3e94:	1105883a 	add	r2,r2,r4
    3e98:	d8800515 	stw	r2,20(sp)
    3e9c:	d8800217 	ldw	r2,8(sp)
    3ea0:	d8c00815 	stw	r3,32(sp)
    3ea4:	1884b03a 	or	r2,r3,r2
    3ea8:	d8800715 	stw	r2,28(sp)
    3eac:	00002b06 	br	3f5c <_dtoa_r+0xe54>
    3eb0:	b809883a 	mov	r4,r23
    3eb4:	d9400415 	stw	r5,16(sp)
    3eb8:	00071dc0 	call	71dc <__mcmp>
    3ebc:	d9400417 	ldw	r5,16(sp)
    3ec0:	e009883a 	mov	r4,fp
    3ec4:	d8800315 	stw	r2,12(sp)
    3ec8:	00067cc0 	call	67cc <_Bfree>
    3ecc:	d8800317 	ldw	r2,12(sp)
    3ed0:	1000021e 	bne	r2,zero,3edc <_dtoa_r+0xdd4>
    3ed4:	d8c00717 	ldw	r3,28(sp)
    3ed8:	18021d26 	beq	r3,zero,4750 <_dtoa_r+0x1648>
    3edc:	b2000044 	addi	r8,r22,1
    3ee0:	da000315 	stw	r8,12(sp)
    3ee4:	88012116 	blt	r17,zero,436c <_dtoa_r+0x1264>
    3ee8:	d8c00217 	ldw	r3,8(sp)
    3eec:	88e2b03a 	or	r17,r17,r3
    3ef0:	d8c00817 	ldw	r3,32(sp)
    3ef4:	1c62b03a 	or	r17,r3,r17
    3ef8:	88011c26 	beq	r17,zero,436c <_dtoa_r+0x1264>
    3efc:	00816616 	blt	zero,r2,4498 <_dtoa_r+0x1390>
    3f00:	d8800517 	ldw	r2,20(sp)
    3f04:	b4c00005 	stb	r19,0(r22)
    3f08:	15816d26 	beq	r2,r22,44c0 <_dtoa_r+0x13b8>
    3f0c:	b80b883a 	mov	r5,r23
    3f10:	000f883a 	mov	r7,zero
    3f14:	01800284 	movi	r6,10
    3f18:	e009883a 	mov	r4,fp
    3f1c:	00067f00 	call	67f0 <__multadd>
    3f20:	102f883a 	mov	r23,r2
    3f24:	800b883a 	mov	r5,r16
    3f28:	000f883a 	mov	r7,zero
    3f2c:	01800284 	movi	r6,10
    3f30:	e009883a 	mov	r4,fp
    3f34:	84801d26 	beq	r16,r18,3fac <_dtoa_r+0xea4>
    3f38:	00067f00 	call	67f0 <__multadd>
    3f3c:	900b883a 	mov	r5,r18
    3f40:	000f883a 	mov	r7,zero
    3f44:	01800284 	movi	r6,10
    3f48:	e009883a 	mov	r4,fp
    3f4c:	1021883a 	mov	r16,r2
    3f50:	00067f00 	call	67f0 <__multadd>
    3f54:	1025883a 	mov	r18,r2
    3f58:	dd800317 	ldw	r22,12(sp)
    3f5c:	a00b883a 	mov	r5,r20
    3f60:	b809883a 	mov	r4,r23
    3f64:	0002ee80 	call	2ee8 <quorem>
    3f68:	800b883a 	mov	r5,r16
    3f6c:	b809883a 	mov	r4,r23
    3f70:	102b883a 	mov	r21,r2
    3f74:	00071dc0 	call	71dc <__mcmp>
    3f78:	a00b883a 	mov	r5,r20
    3f7c:	900d883a 	mov	r6,r18
    3f80:	e009883a 	mov	r4,fp
    3f84:	1023883a 	mov	r17,r2
    3f88:	00072340 	call	7234 <__mdiff>
    3f8c:	100b883a 	mov	r5,r2
    3f90:	10800317 	ldw	r2,12(r2)
    3f94:	acc00c04 	addi	r19,r21,48
    3f98:	103fc526 	beq	r2,zero,3eb0 <_dtoa_r+0xda8>
    3f9c:	e009883a 	mov	r4,fp
    3fa0:	00067cc0 	call	67cc <_Bfree>
    3fa4:	00800044 	movi	r2,1
    3fa8:	003fcc06 	br	3edc <_dtoa_r+0xdd4>
    3fac:	00067f00 	call	67f0 <__multadd>
    3fb0:	1021883a 	mov	r16,r2
    3fb4:	1025883a 	mov	r18,r2
    3fb8:	003fe706 	br	3f58 <_dtoa_r+0xe50>
    3fbc:	d8800217 	ldw	r2,8(sp)
    3fc0:	108000d0 	cmplti	r2,r2,3
    3fc4:	10004026 	beq	r2,zero,40c8 <_dtoa_r+0xfc0>
    3fc8:	d8800517 	ldw	r2,20(sp)
    3fcc:	103faa1e 	bne	r2,zero,3e78 <_dtoa_r+0xd70>
    3fd0:	a00b883a 	mov	r5,r20
    3fd4:	b809883a 	mov	r4,r23
    3fd8:	0002ee80 	call	2ee8 <quorem>
    3fdc:	14c00c04 	addi	r19,r2,48
    3fe0:	d8800117 	ldw	r2,4(sp)
    3fe4:	0023883a 	mov	r17,zero
    3fe8:	12000044 	addi	r8,r2,1
    3fec:	14c00005 	stb	r19,0(r2)
    3ff0:	d8800617 	ldw	r2,24(sp)
    3ff4:	10800044 	addi	r2,r2,1
    3ff8:	d8800215 	stw	r2,8(sp)
    3ffc:	003f0106 	br	3c04 <_dtoa_r+0xafc>
    4000:	a00b883a 	mov	r5,r20
    4004:	b809883a 	mov	r4,r23
    4008:	00071dc0 	call	71dc <__mcmp>
    400c:	103edf0e 	bge	r2,zero,3b8c <_dtoa_r+0xa84>
    4010:	b80b883a 	mov	r5,r23
    4014:	000f883a 	mov	r7,zero
    4018:	01800284 	movi	r6,10
    401c:	e009883a 	mov	r4,fp
    4020:	00067f00 	call	67f0 <__multadd>
    4024:	d8c00617 	ldw	r3,24(sp)
    4028:	102f883a 	mov	r23,r2
    402c:	d8800517 	ldw	r2,20(sp)
    4030:	1d7fffc4 	addi	r21,r3,-1
    4034:	103f861e 	bne	r2,zero,3e50 <_dtoa_r+0xd48>
    4038:	d8800b17 	ldw	r2,44(sp)
    403c:	0081cb0e 	bge	zero,r2,476c <_dtoa_r+0x1664>
    4040:	d8c00617 	ldw	r3,24(sp)
    4044:	d8800315 	stw	r2,12(sp)
    4048:	d8c00215 	stw	r3,8(sp)
    404c:	003ed606 	br	3ba8 <_dtoa_r+0xaa0>
    4050:	00800074 	movhi	r2,1
    4054:	1007883a 	mov	r3,r2
    4058:	18c33804 	addi	r3,r3,3296
    405c:	00800074 	movhi	r2,1
    4060:	d8c00115 	stw	r3,4(sp)
    4064:	108338c4 	addi	r2,r2,3299
    4068:	003de506 	br	3800 <_dtoa_r+0x6f8>
    406c:	00800044 	movi	r2,1
    4070:	d8800515 	stw	r2,20(sp)
    4074:	003f3206 	br	3d40 <_dtoa_r+0xc38>
    4078:	983ea91e 	bne	r19,zero,3b20 <_dtoa_r+0xa18>
    407c:	00800434 	movhi	r2,16
    4080:	10bfffc4 	addi	r2,r2,-1
    4084:	8884703a 	and	r2,r17,r2
    4088:	103ea51e 	bne	r2,zero,3b20 <_dtoa_r+0xa18>
    408c:	8c5ffc2c 	andhi	r17,r17,32752
    4090:	883ea326 	beq	r17,zero,3b20 <_dtoa_r+0xa18>
    4094:	d8800417 	ldw	r2,16(sp)
    4098:	b5800044 	addi	r22,r22,1
    409c:	04400044 	movi	r17,1
    40a0:	10800044 	addi	r2,r2,1
    40a4:	d8800415 	stw	r2,16(sp)
    40a8:	003e9e06 	br	3b24 <_dtoa_r+0xa1c>
    40ac:	00800044 	movi	r2,1
    40b0:	d8800315 	stw	r2,12(sp)
    40b4:	d8801d15 	stw	r2,116(sp)
    40b8:	003f1906 	br	3d20 <_dtoa_r+0xc18>
    40bc:	d8800b17 	ldw	r2,44(sp)
    40c0:	dd400615 	stw	r21,24(sp)
    40c4:	d8800315 	stw	r2,12(sp)
    40c8:	d8800317 	ldw	r2,12(sp)
    40cc:	103e011e 	bne	r2,zero,38d4 <_dtoa_r+0x7cc>
    40d0:	a00b883a 	mov	r5,r20
    40d4:	e009883a 	mov	r4,fp
    40d8:	000f883a 	mov	r7,zero
    40dc:	01800144 	movi	r6,5
    40e0:	00067f00 	call	67f0 <__multadd>
    40e4:	100b883a 	mov	r5,r2
    40e8:	b809883a 	mov	r4,r23
    40ec:	1029883a 	mov	r20,r2
    40f0:	00071dc0 	call	71dc <__mcmp>
    40f4:	00bdf70e 	bge	zero,r2,38d4 <_dtoa_r+0x7cc>
    40f8:	d8c00117 	ldw	r3,4(sp)
    40fc:	00800c44 	movi	r2,49
    4100:	18800005 	stb	r2,0(r3)
    4104:	d8800617 	ldw	r2,24(sp)
    4108:	1a000044 	addi	r8,r3,1
    410c:	14c00044 	addi	r19,r2,1
    4110:	a00b883a 	mov	r5,r20
    4114:	e009883a 	mov	r4,fp
    4118:	da000315 	stw	r8,12(sp)
    411c:	00067cc0 	call	67cc <_Bfree>
    4120:	98800044 	addi	r2,r19,1
    4124:	d8800215 	stw	r2,8(sp)
    4128:	da000317 	ldw	r8,12(sp)
    412c:	803eda1e 	bne	r16,zero,3c98 <_dtoa_r+0xb90>
    4130:	003ede06 	br	3cac <_dtoa_r+0xba4>
    4134:	b005883a 	mov	r2,r22
    4138:	003e5506 	br	3a90 <_dtoa_r+0x988>
    413c:	800b883a 	mov	r5,r16
    4140:	900d883a 	mov	r6,r18
    4144:	e009883a 	mov	r4,fp
    4148:	00070540 	call	7054 <__lshift>
    414c:	1021883a 	mov	r16,r2
    4150:	003f4a06 	br	3e7c <_dtoa_r+0xd74>
    4154:	1529c83a 	sub	r20,r2,r20
    4158:	003e3e06 	br	3a54 <_dtoa_r+0x94c>
    415c:	dcc00a15 	stw	r19,40(sp)
    4160:	dc400c15 	stw	r17,48(sp)
    4164:	04000084 	movi	r16,2
    4168:	003ccf06 	br	34a8 <_dtoa_r+0x3a0>
    416c:	00800044 	movi	r2,1
    4170:	003ea106 	br	3bf8 <_dtoa_r+0xaf0>
    4174:	00800044 	movi	r2,1
    4178:	d8800515 	stw	r2,20(sp)
    417c:	003c9506 	br	33d4 <_dtoa_r+0x2cc>
    4180:	1000021e 	bne	r2,zero,418c <_dtoa_r+0x1084>
    4184:	98c0004c 	andi	r3,r19,1
    4188:	183ea91e 	bne	r3,zero,3c30 <_dtoa_r+0xb28>
    418c:	40bfffc7 	ldb	r2,-1(r8)
    4190:	4007883a 	mov	r3,r8
    4194:	423fffc4 	addi	r8,r8,-1
    4198:	10800c20 	cmpeqi	r2,r2,48
    419c:	103ffb1e 	bne	r2,zero,418c <_dtoa_r+0x1084>
    41a0:	1811883a 	mov	r8,r3
    41a4:	003eb006 	br	3c68 <_dtoa_r+0xb60>
    41a8:	d8c00117 	ldw	r3,4(sp)
    41ac:	00800c44 	movi	r2,49
    41b0:	18800005 	stb	r2,0(r3)
    41b4:	d8800217 	ldw	r2,8(sp)
    41b8:	10800044 	addi	r2,r2,1
    41bc:	d8800215 	stw	r2,8(sp)
    41c0:	003ea906 	br	3c68 <_dtoa_r+0xb60>
    41c4:	d8c00917 	ldw	r3,36(sp)
    41c8:	18010e26 	beq	r3,zero,4604 <_dtoa_r+0x14fc>
    41cc:	d8c00417 	ldw	r3,16(sp)
    41d0:	10810cc4 	addi	r2,r2,1075
    41d4:	b0ad883a 	add	r22,r22,r2
    41d8:	1885883a 	add	r2,r3,r2
    41dc:	dd000717 	ldw	r20,28(sp)
    41e0:	1825883a 	mov	r18,r3
    41e4:	d8800415 	stw	r2,16(sp)
    41e8:	003e2106 	br	3a70 <_dtoa_r+0x968>
    41ec:	8009883a 	mov	r4,r16
    41f0:	000d9d80 	call	d9d8 <__floatsidf>
    41f4:	d9800a17 	ldw	r6,40(sp)
    41f8:	900f883a 	mov	r7,r18
    41fc:	1009883a 	mov	r4,r2
    4200:	180b883a 	mov	r5,r3
    4204:	000c84c0 	call	c84c <__muldf3>
    4208:	000d883a 	mov	r6,zero
    420c:	01d00734 	movhi	r7,16412
    4210:	1009883a 	mov	r4,r2
    4214:	180b883a 	mov	r5,r3
    4218:	000b3f80 	call	b3f8 <__adddf3>
    421c:	1029883a 	mov	r20,r2
    4220:	00bf3034 	movhi	r2,64704
    4224:	1885883a 	add	r2,r3,r2
    4228:	d8800c15 	stw	r2,48(sp)
    422c:	d9000a17 	ldw	r4,40(sp)
    4230:	900b883a 	mov	r5,r18
    4234:	000d883a 	mov	r6,zero
    4238:	01d00534 	movhi	r7,16404
    423c:	000cff80 	call	cff8 <__subdf3>
    4240:	d9c00c17 	ldw	r7,48(sp)
    4244:	a00d883a 	mov	r6,r20
    4248:	1009883a 	mov	r4,r2
    424c:	180b883a 	mov	r5,r3
    4250:	1025883a 	mov	r18,r2
    4254:	1821883a 	mov	r16,r3
    4258:	000c67c0 	call	c67c <__gedf2>
    425c:	00812b16 	blt	zero,r2,470c <_dtoa_r+0x1604>
    4260:	d8800c17 	ldw	r2,48(sp)
    4264:	a00d883a 	mov	r6,r20
    4268:	9009883a 	mov	r4,r18
    426c:	11e0003c 	xorhi	r7,r2,32768
    4270:	800b883a 	mov	r5,r16
    4274:	000c7640 	call	c764 <__ledf2>
    4278:	103d780e 	bge	r2,zero,385c <_dtoa_r+0x754>
    427c:	0029883a 	mov	r20,zero
    4280:	0021883a 	mov	r16,zero
    4284:	003d9306 	br	38d4 <_dtoa_r+0x7cc>
    4288:	d9800717 	ldw	r6,28(sp)
    428c:	b80b883a 	mov	r5,r23
    4290:	e009883a 	mov	r4,fp
    4294:	0006f0c0 	call	6f0c <__pow5mult>
    4298:	102f883a 	mov	r23,r2
    429c:	003e1806 	br	3b00 <_dtoa_r+0x9f8>
    42a0:	d8800617 	ldw	r2,24(sp)
    42a4:	1000e326 	beq	r2,zero,4634 <_dtoa_r+0x152c>
    42a8:	00a9c83a 	sub	r20,zero,r2
    42ac:	a08003cc 	andi	r2,r20,15
    42b0:	100690fa 	slli	r3,r2,3
    42b4:	00800074 	movhi	r2,1
    42b8:	10837804 	addi	r2,r2,3552
    42bc:	10c5883a 	add	r2,r2,r3
    42c0:	11800017 	ldw	r6,0(r2)
    42c4:	11c00117 	ldw	r7,4(r2)
    42c8:	9809883a 	mov	r4,r19
    42cc:	880b883a 	mov	r5,r17
    42d0:	a029d13a 	srai	r20,r20,4
    42d4:	000c84c0 	call	c84c <__muldf3>
    42d8:	d8800a15 	stw	r2,40(sp)
    42dc:	1825883a 	mov	r18,r3
    42e0:	a0013126 	beq	r20,zero,47a8 <_dtoa_r+0x16a0>
    42e4:	02000074 	movhi	r8,1
    42e8:	04000084 	movi	r16,2
    42ec:	42036e04 	addi	r8,r8,3512
    42f0:	180b883a 	mov	r5,r3
    42f4:	dc400c15 	stw	r17,48(sp)
    42f8:	1009883a 	mov	r4,r2
    42fc:	8023883a 	mov	r17,r16
    4300:	0007883a 	mov	r3,zero
    4304:	4021883a 	mov	r16,r8
    4308:	a180004c 	andi	r6,r20,1
    430c:	30000726 	beq	r6,zero,432c <_dtoa_r+0x1224>
    4310:	81800017 	ldw	r6,0(r16)
    4314:	81c00117 	ldw	r7,4(r16)
    4318:	8c400044 	addi	r17,r17,1
    431c:	000c84c0 	call	c84c <__muldf3>
    4320:	180b883a 	mov	r5,r3
    4324:	1009883a 	mov	r4,r2
    4328:	00c00044 	movi	r3,1
    432c:	a029d07a 	srai	r20,r20,1
    4330:	84000204 	addi	r16,r16,8
    4334:	a03ff41e 	bne	r20,zero,4308 <_dtoa_r+0x1200>
    4338:	18c03fcc 	andi	r3,r3,255
    433c:	8821883a 	mov	r16,r17
    4340:	dc400c17 	ldw	r17,48(sp)
    4344:	183c7126 	beq	r3,zero,350c <_dtoa_r+0x404>
    4348:	d9000a15 	stw	r4,40(sp)
    434c:	2825883a 	mov	r18,r5
    4350:	003c6e06 	br	350c <_dtoa_r+0x404>
    4354:	983eb41e 	bne	r19,zero,3e28 <_dtoa_r+0xd20>
    4358:	00800434 	movhi	r2,16
    435c:	10bfffc4 	addi	r2,r2,-1
    4360:	8884703a 	and	r2,r17,r2
    4364:	103f4926 	beq	r2,zero,408c <_dtoa_r+0xf84>
    4368:	003eaf06 	br	3e28 <_dtoa_r+0xd20>
    436c:	00800e0e 	bge	zero,r2,43a8 <_dtoa_r+0x12a0>
    4370:	b80b883a 	mov	r5,r23
    4374:	01800044 	movi	r6,1
    4378:	e009883a 	mov	r4,fp
    437c:	da000215 	stw	r8,8(sp)
    4380:	00070540 	call	7054 <__lshift>
    4384:	a00b883a 	mov	r5,r20
    4388:	1009883a 	mov	r4,r2
    438c:	102f883a 	mov	r23,r2
    4390:	00071dc0 	call	71dc <__mcmp>
    4394:	da000217 	ldw	r8,8(sp)
    4398:	0080e30e 	bge	zero,r2,4728 <_dtoa_r+0x1620>
    439c:	98c00e60 	cmpeqi	r3,r19,57
    43a0:	1800cf1e 	bne	r3,zero,46e0 <_dtoa_r+0x15d8>
    43a4:	acc00c44 	addi	r19,r21,49
    43a8:	8023883a 	mov	r17,r16
    43ac:	d8800617 	ldw	r2,24(sp)
    43b0:	b4c00005 	stb	r19,0(r22)
    43b4:	9021883a 	mov	r16,r18
    43b8:	10800044 	addi	r2,r2,1
    43bc:	d8800215 	stw	r2,8(sp)
    43c0:	003e2906 	br	3c68 <_dtoa_r+0xb60>
    43c4:	b82b883a 	mov	r21,r23
    43c8:	ddc00217 	ldw	r23,8(sp)
    43cc:	200d883a 	mov	r6,r4
    43d0:	280f883a 	mov	r7,r5
    43d4:	000b3f80 	call	b3f8 <__adddf3>
    43d8:	102d883a 	mov	r22,r2
    43dc:	1009883a 	mov	r4,r2
    43e0:	d8800617 	ldw	r2,24(sp)
    43e4:	800d883a 	mov	r6,r16
    43e8:	900f883a 	mov	r7,r18
    43ec:	10800044 	addi	r2,r2,1
    43f0:	180b883a 	mov	r5,r3
    43f4:	1823883a 	mov	r17,r3
    43f8:	1027883a 	mov	r19,r2
    43fc:	d8800215 	stw	r2,8(sp)
    4400:	000c67c0 	call	c67c <__gedf2>
    4404:	00808916 	blt	zero,r2,462c <_dtoa_r+0x1524>
    4408:	800d883a 	mov	r6,r16
    440c:	900f883a 	mov	r7,r18
    4410:	b009883a 	mov	r4,r22
    4414:	880b883a 	mov	r5,r17
    4418:	000c5fc0 	call	c5fc <__eqdf2>
    441c:	1000021e 	bne	r2,zero,4428 <_dtoa_r+0x1320>
    4420:	ad40004c 	andi	r21,r21,1
    4424:	a800811e 	bne	r21,zero,462c <_dtoa_r+0x1524>
    4428:	a011883a 	mov	r8,r20
    442c:	003e1f06 	br	3cac <_dtoa_r+0xba4>
    4430:	81400117 	ldw	r5,4(r16)
    4434:	e009883a 	mov	r4,fp
    4438:	00067280 	call	6728 <_Balloc>
    443c:	1023883a 	mov	r17,r2
    4440:	1000f326 	beq	r2,zero,4810 <_dtoa_r+0x1708>
    4444:	81800417 	ldw	r6,16(r16)
    4448:	81400304 	addi	r5,r16,12
    444c:	11000304 	addi	r4,r2,12
    4450:	31800084 	addi	r6,r6,2
    4454:	300c90ba 	slli	r6,r6,2
    4458:	000640c0 	call	640c <memcpy>
    445c:	01800044 	movi	r6,1
    4460:	880b883a 	mov	r5,r17
    4464:	e009883a 	mov	r4,fp
    4468:	00070540 	call	7054 <__lshift>
    446c:	1025883a 	mov	r18,r2
    4470:	003e8406 	br	3e84 <_dtoa_r+0xd7c>
    4474:	b80b883a 	mov	r5,r23
    4478:	e009883a 	mov	r4,fp
    447c:	0006f0c0 	call	6f0c <__pow5mult>
    4480:	102f883a 	mov	r23,r2
    4484:	003d9e06 	br	3b00 <_dtoa_r+0x9f8>
    4488:	d8800417 	ldw	r2,16(sp)
    448c:	d8c00317 	ldw	r3,12(sp)
    4490:	10e5c83a 	sub	r18,r2,r3
    4494:	003d7606 	br	3a70 <_dtoa_r+0x968>
    4498:	98800e58 	cmpnei	r2,r19,57
    449c:	10009026 	beq	r2,zero,46e0 <_dtoa_r+0x15d8>
    44a0:	d8800617 	ldw	r2,24(sp)
    44a4:	98c00044 	addi	r3,r19,1
    44a8:	8023883a 	mov	r17,r16
    44ac:	10800044 	addi	r2,r2,1
    44b0:	d8800215 	stw	r2,8(sp)
    44b4:	b0c00005 	stb	r3,0(r22)
    44b8:	9021883a 	mov	r16,r18
    44bc:	003dea06 	br	3c68 <_dtoa_r+0xb60>
    44c0:	d8800617 	ldw	r2,24(sp)
    44c4:	8023883a 	mov	r17,r16
    44c8:	9021883a 	mov	r16,r18
    44cc:	10800044 	addi	r2,r2,1
    44d0:	d8800215 	stw	r2,8(sp)
    44d4:	003dcb06 	br	3c04 <_dtoa_r+0xafc>
    44d8:	d9400c17 	ldw	r5,48(sp)
    44dc:	a009883a 	mov	r4,r20
    44e0:	000c84c0 	call	c84c <__muldf3>
    44e4:	d9400117 	ldw	r5,4(sp)
    44e8:	d9000f17 	ldw	r4,60(sp)
    44ec:	d9800d17 	ldw	r6,52(sp)
    44f0:	d8800a15 	stw	r2,40(sp)
    44f4:	29000005 	stb	r4,0(r5)
    44f8:	d8c00c15 	stw	r3,48(sp)
    44fc:	31000058 	cmpnei	r4,r6,1
    4500:	da000e17 	ldw	r8,56(sp)
    4504:	29a9883a 	add	r20,r5,r6
    4508:	20009d26 	beq	r4,zero,4780 <_dtoa_r+0x1678>
    450c:	dc400d15 	stw	r17,52(sp)
    4510:	8009883a 	mov	r4,r16
    4514:	900b883a 	mov	r5,r18
    4518:	4023883a 	mov	r17,r8
    451c:	dcc00e15 	stw	r19,56(sp)
    4520:	000d883a 	mov	r6,zero
    4524:	01d00934 	movhi	r7,16420
    4528:	000c84c0 	call	c84c <__muldf3>
    452c:	180b883a 	mov	r5,r3
    4530:	1009883a 	mov	r4,r2
    4534:	1825883a 	mov	r18,r3
    4538:	1027883a 	mov	r19,r2
    453c:	000d9580 	call	d958 <__fixdfsi>
    4540:	1009883a 	mov	r4,r2
    4544:	1021883a 	mov	r16,r2
    4548:	000d9d80 	call	d9d8 <__floatsidf>
    454c:	9809883a 	mov	r4,r19
    4550:	900b883a 	mov	r5,r18
    4554:	100d883a 	mov	r6,r2
    4558:	180f883a 	mov	r7,r3
    455c:	8c400044 	addi	r17,r17,1
    4560:	84000c04 	addi	r16,r16,48
    4564:	000cff80 	call	cff8 <__subdf3>
    4568:	8c3fffc5 	stb	r16,-1(r17)
    456c:	1009883a 	mov	r4,r2
    4570:	180b883a 	mov	r5,r3
    4574:	a47fea1e 	bne	r20,r17,4520 <_dtoa_r+0x1418>
    4578:	dc400d17 	ldw	r17,52(sp)
    457c:	dcc00e17 	ldw	r19,56(sp)
    4580:	1021883a 	mov	r16,r2
    4584:	1825883a 	mov	r18,r3
    4588:	d9000a17 	ldw	r4,40(sp)
    458c:	d9400c17 	ldw	r5,48(sp)
    4590:	000d883a 	mov	r6,zero
    4594:	01cff834 	movhi	r7,16352
    4598:	000b3f80 	call	b3f8 <__adddf3>
    459c:	800d883a 	mov	r6,r16
    45a0:	900f883a 	mov	r7,r18
    45a4:	1009883a 	mov	r4,r2
    45a8:	180b883a 	mov	r5,r3
    45ac:	000c7640 	call	c764 <__ledf2>
    45b0:	10005916 	blt	r2,zero,4718 <_dtoa_r+0x1610>
    45b4:	d9800a17 	ldw	r6,40(sp)
    45b8:	d9c00c17 	ldw	r7,48(sp)
    45bc:	0009883a 	mov	r4,zero
    45c0:	014ff834 	movhi	r5,16352
    45c4:	000cff80 	call	cff8 <__subdf3>
    45c8:	800d883a 	mov	r6,r16
    45cc:	900f883a 	mov	r7,r18
    45d0:	1009883a 	mov	r4,r2
    45d4:	180b883a 	mov	r5,r3
    45d8:	000c67c0 	call	c67c <__gedf2>
    45dc:	00bc9f0e 	bge	zero,r2,385c <_dtoa_r+0x754>
    45e0:	a0bfffc7 	ldb	r2,-1(r20)
    45e4:	a011883a 	mov	r8,r20
    45e8:	a53fffc4 	addi	r20,r20,-1
    45ec:	10800c20 	cmpeqi	r2,r2,48
    45f0:	103ffb1e 	bne	r2,zero,45e0 <_dtoa_r+0x14d8>
    45f4:	d8801017 	ldw	r2,64(sp)
    45f8:	10800044 	addi	r2,r2,1
    45fc:	d8800215 	stw	r2,8(sp)
    4600:	003daa06 	br	3cac <_dtoa_r+0xba4>
    4604:	d8c01117 	ldw	r3,68(sp)
    4608:	d9000417 	ldw	r4,16(sp)
    460c:	00800d84 	movi	r2,54
    4610:	10c5c83a 	sub	r2,r2,r3
    4614:	b0ad883a 	add	r22,r22,r2
    4618:	2085883a 	add	r2,r4,r2
    461c:	dd000717 	ldw	r20,28(sp)
    4620:	2025883a 	mov	r18,r4
    4624:	d8800415 	stw	r2,16(sp)
    4628:	003d1106 	br	3a70 <_dtoa_r+0x968>
    462c:	d9000117 	ldw	r4,4(sp)
    4630:	003c4e06 	br	376c <_dtoa_r+0x664>
    4634:	dcc00a15 	stw	r19,40(sp)
    4638:	8825883a 	mov	r18,r17
    463c:	04000084 	movi	r16,2
    4640:	003bb206 	br	350c <_dtoa_r+0x404>
    4644:	d8800317 	ldw	r2,12(sp)
    4648:	103ee826 	beq	r2,zero,41ec <_dtoa_r+0x10e4>
    464c:	d8800b17 	ldw	r2,44(sp)
    4650:	00bc820e 	bge	zero,r2,385c <_dtoa_r+0x754>
    4654:	900b883a 	mov	r5,r18
    4658:	a009883a 	mov	r4,r20
    465c:	000d883a 	mov	r6,zero
    4660:	01d00934 	movhi	r7,16420
    4664:	000c84c0 	call	c84c <__muldf3>
    4668:	81000044 	addi	r4,r16,1
    466c:	1029883a 	mov	r20,r2
    4670:	1825883a 	mov	r18,r3
    4674:	d8800a15 	stw	r2,40(sp)
    4678:	000d9d80 	call	d9d8 <__floatsidf>
    467c:	a00d883a 	mov	r6,r20
    4680:	900f883a 	mov	r7,r18
    4684:	1009883a 	mov	r4,r2
    4688:	180b883a 	mov	r5,r3
    468c:	000c84c0 	call	c84c <__muldf3>
    4690:	1009883a 	mov	r4,r2
    4694:	000d883a 	mov	r6,zero
    4698:	01d00734 	movhi	r7,16412
    469c:	180b883a 	mov	r5,r3
    46a0:	000b3f80 	call	b3f8 <__adddf3>
    46a4:	d9000617 	ldw	r4,24(sp)
    46a8:	1029883a 	mov	r20,r2
    46ac:	00bf3034 	movhi	r2,64704
    46b0:	1887883a 	add	r3,r3,r2
    46b4:	d8800b17 	ldw	r2,44(sp)
    46b8:	213fffc4 	addi	r4,r4,-1
    46bc:	d9001015 	stw	r4,64(sp)
    46c0:	d8c00c15 	stw	r3,48(sp)
    46c4:	d8800d15 	stw	r2,52(sp)
    46c8:	003baf06 	br	3588 <_dtoa_r+0x480>
    46cc:	00c00c44 	movi	r3,49
    46d0:	9cc00044 	addi	r19,r19,1
    46d4:	003c2e06 	br	3790 <_dtoa_r+0x688>
    46d8:	b0800044 	addi	r2,r22,1
    46dc:	d8800315 	stw	r2,12(sp)
    46e0:	00800e44 	movi	r2,57
    46e4:	b0800005 	stb	r2,0(r22)
    46e8:	d8800617 	ldw	r2,24(sp)
    46ec:	8023883a 	mov	r17,r16
    46f0:	da000317 	ldw	r8,12(sp)
    46f4:	10800044 	addi	r2,r2,1
    46f8:	d9400117 	ldw	r5,4(sp)
    46fc:	d8800215 	stw	r2,8(sp)
    4700:	9021883a 	mov	r16,r18
    4704:	01000e44 	movi	r4,57
    4708:	003d4f06 	br	3c48 <_dtoa_r+0xb40>
    470c:	0029883a 	mov	r20,zero
    4710:	0021883a 	mov	r16,zero
    4714:	003e7806 	br	40f8 <_dtoa_r+0xff0>
    4718:	d8801017 	ldw	r2,64(sp)
    471c:	d9000117 	ldw	r4,4(sp)
    4720:	14c00044 	addi	r19,r2,1
    4724:	003c1106 	br	376c <_dtoa_r+0x664>
    4728:	103f1f1e 	bne	r2,zero,43a8 <_dtoa_r+0x12a0>
    472c:	9880004c 	andi	r2,r19,1
    4730:	103f1a1e 	bne	r2,zero,439c <_dtoa_r+0x1294>
    4734:	003f1c06 	br	43a8 <_dtoa_r+0x12a0>
    4738:	d8801017 	ldw	r2,64(sp)
    473c:	ddc00c17 	ldw	r23,48(sp)
    4740:	a811883a 	mov	r8,r21
    4744:	10800044 	addi	r2,r2,1
    4748:	d8800215 	stw	r2,8(sp)
    474c:	003d5706 	br	3cac <_dtoa_r+0xba4>
    4750:	98800e60 	cmpeqi	r2,r19,57
    4754:	103fe01e 	bne	r2,zero,46d8 <_dtoa_r+0x15d0>
    4758:	0440010e 	bge	zero,r17,4760 <_dtoa_r+0x1658>
    475c:	acc00c44 	addi	r19,r21,49
    4760:	8023883a 	mov	r17,r16
    4764:	b2000044 	addi	r8,r22,1
    4768:	003f1006 	br	43ac <_dtoa_r+0x12a4>
    476c:	d8800217 	ldw	r2,8(sp)
    4770:	108000c8 	cmpgei	r2,r2,3
    4774:	103e511e 	bne	r2,zero,40bc <_dtoa_r+0xfb4>
    4778:	dd400615 	stw	r21,24(sp)
    477c:	003e1406 	br	3fd0 <_dtoa_r+0xec8>
    4780:	4029883a 	mov	r20,r8
    4784:	003f8006 	br	4588 <_dtoa_r+0x1480>
    4788:	d8800217 	ldw	r2,8(sp)
    478c:	108000c8 	cmpgei	r2,r2,3
    4790:	103e4a1e 	bne	r2,zero,40bc <_dtoa_r+0xfb4>
    4794:	d8800b17 	ldw	r2,44(sp)
    4798:	dd400615 	stw	r21,24(sp)
    479c:	d8800315 	stw	r2,12(sp)
    47a0:	04bdb60e 	bge	zero,r18,3e7c <_dtoa_r+0xd74>
    47a4:	003e6506 	br	413c <_dtoa_r+0x1034>
    47a8:	04000084 	movi	r16,2
    47ac:	003b5706 	br	350c <_dtoa_r+0x404>
    47b0:	01c00074 	movhi	r7,1
    47b4:	01000074 	movhi	r4,1
    47b8:	39c33c04 	addi	r7,r7,3312
    47bc:	000d883a 	mov	r6,zero
    47c0:	01406a84 	movi	r5,426
    47c4:	21034104 	addi	r4,r4,3332
    47c8:	00094f00 	call	94f0 <__assert_func>
    47cc:	000b883a 	mov	r5,zero
    47d0:	003b1006 	br	3414 <_dtoa_r+0x30c>
    47d4:	e0001115 	stw	zero,68(fp)
    47d8:	000b883a 	mov	r5,zero
    47dc:	e009883a 	mov	r4,fp
    47e0:	00067280 	call	6728 <_Balloc>
    47e4:	d8800115 	stw	r2,4(sp)
    47e8:	103ff126 	beq	r2,zero,47b0 <_dtoa_r+0x16a8>
    47ec:	d8800117 	ldw	r2,4(sp)
    47f0:	d8001d15 	stw	zero,116(sp)
    47f4:	e0801015 	stw	r2,64(fp)
    47f8:	00bfffc4 	movi	r2,-1
    47fc:	d8800315 	stw	r2,12(sp)
    4800:	d8800b15 	stw	r2,44(sp)
    4804:	00800044 	movi	r2,1
    4808:	d8800515 	stw	r2,20(sp)
    480c:	003c1306 	br	385c <_dtoa_r+0x754>
    4810:	01c00074 	movhi	r7,1
    4814:	01000074 	movhi	r4,1
    4818:	39c33c04 	addi	r7,r7,3312
    481c:	000d883a 	mov	r6,zero
    4820:	0140ba84 	movi	r5,746
    4824:	21034104 	addi	r4,r4,3332
    4828:	00094f00 	call	94f0 <__assert_func>
    482c:	00800074 	movhi	r2,1
    4830:	10833904 	addi	r2,r2,3300
    4834:	d8800115 	stw	r2,4(sp)
    4838:	003a6506 	br	31d0 <_dtoa_r+0xc8>
    483c:	18c00120 	cmpeqi	r3,r3,4
    4840:	183cc81e 	bne	r3,zero,3b64 <_dtoa_r+0xa5c>
    4844:	00c00f04 	movi	r3,60
    4848:	1885c83a 	sub	r2,r3,r2
    484c:	003cc006 	br	3b50 <_dtoa_r+0xa48>

00004850 <__sflush_r>:
    4850:	2880030b 	ldhu	r2,12(r5)
    4854:	defffb04 	addi	sp,sp,-20
    4858:	dcc00315 	stw	r19,12(sp)
    485c:	dc000015 	stw	r16,0(sp)
    4860:	dfc00415 	stw	ra,16(sp)
    4864:	dc800215 	stw	r18,8(sp)
    4868:	dc400115 	stw	r17,4(sp)
    486c:	10c0020c 	andi	r3,r2,8
    4870:	2821883a 	mov	r16,r5
    4874:	2027883a 	mov	r19,r4
    4878:	18003f1e 	bne	r3,zero,4978 <__sflush_r+0x128>
    487c:	28c00117 	ldw	r3,4(r5)
    4880:	10820014 	ori	r2,r2,2048
    4884:	2880030d 	sth	r2,12(r5)
    4888:	00c0550e 	bge	zero,r3,49e0 <__sflush_r+0x190>
    488c:	82000a17 	ldw	r8,40(r16)
    4890:	40003126 	beq	r8,zero,4958 <__sflush_r+0x108>
    4894:	9c400017 	ldw	r17,0(r19)
    4898:	1104000c 	andi	r4,r2,4096
    489c:	98000015 	stw	zero,0(r19)
    48a0:	1007883a 	mov	r3,r2
    48a4:	2000531e 	bne	r4,zero,49f4 <__sflush_r+0x1a4>
    48a8:	81400717 	ldw	r5,28(r16)
    48ac:	01c00044 	movi	r7,1
    48b0:	000d883a 	mov	r6,zero
    48b4:	9809883a 	mov	r4,r19
    48b8:	403ee83a 	callr	r8
    48bc:	10ffffd8 	cmpnei	r3,r2,-1
    48c0:	18005826 	beq	r3,zero,4a24 <__sflush_r+0x1d4>
    48c4:	80c0030b 	ldhu	r3,12(r16)
    48c8:	82000a17 	ldw	r8,40(r16)
    48cc:	18c0010c 	andi	r3,r3,4
    48d0:	18000626 	beq	r3,zero,48ec <__sflush_r+0x9c>
    48d4:	81000117 	ldw	r4,4(r16)
    48d8:	80c00c17 	ldw	r3,48(r16)
    48dc:	1105c83a 	sub	r2,r2,r4
    48e0:	18000226 	beq	r3,zero,48ec <__sflush_r+0x9c>
    48e4:	80c00f17 	ldw	r3,60(r16)
    48e8:	10c5c83a 	sub	r2,r2,r3
    48ec:	81400717 	ldw	r5,28(r16)
    48f0:	100d883a 	mov	r6,r2
    48f4:	000f883a 	mov	r7,zero
    48f8:	9809883a 	mov	r4,r19
    48fc:	403ee83a 	callr	r8
    4900:	10ffffd8 	cmpnei	r3,r2,-1
    4904:	18003d1e 	bne	r3,zero,49fc <__sflush_r+0x1ac>
    4908:	99000017 	ldw	r4,0(r19)
    490c:	80c0030b 	ldhu	r3,12(r16)
    4910:	20004e26 	beq	r4,zero,4a4c <__sflush_r+0x1fc>
    4914:	21400760 	cmpeqi	r5,r4,29
    4918:	2800021e 	bne	r5,zero,4924 <__sflush_r+0xd4>
    491c:	210005a0 	cmpeqi	r4,r4,22
    4920:	20002c26 	beq	r4,zero,49d4 <__sflush_r+0x184>
    4924:	80800417 	ldw	r2,16(r16)
    4928:	18fdffcc 	andi	r3,r3,63487
    492c:	80c0030d 	sth	r3,12(r16)
    4930:	80000115 	stw	zero,4(r16)
    4934:	80800015 	stw	r2,0(r16)
    4938:	81400c17 	ldw	r5,48(r16)
    493c:	9c400015 	stw	r17,0(r19)
    4940:	28000526 	beq	r5,zero,4958 <__sflush_r+0x108>
    4944:	80801004 	addi	r2,r16,64
    4948:	28800226 	beq	r5,r2,4954 <__sflush_r+0x104>
    494c:	9809883a 	mov	r4,r19
    4950:	00050240 	call	5024 <_free_r>
    4954:	80000c15 	stw	zero,48(r16)
    4958:	0005883a 	mov	r2,zero
    495c:	dfc00417 	ldw	ra,16(sp)
    4960:	dcc00317 	ldw	r19,12(sp)
    4964:	dc800217 	ldw	r18,8(sp)
    4968:	dc400117 	ldw	r17,4(sp)
    496c:	dc000017 	ldw	r16,0(sp)
    4970:	dec00504 	addi	sp,sp,20
    4974:	f800283a 	ret
    4978:	2c800417 	ldw	r18,16(r5)
    497c:	903ff626 	beq	r18,zero,4958 <__sflush_r+0x108>
    4980:	2c400017 	ldw	r17,0(r5)
    4984:	108000cc 	andi	r2,r2,3
    4988:	2c800015 	stw	r18,0(r5)
    498c:	8ca3c83a 	sub	r17,r17,r18
    4990:	1000161e 	bne	r2,zero,49ec <__sflush_r+0x19c>
    4994:	28800517 	ldw	r2,20(r5)
    4998:	80800215 	stw	r2,8(r16)
    499c:	04400316 	blt	zero,r17,49ac <__sflush_r+0x15c>
    49a0:	003fed06 	br	4958 <__sflush_r+0x108>
    49a4:	90a5883a 	add	r18,r18,r2
    49a8:	047feb0e 	bge	zero,r17,4958 <__sflush_r+0x108>
    49ac:	80800917 	ldw	r2,36(r16)
    49b0:	81400717 	ldw	r5,28(r16)
    49b4:	880f883a 	mov	r7,r17
    49b8:	900d883a 	mov	r6,r18
    49bc:	9809883a 	mov	r4,r19
    49c0:	103ee83a 	callr	r2
    49c4:	88a3c83a 	sub	r17,r17,r2
    49c8:	00bff616 	blt	zero,r2,49a4 <__sflush_r+0x154>
    49cc:	80c0030b 	ldhu	r3,12(r16)
    49d0:	00bfffc4 	movi	r2,-1
    49d4:	18c01014 	ori	r3,r3,64
    49d8:	80c0030d 	sth	r3,12(r16)
    49dc:	003fdf06 	br	495c <__sflush_r+0x10c>
    49e0:	28c00f17 	ldw	r3,60(r5)
    49e4:	00ffa916 	blt	zero,r3,488c <__sflush_r+0x3c>
    49e8:	003fdb06 	br	4958 <__sflush_r+0x108>
    49ec:	0005883a 	mov	r2,zero
    49f0:	003fe906 	br	4998 <__sflush_r+0x148>
    49f4:	80801417 	ldw	r2,80(r16)
    49f8:	003fb406 	br	48cc <__sflush_r+0x7c>
    49fc:	80c0030b 	ldhu	r3,12(r16)
    4a00:	81000417 	ldw	r4,16(r16)
    4a04:	80000115 	stw	zero,4(r16)
    4a08:	197dffcc 	andi	r5,r3,63487
    4a0c:	8140030d 	sth	r5,12(r16)
    4a10:	81000015 	stw	r4,0(r16)
    4a14:	18c4000c 	andi	r3,r3,4096
    4a18:	183fc726 	beq	r3,zero,4938 <__sflush_r+0xe8>
    4a1c:	80801415 	stw	r2,80(r16)
    4a20:	003fc506 	br	4938 <__sflush_r+0xe8>
    4a24:	98c00017 	ldw	r3,0(r19)
    4a28:	183fa626 	beq	r3,zero,48c4 <__sflush_r+0x74>
    4a2c:	19000760 	cmpeqi	r4,r3,29
    4a30:	20000e1e 	bne	r4,zero,4a6c <__sflush_r+0x21c>
    4a34:	18c00598 	cmpnei	r3,r3,22
    4a38:	18000c26 	beq	r3,zero,4a6c <__sflush_r+0x21c>
    4a3c:	80c0030b 	ldhu	r3,12(r16)
    4a40:	18c01014 	ori	r3,r3,64
    4a44:	80c0030d 	sth	r3,12(r16)
    4a48:	003fc406 	br	495c <__sflush_r+0x10c>
    4a4c:	81000417 	ldw	r4,16(r16)
    4a50:	197dffcc 	andi	r5,r3,63487
    4a54:	8140030d 	sth	r5,12(r16)
    4a58:	80000115 	stw	zero,4(r16)
    4a5c:	81000015 	stw	r4,0(r16)
    4a60:	18c4000c 	andi	r3,r3,4096
    4a64:	183fb426 	beq	r3,zero,4938 <__sflush_r+0xe8>
    4a68:	003fec06 	br	4a1c <__sflush_r+0x1cc>
    4a6c:	9c400015 	stw	r17,0(r19)
    4a70:	0005883a 	mov	r2,zero
    4a74:	003fb906 	br	495c <__sflush_r+0x10c>

00004a78 <_fflush_r>:
    4a78:	defffd04 	addi	sp,sp,-12
    4a7c:	dc000115 	stw	r16,4(sp)
    4a80:	dfc00215 	stw	ra,8(sp)
    4a84:	2021883a 	mov	r16,r4
    4a88:	20000226 	beq	r4,zero,4a94 <_fflush_r+0x1c>
    4a8c:	20800e17 	ldw	r2,56(r4)
    4a90:	10000726 	beq	r2,zero,4ab0 <_fflush_r+0x38>
    4a94:	2880030f 	ldh	r2,12(r5)
    4a98:	10000a1e 	bne	r2,zero,4ac4 <_fflush_r+0x4c>
    4a9c:	0005883a 	mov	r2,zero
    4aa0:	dfc00217 	ldw	ra,8(sp)
    4aa4:	dc000117 	ldw	r16,4(sp)
    4aa8:	dec00304 	addi	sp,sp,12
    4aac:	f800283a 	ret
    4ab0:	d9400015 	stw	r5,0(sp)
    4ab4:	0004ec00 	call	4ec0 <__sinit>
    4ab8:	d9400017 	ldw	r5,0(sp)
    4abc:	2880030f 	ldh	r2,12(r5)
    4ac0:	103ff626 	beq	r2,zero,4a9c <_fflush_r+0x24>
    4ac4:	8009883a 	mov	r4,r16
    4ac8:	dfc00217 	ldw	ra,8(sp)
    4acc:	dc000117 	ldw	r16,4(sp)
    4ad0:	dec00304 	addi	sp,sp,12
    4ad4:	00048501 	jmpi	4850 <__sflush_r>

00004ad8 <fflush>:
    4ad8:	20001726 	beq	r4,zero,4b38 <fflush+0x60>
    4adc:	00800074 	movhi	r2,1
    4ae0:	200b883a 	mov	r5,r4
    4ae4:	110b9e17 	ldw	r4,11896(r2)
    4ae8:	20000226 	beq	r4,zero,4af4 <fflush+0x1c>
    4aec:	20800e17 	ldw	r2,56(r4)
    4af0:	10000526 	beq	r2,zero,4b08 <fflush+0x30>
    4af4:	2880030f 	ldh	r2,12(r5)
    4af8:	1000021e 	bne	r2,zero,4b04 <fflush+0x2c>
    4afc:	0005883a 	mov	r2,zero
    4b00:	f800283a 	ret
    4b04:	00048501 	jmpi	4850 <__sflush_r>
    4b08:	defffd04 	addi	sp,sp,-12
    4b0c:	d9400115 	stw	r5,4(sp)
    4b10:	d9000015 	stw	r4,0(sp)
    4b14:	dfc00215 	stw	ra,8(sp)
    4b18:	0004ec00 	call	4ec0 <__sinit>
    4b1c:	d9400117 	ldw	r5,4(sp)
    4b20:	d9000017 	ldw	r4,0(sp)
    4b24:	2880030f 	ldh	r2,12(r5)
    4b28:	10000826 	beq	r2,zero,4b4c <fflush+0x74>
    4b2c:	dfc00217 	ldw	ra,8(sp)
    4b30:	dec00304 	addi	sp,sp,12
    4b34:	00048501 	jmpi	4850 <__sflush_r>
    4b38:	00800074 	movhi	r2,1
    4b3c:	110b9d17 	ldw	r4,11892(r2)
    4b40:	01400034 	movhi	r5,0
    4b44:	29529e04 	addi	r5,r5,19064
    4b48:	000584c1 	jmpi	584c <_fwalk_reent>
    4b4c:	0005883a 	mov	r2,zero
    4b50:	dfc00217 	ldw	ra,8(sp)
    4b54:	dec00304 	addi	sp,sp,12
    4b58:	f800283a 	ret

00004b5c <__fp_lock>:
    4b5c:	0005883a 	mov	r2,zero
    4b60:	f800283a 	ret

00004b64 <_cleanup_r>:
    4b64:	01400074 	movhi	r5,1
    4b68:	2965e204 	addi	r5,r5,-26744
    4b6c:	000584c1 	jmpi	584c <_fwalk_reent>

00004b70 <__fp_unlock>:
    4b70:	0005883a 	mov	r2,zero
    4b74:	f800283a 	ret

00004b78 <__sinit.part.0>:
    4b78:	00c00034 	movhi	r3,0
    4b7c:	20800117 	ldw	r2,4(r4)
    4b80:	18d2d904 	addi	r3,r3,19300
    4b84:	20c00f15 	stw	r3,60(r4)
    4b88:	2140bb04 	addi	r5,r4,748
    4b8c:	00c000c4 	movi	r3,3
    4b90:	20c0b915 	stw	r3,740(r4)
    4b94:	2140ba15 	stw	r5,744(r4)
    4b98:	2000b815 	stw	zero,736(r4)
    4b9c:	10001705 	stb	zero,92(r2)
    4ba0:	10001745 	stb	zero,93(r2)
    4ba4:	10001785 	stb	zero,94(r2)
    4ba8:	100017c5 	stb	zero,95(r2)
    4bac:	10001805 	stb	zero,96(r2)
    4bb0:	10001845 	stb	zero,97(r2)
    4bb4:	10001885 	stb	zero,98(r2)
    4bb8:	100018c5 	stb	zero,99(r2)
    4bbc:	00c00104 	movi	r3,4
    4bc0:	10c00315 	stw	r3,12(r2)
    4bc4:	02000034 	movhi	r8,0
    4bc8:	20c00217 	ldw	r3,8(r4)
    4bcc:	01c00034 	movhi	r7,0
    4bd0:	01800034 	movhi	r6,0
    4bd4:	01400034 	movhi	r5,0
    4bd8:	421fab04 	addi	r8,r8,32428
    4bdc:	39dfc204 	addi	r7,r7,32520
    4be0:	319fe204 	addi	r6,r6,32648
    4be4:	295ff904 	addi	r5,r5,32740
    4be8:	02400074 	movhi	r9,1
    4bec:	10001915 	stw	zero,100(r2)
    4bf0:	10000015 	stw	zero,0(r2)
    4bf4:	10000115 	stw	zero,4(r2)
    4bf8:	10000215 	stw	zero,8(r2)
    4bfc:	10000415 	stw	zero,16(r2)
    4c00:	10000515 	stw	zero,20(r2)
    4c04:	10000615 	stw	zero,24(r2)
    4c08:	10800715 	stw	r2,28(r2)
    4c0c:	12000815 	stw	r8,32(r2)
    4c10:	11c00915 	stw	r7,36(r2)
    4c14:	11800a15 	stw	r6,40(r2)
    4c18:	11400b15 	stw	r5,44(r2)
    4c1c:	4a400284 	addi	r9,r9,10
    4c20:	1a400315 	stw	r9,12(r3)
    4c24:	18001915 	stw	zero,100(r3)
    4c28:	18000015 	stw	zero,0(r3)
    4c2c:	18000115 	stw	zero,4(r3)
    4c30:	18000215 	stw	zero,8(r3)
    4c34:	18000415 	stw	zero,16(r3)
    4c38:	18001705 	stb	zero,92(r3)
    4c3c:	18001745 	stb	zero,93(r3)
    4c40:	18001785 	stb	zero,94(r3)
    4c44:	180017c5 	stb	zero,95(r3)
    4c48:	18001805 	stb	zero,96(r3)
    4c4c:	18001845 	stb	zero,97(r3)
    4c50:	18001885 	stb	zero,98(r3)
    4c54:	180018c5 	stb	zero,99(r3)
    4c58:	20800317 	ldw	r2,12(r4)
    4c5c:	024000b4 	movhi	r9,2
    4c60:	18000515 	stw	zero,20(r3)
    4c64:	18000615 	stw	zero,24(r3)
    4c68:	18c00715 	stw	r3,28(r3)
    4c6c:	1a000815 	stw	r8,32(r3)
    4c70:	19c00915 	stw	r7,36(r3)
    4c74:	19800a15 	stw	r6,40(r3)
    4c78:	19400b15 	stw	r5,44(r3)
    4c7c:	4a400484 	addi	r9,r9,18
    4c80:	10001915 	stw	zero,100(r2)
    4c84:	10000015 	stw	zero,0(r2)
    4c88:	10000115 	stw	zero,4(r2)
    4c8c:	10000215 	stw	zero,8(r2)
    4c90:	12400315 	stw	r9,12(r2)
    4c94:	10000415 	stw	zero,16(r2)
    4c98:	10000515 	stw	zero,20(r2)
    4c9c:	10000615 	stw	zero,24(r2)
    4ca0:	10001705 	stb	zero,92(r2)
    4ca4:	10001745 	stb	zero,93(r2)
    4ca8:	10001785 	stb	zero,94(r2)
    4cac:	100017c5 	stb	zero,95(r2)
    4cb0:	10001805 	stb	zero,96(r2)
    4cb4:	10001845 	stb	zero,97(r2)
    4cb8:	10001885 	stb	zero,98(r2)
    4cbc:	100018c5 	stb	zero,99(r2)
    4cc0:	10800715 	stw	r2,28(r2)
    4cc4:	12000815 	stw	r8,32(r2)
    4cc8:	11c00915 	stw	r7,36(r2)
    4ccc:	11800a15 	stw	r6,40(r2)
    4cd0:	11400b15 	stw	r5,44(r2)
    4cd4:	00800044 	movi	r2,1
    4cd8:	20800e15 	stw	r2,56(r4)
    4cdc:	f800283a 	ret

00004ce0 <__sfmoreglue>:
    4ce0:	defffc04 	addi	sp,sp,-16
    4ce4:	dc800215 	stw	r18,8(sp)
    4ce8:	2825883a 	mov	r18,r5
    4cec:	dc000015 	stw	r16,0(sp)
    4cf0:	01401a04 	movi	r5,104
    4cf4:	2021883a 	mov	r16,r4
    4cf8:	913fffc4 	addi	r4,r18,-1
    4cfc:	dfc00315 	stw	ra,12(sp)
    4d00:	dc400115 	stw	r17,4(sp)
    4d04:	000b3d00 	call	b3d0 <__mulsi3>
    4d08:	8009883a 	mov	r4,r16
    4d0c:	11401d04 	addi	r5,r2,116
    4d10:	1023883a 	mov	r17,r2
    4d14:	0005b5c0 	call	5b5c <_malloc_r>
    4d18:	1021883a 	mov	r16,r2
    4d1c:	10000726 	beq	r2,zero,4d3c <__sfmoreglue+0x5c>
    4d20:	11000304 	addi	r4,r2,12
    4d24:	10000015 	stw	zero,0(r2)
    4d28:	14800115 	stw	r18,4(r2)
    4d2c:	11000215 	stw	r4,8(r2)
    4d30:	89801a04 	addi	r6,r17,104
    4d34:	000b883a 	mov	r5,zero
    4d38:	00066380 	call	6638 <memset>
    4d3c:	8005883a 	mov	r2,r16
    4d40:	dfc00317 	ldw	ra,12(sp)
    4d44:	dc800217 	ldw	r18,8(sp)
    4d48:	dc400117 	ldw	r17,4(sp)
    4d4c:	dc000017 	ldw	r16,0(sp)
    4d50:	dec00404 	addi	sp,sp,16
    4d54:	f800283a 	ret

00004d58 <__sfp>:
    4d58:	defffb04 	addi	sp,sp,-20
    4d5c:	00800074 	movhi	r2,1
    4d60:	dc000015 	stw	r16,0(sp)
    4d64:	140b9d17 	ldw	r16,11892(r2)
    4d68:	dc400115 	stw	r17,4(sp)
    4d6c:	dfc00415 	stw	ra,16(sp)
    4d70:	80800e17 	ldw	r2,56(r16)
    4d74:	dcc00315 	stw	r19,12(sp)
    4d78:	dc800215 	stw	r18,8(sp)
    4d7c:	2023883a 	mov	r17,r4
    4d80:	10003126 	beq	r2,zero,4e48 <__sfp+0xf0>
    4d84:	8100ba17 	ldw	r4,744(r16)
    4d88:	8140b917 	ldw	r5,740(r16)
    4d8c:	04c00104 	movi	r19,4
    4d90:	8400b804 	addi	r16,r16,736
    4d94:	297fffc4 	addi	r5,r5,-1
    4d98:	2800050e 	bge	r5,zero,4db0 <__sfp+0x58>
    4d9c:	00002406 	br	4e30 <__sfp+0xd8>
    4da0:	297fffc4 	addi	r5,r5,-1
    4da4:	28bfffd8 	cmpnei	r2,r5,-1
    4da8:	21001a04 	addi	r4,r4,104
    4dac:	10002026 	beq	r2,zero,4e30 <__sfp+0xd8>
    4db0:	2080030f 	ldh	r2,12(r4)
    4db4:	103ffa1e 	bne	r2,zero,4da0 <__sfp+0x48>
    4db8:	00bffff4 	movhi	r2,65535
    4dbc:	10800044 	addi	r2,r2,1
    4dc0:	20001915 	stw	zero,100(r4)
    4dc4:	20000015 	stw	zero,0(r4)
    4dc8:	20000115 	stw	zero,4(r4)
    4dcc:	20000215 	stw	zero,8(r4)
    4dd0:	20800315 	stw	r2,12(r4)
    4dd4:	20000415 	stw	zero,16(r4)
    4dd8:	20000515 	stw	zero,20(r4)
    4ddc:	20000615 	stw	zero,24(r4)
    4de0:	20001705 	stb	zero,92(r4)
    4de4:	20001745 	stb	zero,93(r4)
    4de8:	20001785 	stb	zero,94(r4)
    4dec:	200017c5 	stb	zero,95(r4)
    4df0:	20001805 	stb	zero,96(r4)
    4df4:	20001845 	stb	zero,97(r4)
    4df8:	20001885 	stb	zero,98(r4)
    4dfc:	200018c5 	stb	zero,99(r4)
    4e00:	20000c15 	stw	zero,48(r4)
    4e04:	20000d15 	stw	zero,52(r4)
    4e08:	20001115 	stw	zero,68(r4)
    4e0c:	20001215 	stw	zero,72(r4)
    4e10:	2005883a 	mov	r2,r4
    4e14:	dfc00417 	ldw	ra,16(sp)
    4e18:	dcc00317 	ldw	r19,12(sp)
    4e1c:	dc800217 	ldw	r18,8(sp)
    4e20:	dc400117 	ldw	r17,4(sp)
    4e24:	dc000017 	ldw	r16,0(sp)
    4e28:	dec00504 	addi	sp,sp,20
    4e2c:	f800283a 	ret
    4e30:	80800017 	ldw	r2,0(r16)
    4e34:	10000726 	beq	r2,zero,4e54 <__sfp+0xfc>
    4e38:	11000217 	ldw	r4,8(r2)
    4e3c:	11400117 	ldw	r5,4(r2)
    4e40:	1021883a 	mov	r16,r2
    4e44:	003fd306 	br	4d94 <__sfp+0x3c>
    4e48:	8009883a 	mov	r4,r16
    4e4c:	0004b780 	call	4b78 <__sinit.part.0>
    4e50:	003fcc06 	br	4d84 <__sfp+0x2c>
    4e54:	01406b04 	movi	r5,428
    4e58:	8809883a 	mov	r4,r17
    4e5c:	0005b5c0 	call	5b5c <_malloc_r>
    4e60:	1025883a 	mov	r18,r2
    4e64:	10000c26 	beq	r2,zero,4e98 <__sfp+0x140>
    4e68:	11000304 	addi	r4,r2,12
    4e6c:	11000215 	stw	r4,8(r2)
    4e70:	000b883a 	mov	r5,zero
    4e74:	10000015 	stw	zero,0(r2)
    4e78:	14c00115 	stw	r19,4(r2)
    4e7c:	01806804 	movi	r6,416
    4e80:	00066380 	call	6638 <memset>
    4e84:	1009883a 	mov	r4,r2
    4e88:	84800015 	stw	r18,0(r16)
    4e8c:	014000c4 	movi	r5,3
    4e90:	9021883a 	mov	r16,r18
    4e94:	003fc606 	br	4db0 <__sfp+0x58>
    4e98:	80000015 	stw	zero,0(r16)
    4e9c:	00800304 	movi	r2,12
    4ea0:	88800015 	stw	r2,0(r17)
    4ea4:	0009883a 	mov	r4,zero
    4ea8:	003fd906 	br	4e10 <__sfp+0xb8>

00004eac <_cleanup>:
    4eac:	00800074 	movhi	r2,1
    4eb0:	110b9d17 	ldw	r4,11892(r2)
    4eb4:	01400074 	movhi	r5,1
    4eb8:	2965e204 	addi	r5,r5,-26744
    4ebc:	000584c1 	jmpi	584c <_fwalk_reent>

00004ec0 <__sinit>:
    4ec0:	20800e17 	ldw	r2,56(r4)
    4ec4:	10000126 	beq	r2,zero,4ecc <__sinit+0xc>
    4ec8:	f800283a 	ret
    4ecc:	0004b781 	jmpi	4b78 <__sinit.part.0>

00004ed0 <__sfp_lock_acquire>:
    4ed0:	f800283a 	ret

00004ed4 <__sfp_lock_release>:
    4ed4:	f800283a 	ret

00004ed8 <__sinit_lock_acquire>:
    4ed8:	f800283a 	ret

00004edc <__sinit_lock_release>:
    4edc:	f800283a 	ret

00004ee0 <__fp_lock_all>:
    4ee0:	00800074 	movhi	r2,1
    4ee4:	110b9e17 	ldw	r4,11896(r2)
    4ee8:	01400034 	movhi	r5,0
    4eec:	2952d704 	addi	r5,r5,19292
    4ef0:	00057b41 	jmpi	57b4 <_fwalk>

00004ef4 <__fp_unlock_all>:
    4ef4:	00800074 	movhi	r2,1
    4ef8:	110b9e17 	ldw	r4,11896(r2)
    4efc:	01400034 	movhi	r5,0
    4f00:	2952dc04 	addi	r5,r5,19312
    4f04:	00057b41 	jmpi	57b4 <_fwalk>

00004f08 <_malloc_trim_r>:
    4f08:	defffb04 	addi	sp,sp,-20
    4f0c:	dcc00315 	stw	r19,12(sp)
    4f10:	04c00074 	movhi	r19,1
    4f14:	dc800215 	stw	r18,8(sp)
    4f18:	dc400115 	stw	r17,4(sp)
    4f1c:	dc000015 	stw	r16,0(sp)
    4f20:	dfc00415 	stw	ra,16(sp)
    4f24:	2821883a 	mov	r16,r5
    4f28:	9cc59004 	addi	r19,r19,5696
    4f2c:	2025883a 	mov	r18,r4
    4f30:	000e28c0 	call	e28c <__malloc_lock>
    4f34:	98800217 	ldw	r2,8(r19)
    4f38:	14400117 	ldw	r17,4(r2)
    4f3c:	00bfff04 	movi	r2,-4
    4f40:	88a2703a 	and	r17,r17,r2
    4f44:	8c21c83a 	sub	r16,r17,r16
    4f48:	8403fbc4 	addi	r16,r16,4079
    4f4c:	8020d33a 	srli	r16,r16,12
    4f50:	843fffc4 	addi	r16,r16,-1
    4f54:	8020933a 	slli	r16,r16,12
    4f58:	80840008 	cmpgei	r2,r16,4096
    4f5c:	10000626 	beq	r2,zero,4f78 <_malloc_trim_r+0x70>
    4f60:	000b883a 	mov	r5,zero
    4f64:	9009883a 	mov	r4,r18
    4f68:	0007e540 	call	7e54 <_sbrk_r>
    4f6c:	98c00217 	ldw	r3,8(r19)
    4f70:	1c47883a 	add	r3,r3,r17
    4f74:	10c00a26 	beq	r2,r3,4fa0 <_malloc_trim_r+0x98>
    4f78:	9009883a 	mov	r4,r18
    4f7c:	000e2b00 	call	e2b0 <__malloc_unlock>
    4f80:	0005883a 	mov	r2,zero
    4f84:	dfc00417 	ldw	ra,16(sp)
    4f88:	dcc00317 	ldw	r19,12(sp)
    4f8c:	dc800217 	ldw	r18,8(sp)
    4f90:	dc400117 	ldw	r17,4(sp)
    4f94:	dc000017 	ldw	r16,0(sp)
    4f98:	dec00504 	addi	sp,sp,20
    4f9c:	f800283a 	ret
    4fa0:	040bc83a 	sub	r5,zero,r16
    4fa4:	9009883a 	mov	r4,r18
    4fa8:	0007e540 	call	7e54 <_sbrk_r>
    4fac:	10bfffd8 	cmpnei	r2,r2,-1
    4fb0:	10000d26 	beq	r2,zero,4fe8 <_malloc_trim_r+0xe0>
    4fb4:	00800074 	movhi	r2,1
    4fb8:	1092dc17 	ldw	r2,19312(r2)
    4fbc:	98c00217 	ldw	r3,8(r19)
    4fc0:	8c23c83a 	sub	r17,r17,r16
    4fc4:	8c400054 	ori	r17,r17,1
    4fc8:	1421c83a 	sub	r16,r2,r16
    4fcc:	1c400115 	stw	r17,4(r3)
    4fd0:	00800074 	movhi	r2,1
    4fd4:	9009883a 	mov	r4,r18
    4fd8:	1412dc15 	stw	r16,19312(r2)
    4fdc:	000e2b00 	call	e2b0 <__malloc_unlock>
    4fe0:	00800044 	movi	r2,1
    4fe4:	003fe706 	br	4f84 <_malloc_trim_r+0x7c>
    4fe8:	000b883a 	mov	r5,zero
    4fec:	9009883a 	mov	r4,r18
    4ff0:	0007e540 	call	7e54 <_sbrk_r>
    4ff4:	99000217 	ldw	r4,8(r19)
    4ff8:	1107c83a 	sub	r3,r2,r4
    4ffc:	19400410 	cmplti	r5,r3,16
    5000:	283fdd1e 	bne	r5,zero,4f78 <_malloc_trim_r+0x70>
    5004:	01400074 	movhi	r5,1
    5008:	294b9f17 	ldw	r5,11900(r5)
    500c:	18c00054 	ori	r3,r3,1
    5010:	20c00115 	stw	r3,4(r4)
    5014:	1145c83a 	sub	r2,r2,r5
    5018:	01400074 	movhi	r5,1
    501c:	2892dc15 	stw	r2,19312(r5)
    5020:	003fd506 	br	4f78 <_malloc_trim_r+0x70>

00005024 <_free_r>:
    5024:	28004f26 	beq	r5,zero,5164 <_free_r+0x140>
    5028:	defffd04 	addi	sp,sp,-12
    502c:	dc400115 	stw	r17,4(sp)
    5030:	dc000015 	stw	r16,0(sp)
    5034:	2023883a 	mov	r17,r4
    5038:	2821883a 	mov	r16,r5
    503c:	dfc00215 	stw	ra,8(sp)
    5040:	000e28c0 	call	e28c <__malloc_lock>
    5044:	81ffff17 	ldw	r7,-4(r16)
    5048:	00bfff84 	movi	r2,-2
    504c:	80fffe04 	addi	r3,r16,-8
    5050:	3884703a 	and	r2,r7,r2
    5054:	01000074 	movhi	r4,1
    5058:	188d883a 	add	r6,r3,r2
    505c:	21059004 	addi	r4,r4,5696
    5060:	31400117 	ldw	r5,4(r6)
    5064:	22000217 	ldw	r8,8(r4)
    5068:	027fff04 	movi	r9,-4
    506c:	2a4a703a 	and	r5,r5,r9
    5070:	41806426 	beq	r8,r6,5204 <_free_r+0x1e0>
    5074:	31400115 	stw	r5,4(r6)
    5078:	39c0004c 	andi	r7,r7,1
    507c:	3151883a 	add	r8,r6,r5
    5080:	3800281e 	bne	r7,zero,5124 <_free_r+0x100>
    5084:	82bffe17 	ldw	r10,-8(r16)
    5088:	42000117 	ldw	r8,4(r8)
    508c:	01c00074 	movhi	r7,1
    5090:	1a87c83a 	sub	r3,r3,r10
    5094:	1a400217 	ldw	r9,8(r3)
    5098:	39c59204 	addi	r7,r7,5704
    509c:	1285883a 	add	r2,r2,r10
    50a0:	4200004c 	andi	r8,r8,1
    50a4:	49c04c26 	beq	r9,r7,51d8 <_free_r+0x1b4>
    50a8:	1a800317 	ldw	r10,12(r3)
    50ac:	4a800315 	stw	r10,12(r9)
    50b0:	52400215 	stw	r9,8(r10)
    50b4:	40007126 	beq	r8,zero,527c <_free_r+0x258>
    50b8:	11400054 	ori	r5,r2,1
    50bc:	19400115 	stw	r5,4(r3)
    50c0:	30800015 	stw	r2,0(r6)
    50c4:	11408028 	cmpgeui	r5,r2,512
    50c8:	28002c1e 	bne	r5,zero,517c <_free_r+0x158>
    50cc:	100ad0fa 	srli	r5,r2,3
    50d0:	100cd17a 	srli	r6,r2,5
    50d4:	00800044 	movi	r2,1
    50d8:	29400044 	addi	r5,r5,1
    50dc:	280a90fa 	slli	r5,r5,3
    50e0:	21c00117 	ldw	r7,4(r4)
    50e4:	1184983a 	sll	r2,r2,r6
    50e8:	214b883a 	add	r5,r4,r5
    50ec:	29800017 	ldw	r6,0(r5)
    50f0:	11c4b03a 	or	r2,r2,r7
    50f4:	29fffe04 	addi	r7,r5,-8
    50f8:	19c00315 	stw	r7,12(r3)
    50fc:	19800215 	stw	r6,8(r3)
    5100:	20800115 	stw	r2,4(r4)
    5104:	28c00015 	stw	r3,0(r5)
    5108:	30c00315 	stw	r3,12(r6)
    510c:	8809883a 	mov	r4,r17
    5110:	dfc00217 	ldw	ra,8(sp)
    5114:	dc400117 	ldw	r17,4(sp)
    5118:	dc000017 	ldw	r16,0(sp)
    511c:	dec00304 	addi	sp,sp,12
    5120:	000e2b01 	jmpi	e2b0 <__malloc_unlock>
    5124:	41c00117 	ldw	r7,4(r8)
    5128:	39c0004c 	andi	r7,r7,1
    512c:	38000e1e 	bne	r7,zero,5168 <_free_r+0x144>
    5130:	01c00074 	movhi	r7,1
    5134:	1145883a 	add	r2,r2,r5
    5138:	39c59204 	addi	r7,r7,5704
    513c:	31400217 	ldw	r5,8(r6)
    5140:	12400054 	ori	r9,r2,1
    5144:	1891883a 	add	r8,r3,r2
    5148:	29c05226 	beq	r5,r7,5294 <_free_r+0x270>
    514c:	31800317 	ldw	r6,12(r6)
    5150:	29800315 	stw	r6,12(r5)
    5154:	31400215 	stw	r5,8(r6)
    5158:	1a400115 	stw	r9,4(r3)
    515c:	40800015 	stw	r2,0(r8)
    5160:	003fd806 	br	50c4 <_free_r+0xa0>
    5164:	f800283a 	ret
    5168:	11400054 	ori	r5,r2,1
    516c:	817fff15 	stw	r5,-4(r16)
    5170:	30800015 	stw	r2,0(r6)
    5174:	11408028 	cmpgeui	r5,r2,512
    5178:	283fd426 	beq	r5,zero,50cc <_free_r+0xa8>
    517c:	100ad27a 	srli	r5,r2,9
    5180:	29800168 	cmpgeui	r6,r5,5
    5184:	3000341e 	bne	r6,zero,5258 <_free_r+0x234>
    5188:	100ad1ba 	srli	r5,r2,6
    518c:	29800e44 	addi	r6,r5,57
    5190:	300c90fa 	slli	r6,r6,3
    5194:	29c00e04 	addi	r7,r5,56
    5198:	218d883a 	add	r6,r4,r6
    519c:	31400017 	ldw	r5,0(r6)
    51a0:	31bffe04 	addi	r6,r6,-8
    51a4:	31404226 	beq	r6,r5,52b0 <_free_r+0x28c>
    51a8:	01ffff04 	movi	r7,-4
    51ac:	29000117 	ldw	r4,4(r5)
    51b0:	21c8703a 	and	r4,r4,r7
    51b4:	1100022e 	bgeu	r2,r4,51c0 <_free_r+0x19c>
    51b8:	29400217 	ldw	r5,8(r5)
    51bc:	317ffb1e 	bne	r6,r5,51ac <_free_r+0x188>
    51c0:	29800317 	ldw	r6,12(r5)
    51c4:	19800315 	stw	r6,12(r3)
    51c8:	19400215 	stw	r5,8(r3)
    51cc:	30c00215 	stw	r3,8(r6)
    51d0:	28c00315 	stw	r3,12(r5)
    51d4:	003fcd06 	br	510c <_free_r+0xe8>
    51d8:	40004d1e 	bne	r8,zero,5310 <_free_r+0x2ec>
    51dc:	31000317 	ldw	r4,12(r6)
    51e0:	31800217 	ldw	r6,8(r6)
    51e4:	2885883a 	add	r2,r5,r2
    51e8:	11400054 	ori	r5,r2,1
    51ec:	31000315 	stw	r4,12(r6)
    51f0:	21800215 	stw	r6,8(r4)
    51f4:	19400115 	stw	r5,4(r3)
    51f8:	1887883a 	add	r3,r3,r2
    51fc:	18800015 	stw	r2,0(r3)
    5200:	003fc206 	br	510c <_free_r+0xe8>
    5204:	39c0004c 	andi	r7,r7,1
    5208:	1145883a 	add	r2,r2,r5
    520c:	3800071e 	bne	r7,zero,522c <_free_r+0x208>
    5210:	81fffe17 	ldw	r7,-8(r16)
    5214:	19c7c83a 	sub	r3,r3,r7
    5218:	19400317 	ldw	r5,12(r3)
    521c:	19800217 	ldw	r6,8(r3)
    5220:	11c5883a 	add	r2,r2,r7
    5224:	31400315 	stw	r5,12(r6)
    5228:	29800215 	stw	r6,8(r5)
    522c:	01400074 	movhi	r5,1
    5230:	11800054 	ori	r6,r2,1
    5234:	294ba017 	ldw	r5,11904(r5)
    5238:	19800115 	stw	r6,4(r3)
    523c:	20c00215 	stw	r3,8(r4)
    5240:	117fb236 	bltu	r2,r5,510c <_free_r+0xe8>
    5244:	00800074 	movhi	r2,1
    5248:	1152d117 	ldw	r5,19268(r2)
    524c:	8809883a 	mov	r4,r17
    5250:	0004f080 	call	4f08 <_malloc_trim_r>
    5254:	003fad06 	br	510c <_free_r+0xe8>
    5258:	29800568 	cmpgeui	r6,r5,21
    525c:	30000926 	beq	r6,zero,5284 <_free_r+0x260>
    5260:	29801568 	cmpgeui	r6,r5,85
    5264:	3000191e 	bne	r6,zero,52cc <_free_r+0x2a8>
    5268:	100ad33a 	srli	r5,r2,12
    526c:	29801bc4 	addi	r6,r5,111
    5270:	300c90fa 	slli	r6,r6,3
    5274:	29c01b84 	addi	r7,r5,110
    5278:	003fc706 	br	5198 <_free_r+0x174>
    527c:	1145883a 	add	r2,r2,r5
    5280:	003fae06 	br	513c <_free_r+0x118>
    5284:	29801704 	addi	r6,r5,92
    5288:	300c90fa 	slli	r6,r6,3
    528c:	29c016c4 	addi	r7,r5,91
    5290:	003fc106 	br	5198 <_free_r+0x174>
    5294:	20c00515 	stw	r3,20(r4)
    5298:	20c00415 	stw	r3,16(r4)
    529c:	19c00315 	stw	r7,12(r3)
    52a0:	19c00215 	stw	r7,8(r3)
    52a4:	1a400115 	stw	r9,4(r3)
    52a8:	40800015 	stw	r2,0(r8)
    52ac:	003f9706 	br	510c <_free_r+0xe8>
    52b0:	380fd0ba 	srai	r7,r7,2
    52b4:	00800044 	movi	r2,1
    52b8:	22000117 	ldw	r8,4(r4)
    52bc:	11ce983a 	sll	r7,r2,r7
    52c0:	3a0eb03a 	or	r7,r7,r8
    52c4:	21c00115 	stw	r7,4(r4)
    52c8:	003fbe06 	br	51c4 <_free_r+0x1a0>
    52cc:	29805568 	cmpgeui	r6,r5,341
    52d0:	3000051e 	bne	r6,zero,52e8 <_free_r+0x2c4>
    52d4:	100ad3fa 	srli	r5,r2,15
    52d8:	29801e04 	addi	r6,r5,120
    52dc:	300c90fa 	slli	r6,r6,3
    52e0:	29c01dc4 	addi	r7,r5,119
    52e4:	003fac06 	br	5198 <_free_r+0x174>
    52e8:	29415568 	cmpgeui	r5,r5,1365
    52ec:	2800051e 	bne	r5,zero,5304 <_free_r+0x2e0>
    52f0:	100ad4ba 	srli	r5,r2,18
    52f4:	29801f44 	addi	r6,r5,125
    52f8:	300c90fa 	slli	r6,r6,3
    52fc:	29c01f04 	addi	r7,r5,124
    5300:	003fa506 	br	5198 <_free_r+0x174>
    5304:	0180fe04 	movi	r6,1016
    5308:	01c01f84 	movi	r7,126
    530c:	003fa206 	br	5198 <_free_r+0x174>
    5310:	11000054 	ori	r4,r2,1
    5314:	19000115 	stw	r4,4(r3)
    5318:	30800015 	stw	r2,0(r6)
    531c:	003f7b06 	br	510c <_free_r+0xe8>

00005320 <__sfvwrite_r>:
    5320:	30800217 	ldw	r2,8(r6)
    5324:	10009b26 	beq	r2,zero,5594 <__sfvwrite_r+0x274>
    5328:	2a00030b 	ldhu	r8,12(r5)
    532c:	defff404 	addi	sp,sp,-48
    5330:	dd400715 	stw	r21,28(sp)
    5334:	dd000615 	stw	r20,24(sp)
    5338:	dc000215 	stw	r16,8(sp)
    533c:	dfc00b15 	stw	ra,44(sp)
    5340:	df000a15 	stw	fp,40(sp)
    5344:	ddc00915 	stw	r23,36(sp)
    5348:	dd800815 	stw	r22,32(sp)
    534c:	dcc00515 	stw	r19,20(sp)
    5350:	dc800415 	stw	r18,16(sp)
    5354:	dc400315 	stw	r17,12(sp)
    5358:	4080020c 	andi	r2,r8,8
    535c:	3029883a 	mov	r20,r6
    5360:	202b883a 	mov	r21,r4
    5364:	2821883a 	mov	r16,r5
    5368:	10002626 	beq	r2,zero,5404 <__sfvwrite_r+0xe4>
    536c:	28800417 	ldw	r2,16(r5)
    5370:	10002426 	beq	r2,zero,5404 <__sfvwrite_r+0xe4>
    5374:	4080008c 	andi	r2,r8,2
    5378:	a4400017 	ldw	r17,0(r20)
    537c:	10002926 	beq	r2,zero,5424 <__sfvwrite_r+0x104>
    5380:	05a00034 	movhi	r22,32768
    5384:	0027883a 	mov	r19,zero
    5388:	0025883a 	mov	r18,zero
    538c:	b5bf0004 	addi	r22,r22,-1024
    5390:	980d883a 	mov	r6,r19
    5394:	a809883a 	mov	r4,r21
    5398:	90007126 	beq	r18,zero,5560 <__sfvwrite_r+0x240>
    539c:	900f883a 	mov	r7,r18
    53a0:	b480012e 	bgeu	r22,r18,53a8 <__sfvwrite_r+0x88>
    53a4:	b00f883a 	mov	r7,r22
    53a8:	80800917 	ldw	r2,36(r16)
    53ac:	81400717 	ldw	r5,28(r16)
    53b0:	103ee83a 	callr	r2
    53b4:	0080720e 	bge	zero,r2,5580 <__sfvwrite_r+0x260>
    53b8:	a0c00217 	ldw	r3,8(r20)
    53bc:	98a7883a 	add	r19,r19,r2
    53c0:	90a5c83a 	sub	r18,r18,r2
    53c4:	1885c83a 	sub	r2,r3,r2
    53c8:	a0800215 	stw	r2,8(r20)
    53cc:	103ff01e 	bne	r2,zero,5390 <__sfvwrite_r+0x70>
    53d0:	0005883a 	mov	r2,zero
    53d4:	dfc00b17 	ldw	ra,44(sp)
    53d8:	df000a17 	ldw	fp,40(sp)
    53dc:	ddc00917 	ldw	r23,36(sp)
    53e0:	dd800817 	ldw	r22,32(sp)
    53e4:	dd400717 	ldw	r21,28(sp)
    53e8:	dd000617 	ldw	r20,24(sp)
    53ec:	dcc00517 	ldw	r19,20(sp)
    53f0:	dc800417 	ldw	r18,16(sp)
    53f4:	dc400317 	ldw	r17,12(sp)
    53f8:	dc000217 	ldw	r16,8(sp)
    53fc:	dec00c04 	addi	sp,sp,48
    5400:	f800283a 	ret
    5404:	800b883a 	mov	r5,r16
    5408:	a809883a 	mov	r4,r21
    540c:	0002d840 	call	2d84 <__swsetup_r>
    5410:	1000e61e 	bne	r2,zero,57ac <__sfvwrite_r+0x48c>
    5414:	8200030b 	ldhu	r8,12(r16)
    5418:	a4400017 	ldw	r17,0(r20)
    541c:	4080008c 	andi	r2,r8,2
    5420:	103fd71e 	bne	r2,zero,5380 <__sfvwrite_r+0x60>
    5424:	4080004c 	andi	r2,r8,1
    5428:	10005c1e 	bne	r2,zero,559c <__sfvwrite_r+0x27c>
    542c:	00a00034 	movhi	r2,32768
    5430:	10bfff84 	addi	r2,r2,-2
    5434:	00e00034 	movhi	r3,32768
    5438:	d8800015 	stw	r2,0(sp)
    543c:	18bfffc4 	addi	r2,r3,-1
    5440:	0039883a 	mov	fp,zero
    5444:	0025883a 	mov	r18,zero
    5448:	d8800115 	stw	r2,4(sp)
    544c:	90004026 	beq	r18,zero,5550 <__sfvwrite_r+0x230>
    5450:	4080800c 	andi	r2,r8,512
    5454:	81000017 	ldw	r4,0(r16)
    5458:	85c00217 	ldw	r23,8(r16)
    545c:	10008826 	beq	r2,zero,5680 <__sfvwrite_r+0x360>
    5460:	b82d883a 	mov	r22,r23
    5464:	95c0ae36 	bltu	r18,r23,5720 <__sfvwrite_r+0x400>
    5468:	4081200c 	andi	r2,r8,1152
    546c:	10002626 	beq	r2,zero,5508 <__sfvwrite_r+0x1e8>
    5470:	81800517 	ldw	r6,20(r16)
    5474:	81400417 	ldw	r5,16(r16)
    5478:	3185883a 	add	r2,r6,r6
    547c:	1185883a 	add	r2,r2,r6
    5480:	1026d7fa 	srli	r19,r2,31
    5484:	216dc83a 	sub	r22,r4,r5
    5488:	b1000044 	addi	r4,r22,1
    548c:	98a7883a 	add	r19,r19,r2
    5490:	9827d07a 	srai	r19,r19,1
    5494:	2485883a 	add	r2,r4,r18
    5498:	980d883a 	mov	r6,r19
    549c:	9880022e 	bgeu	r19,r2,54a8 <__sfvwrite_r+0x188>
    54a0:	1027883a 	mov	r19,r2
    54a4:	100d883a 	mov	r6,r2
    54a8:	4201000c 	andi	r8,r8,1024
    54ac:	4000af26 	beq	r8,zero,576c <__sfvwrite_r+0x44c>
    54b0:	300b883a 	mov	r5,r6
    54b4:	a809883a 	mov	r4,r21
    54b8:	0005b5c0 	call	5b5c <_malloc_r>
    54bc:	1000b726 	beq	r2,zero,579c <__sfvwrite_r+0x47c>
    54c0:	81400417 	ldw	r5,16(r16)
    54c4:	b00d883a 	mov	r6,r22
    54c8:	1009883a 	mov	r4,r2
    54cc:	000640c0 	call	640c <memcpy>
    54d0:	100f883a 	mov	r7,r2
    54d4:	8080030b 	ldhu	r2,12(r16)
    54d8:	00fedfc4 	movi	r3,-1153
    54dc:	10c4703a 	and	r2,r2,r3
    54e0:	10802014 	ori	r2,r2,128
    54e4:	8080030d 	sth	r2,12(r16)
    54e8:	3d89883a 	add	r4,r7,r22
    54ec:	9d85c83a 	sub	r2,r19,r22
    54f0:	81c00415 	stw	r7,16(r16)
    54f4:	81000015 	stw	r4,0(r16)
    54f8:	84c00515 	stw	r19,20(r16)
    54fc:	902f883a 	mov	r23,r18
    5500:	80800215 	stw	r2,8(r16)
    5504:	902d883a 	mov	r22,r18
    5508:	b00d883a 	mov	r6,r22
    550c:	e00b883a 	mov	r5,fp
    5510:	000650c0 	call	650c <memmove>
    5514:	81000217 	ldw	r4,8(r16)
    5518:	80800017 	ldw	r2,0(r16)
    551c:	9027883a 	mov	r19,r18
    5520:	25c9c83a 	sub	r4,r4,r23
    5524:	1585883a 	add	r2,r2,r22
    5528:	81000215 	stw	r4,8(r16)
    552c:	80800015 	stw	r2,0(r16)
    5530:	0025883a 	mov	r18,zero
    5534:	a1800217 	ldw	r6,8(r20)
    5538:	e4f9883a 	add	fp,fp,r19
    553c:	34e7c83a 	sub	r19,r6,r19
    5540:	a4c00215 	stw	r19,8(r20)
    5544:	983fa226 	beq	r19,zero,53d0 <__sfvwrite_r+0xb0>
    5548:	8200030b 	ldhu	r8,12(r16)
    554c:	903fc01e 	bne	r18,zero,5450 <__sfvwrite_r+0x130>
    5550:	8f000017 	ldw	fp,0(r17)
    5554:	8c800117 	ldw	r18,4(r17)
    5558:	8c400204 	addi	r17,r17,8
    555c:	003fbb06 	br	544c <__sfvwrite_r+0x12c>
    5560:	8cc00017 	ldw	r19,0(r17)
    5564:	8c800117 	ldw	r18,4(r17)
    5568:	8c400204 	addi	r17,r17,8
    556c:	003f8806 	br	5390 <__sfvwrite_r+0x70>
    5570:	800b883a 	mov	r5,r16
    5574:	a809883a 	mov	r4,r21
    5578:	0004a780 	call	4a78 <_fflush_r>
    557c:	10002226 	beq	r2,zero,5608 <__sfvwrite_r+0x2e8>
    5580:	8080030b 	ldhu	r2,12(r16)
    5584:	10801014 	ori	r2,r2,64
    5588:	8080030d 	sth	r2,12(r16)
    558c:	00bfffc4 	movi	r2,-1
    5590:	003f9006 	br	53d4 <__sfvwrite_r+0xb4>
    5594:	0005883a 	mov	r2,zero
    5598:	f800283a 	ret
    559c:	002d883a 	mov	r22,zero
    55a0:	0039883a 	mov	fp,zero
    55a4:	0005883a 	mov	r2,zero
    55a8:	002f883a 	mov	r23,zero
    55ac:	b0001d26 	beq	r22,zero,5624 <__sfvwrite_r+0x304>
    55b0:	10002026 	beq	r2,zero,5634 <__sfvwrite_r+0x314>
    55b4:	e027883a 	mov	r19,fp
    55b8:	b4c0012e 	bgeu	r22,r19,55c0 <__sfvwrite_r+0x2a0>
    55bc:	b027883a 	mov	r19,r22
    55c0:	81000017 	ldw	r4,0(r16)
    55c4:	80800417 	ldw	r2,16(r16)
    55c8:	81c00517 	ldw	r7,20(r16)
    55cc:	1100032e 	bgeu	r2,r4,55dc <__sfvwrite_r+0x2bc>
    55d0:	84800217 	ldw	r18,8(r16)
    55d4:	3ca5883a 	add	r18,r7,r18
    55d8:	94c01e16 	blt	r18,r19,5654 <__sfvwrite_r+0x334>
    55dc:	99c05316 	blt	r19,r7,572c <__sfvwrite_r+0x40c>
    55e0:	80800917 	ldw	r2,36(r16)
    55e4:	81400717 	ldw	r5,28(r16)
    55e8:	b80d883a 	mov	r6,r23
    55ec:	a809883a 	mov	r4,r21
    55f0:	103ee83a 	callr	r2
    55f4:	1025883a 	mov	r18,r2
    55f8:	00bfe10e 	bge	zero,r2,5580 <__sfvwrite_r+0x260>
    55fc:	e4b9c83a 	sub	fp,fp,r18
    5600:	e03fdb26 	beq	fp,zero,5570 <__sfvwrite_r+0x250>
    5604:	00800044 	movi	r2,1
    5608:	a1800217 	ldw	r6,8(r20)
    560c:	bcaf883a 	add	r23,r23,r18
    5610:	b4adc83a 	sub	r22,r22,r18
    5614:	34a5c83a 	sub	r18,r6,r18
    5618:	a4800215 	stw	r18,8(r20)
    561c:	903f6c26 	beq	r18,zero,53d0 <__sfvwrite_r+0xb0>
    5620:	b03fe31e 	bne	r22,zero,55b0 <__sfvwrite_r+0x290>
    5624:	8d800117 	ldw	r22,4(r17)
    5628:	8dc00017 	ldw	r23,0(r17)
    562c:	8c400204 	addi	r17,r17,8
    5630:	b03ffc26 	beq	r22,zero,5624 <__sfvwrite_r+0x304>
    5634:	b00d883a 	mov	r6,r22
    5638:	01400284 	movi	r5,10
    563c:	b809883a 	mov	r4,r23
    5640:	000633c0 	call	633c <memchr>
    5644:	10004626 	beq	r2,zero,5760 <__sfvwrite_r+0x440>
    5648:	10800044 	addi	r2,r2,1
    564c:	15f9c83a 	sub	fp,r2,r23
    5650:	003fd806 	br	55b4 <__sfvwrite_r+0x294>
    5654:	b80b883a 	mov	r5,r23
    5658:	900d883a 	mov	r6,r18
    565c:	000650c0 	call	650c <memmove>
    5660:	80800017 	ldw	r2,0(r16)
    5664:	800b883a 	mov	r5,r16
    5668:	a809883a 	mov	r4,r21
    566c:	1485883a 	add	r2,r2,r18
    5670:	80800015 	stw	r2,0(r16)
    5674:	0004a780 	call	4a78 <_fflush_r>
    5678:	103fe026 	beq	r2,zero,55fc <__sfvwrite_r+0x2dc>
    567c:	003fc006 	br	5580 <__sfvwrite_r+0x260>
    5680:	80800417 	ldw	r2,16(r16)
    5684:	11001436 	bltu	r2,r4,56d8 <__sfvwrite_r+0x3b8>
    5688:	84c00517 	ldw	r19,20(r16)
    568c:	94c01236 	bltu	r18,r19,56d8 <__sfvwrite_r+0x3b8>
    5690:	d8800017 	ldw	r2,0(sp)
    5694:	1480302e 	bgeu	r2,r18,5758 <__sfvwrite_r+0x438>
    5698:	d9000117 	ldw	r4,4(sp)
    569c:	980b883a 	mov	r5,r19
    56a0:	000b21c0 	call	b21c <__divsi3>
    56a4:	980b883a 	mov	r5,r19
    56a8:	1009883a 	mov	r4,r2
    56ac:	000b3d00 	call	b3d0 <__mulsi3>
    56b0:	82000917 	ldw	r8,36(r16)
    56b4:	81400717 	ldw	r5,28(r16)
    56b8:	100f883a 	mov	r7,r2
    56bc:	e00d883a 	mov	r6,fp
    56c0:	a809883a 	mov	r4,r21
    56c4:	403ee83a 	callr	r8
    56c8:	1027883a 	mov	r19,r2
    56cc:	00bfac0e 	bge	zero,r2,5580 <__sfvwrite_r+0x260>
    56d0:	94e5c83a 	sub	r18,r18,r19
    56d4:	003f9706 	br	5534 <__sfvwrite_r+0x214>
    56d8:	b827883a 	mov	r19,r23
    56dc:	95c0012e 	bgeu	r18,r23,56e4 <__sfvwrite_r+0x3c4>
    56e0:	9027883a 	mov	r19,r18
    56e4:	980d883a 	mov	r6,r19
    56e8:	e00b883a 	mov	r5,fp
    56ec:	000650c0 	call	650c <memmove>
    56f0:	80800217 	ldw	r2,8(r16)
    56f4:	81000017 	ldw	r4,0(r16)
    56f8:	14c5c83a 	sub	r2,r2,r19
    56fc:	24c9883a 	add	r4,r4,r19
    5700:	80800215 	stw	r2,8(r16)
    5704:	81000015 	stw	r4,0(r16)
    5708:	103ff11e 	bne	r2,zero,56d0 <__sfvwrite_r+0x3b0>
    570c:	800b883a 	mov	r5,r16
    5710:	a809883a 	mov	r4,r21
    5714:	0004a780 	call	4a78 <_fflush_r>
    5718:	103fed26 	beq	r2,zero,56d0 <__sfvwrite_r+0x3b0>
    571c:	003f9806 	br	5580 <__sfvwrite_r+0x260>
    5720:	902f883a 	mov	r23,r18
    5724:	902d883a 	mov	r22,r18
    5728:	003f7706 	br	5508 <__sfvwrite_r+0x1e8>
    572c:	980d883a 	mov	r6,r19
    5730:	b80b883a 	mov	r5,r23
    5734:	000650c0 	call	650c <memmove>
    5738:	80c00217 	ldw	r3,8(r16)
    573c:	80800017 	ldw	r2,0(r16)
    5740:	9825883a 	mov	r18,r19
    5744:	1cc7c83a 	sub	r3,r3,r19
    5748:	14c5883a 	add	r2,r2,r19
    574c:	80c00215 	stw	r3,8(r16)
    5750:	80800015 	stw	r2,0(r16)
    5754:	003fa906 	br	55fc <__sfvwrite_r+0x2dc>
    5758:	9009883a 	mov	r4,r18
    575c:	003fcf06 	br	569c <__sfvwrite_r+0x37c>
    5760:	b4c00044 	addi	r19,r22,1
    5764:	9839883a 	mov	fp,r19
    5768:	003f9306 	br	55b8 <__sfvwrite_r+0x298>
    576c:	a809883a 	mov	r4,r21
    5770:	00079180 	call	7918 <_realloc_r>
    5774:	100f883a 	mov	r7,r2
    5778:	103f5b1e 	bne	r2,zero,54e8 <__sfvwrite_r+0x1c8>
    577c:	81400417 	ldw	r5,16(r16)
    5780:	a809883a 	mov	r4,r21
    5784:	00050240 	call	5024 <_free_r>
    5788:	8080030b 	ldhu	r2,12(r16)
    578c:	00c00304 	movi	r3,12
    5790:	a8c00015 	stw	r3,0(r21)
    5794:	10bfdfcc 	andi	r2,r2,65407
    5798:	003f7a06 	br	5584 <__sfvwrite_r+0x264>
    579c:	00c00304 	movi	r3,12
    57a0:	8080030b 	ldhu	r2,12(r16)
    57a4:	a8c00015 	stw	r3,0(r21)
    57a8:	003f7606 	br	5584 <__sfvwrite_r+0x264>
    57ac:	00bfffc4 	movi	r2,-1
    57b0:	003f0806 	br	53d4 <__sfvwrite_r+0xb4>

000057b4 <_fwalk>:
    57b4:	defffa04 	addi	sp,sp,-24
    57b8:	dd000415 	stw	r20,16(sp)
    57bc:	dcc00315 	stw	r19,12(sp)
    57c0:	dc800215 	stw	r18,8(sp)
    57c4:	dfc00515 	stw	ra,20(sp)
    57c8:	dc400115 	stw	r17,4(sp)
    57cc:	dc000015 	stw	r16,0(sp)
    57d0:	2827883a 	mov	r19,r5
    57d4:	2480b804 	addi	r18,r4,736
    57d8:	0029883a 	mov	r20,zero
    57dc:	94400117 	ldw	r17,4(r18)
    57e0:	94000217 	ldw	r16,8(r18)
    57e4:	8c7fffc4 	addi	r17,r17,-1
    57e8:	88000d16 	blt	r17,zero,5820 <_fwalk+0x6c>
    57ec:	8080030b 	ldhu	r2,12(r16)
    57f0:	8c7fffc4 	addi	r17,r17,-1
    57f4:	108000b0 	cmpltui	r2,r2,2
    57f8:	1000061e 	bne	r2,zero,5814 <_fwalk+0x60>
    57fc:	8080038f 	ldh	r2,14(r16)
    5800:	8009883a 	mov	r4,r16
    5804:	10bfffe0 	cmpeqi	r2,r2,-1
    5808:	1000021e 	bne	r2,zero,5814 <_fwalk+0x60>
    580c:	983ee83a 	callr	r19
    5810:	a0a8b03a 	or	r20,r20,r2
    5814:	88bfffd8 	cmpnei	r2,r17,-1
    5818:	84001a04 	addi	r16,r16,104
    581c:	103ff31e 	bne	r2,zero,57ec <_fwalk+0x38>
    5820:	94800017 	ldw	r18,0(r18)
    5824:	903fed1e 	bne	r18,zero,57dc <_fwalk+0x28>
    5828:	a005883a 	mov	r2,r20
    582c:	dfc00517 	ldw	ra,20(sp)
    5830:	dd000417 	ldw	r20,16(sp)
    5834:	dcc00317 	ldw	r19,12(sp)
    5838:	dc800217 	ldw	r18,8(sp)
    583c:	dc400117 	ldw	r17,4(sp)
    5840:	dc000017 	ldw	r16,0(sp)
    5844:	dec00604 	addi	sp,sp,24
    5848:	f800283a 	ret

0000584c <_fwalk_reent>:
    584c:	defff904 	addi	sp,sp,-28
    5850:	dd400515 	stw	r21,20(sp)
    5854:	dd000415 	stw	r20,16(sp)
    5858:	dcc00315 	stw	r19,12(sp)
    585c:	dc800215 	stw	r18,8(sp)
    5860:	dfc00615 	stw	ra,24(sp)
    5864:	dc400115 	stw	r17,4(sp)
    5868:	dc000015 	stw	r16,0(sp)
    586c:	202b883a 	mov	r21,r4
    5870:	2827883a 	mov	r19,r5
    5874:	2480b804 	addi	r18,r4,736
    5878:	0029883a 	mov	r20,zero
    587c:	94400117 	ldw	r17,4(r18)
    5880:	94000217 	ldw	r16,8(r18)
    5884:	8c7fffc4 	addi	r17,r17,-1
    5888:	88000e16 	blt	r17,zero,58c4 <_fwalk_reent+0x78>
    588c:	8080030b 	ldhu	r2,12(r16)
    5890:	8c7fffc4 	addi	r17,r17,-1
    5894:	108000b0 	cmpltui	r2,r2,2
    5898:	1000071e 	bne	r2,zero,58b8 <_fwalk_reent+0x6c>
    589c:	8080038f 	ldh	r2,14(r16)
    58a0:	800b883a 	mov	r5,r16
    58a4:	a809883a 	mov	r4,r21
    58a8:	10bfffe0 	cmpeqi	r2,r2,-1
    58ac:	1000021e 	bne	r2,zero,58b8 <_fwalk_reent+0x6c>
    58b0:	983ee83a 	callr	r19
    58b4:	a0a8b03a 	or	r20,r20,r2
    58b8:	88bfffd8 	cmpnei	r2,r17,-1
    58bc:	84001a04 	addi	r16,r16,104
    58c0:	103ff21e 	bne	r2,zero,588c <_fwalk_reent+0x40>
    58c4:	94800017 	ldw	r18,0(r18)
    58c8:	903fec1e 	bne	r18,zero,587c <_fwalk_reent+0x30>
    58cc:	a005883a 	mov	r2,r20
    58d0:	dfc00617 	ldw	ra,24(sp)
    58d4:	dd400517 	ldw	r21,20(sp)
    58d8:	dd000417 	ldw	r20,16(sp)
    58dc:	dcc00317 	ldw	r19,12(sp)
    58e0:	dc800217 	ldw	r18,8(sp)
    58e4:	dc400117 	ldw	r17,4(sp)
    58e8:	dc000017 	ldw	r16,0(sp)
    58ec:	dec00704 	addi	sp,sp,28
    58f0:	f800283a 	ret

000058f4 <__localeconv_l>:
    58f4:	20803c04 	addi	r2,r4,240
    58f8:	f800283a 	ret

000058fc <_localeconv_r>:
    58fc:	00800074 	movhi	r2,1
    5900:	1086ce04 	addi	r2,r2,6968
    5904:	f800283a 	ret

00005908 <localeconv>:
    5908:	00800074 	movhi	r2,1
    590c:	1086ce04 	addi	r2,r2,6968
    5910:	f800283a 	ret

00005914 <__smakebuf_r>:
    5914:	2880030b 	ldhu	r2,12(r5)
    5918:	deffe804 	addi	sp,sp,-96
    591c:	dc001215 	stw	r16,72(sp)
    5920:	dfc01715 	stw	ra,92(sp)
    5924:	dd001615 	stw	r20,88(sp)
    5928:	dcc01515 	stw	r19,84(sp)
    592c:	dc801415 	stw	r18,80(sp)
    5930:	dc401315 	stw	r17,76(sp)
    5934:	10c0008c 	andi	r3,r2,2
    5938:	2821883a 	mov	r16,r5
    593c:	18000d26 	beq	r3,zero,5974 <__smakebuf_r+0x60>
    5940:	288010c4 	addi	r2,r5,67
    5944:	28800015 	stw	r2,0(r5)
    5948:	28800415 	stw	r2,16(r5)
    594c:	00800044 	movi	r2,1
    5950:	28800515 	stw	r2,20(r5)
    5954:	dfc01717 	ldw	ra,92(sp)
    5958:	dd001617 	ldw	r20,88(sp)
    595c:	dcc01517 	ldw	r19,84(sp)
    5960:	dc801417 	ldw	r18,80(sp)
    5964:	dc401317 	ldw	r17,76(sp)
    5968:	dc001217 	ldw	r16,72(sp)
    596c:	dec01804 	addi	sp,sp,96
    5970:	f800283a 	ret
    5974:	2940038f 	ldh	r5,14(r5)
    5978:	2023883a 	mov	r17,r4
    597c:	28002816 	blt	r5,zero,5a20 <__smakebuf_r+0x10c>
    5980:	d80d883a 	mov	r6,sp
    5984:	0009ac00 	call	9ac0 <_fstat_r>
    5988:	10002416 	blt	r2,zero,5a1c <__smakebuf_r+0x108>
    598c:	d8800117 	ldw	r2,4(sp)
    5990:	10bc000c 	andi	r2,r2,61440
    5994:	10880018 	cmpnei	r2,r2,8192
    5998:	1000461e 	bne	r2,zero,5ab4 <__smakebuf_r+0x1a0>
    599c:	8140038f 	ldh	r5,14(r16)
    59a0:	8809883a 	mov	r4,r17
    59a4:	0009b200 	call	9b20 <_isatty_r>
    59a8:	10003e26 	beq	r2,zero,5aa4 <__smakebuf_r+0x190>
    59ac:	8080030b 	ldhu	r2,12(r16)
    59b0:	80c010c4 	addi	r3,r16,67
    59b4:	80c00015 	stw	r3,0(r16)
    59b8:	10800054 	ori	r2,r2,1
    59bc:	8080030d 	sth	r2,12(r16)
    59c0:	00800044 	movi	r2,1
    59c4:	80c00415 	stw	r3,16(r16)
    59c8:	80800515 	stw	r2,20(r16)
    59cc:	04c00044 	movi	r19,1
    59d0:	05010004 	movi	r20,1024
    59d4:	04820004 	movi	r18,2048
    59d8:	a00b883a 	mov	r5,r20
    59dc:	8809883a 	mov	r4,r17
    59e0:	0005b5c0 	call	5b5c <_malloc_r>
    59e4:	10001726 	beq	r2,zero,5a44 <__smakebuf_r+0x130>
    59e8:	80c0030b 	ldhu	r3,12(r16)
    59ec:	01000034 	movhi	r4,0
    59f0:	2112d904 	addi	r4,r4,19300
    59f4:	89000f15 	stw	r4,60(r17)
    59f8:	18c02014 	ori	r3,r3,128
    59fc:	80c0030d 	sth	r3,12(r16)
    5a00:	80800015 	stw	r2,0(r16)
    5a04:	80800415 	stw	r2,16(r16)
    5a08:	85000515 	stw	r20,20(r16)
    5a0c:	98001d1e 	bne	r19,zero,5a84 <__smakebuf_r+0x170>
    5a10:	90c6b03a 	or	r3,r18,r3
    5a14:	80c0030d 	sth	r3,12(r16)
    5a18:	003fce06 	br	5954 <__smakebuf_r+0x40>
    5a1c:	8080030b 	ldhu	r2,12(r16)
    5a20:	1080200c 	andi	r2,r2,128
    5a24:	0027883a 	mov	r19,zero
    5a28:	10001326 	beq	r2,zero,5a78 <__smakebuf_r+0x164>
    5a2c:	05001004 	movi	r20,64
    5a30:	a00b883a 	mov	r5,r20
    5a34:	8809883a 	mov	r4,r17
    5a38:	0025883a 	mov	r18,zero
    5a3c:	0005b5c0 	call	5b5c <_malloc_r>
    5a40:	103fe91e 	bne	r2,zero,59e8 <__smakebuf_r+0xd4>
    5a44:	8080030b 	ldhu	r2,12(r16)
    5a48:	10c0800c 	andi	r3,r2,512
    5a4c:	183fc11e 	bne	r3,zero,5954 <__smakebuf_r+0x40>
    5a50:	00ffff04 	movi	r3,-4
    5a54:	10c4703a 	and	r2,r2,r3
    5a58:	10800094 	ori	r2,r2,2
    5a5c:	80c010c4 	addi	r3,r16,67
    5a60:	8080030d 	sth	r2,12(r16)
    5a64:	00800044 	movi	r2,1
    5a68:	80c00015 	stw	r3,0(r16)
    5a6c:	80c00415 	stw	r3,16(r16)
    5a70:	80800515 	stw	r2,20(r16)
    5a74:	003fb706 	br	5954 <__smakebuf_r+0x40>
    5a78:	05010004 	movi	r20,1024
    5a7c:	0025883a 	mov	r18,zero
    5a80:	003fd506 	br	59d8 <__smakebuf_r+0xc4>
    5a84:	8140038f 	ldh	r5,14(r16)
    5a88:	8809883a 	mov	r4,r17
    5a8c:	0009b200 	call	9b20 <_isatty_r>
    5a90:	80c0030b 	ldhu	r3,12(r16)
    5a94:	103fde26 	beq	r2,zero,5a10 <__smakebuf_r+0xfc>
    5a98:	18ffff0c 	andi	r3,r3,65532
    5a9c:	18c00054 	ori	r3,r3,1
    5aa0:	003fdb06 	br	5a10 <__smakebuf_r+0xfc>
    5aa4:	04c00044 	movi	r19,1
    5aa8:	05010004 	movi	r20,1024
    5aac:	04820004 	movi	r18,2048
    5ab0:	003fc906 	br	59d8 <__smakebuf_r+0xc4>
    5ab4:	0027883a 	mov	r19,zero
    5ab8:	05010004 	movi	r20,1024
    5abc:	04820004 	movi	r18,2048
    5ac0:	003fc506 	br	59d8 <__smakebuf_r+0xc4>

00005ac4 <__swhatbuf_r>:
    5ac4:	deffea04 	addi	sp,sp,-88
    5ac8:	dc001215 	stw	r16,72(sp)
    5acc:	2821883a 	mov	r16,r5
    5ad0:	2940038f 	ldh	r5,14(r5)
    5ad4:	dc801415 	stw	r18,80(sp)
    5ad8:	dc401315 	stw	r17,76(sp)
    5adc:	dfc01515 	stw	ra,84(sp)
    5ae0:	3023883a 	mov	r17,r6
    5ae4:	3825883a 	mov	r18,r7
    5ae8:	28001016 	blt	r5,zero,5b2c <__swhatbuf_r+0x68>
    5aec:	d80d883a 	mov	r6,sp
    5af0:	0009ac00 	call	9ac0 <_fstat_r>
    5af4:	10000d16 	blt	r2,zero,5b2c <__swhatbuf_r+0x68>
    5af8:	d8c00117 	ldw	r3,4(sp)
    5afc:	00820004 	movi	r2,2048
    5b00:	18fc000c 	andi	r3,r3,61440
    5b04:	18c80020 	cmpeqi	r3,r3,8192
    5b08:	90c00015 	stw	r3,0(r18)
    5b0c:	00c10004 	movi	r3,1024
    5b10:	88c00015 	stw	r3,0(r17)
    5b14:	dfc01517 	ldw	ra,84(sp)
    5b18:	dc801417 	ldw	r18,80(sp)
    5b1c:	dc401317 	ldw	r17,76(sp)
    5b20:	dc001217 	ldw	r16,72(sp)
    5b24:	dec01604 	addi	sp,sp,88
    5b28:	f800283a 	ret
    5b2c:	8080030b 	ldhu	r2,12(r16)
    5b30:	90000015 	stw	zero,0(r18)
    5b34:	1080200c 	andi	r2,r2,128
    5b38:	10000426 	beq	r2,zero,5b4c <__swhatbuf_r+0x88>
    5b3c:	00801004 	movi	r2,64
    5b40:	88800015 	stw	r2,0(r17)
    5b44:	0005883a 	mov	r2,zero
    5b48:	003ff206 	br	5b14 <__swhatbuf_r+0x50>
    5b4c:	00810004 	movi	r2,1024
    5b50:	88800015 	stw	r2,0(r17)
    5b54:	0005883a 	mov	r2,zero
    5b58:	003fee06 	br	5b14 <__swhatbuf_r+0x50>

00005b5c <_malloc_r>:
    5b5c:	defff604 	addi	sp,sp,-40
    5b60:	dc400115 	stw	r17,4(sp)
    5b64:	2c4002c4 	addi	r17,r5,11
    5b68:	dc800215 	stw	r18,8(sp)
    5b6c:	dfc00915 	stw	ra,36(sp)
    5b70:	df000815 	stw	fp,32(sp)
    5b74:	ddc00715 	stw	r23,28(sp)
    5b78:	dd800615 	stw	r22,24(sp)
    5b7c:	dd400515 	stw	r21,20(sp)
    5b80:	dd000415 	stw	r20,16(sp)
    5b84:	dcc00315 	stw	r19,12(sp)
    5b88:	dc000015 	stw	r16,0(sp)
    5b8c:	888005e8 	cmpgeui	r2,r17,23
    5b90:	2025883a 	mov	r18,r4
    5b94:	10001b1e 	bne	r2,zero,5c04 <_malloc_r+0xa8>
    5b98:	29400468 	cmpgeui	r5,r5,17
    5b9c:	2800821e 	bne	r5,zero,5da8 <_malloc_r+0x24c>
    5ba0:	000e28c0 	call	e28c <__malloc_lock>
    5ba4:	04400404 	movi	r17,16
    5ba8:	00800604 	movi	r2,24
    5bac:	01c00084 	movi	r7,2
    5bb0:	04c00074 	movhi	r19,1
    5bb4:	9cc59004 	addi	r19,r19,5696
    5bb8:	9885883a 	add	r2,r19,r2
    5bbc:	14000117 	ldw	r16,4(r2)
    5bc0:	10fffe04 	addi	r3,r2,-8
    5bc4:	80c08b26 	beq	r16,r3,5df4 <_malloc_r+0x298>
    5bc8:	80800117 	ldw	r2,4(r16)
    5bcc:	81000317 	ldw	r4,12(r16)
    5bd0:	00ffff04 	movi	r3,-4
    5bd4:	10c4703a 	and	r2,r2,r3
    5bd8:	81400217 	ldw	r5,8(r16)
    5bdc:	8085883a 	add	r2,r16,r2
    5be0:	10c00117 	ldw	r3,4(r2)
    5be4:	29000315 	stw	r4,12(r5)
    5be8:	21400215 	stw	r5,8(r4)
    5bec:	18c00054 	ori	r3,r3,1
    5bf0:	10c00115 	stw	r3,4(r2)
    5bf4:	9009883a 	mov	r4,r18
    5bf8:	000e2b00 	call	e2b0 <__malloc_unlock>
    5bfc:	80800204 	addi	r2,r16,8
    5c00:	00006c06 	br	5db4 <_malloc_r+0x258>
    5c04:	00bffe04 	movi	r2,-8
    5c08:	88a2703a 	and	r17,r17,r2
    5c0c:	88006616 	blt	r17,zero,5da8 <_malloc_r+0x24c>
    5c10:	89406536 	bltu	r17,r5,5da8 <_malloc_r+0x24c>
    5c14:	000e28c0 	call	e28c <__malloc_lock>
    5c18:	88807e28 	cmpgeui	r2,r17,504
    5c1c:	10012226 	beq	r2,zero,60a8 <_malloc_r+0x54c>
    5c20:	8804d27a 	srli	r2,r17,9
    5c24:	10006f26 	beq	r2,zero,5de4 <_malloc_r+0x288>
    5c28:	10c00168 	cmpgeui	r3,r2,5
    5c2c:	1800fe1e 	bne	r3,zero,6028 <_malloc_r+0x4cc>
    5c30:	8804d1ba 	srli	r2,r17,6
    5c34:	11c00e44 	addi	r7,r2,57
    5c38:	380890fa 	slli	r4,r7,3
    5c3c:	12000e04 	addi	r8,r2,56
    5c40:	04c00074 	movhi	r19,1
    5c44:	9cc59004 	addi	r19,r19,5696
    5c48:	9909883a 	add	r4,r19,r4
    5c4c:	24000117 	ldw	r16,4(r4)
    5c50:	213ffe04 	addi	r4,r4,-8
    5c54:	24000b26 	beq	r4,r16,5c84 <_malloc_r+0x128>
    5c58:	01bfff04 	movi	r6,-4
    5c5c:	00000306 	br	5c6c <_malloc_r+0x110>
    5c60:	1800d60e 	bge	r3,zero,5fbc <_malloc_r+0x460>
    5c64:	84000317 	ldw	r16,12(r16)
    5c68:	24000626 	beq	r4,r16,5c84 <_malloc_r+0x128>
    5c6c:	80800117 	ldw	r2,4(r16)
    5c70:	1184703a 	and	r2,r2,r6
    5c74:	1447c83a 	sub	r3,r2,r17
    5c78:	19400408 	cmpgei	r5,r3,16
    5c7c:	283ff826 	beq	r5,zero,5c60 <_malloc_r+0x104>
    5c80:	400f883a 	mov	r7,r8
    5c84:	9c000417 	ldw	r16,16(r19)
    5c88:	02400074 	movhi	r9,1
    5c8c:	4a459204 	addi	r9,r9,5704
    5c90:	82405f26 	beq	r16,r9,5e10 <_malloc_r+0x2b4>
    5c94:	80c00117 	ldw	r3,4(r16)
    5c98:	00bfff04 	movi	r2,-4
    5c9c:	1884703a 	and	r2,r3,r2
    5ca0:	1447c83a 	sub	r3,r2,r17
    5ca4:	19000410 	cmplti	r4,r3,16
    5ca8:	20010a26 	beq	r4,zero,60d4 <_malloc_r+0x578>
    5cac:	9a400515 	stw	r9,20(r19)
    5cb0:	9a400415 	stw	r9,16(r19)
    5cb4:	1800ff0e 	bge	r3,zero,60b4 <_malloc_r+0x558>
    5cb8:	10c08028 	cmpgeui	r3,r2,512
    5cbc:	1800c11e 	bne	r3,zero,5fc4 <_malloc_r+0x468>
    5cc0:	1006d0fa 	srli	r3,r2,3
    5cc4:	1008d17a 	srli	r4,r2,5
    5cc8:	00800044 	movi	r2,1
    5ccc:	18c00044 	addi	r3,r3,1
    5cd0:	180690fa 	slli	r3,r3,3
    5cd4:	99400117 	ldw	r5,4(r19)
    5cd8:	1104983a 	sll	r2,r2,r4
    5cdc:	98c7883a 	add	r3,r19,r3
    5ce0:	19000017 	ldw	r4,0(r3)
    5ce4:	1144b03a 	or	r2,r2,r5
    5ce8:	197ffe04 	addi	r5,r3,-8
    5cec:	81400315 	stw	r5,12(r16)
    5cf0:	81000215 	stw	r4,8(r16)
    5cf4:	98800115 	stw	r2,4(r19)
    5cf8:	1c000015 	stw	r16,0(r3)
    5cfc:	24000315 	stw	r16,12(r4)
    5d00:	3807d0ba 	srai	r3,r7,2
    5d04:	01000044 	movi	r4,1
    5d08:	20c8983a 	sll	r4,r4,r3
    5d0c:	11004536 	bltu	r2,r4,5e24 <_malloc_r+0x2c8>
    5d10:	2086703a 	and	r3,r4,r2
    5d14:	18000a1e 	bne	r3,zero,5d40 <_malloc_r+0x1e4>
    5d18:	00ffff04 	movi	r3,-4
    5d1c:	2109883a 	add	r4,r4,r4
    5d20:	38ce703a 	and	r7,r7,r3
    5d24:	2086703a 	and	r3,r4,r2
    5d28:	39c00104 	addi	r7,r7,4
    5d2c:	1800041e 	bne	r3,zero,5d40 <_malloc_r+0x1e4>
    5d30:	2109883a 	add	r4,r4,r4
    5d34:	2086703a 	and	r3,r4,r2
    5d38:	39c00104 	addi	r7,r7,4
    5d3c:	183ffc26 	beq	r3,zero,5d30 <_malloc_r+0x1d4>
    5d40:	02bfff04 	movi	r10,-4
    5d44:	381690fa 	slli	r11,r7,3
    5d48:	3819883a 	mov	r12,r7
    5d4c:	9ad7883a 	add	r11,r19,r11
    5d50:	5811883a 	mov	r8,r11
    5d54:	40800317 	ldw	r2,12(r8)
    5d58:	4080bc26 	beq	r8,r2,604c <_malloc_r+0x4f0>
    5d5c:	10c00117 	ldw	r3,4(r2)
    5d60:	1021883a 	mov	r16,r2
    5d64:	10800317 	ldw	r2,12(r2)
    5d68:	1a86703a 	and	r3,r3,r10
    5d6c:	1c4bc83a 	sub	r5,r3,r17
    5d70:	29800410 	cmplti	r6,r5,16
    5d74:	3000ba26 	beq	r6,zero,6060 <_malloc_r+0x504>
    5d78:	283ff716 	blt	r5,zero,5d58 <_malloc_r+0x1fc>
    5d7c:	80c7883a 	add	r3,r16,r3
    5d80:	19400117 	ldw	r5,4(r3)
    5d84:	81800217 	ldw	r6,8(r16)
    5d88:	9009883a 	mov	r4,r18
    5d8c:	29400054 	ori	r5,r5,1
    5d90:	19400115 	stw	r5,4(r3)
    5d94:	30800315 	stw	r2,12(r6)
    5d98:	11800215 	stw	r6,8(r2)
    5d9c:	000e2b00 	call	e2b0 <__malloc_unlock>
    5da0:	80800204 	addi	r2,r16,8
    5da4:	00000306 	br	5db4 <_malloc_r+0x258>
    5da8:	00800304 	movi	r2,12
    5dac:	90800015 	stw	r2,0(r18)
    5db0:	0005883a 	mov	r2,zero
    5db4:	dfc00917 	ldw	ra,36(sp)
    5db8:	df000817 	ldw	fp,32(sp)
    5dbc:	ddc00717 	ldw	r23,28(sp)
    5dc0:	dd800617 	ldw	r22,24(sp)
    5dc4:	dd400517 	ldw	r21,20(sp)
    5dc8:	dd000417 	ldw	r20,16(sp)
    5dcc:	dcc00317 	ldw	r19,12(sp)
    5dd0:	dc800217 	ldw	r18,8(sp)
    5dd4:	dc400117 	ldw	r17,4(sp)
    5dd8:	dc000017 	ldw	r16,0(sp)
    5ddc:	dec00a04 	addi	sp,sp,40
    5de0:	f800283a 	ret
    5de4:	01008004 	movi	r4,512
    5de8:	01c01004 	movi	r7,64
    5dec:	02000fc4 	movi	r8,63
    5df0:	003f9306 	br	5c40 <_malloc_r+0xe4>
    5df4:	14000317 	ldw	r16,12(r2)
    5df8:	39c00084 	addi	r7,r7,2
    5dfc:	143f721e 	bne	r2,r16,5bc8 <_malloc_r+0x6c>
    5e00:	9c000417 	ldw	r16,16(r19)
    5e04:	02400074 	movhi	r9,1
    5e08:	4a459204 	addi	r9,r9,5704
    5e0c:	827fa11e 	bne	r16,r9,5c94 <_malloc_r+0x138>
    5e10:	3807d0ba 	srai	r3,r7,2
    5e14:	01000044 	movi	r4,1
    5e18:	98800117 	ldw	r2,4(r19)
    5e1c:	20c8983a 	sll	r4,r4,r3
    5e20:	113fbb2e 	bgeu	r2,r4,5d10 <_malloc_r+0x1b4>
    5e24:	9c000217 	ldw	r16,8(r19)
    5e28:	00bfff04 	movi	r2,-4
    5e2c:	85400117 	ldw	r21,4(r16)
    5e30:	a8ac703a 	and	r22,r21,r2
    5e34:	b4400336 	bltu	r22,r17,5e44 <_malloc_r+0x2e8>
    5e38:	b445c83a 	sub	r2,r22,r17
    5e3c:	10c00408 	cmpgei	r3,r2,16
    5e40:	1800541e 	bne	r3,zero,5f94 <_malloc_r+0x438>
    5e44:	00800074 	movhi	r2,1
    5e48:	108b9f17 	ldw	r2,11900(r2)
    5e4c:	00c00074 	movhi	r3,1
    5e50:	1d52d117 	ldw	r21,19268(r3)
    5e54:	10bfffd8 	cmpnei	r2,r2,-1
    5e58:	85b9883a 	add	fp,r16,r22
    5e5c:	8d6b883a 	add	r21,r17,r21
    5e60:	1000d626 	beq	r2,zero,61bc <_malloc_r+0x660>
    5e64:	ad4403c4 	addi	r21,r21,4111
    5e68:	00bc0004 	movi	r2,-4096
    5e6c:	a8aa703a 	and	r21,r21,r2
    5e70:	a80b883a 	mov	r5,r21
    5e74:	9009883a 	mov	r4,r18
    5e78:	0007e540 	call	7e54 <_sbrk_r>
    5e7c:	102f883a 	mov	r23,r2
    5e80:	10bfffd8 	cmpnei	r2,r2,-1
    5e84:	1000a826 	beq	r2,zero,6128 <_malloc_r+0x5cc>
    5e88:	bf00a636 	bltu	r23,fp,6124 <_malloc_r+0x5c8>
    5e8c:	00800074 	movhi	r2,1
    5e90:	1512dc17 	ldw	r20,19312(r2)
    5e94:	ad29883a 	add	r20,r21,r20
    5e98:	1512dc15 	stw	r20,19312(r2)
    5e9c:	a007883a 	mov	r3,r20
    5ea0:	e5c0ec26 	beq	fp,r23,6254 <_malloc_r+0x6f8>
    5ea4:	00800074 	movhi	r2,1
    5ea8:	108b9f17 	ldw	r2,11900(r2)
    5eac:	10bfffd8 	cmpnei	r2,r2,-1
    5eb0:	1000ef26 	beq	r2,zero,6270 <_malloc_r+0x714>
    5eb4:	bf39c83a 	sub	fp,r23,fp
    5eb8:	e0c7883a 	add	r3,fp,r3
    5ebc:	00800074 	movhi	r2,1
    5ec0:	10d2dc15 	stw	r3,19312(r2)
    5ec4:	bf0001cc 	andi	fp,r23,7
    5ec8:	e000c526 	beq	fp,zero,61e0 <_malloc_r+0x684>
    5ecc:	bf2fc83a 	sub	r23,r23,fp
    5ed0:	bdc00204 	addi	r23,r23,8
    5ed4:	05040204 	movi	r20,4104
    5ed8:	a729c83a 	sub	r20,r20,fp
    5edc:	bd6b883a 	add	r21,r23,r21
    5ee0:	a569c83a 	sub	r20,r20,r21
    5ee4:	a503ffcc 	andi	r20,r20,4095
    5ee8:	a00b883a 	mov	r5,r20
    5eec:	9009883a 	mov	r4,r18
    5ef0:	0007e540 	call	7e54 <_sbrk_r>
    5ef4:	10ffffe0 	cmpeqi	r3,r2,-1
    5ef8:	1800f31e 	bne	r3,zero,62c8 <_malloc_r+0x76c>
    5efc:	15c5c83a 	sub	r2,r2,r23
    5f00:	152b883a 	add	r21,r2,r20
    5f04:	00800074 	movhi	r2,1
    5f08:	1152dc17 	ldw	r5,19312(r2)
    5f0c:	9dc00215 	stw	r23,8(r19)
    5f10:	ad400054 	ori	r21,r21,1
    5f14:	a169883a 	add	r20,r20,r5
    5f18:	1512dc15 	stw	r20,19312(r2)
    5f1c:	bd400115 	stw	r21,4(r23)
    5f20:	84c0d626 	beq	r16,r19,627c <_malloc_r+0x720>
    5f24:	b0800428 	cmpgeui	r2,r22,16
    5f28:	1000d626 	beq	r2,zero,6284 <_malloc_r+0x728>
    5f2c:	80c00117 	ldw	r3,4(r16)
    5f30:	013ffe04 	movi	r4,-8
    5f34:	b0bffd04 	addi	r2,r22,-12
    5f38:	1104703a 	and	r2,r2,r4
    5f3c:	18c0004c 	andi	r3,r3,1
    5f40:	1886b03a 	or	r3,r3,r2
    5f44:	80c00115 	stw	r3,4(r16)
    5f48:	01000144 	movi	r4,5
    5f4c:	8087883a 	add	r3,r16,r2
    5f50:	19000115 	stw	r4,4(r3)
    5f54:	19000215 	stw	r4,8(r3)
    5f58:	10800428 	cmpgeui	r2,r2,16
    5f5c:	1000df1e 	bne	r2,zero,62dc <_malloc_r+0x780>
    5f60:	bd400117 	ldw	r21,4(r23)
    5f64:	b821883a 	mov	r16,r23
    5f68:	00800074 	movhi	r2,1
    5f6c:	1092d017 	ldw	r2,19264(r2)
    5f70:	1500022e 	bgeu	r2,r20,5f7c <_malloc_r+0x420>
    5f74:	00800074 	movhi	r2,1
    5f78:	1512d015 	stw	r20,19264(r2)
    5f7c:	00800074 	movhi	r2,1
    5f80:	1092cf17 	ldw	r2,19260(r2)
    5f84:	15006a2e 	bgeu	r2,r20,6130 <_malloc_r+0x5d4>
    5f88:	00800074 	movhi	r2,1
    5f8c:	1512cf15 	stw	r20,19260(r2)
    5f90:	00006706 	br	6130 <_malloc_r+0x5d4>
    5f94:	88c00054 	ori	r3,r17,1
    5f98:	80c00115 	stw	r3,4(r16)
    5f9c:	8463883a 	add	r17,r16,r17
    5fa0:	10800054 	ori	r2,r2,1
    5fa4:	9c400215 	stw	r17,8(r19)
    5fa8:	88800115 	stw	r2,4(r17)
    5fac:	9009883a 	mov	r4,r18
    5fb0:	000e2b00 	call	e2b0 <__malloc_unlock>
    5fb4:	80800204 	addi	r2,r16,8
    5fb8:	003f7e06 	br	5db4 <_malloc_r+0x258>
    5fbc:	81000317 	ldw	r4,12(r16)
    5fc0:	003f0506 	br	5bd8 <_malloc_r+0x7c>
    5fc4:	1006d27a 	srli	r3,r2,9
    5fc8:	19000168 	cmpgeui	r4,r3,5
    5fcc:	20005026 	beq	r4,zero,6110 <_malloc_r+0x5b4>
    5fd0:	19000568 	cmpgeui	r4,r3,21
    5fd4:	20008c1e 	bne	r4,zero,6208 <_malloc_r+0x6ac>
    5fd8:	19401704 	addi	r5,r3,92
    5fdc:	280a90fa 	slli	r5,r5,3
    5fe0:	190016c4 	addi	r4,r3,91
    5fe4:	994b883a 	add	r5,r19,r5
    5fe8:	28c00017 	ldw	r3,0(r5)
    5fec:	297ffe04 	addi	r5,r5,-8
    5ff0:	28c07426 	beq	r5,r3,61c4 <_malloc_r+0x668>
    5ff4:	01bfff04 	movi	r6,-4
    5ff8:	19000117 	ldw	r4,4(r3)
    5ffc:	2188703a 	and	r4,r4,r6
    6000:	1100022e 	bgeu	r2,r4,600c <_malloc_r+0x4b0>
    6004:	18c00217 	ldw	r3,8(r3)
    6008:	28fffb1e 	bne	r5,r3,5ff8 <_malloc_r+0x49c>
    600c:	19400317 	ldw	r5,12(r3)
    6010:	98800117 	ldw	r2,4(r19)
    6014:	81400315 	stw	r5,12(r16)
    6018:	80c00215 	stw	r3,8(r16)
    601c:	2c000215 	stw	r16,8(r5)
    6020:	1c000315 	stw	r16,12(r3)
    6024:	003f3606 	br	5d00 <_malloc_r+0x1a4>
    6028:	10c00568 	cmpgeui	r3,r2,21
    602c:	18004a26 	beq	r3,zero,6158 <_malloc_r+0x5fc>
    6030:	10c01568 	cmpgeui	r3,r2,85
    6034:	18007b1e 	bne	r3,zero,6224 <_malloc_r+0x6c8>
    6038:	8804d33a 	srli	r2,r17,12
    603c:	11c01bc4 	addi	r7,r2,111
    6040:	380890fa 	slli	r4,r7,3
    6044:	12001b84 	addi	r8,r2,110
    6048:	003efd06 	br	5c40 <_malloc_r+0xe4>
    604c:	63000044 	addi	r12,r12,1
    6050:	608000cc 	andi	r2,r12,3
    6054:	42000204 	addi	r8,r8,8
    6058:	103f3e1e 	bne	r2,zero,5d54 <_malloc_r+0x1f8>
    605c:	00004506 	br	6174 <_malloc_r+0x618>
    6060:	81000217 	ldw	r4,8(r16)
    6064:	89800054 	ori	r6,r17,1
    6068:	81800115 	stw	r6,4(r16)
    606c:	20800315 	stw	r2,12(r4)
    6070:	11000215 	stw	r4,8(r2)
    6074:	8463883a 	add	r17,r16,r17
    6078:	9c400515 	stw	r17,20(r19)
    607c:	9c400415 	stw	r17,16(r19)
    6080:	28800054 	ori	r2,r5,1
    6084:	88800115 	stw	r2,4(r17)
    6088:	8a400315 	stw	r9,12(r17)
    608c:	8a400215 	stw	r9,8(r17)
    6090:	80c7883a 	add	r3,r16,r3
    6094:	19400015 	stw	r5,0(r3)
    6098:	9009883a 	mov	r4,r18
    609c:	000e2b00 	call	e2b0 <__malloc_unlock>
    60a0:	80800204 	addi	r2,r16,8
    60a4:	003f4306 	br	5db4 <_malloc_r+0x258>
    60a8:	880ed0fa 	srli	r7,r17,3
    60ac:	88800204 	addi	r2,r17,8
    60b0:	003ebf06 	br	5bb0 <_malloc_r+0x54>
    60b4:	8085883a 	add	r2,r16,r2
    60b8:	10c00117 	ldw	r3,4(r2)
    60bc:	9009883a 	mov	r4,r18
    60c0:	18c00054 	ori	r3,r3,1
    60c4:	10c00115 	stw	r3,4(r2)
    60c8:	000e2b00 	call	e2b0 <__malloc_unlock>
    60cc:	80800204 	addi	r2,r16,8
    60d0:	003f3806 	br	5db4 <_malloc_r+0x258>
    60d4:	89000054 	ori	r4,r17,1
    60d8:	81000115 	stw	r4,4(r16)
    60dc:	8463883a 	add	r17,r16,r17
    60e0:	9c400515 	stw	r17,20(r19)
    60e4:	9c400415 	stw	r17,16(r19)
    60e8:	19000054 	ori	r4,r3,1
    60ec:	89000115 	stw	r4,4(r17)
    60f0:	8085883a 	add	r2,r16,r2
    60f4:	8a400315 	stw	r9,12(r17)
    60f8:	8a400215 	stw	r9,8(r17)
    60fc:	10c00015 	stw	r3,0(r2)
    6100:	9009883a 	mov	r4,r18
    6104:	000e2b00 	call	e2b0 <__malloc_unlock>
    6108:	80800204 	addi	r2,r16,8
    610c:	003f2906 	br	5db4 <_malloc_r+0x258>
    6110:	1006d1ba 	srli	r3,r2,6
    6114:	19400e44 	addi	r5,r3,57
    6118:	280a90fa 	slli	r5,r5,3
    611c:	19000e04 	addi	r4,r3,56
    6120:	003fb006 	br	5fe4 <_malloc_r+0x488>
    6124:	84c04626 	beq	r16,r19,6240 <_malloc_r+0x6e4>
    6128:	9c000217 	ldw	r16,8(r19)
    612c:	85400117 	ldw	r21,4(r16)
    6130:	00bfff04 	movi	r2,-4
    6134:	a8aa703a 	and	r21,r21,r2
    6138:	ac45c83a 	sub	r2,r21,r17
    613c:	ac400236 	bltu	r21,r17,6148 <_malloc_r+0x5ec>
    6140:	10c00408 	cmpgei	r3,r2,16
    6144:	183f931e 	bne	r3,zero,5f94 <_malloc_r+0x438>
    6148:	9009883a 	mov	r4,r18
    614c:	000e2b00 	call	e2b0 <__malloc_unlock>
    6150:	0005883a 	mov	r2,zero
    6154:	003f1706 	br	5db4 <_malloc_r+0x258>
    6158:	11c01704 	addi	r7,r2,92
    615c:	380890fa 	slli	r4,r7,3
    6160:	120016c4 	addi	r8,r2,91
    6164:	003eb606 	br	5c40 <_malloc_r+0xe4>
    6168:	58800217 	ldw	r2,8(r11)
    616c:	39ffffc4 	addi	r7,r7,-1
    6170:	12c0701e 	bne	r2,r11,6334 <_malloc_r+0x7d8>
    6174:	388000cc 	andi	r2,r7,3
    6178:	5afffe04 	addi	r11,r11,-8
    617c:	103ffa1e 	bne	r2,zero,6168 <_malloc_r+0x60c>
    6180:	98c00117 	ldw	r3,4(r19)
    6184:	0104303a 	nor	r2,zero,r4
    6188:	10c4703a 	and	r2,r2,r3
    618c:	98800115 	stw	r2,4(r19)
    6190:	2109883a 	add	r4,r4,r4
    6194:	113f2336 	bltu	r2,r4,5e24 <_malloc_r+0x2c8>
    6198:	203f2226 	beq	r4,zero,5e24 <_malloc_r+0x2c8>
    619c:	2086703a 	and	r3,r4,r2
    61a0:	1800041e 	bne	r3,zero,61b4 <_malloc_r+0x658>
    61a4:	2109883a 	add	r4,r4,r4
    61a8:	2086703a 	and	r3,r4,r2
    61ac:	63000104 	addi	r12,r12,4
    61b0:	183ffc26 	beq	r3,zero,61a4 <_malloc_r+0x648>
    61b4:	600f883a 	mov	r7,r12
    61b8:	003ee206 	br	5d44 <_malloc_r+0x1e8>
    61bc:	ad400404 	addi	r21,r21,16
    61c0:	003f2b06 	br	5e70 <_malloc_r+0x314>
    61c4:	2009d0ba 	srai	r4,r4,2
    61c8:	00800044 	movi	r2,1
    61cc:	99800117 	ldw	r6,4(r19)
    61d0:	1104983a 	sll	r2,r2,r4
    61d4:	1184b03a 	or	r2,r2,r6
    61d8:	98800115 	stw	r2,4(r19)
    61dc:	003f8d06 	br	6014 <_malloc_r+0x4b8>
    61e0:	bd69883a 	add	r20,r23,r21
    61e4:	0529c83a 	sub	r20,zero,r20
    61e8:	a503ffcc 	andi	r20,r20,4095
    61ec:	a00b883a 	mov	r5,r20
    61f0:	9009883a 	mov	r4,r18
    61f4:	0007e540 	call	7e54 <_sbrk_r>
    61f8:	10ffffe0 	cmpeqi	r3,r2,-1
    61fc:	183f3f26 	beq	r3,zero,5efc <_malloc_r+0x3a0>
    6200:	0029883a 	mov	r20,zero
    6204:	003f3f06 	br	5f04 <_malloc_r+0x3a8>
    6208:	19001568 	cmpgeui	r4,r3,85
    620c:	2000201e 	bne	r4,zero,6290 <_malloc_r+0x734>
    6210:	1006d33a 	srli	r3,r2,12
    6214:	19401bc4 	addi	r5,r3,111
    6218:	280a90fa 	slli	r5,r5,3
    621c:	19001b84 	addi	r4,r3,110
    6220:	003f7006 	br	5fe4 <_malloc_r+0x488>
    6224:	10c05568 	cmpgeui	r3,r2,341
    6228:	1800201e 	bne	r3,zero,62ac <_malloc_r+0x750>
    622c:	8804d3fa 	srli	r2,r17,15
    6230:	11c01e04 	addi	r7,r2,120
    6234:	380890fa 	slli	r4,r7,3
    6238:	12001dc4 	addi	r8,r2,119
    623c:	003e8006 	br	5c40 <_malloc_r+0xe4>
    6240:	00800074 	movhi	r2,1
    6244:	10d2dc17 	ldw	r3,19312(r2)
    6248:	a8c7883a 	add	r3,r21,r3
    624c:	10d2dc15 	stw	r3,19312(r2)
    6250:	003f1406 	br	5ea4 <_malloc_r+0x348>
    6254:	e083ffcc 	andi	r2,fp,4095
    6258:	103f121e 	bne	r2,zero,5ea4 <_malloc_r+0x348>
    625c:	9c000217 	ldw	r16,8(r19)
    6260:	b56b883a 	add	r21,r22,r21
    6264:	ad400054 	ori	r21,r21,1
    6268:	85400115 	stw	r21,4(r16)
    626c:	003f3e06 	br	5f68 <_malloc_r+0x40c>
    6270:	00800074 	movhi	r2,1
    6274:	15cb9f15 	stw	r23,11900(r2)
    6278:	003f1206 	br	5ec4 <_malloc_r+0x368>
    627c:	b821883a 	mov	r16,r23
    6280:	003f3906 	br	5f68 <_malloc_r+0x40c>
    6284:	00800044 	movi	r2,1
    6288:	b8800115 	stw	r2,4(r23)
    628c:	003fae06 	br	6148 <_malloc_r+0x5ec>
    6290:	19005568 	cmpgeui	r4,r3,341
    6294:	2000191e 	bne	r4,zero,62fc <_malloc_r+0x7a0>
    6298:	1006d3fa 	srli	r3,r2,15
    629c:	19401e04 	addi	r5,r3,120
    62a0:	280a90fa 	slli	r5,r5,3
    62a4:	19001dc4 	addi	r4,r3,119
    62a8:	003f4e06 	br	5fe4 <_malloc_r+0x488>
    62ac:	10815568 	cmpgeui	r2,r2,1365
    62b0:	1000191e 	bne	r2,zero,6318 <_malloc_r+0x7bc>
    62b4:	8804d4ba 	srli	r2,r17,18
    62b8:	11c01f44 	addi	r7,r2,125
    62bc:	380890fa 	slli	r4,r7,3
    62c0:	12001f04 	addi	r8,r2,124
    62c4:	003e5e06 	br	5c40 <_malloc_r+0xe4>
    62c8:	e73ffe04 	addi	fp,fp,-8
    62cc:	af2b883a 	add	r21,r21,fp
    62d0:	adebc83a 	sub	r21,r21,r23
    62d4:	0029883a 	mov	r20,zero
    62d8:	003f0a06 	br	5f04 <_malloc_r+0x3a8>
    62dc:	81400204 	addi	r5,r16,8
    62e0:	9009883a 	mov	r4,r18
    62e4:	00050240 	call	5024 <_free_r>
    62e8:	9c000217 	ldw	r16,8(r19)
    62ec:	00800074 	movhi	r2,1
    62f0:	1512dc17 	ldw	r20,19312(r2)
    62f4:	85400117 	ldw	r21,4(r16)
    62f8:	003f1b06 	br	5f68 <_malloc_r+0x40c>
    62fc:	18c15568 	cmpgeui	r3,r3,1365
    6300:	1800091e 	bne	r3,zero,6328 <_malloc_r+0x7cc>
    6304:	1006d4ba 	srli	r3,r2,18
    6308:	19401f44 	addi	r5,r3,125
    630c:	280a90fa 	slli	r5,r5,3
    6310:	19001f04 	addi	r4,r3,124
    6314:	003f3306 	br	5fe4 <_malloc_r+0x488>
    6318:	0100fe04 	movi	r4,1016
    631c:	01c01fc4 	movi	r7,127
    6320:	02001f84 	movi	r8,126
    6324:	003e4606 	br	5c40 <_malloc_r+0xe4>
    6328:	0140fe04 	movi	r5,1016
    632c:	01001f84 	movi	r4,126
    6330:	003f2c06 	br	5fe4 <_malloc_r+0x488>
    6334:	98800117 	ldw	r2,4(r19)
    6338:	003f9506 	br	6190 <_malloc_r+0x634>

0000633c <memchr>:
    633c:	208000cc 	andi	r2,r4,3
    6340:	280f883a 	mov	r7,r5
    6344:	10000e26 	beq	r2,zero,6380 <memchr+0x44>
    6348:	30bfffc4 	addi	r2,r6,-1
    634c:	30001726 	beq	r6,zero,63ac <memchr+0x70>
    6350:	29803fcc 	andi	r6,r5,255
    6354:	00000606 	br	6370 <memchr+0x34>
    6358:	21000044 	addi	r4,r4,1
    635c:	20c000cc 	andi	r3,r4,3
    6360:	18000826 	beq	r3,zero,6384 <memchr+0x48>
    6364:	10bfffc4 	addi	r2,r2,-1
    6368:	10ffffe0 	cmpeqi	r3,r2,-1
    636c:	18000f1e 	bne	r3,zero,63ac <memchr+0x70>
    6370:	20c00003 	ldbu	r3,0(r4)
    6374:	19bff81e 	bne	r3,r6,6358 <memchr+0x1c>
    6378:	2005883a 	mov	r2,r4
    637c:	f800283a 	ret
    6380:	3005883a 	mov	r2,r6
    6384:	10c00128 	cmpgeui	r3,r2,4
    6388:	18000a1e 	bne	r3,zero,63b4 <memchr+0x78>
    638c:	10001e26 	beq	r2,zero,6408 <memchr+0xcc>
    6390:	2087883a 	add	r3,r4,r2
    6394:	39803fcc 	andi	r6,r7,255
    6398:	2005883a 	mov	r2,r4
    639c:	11000003 	ldbu	r4,0(r2)
    63a0:	21bff626 	beq	r4,r6,637c <memchr+0x40>
    63a4:	10800044 	addi	r2,r2,1
    63a8:	18bffc1e 	bne	r3,r2,639c <memchr+0x60>
    63ac:	0005883a 	mov	r2,zero
    63b0:	f800283a 	ret
    63b4:	29403fcc 	andi	r5,r5,255
    63b8:	280c923a 	slli	r6,r5,8
    63bc:	027fbff4 	movhi	r9,65279
    63c0:	02202074 	movhi	r8,32897
    63c4:	314ab03a 	or	r5,r6,r5
    63c8:	280c943a 	slli	r6,r5,16
    63cc:	4a7fbfc4 	addi	r9,r9,-257
    63d0:	42202004 	addi	r8,r8,-32640
    63d4:	314cb03a 	or	r6,r6,r5
    63d8:	20c00017 	ldw	r3,0(r4)
    63dc:	30c6f03a 	xor	r3,r6,r3
    63e0:	1a4b883a 	add	r5,r3,r9
    63e4:	00c6303a 	nor	r3,zero,r3
    63e8:	28c6703a 	and	r3,r5,r3
    63ec:	1a06703a 	and	r3,r3,r8
    63f0:	183fe71e 	bne	r3,zero,6390 <memchr+0x54>
    63f4:	10bfff04 	addi	r2,r2,-4
    63f8:	10c00128 	cmpgeui	r3,r2,4
    63fc:	21000104 	addi	r4,r4,4
    6400:	183ff51e 	bne	r3,zero,63d8 <memchr+0x9c>
    6404:	003fe106 	br	638c <memchr+0x50>
    6408:	f800283a 	ret

0000640c <memcpy>:
    640c:	30c00430 	cmpltui	r3,r6,16
    6410:	2005883a 	mov	r2,r4
    6414:	18002d1e 	bne	r3,zero,64cc <memcpy+0xc0>
    6418:	2906b03a 	or	r3,r5,r4
    641c:	18c000cc 	andi	r3,r3,3
    6420:	1800351e 	bne	r3,zero,64f8 <memcpy+0xec>
    6424:	32fffc04 	addi	r11,r6,-16
    6428:	5816d13a 	srli	r11,r11,4
    642c:	280f883a 	mov	r7,r5
    6430:	2007883a 	mov	r3,r4
    6434:	5ac00044 	addi	r11,r11,1
    6438:	5816913a 	slli	r11,r11,4
    643c:	22d5883a 	add	r10,r4,r11
    6440:	39000117 	ldw	r4,4(r7)
    6444:	3a400017 	ldw	r9,0(r7)
    6448:	3a000217 	ldw	r8,8(r7)
    644c:	19000115 	stw	r4,4(r3)
    6450:	39000317 	ldw	r4,12(r7)
    6454:	1a400015 	stw	r9,0(r3)
    6458:	1a000215 	stw	r8,8(r3)
    645c:	19000315 	stw	r4,12(r3)
    6460:	18c00404 	addi	r3,r3,16
    6464:	39c00404 	addi	r7,r7,16
    6468:	50fff51e 	bne	r10,r3,6440 <memcpy+0x34>
    646c:	3100030c 	andi	r4,r6,12
    6470:	2acb883a 	add	r5,r5,r11
    6474:	320003cc 	andi	r8,r6,15
    6478:	20002226 	beq	r4,zero,6504 <memcpy+0xf8>
    647c:	280f883a 	mov	r7,r5
    6480:	1813883a 	mov	r9,r3
    6484:	39c00104 	addi	r7,r7,4
    6488:	3abfff17 	ldw	r10,-4(r7)
    648c:	41c9c83a 	sub	r4,r8,r7
    6490:	2909883a 	add	r4,r5,r4
    6494:	4a800015 	stw	r10,0(r9)
    6498:	21000128 	cmpgeui	r4,r4,4
    649c:	4a400104 	addi	r9,r9,4
    64a0:	203ff81e 	bne	r4,zero,6484 <memcpy+0x78>
    64a4:	413fff04 	addi	r4,r8,-4
    64a8:	2008d0ba 	srli	r4,r4,2
    64ac:	318000cc 	andi	r6,r6,3
    64b0:	31ffffc4 	addi	r7,r6,-1
    64b4:	21000044 	addi	r4,r4,1
    64b8:	200890ba 	slli	r4,r4,2
    64bc:	1907883a 	add	r3,r3,r4
    64c0:	290b883a 	add	r5,r5,r4
    64c4:	3000041e 	bne	r6,zero,64d8 <memcpy+0xcc>
    64c8:	f800283a 	ret
    64cc:	2007883a 	mov	r3,r4
    64d0:	31ffffc4 	addi	r7,r6,-1
    64d4:	303ffc26 	beq	r6,zero,64c8 <memcpy+0xbc>
    64d8:	39c00044 	addi	r7,r7,1
    64dc:	19cf883a 	add	r7,r3,r7
    64e0:	29800003 	ldbu	r6,0(r5)
    64e4:	18c00044 	addi	r3,r3,1
    64e8:	29400044 	addi	r5,r5,1
    64ec:	19bfffc5 	stb	r6,-1(r3)
    64f0:	38fffb1e 	bne	r7,r3,64e0 <memcpy+0xd4>
    64f4:	f800283a 	ret
    64f8:	31ffffc4 	addi	r7,r6,-1
    64fc:	2007883a 	mov	r3,r4
    6500:	003ff506 	br	64d8 <memcpy+0xcc>
    6504:	400d883a 	mov	r6,r8
    6508:	003ff106 	br	64d0 <memcpy+0xc4>

0000650c <memmove>:
    650c:	2005883a 	mov	r2,r4
    6510:	29000a2e 	bgeu	r5,r4,653c <memmove+0x30>
    6514:	2989883a 	add	r4,r5,r6
    6518:	1100082e 	bgeu	r2,r4,653c <memmove+0x30>
    651c:	1187883a 	add	r3,r2,r6
    6520:	30003e26 	beq	r6,zero,661c <memmove+0x110>
    6524:	217fffc3 	ldbu	r5,-1(r4)
    6528:	18ffffc4 	addi	r3,r3,-1
    652c:	213fffc4 	addi	r4,r4,-1
    6530:	19400005 	stb	r5,0(r3)
    6534:	10fffb1e 	bne	r2,r3,6524 <memmove+0x18>
    6538:	f800283a 	ret
    653c:	30c00430 	cmpltui	r3,r6,16
    6540:	18000b26 	beq	r3,zero,6570 <memmove+0x64>
    6544:	1007883a 	mov	r3,r2
    6548:	31ffffc4 	addi	r7,r6,-1
    654c:	30003726 	beq	r6,zero,662c <memmove+0x120>
    6550:	39c00044 	addi	r7,r7,1
    6554:	29cf883a 	add	r7,r5,r7
    6558:	29800003 	ldbu	r6,0(r5)
    655c:	29400044 	addi	r5,r5,1
    6560:	18c00044 	addi	r3,r3,1
    6564:	19bfffc5 	stb	r6,-1(r3)
    6568:	29fffb1e 	bne	r5,r7,6558 <memmove+0x4c>
    656c:	f800283a 	ret
    6570:	2886b03a 	or	r3,r5,r2
    6574:	18c000cc 	andi	r3,r3,3
    6578:	1800291e 	bne	r3,zero,6620 <memmove+0x114>
    657c:	327ffc04 	addi	r9,r6,-16
    6580:	4812d13a 	srli	r9,r9,4
    6584:	280f883a 	mov	r7,r5
    6588:	1007883a 	mov	r3,r2
    658c:	4a400044 	addi	r9,r9,1
    6590:	4812913a 	slli	r9,r9,4
    6594:	1251883a 	add	r8,r2,r9
    6598:	39000017 	ldw	r4,0(r7)
    659c:	39c00404 	addi	r7,r7,16
    65a0:	18c00404 	addi	r3,r3,16
    65a4:	193ffc15 	stw	r4,-16(r3)
    65a8:	393ffd17 	ldw	r4,-12(r7)
    65ac:	193ffd15 	stw	r4,-12(r3)
    65b0:	393ffe17 	ldw	r4,-8(r7)
    65b4:	193ffe15 	stw	r4,-8(r3)
    65b8:	393fff17 	ldw	r4,-4(r7)
    65bc:	193fff15 	stw	r4,-4(r3)
    65c0:	40fff51e 	bne	r8,r3,6598 <memmove+0x8c>
    65c4:	3100030c 	andi	r4,r6,12
    65c8:	2a4b883a 	add	r5,r5,r9
    65cc:	320003cc 	andi	r8,r6,15
    65d0:	20001726 	beq	r4,zero,6630 <memmove+0x124>
    65d4:	2813883a 	mov	r9,r5
    65d8:	180f883a 	mov	r7,r3
    65dc:	4a800017 	ldw	r10,0(r9)
    65e0:	39c00104 	addi	r7,r7,4
    65e4:	41c9c83a 	sub	r4,r8,r7
    65e8:	1909883a 	add	r4,r3,r4
    65ec:	21000128 	cmpgeui	r4,r4,4
    65f0:	3abfff15 	stw	r10,-4(r7)
    65f4:	4a400104 	addi	r9,r9,4
    65f8:	203ff81e 	bne	r4,zero,65dc <memmove+0xd0>
    65fc:	413fff04 	addi	r4,r8,-4
    6600:	2008d0ba 	srli	r4,r4,2
    6604:	318000cc 	andi	r6,r6,3
    6608:	21000044 	addi	r4,r4,1
    660c:	200890ba 	slli	r4,r4,2
    6610:	1907883a 	add	r3,r3,r4
    6614:	290b883a 	add	r5,r5,r4
    6618:	003fcb06 	br	6548 <memmove+0x3c>
    661c:	f800283a 	ret
    6620:	31ffffc4 	addi	r7,r6,-1
    6624:	1007883a 	mov	r3,r2
    6628:	003fc906 	br	6550 <memmove+0x44>
    662c:	f800283a 	ret
    6630:	400d883a 	mov	r6,r8
    6634:	003fc406 	br	6548 <memmove+0x3c>

00006638 <memset>:
    6638:	20c000cc 	andi	r3,r4,3
    663c:	2005883a 	mov	r2,r4
    6640:	18003626 	beq	r3,zero,671c <memset+0xe4>
    6644:	31ffffc4 	addi	r7,r6,-1
    6648:	30003326 	beq	r6,zero,6718 <memset+0xe0>
    664c:	2811883a 	mov	r8,r5
    6650:	2007883a 	mov	r3,r4
    6654:	00000306 	br	6664 <memset+0x2c>
    6658:	39ffffc4 	addi	r7,r7,-1
    665c:	39bfffe0 	cmpeqi	r6,r7,-1
    6660:	30002d1e 	bne	r6,zero,6718 <memset+0xe0>
    6664:	18c00044 	addi	r3,r3,1
    6668:	198000cc 	andi	r6,r3,3
    666c:	1a3fffc5 	stb	r8,-1(r3)
    6670:	303ff91e 	bne	r6,zero,6658 <memset+0x20>
    6674:	39000130 	cmpltui	r4,r7,4
    6678:	2000221e 	bne	r4,zero,6704 <memset+0xcc>
    667c:	29003fcc 	andi	r4,r5,255
    6680:	200c923a 	slli	r6,r4,8
    6684:	3a000430 	cmpltui	r8,r7,16
    6688:	3108b03a 	or	r4,r6,r4
    668c:	200c943a 	slli	r6,r4,16
    6690:	310cb03a 	or	r6,r6,r4
    6694:	40000e1e 	bne	r8,zero,66d0 <memset+0x98>
    6698:	393ffc04 	addi	r4,r7,-16
    669c:	2008d13a 	srli	r4,r4,4
    66a0:	21000044 	addi	r4,r4,1
    66a4:	2008913a 	slli	r4,r4,4
    66a8:	1909883a 	add	r4,r3,r4
    66ac:	19800015 	stw	r6,0(r3)
    66b0:	19800115 	stw	r6,4(r3)
    66b4:	19800215 	stw	r6,8(r3)
    66b8:	19800315 	stw	r6,12(r3)
    66bc:	18c00404 	addi	r3,r3,16
    66c0:	20fffa1e 	bne	r4,r3,66ac <memset+0x74>
    66c4:	3900030c 	andi	r4,r7,12
    66c8:	39c003cc 	andi	r7,r7,15
    66cc:	20000d26 	beq	r4,zero,6704 <memset+0xcc>
    66d0:	1811883a 	mov	r8,r3
    66d4:	42000104 	addi	r8,r8,4
    66d8:	3a09c83a 	sub	r4,r7,r8
    66dc:	1909883a 	add	r4,r3,r4
    66e0:	21000128 	cmpgeui	r4,r4,4
    66e4:	41bfff15 	stw	r6,-4(r8)
    66e8:	203ffa1e 	bne	r4,zero,66d4 <memset+0x9c>
    66ec:	393fff04 	addi	r4,r7,-4
    66f0:	2008d0ba 	srli	r4,r4,2
    66f4:	39c000cc 	andi	r7,r7,3
    66f8:	21000044 	addi	r4,r4,1
    66fc:	200890ba 	slli	r4,r4,2
    6700:	1907883a 	add	r3,r3,r4
    6704:	38000426 	beq	r7,zero,6718 <memset+0xe0>
    6708:	19cf883a 	add	r7,r3,r7
    670c:	18c00044 	addi	r3,r3,1
    6710:	197fffc5 	stb	r5,-1(r3)
    6714:	38fffd1e 	bne	r7,r3,670c <memset+0xd4>
    6718:	f800283a 	ret
    671c:	2007883a 	mov	r3,r4
    6720:	300f883a 	mov	r7,r6
    6724:	003fd306 	br	6674 <memset+0x3c>

00006728 <_Balloc>:
    6728:	20801317 	ldw	r2,76(r4)
    672c:	defffc04 	addi	sp,sp,-16
    6730:	dc400115 	stw	r17,4(sp)
    6734:	dc000015 	stw	r16,0(sp)
    6738:	dfc00315 	stw	ra,12(sp)
    673c:	dc800215 	stw	r18,8(sp)
    6740:	2021883a 	mov	r16,r4
    6744:	2823883a 	mov	r17,r5
    6748:	10000e26 	beq	r2,zero,6784 <_Balloc+0x5c>
    674c:	880690ba 	slli	r3,r17,2
    6750:	10c7883a 	add	r3,r2,r3
    6754:	18800017 	ldw	r2,0(r3)
    6758:	10001126 	beq	r2,zero,67a0 <_Balloc+0x78>
    675c:	11000017 	ldw	r4,0(r2)
    6760:	19000015 	stw	r4,0(r3)
    6764:	10000415 	stw	zero,16(r2)
    6768:	10000315 	stw	zero,12(r2)
    676c:	dfc00317 	ldw	ra,12(sp)
    6770:	dc800217 	ldw	r18,8(sp)
    6774:	dc400117 	ldw	r17,4(sp)
    6778:	dc000017 	ldw	r16,0(sp)
    677c:	dec00404 	addi	sp,sp,16
    6780:	f800283a 	ret
    6784:	01800844 	movi	r6,33
    6788:	01400104 	movi	r5,4
    678c:	00095680 	call	9568 <_calloc_r>
    6790:	80801315 	stw	r2,76(r16)
    6794:	103fed1e 	bne	r2,zero,674c <_Balloc+0x24>
    6798:	0005883a 	mov	r2,zero
    679c:	003ff306 	br	676c <_Balloc+0x44>
    67a0:	04800044 	movi	r18,1
    67a4:	9464983a 	sll	r18,r18,r17
    67a8:	01400044 	movi	r5,1
    67ac:	8009883a 	mov	r4,r16
    67b0:	91800144 	addi	r6,r18,5
    67b4:	300c90ba 	slli	r6,r6,2
    67b8:	00095680 	call	9568 <_calloc_r>
    67bc:	103ff626 	beq	r2,zero,6798 <_Balloc+0x70>
    67c0:	14400115 	stw	r17,4(r2)
    67c4:	14800215 	stw	r18,8(r2)
    67c8:	003fe606 	br	6764 <_Balloc+0x3c>

000067cc <_Bfree>:
    67cc:	28000726 	beq	r5,zero,67ec <_Bfree+0x20>
    67d0:	28c00117 	ldw	r3,4(r5)
    67d4:	20801317 	ldw	r2,76(r4)
    67d8:	180690ba 	slli	r3,r3,2
    67dc:	10c5883a 	add	r2,r2,r3
    67e0:	10c00017 	ldw	r3,0(r2)
    67e4:	28c00015 	stw	r3,0(r5)
    67e8:	11400015 	stw	r5,0(r2)
    67ec:	f800283a 	ret

000067f0 <__multadd>:
    67f0:	defff704 	addi	sp,sp,-36
    67f4:	dc800215 	stw	r18,8(sp)
    67f8:	2c800417 	ldw	r18,16(r5)
    67fc:	ddc00715 	stw	r23,28(sp)
    6800:	dd800615 	stw	r22,24(sp)
    6804:	dd400515 	stw	r21,20(sp)
    6808:	dd000415 	stw	r20,16(sp)
    680c:	dcc00315 	stw	r19,12(sp)
    6810:	dc400115 	stw	r17,4(sp)
    6814:	dfc00815 	stw	ra,32(sp)
    6818:	dc000015 	stw	r16,0(sp)
    681c:	2827883a 	mov	r19,r5
    6820:	2029883a 	mov	r20,r4
    6824:	302b883a 	mov	r21,r6
    6828:	3823883a 	mov	r17,r7
    682c:	2d800504 	addi	r22,r5,20
    6830:	002f883a 	mov	r23,zero
    6834:	b4000017 	ldw	r16,0(r22)
    6838:	a80b883a 	mov	r5,r21
    683c:	b5800104 	addi	r22,r22,4
    6840:	813fffcc 	andi	r4,r16,65535
    6844:	000b3d00 	call	b3d0 <__mulsi3>
    6848:	8008d43a 	srli	r4,r16,16
    684c:	a80b883a 	mov	r5,r21
    6850:	1461883a 	add	r16,r2,r17
    6854:	000b3d00 	call	b3d0 <__mulsi3>
    6858:	800ed43a 	srli	r7,r16,16
    685c:	843fffcc 	andi	r16,r16,65535
    6860:	bdc00044 	addi	r23,r23,1
    6864:	11c5883a 	add	r2,r2,r7
    6868:	1006943a 	slli	r3,r2,16
    686c:	1022d43a 	srli	r17,r2,16
    6870:	1c21883a 	add	r16,r3,r16
    6874:	b43fff15 	stw	r16,-4(r22)
    6878:	bcbfee16 	blt	r23,r18,6834 <__multadd+0x44>
    687c:	88000826 	beq	r17,zero,68a0 <__multadd+0xb0>
    6880:	98800217 	ldw	r2,8(r19)
    6884:	9080120e 	bge	r18,r2,68d0 <__multadd+0xe0>
    6888:	90800144 	addi	r2,r18,5
    688c:	100490ba 	slli	r2,r2,2
    6890:	94800044 	addi	r18,r18,1
    6894:	9885883a 	add	r2,r19,r2
    6898:	14400015 	stw	r17,0(r2)
    689c:	9c800415 	stw	r18,16(r19)
    68a0:	9805883a 	mov	r2,r19
    68a4:	dfc00817 	ldw	ra,32(sp)
    68a8:	ddc00717 	ldw	r23,28(sp)
    68ac:	dd800617 	ldw	r22,24(sp)
    68b0:	dd400517 	ldw	r21,20(sp)
    68b4:	dd000417 	ldw	r20,16(sp)
    68b8:	dcc00317 	ldw	r19,12(sp)
    68bc:	dc800217 	ldw	r18,8(sp)
    68c0:	dc400117 	ldw	r17,4(sp)
    68c4:	dc000017 	ldw	r16,0(sp)
    68c8:	dec00904 	addi	sp,sp,36
    68cc:	f800283a 	ret
    68d0:	99400117 	ldw	r5,4(r19)
    68d4:	a009883a 	mov	r4,r20
    68d8:	29400044 	addi	r5,r5,1
    68dc:	00067280 	call	6728 <_Balloc>
    68e0:	1021883a 	mov	r16,r2
    68e4:	10001226 	beq	r2,zero,6930 <__multadd+0x140>
    68e8:	99800417 	ldw	r6,16(r19)
    68ec:	99400304 	addi	r5,r19,12
    68f0:	11000304 	addi	r4,r2,12
    68f4:	31800084 	addi	r6,r6,2
    68f8:	300c90ba 	slli	r6,r6,2
    68fc:	000640c0 	call	640c <memcpy>
    6900:	98000926 	beq	r19,zero,6928 <__multadd+0x138>
    6904:	98c00117 	ldw	r3,4(r19)
    6908:	a0801317 	ldw	r2,76(r20)
    690c:	180690ba 	slli	r3,r3,2
    6910:	10c5883a 	add	r2,r2,r3
    6914:	10c00017 	ldw	r3,0(r2)
    6918:	98c00015 	stw	r3,0(r19)
    691c:	14c00015 	stw	r19,0(r2)
    6920:	8027883a 	mov	r19,r16
    6924:	003fd806 	br	6888 <__multadd+0x98>
    6928:	8027883a 	mov	r19,r16
    692c:	003fd606 	br	6888 <__multadd+0x98>
    6930:	01c00074 	movhi	r7,1
    6934:	01000074 	movhi	r4,1
    6938:	39c33c04 	addi	r7,r7,3312
    693c:	000d883a 	mov	r6,zero
    6940:	01402d44 	movi	r5,181
    6944:	21035104 	addi	r4,r4,3396
    6948:	00094f00 	call	94f0 <__assert_func>

0000694c <__s2b>:
    694c:	defff904 	addi	sp,sp,-28
    6950:	dc800215 	stw	r18,8(sp)
    6954:	dc000015 	stw	r16,0(sp)
    6958:	2025883a 	mov	r18,r4
    695c:	2821883a 	mov	r16,r5
    6960:	39000204 	addi	r4,r7,8
    6964:	01400244 	movi	r5,9
    6968:	dcc00315 	stw	r19,12(sp)
    696c:	dc400115 	stw	r17,4(sp)
    6970:	dfc00615 	stw	ra,24(sp)
    6974:	3823883a 	mov	r17,r7
    6978:	dd400515 	stw	r21,20(sp)
    697c:	dd000415 	stw	r20,16(sp)
    6980:	3027883a 	mov	r19,r6
    6984:	000b21c0 	call	b21c <__divsi3>
    6988:	88c00290 	cmplti	r3,r17,10
    698c:	1800341e 	bne	r3,zero,6a60 <__s2b+0x114>
    6990:	00c00044 	movi	r3,1
    6994:	000b883a 	mov	r5,zero
    6998:	18c7883a 	add	r3,r3,r3
    699c:	29400044 	addi	r5,r5,1
    69a0:	18bffd16 	blt	r3,r2,6998 <__s2b+0x4c>
    69a4:	9009883a 	mov	r4,r18
    69a8:	00067280 	call	6728 <_Balloc>
    69ac:	100b883a 	mov	r5,r2
    69b0:	10002d26 	beq	r2,zero,6a68 <__s2b+0x11c>
    69b4:	d8800717 	ldw	r2,28(sp)
    69b8:	28800515 	stw	r2,20(r5)
    69bc:	00800044 	movi	r2,1
    69c0:	28800415 	stw	r2,16(r5)
    69c4:	98800290 	cmplti	r2,r19,10
    69c8:	1000221e 	bne	r2,zero,6a54 <__s2b+0x108>
    69cc:	85400244 	addi	r21,r16,9
    69d0:	a829883a 	mov	r20,r21
    69d4:	84e1883a 	add	r16,r16,r19
    69d8:	a1c00007 	ldb	r7,0(r20)
    69dc:	01800284 	movi	r6,10
    69e0:	9009883a 	mov	r4,r18
    69e4:	39fff404 	addi	r7,r7,-48
    69e8:	00067f00 	call	67f0 <__multadd>
    69ec:	a5000044 	addi	r20,r20,1
    69f0:	100b883a 	mov	r5,r2
    69f4:	a43ff81e 	bne	r20,r16,69d8 <__s2b+0x8c>
    69f8:	9c3ffe04 	addi	r16,r19,-8
    69fc:	ac21883a 	add	r16,r21,r16
    6a00:	9c400a0e 	bge	r19,r17,6a2c <__s2b+0xe0>
    6a04:	8ce3c83a 	sub	r17,r17,r19
    6a08:	8463883a 	add	r17,r16,r17
    6a0c:	81c00007 	ldb	r7,0(r16)
    6a10:	01800284 	movi	r6,10
    6a14:	9009883a 	mov	r4,r18
    6a18:	39fff404 	addi	r7,r7,-48
    6a1c:	00067f00 	call	67f0 <__multadd>
    6a20:	84000044 	addi	r16,r16,1
    6a24:	100b883a 	mov	r5,r2
    6a28:	8c3ff81e 	bne	r17,r16,6a0c <__s2b+0xc0>
    6a2c:	2805883a 	mov	r2,r5
    6a30:	dfc00617 	ldw	ra,24(sp)
    6a34:	dd400517 	ldw	r21,20(sp)
    6a38:	dd000417 	ldw	r20,16(sp)
    6a3c:	dcc00317 	ldw	r19,12(sp)
    6a40:	dc800217 	ldw	r18,8(sp)
    6a44:	dc400117 	ldw	r17,4(sp)
    6a48:	dc000017 	ldw	r16,0(sp)
    6a4c:	dec00704 	addi	sp,sp,28
    6a50:	f800283a 	ret
    6a54:	84000284 	addi	r16,r16,10
    6a58:	04c00244 	movi	r19,9
    6a5c:	003fe806 	br	6a00 <__s2b+0xb4>
    6a60:	000b883a 	mov	r5,zero
    6a64:	003fcf06 	br	69a4 <__s2b+0x58>
    6a68:	01c00074 	movhi	r7,1
    6a6c:	01000074 	movhi	r4,1
    6a70:	39c33c04 	addi	r7,r7,3312
    6a74:	000d883a 	mov	r6,zero
    6a78:	01403384 	movi	r5,206
    6a7c:	21035104 	addi	r4,r4,3396
    6a80:	00094f00 	call	94f0 <__assert_func>

00006a84 <__hi0bits>:
    6a84:	20bfffec 	andhi	r2,r4,65535
    6a88:	1000131e 	bne	r2,zero,6ad8 <__hi0bits+0x54>
    6a8c:	2008943a 	slli	r4,r4,16
    6a90:	00800404 	movi	r2,16
    6a94:	20ffc02c 	andhi	r3,r4,65280
    6a98:	1800021e 	bne	r3,zero,6aa4 <__hi0bits+0x20>
    6a9c:	2008923a 	slli	r4,r4,8
    6aa0:	10800204 	addi	r2,r2,8
    6aa4:	20fc002c 	andhi	r3,r4,61440
    6aa8:	1800021e 	bne	r3,zero,6ab4 <__hi0bits+0x30>
    6aac:	2008913a 	slli	r4,r4,4
    6ab0:	10800104 	addi	r2,r2,4
    6ab4:	20f0002c 	andhi	r3,r4,49152
    6ab8:	1800021e 	bne	r3,zero,6ac4 <__hi0bits+0x40>
    6abc:	200890ba 	slli	r4,r4,2
    6ac0:	10800084 	addi	r2,r2,2
    6ac4:	20000316 	blt	r4,zero,6ad4 <__hi0bits+0x50>
    6ac8:	2110002c 	andhi	r4,r4,16384
    6acc:	10800044 	addi	r2,r2,1
    6ad0:	20000326 	beq	r4,zero,6ae0 <__hi0bits+0x5c>
    6ad4:	f800283a 	ret
    6ad8:	0005883a 	mov	r2,zero
    6adc:	003fed06 	br	6a94 <__hi0bits+0x10>
    6ae0:	00800804 	movi	r2,32
    6ae4:	f800283a 	ret

00006ae8 <__lo0bits>:
    6ae8:	20c00017 	ldw	r3,0(r4)
    6aec:	188001cc 	andi	r2,r3,7
    6af0:	10000826 	beq	r2,zero,6b14 <__lo0bits+0x2c>
    6af4:	1880004c 	andi	r2,r3,1
    6af8:	10001f1e 	bne	r2,zero,6b78 <__lo0bits+0x90>
    6afc:	1880008c 	andi	r2,r3,2
    6b00:	10002126 	beq	r2,zero,6b88 <__lo0bits+0xa0>
    6b04:	1806d07a 	srli	r3,r3,1
    6b08:	00800044 	movi	r2,1
    6b0c:	20c00015 	stw	r3,0(r4)
    6b10:	f800283a 	ret
    6b14:	18bfffcc 	andi	r2,r3,65535
    6b18:	10001426 	beq	r2,zero,6b6c <__lo0bits+0x84>
    6b1c:	0005883a 	mov	r2,zero
    6b20:	19403fcc 	andi	r5,r3,255
    6b24:	2800021e 	bne	r5,zero,6b30 <__lo0bits+0x48>
    6b28:	1806d23a 	srli	r3,r3,8
    6b2c:	10800204 	addi	r2,r2,8
    6b30:	194003cc 	andi	r5,r3,15
    6b34:	2800021e 	bne	r5,zero,6b40 <__lo0bits+0x58>
    6b38:	1806d13a 	srli	r3,r3,4
    6b3c:	10800104 	addi	r2,r2,4
    6b40:	194000cc 	andi	r5,r3,3
    6b44:	2800021e 	bne	r5,zero,6b50 <__lo0bits+0x68>
    6b48:	1806d0ba 	srli	r3,r3,2
    6b4c:	10800084 	addi	r2,r2,2
    6b50:	1940004c 	andi	r5,r3,1
    6b54:	2800031e 	bne	r5,zero,6b64 <__lo0bits+0x7c>
    6b58:	1806d07a 	srli	r3,r3,1
    6b5c:	10800044 	addi	r2,r2,1
    6b60:	18000726 	beq	r3,zero,6b80 <__lo0bits+0x98>
    6b64:	20c00015 	stw	r3,0(r4)
    6b68:	f800283a 	ret
    6b6c:	1806d43a 	srli	r3,r3,16
    6b70:	00800404 	movi	r2,16
    6b74:	003fea06 	br	6b20 <__lo0bits+0x38>
    6b78:	0005883a 	mov	r2,zero
    6b7c:	f800283a 	ret
    6b80:	00800804 	movi	r2,32
    6b84:	f800283a 	ret
    6b88:	1806d0ba 	srli	r3,r3,2
    6b8c:	00800084 	movi	r2,2
    6b90:	20c00015 	stw	r3,0(r4)
    6b94:	f800283a 	ret

00006b98 <__i2b>:
    6b98:	20c01317 	ldw	r3,76(r4)
    6b9c:	defffd04 	addi	sp,sp,-12
    6ba0:	dc400115 	stw	r17,4(sp)
    6ba4:	dc000015 	stw	r16,0(sp)
    6ba8:	dfc00215 	stw	ra,8(sp)
    6bac:	2021883a 	mov	r16,r4
    6bb0:	2823883a 	mov	r17,r5
    6bb4:	18000d26 	beq	r3,zero,6bec <__i2b+0x54>
    6bb8:	18800117 	ldw	r2,4(r3)
    6bbc:	10001826 	beq	r2,zero,6c20 <__i2b+0x88>
    6bc0:	11000017 	ldw	r4,0(r2)
    6bc4:	19000115 	stw	r4,4(r3)
    6bc8:	00c00044 	movi	r3,1
    6bcc:	10000315 	stw	zero,12(r2)
    6bd0:	14400515 	stw	r17,20(r2)
    6bd4:	10c00415 	stw	r3,16(r2)
    6bd8:	dfc00217 	ldw	ra,8(sp)
    6bdc:	dc400117 	ldw	r17,4(sp)
    6be0:	dc000017 	ldw	r16,0(sp)
    6be4:	dec00304 	addi	sp,sp,12
    6be8:	f800283a 	ret
    6bec:	01800844 	movi	r6,33
    6bf0:	01400104 	movi	r5,4
    6bf4:	00095680 	call	9568 <_calloc_r>
    6bf8:	80801315 	stw	r2,76(r16)
    6bfc:	1007883a 	mov	r3,r2
    6c00:	103fed1e 	bne	r2,zero,6bb8 <__i2b+0x20>
    6c04:	01c00074 	movhi	r7,1
    6c08:	01000074 	movhi	r4,1
    6c0c:	39c33c04 	addi	r7,r7,3312
    6c10:	000d883a 	mov	r6,zero
    6c14:	01405004 	movi	r5,320
    6c18:	21035104 	addi	r4,r4,3396
    6c1c:	00094f00 	call	94f0 <__assert_func>
    6c20:	01800704 	movi	r6,28
    6c24:	01400044 	movi	r5,1
    6c28:	8009883a 	mov	r4,r16
    6c2c:	00095680 	call	9568 <_calloc_r>
    6c30:	103ff426 	beq	r2,zero,6c04 <__i2b+0x6c>
    6c34:	00c00044 	movi	r3,1
    6c38:	10c00115 	stw	r3,4(r2)
    6c3c:	00c00084 	movi	r3,2
    6c40:	10c00215 	stw	r3,8(r2)
    6c44:	003fe006 	br	6bc8 <__i2b+0x30>

00006c48 <__multiply>:
    6c48:	defff004 	addi	sp,sp,-64
    6c4c:	dd800c15 	stw	r22,48(sp)
    6c50:	dc400715 	stw	r17,28(sp)
    6c54:	2d800417 	ldw	r22,16(r5)
    6c58:	34400417 	ldw	r17,16(r6)
    6c5c:	dc800815 	stw	r18,32(sp)
    6c60:	dc000615 	stw	r16,24(sp)
    6c64:	dfc00f15 	stw	ra,60(sp)
    6c68:	df000e15 	stw	fp,56(sp)
    6c6c:	ddc00d15 	stw	r23,52(sp)
    6c70:	dd400b15 	stw	r21,44(sp)
    6c74:	dd000a15 	stw	r20,40(sp)
    6c78:	dcc00915 	stw	r19,36(sp)
    6c7c:	2825883a 	mov	r18,r5
    6c80:	3021883a 	mov	r16,r6
    6c84:	b4400516 	blt	r22,r17,6c9c <__multiply+0x54>
    6c88:	8807883a 	mov	r3,r17
    6c8c:	2821883a 	mov	r16,r5
    6c90:	b023883a 	mov	r17,r22
    6c94:	3025883a 	mov	r18,r6
    6c98:	182d883a 	mov	r22,r3
    6c9c:	80800217 	ldw	r2,8(r16)
    6ca0:	8d87883a 	add	r3,r17,r22
    6ca4:	d8c00015 	stw	r3,0(sp)
    6ca8:	81400117 	ldw	r5,4(r16)
    6cac:	10c0010e 	bge	r2,r3,6cb4 <__multiply+0x6c>
    6cb0:	29400044 	addi	r5,r5,1
    6cb4:	00067280 	call	6728 <_Balloc>
    6cb8:	d8800515 	stw	r2,20(sp)
    6cbc:	10008c26 	beq	r2,zero,6ef0 <__multiply+0x2a8>
    6cc0:	d8800017 	ldw	r2,0(sp)
    6cc4:	102690ba 	slli	r19,r2,2
    6cc8:	d8800517 	ldw	r2,20(sp)
    6ccc:	15000504 	addi	r20,r2,20
    6cd0:	a4c5883a 	add	r2,r20,r19
    6cd4:	d8800115 	stw	r2,4(sp)
    6cd8:	a0800a2e 	bgeu	r20,r2,6d04 <__multiply+0xbc>
    6cdc:	d8800117 	ldw	r2,4(sp)
    6ce0:	d8c00517 	ldw	r3,20(sp)
    6ce4:	000b883a 	mov	r5,zero
    6ce8:	a009883a 	mov	r4,r20
    6cec:	10cdc83a 	sub	r6,r2,r3
    6cf0:	31bffac4 	addi	r6,r6,-21
    6cf4:	300cd0ba 	srli	r6,r6,2
    6cf8:	31800044 	addi	r6,r6,1
    6cfc:	300c90ba 	slli	r6,r6,2
    6d00:	00066380 	call	6638 <memset>
    6d04:	b02c90ba 	slli	r22,r22,2
    6d08:	882290ba 	slli	r17,r17,2
    6d0c:	94800504 	addi	r18,r18,20
    6d10:	80800504 	addi	r2,r16,20
    6d14:	9587883a 	add	r3,r18,r22
    6d18:	d8800315 	stw	r2,12(sp)
    6d1c:	d8c00215 	stw	r3,8(sp)
    6d20:	1463883a 	add	r17,r2,r17
    6d24:	90c0542e 	bgeu	r18,r3,6e78 <__multiply+0x230>
    6d28:	80800544 	addi	r2,r16,21
    6d2c:	88806d36 	bltu	r17,r2,6ee4 <__multiply+0x29c>
    6d30:	8c05c83a 	sub	r2,r17,r16
    6d34:	10bffac4 	addi	r2,r2,-21
    6d38:	1004d0ba 	srli	r2,r2,2
    6d3c:	10800044 	addi	r2,r2,1
    6d40:	100490ba 	slli	r2,r2,2
    6d44:	d8800415 	stw	r2,16(sp)
    6d48:	00000606 	br	6d64 <__multiply+0x11c>
    6d4c:	102ad43a 	srli	r21,r2,16
    6d50:	a800271e 	bne	r21,zero,6df0 <__multiply+0x1a8>
    6d54:	d8800217 	ldw	r2,8(sp)
    6d58:	94800104 	addi	r18,r18,4
    6d5c:	a5000104 	addi	r20,r20,4
    6d60:	9080452e 	bgeu	r18,r2,6e78 <__multiply+0x230>
    6d64:	90800017 	ldw	r2,0(r18)
    6d68:	15ffffcc 	andi	r23,r2,65535
    6d6c:	b83ff726 	beq	r23,zero,6d4c <__multiply+0x104>
    6d70:	dd400317 	ldw	r21,12(sp)
    6d74:	a02d883a 	mov	r22,r20
    6d78:	0027883a 	mov	r19,zero
    6d7c:	af000017 	ldw	fp,0(r21)
    6d80:	b4000017 	ldw	r16,0(r22)
    6d84:	b80b883a 	mov	r5,r23
    6d88:	e13fffcc 	andi	r4,fp,65535
    6d8c:	000b3d00 	call	b3d0 <__mulsi3>
    6d90:	e008d43a 	srli	r4,fp,16
    6d94:	823fffcc 	andi	r8,r16,65535
    6d98:	1205883a 	add	r2,r2,r8
    6d9c:	b80b883a 	mov	r5,r23
    6da0:	14e7883a 	add	r19,r2,r19
    6da4:	8020d43a 	srli	r16,r16,16
    6da8:	000b3d00 	call	b3d0 <__mulsi3>
    6dac:	9808d43a 	srli	r4,r19,16
    6db0:	1405883a 	add	r2,r2,r16
    6db4:	98ffffcc 	andi	r3,r19,65535
    6db8:	1105883a 	add	r2,r2,r4
    6dbc:	1008943a 	slli	r4,r2,16
    6dc0:	b5800104 	addi	r22,r22,4
    6dc4:	ad400104 	addi	r21,r21,4
    6dc8:	20c6b03a 	or	r3,r4,r3
    6dcc:	b0ffff15 	stw	r3,-4(r22)
    6dd0:	1026d43a 	srli	r19,r2,16
    6dd4:	ac7fe936 	bltu	r21,r17,6d7c <__multiply+0x134>
    6dd8:	d8800417 	ldw	r2,16(sp)
    6ddc:	a085883a 	add	r2,r20,r2
    6de0:	14c00015 	stw	r19,0(r2)
    6de4:	90800017 	ldw	r2,0(r18)
    6de8:	102ad43a 	srli	r21,r2,16
    6dec:	a83fd926 	beq	r21,zero,6d54 <__multiply+0x10c>
    6df0:	a5c00017 	ldw	r23,0(r20)
    6df4:	dd800317 	ldw	r22,12(sp)
    6df8:	a027883a 	mov	r19,r20
    6dfc:	b821883a 	mov	r16,r23
    6e00:	0039883a 	mov	fp,zero
    6e04:	b100000b 	ldhu	r4,0(r22)
    6e08:	a80b883a 	mov	r5,r21
    6e0c:	9cc00104 	addi	r19,r19,4
    6e10:	000b3d00 	call	b3d0 <__mulsi3>
    6e14:	800cd43a 	srli	r6,r16,16
    6e18:	b8ffffcc 	andi	r3,r23,65535
    6e1c:	b5800104 	addi	r22,r22,4
    6e20:	118d883a 	add	r6,r2,r6
    6e24:	3739883a 	add	fp,r6,fp
    6e28:	e004943a 	slli	r2,fp,16
    6e2c:	9c000017 	ldw	r16,0(r19)
    6e30:	a80b883a 	mov	r5,r21
    6e34:	10c6b03a 	or	r3,r2,r3
    6e38:	98ffff15 	stw	r3,-4(r19)
    6e3c:	b13fff8b 	ldhu	r4,-2(r22)
    6e40:	000b3d00 	call	b3d0 <__mulsi3>
    6e44:	e00cd43a 	srli	r6,fp,16
    6e48:	80ffffcc 	andi	r3,r16,65535
    6e4c:	10c7883a 	add	r3,r2,r3
    6e50:	19af883a 	add	r23,r3,r6
    6e54:	b838d43a 	srli	fp,r23,16
    6e58:	b47fea36 	bltu	r22,r17,6e04 <__multiply+0x1bc>
    6e5c:	d8800417 	ldw	r2,16(sp)
    6e60:	94800104 	addi	r18,r18,4
    6e64:	a085883a 	add	r2,r20,r2
    6e68:	15c00015 	stw	r23,0(r2)
    6e6c:	d8800217 	ldw	r2,8(sp)
    6e70:	a5000104 	addi	r20,r20,4
    6e74:	90bfbb36 	bltu	r18,r2,6d64 <__multiply+0x11c>
    6e78:	d8800017 	ldw	r2,0(sp)
    6e7c:	00800516 	blt	zero,r2,6e94 <__multiply+0x24c>
    6e80:	00000906 	br	6ea8 <__multiply+0x260>
    6e84:	d8800017 	ldw	r2,0(sp)
    6e88:	10bfffc4 	addi	r2,r2,-1
    6e8c:	d8800015 	stw	r2,0(sp)
    6e90:	10000526 	beq	r2,zero,6ea8 <__multiply+0x260>
    6e94:	d8c00117 	ldw	r3,4(sp)
    6e98:	18bfff17 	ldw	r2,-4(r3)
    6e9c:	18ffff04 	addi	r3,r3,-4
    6ea0:	d8c00115 	stw	r3,4(sp)
    6ea4:	103ff726 	beq	r2,zero,6e84 <__multiply+0x23c>
    6ea8:	d8800517 	ldw	r2,20(sp)
    6eac:	d8c00017 	ldw	r3,0(sp)
    6eb0:	10c00415 	stw	r3,16(r2)
    6eb4:	dfc00f17 	ldw	ra,60(sp)
    6eb8:	df000e17 	ldw	fp,56(sp)
    6ebc:	ddc00d17 	ldw	r23,52(sp)
    6ec0:	dd800c17 	ldw	r22,48(sp)
    6ec4:	dd400b17 	ldw	r21,44(sp)
    6ec8:	dd000a17 	ldw	r20,40(sp)
    6ecc:	dcc00917 	ldw	r19,36(sp)
    6ed0:	dc800817 	ldw	r18,32(sp)
    6ed4:	dc400717 	ldw	r17,28(sp)
    6ed8:	dc000617 	ldw	r16,24(sp)
    6edc:	dec01004 	addi	sp,sp,64
    6ee0:	f800283a 	ret
    6ee4:	00800104 	movi	r2,4
    6ee8:	d8800415 	stw	r2,16(sp)
    6eec:	003f9d06 	br	6d64 <__multiply+0x11c>
    6ef0:	01c00074 	movhi	r7,1
    6ef4:	01000074 	movhi	r4,1
    6ef8:	39c33c04 	addi	r7,r7,3312
    6efc:	000d883a 	mov	r6,zero
    6f00:	01405744 	movi	r5,349
    6f04:	21035104 	addi	r4,r4,3396
    6f08:	00094f00 	call	94f0 <__assert_func>

00006f0c <__pow5mult>:
    6f0c:	defffb04 	addi	sp,sp,-20
    6f10:	dcc00315 	stw	r19,12(sp)
    6f14:	dc000015 	stw	r16,0(sp)
    6f18:	dfc00415 	stw	ra,16(sp)
    6f1c:	dc800215 	stw	r18,8(sp)
    6f20:	dc400115 	stw	r17,4(sp)
    6f24:	308000cc 	andi	r2,r6,3
    6f28:	3021883a 	mov	r16,r6
    6f2c:	2027883a 	mov	r19,r4
    6f30:	10002d1e 	bne	r2,zero,6fe8 <__pow5mult+0xdc>
    6f34:	2825883a 	mov	r18,r5
    6f38:	8021d0ba 	srai	r16,r16,2
    6f3c:	80001926 	beq	r16,zero,6fa4 <__pow5mult+0x98>
    6f40:	9c401217 	ldw	r17,72(r19)
    6f44:	8800061e 	bne	r17,zero,6f60 <__pow5mult+0x54>
    6f48:	00002f06 	br	7008 <__pow5mult+0xfc>
    6f4c:	8021d07a 	srai	r16,r16,1
    6f50:	80001426 	beq	r16,zero,6fa4 <__pow5mult+0x98>
    6f54:	88800017 	ldw	r2,0(r17)
    6f58:	10001a26 	beq	r2,zero,6fc4 <__pow5mult+0xb8>
    6f5c:	1023883a 	mov	r17,r2
    6f60:	8080004c 	andi	r2,r16,1
    6f64:	103ff926 	beq	r2,zero,6f4c <__pow5mult+0x40>
    6f68:	880d883a 	mov	r6,r17
    6f6c:	900b883a 	mov	r5,r18
    6f70:	9809883a 	mov	r4,r19
    6f74:	0006c480 	call	6c48 <__multiply>
    6f78:	90001926 	beq	r18,zero,6fe0 <__pow5mult+0xd4>
    6f7c:	91000117 	ldw	r4,4(r18)
    6f80:	98c01317 	ldw	r3,76(r19)
    6f84:	8021d07a 	srai	r16,r16,1
    6f88:	200890ba 	slli	r4,r4,2
    6f8c:	1907883a 	add	r3,r3,r4
    6f90:	19000017 	ldw	r4,0(r3)
    6f94:	91000015 	stw	r4,0(r18)
    6f98:	1c800015 	stw	r18,0(r3)
    6f9c:	1025883a 	mov	r18,r2
    6fa0:	803fec1e 	bne	r16,zero,6f54 <__pow5mult+0x48>
    6fa4:	9005883a 	mov	r2,r18
    6fa8:	dfc00417 	ldw	ra,16(sp)
    6fac:	dcc00317 	ldw	r19,12(sp)
    6fb0:	dc800217 	ldw	r18,8(sp)
    6fb4:	dc400117 	ldw	r17,4(sp)
    6fb8:	dc000017 	ldw	r16,0(sp)
    6fbc:	dec00504 	addi	sp,sp,20
    6fc0:	f800283a 	ret
    6fc4:	880d883a 	mov	r6,r17
    6fc8:	880b883a 	mov	r5,r17
    6fcc:	9809883a 	mov	r4,r19
    6fd0:	0006c480 	call	6c48 <__multiply>
    6fd4:	88800015 	stw	r2,0(r17)
    6fd8:	10000015 	stw	zero,0(r2)
    6fdc:	003fdf06 	br	6f5c <__pow5mult+0x50>
    6fe0:	1025883a 	mov	r18,r2
    6fe4:	003fd906 	br	6f4c <__pow5mult+0x40>
    6fe8:	100490ba 	slli	r2,r2,2
    6fec:	00c00074 	movhi	r3,1
    6ff0:	000f883a 	mov	r7,zero
    6ff4:	10c7883a 	add	r3,r2,r3
    6ff8:	19836017 	ldw	r6,3456(r3)
    6ffc:	00067f00 	call	67f0 <__multadd>
    7000:	1025883a 	mov	r18,r2
    7004:	003fcc06 	br	6f38 <__pow5mult+0x2c>
    7008:	01400044 	movi	r5,1
    700c:	9809883a 	mov	r4,r19
    7010:	00067280 	call	6728 <_Balloc>
    7014:	1023883a 	mov	r17,r2
    7018:	10000726 	beq	r2,zero,7038 <__pow5mult+0x12c>
    701c:	00809c44 	movi	r2,625
    7020:	88800515 	stw	r2,20(r17)
    7024:	00800044 	movi	r2,1
    7028:	88800415 	stw	r2,16(r17)
    702c:	9c401215 	stw	r17,72(r19)
    7030:	88000015 	stw	zero,0(r17)
    7034:	003fca06 	br	6f60 <__pow5mult+0x54>
    7038:	01c00074 	movhi	r7,1
    703c:	01000074 	movhi	r4,1
    7040:	39c33c04 	addi	r7,r7,3312
    7044:	000d883a 	mov	r6,zero
    7048:	01405004 	movi	r5,320
    704c:	21035104 	addi	r4,r4,3396
    7050:	00094f00 	call	94f0 <__assert_func>

00007054 <__lshift>:
    7054:	defff804 	addi	sp,sp,-32
    7058:	dd800615 	stw	r22,24(sp)
    705c:	dc000015 	stw	r16,0(sp)
    7060:	302dd17a 	srai	r22,r6,5
    7064:	2c000417 	ldw	r16,16(r5)
    7068:	28800217 	ldw	r2,8(r5)
    706c:	dd000415 	stw	r20,16(sp)
    7070:	b421883a 	add	r16,r22,r16
    7074:	dcc00315 	stw	r19,12(sp)
    7078:	dc800215 	stw	r18,8(sp)
    707c:	dc400115 	stw	r17,4(sp)
    7080:	dfc00715 	stw	ra,28(sp)
    7084:	dd400515 	stw	r21,20(sp)
    7088:	85000044 	addi	r20,r16,1
    708c:	2827883a 	mov	r19,r5
    7090:	3025883a 	mov	r18,r6
    7094:	29400117 	ldw	r5,4(r5)
    7098:	2023883a 	mov	r17,r4
    709c:	1500030e 	bge	r2,r20,70ac <__lshift+0x58>
    70a0:	1085883a 	add	r2,r2,r2
    70a4:	29400044 	addi	r5,r5,1
    70a8:	153ffd16 	blt	r2,r20,70a0 <__lshift+0x4c>
    70ac:	8809883a 	mov	r4,r17
    70b0:	00067280 	call	6728 <_Balloc>
    70b4:	102b883a 	mov	r21,r2
    70b8:	10004126 	beq	r2,zero,71c0 <__lshift+0x16c>
    70bc:	11000504 	addi	r4,r2,20
    70c0:	0580050e 	bge	zero,r22,70d8 <__lshift+0x84>
    70c4:	b02c90ba 	slli	r22,r22,2
    70c8:	000b883a 	mov	r5,zero
    70cc:	b00d883a 	mov	r6,r22
    70d0:	00066380 	call	6638 <memset>
    70d4:	1589883a 	add	r4,r2,r22
    70d8:	9a000417 	ldw	r8,16(r19)
    70dc:	98c00504 	addi	r3,r19,20
    70e0:	948007cc 	andi	r18,r18,31
    70e4:	401090ba 	slli	r8,r8,2
    70e8:	1a11883a 	add	r8,r3,r8
    70ec:	90002c26 	beq	r18,zero,71a0 <__lshift+0x14c>
    70f0:	01400804 	movi	r5,32
    70f4:	2c8bc83a 	sub	r5,r5,r18
    70f8:	2005883a 	mov	r2,r4
    70fc:	000f883a 	mov	r7,zero
    7100:	19800017 	ldw	r6,0(r3)
    7104:	10800104 	addi	r2,r2,4
    7108:	18c00104 	addi	r3,r3,4
    710c:	348c983a 	sll	r6,r6,r18
    7110:	31ccb03a 	or	r6,r6,r7
    7114:	11bfff15 	stw	r6,-4(r2)
    7118:	19bfff17 	ldw	r6,-4(r3)
    711c:	314ed83a 	srl	r7,r6,r5
    7120:	1a3ff736 	bltu	r3,r8,7100 <__lshift+0xac>
    7124:	98800544 	addi	r2,r19,21
    7128:	40802336 	bltu	r8,r2,71b8 <__lshift+0x164>
    712c:	44c7c83a 	sub	r3,r8,r19
    7130:	18fffac4 	addi	r3,r3,-21
    7134:	1806d0ba 	srli	r3,r3,2
    7138:	18c00044 	addi	r3,r3,1
    713c:	180690ba 	slli	r3,r3,2
    7140:	20c9883a 	add	r4,r4,r3
    7144:	21c00015 	stw	r7,0(r4)
    7148:	38000126 	beq	r7,zero,7150 <__lshift+0xfc>
    714c:	a021883a 	mov	r16,r20
    7150:	ac000415 	stw	r16,16(r21)
    7154:	98000726 	beq	r19,zero,7174 <__lshift+0x120>
    7158:	98c00117 	ldw	r3,4(r19)
    715c:	88801317 	ldw	r2,76(r17)
    7160:	180690ba 	slli	r3,r3,2
    7164:	10c5883a 	add	r2,r2,r3
    7168:	10c00017 	ldw	r3,0(r2)
    716c:	98c00015 	stw	r3,0(r19)
    7170:	14c00015 	stw	r19,0(r2)
    7174:	a805883a 	mov	r2,r21
    7178:	dfc00717 	ldw	ra,28(sp)
    717c:	dd800617 	ldw	r22,24(sp)
    7180:	dd400517 	ldw	r21,20(sp)
    7184:	dd000417 	ldw	r20,16(sp)
    7188:	dcc00317 	ldw	r19,12(sp)
    718c:	dc800217 	ldw	r18,8(sp)
    7190:	dc400117 	ldw	r17,4(sp)
    7194:	dc000017 	ldw	r16,0(sp)
    7198:	dec00804 	addi	sp,sp,32
    719c:	f800283a 	ret
    71a0:	18800017 	ldw	r2,0(r3)
    71a4:	18c00104 	addi	r3,r3,4
    71a8:	21000104 	addi	r4,r4,4
    71ac:	20bfff15 	stw	r2,-4(r4)
    71b0:	1a3ffb36 	bltu	r3,r8,71a0 <__lshift+0x14c>
    71b4:	003fe606 	br	7150 <__lshift+0xfc>
    71b8:	00c00104 	movi	r3,4
    71bc:	003fe006 	br	7140 <__lshift+0xec>
    71c0:	01c00074 	movhi	r7,1
    71c4:	01000074 	movhi	r4,1
    71c8:	39c33c04 	addi	r7,r7,3312
    71cc:	000d883a 	mov	r6,zero
    71d0:	01407644 	movi	r5,473
    71d4:	21035104 	addi	r4,r4,3396
    71d8:	00094f00 	call	94f0 <__assert_func>

000071dc <__mcmp>:
    71dc:	21800417 	ldw	r6,16(r4)
    71e0:	28c00417 	ldw	r3,16(r5)
    71e4:	30c5c83a 	sub	r2,r6,r3
    71e8:	30c00e1e 	bne	r6,r3,7224 <__mcmp+0x48>
    71ec:	180690ba 	slli	r3,r3,2
    71f0:	21c00504 	addi	r7,r4,20
    71f4:	29400504 	addi	r5,r5,20
    71f8:	38c9883a 	add	r4,r7,r3
    71fc:	28c7883a 	add	r3,r5,r3
    7200:	00000106 	br	7208 <__mcmp+0x2c>
    7204:	3900082e 	bgeu	r7,r4,7228 <__mcmp+0x4c>
    7208:	21bfff17 	ldw	r6,-4(r4)
    720c:	197fff17 	ldw	r5,-4(r3)
    7210:	213fff04 	addi	r4,r4,-4
    7214:	18ffff04 	addi	r3,r3,-4
    7218:	317ffa26 	beq	r6,r5,7204 <__mcmp+0x28>
    721c:	3140032e 	bgeu	r6,r5,722c <__mcmp+0x50>
    7220:	00bfffc4 	movi	r2,-1
    7224:	f800283a 	ret
    7228:	f800283a 	ret
    722c:	00800044 	movi	r2,1
    7230:	f800283a 	ret

00007234 <__mdiff>:
    7234:	28800417 	ldw	r2,16(r5)
    7238:	30c00417 	ldw	r3,16(r6)
    723c:	defffc04 	addi	sp,sp,-16
    7240:	dc800215 	stw	r18,8(sp)
    7244:	dc400115 	stw	r17,4(sp)
    7248:	dc000015 	stw	r16,0(sp)
    724c:	dfc00315 	stw	ra,12(sp)
    7250:	2823883a 	mov	r17,r5
    7254:	3021883a 	mov	r16,r6
    7258:	10e5c83a 	sub	r18,r2,r3
    725c:	10c0641e 	bne	r2,r3,73f0 <__mdiff+0x1bc>
    7260:	180c90ba 	slli	r6,r3,2
    7264:	29400504 	addi	r5,r5,20
    7268:	80c00504 	addi	r3,r16,20
    726c:	2985883a 	add	r2,r5,r6
    7270:	1987883a 	add	r3,r3,r6
    7274:	00000106 	br	727c <__mdiff+0x48>
    7278:	2880642e 	bgeu	r5,r2,740c <__mdiff+0x1d8>
    727c:	11bfff17 	ldw	r6,-4(r2)
    7280:	19ffff17 	ldw	r7,-4(r3)
    7284:	10bfff04 	addi	r2,r2,-4
    7288:	18ffff04 	addi	r3,r3,-4
    728c:	31fffa26 	beq	r6,r7,7278 <__mdiff+0x44>
    7290:	31c05236 	bltu	r6,r7,73dc <__mdiff+0x1a8>
    7294:	89400117 	ldw	r5,4(r17)
    7298:	00067280 	call	6728 <_Balloc>
    729c:	10006226 	beq	r2,zero,7428 <__mdiff+0x1f4>
    72a0:	8a400417 	ldw	r9,16(r17)
    72a4:	83000417 	ldw	r12,16(r16)
    72a8:	8ac00504 	addi	r11,r17,20
    72ac:	481090ba 	slli	r8,r9,2
    72b0:	601890ba 	slli	r12,r12,2
    72b4:	81800504 	addi	r6,r16,20
    72b8:	13400504 	addi	r13,r2,20
    72bc:	14800315 	stw	r18,12(r2)
    72c0:	5a11883a 	add	r8,r11,r8
    72c4:	3319883a 	add	r12,r6,r12
    72c8:	681d883a 	mov	r14,r13
    72cc:	5815883a 	mov	r10,r11
    72d0:	0007883a 	mov	r3,zero
    72d4:	51000017 	ldw	r4,0(r10)
    72d8:	31c00017 	ldw	r7,0(r6)
    72dc:	73800104 	addi	r14,r14,4
    72e0:	217fffcc 	andi	r5,r4,65535
    72e4:	28cb883a 	add	r5,r5,r3
    72e8:	38ffffcc 	andi	r3,r7,65535
    72ec:	28cbc83a 	sub	r5,r5,r3
    72f0:	380ed43a 	srli	r7,r7,16
    72f4:	2006d43a 	srli	r3,r4,16
    72f8:	2809d43a 	srai	r4,r5,16
    72fc:	297fffcc 	andi	r5,r5,65535
    7300:	19c7c83a 	sub	r3,r3,r7
    7304:	1907883a 	add	r3,r3,r4
    7308:	1808943a 	slli	r4,r3,16
    730c:	31800104 	addi	r6,r6,4
    7310:	1807d43a 	srai	r3,r3,16
    7314:	214ab03a 	or	r5,r4,r5
    7318:	717fff15 	stw	r5,-4(r14)
    731c:	52800104 	addi	r10,r10,4
    7320:	333fec36 	bltu	r6,r12,72d4 <__mdiff+0xa0>
    7324:	640fc83a 	sub	r7,r12,r16
    7328:	39fffac4 	addi	r7,r7,-21
    732c:	84000544 	addi	r16,r16,21
    7330:	380ed0ba 	srli	r7,r7,2
    7334:	64003336 	bltu	r12,r16,7404 <__mdiff+0x1d0>
    7338:	380890ba 	slli	r4,r7,2
    733c:	6909883a 	add	r4,r13,r4
    7340:	64002e36 	bltu	r12,r16,73fc <__mdiff+0x1c8>
    7344:	39800044 	addi	r6,r7,1
    7348:	300c90ba 	slli	r6,r6,2
    734c:	5997883a 	add	r11,r11,r6
    7350:	699b883a 	add	r13,r13,r6
    7354:	5a00152e 	bgeu	r11,r8,73ac <__mdiff+0x178>
    7358:	680f883a 	mov	r7,r13
    735c:	580d883a 	mov	r6,r11
    7360:	31000017 	ldw	r4,0(r6)
    7364:	39c00104 	addi	r7,r7,4
    7368:	31800104 	addi	r6,r6,4
    736c:	217fffcc 	andi	r5,r4,65535
    7370:	28cb883a 	add	r5,r5,r3
    7374:	2815d43a 	srai	r10,r5,16
    7378:	2006d43a 	srli	r3,r4,16
    737c:	297fffcc 	andi	r5,r5,65535
    7380:	1a87883a 	add	r3,r3,r10
    7384:	1814943a 	slli	r10,r3,16
    7388:	1807d43a 	srai	r3,r3,16
    738c:	514ab03a 	or	r5,r10,r5
    7390:	397fff15 	stw	r5,-4(r7)
    7394:	323ff236 	bltu	r6,r8,7360 <__mdiff+0x12c>
    7398:	413fffc4 	addi	r4,r8,-1
    739c:	22c9c83a 	sub	r4,r4,r11
    73a0:	2008d0ba 	srli	r4,r4,2
    73a4:	200890ba 	slli	r4,r4,2
    73a8:	6909883a 	add	r4,r13,r4
    73ac:	2800041e 	bne	r5,zero,73c0 <__mdiff+0x18c>
    73b0:	20ffff17 	ldw	r3,-4(r4)
    73b4:	4a7fffc4 	addi	r9,r9,-1
    73b8:	213fff04 	addi	r4,r4,-4
    73bc:	183ffc26 	beq	r3,zero,73b0 <__mdiff+0x17c>
    73c0:	12400415 	stw	r9,16(r2)
    73c4:	dfc00317 	ldw	ra,12(sp)
    73c8:	dc800217 	ldw	r18,8(sp)
    73cc:	dc400117 	ldw	r17,4(sp)
    73d0:	dc000017 	ldw	r16,0(sp)
    73d4:	dec00404 	addi	sp,sp,16
    73d8:	f800283a 	ret
    73dc:	8805883a 	mov	r2,r17
    73e0:	04800044 	movi	r18,1
    73e4:	8023883a 	mov	r17,r16
    73e8:	1021883a 	mov	r16,r2
    73ec:	003fa906 	br	7294 <__mdiff+0x60>
    73f0:	903ffa16 	blt	r18,zero,73dc <__mdiff+0x1a8>
    73f4:	0025883a 	mov	r18,zero
    73f8:	003fa606 	br	7294 <__mdiff+0x60>
    73fc:	01800104 	movi	r6,4
    7400:	003fd206 	br	734c <__mdiff+0x118>
    7404:	0009883a 	mov	r4,zero
    7408:	003fcc06 	br	733c <__mdiff+0x108>
    740c:	000b883a 	mov	r5,zero
    7410:	00067280 	call	6728 <_Balloc>
    7414:	10000b26 	beq	r2,zero,7444 <__mdiff+0x210>
    7418:	00c00044 	movi	r3,1
    741c:	10c00415 	stw	r3,16(r2)
    7420:	10000515 	stw	zero,20(r2)
    7424:	003fe706 	br	73c4 <__mdiff+0x190>
    7428:	01c00074 	movhi	r7,1
    742c:	01000074 	movhi	r4,1
    7430:	39c33c04 	addi	r7,r7,3312
    7434:	000d883a 	mov	r6,zero
    7438:	01409004 	movi	r5,576
    743c:	21035104 	addi	r4,r4,3396
    7440:	00094f00 	call	94f0 <__assert_func>
    7444:	01c00074 	movhi	r7,1
    7448:	01000074 	movhi	r4,1
    744c:	39c33c04 	addi	r7,r7,3312
    7450:	000d883a 	mov	r6,zero
    7454:	01408c84 	movi	r5,562
    7458:	21035104 	addi	r4,r4,3396
    745c:	00094f00 	call	94f0 <__assert_func>

00007460 <__ulp>:
    7460:	28dffc2c 	andhi	r3,r5,32752
    7464:	017f3034 	movhi	r5,64704
    7468:	1947883a 	add	r3,r3,r5
    746c:	00c0020e 	bge	zero,r3,7478 <__ulp+0x18>
    7470:	0005883a 	mov	r2,zero
    7474:	f800283a 	ret
    7478:	00c7c83a 	sub	r3,zero,r3
    747c:	1807d53a 	srai	r3,r3,20
    7480:	18800508 	cmpgei	r2,r3,20
    7484:	1000041e 	bne	r2,zero,7498 <__ulp+0x38>
    7488:	00800234 	movhi	r2,8
    748c:	10c7d83a 	sra	r3,r2,r3
    7490:	0005883a 	mov	r2,zero
    7494:	f800283a 	ret
    7498:	193ffb04 	addi	r4,r3,-20
    749c:	208007c8 	cmpgei	r2,r4,31
    74a0:	0007883a 	mov	r3,zero
    74a4:	1000031e 	bne	r2,zero,74b4 <__ulp+0x54>
    74a8:	00a00034 	movhi	r2,32768
    74ac:	1104d83a 	srl	r2,r2,r4
    74b0:	f800283a 	ret
    74b4:	00800044 	movi	r2,1
    74b8:	f800283a 	ret

000074bc <__b2d>:
    74bc:	defffa04 	addi	sp,sp,-24
    74c0:	dc400115 	stw	r17,4(sp)
    74c4:	24400417 	ldw	r17,16(r4)
    74c8:	dc000015 	stw	r16,0(sp)
    74cc:	24000504 	addi	r16,r4,20
    74d0:	882290ba 	slli	r17,r17,2
    74d4:	dc800215 	stw	r18,8(sp)
    74d8:	dd000415 	stw	r20,16(sp)
    74dc:	8463883a 	add	r17,r16,r17
    74e0:	8cbfff17 	ldw	r18,-4(r17)
    74e4:	dcc00315 	stw	r19,12(sp)
    74e8:	dfc00515 	stw	ra,20(sp)
    74ec:	9009883a 	mov	r4,r18
    74f0:	2827883a 	mov	r19,r5
    74f4:	0006a840 	call	6a84 <__hi0bits>
    74f8:	00c00804 	movi	r3,32
    74fc:	1889c83a 	sub	r4,r3,r2
    7500:	99000015 	stw	r4,0(r19)
    7504:	110002c8 	cmpgei	r4,r2,11
    7508:	8d3fff04 	addi	r20,r17,-4
    750c:	20002026 	beq	r4,zero,7590 <__b2d+0xd4>
    7510:	10bffd44 	addi	r2,r2,-11
    7514:	85000e2e 	bgeu	r16,r20,7550 <__b2d+0x94>
    7518:	897ffe17 	ldw	r5,-8(r17)
    751c:	10001226 	beq	r2,zero,7568 <__b2d+0xac>
    7520:	1889c83a 	sub	r4,r3,r2
    7524:	90a4983a 	sll	r18,r18,r2
    7528:	2906d83a 	srl	r3,r5,r4
    752c:	89bffe04 	addi	r6,r17,-8
    7530:	2884983a 	sll	r2,r5,r2
    7534:	90e4b03a 	or	r18,r18,r3
    7538:	90cffc34 	orhi	r3,r18,16368
    753c:	81800c2e 	bgeu	r16,r6,7570 <__b2d+0xb4>
    7540:	897ffd17 	ldw	r5,-12(r17)
    7544:	2908d83a 	srl	r4,r5,r4
    7548:	1104b03a 	or	r2,r2,r4
    754c:	00000806 	br	7570 <__b2d+0xb4>
    7550:	10000426 	beq	r2,zero,7564 <__b2d+0xa8>
    7554:	90a4983a 	sll	r18,r18,r2
    7558:	0005883a 	mov	r2,zero
    755c:	90cffc34 	orhi	r3,r18,16368
    7560:	00000306 	br	7570 <__b2d+0xb4>
    7564:	000b883a 	mov	r5,zero
    7568:	90cffc34 	orhi	r3,r18,16368
    756c:	2805883a 	mov	r2,r5
    7570:	dfc00517 	ldw	ra,20(sp)
    7574:	dd000417 	ldw	r20,16(sp)
    7578:	dcc00317 	ldw	r19,12(sp)
    757c:	dc800217 	ldw	r18,8(sp)
    7580:	dc400117 	ldw	r17,4(sp)
    7584:	dc000017 	ldw	r16,0(sp)
    7588:	dec00604 	addi	sp,sp,24
    758c:	f800283a 	ret
    7590:	014002c4 	movi	r5,11
    7594:	2889c83a 	sub	r4,r5,r2
    7598:	9106d83a 	srl	r3,r18,r4
    759c:	18cffc34 	orhi	r3,r3,16368
    75a0:	85000536 	bltu	r16,r20,75b8 <__b2d+0xfc>
    75a4:	000b883a 	mov	r5,zero
    75a8:	10800544 	addi	r2,r2,21
    75ac:	9084983a 	sll	r2,r18,r2
    75b0:	1144b03a 	or	r2,r2,r5
    75b4:	003fee06 	br	7570 <__b2d+0xb4>
    75b8:	897ffe17 	ldw	r5,-8(r17)
    75bc:	290ad83a 	srl	r5,r5,r4
    75c0:	003ff906 	br	75a8 <__b2d+0xec>

000075c4 <__d2b>:
    75c4:	defff804 	addi	sp,sp,-32
    75c8:	dd000615 	stw	r20,24(sp)
    75cc:	2829883a 	mov	r20,r5
    75d0:	01400044 	movi	r5,1
    75d4:	dcc00515 	stw	r19,20(sp)
    75d8:	dc000215 	stw	r16,8(sp)
    75dc:	dfc00715 	stw	ra,28(sp)
    75e0:	dc800415 	stw	r18,16(sp)
    75e4:	dc400315 	stw	r17,12(sp)
    75e8:	3021883a 	mov	r16,r6
    75ec:	3827883a 	mov	r19,r7
    75f0:	00067280 	call	6728 <_Balloc>
    75f4:	10004526 	beq	r2,zero,770c <__d2b+0x148>
    75f8:	8024d53a 	srli	r18,r16,20
    75fc:	01800434 	movhi	r6,16
    7600:	31bfffc4 	addi	r6,r6,-1
    7604:	9481ffcc 	andi	r18,r18,2047
    7608:	1023883a 	mov	r17,r2
    760c:	81a0703a 	and	r16,r16,r6
    7610:	90000126 	beq	r18,zero,7618 <__d2b+0x54>
    7614:	84000434 	orhi	r16,r16,16
    7618:	dc000115 	stw	r16,4(sp)
    761c:	a0002226 	beq	r20,zero,76a8 <__d2b+0xe4>
    7620:	d809883a 	mov	r4,sp
    7624:	dd000015 	stw	r20,0(sp)
    7628:	0006ae80 	call	6ae8 <__lo0bits>
    762c:	d8c00117 	ldw	r3,4(sp)
    7630:	10003326 	beq	r2,zero,7700 <__d2b+0x13c>
    7634:	01000804 	movi	r4,32
    7638:	2089c83a 	sub	r4,r4,r2
    763c:	1908983a 	sll	r4,r3,r4
    7640:	d9400017 	ldw	r5,0(sp)
    7644:	1886d83a 	srl	r3,r3,r2
    7648:	2148b03a 	or	r4,r4,r5
    764c:	89000515 	stw	r4,20(r17)
    7650:	d8c00115 	stw	r3,4(sp)
    7654:	88c00615 	stw	r3,24(r17)
    7658:	1800271e 	bne	r3,zero,76f8 <__d2b+0x134>
    765c:	04000044 	movi	r16,1
    7660:	8c000415 	stw	r16,16(r17)
    7664:	90001926 	beq	r18,zero,76cc <__d2b+0x108>
    7668:	00c00d44 	movi	r3,53
    766c:	94bef344 	addi	r18,r18,-1075
    7670:	90a5883a 	add	r18,r18,r2
    7674:	1885c83a 	sub	r2,r3,r2
    7678:	d8c00817 	ldw	r3,32(sp)
    767c:	9c800015 	stw	r18,0(r19)
    7680:	18800015 	stw	r2,0(r3)
    7684:	8805883a 	mov	r2,r17
    7688:	dfc00717 	ldw	ra,28(sp)
    768c:	dd000617 	ldw	r20,24(sp)
    7690:	dcc00517 	ldw	r19,20(sp)
    7694:	dc800417 	ldw	r18,16(sp)
    7698:	dc400317 	ldw	r17,12(sp)
    769c:	dc000217 	ldw	r16,8(sp)
    76a0:	dec00804 	addi	sp,sp,32
    76a4:	f800283a 	ret
    76a8:	d9000104 	addi	r4,sp,4
    76ac:	0006ae80 	call	6ae8 <__lo0bits>
    76b0:	00c00044 	movi	r3,1
    76b4:	88c00415 	stw	r3,16(r17)
    76b8:	d8c00117 	ldw	r3,4(sp)
    76bc:	10800804 	addi	r2,r2,32
    76c0:	04000044 	movi	r16,1
    76c4:	88c00515 	stw	r3,20(r17)
    76c8:	903fe71e 	bne	r18,zero,7668 <__d2b+0xa4>
    76cc:	800690ba 	slli	r3,r16,2
    76d0:	10bef384 	addi	r2,r2,-1074
    76d4:	98800015 	stw	r2,0(r19)
    76d8:	88c5883a 	add	r2,r17,r3
    76dc:	11000417 	ldw	r4,16(r2)
    76e0:	8020917a 	slli	r16,r16,5
    76e4:	0006a840 	call	6a84 <__hi0bits>
    76e8:	80a1c83a 	sub	r16,r16,r2
    76ec:	d8800817 	ldw	r2,32(sp)
    76f0:	14000015 	stw	r16,0(r2)
    76f4:	003fe306 	br	7684 <__d2b+0xc0>
    76f8:	04000084 	movi	r16,2
    76fc:	003fd806 	br	7660 <__d2b+0x9c>
    7700:	d9000017 	ldw	r4,0(sp)
    7704:	89000515 	stw	r4,20(r17)
    7708:	003fd206 	br	7654 <__d2b+0x90>
    770c:	01c00074 	movhi	r7,1
    7710:	01000074 	movhi	r4,1
    7714:	39c33c04 	addi	r7,r7,3312
    7718:	000d883a 	mov	r6,zero
    771c:	0140c284 	movi	r5,778
    7720:	21035104 	addi	r4,r4,3396
    7724:	00094f00 	call	94f0 <__assert_func>

00007728 <__ratio>:
    7728:	defff904 	addi	sp,sp,-28
    772c:	dc400315 	stw	r17,12(sp)
    7730:	2823883a 	mov	r17,r5
    7734:	d80b883a 	mov	r5,sp
    7738:	dfc00615 	stw	ra,24(sp)
    773c:	dcc00515 	stw	r19,20(sp)
    7740:	dc800415 	stw	r18,16(sp)
    7744:	2027883a 	mov	r19,r4
    7748:	dc000215 	stw	r16,8(sp)
    774c:	00074bc0 	call	74bc <__b2d>
    7750:	d9400104 	addi	r5,sp,4
    7754:	8809883a 	mov	r4,r17
    7758:	1025883a 	mov	r18,r2
    775c:	1821883a 	mov	r16,r3
    7760:	00074bc0 	call	74bc <__b2d>
    7764:	89000417 	ldw	r4,16(r17)
    7768:	9a000417 	ldw	r8,16(r19)
    776c:	d9400117 	ldw	r5,4(sp)
    7770:	100d883a 	mov	r6,r2
    7774:	4111c83a 	sub	r8,r8,r4
    7778:	d9000017 	ldw	r4,0(sp)
    777c:	4010917a 	slli	r8,r8,5
    7780:	180f883a 	mov	r7,r3
    7784:	2149c83a 	sub	r4,r4,r5
    7788:	4111883a 	add	r8,r8,r4
    778c:	02000c0e 	bge	zero,r8,77c0 <__ratio+0x98>
    7790:	4010953a 	slli	r8,r8,20
    7794:	4421883a 	add	r16,r8,r16
    7798:	9009883a 	mov	r4,r18
    779c:	800b883a 	mov	r5,r16
    77a0:	000bce80 	call	bce8 <__divdf3>
    77a4:	dfc00617 	ldw	ra,24(sp)
    77a8:	dcc00517 	ldw	r19,20(sp)
    77ac:	dc800417 	ldw	r18,16(sp)
    77b0:	dc400317 	ldw	r17,12(sp)
    77b4:	dc000217 	ldw	r16,8(sp)
    77b8:	dec00704 	addi	sp,sp,28
    77bc:	f800283a 	ret
    77c0:	4010953a 	slli	r8,r8,20
    77c4:	1a0fc83a 	sub	r7,r3,r8
    77c8:	003ff306 	br	7798 <__ratio+0x70>

000077cc <_mprec_log10>:
    77cc:	defffe04 	addi	sp,sp,-8
    77d0:	dc000015 	stw	r16,0(sp)
    77d4:	dfc00115 	stw	ra,4(sp)
    77d8:	20800608 	cmpgei	r2,r4,24
    77dc:	2021883a 	mov	r16,r4
    77e0:	10000f26 	beq	r2,zero,7820 <_mprec_log10+0x54>
    77e4:	0009883a 	mov	r4,zero
    77e8:	014ffc34 	movhi	r5,16368
    77ec:	000d883a 	mov	r6,zero
    77f0:	01d00934 	movhi	r7,16420
    77f4:	000c84c0 	call	c84c <__muldf3>
    77f8:	843fffc4 	addi	r16,r16,-1
    77fc:	1009883a 	mov	r4,r2
    7800:	180b883a 	mov	r5,r3
    7804:	803ff91e 	bne	r16,zero,77ec <_mprec_log10+0x20>
    7808:	2005883a 	mov	r2,r4
    780c:	2807883a 	mov	r3,r5
    7810:	dfc00117 	ldw	ra,4(sp)
    7814:	dc000017 	ldw	r16,0(sp)
    7818:	dec00204 	addi	sp,sp,8
    781c:	f800283a 	ret
    7820:	202090fa 	slli	r16,r4,3
    7824:	00800074 	movhi	r2,1
    7828:	10837804 	addi	r2,r2,3552
    782c:	1421883a 	add	r16,r2,r16
    7830:	81000017 	ldw	r4,0(r16)
    7834:	81400117 	ldw	r5,4(r16)
    7838:	003ff306 	br	7808 <_mprec_log10+0x3c>

0000783c <__copybits>:
    783c:	297fffc4 	addi	r5,r5,-1
    7840:	280fd17a 	srai	r7,r5,5
    7844:	31400417 	ldw	r5,16(r6)
    7848:	30800504 	addi	r2,r6,20
    784c:	39c00044 	addi	r7,r7,1
    7850:	280a90ba 	slli	r5,r5,2
    7854:	380e90ba 	slli	r7,r7,2
    7858:	114b883a 	add	r5,r2,r5
    785c:	21cf883a 	add	r7,r4,r7
    7860:	11400c2e 	bgeu	r2,r5,7894 <__copybits+0x58>
    7864:	2007883a 	mov	r3,r4
    7868:	12000017 	ldw	r8,0(r2)
    786c:	10800104 	addi	r2,r2,4
    7870:	18c00104 	addi	r3,r3,4
    7874:	1a3fff15 	stw	r8,-4(r3)
    7878:	117ffb36 	bltu	r2,r5,7868 <__copybits+0x2c>
    787c:	2985c83a 	sub	r2,r5,r6
    7880:	10bffac4 	addi	r2,r2,-21
    7884:	1004d0ba 	srli	r2,r2,2
    7888:	10800044 	addi	r2,r2,1
    788c:	100490ba 	slli	r2,r2,2
    7890:	2089883a 	add	r4,r4,r2
    7894:	21c0072e 	bgeu	r4,r7,78b4 <__copybits+0x78>
    7898:	39bfffc4 	addi	r6,r7,-1
    789c:	310dc83a 	sub	r6,r6,r4
    78a0:	300cd0ba 	srli	r6,r6,2
    78a4:	000b883a 	mov	r5,zero
    78a8:	31800044 	addi	r6,r6,1
    78ac:	300c90ba 	slli	r6,r6,2
    78b0:	00066381 	jmpi	6638 <memset>
    78b4:	f800283a 	ret

000078b8 <__any_on>:
    78b8:	20c00417 	ldw	r3,16(r4)
    78bc:	280dd17a 	srai	r6,r5,5
    78c0:	21000504 	addi	r4,r4,20
    78c4:	1980080e 	bge	r3,r6,78e8 <__any_on+0x30>
    78c8:	180490ba 	slli	r2,r3,2
    78cc:	2085883a 	add	r2,r4,r2
    78d0:	20800f2e 	bgeu	r4,r2,7910 <__any_on+0x58>
    78d4:	10ffff17 	ldw	r3,-4(r2)
    78d8:	10bfff04 	addi	r2,r2,-4
    78dc:	183ffc26 	beq	r3,zero,78d0 <__any_on+0x18>
    78e0:	00800044 	movi	r2,1
    78e4:	f800283a 	ret
    78e8:	300490ba 	slli	r2,r6,2
    78ec:	2085883a 	add	r2,r4,r2
    78f0:	30fff70e 	bge	r6,r3,78d0 <__any_on+0x18>
    78f4:	294007cc 	andi	r5,r5,31
    78f8:	283ff526 	beq	r5,zero,78d0 <__any_on+0x18>
    78fc:	11800017 	ldw	r6,0(r2)
    7900:	3146d83a 	srl	r3,r6,r5
    7904:	194a983a 	sll	r5,r3,r5
    7908:	317ff51e 	bne	r6,r5,78e0 <__any_on+0x28>
    790c:	003ff006 	br	78d0 <__any_on+0x18>
    7910:	0005883a 	mov	r2,zero
    7914:	f800283a 	ret

00007918 <_realloc_r>:
    7918:	defff604 	addi	sp,sp,-40
    791c:	dc800215 	stw	r18,8(sp)
    7920:	dfc00915 	stw	ra,36(sp)
    7924:	df000815 	stw	fp,32(sp)
    7928:	ddc00715 	stw	r23,28(sp)
    792c:	dd800615 	stw	r22,24(sp)
    7930:	dd400515 	stw	r21,20(sp)
    7934:	dd000415 	stw	r20,16(sp)
    7938:	dcc00315 	stw	r19,12(sp)
    793c:	dc400115 	stw	r17,4(sp)
    7940:	dc000015 	stw	r16,0(sp)
    7944:	3025883a 	mov	r18,r6
    7948:	28008b26 	beq	r5,zero,7b78 <_realloc_r+0x260>
    794c:	2821883a 	mov	r16,r5
    7950:	2027883a 	mov	r19,r4
    7954:	944002c4 	addi	r17,r18,11
    7958:	000e28c0 	call	e28c <__malloc_lock>
    795c:	888005f0 	cmpltui	r2,r17,23
    7960:	1000521e 	bne	r2,zero,7aac <_realloc_r+0x194>
    7964:	017ffe04 	movi	r5,-8
    7968:	8962703a 	and	r17,r17,r5
    796c:	8807883a 	mov	r3,r17
    7970:	88005116 	blt	r17,zero,7ab8 <_realloc_r+0x1a0>
    7974:	8c805036 	bltu	r17,r18,7ab8 <_realloc_r+0x1a0>
    7978:	80bfff17 	ldw	r2,-4(r16)
    797c:	017fff04 	movi	r5,-4
    7980:	857ffe04 	addi	r21,r16,-8
    7984:	1168703a 	and	r20,r2,r5
    7988:	a0c0390e 	bge	r20,r3,7a70 <_realloc_r+0x158>
    798c:	05c00074 	movhi	r23,1
    7990:	bdc59004 	addi	r23,r23,5696
    7994:	ba000217 	ldw	r8,8(r23)
    7998:	ad0f883a 	add	r7,r21,r20
    799c:	39000117 	ldw	r4,4(r7)
    79a0:	41c08e26 	beq	r8,r7,7bdc <_realloc_r+0x2c4>
    79a4:	01bfff84 	movi	r6,-2
    79a8:	218c703a 	and	r6,r4,r6
    79ac:	398d883a 	add	r6,r7,r6
    79b0:	31800117 	ldw	r6,4(r6)
    79b4:	3180004c 	andi	r6,r6,1
    79b8:	30004f1e 	bne	r6,zero,7af8 <_realloc_r+0x1e0>
    79bc:	2148703a 	and	r4,r4,r5
    79c0:	a10b883a 	add	r5,r20,r4
    79c4:	28c0bb0e 	bge	r5,r3,7cb4 <_realloc_r+0x39c>
    79c8:	1080004c 	andi	r2,r2,1
    79cc:	10004c1e 	bne	r2,zero,7b00 <_realloc_r+0x1e8>
    79d0:	873ffe17 	ldw	fp,-8(r16)
    79d4:	00bfff04 	movi	r2,-4
    79d8:	af39c83a 	sub	fp,r21,fp
    79dc:	e1400117 	ldw	r5,4(fp)
    79e0:	288a703a 	and	r5,r5,r2
    79e4:	38000426 	beq	r7,zero,79f8 <_realloc_r+0xe0>
    79e8:	a16d883a 	add	r22,r20,r5
    79ec:	b12d883a 	add	r22,r22,r4
    79f0:	41c0ba26 	beq	r8,r7,7cdc <_realloc_r+0x3c4>
    79f4:	b0c0930e 	bge	r22,r3,7c44 <_realloc_r+0x32c>
    79f8:	e0004126 	beq	fp,zero,7b00 <_realloc_r+0x1e8>
    79fc:	a16d883a 	add	r22,r20,r5
    7a00:	b0c03f16 	blt	r22,r3,7b00 <_realloc_r+0x1e8>
    7a04:	e0800317 	ldw	r2,12(fp)
    7a08:	e0c00217 	ldw	r3,8(fp)
    7a0c:	a1bfff04 	addi	r6,r20,-4
    7a10:	31400968 	cmpgeui	r5,r6,37
    7a14:	18800315 	stw	r2,12(r3)
    7a18:	10c00215 	stw	r3,8(r2)
    7a1c:	e1000204 	addi	r4,fp,8
    7a20:	2800941e 	bne	r5,zero,7c74 <_realloc_r+0x35c>
    7a24:	30800530 	cmpltui	r2,r6,20
    7a28:	1000db1e 	bne	r2,zero,7d98 <_realloc_r+0x480>
    7a2c:	80c00017 	ldw	r3,0(r16)
    7a30:	30800728 	cmpgeui	r2,r6,28
    7a34:	e0c00215 	stw	r3,8(fp)
    7a38:	80c00117 	ldw	r3,4(r16)
    7a3c:	e0c00315 	stw	r3,12(fp)
    7a40:	1000d71e 	bne	r2,zero,7da0 <_realloc_r+0x488>
    7a44:	84000204 	addi	r16,r16,8
    7a48:	e0800404 	addi	r2,fp,16
    7a4c:	80c00017 	ldw	r3,0(r16)
    7a50:	b029883a 	mov	r20,r22
    7a54:	e02b883a 	mov	r21,fp
    7a58:	10c00015 	stw	r3,0(r2)
    7a5c:	80c00117 	ldw	r3,4(r16)
    7a60:	10c00115 	stw	r3,4(r2)
    7a64:	80c00217 	ldw	r3,8(r16)
    7a68:	2021883a 	mov	r16,r4
    7a6c:	10c00215 	stw	r3,8(r2)
    7a70:	a9800117 	ldw	r6,4(r21)
    7a74:	a447c83a 	sub	r3,r20,r17
    7a78:	19000430 	cmpltui	r4,r3,16
    7a7c:	3180004c 	andi	r6,r6,1
    7a80:	ad05883a 	add	r2,r21,r20
    7a84:	20004926 	beq	r4,zero,7bac <_realloc_r+0x294>
    7a88:	a18cb03a 	or	r6,r20,r6
    7a8c:	a9800115 	stw	r6,4(r21)
    7a90:	10c00117 	ldw	r3,4(r2)
    7a94:	18c00054 	ori	r3,r3,1
    7a98:	10c00115 	stw	r3,4(r2)
    7a9c:	9809883a 	mov	r4,r19
    7aa0:	000e2b00 	call	e2b0 <__malloc_unlock>
    7aa4:	8025883a 	mov	r18,r16
    7aa8:	00000606 	br	7ac4 <_realloc_r+0x1ac>
    7aac:	04400404 	movi	r17,16
    7ab0:	00c00404 	movi	r3,16
    7ab4:	8cbfb02e 	bgeu	r17,r18,7978 <_realloc_r+0x60>
    7ab8:	00800304 	movi	r2,12
    7abc:	98800015 	stw	r2,0(r19)
    7ac0:	0025883a 	mov	r18,zero
    7ac4:	9005883a 	mov	r2,r18
    7ac8:	dfc00917 	ldw	ra,36(sp)
    7acc:	df000817 	ldw	fp,32(sp)
    7ad0:	ddc00717 	ldw	r23,28(sp)
    7ad4:	dd800617 	ldw	r22,24(sp)
    7ad8:	dd400517 	ldw	r21,20(sp)
    7adc:	dd000417 	ldw	r20,16(sp)
    7ae0:	dcc00317 	ldw	r19,12(sp)
    7ae4:	dc800217 	ldw	r18,8(sp)
    7ae8:	dc400117 	ldw	r17,4(sp)
    7aec:	dc000017 	ldw	r16,0(sp)
    7af0:	dec00a04 	addi	sp,sp,40
    7af4:	f800283a 	ret
    7af8:	1080004c 	andi	r2,r2,1
    7afc:	10006826 	beq	r2,zero,7ca0 <_realloc_r+0x388>
    7b00:	900b883a 	mov	r5,r18
    7b04:	9809883a 	mov	r4,r19
    7b08:	0005b5c0 	call	5b5c <_malloc_r>
    7b0c:	1025883a 	mov	r18,r2
    7b10:	10001626 	beq	r2,zero,7b6c <_realloc_r+0x254>
    7b14:	80bfff17 	ldw	r2,-4(r16)
    7b18:	013fff84 	movi	r4,-2
    7b1c:	90fffe04 	addi	r3,r18,-8
    7b20:	1104703a 	and	r2,r2,r4
    7b24:	a885883a 	add	r2,r21,r2
    7b28:	10c05826 	beq	r2,r3,7c8c <_realloc_r+0x374>
    7b2c:	a1bfff04 	addi	r6,r20,-4
    7b30:	30800968 	cmpgeui	r2,r6,37
    7b34:	1000651e 	bne	r2,zero,7ccc <_realloc_r+0x3b4>
    7b38:	30800530 	cmpltui	r2,r6,20
    7b3c:	10003826 	beq	r2,zero,7c20 <_realloc_r+0x308>
    7b40:	9005883a 	mov	r2,r18
    7b44:	8007883a 	mov	r3,r16
    7b48:	19000017 	ldw	r4,0(r3)
    7b4c:	11000015 	stw	r4,0(r2)
    7b50:	19000117 	ldw	r4,4(r3)
    7b54:	11000115 	stw	r4,4(r2)
    7b58:	18c00217 	ldw	r3,8(r3)
    7b5c:	10c00215 	stw	r3,8(r2)
    7b60:	800b883a 	mov	r5,r16
    7b64:	9809883a 	mov	r4,r19
    7b68:	00050240 	call	5024 <_free_r>
    7b6c:	9809883a 	mov	r4,r19
    7b70:	000e2b00 	call	e2b0 <__malloc_unlock>
    7b74:	003fd306 	br	7ac4 <_realloc_r+0x1ac>
    7b78:	300b883a 	mov	r5,r6
    7b7c:	dfc00917 	ldw	ra,36(sp)
    7b80:	df000817 	ldw	fp,32(sp)
    7b84:	ddc00717 	ldw	r23,28(sp)
    7b88:	dd800617 	ldw	r22,24(sp)
    7b8c:	dd400517 	ldw	r21,20(sp)
    7b90:	dd000417 	ldw	r20,16(sp)
    7b94:	dcc00317 	ldw	r19,12(sp)
    7b98:	dc800217 	ldw	r18,8(sp)
    7b9c:	dc400117 	ldw	r17,4(sp)
    7ba0:	dc000017 	ldw	r16,0(sp)
    7ba4:	dec00a04 	addi	sp,sp,40
    7ba8:	0005b5c1 	jmpi	5b5c <_malloc_r>
    7bac:	344cb03a 	or	r6,r6,r17
    7bb0:	a9800115 	stw	r6,4(r21)
    7bb4:	ac4b883a 	add	r5,r21,r17
    7bb8:	18c00054 	ori	r3,r3,1
    7bbc:	28c00115 	stw	r3,4(r5)
    7bc0:	10c00117 	ldw	r3,4(r2)
    7bc4:	29400204 	addi	r5,r5,8
    7bc8:	9809883a 	mov	r4,r19
    7bcc:	18c00054 	ori	r3,r3,1
    7bd0:	10c00115 	stw	r3,4(r2)
    7bd4:	00050240 	call	5024 <_free_r>
    7bd8:	003fb006 	br	7a9c <_realloc_r+0x184>
    7bdc:	2148703a 	and	r4,r4,r5
    7be0:	a10b883a 	add	r5,r20,r4
    7be4:	89800404 	addi	r6,r17,16
    7be8:	29bf7716 	blt	r5,r6,79c8 <_realloc_r+0xb0>
    7bec:	ac6b883a 	add	r21,r21,r17
    7bf0:	2c45c83a 	sub	r2,r5,r17
    7bf4:	bd400215 	stw	r21,8(r23)
    7bf8:	10800054 	ori	r2,r2,1
    7bfc:	a8800115 	stw	r2,4(r21)
    7c00:	80bfff17 	ldw	r2,-4(r16)
    7c04:	9809883a 	mov	r4,r19
    7c08:	8025883a 	mov	r18,r16
    7c0c:	1080004c 	andi	r2,r2,1
    7c10:	1462b03a 	or	r17,r2,r17
    7c14:	847fff15 	stw	r17,-4(r16)
    7c18:	000e2b00 	call	e2b0 <__malloc_unlock>
    7c1c:	003fa906 	br	7ac4 <_realloc_r+0x1ac>
    7c20:	80c00017 	ldw	r3,0(r16)
    7c24:	30800728 	cmpgeui	r2,r6,28
    7c28:	90c00015 	stw	r3,0(r18)
    7c2c:	80c00117 	ldw	r3,4(r16)
    7c30:	90c00115 	stw	r3,4(r18)
    7c34:	10004f1e 	bne	r2,zero,7d74 <_realloc_r+0x45c>
    7c38:	80c00204 	addi	r3,r16,8
    7c3c:	90800204 	addi	r2,r18,8
    7c40:	003fc106 	br	7b48 <_realloc_r+0x230>
    7c44:	38800317 	ldw	r2,12(r7)
    7c48:	38c00217 	ldw	r3,8(r7)
    7c4c:	a1bfff04 	addi	r6,r20,-4
    7c50:	31400968 	cmpgeui	r5,r6,37
    7c54:	18800315 	stw	r2,12(r3)
    7c58:	10c00215 	stw	r3,8(r2)
    7c5c:	e0c00217 	ldw	r3,8(fp)
    7c60:	e0800317 	ldw	r2,12(fp)
    7c64:	e1000204 	addi	r4,fp,8
    7c68:	18800315 	stw	r2,12(r3)
    7c6c:	10c00215 	stw	r3,8(r2)
    7c70:	283f6c26 	beq	r5,zero,7a24 <_realloc_r+0x10c>
    7c74:	800b883a 	mov	r5,r16
    7c78:	000650c0 	call	650c <memmove>
    7c7c:	1021883a 	mov	r16,r2
    7c80:	b029883a 	mov	r20,r22
    7c84:	e02b883a 	mov	r21,fp
    7c88:	003f7906 	br	7a70 <_realloc_r+0x158>
    7c8c:	90bfff17 	ldw	r2,-4(r18)
    7c90:	00ffff04 	movi	r3,-4
    7c94:	10c4703a 	and	r2,r2,r3
    7c98:	a0a9883a 	add	r20,r20,r2
    7c9c:	003f7406 	br	7a70 <_realloc_r+0x158>
    7ca0:	873ffe17 	ldw	fp,-8(r16)
    7ca4:	af39c83a 	sub	fp,r21,fp
    7ca8:	e0800117 	ldw	r2,4(fp)
    7cac:	114a703a 	and	r5,r2,r5
    7cb0:	003f5106 	br	79f8 <_realloc_r+0xe0>
    7cb4:	38800317 	ldw	r2,12(r7)
    7cb8:	38c00217 	ldw	r3,8(r7)
    7cbc:	2829883a 	mov	r20,r5
    7cc0:	18800315 	stw	r2,12(r3)
    7cc4:	10c00215 	stw	r3,8(r2)
    7cc8:	003f6906 	br	7a70 <_realloc_r+0x158>
    7ccc:	800b883a 	mov	r5,r16
    7cd0:	9009883a 	mov	r4,r18
    7cd4:	000650c0 	call	650c <memmove>
    7cd8:	003fa106 	br	7b60 <_realloc_r+0x248>
    7cdc:	88800404 	addi	r2,r17,16
    7ce0:	b0bf4516 	blt	r22,r2,79f8 <_realloc_r+0xe0>
    7ce4:	e0800317 	ldw	r2,12(fp)
    7ce8:	e0c00217 	ldw	r3,8(fp)
    7cec:	a1bfff04 	addi	r6,r20,-4
    7cf0:	31000968 	cmpgeui	r4,r6,37
    7cf4:	18800315 	stw	r2,12(r3)
    7cf8:	10c00215 	stw	r3,8(r2)
    7cfc:	e4800204 	addi	r18,fp,8
    7d00:	2000391e 	bne	r4,zero,7de8 <_realloc_r+0x4d0>
    7d04:	30800530 	cmpltui	r2,r6,20
    7d08:	1000351e 	bne	r2,zero,7de0 <_realloc_r+0x4c8>
    7d0c:	80c00017 	ldw	r3,0(r16)
    7d10:	30800728 	cmpgeui	r2,r6,28
    7d14:	e0c00215 	stw	r3,8(fp)
    7d18:	80c00117 	ldw	r3,4(r16)
    7d1c:	e0c00315 	stw	r3,12(fp)
    7d20:	10003c1e 	bne	r2,zero,7e14 <_realloc_r+0x4fc>
    7d24:	84000204 	addi	r16,r16,8
    7d28:	e0800404 	addi	r2,fp,16
    7d2c:	80c00017 	ldw	r3,0(r16)
    7d30:	10c00015 	stw	r3,0(r2)
    7d34:	80c00117 	ldw	r3,4(r16)
    7d38:	10c00115 	stw	r3,4(r2)
    7d3c:	80c00217 	ldw	r3,8(r16)
    7d40:	10c00215 	stw	r3,8(r2)
    7d44:	e447883a 	add	r3,fp,r17
    7d48:	b445c83a 	sub	r2,r22,r17
    7d4c:	b8c00215 	stw	r3,8(r23)
    7d50:	10800054 	ori	r2,r2,1
    7d54:	18800115 	stw	r2,4(r3)
    7d58:	e0800117 	ldw	r2,4(fp)
    7d5c:	9809883a 	mov	r4,r19
    7d60:	1080004c 	andi	r2,r2,1
    7d64:	1462b03a 	or	r17,r2,r17
    7d68:	e4400115 	stw	r17,4(fp)
    7d6c:	000e2b00 	call	e2b0 <__malloc_unlock>
    7d70:	003f5406 	br	7ac4 <_realloc_r+0x1ac>
    7d74:	80800217 	ldw	r2,8(r16)
    7d78:	31800920 	cmpeqi	r6,r6,36
    7d7c:	90800215 	stw	r2,8(r18)
    7d80:	80800317 	ldw	r2,12(r16)
    7d84:	90800315 	stw	r2,12(r18)
    7d88:	30000e1e 	bne	r6,zero,7dc4 <_realloc_r+0x4ac>
    7d8c:	80c00404 	addi	r3,r16,16
    7d90:	90800404 	addi	r2,r18,16
    7d94:	003f6c06 	br	7b48 <_realloc_r+0x230>
    7d98:	2005883a 	mov	r2,r4
    7d9c:	003f2b06 	br	7a4c <_realloc_r+0x134>
    7da0:	80800217 	ldw	r2,8(r16)
    7da4:	31800920 	cmpeqi	r6,r6,36
    7da8:	e0800415 	stw	r2,16(fp)
    7dac:	80800317 	ldw	r2,12(r16)
    7db0:	e0800515 	stw	r2,20(fp)
    7db4:	3000101e 	bne	r6,zero,7df8 <_realloc_r+0x4e0>
    7db8:	84000404 	addi	r16,r16,16
    7dbc:	e0800604 	addi	r2,fp,24
    7dc0:	003f2206 	br	7a4c <_realloc_r+0x134>
    7dc4:	81000417 	ldw	r4,16(r16)
    7dc8:	80c00604 	addi	r3,r16,24
    7dcc:	90800604 	addi	r2,r18,24
    7dd0:	91000415 	stw	r4,16(r18)
    7dd4:	81000517 	ldw	r4,20(r16)
    7dd8:	91000515 	stw	r4,20(r18)
    7ddc:	003f5a06 	br	7b48 <_realloc_r+0x230>
    7de0:	9005883a 	mov	r2,r18
    7de4:	003fd106 	br	7d2c <_realloc_r+0x414>
    7de8:	800b883a 	mov	r5,r16
    7dec:	9009883a 	mov	r4,r18
    7df0:	000650c0 	call	650c <memmove>
    7df4:	003fd306 	br	7d44 <_realloc_r+0x42c>
    7df8:	80c00417 	ldw	r3,16(r16)
    7dfc:	84000604 	addi	r16,r16,24
    7e00:	e0800804 	addi	r2,fp,32
    7e04:	e0c00615 	stw	r3,24(fp)
    7e08:	80ffff17 	ldw	r3,-4(r16)
    7e0c:	e0c00715 	stw	r3,28(fp)
    7e10:	003f0e06 	br	7a4c <_realloc_r+0x134>
    7e14:	80800217 	ldw	r2,8(r16)
    7e18:	31800920 	cmpeqi	r6,r6,36
    7e1c:	e0800415 	stw	r2,16(fp)
    7e20:	80800317 	ldw	r2,12(r16)
    7e24:	e0800515 	stw	r2,20(fp)
    7e28:	3000031e 	bne	r6,zero,7e38 <_realloc_r+0x520>
    7e2c:	84000404 	addi	r16,r16,16
    7e30:	e0800604 	addi	r2,fp,24
    7e34:	003fbd06 	br	7d2c <_realloc_r+0x414>
    7e38:	80c00417 	ldw	r3,16(r16)
    7e3c:	84000604 	addi	r16,r16,24
    7e40:	e0800804 	addi	r2,fp,32
    7e44:	e0c00615 	stw	r3,24(fp)
    7e48:	80ffff17 	ldw	r3,-4(r16)
    7e4c:	e0c00715 	stw	r3,28(fp)
    7e50:	003fb606 	br	7d2c <_realloc_r+0x414>

00007e54 <_sbrk_r>:
    7e54:	defffe04 	addi	sp,sp,-8
    7e58:	dc000015 	stw	r16,0(sp)
    7e5c:	00800074 	movhi	r2,1
    7e60:	2021883a 	mov	r16,r4
    7e64:	2809883a 	mov	r4,r5
    7e68:	dfc00115 	stw	ra,4(sp)
    7e6c:	1012d215 	stw	zero,19272(r2)
    7e70:	000e4880 	call	e488 <sbrk>
    7e74:	10ffffd8 	cmpnei	r3,r2,-1
    7e78:	18000426 	beq	r3,zero,7e8c <_sbrk_r+0x38>
    7e7c:	dfc00117 	ldw	ra,4(sp)
    7e80:	dc000017 	ldw	r16,0(sp)
    7e84:	dec00204 	addi	sp,sp,8
    7e88:	f800283a 	ret
    7e8c:	00c00074 	movhi	r3,1
    7e90:	18d2d217 	ldw	r3,19272(r3)
    7e94:	183ff926 	beq	r3,zero,7e7c <_sbrk_r+0x28>
    7e98:	80c00015 	stw	r3,0(r16)
    7e9c:	dfc00117 	ldw	ra,4(sp)
    7ea0:	dc000017 	ldw	r16,0(sp)
    7ea4:	dec00204 	addi	sp,sp,8
    7ea8:	f800283a 	ret

00007eac <__sread>:
    7eac:	defffe04 	addi	sp,sp,-8
    7eb0:	dc000015 	stw	r16,0(sp)
    7eb4:	2821883a 	mov	r16,r5
    7eb8:	2940038f 	ldh	r5,14(r5)
    7ebc:	dfc00115 	stw	ra,4(sp)
    7ec0:	0009d200 	call	9d20 <_read_r>
    7ec4:	10000716 	blt	r2,zero,7ee4 <__sread+0x38>
    7ec8:	80c01417 	ldw	r3,80(r16)
    7ecc:	1887883a 	add	r3,r3,r2
    7ed0:	80c01415 	stw	r3,80(r16)
    7ed4:	dfc00117 	ldw	ra,4(sp)
    7ed8:	dc000017 	ldw	r16,0(sp)
    7edc:	dec00204 	addi	sp,sp,8
    7ee0:	f800283a 	ret
    7ee4:	80c0030b 	ldhu	r3,12(r16)
    7ee8:	18fbffcc 	andi	r3,r3,61439
    7eec:	80c0030d 	sth	r3,12(r16)
    7ef0:	dfc00117 	ldw	ra,4(sp)
    7ef4:	dc000017 	ldw	r16,0(sp)
    7ef8:	dec00204 	addi	sp,sp,8
    7efc:	f800283a 	ret

00007f00 <__seofread>:
    7f00:	0005883a 	mov	r2,zero
    7f04:	f800283a 	ret

00007f08 <__swrite>:
    7f08:	2880030b 	ldhu	r2,12(r5)
    7f0c:	defffb04 	addi	sp,sp,-20
    7f10:	dcc00315 	stw	r19,12(sp)
    7f14:	dc800215 	stw	r18,8(sp)
    7f18:	dc400115 	stw	r17,4(sp)
    7f1c:	dc000015 	stw	r16,0(sp)
    7f20:	dfc00415 	stw	ra,16(sp)
    7f24:	10c0400c 	andi	r3,r2,256
    7f28:	2821883a 	mov	r16,r5
    7f2c:	2023883a 	mov	r17,r4
    7f30:	3025883a 	mov	r18,r6
    7f34:	3827883a 	mov	r19,r7
    7f38:	18000d1e 	bne	r3,zero,7f70 <__swrite+0x68>
    7f3c:	8140038f 	ldh	r5,14(r16)
    7f40:	10bbffcc 	andi	r2,r2,61439
    7f44:	980f883a 	mov	r7,r19
    7f48:	900d883a 	mov	r6,r18
    7f4c:	8809883a 	mov	r4,r17
    7f50:	8080030d 	sth	r2,12(r16)
    7f54:	dfc00417 	ldw	ra,16(sp)
    7f58:	dcc00317 	ldw	r19,12(sp)
    7f5c:	dc800217 	ldw	r18,8(sp)
    7f60:	dc400117 	ldw	r17,4(sp)
    7f64:	dc000017 	ldw	r16,0(sp)
    7f68:	dec00504 	addi	sp,sp,20
    7f6c:	00094341 	jmpi	9434 <_write_r>
    7f70:	2940038f 	ldh	r5,14(r5)
    7f74:	01c00084 	movi	r7,2
    7f78:	000d883a 	mov	r6,zero
    7f7c:	0009c6c0 	call	9c6c <_lseek_r>
    7f80:	8080030b 	ldhu	r2,12(r16)
    7f84:	003fed06 	br	7f3c <__swrite+0x34>

00007f88 <__sseek>:
    7f88:	defffe04 	addi	sp,sp,-8
    7f8c:	dc000015 	stw	r16,0(sp)
    7f90:	2821883a 	mov	r16,r5
    7f94:	2940038f 	ldh	r5,14(r5)
    7f98:	dfc00115 	stw	ra,4(sp)
    7f9c:	0009c6c0 	call	9c6c <_lseek_r>
    7fa0:	10ffffd8 	cmpnei	r3,r2,-1
    7fa4:	18000826 	beq	r3,zero,7fc8 <__sseek+0x40>
    7fa8:	80c0030b 	ldhu	r3,12(r16)
    7fac:	80801415 	stw	r2,80(r16)
    7fb0:	18c40014 	ori	r3,r3,4096
    7fb4:	80c0030d 	sth	r3,12(r16)
    7fb8:	dfc00117 	ldw	ra,4(sp)
    7fbc:	dc000017 	ldw	r16,0(sp)
    7fc0:	dec00204 	addi	sp,sp,8
    7fc4:	f800283a 	ret
    7fc8:	80c0030b 	ldhu	r3,12(r16)
    7fcc:	18fbffcc 	andi	r3,r3,61439
    7fd0:	80c0030d 	sth	r3,12(r16)
    7fd4:	dfc00117 	ldw	ra,4(sp)
    7fd8:	dc000017 	ldw	r16,0(sp)
    7fdc:	dec00204 	addi	sp,sp,8
    7fe0:	f800283a 	ret

00007fe4 <__sclose>:
    7fe4:	2940038f 	ldh	r5,14(r5)
    7fe8:	00094981 	jmpi	9498 <_close_r>

00007fec <__sprint_r.part.0>:
    7fec:	28801917 	ldw	r2,100(r5)
    7ff0:	defff604 	addi	sp,sp,-40
    7ff4:	dcc00315 	stw	r19,12(sp)
    7ff8:	dfc00915 	stw	ra,36(sp)
    7ffc:	df000815 	stw	fp,32(sp)
    8000:	ddc00715 	stw	r23,28(sp)
    8004:	dd800615 	stw	r22,24(sp)
    8008:	dd400515 	stw	r21,20(sp)
    800c:	dd000415 	stw	r20,16(sp)
    8010:	dc800215 	stw	r18,8(sp)
    8014:	dc400115 	stw	r17,4(sp)
    8018:	dc000015 	stw	r16,0(sp)
    801c:	1088000c 	andi	r2,r2,8192
    8020:	3027883a 	mov	r19,r6
    8024:	10002c26 	beq	r2,zero,80d8 <__sprint_r.part.0+0xec>
    8028:	30800217 	ldw	r2,8(r6)
    802c:	35000017 	ldw	r20,0(r6)
    8030:	2821883a 	mov	r16,r5
    8034:	2023883a 	mov	r17,r4
    8038:	05bfff04 	movi	r22,-4
    803c:	10002426 	beq	r2,zero,80d0 <__sprint_r.part.0+0xe4>
    8040:	a5400117 	ldw	r21,4(r20)
    8044:	a5c00017 	ldw	r23,0(r20)
    8048:	a824d0ba 	srli	r18,r21,2
    804c:	90001b26 	beq	r18,zero,80bc <__sprint_r.part.0+0xd0>
    8050:	0039883a 	mov	fp,zero
    8054:	00000206 	br	8060 <__sprint_r.part.0+0x74>
    8058:	bdc00104 	addi	r23,r23,4
    805c:	97001626 	beq	r18,fp,80b8 <__sprint_r.part.0+0xcc>
    8060:	b9400017 	ldw	r5,0(r23)
    8064:	800d883a 	mov	r6,r16
    8068:	8809883a 	mov	r4,r17
    806c:	0009a240 	call	9a24 <_fputwc_r>
    8070:	10bfffe0 	cmpeqi	r2,r2,-1
    8074:	e7000044 	addi	fp,fp,1
    8078:	103ff726 	beq	r2,zero,8058 <__sprint_r.part.0+0x6c>
    807c:	00bfffc4 	movi	r2,-1
    8080:	98000215 	stw	zero,8(r19)
    8084:	98000115 	stw	zero,4(r19)
    8088:	dfc00917 	ldw	ra,36(sp)
    808c:	df000817 	ldw	fp,32(sp)
    8090:	ddc00717 	ldw	r23,28(sp)
    8094:	dd800617 	ldw	r22,24(sp)
    8098:	dd400517 	ldw	r21,20(sp)
    809c:	dd000417 	ldw	r20,16(sp)
    80a0:	dcc00317 	ldw	r19,12(sp)
    80a4:	dc800217 	ldw	r18,8(sp)
    80a8:	dc400117 	ldw	r17,4(sp)
    80ac:	dc000017 	ldw	r16,0(sp)
    80b0:	dec00a04 	addi	sp,sp,40
    80b4:	f800283a 	ret
    80b8:	98800217 	ldw	r2,8(r19)
    80bc:	adaa703a 	and	r21,r21,r22
    80c0:	1545c83a 	sub	r2,r2,r21
    80c4:	98800215 	stw	r2,8(r19)
    80c8:	a5000204 	addi	r20,r20,8
    80cc:	103fdc1e 	bne	r2,zero,8040 <__sprint_r.part.0+0x54>
    80d0:	0005883a 	mov	r2,zero
    80d4:	003fea06 	br	8080 <__sprint_r.part.0+0x94>
    80d8:	00053200 	call	5320 <__sfvwrite_r>
    80dc:	003fe806 	br	8080 <__sprint_r.part.0+0x94>

000080e0 <__sprint_r>:
    80e0:	30c00217 	ldw	r3,8(r6)
    80e4:	18000126 	beq	r3,zero,80ec <__sprint_r+0xc>
    80e8:	0007fec1 	jmpi	7fec <__sprint_r.part.0>
    80ec:	30000115 	stw	zero,4(r6)
    80f0:	0005883a 	mov	r2,zero
    80f4:	f800283a 	ret

000080f8 <___vfiprintf_internal_r>:
    80f8:	deffcf04 	addi	sp,sp,-196
    80fc:	dd802d15 	stw	r22,180(sp)
    8100:	dd402c15 	stw	r21,176(sp)
    8104:	dd002b15 	stw	r20,172(sp)
    8108:	dfc03015 	stw	ra,192(sp)
    810c:	df002f15 	stw	fp,188(sp)
    8110:	ddc02e15 	stw	r23,184(sp)
    8114:	dcc02a15 	stw	r19,168(sp)
    8118:	dc802915 	stw	r18,164(sp)
    811c:	dc402815 	stw	r17,160(sp)
    8120:	dc002715 	stw	r16,156(sp)
    8124:	d9c00415 	stw	r7,16(sp)
    8128:	202d883a 	mov	r22,r4
    812c:	282b883a 	mov	r21,r5
    8130:	3029883a 	mov	r20,r6
    8134:	20000226 	beq	r4,zero,8140 <___vfiprintf_internal_r+0x48>
    8138:	20800e17 	ldw	r2,56(r4)
    813c:	1001ba26 	beq	r2,zero,8828 <___vfiprintf_internal_r+0x730>
    8140:	a880030b 	ldhu	r2,12(r21)
    8144:	10c8000c 	andi	r3,r2,8192
    8148:	1800061e 	bne	r3,zero,8164 <___vfiprintf_internal_r+0x6c>
    814c:	a8c01917 	ldw	r3,100(r21)
    8150:	0137ffc4 	movi	r4,-8193
    8154:	10880014 	ori	r2,r2,8192
    8158:	1906703a 	and	r3,r3,r4
    815c:	a880030d 	sth	r2,12(r21)
    8160:	a8c01915 	stw	r3,100(r21)
    8164:	10c0020c 	andi	r3,r2,8
    8168:	18010526 	beq	r3,zero,8580 <___vfiprintf_internal_r+0x488>
    816c:	a8c00417 	ldw	r3,16(r21)
    8170:	18010326 	beq	r3,zero,8580 <___vfiprintf_internal_r+0x488>
    8174:	1080068c 	andi	r2,r2,26
    8178:	10800298 	cmpnei	r2,r2,10
    817c:	10010826 	beq	r2,zero,85a0 <___vfiprintf_internal_r+0x4a8>
    8180:	dc801704 	addi	r18,sp,92
    8184:	dc800a15 	stw	r18,40(sp)
    8188:	d8000c15 	stw	zero,48(sp)
    818c:	d8000b15 	stw	zero,44(sp)
    8190:	9021883a 	mov	r16,r18
    8194:	d8000515 	stw	zero,20(sp)
    8198:	d8000115 	stw	zero,4(sp)
    819c:	a0800007 	ldb	r2,0(r20)
    81a0:	1000e526 	beq	r2,zero,8538 <___vfiprintf_internal_r+0x440>
    81a4:	a023883a 	mov	r17,r20
    81a8:	00000306 	br	81b8 <___vfiprintf_internal_r+0xc0>
    81ac:	88800047 	ldb	r2,1(r17)
    81b0:	8c400044 	addi	r17,r17,1
    81b4:	10013026 	beq	r2,zero,8678 <___vfiprintf_internal_r+0x580>
    81b8:	10800958 	cmpnei	r2,r2,37
    81bc:	103ffb1e 	bne	r2,zero,81ac <___vfiprintf_internal_r+0xb4>
    81c0:	8d27c83a 	sub	r19,r17,r20
    81c4:	8d012e1e 	bne	r17,r20,8680 <___vfiprintf_internal_r+0x588>
    81c8:	88800003 	ldbu	r2,0(r17)
    81cc:	10803fcc 	andi	r2,r2,255
    81d0:	1080201c 	xori	r2,r2,128
    81d4:	10bfe004 	addi	r2,r2,-128
    81d8:	1000d726 	beq	r2,zero,8538 <___vfiprintf_internal_r+0x440>
    81dc:	88800047 	ldb	r2,1(r17)
    81e0:	8d000044 	addi	r20,r17,1
    81e4:	d8000945 	stb	zero,37(sp)
    81e8:	000b883a 	mov	r5,zero
    81ec:	000d883a 	mov	r6,zero
    81f0:	023fffc4 	movi	r8,-1
    81f4:	0023883a 	mov	r17,zero
    81f8:	001b883a 	mov	r13,zero
    81fc:	a5000044 	addi	r20,r20,1
    8200:	10fff804 	addi	r3,r2,-32
    8204:	19001668 	cmpgeui	r4,r3,89
    8208:	20006c1e 	bne	r4,zero,83bc <___vfiprintf_internal_r+0x2c4>
    820c:	180690ba 	slli	r3,r3,2
    8210:	01000074 	movhi	r4,1
    8214:	1909883a 	add	r4,r3,r4
    8218:	20e08817 	ldw	r3,-32224(r4)
    821c:	1800683a 	jmp	r3
    8220:	00008a48 	cmpgei	zero,zero,553
    8224:	000083bc 	xorhi	zero,zero,526
    8228:	000083bc 	xorhi	zero,zero,526
    822c:	00008a3c 	xorhi	zero,zero,552
    8230:	000083bc 	xorhi	zero,zero,526
    8234:	000083bc 	xorhi	zero,zero,526
    8238:	000083bc 	xorhi	zero,zero,526
    823c:	000083bc 	xorhi	zero,zero,526
    8240:	000083bc 	xorhi	zero,zero,526
    8244:	000083bc 	xorhi	zero,zero,526
    8248:	000088a4 	muli	zero,zero,546
    824c:	00008a2c 	andhi	zero,zero,552
    8250:	000083bc 	xorhi	zero,zero,526
    8254:	000088bc 	xorhi	zero,zero,546
    8258:	000088c8 	cmpgei	zero,zero,547
    825c:	000083bc 	xorhi	zero,zero,526
    8260:	00008a20 	cmpeqi	zero,zero,552
    8264:	00008384 	movi	zero,526
    8268:	00008384 	movi	zero,526
    826c:	00008384 	movi	zero,526
    8270:	00008384 	movi	zero,526
    8274:	00008384 	movi	zero,526
    8278:	00008384 	movi	zero,526
    827c:	00008384 	movi	zero,526
    8280:	00008384 	movi	zero,526
    8284:	00008384 	movi	zero,526
    8288:	000083bc 	xorhi	zero,zero,526
    828c:	000083bc 	xorhi	zero,zero,526
    8290:	000083bc 	xorhi	zero,zero,526
    8294:	000083bc 	xorhi	zero,zero,526
    8298:	000083bc 	xorhi	zero,zero,526
    829c:	000083bc 	xorhi	zero,zero,526
    82a0:	000083bc 	xorhi	zero,zero,526
    82a4:	000083bc 	xorhi	zero,zero,526
    82a8:	000083bc 	xorhi	zero,zero,526
    82ac:	000083bc 	xorhi	zero,zero,526
    82b0:	00008914 	movui	zero,548
    82b4:	000083bc 	xorhi	zero,zero,526
    82b8:	000083bc 	xorhi	zero,zero,526
    82bc:	000083bc 	xorhi	zero,zero,526
    82c0:	000083bc 	xorhi	zero,zero,526
    82c4:	000083bc 	xorhi	zero,zero,526
    82c8:	000083bc 	xorhi	zero,zero,526
    82cc:	000083bc 	xorhi	zero,zero,526
    82d0:	000083bc 	xorhi	zero,zero,526
    82d4:	000083bc 	xorhi	zero,zero,526
    82d8:	000083bc 	xorhi	zero,zero,526
    82dc:	00008610 	cmplti	zero,zero,536
    82e0:	000083bc 	xorhi	zero,zero,526
    82e4:	000083bc 	xorhi	zero,zero,526
    82e8:	000083bc 	xorhi	zero,zero,526
    82ec:	000083bc 	xorhi	zero,zero,526
    82f0:	000083bc 	xorhi	zero,zero,526
    82f4:	000085e8 	cmpgeui	zero,zero,535
    82f8:	000083bc 	xorhi	zero,zero,526
    82fc:	000083bc 	xorhi	zero,zero,526
    8300:	00008b18 	cmpnei	zero,zero,556
    8304:	000083bc 	xorhi	zero,zero,526
    8308:	000083bc 	xorhi	zero,zero,526
    830c:	000083bc 	xorhi	zero,zero,526
    8310:	000083bc 	xorhi	zero,zero,526
    8314:	000083bc 	xorhi	zero,zero,526
    8318:	000083bc 	xorhi	zero,zero,526
    831c:	000083bc 	xorhi	zero,zero,526
    8320:	000083bc 	xorhi	zero,zero,526
    8324:	000083bc 	xorhi	zero,zero,526
    8328:	000083bc 	xorhi	zero,zero,526
    832c:	00008af0 	cmpltui	zero,zero,555
    8330:	00008830 	cmpltui	zero,zero,544
    8334:	000083bc 	xorhi	zero,zero,526
    8338:	000083bc 	xorhi	zero,zero,526
    833c:	000083bc 	xorhi	zero,zero,526
    8340:	00008a90 	cmplti	zero,zero,554
    8344:	00008830 	cmpltui	zero,zero,544
    8348:	000083bc 	xorhi	zero,zero,526
    834c:	000083bc 	xorhi	zero,zero,526
    8350:	00008adc 	xori	zero,zero,555
    8354:	000083bc 	xorhi	zero,zero,526
    8358:	00008a9c 	xori	zero,zero,554
    835c:	00008614 	movui	zero,536
    8360:	00008c0c 	andi	zero,zero,560
    8364:	00008c00 	call	8c0 <__floatsisf+0x80>
    8368:	000083bc 	xorhi	zero,zero,526
    836c:	00008ba8 	cmpgeui	zero,zero,558
    8370:	000083bc 	xorhi	zero,zero,526
    8374:	000085ec 	andhi	zero,zero,535
    8378:	000083bc 	xorhi	zero,zero,526
    837c:	000083bc 	xorhi	zero,zero,526
    8380:	00008b60 	cmpeqi	zero,zero,557
    8384:	0023883a 	mov	r17,zero
    8388:	113ff404 	addi	r4,r2,-48
    838c:	880690ba 	slli	r3,r17,2
    8390:	a0800007 	ldb	r2,0(r20)
    8394:	a5000044 	addi	r20,r20,1
    8398:	1c63883a 	add	r17,r3,r17
    839c:	8c63883a 	add	r17,r17,r17
    83a0:	2463883a 	add	r17,r4,r17
    83a4:	113ff404 	addi	r4,r2,-48
    83a8:	20c002b0 	cmpltui	r3,r4,10
    83ac:	183ff71e 	bne	r3,zero,838c <___vfiprintf_internal_r+0x294>
    83b0:	10fff804 	addi	r3,r2,-32
    83b4:	19001668 	cmpgeui	r4,r3,89
    83b8:	203f9426 	beq	r4,zero,820c <___vfiprintf_internal_r+0x114>
    83bc:	29403fcc 	andi	r5,r5,255
    83c0:	2803b61e 	bne	r5,zero,929c <___vfiprintf_internal_r+0x11a4>
    83c4:	10005c26 	beq	r2,zero,8538 <___vfiprintf_internal_r+0x440>
    83c8:	d8800d05 	stb	r2,52(sp)
    83cc:	d8000945 	stb	zero,37(sp)
    83d0:	05c00044 	movi	r23,1
    83d4:	07000044 	movi	fp,1
    83d8:	dcc00d04 	addi	r19,sp,52
    83dc:	db400015 	stw	r13,0(sp)
    83e0:	0011883a 	mov	r8,zero
    83e4:	d8800017 	ldw	r2,0(sp)
    83e8:	1380008c 	andi	r14,r2,2
    83ec:	70000126 	beq	r14,zero,83f4 <___vfiprintf_internal_r+0x2fc>
    83f0:	bdc00084 	addi	r23,r23,2
    83f4:	d8800017 	ldw	r2,0(sp)
    83f8:	d9000b17 	ldw	r4,44(sp)
    83fc:	1340210c 	andi	r13,r2,132
    8400:	21800044 	addi	r6,r4,1
    8404:	d8800c17 	ldw	r2,48(sp)
    8408:	300b883a 	mov	r5,r6
    840c:	6800021e 	bne	r13,zero,8418 <___vfiprintf_internal_r+0x320>
    8410:	8dc7c83a 	sub	r3,r17,r23
    8414:	00c2e516 	blt	zero,r3,8fac <___vfiprintf_internal_r+0xeb4>
    8418:	d8c00947 	ldb	r3,37(sp)
    841c:	18000c26 	beq	r3,zero,8450 <___vfiprintf_internal_r+0x358>
    8420:	d8c00944 	addi	r3,sp,37
    8424:	10800044 	addi	r2,r2,1
    8428:	80c00015 	stw	r3,0(r16)
    842c:	00c00044 	movi	r3,1
    8430:	80c00115 	stw	r3,4(r16)
    8434:	d8800c15 	stw	r2,48(sp)
    8438:	d9400b15 	stw	r5,44(sp)
    843c:	28c00208 	cmpgei	r3,r5,8
    8440:	1802a01e 	bne	r3,zero,8ec4 <___vfiprintf_internal_r+0xdcc>
    8444:	2809883a 	mov	r4,r5
    8448:	84000204 	addi	r16,r16,8
    844c:	29400044 	addi	r5,r5,1
    8450:	70001726 	beq	r14,zero,84b0 <___vfiprintf_internal_r+0x3b8>
    8454:	d8c00984 	addi	r3,sp,38
    8458:	10800084 	addi	r2,r2,2
    845c:	80c00015 	stw	r3,0(r16)
    8460:	00c00084 	movi	r3,2
    8464:	80c00115 	stw	r3,4(r16)
    8468:	d8800c15 	stw	r2,48(sp)
    846c:	d9400b15 	stw	r5,44(sp)
    8470:	28c00208 	cmpgei	r3,r5,8
    8474:	1802aa26 	beq	r3,zero,8f20 <___vfiprintf_internal_r+0xe28>
    8478:	10032526 	beq	r2,zero,9110 <___vfiprintf_internal_r+0x1018>
    847c:	d9800a04 	addi	r6,sp,40
    8480:	a80b883a 	mov	r5,r21
    8484:	b009883a 	mov	r4,r22
    8488:	da000315 	stw	r8,12(sp)
    848c:	db400215 	stw	r13,8(sp)
    8490:	0007fec0 	call	7fec <__sprint_r.part.0>
    8494:	10002a1e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    8498:	d9000b17 	ldw	r4,44(sp)
    849c:	d8800c17 	ldw	r2,48(sp)
    84a0:	da000317 	ldw	r8,12(sp)
    84a4:	db400217 	ldw	r13,8(sp)
    84a8:	9021883a 	mov	r16,r18
    84ac:	21400044 	addi	r5,r4,1
    84b0:	6b402018 	cmpnei	r13,r13,128
    84b4:	6801f126 	beq	r13,zero,8c7c <___vfiprintf_internal_r+0xb84>
    84b8:	4711c83a 	sub	r8,r8,fp
    84bc:	02022e16 	blt	zero,r8,8d78 <___vfiprintf_internal_r+0xc80>
    84c0:	e085883a 	add	r2,fp,r2
    84c4:	d9400b15 	stw	r5,44(sp)
    84c8:	84c00015 	stw	r19,0(r16)
    84cc:	87000115 	stw	fp,4(r16)
    84d0:	d8800c15 	stw	r2,48(sp)
    84d4:	29400208 	cmpgei	r5,r5,8
    84d8:	2801e226 	beq	r5,zero,8c64 <___vfiprintf_internal_r+0xb6c>
    84dc:	10009826 	beq	r2,zero,8740 <___vfiprintf_internal_r+0x648>
    84e0:	d9800a04 	addi	r6,sp,40
    84e4:	a80b883a 	mov	r5,r21
    84e8:	b009883a 	mov	r4,r22
    84ec:	0007fec0 	call	7fec <__sprint_r.part.0>
    84f0:	1000131e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    84f4:	d8800c17 	ldw	r2,48(sp)
    84f8:	9021883a 	mov	r16,r18
    84fc:	d8c00017 	ldw	r3,0(sp)
    8500:	1cc0010c 	andi	r19,r3,4
    8504:	98000226 	beq	r19,zero,8510 <___vfiprintf_internal_r+0x418>
    8508:	8de7c83a 	sub	r19,r17,r23
    850c:	04c09316 	blt	zero,r19,875c <___vfiprintf_internal_r+0x664>
    8510:	8dc0010e 	bge	r17,r23,8518 <___vfiprintf_internal_r+0x420>
    8514:	b823883a 	mov	r17,r23
    8518:	d8c00117 	ldw	r3,4(sp)
    851c:	1c47883a 	add	r3,r3,r17
    8520:	d8c00115 	stw	r3,4(sp)
    8524:	10025d1e 	bne	r2,zero,8e9c <___vfiprintf_internal_r+0xda4>
    8528:	a0800007 	ldb	r2,0(r20)
    852c:	d8000b15 	stw	zero,44(sp)
    8530:	9021883a 	mov	r16,r18
    8534:	103f1b1e 	bne	r2,zero,81a4 <___vfiprintf_internal_r+0xac>
    8538:	d8800c17 	ldw	r2,48(sp)
    853c:	1003591e 	bne	r2,zero,92a4 <___vfiprintf_internal_r+0x11ac>
    8540:	a880030b 	ldhu	r2,12(r21)
    8544:	1080100c 	andi	r2,r2,64
    8548:	1003741e 	bne	r2,zero,931c <___vfiprintf_internal_r+0x1224>
    854c:	d8800117 	ldw	r2,4(sp)
    8550:	dfc03017 	ldw	ra,192(sp)
    8554:	df002f17 	ldw	fp,188(sp)
    8558:	ddc02e17 	ldw	r23,184(sp)
    855c:	dd802d17 	ldw	r22,180(sp)
    8560:	dd402c17 	ldw	r21,176(sp)
    8564:	dd002b17 	ldw	r20,172(sp)
    8568:	dcc02a17 	ldw	r19,168(sp)
    856c:	dc802917 	ldw	r18,164(sp)
    8570:	dc402817 	ldw	r17,160(sp)
    8574:	dc002717 	ldw	r16,156(sp)
    8578:	dec03104 	addi	sp,sp,196
    857c:	f800283a 	ret
    8580:	a80b883a 	mov	r5,r21
    8584:	b009883a 	mov	r4,r22
    8588:	0002d840 	call	2d84 <__swsetup_r>
    858c:	1003631e 	bne	r2,zero,931c <___vfiprintf_internal_r+0x1224>
    8590:	a880030b 	ldhu	r2,12(r21)
    8594:	1080068c 	andi	r2,r2,26
    8598:	10800298 	cmpnei	r2,r2,10
    859c:	103ef81e 	bne	r2,zero,8180 <___vfiprintf_internal_r+0x88>
    85a0:	a880038f 	ldh	r2,14(r21)
    85a4:	103ef616 	blt	r2,zero,8180 <___vfiprintf_internal_r+0x88>
    85a8:	d9c00417 	ldw	r7,16(sp)
    85ac:	a00d883a 	mov	r6,r20
    85b0:	a80b883a 	mov	r5,r21
    85b4:	b009883a 	mov	r4,r22
    85b8:	dfc03017 	ldw	ra,192(sp)
    85bc:	df002f17 	ldw	fp,188(sp)
    85c0:	ddc02e17 	ldw	r23,184(sp)
    85c4:	dd802d17 	ldw	r22,180(sp)
    85c8:	dd402c17 	ldw	r21,176(sp)
    85cc:	dd002b17 	ldw	r20,172(sp)
    85d0:	dcc02a17 	ldw	r19,168(sp)
    85d4:	dc802917 	ldw	r18,164(sp)
    85d8:	dc402817 	ldw	r17,160(sp)
    85dc:	dc002717 	ldw	r16,156(sp)
    85e0:	dec03104 	addi	sp,sp,196
    85e4:	00093741 	jmpi	9374 <__sbprintf>
    85e8:	6b400414 	ori	r13,r13,16
    85ec:	6880080c 	andi	r2,r13,32
    85f0:	10004726 	beq	r2,zero,8710 <___vfiprintf_internal_r+0x618>
    85f4:	d8c00417 	ldw	r3,16(sp)
    85f8:	00800044 	movi	r2,1
    85fc:	1dc00017 	ldw	r23,0(r3)
    8600:	1f000117 	ldw	fp,4(r3)
    8604:	18c00204 	addi	r3,r3,8
    8608:	d8c00415 	stw	r3,16(sp)
    860c:	00000906 	br	8634 <___vfiprintf_internal_r+0x53c>
    8610:	6b400414 	ori	r13,r13,16
    8614:	6880080c 	andi	r2,r13,32
    8618:	10003126 	beq	r2,zero,86e0 <___vfiprintf_internal_r+0x5e8>
    861c:	d8c00417 	ldw	r3,16(sp)
    8620:	0005883a 	mov	r2,zero
    8624:	1dc00017 	ldw	r23,0(r3)
    8628:	1f000117 	ldw	fp,4(r3)
    862c:	18c00204 	addi	r3,r3,8
    8630:	d8c00415 	stw	r3,16(sp)
    8634:	d8000945 	stb	zero,37(sp)
    8638:	40ffffe0 	cmpeqi	r3,r8,-1
    863c:	001d883a 	mov	r14,zero
    8640:	1800d11e 	bne	r3,zero,8988 <___vfiprintf_internal_r+0x890>
    8644:	04ffdfc4 	movi	r19,-129
    8648:	6cc8703a 	and	r4,r13,r19
    864c:	bf06b03a 	or	r3,r23,fp
    8650:	d9000015 	stw	r4,0(sp)
    8654:	1802361e 	bne	r3,zero,8f30 <___vfiprintf_internal_r+0xe38>
    8658:	4001fb1e 	bne	r8,zero,8e48 <___vfiprintf_internal_r+0xd50>
    865c:	1002a31e 	bne	r2,zero,90ec <___vfiprintf_internal_r+0xff4>
    8660:	6f00004c 	andi	fp,r13,1
    8664:	e002c726 	beq	fp,zero,9184 <___vfiprintf_internal_r+0x108c>
    8668:	00800c04 	movi	r2,48
    866c:	d88016c5 	stb	r2,91(sp)
    8670:	dcc016c4 	addi	r19,sp,91
    8674:	0000e106 	br	89fc <___vfiprintf_internal_r+0x904>
    8678:	8d27c83a 	sub	r19,r17,r20
    867c:	8d3fae26 	beq	r17,r20,8538 <___vfiprintf_internal_r+0x440>
    8680:	d8c00c17 	ldw	r3,48(sp)
    8684:	d8800b17 	ldw	r2,44(sp)
    8688:	85000015 	stw	r20,0(r16)
    868c:	98c7883a 	add	r3,r19,r3
    8690:	10800044 	addi	r2,r2,1
    8694:	d8800b15 	stw	r2,44(sp)
    8698:	84c00115 	stw	r19,4(r16)
    869c:	d8c00c15 	stw	r3,48(sp)
    86a0:	10800208 	cmpgei	r2,r2,8
    86a4:	1000061e 	bne	r2,zero,86c0 <___vfiprintf_internal_r+0x5c8>
    86a8:	84000204 	addi	r16,r16,8
    86ac:	d8c00117 	ldw	r3,4(sp)
    86b0:	88800003 	ldbu	r2,0(r17)
    86b4:	1cc7883a 	add	r3,r3,r19
    86b8:	d8c00115 	stw	r3,4(sp)
    86bc:	003ec306 	br	81cc <___vfiprintf_internal_r+0xd4>
    86c0:	18028626 	beq	r3,zero,90dc <___vfiprintf_internal_r+0xfe4>
    86c4:	d9800a04 	addi	r6,sp,40
    86c8:	a80b883a 	mov	r5,r21
    86cc:	b009883a 	mov	r4,r22
    86d0:	0007fec0 	call	7fec <__sprint_r.part.0>
    86d4:	103f9a1e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    86d8:	9021883a 	mov	r16,r18
    86dc:	003ff306 	br	86ac <___vfiprintf_internal_r+0x5b4>
    86e0:	d8c00417 	ldw	r3,16(sp)
    86e4:	6880040c 	andi	r2,r13,16
    86e8:	1dc00017 	ldw	r23,0(r3)
    86ec:	18c00104 	addi	r3,r3,4
    86f0:	d8c00415 	stw	r3,16(sp)
    86f4:	1000031e 	bne	r2,zero,8704 <___vfiprintf_internal_r+0x60c>
    86f8:	6880100c 	andi	r2,r13,64
    86fc:	10000126 	beq	r2,zero,8704 <___vfiprintf_internal_r+0x60c>
    8700:	bdffffcc 	andi	r23,r23,65535
    8704:	0039883a 	mov	fp,zero
    8708:	0005883a 	mov	r2,zero
    870c:	003fc906 	br	8634 <___vfiprintf_internal_r+0x53c>
    8710:	d8c00417 	ldw	r3,16(sp)
    8714:	6880040c 	andi	r2,r13,16
    8718:	1dc00017 	ldw	r23,0(r3)
    871c:	18c00104 	addi	r3,r3,4
    8720:	d8c00415 	stw	r3,16(sp)
    8724:	1000031e 	bne	r2,zero,8734 <___vfiprintf_internal_r+0x63c>
    8728:	6880100c 	andi	r2,r13,64
    872c:	10000126 	beq	r2,zero,8734 <___vfiprintf_internal_r+0x63c>
    8730:	bdffffcc 	andi	r23,r23,65535
    8734:	0039883a 	mov	fp,zero
    8738:	00800044 	movi	r2,1
    873c:	003fbd06 	br	8634 <___vfiprintf_internal_r+0x53c>
    8740:	d8c00017 	ldw	r3,0(sp)
    8744:	d8000b15 	stw	zero,44(sp)
    8748:	1cc0010c 	andi	r19,r3,4
    874c:	98025226 	beq	r19,zero,9098 <___vfiprintf_internal_r+0xfa0>
    8750:	8de7c83a 	sub	r19,r17,r23
    8754:	04c2500e 	bge	zero,r19,9098 <___vfiprintf_internal_r+0xfa0>
    8758:	9021883a 	mov	r16,r18
    875c:	98c00450 	cmplti	r3,r19,17
    8760:	d9000b17 	ldw	r4,44(sp)
    8764:	01c00074 	movhi	r7,1
    8768:	1802e61e 	bne	r3,zero,9304 <___vfiprintf_internal_r+0x120c>
    876c:	39c3ae04 	addi	r7,r7,3768
    8770:	07000404 	movi	fp,16
    8774:	00000606 	br	8790 <___vfiprintf_internal_r+0x698>
    8778:	21400084 	addi	r5,r4,2
    877c:	84000204 	addi	r16,r16,8
    8780:	1809883a 	mov	r4,r3
    8784:	9cfffc04 	addi	r19,r19,-16
    8788:	98c00448 	cmpgei	r3,r19,17
    878c:	18001726 	beq	r3,zero,87ec <___vfiprintf_internal_r+0x6f4>
    8790:	20c00044 	addi	r3,r4,1
    8794:	10800404 	addi	r2,r2,16
    8798:	81c00015 	stw	r7,0(r16)
    879c:	87000115 	stw	fp,4(r16)
    87a0:	d8800c15 	stw	r2,48(sp)
    87a4:	d8c00b15 	stw	r3,44(sp)
    87a8:	19400208 	cmpgei	r5,r3,8
    87ac:	283ff226 	beq	r5,zero,8778 <___vfiprintf_internal_r+0x680>
    87b0:	d9800a04 	addi	r6,sp,40
    87b4:	a80b883a 	mov	r5,r21
    87b8:	b009883a 	mov	r4,r22
    87bc:	10012b26 	beq	r2,zero,8c6c <___vfiprintf_internal_r+0xb74>
    87c0:	d9c00015 	stw	r7,0(sp)
    87c4:	0007fec0 	call	7fec <__sprint_r.part.0>
    87c8:	103f5d1e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    87cc:	d9000b17 	ldw	r4,44(sp)
    87d0:	9cfffc04 	addi	r19,r19,-16
    87d4:	98c00448 	cmpgei	r3,r19,17
    87d8:	d8800c17 	ldw	r2,48(sp)
    87dc:	d9c00017 	ldw	r7,0(sp)
    87e0:	9021883a 	mov	r16,r18
    87e4:	21400044 	addi	r5,r4,1
    87e8:	183fe91e 	bne	r3,zero,8790 <___vfiprintf_internal_r+0x698>
    87ec:	14c5883a 	add	r2,r2,r19
    87f0:	d9400b15 	stw	r5,44(sp)
    87f4:	81c00015 	stw	r7,0(r16)
    87f8:	84c00115 	stw	r19,4(r16)
    87fc:	d8800c15 	stw	r2,48(sp)
    8800:	29400210 	cmplti	r5,r5,8
    8804:	283f421e 	bne	r5,zero,8510 <___vfiprintf_internal_r+0x418>
    8808:	10022326 	beq	r2,zero,9098 <___vfiprintf_internal_r+0xfa0>
    880c:	d9800a04 	addi	r6,sp,40
    8810:	a80b883a 	mov	r5,r21
    8814:	b009883a 	mov	r4,r22
    8818:	0007fec0 	call	7fec <__sprint_r.part.0>
    881c:	103f481e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    8820:	d8800c17 	ldw	r2,48(sp)
    8824:	003f3a06 	br	8510 <___vfiprintf_internal_r+0x418>
    8828:	0004ec00 	call	4ec0 <__sinit>
    882c:	003e4406 	br	8140 <___vfiprintf_internal_r+0x48>
    8830:	29403fcc 	andi	r5,r5,255
    8834:	2802b11e 	bne	r5,zero,92fc <___vfiprintf_internal_r+0x1204>
    8838:	6880080c 	andi	r2,r13,32
    883c:	10003a26 	beq	r2,zero,8928 <___vfiprintf_internal_r+0x830>
    8840:	d8c00417 	ldw	r3,16(sp)
    8844:	18800117 	ldw	r2,4(r3)
    8848:	1dc00017 	ldw	r23,0(r3)
    884c:	18c00204 	addi	r3,r3,8
    8850:	d8c00415 	stw	r3,16(sp)
    8854:	1039883a 	mov	fp,r2
    8858:	10004116 	blt	r2,zero,8960 <___vfiprintf_internal_r+0x868>
    885c:	40bfffd8 	cmpnei	r2,r8,-1
    8860:	db800943 	ldbu	r14,37(sp)
    8864:	10000626 	beq	r2,zero,8880 <___vfiprintf_internal_r+0x788>
    8868:	04ffdfc4 	movi	r19,-129
    886c:	6cc6703a 	and	r3,r13,r19
    8870:	bf04b03a 	or	r2,r23,fp
    8874:	d8c00015 	stw	r3,0(sp)
    8878:	10021b26 	beq	r2,zero,90e8 <___vfiprintf_internal_r+0xff0>
    887c:	db400017 	ldw	r13,0(sp)
    8880:	e001ad1e 	bne	fp,zero,8f38 <___vfiprintf_internal_r+0xe40>
    8884:	b88002a8 	cmpgeui	r2,r23,10
    8888:	1001ab1e 	bne	r2,zero,8f38 <___vfiprintf_internal_r+0xe40>
    888c:	bdc00c04 	addi	r23,r23,48
    8890:	ddc016c5 	stb	r23,91(sp)
    8894:	db400015 	stw	r13,0(sp)
    8898:	07000044 	movi	fp,1
    889c:	dcc016c4 	addi	r19,sp,91
    88a0:	00005606 	br	89fc <___vfiprintf_internal_r+0x904>
    88a4:	d8800417 	ldw	r2,16(sp)
    88a8:	14400017 	ldw	r17,0(r2)
    88ac:	10c00104 	addi	r3,r2,4
    88b0:	8802310e 	bge	r17,zero,9178 <___vfiprintf_internal_r+0x1080>
    88b4:	0463c83a 	sub	r17,zero,r17
    88b8:	d8c00415 	stw	r3,16(sp)
    88bc:	a0800007 	ldb	r2,0(r20)
    88c0:	6b400114 	ori	r13,r13,4
    88c4:	003e4d06 	br	81fc <___vfiprintf_internal_r+0x104>
    88c8:	a0800007 	ldb	r2,0(r20)
    88cc:	a0c00044 	addi	r3,r20,1
    88d0:	11000aa0 	cmpeqi	r4,r2,42
    88d4:	2002941e 	bne	r4,zero,9328 <___vfiprintf_internal_r+0x1230>
    88d8:	113ff404 	addi	r4,r2,-48
    88dc:	21c002b0 	cmpltui	r7,r4,10
    88e0:	1829883a 	mov	r20,r3
    88e4:	0011883a 	mov	r8,zero
    88e8:	383e4526 	beq	r7,zero,8200 <___vfiprintf_internal_r+0x108>
    88ec:	400690ba 	slli	r3,r8,2
    88f0:	a0800007 	ldb	r2,0(r20)
    88f4:	a5000044 	addi	r20,r20,1
    88f8:	1a11883a 	add	r8,r3,r8
    88fc:	4211883a 	add	r8,r8,r8
    8900:	4111883a 	add	r8,r8,r4
    8904:	113ff404 	addi	r4,r2,-48
    8908:	20c002b0 	cmpltui	r3,r4,10
    890c:	183ff71e 	bne	r3,zero,88ec <___vfiprintf_internal_r+0x7f4>
    8910:	003e3b06 	br	8200 <___vfiprintf_internal_r+0x108>
    8914:	29403fcc 	andi	r5,r5,255
    8918:	28026d1e 	bne	r5,zero,92d0 <___vfiprintf_internal_r+0x11d8>
    891c:	6b400414 	ori	r13,r13,16
    8920:	6880080c 	andi	r2,r13,32
    8924:	103fc61e 	bne	r2,zero,8840 <___vfiprintf_internal_r+0x748>
    8928:	d8c00417 	ldw	r3,16(sp)
    892c:	6880040c 	andi	r2,r13,16
    8930:	1dc00017 	ldw	r23,0(r3)
    8934:	18c00104 	addi	r3,r3,4
    8938:	d8c00415 	stw	r3,16(sp)
    893c:	1001f11e 	bne	r2,zero,9104 <___vfiprintf_internal_r+0x100c>
    8940:	6880100c 	andi	r2,r13,64
    8944:	1001ef26 	beq	r2,zero,9104 <___vfiprintf_internal_r+0x100c>
    8948:	bdffffcc 	andi	r23,r23,65535
    894c:	bde0001c 	xori	r23,r23,32768
    8950:	bde00004 	addi	r23,r23,-32768
    8954:	b839d7fa 	srai	fp,r23,31
    8958:	e005883a 	mov	r2,fp
    895c:	103fbf0e 	bge	r2,zero,885c <___vfiprintf_internal_r+0x764>
    8960:	b804c03a 	cmpne	r2,r23,zero
    8964:	0739c83a 	sub	fp,zero,fp
    8968:	e0b9c83a 	sub	fp,fp,r2
    896c:	00800b44 	movi	r2,45
    8970:	d8800945 	stb	r2,37(sp)
    8974:	40ffffe0 	cmpeqi	r3,r8,-1
    8978:	05efc83a 	sub	r23,zero,r23
    897c:	03800b44 	movi	r14,45
    8980:	00800044 	movi	r2,1
    8984:	183f2f26 	beq	r3,zero,8644 <___vfiprintf_internal_r+0x54c>
    8988:	10c00060 	cmpeqi	r3,r2,1
    898c:	183fbc1e 	bne	r3,zero,8880 <___vfiprintf_internal_r+0x788>
    8990:	108000a0 	cmpeqi	r2,r2,2
    8994:	1001311e 	bne	r2,zero,8e5c <___vfiprintf_internal_r+0xd64>
    8998:	9027883a 	mov	r19,r18
    899c:	e008977a 	slli	r4,fp,29
    89a0:	b806d0fa 	srli	r3,r23,3
    89a4:	e038d0fa 	srli	fp,fp,3
    89a8:	b88001cc 	andi	r2,r23,7
    89ac:	10800c04 	addi	r2,r2,48
    89b0:	20eeb03a 	or	r23,r4,r3
    89b4:	98bfffc5 	stb	r2,-1(r19)
    89b8:	bf06b03a 	or	r3,r23,fp
    89bc:	980b883a 	mov	r5,r19
    89c0:	9cffffc4 	addi	r19,r19,-1
    89c4:	183ff51e 	bne	r3,zero,899c <___vfiprintf_internal_r+0x8a4>
    89c8:	68c0004c 	andi	r3,r13,1
    89cc:	18013026 	beq	r3,zero,8e90 <___vfiprintf_internal_r+0xd98>
    89d0:	10803fcc 	andi	r2,r2,255
    89d4:	1080201c 	xori	r2,r2,128
    89d8:	10bfe004 	addi	r2,r2,-128
    89dc:	10800c18 	cmpnei	r2,r2,48
    89e0:	10012b26 	beq	r2,zero,8e90 <___vfiprintf_internal_r+0xd98>
    89e4:	297fff84 	addi	r5,r5,-2
    89e8:	00800c04 	movi	r2,48
    89ec:	98bfffc5 	stb	r2,-1(r19)
    89f0:	9179c83a 	sub	fp,r18,r5
    89f4:	db400015 	stw	r13,0(sp)
    89f8:	2827883a 	mov	r19,r5
    89fc:	e02f883a 	mov	r23,fp
    8a00:	e200010e 	bge	fp,r8,8a08 <___vfiprintf_internal_r+0x910>
    8a04:	402f883a 	mov	r23,r8
    8a08:	73803fcc 	andi	r14,r14,255
    8a0c:	7380201c 	xori	r14,r14,128
    8a10:	73bfe004 	addi	r14,r14,-128
    8a14:	703e7326 	beq	r14,zero,83e4 <___vfiprintf_internal_r+0x2ec>
    8a18:	bdc00044 	addi	r23,r23,1
    8a1c:	003e7106 	br	83e4 <___vfiprintf_internal_r+0x2ec>
    8a20:	a0800007 	ldb	r2,0(r20)
    8a24:	6b402014 	ori	r13,r13,128
    8a28:	003df406 	br	81fc <___vfiprintf_internal_r+0x104>
    8a2c:	a0800007 	ldb	r2,0(r20)
    8a30:	01400044 	movi	r5,1
    8a34:	01800ac4 	movi	r6,43
    8a38:	003df006 	br	81fc <___vfiprintf_internal_r+0x104>
    8a3c:	a0800007 	ldb	r2,0(r20)
    8a40:	6b400054 	ori	r13,r13,1
    8a44:	003ded06 	br	81fc <___vfiprintf_internal_r+0x104>
    8a48:	30c03fcc 	andi	r3,r6,255
    8a4c:	18c0201c 	xori	r3,r3,128
    8a50:	18ffe004 	addi	r3,r3,-128
    8a54:	a0800003 	ldbu	r2,0(r20)
    8a58:	1800091e 	bne	r3,zero,8a80 <___vfiprintf_internal_r+0x988>
    8a5c:	10803fcc 	andi	r2,r2,255
    8a60:	1080201c 	xori	r2,r2,128
    8a64:	01400044 	movi	r5,1
    8a68:	01800804 	movi	r6,32
    8a6c:	10bfe004 	addi	r2,r2,-128
    8a70:	003de206 	br	81fc <___vfiprintf_internal_r+0x104>
    8a74:	a0800043 	ldbu	r2,1(r20)
    8a78:	6b400814 	ori	r13,r13,32
    8a7c:	a5000044 	addi	r20,r20,1
    8a80:	10803fcc 	andi	r2,r2,255
    8a84:	1080201c 	xori	r2,r2,128
    8a88:	10bfe004 	addi	r2,r2,-128
    8a8c:	003ddb06 	br	81fc <___vfiprintf_internal_r+0x104>
    8a90:	a0800007 	ldb	r2,0(r20)
    8a94:	6b401014 	ori	r13,r13,64
    8a98:	003dd806 	br	81fc <___vfiprintf_internal_r+0x104>
    8a9c:	29403fcc 	andi	r5,r5,255
    8aa0:	28020f1e 	bne	r5,zero,92e0 <___vfiprintf_internal_r+0x11e8>
    8aa4:	d9000417 	ldw	r4,16(sp)
    8aa8:	6880080c 	andi	r2,r13,32
    8aac:	20c00104 	addi	r3,r4,4
    8ab0:	1001c01e 	bne	r2,zero,91b4 <___vfiprintf_internal_r+0x10bc>
    8ab4:	6880040c 	andi	r2,r13,16
    8ab8:	1001df1e 	bne	r2,zero,9238 <___vfiprintf_internal_r+0x1140>
    8abc:	6b40100c 	andi	r13,r13,64
    8ac0:	6801dd26 	beq	r13,zero,9238 <___vfiprintf_internal_r+0x1140>
    8ac4:	d8800417 	ldw	r2,16(sp)
    8ac8:	d8c00415 	stw	r3,16(sp)
    8acc:	d8c00117 	ldw	r3,4(sp)
    8ad0:	10800017 	ldw	r2,0(r2)
    8ad4:	10c0000d 	sth	r3,0(r2)
    8ad8:	003db006 	br	819c <___vfiprintf_internal_r+0xa4>
    8adc:	a0800007 	ldb	r2,0(r20)
    8ae0:	10c01b18 	cmpnei	r3,r2,108
    8ae4:	183fe326 	beq	r3,zero,8a74 <___vfiprintf_internal_r+0x97c>
    8ae8:	6b400414 	ori	r13,r13,16
    8aec:	003dc306 	br	81fc <___vfiprintf_internal_r+0x104>
    8af0:	d8c00417 	ldw	r3,16(sp)
    8af4:	d8000945 	stb	zero,37(sp)
    8af8:	05c00044 	movi	r23,1
    8afc:	18800017 	ldw	r2,0(r3)
    8b00:	18c00104 	addi	r3,r3,4
    8b04:	d8c00415 	stw	r3,16(sp)
    8b08:	d8800d05 	stb	r2,52(sp)
    8b0c:	07000044 	movi	fp,1
    8b10:	dcc00d04 	addi	r19,sp,52
    8b14:	003e3106 	br	83dc <___vfiprintf_internal_r+0x2e4>
    8b18:	29403fcc 	andi	r5,r5,255
    8b1c:	2801ee1e 	bne	r5,zero,92d8 <___vfiprintf_internal_r+0x11e0>
    8b20:	00c00074 	movhi	r3,1
    8b24:	18c32804 	addi	r3,r3,3232
    8b28:	d8c00515 	stw	r3,20(sp)
    8b2c:	68c0080c 	andi	r3,r13,32
    8b30:	18001226 	beq	r3,zero,8b7c <___vfiprintf_internal_r+0xa84>
    8b34:	d8c00417 	ldw	r3,16(sp)
    8b38:	1dc00017 	ldw	r23,0(r3)
    8b3c:	1f000117 	ldw	fp,4(r3)
    8b40:	18c00204 	addi	r3,r3,8
    8b44:	d8c00415 	stw	r3,16(sp)
    8b48:	68c0004c 	andi	r3,r13,1
    8b4c:	18000226 	beq	r3,zero,8b58 <___vfiprintf_internal_r+0xa60>
    8b50:	bf06b03a 	or	r3,r23,fp
    8b54:	1801911e 	bne	r3,zero,919c <___vfiprintf_internal_r+0x10a4>
    8b58:	00800084 	movi	r2,2
    8b5c:	003eb506 	br	8634 <___vfiprintf_internal_r+0x53c>
    8b60:	29403fcc 	andi	r5,r5,255
    8b64:	2801e01e 	bne	r5,zero,92e8 <___vfiprintf_internal_r+0x11f0>
    8b68:	00c00074 	movhi	r3,1
    8b6c:	18c32304 	addi	r3,r3,3212
    8b70:	d8c00515 	stw	r3,20(sp)
    8b74:	68c0080c 	andi	r3,r13,32
    8b78:	183fee1e 	bne	r3,zero,8b34 <___vfiprintf_internal_r+0xa3c>
    8b7c:	d9000417 	ldw	r4,16(sp)
    8b80:	68c0040c 	andi	r3,r13,16
    8b84:	25c00017 	ldw	r23,0(r4)
    8b88:	21000104 	addi	r4,r4,4
    8b8c:	d9000415 	stw	r4,16(sp)
    8b90:	18015a1e 	bne	r3,zero,90fc <___vfiprintf_internal_r+0x1004>
    8b94:	68c0100c 	andi	r3,r13,64
    8b98:	18015826 	beq	r3,zero,90fc <___vfiprintf_internal_r+0x1004>
    8b9c:	bdffffcc 	andi	r23,r23,65535
    8ba0:	0039883a 	mov	fp,zero
    8ba4:	003fe806 	br	8b48 <___vfiprintf_internal_r+0xa50>
    8ba8:	d8800417 	ldw	r2,16(sp)
    8bac:	d8000945 	stb	zero,37(sp)
    8bb0:	14c00017 	ldw	r19,0(r2)
    8bb4:	10c00104 	addi	r3,r2,4
    8bb8:	9801a526 	beq	r19,zero,9250 <___vfiprintf_internal_r+0x1158>
    8bbc:	40bfffe0 	cmpeqi	r2,r8,-1
    8bc0:	10018a1e 	bne	r2,zero,91ec <___vfiprintf_internal_r+0x10f4>
    8bc4:	400d883a 	mov	r6,r8
    8bc8:	000b883a 	mov	r5,zero
    8bcc:	9809883a 	mov	r4,r19
    8bd0:	d8c00315 	stw	r3,12(sp)
    8bd4:	db400215 	stw	r13,8(sp)
    8bd8:	da000015 	stw	r8,0(sp)
    8bdc:	000633c0 	call	633c <memchr>
    8be0:	da000017 	ldw	r8,0(sp)
    8be4:	db400217 	ldw	r13,8(sp)
    8be8:	d8c00317 	ldw	r3,12(sp)
    8bec:	1001b426 	beq	r2,zero,92c0 <___vfiprintf_internal_r+0x11c8>
    8bf0:	14f9c83a 	sub	fp,r2,r19
    8bf4:	e02f883a 	mov	r23,fp
    8bf8:	d8c00415 	stw	r3,16(sp)
    8bfc:	003df706 	br	83dc <___vfiprintf_internal_r+0x2e4>
    8c00:	a0800007 	ldb	r2,0(r20)
    8c04:	6b400814 	ori	r13,r13,32
    8c08:	003d7c06 	br	81fc <___vfiprintf_internal_r+0x104>
    8c0c:	d8c00417 	ldw	r3,16(sp)
    8c10:	00800c04 	movi	r2,48
    8c14:	d8800985 	stb	r2,38(sp)
    8c18:	00801e04 	movi	r2,120
    8c1c:	01000074 	movhi	r4,1
    8c20:	d88009c5 	stb	r2,39(sp)
    8c24:	18800104 	addi	r2,r3,4
    8c28:	d8800415 	stw	r2,16(sp)
    8c2c:	20832304 	addi	r2,r4,3212
    8c30:	d8800515 	stw	r2,20(sp)
    8c34:	1dc00017 	ldw	r23,0(r3)
    8c38:	0039883a 	mov	fp,zero
    8c3c:	6b400094 	ori	r13,r13,2
    8c40:	00800084 	movi	r2,2
    8c44:	003e7b06 	br	8634 <___vfiprintf_internal_r+0x53c>
    8c48:	00c00044 	movi	r3,1
    8c4c:	e005883a 	mov	r2,fp
    8c50:	dcc01715 	stw	r19,92(sp)
    8c54:	df001815 	stw	fp,96(sp)
    8c58:	df000c15 	stw	fp,48(sp)
    8c5c:	d8c00b15 	stw	r3,44(sp)
    8c60:	9021883a 	mov	r16,r18
    8c64:	84000204 	addi	r16,r16,8
    8c68:	003e2406 	br	84fc <___vfiprintf_internal_r+0x404>
    8c6c:	01400044 	movi	r5,1
    8c70:	0009883a 	mov	r4,zero
    8c74:	9021883a 	mov	r16,r18
    8c78:	003ec206 	br	8784 <___vfiprintf_internal_r+0x68c>
    8c7c:	8dc7c83a 	sub	r3,r17,r23
    8c80:	00fe0d0e 	bge	zero,r3,84b8 <___vfiprintf_internal_r+0x3c0>
    8c84:	19800450 	cmplti	r6,r3,17
    8c88:	01c00074 	movhi	r7,1
    8c8c:	3001a01e 	bne	r6,zero,9310 <___vfiprintf_internal_r+0x1218>
    8c90:	39c3aa04 	addi	r7,r7,3752
    8c94:	03400404 	movi	r13,16
    8c98:	00000606 	br	8cb4 <___vfiprintf_internal_r+0xbbc>
    8c9c:	21800084 	addi	r6,r4,2
    8ca0:	84000204 	addi	r16,r16,8
    8ca4:	2809883a 	mov	r4,r5
    8ca8:	18fffc04 	addi	r3,r3,-16
    8cac:	19400448 	cmpgei	r5,r3,17
    8cb0:	28001c26 	beq	r5,zero,8d24 <___vfiprintf_internal_r+0xc2c>
    8cb4:	21400044 	addi	r5,r4,1
    8cb8:	10800404 	addi	r2,r2,16
    8cbc:	81c00015 	stw	r7,0(r16)
    8cc0:	83400115 	stw	r13,4(r16)
    8cc4:	d8800c15 	stw	r2,48(sp)
    8cc8:	d9400b15 	stw	r5,44(sp)
    8ccc:	29800208 	cmpgei	r6,r5,8
    8cd0:	303ff226 	beq	r6,zero,8c9c <___vfiprintf_internal_r+0xba4>
    8cd4:	d9800a04 	addi	r6,sp,40
    8cd8:	a80b883a 	mov	r5,r21
    8cdc:	b009883a 	mov	r4,r22
    8ce0:	10007426 	beq	r2,zero,8eb4 <___vfiprintf_internal_r+0xdbc>
    8ce4:	d9c00615 	stw	r7,24(sp)
    8ce8:	d8c00315 	stw	r3,12(sp)
    8cec:	da000215 	stw	r8,8(sp)
    8cf0:	0007fec0 	call	7fec <__sprint_r.part.0>
    8cf4:	103e121e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    8cf8:	d8c00317 	ldw	r3,12(sp)
    8cfc:	d9000b17 	ldw	r4,44(sp)
    8d00:	d8800c17 	ldw	r2,48(sp)
    8d04:	18fffc04 	addi	r3,r3,-16
    8d08:	19400448 	cmpgei	r5,r3,17
    8d0c:	d9c00617 	ldw	r7,24(sp)
    8d10:	da000217 	ldw	r8,8(sp)
    8d14:	9021883a 	mov	r16,r18
    8d18:	21800044 	addi	r6,r4,1
    8d1c:	03400404 	movi	r13,16
    8d20:	283fe41e 	bne	r5,zero,8cb4 <___vfiprintf_internal_r+0xbbc>
    8d24:	10c5883a 	add	r2,r2,r3
    8d28:	80c00115 	stw	r3,4(r16)
    8d2c:	81c00015 	stw	r7,0(r16)
    8d30:	d8800c15 	stw	r2,48(sp)
    8d34:	d9800b15 	stw	r6,44(sp)
    8d38:	30c00208 	cmpgei	r3,r6,8
    8d3c:	18011326 	beq	r3,zero,918c <___vfiprintf_internal_r+0x1094>
    8d40:	10014b26 	beq	r2,zero,9270 <___vfiprintf_internal_r+0x1178>
    8d44:	d9800a04 	addi	r6,sp,40
    8d48:	a80b883a 	mov	r5,r21
    8d4c:	b009883a 	mov	r4,r22
    8d50:	da000215 	stw	r8,8(sp)
    8d54:	0007fec0 	call	7fec <__sprint_r.part.0>
    8d58:	103df91e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    8d5c:	da000217 	ldw	r8,8(sp)
    8d60:	d9000b17 	ldw	r4,44(sp)
    8d64:	d8800c17 	ldw	r2,48(sp)
    8d68:	4711c83a 	sub	r8,r8,fp
    8d6c:	9021883a 	mov	r16,r18
    8d70:	21400044 	addi	r5,r4,1
    8d74:	023dd20e 	bge	zero,r8,84c0 <___vfiprintf_internal_r+0x3c8>
    8d78:	01c00074 	movhi	r7,1
    8d7c:	40c00450 	cmplti	r3,r8,17
    8d80:	39c3aa04 	addi	r7,r7,3752
    8d84:	03400404 	movi	r13,16
    8d88:	18000726 	beq	r3,zero,8da8 <___vfiprintf_internal_r+0xcb0>
    8d8c:	00002006 	br	8e10 <___vfiprintf_internal_r+0xd18>
    8d90:	21400084 	addi	r5,r4,2
    8d94:	84000204 	addi	r16,r16,8
    8d98:	1809883a 	mov	r4,r3
    8d9c:	423ffc04 	addi	r8,r8,-16
    8da0:	40c00448 	cmpgei	r3,r8,17
    8da4:	18001a26 	beq	r3,zero,8e10 <___vfiprintf_internal_r+0xd18>
    8da8:	20c00044 	addi	r3,r4,1
    8dac:	10800404 	addi	r2,r2,16
    8db0:	81c00015 	stw	r7,0(r16)
    8db4:	83400115 	stw	r13,4(r16)
    8db8:	d8800c15 	stw	r2,48(sp)
    8dbc:	d8c00b15 	stw	r3,44(sp)
    8dc0:	19400208 	cmpgei	r5,r3,8
    8dc4:	283ff226 	beq	r5,zero,8d90 <___vfiprintf_internal_r+0xc98>
    8dc8:	d9800a04 	addi	r6,sp,40
    8dcc:	a80b883a 	mov	r5,r21
    8dd0:	b009883a 	mov	r4,r22
    8dd4:	10001826 	beq	r2,zero,8e38 <___vfiprintf_internal_r+0xd40>
    8dd8:	d9c00315 	stw	r7,12(sp)
    8ddc:	da000215 	stw	r8,8(sp)
    8de0:	0007fec0 	call	7fec <__sprint_r.part.0>
    8de4:	103dd61e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    8de8:	da000217 	ldw	r8,8(sp)
    8dec:	d9000b17 	ldw	r4,44(sp)
    8df0:	d8800c17 	ldw	r2,48(sp)
    8df4:	423ffc04 	addi	r8,r8,-16
    8df8:	40c00448 	cmpgei	r3,r8,17
    8dfc:	d9c00317 	ldw	r7,12(sp)
    8e00:	9021883a 	mov	r16,r18
    8e04:	21400044 	addi	r5,r4,1
    8e08:	03400404 	movi	r13,16
    8e0c:	183fe61e 	bne	r3,zero,8da8 <___vfiprintf_internal_r+0xcb0>
    8e10:	1205883a 	add	r2,r2,r8
    8e14:	81c00015 	stw	r7,0(r16)
    8e18:	82000115 	stw	r8,4(r16)
    8e1c:	d8800c15 	stw	r2,48(sp)
    8e20:	d9400b15 	stw	r5,44(sp)
    8e24:	28c00208 	cmpgei	r3,r5,8
    8e28:	1800a11e 	bne	r3,zero,90b0 <___vfiprintf_internal_r+0xfb8>
    8e2c:	84000204 	addi	r16,r16,8
    8e30:	29400044 	addi	r5,r5,1
    8e34:	003da206 	br	84c0 <___vfiprintf_internal_r+0x3c8>
    8e38:	01400044 	movi	r5,1
    8e3c:	0009883a 	mov	r4,zero
    8e40:	9021883a 	mov	r16,r18
    8e44:	003fd506 	br	8d9c <___vfiprintf_internal_r+0xca4>
    8e48:	10c00060 	cmpeqi	r3,r2,1
    8e4c:	18011a1e 	bne	r3,zero,92b8 <___vfiprintf_internal_r+0x11c0>
    8e50:	108000a0 	cmpeqi	r2,r2,2
    8e54:	db400017 	ldw	r13,0(sp)
    8e58:	103ecf26 	beq	r2,zero,8998 <___vfiprintf_internal_r+0x8a0>
    8e5c:	9027883a 	mov	r19,r18
    8e60:	d9000517 	ldw	r4,20(sp)
    8e64:	b88003cc 	andi	r2,r23,15
    8e68:	e006973a 	slli	r3,fp,28
    8e6c:	b82ed13a 	srli	r23,r23,4
    8e70:	2085883a 	add	r2,r4,r2
    8e74:	10800003 	ldbu	r2,0(r2)
    8e78:	e038d13a 	srli	fp,fp,4
    8e7c:	1deeb03a 	or	r23,r3,r23
    8e80:	98bfffc5 	stb	r2,-1(r19)
    8e84:	bf04b03a 	or	r2,r23,fp
    8e88:	9cffffc4 	addi	r19,r19,-1
    8e8c:	103ff41e 	bne	r2,zero,8e60 <___vfiprintf_internal_r+0xd68>
    8e90:	94f9c83a 	sub	fp,r18,r19
    8e94:	db400015 	stw	r13,0(sp)
    8e98:	003ed806 	br	89fc <___vfiprintf_internal_r+0x904>
    8e9c:	d9800a04 	addi	r6,sp,40
    8ea0:	a80b883a 	mov	r5,r21
    8ea4:	b009883a 	mov	r4,r22
    8ea8:	0007fec0 	call	7fec <__sprint_r.part.0>
    8eac:	103d9e26 	beq	r2,zero,8528 <___vfiprintf_internal_r+0x430>
    8eb0:	003da306 	br	8540 <___vfiprintf_internal_r+0x448>
    8eb4:	01800044 	movi	r6,1
    8eb8:	0009883a 	mov	r4,zero
    8ebc:	9021883a 	mov	r16,r18
    8ec0:	003f7906 	br	8ca8 <___vfiprintf_internal_r+0xbb0>
    8ec4:	10009626 	beq	r2,zero,9120 <___vfiprintf_internal_r+0x1028>
    8ec8:	d9800a04 	addi	r6,sp,40
    8ecc:	a80b883a 	mov	r5,r21
    8ed0:	b009883a 	mov	r4,r22
    8ed4:	da000615 	stw	r8,24(sp)
    8ed8:	db400315 	stw	r13,12(sp)
    8edc:	db800215 	stw	r14,8(sp)
    8ee0:	0007fec0 	call	7fec <__sprint_r.part.0>
    8ee4:	103d961e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    8ee8:	d9000b17 	ldw	r4,44(sp)
    8eec:	d8800c17 	ldw	r2,48(sp)
    8ef0:	da000617 	ldw	r8,24(sp)
    8ef4:	db400317 	ldw	r13,12(sp)
    8ef8:	db800217 	ldw	r14,8(sp)
    8efc:	9021883a 	mov	r16,r18
    8f00:	21400044 	addi	r5,r4,1
    8f04:	003d5206 	br	8450 <___vfiprintf_internal_r+0x358>
    8f08:	d8800984 	addi	r2,sp,38
    8f0c:	d8801715 	stw	r2,92(sp)
    8f10:	00800084 	movi	r2,2
    8f14:	d8801815 	stw	r2,96(sp)
    8f18:	01400044 	movi	r5,1
    8f1c:	9021883a 	mov	r16,r18
    8f20:	2809883a 	mov	r4,r5
    8f24:	84000204 	addi	r16,r16,8
    8f28:	21400044 	addi	r5,r4,1
    8f2c:	003d6006 	br	84b0 <___vfiprintf_internal_r+0x3b8>
    8f30:	db400017 	ldw	r13,0(sp)
    8f34:	003e9406 	br	8988 <___vfiprintf_internal_r+0x890>
    8f38:	9027883a 	mov	r19,r18
    8f3c:	b809883a 	mov	r4,r23
    8f40:	e00b883a 	mov	r5,fp
    8f44:	01800284 	movi	r6,10
    8f48:	000f883a 	mov	r7,zero
    8f4c:	db800315 	stw	r14,12(sp)
    8f50:	da000215 	stw	r8,8(sp)
    8f54:	db400015 	stw	r13,0(sp)
    8f58:	000ac580 	call	ac58 <__umoddi3>
    8f5c:	10800c04 	addi	r2,r2,48
    8f60:	b809883a 	mov	r4,r23
    8f64:	e00b883a 	mov	r5,fp
    8f68:	98bfffc5 	stb	r2,-1(r19)
    8f6c:	01800284 	movi	r6,10
    8f70:	000f883a 	mov	r7,zero
    8f74:	000a6380 	call	a638 <__udivdi3>
    8f78:	e009883a 	mov	r4,fp
    8f7c:	b80b883a 	mov	r5,r23
    8f80:	db400017 	ldw	r13,0(sp)
    8f84:	da000217 	ldw	r8,8(sp)
    8f88:	db800317 	ldw	r14,12(sp)
    8f8c:	9cffffc4 	addi	r19,r19,-1
    8f90:	102f883a 	mov	r23,r2
    8f94:	1839883a 	mov	fp,r3
    8f98:	203fe81e 	bne	r4,zero,8f3c <___vfiprintf_internal_r+0xe44>
    8f9c:	294002a8 	cmpgeui	r5,r5,10
    8fa0:	283fe61e 	bne	r5,zero,8f3c <___vfiprintf_internal_r+0xe44>
    8fa4:	94f9c83a 	sub	fp,r18,r19
    8fa8:	003e9406 	br	89fc <___vfiprintf_internal_r+0x904>
    8fac:	19400450 	cmplti	r5,r3,17
    8fb0:	01c00074 	movhi	r7,1
    8fb4:	2800ce1e 	bne	r5,zero,92f0 <___vfiprintf_internal_r+0x11f8>
    8fb8:	39c3ae04 	addi	r7,r7,3768
    8fbc:	03c00404 	movi	r15,16
    8fc0:	00000706 	br	8fe0 <___vfiprintf_internal_r+0xee8>
    8fc4:	27c00084 	addi	ra,r4,2
    8fc8:	84000204 	addi	r16,r16,8
    8fcc:	3009883a 	mov	r4,r6
    8fd0:	18fffc04 	addi	r3,r3,-16
    8fd4:	19400448 	cmpgei	r5,r3,17
    8fd8:	28002026 	beq	r5,zero,905c <___vfiprintf_internal_r+0xf64>
    8fdc:	21800044 	addi	r6,r4,1
    8fe0:	10800404 	addi	r2,r2,16
    8fe4:	81c00015 	stw	r7,0(r16)
    8fe8:	83c00115 	stw	r15,4(r16)
    8fec:	d8800c15 	stw	r2,48(sp)
    8ff0:	d9800b15 	stw	r6,44(sp)
    8ff4:	31400208 	cmpgei	r5,r6,8
    8ff8:	283ff226 	beq	r5,zero,8fc4 <___vfiprintf_internal_r+0xecc>
    8ffc:	d9800a04 	addi	r6,sp,40
    9000:	a80b883a 	mov	r5,r21
    9004:	b009883a 	mov	r4,r22
    9008:	10001f26 	beq	r2,zero,9088 <___vfiprintf_internal_r+0xf90>
    900c:	d9c00815 	stw	r7,32(sp)
    9010:	d8c00715 	stw	r3,28(sp)
    9014:	da000615 	stw	r8,24(sp)
    9018:	db400315 	stw	r13,12(sp)
    901c:	db800215 	stw	r14,8(sp)
    9020:	0007fec0 	call	7fec <__sprint_r.part.0>
    9024:	103d461e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    9028:	d8c00717 	ldw	r3,28(sp)
    902c:	d9000b17 	ldw	r4,44(sp)
    9030:	d8800c17 	ldw	r2,48(sp)
    9034:	18fffc04 	addi	r3,r3,-16
    9038:	19400448 	cmpgei	r5,r3,17
    903c:	d9c00817 	ldw	r7,32(sp)
    9040:	da000617 	ldw	r8,24(sp)
    9044:	db400317 	ldw	r13,12(sp)
    9048:	db800217 	ldw	r14,8(sp)
    904c:	9021883a 	mov	r16,r18
    9050:	27c00044 	addi	ra,r4,1
    9054:	03c00404 	movi	r15,16
    9058:	283fe01e 	bne	r5,zero,8fdc <___vfiprintf_internal_r+0xee4>
    905c:	10c5883a 	add	r2,r2,r3
    9060:	80c00115 	stw	r3,4(r16)
    9064:	81c00015 	stw	r7,0(r16)
    9068:	d8800c15 	stw	r2,48(sp)
    906c:	dfc00b15 	stw	ra,44(sp)
    9070:	f8c00208 	cmpgei	r3,ra,8
    9074:	18002f1e 	bne	r3,zero,9134 <___vfiprintf_internal_r+0x103c>
    9078:	84000204 	addi	r16,r16,8
    907c:	f9400044 	addi	r5,ra,1
    9080:	f809883a 	mov	r4,ra
    9084:	003ce406 	br	8418 <___vfiprintf_internal_r+0x320>
    9088:	0009883a 	mov	r4,zero
    908c:	07c00044 	movi	ra,1
    9090:	9021883a 	mov	r16,r18
    9094:	003fce06 	br	8fd0 <___vfiprintf_internal_r+0xed8>
    9098:	8dc0010e 	bge	r17,r23,90a0 <___vfiprintf_internal_r+0xfa8>
    909c:	b823883a 	mov	r17,r23
    90a0:	d8800117 	ldw	r2,4(sp)
    90a4:	1445883a 	add	r2,r2,r17
    90a8:	d8800115 	stw	r2,4(sp)
    90ac:	003d1e06 	br	8528 <___vfiprintf_internal_r+0x430>
    90b0:	103ee526 	beq	r2,zero,8c48 <___vfiprintf_internal_r+0xb50>
    90b4:	d9800a04 	addi	r6,sp,40
    90b8:	a80b883a 	mov	r5,r21
    90bc:	b009883a 	mov	r4,r22
    90c0:	0007fec0 	call	7fec <__sprint_r.part.0>
    90c4:	103d1e1e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    90c8:	d9400b17 	ldw	r5,44(sp)
    90cc:	d8800c17 	ldw	r2,48(sp)
    90d0:	9021883a 	mov	r16,r18
    90d4:	29400044 	addi	r5,r5,1
    90d8:	003cf906 	br	84c0 <___vfiprintf_internal_r+0x3c8>
    90dc:	d8000b15 	stw	zero,44(sp)
    90e0:	9021883a 	mov	r16,r18
    90e4:	003d7106 	br	86ac <___vfiprintf_internal_r+0x5b4>
    90e8:	4000731e 	bne	r8,zero,92b8 <___vfiprintf_internal_r+0x11c0>
    90ec:	0011883a 	mov	r8,zero
    90f0:	0039883a 	mov	fp,zero
    90f4:	9027883a 	mov	r19,r18
    90f8:	003e4006 	br	89fc <___vfiprintf_internal_r+0x904>
    90fc:	0039883a 	mov	fp,zero
    9100:	003e9106 	br	8b48 <___vfiprintf_internal_r+0xa50>
    9104:	b839d7fa 	srai	fp,r23,31
    9108:	e005883a 	mov	r2,fp
    910c:	003dd206 	br	8858 <___vfiprintf_internal_r+0x760>
    9110:	01400044 	movi	r5,1
    9114:	0009883a 	mov	r4,zero
    9118:	9021883a 	mov	r16,r18
    911c:	003ce406 	br	84b0 <___vfiprintf_internal_r+0x3b8>
    9120:	70002b1e 	bne	r14,zero,91d0 <___vfiprintf_internal_r+0x10d8>
    9124:	0009883a 	mov	r4,zero
    9128:	01400044 	movi	r5,1
    912c:	9021883a 	mov	r16,r18
    9130:	003cdf06 	br	84b0 <___vfiprintf_internal_r+0x3b8>
    9134:	10003726 	beq	r2,zero,9214 <___vfiprintf_internal_r+0x111c>
    9138:	d9800a04 	addi	r6,sp,40
    913c:	a80b883a 	mov	r5,r21
    9140:	b009883a 	mov	r4,r22
    9144:	da000615 	stw	r8,24(sp)
    9148:	db400315 	stw	r13,12(sp)
    914c:	db800215 	stw	r14,8(sp)
    9150:	0007fec0 	call	7fec <__sprint_r.part.0>
    9154:	103cfa1e 	bne	r2,zero,8540 <___vfiprintf_internal_r+0x448>
    9158:	d9000b17 	ldw	r4,44(sp)
    915c:	d8800c17 	ldw	r2,48(sp)
    9160:	da000617 	ldw	r8,24(sp)
    9164:	db400317 	ldw	r13,12(sp)
    9168:	db800217 	ldw	r14,8(sp)
    916c:	9021883a 	mov	r16,r18
    9170:	21400044 	addi	r5,r4,1
    9174:	003ca806 	br	8418 <___vfiprintf_internal_r+0x320>
    9178:	a0800007 	ldb	r2,0(r20)
    917c:	d8c00415 	stw	r3,16(sp)
    9180:	003c1e06 	br	81fc <___vfiprintf_internal_r+0x104>
    9184:	9027883a 	mov	r19,r18
    9188:	003e1c06 	br	89fc <___vfiprintf_internal_r+0x904>
    918c:	84000204 	addi	r16,r16,8
    9190:	31400044 	addi	r5,r6,1
    9194:	3009883a 	mov	r4,r6
    9198:	003cc706 	br	84b8 <___vfiprintf_internal_r+0x3c0>
    919c:	00c00c04 	movi	r3,48
    91a0:	d88009c5 	stb	r2,39(sp)
    91a4:	d8c00985 	stb	r3,38(sp)
    91a8:	6b400094 	ori	r13,r13,2
    91ac:	00800084 	movi	r2,2
    91b0:	003d2006 	br	8634 <___vfiprintf_internal_r+0x53c>
    91b4:	d9400117 	ldw	r5,4(sp)
    91b8:	20800017 	ldw	r2,0(r4)
    91bc:	d8c00415 	stw	r3,16(sp)
    91c0:	2809d7fa 	srai	r4,r5,31
    91c4:	11400015 	stw	r5,0(r2)
    91c8:	11000115 	stw	r4,4(r2)
    91cc:	003bf306 	br	819c <___vfiprintf_internal_r+0xa4>
    91d0:	d8800984 	addi	r2,sp,38
    91d4:	d8801715 	stw	r2,92(sp)
    91d8:	00800084 	movi	r2,2
    91dc:	d8801815 	stw	r2,96(sp)
    91e0:	01000044 	movi	r4,1
    91e4:	9021883a 	mov	r16,r18
    91e8:	003f4e06 	br	8f24 <___vfiprintf_internal_r+0xe2c>
    91ec:	9809883a 	mov	r4,r19
    91f0:	d8c00215 	stw	r3,8(sp)
    91f4:	db400015 	stw	r13,0(sp)
    91f8:	0000bf80 	call	bf8 <strlen>
    91fc:	d8c00217 	ldw	r3,8(sp)
    9200:	db400017 	ldw	r13,0(sp)
    9204:	1039883a 	mov	fp,r2
    9208:	102f883a 	mov	r23,r2
    920c:	d8c00415 	stw	r3,16(sp)
    9210:	003c7206 	br	83dc <___vfiprintf_internal_r+0x2e4>
    9214:	d8c00947 	ldb	r3,37(sp)
    9218:	18001b26 	beq	r3,zero,9288 <___vfiprintf_internal_r+0x1190>
    921c:	d8800944 	addi	r2,sp,37
    9220:	d8801715 	stw	r2,92(sp)
    9224:	00800044 	movi	r2,1
    9228:	d8801815 	stw	r2,96(sp)
    922c:	01400044 	movi	r5,1
    9230:	9021883a 	mov	r16,r18
    9234:	003c8306 	br	8444 <___vfiprintf_internal_r+0x34c>
    9238:	d8800417 	ldw	r2,16(sp)
    923c:	10800017 	ldw	r2,0(r2)
    9240:	d8c00415 	stw	r3,16(sp)
    9244:	d8c00117 	ldw	r3,4(sp)
    9248:	10c00015 	stw	r3,0(r2)
    924c:	003bd306 	br	819c <___vfiprintf_internal_r+0xa4>
    9250:	408001f0 	cmpltui	r2,r8,7
    9254:	4039883a 	mov	fp,r8
    9258:	10000926 	beq	r2,zero,9280 <___vfiprintf_internal_r+0x1188>
    925c:	04c00074 	movhi	r19,1
    9260:	e02f883a 	mov	r23,fp
    9264:	d8c00415 	stw	r3,16(sp)
    9268:	9cc32d04 	addi	r19,r19,3252
    926c:	003c5b06 	br	83dc <___vfiprintf_internal_r+0x2e4>
    9270:	01400044 	movi	r5,1
    9274:	0009883a 	mov	r4,zero
    9278:	9021883a 	mov	r16,r18
    927c:	003c8e06 	br	84b8 <___vfiprintf_internal_r+0x3c0>
    9280:	07000184 	movi	fp,6
    9284:	003ff506 	br	925c <___vfiprintf_internal_r+0x1164>
    9288:	703f1f1e 	bne	r14,zero,8f08 <___vfiprintf_internal_r+0xe10>
    928c:	0009883a 	mov	r4,zero
    9290:	01400044 	movi	r5,1
    9294:	9021883a 	mov	r16,r18
    9298:	003c8706 	br	84b8 <___vfiprintf_internal_r+0x3c0>
    929c:	d9800945 	stb	r6,37(sp)
    92a0:	003c4806 	br	83c4 <___vfiprintf_internal_r+0x2cc>
    92a4:	d9800a04 	addi	r6,sp,40
    92a8:	a80b883a 	mov	r5,r21
    92ac:	b009883a 	mov	r4,r22
    92b0:	0007fec0 	call	7fec <__sprint_r.part.0>
    92b4:	003ca206 	br	8540 <___vfiprintf_internal_r+0x448>
    92b8:	db400017 	ldw	r13,0(sp)
    92bc:	003d7306 	br	888c <___vfiprintf_internal_r+0x794>
    92c0:	402f883a 	mov	r23,r8
    92c4:	d8c00415 	stw	r3,16(sp)
    92c8:	4039883a 	mov	fp,r8
    92cc:	003c4306 	br	83dc <___vfiprintf_internal_r+0x2e4>
    92d0:	d9800945 	stb	r6,37(sp)
    92d4:	003d9106 	br	891c <___vfiprintf_internal_r+0x824>
    92d8:	d9800945 	stb	r6,37(sp)
    92dc:	003e1006 	br	8b20 <___vfiprintf_internal_r+0xa28>
    92e0:	d9800945 	stb	r6,37(sp)
    92e4:	003def06 	br	8aa4 <___vfiprintf_internal_r+0x9ac>
    92e8:	d9800945 	stb	r6,37(sp)
    92ec:	003e1e06 	br	8b68 <___vfiprintf_internal_r+0xa70>
    92f0:	303f883a 	mov	ra,r6
    92f4:	39c3ae04 	addi	r7,r7,3768
    92f8:	003f5806 	br	905c <___vfiprintf_internal_r+0xf64>
    92fc:	d9800945 	stb	r6,37(sp)
    9300:	003d4d06 	br	8838 <___vfiprintf_internal_r+0x740>
    9304:	21400044 	addi	r5,r4,1
    9308:	39c3ae04 	addi	r7,r7,3768
    930c:	003d3706 	br	87ec <___vfiprintf_internal_r+0x6f4>
    9310:	280d883a 	mov	r6,r5
    9314:	39c3aa04 	addi	r7,r7,3752
    9318:	003e8206 	br	8d24 <___vfiprintf_internal_r+0xc2c>
    931c:	00bfffc4 	movi	r2,-1
    9320:	d8800115 	stw	r2,4(sp)
    9324:	003c8906 	br	854c <___vfiprintf_internal_r+0x454>
    9328:	d8800417 	ldw	r2,16(sp)
    932c:	12000017 	ldw	r8,0(r2)
    9330:	11000104 	addi	r4,r2,4
    9334:	4000010e 	bge	r8,zero,933c <___vfiprintf_internal_r+0x1244>
    9338:	023fffc4 	movi	r8,-1
    933c:	a0800043 	ldbu	r2,1(r20)
    9340:	d9000415 	stw	r4,16(sp)
    9344:	1829883a 	mov	r20,r3
    9348:	10803fcc 	andi	r2,r2,255
    934c:	1080201c 	xori	r2,r2,128
    9350:	10bfe004 	addi	r2,r2,-128
    9354:	003ba906 	br	81fc <___vfiprintf_internal_r+0x104>

00009358 <__vfiprintf_internal>:
    9358:	00c00074 	movhi	r3,1
    935c:	2005883a 	mov	r2,r4
    9360:	190b9e17 	ldw	r4,11896(r3)
    9364:	300f883a 	mov	r7,r6
    9368:	280d883a 	mov	r6,r5
    936c:	100b883a 	mov	r5,r2
    9370:	00080f81 	jmpi	80f8 <___vfiprintf_internal_r>

00009374 <__sbprintf>:
    9374:	2880030b 	ldhu	r2,12(r5)
    9378:	2b001917 	ldw	r12,100(r5)
    937c:	2ac0038b 	ldhu	r11,14(r5)
    9380:	2a800717 	ldw	r10,28(r5)
    9384:	2a400917 	ldw	r9,36(r5)
    9388:	defee204 	addi	sp,sp,-1144
    938c:	da001a04 	addi	r8,sp,104
    9390:	00c10004 	movi	r3,1024
    9394:	dc011a15 	stw	r16,1128(sp)
    9398:	10bfff4c 	andi	r2,r2,65533
    939c:	2821883a 	mov	r16,r5
    93a0:	d80b883a 	mov	r5,sp
    93a4:	dc811c15 	stw	r18,1136(sp)
    93a8:	dc411b15 	stw	r17,1132(sp)
    93ac:	dfc11d15 	stw	ra,1140(sp)
    93b0:	2025883a 	mov	r18,r4
    93b4:	d880030d 	sth	r2,12(sp)
    93b8:	db001915 	stw	r12,100(sp)
    93bc:	dac0038d 	sth	r11,14(sp)
    93c0:	da800715 	stw	r10,28(sp)
    93c4:	da400915 	stw	r9,36(sp)
    93c8:	da000015 	stw	r8,0(sp)
    93cc:	da000415 	stw	r8,16(sp)
    93d0:	d8c00215 	stw	r3,8(sp)
    93d4:	d8c00515 	stw	r3,20(sp)
    93d8:	d8000615 	stw	zero,24(sp)
    93dc:	00080f80 	call	80f8 <___vfiprintf_internal_r>
    93e0:	1023883a 	mov	r17,r2
    93e4:	10000d0e 	bge	r2,zero,941c <__sbprintf+0xa8>
    93e8:	d880030b 	ldhu	r2,12(sp)
    93ec:	1080100c 	andi	r2,r2,64
    93f0:	10000326 	beq	r2,zero,9400 <__sbprintf+0x8c>
    93f4:	8080030b 	ldhu	r2,12(r16)
    93f8:	10801014 	ori	r2,r2,64
    93fc:	8080030d 	sth	r2,12(r16)
    9400:	8805883a 	mov	r2,r17
    9404:	dfc11d17 	ldw	ra,1140(sp)
    9408:	dc811c17 	ldw	r18,1136(sp)
    940c:	dc411b17 	ldw	r17,1132(sp)
    9410:	dc011a17 	ldw	r16,1128(sp)
    9414:	dec11e04 	addi	sp,sp,1144
    9418:	f800283a 	ret
    941c:	d80b883a 	mov	r5,sp
    9420:	9009883a 	mov	r4,r18
    9424:	0004a780 	call	4a78 <_fflush_r>
    9428:	103fef26 	beq	r2,zero,93e8 <__sbprintf+0x74>
    942c:	047fffc4 	movi	r17,-1
    9430:	003fed06 	br	93e8 <__sbprintf+0x74>

00009434 <_write_r>:
    9434:	2807883a 	mov	r3,r5
    9438:	defffe04 	addi	sp,sp,-8
    943c:	dc000015 	stw	r16,0(sp)
    9440:	300b883a 	mov	r5,r6
    9444:	00800074 	movhi	r2,1
    9448:	380d883a 	mov	r6,r7
    944c:	2021883a 	mov	r16,r4
    9450:	1809883a 	mov	r4,r3
    9454:	dfc00115 	stw	ra,4(sp)
    9458:	1012d215 	stw	zero,19272(r2)
    945c:	000e57c0 	call	e57c <write>
    9460:	10ffffd8 	cmpnei	r3,r2,-1
    9464:	18000426 	beq	r3,zero,9478 <_write_r+0x44>
    9468:	dfc00117 	ldw	ra,4(sp)
    946c:	dc000017 	ldw	r16,0(sp)
    9470:	dec00204 	addi	sp,sp,8
    9474:	f800283a 	ret
    9478:	00c00074 	movhi	r3,1
    947c:	18d2d217 	ldw	r3,19272(r3)
    9480:	183ff926 	beq	r3,zero,9468 <_write_r+0x34>
    9484:	80c00015 	stw	r3,0(r16)
    9488:	dfc00117 	ldw	ra,4(sp)
    948c:	dc000017 	ldw	r16,0(sp)
    9490:	dec00204 	addi	sp,sp,8
    9494:	f800283a 	ret

00009498 <_close_r>:
    9498:	defffe04 	addi	sp,sp,-8
    949c:	dc000015 	stw	r16,0(sp)
    94a0:	00800074 	movhi	r2,1
    94a4:	2021883a 	mov	r16,r4
    94a8:	2809883a 	mov	r4,r5
    94ac:	dfc00115 	stw	ra,4(sp)
    94b0:	1012d215 	stw	zero,19272(r2)
    94b4:	000db5c0 	call	db5c <close>
    94b8:	10ffffd8 	cmpnei	r3,r2,-1
    94bc:	18000426 	beq	r3,zero,94d0 <_close_r+0x38>
    94c0:	dfc00117 	ldw	ra,4(sp)
    94c4:	dc000017 	ldw	r16,0(sp)
    94c8:	dec00204 	addi	sp,sp,8
    94cc:	f800283a 	ret
    94d0:	00c00074 	movhi	r3,1
    94d4:	18d2d217 	ldw	r3,19272(r3)
    94d8:	183ff926 	beq	r3,zero,94c0 <_close_r+0x28>
    94dc:	80c00015 	stw	r3,0(r16)
    94e0:	dfc00117 	ldw	ra,4(sp)
    94e4:	dc000017 	ldw	r16,0(sp)
    94e8:	dec00204 	addi	sp,sp,8
    94ec:	f800283a 	ret

000094f0 <__assert_func>:
    94f0:	00800074 	movhi	r2,1
    94f4:	120b9e17 	ldw	r8,11896(r2)
    94f8:	defffc04 	addi	sp,sp,-16
    94fc:	3807883a 	mov	r3,r7
    9500:	3005883a 	mov	r2,r6
    9504:	dfc00315 	stw	ra,12(sp)
    9508:	42400317 	ldw	r9,12(r8)
    950c:	200f883a 	mov	r7,r4
    9510:	2811883a 	mov	r8,r5
    9514:	180d883a 	mov	r6,r3
    9518:	10000a26 	beq	r2,zero,9544 <__assert_func+0x54>
    951c:	00c00074 	movhi	r3,1
    9520:	18c3b204 	addi	r3,r3,3784
    9524:	01400074 	movhi	r5,1
    9528:	2943b604 	addi	r5,r5,3800
    952c:	4809883a 	mov	r4,r9
    9530:	d8c00115 	stw	r3,4(sp)
    9534:	da000015 	stw	r8,0(sp)
    9538:	d8800215 	stw	r2,8(sp)
    953c:	00098880 	call	9888 <fiprintf>
    9540:	000a0d00 	call	a0d0 <abort>
    9544:	00c00074 	movhi	r3,1
    9548:	18c3b504 	addi	r3,r3,3796
    954c:	1805883a 	mov	r2,r3
    9550:	003ff406 	br	9524 <__assert_func+0x34>

00009554 <__assert>:
    9554:	deffff04 	addi	sp,sp,-4
    9558:	300f883a 	mov	r7,r6
    955c:	000d883a 	mov	r6,zero
    9560:	dfc00015 	stw	ra,0(sp)
    9564:	00094f00 	call	94f0 <__assert_func>

00009568 <_calloc_r>:
    9568:	2806d43a 	srli	r3,r5,16
    956c:	defffb04 	addi	sp,sp,-20
    9570:	dc400115 	stw	r17,4(sp)
    9574:	dc000015 	stw	r16,0(sp)
    9578:	dfc00415 	stw	ra,16(sp)
    957c:	dcc00315 	stw	r19,12(sp)
    9580:	dc800215 	stw	r18,8(sp)
    9584:	3022d43a 	srli	r17,r6,16
    9588:	2805883a 	mov	r2,r5
    958c:	2021883a 	mov	r16,r4
    9590:	18002d1e 	bne	r3,zero,9648 <_calloc_r+0xe0>
    9594:	88003e1e 	bne	r17,zero,9690 <_calloc_r+0x128>
    9598:	317fffcc 	andi	r5,r6,65535
    959c:	113fffcc 	andi	r4,r2,65535
    95a0:	000b3d00 	call	b3d0 <__mulsi3>
    95a4:	100b883a 	mov	r5,r2
    95a8:	8009883a 	mov	r4,r16
    95ac:	0005b5c0 	call	5b5c <_malloc_r>
    95b0:	1009883a 	mov	r4,r2
    95b4:	10001626 	beq	r2,zero,9610 <_calloc_r+0xa8>
    95b8:	11bfff17 	ldw	r6,-4(r2)
    95bc:	00bfff04 	movi	r2,-4
    95c0:	308c703a 	and	r6,r6,r2
    95c4:	31bfff04 	addi	r6,r6,-4
    95c8:	30800968 	cmpgeui	r2,r6,37
    95cc:	1000181e 	bne	r2,zero,9630 <_calloc_r+0xc8>
    95d0:	30800530 	cmpltui	r2,r6,20
    95d4:	10000a1e 	bne	r2,zero,9600 <_calloc_r+0x98>
    95d8:	20000015 	stw	zero,0(r4)
    95dc:	20000115 	stw	zero,4(r4)
    95e0:	30800728 	cmpgeui	r2,r6,28
    95e4:	10001626 	beq	r2,zero,9640 <_calloc_r+0xd8>
    95e8:	20000215 	stw	zero,8(r4)
    95ec:	20000315 	stw	zero,12(r4)
    95f0:	31800920 	cmpeqi	r6,r6,36
    95f4:	30002d1e 	bne	r6,zero,96ac <_calloc_r+0x144>
    95f8:	20800404 	addi	r2,r4,16
    95fc:	00000106 	br	9604 <_calloc_r+0x9c>
    9600:	2005883a 	mov	r2,r4
    9604:	10000015 	stw	zero,0(r2)
    9608:	10000115 	stw	zero,4(r2)
    960c:	10000215 	stw	zero,8(r2)
    9610:	2005883a 	mov	r2,r4
    9614:	dfc00417 	ldw	ra,16(sp)
    9618:	dcc00317 	ldw	r19,12(sp)
    961c:	dc800217 	ldw	r18,8(sp)
    9620:	dc400117 	ldw	r17,4(sp)
    9624:	dc000017 	ldw	r16,0(sp)
    9628:	dec00504 	addi	sp,sp,20
    962c:	f800283a 	ret
    9630:	000b883a 	mov	r5,zero
    9634:	00066380 	call	6638 <memset>
    9638:	1009883a 	mov	r4,r2
    963c:	003ff406 	br	9610 <_calloc_r+0xa8>
    9640:	20800204 	addi	r2,r4,8
    9644:	003fef06 	br	9604 <_calloc_r+0x9c>
    9648:	8800131e 	bne	r17,zero,9698 <_calloc_r+0x130>
    964c:	1823883a 	mov	r17,r3
    9650:	3027883a 	mov	r19,r6
    9654:	317fffcc 	andi	r5,r6,65535
    9658:	113fffcc 	andi	r4,r2,65535
    965c:	000b3d00 	call	b3d0 <__mulsi3>
    9660:	897fffcc 	andi	r5,r17,65535
    9664:	993fffcc 	andi	r4,r19,65535
    9668:	1025883a 	mov	r18,r2
    966c:	000b3d00 	call	b3d0 <__mulsi3>
    9670:	900ad43a 	srli	r5,r18,16
    9674:	114b883a 	add	r5,r2,r5
    9678:	2804d43a 	srli	r2,r5,16
    967c:	1000061e 	bne	r2,zero,9698 <_calloc_r+0x130>
    9680:	280a943a 	slli	r5,r5,16
    9684:	94bfffcc 	andi	r18,r18,65535
    9688:	2c8ab03a 	or	r5,r5,r18
    968c:	003fc606 	br	95a8 <_calloc_r+0x40>
    9690:	2827883a 	mov	r19,r5
    9694:	003fef06 	br	9654 <_calloc_r+0xec>
    9698:	00096bc0 	call	96bc <__errno>
    969c:	00c00304 	movi	r3,12
    96a0:	10c00015 	stw	r3,0(r2)
    96a4:	0009883a 	mov	r4,zero
    96a8:	003fd906 	br	9610 <_calloc_r+0xa8>
    96ac:	20000415 	stw	zero,16(r4)
    96b0:	20800604 	addi	r2,r4,24
    96b4:	20000515 	stw	zero,20(r4)
    96b8:	003fd206 	br	9604 <_calloc_r+0x9c>

000096bc <__errno>:
    96bc:	00800074 	movhi	r2,1
    96c0:	108b9e17 	ldw	r2,11896(r2)
    96c4:	f800283a 	ret

000096c8 <_fclose_r.part.0>:
    96c8:	defffc04 	addi	sp,sp,-16
    96cc:	dc800215 	stw	r18,8(sp)
    96d0:	dc400115 	stw	r17,4(sp)
    96d4:	dc000015 	stw	r16,0(sp)
    96d8:	dfc00315 	stw	ra,12(sp)
    96dc:	2821883a 	mov	r16,r5
    96e0:	2023883a 	mov	r17,r4
    96e4:	00048500 	call	4850 <__sflush_r>
    96e8:	80c00b17 	ldw	r3,44(r16)
    96ec:	1025883a 	mov	r18,r2
    96f0:	18000426 	beq	r3,zero,9704 <_fclose_r.part.0+0x3c>
    96f4:	81400717 	ldw	r5,28(r16)
    96f8:	8809883a 	mov	r4,r17
    96fc:	183ee83a 	callr	r3
    9700:	10001916 	blt	r2,zero,9768 <_fclose_r.part.0+0xa0>
    9704:	8080030b 	ldhu	r2,12(r16)
    9708:	1080200c 	andi	r2,r2,128
    970c:	10001a1e 	bne	r2,zero,9778 <_fclose_r.part.0+0xb0>
    9710:	81400c17 	ldw	r5,48(r16)
    9714:	28000526 	beq	r5,zero,972c <_fclose_r.part.0+0x64>
    9718:	80801004 	addi	r2,r16,64
    971c:	28800226 	beq	r5,r2,9728 <_fclose_r.part.0+0x60>
    9720:	8809883a 	mov	r4,r17
    9724:	00050240 	call	5024 <_free_r>
    9728:	80000c15 	stw	zero,48(r16)
    972c:	81401117 	ldw	r5,68(r16)
    9730:	28000326 	beq	r5,zero,9740 <_fclose_r.part.0+0x78>
    9734:	8809883a 	mov	r4,r17
    9738:	00050240 	call	5024 <_free_r>
    973c:	80001115 	stw	zero,68(r16)
    9740:	0004ed00 	call	4ed0 <__sfp_lock_acquire>
    9744:	8000030d 	sth	zero,12(r16)
    9748:	0004ed40 	call	4ed4 <__sfp_lock_release>
    974c:	9005883a 	mov	r2,r18
    9750:	dfc00317 	ldw	ra,12(sp)
    9754:	dc800217 	ldw	r18,8(sp)
    9758:	dc400117 	ldw	r17,4(sp)
    975c:	dc000017 	ldw	r16,0(sp)
    9760:	dec00404 	addi	sp,sp,16
    9764:	f800283a 	ret
    9768:	8080030b 	ldhu	r2,12(r16)
    976c:	04bfffc4 	movi	r18,-1
    9770:	1080200c 	andi	r2,r2,128
    9774:	103fe626 	beq	r2,zero,9710 <_fclose_r.part.0+0x48>
    9778:	81400417 	ldw	r5,16(r16)
    977c:	8809883a 	mov	r4,r17
    9780:	00050240 	call	5024 <_free_r>
    9784:	003fe206 	br	9710 <_fclose_r.part.0+0x48>

00009788 <_fclose_r>:
    9788:	28001926 	beq	r5,zero,97f0 <_fclose_r+0x68>
    978c:	defffd04 	addi	sp,sp,-12
    9790:	dc000115 	stw	r16,4(sp)
    9794:	dfc00215 	stw	ra,8(sp)
    9798:	2021883a 	mov	r16,r4
    979c:	20000226 	beq	r4,zero,97a8 <_fclose_r+0x20>
    97a0:	20800e17 	ldw	r2,56(r4)
    97a4:	10000c26 	beq	r2,zero,97d8 <_fclose_r+0x50>
    97a8:	2880030f 	ldh	r2,12(r5)
    97ac:	1000051e 	bne	r2,zero,97c4 <_fclose_r+0x3c>
    97b0:	0005883a 	mov	r2,zero
    97b4:	dfc00217 	ldw	ra,8(sp)
    97b8:	dc000117 	ldw	r16,4(sp)
    97bc:	dec00304 	addi	sp,sp,12
    97c0:	f800283a 	ret
    97c4:	8009883a 	mov	r4,r16
    97c8:	dfc00217 	ldw	ra,8(sp)
    97cc:	dc000117 	ldw	r16,4(sp)
    97d0:	dec00304 	addi	sp,sp,12
    97d4:	00096c81 	jmpi	96c8 <_fclose_r.part.0>
    97d8:	d9400015 	stw	r5,0(sp)
    97dc:	0004ec00 	call	4ec0 <__sinit>
    97e0:	d9400017 	ldw	r5,0(sp)
    97e4:	2880030f 	ldh	r2,12(r5)
    97e8:	103ff126 	beq	r2,zero,97b0 <_fclose_r+0x28>
    97ec:	003ff506 	br	97c4 <_fclose_r+0x3c>
    97f0:	0005883a 	mov	r2,zero
    97f4:	f800283a 	ret

000097f8 <fclose>:
    97f8:	20000826 	beq	r4,zero,981c <fclose+0x24>
    97fc:	00800074 	movhi	r2,1
    9800:	200b883a 	mov	r5,r4
    9804:	110b9e17 	ldw	r4,11896(r2)
    9808:	20000226 	beq	r4,zero,9814 <fclose+0x1c>
    980c:	20800e17 	ldw	r2,56(r4)
    9810:	10000526 	beq	r2,zero,9828 <fclose+0x30>
    9814:	2880030f 	ldh	r2,12(r5)
    9818:	1000021e 	bne	r2,zero,9824 <fclose+0x2c>
    981c:	0005883a 	mov	r2,zero
    9820:	f800283a 	ret
    9824:	00096c81 	jmpi	96c8 <_fclose_r.part.0>
    9828:	defffd04 	addi	sp,sp,-12
    982c:	d9400115 	stw	r5,4(sp)
    9830:	d9000015 	stw	r4,0(sp)
    9834:	dfc00215 	stw	ra,8(sp)
    9838:	0004ec00 	call	4ec0 <__sinit>
    983c:	d9400117 	ldw	r5,4(sp)
    9840:	d9000017 	ldw	r4,0(sp)
    9844:	2880030f 	ldh	r2,12(r5)
    9848:	10000326 	beq	r2,zero,9858 <fclose+0x60>
    984c:	dfc00217 	ldw	ra,8(sp)
    9850:	dec00304 	addi	sp,sp,12
    9854:	00096c81 	jmpi	96c8 <_fclose_r.part.0>
    9858:	0005883a 	mov	r2,zero
    985c:	dfc00217 	ldw	ra,8(sp)
    9860:	dec00304 	addi	sp,sp,12
    9864:	f800283a 	ret

00009868 <_fiprintf_r>:
    9868:	defffe04 	addi	sp,sp,-8
    986c:	dfc00015 	stw	ra,0(sp)
    9870:	d9c00115 	stw	r7,4(sp)
    9874:	d9c00104 	addi	r7,sp,4
    9878:	0009e3c0 	call	9e3c <_vfiprintf_r>
    987c:	dfc00017 	ldw	ra,0(sp)
    9880:	dec00204 	addi	sp,sp,8
    9884:	f800283a 	ret

00009888 <fiprintf>:
    9888:	defffd04 	addi	sp,sp,-12
    988c:	2005883a 	mov	r2,r4
    9890:	dfc00015 	stw	ra,0(sp)
    9894:	d9800115 	stw	r6,4(sp)
    9898:	d9c00215 	stw	r7,8(sp)
    989c:	00c00074 	movhi	r3,1
    98a0:	190b9e17 	ldw	r4,11896(r3)
    98a4:	280d883a 	mov	r6,r5
    98a8:	d9c00104 	addi	r7,sp,4
    98ac:	100b883a 	mov	r5,r2
    98b0:	0009e3c0 	call	9e3c <_vfiprintf_r>
    98b4:	dfc00017 	ldw	ra,0(sp)
    98b8:	dec00304 	addi	sp,sp,12
    98bc:	f800283a 	ret

000098c0 <__fputwc>:
    98c0:	defff904 	addi	sp,sp,-28
    98c4:	dcc00415 	stw	r19,16(sp)
    98c8:	dc800315 	stw	r18,12(sp)
    98cc:	dc000115 	stw	r16,4(sp)
    98d0:	dfc00615 	stw	ra,24(sp)
    98d4:	dd000515 	stw	r20,20(sp)
    98d8:	dc400215 	stw	r17,8(sp)
    98dc:	2025883a 	mov	r18,r4
    98e0:	2827883a 	mov	r19,r5
    98e4:	3021883a 	mov	r16,r6
    98e8:	0009bec0 	call	9bec <__locale_mb_cur_max>
    98ec:	10800058 	cmpnei	r2,r2,1
    98f0:	1000071e 	bne	r2,zero,9910 <__fputwc+0x50>
    98f4:	98bfffc4 	addi	r2,r19,-1
    98f8:	10803fe8 	cmpgeui	r2,r2,255
    98fc:	1000041e 	bne	r2,zero,9910 <__fputwc+0x50>
    9900:	980b883a 	mov	r5,r19
    9904:	dcc000c5 	stb	r19,3(sp)
    9908:	05000044 	movi	r20,1
    990c:	00000a06 	br	9938 <__fputwc+0x78>
    9910:	81c01704 	addi	r7,r16,92
    9914:	980d883a 	mov	r6,r19
    9918:	d94000c4 	addi	r5,sp,3
    991c:	9009883a 	mov	r4,r18
    9920:	0009fa00 	call	9fa0 <_wcrtomb_r>
    9924:	1029883a 	mov	r20,r2
    9928:	10bfffd8 	cmpnei	r2,r2,-1
    992c:	10003926 	beq	r2,zero,9a14 <__fputwc+0x154>
    9930:	a0001f26 	beq	r20,zero,99b0 <__fputwc+0xf0>
    9934:	d94000c3 	ldbu	r5,3(sp)
    9938:	0023883a 	mov	r17,zero
    993c:	00000a06 	br	9968 <__fputwc+0xa8>
    9940:	80800017 	ldw	r2,0(r16)
    9944:	11400005 	stb	r5,0(r2)
    9948:	80c00017 	ldw	r3,0(r16)
    994c:	18c00044 	addi	r3,r3,1
    9950:	80c00015 	stw	r3,0(r16)
    9954:	8c400044 	addi	r17,r17,1
    9958:	d88000c4 	addi	r2,sp,3
    995c:	1447883a 	add	r3,r2,r17
    9960:	8d00132e 	bgeu	r17,r20,99b0 <__fputwc+0xf0>
    9964:	19400003 	ldbu	r5,0(r3)
    9968:	80c00217 	ldw	r3,8(r16)
    996c:	18ffffc4 	addi	r3,r3,-1
    9970:	80c00215 	stw	r3,8(r16)
    9974:	183ff20e 	bge	r3,zero,9940 <__fputwc+0x80>
    9978:	80800617 	ldw	r2,24(r16)
    997c:	18801616 	blt	r3,r2,99d8 <__fputwc+0x118>
    9980:	80800017 	ldw	r2,0(r16)
    9984:	11400005 	stb	r5,0(r2)
    9988:	80800017 	ldw	r2,0(r16)
    998c:	10c00003 	ldbu	r3,0(r2)
    9990:	10800044 	addi	r2,r2,1
    9994:	18c002a0 	cmpeqi	r3,r3,10
    9998:	1800171e 	bne	r3,zero,99f8 <__fputwc+0x138>
    999c:	80800015 	stw	r2,0(r16)
    99a0:	8c400044 	addi	r17,r17,1
    99a4:	d88000c4 	addi	r2,sp,3
    99a8:	1447883a 	add	r3,r2,r17
    99ac:	8d3fed36 	bltu	r17,r20,9964 <__fputwc+0xa4>
    99b0:	9829883a 	mov	r20,r19
    99b4:	a005883a 	mov	r2,r20
    99b8:	dfc00617 	ldw	ra,24(sp)
    99bc:	dd000517 	ldw	r20,20(sp)
    99c0:	dcc00417 	ldw	r19,16(sp)
    99c4:	dc800317 	ldw	r18,12(sp)
    99c8:	dc400217 	ldw	r17,8(sp)
    99cc:	dc000117 	ldw	r16,4(sp)
    99d0:	dec00704 	addi	sp,sp,28
    99d4:	f800283a 	ret
    99d8:	29403fcc 	andi	r5,r5,255
    99dc:	800d883a 	mov	r6,r16
    99e0:	9009883a 	mov	r4,r18
    99e4:	0009e400 	call	9e40 <__swbuf_r>
    99e8:	10bfffe0 	cmpeqi	r2,r2,-1
    99ec:	103fd926 	beq	r2,zero,9954 <__fputwc+0x94>
    99f0:	053fffc4 	movi	r20,-1
    99f4:	003fef06 	br	99b4 <__fputwc+0xf4>
    99f8:	800d883a 	mov	r6,r16
    99fc:	01400284 	movi	r5,10
    9a00:	9009883a 	mov	r4,r18
    9a04:	0009e400 	call	9e40 <__swbuf_r>
    9a08:	10bfffe0 	cmpeqi	r2,r2,-1
    9a0c:	103fd126 	beq	r2,zero,9954 <__fputwc+0x94>
    9a10:	003ff706 	br	99f0 <__fputwc+0x130>
    9a14:	8080030b 	ldhu	r2,12(r16)
    9a18:	10801014 	ori	r2,r2,64
    9a1c:	8080030d 	sth	r2,12(r16)
    9a20:	003fe406 	br	99b4 <__fputwc+0xf4>

00009a24 <_fputwc_r>:
    9a24:	3080030b 	ldhu	r2,12(r6)
    9a28:	10c8000c 	andi	r3,r2,8192
    9a2c:	1800051e 	bne	r3,zero,9a44 <_fputwc_r+0x20>
    9a30:	30c01917 	ldw	r3,100(r6)
    9a34:	10880014 	ori	r2,r2,8192
    9a38:	3080030d 	sth	r2,12(r6)
    9a3c:	18880014 	ori	r2,r3,8192
    9a40:	30801915 	stw	r2,100(r6)
    9a44:	00098c01 	jmpi	98c0 <__fputwc>

00009a48 <fputwc>:
    9a48:	defffc04 	addi	sp,sp,-16
    9a4c:	00800074 	movhi	r2,1
    9a50:	dc000215 	stw	r16,8(sp)
    9a54:	140b9e17 	ldw	r16,11896(r2)
    9a58:	dfc00315 	stw	ra,12(sp)
    9a5c:	280d883a 	mov	r6,r5
    9a60:	200b883a 	mov	r5,r4
    9a64:	80000226 	beq	r16,zero,9a70 <fputwc+0x28>
    9a68:	80800e17 	ldw	r2,56(r16)
    9a6c:	10000d26 	beq	r2,zero,9aa4 <fputwc+0x5c>
    9a70:	3080030b 	ldhu	r2,12(r6)
    9a74:	10c8000c 	andi	r3,r2,8192
    9a78:	1800051e 	bne	r3,zero,9a90 <fputwc+0x48>
    9a7c:	30c01917 	ldw	r3,100(r6)
    9a80:	10880014 	ori	r2,r2,8192
    9a84:	3080030d 	sth	r2,12(r6)
    9a88:	18880014 	ori	r2,r3,8192
    9a8c:	30801915 	stw	r2,100(r6)
    9a90:	8009883a 	mov	r4,r16
    9a94:	dfc00317 	ldw	ra,12(sp)
    9a98:	dc000217 	ldw	r16,8(sp)
    9a9c:	dec00404 	addi	sp,sp,16
    9aa0:	00098c01 	jmpi	98c0 <__fputwc>
    9aa4:	d9000015 	stw	r4,0(sp)
    9aa8:	8009883a 	mov	r4,r16
    9aac:	d9800115 	stw	r6,4(sp)
    9ab0:	0004ec00 	call	4ec0 <__sinit>
    9ab4:	d9800117 	ldw	r6,4(sp)
    9ab8:	d9400017 	ldw	r5,0(sp)
    9abc:	003fec06 	br	9a70 <fputwc+0x28>

00009ac0 <_fstat_r>:
    9ac0:	2807883a 	mov	r3,r5
    9ac4:	defffe04 	addi	sp,sp,-8
    9ac8:	dc000015 	stw	r16,0(sp)
    9acc:	00800074 	movhi	r2,1
    9ad0:	300b883a 	mov	r5,r6
    9ad4:	2021883a 	mov	r16,r4
    9ad8:	1809883a 	mov	r4,r3
    9adc:	dfc00115 	stw	ra,4(sp)
    9ae0:	1012d215 	stw	zero,19272(r2)
    9ae4:	000dcd80 	call	dcd8 <fstat>
    9ae8:	10ffffd8 	cmpnei	r3,r2,-1
    9aec:	18000426 	beq	r3,zero,9b00 <_fstat_r+0x40>
    9af0:	dfc00117 	ldw	ra,4(sp)
    9af4:	dc000017 	ldw	r16,0(sp)
    9af8:	dec00204 	addi	sp,sp,8
    9afc:	f800283a 	ret
    9b00:	00c00074 	movhi	r3,1
    9b04:	18d2d217 	ldw	r3,19272(r3)
    9b08:	183ff926 	beq	r3,zero,9af0 <_fstat_r+0x30>
    9b0c:	80c00015 	stw	r3,0(r16)
    9b10:	dfc00117 	ldw	ra,4(sp)
    9b14:	dc000017 	ldw	r16,0(sp)
    9b18:	dec00204 	addi	sp,sp,8
    9b1c:	f800283a 	ret

00009b20 <_isatty_r>:
    9b20:	defffe04 	addi	sp,sp,-8
    9b24:	dc000015 	stw	r16,0(sp)
    9b28:	00800074 	movhi	r2,1
    9b2c:	2021883a 	mov	r16,r4
    9b30:	2809883a 	mov	r4,r5
    9b34:	dfc00115 	stw	ra,4(sp)
    9b38:	1012d215 	stw	zero,19272(r2)
    9b3c:	000ddf00 	call	ddf0 <isatty>
    9b40:	10ffffd8 	cmpnei	r3,r2,-1
    9b44:	18000426 	beq	r3,zero,9b58 <_isatty_r+0x38>
    9b48:	dfc00117 	ldw	ra,4(sp)
    9b4c:	dc000017 	ldw	r16,0(sp)
    9b50:	dec00204 	addi	sp,sp,8
    9b54:	f800283a 	ret
    9b58:	00c00074 	movhi	r3,1
    9b5c:	18d2d217 	ldw	r3,19272(r3)
    9b60:	183ff926 	beq	r3,zero,9b48 <_isatty_r+0x28>
    9b64:	80c00015 	stw	r3,0(r16)
    9b68:	dfc00117 	ldw	ra,4(sp)
    9b6c:	dc000017 	ldw	r16,0(sp)
    9b70:	dec00204 	addi	sp,sp,8
    9b74:	f800283a 	ret

00009b78 <_setlocale_r>:
    9b78:	30001626 	beq	r6,zero,9bd4 <_setlocale_r+0x5c>
    9b7c:	01400074 	movhi	r5,1
    9b80:	defffe04 	addi	sp,sp,-8
    9b84:	2943c304 	addi	r5,r5,3852
    9b88:	3009883a 	mov	r4,r6
    9b8c:	dc000015 	stw	r16,0(sp)
    9b90:	dfc00115 	stw	ra,4(sp)
    9b94:	3021883a 	mov	r16,r6
    9b98:	0009d840 	call	9d84 <strcmp>
    9b9c:	1000061e 	bne	r2,zero,9bb8 <_setlocale_r+0x40>
    9ba0:	00800074 	movhi	r2,1
    9ba4:	1083c204 	addi	r2,r2,3848
    9ba8:	dfc00117 	ldw	ra,4(sp)
    9bac:	dc000017 	ldw	r16,0(sp)
    9bb0:	dec00204 	addi	sp,sp,8
    9bb4:	f800283a 	ret
    9bb8:	80800003 	ldbu	r2,0(r16)
    9bbc:	10bfef44 	addi	r2,r2,-67
    9bc0:	10000726 	beq	r2,zero,9be0 <_setlocale_r+0x68>
    9bc4:	80800003 	ldbu	r2,0(r16)
    9bc8:	103ff526 	beq	r2,zero,9ba0 <_setlocale_r+0x28>
    9bcc:	0005883a 	mov	r2,zero
    9bd0:	003ff506 	br	9ba8 <_setlocale_r+0x30>
    9bd4:	00800074 	movhi	r2,1
    9bd8:	1083c204 	addi	r2,r2,3848
    9bdc:	f800283a 	ret
    9be0:	80800043 	ldbu	r2,1(r16)
    9be4:	103fee26 	beq	r2,zero,9ba0 <_setlocale_r+0x28>
    9be8:	003ff606 	br	9bc4 <_setlocale_r+0x4c>

00009bec <__locale_mb_cur_max>:
    9bec:	00800074 	movhi	r2,1
    9bf0:	1086dc07 	ldb	r2,7024(r2)
    9bf4:	f800283a 	ret

00009bf8 <setlocale>:
    9bf8:	28001626 	beq	r5,zero,9c54 <setlocale+0x5c>
    9bfc:	defffe04 	addi	sp,sp,-8
    9c00:	dc000015 	stw	r16,0(sp)
    9c04:	2821883a 	mov	r16,r5
    9c08:	01400074 	movhi	r5,1
    9c0c:	2943c304 	addi	r5,r5,3852
    9c10:	8009883a 	mov	r4,r16
    9c14:	dfc00115 	stw	ra,4(sp)
    9c18:	0009d840 	call	9d84 <strcmp>
    9c1c:	1000061e 	bne	r2,zero,9c38 <setlocale+0x40>
    9c20:	00800074 	movhi	r2,1
    9c24:	1083c204 	addi	r2,r2,3848
    9c28:	dfc00117 	ldw	ra,4(sp)
    9c2c:	dc000017 	ldw	r16,0(sp)
    9c30:	dec00204 	addi	sp,sp,8
    9c34:	f800283a 	ret
    9c38:	80800003 	ldbu	r2,0(r16)
    9c3c:	10bfef44 	addi	r2,r2,-67
    9c40:	10000726 	beq	r2,zero,9c60 <setlocale+0x68>
    9c44:	80800003 	ldbu	r2,0(r16)
    9c48:	103ff526 	beq	r2,zero,9c20 <setlocale+0x28>
    9c4c:	0005883a 	mov	r2,zero
    9c50:	003ff506 	br	9c28 <setlocale+0x30>
    9c54:	00800074 	movhi	r2,1
    9c58:	1083c204 	addi	r2,r2,3848
    9c5c:	f800283a 	ret
    9c60:	80800043 	ldbu	r2,1(r16)
    9c64:	103fee26 	beq	r2,zero,9c20 <setlocale+0x28>
    9c68:	003ff606 	br	9c44 <setlocale+0x4c>

00009c6c <_lseek_r>:
    9c6c:	2807883a 	mov	r3,r5
    9c70:	defffe04 	addi	sp,sp,-8
    9c74:	dc000015 	stw	r16,0(sp)
    9c78:	300b883a 	mov	r5,r6
    9c7c:	00800074 	movhi	r2,1
    9c80:	380d883a 	mov	r6,r7
    9c84:	2021883a 	mov	r16,r4
    9c88:	1809883a 	mov	r4,r3
    9c8c:	dfc00115 	stw	ra,4(sp)
    9c90:	1012d215 	stw	zero,19272(r2)
    9c94:	000e1300 	call	e130 <lseek>
    9c98:	10ffffd8 	cmpnei	r3,r2,-1
    9c9c:	18000426 	beq	r3,zero,9cb0 <_lseek_r+0x44>
    9ca0:	dfc00117 	ldw	ra,4(sp)
    9ca4:	dc000017 	ldw	r16,0(sp)
    9ca8:	dec00204 	addi	sp,sp,8
    9cac:	f800283a 	ret
    9cb0:	00c00074 	movhi	r3,1
    9cb4:	18d2d217 	ldw	r3,19272(r3)
    9cb8:	183ff926 	beq	r3,zero,9ca0 <_lseek_r+0x34>
    9cbc:	80c00015 	stw	r3,0(r16)
    9cc0:	dfc00117 	ldw	ra,4(sp)
    9cc4:	dc000017 	ldw	r16,0(sp)
    9cc8:	dec00204 	addi	sp,sp,8
    9ccc:	f800283a 	ret

00009cd0 <_mbtowc_r>:
    9cd0:	00800074 	movhi	r2,1
    9cd4:	1086cb17 	ldw	r2,6956(r2)
    9cd8:	1000683a 	jmp	r2

00009cdc <__ascii_mbtowc>:
    9cdc:	deffff04 	addi	sp,sp,-4
    9ce0:	28000826 	beq	r5,zero,9d04 <__ascii_mbtowc+0x28>
    9ce4:	30000926 	beq	r6,zero,9d0c <__ascii_mbtowc+0x30>
    9ce8:	38000b26 	beq	r7,zero,9d18 <__ascii_mbtowc+0x3c>
    9cec:	30800003 	ldbu	r2,0(r6)
    9cf0:	28800015 	stw	r2,0(r5)
    9cf4:	30800003 	ldbu	r2,0(r6)
    9cf8:	1004c03a 	cmpne	r2,r2,zero
    9cfc:	dec00104 	addi	sp,sp,4
    9d00:	f800283a 	ret
    9d04:	d80b883a 	mov	r5,sp
    9d08:	303ff71e 	bne	r6,zero,9ce8 <__ascii_mbtowc+0xc>
    9d0c:	0005883a 	mov	r2,zero
    9d10:	dec00104 	addi	sp,sp,4
    9d14:	f800283a 	ret
    9d18:	00bfff84 	movi	r2,-2
    9d1c:	003ff706 	br	9cfc <__ascii_mbtowc+0x20>

00009d20 <_read_r>:
    9d20:	2807883a 	mov	r3,r5
    9d24:	defffe04 	addi	sp,sp,-8
    9d28:	dc000015 	stw	r16,0(sp)
    9d2c:	300b883a 	mov	r5,r6
    9d30:	00800074 	movhi	r2,1
    9d34:	380d883a 	mov	r6,r7
    9d38:	2021883a 	mov	r16,r4
    9d3c:	1809883a 	mov	r4,r3
    9d40:	dfc00115 	stw	ra,4(sp)
    9d44:	1012d215 	stw	zero,19272(r2)
    9d48:	000e3100 	call	e310 <read>
    9d4c:	10ffffd8 	cmpnei	r3,r2,-1
    9d50:	18000426 	beq	r3,zero,9d64 <_read_r+0x44>
    9d54:	dfc00117 	ldw	ra,4(sp)
    9d58:	dc000017 	ldw	r16,0(sp)
    9d5c:	dec00204 	addi	sp,sp,8
    9d60:	f800283a 	ret
    9d64:	00c00074 	movhi	r3,1
    9d68:	18d2d217 	ldw	r3,19272(r3)
    9d6c:	183ff926 	beq	r3,zero,9d54 <_read_r+0x34>
    9d70:	80c00015 	stw	r3,0(r16)
    9d74:	dfc00117 	ldw	ra,4(sp)
    9d78:	dc000017 	ldw	r16,0(sp)
    9d7c:	dec00204 	addi	sp,sp,8
    9d80:	f800283a 	ret

00009d84 <strcmp>:
    9d84:	2144b03a 	or	r2,r4,r5
    9d88:	108000cc 	andi	r2,r2,3
    9d8c:	1000141e 	bne	r2,zero,9de0 <strcmp+0x5c>
    9d90:	20800017 	ldw	r2,0(r4)
    9d94:	28c00017 	ldw	r3,0(r5)
    9d98:	10c0111e 	bne	r2,r3,9de0 <strcmp+0x5c>
    9d9c:	01ffbff4 	movhi	r7,65279
    9da0:	01a02074 	movhi	r6,32897
    9da4:	39ffbfc4 	addi	r7,r7,-257
    9da8:	31a02004 	addi	r6,r6,-32640
    9dac:	00000306 	br	9dbc <strcmp+0x38>
    9db0:	20800017 	ldw	r2,0(r4)
    9db4:	28c00017 	ldw	r3,0(r5)
    9db8:	10c0091e 	bne	r2,r3,9de0 <strcmp+0x5c>
    9dbc:	11c7883a 	add	r3,r2,r7
    9dc0:	0084303a 	nor	r2,zero,r2
    9dc4:	1884703a 	and	r2,r3,r2
    9dc8:	1184703a 	and	r2,r2,r6
    9dcc:	21000104 	addi	r4,r4,4
    9dd0:	29400104 	addi	r5,r5,4
    9dd4:	103ff626 	beq	r2,zero,9db0 <strcmp+0x2c>
    9dd8:	0005883a 	mov	r2,zero
    9ddc:	f800283a 	ret
    9de0:	20c00003 	ldbu	r3,0(r4)
    9de4:	18803fcc 	andi	r2,r3,255
    9de8:	1080201c 	xori	r2,r2,128
    9dec:	10bfe004 	addi	r2,r2,-128
    9df0:	1000071e 	bne	r2,zero,9e10 <strcmp+0x8c>
    9df4:	00000a06 	br	9e20 <strcmp+0x9c>
    9df8:	20c00003 	ldbu	r3,0(r4)
    9dfc:	29400044 	addi	r5,r5,1
    9e00:	18803fcc 	andi	r2,r3,255
    9e04:	1080201c 	xori	r2,r2,128
    9e08:	10bfe004 	addi	r2,r2,-128
    9e0c:	10000726 	beq	r2,zero,9e2c <strcmp+0xa8>
    9e10:	29800007 	ldb	r6,0(r5)
    9e14:	21000044 	addi	r4,r4,1
    9e18:	30bff726 	beq	r6,r2,9df8 <strcmp+0x74>
    9e1c:	18803fcc 	andi	r2,r3,255
    9e20:	28c00003 	ldbu	r3,0(r5)
    9e24:	10c5c83a 	sub	r2,r2,r3
    9e28:	f800283a 	ret
    9e2c:	28c00003 	ldbu	r3,0(r5)
    9e30:	0005883a 	mov	r2,zero
    9e34:	10c5c83a 	sub	r2,r2,r3
    9e38:	f800283a 	ret

00009e3c <_vfiprintf_r>:
    9e3c:	00080f81 	jmpi	80f8 <___vfiprintf_internal_r>

00009e40 <__swbuf_r>:
    9e40:	defffb04 	addi	sp,sp,-20
    9e44:	dcc00315 	stw	r19,12(sp)
    9e48:	dc400115 	stw	r17,4(sp)
    9e4c:	dc000015 	stw	r16,0(sp)
    9e50:	dfc00415 	stw	ra,16(sp)
    9e54:	dc800215 	stw	r18,8(sp)
    9e58:	2027883a 	mov	r19,r4
    9e5c:	2823883a 	mov	r17,r5
    9e60:	3021883a 	mov	r16,r6
    9e64:	20000226 	beq	r4,zero,9e70 <__swbuf_r+0x30>
    9e68:	20800e17 	ldw	r2,56(r4)
    9e6c:	10003e26 	beq	r2,zero,9f68 <__swbuf_r+0x128>
    9e70:	80800617 	ldw	r2,24(r16)
    9e74:	80c0030b 	ldhu	r3,12(r16)
    9e78:	80800215 	stw	r2,8(r16)
    9e7c:	1880020c 	andi	r2,r3,8
    9e80:	10001f26 	beq	r2,zero,9f00 <__swbuf_r+0xc0>
    9e84:	80800417 	ldw	r2,16(r16)
    9e88:	10001d26 	beq	r2,zero,9f00 <__swbuf_r+0xc0>
    9e8c:	1948000c 	andi	r5,r3,8192
    9e90:	8c803fcc 	andi	r18,r17,255
    9e94:	28002326 	beq	r5,zero,9f24 <__swbuf_r+0xe4>
    9e98:	80c00017 	ldw	r3,0(r16)
    9e9c:	81000517 	ldw	r4,20(r16)
    9ea0:	1885c83a 	sub	r2,r3,r2
    9ea4:	1100290e 	bge	r2,r4,9f4c <__swbuf_r+0x10c>
    9ea8:	10800044 	addi	r2,r2,1
    9eac:	81400217 	ldw	r5,8(r16)
    9eb0:	19000044 	addi	r4,r3,1
    9eb4:	81000015 	stw	r4,0(r16)
    9eb8:	297fffc4 	addi	r5,r5,-1
    9ebc:	81400215 	stw	r5,8(r16)
    9ec0:	1c400005 	stb	r17,0(r3)
    9ec4:	80c00517 	ldw	r3,20(r16)
    9ec8:	18802926 	beq	r3,r2,9f70 <__swbuf_r+0x130>
    9ecc:	8080030b 	ldhu	r2,12(r16)
    9ed0:	1080004c 	andi	r2,r2,1
    9ed4:	10000226 	beq	r2,zero,9ee0 <__swbuf_r+0xa0>
    9ed8:	90800298 	cmpnei	r2,r18,10
    9edc:	10002426 	beq	r2,zero,9f70 <__swbuf_r+0x130>
    9ee0:	9005883a 	mov	r2,r18
    9ee4:	dfc00417 	ldw	ra,16(sp)
    9ee8:	dcc00317 	ldw	r19,12(sp)
    9eec:	dc800217 	ldw	r18,8(sp)
    9ef0:	dc400117 	ldw	r17,4(sp)
    9ef4:	dc000017 	ldw	r16,0(sp)
    9ef8:	dec00504 	addi	sp,sp,20
    9efc:	f800283a 	ret
    9f00:	800b883a 	mov	r5,r16
    9f04:	9809883a 	mov	r4,r19
    9f08:	0002d840 	call	2d84 <__swsetup_r>
    9f0c:	10001c1e 	bne	r2,zero,9f80 <__swbuf_r+0x140>
    9f10:	80c0030b 	ldhu	r3,12(r16)
    9f14:	80800417 	ldw	r2,16(r16)
    9f18:	8c803fcc 	andi	r18,r17,255
    9f1c:	1948000c 	andi	r5,r3,8192
    9f20:	283fdd1e 	bne	r5,zero,9e98 <__swbuf_r+0x58>
    9f24:	81001917 	ldw	r4,100(r16)
    9f28:	18c80014 	ori	r3,r3,8192
    9f2c:	0177ffc4 	movi	r5,-8193
    9f30:	2148703a 	and	r4,r4,r5
    9f34:	80c0030d 	sth	r3,12(r16)
    9f38:	80c00017 	ldw	r3,0(r16)
    9f3c:	81001915 	stw	r4,100(r16)
    9f40:	81000517 	ldw	r4,20(r16)
    9f44:	1885c83a 	sub	r2,r3,r2
    9f48:	113fd716 	blt	r2,r4,9ea8 <__swbuf_r+0x68>
    9f4c:	800b883a 	mov	r5,r16
    9f50:	9809883a 	mov	r4,r19
    9f54:	0004a780 	call	4a78 <_fflush_r>
    9f58:	1000091e 	bne	r2,zero,9f80 <__swbuf_r+0x140>
    9f5c:	80c00017 	ldw	r3,0(r16)
    9f60:	00800044 	movi	r2,1
    9f64:	003fd106 	br	9eac <__swbuf_r+0x6c>
    9f68:	0004ec00 	call	4ec0 <__sinit>
    9f6c:	003fc006 	br	9e70 <__swbuf_r+0x30>
    9f70:	800b883a 	mov	r5,r16
    9f74:	9809883a 	mov	r4,r19
    9f78:	0004a780 	call	4a78 <_fflush_r>
    9f7c:	103fd826 	beq	r2,zero,9ee0 <__swbuf_r+0xa0>
    9f80:	04bfffc4 	movi	r18,-1
    9f84:	003fd606 	br	9ee0 <__swbuf_r+0xa0>

00009f88 <__swbuf>:
    9f88:	00c00074 	movhi	r3,1
    9f8c:	2005883a 	mov	r2,r4
    9f90:	190b9e17 	ldw	r4,11896(r3)
    9f94:	280d883a 	mov	r6,r5
    9f98:	100b883a 	mov	r5,r2
    9f9c:	0009e401 	jmpi	9e40 <__swbuf_r>

00009fa0 <_wcrtomb_r>:
    9fa0:	defffa04 	addi	sp,sp,-24
    9fa4:	dc400415 	stw	r17,16(sp)
    9fa8:	dc000315 	stw	r16,12(sp)
    9fac:	00800074 	movhi	r2,1
    9fb0:	dfc00515 	stw	ra,20(sp)
    9fb4:	1086ca17 	ldw	r2,6952(r2)
    9fb8:	2023883a 	mov	r17,r4
    9fbc:	3821883a 	mov	r16,r7
    9fc0:	28000826 	beq	r5,zero,9fe4 <_wcrtomb_r+0x44>
    9fc4:	103ee83a 	callr	r2
    9fc8:	10ffffd8 	cmpnei	r3,r2,-1
    9fcc:	18000a26 	beq	r3,zero,9ff8 <_wcrtomb_r+0x58>
    9fd0:	dfc00517 	ldw	ra,20(sp)
    9fd4:	dc400417 	ldw	r17,16(sp)
    9fd8:	dc000317 	ldw	r16,12(sp)
    9fdc:	dec00604 	addi	sp,sp,24
    9fe0:	f800283a 	ret
    9fe4:	000d883a 	mov	r6,zero
    9fe8:	d9400084 	addi	r5,sp,2
    9fec:	103ee83a 	callr	r2
    9ff0:	10ffffd8 	cmpnei	r3,r2,-1
    9ff4:	183ff61e 	bne	r3,zero,9fd0 <_wcrtomb_r+0x30>
    9ff8:	00802284 	movi	r2,138
    9ffc:	80000015 	stw	zero,0(r16)
    a000:	88800015 	stw	r2,0(r17)
    a004:	00bfffc4 	movi	r2,-1
    a008:	003ff106 	br	9fd0 <_wcrtomb_r+0x30>

0000a00c <wcrtomb>:
    a00c:	defffa04 	addi	sp,sp,-24
    a010:	00c00074 	movhi	r3,1
    a014:	dc400415 	stw	r17,16(sp)
    a018:	dc000315 	stw	r16,12(sp)
    a01c:	1c4b9e17 	ldw	r17,11896(r3)
    a020:	dfc00515 	stw	ra,20(sp)
    a024:	00c00074 	movhi	r3,1
    a028:	18c6ca17 	ldw	r3,6952(r3)
    a02c:	3021883a 	mov	r16,r6
    a030:	20000c26 	beq	r4,zero,a064 <wcrtomb+0x58>
    a034:	280d883a 	mov	r6,r5
    a038:	800f883a 	mov	r7,r16
    a03c:	200b883a 	mov	r5,r4
    a040:	8809883a 	mov	r4,r17
    a044:	183ee83a 	callr	r3
    a048:	10ffffd8 	cmpnei	r3,r2,-1
    a04c:	18000c26 	beq	r3,zero,a080 <wcrtomb+0x74>
    a050:	dfc00517 	ldw	ra,20(sp)
    a054:	dc400417 	ldw	r17,16(sp)
    a058:	dc000317 	ldw	r16,12(sp)
    a05c:	dec00604 	addi	sp,sp,24
    a060:	f800283a 	ret
    a064:	300f883a 	mov	r7,r6
    a068:	d9400084 	addi	r5,sp,2
    a06c:	000d883a 	mov	r6,zero
    a070:	8809883a 	mov	r4,r17
    a074:	183ee83a 	callr	r3
    a078:	10ffffd8 	cmpnei	r3,r2,-1
    a07c:	183ff41e 	bne	r3,zero,a050 <wcrtomb+0x44>
    a080:	00802284 	movi	r2,138
    a084:	80000015 	stw	zero,0(r16)
    a088:	88800015 	stw	r2,0(r17)
    a08c:	00bfffc4 	movi	r2,-1
    a090:	003fef06 	br	a050 <wcrtomb+0x44>

0000a094 <_wctomb_r>:
    a094:	00800074 	movhi	r2,1
    a098:	1086ca17 	ldw	r2,6952(r2)
    a09c:	1000683a 	jmp	r2

0000a0a0 <__ascii_wctomb>:
    a0a0:	28000926 	beq	r5,zero,a0c8 <__ascii_wctomb+0x28>
    a0a4:	30804030 	cmpltui	r2,r6,256
    a0a8:	10000326 	beq	r2,zero,a0b8 <__ascii_wctomb+0x18>
    a0ac:	29800005 	stb	r6,0(r5)
    a0b0:	00800044 	movi	r2,1
    a0b4:	f800283a 	ret
    a0b8:	00802284 	movi	r2,138
    a0bc:	20800015 	stw	r2,0(r4)
    a0c0:	00bfffc4 	movi	r2,-1
    a0c4:	f800283a 	ret
    a0c8:	0005883a 	mov	r2,zero
    a0cc:	f800283a 	ret

0000a0d0 <abort>:
    a0d0:	deffff04 	addi	sp,sp,-4
    a0d4:	01000184 	movi	r4,6
    a0d8:	dfc00015 	stw	ra,0(sp)
    a0dc:	000a35c0 	call	a35c <raise>
    a0e0:	01000044 	movi	r4,1
    a0e4:	000dc640 	call	dc64 <_exit>

0000a0e8 <_init_signal_r>:
    a0e8:	2080b717 	ldw	r2,732(r4)
    a0ec:	10000226 	beq	r2,zero,a0f8 <_init_signal_r+0x10>
    a0f0:	0005883a 	mov	r2,zero
    a0f4:	f800283a 	ret
    a0f8:	defffe04 	addi	sp,sp,-8
    a0fc:	01402004 	movi	r5,128
    a100:	dc000015 	stw	r16,0(sp)
    a104:	dfc00115 	stw	ra,4(sp)
    a108:	2021883a 	mov	r16,r4
    a10c:	0005b5c0 	call	5b5c <_malloc_r>
    a110:	8080b715 	stw	r2,732(r16)
    a114:	1009883a 	mov	r4,r2
    a118:	10000826 	beq	r2,zero,a13c <_init_signal_r+0x54>
    a11c:	01802004 	movi	r6,128
    a120:	000b883a 	mov	r5,zero
    a124:	00066380 	call	6638 <memset>
    a128:	0005883a 	mov	r2,zero
    a12c:	dfc00117 	ldw	ra,4(sp)
    a130:	dc000017 	ldw	r16,0(sp)
    a134:	dec00204 	addi	sp,sp,8
    a138:	f800283a 	ret
    a13c:	00bfffc4 	movi	r2,-1
    a140:	003ffa06 	br	a12c <_init_signal_r+0x44>

0000a144 <_signal_r>:
    a144:	defffc04 	addi	sp,sp,-16
    a148:	dc400115 	stw	r17,4(sp)
    a14c:	dfc00315 	stw	ra,12(sp)
    a150:	dc800215 	stw	r18,8(sp)
    a154:	dc000015 	stw	r16,0(sp)
    a158:	28800830 	cmpltui	r2,r5,32
    a15c:	2023883a 	mov	r17,r4
    a160:	10000e26 	beq	r2,zero,a19c <_signal_r+0x58>
    a164:	20c0b717 	ldw	r3,732(r4)
    a168:	2821883a 	mov	r16,r5
    a16c:	3025883a 	mov	r18,r6
    a170:	18000e26 	beq	r3,zero,a1ac <_signal_r+0x68>
    a174:	802090ba 	slli	r16,r16,2
    a178:	1c21883a 	add	r16,r3,r16
    a17c:	80800017 	ldw	r2,0(r16)
    a180:	84800015 	stw	r18,0(r16)
    a184:	dfc00317 	ldw	ra,12(sp)
    a188:	dc800217 	ldw	r18,8(sp)
    a18c:	dc400117 	ldw	r17,4(sp)
    a190:	dc000017 	ldw	r16,0(sp)
    a194:	dec00404 	addi	sp,sp,16
    a198:	f800283a 	ret
    a19c:	00800584 	movi	r2,22
    a1a0:	20800015 	stw	r2,0(r4)
    a1a4:	00bfffc4 	movi	r2,-1
    a1a8:	003ff606 	br	a184 <_signal_r+0x40>
    a1ac:	01402004 	movi	r5,128
    a1b0:	0005b5c0 	call	5b5c <_malloc_r>
    a1b4:	8880b715 	stw	r2,732(r17)
    a1b8:	10000626 	beq	r2,zero,a1d4 <_signal_r+0x90>
    a1bc:	01802004 	movi	r6,128
    a1c0:	000b883a 	mov	r5,zero
    a1c4:	1009883a 	mov	r4,r2
    a1c8:	00066380 	call	6638 <memset>
    a1cc:	1007883a 	mov	r3,r2
    a1d0:	003fe806 	br	a174 <_signal_r+0x30>
    a1d4:	00bfffc4 	movi	r2,-1
    a1d8:	003fea06 	br	a184 <_signal_r+0x40>

0000a1dc <_raise_r>:
    a1dc:	28800830 	cmpltui	r2,r5,32
    a1e0:	10002b26 	beq	r2,zero,a290 <_raise_r+0xb4>
    a1e4:	2080b717 	ldw	r2,732(r4)
    a1e8:	defffd04 	addi	sp,sp,-12
    a1ec:	dc000115 	stw	r16,4(sp)
    a1f0:	dfc00215 	stw	ra,8(sp)
    a1f4:	2821883a 	mov	r16,r5
    a1f8:	10001026 	beq	r2,zero,a23c <_raise_r+0x60>
    a1fc:	280690ba 	slli	r3,r5,2
    a200:	10c5883a 	add	r2,r2,r3
    a204:	10c00017 	ldw	r3,0(r2)
    a208:	18000c26 	beq	r3,zero,a23c <_raise_r+0x60>
    a20c:	19400060 	cmpeqi	r5,r3,1
    a210:	28001a1e 	bne	r5,zero,a27c <_raise_r+0xa0>
    a214:	197fffd8 	cmpnei	r5,r3,-1
    a218:	28001126 	beq	r5,zero,a260 <_raise_r+0x84>
    a21c:	10000015 	stw	zero,0(r2)
    a220:	8009883a 	mov	r4,r16
    a224:	183ee83a 	callr	r3
    a228:	0005883a 	mov	r2,zero
    a22c:	dfc00217 	ldw	ra,8(sp)
    a230:	dc000117 	ldw	r16,4(sp)
    a234:	dec00304 	addi	sp,sp,12
    a238:	f800283a 	ret
    a23c:	d9000015 	stw	r4,0(sp)
    a240:	000a6340 	call	a634 <_getpid_r>
    a244:	d9000017 	ldw	r4,0(sp)
    a248:	800d883a 	mov	r6,r16
    a24c:	100b883a 	mov	r5,r2
    a250:	dfc00217 	ldw	ra,8(sp)
    a254:	dc000117 	ldw	r16,4(sp)
    a258:	dec00304 	addi	sp,sp,12
    a25c:	000a5d41 	jmpi	a5d4 <_kill_r>
    a260:	00800584 	movi	r2,22
    a264:	20800015 	stw	r2,0(r4)
    a268:	00800044 	movi	r2,1
    a26c:	dfc00217 	ldw	ra,8(sp)
    a270:	dc000117 	ldw	r16,4(sp)
    a274:	dec00304 	addi	sp,sp,12
    a278:	f800283a 	ret
    a27c:	0005883a 	mov	r2,zero
    a280:	dfc00217 	ldw	ra,8(sp)
    a284:	dc000117 	ldw	r16,4(sp)
    a288:	dec00304 	addi	sp,sp,12
    a28c:	f800283a 	ret
    a290:	00800584 	movi	r2,22
    a294:	20800015 	stw	r2,0(r4)
    a298:	00bfffc4 	movi	r2,-1
    a29c:	f800283a 	ret

0000a2a0 <__sigtramp_r>:
    a2a0:	28800830 	cmpltui	r2,r5,32
    a2a4:	10002b26 	beq	r2,zero,a354 <__sigtramp_r+0xb4>
    a2a8:	20c0b717 	ldw	r3,732(r4)
    a2ac:	defffd04 	addi	sp,sp,-12
    a2b0:	dc400115 	stw	r17,4(sp)
    a2b4:	dc000015 	stw	r16,0(sp)
    a2b8:	dfc00215 	stw	ra,8(sp)
    a2bc:	2821883a 	mov	r16,r5
    a2c0:	2023883a 	mov	r17,r4
    a2c4:	18001326 	beq	r3,zero,a314 <__sigtramp_r+0x74>
    a2c8:	800490ba 	slli	r2,r16,2
    a2cc:	1887883a 	add	r3,r3,r2
    a2d0:	18800017 	ldw	r2,0(r3)
    a2d4:	10000d26 	beq	r2,zero,a30c <__sigtramp_r+0x6c>
    a2d8:	113fffe0 	cmpeqi	r4,r2,-1
    a2dc:	2000191e 	bne	r4,zero,a344 <__sigtramp_r+0xa4>
    a2e0:	11000060 	cmpeqi	r4,r2,1
    a2e4:	2000151e 	bne	r4,zero,a33c <__sigtramp_r+0x9c>
    a2e8:	18000015 	stw	zero,0(r3)
    a2ec:	8009883a 	mov	r4,r16
    a2f0:	103ee83a 	callr	r2
    a2f4:	0005883a 	mov	r2,zero
    a2f8:	dfc00217 	ldw	ra,8(sp)
    a2fc:	dc400117 	ldw	r17,4(sp)
    a300:	dc000017 	ldw	r16,0(sp)
    a304:	dec00304 	addi	sp,sp,12
    a308:	f800283a 	ret
    a30c:	00800044 	movi	r2,1
    a310:	003ff906 	br	a2f8 <__sigtramp_r+0x58>
    a314:	01402004 	movi	r5,128
    a318:	0005b5c0 	call	5b5c <_malloc_r>
    a31c:	8880b715 	stw	r2,732(r17)
    a320:	10000a26 	beq	r2,zero,a34c <__sigtramp_r+0xac>
    a324:	01802004 	movi	r6,128
    a328:	000b883a 	mov	r5,zero
    a32c:	1009883a 	mov	r4,r2
    a330:	00066380 	call	6638 <memset>
    a334:	1007883a 	mov	r3,r2
    a338:	003fe306 	br	a2c8 <__sigtramp_r+0x28>
    a33c:	008000c4 	movi	r2,3
    a340:	003fed06 	br	a2f8 <__sigtramp_r+0x58>
    a344:	00800084 	movi	r2,2
    a348:	003feb06 	br	a2f8 <__sigtramp_r+0x58>
    a34c:	00bfffc4 	movi	r2,-1
    a350:	003fe906 	br	a2f8 <__sigtramp_r+0x58>
    a354:	00bfffc4 	movi	r2,-1
    a358:	f800283a 	ret

0000a35c <raise>:
    a35c:	defffd04 	addi	sp,sp,-12
    a360:	dc400115 	stw	r17,4(sp)
    a364:	00c00074 	movhi	r3,1
    a368:	dfc00215 	stw	ra,8(sp)
    a36c:	dc000015 	stw	r16,0(sp)
    a370:	20800830 	cmpltui	r2,r4,32
    a374:	1c4b9e17 	ldw	r17,11896(r3)
    a378:	10002326 	beq	r2,zero,a408 <raise+0xac>
    a37c:	8880b717 	ldw	r2,732(r17)
    a380:	2021883a 	mov	r16,r4
    a384:	10001026 	beq	r2,zero,a3c8 <raise+0x6c>
    a388:	200690ba 	slli	r3,r4,2
    a38c:	10c5883a 	add	r2,r2,r3
    a390:	10c00017 	ldw	r3,0(r2)
    a394:	18000c26 	beq	r3,zero,a3c8 <raise+0x6c>
    a398:	19400060 	cmpeqi	r5,r3,1
    a39c:	2800181e 	bne	r5,zero,a400 <raise+0xa4>
    a3a0:	197fffd8 	cmpnei	r5,r3,-1
    a3a4:	28001226 	beq	r5,zero,a3f0 <raise+0x94>
    a3a8:	10000015 	stw	zero,0(r2)
    a3ac:	183ee83a 	callr	r3
    a3b0:	0005883a 	mov	r2,zero
    a3b4:	dfc00217 	ldw	ra,8(sp)
    a3b8:	dc400117 	ldw	r17,4(sp)
    a3bc:	dc000017 	ldw	r16,0(sp)
    a3c0:	dec00304 	addi	sp,sp,12
    a3c4:	f800283a 	ret
    a3c8:	8809883a 	mov	r4,r17
    a3cc:	000a6340 	call	a634 <_getpid_r>
    a3d0:	800d883a 	mov	r6,r16
    a3d4:	100b883a 	mov	r5,r2
    a3d8:	8809883a 	mov	r4,r17
    a3dc:	dfc00217 	ldw	ra,8(sp)
    a3e0:	dc400117 	ldw	r17,4(sp)
    a3e4:	dc000017 	ldw	r16,0(sp)
    a3e8:	dec00304 	addi	sp,sp,12
    a3ec:	000a5d41 	jmpi	a5d4 <_kill_r>
    a3f0:	00800584 	movi	r2,22
    a3f4:	88800015 	stw	r2,0(r17)
    a3f8:	00800044 	movi	r2,1
    a3fc:	003fed06 	br	a3b4 <raise+0x58>
    a400:	0005883a 	mov	r2,zero
    a404:	003feb06 	br	a3b4 <raise+0x58>
    a408:	00800584 	movi	r2,22
    a40c:	88800015 	stw	r2,0(r17)
    a410:	00bfffc4 	movi	r2,-1
    a414:	003fe706 	br	a3b4 <raise+0x58>

0000a418 <signal>:
    a418:	defffc04 	addi	sp,sp,-16
    a41c:	dc800215 	stw	r18,8(sp)
    a420:	00c00074 	movhi	r3,1
    a424:	dfc00315 	stw	ra,12(sp)
    a428:	dc400115 	stw	r17,4(sp)
    a42c:	dc000015 	stw	r16,0(sp)
    a430:	20800830 	cmpltui	r2,r4,32
    a434:	1c8b9e17 	ldw	r18,11896(r3)
    a438:	10000e26 	beq	r2,zero,a474 <signal+0x5c>
    a43c:	2021883a 	mov	r16,r4
    a440:	9100b717 	ldw	r4,732(r18)
    a444:	2823883a 	mov	r17,r5
    a448:	20000e26 	beq	r4,zero,a484 <signal+0x6c>
    a44c:	802090ba 	slli	r16,r16,2
    a450:	2421883a 	add	r16,r4,r16
    a454:	80800017 	ldw	r2,0(r16)
    a458:	84400015 	stw	r17,0(r16)
    a45c:	dfc00317 	ldw	ra,12(sp)
    a460:	dc800217 	ldw	r18,8(sp)
    a464:	dc400117 	ldw	r17,4(sp)
    a468:	dc000017 	ldw	r16,0(sp)
    a46c:	dec00404 	addi	sp,sp,16
    a470:	f800283a 	ret
    a474:	00800584 	movi	r2,22
    a478:	90800015 	stw	r2,0(r18)
    a47c:	00bfffc4 	movi	r2,-1
    a480:	003ff606 	br	a45c <signal+0x44>
    a484:	9009883a 	mov	r4,r18
    a488:	01402004 	movi	r5,128
    a48c:	0005b5c0 	call	5b5c <_malloc_r>
    a490:	9080b715 	stw	r2,732(r18)
    a494:	1009883a 	mov	r4,r2
    a498:	10000526 	beq	r2,zero,a4b0 <signal+0x98>
    a49c:	01802004 	movi	r6,128
    a4a0:	000b883a 	mov	r5,zero
    a4a4:	00066380 	call	6638 <memset>
    a4a8:	1009883a 	mov	r4,r2
    a4ac:	003fe706 	br	a44c <signal+0x34>
    a4b0:	00bfffc4 	movi	r2,-1
    a4b4:	003fe906 	br	a45c <signal+0x44>

0000a4b8 <_init_signal>:
    a4b8:	defffe04 	addi	sp,sp,-8
    a4bc:	00800074 	movhi	r2,1
    a4c0:	dc000015 	stw	r16,0(sp)
    a4c4:	140b9e17 	ldw	r16,11896(r2)
    a4c8:	dfc00115 	stw	ra,4(sp)
    a4cc:	8080b717 	ldw	r2,732(r16)
    a4d0:	10000526 	beq	r2,zero,a4e8 <_init_signal+0x30>
    a4d4:	0005883a 	mov	r2,zero
    a4d8:	dfc00117 	ldw	ra,4(sp)
    a4dc:	dc000017 	ldw	r16,0(sp)
    a4e0:	dec00204 	addi	sp,sp,8
    a4e4:	f800283a 	ret
    a4e8:	8009883a 	mov	r4,r16
    a4ec:	01402004 	movi	r5,128
    a4f0:	0005b5c0 	call	5b5c <_malloc_r>
    a4f4:	8080b715 	stw	r2,732(r16)
    a4f8:	1009883a 	mov	r4,r2
    a4fc:	10000426 	beq	r2,zero,a510 <_init_signal+0x58>
    a500:	01802004 	movi	r6,128
    a504:	000b883a 	mov	r5,zero
    a508:	00066380 	call	6638 <memset>
    a50c:	003ff106 	br	a4d4 <_init_signal+0x1c>
    a510:	00bfffc4 	movi	r2,-1
    a514:	003ff006 	br	a4d8 <_init_signal+0x20>

0000a518 <__sigtramp>:
    a518:	defffd04 	addi	sp,sp,-12
    a51c:	dc400115 	stw	r17,4(sp)
    a520:	00c00074 	movhi	r3,1
    a524:	dfc00215 	stw	ra,8(sp)
    a528:	dc000015 	stw	r16,0(sp)
    a52c:	20800830 	cmpltui	r2,r4,32
    a530:	1c4b9e17 	ldw	r17,11896(r3)
    a534:	10002526 	beq	r2,zero,a5cc <__sigtramp+0xb4>
    a538:	88c0b717 	ldw	r3,732(r17)
    a53c:	2021883a 	mov	r16,r4
    a540:	18001326 	beq	r3,zero,a590 <__sigtramp+0x78>
    a544:	800890ba 	slli	r4,r16,2
    a548:	1907883a 	add	r3,r3,r4
    a54c:	18800017 	ldw	r2,0(r3)
    a550:	10000d26 	beq	r2,zero,a588 <__sigtramp+0x70>
    a554:	113fffe0 	cmpeqi	r4,r2,-1
    a558:	20001a1e 	bne	r4,zero,a5c4 <__sigtramp+0xac>
    a55c:	11000060 	cmpeqi	r4,r2,1
    a560:	2000161e 	bne	r4,zero,a5bc <__sigtramp+0xa4>
    a564:	18000015 	stw	zero,0(r3)
    a568:	8009883a 	mov	r4,r16
    a56c:	103ee83a 	callr	r2
    a570:	0005883a 	mov	r2,zero
    a574:	dfc00217 	ldw	ra,8(sp)
    a578:	dc400117 	ldw	r17,4(sp)
    a57c:	dc000017 	ldw	r16,0(sp)
    a580:	dec00304 	addi	sp,sp,12
    a584:	f800283a 	ret
    a588:	00800044 	movi	r2,1
    a58c:	003ff906 	br	a574 <__sigtramp+0x5c>
    a590:	01402004 	movi	r5,128
    a594:	8809883a 	mov	r4,r17
    a598:	0005b5c0 	call	5b5c <_malloc_r>
    a59c:	8880b715 	stw	r2,732(r17)
    a5a0:	10000a26 	beq	r2,zero,a5cc <__sigtramp+0xb4>
    a5a4:	01802004 	movi	r6,128
    a5a8:	000b883a 	mov	r5,zero
    a5ac:	1009883a 	mov	r4,r2
    a5b0:	00066380 	call	6638 <memset>
    a5b4:	1007883a 	mov	r3,r2
    a5b8:	003fe206 	br	a544 <__sigtramp+0x2c>
    a5bc:	008000c4 	movi	r2,3
    a5c0:	003fec06 	br	a574 <__sigtramp+0x5c>
    a5c4:	00800084 	movi	r2,2
    a5c8:	003fea06 	br	a574 <__sigtramp+0x5c>
    a5cc:	00bfffc4 	movi	r2,-1
    a5d0:	003fe806 	br	a574 <__sigtramp+0x5c>

0000a5d4 <_kill_r>:
    a5d4:	2807883a 	mov	r3,r5
    a5d8:	defffe04 	addi	sp,sp,-8
    a5dc:	dc000015 	stw	r16,0(sp)
    a5e0:	00800074 	movhi	r2,1
    a5e4:	300b883a 	mov	r5,r6
    a5e8:	2021883a 	mov	r16,r4
    a5ec:	1809883a 	mov	r4,r3
    a5f0:	dfc00115 	stw	ra,4(sp)
    a5f4:	1012d215 	stw	zero,19272(r2)
    a5f8:	000dedc0 	call	dedc <kill>
    a5fc:	10ffffd8 	cmpnei	r3,r2,-1
    a600:	18000426 	beq	r3,zero,a614 <_kill_r+0x40>
    a604:	dfc00117 	ldw	ra,4(sp)
    a608:	dc000017 	ldw	r16,0(sp)
    a60c:	dec00204 	addi	sp,sp,8
    a610:	f800283a 	ret
    a614:	00c00074 	movhi	r3,1
    a618:	18d2d217 	ldw	r3,19272(r3)
    a61c:	183ff926 	beq	r3,zero,a604 <_kill_r+0x30>
    a620:	80c00015 	stw	r3,0(r16)
    a624:	dfc00117 	ldw	ra,4(sp)
    a628:	dc000017 	ldw	r16,0(sp)
    a62c:	dec00204 	addi	sp,sp,8
    a630:	f800283a 	ret

0000a634 <_getpid_r>:
    a634:	000dd941 	jmpi	dd94 <getpid>

0000a638 <__udivdi3>:
    a638:	defff504 	addi	sp,sp,-44
    a63c:	dd000515 	stw	r20,20(sp)
    a640:	dc800315 	stw	r18,12(sp)
    a644:	dfc00a15 	stw	ra,40(sp)
    a648:	df000915 	stw	fp,36(sp)
    a64c:	ddc00815 	stw	r23,32(sp)
    a650:	dd800715 	stw	r22,28(sp)
    a654:	dd400615 	stw	r21,24(sp)
    a658:	dcc00415 	stw	r19,16(sp)
    a65c:	dc400215 	stw	r17,8(sp)
    a660:	dc000115 	stw	r16,4(sp)
    a664:	2029883a 	mov	r20,r4
    a668:	2825883a 	mov	r18,r5
    a66c:	3800461e 	bne	r7,zero,a788 <__udivdi3+0x150>
    a670:	3823883a 	mov	r17,r7
    a674:	3021883a 	mov	r16,r6
    a678:	2027883a 	mov	r19,r4
    a67c:	2980622e 	bgeu	r5,r6,a808 <__udivdi3+0x1d0>
    a680:	00bfffd4 	movui	r2,65535
    a684:	282b883a 	mov	r21,r5
    a688:	1180aa2e 	bgeu	r2,r6,a934 <__udivdi3+0x2fc>
    a68c:	00804034 	movhi	r2,256
    a690:	30815a36 	bltu	r6,r2,abfc <__udivdi3+0x5c4>
    a694:	3006d63a 	srli	r3,r6,24
    a698:	04400604 	movi	r17,24
    a69c:	00800074 	movhi	r2,1
    a6a0:	1885883a 	add	r2,r3,r2
    a6a4:	1082de03 	ldbu	r2,2936(r2)
    a6a8:	00c00804 	movi	r3,32
    a6ac:	1463883a 	add	r17,r2,r17
    a6b0:	1c45c83a 	sub	r2,r3,r17
    a6b4:	1c400526 	beq	r3,r17,a6cc <__udivdi3+0x94>
    a6b8:	9086983a 	sll	r3,r18,r2
    a6bc:	a462d83a 	srl	r17,r20,r17
    a6c0:	30a0983a 	sll	r16,r6,r2
    a6c4:	a0a6983a 	sll	r19,r20,r2
    a6c8:	88eab03a 	or	r21,r17,r3
    a6cc:	802cd43a 	srli	r22,r16,16
    a6d0:	a809883a 	mov	r4,r21
    a6d4:	853fffcc 	andi	r20,r16,65535
    a6d8:	b00b883a 	mov	r5,r22
    a6dc:	000b3740 	call	b374 <__umodsi3>
    a6e0:	a809883a 	mov	r4,r21
    a6e4:	b00b883a 	mov	r5,r22
    a6e8:	1025883a 	mov	r18,r2
    a6ec:	000b3100 	call	b310 <__udivsi3>
    a6f0:	a009883a 	mov	r4,r20
    a6f4:	100b883a 	mov	r5,r2
    a6f8:	102b883a 	mov	r21,r2
    a6fc:	000b3d00 	call	b3d0 <__mulsi3>
    a700:	9024943a 	slli	r18,r18,16
    a704:	9808d43a 	srli	r4,r19,16
    a708:	9108b03a 	or	r4,r18,r4
    a70c:	2080052e 	bgeu	r4,r2,a724 <__udivdi3+0xec>
    a710:	2409883a 	add	r4,r4,r16
    a714:	a8ffffc4 	addi	r3,r21,-1
    a718:	24000136 	bltu	r4,r16,a720 <__udivdi3+0xe8>
    a71c:	20814836 	bltu	r4,r2,ac40 <__udivdi3+0x608>
    a720:	182b883a 	mov	r21,r3
    a724:	20a3c83a 	sub	r17,r4,r2
    a728:	8809883a 	mov	r4,r17
    a72c:	b00b883a 	mov	r5,r22
    a730:	000b3740 	call	b374 <__umodsi3>
    a734:	8809883a 	mov	r4,r17
    a738:	1023883a 	mov	r17,r2
    a73c:	b00b883a 	mov	r5,r22
    a740:	8822943a 	slli	r17,r17,16
    a744:	000b3100 	call	b310 <__udivsi3>
    a748:	100b883a 	mov	r5,r2
    a74c:	a009883a 	mov	r4,r20
    a750:	9cffffcc 	andi	r19,r19,65535
    a754:	1025883a 	mov	r18,r2
    a758:	8ce6b03a 	or	r19,r17,r19
    a75c:	000b3d00 	call	b3d0 <__mulsi3>
    a760:	9880052e 	bgeu	r19,r2,a778 <__udivdi3+0x140>
    a764:	84e7883a 	add	r19,r16,r19
    a768:	90ffffc4 	addi	r3,r18,-1
    a76c:	9c000136 	bltu	r19,r16,a774 <__udivdi3+0x13c>
    a770:	98813136 	bltu	r19,r2,ac38 <__udivdi3+0x600>
    a774:	1825883a 	mov	r18,r3
    a778:	a80c943a 	slli	r6,r21,16
    a77c:	0007883a 	mov	r3,zero
    a780:	3484b03a 	or	r2,r6,r18
    a784:	00000306 	br	a794 <__udivdi3+0x15c>
    a788:	29c00e2e 	bgeu	r5,r7,a7c4 <__udivdi3+0x18c>
    a78c:	0007883a 	mov	r3,zero
    a790:	0005883a 	mov	r2,zero
    a794:	dfc00a17 	ldw	ra,40(sp)
    a798:	df000917 	ldw	fp,36(sp)
    a79c:	ddc00817 	ldw	r23,32(sp)
    a7a0:	dd800717 	ldw	r22,28(sp)
    a7a4:	dd400617 	ldw	r21,24(sp)
    a7a8:	dd000517 	ldw	r20,20(sp)
    a7ac:	dcc00417 	ldw	r19,16(sp)
    a7b0:	dc800317 	ldw	r18,12(sp)
    a7b4:	dc400217 	ldw	r17,8(sp)
    a7b8:	dc000117 	ldw	r16,4(sp)
    a7bc:	dec00b04 	addi	sp,sp,44
    a7c0:	f800283a 	ret
    a7c4:	00bfffd4 	movui	r2,65535
    a7c8:	11c05f2e 	bgeu	r2,r7,a948 <__udivdi3+0x310>
    a7cc:	00804034 	movhi	r2,256
    a7d0:	3880fc36 	bltu	r7,r2,abc4 <__udivdi3+0x58c>
    a7d4:	3804d63a 	srli	r2,r7,24
    a7d8:	01000604 	movi	r4,24
    a7dc:	00c00074 	movhi	r3,1
    a7e0:	10c7883a 	add	r3,r2,r3
    a7e4:	1882de03 	ldbu	r2,2936(r3)
    a7e8:	00c00804 	movi	r3,32
    a7ec:	1105883a 	add	r2,r2,r4
    a7f0:	18a3c83a 	sub	r17,r3,r2
    a7f4:	1880901e 	bne	r3,r2,aa38 <__udivdi3+0x400>
    a7f8:	3c80f736 	bltu	r7,r18,abd8 <__udivdi3+0x5a0>
    a7fc:	a185403a 	cmpgeu	r2,r20,r6
    a800:	0007883a 	mov	r3,zero
    a804:	003fe306 	br	a794 <__udivdi3+0x15c>
    a808:	3000041e 	bne	r6,zero,a81c <__udivdi3+0x1e4>
    a80c:	000b883a 	mov	r5,zero
    a810:	01000044 	movi	r4,1
    a814:	000b3100 	call	b310 <__udivsi3>
    a818:	1021883a 	mov	r16,r2
    a81c:	00bfffd4 	movui	r2,65535
    a820:	14003f2e 	bgeu	r2,r16,a920 <__udivdi3+0x2e8>
    a824:	00804034 	movhi	r2,256
    a828:	8080f136 	bltu	r16,r2,abf0 <__udivdi3+0x5b8>
    a82c:	8006d63a 	srli	r3,r16,24
    a830:	04400604 	movi	r17,24
    a834:	00800074 	movhi	r2,1
    a838:	1885883a 	add	r2,r3,r2
    a83c:	1082de03 	ldbu	r2,2936(r2)
    a840:	00c00804 	movi	r3,32
    a844:	1463883a 	add	r17,r2,r17
    a848:	1c45c83a 	sub	r2,r3,r17
    a84c:	1c40431e 	bne	r3,r17,a95c <__udivdi3+0x324>
    a850:	802cd43a 	srli	r22,r16,16
    a854:	9423c83a 	sub	r17,r18,r16
    a858:	853fffcc 	andi	r20,r16,65535
    a85c:	00c00044 	movi	r3,1
    a860:	b00b883a 	mov	r5,r22
    a864:	8809883a 	mov	r4,r17
    a868:	d8c00015 	stw	r3,0(sp)
    a86c:	000b3740 	call	b374 <__umodsi3>
    a870:	b00b883a 	mov	r5,r22
    a874:	8809883a 	mov	r4,r17
    a878:	1025883a 	mov	r18,r2
    a87c:	000b3100 	call	b310 <__udivsi3>
    a880:	1009883a 	mov	r4,r2
    a884:	a00b883a 	mov	r5,r20
    a888:	102b883a 	mov	r21,r2
    a88c:	000b3d00 	call	b3d0 <__mulsi3>
    a890:	9024943a 	slli	r18,r18,16
    a894:	9808d43a 	srli	r4,r19,16
    a898:	d8c00017 	ldw	r3,0(sp)
    a89c:	9108b03a 	or	r4,r18,r4
    a8a0:	2080052e 	bgeu	r4,r2,a8b8 <__udivdi3+0x280>
    a8a4:	2409883a 	add	r4,r4,r16
    a8a8:	a97fffc4 	addi	r5,r21,-1
    a8ac:	24000136 	bltu	r4,r16,a8b4 <__udivdi3+0x27c>
    a8b0:	2080e636 	bltu	r4,r2,ac4c <__udivdi3+0x614>
    a8b4:	282b883a 	mov	r21,r5
    a8b8:	20a3c83a 	sub	r17,r4,r2
    a8bc:	8809883a 	mov	r4,r17
    a8c0:	b00b883a 	mov	r5,r22
    a8c4:	d8c00015 	stw	r3,0(sp)
    a8c8:	000b3740 	call	b374 <__umodsi3>
    a8cc:	8809883a 	mov	r4,r17
    a8d0:	1023883a 	mov	r17,r2
    a8d4:	b00b883a 	mov	r5,r22
    a8d8:	8822943a 	slli	r17,r17,16
    a8dc:	000b3100 	call	b310 <__udivsi3>
    a8e0:	a00b883a 	mov	r5,r20
    a8e4:	1009883a 	mov	r4,r2
    a8e8:	9cffffcc 	andi	r19,r19,65535
    a8ec:	1025883a 	mov	r18,r2
    a8f0:	8ce6b03a 	or	r19,r17,r19
    a8f4:	000b3d00 	call	b3d0 <__mulsi3>
    a8f8:	d8c00017 	ldw	r3,0(sp)
    a8fc:	9880052e 	bgeu	r19,r2,a914 <__udivdi3+0x2dc>
    a900:	84e7883a 	add	r19,r16,r19
    a904:	913fffc4 	addi	r4,r18,-1
    a908:	9c000136 	bltu	r19,r16,a910 <__udivdi3+0x2d8>
    a90c:	9880c836 	bltu	r19,r2,ac30 <__udivdi3+0x5f8>
    a910:	2025883a 	mov	r18,r4
    a914:	a80c943a 	slli	r6,r21,16
    a918:	3484b03a 	or	r2,r6,r18
    a91c:	003f9d06 	br	a794 <__udivdi3+0x15c>
    a920:	80804030 	cmpltui	r2,r16,256
    a924:	1000b81e 	bne	r2,zero,ac08 <__udivdi3+0x5d0>
    a928:	8006d23a 	srli	r3,r16,8
    a92c:	04400204 	movi	r17,8
    a930:	003fc006 	br	a834 <__udivdi3+0x1fc>
    a934:	30804030 	cmpltui	r2,r6,256
    a938:	1000a51e 	bne	r2,zero,abd0 <__udivdi3+0x598>
    a93c:	3006d23a 	srli	r3,r6,8
    a940:	04400204 	movi	r17,8
    a944:	003f5506 	br	a69c <__udivdi3+0x64>
    a948:	38804030 	cmpltui	r2,r7,256
    a94c:	1000a51e 	bne	r2,zero,abe4 <__udivdi3+0x5ac>
    a950:	3804d23a 	srli	r2,r7,8
    a954:	01000204 	movi	r4,8
    a958:	003fa006 	br	a7dc <__udivdi3+0x1a4>
    a95c:	80a0983a 	sll	r16,r16,r2
    a960:	946ed83a 	srl	r23,r18,r17
    a964:	9086983a 	sll	r3,r18,r2
    a968:	802cd43a 	srli	r22,r16,16
    a96c:	a462d83a 	srl	r17,r20,r17
    a970:	b809883a 	mov	r4,r23
    a974:	b00b883a 	mov	r5,r22
    a978:	88eab03a 	or	r21,r17,r3
    a97c:	a0a6983a 	sll	r19,r20,r2
    a980:	000b3740 	call	b374 <__umodsi3>
    a984:	b809883a 	mov	r4,r23
    a988:	b00b883a 	mov	r5,r22
    a98c:	1025883a 	mov	r18,r2
    a990:	853fffcc 	andi	r20,r16,65535
    a994:	000b3100 	call	b310 <__udivsi3>
    a998:	a009883a 	mov	r4,r20
    a99c:	100b883a 	mov	r5,r2
    a9a0:	102f883a 	mov	r23,r2
    a9a4:	000b3d00 	call	b3d0 <__mulsi3>
    a9a8:	9024943a 	slli	r18,r18,16
    a9ac:	a808d43a 	srli	r4,r21,16
    a9b0:	9108b03a 	or	r4,r18,r4
    a9b4:	2080062e 	bgeu	r4,r2,a9d0 <__udivdi3+0x398>
    a9b8:	2409883a 	add	r4,r4,r16
    a9bc:	b8ffffc4 	addi	r3,r23,-1
    a9c0:	24009936 	bltu	r4,r16,ac28 <__udivdi3+0x5f0>
    a9c4:	2080982e 	bgeu	r4,r2,ac28 <__udivdi3+0x5f0>
    a9c8:	bdffff84 	addi	r23,r23,-2
    a9cc:	2409883a 	add	r4,r4,r16
    a9d0:	20a3c83a 	sub	r17,r4,r2
    a9d4:	8809883a 	mov	r4,r17
    a9d8:	b00b883a 	mov	r5,r22
    a9dc:	000b3740 	call	b374 <__umodsi3>
    a9e0:	1025883a 	mov	r18,r2
    a9e4:	8809883a 	mov	r4,r17
    a9e8:	b00b883a 	mov	r5,r22
    a9ec:	9024943a 	slli	r18,r18,16
    a9f0:	000b3100 	call	b310 <__udivsi3>
    a9f4:	100b883a 	mov	r5,r2
    a9f8:	a009883a 	mov	r4,r20
    a9fc:	ac7fffcc 	andi	r17,r21,65535
    aa00:	1039883a 	mov	fp,r2
    aa04:	9462b03a 	or	r17,r18,r17
    aa08:	000b3d00 	call	b3d0 <__mulsi3>
    aa0c:	8880062e 	bgeu	r17,r2,aa28 <__udivdi3+0x3f0>
    aa10:	8c23883a 	add	r17,r17,r16
    aa14:	e0ffffc4 	addi	r3,fp,-1
    aa18:	8c007f36 	bltu	r17,r16,ac18 <__udivdi3+0x5e0>
    aa1c:	88807e2e 	bgeu	r17,r2,ac18 <__udivdi3+0x5e0>
    aa20:	e73fff84 	addi	fp,fp,-2
    aa24:	8c23883a 	add	r17,r17,r16
    aa28:	b806943a 	slli	r3,r23,16
    aa2c:	88a3c83a 	sub	r17,r17,r2
    aa30:	1f06b03a 	or	r3,r3,fp
    aa34:	003f8a06 	br	a860 <__udivdi3+0x228>
    aa38:	30a6d83a 	srl	r19,r6,r2
    aa3c:	3c4e983a 	sll	r7,r7,r17
    aa40:	90a0d83a 	srl	r16,r18,r2
    aa44:	9446983a 	sll	r3,r18,r17
    aa48:	99e6b03a 	or	r19,r19,r7
    aa4c:	a084d83a 	srl	r2,r20,r2
    aa50:	9838d43a 	srli	fp,r19,16
    aa54:	8009883a 	mov	r4,r16
    aa58:	10eab03a 	or	r21,r2,r3
    aa5c:	e00b883a 	mov	r5,fp
    aa60:	346c983a 	sll	r22,r6,r17
    aa64:	dd400015 	stw	r21,0(sp)
    aa68:	000b3740 	call	b374 <__umodsi3>
    aa6c:	8009883a 	mov	r4,r16
    aa70:	e00b883a 	mov	r5,fp
    aa74:	102f883a 	mov	r23,r2
    aa78:	9cbfffcc 	andi	r18,r19,65535
    aa7c:	000b3100 	call	b310 <__udivsi3>
    aa80:	9009883a 	mov	r4,r18
    aa84:	100b883a 	mov	r5,r2
    aa88:	1021883a 	mov	r16,r2
    aa8c:	000b3d00 	call	b3d0 <__mulsi3>
    aa90:	b82e943a 	slli	r23,r23,16
    aa94:	a808d43a 	srli	r4,r21,16
    aa98:	b908b03a 	or	r4,r23,r4
    aa9c:	2080062e 	bgeu	r4,r2,aab8 <__udivdi3+0x480>
    aaa0:	24c9883a 	add	r4,r4,r19
    aaa4:	817fffc4 	addi	r5,r16,-1
    aaa8:	24c05d36 	bltu	r4,r19,ac20 <__udivdi3+0x5e8>
    aaac:	20805c2e 	bgeu	r4,r2,ac20 <__udivdi3+0x5e8>
    aab0:	843fff84 	addi	r16,r16,-2
    aab4:	24c9883a 	add	r4,r4,r19
    aab8:	20abc83a 	sub	r21,r4,r2
    aabc:	a809883a 	mov	r4,r21
    aac0:	e00b883a 	mov	r5,fp
    aac4:	000b3740 	call	b374 <__umodsi3>
    aac8:	a809883a 	mov	r4,r21
    aacc:	e00b883a 	mov	r5,fp
    aad0:	102b883a 	mov	r21,r2
    aad4:	000b3100 	call	b310 <__udivsi3>
    aad8:	9009883a 	mov	r4,r18
    aadc:	100b883a 	mov	r5,r2
    aae0:	102f883a 	mov	r23,r2
    aae4:	000b3d00 	call	b3d0 <__mulsi3>
    aae8:	d8c00017 	ldw	r3,0(sp)
    aaec:	a82a943a 	slli	r21,r21,16
    aaf0:	100d883a 	mov	r6,r2
    aaf4:	1cbfffcc 	andi	r18,r3,65535
    aaf8:	aca4b03a 	or	r18,r21,r18
    aafc:	9080062e 	bgeu	r18,r2,ab18 <__udivdi3+0x4e0>
    ab00:	94e5883a 	add	r18,r18,r19
    ab04:	b8bfffc4 	addi	r2,r23,-1
    ab08:	94c04136 	bltu	r18,r19,ac10 <__udivdi3+0x5d8>
    ab0c:	9180402e 	bgeu	r18,r6,ac10 <__udivdi3+0x5d8>
    ab10:	bdffff84 	addi	r23,r23,-2
    ab14:	94e5883a 	add	r18,r18,r19
    ab18:	8004943a 	slli	r2,r16,16
    ab1c:	bd7fffcc 	andi	r21,r23,65535
    ab20:	b73fffcc 	andi	fp,r22,65535
    ab24:	15e0b03a 	or	r16,r2,r23
    ab28:	8026d43a 	srli	r19,r16,16
    ab2c:	a809883a 	mov	r4,r21
    ab30:	e00b883a 	mov	r5,fp
    ab34:	91a5c83a 	sub	r18,r18,r6
    ab38:	b02cd43a 	srli	r22,r22,16
    ab3c:	000b3d00 	call	b3d0 <__mulsi3>
    ab40:	9809883a 	mov	r4,r19
    ab44:	e00b883a 	mov	r5,fp
    ab48:	102f883a 	mov	r23,r2
    ab4c:	000b3d00 	call	b3d0 <__mulsi3>
    ab50:	9809883a 	mov	r4,r19
    ab54:	b00b883a 	mov	r5,r22
    ab58:	1027883a 	mov	r19,r2
    ab5c:	000b3d00 	call	b3d0 <__mulsi3>
    ab60:	a809883a 	mov	r4,r21
    ab64:	b00b883a 	mov	r5,r22
    ab68:	102b883a 	mov	r21,r2
    ab6c:	000b3d00 	call	b3d0 <__mulsi3>
    ab70:	b806d43a 	srli	r3,r23,16
    ab74:	14c5883a 	add	r2,r2,r19
    ab78:	1887883a 	add	r3,r3,r2
    ab7c:	1cc0022e 	bgeu	r3,r19,ab88 <__udivdi3+0x550>
    ab80:	00800074 	movhi	r2,1
    ab84:	a8ab883a 	add	r21,r21,r2
    ab88:	1804d43a 	srli	r2,r3,16
    ab8c:	156b883a 	add	r21,r2,r21
    ab90:	95400936 	bltu	r18,r21,abb8 <__udivdi3+0x580>
    ab94:	95400326 	beq	r18,r21,aba4 <__udivdi3+0x56c>
    ab98:	8005883a 	mov	r2,r16
    ab9c:	0007883a 	mov	r3,zero
    aba0:	003efc06 	br	a794 <__udivdi3+0x15c>
    aba4:	1806943a 	slli	r3,r3,16
    aba8:	a44c983a 	sll	r6,r20,r17
    abac:	bdffffcc 	andi	r23,r23,65535
    abb0:	1dc7883a 	add	r3,r3,r23
    abb4:	30fff82e 	bgeu	r6,r3,ab98 <__udivdi3+0x560>
    abb8:	80bfffc4 	addi	r2,r16,-1
    abbc:	0007883a 	mov	r3,zero
    abc0:	003ef406 	br	a794 <__udivdi3+0x15c>
    abc4:	3804d43a 	srli	r2,r7,16
    abc8:	01000404 	movi	r4,16
    abcc:	003f0306 	br	a7dc <__udivdi3+0x1a4>
    abd0:	3007883a 	mov	r3,r6
    abd4:	003eb106 	br	a69c <__udivdi3+0x64>
    abd8:	0007883a 	mov	r3,zero
    abdc:	00800044 	movi	r2,1
    abe0:	003eec06 	br	a794 <__udivdi3+0x15c>
    abe4:	3805883a 	mov	r2,r7
    abe8:	0009883a 	mov	r4,zero
    abec:	003efb06 	br	a7dc <__udivdi3+0x1a4>
    abf0:	8006d43a 	srli	r3,r16,16
    abf4:	04400404 	movi	r17,16
    abf8:	003f0e06 	br	a834 <__udivdi3+0x1fc>
    abfc:	3006d43a 	srli	r3,r6,16
    ac00:	04400404 	movi	r17,16
    ac04:	003ea506 	br	a69c <__udivdi3+0x64>
    ac08:	8007883a 	mov	r3,r16
    ac0c:	003f0906 	br	a834 <__udivdi3+0x1fc>
    ac10:	102f883a 	mov	r23,r2
    ac14:	003fc006 	br	ab18 <__udivdi3+0x4e0>
    ac18:	1839883a 	mov	fp,r3
    ac1c:	003f8206 	br	aa28 <__udivdi3+0x3f0>
    ac20:	2821883a 	mov	r16,r5
    ac24:	003fa406 	br	aab8 <__udivdi3+0x480>
    ac28:	182f883a 	mov	r23,r3
    ac2c:	003f6806 	br	a9d0 <__udivdi3+0x398>
    ac30:	94bfff84 	addi	r18,r18,-2
    ac34:	003f3706 	br	a914 <__udivdi3+0x2dc>
    ac38:	94bfff84 	addi	r18,r18,-2
    ac3c:	003ece06 	br	a778 <__udivdi3+0x140>
    ac40:	ad7fff84 	addi	r21,r21,-2
    ac44:	2409883a 	add	r4,r4,r16
    ac48:	003eb606 	br	a724 <__udivdi3+0xec>
    ac4c:	ad7fff84 	addi	r21,r21,-2
    ac50:	2409883a 	add	r4,r4,r16
    ac54:	003f1806 	br	a8b8 <__udivdi3+0x280>

0000ac58 <__umoddi3>:
    ac58:	defff304 	addi	sp,sp,-52
    ac5c:	dc400415 	stw	r17,16(sp)
    ac60:	dc000315 	stw	r16,12(sp)
    ac64:	dfc00c15 	stw	ra,48(sp)
    ac68:	df000b15 	stw	fp,44(sp)
    ac6c:	ddc00a15 	stw	r23,40(sp)
    ac70:	dd800915 	stw	r22,36(sp)
    ac74:	dd400815 	stw	r21,32(sp)
    ac78:	dd000715 	stw	r20,28(sp)
    ac7c:	dcc00615 	stw	r19,24(sp)
    ac80:	dc800515 	stw	r18,20(sp)
    ac84:	2823883a 	mov	r17,r5
    ac88:	2021883a 	mov	r16,r4
    ac8c:	38003b1e 	bne	r7,zero,ad7c <__umoddi3+0x124>
    ac90:	3825883a 	mov	r18,r7
    ac94:	3029883a 	mov	r20,r6
    ac98:	2027883a 	mov	r19,r4
    ac9c:	29805b2e 	bgeu	r5,r6,ae0c <__umoddi3+0x1b4>
    aca0:	00bfffd4 	movui	r2,65535
    aca4:	282d883a 	mov	r22,r5
    aca8:	11809a2e 	bgeu	r2,r6,af14 <__umoddi3+0x2bc>
    acac:	00804034 	movhi	r2,256
    acb0:	30814436 	bltu	r6,r2,b1c4 <__umoddi3+0x56c>
    acb4:	3006d63a 	srli	r3,r6,24
    acb8:	04800604 	movi	r18,24
    acbc:	00800074 	movhi	r2,1
    acc0:	1885883a 	add	r2,r3,r2
    acc4:	1082de03 	ldbu	r2,2936(r2)
    acc8:	00c00804 	movi	r3,32
    accc:	1485883a 	add	r2,r2,r18
    acd0:	18a5c83a 	sub	r18,r3,r2
    acd4:	18800526 	beq	r3,r2,acec <__umoddi3+0x94>
    acd8:	8ca2983a 	sll	r17,r17,r18
    acdc:	8084d83a 	srl	r2,r16,r2
    ace0:	34a8983a 	sll	r20,r6,r18
    ace4:	84a6983a 	sll	r19,r16,r18
    ace8:	146cb03a 	or	r22,r2,r17
    acec:	a02ed43a 	srli	r23,r20,16
    acf0:	b009883a 	mov	r4,r22
    acf4:	a57fffcc 	andi	r21,r20,65535
    acf8:	b80b883a 	mov	r5,r23
    acfc:	000b3740 	call	b374 <__umodsi3>
    ad00:	b80b883a 	mov	r5,r23
    ad04:	b009883a 	mov	r4,r22
    ad08:	1023883a 	mov	r17,r2
    ad0c:	000b3100 	call	b310 <__udivsi3>
    ad10:	a809883a 	mov	r4,r21
    ad14:	100b883a 	mov	r5,r2
    ad18:	000b3d00 	call	b3d0 <__mulsi3>
    ad1c:	8822943a 	slli	r17,r17,16
    ad20:	9808d43a 	srli	r4,r19,16
    ad24:	8908b03a 	or	r4,r17,r4
    ad28:	2080042e 	bgeu	r4,r2,ad3c <__umoddi3+0xe4>
    ad2c:	2509883a 	add	r4,r4,r20
    ad30:	25000236 	bltu	r4,r20,ad3c <__umoddi3+0xe4>
    ad34:	2080012e 	bgeu	r4,r2,ad3c <__umoddi3+0xe4>
    ad38:	2509883a 	add	r4,r4,r20
    ad3c:	20a1c83a 	sub	r16,r4,r2
    ad40:	b80b883a 	mov	r5,r23
    ad44:	8009883a 	mov	r4,r16
    ad48:	000b3740 	call	b374 <__umodsi3>
    ad4c:	b80b883a 	mov	r5,r23
    ad50:	8009883a 	mov	r4,r16
    ad54:	1023883a 	mov	r17,r2
    ad58:	000b3100 	call	b310 <__udivsi3>
    ad5c:	8822943a 	slli	r17,r17,16
    ad60:	100b883a 	mov	r5,r2
    ad64:	a809883a 	mov	r4,r21
    ad68:	000b3d00 	call	b3d0 <__mulsi3>
    ad6c:	98ffffcc 	andi	r3,r19,65535
    ad70:	88c6b03a 	or	r3,r17,r3
    ad74:	18805e2e 	bgeu	r3,r2,aef0 <__umoddi3+0x298>
    ad78:	00005906 	br	aee0 <__umoddi3+0x288>
    ad7c:	2005883a 	mov	r2,r4
    ad80:	29c00d2e 	bgeu	r5,r7,adb8 <__umoddi3+0x160>
    ad84:	2807883a 	mov	r3,r5
    ad88:	dfc00c17 	ldw	ra,48(sp)
    ad8c:	df000b17 	ldw	fp,44(sp)
    ad90:	ddc00a17 	ldw	r23,40(sp)
    ad94:	dd800917 	ldw	r22,36(sp)
    ad98:	dd400817 	ldw	r21,32(sp)
    ad9c:	dd000717 	ldw	r20,28(sp)
    ada0:	dcc00617 	ldw	r19,24(sp)
    ada4:	dc800517 	ldw	r18,20(sp)
    ada8:	dc400417 	ldw	r17,16(sp)
    adac:	dc000317 	ldw	r16,12(sp)
    adb0:	dec00d04 	addi	sp,sp,52
    adb4:	f800283a 	ret
    adb8:	013fffd4 	movui	r4,65535
    adbc:	2807883a 	mov	r3,r5
    adc0:	21c0592e 	bgeu	r4,r7,af28 <__umoddi3+0x2d0>
    adc4:	01004034 	movhi	r4,256
    adc8:	39010336 	bltu	r7,r4,b1d8 <__umoddi3+0x580>
    adcc:	3808d63a 	srli	r4,r7,24
    add0:	02000604 	movi	r8,24
    add4:	01400074 	movhi	r5,1
    add8:	214b883a 	add	r5,r4,r5
    addc:	2d02de03 	ldbu	r20,2936(r5)
    ade0:	01000804 	movi	r4,32
    ade4:	a229883a 	add	r20,r20,r8
    ade8:	252bc83a 	sub	r21,r4,r20
    adec:	2500531e 	bne	r4,r20,af3c <__umoddi3+0x2e4>
    adf0:	3c400136 	bltu	r7,r17,adf8 <__umoddi3+0x1a0>
    adf4:	81bfe436 	bltu	r16,r6,ad88 <__umoddi3+0x130>
    adf8:	8185c83a 	sub	r2,r16,r6
    adfc:	89cfc83a 	sub	r7,r17,r7
    ae00:	8087803a 	cmpltu	r3,r16,r2
    ae04:	38c7c83a 	sub	r3,r7,r3
    ae08:	003fdf06 	br	ad88 <__umoddi3+0x130>
    ae0c:	3000041e 	bne	r6,zero,ae20 <__umoddi3+0x1c8>
    ae10:	000b883a 	mov	r5,zero
    ae14:	01000044 	movi	r4,1
    ae18:	000b3100 	call	b310 <__udivsi3>
    ae1c:	1029883a 	mov	r20,r2
    ae20:	00bfffd4 	movui	r2,65535
    ae24:	1500362e 	bgeu	r2,r20,af00 <__umoddi3+0x2a8>
    ae28:	00804034 	movhi	r2,256
    ae2c:	a080ed36 	bltu	r20,r2,b1e4 <__umoddi3+0x58c>
    ae30:	a006d63a 	srli	r3,r20,24
    ae34:	04800604 	movi	r18,24
    ae38:	00800074 	movhi	r2,1
    ae3c:	1885883a 	add	r2,r3,r2
    ae40:	1582de03 	ldbu	r22,2936(r2)
    ae44:	00800804 	movi	r2,32
    ae48:	b4ad883a 	add	r22,r22,r18
    ae4c:	15a5c83a 	sub	r18,r2,r22
    ae50:	1580a51e 	bne	r2,r22,b0e8 <__umoddi3+0x490>
    ae54:	a02ed43a 	srli	r23,r20,16
    ae58:	8d23c83a 	sub	r17,r17,r20
    ae5c:	a57fffcc 	andi	r21,r20,65535
    ae60:	8809883a 	mov	r4,r17
    ae64:	b80b883a 	mov	r5,r23
    ae68:	000b3740 	call	b374 <__umodsi3>
    ae6c:	8809883a 	mov	r4,r17
    ae70:	b80b883a 	mov	r5,r23
    ae74:	1023883a 	mov	r17,r2
    ae78:	000b3100 	call	b310 <__udivsi3>
    ae7c:	1009883a 	mov	r4,r2
    ae80:	a80b883a 	mov	r5,r21
    ae84:	000b3d00 	call	b3d0 <__mulsi3>
    ae88:	8822943a 	slli	r17,r17,16
    ae8c:	9808d43a 	srli	r4,r19,16
    ae90:	8908b03a 	or	r4,r17,r4
    ae94:	2080032e 	bgeu	r4,r2,aea4 <__umoddi3+0x24c>
    ae98:	2509883a 	add	r4,r4,r20
    ae9c:	25000136 	bltu	r4,r20,aea4 <__umoddi3+0x24c>
    aea0:	2080dc36 	bltu	r4,r2,b214 <__umoddi3+0x5bc>
    aea4:	20a1c83a 	sub	r16,r4,r2
    aea8:	b80b883a 	mov	r5,r23
    aeac:	8009883a 	mov	r4,r16
    aeb0:	000b3740 	call	b374 <__umodsi3>
    aeb4:	b80b883a 	mov	r5,r23
    aeb8:	8009883a 	mov	r4,r16
    aebc:	1023883a 	mov	r17,r2
    aec0:	8822943a 	slli	r17,r17,16
    aec4:	000b3100 	call	b310 <__udivsi3>
    aec8:	a80b883a 	mov	r5,r21
    aecc:	1009883a 	mov	r4,r2
    aed0:	000b3d00 	call	b3d0 <__mulsi3>
    aed4:	9cffffcc 	andi	r19,r19,65535
    aed8:	8cc6b03a 	or	r3,r17,r19
    aedc:	1880042e 	bgeu	r3,r2,aef0 <__umoddi3+0x298>
    aee0:	1d07883a 	add	r3,r3,r20
    aee4:	1d000236 	bltu	r3,r20,aef0 <__umoddi3+0x298>
    aee8:	1880012e 	bgeu	r3,r2,aef0 <__umoddi3+0x298>
    aeec:	1d07883a 	add	r3,r3,r20
    aef0:	1885c83a 	sub	r2,r3,r2
    aef4:	1484d83a 	srl	r2,r2,r18
    aef8:	0007883a 	mov	r3,zero
    aefc:	003fa206 	br	ad88 <__umoddi3+0x130>
    af00:	a0804030 	cmpltui	r2,r20,256
    af04:	1000ba1e 	bne	r2,zero,b1f0 <__umoddi3+0x598>
    af08:	a006d23a 	srli	r3,r20,8
    af0c:	04800204 	movi	r18,8
    af10:	003fc906 	br	ae38 <__umoddi3+0x1e0>
    af14:	30804030 	cmpltui	r2,r6,256
    af18:	1000ad1e 	bne	r2,zero,b1d0 <__umoddi3+0x578>
    af1c:	3006d23a 	srli	r3,r6,8
    af20:	04800204 	movi	r18,8
    af24:	003f6506 	br	acbc <__umoddi3+0x64>
    af28:	39004030 	cmpltui	r4,r7,256
    af2c:	2000b21e 	bne	r4,zero,b1f8 <__umoddi3+0x5a0>
    af30:	3808d23a 	srli	r4,r7,8
    af34:	02000204 	movi	r8,8
    af38:	003fa606 	br	add4 <__umoddi3+0x17c>
    af3c:	3d4e983a 	sll	r7,r7,r21
    af40:	3508d83a 	srl	r4,r6,r20
    af44:	8d2cd83a 	srl	r22,r17,r20
    af48:	8504d83a 	srl	r2,r16,r20
    af4c:	21e4b03a 	or	r18,r4,r7
    af50:	8d62983a 	sll	r17,r17,r21
    af54:	9026d43a 	srli	r19,r18,16
    af58:	354c983a 	sll	r6,r6,r21
    af5c:	1444b03a 	or	r2,r2,r17
    af60:	b009883a 	mov	r4,r22
    af64:	980b883a 	mov	r5,r19
    af68:	d9800115 	stw	r6,4(sp)
    af6c:	d8800015 	stw	r2,0(sp)
    af70:	000b3740 	call	b374 <__umodsi3>
    af74:	980b883a 	mov	r5,r19
    af78:	b009883a 	mov	r4,r22
    af7c:	102f883a 	mov	r23,r2
    af80:	947fffcc 	andi	r17,r18,65535
    af84:	000b3100 	call	b310 <__udivsi3>
    af88:	8809883a 	mov	r4,r17
    af8c:	100b883a 	mov	r5,r2
    af90:	1039883a 	mov	fp,r2
    af94:	000b3d00 	call	b3d0 <__mulsi3>
    af98:	d8c00017 	ldw	r3,0(sp)
    af9c:	b82e943a 	slli	r23,r23,16
    afa0:	8560983a 	sll	r16,r16,r21
    afa4:	1808d43a 	srli	r4,r3,16
    afa8:	b908b03a 	or	r4,r23,r4
    afac:	2080062e 	bgeu	r4,r2,afc8 <__umoddi3+0x370>
    afb0:	2489883a 	add	r4,r4,r18
    afb4:	e17fffc4 	addi	r5,fp,-1
    afb8:	24809436 	bltu	r4,r18,b20c <__umoddi3+0x5b4>
    afbc:	2080932e 	bgeu	r4,r2,b20c <__umoddi3+0x5b4>
    afc0:	e73fff84 	addi	fp,fp,-2
    afc4:	2489883a 	add	r4,r4,r18
    afc8:	20adc83a 	sub	r22,r4,r2
    afcc:	980b883a 	mov	r5,r19
    afd0:	b009883a 	mov	r4,r22
    afd4:	000b3740 	call	b374 <__umodsi3>
    afd8:	980b883a 	mov	r5,r19
    afdc:	b009883a 	mov	r4,r22
    afe0:	102f883a 	mov	r23,r2
    afe4:	000b3100 	call	b310 <__udivsi3>
    afe8:	100b883a 	mov	r5,r2
    afec:	8809883a 	mov	r4,r17
    aff0:	d8800215 	stw	r2,8(sp)
    aff4:	000b3d00 	call	b3d0 <__mulsi3>
    aff8:	d8c00017 	ldw	r3,0(sp)
    affc:	b82e943a 	slli	r23,r23,16
    b000:	d9400217 	ldw	r5,8(sp)
    b004:	1c7fffcc 	andi	r17,r3,65535
    b008:	bc62b03a 	or	r17,r23,r17
    b00c:	8880062e 	bgeu	r17,r2,b028 <__umoddi3+0x3d0>
    b010:	8ca3883a 	add	r17,r17,r18
    b014:	28ffffc4 	addi	r3,r5,-1
    b018:	8c807a36 	bltu	r17,r18,b204 <__umoddi3+0x5ac>
    b01c:	8880792e 	bgeu	r17,r2,b204 <__umoddi3+0x5ac>
    b020:	297fff84 	addi	r5,r5,-2
    b024:	8ca3883a 	add	r17,r17,r18
    b028:	e02c943a 	slli	r22,fp,16
    b02c:	d9c00117 	ldw	r7,4(sp)
    b030:	29bfffcc 	andi	r6,r5,65535
    b034:	b16cb03a 	or	r22,r22,r5
    b038:	38ffffcc 	andi	r3,r7,65535
    b03c:	b02cd43a 	srli	r22,r22,16
    b040:	180b883a 	mov	r5,r3
    b044:	3009883a 	mov	r4,r6
    b048:	3838d43a 	srli	fp,r7,16
    b04c:	182f883a 	mov	r23,r3
    b050:	d9800015 	stw	r6,0(sp)
    b054:	88a3c83a 	sub	r17,r17,r2
    b058:	000b3d00 	call	b3d0 <__mulsi3>
    b05c:	b80b883a 	mov	r5,r23
    b060:	b009883a 	mov	r4,r22
    b064:	102f883a 	mov	r23,r2
    b068:	000b3d00 	call	b3d0 <__mulsi3>
    b06c:	e00b883a 	mov	r5,fp
    b070:	b009883a 	mov	r4,r22
    b074:	102d883a 	mov	r22,r2
    b078:	000b3d00 	call	b3d0 <__mulsi3>
    b07c:	d9800017 	ldw	r6,0(sp)
    b080:	e00b883a 	mov	r5,fp
    b084:	1039883a 	mov	fp,r2
    b088:	3009883a 	mov	r4,r6
    b08c:	000b3d00 	call	b3d0 <__mulsi3>
    b090:	b808d43a 	srli	r4,r23,16
    b094:	1585883a 	add	r2,r2,r22
    b098:	2089883a 	add	r4,r4,r2
    b09c:	2580022e 	bgeu	r4,r22,b0a8 <__umoddi3+0x450>
    b0a0:	00800074 	movhi	r2,1
    b0a4:	e0b9883a 	add	fp,fp,r2
    b0a8:	2006d43a 	srli	r3,r4,16
    b0ac:	2008943a 	slli	r4,r4,16
    b0b0:	bdffffcc 	andi	r23,r23,65535
    b0b4:	1f07883a 	add	r3,r3,fp
    b0b8:	25c9883a 	add	r4,r4,r23
    b0bc:	88c03a36 	bltu	r17,r3,b1a8 <__umoddi3+0x550>
    b0c0:	88c03826 	beq	r17,r3,b1a4 <__umoddi3+0x54c>
    b0c4:	8109c83a 	sub	r4,r16,r4
    b0c8:	8121803a 	cmpltu	r16,r16,r4
    b0cc:	88c7c83a 	sub	r3,r17,r3
    b0d0:	1c07c83a 	sub	r3,r3,r16
    b0d4:	1d04983a 	sll	r2,r3,r20
    b0d8:	2548d83a 	srl	r4,r4,r21
    b0dc:	1d46d83a 	srl	r3,r3,r21
    b0e0:	1104b03a 	or	r2,r2,r4
    b0e4:	003f2806 	br	ad88 <__umoddi3+0x130>
    b0e8:	a4a8983a 	sll	r20,r20,r18
    b0ec:	8da6d83a 	srl	r19,r17,r22
    b0f0:	8ca2983a 	sll	r17,r17,r18
    b0f4:	a02ed43a 	srli	r23,r20,16
    b0f8:	9809883a 	mov	r4,r19
    b0fc:	85acd83a 	srl	r22,r16,r22
    b100:	b80b883a 	mov	r5,r23
    b104:	000b3740 	call	b374 <__umodsi3>
    b108:	9809883a 	mov	r4,r19
    b10c:	b80b883a 	mov	r5,r23
    b110:	b46cb03a 	or	r22,r22,r17
    b114:	a57fffcc 	andi	r21,r20,65535
    b118:	1023883a 	mov	r17,r2
    b11c:	000b3100 	call	b310 <__udivsi3>
    b120:	a809883a 	mov	r4,r21
    b124:	100b883a 	mov	r5,r2
    b128:	000b3d00 	call	b3d0 <__mulsi3>
    b12c:	8822943a 	slli	r17,r17,16
    b130:	b008d43a 	srli	r4,r22,16
    b134:	84a6983a 	sll	r19,r16,r18
    b138:	8908b03a 	or	r4,r17,r4
    b13c:	2080042e 	bgeu	r4,r2,b150 <__umoddi3+0x4f8>
    b140:	2509883a 	add	r4,r4,r20
    b144:	25000236 	bltu	r4,r20,b150 <__umoddi3+0x4f8>
    b148:	2080012e 	bgeu	r4,r2,b150 <__umoddi3+0x4f8>
    b14c:	2509883a 	add	r4,r4,r20
    b150:	20a1c83a 	sub	r16,r4,r2
    b154:	8009883a 	mov	r4,r16
    b158:	b80b883a 	mov	r5,r23
    b15c:	000b3740 	call	b374 <__umodsi3>
    b160:	8009883a 	mov	r4,r16
    b164:	1021883a 	mov	r16,r2
    b168:	b80b883a 	mov	r5,r23
    b16c:	8020943a 	slli	r16,r16,16
    b170:	000b3100 	call	b310 <__udivsi3>
    b174:	100b883a 	mov	r5,r2
    b178:	a809883a 	mov	r4,r21
    b17c:	b47fffcc 	andi	r17,r22,65535
    b180:	000b3d00 	call	b3d0 <__mulsi3>
    b184:	8462b03a 	or	r17,r16,r17
    b188:	8880042e 	bgeu	r17,r2,b19c <__umoddi3+0x544>
    b18c:	8d23883a 	add	r17,r17,r20
    b190:	8d000236 	bltu	r17,r20,b19c <__umoddi3+0x544>
    b194:	8880012e 	bgeu	r17,r2,b19c <__umoddi3+0x544>
    b198:	8d23883a 	add	r17,r17,r20
    b19c:	88a3c83a 	sub	r17,r17,r2
    b1a0:	003f2f06 	br	ae60 <__umoddi3+0x208>
    b1a4:	813fc72e 	bgeu	r16,r4,b0c4 <__umoddi3+0x46c>
    b1a8:	d8800117 	ldw	r2,4(sp)
    b1ac:	20a7c83a 	sub	r19,r4,r2
    b1b0:	24c9803a 	cmpltu	r4,r4,r19
    b1b4:	2489883a 	add	r4,r4,r18
    b1b8:	1907c83a 	sub	r3,r3,r4
    b1bc:	9809883a 	mov	r4,r19
    b1c0:	003fc006 	br	b0c4 <__umoddi3+0x46c>
    b1c4:	3006d43a 	srli	r3,r6,16
    b1c8:	04800404 	movi	r18,16
    b1cc:	003ebb06 	br	acbc <__umoddi3+0x64>
    b1d0:	3007883a 	mov	r3,r6
    b1d4:	003eb906 	br	acbc <__umoddi3+0x64>
    b1d8:	3808d43a 	srli	r4,r7,16
    b1dc:	02000404 	movi	r8,16
    b1e0:	003efc06 	br	add4 <__umoddi3+0x17c>
    b1e4:	a006d43a 	srli	r3,r20,16
    b1e8:	04800404 	movi	r18,16
    b1ec:	003f1206 	br	ae38 <__umoddi3+0x1e0>
    b1f0:	a007883a 	mov	r3,r20
    b1f4:	003f1006 	br	ae38 <__umoddi3+0x1e0>
    b1f8:	3809883a 	mov	r4,r7
    b1fc:	0011883a 	mov	r8,zero
    b200:	003ef406 	br	add4 <__umoddi3+0x17c>
    b204:	180b883a 	mov	r5,r3
    b208:	003f8706 	br	b028 <__umoddi3+0x3d0>
    b20c:	2839883a 	mov	fp,r5
    b210:	003f6d06 	br	afc8 <__umoddi3+0x370>
    b214:	2509883a 	add	r4,r4,r20
    b218:	003f2206 	br	aea4 <__umoddi3+0x24c>

0000b21c <__divsi3>:
    b21c:	20001a16 	blt	r4,zero,b288 <__divsi3+0x6c>
    b220:	000f883a 	mov	r7,zero
    b224:	2800020e 	bge	r5,zero,b230 <__divsi3+0x14>
    b228:	014bc83a 	sub	r5,zero,r5
    b22c:	39c0005c 	xori	r7,r7,1
    b230:	200d883a 	mov	r6,r4
    b234:	00c00044 	movi	r3,1
    b238:	2900092e 	bgeu	r5,r4,b260 <__divsi3+0x44>
    b23c:	00800804 	movi	r2,32
    b240:	00c00044 	movi	r3,1
    b244:	00000106 	br	b24c <__divsi3+0x30>
    b248:	10001226 	beq	r2,zero,b294 <__divsi3+0x78>
    b24c:	294b883a 	add	r5,r5,r5
    b250:	10bfffc4 	addi	r2,r2,-1
    b254:	18c7883a 	add	r3,r3,r3
    b258:	293ffb36 	bltu	r5,r4,b248 <__divsi3+0x2c>
    b25c:	18000d26 	beq	r3,zero,b294 <__divsi3+0x78>
    b260:	0005883a 	mov	r2,zero
    b264:	31400236 	bltu	r6,r5,b270 <__divsi3+0x54>
    b268:	314dc83a 	sub	r6,r6,r5
    b26c:	10c4b03a 	or	r2,r2,r3
    b270:	1806d07a 	srli	r3,r3,1
    b274:	280ad07a 	srli	r5,r5,1
    b278:	183ffa1e 	bne	r3,zero,b264 <__divsi3+0x48>
    b27c:	38000126 	beq	r7,zero,b284 <__divsi3+0x68>
    b280:	0085c83a 	sub	r2,zero,r2
    b284:	f800283a 	ret
    b288:	0109c83a 	sub	r4,zero,r4
    b28c:	01c00044 	movi	r7,1
    b290:	003fe406 	br	b224 <__divsi3+0x8>
    b294:	0005883a 	mov	r2,zero
    b298:	003ff806 	br	b27c <__divsi3+0x60>

0000b29c <__modsi3>:
    b29c:	20001916 	blt	r4,zero,b304 <__modsi3+0x68>
    b2a0:	000f883a 	mov	r7,zero
    b2a4:	2005883a 	mov	r2,r4
    b2a8:	2800010e 	bge	r5,zero,b2b0 <__modsi3+0x14>
    b2ac:	014bc83a 	sub	r5,zero,r5
    b2b0:	00c00044 	movi	r3,1
    b2b4:	2900092e 	bgeu	r5,r4,b2dc <__modsi3+0x40>
    b2b8:	01800804 	movi	r6,32
    b2bc:	00c00044 	movi	r3,1
    b2c0:	00000106 	br	b2c8 <__modsi3+0x2c>
    b2c4:	30000d26 	beq	r6,zero,b2fc <__modsi3+0x60>
    b2c8:	294b883a 	add	r5,r5,r5
    b2cc:	31bfffc4 	addi	r6,r6,-1
    b2d0:	18c7883a 	add	r3,r3,r3
    b2d4:	293ffb36 	bltu	r5,r4,b2c4 <__modsi3+0x28>
    b2d8:	18000826 	beq	r3,zero,b2fc <__modsi3+0x60>
    b2dc:	1806d07a 	srli	r3,r3,1
    b2e0:	11400136 	bltu	r2,r5,b2e8 <__modsi3+0x4c>
    b2e4:	1145c83a 	sub	r2,r2,r5
    b2e8:	280ad07a 	srli	r5,r5,1
    b2ec:	183ffb1e 	bne	r3,zero,b2dc <__modsi3+0x40>
    b2f0:	38000126 	beq	r7,zero,b2f8 <__modsi3+0x5c>
    b2f4:	0085c83a 	sub	r2,zero,r2
    b2f8:	f800283a 	ret
    b2fc:	2005883a 	mov	r2,r4
    b300:	003ffb06 	br	b2f0 <__modsi3+0x54>
    b304:	0109c83a 	sub	r4,zero,r4
    b308:	01c00044 	movi	r7,1
    b30c:	003fe506 	br	b2a4 <__modsi3+0x8>

0000b310 <__udivsi3>:
    b310:	200d883a 	mov	r6,r4
    b314:	2900152e 	bgeu	r5,r4,b36c <__udivsi3+0x5c>
    b318:	28001416 	blt	r5,zero,b36c <__udivsi3+0x5c>
    b31c:	00800804 	movi	r2,32
    b320:	00c00044 	movi	r3,1
    b324:	00000206 	br	b330 <__udivsi3+0x20>
    b328:	10000e26 	beq	r2,zero,b364 <__udivsi3+0x54>
    b32c:	28000516 	blt	r5,zero,b344 <__udivsi3+0x34>
    b330:	294b883a 	add	r5,r5,r5
    b334:	10bfffc4 	addi	r2,r2,-1
    b338:	18c7883a 	add	r3,r3,r3
    b33c:	293ffa36 	bltu	r5,r4,b328 <__udivsi3+0x18>
    b340:	18000826 	beq	r3,zero,b364 <__udivsi3+0x54>
    b344:	0005883a 	mov	r2,zero
    b348:	31400236 	bltu	r6,r5,b354 <__udivsi3+0x44>
    b34c:	314dc83a 	sub	r6,r6,r5
    b350:	10c4b03a 	or	r2,r2,r3
    b354:	1806d07a 	srli	r3,r3,1
    b358:	280ad07a 	srli	r5,r5,1
    b35c:	183ffa1e 	bne	r3,zero,b348 <__udivsi3+0x38>
    b360:	f800283a 	ret
    b364:	0005883a 	mov	r2,zero
    b368:	f800283a 	ret
    b36c:	00c00044 	movi	r3,1
    b370:	003ff406 	br	b344 <__udivsi3+0x34>

0000b374 <__umodsi3>:
    b374:	2005883a 	mov	r2,r4
    b378:	2900132e 	bgeu	r5,r4,b3c8 <__umodsi3+0x54>
    b37c:	28001216 	blt	r5,zero,b3c8 <__umodsi3+0x54>
    b380:	01800804 	movi	r6,32
    b384:	00c00044 	movi	r3,1
    b388:	00000206 	br	b394 <__umodsi3+0x20>
    b38c:	30000c26 	beq	r6,zero,b3c0 <__umodsi3+0x4c>
    b390:	28000516 	blt	r5,zero,b3a8 <__umodsi3+0x34>
    b394:	294b883a 	add	r5,r5,r5
    b398:	31bfffc4 	addi	r6,r6,-1
    b39c:	18c7883a 	add	r3,r3,r3
    b3a0:	293ffa36 	bltu	r5,r4,b38c <__umodsi3+0x18>
    b3a4:	18000626 	beq	r3,zero,b3c0 <__umodsi3+0x4c>
    b3a8:	1806d07a 	srli	r3,r3,1
    b3ac:	11400136 	bltu	r2,r5,b3b4 <__umodsi3+0x40>
    b3b0:	1145c83a 	sub	r2,r2,r5
    b3b4:	280ad07a 	srli	r5,r5,1
    b3b8:	183ffb1e 	bne	r3,zero,b3a8 <__umodsi3+0x34>
    b3bc:	f800283a 	ret
    b3c0:	2005883a 	mov	r2,r4
    b3c4:	f800283a 	ret
    b3c8:	00c00044 	movi	r3,1
    b3cc:	003ff606 	br	b3a8 <__umodsi3+0x34>

0000b3d0 <__mulsi3>:
    b3d0:	0005883a 	mov	r2,zero
    b3d4:	20000726 	beq	r4,zero,b3f4 <__mulsi3+0x24>
    b3d8:	20c0004c 	andi	r3,r4,1
    b3dc:	2008d07a 	srli	r4,r4,1
    b3e0:	18000126 	beq	r3,zero,b3e8 <__mulsi3+0x18>
    b3e4:	1145883a 	add	r2,r2,r5
    b3e8:	294b883a 	add	r5,r5,r5
    b3ec:	203ffa1e 	bne	r4,zero,b3d8 <__mulsi3+0x8>
    b3f0:	f800283a 	ret
    b3f4:	f800283a 	ret

0000b3f8 <__adddf3>:
    b3f8:	02000434 	movhi	r8,16
    b3fc:	423fffc4 	addi	r8,r8,-1
    b400:	2806d53a 	srli	r3,r5,20
    b404:	3804d53a 	srli	r2,r7,20
    b408:	2a14703a 	and	r10,r5,r8
    b40c:	3a12703a 	and	r9,r7,r8
    b410:	280ad7fa 	srli	r5,r5,31
    b414:	501490fa 	slli	r10,r10,3
    b418:	2018d77a 	srli	r12,r4,29
    b41c:	481290fa 	slli	r9,r9,3
    b420:	3016d77a 	srli	r11,r6,29
    b424:	380ed7fa 	srli	r7,r7,31
    b428:	defffb04 	addi	sp,sp,-20
    b42c:	dc800215 	stw	r18,8(sp)
    b430:	dc000015 	stw	r16,0(sp)
    b434:	1c81ffcc 	andi	r18,r3,2047
    b438:	1081ffcc 	andi	r2,r2,2047
    b43c:	dfc00415 	stw	ra,16(sp)
    b440:	dcc00315 	stw	r19,12(sp)
    b444:	dc400115 	stw	r17,4(sp)
    b448:	201c90fa 	slli	r14,r4,3
    b44c:	301a90fa 	slli	r13,r6,3
    b450:	2821883a 	mov	r16,r5
    b454:	6294b03a 	or	r10,r12,r10
    b458:	5a52b03a 	or	r9,r11,r9
    b45c:	9087c83a 	sub	r3,r18,r2
    b460:	29c06126 	beq	r5,r7,b5e8 <__adddf3+0x1f0>
    b464:	00c0550e 	bge	zero,r3,b5bc <__adddf3+0x1c4>
    b468:	10007326 	beq	r2,zero,b638 <__adddf3+0x240>
    b46c:	9081ffd8 	cmpnei	r2,r18,2047
    b470:	1000b826 	beq	r2,zero,b754 <__adddf3+0x35c>
    b474:	4a402034 	orhi	r9,r9,128
    b478:	18800e48 	cmpgei	r2,r3,57
    b47c:	1000ee1e 	bne	r2,zero,b838 <__adddf3+0x440>
    b480:	18800808 	cmpgei	r2,r3,32
    b484:	10012d1e 	bne	r2,zero,b93c <__adddf3+0x544>
    b488:	00800804 	movi	r2,32
    b48c:	10c5c83a 	sub	r2,r2,r3
    b490:	68c8d83a 	srl	r4,r13,r3
    b494:	48a2983a 	sll	r17,r9,r2
    b498:	689a983a 	sll	r13,r13,r2
    b49c:	48c6d83a 	srl	r3,r9,r3
    b4a0:	8922b03a 	or	r17,r17,r4
    b4a4:	681ac03a 	cmpne	r13,r13,zero
    b4a8:	8b62b03a 	or	r17,r17,r13
    b4ac:	50d5c83a 	sub	r10,r10,r3
    b4b0:	7463c83a 	sub	r17,r14,r17
    b4b4:	7451803a 	cmpltu	r8,r14,r17
    b4b8:	5211c83a 	sub	r8,r10,r8
    b4bc:	4080202c 	andhi	r2,r8,128
    b4c0:	10008826 	beq	r2,zero,b6e4 <__adddf3+0x2ec>
    b4c4:	02402034 	movhi	r9,128
    b4c8:	4a7fffc4 	addi	r9,r9,-1
    b4cc:	4266703a 	and	r19,r8,r9
    b4d0:	9800ae26 	beq	r19,zero,b78c <__adddf3+0x394>
    b4d4:	9809883a 	mov	r4,r19
    b4d8:	0000a600 	call	a60 <__clzsi2>
    b4dc:	10fffe04 	addi	r3,r2,-8
    b4e0:	02000804 	movi	r8,32
    b4e4:	40d1c83a 	sub	r8,r8,r3
    b4e8:	8a10d83a 	srl	r8,r17,r8
    b4ec:	98d2983a 	sll	r9,r19,r3
    b4f0:	88e2983a 	sll	r17,r17,r3
    b4f4:	4250b03a 	or	r8,r8,r9
    b4f8:	1c80ad16 	blt	r3,r18,b7b0 <__adddf3+0x3b8>
    b4fc:	1c87c83a 	sub	r3,r3,r18
    b500:	19000044 	addi	r4,r3,1
    b504:	20800808 	cmpgei	r2,r4,32
    b508:	10006a1e 	bne	r2,zero,b6b4 <__adddf3+0x2bc>
    b50c:	00800804 	movi	r2,32
    b510:	1105c83a 	sub	r2,r2,r4
    b514:	8906d83a 	srl	r3,r17,r4
    b518:	88a2983a 	sll	r17,r17,r2
    b51c:	4084983a 	sll	r2,r8,r2
    b520:	4110d83a 	srl	r8,r8,r4
    b524:	8822c03a 	cmpne	r17,r17,zero
    b528:	10c4b03a 	or	r2,r2,r3
    b52c:	1462b03a 	or	r17,r2,r17
    b530:	0025883a 	mov	r18,zero
    b534:	888001cc 	andi	r2,r17,7
    b538:	10000726 	beq	r2,zero,b558 <__adddf3+0x160>
    b53c:	888003cc 	andi	r2,r17,15
    b540:	10800120 	cmpeqi	r2,r2,4
    b544:	1000041e 	bne	r2,zero,b558 <__adddf3+0x160>
    b548:	88c00104 	addi	r3,r17,4
    b54c:	1c63803a 	cmpltu	r17,r3,r17
    b550:	4451883a 	add	r8,r8,r17
    b554:	1823883a 	mov	r17,r3
    b558:	4080202c 	andhi	r2,r8,128
    b55c:	10006326 	beq	r2,zero,b6ec <__adddf3+0x2f4>
    b560:	90c00044 	addi	r3,r18,1
    b564:	1881ffe0 	cmpeqi	r2,r3,2047
    b568:	18c1ffcc 	andi	r3,r3,2047
    b56c:	1000751e 	bne	r2,zero,b744 <__adddf3+0x34c>
    b570:	00bfe034 	movhi	r2,65408
    b574:	10bfffc4 	addi	r2,r2,-1
    b578:	4090703a 	and	r8,r8,r2
    b57c:	4004977a 	slli	r2,r8,29
    b580:	4010927a 	slli	r8,r8,9
    b584:	8822d0fa 	srli	r17,r17,3
    b588:	4010d33a 	srli	r8,r8,12
    b58c:	1444b03a 	or	r2,r2,r17
    b590:	1806953a 	slli	r3,r3,20
    b594:	802097fa 	slli	r16,r16,31
    b598:	1a06b03a 	or	r3,r3,r8
    b59c:	1c06b03a 	or	r3,r3,r16
    b5a0:	dfc00417 	ldw	ra,16(sp)
    b5a4:	dcc00317 	ldw	r19,12(sp)
    b5a8:	dc800217 	ldw	r18,8(sp)
    b5ac:	dc400117 	ldw	r17,4(sp)
    b5b0:	dc000017 	ldw	r16,0(sp)
    b5b4:	dec00504 	addi	sp,sp,20
    b5b8:	f800283a 	ret
    b5bc:	18002626 	beq	r3,zero,b658 <__adddf3+0x260>
    b5c0:	1487c83a 	sub	r3,r2,r18
    b5c4:	9000b51e 	bne	r18,zero,b89c <__adddf3+0x4a4>
    b5c8:	5388b03a 	or	r4,r10,r14
    b5cc:	20010f26 	beq	r4,zero,ba0c <__adddf3+0x614>
    b5d0:	193fffc4 	addi	r4,r3,-1
    b5d4:	20016126 	beq	r4,zero,bb5c <__adddf3+0x764>
    b5d8:	18c1ffd8 	cmpnei	r3,r3,2047
    b5dc:	18012e26 	beq	r3,zero,ba98 <__adddf3+0x6a0>
    b5e0:	2007883a 	mov	r3,r4
    b5e4:	0000b006 	br	b8a8 <__adddf3+0x4b0>
    b5e8:	00c0760e 	bge	zero,r3,b7c4 <__adddf3+0x3cc>
    b5ec:	10002926 	beq	r2,zero,b694 <__adddf3+0x29c>
    b5f0:	9081ffd8 	cmpnei	r2,r18,2047
    b5f4:	10012126 	beq	r2,zero,ba7c <__adddf3+0x684>
    b5f8:	4a402034 	orhi	r9,r9,128
    b5fc:	18800e48 	cmpgei	r2,r3,57
    b600:	1000461e 	bne	r2,zero,b71c <__adddf3+0x324>
    b604:	18800808 	cmpgei	r2,r3,32
    b608:	1000e326 	beq	r2,zero,b998 <__adddf3+0x5a0>
    b60c:	1c7ff804 	addi	r17,r3,-32
    b610:	19000820 	cmpeqi	r4,r3,32
    b614:	4c44d83a 	srl	r2,r9,r17
    b618:	2000041e 	bne	r4,zero,b62c <__adddf3+0x234>
    b61c:	01001004 	movi	r4,64
    b620:	20c7c83a 	sub	r3,r4,r3
    b624:	48d2983a 	sll	r9,r9,r3
    b628:	6a5ab03a 	or	r13,r13,r9
    b62c:	6822c03a 	cmpne	r17,r13,zero
    b630:	88a2b03a 	or	r17,r17,r2
    b634:	00003b06 	br	b724 <__adddf3+0x32c>
    b638:	4b44b03a 	or	r2,r9,r13
    b63c:	10008126 	beq	r2,zero,b844 <__adddf3+0x44c>
    b640:	18bfffc4 	addi	r2,r3,-1
    b644:	10010726 	beq	r2,zero,ba64 <__adddf3+0x66c>
    b648:	18c1ffd8 	cmpnei	r3,r3,2047
    b64c:	18004126 	beq	r3,zero,b754 <__adddf3+0x35c>
    b650:	1007883a 	mov	r3,r2
    b654:	003f8806 	br	b478 <__adddf3+0x80>
    b658:	90800044 	addi	r2,r18,1
    b65c:	1081ff8c 	andi	r2,r2,2046
    b660:	1000a01e 	bne	r2,zero,b8e4 <__adddf3+0x4ec>
    b664:	538ab03a 	or	r5,r10,r14
    b668:	4b44b03a 	or	r2,r9,r13
    b66c:	9000ef1e 	bne	r18,zero,ba2c <__adddf3+0x634>
    b670:	28014126 	beq	r5,zero,bb78 <__adddf3+0x780>
    b674:	1001491e 	bne	r2,zero,bb9c <__adddf3+0x7a4>
    b678:	500a977a 	slli	r5,r10,29
    b67c:	00880034 	movhi	r2,8192
    b680:	10bfffc4 	addi	r2,r2,-1
    b684:	2084703a 	and	r2,r4,r2
    b688:	5014d0fa 	srli	r10,r10,3
    b68c:	1144b03a 	or	r2,r2,r5
    b690:	00001d06 	br	b708 <__adddf3+0x310>
    b694:	4b44b03a 	or	r2,r9,r13
    b698:	10006a26 	beq	r2,zero,b844 <__adddf3+0x44c>
    b69c:	18bfffc4 	addi	r2,r3,-1
    b6a0:	1000e826 	beq	r2,zero,ba44 <__adddf3+0x64c>
    b6a4:	18c1ffd8 	cmpnei	r3,r3,2047
    b6a8:	1800f426 	beq	r3,zero,ba7c <__adddf3+0x684>
    b6ac:	1007883a 	mov	r3,r2
    b6b0:	003fd206 	br	b5fc <__adddf3+0x204>
    b6b4:	18fff844 	addi	r3,r3,-31
    b6b8:	20800820 	cmpeqi	r2,r4,32
    b6bc:	40c6d83a 	srl	r3,r8,r3
    b6c0:	1000041e 	bne	r2,zero,b6d4 <__adddf3+0x2dc>
    b6c4:	00801004 	movi	r2,64
    b6c8:	1109c83a 	sub	r4,r2,r4
    b6cc:	4110983a 	sll	r8,r8,r4
    b6d0:	8a22b03a 	or	r17,r17,r8
    b6d4:	8822c03a 	cmpne	r17,r17,zero
    b6d8:	88e2b03a 	or	r17,r17,r3
    b6dc:	0011883a 	mov	r8,zero
    b6e0:	0025883a 	mov	r18,zero
    b6e4:	888001cc 	andi	r2,r17,7
    b6e8:	103f941e 	bne	r2,zero,b53c <__adddf3+0x144>
    b6ec:	8822d0fa 	srli	r17,r17,3
    b6f0:	4004977a 	slli	r2,r8,29
    b6f4:	4014d0fa 	srli	r10,r8,3
    b6f8:	9007883a 	mov	r3,r18
    b6fc:	8884b03a 	or	r2,r17,r2
    b700:	1901ffe0 	cmpeqi	r4,r3,2047
    b704:	2000191e 	bne	r4,zero,b76c <__adddf3+0x374>
    b708:	02000434 	movhi	r8,16
    b70c:	423fffc4 	addi	r8,r8,-1
    b710:	5210703a 	and	r8,r10,r8
    b714:	18c1ffcc 	andi	r3,r3,2047
    b718:	003f9d06 	br	b590 <__adddf3+0x198>
    b71c:	4b62b03a 	or	r17,r9,r13
    b720:	8822c03a 	cmpne	r17,r17,zero
    b724:	8ba3883a 	add	r17,r17,r14
    b728:	8b91803a 	cmpltu	r8,r17,r14
    b72c:	4291883a 	add	r8,r8,r10
    b730:	4080202c 	andhi	r2,r8,128
    b734:	103feb26 	beq	r2,zero,b6e4 <__adddf3+0x2ec>
    b738:	94800044 	addi	r18,r18,1
    b73c:	9081ffe0 	cmpeqi	r2,r18,2047
    b740:	10007426 	beq	r2,zero,b914 <__adddf3+0x51c>
    b744:	00c1ffc4 	movi	r3,2047
    b748:	0011883a 	mov	r8,zero
    b74c:	0005883a 	mov	r2,zero
    b750:	003f8f06 	br	b590 <__adddf3+0x198>
    b754:	500a977a 	slli	r5,r10,29
    b758:	00c80034 	movhi	r3,8192
    b75c:	18ffffc4 	addi	r3,r3,-1
    b760:	5014d0fa 	srli	r10,r10,3
    b764:	20c4703a 	and	r2,r4,r3
    b768:	1144b03a 	or	r2,r2,r5
    b76c:	1286b03a 	or	r3,r2,r10
    b770:	18015926 	beq	r3,zero,bcd8 <__adddf3+0x8e0>
    b774:	00c00434 	movhi	r3,16
    b778:	18ffffc4 	addi	r3,r3,-1
    b77c:	52000234 	orhi	r8,r10,8
    b780:	40d0703a 	and	r8,r8,r3
    b784:	00c1ffc4 	movi	r3,2047
    b788:	003f8106 	br	b590 <__adddf3+0x198>
    b78c:	8809883a 	mov	r4,r17
    b790:	0000a600 	call	a60 <__clzsi2>
    b794:	10c00604 	addi	r3,r2,24
    b798:	19000808 	cmpgei	r4,r3,32
    b79c:	203f5026 	beq	r4,zero,b4e0 <__adddf3+0xe8>
    b7a0:	123ffe04 	addi	r8,r2,-8
    b7a4:	8a10983a 	sll	r8,r17,r8
    b7a8:	0023883a 	mov	r17,zero
    b7ac:	1cbf530e 	bge	r3,r18,b4fc <__adddf3+0x104>
    b7b0:	00bfe034 	movhi	r2,65408
    b7b4:	10bfffc4 	addi	r2,r2,-1
    b7b8:	90e5c83a 	sub	r18,r18,r3
    b7bc:	4090703a 	and	r8,r8,r2
    b7c0:	003f5c06 	br	b534 <__adddf3+0x13c>
    b7c4:	18002626 	beq	r3,zero,b860 <__adddf3+0x468>
    b7c8:	1487c83a 	sub	r3,r2,r18
    b7cc:	90006e1e 	bne	r18,zero,b988 <__adddf3+0x590>
    b7d0:	5388b03a 	or	r4,r10,r14
    b7d4:	2000fd26 	beq	r4,zero,bbcc <__adddf3+0x7d4>
    b7d8:	193fffc4 	addi	r4,r3,-1
    b7dc:	20013626 	beq	r4,zero,bcb8 <__adddf3+0x8c0>
    b7e0:	18c1ffd8 	cmpnei	r3,r3,2047
    b7e4:	1800b426 	beq	r3,zero,bab8 <__adddf3+0x6c0>
    b7e8:	2007883a 	mov	r3,r4
    b7ec:	19000e48 	cmpgei	r4,r3,57
    b7f0:	2000b81e 	bne	r4,zero,bad4 <__adddf3+0x6dc>
    b7f4:	19000808 	cmpgei	r4,r3,32
    b7f8:	2001241e 	bne	r4,zero,bc8c <__adddf3+0x894>
    b7fc:	01000804 	movi	r4,32
    b800:	20c9c83a 	sub	r4,r4,r3
    b804:	5122983a 	sll	r17,r10,r4
    b808:	70cad83a 	srl	r5,r14,r3
    b80c:	7108983a 	sll	r4,r14,r4
    b810:	50d4d83a 	srl	r10,r10,r3
    b814:	8962b03a 	or	r17,r17,r5
    b818:	2008c03a 	cmpne	r4,r4,zero
    b81c:	8922b03a 	or	r17,r17,r4
    b820:	4a93883a 	add	r9,r9,r10
    b824:	8b63883a 	add	r17,r17,r13
    b828:	8b51803a 	cmpltu	r8,r17,r13
    b82c:	4251883a 	add	r8,r8,r9
    b830:	1025883a 	mov	r18,r2
    b834:	003fbe06 	br	b730 <__adddf3+0x338>
    b838:	4b62b03a 	or	r17,r9,r13
    b83c:	8822c03a 	cmpne	r17,r17,zero
    b840:	003f1b06 	br	b4b0 <__adddf3+0xb8>
    b844:	500c977a 	slli	r6,r10,29
    b848:	01480034 	movhi	r5,8192
    b84c:	297fffc4 	addi	r5,r5,-1
    b850:	2144703a 	and	r2,r4,r5
    b854:	5014d0fa 	srli	r10,r10,3
    b858:	3084b03a 	or	r2,r6,r2
    b85c:	003fa806 	br	b700 <__adddf3+0x308>
    b860:	90800044 	addi	r2,r18,1
    b864:	1141ff8c 	andi	r5,r2,2046
    b868:	2800561e 	bne	r5,zero,b9c4 <__adddf3+0x5cc>
    b86c:	5384b03a 	or	r2,r10,r14
    b870:	9000a61e 	bne	r18,zero,bb0c <__adddf3+0x714>
    b874:	1000ee26 	beq	r2,zero,bc30 <__adddf3+0x838>
    b878:	4b44b03a 	or	r2,r9,r13
    b87c:	1000f31e 	bne	r2,zero,bc4c <__adddf3+0x854>
    b880:	5004977a 	slli	r2,r10,29
    b884:	01480034 	movhi	r5,8192
    b888:	297fffc4 	addi	r5,r5,-1
    b88c:	2148703a 	and	r4,r4,r5
    b890:	5014d0fa 	srli	r10,r10,3
    b894:	1104b03a 	or	r2,r2,r4
    b898:	003f9b06 	br	b708 <__adddf3+0x310>
    b89c:	1101ffd8 	cmpnei	r4,r2,2047
    b8a0:	20007d26 	beq	r4,zero,ba98 <__adddf3+0x6a0>
    b8a4:	52802034 	orhi	r10,r10,128
    b8a8:	19000e48 	cmpgei	r4,r3,57
    b8ac:	20002e1e 	bne	r4,zero,b968 <__adddf3+0x570>
    b8b0:	19000808 	cmpgei	r4,r3,32
    b8b4:	20008a1e 	bne	r4,zero,bae0 <__adddf3+0x6e8>
    b8b8:	01000804 	movi	r4,32
    b8bc:	20c9c83a 	sub	r4,r4,r3
    b8c0:	5122983a 	sll	r17,r10,r4
    b8c4:	70cad83a 	srl	r5,r14,r3
    b8c8:	711c983a 	sll	r14,r14,r4
    b8cc:	50d4d83a 	srl	r10,r10,r3
    b8d0:	8962b03a 	or	r17,r17,r5
    b8d4:	701cc03a 	cmpne	r14,r14,zero
    b8d8:	8ba2b03a 	or	r17,r17,r14
    b8dc:	4a93c83a 	sub	r9,r9,r10
    b8e0:	00002306 	br	b970 <__adddf3+0x578>
    b8e4:	7363c83a 	sub	r17,r14,r13
    b8e8:	5267c83a 	sub	r19,r10,r9
    b8ec:	7451803a 	cmpltu	r8,r14,r17
    b8f0:	9a27c83a 	sub	r19,r19,r8
    b8f4:	9880202c 	andhi	r2,r19,128
    b8f8:	10003e1e 	bne	r2,zero,b9f4 <__adddf3+0x5fc>
    b8fc:	8cc4b03a 	or	r2,r17,r19
    b900:	103ef31e 	bne	r2,zero,b4d0 <__adddf3+0xd8>
    b904:	0015883a 	mov	r10,zero
    b908:	0021883a 	mov	r16,zero
    b90c:	003f7e06 	br	b708 <__adddf3+0x310>
    b910:	04800084 	movi	r18,2
    b914:	00bfe034 	movhi	r2,65408
    b918:	10bfffc4 	addi	r2,r2,-1
    b91c:	8806d07a 	srli	r3,r17,1
    b920:	4090703a 	and	r8,r8,r2
    b924:	400497fa 	slli	r2,r8,31
    b928:	8c40004c 	andi	r17,r17,1
    b92c:	1c62b03a 	or	r17,r3,r17
    b930:	4010d07a 	srli	r8,r8,1
    b934:	1462b03a 	or	r17,r2,r17
    b938:	003efe06 	br	b534 <__adddf3+0x13c>
    b93c:	1c7ff804 	addi	r17,r3,-32
    b940:	19000820 	cmpeqi	r4,r3,32
    b944:	4c44d83a 	srl	r2,r9,r17
    b948:	2000041e 	bne	r4,zero,b95c <__adddf3+0x564>
    b94c:	01001004 	movi	r4,64
    b950:	20c7c83a 	sub	r3,r4,r3
    b954:	48d2983a 	sll	r9,r9,r3
    b958:	6a5ab03a 	or	r13,r13,r9
    b95c:	6822c03a 	cmpne	r17,r13,zero
    b960:	88a2b03a 	or	r17,r17,r2
    b964:	003ed206 	br	b4b0 <__adddf3+0xb8>
    b968:	5394b03a 	or	r10,r10,r14
    b96c:	5022c03a 	cmpne	r17,r10,zero
    b970:	6c63c83a 	sub	r17,r13,r17
    b974:	6c51803a 	cmpltu	r8,r13,r17
    b978:	4a11c83a 	sub	r8,r9,r8
    b97c:	3821883a 	mov	r16,r7
    b980:	1025883a 	mov	r18,r2
    b984:	003ecd06 	br	b4bc <__adddf3+0xc4>
    b988:	1101ffd8 	cmpnei	r4,r2,2047
    b98c:	20004a26 	beq	r4,zero,bab8 <__adddf3+0x6c0>
    b990:	52802034 	orhi	r10,r10,128
    b994:	003f9506 	br	b7ec <__adddf3+0x3f4>
    b998:	00800804 	movi	r2,32
    b99c:	10c5c83a 	sub	r2,r2,r3
    b9a0:	68c8d83a 	srl	r4,r13,r3
    b9a4:	48a2983a 	sll	r17,r9,r2
    b9a8:	689a983a 	sll	r13,r13,r2
    b9ac:	48c6d83a 	srl	r3,r9,r3
    b9b0:	8922b03a 	or	r17,r17,r4
    b9b4:	681ac03a 	cmpne	r13,r13,zero
    b9b8:	8b62b03a 	or	r17,r17,r13
    b9bc:	50d5883a 	add	r10,r10,r3
    b9c0:	003f5806 	br	b724 <__adddf3+0x32c>
    b9c4:	10c1ffe0 	cmpeqi	r3,r2,2047
    b9c8:	183f5e1e 	bne	r3,zero,b744 <__adddf3+0x34c>
    b9cc:	7351883a 	add	r8,r14,r13
    b9d0:	4387803a 	cmpltu	r3,r8,r14
    b9d4:	5255883a 	add	r10,r10,r9
    b9d8:	50c7883a 	add	r3,r10,r3
    b9dc:	401ad07a 	srli	r13,r8,1
    b9e0:	182297fa 	slli	r17,r3,31
    b9e4:	1810d07a 	srli	r8,r3,1
    b9e8:	1025883a 	mov	r18,r2
    b9ec:	8b62b03a 	or	r17,r17,r13
    b9f0:	003f3c06 	br	b6e4 <__adddf3+0x2ec>
    b9f4:	6ba3c83a 	sub	r17,r13,r14
    b9f8:	4a93c83a 	sub	r9,r9,r10
    b9fc:	6c51803a 	cmpltu	r8,r13,r17
    ba00:	4a27c83a 	sub	r19,r9,r8
    ba04:	3821883a 	mov	r16,r7
    ba08:	003eb106 	br	b4d0 <__adddf3+0xd8>
    ba0c:	480a977a 	slli	r5,r9,29
    ba10:	01080034 	movhi	r4,8192
    ba14:	213fffc4 	addi	r4,r4,-1
    ba18:	3104703a 	and	r2,r6,r4
    ba1c:	4814d0fa 	srli	r10,r9,3
    ba20:	1144b03a 	or	r2,r2,r5
    ba24:	3821883a 	mov	r16,r7
    ba28:	003f3506 	br	b700 <__adddf3+0x308>
    ba2c:	28006e1e 	bne	r5,zero,bbe8 <__adddf3+0x7f0>
    ba30:	1000191e 	bne	r2,zero,ba98 <__adddf3+0x6a0>
    ba34:	0021883a 	mov	r16,zero
    ba38:	4015883a 	mov	r10,r8
    ba3c:	00bfffc4 	movi	r2,-1
    ba40:	003f4c06 	br	b774 <__adddf3+0x37c>
    ba44:	7363883a 	add	r17,r14,r13
    ba48:	5255883a 	add	r10,r10,r9
    ba4c:	8b91803a 	cmpltu	r8,r17,r14
    ba50:	5211883a 	add	r8,r10,r8
    ba54:	4080202c 	andhi	r2,r8,128
    ba58:	103fad1e 	bne	r2,zero,b910 <__adddf3+0x518>
    ba5c:	04800044 	movi	r18,1
    ba60:	003f2006 	br	b6e4 <__adddf3+0x2ec>
    ba64:	7363c83a 	sub	r17,r14,r13
    ba68:	5255c83a 	sub	r10,r10,r9
    ba6c:	7451803a 	cmpltu	r8,r14,r17
    ba70:	5211c83a 	sub	r8,r10,r8
    ba74:	04800044 	movi	r18,1
    ba78:	003e9006 	br	b4bc <__adddf3+0xc4>
    ba7c:	5004977a 	slli	r2,r10,29
    ba80:	00c80034 	movhi	r3,8192
    ba84:	18ffffc4 	addi	r3,r3,-1
    ba88:	20c8703a 	and	r4,r4,r3
    ba8c:	5014d0fa 	srli	r10,r10,3
    ba90:	1104b03a 	or	r2,r2,r4
    ba94:	003f3506 	br	b76c <__adddf3+0x374>
    ba98:	4806977a 	slli	r3,r9,29
    ba9c:	00880034 	movhi	r2,8192
    baa0:	10bfffc4 	addi	r2,r2,-1
    baa4:	3084703a 	and	r2,r6,r2
    baa8:	4814d0fa 	srli	r10,r9,3
    baac:	10c4b03a 	or	r2,r2,r3
    bab0:	3821883a 	mov	r16,r7
    bab4:	003f2d06 	br	b76c <__adddf3+0x374>
    bab8:	4804977a 	slli	r2,r9,29
    babc:	00c80034 	movhi	r3,8192
    bac0:	18ffffc4 	addi	r3,r3,-1
    bac4:	30cc703a 	and	r6,r6,r3
    bac8:	4814d0fa 	srli	r10,r9,3
    bacc:	1184b03a 	or	r2,r2,r6
    bad0:	003f2606 	br	b76c <__adddf3+0x374>
    bad4:	5394b03a 	or	r10,r10,r14
    bad8:	5022c03a 	cmpne	r17,r10,zero
    badc:	003f5106 	br	b824 <__adddf3+0x42c>
    bae0:	1c7ff804 	addi	r17,r3,-32
    bae4:	19400820 	cmpeqi	r5,r3,32
    bae8:	5448d83a 	srl	r4,r10,r17
    baec:	2800041e 	bne	r5,zero,bb00 <__adddf3+0x708>
    baf0:	01401004 	movi	r5,64
    baf4:	28c7c83a 	sub	r3,r5,r3
    baf8:	50d4983a 	sll	r10,r10,r3
    bafc:	729cb03a 	or	r14,r14,r10
    bb00:	7022c03a 	cmpne	r17,r14,zero
    bb04:	8922b03a 	or	r17,r17,r4
    bb08:	003f9906 	br	b970 <__adddf3+0x578>
    bb0c:	103fea26 	beq	r2,zero,bab8 <__adddf3+0x6c0>
    bb10:	4b50b03a 	or	r8,r9,r13
    bb14:	500a977a 	slli	r5,r10,29
    bb18:	5014d0fa 	srli	r10,r10,3
    bb1c:	40005626 	beq	r8,zero,bc78 <__adddf3+0x880>
    bb20:	00c80034 	movhi	r3,8192
    bb24:	18ffffc4 	addi	r3,r3,-1
    bb28:	20c4703a 	and	r2,r4,r3
    bb2c:	5100022c 	andhi	r4,r10,8
    bb30:	1144b03a 	or	r2,r2,r5
    bb34:	203f0d26 	beq	r4,zero,b76c <__adddf3+0x374>
    bb38:	4808d0fa 	srli	r4,r9,3
    bb3c:	2140022c 	andhi	r5,r4,8
    bb40:	283f0a1e 	bne	r5,zero,b76c <__adddf3+0x374>
    bb44:	4804977a 	slli	r2,r9,29
    bb48:	30cc703a 	and	r6,r6,r3
    bb4c:	3821883a 	mov	r16,r7
    bb50:	3084b03a 	or	r2,r6,r2
    bb54:	2015883a 	mov	r10,r4
    bb58:	003f0406 	br	b76c <__adddf3+0x374>
    bb5c:	6ba3c83a 	sub	r17,r13,r14
    bb60:	4a95c83a 	sub	r10,r9,r10
    bb64:	6c51803a 	cmpltu	r8,r13,r17
    bb68:	5211c83a 	sub	r8,r10,r8
    bb6c:	3821883a 	mov	r16,r7
    bb70:	04800044 	movi	r18,1
    bb74:	003e5106 	br	b4bc <__adddf3+0xc4>
    bb78:	103f6226 	beq	r2,zero,b904 <__adddf3+0x50c>
    bb7c:	4808977a 	slli	r4,r9,29
    bb80:	00880034 	movhi	r2,8192
    bb84:	10bfffc4 	addi	r2,r2,-1
    bb88:	3084703a 	and	r2,r6,r2
    bb8c:	4814d0fa 	srli	r10,r9,3
    bb90:	1104b03a 	or	r2,r2,r4
    bb94:	3821883a 	mov	r16,r7
    bb98:	003edb06 	br	b708 <__adddf3+0x310>
    bb9c:	7363c83a 	sub	r17,r14,r13
    bba0:	7445803a 	cmpltu	r2,r14,r17
    bba4:	5251c83a 	sub	r8,r10,r9
    bba8:	4091c83a 	sub	r8,r8,r2
    bbac:	4080202c 	andhi	r2,r8,128
    bbb0:	10004626 	beq	r2,zero,bccc <__adddf3+0x8d4>
    bbb4:	6ba3c83a 	sub	r17,r13,r14
    bbb8:	4a95c83a 	sub	r10,r9,r10
    bbbc:	6c51803a 	cmpltu	r8,r13,r17
    bbc0:	5211c83a 	sub	r8,r10,r8
    bbc4:	3821883a 	mov	r16,r7
    bbc8:	003e5a06 	br	b534 <__adddf3+0x13c>
    bbcc:	4804977a 	slli	r2,r9,29
    bbd0:	01080034 	movhi	r4,8192
    bbd4:	213fffc4 	addi	r4,r4,-1
    bbd8:	310c703a 	and	r6,r6,r4
    bbdc:	4814d0fa 	srli	r10,r9,3
    bbe0:	1184b03a 	or	r2,r2,r6
    bbe4:	003ec606 	br	b700 <__adddf3+0x308>
    bbe8:	500a977a 	slli	r5,r10,29
    bbec:	5014d0fa 	srli	r10,r10,3
    bbf0:	10002126 	beq	r2,zero,bc78 <__adddf3+0x880>
    bbf4:	00c80034 	movhi	r3,8192
    bbf8:	18ffffc4 	addi	r3,r3,-1
    bbfc:	20c4703a 	and	r2,r4,r3
    bc00:	5100022c 	andhi	r4,r10,8
    bc04:	1144b03a 	or	r2,r2,r5
    bc08:	203ed826 	beq	r4,zero,b76c <__adddf3+0x374>
    bc0c:	4808d0fa 	srli	r4,r9,3
    bc10:	2140022c 	andhi	r5,r4,8
    bc14:	283ed51e 	bne	r5,zero,b76c <__adddf3+0x374>
    bc18:	4812977a 	slli	r9,r9,29
    bc1c:	30c4703a 	and	r2,r6,r3
    bc20:	3821883a 	mov	r16,r7
    bc24:	1244b03a 	or	r2,r2,r9
    bc28:	2015883a 	mov	r10,r4
    bc2c:	003ecf06 	br	b76c <__adddf3+0x374>
    bc30:	4804977a 	slli	r2,r9,29
    bc34:	01080034 	movhi	r4,8192
    bc38:	213fffc4 	addi	r4,r4,-1
    bc3c:	310c703a 	and	r6,r6,r4
    bc40:	4814d0fa 	srli	r10,r9,3
    bc44:	1184b03a 	or	r2,r2,r6
    bc48:	003eaf06 	br	b708 <__adddf3+0x310>
    bc4c:	7363883a 	add	r17,r14,r13
    bc50:	5255883a 	add	r10,r10,r9
    bc54:	8b91803a 	cmpltu	r8,r17,r14
    bc58:	5211883a 	add	r8,r10,r8
    bc5c:	4080202c 	andhi	r2,r8,128
    bc60:	103ea026 	beq	r2,zero,b6e4 <__adddf3+0x2ec>
    bc64:	00bfe034 	movhi	r2,65408
    bc68:	10bfffc4 	addi	r2,r2,-1
    bc6c:	4090703a 	and	r8,r8,r2
    bc70:	04800044 	movi	r18,1
    bc74:	003e9b06 	br	b6e4 <__adddf3+0x2ec>
    bc78:	00880034 	movhi	r2,8192
    bc7c:	10bfffc4 	addi	r2,r2,-1
    bc80:	2084703a 	and	r2,r4,r2
    bc84:	1144b03a 	or	r2,r2,r5
    bc88:	003eb806 	br	b76c <__adddf3+0x374>
    bc8c:	193ff804 	addi	r4,r3,-32
    bc90:	19400820 	cmpeqi	r5,r3,32
    bc94:	5108d83a 	srl	r4,r10,r4
    bc98:	2800041e 	bne	r5,zero,bcac <__adddf3+0x8b4>
    bc9c:	01401004 	movi	r5,64
    bca0:	28c7c83a 	sub	r3,r5,r3
    bca4:	50d4983a 	sll	r10,r10,r3
    bca8:	729cb03a 	or	r14,r14,r10
    bcac:	7022c03a 	cmpne	r17,r14,zero
    bcb0:	8922b03a 	or	r17,r17,r4
    bcb4:	003edb06 	br	b824 <__adddf3+0x42c>
    bcb8:	7363883a 	add	r17,r14,r13
    bcbc:	5255883a 	add	r10,r10,r9
    bcc0:	8b51803a 	cmpltu	r8,r17,r13
    bcc4:	5211883a 	add	r8,r10,r8
    bcc8:	003f6206 	br	ba54 <__adddf3+0x65c>
    bccc:	8a04b03a 	or	r2,r17,r8
    bcd0:	103f0c26 	beq	r2,zero,b904 <__adddf3+0x50c>
    bcd4:	003e8306 	br	b6e4 <__adddf3+0x2ec>
    bcd8:	0005883a 	mov	r2,zero
    bcdc:	00c1ffc4 	movi	r3,2047
    bce0:	0011883a 	mov	r8,zero
    bce4:	003e2a06 	br	b590 <__adddf3+0x198>

0000bce8 <__divdf3>:
    bce8:	2810d53a 	srli	r8,r5,20
    bcec:	defff004 	addi	sp,sp,-64
    bcf0:	dc000615 	stw	r16,24(sp)
    bcf4:	04000434 	movhi	r16,16
    bcf8:	ddc00d15 	stw	r23,52(sp)
    bcfc:	dd800c15 	stw	r22,48(sp)
    bd00:	dd400b15 	stw	r21,44(sp)
    bd04:	dd000a15 	stw	r20,40(sp)
    bd08:	843fffc4 	addi	r16,r16,-1
    bd0c:	dfc00f15 	stw	ra,60(sp)
    bd10:	df000e15 	stw	fp,56(sp)
    bd14:	dcc00915 	stw	r19,36(sp)
    bd18:	dc800815 	stw	r18,32(sp)
    bd1c:	dc400715 	stw	r17,28(sp)
    bd20:	4201ffcc 	andi	r8,r8,2047
    bd24:	282cd7fa 	srli	r22,r5,31
    bd28:	302f883a 	mov	r23,r6
    bd2c:	382b883a 	mov	r21,r7
    bd30:	2029883a 	mov	r20,r4
    bd34:	2c20703a 	and	r16,r5,r16
    bd38:	40014426 	beq	r8,zero,c24c <__divdf3+0x564>
    bd3c:	4081ffe0 	cmpeqi	r2,r8,2047
    bd40:	1001551e 	bne	r2,zero,c298 <__divdf3+0x5b0>
    bd44:	2024d77a 	srli	r18,r4,29
    bd48:	800a90fa 	slli	r5,r16,3
    bd4c:	202890fa 	slli	r20,r4,3
    bd50:	447f0044 	addi	r17,r8,-1023
    bd54:	914ab03a 	or	r5,r18,r5
    bd58:	2c802034 	orhi	r18,r5,128
    bd5c:	0021883a 	mov	r16,zero
    bd60:	0039883a 	mov	fp,zero
    bd64:	a810d53a 	srli	r8,r21,20
    bd68:	00c00434 	movhi	r3,16
    bd6c:	18ffffc4 	addi	r3,r3,-1
    bd70:	4201ffcc 	andi	r8,r8,2047
    bd74:	a826d7fa 	srli	r19,r21,31
    bd78:	a8ea703a 	and	r21,r21,r3
    bd7c:	40012226 	beq	r8,zero,c208 <__divdf3+0x520>
    bd80:	4081ffe0 	cmpeqi	r2,r8,2047
    bd84:	10014b1e 	bne	r2,zero,c2b4 <__divdf3+0x5cc>
    bd88:	a80690fa 	slli	r3,r21,3
    bd8c:	b804d77a 	srli	r2,r23,29
    bd90:	b81290fa 	slli	r9,r23,3
    bd94:	423f0044 	addi	r8,r8,-1023
    bd98:	10c6b03a 	or	r3,r2,r3
    bd9c:	1d402034 	orhi	r21,r3,128
    bda0:	8a23c83a 	sub	r17,r17,r8
    bda4:	0007883a 	mov	r3,zero
    bda8:	80800428 	cmpgeui	r2,r16,16
    bdac:	b4cef03a 	xor	r7,r22,r19
    bdb0:	1000391e 	bne	r2,zero,be98 <__divdf3+0x1b0>
    bdb4:	800c90ba 	slli	r6,r16,2
    bdb8:	00800074 	movhi	r2,1
    bdbc:	3085883a 	add	r2,r6,r2
    bdc0:	10af7217 	ldw	r2,-16952(r2)
    bdc4:	1000683a 	jmp	r2
    bdc8:	0000be98 	cmpnei	zero,zero,762
    bdcc:	0000be74 	movhi	zero,761
    bdd0:	0000be24 	muli	zero,zero,760
    bdd4:	0000be84 	movi	zero,762
    bdd8:	0000be24 	muli	zero,zero,760
    bddc:	0000c318 	cmpnei	zero,zero,780
    bde0:	0000be24 	muli	zero,zero,760
    bde4:	0000be84 	movi	zero,762
    bde8:	0000be74 	movhi	zero,761
    bdec:	0000be74 	movhi	zero,761
    bdf0:	0000c318 	cmpnei	zero,zero,780
    bdf4:	0000be84 	movi	zero,762
    bdf8:	0000be08 	cmpgei	zero,zero,760
    bdfc:	0000be08 	cmpgei	zero,zero,760
    be00:	0000be08 	cmpgei	zero,zero,760
    be04:	0000c3a8 	cmpgeui	zero,zero,782
    be08:	b00f883a 	mov	r7,r22
    be0c:	e08000a0 	cmpeqi	r2,fp,2
    be10:	1000181e 	bne	r2,zero,be74 <__divdf3+0x18c>
    be14:	e08000e0 	cmpeqi	r2,fp,3
    be18:	1001ef1e 	bne	r2,zero,c5d8 <__divdf3+0x8f0>
    be1c:	e0800060 	cmpeqi	r2,fp,1
    be20:	1000e626 	beq	r2,zero,c1bc <__divdf3+0x4d4>
    be24:	0007883a 	mov	r3,zero
    be28:	000b883a 	mov	r5,zero
    be2c:	0029883a 	mov	r20,zero
    be30:	1806953a 	slli	r3,r3,20
    be34:	380e97fa 	slli	r7,r7,31
    be38:	a005883a 	mov	r2,r20
    be3c:	1946b03a 	or	r3,r3,r5
    be40:	19c6b03a 	or	r3,r3,r7
    be44:	dfc00f17 	ldw	ra,60(sp)
    be48:	df000e17 	ldw	fp,56(sp)
    be4c:	ddc00d17 	ldw	r23,52(sp)
    be50:	dd800c17 	ldw	r22,48(sp)
    be54:	dd400b17 	ldw	r21,44(sp)
    be58:	dd000a17 	ldw	r20,40(sp)
    be5c:	dcc00917 	ldw	r19,36(sp)
    be60:	dc800817 	ldw	r18,32(sp)
    be64:	dc400717 	ldw	r17,28(sp)
    be68:	dc000617 	ldw	r16,24(sp)
    be6c:	dec01004 	addi	sp,sp,64
    be70:	f800283a 	ret
    be74:	00c1ffc4 	movi	r3,2047
    be78:	000b883a 	mov	r5,zero
    be7c:	0029883a 	mov	r20,zero
    be80:	003feb06 	br	be30 <__divdf3+0x148>
    be84:	980f883a 	mov	r7,r19
    be88:	a825883a 	mov	r18,r21
    be8c:	4829883a 	mov	r20,r9
    be90:	1839883a 	mov	fp,r3
    be94:	003fdd06 	br	be0c <__divdf3+0x124>
    be98:	ac815d36 	bltu	r21,r18,c410 <__divdf3+0x728>
    be9c:	ac815b26 	beq	r21,r18,c40c <__divdf3+0x724>
    bea0:	8c7fffc4 	addi	r17,r17,-1
    bea4:	a039883a 	mov	fp,r20
    bea8:	9021883a 	mov	r16,r18
    beac:	002d883a 	mov	r22,zero
    beb0:	a806923a 	slli	r3,r21,8
    beb4:	482ad63a 	srli	r21,r9,24
    beb8:	8009883a 	mov	r4,r16
    bebc:	182ed43a 	srli	r23,r3,16
    bec0:	a8eab03a 	or	r21,r21,r3
    bec4:	d9c00015 	stw	r7,0(sp)
    bec8:	b80b883a 	mov	r5,r23
    becc:	4826923a 	slli	r19,r9,8
    bed0:	ad3fffcc 	andi	r20,r21,65535
    bed4:	000b3100 	call	b310 <__udivsi3>
    bed8:	100b883a 	mov	r5,r2
    bedc:	a009883a 	mov	r4,r20
    bee0:	1025883a 	mov	r18,r2
    bee4:	000b3d00 	call	b3d0 <__mulsi3>
    bee8:	8009883a 	mov	r4,r16
    beec:	b80b883a 	mov	r5,r23
    bef0:	1021883a 	mov	r16,r2
    bef4:	000b3740 	call	b374 <__umodsi3>
    bef8:	1004943a 	slli	r2,r2,16
    befc:	e008d43a 	srli	r4,fp,16
    bf00:	d9c00017 	ldw	r7,0(sp)
    bf04:	2088b03a 	or	r4,r4,r2
    bf08:	2400042e 	bgeu	r4,r16,bf1c <__divdf3+0x234>
    bf0c:	2549883a 	add	r4,r4,r21
    bf10:	90bfffc4 	addi	r2,r18,-1
    bf14:	25416e2e 	bgeu	r4,r21,c4d0 <__divdf3+0x7e8>
    bf18:	1025883a 	mov	r18,r2
    bf1c:	2421c83a 	sub	r16,r4,r16
    bf20:	b80b883a 	mov	r5,r23
    bf24:	8009883a 	mov	r4,r16
    bf28:	d9c00215 	stw	r7,8(sp)
    bf2c:	000b3100 	call	b310 <__udivsi3>
    bf30:	100b883a 	mov	r5,r2
    bf34:	a009883a 	mov	r4,r20
    bf38:	d8800115 	stw	r2,4(sp)
    bf3c:	000b3d00 	call	b3d0 <__mulsi3>
    bf40:	b80b883a 	mov	r5,r23
    bf44:	8009883a 	mov	r4,r16
    bf48:	d8800015 	stw	r2,0(sp)
    bf4c:	000b3740 	call	b374 <__umodsi3>
    bf50:	100c943a 	slli	r6,r2,16
    bf54:	da000017 	ldw	r8,0(sp)
    bf58:	e73fffcc 	andi	fp,fp,65535
    bf5c:	e18cb03a 	or	r6,fp,r6
    bf60:	d8c00117 	ldw	r3,4(sp)
    bf64:	d9c00217 	ldw	r7,8(sp)
    bf68:	3200042e 	bgeu	r6,r8,bf7c <__divdf3+0x294>
    bf6c:	354d883a 	add	r6,r6,r21
    bf70:	18bfffc4 	addi	r2,r3,-1
    bf74:	3541522e 	bgeu	r6,r21,c4c0 <__divdf3+0x7d8>
    bf78:	1007883a 	mov	r3,r2
    bf7c:	9024943a 	slli	r18,r18,16
    bf80:	9f3fffcc 	andi	fp,r19,65535
    bf84:	320dc83a 	sub	r6,r6,r8
    bf88:	90e4b03a 	or	r18,r18,r3
    bf8c:	9012d43a 	srli	r9,r18,16
    bf90:	92ffffcc 	andi	r11,r18,65535
    bf94:	5809883a 	mov	r4,r11
    bf98:	e00b883a 	mov	r5,fp
    bf9c:	d9c00515 	stw	r7,20(sp)
    bfa0:	d9800315 	stw	r6,12(sp)
    bfa4:	dac00415 	stw	r11,16(sp)
    bfa8:	da400015 	stw	r9,0(sp)
    bfac:	000b3d00 	call	b3d0 <__mulsi3>
    bfb0:	da400017 	ldw	r9,0(sp)
    bfb4:	e00b883a 	mov	r5,fp
    bfb8:	d8800215 	stw	r2,8(sp)
    bfbc:	4809883a 	mov	r4,r9
    bfc0:	000b3d00 	call	b3d0 <__mulsi3>
    bfc4:	da400017 	ldw	r9,0(sp)
    bfc8:	9820d43a 	srli	r16,r19,16
    bfcc:	d8800115 	stw	r2,4(sp)
    bfd0:	4809883a 	mov	r4,r9
    bfd4:	800b883a 	mov	r5,r16
    bfd8:	000b3d00 	call	b3d0 <__mulsi3>
    bfdc:	dac00417 	ldw	r11,16(sp)
    bfe0:	8009883a 	mov	r4,r16
    bfe4:	d8800015 	stw	r2,0(sp)
    bfe8:	580b883a 	mov	r5,r11
    bfec:	000b3d00 	call	b3d0 <__mulsi3>
    bff0:	da000217 	ldw	r8,8(sp)
    bff4:	da400117 	ldw	r9,4(sp)
    bff8:	da800017 	ldw	r10,0(sp)
    bffc:	4008d43a 	srli	r4,r8,16
    c000:	1247883a 	add	r3,r2,r9
    c004:	d9800317 	ldw	r6,12(sp)
    c008:	20c7883a 	add	r3,r4,r3
    c00c:	d9c00517 	ldw	r7,20(sp)
    c010:	1a40022e 	bgeu	r3,r9,c01c <__divdf3+0x334>
    c014:	00800074 	movhi	r2,1
    c018:	5095883a 	add	r10,r10,r2
    c01c:	1808d43a 	srli	r4,r3,16
    c020:	1806943a 	slli	r3,r3,16
    c024:	423fffcc 	andi	r8,r8,65535
    c028:	2285883a 	add	r2,r4,r10
    c02c:	1a07883a 	add	r3,r3,r8
    c030:	30800236 	bltu	r6,r2,c03c <__divdf3+0x354>
    c034:	30800a1e 	bne	r6,r2,c060 <__divdf3+0x378>
    c038:	b0c0092e 	bgeu	r22,r3,c060 <__divdf3+0x378>
    c03c:	b4ed883a 	add	r22,r22,r19
    c040:	b4c9803a 	cmpltu	r4,r22,r19
    c044:	2549883a 	add	r4,r4,r21
    c048:	310d883a 	add	r6,r6,r4
    c04c:	913fffc4 	addi	r4,r18,-1
    c050:	a981182e 	bgeu	r21,r6,c4b4 <__divdf3+0x7cc>
    c054:	30814a36 	bltu	r6,r2,c580 <__divdf3+0x898>
    c058:	11814826 	beq	r2,r6,c57c <__divdf3+0x894>
    c05c:	2025883a 	mov	r18,r4
    c060:	b0c7c83a 	sub	r3,r22,r3
    c064:	3085c83a 	sub	r2,r6,r2
    c068:	b0ed803a 	cmpltu	r22,r22,r3
    c06c:	15adc83a 	sub	r22,r2,r22
    c070:	ad813026 	beq	r21,r22,c534 <__divdf3+0x84c>
    c074:	b009883a 	mov	r4,r22
    c078:	b80b883a 	mov	r5,r23
    c07c:	d8c00215 	stw	r3,8(sp)
    c080:	d9c00115 	stw	r7,4(sp)
    c084:	000b3100 	call	b310 <__udivsi3>
    c088:	100b883a 	mov	r5,r2
    c08c:	a009883a 	mov	r4,r20
    c090:	d8800015 	stw	r2,0(sp)
    c094:	000b3d00 	call	b3d0 <__mulsi3>
    c098:	b009883a 	mov	r4,r22
    c09c:	b80b883a 	mov	r5,r23
    c0a0:	102d883a 	mov	r22,r2
    c0a4:	000b3740 	call	b374 <__umodsi3>
    c0a8:	d8c00217 	ldw	r3,8(sp)
    c0ac:	1004943a 	slli	r2,r2,16
    c0b0:	d9800017 	ldw	r6,0(sp)
    c0b4:	1808d43a 	srli	r4,r3,16
    c0b8:	d9c00117 	ldw	r7,4(sp)
    c0bc:	2088b03a 	or	r4,r4,r2
    c0c0:	2580f536 	bltu	r4,r22,c498 <__divdf3+0x7b0>
    c0c4:	25adc83a 	sub	r22,r4,r22
    c0c8:	b009883a 	mov	r4,r22
    c0cc:	b80b883a 	mov	r5,r23
    c0d0:	d8c00315 	stw	r3,12(sp)
    c0d4:	d9c00215 	stw	r7,8(sp)
    c0d8:	d9800115 	stw	r6,4(sp)
    c0dc:	000b3100 	call	b310 <__udivsi3>
    c0e0:	100b883a 	mov	r5,r2
    c0e4:	a009883a 	mov	r4,r20
    c0e8:	d8800015 	stw	r2,0(sp)
    c0ec:	000b3d00 	call	b3d0 <__mulsi3>
    c0f0:	b009883a 	mov	r4,r22
    c0f4:	b80b883a 	mov	r5,r23
    c0f8:	102d883a 	mov	r22,r2
    c0fc:	000b3740 	call	b374 <__umodsi3>
    c100:	d8c00317 	ldw	r3,12(sp)
    c104:	1004943a 	slli	r2,r2,16
    c108:	da000017 	ldw	r8,0(sp)
    c10c:	18ffffcc 	andi	r3,r3,65535
    c110:	1886b03a 	or	r3,r3,r2
    c114:	d9800117 	ldw	r6,4(sp)
    c118:	d9c00217 	ldw	r7,8(sp)
    c11c:	1d80d736 	bltu	r3,r22,c47c <__divdf3+0x794>
    c120:	3028943a 	slli	r20,r6,16
    c124:	e009883a 	mov	r4,fp
    c128:	d9c00215 	stw	r7,8(sp)
    c12c:	a228b03a 	or	r20,r20,r8
    c130:	a1bfffcc 	andi	r6,r20,65535
    c134:	a02ed43a 	srli	r23,r20,16
    c138:	300b883a 	mov	r5,r6
    c13c:	1dadc83a 	sub	r22,r3,r22
    c140:	d9800115 	stw	r6,4(sp)
    c144:	000b3d00 	call	b3d0 <__mulsi3>
    c148:	e00b883a 	mov	r5,fp
    c14c:	b809883a 	mov	r4,r23
    c150:	d8800015 	stw	r2,0(sp)
    c154:	000b3d00 	call	b3d0 <__mulsi3>
    c158:	8009883a 	mov	r4,r16
    c15c:	b80b883a 	mov	r5,r23
    c160:	1039883a 	mov	fp,r2
    c164:	000b3d00 	call	b3d0 <__mulsi3>
    c168:	d9800117 	ldw	r6,4(sp)
    c16c:	8009883a 	mov	r4,r16
    c170:	1021883a 	mov	r16,r2
    c174:	300b883a 	mov	r5,r6
    c178:	000b3d00 	call	b3d0 <__mulsi3>
    c17c:	da000017 	ldw	r8,0(sp)
    c180:	1705883a 	add	r2,r2,fp
    c184:	d9c00217 	ldw	r7,8(sp)
    c188:	4006d43a 	srli	r3,r8,16
    c18c:	1887883a 	add	r3,r3,r2
    c190:	1f00022e 	bgeu	r3,fp,c19c <__divdf3+0x4b4>
    c194:	00800074 	movhi	r2,1
    c198:	80a1883a 	add	r16,r16,r2
    c19c:	1808d43a 	srli	r4,r3,16
    c1a0:	1806943a 	slli	r3,r3,16
    c1a4:	45ffffcc 	andi	r23,r8,65535
    c1a8:	2409883a 	add	r4,r4,r16
    c1ac:	1dc7883a 	add	r3,r3,r23
    c1b0:	b1008f36 	bltu	r22,r4,c3f0 <__divdf3+0x708>
    c1b4:	b1008d26 	beq	r22,r4,c3ec <__divdf3+0x704>
    c1b8:	a5000054 	ori	r20,r20,1
    c1bc:	8980ffc4 	addi	r6,r17,1023
    c1c0:	01805c0e 	bge	zero,r6,c334 <__divdf3+0x64c>
    c1c4:	a08001cc 	andi	r2,r20,7
    c1c8:	1000e01e 	bne	r2,zero,c54c <__divdf3+0x864>
    c1cc:	a008d0fa 	srli	r4,r20,3
    c1d0:	9080402c 	andhi	r2,r18,256
    c1d4:	10000426 	beq	r2,zero,c1e8 <__divdf3+0x500>
    c1d8:	00bfc034 	movhi	r2,65280
    c1dc:	10bfffc4 	addi	r2,r2,-1
    c1e0:	90a4703a 	and	r18,r18,r2
    c1e4:	89810004 	addi	r6,r17,1024
    c1e8:	3081ffc8 	cmpgei	r2,r6,2047
    c1ec:	103f211e 	bne	r2,zero,be74 <__divdf3+0x18c>
    c1f0:	9028977a 	slli	r20,r18,29
    c1f4:	900a927a 	slli	r5,r18,9
    c1f8:	30c1ffcc 	andi	r3,r6,2047
    c1fc:	a128b03a 	or	r20,r20,r4
    c200:	280ad33a 	srli	r5,r5,12
    c204:	003f0a06 	br	be30 <__divdf3+0x148>
    c208:	add2b03a 	or	r9,r21,r23
    c20c:	48003e26 	beq	r9,zero,c308 <__divdf3+0x620>
    c210:	a8008f26 	beq	r21,zero,c450 <__divdf3+0x768>
    c214:	a809883a 	mov	r4,r21
    c218:	0000a600 	call	a60 <__clzsi2>
    c21c:	117ffd44 	addi	r5,r2,-11
    c220:	01000744 	movi	r4,29
    c224:	127ffe04 	addi	r9,r2,-8
    c228:	2149c83a 	sub	r4,r4,r5
    c22c:	aa46983a 	sll	r3,r21,r9
    c230:	b908d83a 	srl	r4,r23,r4
    c234:	ba52983a 	sll	r9,r23,r9
    c238:	20eab03a 	or	r21,r4,r3
    c23c:	1451883a 	add	r8,r2,r17
    c240:	4440fcc4 	addi	r17,r8,1011
    c244:	0007883a 	mov	r3,zero
    c248:	003ed706 	br	bda8 <__divdf3+0xc0>
    c24c:	8124b03a 	or	r18,r16,r4
    c250:	2027883a 	mov	r19,r4
    c254:	90002726 	beq	r18,zero,c2f4 <__divdf3+0x60c>
    c258:	80007326 	beq	r16,zero,c428 <__divdf3+0x740>
    c25c:	8009883a 	mov	r4,r16
    c260:	0000a600 	call	a60 <__clzsi2>
    c264:	113ffd44 	addi	r4,r2,-11
    c268:	00c00744 	movi	r3,29
    c26c:	14bffe04 	addi	r18,r2,-8
    c270:	1907c83a 	sub	r3,r3,r4
    c274:	848a983a 	sll	r5,r16,r18
    c278:	98c6d83a 	srl	r3,r19,r3
    c27c:	9ca8983a 	sll	r20,r19,r18
    c280:	1964b03a 	or	r18,r3,r5
    c284:	023f0344 	movi	r8,-1011
    c288:	40a3c83a 	sub	r17,r8,r2
    c28c:	0021883a 	mov	r16,zero
    c290:	0039883a 	mov	fp,zero
    c294:	003eb306 	br	bd64 <__divdf3+0x7c>
    c298:	8124b03a 	or	r18,r16,r4
    c29c:	9000101e 	bne	r18,zero,c2e0 <__divdf3+0x5f8>
    c2a0:	0029883a 	mov	r20,zero
    c2a4:	04000204 	movi	r16,8
    c2a8:	0441ffc4 	movi	r17,2047
    c2ac:	07000084 	movi	fp,2
    c2b0:	003eac06 	br	bd64 <__divdf3+0x7c>
    c2b4:	add2b03a 	or	r9,r21,r23
    c2b8:	8c7e0044 	addi	r17,r17,-2047
    c2bc:	4800041e 	bne	r9,zero,c2d0 <__divdf3+0x5e8>
    c2c0:	84000094 	ori	r16,r16,2
    c2c4:	002b883a 	mov	r21,zero
    c2c8:	00c00084 	movi	r3,2
    c2cc:	003eb606 	br	bda8 <__divdf3+0xc0>
    c2d0:	840000d4 	ori	r16,r16,3
    c2d4:	b813883a 	mov	r9,r23
    c2d8:	00c000c4 	movi	r3,3
    c2dc:	003eb206 	br	bda8 <__divdf3+0xc0>
    c2e0:	8025883a 	mov	r18,r16
    c2e4:	0441ffc4 	movi	r17,2047
    c2e8:	04000304 	movi	r16,12
    c2ec:	070000c4 	movi	fp,3
    c2f0:	003e9c06 	br	bd64 <__divdf3+0x7c>
    c2f4:	0029883a 	mov	r20,zero
    c2f8:	04000104 	movi	r16,4
    c2fc:	0023883a 	mov	r17,zero
    c300:	07000044 	movi	fp,1
    c304:	003e9706 	br	bd64 <__divdf3+0x7c>
    c308:	84000054 	ori	r16,r16,1
    c30c:	002b883a 	mov	r21,zero
    c310:	00c00044 	movi	r3,1
    c314:	003ea406 	br	bda8 <__divdf3+0xc0>
    c318:	01400434 	movhi	r5,16
    c31c:	000f883a 	mov	r7,zero
    c320:	297fffc4 	addi	r5,r5,-1
    c324:	053fffc4 	movi	r20,-1
    c328:	00c1ffc4 	movi	r3,2047
    c32c:	003ec006 	br	be30 <__divdf3+0x148>
    c330:	053fffc4 	movi	r20,-1
    c334:	01400044 	movi	r5,1
    c338:	298bc83a 	sub	r5,r5,r6
    c33c:	28800e48 	cmpgei	r2,r5,57
    c340:	103eb81e 	bne	r2,zero,be24 <__divdf3+0x13c>
    c344:	28800808 	cmpgei	r2,r5,32
    c348:	1000651e 	bne	r2,zero,c4e0 <__divdf3+0x7f8>
    c34c:	8a010784 	addi	r8,r17,1054
    c350:	9204983a 	sll	r2,r18,r8
    c354:	a146d83a 	srl	r3,r20,r5
    c358:	a210983a 	sll	r8,r20,r8
    c35c:	914ad83a 	srl	r5,r18,r5
    c360:	10e8b03a 	or	r20,r2,r3
    c364:	4010c03a 	cmpne	r8,r8,zero
    c368:	a228b03a 	or	r20,r20,r8
    c36c:	a08001cc 	andi	r2,r20,7
    c370:	10000726 	beq	r2,zero,c390 <__divdf3+0x6a8>
    c374:	a08003cc 	andi	r2,r20,15
    c378:	10800120 	cmpeqi	r2,r2,4
    c37c:	1000041e 	bne	r2,zero,c390 <__divdf3+0x6a8>
    c380:	a0800104 	addi	r2,r20,4
    c384:	1529803a 	cmpltu	r20,r2,r20
    c388:	2d0b883a 	add	r5,r5,r20
    c38c:	1029883a 	mov	r20,r2
    c390:	2880202c 	andhi	r2,r5,128
    c394:	10008c26 	beq	r2,zero,c5c8 <__divdf3+0x8e0>
    c398:	00c00044 	movi	r3,1
    c39c:	000b883a 	mov	r5,zero
    c3a0:	0029883a 	mov	r20,zero
    c3a4:	003ea206 	br	be30 <__divdf3+0x148>
    c3a8:	9080022c 	andhi	r2,r18,8
    c3ac:	10000926 	beq	r2,zero,c3d4 <__divdf3+0x6ec>
    c3b0:	a880022c 	andhi	r2,r21,8
    c3b4:	1000071e 	bne	r2,zero,c3d4 <__divdf3+0x6ec>
    c3b8:	00800434 	movhi	r2,16
    c3bc:	a9400234 	orhi	r5,r21,8
    c3c0:	10bfffc4 	addi	r2,r2,-1
    c3c4:	288a703a 	and	r5,r5,r2
    c3c8:	980f883a 	mov	r7,r19
    c3cc:	4829883a 	mov	r20,r9
    c3d0:	003fd506 	br	c328 <__divdf3+0x640>
    c3d4:	00800434 	movhi	r2,16
    c3d8:	91400234 	orhi	r5,r18,8
    c3dc:	10bfffc4 	addi	r2,r2,-1
    c3e0:	288a703a 	and	r5,r5,r2
    c3e4:	b00f883a 	mov	r7,r22
    c3e8:	003fcf06 	br	c328 <__divdf3+0x640>
    c3ec:	183f7326 	beq	r3,zero,c1bc <__divdf3+0x4d4>
    c3f0:	adad883a 	add	r22,r21,r22
    c3f4:	a0bfffc4 	addi	r2,r20,-1
    c3f8:	b5404a36 	bltu	r22,r21,c524 <__divdf3+0x83c>
    c3fc:	b1006636 	bltu	r22,r4,c598 <__divdf3+0x8b0>
    c400:	b1007a26 	beq	r22,r4,c5ec <__divdf3+0x904>
    c404:	1029883a 	mov	r20,r2
    c408:	003f6b06 	br	c1b8 <__divdf3+0x4d0>
    c40c:	a27ea436 	bltu	r20,r9,bea0 <__divdf3+0x1b8>
    c410:	903897fa 	slli	fp,r18,31
    c414:	a004d07a 	srli	r2,r20,1
    c418:	9020d07a 	srli	r16,r18,1
    c41c:	a02c97fa 	slli	r22,r20,31
    c420:	e0b8b03a 	or	fp,fp,r2
    c424:	003ea206 	br	beb0 <__divdf3+0x1c8>
    c428:	0000a600 	call	a60 <__clzsi2>
    c42c:	11000544 	addi	r4,r2,21
    c430:	20c00748 	cmpgei	r3,r4,29
    c434:	100b883a 	mov	r5,r2
    c438:	10800804 	addi	r2,r2,32
    c43c:	183f8a26 	beq	r3,zero,c268 <__divdf3+0x580>
    c440:	297ffe04 	addi	r5,r5,-8
    c444:	a164983a 	sll	r18,r20,r5
    c448:	0029883a 	mov	r20,zero
    c44c:	003f8d06 	br	c284 <__divdf3+0x59c>
    c450:	b809883a 	mov	r4,r23
    c454:	0000a600 	call	a60 <__clzsi2>
    c458:	11400544 	addi	r5,r2,21
    c45c:	29000748 	cmpgei	r4,r5,29
    c460:	1007883a 	mov	r3,r2
    c464:	10800804 	addi	r2,r2,32
    c468:	203f6d26 	beq	r4,zero,c220 <__divdf3+0x538>
    c46c:	18fffe04 	addi	r3,r3,-8
    c470:	b8ea983a 	sll	r21,r23,r3
    c474:	0013883a 	mov	r9,zero
    c478:	003f7006 	br	c23c <__divdf3+0x554>
    c47c:	1d47883a 	add	r3,r3,r21
    c480:	40bfffc4 	addi	r2,r8,-1
    c484:	1d403936 	bltu	r3,r21,c56c <__divdf3+0x884>
    c488:	1d80382e 	bgeu	r3,r22,c56c <__divdf3+0x884>
    c48c:	423fff84 	addi	r8,r8,-2
    c490:	1d47883a 	add	r3,r3,r21
    c494:	003f2206 	br	c120 <__divdf3+0x438>
    c498:	2549883a 	add	r4,r4,r21
    c49c:	30bfffc4 	addi	r2,r6,-1
    c4a0:	25403436 	bltu	r4,r21,c574 <__divdf3+0x88c>
    c4a4:	2580332e 	bgeu	r4,r22,c574 <__divdf3+0x88c>
    c4a8:	31bfff84 	addi	r6,r6,-2
    c4ac:	2549883a 	add	r4,r4,r21
    c4b0:	003f0406 	br	c0c4 <__divdf3+0x3dc>
    c4b4:	a9bee91e 	bne	r21,r6,c05c <__divdf3+0x374>
    c4b8:	b4fee836 	bltu	r22,r19,c05c <__divdf3+0x374>
    c4bc:	003ee506 	br	c054 <__divdf3+0x36c>
    c4c0:	323ead2e 	bgeu	r6,r8,bf78 <__divdf3+0x290>
    c4c4:	18ffff84 	addi	r3,r3,-2
    c4c8:	354d883a 	add	r6,r6,r21
    c4cc:	003eab06 	br	bf7c <__divdf3+0x294>
    c4d0:	243e912e 	bgeu	r4,r16,bf18 <__divdf3+0x230>
    c4d4:	94bfff84 	addi	r18,r18,-2
    c4d8:	2549883a 	add	r4,r4,r21
    c4dc:	003e8f06 	br	bf1c <__divdf3+0x234>
    c4e0:	00fff844 	movi	r3,-31
    c4e4:	1987c83a 	sub	r3,r3,r6
    c4e8:	29400820 	cmpeqi	r5,r5,32
    c4ec:	90c6d83a 	srl	r3,r18,r3
    c4f0:	2800031e 	bne	r5,zero,c500 <__divdf3+0x818>
    c4f4:	89410f84 	addi	r5,r17,1086
    c4f8:	914a983a 	sll	r5,r18,r5
    c4fc:	a168b03a 	or	r20,r20,r5
    c500:	a028c03a 	cmpne	r20,r20,zero
    c504:	a0e8b03a 	or	r20,r20,r3
    c508:	a48001cc 	andi	r18,r20,7
    c50c:	90002a1e 	bne	r18,zero,c5b8 <__divdf3+0x8d0>
    c510:	000b883a 	mov	r5,zero
    c514:	a028d0fa 	srli	r20,r20,3
    c518:	0007883a 	mov	r3,zero
    c51c:	a4a8b03a 	or	r20,r20,r18
    c520:	003e4306 	br	be30 <__divdf3+0x148>
    c524:	1029883a 	mov	r20,r2
    c528:	b13f231e 	bne	r22,r4,c1b8 <__divdf3+0x4d0>
    c52c:	1cff221e 	bne	r3,r19,c1b8 <__divdf3+0x4d0>
    c530:	003f2206 	br	c1bc <__divdf3+0x4d4>
    c534:	8980ffc4 	addi	r6,r17,1023
    c538:	01bf7d0e 	bge	zero,r6,c330 <__divdf3+0x648>
    c53c:	0009883a 	mov	r4,zero
    c540:	05000044 	movi	r20,1
    c544:	9525883a 	add	r18,r18,r20
    c548:	003f2106 	br	c1d0 <__divdf3+0x4e8>
    c54c:	a08003cc 	andi	r2,r20,15
    c550:	10800118 	cmpnei	r2,r2,4
    c554:	103f1d26 	beq	r2,zero,c1cc <__divdf3+0x4e4>
    c558:	a1000104 	addi	r4,r20,4
    c55c:	00bffec4 	movi	r2,-5
    c560:	2008d0fa 	srli	r4,r4,3
    c564:	1529803a 	cmpltu	r20,r2,r20
    c568:	003ff606 	br	c544 <__divdf3+0x85c>
    c56c:	1011883a 	mov	r8,r2
    c570:	003eeb06 	br	c120 <__divdf3+0x438>
    c574:	100d883a 	mov	r6,r2
    c578:	003ed206 	br	c0c4 <__divdf3+0x3dc>
    c57c:	b0feb72e 	bgeu	r22,r3,c05c <__divdf3+0x374>
    c580:	b4ed883a 	add	r22,r22,r19
    c584:	b4c9803a 	cmpltu	r4,r22,r19
    c588:	2549883a 	add	r4,r4,r21
    c58c:	94bfff84 	addi	r18,r18,-2
    c590:	310d883a 	add	r6,r6,r4
    c594:	003eb206 	br	c060 <__divdf3+0x378>
    c598:	9cc5883a 	add	r2,r19,r19
    c59c:	14e7803a 	cmpltu	r19,r2,r19
    c5a0:	9d6b883a 	add	r21,r19,r21
    c5a4:	b56d883a 	add	r22,r22,r21
    c5a8:	a53fff84 	addi	r20,r20,-2
    c5ac:	1027883a 	mov	r19,r2
    c5b0:	b13fde26 	beq	r22,r4,c52c <__divdf3+0x844>
    c5b4:	003f0006 	br	c1b8 <__divdf3+0x4d0>
    c5b8:	a08003cc 	andi	r2,r20,15
    c5bc:	10800118 	cmpnei	r2,r2,4
    c5c0:	000b883a 	mov	r5,zero
    c5c4:	103f6e1e 	bne	r2,zero,c380 <__divdf3+0x698>
    c5c8:	2804927a 	slli	r2,r5,9
    c5cc:	2824977a 	slli	r18,r5,29
    c5d0:	100ad33a 	srli	r5,r2,12
    c5d4:	003fcf06 	br	c514 <__divdf3+0x82c>
    c5d8:	00800434 	movhi	r2,16
    c5dc:	91400234 	orhi	r5,r18,8
    c5e0:	10bfffc4 	addi	r2,r2,-1
    c5e4:	288a703a 	and	r5,r5,r2
    c5e8:	003f4f06 	br	c328 <__divdf3+0x640>
    c5ec:	98ffea36 	bltu	r19,r3,c598 <__divdf3+0x8b0>
    c5f0:	1029883a 	mov	r20,r2
    c5f4:	1cfef01e 	bne	r3,r19,c1b8 <__divdf3+0x4d0>
    c5f8:	003ef006 	br	c1bc <__divdf3+0x4d4>

0000c5fc <__eqdf2>:
    c5fc:	2810d53a 	srli	r8,r5,20
    c600:	3806d53a 	srli	r3,r7,20
    c604:	00800434 	movhi	r2,16
    c608:	4201ffcc 	andi	r8,r8,2047
    c60c:	10bfffc4 	addi	r2,r2,-1
    c610:	4241ffd8 	cmpnei	r9,r8,2047
    c614:	2814d7fa 	srli	r10,r5,31
    c618:	3816d7fa 	srli	r11,r7,31
    c61c:	288a703a 	and	r5,r5,r2
    c620:	388e703a 	and	r7,r7,r2
    c624:	1881ffcc 	andi	r2,r3,2047
    c628:	48000626 	beq	r9,zero,c644 <__eqdf2+0x48>
    c62c:	10c1ffe0 	cmpeqi	r3,r2,2047
    c630:	1800021e 	bne	r3,zero,c63c <__eqdf2+0x40>
    c634:	4080011e 	bne	r8,r2,c63c <__eqdf2+0x40>
    c638:	29c00826 	beq	r5,r7,c65c <__eqdf2+0x60>
    c63c:	00800044 	movi	r2,1
    c640:	f800283a 	ret
    c644:	2906b03a 	or	r3,r5,r4
    c648:	183ffc1e 	bne	r3,zero,c63c <__eqdf2+0x40>
    c64c:	1081ffd8 	cmpnei	r2,r2,2047
    c650:	103ffa1e 	bne	r2,zero,c63c <__eqdf2+0x40>
    c654:	398eb03a 	or	r7,r7,r6
    c658:	383ff81e 	bne	r7,zero,c63c <__eqdf2+0x40>
    c65c:	21bff71e 	bne	r4,r6,c63c <__eqdf2+0x40>
    c660:	52c00426 	beq	r10,r11,c674 <__eqdf2+0x78>
    c664:	403ff51e 	bne	r8,zero,c63c <__eqdf2+0x40>
    c668:	290ab03a 	or	r5,r5,r4
    c66c:	2804c03a 	cmpne	r2,r5,zero
    c670:	f800283a 	ret
    c674:	0005883a 	mov	r2,zero
    c678:	f800283a 	ret

0000c67c <__gedf2>:
    c67c:	2810d53a 	srli	r8,r5,20
    c680:	3812d53a 	srli	r9,r7,20
    c684:	00c00434 	movhi	r3,16
    c688:	4201ffcc 	andi	r8,r8,2047
    c68c:	18ffffc4 	addi	r3,r3,-1
    c690:	4281ffd8 	cmpnei	r10,r8,2047
    c694:	2816d7fa 	srli	r11,r5,31
    c698:	3804d7fa 	srli	r2,r7,31
    c69c:	28ca703a 	and	r5,r5,r3
    c6a0:	38ce703a 	and	r7,r7,r3
    c6a4:	48c1ffcc 	andi	r3,r9,2047
    c6a8:	50000a26 	beq	r10,zero,c6d4 <__gedf2+0x58>
    c6ac:	1a41ffd8 	cmpnei	r9,r3,2047
    c6b0:	48000c26 	beq	r9,zero,c6e4 <__gedf2+0x68>
    c6b4:	4000171e 	bne	r8,zero,c714 <__gedf2+0x98>
    c6b8:	2912b03a 	or	r9,r5,r4
    c6bc:	1800121e 	bne	r3,zero,c708 <__gedf2+0x8c>
    c6c0:	3994b03a 	or	r10,r7,r6
    c6c4:	5000101e 	bne	r10,zero,c708 <__gedf2+0x8c>
    c6c8:	48000a1e 	bne	r9,zero,c6f4 <__gedf2+0x78>
    c6cc:	0005883a 	mov	r2,zero
    c6d0:	f800283a 	ret
    c6d4:	2912b03a 	or	r9,r5,r4
    c6d8:	48001d1e 	bne	r9,zero,c750 <__gedf2+0xd4>
    c6dc:	1a41ffe0 	cmpeqi	r9,r3,2047
    c6e0:	48000c26 	beq	r9,zero,c714 <__gedf2+0x98>
    c6e4:	3992b03a 	or	r9,r7,r6
    c6e8:	4800191e 	bne	r9,zero,c750 <__gedf2+0xd4>
    c6ec:	40000526 	beq	r8,zero,c704 <__gedf2+0x88>
    c6f0:	58800c26 	beq	r11,r2,c724 <__gedf2+0xa8>
    c6f4:	00800044 	movi	r2,1
    c6f8:	58000526 	beq	r11,zero,c710 <__gedf2+0x94>
    c6fc:	00bfffc4 	movi	r2,-1
    c700:	f800283a 	ret
    c704:	2912b03a 	or	r9,r5,r4
    c708:	483ff91e 	bne	r9,zero,c6f0 <__gedf2+0x74>
    c70c:	103ffb26 	beq	r2,zero,c6fc <__gedf2+0x80>
    c710:	f800283a 	ret
    c714:	183ff61e 	bne	r3,zero,c6f0 <__gedf2+0x74>
    c718:	3992b03a 	or	r9,r7,r6
    c71c:	483ff41e 	bne	r9,zero,c6f0 <__gedf2+0x74>
    c720:	003ff406 	br	c6f4 <__gedf2+0x78>
    c724:	1a000716 	blt	r3,r8,c744 <__gedf2+0xc8>
    c728:	40fff816 	blt	r8,r3,c70c <__gedf2+0x90>
    c72c:	397ff136 	bltu	r7,r5,c6f4 <__gedf2+0x78>
    c730:	29c00926 	beq	r5,r7,c758 <__gedf2+0xdc>
    c734:	29ffe52e 	bgeu	r5,r7,c6cc <__gedf2+0x50>
    c738:	583ff026 	beq	r11,zero,c6fc <__gedf2+0x80>
    c73c:	5805883a 	mov	r2,r11
    c740:	f800283a 	ret
    c744:	103fed1e 	bne	r2,zero,c6fc <__gedf2+0x80>
    c748:	00800044 	movi	r2,1
    c74c:	f800283a 	ret
    c750:	00bfff84 	movi	r2,-2
    c754:	f800283a 	ret
    c758:	313fe636 	bltu	r6,r4,c6f4 <__gedf2+0x78>
    c75c:	21bfdb2e 	bgeu	r4,r6,c6cc <__gedf2+0x50>
    c760:	003ff506 	br	c738 <__gedf2+0xbc>

0000c764 <__ledf2>:
    c764:	2810d53a 	srli	r8,r5,20
    c768:	3812d53a 	srli	r9,r7,20
    c76c:	00c00434 	movhi	r3,16
    c770:	4201ffcc 	andi	r8,r8,2047
    c774:	18ffffc4 	addi	r3,r3,-1
    c778:	4281ffd8 	cmpnei	r10,r8,2047
    c77c:	2816d7fa 	srli	r11,r5,31
    c780:	3804d7fa 	srli	r2,r7,31
    c784:	28ca703a 	and	r5,r5,r3
    c788:	38ce703a 	and	r7,r7,r3
    c78c:	48c1ffcc 	andi	r3,r9,2047
    c790:	50000a26 	beq	r10,zero,c7bc <__ledf2+0x58>
    c794:	1a41ffd8 	cmpnei	r9,r3,2047
    c798:	48000c26 	beq	r9,zero,c7cc <__ledf2+0x68>
    c79c:	4000191e 	bne	r8,zero,c804 <__ledf2+0xa0>
    c7a0:	2912b03a 	or	r9,r5,r4
    c7a4:	18000d1e 	bne	r3,zero,c7dc <__ledf2+0x78>
    c7a8:	3994b03a 	or	r10,r7,r6
    c7ac:	50000b1e 	bne	r10,zero,c7dc <__ledf2+0x78>
    c7b0:	48000c1e 	bne	r9,zero,c7e4 <__ledf2+0x80>
    c7b4:	0005883a 	mov	r2,zero
    c7b8:	f800283a 	ret
    c7bc:	2912b03a 	or	r9,r5,r4
    c7c0:	48000c1e 	bne	r9,zero,c7f4 <__ledf2+0x90>
    c7c4:	1a41ffe0 	cmpeqi	r9,r3,2047
    c7c8:	48000e26 	beq	r9,zero,c804 <__ledf2+0xa0>
    c7cc:	3992b03a 	or	r9,r7,r6
    c7d0:	4800081e 	bne	r9,zero,c7f4 <__ledf2+0x90>
    c7d4:	4000021e 	bne	r8,zero,c7e0 <__ledf2+0x7c>
    c7d8:	2912b03a 	or	r9,r5,r4
    c7dc:	48000726 	beq	r9,zero,c7fc <__ledf2+0x98>
    c7e0:	58800c26 	beq	r11,r2,c814 <__ledf2+0xb0>
    c7e4:	00800044 	movi	r2,1
    c7e8:	58000526 	beq	r11,zero,c800 <__ledf2+0x9c>
    c7ec:	00bfffc4 	movi	r2,-1
    c7f0:	f800283a 	ret
    c7f4:	00800084 	movi	r2,2
    c7f8:	f800283a 	ret
    c7fc:	103ffb26 	beq	r2,zero,c7ec <__ledf2+0x88>
    c800:	f800283a 	ret
    c804:	183ff61e 	bne	r3,zero,c7e0 <__ledf2+0x7c>
    c808:	3992b03a 	or	r9,r7,r6
    c80c:	483ff41e 	bne	r9,zero,c7e0 <__ledf2+0x7c>
    c810:	003ff406 	br	c7e4 <__ledf2+0x80>
    c814:	1a00030e 	bge	r3,r8,c824 <__ledf2+0xc0>
    c818:	103ff41e 	bne	r2,zero,c7ec <__ledf2+0x88>
    c81c:	00800044 	movi	r2,1
    c820:	f800283a 	ret
    c824:	40fff516 	blt	r8,r3,c7fc <__ledf2+0x98>
    c828:	397fee36 	bltu	r7,r5,c7e4 <__ledf2+0x80>
    c82c:	29c00426 	beq	r5,r7,c840 <__ledf2+0xdc>
    c830:	29ffe02e 	bgeu	r5,r7,c7b4 <__ledf2+0x50>
    c834:	583fed26 	beq	r11,zero,c7ec <__ledf2+0x88>
    c838:	5805883a 	mov	r2,r11
    c83c:	f800283a 	ret
    c840:	313fe836 	bltu	r6,r4,c7e4 <__ledf2+0x80>
    c844:	21bfdb2e 	bgeu	r4,r6,c7b4 <__ledf2+0x50>
    c848:	003ffa06 	br	c834 <__ledf2+0xd0>

0000c84c <__muldf3>:
    c84c:	2810d53a 	srli	r8,r5,20
    c850:	defff004 	addi	sp,sp,-64
    c854:	00800434 	movhi	r2,16
    c858:	df000e15 	stw	fp,56(sp)
    c85c:	dd000a15 	stw	r20,40(sp)
    c860:	dcc00915 	stw	r19,36(sp)
    c864:	dc400715 	stw	r17,28(sp)
    c868:	10bfffc4 	addi	r2,r2,-1
    c86c:	dfc00f15 	stw	ra,60(sp)
    c870:	ddc00d15 	stw	r23,52(sp)
    c874:	dd800c15 	stw	r22,48(sp)
    c878:	dd400b15 	stw	r21,44(sp)
    c87c:	dc800815 	stw	r18,32(sp)
    c880:	dc000615 	stw	r16,24(sp)
    c884:	4201ffcc 	andi	r8,r8,2047
    c888:	2828d7fa 	srli	r20,r5,31
    c88c:	2023883a 	mov	r17,r4
    c890:	3039883a 	mov	fp,r6
    c894:	28a6703a 	and	r19,r5,r2
    c898:	40013426 	beq	r8,zero,cd6c <__muldf3+0x520>
    c89c:	4081ffe0 	cmpeqi	r2,r8,2047
    c8a0:	1001461e 	bne	r2,zero,cdbc <__muldf3+0x570>
    c8a4:	980a90fa 	slli	r5,r19,3
    c8a8:	2026d77a 	srli	r19,r4,29
    c8ac:	202490fa 	slli	r18,r4,3
    c8b0:	423f0044 	addi	r8,r8,-1023
    c8b4:	9966b03a 	or	r19,r19,r5
    c8b8:	9cc02034 	orhi	r19,r19,128
    c8bc:	002b883a 	mov	r21,zero
    c8c0:	002d883a 	mov	r22,zero
    c8c4:	3804d53a 	srli	r2,r7,20
    c8c8:	00c00434 	movhi	r3,16
    c8cc:	18ffffc4 	addi	r3,r3,-1
    c8d0:	1081ffcc 	andi	r2,r2,2047
    c8d4:	382ed7fa 	srli	r23,r7,31
    c8d8:	38e0703a 	and	r16,r7,r3
    c8dc:	10011026 	beq	r2,zero,cd20 <__muldf3+0x4d4>
    c8e0:	10c1ffe0 	cmpeqi	r3,r2,2047
    c8e4:	18013c1e 	bne	r3,zero,cdd8 <__muldf3+0x58c>
    c8e8:	e008d77a 	srli	r4,fp,29
    c8ec:	802090fa 	slli	r16,r16,3
    c8f0:	e02290fa 	slli	r17,fp,3
    c8f4:	10bf0044 	addi	r2,r2,-1023
    c8f8:	2420b03a 	or	r16,r4,r16
    c8fc:	84002034 	orhi	r16,r16,128
    c900:	4091883a 	add	r8,r8,r2
    c904:	0009883a 	mov	r4,zero
    c908:	a8800428 	cmpgeui	r2,r21,16
    c90c:	a5ccf03a 	xor	r6,r20,r23
    c910:	41c00044 	addi	r7,r8,1
    c914:	1000371e 	bne	r2,zero,c9f4 <__muldf3+0x1a8>
    c918:	a80490ba 	slli	r2,r21,2
    c91c:	00c00074 	movhi	r3,1
    c920:	10c7883a 	add	r3,r2,r3
    c924:	18b24b17 	ldw	r2,-14036(r3)
    c928:	1000683a 	jmp	r2
    c92c:	0000c9f4 	movhi	zero,807
    c930:	0000c970 	cmpltui	zero,zero,805
    c934:	0000c970 	cmpltui	zero,zero,805
    c938:	0000c96c 	andhi	zero,zero,805
    c93c:	0000c97c 	xorhi	zero,zero,805
    c940:	0000c97c 	xorhi	zero,zero,805
    c944:	0000ce4c 	andi	zero,zero,825
    c948:	0000c96c 	andhi	zero,zero,805
    c94c:	0000c97c 	xorhi	zero,zero,805
    c950:	0000ce4c 	andi	zero,zero,825
    c954:	0000c97c 	xorhi	zero,zero,805
    c958:	0000c96c 	andhi	zero,zero,805
    c95c:	0000cdf4 	movhi	zero,823
    c960:	0000cdf4 	movhi	zero,823
    c964:	0000cdf4 	movhi	zero,823
    c968:	0000ced8 	cmpnei	zero,zero,827
    c96c:	b80d883a 	mov	r6,r23
    c970:	8027883a 	mov	r19,r16
    c974:	8825883a 	mov	r18,r17
    c978:	202d883a 	mov	r22,r4
    c97c:	b08000a0 	cmpeqi	r2,r22,2
    c980:	1000181e 	bne	r2,zero,c9e4 <__muldf3+0x198>
    c984:	b08000e0 	cmpeqi	r2,r22,3
    c988:	1001961e 	bne	r2,zero,cfe4 <__muldf3+0x798>
    c98c:	b0800060 	cmpeqi	r2,r22,1
    c990:	1000c926 	beq	r2,zero,ccb8 <__muldf3+0x46c>
    c994:	0007883a 	mov	r3,zero
    c998:	0027883a 	mov	r19,zero
    c99c:	0025883a 	mov	r18,zero
    c9a0:	1806953a 	slli	r3,r3,20
    c9a4:	300c97fa 	slli	r6,r6,31
    c9a8:	9005883a 	mov	r2,r18
    c9ac:	1cc6b03a 	or	r3,r3,r19
    c9b0:	1986b03a 	or	r3,r3,r6
    c9b4:	dfc00f17 	ldw	ra,60(sp)
    c9b8:	df000e17 	ldw	fp,56(sp)
    c9bc:	ddc00d17 	ldw	r23,52(sp)
    c9c0:	dd800c17 	ldw	r22,48(sp)
    c9c4:	dd400b17 	ldw	r21,44(sp)
    c9c8:	dd000a17 	ldw	r20,40(sp)
    c9cc:	dcc00917 	ldw	r19,36(sp)
    c9d0:	dc800817 	ldw	r18,32(sp)
    c9d4:	dc400717 	ldw	r17,28(sp)
    c9d8:	dc000617 	ldw	r16,24(sp)
    c9dc:	dec01004 	addi	sp,sp,64
    c9e0:	f800283a 	ret
    c9e4:	00c1ffc4 	movi	r3,2047
    c9e8:	0027883a 	mov	r19,zero
    c9ec:	0025883a 	mov	r18,zero
    c9f0:	003feb06 	br	c9a0 <__muldf3+0x154>
    c9f4:	9028d43a 	srli	r20,r18,16
    c9f8:	8f3fffcc 	andi	fp,r17,65535
    c9fc:	957fffcc 	andi	r21,r18,65535
    ca00:	a80b883a 	mov	r5,r21
    ca04:	e009883a 	mov	r4,fp
    ca08:	d9800315 	stw	r6,12(sp)
    ca0c:	da000215 	stw	r8,8(sp)
    ca10:	d9c00115 	stw	r7,4(sp)
    ca14:	8822d43a 	srli	r17,r17,16
    ca18:	000b3d00 	call	b3d0 <__mulsi3>
    ca1c:	e00b883a 	mov	r5,fp
    ca20:	a009883a 	mov	r4,r20
    ca24:	102d883a 	mov	r22,r2
    ca28:	000b3d00 	call	b3d0 <__mulsi3>
    ca2c:	880b883a 	mov	r5,r17
    ca30:	a009883a 	mov	r4,r20
    ca34:	102f883a 	mov	r23,r2
    ca38:	000b3d00 	call	b3d0 <__mulsi3>
    ca3c:	a80b883a 	mov	r5,r21
    ca40:	8809883a 	mov	r4,r17
    ca44:	d8800015 	stw	r2,0(sp)
    ca48:	000b3d00 	call	b3d0 <__mulsi3>
    ca4c:	b006d43a 	srli	r3,r22,16
    ca50:	15e5883a 	add	r18,r2,r23
    ca54:	d9c00117 	ldw	r7,4(sp)
    ca58:	1c87883a 	add	r3,r3,r18
    ca5c:	da000217 	ldw	r8,8(sp)
    ca60:	d9800317 	ldw	r6,12(sp)
    ca64:	1dc0042e 	bgeu	r3,r23,ca78 <__muldf3+0x22c>
    ca68:	d9000017 	ldw	r4,0(sp)
    ca6c:	00800074 	movhi	r2,1
    ca70:	2085883a 	add	r2,r4,r2
    ca74:	d8800015 	stw	r2,0(sp)
    ca78:	1804943a 	slli	r2,r3,16
    ca7c:	85ffffcc 	andi	r23,r16,65535
    ca80:	b5bfffcc 	andi	r22,r22,65535
    ca84:	1585883a 	add	r2,r2,r22
    ca88:	a80b883a 	mov	r5,r21
    ca8c:	b809883a 	mov	r4,r23
    ca90:	1824d43a 	srli	r18,r3,16
    ca94:	d9800515 	stw	r6,20(sp)
    ca98:	da000415 	stw	r8,16(sp)
    ca9c:	d9c00315 	stw	r7,12(sp)
    caa0:	8020d43a 	srli	r16,r16,16
    caa4:	d8800115 	stw	r2,4(sp)
    caa8:	000b3d00 	call	b3d0 <__mulsi3>
    caac:	a009883a 	mov	r4,r20
    cab0:	b80b883a 	mov	r5,r23
    cab4:	d8800215 	stw	r2,8(sp)
    cab8:	000b3d00 	call	b3d0 <__mulsi3>
    cabc:	a009883a 	mov	r4,r20
    cac0:	800b883a 	mov	r5,r16
    cac4:	102d883a 	mov	r22,r2
    cac8:	000b3d00 	call	b3d0 <__mulsi3>
    cacc:	a80b883a 	mov	r5,r21
    cad0:	8009883a 	mov	r4,r16
    cad4:	1029883a 	mov	r20,r2
    cad8:	000b3d00 	call	b3d0 <__mulsi3>
    cadc:	da800217 	ldw	r10,8(sp)
    cae0:	1585883a 	add	r2,r2,r22
    cae4:	d9c00317 	ldw	r7,12(sp)
    cae8:	5006d43a 	srli	r3,r10,16
    caec:	da000417 	ldw	r8,16(sp)
    caf0:	d9800517 	ldw	r6,20(sp)
    caf4:	1887883a 	add	r3,r3,r2
    caf8:	1d80022e 	bgeu	r3,r22,cb04 <__muldf3+0x2b8>
    cafc:	00800074 	movhi	r2,1
    cb00:	a0a9883a 	add	r20,r20,r2
    cb04:	1804d43a 	srli	r2,r3,16
    cb08:	1806943a 	slli	r3,r3,16
    cb0c:	982cd43a 	srli	r22,r19,16
    cb10:	9d7fffcc 	andi	r21,r19,65535
    cb14:	e009883a 	mov	r4,fp
    cb18:	54ffffcc 	andi	r19,r10,65535
    cb1c:	a80b883a 	mov	r5,r21
    cb20:	1ce7883a 	add	r19,r3,r19
    cb24:	d9800515 	stw	r6,20(sp)
    cb28:	da000415 	stw	r8,16(sp)
    cb2c:	d9c00315 	stw	r7,12(sp)
    cb30:	1529883a 	add	r20,r2,r20
    cb34:	000b3d00 	call	b3d0 <__mulsi3>
    cb38:	e00b883a 	mov	r5,fp
    cb3c:	b009883a 	mov	r4,r22
    cb40:	d8800215 	stw	r2,8(sp)
    cb44:	000b3d00 	call	b3d0 <__mulsi3>
    cb48:	8809883a 	mov	r4,r17
    cb4c:	b00b883a 	mov	r5,r22
    cb50:	1039883a 	mov	fp,r2
    cb54:	000b3d00 	call	b3d0 <__mulsi3>
    cb58:	8809883a 	mov	r4,r17
    cb5c:	a80b883a 	mov	r5,r21
    cb60:	1023883a 	mov	r17,r2
    cb64:	000b3d00 	call	b3d0 <__mulsi3>
    cb68:	d8c00217 	ldw	r3,8(sp)
    cb6c:	1705883a 	add	r2,r2,fp
    cb70:	d9c00317 	ldw	r7,12(sp)
    cb74:	1808d43a 	srli	r4,r3,16
    cb78:	da000417 	ldw	r8,16(sp)
    cb7c:	d9800517 	ldw	r6,20(sp)
    cb80:	2089883a 	add	r4,r4,r2
    cb84:	94e5883a 	add	r18,r18,r19
    cb88:	2700022e 	bgeu	r4,fp,cb94 <__muldf3+0x348>
    cb8c:	00800074 	movhi	r2,1
    cb90:	88a3883a 	add	r17,r17,r2
    cb94:	2004d43a 	srli	r2,r4,16
    cb98:	2038943a 	slli	fp,r4,16
    cb9c:	18ffffcc 	andi	r3,r3,65535
    cba0:	b809883a 	mov	r4,r23
    cba4:	a80b883a 	mov	r5,r21
    cba8:	d9800415 	stw	r6,16(sp)
    cbac:	da000315 	stw	r8,12(sp)
    cbb0:	d9c00215 	stw	r7,8(sp)
    cbb4:	e0f9883a 	add	fp,fp,r3
    cbb8:	1463883a 	add	r17,r2,r17
    cbbc:	000b3d00 	call	b3d0 <__mulsi3>
    cbc0:	b80b883a 	mov	r5,r23
    cbc4:	b009883a 	mov	r4,r22
    cbc8:	102f883a 	mov	r23,r2
    cbcc:	000b3d00 	call	b3d0 <__mulsi3>
    cbd0:	b00b883a 	mov	r5,r22
    cbd4:	8009883a 	mov	r4,r16
    cbd8:	102d883a 	mov	r22,r2
    cbdc:	000b3d00 	call	b3d0 <__mulsi3>
    cbe0:	a80b883a 	mov	r5,r21
    cbe4:	8009883a 	mov	r4,r16
    cbe8:	1021883a 	mov	r16,r2
    cbec:	000b3d00 	call	b3d0 <__mulsi3>
    cbf0:	b80ad43a 	srli	r5,r23,16
    cbf4:	1585883a 	add	r2,r2,r22
    cbf8:	d9c00217 	ldw	r7,8(sp)
    cbfc:	288b883a 	add	r5,r5,r2
    cc00:	da000317 	ldw	r8,12(sp)
    cc04:	d9800417 	ldw	r6,16(sp)
    cc08:	2d80022e 	bgeu	r5,r22,cc14 <__muldf3+0x3c8>
    cc0c:	00800074 	movhi	r2,1
    cc10:	80a1883a 	add	r16,r16,r2
    cc14:	2806943a 	slli	r3,r5,16
    cc18:	d8800017 	ldw	r2,0(sp)
    cc1c:	bdffffcc 	andi	r23,r23,65535
    cc20:	1dc7883a 	add	r3,r3,r23
    cc24:	90ab883a 	add	r21,r18,r2
    cc28:	acd5803a 	cmpltu	r10,r21,r19
    cc2c:	1d07883a 	add	r3,r3,r20
    cc30:	af2b883a 	add	r21,r21,fp
    cc34:	1a97883a 	add	r11,r3,r10
    cc38:	af09803a 	cmpltu	r4,r21,fp
    cc3c:	2826d43a 	srli	r19,r5,16
    cc40:	5c53883a 	add	r9,r11,r17
    cc44:	4905883a 	add	r2,r9,r4
    cc48:	1d07803a 	cmpltu	r3,r3,r20
    cc4c:	5a95803a 	cmpltu	r10,r11,r10
    cc50:	1a86b03a 	or	r3,r3,r10
    cc54:	1109803a 	cmpltu	r4,r2,r4
    cc58:	4c53803a 	cmpltu	r9,r9,r17
    cc5c:	1ce7883a 	add	r19,r3,r19
    cc60:	4908b03a 	or	r4,r9,r4
    cc64:	a824927a 	slli	r18,r21,9
    cc68:	d8c00117 	ldw	r3,4(sp)
    cc6c:	9927883a 	add	r19,r19,r4
    cc70:	9c27883a 	add	r19,r19,r16
    cc74:	9826927a 	slli	r19,r19,9
    cc78:	a82ad5fa 	srli	r21,r21,23
    cc7c:	100ad5fa 	srli	r5,r2,23
    cc80:	90e4b03a 	or	r18,r18,r3
    cc84:	1004927a 	slli	r2,r2,9
    cc88:	9024c03a 	cmpne	r18,r18,zero
    cc8c:	9564b03a 	or	r18,r18,r21
    cc90:	98c0402c 	andhi	r3,r19,256
    cc94:	90a4b03a 	or	r18,r18,r2
    cc98:	9966b03a 	or	r19,r19,r5
    cc9c:	1800b626 	beq	r3,zero,cf78 <__muldf3+0x72c>
    cca0:	9006d07a 	srli	r3,r18,1
    cca4:	980497fa 	slli	r2,r19,31
    cca8:	9480004c 	andi	r18,r18,1
    ccac:	9826d07a 	srli	r19,r19,1
    ccb0:	1c86b03a 	or	r3,r3,r18
    ccb4:	18a4b03a 	or	r18,r3,r2
    ccb8:	3900ffc4 	addi	r4,r7,1023
    ccbc:	0100690e 	bge	zero,r4,ce64 <__muldf3+0x618>
    ccc0:	908001cc 	andi	r2,r18,7
    ccc4:	10000726 	beq	r2,zero,cce4 <__muldf3+0x498>
    ccc8:	908003cc 	andi	r2,r18,15
    cccc:	10800120 	cmpeqi	r2,r2,4
    ccd0:	1000041e 	bne	r2,zero,cce4 <__muldf3+0x498>
    ccd4:	90800104 	addi	r2,r18,4
    ccd8:	14a5803a 	cmpltu	r18,r2,r18
    ccdc:	9ca7883a 	add	r19,r19,r18
    cce0:	1025883a 	mov	r18,r2
    cce4:	9880402c 	andhi	r2,r19,256
    cce8:	10000426 	beq	r2,zero,ccfc <__muldf3+0x4b0>
    ccec:	00bfc034 	movhi	r2,65280
    ccf0:	10bfffc4 	addi	r2,r2,-1
    ccf4:	98a6703a 	and	r19,r19,r2
    ccf8:	39010004 	addi	r4,r7,1024
    ccfc:	2081ffc8 	cmpgei	r2,r4,2047
    cd00:	103f381e 	bne	r2,zero,c9e4 <__muldf3+0x198>
    cd04:	9804977a 	slli	r2,r19,29
    cd08:	9024d0fa 	srli	r18,r18,3
    cd0c:	9826927a 	slli	r19,r19,9
    cd10:	20c1ffcc 	andi	r3,r4,2047
    cd14:	14a4b03a 	or	r18,r2,r18
    cd18:	9826d33a 	srli	r19,r19,12
    cd1c:	003f2006 	br	c9a0 <__muldf3+0x154>
    cd20:	8722b03a 	or	r17,r16,fp
    cd24:	88004526 	beq	r17,zero,ce3c <__muldf3+0x5f0>
    cd28:	da000015 	stw	r8,0(sp)
    cd2c:	80008626 	beq	r16,zero,cf48 <__muldf3+0x6fc>
    cd30:	8009883a 	mov	r4,r16
    cd34:	0000a600 	call	a60 <__clzsi2>
    cd38:	da000017 	ldw	r8,0(sp)
    cd3c:	117ffd44 	addi	r5,r2,-11
    cd40:	01000744 	movi	r4,29
    cd44:	147ffe04 	addi	r17,r2,-8
    cd48:	2149c83a 	sub	r4,r4,r5
    cd4c:	8460983a 	sll	r16,r16,r17
    cd50:	e108d83a 	srl	r4,fp,r4
    cd54:	e462983a 	sll	r17,fp,r17
    cd58:	2420b03a 	or	r16,r4,r16
    cd5c:	4091c83a 	sub	r8,r8,r2
    cd60:	423f0344 	addi	r8,r8,-1011
    cd64:	0009883a 	mov	r4,zero
    cd68:	003ee706 	br	c908 <__muldf3+0xbc>
    cd6c:	9924b03a 	or	r18,r19,r4
    cd70:	90002d26 	beq	r18,zero,ce28 <__muldf3+0x5dc>
    cd74:	d9c00015 	stw	r7,0(sp)
    cd78:	98006826 	beq	r19,zero,cf1c <__muldf3+0x6d0>
    cd7c:	9809883a 	mov	r4,r19
    cd80:	0000a600 	call	a60 <__clzsi2>
    cd84:	d9c00017 	ldw	r7,0(sp)
    cd88:	113ffd44 	addi	r4,r2,-11
    cd8c:	00c00744 	movi	r3,29
    cd90:	14bffe04 	addi	r18,r2,-8
    cd94:	1907c83a 	sub	r3,r3,r4
    cd98:	9ca6983a 	sll	r19,r19,r18
    cd9c:	88c6d83a 	srl	r3,r17,r3
    cda0:	8ca4983a 	sll	r18,r17,r18
    cda4:	1ce6b03a 	or	r19,r3,r19
    cda8:	023f0344 	movi	r8,-1011
    cdac:	4091c83a 	sub	r8,r8,r2
    cdb0:	002b883a 	mov	r21,zero
    cdb4:	002d883a 	mov	r22,zero
    cdb8:	003ec206 	br	c8c4 <__muldf3+0x78>
    cdbc:	9924b03a 	or	r18,r19,r4
    cdc0:	9000141e 	bne	r18,zero,ce14 <__muldf3+0x5c8>
    cdc4:	0027883a 	mov	r19,zero
    cdc8:	05400204 	movi	r21,8
    cdcc:	0201ffc4 	movi	r8,2047
    cdd0:	05800084 	movi	r22,2
    cdd4:	003ebb06 	br	c8c4 <__muldf3+0x78>
    cdd8:	8722b03a 	or	r17,r16,fp
    cddc:	4201ffc4 	addi	r8,r8,2047
    cde0:	8800081e 	bne	r17,zero,ce04 <__muldf3+0x5b8>
    cde4:	ad400094 	ori	r21,r21,2
    cde8:	0021883a 	mov	r16,zero
    cdec:	01000084 	movi	r4,2
    cdf0:	003ec506 	br	c908 <__muldf3+0xbc>
    cdf4:	b08000a0 	cmpeqi	r2,r22,2
    cdf8:	a00d883a 	mov	r6,r20
    cdfc:	103ee126 	beq	r2,zero,c984 <__muldf3+0x138>
    ce00:	003ef806 	br	c9e4 <__muldf3+0x198>
    ce04:	ad4000d4 	ori	r21,r21,3
    ce08:	e023883a 	mov	r17,fp
    ce0c:	010000c4 	movi	r4,3
    ce10:	003ebd06 	br	c908 <__muldf3+0xbc>
    ce14:	2025883a 	mov	r18,r4
    ce18:	05400304 	movi	r21,12
    ce1c:	0201ffc4 	movi	r8,2047
    ce20:	058000c4 	movi	r22,3
    ce24:	003ea706 	br	c8c4 <__muldf3+0x78>
    ce28:	0027883a 	mov	r19,zero
    ce2c:	05400104 	movi	r21,4
    ce30:	0011883a 	mov	r8,zero
    ce34:	05800044 	movi	r22,1
    ce38:	003ea206 	br	c8c4 <__muldf3+0x78>
    ce3c:	ad400054 	ori	r21,r21,1
    ce40:	0021883a 	mov	r16,zero
    ce44:	01000044 	movi	r4,1
    ce48:	003eaf06 	br	c908 <__muldf3+0xbc>
    ce4c:	04c00434 	movhi	r19,16
    ce50:	000d883a 	mov	r6,zero
    ce54:	9cffffc4 	addi	r19,r19,-1
    ce58:	04bfffc4 	movi	r18,-1
    ce5c:	00c1ffc4 	movi	r3,2047
    ce60:	003ecf06 	br	c9a0 <__muldf3+0x154>
    ce64:	00800044 	movi	r2,1
    ce68:	1105c83a 	sub	r2,r2,r4
    ce6c:	10c00e48 	cmpgei	r3,r2,57
    ce70:	183ec81e 	bne	r3,zero,c994 <__muldf3+0x148>
    ce74:	10c00808 	cmpgei	r3,r2,32
    ce78:	1800411e 	bne	r3,zero,cf80 <__muldf3+0x734>
    ce7c:	39c10784 	addi	r7,r7,1054
    ce80:	99c6983a 	sll	r3,r19,r7
    ce84:	9088d83a 	srl	r4,r18,r2
    ce88:	91ce983a 	sll	r7,r18,r7
    ce8c:	98a6d83a 	srl	r19,r19,r2
    ce90:	1904b03a 	or	r2,r3,r4
    ce94:	3824c03a 	cmpne	r18,r7,zero
    ce98:	1484b03a 	or	r2,r2,r18
    ce9c:	10c001cc 	andi	r3,r2,7
    cea0:	18000726 	beq	r3,zero,cec0 <__muldf3+0x674>
    cea4:	10c003cc 	andi	r3,r2,15
    cea8:	18c00120 	cmpeqi	r3,r3,4
    ceac:	1800041e 	bne	r3,zero,cec0 <__muldf3+0x674>
    ceb0:	10c00104 	addi	r3,r2,4
    ceb4:	1885803a 	cmpltu	r2,r3,r2
    ceb8:	98a7883a 	add	r19,r19,r2
    cebc:	1805883a 	mov	r2,r3
    cec0:	98c0202c 	andhi	r3,r19,128
    cec4:	18004326 	beq	r3,zero,cfd4 <__muldf3+0x788>
    cec8:	00c00044 	movi	r3,1
    cecc:	0027883a 	mov	r19,zero
    ced0:	0025883a 	mov	r18,zero
    ced4:	003eb206 	br	c9a0 <__muldf3+0x154>
    ced8:	9880022c 	andhi	r2,r19,8
    cedc:	10000926 	beq	r2,zero,cf04 <__muldf3+0x6b8>
    cee0:	8080022c 	andhi	r2,r16,8
    cee4:	1000071e 	bne	r2,zero,cf04 <__muldf3+0x6b8>
    cee8:	00800434 	movhi	r2,16
    ceec:	84c00234 	orhi	r19,r16,8
    cef0:	10bfffc4 	addi	r2,r2,-1
    cef4:	98a6703a 	and	r19,r19,r2
    cef8:	b80d883a 	mov	r6,r23
    cefc:	8825883a 	mov	r18,r17
    cf00:	003fd606 	br	ce5c <__muldf3+0x610>
    cf04:	00800434 	movhi	r2,16
    cf08:	9cc00234 	orhi	r19,r19,8
    cf0c:	10bfffc4 	addi	r2,r2,-1
    cf10:	98a6703a 	and	r19,r19,r2
    cf14:	a00d883a 	mov	r6,r20
    cf18:	003fd006 	br	ce5c <__muldf3+0x610>
    cf1c:	0000a600 	call	a60 <__clzsi2>
    cf20:	11000544 	addi	r4,r2,21
    cf24:	21400748 	cmpgei	r5,r4,29
    cf28:	1007883a 	mov	r3,r2
    cf2c:	d9c00017 	ldw	r7,0(sp)
    cf30:	10800804 	addi	r2,r2,32
    cf34:	283f9526 	beq	r5,zero,cd8c <__muldf3+0x540>
    cf38:	18fffe04 	addi	r3,r3,-8
    cf3c:	88e6983a 	sll	r19,r17,r3
    cf40:	0025883a 	mov	r18,zero
    cf44:	003f9806 	br	cda8 <__muldf3+0x55c>
    cf48:	e009883a 	mov	r4,fp
    cf4c:	0000a600 	call	a60 <__clzsi2>
    cf50:	11400544 	addi	r5,r2,21
    cf54:	29000748 	cmpgei	r4,r5,29
    cf58:	1007883a 	mov	r3,r2
    cf5c:	da000017 	ldw	r8,0(sp)
    cf60:	10800804 	addi	r2,r2,32
    cf64:	203f7626 	beq	r4,zero,cd40 <__muldf3+0x4f4>
    cf68:	1c3ffe04 	addi	r16,r3,-8
    cf6c:	e420983a 	sll	r16,fp,r16
    cf70:	0023883a 	mov	r17,zero
    cf74:	003f7906 	br	cd5c <__muldf3+0x510>
    cf78:	400f883a 	mov	r7,r8
    cf7c:	003f4e06 	br	ccb8 <__muldf3+0x46c>
    cf80:	00fff844 	movi	r3,-31
    cf84:	1907c83a 	sub	r3,r3,r4
    cf88:	10800820 	cmpeqi	r2,r2,32
    cf8c:	98c6d83a 	srl	r3,r19,r3
    cf90:	1000031e 	bne	r2,zero,cfa0 <__muldf3+0x754>
    cf94:	39c10f84 	addi	r7,r7,1086
    cf98:	99e6983a 	sll	r19,r19,r7
    cf9c:	94e4b03a 	or	r18,r18,r19
    cfa0:	9024c03a 	cmpne	r18,r18,zero
    cfa4:	90c4b03a 	or	r2,r18,r3
    cfa8:	148001cc 	andi	r18,r2,7
    cfac:	9000051e 	bne	r18,zero,cfc4 <__muldf3+0x778>
    cfb0:	0027883a 	mov	r19,zero
    cfb4:	1004d0fa 	srli	r2,r2,3
    cfb8:	0007883a 	mov	r3,zero
    cfbc:	14a4b03a 	or	r18,r2,r18
    cfc0:	003e7706 	br	c9a0 <__muldf3+0x154>
    cfc4:	10c003cc 	andi	r3,r2,15
    cfc8:	18c00118 	cmpnei	r3,r3,4
    cfcc:	0027883a 	mov	r19,zero
    cfd0:	183fb71e 	bne	r3,zero,ceb0 <__muldf3+0x664>
    cfd4:	9806927a 	slli	r3,r19,9
    cfd8:	9824977a 	slli	r18,r19,29
    cfdc:	1826d33a 	srli	r19,r3,12
    cfe0:	003ff406 	br	cfb4 <__muldf3+0x768>
    cfe4:	00800434 	movhi	r2,16
    cfe8:	9cc00234 	orhi	r19,r19,8
    cfec:	10bfffc4 	addi	r2,r2,-1
    cff0:	98a6703a 	and	r19,r19,r2
    cff4:	003f9906 	br	ce5c <__muldf3+0x610>

0000cff8 <__subdf3>:
    cff8:	00800434 	movhi	r2,16
    cffc:	defffb04 	addi	sp,sp,-20
    d000:	3812d53a 	srli	r9,r7,20
    d004:	10bfffc4 	addi	r2,r2,-1
    d008:	2886703a 	and	r3,r5,r2
    d00c:	dc000015 	stw	r16,0(sp)
    d010:	3884703a 	and	r2,r7,r2
    d014:	2820d53a 	srli	r16,r5,20
    d018:	3014d77a 	srli	r10,r6,29
    d01c:	280ad7fa 	srli	r5,r5,31
    d020:	180690fa 	slli	r3,r3,3
    d024:	2016d77a 	srli	r11,r4,29
    d028:	100490fa 	slli	r2,r2,3
    d02c:	4a41ffcc 	andi	r9,r9,2047
    d030:	dc800215 	stw	r18,8(sp)
    d034:	8401ffcc 	andi	r16,r16,2047
    d038:	dfc00415 	stw	ra,16(sp)
    d03c:	dcc00315 	stw	r19,12(sp)
    d040:	dc400115 	stw	r17,4(sp)
    d044:	4b01ffd8 	cmpnei	r12,r9,2047
    d048:	3810d7fa 	srli	r8,r7,31
    d04c:	2825883a 	mov	r18,r5
    d050:	5084b03a 	or	r2,r10,r2
    d054:	201c90fa 	slli	r14,r4,3
    d058:	301a90fa 	slli	r13,r6,3
    d05c:	29403fcc 	andi	r5,r5,255
    d060:	58ceb03a 	or	r7,r11,r3
    d064:	8255c83a 	sub	r10,r16,r9
    d068:	60006826 	beq	r12,zero,d20c <__subdf3+0x214>
    d06c:	42c0005c 	xori	r11,r8,1
    d070:	2ac07326 	beq	r5,r11,d240 <__subdf3+0x248>
    d074:	0280590e 	bge	zero,r10,d1dc <__subdf3+0x1e4>
    d078:	4800691e 	bne	r9,zero,d220 <__subdf3+0x228>
    d07c:	1346b03a 	or	r3,r2,r13
    d080:	1800e826 	beq	r3,zero,d424 <__subdf3+0x42c>
    d084:	50ffffc4 	addi	r3,r10,-1
    d088:	18018126 	beq	r3,zero,d690 <__subdf3+0x698>
    d08c:	5281ffd8 	cmpnei	r10,r10,2047
    d090:	5000eb26 	beq	r10,zero,d440 <__subdf3+0x448>
    d094:	1815883a 	mov	r10,r3
    d098:	50c00e48 	cmpgei	r3,r10,57
    d09c:	1800651e 	bne	r3,zero,d234 <__subdf3+0x23c>
    d0a0:	50c00808 	cmpgei	r3,r10,32
    d0a4:	18012a1e 	bne	r3,zero,d550 <__subdf3+0x558>
    d0a8:	00c00804 	movi	r3,32
    d0ac:	1a87c83a 	sub	r3,r3,r10
    d0b0:	10e2983a 	sll	r17,r2,r3
    d0b4:	6a88d83a 	srl	r4,r13,r10
    d0b8:	68da983a 	sll	r13,r13,r3
    d0bc:	1284d83a 	srl	r2,r2,r10
    d0c0:	8922b03a 	or	r17,r17,r4
    d0c4:	681ac03a 	cmpne	r13,r13,zero
    d0c8:	8b62b03a 	or	r17,r17,r13
    d0cc:	388fc83a 	sub	r7,r7,r2
    d0d0:	7463c83a 	sub	r17,r14,r17
    d0d4:	7445803a 	cmpltu	r2,r14,r17
    d0d8:	3889c83a 	sub	r4,r7,r2
    d0dc:	2080202c 	andhi	r2,r4,128
    d0e0:	10008e26 	beq	r2,zero,d31c <__subdf3+0x324>
    d0e4:	04c02034 	movhi	r19,128
    d0e8:	9cffffc4 	addi	r19,r19,-1
    d0ec:	24e6703a 	and	r19,r4,r19
    d0f0:	9800a626 	beq	r19,zero,d38c <__subdf3+0x394>
    d0f4:	9809883a 	mov	r4,r19
    d0f8:	0000a600 	call	a60 <__clzsi2>
    d0fc:	117ffe04 	addi	r5,r2,-8
    d100:	01000804 	movi	r4,32
    d104:	2149c83a 	sub	r4,r4,r5
    d108:	8908d83a 	srl	r4,r17,r4
    d10c:	9944983a 	sll	r2,r19,r5
    d110:	8962983a 	sll	r17,r17,r5
    d114:	2084b03a 	or	r2,r4,r2
    d118:	2c00a516 	blt	r5,r16,d3b0 <__subdf3+0x3b8>
    d11c:	2c0bc83a 	sub	r5,r5,r16
    d120:	29000044 	addi	r4,r5,1
    d124:	20c00808 	cmpgei	r3,r4,32
    d128:	1800701e 	bne	r3,zero,d2ec <__subdf3+0x2f4>
    d12c:	00c00804 	movi	r3,32
    d130:	1907c83a 	sub	r3,r3,r4
    d134:	890ad83a 	srl	r5,r17,r4
    d138:	88e2983a 	sll	r17,r17,r3
    d13c:	10c6983a 	sll	r3,r2,r3
    d140:	1108d83a 	srl	r4,r2,r4
    d144:	8822c03a 	cmpne	r17,r17,zero
    d148:	1946b03a 	or	r3,r3,r5
    d14c:	1c62b03a 	or	r17,r3,r17
    d150:	0021883a 	mov	r16,zero
    d154:	888001cc 	andi	r2,r17,7
    d158:	10000726 	beq	r2,zero,d178 <__subdf3+0x180>
    d15c:	888003cc 	andi	r2,r17,15
    d160:	10800120 	cmpeqi	r2,r2,4
    d164:	1000041e 	bne	r2,zero,d178 <__subdf3+0x180>
    d168:	88800104 	addi	r2,r17,4
    d16c:	1463803a 	cmpltu	r17,r2,r17
    d170:	2449883a 	add	r4,r4,r17
    d174:	1023883a 	mov	r17,r2
    d178:	2080202c 	andhi	r2,r4,128
    d17c:	10006926 	beq	r2,zero,d324 <__subdf3+0x32c>
    d180:	84000044 	addi	r16,r16,1
    d184:	8081ffe0 	cmpeqi	r2,r16,2047
    d188:	8401ffcc 	andi	r16,r16,2047
    d18c:	10007b1e 	bne	r2,zero,d37c <__subdf3+0x384>
    d190:	00bfe034 	movhi	r2,65408
    d194:	10bfffc4 	addi	r2,r2,-1
    d198:	2084703a 	and	r2,r4,r2
    d19c:	1006927a 	slli	r3,r2,9
    d1a0:	8822d0fa 	srli	r17,r17,3
    d1a4:	1008977a 	slli	r4,r2,29
    d1a8:	1806d33a 	srli	r3,r3,12
    d1ac:	2444b03a 	or	r2,r4,r17
    d1b0:	8020953a 	slli	r16,r16,20
    d1b4:	902497fa 	slli	r18,r18,31
    d1b8:	80c6b03a 	or	r3,r16,r3
    d1bc:	1c86b03a 	or	r3,r3,r18
    d1c0:	dfc00417 	ldw	ra,16(sp)
    d1c4:	dcc00317 	ldw	r19,12(sp)
    d1c8:	dc800217 	ldw	r18,8(sp)
    d1cc:	dc400117 	ldw	r17,4(sp)
    d1d0:	dc000017 	ldw	r16,0(sp)
    d1d4:	dec00504 	addi	sp,sp,20
    d1d8:	f800283a 	ret
    d1dc:	50002c26 	beq	r10,zero,d290 <__subdf3+0x298>
    d1e0:	4c15c83a 	sub	r10,r9,r16
    d1e4:	5825883a 	mov	r18,r11
    d1e8:	8000b21e 	bne	r16,zero,d4b4 <__subdf3+0x4bc>
    d1ec:	3b86b03a 	or	r3,r7,r14
    d1f0:	18010826 	beq	r3,zero,d614 <__subdf3+0x61c>
    d1f4:	50ffffc4 	addi	r3,r10,-1
    d1f8:	18015a26 	beq	r3,zero,d764 <__subdf3+0x76c>
    d1fc:	5401ffd8 	cmpnei	r16,r10,2047
    d200:	80012926 	beq	r16,zero,d6a8 <__subdf3+0x6b0>
    d204:	1815883a 	mov	r10,r3
    d208:	0000ac06 	br	d4bc <__subdf3+0x4c4>
    d20c:	1346b03a 	or	r3,r2,r13
    d210:	183f9626 	beq	r3,zero,d06c <__subdf3+0x74>
    d214:	42c03fcc 	andi	r11,r8,255
    d218:	2a006a26 	beq	r5,r8,d3c4 <__subdf3+0x3cc>
    d21c:	02bfef0e 	bge	zero,r10,d1dc <__subdf3+0x1e4>
    d220:	80c1ffd8 	cmpnei	r3,r16,2047
    d224:	18008626 	beq	r3,zero,d440 <__subdf3+0x448>
    d228:	50c00e48 	cmpgei	r3,r10,57
    d22c:	10802034 	orhi	r2,r2,128
    d230:	183f9b26 	beq	r3,zero,d0a0 <__subdf3+0xa8>
    d234:	1344b03a 	or	r2,r2,r13
    d238:	1022c03a 	cmpne	r17,r2,zero
    d23c:	003fa406 	br	d0d0 <__subdf3+0xd8>
    d240:	0280600e 	bge	zero,r10,d3c4 <__subdf3+0x3cc>
    d244:	48002126 	beq	r9,zero,d2cc <__subdf3+0x2d4>
    d248:	80c1ffd8 	cmpnei	r3,r16,2047
    d24c:	18011d26 	beq	r3,zero,d6c4 <__subdf3+0x6cc>
    d250:	10802034 	orhi	r2,r2,128
    d254:	50c00e48 	cmpgei	r3,r10,57
    d258:	18003e1e 	bne	r3,zero,d354 <__subdf3+0x35c>
    d25c:	50c00808 	cmpgei	r3,r10,32
    d260:	1800d526 	beq	r3,zero,d5b8 <__subdf3+0x5c0>
    d264:	547ff804 	addi	r17,r10,-32
    d268:	51000820 	cmpeqi	r4,r10,32
    d26c:	1446d83a 	srl	r3,r2,r17
    d270:	2000041e 	bne	r4,zero,d284 <__subdf3+0x28c>
    d274:	01001004 	movi	r4,64
    d278:	2295c83a 	sub	r10,r4,r10
    d27c:	1284983a 	sll	r2,r2,r10
    d280:	689ab03a 	or	r13,r13,r2
    d284:	6822c03a 	cmpne	r17,r13,zero
    d288:	88e2b03a 	or	r17,r17,r3
    d28c:	00003306 	br	d35c <__subdf3+0x364>
    d290:	80c00044 	addi	r3,r16,1
    d294:	18c1ff8c 	andi	r3,r3,2046
    d298:	1800971e 	bne	r3,zero,d4f8 <__subdf3+0x500>
    d29c:	1350b03a 	or	r8,r2,r13
    d2a0:	3b86b03a 	or	r3,r7,r14
    d2a4:	8000e21e 	bne	r16,zero,d630 <__subdf3+0x638>
    d2a8:	18012526 	beq	r3,zero,d740 <__subdf3+0x748>
    d2ac:	4001411e 	bne	r8,zero,d7b4 <__subdf3+0x7bc>
    d2b0:	3806977a 	slli	r3,r7,29
    d2b4:	00880034 	movhi	r2,8192
    d2b8:	10bfffc4 	addi	r2,r2,-1
    d2bc:	208a703a 	and	r5,r4,r2
    d2c0:	3810d0fa 	srli	r8,r7,3
    d2c4:	28c4b03a 	or	r2,r5,r3
    d2c8:	00001d06 	br	d340 <__subdf3+0x348>
    d2cc:	1346b03a 	or	r3,r2,r13
    d2d0:	18005426 	beq	r3,zero,d424 <__subdf3+0x42c>
    d2d4:	50ffffc4 	addi	r3,r10,-1
    d2d8:	1800e526 	beq	r3,zero,d670 <__subdf3+0x678>
    d2dc:	5281ffd8 	cmpnei	r10,r10,2047
    d2e0:	50012d26 	beq	r10,zero,d798 <__subdf3+0x7a0>
    d2e4:	1815883a 	mov	r10,r3
    d2e8:	003fda06 	br	d254 <__subdf3+0x25c>
    d2ec:	297ff844 	addi	r5,r5,-31
    d2f0:	20c00820 	cmpeqi	r3,r4,32
    d2f4:	114ad83a 	srl	r5,r2,r5
    d2f8:	1800041e 	bne	r3,zero,d30c <__subdf3+0x314>
    d2fc:	00c01004 	movi	r3,64
    d300:	1909c83a 	sub	r4,r3,r4
    d304:	1104983a 	sll	r2,r2,r4
    d308:	88a2b03a 	or	r17,r17,r2
    d30c:	8822c03a 	cmpne	r17,r17,zero
    d310:	8962b03a 	or	r17,r17,r5
    d314:	0009883a 	mov	r4,zero
    d318:	0021883a 	mov	r16,zero
    d31c:	888001cc 	andi	r2,r17,7
    d320:	103f8e1e 	bne	r2,zero,d15c <__subdf3+0x164>
    d324:	8822d0fa 	srli	r17,r17,3
    d328:	2004977a 	slli	r2,r4,29
    d32c:	2010d0fa 	srli	r8,r4,3
    d330:	8015883a 	mov	r10,r16
    d334:	8884b03a 	or	r2,r17,r2
    d338:	50c1ffe0 	cmpeqi	r3,r10,2047
    d33c:	18016f1e 	bne	r3,zero,d8fc <__subdf3+0x904>
    d340:	00c00434 	movhi	r3,16
    d344:	18ffffc4 	addi	r3,r3,-1
    d348:	40c6703a 	and	r3,r8,r3
    d34c:	5401ffcc 	andi	r16,r10,2047
    d350:	003f9706 	br	d1b0 <__subdf3+0x1b8>
    d354:	1344b03a 	or	r2,r2,r13
    d358:	1022c03a 	cmpne	r17,r2,zero
    d35c:	8ba3883a 	add	r17,r17,r14
    d360:	8b85803a 	cmpltu	r2,r17,r14
    d364:	11c9883a 	add	r4,r2,r7
    d368:	2080202c 	andhi	r2,r4,128
    d36c:	103feb26 	beq	r2,zero,d31c <__subdf3+0x324>
    d370:	84000044 	addi	r16,r16,1
    d374:	8081ffe0 	cmpeqi	r2,r16,2047
    d378:	10006b26 	beq	r2,zero,d528 <__subdf3+0x530>
    d37c:	0401ffc4 	movi	r16,2047
    d380:	0007883a 	mov	r3,zero
    d384:	0005883a 	mov	r2,zero
    d388:	003f8906 	br	d1b0 <__subdf3+0x1b8>
    d38c:	8809883a 	mov	r4,r17
    d390:	0000a600 	call	a60 <__clzsi2>
    d394:	11400604 	addi	r5,r2,24
    d398:	28c00808 	cmpgei	r3,r5,32
    d39c:	183f5826 	beq	r3,zero,d100 <__subdf3+0x108>
    d3a0:	10bffe04 	addi	r2,r2,-8
    d3a4:	8884983a 	sll	r2,r17,r2
    d3a8:	0023883a 	mov	r17,zero
    d3ac:	2c3f5b0e 	bge	r5,r16,d11c <__subdf3+0x124>
    d3b0:	013fe034 	movhi	r4,65408
    d3b4:	213fffc4 	addi	r4,r4,-1
    d3b8:	8161c83a 	sub	r16,r16,r5
    d3bc:	1108703a 	and	r4,r2,r4
    d3c0:	003f6406 	br	d154 <__subdf3+0x15c>
    d3c4:	50002c26 	beq	r10,zero,d478 <__subdf3+0x480>
    d3c8:	4c15c83a 	sub	r10,r9,r16
    d3cc:	80007226 	beq	r16,zero,d598 <__subdf3+0x5a0>
    d3d0:	6000ea26 	beq	r12,zero,d77c <__subdf3+0x784>
    d3d4:	39c02034 	orhi	r7,r7,128
    d3d8:	50c00e48 	cmpgei	r3,r10,57
    d3dc:	1800c01e 	bne	r3,zero,d6e0 <__subdf3+0x6e8>
    d3e0:	50c00808 	cmpgei	r3,r10,32
    d3e4:	1801261e 	bne	r3,zero,d880 <__subdf3+0x888>
    d3e8:	00c00804 	movi	r3,32
    d3ec:	1a87c83a 	sub	r3,r3,r10
    d3f0:	38e2983a 	sll	r17,r7,r3
    d3f4:	7288d83a 	srl	r4,r14,r10
    d3f8:	70c6983a 	sll	r3,r14,r3
    d3fc:	3a8ed83a 	srl	r7,r7,r10
    d400:	8922b03a 	or	r17,r17,r4
    d404:	1806c03a 	cmpne	r3,r3,zero
    d408:	88e2b03a 	or	r17,r17,r3
    d40c:	11c5883a 	add	r2,r2,r7
    d410:	8b63883a 	add	r17,r17,r13
    d414:	8b49803a 	cmpltu	r4,r17,r13
    d418:	2089883a 	add	r4,r4,r2
    d41c:	4821883a 	mov	r16,r9
    d420:	003fd106 	br	d368 <__subdf3+0x370>
    d424:	380c977a 	slli	r6,r7,29
    d428:	00880034 	movhi	r2,8192
    d42c:	10bfffc4 	addi	r2,r2,-1
    d430:	2088703a 	and	r4,r4,r2
    d434:	3810d0fa 	srli	r8,r7,3
    d438:	2184b03a 	or	r2,r4,r6
    d43c:	003fbe06 	br	d338 <__subdf3+0x340>
    d440:	380c977a 	slli	r6,r7,29
    d444:	00880034 	movhi	r2,8192
    d448:	10bfffc4 	addi	r2,r2,-1
    d44c:	380ed0fa 	srli	r7,r7,3
    d450:	2084703a 	and	r2,r4,r2
    d454:	1184b03a 	or	r2,r2,r6
    d458:	3886b03a 	or	r3,r7,r2
    d45c:	18012326 	beq	r3,zero,d8ec <__subdf3+0x8f4>
    d460:	01000434 	movhi	r4,16
    d464:	38c00234 	orhi	r3,r7,8
    d468:	213fffc4 	addi	r4,r4,-1
    d46c:	1906703a 	and	r3,r3,r4
    d470:	0401ffc4 	movi	r16,2047
    d474:	003f4e06 	br	d1b0 <__subdf3+0x1b8>
    d478:	80c00044 	addi	r3,r16,1
    d47c:	1941ff8c 	andi	r5,r3,2046
    d480:	2800581e 	bne	r5,zero,d5e4 <__subdf3+0x5ec>
    d484:	3b86b03a 	or	r3,r7,r14
    d488:	8000a31e 	bne	r16,zero,d718 <__subdf3+0x720>
    d48c:	1800ea26 	beq	r3,zero,d838 <__subdf3+0x840>
    d490:	1346b03a 	or	r3,r2,r13
    d494:	1800ef1e 	bne	r3,zero,d854 <__subdf3+0x85c>
    d498:	380a977a 	slli	r5,r7,29
    d49c:	00880034 	movhi	r2,8192
    d4a0:	10bfffc4 	addi	r2,r2,-1
    d4a4:	2084703a 	and	r2,r4,r2
    d4a8:	3810d0fa 	srli	r8,r7,3
    d4ac:	2884b03a 	or	r2,r5,r2
    d4b0:	003fa306 	br	d340 <__subdf3+0x348>
    d4b4:	60007c26 	beq	r12,zero,d6a8 <__subdf3+0x6b0>
    d4b8:	39c02034 	orhi	r7,r7,128
    d4bc:	50c00e48 	cmpgei	r3,r10,57
    d4c0:	18002e1e 	bne	r3,zero,d57c <__subdf3+0x584>
    d4c4:	50c00808 	cmpgei	r3,r10,32
    d4c8:	1800881e 	bne	r3,zero,d6ec <__subdf3+0x6f4>
    d4cc:	00c00804 	movi	r3,32
    d4d0:	1a87c83a 	sub	r3,r3,r10
    d4d4:	7288d83a 	srl	r4,r14,r10
    d4d8:	38e2983a 	sll	r17,r7,r3
    d4dc:	70dc983a 	sll	r14,r14,r3
    d4e0:	3aa0d83a 	srl	r16,r7,r10
    d4e4:	8922b03a 	or	r17,r17,r4
    d4e8:	701cc03a 	cmpne	r14,r14,zero
    d4ec:	8ba2b03a 	or	r17,r17,r14
    d4f0:	1405c83a 	sub	r2,r2,r16
    d4f4:	00002306 	br	d584 <__subdf3+0x58c>
    d4f8:	7363c83a 	sub	r17,r14,r13
    d4fc:	3889c83a 	sub	r4,r7,r2
    d500:	7467803a 	cmpltu	r19,r14,r17
    d504:	24e7c83a 	sub	r19,r4,r19
    d508:	98c0202c 	andhi	r3,r19,128
    d50c:	1800521e 	bne	r3,zero,d658 <__subdf3+0x660>
    d510:	8cc4b03a 	or	r2,r17,r19
    d514:	103ef61e 	bne	r2,zero,d0f0 <__subdf3+0xf8>
    d518:	0011883a 	mov	r8,zero
    d51c:	0025883a 	mov	r18,zero
    d520:	003f8706 	br	d340 <__subdf3+0x348>
    d524:	04000084 	movi	r16,2
    d528:	00bfe034 	movhi	r2,65408
    d52c:	10bfffc4 	addi	r2,r2,-1
    d530:	8806d07a 	srli	r3,r17,1
    d534:	2084703a 	and	r2,r4,r2
    d538:	100a97fa 	slli	r5,r2,31
    d53c:	8c40004c 	andi	r17,r17,1
    d540:	1c62b03a 	or	r17,r3,r17
    d544:	1008d07a 	srli	r4,r2,1
    d548:	2c62b03a 	or	r17,r5,r17
    d54c:	003f0106 	br	d154 <__subdf3+0x15c>
    d550:	547ff804 	addi	r17,r10,-32
    d554:	51000820 	cmpeqi	r4,r10,32
    d558:	1446d83a 	srl	r3,r2,r17
    d55c:	2000041e 	bne	r4,zero,d570 <__subdf3+0x578>
    d560:	01001004 	movi	r4,64
    d564:	2295c83a 	sub	r10,r4,r10
    d568:	1284983a 	sll	r2,r2,r10
    d56c:	689ab03a 	or	r13,r13,r2
    d570:	6822c03a 	cmpne	r17,r13,zero
    d574:	88e2b03a 	or	r17,r17,r3
    d578:	003ed506 	br	d0d0 <__subdf3+0xd8>
    d57c:	3ba2b03a 	or	r17,r7,r14
    d580:	8822c03a 	cmpne	r17,r17,zero
    d584:	6c63c83a 	sub	r17,r13,r17
    d588:	6c49803a 	cmpltu	r4,r13,r17
    d58c:	1109c83a 	sub	r4,r2,r4
    d590:	4821883a 	mov	r16,r9
    d594:	003ed106 	br	d0dc <__subdf3+0xe4>
    d598:	3b86b03a 	or	r3,r7,r14
    d59c:	18001d26 	beq	r3,zero,d614 <__subdf3+0x61c>
    d5a0:	50ffffc4 	addi	r3,r10,-1
    d5a4:	1800c126 	beq	r3,zero,d8ac <__subdf3+0x8b4>
    d5a8:	5281ffd8 	cmpnei	r10,r10,2047
    d5ac:	50003e26 	beq	r10,zero,d6a8 <__subdf3+0x6b0>
    d5b0:	1815883a 	mov	r10,r3
    d5b4:	003f8806 	br	d3d8 <__subdf3+0x3e0>
    d5b8:	00c00804 	movi	r3,32
    d5bc:	1a87c83a 	sub	r3,r3,r10
    d5c0:	10e2983a 	sll	r17,r2,r3
    d5c4:	6a88d83a 	srl	r4,r13,r10
    d5c8:	68da983a 	sll	r13,r13,r3
    d5cc:	1284d83a 	srl	r2,r2,r10
    d5d0:	8922b03a 	or	r17,r17,r4
    d5d4:	681ac03a 	cmpne	r13,r13,zero
    d5d8:	8b62b03a 	or	r17,r17,r13
    d5dc:	388f883a 	add	r7,r7,r2
    d5e0:	003f5e06 	br	d35c <__subdf3+0x364>
    d5e4:	1901ffe0 	cmpeqi	r4,r3,2047
    d5e8:	203f641e 	bne	r4,zero,d37c <__subdf3+0x384>
    d5ec:	735b883a 	add	r13,r14,r13
    d5f0:	6b89803a 	cmpltu	r4,r13,r14
    d5f4:	3885883a 	add	r2,r7,r2
    d5f8:	1105883a 	add	r2,r2,r4
    d5fc:	102297fa 	slli	r17,r2,31
    d600:	681ad07a 	srli	r13,r13,1
    d604:	1008d07a 	srli	r4,r2,1
    d608:	1821883a 	mov	r16,r3
    d60c:	8b62b03a 	or	r17,r17,r13
    d610:	003f4206 	br	d31c <__subdf3+0x324>
    d614:	1008977a 	slli	r4,r2,29
    d618:	00c80034 	movhi	r3,8192
    d61c:	18ffffc4 	addi	r3,r3,-1
    d620:	30cc703a 	and	r6,r6,r3
    d624:	1010d0fa 	srli	r8,r2,3
    d628:	3104b03a 	or	r2,r6,r4
    d62c:	003f4206 	br	d338 <__subdf3+0x340>
    d630:	18006c1e 	bne	r3,zero,d7e4 <__subdf3+0x7ec>
    d634:	4000a826 	beq	r8,zero,d8d8 <__subdf3+0x8e0>
    d638:	1008977a 	slli	r4,r2,29
    d63c:	00c80034 	movhi	r3,8192
    d640:	18ffffc4 	addi	r3,r3,-1
    d644:	30c6703a 	and	r3,r6,r3
    d648:	100ed0fa 	srli	r7,r2,3
    d64c:	5825883a 	mov	r18,r11
    d650:	1904b03a 	or	r2,r3,r4
    d654:	003f8006 	br	d458 <__subdf3+0x460>
    d658:	6ba3c83a 	sub	r17,r13,r14
    d65c:	11c5c83a 	sub	r2,r2,r7
    d660:	6c49803a 	cmpltu	r4,r13,r17
    d664:	1127c83a 	sub	r19,r2,r4
    d668:	5825883a 	mov	r18,r11
    d66c:	003ea006 	br	d0f0 <__subdf3+0xf8>
    d670:	7363883a 	add	r17,r14,r13
    d674:	3885883a 	add	r2,r7,r2
    d678:	8b9d803a 	cmpltu	r14,r17,r14
    d67c:	1389883a 	add	r4,r2,r14
    d680:	2080202c 	andhi	r2,r4,128
    d684:	103fa71e 	bne	r2,zero,d524 <__subdf3+0x52c>
    d688:	04000044 	movi	r16,1
    d68c:	003f2306 	br	d31c <__subdf3+0x324>
    d690:	7363c83a 	sub	r17,r14,r13
    d694:	3885c83a 	sub	r2,r7,r2
    d698:	745d803a 	cmpltu	r14,r14,r17
    d69c:	1389c83a 	sub	r4,r2,r14
    d6a0:	04000044 	movi	r16,1
    d6a4:	003e8d06 	br	d0dc <__subdf3+0xe4>
    d6a8:	1008977a 	slli	r4,r2,29
    d6ac:	00c80034 	movhi	r3,8192
    d6b0:	18ffffc4 	addi	r3,r3,-1
    d6b4:	30c6703a 	and	r3,r6,r3
    d6b8:	100ed0fa 	srli	r7,r2,3
    d6bc:	1904b03a 	or	r2,r3,r4
    d6c0:	003f6506 	br	d458 <__subdf3+0x460>
    d6c4:	380c977a 	slli	r6,r7,29
    d6c8:	00880034 	movhi	r2,8192
    d6cc:	10bfffc4 	addi	r2,r2,-1
    d6d0:	2088703a 	and	r4,r4,r2
    d6d4:	380ed0fa 	srli	r7,r7,3
    d6d8:	2184b03a 	or	r2,r4,r6
    d6dc:	003f5e06 	br	d458 <__subdf3+0x460>
    d6e0:	3ba2b03a 	or	r17,r7,r14
    d6e4:	8822c03a 	cmpne	r17,r17,zero
    d6e8:	003f4906 	br	d410 <__subdf3+0x418>
    d6ec:	547ff804 	addi	r17,r10,-32
    d6f0:	51000820 	cmpeqi	r4,r10,32
    d6f4:	3c46d83a 	srl	r3,r7,r17
    d6f8:	2000041e 	bne	r4,zero,d70c <__subdf3+0x714>
    d6fc:	01001004 	movi	r4,64
    d700:	2295c83a 	sub	r10,r4,r10
    d704:	3a8e983a 	sll	r7,r7,r10
    d708:	71dcb03a 	or	r14,r14,r7
    d70c:	7022c03a 	cmpne	r17,r14,zero
    d710:	88e2b03a 	or	r17,r17,r3
    d714:	003f9b06 	br	d584 <__subdf3+0x58c>
    d718:	18001826 	beq	r3,zero,d77c <__subdf3+0x784>
    d71c:	135ab03a 	or	r13,r2,r13
    d720:	380a977a 	slli	r5,r7,29
    d724:	380ed0fa 	srli	r7,r7,3
    d728:	6800311e 	bne	r13,zero,d7f0 <__subdf3+0x7f8>
    d72c:	00880034 	movhi	r2,8192
    d730:	10bfffc4 	addi	r2,r2,-1
    d734:	2084703a 	and	r2,r4,r2
    d738:	1144b03a 	or	r2,r2,r5
    d73c:	003f4606 	br	d458 <__subdf3+0x460>
    d740:	40005f26 	beq	r8,zero,d8c0 <__subdf3+0x8c8>
    d744:	1008977a 	slli	r4,r2,29
    d748:	00c80034 	movhi	r3,8192
    d74c:	18ffffc4 	addi	r3,r3,-1
    d750:	30cc703a 	and	r6,r6,r3
    d754:	1010d0fa 	srli	r8,r2,3
    d758:	5825883a 	mov	r18,r11
    d75c:	3104b03a 	or	r2,r6,r4
    d760:	003ef706 	br	d340 <__subdf3+0x348>
    d764:	6ba3c83a 	sub	r17,r13,r14
    d768:	11c5c83a 	sub	r2,r2,r7
    d76c:	6c5b803a 	cmpltu	r13,r13,r17
    d770:	1349c83a 	sub	r4,r2,r13
    d774:	04000044 	movi	r16,1
    d778:	003e5806 	br	d0dc <__subdf3+0xe4>
    d77c:	1006977a 	slli	r3,r2,29
    d780:	01080034 	movhi	r4,8192
    d784:	213fffc4 	addi	r4,r4,-1
    d788:	3108703a 	and	r4,r6,r4
    d78c:	100ed0fa 	srli	r7,r2,3
    d790:	1904b03a 	or	r2,r3,r4
    d794:	003f3006 	br	d458 <__subdf3+0x460>
    d798:	3806977a 	slli	r3,r7,29
    d79c:	00880034 	movhi	r2,8192
    d7a0:	10bfffc4 	addi	r2,r2,-1
    d7a4:	2084703a 	and	r2,r4,r2
    d7a8:	380ed0fa 	srli	r7,r7,3
    d7ac:	10c4b03a 	or	r2,r2,r3
    d7b0:	003f2906 	br	d458 <__subdf3+0x460>
    d7b4:	7363c83a 	sub	r17,r14,r13
    d7b8:	7447803a 	cmpltu	r3,r14,r17
    d7bc:	3889c83a 	sub	r4,r7,r2
    d7c0:	20c9c83a 	sub	r4,r4,r3
    d7c4:	20c0202c 	andhi	r3,r4,128
    d7c8:	18004026 	beq	r3,zero,d8cc <__subdf3+0x8d4>
    d7cc:	6ba3c83a 	sub	r17,r13,r14
    d7d0:	11c5c83a 	sub	r2,r2,r7
    d7d4:	6c5b803a 	cmpltu	r13,r13,r17
    d7d8:	1349c83a 	sub	r4,r2,r13
    d7dc:	5825883a 	mov	r18,r11
    d7e0:	003e5c06 	br	d154 <__subdf3+0x15c>
    d7e4:	380a977a 	slli	r5,r7,29
    d7e8:	380ed0fa 	srli	r7,r7,3
    d7ec:	403fcf26 	beq	r8,zero,d72c <__subdf3+0x734>
    d7f0:	00c80034 	movhi	r3,8192
    d7f4:	18ffffc4 	addi	r3,r3,-1
    d7f8:	20c8703a 	and	r4,r4,r3
    d7fc:	3a00022c 	andhi	r8,r7,8
    d800:	2148b03a 	or	r4,r4,r5
    d804:	40000826 	beq	r8,zero,d828 <__subdf3+0x830>
    d808:	100ad0fa 	srli	r5,r2,3
    d80c:	2a00022c 	andhi	r8,r5,8
    d810:	4000051e 	bne	r8,zero,d828 <__subdf3+0x830>
    d814:	1004977a 	slli	r2,r2,29
    d818:	30c6703a 	and	r3,r6,r3
    d81c:	5825883a 	mov	r18,r11
    d820:	1888b03a 	or	r4,r3,r2
    d824:	280f883a 	mov	r7,r5
    d828:	380e90fa 	slli	r7,r7,3
    d82c:	2005883a 	mov	r2,r4
    d830:	380ed0fa 	srli	r7,r7,3
    d834:	003f0806 	br	d458 <__subdf3+0x460>
    d838:	100a977a 	slli	r5,r2,29
    d83c:	00c80034 	movhi	r3,8192
    d840:	18ffffc4 	addi	r3,r3,-1
    d844:	30c6703a 	and	r3,r6,r3
    d848:	1010d0fa 	srli	r8,r2,3
    d84c:	28c4b03a 	or	r2,r5,r3
    d850:	003ebb06 	br	d340 <__subdf3+0x348>
    d854:	7363883a 	add	r17,r14,r13
    d858:	3885883a 	add	r2,r7,r2
    d85c:	8b9d803a 	cmpltu	r14,r17,r14
    d860:	1389883a 	add	r4,r2,r14
    d864:	2080202c 	andhi	r2,r4,128
    d868:	103eac26 	beq	r2,zero,d31c <__subdf3+0x324>
    d86c:	00bfe034 	movhi	r2,65408
    d870:	10bfffc4 	addi	r2,r2,-1
    d874:	2088703a 	and	r4,r4,r2
    d878:	04000044 	movi	r16,1
    d87c:	003ea706 	br	d31c <__subdf3+0x324>
    d880:	50fff804 	addi	r3,r10,-32
    d884:	51000820 	cmpeqi	r4,r10,32
    d888:	38c6d83a 	srl	r3,r7,r3
    d88c:	2000041e 	bne	r4,zero,d8a0 <__subdf3+0x8a8>
    d890:	01001004 	movi	r4,64
    d894:	2295c83a 	sub	r10,r4,r10
    d898:	3a8e983a 	sll	r7,r7,r10
    d89c:	71dcb03a 	or	r14,r14,r7
    d8a0:	7022c03a 	cmpne	r17,r14,zero
    d8a4:	88e2b03a 	or	r17,r17,r3
    d8a8:	003ed906 	br	d410 <__subdf3+0x418>
    d8ac:	7363883a 	add	r17,r14,r13
    d8b0:	3885883a 	add	r2,r7,r2
    d8b4:	8b5b803a 	cmpltu	r13,r17,r13
    d8b8:	1349883a 	add	r4,r2,r13
    d8bc:	003f7006 	br	d680 <__subdf3+0x688>
    d8c0:	0005883a 	mov	r2,zero
    d8c4:	0025883a 	mov	r18,zero
    d8c8:	003e9d06 	br	d340 <__subdf3+0x348>
    d8cc:	8904b03a 	or	r2,r17,r4
    d8d0:	103f1126 	beq	r2,zero,d518 <__subdf3+0x520>
    d8d4:	003e9106 	br	d31c <__subdf3+0x324>
    d8d8:	01c00434 	movhi	r7,16
    d8dc:	00bfffc4 	movi	r2,-1
    d8e0:	39ffffc4 	addi	r7,r7,-1
    d8e4:	0025883a 	mov	r18,zero
    d8e8:	003edd06 	br	d460 <__subdf3+0x468>
    d8ec:	0005883a 	mov	r2,zero
    d8f0:	0401ffc4 	movi	r16,2047
    d8f4:	0007883a 	mov	r3,zero
    d8f8:	003e2d06 	br	d1b0 <__subdf3+0x1b8>
    d8fc:	400f883a 	mov	r7,r8
    d900:	003ed506 	br	d458 <__subdf3+0x460>

0000d904 <__unorddf2>:
    d904:	2806d53a 	srli	r3,r5,20
    d908:	3810d53a 	srli	r8,r7,20
    d90c:	02400434 	movhi	r9,16
    d910:	18c1ffcc 	andi	r3,r3,2047
    d914:	4a7fffc4 	addi	r9,r9,-1
    d918:	18c1ffd8 	cmpnei	r3,r3,2047
    d91c:	2a4a703a 	and	r5,r5,r9
    d920:	3a4e703a 	and	r7,r7,r9
    d924:	4201ffcc 	andi	r8,r8,2047
    d928:	18000426 	beq	r3,zero,d93c <__unorddf2+0x38>
    d92c:	4201ffd8 	cmpnei	r8,r8,2047
    d930:	40000626 	beq	r8,zero,d94c <__unorddf2+0x48>
    d934:	0005883a 	mov	r2,zero
    d938:	f800283a 	ret
    d93c:	290ab03a 	or	r5,r5,r4
    d940:	283ffa26 	beq	r5,zero,d92c <__unorddf2+0x28>
    d944:	00800044 	movi	r2,1
    d948:	f800283a 	ret
    d94c:	398eb03a 	or	r7,r7,r6
    d950:	3804c03a 	cmpne	r2,r7,zero
    d954:	f800283a 	ret

0000d958 <__fixdfsi>:
    d958:	2806d53a 	srli	r3,r5,20
    d95c:	01800434 	movhi	r6,16
    d960:	31bfffc4 	addi	r6,r6,-1
    d964:	18c1ffcc 	andi	r3,r3,2047
    d968:	19c0ffd0 	cmplti	r7,r3,1023
    d96c:	2810d7fa 	srli	r8,r5,31
    d970:	298a703a 	and	r5,r5,r6
    d974:	3800061e 	bne	r7,zero,d990 <__fixdfsi+0x38>
    d978:	18810790 	cmplti	r2,r3,1054
    d97c:	1000061e 	bne	r2,zero,d998 <__fixdfsi+0x40>
    d980:	00a00034 	movhi	r2,32768
    d984:	10bfffc4 	addi	r2,r2,-1
    d988:	4085883a 	add	r2,r8,r2
    d98c:	f800283a 	ret
    d990:	0005883a 	mov	r2,zero
    d994:	f800283a 	ret
    d998:	01810cc4 	movi	r6,1075
    d99c:	30cdc83a 	sub	r6,r6,r3
    d9a0:	30800808 	cmpgei	r2,r6,32
    d9a4:	29400434 	orhi	r5,r5,16
    d9a8:	1000071e 	bne	r2,zero,d9c8 <__fixdfsi+0x70>
    d9ac:	18befb44 	addi	r2,r3,-1043
    d9b0:	2884983a 	sll	r2,r5,r2
    d9b4:	2188d83a 	srl	r4,r4,r6
    d9b8:	1104b03a 	or	r2,r2,r4
    d9bc:	403ff526 	beq	r8,zero,d994 <__fixdfsi+0x3c>
    d9c0:	0085c83a 	sub	r2,zero,r2
    d9c4:	f800283a 	ret
    d9c8:	008104c4 	movi	r2,1043
    d9cc:	10c5c83a 	sub	r2,r2,r3
    d9d0:	2884d83a 	srl	r2,r5,r2
    d9d4:	003ff906 	br	d9bc <__fixdfsi+0x64>

0000d9d8 <__floatsidf>:
    d9d8:	defffd04 	addi	sp,sp,-12
    d9dc:	dfc00215 	stw	ra,8(sp)
    d9e0:	dc400115 	stw	r17,4(sp)
    d9e4:	dc000015 	stw	r16,0(sp)
    d9e8:	20001326 	beq	r4,zero,da38 <__floatsidf+0x60>
    d9ec:	2022d7fa 	srli	r17,r4,31
    d9f0:	2021883a 	mov	r16,r4
    d9f4:	20002416 	blt	r4,zero,da88 <__floatsidf+0xb0>
    d9f8:	8009883a 	mov	r4,r16
    d9fc:	0000a600 	call	a60 <__clzsi2>
    da00:	01010784 	movi	r4,1054
    da04:	2089c83a 	sub	r4,r4,r2
    da08:	114002c8 	cmpgei	r5,r2,11
    da0c:	20c1ffcc 	andi	r3,r4,2047
    da10:	2800161e 	bne	r5,zero,da6c <__floatsidf+0x94>
    da14:	010002c4 	movi	r4,11
    da18:	2089c83a 	sub	r4,r4,r2
    da1c:	810ad83a 	srl	r5,r16,r4
    da20:	01000434 	movhi	r4,16
    da24:	10800544 	addi	r2,r2,21
    da28:	213fffc4 	addi	r4,r4,-1
    da2c:	8084983a 	sll	r2,r16,r2
    da30:	290a703a 	and	r5,r5,r4
    da34:	00000406 	br	da48 <__floatsidf+0x70>
    da38:	0023883a 	mov	r17,zero
    da3c:	0007883a 	mov	r3,zero
    da40:	000b883a 	mov	r5,zero
    da44:	0005883a 	mov	r2,zero
    da48:	1808953a 	slli	r4,r3,20
    da4c:	880697fa 	slli	r3,r17,31
    da50:	2148b03a 	or	r4,r4,r5
    da54:	20c6b03a 	or	r3,r4,r3
    da58:	dfc00217 	ldw	ra,8(sp)
    da5c:	dc400117 	ldw	r17,4(sp)
    da60:	dc000017 	ldw	r16,0(sp)
    da64:	dec00304 	addi	sp,sp,12
    da68:	f800283a 	ret
    da6c:	10bffd44 	addi	r2,r2,-11
    da70:	808a983a 	sll	r5,r16,r2
    da74:	00800434 	movhi	r2,16
    da78:	10bfffc4 	addi	r2,r2,-1
    da7c:	288a703a 	and	r5,r5,r2
    da80:	0005883a 	mov	r2,zero
    da84:	003ff006 	br	da48 <__floatsidf+0x70>
    da88:	0121c83a 	sub	r16,zero,r4
    da8c:	003fda06 	br	d9f8 <__floatsidf+0x20>

0000da90 <__floatunsidf>:
    da90:	defffe04 	addi	sp,sp,-8
    da94:	dc000015 	stw	r16,0(sp)
    da98:	dfc00115 	stw	ra,4(sp)
    da9c:	2021883a 	mov	r16,r4
    daa0:	20000f26 	beq	r4,zero,dae0 <__floatunsidf+0x50>
    daa4:	0000a600 	call	a60 <__clzsi2>
    daa8:	00c10784 	movi	r3,1054
    daac:	1887c83a 	sub	r3,r3,r2
    dab0:	110002c8 	cmpgei	r4,r2,11
    dab4:	18c1ffcc 	andi	r3,r3,2047
    dab8:	2000121e 	bne	r4,zero,db04 <__floatunsidf+0x74>
    dabc:	014002c4 	movi	r5,11
    dac0:	288bc83a 	sub	r5,r5,r2
    dac4:	814ad83a 	srl	r5,r16,r5
    dac8:	01000434 	movhi	r4,16
    dacc:	10800544 	addi	r2,r2,21
    dad0:	213fffc4 	addi	r4,r4,-1
    dad4:	80a0983a 	sll	r16,r16,r2
    dad8:	290a703a 	and	r5,r5,r4
    dadc:	00000206 	br	dae8 <__floatunsidf+0x58>
    dae0:	0007883a 	mov	r3,zero
    dae4:	000b883a 	mov	r5,zero
    dae8:	1806953a 	slli	r3,r3,20
    daec:	8005883a 	mov	r2,r16
    daf0:	1946b03a 	or	r3,r3,r5
    daf4:	dfc00117 	ldw	ra,4(sp)
    daf8:	dc000017 	ldw	r16,0(sp)
    dafc:	dec00204 	addi	sp,sp,8
    db00:	f800283a 	ret
    db04:	117ffd44 	addi	r5,r2,-11
    db08:	814a983a 	sll	r5,r16,r5
    db0c:	00800434 	movhi	r2,16
    db10:	10bfffc4 	addi	r2,r2,-1
    db14:	288a703a 	and	r5,r5,r2
    db18:	0021883a 	mov	r16,zero
    db1c:	003ff206 	br	dae8 <__floatunsidf+0x58>

0000db20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db20:	defffe04 	addi	sp,sp,-8
    db24:	dfc00115 	stw	ra,4(sp)
    db28:	df000015 	stw	fp,0(sp)
    db2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db30:	d0a00917 	ldw	r2,-32732(gp)
    db34:	10000326 	beq	r2,zero,db44 <alt_get_errno+0x24>
    db38:	d0a00917 	ldw	r2,-32732(gp)
    db3c:	103ee83a 	callr	r2
    db40:	00000106 	br	db48 <alt_get_errno+0x28>
    db44:	d0a73504 	addi	r2,gp,-25388
}
    db48:	e037883a 	mov	sp,fp
    db4c:	dfc00117 	ldw	ra,4(sp)
    db50:	df000017 	ldw	fp,0(sp)
    db54:	dec00204 	addi	sp,sp,8
    db58:	f800283a 	ret

0000db5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    db5c:	defffb04 	addi	sp,sp,-20
    db60:	dfc00415 	stw	ra,16(sp)
    db64:	df000315 	stw	fp,12(sp)
    db68:	df000304 	addi	fp,sp,12
    db6c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    db70:	e0bffd17 	ldw	r2,-12(fp)
    db74:	10000916 	blt	r2,zero,db9c <close+0x40>
    db78:	e0fffd17 	ldw	r3,-12(fp)
    db7c:	1805883a 	mov	r2,r3
    db80:	1085883a 	add	r2,r2,r2
    db84:	10c5883a 	add	r2,r2,r3
    db88:	100490ba 	slli	r2,r2,2
    db8c:	00c00074 	movhi	r3,1
    db90:	18c6f704 	addi	r3,r3,7132
    db94:	10c5883a 	add	r2,r2,r3
    db98:	00000106 	br	dba0 <close+0x44>
    db9c:	0005883a 	mov	r2,zero
    dba0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    dba4:	e0bfff17 	ldw	r2,-4(fp)
    dba8:	10001926 	beq	r2,zero,dc10 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    dbac:	e0bfff17 	ldw	r2,-4(fp)
    dbb0:	10800017 	ldw	r2,0(r2)
    dbb4:	10800417 	ldw	r2,16(r2)
    dbb8:	10000626 	beq	r2,zero,dbd4 <close+0x78>
    dbbc:	e0bfff17 	ldw	r2,-4(fp)
    dbc0:	10800017 	ldw	r2,0(r2)
    dbc4:	10800417 	ldw	r2,16(r2)
    dbc8:	e13fff17 	ldw	r4,-4(fp)
    dbcc:	103ee83a 	callr	r2
    dbd0:	00000106 	br	dbd8 <close+0x7c>
    dbd4:	0005883a 	mov	r2,zero
    dbd8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    dbdc:	e13ffd17 	ldw	r4,-12(fp)
    dbe0:	000e4180 	call	e418 <alt_release_fd>
    if (rval < 0)
    dbe4:	e0bffe17 	ldw	r2,-8(fp)
    dbe8:	1000070e 	bge	r2,zero,dc08 <close+0xac>
    {
      ALT_ERRNO = -rval;
    dbec:	000db200 	call	db20 <alt_get_errno>
    dbf0:	1007883a 	mov	r3,r2
    dbf4:	e0bffe17 	ldw	r2,-8(fp)
    dbf8:	0085c83a 	sub	r2,zero,r2
    dbfc:	18800015 	stw	r2,0(r3)
      return -1;
    dc00:	00bfffc4 	movi	r2,-1
    dc04:	00000706 	br	dc24 <close+0xc8>
    }
    return 0;
    dc08:	0005883a 	mov	r2,zero
    dc0c:	00000506 	br	dc24 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dc10:	000db200 	call	db20 <alt_get_errno>
    dc14:	1007883a 	mov	r3,r2
    dc18:	00801444 	movi	r2,81
    dc1c:	18800015 	stw	r2,0(r3)
    return -1;
    dc20:	00bfffc4 	movi	r2,-1
  }
}
    dc24:	e037883a 	mov	sp,fp
    dc28:	dfc00117 	ldw	ra,4(sp)
    dc2c:	df000017 	ldw	fp,0(sp)
    dc30:	dec00204 	addi	sp,sp,8
    dc34:	f800283a 	ret

0000dc38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    dc38:	defffc04 	addi	sp,sp,-16
    dc3c:	df000315 	stw	fp,12(sp)
    dc40:	df000304 	addi	fp,sp,12
    dc44:	e13fff15 	stw	r4,-4(fp)
    dc48:	e17ffe15 	stw	r5,-8(fp)
    dc4c:	e1bffd15 	stw	r6,-12(fp)
  return len;
    dc50:	e0bffd17 	ldw	r2,-12(fp)
}
    dc54:	e037883a 	mov	sp,fp
    dc58:	df000017 	ldw	fp,0(sp)
    dc5c:	dec00104 	addi	sp,sp,4
    dc60:	f800283a 	ret

0000dc64 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    dc64:	defffd04 	addi	sp,sp,-12
    dc68:	df000215 	stw	fp,8(sp)
    dc6c:	df000204 	addi	fp,sp,8
    dc70:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    dc74:	0001883a 	nop
    dc78:	e0bffe17 	ldw	r2,-8(fp)
    dc7c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    dc80:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    dc84:	10000226 	beq	r2,zero,dc90 <_exit+0x2c>
    ALT_SIM_FAIL();
    dc88:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    dc8c:	00000106 	br	dc94 <_exit+0x30>
    ALT_SIM_PASS();
    dc90:	002af0b0 	cmpltui	zero,zero,43970
}
    dc94:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    dc98:	003fff06 	br	dc98 <_exit+0x34>

0000dc9c <alt_get_errno>:
{
    dc9c:	defffe04 	addi	sp,sp,-8
    dca0:	dfc00115 	stw	ra,4(sp)
    dca4:	df000015 	stw	fp,0(sp)
    dca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dcac:	d0a00917 	ldw	r2,-32732(gp)
    dcb0:	10000326 	beq	r2,zero,dcc0 <alt_get_errno+0x24>
    dcb4:	d0a00917 	ldw	r2,-32732(gp)
    dcb8:	103ee83a 	callr	r2
    dcbc:	00000106 	br	dcc4 <alt_get_errno+0x28>
    dcc0:	d0a73504 	addi	r2,gp,-25388
}
    dcc4:	e037883a 	mov	sp,fp
    dcc8:	dfc00117 	ldw	ra,4(sp)
    dccc:	df000017 	ldw	fp,0(sp)
    dcd0:	dec00204 	addi	sp,sp,8
    dcd4:	f800283a 	ret

0000dcd8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    dcd8:	defffb04 	addi	sp,sp,-20
    dcdc:	dfc00415 	stw	ra,16(sp)
    dce0:	df000315 	stw	fp,12(sp)
    dce4:	df000304 	addi	fp,sp,12
    dce8:	e13ffe15 	stw	r4,-8(fp)
    dcec:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dcf0:	e0bffe17 	ldw	r2,-8(fp)
    dcf4:	10000916 	blt	r2,zero,dd1c <fstat+0x44>
    dcf8:	e0fffe17 	ldw	r3,-8(fp)
    dcfc:	1805883a 	mov	r2,r3
    dd00:	1085883a 	add	r2,r2,r2
    dd04:	10c5883a 	add	r2,r2,r3
    dd08:	100490ba 	slli	r2,r2,2
    dd0c:	00c00074 	movhi	r3,1
    dd10:	18c6f704 	addi	r3,r3,7132
    dd14:	10c5883a 	add	r2,r2,r3
    dd18:	00000106 	br	dd20 <fstat+0x48>
    dd1c:	0005883a 	mov	r2,zero
    dd20:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    dd24:	e0bfff17 	ldw	r2,-4(fp)
    dd28:	10001026 	beq	r2,zero,dd6c <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    dd2c:	e0bfff17 	ldw	r2,-4(fp)
    dd30:	10800017 	ldw	r2,0(r2)
    dd34:	10800817 	ldw	r2,32(r2)
    dd38:	10000726 	beq	r2,zero,dd58 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
    dd3c:	e0bfff17 	ldw	r2,-4(fp)
    dd40:	10800017 	ldw	r2,0(r2)
    dd44:	10800817 	ldw	r2,32(r2)
    dd48:	e17ffd17 	ldw	r5,-12(fp)
    dd4c:	e13fff17 	ldw	r4,-4(fp)
    dd50:	103ee83a 	callr	r2
    dd54:	00000a06 	br	dd80 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    dd58:	e0bffd17 	ldw	r2,-12(fp)
    dd5c:	00c80004 	movi	r3,8192
    dd60:	10c00115 	stw	r3,4(r2)
      return 0;
    dd64:	0005883a 	mov	r2,zero
    dd68:	00000506 	br	dd80 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dd6c:	000dc9c0 	call	dc9c <alt_get_errno>
    dd70:	1007883a 	mov	r3,r2
    dd74:	00801444 	movi	r2,81
    dd78:	18800015 	stw	r2,0(r3)
    return -1;
    dd7c:	00bfffc4 	movi	r2,-1
  }
}
    dd80:	e037883a 	mov	sp,fp
    dd84:	dfc00117 	ldw	ra,4(sp)
    dd88:	df000017 	ldw	fp,0(sp)
    dd8c:	dec00204 	addi	sp,sp,8
    dd90:	f800283a 	ret

0000dd94 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    dd94:	deffff04 	addi	sp,sp,-4
    dd98:	df000015 	stw	fp,0(sp)
    dd9c:	d839883a 	mov	fp,sp
  return 0;
    dda0:	0005883a 	mov	r2,zero
}
    dda4:	e037883a 	mov	sp,fp
    dda8:	df000017 	ldw	fp,0(sp)
    ddac:	dec00104 	addi	sp,sp,4
    ddb0:	f800283a 	ret

0000ddb4 <alt_get_errno>:
{
    ddb4:	defffe04 	addi	sp,sp,-8
    ddb8:	dfc00115 	stw	ra,4(sp)
    ddbc:	df000015 	stw	fp,0(sp)
    ddc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ddc4:	d0a00917 	ldw	r2,-32732(gp)
    ddc8:	10000326 	beq	r2,zero,ddd8 <alt_get_errno+0x24>
    ddcc:	d0a00917 	ldw	r2,-32732(gp)
    ddd0:	103ee83a 	callr	r2
    ddd4:	00000106 	br	dddc <alt_get_errno+0x28>
    ddd8:	d0a73504 	addi	r2,gp,-25388
}
    dddc:	e037883a 	mov	sp,fp
    dde0:	dfc00117 	ldw	ra,4(sp)
    dde4:	df000017 	ldw	fp,0(sp)
    dde8:	dec00204 	addi	sp,sp,8
    ddec:	f800283a 	ret

0000ddf0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ddf0:	deffea04 	addi	sp,sp,-88
    ddf4:	dfc01515 	stw	ra,84(sp)
    ddf8:	df001415 	stw	fp,80(sp)
    ddfc:	df001404 	addi	fp,sp,80
    de00:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de04:	e0bfec17 	ldw	r2,-80(fp)
    de08:	10000916 	blt	r2,zero,de30 <isatty+0x40>
    de0c:	e0ffec17 	ldw	r3,-80(fp)
    de10:	1805883a 	mov	r2,r3
    de14:	1085883a 	add	r2,r2,r2
    de18:	10c5883a 	add	r2,r2,r3
    de1c:	100490ba 	slli	r2,r2,2
    de20:	00c00074 	movhi	r3,1
    de24:	18c6f704 	addi	r3,r3,7132
    de28:	10c5883a 	add	r2,r2,r3
    de2c:	00000106 	br	de34 <isatty+0x44>
    de30:	0005883a 	mov	r2,zero
    de34:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    de38:	e0bfff17 	ldw	r2,-4(fp)
    de3c:	10000e26 	beq	r2,zero,de78 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    de40:	e0bfff17 	ldw	r2,-4(fp)
    de44:	10800017 	ldw	r2,0(r2)
    de48:	10800817 	ldw	r2,32(r2)
    de4c:	1000021e 	bne	r2,zero,de58 <isatty+0x68>
    {
      return 1;
    de50:	00800044 	movi	r2,1
    de54:	00000d06 	br	de8c <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    de58:	e0bfed04 	addi	r2,fp,-76
    de5c:	100b883a 	mov	r5,r2
    de60:	e13fec17 	ldw	r4,-80(fp)
    de64:	000dcd80 	call	dcd8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    de68:	e0bfee17 	ldw	r2,-72(fp)
    de6c:	10880020 	cmpeqi	r2,r2,8192
    de70:	10803fcc 	andi	r2,r2,255
    de74:	00000506 	br	de8c <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    de78:	000ddb40 	call	ddb4 <alt_get_errno>
    de7c:	1007883a 	mov	r3,r2
    de80:	00801444 	movi	r2,81
    de84:	18800015 	stw	r2,0(r3)
    return 0;
    de88:	0005883a 	mov	r2,zero
  }
}
    de8c:	e037883a 	mov	sp,fp
    de90:	dfc00117 	ldw	ra,4(sp)
    de94:	df000017 	ldw	fp,0(sp)
    de98:	dec00204 	addi	sp,sp,8
    de9c:	f800283a 	ret

0000dea0 <alt_get_errno>:
{
    dea0:	defffe04 	addi	sp,sp,-8
    dea4:	dfc00115 	stw	ra,4(sp)
    dea8:	df000015 	stw	fp,0(sp)
    deac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    deb0:	d0a00917 	ldw	r2,-32732(gp)
    deb4:	10000326 	beq	r2,zero,dec4 <alt_get_errno+0x24>
    deb8:	d0a00917 	ldw	r2,-32732(gp)
    debc:	103ee83a 	callr	r2
    dec0:	00000106 	br	dec8 <alt_get_errno+0x28>
    dec4:	d0a73504 	addi	r2,gp,-25388
}
    dec8:	e037883a 	mov	sp,fp
    decc:	dfc00117 	ldw	ra,4(sp)
    ded0:	df000017 	ldw	fp,0(sp)
    ded4:	dec00204 	addi	sp,sp,8
    ded8:	f800283a 	ret

0000dedc <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    dedc:	defffb04 	addi	sp,sp,-20
    dee0:	dfc00415 	stw	ra,16(sp)
    dee4:	df000315 	stw	fp,12(sp)
    dee8:	df000304 	addi	fp,sp,12
    deec:	e13ffe15 	stw	r4,-8(fp)
    def0:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
    def4:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
    def8:	e0bffe17 	ldw	r2,-8(fp)
    defc:	00802e16 	blt	zero,r2,dfb8 <kill+0xdc>
  {
    switch (sig)
    df00:	e0bffd17 	ldw	r2,-12(fp)
    df04:	10800828 	cmpgeui	r2,r2,32
    df08:	1000281e 	bne	r2,zero,dfac <kill+0xd0>
    df0c:	e0bffd17 	ldw	r2,-12(fp)
    df10:	100690ba 	slli	r3,r2,2
    df14:	00800074 	movhi	r2,1
    df18:	1885883a 	add	r2,r3,r2
    df1c:	10b7c917 	ldw	r2,-8412(r2)
    df20:	1000683a 	jmp	r2
    df24:	0000dfcc 	andi	zero,zero,895
    df28:	0000dfac 	andhi	zero,zero,894
    df2c:	0000dfac 	andhi	zero,zero,894
    df30:	0000dfa4 	muli	zero,zero,894
    df34:	0000dfa4 	muli	zero,zero,894
    df38:	0000dfa4 	muli	zero,zero,894
    df3c:	0000dfa4 	muli	zero,zero,894
    df40:	0000dfac 	andhi	zero,zero,894
    df44:	0000dfa4 	muli	zero,zero,894
    df48:	0000dfa4 	muli	zero,zero,894
    df4c:	0000dfa4 	muli	zero,zero,894
    df50:	0000dfa4 	muli	zero,zero,894
    df54:	0000dfa4 	muli	zero,zero,894
    df58:	0000dfa4 	muli	zero,zero,894
    df5c:	0000dfa4 	muli	zero,zero,894
    df60:	0000dfa4 	muli	zero,zero,894
    df64:	0000dfcc 	andi	zero,zero,895
    df68:	0000dfac 	andhi	zero,zero,894
    df6c:	0000dfac 	andhi	zero,zero,894
    df70:	0000dfac 	andhi	zero,zero,894
    df74:	0000dfcc 	andi	zero,zero,895
    df78:	0000dfac 	andhi	zero,zero,894
    df7c:	0000dfac 	andhi	zero,zero,894
    df80:	0000dfa4 	muli	zero,zero,894
    df84:	0000dfa4 	muli	zero,zero,894
    df88:	0000dfa4 	muli	zero,zero,894
    df8c:	0000dfa4 	muli	zero,zero,894
    df90:	0000dfa4 	muli	zero,zero,894
    df94:	0000dfac 	andhi	zero,zero,894
    df98:	0000dfac 	andhi	zero,zero,894
    df9c:	0000dfa4 	muli	zero,zero,894
    dfa0:	0000dfa4 	muli	zero,zero,894
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    dfa4:	0009883a 	mov	r4,zero
    dfa8:	000dc640 	call	dc64 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    dfac:	00800584 	movi	r2,22
    dfb0:	e0bfff15 	stw	r2,-4(fp)
    dfb4:	00000606 	br	dfd0 <kill+0xf4>
    }
  }

  else if (pid > 0)
    dfb8:	e0bffe17 	ldw	r2,-8(fp)
    dfbc:	0080040e 	bge	zero,r2,dfd0 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    dfc0:	008000c4 	movi	r2,3
    dfc4:	e0bfff15 	stw	r2,-4(fp)
    dfc8:	00000106 	br	dfd0 <kill+0xf4>
      break;
    dfcc:	0001883a 	nop
  }

  if (status)
    dfd0:	e0bfff17 	ldw	r2,-4(fp)
    dfd4:	10000626 	beq	r2,zero,dff0 <kill+0x114>
  {
    ALT_ERRNO = status;
    dfd8:	000dea00 	call	dea0 <alt_get_errno>
    dfdc:	1007883a 	mov	r3,r2
    dfe0:	e0bfff17 	ldw	r2,-4(fp)
    dfe4:	18800015 	stw	r2,0(r3)
    return -1;
    dfe8:	00bfffc4 	movi	r2,-1
    dfec:	00000106 	br	dff4 <kill+0x118>
  }

  return 0;
    dff0:	0005883a 	mov	r2,zero
}
    dff4:	e037883a 	mov	sp,fp
    dff8:	dfc00117 	ldw	ra,4(sp)
    dffc:	df000017 	ldw	fp,0(sp)
    e000:	dec00204 	addi	sp,sp,8
    e004:	f800283a 	ret

0000e008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e008:	defffc04 	addi	sp,sp,-16
    e00c:	df000315 	stw	fp,12(sp)
    e010:	df000304 	addi	fp,sp,12
    e014:	e13fff15 	stw	r4,-4(fp)
    e018:	e17ffe15 	stw	r5,-8(fp)
    e01c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    e020:	e0fffe17 	ldw	r3,-8(fp)
    e024:	e0bfff17 	ldw	r2,-4(fp)
    e028:	18800c26 	beq	r3,r2,e05c <alt_load_section+0x54>
  {
    while( to != end )
    e02c:	00000806 	br	e050 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e030:	e0ffff17 	ldw	r3,-4(fp)
    e034:	18800104 	addi	r2,r3,4
    e038:	e0bfff15 	stw	r2,-4(fp)
    e03c:	e0bffe17 	ldw	r2,-8(fp)
    e040:	11000104 	addi	r4,r2,4
    e044:	e13ffe15 	stw	r4,-8(fp)
    e048:	18c00017 	ldw	r3,0(r3)
    e04c:	10c00015 	stw	r3,0(r2)
    while( to != end )
    e050:	e0fffe17 	ldw	r3,-8(fp)
    e054:	e0bffd17 	ldw	r2,-12(fp)
    e058:	18bff51e 	bne	r3,r2,e030 <alt_load_section+0x28>
    }
  }
}
    e05c:	0001883a 	nop
    e060:	e037883a 	mov	sp,fp
    e064:	df000017 	ldw	fp,0(sp)
    e068:	dec00104 	addi	sp,sp,4
    e06c:	f800283a 	ret

0000e070 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e070:	defffe04 	addi	sp,sp,-8
    e074:	dfc00115 	stw	ra,4(sp)
    e078:	df000015 	stw	fp,0(sp)
    e07c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e080:	01800074 	movhi	r6,1
    e084:	318bab04 	addi	r6,r6,11948
    e088:	01400074 	movhi	r5,1
    e08c:	29448704 	addi	r5,r5,4636
    e090:	01000074 	movhi	r4,1
    e094:	210bab04 	addi	r4,r4,11948
    e098:	000e0080 	call	e008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e09c:	01800034 	movhi	r6,0
    e0a0:	31808a04 	addi	r6,r6,552
    e0a4:	01400034 	movhi	r5,0
    e0a8:	29400804 	addi	r5,r5,32
    e0ac:	01000034 	movhi	r4,0
    e0b0:	21000804 	addi	r4,r4,32
    e0b4:	000e0080 	call	e008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e0b8:	01800074 	movhi	r6,1
    e0bc:	31848704 	addi	r6,r6,4636
    e0c0:	01400074 	movhi	r5,1
    e0c4:	2942d904 	addi	r5,r5,2916
    e0c8:	01000074 	movhi	r4,1
    e0cc:	2102d904 	addi	r4,r4,2916
    e0d0:	000e0080 	call	e008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e0d4:	000fce40 	call	fce4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e0d8:	000ff400 	call	ff40 <alt_icache_flush_all>
}
    e0dc:	0001883a 	nop
    e0e0:	e037883a 	mov	sp,fp
    e0e4:	dfc00117 	ldw	ra,4(sp)
    e0e8:	df000017 	ldw	fp,0(sp)
    e0ec:	dec00204 	addi	sp,sp,8
    e0f0:	f800283a 	ret

0000e0f4 <alt_get_errno>:
{
    e0f4:	defffe04 	addi	sp,sp,-8
    e0f8:	dfc00115 	stw	ra,4(sp)
    e0fc:	df000015 	stw	fp,0(sp)
    e100:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e104:	d0a00917 	ldw	r2,-32732(gp)
    e108:	10000326 	beq	r2,zero,e118 <alt_get_errno+0x24>
    e10c:	d0a00917 	ldw	r2,-32732(gp)
    e110:	103ee83a 	callr	r2
    e114:	00000106 	br	e11c <alt_get_errno+0x28>
    e118:	d0a73504 	addi	r2,gp,-25388
}
    e11c:	e037883a 	mov	sp,fp
    e120:	dfc00117 	ldw	ra,4(sp)
    e124:	df000017 	ldw	fp,0(sp)
    e128:	dec00204 	addi	sp,sp,8
    e12c:	f800283a 	ret

0000e130 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e130:	defff904 	addi	sp,sp,-28
    e134:	dfc00615 	stw	ra,24(sp)
    e138:	df000515 	stw	fp,20(sp)
    e13c:	df000504 	addi	fp,sp,20
    e140:	e13ffd15 	stw	r4,-12(fp)
    e144:	e17ffc15 	stw	r5,-16(fp)
    e148:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e14c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e150:	e0bffd17 	ldw	r2,-12(fp)
    e154:	10000916 	blt	r2,zero,e17c <lseek+0x4c>
    e158:	e0fffd17 	ldw	r3,-12(fp)
    e15c:	1805883a 	mov	r2,r3
    e160:	1085883a 	add	r2,r2,r2
    e164:	10c5883a 	add	r2,r2,r3
    e168:	100490ba 	slli	r2,r2,2
    e16c:	00c00074 	movhi	r3,1
    e170:	18c6f704 	addi	r3,r3,7132
    e174:	10c5883a 	add	r2,r2,r3
    e178:	00000106 	br	e180 <lseek+0x50>
    e17c:	0005883a 	mov	r2,zero
    e180:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    e184:	e0bffe17 	ldw	r2,-8(fp)
    e188:	10001026 	beq	r2,zero,e1cc <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e18c:	e0bffe17 	ldw	r2,-8(fp)
    e190:	10800017 	ldw	r2,0(r2)
    e194:	10800717 	ldw	r2,28(r2)
    e198:	10000926 	beq	r2,zero,e1c0 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e19c:	e0bffe17 	ldw	r2,-8(fp)
    e1a0:	10800017 	ldw	r2,0(r2)
    e1a4:	10800717 	ldw	r2,28(r2)
    e1a8:	e1bffb17 	ldw	r6,-20(fp)
    e1ac:	e17ffc17 	ldw	r5,-16(fp)
    e1b0:	e13ffe17 	ldw	r4,-8(fp)
    e1b4:	103ee83a 	callr	r2
    e1b8:	e0bfff15 	stw	r2,-4(fp)
    e1bc:	00000506 	br	e1d4 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e1c0:	00bfde84 	movi	r2,-134
    e1c4:	e0bfff15 	stw	r2,-4(fp)
    e1c8:	00000206 	br	e1d4 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    e1cc:	00bfebc4 	movi	r2,-81
    e1d0:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    e1d4:	e0bfff17 	ldw	r2,-4(fp)
    e1d8:	1000070e 	bge	r2,zero,e1f8 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    e1dc:	000e0f40 	call	e0f4 <alt_get_errno>
    e1e0:	1007883a 	mov	r3,r2
    e1e4:	e0bfff17 	ldw	r2,-4(fp)
    e1e8:	0085c83a 	sub	r2,zero,r2
    e1ec:	18800015 	stw	r2,0(r3)
    rc = -1;
    e1f0:	00bfffc4 	movi	r2,-1
    e1f4:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    e1f8:	e0bfff17 	ldw	r2,-4(fp)
}
    e1fc:	e037883a 	mov	sp,fp
    e200:	dfc00117 	ldw	ra,4(sp)
    e204:	df000017 	ldw	fp,0(sp)
    e208:	dec00204 	addi	sp,sp,8
    e20c:	f800283a 	ret

0000e210 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e210:	defffd04 	addi	sp,sp,-12
    e214:	dfc00215 	stw	ra,8(sp)
    e218:	df000115 	stw	fp,4(sp)
    e21c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e220:	0009883a 	mov	r4,zero
    e224:	000e6b40 	call	e6b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e228:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e22c:	000e6f00 	call	e6f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e230:	01800074 	movhi	r6,1
    e234:	31846a04 	addi	r6,r6,4520
    e238:	01400074 	movhi	r5,1
    e23c:	29446a04 	addi	r5,r5,4520
    e240:	01000074 	movhi	r4,1
    e244:	21046a04 	addi	r4,r4,4520
    e248:	00100340 	call	10034 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e24c:	000fde80 	call	fde8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e250:	01000074 	movhi	r4,1
    e254:	213f9304 	addi	r4,r4,-436
    e258:	00108f40 	call	108f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e25c:	d0a73717 	ldw	r2,-25380(gp)
    e260:	d0e73817 	ldw	r3,-25376(gp)
    e264:	d1273917 	ldw	r4,-25372(gp)
    e268:	200d883a 	mov	r6,r4
    e26c:	180b883a 	mov	r5,r3
    e270:	1009883a 	mov	r4,r2
    e274:	00002640 	call	264 <main>
    e278:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e27c:	01000044 	movi	r4,1
    e280:	000db5c0 	call	db5c <close>
  exit (result);
    e284:	e13fff17 	ldw	r4,-4(fp)
    e288:	00109080 	call	10908 <exit>

0000e28c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    e28c:	defffe04 	addi	sp,sp,-8
    e290:	df000115 	stw	fp,4(sp)
    e294:	df000104 	addi	fp,sp,4
    e298:	e13fff15 	stw	r4,-4(fp)
}
    e29c:	0001883a 	nop
    e2a0:	e037883a 	mov	sp,fp
    e2a4:	df000017 	ldw	fp,0(sp)
    e2a8:	dec00104 	addi	sp,sp,4
    e2ac:	f800283a 	ret

0000e2b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e2b0:	defffe04 	addi	sp,sp,-8
    e2b4:	df000115 	stw	fp,4(sp)
    e2b8:	df000104 	addi	fp,sp,4
    e2bc:	e13fff15 	stw	r4,-4(fp)
}
    e2c0:	0001883a 	nop
    e2c4:	e037883a 	mov	sp,fp
    e2c8:	df000017 	ldw	fp,0(sp)
    e2cc:	dec00104 	addi	sp,sp,4
    e2d0:	f800283a 	ret

0000e2d4 <alt_get_errno>:
{
    e2d4:	defffe04 	addi	sp,sp,-8
    e2d8:	dfc00115 	stw	ra,4(sp)
    e2dc:	df000015 	stw	fp,0(sp)
    e2e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e2e4:	d0a00917 	ldw	r2,-32732(gp)
    e2e8:	10000326 	beq	r2,zero,e2f8 <alt_get_errno+0x24>
    e2ec:	d0a00917 	ldw	r2,-32732(gp)
    e2f0:	103ee83a 	callr	r2
    e2f4:	00000106 	br	e2fc <alt_get_errno+0x28>
    e2f8:	d0a73504 	addi	r2,gp,-25388
}
    e2fc:	e037883a 	mov	sp,fp
    e300:	dfc00117 	ldw	ra,4(sp)
    e304:	df000017 	ldw	fp,0(sp)
    e308:	dec00204 	addi	sp,sp,8
    e30c:	f800283a 	ret

0000e310 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e310:	defff904 	addi	sp,sp,-28
    e314:	dfc00615 	stw	ra,24(sp)
    e318:	df000515 	stw	fp,20(sp)
    e31c:	df000504 	addi	fp,sp,20
    e320:	e13ffd15 	stw	r4,-12(fp)
    e324:	e17ffc15 	stw	r5,-16(fp)
    e328:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e32c:	e0bffd17 	ldw	r2,-12(fp)
    e330:	10000916 	blt	r2,zero,e358 <read+0x48>
    e334:	e0fffd17 	ldw	r3,-12(fp)
    e338:	1805883a 	mov	r2,r3
    e33c:	1085883a 	add	r2,r2,r2
    e340:	10c5883a 	add	r2,r2,r3
    e344:	100490ba 	slli	r2,r2,2
    e348:	00c00074 	movhi	r3,1
    e34c:	18c6f704 	addi	r3,r3,7132
    e350:	10c5883a 	add	r2,r2,r3
    e354:	00000106 	br	e35c <read+0x4c>
    e358:	0005883a 	mov	r2,zero
    e35c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    e360:	e0bfff17 	ldw	r2,-4(fp)
    e364:	10002226 	beq	r2,zero,e3f0 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e368:	e0bfff17 	ldw	r2,-4(fp)
    e36c:	10800217 	ldw	r2,8(r2)
    e370:	108000cc 	andi	r2,r2,3
    e374:	10800060 	cmpeqi	r2,r2,1
    e378:	1000181e 	bne	r2,zero,e3dc <read+0xcc>
        (fd->dev->read))
    e37c:	e0bfff17 	ldw	r2,-4(fp)
    e380:	10800017 	ldw	r2,0(r2)
    e384:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e388:	10001426 	beq	r2,zero,e3dc <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e38c:	e0bfff17 	ldw	r2,-4(fp)
    e390:	10800017 	ldw	r2,0(r2)
    e394:	10800517 	ldw	r2,20(r2)
    e398:	e0fffb17 	ldw	r3,-20(fp)
    e39c:	180d883a 	mov	r6,r3
    e3a0:	e17ffc17 	ldw	r5,-16(fp)
    e3a4:	e13fff17 	ldw	r4,-4(fp)
    e3a8:	103ee83a 	callr	r2
    e3ac:	e0bffe15 	stw	r2,-8(fp)
    e3b0:	e0bffe17 	ldw	r2,-8(fp)
    e3b4:	1000070e 	bge	r2,zero,e3d4 <read+0xc4>
        {
          ALT_ERRNO = -rval;
    e3b8:	000e2d40 	call	e2d4 <alt_get_errno>
    e3bc:	1007883a 	mov	r3,r2
    e3c0:	e0bffe17 	ldw	r2,-8(fp)
    e3c4:	0085c83a 	sub	r2,zero,r2
    e3c8:	18800015 	stw	r2,0(r3)
          return -1;
    e3cc:	00bfffc4 	movi	r2,-1
    e3d0:	00000c06 	br	e404 <read+0xf4>
        }
        return rval;
    e3d4:	e0bffe17 	ldw	r2,-8(fp)
    e3d8:	00000a06 	br	e404 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e3dc:	000e2d40 	call	e2d4 <alt_get_errno>
    e3e0:	1007883a 	mov	r3,r2
    e3e4:	00800344 	movi	r2,13
    e3e8:	18800015 	stw	r2,0(r3)
    e3ec:	00000406 	br	e400 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e3f0:	000e2d40 	call	e2d4 <alt_get_errno>
    e3f4:	1007883a 	mov	r3,r2
    e3f8:	00801444 	movi	r2,81
    e3fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e400:	00bfffc4 	movi	r2,-1
}
    e404:	e037883a 	mov	sp,fp
    e408:	dfc00117 	ldw	ra,4(sp)
    e40c:	df000017 	ldw	fp,0(sp)
    e410:	dec00204 	addi	sp,sp,8
    e414:	f800283a 	ret

0000e418 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e418:	defffe04 	addi	sp,sp,-8
    e41c:	df000115 	stw	fp,4(sp)
    e420:	df000104 	addi	fp,sp,4
    e424:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    e428:	e0bfff17 	ldw	r2,-4(fp)
    e42c:	108000d0 	cmplti	r2,r2,3
    e430:	1000101e 	bne	r2,zero,e474 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    e434:	e0ffff17 	ldw	r3,-4(fp)
    e438:	1805883a 	mov	r2,r3
    e43c:	1085883a 	add	r2,r2,r2
    e440:	10c5883a 	add	r2,r2,r3
    e444:	100490ba 	slli	r2,r2,2
    e448:	00c00074 	movhi	r3,1
    e44c:	10c7883a 	add	r3,r2,r3
    e450:	1806f915 	stw	zero,7140(r3)
    alt_fd_list[fd].dev      = 0;
    e454:	e0ffff17 	ldw	r3,-4(fp)
    e458:	1805883a 	mov	r2,r3
    e45c:	1085883a 	add	r2,r2,r2
    e460:	10c5883a 	add	r2,r2,r3
    e464:	100490ba 	slli	r2,r2,2
    e468:	00c00074 	movhi	r3,1
    e46c:	10c7883a 	add	r3,r2,r3
    e470:	1806f715 	stw	zero,7132(r3)
  }
}
    e474:	0001883a 	nop
    e478:	e037883a 	mov	sp,fp
    e47c:	df000017 	ldw	fp,0(sp)
    e480:	dec00104 	addi	sp,sp,4
    e484:	f800283a 	ret

0000e488 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e488:	defff904 	addi	sp,sp,-28
    e48c:	df000615 	stw	fp,24(sp)
    e490:	df000604 	addi	fp,sp,24
    e494:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    e498:	0005303a 	rdctl	r2,status
    e49c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e4a0:	e0fffd17 	ldw	r3,-12(fp)
    e4a4:	00bfff84 	movi	r2,-2
    e4a8:	1884703a 	and	r2,r3,r2
    e4ac:	1001703a 	wrctl	status,r2
  return context;
    e4b0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e4b4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e4b8:	d0a00a17 	ldw	r2,-32728(gp)
    e4bc:	10c000c4 	addi	r3,r2,3
    e4c0:	00bfff04 	movi	r2,-4
    e4c4:	1884703a 	and	r2,r3,r2
    e4c8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e4cc:	d0e00a17 	ldw	r3,-32728(gp)
    e4d0:	e0bffa17 	ldw	r2,-24(fp)
    e4d4:	1887883a 	add	r3,r3,r2
    e4d8:	00820034 	movhi	r2,2048
    e4dc:	10800004 	addi	r2,r2,0
    e4e0:	10c0072e 	bgeu	r2,r3,e500 <sbrk+0x78>
    e4e4:	e0bfff17 	ldw	r2,-4(fp)
    e4e8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    e4ec:	e0bffc17 	ldw	r2,-16(fp)
    e4f0:	1001703a 	wrctl	status,r2
}
    e4f4:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e4f8:	00bfffc4 	movi	r2,-1
    e4fc:	00000c06 	br	e530 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    e500:	d0a00a17 	ldw	r2,-32728(gp)
    e504:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    e508:	d0e00a17 	ldw	r3,-32728(gp)
    e50c:	e0bffa17 	ldw	r2,-24(fp)
    e510:	1885883a 	add	r2,r3,r2
    e514:	d0a00a15 	stw	r2,-32728(gp)
    e518:	e0bfff17 	ldw	r2,-4(fp)
    e51c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    e520:	e0bffb17 	ldw	r2,-20(fp)
    e524:	1001703a 	wrctl	status,r2
}
    e528:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e52c:	e0bffe17 	ldw	r2,-8(fp)
} 
    e530:	e037883a 	mov	sp,fp
    e534:	df000017 	ldw	fp,0(sp)
    e538:	dec00104 	addi	sp,sp,4
    e53c:	f800283a 	ret

0000e540 <alt_get_errno>:
{
    e540:	defffe04 	addi	sp,sp,-8
    e544:	dfc00115 	stw	ra,4(sp)
    e548:	df000015 	stw	fp,0(sp)
    e54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e550:	d0a00917 	ldw	r2,-32732(gp)
    e554:	10000326 	beq	r2,zero,e564 <alt_get_errno+0x24>
    e558:	d0a00917 	ldw	r2,-32732(gp)
    e55c:	103ee83a 	callr	r2
    e560:	00000106 	br	e568 <alt_get_errno+0x28>
    e564:	d0a73504 	addi	r2,gp,-25388
}
    e568:	e037883a 	mov	sp,fp
    e56c:	dfc00117 	ldw	ra,4(sp)
    e570:	df000017 	ldw	fp,0(sp)
    e574:	dec00204 	addi	sp,sp,8
    e578:	f800283a 	ret

0000e57c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e57c:	defff904 	addi	sp,sp,-28
    e580:	dfc00615 	stw	ra,24(sp)
    e584:	df000515 	stw	fp,20(sp)
    e588:	df000504 	addi	fp,sp,20
    e58c:	e13ffd15 	stw	r4,-12(fp)
    e590:	e17ffc15 	stw	r5,-16(fp)
    e594:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e598:	e0bffd17 	ldw	r2,-12(fp)
    e59c:	10000916 	blt	r2,zero,e5c4 <write+0x48>
    e5a0:	e0fffd17 	ldw	r3,-12(fp)
    e5a4:	1805883a 	mov	r2,r3
    e5a8:	1085883a 	add	r2,r2,r2
    e5ac:	10c5883a 	add	r2,r2,r3
    e5b0:	100490ba 	slli	r2,r2,2
    e5b4:	00c00074 	movhi	r3,1
    e5b8:	18c6f704 	addi	r3,r3,7132
    e5bc:	10c5883a 	add	r2,r2,r3
    e5c0:	00000106 	br	e5c8 <write+0x4c>
    e5c4:	0005883a 	mov	r2,zero
    e5c8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    e5cc:	e0bfff17 	ldw	r2,-4(fp)
    e5d0:	10002126 	beq	r2,zero,e658 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e5d4:	e0bfff17 	ldw	r2,-4(fp)
    e5d8:	10800217 	ldw	r2,8(r2)
    e5dc:	108000cc 	andi	r2,r2,3
    e5e0:	10001826 	beq	r2,zero,e644 <write+0xc8>
    e5e4:	e0bfff17 	ldw	r2,-4(fp)
    e5e8:	10800017 	ldw	r2,0(r2)
    e5ec:	10800617 	ldw	r2,24(r2)
    e5f0:	10001426 	beq	r2,zero,e644 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e5f4:	e0bfff17 	ldw	r2,-4(fp)
    e5f8:	10800017 	ldw	r2,0(r2)
    e5fc:	10800617 	ldw	r2,24(r2)
    e600:	e0fffb17 	ldw	r3,-20(fp)
    e604:	180d883a 	mov	r6,r3
    e608:	e17ffc17 	ldw	r5,-16(fp)
    e60c:	e13fff17 	ldw	r4,-4(fp)
    e610:	103ee83a 	callr	r2
    e614:	e0bffe15 	stw	r2,-8(fp)
    e618:	e0bffe17 	ldw	r2,-8(fp)
    e61c:	1000070e 	bge	r2,zero,e63c <write+0xc0>
      {
        ALT_ERRNO = -rval;
    e620:	000e5400 	call	e540 <alt_get_errno>
    e624:	1007883a 	mov	r3,r2
    e628:	e0bffe17 	ldw	r2,-8(fp)
    e62c:	0085c83a 	sub	r2,zero,r2
    e630:	18800015 	stw	r2,0(r3)
        return -1;
    e634:	00bfffc4 	movi	r2,-1
    e638:	00000c06 	br	e66c <write+0xf0>
      }
      return rval;
    e63c:	e0bffe17 	ldw	r2,-8(fp)
    e640:	00000a06 	br	e66c <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e644:	000e5400 	call	e540 <alt_get_errno>
    e648:	1007883a 	mov	r3,r2
    e64c:	00800344 	movi	r2,13
    e650:	18800015 	stw	r2,0(r3)
    e654:	00000406 	br	e668 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e658:	000e5400 	call	e540 <alt_get_errno>
    e65c:	1007883a 	mov	r3,r2
    e660:	00801444 	movi	r2,81
    e664:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e668:	00bfffc4 	movi	r2,-1
}
    e66c:	e037883a 	mov	sp,fp
    e670:	dfc00117 	ldw	ra,4(sp)
    e674:	df000017 	ldw	fp,0(sp)
    e678:	dec00204 	addi	sp,sp,8
    e67c:	f800283a 	ret

0000e680 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e680:	defffd04 	addi	sp,sp,-12
    e684:	dfc00215 	stw	ra,8(sp)
    e688:	df000115 	stw	fp,4(sp)
    e68c:	df000104 	addi	fp,sp,4
    e690:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e694:	d1600604 	addi	r5,gp,-32744
    e698:	e13fff17 	ldw	r4,-4(fp)
    e69c:	000fd400 	call	fd40 <alt_dev_llist_insert>
}
    e6a0:	e037883a 	mov	sp,fp
    e6a4:	dfc00117 	ldw	ra,4(sp)
    e6a8:	df000017 	ldw	fp,0(sp)
    e6ac:	dec00204 	addi	sp,sp,8
    e6b0:	f800283a 	ret

0000e6b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e6b4:	defffd04 	addi	sp,sp,-12
    e6b8:	dfc00215 	stw	ra,8(sp)
    e6bc:	df000115 	stw	fp,4(sp)
    e6c0:	df000104 	addi	fp,sp,4
    e6c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    e6c8:	00106780 	call	10678 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e6cc:	00800044 	movi	r2,1
    e6d0:	1001703a 	wrctl	status,r2
}
    e6d4:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    e6d8:	0001883a 	nop
    e6dc:	e037883a 	mov	sp,fp
    e6e0:	dfc00117 	ldw	ra,4(sp)
    e6e4:	df000017 	ldw	fp,0(sp)
    e6e8:	dec00204 	addi	sp,sp,8
    e6ec:	f800283a 	ret

0000e6f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e6f0:	defffe04 	addi	sp,sp,-8
    e6f4:	dfc00115 	stw	ra,4(sp)
    e6f8:	df000015 	stw	fp,0(sp)
    e6fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    e700:	01c00204 	movi	r7,8
    e704:	01800144 	movi	r6,5
    e708:	000b883a 	mov	r5,zero
    e70c:	013fc834 	movhi	r4,65312
    e710:	21080004 	addi	r4,r4,8192
    e714:	000f27c0 	call	f27c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    e718:	01800104 	movi	r6,4
    e71c:	000b883a 	mov	r5,zero
    e720:	01000074 	movhi	r4,1
    e724:	21076104 	addi	r4,r4,7556
    e728:	000e8f40 	call	e8f4 <altera_avalon_jtag_uart_init>
    e72c:	01000074 	movhi	r4,1
    e730:	21075704 	addi	r4,r4,7516
    e734:	000e6800 	call	e680 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    e738:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    e73c:	01000074 	movhi	r4,1
    e740:	210b6f04 	addi	r4,r4,11708
    e744:	000e6800 	call	e680 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    e748:	01000074 	movhi	r4,1
    e74c:	210b7b04 	addi	r4,r4,11756
    e750:	000e6800 	call	e680 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    e754:	01000074 	movhi	r4,1
    e758:	210b8704 	addi	r4,r4,11804
    e75c:	000f3ac0 	call	f3ac <alt_up_character_lcd_init>
    e760:	01000074 	movhi	r4,1
    e764:	210b8704 	addi	r4,r4,11804
    e768:	000e6800 	call	e680 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    e76c:	01000074 	movhi	r4,1
    e770:	210b9204 	addi	r4,r4,11848
    e774:	000e6800 	call	e680 <alt_dev_reg>
}
    e778:	0001883a 	nop
    e77c:	e037883a 	mov	sp,fp
    e780:	dfc00117 	ldw	ra,4(sp)
    e784:	df000017 	ldw	fp,0(sp)
    e788:	dec00204 	addi	sp,sp,8
    e78c:	f800283a 	ret

0000e790 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e790:	defffa04 	addi	sp,sp,-24
    e794:	dfc00515 	stw	ra,20(sp)
    e798:	df000415 	stw	fp,16(sp)
    e79c:	df000404 	addi	fp,sp,16
    e7a0:	e13ffe15 	stw	r4,-8(fp)
    e7a4:	e17ffd15 	stw	r5,-12(fp)
    e7a8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e7ac:	e0bffe17 	ldw	r2,-8(fp)
    e7b0:	10800017 	ldw	r2,0(r2)
    e7b4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e7b8:	e0bfff17 	ldw	r2,-4(fp)
    e7bc:	10c00a04 	addi	r3,r2,40
    e7c0:	e0bffe17 	ldw	r2,-8(fp)
    e7c4:	10800217 	ldw	r2,8(r2)
    e7c8:	100f883a 	mov	r7,r2
    e7cc:	e1bffc17 	ldw	r6,-16(fp)
    e7d0:	e17ffd17 	ldw	r5,-12(fp)
    e7d4:	1809883a 	mov	r4,r3
    e7d8:	000edb40 	call	edb4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e7dc:	e037883a 	mov	sp,fp
    e7e0:	dfc00117 	ldw	ra,4(sp)
    e7e4:	df000017 	ldw	fp,0(sp)
    e7e8:	dec00204 	addi	sp,sp,8
    e7ec:	f800283a 	ret

0000e7f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e7f0:	defffa04 	addi	sp,sp,-24
    e7f4:	dfc00515 	stw	ra,20(sp)
    e7f8:	df000415 	stw	fp,16(sp)
    e7fc:	df000404 	addi	fp,sp,16
    e800:	e13ffe15 	stw	r4,-8(fp)
    e804:	e17ffd15 	stw	r5,-12(fp)
    e808:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e80c:	e0bffe17 	ldw	r2,-8(fp)
    e810:	10800017 	ldw	r2,0(r2)
    e814:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e818:	e0bfff17 	ldw	r2,-4(fp)
    e81c:	10c00a04 	addi	r3,r2,40
    e820:	e0bffe17 	ldw	r2,-8(fp)
    e824:	10800217 	ldw	r2,8(r2)
    e828:	100f883a 	mov	r7,r2
    e82c:	e1bffc17 	ldw	r6,-16(fp)
    e830:	e17ffd17 	ldw	r5,-12(fp)
    e834:	1809883a 	mov	r4,r3
    e838:	000efd40 	call	efd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e83c:	e037883a 	mov	sp,fp
    e840:	dfc00117 	ldw	ra,4(sp)
    e844:	df000017 	ldw	fp,0(sp)
    e848:	dec00204 	addi	sp,sp,8
    e84c:	f800283a 	ret

0000e850 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e850:	defffc04 	addi	sp,sp,-16
    e854:	dfc00315 	stw	ra,12(sp)
    e858:	df000215 	stw	fp,8(sp)
    e85c:	df000204 	addi	fp,sp,8
    e860:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e864:	e0bffe17 	ldw	r2,-8(fp)
    e868:	10800017 	ldw	r2,0(r2)
    e86c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e870:	e0bfff17 	ldw	r2,-4(fp)
    e874:	10c00a04 	addi	r3,r2,40
    e878:	e0bffe17 	ldw	r2,-8(fp)
    e87c:	10800217 	ldw	r2,8(r2)
    e880:	100b883a 	mov	r5,r2
    e884:	1809883a 	mov	r4,r3
    e888:	000ec580 	call	ec58 <altera_avalon_jtag_uart_close>
}
    e88c:	e037883a 	mov	sp,fp
    e890:	dfc00117 	ldw	ra,4(sp)
    e894:	df000017 	ldw	fp,0(sp)
    e898:	dec00204 	addi	sp,sp,8
    e89c:	f800283a 	ret

0000e8a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e8a0:	defffa04 	addi	sp,sp,-24
    e8a4:	dfc00515 	stw	ra,20(sp)
    e8a8:	df000415 	stw	fp,16(sp)
    e8ac:	df000404 	addi	fp,sp,16
    e8b0:	e13ffe15 	stw	r4,-8(fp)
    e8b4:	e17ffd15 	stw	r5,-12(fp)
    e8b8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e8bc:	e0bffe17 	ldw	r2,-8(fp)
    e8c0:	10800017 	ldw	r2,0(r2)
    e8c4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e8c8:	e0bfff17 	ldw	r2,-4(fp)
    e8cc:	10800a04 	addi	r2,r2,40
    e8d0:	e1bffc17 	ldw	r6,-16(fp)
    e8d4:	e17ffd17 	ldw	r5,-12(fp)
    e8d8:	1009883a 	mov	r4,r2
    e8dc:	000ecc00 	call	ecc0 <altera_avalon_jtag_uart_ioctl>
}
    e8e0:	e037883a 	mov	sp,fp
    e8e4:	dfc00117 	ldw	ra,4(sp)
    e8e8:	df000017 	ldw	fp,0(sp)
    e8ec:	dec00204 	addi	sp,sp,8
    e8f0:	f800283a 	ret

0000e8f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e8f4:	defffb04 	addi	sp,sp,-20
    e8f8:	dfc00415 	stw	ra,16(sp)
    e8fc:	df000315 	stw	fp,12(sp)
    e900:	df000304 	addi	fp,sp,12
    e904:	e13fff15 	stw	r4,-4(fp)
    e908:	e17ffe15 	stw	r5,-8(fp)
    e90c:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e910:	e0bfff17 	ldw	r2,-4(fp)
    e914:	00c00044 	movi	r3,1
    e918:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e91c:	e0bfff17 	ldw	r2,-4(fp)
    e920:	10800017 	ldw	r2,0(r2)
    e924:	10800104 	addi	r2,r2,4
    e928:	1007883a 	mov	r3,r2
    e92c:	e0bfff17 	ldw	r2,-4(fp)
    e930:	10800817 	ldw	r2,32(r2)
    e934:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    e938:	e0bffd17 	ldw	r2,-12(fp)
    e93c:	01800074 	movhi	r6,1
    e940:	31ba6a04 	addi	r6,r6,-5720
    e944:	e17fff17 	ldw	r5,-4(fp)
    e948:	1009883a 	mov	r4,r2
    e94c:	00100b00 	call	100b0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e950:	e0bfff17 	ldw	r2,-4(fp)
    e954:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e958:	e0bfff17 	ldw	r2,-4(fp)
    e95c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e960:	d0e73b17 	ldw	r3,-25364(gp)
    e964:	e1ffff17 	ldw	r7,-4(fp)
    e968:	01800074 	movhi	r6,1
    e96c:	31baee04 	addi	r6,r6,-5192
    e970:	180b883a 	mov	r5,r3
    e974:	1009883a 	mov	r4,r2
    e978:	000fb840 	call	fb84 <alt_alarm_start>
    e97c:	1000040e 	bge	r2,zero,e990 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e980:	e0ffff17 	ldw	r3,-4(fp)
    e984:	00a00034 	movhi	r2,32768
    e988:	10bfffc4 	addi	r2,r2,-1
    e98c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e990:	0001883a 	nop
    e994:	e037883a 	mov	sp,fp
    e998:	dfc00117 	ldw	ra,4(sp)
    e99c:	df000017 	ldw	fp,0(sp)
    e9a0:	dec00204 	addi	sp,sp,8
    e9a4:	f800283a 	ret

0000e9a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e9a8:	defff704 	addi	sp,sp,-36
    e9ac:	df000815 	stw	fp,32(sp)
    e9b0:	df000804 	addi	fp,sp,32
    e9b4:	e13ff915 	stw	r4,-28(fp)
    e9b8:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e9bc:	e0bff917 	ldw	r2,-28(fp)
    e9c0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    e9c4:	e0bffd17 	ldw	r2,-12(fp)
    e9c8:	10800017 	ldw	r2,0(r2)
    e9cc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e9d0:	e0bffc17 	ldw	r2,-16(fp)
    e9d4:	10800104 	addi	r2,r2,4
    e9d8:	10800037 	ldwio	r2,0(r2)
    e9dc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e9e0:	e0bffb17 	ldw	r2,-20(fp)
    e9e4:	1080c00c 	andi	r2,r2,768
    e9e8:	10006d26 	beq	r2,zero,eba0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e9ec:	e0bffb17 	ldw	r2,-20(fp)
    e9f0:	1080400c 	andi	r2,r2,256
    e9f4:	10003526 	beq	r2,zero,eacc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e9f8:	00800074 	movhi	r2,1
    e9fc:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ea00:	e0bffd17 	ldw	r2,-12(fp)
    ea04:	10800a17 	ldw	r2,40(r2)
    ea08:	10800044 	addi	r2,r2,1
    ea0c:	1081ffcc 	andi	r2,r2,2047
    ea10:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    ea14:	e0bffd17 	ldw	r2,-12(fp)
    ea18:	10800b17 	ldw	r2,44(r2)
    ea1c:	e0fffa17 	ldw	r3,-24(fp)
    ea20:	18801526 	beq	r3,r2,ea78 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ea24:	e0bffc17 	ldw	r2,-16(fp)
    ea28:	10800037 	ldwio	r2,0(r2)
    ea2c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ea30:	e0bfff17 	ldw	r2,-4(fp)
    ea34:	10a0000c 	andi	r2,r2,32768
    ea38:	10001126 	beq	r2,zero,ea80 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ea3c:	e0bffd17 	ldw	r2,-12(fp)
    ea40:	10800a17 	ldw	r2,40(r2)
    ea44:	e0ffff17 	ldw	r3,-4(fp)
    ea48:	1809883a 	mov	r4,r3
    ea4c:	e0fffd17 	ldw	r3,-12(fp)
    ea50:	1885883a 	add	r2,r3,r2
    ea54:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ea58:	e0bffd17 	ldw	r2,-12(fp)
    ea5c:	10800a17 	ldw	r2,40(r2)
    ea60:	10800044 	addi	r2,r2,1
    ea64:	10c1ffcc 	andi	r3,r2,2047
    ea68:	e0bffd17 	ldw	r2,-12(fp)
    ea6c:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    ea70:	0001883a 	nop
      {
    ea74:	003fe206 	br	ea00 <altera_avalon_jtag_uart_irq+0x58>
          break;
    ea78:	0001883a 	nop
    ea7c:	00000106 	br	ea84 <altera_avalon_jtag_uart_irq+0xdc>
          break;
    ea80:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ea84:	e0bfff17 	ldw	r2,-4(fp)
    ea88:	10bfffec 	andhi	r2,r2,65535
    ea8c:	10000f26 	beq	r2,zero,eacc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ea90:	e0bffd17 	ldw	r2,-12(fp)
    ea94:	10c00817 	ldw	r3,32(r2)
    ea98:	00bfff84 	movi	r2,-2
    ea9c:	1886703a 	and	r3,r3,r2
    eaa0:	e0bffd17 	ldw	r2,-12(fp)
    eaa4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    eaa8:	e0bffc17 	ldw	r2,-16(fp)
    eaac:	10800104 	addi	r2,r2,4
    eab0:	1007883a 	mov	r3,r2
    eab4:	e0bffd17 	ldw	r2,-12(fp)
    eab8:	10800817 	ldw	r2,32(r2)
    eabc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eac0:	e0bffc17 	ldw	r2,-16(fp)
    eac4:	10800104 	addi	r2,r2,4
    eac8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    eacc:	e0bffb17 	ldw	r2,-20(fp)
    ead0:	1080800c 	andi	r2,r2,512
    ead4:	103fbe26 	beq	r2,zero,e9d0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ead8:	e0bffb17 	ldw	r2,-20(fp)
    eadc:	1004d43a 	srli	r2,r2,16
    eae0:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    eae4:	00001406 	br	eb38 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    eae8:	e0bffc17 	ldw	r2,-16(fp)
    eaec:	e0fffd17 	ldw	r3,-12(fp)
    eaf0:	18c00d17 	ldw	r3,52(r3)
    eaf4:	e13ffd17 	ldw	r4,-12(fp)
    eaf8:	20c7883a 	add	r3,r4,r3
    eafc:	18c20e03 	ldbu	r3,2104(r3)
    eb00:	18c03fcc 	andi	r3,r3,255
    eb04:	18c0201c 	xori	r3,r3,128
    eb08:	18ffe004 	addi	r3,r3,-128
    eb0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eb10:	e0bffd17 	ldw	r2,-12(fp)
    eb14:	10800d17 	ldw	r2,52(r2)
    eb18:	10800044 	addi	r2,r2,1
    eb1c:	10c1ffcc 	andi	r3,r2,2047
    eb20:	e0bffd17 	ldw	r2,-12(fp)
    eb24:	10c00d15 	stw	r3,52(r2)
    eb28:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    eb2c:	e0bffe17 	ldw	r2,-8(fp)
    eb30:	10bfffc4 	addi	r2,r2,-1
    eb34:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    eb38:	e0bffe17 	ldw	r2,-8(fp)
    eb3c:	10000526 	beq	r2,zero,eb54 <altera_avalon_jtag_uart_irq+0x1ac>
    eb40:	e0bffd17 	ldw	r2,-12(fp)
    eb44:	10c00d17 	ldw	r3,52(r2)
    eb48:	e0bffd17 	ldw	r2,-12(fp)
    eb4c:	10800c17 	ldw	r2,48(r2)
    eb50:	18bfe51e 	bne	r3,r2,eae8 <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
    eb54:	e0bffe17 	ldw	r2,-8(fp)
    eb58:	103f9d26 	beq	r2,zero,e9d0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    eb5c:	e0bffd17 	ldw	r2,-12(fp)
    eb60:	10c00817 	ldw	r3,32(r2)
    eb64:	00bfff44 	movi	r2,-3
    eb68:	1886703a 	and	r3,r3,r2
    eb6c:	e0bffd17 	ldw	r2,-12(fp)
    eb70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eb74:	e0bffd17 	ldw	r2,-12(fp)
    eb78:	10800017 	ldw	r2,0(r2)
    eb7c:	10800104 	addi	r2,r2,4
    eb80:	1007883a 	mov	r3,r2
    eb84:	e0bffd17 	ldw	r2,-12(fp)
    eb88:	10800817 	ldw	r2,32(r2)
    eb8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eb90:	e0bffc17 	ldw	r2,-16(fp)
    eb94:	10800104 	addi	r2,r2,4
    eb98:	10800037 	ldwio	r2,0(r2)
  {
    eb9c:	003f8c06 	br	e9d0 <altera_avalon_jtag_uart_irq+0x28>
      break;
    eba0:	0001883a 	nop
      }
    }
  }
}
    eba4:	0001883a 	nop
    eba8:	e037883a 	mov	sp,fp
    ebac:	df000017 	ldw	fp,0(sp)
    ebb0:	dec00104 	addi	sp,sp,4
    ebb4:	f800283a 	ret

0000ebb8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ebb8:	defffc04 	addi	sp,sp,-16
    ebbc:	df000315 	stw	fp,12(sp)
    ebc0:	df000304 	addi	fp,sp,12
    ebc4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ebc8:	e0bffd17 	ldw	r2,-12(fp)
    ebcc:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ebd0:	e0bfff17 	ldw	r2,-4(fp)
    ebd4:	10800017 	ldw	r2,0(r2)
    ebd8:	10800104 	addi	r2,r2,4
    ebdc:	10800037 	ldwio	r2,0(r2)
    ebe0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ebe4:	e0bffe17 	ldw	r2,-8(fp)
    ebe8:	1081000c 	andi	r2,r2,1024
    ebec:	10000b26 	beq	r2,zero,ec1c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ebf0:	e0bfff17 	ldw	r2,-4(fp)
    ebf4:	10800017 	ldw	r2,0(r2)
    ebf8:	10800104 	addi	r2,r2,4
    ebfc:	1007883a 	mov	r3,r2
    ec00:	e0bfff17 	ldw	r2,-4(fp)
    ec04:	10800817 	ldw	r2,32(r2)
    ec08:	10810014 	ori	r2,r2,1024
    ec0c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    ec10:	e0bfff17 	ldw	r2,-4(fp)
    ec14:	10000915 	stw	zero,36(r2)
    ec18:	00000a06 	br	ec44 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ec1c:	e0bfff17 	ldw	r2,-4(fp)
    ec20:	10c00917 	ldw	r3,36(r2)
    ec24:	00a00034 	movhi	r2,32768
    ec28:	10bfff04 	addi	r2,r2,-4
    ec2c:	10c00536 	bltu	r2,r3,ec44 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    ec30:	e0bfff17 	ldw	r2,-4(fp)
    ec34:	10800917 	ldw	r2,36(r2)
    ec38:	10c00044 	addi	r3,r2,1
    ec3c:	e0bfff17 	ldw	r2,-4(fp)
    ec40:	10c00915 	stw	r3,36(r2)
    ec44:	d0a73b17 	ldw	r2,-25364(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ec48:	e037883a 	mov	sp,fp
    ec4c:	df000017 	ldw	fp,0(sp)
    ec50:	dec00104 	addi	sp,sp,4
    ec54:	f800283a 	ret

0000ec58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ec58:	defffd04 	addi	sp,sp,-12
    ec5c:	df000215 	stw	fp,8(sp)
    ec60:	df000204 	addi	fp,sp,8
    ec64:	e13fff15 	stw	r4,-4(fp)
    ec68:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ec6c:	00000506 	br	ec84 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    ec70:	e0bffe17 	ldw	r2,-8(fp)
    ec74:	1090000c 	andi	r2,r2,16384
    ec78:	10000226 	beq	r2,zero,ec84 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    ec7c:	00bffd44 	movi	r2,-11
    ec80:	00000b06 	br	ecb0 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ec84:	e0bfff17 	ldw	r2,-4(fp)
    ec88:	10c00d17 	ldw	r3,52(r2)
    ec8c:	e0bfff17 	ldw	r2,-4(fp)
    ec90:	10800c17 	ldw	r2,48(r2)
    ec94:	18800526 	beq	r3,r2,ecac <altera_avalon_jtag_uart_close+0x54>
    ec98:	e0bfff17 	ldw	r2,-4(fp)
    ec9c:	10c00917 	ldw	r3,36(r2)
    eca0:	e0bfff17 	ldw	r2,-4(fp)
    eca4:	10800117 	ldw	r2,4(r2)
    eca8:	18bff136 	bltu	r3,r2,ec70 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    ecac:	0005883a 	mov	r2,zero
}
    ecb0:	e037883a 	mov	sp,fp
    ecb4:	df000017 	ldw	fp,0(sp)
    ecb8:	dec00104 	addi	sp,sp,4
    ecbc:	f800283a 	ret

0000ecc0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    ecc0:	defffa04 	addi	sp,sp,-24
    ecc4:	df000515 	stw	fp,20(sp)
    ecc8:	df000504 	addi	fp,sp,20
    eccc:	e13ffd15 	stw	r4,-12(fp)
    ecd0:	e17ffc15 	stw	r5,-16(fp)
    ecd4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    ecd8:	00bff9c4 	movi	r2,-25
    ecdc:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    ece0:	e0bffc17 	ldw	r2,-16(fp)
    ece4:	109a8060 	cmpeqi	r2,r2,27137
    ece8:	1000041e 	bne	r2,zero,ecfc <altera_avalon_jtag_uart_ioctl+0x3c>
    ecec:	e0bffc17 	ldw	r2,-16(fp)
    ecf0:	109a80a0 	cmpeqi	r2,r2,27138
    ecf4:	1000181e 	bne	r2,zero,ed58 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    ecf8:	00002906 	br	eda0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    ecfc:	e0bffd17 	ldw	r2,-12(fp)
    ed00:	10c00117 	ldw	r3,4(r2)
    ed04:	00a00034 	movhi	r2,32768
    ed08:	10bfffc4 	addi	r2,r2,-1
    ed0c:	18802126 	beq	r3,r2,ed94 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    ed10:	e0bffb17 	ldw	r2,-20(fp)
    ed14:	10800017 	ldw	r2,0(r2)
    ed18:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ed1c:	e0bffe17 	ldw	r2,-8(fp)
    ed20:	10800090 	cmplti	r2,r2,2
    ed24:	1000061e 	bne	r2,zero,ed40 <altera_avalon_jtag_uart_ioctl+0x80>
    ed28:	e0fffe17 	ldw	r3,-8(fp)
    ed2c:	00a00034 	movhi	r2,32768
    ed30:	10bfffc4 	addi	r2,r2,-1
    ed34:	18800226 	beq	r3,r2,ed40 <altera_avalon_jtag_uart_ioctl+0x80>
    ed38:	e0bffe17 	ldw	r2,-8(fp)
    ed3c:	00000206 	br	ed48 <altera_avalon_jtag_uart_ioctl+0x88>
    ed40:	00a00034 	movhi	r2,32768
    ed44:	10bfff84 	addi	r2,r2,-2
    ed48:	e0fffd17 	ldw	r3,-12(fp)
    ed4c:	18800115 	stw	r2,4(r3)
      rc = 0;
    ed50:	e03fff15 	stw	zero,-4(fp)
    break;
    ed54:	00000f06 	br	ed94 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    ed58:	e0bffd17 	ldw	r2,-12(fp)
    ed5c:	10c00117 	ldw	r3,4(r2)
    ed60:	00a00034 	movhi	r2,32768
    ed64:	10bfffc4 	addi	r2,r2,-1
    ed68:	18800c26 	beq	r3,r2,ed9c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ed6c:	e0bffd17 	ldw	r2,-12(fp)
    ed70:	10c00917 	ldw	r3,36(r2)
    ed74:	e0bffd17 	ldw	r2,-12(fp)
    ed78:	10800117 	ldw	r2,4(r2)
    ed7c:	1885803a 	cmpltu	r2,r3,r2
    ed80:	10c03fcc 	andi	r3,r2,255
    ed84:	e0bffb17 	ldw	r2,-20(fp)
    ed88:	10c00015 	stw	r3,0(r2)
      rc = 0;
    ed8c:	e03fff15 	stw	zero,-4(fp)
    break;
    ed90:	00000206 	br	ed9c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    ed94:	0001883a 	nop
    ed98:	00000106 	br	eda0 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    ed9c:	0001883a 	nop
  }

  return rc;
    eda0:	e0bfff17 	ldw	r2,-4(fp)
}
    eda4:	e037883a 	mov	sp,fp
    eda8:	df000017 	ldw	fp,0(sp)
    edac:	dec00104 	addi	sp,sp,4
    edb0:	f800283a 	ret

0000edb4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    edb4:	defff304 	addi	sp,sp,-52
    edb8:	dfc00c15 	stw	ra,48(sp)
    edbc:	df000b15 	stw	fp,44(sp)
    edc0:	df000b04 	addi	fp,sp,44
    edc4:	e13ff815 	stw	r4,-32(fp)
    edc8:	e17ff715 	stw	r5,-36(fp)
    edcc:	e1bff615 	stw	r6,-40(fp)
    edd0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
    edd4:	e0bff717 	ldw	r2,-36(fp)
    edd8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    eddc:	00004706 	br	eefc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ede0:	e0bff817 	ldw	r2,-32(fp)
    ede4:	10800a17 	ldw	r2,40(r2)
    ede8:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    edec:	e0bff817 	ldw	r2,-32(fp)
    edf0:	10800b17 	ldw	r2,44(r2)
    edf4:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    edf8:	e0fffd17 	ldw	r3,-12(fp)
    edfc:	e0bffc17 	ldw	r2,-16(fp)
    ee00:	18800536 	bltu	r3,r2,ee18 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    ee04:	e0fffd17 	ldw	r3,-12(fp)
    ee08:	e0bffc17 	ldw	r2,-16(fp)
    ee0c:	1885c83a 	sub	r2,r3,r2
    ee10:	e0bffe15 	stw	r2,-8(fp)
    ee14:	00000406 	br	ee28 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ee18:	00c20004 	movi	r3,2048
    ee1c:	e0bffc17 	ldw	r2,-16(fp)
    ee20:	1885c83a 	sub	r2,r3,r2
    ee24:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    ee28:	e0bffe17 	ldw	r2,-8(fp)
    ee2c:	10001e26 	beq	r2,zero,eea8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    ee30:	e0fff617 	ldw	r3,-40(fp)
    ee34:	e0bffe17 	ldw	r2,-8(fp)
    ee38:	1880022e 	bgeu	r3,r2,ee44 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    ee3c:	e0bff617 	ldw	r2,-40(fp)
    ee40:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    ee44:	e0bff817 	ldw	r2,-32(fp)
    ee48:	10c00e04 	addi	r3,r2,56
    ee4c:	e0bffc17 	ldw	r2,-16(fp)
    ee50:	1885883a 	add	r2,r3,r2
    ee54:	e1bffe17 	ldw	r6,-8(fp)
    ee58:	100b883a 	mov	r5,r2
    ee5c:	e13fff17 	ldw	r4,-4(fp)
    ee60:	000640c0 	call	640c <memcpy>
      ptr   += n;
    ee64:	e0ffff17 	ldw	r3,-4(fp)
    ee68:	e0bffe17 	ldw	r2,-8(fp)
    ee6c:	1885883a 	add	r2,r3,r2
    ee70:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    ee74:	e0fff617 	ldw	r3,-40(fp)
    ee78:	e0bffe17 	ldw	r2,-8(fp)
    ee7c:	1885c83a 	sub	r2,r3,r2
    ee80:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee84:	e0fffc17 	ldw	r3,-16(fp)
    ee88:	e0bffe17 	ldw	r2,-8(fp)
    ee8c:	1885883a 	add	r2,r3,r2
    ee90:	10c1ffcc 	andi	r3,r2,2047
    ee94:	e0bff817 	ldw	r2,-32(fp)
    ee98:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ee9c:	e0bff617 	ldw	r2,-40(fp)
    eea0:	00bfcf16 	blt	zero,r2,ede0 <altera_avalon_jtag_uart_read+0x2c>
    eea4:	00000106 	br	eeac <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
    eea8:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    eeac:	e0ffff17 	ldw	r3,-4(fp)
    eeb0:	e0bff717 	ldw	r2,-36(fp)
    eeb4:	1880141e 	bne	r3,r2,ef08 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    eeb8:	e0bff517 	ldw	r2,-44(fp)
    eebc:	1090000c 	andi	r2,r2,16384
    eec0:	1000131e 	bne	r2,zero,ef10 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    eec4:	0001883a 	nop
    eec8:	e0bff817 	ldw	r2,-32(fp)
    eecc:	10800a17 	ldw	r2,40(r2)
    eed0:	e0fffd17 	ldw	r3,-12(fp)
    eed4:	1880051e 	bne	r3,r2,eeec <altera_avalon_jtag_uart_read+0x138>
    eed8:	e0bff817 	ldw	r2,-32(fp)
    eedc:	10c00917 	ldw	r3,36(r2)
    eee0:	e0bff817 	ldw	r2,-32(fp)
    eee4:	10800117 	ldw	r2,4(r2)
    eee8:	18bff736 	bltu	r3,r2,eec8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    eeec:	e0bff817 	ldw	r2,-32(fp)
    eef0:	10800a17 	ldw	r2,40(r2)
    eef4:	e0fffd17 	ldw	r3,-12(fp)
    eef8:	18800726 	beq	r3,r2,ef18 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
    eefc:	e0bff617 	ldw	r2,-40(fp)
    ef00:	00bfb716 	blt	zero,r2,ede0 <altera_avalon_jtag_uart_read+0x2c>
    ef04:	00000506 	br	ef1c <altera_avalon_jtag_uart_read+0x168>
      break;
    ef08:	0001883a 	nop
    ef0c:	00000306 	br	ef1c <altera_avalon_jtag_uart_read+0x168>
      break;
    ef10:	0001883a 	nop
    ef14:	00000106 	br	ef1c <altera_avalon_jtag_uart_read+0x168>
      break;
    ef18:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ef1c:	e0ffff17 	ldw	r3,-4(fp)
    ef20:	e0bff717 	ldw	r2,-36(fp)
    ef24:	18801926 	beq	r3,r2,ef8c <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
    ef28:	0005303a 	rdctl	r2,status
    ef2c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef30:	e0fff917 	ldw	r3,-28(fp)
    ef34:	00bfff84 	movi	r2,-2
    ef38:	1884703a 	and	r2,r3,r2
    ef3c:	1001703a 	wrctl	status,r2
  return context;
    ef40:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ef44:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef48:	e0bff817 	ldw	r2,-32(fp)
    ef4c:	10800817 	ldw	r2,32(r2)
    ef50:	10c00054 	ori	r3,r2,1
    ef54:	e0bff817 	ldw	r2,-32(fp)
    ef58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef5c:	e0bff817 	ldw	r2,-32(fp)
    ef60:	10800017 	ldw	r2,0(r2)
    ef64:	10800104 	addi	r2,r2,4
    ef68:	1007883a 	mov	r3,r2
    ef6c:	e0bff817 	ldw	r2,-32(fp)
    ef70:	10800817 	ldw	r2,32(r2)
    ef74:	18800035 	stwio	r2,0(r3)
    ef78:	e0bffb17 	ldw	r2,-20(fp)
    ef7c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    ef80:	e0bffa17 	ldw	r2,-24(fp)
    ef84:	1001703a 	wrctl	status,r2
}
    ef88:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ef8c:	e0ffff17 	ldw	r3,-4(fp)
    ef90:	e0bff717 	ldw	r2,-36(fp)
    ef94:	18800426 	beq	r3,r2,efa8 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
    ef98:	e0ffff17 	ldw	r3,-4(fp)
    ef9c:	e0bff717 	ldw	r2,-36(fp)
    efa0:	1885c83a 	sub	r2,r3,r2
    efa4:	00000606 	br	efc0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    efa8:	e0bff517 	ldw	r2,-44(fp)
    efac:	1090000c 	andi	r2,r2,16384
    efb0:	10000226 	beq	r2,zero,efbc <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
    efb4:	00bffd44 	movi	r2,-11
    efb8:	00000106 	br	efc0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    efbc:	00bffec4 	movi	r2,-5
}
    efc0:	e037883a 	mov	sp,fp
    efc4:	dfc00117 	ldw	ra,4(sp)
    efc8:	df000017 	ldw	fp,0(sp)
    efcc:	dec00204 	addi	sp,sp,8
    efd0:	f800283a 	ret

0000efd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    efd4:	defff304 	addi	sp,sp,-52
    efd8:	dfc00c15 	stw	ra,48(sp)
    efdc:	df000b15 	stw	fp,44(sp)
    efe0:	df000b04 	addi	fp,sp,44
    efe4:	e13ff815 	stw	r4,-32(fp)
    efe8:	e17ff715 	stw	r5,-36(fp)
    efec:	e1bff615 	stw	r6,-40(fp)
    eff0:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    eff4:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    eff8:	e0bff717 	ldw	r2,-36(fp)
    effc:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f000:	00003706 	br	f0e0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f004:	e0bff817 	ldw	r2,-32(fp)
    f008:	10800c17 	ldw	r2,48(r2)
    f00c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    f010:	e0bff817 	ldw	r2,-32(fp)
    f014:	10800d17 	ldw	r2,52(r2)
    f018:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    f01c:	e0fffc17 	ldw	r3,-16(fp)
    f020:	e0bfff17 	ldw	r2,-4(fp)
    f024:	1880062e 	bgeu	r3,r2,f040 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    f028:	e0ffff17 	ldw	r3,-4(fp)
    f02c:	e0bffc17 	ldw	r2,-16(fp)
    f030:	1885c83a 	sub	r2,r3,r2
    f034:	10bfffc4 	addi	r2,r2,-1
    f038:	e0bffe15 	stw	r2,-8(fp)
    f03c:	00000b06 	br	f06c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    f040:	e0bfff17 	ldw	r2,-4(fp)
    f044:	10000526 	beq	r2,zero,f05c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f048:	00c20004 	movi	r3,2048
    f04c:	e0bffc17 	ldw	r2,-16(fp)
    f050:	1885c83a 	sub	r2,r3,r2
    f054:	e0bffe15 	stw	r2,-8(fp)
    f058:	00000406 	br	f06c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f05c:	00c1ffc4 	movi	r3,2047
    f060:	e0bffc17 	ldw	r2,-16(fp)
    f064:	1885c83a 	sub	r2,r3,r2
    f068:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    f06c:	e0bffe17 	ldw	r2,-8(fp)
    f070:	10001e26 	beq	r2,zero,f0ec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    f074:	e0fff617 	ldw	r3,-40(fp)
    f078:	e0bffe17 	ldw	r2,-8(fp)
    f07c:	1880022e 	bgeu	r3,r2,f088 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    f080:	e0bff617 	ldw	r2,-40(fp)
    f084:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    f088:	e0bff817 	ldw	r2,-32(fp)
    f08c:	10c20e04 	addi	r3,r2,2104
    f090:	e0bffc17 	ldw	r2,-16(fp)
    f094:	1885883a 	add	r2,r3,r2
    f098:	e1bffe17 	ldw	r6,-8(fp)
    f09c:	e17ff717 	ldw	r5,-36(fp)
    f0a0:	1009883a 	mov	r4,r2
    f0a4:	000640c0 	call	640c <memcpy>
      ptr   += n;
    f0a8:	e0fff717 	ldw	r3,-36(fp)
    f0ac:	e0bffe17 	ldw	r2,-8(fp)
    f0b0:	1885883a 	add	r2,r3,r2
    f0b4:	e0bff715 	stw	r2,-36(fp)
      count -= n;
    f0b8:	e0fff617 	ldw	r3,-40(fp)
    f0bc:	e0bffe17 	ldw	r2,-8(fp)
    f0c0:	1885c83a 	sub	r2,r3,r2
    f0c4:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f0c8:	e0fffc17 	ldw	r3,-16(fp)
    f0cc:	e0bffe17 	ldw	r2,-8(fp)
    f0d0:	1885883a 	add	r2,r3,r2
    f0d4:	10c1ffcc 	andi	r3,r2,2047
    f0d8:	e0bff817 	ldw	r2,-32(fp)
    f0dc:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
    f0e0:	e0bff617 	ldw	r2,-40(fp)
    f0e4:	00bfc716 	blt	zero,r2,f004 <altera_avalon_jtag_uart_write+0x30>
    f0e8:	00000106 	br	f0f0 <altera_avalon_jtag_uart_write+0x11c>
        break;
    f0ec:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    f0f0:	0005303a 	rdctl	r2,status
    f0f4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0f8:	e0fff917 	ldw	r3,-28(fp)
    f0fc:	00bfff84 	movi	r2,-2
    f100:	1884703a 	and	r2,r3,r2
    f104:	1001703a 	wrctl	status,r2
  return context;
    f108:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    f10c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f110:	e0bff817 	ldw	r2,-32(fp)
    f114:	10800817 	ldw	r2,32(r2)
    f118:	10c00094 	ori	r3,r2,2
    f11c:	e0bff817 	ldw	r2,-32(fp)
    f120:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f124:	e0bff817 	ldw	r2,-32(fp)
    f128:	10800017 	ldw	r2,0(r2)
    f12c:	10800104 	addi	r2,r2,4
    f130:	1007883a 	mov	r3,r2
    f134:	e0bff817 	ldw	r2,-32(fp)
    f138:	10800817 	ldw	r2,32(r2)
    f13c:	18800035 	stwio	r2,0(r3)
    f140:	e0bffb17 	ldw	r2,-20(fp)
    f144:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    f148:	e0bffa17 	ldw	r2,-24(fp)
    f14c:	1001703a 	wrctl	status,r2
}
    f150:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    f154:	e0bff617 	ldw	r2,-40(fp)
    f158:	0080100e 	bge	zero,r2,f19c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    f15c:	e0bff517 	ldw	r2,-44(fp)
    f160:	1090000c 	andi	r2,r2,16384
    f164:	1000101e 	bne	r2,zero,f1a8 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f168:	0001883a 	nop
    f16c:	e0bff817 	ldw	r2,-32(fp)
    f170:	10800d17 	ldw	r2,52(r2)
    f174:	e0ffff17 	ldw	r3,-4(fp)
    f178:	1880051e 	bne	r3,r2,f190 <altera_avalon_jtag_uart_write+0x1bc>
    f17c:	e0bff817 	ldw	r2,-32(fp)
    f180:	10c00917 	ldw	r3,36(r2)
    f184:	e0bff817 	ldw	r2,-32(fp)
    f188:	10800117 	ldw	r2,4(r2)
    f18c:	18bff736 	bltu	r3,r2,f16c <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f190:	e0bff817 	ldw	r2,-32(fp)
    f194:	10800917 	ldw	r2,36(r2)
    f198:	1000051e 	bne	r2,zero,f1b0 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
    f19c:	e0bff617 	ldw	r2,-40(fp)
    f1a0:	00bfcf16 	blt	zero,r2,f0e0 <altera_avalon_jtag_uart_write+0x10c>
    f1a4:	00000306 	br	f1b4 <altera_avalon_jtag_uart_write+0x1e0>
        break;
    f1a8:	0001883a 	nop
    f1ac:	00000106 	br	f1b4 <altera_avalon_jtag_uart_write+0x1e0>
         break;
    f1b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f1b4:	e0fff717 	ldw	r3,-36(fp)
    f1b8:	e0bffd17 	ldw	r2,-12(fp)
    f1bc:	18800426 	beq	r3,r2,f1d0 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
    f1c0:	e0fff717 	ldw	r3,-36(fp)
    f1c4:	e0bffd17 	ldw	r2,-12(fp)
    f1c8:	1885c83a 	sub	r2,r3,r2
    f1cc:	00000606 	br	f1e8 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
    f1d0:	e0bff517 	ldw	r2,-44(fp)
    f1d4:	1090000c 	andi	r2,r2,16384
    f1d8:	10000226 	beq	r2,zero,f1e4 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
    f1dc:	00bffd44 	movi	r2,-11
    f1e0:	00000106 	br	f1e8 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f1e4:	00bffec4 	movi	r2,-5
}
    f1e8:	e037883a 	mov	sp,fp
    f1ec:	dfc00117 	ldw	ra,4(sp)
    f1f0:	df000017 	ldw	fp,0(sp)
    f1f4:	dec00204 	addi	sp,sp,8
    f1f8:	f800283a 	ret

0000f1fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f1fc:	defff904 	addi	sp,sp,-28
    f200:	dfc00615 	stw	ra,24(sp)
    f204:	df000515 	stw	fp,20(sp)
    f208:	df000504 	addi	fp,sp,20
    f20c:	e13ffc15 	stw	r4,-16(fp)
    f210:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f214:	0007883a 	mov	r3,zero
    f218:	e0bffc17 	ldw	r2,-16(fp)
    f21c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f220:	e0bffc17 	ldw	r2,-16(fp)
    f224:	10800104 	addi	r2,r2,4
    f228:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    f22c:	0005303a 	rdctl	r2,status
    f230:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f234:	e0fffd17 	ldw	r3,-12(fp)
    f238:	00bfff84 	movi	r2,-2
    f23c:	1884703a 	and	r2,r3,r2
    f240:	1001703a 	wrctl	status,r2
  return context;
    f244:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    f248:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    f24c:	001054c0 	call	1054c <alt_tick>
    f250:	e0bfff17 	ldw	r2,-4(fp)
    f254:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    f258:	e0bffe17 	ldw	r2,-8(fp)
    f25c:	1001703a 	wrctl	status,r2
}
    f260:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    f264:	0001883a 	nop
    f268:	e037883a 	mov	sp,fp
    f26c:	dfc00117 	ldw	ra,4(sp)
    f270:	df000017 	ldw	fp,0(sp)
    f274:	dec00204 	addi	sp,sp,8
    f278:	f800283a 	ret

0000f27c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f27c:	defff904 	addi	sp,sp,-28
    f280:	dfc00615 	stw	ra,24(sp)
    f284:	df000515 	stw	fp,20(sp)
    f288:	df000504 	addi	fp,sp,20
    f28c:	e13ffe15 	stw	r4,-8(fp)
    f290:	e17ffd15 	stw	r5,-12(fp)
    f294:	e1bffc15 	stw	r6,-16(fp)
    f298:	e1fffb15 	stw	r7,-20(fp)
    f29c:	e0bffb17 	ldw	r2,-20(fp)
    f2a0:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f2a4:	d0a73b17 	ldw	r2,-25364(gp)
    f2a8:	1000031e 	bne	r2,zero,f2b8 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    f2ac:	e0bfff17 	ldw	r2,-4(fp)
    f2b0:	d0a73b15 	stw	r2,-25364(gp)
    return 0;
    f2b4:	00000106 	br	f2bc <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    f2b8:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f2bc:	e0bffe17 	ldw	r2,-8(fp)
    f2c0:	10800104 	addi	r2,r2,4
    f2c4:	00c001c4 	movi	r3,7
    f2c8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    f2cc:	01800074 	movhi	r6,1
    f2d0:	31bc7f04 	addi	r6,r6,-3588
    f2d4:	e17ffe17 	ldw	r5,-8(fp)
    f2d8:	e13ffc17 	ldw	r4,-16(fp)
    f2dc:	00100b00 	call	100b0 <alt_irq_register>
#endif  
}
    f2e0:	0001883a 	nop
    f2e4:	e037883a 	mov	sp,fp
    f2e8:	dfc00117 	ldw	ra,4(sp)
    f2ec:	df000017 	ldw	fp,0(sp)
    f2f0:	dec00204 	addi	sp,sp,8
    f2f4:	f800283a 	ret

0000f2f8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    f2f8:	defffc04 	addi	sp,sp,-16
    f2fc:	df000315 	stw	fp,12(sp)
    f300:	df000304 	addi	fp,sp,12
    f304:	e13ffe15 	stw	r4,-8(fp)
    f308:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    f30c:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
    f310:	e0bffd17 	ldw	r2,-12(fp)
    f314:	1000061e 	bne	r2,zero,f330 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    f318:	e0bffe17 	ldw	r2,-8(fp)
    f31c:	1007883a 	mov	r3,r2
    f320:	e0bfffc3 	ldbu	r2,-1(fp)
    f324:	10c4b03a 	or	r2,r2,r3
    f328:	e0bfffc5 	stb	r2,-1(fp)
    f32c:	00000806 	br	f350 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    f330:	e0bffe17 	ldw	r2,-8(fp)
    f334:	1007883a 	mov	r3,r2
    f338:	e0bfffc3 	ldbu	r2,-1(fp)
    f33c:	10c4b03a 	or	r2,r2,r3
    f340:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
    f344:	e0bfffc3 	ldbu	r2,-1(fp)
    f348:	10801014 	ori	r2,r2,64
    f34c:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    f350:	e0ffffc3 	ldbu	r3,-1(fp)
    f354:	00bfe004 	movi	r2,-128
    f358:	1884b03a 	or	r2,r3,r2
}
    f35c:	e037883a 	mov	sp,fp
    f360:	df000017 	ldw	fp,0(sp)
    f364:	dec00104 	addi	sp,sp,4
    f368:	f800283a 	ret

0000f36c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    f36c:	defffd04 	addi	sp,sp,-12
    f370:	df000215 	stw	fp,8(sp)
    f374:	df000204 	addi	fp,sp,8
    f378:	e13fff15 	stw	r4,-4(fp)
    f37c:	2805883a 	mov	r2,r5
    f380:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    f384:	e0bfff17 	ldw	r2,-4(fp)
    f388:	10800a17 	ldw	r2,40(r2)
    f38c:	1007883a 	mov	r3,r2
    f390:	e0bffe03 	ldbu	r2,-8(fp)
    f394:	18800025 	stbio	r2,0(r3)
}
    f398:	0001883a 	nop
    f39c:	e037883a 	mov	sp,fp
    f3a0:	df000017 	ldw	fp,0(sp)
    f3a4:	dec00104 	addi	sp,sp,4
    f3a8:	f800283a 	ret

0000f3ac <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    f3ac:	defffe04 	addi	sp,sp,-8
    f3b0:	df000115 	stw	fp,4(sp)
    f3b4:	df000104 	addi	fp,sp,4
    f3b8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    f3bc:	e0bfff17 	ldw	r2,-4(fp)
    f3c0:	10800a17 	ldw	r2,40(r2)
    f3c4:	1007883a 	mov	r3,r2
    f3c8:	00800044 	movi	r2,1
    f3cc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    f3d0:	0001883a 	nop
    f3d4:	e037883a 	mov	sp,fp
    f3d8:	df000017 	ldw	fp,0(sp)
    f3dc:	dec00104 	addi	sp,sp,4
    f3e0:	f800283a 	ret

0000f3e4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    f3e4:	defffc04 	addi	sp,sp,-16
    f3e8:	dfc00315 	stw	ra,12(sp)
    f3ec:	df000215 	stw	fp,8(sp)
    f3f0:	df000204 	addi	fp,sp,8
    f3f4:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    f3f8:	d1600604 	addi	r5,gp,-32744
    f3fc:	e13ffe17 	ldw	r4,-8(fp)
    f400:	000feb00 	call	feb0 <alt_find_dev>
    f404:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    f408:	e0bfff17 	ldw	r2,-4(fp)
}
    f40c:	e037883a 	mov	sp,fp
    f410:	dfc00117 	ldw	ra,4(sp)
    f414:	df000017 	ldw	fp,0(sp)
    f418:	dec00204 	addi	sp,sp,8
    f41c:	f800283a 	ret

0000f420 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    f420:	defffb04 	addi	sp,sp,-20
    f424:	df000415 	stw	fp,16(sp)
    f428:	df000404 	addi	fp,sp,16
    f42c:	e13ffe15 	stw	r4,-8(fp)
    f430:	e17ffd15 	stw	r5,-12(fp)
    f434:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    f438:	e03fff15 	stw	zero,-4(fp)
    f43c:	00000f06 	br	f47c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    f440:	e0bffe17 	ldw	r2,-8(fp)
    f444:	10800a17 	ldw	r2,40(r2)
    f448:	10800044 	addi	r2,r2,1
    f44c:	1009883a 	mov	r4,r2
    f450:	e0fffd17 	ldw	r3,-12(fp)
    f454:	e0bfff17 	ldw	r2,-4(fp)
    f458:	1885883a 	add	r2,r3,r2
    f45c:	10800003 	ldbu	r2,0(r2)
    f460:	10803fcc 	andi	r2,r2,255
    f464:	1080201c 	xori	r2,r2,128
    f468:	10bfe004 	addi	r2,r2,-128
    f46c:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
    f470:	e0bfff17 	ldw	r2,-4(fp)
    f474:	10800044 	addi	r2,r2,1
    f478:	e0bfff15 	stw	r2,-4(fp)
    f47c:	e0ffff17 	ldw	r3,-4(fp)
    f480:	e0bffc17 	ldw	r2,-16(fp)
    f484:	18bfee36 	bltu	r3,r2,f440 <alt_up_character_lcd_write+0x20>
	}
}
    f488:	0001883a 	nop
    f48c:	0001883a 	nop
    f490:	e037883a 	mov	sp,fp
    f494:	df000017 	ldw	fp,0(sp)
    f498:	dec00104 	addi	sp,sp,4
    f49c:	f800283a 	ret

0000f4a0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    f4a0:	defffd04 	addi	sp,sp,-12
    f4a4:	df000215 	stw	fp,8(sp)
    f4a8:	df000204 	addi	fp,sp,8
    f4ac:	e13fff15 	stw	r4,-4(fp)
    f4b0:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
    f4b4:	00000d06 	br	f4ec <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    f4b8:	e0bfff17 	ldw	r2,-4(fp)
    f4bc:	10800a17 	ldw	r2,40(r2)
    f4c0:	10800044 	addi	r2,r2,1
    f4c4:	1007883a 	mov	r3,r2
    f4c8:	e0bffe17 	ldw	r2,-8(fp)
    f4cc:	10800003 	ldbu	r2,0(r2)
    f4d0:	10803fcc 	andi	r2,r2,255
    f4d4:	1080201c 	xori	r2,r2,128
    f4d8:	10bfe004 	addi	r2,r2,-128
    f4dc:	18800025 	stbio	r2,0(r3)
		++ptr;
    f4e0:	e0bffe17 	ldw	r2,-8(fp)
    f4e4:	10800044 	addi	r2,r2,1
    f4e8:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
    f4ec:	e0bffe17 	ldw	r2,-8(fp)
    f4f0:	10800003 	ldbu	r2,0(r2)
    f4f4:	10803fcc 	andi	r2,r2,255
    f4f8:	1080201c 	xori	r2,r2,128
    f4fc:	10bfe004 	addi	r2,r2,-128
    f500:	103fed1e 	bne	r2,zero,f4b8 <alt_up_character_lcd_string+0x18>
	}
}
    f504:	0001883a 	nop
    f508:	0001883a 	nop
    f50c:	e037883a 	mov	sp,fp
    f510:	df000017 	ldw	fp,0(sp)
    f514:	dec00104 	addi	sp,sp,4
    f518:	f800283a 	ret

0000f51c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    f51c:	defffb04 	addi	sp,sp,-20
    f520:	dfc00415 	stw	ra,16(sp)
    f524:	df000315 	stw	fp,12(sp)
    f528:	df000304 	addi	fp,sp,12
    f52c:	e13fff15 	stw	r4,-4(fp)
    f530:	e17ffe15 	stw	r5,-8(fp)
    f534:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    f538:	e0bfff17 	ldw	r2,-4(fp)
    f53c:	10800017 	ldw	r2,0(r2)
    f540:	e0fffd17 	ldw	r3,-12(fp)
    f544:	180d883a 	mov	r6,r3
    f548:	e17ffe17 	ldw	r5,-8(fp)
    f54c:	1009883a 	mov	r4,r2
    f550:	000f4200 	call	f420 <alt_up_character_lcd_write>
	return 0;
    f554:	0005883a 	mov	r2,zero
}
    f558:	e037883a 	mov	sp,fp
    f55c:	dfc00117 	ldw	ra,4(sp)
    f560:	df000017 	ldw	fp,0(sp)
    f564:	dec00204 	addi	sp,sp,8
    f568:	f800283a 	ret

0000f56c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    f56c:	defffa04 	addi	sp,sp,-24
    f570:	dfc00515 	stw	ra,20(sp)
    f574:	df000415 	stw	fp,16(sp)
    f578:	df000404 	addi	fp,sp,16
    f57c:	e13ffe15 	stw	r4,-8(fp)
    f580:	e17ffd15 	stw	r5,-12(fp)
    f584:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    f588:	e0bffd17 	ldw	r2,-12(fp)
    f58c:	10800a28 	cmpgeui	r2,r2,40
    f590:	1000031e 	bne	r2,zero,f5a0 <alt_up_character_lcd_set_cursor_pos+0x34>
    f594:	e0bffc17 	ldw	r2,-16(fp)
    f598:	108000b0 	cmpltui	r2,r2,2
    f59c:	1000021e 	bne	r2,zero,f5a8 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    f5a0:	00bfffc4 	movi	r2,-1
    f5a4:	00000906 	br	f5cc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    f5a8:	e17ffc17 	ldw	r5,-16(fp)
    f5ac:	e13ffd17 	ldw	r4,-12(fp)
    f5b0:	000f2f80 	call	f2f8 <get_DDRAM_addr>
    f5b4:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    f5b8:	e0bfffc3 	ldbu	r2,-1(fp)
    f5bc:	100b883a 	mov	r5,r2
    f5c0:	e13ffe17 	ldw	r4,-8(fp)
    f5c4:	000f36c0 	call	f36c <alt_up_character_lcd_send_cmd>
	return 0;
    f5c8:	0005883a 	mov	r2,zero
}
    f5cc:	e037883a 	mov	sp,fp
    f5d0:	dfc00117 	ldw	ra,4(sp)
    f5d4:	df000017 	ldw	fp,0(sp)
    f5d8:	dec00204 	addi	sp,sp,8
    f5dc:	f800283a 	ret

0000f5e0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    f5e0:	defffb04 	addi	sp,sp,-20
    f5e4:	dfc00415 	stw	ra,16(sp)
    f5e8:	df000315 	stw	fp,12(sp)
    f5ec:	df000304 	addi	fp,sp,12
    f5f0:	e13ffe15 	stw	r4,-8(fp)
    f5f4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    f5f8:	e0bffd17 	ldw	r2,-12(fp)
    f5fc:	10001526 	beq	r2,zero,f654 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    f600:	e0bffd17 	ldw	r2,-12(fp)
    f604:	0080020e 	bge	zero,r2,f610 <alt_up_character_lcd_shift_cursor+0x30>
    f608:	00800504 	movi	r2,20
    f60c:	00000106 	br	f614 <alt_up_character_lcd_shift_cursor+0x34>
    f610:	00800404 	movi	r2,16
    f614:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    f618:	e0bffd17 	ldw	r2,-12(fp)
    f61c:	1000010e 	bge	r2,zero,f624 <alt_up_character_lcd_shift_cursor+0x44>
    f620:	0085c83a 	sub	r2,zero,r2
    f624:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    f628:	00000406 	br	f63c <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    f62c:	e0bfff83 	ldbu	r2,-2(fp)
    f630:	100b883a 	mov	r5,r2
    f634:	e13ffe17 	ldw	r4,-8(fp)
    f638:	000f36c0 	call	f36c <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    f63c:	e0bfffc3 	ldbu	r2,-1(fp)
    f640:	10ffffc4 	addi	r3,r2,-1
    f644:	e0ffffc5 	stb	r3,-1(fp)
    f648:	10803fcc 	andi	r2,r2,255
    f64c:	103ff71e 	bne	r2,zero,f62c <alt_up_character_lcd_shift_cursor+0x4c>
    f650:	00000106 	br	f658 <alt_up_character_lcd_shift_cursor+0x78>
		return;
    f654:	0001883a 	nop
}
    f658:	e037883a 	mov	sp,fp
    f65c:	dfc00117 	ldw	ra,4(sp)
    f660:	df000017 	ldw	fp,0(sp)
    f664:	dec00204 	addi	sp,sp,8
    f668:	f800283a 	ret

0000f66c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    f66c:	defffb04 	addi	sp,sp,-20
    f670:	dfc00415 	stw	ra,16(sp)
    f674:	df000315 	stw	fp,12(sp)
    f678:	df000304 	addi	fp,sp,12
    f67c:	e13ffe15 	stw	r4,-8(fp)
    f680:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    f684:	e0bffd17 	ldw	r2,-12(fp)
    f688:	10001526 	beq	r2,zero,f6e0 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    f68c:	e0bffd17 	ldw	r2,-12(fp)
    f690:	0080020e 	bge	zero,r2,f69c <alt_up_character_lcd_shift_display+0x30>
    f694:	00800704 	movi	r2,28
    f698:	00000106 	br	f6a0 <alt_up_character_lcd_shift_display+0x34>
    f69c:	00800604 	movi	r2,24
    f6a0:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    f6a4:	e0bffd17 	ldw	r2,-12(fp)
    f6a8:	1000010e 	bge	r2,zero,f6b0 <alt_up_character_lcd_shift_display+0x44>
    f6ac:	0085c83a 	sub	r2,zero,r2
    f6b0:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    f6b4:	00000406 	br	f6c8 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    f6b8:	e0bfff83 	ldbu	r2,-2(fp)
    f6bc:	100b883a 	mov	r5,r2
    f6c0:	e13ffe17 	ldw	r4,-8(fp)
    f6c4:	000f36c0 	call	f36c <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
    f6c8:	e0bfffc3 	ldbu	r2,-1(fp)
    f6cc:	10ffffc4 	addi	r3,r2,-1
    f6d0:	e0ffffc5 	stb	r3,-1(fp)
    f6d4:	10803fcc 	andi	r2,r2,255
    f6d8:	103ff71e 	bne	r2,zero,f6b8 <alt_up_character_lcd_shift_display+0x4c>
    f6dc:	00000106 	br	f6e4 <alt_up_character_lcd_shift_display+0x78>
		return;
    f6e0:	0001883a 	nop
}
    f6e4:	e037883a 	mov	sp,fp
    f6e8:	dfc00117 	ldw	ra,4(sp)
    f6ec:	df000017 	ldw	fp,0(sp)
    f6f0:	dec00204 	addi	sp,sp,8
    f6f4:	f800283a 	ret

0000f6f8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    f6f8:	defffa04 	addi	sp,sp,-24
    f6fc:	dfc00515 	stw	ra,20(sp)
    f700:	df000415 	stw	fp,16(sp)
    f704:	df000404 	addi	fp,sp,16
    f708:	e13ffe15 	stw	r4,-8(fp)
    f70c:	e17ffd15 	stw	r5,-12(fp)
    f710:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    f714:	e0bffd17 	ldw	r2,-12(fp)
    f718:	10800a28 	cmpgeui	r2,r2,40
    f71c:	1000031e 	bne	r2,zero,f72c <alt_up_character_lcd_erase_pos+0x34>
    f720:	e0bffc17 	ldw	r2,-16(fp)
    f724:	108000b0 	cmpltui	r2,r2,2
    f728:	1000021e 	bne	r2,zero,f734 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    f72c:	00bfffc4 	movi	r2,-1
    f730:	00000f06 	br	f770 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    f734:	e17ffc17 	ldw	r5,-16(fp)
    f738:	e13ffd17 	ldw	r4,-12(fp)
    f73c:	000f2f80 	call	f2f8 <get_DDRAM_addr>
    f740:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    f744:	e0bfffc3 	ldbu	r2,-1(fp)
    f748:	100b883a 	mov	r5,r2
    f74c:	e13ffe17 	ldw	r4,-8(fp)
    f750:	000f36c0 	call	f36c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    f754:	e0bffe17 	ldw	r2,-8(fp)
    f758:	10800a17 	ldw	r2,40(r2)
    f75c:	10800044 	addi	r2,r2,1
    f760:	1007883a 	mov	r3,r2
    f764:	00800084 	movi	r2,2
    f768:	18800025 	stbio	r2,0(r3)
	return 0;
    f76c:	0005883a 	mov	r2,zero
}
    f770:	e037883a 	mov	sp,fp
    f774:	dfc00117 	ldw	ra,4(sp)
    f778:	df000017 	ldw	fp,0(sp)
    f77c:	dec00204 	addi	sp,sp,8
    f780:	f800283a 	ret

0000f784 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    f784:	defffd04 	addi	sp,sp,-12
    f788:	dfc00215 	stw	ra,8(sp)
    f78c:	df000115 	stw	fp,4(sp)
    f790:	df000104 	addi	fp,sp,4
    f794:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    f798:	01400304 	movi	r5,12
    f79c:	e13fff17 	ldw	r4,-4(fp)
    f7a0:	000f36c0 	call	f36c <alt_up_character_lcd_send_cmd>
}
    f7a4:	0001883a 	nop
    f7a8:	e037883a 	mov	sp,fp
    f7ac:	dfc00117 	ldw	ra,4(sp)
    f7b0:	df000017 	ldw	fp,0(sp)
    f7b4:	dec00204 	addi	sp,sp,8
    f7b8:	f800283a 	ret

0000f7bc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    f7bc:	defffd04 	addi	sp,sp,-12
    f7c0:	dfc00215 	stw	ra,8(sp)
    f7c4:	df000115 	stw	fp,4(sp)
    f7c8:	df000104 	addi	fp,sp,4
    f7cc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    f7d0:	014003c4 	movi	r5,15
    f7d4:	e13fff17 	ldw	r4,-4(fp)
    f7d8:	000f36c0 	call	f36c <alt_up_character_lcd_send_cmd>
}
    f7dc:	0001883a 	nop
    f7e0:	e037883a 	mov	sp,fp
    f7e4:	dfc00117 	ldw	ra,4(sp)
    f7e8:	df000017 	ldw	fp,0(sp)
    f7ec:	dec00204 	addi	sp,sp,8
    f7f0:	f800283a 	ret

0000f7f4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f7f4:	defffd04 	addi	sp,sp,-12
    f7f8:	df000215 	stw	fp,8(sp)
    f7fc:	df000204 	addi	fp,sp,8
    f800:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f804:	e0bffe17 	ldw	r2,-8(fp)
    f808:	10800a17 	ldw	r2,40(r2)
    f80c:	10800104 	addi	r2,r2,4
    f810:	10800037 	ldwio	r2,0(r2)
    f814:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    f818:	e0bfff17 	ldw	r2,-4(fp)
    f81c:	10800054 	ori	r2,r2,1
    f820:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f824:	e0bffe17 	ldw	r2,-8(fp)
    f828:	10800a17 	ldw	r2,40(r2)
    f82c:	10800104 	addi	r2,r2,4
    f830:	1007883a 	mov	r3,r2
    f834:	e0bfff17 	ldw	r2,-4(fp)
    f838:	18800035 	stwio	r2,0(r3)
}
    f83c:	0001883a 	nop
    f840:	e037883a 	mov	sp,fp
    f844:	df000017 	ldw	fp,0(sp)
    f848:	dec00104 	addi	sp,sp,4
    f84c:	f800283a 	ret

0000f850 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f850:	defffd04 	addi	sp,sp,-12
    f854:	df000215 	stw	fp,8(sp)
    f858:	df000204 	addi	fp,sp,8
    f85c:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f860:	e0bffe17 	ldw	r2,-8(fp)
    f864:	10800a17 	ldw	r2,40(r2)
    f868:	10800104 	addi	r2,r2,4
    f86c:	10800037 	ldwio	r2,0(r2)
    f870:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    f874:	e0ffff17 	ldw	r3,-4(fp)
    f878:	00bfff84 	movi	r2,-2
    f87c:	1884703a 	and	r2,r3,r2
    f880:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f884:	e0bffe17 	ldw	r2,-8(fp)
    f888:	10800a17 	ldw	r2,40(r2)
    f88c:	10800104 	addi	r2,r2,4
    f890:	1007883a 	mov	r3,r2
    f894:	e0bfff17 	ldw	r2,-4(fp)
    f898:	18800035 	stwio	r2,0(r3)
}
    f89c:	0001883a 	nop
    f8a0:	e037883a 	mov	sp,fp
    f8a4:	df000017 	ldw	fp,0(sp)
    f8a8:	dec00104 	addi	sp,sp,4
    f8ac:	f800283a 	ret

0000f8b0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    f8b0:	defffd04 	addi	sp,sp,-12
    f8b4:	df000215 	stw	fp,8(sp)
    f8b8:	df000204 	addi	fp,sp,8
    f8bc:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
    f8c0:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    f8c4:	e0bffe17 	ldw	r2,-8(fp)
    f8c8:	10800a17 	ldw	r2,40(r2)
    f8cc:	10800084 	addi	r2,r2,2
    f8d0:	1080002b 	ldhuio	r2,0(r2)
    f8d4:	10bfffcc 	andi	r2,r2,65535
    f8d8:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    f8dc:	e0bfff8b 	ldhu	r2,-2(fp)
}
    f8e0:	e037883a 	mov	sp,fp
    f8e4:	df000017 	ldw	fp,0(sp)
    f8e8:	dec00104 	addi	sp,sp,4
    f8ec:	f800283a 	ret

0000f8f0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    f8f0:	defffd04 	addi	sp,sp,-12
    f8f4:	df000215 	stw	fp,8(sp)
    f8f8:	df000204 	addi	fp,sp,8
    f8fc:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f900:	e0bffe17 	ldw	r2,-8(fp)
    f904:	10800a17 	ldw	r2,40(r2)
    f908:	10800104 	addi	r2,r2,4
    f90c:	10800037 	ldwio	r2,0(r2)
    f910:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    f914:	e0bfff17 	ldw	r2,-4(fp)
    f918:	1004d43a 	srli	r2,r2,16
}
    f91c:	e037883a 	mov	sp,fp
    f920:	df000017 	ldw	fp,0(sp)
    f924:	dec00104 	addi	sp,sp,4
    f928:	f800283a 	ret

0000f92c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    f92c:	defffd04 	addi	sp,sp,-12
    f930:	df000215 	stw	fp,8(sp)
    f934:	df000204 	addi	fp,sp,8
    f938:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    f93c:	e0bffe17 	ldw	r2,-8(fp)
    f940:	1004d27a 	srli	r2,r2,9
    f944:	1080004c 	andi	r2,r2,1
    f948:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
    f94c:	e0bfff17 	ldw	r2,-4(fp)
    f950:	10000226 	beq	r2,zero,f95c <alt_up_rs232_check_parity+0x30>
    f954:	00bfffc4 	movi	r2,-1
    f958:	00000106 	br	f960 <alt_up_rs232_check_parity+0x34>
    f95c:	0005883a 	mov	r2,zero
}
    f960:	e037883a 	mov	sp,fp
    f964:	df000017 	ldw	fp,0(sp)
    f968:	dec00104 	addi	sp,sp,4
    f96c:	f800283a 	ret

0000f970 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    f970:	defffd04 	addi	sp,sp,-12
    f974:	df000215 	stw	fp,8(sp)
    f978:	df000204 	addi	fp,sp,8
    f97c:	e13fff15 	stw	r4,-4(fp)
    f980:	2805883a 	mov	r2,r5
    f984:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    f988:	e0bfff17 	ldw	r2,-4(fp)
    f98c:	10800a17 	ldw	r2,40(r2)
    f990:	1007883a 	mov	r3,r2
    f994:	e0bffe03 	ldbu	r2,-8(fp)
    f998:	18800035 	stwio	r2,0(r3)
	return 0;
    f99c:	0005883a 	mov	r2,zero
}
    f9a0:	e037883a 	mov	sp,fp
    f9a4:	df000017 	ldw	fp,0(sp)
    f9a8:	dec00104 	addi	sp,sp,4
    f9ac:	f800283a 	ret

0000f9b0 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    f9b0:	defffa04 	addi	sp,sp,-24
    f9b4:	dfc00515 	stw	ra,20(sp)
    f9b8:	df000415 	stw	fp,16(sp)
    f9bc:	df000404 	addi	fp,sp,16
    f9c0:	e13ffe15 	stw	r4,-8(fp)
    f9c4:	e17ffd15 	stw	r5,-12(fp)
    f9c8:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f9cc:	e0bffe17 	ldw	r2,-8(fp)
    f9d0:	10800a17 	ldw	r2,40(r2)
    f9d4:	10800037 	ldwio	r2,0(r2)
    f9d8:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    f9dc:	e0bfff17 	ldw	r2,-4(fp)
    f9e0:	1007883a 	mov	r3,r2
    f9e4:	e0bffd17 	ldw	r2,-12(fp)
    f9e8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    f9ec:	e13fff17 	ldw	r4,-4(fp)
    f9f0:	000f92c0 	call	f92c <alt_up_rs232_check_parity>
    f9f4:	1007883a 	mov	r3,r2
    f9f8:	e0bffc17 	ldw	r2,-16(fp)
    f9fc:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    fa00:	e0bfff17 	ldw	r2,-4(fp)
    fa04:	1004d3fa 	srli	r2,r2,15
    fa08:	1080004c 	andi	r2,r2,1
    fa0c:	10bfffc4 	addi	r2,r2,-1
}
    fa10:	e037883a 	mov	sp,fp
    fa14:	dfc00117 	ldw	ra,4(sp)
    fa18:	df000017 	ldw	fp,0(sp)
    fa1c:	dec00204 	addi	sp,sp,8
    fa20:	f800283a 	ret

0000fa24 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    fa24:	defff804 	addi	sp,sp,-32
    fa28:	dfc00715 	stw	ra,28(sp)
    fa2c:	df000615 	stw	fp,24(sp)
    fa30:	df000604 	addi	fp,sp,24
    fa34:	e13ffc15 	stw	r4,-16(fp)
    fa38:	e17ffb15 	stw	r5,-20(fp)
    fa3c:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    fa40:	e0bffc17 	ldw	r2,-16(fp)
    fa44:	10800017 	ldw	r2,0(r2)
    fa48:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    fa4c:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
    fa50:	00000c06 	br	fa84 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    fa54:	e0bffb17 	ldw	r2,-20(fp)
    fa58:	10c00044 	addi	r3,r2,1
    fa5c:	e0fffb15 	stw	r3,-20(fp)
    fa60:	e0fffdc4 	addi	r3,fp,-9
    fa64:	180d883a 	mov	r6,r3
    fa68:	100b883a 	mov	r5,r2
    fa6c:	e13ffe17 	ldw	r4,-8(fp)
    fa70:	000f9b00 	call	f9b0 <alt_up_rs232_read_data>
    fa74:	1000081e 	bne	r2,zero,fa98 <alt_up_rs232_read_fd+0x74>
			count++;
    fa78:	e0bfff17 	ldw	r2,-4(fp)
    fa7c:	10800044 	addi	r2,r2,1
    fa80:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
    fa84:	e0bffa17 	ldw	r2,-24(fp)
    fa88:	10ffffc4 	addi	r3,r2,-1
    fa8c:	e0fffa15 	stw	r3,-24(fp)
    fa90:	103ff01e 	bne	r2,zero,fa54 <alt_up_rs232_read_fd+0x30>
    fa94:	00000106 	br	fa9c <alt_up_rs232_read_fd+0x78>
		else
			break;
    fa98:	0001883a 	nop
	}
	return count;
    fa9c:	e0bfff17 	ldw	r2,-4(fp)
}
    faa0:	e037883a 	mov	sp,fp
    faa4:	dfc00117 	ldw	ra,4(sp)
    faa8:	df000017 	ldw	fp,0(sp)
    faac:	dec00204 	addi	sp,sp,8
    fab0:	f800283a 	ret

0000fab4 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    fab4:	defff904 	addi	sp,sp,-28
    fab8:	dfc00615 	stw	ra,24(sp)
    fabc:	df000515 	stw	fp,20(sp)
    fac0:	df000504 	addi	fp,sp,20
    fac4:	e13ffd15 	stw	r4,-12(fp)
    fac8:	e17ffc15 	stw	r5,-16(fp)
    facc:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    fad0:	e0bffd17 	ldw	r2,-12(fp)
    fad4:	10800017 	ldw	r2,0(r2)
    fad8:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
    fadc:	e03fff15 	stw	zero,-4(fp)
	while(len--)
    fae0:	00000d06 	br	fb18 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    fae4:	e0bffc17 	ldw	r2,-16(fp)
    fae8:	10800003 	ldbu	r2,0(r2)
    faec:	10803fcc 	andi	r2,r2,255
    faf0:	100b883a 	mov	r5,r2
    faf4:	e13ffe17 	ldw	r4,-8(fp)
    faf8:	000f9700 	call	f970 <alt_up_rs232_write_data>
    fafc:	10000b1e 	bne	r2,zero,fb2c <alt_up_rs232_write_fd+0x78>
		{
			count++;
    fb00:	e0bfff17 	ldw	r2,-4(fp)
    fb04:	10800044 	addi	r2,r2,1
    fb08:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
    fb0c:	e0bffc17 	ldw	r2,-16(fp)
    fb10:	10800044 	addi	r2,r2,1
    fb14:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
    fb18:	e0bffb17 	ldw	r2,-20(fp)
    fb1c:	10ffffc4 	addi	r3,r2,-1
    fb20:	e0fffb15 	stw	r3,-20(fp)
    fb24:	103fef1e 	bne	r2,zero,fae4 <alt_up_rs232_write_fd+0x30>
    fb28:	00000106 	br	fb30 <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
    fb2c:	0001883a 	nop
	}
	return count;
    fb30:	e0bfff17 	ldw	r2,-4(fp)
}
    fb34:	e037883a 	mov	sp,fp
    fb38:	dfc00117 	ldw	ra,4(sp)
    fb3c:	df000017 	ldw	fp,0(sp)
    fb40:	dec00204 	addi	sp,sp,8
    fb44:	f800283a 	ret

0000fb48 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    fb48:	defffc04 	addi	sp,sp,-16
    fb4c:	dfc00315 	stw	ra,12(sp)
    fb50:	df000215 	stw	fp,8(sp)
    fb54:	df000204 	addi	fp,sp,8
    fb58:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    fb5c:	d1600604 	addi	r5,gp,-32744
    fb60:	e13ffe17 	ldw	r4,-8(fp)
    fb64:	000feb00 	call	feb0 <alt_find_dev>
    fb68:	e0bfff15 	stw	r2,-4(fp)

  return dev;
    fb6c:	e0bfff17 	ldw	r2,-4(fp)
}
    fb70:	e037883a 	mov	sp,fp
    fb74:	dfc00117 	ldw	ra,4(sp)
    fb78:	df000017 	ldw	fp,0(sp)
    fb7c:	dec00204 	addi	sp,sp,8
    fb80:	f800283a 	ret

0000fb84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fb84:	defff404 	addi	sp,sp,-48
    fb88:	df000b15 	stw	fp,44(sp)
    fb8c:	df000b04 	addi	fp,sp,44
    fb90:	e13ff815 	stw	r4,-32(fp)
    fb94:	e17ff715 	stw	r5,-36(fp)
    fb98:	e1bff615 	stw	r6,-40(fp)
    fb9c:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    fba0:	e03ffe15 	stw	zero,-8(fp)
    fba4:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
    fba8:	d0a73b17 	ldw	r2,-25364(gp)
  
  if (alt_ticks_per_second ())
    fbac:	10004826 	beq	r2,zero,fcd0 <alt_alarm_start+0x14c>
  {
    if (alarm)
    fbb0:	e0bff817 	ldw	r2,-32(fp)
    fbb4:	10004426 	beq	r2,zero,fcc8 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
    fbb8:	e0bff817 	ldw	r2,-32(fp)
    fbbc:	e0fff617 	ldw	r3,-40(fp)
    fbc0:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
    fbc4:	e0bff817 	ldw	r2,-32(fp)
    fbc8:	e0fff517 	ldw	r3,-44(fp)
    fbcc:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    fbd0:	0005303a 	rdctl	r2,status
    fbd4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbd8:	e0fff917 	ldw	r3,-28(fp)
    fbdc:	00bfff84 	movi	r2,-2
    fbe0:	1884703a 	and	r2,r3,r2
    fbe4:	1001703a 	wrctl	status,r2
  return context;
    fbe8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fbec:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fbf0:	d0a73c17 	ldw	r2,-25360(gp)
    fbf4:	d0e73d17 	ldw	r3,-25356(gp)
      
      current_nticks = alt_nticks();
    fbf8:	e0bffe15 	stw	r2,-8(fp)
    fbfc:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    fc00:	e0bff717 	ldw	r2,-36(fp)
    fc04:	1011883a 	mov	r8,r2
    fc08:	0013883a 	mov	r9,zero
    fc0c:	e13ffe17 	ldw	r4,-8(fp)
    fc10:	e17fff17 	ldw	r5,-4(fp)
    fc14:	4105883a 	add	r2,r8,r4
    fc18:	120d803a 	cmpltu	r6,r2,r8
    fc1c:	4947883a 	add	r3,r9,r5
    fc20:	30c9883a 	add	r4,r6,r3
    fc24:	2007883a 	mov	r3,r4
    fc28:	1009883a 	mov	r4,r2
    fc2c:	180b883a 	mov	r5,r3
    fc30:	01800044 	movi	r6,1
    fc34:	000f883a 	mov	r7,zero
    fc38:	2185883a 	add	r2,r4,r6
    fc3c:	1111803a 	cmpltu	r8,r2,r4
    fc40:	29c7883a 	add	r3,r5,r7
    fc44:	40c9883a 	add	r4,r8,r3
    fc48:	2007883a 	mov	r3,r4
    fc4c:	1009883a 	mov	r4,r2
    fc50:	180b883a 	mov	r5,r3
    fc54:	e0bff817 	ldw	r2,-32(fp)
    fc58:	11000215 	stw	r4,8(r2)
    fc5c:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    fc60:	e0bff817 	ldw	r2,-32(fp)
    fc64:	d0e00c04 	addi	r3,gp,-32720
    fc68:	e0fffb15 	stw	r3,-20(fp)
    fc6c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fc70:	e0bffa17 	ldw	r2,-24(fp)
    fc74:	e0fffb17 	ldw	r3,-20(fp)
    fc78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fc7c:	e0bffb17 	ldw	r2,-20(fp)
    fc80:	10c00017 	ldw	r3,0(r2)
    fc84:	e0bffa17 	ldw	r2,-24(fp)
    fc88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fc8c:	e0bffb17 	ldw	r2,-20(fp)
    fc90:	10800017 	ldw	r2,0(r2)
    fc94:	e0fffa17 	ldw	r3,-24(fp)
    fc98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fc9c:	e0bffb17 	ldw	r2,-20(fp)
    fca0:	e0fffa17 	ldw	r3,-24(fp)
    fca4:	10c00015 	stw	r3,0(r2)
}
    fca8:	0001883a 	nop
    fcac:	e0bffd17 	ldw	r2,-12(fp)
    fcb0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    fcb4:	e0bffc17 	ldw	r2,-16(fp)
    fcb8:	1001703a 	wrctl	status,r2
}
    fcbc:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
    fcc0:	0005883a 	mov	r2,zero
    fcc4:	00000306 	br	fcd4 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
    fcc8:	00bffa84 	movi	r2,-22
    fccc:	00000106 	br	fcd4 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
    fcd0:	00bfde84 	movi	r2,-134
  }
}
    fcd4:	e037883a 	mov	sp,fp
    fcd8:	df000017 	ldw	fp,0(sp)
    fcdc:	dec00104 	addi	sp,sp,4
    fce0:	f800283a 	ret

0000fce4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    fce4:	deffff04 	addi	sp,sp,-4
    fce8:	df000015 	stw	fp,0(sp)
    fcec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fcf0:	0001883a 	nop
    fcf4:	e037883a 	mov	sp,fp
    fcf8:	df000017 	ldw	fp,0(sp)
    fcfc:	dec00104 	addi	sp,sp,4
    fd00:	f800283a 	ret

0000fd04 <alt_get_errno>:
{
    fd04:	defffe04 	addi	sp,sp,-8
    fd08:	dfc00115 	stw	ra,4(sp)
    fd0c:	df000015 	stw	fp,0(sp)
    fd10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fd14:	d0a00917 	ldw	r2,-32732(gp)
    fd18:	10000326 	beq	r2,zero,fd28 <alt_get_errno+0x24>
    fd1c:	d0a00917 	ldw	r2,-32732(gp)
    fd20:	103ee83a 	callr	r2
    fd24:	00000106 	br	fd2c <alt_get_errno+0x28>
    fd28:	d0a73504 	addi	r2,gp,-25388
}
    fd2c:	e037883a 	mov	sp,fp
    fd30:	dfc00117 	ldw	ra,4(sp)
    fd34:	df000017 	ldw	fp,0(sp)
    fd38:	dec00204 	addi	sp,sp,8
    fd3c:	f800283a 	ret

0000fd40 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    fd40:	defffa04 	addi	sp,sp,-24
    fd44:	dfc00515 	stw	ra,20(sp)
    fd48:	df000415 	stw	fp,16(sp)
    fd4c:	df000404 	addi	fp,sp,16
    fd50:	e13ffd15 	stw	r4,-12(fp)
    fd54:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    fd58:	e0bffd17 	ldw	r2,-12(fp)
    fd5c:	10000326 	beq	r2,zero,fd6c <alt_dev_llist_insert+0x2c>
    fd60:	e0bffd17 	ldw	r2,-12(fp)
    fd64:	10800217 	ldw	r2,8(r2)
    fd68:	1000061e 	bne	r2,zero,fd84 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    fd6c:	000fd040 	call	fd04 <alt_get_errno>
    fd70:	1007883a 	mov	r3,r2
    fd74:	00800584 	movi	r2,22
    fd78:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    fd7c:	00bffa84 	movi	r2,-22
    fd80:	00001406 	br	fdd4 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    fd84:	e0bffd17 	ldw	r2,-12(fp)
    fd88:	e0fffc17 	ldw	r3,-16(fp)
    fd8c:	e0ffff15 	stw	r3,-4(fp)
    fd90:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    fd94:	e0bffe17 	ldw	r2,-8(fp)
    fd98:	e0ffff17 	ldw	r3,-4(fp)
    fd9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fda0:	e0bfff17 	ldw	r2,-4(fp)
    fda4:	10c00017 	ldw	r3,0(r2)
    fda8:	e0bffe17 	ldw	r2,-8(fp)
    fdac:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    fdb0:	e0bfff17 	ldw	r2,-4(fp)
    fdb4:	10800017 	ldw	r2,0(r2)
    fdb8:	e0fffe17 	ldw	r3,-8(fp)
    fdbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    fdc0:	e0bfff17 	ldw	r2,-4(fp)
    fdc4:	e0fffe17 	ldw	r3,-8(fp)
    fdc8:	10c00015 	stw	r3,0(r2)
}
    fdcc:	0001883a 	nop

  return 0;  
    fdd0:	0005883a 	mov	r2,zero
}
    fdd4:	e037883a 	mov	sp,fp
    fdd8:	dfc00117 	ldw	ra,4(sp)
    fddc:	df000017 	ldw	fp,0(sp)
    fde0:	dec00204 	addi	sp,sp,8
    fde4:	f800283a 	ret

0000fde8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    fde8:	defffd04 	addi	sp,sp,-12
    fdec:	dfc00215 	stw	ra,8(sp)
    fdf0:	df000115 	stw	fp,4(sp)
    fdf4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fdf8:	00800074 	movhi	r2,1
    fdfc:	1082d804 	addi	r2,r2,2912
    fe00:	e0bfff15 	stw	r2,-4(fp)
    fe04:	00000606 	br	fe20 <_do_ctors+0x38>
        (*ctor) (); 
    fe08:	e0bfff17 	ldw	r2,-4(fp)
    fe0c:	10800017 	ldw	r2,0(r2)
    fe10:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    fe14:	e0bfff17 	ldw	r2,-4(fp)
    fe18:	10bfff04 	addi	r2,r2,-4
    fe1c:	e0bfff15 	stw	r2,-4(fp)
    fe20:	e0ffff17 	ldw	r3,-4(fp)
    fe24:	00800074 	movhi	r2,1
    fe28:	1082d904 	addi	r2,r2,2916
    fe2c:	18bff62e 	bgeu	r3,r2,fe08 <_do_ctors+0x20>
}
    fe30:	0001883a 	nop
    fe34:	0001883a 	nop
    fe38:	e037883a 	mov	sp,fp
    fe3c:	dfc00117 	ldw	ra,4(sp)
    fe40:	df000017 	ldw	fp,0(sp)
    fe44:	dec00204 	addi	sp,sp,8
    fe48:	f800283a 	ret

0000fe4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    fe4c:	defffd04 	addi	sp,sp,-12
    fe50:	dfc00215 	stw	ra,8(sp)
    fe54:	df000115 	stw	fp,4(sp)
    fe58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fe5c:	00800074 	movhi	r2,1
    fe60:	1082d804 	addi	r2,r2,2912
    fe64:	e0bfff15 	stw	r2,-4(fp)
    fe68:	00000606 	br	fe84 <_do_dtors+0x38>
        (*dtor) (); 
    fe6c:	e0bfff17 	ldw	r2,-4(fp)
    fe70:	10800017 	ldw	r2,0(r2)
    fe74:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    fe78:	e0bfff17 	ldw	r2,-4(fp)
    fe7c:	10bfff04 	addi	r2,r2,-4
    fe80:	e0bfff15 	stw	r2,-4(fp)
    fe84:	e0ffff17 	ldw	r3,-4(fp)
    fe88:	00800074 	movhi	r2,1
    fe8c:	1082d904 	addi	r2,r2,2916
    fe90:	18bff62e 	bgeu	r3,r2,fe6c <_do_dtors+0x20>
}
    fe94:	0001883a 	nop
    fe98:	0001883a 	nop
    fe9c:	e037883a 	mov	sp,fp
    fea0:	dfc00117 	ldw	ra,4(sp)
    fea4:	df000017 	ldw	fp,0(sp)
    fea8:	dec00204 	addi	sp,sp,8
    feac:	f800283a 	ret

0000feb0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    feb0:	defffa04 	addi	sp,sp,-24
    feb4:	dfc00515 	stw	ra,20(sp)
    feb8:	df000415 	stw	fp,16(sp)
    febc:	df000404 	addi	fp,sp,16
    fec0:	e13ffd15 	stw	r4,-12(fp)
    fec4:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    fec8:	e0bffc17 	ldw	r2,-16(fp)
    fecc:	10800017 	ldw	r2,0(r2)
    fed0:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    fed4:	e13ffd17 	ldw	r4,-12(fp)
    fed8:	0000bf80 	call	bf8 <strlen>
    fedc:	10800044 	addi	r2,r2,1
    fee0:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fee4:	00000d06 	br	ff1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fee8:	e0bfff17 	ldw	r2,-4(fp)
    feec:	10800217 	ldw	r2,8(r2)
    fef0:	e0fffe17 	ldw	r3,-8(fp)
    fef4:	180d883a 	mov	r6,r3
    fef8:	e17ffd17 	ldw	r5,-12(fp)
    fefc:	1009883a 	mov	r4,r2
    ff00:	001093c0 	call	1093c <memcmp>
    ff04:	1000021e 	bne	r2,zero,ff10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ff08:	e0bfff17 	ldw	r2,-4(fp)
    ff0c:	00000706 	br	ff2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ff10:	e0bfff17 	ldw	r2,-4(fp)
    ff14:	10800017 	ldw	r2,0(r2)
    ff18:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    ff1c:	e0ffff17 	ldw	r3,-4(fp)
    ff20:	e0bffc17 	ldw	r2,-16(fp)
    ff24:	18bff01e 	bne	r3,r2,fee8 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    ff28:	0005883a 	mov	r2,zero
}
    ff2c:	e037883a 	mov	sp,fp
    ff30:	dfc00117 	ldw	ra,4(sp)
    ff34:	df000017 	ldw	fp,0(sp)
    ff38:	dec00204 	addi	sp,sp,8
    ff3c:	f800283a 	ret

0000ff40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ff40:	deffff04 	addi	sp,sp,-4
    ff44:	df000015 	stw	fp,0(sp)
    ff48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    ff4c:	0001883a 	nop
    ff50:	e037883a 	mov	sp,fp
    ff54:	df000017 	ldw	fp,0(sp)
    ff58:	dec00104 	addi	sp,sp,4
    ff5c:	f800283a 	ret

0000ff60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ff60:	defff904 	addi	sp,sp,-28
    ff64:	dfc00615 	stw	ra,24(sp)
    ff68:	df000515 	stw	fp,20(sp)
    ff6c:	df000504 	addi	fp,sp,20
    ff70:	e13ffe15 	stw	r4,-8(fp)
    ff74:	e17ffd15 	stw	r5,-12(fp)
    ff78:	e1bffc15 	stw	r6,-16(fp)
    ff7c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    ff80:	e1bffb17 	ldw	r6,-20(fp)
    ff84:	e17ffc17 	ldw	r5,-16(fp)
    ff88:	e13ffd17 	ldw	r4,-12(fp)
    ff8c:	00103480 	call	10348 <open>
    ff90:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    ff94:	e0bfff17 	ldw	r2,-4(fp)
    ff98:	10002016 	blt	r2,zero,1001c <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    ff9c:	e0ffff17 	ldw	r3,-4(fp)
    ffa0:	1805883a 	mov	r2,r3
    ffa4:	1085883a 	add	r2,r2,r2
    ffa8:	10c5883a 	add	r2,r2,r3
    ffac:	100490ba 	slli	r2,r2,2
    ffb0:	00c00074 	movhi	r3,1
    ffb4:	10c7883a 	add	r3,r2,r3
    ffb8:	18c6f717 	ldw	r3,7132(r3)
    ffbc:	e0bffe17 	ldw	r2,-8(fp)
    ffc0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ffc4:	e0ffff17 	ldw	r3,-4(fp)
    ffc8:	1805883a 	mov	r2,r3
    ffcc:	1085883a 	add	r2,r2,r2
    ffd0:	10c5883a 	add	r2,r2,r3
    ffd4:	100490ba 	slli	r2,r2,2
    ffd8:	00c00074 	movhi	r3,1
    ffdc:	10c7883a 	add	r3,r2,r3
    ffe0:	18c6f817 	ldw	r3,7136(r3)
    ffe4:	e0bffe17 	ldw	r2,-8(fp)
    ffe8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    ffec:	e0ffff17 	ldw	r3,-4(fp)
    fff0:	1805883a 	mov	r2,r3
    fff4:	1085883a 	add	r2,r2,r2
    fff8:	10c5883a 	add	r2,r2,r3
    fffc:	100490ba 	slli	r2,r2,2
   10000:	00c00074 	movhi	r3,1
   10004:	10c7883a 	add	r3,r2,r3
   10008:	18c6f917 	ldw	r3,7140(r3)
   1000c:	e0bffe17 	ldw	r2,-8(fp)
   10010:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10014:	e13fff17 	ldw	r4,-4(fp)
   10018:	000e4180 	call	e418 <alt_release_fd>
  }
} 
   1001c:	0001883a 	nop
   10020:	e037883a 	mov	sp,fp
   10024:	dfc00117 	ldw	ra,4(sp)
   10028:	df000017 	ldw	fp,0(sp)
   1002c:	dec00204 	addi	sp,sp,8
   10030:	f800283a 	ret

00010034 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10034:	defffb04 	addi	sp,sp,-20
   10038:	dfc00415 	stw	ra,16(sp)
   1003c:	df000315 	stw	fp,12(sp)
   10040:	df000304 	addi	fp,sp,12
   10044:	e13fff15 	stw	r4,-4(fp)
   10048:	e17ffe15 	stw	r5,-8(fp)
   1004c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10050:	01c07fc4 	movi	r7,511
   10054:	01800044 	movi	r6,1
   10058:	e17fff17 	ldw	r5,-4(fp)
   1005c:	01000074 	movhi	r4,1
   10060:	2106fa04 	addi	r4,r4,7144
   10064:	000ff600 	call	ff60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10068:	01c07fc4 	movi	r7,511
   1006c:	000d883a 	mov	r6,zero
   10070:	e17ffe17 	ldw	r5,-8(fp)
   10074:	01000074 	movhi	r4,1
   10078:	2106f704 	addi	r4,r4,7132
   1007c:	000ff600 	call	ff60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10080:	01c07fc4 	movi	r7,511
   10084:	01800044 	movi	r6,1
   10088:	e17ffd17 	ldw	r5,-12(fp)
   1008c:	01000074 	movhi	r4,1
   10090:	2106fd04 	addi	r4,r4,7156
   10094:	000ff600 	call	ff60 <alt_open_fd>
}  
   10098:	0001883a 	nop
   1009c:	e037883a 	mov	sp,fp
   100a0:	dfc00117 	ldw	ra,4(sp)
   100a4:	df000017 	ldw	fp,0(sp)
   100a8:	dec00204 	addi	sp,sp,8
   100ac:	f800283a 	ret

000100b0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   100b0:	defff004 	addi	sp,sp,-64
   100b4:	df000f15 	stw	fp,60(sp)
   100b8:	df000f04 	addi	fp,sp,60
   100bc:	e13ff315 	stw	r4,-52(fp)
   100c0:	e17ff215 	stw	r5,-56(fp)
   100c4:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   100c8:	00bffa84 	movi	r2,-22
   100cc:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   100d0:	e0bff317 	ldw	r2,-52(fp)
   100d4:	10800828 	cmpgeui	r2,r2,32
   100d8:	1000501e 	bne	r2,zero,1021c <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   100dc:	0005303a 	rdctl	r2,status
   100e0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100e4:	e0fffd17 	ldw	r3,-12(fp)
   100e8:	00bfff84 	movi	r2,-2
   100ec:	1884703a 	and	r2,r3,r2
   100f0:	1001703a 	wrctl	status,r2
  return context;
   100f4:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   100f8:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   100fc:	e0bff317 	ldw	r2,-52(fp)
   10100:	100890fa 	slli	r4,r2,3
   10104:	e0fff117 	ldw	r3,-60(fp)
   10108:	00800074 	movhi	r2,1
   1010c:	2085883a 	add	r2,r4,r2
   10110:	10d2e615 	stw	r3,19352(r2)
    alt_irq[id].context = context;
   10114:	e0bff317 	ldw	r2,-52(fp)
   10118:	100890fa 	slli	r4,r2,3
   1011c:	e0fff217 	ldw	r3,-56(fp)
   10120:	00800074 	movhi	r2,1
   10124:	2085883a 	add	r2,r4,r2
   10128:	10d2e715 	stw	r3,19356(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1012c:	e0bff117 	ldw	r2,-60(fp)
   10130:	10001a26 	beq	r2,zero,1019c <alt_irq_register+0xec>
   10134:	e0bff317 	ldw	r2,-52(fp)
   10138:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   1013c:	0005303a 	rdctl	r2,status
   10140:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10144:	e0fffb17 	ldw	r3,-20(fp)
   10148:	00bfff84 	movi	r2,-2
   1014c:	1884703a 	and	r2,r3,r2
   10150:	1001703a 	wrctl	status,r2
  return context;
   10154:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10158:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   1015c:	00c00044 	movi	r3,1
   10160:	e0bffc17 	ldw	r2,-16(fp)
   10164:	1884983a 	sll	r2,r3,r2
   10168:	1007883a 	mov	r3,r2
   1016c:	d0a73a17 	ldw	r2,-25368(gp)
   10170:	1884b03a 	or	r2,r3,r2
   10174:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10178:	d0a73a17 	ldw	r2,-25368(gp)
   1017c:	100170fa 	wrctl	ienable,r2
   10180:	e0bffa17 	ldw	r2,-24(fp)
   10184:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   10188:	e0bff917 	ldw	r2,-28(fp)
   1018c:	1001703a 	wrctl	status,r2
}
   10190:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   10194:	0005883a 	mov	r2,zero
   10198:	00001a06 	br	10204 <alt_irq_register+0x154>
   1019c:	e0bff317 	ldw	r2,-52(fp)
   101a0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   101a4:	0005303a 	rdctl	r2,status
   101a8:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101ac:	e0fff717 	ldw	r3,-36(fp)
   101b0:	00bfff84 	movi	r2,-2
   101b4:	1884703a 	and	r2,r3,r2
   101b8:	1001703a 	wrctl	status,r2
  return context;
   101bc:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   101c0:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   101c4:	00c00044 	movi	r3,1
   101c8:	e0bff817 	ldw	r2,-32(fp)
   101cc:	1884983a 	sll	r2,r3,r2
   101d0:	0084303a 	nor	r2,zero,r2
   101d4:	1007883a 	mov	r3,r2
   101d8:	d0a73a17 	ldw	r2,-25368(gp)
   101dc:	1884703a 	and	r2,r3,r2
   101e0:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   101e4:	d0a73a17 	ldw	r2,-25368(gp)
   101e8:	100170fa 	wrctl	ienable,r2
   101ec:	e0bff617 	ldw	r2,-40(fp)
   101f0:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   101f4:	e0bff517 	ldw	r2,-44(fp)
   101f8:	1001703a 	wrctl	status,r2
}
   101fc:	0001883a 	nop
  return 0;
   10200:	0005883a 	mov	r2,zero
   10204:	e0bfff15 	stw	r2,-4(fp)
   10208:	e0bffe17 	ldw	r2,-8(fp)
   1020c:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   10210:	e0bff417 	ldw	r2,-48(fp)
   10214:	1001703a 	wrctl	status,r2
}
   10218:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   1021c:	e0bfff17 	ldw	r2,-4(fp)
}
   10220:	e037883a 	mov	sp,fp
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00104 	addi	sp,sp,4
   1022c:	f800283a 	ret

00010230 <alt_get_errno>:
{
   10230:	defffe04 	addi	sp,sp,-8
   10234:	dfc00115 	stw	ra,4(sp)
   10238:	df000015 	stw	fp,0(sp)
   1023c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10240:	d0a00917 	ldw	r2,-32732(gp)
   10244:	10000326 	beq	r2,zero,10254 <alt_get_errno+0x24>
   10248:	d0a00917 	ldw	r2,-32732(gp)
   1024c:	103ee83a 	callr	r2
   10250:	00000106 	br	10258 <alt_get_errno+0x28>
   10254:	d0a73504 	addi	r2,gp,-25388
}
   10258:	e037883a 	mov	sp,fp
   1025c:	dfc00117 	ldw	ra,4(sp)
   10260:	df000017 	ldw	fp,0(sp)
   10264:	dec00204 	addi	sp,sp,8
   10268:	f800283a 	ret

0001026c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1026c:	defffd04 	addi	sp,sp,-12
   10270:	df000215 	stw	fp,8(sp)
   10274:	df000204 	addi	fp,sp,8
   10278:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1027c:	e0bffe17 	ldw	r2,-8(fp)
   10280:	10800217 	ldw	r2,8(r2)
   10284:	10d00034 	orhi	r3,r2,16384
   10288:	e0bffe17 	ldw	r2,-8(fp)
   1028c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10290:	e03fff15 	stw	zero,-4(fp)
   10294:	00002306 	br	10324 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10298:	e0ffff17 	ldw	r3,-4(fp)
   1029c:	1805883a 	mov	r2,r3
   102a0:	1085883a 	add	r2,r2,r2
   102a4:	10c5883a 	add	r2,r2,r3
   102a8:	100490ba 	slli	r2,r2,2
   102ac:	00c00074 	movhi	r3,1
   102b0:	10c7883a 	add	r3,r2,r3
   102b4:	18c6f717 	ldw	r3,7132(r3)
   102b8:	e0bffe17 	ldw	r2,-8(fp)
   102bc:	10800017 	ldw	r2,0(r2)
   102c0:	1880151e 	bne	r3,r2,10318 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   102c4:	e0ffff17 	ldw	r3,-4(fp)
   102c8:	1805883a 	mov	r2,r3
   102cc:	1085883a 	add	r2,r2,r2
   102d0:	10c5883a 	add	r2,r2,r3
   102d4:	100490ba 	slli	r2,r2,2
   102d8:	00c00074 	movhi	r3,1
   102dc:	10c7883a 	add	r3,r2,r3
   102e0:	1886f917 	ldw	r2,7140(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   102e4:	10000c0e 	bge	r2,zero,10318 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   102e8:	e0ffff17 	ldw	r3,-4(fp)
   102ec:	1805883a 	mov	r2,r3
   102f0:	1085883a 	add	r2,r2,r2
   102f4:	10c5883a 	add	r2,r2,r3
   102f8:	100490ba 	slli	r2,r2,2
   102fc:	00c00074 	movhi	r3,1
   10300:	18c6f704 	addi	r3,r3,7132
   10304:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10308:	e0fffe17 	ldw	r3,-8(fp)
   1030c:	18800226 	beq	r3,r2,10318 <alt_file_locked+0xac>
    {
      return -EACCES;
   10310:	00bffcc4 	movi	r2,-13
   10314:	00000806 	br	10338 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   10318:	e0bfff17 	ldw	r2,-4(fp)
   1031c:	10800044 	addi	r2,r2,1
   10320:	e0bfff15 	stw	r2,-4(fp)
   10324:	d0a00817 	ldw	r2,-32736(gp)
   10328:	1007883a 	mov	r3,r2
   1032c:	e0bfff17 	ldw	r2,-4(fp)
   10330:	18bfd92e 	bgeu	r3,r2,10298 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10334:	0005883a 	mov	r2,zero
}
   10338:	e037883a 	mov	sp,fp
   1033c:	df000017 	ldw	fp,0(sp)
   10340:	dec00104 	addi	sp,sp,4
   10344:	f800283a 	ret

00010348 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10348:	defff604 	addi	sp,sp,-40
   1034c:	dfc00915 	stw	ra,36(sp)
   10350:	df000815 	stw	fp,32(sp)
   10354:	df000804 	addi	fp,sp,32
   10358:	e13ffa15 	stw	r4,-24(fp)
   1035c:	e17ff915 	stw	r5,-28(fp)
   10360:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10364:	00bfffc4 	movi	r2,-1
   10368:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   1036c:	00bffb44 	movi	r2,-19
   10370:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   10374:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10378:	d1600604 	addi	r5,gp,-32744
   1037c:	e13ffa17 	ldw	r4,-24(fp)
   10380:	000feb00 	call	feb0 <alt_find_dev>
   10384:	e0bfff15 	stw	r2,-4(fp)
   10388:	e0bfff17 	ldw	r2,-4(fp)
   1038c:	1000051e 	bne	r2,zero,103a4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10390:	e13ffa17 	ldw	r4,-24(fp)
   10394:	001069c0 	call	1069c <alt_find_file>
   10398:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   1039c:	00800044 	movi	r2,1
   103a0:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   103a4:	e0bfff17 	ldw	r2,-4(fp)
   103a8:	10002c26 	beq	r2,zero,1045c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   103ac:	e13fff17 	ldw	r4,-4(fp)
   103b0:	00107a40 	call	107a4 <alt_get_fd>
   103b4:	e0bffe15 	stw	r2,-8(fp)
   103b8:	e0bffe17 	ldw	r2,-8(fp)
   103bc:	1000030e 	bge	r2,zero,103cc <open+0x84>
    {
      status = index;
   103c0:	e0bffe17 	ldw	r2,-8(fp)
   103c4:	e0bffd15 	stw	r2,-12(fp)
   103c8:	00002606 	br	10464 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   103cc:	e0fffe17 	ldw	r3,-8(fp)
   103d0:	1805883a 	mov	r2,r3
   103d4:	1085883a 	add	r2,r2,r2
   103d8:	10c5883a 	add	r2,r2,r3
   103dc:	100490ba 	slli	r2,r2,2
   103e0:	00c00074 	movhi	r3,1
   103e4:	18c6f704 	addi	r3,r3,7132
   103e8:	10c5883a 	add	r2,r2,r3
   103ec:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   103f0:	e0fff917 	ldw	r3,-28(fp)
   103f4:	00900034 	movhi	r2,16384
   103f8:	10bfffc4 	addi	r2,r2,-1
   103fc:	1886703a 	and	r3,r3,r2
   10400:	e0bffb17 	ldw	r2,-20(fp)
   10404:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10408:	e0bffc17 	ldw	r2,-16(fp)
   1040c:	1000051e 	bne	r2,zero,10424 <open+0xdc>
   10410:	e13ffb17 	ldw	r4,-20(fp)
   10414:	001026c0 	call	1026c <alt_file_locked>
   10418:	e0bffd15 	stw	r2,-12(fp)
   1041c:	e0bffd17 	ldw	r2,-12(fp)
   10420:	10001016 	blt	r2,zero,10464 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10424:	e0bfff17 	ldw	r2,-4(fp)
   10428:	10800317 	ldw	r2,12(r2)
   1042c:	10000826 	beq	r2,zero,10450 <open+0x108>
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	10800317 	ldw	r2,12(r2)
   10438:	e1fff817 	ldw	r7,-32(fp)
   1043c:	e1bff917 	ldw	r6,-28(fp)
   10440:	e17ffa17 	ldw	r5,-24(fp)
   10444:	e13ffb17 	ldw	r4,-20(fp)
   10448:	103ee83a 	callr	r2
   1044c:	00000106 	br	10454 <open+0x10c>
   10450:	0005883a 	mov	r2,zero
   10454:	e0bffd15 	stw	r2,-12(fp)
   10458:	00000206 	br	10464 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1045c:	00bffb44 	movi	r2,-19
   10460:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10464:	e0bffd17 	ldw	r2,-12(fp)
   10468:	1000090e 	bge	r2,zero,10490 <open+0x148>
  {
    alt_release_fd (index);  
   1046c:	e13ffe17 	ldw	r4,-8(fp)
   10470:	000e4180 	call	e418 <alt_release_fd>
    ALT_ERRNO = -status;
   10474:	00102300 	call	10230 <alt_get_errno>
   10478:	1007883a 	mov	r3,r2
   1047c:	e0bffd17 	ldw	r2,-12(fp)
   10480:	0085c83a 	sub	r2,zero,r2
   10484:	18800015 	stw	r2,0(r3)
    return -1;
   10488:	00bfffc4 	movi	r2,-1
   1048c:	00000106 	br	10494 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   10490:	e0bffe17 	ldw	r2,-8(fp)
}
   10494:	e037883a 	mov	sp,fp
   10498:	dfc00117 	ldw	ra,4(sp)
   1049c:	df000017 	ldw	fp,0(sp)
   104a0:	dec00204 	addi	sp,sp,8
   104a4:	f800283a 	ret

000104a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   104a8:	defffa04 	addi	sp,sp,-24
   104ac:	df000515 	stw	fp,20(sp)
   104b0:	df000504 	addi	fp,sp,20
   104b4:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   104b8:	0005303a 	rdctl	r2,status
   104bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104c0:	e0fffc17 	ldw	r3,-16(fp)
   104c4:	00bfff84 	movi	r2,-2
   104c8:	1884703a 	and	r2,r3,r2
   104cc:	1001703a 	wrctl	status,r2
  return context;
   104d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   104d4:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   104d8:	e0bffb17 	ldw	r2,-20(fp)
   104dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   104e0:	e0bffd17 	ldw	r2,-12(fp)
   104e4:	10800017 	ldw	r2,0(r2)
   104e8:	e0fffd17 	ldw	r3,-12(fp)
   104ec:	18c00117 	ldw	r3,4(r3)
   104f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   104f4:	e0bffd17 	ldw	r2,-12(fp)
   104f8:	10800117 	ldw	r2,4(r2)
   104fc:	e0fffd17 	ldw	r3,-12(fp)
   10500:	18c00017 	ldw	r3,0(r3)
   10504:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10508:	e0bffd17 	ldw	r2,-12(fp)
   1050c:	e0fffd17 	ldw	r3,-12(fp)
   10510:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10514:	e0bffd17 	ldw	r2,-12(fp)
   10518:	e0fffd17 	ldw	r3,-12(fp)
   1051c:	10c00015 	stw	r3,0(r2)
} 
   10520:	0001883a 	nop
   10524:	e0bfff17 	ldw	r2,-4(fp)
   10528:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   1052c:	e0bffe17 	ldw	r2,-8(fp)
   10530:	1001703a 	wrctl	status,r2
}
   10534:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   10538:	0001883a 	nop
   1053c:	e037883a 	mov	sp,fp
   10540:	df000017 	ldw	fp,0(sp)
   10544:	dec00104 	addi	sp,sp,4
   10548:	f800283a 	ret

0001054c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1054c:	defff904 	addi	sp,sp,-28
   10550:	dfc00615 	stw	ra,24(sp)
   10554:	df000515 	stw	fp,20(sp)
   10558:	dc400415 	stw	r17,16(sp)
   1055c:	dc000315 	stw	r16,12(sp)
   10560:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10564:	d0a00c17 	ldw	r2,-32720(gp)
   10568:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1056c:	d1273c17 	ldw	r4,-25360(gp)
   10570:	d1673d17 	ldw	r5,-25356(gp)
   10574:	01800044 	movi	r6,1
   10578:	000f883a 	mov	r7,zero
   1057c:	2185883a 	add	r2,r4,r6
   10580:	1111803a 	cmpltu	r8,r2,r4
   10584:	29c7883a 	add	r3,r5,r7
   10588:	40c9883a 	add	r4,r8,r3
   1058c:	2007883a 	mov	r3,r4
   10590:	1009883a 	mov	r4,r2
   10594:	180b883a 	mov	r5,r3
   10598:	d1273c15 	stw	r4,-25360(gp)
   1059c:	d1673d15 	stw	r5,-25356(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   105a0:	00002906 	br	10648 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   105a4:	e0bffd17 	ldw	r2,-12(fp)
   105a8:	10800017 	ldw	r2,0(r2)
   105ac:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   105b0:	e13ffd17 	ldw	r4,-12(fp)
   105b4:	20800217 	ldw	r2,8(r4)
   105b8:	20c00317 	ldw	r3,12(r4)
   105bc:	d1273c17 	ldw	r4,-25360(gp)
   105c0:	d1673d17 	ldw	r5,-25356(gp)
   105c4:	28c01e36 	bltu	r5,r3,10640 <alt_tick+0xf4>
   105c8:	1940011e 	bne	r3,r5,105d0 <alt_tick+0x84>
   105cc:	20801c36 	bltu	r4,r2,10640 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   105d0:	e0bffd17 	ldw	r2,-12(fp)
   105d4:	10800417 	ldw	r2,16(r2)
   105d8:	e0fffd17 	ldw	r3,-12(fp)
   105dc:	18c00517 	ldw	r3,20(r3)
   105e0:	1809883a 	mov	r4,r3
   105e4:	103ee83a 	callr	r2
   105e8:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   105ec:	e0bffb17 	ldw	r2,-20(fp)
   105f0:	1000031e 	bne	r2,zero,10600 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   105f4:	e13ffd17 	ldw	r4,-12(fp)
   105f8:	00104a80 	call	104a8 <alt_alarm_stop>
   105fc:	00001006 	br	10640 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   10600:	e0bffd17 	ldw	r2,-12(fp)
   10604:	11000217 	ldw	r4,8(r2)
   10608:	11400317 	ldw	r5,12(r2)
   1060c:	e0bffb17 	ldw	r2,-20(fp)
   10610:	1021883a 	mov	r16,r2
   10614:	0023883a 	mov	r17,zero
   10618:	2405883a 	add	r2,r4,r16
   1061c:	110d803a 	cmpltu	r6,r2,r4
   10620:	2c47883a 	add	r3,r5,r17
   10624:	30c9883a 	add	r4,r6,r3
   10628:	2007883a 	mov	r3,r4
   1062c:	1009883a 	mov	r4,r2
   10630:	180b883a 	mov	r5,r3
   10634:	e0bffd17 	ldw	r2,-12(fp)
   10638:	11000215 	stw	r4,8(r2)
   1063c:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   10640:	e0bffc17 	ldw	r2,-16(fp)
   10644:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   10648:	e0fffd17 	ldw	r3,-12(fp)
   1064c:	d0a00c04 	addi	r2,gp,-32720
   10650:	18bfd41e 	bne	r3,r2,105a4 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10654:	0001883a 	nop
}
   10658:	0001883a 	nop
   1065c:	e6fffe04 	addi	sp,fp,-8
   10660:	dfc00317 	ldw	ra,12(sp)
   10664:	df000217 	ldw	fp,8(sp)
   10668:	dc400117 	ldw	r17,4(sp)
   1066c:	dc000017 	ldw	r16,0(sp)
   10670:	dec00404 	addi	sp,sp,16
   10674:	f800283a 	ret

00010678 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10678:	deffff04 	addi	sp,sp,-4
   1067c:	df000015 	stw	fp,0(sp)
   10680:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10684:	000170fa 	wrctl	ienable,zero
}
   10688:	0001883a 	nop
   1068c:	e037883a 	mov	sp,fp
   10690:	df000017 	ldw	fp,0(sp)
   10694:	dec00104 	addi	sp,sp,4
   10698:	f800283a 	ret

0001069c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1069c:	defffb04 	addi	sp,sp,-20
   106a0:	dfc00415 	stw	ra,16(sp)
   106a4:	df000315 	stw	fp,12(sp)
   106a8:	df000304 	addi	fp,sp,12
   106ac:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   106b0:	d0a00417 	ldw	r2,-32752(gp)
   106b4:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   106b8:	00003106 	br	10780 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   106bc:	e0bfff17 	ldw	r2,-4(fp)
   106c0:	10800217 	ldw	r2,8(r2)
   106c4:	1009883a 	mov	r4,r2
   106c8:	0000bf80 	call	bf8 <strlen>
   106cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   106d0:	e0bfff17 	ldw	r2,-4(fp)
   106d4:	10c00217 	ldw	r3,8(r2)
   106d8:	e0bffe17 	ldw	r2,-8(fp)
   106dc:	10bfffc4 	addi	r2,r2,-1
   106e0:	1885883a 	add	r2,r3,r2
   106e4:	10800003 	ldbu	r2,0(r2)
   106e8:	10803fcc 	andi	r2,r2,255
   106ec:	1080201c 	xori	r2,r2,128
   106f0:	10bfe004 	addi	r2,r2,-128
   106f4:	10800bd8 	cmpnei	r2,r2,47
   106f8:	1000031e 	bne	r2,zero,10708 <alt_find_file+0x6c>
    {
      len -= 1;
   106fc:	e0bffe17 	ldw	r2,-8(fp)
   10700:	10bfffc4 	addi	r2,r2,-1
   10704:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10708:	e0bffe17 	ldw	r2,-8(fp)
   1070c:	e0fffd17 	ldw	r3,-12(fp)
   10710:	1885883a 	add	r2,r3,r2
   10714:	10800003 	ldbu	r2,0(r2)
   10718:	10803fcc 	andi	r2,r2,255
   1071c:	1080201c 	xori	r2,r2,128
   10720:	10bfe004 	addi	r2,r2,-128
   10724:	10800be0 	cmpeqi	r2,r2,47
   10728:	1000081e 	bne	r2,zero,1074c <alt_find_file+0xb0>
   1072c:	e0bffe17 	ldw	r2,-8(fp)
   10730:	e0fffd17 	ldw	r3,-12(fp)
   10734:	1885883a 	add	r2,r3,r2
   10738:	10800003 	ldbu	r2,0(r2)
   1073c:	10803fcc 	andi	r2,r2,255
   10740:	1080201c 	xori	r2,r2,128
   10744:	10bfe004 	addi	r2,r2,-128
   10748:	10000a1e 	bne	r2,zero,10774 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1074c:	e0bfff17 	ldw	r2,-4(fp)
   10750:	10800217 	ldw	r2,8(r2)
   10754:	e0fffe17 	ldw	r3,-8(fp)
   10758:	180d883a 	mov	r6,r3
   1075c:	e17ffd17 	ldw	r5,-12(fp)
   10760:	1009883a 	mov	r4,r2
   10764:	001093c0 	call	1093c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   10768:	1000021e 	bne	r2,zero,10774 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   1076c:	e0bfff17 	ldw	r2,-4(fp)
   10770:	00000706 	br	10790 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10774:	e0bfff17 	ldw	r2,-4(fp)
   10778:	10800017 	ldw	r2,0(r2)
   1077c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   10780:	e0ffff17 	ldw	r3,-4(fp)
   10784:	d0a00404 	addi	r2,gp,-32752
   10788:	18bfcc1e 	bne	r3,r2,106bc <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   1078c:	0005883a 	mov	r2,zero
}
   10790:	e037883a 	mov	sp,fp
   10794:	dfc00117 	ldw	ra,4(sp)
   10798:	df000017 	ldw	fp,0(sp)
   1079c:	dec00204 	addi	sp,sp,8
   107a0:	f800283a 	ret

000107a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   107a4:	defffc04 	addi	sp,sp,-16
   107a8:	df000315 	stw	fp,12(sp)
   107ac:	df000304 	addi	fp,sp,12
   107b0:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   107b4:	00bffa04 	movi	r2,-24
   107b8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   107bc:	e03fff15 	stw	zero,-4(fp)
   107c0:	00001d06 	br	10838 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   107c4:	e0ffff17 	ldw	r3,-4(fp)
   107c8:	1805883a 	mov	r2,r3
   107cc:	1085883a 	add	r2,r2,r2
   107d0:	10c5883a 	add	r2,r2,r3
   107d4:	100490ba 	slli	r2,r2,2
   107d8:	00c00074 	movhi	r3,1
   107dc:	10c7883a 	add	r3,r2,r3
   107e0:	1886f717 	ldw	r2,7132(r3)
   107e4:	1000111e 	bne	r2,zero,1082c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   107e8:	e0ffff17 	ldw	r3,-4(fp)
   107ec:	1805883a 	mov	r2,r3
   107f0:	1085883a 	add	r2,r2,r2
   107f4:	10c5883a 	add	r2,r2,r3
   107f8:	100490ba 	slli	r2,r2,2
   107fc:	e13ffd17 	ldw	r4,-12(fp)
   10800:	00c00074 	movhi	r3,1
   10804:	10c7883a 	add	r3,r2,r3
   10808:	1906f715 	stw	r4,7132(r3)
      if (i > alt_max_fd)
   1080c:	d0e00817 	ldw	r3,-32736(gp)
   10810:	e0bfff17 	ldw	r2,-4(fp)
   10814:	1880020e 	bge	r3,r2,10820 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   10818:	e0bfff17 	ldw	r2,-4(fp)
   1081c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   10820:	e0bfff17 	ldw	r2,-4(fp)
   10824:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10828:	00000706 	br	10848 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   1082c:	e0bfff17 	ldw	r2,-4(fp)
   10830:	10800044 	addi	r2,r2,1
   10834:	e0bfff15 	stw	r2,-4(fp)
   10838:	e0bfff17 	ldw	r2,-4(fp)
   1083c:	10800810 	cmplti	r2,r2,32
   10840:	103fe01e 	bne	r2,zero,107c4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   10844:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10848:	e0bffe17 	ldw	r2,-8(fp)
}
   1084c:	e037883a 	mov	sp,fp
   10850:	df000017 	ldw	fp,0(sp)
   10854:	dec00104 	addi	sp,sp,4
   10858:	f800283a 	ret

0001085c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1085c:	defffe04 	addi	sp,sp,-8
   10860:	df000115 	stw	fp,4(sp)
   10864:	df000104 	addi	fp,sp,4
   10868:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1086c:	e0bfff17 	ldw	r2,-4(fp)
   10870:	10bffe84 	addi	r2,r2,-6
   10874:	10c00428 	cmpgeui	r3,r2,16
   10878:	1800191e 	bne	r3,zero,108e0 <alt_exception_cause_generated_bad_addr+0x84>
   1087c:	100690ba 	slli	r3,r2,2
   10880:	00800074 	movhi	r2,1
   10884:	1885883a 	add	r2,r3,r2
   10888:	10822417 	ldw	r2,2192(r2)
   1088c:	1000683a 	jmp	r2
   10890:	000108d0 	cmplti	zero,zero,1059
   10894:	000108d0 	cmplti	zero,zero,1059
   10898:	000108e0 	cmpeqi	zero,zero,1059
   1089c:	000108e0 	cmpeqi	zero,zero,1059
   108a0:	000108e0 	cmpeqi	zero,zero,1059
   108a4:	000108d0 	cmplti	zero,zero,1059
   108a8:	000108d8 	cmpnei	zero,zero,1059
   108ac:	000108e0 	cmpeqi	zero,zero,1059
   108b0:	000108d0 	cmplti	zero,zero,1059
   108b4:	000108d0 	cmplti	zero,zero,1059
   108b8:	000108e0 	cmpeqi	zero,zero,1059
   108bc:	000108d0 	cmplti	zero,zero,1059
   108c0:	000108d8 	cmpnei	zero,zero,1059
   108c4:	000108e0 	cmpeqi	zero,zero,1059
   108c8:	000108e0 	cmpeqi	zero,zero,1059
   108cc:	000108d0 	cmplti	zero,zero,1059
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   108d0:	00800044 	movi	r2,1
   108d4:	00000306 	br	108e4 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   108d8:	0005883a 	mov	r2,zero
   108dc:	00000106 	br	108e4 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   108e0:	0005883a 	mov	r2,zero
  }
}
   108e4:	e037883a 	mov	sp,fp
   108e8:	df000017 	ldw	fp,0(sp)
   108ec:	dec00104 	addi	sp,sp,4
   108f0:	f800283a 	ret

000108f4 <atexit>:
   108f4:	200b883a 	mov	r5,r4
   108f8:	000f883a 	mov	r7,zero
   108fc:	000d883a 	mov	r6,zero
   10900:	0009883a 	mov	r4,zero
   10904:	00109b41 	jmpi	109b4 <__register_exitproc>

00010908 <exit>:
   10908:	defffe04 	addi	sp,sp,-8
   1090c:	000b883a 	mov	r5,zero
   10910:	dc000015 	stw	r16,0(sp)
   10914:	dfc00115 	stw	ra,4(sp)
   10918:	2021883a 	mov	r16,r4
   1091c:	0010a440 	call	10a44 <__call_exitprocs>
   10920:	00800074 	movhi	r2,1
   10924:	110b9d17 	ldw	r4,11892(r2)
   10928:	20800f17 	ldw	r2,60(r4)
   1092c:	10000126 	beq	r2,zero,10934 <exit+0x2c>
   10930:	103ee83a 	callr	r2
   10934:	8009883a 	mov	r4,r16
   10938:	000dc640 	call	dc64 <_exit>

0001093c <memcmp>:
   1093c:	30800130 	cmpltui	r2,r6,4
   10940:	10000b1e 	bne	r2,zero,10970 <memcmp+0x34>
   10944:	2144b03a 	or	r2,r4,r5
   10948:	108000cc 	andi	r2,r2,3
   1094c:	1000171e 	bne	r2,zero,109ac <memcmp+0x70>
   10950:	20c00017 	ldw	r3,0(r4)
   10954:	28800017 	ldw	r2,0(r5)
   10958:	1880141e 	bne	r3,r2,109ac <memcmp+0x70>
   1095c:	31bfff04 	addi	r6,r6,-4
   10960:	30800128 	cmpgeui	r2,r6,4
   10964:	21000104 	addi	r4,r4,4
   10968:	29400104 	addi	r5,r5,4
   1096c:	103ff81e 	bne	r2,zero,10950 <memcmp+0x14>
   10970:	30bfffc4 	addi	r2,r6,-1
   10974:	30000b26 	beq	r6,zero,109a4 <memcmp+0x68>
   10978:	11800044 	addi	r6,r2,1
   1097c:	218d883a 	add	r6,r4,r6
   10980:	00000106 	br	10988 <memcmp+0x4c>
   10984:	21800726 	beq	r4,r6,109a4 <memcmp+0x68>
   10988:	20800003 	ldbu	r2,0(r4)
   1098c:	28c00003 	ldbu	r3,0(r5)
   10990:	21000044 	addi	r4,r4,1
   10994:	29400044 	addi	r5,r5,1
   10998:	10fffa26 	beq	r2,r3,10984 <memcmp+0x48>
   1099c:	10c5c83a 	sub	r2,r2,r3
   109a0:	f800283a 	ret
   109a4:	0005883a 	mov	r2,zero
   109a8:	f800283a 	ret
   109ac:	30bfffc4 	addi	r2,r6,-1
   109b0:	003ff106 	br	10978 <memcmp+0x3c>

000109b4 <__register_exitproc>:
   109b4:	00800074 	movhi	r2,1
   109b8:	10cb9d17 	ldw	r3,11892(r2)
   109bc:	18805217 	ldw	r2,328(r3)
   109c0:	10001726 	beq	r2,zero,10a20 <__register_exitproc+0x6c>
   109c4:	10c00117 	ldw	r3,4(r2)
   109c8:	1a000808 	cmpgei	r8,r3,32
   109cc:	40001b1e 	bne	r8,zero,10a3c <__register_exitproc+0x88>
   109d0:	20000b26 	beq	r4,zero,10a00 <__register_exitproc+0x4c>
   109d4:	181090ba 	slli	r8,r3,2
   109d8:	02400044 	movi	r9,1
   109dc:	48d2983a 	sll	r9,r9,r3
   109e0:	1211883a 	add	r8,r2,r8
   109e4:	41802215 	stw	r6,136(r8)
   109e8:	11806217 	ldw	r6,392(r2)
   109ec:	21000098 	cmpnei	r4,r4,2
   109f0:	324cb03a 	or	r6,r6,r9
   109f4:	11806215 	stw	r6,392(r2)
   109f8:	41c04215 	stw	r7,264(r8)
   109fc:	20000b26 	beq	r4,zero,10a2c <__register_exitproc+0x78>
   10a00:	19000084 	addi	r4,r3,2
   10a04:	200890ba 	slli	r4,r4,2
   10a08:	18c00044 	addi	r3,r3,1
   10a0c:	10c00115 	stw	r3,4(r2)
   10a10:	1105883a 	add	r2,r2,r4
   10a14:	11400015 	stw	r5,0(r2)
   10a18:	0005883a 	mov	r2,zero
   10a1c:	f800283a 	ret
   10a20:	18805304 	addi	r2,r3,332
   10a24:	18805215 	stw	r2,328(r3)
   10a28:	003fe606 	br	109c4 <__register_exitproc+0x10>
   10a2c:	11006317 	ldw	r4,396(r2)
   10a30:	2252b03a 	or	r9,r4,r9
   10a34:	12406315 	stw	r9,396(r2)
   10a38:	003ff106 	br	10a00 <__register_exitproc+0x4c>
   10a3c:	00bfffc4 	movi	r2,-1
   10a40:	f800283a 	ret

00010a44 <__call_exitprocs>:
   10a44:	defff704 	addi	sp,sp,-36
   10a48:	00800074 	movhi	r2,1
   10a4c:	dcc00315 	stw	r19,12(sp)
   10a50:	14cb9d17 	ldw	r19,11892(r2)
   10a54:	dc800215 	stw	r18,8(sp)
   10a58:	dfc00815 	stw	ra,32(sp)
   10a5c:	9c805217 	ldw	r18,328(r19)
   10a60:	ddc00715 	stw	r23,28(sp)
   10a64:	dd800615 	stw	r22,24(sp)
   10a68:	dd400515 	stw	r21,20(sp)
   10a6c:	dd000415 	stw	r20,16(sp)
   10a70:	dc400115 	stw	r17,4(sp)
   10a74:	dc000015 	stw	r16,0(sp)
   10a78:	90001026 	beq	r18,zero,10abc <__call_exitprocs+0x78>
   10a7c:	202b883a 	mov	r21,r4
   10a80:	282d883a 	mov	r22,r5
   10a84:	05000044 	movi	r20,1
   10a88:	94000117 	ldw	r16,4(r18)
   10a8c:	847fffc4 	addi	r17,r16,-1
   10a90:	88000a16 	blt	r17,zero,10abc <__call_exitprocs+0x78>
   10a94:	84000044 	addi	r16,r16,1
   10a98:	802090ba 	slli	r16,r16,2
   10a9c:	9421883a 	add	r16,r18,r16
   10aa0:	b0001126 	beq	r22,zero,10ae8 <__call_exitprocs+0xa4>
   10aa4:	80804017 	ldw	r2,256(r16)
   10aa8:	15800f26 	beq	r2,r22,10ae8 <__call_exitprocs+0xa4>
   10aac:	8c7fffc4 	addi	r17,r17,-1
   10ab0:	88bfffd8 	cmpnei	r2,r17,-1
   10ab4:	843fff04 	addi	r16,r16,-4
   10ab8:	103ff91e 	bne	r2,zero,10aa0 <__call_exitprocs+0x5c>
   10abc:	dfc00817 	ldw	ra,32(sp)
   10ac0:	ddc00717 	ldw	r23,28(sp)
   10ac4:	dd800617 	ldw	r22,24(sp)
   10ac8:	dd400517 	ldw	r21,20(sp)
   10acc:	dd000417 	ldw	r20,16(sp)
   10ad0:	dcc00317 	ldw	r19,12(sp)
   10ad4:	dc800217 	ldw	r18,8(sp)
   10ad8:	dc400117 	ldw	r17,4(sp)
   10adc:	dc000017 	ldw	r16,0(sp)
   10ae0:	dec00904 	addi	sp,sp,36
   10ae4:	f800283a 	ret
   10ae8:	90800117 	ldw	r2,4(r18)
   10aec:	81800017 	ldw	r6,0(r16)
   10af0:	10bfffc4 	addi	r2,r2,-1
   10af4:	14401726 	beq	r2,r17,10b54 <__call_exitprocs+0x110>
   10af8:	80000015 	stw	zero,0(r16)
   10afc:	303feb26 	beq	r6,zero,10aac <__call_exitprocs+0x68>
   10b00:	a446983a 	sll	r3,r20,r17
   10b04:	90806217 	ldw	r2,392(r18)
   10b08:	95c00117 	ldw	r23,4(r18)
   10b0c:	1884703a 	and	r2,r3,r2
   10b10:	1000081e 	bne	r2,zero,10b34 <__call_exitprocs+0xf0>
   10b14:	303ee83a 	callr	r6
   10b18:	90c00117 	ldw	r3,4(r18)
   10b1c:	98805217 	ldw	r2,328(r19)
   10b20:	1dc0011e 	bne	r3,r23,10b28 <__call_exitprocs+0xe4>
   10b24:	90bfe126 	beq	r18,r2,10aac <__call_exitprocs+0x68>
   10b28:	103fe426 	beq	r2,zero,10abc <__call_exitprocs+0x78>
   10b2c:	1025883a 	mov	r18,r2
   10b30:	003fd506 	br	10a88 <__call_exitprocs+0x44>
   10b34:	90806317 	ldw	r2,396(r18)
   10b38:	81002017 	ldw	r4,128(r16)
   10b3c:	1886703a 	and	r3,r3,r2
   10b40:	1800061e 	bne	r3,zero,10b5c <__call_exitprocs+0x118>
   10b44:	200b883a 	mov	r5,r4
   10b48:	a809883a 	mov	r4,r21
   10b4c:	303ee83a 	callr	r6
   10b50:	003ff106 	br	10b18 <__call_exitprocs+0xd4>
   10b54:	94400115 	stw	r17,4(r18)
   10b58:	003fe806 	br	10afc <__call_exitprocs+0xb8>
   10b5c:	303ee83a 	callr	r6
   10b60:	003fed06 	br	10b18 <__call_exitprocs+0xd4>
