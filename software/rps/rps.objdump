
rps.elf:     file format elf32-littlenios2
rps.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00021fb4 memsz 0x00021fb4 flags r-x
    LOAD off    0x00022fd4 vaddr 0x00021fd4 paddr 0x00023c94 align 2**12
         filesz 0x00001cc0 memsz 0x00001cc0 flags rw-
    LOAD off    0x00000954 vaddr 0x00025954 paddr 0x00025954 align 2**12
         filesz 0x00000000 memsz 0x00000704 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00020c6c  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000112c  00020ea8  00020ea8  00021ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc0  00021fd4  00023c94  00022fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000704  00025954  00025954  00025954  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00026058  00026058  00024c94  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00024c94  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000017d8  00000000  00000000  00024cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0004018a  00000000  00000000  000264a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00010527  00000000  00000000  0006662a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00024ec2  00000000  00000000  00076b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00003f90  00000000  00000000  0009ba14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000670a  00000000  00000000  0009f9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002d04d  00000000  00000000  000a60ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000020  00000000  00000000  000d30fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003530  00000000  00000000  000d3120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000db709  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000db70c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000db711  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000db712  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000db713  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000db717  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000db71b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000db71f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000db728  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000db731  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  000db73a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  000db749  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000e28d9  00000000  00000000  000db775  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
00020ea8 l    d  .rodata	00000000 .rodata
00021fd4 l    d  .rwdata	00000000 .rwdata
00025954 l    d  .bss	00000000 .bss
00026058 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/school/Jaar-3/Periode-4/FPGA/FPGA-project/software/rps_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 kiss_fft.c
00000278 l     F .text	00000154 kf_bfly2
000003cc l     F .text	0000049c kf_bfly4
00000868 l     F .text	00000398 kf_bfly3
00000c00 l     F .text	000006a8 kf_bfly5
000012a8 l     F .text	000002cc kf_bfly_generic
00001574 l     F .text	00000228 kf_work
0000179c l     F .text	0000014c kf_factor
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libmfcc.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 sf_cos.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
000211c4 l     O .rodata	00000080 npio2_hw
00021244 l     O .rodata	00000108 two_over_pi
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_rem_pio2.c
0002134c l     O .rodata	00000080 npio2_hw
000213cc l     O .rodata	00000318 two_over_pi
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00021724 l     O .rodata	00000010 init_jk
000216e4 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 kf_cos.c
00000000 l    df *ABS*	00000000 kf_rem_pio2.c
00021760 l     O .rodata	0000000c init_jk
00021734 l     O .rodata	0000002c PIo2
00000000 l    df *ABS*	00000000 kf_sin.c
00000000 l    df *ABS*	00000000 math_err.c
00008d3c l     F .text	00000048 with_errno
00008d84 l     F .text	00000050 xflow
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00021fd4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
000218a8 l     O .rodata	00000028 tinytens
00021894 l     O .rodata	00000014 fpi.1
00021880 l     O .rodata	00000014 fpinan.0
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011294 l     F .text	000000c0 __sbprintf
00021924 l     O .rodata	00000010 blanks.1
00021914 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000114b8 l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00013108 l     F .text	00000008 __fp_lock
0001311c l     F .text	00000008 __fp_unlock
00013124 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00013e80 l     F .text	000000dc rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lnumeric.c
00023c68 l     O .rwdata	00000002 numempty
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00021b3c l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00016cb0 l     F .text	000000f4 __sprint_r.part.0
00018028 l     F .text	000000c0 __sbprintf
00021c70 l     O .rodata	00000010 blanks.1
00021c60 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fclose.c
00018494 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 unordsf2.c
00000000 l    df *ABS*	00000000 alt_close.c
00019e18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00019f24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00019f88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a094 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001a174 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001a2dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a3c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a7f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00023c84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001aa40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001ab74 l     F .text	00000034 alt_dev_reg
00022b14 l     O .rwdata	00001060 JTAG_UART
00023b74 l     O .rwdata	00000030 AV_Config
00023ba4 l     O .rwdata	00000030 Audio_Subsystem_Audio
00023bd4 l     O .rwdata	0000002c Char_LCD_16x2
00023c00 l     O .rwdata	0000002c Serial_Port
00023c2c l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001ecb4 l     F .text	00000210 altera_avalon_jtag_uart_irq
0001eec4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001f508 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00020010 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00020280 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002052c l     F .text	0000003c alt_get_errno
00020568 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000259c4 g     O .bss	00000004 alt_instruction_exception_handler
00025988 g     O .bss	00000004 aux_status_register
0000d764 g     F .text	00000018 putchar
000161b4 g     F .text	00000070 _mprec_log10
000162a0 g     F .text	00000060 __any_on
000188ec g     F .text	00000058 _isatty_r
00021b48 g     O .rodata	00000028 __mprec_tinytens
0001a4d8 g     F .text	0000007c alt_main
0000d77c g     F .text	000000cc _puts_r
00025f58 g     O .bss	00000100 alt_irq
00018944 g     F .text	00000064 _lseek_r
00003f0c g     F .text	000000c4 log
0000428c g     F .text	000000ac sqrt
00023c94 g       *ABS*	00000000 __flash_rwdata_start
0001f678 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000b73c g     F .text	00000080 .hidden __eqdf2
0001aff0 g     F .text	000001ac Check_for_Master_Boot_Record
00026058 g       *ABS*	00000000 __alt_heap_start
0000f268 g     F .text	00000008 strtok_r
000191e4 g     F .text	00000070 .hidden __floatdidf
0001e924 g     F .text	00000178 alt_up_sd_card_fclose
00019008 g     F .text	00000060 _kill_r
0000d724 g     F .text	00000038 printf
00018a10 g     F .text	0000006c _wcrtomb_r
00018b78 g     F .text	00000098 _signal_r
00016ac4 g     F .text	0000005c __sseek
0001345c g     F .text	00000010 __sinit
000180e8 g     F .text	00000148 __swbuf_r
00014b08 g     F .text	00000074 _setlocale_r
00025958 g     O .bss	00000004 sd_card_dev
0001328c g     F .text	00000068 __sfmoreglue
0001a578 g     F .text	00000024 __malloc_unlock
0001fd30 g     F .text	00000090 alt_up_rs232_read_fd
0000ef24 g     F .text	0000000c _strtod_r
000259ac g     O .bss	00000004 current_sector_modified
000039fc g     F .text	0000011c GetCenterFrequency
00008df8 g     F .text	0000004c .hidden __math_divzero
00014f84 g     F .text	0000012c memmove
00013448 g     F .text	00000014 _cleanup
000151a0 g     F .text	000000a4 _Balloc
0000f1c4 g     F .text	000000a4 __strtok_r
0000a36c g     F .text	00000070 .hidden __fixsfsi
0001d824 g     F .text	000000b0 alt_up_sd_card_is_Present
0001ad44 g     F .text	0000004c Save_Modified_Sector
0000b7bc g     F .text	000000e8 .hidden __gtdf2
00020944 g     F .text	00000024 altera_nios2_gen2_irq_init
0000cde8 g     F .text	0000000c __errno
0001f604 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
000259a4 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00014bfc g     F .text	00000008 __localeconv_l
00006484 g     F .text	000004fc __ieee754_rem_pio2f
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001888c g     F .text	00000060 _fstat_r
0002596c g     O .bss	00000004 errno
00003bc8 g     F .text	000001e4 floor
00016a3c g     F .text	00000008 __seofread
00025978 g     O .bss	00000004 alt_argv
0002bc58 g       *ABS*	00000000 _gp
0001dd64 g     F .text	000002fc alt_up_sd_card_fopen
00009ed8 g     F .text	00000494 .hidden __subsf3
0001d93c g     F .text	000000bc alt_up_sd_card_find_first
00025998 g     O .bss	00000004 command_argument_register
0001a074 g     F .text	00000020 getpid
00022994 g     O .rwdata	00000180 alt_fd_list
00005acc g     F .text	0000074c __ieee754_rem_pio2
0000d75c g     F .text	00000008 _putchar_r
0001d0b8 g     F .text	00000120 find_first_empty_record_in_root_directory
000201bc g     F .text	00000090 alt_find_dev
0000d5f4 g     F .text	00000100 memcpy
00014870 g     F .text	00000290 __hexnan
0001f828 g     F .text	00000050 alt_up_character_lcd_write_fd
00008e44 g     F .text	00000094 .hidden __math_invalid
00013110 g     F .text	0000000c _cleanup_r
0000c9e0 g     F .text	000000b8 .hidden __floatsidf
00020330 g     F .text	0000007c alt_io_redirect
0000b8a4 g     F .text	000000e8 .hidden __ltdf2
00020ea8 g       *ABS*	00000000 __DTOR_END__
0001fcbc g     F .text	00000074 alt_up_rs232_read_data
0000d848 g     F .text	00000010 puts
00020ba0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0001cce8 g     F .text	00000190 find_first_empty_cluster
0001610c g     F .text	000000a8 __ratio
0001d76c g     F .text	000000b8 alt_up_sd_card_open_dev
00002874 g     F .text	00000680 compare_mfcc_buffers
0001800c g     F .text	0000001c __vfiprintf_internal
0001f0c0 g     F .text	00000220 altera_avalon_jtag_uart_read
0000cdf4 g     F .text	00000010 malloc
0000d6f4 g     F .text	00000030 _printf_r
000094d0 g     F .text	00000064 .hidden __udivsi3
0001a0d0 g     F .text	000000a4 isatty
00018c10 g     F .text	000000c4 _raise_r
00018340 g     F .text	00000064 __assert_func
00021b98 g     O .rodata	000000c8 __mprec_tens
00006980 g     F .text	000004ac __kernel_cos
00019d18 g     F .text	000000b4 .hidden __lesf2
0001906c g     F .text	00000074 .hidden __fixunsdfsi
00020b10 g     F .text	00000090 alt_icache_flush
00025968 g     O .bss	00000004 __malloc_top_pad
00019068 g     F .text	00000004 _getpid_r
00014c04 g     F .text	0000000c _localeconv_r
000155ec g     F .text	000000b0 __i2b
000138bc g     F .text	00000484 __sfvwrite_r
00018cd4 g     F .text	000000bc __sigtramp_r
0001c088 g     F .text	000000b8 get_dir_divider_location
0000d858 g     F .text	00000058 _sbrk_r
0001bd4c g     F .text	000000d0 filename_to_upper_case
0001e060 g     F .text	0000007c alt_up_sd_card_set_attributes
0001b19c g     F .text	00000278 Read_File_Record_At_Offset
000189a8 g     F .text	00000064 _read_r
00023c7c g     O .rwdata	00000004 alt_max_fd
0001fc38 g     F .text	00000044 alt_up_rs232_check_parity
0001c8bc g     F .text	0000042c find_file_in_directory
00018554 g     F .text	00000070 _fclose_r
00013084 g     F .text	00000084 fflush
00025964 g     O .bss	00000004 __malloc_max_sbrked_mem
000203ac g     F .text	00000180 alt_irq_register
00007b38 g     F .text	000002c8 __kernel_sin
0000cb28 g     F .text	000000fc .hidden __extendsfdf2
0001d8d4 g     F .text	00000068 alt_up_sd_card_is_FAT16
0000a5fc g     F .text	000008f0 .hidden __adddf3
000099fc g     F .text	00000070 .hidden __nesf2
00015ea0 g     F .text	00000108 __b2d
000197e4 g     F .text	00000534 .hidden __umoddi3
0001a404 g     F .text	000000d4 lseek
00023c58 g     O .rwdata	00000004 _global_impure_ptr
0001c3cc g     F .text	000004f0 get_home_directory_cluster_for_file
000164ac g     F .text	0000053c _realloc_r
00008b88 g     F .text	000001b4 __kernel_sinf
00026058 g       *ABS*	00000000 __bss_end
00020818 g     F .text	0000012c alt_tick
000219e0 g     O .rodata	00000100 __hexdig
00019254 g     F .text	00000590 .hidden __udivdi3
000187f0 g     F .text	00000024 _fputwc_r
00021b70 g     O .rodata	00000028 __mprec_bigtens
000153a0 g     F .text	00000138 __s2b
00018b04 g     F .text	00000018 abort
0000ca98 g     F .text	00000090 .hidden __floatunsidf
00015bc0 g     F .text	00000058 __mcmp
000259b0 g     O .bss	00000004 current_sector_index
0001347c g     F .text	00000014 __fp_lock_all
00002298 g     F .text	000000cc check_KEYs
00020774 g     F .text	000000a4 alt_alarm_stop
0001af18 g     F .text	000000d8 mark_cluster
00003e70 g     F .text	0000009c cosf
000259b4 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000cc alt_irq_handler
0002296c g     O .rwdata	00000028 alt_dev_null
00006e2c g     F .text	00000d0c __kernel_rem_pio2
0000d948 g     F .text	000015dc _strtod_l
00014820 g     F .text	00000050 __match
00025954 g     O .bss	00000004 char_lcd_dev
0001d1d8 g     F .text	00000190 convert_filename_to_name_extension
0001fac8 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001fff0 g     F .text	00000020 alt_dcache_flush_all
000154d8 g     F .text	00000064 __hi0bits
00025984 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0000c960 g     F .text	00000080 .hidden __fixdfsi
00007e00 g     F .text	000002c4 __kernel_cosf
0001ce78 g     F .text	00000240 find_first_empty_record_in_a_subdirectory
0000ef4c g     F .text	00000020 strtod
00023c94 g       *ABS*	00000000 __ram_rwdata_end
00023c74 g     O .rwdata	00000008 alt_dev_list
0001aa7c g     F .text	000000f8 write
00016300 g     F .text	000000cc _putc_r
000259a8 g     O .bss	00000004 device_pointer
00009a6c g     F .text	000000b8 .hidden __gtsf2
00021fd4 g       *ABS*	00000000 __ram_rodata_end
00019fc4 g     F .text	000000b0 fstat
0001fdc0 g     F .text	00000094 alt_up_rs232_write_fd
0001a1b0 g     F .text	0000012c kill
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b8a4 g     F .text	000000e8 .hidden __ledf2
00008dec g     F .text	0000000c .hidden __math_oflow
0000ef6c g     F .text	00000120 strtof_l
000158f0 g     F .text	00000148 __pow5mult
00016dbc g     F .text	00001250 ___vfiprintf_internal_r
00009534 g     F .text	0000005c .hidden __umodsi3
00026058 g       *ABS*	00000000 end
0000309c g     F .text	00000168 get_values_from_sd_card_file
00002f70 g     F .text	0000007c writeToLCD
0002595c g     O .bss	00000004 connected
0001ec00 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001c8 g     F .exceptions	00000074 alt_instruction_exception_entry
00008f3c g     F .text	000000a0 .hidden __math_check_oflow
00020ea8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00008de0 g     F .text	0000000c .hidden __math_may_uflow
0001f588 g     F .text	0000007c alt_avalon_timer_sc_init
0000cd94 g     F .text	00000054 .hidden __clzsi2
0001f2e0 g     F .text	00000228 altera_avalon_jtag_uart_write
00003b18 g     F .text	000000b0 cos
00001b24 g     F .text	000000d4 kiss_fft_stride
0001346c g     F .text	00000004 __sfp_lock_acquire
00014eb4 g     F .text	000000d0 memchr
00001bf8 g     F .text	00000048 kiss_fft
0001f72c g     F .text	00000080 alt_up_character_lcd_write
0000f270 g     F .text	00002008 ___vfprintf_internal_r
000135c0 g     F .text	000002fc _free_r
0001a59c g     F .text	0000022c alt_printf
00021dc4 g     O .rodata	00000180 _ctype_b
00014b7c g     F .text	0000000c __locale_mb_cur_max
00020d88 g     F .text	00000120 __call_exitprocs
00023c60 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
000259b8 g     O .bss	00000004 _alt_tick_rate
00003dac g     F .text	000000c4 sin
00015a38 g     F .text	00000188 __lshift
000259bc g     O .bss	00000008 _alt_nticks
00018e4c g     F .text	000000a0 signal
0001a834 g     F .text	000000fc read
0001abe4 g     F .text	000000ac alt_sys_init
0001f978 g     F .text	0000008c alt_up_character_lcd_shift_display
0000a3dc g     F .text	00000124 .hidden __floatsisf
00020cf8 g     F .text	00000090 __register_exitproc
00016be0 g     F .text	000000d0 strncmp
0001fbfc g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00002364 g     F .text	00000118 normalize_audio
0001569c g     F .text	00000254 __multiply
000049c4 g     F .text	00001108 __ieee754_pow
0001fa04 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001ef64 g     F .text	00000068 altera_avalon_jtag_uart_close
00003fd0 g     F .text	000002bc pow
00021fd4 g       *ABS*	00000000 __ram_rwdata_start
00020ea8 g       *ABS*	00000000 __ram_rodata_start
000259c8 g     O .bss	00000028 __malloc_current_mallinfo
000099fc g     F .text	00000070 .hidden __eqsf2
00015fa8 g     F .text	00000164 __d2b
00025980 g     O .bss	00000004 initialized
00002ef4 g     F .text	0000007c clearLCD
0001ea9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00020a70 g     F .text	000000a0 alt_get_fd
00025f44 g     O .bss	00000014 search_data
000182e8 g     F .text	00000058 _close_r
0000f1b0 g     F .text	00000014 strtok
00020c80 g     F .text	00000078 memcmp
0001eb5c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00026058 g       *ABS*	00000000 __alt_stack_base
0001ebac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00011354 g     F .text	00000164 __swsetup_r
0000aeec g     F .text	00000850 .hidden __divdf3
000132f4 g     F .text	00000154 __sfp
000259f0 g     O .bss	00000054 boot_sector_data
00016224 g     F .text	0000007c __copybits
000223f8 g     O .rwdata	00000408 __malloc_av_
00013478 g     F .text	00000004 __sinit_lock_release
0000b98c g     F .text	00000674 .hidden __muldf3
000169e8 g     F .text	00000054 __sread
0001fb5c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00020968 g     F .text	00000108 alt_find_file
0002004c g     F .text	000000a8 alt_dev_llist_insert
0001a554 g     F .text	00000024 __malloc_lock
0001a988 g     F .text	000000b8 sbrk
00009290 g     F .text	0000014c scalbnf
00013024 g     F .text	00000060 _fflush_r
000183b8 g     F .text	000000dc _calloc_r
00025954 g       *ABS*	00000000 __bss_start
000150b0 g     F .text	000000f0 memset
00001d24 g     F .text	00000574 main
0002597c g     O .bss	00000004 alt_envp
00025960 g     O .bss	00000004 __malloc_max_total_mem
0001eafc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00018230 g     F .text	00000018 __swbuf
00019d18 g     F .text	000000b4 .hidden __ltsf2
0001e0dc g     F .text	00000078 alt_up_sd_card_get_attributes
0001ac90 g     F .text	000000b4 Write_Sector_Data
0001e428 g     F .text	000004fc alt_up_sd_card_write
0001f8ec g     F .text	0000008c alt_up_character_lcd_shift_cursor
00016b20 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000185c4 g     F .text	00000070 fclose
0000cc24 g     F .text	00000170 .hidden __truncdfsf2
000116b4 g     F .text	00001748 _dtoa_r
0000ce14 g     F .text	000007e0 _malloc_r
00018254 g     F .text	00000030 __ascii_wctomb
00023c80 g     O .rwdata	00000004 alt_errno
00018634 g     F .text	00000020 _fiprintf_r
00018eec g     F .text	00000060 _init_signal
00013d40 g     F .text	00000098 _fwalk
00014e64 g     F .text	0000000c _mbtowc_r
000163cc g     F .text	000000e0 putc
000093dc g     F .text	00000080 .hidden __divsi3
0001f6f0 g     F .text	0000003c alt_up_character_lcd_open_dev
000134a4 g     F .text	0000011c _malloc_trim_r
00020ea8 g       *ABS*	00000000 __CTOR_END__
00009b24 g     F .text	000003b4 .hidden __mulsf3
0002598c g     O .bss	00000004 status_register
00008ed8 g     F .text	00000064 .hidden __math_check_uflow
0001f6b8 g     F .text	00000038 alt_up_character_lcd_init
000038e8 g     F .text	00000114 GetMagnitudeFactor
00016b28 g     F .text	000000b8 strcmp
00025994 g     O .bss	00000004 command_register
00020ea8 g       *ABS*	00000000 __flash_rodata_start
00003294 g     F .text	00000290 GetCoefficient
00020ea8 g       *ABS*	00000000 __DTOR_LIST__
0001fe54 g     F .text	0000003c alt_up_rs232_open_dev
00019154 g     F .text	00000090 .hidden __fixunsdfdi
0000b73c g     F .text	00000080 .hidden __nedf2
00003204 g     F .text	00000090 list_files_on_sd_card
0001aba8 g     F .text	0000003c alt_irq_init
0001a930 g     F .text	00000058 alt_release_fd
0001ae68 g     F .text	000000b0 get_cluster_flag
0001fa90 g     F .text	00000038 alt_up_character_lcd_cursor_off
0002176c g     O .rodata	00000100 .hidden __clz_tab
0001b414 g     F .text	00000288 Write_File_Record_At_Offset
00025970 g     O .bss	00000004 _PathLocale
000190e0 g     F .text	00000074 .hidden __fixdfdi
0000f08c g     F .text	00000124 strtof
0000ef30 g     F .text	0000001c strtod_l
00020c38 g     F .text	00000014 atexit
00009a6c g     F .text	000000b8 .hidden __gesf2
00018284 g     F .text	00000064 _write_r
00014b88 g     F .text	00000074 setlocale
00002fec g     F .text	000000b0 checkIfSDCardIsPresent
0001b69c g     F .text	000005cc Check_for_DOS_FAT
0001d368 g     F .text	000002bc create_file
00023c5c g     O .rwdata	00000004 _impure_ptr
00025990 g     O .bss	00000004 CSD_register_w0
00025974 g     O .bss	00000004 alt_argc
00012dfc g     F .text	00000228 __sflush_r
00008fdc g     F .text	000001c0 scalbn
00020158 g     F .text	00000064 _do_dtors
00004338 g     F .text	0000068c __ieee754_log
0000262c g     F .text	00000248 calculate_mfcc
00000020 g       .exceptions	00000000 alt_irq_entry
00014e70 g     F .text	00000044 __ascii_mbtowc
00015e44 g     F .text	0000005c __ulp
00013490 g     F .text	00000014 __fp_unlock_all
00021ae4 g     O .rodata	0000000c _C_numeric_locale
00002574 g     F .text	000000b8 fft
00023c6c g     O .rwdata	00000008 alt_fs_list
0001be1c g     F .text	0000026c check_file_name_for_FAT16_compliance
0002599c g     O .bss	00000004 buffer_memory
0001fb00 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001fc7c g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014c10 g     F .text	0000000c localeconv
00006218 g     F .text	0000026c __ieee754_sqrt
00014dcc g     F .text	00000098 __swhatbuf_r
000259a0 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00023c94 g       *ABS*	00000000 _edata
00026058 g       *ABS*	00000000 _end
00025a44 g     O .bss	00000500 active_files
00019dcc g     F .text	0000004c .hidden __unordsf2
0001868c g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
0001d624 g     F .text	00000148 copy_file_record_name_to_string
0001efcc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001bc68 g     F .text	000000e4 Look_for_FAT16
00016a44 g     F .text	00000080 __swrite
00023c64 g     O .rwdata	00000004 __malloc_trim_threshold
00020c4c g     F .text	00000034 exit
00018654 g     F .text	00000038 fiprintf
00018a0c g     F .text	00000004 _vfiprintf_r
0001d9f8 g     F .text	0000036c alt_up_sd_card_find_next
00013dd8 g     F .text	000000a8 _fwalk_reent
0000a500 g     F .text	000000fc .hidden __floatunsisf
00015c18 g     F .text	0000022c __mdiff
00001c40 g     F .text	00000020 kiss_fft_cleanup
00008dd4 g     F .text	0000000c .hidden __math_uflow
0000945c g     F .text	00000074 .hidden __modsi3
0001ad90 g     F .text	000000d8 Read_Sector_Data
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00013470 g     F .text	00000004 __sfp_lock_release
0001f7ac g     F .text	0000007c alt_up_character_lcd_string
00021cc0 g     O .rodata	00000101 _ctype_
0000c90c g     F .text	00000054 .hidden __unorddf2
0000247c g     F .text	000000f8 hamming_window
00019f50 g     F .text	00000038 _exit
000080c4 g     F .text	00000ac4 __kernel_rem_pio2f
0001fe90 g     F .text	00000160 alt_alarm_start
0001e154 g     F .text	000002d4 alt_up_sd_card_read
00014c1c g     F .text	000001b0 __smakebuf_r
0000d8b0 g     F .text	00000098 strlen
00018b1c g     F .text	0000005c _init_signal_r
00020620 g     F .text	00000154 open
0000b7bc g     F .text	000000e8 .hidden __gedf2
0001a7c8 g     F .text	00000030 alt_putchar
00013f5c g     F .text	000008c4 __gethex
000183a4 g     F .text	00000014 __assert
000035ec g     F .text	000002fc GetFilterParameter
00016da4 g     F .text	00000018 __sprint_r
0002024c g     F .text	00000034 alt_icache_flush_all
0000919c g     F .text	000000f4 floorf
00014b00 g     F .text	00000008 __numeric_load_locale
00003524 g     F .text	000000c8 NormalizationFactor
0001f878 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00023c88 g     O .rwdata	00000004 alt_priority_mask
00011278 g     F .text	0000001c __vfprintf_internal
00001c60 g     F .text	000000c4 kiss_fft_next_fast_size
00018248 g     F .text	0000000c _wctomb_r
000018e8 g     F .text	0000023c kiss_fft_alloc
0000c000 g     F .text	0000090c .hidden __subdf3
0001553c g     F .text	000000b0 __lo0bits
00023c8c g     O .rwdata	00000008 alt_alarm_list
000200f4 g     F .text	00000064 _do_ctors
00018f4c g     F .text	000000bc __sigtramp
0001fbbc g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00018a7c g     F .text	00000088 wcrtomb
00019e54 g     F .text	000000d0 close
00009590 g     F .text	0000046c .hidden __addsf3
00022800 g     O .rwdata	0000016c __global_locale
0001a344 g     F .text	00000084 alt_load
0001c140 g     F .text	0000028c match_file_record_to_name_ext
00018814 g     F .text	00000078 fputwc
00018d90 g     F .text	000000bc raise
0000ce04 g     F .text	00000010 free
00013474 g     F .text	00000004 __sinit_lock_acquire
00015268 g     F .text	00000138 __multadd
00015244 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08408f14 	ori	at,at,572
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008000b4 	movhi	r2,2
 148:	1885883a 	add	r2,r3,r2
 14c:	10d7d617 	ldw	r3,24408(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008000b4 	movhi	r2,2
 15c:	2085883a 	add	r2,r4,r2
 160:	1097d717 	ldw	r2,24412(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	0001883a 	nop
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1dc:	000531fa 	rdctl	r2,exception
 1e0:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e4:	e0bfff17 	ldw	r2,-4(fp)
 1e8:	1004d0ba 	srli	r2,r2,2
 1ec:	108007cc 	andi	r2,r2,31
 1f0:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f4:	0005333a 	rdctl	r2,badaddr
 1f8:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a75b17 	ldw	r2,-25236(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a75b17 	ldw	r2,-25236(gp)
 208:	e0ffff17 	ldw	r3,-4(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17ffd17 	ldw	r5,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     244:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     248:	d6af1614 	ori	gp,gp,48216
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     250:	10965514 	ori	r2,r2,22868

    movhi r3, %hi(__bss_end)
     254:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     258:	18d81614 	ori	r3,r3,24664

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	001a3440 	call	1a344 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	001a4d80 	call	1a4d8 <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <alt_after_alt_main>

00000278 <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
     278:	defff704 	addi	sp,sp,-36
     27c:	df000815 	stw	fp,32(sp)
     280:	df000804 	addi	fp,sp,32
     284:	e13ffb15 	stw	r4,-20(fp)
     288:	e17ffa15 	stw	r5,-24(fp)
     28c:	e1bff915 	stw	r6,-28(fp)
     290:	e1fff815 	stw	r7,-32(fp)
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
     294:	e0bff917 	ldw	r2,-28(fp)
     298:	10804204 	addi	r2,r2,264
     29c:	e0bffe15 	stw	r2,-8(fp)
    kiss_fft_cpx t;
    Fout2 = Fout + m;
     2a0:	e0bff817 	ldw	r2,-32(fp)
     2a4:	100490fa 	slli	r2,r2,3
     2a8:	e0fffb17 	ldw	r3,-20(fp)
     2ac:	1885883a 	add	r2,r3,r2
     2b0:	e0bfff15 	stw	r2,-4(fp)
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	10c00017 	ldw	r3,0(r2)
     2bc:	e13ffe17 	ldw	r4,-8(fp)
     2c0:	20800017 	ldw	r2,0(r4)
     2c4:	1887ff32 	custom	252,r3,r3,r2
     2c8:	e0bfff17 	ldw	r2,-4(fp)
     2cc:	11000117 	ldw	r4,4(r2)
     2d0:	e17ffe17 	ldw	r5,-8(fp)
     2d4:	28800117 	ldw	r2,4(r5)
     2d8:	2085ff32 	custom	252,r2,r4,r2
     2dc:	1885ffb2 	custom	254,r2,r3,r2
     2e0:	e0bffc15 	stw	r2,-16(fp)
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	10c00017 	ldw	r3,0(r2)
     2ec:	e13ffe17 	ldw	r4,-8(fp)
     2f0:	20800117 	ldw	r2,4(r4)
     2f4:	1887ff32 	custom	252,r3,r3,r2
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	11000117 	ldw	r4,4(r2)
     300:	e17ffe17 	ldw	r5,-8(fp)
     304:	28800017 	ldw	r2,0(r5)
     308:	2085ff32 	custom	252,r2,r4,r2
     30c:	1885ff72 	custom	253,r2,r3,r2
     310:	e0bffd15 	stw	r2,-12(fp)
        tw1 += fstride;
     314:	e0bffa17 	ldw	r2,-24(fp)
     318:	100490fa 	slli	r2,r2,3
     31c:	e0fffe17 	ldw	r3,-8(fp)
     320:	1885883a 	add	r2,r3,r2
     324:	e0bffe15 	stw	r2,-8(fp)
        C_SUB( *Fout2 ,  *Fout , t );
     328:	e0bffb17 	ldw	r2,-20(fp)
     32c:	10c00017 	ldw	r3,0(r2)
     330:	e0bffc17 	ldw	r2,-16(fp)
     334:	1887ffb2 	custom	254,r3,r3,r2
     338:	e0bfff17 	ldw	r2,-4(fp)
     33c:	10c00015 	stw	r3,0(r2)
     340:	e0bffb17 	ldw	r2,-20(fp)
     344:	10c00117 	ldw	r3,4(r2)
     348:	e0bffd17 	ldw	r2,-12(fp)
     34c:	1887ffb2 	custom	254,r3,r3,r2
     350:	e0bfff17 	ldw	r2,-4(fp)
     354:	10c00115 	stw	r3,4(r2)
        C_ADDTO( *Fout ,  t );
     358:	e0bffb17 	ldw	r2,-20(fp)
     35c:	10c00017 	ldw	r3,0(r2)
     360:	e0bffc17 	ldw	r2,-16(fp)
     364:	1887ff72 	custom	253,r3,r3,r2
     368:	e0bffb17 	ldw	r2,-20(fp)
     36c:	10c00015 	stw	r3,0(r2)
     370:	e0bffb17 	ldw	r2,-20(fp)
     374:	10c00117 	ldw	r3,4(r2)
     378:	e0bffd17 	ldw	r2,-12(fp)
     37c:	1887ff72 	custom	253,r3,r3,r2
     380:	e0bffb17 	ldw	r2,-20(fp)
     384:	10c00115 	stw	r3,4(r2)
        ++Fout2;
     388:	e0bfff17 	ldw	r2,-4(fp)
     38c:	10800204 	addi	r2,r2,8
     390:	e0bfff15 	stw	r2,-4(fp)
        ++Fout;
     394:	e0bffb17 	ldw	r2,-20(fp)
     398:	10800204 	addi	r2,r2,8
     39c:	e0bffb15 	stw	r2,-20(fp)
    }while (--m);
     3a0:	e0bff817 	ldw	r2,-32(fp)
     3a4:	10bfffc4 	addi	r2,r2,-1
     3a8:	e0bff815 	stw	r2,-32(fp)
     3ac:	e0bff817 	ldw	r2,-32(fp)
     3b0:	103fc01e 	bne	r2,zero,2b4 <kf_bfly2+0x3c>
}
     3b4:	0001883a 	nop
     3b8:	0001883a 	nop
     3bc:	e037883a 	mov	sp,fp
     3c0:	df000017 	ldw	fp,0(sp)
     3c4:	dec00104 	addi	sp,sp,4
     3c8:	f800283a 	ret

000003cc <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
     3cc:	deffe904 	addi	sp,sp,-92
     3d0:	df001615 	stw	fp,88(sp)
     3d4:	df001604 	addi	fp,sp,88
     3d8:	e13fed15 	stw	r4,-76(fp)
     3dc:	e17fec15 	stw	r5,-80(fp)
     3e0:	e1bfeb15 	stw	r6,-84(fp)
     3e4:	e1ffea15 	stw	r7,-88(fp)
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
     3e8:	e0bfea17 	ldw	r2,-88(fp)
     3ec:	e0bffc15 	stw	r2,-16(fp)
    const size_t m2=2*m;
     3f0:	e0bfea17 	ldw	r2,-88(fp)
     3f4:	1085883a 	add	r2,r2,r2
     3f8:	e0bffb15 	stw	r2,-20(fp)
    const size_t m3=3*m;
     3fc:	e0bfea17 	ldw	r2,-88(fp)
     400:	108000e4 	muli	r2,r2,3
     404:	e0bffa15 	stw	r2,-24(fp)


    tw3 = tw2 = tw1 = st->twiddles;
     408:	e0bfeb17 	ldw	r2,-84(fp)
     40c:	10804204 	addi	r2,r2,264
     410:	e0bfff15 	stw	r2,-4(fp)
     414:	e0bfff17 	ldw	r2,-4(fp)
     418:	e0bffe15 	stw	r2,-8(fp)
     41c:	e0bffe17 	ldw	r2,-8(fp)
     420:	e0bffd15 	stw	r2,-12(fp)

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
     424:	e0bfea17 	ldw	r2,-88(fp)
     428:	100490fa 	slli	r2,r2,3
     42c:	e0ffed17 	ldw	r3,-76(fp)
     430:	1885883a 	add	r2,r3,r2
     434:	10c00017 	ldw	r3,0(r2)
     438:	e13fff17 	ldw	r4,-4(fp)
     43c:	20800017 	ldw	r2,0(r4)
     440:	1887ff32 	custom	252,r3,r3,r2
     444:	e0bfea17 	ldw	r2,-88(fp)
     448:	100490fa 	slli	r2,r2,3
     44c:	e13fed17 	ldw	r4,-76(fp)
     450:	2085883a 	add	r2,r4,r2
     454:	11000117 	ldw	r4,4(r2)
     458:	e17fff17 	ldw	r5,-4(fp)
     45c:	28800117 	ldw	r2,4(r5)
     460:	2085ff32 	custom	252,r2,r4,r2
     464:	1885ffb2 	custom	254,r2,r3,r2
     468:	e0bfee15 	stw	r2,-72(fp)
     46c:	e0bfea17 	ldw	r2,-88(fp)
     470:	100490fa 	slli	r2,r2,3
     474:	e0ffed17 	ldw	r3,-76(fp)
     478:	1885883a 	add	r2,r3,r2
     47c:	10c00017 	ldw	r3,0(r2)
     480:	e13fff17 	ldw	r4,-4(fp)
     484:	20800117 	ldw	r2,4(r4)
     488:	1887ff32 	custom	252,r3,r3,r2
     48c:	e0bfea17 	ldw	r2,-88(fp)
     490:	100490fa 	slli	r2,r2,3
     494:	e13fed17 	ldw	r4,-76(fp)
     498:	2085883a 	add	r2,r4,r2
     49c:	11000117 	ldw	r4,4(r2)
     4a0:	e17fff17 	ldw	r5,-4(fp)
     4a4:	28800017 	ldw	r2,0(r5)
     4a8:	2085ff32 	custom	252,r2,r4,r2
     4ac:	1885ff72 	custom	253,r2,r3,r2
     4b0:	e0bfef15 	stw	r2,-68(fp)
        C_MUL(scratch[1],Fout[m2] , *tw2 );
     4b4:	e0bffb17 	ldw	r2,-20(fp)
     4b8:	100490fa 	slli	r2,r2,3
     4bc:	e0ffed17 	ldw	r3,-76(fp)
     4c0:	1885883a 	add	r2,r3,r2
     4c4:	10c00017 	ldw	r3,0(r2)
     4c8:	e13ffe17 	ldw	r4,-8(fp)
     4cc:	20800017 	ldw	r2,0(r4)
     4d0:	1887ff32 	custom	252,r3,r3,r2
     4d4:	e0bffb17 	ldw	r2,-20(fp)
     4d8:	100490fa 	slli	r2,r2,3
     4dc:	e13fed17 	ldw	r4,-76(fp)
     4e0:	2085883a 	add	r2,r4,r2
     4e4:	11000117 	ldw	r4,4(r2)
     4e8:	e17ffe17 	ldw	r5,-8(fp)
     4ec:	28800117 	ldw	r2,4(r5)
     4f0:	2085ff32 	custom	252,r2,r4,r2
     4f4:	1885ffb2 	custom	254,r2,r3,r2
     4f8:	e0bff015 	stw	r2,-64(fp)
     4fc:	e0bffb17 	ldw	r2,-20(fp)
     500:	100490fa 	slli	r2,r2,3
     504:	e0ffed17 	ldw	r3,-76(fp)
     508:	1885883a 	add	r2,r3,r2
     50c:	10c00017 	ldw	r3,0(r2)
     510:	e13ffe17 	ldw	r4,-8(fp)
     514:	20800117 	ldw	r2,4(r4)
     518:	1887ff32 	custom	252,r3,r3,r2
     51c:	e0bffb17 	ldw	r2,-20(fp)
     520:	100490fa 	slli	r2,r2,3
     524:	e13fed17 	ldw	r4,-76(fp)
     528:	2085883a 	add	r2,r4,r2
     52c:	11000117 	ldw	r4,4(r2)
     530:	e17ffe17 	ldw	r5,-8(fp)
     534:	28800017 	ldw	r2,0(r5)
     538:	2085ff32 	custom	252,r2,r4,r2
     53c:	1885ff72 	custom	253,r2,r3,r2
     540:	e0bff115 	stw	r2,-60(fp)
        C_MUL(scratch[2],Fout[m3] , *tw3 );
     544:	e0bffa17 	ldw	r2,-24(fp)
     548:	100490fa 	slli	r2,r2,3
     54c:	e0ffed17 	ldw	r3,-76(fp)
     550:	1885883a 	add	r2,r3,r2
     554:	10c00017 	ldw	r3,0(r2)
     558:	e13ffd17 	ldw	r4,-12(fp)
     55c:	20800017 	ldw	r2,0(r4)
     560:	1887ff32 	custom	252,r3,r3,r2
     564:	e0bffa17 	ldw	r2,-24(fp)
     568:	100490fa 	slli	r2,r2,3
     56c:	e13fed17 	ldw	r4,-76(fp)
     570:	2085883a 	add	r2,r4,r2
     574:	11000117 	ldw	r4,4(r2)
     578:	e17ffd17 	ldw	r5,-12(fp)
     57c:	28800117 	ldw	r2,4(r5)
     580:	2085ff32 	custom	252,r2,r4,r2
     584:	1885ffb2 	custom	254,r2,r3,r2
     588:	e0bff215 	stw	r2,-56(fp)
     58c:	e0bffa17 	ldw	r2,-24(fp)
     590:	100490fa 	slli	r2,r2,3
     594:	e0ffed17 	ldw	r3,-76(fp)
     598:	1885883a 	add	r2,r3,r2
     59c:	10c00017 	ldw	r3,0(r2)
     5a0:	e13ffd17 	ldw	r4,-12(fp)
     5a4:	20800117 	ldw	r2,4(r4)
     5a8:	1887ff32 	custom	252,r3,r3,r2
     5ac:	e0bffa17 	ldw	r2,-24(fp)
     5b0:	100490fa 	slli	r2,r2,3
     5b4:	e13fed17 	ldw	r4,-76(fp)
     5b8:	2085883a 	add	r2,r4,r2
     5bc:	11000117 	ldw	r4,4(r2)
     5c0:	e17ffd17 	ldw	r5,-12(fp)
     5c4:	28800017 	ldw	r2,0(r5)
     5c8:	2085ff32 	custom	252,r2,r4,r2
     5cc:	1885ff72 	custom	253,r2,r3,r2
     5d0:	e0bff315 	stw	r2,-52(fp)

        C_SUB( scratch[5] , *Fout, scratch[1] );
     5d4:	e0bfed17 	ldw	r2,-76(fp)
     5d8:	10c00017 	ldw	r3,0(r2)
     5dc:	e0bff017 	ldw	r2,-64(fp)
     5e0:	1885ffb2 	custom	254,r2,r3,r2
     5e4:	e0bff815 	stw	r2,-32(fp)
     5e8:	e0bfed17 	ldw	r2,-76(fp)
     5ec:	10c00117 	ldw	r3,4(r2)
     5f0:	e0bff117 	ldw	r2,-60(fp)
     5f4:	1885ffb2 	custom	254,r2,r3,r2
     5f8:	e0bff915 	stw	r2,-28(fp)
        C_ADDTO(*Fout, scratch[1]);
     5fc:	e0bfed17 	ldw	r2,-76(fp)
     600:	10c00017 	ldw	r3,0(r2)
     604:	e0bff017 	ldw	r2,-64(fp)
     608:	1887ff72 	custom	253,r3,r3,r2
     60c:	e0bfed17 	ldw	r2,-76(fp)
     610:	10c00015 	stw	r3,0(r2)
     614:	e0bfed17 	ldw	r2,-76(fp)
     618:	10c00117 	ldw	r3,4(r2)
     61c:	e0bff117 	ldw	r2,-60(fp)
     620:	1887ff72 	custom	253,r3,r3,r2
     624:	e0bfed17 	ldw	r2,-76(fp)
     628:	10c00115 	stw	r3,4(r2)
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
     62c:	e0ffee17 	ldw	r3,-72(fp)
     630:	e0bff217 	ldw	r2,-56(fp)
     634:	1885ff72 	custom	253,r2,r3,r2
     638:	e0bff415 	stw	r2,-48(fp)
     63c:	e0ffef17 	ldw	r3,-68(fp)
     640:	e0bff317 	ldw	r2,-52(fp)
     644:	1885ff72 	custom	253,r2,r3,r2
     648:	e0bff515 	stw	r2,-44(fp)
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
     64c:	e0ffee17 	ldw	r3,-72(fp)
     650:	e0bff217 	ldw	r2,-56(fp)
     654:	1885ffb2 	custom	254,r2,r3,r2
     658:	e0bff615 	stw	r2,-40(fp)
     65c:	e0ffef17 	ldw	r3,-68(fp)
     660:	e0bff317 	ldw	r2,-52(fp)
     664:	1885ffb2 	custom	254,r2,r3,r2
     668:	e0bff715 	stw	r2,-36(fp)
        C_SUB( Fout[m2], *Fout, scratch[3] );
     66c:	e0bfed17 	ldw	r2,-76(fp)
     670:	11000017 	ldw	r4,0(r2)
     674:	e0fff417 	ldw	r3,-48(fp)
     678:	e0bffb17 	ldw	r2,-20(fp)
     67c:	100490fa 	slli	r2,r2,3
     680:	e17fed17 	ldw	r5,-76(fp)
     684:	2885883a 	add	r2,r5,r2
     688:	20c7ffb2 	custom	254,r3,r4,r3
     68c:	10c00015 	stw	r3,0(r2)
     690:	e0bfed17 	ldw	r2,-76(fp)
     694:	11000117 	ldw	r4,4(r2)
     698:	e0fff517 	ldw	r3,-44(fp)
     69c:	e0bffb17 	ldw	r2,-20(fp)
     6a0:	100490fa 	slli	r2,r2,3
     6a4:	e17fed17 	ldw	r5,-76(fp)
     6a8:	2885883a 	add	r2,r5,r2
     6ac:	20c7ffb2 	custom	254,r3,r4,r3
     6b0:	10c00115 	stw	r3,4(r2)
        tw1 += fstride;
     6b4:	e0bfec17 	ldw	r2,-80(fp)
     6b8:	100490fa 	slli	r2,r2,3
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	1885883a 	add	r2,r3,r2
     6c4:	e0bfff15 	stw	r2,-4(fp)
        tw2 += fstride*2;
     6c8:	e0bfec17 	ldw	r2,-80(fp)
     6cc:	1004913a 	slli	r2,r2,4
     6d0:	e0fffe17 	ldw	r3,-8(fp)
     6d4:	1885883a 	add	r2,r3,r2
     6d8:	e0bffe15 	stw	r2,-8(fp)
        tw3 += fstride*3;
     6dc:	e0bfec17 	ldw	r2,-80(fp)
     6e0:	10800624 	muli	r2,r2,24
     6e4:	e0fffd17 	ldw	r3,-12(fp)
     6e8:	1885883a 	add	r2,r3,r2
     6ec:	e0bffd15 	stw	r2,-12(fp)
        C_ADDTO( *Fout , scratch[3] );
     6f0:	e0bfed17 	ldw	r2,-76(fp)
     6f4:	10c00017 	ldw	r3,0(r2)
     6f8:	e0bff417 	ldw	r2,-48(fp)
     6fc:	1887ff72 	custom	253,r3,r3,r2
     700:	e0bfed17 	ldw	r2,-76(fp)
     704:	10c00015 	stw	r3,0(r2)
     708:	e0bfed17 	ldw	r2,-76(fp)
     70c:	10c00117 	ldw	r3,4(r2)
     710:	e0bff517 	ldw	r2,-44(fp)
     714:	1887ff72 	custom	253,r3,r3,r2
     718:	e0bfed17 	ldw	r2,-76(fp)
     71c:	10c00115 	stw	r3,4(r2)

        if(st->inverse) {
     720:	e0bfeb17 	ldw	r2,-84(fp)
     724:	10800117 	ldw	r2,4(r2)
     728:	10002126 	beq	r2,zero,7b0 <kf_bfly4+0x3e4>
            Fout[m].r = scratch[5].r - scratch[4].i;
     72c:	e13ff817 	ldw	r4,-32(fp)
     730:	e0fff717 	ldw	r3,-36(fp)
     734:	e0bfea17 	ldw	r2,-88(fp)
     738:	100490fa 	slli	r2,r2,3
     73c:	e17fed17 	ldw	r5,-76(fp)
     740:	2885883a 	add	r2,r5,r2
     744:	20c7ffb2 	custom	254,r3,r4,r3
     748:	10c00015 	stw	r3,0(r2)
            Fout[m].i = scratch[5].i + scratch[4].r;
     74c:	e13ff917 	ldw	r4,-28(fp)
     750:	e0fff617 	ldw	r3,-40(fp)
     754:	e0bfea17 	ldw	r2,-88(fp)
     758:	100490fa 	slli	r2,r2,3
     75c:	e17fed17 	ldw	r5,-76(fp)
     760:	2885883a 	add	r2,r5,r2
     764:	20c7ff72 	custom	253,r3,r4,r3
     768:	10c00115 	stw	r3,4(r2)
            Fout[m3].r = scratch[5].r + scratch[4].i;
     76c:	e13ff817 	ldw	r4,-32(fp)
     770:	e0fff717 	ldw	r3,-36(fp)
     774:	e0bffa17 	ldw	r2,-24(fp)
     778:	100490fa 	slli	r2,r2,3
     77c:	e17fed17 	ldw	r5,-76(fp)
     780:	2885883a 	add	r2,r5,r2
     784:	20c7ff72 	custom	253,r3,r4,r3
     788:	10c00015 	stw	r3,0(r2)
            Fout[m3].i = scratch[5].i - scratch[4].r;
     78c:	e13ff917 	ldw	r4,-28(fp)
     790:	e0fff617 	ldw	r3,-40(fp)
     794:	e0bffa17 	ldw	r2,-24(fp)
     798:	100490fa 	slli	r2,r2,3
     79c:	e17fed17 	ldw	r5,-76(fp)
     7a0:	2885883a 	add	r2,r5,r2
     7a4:	20c7ffb2 	custom	254,r3,r4,r3
     7a8:	10c00115 	stw	r3,4(r2)
     7ac:	00002006 	br	830 <kf_bfly4+0x464>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
     7b0:	e13ff817 	ldw	r4,-32(fp)
     7b4:	e0fff717 	ldw	r3,-36(fp)
     7b8:	e0bfea17 	ldw	r2,-88(fp)
     7bc:	100490fa 	slli	r2,r2,3
     7c0:	e17fed17 	ldw	r5,-76(fp)
     7c4:	2885883a 	add	r2,r5,r2
     7c8:	20c7ff72 	custom	253,r3,r4,r3
     7cc:	10c00015 	stw	r3,0(r2)
            Fout[m].i = scratch[5].i - scratch[4].r;
     7d0:	e13ff917 	ldw	r4,-28(fp)
     7d4:	e0fff617 	ldw	r3,-40(fp)
     7d8:	e0bfea17 	ldw	r2,-88(fp)
     7dc:	100490fa 	slli	r2,r2,3
     7e0:	e17fed17 	ldw	r5,-76(fp)
     7e4:	2885883a 	add	r2,r5,r2
     7e8:	20c7ffb2 	custom	254,r3,r4,r3
     7ec:	10c00115 	stw	r3,4(r2)
            Fout[m3].r = scratch[5].r - scratch[4].i;
     7f0:	e13ff817 	ldw	r4,-32(fp)
     7f4:	e0fff717 	ldw	r3,-36(fp)
     7f8:	e0bffa17 	ldw	r2,-24(fp)
     7fc:	100490fa 	slli	r2,r2,3
     800:	e17fed17 	ldw	r5,-76(fp)
     804:	2885883a 	add	r2,r5,r2
     808:	20c7ffb2 	custom	254,r3,r4,r3
     80c:	10c00015 	stw	r3,0(r2)
            Fout[m3].i = scratch[5].i + scratch[4].r;
     810:	e13ff917 	ldw	r4,-28(fp)
     814:	e0fff617 	ldw	r3,-40(fp)
     818:	e0bffa17 	ldw	r2,-24(fp)
     81c:	100490fa 	slli	r2,r2,3
     820:	e17fed17 	ldw	r5,-76(fp)
     824:	2885883a 	add	r2,r5,r2
     828:	20c7ff72 	custom	253,r3,r4,r3
     82c:	10c00115 	stw	r3,4(r2)
        }
        ++Fout;
     830:	e0bfed17 	ldw	r2,-76(fp)
     834:	10800204 	addi	r2,r2,8
     838:	e0bfed15 	stw	r2,-76(fp)
    }while(--k);
     83c:	e0bffc17 	ldw	r2,-16(fp)
     840:	10bfffc4 	addi	r2,r2,-1
     844:	e0bffc15 	stw	r2,-16(fp)
     848:	e0bffc17 	ldw	r2,-16(fp)
     84c:	103ef51e 	bne	r2,zero,424 <kf_bfly4+0x58>
}
     850:	0001883a 	nop
     854:	0001883a 	nop
     858:	e037883a 	mov	sp,fp
     85c:	df000017 	ldw	fp,0(sp)
     860:	dec00104 	addi	sp,sp,4
     864:	f800283a 	ret

00000868 <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
     868:	deffeb04 	addi	sp,sp,-84
     86c:	df001415 	stw	fp,80(sp)
     870:	df001404 	addi	fp,sp,80
     874:	e13fef15 	stw	r4,-68(fp)
     878:	e17fee15 	stw	r5,-72(fp)
     87c:	e1bfed15 	stw	r6,-76(fp)
     880:	e1ffec15 	stw	r7,-80(fp)
     size_t k=m;
     884:	e0bfec17 	ldw	r2,-80(fp)
     888:	e0bfff15 	stw	r2,-4(fp)
     const size_t m2 = 2*m;
     88c:	e0bfec17 	ldw	r2,-80(fp)
     890:	1085883a 	add	r2,r2,r2
     894:	e0bffc15 	stw	r2,-16(fp)
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
     898:	e0ffee17 	ldw	r3,-72(fp)
     89c:	e0bfec17 	ldw	r2,-80(fp)
     8a0:	1885383a 	mul	r2,r3,r2
     8a4:	e0ffed17 	ldw	r3,-76(fp)
     8a8:	10800844 	addi	r2,r2,33
     8ac:	100490fa 	slli	r2,r2,3
     8b0:	1885883a 	add	r2,r3,r2
     8b4:	10c00017 	ldw	r3,0(r2)
     8b8:	e0fff015 	stw	r3,-64(fp)
     8bc:	10800117 	ldw	r2,4(r2)
     8c0:	e0bff115 	stw	r2,-60(fp)

     tw1=tw2=st->twiddles;
     8c4:	e0bfed17 	ldw	r2,-76(fp)
     8c8:	10804204 	addi	r2,r2,264
     8cc:	e0bffd15 	stw	r2,-12(fp)
     8d0:	e0bffd17 	ldw	r2,-12(fp)
     8d4:	e0bffe15 	stw	r2,-8(fp)

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
     8d8:	e0bfec17 	ldw	r2,-80(fp)
     8dc:	100490fa 	slli	r2,r2,3
     8e0:	e0ffef17 	ldw	r3,-68(fp)
     8e4:	1885883a 	add	r2,r3,r2
     8e8:	10c00017 	ldw	r3,0(r2)
     8ec:	e13ffe17 	ldw	r4,-8(fp)
     8f0:	20800017 	ldw	r2,0(r4)
     8f4:	1887ff32 	custom	252,r3,r3,r2
     8f8:	e0bfec17 	ldw	r2,-80(fp)
     8fc:	100490fa 	slli	r2,r2,3
     900:	e13fef17 	ldw	r4,-68(fp)
     904:	2085883a 	add	r2,r4,r2
     908:	11000117 	ldw	r4,4(r2)
     90c:	e17ffe17 	ldw	r5,-8(fp)
     910:	28800117 	ldw	r2,4(r5)
     914:	2085ff32 	custom	252,r2,r4,r2
     918:	1885ffb2 	custom	254,r2,r3,r2
     91c:	e0bff415 	stw	r2,-48(fp)
     920:	e0bfec17 	ldw	r2,-80(fp)
     924:	100490fa 	slli	r2,r2,3
     928:	e0ffef17 	ldw	r3,-68(fp)
     92c:	1885883a 	add	r2,r3,r2
     930:	10c00017 	ldw	r3,0(r2)
     934:	e13ffe17 	ldw	r4,-8(fp)
     938:	20800117 	ldw	r2,4(r4)
     93c:	1887ff32 	custom	252,r3,r3,r2
     940:	e0bfec17 	ldw	r2,-80(fp)
     944:	100490fa 	slli	r2,r2,3
     948:	e13fef17 	ldw	r4,-68(fp)
     94c:	2085883a 	add	r2,r4,r2
     950:	11000117 	ldw	r4,4(r2)
     954:	e17ffe17 	ldw	r5,-8(fp)
     958:	28800017 	ldw	r2,0(r5)
     95c:	2085ff32 	custom	252,r2,r4,r2
     960:	1885ff72 	custom	253,r2,r3,r2
     964:	e0bff515 	stw	r2,-44(fp)
         C_MUL(scratch[2],Fout[m2] , *tw2);
     968:	e0bffc17 	ldw	r2,-16(fp)
     96c:	100490fa 	slli	r2,r2,3
     970:	e0ffef17 	ldw	r3,-68(fp)
     974:	1885883a 	add	r2,r3,r2
     978:	10c00017 	ldw	r3,0(r2)
     97c:	e13ffd17 	ldw	r4,-12(fp)
     980:	20800017 	ldw	r2,0(r4)
     984:	1887ff32 	custom	252,r3,r3,r2
     988:	e0bffc17 	ldw	r2,-16(fp)
     98c:	100490fa 	slli	r2,r2,3
     990:	e13fef17 	ldw	r4,-68(fp)
     994:	2085883a 	add	r2,r4,r2
     998:	11000117 	ldw	r4,4(r2)
     99c:	e17ffd17 	ldw	r5,-12(fp)
     9a0:	28800117 	ldw	r2,4(r5)
     9a4:	2085ff32 	custom	252,r2,r4,r2
     9a8:	1885ffb2 	custom	254,r2,r3,r2
     9ac:	e0bff615 	stw	r2,-40(fp)
     9b0:	e0bffc17 	ldw	r2,-16(fp)
     9b4:	100490fa 	slli	r2,r2,3
     9b8:	e0ffef17 	ldw	r3,-68(fp)
     9bc:	1885883a 	add	r2,r3,r2
     9c0:	10c00017 	ldw	r3,0(r2)
     9c4:	e13ffd17 	ldw	r4,-12(fp)
     9c8:	20800117 	ldw	r2,4(r4)
     9cc:	1887ff32 	custom	252,r3,r3,r2
     9d0:	e0bffc17 	ldw	r2,-16(fp)
     9d4:	100490fa 	slli	r2,r2,3
     9d8:	e13fef17 	ldw	r4,-68(fp)
     9dc:	2085883a 	add	r2,r4,r2
     9e0:	11000117 	ldw	r4,4(r2)
     9e4:	e17ffd17 	ldw	r5,-12(fp)
     9e8:	28800017 	ldw	r2,0(r5)
     9ec:	2085ff32 	custom	252,r2,r4,r2
     9f0:	1885ff72 	custom	253,r2,r3,r2
     9f4:	e0bff715 	stw	r2,-36(fp)

         C_ADD(scratch[3],scratch[1],scratch[2]);
     9f8:	e0fff417 	ldw	r3,-48(fp)
     9fc:	e0bff617 	ldw	r2,-40(fp)
     a00:	1885ff72 	custom	253,r2,r3,r2
     a04:	e0bff815 	stw	r2,-32(fp)
     a08:	e0fff517 	ldw	r3,-44(fp)
     a0c:	e0bff717 	ldw	r2,-36(fp)
     a10:	1885ff72 	custom	253,r2,r3,r2
     a14:	e0bff915 	stw	r2,-28(fp)
         C_SUB(scratch[0],scratch[1],scratch[2]);
     a18:	e0fff417 	ldw	r3,-48(fp)
     a1c:	e0bff617 	ldw	r2,-40(fp)
     a20:	1885ffb2 	custom	254,r2,r3,r2
     a24:	e0bff215 	stw	r2,-56(fp)
     a28:	e0fff517 	ldw	r3,-44(fp)
     a2c:	e0bff717 	ldw	r2,-36(fp)
     a30:	1885ffb2 	custom	254,r2,r3,r2
     a34:	e0bff315 	stw	r2,-52(fp)
         tw1 += fstride;
     a38:	e0bfee17 	ldw	r2,-72(fp)
     a3c:	100490fa 	slli	r2,r2,3
     a40:	e0fffe17 	ldw	r3,-8(fp)
     a44:	1885883a 	add	r2,r3,r2
     a48:	e0bffe15 	stw	r2,-8(fp)
         tw2 += fstride*2;
     a4c:	e0bfee17 	ldw	r2,-72(fp)
     a50:	1004913a 	slli	r2,r2,4
     a54:	e0fffd17 	ldw	r3,-12(fp)
     a58:	1885883a 	add	r2,r3,r2
     a5c:	e0bffd15 	stw	r2,-12(fp)

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
     a60:	e0bfef17 	ldw	r2,-68(fp)
     a64:	11000017 	ldw	r4,0(r2)
     a68:	e0fff817 	ldw	r3,-32(fp)
     a6c:	008fc034 	movhi	r2,16128
     a70:	1887ff32 	custom	252,r3,r3,r2
     a74:	e0bfec17 	ldw	r2,-80(fp)
     a78:	100490fa 	slli	r2,r2,3
     a7c:	e17fef17 	ldw	r5,-68(fp)
     a80:	2885883a 	add	r2,r5,r2
     a84:	20c7ffb2 	custom	254,r3,r4,r3
     a88:	10c00015 	stw	r3,0(r2)
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
     a8c:	e0bfef17 	ldw	r2,-68(fp)
     a90:	11000117 	ldw	r4,4(r2)
     a94:	e0fff917 	ldw	r3,-28(fp)
     a98:	008fc034 	movhi	r2,16128
     a9c:	1887ff32 	custom	252,r3,r3,r2
     aa0:	e0bfec17 	ldw	r2,-80(fp)
     aa4:	100490fa 	slli	r2,r2,3
     aa8:	e17fef17 	ldw	r5,-68(fp)
     aac:	2885883a 	add	r2,r5,r2
     ab0:	20c7ffb2 	custom	254,r3,r4,r3
     ab4:	10c00115 	stw	r3,4(r2)

         C_MULBYSCALAR( scratch[0] , epi3.i );
     ab8:	e0fff217 	ldw	r3,-56(fp)
     abc:	e0bff117 	ldw	r2,-60(fp)
     ac0:	1885ff32 	custom	252,r2,r3,r2
     ac4:	e0bff215 	stw	r2,-56(fp)
     ac8:	e0fff317 	ldw	r3,-52(fp)
     acc:	e0bff117 	ldw	r2,-60(fp)
     ad0:	1885ff32 	custom	252,r2,r3,r2
     ad4:	e0bff315 	stw	r2,-52(fp)

         C_ADDTO(*Fout,scratch[3]);
     ad8:	e0bfef17 	ldw	r2,-68(fp)
     adc:	10c00017 	ldw	r3,0(r2)
     ae0:	e0bff817 	ldw	r2,-32(fp)
     ae4:	1887ff72 	custom	253,r3,r3,r2
     ae8:	e0bfef17 	ldw	r2,-68(fp)
     aec:	10c00015 	stw	r3,0(r2)
     af0:	e0bfef17 	ldw	r2,-68(fp)
     af4:	10c00117 	ldw	r3,4(r2)
     af8:	e0bff917 	ldw	r2,-28(fp)
     afc:	1887ff72 	custom	253,r3,r3,r2
     b00:	e0bfef17 	ldw	r2,-68(fp)
     b04:	10c00115 	stw	r3,4(r2)

         Fout[m2].r = Fout[m].r + scratch[0].i;
     b08:	e0bfec17 	ldw	r2,-80(fp)
     b0c:	100490fa 	slli	r2,r2,3
     b10:	e0ffef17 	ldw	r3,-68(fp)
     b14:	1885883a 	add	r2,r3,r2
     b18:	11000017 	ldw	r4,0(r2)
     b1c:	e0fff317 	ldw	r3,-52(fp)
     b20:	e0bffc17 	ldw	r2,-16(fp)
     b24:	100490fa 	slli	r2,r2,3
     b28:	e17fef17 	ldw	r5,-68(fp)
     b2c:	2885883a 	add	r2,r5,r2
     b30:	20c7ff72 	custom	253,r3,r4,r3
     b34:	10c00015 	stw	r3,0(r2)
         Fout[m2].i = Fout[m].i - scratch[0].r;
     b38:	e0bfec17 	ldw	r2,-80(fp)
     b3c:	100490fa 	slli	r2,r2,3
     b40:	e0ffef17 	ldw	r3,-68(fp)
     b44:	1885883a 	add	r2,r3,r2
     b48:	11000117 	ldw	r4,4(r2)
     b4c:	e0fff217 	ldw	r3,-56(fp)
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	100490fa 	slli	r2,r2,3
     b58:	e17fef17 	ldw	r5,-68(fp)
     b5c:	2885883a 	add	r2,r5,r2
     b60:	20c7ffb2 	custom	254,r3,r4,r3
     b64:	10c00115 	stw	r3,4(r2)

         Fout[m].r -= scratch[0].i;
     b68:	e0bfec17 	ldw	r2,-80(fp)
     b6c:	100490fa 	slli	r2,r2,3
     b70:	e0ffef17 	ldw	r3,-68(fp)
     b74:	1885883a 	add	r2,r3,r2
     b78:	11000017 	ldw	r4,0(r2)
     b7c:	e0fff317 	ldw	r3,-52(fp)
     b80:	e0bfec17 	ldw	r2,-80(fp)
     b84:	100490fa 	slli	r2,r2,3
     b88:	e17fef17 	ldw	r5,-68(fp)
     b8c:	2885883a 	add	r2,r5,r2
     b90:	20c7ffb2 	custom	254,r3,r4,r3
     b94:	10c00015 	stw	r3,0(r2)
         Fout[m].i += scratch[0].r;
     b98:	e0bfec17 	ldw	r2,-80(fp)
     b9c:	100490fa 	slli	r2,r2,3
     ba0:	e0ffef17 	ldw	r3,-68(fp)
     ba4:	1885883a 	add	r2,r3,r2
     ba8:	11000117 	ldw	r4,4(r2)
     bac:	e0fff217 	ldw	r3,-56(fp)
     bb0:	e0bfec17 	ldw	r2,-80(fp)
     bb4:	100490fa 	slli	r2,r2,3
     bb8:	e17fef17 	ldw	r5,-68(fp)
     bbc:	2885883a 	add	r2,r5,r2
     bc0:	20c7ff72 	custom	253,r3,r4,r3
     bc4:	10c00115 	stw	r3,4(r2)

         ++Fout;
     bc8:	e0bfef17 	ldw	r2,-68(fp)
     bcc:	10800204 	addi	r2,r2,8
     bd0:	e0bfef15 	stw	r2,-68(fp)
     }while(--k);
     bd4:	e0bfff17 	ldw	r2,-4(fp)
     bd8:	10bfffc4 	addi	r2,r2,-1
     bdc:	e0bfff15 	stw	r2,-4(fp)
     be0:	e0bfff17 	ldw	r2,-4(fp)
     be4:	103f3c1e 	bne	r2,zero,8d8 <kf_bfly3+0x70>
}
     be8:	0001883a 	nop
     bec:	0001883a 	nop
     bf0:	e037883a 	mov	sp,fp
     bf4:	df000017 	ldw	fp,0(sp)
     bf8:	dec00104 	addi	sp,sp,4
     bfc:	f800283a 	ret

00000c00 <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
     c00:	deffd504 	addi	sp,sp,-172
     c04:	df002a15 	stw	fp,168(sp)
     c08:	df002a04 	addi	fp,sp,168
     c0c:	e13fd915 	stw	r4,-156(fp)
     c10:	e17fd815 	stw	r5,-160(fp)
     c14:	e1bfd715 	stw	r6,-164(fp)
     c18:	e1ffd615 	stw	r7,-168(fp)
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
     c1c:	e0bfd717 	ldw	r2,-164(fp)
     c20:	10804204 	addi	r2,r2,264
     c24:	e0bff915 	stw	r2,-28(fp)
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
     c28:	e0ffd617 	ldw	r3,-168(fp)
     c2c:	e0bfd817 	ldw	r2,-160(fp)
     c30:	1885383a 	mul	r2,r3,r2
     c34:	100490fa 	slli	r2,r2,3
     c38:	e0fff917 	ldw	r3,-28(fp)
     c3c:	1885883a 	add	r2,r3,r2
     c40:	10c00017 	ldw	r3,0(r2)
     c44:	e0ffdc15 	stw	r3,-144(fp)
     c48:	10800117 	ldw	r2,4(r2)
     c4c:	e0bfdd15 	stw	r2,-140(fp)
    yb = twiddles[fstride*2*m];
     c50:	e0ffd617 	ldw	r3,-168(fp)
     c54:	e0bfd817 	ldw	r2,-160(fp)
     c58:	1885383a 	mul	r2,r3,r2
     c5c:	1004913a 	slli	r2,r2,4
     c60:	e0fff917 	ldw	r3,-28(fp)
     c64:	1885883a 	add	r2,r3,r2
     c68:	10c00017 	ldw	r3,0(r2)
     c6c:	e0ffda15 	stw	r3,-152(fp)
     c70:	10800117 	ldw	r2,4(r2)
     c74:	e0bfdb15 	stw	r2,-148(fp)

    Fout0=Fout;
     c78:	e0bfd917 	ldw	r2,-156(fp)
     c7c:	e0bfff15 	stw	r2,-4(fp)
    Fout1=Fout0+m;
     c80:	e0bfd617 	ldw	r2,-168(fp)
     c84:	100490fa 	slli	r2,r2,3
     c88:	e0ffff17 	ldw	r3,-4(fp)
     c8c:	1885883a 	add	r2,r3,r2
     c90:	e0bffe15 	stw	r2,-8(fp)
    Fout2=Fout0+2*m;
     c94:	e0bfd617 	ldw	r2,-168(fp)
     c98:	1004913a 	slli	r2,r2,4
     c9c:	e0ffff17 	ldw	r3,-4(fp)
     ca0:	1885883a 	add	r2,r3,r2
     ca4:	e0bffd15 	stw	r2,-12(fp)
    Fout3=Fout0+3*m;
     ca8:	e0bfd617 	ldw	r2,-168(fp)
     cac:	10800624 	muli	r2,r2,24
     cb0:	e0ffff17 	ldw	r3,-4(fp)
     cb4:	1885883a 	add	r2,r3,r2
     cb8:	e0bffc15 	stw	r2,-16(fp)
    Fout4=Fout0+4*m;
     cbc:	e0bfd617 	ldw	r2,-168(fp)
     cc0:	1004917a 	slli	r2,r2,5
     cc4:	e0ffff17 	ldw	r3,-4(fp)
     cc8:	1885883a 	add	r2,r3,r2
     ccc:	e0bffb15 	stw	r2,-20(fp)

    tw=st->twiddles;
     cd0:	e0bfd717 	ldw	r2,-164(fp)
     cd4:	10804204 	addi	r2,r2,264
     cd8:	e0bff815 	stw	r2,-32(fp)
    for ( u=0; u<m; ++u ) {
     cdc:	e03ffa15 	stw	zero,-24(fp)
     ce0:	00016806 	br	1284 <kf_bfly5+0x684>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
     ce4:	e0bfff17 	ldw	r2,-4(fp)
     ce8:	10c00017 	ldw	r3,0(r2)
     cec:	e0ffde15 	stw	r3,-136(fp)
     cf0:	10800117 	ldw	r2,4(r2)
     cf4:	e0bfdf15 	stw	r2,-132(fp)

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
     cf8:	e0bffe17 	ldw	r2,-8(fp)
     cfc:	10c00017 	ldw	r3,0(r2)
     d00:	e13ffa17 	ldw	r4,-24(fp)
     d04:	e0bfd817 	ldw	r2,-160(fp)
     d08:	2085383a 	mul	r2,r4,r2
     d0c:	100490fa 	slli	r2,r2,3
     d10:	e13ff817 	ldw	r4,-32(fp)
     d14:	2089883a 	add	r4,r4,r2
     d18:	20800017 	ldw	r2,0(r4)
     d1c:	1887ff32 	custom	252,r3,r3,r2
     d20:	e0bffe17 	ldw	r2,-8(fp)
     d24:	11000117 	ldw	r4,4(r2)
     d28:	e17ffa17 	ldw	r5,-24(fp)
     d2c:	e0bfd817 	ldw	r2,-160(fp)
     d30:	2885383a 	mul	r2,r5,r2
     d34:	100490fa 	slli	r2,r2,3
     d38:	e17ff817 	ldw	r5,-32(fp)
     d3c:	288b883a 	add	r5,r5,r2
     d40:	28800117 	ldw	r2,4(r5)
     d44:	2085ff32 	custom	252,r2,r4,r2
     d48:	1885ffb2 	custom	254,r2,r3,r2
     d4c:	e0bfe015 	stw	r2,-128(fp)
     d50:	e0bffe17 	ldw	r2,-8(fp)
     d54:	10c00017 	ldw	r3,0(r2)
     d58:	e13ffa17 	ldw	r4,-24(fp)
     d5c:	e0bfd817 	ldw	r2,-160(fp)
     d60:	2085383a 	mul	r2,r4,r2
     d64:	100490fa 	slli	r2,r2,3
     d68:	e13ff817 	ldw	r4,-32(fp)
     d6c:	2089883a 	add	r4,r4,r2
     d70:	20800117 	ldw	r2,4(r4)
     d74:	1887ff32 	custom	252,r3,r3,r2
     d78:	e0bffe17 	ldw	r2,-8(fp)
     d7c:	11000117 	ldw	r4,4(r2)
     d80:	e17ffa17 	ldw	r5,-24(fp)
     d84:	e0bfd817 	ldw	r2,-160(fp)
     d88:	2885383a 	mul	r2,r5,r2
     d8c:	100490fa 	slli	r2,r2,3
     d90:	e17ff817 	ldw	r5,-32(fp)
     d94:	288b883a 	add	r5,r5,r2
     d98:	28800017 	ldw	r2,0(r5)
     d9c:	2085ff32 	custom	252,r2,r4,r2
     da0:	1885ff72 	custom	253,r2,r3,r2
     da4:	e0bfe115 	stw	r2,-124(fp)
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
     da8:	e0bffd17 	ldw	r2,-12(fp)
     dac:	10c00017 	ldw	r3,0(r2)
     db0:	e13ffa17 	ldw	r4,-24(fp)
     db4:	e0bfd817 	ldw	r2,-160(fp)
     db8:	2085383a 	mul	r2,r4,r2
     dbc:	1004913a 	slli	r2,r2,4
     dc0:	e13ff817 	ldw	r4,-32(fp)
     dc4:	2089883a 	add	r4,r4,r2
     dc8:	20800017 	ldw	r2,0(r4)
     dcc:	1887ff32 	custom	252,r3,r3,r2
     dd0:	e0bffd17 	ldw	r2,-12(fp)
     dd4:	11000117 	ldw	r4,4(r2)
     dd8:	e17ffa17 	ldw	r5,-24(fp)
     ddc:	e0bfd817 	ldw	r2,-160(fp)
     de0:	2885383a 	mul	r2,r5,r2
     de4:	1004913a 	slli	r2,r2,4
     de8:	e17ff817 	ldw	r5,-32(fp)
     dec:	288b883a 	add	r5,r5,r2
     df0:	28800117 	ldw	r2,4(r5)
     df4:	2085ff32 	custom	252,r2,r4,r2
     df8:	1885ffb2 	custom	254,r2,r3,r2
     dfc:	e0bfe215 	stw	r2,-120(fp)
     e00:	e0bffd17 	ldw	r2,-12(fp)
     e04:	10c00017 	ldw	r3,0(r2)
     e08:	e13ffa17 	ldw	r4,-24(fp)
     e0c:	e0bfd817 	ldw	r2,-160(fp)
     e10:	2085383a 	mul	r2,r4,r2
     e14:	1004913a 	slli	r2,r2,4
     e18:	e13ff817 	ldw	r4,-32(fp)
     e1c:	2089883a 	add	r4,r4,r2
     e20:	20800117 	ldw	r2,4(r4)
     e24:	1887ff32 	custom	252,r3,r3,r2
     e28:	e0bffd17 	ldw	r2,-12(fp)
     e2c:	11000117 	ldw	r4,4(r2)
     e30:	e17ffa17 	ldw	r5,-24(fp)
     e34:	e0bfd817 	ldw	r2,-160(fp)
     e38:	2885383a 	mul	r2,r5,r2
     e3c:	1004913a 	slli	r2,r2,4
     e40:	e17ff817 	ldw	r5,-32(fp)
     e44:	288b883a 	add	r5,r5,r2
     e48:	28800017 	ldw	r2,0(r5)
     e4c:	2085ff32 	custom	252,r2,r4,r2
     e50:	1885ff72 	custom	253,r2,r3,r2
     e54:	e0bfe315 	stw	r2,-116(fp)
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
     e58:	e0bffc17 	ldw	r2,-16(fp)
     e5c:	10c00017 	ldw	r3,0(r2)
     e60:	e13ffa17 	ldw	r4,-24(fp)
     e64:	e0bfd817 	ldw	r2,-160(fp)
     e68:	2085383a 	mul	r2,r4,r2
     e6c:	10800624 	muli	r2,r2,24
     e70:	e13ff817 	ldw	r4,-32(fp)
     e74:	2089883a 	add	r4,r4,r2
     e78:	20800017 	ldw	r2,0(r4)
     e7c:	1887ff32 	custom	252,r3,r3,r2
     e80:	e0bffc17 	ldw	r2,-16(fp)
     e84:	11000117 	ldw	r4,4(r2)
     e88:	e17ffa17 	ldw	r5,-24(fp)
     e8c:	e0bfd817 	ldw	r2,-160(fp)
     e90:	2885383a 	mul	r2,r5,r2
     e94:	10800624 	muli	r2,r2,24
     e98:	e17ff817 	ldw	r5,-32(fp)
     e9c:	288b883a 	add	r5,r5,r2
     ea0:	28800117 	ldw	r2,4(r5)
     ea4:	2085ff32 	custom	252,r2,r4,r2
     ea8:	1885ffb2 	custom	254,r2,r3,r2
     eac:	e0bfe415 	stw	r2,-112(fp)
     eb0:	e0bffc17 	ldw	r2,-16(fp)
     eb4:	10c00017 	ldw	r3,0(r2)
     eb8:	e13ffa17 	ldw	r4,-24(fp)
     ebc:	e0bfd817 	ldw	r2,-160(fp)
     ec0:	2085383a 	mul	r2,r4,r2
     ec4:	10800624 	muli	r2,r2,24
     ec8:	e13ff817 	ldw	r4,-32(fp)
     ecc:	2089883a 	add	r4,r4,r2
     ed0:	20800117 	ldw	r2,4(r4)
     ed4:	1887ff32 	custom	252,r3,r3,r2
     ed8:	e0bffc17 	ldw	r2,-16(fp)
     edc:	11000117 	ldw	r4,4(r2)
     ee0:	e17ffa17 	ldw	r5,-24(fp)
     ee4:	e0bfd817 	ldw	r2,-160(fp)
     ee8:	2885383a 	mul	r2,r5,r2
     eec:	10800624 	muli	r2,r2,24
     ef0:	e17ff817 	ldw	r5,-32(fp)
     ef4:	288b883a 	add	r5,r5,r2
     ef8:	28800017 	ldw	r2,0(r5)
     efc:	2085ff32 	custom	252,r2,r4,r2
     f00:	1885ff72 	custom	253,r2,r3,r2
     f04:	e0bfe515 	stw	r2,-108(fp)
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
     f08:	e0bffb17 	ldw	r2,-20(fp)
     f0c:	10c00017 	ldw	r3,0(r2)
     f10:	e13ffa17 	ldw	r4,-24(fp)
     f14:	e0bfd817 	ldw	r2,-160(fp)
     f18:	2085383a 	mul	r2,r4,r2
     f1c:	1004917a 	slli	r2,r2,5
     f20:	e13ff817 	ldw	r4,-32(fp)
     f24:	2089883a 	add	r4,r4,r2
     f28:	20800017 	ldw	r2,0(r4)
     f2c:	1887ff32 	custom	252,r3,r3,r2
     f30:	e0bffb17 	ldw	r2,-20(fp)
     f34:	11000117 	ldw	r4,4(r2)
     f38:	e17ffa17 	ldw	r5,-24(fp)
     f3c:	e0bfd817 	ldw	r2,-160(fp)
     f40:	2885383a 	mul	r2,r5,r2
     f44:	1004917a 	slli	r2,r2,5
     f48:	e17ff817 	ldw	r5,-32(fp)
     f4c:	288b883a 	add	r5,r5,r2
     f50:	28800117 	ldw	r2,4(r5)
     f54:	2085ff32 	custom	252,r2,r4,r2
     f58:	1885ffb2 	custom	254,r2,r3,r2
     f5c:	e0bfe615 	stw	r2,-104(fp)
     f60:	e0bffb17 	ldw	r2,-20(fp)
     f64:	10c00017 	ldw	r3,0(r2)
     f68:	e13ffa17 	ldw	r4,-24(fp)
     f6c:	e0bfd817 	ldw	r2,-160(fp)
     f70:	2085383a 	mul	r2,r4,r2
     f74:	1004917a 	slli	r2,r2,5
     f78:	e13ff817 	ldw	r4,-32(fp)
     f7c:	2089883a 	add	r4,r4,r2
     f80:	20800117 	ldw	r2,4(r4)
     f84:	1887ff32 	custom	252,r3,r3,r2
     f88:	e0bffb17 	ldw	r2,-20(fp)
     f8c:	11000117 	ldw	r4,4(r2)
     f90:	e17ffa17 	ldw	r5,-24(fp)
     f94:	e0bfd817 	ldw	r2,-160(fp)
     f98:	2885383a 	mul	r2,r5,r2
     f9c:	1004917a 	slli	r2,r2,5
     fa0:	e17ff817 	ldw	r5,-32(fp)
     fa4:	288b883a 	add	r5,r5,r2
     fa8:	28800017 	ldw	r2,0(r5)
     fac:	2085ff32 	custom	252,r2,r4,r2
     fb0:	1885ff72 	custom	253,r2,r3,r2
     fb4:	e0bfe715 	stw	r2,-100(fp)

        C_ADD( scratch[7],scratch[1],scratch[4]);
     fb8:	e0ffe017 	ldw	r3,-128(fp)
     fbc:	e0bfe617 	ldw	r2,-104(fp)
     fc0:	1885ff72 	custom	253,r2,r3,r2
     fc4:	e0bfec15 	stw	r2,-80(fp)
     fc8:	e0ffe117 	ldw	r3,-124(fp)
     fcc:	e0bfe717 	ldw	r2,-100(fp)
     fd0:	1885ff72 	custom	253,r2,r3,r2
     fd4:	e0bfed15 	stw	r2,-76(fp)
        C_SUB( scratch[10],scratch[1],scratch[4]);
     fd8:	e0ffe017 	ldw	r3,-128(fp)
     fdc:	e0bfe617 	ldw	r2,-104(fp)
     fe0:	1885ffb2 	custom	254,r2,r3,r2
     fe4:	e0bff215 	stw	r2,-56(fp)
     fe8:	e0ffe117 	ldw	r3,-124(fp)
     fec:	e0bfe717 	ldw	r2,-100(fp)
     ff0:	1885ffb2 	custom	254,r2,r3,r2
     ff4:	e0bff315 	stw	r2,-52(fp)
        C_ADD( scratch[8],scratch[2],scratch[3]);
     ff8:	e0ffe217 	ldw	r3,-120(fp)
     ffc:	e0bfe417 	ldw	r2,-112(fp)
    1000:	1885ff72 	custom	253,r2,r3,r2
    1004:	e0bfee15 	stw	r2,-72(fp)
    1008:	e0ffe317 	ldw	r3,-116(fp)
    100c:	e0bfe517 	ldw	r2,-108(fp)
    1010:	1885ff72 	custom	253,r2,r3,r2
    1014:	e0bfef15 	stw	r2,-68(fp)
        C_SUB( scratch[9],scratch[2],scratch[3]);
    1018:	e0ffe217 	ldw	r3,-120(fp)
    101c:	e0bfe417 	ldw	r2,-112(fp)
    1020:	1885ffb2 	custom	254,r2,r3,r2
    1024:	e0bff015 	stw	r2,-64(fp)
    1028:	e0ffe317 	ldw	r3,-116(fp)
    102c:	e0bfe517 	ldw	r2,-108(fp)
    1030:	1885ffb2 	custom	254,r2,r3,r2
    1034:	e0bff115 	stw	r2,-60(fp)

        Fout0->r += scratch[7].r + scratch[8].r;
    1038:	e0bfff17 	ldw	r2,-4(fp)
    103c:	10c00017 	ldw	r3,0(r2)
    1040:	e13fec17 	ldw	r4,-80(fp)
    1044:	e0bfee17 	ldw	r2,-72(fp)
    1048:	2085ff72 	custom	253,r2,r4,r2
    104c:	1887ff72 	custom	253,r3,r3,r2
    1050:	e0bfff17 	ldw	r2,-4(fp)
    1054:	10c00015 	stw	r3,0(r2)
        Fout0->i += scratch[7].i + scratch[8].i;
    1058:	e0bfff17 	ldw	r2,-4(fp)
    105c:	10c00117 	ldw	r3,4(r2)
    1060:	e13fed17 	ldw	r4,-76(fp)
    1064:	e0bfef17 	ldw	r2,-68(fp)
    1068:	2085ff72 	custom	253,r2,r4,r2
    106c:	1887ff72 	custom	253,r3,r3,r2
    1070:	e0bfff17 	ldw	r2,-4(fp)
    1074:	10c00115 	stw	r3,4(r2)

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    1078:	e0ffde17 	ldw	r3,-136(fp)
    107c:	e13fec17 	ldw	r4,-80(fp)
    1080:	e0bfdc17 	ldw	r2,-144(fp)
    1084:	2085ff32 	custom	252,r2,r4,r2
    1088:	1887ff72 	custom	253,r3,r3,r2
    108c:	e13fee17 	ldw	r4,-72(fp)
    1090:	e0bfda17 	ldw	r2,-152(fp)
    1094:	2085ff32 	custom	252,r2,r4,r2
    1098:	1885ff72 	custom	253,r2,r3,r2
    109c:	e0bfe815 	stw	r2,-96(fp)
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    10a0:	e0ffdf17 	ldw	r3,-132(fp)
    10a4:	e13fed17 	ldw	r4,-76(fp)
    10a8:	e0bfdc17 	ldw	r2,-144(fp)
    10ac:	2085ff32 	custom	252,r2,r4,r2
    10b0:	1887ff72 	custom	253,r3,r3,r2
    10b4:	e13fef17 	ldw	r4,-68(fp)
    10b8:	e0bfda17 	ldw	r2,-152(fp)
    10bc:	2085ff32 	custom	252,r2,r4,r2
    10c0:	1885ff72 	custom	253,r2,r3,r2
    10c4:	e0bfe915 	stw	r2,-92(fp)

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    10c8:	e0fff317 	ldw	r3,-52(fp)
    10cc:	e0bfdd17 	ldw	r2,-140(fp)
    10d0:	1887ff32 	custom	252,r3,r3,r2
    10d4:	e13ff117 	ldw	r4,-60(fp)
    10d8:	e0bfdb17 	ldw	r2,-148(fp)
    10dc:	2085ff32 	custom	252,r2,r4,r2
    10e0:	1885ff72 	custom	253,r2,r3,r2
    10e4:	e0bfea15 	stw	r2,-88(fp)
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    10e8:	e0fff217 	ldw	r3,-56(fp)
    10ec:	e0bfdd17 	ldw	r2,-140(fp)
    10f0:	1885ff32 	custom	252,r2,r3,r2
    10f4:	10e0003c 	xorhi	r3,r2,32768
    10f8:	e13ff017 	ldw	r4,-64(fp)
    10fc:	e0bfdb17 	ldw	r2,-148(fp)
    1100:	2085ff32 	custom	252,r2,r4,r2
    1104:	1885ffb2 	custom	254,r2,r3,r2
    1108:	e0bfeb15 	stw	r2,-84(fp)

        C_SUB(*Fout1,scratch[5],scratch[6]);
    110c:	e0ffe817 	ldw	r3,-96(fp)
    1110:	e0bfea17 	ldw	r2,-88(fp)
    1114:	1887ffb2 	custom	254,r3,r3,r2
    1118:	e0bffe17 	ldw	r2,-8(fp)
    111c:	10c00015 	stw	r3,0(r2)
    1120:	e0ffe917 	ldw	r3,-92(fp)
    1124:	e0bfeb17 	ldw	r2,-84(fp)
    1128:	1887ffb2 	custom	254,r3,r3,r2
    112c:	e0bffe17 	ldw	r2,-8(fp)
    1130:	10c00115 	stw	r3,4(r2)
        C_ADD(*Fout4,scratch[5],scratch[6]);
    1134:	e0ffe817 	ldw	r3,-96(fp)
    1138:	e0bfea17 	ldw	r2,-88(fp)
    113c:	1887ff72 	custom	253,r3,r3,r2
    1140:	e0bffb17 	ldw	r2,-20(fp)
    1144:	10c00015 	stw	r3,0(r2)
    1148:	e0ffe917 	ldw	r3,-92(fp)
    114c:	e0bfeb17 	ldw	r2,-84(fp)
    1150:	1887ff72 	custom	253,r3,r3,r2
    1154:	e0bffb17 	ldw	r2,-20(fp)
    1158:	10c00115 	stw	r3,4(r2)

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    115c:	e0ffde17 	ldw	r3,-136(fp)
    1160:	e13fec17 	ldw	r4,-80(fp)
    1164:	e0bfda17 	ldw	r2,-152(fp)
    1168:	2085ff32 	custom	252,r2,r4,r2
    116c:	1887ff72 	custom	253,r3,r3,r2
    1170:	e13fee17 	ldw	r4,-72(fp)
    1174:	e0bfdc17 	ldw	r2,-144(fp)
    1178:	2085ff32 	custom	252,r2,r4,r2
    117c:	1885ff72 	custom	253,r2,r3,r2
    1180:	e0bff415 	stw	r2,-48(fp)
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    1184:	e0ffdf17 	ldw	r3,-132(fp)
    1188:	e13fed17 	ldw	r4,-76(fp)
    118c:	e0bfda17 	ldw	r2,-152(fp)
    1190:	2085ff32 	custom	252,r2,r4,r2
    1194:	1887ff72 	custom	253,r3,r3,r2
    1198:	e13fef17 	ldw	r4,-68(fp)
    119c:	e0bfdc17 	ldw	r2,-144(fp)
    11a0:	2085ff32 	custom	252,r2,r4,r2
    11a4:	1885ff72 	custom	253,r2,r3,r2
    11a8:	e0bff515 	stw	r2,-44(fp)
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    11ac:	e0fff117 	ldw	r3,-60(fp)
    11b0:	e0bfdd17 	ldw	r2,-140(fp)
    11b4:	1887ff32 	custom	252,r3,r3,r2
    11b8:	e13ff317 	ldw	r4,-52(fp)
    11bc:	e0bfdb17 	ldw	r2,-148(fp)
    11c0:	2085ff32 	custom	252,r2,r4,r2
    11c4:	1885ffb2 	custom	254,r2,r3,r2
    11c8:	e0bff615 	stw	r2,-40(fp)
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    11cc:	e0fff217 	ldw	r3,-56(fp)
    11d0:	e0bfdb17 	ldw	r2,-148(fp)
    11d4:	1887ff32 	custom	252,r3,r3,r2
    11d8:	e13ff017 	ldw	r4,-64(fp)
    11dc:	e0bfdd17 	ldw	r2,-140(fp)
    11e0:	2085ff32 	custom	252,r2,r4,r2
    11e4:	1885ffb2 	custom	254,r2,r3,r2
    11e8:	e0bff715 	stw	r2,-36(fp)

        C_ADD(*Fout2,scratch[11],scratch[12]);
    11ec:	e0fff417 	ldw	r3,-48(fp)
    11f0:	e0bff617 	ldw	r2,-40(fp)
    11f4:	1887ff72 	custom	253,r3,r3,r2
    11f8:	e0bffd17 	ldw	r2,-12(fp)
    11fc:	10c00015 	stw	r3,0(r2)
    1200:	e0fff517 	ldw	r3,-44(fp)
    1204:	e0bff717 	ldw	r2,-36(fp)
    1208:	1887ff72 	custom	253,r3,r3,r2
    120c:	e0bffd17 	ldw	r2,-12(fp)
    1210:	10c00115 	stw	r3,4(r2)
        C_SUB(*Fout3,scratch[11],scratch[12]);
    1214:	e0fff417 	ldw	r3,-48(fp)
    1218:	e0bff617 	ldw	r2,-40(fp)
    121c:	1887ffb2 	custom	254,r3,r3,r2
    1220:	e0bffc17 	ldw	r2,-16(fp)
    1224:	10c00015 	stw	r3,0(r2)
    1228:	e0fff517 	ldw	r3,-44(fp)
    122c:	e0bff717 	ldw	r2,-36(fp)
    1230:	1887ffb2 	custom	254,r3,r3,r2
    1234:	e0bffc17 	ldw	r2,-16(fp)
    1238:	10c00115 	stw	r3,4(r2)

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
    123c:	e0bfff17 	ldw	r2,-4(fp)
    1240:	10800204 	addi	r2,r2,8
    1244:	e0bfff15 	stw	r2,-4(fp)
    1248:	e0bffe17 	ldw	r2,-8(fp)
    124c:	10800204 	addi	r2,r2,8
    1250:	e0bffe15 	stw	r2,-8(fp)
    1254:	e0bffd17 	ldw	r2,-12(fp)
    1258:	10800204 	addi	r2,r2,8
    125c:	e0bffd15 	stw	r2,-12(fp)
    1260:	e0bffc17 	ldw	r2,-16(fp)
    1264:	10800204 	addi	r2,r2,8
    1268:	e0bffc15 	stw	r2,-16(fp)
    126c:	e0bffb17 	ldw	r2,-20(fp)
    1270:	10800204 	addi	r2,r2,8
    1274:	e0bffb15 	stw	r2,-20(fp)
    for ( u=0; u<m; ++u ) {
    1278:	e0bffa17 	ldw	r2,-24(fp)
    127c:	10800044 	addi	r2,r2,1
    1280:	e0bffa15 	stw	r2,-24(fp)
    1284:	e0fffa17 	ldw	r3,-24(fp)
    1288:	e0bfd617 	ldw	r2,-168(fp)
    128c:	18be9516 	blt	r3,r2,ce4 <kf_bfly5+0xe4>
    }
}
    1290:	0001883a 	nop
    1294:	0001883a 	nop
    1298:	e037883a 	mov	sp,fp
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00104 	addi	sp,sp,4
    12a4:	f800283a 	ret

000012a8 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
    12a8:	defff004 	addi	sp,sp,-64
    12ac:	dfc00f15 	stw	ra,60(sp)
    12b0:	df000e15 	stw	fp,56(sp)
    12b4:	df000e04 	addi	fp,sp,56
    12b8:	e13ff515 	stw	r4,-44(fp)
    12bc:	e17ff415 	stw	r5,-48(fp)
    12c0:	e1bff315 	stw	r6,-52(fp)
    12c4:	e1fff215 	stw	r7,-56(fp)
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
    12c8:	e0bff317 	ldw	r2,-52(fp)
    12cc:	10804204 	addi	r2,r2,264
    12d0:	e0bffa15 	stw	r2,-24(fp)
    kiss_fft_cpx t;
    int Norig = st->nfft;
    12d4:	e0bff317 	ldw	r2,-52(fp)
    12d8:	10800017 	ldw	r2,0(r2)
    12dc:	e0bff915 	stw	r2,-28(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
    12e0:	e0800217 	ldw	r2,8(fp)
    12e4:	100490fa 	slli	r2,r2,3
    12e8:	1009883a 	mov	r4,r2
    12ec:	000cdf40 	call	cdf4 <malloc>
    12f0:	e0bff815 	stw	r2,-32(fp)

    for ( u=0; u<m; ++u ) {
    12f4:	e03fff15 	stw	zero,-4(fp)
    12f8:	00009306 	br	1548 <kf_bfly_generic+0x2a0>
        k=u;
    12fc:	e0bfff17 	ldw	r2,-4(fp)
    1300:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    1304:	e03ffd15 	stw	zero,-12(fp)
    1308:	00001306 	br	1358 <kf_bfly_generic+0xb0>
            scratch[q1] = Fout[ k  ];
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	100490fa 	slli	r2,r2,3
    1314:	e0fff517 	ldw	r3,-44(fp)
    1318:	1887883a 	add	r3,r3,r2
    131c:	e0bffd17 	ldw	r2,-12(fp)
    1320:	100490fa 	slli	r2,r2,3
    1324:	e13ff817 	ldw	r4,-32(fp)
    1328:	2085883a 	add	r2,r4,r2
    132c:	19000017 	ldw	r4,0(r3)
    1330:	11000015 	stw	r4,0(r2)
    1334:	18c00117 	ldw	r3,4(r3)
    1338:	10c00115 	stw	r3,4(r2)
            C_FIXDIV(scratch[q1],p);
            k += m;
    133c:	e0fffe17 	ldw	r3,-8(fp)
    1340:	e0bff217 	ldw	r2,-56(fp)
    1344:	1885883a 	add	r2,r3,r2
    1348:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    134c:	e0bffd17 	ldw	r2,-12(fp)
    1350:	10800044 	addi	r2,r2,1
    1354:	e0bffd15 	stw	r2,-12(fp)
    1358:	e0fffd17 	ldw	r3,-12(fp)
    135c:	e0800217 	ldw	r2,8(fp)
    1360:	18bfea16 	blt	r3,r2,130c <kf_bfly_generic+0x64>
        }

        k=u;
    1364:	e0bfff17 	ldw	r2,-4(fp)
    1368:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    136c:	e03ffd15 	stw	zero,-12(fp)
    1370:	00006f06 	br	1530 <kf_bfly_generic+0x288>
            int twidx=0;
    1374:	e03ffb15 	stw	zero,-20(fp)
            Fout[ k ] = scratch[0];
    1378:	e0bffe17 	ldw	r2,-8(fp)
    137c:	100490fa 	slli	r2,r2,3
    1380:	e0fff517 	ldw	r3,-44(fp)
    1384:	1885883a 	add	r2,r3,r2
    1388:	e0fff817 	ldw	r3,-32(fp)
    138c:	19000017 	ldw	r4,0(r3)
    1390:	11000015 	stw	r4,0(r2)
    1394:	18c00117 	ldw	r3,4(r3)
    1398:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
    139c:	00800044 	movi	r2,1
    13a0:	e0bffc15 	stw	r2,-16(fp)
    13a4:	00005806 	br	1508 <kf_bfly_generic+0x260>
                twidx += fstride * k;
    13a8:	e0fffe17 	ldw	r3,-8(fp)
    13ac:	e0bff417 	ldw	r2,-48(fp)
    13b0:	1887383a 	mul	r3,r3,r2
    13b4:	e0bffb17 	ldw	r2,-20(fp)
    13b8:	1885883a 	add	r2,r3,r2
    13bc:	e0bffb15 	stw	r2,-20(fp)
                if (twidx>=Norig) twidx-=Norig;
    13c0:	e0fffb17 	ldw	r3,-20(fp)
    13c4:	e0bff917 	ldw	r2,-28(fp)
    13c8:	18800416 	blt	r3,r2,13dc <kf_bfly_generic+0x134>
    13cc:	e0fffb17 	ldw	r3,-20(fp)
    13d0:	e0bff917 	ldw	r2,-28(fp)
    13d4:	1885c83a 	sub	r2,r3,r2
    13d8:	e0bffb15 	stw	r2,-20(fp)
                C_MUL(t,scratch[q] , twiddles[twidx] );
    13dc:	e0bffc17 	ldw	r2,-16(fp)
    13e0:	100490fa 	slli	r2,r2,3
    13e4:	e0fff817 	ldw	r3,-32(fp)
    13e8:	1885883a 	add	r2,r3,r2
    13ec:	10c00017 	ldw	r3,0(r2)
    13f0:	e0bffb17 	ldw	r2,-20(fp)
    13f4:	100490fa 	slli	r2,r2,3
    13f8:	e13ffa17 	ldw	r4,-24(fp)
    13fc:	2089883a 	add	r4,r4,r2
    1400:	20800017 	ldw	r2,0(r4)
    1404:	1887ff32 	custom	252,r3,r3,r2
    1408:	e0bffc17 	ldw	r2,-16(fp)
    140c:	100490fa 	slli	r2,r2,3
    1410:	e13ff817 	ldw	r4,-32(fp)
    1414:	2085883a 	add	r2,r4,r2
    1418:	11000117 	ldw	r4,4(r2)
    141c:	e0bffb17 	ldw	r2,-20(fp)
    1420:	100490fa 	slli	r2,r2,3
    1424:	e17ffa17 	ldw	r5,-24(fp)
    1428:	288b883a 	add	r5,r5,r2
    142c:	28800117 	ldw	r2,4(r5)
    1430:	2085ff32 	custom	252,r2,r4,r2
    1434:	1885ffb2 	custom	254,r2,r3,r2
    1438:	e0bff615 	stw	r2,-40(fp)
    143c:	e0bffc17 	ldw	r2,-16(fp)
    1440:	100490fa 	slli	r2,r2,3
    1444:	e0fff817 	ldw	r3,-32(fp)
    1448:	1885883a 	add	r2,r3,r2
    144c:	10c00017 	ldw	r3,0(r2)
    1450:	e0bffb17 	ldw	r2,-20(fp)
    1454:	100490fa 	slli	r2,r2,3
    1458:	e13ffa17 	ldw	r4,-24(fp)
    145c:	2089883a 	add	r4,r4,r2
    1460:	20800117 	ldw	r2,4(r4)
    1464:	1887ff32 	custom	252,r3,r3,r2
    1468:	e0bffc17 	ldw	r2,-16(fp)
    146c:	100490fa 	slli	r2,r2,3
    1470:	e13ff817 	ldw	r4,-32(fp)
    1474:	2085883a 	add	r2,r4,r2
    1478:	11000117 	ldw	r4,4(r2)
    147c:	e0bffb17 	ldw	r2,-20(fp)
    1480:	100490fa 	slli	r2,r2,3
    1484:	e17ffa17 	ldw	r5,-24(fp)
    1488:	288b883a 	add	r5,r5,r2
    148c:	28800017 	ldw	r2,0(r5)
    1490:	2085ff32 	custom	252,r2,r4,r2
    1494:	1885ff72 	custom	253,r2,r3,r2
    1498:	e0bff715 	stw	r2,-36(fp)
                C_ADDTO( Fout[ k ] ,t);
    149c:	e0bffe17 	ldw	r2,-8(fp)
    14a0:	100490fa 	slli	r2,r2,3
    14a4:	e0fff517 	ldw	r3,-44(fp)
    14a8:	1885883a 	add	r2,r3,r2
    14ac:	11000017 	ldw	r4,0(r2)
    14b0:	e0fff617 	ldw	r3,-40(fp)
    14b4:	e0bffe17 	ldw	r2,-8(fp)
    14b8:	100490fa 	slli	r2,r2,3
    14bc:	e17ff517 	ldw	r5,-44(fp)
    14c0:	2885883a 	add	r2,r5,r2
    14c4:	20c7ff72 	custom	253,r3,r4,r3
    14c8:	10c00015 	stw	r3,0(r2)
    14cc:	e0bffe17 	ldw	r2,-8(fp)
    14d0:	100490fa 	slli	r2,r2,3
    14d4:	e0fff517 	ldw	r3,-44(fp)
    14d8:	1885883a 	add	r2,r3,r2
    14dc:	11000117 	ldw	r4,4(r2)
    14e0:	e0fff717 	ldw	r3,-36(fp)
    14e4:	e0bffe17 	ldw	r2,-8(fp)
    14e8:	100490fa 	slli	r2,r2,3
    14ec:	e17ff517 	ldw	r5,-44(fp)
    14f0:	2885883a 	add	r2,r5,r2
    14f4:	20c7ff72 	custom	253,r3,r4,r3
    14f8:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
    14fc:	e0bffc17 	ldw	r2,-16(fp)
    1500:	10800044 	addi	r2,r2,1
    1504:	e0bffc15 	stw	r2,-16(fp)
    1508:	e0fffc17 	ldw	r3,-16(fp)
    150c:	e0800217 	ldw	r2,8(fp)
    1510:	18bfa516 	blt	r3,r2,13a8 <kf_bfly_generic+0x100>
            }
            k += m;
    1514:	e0fffe17 	ldw	r3,-8(fp)
    1518:	e0bff217 	ldw	r2,-56(fp)
    151c:	1885883a 	add	r2,r3,r2
    1520:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    1524:	e0bffd17 	ldw	r2,-12(fp)
    1528:	10800044 	addi	r2,r2,1
    152c:	e0bffd15 	stw	r2,-12(fp)
    1530:	e0fffd17 	ldw	r3,-12(fp)
    1534:	e0800217 	ldw	r2,8(fp)
    1538:	18bf8e16 	blt	r3,r2,1374 <kf_bfly_generic+0xcc>
    for ( u=0; u<m; ++u ) {
    153c:	e0bfff17 	ldw	r2,-4(fp)
    1540:	10800044 	addi	r2,r2,1
    1544:	e0bfff15 	stw	r2,-4(fp)
    1548:	e0ffff17 	ldw	r3,-4(fp)
    154c:	e0bff217 	ldw	r2,-56(fp)
    1550:	18bf6a16 	blt	r3,r2,12fc <kf_bfly_generic+0x54>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
    1554:	e13ff817 	ldw	r4,-32(fp)
    1558:	000ce040 	call	ce04 <free>
}
    155c:	0001883a 	nop
    1560:	e037883a 	mov	sp,fp
    1564:	dfc00117 	ldw	ra,4(sp)
    1568:	df000017 	ldw	fp,0(sp)
    156c:	dec00204 	addi	sp,sp,8
    1570:	f800283a 	ret

00001574 <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
    1574:	defff404 	addi	sp,sp,-48
    1578:	dfc00b15 	stw	ra,44(sp)
    157c:	df000a15 	stw	fp,40(sp)
    1580:	df000a04 	addi	fp,sp,40
    1584:	e13ffb15 	stw	r4,-20(fp)
    1588:	e17ffa15 	stw	r5,-24(fp)
    158c:	e1bff915 	stw	r6,-28(fp)
    1590:	e1fff815 	stw	r7,-32(fp)
    kiss_fft_cpx * Fout_beg=Fout;
    1594:	e0bffb17 	ldw	r2,-20(fp)
    1598:	e0bfff15 	stw	r2,-4(fp)
    const int p=*factors++; /* the radix  */
    159c:	e0800217 	ldw	r2,8(fp)
    15a0:	10c00104 	addi	r3,r2,4
    15a4:	e0c00215 	stw	r3,8(fp)
    15a8:	10800017 	ldw	r2,0(r2)
    15ac:	e0bffe15 	stw	r2,-8(fp)
    const int m=*factors++; /* stage's fft length/p */
    15b0:	e0800217 	ldw	r2,8(fp)
    15b4:	10c00104 	addi	r3,r2,4
    15b8:	e0c00215 	stw	r3,8(fp)
    15bc:	10800017 	ldw	r2,0(r2)
    15c0:	e0bffd15 	stw	r2,-12(fp)
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    15c4:	e0fffe17 	ldw	r3,-8(fp)
    15c8:	e0bffd17 	ldw	r2,-12(fp)
    15cc:	1885383a 	mul	r2,r3,r2
    15d0:	100490fa 	slli	r2,r2,3
    15d4:	e0fffb17 	ldw	r3,-20(fp)
    15d8:	1885883a 	add	r2,r3,r2
    15dc:	e0bffc15 	stw	r2,-16(fp)
        }
        return;
    }
#endif

    if (m==1) {
    15e0:	e0bffd17 	ldw	r2,-12(fp)
    15e4:	10800058 	cmpnei	r2,r2,1
    15e8:	1000141e 	bne	r2,zero,163c <kf_work+0xc8>
        do{
            *Fout = *f;
    15ec:	e0bffb17 	ldw	r2,-20(fp)
    15f0:	e0fffa17 	ldw	r3,-24(fp)
    15f4:	19000017 	ldw	r4,0(r3)
    15f8:	11000015 	stw	r4,0(r2)
    15fc:	18c00117 	ldw	r3,4(r3)
    1600:	10c00115 	stw	r3,4(r2)
            f += fstride*in_stride;
    1604:	e0fff817 	ldw	r3,-32(fp)
    1608:	e0bff917 	ldw	r2,-28(fp)
    160c:	1885383a 	mul	r2,r3,r2
    1610:	100490fa 	slli	r2,r2,3
    1614:	e0fffa17 	ldw	r3,-24(fp)
    1618:	1885883a 	add	r2,r3,r2
    161c:	e0bffa15 	stw	r2,-24(fp)
        }while(++Fout != Fout_end );
    1620:	e0bffb17 	ldw	r2,-20(fp)
    1624:	10800204 	addi	r2,r2,8
    1628:	e0bffb15 	stw	r2,-20(fp)
    162c:	e0fffb17 	ldw	r3,-20(fp)
    1630:	e0bffc17 	ldw	r2,-16(fp)
    1634:	18bfed1e 	bne	r3,r2,15ec <kf_work+0x78>
    1638:	00001b06 	br	16a8 <kf_work+0x134>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    163c:	e0fffe17 	ldw	r3,-8(fp)
    1640:	e0bff917 	ldw	r2,-28(fp)
    1644:	1887383a 	mul	r3,r3,r2
    1648:	e0800317 	ldw	r2,12(fp)
    164c:	d8800115 	stw	r2,4(sp)
    1650:	e0800217 	ldw	r2,8(fp)
    1654:	d8800015 	stw	r2,0(sp)
    1658:	e1fff817 	ldw	r7,-32(fp)
    165c:	180d883a 	mov	r6,r3
    1660:	e17ffa17 	ldw	r5,-24(fp)
    1664:	e13ffb17 	ldw	r4,-20(fp)
    1668:	00015740 	call	1574 <kf_work>
            f += fstride*in_stride;
    166c:	e0fff817 	ldw	r3,-32(fp)
    1670:	e0bff917 	ldw	r2,-28(fp)
    1674:	1885383a 	mul	r2,r3,r2
    1678:	100490fa 	slli	r2,r2,3
    167c:	e0fffa17 	ldw	r3,-24(fp)
    1680:	1885883a 	add	r2,r3,r2
    1684:	e0bffa15 	stw	r2,-24(fp)
        }while( (Fout += m) != Fout_end );
    1688:	e0bffd17 	ldw	r2,-12(fp)
    168c:	100490fa 	slli	r2,r2,3
    1690:	e0fffb17 	ldw	r3,-20(fp)
    1694:	1885883a 	add	r2,r3,r2
    1698:	e0bffb15 	stw	r2,-20(fp)
    169c:	e0fffb17 	ldw	r3,-20(fp)
    16a0:	e0bffc17 	ldw	r2,-16(fp)
    16a4:	18bfe51e 	bne	r3,r2,163c <kf_work+0xc8>
    }

    Fout=Fout_beg;
    16a8:	e0bfff17 	ldw	r2,-4(fp)
    16ac:	e0bffb15 	stw	r2,-20(fp)

    // recombine the p smaller DFTs
    switch (p) {
    16b0:	e0bffe17 	ldw	r2,-8(fp)
    16b4:	10800160 	cmpeqi	r2,r2,5
    16b8:	1000241e 	bne	r2,zero,174c <kf_work+0x1d8>
    16bc:	e0bffe17 	ldw	r2,-8(fp)
    16c0:	10800188 	cmpgei	r2,r2,6
    16c4:	1000271e 	bne	r2,zero,1764 <kf_work+0x1f0>
    16c8:	e0bffe17 	ldw	r2,-8(fp)
    16cc:	10800120 	cmpeqi	r2,r2,4
    16d0:	1000171e 	bne	r2,zero,1730 <kf_work+0x1bc>
    16d4:	e0bffe17 	ldw	r2,-8(fp)
    16d8:	10800148 	cmpgei	r2,r2,5
    16dc:	1000211e 	bne	r2,zero,1764 <kf_work+0x1f0>
    16e0:	e0bffe17 	ldw	r2,-8(fp)
    16e4:	108000a0 	cmpeqi	r2,r2,2
    16e8:	1000041e 	bne	r2,zero,16fc <kf_work+0x188>
    16ec:	e0bffe17 	ldw	r2,-8(fp)
    16f0:	108000e0 	cmpeqi	r2,r2,3
    16f4:	1000071e 	bne	r2,zero,1714 <kf_work+0x1a0>
    16f8:	00001a06 	br	1764 <kf_work+0x1f0>
        case 2: kf_bfly2(Fout,fstride,st,m); break;
    16fc:	e1fffd17 	ldw	r7,-12(fp)
    1700:	e1800317 	ldw	r6,12(fp)
    1704:	e17ff917 	ldw	r5,-28(fp)
    1708:	e13ffb17 	ldw	r4,-20(fp)
    170c:	00002780 	call	278 <kf_bfly2>
    1710:	00001c06 	br	1784 <kf_work+0x210>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
    1714:	e0bffd17 	ldw	r2,-12(fp)
    1718:	100f883a 	mov	r7,r2
    171c:	e1800317 	ldw	r6,12(fp)
    1720:	e17ff917 	ldw	r5,-28(fp)
    1724:	e13ffb17 	ldw	r4,-20(fp)
    1728:	00008680 	call	868 <kf_bfly3>
    172c:	00001506 	br	1784 <kf_work+0x210>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
    1730:	e0bffd17 	ldw	r2,-12(fp)
    1734:	100f883a 	mov	r7,r2
    1738:	e1800317 	ldw	r6,12(fp)
    173c:	e17ff917 	ldw	r5,-28(fp)
    1740:	e13ffb17 	ldw	r4,-20(fp)
    1744:	00003cc0 	call	3cc <kf_bfly4>
    1748:	00000e06 	br	1784 <kf_work+0x210>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
    174c:	e1fffd17 	ldw	r7,-12(fp)
    1750:	e1800317 	ldw	r6,12(fp)
    1754:	e17ff917 	ldw	r5,-28(fp)
    1758:	e13ffb17 	ldw	r4,-20(fp)
    175c:	0000c000 	call	c00 <kf_bfly5>
    1760:	00000806 	br	1784 <kf_work+0x210>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    1764:	e0bffe17 	ldw	r2,-8(fp)
    1768:	d8800015 	stw	r2,0(sp)
    176c:	e1fffd17 	ldw	r7,-12(fp)
    1770:	e1800317 	ldw	r6,12(fp)
    1774:	e17ff917 	ldw	r5,-28(fp)
    1778:	e13ffb17 	ldw	r4,-20(fp)
    177c:	00012a80 	call	12a8 <kf_bfly_generic>
    1780:	0001883a 	nop
    }
}
    1784:	0001883a 	nop
    1788:	e037883a 	mov	sp,fp
    178c:	dfc00117 	ldw	ra,4(sp)
    1790:	df000017 	ldw	fp,0(sp)
    1794:	dec00204 	addi	sp,sp,8
    1798:	f800283a 	ret

0000179c <kf_factor>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
    179c:	defff904 	addi	sp,sp,-28
    17a0:	dfc00615 	stw	ra,24(sp)
    17a4:	df000515 	stw	fp,20(sp)
    17a8:	df000504 	addi	fp,sp,20
    17ac:	e13ffc15 	stw	r4,-16(fp)
    17b0:	e17ffb15 	stw	r5,-20(fp)
    int p=4;
    17b4:	00800104 	movi	r2,4
    17b8:	e0bfff15 	stw	r2,-4(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
    17bc:	e13ffc17 	ldw	r4,-16(fp)
    17c0:	000c9e00 	call	c9e0 <__floatsidf>
    17c4:	100d883a 	mov	r6,r2
    17c8:	180f883a 	mov	r7,r3
    17cc:	3009883a 	mov	r4,r6
    17d0:	380b883a 	mov	r5,r7
    17d4:	000428c0 	call	428c <sqrt>
    17d8:	100d883a 	mov	r6,r2
    17dc:	180f883a 	mov	r7,r3
    17e0:	3009883a 	mov	r4,r6
    17e4:	380b883a 	mov	r5,r7
    17e8:	0003bc80 	call	3bc8 <floor>
    17ec:	e0bffd15 	stw	r2,-12(fp)
    17f0:	e0fffe15 	stw	r3,-8(fp)

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
    17f4:	00001d06 	br	186c <kf_factor+0xd0>
            switch (p) {
    17f8:	e0bfff17 	ldw	r2,-4(fp)
    17fc:	108000a0 	cmpeqi	r2,r2,2
    1800:	1000061e 	bne	r2,zero,181c <kf_factor+0x80>
    1804:	e0bfff17 	ldw	r2,-4(fp)
    1808:	10800118 	cmpnei	r2,r2,4
    180c:	1000061e 	bne	r2,zero,1828 <kf_factor+0x8c>
                case 4: p = 2; break;
    1810:	00800084 	movi	r2,2
    1814:	e0bfff15 	stw	r2,-4(fp)
    1818:	00000706 	br	1838 <kf_factor+0x9c>
                case 2: p = 3; break;
    181c:	008000c4 	movi	r2,3
    1820:	e0bfff15 	stw	r2,-4(fp)
    1824:	00000406 	br	1838 <kf_factor+0x9c>
                default: p += 2; break;
    1828:	e0bfff17 	ldw	r2,-4(fp)
    182c:	10800084 	addi	r2,r2,2
    1830:	e0bfff15 	stw	r2,-4(fp)
    1834:	0001883a 	nop
            }
            if (p > floor_sqrt)
    1838:	e13fff17 	ldw	r4,-4(fp)
    183c:	000c9e00 	call	c9e0 <__floatsidf>
    1840:	1009883a 	mov	r4,r2
    1844:	180b883a 	mov	r5,r3
    1848:	200d883a 	mov	r6,r4
    184c:	280f883a 	mov	r7,r5
    1850:	e13ffd17 	ldw	r4,-12(fp)
    1854:	e17ffe17 	ldw	r5,-8(fp)
    1858:	000b8a40 	call	b8a4 <__ledf2>
    185c:	10000116 	blt	r2,zero,1864 <kf_factor+0xc8>
    1860:	00000206 	br	186c <kf_factor+0xd0>
                p = n;          /* no more factors, skip to end */
    1864:	e0bffc17 	ldw	r2,-16(fp)
    1868:	e0bfff15 	stw	r2,-4(fp)
        while (n % p) {
    186c:	e0bffc17 	ldw	r2,-16(fp)
    1870:	e0ffff17 	ldw	r3,-4(fp)
    1874:	10c9283a 	div	r4,r2,r3
    1878:	e0ffff17 	ldw	r3,-4(fp)
    187c:	20c7383a 	mul	r3,r4,r3
    1880:	10c5c83a 	sub	r2,r2,r3
    1884:	103fdc1e 	bne	r2,zero,17f8 <kf_factor+0x5c>
        }
        n /= p;
    1888:	e0fffc17 	ldw	r3,-16(fp)
    188c:	e0bfff17 	ldw	r2,-4(fp)
    1890:	1885283a 	div	r2,r3,r2
    1894:	e0bffc15 	stw	r2,-16(fp)
        *facbuf++ = p;
    1898:	e0bffb17 	ldw	r2,-20(fp)
    189c:	10c00104 	addi	r3,r2,4
    18a0:	e0fffb15 	stw	r3,-20(fp)
    18a4:	e0ffff17 	ldw	r3,-4(fp)
    18a8:	10c00015 	stw	r3,0(r2)
        *facbuf++ = n;
    18ac:	e0bffb17 	ldw	r2,-20(fp)
    18b0:	10c00104 	addi	r3,r2,4
    18b4:	e0fffb15 	stw	r3,-20(fp)
    18b8:	e0fffc17 	ldw	r3,-16(fp)
    18bc:	10c00015 	stw	r3,0(r2)
    } while (n > 1);
    18c0:	e0bffc17 	ldw	r2,-16(fp)
    18c4:	10800088 	cmpgei	r2,r2,2
    18c8:	103fe81e 	bne	r2,zero,186c <kf_factor+0xd0>
}
    18cc:	0001883a 	nop
    18d0:	0001883a 	nop
    18d4:	e037883a 	mov	sp,fp
    18d8:	dfc00117 	ldw	ra,4(sp)
    18dc:	df000017 	ldw	fp,0(sp)
    18e0:	dec00204 	addi	sp,sp,8
    18e4:	f800283a 	ret

000018e8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
    18e8:	deffef04 	addi	sp,sp,-68
    18ec:	dfc01015 	stw	ra,64(sp)
    18f0:	df000f15 	stw	fp,60(sp)
    18f4:	dcc00e15 	stw	r19,56(sp)
    18f8:	dc800d15 	stw	r18,52(sp)
    18fc:	dc400c15 	stw	r17,48(sp)
    1900:	dc000b15 	stw	r16,44(sp)
    1904:	df000f04 	addi	fp,sp,60
    1908:	e13ff415 	stw	r4,-48(fp)
    190c:	e17ff315 	stw	r5,-52(fp)
    1910:	e1bff215 	stw	r6,-56(fp)
    1914:	e1fff115 	stw	r7,-60(fp)
    kiss_fft_cfg st=NULL;
    1918:	e03ffb15 	stw	zero,-20(fp)
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
    191c:	e0bff417 	ldw	r2,-48(fp)
    1920:	10800844 	addi	r2,r2,33
    size_t memneeded = sizeof(struct kiss_fft_state)
    1924:	100490fa 	slli	r2,r2,3
    1928:	e0bff715 	stw	r2,-36(fp)

    if ( lenmem==NULL ) {
    192c:	e0bff117 	ldw	r2,-60(fp)
    1930:	1000041e 	bne	r2,zero,1944 <kiss_fft_alloc+0x5c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
    1934:	e13ff717 	ldw	r4,-36(fp)
    1938:	000cdf40 	call	cdf4 <malloc>
    193c:	e0bffb15 	stw	r2,-20(fp)
    1940:	00000b06 	br	1970 <kiss_fft_alloc+0x88>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
    1944:	e0bff217 	ldw	r2,-56(fp)
    1948:	10000626 	beq	r2,zero,1964 <kiss_fft_alloc+0x7c>
    194c:	e0bff117 	ldw	r2,-60(fp)
    1950:	10c00017 	ldw	r3,0(r2)
    1954:	e0bff717 	ldw	r2,-36(fp)
    1958:	18800236 	bltu	r3,r2,1964 <kiss_fft_alloc+0x7c>
            st = (kiss_fft_cfg)mem;
    195c:	e0bff217 	ldw	r2,-56(fp)
    1960:	e0bffb15 	stw	r2,-20(fp)
        *lenmem = memneeded;
    1964:	e0bff117 	ldw	r2,-60(fp)
    1968:	e0fff717 	ldw	r3,-36(fp)
    196c:	10c00015 	stw	r3,0(r2)
    }
    if (st) {
    1970:	e0bffb17 	ldw	r2,-20(fp)
    1974:	10006126 	beq	r2,zero,1afc <kiss_fft_alloc+0x214>
        int i;
        st->nfft=nfft;
    1978:	e0bffb17 	ldw	r2,-20(fp)
    197c:	e0fff417 	ldw	r3,-48(fp)
    1980:	10c00015 	stw	r3,0(r2)
        st->inverse = inverse_fft;
    1984:	e0bffb17 	ldw	r2,-20(fp)
    1988:	e0fff317 	ldw	r3,-52(fp)
    198c:	10c00115 	stw	r3,4(r2)

        for (i=0;i<nfft;++i) {
    1990:	e03ffa15 	stw	zero,-24(fp)
    1994:	00005106 	br	1adc <kiss_fft_alloc+0x1f4>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
    1998:	00980034 	movhi	r2,24576
    199c:	e0bff515 	stw	r2,-44(fp)
    19a0:	00900274 	movhi	r2,16393
    19a4:	10887ec4 	addi	r2,r2,8699
    19a8:	e0bff615 	stw	r2,-40(fp)
            double phase = -2*pi*i / nfft;
    19ac:	000d883a 	mov	r6,zero
    19b0:	01f00034 	movhi	r7,49152
    19b4:	e13ff517 	ldw	r4,-44(fp)
    19b8:	e17ff617 	ldw	r5,-40(fp)
    19bc:	000b98c0 	call	b98c <__muldf3>
    19c0:	1009883a 	mov	r4,r2
    19c4:	180b883a 	mov	r5,r3
    19c8:	2025883a 	mov	r18,r4
    19cc:	2827883a 	mov	r19,r5
    19d0:	e13ffa17 	ldw	r4,-24(fp)
    19d4:	000c9e00 	call	c9e0 <__floatsidf>
    19d8:	1009883a 	mov	r4,r2
    19dc:	180b883a 	mov	r5,r3
    19e0:	200d883a 	mov	r6,r4
    19e4:	280f883a 	mov	r7,r5
    19e8:	9009883a 	mov	r4,r18
    19ec:	980b883a 	mov	r5,r19
    19f0:	000b98c0 	call	b98c <__muldf3>
    19f4:	1009883a 	mov	r4,r2
    19f8:	180b883a 	mov	r5,r3
    19fc:	2025883a 	mov	r18,r4
    1a00:	2827883a 	mov	r19,r5
    1a04:	e13ff417 	ldw	r4,-48(fp)
    1a08:	000c9e00 	call	c9e0 <__floatsidf>
    1a0c:	1009883a 	mov	r4,r2
    1a10:	180b883a 	mov	r5,r3
    1a14:	200d883a 	mov	r6,r4
    1a18:	280f883a 	mov	r7,r5
    1a1c:	9009883a 	mov	r4,r18
    1a20:	980b883a 	mov	r5,r19
    1a24:	000aeec0 	call	aeec <__divdf3>
    1a28:	1009883a 	mov	r4,r2
    1a2c:	180b883a 	mov	r5,r3
    1a30:	e13ff815 	stw	r4,-32(fp)
    1a34:	e17ff915 	stw	r5,-28(fp)
            if (st->inverse)
    1a38:	e0bffb17 	ldw	r2,-20(fp)
    1a3c:	10800117 	ldw	r2,4(r2)
    1a40:	10000526 	beq	r2,zero,1a58 <kiss_fft_alloc+0x170>
                phase *= -1;
    1a44:	e43ff817 	ldw	r16,-32(fp)
    1a48:	e0bff917 	ldw	r2,-28(fp)
    1a4c:	1460003c 	xorhi	r17,r2,32768
    1a50:	e43ff815 	stw	r16,-32(fp)
    1a54:	e47ff915 	stw	r17,-28(fp)
            kf_cexp(st->twiddles+i, phase );
    1a58:	e13ff817 	ldw	r4,-32(fp)
    1a5c:	e17ff917 	ldw	r5,-28(fp)
    1a60:	0003b180 	call	3b18 <cos>
    1a64:	100d883a 	mov	r6,r2
    1a68:	180f883a 	mov	r7,r3
    1a6c:	e0bffb17 	ldw	r2,-20(fp)
    1a70:	10c04204 	addi	r3,r2,264
    1a74:	e0bffa17 	ldw	r2,-24(fp)
    1a78:	100490fa 	slli	r2,r2,3
    1a7c:	18a5883a 	add	r18,r3,r2
    1a80:	3009883a 	mov	r4,r6
    1a84:	380b883a 	mov	r5,r7
    1a88:	000cc240 	call	cc24 <__truncdfsf2>
    1a8c:	1007883a 	mov	r3,r2
    1a90:	90c00015 	stw	r3,0(r18)
    1a94:	e13ff817 	ldw	r4,-32(fp)
    1a98:	e17ff917 	ldw	r5,-28(fp)
    1a9c:	0003dac0 	call	3dac <sin>
    1aa0:	100d883a 	mov	r6,r2
    1aa4:	180f883a 	mov	r7,r3
    1aa8:	e0bffb17 	ldw	r2,-20(fp)
    1aac:	10c04204 	addi	r3,r2,264
    1ab0:	e0bffa17 	ldw	r2,-24(fp)
    1ab4:	100490fa 	slli	r2,r2,3
    1ab8:	18a5883a 	add	r18,r3,r2
    1abc:	3009883a 	mov	r4,r6
    1ac0:	380b883a 	mov	r5,r7
    1ac4:	000cc240 	call	cc24 <__truncdfsf2>
    1ac8:	1007883a 	mov	r3,r2
    1acc:	90c00115 	stw	r3,4(r18)
        for (i=0;i<nfft;++i) {
    1ad0:	e0bffa17 	ldw	r2,-24(fp)
    1ad4:	10800044 	addi	r2,r2,1
    1ad8:	e0bffa15 	stw	r2,-24(fp)
    1adc:	e0fffa17 	ldw	r3,-24(fp)
    1ae0:	e0bff417 	ldw	r2,-48(fp)
    1ae4:	18bfac16 	blt	r3,r2,1998 <kiss_fft_alloc+0xb0>
        }

        kf_factor(nfft,st->factors);
    1ae8:	e0bffb17 	ldw	r2,-20(fp)
    1aec:	10800204 	addi	r2,r2,8
    1af0:	100b883a 	mov	r5,r2
    1af4:	e13ff417 	ldw	r4,-48(fp)
    1af8:	000179c0 	call	179c <kf_factor>
    }
    return st;
    1afc:	e0bffb17 	ldw	r2,-20(fp)
}
    1b00:	e6fffc04 	addi	sp,fp,-16
    1b04:	dfc00517 	ldw	ra,20(sp)
    1b08:	df000417 	ldw	fp,16(sp)
    1b0c:	dcc00317 	ldw	r19,12(sp)
    1b10:	dc800217 	ldw	r18,8(sp)
    1b14:	dc400117 	ldw	r17,4(sp)
    1b18:	dc000017 	ldw	r16,0(sp)
    1b1c:	dec00604 	addi	sp,sp,24
    1b20:	f800283a 	ret

00001b24 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
    1b24:	defff704 	addi	sp,sp,-36
    1b28:	dfc00815 	stw	ra,32(sp)
    1b2c:	df000715 	stw	fp,28(sp)
    1b30:	df000704 	addi	fp,sp,28
    1b34:	e13ffe15 	stw	r4,-8(fp)
    1b38:	e17ffd15 	stw	r5,-12(fp)
    1b3c:	e1bffc15 	stw	r6,-16(fp)
    1b40:	e1fffb15 	stw	r7,-20(fp)
    if (fin == fout) {
    1b44:	e0fffd17 	ldw	r3,-12(fp)
    1b48:	e0bffc17 	ldw	r2,-16(fp)
    1b4c:	18801a1e 	bne	r3,r2,1bb8 <kiss_fft_stride+0x94>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
    1b50:	e0bffe17 	ldw	r2,-8(fp)
    1b54:	10800017 	ldw	r2,0(r2)
    1b58:	100490fa 	slli	r2,r2,3
    1b5c:	1009883a 	mov	r4,r2
    1b60:	000cdf40 	call	cdf4 <malloc>
    1b64:	e0bfff15 	stw	r2,-4(fp)
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
    1b68:	e0bffe17 	ldw	r2,-8(fp)
    1b6c:	10800204 	addi	r2,r2,8
    1b70:	e0fffe17 	ldw	r3,-8(fp)
    1b74:	d8c00115 	stw	r3,4(sp)
    1b78:	d8800015 	stw	r2,0(sp)
    1b7c:	e1fffb17 	ldw	r7,-20(fp)
    1b80:	01800044 	movi	r6,1
    1b84:	e17ffd17 	ldw	r5,-12(fp)
    1b88:	e13fff17 	ldw	r4,-4(fp)
    1b8c:	00015740 	call	1574 <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
    1b90:	e0bffe17 	ldw	r2,-8(fp)
    1b94:	10800017 	ldw	r2,0(r2)
    1b98:	100490fa 	slli	r2,r2,3
    1b9c:	100d883a 	mov	r6,r2
    1ba0:	e17fff17 	ldw	r5,-4(fp)
    1ba4:	e13ffc17 	ldw	r4,-16(fp)
    1ba8:	000d5f40 	call	d5f4 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
    1bac:	e13fff17 	ldw	r4,-4(fp)
    1bb0:	000ce040 	call	ce04 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
    1bb4:	00000a06 	br	1be0 <kiss_fft_stride+0xbc>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    1bb8:	e0bffe17 	ldw	r2,-8(fp)
    1bbc:	10800204 	addi	r2,r2,8
    1bc0:	e0fffe17 	ldw	r3,-8(fp)
    1bc4:	d8c00115 	stw	r3,4(sp)
    1bc8:	d8800015 	stw	r2,0(sp)
    1bcc:	e1fffb17 	ldw	r7,-20(fp)
    1bd0:	01800044 	movi	r6,1
    1bd4:	e17ffd17 	ldw	r5,-12(fp)
    1bd8:	e13ffc17 	ldw	r4,-16(fp)
    1bdc:	00015740 	call	1574 <kf_work>
}
    1be0:	0001883a 	nop
    1be4:	e037883a 	mov	sp,fp
    1be8:	dfc00117 	ldw	ra,4(sp)
    1bec:	df000017 	ldw	fp,0(sp)
    1bf0:	dec00204 	addi	sp,sp,8
    1bf4:	f800283a 	ret

00001bf8 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    1bf8:	defffb04 	addi	sp,sp,-20
    1bfc:	dfc00415 	stw	ra,16(sp)
    1c00:	df000315 	stw	fp,12(sp)
    1c04:	df000304 	addi	fp,sp,12
    1c08:	e13fff15 	stw	r4,-4(fp)
    1c0c:	e17ffe15 	stw	r5,-8(fp)
    1c10:	e1bffd15 	stw	r6,-12(fp)
    kiss_fft_stride(cfg,fin,fout,1);
    1c14:	01c00044 	movi	r7,1
    1c18:	e1bffd17 	ldw	r6,-12(fp)
    1c1c:	e17ffe17 	ldw	r5,-8(fp)
    1c20:	e13fff17 	ldw	r4,-4(fp)
    1c24:	0001b240 	call	1b24 <kiss_fft_stride>
}
    1c28:	0001883a 	nop
    1c2c:	e037883a 	mov	sp,fp
    1c30:	dfc00117 	ldw	ra,4(sp)
    1c34:	df000017 	ldw	fp,0(sp)
    1c38:	dec00204 	addi	sp,sp,8
    1c3c:	f800283a 	ret

00001c40 <kiss_fft_cleanup>:


void kiss_fft_cleanup(void)
{
    1c40:	deffff04 	addi	sp,sp,-4
    1c44:	df000015 	stw	fp,0(sp)
    1c48:	d839883a 	mov	fp,sp
    // nothing needed any more
}
    1c4c:	0001883a 	nop
    1c50:	e037883a 	mov	sp,fp
    1c54:	df000017 	ldw	fp,0(sp)
    1c58:	dec00104 	addi	sp,sp,4
    1c5c:	f800283a 	ret

00001c60 <kiss_fft_next_fast_size>:

int kiss_fft_next_fast_size(int n)
{
    1c60:	defffd04 	addi	sp,sp,-12
    1c64:	df000215 	stw	fp,8(sp)
    1c68:	df000204 	addi	fp,sp,8
    1c6c:	e13ffe15 	stw	r4,-8(fp)
    while(1) {
        int m=n;
    1c70:	e0bffe17 	ldw	r2,-8(fp)
    1c74:	e0bfff15 	stw	r2,-4(fp)
        while ( (m%2) == 0 ) m/=2;
    1c78:	00000406 	br	1c8c <kiss_fft_next_fast_size+0x2c>
    1c7c:	e0ffff17 	ldw	r3,-4(fp)
    1c80:	00800084 	movi	r2,2
    1c84:	1885283a 	div	r2,r3,r2
    1c88:	e0bfff15 	stw	r2,-4(fp)
    1c8c:	e0bfff17 	ldw	r2,-4(fp)
    1c90:	1080004c 	andi	r2,r2,1
    1c94:	103ff926 	beq	r2,zero,1c7c <kiss_fft_next_fast_size+0x1c>
        while ( (m%3) == 0 ) m/=3;
    1c98:	00000406 	br	1cac <kiss_fft_next_fast_size+0x4c>
    1c9c:	e0ffff17 	ldw	r3,-4(fp)
    1ca0:	008000c4 	movi	r2,3
    1ca4:	1885283a 	div	r2,r3,r2
    1ca8:	e0bfff15 	stw	r2,-4(fp)
    1cac:	e0bfff17 	ldw	r2,-4(fp)
    1cb0:	00c000c4 	movi	r3,3
    1cb4:	10c7283a 	div	r3,r2,r3
    1cb8:	18c000e4 	muli	r3,r3,3
    1cbc:	10c5c83a 	sub	r2,r2,r3
    1cc0:	103ff626 	beq	r2,zero,1c9c <kiss_fft_next_fast_size+0x3c>
        while ( (m%5) == 0 ) m/=5;
    1cc4:	00000406 	br	1cd8 <kiss_fft_next_fast_size+0x78>
    1cc8:	e0ffff17 	ldw	r3,-4(fp)
    1ccc:	00800144 	movi	r2,5
    1cd0:	1885283a 	div	r2,r3,r2
    1cd4:	e0bfff15 	stw	r2,-4(fp)
    1cd8:	e0bfff17 	ldw	r2,-4(fp)
    1cdc:	00c00144 	movi	r3,5
    1ce0:	10c7283a 	div	r3,r2,r3
    1ce4:	18c00164 	muli	r3,r3,5
    1ce8:	10c5c83a 	sub	r2,r2,r3
    1cec:	103ff626 	beq	r2,zero,1cc8 <kiss_fft_next_fast_size+0x68>
        if (m<=1)
    1cf0:	e0bfff17 	ldw	r2,-4(fp)
    1cf4:	10800088 	cmpgei	r2,r2,2
    1cf8:	10000426 	beq	r2,zero,1d0c <kiss_fft_next_fast_size+0xac>
            break; /* n is completely factorable by twos, threes, and fives */
        n++;
    1cfc:	e0bffe17 	ldw	r2,-8(fp)
    1d00:	10800044 	addi	r2,r2,1
    1d04:	e0bffe15 	stw	r2,-8(fp)
    while(1) {
    1d08:	003fd906 	br	1c70 <kiss_fft_next_fast_size+0x10>
            break; /* n is completely factorable by twos, threes, and fives */
    1d0c:	0001883a 	nop
    }
    return n;
    1d10:	e0bffe17 	ldw	r2,-8(fp)
}
    1d14:	e037883a 	mov	sp,fp
    1d18:	df000017 	ldw	fp,0(sp)
    1d1c:	dec00104 	addi	sp,sp,4
    1d20:	f800283a 	ret

00001d24 <main>:
 * This program performs the following:
 *  1. records audio for 1.5 seconds when KEY[0] is pressed.
 *  2. Normalizes the audio to a range between -1 and 1.
 *  3. Applies the Hamming window to the samples.
 ******************************************************************************/
int main(void) {
    1d24:	defffd04 	addi	sp,sp,-12
    1d28:	dfc00215 	stw	ra,8(sp)
    1d2c:	df000115 	stw	fp,4(sp)
    1d30:	dc000015 	stw	r16,0(sp)
    1d34:	df000104 	addi	fp,sp,4
    1d38:	023fffb4 	movhi	r8,65534
    1d3c:	422ea304 	addi	r8,r8,-17780
    1d40:	da37883a 	add	sp,sp,r8
    /* Declare volatile pointers to I/O registers (volatile means that IO load
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile int *red_LED_ptr = (int *)LED_BASE;
    1d44:	00bfc834 	movhi	r2,65312
    1d48:	e0bff515 	stw	r2,-44(fp)
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    1d4c:	00bfc834 	movhi	r2,65312
    1d50:	108c1004 	addi	r2,r2,12352
    1d54:	e0bff415 	stw	r2,-48(fp)
    int sdram_count = 0;
    1d58:	e03ff315 	stw	zero,-52(fp)
    int counter = 0;
    1d5c:	e03ff215 	stw	zero,-56(fp)

    /* used for audio record and calculations */
    int fifospace;
    int record = 0, play = 0, buffer_index = 0;
    1d60:	e03ff015 	stw	zero,-64(fp)
    1d64:	e03fef15 	stw	zero,-68(fp)
    1d68:	e03fee15 	stw	zero,-72(fp)
    float mfcc_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];
    float rock_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];
    float paper_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];
    float scissors_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];
    // open the Character LCD port
    char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
    1d6c:	010000b4 	movhi	r4,2
    1d70:	2103aa04 	addi	r4,r4,3752
    1d74:	001f6f00 	call	1f6f0 <alt_up_character_lcd_open_dev>
    1d78:	d0a73f15 	stw	r2,-25348(gp)
    if ( char_lcd_dev == NULL) alt_printf ("Error: could not open character LCD device\n");
    1d7c:	d0a73f17 	ldw	r2,-25348(gp)
    1d80:	1000041e 	bne	r2,zero,1d94 <main+0x70>
    1d84:	010000b4 	movhi	r4,2
    1d88:	2103af04 	addi	r4,r4,3772
    1d8c:	001a59c0 	call	1a59c <alt_printf>
    1d90:	00000306 	br	1da0 <main+0x7c>
    else alt_printf ("Opened character LCD device\n");
    1d94:	010000b4 	movhi	r4,2
    1d98:	2103ba04 	addi	r4,r4,3816
    1d9c:	001a59c0 	call	1a59c <alt_printf>
    /* Initialize the character display */
    alt_up_character_lcd_init (char_lcd_dev);
    1da0:	d0a73f17 	ldw	r2,-25348(gp)
    1da4:	1009883a 	mov	r4,r2
    1da8:	001f6b80 	call	1f6b8 <alt_up_character_lcd_init>
    /* Write "Welcome to" in the first row */
    alt_up_character_lcd_string(char_lcd_dev, "Press KEY0 to");
    1dac:	d0a73f17 	ldw	r2,-25348(gp)
    1db0:	014000b4 	movhi	r5,2
    1db4:	2943c204 	addi	r5,r5,3848
    1db8:	1009883a 	mov	r4,r2
    1dbc:	001f7ac0 	call	1f7ac <alt_up_character_lcd_string>
    alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
    1dc0:	d0a73f17 	ldw	r2,-25348(gp)
    1dc4:	01800044 	movi	r6,1
    1dc8:	000b883a 	mov	r5,zero
    1dcc:	1009883a 	mov	r4,r2
    1dd0:	001f8780 	call	1f878 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, "Record audio...");
    1dd4:	d0a73f17 	ldw	r2,-25348(gp)
    1dd8:	014000b4 	movhi	r5,2
    1ddc:	2943c604 	addi	r5,r5,3864
    1de0:	1009883a 	mov	r4,r2
    1de4:	001f7ac0 	call	1f7ac <alt_up_character_lcd_string>
	sd_card_dev = alt_up_sd_card_open_dev("/dev/SD_Card");
    1de8:	010000b4 	movhi	r4,2
    1dec:	2103ca04 	addi	r4,r4,3880
    1df0:	001d76c0 	call	1d76c <alt_up_sd_card_open_dev>
    1df4:	d0a74015 	stw	r2,-25344(gp)
	//checkIfSDCardIsPresent();
	checkIfSDCardIsPresent();
    1df8:	0002fec0 	call	2fec <checkIfSDCardIsPresent>

    /* read and echo audio data */
    play = 0;
    1dfc:	e03fef15 	stw	zero,-68(fp)
    int i;
    while (1) {
        check_KEYs(&record, &play, &buffer_index);
    1e00:	e13fee04 	addi	r4,fp,-72
    1e04:	e0ffef04 	addi	r3,fp,-68
    1e08:	e0bff004 	addi	r2,fp,-64
    1e0c:	200d883a 	mov	r6,r4
    1e10:	180b883a 	mov	r5,r3
    1e14:	1009883a 	mov	r4,r2
    1e18:	00022980 	call	2298 <check_KEYs>
        if (record) {
    1e1c:	e0bff017 	ldw	r2,-64(fp)
    1e20:	103ff726 	beq	r2,zero,1e00 <main+0xdc>
            *(red_LED_ptr) = 0x1;  // turn on LEDR[0]
    1e24:	e0bff517 	ldw	r2,-44(fp)
    1e28:	00c00044 	movi	r3,1
    1e2c:	10c00015 	stw	r3,0(r2)

            fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
    1e30:	e0bff417 	ldw	r2,-48(fp)
    1e34:	10800117 	ldw	r2,4(r2)
    1e38:	e0bffe15 	stw	r2,-8(fp)
            if ((fifospace & 0x000000FF) > BUF_THRESHOLD)  // check RARC
    1e3c:	e0bffe17 	ldw	r2,-8(fp)
    1e40:	10803fcc 	andi	r2,r2,255
    1e44:	10801850 	cmplti	r2,r2,97
    1e48:	103fed1e 	bne	r2,zero,1e00 <main+0xdc>
            {
                // store data until the the audio-in FIFO is empty or the buffer is full
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    1e4c:	00010b06 	br	227c <main+0x558>
                    left_buffer[buffer_index] = *(audio_ptr + 2);
    1e50:	e0bff417 	ldw	r2,-48(fp)
    1e54:	10800204 	addi	r2,r2,8
    1e58:	10800017 	ldw	r2,0(r2)
    1e5c:	e43fee17 	ldw	r16,-72(fp)
    1e60:	1009883a 	mov	r4,r2
    1e64:	000a3dc0 	call	a3dc <__floatsisf>
    1e68:	1009883a 	mov	r4,r2
    1e6c:	00bffff4 	movhi	r2,65535
    1e70:	10910f04 	addi	r2,r2,17468
    1e74:	10bfff04 	addi	r2,r2,-4
    1e78:	1707883a 	add	r3,r2,fp
    1e7c:	800490ba 	slli	r2,r16,2
    1e80:	1885883a 	add	r2,r3,r2
    1e84:	11000015 	stw	r4,0(r2)
                    right_buffer[buffer_index] = *(audio_ptr + 3);
    1e88:	e17fee17 	ldw	r5,-72(fp)
    1e8c:	e0bff417 	ldw	r2,-48(fp)
    1e90:	10c00317 	ldw	r3,12(r2)
    1e94:	00bffff4 	movhi	r2,65535
    1e98:	10a22f04 	addi	r2,r2,-30532
    1e9c:	10bfff04 	addi	r2,r2,-4
    1ea0:	1709883a 	add	r4,r2,fp
    1ea4:	280490ba 	slli	r2,r5,2
    1ea8:	2085883a 	add	r2,r4,r2
    1eac:	10c00015 	stw	r3,0(r2)
                    ++buffer_index;
    1eb0:	e0bfee17 	ldw	r2,-72(fp)
    1eb4:	10800044 	addi	r2,r2,1
    1eb8:	e0bfee15 	stw	r2,-72(fp)

                    if (buffer_index == BUF_SIZE) {
    1ebc:	e0bfee17 	ldw	r2,-72(fp)
    1ec0:	108bb818 	cmpnei	r2,r2,12000
    1ec4:	1000ea1e 	bne	r2,zero,2270 <main+0x54c>
                    	list_files_on_sd_card();
    1ec8:	00032040 	call	3204 <list_files_on_sd_card>
                        // done recording
                        record = 0;
    1ecc:	e03ff015 	stw	zero,-64(fp)
                        *(red_LED_ptr) = 0x0;  // turn off LEDR
    1ed0:	e0bff517 	ldw	r2,-44(fp)
    1ed4:	10000015 	stw	zero,0(r2)
                        //printf("Address of left_buffer: %p\n", (void*)&left_buffer);
                        clearLCD();
    1ed8:	0002ef40 	call	2ef4 <clearLCD>
                        alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
    1edc:	d0a73f17 	ldw	r2,-25348(gp)
    1ee0:	000d883a 	mov	r6,zero
    1ee4:	000b883a 	mov	r5,zero
    1ee8:	1009883a 	mov	r4,r2
    1eec:	001f8780 	call	1f878 <alt_up_character_lcd_set_cursor_pos>
                        alt_up_character_lcd_string(char_lcd_dev, "Normalizing     \0");
    1ef0:	d0a73f17 	ldw	r2,-25348(gp)
    1ef4:	014000b4 	movhi	r5,2
    1ef8:	2943ce04 	addi	r5,r5,3896
    1efc:	1009883a 	mov	r4,r2
    1f00:	001f7ac0 	call	1f7ac <alt_up_character_lcd_string>
                        alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
    1f04:	d0a73f17 	ldw	r2,-25348(gp)
    1f08:	01800044 	movi	r6,1
    1f0c:	000b883a 	mov	r5,zero
    1f10:	1009883a 	mov	r4,r2
    1f14:	001f8780 	call	1f878 <alt_up_character_lcd_set_cursor_pos>
						alt_up_character_lcd_string(char_lcd_dev, "audio...        \0");
    1f18:	d0a73f17 	ldw	r2,-25348(gp)
    1f1c:	014000b4 	movhi	r5,2
    1f20:	2943d304 	addi	r5,r5,3916
    1f24:	1009883a 	mov	r4,r2
    1f28:	001f7ac0 	call	1f7ac <alt_up_character_lcd_string>
                        normalize_audio(left_buffer, normalized_buffer, BUF_SIZE);
    1f2c:	00bfffb4 	movhi	r2,65534
    1f30:	10b34f04 	addi	r2,r2,-12996
    1f34:	10bfff04 	addi	r2,r2,-4
    1f38:	1707883a 	add	r3,r2,fp
    1f3c:	00bffff4 	movhi	r2,65535
    1f40:	10910f04 	addi	r2,r2,17468
    1f44:	10bfff04 	addi	r2,r2,-4
    1f48:	1705883a 	add	r2,r2,fp
    1f4c:	018bb804 	movi	r6,12000
    1f50:	180b883a 	mov	r5,r3
    1f54:	1009883a 	mov	r4,r2
    1f58:	00023640 	call	2364 <normalize_audio>
                        // Calculate MFCCs
						calculate_mfcc(normalized_buffer, BUF_SIZE, mfcc_buffer);
    1f5c:	00bfffb4 	movhi	r2,65534
    1f60:	10b22404 	addi	r2,r2,-14192
    1f64:	10bfff04 	addi	r2,r2,-4
    1f68:	1707883a 	add	r3,r2,fp
    1f6c:	00bfffb4 	movhi	r2,65534
    1f70:	10b34f04 	addi	r2,r2,-12996
    1f74:	10bfff04 	addi	r2,r2,-4
    1f78:	1705883a 	add	r2,r2,fp
    1f7c:	180d883a 	mov	r6,r3
    1f80:	014bb804 	movi	r5,12000
    1f84:	1009883a 	mov	r4,r2
    1f88:	000262c0 	call	262c <calculate_mfcc>
						writeToLCD("Finished        \0", "calculations...\0");
    1f8c:	014000b4 	movhi	r5,2
    1f90:	2943d804 	addi	r5,r5,3936
    1f94:	010000b4 	movhi	r4,2
    1f98:	2103dd04 	addi	r4,r4,3956
    1f9c:	0002f700 	call	2f70 <writeToLCD>
						int num_frames = (BUF_SIZE - FFT_SIZE) / FFT_SHIFT + 1;
    1fa0:	00800584 	movi	r2,22
    1fa4:	e0bff115 	stw	r2,-60(fp)
						for (int frame = 0; frame < num_frames; frame++) {
    1fa8:	e03ffd15 	stw	zero,-12(fp)
    1fac:	00002506 	br	2044 <main+0x320>
							printf("Frame %d:\n", frame);
    1fb0:	e17ffd17 	ldw	r5,-12(fp)
    1fb4:	010000b4 	movhi	r4,2
    1fb8:	2103e204 	addi	r4,r4,3976
    1fbc:	000d7240 	call	d724 <printf>
							for (int m = 0; m < NUM_MFCC; m++) {
    1fc0:	e03ffc15 	stw	zero,-16(fp)
    1fc4:	00001706 	br	2024 <main+0x300>
								printf("%f ", mfcc_buffer[frame * NUM_MFCC + m]);
    1fc8:	e0bffd17 	ldw	r2,-12(fp)
    1fcc:	10c00364 	muli	r3,r2,13
    1fd0:	e0bffc17 	ldw	r2,-16(fp)
    1fd4:	1889883a 	add	r4,r3,r2
    1fd8:	00bfffb4 	movhi	r2,65534
    1fdc:	10b22404 	addi	r2,r2,-14192
    1fe0:	10bfff04 	addi	r2,r2,-4
    1fe4:	1707883a 	add	r3,r2,fp
    1fe8:	200490ba 	slli	r2,r4,2
    1fec:	1885883a 	add	r2,r3,r2
    1ff0:	10c00017 	ldw	r3,0(r2)
    1ff4:	1809883a 	mov	r4,r3
    1ff8:	000cb280 	call	cb28 <__extendsfdf2>
    1ffc:	100d883a 	mov	r6,r2
    2000:	180f883a 	mov	r7,r3
    2004:	300b883a 	mov	r5,r6
    2008:	380d883a 	mov	r6,r7
    200c:	010000b4 	movhi	r4,2
    2010:	2103e504 	addi	r4,r4,3988
    2014:	000d7240 	call	d724 <printf>
							for (int m = 0; m < NUM_MFCC; m++) {
    2018:	e0bffc17 	ldw	r2,-16(fp)
    201c:	10800044 	addi	r2,r2,1
    2020:	e0bffc15 	stw	r2,-16(fp)
    2024:	e0bffc17 	ldw	r2,-16(fp)
    2028:	10800350 	cmplti	r2,r2,13
    202c:	103fe61e 	bne	r2,zero,1fc8 <main+0x2a4>
							}
							printf("\n");
    2030:	01000284 	movi	r4,10
    2034:	000d7640 	call	d764 <putchar>
						for (int frame = 0; frame < num_frames; frame++) {
    2038:	e0bffd17 	ldw	r2,-12(fp)
    203c:	10800044 	addi	r2,r2,1
    2040:	e0bffd15 	stw	r2,-12(fp)
    2044:	e0fffd17 	ldw	r3,-12(fp)
    2048:	e0bff117 	ldw	r2,-60(fp)
    204c:	18bfd816 	blt	r3,r2,1fb0 <main+0x28c>
						}
						writeToLCD("comparing       \0", "MFCC...        \0");
    2050:	014000b4 	movhi	r5,2
    2054:	2943e604 	addi	r5,r5,3992
    2058:	010000b4 	movhi	r4,2
    205c:	2103eb04 	addi	r4,r4,4012
    2060:	0002f700 	call	2f70 <writeToLCD>
						double rock_value;
						double paper_value;
						double scissors_value;
						if (get_values_from_sd_card_file("ROCK.TXT", rock_buffer)) {
    2064:	00bfffb4 	movhi	r2,65534
    2068:	10b0f904 	addi	r2,r2,-15388
    206c:	10bfff04 	addi	r2,r2,-4
    2070:	1705883a 	add	r2,r2,fp
    2074:	100b883a 	mov	r5,r2
    2078:	010000b4 	movhi	r4,2
    207c:	2103f004 	addi	r4,r4,4032
    2080:	000309c0 	call	309c <get_values_from_sd_card_file>
    2084:	10000d26 	beq	r2,zero,20bc <main+0x398>
							rock_value = compare_mfcc_buffers(mfcc_buffer, rock_buffer);
    2088:	00bfffb4 	movhi	r2,65534
    208c:	10b0f904 	addi	r2,r2,-15388
    2090:	10bfff04 	addi	r2,r2,-4
    2094:	1707883a 	add	r3,r2,fp
    2098:	00bfffb4 	movhi	r2,65534
    209c:	10b22404 	addi	r2,r2,-14192
    20a0:	10bfff04 	addi	r2,r2,-4
    20a4:	1705883a 	add	r2,r2,fp
    20a8:	180b883a 	mov	r5,r3
    20ac:	1009883a 	mov	r4,r2
    20b0:	00028740 	call	2874 <compare_mfcc_buffers>
    20b4:	e0bffa15 	stw	r2,-24(fp)
    20b8:	e0fffb15 	stw	r3,-20(fp)
						}
						printf("%f", rock_value);
    20bc:	e17ffa17 	ldw	r5,-24(fp)
    20c0:	e1bffb17 	ldw	r6,-20(fp)
    20c4:	010000b4 	movhi	r4,2
    20c8:	2103f304 	addi	r4,r4,4044
    20cc:	000d7240 	call	d724 <printf>
						if (get_values_from_sd_card_file("PAPER.TXT", paper_buffer)) {
    20d0:	00bfffb4 	movhi	r2,65534
    20d4:	10afce04 	addi	r2,r2,-16584
    20d8:	10bfff04 	addi	r2,r2,-4
    20dc:	1705883a 	add	r2,r2,fp
    20e0:	100b883a 	mov	r5,r2
    20e4:	010000b4 	movhi	r4,2
    20e8:	2103f404 	addi	r4,r4,4048
    20ec:	000309c0 	call	309c <get_values_from_sd_card_file>
    20f0:	10000d26 	beq	r2,zero,2128 <main+0x404>
							paper_value = compare_mfcc_buffers(mfcc_buffer, paper_buffer);
    20f4:	00bfffb4 	movhi	r2,65534
    20f8:	10afce04 	addi	r2,r2,-16584
    20fc:	10bfff04 	addi	r2,r2,-4
    2100:	1707883a 	add	r3,r2,fp
    2104:	00bfffb4 	movhi	r2,65534
    2108:	10b22404 	addi	r2,r2,-14192
    210c:	10bfff04 	addi	r2,r2,-4
    2110:	1705883a 	add	r2,r2,fp
    2114:	180b883a 	mov	r5,r3
    2118:	1009883a 	mov	r4,r2
    211c:	00028740 	call	2874 <compare_mfcc_buffers>
    2120:	e0bff815 	stw	r2,-32(fp)
    2124:	e0fff915 	stw	r3,-28(fp)
						}
						if (get_values_from_sd_card_file("SCISSORS.TXT", scissors_buffer)) {
    2128:	00bfffb4 	movhi	r2,65534
    212c:	10aea304 	addi	r2,r2,-17780
    2130:	10bfff04 	addi	r2,r2,-4
    2134:	1705883a 	add	r2,r2,fp
    2138:	100b883a 	mov	r5,r2
    213c:	010000b4 	movhi	r4,2
    2140:	2103f704 	addi	r4,r4,4060
    2144:	000309c0 	call	309c <get_values_from_sd_card_file>
    2148:	10000d26 	beq	r2,zero,2180 <main+0x45c>
							scissors_value = compare_mfcc_buffers(mfcc_buffer, scissors_buffer);
    214c:	00bfffb4 	movhi	r2,65534
    2150:	10aea304 	addi	r2,r2,-17780
    2154:	10bfff04 	addi	r2,r2,-4
    2158:	1707883a 	add	r3,r2,fp
    215c:	00bfffb4 	movhi	r2,65534
    2160:	10b22404 	addi	r2,r2,-14192
    2164:	10bfff04 	addi	r2,r2,-4
    2168:	1705883a 	add	r2,r2,fp
    216c:	180b883a 	mov	r5,r3
    2170:	1009883a 	mov	r4,r2
    2174:	00028740 	call	2874 <compare_mfcc_buffers>
    2178:	e0bff615 	stw	r2,-40(fp)
    217c:	e0fff715 	stw	r3,-36(fp)
						}
						if (rock_value < paper_value && rock_value < scissors_value) {
    2180:	e1bff817 	ldw	r6,-32(fp)
    2184:	e1fff917 	ldw	r7,-28(fp)
    2188:	e13ffa17 	ldw	r4,-24(fp)
    218c:	e17ffb17 	ldw	r5,-20(fp)
    2190:	000b8a40 	call	b8a4 <__ledf2>
    2194:	10000c0e 	bge	r2,zero,21c8 <main+0x4a4>
    2198:	e1bff617 	ldw	r6,-40(fp)
    219c:	e1fff717 	ldw	r7,-36(fp)
    21a0:	e13ffa17 	ldw	r4,-24(fp)
    21a4:	e17ffb17 	ldw	r5,-20(fp)
    21a8:	000b8a40 	call	b8a4 <__ledf2>
    21ac:	1000060e 	bge	r2,zero,21c8 <main+0x4a4>
							writeToLCD("steen           \0", "");
    21b0:	014000b4 	movhi	r5,2
    21b4:	2943fb04 	addi	r5,r5,4076
    21b8:	010000b4 	movhi	r4,2
    21bc:	2103fc04 	addi	r4,r4,4080
    21c0:	0002f700 	call	2f70 <writeToLCD>
    21c4:	00002906 	br	226c <main+0x548>
						}
						else if (paper_value < rock_value && paper_value < scissors_value) {
    21c8:	e1bffa17 	ldw	r6,-24(fp)
    21cc:	e1fffb17 	ldw	r7,-20(fp)
    21d0:	e13ff817 	ldw	r4,-32(fp)
    21d4:	e17ff917 	ldw	r5,-28(fp)
    21d8:	000b8a40 	call	b8a4 <__ledf2>
    21dc:	10000c0e 	bge	r2,zero,2210 <main+0x4ec>
    21e0:	e1bff617 	ldw	r6,-40(fp)
    21e4:	e1fff717 	ldw	r7,-36(fp)
    21e8:	e13ff817 	ldw	r4,-32(fp)
    21ec:	e17ff917 	ldw	r5,-28(fp)
    21f0:	000b8a40 	call	b8a4 <__ledf2>
    21f4:	1000060e 	bge	r2,zero,2210 <main+0x4ec>
							writeToLCD("papier          \0", "");
    21f8:	014000b4 	movhi	r5,2
    21fc:	2943fb04 	addi	r5,r5,4076
    2200:	010000b4 	movhi	r4,2
    2204:	21040104 	addi	r4,r4,4100
    2208:	0002f700 	call	2f70 <writeToLCD>
    220c:	00001706 	br	226c <main+0x548>
						}
						else if (scissors_value < rock_value && scissors_value < paper_value) {
    2210:	e1bffa17 	ldw	r6,-24(fp)
    2214:	e1fffb17 	ldw	r7,-20(fp)
    2218:	e13ff617 	ldw	r4,-40(fp)
    221c:	e17ff717 	ldw	r5,-36(fp)
    2220:	000b8a40 	call	b8a4 <__ledf2>
    2224:	10000c0e 	bge	r2,zero,2258 <main+0x534>
    2228:	e1bff817 	ldw	r6,-32(fp)
    222c:	e1fff917 	ldw	r7,-28(fp)
    2230:	e13ff617 	ldw	r4,-40(fp)
    2234:	e17ff717 	ldw	r5,-36(fp)
    2238:	000b8a40 	call	b8a4 <__ledf2>
    223c:	1000060e 	bge	r2,zero,2258 <main+0x534>
							writeToLCD("schaar          \0", "");
    2240:	014000b4 	movhi	r5,2
    2244:	2943fb04 	addi	r5,r5,4076
    2248:	010000b4 	movhi	r4,2
    224c:	21040604 	addi	r4,r4,4120
    2250:	0002f700 	call	2f70 <writeToLCD>
    2254:	00000506 	br	226c <main+0x548>
						}
						else {
							writeToLCD("No choice       \0", "");
    2258:	014000b4 	movhi	r5,2
    225c:	2943fb04 	addi	r5,r5,4076
    2260:	010000b4 	movhi	r4,2
    2264:	21040b04 	addi	r4,r4,4140
    2268:	0002f700 	call	2f70 <writeToLCD>
						}
						//double rock_value = compare_mfcc_buffers(mfcc_buffer, rock_buffer);
                         //write the float buffer to the SDRAM

                        buffer_index = 0;
    226c:	e03fee15 	stw	zero,-72(fp)
                    }
                    fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
    2270:	e0bff417 	ldw	r2,-48(fp)
    2274:	10800117 	ldw	r2,4(r2)
    2278:	e0bffe15 	stw	r2,-8(fp)
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    227c:	e0bffe17 	ldw	r2,-8(fp)
    2280:	10803fcc 	andi	r2,r2,255
    2284:	103ede26 	beq	r2,zero,1e00 <main+0xdc>
    2288:	e0bfee17 	ldw	r2,-72(fp)
    228c:	108bb810 	cmplti	r2,r2,12000
    2290:	103eef1e 	bne	r2,zero,1e50 <main+0x12c>
        check_KEYs(&record, &play, &buffer_index);
    2294:	003eda06 	br	1e00 <main+0xdc>

00002298 <check_KEYs>:
}

/****************************************************************************************
 * Subroutine to read KEYs
 ****************************************************************************************/
void check_KEYs(int *KEY0, int *KEY1, int *counter) {
    2298:	defff904 	addi	sp,sp,-28
    229c:	df000615 	stw	fp,24(sp)
    22a0:	df000604 	addi	fp,sp,24
    22a4:	e13ffc15 	stw	r4,-16(fp)
    22a8:	e17ffb15 	stw	r5,-20(fp)
    22ac:	e1bffa15 	stw	r6,-24(fp)
    volatile int *KEY_ptr = (int *)KEY_BASE;
    22b0:	00bfc834 	movhi	r2,65312
    22b4:	10801404 	addi	r2,r2,80
    22b8:	e0bfff15 	stw	r2,-4(fp)
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    22bc:	00bfc834 	movhi	r2,65312
    22c0:	108c1004 	addi	r2,r2,12352
    22c4:	e0bffe15 	stw	r2,-8(fp)
    int KEY_value;

    KEY_value = *(KEY_ptr);  // read the pushbutton KEY values
    22c8:	e0bfff17 	ldw	r2,-4(fp)
    22cc:	10800017 	ldw	r2,0(r2)
    22d0:	e0bffd15 	stw	r2,-12(fp)
    while (*KEY_ptr)
    22d4:	0001883a 	nop
    22d8:	e0bfff17 	ldw	r2,-4(fp)
    22dc:	10800017 	ldw	r2,0(r2)
    22e0:	103ffd1e 	bne	r2,zero,22d8 <check_KEYs+0x40>
        ;  // wait for pushbutton KEY release

    if (KEY_value == 0x1)  // check KEY0
    22e4:	e0bffd17 	ldw	r2,-12(fp)
    22e8:	10800058 	cmpnei	r2,r2,1
    22ec:	10000b1e 	bne	r2,zero,231c <check_KEYs+0x84>
    {
        // reset counter to start recording
        *counter = 0;
    22f0:	e0bffa17 	ldw	r2,-24(fp)
    22f4:	10000015 	stw	zero,0(r2)
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
    22f8:	e0bffe17 	ldw	r2,-8(fp)
    22fc:	00c00104 	movi	r3,4
    2300:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
    2304:	e0bffe17 	ldw	r2,-8(fp)
    2308:	10000015 	stw	zero,0(r2)

        *KEY0 = 1;
    230c:	e0bffc17 	ldw	r2,-16(fp)
    2310:	00c00044 	movi	r3,1
    2314:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x8;
        *(audio_ptr) = 0x0;

        *KEY1 = 1;
    }
}
    2318:	00000d06 	br	2350 <check_KEYs+0xb8>
    } else if (KEY_value == 0x2)  // check KEY1
    231c:	e0bffd17 	ldw	r2,-12(fp)
    2320:	10800098 	cmpnei	r2,r2,2
    2324:	10000a1e 	bne	r2,zero,2350 <check_KEYs+0xb8>
        *counter = 0;
    2328:	e0bffa17 	ldw	r2,-24(fp)
    232c:	10000015 	stw	zero,0(r2)
        *(audio_ptr) = 0x8;
    2330:	e0bffe17 	ldw	r2,-8(fp)
    2334:	00c00204 	movi	r3,8
    2338:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
    233c:	e0bffe17 	ldw	r2,-8(fp)
    2340:	10000015 	stw	zero,0(r2)
        *KEY1 = 1;
    2344:	e0bffb17 	ldw	r2,-20(fp)
    2348:	00c00044 	movi	r3,1
    234c:	10c00015 	stw	r3,0(r2)
}
    2350:	0001883a 	nop
    2354:	e037883a 	mov	sp,fp
    2358:	df000017 	ldw	fp,0(sp)
    235c:	dec00104 	addi	sp,sp,4
    2360:	f800283a 	ret

00002364 <normalize_audio>:

void normalize_audio(float *input_buffer, float *output_buffer, int size) {
    2364:	defff604 	addi	sp,sp,-40
    2368:	dfc00915 	stw	ra,36(sp)
    236c:	df000815 	stw	fp,32(sp)
    2370:	df000804 	addi	fp,sp,32
    2374:	e13ffa15 	stw	r4,-24(fp)
    2378:	e17ff915 	stw	r5,-28(fp)
    237c:	e1bff815 	stw	r6,-32(fp)
	float max_val = 0.0f;
    2380:	e03fff15 	stw	zero,-4(fp)

	// Find the maximum absolute value. Subtract 32768 from each sample of the input buffer so that the samples are signed integers and so that the numbers will be between -1 and 1.
	for (int i = 0; i < size; i++) {
    2384:	e03ffe15 	stw	zero,-8(fp)
    2388:	00001606 	br	23e4 <normalize_audio+0x80>
		float signed_val = input_buffer[i] - 32768.0f;
    238c:	e0bffe17 	ldw	r2,-8(fp)
    2390:	100490ba 	slli	r2,r2,2
    2394:	e0fffa17 	ldw	r3,-24(fp)
    2398:	1885883a 	add	r2,r3,r2
    239c:	10c00017 	ldw	r3,0(r2)
    23a0:	0091c034 	movhi	r2,18176
    23a4:	1885ffb2 	custom	254,r2,r3,r2
    23a8:	e0bffc15 	stw	r2,-16(fp)
		float abs_val = fabs(signed_val);
    23ac:	e0fffc17 	ldw	r3,-16(fp)
    23b0:	00a00034 	movhi	r2,32768
    23b4:	10bfffc4 	addi	r2,r2,-1
    23b8:	1884703a 	and	r2,r3,r2
    23bc:	e0bffb15 	stw	r2,-20(fp)
		if (abs_val > max_val) {
    23c0:	e17fff17 	ldw	r5,-4(fp)
    23c4:	e13ffb17 	ldw	r4,-20(fp)
    23c8:	0009a6c0 	call	9a6c <__gesf2>
    23cc:	0080020e 	bge	zero,r2,23d8 <normalize_audio+0x74>
			max_val = abs_val;
    23d0:	e0bffb17 	ldw	r2,-20(fp)
    23d4:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < size; i++) {
    23d8:	e0bffe17 	ldw	r2,-8(fp)
    23dc:	10800044 	addi	r2,r2,1
    23e0:	e0bffe15 	stw	r2,-8(fp)
    23e4:	e0fffe17 	ldw	r3,-8(fp)
    23e8:	e0bff817 	ldw	r2,-32(fp)
    23ec:	18bfe716 	blt	r3,r2,238c <normalize_audio+0x28>
		}
	}

	// Prevent division by zero by setting the max value to 1 if it is 0.
	if (max_val == 0) {
    23f0:	000b883a 	mov	r5,zero
    23f4:	e13fff17 	ldw	r4,-4(fp)
    23f8:	00099fc0 	call	99fc <__eqsf2>
    23fc:	1000021e 	bne	r2,zero,2408 <normalize_audio+0xa4>
		max_val = 1.0f;
    2400:	008fe034 	movhi	r2,16256
    2404:	e0bfff15 	stw	r2,-4(fp)
	}

	// Normalize the input buffer to numbers between -1 and 1.
	for (int i = 0; i < size; i++) {
    2408:	e03ffd15 	stw	zero,-12(fp)
    240c:	00001106 	br	2454 <normalize_audio+0xf0>
		output_buffer[i] = (input_buffer[i] - 32768.0f) / max_val;
    2410:	e0bffd17 	ldw	r2,-12(fp)
    2414:	100490ba 	slli	r2,r2,2
    2418:	e0fffa17 	ldw	r3,-24(fp)
    241c:	1885883a 	add	r2,r3,r2
    2420:	10c00017 	ldw	r3,0(r2)
    2424:	0091c034 	movhi	r2,18176
    2428:	1889ffb2 	custom	254,r4,r3,r2
    242c:	e0bffd17 	ldw	r2,-12(fp)
    2430:	100490ba 	slli	r2,r2,2
    2434:	e0fff917 	ldw	r3,-28(fp)
    2438:	1885883a 	add	r2,r3,r2
    243c:	e0ffff17 	ldw	r3,-4(fp)
    2440:	20c7fff2 	custom	255,r3,r4,r3
    2444:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < size; i++) {
    2448:	e0bffd17 	ldw	r2,-12(fp)
    244c:	10800044 	addi	r2,r2,1
    2450:	e0bffd15 	stw	r2,-12(fp)
    2454:	e0fffd17 	ldw	r3,-12(fp)
    2458:	e0bff817 	ldw	r2,-32(fp)
    245c:	18bfec16 	blt	r3,r2,2410 <normalize_audio+0xac>
	}
}
    2460:	0001883a 	nop
    2464:	0001883a 	nop
    2468:	e037883a 	mov	sp,fp
    246c:	dfc00117 	ldw	ra,4(sp)
    2470:	df000017 	ldw	fp,0(sp)
    2474:	dec00204 	addi	sp,sp,8
    2478:	f800283a 	ret

0000247c <hamming_window>:

// Source for this function: https://www.sciencedirect.com/topics/engineering/hamming-window.
void hamming_window(float *input, float *output, int size) {
    247c:	defff604 	addi	sp,sp,-40
    2480:	dfc00915 	stw	ra,36(sp)
    2484:	df000815 	stw	fp,32(sp)
    2488:	dc000715 	stw	r16,28(sp)
    248c:	df000804 	addi	fp,sp,32
    2490:	e13ffa15 	stw	r4,-24(fp)
    2494:	e17ff915 	stw	r5,-28(fp)
    2498:	e1bff815 	stw	r6,-32(fp)
    for (int i = 0; i < size; i++) {
    249c:	e03ffe15 	stw	zero,-8(fp)
    24a0:	00002906 	br	2548 <hamming_window+0xcc>
        float alpha = 0.54f;
    24a4:	008fc2b4 	movhi	r2,16138
    24a8:	108f5c44 	addi	r2,r2,15729
    24ac:	e0bffd15 	stw	r2,-12(fp)
        float beta = 0.46f;
    24b0:	008fbb34 	movhi	r2,16108
    24b4:	10a147c4 	addi	r2,r2,-31457
    24b8:	e0bffc15 	stw	r2,-16(fp)
        float window = alpha - beta * cosf((2 * PI * i) / (size - 1));
    24bc:	e13ffe17 	ldw	r4,-8(fp)
    24c0:	000a3dc0 	call	a3dc <__floatsisf>
    24c4:	1007883a 	mov	r3,r2
    24c8:	00903274 	movhi	r2,16585
    24cc:	1083f6c4 	addi	r2,r2,4059
    24d0:	18a1ff32 	custom	252,r16,r3,r2
    24d4:	e0bff817 	ldw	r2,-32(fp)
    24d8:	10bfffc4 	addi	r2,r2,-1
    24dc:	1009883a 	mov	r4,r2
    24e0:	000a3dc0 	call	a3dc <__floatsisf>
    24e4:	1007883a 	mov	r3,r2
    24e8:	80c5fff2 	custom	255,r2,r16,r3
    24ec:	1009883a 	mov	r4,r2
    24f0:	0003e700 	call	3e70 <cosf>
    24f4:	1007883a 	mov	r3,r2
    24f8:	e0bffc17 	ldw	r2,-16(fp)
    24fc:	1885ff32 	custom	252,r2,r3,r2
    2500:	e0fffd17 	ldw	r3,-12(fp)
    2504:	1885ffb2 	custom	254,r2,r3,r2
    2508:	e0bffb15 	stw	r2,-20(fp)
        output[i] = input[i] * window;
    250c:	e0bffe17 	ldw	r2,-8(fp)
    2510:	100490ba 	slli	r2,r2,2
    2514:	e0fffa17 	ldw	r3,-24(fp)
    2518:	1885883a 	add	r2,r3,r2
    251c:	11000017 	ldw	r4,0(r2)
    2520:	e0bffe17 	ldw	r2,-8(fp)
    2524:	100490ba 	slli	r2,r2,2
    2528:	e0fff917 	ldw	r3,-28(fp)
    252c:	1885883a 	add	r2,r3,r2
    2530:	e0fffb17 	ldw	r3,-20(fp)
    2534:	20c7ff32 	custom	252,r3,r4,r3
    2538:	10c00015 	stw	r3,0(r2)
    for (int i = 0; i < size; i++) {
    253c:	e0bffe17 	ldw	r2,-8(fp)
    2540:	10800044 	addi	r2,r2,1
    2544:	e0bffe15 	stw	r2,-8(fp)
    2548:	e0fffe17 	ldw	r3,-8(fp)
    254c:	e0bff817 	ldw	r2,-32(fp)
    2550:	18bfd416 	blt	r3,r2,24a4 <hamming_window+0x28>
    }
}
    2554:	0001883a 	nop
    2558:	0001883a 	nop
    255c:	e6ffff04 	addi	sp,fp,-4
    2560:	dfc00217 	ldw	ra,8(sp)
    2564:	df000117 	ldw	fp,4(sp)
    2568:	dc000017 	ldw	r16,0(sp)
    256c:	dec00304 	addi	sp,sp,12
    2570:	f800283a 	ret

00002574 <fft>:

// This function performs Fast Fourier Transform on the input buffer containing the windowed input data.
void fft(float *input_buffer, kiss_fft_cpx *output_buffer) {
    2574:	def7fa04 	addi	sp,sp,-8216
    2578:	dfc80515 	stw	ra,8212(sp)
    257c:	df080415 	stw	fp,8208(sp)
    2580:	df080404 	addi	fp,sp,8208
    2584:	e137fd15 	stw	r4,-8204(fp)
    2588:	e177fc15 	stw	r5,-8208(fp)
    kiss_fft_cfg config;

    config = kiss_fft_alloc(FFT_SIZE, 0, NULL, NULL);
    258c:	000f883a 	mov	r7,zero
    2590:	000d883a 	mov	r6,zero
    2594:	000b883a 	mov	r5,zero
    2598:	01010004 	movi	r4,1024
    259c:	00018e80 	call	18e8 <kiss_fft_alloc>
    25a0:	e0bffe15 	stw	r2,-8(fp)

    // Convert input to kiss_fft_cpx format
    kiss_fft_cpx kiss_input_buffer[FFT_SIZE];
    for (int i = 0; i < FFT_SIZE; i++) {
    25a4:	e03fff15 	stw	zero,-4(fp)
    25a8:	00001006 	br	25ec <fft+0x78>
        kiss_input_buffer[i].r = input_buffer[i];
    25ac:	e0bfff17 	ldw	r2,-4(fp)
    25b0:	100490ba 	slli	r2,r2,2
    25b4:	e0f7fd17 	ldw	r3,-8204(fp)
    25b8:	1885883a 	add	r2,r3,r2
    25bc:	10c00017 	ldw	r3,0(r2)
    25c0:	e0bfff17 	ldw	r2,-4(fp)
    25c4:	100490fa 	slli	r2,r2,3
    25c8:	e085883a 	add	r2,fp,r2
    25cc:	10f7fe15 	stw	r3,-8200(r2)
        kiss_input_buffer[i].i = 0; // Assuming input is real, imaginary part is 0
    25d0:	e0bfff17 	ldw	r2,-4(fp)
    25d4:	100490fa 	slli	r2,r2,3
    25d8:	e085883a 	add	r2,fp,r2
    25dc:	1037ff15 	stw	zero,-8196(r2)
    for (int i = 0; i < FFT_SIZE; i++) {
    25e0:	e0bfff17 	ldw	r2,-4(fp)
    25e4:	10800044 	addi	r2,r2,1
    25e8:	e0bfff15 	stw	r2,-4(fp)
    25ec:	e0bfff17 	ldw	r2,-4(fp)
    25f0:	10810010 	cmplti	r2,r2,1024
    25f4:	103fed1e 	bne	r2,zero,25ac <fft+0x38>
    }

    // Perform FFT
    kiss_fft(config, kiss_input_buffer, output_buffer);
    25f8:	e0b7fe04 	addi	r2,fp,-8200
    25fc:	e1b7fc17 	ldw	r6,-8208(fp)
    2600:	100b883a 	mov	r5,r2
    2604:	e13ffe17 	ldw	r4,-8(fp)
    2608:	0001bf80 	call	1bf8 <kiss_fft>

    // Free the FFT configuration
    kiss_fft_free(config);
    260c:	e13ffe17 	ldw	r4,-8(fp)
    2610:	000ce040 	call	ce04 <free>
}
    2614:	0001883a 	nop
    2618:	e037883a 	mov	sp,fp
    261c:	dfc00117 	ldw	ra,4(sp)
    2620:	df000017 	ldw	fp,0(sp)
    2624:	dec00204 	addi	sp,sp,8
    2628:	f800283a 	ret

0000262c <calculate_mfcc>:

// This function computes the mfcc values of an input buffer. It splits the buffer into frames of 1024 samples with an overlap of 512, prints to the display the current operations and computes the Mel Frequency Cepstral Coefficients of each
void calculate_mfcc(float *input_buffer, int signal_length, float *mfcc_buffer) {
    262c:	dee7f504 	addi	sp,sp,-24620
    2630:	dfd80a15 	stw	ra,24616(sp)
    2634:	df180915 	stw	fp,24612(sp)
    2638:	dc180815 	stw	r16,24608(sp)
    263c:	df180904 	addi	fp,sp,24612
    2640:	e127fa15 	stw	r4,-24600(fp)
    2644:	e167f915 	stw	r5,-24604(fp)
    2648:	e1a7f815 	stw	r6,-24608(fp)
    float frame[FFT_SIZE];
    float windowed_frame[FFT_SIZE];
    // Calculate how many frames can be extracted from the input signal.
    int num_frames = (signal_length - FFT_SIZE) / FFT_SHIFT + 1;
    264c:	e0a7f917 	ldw	r2,-24604(fp)
    2650:	10ff0004 	addi	r3,r2,-1024
    2654:	00808004 	movi	r2,512
    2658:	1885283a 	div	r2,r3,r2
    265c:	10800044 	addi	r2,r2,1
    2660:	e0bffb15 	stw	r2,-20(fp)

    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
    2664:	e03ffe15 	stw	zero,-8(fp)
    2668:	00007706 	br	2848 <calculate_mfcc+0x21c>
        // Extract FFT_SIZE samples from the start of the current frame.
        memcpy(frame, input_buffer + frame_num * FFT_SHIFT, sizeof(float) * FFT_SIZE);
    266c:	e0bffe17 	ldw	r2,-8(fp)
    2670:	100492fa 	slli	r2,r2,11
    2674:	e0e7fa17 	ldw	r3,-24600(fp)
    2678:	1887883a 	add	r3,r3,r2
    267c:	e0bbfb04 	addi	r2,fp,-4116
    2680:	01840004 	movi	r6,4096
    2684:	180b883a 	mov	r5,r3
    2688:	1009883a 	mov	r4,r2
    268c:	000d5f40 	call	d5f4 <memcpy>

        writeToLCD("Hamming         \0", "window...       \0");
    2690:	014000b4 	movhi	r5,2
    2694:	29441004 	addi	r5,r5,4160
    2698:	010000b4 	movhi	r4,2
    269c:	21041504 	addi	r4,r4,4180
    26a0:	0002f700 	call	2f70 <writeToLCD>
        hamming_window(frame, windowed_frame, FFT_SIZE);
    26a4:	e0f7fb04 	addi	r3,fp,-8212
    26a8:	e0bbfb04 	addi	r2,fp,-4116
    26ac:	01810004 	movi	r6,1024
    26b0:	180b883a 	mov	r5,r3
    26b4:	1009883a 	mov	r4,r2
    26b8:	000247c0 	call	247c <hamming_window>

        writeToLCD("Performing      \0", "FFT...          \0");
    26bc:	014000b4 	movhi	r5,2
    26c0:	29441a04 	addi	r5,r5,4200
    26c4:	010000b4 	movhi	r4,2
    26c8:	21041f04 	addi	r4,r4,4220
    26cc:	0002f700 	call	2f70 <writeToLCD>
        kiss_fft_cpx fft_output[FFT_SIZE];
        fft(windowed_frame, fft_output);
    26d0:	e0e7fb04 	addi	r3,fp,-24596
    26d4:	e0b7fb04 	addi	r2,fp,-8212
    26d8:	180b883a 	mov	r5,r3
    26dc:	1009883a 	mov	r4,r2
    26e0:	00025740 	call	2574 <fft>

        writeToLCD("Magnitude       \0", "spectrum...     \0");
    26e4:	014000b4 	movhi	r5,2
    26e8:	29442404 	addi	r5,r5,4240
    26ec:	010000b4 	movhi	r4,2
    26f0:	21042904 	addi	r4,r4,4260
    26f4:	0002f700 	call	2f70 <writeToLCD>
        // Compute the magnitude spectrum of the current frame.
        double magnitude_spectrum[FFT_SIZE];
        for (int i = 0; i < FFT_SIZE; i++) {
    26f8:	e03ffd15 	stw	zero,-12(fp)
    26fc:	00002906 	br	27a4 <calculate_mfcc+0x178>
            magnitude_spectrum[i] = sqrt(fft_output[i].r * fft_output[i].r + fft_output[i].i * fft_output[i].i);
    2700:	e0bffd17 	ldw	r2,-12(fp)
    2704:	100490fa 	slli	r2,r2,3
    2708:	10bfff04 	addi	r2,r2,-4
    270c:	1705883a 	add	r2,r2,fp
    2710:	10e7fc17 	ldw	r3,-24592(r2)
    2714:	e0bffd17 	ldw	r2,-12(fp)
    2718:	100490fa 	slli	r2,r2,3
    271c:	10bfff04 	addi	r2,r2,-4
    2720:	1709883a 	add	r4,r2,fp
    2724:	20a7fc17 	ldw	r2,-24592(r4)
    2728:	1887ff32 	custom	252,r3,r3,r2
    272c:	e0bffd17 	ldw	r2,-12(fp)
    2730:	100490fa 	slli	r2,r2,3
    2734:	10bfff04 	addi	r2,r2,-4
    2738:	1705883a 	add	r2,r2,fp
    273c:	1127fd17 	ldw	r4,-24588(r2)
    2740:	e0bffd17 	ldw	r2,-12(fp)
    2744:	100490fa 	slli	r2,r2,3
    2748:	10bfff04 	addi	r2,r2,-4
    274c:	170b883a 	add	r5,r2,fp
    2750:	28a7fd17 	ldw	r2,-24588(r5)
    2754:	2085ff32 	custom	252,r2,r4,r2
    2758:	1885ff72 	custom	253,r2,r3,r2
    275c:	1009883a 	mov	r4,r2
    2760:	000cb280 	call	cb28 <__extendsfdf2>
    2764:	100d883a 	mov	r6,r2
    2768:	180f883a 	mov	r7,r3
    276c:	3009883a 	mov	r4,r6
    2770:	380b883a 	mov	r5,r7
    2774:	000428c0 	call	428c <sqrt>
    2778:	1009883a 	mov	r4,r2
    277c:	180b883a 	mov	r5,r3
    2780:	e0bffd17 	ldw	r2,-12(fp)
    2784:	100490fa 	slli	r2,r2,3
    2788:	10bfff04 	addi	r2,r2,-4
    278c:	1705883a 	add	r2,r2,fp
    2790:	112ffc15 	stw	r4,-16400(r2)
    2794:	116ffd15 	stw	r5,-16396(r2)
        for (int i = 0; i < FFT_SIZE; i++) {
    2798:	e0bffd17 	ldw	r2,-12(fp)
    279c:	10800044 	addi	r2,r2,1
    27a0:	e0bffd15 	stw	r2,-12(fp)
    27a4:	e0bffd17 	ldw	r2,-12(fp)
    27a8:	10810010 	cmplti	r2,r2,1024
    27ac:	103fd41e 	bne	r2,zero,2700 <calculate_mfcc+0xd4>
        }

        writeToLCD("Calculating     \0", "MFCCs...        \0");
    27b0:	014000b4 	movhi	r5,2
    27b4:	29442e04 	addi	r5,r5,4280
    27b8:	010000b4 	movhi	r4,2
    27bc:	21043304 	addi	r4,r4,4300
    27c0:	0002f700 	call	2f70 <writeToLCD>
        // Calculate MFCCs for the current frame. Each frame contains 13 values.
        for (int m = 0; m < NUM_MFCC; m++) {
    27c4:	e03ffc15 	stw	zero,-16(fp)
    27c8:	00001906 	br	2830 <calculate_mfcc+0x204>
            mfcc_buffer[frame_num * NUM_MFCC + m] = GetCoefficient(magnitude_spectrum, 8192, NUM_FILTERS, FFT_SIZE, m);
    27cc:	e0bffc17 	ldw	r2,-16(fp)
    27d0:	e0effb04 	addi	r3,fp,-16404
    27d4:	d8800015 	stw	r2,0(sp)
    27d8:	01c10004 	movi	r7,1024
    27dc:	01800304 	movi	r6,12
    27e0:	01480004 	movi	r5,8192
    27e4:	1809883a 	mov	r4,r3
    27e8:	00032940 	call	3294 <GetCoefficient>
    27ec:	100d883a 	mov	r6,r2
    27f0:	180f883a 	mov	r7,r3
    27f4:	e0bffe17 	ldw	r2,-8(fp)
    27f8:	10c00364 	muli	r3,r2,13
    27fc:	e0bffc17 	ldw	r2,-16(fp)
    2800:	1885883a 	add	r2,r3,r2
    2804:	100490ba 	slli	r2,r2,2
    2808:	e0e7f817 	ldw	r3,-24608(fp)
    280c:	18a1883a 	add	r16,r3,r2
    2810:	3009883a 	mov	r4,r6
    2814:	380b883a 	mov	r5,r7
    2818:	000cc240 	call	cc24 <__truncdfsf2>
    281c:	1007883a 	mov	r3,r2
    2820:	80c00015 	stw	r3,0(r16)
        for (int m = 0; m < NUM_MFCC; m++) {
    2824:	e0bffc17 	ldw	r2,-16(fp)
    2828:	10800044 	addi	r2,r2,1
    282c:	e0bffc15 	stw	r2,-16(fp)
    2830:	e0bffc17 	ldw	r2,-16(fp)
    2834:	10800350 	cmplti	r2,r2,13
    2838:	103fe41e 	bne	r2,zero,27cc <calculate_mfcc+0x1a0>
    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
    283c:	e0bffe17 	ldw	r2,-8(fp)
    2840:	10800044 	addi	r2,r2,1
    2844:	e0bffe15 	stw	r2,-8(fp)
    2848:	e0fffe17 	ldw	r3,-8(fp)
    284c:	e0bffb17 	ldw	r2,-20(fp)
    2850:	18bf8616 	blt	r3,r2,266c <calculate_mfcc+0x40>
        }
    }
}
    2854:	0001883a 	nop
    2858:	0001883a 	nop
    285c:	e6ffff04 	addi	sp,fp,-4
    2860:	dfc00217 	ldw	ra,8(sp)
    2864:	df000117 	ldw	fp,4(sp)
    2868:	dc000017 	ldw	r16,0(sp)
    286c:	dec00304 	addi	sp,sp,12
    2870:	f800283a 	ret

00002874 <compare_mfcc_buffers>:

// This function uses dynamic time warping for aligning the best sequences of the MFCC features.
double compare_mfcc_buffers(float *mfcc_buffer_input, float *mfcc_buffer_data) {
    2874:	deffea04 	addi	sp,sp,-88
    2878:	dfc01515 	stw	ra,84(sp)
    287c:	df001415 	stw	fp,80(sp)
    2880:	ddc01315 	stw	r23,76(sp)
    2884:	dd801215 	stw	r22,72(sp)
    2888:	dd401115 	stw	r21,68(sp)
    288c:	dd001015 	stw	r20,64(sp)
    2890:	dcc00f15 	stw	r19,60(sp)
    2894:	dc800e15 	stw	r18,56(sp)
    2898:	dc400d15 	stw	r17,52(sp)
    289c:	dc000c15 	stw	r16,48(sp)
    28a0:	df001404 	addi	fp,sp,80
    28a4:	e13fee15 	stw	r4,-72(fp)
    28a8:	e17fed15 	stw	r5,-76(fp)
    28ac:	d809883a 	mov	r4,sp
    28b0:	e13fec15 	stw	r4,-80(fp)
	int num_frames_mfcc = NUM_FRAMES_MFCC;
    28b4:	01000584 	movi	r4,22
    28b8:	e13ff215 	stw	r4,-56(fp)
	double distances_frames[num_frames_mfcc + 1][num_frames_mfcc + 1];
    28bc:	e13ff217 	ldw	r4,-56(fp)
    28c0:	27c00044 	addi	ra,r4,1
    28c4:	e13ff217 	ldw	r4,-56(fp)
    28c8:	21400044 	addi	r5,r4,1
    28cc:	f93fffc4 	addi	r4,ra,-1
    28d0:	e13ff115 	stw	r4,-60(fp)
    28d4:	f809883a 	mov	r4,ra
    28d8:	202d883a 	mov	r22,r4
    28dc:	002f883a 	mov	r23,zero
    28e0:	b008d6ba 	srli	r4,r22,26
    28e4:	b82291ba 	slli	r17,r23,6
    28e8:	2462b03a 	or	r17,r4,r17
    28ec:	b02091ba 	slli	r16,r22,6
    28f0:	f809883a 	mov	r4,ra
    28f4:	202090fa 	slli	r16,r4,3
    28f8:	293fffc4 	addi	r4,r5,-1
    28fc:	e13ff015 	stw	r4,-64(fp)
    2900:	f809883a 	mov	r4,ra
    2904:	201d883a 	mov	r14,r4
    2908:	001f883a 	mov	r15,zero
    290c:	2823883a 	mov	r17,r5
    2910:	8809883a 	mov	r4,r17
    2914:	2019883a 	mov	r12,r4
    2918:	001b883a 	mov	r13,zero
    291c:	7b0b383a 	mul	r5,r15,r12
    2920:	6b89383a 	mul	r4,r13,r14
    2924:	2909883a 	add	r4,r5,r4
    2928:	730a383a 	mulxuu	r5,r14,r12
    292c:	7319383a 	mul	r12,r14,r12
    2930:	600d883a 	mov	r6,r12
    2934:	280f883a 	mov	r7,r5
    2938:	21c9883a 	add	r4,r4,r7
    293c:	200f883a 	mov	r7,r4
    2940:	3008d6ba 	srli	r4,r6,26
    2944:	382a91ba 	slli	r21,r7,6
    2948:	256ab03a 	or	r21,r4,r21
    294c:	302891ba 	slli	r20,r6,6
    2950:	f809883a 	mov	r4,ra
    2954:	2015883a 	mov	r10,r4
    2958:	0017883a 	mov	r11,zero
    295c:	8809883a 	mov	r4,r17
    2960:	2011883a 	mov	r8,r4
    2964:	0013883a 	mov	r9,zero
    2968:	5a0b383a 	mul	r5,r11,r8
    296c:	4a89383a 	mul	r4,r9,r10
    2970:	2909883a 	add	r4,r5,r4
    2974:	520a383a 	mulxuu	r5,r10,r8
    2978:	520d383a 	mul	r6,r10,r8
    297c:	3005883a 	mov	r2,r6
    2980:	2807883a 	mov	r3,r5
    2984:	20c9883a 	add	r4,r4,r3
    2988:	2007883a 	mov	r3,r4
    298c:	1008d6ba 	srli	r4,r2,26
    2990:	182691ba 	slli	r19,r3,6
    2994:	24e6b03a 	or	r19,r4,r19
    2998:	102491ba 	slli	r18,r2,6
    299c:	f807883a 	mov	r3,ra
    29a0:	8805883a 	mov	r2,r17
    29a4:	1885383a 	mul	r2,r3,r2
    29a8:	100490fa 	slli	r2,r2,3
    29ac:	108000c4 	addi	r2,r2,3
    29b0:	1004d0ba 	srli	r2,r2,2
    29b4:	100490ba 	slli	r2,r2,2
    29b8:	d8b7c83a 	sub	sp,sp,r2
    29bc:	d805883a 	mov	r2,sp
    29c0:	108000c4 	addi	r2,r2,3
    29c4:	1004d0ba 	srli	r2,r2,2
    29c8:	100490ba 	slli	r2,r2,2
    29cc:	e0bfef15 	stw	r2,-68(fp)
	int i = 0; int j = 0; int k = 0;
    29d0:	e03ff315 	stw	zero,-52(fp)
    29d4:	e03ff415 	stw	zero,-48(fp)
    29d8:	e03ff515 	stw	zero,-44(fp)

	for (i = 0; i < num_frames_mfcc; i++) {
    29dc:	e03ff315 	stw	zero,-52(fp)
    29e0:	00001906 	br	2a48 <compare_mfcc_buffers+0x1d4>
		for (j = 0; j < num_frames_mfcc; j++) {
    29e4:	e03ff415 	stw	zero,-48(fp)
    29e8:	00001106 	br	2a30 <compare_mfcc_buffers+0x1bc>
			distances_frames[i][j] = INFINITY;
    29ec:	800ad0ba 	srli	r5,r16,2
    29f0:	e0ffef17 	ldw	r3,-68(fp)
    29f4:	e0bff417 	ldw	r2,-48(fp)
    29f8:	e13ff317 	ldw	r4,-52(fp)
    29fc:	2909383a 	mul	r4,r5,r4
    2a00:	1085883a 	add	r2,r2,r2
    2a04:	1105883a 	add	r2,r2,r4
    2a08:	100490ba 	slli	r2,r2,2
    2a0c:	1887883a 	add	r3,r3,r2
    2a10:	00b80034 	movhi	r2,57344
    2a14:	18800015 	stw	r2,0(r3)
    2a18:	009058f4 	movhi	r2,16739
    2a1c:	1084b3c4 	addi	r2,r2,4815
    2a20:	18800115 	stw	r2,4(r3)
		for (j = 0; j < num_frames_mfcc; j++) {
    2a24:	e0bff417 	ldw	r2,-48(fp)
    2a28:	10800044 	addi	r2,r2,1
    2a2c:	e0bff415 	stw	r2,-48(fp)
    2a30:	e0fff417 	ldw	r3,-48(fp)
    2a34:	e0bff217 	ldw	r2,-56(fp)
    2a38:	18bfec16 	blt	r3,r2,29ec <compare_mfcc_buffers+0x178>
	for (i = 0; i < num_frames_mfcc; i++) {
    2a3c:	e0bff317 	ldw	r2,-52(fp)
    2a40:	10800044 	addi	r2,r2,1
    2a44:	e0bff315 	stw	r2,-52(fp)
    2a48:	e0fff317 	ldw	r3,-52(fp)
    2a4c:	e0bff217 	ldw	r2,-56(fp)
    2a50:	18bfe416 	blt	r3,r2,29e4 <compare_mfcc_buffers+0x170>
		}
	}

	distances_frames[0][0] = 0;
    2a54:	e0bfef17 	ldw	r2,-68(fp)
    2a58:	10000015 	stw	zero,0(r2)
    2a5c:	10000115 	stw	zero,4(r2)

	// Calculate the distance between all pairs of the MFCC features.
	for (i = 1; i < num_frames_mfcc; i++) {
    2a60:	00800044 	movi	r2,1
    2a64:	e0bff315 	stw	r2,-52(fp)
    2a68:	00007f06 	br	2c68 <compare_mfcc_buffers+0x3f4>
		for (j = 1; j < num_frames_mfcc; j++) {
    2a6c:	00800044 	movi	r2,1
    2a70:	e0bff415 	stw	r2,-48(fp)
    2a74:	00007606 	br	2c50 <compare_mfcc_buffers+0x3dc>
			distances_frames[i + 1][j + 1] = 0;
    2a78:	800ad0ba 	srli	r5,r16,2
    2a7c:	e0bff317 	ldw	r2,-52(fp)
    2a80:	11000044 	addi	r4,r2,1
    2a84:	e0bff417 	ldw	r2,-48(fp)
    2a88:	10800044 	addi	r2,r2,1
    2a8c:	e0ffef17 	ldw	r3,-68(fp)
    2a90:	2909383a 	mul	r4,r5,r4
    2a94:	1085883a 	add	r2,r2,r2
    2a98:	1105883a 	add	r2,r2,r4
    2a9c:	100490ba 	slli	r2,r2,2
    2aa0:	1885883a 	add	r2,r3,r2
    2aa4:	10000015 	stw	zero,0(r2)
    2aa8:	10000115 	stw	zero,4(r2)
			for (k = 0; k < NUM_MFCC; k++) {
    2aac:	e03ff515 	stw	zero,-44(fp)
    2ab0:	00004206 	br	2bbc <compare_mfcc_buffers+0x348>
				distances_frames[i + 1][j + 1] += pow(mfcc_buffer_input[i * NUM_MFCC + k] - mfcc_buffer_data[j * NUM_MFCC + k], 2);
    2ab4:	e0bff317 	ldw	r2,-52(fp)
    2ab8:	10c00364 	muli	r3,r2,13
    2abc:	e0bff517 	ldw	r2,-44(fp)
    2ac0:	1885883a 	add	r2,r3,r2
    2ac4:	100490ba 	slli	r2,r2,2
    2ac8:	e0ffee17 	ldw	r3,-72(fp)
    2acc:	1885883a 	add	r2,r3,r2
    2ad0:	10c00017 	ldw	r3,0(r2)
    2ad4:	e0bff417 	ldw	r2,-48(fp)
    2ad8:	11000364 	muli	r4,r2,13
    2adc:	e0bff517 	ldw	r2,-44(fp)
    2ae0:	2085883a 	add	r2,r4,r2
    2ae4:	100490ba 	slli	r2,r2,2
    2ae8:	e13fed17 	ldw	r4,-76(fp)
    2aec:	2089883a 	add	r4,r4,r2
    2af0:	20800017 	ldw	r2,0(r4)
    2af4:	1885ffb2 	custom	254,r2,r3,r2
    2af8:	1009883a 	mov	r4,r2
    2afc:	000cb280 	call	cb28 <__extendsfdf2>
    2b00:	1011883a 	mov	r8,r2
    2b04:	1813883a 	mov	r9,r3
    2b08:	000d883a 	mov	r6,zero
    2b0c:	01d00034 	movhi	r7,16384
    2b10:	4009883a 	mov	r4,r8
    2b14:	480b883a 	mov	r5,r9
    2b18:	0003fd00 	call	3fd0 <pow>
    2b1c:	1011883a 	mov	r8,r2
    2b20:	1813883a 	mov	r9,r3
    2b24:	800ad0ba 	srli	r5,r16,2
    2b28:	e0bff317 	ldw	r2,-52(fp)
    2b2c:	11000044 	addi	r4,r2,1
    2b30:	e0bff417 	ldw	r2,-48(fp)
    2b34:	10800044 	addi	r2,r2,1
    2b38:	e0ffef17 	ldw	r3,-68(fp)
    2b3c:	2909383a 	mul	r4,r5,r4
    2b40:	1085883a 	add	r2,r2,r2
    2b44:	1105883a 	add	r2,r2,r4
    2b48:	100490ba 	slli	r2,r2,2
    2b4c:	1889883a 	add	r4,r3,r2
    2b50:	20800017 	ldw	r2,0(r4)
    2b54:	20c00117 	ldw	r3,4(r4)
    2b58:	8026d0ba 	srli	r19,r16,2
    2b5c:	e13ff317 	ldw	r4,-52(fp)
    2b60:	24800044 	addi	r18,r4,1
    2b64:	e13ff417 	ldw	r4,-48(fp)
    2b68:	24400044 	addi	r17,r4,1
    2b6c:	100d883a 	mov	r6,r2
    2b70:	180f883a 	mov	r7,r3
    2b74:	4009883a 	mov	r4,r8
    2b78:	480b883a 	mov	r5,r9
    2b7c:	000a5fc0 	call	a5fc <__adddf3>
    2b80:	1009883a 	mov	r4,r2
    2b84:	180b883a 	mov	r5,r3
    2b88:	2005883a 	mov	r2,r4
    2b8c:	2807883a 	mov	r3,r5
    2b90:	e17fef17 	ldw	r5,-68(fp)
    2b94:	9c89383a 	mul	r4,r19,r18
    2b98:	8c4d883a 	add	r6,r17,r17
    2b9c:	3109883a 	add	r4,r6,r4
    2ba0:	200890ba 	slli	r4,r4,2
    2ba4:	2909883a 	add	r4,r5,r4
    2ba8:	20800015 	stw	r2,0(r4)
    2bac:	20c00115 	stw	r3,4(r4)
			for (k = 0; k < NUM_MFCC; k++) {
    2bb0:	e0bff517 	ldw	r2,-44(fp)
    2bb4:	10800044 	addi	r2,r2,1
    2bb8:	e0bff515 	stw	r2,-44(fp)
    2bbc:	e0bff517 	ldw	r2,-44(fp)
    2bc0:	10800350 	cmplti	r2,r2,13
    2bc4:	103fbb1e 	bne	r2,zero,2ab4 <compare_mfcc_buffers+0x240>
			}
			distances_frames[i + 1][j + 1] = sqrt(distances_frames[i + 1][j + 1]);
    2bc8:	800ad0ba 	srli	r5,r16,2
    2bcc:	e0bff317 	ldw	r2,-52(fp)
    2bd0:	11000044 	addi	r4,r2,1
    2bd4:	e0bff417 	ldw	r2,-48(fp)
    2bd8:	10800044 	addi	r2,r2,1
    2bdc:	e0ffef17 	ldw	r3,-68(fp)
    2be0:	2909383a 	mul	r4,r5,r4
    2be4:	1085883a 	add	r2,r2,r2
    2be8:	1105883a 	add	r2,r2,r4
    2bec:	100490ba 	slli	r2,r2,2
    2bf0:	1889883a 	add	r4,r3,r2
    2bf4:	20800017 	ldw	r2,0(r4)
    2bf8:	20c00117 	ldw	r3,4(r4)
    2bfc:	8026d0ba 	srli	r19,r16,2
    2c00:	e13ff317 	ldw	r4,-52(fp)
    2c04:	24800044 	addi	r18,r4,1
    2c08:	e13ff417 	ldw	r4,-48(fp)
    2c0c:	24400044 	addi	r17,r4,1
    2c10:	1009883a 	mov	r4,r2
    2c14:	180b883a 	mov	r5,r3
    2c18:	000428c0 	call	428c <sqrt>
    2c1c:	1009883a 	mov	r4,r2
    2c20:	180b883a 	mov	r5,r3
    2c24:	e0ffef17 	ldw	r3,-68(fp)
    2c28:	9c85383a 	mul	r2,r19,r18
    2c2c:	8c4d883a 	add	r6,r17,r17
    2c30:	3085883a 	add	r2,r6,r2
    2c34:	100490ba 	slli	r2,r2,2
    2c38:	1885883a 	add	r2,r3,r2
    2c3c:	11000015 	stw	r4,0(r2)
    2c40:	11400115 	stw	r5,4(r2)
		for (j = 1; j < num_frames_mfcc; j++) {
    2c44:	e0bff417 	ldw	r2,-48(fp)
    2c48:	10800044 	addi	r2,r2,1
    2c4c:	e0bff415 	stw	r2,-48(fp)
    2c50:	e0fff417 	ldw	r3,-48(fp)
    2c54:	e0bff217 	ldw	r2,-56(fp)
    2c58:	18bf8716 	blt	r3,r2,2a78 <compare_mfcc_buffers+0x204>
	for (i = 1; i < num_frames_mfcc; i++) {
    2c5c:	e0bff317 	ldw	r2,-52(fp)
    2c60:	10800044 	addi	r2,r2,1
    2c64:	e0bff315 	stw	r2,-52(fp)
    2c68:	e0fff317 	ldw	r3,-52(fp)
    2c6c:	e0bff217 	ldw	r2,-56(fp)
    2c70:	18bf7e16 	blt	r3,r2,2a6c <compare_mfcc_buffers+0x1f8>
		}
	}

	// Calculate the shortest distance between from one side to the other in the matrix.
	for (i = 1; i <= num_frames_mfcc; i++) {
    2c74:	00800044 	movi	r2,1
    2c78:	e0bff315 	stw	r2,-52(fp)
    2c7c:	00007b06 	br	2e6c <compare_mfcc_buffers+0x5f8>
		for (j = 1; j <= num_frames_mfcc; j++) {
    2c80:	00800044 	movi	r2,1
    2c84:	e0bff415 	stw	r2,-48(fp)
    2c88:	00007206 	br	2e54 <compare_mfcc_buffers+0x5e0>
			double shortest_distance = distances_frames[i - 1][j];
    2c8c:	800ad0ba 	srli	r5,r16,2
    2c90:	e0bff317 	ldw	r2,-52(fp)
    2c94:	113fffc4 	addi	r4,r2,-1
    2c98:	e0ffef17 	ldw	r3,-68(fp)
    2c9c:	e0bff417 	ldw	r2,-48(fp)
    2ca0:	2909383a 	mul	r4,r5,r4
    2ca4:	1085883a 	add	r2,r2,r2
    2ca8:	1105883a 	add	r2,r2,r4
    2cac:	100490ba 	slli	r2,r2,2
    2cb0:	1885883a 	add	r2,r3,r2
    2cb4:	10c00017 	ldw	r3,0(r2)
    2cb8:	e0fff615 	stw	r3,-40(fp)
    2cbc:	10800117 	ldw	r2,4(r2)
    2cc0:	e0bff715 	stw	r2,-36(fp)
			if (distances_frames[i - 1][j - 1] < shortest_distance) {
    2cc4:	800ad0ba 	srli	r5,r16,2
    2cc8:	e0bff317 	ldw	r2,-52(fp)
    2ccc:	113fffc4 	addi	r4,r2,-1
    2cd0:	e0bff417 	ldw	r2,-48(fp)
    2cd4:	10bfffc4 	addi	r2,r2,-1
    2cd8:	e0ffef17 	ldw	r3,-68(fp)
    2cdc:	2909383a 	mul	r4,r5,r4
    2ce0:	1085883a 	add	r2,r2,r2
    2ce4:	1105883a 	add	r2,r2,r4
    2ce8:	100490ba 	slli	r2,r2,2
    2cec:	1889883a 	add	r4,r3,r2
    2cf0:	20800017 	ldw	r2,0(r4)
    2cf4:	20c00117 	ldw	r3,4(r4)
    2cf8:	100d883a 	mov	r6,r2
    2cfc:	180f883a 	mov	r7,r3
    2d00:	e13ff617 	ldw	r4,-40(fp)
    2d04:	e17ff717 	ldw	r5,-36(fp)
    2d08:	000b7bc0 	call	b7bc <__gedf2>
    2d0c:	00800f0e 	bge	zero,r2,2d4c <compare_mfcc_buffers+0x4d8>
				shortest_distance = distances_frames[i - 1][j - 1];
    2d10:	800ad0ba 	srli	r5,r16,2
    2d14:	e0bff317 	ldw	r2,-52(fp)
    2d18:	113fffc4 	addi	r4,r2,-1
    2d1c:	e0bff417 	ldw	r2,-48(fp)
    2d20:	10bfffc4 	addi	r2,r2,-1
    2d24:	e0ffef17 	ldw	r3,-68(fp)
    2d28:	2909383a 	mul	r4,r5,r4
    2d2c:	1085883a 	add	r2,r2,r2
    2d30:	1105883a 	add	r2,r2,r4
    2d34:	100490ba 	slli	r2,r2,2
    2d38:	1885883a 	add	r2,r3,r2
    2d3c:	10c00017 	ldw	r3,0(r2)
    2d40:	e0fff615 	stw	r3,-40(fp)
    2d44:	10800117 	ldw	r2,4(r2)
    2d48:	e0bff715 	stw	r2,-36(fp)
			}
			if (distances_frames[i][j - 1] < shortest_distance) {
    2d4c:	800ad0ba 	srli	r5,r16,2
    2d50:	e0bff417 	ldw	r2,-48(fp)
    2d54:	10bfffc4 	addi	r2,r2,-1
    2d58:	e0ffef17 	ldw	r3,-68(fp)
    2d5c:	e13ff317 	ldw	r4,-52(fp)
    2d60:	2909383a 	mul	r4,r5,r4
    2d64:	1085883a 	add	r2,r2,r2
    2d68:	1105883a 	add	r2,r2,r4
    2d6c:	100490ba 	slli	r2,r2,2
    2d70:	1889883a 	add	r4,r3,r2
    2d74:	20800017 	ldw	r2,0(r4)
    2d78:	20c00117 	ldw	r3,4(r4)
    2d7c:	100d883a 	mov	r6,r2
    2d80:	180f883a 	mov	r7,r3
    2d84:	e13ff617 	ldw	r4,-40(fp)
    2d88:	e17ff717 	ldw	r5,-36(fp)
    2d8c:	000b7bc0 	call	b7bc <__gedf2>
    2d90:	00800e0e 	bge	zero,r2,2dcc <compare_mfcc_buffers+0x558>
				shortest_distance = distances_frames[i][j - 1];
    2d94:	800ad0ba 	srli	r5,r16,2
    2d98:	e0bff417 	ldw	r2,-48(fp)
    2d9c:	10bfffc4 	addi	r2,r2,-1
    2da0:	e0ffef17 	ldw	r3,-68(fp)
    2da4:	e13ff317 	ldw	r4,-52(fp)
    2da8:	2909383a 	mul	r4,r5,r4
    2dac:	1085883a 	add	r2,r2,r2
    2db0:	1105883a 	add	r2,r2,r4
    2db4:	100490ba 	slli	r2,r2,2
    2db8:	1885883a 	add	r2,r3,r2
    2dbc:	10c00017 	ldw	r3,0(r2)
    2dc0:	e0fff615 	stw	r3,-40(fp)
    2dc4:	10800117 	ldw	r2,4(r2)
    2dc8:	e0bff715 	stw	r2,-36(fp)
			}
			distances_frames[i][j] += shortest_distance;
    2dcc:	800ad0ba 	srli	r5,r16,2
    2dd0:	e0ffef17 	ldw	r3,-68(fp)
    2dd4:	e0bff417 	ldw	r2,-48(fp)
    2dd8:	e13ff317 	ldw	r4,-52(fp)
    2ddc:	2909383a 	mul	r4,r5,r4
    2de0:	1085883a 	add	r2,r2,r2
    2de4:	1105883a 	add	r2,r2,r4
    2de8:	100490ba 	slli	r2,r2,2
    2dec:	1889883a 	add	r4,r3,r2
    2df0:	20800017 	ldw	r2,0(r4)
    2df4:	20c00117 	ldw	r3,4(r4)
    2df8:	8022d0ba 	srli	r17,r16,2
    2dfc:	e1bff617 	ldw	r6,-40(fp)
    2e00:	e1fff717 	ldw	r7,-36(fp)
    2e04:	1009883a 	mov	r4,r2
    2e08:	180b883a 	mov	r5,r3
    2e0c:	000a5fc0 	call	a5fc <__adddf3>
    2e10:	1009883a 	mov	r4,r2
    2e14:	180b883a 	mov	r5,r3
    2e18:	2005883a 	mov	r2,r4
    2e1c:	2807883a 	mov	r3,r5
    2e20:	e17fef17 	ldw	r5,-68(fp)
    2e24:	e13ff417 	ldw	r4,-48(fp)
    2e28:	e1bff317 	ldw	r6,-52(fp)
    2e2c:	898d383a 	mul	r6,r17,r6
    2e30:	2109883a 	add	r4,r4,r4
    2e34:	2189883a 	add	r4,r4,r6
    2e38:	200890ba 	slli	r4,r4,2
    2e3c:	2909883a 	add	r4,r5,r4
    2e40:	20800015 	stw	r2,0(r4)
    2e44:	20c00115 	stw	r3,4(r4)
		for (j = 1; j <= num_frames_mfcc; j++) {
    2e48:	e0bff417 	ldw	r2,-48(fp)
    2e4c:	10800044 	addi	r2,r2,1
    2e50:	e0bff415 	stw	r2,-48(fp)
    2e54:	e0bff417 	ldw	r2,-48(fp)
    2e58:	e0fff217 	ldw	r3,-56(fp)
    2e5c:	18bf8b0e 	bge	r3,r2,2c8c <compare_mfcc_buffers+0x418>
	for (i = 1; i <= num_frames_mfcc; i++) {
    2e60:	e0bff317 	ldw	r2,-52(fp)
    2e64:	10800044 	addi	r2,r2,1
    2e68:	e0bff315 	stw	r2,-52(fp)
    2e6c:	e0bff317 	ldw	r2,-52(fp)
    2e70:	e0fff217 	ldw	r3,-56(fp)
    2e74:	18bf820e 	bge	r3,r2,2c80 <compare_mfcc_buffers+0x40c>
		}
	}

	return distances_frames[num_frames_mfcc-1][num_frames_mfcc-1];
    2e78:	800ad0ba 	srli	r5,r16,2
    2e7c:	e0bff217 	ldw	r2,-56(fp)
    2e80:	113fffc4 	addi	r4,r2,-1
    2e84:	e0bff217 	ldw	r2,-56(fp)
    2e88:	10bfffc4 	addi	r2,r2,-1
    2e8c:	e0ffef17 	ldw	r3,-68(fp)
    2e90:	2909383a 	mul	r4,r5,r4
    2e94:	1085883a 	add	r2,r2,r2
    2e98:	1105883a 	add	r2,r2,r4
    2e9c:	100490ba 	slli	r2,r2,2
    2ea0:	1889883a 	add	r4,r3,r2
    2ea4:	20800017 	ldw	r2,0(r4)
    2ea8:	20c00117 	ldw	r3,4(r4)
    2eac:	e6ffec17 	ldw	sp,-80(fp)
    2eb0:	1009883a 	mov	r4,r2
    2eb4:	180b883a 	mov	r5,r3
}
    2eb8:	2005883a 	mov	r2,r4
    2ebc:	2807883a 	mov	r3,r5
    2ec0:	e6fff804 	addi	sp,fp,-32
    2ec4:	dfc00917 	ldw	ra,36(sp)
    2ec8:	df000817 	ldw	fp,32(sp)
    2ecc:	ddc00717 	ldw	r23,28(sp)
    2ed0:	dd800617 	ldw	r22,24(sp)
    2ed4:	dd400517 	ldw	r21,20(sp)
    2ed8:	dd000417 	ldw	r20,16(sp)
    2edc:	dcc00317 	ldw	r19,12(sp)
    2ee0:	dc800217 	ldw	r18,8(sp)
    2ee4:	dc400117 	ldw	r17,4(sp)
    2ee8:	dc000017 	ldw	r16,0(sp)
    2eec:	dec00a04 	addi	sp,sp,40
    2ef0:	f800283a 	ret

00002ef4 <clearLCD>:

// This function clears both rows of the lcd.
void clearLCD() {
    2ef4:	defffd04 	addi	sp,sp,-12
    2ef8:	dfc00215 	stw	ra,8(sp)
    2efc:	df000115 	stw	fp,4(sp)
    2f00:	df000104 	addi	fp,sp,4
	for (int i = 0; i < 16; i++) {
    2f04:	e03fff15 	stw	zero,-4(fp)
    2f08:	00000f06 	br	2f48 <clearLCD+0x54>
		alt_up_character_lcd_erase_pos(char_lcd_dev, i, 0);
    2f0c:	d0a73f17 	ldw	r2,-25348(gp)
    2f10:	e0ffff17 	ldw	r3,-4(fp)
    2f14:	000d883a 	mov	r6,zero
    2f18:	180b883a 	mov	r5,r3
    2f1c:	1009883a 	mov	r4,r2
    2f20:	001fa040 	call	1fa04 <alt_up_character_lcd_erase_pos>
		alt_up_character_lcd_erase_pos(char_lcd_dev, i, 1);
    2f24:	d0a73f17 	ldw	r2,-25348(gp)
    2f28:	e0ffff17 	ldw	r3,-4(fp)
    2f2c:	01800044 	movi	r6,1
    2f30:	180b883a 	mov	r5,r3
    2f34:	1009883a 	mov	r4,r2
    2f38:	001fa040 	call	1fa04 <alt_up_character_lcd_erase_pos>
	for (int i = 0; i < 16; i++) {
    2f3c:	e0bfff17 	ldw	r2,-4(fp)
    2f40:	10800044 	addi	r2,r2,1
    2f44:	e0bfff15 	stw	r2,-4(fp)
    2f48:	e0bfff17 	ldw	r2,-4(fp)
    2f4c:	10800410 	cmplti	r2,r2,16
    2f50:	103fee1e 	bne	r2,zero,2f0c <clearLCD+0x18>
	}
}
    2f54:	0001883a 	nop
    2f58:	0001883a 	nop
    2f5c:	e037883a 	mov	sp,fp
    2f60:	dfc00117 	ldw	ra,4(sp)
    2f64:	df000017 	ldw	fp,0(sp)
    2f68:	dec00204 	addi	sp,sp,8
    2f6c:	f800283a 	ret

00002f70 <writeToLCD>:

// This function clears the lcd display and then places the first_row string on the first row and the second_row string on the second row. Max characters per row is 16.
void writeToLCD(char* first_row, char* second_row) {
    2f70:	defffc04 	addi	sp,sp,-16
    2f74:	dfc00315 	stw	ra,12(sp)
    2f78:	df000215 	stw	fp,8(sp)
    2f7c:	df000204 	addi	fp,sp,8
    2f80:	e13fff15 	stw	r4,-4(fp)
    2f84:	e17ffe15 	stw	r5,-8(fp)
	clearLCD();
    2f88:	0002ef40 	call	2ef4 <clearLCD>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
    2f8c:	d0a73f17 	ldw	r2,-25348(gp)
    2f90:	000d883a 	mov	r6,zero
    2f94:	000b883a 	mov	r5,zero
    2f98:	1009883a 	mov	r4,r2
    2f9c:	001f8780 	call	1f878 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, first_row);
    2fa0:	d0a73f17 	ldw	r2,-25348(gp)
    2fa4:	e17fff17 	ldw	r5,-4(fp)
    2fa8:	1009883a 	mov	r4,r2
    2fac:	001f7ac0 	call	1f7ac <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 1);
    2fb0:	d0a73f17 	ldw	r2,-25348(gp)
    2fb4:	01800044 	movi	r6,1
    2fb8:	000b883a 	mov	r5,zero
    2fbc:	1009883a 	mov	r4,r2
    2fc0:	001f8780 	call	1f878 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string(char_lcd_dev, second_row);
    2fc4:	d0a73f17 	ldw	r2,-25348(gp)
    2fc8:	e17ffe17 	ldw	r5,-8(fp)
    2fcc:	1009883a 	mov	r4,r2
    2fd0:	001f7ac0 	call	1f7ac <alt_up_character_lcd_string>
}
    2fd4:	0001883a 	nop
    2fd8:	e037883a 	mov	sp,fp
    2fdc:	dfc00117 	ldw	ra,4(sp)
    2fe0:	df000017 	ldw	fp,0(sp)
    2fe4:	dec00204 	addi	sp,sp,8
    2fe8:	f800283a 	ret

00002fec <checkIfSDCardIsPresent>:

void checkIfSDCardIsPresent() {
    2fec:	defffe04 	addi	sp,sp,-8
    2ff0:	dfc00115 	stw	ra,4(sp)
    2ff4:	df000015 	stw	fp,0(sp)
    2ff8:	d839883a 	mov	fp,sp
	// Check if the alt_up_sd_card_dev is instantiated. Else print error with sd card to the console.
	if (sd_card_dev != NULL) {
    2ffc:	d0a74017 	ldw	r2,-25344(gp)
    3000:	10001d26 	beq	r2,zero,3078 <checkIfSDCardIsPresent+0x8c>
		// If there is an sd card connected, set the connected variable to 1 and print SD Card detected to the console. If connected is 1 and there is no sd card, print sd card is disconnected and set connected to 0.
		if (connected == 0 && alt_up_sd_card_is_Present()) {
    3004:	d0a74117 	ldw	r2,-25340(gp)
    3008:	1000111e 	bne	r2,zero,3050 <checkIfSDCardIsPresent+0x64>
    300c:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
    3010:	10000f26 	beq	r2,zero,3050 <checkIfSDCardIsPresent+0x64>
			printf("SD Card detected\n");
    3014:	010000b4 	movhi	r4,2
    3018:	21043804 	addi	r4,r4,4320
    301c:	000d8480 	call	d848 <puts>
			// If the SD card is formatted to FAT16, print that a FAT16 file system is detected. Else print an unknown system detected.
			if (alt_up_sd_card_is_FAT16()) {
    3020:	001d8d40 	call	1d8d4 <alt_up_sd_card_is_FAT16>
    3024:	10000426 	beq	r2,zero,3038 <checkIfSDCardIsPresent+0x4c>
				printf("FAT16 file system detected\n");
    3028:	010000b4 	movhi	r4,2
    302c:	21043d04 	addi	r4,r4,4340
    3030:	000d8480 	call	d848 <puts>
    3034:	00000306 	br	3044 <checkIfSDCardIsPresent+0x58>
			}
			else {
				printf("unknown file system detected\n");
    3038:	010000b4 	movhi	r4,2
    303c:	21044404 	addi	r4,r4,4368
    3040:	000d8480 	call	d848 <puts>
			}
			connected = 1;
    3044:	00800044 	movi	r2,1
    3048:	d0a74115 	stw	r2,-25340(gp)
		}
	}
	else {
		printf("error with sd card.");
	}
}
    304c:	00000d06 	br	3084 <checkIfSDCardIsPresent+0x98>
		else if (connected == 1 && alt_up_sd_card_is_Present() == false) {
    3050:	d0a74117 	ldw	r2,-25340(gp)
    3054:	10800058 	cmpnei	r2,r2,1
    3058:	10000a1e 	bne	r2,zero,3084 <checkIfSDCardIsPresent+0x98>
    305c:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
    3060:	1000081e 	bne	r2,zero,3084 <checkIfSDCardIsPresent+0x98>
			printf("SD Card is disconnected.\n");
    3064:	010000b4 	movhi	r4,2
    3068:	21044c04 	addi	r4,r4,4400
    306c:	000d8480 	call	d848 <puts>
			connected = 0;
    3070:	d0274115 	stw	zero,-25340(gp)
}
    3074:	00000306 	br	3084 <checkIfSDCardIsPresent+0x98>
		printf("error with sd card.");
    3078:	010000b4 	movhi	r4,2
    307c:	21045304 	addi	r4,r4,4428
    3080:	000d7240 	call	d724 <printf>
}
    3084:	0001883a 	nop
    3088:	e037883a 	mov	sp,fp
    308c:	dfc00117 	ldw	ra,4(sp)
    3090:	df000017 	ldw	fp,0(sp)
    3094:	dec00204 	addi	sp,sp,8
    3098:	f800283a 	ret

0000309c <get_values_from_sd_card_file>:

/* This code reads the speified file from the sd card, places all of the characters in a character buffer, separates the entire string on commas and places each value that is separated by comma in a buffer.
 * strtok documentation: https://www.tutorialspoint.com/c_standard_library/c_function_strtok.htm
 */
bool get_values_from_sd_card_file(char* filename, float *output) {
    309c:	defbf604 	addi	sp,sp,-4136
    30a0:	dfc40915 	stw	ra,4132(sp)
    30a4:	df040815 	stw	fp,4128(sp)
    30a8:	dc040715 	stw	r16,4124(sp)
    30ac:	df040804 	addi	fp,sp,4128
    30b0:	e13bf915 	stw	r4,-4124(fp)
    30b4:	e17bf815 	stw	r5,-4128(fp)
    short int file = alt_up_sd_card_fopen(filename, false);
    30b8:	000b883a 	mov	r5,zero
    30bc:	e13bf917 	ldw	r4,-4124(fp)
    30c0:	001dd640 	call	1dd64 <alt_up_sd_card_fopen>
    30c4:	e0bffb8d 	sth	r2,-18(fp)
    if (file == -1) {
    30c8:	e0bffb8f 	ldh	r2,-18(fp)
    30cc:	10bfffd8 	cmpnei	r2,r2,-1
    30d0:	1000061e 	bne	r2,zero,30ec <get_values_from_sd_card_file+0x50>
        printf("Could not open %s\n", filename);
    30d4:	e17bf917 	ldw	r5,-4124(fp)
    30d8:	010000b4 	movhi	r4,2
    30dc:	21045804 	addi	r4,r4,4448
    30e0:	000d7240 	call	d724 <printf>
        return false;
    30e4:	0005883a 	mov	r2,zero
    30e8:	00004006 	br	31ec <get_values_from_sd_card_file+0x150>
    }

    char buffer[4096];
    int i = 0;
    30ec:	e03ffe15 	stw	zero,-8(fp)
    int byte;

    // Read the txt file and place the characters in a buffer.
    while ((byte = alt_up_sd_card_read(file)) >= 0) {
    30f0:	00001306 	br	3140 <get_values_from_sd_card_file+0xa4>
        if (i < 4096 - 1) {
    30f4:	e0bffe17 	ldw	r2,-8(fp)
    30f8:	1083ffc8 	cmpgei	r2,r2,4095
    30fc:	1000081e 	bne	r2,zero,3120 <get_values_from_sd_card_file+0x84>
            buffer[i++] = (char) byte;
    3100:	e0bffe17 	ldw	r2,-8(fp)
    3104:	10c00044 	addi	r3,r2,1
    3108:	e0fffe15 	stw	r3,-8(fp)
    310c:	e0fffa17 	ldw	r3,-24(fp)
    3110:	10bfff04 	addi	r2,r2,-4
    3114:	1705883a 	add	r2,r2,fp
    3118:	10fbfb05 	stb	r3,-4116(r2)
    311c:	00000806 	br	3140 <get_values_from_sd_card_file+0xa4>
        } else {
            printf("Buffer overflow.\n");
    3120:	010000b4 	movhi	r4,2
    3124:	21045d04 	addi	r4,r4,4468
    3128:	000d8480 	call	d848 <puts>
            alt_up_sd_card_fclose(file);
    312c:	e0bffb8f 	ldh	r2,-18(fp)
    3130:	1009883a 	mov	r4,r2
    3134:	001e9240 	call	1e924 <alt_up_sd_card_fclose>
            return false;
    3138:	0005883a 	mov	r2,zero
    313c:	00002b06 	br	31ec <get_values_from_sd_card_file+0x150>
    while ((byte = alt_up_sd_card_read(file)) >= 0) {
    3140:	e0bffb8f 	ldh	r2,-18(fp)
    3144:	1009883a 	mov	r4,r2
    3148:	001e1540 	call	1e154 <alt_up_sd_card_read>
    314c:	10bfffcc 	andi	r2,r2,65535
    3150:	10a0001c 	xori	r2,r2,32768
    3154:	10a00004 	addi	r2,r2,-32768
    3158:	e0bffa15 	stw	r2,-24(fp)
    315c:	e0bffa17 	ldw	r2,-24(fp)
    3160:	103fe40e 	bge	r2,zero,30f4 <get_values_from_sd_card_file+0x58>
        }
    }

    // Null terminate the buffer.
    buffer[i] = '\0';
    3164:	e0bffe17 	ldw	r2,-8(fp)
    3168:	10bfff04 	addi	r2,r2,-4
    316c:	1705883a 	add	r2,r2,fp
    3170:	103bfb05 	stb	zero,-4116(r2)

    // Close the file as it is no longer needed.
    alt_up_sd_card_fclose(file);
    3174:	e0bffb8f 	ldh	r2,-18(fp)
    3178:	1009883a 	mov	r4,r2
    317c:	001e9240 	call	1e924 <alt_up_sd_card_fclose>

    // split the string on the comma, convert the values to float and place them in the output array.
    int output_index = 0;
    3180:	e03ffd15 	stw	zero,-12(fp)
    char *token = strtok(buffer, ",");
    3184:	e0bbfa04 	addi	r2,fp,-4120
    3188:	014000b4 	movhi	r5,2
    318c:	29446204 	addi	r5,r5,4488
    3190:	1009883a 	mov	r4,r2
    3194:	000f1b00 	call	f1b0 <strtok>
    3198:	e0bffc15 	stw	r2,-16(fp)
    while (token != NULL) {
    319c:	00001006 	br	31e0 <get_values_from_sd_card_file+0x144>
        output[output_index++] = strtof(token, NULL);
    31a0:	e0bffd17 	ldw	r2,-12(fp)
    31a4:	10c00044 	addi	r3,r2,1
    31a8:	e0fffd15 	stw	r3,-12(fp)
    31ac:	100490ba 	slli	r2,r2,2
    31b0:	e0fbf817 	ldw	r3,-4128(fp)
    31b4:	18a1883a 	add	r16,r3,r2
    31b8:	000b883a 	mov	r5,zero
    31bc:	e13ffc17 	ldw	r4,-16(fp)
    31c0:	000f08c0 	call	f08c <strtof>
    31c4:	1007883a 	mov	r3,r2
    31c8:	80c00015 	stw	r3,0(r16)
        token = strtok(NULL, ",");
    31cc:	014000b4 	movhi	r5,2
    31d0:	29446204 	addi	r5,r5,4488
    31d4:	0009883a 	mov	r4,zero
    31d8:	000f1b00 	call	f1b0 <strtok>
    31dc:	e0bffc15 	stw	r2,-16(fp)
    while (token != NULL) {
    31e0:	e0bffc17 	ldw	r2,-16(fp)
    31e4:	103fee1e 	bne	r2,zero,31a0 <get_values_from_sd_card_file+0x104>
    }

    return true;
    31e8:	00800044 	movi	r2,1
}
    31ec:	e6ffff04 	addi	sp,fp,-4
    31f0:	dfc00217 	ldw	ra,8(sp)
    31f4:	df000117 	ldw	fp,4(sp)
    31f8:	dc000017 	ldw	r16,0(sp)
    31fc:	dec00304 	addi	sp,sp,12
    3200:	f800283a 	ret

00003204 <list_files_on_sd_card>:

void list_files_on_sd_card() {
    3204:	defffa04 	addi	sp,sp,-24
    3208:	dfc00515 	stw	ra,20(sp)
    320c:	df000415 	stw	fp,16(sp)
    3210:	df000404 	addi	fp,sp,16
    char filename[13];  // 8.3 filename format + null terminator

    // List all files in the root directory
    printf("Files on the SD card:\n");
    3214:	010000b4 	movhi	r4,2
    3218:	21046304 	addi	r4,r4,4492
    321c:	000d8480 	call	d848 <puts>
    if (alt_up_sd_card_find_first("/dev/SD_Card", filename) == 0) {
    3220:	e0bffcc4 	addi	r2,fp,-13
    3224:	100b883a 	mov	r5,r2
    3228:	010000b4 	movhi	r4,2
    322c:	2103ca04 	addi	r4,r4,3880
    3230:	001d93c0 	call	1d93c <alt_up_sd_card_find_first>
    3234:	10bfffcc 	andi	r2,r2,65535
    3238:	10a0001c 	xori	r2,r2,32768
    323c:	10a00004 	addi	r2,r2,-32768
    3240:	10000b1e 	bne	r2,zero,3270 <list_files_on_sd_card+0x6c>
        do {
            printf("%s\n", filename);
    3244:	e0bffcc4 	addi	r2,fp,-13
    3248:	1009883a 	mov	r4,r2
    324c:	000d8480 	call	d848 <puts>
        } while (alt_up_sd_card_find_next(filename) == 0);
    3250:	e0bffcc4 	addi	r2,fp,-13
    3254:	1009883a 	mov	r4,r2
    3258:	001d9f80 	call	1d9f8 <alt_up_sd_card_find_next>
    325c:	10bfffcc 	andi	r2,r2,65535
    3260:	10a0001c 	xori	r2,r2,32768
    3264:	10a00004 	addi	r2,r2,-32768
    3268:	103ff626 	beq	r2,zero,3244 <list_files_on_sd_card+0x40>
    } else {
        printf("No files found on the SD card.\n");
    }
}
    326c:	00000306 	br	327c <list_files_on_sd_card+0x78>
        printf("No files found on the SD card.\n");
    3270:	010000b4 	movhi	r4,2
    3274:	21046904 	addi	r4,r4,4516
    3278:	000d8480 	call	d848 <puts>
}
    327c:	0001883a 	nop
    3280:	e037883a 	mov	sp,fp
    3284:	dfc00117 	ldw	ra,4(sp)
    3288:	df000017 	ldw	fp,0(sp)
    328c:	dec00204 	addi	sp,sp,8
    3290:	f800283a 	ret

00003294 <GetCoefficient>:
 * binSize - the size of the spectralData array, usually a power of 2
 * m - The mth MFCC coefficient to compute
 *
 */
double GetCoefficient(double* spectralData, unsigned int samplingRate, unsigned int NumFilters, unsigned int binSize, unsigned int m)
{
    3294:	deffee04 	addi	sp,sp,-72
    3298:	dfc01115 	stw	ra,68(sp)
    329c:	df001015 	stw	fp,64(sp)
    32a0:	dcc00f15 	stw	r19,60(sp)
    32a4:	dc800e15 	stw	r18,56(sp)
    32a8:	dc400d15 	stw	r17,52(sp)
    32ac:	dc000c15 	stw	r16,48(sp)
    32b0:	df001004 	addi	fp,sp,64
    32b4:	e13ff315 	stw	r4,-52(fp)
    32b8:	e17ff215 	stw	r5,-56(fp)
    32bc:	e1bff115 	stw	r6,-60(fp)
    32c0:	e1fff015 	stw	r7,-64(fp)
	double result = 0.0f;
    32c4:	e03ff415 	stw	zero,-48(fp)
    32c8:	e03ff515 	stw	zero,-44(fp)
	double outerSum = 0.0f;
    32cc:	e03ffa15 	stw	zero,-24(fp)
    32d0:	e03ffb15 	stw	zero,-20(fp)
	double innerSum = 0.0f;
    32d4:	e03ff815 	stw	zero,-32(fp)
    32d8:	e03ff915 	stw	zero,-28(fp)
	unsigned int k, l;

	// 0 <= m < L
	if(m >= NumFilters)
    32dc:	e0c00217 	ldw	r3,8(fp)
    32e0:	e0bff117 	ldw	r2,-60(fp)
    32e4:	18800336 	bltu	r3,r2,32f4 <GetCoefficient+0x60>
	{
		// This represents an error condition - the specified coefficient is greater than or equal to the number of filters. The behavior in this case is undefined.
		return 0.0f;
    32e8:	0005883a 	mov	r2,zero
    32ec:	0007883a 	mov	r3,zero
    32f0:	00007f06 	br	34f0 <GetCoefficient+0x25c>
	}

	result = NormalizationFactor(NumFilters, m);
    32f4:	e0bff117 	ldw	r2,-60(fp)
    32f8:	e0c00217 	ldw	r3,8(fp)
    32fc:	180b883a 	mov	r5,r3
    3300:	1009883a 	mov	r4,r2
    3304:	00035240 	call	3524 <NormalizationFactor>
    3308:	e0bff415 	stw	r2,-48(fp)
    330c:	e0fff515 	stw	r3,-44(fp)

	for(l = 1; l <= NumFilters; l++)
    3310:	00800044 	movi	r2,1
    3314:	e0bff615 	stw	r2,-40(fp)
    3318:	00006706 	br	34b8 <GetCoefficient+0x224>
	{
		// Compute inner sum
		innerSum = 0.0f;
    331c:	e03ff815 	stw	zero,-32(fp)
    3320:	e03ff915 	stw	zero,-28(fp)
		for(k = 0; k < binSize - 1; k++)
    3324:	e03ff715 	stw	zero,-36(fp)
    3328:	00002606 	br	33c4 <GetCoefficient+0x130>
		{
			innerSum += fabs(spectralData[k] * GetFilterParameter(samplingRate, binSize, k, l));
    332c:	e0bff717 	ldw	r2,-36(fp)
    3330:	100490fa 	slli	r2,r2,3
    3334:	e0fff317 	ldw	r3,-52(fp)
    3338:	1885883a 	add	r2,r3,r2
    333c:	14000017 	ldw	r16,0(r2)
    3340:	14400117 	ldw	r17,4(r2)
    3344:	e1fff617 	ldw	r7,-40(fp)
    3348:	e1bff717 	ldw	r6,-36(fp)
    334c:	e17ff017 	ldw	r5,-64(fp)
    3350:	e13ff217 	ldw	r4,-56(fp)
    3354:	00035ec0 	call	35ec <GetFilterParameter>
    3358:	1009883a 	mov	r4,r2
    335c:	180b883a 	mov	r5,r3
    3360:	200d883a 	mov	r6,r4
    3364:	280f883a 	mov	r7,r5
    3368:	8009883a 	mov	r4,r16
    336c:	880b883a 	mov	r5,r17
    3370:	000b98c0 	call	b98c <__muldf3>
    3374:	100d883a 	mov	r6,r2
    3378:	180f883a 	mov	r7,r3
    337c:	3009883a 	mov	r4,r6
    3380:	380b883a 	mov	r5,r7
    3384:	2025883a 	mov	r18,r4
    3388:	00a00034 	movhi	r2,32768
    338c:	10bfffc4 	addi	r2,r2,-1
    3390:	28a6703a 	and	r19,r5,r2
    3394:	900d883a 	mov	r6,r18
    3398:	980f883a 	mov	r7,r19
    339c:	e13ff817 	ldw	r4,-32(fp)
    33a0:	e17ff917 	ldw	r5,-28(fp)
    33a4:	000a5fc0 	call	a5fc <__adddf3>
    33a8:	1009883a 	mov	r4,r2
    33ac:	180b883a 	mov	r5,r3
    33b0:	e13ff815 	stw	r4,-32(fp)
    33b4:	e17ff915 	stw	r5,-28(fp)
		for(k = 0; k < binSize - 1; k++)
    33b8:	e0bff717 	ldw	r2,-36(fp)
    33bc:	10800044 	addi	r2,r2,1
    33c0:	e0bff715 	stw	r2,-36(fp)
    33c4:	e0bff017 	ldw	r2,-64(fp)
    33c8:	10bfffc4 	addi	r2,r2,-1
    33cc:	e0fff717 	ldw	r3,-36(fp)
    33d0:	18bfd636 	bltu	r3,r2,332c <GetCoefficient+0x98>
		}

		if(innerSum > 0.0f)
    33d4:	000d883a 	mov	r6,zero
    33d8:	000f883a 	mov	r7,zero
    33dc:	e13ff817 	ldw	r4,-32(fp)
    33e0:	e17ff917 	ldw	r5,-28(fp)
    33e4:	000b7bc0 	call	b7bc <__gedf2>
    33e8:	0080050e 	bge	zero,r2,3400 <GetCoefficient+0x16c>
		{
			innerSum = log(innerSum); // The log of 0 is undefined, so don't use it
    33ec:	e13ff817 	ldw	r4,-32(fp)
    33f0:	e17ff917 	ldw	r5,-28(fp)
    33f4:	0003f0c0 	call	3f0c <log>
    33f8:	e0bff815 	stw	r2,-32(fp)
    33fc:	e0fff915 	stw	r3,-28(fp)
		}

		innerSum = innerSum * cos(((m * PI) / NumFilters) * (l - 0.5f));
    3400:	e1000217 	ldw	r4,8(fp)
    3404:	000a5000 	call	a500 <__floatunsisf>
    3408:	1007883a 	mov	r3,r2
    340c:	00901274 	movhi	r2,16457
    3410:	1083f6c4 	addi	r2,r2,4059
    3414:	18a1ff32 	custom	252,r16,r3,r2
    3418:	e13ff117 	ldw	r4,-60(fp)
    341c:	000a5000 	call	a500 <__floatunsisf>
    3420:	1007883a 	mov	r3,r2
    3424:	80e1fff2 	custom	255,r16,r16,r3
    3428:	e13ff617 	ldw	r4,-40(fp)
    342c:	000a5000 	call	a500 <__floatunsisf>
    3430:	1007883a 	mov	r3,r2
    3434:	008fc034 	movhi	r2,16128
    3438:	1885ffb2 	custom	254,r2,r3,r2
    343c:	8085ff32 	custom	252,r2,r16,r2
    3440:	1009883a 	mov	r4,r2
    3444:	000cb280 	call	cb28 <__extendsfdf2>
    3448:	100d883a 	mov	r6,r2
    344c:	180f883a 	mov	r7,r3
    3450:	3009883a 	mov	r4,r6
    3454:	380b883a 	mov	r5,r7
    3458:	0003b180 	call	3b18 <cos>
    345c:	1009883a 	mov	r4,r2
    3460:	180b883a 	mov	r5,r3
    3464:	200d883a 	mov	r6,r4
    3468:	280f883a 	mov	r7,r5
    346c:	e13ff817 	ldw	r4,-32(fp)
    3470:	e17ff917 	ldw	r5,-28(fp)
    3474:	000b98c0 	call	b98c <__muldf3>
    3478:	1009883a 	mov	r4,r2
    347c:	180b883a 	mov	r5,r3
    3480:	e13ff815 	stw	r4,-32(fp)
    3484:	e17ff915 	stw	r5,-28(fp)


		outerSum += innerSum;
    3488:	e1bff817 	ldw	r6,-32(fp)
    348c:	e1fff917 	ldw	r7,-28(fp)
    3490:	e13ffa17 	ldw	r4,-24(fp)
    3494:	e17ffb17 	ldw	r5,-20(fp)
    3498:	000a5fc0 	call	a5fc <__adddf3>
    349c:	1009883a 	mov	r4,r2
    34a0:	180b883a 	mov	r5,r3
    34a4:	e13ffa15 	stw	r4,-24(fp)
    34a8:	e17ffb15 	stw	r5,-20(fp)
	for(l = 1; l <= NumFilters; l++)
    34ac:	e0bff617 	ldw	r2,-40(fp)
    34b0:	10800044 	addi	r2,r2,1
    34b4:	e0bff615 	stw	r2,-40(fp)
    34b8:	e0bff617 	ldw	r2,-40(fp)
    34bc:	e0fff117 	ldw	r3,-60(fp)
    34c0:	18bf962e 	bgeu	r3,r2,331c <GetCoefficient+0x88>
	}

	result *= outerSum;
    34c4:	e1bffa17 	ldw	r6,-24(fp)
    34c8:	e1fffb17 	ldw	r7,-20(fp)
    34cc:	e13ff417 	ldw	r4,-48(fp)
    34d0:	e17ff517 	ldw	r5,-44(fp)
    34d4:	000b98c0 	call	b98c <__muldf3>
    34d8:	1009883a 	mov	r4,r2
    34dc:	180b883a 	mov	r5,r3
    34e0:	e13ff415 	stw	r4,-48(fp)
    34e4:	e17ff515 	stw	r5,-44(fp)

	return result;
    34e8:	e0bff417 	ldw	r2,-48(fp)
    34ec:	e0fff517 	ldw	r3,-44(fp)
}
    34f0:	1009883a 	mov	r4,r2
    34f4:	180b883a 	mov	r5,r3
    34f8:	2005883a 	mov	r2,r4
    34fc:	2807883a 	mov	r3,r5
    3500:	e6fffc04 	addi	sp,fp,-16
    3504:	dfc00517 	ldw	ra,20(sp)
    3508:	df000417 	ldw	fp,16(sp)
    350c:	dcc00317 	ldw	r19,12(sp)
    3510:	dc800217 	ldw	r18,8(sp)
    3514:	dc400117 	ldw	r17,4(sp)
    3518:	dc000017 	ldw	r16,0(sp)
    351c:	dec00604 	addi	sp,sp,24
    3520:	f800283a 	ret

00003524 <NormalizationFactor>:
/*
 * Computes the Normalization Factor (Equation 6)
 * Used for internal computation only - not to be called directly
 */
double NormalizationFactor(int NumFilters, int m)
{
    3524:	defffa04 	addi	sp,sp,-24
    3528:	dfc00515 	stw	ra,20(sp)
    352c:	df000415 	stw	fp,16(sp)
    3530:	df000404 	addi	fp,sp,16
    3534:	e13ffd15 	stw	r4,-12(fp)
    3538:	e17ffc15 	stw	r5,-16(fp)
	double normalizationFactor = 0.0f;
    353c:	e03ffe15 	stw	zero,-8(fp)
    3540:	e03fff15 	stw	zero,-4(fp)

	if(m == 0)
    3544:	e0bffc17 	ldw	r2,-16(fp)
    3548:	10000f1e 	bne	r2,zero,3588 <NormalizationFactor+0x64>
	{
		normalizationFactor = sqrt(1.0f / NumFilters);
    354c:	e13ffd17 	ldw	r4,-12(fp)
    3550:	000a3dc0 	call	a3dc <__floatsisf>
    3554:	1007883a 	mov	r3,r2
    3558:	008fe034 	movhi	r2,16256
    355c:	10c5fff2 	custom	255,r2,r2,r3
    3560:	1009883a 	mov	r4,r2
    3564:	000cb280 	call	cb28 <__extendsfdf2>
    3568:	100d883a 	mov	r6,r2
    356c:	180f883a 	mov	r7,r3
    3570:	3009883a 	mov	r4,r6
    3574:	380b883a 	mov	r5,r7
    3578:	000428c0 	call	428c <sqrt>
    357c:	e0bffe15 	stw	r2,-8(fp)
    3580:	e0ffff15 	stw	r3,-4(fp)
    3584:	00000e06 	br	35c0 <NormalizationFactor+0x9c>
	}
	else
	{
		normalizationFactor = sqrt(2.0f / NumFilters);
    3588:	e13ffd17 	ldw	r4,-12(fp)
    358c:	000a3dc0 	call	a3dc <__floatsisf>
    3590:	1007883a 	mov	r3,r2
    3594:	00900034 	movhi	r2,16384
    3598:	10c5fff2 	custom	255,r2,r2,r3
    359c:	1009883a 	mov	r4,r2
    35a0:	000cb280 	call	cb28 <__extendsfdf2>
    35a4:	100d883a 	mov	r6,r2
    35a8:	180f883a 	mov	r7,r3
    35ac:	3009883a 	mov	r4,r6
    35b0:	380b883a 	mov	r5,r7
    35b4:	000428c0 	call	428c <sqrt>
    35b8:	e0bffe15 	stw	r2,-8(fp)
    35bc:	e0ffff15 	stw	r3,-4(fp)
	}

	return normalizationFactor;
    35c0:	e0bffe17 	ldw	r2,-8(fp)
    35c4:	e0ffff17 	ldw	r3,-4(fp)
    35c8:	1009883a 	mov	r4,r2
    35cc:	180b883a 	mov	r5,r3
}
    35d0:	2005883a 	mov	r2,r4
    35d4:	2807883a 	mov	r3,r5
    35d8:	e037883a 	mov	sp,fp
    35dc:	dfc00117 	ldw	ra,4(sp)
    35e0:	df000017 	ldw	fp,0(sp)
    35e4:	dec00204 	addi	sp,sp,8
    35e8:	f800283a 	ret

000035ec <GetFilterParameter>:
/*
 * Compute the filter parameter for the specified frequency and filter bands (Eq. 2)
 * Used for internal computation only - not the be called directly
 */
double GetFilterParameter(unsigned int samplingRate, unsigned int binSize, unsigned int frequencyBand, unsigned int filterBand)
{
    35ec:	deffee04 	addi	sp,sp,-72
    35f0:	dfc01115 	stw	ra,68(sp)
    35f4:	df001015 	stw	fp,64(sp)
    35f8:	dc400f15 	stw	r17,60(sp)
    35fc:	dc000e15 	stw	r16,56(sp)
    3600:	df001004 	addi	fp,sp,64
    3604:	e13ff315 	stw	r4,-52(fp)
    3608:	e17ff215 	stw	r5,-56(fp)
    360c:	e1bff115 	stw	r6,-60(fp)
    3610:	e1fff015 	stw	r7,-64(fp)
	double filterParameter = 0.0f;
    3614:	e03ffc15 	stw	zero,-16(fp)
    3618:	e03ffd15 	stw	zero,-12(fp)

	double boundary = (frequencyBand * samplingRate) / binSize;		// k * Fs / N
    361c:	e0fff117 	ldw	r3,-60(fp)
    3620:	e0bff317 	ldw	r2,-52(fp)
    3624:	1887383a 	mul	r3,r3,r2
    3628:	e0bff217 	ldw	r2,-56(fp)
    362c:	1885203a 	divu	r2,r3,r2
    3630:	1009883a 	mov	r4,r2
    3634:	000ca980 	call	ca98 <__floatunsidf>
    3638:	1009883a 	mov	r4,r2
    363c:	180b883a 	mov	r5,r3
    3640:	e13ffa15 	stw	r4,-24(fp)
    3644:	e17ffb15 	stw	r5,-20(fp)
	double prevCenterFrequency = GetCenterFrequency(filterBand - 1);		// fc(l - 1) etc.
    3648:	e0bff017 	ldw	r2,-64(fp)
    364c:	10bfffc4 	addi	r2,r2,-1
    3650:	1009883a 	mov	r4,r2
    3654:	00039fc0 	call	39fc <GetCenterFrequency>
    3658:	e0bff815 	stw	r2,-32(fp)
    365c:	e0fff915 	stw	r3,-28(fp)
	double thisCenterFrequency = GetCenterFrequency(filterBand);
    3660:	e13ff017 	ldw	r4,-64(fp)
    3664:	00039fc0 	call	39fc <GetCenterFrequency>
    3668:	e0bff615 	stw	r2,-40(fp)
    366c:	e0fff715 	stw	r3,-36(fp)
	double nextCenterFrequency = GetCenterFrequency(filterBand + 1);
    3670:	e0bff017 	ldw	r2,-64(fp)
    3674:	10800044 	addi	r2,r2,1
    3678:	1009883a 	mov	r4,r2
    367c:	00039fc0 	call	39fc <GetCenterFrequency>
    3680:	e0bff415 	stw	r2,-48(fp)
    3684:	e0fff515 	stw	r3,-44(fp)

	if(boundary >= 0 && boundary < prevCenterFrequency)
    3688:	000d883a 	mov	r6,zero
    368c:	000f883a 	mov	r7,zero
    3690:	e13ffa17 	ldw	r4,-24(fp)
    3694:	e17ffb17 	ldw	r5,-20(fp)
    3698:	000b7bc0 	call	b7bc <__gedf2>
    369c:	10000916 	blt	r2,zero,36c4 <GetFilterParameter+0xd8>
    36a0:	e1bff817 	ldw	r6,-32(fp)
    36a4:	e1fff917 	ldw	r7,-28(fp)
    36a8:	e13ffa17 	ldw	r4,-24(fp)
    36ac:	e17ffb17 	ldw	r5,-20(fp)
    36b0:	000b8a40 	call	b8a4 <__ledf2>
    36b4:	1000030e 	bge	r2,zero,36c4 <GetFilterParameter+0xd8>
	{
		filterParameter = 0.0f;
    36b8:	e03ffc15 	stw	zero,-16(fp)
    36bc:	e03ffd15 	stw	zero,-12(fp)
    36c0:	00007c06 	br	38b4 <GetFilterParameter+0x2c8>
	}
	else if(boundary >= prevCenterFrequency && boundary < thisCenterFrequency)
    36c4:	e1bff817 	ldw	r6,-32(fp)
    36c8:	e1fff917 	ldw	r7,-28(fp)
    36cc:	e13ffa17 	ldw	r4,-24(fp)
    36d0:	e17ffb17 	ldw	r5,-20(fp)
    36d4:	000b7bc0 	call	b7bc <__gedf2>
    36d8:	10002f16 	blt	r2,zero,3798 <GetFilterParameter+0x1ac>
    36dc:	e1bff617 	ldw	r6,-40(fp)
    36e0:	e1fff717 	ldw	r7,-36(fp)
    36e4:	e13ffa17 	ldw	r4,-24(fp)
    36e8:	e17ffb17 	ldw	r5,-20(fp)
    36ec:	000b8a40 	call	b8a4 <__ledf2>
    36f0:	1000290e 	bge	r2,zero,3798 <GetFilterParameter+0x1ac>
	{
		filterParameter = (boundary - prevCenterFrequency) / (thisCenterFrequency - prevCenterFrequency);
    36f4:	e1bff817 	ldw	r6,-32(fp)
    36f8:	e1fff917 	ldw	r7,-28(fp)
    36fc:	e13ffa17 	ldw	r4,-24(fp)
    3700:	e17ffb17 	ldw	r5,-20(fp)
    3704:	000c0000 	call	c000 <__subdf3>
    3708:	1009883a 	mov	r4,r2
    370c:	180b883a 	mov	r5,r3
    3710:	2021883a 	mov	r16,r4
    3714:	2823883a 	mov	r17,r5
    3718:	e1bff817 	ldw	r6,-32(fp)
    371c:	e1fff917 	ldw	r7,-28(fp)
    3720:	e13ff617 	ldw	r4,-40(fp)
    3724:	e17ff717 	ldw	r5,-36(fp)
    3728:	000c0000 	call	c000 <__subdf3>
    372c:	1009883a 	mov	r4,r2
    3730:	180b883a 	mov	r5,r3
    3734:	2005883a 	mov	r2,r4
    3738:	2807883a 	mov	r3,r5
    373c:	100d883a 	mov	r6,r2
    3740:	180f883a 	mov	r7,r3
    3744:	8009883a 	mov	r4,r16
    3748:	880b883a 	mov	r5,r17
    374c:	000aeec0 	call	aeec <__divdf3>
    3750:	1009883a 	mov	r4,r2
    3754:	180b883a 	mov	r5,r3
    3758:	e13ffc15 	stw	r4,-16(fp)
    375c:	e17ffd15 	stw	r5,-12(fp)
		filterParameter *= GetMagnitudeFactor(filterBand);
    3760:	e13ff017 	ldw	r4,-64(fp)
    3764:	00038e80 	call	38e8 <GetMagnitudeFactor>
    3768:	1009883a 	mov	r4,r2
    376c:	180b883a 	mov	r5,r3
    3770:	200d883a 	mov	r6,r4
    3774:	280f883a 	mov	r7,r5
    3778:	e13ffc17 	ldw	r4,-16(fp)
    377c:	e17ffd17 	ldw	r5,-12(fp)
    3780:	000b98c0 	call	b98c <__muldf3>
    3784:	1009883a 	mov	r4,r2
    3788:	180b883a 	mov	r5,r3
    378c:	e13ffc15 	stw	r4,-16(fp)
    3790:	e17ffd15 	stw	r5,-12(fp)
    3794:	00004706 	br	38b4 <GetFilterParameter+0x2c8>
	}
	else if(boundary >= thisCenterFrequency && boundary < nextCenterFrequency)
    3798:	e1bff617 	ldw	r6,-40(fp)
    379c:	e1fff717 	ldw	r7,-36(fp)
    37a0:	e13ffa17 	ldw	r4,-24(fp)
    37a4:	e17ffb17 	ldw	r5,-20(fp)
    37a8:	000b7bc0 	call	b7bc <__gedf2>
    37ac:	10002f16 	blt	r2,zero,386c <GetFilterParameter+0x280>
    37b0:	e1bff417 	ldw	r6,-48(fp)
    37b4:	e1fff517 	ldw	r7,-44(fp)
    37b8:	e13ffa17 	ldw	r4,-24(fp)
    37bc:	e17ffb17 	ldw	r5,-20(fp)
    37c0:	000b8a40 	call	b8a4 <__ledf2>
    37c4:	1000290e 	bge	r2,zero,386c <GetFilterParameter+0x280>
	{
		filterParameter = (boundary - nextCenterFrequency) / (thisCenterFrequency - nextCenterFrequency);
    37c8:	e1bff417 	ldw	r6,-48(fp)
    37cc:	e1fff517 	ldw	r7,-44(fp)
    37d0:	e13ffa17 	ldw	r4,-24(fp)
    37d4:	e17ffb17 	ldw	r5,-20(fp)
    37d8:	000c0000 	call	c000 <__subdf3>
    37dc:	1009883a 	mov	r4,r2
    37e0:	180b883a 	mov	r5,r3
    37e4:	2021883a 	mov	r16,r4
    37e8:	2823883a 	mov	r17,r5
    37ec:	e1bff417 	ldw	r6,-48(fp)
    37f0:	e1fff517 	ldw	r7,-44(fp)
    37f4:	e13ff617 	ldw	r4,-40(fp)
    37f8:	e17ff717 	ldw	r5,-36(fp)
    37fc:	000c0000 	call	c000 <__subdf3>
    3800:	1009883a 	mov	r4,r2
    3804:	180b883a 	mov	r5,r3
    3808:	2005883a 	mov	r2,r4
    380c:	2807883a 	mov	r3,r5
    3810:	100d883a 	mov	r6,r2
    3814:	180f883a 	mov	r7,r3
    3818:	8009883a 	mov	r4,r16
    381c:	880b883a 	mov	r5,r17
    3820:	000aeec0 	call	aeec <__divdf3>
    3824:	1009883a 	mov	r4,r2
    3828:	180b883a 	mov	r5,r3
    382c:	e13ffc15 	stw	r4,-16(fp)
    3830:	e17ffd15 	stw	r5,-12(fp)
		filterParameter *= GetMagnitudeFactor(filterBand);
    3834:	e13ff017 	ldw	r4,-64(fp)
    3838:	00038e80 	call	38e8 <GetMagnitudeFactor>
    383c:	1009883a 	mov	r4,r2
    3840:	180b883a 	mov	r5,r3
    3844:	200d883a 	mov	r6,r4
    3848:	280f883a 	mov	r7,r5
    384c:	e13ffc17 	ldw	r4,-16(fp)
    3850:	e17ffd17 	ldw	r5,-12(fp)
    3854:	000b98c0 	call	b98c <__muldf3>
    3858:	1009883a 	mov	r4,r2
    385c:	180b883a 	mov	r5,r3
    3860:	e13ffc15 	stw	r4,-16(fp)
    3864:	e17ffd15 	stw	r5,-12(fp)
    3868:	00001206 	br	38b4 <GetFilterParameter+0x2c8>
	}
	else if(boundary >= nextCenterFrequency && boundary < samplingRate)
    386c:	e1bff417 	ldw	r6,-48(fp)
    3870:	e1fff517 	ldw	r7,-44(fp)
    3874:	e13ffa17 	ldw	r4,-24(fp)
    3878:	e17ffb17 	ldw	r5,-20(fp)
    387c:	000b7bc0 	call	b7bc <__gedf2>
    3880:	10000c16 	blt	r2,zero,38b4 <GetFilterParameter+0x2c8>
    3884:	e13ff317 	ldw	r4,-52(fp)
    3888:	000ca980 	call	ca98 <__floatunsidf>
    388c:	1009883a 	mov	r4,r2
    3890:	180b883a 	mov	r5,r3
    3894:	200d883a 	mov	r6,r4
    3898:	280f883a 	mov	r7,r5
    389c:	e13ffa17 	ldw	r4,-24(fp)
    38a0:	e17ffb17 	ldw	r5,-20(fp)
    38a4:	000b8a40 	call	b8a4 <__ledf2>
    38a8:	1000020e 	bge	r2,zero,38b4 <GetFilterParameter+0x2c8>
	{
		filterParameter = 0.0f;
    38ac:	e03ffc15 	stw	zero,-16(fp)
    38b0:	e03ffd15 	stw	zero,-12(fp)
	}

	return filterParameter;
    38b4:	e0bffc17 	ldw	r2,-16(fp)
    38b8:	e0fffd17 	ldw	r3,-12(fp)
    38bc:	1009883a 	mov	r4,r2
    38c0:	180b883a 	mov	r5,r3
}
    38c4:	2005883a 	mov	r2,r4
    38c8:	2807883a 	mov	r3,r5
    38cc:	e6fffe04 	addi	sp,fp,-8
    38d0:	dfc00317 	ldw	ra,12(sp)
    38d4:	df000217 	ldw	fp,8(sp)
    38d8:	dc400117 	ldw	r17,4(sp)
    38dc:	dc000017 	ldw	r16,0(sp)
    38e0:	dec00404 	addi	sp,sp,16
    38e4:	f800283a 	ret

000038e8 <GetMagnitudeFactor>:
/*
 * Compute the band-dependent magnitude factor for the given filter band (Eq. 3)
 * Used for internal computation only - not the be called directly
 */
double GetMagnitudeFactor(unsigned int filterBand)
{
    38e8:	defff904 	addi	sp,sp,-28
    38ec:	dfc00615 	stw	ra,24(sp)
    38f0:	df000515 	stw	fp,20(sp)
    38f4:	dc400415 	stw	r17,16(sp)
    38f8:	dc000315 	stw	r16,12(sp)
    38fc:	df000504 	addi	fp,sp,20
    3900:	e13ffb15 	stw	r4,-20(fp)
	double magnitudeFactor = 0.0f;
    3904:	e03ffc15 	stw	zero,-16(fp)
    3908:	e03ffd15 	stw	zero,-12(fp)

	if(filterBand >= 1 && filterBand <= 14)
    390c:	e0bffb17 	ldw	r2,-20(fp)
    3910:	10000926 	beq	r2,zero,3938 <GetMagnitudeFactor+0x50>
    3914:	e0bffb17 	ldw	r2,-20(fp)
    3918:	108003e8 	cmpgeui	r2,r2,15
    391c:	1000061e 	bne	r2,zero,3938 <GetMagnitudeFactor+0x50>
	{
		magnitudeFactor = 0.015;
    3920:	00b80034 	movhi	r2,57344
    3924:	e0bffc15 	stw	r2,-16(fp)
    3928:	008fe3f4 	movhi	r2,16271
    392c:	10ae1444 	addi	r2,r2,-18351
    3930:	e0bffd15 	stw	r2,-12(fp)
    3934:	00002406 	br	39c8 <GetMagnitudeFactor+0xe0>
	}
	else if(filterBand >= 15 && filterBand <= 48)
    3938:	e0bffb17 	ldw	r2,-20(fp)
    393c:	108003f0 	cmpltui	r2,r2,15
    3940:	1000211e 	bne	r2,zero,39c8 <GetMagnitudeFactor+0xe0>
    3944:	e0bffb17 	ldw	r2,-20(fp)
    3948:	10800c68 	cmpgeui	r2,r2,49
    394c:	10001e1e 	bne	r2,zero,39c8 <GetMagnitudeFactor+0xe0>
	{
		magnitudeFactor = 2.0f / (GetCenterFrequency(filterBand + 1) - GetCenterFrequency(filterBand -1));
    3950:	e0bffb17 	ldw	r2,-20(fp)
    3954:	10800044 	addi	r2,r2,1
    3958:	1009883a 	mov	r4,r2
    395c:	00039fc0 	call	39fc <GetCenterFrequency>
    3960:	1021883a 	mov	r16,r2
    3964:	1823883a 	mov	r17,r3
    3968:	e0bffb17 	ldw	r2,-20(fp)
    396c:	10bfffc4 	addi	r2,r2,-1
    3970:	1009883a 	mov	r4,r2
    3974:	00039fc0 	call	39fc <GetCenterFrequency>
    3978:	1009883a 	mov	r4,r2
    397c:	180b883a 	mov	r5,r3
    3980:	200d883a 	mov	r6,r4
    3984:	280f883a 	mov	r7,r5
    3988:	8009883a 	mov	r4,r16
    398c:	880b883a 	mov	r5,r17
    3990:	000c0000 	call	c000 <__subdf3>
    3994:	1009883a 	mov	r4,r2
    3998:	180b883a 	mov	r5,r3
    399c:	2005883a 	mov	r2,r4
    39a0:	2807883a 	mov	r3,r5
    39a4:	100d883a 	mov	r6,r2
    39a8:	180f883a 	mov	r7,r3
    39ac:	0009883a 	mov	r4,zero
    39b0:	01500034 	movhi	r5,16384
    39b4:	000aeec0 	call	aeec <__divdf3>
    39b8:	1009883a 	mov	r4,r2
    39bc:	180b883a 	mov	r5,r3
    39c0:	e13ffc15 	stw	r4,-16(fp)
    39c4:	e17ffd15 	stw	r5,-12(fp)
	}

	return magnitudeFactor;
    39c8:	e0bffc17 	ldw	r2,-16(fp)
    39cc:	e0fffd17 	ldw	r3,-12(fp)
    39d0:	1009883a 	mov	r4,r2
    39d4:	180b883a 	mov	r5,r3
}
    39d8:	2005883a 	mov	r2,r4
    39dc:	2807883a 	mov	r3,r5
    39e0:	e6fffe04 	addi	sp,fp,-8
    39e4:	dfc00317 	ldw	ra,12(sp)
    39e8:	df000217 	ldw	fp,8(sp)
    39ec:	dc400117 	ldw	r17,4(sp)
    39f0:	dc000017 	ldw	r16,0(sp)
    39f4:	dec00404 	addi	sp,sp,16
    39f8:	f800283a 	ret

000039fc <GetCenterFrequency>:
 * This where the mel-frequency scaling occurs. Filters are specified so that their
 * center frequencies are equally spaced on the mel scale
 * Used for internal computation only - not the be called directly
 */
double GetCenterFrequency(unsigned int filterBand)
{
    39fc:	defff904 	addi	sp,sp,-28
    3a00:	dfc00615 	stw	ra,24(sp)
    3a04:	df000515 	stw	fp,20(sp)
    3a08:	df000504 	addi	fp,sp,20
    3a0c:	e13ffb15 	stw	r4,-20(fp)
	double centerFrequency = 0.0f;
    3a10:	e03ffe15 	stw	zero,-8(fp)
    3a14:	e03fff15 	stw	zero,-4(fp)
	double exponent;

	if(filterBand == 0)
    3a18:	e0bffb17 	ldw	r2,-20(fp)
    3a1c:	1000031e 	bne	r2,zero,3a2c <GetCenterFrequency+0x30>
	{
		centerFrequency = 0;
    3a20:	e03ffe15 	stw	zero,-8(fp)
    3a24:	e03fff15 	stw	zero,-4(fp)
    3a28:	00003006 	br	3aec <GetCenterFrequency+0xf0>
	}
	else if(filterBand >= 1 && filterBand <= 14)
    3a2c:	e0bffb17 	ldw	r2,-20(fp)
    3a30:	10001126 	beq	r2,zero,3a78 <GetCenterFrequency+0x7c>
    3a34:	e0bffb17 	ldw	r2,-20(fp)
    3a38:	108003e8 	cmpgeui	r2,r2,15
    3a3c:	10000e1e 	bne	r2,zero,3a78 <GetCenterFrequency+0x7c>
	{
		centerFrequency = (200.0f * filterBand) / 3.0f;
    3a40:	e13ffb17 	ldw	r4,-20(fp)
    3a44:	000a5000 	call	a500 <__floatunsisf>
    3a48:	1007883a 	mov	r3,r2
    3a4c:	0090d234 	movhi	r2,17224
    3a50:	1887ff32 	custom	252,r3,r3,r2
    3a54:	00901034 	movhi	r2,16448
    3a58:	1885fff2 	custom	255,r2,r3,r2
    3a5c:	1009883a 	mov	r4,r2
    3a60:	000cb280 	call	cb28 <__extendsfdf2>
    3a64:	1009883a 	mov	r4,r2
    3a68:	180b883a 	mov	r5,r3
    3a6c:	e13ffe15 	stw	r4,-8(fp)
    3a70:	e17fff15 	stw	r5,-4(fp)
    3a74:	00001d06 	br	3aec <GetCenterFrequency+0xf0>
	}
	else
	{
		exponent = filterBand - 14.0f;
    3a78:	e13ffb17 	ldw	r4,-20(fp)
    3a7c:	000a5000 	call	a500 <__floatunsisf>
    3a80:	1007883a 	mov	r3,r2
    3a84:	00905834 	movhi	r2,16736
    3a88:	1885ffb2 	custom	254,r2,r3,r2
    3a8c:	1009883a 	mov	r4,r2
    3a90:	000cb280 	call	cb28 <__extendsfdf2>
    3a94:	1009883a 	mov	r4,r2
    3a98:	180b883a 	mov	r5,r3
    3a9c:	e13ffc15 	stw	r4,-16(fp)
    3aa0:	e17ffd15 	stw	r5,-12(fp)
		centerFrequency = pow(1.0711703, exponent);
    3aa4:	e1bffc17 	ldw	r6,-16(fp)
    3aa8:	e1fffd17 	ldw	r7,-12(fp)
    3aac:	01200034 	movhi	r4,32768
    3ab0:	014ffc74 	movhi	r5,16369
    3ab4:	2948e0c4 	addi	r5,r5,9091
    3ab8:	0003fd00 	call	3fd0 <pow>
    3abc:	e0bffe15 	stw	r2,-8(fp)
    3ac0:	e0ffff15 	stw	r3,-4(fp)
		centerFrequency *= 1073.4;
    3ac4:	01a80034 	movhi	r6,40960
    3ac8:	01d02474 	movhi	r7,16529
    3acc:	39f16644 	addi	r7,r7,-14951
    3ad0:	e13ffe17 	ldw	r4,-8(fp)
    3ad4:	e17fff17 	ldw	r5,-4(fp)
    3ad8:	000b98c0 	call	b98c <__muldf3>
    3adc:	1009883a 	mov	r4,r2
    3ae0:	180b883a 	mov	r5,r3
    3ae4:	e13ffe15 	stw	r4,-8(fp)
    3ae8:	e17fff15 	stw	r5,-4(fp)
	}

	return centerFrequency;
    3aec:	e0bffe17 	ldw	r2,-8(fp)
    3af0:	e0ffff17 	ldw	r3,-4(fp)
    3af4:	1009883a 	mov	r4,r2
    3af8:	180b883a 	mov	r5,r3
}
    3afc:	2005883a 	mov	r2,r4
    3b00:	2807883a 	mov	r3,r5
    3b04:	e037883a 	mov	sp,fp
    3b08:	dfc00117 	ldw	ra,4(sp)
    3b0c:	df000017 	ldw	fp,0(sp)
    3b10:	dec00204 	addi	sp,sp,8
    3b14:	f800283a 	ret

00003b18 <cos>:
    3b18:	00a00034 	movhi	r2,32768
    3b1c:	10bfffc4 	addi	r2,r2,-1
    3b20:	00cffa74 	movhi	r3,16361
    3b24:	2884703a 	and	r2,r5,r2
    3b28:	18c87ec4 	addi	r3,r3,8699
    3b2c:	18801a0e 	bge	r3,r2,3b98 <cos+0x80>
    3b30:	defffa04 	addi	sp,sp,-24
    3b34:	dfc00515 	stw	ra,20(sp)
    3b38:	00dffc34 	movhi	r3,32752
    3b3c:	10c00616 	blt	r2,r3,3b58 <cos+0x40>
    3b40:	280f883a 	mov	r7,r5
    3b44:	200d883a 	mov	r6,r4
    3b48:	000c0000 	call	c000 <__subdf3>
    3b4c:	dfc00517 	ldw	ra,20(sp)
    3b50:	dec00604 	addi	sp,sp,24
    3b54:	f800283a 	ret
    3b58:	d9800104 	addi	r6,sp,4
    3b5c:	0005acc0 	call	5acc <__ieee754_rem_pio2>
    3b60:	108000cc 	andi	r2,r2,3
    3b64:	10c00060 	cmpeqi	r3,r2,1
    3b68:	d9800317 	ldw	r6,12(sp)
    3b6c:	d9c00417 	ldw	r7,16(sp)
    3b70:	d9000117 	ldw	r4,4(sp)
    3b74:	d9400217 	ldw	r5,8(sp)
    3b78:	18000a1e 	bne	r3,zero,3ba4 <cos+0x8c>
    3b7c:	10c000a0 	cmpeqi	r3,r2,2
    3b80:	18000e1e 	bne	r3,zero,3bbc <cos+0xa4>
    3b84:	10000b26 	beq	r2,zero,3bb4 <cos+0x9c>
    3b88:	00800044 	movi	r2,1
    3b8c:	d8800015 	stw	r2,0(sp)
    3b90:	0007b380 	call	7b38 <__kernel_sin>
    3b94:	003fed06 	br	3b4c <cos+0x34>
    3b98:	000d883a 	mov	r6,zero
    3b9c:	000f883a 	mov	r7,zero
    3ba0:	00069801 	jmpi	6980 <__kernel_cos>
    3ba4:	d8800015 	stw	r2,0(sp)
    3ba8:	0007b380 	call	7b38 <__kernel_sin>
    3bac:	18e0003c 	xorhi	r3,r3,32768
    3bb0:	003fe606 	br	3b4c <cos+0x34>
    3bb4:	00069800 	call	6980 <__kernel_cos>
    3bb8:	003fe406 	br	3b4c <cos+0x34>
    3bbc:	00069800 	call	6980 <__kernel_cos>
    3bc0:	18e0003c 	xorhi	r3,r3,32768
    3bc4:	003fe106 	br	3b4c <cos+0x34>

00003bc8 <floor>:
    3bc8:	280fd53a 	srai	r7,r5,20
    3bcc:	defffb04 	addi	sp,sp,-20
    3bd0:	dc800215 	stw	r18,8(sp)
    3bd4:	39c1ffcc 	andi	r7,r7,2047
    3bd8:	3cbf0044 	addi	r18,r7,-1023
    3bdc:	dc400115 	stw	r17,4(sp)
    3be0:	dc000015 	stw	r16,0(sp)
    3be4:	dfc00415 	stw	ra,16(sp)
    3be8:	dcc00315 	stw	r19,12(sp)
    3bec:	90800508 	cmpgei	r2,r18,20
    3bf0:	2821883a 	mov	r16,r5
    3bf4:	200d883a 	mov	r6,r4
    3bf8:	2023883a 	mov	r17,r4
    3bfc:	10002b1e 	bne	r2,zero,3cac <floor+0xe4>
    3c00:	90001b16 	blt	r18,zero,3c70 <floor+0xa8>
    3c04:	00800434 	movhi	r2,16
    3c08:	10bfffc4 	addi	r2,r2,-1
    3c0c:	14a7d83a 	sra	r19,r2,r18
    3c10:	2cc4703a 	and	r2,r5,r19
    3c14:	1104b03a 	or	r2,r2,r4
    3c18:	10002826 	beq	r2,zero,3cbc <floor+0xf4>
    3c1c:	01a20034 	movhi	r6,34816
    3c20:	01df8e34 	movhi	r7,32312
    3c24:	319d6704 	addi	r6,r6,30108
    3c28:	39f90f04 	addi	r7,r7,-7108
    3c2c:	000a5fc0 	call	a5fc <__adddf3>
    3c30:	000d883a 	mov	r6,zero
    3c34:	000f883a 	mov	r7,zero
    3c38:	1009883a 	mov	r4,r2
    3c3c:	180b883a 	mov	r5,r3
    3c40:	000b7bc0 	call	b7bc <__gedf2>
    3c44:	0080070e 	bge	zero,r2,3c64 <floor+0x9c>
    3c48:	8000030e 	bge	r16,zero,3c58 <floor+0x90>
    3c4c:	00800434 	movhi	r2,16
    3c50:	14a5d83a 	sra	r18,r2,r18
    3c54:	9421883a 	add	r16,r18,r16
    3c58:	04c4303a 	nor	r2,zero,r19
    3c5c:	80a0703a 	and	r16,r16,r2
    3c60:	0023883a 	mov	r17,zero
    3c64:	8805883a 	mov	r2,r17
    3c68:	8007883a 	mov	r3,r16
    3c6c:	00001506 	br	3cc4 <floor+0xfc>
    3c70:	01a20034 	movhi	r6,34816
    3c74:	01df8e34 	movhi	r7,32312
    3c78:	319d6704 	addi	r6,r6,30108
    3c7c:	39f90f04 	addi	r7,r7,-7108
    3c80:	000a5fc0 	call	a5fc <__adddf3>
    3c84:	000d883a 	mov	r6,zero
    3c88:	000f883a 	mov	r7,zero
    3c8c:	1009883a 	mov	r4,r2
    3c90:	180b883a 	mov	r5,r3
    3c94:	000b7bc0 	call	b7bc <__gedf2>
    3c98:	00bff20e 	bge	zero,r2,3c64 <floor+0x9c>
    3c9c:	80002a16 	blt	r16,zero,3d48 <floor+0x180>
    3ca0:	0023883a 	mov	r17,zero
    3ca4:	0021883a 	mov	r16,zero
    3ca8:	003fee06 	br	3c64 <floor+0x9c>
    3cac:	90800d10 	cmplti	r2,r18,52
    3cb0:	10000b1e 	bne	r2,zero,3ce0 <floor+0x118>
    3cb4:	94810018 	cmpnei	r18,r18,1024
    3cb8:	90001d26 	beq	r18,zero,3d30 <floor+0x168>
    3cbc:	3005883a 	mov	r2,r6
    3cc0:	8007883a 	mov	r3,r16
    3cc4:	dfc00417 	ldw	ra,16(sp)
    3cc8:	dcc00317 	ldw	r19,12(sp)
    3ccc:	dc800217 	ldw	r18,8(sp)
    3cd0:	dc400117 	ldw	r17,4(sp)
    3cd4:	dc000017 	ldw	r16,0(sp)
    3cd8:	dec00504 	addi	sp,sp,20
    3cdc:	f800283a 	ret
    3ce0:	39fefb44 	addi	r7,r7,-1043
    3ce4:	04ffffc4 	movi	r19,-1
    3ce8:	99e6d83a 	srl	r19,r19,r7
    3cec:	9904703a 	and	r2,r19,r4
    3cf0:	10001226 	beq	r2,zero,3d3c <floor+0x174>
    3cf4:	01a20034 	movhi	r6,34816
    3cf8:	01df8e34 	movhi	r7,32312
    3cfc:	319d6704 	addi	r6,r6,30108
    3d00:	39f90f04 	addi	r7,r7,-7108
    3d04:	000a5fc0 	call	a5fc <__adddf3>
    3d08:	000d883a 	mov	r6,zero
    3d0c:	000f883a 	mov	r7,zero
    3d10:	1009883a 	mov	r4,r2
    3d14:	180b883a 	mov	r5,r3
    3d18:	000b7bc0 	call	b7bc <__gedf2>
    3d1c:	00bfd10e 	bge	zero,r2,3c64 <floor+0x9c>
    3d20:	80001116 	blt	r16,zero,3d68 <floor+0x1a0>
    3d24:	04ce303a 	nor	r7,zero,r19
    3d28:	89e2703a 	and	r17,r17,r7
    3d2c:	003fcd06 	br	3c64 <floor+0x9c>
    3d30:	280f883a 	mov	r7,r5
    3d34:	000a5fc0 	call	a5fc <__adddf3>
    3d38:	003fe206 	br	3cc4 <floor+0xfc>
    3d3c:	2807883a 	mov	r3,r5
    3d40:	2005883a 	mov	r2,r4
    3d44:	003fdf06 	br	3cc4 <floor+0xfc>
    3d48:	00a00034 	movhi	r2,32768
    3d4c:	10bfffc4 	addi	r2,r2,-1
    3d50:	8084703a 	and	r2,r16,r2
    3d54:	1462b03a 	or	r17,r2,r17
    3d58:	88000e26 	beq	r17,zero,3d94 <floor+0x1cc>
    3d5c:	0023883a 	mov	r17,zero
    3d60:	042ffc34 	movhi	r16,49136
    3d64:	003fbf06 	br	3c64 <floor+0x9c>
    3d68:	90800518 	cmpnei	r2,r18,20
    3d6c:	10000b26 	beq	r2,zero,3d9c <floor+0x1d4>
    3d70:	00800d04 	movi	r2,52
    3d74:	14a5c83a 	sub	r18,r2,r18
    3d78:	00800044 	movi	r2,1
    3d7c:	1484983a 	sll	r2,r2,r18
    3d80:	1445883a 	add	r2,r2,r17
    3d84:	1440072e 	bgeu	r2,r17,3da4 <floor+0x1dc>
    3d88:	84000044 	addi	r16,r16,1
    3d8c:	1023883a 	mov	r17,r2
    3d90:	003fe406 	br	3d24 <floor+0x15c>
    3d94:	0023883a 	mov	r17,zero
    3d98:	003fb206 	br	3c64 <floor+0x9c>
    3d9c:	84000044 	addi	r16,r16,1
    3da0:	003fe006 	br	3d24 <floor+0x15c>
    3da4:	1023883a 	mov	r17,r2
    3da8:	003fde06 	br	3d24 <floor+0x15c>

00003dac <sin>:
    3dac:	00a00034 	movhi	r2,32768
    3db0:	defffa04 	addi	sp,sp,-24
    3db4:	10bfffc4 	addi	r2,r2,-1
    3db8:	00cffa74 	movhi	r3,16361
    3dbc:	dfc00515 	stw	ra,20(sp)
    3dc0:	2884703a 	and	r2,r5,r2
    3dc4:	18c87ec4 	addi	r3,r3,8699
    3dc8:	1880170e 	bge	r3,r2,3e28 <sin+0x7c>
    3dcc:	00dffc34 	movhi	r3,32752
    3dd0:	10c00616 	blt	r2,r3,3dec <sin+0x40>
    3dd4:	280f883a 	mov	r7,r5
    3dd8:	200d883a 	mov	r6,r4
    3ddc:	000c0000 	call	c000 <__subdf3>
    3de0:	dfc00517 	ldw	ra,20(sp)
    3de4:	dec00604 	addi	sp,sp,24
    3de8:	f800283a 	ret
    3dec:	d9800104 	addi	r6,sp,4
    3df0:	0005acc0 	call	5acc <__ieee754_rem_pio2>
    3df4:	108000cc 	andi	r2,r2,3
    3df8:	10c00060 	cmpeqi	r3,r2,1
    3dfc:	d9800317 	ldw	r6,12(sp)
    3e00:	d9c00417 	ldw	r7,16(sp)
    3e04:	d9000117 	ldw	r4,4(sp)
    3e08:	d9400217 	ldw	r5,8(sp)
    3e0c:	18000d1e 	bne	r3,zero,3e44 <sin+0x98>
    3e10:	10c000a0 	cmpeqi	r3,r2,2
    3e14:	1800111e 	bne	r3,zero,3e5c <sin+0xb0>
    3e18:	10000c26 	beq	r2,zero,3e4c <sin+0xa0>
    3e1c:	00069800 	call	6980 <__kernel_cos>
    3e20:	18e0003c 	xorhi	r3,r3,32768
    3e24:	003fee06 	br	3de0 <sin+0x34>
    3e28:	d8000015 	stw	zero,0(sp)
    3e2c:	000d883a 	mov	r6,zero
    3e30:	000f883a 	mov	r7,zero
    3e34:	0007b380 	call	7b38 <__kernel_sin>
    3e38:	dfc00517 	ldw	ra,20(sp)
    3e3c:	dec00604 	addi	sp,sp,24
    3e40:	f800283a 	ret
    3e44:	00069800 	call	6980 <__kernel_cos>
    3e48:	003fe506 	br	3de0 <sin+0x34>
    3e4c:	00800044 	movi	r2,1
    3e50:	d8800015 	stw	r2,0(sp)
    3e54:	0007b380 	call	7b38 <__kernel_sin>
    3e58:	003fe106 	br	3de0 <sin+0x34>
    3e5c:	00800044 	movi	r2,1
    3e60:	d8800015 	stw	r2,0(sp)
    3e64:	0007b380 	call	7b38 <__kernel_sin>
    3e68:	18e0003c 	xorhi	r3,r3,32768
    3e6c:	003fdc06 	br	3de0 <sin+0x34>

00003e70 <cosf>:
    3e70:	00a00034 	movhi	r2,32768
    3e74:	10bfffc4 	addi	r2,r2,-1
    3e78:	00cfd274 	movhi	r3,16201
    3e7c:	1104703a 	and	r2,r2,r4
    3e80:	18c3f604 	addi	r3,r3,4056
    3e84:	1880160e 	bge	r3,r2,3ee0 <cosf+0x70>
    3e88:	defffd04 	addi	sp,sp,-12
    3e8c:	dfc00215 	stw	ra,8(sp)
    3e90:	00dfe034 	movhi	r3,32640
    3e94:	10c00516 	blt	r2,r3,3eac <cosf+0x3c>
    3e98:	200b883a 	mov	r5,r4
    3e9c:	0009ed80 	call	9ed8 <__subsf3>
    3ea0:	dfc00217 	ldw	ra,8(sp)
    3ea4:	dec00304 	addi	sp,sp,12
    3ea8:	f800283a 	ret
    3eac:	d80b883a 	mov	r5,sp
    3eb0:	00064840 	call	6484 <__ieee754_rem_pio2f>
    3eb4:	108000cc 	andi	r2,r2,3
    3eb8:	10c00060 	cmpeqi	r3,r2,1
    3ebc:	d9400117 	ldw	r5,4(sp)
    3ec0:	d9000017 	ldw	r4,0(sp)
    3ec4:	1800081e 	bne	r3,zero,3ee8 <cosf+0x78>
    3ec8:	10c000a0 	cmpeqi	r3,r2,2
    3ecc:	18000c1e 	bne	r3,zero,3f00 <cosf+0x90>
    3ed0:	10000926 	beq	r2,zero,3ef8 <cosf+0x88>
    3ed4:	01800044 	movi	r6,1
    3ed8:	0008b880 	call	8b88 <__kernel_sinf>
    3edc:	003ff006 	br	3ea0 <cosf+0x30>
    3ee0:	000b883a 	mov	r5,zero
    3ee4:	0007e001 	jmpi	7e00 <__kernel_cosf>
    3ee8:	01800044 	movi	r6,1
    3eec:	0008b880 	call	8b88 <__kernel_sinf>
    3ef0:	10a0003c 	xorhi	r2,r2,32768
    3ef4:	003fea06 	br	3ea0 <cosf+0x30>
    3ef8:	0007e000 	call	7e00 <__kernel_cosf>
    3efc:	003fe806 	br	3ea0 <cosf+0x30>
    3f00:	0007e000 	call	7e00 <__kernel_cosf>
    3f04:	10a0003c 	xorhi	r2,r2,32768
    3f08:	003fe506 	br	3ea0 <cosf+0x30>

00003f0c <log>:
    3f0c:	defffb04 	addi	sp,sp,-20
    3f10:	dcc00315 	stw	r19,12(sp)
    3f14:	dc800215 	stw	r18,8(sp)
    3f18:	dc400115 	stw	r17,4(sp)
    3f1c:	dc000015 	stw	r16,0(sp)
    3f20:	2023883a 	mov	r17,r4
    3f24:	2821883a 	mov	r16,r5
    3f28:	dfc00415 	stw	ra,16(sp)
    3f2c:	00043380 	call	4338 <__ieee754_log>
    3f30:	880d883a 	mov	r6,r17
    3f34:	800f883a 	mov	r7,r16
    3f38:	8809883a 	mov	r4,r17
    3f3c:	800b883a 	mov	r5,r16
    3f40:	1027883a 	mov	r19,r2
    3f44:	1825883a 	mov	r18,r3
    3f48:	000c90c0 	call	c90c <__unorddf2>
    3f4c:	1000111e 	bne	r2,zero,3f94 <log+0x88>
    3f50:	000d883a 	mov	r6,zero
    3f54:	000f883a 	mov	r7,zero
    3f58:	8809883a 	mov	r4,r17
    3f5c:	800b883a 	mov	r5,r16
    3f60:	000b7bc0 	call	b7bc <__gedf2>
    3f64:	00800b16 	blt	zero,r2,3f94 <log+0x88>
    3f68:	000d883a 	mov	r6,zero
    3f6c:	000f883a 	mov	r7,zero
    3f70:	8809883a 	mov	r4,r17
    3f74:	800b883a 	mov	r5,r16
    3f78:	000b73c0 	call	b73c <__eqdf2>
    3f7c:	10000e1e 	bne	r2,zero,3fb8 <log+0xac>
    3f80:	000cde80 	call	cde8 <__errno>
    3f84:	00c00884 	movi	r3,34
    3f88:	10c00015 	stw	r3,0(r2)
    3f8c:	0027883a 	mov	r19,zero
    3f90:	04bffc34 	movhi	r18,65520
    3f94:	9805883a 	mov	r2,r19
    3f98:	9007883a 	mov	r3,r18
    3f9c:	dfc00417 	ldw	ra,16(sp)
    3fa0:	dcc00317 	ldw	r19,12(sp)
    3fa4:	dc800217 	ldw	r18,8(sp)
    3fa8:	dc400117 	ldw	r17,4(sp)
    3fac:	dc000017 	ldw	r16,0(sp)
    3fb0:	dec00504 	addi	sp,sp,20
    3fb4:	f800283a 	ret
    3fb8:	000cde80 	call	cde8 <__errno>
    3fbc:	00c00844 	movi	r3,33
    3fc0:	10c00015 	stw	r3,0(r2)
    3fc4:	0027883a 	mov	r19,zero
    3fc8:	049ffe34 	movhi	r18,32760
    3fcc:	003ff106 	br	3f94 <log+0x88>

00003fd0 <pow>:
    3fd0:	defff704 	addi	sp,sp,-36
    3fd4:	dd800615 	stw	r22,24(sp)
    3fd8:	dd000415 	stw	r20,16(sp)
    3fdc:	dcc00315 	stw	r19,12(sp)
    3fe0:	dc800215 	stw	r18,8(sp)
    3fe4:	dc400115 	stw	r17,4(sp)
    3fe8:	dc000015 	stw	r16,0(sp)
    3fec:	3823883a 	mov	r17,r7
    3ff0:	3021883a 	mov	r16,r6
    3ff4:	dfc00815 	stw	ra,32(sp)
    3ff8:	ddc00715 	stw	r23,28(sp)
    3ffc:	dd400515 	stw	r21,20(sp)
    4000:	202d883a 	mov	r22,r4
    4004:	2825883a 	mov	r18,r5
    4008:	00049c40 	call	49c4 <__ieee754_pow>
    400c:	800d883a 	mov	r6,r16
    4010:	880f883a 	mov	r7,r17
    4014:	8009883a 	mov	r4,r16
    4018:	880b883a 	mov	r5,r17
    401c:	1027883a 	mov	r19,r2
    4020:	1829883a 	mov	r20,r3
    4024:	000c90c0 	call	c90c <__unorddf2>
    4028:	10005d1e 	bne	r2,zero,41a0 <pow+0x1d0>
    402c:	000d883a 	mov	r6,zero
    4030:	000f883a 	mov	r7,zero
    4034:	b009883a 	mov	r4,r22
    4038:	900b883a 	mov	r5,r18
    403c:	000b73c0 	call	b73c <__eqdf2>
    4040:	10006426 	beq	r2,zero,41d4 <pow+0x204>
    4044:	01600034 	movhi	r5,32768
    4048:	297fffc4 	addi	r5,r5,-1
    404c:	a16a703a 	and	r21,r20,r5
    4050:	01dffc34 	movhi	r7,32752
    4054:	01bfffc4 	movi	r6,-1
    4058:	39ffffc4 	addi	r7,r7,-1
    405c:	9809883a 	mov	r4,r19
    4060:	a80b883a 	mov	r5,r21
    4064:	000c90c0 	call	c90c <__unorddf2>
    4068:	1000071e 	bne	r2,zero,4088 <pow+0xb8>
    406c:	01dffc34 	movhi	r7,32752
    4070:	01bfffc4 	movi	r6,-1
    4074:	39ffffc4 	addi	r7,r7,-1
    4078:	9809883a 	mov	r4,r19
    407c:	a80b883a 	mov	r5,r21
    4080:	000b7bc0 	call	b7bc <__gedf2>
    4084:	0080200e 	bge	zero,r2,4108 <pow+0x138>
    4088:	05600034 	movhi	r21,32768
    408c:	ad7fffc4 	addi	r21,r21,-1
    4090:	956e703a 	and	r23,r18,r21
    4094:	01dffc34 	movhi	r7,32752
    4098:	01bfffc4 	movi	r6,-1
    409c:	39ffffc4 	addi	r7,r7,-1
    40a0:	b009883a 	mov	r4,r22
    40a4:	b80b883a 	mov	r5,r23
    40a8:	000c90c0 	call	c90c <__unorddf2>
    40ac:	10003c1e 	bne	r2,zero,41a0 <pow+0x1d0>
    40b0:	01dffc34 	movhi	r7,32752
    40b4:	01bfffc4 	movi	r6,-1
    40b8:	39ffffc4 	addi	r7,r7,-1
    40bc:	b009883a 	mov	r4,r22
    40c0:	b80b883a 	mov	r5,r23
    40c4:	000b7bc0 	call	b7bc <__gedf2>
    40c8:	00803516 	blt	zero,r2,41a0 <pow+0x1d0>
    40cc:	8d6a703a 	and	r21,r17,r21
    40d0:	01dffc34 	movhi	r7,32752
    40d4:	01bfffc4 	movi	r6,-1
    40d8:	39ffffc4 	addi	r7,r7,-1
    40dc:	8009883a 	mov	r4,r16
    40e0:	a80b883a 	mov	r5,r21
    40e4:	000c90c0 	call	c90c <__unorddf2>
    40e8:	1000071e 	bne	r2,zero,4108 <pow+0x138>
    40ec:	01dffc34 	movhi	r7,32752
    40f0:	01bfffc4 	movi	r6,-1
    40f4:	39ffffc4 	addi	r7,r7,-1
    40f8:	8009883a 	mov	r4,r16
    40fc:	a80b883a 	mov	r5,r21
    4100:	000b7bc0 	call	b7bc <__gedf2>
    4104:	0080570e 	bge	zero,r2,4264 <pow+0x294>
    4108:	000d883a 	mov	r6,zero
    410c:	000f883a 	mov	r7,zero
    4110:	9809883a 	mov	r4,r19
    4114:	a00b883a 	mov	r5,r20
    4118:	000b73c0 	call	b73c <__eqdf2>
    411c:	1000201e 	bne	r2,zero,41a0 <pow+0x1d0>
    4120:	05600034 	movhi	r21,32768
    4124:	ad7fffc4 	addi	r21,r21,-1
    4128:	9564703a 	and	r18,r18,r21
    412c:	01dffc34 	movhi	r7,32752
    4130:	01bfffc4 	movi	r6,-1
    4134:	39ffffc4 	addi	r7,r7,-1
    4138:	b009883a 	mov	r4,r22
    413c:	900b883a 	mov	r5,r18
    4140:	000c90c0 	call	c90c <__unorddf2>
    4144:	1000161e 	bne	r2,zero,41a0 <pow+0x1d0>
    4148:	01dffc34 	movhi	r7,32752
    414c:	01bfffc4 	movi	r6,-1
    4150:	39ffffc4 	addi	r7,r7,-1
    4154:	b009883a 	mov	r4,r22
    4158:	900b883a 	mov	r5,r18
    415c:	000b7bc0 	call	b7bc <__gedf2>
    4160:	00800f16 	blt	zero,r2,41a0 <pow+0x1d0>
    4164:	8d62703a 	and	r17,r17,r21
    4168:	01dffc34 	movhi	r7,32752
    416c:	01bfffc4 	movi	r6,-1
    4170:	39ffffc4 	addi	r7,r7,-1
    4174:	8009883a 	mov	r4,r16
    4178:	880b883a 	mov	r5,r17
    417c:	000c90c0 	call	c90c <__unorddf2>
    4180:	1000071e 	bne	r2,zero,41a0 <pow+0x1d0>
    4184:	01dffc34 	movhi	r7,32752
    4188:	01bfffc4 	movi	r6,-1
    418c:	39ffffc4 	addi	r7,r7,-1
    4190:	8009883a 	mov	r4,r16
    4194:	880b883a 	mov	r5,r17
    4198:	000b7bc0 	call	b7bc <__gedf2>
    419c:	00802a0e 	bge	zero,r2,4248 <pow+0x278>
    41a0:	9805883a 	mov	r2,r19
    41a4:	a007883a 	mov	r3,r20
    41a8:	dfc00817 	ldw	ra,32(sp)
    41ac:	ddc00717 	ldw	r23,28(sp)
    41b0:	dd800617 	ldw	r22,24(sp)
    41b4:	dd400517 	ldw	r21,20(sp)
    41b8:	dd000417 	ldw	r20,16(sp)
    41bc:	dcc00317 	ldw	r19,12(sp)
    41c0:	dc800217 	ldw	r18,8(sp)
    41c4:	dc400117 	ldw	r17,4(sp)
    41c8:	dc000017 	ldw	r16,0(sp)
    41cc:	dec00904 	addi	sp,sp,36
    41d0:	f800283a 	ret
    41d4:	000d883a 	mov	r6,zero
    41d8:	000f883a 	mov	r7,zero
    41dc:	8009883a 	mov	r4,r16
    41e0:	880b883a 	mov	r5,r17
    41e4:	000b73c0 	call	b73c <__eqdf2>
    41e8:	10001b26 	beq	r2,zero,4258 <pow+0x288>
    41ec:	01600034 	movhi	r5,32768
    41f0:	297fffc4 	addi	r5,r5,-1
    41f4:	8964703a 	and	r18,r17,r5
    41f8:	01dffc34 	movhi	r7,32752
    41fc:	01bfffc4 	movi	r6,-1
    4200:	39ffffc4 	addi	r7,r7,-1
    4204:	8009883a 	mov	r4,r16
    4208:	900b883a 	mov	r5,r18
    420c:	000c90c0 	call	c90c <__unorddf2>
    4210:	103fe31e 	bne	r2,zero,41a0 <pow+0x1d0>
    4214:	01dffc34 	movhi	r7,32752
    4218:	01bfffc4 	movi	r6,-1
    421c:	39ffffc4 	addi	r7,r7,-1
    4220:	8009883a 	mov	r4,r16
    4224:	900b883a 	mov	r5,r18
    4228:	000b7bc0 	call	b7bc <__gedf2>
    422c:	00bfdc16 	blt	zero,r2,41a0 <pow+0x1d0>
    4230:	000d883a 	mov	r6,zero
    4234:	000f883a 	mov	r7,zero
    4238:	8009883a 	mov	r4,r16
    423c:	880b883a 	mov	r5,r17
    4240:	000b8a40 	call	b8a4 <__ledf2>
    4244:	103fd60e 	bge	r2,zero,41a0 <pow+0x1d0>
    4248:	000cde80 	call	cde8 <__errno>
    424c:	00c00884 	movi	r3,34
    4250:	10c00015 	stw	r3,0(r2)
    4254:	003fd206 	br	41a0 <pow+0x1d0>
    4258:	0027883a 	mov	r19,zero
    425c:	050ffc34 	movhi	r20,16368
    4260:	003fcf06 	br	41a0 <pow+0x1d0>
    4264:	980d883a 	mov	r6,r19
    4268:	a00f883a 	mov	r7,r20
    426c:	9809883a 	mov	r4,r19
    4270:	a00b883a 	mov	r5,r20
    4274:	000c90c0 	call	c90c <__unorddf2>
    4278:	103ff326 	beq	r2,zero,4248 <pow+0x278>
    427c:	000cde80 	call	cde8 <__errno>
    4280:	00c00844 	movi	r3,33
    4284:	10c00015 	stw	r3,0(r2)
    4288:	003fc506 	br	41a0 <pow+0x1d0>

0000428c <sqrt>:
    428c:	defffb04 	addi	sp,sp,-20
    4290:	dcc00315 	stw	r19,12(sp)
    4294:	dc800215 	stw	r18,8(sp)
    4298:	dc400115 	stw	r17,4(sp)
    429c:	dc000015 	stw	r16,0(sp)
    42a0:	2023883a 	mov	r17,r4
    42a4:	2821883a 	mov	r16,r5
    42a8:	dfc00415 	stw	ra,16(sp)
    42ac:	00062180 	call	6218 <__ieee754_sqrt>
    42b0:	880d883a 	mov	r6,r17
    42b4:	800f883a 	mov	r7,r16
    42b8:	8809883a 	mov	r4,r17
    42bc:	800b883a 	mov	r5,r16
    42c0:	1027883a 	mov	r19,r2
    42c4:	1825883a 	mov	r18,r3
    42c8:	000c90c0 	call	c90c <__unorddf2>
    42cc:	1000061e 	bne	r2,zero,42e8 <sqrt+0x5c>
    42d0:	000d883a 	mov	r6,zero
    42d4:	000f883a 	mov	r7,zero
    42d8:	8809883a 	mov	r4,r17
    42dc:	800b883a 	mov	r5,r16
    42e0:	000b8a40 	call	b8a4 <__ledf2>
    42e4:	10000916 	blt	r2,zero,430c <sqrt+0x80>
    42e8:	9805883a 	mov	r2,r19
    42ec:	9007883a 	mov	r3,r18
    42f0:	dfc00417 	ldw	ra,16(sp)
    42f4:	dcc00317 	ldw	r19,12(sp)
    42f8:	dc800217 	ldw	r18,8(sp)
    42fc:	dc400117 	ldw	r17,4(sp)
    4300:	dc000017 	ldw	r16,0(sp)
    4304:	dec00504 	addi	sp,sp,20
    4308:	f800283a 	ret
    430c:	000cde80 	call	cde8 <__errno>
    4310:	00c00844 	movi	r3,33
    4314:	10c00015 	stw	r3,0(r2)
    4318:	000d883a 	mov	r6,zero
    431c:	000f883a 	mov	r7,zero
    4320:	0009883a 	mov	r4,zero
    4324:	000b883a 	mov	r5,zero
    4328:	000aeec0 	call	aeec <__divdf3>
    432c:	1027883a 	mov	r19,r2
    4330:	1825883a 	mov	r18,r3
    4334:	003fec06 	br	42e8 <sqrt+0x5c>

00004338 <__ieee754_log>:
    4338:	defff204 	addi	sp,sp,-56
    433c:	dfc00d15 	stw	ra,52(sp)
    4340:	df000c15 	stw	fp,48(sp)
    4344:	ddc00b15 	stw	r23,44(sp)
    4348:	dd800a15 	stw	r22,40(sp)
    434c:	dd400915 	stw	r21,36(sp)
    4350:	dd000815 	stw	r20,32(sp)
    4354:	dcc00715 	stw	r19,28(sp)
    4358:	dc800615 	stw	r18,24(sp)
    435c:	dc400515 	stw	r17,20(sp)
    4360:	dc000415 	stw	r16,16(sp)
    4364:	01800434 	movhi	r6,16
    4368:	2005883a 	mov	r2,r4
    436c:	280f883a 	mov	r7,r5
    4370:	2980690e 	bge	r5,r6,4518 <__ieee754_log+0x1e0>
    4374:	00e00034 	movhi	r3,32768
    4378:	18ffffc4 	addi	r3,r3,-1
    437c:	28c6703a 	and	r3,r5,r3
    4380:	1906b03a 	or	r3,r3,r4
    4384:	18011d26 	beq	r3,zero,47fc <__ieee754_log+0x4c4>
    4388:	28015c16 	blt	r5,zero,48fc <__ieee754_log+0x5c4>
    438c:	000d883a 	mov	r6,zero
    4390:	01d0d434 	movhi	r7,17232
    4394:	000b98c0 	call	b98c <__muldf3>
    4398:	011ffc34 	movhi	r4,32752
    439c:	180f883a 	mov	r7,r3
    43a0:	01bff284 	movi	r6,-54
    43a4:	1900600e 	bge	r3,r4,4528 <__ieee754_log+0x1f0>
    43a8:	04000434 	movhi	r16,16
    43ac:	843fffc4 	addi	r16,r16,-1
    43b0:	01400274 	movhi	r5,9
    43b4:	1c24703a 	and	r18,r3,r16
    43b8:	2957d904 	addi	r5,r5,24420
    43bc:	1807d53a 	srai	r3,r3,20
    43c0:	914b883a 	add	r5,r18,r5
    43c4:	2940042c 	andhi	r5,r5,16
    43c8:	2827d53a 	srai	r19,r5,20
    43cc:	18ff0044 	addi	r3,r3,-1023
    43d0:	294ffc3c 	xorhi	r5,r5,16368
    43d4:	1987883a 	add	r3,r3,r6
    43d8:	2c8ab03a 	or	r5,r5,r18
    43dc:	000d883a 	mov	r6,zero
    43e0:	01cffc34 	movhi	r7,16368
    43e4:	1009883a 	mov	r4,r2
    43e8:	98e7883a 	add	r19,r19,r3
    43ec:	000c0000 	call	c000 <__subdf3>
    43f0:	91400084 	addi	r5,r18,2
    43f4:	2c0a703a 	and	r5,r5,r16
    43f8:	294000c8 	cmpgei	r5,r5,3
    43fc:	000d883a 	mov	r6,zero
    4400:	1023883a 	mov	r17,r2
    4404:	1821883a 	mov	r16,r3
    4408:	2800571e 	bne	r5,zero,4568 <__ieee754_log+0x230>
    440c:	000f883a 	mov	r7,zero
    4410:	1009883a 	mov	r4,r2
    4414:	180b883a 	mov	r5,r3
    4418:	000b73c0 	call	b73c <__eqdf2>
    441c:	1000fd26 	beq	r2,zero,4814 <__ieee754_log+0x4dc>
    4420:	01955574 	movhi	r6,21845
    4424:	01cff574 	movhi	r7,16341
    4428:	8809883a 	mov	r4,r17
    442c:	800b883a 	mov	r5,r16
    4430:	31955544 	addi	r6,r6,21845
    4434:	39d55544 	addi	r7,r7,21845
    4438:	000b98c0 	call	b98c <__muldf3>
    443c:	100d883a 	mov	r6,r2
    4440:	180f883a 	mov	r7,r3
    4444:	0009883a 	mov	r4,zero
    4448:	014ff834 	movhi	r5,16352
    444c:	000c0000 	call	c000 <__subdf3>
    4450:	880d883a 	mov	r6,r17
    4454:	800f883a 	mov	r7,r16
    4458:	8809883a 	mov	r4,r17
    445c:	800b883a 	mov	r5,r16
    4460:	1029883a 	mov	r20,r2
    4464:	1825883a 	mov	r18,r3
    4468:	000b98c0 	call	b98c <__muldf3>
    446c:	a009883a 	mov	r4,r20
    4470:	900b883a 	mov	r5,r18
    4474:	100d883a 	mov	r6,r2
    4478:	180f883a 	mov	r7,r3
    447c:	000b98c0 	call	b98c <__muldf3>
    4480:	1029883a 	mov	r20,r2
    4484:	1825883a 	mov	r18,r3
    4488:	98011626 	beq	r19,zero,48e4 <__ieee754_log+0x5ac>
    448c:	9809883a 	mov	r4,r19
    4490:	000c9e00 	call	c9e0 <__floatsidf>
    4494:	01cff9b4 	movhi	r7,16358
    4498:	01bfb834 	movhi	r6,65248
    449c:	39cb9084 	addi	r7,r7,11842
    44a0:	1009883a 	mov	r4,r2
    44a4:	180b883a 	mov	r5,r3
    44a8:	102b883a 	mov	r21,r2
    44ac:	1827883a 	mov	r19,r3
    44b0:	000b98c0 	call	b98c <__muldf3>
    44b4:	018d5e74 	movhi	r6,13689
    44b8:	01cf7ab4 	movhi	r7,15850
    44bc:	318f1d84 	addi	r6,r6,15478
    44c0:	39ce7bc4 	addi	r7,r7,14831
    44c4:	a809883a 	mov	r4,r21
    44c8:	980b883a 	mov	r5,r19
    44cc:	102b883a 	mov	r21,r2
    44d0:	1827883a 	mov	r19,r3
    44d4:	000b98c0 	call	b98c <__muldf3>
    44d8:	a009883a 	mov	r4,r20
    44dc:	900b883a 	mov	r5,r18
    44e0:	100d883a 	mov	r6,r2
    44e4:	180f883a 	mov	r7,r3
    44e8:	000c0000 	call	c000 <__subdf3>
    44ec:	880d883a 	mov	r6,r17
    44f0:	800f883a 	mov	r7,r16
    44f4:	1009883a 	mov	r4,r2
    44f8:	180b883a 	mov	r5,r3
    44fc:	000c0000 	call	c000 <__subdf3>
    4500:	100d883a 	mov	r6,r2
    4504:	180f883a 	mov	r7,r3
    4508:	a809883a 	mov	r4,r21
    450c:	980b883a 	mov	r5,r19
    4510:	000c0000 	call	c000 <__subdf3>
    4514:	00000806 	br	4538 <__ieee754_log+0x200>
    4518:	2807883a 	mov	r3,r5
    451c:	011ffc34 	movhi	r4,32752
    4520:	000d883a 	mov	r6,zero
    4524:	193fa016 	blt	r3,r4,43a8 <__ieee754_log+0x70>
    4528:	100d883a 	mov	r6,r2
    452c:	1009883a 	mov	r4,r2
    4530:	380b883a 	mov	r5,r7
    4534:	000a5fc0 	call	a5fc <__adddf3>
    4538:	dfc00d17 	ldw	ra,52(sp)
    453c:	df000c17 	ldw	fp,48(sp)
    4540:	ddc00b17 	ldw	r23,44(sp)
    4544:	dd800a17 	ldw	r22,40(sp)
    4548:	dd400917 	ldw	r21,36(sp)
    454c:	dd000817 	ldw	r20,32(sp)
    4550:	dcc00717 	ldw	r19,28(sp)
    4554:	dc800617 	ldw	r18,24(sp)
    4558:	dc400517 	ldw	r17,20(sp)
    455c:	dc000417 	ldw	r16,16(sp)
    4560:	dec00e04 	addi	sp,sp,56
    4564:	f800283a 	ret
    4568:	01d00034 	movhi	r7,16384
    456c:	1009883a 	mov	r4,r2
    4570:	180b883a 	mov	r5,r3
    4574:	000a5fc0 	call	a5fc <__adddf3>
    4578:	100d883a 	mov	r6,r2
    457c:	180f883a 	mov	r7,r3
    4580:	800b883a 	mov	r5,r16
    4584:	8809883a 	mov	r4,r17
    4588:	000aeec0 	call	aeec <__divdf3>
    458c:	9809883a 	mov	r4,r19
    4590:	102d883a 	mov	r22,r2
    4594:	182b883a 	mov	r21,r3
    4598:	000c9e00 	call	c9e0 <__floatsidf>
    459c:	b00d883a 	mov	r6,r22
    45a0:	a80f883a 	mov	r7,r21
    45a4:	b009883a 	mov	r4,r22
    45a8:	a80b883a 	mov	r5,r21
    45ac:	1039883a 	mov	fp,r2
    45b0:	d8c00315 	stw	r3,12(sp)
    45b4:	000b98c0 	call	b98c <__muldf3>
    45b8:	1015883a 	mov	r10,r2
    45bc:	00bffeb4 	movhi	r2,65530
    45c0:	10bae184 	addi	r2,r2,-5242
    45c4:	9097883a 	add	r11,r18,r2
    45c8:	500d883a 	mov	r6,r10
    45cc:	5009883a 	mov	r4,r10
    45d0:	180f883a 	mov	r7,r3
    45d4:	180b883a 	mov	r5,r3
    45d8:	dac00215 	stw	r11,8(sp)
    45dc:	da800115 	stw	r10,4(sp)
    45e0:	d8c00015 	stw	r3,0(sp)
    45e4:	000b98c0 	call	b98c <__muldf3>
    45e8:	01b7cfb4 	movhi	r6,57150
    45ec:	01cff0f4 	movhi	r7,16323
    45f0:	31949104 	addi	r6,r6,21060
    45f4:	39fc4484 	addi	r7,r7,-3822
    45f8:	1009883a 	mov	r4,r2
    45fc:	180b883a 	mov	r5,r3
    4600:	1829883a 	mov	r20,r3
    4604:	102f883a 	mov	r23,r2
    4608:	000b98c0 	call	b98c <__muldf3>
    460c:	01a5b2f4 	movhi	r6,38603
    4610:	01cff1f4 	movhi	r7,16327
    4614:	3180f784 	addi	r6,r6,990
    4618:	39d19904 	addi	r7,r7,18020
    461c:	1009883a 	mov	r4,r2
    4620:	180b883a 	mov	r5,r3
    4624:	000a5fc0 	call	a5fc <__adddf3>
    4628:	a00f883a 	mov	r7,r20
    462c:	b80d883a 	mov	r6,r23
    4630:	1009883a 	mov	r4,r2
    4634:	180b883a 	mov	r5,r3
    4638:	000b98c0 	call	b98c <__muldf3>
    463c:	01a508f4 	movhi	r6,37923
    4640:	01cff4b4 	movhi	r7,16338
    4644:	31a4d644 	addi	r6,r6,-27815
    4648:	39d24904 	addi	r7,r7,18724
    464c:	1009883a 	mov	r4,r2
    4650:	180b883a 	mov	r5,r3
    4654:	000a5fc0 	call	a5fc <__adddf3>
    4658:	a00f883a 	mov	r7,r20
    465c:	b80d883a 	mov	r6,r23
    4660:	1009883a 	mov	r4,r2
    4664:	180b883a 	mov	r5,r3
    4668:	000b98c0 	call	b98c <__muldf3>
    466c:	01955574 	movhi	r6,21845
    4670:	01cff974 	movhi	r7,16357
    4674:	319564c4 	addi	r6,r6,21907
    4678:	39d55544 	addi	r7,r7,21845
    467c:	1009883a 	mov	r4,r2
    4680:	180b883a 	mov	r5,r3
    4684:	000a5fc0 	call	a5fc <__adddf3>
    4688:	da800117 	ldw	r10,4(sp)
    468c:	da400017 	ldw	r9,0(sp)
    4690:	1009883a 	mov	r4,r2
    4694:	500d883a 	mov	r6,r10
    4698:	480f883a 	mov	r7,r9
    469c:	180b883a 	mov	r5,r3
    46a0:	000b98c0 	call	b98c <__muldf3>
    46a4:	01b41e74 	movhi	r6,53369
    46a8:	01cff134 	movhi	r7,16324
    46ac:	a00b883a 	mov	r5,r20
    46b0:	31b1a7c4 	addi	r6,r6,-14689
    46b4:	39e68244 	addi	r7,r7,-26103
    46b8:	b809883a 	mov	r4,r23
    46bc:	d8800115 	stw	r2,4(sp)
    46c0:	d8c00015 	stw	r3,0(sp)
    46c4:	000b98c0 	call	b98c <__muldf3>
    46c8:	018763b4 	movhi	r6,7566
    46cc:	01cff334 	movhi	r7,16332
    46d0:	319e2bc4 	addi	r6,r6,30895
    46d4:	39dc7144 	addi	r7,r7,29125
    46d8:	1009883a 	mov	r4,r2
    46dc:	180b883a 	mov	r5,r3
    46e0:	000a5fc0 	call	a5fc <__adddf3>
    46e4:	a00f883a 	mov	r7,r20
    46e8:	b80d883a 	mov	r6,r23
    46ec:	1009883a 	mov	r4,r2
    46f0:	180b883a 	mov	r5,r3
    46f4:	000b98c0 	call	b98c <__muldf3>
    46f8:	01a66634 	movhi	r6,39320
    46fc:	01cff6b4 	movhi	r7,16346
    4700:	31be8104 	addi	r6,r6,-1532
    4704:	39e66644 	addi	r7,r7,-26215
    4708:	1009883a 	mov	r4,r2
    470c:	180b883a 	mov	r5,r3
    4710:	000a5fc0 	call	a5fc <__adddf3>
    4714:	a00f883a 	mov	r7,r20
    4718:	b80d883a 	mov	r6,r23
    471c:	1009883a 	mov	r4,r2
    4720:	180b883a 	mov	r5,r3
    4724:	000b98c0 	call	b98c <__muldf3>
    4728:	da800117 	ldw	r10,4(sp)
    472c:	da400017 	ldw	r9,0(sp)
    4730:	100d883a 	mov	r6,r2
    4734:	180f883a 	mov	r7,r3
    4738:	480b883a 	mov	r5,r9
    473c:	5009883a 	mov	r4,r10
    4740:	000a5fc0 	call	a5fc <__adddf3>
    4744:	dac00217 	ldw	r11,8(sp)
    4748:	014001f4 	movhi	r5,7
    474c:	296e1444 	addi	r5,r5,-18351
    4750:	2ca5c83a 	sub	r18,r5,r18
    4754:	92e4b03a 	or	r18,r18,r11
    4758:	1829883a 	mov	r20,r3
    475c:	0480470e 	bge	zero,r18,487c <__ieee754_log+0x544>
    4760:	000d883a 	mov	r6,zero
    4764:	01cff834 	movhi	r7,16352
    4768:	8809883a 	mov	r4,r17
    476c:	800b883a 	mov	r5,r16
    4770:	d8800115 	stw	r2,4(sp)
    4774:	000b98c0 	call	b98c <__muldf3>
    4778:	880d883a 	mov	r6,r17
    477c:	800f883a 	mov	r7,r16
    4780:	1009883a 	mov	r4,r2
    4784:	180b883a 	mov	r5,r3
    4788:	000b98c0 	call	b98c <__muldf3>
    478c:	da000117 	ldw	r8,4(sp)
    4790:	a00b883a 	mov	r5,r20
    4794:	100d883a 	mov	r6,r2
    4798:	4009883a 	mov	r4,r8
    479c:	180f883a 	mov	r7,r3
    47a0:	1825883a 	mov	r18,r3
    47a4:	d8800015 	stw	r2,0(sp)
    47a8:	000a5fc0 	call	a5fc <__adddf3>
    47ac:	a80f883a 	mov	r7,r21
    47b0:	b00d883a 	mov	r6,r22
    47b4:	1009883a 	mov	r4,r2
    47b8:	180b883a 	mov	r5,r3
    47bc:	000b98c0 	call	b98c <__muldf3>
    47c0:	da400017 	ldw	r9,0(sp)
    47c4:	102b883a 	mov	r21,r2
    47c8:	1829883a 	mov	r20,r3
    47cc:	9800531e 	bne	r19,zero,491c <__ieee754_log+0x5e4>
    47d0:	4809883a 	mov	r4,r9
    47d4:	900b883a 	mov	r5,r18
    47d8:	100d883a 	mov	r6,r2
    47dc:	180f883a 	mov	r7,r3
    47e0:	000c0000 	call	c000 <__subdf3>
    47e4:	100d883a 	mov	r6,r2
    47e8:	180f883a 	mov	r7,r3
    47ec:	8809883a 	mov	r4,r17
    47f0:	800b883a 	mov	r5,r16
    47f4:	000c0000 	call	c000 <__subdf3>
    47f8:	003f4f06 	br	4538 <__ieee754_log+0x200>
    47fc:	000d883a 	mov	r6,zero
    4800:	000f883a 	mov	r7,zero
    4804:	0009883a 	mov	r4,zero
    4808:	0170d434 	movhi	r5,50000
    480c:	000aeec0 	call	aeec <__divdf3>
    4810:	003f4906 	br	4538 <__ieee754_log+0x200>
    4814:	98006826 	beq	r19,zero,49b8 <__ieee754_log+0x680>
    4818:	9809883a 	mov	r4,r19
    481c:	000c9e00 	call	c9e0 <__floatsidf>
    4820:	01cff9b4 	movhi	r7,16358
    4824:	01bfb834 	movhi	r6,65248
    4828:	39cb9084 	addi	r7,r7,11842
    482c:	1009883a 	mov	r4,r2
    4830:	180b883a 	mov	r5,r3
    4834:	1023883a 	mov	r17,r2
    4838:	1821883a 	mov	r16,r3
    483c:	000b98c0 	call	b98c <__muldf3>
    4840:	018d5e74 	movhi	r6,13689
    4844:	01cf7ab4 	movhi	r7,15850
    4848:	8809883a 	mov	r4,r17
    484c:	800b883a 	mov	r5,r16
    4850:	318f1d84 	addi	r6,r6,15478
    4854:	39ce7bc4 	addi	r7,r7,14831
    4858:	1027883a 	mov	r19,r2
    485c:	1825883a 	mov	r18,r3
    4860:	000b98c0 	call	b98c <__muldf3>
    4864:	100d883a 	mov	r6,r2
    4868:	180f883a 	mov	r7,r3
    486c:	9809883a 	mov	r4,r19
    4870:	900b883a 	mov	r5,r18
    4874:	000a5fc0 	call	a5fc <__adddf3>
    4878:	003f2f06 	br	4538 <__ieee754_log+0x200>
    487c:	100d883a 	mov	r6,r2
    4880:	180f883a 	mov	r7,r3
    4884:	8809883a 	mov	r4,r17
    4888:	800b883a 	mov	r5,r16
    488c:	000c0000 	call	c000 <__subdf3>
    4890:	b00d883a 	mov	r6,r22
    4894:	a80f883a 	mov	r7,r21
    4898:	1009883a 	mov	r4,r2
    489c:	180b883a 	mov	r5,r3
    48a0:	000b98c0 	call	b98c <__muldf3>
    48a4:	1029883a 	mov	r20,r2
    48a8:	1825883a 	mov	r18,r3
    48ac:	98000d26 	beq	r19,zero,48e4 <__ieee754_log+0x5ac>
    48b0:	dcc00317 	ldw	r19,12(sp)
    48b4:	01cff9b4 	movhi	r7,16358
    48b8:	01bfb834 	movhi	r6,65248
    48bc:	39cb9084 	addi	r7,r7,11842
    48c0:	e009883a 	mov	r4,fp
    48c4:	980b883a 	mov	r5,r19
    48c8:	000b98c0 	call	b98c <__muldf3>
    48cc:	018d5e74 	movhi	r6,13689
    48d0:	01cf7ab4 	movhi	r7,15850
    48d4:	318f1d84 	addi	r6,r6,15478
    48d8:	39ce7bc4 	addi	r7,r7,14831
    48dc:	e009883a 	mov	r4,fp
    48e0:	003ef906 	br	44c8 <__ieee754_log+0x190>
    48e4:	a00d883a 	mov	r6,r20
    48e8:	900f883a 	mov	r7,r18
    48ec:	8809883a 	mov	r4,r17
    48f0:	800b883a 	mov	r5,r16
    48f4:	000c0000 	call	c000 <__subdf3>
    48f8:	003f0f06 	br	4538 <__ieee754_log+0x200>
    48fc:	200d883a 	mov	r6,r4
    4900:	000c0000 	call	c000 <__subdf3>
    4904:	000d883a 	mov	r6,zero
    4908:	000f883a 	mov	r7,zero
    490c:	1009883a 	mov	r4,r2
    4910:	180b883a 	mov	r5,r3
    4914:	000aeec0 	call	aeec <__divdf3>
    4918:	003f0706 	br	4538 <__ieee754_log+0x200>
    491c:	dcc00317 	ldw	r19,12(sp)
    4920:	01cff9b4 	movhi	r7,16358
    4924:	e009883a 	mov	r4,fp
    4928:	980b883a 	mov	r5,r19
    492c:	01bfb834 	movhi	r6,65248
    4930:	39cb9084 	addi	r7,r7,11842
    4934:	da400015 	stw	r9,0(sp)
    4938:	000b98c0 	call	b98c <__muldf3>
    493c:	018d5e74 	movhi	r6,13689
    4940:	01cf7ab4 	movhi	r7,15850
    4944:	e009883a 	mov	r4,fp
    4948:	980b883a 	mov	r5,r19
    494c:	318f1d84 	addi	r6,r6,15478
    4950:	39ce7bc4 	addi	r7,r7,14831
    4954:	102d883a 	mov	r22,r2
    4958:	1827883a 	mov	r19,r3
    495c:	000b98c0 	call	b98c <__muldf3>
    4960:	a80d883a 	mov	r6,r21
    4964:	a00f883a 	mov	r7,r20
    4968:	1009883a 	mov	r4,r2
    496c:	180b883a 	mov	r5,r3
    4970:	000a5fc0 	call	a5fc <__adddf3>
    4974:	da400017 	ldw	r9,0(sp)
    4978:	900b883a 	mov	r5,r18
    497c:	100d883a 	mov	r6,r2
    4980:	4809883a 	mov	r4,r9
    4984:	180f883a 	mov	r7,r3
    4988:	000c0000 	call	c000 <__subdf3>
    498c:	880d883a 	mov	r6,r17
    4990:	800f883a 	mov	r7,r16
    4994:	1009883a 	mov	r4,r2
    4998:	180b883a 	mov	r5,r3
    499c:	000c0000 	call	c000 <__subdf3>
    49a0:	100d883a 	mov	r6,r2
    49a4:	180f883a 	mov	r7,r3
    49a8:	b009883a 	mov	r4,r22
    49ac:	980b883a 	mov	r5,r19
    49b0:	000c0000 	call	c000 <__subdf3>
    49b4:	003ee006 	br	4538 <__ieee754_log+0x200>
    49b8:	0005883a 	mov	r2,zero
    49bc:	0007883a 	mov	r3,zero
    49c0:	003edd06 	br	4538 <__ieee754_log+0x200>

000049c4 <__ieee754_pow>:
    49c4:	00e00034 	movhi	r3,32768
    49c8:	deffeb04 	addi	sp,sp,-84
    49cc:	18ffffc4 	addi	r3,r3,-1
    49d0:	dc000b15 	stw	r16,44(sp)
    49d4:	3021883a 	mov	r16,r6
    49d8:	38cc703a 	and	r6,r7,r3
    49dc:	dd401015 	stw	r21,64(sp)
    49e0:	dc400c15 	stw	r17,48(sp)
    49e4:	dfc01415 	stw	ra,80(sp)
    49e8:	df001315 	stw	fp,76(sp)
    49ec:	ddc01215 	stw	r23,72(sp)
    49f0:	dd801115 	stw	r22,68(sp)
    49f4:	dd000f15 	stw	r20,60(sp)
    49f8:	dcc00e15 	stw	r19,56(sp)
    49fc:	dc800d15 	stw	r18,52(sp)
    4a00:	3404b03a 	or	r2,r6,r16
    4a04:	3823883a 	mov	r17,r7
    4a08:	282b883a 	mov	r21,r5
    4a0c:	1000191e 	bne	r2,zero,4a74 <__ieee754_pow+0xb0>
    4a10:	2880023c 	xorhi	r2,r5,8
    4a14:	2006d7fa 	srli	r3,r4,31
    4a18:	1004907a 	slli	r2,r2,1
    4a1c:	017ffc34 	movhi	r5,65520
    4a20:	200c907a 	slli	r6,r4,1
    4a24:	1884b03a 	or	r2,r3,r2
    4a28:	2880202e 	bgeu	r5,r2,4aac <__ieee754_pow+0xe8>
    4a2c:	800d883a 	mov	r6,r16
    4a30:	880f883a 	mov	r7,r17
    4a34:	a80b883a 	mov	r5,r21
    4a38:	000a5fc0 	call	a5fc <__adddf3>
    4a3c:	102d883a 	mov	r22,r2
    4a40:	b005883a 	mov	r2,r22
    4a44:	dfc01417 	ldw	ra,80(sp)
    4a48:	df001317 	ldw	fp,76(sp)
    4a4c:	ddc01217 	ldw	r23,72(sp)
    4a50:	dd801117 	ldw	r22,68(sp)
    4a54:	dd401017 	ldw	r21,64(sp)
    4a58:	dd000f17 	ldw	r20,60(sp)
    4a5c:	dcc00e17 	ldw	r19,56(sp)
    4a60:	dc800d17 	ldw	r18,52(sp)
    4a64:	dc400c17 	ldw	r17,48(sp)
    4a68:	dc000b17 	ldw	r16,44(sp)
    4a6c:	dec01504 	addi	sp,sp,84
    4a70:	f800283a 	ret
    4a74:	28e6703a 	and	r19,r5,r3
    4a78:	009ffc34 	movhi	r2,32752
    4a7c:	14c00f0e 	bge	r2,r19,4abc <__ieee754_pow+0xf8>
    4a80:	00b00434 	movhi	r2,49168
    4a84:	a885883a 	add	r2,r21,r2
    4a88:	1104b03a 	or	r2,r2,r4
    4a8c:	103fe71e 	bne	r2,zero,4a2c <__ieee754_pow+0x68>
    4a90:	8880023c 	xorhi	r2,r17,8
    4a94:	8006d7fa 	srli	r3,r16,31
    4a98:	1004907a 	slli	r2,r2,1
    4a9c:	017ffc34 	movhi	r5,65520
    4aa0:	800c907a 	slli	r6,r16,1
    4aa4:	1884b03a 	or	r2,r3,r2
    4aa8:	28bfe036 	bltu	r5,r2,4a2c <__ieee754_pow+0x68>
    4aac:	11402726 	beq	r2,r5,4b4c <__ieee754_pow+0x188>
    4ab0:	002d883a 	mov	r22,zero
    4ab4:	00cffc34 	movhi	r3,16368
    4ab8:	003fe106 	br	4a40 <__ieee754_pow+0x7c>
    4abc:	98802526 	beq	r19,r2,4b54 <__ieee754_pow+0x190>
    4ac0:	009ffc34 	movhi	r2,32752
    4ac4:	11bfee16 	blt	r2,r6,4a80 <__ieee754_pow+0xbc>
    4ac8:	30802426 	beq	r6,r2,4b5c <__ieee754_pow+0x198>
    4acc:	a8006e16 	blt	r21,zero,4c88 <__ieee754_pow+0x2c4>
    4ad0:	0025883a 	mov	r18,zero
    4ad4:	80002326 	beq	r16,zero,4b64 <__ieee754_pow+0x1a0>
    4ad8:	00e00034 	movhi	r3,32768
    4adc:	18ffffc4 	addi	r3,r3,-1
    4ae0:	202d883a 	mov	r22,r4
    4ae4:	a8c6703a 	and	r3,r21,r3
    4ae8:	20003a26 	beq	r4,zero,4bd4 <__ieee754_pow+0x210>
    4aec:	a828d7fa 	srli	r20,r21,31
    4af0:	a53fffc4 	addi	r20,r20,-1
    4af4:	9504b03a 	or	r2,r18,r20
    4af8:	10008026 	beq	r2,zero,4cfc <__ieee754_pow+0x338>
    4afc:	00907834 	movhi	r2,16864
    4b00:	1180810e 	bge	r2,r6,4d08 <__ieee754_pow+0x344>
    4b04:	0090fc34 	movhi	r2,17392
    4b08:	11834f0e 	bge	r2,r6,5848 <__ieee754_pow+0xe84>
    4b0c:	008ffc34 	movhi	r2,16368
    4b10:	9880480e 	bge	r19,r2,4c34 <__ieee754_pow+0x270>
    4b14:	88004816 	blt	r17,zero,4c38 <__ieee754_pow+0x274>
    4b18:	0009883a 	mov	r4,zero
    4b1c:	dfc01417 	ldw	ra,80(sp)
    4b20:	df001317 	ldw	fp,76(sp)
    4b24:	ddc01217 	ldw	r23,72(sp)
    4b28:	dd801117 	ldw	r22,68(sp)
    4b2c:	dd401017 	ldw	r21,64(sp)
    4b30:	dd000f17 	ldw	r20,60(sp)
    4b34:	dcc00e17 	ldw	r19,56(sp)
    4b38:	dc800d17 	ldw	r18,52(sp)
    4b3c:	dc400c17 	ldw	r17,48(sp)
    4b40:	dc000b17 	ldw	r16,44(sp)
    4b44:	dec01504 	addi	sp,sp,84
    4b48:	0008dd41 	jmpi	8dd4 <__math_uflow>
    4b4c:	303fd826 	beq	r6,zero,4ab0 <__ieee754_pow+0xec>
    4b50:	003fb606 	br	4a2c <__ieee754_pow+0x68>
    4b54:	203fb51e 	bne	r4,zero,4a2c <__ieee754_pow+0x68>
    4b58:	003fd906 	br	4ac0 <__ieee754_pow+0xfc>
    4b5c:	803fdb26 	beq	r16,zero,4acc <__ieee754_pow+0x108>
    4b60:	003fc706 	br	4a80 <__ieee754_pow+0xbc>
    4b64:	009ffc34 	movhi	r2,32752
    4b68:	30805a26 	beq	r6,r2,4cd4 <__ieee754_pow+0x310>
    4b6c:	008ffc34 	movhi	r2,16368
    4b70:	30831026 	beq	r6,r2,57b4 <__ieee754_pow+0xdf0>
    4b74:	00900034 	movhi	r2,16384
    4b78:	8883a626 	beq	r17,r2,5a14 <__ieee754_pow+0x1050>
    4b7c:	008ff834 	movhi	r2,16352
    4b80:	88bfd51e 	bne	r17,r2,4ad8 <__ieee754_pow+0x114>
    4b84:	a83fd416 	blt	r21,zero,4ad8 <__ieee754_pow+0x114>
    4b88:	a80b883a 	mov	r5,r21
    4b8c:	dfc01417 	ldw	ra,80(sp)
    4b90:	df001317 	ldw	fp,76(sp)
    4b94:	ddc01217 	ldw	r23,72(sp)
    4b98:	dd801117 	ldw	r22,68(sp)
    4b9c:	dd401017 	ldw	r21,64(sp)
    4ba0:	dd000f17 	ldw	r20,60(sp)
    4ba4:	dcc00e17 	ldw	r19,56(sp)
    4ba8:	dc800d17 	ldw	r18,52(sp)
    4bac:	dc400c17 	ldw	r17,48(sp)
    4bb0:	dc000b17 	ldw	r16,44(sp)
    4bb4:	dec01504 	addi	sp,sp,84
    4bb8:	00062181 	jmpi	6218 <__ieee754_sqrt>
    4bbc:	20004f1e 	bne	r4,zero,4cfc <__ieee754_pow+0x338>
    4bc0:	00e00034 	movhi	r3,32768
    4bc4:	18ffffc4 	addi	r3,r3,-1
    4bc8:	002d883a 	mov	r22,zero
    4bcc:	a8c6703a 	and	r3,r21,r3
    4bd0:	0025883a 	mov	r18,zero
    4bd4:	98000526 	beq	r19,zero,4bec <__ieee754_pow+0x228>
    4bd8:	00900034 	movhi	r2,16384
    4bdc:	10bfffc4 	addi	r2,r2,-1
    4be0:	a884703a 	and	r2,r21,r2
    4be4:	014ffc34 	movhi	r5,16368
    4be8:	117fc01e 	bne	r2,r5,4aec <__ieee754_pow+0x128>
    4bec:	88001f16 	blt	r17,zero,4c6c <__ieee754_pow+0x2a8>
    4bf0:	a83f930e 	bge	r21,zero,4a40 <__ieee754_pow+0x7c>
    4bf4:	00b00434 	movhi	r2,49168
    4bf8:	9885883a 	add	r2,r19,r2
    4bfc:	1484b03a 	or	r2,r2,r18
    4c00:	10038a1e 	bne	r2,zero,5a2c <__ieee754_pow+0x1068>
    4c04:	b00d883a 	mov	r6,r22
    4c08:	180f883a 	mov	r7,r3
    4c0c:	3009883a 	mov	r4,r6
    4c10:	380b883a 	mov	r5,r7
    4c14:	000c0000 	call	c000 <__subdf3>
    4c18:	100d883a 	mov	r6,r2
    4c1c:	180f883a 	mov	r7,r3
    4c20:	1009883a 	mov	r4,r2
    4c24:	180b883a 	mov	r5,r3
    4c28:	000aeec0 	call	aeec <__divdf3>
    4c2c:	102d883a 	mov	r22,r2
    4c30:	003f8306 	br	4a40 <__ieee754_pow+0x7c>
    4c34:	047fb80e 	bge	zero,r17,4b18 <__ieee754_pow+0x154>
    4c38:	0009883a 	mov	r4,zero
    4c3c:	dfc01417 	ldw	ra,80(sp)
    4c40:	df001317 	ldw	fp,76(sp)
    4c44:	ddc01217 	ldw	r23,72(sp)
    4c48:	dd801117 	ldw	r22,68(sp)
    4c4c:	dd401017 	ldw	r21,64(sp)
    4c50:	dd000f17 	ldw	r20,60(sp)
    4c54:	dcc00e17 	ldw	r19,56(sp)
    4c58:	dc800d17 	ldw	r18,52(sp)
    4c5c:	dc400c17 	ldw	r17,48(sp)
    4c60:	dc000b17 	ldw	r16,44(sp)
    4c64:	dec01504 	addi	sp,sp,84
    4c68:	0008dec1 	jmpi	8dec <__math_oflow>
    4c6c:	180f883a 	mov	r7,r3
    4c70:	000d883a 	mov	r6,zero
    4c74:	0009883a 	mov	r4,zero
    4c78:	014ffc34 	movhi	r5,16368
    4c7c:	000aeec0 	call	aeec <__divdf3>
    4c80:	102d883a 	mov	r22,r2
    4c84:	003fda06 	br	4bf0 <__ieee754_pow+0x22c>
    4c88:	0090d034 	movhi	r2,17216
    4c8c:	30800e0e 	bge	r6,r2,4cc8 <__ieee754_pow+0x304>
    4c90:	008ffc34 	movhi	r2,16368
    4c94:	30800916 	blt	r6,r2,4cbc <__ieee754_pow+0x2f8>
    4c98:	3005d53a 	srai	r2,r6,20
    4c9c:	10bf0044 	addi	r2,r2,-1023
    4ca0:	10c00550 	cmplti	r3,r2,21
    4ca4:	18034c1e 	bne	r3,zero,59d8 <__ieee754_pow+0x1014>
    4ca8:	00c00d04 	movi	r3,52
    4cac:	1885c83a 	sub	r2,r3,r2
    4cb0:	8086d83a 	srl	r3,r16,r2
    4cb4:	1884983a 	sll	r2,r3,r2
    4cb8:	14037926 	beq	r2,r16,5aa0 <__ieee754_pow+0x10dc>
    4cbc:	0025883a 	mov	r18,zero
    4cc0:	803faa26 	beq	r16,zero,4b6c <__ieee754_pow+0x1a8>
    4cc4:	003f8406 	br	4ad8 <__ieee754_pow+0x114>
    4cc8:	04800084 	movi	r18,2
    4ccc:	803f821e 	bne	r16,zero,4ad8 <__ieee754_pow+0x114>
    4cd0:	003fa406 	br	4b64 <__ieee754_pow+0x1a0>
    4cd4:	00b00434 	movhi	r2,49168
    4cd8:	9885883a 	add	r2,r19,r2
    4cdc:	1104b03a 	or	r2,r2,r4
    4ce0:	103f7326 	beq	r2,zero,4ab0 <__ieee754_pow+0xec>
    4ce4:	008ffc34 	movhi	r2,16368
    4ce8:	002d883a 	mov	r22,zero
    4cec:	98833716 	blt	r19,r2,59cc <__ieee754_pow+0x1008>
    4cf0:	88033416 	blt	r17,zero,59c4 <__ieee754_pow+0x1000>
    4cf4:	8807883a 	mov	r3,r17
    4cf8:	003f5106 	br	4a40 <__ieee754_pow+0x7c>
    4cfc:	200d883a 	mov	r6,r4
    4d00:	a80f883a 	mov	r7,r21
    4d04:	003fc106 	br	4c0c <__ieee754_pow+0x248>
    4d08:	ad5ffc2c 	andhi	r21,r21,32752
    4d0c:	a802cc1e 	bne	r21,zero,5840 <__ieee754_pow+0xe7c>
    4d10:	180b883a 	mov	r5,r3
    4d14:	000d883a 	mov	r6,zero
    4d18:	01d0d034 	movhi	r7,17216
    4d1c:	000b98c0 	call	b98c <__muldf3>
    4d20:	102d883a 	mov	r22,r2
    4d24:	1827883a 	mov	r19,r3
    4d28:	017ff2c4 	movi	r5,-53
    4d2c:	9809d53a 	srai	r4,r19,20
    4d30:	00800434 	movhi	r2,16
    4d34:	10bfffc4 	addi	r2,r2,-1
    4d38:	00c00134 	movhi	r3,4
    4d3c:	213f0044 	addi	r4,r4,-1023
    4d40:	9884703a 	and	r2,r19,r2
    4d44:	18e62384 	addi	r3,r3,-26482
    4d48:	2159883a 	add	r12,r4,r5
    4d4c:	170ffc34 	orhi	fp,r2,16368
    4d50:	1880060e 	bge	r3,r2,4d6c <__ieee754_pow+0x3a8>
    4d54:	00c00334 	movhi	r3,12
    4d58:	18ed9e44 	addi	r3,r3,-18823
    4d5c:	1883370e 	bge	r3,r2,5a3c <__ieee754_pow+0x1078>
    4d60:	00bffc34 	movhi	r2,65520
    4d64:	63000044 	addi	r12,r12,1
    4d68:	e0b9883a 	add	fp,fp,r2
    4d6c:	d8000015 	stw	zero,0(sp)
    4d70:	d8000115 	stw	zero,4(sp)
    4d74:	d8000a15 	stw	zero,40(sp)
    4d78:	001f883a 	mov	r15,zero
    4d7c:	002f883a 	mov	r23,zero
    4d80:	034ffc34 	movhi	r13,16368
    4d84:	680f883a 	mov	r7,r13
    4d88:	b009883a 	mov	r4,r22
    4d8c:	e00b883a 	mov	r5,fp
    4d90:	000d883a 	mov	r6,zero
    4d94:	dbc00915 	stw	r15,36(sp)
    4d98:	db000815 	stw	r12,32(sp)
    4d9c:	db400215 	stw	r13,8(sp)
    4da0:	000c0000 	call	c000 <__subdf3>
    4da4:	db400217 	ldw	r13,8(sp)
    4da8:	b009883a 	mov	r4,r22
    4dac:	e00b883a 	mov	r5,fp
    4db0:	680f883a 	mov	r7,r13
    4db4:	000d883a 	mov	r6,zero
    4db8:	db400615 	stw	r13,24(sp)
    4dbc:	d8800315 	stw	r2,12(sp)
    4dc0:	d8c00215 	stw	r3,8(sp)
    4dc4:	000a5fc0 	call	a5fc <__adddf3>
    4dc8:	100d883a 	mov	r6,r2
    4dcc:	180f883a 	mov	r7,r3
    4dd0:	0009883a 	mov	r4,zero
    4dd4:	014ffc34 	movhi	r5,16368
    4dd8:	000aeec0 	call	aeec <__divdf3>
    4ddc:	dac00217 	ldw	r11,8(sp)
    4de0:	da400317 	ldw	r9,12(sp)
    4de4:	100d883a 	mov	r6,r2
    4de8:	580b883a 	mov	r5,r11
    4dec:	4809883a 	mov	r4,r9
    4df0:	180f883a 	mov	r7,r3
    4df4:	d8800515 	stw	r2,20(sp)
    4df8:	d8c00415 	stw	r3,16(sp)
    4dfc:	000b98c0 	call	b98c <__muldf3>
    4e00:	e009d07a 	srai	r4,fp,1
    4e04:	01400234 	movhi	r5,8
    4e08:	000d883a 	mov	r6,zero
    4e0c:	21080034 	orhi	r4,r4,8192
    4e10:	2149883a 	add	r4,r4,r5
    4e14:	25ef883a 	add	r23,r4,r23
    4e18:	b80f883a 	mov	r7,r23
    4e1c:	0009883a 	mov	r4,zero
    4e20:	180b883a 	mov	r5,r3
    4e24:	1827883a 	mov	r19,r3
    4e28:	102b883a 	mov	r21,r2
    4e2c:	000b98c0 	call	b98c <__muldf3>
    4e30:	da400317 	ldw	r9,12(sp)
    4e34:	dac00217 	ldw	r11,8(sp)
    4e38:	100d883a 	mov	r6,r2
    4e3c:	4809883a 	mov	r4,r9
    4e40:	580b883a 	mov	r5,r11
    4e44:	180f883a 	mov	r7,r3
    4e48:	000c0000 	call	c000 <__subdf3>
    4e4c:	db400617 	ldw	r13,24(sp)
    4e50:	b80b883a 	mov	r5,r23
    4e54:	000d883a 	mov	r6,zero
    4e58:	680f883a 	mov	r7,r13
    4e5c:	0009883a 	mov	r4,zero
    4e60:	182f883a 	mov	r23,r3
    4e64:	d8800215 	stw	r2,8(sp)
    4e68:	000c0000 	call	c000 <__subdf3>
    4e6c:	b009883a 	mov	r4,r22
    4e70:	e00b883a 	mov	r5,fp
    4e74:	100d883a 	mov	r6,r2
    4e78:	180f883a 	mov	r7,r3
    4e7c:	000c0000 	call	c000 <__subdf3>
    4e80:	980f883a 	mov	r7,r19
    4e84:	000d883a 	mov	r6,zero
    4e88:	1009883a 	mov	r4,r2
    4e8c:	180b883a 	mov	r5,r3
    4e90:	000b98c0 	call	b98c <__muldf3>
    4e94:	dac00217 	ldw	r11,8(sp)
    4e98:	b80b883a 	mov	r5,r23
    4e9c:	100d883a 	mov	r6,r2
    4ea0:	5809883a 	mov	r4,r11
    4ea4:	180f883a 	mov	r7,r3
    4ea8:	000c0000 	call	c000 <__subdf3>
    4eac:	da000417 	ldw	r8,16(sp)
    4eb0:	da800517 	ldw	r10,20(sp)
    4eb4:	1009883a 	mov	r4,r2
    4eb8:	400f883a 	mov	r7,r8
    4ebc:	500d883a 	mov	r6,r10
    4ec0:	180b883a 	mov	r5,r3
    4ec4:	000b98c0 	call	b98c <__muldf3>
    4ec8:	a80d883a 	mov	r6,r21
    4ecc:	980f883a 	mov	r7,r19
    4ed0:	a809883a 	mov	r4,r21
    4ed4:	980b883a 	mov	r5,r19
    4ed8:	d8800415 	stw	r2,16(sp)
    4edc:	d8c00315 	stw	r3,12(sp)
    4ee0:	000b98c0 	call	b98c <__muldf3>
    4ee4:	01929174 	movhi	r6,19013
    4ee8:	01cff2b4 	movhi	r7,16330
    4eec:	3193bbc4 	addi	r6,r6,20207
    4ef0:	39df8a04 	addi	r7,r7,32296
    4ef4:	1009883a 	mov	r4,r2
    4ef8:	180b883a 	mov	r5,r3
    4efc:	102f883a 	mov	r23,r2
    4f00:	182d883a 	mov	r22,r3
    4f04:	000b98c0 	call	b98c <__muldf3>
    4f08:	01a4f2b4 	movhi	r6,37834
    4f0c:	01cff3b4 	movhi	r7,16334
    4f10:	31b6d944 	addi	r6,r6,-9371
    4f14:	39e19284 	addi	r7,r7,-31158
    4f18:	1009883a 	mov	r4,r2
    4f1c:	180b883a 	mov	r5,r3
    4f20:	000a5fc0 	call	a5fc <__adddf3>
    4f24:	b80d883a 	mov	r6,r23
    4f28:	b00f883a 	mov	r7,r22
    4f2c:	1009883a 	mov	r4,r2
    4f30:	180b883a 	mov	r5,r3
    4f34:	000b98c0 	call	b98c <__muldf3>
    4f38:	01aa4774 	movhi	r6,43293
    4f3c:	01cff474 	movhi	r7,16337
    4f40:	31904044 	addi	r6,r6,16641
    4f44:	39dd1804 	addi	r7,r7,29792
    4f48:	1009883a 	mov	r4,r2
    4f4c:	180b883a 	mov	r5,r3
    4f50:	000a5fc0 	call	a5fc <__adddf3>
    4f54:	b80d883a 	mov	r6,r23
    4f58:	b00f883a 	mov	r7,r22
    4f5c:	1009883a 	mov	r4,r2
    4f60:	180b883a 	mov	r5,r3
    4f64:	000b98c0 	call	b98c <__muldf3>
    4f68:	019463f4 	movhi	r6,20879
    4f6c:	01cff574 	movhi	r7,16341
    4f70:	31899344 	addi	r6,r6,9805
    4f74:	39d55544 	addi	r7,r7,21845
    4f78:	1009883a 	mov	r4,r2
    4f7c:	180b883a 	mov	r5,r3
    4f80:	000a5fc0 	call	a5fc <__adddf3>
    4f84:	b80d883a 	mov	r6,r23
    4f88:	b00f883a 	mov	r7,r22
    4f8c:	1009883a 	mov	r4,r2
    4f90:	180b883a 	mov	r5,r3
    4f94:	000b98c0 	call	b98c <__muldf3>
    4f98:	01b6dc34 	movhi	r6,56176
    4f9c:	01cff6f4 	movhi	r7,16347
    4fa0:	31aaffc4 	addi	r6,r6,-21505
    4fa4:	39db6d84 	addi	r7,r7,28086
    4fa8:	1009883a 	mov	r4,r2
    4fac:	180b883a 	mov	r5,r3
    4fb0:	000a5fc0 	call	a5fc <__adddf3>
    4fb4:	b80d883a 	mov	r6,r23
    4fb8:	b00f883a 	mov	r7,r22
    4fbc:	1009883a 	mov	r4,r2
    4fc0:	180b883a 	mov	r5,r3
    4fc4:	000b98c0 	call	b98c <__muldf3>
    4fc8:	018cccf4 	movhi	r6,13107
    4fcc:	01cff8f4 	movhi	r7,16355
    4fd0:	318cc0c4 	addi	r6,r6,13059
    4fd4:	39ccccc4 	addi	r7,r7,13107
    4fd8:	1009883a 	mov	r4,r2
    4fdc:	180b883a 	mov	r5,r3
    4fe0:	000a5fc0 	call	a5fc <__adddf3>
    4fe4:	b80d883a 	mov	r6,r23
    4fe8:	b00f883a 	mov	r7,r22
    4fec:	b809883a 	mov	r4,r23
    4ff0:	b00b883a 	mov	r5,r22
    4ff4:	1839883a 	mov	fp,r3
    4ff8:	d8800215 	stw	r2,8(sp)
    4ffc:	000b98c0 	call	b98c <__muldf3>
    5000:	dac00217 	ldw	r11,8(sp)
    5004:	e00b883a 	mov	r5,fp
    5008:	100d883a 	mov	r6,r2
    500c:	5809883a 	mov	r4,r11
    5010:	180f883a 	mov	r7,r3
    5014:	000b98c0 	call	b98c <__muldf3>
    5018:	980f883a 	mov	r7,r19
    501c:	a809883a 	mov	r4,r21
    5020:	980b883a 	mov	r5,r19
    5024:	000d883a 	mov	r6,zero
    5028:	102f883a 	mov	r23,r2
    502c:	182d883a 	mov	r22,r3
    5030:	000a5fc0 	call	a5fc <__adddf3>
    5034:	da800417 	ldw	r10,16(sp)
    5038:	da400317 	ldw	r9,12(sp)
    503c:	1009883a 	mov	r4,r2
    5040:	500d883a 	mov	r6,r10
    5044:	480f883a 	mov	r7,r9
    5048:	180b883a 	mov	r5,r3
    504c:	da800715 	stw	r10,28(sp)
    5050:	da400615 	stw	r9,24(sp)
    5054:	000b98c0 	call	b98c <__muldf3>
    5058:	b80d883a 	mov	r6,r23
    505c:	b00f883a 	mov	r7,r22
    5060:	1009883a 	mov	r4,r2
    5064:	180b883a 	mov	r5,r3
    5068:	000a5fc0 	call	a5fc <__adddf3>
    506c:	980f883a 	mov	r7,r19
    5070:	980b883a 	mov	r5,r19
    5074:	000d883a 	mov	r6,zero
    5078:	0009883a 	mov	r4,zero
    507c:	d8800315 	stw	r2,12(sp)
    5080:	d8c00215 	stw	r3,8(sp)
    5084:	000b98c0 	call	b98c <__muldf3>
    5088:	000d883a 	mov	r6,zero
    508c:	01d00234 	movhi	r7,16392
    5090:	1009883a 	mov	r4,r2
    5094:	180b883a 	mov	r5,r3
    5098:	d8800515 	stw	r2,20(sp)
    509c:	d8c00415 	stw	r3,16(sp)
    50a0:	000a5fc0 	call	a5fc <__adddf3>
    50a4:	da000317 	ldw	r8,12(sp)
    50a8:	dac00217 	ldw	r11,8(sp)
    50ac:	1009883a 	mov	r4,r2
    50b0:	400d883a 	mov	r6,r8
    50b4:	580f883a 	mov	r7,r11
    50b8:	180b883a 	mov	r5,r3
    50bc:	000a5fc0 	call	a5fc <__adddf3>
    50c0:	980b883a 	mov	r5,r19
    50c4:	000d883a 	mov	r6,zero
    50c8:	180f883a 	mov	r7,r3
    50cc:	0009883a 	mov	r4,zero
    50d0:	182d883a 	mov	r22,r3
    50d4:	000b98c0 	call	b98c <__muldf3>
    50d8:	b00b883a 	mov	r5,r22
    50dc:	000d883a 	mov	r6,zero
    50e0:	01d00234 	movhi	r7,16392
    50e4:	0009883a 	mov	r4,zero
    50e8:	1039883a 	mov	fp,r2
    50ec:	182f883a 	mov	r23,r3
    50f0:	000c0000 	call	c000 <__subdf3>
    50f4:	db800517 	ldw	r14,20(sp)
    50f8:	db400417 	ldw	r13,16(sp)
    50fc:	1009883a 	mov	r4,r2
    5100:	700d883a 	mov	r6,r14
    5104:	680f883a 	mov	r7,r13
    5108:	180b883a 	mov	r5,r3
    510c:	000c0000 	call	c000 <__subdf3>
    5110:	da000317 	ldw	r8,12(sp)
    5114:	dac00217 	ldw	r11,8(sp)
    5118:	100d883a 	mov	r6,r2
    511c:	4009883a 	mov	r4,r8
    5120:	580b883a 	mov	r5,r11
    5124:	180f883a 	mov	r7,r3
    5128:	000c0000 	call	c000 <__subdf3>
    512c:	a80d883a 	mov	r6,r21
    5130:	980f883a 	mov	r7,r19
    5134:	1009883a 	mov	r4,r2
    5138:	180b883a 	mov	r5,r3
    513c:	000b98c0 	call	b98c <__muldf3>
    5140:	da800717 	ldw	r10,28(sp)
    5144:	da400617 	ldw	r9,24(sp)
    5148:	b00f883a 	mov	r7,r22
    514c:	5009883a 	mov	r4,r10
    5150:	480b883a 	mov	r5,r9
    5154:	000d883a 	mov	r6,zero
    5158:	102b883a 	mov	r21,r2
    515c:	1827883a 	mov	r19,r3
    5160:	000b98c0 	call	b98c <__muldf3>
    5164:	a809883a 	mov	r4,r21
    5168:	980b883a 	mov	r5,r19
    516c:	100d883a 	mov	r6,r2
    5170:	180f883a 	mov	r7,r3
    5174:	000a5fc0 	call	a5fc <__adddf3>
    5178:	e009883a 	mov	r4,fp
    517c:	b80b883a 	mov	r5,r23
    5180:	100d883a 	mov	r6,r2
    5184:	180f883a 	mov	r7,r3
    5188:	102d883a 	mov	r22,r2
    518c:	182b883a 	mov	r21,r3
    5190:	000a5fc0 	call	a5fc <__adddf3>
    5194:	01cffbf4 	movhi	r7,16367
    5198:	01b80034 	movhi	r6,57344
    519c:	39f1c244 	addi	r7,r7,-14583
    51a0:	0009883a 	mov	r4,zero
    51a4:	180b883a 	mov	r5,r3
    51a8:	1827883a 	mov	r19,r3
    51ac:	000b98c0 	call	b98c <__muldf3>
    51b0:	e00d883a 	mov	r6,fp
    51b4:	b80f883a 	mov	r7,r23
    51b8:	980b883a 	mov	r5,r19
    51bc:	0009883a 	mov	r4,zero
    51c0:	1039883a 	mov	fp,r2
    51c4:	182f883a 	mov	r23,r3
    51c8:	000c0000 	call	c000 <__subdf3>
    51cc:	b009883a 	mov	r4,r22
    51d0:	a80b883a 	mov	r5,r21
    51d4:	100d883a 	mov	r6,r2
    51d8:	180f883a 	mov	r7,r3
    51dc:	000c0000 	call	c000 <__subdf3>
    51e0:	01b70eb4 	movhi	r6,56378
    51e4:	01cffbf4 	movhi	r7,16367
    51e8:	3180ff44 	addi	r6,r6,1021
    51ec:	39f1c244 	addi	r7,r7,-14583
    51f0:	1009883a 	mov	r4,r2
    51f4:	180b883a 	mov	r5,r3
    51f8:	000b98c0 	call	b98c <__muldf3>
    51fc:	018516f4 	movhi	r6,5211
    5200:	01ef8fb4 	movhi	r7,48702
    5204:	980b883a 	mov	r5,r19
    5208:	31807d44 	addi	r6,r6,501
    520c:	39cbf804 	addi	r7,r7,12256
    5210:	0009883a 	mov	r4,zero
    5214:	102d883a 	mov	r22,r2
    5218:	182b883a 	mov	r21,r3
    521c:	000b98c0 	call	b98c <__muldf3>
    5220:	b009883a 	mov	r4,r22
    5224:	a80b883a 	mov	r5,r21
    5228:	100d883a 	mov	r6,r2
    522c:	180f883a 	mov	r7,r3
    5230:	000a5fc0 	call	a5fc <__adddf3>
    5234:	dbc00917 	ldw	r15,36(sp)
    5238:	d9800a17 	ldw	r6,40(sp)
    523c:	180b883a 	mov	r5,r3
    5240:	780f883a 	mov	r7,r15
    5244:	1009883a 	mov	r4,r2
    5248:	000a5fc0 	call	a5fc <__adddf3>
    524c:	db000817 	ldw	r12,32(sp)
    5250:	102d883a 	mov	r22,r2
    5254:	182b883a 	mov	r21,r3
    5258:	6009883a 	mov	r4,r12
    525c:	000c9e00 	call	c9e0 <__floatsidf>
    5260:	b00d883a 	mov	r6,r22
    5264:	a80f883a 	mov	r7,r21
    5268:	e009883a 	mov	r4,fp
    526c:	b80b883a 	mov	r5,r23
    5270:	d8800315 	stw	r2,12(sp)
    5274:	d8c00215 	stw	r3,8(sp)
    5278:	000a5fc0 	call	a5fc <__adddf3>
    527c:	d9800017 	ldw	r6,0(sp)
    5280:	d9c00117 	ldw	r7,4(sp)
    5284:	1009883a 	mov	r4,r2
    5288:	180b883a 	mov	r5,r3
    528c:	000a5fc0 	call	a5fc <__adddf3>
    5290:	da800317 	ldw	r10,12(sp)
    5294:	da400217 	ldw	r9,8(sp)
    5298:	1009883a 	mov	r4,r2
    529c:	500d883a 	mov	r6,r10
    52a0:	480f883a 	mov	r7,r9
    52a4:	180b883a 	mov	r5,r3
    52a8:	000a5fc0 	call	a5fc <__adddf3>
    52ac:	da800317 	ldw	r10,12(sp)
    52b0:	da400217 	ldw	r9,8(sp)
    52b4:	0009883a 	mov	r4,zero
    52b8:	500d883a 	mov	r6,r10
    52bc:	480f883a 	mov	r7,r9
    52c0:	180b883a 	mov	r5,r3
    52c4:	1827883a 	mov	r19,r3
    52c8:	000c0000 	call	c000 <__subdf3>
    52cc:	d9800017 	ldw	r6,0(sp)
    52d0:	d9c00117 	ldw	r7,4(sp)
    52d4:	1009883a 	mov	r4,r2
    52d8:	180b883a 	mov	r5,r3
    52dc:	000c0000 	call	c000 <__subdf3>
    52e0:	e00d883a 	mov	r6,fp
    52e4:	b80f883a 	mov	r7,r23
    52e8:	1009883a 	mov	r4,r2
    52ec:	180b883a 	mov	r5,r3
    52f0:	000c0000 	call	c000 <__subdf3>
    52f4:	b009883a 	mov	r4,r22
    52f8:	100d883a 	mov	r6,r2
    52fc:	180f883a 	mov	r7,r3
    5300:	a80b883a 	mov	r5,r21
    5304:	94bfffc4 	addi	r18,r18,-1
    5308:	000c0000 	call	c000 <__subdf3>
    530c:	9528b03a 	or	r20,r18,r20
    5310:	102f883a 	mov	r23,r2
    5314:	182d883a 	mov	r22,r3
    5318:	a001471e 	bne	r20,zero,5838 <__ieee754_pow+0xe74>
    531c:	052ffc34 	movhi	r20,49136
    5320:	880f883a 	mov	r7,r17
    5324:	8009883a 	mov	r4,r16
    5328:	880b883a 	mov	r5,r17
    532c:	000d883a 	mov	r6,zero
    5330:	000c0000 	call	c000 <__subdf3>
    5334:	980f883a 	mov	r7,r19
    5338:	000d883a 	mov	r6,zero
    533c:	1009883a 	mov	r4,r2
    5340:	180b883a 	mov	r5,r3
    5344:	000b98c0 	call	b98c <__muldf3>
    5348:	800d883a 	mov	r6,r16
    534c:	880f883a 	mov	r7,r17
    5350:	b809883a 	mov	r4,r23
    5354:	b00b883a 	mov	r5,r22
    5358:	102b883a 	mov	r21,r2
    535c:	1825883a 	mov	r18,r3
    5360:	000b98c0 	call	b98c <__muldf3>
    5364:	a809883a 	mov	r4,r21
    5368:	900b883a 	mov	r5,r18
    536c:	100d883a 	mov	r6,r2
    5370:	180f883a 	mov	r7,r3
    5374:	000a5fc0 	call	a5fc <__adddf3>
    5378:	880f883a 	mov	r7,r17
    537c:	980b883a 	mov	r5,r19
    5380:	000d883a 	mov	r6,zero
    5384:	0009883a 	mov	r4,zero
    5388:	1027883a 	mov	r19,r2
    538c:	182b883a 	mov	r21,r3
    5390:	000b98c0 	call	b98c <__muldf3>
    5394:	a80b883a 	mov	r5,r21
    5398:	100d883a 	mov	r6,r2
    539c:	180f883a 	mov	r7,r3
    53a0:	9809883a 	mov	r4,r19
    53a4:	1023883a 	mov	r17,r2
    53a8:	1825883a 	mov	r18,r3
    53ac:	000a5fc0 	call	a5fc <__adddf3>
    53b0:	01502434 	movhi	r5,16528
    53b4:	1821883a 	mov	r16,r3
    53b8:	8817883a 	mov	r11,r17
    53bc:	902f883a 	mov	r23,r18
    53c0:	102d883a 	mov	r22,r2
    53c4:	1839883a 	mov	fp,r3
    53c8:	1940fe16 	blt	r3,r5,57c4 <__ieee754_pow+0xe00>
    53cc:	1947c83a 	sub	r3,r3,r5
    53d0:	1d86b03a 	or	r3,r3,r22
    53d4:	1801ab1e 	bne	r3,zero,5a84 <__ieee754_pow+0x10c0>
    53d8:	01994b34 	movhi	r6,25900
    53dc:	01cf25f4 	movhi	r7,15511
    53e0:	31a0bf84 	addi	r6,r6,-32002
    53e4:	39c551c4 	addi	r7,r7,5447
    53e8:	9809883a 	mov	r4,r19
    53ec:	a80b883a 	mov	r5,r21
    53f0:	000a5fc0 	call	a5fc <__adddf3>
    53f4:	880d883a 	mov	r6,r17
    53f8:	900f883a 	mov	r7,r18
    53fc:	b009883a 	mov	r4,r22
    5400:	800b883a 	mov	r5,r16
    5404:	1039883a 	mov	fp,r2
    5408:	182f883a 	mov	r23,r3
    540c:	000c0000 	call	c000 <__subdf3>
    5410:	100d883a 	mov	r6,r2
    5414:	180f883a 	mov	r7,r3
    5418:	e009883a 	mov	r4,fp
    541c:	b80b883a 	mov	r5,r23
    5420:	000b7bc0 	call	b7bc <__gedf2>
    5424:	00819716 	blt	zero,r2,5a84 <__ieee754_pow+0x10c0>
    5428:	8009d53a 	srai	r4,r16,20
    542c:	2101ffcc 	andi	r4,r4,2047
    5430:	00c00434 	movhi	r3,16
    5434:	213f0084 	addi	r4,r4,-1022
    5438:	1909d83a 	sra	r4,r3,r4
    543c:	00800434 	movhi	r2,16
    5440:	10bfffc4 	addi	r2,r2,-1
    5444:	2407883a 	add	r3,r4,r16
    5448:	1809d53a 	srai	r4,r3,20
    544c:	18ac703a 	and	r22,r3,r2
    5450:	b5800434 	orhi	r22,r22,16
    5454:	2101ffcc 	andi	r4,r4,2047
    5458:	213f0044 	addi	r4,r4,-1023
    545c:	110fd83a 	sra	r7,r2,r4
    5460:	00800504 	movi	r2,20
    5464:	1109c83a 	sub	r4,r2,r4
    5468:	b105d83a 	sra	r2,r22,r4
    546c:	01ce303a 	nor	r7,zero,r7
    5470:	38ce703a 	and	r7,r7,r3
    5474:	d8800215 	stw	r2,8(sp)
    5478:	8000020e 	bge	r16,zero,5484 <__ieee754_pow+0xac0>
    547c:	0085c83a 	sub	r2,zero,r2
    5480:	d8800215 	stw	r2,8(sp)
    5484:	000d883a 	mov	r6,zero
    5488:	8809883a 	mov	r4,r17
    548c:	900b883a 	mov	r5,r18
    5490:	000c0000 	call	c000 <__subdf3>
    5494:	100d883a 	mov	r6,r2
    5498:	180f883a 	mov	r7,r3
    549c:	9809883a 	mov	r4,r19
    54a0:	a80b883a 	mov	r5,r21
    54a4:	182f883a 	mov	r23,r3
    54a8:	d8800015 	stw	r2,0(sp)
    54ac:	000a5fc0 	call	a5fc <__adddf3>
    54b0:	d8800217 	ldw	r2,8(sp)
    54b4:	dac00017 	ldw	r11,0(sp)
    54b8:	1839883a 	mov	fp,r3
    54bc:	1004953a 	slli	r2,r2,20
    54c0:	d8800115 	stw	r2,4(sp)
    54c4:	01cff9b4 	movhi	r7,16358
    54c8:	e00b883a 	mov	r5,fp
    54cc:	000d883a 	mov	r6,zero
    54d0:	39cb90c4 	addi	r7,r7,11843
    54d4:	0009883a 	mov	r4,zero
    54d8:	dac00015 	stw	r11,0(sp)
    54dc:	000b98c0 	call	b98c <__muldf3>
    54e0:	dac00017 	ldw	r11,0(sp)
    54e4:	b80f883a 	mov	r7,r23
    54e8:	e00b883a 	mov	r5,fp
    54ec:	580d883a 	mov	r6,r11
    54f0:	0009883a 	mov	r4,zero
    54f4:	182f883a 	mov	r23,r3
    54f8:	102d883a 	mov	r22,r2
    54fc:	000c0000 	call	c000 <__subdf3>
    5500:	9809883a 	mov	r4,r19
    5504:	a80b883a 	mov	r5,r21
    5508:	100d883a 	mov	r6,r2
    550c:	180f883a 	mov	r7,r3
    5510:	000c0000 	call	c000 <__subdf3>
    5514:	01bfbeb4 	movhi	r6,65274
    5518:	01cff9b4 	movhi	r7,16358
    551c:	318e7bc4 	addi	r6,r6,14831
    5520:	39cb9084 	addi	r7,r7,11842
    5524:	1009883a 	mov	r4,r2
    5528:	180b883a 	mov	r5,r3
    552c:	000b98c0 	call	b98c <__muldf3>
    5530:	01832a34 	movhi	r6,3240
    5534:	01ef8834 	movhi	r7,48672
    5538:	e00b883a 	mov	r5,fp
    553c:	319b0e44 	addi	r6,r6,27705
    5540:	39d71844 	addi	r7,r7,23649
    5544:	0009883a 	mov	r4,zero
    5548:	1023883a 	mov	r17,r2
    554c:	1821883a 	mov	r16,r3
    5550:	000b98c0 	call	b98c <__muldf3>
    5554:	8809883a 	mov	r4,r17
    5558:	800b883a 	mov	r5,r16
    555c:	100d883a 	mov	r6,r2
    5560:	180f883a 	mov	r7,r3
    5564:	000a5fc0 	call	a5fc <__adddf3>
    5568:	b80b883a 	mov	r5,r23
    556c:	100d883a 	mov	r6,r2
    5570:	180f883a 	mov	r7,r3
    5574:	b009883a 	mov	r4,r22
    5578:	1027883a 	mov	r19,r2
    557c:	1825883a 	mov	r18,r3
    5580:	000a5fc0 	call	a5fc <__adddf3>
    5584:	b80f883a 	mov	r7,r23
    5588:	b00d883a 	mov	r6,r22
    558c:	1009883a 	mov	r4,r2
    5590:	180b883a 	mov	r5,r3
    5594:	1023883a 	mov	r17,r2
    5598:	1821883a 	mov	r16,r3
    559c:	000c0000 	call	c000 <__subdf3>
    55a0:	9809883a 	mov	r4,r19
    55a4:	900b883a 	mov	r5,r18
    55a8:	100d883a 	mov	r6,r2
    55ac:	180f883a 	mov	r7,r3
    55b0:	000c0000 	call	c000 <__subdf3>
    55b4:	880d883a 	mov	r6,r17
    55b8:	800f883a 	mov	r7,r16
    55bc:	8809883a 	mov	r4,r17
    55c0:	800b883a 	mov	r5,r16
    55c4:	1039883a 	mov	fp,r2
    55c8:	182b883a 	mov	r21,r3
    55cc:	000b98c0 	call	b98c <__muldf3>
    55d0:	019caff4 	movhi	r6,29375
    55d4:	01cf99b4 	movhi	r7,15974
    55d8:	31a93404 	addi	r6,r6,-23344
    55dc:	39cdda44 	addi	r7,r7,14185
    55e0:	1009883a 	mov	r4,r2
    55e4:	180b883a 	mov	r5,r3
    55e8:	1027883a 	mov	r19,r2
    55ec:	1825883a 	mov	r18,r3
    55f0:	000b98c0 	call	b98c <__muldf3>
    55f4:	01b174b4 	movhi	r6,50642
    55f8:	01cfaf34 	movhi	r7,16060
    55fc:	319afc44 	addi	r6,r6,27633
    5600:	39ef5044 	addi	r7,r7,-17087
    5604:	1009883a 	mov	r4,r2
    5608:	180b883a 	mov	r5,r3
    560c:	000c0000 	call	c000 <__subdf3>
    5610:	980d883a 	mov	r6,r19
    5614:	900f883a 	mov	r7,r18
    5618:	1009883a 	mov	r4,r2
    561c:	180b883a 	mov	r5,r3
    5620:	000b98c0 	call	b98c <__muldf3>
    5624:	01abc9b4 	movhi	r6,44838
    5628:	01cfc474 	movhi	r7,16145
    562c:	31b78b04 	addi	r6,r6,-8660
    5630:	39d59a84 	addi	r7,r7,22122
    5634:	1009883a 	mov	r4,r2
    5638:	180b883a 	mov	r5,r3
    563c:	000a5fc0 	call	a5fc <__adddf3>
    5640:	980d883a 	mov	r6,r19
    5644:	900f883a 	mov	r7,r18
    5648:	1009883a 	mov	r4,r2
    564c:	180b883a 	mov	r5,r3
    5650:	000b98c0 	call	b98c <__muldf3>
    5654:	0185aff4 	movhi	r6,5823
    5658:	01cfd9f4 	movhi	r7,16231
    565c:	31af64c4 	addi	r6,r6,-17005
    5660:	39f05b04 	addi	r7,r7,-16020
    5664:	1009883a 	mov	r4,r2
    5668:	180b883a 	mov	r5,r3
    566c:	000c0000 	call	c000 <__subdf3>
    5670:	980d883a 	mov	r6,r19
    5674:	900f883a 	mov	r7,r18
    5678:	1009883a 	mov	r4,r2
    567c:	180b883a 	mov	r5,r3
    5680:	000b98c0 	call	b98c <__muldf3>
    5684:	01955574 	movhi	r6,21845
    5688:	01cff174 	movhi	r7,16325
    568c:	31954f84 	addi	r6,r6,21822
    5690:	39d55544 	addi	r7,r7,21845
    5694:	1009883a 	mov	r4,r2
    5698:	180b883a 	mov	r5,r3
    569c:	000a5fc0 	call	a5fc <__adddf3>
    56a0:	980d883a 	mov	r6,r19
    56a4:	900f883a 	mov	r7,r18
    56a8:	1009883a 	mov	r4,r2
    56ac:	180b883a 	mov	r5,r3
    56b0:	000b98c0 	call	b98c <__muldf3>
    56b4:	100d883a 	mov	r6,r2
    56b8:	180f883a 	mov	r7,r3
    56bc:	8809883a 	mov	r4,r17
    56c0:	800b883a 	mov	r5,r16
    56c4:	000c0000 	call	c000 <__subdf3>
    56c8:	100d883a 	mov	r6,r2
    56cc:	180f883a 	mov	r7,r3
    56d0:	8809883a 	mov	r4,r17
    56d4:	800b883a 	mov	r5,r16
    56d8:	1027883a 	mov	r19,r2
    56dc:	1825883a 	mov	r18,r3
    56e0:	000b98c0 	call	b98c <__muldf3>
    56e4:	9809883a 	mov	r4,r19
    56e8:	900b883a 	mov	r5,r18
    56ec:	000d883a 	mov	r6,zero
    56f0:	01d00034 	movhi	r7,16384
    56f4:	182f883a 	mov	r23,r3
    56f8:	d8800015 	stw	r2,0(sp)
    56fc:	000c0000 	call	c000 <__subdf3>
    5700:	da400017 	ldw	r9,0(sp)
    5704:	100d883a 	mov	r6,r2
    5708:	180f883a 	mov	r7,r3
    570c:	4809883a 	mov	r4,r9
    5710:	b80b883a 	mov	r5,r23
    5714:	000aeec0 	call	aeec <__divdf3>
    5718:	e00d883a 	mov	r6,fp
    571c:	a80f883a 	mov	r7,r21
    5720:	8809883a 	mov	r4,r17
    5724:	800b883a 	mov	r5,r16
    5728:	1027883a 	mov	r19,r2
    572c:	1825883a 	mov	r18,r3
    5730:	000b98c0 	call	b98c <__muldf3>
    5734:	e00d883a 	mov	r6,fp
    5738:	a80f883a 	mov	r7,r21
    573c:	1009883a 	mov	r4,r2
    5740:	180b883a 	mov	r5,r3
    5744:	000a5fc0 	call	a5fc <__adddf3>
    5748:	100d883a 	mov	r6,r2
    574c:	180f883a 	mov	r7,r3
    5750:	9809883a 	mov	r4,r19
    5754:	900b883a 	mov	r5,r18
    5758:	000c0000 	call	c000 <__subdf3>
    575c:	880d883a 	mov	r6,r17
    5760:	800f883a 	mov	r7,r16
    5764:	1009883a 	mov	r4,r2
    5768:	180b883a 	mov	r5,r3
    576c:	000c0000 	call	c000 <__subdf3>
    5770:	100d883a 	mov	r6,r2
    5774:	0009883a 	mov	r4,zero
    5778:	014ffc34 	movhi	r5,16368
    577c:	180f883a 	mov	r7,r3
    5780:	000c0000 	call	c000 <__subdf3>
    5784:	180b883a 	mov	r5,r3
    5788:	d8c00117 	ldw	r3,4(sp)
    578c:	1009883a 	mov	r4,r2
    5790:	194d883a 	add	r6,r3,r5
    5794:	3007d53a 	srai	r3,r6,20
    5798:	00c0b50e 	bge	zero,r3,5a70 <__ieee754_pow+0x10ac>
    579c:	300b883a 	mov	r5,r6
    57a0:	000d883a 	mov	r6,zero
    57a4:	a00f883a 	mov	r7,r20
    57a8:	000b98c0 	call	b98c <__muldf3>
    57ac:	102d883a 	mov	r22,r2
    57b0:	003ca306 	br	4a40 <__ieee754_pow+0x7c>
    57b4:	88009016 	blt	r17,zero,59f8 <__ieee754_pow+0x1034>
    57b8:	202d883a 	mov	r22,r4
    57bc:	a807883a 	mov	r3,r21
    57c0:	003c9f06 	br	4a40 <__ieee754_pow+0x7c>
    57c4:	01200034 	movhi	r4,32768
    57c8:	213fffc4 	addi	r4,r4,-1
    57cc:	00902474 	movhi	r2,16529
    57d0:	1908703a 	and	r4,r3,r4
    57d4:	10b2ffc4 	addi	r2,r2,-13313
    57d8:	1100750e 	bge	r2,r4,59b0 <__ieee754_pow+0xfec>
    57dc:	008fdbf4 	movhi	r2,16239
    57e0:	108d0004 	addi	r2,r2,13312
    57e4:	1885883a 	add	r2,r3,r2
    57e8:	1584b03a 	or	r2,r2,r22
    57ec:	10000b1e 	bne	r2,zero,581c <__ieee754_pow+0xe58>
    57f0:	880d883a 	mov	r6,r17
    57f4:	900f883a 	mov	r7,r18
    57f8:	b009883a 	mov	r4,r22
    57fc:	180b883a 	mov	r5,r3
    5800:	000c0000 	call	c000 <__subdf3>
    5804:	980d883a 	mov	r6,r19
    5808:	a80f883a 	mov	r7,r21
    580c:	1009883a 	mov	r4,r2
    5810:	180b883a 	mov	r5,r3
    5814:	000b7bc0 	call	b7bc <__gedf2>
    5818:	103f0316 	blt	r2,zero,5428 <__ieee754_pow+0xa64>
    581c:	0009883a 	mov	r4,zero
    5820:	000d883a 	mov	r6,zero
    5824:	000f883a 	mov	r7,zero
    5828:	a00b883a 	mov	r5,r20
    582c:	000b8a40 	call	b8a4 <__ledf2>
    5830:	1008803a 	cmplt	r4,r2,zero
    5834:	003cb906 	br	4b1c <__ieee754_pow+0x158>
    5838:	050ffc34 	movhi	r20,16368
    583c:	003eb806 	br	5320 <__ieee754_pow+0x95c>
    5840:	000b883a 	mov	r5,zero
    5844:	003d3906 	br	4d2c <__ieee754_pow+0x368>
    5848:	008ffc34 	movhi	r2,16368
    584c:	10bfff84 	addi	r2,r2,-2
    5850:	14fcb00e 	bge	r2,r19,4b14 <__ieee754_pow+0x150>
    5854:	008ffc34 	movhi	r2,16368
    5858:	14fcf616 	blt	r2,r19,4c34 <__ieee754_pow+0x270>
    585c:	000d883a 	mov	r6,zero
    5860:	01cffc34 	movhi	r7,16368
    5864:	180b883a 	mov	r5,r3
    5868:	000c0000 	call	c000 <__subdf3>
    586c:	01cffdf4 	movhi	r7,16375
    5870:	01980034 	movhi	r6,24576
    5874:	39c551c4 	addi	r7,r7,5447
    5878:	1009883a 	mov	r4,r2
    587c:	180b883a 	mov	r5,r3
    5880:	102b883a 	mov	r21,r2
    5884:	1827883a 	mov	r19,r3
    5888:	000b98c0 	call	b98c <__muldf3>
    588c:	01be17b4 	movhi	r6,63582
    5890:	01cf9574 	movhi	r7,15957
    5894:	a809883a 	mov	r4,r21
    5898:	980b883a 	mov	r5,r19
    589c:	31b7d104 	addi	r6,r6,-8380
    58a0:	39eb82c4 	addi	r7,r7,-20981
    58a4:	1039883a 	mov	fp,r2
    58a8:	182f883a 	mov	r23,r3
    58ac:	000b98c0 	call	b98c <__muldf3>
    58b0:	a809883a 	mov	r4,r21
    58b4:	980b883a 	mov	r5,r19
    58b8:	000d883a 	mov	r6,zero
    58bc:	01cff434 	movhi	r7,16336
    58c0:	182d883a 	mov	r22,r3
    58c4:	d8800215 	stw	r2,8(sp)
    58c8:	000b98c0 	call	b98c <__muldf3>
    58cc:	01155574 	movhi	r4,21845
    58d0:	014ff574 	movhi	r5,16341
    58d4:	100d883a 	mov	r6,r2
    58d8:	180f883a 	mov	r7,r3
    58dc:	21155544 	addi	r4,r4,21845
    58e0:	29555544 	addi	r5,r5,21845
    58e4:	000c0000 	call	c000 <__subdf3>
    58e8:	a80d883a 	mov	r6,r21
    58ec:	980f883a 	mov	r7,r19
    58f0:	1009883a 	mov	r4,r2
    58f4:	180b883a 	mov	r5,r3
    58f8:	000b98c0 	call	b98c <__muldf3>
    58fc:	100d883a 	mov	r6,r2
    5900:	180f883a 	mov	r7,r3
    5904:	0009883a 	mov	r4,zero
    5908:	014ff834 	movhi	r5,16352
    590c:	000c0000 	call	c000 <__subdf3>
    5910:	a80d883a 	mov	r6,r21
    5914:	980f883a 	mov	r7,r19
    5918:	a809883a 	mov	r4,r21
    591c:	980b883a 	mov	r5,r19
    5920:	d8800115 	stw	r2,4(sp)
    5924:	d8c00015 	stw	r3,0(sp)
    5928:	000b98c0 	call	b98c <__muldf3>
    592c:	da800117 	ldw	r10,4(sp)
    5930:	da400017 	ldw	r9,0(sp)
    5934:	100d883a 	mov	r6,r2
    5938:	5009883a 	mov	r4,r10
    593c:	480b883a 	mov	r5,r9
    5940:	180f883a 	mov	r7,r3
    5944:	000b98c0 	call	b98c <__muldf3>
    5948:	01994b34 	movhi	r6,25900
    594c:	01cffdf4 	movhi	r7,16375
    5950:	31a0bf84 	addi	r6,r6,-32002
    5954:	39c551c4 	addi	r7,r7,5447
    5958:	1009883a 	mov	r4,r2
    595c:	180b883a 	mov	r5,r3
    5960:	000b98c0 	call	b98c <__muldf3>
    5964:	da000217 	ldw	r8,8(sp)
    5968:	b00b883a 	mov	r5,r22
    596c:	100d883a 	mov	r6,r2
    5970:	4009883a 	mov	r4,r8
    5974:	180f883a 	mov	r7,r3
    5978:	000c0000 	call	c000 <__subdf3>
    597c:	100d883a 	mov	r6,r2
    5980:	180f883a 	mov	r7,r3
    5984:	e009883a 	mov	r4,fp
    5988:	b80b883a 	mov	r5,r23
    598c:	102d883a 	mov	r22,r2
    5990:	182b883a 	mov	r21,r3
    5994:	000a5fc0 	call	a5fc <__adddf3>
    5998:	1827883a 	mov	r19,r3
    599c:	e00d883a 	mov	r6,fp
    59a0:	b80f883a 	mov	r7,r23
    59a4:	0009883a 	mov	r4,zero
    59a8:	180b883a 	mov	r5,r3
    59ac:	003e5006 	br	52f0 <__ieee754_pow+0x92c>
    59b0:	008ff834 	movhi	r2,16352
    59b4:	11004316 	blt	r2,r4,5ac4 <__ieee754_pow+0x1100>
    59b8:	d8000115 	stw	zero,4(sp)
    59bc:	d8000215 	stw	zero,8(sp)
    59c0:	003ec006 	br	54c4 <__ieee754_pow+0xb00>
    59c4:	0007883a 	mov	r3,zero
    59c8:	003c1d06 	br	4a40 <__ieee754_pow+0x7c>
    59cc:	883ffd0e 	bge	r17,zero,59c4 <__ieee754_pow+0x1000>
    59d0:	88e0003c 	xorhi	r3,r17,32768
    59d4:	003c1a06 	br	4a40 <__ieee754_pow+0x7c>
    59d8:	803c781e 	bne	r16,zero,4bbc <__ieee754_pow+0x1f8>
    59dc:	00c00504 	movi	r3,20
    59e0:	1885c83a 	sub	r2,r3,r2
    59e4:	3087d83a 	sra	r3,r6,r2
    59e8:	1884983a 	sll	r2,r3,r2
    59ec:	11803126 	beq	r2,r6,5ab4 <__ieee754_pow+0x10f0>
    59f0:	0025883a 	mov	r18,zero
    59f4:	003c5d06 	br	4b6c <__ieee754_pow+0x1a8>
    59f8:	200d883a 	mov	r6,r4
    59fc:	a80f883a 	mov	r7,r21
    5a00:	0009883a 	mov	r4,zero
    5a04:	014ffc34 	movhi	r5,16368
    5a08:	000aeec0 	call	aeec <__divdf3>
    5a0c:	102d883a 	mov	r22,r2
    5a10:	003c0b06 	br	4a40 <__ieee754_pow+0x7c>
    5a14:	200d883a 	mov	r6,r4
    5a18:	a80f883a 	mov	r7,r21
    5a1c:	a80b883a 	mov	r5,r21
    5a20:	000b98c0 	call	b98c <__muldf3>
    5a24:	102d883a 	mov	r22,r2
    5a28:	003c0506 	br	4a40 <__ieee754_pow+0x7c>
    5a2c:	94800058 	cmpnei	r18,r18,1
    5a30:	903c031e 	bne	r18,zero,4a40 <__ieee754_pow+0x7c>
    5a34:	18e0003c 	xorhi	r3,r3,32768
    5a38:	003c0106 	br	4a40 <__ieee754_pow+0x7c>
    5a3c:	008ff8f4 	movhi	r2,16355
    5a40:	10ae00c4 	addi	r2,r2,-18429
    5a44:	00d0f434 	movhi	r3,17360
    5a48:	03cf9374 	movhi	r15,15949
    5a4c:	01100034 	movhi	r4,16384
    5a50:	d8800115 	stw	r2,4(sp)
    5a54:	18b40184 	addi	r2,r3,-12282
    5a58:	d9000015 	stw	r4,0(sp)
    5a5c:	d8800a15 	stw	r2,40(sp)
    5a60:	7bff7ac4 	addi	r15,r15,-533
    5a64:	05c00134 	movhi	r23,4
    5a68:	034ffe34 	movhi	r13,16376
    5a6c:	003cc506 	br	4d84 <__ieee754_pow+0x3c0>
    5a70:	d9800217 	ldw	r6,8(sp)
    5a74:	0008fdc0 	call	8fdc <scalbn>
    5a78:	1009883a 	mov	r4,r2
    5a7c:	180b883a 	mov	r5,r3
    5a80:	003f4706 	br	57a0 <__ieee754_pow+0xddc>
    5a84:	0009883a 	mov	r4,zero
    5a88:	000d883a 	mov	r6,zero
    5a8c:	000f883a 	mov	r7,zero
    5a90:	a00b883a 	mov	r5,r20
    5a94:	000b8a40 	call	b8a4 <__ledf2>
    5a98:	1008803a 	cmplt	r4,r2,zero
    5a9c:	003c6706 	br	4c3c <__ieee754_pow+0x278>
    5aa0:	18c0004c 	andi	r3,r3,1
    5aa4:	04800084 	movi	r18,2
    5aa8:	90e5c83a 	sub	r18,r18,r3
    5aac:	803c2f26 	beq	r16,zero,4b6c <__ieee754_pow+0x1a8>
    5ab0:	003c0906 	br	4ad8 <__ieee754_pow+0x114>
    5ab4:	18c0004c 	andi	r3,r3,1
    5ab8:	04800084 	movi	r18,2
    5abc:	90e5c83a 	sub	r18,r18,r3
    5ac0:	003c2a06 	br	4b6c <__ieee754_pow+0x1a8>
    5ac4:	2009d53a 	srai	r4,r4,20
    5ac8:	003e5906 	br	5430 <__ieee754_pow+0xa6c>

00005acc <__ieee754_rem_pio2>:
    5acc:	deffea04 	addi	sp,sp,-88
    5ad0:	dc000c15 	stw	r16,48(sp)
    5ad4:	04200034 	movhi	r16,32768
    5ad8:	843fffc4 	addi	r16,r16,-1
    5adc:	008ffa74 	movhi	r2,16361
    5ae0:	dcc00f15 	stw	r19,60(sp)
    5ae4:	dc800e15 	stw	r18,56(sp)
    5ae8:	dc400d15 	stw	r17,52(sp)
    5aec:	dfc01515 	stw	ra,84(sp)
    5af0:	df001415 	stw	fp,80(sp)
    5af4:	ddc01315 	stw	r23,76(sp)
    5af8:	dd801215 	stw	r22,72(sp)
    5afc:	dd401115 	stw	r21,68(sp)
    5b00:	dd001015 	stw	r20,64(sp)
    5b04:	2c20703a 	and	r16,r5,r16
    5b08:	10887ec4 	addi	r2,r2,8699
    5b0c:	2825883a 	mov	r18,r5
    5b10:	2027883a 	mov	r19,r4
    5b14:	3023883a 	mov	r17,r6
    5b18:	14008b0e 	bge	r2,r16,5d48 <__ieee754_rem_pio2+0x27c>
    5b1c:	009000f4 	movhi	r2,16387
    5b20:	10b65ec4 	addi	r2,r2,-9861
    5b24:	14002f16 	blt	r2,r16,5be4 <__ieee754_rem_pio2+0x118>
    5b28:	01cffe74 	movhi	r7,16377
    5b2c:	01951034 	movhi	r6,21568
    5b30:	39c87ec4 	addi	r7,r7,8699
    5b34:	01417e0e 	bge	zero,r5,6130 <__ieee754_rem_pio2+0x664>
    5b38:	000c0000 	call	c000 <__subdf3>
    5b3c:	018ffe74 	movhi	r6,16377
    5b40:	31887ec4 	addi	r6,r6,8699
    5b44:	1009883a 	mov	r4,r2
    5b48:	180b883a 	mov	r5,r3
    5b4c:	8180cb26 	beq	r16,r6,5e7c <__ieee754_rem_pio2+0x3b0>
    5b50:	018698b4 	movhi	r6,6754
    5b54:	01cf7474 	movhi	r7,15825
    5b58:	3198cc44 	addi	r6,r6,25393
    5b5c:	39ed1844 	addi	r7,r7,-19359
    5b60:	d8800315 	stw	r2,12(sp)
    5b64:	d8c00215 	stw	r3,8(sp)
    5b68:	000c0000 	call	c000 <__subdf3>
    5b6c:	d9000317 	ldw	r4,12(sp)
    5b70:	d9400217 	ldw	r5,8(sp)
    5b74:	100d883a 	mov	r6,r2
    5b78:	180f883a 	mov	r7,r3
    5b7c:	88800015 	stw	r2,0(r17)
    5b80:	88c00115 	stw	r3,4(r17)
    5b84:	000c0000 	call	c000 <__subdf3>
    5b88:	018698b4 	movhi	r6,6754
    5b8c:	01cf7474 	movhi	r7,15825
    5b90:	3198cc44 	addi	r6,r6,25393
    5b94:	39ed1844 	addi	r7,r7,-19359
    5b98:	1009883a 	mov	r4,r2
    5b9c:	180b883a 	mov	r5,r3
    5ba0:	000c0000 	call	c000 <__subdf3>
    5ba4:	88800215 	stw	r2,8(r17)
    5ba8:	88c00315 	stw	r3,12(r17)
    5bac:	05000044 	movi	r20,1
    5bb0:	a005883a 	mov	r2,r20
    5bb4:	dfc01517 	ldw	ra,84(sp)
    5bb8:	df001417 	ldw	fp,80(sp)
    5bbc:	ddc01317 	ldw	r23,76(sp)
    5bc0:	dd801217 	ldw	r22,72(sp)
    5bc4:	dd401117 	ldw	r21,68(sp)
    5bc8:	dd001017 	ldw	r20,64(sp)
    5bcc:	dcc00f17 	ldw	r19,60(sp)
    5bd0:	dc800e17 	ldw	r18,56(sp)
    5bd4:	dc400d17 	ldw	r17,52(sp)
    5bd8:	dc000c17 	ldw	r16,48(sp)
    5bdc:	dec01604 	addi	sp,sp,88
    5be0:	f800283a 	ret
    5be4:	00904e74 	movhi	r2,16697
    5be8:	10887ec4 	addi	r2,r2,8699
    5bec:	14005c16 	blt	r2,r16,5d60 <__ieee754_rem_pio2+0x294>
    5bf0:	019b72b4 	movhi	r6,28106
    5bf4:	01cff934 	movhi	r7,16356
    5bf8:	31b220c4 	addi	r6,r6,-14205
    5bfc:	39d7cc04 	addi	r7,r7,24368
    5c00:	800b883a 	mov	r5,r16
    5c04:	000b98c0 	call	b98c <__muldf3>
    5c08:	000d883a 	mov	r6,zero
    5c0c:	01cff834 	movhi	r7,16352
    5c10:	1009883a 	mov	r4,r2
    5c14:	180b883a 	mov	r5,r3
    5c18:	000a5fc0 	call	a5fc <__adddf3>
    5c1c:	180b883a 	mov	r5,r3
    5c20:	1009883a 	mov	r4,r2
    5c24:	000c9600 	call	c960 <__fixdfsi>
    5c28:	1009883a 	mov	r4,r2
    5c2c:	1029883a 	mov	r20,r2
    5c30:	000c9e00 	call	c9e0 <__floatsidf>
    5c34:	01cffe74 	movhi	r7,16377
    5c38:	01951034 	movhi	r6,21568
    5c3c:	39c87ec4 	addi	r7,r7,8699
    5c40:	1009883a 	mov	r4,r2
    5c44:	180b883a 	mov	r5,r3
    5c48:	102d883a 	mov	r22,r2
    5c4c:	182b883a 	mov	r21,r3
    5c50:	000b98c0 	call	b98c <__muldf3>
    5c54:	9809883a 	mov	r4,r19
    5c58:	100d883a 	mov	r6,r2
    5c5c:	180f883a 	mov	r7,r3
    5c60:	800b883a 	mov	r5,r16
    5c64:	000c0000 	call	c000 <__subdf3>
    5c68:	018698b4 	movhi	r6,6754
    5c6c:	01cf7474 	movhi	r7,15825
    5c70:	3198cc44 	addi	r6,r6,25393
    5c74:	39ed1844 	addi	r7,r7,-19359
    5c78:	b009883a 	mov	r4,r22
    5c7c:	a80b883a 	mov	r5,r21
    5c80:	1039883a 	mov	fp,r2
    5c84:	d8c00215 	stw	r3,8(sp)
    5c88:	000b98c0 	call	b98c <__muldf3>
    5c8c:	db000217 	ldw	r12,8(sp)
    5c90:	e009883a 	mov	r4,fp
    5c94:	100d883a 	mov	r6,r2
    5c98:	600b883a 	mov	r5,r12
    5c9c:	180f883a 	mov	r7,r3
    5ca0:	db000315 	stw	r12,12(sp)
    5ca4:	102f883a 	mov	r23,r2
    5ca8:	1827883a 	mov	r19,r3
    5cac:	df000415 	stw	fp,16(sp)
    5cb0:	000c0000 	call	c000 <__subdf3>
    5cb4:	a1000808 	cmpgei	r4,r20,32
    5cb8:	db000317 	ldw	r12,12(sp)
    5cbc:	1017883a 	mov	r11,r2
    5cc0:	1815883a 	mov	r10,r3
    5cc4:	e01b883a 	mov	r13,fp
    5cc8:	2000851e 	bne	r4,zero,5ee0 <__ieee754_rem_pio2+0x414>
    5ccc:	a00a90ba 	slli	r5,r20,2
    5cd0:	010000b4 	movhi	r4,2
    5cd4:	2909883a 	add	r4,r5,r4
    5cd8:	21047017 	ldw	r4,4544(r4)
    5cdc:	24008026 	beq	r4,r16,5ee0 <__ieee754_rem_pio2+0x414>
    5ce0:	88800015 	stw	r2,0(r17)
    5ce4:	88c00115 	stw	r3,4(r17)
    5ce8:	580d883a 	mov	r6,r11
    5cec:	500f883a 	mov	r7,r10
    5cf0:	6809883a 	mov	r4,r13
    5cf4:	600b883a 	mov	r5,r12
    5cf8:	dac00315 	stw	r11,12(sp)
    5cfc:	da800215 	stw	r10,8(sp)
    5d00:	000c0000 	call	c000 <__subdf3>
    5d04:	b80d883a 	mov	r6,r23
    5d08:	980f883a 	mov	r7,r19
    5d0c:	1009883a 	mov	r4,r2
    5d10:	180b883a 	mov	r5,r3
    5d14:	000c0000 	call	c000 <__subdf3>
    5d18:	88800215 	stw	r2,8(r17)
    5d1c:	88c00315 	stw	r3,12(r17)
    5d20:	903fa30e 	bge	r18,zero,5bb0 <__ieee754_rem_pio2+0xe4>
    5d24:	da800217 	ldw	r10,8(sp)
    5d28:	dac00317 	ldw	r11,12(sp)
    5d2c:	18e0003c 	xorhi	r3,r3,32768
    5d30:	52a0003c 	xorhi	r10,r10,32768
    5d34:	8ac00015 	stw	r11,0(r17)
    5d38:	8a800115 	stw	r10,4(r17)
    5d3c:	88c00315 	stw	r3,12(r17)
    5d40:	0529c83a 	sub	r20,zero,r20
    5d44:	003f9a06 	br	5bb0 <__ieee754_rem_pio2+0xe4>
    5d48:	89000015 	stw	r4,0(r17)
    5d4c:	89400115 	stw	r5,4(r17)
    5d50:	30000215 	stw	zero,8(r6)
    5d54:	30000315 	stw	zero,12(r6)
    5d58:	0029883a 	mov	r20,zero
    5d5c:	003f9406 	br	5bb0 <__ieee754_rem_pio2+0xe4>
    5d60:	009ffc34 	movhi	r2,32752
    5d64:	8080670e 	bge	r16,r2,5f04 <__ieee754_rem_pio2+0x438>
    5d68:	8029d53a 	srai	r20,r16,20
    5d6c:	a53efa84 	addi	r20,r20,-1046
    5d70:	a00a953a 	slli	r5,r20,20
    5d74:	8161c83a 	sub	r16,r16,r5
    5d78:	800b883a 	mov	r5,r16
    5d7c:	000c9600 	call	c960 <__fixdfsi>
    5d80:	1009883a 	mov	r4,r2
    5d84:	000c9e00 	call	c9e0 <__floatsidf>
    5d88:	9809883a 	mov	r4,r19
    5d8c:	800b883a 	mov	r5,r16
    5d90:	100d883a 	mov	r6,r2
    5d94:	180f883a 	mov	r7,r3
    5d98:	d8800615 	stw	r2,24(sp)
    5d9c:	d8c00715 	stw	r3,28(sp)
    5da0:	000c0000 	call	c000 <__subdf3>
    5da4:	000d883a 	mov	r6,zero
    5da8:	01d05c34 	movhi	r7,16752
    5dac:	1009883a 	mov	r4,r2
    5db0:	180b883a 	mov	r5,r3
    5db4:	000b98c0 	call	b98c <__muldf3>
    5db8:	180b883a 	mov	r5,r3
    5dbc:	1009883a 	mov	r4,r2
    5dc0:	1821883a 	mov	r16,r3
    5dc4:	1027883a 	mov	r19,r2
    5dc8:	000c9600 	call	c960 <__fixdfsi>
    5dcc:	1009883a 	mov	r4,r2
    5dd0:	102b883a 	mov	r21,r2
    5dd4:	000c9e00 	call	c9e0 <__floatsidf>
    5dd8:	100d883a 	mov	r6,r2
    5ddc:	180f883a 	mov	r7,r3
    5de0:	9809883a 	mov	r4,r19
    5de4:	800b883a 	mov	r5,r16
    5de8:	d8800815 	stw	r2,32(sp)
    5dec:	d8c00915 	stw	r3,36(sp)
    5df0:	000c0000 	call	c000 <__subdf3>
    5df4:	000d883a 	mov	r6,zero
    5df8:	01d05c34 	movhi	r7,16752
    5dfc:	1009883a 	mov	r4,r2
    5e00:	180b883a 	mov	r5,r3
    5e04:	000b98c0 	call	b98c <__muldf3>
    5e08:	1009883a 	mov	r4,r2
    5e0c:	180b883a 	mov	r5,r3
    5e10:	000d883a 	mov	r6,zero
    5e14:	000f883a 	mov	r7,zero
    5e18:	d8800a15 	stw	r2,40(sp)
    5e1c:	d8c00b15 	stw	r3,44(sp)
    5e20:	000b73c0 	call	b73c <__eqdf2>
    5e24:	1000c01e 	bne	r2,zero,6128 <__ieee754_rem_pio2+0x65c>
    5e28:	a800bd1e 	bne	r21,zero,6120 <__ieee754_rem_pio2+0x654>
    5e2c:	01c00044 	movi	r7,1
    5e30:	008000b4 	movhi	r2,2
    5e34:	10849104 	addi	r2,r2,4676
    5e38:	d8800115 	stw	r2,4(sp)
    5e3c:	00800084 	movi	r2,2
    5e40:	a00d883a 	mov	r6,r20
    5e44:	d8800015 	stw	r2,0(sp)
    5e48:	880b883a 	mov	r5,r17
    5e4c:	d9000604 	addi	r4,sp,24
    5e50:	0006e2c0 	call	6e2c <__kernel_rem_pio2>
    5e54:	1029883a 	mov	r20,r2
    5e58:	903f550e 	bge	r18,zero,5bb0 <__ieee754_rem_pio2+0xe4>
    5e5c:	88c00117 	ldw	r3,4(r17)
    5e60:	88800317 	ldw	r2,12(r17)
    5e64:	0529c83a 	sub	r20,zero,r20
    5e68:	18e0003c 	xorhi	r3,r3,32768
    5e6c:	10a0003c 	xorhi	r2,r2,32768
    5e70:	88c00115 	stw	r3,4(r17)
    5e74:	88800315 	stw	r2,12(r17)
    5e78:	003f4d06 	br	5bb0 <__ieee754_rem_pio2+0xe4>
    5e7c:	01cf7474 	movhi	r7,15825
    5e80:	01869834 	movhi	r6,6752
    5e84:	39ed1844 	addi	r7,r7,-19359
    5e88:	000c0000 	call	c000 <__subdf3>
    5e8c:	018b80f4 	movhi	r6,11779
    5e90:	01cee8f4 	movhi	r7,15267
    5e94:	319c1cc4 	addi	r6,r6,28787
    5e98:	39c66284 	addi	r7,r7,6538
    5e9c:	1009883a 	mov	r4,r2
    5ea0:	180b883a 	mov	r5,r3
    5ea4:	1025883a 	mov	r18,r2
    5ea8:	1821883a 	mov	r16,r3
    5eac:	000c0000 	call	c000 <__subdf3>
    5eb0:	100d883a 	mov	r6,r2
    5eb4:	180f883a 	mov	r7,r3
    5eb8:	9009883a 	mov	r4,r18
    5ebc:	800b883a 	mov	r5,r16
    5ec0:	88800015 	stw	r2,0(r17)
    5ec4:	88c00115 	stw	r3,4(r17)
    5ec8:	000c0000 	call	c000 <__subdf3>
    5ecc:	018b80f4 	movhi	r6,11779
    5ed0:	01cee8f4 	movhi	r7,15267
    5ed4:	319c1cc4 	addi	r6,r6,28787
    5ed8:	39c66284 	addi	r7,r7,6538
    5edc:	003f2e06 	br	5b98 <__ieee754_rem_pio2+0xcc>
    5ee0:	1812d53a 	srli	r9,r3,20
    5ee4:	8021d53a 	srai	r16,r16,20
    5ee8:	4a41ffcc 	andi	r9,r9,2047
    5eec:	8253c83a 	sub	r9,r16,r9
    5ef0:	4a400448 	cmpgei	r9,r9,17
    5ef4:	48000c1e 	bne	r9,zero,5f28 <__ieee754_rem_pio2+0x45c>
    5ef8:	88800015 	stw	r2,0(r17)
    5efc:	88c00115 	stw	r3,4(r17)
    5f00:	003f7906 	br	5ce8 <__ieee754_rem_pio2+0x21c>
    5f04:	200d883a 	mov	r6,r4
    5f08:	280f883a 	mov	r7,r5
    5f0c:	000c0000 	call	c000 <__subdf3>
    5f10:	88800215 	stw	r2,8(r17)
    5f14:	88c00315 	stw	r3,12(r17)
    5f18:	88800015 	stw	r2,0(r17)
    5f1c:	88c00115 	stw	r3,4(r17)
    5f20:	0029883a 	mov	r20,zero
    5f24:	003f2206 	br	5bb0 <__ieee754_rem_pio2+0xe4>
    5f28:	01cf7474 	movhi	r7,15825
    5f2c:	01869834 	movhi	r6,6752
    5f30:	39ed1844 	addi	r7,r7,-19359
    5f34:	b009883a 	mov	r4,r22
    5f38:	a80b883a 	mov	r5,r21
    5f3c:	000b98c0 	call	b98c <__muldf3>
    5f40:	d9400217 	ldw	r5,8(sp)
    5f44:	100d883a 	mov	r6,r2
    5f48:	180f883a 	mov	r7,r3
    5f4c:	e009883a 	mov	r4,fp
    5f50:	102f883a 	mov	r23,r2
    5f54:	1827883a 	mov	r19,r3
    5f58:	000c0000 	call	c000 <__subdf3>
    5f5c:	d9400217 	ldw	r5,8(sp)
    5f60:	100d883a 	mov	r6,r2
    5f64:	180f883a 	mov	r7,r3
    5f68:	e009883a 	mov	r4,fp
    5f6c:	d8800315 	stw	r2,12(sp)
    5f70:	d8c00415 	stw	r3,16(sp)
    5f74:	000c0000 	call	c000 <__subdf3>
    5f78:	b80d883a 	mov	r6,r23
    5f7c:	980f883a 	mov	r7,r19
    5f80:	1009883a 	mov	r4,r2
    5f84:	180b883a 	mov	r5,r3
    5f88:	000c0000 	call	c000 <__subdf3>
    5f8c:	018b80f4 	movhi	r6,11779
    5f90:	01cee8f4 	movhi	r7,15267
    5f94:	319c1cc4 	addi	r6,r6,28787
    5f98:	39c66284 	addi	r7,r7,6538
    5f9c:	b009883a 	mov	r4,r22
    5fa0:	a80b883a 	mov	r5,r21
    5fa4:	102f883a 	mov	r23,r2
    5fa8:	1827883a 	mov	r19,r3
    5fac:	000b98c0 	call	b98c <__muldf3>
    5fb0:	b80d883a 	mov	r6,r23
    5fb4:	980f883a 	mov	r7,r19
    5fb8:	1009883a 	mov	r4,r2
    5fbc:	180b883a 	mov	r5,r3
    5fc0:	000c0000 	call	c000 <__subdf3>
    5fc4:	da400417 	ldw	r9,16(sp)
    5fc8:	db800317 	ldw	r14,12(sp)
    5fcc:	100d883a 	mov	r6,r2
    5fd0:	480b883a 	mov	r5,r9
    5fd4:	7009883a 	mov	r4,r14
    5fd8:	180f883a 	mov	r7,r3
    5fdc:	da400215 	stw	r9,8(sp)
    5fe0:	102f883a 	mov	r23,r2
    5fe4:	1827883a 	mov	r19,r3
    5fe8:	000c0000 	call	c000 <__subdf3>
    5fec:	1815883a 	mov	r10,r3
    5ff0:	1806d53a 	srli	r3,r3,20
    5ff4:	da400217 	ldw	r9,8(sp)
    5ff8:	db800317 	ldw	r14,12(sp)
    5ffc:	18c1ffcc 	andi	r3,r3,2047
    6000:	80e1c83a 	sub	r16,r16,r3
    6004:	84000c88 	cmpgei	r16,r16,50
    6008:	1017883a 	mov	r11,r2
    600c:	80003f26 	beq	r16,zero,610c <__ieee754_rem_pio2+0x640>
    6010:	01cee8f4 	movhi	r7,15267
    6014:	018b8034 	movhi	r6,11776
    6018:	39c66284 	addi	r7,r7,6538
    601c:	b009883a 	mov	r4,r22
    6020:	a80b883a 	mov	r5,r21
    6024:	da400315 	stw	r9,12(sp)
    6028:	db800215 	stw	r14,8(sp)
    602c:	000b98c0 	call	b98c <__muldf3>
    6030:	db800217 	ldw	r14,8(sp)
    6034:	da400317 	ldw	r9,12(sp)
    6038:	100d883a 	mov	r6,r2
    603c:	7009883a 	mov	r4,r14
    6040:	480b883a 	mov	r5,r9
    6044:	180f883a 	mov	r7,r3
    6048:	1027883a 	mov	r19,r2
    604c:	1821883a 	mov	r16,r3
    6050:	db800515 	stw	r14,20(sp)
    6054:	da400415 	stw	r9,16(sp)
    6058:	000c0000 	call	c000 <__subdf3>
    605c:	db800517 	ldw	r14,20(sp)
    6060:	da400417 	ldw	r9,16(sp)
    6064:	100d883a 	mov	r6,r2
    6068:	7009883a 	mov	r4,r14
    606c:	480b883a 	mov	r5,r9
    6070:	180f883a 	mov	r7,r3
    6074:	d8800315 	stw	r2,12(sp)
    6078:	d8c00215 	stw	r3,8(sp)
    607c:	000c0000 	call	c000 <__subdf3>
    6080:	980d883a 	mov	r6,r19
    6084:	800f883a 	mov	r7,r16
    6088:	1009883a 	mov	r4,r2
    608c:	180b883a 	mov	r5,r3
    6090:	000c0000 	call	c000 <__subdf3>
    6094:	01894834 	movhi	r6,9504
    6098:	01ce5f34 	movhi	r7,14716
    609c:	31927044 	addi	r6,r6,18881
    60a0:	39e0e684 	addi	r7,r7,-31846
    60a4:	b009883a 	mov	r4,r22
    60a8:	a80b883a 	mov	r5,r21
    60ac:	1027883a 	mov	r19,r2
    60b0:	1821883a 	mov	r16,r3
    60b4:	000b98c0 	call	b98c <__muldf3>
    60b8:	980d883a 	mov	r6,r19
    60bc:	800f883a 	mov	r7,r16
    60c0:	1009883a 	mov	r4,r2
    60c4:	180b883a 	mov	r5,r3
    60c8:	000c0000 	call	c000 <__subdf3>
    60cc:	db400317 	ldw	r13,12(sp)
    60d0:	db000217 	ldw	r12,8(sp)
    60d4:	100d883a 	mov	r6,r2
    60d8:	6809883a 	mov	r4,r13
    60dc:	600b883a 	mov	r5,r12
    60e0:	180f883a 	mov	r7,r3
    60e4:	102f883a 	mov	r23,r2
    60e8:	1827883a 	mov	r19,r3
    60ec:	000c0000 	call	c000 <__subdf3>
    60f0:	db400317 	ldw	r13,12(sp)
    60f4:	db000217 	ldw	r12,8(sp)
    60f8:	1017883a 	mov	r11,r2
    60fc:	1815883a 	mov	r10,r3
    6100:	88800015 	stw	r2,0(r17)
    6104:	88c00115 	stw	r3,4(r17)
    6108:	003ef706 	br	5ce8 <__ieee754_rem_pio2+0x21c>
    610c:	88800015 	stw	r2,0(r17)
    6110:	8a800115 	stw	r10,4(r17)
    6114:	701b883a 	mov	r13,r14
    6118:	4819883a 	mov	r12,r9
    611c:	003ef206 	br	5ce8 <__ieee754_rem_pio2+0x21c>
    6120:	01c00084 	movi	r7,2
    6124:	003f4206 	br	5e30 <__ieee754_rem_pio2+0x364>
    6128:	01c000c4 	movi	r7,3
    612c:	003f4006 	br	5e30 <__ieee754_rem_pio2+0x364>
    6130:	000a5fc0 	call	a5fc <__adddf3>
    6134:	010ffe74 	movhi	r4,16377
    6138:	21087ec4 	addi	r4,r4,8699
    613c:	1027883a 	mov	r19,r2
    6140:	1825883a 	mov	r18,r3
    6144:	81001926 	beq	r16,r4,61ac <__ieee754_rem_pio2+0x6e0>
    6148:	018698b4 	movhi	r6,6754
    614c:	01cf7474 	movhi	r7,15825
    6150:	3198cc44 	addi	r6,r6,25393
    6154:	39ed1844 	addi	r7,r7,-19359
    6158:	1009883a 	mov	r4,r2
    615c:	180b883a 	mov	r5,r3
    6160:	000a5fc0 	call	a5fc <__adddf3>
    6164:	100d883a 	mov	r6,r2
    6168:	180f883a 	mov	r7,r3
    616c:	9809883a 	mov	r4,r19
    6170:	900b883a 	mov	r5,r18
    6174:	88800015 	stw	r2,0(r17)
    6178:	88c00115 	stw	r3,4(r17)
    617c:	000c0000 	call	c000 <__subdf3>
    6180:	018698b4 	movhi	r6,6754
    6184:	01cf7474 	movhi	r7,15825
    6188:	3198cc44 	addi	r6,r6,25393
    618c:	39ed1844 	addi	r7,r7,-19359
    6190:	1009883a 	mov	r4,r2
    6194:	180b883a 	mov	r5,r3
    6198:	000a5fc0 	call	a5fc <__adddf3>
    619c:	88800215 	stw	r2,8(r17)
    61a0:	88c00315 	stw	r3,12(r17)
    61a4:	053fffc4 	movi	r20,-1
    61a8:	003e8106 	br	5bb0 <__ieee754_rem_pio2+0xe4>
    61ac:	01cf7474 	movhi	r7,15825
    61b0:	01869834 	movhi	r6,6752
    61b4:	39ed1844 	addi	r7,r7,-19359
    61b8:	1009883a 	mov	r4,r2
    61bc:	180b883a 	mov	r5,r3
    61c0:	000a5fc0 	call	a5fc <__adddf3>
    61c4:	018b80f4 	movhi	r6,11779
    61c8:	01cee8f4 	movhi	r7,15267
    61cc:	319c1cc4 	addi	r6,r6,28787
    61d0:	39c66284 	addi	r7,r7,6538
    61d4:	1009883a 	mov	r4,r2
    61d8:	180b883a 	mov	r5,r3
    61dc:	1025883a 	mov	r18,r2
    61e0:	1821883a 	mov	r16,r3
    61e4:	000a5fc0 	call	a5fc <__adddf3>
    61e8:	100d883a 	mov	r6,r2
    61ec:	180f883a 	mov	r7,r3
    61f0:	9009883a 	mov	r4,r18
    61f4:	800b883a 	mov	r5,r16
    61f8:	88800015 	stw	r2,0(r17)
    61fc:	88c00115 	stw	r3,4(r17)
    6200:	000c0000 	call	c000 <__subdf3>
    6204:	018b80f4 	movhi	r6,11779
    6208:	01cee8f4 	movhi	r7,15267
    620c:	319c1cc4 	addi	r6,r6,28787
    6210:	39c66284 	addi	r7,r7,6538
    6214:	003fde06 	br	6190 <__ieee754_rem_pio2+0x6c4>

00006218 <__ieee754_sqrt>:
    6218:	defffd04 	addi	sp,sp,-12
    621c:	dc400115 	stw	r17,4(sp)
    6220:	dc000015 	stw	r16,0(sp)
    6224:	dfc00215 	stw	ra,8(sp)
    6228:	28dffc2c 	andhi	r3,r5,32752
    622c:	009ffc34 	movhi	r2,32752
    6230:	2821883a 	mov	r16,r5
    6234:	2023883a 	mov	r17,r4
    6238:	18807726 	beq	r3,r2,6418 <__ieee754_sqrt+0x200>
    623c:	2011883a 	mov	r8,r4
    6240:	01403a0e 	bge	zero,r5,632c <__ieee754_sqrt+0x114>
    6244:	2807d53a 	srai	r3,r5,20
    6248:	18004626 	beq	r3,zero,6364 <__ieee754_sqrt+0x14c>
    624c:	00800434 	movhi	r2,16
    6250:	1aff0044 	addi	r11,r3,-1023
    6254:	10bfffc4 	addi	r2,r2,-1
    6258:	8084703a 	and	r2,r16,r2
    625c:	5900004c 	andi	r4,r11,1
    6260:	10c00434 	orhi	r3,r2,16
    6264:	20000426 	beq	r4,zero,6278 <__ieee754_sqrt+0x60>
    6268:	4004d7fa 	srli	r2,r8,31
    626c:	18c7883a 	add	r3,r3,r3
    6270:	4211883a 	add	r8,r8,r8
    6274:	10c7883a 	add	r3,r2,r3
    6278:	4004d7fa 	srli	r2,r8,31
    627c:	5817d07a 	srai	r11,r11,1
    6280:	18c7883a 	add	r3,r3,r3
    6284:	1887883a 	add	r3,r3,r2
    6288:	4209883a 	add	r4,r8,r8
    628c:	01c00584 	movi	r7,22
    6290:	0019883a 	mov	r12,zero
    6294:	000b883a 	mov	r5,zero
    6298:	00800834 	movhi	r2,32
    629c:	288d883a 	add	r6,r5,r2
    62a0:	2010d7fa 	srli	r8,r4,31
    62a4:	39ffffc4 	addi	r7,r7,-1
    62a8:	19800316 	blt	r3,r6,62b8 <__ieee754_sqrt+0xa0>
    62ac:	1987c83a 	sub	r3,r3,r6
    62b0:	308b883a 	add	r5,r6,r2
    62b4:	6099883a 	add	r12,r12,r2
    62b8:	18c7883a 	add	r3,r3,r3
    62bc:	1004d07a 	srli	r2,r2,1
    62c0:	40c7883a 	add	r3,r8,r3
    62c4:	2109883a 	add	r4,r4,r4
    62c8:	383ff41e 	bne	r7,zero,629c <__ieee754_sqrt+0x84>
    62cc:	0013883a 	mov	r9,zero
    62d0:	00800804 	movi	r2,32
    62d4:	01a00034 	movhi	r6,32768
    62d8:	00000806 	br	62fc <__ieee754_sqrt+0xe4>
    62dc:	19403326 	beq	r3,r5,63ac <__ieee754_sqrt+0x194>
    62e0:	2010d7fa 	srli	r8,r4,31
    62e4:	18c7883a 	add	r3,r3,r3
    62e8:	10bfffc4 	addi	r2,r2,-1
    62ec:	300cd07a 	srli	r6,r6,1
    62f0:	1a07883a 	add	r3,r3,r8
    62f4:	2109883a 	add	r4,r4,r4
    62f8:	10003226 	beq	r2,zero,63c4 <__ieee754_sqrt+0x1ac>
    62fc:	31d1883a 	add	r8,r6,r7
    6300:	28fff60e 	bge	r5,r3,62dc <__ieee754_sqrt+0xc4>
    6304:	418f883a 	add	r7,r8,r6
    6308:	40002516 	blt	r8,zero,63a0 <__ieee754_sqrt+0x188>
    630c:	2815883a 	mov	r10,r5
    6310:	1947c83a 	sub	r3,r3,r5
    6314:	2200012e 	bgeu	r4,r8,631c <__ieee754_sqrt+0x104>
    6318:	18ffffc4 	addi	r3,r3,-1
    631c:	2209c83a 	sub	r4,r4,r8
    6320:	4993883a 	add	r9,r9,r6
    6324:	500b883a 	mov	r5,r10
    6328:	003fed06 	br	62e0 <__ieee754_sqrt+0xc8>
    632c:	00a00034 	movhi	r2,32768
    6330:	10bfffc4 	addi	r2,r2,-1
    6334:	2884703a 	and	r2,r5,r2
    6338:	1104b03a 	or	r2,r2,r4
    633c:	10004826 	beq	r2,zero,6460 <__ieee754_sqrt+0x248>
    6340:	28003e1e 	bne	r5,zero,643c <__ieee754_sqrt+0x224>
    6344:	0007883a 	mov	r3,zero
    6348:	4004d2fa 	srli	r2,r8,11
    634c:	18fffac4 	addi	r3,r3,-21
    6350:	4010957a 	slli	r8,r8,21
    6354:	1021883a 	mov	r16,r2
    6358:	103ffb26 	beq	r2,zero,6348 <__ieee754_sqrt+0x130>
    635c:	1100042c 	andhi	r4,r2,16
    6360:	2000441e 	bne	r4,zero,6474 <__ieee754_sqrt+0x25c>
    6364:	0005883a 	mov	r2,zero
    6368:	8421883a 	add	r16,r16,r16
    636c:	8140042c 	andhi	r5,r16,16
    6370:	1009883a 	mov	r4,r2
    6374:	10800044 	addi	r2,r2,1
    6378:	283ffb26 	beq	r5,zero,6368 <__ieee754_sqrt+0x150>
    637c:	01800804 	movi	r6,32
    6380:	400b883a 	mov	r5,r8
    6384:	308dc83a 	sub	r6,r6,r2
    6388:	4090983a 	sll	r8,r8,r2
    638c:	8005883a 	mov	r2,r16
    6390:	298ed83a 	srl	r7,r5,r6
    6394:	1907c83a 	sub	r3,r3,r4
    6398:	38a0b03a 	or	r16,r7,r2
    639c:	003fab06 	br	624c <__ieee754_sqrt+0x34>
    63a0:	383fda16 	blt	r7,zero,630c <__ieee754_sqrt+0xf4>
    63a4:	2a800044 	addi	r10,r5,1
    63a8:	003fd906 	br	6310 <__ieee754_sqrt+0xf8>
    63ac:	223fcc36 	bltu	r4,r8,62e0 <__ieee754_sqrt+0xc8>
    63b0:	418f883a 	add	r7,r8,r6
    63b4:	403ffa16 	blt	r8,zero,63a0 <__ieee754_sqrt+0x188>
    63b8:	1815883a 	mov	r10,r3
    63bc:	0007883a 	mov	r3,zero
    63c0:	003fd606 	br	631c <__ieee754_sqrt+0x104>
    63c4:	1906b03a 	or	r3,r3,r4
    63c8:	18000e1e 	bne	r3,zero,6404 <__ieee754_sqrt+0x1ec>
    63cc:	4804d07a 	srli	r2,r9,1
    63d0:	6007d07a 	srai	r3,r12,1
    63d4:	01cff834 	movhi	r7,16352
    63d8:	6300004c 	andi	r12,r12,1
    63dc:	19cf883a 	add	r7,r3,r7
    63e0:	60000126 	beq	r12,zero,63e8 <__ieee754_sqrt+0x1d0>
    63e4:	10a00034 	orhi	r2,r2,32768
    63e8:	5806953a 	slli	r3,r11,20
    63ec:	19c7883a 	add	r3,r3,r7
    63f0:	dfc00217 	ldw	ra,8(sp)
    63f4:	dc400117 	ldw	r17,4(sp)
    63f8:	dc000017 	ldw	r16,0(sp)
    63fc:	dec00304 	addi	sp,sp,12
    6400:	f800283a 	ret
    6404:	48ffffd8 	cmpnei	r3,r9,-1
    6408:	18001826 	beq	r3,zero,646c <__ieee754_sqrt+0x254>
    640c:	48800044 	addi	r2,r9,1
    6410:	1004d07a 	srli	r2,r2,1
    6414:	003fee06 	br	63d0 <__ieee754_sqrt+0x1b8>
    6418:	200d883a 	mov	r6,r4
    641c:	280f883a 	mov	r7,r5
    6420:	000b98c0 	call	b98c <__muldf3>
    6424:	880d883a 	mov	r6,r17
    6428:	800f883a 	mov	r7,r16
    642c:	1009883a 	mov	r4,r2
    6430:	180b883a 	mov	r5,r3
    6434:	000a5fc0 	call	a5fc <__adddf3>
    6438:	003fed06 	br	63f0 <__ieee754_sqrt+0x1d8>
    643c:	200d883a 	mov	r6,r4
    6440:	280f883a 	mov	r7,r5
    6444:	000c0000 	call	c000 <__subdf3>
    6448:	100d883a 	mov	r6,r2
    644c:	180f883a 	mov	r7,r3
    6450:	1009883a 	mov	r4,r2
    6454:	180b883a 	mov	r5,r3
    6458:	000aeec0 	call	aeec <__divdf3>
    645c:	003fe406 	br	63f0 <__ieee754_sqrt+0x1d8>
    6460:	2005883a 	mov	r2,r4
    6464:	2807883a 	mov	r3,r5
    6468:	003fe106 	br	63f0 <__ieee754_sqrt+0x1d8>
    646c:	63000044 	addi	r12,r12,1
    6470:	003fd706 	br	63d0 <__ieee754_sqrt+0x1b8>
    6474:	400b883a 	mov	r5,r8
    6478:	01800804 	movi	r6,32
    647c:	013fffc4 	movi	r4,-1
    6480:	003fc306 	br	6390 <__ieee754_sqrt+0x178>

00006484 <__ieee754_rem_pio2f>:
    6484:	defff104 	addi	sp,sp,-60
    6488:	dc000515 	stw	r16,20(sp)
    648c:	04200034 	movhi	r16,32768
    6490:	843fffc4 	addi	r16,r16,-1
    6494:	008fd274 	movhi	r2,16201
    6498:	dc400615 	stw	r17,24(sp)
    649c:	dfc00e15 	stw	ra,56(sp)
    64a0:	df000d15 	stw	fp,52(sp)
    64a4:	ddc00c15 	stw	r23,48(sp)
    64a8:	dd800b15 	stw	r22,44(sp)
    64ac:	dd400a15 	stw	r21,40(sp)
    64b0:	dd000915 	stw	r20,36(sp)
    64b4:	dcc00815 	stw	r19,32(sp)
    64b8:	dc800715 	stw	r18,28(sp)
    64bc:	8120703a 	and	r16,r16,r4
    64c0:	1083f604 	addi	r2,r2,4056
    64c4:	2823883a 	mov	r17,r5
    64c8:	1400620e 	bge	r2,r16,6654 <__ieee754_rem_pio2f+0x1d0>
    64cc:	009005f4 	movhi	r2,16407
    64d0:	10b2f8c4 	addi	r2,r2,-13341
    64d4:	2025883a 	mov	r18,r4
    64d8:	14002516 	blt	r2,r16,6570 <__ieee754_rem_pio2f+0xec>
    64dc:	00bffc04 	movi	r2,-16
    64e0:	014ff274 	movhi	r5,16329
    64e4:	80a0703a 	and	r16,r16,r2
    64e8:	2943e004 	addi	r5,r5,3968
    64ec:	0100fd0e 	bge	zero,r4,68e4 <__ieee754_rem_pio2f+0x460>
    64f0:	0009ed80 	call	9ed8 <__subsf3>
    64f4:	1025883a 	mov	r18,r2
    64f8:	008ff274 	movhi	r2,16329
    64fc:	1083f404 	addi	r2,r2,4048
    6500:	014dcd74 	movhi	r5,14133
    6504:	80809226 	beq	r16,r2,6750 <__ieee754_rem_pio2f+0x2cc>
    6508:	295110c4 	addi	r5,r5,17475
    650c:	9009883a 	mov	r4,r18
    6510:	0009ed80 	call	9ed8 <__subsf3>
    6514:	100b883a 	mov	r5,r2
    6518:	9009883a 	mov	r4,r18
    651c:	88800015 	stw	r2,0(r17)
    6520:	0009ed80 	call	9ed8 <__subsf3>
    6524:	014dcd74 	movhi	r5,14133
    6528:	295110c4 	addi	r5,r5,17475
    652c:	1009883a 	mov	r4,r2
    6530:	0009ed80 	call	9ed8 <__subsf3>
    6534:	88800115 	stw	r2,4(r17)
    6538:	05c00044 	movi	r23,1
    653c:	b805883a 	mov	r2,r23
    6540:	dfc00e17 	ldw	ra,56(sp)
    6544:	df000d17 	ldw	fp,52(sp)
    6548:	ddc00c17 	ldw	r23,48(sp)
    654c:	dd800b17 	ldw	r22,44(sp)
    6550:	dd400a17 	ldw	r21,40(sp)
    6554:	dd000917 	ldw	r20,36(sp)
    6558:	dcc00817 	ldw	r19,32(sp)
    655c:	dc800717 	ldw	r18,28(sp)
    6560:	dc400617 	ldw	r17,24(sp)
    6564:	dc000517 	ldw	r16,20(sp)
    6568:	dec00f04 	addi	sp,sp,60
    656c:	f800283a 	ret
    6570:	0090d274 	movhi	r2,17225
    6574:	1083e004 	addi	r2,r2,3968
    6578:	14003a16 	blt	r2,r16,6664 <__ieee754_rem_pio2f+0x1e0>
    657c:	014fc8f4 	movhi	r5,16163
    6580:	297e6104 	addi	r5,r5,-1660
    6584:	8009883a 	mov	r4,r16
    6588:	0009b240 	call	9b24 <__mulsf3>
    658c:	014fc034 	movhi	r5,16128
    6590:	1009883a 	mov	r4,r2
    6594:	00095900 	call	9590 <__addsf3>
    6598:	1009883a 	mov	r4,r2
    659c:	000a36c0 	call	a36c <__fixsfsi>
    65a0:	1009883a 	mov	r4,r2
    65a4:	102f883a 	mov	r23,r2
    65a8:	000a3dc0 	call	a3dc <__floatsisf>
    65ac:	014ff274 	movhi	r5,16329
    65b0:	2943e004 	addi	r5,r5,3968
    65b4:	1009883a 	mov	r4,r2
    65b8:	102b883a 	mov	r21,r2
    65bc:	0009b240 	call	9b24 <__mulsf3>
    65c0:	100b883a 	mov	r5,r2
    65c4:	8009883a 	mov	r4,r16
    65c8:	0009ed80 	call	9ed8 <__subsf3>
    65cc:	014dcd74 	movhi	r5,14133
    65d0:	295110c4 	addi	r5,r5,17475
    65d4:	a809883a 	mov	r4,r21
    65d8:	1029883a 	mov	r20,r2
    65dc:	0009b240 	call	9b24 <__mulsf3>
    65e0:	a009883a 	mov	r4,r20
    65e4:	100b883a 	mov	r5,r2
    65e8:	1027883a 	mov	r19,r2
    65ec:	0009ed80 	call	9ed8 <__subsf3>
    65f0:	b8c00808 	cmpgei	r3,r23,32
    65f4:	a009883a 	mov	r4,r20
    65f8:	102d883a 	mov	r22,r2
    65fc:	1800671e 	bne	r3,zero,679c <__ieee754_rem_pio2f+0x318>
    6600:	b80a90ba 	slli	r5,r23,2
    6604:	00c000b4 	movhi	r3,2
    6608:	28c7883a 	add	r3,r5,r3
    660c:	1944d217 	ldw	r5,4936(r3)
    6610:	00ffc004 	movi	r3,-256
    6614:	80c6703a 	and	r3,r16,r3
    6618:	19406026 	beq	r3,r5,679c <__ieee754_rem_pio2f+0x318>
    661c:	88800015 	stw	r2,0(r17)
    6620:	b00b883a 	mov	r5,r22
    6624:	0009ed80 	call	9ed8 <__subsf3>
    6628:	980b883a 	mov	r5,r19
    662c:	1009883a 	mov	r4,r2
    6630:	0009ed80 	call	9ed8 <__subsf3>
    6634:	88800115 	stw	r2,4(r17)
    6638:	903fc00e 	bge	r18,zero,653c <__ieee754_rem_pio2f+0xb8>
    663c:	b5a0003c 	xorhi	r22,r22,32768
    6640:	10e0003c 	xorhi	r3,r2,32768
    6644:	8d800015 	stw	r22,0(r17)
    6648:	88c00115 	stw	r3,4(r17)
    664c:	05efc83a 	sub	r23,zero,r23
    6650:	003fba06 	br	653c <__ieee754_rem_pio2f+0xb8>
    6654:	89000015 	stw	r4,0(r17)
    6658:	28000115 	stw	zero,4(r5)
    665c:	002f883a 	mov	r23,zero
    6660:	003fb606 	br	653c <__ieee754_rem_pio2f+0xb8>
    6664:	009fe034 	movhi	r2,32640
    6668:	8080910e 	bge	r16,r2,68b0 <__ieee754_rem_pio2f+0x42c>
    666c:	8027d5fa 	srai	r19,r16,23
    6670:	9cffde84 	addi	r19,r19,-134
    6674:	980495fa 	slli	r2,r19,23
    6678:	80a1c83a 	sub	r16,r16,r2
    667c:	8009883a 	mov	r4,r16
    6680:	000a36c0 	call	a36c <__fixsfsi>
    6684:	1009883a 	mov	r4,r2
    6688:	000a3dc0 	call	a3dc <__floatsisf>
    668c:	8009883a 	mov	r4,r16
    6690:	100b883a 	mov	r5,r2
    6694:	d8800215 	stw	r2,8(sp)
    6698:	0009ed80 	call	9ed8 <__subsf3>
    669c:	0150e034 	movhi	r5,17280
    66a0:	1009883a 	mov	r4,r2
    66a4:	0009b240 	call	9b24 <__mulsf3>
    66a8:	1009883a 	mov	r4,r2
    66ac:	1029883a 	mov	r20,r2
    66b0:	000a36c0 	call	a36c <__fixsfsi>
    66b4:	1009883a 	mov	r4,r2
    66b8:	000a3dc0 	call	a3dc <__floatsisf>
    66bc:	100b883a 	mov	r5,r2
    66c0:	a009883a 	mov	r4,r20
    66c4:	1021883a 	mov	r16,r2
    66c8:	d8800315 	stw	r2,12(sp)
    66cc:	0009ed80 	call	9ed8 <__subsf3>
    66d0:	0150e034 	movhi	r5,17280
    66d4:	1009883a 	mov	r4,r2
    66d8:	0009b240 	call	9b24 <__mulsf3>
    66dc:	000b883a 	mov	r5,zero
    66e0:	1009883a 	mov	r4,r2
    66e4:	d8800415 	stw	r2,16(sp)
    66e8:	00099fc0 	call	99fc <__eqsf2>
    66ec:	10007b1e 	bne	r2,zero,68dc <__ieee754_rem_pio2f+0x458>
    66f0:	000b883a 	mov	r5,zero
    66f4:	8009883a 	mov	r4,r16
    66f8:	00099fc0 	call	99fc <__eqsf2>
    66fc:	1000751e 	bne	r2,zero,68d4 <__ieee754_rem_pio2f+0x450>
    6700:	01c00044 	movi	r7,1
    6704:	008000b4 	movhi	r2,2
    6708:	1084f304 	addi	r2,r2,5068
    670c:	d8800115 	stw	r2,4(sp)
    6710:	00800084 	movi	r2,2
    6714:	d8800015 	stw	r2,0(sp)
    6718:	980d883a 	mov	r6,r19
    671c:	880b883a 	mov	r5,r17
    6720:	d9000204 	addi	r4,sp,8
    6724:	00080c40 	call	80c4 <__kernel_rem_pio2f>
    6728:	102f883a 	mov	r23,r2
    672c:	903f830e 	bge	r18,zero,653c <__ieee754_rem_pio2f+0xb8>
    6730:	88c00017 	ldw	r3,0(r17)
    6734:	88800117 	ldw	r2,4(r17)
    6738:	05efc83a 	sub	r23,zero,r23
    673c:	18e0003c 	xorhi	r3,r3,32768
    6740:	10a0003c 	xorhi	r2,r2,32768
    6744:	88c00015 	stw	r3,0(r17)
    6748:	88800115 	stw	r2,4(r17)
    674c:	003f7b06 	br	653c <__ieee754_rem_pio2f+0xb8>
    6750:	29510004 	addi	r5,r5,17408
    6754:	9009883a 	mov	r4,r18
    6758:	0009ed80 	call	9ed8 <__subsf3>
    675c:	014ba1b4 	movhi	r5,11910
    6760:	2968c204 	addi	r5,r5,-23800
    6764:	1009883a 	mov	r4,r2
    6768:	1021883a 	mov	r16,r2
    676c:	0009ed80 	call	9ed8 <__subsf3>
    6770:	100b883a 	mov	r5,r2
    6774:	8009883a 	mov	r4,r16
    6778:	88800015 	stw	r2,0(r17)
    677c:	0009ed80 	call	9ed8 <__subsf3>
    6780:	014ba1b4 	movhi	r5,11910
    6784:	2968c204 	addi	r5,r5,-23800
    6788:	1009883a 	mov	r4,r2
    678c:	0009ed80 	call	9ed8 <__subsf3>
    6790:	88800115 	stw	r2,4(r17)
    6794:	05c00044 	movi	r23,1
    6798:	003f6806 	br	653c <__ieee754_rem_pio2f+0xb8>
    679c:	1006d5fa 	srli	r3,r2,23
    67a0:	8021d5fa 	srai	r16,r16,23
    67a4:	18c03fcc 	andi	r3,r3,255
    67a8:	80c7c83a 	sub	r3,r16,r3
    67ac:	18c00248 	cmpgei	r3,r3,9
    67b0:	183f9a26 	beq	r3,zero,661c <__ieee754_rem_pio2f+0x198>
    67b4:	014dcd74 	movhi	r5,14133
    67b8:	29510004 	addi	r5,r5,17408
    67bc:	a809883a 	mov	r4,r21
    67c0:	0009b240 	call	9b24 <__mulsf3>
    67c4:	100b883a 	mov	r5,r2
    67c8:	a009883a 	mov	r4,r20
    67cc:	1027883a 	mov	r19,r2
    67d0:	0009ed80 	call	9ed8 <__subsf3>
    67d4:	100b883a 	mov	r5,r2
    67d8:	a009883a 	mov	r4,r20
    67dc:	1039883a 	mov	fp,r2
    67e0:	0009ed80 	call	9ed8 <__subsf3>
    67e4:	980b883a 	mov	r5,r19
    67e8:	1009883a 	mov	r4,r2
    67ec:	0009ed80 	call	9ed8 <__subsf3>
    67f0:	014ba1b4 	movhi	r5,11910
    67f4:	2968c204 	addi	r5,r5,-23800
    67f8:	a809883a 	mov	r4,r21
    67fc:	1027883a 	mov	r19,r2
    6800:	0009b240 	call	9b24 <__mulsf3>
    6804:	980b883a 	mov	r5,r19
    6808:	1009883a 	mov	r4,r2
    680c:	0009ed80 	call	9ed8 <__subsf3>
    6810:	100b883a 	mov	r5,r2
    6814:	e009883a 	mov	r4,fp
    6818:	1027883a 	mov	r19,r2
    681c:	0009ed80 	call	9ed8 <__subsf3>
    6820:	1006d5fa 	srli	r3,r2,23
    6824:	102d883a 	mov	r22,r2
    6828:	18c03fcc 	andi	r3,r3,255
    682c:	80e1c83a 	sub	r16,r16,r3
    6830:	84000688 	cmpgei	r16,r16,26
    6834:	80002426 	beq	r16,zero,68c8 <__ieee754_rem_pio2f+0x444>
    6838:	014ba1b4 	movhi	r5,11910
    683c:	2968c004 	addi	r5,r5,-23808
    6840:	a809883a 	mov	r4,r21
    6844:	0009b240 	call	9b24 <__mulsf3>
    6848:	100b883a 	mov	r5,r2
    684c:	e009883a 	mov	r4,fp
    6850:	1027883a 	mov	r19,r2
    6854:	0009ed80 	call	9ed8 <__subsf3>
    6858:	100b883a 	mov	r5,r2
    685c:	e009883a 	mov	r4,fp
    6860:	1021883a 	mov	r16,r2
    6864:	0009ed80 	call	9ed8 <__subsf3>
    6868:	980b883a 	mov	r5,r19
    686c:	1009883a 	mov	r4,r2
    6870:	0009ed80 	call	9ed8 <__subsf3>
    6874:	01492374 	movhi	r5,9357
    6878:	294c4c84 	addi	r5,r5,12594
    687c:	a809883a 	mov	r4,r21
    6880:	1027883a 	mov	r19,r2
    6884:	0009b240 	call	9b24 <__mulsf3>
    6888:	980b883a 	mov	r5,r19
    688c:	1009883a 	mov	r4,r2
    6890:	0009ed80 	call	9ed8 <__subsf3>
    6894:	8009883a 	mov	r4,r16
    6898:	100b883a 	mov	r5,r2
    689c:	1027883a 	mov	r19,r2
    68a0:	0009ed80 	call	9ed8 <__subsf3>
    68a4:	8009883a 	mov	r4,r16
    68a8:	102d883a 	mov	r22,r2
    68ac:	003f5b06 	br	661c <__ieee754_rem_pio2f+0x198>
    68b0:	200b883a 	mov	r5,r4
    68b4:	0009ed80 	call	9ed8 <__subsf3>
    68b8:	88800115 	stw	r2,4(r17)
    68bc:	88800015 	stw	r2,0(r17)
    68c0:	002f883a 	mov	r23,zero
    68c4:	003f1d06 	br	653c <__ieee754_rem_pio2f+0xb8>
    68c8:	88800015 	stw	r2,0(r17)
    68cc:	e009883a 	mov	r4,fp
    68d0:	003f5306 	br	6620 <__ieee754_rem_pio2f+0x19c>
    68d4:	01c00084 	movi	r7,2
    68d8:	003f8a06 	br	6704 <__ieee754_rem_pio2f+0x280>
    68dc:	01c000c4 	movi	r7,3
    68e0:	003f8806 	br	6704 <__ieee754_rem_pio2f+0x280>
    68e4:	00095900 	call	9590 <__addsf3>
    68e8:	1025883a 	mov	r18,r2
    68ec:	008ff274 	movhi	r2,16329
    68f0:	1083f404 	addi	r2,r2,4048
    68f4:	014dcd74 	movhi	r5,14133
    68f8:	80800e26 	beq	r16,r2,6934 <__ieee754_rem_pio2f+0x4b0>
    68fc:	295110c4 	addi	r5,r5,17475
    6900:	9009883a 	mov	r4,r18
    6904:	00095900 	call	9590 <__addsf3>
    6908:	100b883a 	mov	r5,r2
    690c:	9009883a 	mov	r4,r18
    6910:	88800015 	stw	r2,0(r17)
    6914:	0009ed80 	call	9ed8 <__subsf3>
    6918:	014dcd74 	movhi	r5,14133
    691c:	295110c4 	addi	r5,r5,17475
    6920:	1009883a 	mov	r4,r2
    6924:	00095900 	call	9590 <__addsf3>
    6928:	88800115 	stw	r2,4(r17)
    692c:	05ffffc4 	movi	r23,-1
    6930:	003f0206 	br	653c <__ieee754_rem_pio2f+0xb8>
    6934:	29510004 	addi	r5,r5,17408
    6938:	9009883a 	mov	r4,r18
    693c:	00095900 	call	9590 <__addsf3>
    6940:	014ba1b4 	movhi	r5,11910
    6944:	2968c204 	addi	r5,r5,-23800
    6948:	1009883a 	mov	r4,r2
    694c:	1021883a 	mov	r16,r2
    6950:	00095900 	call	9590 <__addsf3>
    6954:	100b883a 	mov	r5,r2
    6958:	8009883a 	mov	r4,r16
    695c:	88800015 	stw	r2,0(r17)
    6960:	0009ed80 	call	9ed8 <__subsf3>
    6964:	014ba1b4 	movhi	r5,11910
    6968:	2968c204 	addi	r5,r5,-23800
    696c:	1009883a 	mov	r4,r2
    6970:	00095900 	call	9590 <__addsf3>
    6974:	88800115 	stw	r2,4(r17)
    6978:	05ffffc4 	movi	r23,-1
    697c:	003eef06 	br	653c <__ieee754_rem_pio2f+0xb8>

00006980 <__kernel_cos>:
    6980:	defff204 	addi	sp,sp,-56
    6984:	dc000415 	stw	r16,16(sp)
    6988:	04200034 	movhi	r16,32768
    698c:	843fffc4 	addi	r16,r16,-1
    6990:	df000c15 	stw	fp,48(sp)
    6994:	ddc00b15 	stw	r23,44(sp)
    6998:	dd800a15 	stw	r22,40(sp)
    699c:	dd400915 	stw	r21,36(sp)
    69a0:	dc800615 	stw	r18,24(sp)
    69a4:	dfc00d15 	stw	ra,52(sp)
    69a8:	dd000815 	stw	r20,32(sp)
    69ac:	dcc00715 	stw	r19,28(sp)
    69b0:	dc400515 	stw	r17,20(sp)
    69b4:	2c24703a 	and	r18,r5,r16
    69b8:	008f9034 	movhi	r2,15936
    69bc:	2839883a 	mov	fp,r5
    69c0:	202b883a 	mov	r21,r4
    69c4:	302d883a 	mov	r22,r6
    69c8:	382f883a 	mov	r23,r7
    69cc:	9080750e 	bge	r18,r2,6ba4 <__kernel_cos+0x224>
    69d0:	000c9600 	call	c960 <__fixdfsi>
    69d4:	10011226 	beq	r2,zero,6e20 <__kernel_cos+0x4a0>
    69d8:	a80d883a 	mov	r6,r21
    69dc:	e00f883a 	mov	r7,fp
    69e0:	a809883a 	mov	r4,r21
    69e4:	e00b883a 	mov	r5,fp
    69e8:	000b98c0 	call	b98c <__muldf3>
    69ec:	01afa234 	movhi	r6,48776
    69f0:	01ef6a74 	movhi	r7,48553
    69f4:	318e3504 	addi	r6,r6,14548
    69f8:	39feba44 	addi	r7,r7,-1303
    69fc:	1009883a 	mov	r4,r2
    6a00:	180b883a 	mov	r5,r3
    6a04:	1023883a 	mov	r17,r2
    6a08:	1821883a 	mov	r16,r3
    6a0c:	000b98c0 	call	b98c <__muldf3>
    6a10:	01af6d74 	movhi	r6,48565
    6a14:	01cf88b4 	movhi	r7,15906
    6a18:	31ac7104 	addi	r6,r6,-20028
    6a1c:	39fba784 	addi	r7,r7,-4450
    6a20:	1009883a 	mov	r4,r2
    6a24:	180b883a 	mov	r5,r3
    6a28:	000a5fc0 	call	a5fc <__adddf3>
    6a2c:	880d883a 	mov	r6,r17
    6a30:	800f883a 	mov	r7,r16
    6a34:	1009883a 	mov	r4,r2
    6a38:	180b883a 	mov	r5,r3
    6a3c:	000b98c0 	call	b98c <__muldf3>
    6a40:	01a02734 	movhi	r6,32924
    6a44:	01cfa4b4 	movhi	r7,16018
    6a48:	3194ab44 	addi	r6,r6,21165
    6a4c:	39df93c4 	addi	r7,r7,32335
    6a50:	1009883a 	mov	r4,r2
    6a54:	180b883a 	mov	r5,r3
    6a58:	000c0000 	call	c000 <__subdf3>
    6a5c:	880d883a 	mov	r6,r17
    6a60:	800f883a 	mov	r7,r16
    6a64:	1009883a 	mov	r4,r2
    6a68:	180b883a 	mov	r5,r3
    6a6c:	000b98c0 	call	b98c <__muldf3>
    6a70:	018672f4 	movhi	r6,6603
    6a74:	01cfbeb4 	movhi	r7,16122
    6a78:	31856404 	addi	r6,r6,5520
    6a7c:	39c06804 	addi	r7,r7,416
    6a80:	1009883a 	mov	r4,r2
    6a84:	180b883a 	mov	r5,r3
    6a88:	000a5fc0 	call	a5fc <__adddf3>
    6a8c:	880d883a 	mov	r6,r17
    6a90:	800f883a 	mov	r7,r16
    6a94:	1009883a 	mov	r4,r2
    6a98:	180b883a 	mov	r5,r3
    6a9c:	000b98c0 	call	b98c <__muldf3>
    6aa0:	0185b074 	movhi	r6,5825
    6aa4:	01cfd5f4 	movhi	r7,16215
    6aa8:	31945dc4 	addi	r6,r6,20855
    6aac:	39f05b04 	addi	r7,r7,-16020
    6ab0:	1009883a 	mov	r4,r2
    6ab4:	180b883a 	mov	r5,r3
    6ab8:	000c0000 	call	c000 <__subdf3>
    6abc:	880d883a 	mov	r6,r17
    6ac0:	800f883a 	mov	r7,r16
    6ac4:	1009883a 	mov	r4,r2
    6ac8:	180b883a 	mov	r5,r3
    6acc:	000b98c0 	call	b98c <__muldf3>
    6ad0:	01955574 	movhi	r6,21845
    6ad4:	01cfe974 	movhi	r7,16293
    6ad8:	31955304 	addi	r6,r6,21836
    6adc:	39d55544 	addi	r7,r7,21845
    6ae0:	1009883a 	mov	r4,r2
    6ae4:	180b883a 	mov	r5,r3
    6ae8:	000a5fc0 	call	a5fc <__adddf3>
    6aec:	880d883a 	mov	r6,r17
    6af0:	800f883a 	mov	r7,r16
    6af4:	1009883a 	mov	r4,r2
    6af8:	180b883a 	mov	r5,r3
    6afc:	000b98c0 	call	b98c <__muldf3>
    6b00:	1017883a 	mov	r11,r2
    6b04:	1815883a 	mov	r10,r3
    6b08:	8809883a 	mov	r4,r17
    6b0c:	800b883a 	mov	r5,r16
    6b10:	000d883a 	mov	r6,zero
    6b14:	01cff834 	movhi	r7,16352
    6b18:	da800115 	stw	r10,4(sp)
    6b1c:	dac00015 	stw	r11,0(sp)
    6b20:	000b98c0 	call	b98c <__muldf3>
    6b24:	dac00017 	ldw	r11,0(sp)
    6b28:	da800117 	ldw	r10,4(sp)
    6b2c:	8809883a 	mov	r4,r17
    6b30:	580d883a 	mov	r6,r11
    6b34:	500f883a 	mov	r7,r10
    6b38:	800b883a 	mov	r5,r16
    6b3c:	1023883a 	mov	r17,r2
    6b40:	1821883a 	mov	r16,r3
    6b44:	000b98c0 	call	b98c <__muldf3>
    6b48:	b00d883a 	mov	r6,r22
    6b4c:	b80f883a 	mov	r7,r23
    6b50:	a809883a 	mov	r4,r21
    6b54:	e00b883a 	mov	r5,fp
    6b58:	1027883a 	mov	r19,r2
    6b5c:	1825883a 	mov	r18,r3
    6b60:	000b98c0 	call	b98c <__muldf3>
    6b64:	9809883a 	mov	r4,r19
    6b68:	900b883a 	mov	r5,r18
    6b6c:	100d883a 	mov	r6,r2
    6b70:	180f883a 	mov	r7,r3
    6b74:	000c0000 	call	c000 <__subdf3>
    6b78:	8809883a 	mov	r4,r17
    6b7c:	800b883a 	mov	r5,r16
    6b80:	100d883a 	mov	r6,r2
    6b84:	180f883a 	mov	r7,r3
    6b88:	000c0000 	call	c000 <__subdf3>
    6b8c:	100d883a 	mov	r6,r2
    6b90:	180f883a 	mov	r7,r3
    6b94:	0009883a 	mov	r4,zero
    6b98:	014ffc34 	movhi	r5,16368
    6b9c:	000c0000 	call	c000 <__subdf3>
    6ba0:	00008f06 	br	6de0 <__kernel_cos+0x460>
    6ba4:	200d883a 	mov	r6,r4
    6ba8:	280f883a 	mov	r7,r5
    6bac:	000b98c0 	call	b98c <__muldf3>
    6bb0:	01afa234 	movhi	r6,48776
    6bb4:	01ef6a74 	movhi	r7,48553
    6bb8:	318e3504 	addi	r6,r6,14548
    6bbc:	39feba44 	addi	r7,r7,-1303
    6bc0:	1009883a 	mov	r4,r2
    6bc4:	180b883a 	mov	r5,r3
    6bc8:	1029883a 	mov	r20,r2
    6bcc:	1827883a 	mov	r19,r3
    6bd0:	000b98c0 	call	b98c <__muldf3>
    6bd4:	01af6d74 	movhi	r6,48565
    6bd8:	01cf88b4 	movhi	r7,15906
    6bdc:	31ac7104 	addi	r6,r6,-20028
    6be0:	39fba784 	addi	r7,r7,-4450
    6be4:	1009883a 	mov	r4,r2
    6be8:	180b883a 	mov	r5,r3
    6bec:	000a5fc0 	call	a5fc <__adddf3>
    6bf0:	a00d883a 	mov	r6,r20
    6bf4:	980f883a 	mov	r7,r19
    6bf8:	1009883a 	mov	r4,r2
    6bfc:	180b883a 	mov	r5,r3
    6c00:	000b98c0 	call	b98c <__muldf3>
    6c04:	01a02734 	movhi	r6,32924
    6c08:	01cfa4b4 	movhi	r7,16018
    6c0c:	3194ab44 	addi	r6,r6,21165
    6c10:	39df93c4 	addi	r7,r7,32335
    6c14:	1009883a 	mov	r4,r2
    6c18:	180b883a 	mov	r5,r3
    6c1c:	000c0000 	call	c000 <__subdf3>
    6c20:	a00d883a 	mov	r6,r20
    6c24:	980f883a 	mov	r7,r19
    6c28:	1009883a 	mov	r4,r2
    6c2c:	180b883a 	mov	r5,r3
    6c30:	000b98c0 	call	b98c <__muldf3>
    6c34:	018672f4 	movhi	r6,6603
    6c38:	01cfbeb4 	movhi	r7,16122
    6c3c:	31856404 	addi	r6,r6,5520
    6c40:	39c06804 	addi	r7,r7,416
    6c44:	1009883a 	mov	r4,r2
    6c48:	180b883a 	mov	r5,r3
    6c4c:	000a5fc0 	call	a5fc <__adddf3>
    6c50:	a00d883a 	mov	r6,r20
    6c54:	980f883a 	mov	r7,r19
    6c58:	1009883a 	mov	r4,r2
    6c5c:	180b883a 	mov	r5,r3
    6c60:	000b98c0 	call	b98c <__muldf3>
    6c64:	0185b074 	movhi	r6,5825
    6c68:	01cfd5f4 	movhi	r7,16215
    6c6c:	31945dc4 	addi	r6,r6,20855
    6c70:	39f05b04 	addi	r7,r7,-16020
    6c74:	1009883a 	mov	r4,r2
    6c78:	180b883a 	mov	r5,r3
    6c7c:	000c0000 	call	c000 <__subdf3>
    6c80:	a00d883a 	mov	r6,r20
    6c84:	980f883a 	mov	r7,r19
    6c88:	1009883a 	mov	r4,r2
    6c8c:	180b883a 	mov	r5,r3
    6c90:	000b98c0 	call	b98c <__muldf3>
    6c94:	01955574 	movhi	r6,21845
    6c98:	01cfe974 	movhi	r7,16293
    6c9c:	31955304 	addi	r6,r6,21836
    6ca0:	39d55544 	addi	r7,r7,21845
    6ca4:	1009883a 	mov	r4,r2
    6ca8:	180b883a 	mov	r5,r3
    6cac:	000a5fc0 	call	a5fc <__adddf3>
    6cb0:	1009883a 	mov	r4,r2
    6cb4:	a00d883a 	mov	r6,r20
    6cb8:	980f883a 	mov	r7,r19
    6cbc:	180b883a 	mov	r5,r3
    6cc0:	000b98c0 	call	b98c <__muldf3>
    6cc4:	010ff4f4 	movhi	r4,16339
    6cc8:	210ccc84 	addi	r4,r4,13106
    6ccc:	1013883a 	mov	r9,r2
    6cd0:	1811883a 	mov	r8,r3
    6cd4:	a023883a 	mov	r17,r20
    6cd8:	9821883a 	mov	r16,r19
    6cdc:	1017883a 	mov	r11,r2
    6ce0:	1815883a 	mov	r10,r3
    6ce4:	24bf880e 	bge	r4,r18,6b08 <__kernel_cos+0x188>
    6ce8:	008ffa74 	movhi	r2,16361
    6cec:	14804816 	blt	r2,r18,6e10 <__kernel_cos+0x490>
    6cf0:	043ff834 	movhi	r16,65504
    6cf4:	9421883a 	add	r16,r18,r16
    6cf8:	000d883a 	mov	r6,zero
    6cfc:	800f883a 	mov	r7,r16
    6d00:	0009883a 	mov	r4,zero
    6d04:	014ffc34 	movhi	r5,16368
    6d08:	da400015 	stw	r9,0(sp)
    6d0c:	d8c00115 	stw	r3,4(sp)
    6d10:	000c0000 	call	c000 <__subdf3>
    6d14:	da400017 	ldw	r9,0(sp)
    6d18:	da000117 	ldw	r8,4(sp)
    6d1c:	1017883a 	mov	r11,r2
    6d20:	1815883a 	mov	r10,r3
    6d24:	980b883a 	mov	r5,r19
    6d28:	000d883a 	mov	r6,zero
    6d2c:	01cff834 	movhi	r7,16352
    6d30:	a009883a 	mov	r4,r20
    6d34:	da800115 	stw	r10,4(sp)
    6d38:	dac00015 	stw	r11,0(sp)
    6d3c:	da000315 	stw	r8,12(sp)
    6d40:	da400215 	stw	r9,8(sp)
    6d44:	000b98c0 	call	b98c <__muldf3>
    6d48:	800f883a 	mov	r7,r16
    6d4c:	000d883a 	mov	r6,zero
    6d50:	1009883a 	mov	r4,r2
    6d54:	180b883a 	mov	r5,r3
    6d58:	000c0000 	call	c000 <__subdf3>
    6d5c:	da400217 	ldw	r9,8(sp)
    6d60:	da000317 	ldw	r8,12(sp)
    6d64:	980b883a 	mov	r5,r19
    6d68:	480d883a 	mov	r6,r9
    6d6c:	400f883a 	mov	r7,r8
    6d70:	a009883a 	mov	r4,r20
    6d74:	1023883a 	mov	r17,r2
    6d78:	1821883a 	mov	r16,r3
    6d7c:	000b98c0 	call	b98c <__muldf3>
    6d80:	b00d883a 	mov	r6,r22
    6d84:	b80f883a 	mov	r7,r23
    6d88:	a809883a 	mov	r4,r21
    6d8c:	e00b883a 	mov	r5,fp
    6d90:	1027883a 	mov	r19,r2
    6d94:	1825883a 	mov	r18,r3
    6d98:	000b98c0 	call	b98c <__muldf3>
    6d9c:	100d883a 	mov	r6,r2
    6da0:	180f883a 	mov	r7,r3
    6da4:	9809883a 	mov	r4,r19
    6da8:	900b883a 	mov	r5,r18
    6dac:	000c0000 	call	c000 <__subdf3>
    6db0:	100d883a 	mov	r6,r2
    6db4:	180f883a 	mov	r7,r3
    6db8:	8809883a 	mov	r4,r17
    6dbc:	800b883a 	mov	r5,r16
    6dc0:	000c0000 	call	c000 <__subdf3>
    6dc4:	dac00017 	ldw	r11,0(sp)
    6dc8:	da800117 	ldw	r10,4(sp)
    6dcc:	100d883a 	mov	r6,r2
    6dd0:	180f883a 	mov	r7,r3
    6dd4:	5809883a 	mov	r4,r11
    6dd8:	500b883a 	mov	r5,r10
    6ddc:	000c0000 	call	c000 <__subdf3>
    6de0:	dfc00d17 	ldw	ra,52(sp)
    6de4:	df000c17 	ldw	fp,48(sp)
    6de8:	ddc00b17 	ldw	r23,44(sp)
    6dec:	dd800a17 	ldw	r22,40(sp)
    6df0:	dd400917 	ldw	r21,36(sp)
    6df4:	dd000817 	ldw	r20,32(sp)
    6df8:	dcc00717 	ldw	r19,28(sp)
    6dfc:	dc800617 	ldw	r18,24(sp)
    6e00:	dc400517 	ldw	r17,20(sp)
    6e04:	dc000417 	ldw	r16,16(sp)
    6e08:	dec00e04 	addi	sp,sp,56
    6e0c:	f800283a 	ret
    6e10:	0017883a 	mov	r11,zero
    6e14:	028ff9f4 	movhi	r10,16359
    6e18:	040ff4b4 	movhi	r16,16338
    6e1c:	003fc106 	br	6d24 <__kernel_cos+0x3a4>
    6e20:	0005883a 	mov	r2,zero
    6e24:	00cffc34 	movhi	r3,16368
    6e28:	003fed06 	br	6de0 <__kernel_cos+0x460>

00006e2c <__kernel_rem_pio2>:
    6e2c:	deff5f04 	addi	sp,sp,-644
    6e30:	d880a117 	ldw	r2,644(sp)
    6e34:	dc009715 	stw	r16,604(sp)
    6e38:	dfc0a015 	stw	ra,640(sp)
    6e3c:	100690ba 	slli	r3,r2,2
    6e40:	008000b4 	movhi	r2,2
    6e44:	df009f15 	stw	fp,636(sp)
    6e48:	1885883a 	add	r2,r3,r2
    6e4c:	1085c917 	ldw	r2,5924(r2)
    6e50:	ddc09e15 	stw	r23,632(sp)
    6e54:	dd809d15 	stw	r22,628(sp)
    6e58:	d8800515 	stw	r2,20(sp)
    6e5c:	38bfffc4 	addi	r2,r7,-1
    6e60:	dd409c15 	stw	r21,624(sp)
    6e64:	dd009b15 	stw	r20,620(sp)
    6e68:	dcc09a15 	stw	r19,616(sp)
    6e6c:	dc809915 	stw	r18,612(sp)
    6e70:	dc409815 	stw	r17,608(sp)
    6e74:	d9c00715 	stw	r7,28(sp)
    6e78:	30fffb10 	cmplti	r3,r6,-20
    6e7c:	d9000215 	stw	r4,8(sp)
    6e80:	d9400915 	stw	r5,36(sp)
    6e84:	d8800115 	stw	r2,4(sp)
    6e88:	3021883a 	mov	r16,r6
    6e8c:	18028a1e 	bne	r3,zero,78b8 <__kernel_rem_pio2+0xa8c>
    6e90:	01400604 	movi	r5,24
    6e94:	313fff44 	addi	r4,r6,-3
    6e98:	00093dc0 	call	93dc <__divsi3>
    6e9c:	10c00044 	addi	r3,r2,1
    6ea0:	18fffa24 	muli	r3,r3,-24
    6ea4:	d8800615 	stw	r2,24(sp)
    6ea8:	d9000117 	ldw	r4,4(sp)
    6eac:	80c7883a 	add	r3,r16,r3
    6eb0:	d8800517 	ldw	r2,20(sp)
    6eb4:	d8c00315 	stw	r3,12(sp)
    6eb8:	d8c00617 	ldw	r3,24(sp)
    6ebc:	1105883a 	add	r2,r2,r4
    6ec0:	1925c83a 	sub	r18,r3,r4
    6ec4:	10000f16 	blt	r2,zero,6f04 <__kernel_rem_pio2+0xd8>
    6ec8:	902290ba 	slli	r17,r18,2
    6ecc:	d8c0a217 	ldw	r3,648(sp)
    6ed0:	10800044 	addi	r2,r2,1
    6ed4:	dc001f04 	addi	r16,sp,124
    6ed8:	1c63883a 	add	r17,r3,r17
    6edc:	14a7883a 	add	r19,r2,r18
    6ee0:	90016016 	blt	r18,zero,7464 <__kernel_rem_pio2+0x638>
    6ee4:	89000017 	ldw	r4,0(r17)
    6ee8:	000c9e00 	call	c9e0 <__floatsidf>
    6eec:	80800015 	stw	r2,0(r16)
    6ef0:	80c00115 	stw	r3,4(r16)
    6ef4:	94800044 	addi	r18,r18,1
    6ef8:	84000204 	addi	r16,r16,8
    6efc:	8c400104 	addi	r17,r17,4
    6f00:	94fff71e 	bne	r18,r19,6ee0 <__kernel_rem_pio2+0xb4>
    6f04:	d8800517 	ldw	r2,20(sp)
    6f08:	10002516 	blt	r2,zero,6fa0 <__kernel_rem_pio2+0x174>
    6f0c:	dcc00117 	ldw	r19,4(sp)
    6f10:	d8c01f04 	addi	r3,sp,124
    6f14:	dc406f04 	addi	r17,sp,444
    6f18:	982490fa 	slli	r18,r19,3
    6f1c:	94000204 	addi	r16,r18,8
    6f20:	1ca5883a 	add	r18,r3,r18
    6f24:	d8c00717 	ldw	r3,28(sp)
    6f28:	10ef883a 	add	r23,r2,r3
    6f2c:	d8800217 	ldw	r2,8(sp)
    6f30:	80a1883a 	add	r16,r16,r2
    6f34:	d8800117 	ldw	r2,4(sp)
    6f38:	10015f16 	blt	r2,zero,74b8 <__kernel_rem_pio2+0x68c>
    6f3c:	dd000217 	ldw	r20,8(sp)
    6f40:	902d883a 	mov	r22,r18
    6f44:	0039883a 	mov	fp,zero
    6f48:	002b883a 	mov	r21,zero
    6f4c:	b1800017 	ldw	r6,0(r22)
    6f50:	b1c00117 	ldw	r7,4(r22)
    6f54:	a1000017 	ldw	r4,0(r20)
    6f58:	a1400117 	ldw	r5,4(r20)
    6f5c:	a5000204 	addi	r20,r20,8
    6f60:	b5bffe04 	addi	r22,r22,-8
    6f64:	000b98c0 	call	b98c <__muldf3>
    6f68:	e009883a 	mov	r4,fp
    6f6c:	a80b883a 	mov	r5,r21
    6f70:	100d883a 	mov	r6,r2
    6f74:	180f883a 	mov	r7,r3
    6f78:	000a5fc0 	call	a5fc <__adddf3>
    6f7c:	1039883a 	mov	fp,r2
    6f80:	182b883a 	mov	r21,r3
    6f84:	a43ff11e 	bne	r20,r16,6f4c <__kernel_rem_pio2+0x120>
    6f88:	8f000015 	stw	fp,0(r17)
    6f8c:	8d400115 	stw	r21,4(r17)
    6f90:	9cc00044 	addi	r19,r19,1
    6f94:	8c400204 	addi	r17,r17,8
    6f98:	94800204 	addi	r18,r18,8
    6f9c:	9dffe51e 	bne	r19,r23,6f34 <__kernel_rem_pio2+0x108>
    6fa0:	dc400517 	ldw	r17,20(sp)
    6fa4:	d8c00717 	ldw	r3,28(sp)
    6fa8:	d9000217 	ldw	r4,8(sp)
    6fac:	88bfffc4 	addi	r2,r17,-1
    6fb0:	180690fa 	slli	r3,r3,3
    6fb4:	883890ba 	slli	fp,r17,2
    6fb8:	100490ba 	slli	r2,r2,2
    6fbc:	243ffe04 	addi	r16,r4,-8
    6fc0:	80e1883a 	add	r16,r16,r3
    6fc4:	e1000b04 	addi	r4,fp,44
    6fc8:	10808c04 	addi	r2,r2,560
    6fcc:	d8c00b04 	addi	r3,sp,44
    6fd0:	26c9883a 	add	r4,r4,sp
    6fd4:	10c5883a 	add	r2,r2,r3
    6fd8:	d9000415 	stw	r4,16(sp)
    6fdc:	d8800815 	stw	r2,32(sp)
    6fe0:	883890fa 	slli	fp,r17,3
    6fe4:	d8c00b04 	addi	r3,sp,44
    6fe8:	e0808c04 	addi	r2,fp,560
    6fec:	10c5883a 	add	r2,r2,r3
    6ff0:	157fd817 	ldw	r21,-160(r2)
    6ff4:	153fd917 	ldw	r20,-156(r2)
    6ff8:	0440280e 	bge	zero,r17,709c <__kernel_rem_pio2+0x270>
    6ffc:	d8806f04 	addi	r2,sp,444
    7000:	1725883a 	add	r18,r2,fp
    7004:	1827883a 	mov	r19,r3
    7008:	000d883a 	mov	r6,zero
    700c:	01cf9c34 	movhi	r7,15984
    7010:	a809883a 	mov	r4,r21
    7014:	a00b883a 	mov	r5,r20
    7018:	000b98c0 	call	b98c <__muldf3>
    701c:	180b883a 	mov	r5,r3
    7020:	1009883a 	mov	r4,r2
    7024:	000c9600 	call	c960 <__fixdfsi>
    7028:	1009883a 	mov	r4,r2
    702c:	000c9e00 	call	c9e0 <__floatsidf>
    7030:	000d883a 	mov	r6,zero
    7034:	01d05c34 	movhi	r7,16752
    7038:	1009883a 	mov	r4,r2
    703c:	180b883a 	mov	r5,r3
    7040:	102f883a 	mov	r23,r2
    7044:	182d883a 	mov	r22,r3
    7048:	000b98c0 	call	b98c <__muldf3>
    704c:	100d883a 	mov	r6,r2
    7050:	180f883a 	mov	r7,r3
    7054:	a809883a 	mov	r4,r21
    7058:	a00b883a 	mov	r5,r20
    705c:	000c0000 	call	c000 <__subdf3>
    7060:	180b883a 	mov	r5,r3
    7064:	1009883a 	mov	r4,r2
    7068:	000c9600 	call	c960 <__fixdfsi>
    706c:	91bffe17 	ldw	r6,-8(r18)
    7070:	91ffff17 	ldw	r7,-4(r18)
    7074:	98800015 	stw	r2,0(r19)
    7078:	b809883a 	mov	r4,r23
    707c:	b00b883a 	mov	r5,r22
    7080:	000a5fc0 	call	a5fc <__adddf3>
    7084:	102b883a 	mov	r21,r2
    7088:	94bffe04 	addi	r18,r18,-8
    708c:	d8806f04 	addi	r2,sp,444
    7090:	1829883a 	mov	r20,r3
    7094:	9cc00104 	addi	r19,r19,4
    7098:	14bfdb1e 	bne	r2,r18,7008 <__kernel_rem_pio2+0x1dc>
    709c:	dd800317 	ldw	r22,12(sp)
    70a0:	a809883a 	mov	r4,r21
    70a4:	a00b883a 	mov	r5,r20
    70a8:	b00d883a 	mov	r6,r22
    70ac:	0008fdc0 	call	8fdc <scalbn>
    70b0:	000d883a 	mov	r6,zero
    70b4:	01cff034 	movhi	r7,16320
    70b8:	1009883a 	mov	r4,r2
    70bc:	180b883a 	mov	r5,r3
    70c0:	1029883a 	mov	r20,r2
    70c4:	1827883a 	mov	r19,r3
    70c8:	000b98c0 	call	b98c <__muldf3>
    70cc:	1009883a 	mov	r4,r2
    70d0:	180b883a 	mov	r5,r3
    70d4:	0003bc80 	call	3bc8 <floor>
    70d8:	000d883a 	mov	r6,zero
    70dc:	01d00834 	movhi	r7,16416
    70e0:	1009883a 	mov	r4,r2
    70e4:	180b883a 	mov	r5,r3
    70e8:	000b98c0 	call	b98c <__muldf3>
    70ec:	100d883a 	mov	r6,r2
    70f0:	180f883a 	mov	r7,r3
    70f4:	a009883a 	mov	r4,r20
    70f8:	980b883a 	mov	r5,r19
    70fc:	000c0000 	call	c000 <__subdf3>
    7100:	180b883a 	mov	r5,r3
    7104:	1009883a 	mov	r4,r2
    7108:	1827883a 	mov	r19,r3
    710c:	102b883a 	mov	r21,r2
    7110:	000c9600 	call	c960 <__fixdfsi>
    7114:	1009883a 	mov	r4,r2
    7118:	1029883a 	mov	r20,r2
    711c:	000c9e00 	call	c9e0 <__floatsidf>
    7120:	980b883a 	mov	r5,r19
    7124:	100d883a 	mov	r6,r2
    7128:	180f883a 	mov	r7,r3
    712c:	a809883a 	mov	r4,r21
    7130:	000c0000 	call	c000 <__subdf3>
    7134:	1025883a 	mov	r18,r2
    7138:	1027883a 	mov	r19,r2
    713c:	1813883a 	mov	r9,r3
    7140:	0580670e 	bge	zero,r22,72e0 <__kernel_rem_pio2+0x4b4>
    7144:	88bfffc4 	addi	r2,r17,-1
    7148:	100490ba 	slli	r2,r2,2
    714c:	d9400b04 	addi	r5,sp,44
    7150:	01000604 	movi	r4,24
    7154:	10808c04 	addi	r2,r2,560
    7158:	1145883a 	add	r2,r2,r5
    715c:	117f7417 	ldw	r5,-560(r2)
    7160:	2589c83a 	sub	r4,r4,r22
    7164:	054005c4 	movi	r21,23
    7168:	290dd83a 	sra	r6,r5,r4
    716c:	adabc83a 	sub	r21,r21,r22
    7170:	3108983a 	sll	r4,r6,r4
    7174:	a1a9883a 	add	r20,r20,r6
    7178:	2909c83a 	sub	r4,r5,r4
    717c:	256bd83a 	sra	r21,r4,r21
    7180:	113f7415 	stw	r4,-560(r2)
    7184:	05406016 	blt	zero,r21,7308 <__kernel_rem_pio2+0x4dc>
    7188:	480b883a 	mov	r5,r9
    718c:	000d883a 	mov	r6,zero
    7190:	000f883a 	mov	r7,zero
    7194:	9809883a 	mov	r4,r19
    7198:	da400015 	stw	r9,0(sp)
    719c:	000b73c0 	call	b73c <__eqdf2>
    71a0:	da400017 	ldw	r9,0(sp)
    71a4:	1001d21e 	bne	r2,zero,78f0 <__kernel_rem_pio2+0xac4>
    71a8:	d8800517 	ldw	r2,20(sp)
    71ac:	8cffffc4 	addi	r19,r17,-1
    71b0:	98800a16 	blt	r19,r2,71dc <__kernel_rem_pio2+0x3b0>
    71b4:	880490ba 	slli	r2,r17,2
    71b8:	d9400417 	ldw	r5,16(sp)
    71bc:	0007883a 	mov	r3,zero
    71c0:	10800b04 	addi	r2,r2,44
    71c4:	16c5883a 	add	r2,r2,sp
    71c8:	113fff17 	ldw	r4,-4(r2)
    71cc:	10bfff04 	addi	r2,r2,-4
    71d0:	1906b03a 	or	r3,r3,r4
    71d4:	117ffc1e 	bne	r2,r5,71c8 <__kernel_rem_pio2+0x39c>
    71d8:	1800ba1e 	bne	r3,zero,74c4 <__kernel_rem_pio2+0x698>
    71dc:	d8800817 	ldw	r2,32(sp)
    71e0:	10bf7417 	ldw	r2,-560(r2)
    71e4:	1000b11e 	bne	r2,zero,74ac <__kernel_rem_pio2+0x680>
    71e8:	d8800417 	ldw	r2,16(sp)
    71ec:	05000044 	movi	r20,1
    71f0:	10fffe17 	ldw	r3,-8(r2)
    71f4:	a5000044 	addi	r20,r20,1
    71f8:	10bfff04 	addi	r2,r2,-4
    71fc:	183ffc26 	beq	r3,zero,71f0 <__kernel_rem_pio2+0x3c4>
    7200:	8d05883a 	add	r2,r17,r20
    7204:	8d400044 	addi	r21,r17,1
    7208:	d8800015 	stw	r2,0(sp)
    720c:	d8800617 	ldw	r2,24(sp)
    7210:	88a7883a 	add	r19,r17,r2
    7214:	d8800717 	ldw	r2,28(sp)
    7218:	982690ba 	slli	r19,r19,2
    721c:	1463883a 	add	r17,r2,r17
    7220:	d880a217 	ldw	r2,648(sp)
    7224:	882290fa 	slli	r17,r17,3
    7228:	14e7883a 	add	r19,r2,r19
    722c:	d8801f04 	addi	r2,sp,124
    7230:	1463883a 	add	r17,r2,r17
    7234:	d8806f04 	addi	r2,sp,444
    7238:	1725883a 	add	r18,r2,fp
    723c:	99000117 	ldw	r4,4(r19)
    7240:	000c9e00 	call	c9e0 <__floatsidf>
    7244:	1009883a 	mov	r4,r2
    7248:	88800015 	stw	r2,0(r17)
    724c:	d8800117 	ldw	r2,4(sp)
    7250:	88c00115 	stw	r3,4(r17)
    7254:	180b883a 	mov	r5,r3
    7258:	10001e16 	blt	r2,zero,72d4 <__kernel_rem_pio2+0x4a8>
    725c:	dd000217 	ldw	r20,8(sp)
    7260:	882f883a 	mov	r23,r17
    7264:	002d883a 	mov	r22,zero
    7268:	0039883a 	mov	fp,zero
    726c:	00000306 	br	727c <__kernel_rem_pio2+0x450>
    7270:	b9000017 	ldw	r4,0(r23)
    7274:	b9400117 	ldw	r5,4(r23)
    7278:	a5000204 	addi	r20,r20,8
    727c:	a1800017 	ldw	r6,0(r20)
    7280:	a1c00117 	ldw	r7,4(r20)
    7284:	bdfffe04 	addi	r23,r23,-8
    7288:	000b98c0 	call	b98c <__muldf3>
    728c:	b009883a 	mov	r4,r22
    7290:	e00b883a 	mov	r5,fp
    7294:	100d883a 	mov	r6,r2
    7298:	180f883a 	mov	r7,r3
    729c:	000a5fc0 	call	a5fc <__adddf3>
    72a0:	102d883a 	mov	r22,r2
    72a4:	1839883a 	mov	fp,r3
    72a8:	a43ff11e 	bne	r20,r16,7270 <__kernel_rem_pio2+0x444>
    72ac:	d8800017 	ldw	r2,0(sp)
    72b0:	95800215 	stw	r22,8(r18)
    72b4:	97000315 	stw	fp,12(r18)
    72b8:	ad400044 	addi	r21,r21,1
    72bc:	9cc00104 	addi	r19,r19,4
    72c0:	8c400204 	addi	r17,r17,8
    72c4:	94800204 	addi	r18,r18,8
    72c8:	157fdc0e 	bge	r2,r21,723c <__kernel_rem_pio2+0x410>
    72cc:	1023883a 	mov	r17,r2
    72d0:	003f4306 	br	6fe0 <__kernel_rem_pio2+0x1b4>
    72d4:	002d883a 	mov	r22,zero
    72d8:	0039883a 	mov	fp,zero
    72dc:	003ff306 	br	72ac <__kernel_rem_pio2+0x480>
    72e0:	d8800317 	ldw	r2,12(sp)
    72e4:	1000651e 	bne	r2,zero,747c <__kernel_rem_pio2+0x650>
    72e8:	88bfffc4 	addi	r2,r17,-1
    72ec:	100490ba 	slli	r2,r2,2
    72f0:	d9000b04 	addi	r4,sp,44
    72f4:	10808c04 	addi	r2,r2,560
    72f8:	1105883a 	add	r2,r2,r4
    72fc:	157f7417 	ldw	r21,-560(r2)
    7300:	a82bd5fa 	srai	r21,r21,23
    7304:	057fa00e 	bge	zero,r21,7188 <__kernel_rem_pio2+0x35c>
    7308:	a5000044 	addi	r20,r20,1
    730c:	0441ac0e 	bge	zero,r17,79c0 <__kernel_rem_pio2+0xb94>
    7310:	da800b17 	ldw	r10,44(sp)
    7314:	5000561e 	bne	r10,zero,7470 <__kernel_rem_pio2+0x644>
    7318:	88800060 	cmpeqi	r2,r17,1
    731c:	1000271e 	bne	r2,zero,73bc <__kernel_rem_pio2+0x590>
    7320:	da800c17 	ldw	r10,48(sp)
    7324:	d9400c04 	addi	r5,sp,48
    7328:	00800044 	movi	r2,1
    732c:	11000044 	addi	r4,r2,1
    7330:	29400104 	addi	r5,r5,4
    7334:	5000061e 	bne	r10,zero,7350 <__kernel_rem_pio2+0x524>
    7338:	89002026 	beq	r17,r4,73bc <__kernel_rem_pio2+0x590>
    733c:	2a800017 	ldw	r10,0(r5)
    7340:	2005883a 	mov	r2,r4
    7344:	11000044 	addi	r4,r2,1
    7348:	29400104 	addi	r5,r5,4
    734c:	503ffa26 	beq	r10,zero,7338 <__kernel_rem_pio2+0x50c>
    7350:	100490ba 	slli	r2,r2,2
    7354:	01404034 	movhi	r5,256
    7358:	2a95c83a 	sub	r10,r5,r10
    735c:	10808c04 	addi	r2,r2,560
    7360:	d9400b04 	addi	r5,sp,44
    7364:	1145883a 	add	r2,r2,r5
    7368:	12bf7415 	stw	r10,-560(r2)
    736c:	2440120e 	bge	r4,r17,73b8 <__kernel_rem_pio2+0x58c>
    7370:	200890ba 	slli	r4,r4,2
    7374:	880490ba 	slli	r2,r17,2
    7378:	d9c00b04 	addi	r7,sp,44
    737c:	21408c04 	addi	r5,r4,560
    7380:	01804034 	movhi	r6,256
    7384:	29cb883a 	add	r5,r5,r7
    7388:	21000b04 	addi	r4,r4,44
    738c:	10800b04 	addi	r2,r2,44
    7390:	297f7417 	ldw	r5,-560(r5)
    7394:	26c9883a 	add	r4,r4,sp
    7398:	16c5883a 	add	r2,r2,sp
    739c:	31bfffc4 	addi	r6,r6,-1
    73a0:	00000106 	br	73a8 <__kernel_rem_pio2+0x57c>
    73a4:	21400017 	ldw	r5,0(r4)
    73a8:	314bc83a 	sub	r5,r6,r5
    73ac:	21400015 	stw	r5,0(r4)
    73b0:	21000104 	addi	r4,r4,4
    73b4:	20bffb1e 	bne	r4,r2,73a4 <__kernel_rem_pio2+0x578>
    73b8:	02800044 	movi	r10,1
    73bc:	d9000317 	ldw	r4,12(sp)
    73c0:	01000e0e 	bge	zero,r4,73fc <__kernel_rem_pio2+0x5d0>
    73c4:	20800060 	cmpeqi	r2,r4,1
    73c8:	1001371e 	bne	r2,zero,78a8 <__kernel_rem_pio2+0xa7c>
    73cc:	208000a0 	cmpeqi	r2,r4,2
    73d0:	10000a26 	beq	r2,zero,73fc <__kernel_rem_pio2+0x5d0>
    73d4:	88bfffc4 	addi	r2,r17,-1
    73d8:	100490ba 	slli	r2,r2,2
    73dc:	01401034 	movhi	r5,64
    73e0:	d9000b04 	addi	r4,sp,44
    73e4:	10808c04 	addi	r2,r2,560
    73e8:	1105883a 	add	r2,r2,r4
    73ec:	113f7417 	ldw	r4,-560(r2)
    73f0:	297fffc4 	addi	r5,r5,-1
    73f4:	2148703a 	and	r4,r4,r5
    73f8:	113f7415 	stw	r4,-560(r2)
    73fc:	a8800098 	cmpnei	r2,r21,2
    7400:	103f611e 	bne	r2,zero,7188 <__kernel_rem_pio2+0x35c>
    7404:	900d883a 	mov	r6,r18
    7408:	180f883a 	mov	r7,r3
    740c:	0009883a 	mov	r4,zero
    7410:	014ffc34 	movhi	r5,16368
    7414:	da800015 	stw	r10,0(sp)
    7418:	000c0000 	call	c000 <__subdf3>
    741c:	da800017 	ldw	r10,0(sp)
    7420:	1027883a 	mov	r19,r2
    7424:	1813883a 	mov	r9,r3
    7428:	503f5726 	beq	r10,zero,7188 <__kernel_rem_pio2+0x35c>
    742c:	d9800317 	ldw	r6,12(sp)
    7430:	0009883a 	mov	r4,zero
    7434:	014ffc34 	movhi	r5,16368
    7438:	d8c00015 	stw	r3,0(sp)
    743c:	0008fdc0 	call	8fdc <scalbn>
    7440:	da400017 	ldw	r9,0(sp)
    7444:	9809883a 	mov	r4,r19
    7448:	100d883a 	mov	r6,r2
    744c:	480b883a 	mov	r5,r9
    7450:	180f883a 	mov	r7,r3
    7454:	000c0000 	call	c000 <__subdf3>
    7458:	1027883a 	mov	r19,r2
    745c:	1813883a 	mov	r9,r3
    7460:	003f4906 	br	7188 <__kernel_rem_pio2+0x35c>
    7464:	0005883a 	mov	r2,zero
    7468:	0007883a 	mov	r3,zero
    746c:	003e9f06 	br	6eec <__kernel_rem_pio2+0xc0>
    7470:	01000044 	movi	r4,1
    7474:	0005883a 	mov	r2,zero
    7478:	003fb506 	br	7350 <__kernel_rem_pio2+0x524>
    747c:	180b883a 	mov	r5,r3
    7480:	000d883a 	mov	r6,zero
    7484:	01cff834 	movhi	r7,16352
    7488:	9009883a 	mov	r4,r18
    748c:	d8c00a15 	stw	r3,40(sp)
    7490:	d8c00015 	stw	r3,0(sp)
    7494:	000b7bc0 	call	b7bc <__gedf2>
    7498:	da400017 	ldw	r9,0(sp)
    749c:	d8c00a17 	ldw	r3,40(sp)
    74a0:	1001080e 	bge	r2,zero,78c4 <__kernel_rem_pio2+0xa98>
    74a4:	002b883a 	mov	r21,zero
    74a8:	003f3706 	br	7188 <__kernel_rem_pio2+0x35c>
    74ac:	8d400044 	addi	r21,r17,1
    74b0:	dd400015 	stw	r21,0(sp)
    74b4:	003f5506 	br	720c <__kernel_rem_pio2+0x3e0>
    74b8:	0039883a 	mov	fp,zero
    74bc:	002b883a 	mov	r21,zero
    74c0:	003eb106 	br	6f88 <__kernel_rem_pio2+0x15c>
    74c4:	d8c00317 	ldw	r3,12(sp)
    74c8:	980490ba 	slli	r2,r19,2
    74cc:	d9400b04 	addi	r5,sp,44
    74d0:	193ffa04 	addi	r4,r3,-24
    74d4:	10c08c04 	addi	r3,r2,560
    74d8:	1947883a 	add	r3,r3,r5
    74dc:	18ff7417 	ldw	r3,-560(r3)
    74e0:	dd400215 	stw	r21,8(sp)
    74e4:	d9000315 	stw	r4,12(sp)
    74e8:	1800091e 	bne	r3,zero,7510 <__kernel_rem_pio2+0x6e4>
    74ec:	10800b04 	addi	r2,r2,44
    74f0:	16c5883a 	add	r2,r2,sp
    74f4:	2007883a 	mov	r3,r4
    74f8:	113fff17 	ldw	r4,-4(r2)
    74fc:	9cffffc4 	addi	r19,r19,-1
    7500:	10bfff04 	addi	r2,r2,-4
    7504:	18fffa04 	addi	r3,r3,-24
    7508:	203ffb26 	beq	r4,zero,74f8 <__kernel_rem_pio2+0x6cc>
    750c:	d8c00315 	stw	r3,12(sp)
    7510:	d9800317 	ldw	r6,12(sp)
    7514:	0009883a 	mov	r4,zero
    7518:	014ffc34 	movhi	r5,16368
    751c:	0008fdc0 	call	8fdc <scalbn>
    7520:	1021883a 	mov	r16,r2
    7524:	1823883a 	mov	r17,r3
    7528:	98017116 	blt	r19,zero,7af0 <__kernel_rem_pio2+0xcc4>
    752c:	980490fa 	slli	r2,r19,3
    7530:	982c90ba 	slli	r22,r19,2
    7534:	d8c06f04 	addi	r3,sp,444
    7538:	18b9883a 	add	fp,r3,r2
    753c:	d8800315 	stw	r2,12(sp)
    7540:	b0800b04 	addi	r2,r22,44
    7544:	df000115 	stw	fp,4(sp)
    7548:	16ed883a 	add	r22,r2,sp
    754c:	b1000017 	ldw	r4,0(r22)
    7550:	e73ffe04 	addi	fp,fp,-8
    7554:	000c9e00 	call	c9e0 <__floatsidf>
    7558:	800d883a 	mov	r6,r16
    755c:	880f883a 	mov	r7,r17
    7560:	1009883a 	mov	r4,r2
    7564:	180b883a 	mov	r5,r3
    7568:	000b98c0 	call	b98c <__muldf3>
    756c:	8009883a 	mov	r4,r16
    7570:	880b883a 	mov	r5,r17
    7574:	000d883a 	mov	r6,zero
    7578:	01cf9c34 	movhi	r7,15984
    757c:	e0800215 	stw	r2,8(fp)
    7580:	e0c00315 	stw	r3,12(fp)
    7584:	000b98c0 	call	b98c <__muldf3>
    7588:	b009883a 	mov	r4,r22
    758c:	1021883a 	mov	r16,r2
    7590:	d8800b04 	addi	r2,sp,44
    7594:	1823883a 	mov	r17,r3
    7598:	b5bfff04 	addi	r22,r22,-4
    759c:	113feb1e 	bne	r2,r4,754c <__kernel_rem_pio2+0x720>
    75a0:	05cffe74 	movhi	r23,16377
    75a4:	dc800517 	ldw	r18,20(sp)
    75a8:	bdc87ec4 	addi	r23,r23,8699
    75ac:	dd800117 	ldw	r22,4(sp)
    75b0:	d8804704 	addi	r2,sp,284
    75b4:	dd000415 	stw	r20,16(sp)
    75b8:	dcc00015 	stw	r19,0(sp)
    75bc:	ddc00115 	stw	r23,4(sp)
    75c0:	0021883a 	mov	r16,zero
    75c4:	102b883a 	mov	r21,r2
    75c8:	90002316 	blt	r18,zero,7658 <__kernel_rem_pio2+0x82c>
    75cc:	04c000b4 	movhi	r19,2
    75d0:	d9400117 	ldw	r5,4(sp)
    75d4:	9cc5b904 	addi	r19,r19,5860
    75d8:	b02f883a 	mov	r23,r22
    75dc:	01100034 	movhi	r4,16384
    75e0:	0039883a 	mov	fp,zero
    75e4:	0023883a 	mov	r17,zero
    75e8:	0029883a 	mov	r20,zero
    75ec:	00000506 	br	7604 <__kernel_rem_pio2+0x7d8>
    75f0:	9cc00204 	addi	r19,r19,8
    75f4:	bdc00204 	addi	r23,r23,8
    75f8:	85000e16 	blt	r16,r20,7634 <__kernel_rem_pio2+0x808>
    75fc:	99000017 	ldw	r4,0(r19)
    7600:	99400117 	ldw	r5,4(r19)
    7604:	b9800017 	ldw	r6,0(r23)
    7608:	b9c00117 	ldw	r7,4(r23)
    760c:	a5000044 	addi	r20,r20,1
    7610:	000b98c0 	call	b98c <__muldf3>
    7614:	e009883a 	mov	r4,fp
    7618:	880b883a 	mov	r5,r17
    761c:	100d883a 	mov	r6,r2
    7620:	180f883a 	mov	r7,r3
    7624:	000a5fc0 	call	a5fc <__adddf3>
    7628:	1039883a 	mov	fp,r2
    762c:	1823883a 	mov	r17,r3
    7630:	953fef0e 	bge	r18,r20,75f0 <__kernel_rem_pio2+0x7c4>
    7634:	d8c00017 	ldw	r3,0(sp)
    7638:	af000015 	stw	fp,0(r21)
    763c:	ac400115 	stw	r17,4(r21)
    7640:	80800044 	addi	r2,r16,1
    7644:	ad400204 	addi	r21,r21,8
    7648:	b5bffe04 	addi	r22,r22,-8
    764c:	1c000526 	beq	r3,r16,7664 <__kernel_rem_pio2+0x838>
    7650:	1021883a 	mov	r16,r2
    7654:	903fdd0e 	bge	r18,zero,75cc <__kernel_rem_pio2+0x7a0>
    7658:	0039883a 	mov	fp,zero
    765c:	0023883a 	mov	r17,zero
    7660:	003ff406 	br	7634 <__kernel_rem_pio2+0x808>
    7664:	d880a117 	ldw	r2,644(sp)
    7668:	dd000417 	ldw	r20,16(sp)
    766c:	dcc00017 	ldw	r19,0(sp)
    7670:	108000c8 	cmpgei	r2,r2,3
    7674:	1000241e 	bne	r2,zero,7708 <__kernel_rem_pio2+0x8dc>
    7678:	d880a117 	ldw	r2,644(sp)
    767c:	0080d216 	blt	zero,r2,79c8 <__kernel_rem_pio2+0xb9c>
    7680:	1000141e 	bne	r2,zero,76d4 <__kernel_rem_pio2+0x8a8>
    7684:	d8c00317 	ldw	r3,12(sp)
    7688:	d8804704 	addi	r2,sp,284
    768c:	0009883a 	mov	r4,zero
    7690:	10eb883a 	add	r21,r2,r3
    7694:	000b883a 	mov	r5,zero
    7698:	a9800017 	ldw	r6,0(r21)
    769c:	a9c00117 	ldw	r7,4(r21)
    76a0:	000a5fc0 	call	a5fc <__adddf3>
    76a4:	a80d883a 	mov	r6,r21
    76a8:	1009883a 	mov	r4,r2
    76ac:	d8804704 	addi	r2,sp,284
    76b0:	180b883a 	mov	r5,r3
    76b4:	ad7ffe04 	addi	r21,r21,-8
    76b8:	11bff71e 	bne	r2,r6,7698 <__kernel_rem_pio2+0x86c>
    76bc:	d8800217 	ldw	r2,8(sp)
    76c0:	10000126 	beq	r2,zero,76c8 <__kernel_rem_pio2+0x89c>
    76c4:	2960003c 	xorhi	r5,r5,32768
    76c8:	d8800917 	ldw	r2,36(sp)
    76cc:	11000015 	stw	r4,0(r2)
    76d0:	11400115 	stw	r5,4(r2)
    76d4:	a08001cc 	andi	r2,r20,7
    76d8:	dfc0a017 	ldw	ra,640(sp)
    76dc:	df009f17 	ldw	fp,636(sp)
    76e0:	ddc09e17 	ldw	r23,632(sp)
    76e4:	dd809d17 	ldw	r22,628(sp)
    76e8:	dd409c17 	ldw	r21,624(sp)
    76ec:	dd009b17 	ldw	r20,620(sp)
    76f0:	dcc09a17 	ldw	r19,616(sp)
    76f4:	dc809917 	ldw	r18,612(sp)
    76f8:	dc409817 	ldw	r17,608(sp)
    76fc:	dc009717 	ldw	r16,604(sp)
    7700:	dec0a104 	addi	sp,sp,644
    7704:	f800283a 	ret
    7708:	d880a117 	ldw	r2,644(sp)
    770c:	108000e0 	cmpeqi	r2,r2,3
    7710:	103ff026 	beq	r2,zero,76d4 <__kernel_rem_pio2+0x8a8>
    7714:	98010226 	beq	r19,zero,7b20 <__kernel_rem_pio2+0xcf4>
    7718:	d8c00317 	ldw	r3,12(sp)
    771c:	d9000b04 	addi	r4,sp,44
    7720:	18808c04 	addi	r2,r3,560
    7724:	1105883a 	add	r2,r2,r4
    7728:	14bfb017 	ldw	r18,-320(r2)
    772c:	147fb117 	ldw	r17,-316(r2)
    7730:	d8804704 	addi	r2,sp,284
    7734:	10e1883a 	add	r16,r2,r3
    7738:	85bffe17 	ldw	r22,-8(r16)
    773c:	857fff17 	ldw	r21,-4(r16)
    7740:	9009883a 	mov	r4,r18
    7744:	880b883a 	mov	r5,r17
    7748:	b00d883a 	mov	r6,r22
    774c:	a80f883a 	mov	r7,r21
    7750:	000a5fc0 	call	a5fc <__adddf3>
    7754:	100d883a 	mov	r6,r2
    7758:	180f883a 	mov	r7,r3
    775c:	b009883a 	mov	r4,r22
    7760:	a80b883a 	mov	r5,r21
    7764:	9039883a 	mov	fp,r18
    7768:	882f883a 	mov	r23,r17
    776c:	1025883a 	mov	r18,r2
    7770:	1823883a 	mov	r17,r3
    7774:	000c0000 	call	c000 <__subdf3>
    7778:	e00d883a 	mov	r6,fp
    777c:	b80f883a 	mov	r7,r23
    7780:	1009883a 	mov	r4,r2
    7784:	180b883a 	mov	r5,r3
    7788:	000a5fc0 	call	a5fc <__adddf3>
    778c:	80800015 	stw	r2,0(r16)
    7790:	80c00115 	stw	r3,4(r16)
    7794:	84bffe15 	stw	r18,-8(r16)
    7798:	847fff15 	stw	r17,-4(r16)
    779c:	d8804704 	addi	r2,sp,284
    77a0:	843ffe04 	addi	r16,r16,-8
    77a4:	143fe41e 	bne	r2,r16,7738 <__kernel_rem_pio2+0x90c>
    77a8:	9cc00088 	cmpgei	r19,r19,2
    77ac:	9800dc26 	beq	r19,zero,7b20 <__kernel_rem_pio2+0xcf4>
    77b0:	d8c00317 	ldw	r3,12(sp)
    77b4:	d9000b04 	addi	r4,sp,44
    77b8:	dc404904 	addi	r17,sp,292
    77bc:	18808c04 	addi	r2,r3,560
    77c0:	1105883a 	add	r2,r2,r4
    77c4:	14ffb017 	ldw	r19,-320(r2)
    77c8:	14bfb117 	ldw	r18,-316(r2)
    77cc:	d8804704 	addi	r2,sp,284
    77d0:	10eb883a 	add	r21,r2,r3
    77d4:	a821883a 	mov	r16,r21
    77d8:	dd000015 	stw	r20,0(sp)
    77dc:	85fffe17 	ldw	r23,-8(r16)
    77e0:	85bfff17 	ldw	r22,-4(r16)
    77e4:	9809883a 	mov	r4,r19
    77e8:	900b883a 	mov	r5,r18
    77ec:	b80d883a 	mov	r6,r23
    77f0:	b00f883a 	mov	r7,r22
    77f4:	000a5fc0 	call	a5fc <__adddf3>
    77f8:	100d883a 	mov	r6,r2
    77fc:	180f883a 	mov	r7,r3
    7800:	b809883a 	mov	r4,r23
    7804:	b00b883a 	mov	r5,r22
    7808:	9829883a 	mov	r20,r19
    780c:	9039883a 	mov	fp,r18
    7810:	1027883a 	mov	r19,r2
    7814:	1825883a 	mov	r18,r3
    7818:	000c0000 	call	c000 <__subdf3>
    781c:	a00d883a 	mov	r6,r20
    7820:	e00f883a 	mov	r7,fp
    7824:	1009883a 	mov	r4,r2
    7828:	180b883a 	mov	r5,r3
    782c:	000a5fc0 	call	a5fc <__adddf3>
    7830:	80800015 	stw	r2,0(r16)
    7834:	80c00115 	stw	r3,4(r16)
    7838:	84fffe15 	stw	r19,-8(r16)
    783c:	84bfff15 	stw	r18,-4(r16)
    7840:	843ffe04 	addi	r16,r16,-8
    7844:	8c3fe51e 	bne	r17,r16,77dc <__kernel_rem_pio2+0x9b0>
    7848:	dd000017 	ldw	r20,0(sp)
    784c:	0009883a 	mov	r4,zero
    7850:	000b883a 	mov	r5,zero
    7854:	a9800017 	ldw	r6,0(r21)
    7858:	a9c00117 	ldw	r7,4(r21)
    785c:	ad7ffe04 	addi	r21,r21,-8
    7860:	000a5fc0 	call	a5fc <__adddf3>
    7864:	1009883a 	mov	r4,r2
    7868:	180b883a 	mov	r5,r3
    786c:	8d7ff91e 	bne	r17,r21,7854 <__kernel_rem_pio2+0xa28>
    7870:	da000217 	ldw	r8,8(sp)
    7874:	d9c04717 	ldw	r7,284(sp)
    7878:	d8c04817 	ldw	r3,288(sp)
    787c:	d9804917 	ldw	r6,292(sp)
    7880:	d8804a17 	ldw	r2,296(sp)
    7884:	4000891e 	bne	r8,zero,7aac <__kernel_rem_pio2+0xc80>
    7888:	da000917 	ldw	r8,36(sp)
    788c:	41c00015 	stw	r7,0(r8)
    7890:	40c00115 	stw	r3,4(r8)
    7894:	41800215 	stw	r6,8(r8)
    7898:	40800315 	stw	r2,12(r8)
    789c:	41000415 	stw	r4,16(r8)
    78a0:	41400515 	stw	r5,20(r8)
    78a4:	003f8b06 	br	76d4 <__kernel_rem_pio2+0x8a8>
    78a8:	88bfffc4 	addi	r2,r17,-1
    78ac:	100490ba 	slli	r2,r2,2
    78b0:	01402034 	movhi	r5,128
    78b4:	003eca06 	br	73e0 <__kernel_rem_pio2+0x5b4>
    78b8:	00fffa04 	movi	r3,-24
    78bc:	d8000615 	stw	zero,24(sp)
    78c0:	003d7906 	br	6ea8 <__kernel_rem_pio2+0x7c>
    78c4:	a5000044 	addi	r20,r20,1
    78c8:	05400084 	movi	r21,2
    78cc:	047e9016 	blt	zero,r17,7310 <__kernel_rem_pio2+0x4e4>
    78d0:	480f883a 	mov	r7,r9
    78d4:	900d883a 	mov	r6,r18
    78d8:	0009883a 	mov	r4,zero
    78dc:	014ffc34 	movhi	r5,16368
    78e0:	000c0000 	call	c000 <__subdf3>
    78e4:	1027883a 	mov	r19,r2
    78e8:	1813883a 	mov	r9,r3
    78ec:	003e2606 	br	7188 <__kernel_rem_pio2+0x35c>
    78f0:	ddc00317 	ldw	r23,12(sp)
    78f4:	9809883a 	mov	r4,r19
    78f8:	480b883a 	mov	r5,r9
    78fc:	05cdc83a 	sub	r6,zero,r23
    7900:	dd400215 	stw	r21,8(sp)
    7904:	0008fdc0 	call	8fdc <scalbn>
    7908:	000d883a 	mov	r6,zero
    790c:	01d05c34 	movhi	r7,16752
    7910:	1009883a 	mov	r4,r2
    7914:	180b883a 	mov	r5,r3
    7918:	1025883a 	mov	r18,r2
    791c:	1821883a 	mov	r16,r3
    7920:	000b7bc0 	call	b7bc <__gedf2>
    7924:	10005716 	blt	r2,zero,7a84 <__kernel_rem_pio2+0xc58>
    7928:	000d883a 	mov	r6,zero
    792c:	01cf9c34 	movhi	r7,15984
    7930:	9009883a 	mov	r4,r18
    7934:	800b883a 	mov	r5,r16
    7938:	000b98c0 	call	b98c <__muldf3>
    793c:	882c90ba 	slli	r22,r17,2
    7940:	180b883a 	mov	r5,r3
    7944:	1009883a 	mov	r4,r2
    7948:	000c9600 	call	c960 <__fixdfsi>
    794c:	1009883a 	mov	r4,r2
    7950:	102b883a 	mov	r21,r2
    7954:	d8c00b04 	addi	r3,sp,44
    7958:	b0808c04 	addi	r2,r22,560
    795c:	10ed883a 	add	r22,r2,r3
    7960:	000c9e00 	call	c9e0 <__floatsidf>
    7964:	000d883a 	mov	r6,zero
    7968:	01d05c34 	movhi	r7,16752
    796c:	1009883a 	mov	r4,r2
    7970:	180b883a 	mov	r5,r3
    7974:	000b98c0 	call	b98c <__muldf3>
    7978:	100d883a 	mov	r6,r2
    797c:	180f883a 	mov	r7,r3
    7980:	9009883a 	mov	r4,r18
    7984:	800b883a 	mov	r5,r16
    7988:	000c0000 	call	c000 <__subdf3>
    798c:	180b883a 	mov	r5,r3
    7990:	1009883a 	mov	r4,r2
    7994:	000c9600 	call	c960 <__fixdfsi>
    7998:	8cc00044 	addi	r19,r17,1
    799c:	980690ba 	slli	r3,r19,2
    79a0:	b0bf7415 	stw	r2,-560(r22)
    79a4:	b8800604 	addi	r2,r23,24
    79a8:	d8800315 	stw	r2,12(sp)
    79ac:	18808c04 	addi	r2,r3,560
    79b0:	d8c00b04 	addi	r3,sp,44
    79b4:	10c7883a 	add	r3,r2,r3
    79b8:	1d7f7415 	stw	r21,-560(r3)
    79bc:	003ed406 	br	7510 <__kernel_rem_pio2+0x6e4>
    79c0:	0015883a 	mov	r10,zero
    79c4:	003e7d06 	br	73bc <__kernel_rem_pio2+0x590>
    79c8:	d8c00317 	ldw	r3,12(sp)
    79cc:	d8804704 	addi	r2,sp,284
    79d0:	10eb883a 	add	r21,r2,r3
    79d4:	0005883a 	mov	r2,zero
    79d8:	0007883a 	mov	r3,zero
    79dc:	1009883a 	mov	r4,r2
    79e0:	180b883a 	mov	r5,r3
    79e4:	a9800017 	ldw	r6,0(r21)
    79e8:	a9c00117 	ldw	r7,4(r21)
    79ec:	000a5fc0 	call	a5fc <__adddf3>
    79f0:	a80d883a 	mov	r6,r21
    79f4:	1009883a 	mov	r4,r2
    79f8:	d8804704 	addi	r2,sp,284
    79fc:	180b883a 	mov	r5,r3
    7a00:	ad7ffe04 	addi	r21,r21,-8
    7a04:	11bff71e 	bne	r2,r6,79e4 <__kernel_rem_pio2+0xbb8>
    7a08:	2005883a 	mov	r2,r4
    7a0c:	d9000217 	ldw	r4,8(sp)
    7a10:	20002a1e 	bne	r4,zero,7abc <__kernel_rem_pio2+0xc90>
    7a14:	d9800917 	ldw	r6,36(sp)
    7a18:	d9004717 	ldw	r4,284(sp)
    7a1c:	d9404817 	ldw	r5,288(sp)
    7a20:	30800015 	stw	r2,0(r6)
    7a24:	30c00115 	stw	r3,4(r6)
    7a28:	180f883a 	mov	r7,r3
    7a2c:	100d883a 	mov	r6,r2
    7a30:	000c0000 	call	c000 <__subdf3>
    7a34:	1009883a 	mov	r4,r2
    7a38:	180b883a 	mov	r5,r3
    7a3c:	04c00d0e 	bge	zero,r19,7a74 <__kernel_rem_pio2+0xc48>
    7a40:	dc004904 	addi	r16,sp,292
    7a44:	04400044 	movi	r17,1
    7a48:	81800017 	ldw	r6,0(r16)
    7a4c:	81c00117 	ldw	r7,4(r16)
    7a50:	8c400044 	addi	r17,r17,1
    7a54:	84000204 	addi	r16,r16,8
    7a58:	000a5fc0 	call	a5fc <__adddf3>
    7a5c:	1009883a 	mov	r4,r2
    7a60:	180b883a 	mov	r5,r3
    7a64:	9c7ff80e 	bge	r19,r17,7a48 <__kernel_rem_pio2+0xc1c>
    7a68:	d8800217 	ldw	r2,8(sp)
    7a6c:	10000126 	beq	r2,zero,7a74 <__kernel_rem_pio2+0xc48>
    7a70:	2960003c 	xorhi	r5,r5,32768
    7a74:	d8800917 	ldw	r2,36(sp)
    7a78:	11000215 	stw	r4,8(r2)
    7a7c:	11400315 	stw	r5,12(r2)
    7a80:	003f1406 	br	76d4 <__kernel_rem_pio2+0x8a8>
    7a84:	880490ba 	slli	r2,r17,2
    7a88:	800b883a 	mov	r5,r16
    7a8c:	d8c00b04 	addi	r3,sp,44
    7a90:	10808c04 	addi	r2,r2,560
    7a94:	9009883a 	mov	r4,r18
    7a98:	10e1883a 	add	r16,r2,r3
    7a9c:	000c9600 	call	c960 <__fixdfsi>
    7aa0:	80bf7415 	stw	r2,-560(r16)
    7aa4:	8827883a 	mov	r19,r17
    7aa8:	003e9906 	br	7510 <__kernel_rem_pio2+0x6e4>
    7aac:	18e0003c 	xorhi	r3,r3,32768
    7ab0:	10a0003c 	xorhi	r2,r2,32768
    7ab4:	2960003c 	xorhi	r5,r5,32768
    7ab8:	003f7306 	br	7888 <__kernel_rem_pio2+0xa5c>
    7abc:	d9c00917 	ldw	r7,36(sp)
    7ac0:	d9004717 	ldw	r4,284(sp)
    7ac4:	d9404817 	ldw	r5,288(sp)
    7ac8:	19a0003c 	xorhi	r6,r3,32768
    7acc:	39800115 	stw	r6,4(r7)
    7ad0:	38800015 	stw	r2,0(r7)
    7ad4:	100d883a 	mov	r6,r2
    7ad8:	180f883a 	mov	r7,r3
    7adc:	000c0000 	call	c000 <__subdf3>
    7ae0:	1009883a 	mov	r4,r2
    7ae4:	180b883a 	mov	r5,r3
    7ae8:	04ffd516 	blt	zero,r19,7a40 <__kernel_rem_pio2+0xc14>
    7aec:	003fe006 	br	7a70 <__kernel_rem_pio2+0xc44>
    7af0:	d880a117 	ldw	r2,644(sp)
    7af4:	108000c8 	cmpgei	r2,r2,3
    7af8:	1000061e 	bne	r2,zero,7b14 <__kernel_rem_pio2+0xce8>
    7afc:	d880a117 	ldw	r2,644(sp)
    7b00:	00800a16 	blt	zero,r2,7b2c <__kernel_rem_pio2+0xd00>
    7b04:	103ef31e 	bne	r2,zero,76d4 <__kernel_rem_pio2+0x8a8>
    7b08:	0009883a 	mov	r4,zero
    7b0c:	000b883a 	mov	r5,zero
    7b10:	003eea06 	br	76bc <__kernel_rem_pio2+0x890>
    7b14:	d880a117 	ldw	r2,644(sp)
    7b18:	108000e0 	cmpeqi	r2,r2,3
    7b1c:	103eed26 	beq	r2,zero,76d4 <__kernel_rem_pio2+0x8a8>
    7b20:	0009883a 	mov	r4,zero
    7b24:	000b883a 	mov	r5,zero
    7b28:	003f5106 	br	7870 <__kernel_rem_pio2+0xa44>
    7b2c:	0005883a 	mov	r2,zero
    7b30:	0007883a 	mov	r3,zero
    7b34:	003fb506 	br	7a0c <__kernel_rem_pio2+0xbe0>

00007b38 <__kernel_sin>:
    7b38:	02200034 	movhi	r8,32768
    7b3c:	defff304 	addi	sp,sp,-52
    7b40:	423fffc4 	addi	r8,r8,-1
    7b44:	dd400815 	stw	r21,32(sp)
    7b48:	dd000715 	stw	r20,28(sp)
    7b4c:	dc400415 	stw	r17,16(sp)
    7b50:	dc000315 	stw	r16,12(sp)
    7b54:	dfc00c15 	stw	ra,48(sp)
    7b58:	df000b15 	stw	fp,44(sp)
    7b5c:	ddc00a15 	stw	r23,40(sp)
    7b60:	dd800915 	stw	r22,36(sp)
    7b64:	dcc00615 	stw	r19,24(sp)
    7b68:	dc800515 	stw	r18,20(sp)
    7b6c:	2a10703a 	and	r8,r5,r8
    7b70:	00cf9034 	movhi	r3,15936
    7b74:	2821883a 	mov	r16,r5
    7b78:	2023883a 	mov	r17,r4
    7b7c:	302b883a 	mov	r21,r6
    7b80:	3829883a 	mov	r20,r7
    7b84:	40c0020e 	bge	r8,r3,7b90 <__kernel_sin+0x58>
    7b88:	000c9600 	call	c960 <__fixdfsi>
    7b8c:	10009926 	beq	r2,zero,7df4 <__kernel_sin+0x2bc>
    7b90:	880d883a 	mov	r6,r17
    7b94:	800f883a 	mov	r7,r16
    7b98:	8809883a 	mov	r4,r17
    7b9c:	800b883a 	mov	r5,r16
    7ba0:	000b98c0 	call	b98c <__muldf3>
    7ba4:	100d883a 	mov	r6,r2
    7ba8:	180f883a 	mov	r7,r3
    7bac:	8809883a 	mov	r4,r17
    7bb0:	800b883a 	mov	r5,r16
    7bb4:	1027883a 	mov	r19,r2
    7bb8:	1825883a 	mov	r18,r3
    7bbc:	000b98c0 	call	b98c <__muldf3>
    7bc0:	0196b434 	movhi	r6,23248
    7bc4:	01cf79b4 	movhi	r7,15846
    7bc8:	31b55f04 	addi	r6,r6,-10884
    7bcc:	39f64e84 	addi	r7,r7,-9926
    7bd0:	9809883a 	mov	r4,r19
    7bd4:	900b883a 	mov	r5,r18
    7bd8:	102f883a 	mov	r23,r2
    7bdc:	182d883a 	mov	r22,r3
    7be0:	000b98c0 	call	b98c <__muldf3>
    7be4:	01a28b34 	movhi	r6,35372
    7be8:	01cf96f4 	movhi	r7,15963
    7bec:	31a73ac4 	addi	r6,r6,-25365
    7bf0:	39f97984 	addi	r7,r7,-6682
    7bf4:	1009883a 	mov	r4,r2
    7bf8:	180b883a 	mov	r5,r3
    7bfc:	000c0000 	call	c000 <__subdf3>
    7c00:	980d883a 	mov	r6,r19
    7c04:	900f883a 	mov	r7,r18
    7c08:	1009883a 	mov	r4,r2
    7c0c:	180b883a 	mov	r5,r3
    7c10:	000b98c0 	call	b98c <__muldf3>
    7c14:	0195ecb4 	movhi	r6,22450
    7c18:	01cfb1f4 	movhi	r7,16071
    7c1c:	31bf9f44 	addi	r6,r6,-387
    7c20:	39c778c4 	addi	r7,r7,7651
    7c24:	1009883a 	mov	r4,r2
    7c28:	180b883a 	mov	r5,r3
    7c2c:	000a5fc0 	call	a5fc <__adddf3>
    7c30:	980d883a 	mov	r6,r19
    7c34:	900f883a 	mov	r7,r18
    7c38:	1009883a 	mov	r4,r2
    7c3c:	180b883a 	mov	r5,r3
    7c40:	000b98c0 	call	b98c <__muldf3>
    7c44:	01867074 	movhi	r6,6593
    7c48:	01cfcab4 	movhi	r7,16170
    7c4c:	31987544 	addi	r6,r6,25045
    7c50:	39c06804 	addi	r7,r7,416
    7c54:	1009883a 	mov	r4,r2
    7c58:	180b883a 	mov	r5,r3
    7c5c:	000c0000 	call	c000 <__subdf3>
    7c60:	980d883a 	mov	r6,r19
    7c64:	900f883a 	mov	r7,r18
    7c68:	1009883a 	mov	r4,r2
    7c6c:	180b883a 	mov	r5,r3
    7c70:	000b98c0 	call	b98c <__muldf3>
    7c74:	01844474 	movhi	r6,4369
    7c78:	01cfe074 	movhi	r7,16257
    7c7c:	31be2984 	addi	r6,r6,-1882
    7c80:	39c44444 	addi	r7,r7,4369
    7c84:	1009883a 	mov	r4,r2
    7c88:	180b883a 	mov	r5,r3
    7c8c:	000a5fc0 	call	a5fc <__adddf3>
    7c90:	1011883a 	mov	r8,r2
    7c94:	d8800d17 	ldw	r2,52(sp)
    7c98:	1839883a 	mov	fp,r3
    7c9c:	10003e26 	beq	r2,zero,7d98 <__kernel_sin+0x260>
    7ca0:	000d883a 	mov	r6,zero
    7ca4:	01cff834 	movhi	r7,16352
    7ca8:	a809883a 	mov	r4,r21
    7cac:	a00b883a 	mov	r5,r20
    7cb0:	da000215 	stw	r8,8(sp)
    7cb4:	000b98c0 	call	b98c <__muldf3>
    7cb8:	da000217 	ldw	r8,8(sp)
    7cbc:	e00f883a 	mov	r7,fp
    7cc0:	b809883a 	mov	r4,r23
    7cc4:	400d883a 	mov	r6,r8
    7cc8:	b00b883a 	mov	r5,r22
    7ccc:	d8800115 	stw	r2,4(sp)
    7cd0:	d8c00015 	stw	r3,0(sp)
    7cd4:	000b98c0 	call	b98c <__muldf3>
    7cd8:	da800117 	ldw	r10,4(sp)
    7cdc:	da400017 	ldw	r9,0(sp)
    7ce0:	100d883a 	mov	r6,r2
    7ce4:	5009883a 	mov	r4,r10
    7ce8:	480b883a 	mov	r5,r9
    7cec:	180f883a 	mov	r7,r3
    7cf0:	000c0000 	call	c000 <__subdf3>
    7cf4:	980d883a 	mov	r6,r19
    7cf8:	900f883a 	mov	r7,r18
    7cfc:	1009883a 	mov	r4,r2
    7d00:	180b883a 	mov	r5,r3
    7d04:	000b98c0 	call	b98c <__muldf3>
    7d08:	a80d883a 	mov	r6,r21
    7d0c:	a00f883a 	mov	r7,r20
    7d10:	1009883a 	mov	r4,r2
    7d14:	180b883a 	mov	r5,r3
    7d18:	000c0000 	call	c000 <__subdf3>
    7d1c:	01955574 	movhi	r6,21845
    7d20:	01cff174 	movhi	r7,16325
    7d24:	31955244 	addi	r6,r6,21833
    7d28:	39d55544 	addi	r7,r7,21845
    7d2c:	b809883a 	mov	r4,r23
    7d30:	b00b883a 	mov	r5,r22
    7d34:	1027883a 	mov	r19,r2
    7d38:	1825883a 	mov	r18,r3
    7d3c:	000b98c0 	call	b98c <__muldf3>
    7d40:	100d883a 	mov	r6,r2
    7d44:	180f883a 	mov	r7,r3
    7d48:	9809883a 	mov	r4,r19
    7d4c:	900b883a 	mov	r5,r18
    7d50:	000a5fc0 	call	a5fc <__adddf3>
    7d54:	100d883a 	mov	r6,r2
    7d58:	180f883a 	mov	r7,r3
    7d5c:	8809883a 	mov	r4,r17
    7d60:	800b883a 	mov	r5,r16
    7d64:	000c0000 	call	c000 <__subdf3>
    7d68:	dfc00c17 	ldw	ra,48(sp)
    7d6c:	df000b17 	ldw	fp,44(sp)
    7d70:	ddc00a17 	ldw	r23,40(sp)
    7d74:	dd800917 	ldw	r22,36(sp)
    7d78:	dd400817 	ldw	r21,32(sp)
    7d7c:	dd000717 	ldw	r20,28(sp)
    7d80:	dcc00617 	ldw	r19,24(sp)
    7d84:	dc800517 	ldw	r18,20(sp)
    7d88:	dc400417 	ldw	r17,16(sp)
    7d8c:	dc000317 	ldw	r16,12(sp)
    7d90:	dec00d04 	addi	sp,sp,52
    7d94:	f800283a 	ret
    7d98:	400d883a 	mov	r6,r8
    7d9c:	9809883a 	mov	r4,r19
    7da0:	900b883a 	mov	r5,r18
    7da4:	180f883a 	mov	r7,r3
    7da8:	000b98c0 	call	b98c <__muldf3>
    7dac:	01955574 	movhi	r6,21845
    7db0:	01cff174 	movhi	r7,16325
    7db4:	31955244 	addi	r6,r6,21833
    7db8:	39d55544 	addi	r7,r7,21845
    7dbc:	1009883a 	mov	r4,r2
    7dc0:	180b883a 	mov	r5,r3
    7dc4:	000c0000 	call	c000 <__subdf3>
    7dc8:	b80d883a 	mov	r6,r23
    7dcc:	b00f883a 	mov	r7,r22
    7dd0:	1009883a 	mov	r4,r2
    7dd4:	180b883a 	mov	r5,r3
    7dd8:	000b98c0 	call	b98c <__muldf3>
    7ddc:	880d883a 	mov	r6,r17
    7de0:	800f883a 	mov	r7,r16
    7de4:	1009883a 	mov	r4,r2
    7de8:	180b883a 	mov	r5,r3
    7dec:	000a5fc0 	call	a5fc <__adddf3>
    7df0:	003fdd06 	br	7d68 <__kernel_sin+0x230>
    7df4:	8805883a 	mov	r2,r17
    7df8:	8007883a 	mov	r3,r16
    7dfc:	003fda06 	br	7d68 <__kernel_sin+0x230>

00007e00 <__kernel_cosf>:
    7e00:	defff804 	addi	sp,sp,-32
    7e04:	dc000015 	stw	r16,0(sp)
    7e08:	04200034 	movhi	r16,32768
    7e0c:	843fffc4 	addi	r16,r16,-1
    7e10:	dd000415 	stw	r20,16(sp)
    7e14:	dcc00315 	stw	r19,12(sp)
    7e18:	dfc00715 	stw	ra,28(sp)
    7e1c:	dd800615 	stw	r22,24(sp)
    7e20:	dd400515 	stw	r21,20(sp)
    7e24:	dc800215 	stw	r18,8(sp)
    7e28:	dc400115 	stw	r17,4(sp)
    7e2c:	8120703a 	and	r16,r16,r4
    7e30:	008c8034 	movhi	r2,12800
    7e34:	2027883a 	mov	r19,r4
    7e38:	2829883a 	mov	r20,r5
    7e3c:	8080430e 	bge	r16,r2,7f4c <__kernel_cosf+0x14c>
    7e40:	000a36c0 	call	a36c <__fixsfsi>
    7e44:	10009d26 	beq	r2,zero,80bc <__kernel_cosf+0x2bc>
    7e48:	980b883a 	mov	r5,r19
    7e4c:	9809883a 	mov	r4,r19
    7e50:	0009b240 	call	9b24 <__mulsf3>
    7e54:	016b5234 	movhi	r5,44360
    7e58:	2975d384 	addi	r5,r5,-10418
    7e5c:	1009883a 	mov	r4,r2
    7e60:	1023883a 	mov	r17,r2
    7e64:	0009b240 	call	9b24 <__mulsf3>
    7e68:	014c43f4 	movhi	r5,12559
    7e6c:	295d3d84 	addi	r5,r5,29942
    7e70:	1009883a 	mov	r4,r2
    7e74:	00095900 	call	9590 <__addsf3>
    7e78:	880b883a 	mov	r5,r17
    7e7c:	1009883a 	mov	r4,r2
    7e80:	0009b240 	call	9b24 <__mulsf3>
    7e84:	014d2534 	movhi	r5,13460
    7e88:	297c9f04 	addi	r5,r5,-3460
    7e8c:	1009883a 	mov	r4,r2
    7e90:	0009ed80 	call	9ed8 <__subsf3>
    7e94:	880b883a 	mov	r5,r17
    7e98:	1009883a 	mov	r4,r2
    7e9c:	0009b240 	call	9b24 <__mulsf3>
    7ea0:	014df434 	movhi	r5,14288
    7ea4:	29434044 	addi	r5,r5,3329
    7ea8:	1009883a 	mov	r4,r2
    7eac:	00095900 	call	9590 <__addsf3>
    7eb0:	880b883a 	mov	r5,r17
    7eb4:	1009883a 	mov	r4,r2
    7eb8:	0009b240 	call	9b24 <__mulsf3>
    7ebc:	014eadb4 	movhi	r5,15030
    7ec0:	2942d844 	addi	r5,r5,2913
    7ec4:	1009883a 	mov	r4,r2
    7ec8:	0009ed80 	call	9ed8 <__subsf3>
    7ecc:	880b883a 	mov	r5,r17
    7ed0:	1009883a 	mov	r4,r2
    7ed4:	0009b240 	call	9b24 <__mulsf3>
    7ed8:	014f4af4 	movhi	r5,15659
    7edc:	296aaac4 	addi	r5,r5,-21845
    7ee0:	1009883a 	mov	r4,r2
    7ee4:	00095900 	call	9590 <__addsf3>
    7ee8:	880b883a 	mov	r5,r17
    7eec:	1009883a 	mov	r4,r2
    7ef0:	0009b240 	call	9b24 <__mulsf3>
    7ef4:	102b883a 	mov	r21,r2
    7ef8:	8809883a 	mov	r4,r17
    7efc:	014fc034 	movhi	r5,16128
    7f00:	0009b240 	call	9b24 <__mulsf3>
    7f04:	a80b883a 	mov	r5,r21
    7f08:	8809883a 	mov	r4,r17
    7f0c:	1021883a 	mov	r16,r2
    7f10:	0009b240 	call	9b24 <__mulsf3>
    7f14:	a00b883a 	mov	r5,r20
    7f18:	9809883a 	mov	r4,r19
    7f1c:	1023883a 	mov	r17,r2
    7f20:	0009b240 	call	9b24 <__mulsf3>
    7f24:	8809883a 	mov	r4,r17
    7f28:	100b883a 	mov	r5,r2
    7f2c:	0009ed80 	call	9ed8 <__subsf3>
    7f30:	8009883a 	mov	r4,r16
    7f34:	100b883a 	mov	r5,r2
    7f38:	0009ed80 	call	9ed8 <__subsf3>
    7f3c:	100b883a 	mov	r5,r2
    7f40:	010fe034 	movhi	r4,16256
    7f44:	0009ed80 	call	9ed8 <__subsf3>
    7f48:	00004f06 	br	8088 <__kernel_cosf+0x288>
    7f4c:	200b883a 	mov	r5,r4
    7f50:	0009b240 	call	9b24 <__mulsf3>
    7f54:	016b5234 	movhi	r5,44360
    7f58:	2975d384 	addi	r5,r5,-10418
    7f5c:	1009883a 	mov	r4,r2
    7f60:	1025883a 	mov	r18,r2
    7f64:	0009b240 	call	9b24 <__mulsf3>
    7f68:	014c43f4 	movhi	r5,12559
    7f6c:	295d3d84 	addi	r5,r5,29942
    7f70:	1009883a 	mov	r4,r2
    7f74:	00095900 	call	9590 <__addsf3>
    7f78:	900b883a 	mov	r5,r18
    7f7c:	1009883a 	mov	r4,r2
    7f80:	0009b240 	call	9b24 <__mulsf3>
    7f84:	014d2534 	movhi	r5,13460
    7f88:	297c9f04 	addi	r5,r5,-3460
    7f8c:	1009883a 	mov	r4,r2
    7f90:	0009ed80 	call	9ed8 <__subsf3>
    7f94:	900b883a 	mov	r5,r18
    7f98:	1009883a 	mov	r4,r2
    7f9c:	0009b240 	call	9b24 <__mulsf3>
    7fa0:	014df434 	movhi	r5,14288
    7fa4:	29434044 	addi	r5,r5,3329
    7fa8:	1009883a 	mov	r4,r2
    7fac:	00095900 	call	9590 <__addsf3>
    7fb0:	900b883a 	mov	r5,r18
    7fb4:	1009883a 	mov	r4,r2
    7fb8:	0009b240 	call	9b24 <__mulsf3>
    7fbc:	014eadb4 	movhi	r5,15030
    7fc0:	2942d844 	addi	r5,r5,2913
    7fc4:	1009883a 	mov	r4,r2
    7fc8:	0009ed80 	call	9ed8 <__subsf3>
    7fcc:	900b883a 	mov	r5,r18
    7fd0:	1009883a 	mov	r4,r2
    7fd4:	0009b240 	call	9b24 <__mulsf3>
    7fd8:	014f4af4 	movhi	r5,15659
    7fdc:	296aaac4 	addi	r5,r5,-21845
    7fe0:	1009883a 	mov	r4,r2
    7fe4:	00095900 	call	9590 <__addsf3>
    7fe8:	900b883a 	mov	r5,r18
    7fec:	1009883a 	mov	r4,r2
    7ff0:	0009b240 	call	9b24 <__mulsf3>
    7ff4:	00cfa6b4 	movhi	r3,16026
    7ff8:	18e66644 	addi	r3,r3,-26215
    7ffc:	102d883a 	mov	r22,r2
    8000:	9023883a 	mov	r17,r18
    8004:	102b883a 	mov	r21,r2
    8008:	1c3fbb0e 	bge	r3,r16,7ef8 <__kernel_cosf+0xf8>
    800c:	008fd234 	movhi	r2,16200
    8010:	14002716 	blt	r2,r16,80b0 <__kernel_cosf+0x2b0>
    8014:	017fc034 	movhi	r5,65280
    8018:	814b883a 	add	r5,r16,r5
    801c:	010fe034 	movhi	r4,16256
    8020:	2821883a 	mov	r16,r5
    8024:	0009ed80 	call	9ed8 <__subsf3>
    8028:	1023883a 	mov	r17,r2
    802c:	9009883a 	mov	r4,r18
    8030:	014fc034 	movhi	r5,16128
    8034:	0009b240 	call	9b24 <__mulsf3>
    8038:	800b883a 	mov	r5,r16
    803c:	1009883a 	mov	r4,r2
    8040:	0009ed80 	call	9ed8 <__subsf3>
    8044:	9009883a 	mov	r4,r18
    8048:	b00b883a 	mov	r5,r22
    804c:	1021883a 	mov	r16,r2
    8050:	0009b240 	call	9b24 <__mulsf3>
    8054:	a00b883a 	mov	r5,r20
    8058:	9809883a 	mov	r4,r19
    805c:	1025883a 	mov	r18,r2
    8060:	0009b240 	call	9b24 <__mulsf3>
    8064:	100b883a 	mov	r5,r2
    8068:	9009883a 	mov	r4,r18
    806c:	0009ed80 	call	9ed8 <__subsf3>
    8070:	100b883a 	mov	r5,r2
    8074:	8009883a 	mov	r4,r16
    8078:	0009ed80 	call	9ed8 <__subsf3>
    807c:	100b883a 	mov	r5,r2
    8080:	8809883a 	mov	r4,r17
    8084:	0009ed80 	call	9ed8 <__subsf3>
    8088:	dfc00717 	ldw	ra,28(sp)
    808c:	dd800617 	ldw	r22,24(sp)
    8090:	dd400517 	ldw	r21,20(sp)
    8094:	dd000417 	ldw	r20,16(sp)
    8098:	dcc00317 	ldw	r19,12(sp)
    809c:	dc800217 	ldw	r18,8(sp)
    80a0:	dc400117 	ldw	r17,4(sp)
    80a4:	dc000017 	ldw	r16,0(sp)
    80a8:	dec00804 	addi	sp,sp,32
    80ac:	f800283a 	ret
    80b0:	044fce34 	movhi	r17,16184
    80b4:	040fa434 	movhi	r16,16016
    80b8:	003fdc06 	br	802c <__kernel_cosf+0x22c>
    80bc:	008fe034 	movhi	r2,16256
    80c0:	003ff106 	br	8088 <__kernel_cosf+0x288>

000080c4 <__kernel_rem_pio2f>:
    80c4:	deff9a04 	addi	sp,sp,-408
    80c8:	d8806617 	ldw	r2,408(sp)
    80cc:	dfc06515 	stw	ra,404(sp)
    80d0:	df006415 	stw	fp,400(sp)
    80d4:	100690ba 	slli	r3,r2,2
    80d8:	008000b4 	movhi	r2,2
    80dc:	ddc06315 	stw	r23,396(sp)
    80e0:	1885883a 	add	r2,r3,r2
    80e4:	1085d817 	ldw	r2,5984(r2)
    80e8:	dd806215 	stw	r22,392(sp)
    80ec:	dd406115 	stw	r21,388(sp)
    80f0:	d8800515 	stw	r2,20(sp)
    80f4:	38bfffc4 	addi	r2,r7,-1
    80f8:	dd006015 	stw	r20,384(sp)
    80fc:	dcc05f15 	stw	r19,380(sp)
    8100:	dc805e15 	stw	r18,376(sp)
    8104:	dc405d15 	stw	r17,372(sp)
    8108:	dc005c15 	stw	r16,368(sp)
    810c:	d9800b15 	stw	r6,44(sp)
    8110:	d9c00715 	stw	r7,28(sp)
    8114:	30ffff10 	cmplti	r3,r6,-4
    8118:	d9000215 	stw	r4,8(sp)
    811c:	d9400915 	stw	r5,36(sp)
    8120:	d8800115 	stw	r2,4(sp)
    8124:	1802451e 	bne	r3,zero,8a3c <__kernel_rem_pio2f+0x978>
    8128:	30bfff44 	addi	r2,r6,-3
    812c:	10024716 	blt	r2,zero,8a4c <__kernel_rem_pio2f+0x988>
    8130:	1005d0fa 	srai	r2,r2,3
    8134:	d8800615 	stw	r2,24(sp)
    8138:	10800044 	addi	r2,r2,1
    813c:	100490fa 	slli	r2,r2,3
    8140:	d8800a15 	stw	r2,40(sp)
    8144:	d9000b17 	ldw	r4,44(sp)
    8148:	d9400a17 	ldw	r5,40(sp)
    814c:	d8c00117 	ldw	r3,4(sp)
    8150:	d8800517 	ldw	r2,20(sp)
    8154:	2149c83a 	sub	r4,r4,r5
    8158:	d9000315 	stw	r4,12(sp)
    815c:	d9000617 	ldw	r4,24(sp)
    8160:	10c5883a 	add	r2,r2,r3
    8164:	20e1c83a 	sub	r16,r4,r3
    8168:	10000e16 	blt	r2,zero,81a4 <__kernel_rem_pio2f+0xe0>
    816c:	802490ba 	slli	r18,r16,2
    8170:	d8c06717 	ldw	r3,412(sp)
    8174:	10800044 	addi	r2,r2,1
    8178:	dc402004 	addi	r17,sp,128
    817c:	1ca5883a 	add	r18,r3,r18
    8180:	1427883a 	add	r19,r2,r16
    8184:	80015116 	blt	r16,zero,86cc <__kernel_rem_pio2f+0x608>
    8188:	91000017 	ldw	r4,0(r18)
    818c:	000a3dc0 	call	a3dc <__floatsisf>
    8190:	88800015 	stw	r2,0(r17)
    8194:	84000044 	addi	r16,r16,1
    8198:	8c400104 	addi	r17,r17,4
    819c:	94800104 	addi	r18,r18,4
    81a0:	84fff81e 	bne	r16,r19,8184 <__kernel_rem_pio2f+0xc0>
    81a4:	d8800517 	ldw	r2,20(sp)
    81a8:	10001f16 	blt	r2,zero,8228 <__kernel_rem_pio2f+0x164>
    81ac:	dd800117 	ldw	r22,4(sp)
    81b0:	d8c02004 	addi	r3,sp,128
    81b4:	dcc04804 	addi	r19,sp,288
    81b8:	b02290ba 	slli	r17,r22,2
    81bc:	b025883a 	mov	r18,r22
    81c0:	8c000104 	addi	r16,r17,4
    81c4:	1c63883a 	add	r17,r3,r17
    81c8:	d8c00717 	ldw	r3,28(sp)
    81cc:	10e9883a 	add	r20,r2,r3
    81d0:	d8800217 	ldw	r2,8(sp)
    81d4:	80a1883a 	add	r16,r16,r2
    81d8:	002b883a 	mov	r21,zero
    81dc:	b0000d16 	blt	r22,zero,8214 <__kernel_rem_pio2f+0x150>
    81e0:	df000217 	ldw	fp,8(sp)
    81e4:	882f883a 	mov	r23,r17
    81e8:	002b883a 	mov	r21,zero
    81ec:	b9400017 	ldw	r5,0(r23)
    81f0:	e1000017 	ldw	r4,0(fp)
    81f4:	e7000104 	addi	fp,fp,4
    81f8:	bdffff04 	addi	r23,r23,-4
    81fc:	0009b240 	call	9b24 <__mulsf3>
    8200:	a809883a 	mov	r4,r21
    8204:	100b883a 	mov	r5,r2
    8208:	00095900 	call	9590 <__addsf3>
    820c:	102b883a 	mov	r21,r2
    8210:	e43ff61e 	bne	fp,r16,81ec <__kernel_rem_pio2f+0x128>
    8214:	9d400015 	stw	r21,0(r19)
    8218:	94800044 	addi	r18,r18,1
    821c:	9cc00104 	addi	r19,r19,4
    8220:	8c400104 	addi	r17,r17,4
    8224:	953fec1e 	bne	r18,r20,81d8 <__kernel_rem_pio2f+0x114>
    8228:	dc400517 	ldw	r17,20(sp)
    822c:	d8c00717 	ldw	r3,28(sp)
    8230:	d9000217 	ldw	r4,8(sp)
    8234:	88bfffc4 	addi	r2,r17,-1
    8238:	180690ba 	slli	r3,r3,2
    823c:	883890ba 	slli	fp,r17,2
    8240:	100490ba 	slli	r2,r2,2
    8244:	243fff04 	addi	r16,r4,-4
    8248:	80e1883a 	add	r16,r16,r3
    824c:	e1000c04 	addi	r4,fp,48
    8250:	10805004 	addi	r2,r2,320
    8254:	d8c00c04 	addi	r3,sp,48
    8258:	26c9883a 	add	r4,r4,sp
    825c:	10c5883a 	add	r2,r2,r3
    8260:	d9000415 	stw	r4,16(sp)
    8264:	dd804804 	addi	r22,sp,288
    8268:	d8800815 	stw	r2,32(sp)
    826c:	882a90ba 	slli	r21,r17,2
    8270:	d8c00c04 	addi	r3,sp,48
    8274:	a8805004 	addi	r2,r21,320
    8278:	10c5883a 	add	r2,r2,r3
    827c:	14ffec17 	ldw	r19,-80(r2)
    8280:	04401a0e 	bge	zero,r17,82ec <__kernel_rem_pio2f+0x228>
    8284:	b569883a 	add	r20,r22,r21
    8288:	1825883a 	mov	r18,r3
    828c:	014ee034 	movhi	r5,15232
    8290:	9809883a 	mov	r4,r19
    8294:	0009b240 	call	9b24 <__mulsf3>
    8298:	1009883a 	mov	r4,r2
    829c:	000a36c0 	call	a36c <__fixsfsi>
    82a0:	1009883a 	mov	r4,r2
    82a4:	000a3dc0 	call	a3dc <__floatsisf>
    82a8:	0150e034 	movhi	r5,17280
    82ac:	1009883a 	mov	r4,r2
    82b0:	102f883a 	mov	r23,r2
    82b4:	0009b240 	call	9b24 <__mulsf3>
    82b8:	100b883a 	mov	r5,r2
    82bc:	9809883a 	mov	r4,r19
    82c0:	0009ed80 	call	9ed8 <__subsf3>
    82c4:	1009883a 	mov	r4,r2
    82c8:	000a36c0 	call	a36c <__fixsfsi>
    82cc:	a17fff17 	ldw	r5,-4(r20)
    82d0:	90800015 	stw	r2,0(r18)
    82d4:	b809883a 	mov	r4,r23
    82d8:	00095900 	call	9590 <__addsf3>
    82dc:	a53fff04 	addi	r20,r20,-4
    82e0:	1027883a 	mov	r19,r2
    82e4:	94800104 	addi	r18,r18,4
    82e8:	b53fe81e 	bne	r22,r20,828c <__kernel_rem_pio2f+0x1c8>
    82ec:	dd000317 	ldw	r20,12(sp)
    82f0:	9809883a 	mov	r4,r19
    82f4:	a00b883a 	mov	r5,r20
    82f8:	00092900 	call	9290 <scalbnf>
    82fc:	014f8034 	movhi	r5,15872
    8300:	1009883a 	mov	r4,r2
    8304:	1025883a 	mov	r18,r2
    8308:	0009b240 	call	9b24 <__mulsf3>
    830c:	1009883a 	mov	r4,r2
    8310:	000919c0 	call	919c <floorf>
    8314:	01504034 	movhi	r5,16640
    8318:	1009883a 	mov	r4,r2
    831c:	0009b240 	call	9b24 <__mulsf3>
    8320:	100b883a 	mov	r5,r2
    8324:	9009883a 	mov	r4,r18
    8328:	0009ed80 	call	9ed8 <__subsf3>
    832c:	1009883a 	mov	r4,r2
    8330:	1025883a 	mov	r18,r2
    8334:	000a36c0 	call	a36c <__fixsfsi>
    8338:	1009883a 	mov	r4,r2
    833c:	1027883a 	mov	r19,r2
    8340:	000a3dc0 	call	a3dc <__floatsisf>
    8344:	100b883a 	mov	r5,r2
    8348:	9009883a 	mov	r4,r18
    834c:	0009ed80 	call	9ed8 <__subsf3>
    8350:	100d883a 	mov	r6,r2
    8354:	1025883a 	mov	r18,r2
    8358:	a00b883a 	mov	r5,r20
    835c:	0500570e 	bge	zero,r20,84bc <__kernel_rem_pio2f+0x3f8>
    8360:	88bfffc4 	addi	r2,r17,-1
    8364:	100490ba 	slli	r2,r2,2
    8368:	d9000c04 	addi	r4,sp,48
    836c:	00c00204 	movi	r3,8
    8370:	10805004 	addi	r2,r2,320
    8374:	1105883a 	add	r2,r2,r4
    8378:	113fb017 	ldw	r4,-320(r2)
    837c:	1d07c83a 	sub	r3,r3,r20
    8380:	050001c4 	movi	r20,7
    8384:	a169c83a 	sub	r20,r20,r5
    8388:	20cbd83a 	sra	r5,r4,r3
    838c:	28c6983a 	sll	r3,r5,r3
    8390:	9967883a 	add	r19,r19,r5
    8394:	20c7c83a 	sub	r3,r4,r3
    8398:	1d29d83a 	sra	r20,r3,r20
    839c:	10ffb015 	stw	r3,-320(r2)
    83a0:	05005016 	blt	zero,r20,84e4 <__kernel_rem_pio2f+0x420>
    83a4:	000b883a 	mov	r5,zero
    83a8:	9009883a 	mov	r4,r18
    83ac:	00099fc0 	call	99fc <__eqsf2>
    83b0:	10009b1e 	bne	r2,zero,8620 <__kernel_rem_pio2f+0x55c>
    83b4:	d8800517 	ldw	r2,20(sp)
    83b8:	8cbfffc4 	addi	r18,r17,-1
    83bc:	90800916 	blt	r18,r2,83e4 <__kernel_rem_pio2f+0x320>
    83c0:	d9400417 	ldw	r5,16(sp)
    83c4:	a8800c04 	addi	r2,r21,48
    83c8:	16c5883a 	add	r2,r2,sp
    83cc:	0007883a 	mov	r3,zero
    83d0:	113fff17 	ldw	r4,-4(r2)
    83d4:	10bfff04 	addi	r2,r2,-4
    83d8:	1906b03a 	or	r3,r3,r4
    83dc:	117ffc1e 	bne	r2,r5,83d0 <__kernel_rem_pio2f+0x30c>
    83e0:	1800ca1e 	bne	r3,zero,870c <__kernel_rem_pio2f+0x648>
    83e4:	d8800817 	ldw	r2,32(sp)
    83e8:	10bfb017 	ldw	r2,-320(r2)
    83ec:	1000c41e 	bne	r2,zero,8700 <__kernel_rem_pio2f+0x63c>
    83f0:	d8800417 	ldw	r2,16(sp)
    83f4:	04c00044 	movi	r19,1
    83f8:	10fffe17 	ldw	r3,-8(r2)
    83fc:	9cc00044 	addi	r19,r19,1
    8400:	10bfff04 	addi	r2,r2,-4
    8404:	183ffc26 	beq	r3,zero,83f8 <__kernel_rem_pio2f+0x334>
    8408:	8cc5883a 	add	r2,r17,r19
    840c:	8d000044 	addi	r20,r17,1
    8410:	d8800015 	stw	r2,0(sp)
    8414:	d8800617 	ldw	r2,24(sp)
    8418:	b56b883a 	add	r21,r22,r21
    841c:	88a5883a 	add	r18,r17,r2
    8420:	d8800717 	ldw	r2,28(sp)
    8424:	902490ba 	slli	r18,r18,2
    8428:	1463883a 	add	r17,r2,r17
    842c:	d8806717 	ldw	r2,412(sp)
    8430:	882290ba 	slli	r17,r17,2
    8434:	14a5883a 	add	r18,r2,r18
    8438:	d8802004 	addi	r2,sp,128
    843c:	1463883a 	add	r17,r2,r17
    8440:	91000117 	ldw	r4,4(r18)
    8444:	000a3dc0 	call	a3dc <__floatsisf>
    8448:	1009883a 	mov	r4,r2
    844c:	88800015 	stw	r2,0(r17)
    8450:	d8800117 	ldw	r2,4(sp)
    8454:	10001716 	blt	r2,zero,84b4 <__kernel_rem_pio2f+0x3f0>
    8458:	dcc00217 	ldw	r19,8(sp)
    845c:	882f883a 	mov	r23,r17
    8460:	0039883a 	mov	fp,zero
    8464:	00000206 	br	8470 <__kernel_rem_pio2f+0x3ac>
    8468:	b9000017 	ldw	r4,0(r23)
    846c:	9cc00104 	addi	r19,r19,4
    8470:	99400017 	ldw	r5,0(r19)
    8474:	bdffff04 	addi	r23,r23,-4
    8478:	0009b240 	call	9b24 <__mulsf3>
    847c:	e009883a 	mov	r4,fp
    8480:	100b883a 	mov	r5,r2
    8484:	00095900 	call	9590 <__addsf3>
    8488:	1039883a 	mov	fp,r2
    848c:	9c3ff61e 	bne	r19,r16,8468 <__kernel_rem_pio2f+0x3a4>
    8490:	d8800017 	ldw	r2,0(sp)
    8494:	af000115 	stw	fp,4(r21)
    8498:	a5000044 	addi	r20,r20,1
    849c:	94800104 	addi	r18,r18,4
    84a0:	8c400104 	addi	r17,r17,4
    84a4:	ad400104 	addi	r21,r21,4
    84a8:	153fe50e 	bge	r2,r20,8440 <__kernel_rem_pio2f+0x37c>
    84ac:	1023883a 	mov	r17,r2
    84b0:	003f6e06 	br	826c <__kernel_rem_pio2f+0x1a8>
    84b4:	0039883a 	mov	fp,zero
    84b8:	003ff506 	br	8490 <__kernel_rem_pio2f+0x3cc>
    84bc:	d8800317 	ldw	r2,12(sp)
    84c0:	1000871e 	bne	r2,zero,86e0 <__kernel_rem_pio2f+0x61c>
    84c4:	88bfffc4 	addi	r2,r17,-1
    84c8:	100490ba 	slli	r2,r2,2
    84cc:	d8c00c04 	addi	r3,sp,48
    84d0:	10805004 	addi	r2,r2,320
    84d4:	10c5883a 	add	r2,r2,r3
    84d8:	153fb017 	ldw	r20,-320(r2)
    84dc:	a029d1fa 	srai	r20,r20,7
    84e0:	053fb00e 	bge	zero,r20,83a4 <__kernel_rem_pio2f+0x2e0>
    84e4:	9cc00044 	addi	r19,r19,1
    84e8:	04415a0e 	bge	zero,r17,8a54 <__kernel_rem_pio2f+0x990>
    84ec:	d9c00c17 	ldw	r7,48(sp)
    84f0:	3800781e 	bne	r7,zero,86d4 <__kernel_rem_pio2f+0x610>
    84f4:	88800060 	cmpeqi	r2,r17,1
    84f8:	1000251e 	bne	r2,zero,8590 <__kernel_rem_pio2f+0x4cc>
    84fc:	d9c00d17 	ldw	r7,52(sp)
    8500:	d9000d04 	addi	r4,sp,52
    8504:	00c00044 	movi	r3,1
    8508:	18800044 	addi	r2,r3,1
    850c:	21000104 	addi	r4,r4,4
    8510:	3800061e 	bne	r7,zero,852c <__kernel_rem_pio2f+0x468>
    8514:	88801e26 	beq	r17,r2,8590 <__kernel_rem_pio2f+0x4cc>
    8518:	21c00017 	ldw	r7,0(r4)
    851c:	1007883a 	mov	r3,r2
    8520:	18800044 	addi	r2,r3,1
    8524:	21000104 	addi	r4,r4,4
    8528:	383ffa26 	beq	r7,zero,8514 <__kernel_rem_pio2f+0x450>
    852c:	180690ba 	slli	r3,r3,2
    8530:	01004004 	movi	r4,256
    8534:	21cfc83a 	sub	r7,r4,r7
    8538:	18c05004 	addi	r3,r3,320
    853c:	d9000c04 	addi	r4,sp,48
    8540:	1907883a 	add	r3,r3,r4
    8544:	19ffb015 	stw	r7,-320(r3)
    8548:	1440100e 	bge	r2,r17,858c <__kernel_rem_pio2f+0x4c8>
    854c:	100490ba 	slli	r2,r2,2
    8550:	a8c00c04 	addi	r3,r21,48
    8554:	1ecb883a 	add	r5,r3,sp
    8558:	d9c00c04 	addi	r7,sp,48
    855c:	10c05004 	addi	r3,r2,320
    8560:	19c7883a 	add	r3,r3,r7
    8564:	10800c04 	addi	r2,r2,48
    8568:	18ffb017 	ldw	r3,-320(r3)
    856c:	01003fc4 	movi	r4,255
    8570:	16c5883a 	add	r2,r2,sp
    8574:	00000106 	br	857c <__kernel_rem_pio2f+0x4b8>
    8578:	10c00017 	ldw	r3,0(r2)
    857c:	20c7c83a 	sub	r3,r4,r3
    8580:	10c00015 	stw	r3,0(r2)
    8584:	10800104 	addi	r2,r2,4
    8588:	117ffb1e 	bne	r2,r5,8578 <__kernel_rem_pio2f+0x4b4>
    858c:	01c00044 	movi	r7,1
    8590:	d8c00317 	ldw	r3,12(sp)
    8594:	00c00c0e 	bge	zero,r3,85c8 <__kernel_rem_pio2f+0x504>
    8598:	18800060 	cmpeqi	r2,r3,1
    859c:	1001161e 	bne	r2,zero,89f8 <__kernel_rem_pio2f+0x934>
    85a0:	188000a0 	cmpeqi	r2,r3,2
    85a4:	10000826 	beq	r2,zero,85c8 <__kernel_rem_pio2f+0x504>
    85a8:	88bfffc4 	addi	r2,r17,-1
    85ac:	100490ba 	slli	r2,r2,2
    85b0:	d8c00c04 	addi	r3,sp,48
    85b4:	10805004 	addi	r2,r2,320
    85b8:	10c5883a 	add	r2,r2,r3
    85bc:	10ffb017 	ldw	r3,-320(r2)
    85c0:	18c00fcc 	andi	r3,r3,63
    85c4:	10ffb015 	stw	r3,-320(r2)
    85c8:	a0800098 	cmpnei	r2,r20,2
    85cc:	103f751e 	bne	r2,zero,83a4 <__kernel_rem_pio2f+0x2e0>
    85d0:	300b883a 	mov	r5,r6
    85d4:	010fe034 	movhi	r4,16256
    85d8:	d9c00015 	stw	r7,0(sp)
    85dc:	0009ed80 	call	9ed8 <__subsf3>
    85e0:	d9c00017 	ldw	r7,0(sp)
    85e4:	1025883a 	mov	r18,r2
    85e8:	383f6e26 	beq	r7,zero,83a4 <__kernel_rem_pio2f+0x2e0>
    85ec:	d9400317 	ldw	r5,12(sp)
    85f0:	010fe034 	movhi	r4,16256
    85f4:	d8800015 	stw	r2,0(sp)
    85f8:	00092900 	call	9290 <scalbnf>
    85fc:	d8c00017 	ldw	r3,0(sp)
    8600:	100b883a 	mov	r5,r2
    8604:	1809883a 	mov	r4,r3
    8608:	0009ed80 	call	9ed8 <__subsf3>
    860c:	1025883a 	mov	r18,r2
    8610:	000b883a 	mov	r5,zero
    8614:	9009883a 	mov	r4,r18
    8618:	00099fc0 	call	99fc <__eqsf2>
    861c:	103f6526 	beq	r2,zero,83b4 <__kernel_rem_pio2f+0x2f0>
    8620:	d8800a17 	ldw	r2,40(sp)
    8624:	d8c00b17 	ldw	r3,44(sp)
    8628:	9009883a 	mov	r4,r18
    862c:	dd000015 	stw	r20,0(sp)
    8630:	10cbc83a 	sub	r5,r2,r3
    8634:	00092900 	call	9290 <scalbnf>
    8638:	0150e034 	movhi	r5,17280
    863c:	1009883a 	mov	r4,r2
    8640:	1021883a 	mov	r16,r2
    8644:	0009a6c0 	call	9a6c <__gesf2>
    8648:	10012816 	blt	r2,zero,8aec <__kernel_rem_pio2f+0xa28>
    864c:	014ee034 	movhi	r5,15232
    8650:	8009883a 	mov	r4,r16
    8654:	0009b240 	call	9b24 <__mulsf3>
    8658:	1009883a 	mov	r4,r2
    865c:	000a36c0 	call	a36c <__fixsfsi>
    8660:	1009883a 	mov	r4,r2
    8664:	000a3dc0 	call	a3dc <__floatsisf>
    8668:	0150e034 	movhi	r5,17280
    866c:	1009883a 	mov	r4,r2
    8670:	102d883a 	mov	r22,r2
    8674:	0009b240 	call	9b24 <__mulsf3>
    8678:	100b883a 	mov	r5,r2
    867c:	8009883a 	mov	r4,r16
    8680:	0009ed80 	call	9ed8 <__subsf3>
    8684:	1009883a 	mov	r4,r2
    8688:	8c800044 	addi	r18,r17,1
    868c:	000a36c0 	call	a36c <__fixsfsi>
    8690:	902090ba 	slli	r16,r18,2
    8694:	a8c05004 	addi	r3,r21,320
    8698:	d9000c04 	addi	r4,sp,48
    869c:	192b883a 	add	r21,r3,r4
    86a0:	d9400c04 	addi	r5,sp,48
    86a4:	80c05004 	addi	r3,r16,320
    86a8:	b009883a 	mov	r4,r22
    86ac:	a8bfb015 	stw	r2,-320(r21)
    86b0:	1961883a 	add	r16,r3,r5
    86b4:	000a36c0 	call	a36c <__fixsfsi>
    86b8:	d8c00317 	ldw	r3,12(sp)
    86bc:	80bfb015 	stw	r2,-320(r16)
    86c0:	18c00204 	addi	r3,r3,8
    86c4:	d8c00315 	stw	r3,12(sp)
    86c8:	00002306 	br	8758 <__kernel_rem_pio2f+0x694>
    86cc:	0005883a 	mov	r2,zero
    86d0:	003eaf06 	br	8190 <__kernel_rem_pio2f+0xcc>
    86d4:	00800044 	movi	r2,1
    86d8:	0007883a 	mov	r3,zero
    86dc:	003f9306 	br	852c <__kernel_rem_pio2f+0x468>
    86e0:	3009883a 	mov	r4,r6
    86e4:	014fc034 	movhi	r5,16128
    86e8:	d9800015 	stw	r6,0(sp)
    86ec:	0009a6c0 	call	9a6c <__gesf2>
    86f0:	d9800017 	ldw	r6,0(sp)
    86f4:	1000c90e 	bge	r2,zero,8a1c <__kernel_rem_pio2f+0x958>
    86f8:	0029883a 	mov	r20,zero
    86fc:	003f2906 	br	83a4 <__kernel_rem_pio2f+0x2e0>
    8700:	8d000044 	addi	r20,r17,1
    8704:	dd000015 	stw	r20,0(sp)
    8708:	003f4206 	br	8414 <__kernel_rem_pio2f+0x350>
    870c:	d8c00317 	ldw	r3,12(sp)
    8710:	900490ba 	slli	r2,r18,2
    8714:	d9400c04 	addi	r5,sp,48
    8718:	193ffe04 	addi	r4,r3,-8
    871c:	10c05004 	addi	r3,r2,320
    8720:	1947883a 	add	r3,r3,r5
    8724:	18ffb017 	ldw	r3,-320(r3)
    8728:	dd000015 	stw	r20,0(sp)
    872c:	d9000315 	stw	r4,12(sp)
    8730:	1800091e 	bne	r3,zero,8758 <__kernel_rem_pio2f+0x694>
    8734:	10800c04 	addi	r2,r2,48
    8738:	16c5883a 	add	r2,r2,sp
    873c:	2007883a 	mov	r3,r4
    8740:	113fff17 	ldw	r4,-4(r2)
    8744:	94bfffc4 	addi	r18,r18,-1
    8748:	10bfff04 	addi	r2,r2,-4
    874c:	18fffe04 	addi	r3,r3,-8
    8750:	203ffb26 	beq	r4,zero,8740 <__kernel_rem_pio2f+0x67c>
    8754:	d8c00315 	stw	r3,12(sp)
    8758:	d9400317 	ldw	r5,12(sp)
    875c:	010fe034 	movhi	r4,16256
    8760:	00092900 	call	9290 <scalbnf>
    8764:	102b883a 	mov	r21,r2
    8768:	9000f816 	blt	r18,zero,8b4c <__kernel_rem_pio2f+0xa88>
    876c:	900490ba 	slli	r2,r18,2
    8770:	d8c04804 	addi	r3,sp,288
    8774:	18af883a 	add	r23,r3,r2
    8778:	d8800115 	stw	r2,4(sp)
    877c:	10800c04 	addi	r2,r2,48
    8780:	16f9883a 	add	fp,r2,sp
    8784:	b821883a 	mov	r16,r23
    8788:	e1000017 	ldw	r4,0(fp)
    878c:	843fff04 	addi	r16,r16,-4
    8790:	000a3dc0 	call	a3dc <__floatsisf>
    8794:	a80b883a 	mov	r5,r21
    8798:	1009883a 	mov	r4,r2
    879c:	0009b240 	call	9b24 <__mulsf3>
    87a0:	a809883a 	mov	r4,r21
    87a4:	014ee034 	movhi	r5,15232
    87a8:	80800115 	stw	r2,4(r16)
    87ac:	0009b240 	call	9b24 <__mulsf3>
    87b0:	e007883a 	mov	r3,fp
    87b4:	102b883a 	mov	r21,r2
    87b8:	d8800c04 	addi	r2,sp,48
    87bc:	e73fff04 	addi	fp,fp,-4
    87c0:	10fff11e 	bne	r2,r3,8788 <__kernel_rem_pio2f+0x6c4>
    87c4:	dd800517 	ldw	r22,20(sp)
    87c8:	dcc00215 	stw	r19,8(sp)
    87cc:	dd403404 	addi	r21,sp,208
    87d0:	0021883a 	mov	r16,zero
    87d4:	b0001a16 	blt	r22,zero,8840 <__kernel_rem_pio2f+0x77c>
    87d8:	04c000b4 	movhi	r19,2
    87dc:	9cc5ce04 	addi	r19,r19,5944
    87e0:	b839883a 	mov	fp,r23
    87e4:	010ff274 	movhi	r4,16329
    87e8:	0023883a 	mov	r17,zero
    87ec:	0029883a 	mov	r20,zero
    87f0:	00000406 	br	8804 <__kernel_rem_pio2f+0x740>
    87f4:	e7000104 	addi	fp,fp,4
    87f8:	85000a16 	blt	r16,r20,8824 <__kernel_rem_pio2f+0x760>
    87fc:	99000017 	ldw	r4,0(r19)
    8800:	9cc00104 	addi	r19,r19,4
    8804:	e1400017 	ldw	r5,0(fp)
    8808:	a5000044 	addi	r20,r20,1
    880c:	0009b240 	call	9b24 <__mulsf3>
    8810:	8809883a 	mov	r4,r17
    8814:	100b883a 	mov	r5,r2
    8818:	00095900 	call	9590 <__addsf3>
    881c:	1023883a 	mov	r17,r2
    8820:	b53ff40e 	bge	r22,r20,87f4 <__kernel_rem_pio2f+0x730>
    8824:	ac400015 	stw	r17,0(r21)
    8828:	80800044 	addi	r2,r16,1
    882c:	ad400104 	addi	r21,r21,4
    8830:	bdffff04 	addi	r23,r23,-4
    8834:	94000426 	beq	r18,r16,8848 <__kernel_rem_pio2f+0x784>
    8838:	1021883a 	mov	r16,r2
    883c:	b03fe60e 	bge	r22,zero,87d8 <__kernel_rem_pio2f+0x714>
    8840:	0023883a 	mov	r17,zero
    8844:	003ff706 	br	8824 <__kernel_rem_pio2f+0x760>
    8848:	d8806617 	ldw	r2,408(sp)
    884c:	dcc00217 	ldw	r19,8(sp)
    8850:	108000c8 	cmpgei	r2,r2,3
    8854:	1000201e 	bne	r2,zero,88d8 <__kernel_rem_pio2f+0x814>
    8858:	d8806617 	ldw	r2,408(sp)
    885c:	00807f16 	blt	zero,r2,8a5c <__kernel_rem_pio2f+0x998>
    8860:	1000101e 	bne	r2,zero,88a4 <__kernel_rem_pio2f+0x7e0>
    8864:	d8c00117 	ldw	r3,4(sp)
    8868:	d8803404 	addi	r2,sp,208
    886c:	0009883a 	mov	r4,zero
    8870:	10ed883a 	add	r22,r2,r3
    8874:	b1400017 	ldw	r5,0(r22)
    8878:	00095900 	call	9590 <__addsf3>
    887c:	b007883a 	mov	r3,r22
    8880:	1009883a 	mov	r4,r2
    8884:	d8803404 	addi	r2,sp,208
    8888:	b5bfff04 	addi	r22,r22,-4
    888c:	10fff91e 	bne	r2,r3,8874 <__kernel_rem_pio2f+0x7b0>
    8890:	d8800017 	ldw	r2,0(sp)
    8894:	10000126 	beq	r2,zero,889c <__kernel_rem_pio2f+0x7d8>
    8898:	2120003c 	xorhi	r4,r4,32768
    889c:	d8800917 	ldw	r2,36(sp)
    88a0:	11000015 	stw	r4,0(r2)
    88a4:	988001cc 	andi	r2,r19,7
    88a8:	dfc06517 	ldw	ra,404(sp)
    88ac:	df006417 	ldw	fp,400(sp)
    88b0:	ddc06317 	ldw	r23,396(sp)
    88b4:	dd806217 	ldw	r22,392(sp)
    88b8:	dd406117 	ldw	r21,388(sp)
    88bc:	dd006017 	ldw	r20,384(sp)
    88c0:	dcc05f17 	ldw	r19,380(sp)
    88c4:	dc805e17 	ldw	r18,376(sp)
    88c8:	dc405d17 	ldw	r17,372(sp)
    88cc:	dc005c17 	ldw	r16,368(sp)
    88d0:	dec06604 	addi	sp,sp,408
    88d4:	f800283a 	ret
    88d8:	d8806617 	ldw	r2,408(sp)
    88dc:	108000e0 	cmpeqi	r2,r2,3
    88e0:	103ff026 	beq	r2,zero,88a4 <__kernel_rem_pio2f+0x7e0>
    88e4:	9000a426 	beq	r18,zero,8b78 <__kernel_rem_pio2f+0xab4>
    88e8:	d8c00117 	ldw	r3,4(sp)
    88ec:	d9000c04 	addi	r4,sp,48
    88f0:	18805004 	addi	r2,r3,320
    88f4:	1105883a 	add	r2,r2,r4
    88f8:	10bfd817 	ldw	r2,-160(r2)
    88fc:	d9003404 	addi	r4,sp,208
    8900:	20e1883a 	add	r16,r4,r3
    8904:	857fff17 	ldw	r21,-4(r16)
    8908:	1009883a 	mov	r4,r2
    890c:	1023883a 	mov	r17,r2
    8910:	a80b883a 	mov	r5,r21
    8914:	00095900 	call	9590 <__addsf3>
    8918:	100b883a 	mov	r5,r2
    891c:	a809883a 	mov	r4,r21
    8920:	1029883a 	mov	r20,r2
    8924:	0009ed80 	call	9ed8 <__subsf3>
    8928:	880b883a 	mov	r5,r17
    892c:	1009883a 	mov	r4,r2
    8930:	00095900 	call	9590 <__addsf3>
    8934:	80800015 	stw	r2,0(r16)
    8938:	853fff15 	stw	r20,-4(r16)
    893c:	d8c03404 	addi	r3,sp,208
    8940:	843fff04 	addi	r16,r16,-4
    8944:	a005883a 	mov	r2,r20
    8948:	1c3fee1e 	bne	r3,r16,8904 <__kernel_rem_pio2f+0x840>
    894c:	94800088 	cmpgei	r18,r18,2
    8950:	90008926 	beq	r18,zero,8b78 <__kernel_rem_pio2f+0xab4>
    8954:	d8c00117 	ldw	r3,4(sp)
    8958:	d9000c04 	addi	r4,sp,48
    895c:	dc803504 	addi	r18,sp,212
    8960:	18805004 	addi	r2,r3,320
    8964:	1105883a 	add	r2,r2,r4
    8968:	10bfd817 	ldw	r2,-160(r2)
    896c:	d9003404 	addi	r4,sp,208
    8970:	20ed883a 	add	r22,r4,r3
    8974:	b021883a 	mov	r16,r22
    8978:	857fff17 	ldw	r21,-4(r16)
    897c:	1009883a 	mov	r4,r2
    8980:	1023883a 	mov	r17,r2
    8984:	a80b883a 	mov	r5,r21
    8988:	00095900 	call	9590 <__addsf3>
    898c:	100b883a 	mov	r5,r2
    8990:	a809883a 	mov	r4,r21
    8994:	1029883a 	mov	r20,r2
    8998:	0009ed80 	call	9ed8 <__subsf3>
    899c:	880b883a 	mov	r5,r17
    89a0:	1009883a 	mov	r4,r2
    89a4:	00095900 	call	9590 <__addsf3>
    89a8:	80800015 	stw	r2,0(r16)
    89ac:	853fff15 	stw	r20,-4(r16)
    89b0:	843fff04 	addi	r16,r16,-4
    89b4:	a005883a 	mov	r2,r20
    89b8:	943fef1e 	bne	r18,r16,8978 <__kernel_rem_pio2f+0x8b4>
    89bc:	0009883a 	mov	r4,zero
    89c0:	b1400017 	ldw	r5,0(r22)
    89c4:	b5bfff04 	addi	r22,r22,-4
    89c8:	00095900 	call	9590 <__addsf3>
    89cc:	1009883a 	mov	r4,r2
    89d0:	95bffb1e 	bne	r18,r22,89c0 <__kernel_rem_pio2f+0x8fc>
    89d4:	d9400017 	ldw	r5,0(sp)
    89d8:	d8c03417 	ldw	r3,208(sp)
    89dc:	d8803517 	ldw	r2,212(sp)
    89e0:	28004a1e 	bne	r5,zero,8b0c <__kernel_rem_pio2f+0xa48>
    89e4:	d9400917 	ldw	r5,36(sp)
    89e8:	28c00015 	stw	r3,0(r5)
    89ec:	28800115 	stw	r2,4(r5)
    89f0:	29000215 	stw	r4,8(r5)
    89f4:	003fab06 	br	88a4 <__kernel_rem_pio2f+0x7e0>
    89f8:	88bfffc4 	addi	r2,r17,-1
    89fc:	100490ba 	slli	r2,r2,2
    8a00:	d8c00c04 	addi	r3,sp,48
    8a04:	10805004 	addi	r2,r2,320
    8a08:	10c5883a 	add	r2,r2,r3
    8a0c:	10ffb017 	ldw	r3,-320(r2)
    8a10:	18c01fcc 	andi	r3,r3,127
    8a14:	10ffb015 	stw	r3,-320(r2)
    8a18:	003eeb06 	br	85c8 <__kernel_rem_pio2f+0x504>
    8a1c:	9cc00044 	addi	r19,r19,1
    8a20:	05000084 	movi	r20,2
    8a24:	047eb116 	blt	zero,r17,84ec <__kernel_rem_pio2f+0x428>
    8a28:	300b883a 	mov	r5,r6
    8a2c:	010fe034 	movhi	r4,16256
    8a30:	0009ed80 	call	9ed8 <__subsf3>
    8a34:	1025883a 	mov	r18,r2
    8a38:	003e5a06 	br	83a4 <__kernel_rem_pio2f+0x2e0>
    8a3c:	00800204 	movi	r2,8
    8a40:	d8800a15 	stw	r2,40(sp)
    8a44:	d8000615 	stw	zero,24(sp)
    8a48:	003dbe06 	br	8144 <__kernel_rem_pio2f+0x80>
    8a4c:	30800104 	addi	r2,r6,4
    8a50:	003db706 	br	8130 <__kernel_rem_pio2f+0x6c>
    8a54:	000f883a 	mov	r7,zero
    8a58:	003ecd06 	br	8590 <__kernel_rem_pio2f+0x4cc>
    8a5c:	d8c00117 	ldw	r3,4(sp)
    8a60:	d8803404 	addi	r2,sp,208
    8a64:	10ed883a 	add	r22,r2,r3
    8a68:	0005883a 	mov	r2,zero
    8a6c:	1009883a 	mov	r4,r2
    8a70:	b1400017 	ldw	r5,0(r22)
    8a74:	00095900 	call	9590 <__addsf3>
    8a78:	b007883a 	mov	r3,r22
    8a7c:	1009883a 	mov	r4,r2
    8a80:	d8803404 	addi	r2,sp,208
    8a84:	b5bfff04 	addi	r22,r22,-4
    8a88:	10fff91e 	bne	r2,r3,8a70 <__kernel_rem_pio2f+0x9ac>
    8a8c:	2005883a 	mov	r2,r4
    8a90:	d8c00017 	ldw	r3,0(sp)
    8a94:	d9003417 	ldw	r4,208(sp)
    8a98:	1800241e 	bne	r3,zero,8b2c <__kernel_rem_pio2f+0xa68>
    8a9c:	d8c00917 	ldw	r3,36(sp)
    8aa0:	100b883a 	mov	r5,r2
    8aa4:	18800015 	stw	r2,0(r3)
    8aa8:	0009ed80 	call	9ed8 <__subsf3>
    8aac:	1009883a 	mov	r4,r2
    8ab0:	04800b0e 	bge	zero,r18,8ae0 <__kernel_rem_pio2f+0xa1c>
    8ab4:	dc403504 	addi	r17,sp,212
    8ab8:	04000044 	movi	r16,1
    8abc:	89400017 	ldw	r5,0(r17)
    8ac0:	84000044 	addi	r16,r16,1
    8ac4:	8c400104 	addi	r17,r17,4
    8ac8:	00095900 	call	9590 <__addsf3>
    8acc:	1009883a 	mov	r4,r2
    8ad0:	943ffa0e 	bge	r18,r16,8abc <__kernel_rem_pio2f+0x9f8>
    8ad4:	d8800017 	ldw	r2,0(sp)
    8ad8:	10000126 	beq	r2,zero,8ae0 <__kernel_rem_pio2f+0xa1c>
    8adc:	2120003c 	xorhi	r4,r4,32768
    8ae0:	d8800917 	ldw	r2,36(sp)
    8ae4:	11000115 	stw	r4,4(r2)
    8ae8:	003f6e06 	br	88a4 <__kernel_rem_pio2f+0x7e0>
    8aec:	8009883a 	mov	r4,r16
    8af0:	000a36c0 	call	a36c <__fixsfsi>
    8af4:	a8c05004 	addi	r3,r21,320
    8af8:	d9000c04 	addi	r4,sp,48
    8afc:	192b883a 	add	r21,r3,r4
    8b00:	a8bfb015 	stw	r2,-320(r21)
    8b04:	8825883a 	mov	r18,r17
    8b08:	003f1306 	br	8758 <__kernel_rem_pio2f+0x694>
    8b0c:	d9400917 	ldw	r5,36(sp)
    8b10:	18e0003c 	xorhi	r3,r3,32768
    8b14:	10a0003c 	xorhi	r2,r2,32768
    8b18:	2120003c 	xorhi	r4,r4,32768
    8b1c:	28c00015 	stw	r3,0(r5)
    8b20:	28800115 	stw	r2,4(r5)
    8b24:	29000215 	stw	r4,8(r5)
    8b28:	003f5e06 	br	88a4 <__kernel_rem_pio2f+0x7e0>
    8b2c:	d9400917 	ldw	r5,36(sp)
    8b30:	10e0003c 	xorhi	r3,r2,32768
    8b34:	28c00015 	stw	r3,0(r5)
    8b38:	100b883a 	mov	r5,r2
    8b3c:	0009ed80 	call	9ed8 <__subsf3>
    8b40:	1009883a 	mov	r4,r2
    8b44:	04bfdb16 	blt	zero,r18,8ab4 <__kernel_rem_pio2f+0x9f0>
    8b48:	003fe406 	br	8adc <__kernel_rem_pio2f+0xa18>
    8b4c:	d8806617 	ldw	r2,408(sp)
    8b50:	108000c8 	cmpgei	r2,r2,3
    8b54:	1000051e 	bne	r2,zero,8b6c <__kernel_rem_pio2f+0xaa8>
    8b58:	d8806617 	ldw	r2,408(sp)
    8b5c:	00800816 	blt	zero,r2,8b80 <__kernel_rem_pio2f+0xabc>
    8b60:	103f501e 	bne	r2,zero,88a4 <__kernel_rem_pio2f+0x7e0>
    8b64:	0009883a 	mov	r4,zero
    8b68:	003f4906 	br	8890 <__kernel_rem_pio2f+0x7cc>
    8b6c:	d8806617 	ldw	r2,408(sp)
    8b70:	108000e0 	cmpeqi	r2,r2,3
    8b74:	103f4b26 	beq	r2,zero,88a4 <__kernel_rem_pio2f+0x7e0>
    8b78:	0009883a 	mov	r4,zero
    8b7c:	003f9506 	br	89d4 <__kernel_rem_pio2f+0x910>
    8b80:	0005883a 	mov	r2,zero
    8b84:	003fc206 	br	8a90 <__kernel_rem_pio2f+0x9cc>

00008b88 <__kernel_sinf>:
    8b88:	00a00034 	movhi	r2,32768
    8b8c:	defff904 	addi	sp,sp,-28
    8b90:	10bfffc4 	addi	r2,r2,-1
    8b94:	dd000415 	stw	r20,16(sp)
    8b98:	dcc00315 	stw	r19,12(sp)
    8b9c:	dc000015 	stw	r16,0(sp)
    8ba0:	dfc00615 	stw	ra,24(sp)
    8ba4:	dd400515 	stw	r21,20(sp)
    8ba8:	dc800215 	stw	r18,8(sp)
    8bac:	dc400115 	stw	r17,4(sp)
    8bb0:	1104703a 	and	r2,r2,r4
    8bb4:	00cc8034 	movhi	r3,12800
    8bb8:	2021883a 	mov	r16,r4
    8bbc:	2829883a 	mov	r20,r5
    8bc0:	3027883a 	mov	r19,r6
    8bc4:	10c0020e 	bge	r2,r3,8bd0 <__kernel_sinf+0x48>
    8bc8:	000a36c0 	call	a36c <__fixsfsi>
    8bcc:	10005926 	beq	r2,zero,8d34 <__kernel_sinf+0x1ac>
    8bd0:	800b883a 	mov	r5,r16
    8bd4:	8009883a 	mov	r4,r16
    8bd8:	0009b240 	call	9b24 <__mulsf3>
    8bdc:	100b883a 	mov	r5,r2
    8be0:	8009883a 	mov	r4,r16
    8be4:	1023883a 	mov	r17,r2
    8be8:	0009b240 	call	9b24 <__mulsf3>
    8bec:	014bcbf4 	movhi	r5,12079
    8bf0:	297274c4 	addi	r5,r5,-13869
    8bf4:	8809883a 	mov	r4,r17
    8bf8:	1025883a 	mov	r18,r2
    8bfc:	0009b240 	call	9b24 <__mulsf3>
    8c00:	014cb5f4 	movhi	r5,13015
    8c04:	294bcd04 	addi	r5,r5,12084
    8c08:	1009883a 	mov	r4,r2
    8c0c:	0009ed80 	call	9ed8 <__subsf3>
    8c10:	880b883a 	mov	r5,r17
    8c14:	1009883a 	mov	r4,r2
    8c18:	0009b240 	call	9b24 <__mulsf3>
    8c1c:	014d8e74 	movhi	r5,13881
    8c20:	297bc6c4 	addi	r5,r5,-4325
    8c24:	1009883a 	mov	r4,r2
    8c28:	00095900 	call	9590 <__addsf3>
    8c2c:	880b883a 	mov	r5,r17
    8c30:	1009883a 	mov	r4,r2
    8c34:	0009b240 	call	9b24 <__mulsf3>
    8c38:	014e5434 	movhi	r5,14672
    8c3c:	29434044 	addi	r5,r5,3329
    8c40:	1009883a 	mov	r4,r2
    8c44:	0009ed80 	call	9ed8 <__subsf3>
    8c48:	880b883a 	mov	r5,r17
    8c4c:	1009883a 	mov	r4,r2
    8c50:	0009b240 	call	9b24 <__mulsf3>
    8c54:	014f0274 	movhi	r5,15369
    8c58:	29622244 	addi	r5,r5,-30583
    8c5c:	1009883a 	mov	r4,r2
    8c60:	00095900 	call	9590 <__addsf3>
    8c64:	102b883a 	mov	r21,r2
    8c68:	98002426 	beq	r19,zero,8cfc <__kernel_sinf+0x174>
    8c6c:	014fc034 	movhi	r5,16128
    8c70:	a009883a 	mov	r4,r20
    8c74:	0009b240 	call	9b24 <__mulsf3>
    8c78:	a80b883a 	mov	r5,r21
    8c7c:	9009883a 	mov	r4,r18
    8c80:	1027883a 	mov	r19,r2
    8c84:	0009b240 	call	9b24 <__mulsf3>
    8c88:	100b883a 	mov	r5,r2
    8c8c:	9809883a 	mov	r4,r19
    8c90:	0009ed80 	call	9ed8 <__subsf3>
    8c94:	880b883a 	mov	r5,r17
    8c98:	1009883a 	mov	r4,r2
    8c9c:	0009b240 	call	9b24 <__mulsf3>
    8ca0:	a00b883a 	mov	r5,r20
    8ca4:	1009883a 	mov	r4,r2
    8ca8:	0009ed80 	call	9ed8 <__subsf3>
    8cac:	014f8af4 	movhi	r5,15915
    8cb0:	296aaac4 	addi	r5,r5,-21845
    8cb4:	9009883a 	mov	r4,r18
    8cb8:	1023883a 	mov	r17,r2
    8cbc:	0009b240 	call	9b24 <__mulsf3>
    8cc0:	100b883a 	mov	r5,r2
    8cc4:	8809883a 	mov	r4,r17
    8cc8:	00095900 	call	9590 <__addsf3>
    8ccc:	100b883a 	mov	r5,r2
    8cd0:	8009883a 	mov	r4,r16
    8cd4:	0009ed80 	call	9ed8 <__subsf3>
    8cd8:	dfc00617 	ldw	ra,24(sp)
    8cdc:	dd400517 	ldw	r21,20(sp)
    8ce0:	dd000417 	ldw	r20,16(sp)
    8ce4:	dcc00317 	ldw	r19,12(sp)
    8ce8:	dc800217 	ldw	r18,8(sp)
    8cec:	dc400117 	ldw	r17,4(sp)
    8cf0:	dc000017 	ldw	r16,0(sp)
    8cf4:	dec00704 	addi	sp,sp,28
    8cf8:	f800283a 	ret
    8cfc:	8809883a 	mov	r4,r17
    8d00:	100b883a 	mov	r5,r2
    8d04:	0009b240 	call	9b24 <__mulsf3>
    8d08:	014f8af4 	movhi	r5,15915
    8d0c:	296aaac4 	addi	r5,r5,-21845
    8d10:	1009883a 	mov	r4,r2
    8d14:	0009ed80 	call	9ed8 <__subsf3>
    8d18:	900b883a 	mov	r5,r18
    8d1c:	1009883a 	mov	r4,r2
    8d20:	0009b240 	call	9b24 <__mulsf3>
    8d24:	800b883a 	mov	r5,r16
    8d28:	1009883a 	mov	r4,r2
    8d2c:	00095900 	call	9590 <__addsf3>
    8d30:	003fe906 	br	8cd8 <__kernel_sinf+0x150>
    8d34:	8005883a 	mov	r2,r16
    8d38:	003fe706 	br	8cd8 <__kernel_sinf+0x150>

00008d3c <with_errno>:
    8d3c:	defffc04 	addi	sp,sp,-16
    8d40:	dc800215 	stw	r18,8(sp)
    8d44:	dc400115 	stw	r17,4(sp)
    8d48:	dc000015 	stw	r16,0(sp)
    8d4c:	dfc00315 	stw	ra,12(sp)
    8d50:	2023883a 	mov	r17,r4
    8d54:	2821883a 	mov	r16,r5
    8d58:	3025883a 	mov	r18,r6
    8d5c:	000cde80 	call	cde8 <__errno>
    8d60:	14800015 	stw	r18,0(r2)
    8d64:	8007883a 	mov	r3,r16
    8d68:	8805883a 	mov	r2,r17
    8d6c:	dfc00317 	ldw	ra,12(sp)
    8d70:	dc800217 	ldw	r18,8(sp)
    8d74:	dc400117 	ldw	r17,4(sp)
    8d78:	dc000017 	ldw	r16,0(sp)
    8d7c:	dec00404 	addi	sp,sp,16
    8d80:	f800283a 	ret

00008d84 <xflow>:
    8d84:	defffd04 	addi	sp,sp,-12
    8d88:	2005883a 	mov	r2,r4
    8d8c:	dfc00215 	stw	ra,8(sp)
    8d90:	2809883a 	mov	r4,r5
    8d94:	300b883a 	mov	r5,r6
    8d98:	10000c26 	beq	r2,zero,8dcc <xflow+0x48>
    8d9c:	30a0003c 	xorhi	r2,r6,32768
    8da0:	d9000015 	stw	r4,0(sp)
    8da4:	d8800115 	stw	r2,4(sp)
    8da8:	d9800017 	ldw	r6,0(sp)
    8dac:	d9c00117 	ldw	r7,4(sp)
    8db0:	000b98c0 	call	b98c <__muldf3>
    8db4:	01800884 	movi	r6,34
    8db8:	1009883a 	mov	r4,r2
    8dbc:	180b883a 	mov	r5,r3
    8dc0:	dfc00217 	ldw	ra,8(sp)
    8dc4:	dec00304 	addi	sp,sp,12
    8dc8:	0008d3c1 	jmpi	8d3c <with_errno>
    8dcc:	3005883a 	mov	r2,r6
    8dd0:	003ff306 	br	8da0 <xflow+0x1c>

00008dd4 <__math_uflow>:
    8dd4:	000b883a 	mov	r5,zero
    8dd8:	01840034 	movhi	r6,4096
    8ddc:	0008d841 	jmpi	8d84 <xflow>

00008de0 <__math_may_uflow>:
    8de0:	000b883a 	mov	r5,zero
    8de4:	01879634 	movhi	r6,7768
    8de8:	0008d841 	jmpi	8d84 <xflow>

00008dec <__math_oflow>:
    8dec:	000b883a 	mov	r5,zero
    8df0:	019c0034 	movhi	r6,28672
    8df4:	0008d841 	jmpi	8d84 <xflow>

00008df8 <__math_divzero>:
    8df8:	defffd04 	addi	sp,sp,-12
    8dfc:	dfc00215 	stw	ra,8(sp)
    8e00:	20000e1e 	bne	r4,zero,8e3c <__math_divzero+0x44>
    8e04:	008ffc34 	movhi	r2,16368
    8e08:	d8000015 	stw	zero,0(sp)
    8e0c:	d8800115 	stw	r2,4(sp)
    8e10:	d9000017 	ldw	r4,0(sp)
    8e14:	d9400117 	ldw	r5,4(sp)
    8e18:	000d883a 	mov	r6,zero
    8e1c:	000f883a 	mov	r7,zero
    8e20:	000aeec0 	call	aeec <__divdf3>
    8e24:	01800884 	movi	r6,34
    8e28:	1009883a 	mov	r4,r2
    8e2c:	180b883a 	mov	r5,r3
    8e30:	dfc00217 	ldw	ra,8(sp)
    8e34:	dec00304 	addi	sp,sp,12
    8e38:	0008d3c1 	jmpi	8d3c <with_errno>
    8e3c:	00affc34 	movhi	r2,49136
    8e40:	003ff106 	br	8e08 <__math_divzero+0x10>

00008e44 <__math_invalid>:
    8e44:	defffd04 	addi	sp,sp,-12
    8e48:	200d883a 	mov	r6,r4
    8e4c:	280f883a 	mov	r7,r5
    8e50:	dfc00215 	stw	ra,8(sp)
    8e54:	dc400115 	stw	r17,4(sp)
    8e58:	dc000015 	stw	r16,0(sp)
    8e5c:	2023883a 	mov	r17,r4
    8e60:	2821883a 	mov	r16,r5
    8e64:	000c0000 	call	c000 <__subdf3>
    8e68:	100d883a 	mov	r6,r2
    8e6c:	180f883a 	mov	r7,r3
    8e70:	1009883a 	mov	r4,r2
    8e74:	180b883a 	mov	r5,r3
    8e78:	000aeec0 	call	aeec <__divdf3>
    8e7c:	880d883a 	mov	r6,r17
    8e80:	800f883a 	mov	r7,r16
    8e84:	8809883a 	mov	r4,r17
    8e88:	800b883a 	mov	r5,r16
    8e8c:	1023883a 	mov	r17,r2
    8e90:	1821883a 	mov	r16,r3
    8e94:	000c90c0 	call	c90c <__unorddf2>
    8e98:	1000081e 	bne	r2,zero,8ebc <__math_invalid+0x78>
    8e9c:	01800844 	movi	r6,33
    8ea0:	8809883a 	mov	r4,r17
    8ea4:	800b883a 	mov	r5,r16
    8ea8:	dfc00217 	ldw	ra,8(sp)
    8eac:	dc400117 	ldw	r17,4(sp)
    8eb0:	dc000017 	ldw	r16,0(sp)
    8eb4:	dec00304 	addi	sp,sp,12
    8eb8:	0008d3c1 	jmpi	8d3c <with_errno>
    8ebc:	8805883a 	mov	r2,r17
    8ec0:	8007883a 	mov	r3,r16
    8ec4:	dfc00217 	ldw	ra,8(sp)
    8ec8:	dc400117 	ldw	r17,4(sp)
    8ecc:	dc000017 	ldw	r16,0(sp)
    8ed0:	dec00304 	addi	sp,sp,12
    8ed4:	f800283a 	ret

00008ed8 <__math_check_uflow>:
    8ed8:	defffd04 	addi	sp,sp,-12
    8edc:	000d883a 	mov	r6,zero
    8ee0:	000f883a 	mov	r7,zero
    8ee4:	dc400115 	stw	r17,4(sp)
    8ee8:	dc000015 	stw	r16,0(sp)
    8eec:	dfc00215 	stw	ra,8(sp)
    8ef0:	2023883a 	mov	r17,r4
    8ef4:	2821883a 	mov	r16,r5
    8ef8:	000b73c0 	call	b73c <__eqdf2>
    8efc:	10000726 	beq	r2,zero,8f1c <__math_check_uflow+0x44>
    8f00:	8805883a 	mov	r2,r17
    8f04:	8007883a 	mov	r3,r16
    8f08:	dfc00217 	ldw	ra,8(sp)
    8f0c:	dc400117 	ldw	r17,4(sp)
    8f10:	dc000017 	ldw	r16,0(sp)
    8f14:	dec00304 	addi	sp,sp,12
    8f18:	f800283a 	ret
    8f1c:	01800884 	movi	r6,34
    8f20:	8809883a 	mov	r4,r17
    8f24:	800b883a 	mov	r5,r16
    8f28:	dfc00217 	ldw	ra,8(sp)
    8f2c:	dc400117 	ldw	r17,4(sp)
    8f30:	dc000017 	ldw	r16,0(sp)
    8f34:	dec00304 	addi	sp,sp,12
    8f38:	0008d3c1 	jmpi	8d3c <with_errno>

00008f3c <__math_check_oflow>:
    8f3c:	00a00034 	movhi	r2,32768
    8f40:	defffc04 	addi	sp,sp,-16
    8f44:	10bfffc4 	addi	r2,r2,-1
    8f48:	dc000015 	stw	r16,0(sp)
    8f4c:	01dffc34 	movhi	r7,32752
    8f50:	28a0703a 	and	r16,r5,r2
    8f54:	dc400115 	stw	r17,4(sp)
    8f58:	01bfffc4 	movi	r6,-1
    8f5c:	2823883a 	mov	r17,r5
    8f60:	39ffffc4 	addi	r7,r7,-1
    8f64:	800b883a 	mov	r5,r16
    8f68:	dc800215 	stw	r18,8(sp)
    8f6c:	dfc00315 	stw	ra,12(sp)
    8f70:	2025883a 	mov	r18,r4
    8f74:	000c90c0 	call	c90c <__unorddf2>
    8f78:	1000071e 	bne	r2,zero,8f98 <__math_check_oflow+0x5c>
    8f7c:	01dffc34 	movhi	r7,32752
    8f80:	01bfffc4 	movi	r6,-1
    8f84:	39ffffc4 	addi	r7,r7,-1
    8f88:	9009883a 	mov	r4,r18
    8f8c:	800b883a 	mov	r5,r16
    8f90:	000b8a40 	call	b8a4 <__ledf2>
    8f94:	00800816 	blt	zero,r2,8fb8 <__math_check_oflow+0x7c>
    8f98:	9005883a 	mov	r2,r18
    8f9c:	8807883a 	mov	r3,r17
    8fa0:	dfc00317 	ldw	ra,12(sp)
    8fa4:	dc800217 	ldw	r18,8(sp)
    8fa8:	dc400117 	ldw	r17,4(sp)
    8fac:	dc000017 	ldw	r16,0(sp)
    8fb0:	dec00404 	addi	sp,sp,16
    8fb4:	f800283a 	ret
    8fb8:	01800884 	movi	r6,34
    8fbc:	9009883a 	mov	r4,r18
    8fc0:	880b883a 	mov	r5,r17
    8fc4:	dfc00317 	ldw	ra,12(sp)
    8fc8:	dc800217 	ldw	r18,8(sp)
    8fcc:	dc400117 	ldw	r17,4(sp)
    8fd0:	dc000017 	ldw	r16,0(sp)
    8fd4:	dec00404 	addi	sp,sp,16
    8fd8:	0008d3c1 	jmpi	8d3c <with_errno>

00008fdc <scalbn>:
    8fdc:	2807d53a 	srai	r3,r5,20
    8fe0:	defffe04 	addi	sp,sp,-8
    8fe4:	dc000015 	stw	r16,0(sp)
    8fe8:	dfc00115 	stw	ra,4(sp)
    8fec:	18c1ffcc 	andi	r3,r3,2047
    8ff0:	280f883a 	mov	r7,r5
    8ff4:	2005883a 	mov	r2,r4
    8ff8:	3021883a 	mov	r16,r6
    8ffc:	1800241e 	bne	r3,zero,9090 <scalbn+0xb4>
    9000:	00e00034 	movhi	r3,32768
    9004:	18ffffc4 	addi	r3,r3,-1
    9008:	28c6703a 	and	r3,r5,r3
    900c:	1906b03a 	or	r3,r3,r4
    9010:	18003626 	beq	r3,zero,90ec <scalbn+0x110>
    9014:	000d883a 	mov	r6,zero
    9018:	01d0d434 	movhi	r7,17232
    901c:	000b98c0 	call	b98c <__muldf3>
    9020:	01bffff4 	movhi	r6,65535
    9024:	318f2c04 	addi	r6,r6,15536
    9028:	1009883a 	mov	r4,r2
    902c:	180f883a 	mov	r7,r3
    9030:	81804d16 	blt	r16,r6,9168 <scalbn+0x18c>
    9034:	1807d53a 	srai	r3,r3,20
    9038:	3811883a 	mov	r8,r7
    903c:	18c1ffcc 	andi	r3,r3,2047
    9040:	18fff284 	addi	r3,r3,-54
    9044:	80c7883a 	add	r3,r16,r3
    9048:	1901ffd0 	cmplti	r4,r3,2047
    904c:	20001926 	beq	r4,zero,90b4 <scalbn+0xd8>
    9050:	00c03c16 	blt	zero,r3,9144 <scalbn+0x168>
    9054:	193ff2c8 	cmpgei	r4,r3,-53
    9058:	20002c1e 	bne	r4,zero,910c <scalbn+0x130>
    905c:	00b0d414 	movui	r2,50000
    9060:	14001416 	blt	r2,r16,90b4 <scalbn+0xd8>
    9064:	0130be74 	movhi	r4,49913
    9068:	01406974 	movhi	r5,421
    906c:	213cd644 	addi	r4,r4,-3239
    9070:	295b87c4 	addi	r5,r5,28191
    9074:	38004616 	blt	r7,zero,9190 <scalbn+0x1b4>
    9078:	01b0be74 	movhi	r6,49913
    907c:	01c06974 	movhi	r7,421
    9080:	31bcd644 	addi	r6,r6,-3239
    9084:	39db87c4 	addi	r7,r7,28191
    9088:	000b98c0 	call	b98c <__muldf3>
    908c:	00001306 	br	90dc <scalbn+0x100>
    9090:	1981ffd8 	cmpnei	r6,r3,2047
    9094:	2811883a 	mov	r8,r5
    9098:	303fea1e 	bne	r6,zero,9044 <scalbn+0x68>
    909c:	200d883a 	mov	r6,r4
    90a0:	000a5fc0 	call	a5fc <__adddf3>
    90a4:	dfc00117 	ldw	ra,4(sp)
    90a8:	dc000017 	ldw	r16,0(sp)
    90ac:	dec00204 	addi	sp,sp,8
    90b0:	f800283a 	ret
    90b4:	01220034 	movhi	r4,34816
    90b8:	015f8e34 	movhi	r5,32312
    90bc:	211d6704 	addi	r4,r4,30108
    90c0:	29790f04 	addi	r5,r5,-7108
    90c4:	38000e16 	blt	r7,zero,9100 <scalbn+0x124>
    90c8:	01a20034 	movhi	r6,34816
    90cc:	01df8e34 	movhi	r7,32312
    90d0:	319d6704 	addi	r6,r6,30108
    90d4:	39f90f04 	addi	r7,r7,-7108
    90d8:	000b98c0 	call	b98c <__muldf3>
    90dc:	dfc00117 	ldw	ra,4(sp)
    90e0:	dc000017 	ldw	r16,0(sp)
    90e4:	dec00204 	addi	sp,sp,8
    90e8:	f800283a 	ret
    90ec:	2807883a 	mov	r3,r5
    90f0:	dfc00117 	ldw	ra,4(sp)
    90f4:	dc000017 	ldw	r16,0(sp)
    90f8:	dec00204 	addi	sp,sp,8
    90fc:	f800283a 	ret
    9100:	017f8e34 	movhi	r5,65080
    9104:	29790f04 	addi	r5,r5,-7108
    9108:	003fef06 	br	90c8 <scalbn+0xec>
    910c:	18c00d84 	addi	r3,r3,54
    9110:	1806953a 	slli	r3,r3,20
    9114:	01600434 	movhi	r5,32784
    9118:	297fffc4 	addi	r5,r5,-1
    911c:	414a703a 	and	r5,r8,r5
    9120:	000d883a 	mov	r6,zero
    9124:	01cf2434 	movhi	r7,15504
    9128:	1009883a 	mov	r4,r2
    912c:	194ab03a 	or	r5,r3,r5
    9130:	000b98c0 	call	b98c <__muldf3>
    9134:	dfc00117 	ldw	ra,4(sp)
    9138:	dc000017 	ldw	r16,0(sp)
    913c:	dec00204 	addi	sp,sp,8
    9140:	f800283a 	ret
    9144:	1806953a 	slli	r3,r3,20
    9148:	01e00434 	movhi	r7,32784
    914c:	39ffffc4 	addi	r7,r7,-1
    9150:	41ce703a 	and	r7,r8,r7
    9154:	38c6b03a 	or	r3,r7,r3
    9158:	dfc00117 	ldw	ra,4(sp)
    915c:	dc000017 	ldw	r16,0(sp)
    9160:	dec00204 	addi	sp,sp,8
    9164:	f800283a 	ret
    9168:	01b0be74 	movhi	r6,49913
    916c:	01c06974 	movhi	r7,421
    9170:	31bcd644 	addi	r6,r6,-3239
    9174:	39db87c4 	addi	r7,r7,28191
    9178:	180b883a 	mov	r5,r3
    917c:	000b98c0 	call	b98c <__muldf3>
    9180:	dfc00117 	ldw	ra,4(sp)
    9184:	dc000017 	ldw	r16,0(sp)
    9188:	dec00204 	addi	sp,sp,8
    918c:	f800283a 	ret
    9190:	01606974 	movhi	r5,33189
    9194:	295b87c4 	addi	r5,r5,28191
    9198:	003fb706 	br	9078 <scalbn+0x9c>

0000919c <floorf>:
    919c:	00a00034 	movhi	r2,32768
    91a0:	defffb04 	addi	sp,sp,-20
    91a4:	10bfffc4 	addi	r2,r2,-1
    91a8:	dc400115 	stw	r17,4(sp)
    91ac:	1122703a 	and	r17,r2,r4
    91b0:	dc800215 	stw	r18,8(sp)
    91b4:	8824d5fa 	srli	r18,r17,23
    91b8:	dc000015 	stw	r16,0(sp)
    91bc:	dfc00415 	stw	ra,16(sp)
    91c0:	94bfe044 	addi	r18,r18,-127
    91c4:	dcc00315 	stw	r19,12(sp)
    91c8:	908005c8 	cmpgei	r2,r18,23
    91cc:	2021883a 	mov	r16,r4
    91d0:	1000271e 	bne	r2,zero,9270 <floorf+0xd4>
    91d4:	2027883a 	mov	r19,r4
    91d8:	90001316 	blt	r18,zero,9228 <floorf+0x8c>
    91dc:	00802034 	movhi	r2,128
    91e0:	10bfffc4 	addi	r2,r2,-1
    91e4:	14a3d83a 	sra	r17,r2,r18
    91e8:	8904703a 	and	r2,r17,r4
    91ec:	10001826 	beq	r2,zero,9250 <floorf+0xb4>
    91f0:	015c52b4 	movhi	r5,29002
    91f4:	297cb284 	addi	r5,r5,-3382
    91f8:	00095900 	call	9590 <__addsf3>
    91fc:	000b883a 	mov	r5,zero
    9200:	1009883a 	mov	r4,r2
    9204:	0009a6c0 	call	9a6c <__gesf2>
    9208:	0080110e 	bge	zero,r2,9250 <floorf+0xb4>
    920c:	8000030e 	bge	r16,zero,921c <floorf+0x80>
    9210:	00802034 	movhi	r2,128
    9214:	1485d83a 	sra	r2,r2,r18
    9218:	1427883a 	add	r19,r2,r16
    921c:	0460303a 	nor	r16,zero,r17
    9220:	84c4703a 	and	r2,r16,r19
    9224:	00000b06 	br	9254 <floorf+0xb8>
    9228:	015c52b4 	movhi	r5,29002
    922c:	297cb284 	addi	r5,r5,-3382
    9230:	00095900 	call	9590 <__addsf3>
    9234:	000b883a 	mov	r5,zero
    9238:	1009883a 	mov	r4,r2
    923c:	0009a6c0 	call	9a6c <__gesf2>
    9240:	0080030e 	bge	zero,r2,9250 <floorf+0xb4>
    9244:	80000f16 	blt	r16,zero,9284 <floorf+0xe8>
    9248:	0005883a 	mov	r2,zero
    924c:	00000106 	br	9254 <floorf+0xb8>
    9250:	8005883a 	mov	r2,r16
    9254:	dfc00417 	ldw	ra,16(sp)
    9258:	dcc00317 	ldw	r19,12(sp)
    925c:	dc800217 	ldw	r18,8(sp)
    9260:	dc400117 	ldw	r17,4(sp)
    9264:	dc000017 	ldw	r16,0(sp)
    9268:	dec00504 	addi	sp,sp,20
    926c:	f800283a 	ret
    9270:	009fe034 	movhi	r2,32640
    9274:	88bff636 	bltu	r17,r2,9250 <floorf+0xb4>
    9278:	200b883a 	mov	r5,r4
    927c:	00095900 	call	9590 <__addsf3>
    9280:	003ff406 	br	9254 <floorf+0xb8>
    9284:	883ff226 	beq	r17,zero,9250 <floorf+0xb4>
    9288:	00afe034 	movhi	r2,49024
    928c:	003ff106 	br	9254 <floorf+0xb8>

00009290 <scalbnf>:
    9290:	00e00034 	movhi	r3,32768
    9294:	18ffffc4 	addi	r3,r3,-1
    9298:	1906703a 	and	r3,r3,r4
    929c:	2005883a 	mov	r2,r4
    92a0:	18002626 	beq	r3,zero,933c <scalbnf+0xac>
    92a4:	defffe04 	addi	sp,sp,-8
    92a8:	dc000015 	stw	r16,0(sp)
    92ac:	dfc00115 	stw	ra,4(sp)
    92b0:	019fe034 	movhi	r6,32640
    92b4:	2821883a 	mov	r16,r5
    92b8:	200b883a 	mov	r5,r4
    92bc:	19801a2e 	bgeu	r3,r6,9328 <scalbnf+0x98>
    92c0:	215fe02c 	andhi	r5,r4,32640
    92c4:	28001e1e 	bne	r5,zero,9340 <scalbnf+0xb0>
    92c8:	01530034 	movhi	r5,19456
    92cc:	0009b240 	call	9b24 <__mulsf3>
    92d0:	00fffff4 	movhi	r3,65535
    92d4:	18cf2c04 	addi	r3,r3,15536
    92d8:	1009883a 	mov	r4,r2
    92dc:	80c02616 	blt	r16,r3,9378 <scalbnf+0xe8>
    92e0:	1007d5fa 	srai	r3,r2,23
    92e4:	18c03fcc 	andi	r3,r3,255
    92e8:	18fff9c4 	addi	r3,r3,-25
    92ec:	1c07883a 	add	r3,r3,r16
    92f0:	19403fd0 	cmplti	r5,r3,255
    92f4:	2800161e 	bne	r5,zero,9350 <scalbnf+0xc0>
    92f8:	011c52b4 	movhi	r4,29002
    92fc:	213cb284 	addi	r4,r4,-3382
    9300:	1000020e 	bge	r2,zero,930c <scalbnf+0x7c>
    9304:	013c52b4 	movhi	r4,61770
    9308:	213cb284 	addi	r4,r4,-3382
    930c:	015c52b4 	movhi	r5,29002
    9310:	297cb284 	addi	r5,r5,-3382
    9314:	0009b240 	call	9b24 <__mulsf3>
    9318:	dfc00117 	ldw	ra,4(sp)
    931c:	dc000017 	ldw	r16,0(sp)
    9320:	dec00204 	addi	sp,sp,8
    9324:	f800283a 	ret
    9328:	00095900 	call	9590 <__addsf3>
    932c:	dfc00117 	ldw	ra,4(sp)
    9330:	dc000017 	ldw	r16,0(sp)
    9334:	dec00204 	addi	sp,sp,8
    9338:	f800283a 	ret
    933c:	f800283a 	ret
    9340:	1806d5fa 	srli	r3,r3,23
    9344:	1c07883a 	add	r3,r3,r16
    9348:	19403fd0 	cmplti	r5,r3,255
    934c:	283fea26 	beq	r5,zero,92f8 <scalbnf+0x68>
    9350:	00c01016 	blt	zero,r3,9394 <scalbnf+0x104>
    9354:	197ffa88 	cmpgei	r5,r3,-22
    9358:	2800171e 	bne	r5,zero,93b8 <scalbnf+0x128>
    935c:	00f0d414 	movui	r3,50000
    9360:	1c3fe516 	blt	r3,r16,92f8 <scalbnf+0x68>
    9364:	010368b4 	movhi	r4,3490
    9368:	21109804 	addi	r4,r4,16992
    936c:	1000020e 	bge	r2,zero,9378 <scalbnf+0xe8>
    9370:	012368b4 	movhi	r4,36258
    9374:	21109804 	addi	r4,r4,16992
    9378:	014368b4 	movhi	r5,3490
    937c:	29509804 	addi	r5,r5,16992
    9380:	0009b240 	call	9b24 <__mulsf3>
    9384:	dfc00117 	ldw	ra,4(sp)
    9388:	dc000017 	ldw	r16,0(sp)
    938c:	dec00204 	addi	sp,sp,8
    9390:	f800283a 	ret
    9394:	180695fa 	slli	r3,r3,23
    9398:	00a02034 	movhi	r2,32896
    939c:	10bfffc4 	addi	r2,r2,-1
    93a0:	2084703a 	and	r2,r4,r2
    93a4:	10c4b03a 	or	r2,r2,r3
    93a8:	dfc00117 	ldw	ra,4(sp)
    93ac:	dc000017 	ldw	r16,0(sp)
    93b0:	dec00204 	addi	sp,sp,8
    93b4:	f800283a 	ret
    93b8:	18c00644 	addi	r3,r3,25
    93bc:	180695fa 	slli	r3,r3,23
    93c0:	00a02034 	movhi	r2,32896
    93c4:	10bfffc4 	addi	r2,r2,-1
    93c8:	2088703a 	and	r4,r4,r2
    93cc:	014cc034 	movhi	r5,13056
    93d0:	1908b03a 	or	r4,r3,r4
    93d4:	0009b240 	call	9b24 <__mulsf3>
    93d8:	003fd406 	br	932c <scalbnf+0x9c>

000093dc <__divsi3>:
    93dc:	20001a16 	blt	r4,zero,9448 <__divsi3+0x6c>
    93e0:	000f883a 	mov	r7,zero
    93e4:	2800020e 	bge	r5,zero,93f0 <__divsi3+0x14>
    93e8:	014bc83a 	sub	r5,zero,r5
    93ec:	39c0005c 	xori	r7,r7,1
    93f0:	200d883a 	mov	r6,r4
    93f4:	00c00044 	movi	r3,1
    93f8:	2900092e 	bgeu	r5,r4,9420 <__divsi3+0x44>
    93fc:	00800804 	movi	r2,32
    9400:	00c00044 	movi	r3,1
    9404:	00000106 	br	940c <__divsi3+0x30>
    9408:	10001226 	beq	r2,zero,9454 <__divsi3+0x78>
    940c:	294b883a 	add	r5,r5,r5
    9410:	10bfffc4 	addi	r2,r2,-1
    9414:	18c7883a 	add	r3,r3,r3
    9418:	293ffb36 	bltu	r5,r4,9408 <__divsi3+0x2c>
    941c:	18000d26 	beq	r3,zero,9454 <__divsi3+0x78>
    9420:	0005883a 	mov	r2,zero
    9424:	31400236 	bltu	r6,r5,9430 <__divsi3+0x54>
    9428:	314dc83a 	sub	r6,r6,r5
    942c:	10c4b03a 	or	r2,r2,r3
    9430:	1806d07a 	srli	r3,r3,1
    9434:	280ad07a 	srli	r5,r5,1
    9438:	183ffa1e 	bne	r3,zero,9424 <__divsi3+0x48>
    943c:	38000126 	beq	r7,zero,9444 <__divsi3+0x68>
    9440:	0085c83a 	sub	r2,zero,r2
    9444:	f800283a 	ret
    9448:	0109c83a 	sub	r4,zero,r4
    944c:	01c00044 	movi	r7,1
    9450:	003fe406 	br	93e4 <__divsi3+0x8>
    9454:	0005883a 	mov	r2,zero
    9458:	003ff806 	br	943c <__divsi3+0x60>

0000945c <__modsi3>:
    945c:	20001916 	blt	r4,zero,94c4 <__modsi3+0x68>
    9460:	000f883a 	mov	r7,zero
    9464:	2005883a 	mov	r2,r4
    9468:	2800010e 	bge	r5,zero,9470 <__modsi3+0x14>
    946c:	014bc83a 	sub	r5,zero,r5
    9470:	00c00044 	movi	r3,1
    9474:	2900092e 	bgeu	r5,r4,949c <__modsi3+0x40>
    9478:	01800804 	movi	r6,32
    947c:	00c00044 	movi	r3,1
    9480:	00000106 	br	9488 <__modsi3+0x2c>
    9484:	30000d26 	beq	r6,zero,94bc <__modsi3+0x60>
    9488:	294b883a 	add	r5,r5,r5
    948c:	31bfffc4 	addi	r6,r6,-1
    9490:	18c7883a 	add	r3,r3,r3
    9494:	293ffb36 	bltu	r5,r4,9484 <__modsi3+0x28>
    9498:	18000826 	beq	r3,zero,94bc <__modsi3+0x60>
    949c:	1806d07a 	srli	r3,r3,1
    94a0:	11400136 	bltu	r2,r5,94a8 <__modsi3+0x4c>
    94a4:	1145c83a 	sub	r2,r2,r5
    94a8:	280ad07a 	srli	r5,r5,1
    94ac:	183ffb1e 	bne	r3,zero,949c <__modsi3+0x40>
    94b0:	38000126 	beq	r7,zero,94b8 <__modsi3+0x5c>
    94b4:	0085c83a 	sub	r2,zero,r2
    94b8:	f800283a 	ret
    94bc:	2005883a 	mov	r2,r4
    94c0:	003ffb06 	br	94b0 <__modsi3+0x54>
    94c4:	0109c83a 	sub	r4,zero,r4
    94c8:	01c00044 	movi	r7,1
    94cc:	003fe506 	br	9464 <__modsi3+0x8>

000094d0 <__udivsi3>:
    94d0:	200d883a 	mov	r6,r4
    94d4:	2900152e 	bgeu	r5,r4,952c <__udivsi3+0x5c>
    94d8:	28001416 	blt	r5,zero,952c <__udivsi3+0x5c>
    94dc:	00800804 	movi	r2,32
    94e0:	00c00044 	movi	r3,1
    94e4:	00000206 	br	94f0 <__udivsi3+0x20>
    94e8:	10000e26 	beq	r2,zero,9524 <__udivsi3+0x54>
    94ec:	28000516 	blt	r5,zero,9504 <__udivsi3+0x34>
    94f0:	294b883a 	add	r5,r5,r5
    94f4:	10bfffc4 	addi	r2,r2,-1
    94f8:	18c7883a 	add	r3,r3,r3
    94fc:	293ffa36 	bltu	r5,r4,94e8 <__udivsi3+0x18>
    9500:	18000826 	beq	r3,zero,9524 <__udivsi3+0x54>
    9504:	0005883a 	mov	r2,zero
    9508:	31400236 	bltu	r6,r5,9514 <__udivsi3+0x44>
    950c:	314dc83a 	sub	r6,r6,r5
    9510:	10c4b03a 	or	r2,r2,r3
    9514:	1806d07a 	srli	r3,r3,1
    9518:	280ad07a 	srli	r5,r5,1
    951c:	183ffa1e 	bne	r3,zero,9508 <__udivsi3+0x38>
    9520:	f800283a 	ret
    9524:	0005883a 	mov	r2,zero
    9528:	f800283a 	ret
    952c:	00c00044 	movi	r3,1
    9530:	003ff406 	br	9504 <__udivsi3+0x34>

00009534 <__umodsi3>:
    9534:	2005883a 	mov	r2,r4
    9538:	2900132e 	bgeu	r5,r4,9588 <__umodsi3+0x54>
    953c:	28001216 	blt	r5,zero,9588 <__umodsi3+0x54>
    9540:	01800804 	movi	r6,32
    9544:	00c00044 	movi	r3,1
    9548:	00000206 	br	9554 <__umodsi3+0x20>
    954c:	30000c26 	beq	r6,zero,9580 <__umodsi3+0x4c>
    9550:	28000516 	blt	r5,zero,9568 <__umodsi3+0x34>
    9554:	294b883a 	add	r5,r5,r5
    9558:	31bfffc4 	addi	r6,r6,-1
    955c:	18c7883a 	add	r3,r3,r3
    9560:	293ffa36 	bltu	r5,r4,954c <__umodsi3+0x18>
    9564:	18000626 	beq	r3,zero,9580 <__umodsi3+0x4c>
    9568:	1806d07a 	srli	r3,r3,1
    956c:	11400136 	bltu	r2,r5,9574 <__umodsi3+0x40>
    9570:	1145c83a 	sub	r2,r2,r5
    9574:	280ad07a 	srli	r5,r5,1
    9578:	183ffb1e 	bne	r3,zero,9568 <__umodsi3+0x34>
    957c:	f800283a 	ret
    9580:	2005883a 	mov	r2,r4
    9584:	f800283a 	ret
    9588:	00c00044 	movi	r3,1
    958c:	003ff606 	br	9568 <__umodsi3+0x34>

00009590 <__addsf3>:
    9590:	defffc04 	addi	sp,sp,-16
    9594:	2806d5fa 	srli	r3,r5,23
    9598:	dc000015 	stw	r16,0(sp)
    959c:	2020d5fa 	srli	r16,r4,23
    95a0:	200cd7fa 	srli	r6,r4,31
    95a4:	00802034 	movhi	r2,128
    95a8:	2812d7fa 	srli	r9,r5,31
    95ac:	10bfffc4 	addi	r2,r2,-1
    95b0:	1114703a 	and	r10,r2,r4
    95b4:	1b003fcc 	andi	r12,r3,255
    95b8:	dc400115 	stw	r17,4(sp)
    95bc:	84003fcc 	andi	r16,r16,255
    95c0:	115a703a 	and	r13,r2,r5
    95c4:	dfc00315 	stw	ra,12(sp)
    95c8:	dc800215 	stw	r18,8(sp)
    95cc:	500e90fa 	slli	r7,r10,3
    95d0:	681090fa 	slli	r8,r13,3
    95d4:	5007883a 	mov	r3,r10
    95d8:	3023883a 	mov	r17,r6
    95dc:	8317c83a 	sub	r11,r16,r12
    95e0:	32403926 	beq	r6,r9,96c8 <__addsf3+0x138>
    95e4:	02c02e0e 	bge	zero,r11,96a0 <__addsf3+0x110>
    95e8:	60004c26 	beq	r12,zero,971c <__addsf3+0x18c>
    95ec:	80803fe0 	cmpeqi	r2,r16,255
    95f0:	1000801e 	bne	r2,zero,97f4 <__addsf3+0x264>
    95f4:	42010034 	orhi	r8,r8,1024
    95f8:	58800710 	cmplti	r2,r11,28
    95fc:	10009e1e 	bne	r2,zero,9878 <__addsf3+0x2e8>
    9600:	01000044 	movi	r4,1
    9604:	3909c83a 	sub	r4,r7,r4
    9608:	2081002c 	andhi	r2,r4,1024
    960c:	10006826 	beq	r2,zero,97b0 <__addsf3+0x220>
    9610:	04810034 	movhi	r18,1024
    9614:	94bfffc4 	addi	r18,r18,-1
    9618:	24a4703a 	and	r18,r4,r18
    961c:	9009883a 	mov	r4,r18
    9620:	000cd940 	call	cd94 <__clzsi2>
    9624:	10bffec4 	addi	r2,r2,-5
    9628:	9088983a 	sll	r4,r18,r2
    962c:	1400880e 	bge	r2,r16,9850 <__addsf3+0x2c0>
    9630:	00ff0034 	movhi	r3,64512
    9634:	18ffffc4 	addi	r3,r3,-1
    9638:	80a1c83a 	sub	r16,r16,r2
    963c:	20c8703a 	and	r4,r4,r3
    9640:	208001cc 	andi	r2,r4,7
    9644:	10000426 	beq	r2,zero,9658 <__addsf3+0xc8>
    9648:	208003cc 	andi	r2,r4,15
    964c:	10800120 	cmpeqi	r2,r2,4
    9650:	1000011e 	bne	r2,zero,9658 <__addsf3+0xc8>
    9654:	21000104 	addi	r4,r4,4
    9658:	2081002c 	andhi	r2,r4,1024
    965c:	10005626 	beq	r2,zero,97b8 <__addsf3+0x228>
    9660:	84000044 	addi	r16,r16,1
    9664:	80803fe0 	cmpeqi	r2,r16,255
    9668:	1000461e 	bne	r2,zero,9784 <__addsf3+0x1f4>
    966c:	200491ba 	slli	r2,r4,6
    9670:	1006d27a 	srli	r3,r2,9
    9674:	84003fcc 	andi	r16,r16,255
    9678:	800495fa 	slli	r2,r16,23
    967c:	882297fa 	slli	r17,r17,31
    9680:	10c4b03a 	or	r2,r2,r3
    9684:	1444b03a 	or	r2,r2,r17
    9688:	dfc00317 	ldw	ra,12(sp)
    968c:	dc800217 	ldw	r18,8(sp)
    9690:	dc400117 	ldw	r17,4(sp)
    9694:	dc000017 	ldw	r16,0(sp)
    9698:	dec00404 	addi	sp,sp,16
    969c:	f800283a 	ret
    96a0:	58002526 	beq	r11,zero,9738 <__addsf3+0x1a8>
    96a4:	6417c83a 	sub	r11,r12,r16
    96a8:	8000821e 	bne	r16,zero,98b4 <__addsf3+0x324>
    96ac:	38006426 	beq	r7,zero,9840 <__addsf3+0x2b0>
    96b0:	58bfffc4 	addi	r2,r11,-1
    96b4:	1000c226 	beq	r2,zero,99c0 <__addsf3+0x430>
    96b8:	5ac03fe0 	cmpeqi	r11,r11,255
    96bc:	58004b1e 	bne	r11,zero,97ec <__addsf3+0x25c>
    96c0:	1017883a 	mov	r11,r2
    96c4:	00007e06 	br	98c0 <__addsf3+0x330>
    96c8:	02c0510e 	bge	zero,r11,9810 <__addsf3+0x280>
    96cc:	60002626 	beq	r12,zero,9768 <__addsf3+0x1d8>
    96d0:	80803fe0 	cmpeqi	r2,r16,255
    96d4:	1000471e 	bne	r2,zero,97f4 <__addsf3+0x264>
    96d8:	42010034 	orhi	r8,r8,1024
    96dc:	58800710 	cmplti	r2,r11,28
    96e0:	10007e1e 	bne	r2,zero,98dc <__addsf3+0x34c>
    96e4:	01000044 	movi	r4,1
    96e8:	21c9883a 	add	r4,r4,r7
    96ec:	2081002c 	andhi	r2,r4,1024
    96f0:	10002f26 	beq	r2,zero,97b0 <__addsf3+0x220>
    96f4:	84000044 	addi	r16,r16,1
    96f8:	80803fe0 	cmpeqi	r2,r16,255
    96fc:	1000211e 	bne	r2,zero,9784 <__addsf3+0x1f4>
    9700:	2004d07a 	srli	r2,r4,1
    9704:	00df8034 	movhi	r3,32256
    9708:	18ffffc4 	addi	r3,r3,-1
    970c:	2100004c 	andi	r4,r4,1
    9710:	10c4703a 	and	r2,r2,r3
    9714:	1108b03a 	or	r4,r2,r4
    9718:	003fc906 	br	9640 <__addsf3+0xb0>
    971c:	40004a26 	beq	r8,zero,9848 <__addsf3+0x2b8>
    9720:	58bfffc4 	addi	r2,r11,-1
    9724:	10009326 	beq	r2,zero,9974 <__addsf3+0x3e4>
    9728:	59003fe0 	cmpeqi	r4,r11,255
    972c:	2000311e 	bne	r4,zero,97f4 <__addsf3+0x264>
    9730:	1017883a 	mov	r11,r2
    9734:	003fb006 	br	95f8 <__addsf3+0x68>
    9738:	81800044 	addi	r6,r16,1
    973c:	31803f8c 	andi	r6,r6,254
    9740:	3000541e 	bne	r6,zero,9894 <__addsf3+0x304>
    9744:	80007e1e 	bne	r16,zero,9940 <__addsf3+0x3b0>
    9748:	3800a326 	beq	r7,zero,99d8 <__addsf3+0x448>
    974c:	40009326 	beq	r8,zero,999c <__addsf3+0x40c>
    9750:	3a09c83a 	sub	r4,r7,r8
    9754:	2081002c 	andhi	r2,r4,1024
    9758:	1000a626 	beq	r2,zero,99f4 <__addsf3+0x464>
    975c:	41c9c83a 	sub	r4,r8,r7
    9760:	4823883a 	mov	r17,r9
    9764:	003fb606 	br	9640 <__addsf3+0xb0>
    9768:	40003726 	beq	r8,zero,9848 <__addsf3+0x2b8>
    976c:	58bfffc4 	addi	r2,r11,-1
    9770:	10007b26 	beq	r2,zero,9960 <__addsf3+0x3d0>
    9774:	5ac03fe0 	cmpeqi	r11,r11,255
    9778:	58001e1e 	bne	r11,zero,97f4 <__addsf3+0x264>
    977c:	1017883a 	mov	r11,r2
    9780:	003fd606 	br	96dc <__addsf3+0x14c>
    9784:	043fffc4 	movi	r16,-1
    9788:	0007883a 	mov	r3,zero
    978c:	003fb906 	br	9674 <__addsf3+0xe4>
    9790:	80800044 	addi	r2,r16,1
    9794:	11803f8c 	andi	r6,r2,254
    9798:	30005726 	beq	r6,zero,98f8 <__addsf3+0x368>
    979c:	10c03fe0 	cmpeqi	r3,r2,255
    97a0:	183ff81e 	bne	r3,zero,9784 <__addsf3+0x1f4>
    97a4:	3a09883a 	add	r4,r7,r8
    97a8:	2008d07a 	srli	r4,r4,1
    97ac:	1021883a 	mov	r16,r2
    97b0:	208001cc 	andi	r2,r4,7
    97b4:	103fa41e 	bne	r2,zero,9648 <__addsf3+0xb8>
    97b8:	2014d0fa 	srli	r10,r4,3
    97bc:	80803fe0 	cmpeqi	r2,r16,255
    97c0:	10000c1e 	bne	r2,zero,97f4 <__addsf3+0x264>
    97c4:	00802034 	movhi	r2,128
    97c8:	10bfffc4 	addi	r2,r2,-1
    97cc:	5086703a 	and	r3,r10,r2
    97d0:	003fa806 	br	9674 <__addsf3+0xe4>
    97d4:	38000626 	beq	r7,zero,97f0 <__addsf3+0x260>
    97d8:	40000626 	beq	r8,zero,97f4 <__addsf3+0x264>
    97dc:	2080102c 	andhi	r2,r4,64
    97e0:	10000426 	beq	r2,zero,97f4 <__addsf3+0x264>
    97e4:	2940102c 	andhi	r5,r5,64
    97e8:	2800021e 	bne	r5,zero,97f4 <__addsf3+0x264>
    97ec:	4823883a 	mov	r17,r9
    97f0:	6815883a 	mov	r10,r13
    97f4:	503fe326 	beq	r10,zero,9784 <__addsf3+0x1f4>
    97f8:	00802034 	movhi	r2,128
    97fc:	50c01034 	orhi	r3,r10,64
    9800:	10bfffc4 	addi	r2,r2,-1
    9804:	1886703a 	and	r3,r3,r2
    9808:	043fffc4 	movi	r16,-1
    980c:	003f9906 	br	9674 <__addsf3+0xe4>
    9810:	583fdf26 	beq	r11,zero,9790 <__addsf3+0x200>
    9814:	6417c83a 	sub	r11,r12,r16
    9818:	80004226 	beq	r16,zero,9924 <__addsf3+0x394>
    981c:	60803fe0 	cmpeqi	r2,r12,255
    9820:	103ff31e 	bne	r2,zero,97f0 <__addsf3+0x260>
    9824:	39c10034 	orhi	r7,r7,1024
    9828:	58800710 	cmplti	r2,r11,28
    982c:	10005d1e 	bne	r2,zero,99a4 <__addsf3+0x414>
    9830:	01000044 	movi	r4,1
    9834:	2209883a 	add	r4,r4,r8
    9838:	6021883a 	mov	r16,r12
    983c:	003fab06 	br	96ec <__addsf3+0x15c>
    9840:	4823883a 	mov	r17,r9
    9844:	6815883a 	mov	r10,r13
    9848:	5821883a 	mov	r16,r11
    984c:	003fdb06 	br	97bc <__addsf3+0x22c>
    9850:	1405c83a 	sub	r2,r2,r16
    9854:	14800044 	addi	r18,r2,1
    9858:	00800804 	movi	r2,32
    985c:	1485c83a 	sub	r2,r2,r18
    9860:	2084983a 	sll	r2,r4,r2
    9864:	2488d83a 	srl	r4,r4,r18
    9868:	0021883a 	mov	r16,zero
    986c:	1004c03a 	cmpne	r2,r2,zero
    9870:	1108b03a 	or	r4,r2,r4
    9874:	003f7206 	br	9640 <__addsf3+0xb0>
    9878:	01000804 	movi	r4,32
    987c:	22c9c83a 	sub	r4,r4,r11
    9880:	4108983a 	sll	r4,r8,r4
    9884:	42d0d83a 	srl	r8,r8,r11
    9888:	2008c03a 	cmpne	r4,r4,zero
    988c:	2208b03a 	or	r4,r4,r8
    9890:	003f5c06 	br	9604 <__addsf3+0x74>
    9894:	3a25c83a 	sub	r18,r7,r8
    9898:	9081002c 	andhi	r2,r18,1024
    989c:	10002d1e 	bne	r2,zero,9954 <__addsf3+0x3c4>
    98a0:	903f5e1e 	bne	r18,zero,961c <__addsf3+0x8c>
    98a4:	0023883a 	mov	r17,zero
    98a8:	0021883a 	mov	r16,zero
    98ac:	0007883a 	mov	r3,zero
    98b0:	003f7006 	br	9674 <__addsf3+0xe4>
    98b4:	60803fe0 	cmpeqi	r2,r12,255
    98b8:	103fcc1e 	bne	r2,zero,97ec <__addsf3+0x25c>
    98bc:	39c10034 	orhi	r7,r7,1024
    98c0:	58800710 	cmplti	r2,r11,28
    98c4:	10002e1e 	bne	r2,zero,9980 <__addsf3+0x3f0>
    98c8:	01000044 	movi	r4,1
    98cc:	4109c83a 	sub	r4,r8,r4
    98d0:	4823883a 	mov	r17,r9
    98d4:	6021883a 	mov	r16,r12
    98d8:	003f4b06 	br	9608 <__addsf3+0x78>
    98dc:	01000804 	movi	r4,32
    98e0:	22c9c83a 	sub	r4,r4,r11
    98e4:	4108983a 	sll	r4,r8,r4
    98e8:	42d0d83a 	srl	r8,r8,r11
    98ec:	2008c03a 	cmpne	r4,r4,zero
    98f0:	2208b03a 	or	r4,r4,r8
    98f4:	003f7c06 	br	96e8 <__addsf3+0x158>
    98f8:	803fb61e 	bne	r16,zero,97d4 <__addsf3+0x244>
    98fc:	38003a26 	beq	r7,zero,99e8 <__addsf3+0x458>
    9900:	40002626 	beq	r8,zero,999c <__addsf3+0x40c>
    9904:	3a09883a 	add	r4,r7,r8
    9908:	2081002c 	andhi	r2,r4,1024
    990c:	103fa826 	beq	r2,zero,97b0 <__addsf3+0x220>
    9910:	00bf0034 	movhi	r2,64512
    9914:	10bfffc4 	addi	r2,r2,-1
    9918:	2088703a 	and	r4,r4,r2
    991c:	04000044 	movi	r16,1
    9920:	003fa306 	br	97b0 <__addsf3+0x220>
    9924:	383fc726 	beq	r7,zero,9844 <__addsf3+0x2b4>
    9928:	58bfffc4 	addi	r2,r11,-1
    992c:	10000c26 	beq	r2,zero,9960 <__addsf3+0x3d0>
    9930:	5ac03fe0 	cmpeqi	r11,r11,255
    9934:	583fae1e 	bne	r11,zero,97f0 <__addsf3+0x260>
    9938:	1017883a 	mov	r11,r2
    993c:	003fba06 	br	9828 <__addsf3+0x298>
    9940:	383fa51e 	bne	r7,zero,97d8 <__addsf3+0x248>
    9944:	403fa91e 	bne	r8,zero,97ec <__addsf3+0x25c>
    9948:	0023883a 	mov	r17,zero
    994c:	1007883a 	mov	r3,r2
    9950:	003fad06 	br	9808 <__addsf3+0x278>
    9954:	41e5c83a 	sub	r18,r8,r7
    9958:	4823883a 	mov	r17,r9
    995c:	003f2f06 	br	961c <__addsf3+0x8c>
    9960:	3a09883a 	add	r4,r7,r8
    9964:	2081002c 	andhi	r2,r4,1024
    9968:	10001926 	beq	r2,zero,99d0 <__addsf3+0x440>
    996c:	04000084 	movi	r16,2
    9970:	003f6306 	br	9700 <__addsf3+0x170>
    9974:	3a09c83a 	sub	r4,r7,r8
    9978:	04000044 	movi	r16,1
    997c:	003f2206 	br	9608 <__addsf3+0x78>
    9980:	00800804 	movi	r2,32
    9984:	12c5c83a 	sub	r2,r2,r11
    9988:	3884983a 	sll	r2,r7,r2
    998c:	3aced83a 	srl	r7,r7,r11
    9990:	1008c03a 	cmpne	r4,r2,zero
    9994:	21c8b03a 	or	r4,r4,r7
    9998:	003fcc06 	br	98cc <__addsf3+0x33c>
    999c:	0021883a 	mov	r16,zero
    99a0:	003f3406 	br	9674 <__addsf3+0xe4>
    99a4:	01000804 	movi	r4,32
    99a8:	22c9c83a 	sub	r4,r4,r11
    99ac:	3908983a 	sll	r4,r7,r4
    99b0:	3aced83a 	srl	r7,r7,r11
    99b4:	2008c03a 	cmpne	r4,r4,zero
    99b8:	21c8b03a 	or	r4,r4,r7
    99bc:	003f9d06 	br	9834 <__addsf3+0x2a4>
    99c0:	41c9c83a 	sub	r4,r8,r7
    99c4:	4823883a 	mov	r17,r9
    99c8:	04000044 	movi	r16,1
    99cc:	003f0e06 	br	9608 <__addsf3+0x78>
    99d0:	04000044 	movi	r16,1
    99d4:	003f7606 	br	97b0 <__addsf3+0x220>
    99d8:	403fb226 	beq	r8,zero,98a4 <__addsf3+0x314>
    99dc:	4823883a 	mov	r17,r9
    99e0:	6807883a 	mov	r3,r13
    99e4:	003f2306 	br	9674 <__addsf3+0xe4>
    99e8:	6807883a 	mov	r3,r13
    99ec:	0021883a 	mov	r16,zero
    99f0:	003f2006 	br	9674 <__addsf3+0xe4>
    99f4:	203fab26 	beq	r4,zero,98a4 <__addsf3+0x314>
    99f8:	003f6d06 	br	97b0 <__addsf3+0x220>

000099fc <__eqsf2>:
    99fc:	200cd5fa 	srli	r6,r4,23
    9a00:	2806d5fa 	srli	r3,r5,23
    9a04:	00802034 	movhi	r2,128
    9a08:	31803fcc 	andi	r6,r6,255
    9a0c:	10bfffc4 	addi	r2,r2,-1
    9a10:	31c03fd8 	cmpnei	r7,r6,255
    9a14:	2010d7fa 	srli	r8,r4,31
    9a18:	2812d7fa 	srli	r9,r5,31
    9a1c:	1108703a 	and	r4,r2,r4
    9a20:	18c03fcc 	andi	r3,r3,255
    9a24:	1144703a 	and	r2,r2,r5
    9a28:	38000626 	beq	r7,zero,9a44 <__eqsf2+0x48>
    9a2c:	19403fe0 	cmpeqi	r5,r3,255
    9a30:	2800021e 	bne	r5,zero,9a3c <__eqsf2+0x40>
    9a34:	30c0011e 	bne	r6,r3,9a3c <__eqsf2+0x40>
    9a38:	20800626 	beq	r4,r2,9a54 <__eqsf2+0x58>
    9a3c:	00800044 	movi	r2,1
    9a40:	f800283a 	ret
    9a44:	203ffd1e 	bne	r4,zero,9a3c <__eqsf2+0x40>
    9a48:	18c03fd8 	cmpnei	r3,r3,255
    9a4c:	183ffb1e 	bne	r3,zero,9a3c <__eqsf2+0x40>
    9a50:	103ffa1e 	bne	r2,zero,9a3c <__eqsf2+0x40>
    9a54:	42400326 	beq	r8,r9,9a64 <__eqsf2+0x68>
    9a58:	303ff81e 	bne	r6,zero,9a3c <__eqsf2+0x40>
    9a5c:	2004c03a 	cmpne	r2,r4,zero
    9a60:	f800283a 	ret
    9a64:	0005883a 	mov	r2,zero
    9a68:	f800283a 	ret

00009a6c <__gesf2>:
    9a6c:	200cd5fa 	srli	r6,r4,23
    9a70:	280ed5fa 	srli	r7,r5,23
    9a74:	00c02034 	movhi	r3,128
    9a78:	31803fcc 	andi	r6,r6,255
    9a7c:	18ffffc4 	addi	r3,r3,-1
    9a80:	32003fd8 	cmpnei	r8,r6,255
    9a84:	2012d7fa 	srli	r9,r4,31
    9a88:	2804d7fa 	srli	r2,r5,31
    9a8c:	1908703a 	and	r4,r3,r4
    9a90:	1946703a 	and	r3,r3,r5
    9a94:	39403fcc 	andi	r5,r7,255
    9a98:	40000826 	beq	r8,zero,9abc <__gesf2+0x50>
    9a9c:	29c03fd8 	cmpnei	r7,r5,255
    9aa0:	38000926 	beq	r7,zero,9ac8 <__gesf2+0x5c>
    9aa4:	3000121e 	bne	r6,zero,9af0 <__gesf2+0x84>
    9aa8:	28000e1e 	bne	r5,zero,9ae4 <__gesf2+0x78>
    9aac:	18000d1e 	bne	r3,zero,9ae4 <__gesf2+0x78>
    9ab0:	2000081e 	bne	r4,zero,9ad4 <__gesf2+0x68>
    9ab4:	0005883a 	mov	r2,zero
    9ab8:	f800283a 	ret
    9abc:	2000171e 	bne	r4,zero,9b1c <__gesf2+0xb0>
    9ac0:	29c03fe0 	cmpeqi	r7,r5,255
    9ac4:	38000a26 	beq	r7,zero,9af0 <__gesf2+0x84>
    9ac8:	1800141e 	bne	r3,zero,9b1c <__gesf2+0xb0>
    9acc:	30000526 	beq	r6,zero,9ae4 <__gesf2+0x78>
    9ad0:	48800a26 	beq	r9,r2,9afc <__gesf2+0x90>
    9ad4:	00800044 	movi	r2,1
    9ad8:	48000426 	beq	r9,zero,9aec <__gesf2+0x80>
    9adc:	00bfffc4 	movi	r2,-1
    9ae0:	f800283a 	ret
    9ae4:	203ffa1e 	bne	r4,zero,9ad0 <__gesf2+0x64>
    9ae8:	103ffc26 	beq	r2,zero,9adc <__gesf2+0x70>
    9aec:	f800283a 	ret
    9af0:	283ff71e 	bne	r5,zero,9ad0 <__gesf2+0x64>
    9af4:	183ff61e 	bne	r3,zero,9ad0 <__gesf2+0x64>
    9af8:	003ff606 	br	9ad4 <__gesf2+0x68>
    9afc:	29800416 	blt	r5,r6,9b10 <__gesf2+0xa4>
    9b00:	317ff916 	blt	r6,r5,9ae8 <__gesf2+0x7c>
    9b04:	19000236 	bltu	r3,r4,9b10 <__gesf2+0xa4>
    9b08:	20ffea2e 	bgeu	r4,r3,9ab4 <__gesf2+0x48>
    9b0c:	003ff606 	br	9ae8 <__gesf2+0x7c>
    9b10:	103ff21e 	bne	r2,zero,9adc <__gesf2+0x70>
    9b14:	00800044 	movi	r2,1
    9b18:	f800283a 	ret
    9b1c:	00bfff84 	movi	r2,-2
    9b20:	f800283a 	ret

00009b24 <__mulsf3>:
    9b24:	defff704 	addi	sp,sp,-36
    9b28:	dc400215 	stw	r17,8(sp)
    9b2c:	2022d5fa 	srli	r17,r4,23
    9b30:	dc000115 	stw	r16,4(sp)
    9b34:	04002034 	movhi	r16,128
    9b38:	dd000515 	stw	r20,20(sp)
    9b3c:	843fffc4 	addi	r16,r16,-1
    9b40:	dfc00815 	stw	ra,32(sp)
    9b44:	dd800715 	stw	r22,28(sp)
    9b48:	dd400615 	stw	r21,24(sp)
    9b4c:	dcc00415 	stw	r19,16(sp)
    9b50:	dc800315 	stw	r18,12(sp)
    9b54:	8c403fcc 	andi	r17,r17,255
    9b58:	2028d7fa 	srli	r20,r4,31
    9b5c:	8120703a 	and	r16,r16,r4
    9b60:	88008026 	beq	r17,zero,9d64 <__mulsf3+0x240>
    9b64:	88803fe0 	cmpeqi	r2,r17,255
    9b68:	1000831e 	bne	r2,zero,9d78 <__mulsf3+0x254>
    9b6c:	802090fa 	slli	r16,r16,3
    9b70:	8c7fe044 	addi	r17,r17,-127
    9b74:	002d883a 	mov	r22,zero
    9b78:	84010034 	orhi	r16,r16,1024
    9b7c:	0027883a 	mov	r19,zero
    9b80:	2804d5fa 	srli	r2,r5,23
    9b84:	01002034 	movhi	r4,128
    9b88:	213fffc4 	addi	r4,r4,-1
    9b8c:	10803fcc 	andi	r2,r2,255
    9b90:	282ad7fa 	srli	r21,r5,31
    9b94:	2164703a 	and	r18,r4,r5
    9b98:	10006e26 	beq	r2,zero,9d54 <__mulsf3+0x230>
    9b9c:	11003fe0 	cmpeqi	r4,r2,255
    9ba0:	20007a1e 	bne	r4,zero,9d8c <__mulsf3+0x268>
    9ba4:	900890fa 	slli	r4,r18,3
    9ba8:	10bfe044 	addi	r2,r2,-127
    9bac:	88a3883a 	add	r17,r17,r2
    9bb0:	24810034 	orhi	r18,r4,1024
    9bb4:	0009883a 	mov	r4,zero
    9bb8:	b1800428 	cmpgeui	r6,r22,16
    9bbc:	a544f03a 	xor	r2,r20,r21
    9bc0:	89c00044 	addi	r7,r17,1
    9bc4:	3000321e 	bne	r6,zero,9c90 <__mulsf3+0x16c>
    9bc8:	b00690ba 	slli	r3,r22,2
    9bcc:	01800074 	movhi	r6,1
    9bd0:	198d883a 	add	r6,r3,r6
    9bd4:	30e6f717 	ldw	r3,-25636(r6)
    9bd8:	1800683a 	jmp	r3
    9bdc:	00009c90 	cmplti	zero,zero,626
    9be0:	00009c20 	cmpeqi	zero,zero,624
    9be4:	00009c20 	cmpeqi	zero,zero,624
    9be8:	00009c1c 	xori	zero,zero,624
    9bec:	00009c28 	cmpgeui	zero,zero,624
    9bf0:	00009c28 	cmpgeui	zero,zero,624
    9bf4:	00009e18 	cmpnei	zero,zero,632
    9bf8:	00009c1c 	xori	zero,zero,624
    9bfc:	00009c28 	cmpgeui	zero,zero,624
    9c00:	00009e18 	cmpnei	zero,zero,632
    9c04:	00009c28 	cmpgeui	zero,zero,624
    9c08:	00009c1c 	xori	zero,zero,624
    9c0c:	00009da0 	cmpeqi	zero,zero,630
    9c10:	00009da0 	cmpeqi	zero,zero,630
    9c14:	00009da0 	cmpeqi	zero,zero,630
    9c18:	00009e7c 	xorhi	zero,zero,633
    9c1c:	a805883a 	mov	r2,r21
    9c20:	9021883a 	mov	r16,r18
    9c24:	2027883a 	mov	r19,r4
    9c28:	98c000a0 	cmpeqi	r3,r19,2
    9c2c:	1800151e 	bne	r3,zero,9c84 <__mulsf3+0x160>
    9c30:	98c000e0 	cmpeqi	r3,r19,3
    9c34:	1800a31e 	bne	r3,zero,9ec4 <__mulsf3+0x3a0>
    9c38:	98c00060 	cmpeqi	r3,r19,1
    9c3c:	18003226 	beq	r3,zero,9d08 <__mulsf3+0x1e4>
    9c40:	0007883a 	mov	r3,zero
    9c44:	0009883a 	mov	r4,zero
    9c48:	1c003fcc 	andi	r16,r3,255
    9c4c:	802095fa 	slli	r16,r16,23
    9c50:	100497fa 	slli	r2,r2,31
    9c54:	8120b03a 	or	r16,r16,r4
    9c58:	8084b03a 	or	r2,r16,r2
    9c5c:	dfc00817 	ldw	ra,32(sp)
    9c60:	dd800717 	ldw	r22,28(sp)
    9c64:	dd400617 	ldw	r21,24(sp)
    9c68:	dd000517 	ldw	r20,20(sp)
    9c6c:	dcc00417 	ldw	r19,16(sp)
    9c70:	dc800317 	ldw	r18,12(sp)
    9c74:	dc400217 	ldw	r17,8(sp)
    9c78:	dc000117 	ldw	r16,4(sp)
    9c7c:	dec00904 	addi	sp,sp,36
    9c80:	f800283a 	ret
    9c84:	00ffffc4 	movi	r3,-1
    9c88:	0009883a 	mov	r4,zero
    9c8c:	003fee06 	br	9c48 <__mulsf3+0x124>
    9c90:	9012d43a 	srli	r9,r18,16
    9c94:	80ffffcc 	andi	r3,r16,65535
    9c98:	8010d43a 	srli	r8,r16,16
    9c9c:	913fffcc 	andi	r4,r18,65535
    9ca0:	190b383a 	mul	r5,r3,r4
    9ca4:	4125383a 	mul	r18,r8,r4
    9ca8:	48cd383a 	mul	r6,r9,r3
    9cac:	2806d43a 	srli	r3,r5,16
    9cb0:	4251383a 	mul	r8,r8,r9
    9cb4:	348d883a 	add	r6,r6,r18
    9cb8:	1987883a 	add	r3,r3,r6
    9cbc:	1c80022e 	bgeu	r3,r18,9cc8 <__mulsf3+0x1a4>
    9cc0:	01000074 	movhi	r4,1
    9cc4:	4111883a 	add	r8,r8,r4
    9cc8:	1808943a 	slli	r4,r3,16
    9ccc:	1820d43a 	srli	r16,r3,16
    9cd0:	297fffcc 	andi	r5,r5,65535
    9cd4:	2149883a 	add	r4,r4,r5
    9cd8:	200691ba 	slli	r3,r4,6
    9cdc:	8221883a 	add	r16,r16,r8
    9ce0:	802091ba 	slli	r16,r16,6
    9ce4:	2008d6ba 	srli	r4,r4,26
    9ce8:	1806c03a 	cmpne	r3,r3,zero
    9cec:	8142002c 	andhi	r5,r16,2048
    9cf0:	1908b03a 	or	r4,r3,r4
    9cf4:	8120b03a 	or	r16,r16,r4
    9cf8:	28007026 	beq	r5,zero,9ebc <__mulsf3+0x398>
    9cfc:	8006d07a 	srli	r3,r16,1
    9d00:	8400004c 	andi	r16,r16,1
    9d04:	1c20b03a 	or	r16,r3,r16
    9d08:	38c01fc4 	addi	r3,r7,127
    9d0c:	00c0470e 	bge	zero,r3,9e2c <__mulsf3+0x308>
    9d10:	810001cc 	andi	r4,r16,7
    9d14:	20000426 	beq	r4,zero,9d28 <__mulsf3+0x204>
    9d18:	810003cc 	andi	r4,r16,15
    9d1c:	21000120 	cmpeqi	r4,r4,4
    9d20:	2000011e 	bne	r4,zero,9d28 <__mulsf3+0x204>
    9d24:	84000104 	addi	r16,r16,4
    9d28:	8102002c 	andhi	r4,r16,2048
    9d2c:	20000426 	beq	r4,zero,9d40 <__mulsf3+0x21c>
    9d30:	00fe0034 	movhi	r3,63488
    9d34:	18ffffc4 	addi	r3,r3,-1
    9d38:	80e0703a 	and	r16,r16,r3
    9d3c:	38c02004 	addi	r3,r7,128
    9d40:	19003fc8 	cmpgei	r4,r3,255
    9d44:	203fcf1e 	bne	r4,zero,9c84 <__mulsf3+0x160>
    9d48:	802091ba 	slli	r16,r16,6
    9d4c:	8008d27a 	srli	r4,r16,9
    9d50:	003fbd06 	br	9c48 <__mulsf3+0x124>
    9d54:	9000281e 	bne	r18,zero,9df8 <__mulsf3+0x2d4>
    9d58:	b5800054 	ori	r22,r22,1
    9d5c:	01000044 	movi	r4,1
    9d60:	003f9506 	br	9bb8 <__mulsf3+0x94>
    9d64:	8000191e 	bne	r16,zero,9dcc <__mulsf3+0x2a8>
    9d68:	05800104 	movi	r22,4
    9d6c:	0023883a 	mov	r17,zero
    9d70:	04c00044 	movi	r19,1
    9d74:	003f8206 	br	9b80 <__mulsf3+0x5c>
    9d78:	8000101e 	bne	r16,zero,9dbc <__mulsf3+0x298>
    9d7c:	05800204 	movi	r22,8
    9d80:	04403fc4 	movi	r17,255
    9d84:	04c00084 	movi	r19,2
    9d88:	003f7d06 	br	9b80 <__mulsf3+0x5c>
    9d8c:	8c403fc4 	addi	r17,r17,255
    9d90:	9000071e 	bne	r18,zero,9db0 <__mulsf3+0x28c>
    9d94:	b5800094 	ori	r22,r22,2
    9d98:	01000084 	movi	r4,2
    9d9c:	003f8606 	br	9bb8 <__mulsf3+0x94>
    9da0:	98c000a0 	cmpeqi	r3,r19,2
    9da4:	a005883a 	mov	r2,r20
    9da8:	183fa126 	beq	r3,zero,9c30 <__mulsf3+0x10c>
    9dac:	003fb506 	br	9c84 <__mulsf3+0x160>
    9db0:	b58000d4 	ori	r22,r22,3
    9db4:	010000c4 	movi	r4,3
    9db8:	003f7f06 	br	9bb8 <__mulsf3+0x94>
    9dbc:	05800304 	movi	r22,12
    9dc0:	04403fc4 	movi	r17,255
    9dc4:	04c000c4 	movi	r19,3
    9dc8:	003f6d06 	br	9b80 <__mulsf3+0x5c>
    9dcc:	8009883a 	mov	r4,r16
    9dd0:	d9400015 	stw	r5,0(sp)
    9dd4:	000cd940 	call	cd94 <__clzsi2>
    9dd8:	10fffec4 	addi	r3,r2,-5
    9ddc:	047fe284 	movi	r17,-118
    9de0:	80e0983a 	sll	r16,r16,r3
    9de4:	d9400017 	ldw	r5,0(sp)
    9de8:	88a3c83a 	sub	r17,r17,r2
    9dec:	002d883a 	mov	r22,zero
    9df0:	0027883a 	mov	r19,zero
    9df4:	003f6206 	br	9b80 <__mulsf3+0x5c>
    9df8:	9009883a 	mov	r4,r18
    9dfc:	000cd940 	call	cd94 <__clzsi2>
    9e00:	10fffec4 	addi	r3,r2,-5
    9e04:	88a3c83a 	sub	r17,r17,r2
    9e08:	90e4983a 	sll	r18,r18,r3
    9e0c:	8c7fe284 	addi	r17,r17,-118
    9e10:	0009883a 	mov	r4,zero
    9e14:	003f6806 	br	9bb8 <__mulsf3+0x94>
    9e18:	01002034 	movhi	r4,128
    9e1c:	0005883a 	mov	r2,zero
    9e20:	213fffc4 	addi	r4,r4,-1
    9e24:	00ffffc4 	movi	r3,-1
    9e28:	003f8706 	br	9c48 <__mulsf3+0x124>
    9e2c:	01000044 	movi	r4,1
    9e30:	20c7c83a 	sub	r3,r4,r3
    9e34:	19000708 	cmpgei	r4,r3,28
    9e38:	203f811e 	bne	r4,zero,9c40 <__mulsf3+0x11c>
    9e3c:	39002784 	addi	r4,r7,158
    9e40:	8108983a 	sll	r4,r16,r4
    9e44:	80e0d83a 	srl	r16,r16,r3
    9e48:	2008c03a 	cmpne	r4,r4,zero
    9e4c:	8120b03a 	or	r16,r16,r4
    9e50:	80c001cc 	andi	r3,r16,7
    9e54:	18000426 	beq	r3,zero,9e68 <__mulsf3+0x344>
    9e58:	80c003cc 	andi	r3,r16,15
    9e5c:	18c00120 	cmpeqi	r3,r3,4
    9e60:	1800011e 	bne	r3,zero,9e68 <__mulsf3+0x344>
    9e64:	84000104 	addi	r16,r16,4
    9e68:	80c1002c 	andhi	r3,r16,1024
    9e6c:	183fb626 	beq	r3,zero,9d48 <__mulsf3+0x224>
    9e70:	00c00044 	movi	r3,1
    9e74:	0009883a 	mov	r4,zero
    9e78:	003f7306 	br	9c48 <__mulsf3+0x124>
    9e7c:	8080102c 	andhi	r2,r16,64
    9e80:	10000826 	beq	r2,zero,9ea4 <__mulsf3+0x380>
    9e84:	9080102c 	andhi	r2,r18,64
    9e88:	1000061e 	bne	r2,zero,9ea4 <__mulsf3+0x380>
    9e8c:	00802034 	movhi	r2,128
    9e90:	10bfffc4 	addi	r2,r2,-1
    9e94:	91001034 	orhi	r4,r18,64
    9e98:	2088703a 	and	r4,r4,r2
    9e9c:	a805883a 	mov	r2,r21
    9ea0:	003fe006 	br	9e24 <__mulsf3+0x300>
    9ea4:	00802034 	movhi	r2,128
    9ea8:	10bfffc4 	addi	r2,r2,-1
    9eac:	81001034 	orhi	r4,r16,64
    9eb0:	2088703a 	and	r4,r4,r2
    9eb4:	a005883a 	mov	r2,r20
    9eb8:	003fda06 	br	9e24 <__mulsf3+0x300>
    9ebc:	880f883a 	mov	r7,r17
    9ec0:	003f9106 	br	9d08 <__mulsf3+0x1e4>
    9ec4:	00c02034 	movhi	r3,128
    9ec8:	81001034 	orhi	r4,r16,64
    9ecc:	18ffffc4 	addi	r3,r3,-1
    9ed0:	20c8703a 	and	r4,r4,r3
    9ed4:	003fd306 	br	9e24 <__mulsf3+0x300>

00009ed8 <__subsf3>:
    9ed8:	2804d5fa 	srli	r2,r5,23
    9edc:	2006d5fa 	srli	r3,r4,23
    9ee0:	200cd7fa 	srli	r6,r4,31
    9ee4:	01c02034 	movhi	r7,128
    9ee8:	defffc04 	addi	sp,sp,-16
    9eec:	39ffffc4 	addi	r7,r7,-1
    9ef0:	12803fcc 	andi	r10,r2,255
    9ef4:	3908703a 	and	r4,r7,r4
    9ef8:	dc800215 	stw	r18,8(sp)
    9efc:	394e703a 	and	r7,r7,r5
    9f00:	dc400115 	stw	r17,4(sp)
    9f04:	1c803fcc 	andi	r18,r3,255
    9f08:	dfc00315 	stw	ra,12(sp)
    9f0c:	dc000015 	stw	r16,0(sp)
    9f10:	50803fd8 	cmpnei	r2,r10,255
    9f14:	3023883a 	mov	r17,r6
    9f18:	201090fa 	slli	r8,r4,3
    9f1c:	280ad7fa 	srli	r5,r5,31
    9f20:	381290fa 	slli	r9,r7,3
    9f24:	2019883a 	mov	r12,r4
    9f28:	31803fcc 	andi	r6,r6,255
    9f2c:	9297c83a 	sub	r11,r18,r10
    9f30:	10003f26 	beq	r2,zero,a030 <__subsf3+0x158>
    9f34:	2880005c 	xori	r2,r5,1
    9f38:	30804526 	beq	r6,r2,a050 <__subsf3+0x178>
    9f3c:	02c0310e 	bge	zero,r11,a004 <__subsf3+0x12c>
    9f40:	50003f1e 	bne	r10,zero,a040 <__subsf3+0x168>
    9f44:	48009526 	beq	r9,zero,a19c <__subsf3+0x2c4>
    9f48:	58bfffc4 	addi	r2,r11,-1
    9f4c:	1000de26 	beq	r2,zero,a2c8 <__subsf3+0x3f0>
    9f50:	59003fe0 	cmpeqi	r4,r11,255
    9f54:	20007d1e 	bne	r4,zero,a14c <__subsf3+0x274>
    9f58:	1017883a 	mov	r11,r2
    9f5c:	58800710 	cmplti	r2,r11,28
    9f60:	10009a1e 	bne	r2,zero,a1cc <__subsf3+0x2f4>
    9f64:	01000044 	movi	r4,1
    9f68:	4109c83a 	sub	r4,r8,r4
    9f6c:	2081002c 	andhi	r2,r4,1024
    9f70:	10006a26 	beq	r2,zero,a11c <__subsf3+0x244>
    9f74:	04010034 	movhi	r16,1024
    9f78:	843fffc4 	addi	r16,r16,-1
    9f7c:	2420703a 	and	r16,r4,r16
    9f80:	8009883a 	mov	r4,r16
    9f84:	000cd940 	call	cd94 <__clzsi2>
    9f88:	10bffec4 	addi	r2,r2,-5
    9f8c:	8088983a 	sll	r4,r16,r2
    9f90:	1480840e 	bge	r2,r18,a1a4 <__subsf3+0x2cc>
    9f94:	00ff0034 	movhi	r3,64512
    9f98:	18ffffc4 	addi	r3,r3,-1
    9f9c:	90a5c83a 	sub	r18,r18,r2
    9fa0:	20c8703a 	and	r4,r4,r3
    9fa4:	208001cc 	andi	r2,r4,7
    9fa8:	10000426 	beq	r2,zero,9fbc <__subsf3+0xe4>
    9fac:	208003cc 	andi	r2,r4,15
    9fb0:	10800120 	cmpeqi	r2,r2,4
    9fb4:	1000011e 	bne	r2,zero,9fbc <__subsf3+0xe4>
    9fb8:	21000104 	addi	r4,r4,4
    9fbc:	2081002c 	andhi	r2,r4,1024
    9fc0:	10005826 	beq	r2,zero,a124 <__subsf3+0x24c>
    9fc4:	90c00044 	addi	r3,r18,1
    9fc8:	18803fe0 	cmpeqi	r2,r3,255
    9fcc:	1000481e 	bne	r2,zero,a0f0 <__subsf3+0x218>
    9fd0:	200891ba 	slli	r4,r4,6
    9fd4:	2008d27a 	srli	r4,r4,9
    9fd8:	18803fcc 	andi	r2,r3,255
    9fdc:	100495fa 	slli	r2,r2,23
    9fe0:	880697fa 	slli	r3,r17,31
    9fe4:	1108b03a 	or	r4,r2,r4
    9fe8:	20c4b03a 	or	r2,r4,r3
    9fec:	dfc00317 	ldw	ra,12(sp)
    9ff0:	dc800217 	ldw	r18,8(sp)
    9ff4:	dc400117 	ldw	r17,4(sp)
    9ff8:	dc000017 	ldw	r16,0(sp)
    9ffc:	dec00404 	addi	sp,sp,16
    a000:	f800283a 	ret
    a004:	58002726 	beq	r11,zero,a0a4 <__subsf3+0x1cc>
    a008:	5497c83a 	sub	r11,r10,r18
    a00c:	1023883a 	mov	r17,r2
    a010:	9000751e 	bne	r18,zero,a1e8 <__subsf3+0x310>
    a014:	40006026 	beq	r8,zero,a198 <__subsf3+0x2c0>
    a018:	58bfffc4 	addi	r2,r11,-1
    a01c:	1000cb26 	beq	r2,zero,a34c <__subsf3+0x474>
    a020:	5ac03fe0 	cmpeqi	r11,r11,255
    a024:	5800481e 	bne	r11,zero,a148 <__subsf3+0x270>
    a028:	1017883a 	mov	r11,r2
    a02c:	00007106 	br	a1f4 <__subsf3+0x31c>
    a030:	483fc026 	beq	r9,zero,9f34 <__subsf3+0x5c>
    a034:	28803fcc 	andi	r2,r5,255
    a038:	31404b26 	beq	r6,r5,a168 <__subsf3+0x290>
    a03c:	02fff10e 	bge	zero,r11,a004 <__subsf3+0x12c>
    a040:	90803fe0 	cmpeqi	r2,r18,255
    a044:	1000411e 	bne	r2,zero,a14c <__subsf3+0x274>
    a048:	4a410034 	orhi	r9,r9,1024
    a04c:	003fc306 	br	9f5c <__subsf3+0x84>
    a050:	02c0450e 	bge	zero,r11,a168 <__subsf3+0x290>
    a054:	50001f26 	beq	r10,zero,a0d4 <__subsf3+0x1fc>
    a058:	90803fe0 	cmpeqi	r2,r18,255
    a05c:	10003b1e 	bne	r2,zero,a14c <__subsf3+0x274>
    a060:	4a410034 	orhi	r9,r9,1024
    a064:	58800710 	cmplti	r2,r11,28
    a068:	1000701e 	bne	r2,zero,a22c <__subsf3+0x354>
    a06c:	01000044 	movi	r4,1
    a070:	2209883a 	add	r4,r4,r8
    a074:	2081002c 	andhi	r2,r4,1024
    a078:	10002826 	beq	r2,zero,a11c <__subsf3+0x244>
    a07c:	94800044 	addi	r18,r18,1
    a080:	90803fe0 	cmpeqi	r2,r18,255
    a084:	10001a1e 	bne	r2,zero,a0f0 <__subsf3+0x218>
    a088:	2004d07a 	srli	r2,r4,1
    a08c:	00df8034 	movhi	r3,32256
    a090:	18ffffc4 	addi	r3,r3,-1
    a094:	2100004c 	andi	r4,r4,1
    a098:	10c4703a 	and	r2,r2,r3
    a09c:	1108b03a 	or	r4,r2,r4
    a0a0:	003fc006 	br	9fa4 <__subsf3+0xcc>
    a0a4:	90c00044 	addi	r3,r18,1
    a0a8:	18c03f8c 	andi	r3,r3,254
    a0ac:	1800571e 	bne	r3,zero,a20c <__subsf3+0x334>
    a0b0:	90007a1e 	bne	r18,zero,a29c <__subsf3+0x3c4>
    a0b4:	4000a126 	beq	r8,zero,a33c <__subsf3+0x464>
    a0b8:	48008d26 	beq	r9,zero,a2f0 <__subsf3+0x418>
    a0bc:	4249c83a 	sub	r4,r8,r9
    a0c0:	20c1002c 	andhi	r3,r4,1024
    a0c4:	1800a726 	beq	r3,zero,a364 <__subsf3+0x48c>
    a0c8:	4a09c83a 	sub	r4,r9,r8
    a0cc:	1023883a 	mov	r17,r2
    a0d0:	003fb406 	br	9fa4 <__subsf3+0xcc>
    a0d4:	48003126 	beq	r9,zero,a19c <__subsf3+0x2c4>
    a0d8:	58bfffc4 	addi	r2,r11,-1
    a0dc:	10007526 	beq	r2,zero,a2b4 <__subsf3+0x3dc>
    a0e0:	5ac03fe0 	cmpeqi	r11,r11,255
    a0e4:	5800191e 	bne	r11,zero,a14c <__subsf3+0x274>
    a0e8:	1017883a 	mov	r11,r2
    a0ec:	003fdd06 	br	a064 <__subsf3+0x18c>
    a0f0:	00ffffc4 	movi	r3,-1
    a0f4:	0009883a 	mov	r4,zero
    a0f8:	003fb706 	br	9fd8 <__subsf3+0x100>
    a0fc:	90c00044 	addi	r3,r18,1
    a100:	19403f8c 	andi	r5,r3,254
    a104:	28005026 	beq	r5,zero,a248 <__subsf3+0x370>
    a108:	18803fe0 	cmpeqi	r2,r3,255
    a10c:	103ff81e 	bne	r2,zero,a0f0 <__subsf3+0x218>
    a110:	4249883a 	add	r4,r8,r9
    a114:	2008d07a 	srli	r4,r4,1
    a118:	1825883a 	mov	r18,r3
    a11c:	208001cc 	andi	r2,r4,7
    a120:	103fa21e 	bne	r2,zero,9fac <__subsf3+0xd4>
    a124:	2018d0fa 	srli	r12,r4,3
    a128:	90803fe0 	cmpeqi	r2,r18,255
    a12c:	1000071e 	bne	r2,zero,a14c <__subsf3+0x274>
    a130:	01002034 	movhi	r4,128
    a134:	213fffc4 	addi	r4,r4,-1
    a138:	6108703a 	and	r4,r12,r4
    a13c:	9007883a 	mov	r3,r18
    a140:	003fa506 	br	9fd8 <__subsf3+0x100>
    a144:	40006c1e 	bne	r8,zero,a2f8 <__subsf3+0x420>
    a148:	3819883a 	mov	r12,r7
    a14c:	603fe826 	beq	r12,zero,a0f0 <__subsf3+0x218>
    a150:	00802034 	movhi	r2,128
    a154:	61001034 	orhi	r4,r12,64
    a158:	10bfffc4 	addi	r2,r2,-1
    a15c:	2088703a 	and	r4,r4,r2
    a160:	00ffffc4 	movi	r3,-1
    a164:	003f9c06 	br	9fd8 <__subsf3+0x100>
    a168:	583fe426 	beq	r11,zero,a0fc <__subsf3+0x224>
    a16c:	5497c83a 	sub	r11,r10,r18
    a170:	90004026 	beq	r18,zero,a274 <__subsf3+0x39c>
    a174:	50803fe0 	cmpeqi	r2,r10,255
    a178:	103ff31e 	bne	r2,zero,a148 <__subsf3+0x270>
    a17c:	42010034 	orhi	r8,r8,1024
    a180:	58800710 	cmplti	r2,r11,28
    a184:	1000641e 	bne	r2,zero,a318 <__subsf3+0x440>
    a188:	01000044 	movi	r4,1
    a18c:	2249883a 	add	r4,r4,r9
    a190:	5025883a 	mov	r18,r10
    a194:	003fb706 	br	a074 <__subsf3+0x19c>
    a198:	3819883a 	mov	r12,r7
    a19c:	5825883a 	mov	r18,r11
    a1a0:	003fe106 	br	a128 <__subsf3+0x250>
    a1a4:	1485c83a 	sub	r2,r2,r18
    a1a8:	14000044 	addi	r16,r2,1
    a1ac:	00800804 	movi	r2,32
    a1b0:	1405c83a 	sub	r2,r2,r16
    a1b4:	2084983a 	sll	r2,r4,r2
    a1b8:	2408d83a 	srl	r4,r4,r16
    a1bc:	0025883a 	mov	r18,zero
    a1c0:	1004c03a 	cmpne	r2,r2,zero
    a1c4:	1108b03a 	or	r4,r2,r4
    a1c8:	003f7606 	br	9fa4 <__subsf3+0xcc>
    a1cc:	01000804 	movi	r4,32
    a1d0:	22c9c83a 	sub	r4,r4,r11
    a1d4:	4908983a 	sll	r4,r9,r4
    a1d8:	4ad2d83a 	srl	r9,r9,r11
    a1dc:	2008c03a 	cmpne	r4,r4,zero
    a1e0:	2248b03a 	or	r4,r4,r9
    a1e4:	003f6006 	br	9f68 <__subsf3+0x90>
    a1e8:	50803fe0 	cmpeqi	r2,r10,255
    a1ec:	103fd61e 	bne	r2,zero,a148 <__subsf3+0x270>
    a1f0:	42010034 	orhi	r8,r8,1024
    a1f4:	58800710 	cmplti	r2,r11,28
    a1f8:	1000361e 	bne	r2,zero,a2d4 <__subsf3+0x3fc>
    a1fc:	01000044 	movi	r4,1
    a200:	4909c83a 	sub	r4,r9,r4
    a204:	5025883a 	mov	r18,r10
    a208:	003f5806 	br	9f6c <__subsf3+0x94>
    a20c:	4261c83a 	sub	r16,r8,r9
    a210:	80c1002c 	andhi	r3,r16,1024
    a214:	18001e1e 	bne	r3,zero,a290 <__subsf3+0x3b8>
    a218:	803f591e 	bne	r16,zero,9f80 <__subsf3+0xa8>
    a21c:	0023883a 	mov	r17,zero
    a220:	0007883a 	mov	r3,zero
    a224:	0009883a 	mov	r4,zero
    a228:	003f6b06 	br	9fd8 <__subsf3+0x100>
    a22c:	01000804 	movi	r4,32
    a230:	22c9c83a 	sub	r4,r4,r11
    a234:	4908983a 	sll	r4,r9,r4
    a238:	4ad2d83a 	srl	r9,r9,r11
    a23c:	2008c03a 	cmpne	r4,r4,zero
    a240:	2248b03a 	or	r4,r4,r9
    a244:	003f8a06 	br	a070 <__subsf3+0x198>
    a248:	903fbe1e 	bne	r18,zero,a144 <__subsf3+0x26c>
    a24c:	40004226 	beq	r8,zero,a358 <__subsf3+0x480>
    a250:	48002726 	beq	r9,zero,a2f0 <__subsf3+0x418>
    a254:	4249883a 	add	r4,r8,r9
    a258:	2081002c 	andhi	r2,r4,1024
    a25c:	103faf26 	beq	r2,zero,a11c <__subsf3+0x244>
    a260:	00bf0034 	movhi	r2,64512
    a264:	10bfffc4 	addi	r2,r2,-1
    a268:	2088703a 	and	r4,r4,r2
    a26c:	04800044 	movi	r18,1
    a270:	003faa06 	br	a11c <__subsf3+0x244>
    a274:	403fc826 	beq	r8,zero,a198 <__subsf3+0x2c0>
    a278:	58bfffc4 	addi	r2,r11,-1
    a27c:	10000d26 	beq	r2,zero,a2b4 <__subsf3+0x3dc>
    a280:	5ac03fe0 	cmpeqi	r11,r11,255
    a284:	583fb01e 	bne	r11,zero,a148 <__subsf3+0x270>
    a288:	1017883a 	mov	r11,r2
    a28c:	003fbc06 	br	a180 <__subsf3+0x2a8>
    a290:	4a21c83a 	sub	r16,r9,r8
    a294:	1023883a 	mov	r17,r2
    a298:	003f3906 	br	9f80 <__subsf3+0xa8>
    a29c:	4000161e 	bne	r8,zero,a2f8 <__subsf3+0x420>
    a2a0:	48001a1e 	bne	r9,zero,a30c <__subsf3+0x434>
    a2a4:	01002034 	movhi	r4,128
    a2a8:	0023883a 	mov	r17,zero
    a2ac:	213fffc4 	addi	r4,r4,-1
    a2b0:	003fab06 	br	a160 <__subsf3+0x288>
    a2b4:	4249883a 	add	r4,r8,r9
    a2b8:	2081002c 	andhi	r2,r4,1024
    a2bc:	10001d26 	beq	r2,zero,a334 <__subsf3+0x45c>
    a2c0:	04800084 	movi	r18,2
    a2c4:	003f7006 	br	a088 <__subsf3+0x1b0>
    a2c8:	4249c83a 	sub	r4,r8,r9
    a2cc:	04800044 	movi	r18,1
    a2d0:	003f2606 	br	9f6c <__subsf3+0x94>
    a2d4:	00c00804 	movi	r3,32
    a2d8:	1ac7c83a 	sub	r3,r3,r11
    a2dc:	40c6983a 	sll	r3,r8,r3
    a2e0:	42d0d83a 	srl	r8,r8,r11
    a2e4:	1808c03a 	cmpne	r4,r3,zero
    a2e8:	2208b03a 	or	r4,r4,r8
    a2ec:	003fc406 	br	a200 <__subsf3+0x328>
    a2f0:	0007883a 	mov	r3,zero
    a2f4:	003f3806 	br	9fd8 <__subsf3+0x100>
    a2f8:	483f9426 	beq	r9,zero,a14c <__subsf3+0x274>
    a2fc:	2100102c 	andhi	r4,r4,64
    a300:	203f9226 	beq	r4,zero,a14c <__subsf3+0x274>
    a304:	38c0102c 	andhi	r3,r7,64
    a308:	183f901e 	bne	r3,zero,a14c <__subsf3+0x274>
    a30c:	1023883a 	mov	r17,r2
    a310:	3819883a 	mov	r12,r7
    a314:	003f8d06 	br	a14c <__subsf3+0x274>
    a318:	01000804 	movi	r4,32
    a31c:	22c9c83a 	sub	r4,r4,r11
    a320:	4106983a 	sll	r3,r8,r4
    a324:	42d0d83a 	srl	r8,r8,r11
    a328:	1808c03a 	cmpne	r4,r3,zero
    a32c:	2208b03a 	or	r4,r4,r8
    a330:	003f9606 	br	a18c <__subsf3+0x2b4>
    a334:	04800044 	movi	r18,1
    a338:	003f7806 	br	a11c <__subsf3+0x244>
    a33c:	483fb726 	beq	r9,zero,a21c <__subsf3+0x344>
    a340:	1023883a 	mov	r17,r2
    a344:	3809883a 	mov	r4,r7
    a348:	003f2306 	br	9fd8 <__subsf3+0x100>
    a34c:	4a09c83a 	sub	r4,r9,r8
    a350:	04800044 	movi	r18,1
    a354:	003f0506 	br	9f6c <__subsf3+0x94>
    a358:	3809883a 	mov	r4,r7
    a35c:	0007883a 	mov	r3,zero
    a360:	003f1d06 	br	9fd8 <__subsf3+0x100>
    a364:	203fad26 	beq	r4,zero,a21c <__subsf3+0x344>
    a368:	003f6c06 	br	a11c <__subsf3+0x244>

0000a36c <__fixsfsi>:
    a36c:	200ad5fa 	srli	r5,r4,23
    a370:	00c02034 	movhi	r3,128
    a374:	18ffffc4 	addi	r3,r3,-1
    a378:	29403fcc 	andi	r5,r5,255
    a37c:	29801fd0 	cmplti	r6,r5,127
    a380:	200ed7fa 	srli	r7,r4,31
    a384:	1906703a 	and	r3,r3,r4
    a388:	3000061e 	bne	r6,zero,a3a4 <__fixsfsi+0x38>
    a38c:	28802790 	cmplti	r2,r5,158
    a390:	1000061e 	bne	r2,zero,a3ac <__fixsfsi+0x40>
    a394:	00a00034 	movhi	r2,32768
    a398:	10bfffc4 	addi	r2,r2,-1
    a39c:	3885883a 	add	r2,r7,r2
    a3a0:	f800283a 	ret
    a3a4:	0005883a 	mov	r2,zero
    a3a8:	f800283a 	ret
    a3ac:	28802590 	cmplti	r2,r5,150
    a3b0:	18c02034 	orhi	r3,r3,128
    a3b4:	1000051e 	bne	r2,zero,a3cc <__fixsfsi+0x60>
    a3b8:	28bfda84 	addi	r2,r5,-150
    a3bc:	1884983a 	sll	r2,r3,r2
    a3c0:	383ff926 	beq	r7,zero,a3a8 <__fixsfsi+0x3c>
    a3c4:	0085c83a 	sub	r2,zero,r2
    a3c8:	f800283a 	ret
    a3cc:	00802584 	movi	r2,150
    a3d0:	1145c83a 	sub	r2,r2,r5
    a3d4:	1884d83a 	srl	r2,r3,r2
    a3d8:	003ff906 	br	a3c0 <__fixsfsi+0x54>

0000a3dc <__floatsisf>:
    a3dc:	defffd04 	addi	sp,sp,-12
    a3e0:	dfc00215 	stw	ra,8(sp)
    a3e4:	dc400115 	stw	r17,4(sp)
    a3e8:	dc000015 	stw	r16,0(sp)
    a3ec:	20001226 	beq	r4,zero,a438 <__floatsisf+0x5c>
    a3f0:	2022d7fa 	srli	r17,r4,31
    a3f4:	2021883a 	mov	r16,r4
    a3f8:	20003816 	blt	r4,zero,a4dc <__floatsisf+0x100>
    a3fc:	8009883a 	mov	r4,r16
    a400:	000cd940 	call	cd94 <__clzsi2>
    a404:	1009883a 	mov	r4,r2
    a408:	00802784 	movi	r2,158
    a40c:	1105c83a 	sub	r2,r2,r4
    a410:	10c025c8 	cmpgei	r3,r2,151
    a414:	1800151e 	bne	r3,zero,a46c <__floatsisf+0x90>
    a418:	20c00248 	cmpgei	r3,r4,9
    a41c:	18003126 	beq	r3,zero,a4e4 <__floatsisf+0x108>
    a420:	213ffe04 	addi	r4,r4,-8
    a424:	8120983a 	sll	r16,r16,r4
    a428:	00c02034 	movhi	r3,128
    a42c:	18ffffc4 	addi	r3,r3,-1
    a430:	80e0703a 	and	r16,r16,r3
    a434:	00000306 	br	a444 <__floatsisf+0x68>
    a438:	0023883a 	mov	r17,zero
    a43c:	0005883a 	mov	r2,zero
    a440:	0021883a 	mov	r16,zero
    a444:	10803fcc 	andi	r2,r2,255
    a448:	100495fa 	slli	r2,r2,23
    a44c:	882297fa 	slli	r17,r17,31
    a450:	1404b03a 	or	r2,r2,r16
    a454:	1444b03a 	or	r2,r2,r17
    a458:	dfc00217 	ldw	ra,8(sp)
    a45c:	dc400117 	ldw	r17,4(sp)
    a460:	dc000017 	ldw	r16,0(sp)
    a464:	dec00304 	addi	sp,sp,12
    a468:	f800283a 	ret
    a46c:	10c02690 	cmplti	r3,r2,154
    a470:	1800071e 	bne	r3,zero,a490 <__floatsisf+0xb4>
    a474:	20c006c4 	addi	r3,r4,27
    a478:	01400144 	movi	r5,5
    a47c:	80c6983a 	sll	r3,r16,r3
    a480:	290bc83a 	sub	r5,r5,r4
    a484:	814ad83a 	srl	r5,r16,r5
    a488:	1806c03a 	cmpne	r3,r3,zero
    a48c:	28e0b03a 	or	r16,r5,r3
    a490:	20c00188 	cmpgei	r3,r4,6
    a494:	1800171e 	bne	r3,zero,a4f4 <__floatsisf+0x118>
    a498:	00ff0034 	movhi	r3,64512
    a49c:	18ffffc4 	addi	r3,r3,-1
    a4a0:	818001cc 	andi	r6,r16,7
    a4a4:	80ca703a 	and	r5,r16,r3
    a4a8:	30000926 	beq	r6,zero,a4d0 <__floatsisf+0xf4>
    a4ac:	818003cc 	andi	r6,r16,15
    a4b0:	31800120 	cmpeqi	r6,r6,4
    a4b4:	3000061e 	bne	r6,zero,a4d0 <__floatsisf+0xf4>
    a4b8:	29400104 	addi	r5,r5,4
    a4bc:	2981002c 	andhi	r6,r5,1024
    a4c0:	30000326 	beq	r6,zero,a4d0 <__floatsisf+0xf4>
    a4c4:	28ca703a 	and	r5,r5,r3
    a4c8:	00c027c4 	movi	r3,159
    a4cc:	1905c83a 	sub	r2,r3,r4
    a4d0:	282091ba 	slli	r16,r5,6
    a4d4:	8020d27a 	srli	r16,r16,9
    a4d8:	003fda06 	br	a444 <__floatsisf+0x68>
    a4dc:	0121c83a 	sub	r16,zero,r4
    a4e0:	003fc606 	br	a3fc <__floatsisf+0x20>
    a4e4:	01002034 	movhi	r4,128
    a4e8:	213fffc4 	addi	r4,r4,-1
    a4ec:	8120703a 	and	r16,r16,r4
    a4f0:	003fd406 	br	a444 <__floatsisf+0x68>
    a4f4:	20fffec4 	addi	r3,r4,-5
    a4f8:	80e0983a 	sll	r16,r16,r3
    a4fc:	003fe606 	br	a498 <__floatsisf+0xbc>

0000a500 <__floatunsisf>:
    a500:	defffe04 	addi	sp,sp,-8
    a504:	dfc00115 	stw	ra,4(sp)
    a508:	dc000015 	stw	r16,0(sp)
    a50c:	20000f26 	beq	r4,zero,a54c <__floatunsisf+0x4c>
    a510:	2021883a 	mov	r16,r4
    a514:	000cd940 	call	cd94 <__clzsi2>
    a518:	1009883a 	mov	r4,r2
    a51c:	00802784 	movi	r2,158
    a520:	1105c83a 	sub	r2,r2,r4
    a524:	10c025c8 	cmpgei	r3,r2,151
    a528:	1800111e 	bne	r3,zero,a570 <__floatunsisf+0x70>
    a52c:	20c00248 	cmpgei	r3,r4,9
    a530:	18002b26 	beq	r3,zero,a5e0 <__floatunsisf+0xe0>
    a534:	213ffe04 	addi	r4,r4,-8
    a538:	8120983a 	sll	r16,r16,r4
    a53c:	00c02034 	movhi	r3,128
    a540:	18ffffc4 	addi	r3,r3,-1
    a544:	80e0703a 	and	r16,r16,r3
    a548:	00000206 	br	a554 <__floatunsisf+0x54>
    a54c:	0005883a 	mov	r2,zero
    a550:	0021883a 	mov	r16,zero
    a554:	10803fcc 	andi	r2,r2,255
    a558:	100495fa 	slli	r2,r2,23
    a55c:	1404b03a 	or	r2,r2,r16
    a560:	dfc00117 	ldw	ra,4(sp)
    a564:	dc000017 	ldw	r16,0(sp)
    a568:	dec00204 	addi	sp,sp,8
    a56c:	f800283a 	ret
    a570:	10c02690 	cmplti	r3,r2,154
    a574:	1800071e 	bne	r3,zero,a594 <__floatunsisf+0x94>
    a578:	20c006c4 	addi	r3,r4,27
    a57c:	80ca983a 	sll	r5,r16,r3
    a580:	00c00144 	movi	r3,5
    a584:	1907c83a 	sub	r3,r3,r4
    a588:	80e0d83a 	srl	r16,r16,r3
    a58c:	2806c03a 	cmpne	r3,r5,zero
    a590:	1c20b03a 	or	r16,r3,r16
    a594:	20c00188 	cmpgei	r3,r4,6
    a598:	1800151e 	bne	r3,zero,a5f0 <__floatunsisf+0xf0>
    a59c:	00ff0034 	movhi	r3,64512
    a5a0:	18ffffc4 	addi	r3,r3,-1
    a5a4:	818001cc 	andi	r6,r16,7
    a5a8:	80ca703a 	and	r5,r16,r3
    a5ac:	30000926 	beq	r6,zero,a5d4 <__floatunsisf+0xd4>
    a5b0:	840003cc 	andi	r16,r16,15
    a5b4:	84000120 	cmpeqi	r16,r16,4
    a5b8:	8000061e 	bne	r16,zero,a5d4 <__floatunsisf+0xd4>
    a5bc:	29400104 	addi	r5,r5,4
    a5c0:	2981002c 	andhi	r6,r5,1024
    a5c4:	30000326 	beq	r6,zero,a5d4 <__floatunsisf+0xd4>
    a5c8:	28ca703a 	and	r5,r5,r3
    a5cc:	00c027c4 	movi	r3,159
    a5d0:	1905c83a 	sub	r2,r3,r4
    a5d4:	282091ba 	slli	r16,r5,6
    a5d8:	8020d27a 	srli	r16,r16,9
    a5dc:	003fdd06 	br	a554 <__floatunsisf+0x54>
    a5e0:	01002034 	movhi	r4,128
    a5e4:	213fffc4 	addi	r4,r4,-1
    a5e8:	8120703a 	and	r16,r16,r4
    a5ec:	003fd906 	br	a554 <__floatunsisf+0x54>
    a5f0:	20fffec4 	addi	r3,r4,-5
    a5f4:	80e0983a 	sll	r16,r16,r3
    a5f8:	003fe806 	br	a59c <__floatunsisf+0x9c>

0000a5fc <__adddf3>:
    a5fc:	02000434 	movhi	r8,16
    a600:	423fffc4 	addi	r8,r8,-1
    a604:	2806d53a 	srli	r3,r5,20
    a608:	3804d53a 	srli	r2,r7,20
    a60c:	2a14703a 	and	r10,r5,r8
    a610:	3a12703a 	and	r9,r7,r8
    a614:	280ad7fa 	srli	r5,r5,31
    a618:	501490fa 	slli	r10,r10,3
    a61c:	2018d77a 	srli	r12,r4,29
    a620:	481290fa 	slli	r9,r9,3
    a624:	3016d77a 	srli	r11,r6,29
    a628:	380ed7fa 	srli	r7,r7,31
    a62c:	defffb04 	addi	sp,sp,-20
    a630:	dc800215 	stw	r18,8(sp)
    a634:	dc000015 	stw	r16,0(sp)
    a638:	1c81ffcc 	andi	r18,r3,2047
    a63c:	1081ffcc 	andi	r2,r2,2047
    a640:	dfc00415 	stw	ra,16(sp)
    a644:	dcc00315 	stw	r19,12(sp)
    a648:	dc400115 	stw	r17,4(sp)
    a64c:	201c90fa 	slli	r14,r4,3
    a650:	301a90fa 	slli	r13,r6,3
    a654:	2821883a 	mov	r16,r5
    a658:	6294b03a 	or	r10,r12,r10
    a65c:	5a52b03a 	or	r9,r11,r9
    a660:	9087c83a 	sub	r3,r18,r2
    a664:	29c06126 	beq	r5,r7,a7ec <__adddf3+0x1f0>
    a668:	00c0550e 	bge	zero,r3,a7c0 <__adddf3+0x1c4>
    a66c:	10007326 	beq	r2,zero,a83c <__adddf3+0x240>
    a670:	9081ffd8 	cmpnei	r2,r18,2047
    a674:	1000b826 	beq	r2,zero,a958 <__adddf3+0x35c>
    a678:	4a402034 	orhi	r9,r9,128
    a67c:	18800e48 	cmpgei	r2,r3,57
    a680:	1000ee1e 	bne	r2,zero,aa3c <__adddf3+0x440>
    a684:	18800808 	cmpgei	r2,r3,32
    a688:	10012d1e 	bne	r2,zero,ab40 <__adddf3+0x544>
    a68c:	00800804 	movi	r2,32
    a690:	10c5c83a 	sub	r2,r2,r3
    a694:	68c8d83a 	srl	r4,r13,r3
    a698:	48a2983a 	sll	r17,r9,r2
    a69c:	689a983a 	sll	r13,r13,r2
    a6a0:	48c6d83a 	srl	r3,r9,r3
    a6a4:	8922b03a 	or	r17,r17,r4
    a6a8:	681ac03a 	cmpne	r13,r13,zero
    a6ac:	8b62b03a 	or	r17,r17,r13
    a6b0:	50d5c83a 	sub	r10,r10,r3
    a6b4:	7463c83a 	sub	r17,r14,r17
    a6b8:	7451803a 	cmpltu	r8,r14,r17
    a6bc:	5211c83a 	sub	r8,r10,r8
    a6c0:	4080202c 	andhi	r2,r8,128
    a6c4:	10008826 	beq	r2,zero,a8e8 <__adddf3+0x2ec>
    a6c8:	02402034 	movhi	r9,128
    a6cc:	4a7fffc4 	addi	r9,r9,-1
    a6d0:	4266703a 	and	r19,r8,r9
    a6d4:	9800ae26 	beq	r19,zero,a990 <__adddf3+0x394>
    a6d8:	9809883a 	mov	r4,r19
    a6dc:	000cd940 	call	cd94 <__clzsi2>
    a6e0:	10fffe04 	addi	r3,r2,-8
    a6e4:	02000804 	movi	r8,32
    a6e8:	40d1c83a 	sub	r8,r8,r3
    a6ec:	8a10d83a 	srl	r8,r17,r8
    a6f0:	98d2983a 	sll	r9,r19,r3
    a6f4:	88e2983a 	sll	r17,r17,r3
    a6f8:	4250b03a 	or	r8,r8,r9
    a6fc:	1c80ad16 	blt	r3,r18,a9b4 <__adddf3+0x3b8>
    a700:	1c87c83a 	sub	r3,r3,r18
    a704:	19000044 	addi	r4,r3,1
    a708:	20800808 	cmpgei	r2,r4,32
    a70c:	10006a1e 	bne	r2,zero,a8b8 <__adddf3+0x2bc>
    a710:	00800804 	movi	r2,32
    a714:	1105c83a 	sub	r2,r2,r4
    a718:	8906d83a 	srl	r3,r17,r4
    a71c:	88a2983a 	sll	r17,r17,r2
    a720:	4084983a 	sll	r2,r8,r2
    a724:	4110d83a 	srl	r8,r8,r4
    a728:	8822c03a 	cmpne	r17,r17,zero
    a72c:	10c4b03a 	or	r2,r2,r3
    a730:	1462b03a 	or	r17,r2,r17
    a734:	0025883a 	mov	r18,zero
    a738:	888001cc 	andi	r2,r17,7
    a73c:	10000726 	beq	r2,zero,a75c <__adddf3+0x160>
    a740:	888003cc 	andi	r2,r17,15
    a744:	10800120 	cmpeqi	r2,r2,4
    a748:	1000041e 	bne	r2,zero,a75c <__adddf3+0x160>
    a74c:	88c00104 	addi	r3,r17,4
    a750:	1c63803a 	cmpltu	r17,r3,r17
    a754:	4451883a 	add	r8,r8,r17
    a758:	1823883a 	mov	r17,r3
    a75c:	4080202c 	andhi	r2,r8,128
    a760:	10006326 	beq	r2,zero,a8f0 <__adddf3+0x2f4>
    a764:	90c00044 	addi	r3,r18,1
    a768:	1881ffe0 	cmpeqi	r2,r3,2047
    a76c:	18c1ffcc 	andi	r3,r3,2047
    a770:	1000751e 	bne	r2,zero,a948 <__adddf3+0x34c>
    a774:	00bfe034 	movhi	r2,65408
    a778:	10bfffc4 	addi	r2,r2,-1
    a77c:	4090703a 	and	r8,r8,r2
    a780:	4004977a 	slli	r2,r8,29
    a784:	4010927a 	slli	r8,r8,9
    a788:	8822d0fa 	srli	r17,r17,3
    a78c:	4010d33a 	srli	r8,r8,12
    a790:	1444b03a 	or	r2,r2,r17
    a794:	1806953a 	slli	r3,r3,20
    a798:	802097fa 	slli	r16,r16,31
    a79c:	1a06b03a 	or	r3,r3,r8
    a7a0:	1c06b03a 	or	r3,r3,r16
    a7a4:	dfc00417 	ldw	ra,16(sp)
    a7a8:	dcc00317 	ldw	r19,12(sp)
    a7ac:	dc800217 	ldw	r18,8(sp)
    a7b0:	dc400117 	ldw	r17,4(sp)
    a7b4:	dc000017 	ldw	r16,0(sp)
    a7b8:	dec00504 	addi	sp,sp,20
    a7bc:	f800283a 	ret
    a7c0:	18002626 	beq	r3,zero,a85c <__adddf3+0x260>
    a7c4:	1487c83a 	sub	r3,r2,r18
    a7c8:	9000b51e 	bne	r18,zero,aaa0 <__adddf3+0x4a4>
    a7cc:	5388b03a 	or	r4,r10,r14
    a7d0:	20010f26 	beq	r4,zero,ac10 <__adddf3+0x614>
    a7d4:	193fffc4 	addi	r4,r3,-1
    a7d8:	20016126 	beq	r4,zero,ad60 <__adddf3+0x764>
    a7dc:	18c1ffd8 	cmpnei	r3,r3,2047
    a7e0:	18012e26 	beq	r3,zero,ac9c <__adddf3+0x6a0>
    a7e4:	2007883a 	mov	r3,r4
    a7e8:	0000b006 	br	aaac <__adddf3+0x4b0>
    a7ec:	00c0760e 	bge	zero,r3,a9c8 <__adddf3+0x3cc>
    a7f0:	10002926 	beq	r2,zero,a898 <__adddf3+0x29c>
    a7f4:	9081ffd8 	cmpnei	r2,r18,2047
    a7f8:	10012126 	beq	r2,zero,ac80 <__adddf3+0x684>
    a7fc:	4a402034 	orhi	r9,r9,128
    a800:	18800e48 	cmpgei	r2,r3,57
    a804:	1000461e 	bne	r2,zero,a920 <__adddf3+0x324>
    a808:	18800808 	cmpgei	r2,r3,32
    a80c:	1000e326 	beq	r2,zero,ab9c <__adddf3+0x5a0>
    a810:	1c7ff804 	addi	r17,r3,-32
    a814:	19000820 	cmpeqi	r4,r3,32
    a818:	4c44d83a 	srl	r2,r9,r17
    a81c:	2000041e 	bne	r4,zero,a830 <__adddf3+0x234>
    a820:	01001004 	movi	r4,64
    a824:	20c7c83a 	sub	r3,r4,r3
    a828:	48d2983a 	sll	r9,r9,r3
    a82c:	6a5ab03a 	or	r13,r13,r9
    a830:	6822c03a 	cmpne	r17,r13,zero
    a834:	88a2b03a 	or	r17,r17,r2
    a838:	00003b06 	br	a928 <__adddf3+0x32c>
    a83c:	4b44b03a 	or	r2,r9,r13
    a840:	10008126 	beq	r2,zero,aa48 <__adddf3+0x44c>
    a844:	18bfffc4 	addi	r2,r3,-1
    a848:	10010726 	beq	r2,zero,ac68 <__adddf3+0x66c>
    a84c:	18c1ffd8 	cmpnei	r3,r3,2047
    a850:	18004126 	beq	r3,zero,a958 <__adddf3+0x35c>
    a854:	1007883a 	mov	r3,r2
    a858:	003f8806 	br	a67c <__adddf3+0x80>
    a85c:	90800044 	addi	r2,r18,1
    a860:	1081ff8c 	andi	r2,r2,2046
    a864:	1000a01e 	bne	r2,zero,aae8 <__adddf3+0x4ec>
    a868:	538ab03a 	or	r5,r10,r14
    a86c:	4b44b03a 	or	r2,r9,r13
    a870:	9000ef1e 	bne	r18,zero,ac30 <__adddf3+0x634>
    a874:	28014126 	beq	r5,zero,ad7c <__adddf3+0x780>
    a878:	1001491e 	bne	r2,zero,ada0 <__adddf3+0x7a4>
    a87c:	500a977a 	slli	r5,r10,29
    a880:	00880034 	movhi	r2,8192
    a884:	10bfffc4 	addi	r2,r2,-1
    a888:	2084703a 	and	r2,r4,r2
    a88c:	5014d0fa 	srli	r10,r10,3
    a890:	1144b03a 	or	r2,r2,r5
    a894:	00001d06 	br	a90c <__adddf3+0x310>
    a898:	4b44b03a 	or	r2,r9,r13
    a89c:	10006a26 	beq	r2,zero,aa48 <__adddf3+0x44c>
    a8a0:	18bfffc4 	addi	r2,r3,-1
    a8a4:	1000e826 	beq	r2,zero,ac48 <__adddf3+0x64c>
    a8a8:	18c1ffd8 	cmpnei	r3,r3,2047
    a8ac:	1800f426 	beq	r3,zero,ac80 <__adddf3+0x684>
    a8b0:	1007883a 	mov	r3,r2
    a8b4:	003fd206 	br	a800 <__adddf3+0x204>
    a8b8:	18fff844 	addi	r3,r3,-31
    a8bc:	20800820 	cmpeqi	r2,r4,32
    a8c0:	40c6d83a 	srl	r3,r8,r3
    a8c4:	1000041e 	bne	r2,zero,a8d8 <__adddf3+0x2dc>
    a8c8:	00801004 	movi	r2,64
    a8cc:	1109c83a 	sub	r4,r2,r4
    a8d0:	4110983a 	sll	r8,r8,r4
    a8d4:	8a22b03a 	or	r17,r17,r8
    a8d8:	8822c03a 	cmpne	r17,r17,zero
    a8dc:	88e2b03a 	or	r17,r17,r3
    a8e0:	0011883a 	mov	r8,zero
    a8e4:	0025883a 	mov	r18,zero
    a8e8:	888001cc 	andi	r2,r17,7
    a8ec:	103f941e 	bne	r2,zero,a740 <__adddf3+0x144>
    a8f0:	8822d0fa 	srli	r17,r17,3
    a8f4:	4004977a 	slli	r2,r8,29
    a8f8:	4014d0fa 	srli	r10,r8,3
    a8fc:	9007883a 	mov	r3,r18
    a900:	8884b03a 	or	r2,r17,r2
    a904:	1901ffe0 	cmpeqi	r4,r3,2047
    a908:	2000191e 	bne	r4,zero,a970 <__adddf3+0x374>
    a90c:	02000434 	movhi	r8,16
    a910:	423fffc4 	addi	r8,r8,-1
    a914:	5210703a 	and	r8,r10,r8
    a918:	18c1ffcc 	andi	r3,r3,2047
    a91c:	003f9d06 	br	a794 <__adddf3+0x198>
    a920:	4b62b03a 	or	r17,r9,r13
    a924:	8822c03a 	cmpne	r17,r17,zero
    a928:	8ba3883a 	add	r17,r17,r14
    a92c:	8b91803a 	cmpltu	r8,r17,r14
    a930:	4291883a 	add	r8,r8,r10
    a934:	4080202c 	andhi	r2,r8,128
    a938:	103feb26 	beq	r2,zero,a8e8 <__adddf3+0x2ec>
    a93c:	94800044 	addi	r18,r18,1
    a940:	9081ffe0 	cmpeqi	r2,r18,2047
    a944:	10007426 	beq	r2,zero,ab18 <__adddf3+0x51c>
    a948:	00c1ffc4 	movi	r3,2047
    a94c:	0011883a 	mov	r8,zero
    a950:	0005883a 	mov	r2,zero
    a954:	003f8f06 	br	a794 <__adddf3+0x198>
    a958:	500a977a 	slli	r5,r10,29
    a95c:	00c80034 	movhi	r3,8192
    a960:	18ffffc4 	addi	r3,r3,-1
    a964:	5014d0fa 	srli	r10,r10,3
    a968:	20c4703a 	and	r2,r4,r3
    a96c:	1144b03a 	or	r2,r2,r5
    a970:	1286b03a 	or	r3,r2,r10
    a974:	18015926 	beq	r3,zero,aedc <__adddf3+0x8e0>
    a978:	00c00434 	movhi	r3,16
    a97c:	18ffffc4 	addi	r3,r3,-1
    a980:	52000234 	orhi	r8,r10,8
    a984:	40d0703a 	and	r8,r8,r3
    a988:	00c1ffc4 	movi	r3,2047
    a98c:	003f8106 	br	a794 <__adddf3+0x198>
    a990:	8809883a 	mov	r4,r17
    a994:	000cd940 	call	cd94 <__clzsi2>
    a998:	10c00604 	addi	r3,r2,24
    a99c:	19000808 	cmpgei	r4,r3,32
    a9a0:	203f5026 	beq	r4,zero,a6e4 <__adddf3+0xe8>
    a9a4:	123ffe04 	addi	r8,r2,-8
    a9a8:	8a10983a 	sll	r8,r17,r8
    a9ac:	0023883a 	mov	r17,zero
    a9b0:	1cbf530e 	bge	r3,r18,a700 <__adddf3+0x104>
    a9b4:	00bfe034 	movhi	r2,65408
    a9b8:	10bfffc4 	addi	r2,r2,-1
    a9bc:	90e5c83a 	sub	r18,r18,r3
    a9c0:	4090703a 	and	r8,r8,r2
    a9c4:	003f5c06 	br	a738 <__adddf3+0x13c>
    a9c8:	18002626 	beq	r3,zero,aa64 <__adddf3+0x468>
    a9cc:	1487c83a 	sub	r3,r2,r18
    a9d0:	90006e1e 	bne	r18,zero,ab8c <__adddf3+0x590>
    a9d4:	5388b03a 	or	r4,r10,r14
    a9d8:	2000fd26 	beq	r4,zero,add0 <__adddf3+0x7d4>
    a9dc:	193fffc4 	addi	r4,r3,-1
    a9e0:	20013626 	beq	r4,zero,aebc <__adddf3+0x8c0>
    a9e4:	18c1ffd8 	cmpnei	r3,r3,2047
    a9e8:	1800b426 	beq	r3,zero,acbc <__adddf3+0x6c0>
    a9ec:	2007883a 	mov	r3,r4
    a9f0:	19000e48 	cmpgei	r4,r3,57
    a9f4:	2000b81e 	bne	r4,zero,acd8 <__adddf3+0x6dc>
    a9f8:	19000808 	cmpgei	r4,r3,32
    a9fc:	2001241e 	bne	r4,zero,ae90 <__adddf3+0x894>
    aa00:	01000804 	movi	r4,32
    aa04:	20c9c83a 	sub	r4,r4,r3
    aa08:	5122983a 	sll	r17,r10,r4
    aa0c:	70cad83a 	srl	r5,r14,r3
    aa10:	7108983a 	sll	r4,r14,r4
    aa14:	50d4d83a 	srl	r10,r10,r3
    aa18:	8962b03a 	or	r17,r17,r5
    aa1c:	2008c03a 	cmpne	r4,r4,zero
    aa20:	8922b03a 	or	r17,r17,r4
    aa24:	4a93883a 	add	r9,r9,r10
    aa28:	8b63883a 	add	r17,r17,r13
    aa2c:	8b51803a 	cmpltu	r8,r17,r13
    aa30:	4251883a 	add	r8,r8,r9
    aa34:	1025883a 	mov	r18,r2
    aa38:	003fbe06 	br	a934 <__adddf3+0x338>
    aa3c:	4b62b03a 	or	r17,r9,r13
    aa40:	8822c03a 	cmpne	r17,r17,zero
    aa44:	003f1b06 	br	a6b4 <__adddf3+0xb8>
    aa48:	500c977a 	slli	r6,r10,29
    aa4c:	01480034 	movhi	r5,8192
    aa50:	297fffc4 	addi	r5,r5,-1
    aa54:	2144703a 	and	r2,r4,r5
    aa58:	5014d0fa 	srli	r10,r10,3
    aa5c:	3084b03a 	or	r2,r6,r2
    aa60:	003fa806 	br	a904 <__adddf3+0x308>
    aa64:	90800044 	addi	r2,r18,1
    aa68:	1141ff8c 	andi	r5,r2,2046
    aa6c:	2800561e 	bne	r5,zero,abc8 <__adddf3+0x5cc>
    aa70:	5384b03a 	or	r2,r10,r14
    aa74:	9000a61e 	bne	r18,zero,ad10 <__adddf3+0x714>
    aa78:	1000ee26 	beq	r2,zero,ae34 <__adddf3+0x838>
    aa7c:	4b44b03a 	or	r2,r9,r13
    aa80:	1000f31e 	bne	r2,zero,ae50 <__adddf3+0x854>
    aa84:	5004977a 	slli	r2,r10,29
    aa88:	01480034 	movhi	r5,8192
    aa8c:	297fffc4 	addi	r5,r5,-1
    aa90:	2148703a 	and	r4,r4,r5
    aa94:	5014d0fa 	srli	r10,r10,3
    aa98:	1104b03a 	or	r2,r2,r4
    aa9c:	003f9b06 	br	a90c <__adddf3+0x310>
    aaa0:	1101ffd8 	cmpnei	r4,r2,2047
    aaa4:	20007d26 	beq	r4,zero,ac9c <__adddf3+0x6a0>
    aaa8:	52802034 	orhi	r10,r10,128
    aaac:	19000e48 	cmpgei	r4,r3,57
    aab0:	20002e1e 	bne	r4,zero,ab6c <__adddf3+0x570>
    aab4:	19000808 	cmpgei	r4,r3,32
    aab8:	20008a1e 	bne	r4,zero,ace4 <__adddf3+0x6e8>
    aabc:	01000804 	movi	r4,32
    aac0:	20c9c83a 	sub	r4,r4,r3
    aac4:	5122983a 	sll	r17,r10,r4
    aac8:	70cad83a 	srl	r5,r14,r3
    aacc:	711c983a 	sll	r14,r14,r4
    aad0:	50d4d83a 	srl	r10,r10,r3
    aad4:	8962b03a 	or	r17,r17,r5
    aad8:	701cc03a 	cmpne	r14,r14,zero
    aadc:	8ba2b03a 	or	r17,r17,r14
    aae0:	4a93c83a 	sub	r9,r9,r10
    aae4:	00002306 	br	ab74 <__adddf3+0x578>
    aae8:	7363c83a 	sub	r17,r14,r13
    aaec:	5267c83a 	sub	r19,r10,r9
    aaf0:	7451803a 	cmpltu	r8,r14,r17
    aaf4:	9a27c83a 	sub	r19,r19,r8
    aaf8:	9880202c 	andhi	r2,r19,128
    aafc:	10003e1e 	bne	r2,zero,abf8 <__adddf3+0x5fc>
    ab00:	8cc4b03a 	or	r2,r17,r19
    ab04:	103ef31e 	bne	r2,zero,a6d4 <__adddf3+0xd8>
    ab08:	0015883a 	mov	r10,zero
    ab0c:	0021883a 	mov	r16,zero
    ab10:	003f7e06 	br	a90c <__adddf3+0x310>
    ab14:	04800084 	movi	r18,2
    ab18:	00bfe034 	movhi	r2,65408
    ab1c:	10bfffc4 	addi	r2,r2,-1
    ab20:	8806d07a 	srli	r3,r17,1
    ab24:	4090703a 	and	r8,r8,r2
    ab28:	400497fa 	slli	r2,r8,31
    ab2c:	8c40004c 	andi	r17,r17,1
    ab30:	1c62b03a 	or	r17,r3,r17
    ab34:	4010d07a 	srli	r8,r8,1
    ab38:	1462b03a 	or	r17,r2,r17
    ab3c:	003efe06 	br	a738 <__adddf3+0x13c>
    ab40:	1c7ff804 	addi	r17,r3,-32
    ab44:	19000820 	cmpeqi	r4,r3,32
    ab48:	4c44d83a 	srl	r2,r9,r17
    ab4c:	2000041e 	bne	r4,zero,ab60 <__adddf3+0x564>
    ab50:	01001004 	movi	r4,64
    ab54:	20c7c83a 	sub	r3,r4,r3
    ab58:	48d2983a 	sll	r9,r9,r3
    ab5c:	6a5ab03a 	or	r13,r13,r9
    ab60:	6822c03a 	cmpne	r17,r13,zero
    ab64:	88a2b03a 	or	r17,r17,r2
    ab68:	003ed206 	br	a6b4 <__adddf3+0xb8>
    ab6c:	5394b03a 	or	r10,r10,r14
    ab70:	5022c03a 	cmpne	r17,r10,zero
    ab74:	6c63c83a 	sub	r17,r13,r17
    ab78:	6c51803a 	cmpltu	r8,r13,r17
    ab7c:	4a11c83a 	sub	r8,r9,r8
    ab80:	3821883a 	mov	r16,r7
    ab84:	1025883a 	mov	r18,r2
    ab88:	003ecd06 	br	a6c0 <__adddf3+0xc4>
    ab8c:	1101ffd8 	cmpnei	r4,r2,2047
    ab90:	20004a26 	beq	r4,zero,acbc <__adddf3+0x6c0>
    ab94:	52802034 	orhi	r10,r10,128
    ab98:	003f9506 	br	a9f0 <__adddf3+0x3f4>
    ab9c:	00800804 	movi	r2,32
    aba0:	10c5c83a 	sub	r2,r2,r3
    aba4:	68c8d83a 	srl	r4,r13,r3
    aba8:	48a2983a 	sll	r17,r9,r2
    abac:	689a983a 	sll	r13,r13,r2
    abb0:	48c6d83a 	srl	r3,r9,r3
    abb4:	8922b03a 	or	r17,r17,r4
    abb8:	681ac03a 	cmpne	r13,r13,zero
    abbc:	8b62b03a 	or	r17,r17,r13
    abc0:	50d5883a 	add	r10,r10,r3
    abc4:	003f5806 	br	a928 <__adddf3+0x32c>
    abc8:	10c1ffe0 	cmpeqi	r3,r2,2047
    abcc:	183f5e1e 	bne	r3,zero,a948 <__adddf3+0x34c>
    abd0:	7351883a 	add	r8,r14,r13
    abd4:	4387803a 	cmpltu	r3,r8,r14
    abd8:	5255883a 	add	r10,r10,r9
    abdc:	50c7883a 	add	r3,r10,r3
    abe0:	401ad07a 	srli	r13,r8,1
    abe4:	182297fa 	slli	r17,r3,31
    abe8:	1810d07a 	srli	r8,r3,1
    abec:	1025883a 	mov	r18,r2
    abf0:	8b62b03a 	or	r17,r17,r13
    abf4:	003f3c06 	br	a8e8 <__adddf3+0x2ec>
    abf8:	6ba3c83a 	sub	r17,r13,r14
    abfc:	4a93c83a 	sub	r9,r9,r10
    ac00:	6c51803a 	cmpltu	r8,r13,r17
    ac04:	4a27c83a 	sub	r19,r9,r8
    ac08:	3821883a 	mov	r16,r7
    ac0c:	003eb106 	br	a6d4 <__adddf3+0xd8>
    ac10:	480a977a 	slli	r5,r9,29
    ac14:	01080034 	movhi	r4,8192
    ac18:	213fffc4 	addi	r4,r4,-1
    ac1c:	3104703a 	and	r2,r6,r4
    ac20:	4814d0fa 	srli	r10,r9,3
    ac24:	1144b03a 	or	r2,r2,r5
    ac28:	3821883a 	mov	r16,r7
    ac2c:	003f3506 	br	a904 <__adddf3+0x308>
    ac30:	28006e1e 	bne	r5,zero,adec <__adddf3+0x7f0>
    ac34:	1000191e 	bne	r2,zero,ac9c <__adddf3+0x6a0>
    ac38:	0021883a 	mov	r16,zero
    ac3c:	4015883a 	mov	r10,r8
    ac40:	00bfffc4 	movi	r2,-1
    ac44:	003f4c06 	br	a978 <__adddf3+0x37c>
    ac48:	7363883a 	add	r17,r14,r13
    ac4c:	5255883a 	add	r10,r10,r9
    ac50:	8b91803a 	cmpltu	r8,r17,r14
    ac54:	5211883a 	add	r8,r10,r8
    ac58:	4080202c 	andhi	r2,r8,128
    ac5c:	103fad1e 	bne	r2,zero,ab14 <__adddf3+0x518>
    ac60:	04800044 	movi	r18,1
    ac64:	003f2006 	br	a8e8 <__adddf3+0x2ec>
    ac68:	7363c83a 	sub	r17,r14,r13
    ac6c:	5255c83a 	sub	r10,r10,r9
    ac70:	7451803a 	cmpltu	r8,r14,r17
    ac74:	5211c83a 	sub	r8,r10,r8
    ac78:	04800044 	movi	r18,1
    ac7c:	003e9006 	br	a6c0 <__adddf3+0xc4>
    ac80:	5004977a 	slli	r2,r10,29
    ac84:	00c80034 	movhi	r3,8192
    ac88:	18ffffc4 	addi	r3,r3,-1
    ac8c:	20c8703a 	and	r4,r4,r3
    ac90:	5014d0fa 	srli	r10,r10,3
    ac94:	1104b03a 	or	r2,r2,r4
    ac98:	003f3506 	br	a970 <__adddf3+0x374>
    ac9c:	4806977a 	slli	r3,r9,29
    aca0:	00880034 	movhi	r2,8192
    aca4:	10bfffc4 	addi	r2,r2,-1
    aca8:	3084703a 	and	r2,r6,r2
    acac:	4814d0fa 	srli	r10,r9,3
    acb0:	10c4b03a 	or	r2,r2,r3
    acb4:	3821883a 	mov	r16,r7
    acb8:	003f2d06 	br	a970 <__adddf3+0x374>
    acbc:	4804977a 	slli	r2,r9,29
    acc0:	00c80034 	movhi	r3,8192
    acc4:	18ffffc4 	addi	r3,r3,-1
    acc8:	30cc703a 	and	r6,r6,r3
    accc:	4814d0fa 	srli	r10,r9,3
    acd0:	1184b03a 	or	r2,r2,r6
    acd4:	003f2606 	br	a970 <__adddf3+0x374>
    acd8:	5394b03a 	or	r10,r10,r14
    acdc:	5022c03a 	cmpne	r17,r10,zero
    ace0:	003f5106 	br	aa28 <__adddf3+0x42c>
    ace4:	1c7ff804 	addi	r17,r3,-32
    ace8:	19400820 	cmpeqi	r5,r3,32
    acec:	5448d83a 	srl	r4,r10,r17
    acf0:	2800041e 	bne	r5,zero,ad04 <__adddf3+0x708>
    acf4:	01401004 	movi	r5,64
    acf8:	28c7c83a 	sub	r3,r5,r3
    acfc:	50d4983a 	sll	r10,r10,r3
    ad00:	729cb03a 	or	r14,r14,r10
    ad04:	7022c03a 	cmpne	r17,r14,zero
    ad08:	8922b03a 	or	r17,r17,r4
    ad0c:	003f9906 	br	ab74 <__adddf3+0x578>
    ad10:	103fea26 	beq	r2,zero,acbc <__adddf3+0x6c0>
    ad14:	4b50b03a 	or	r8,r9,r13
    ad18:	500a977a 	slli	r5,r10,29
    ad1c:	5014d0fa 	srli	r10,r10,3
    ad20:	40005626 	beq	r8,zero,ae7c <__adddf3+0x880>
    ad24:	00c80034 	movhi	r3,8192
    ad28:	18ffffc4 	addi	r3,r3,-1
    ad2c:	20c4703a 	and	r2,r4,r3
    ad30:	5100022c 	andhi	r4,r10,8
    ad34:	1144b03a 	or	r2,r2,r5
    ad38:	203f0d26 	beq	r4,zero,a970 <__adddf3+0x374>
    ad3c:	4808d0fa 	srli	r4,r9,3
    ad40:	2140022c 	andhi	r5,r4,8
    ad44:	283f0a1e 	bne	r5,zero,a970 <__adddf3+0x374>
    ad48:	4804977a 	slli	r2,r9,29
    ad4c:	30cc703a 	and	r6,r6,r3
    ad50:	3821883a 	mov	r16,r7
    ad54:	3084b03a 	or	r2,r6,r2
    ad58:	2015883a 	mov	r10,r4
    ad5c:	003f0406 	br	a970 <__adddf3+0x374>
    ad60:	6ba3c83a 	sub	r17,r13,r14
    ad64:	4a95c83a 	sub	r10,r9,r10
    ad68:	6c51803a 	cmpltu	r8,r13,r17
    ad6c:	5211c83a 	sub	r8,r10,r8
    ad70:	3821883a 	mov	r16,r7
    ad74:	04800044 	movi	r18,1
    ad78:	003e5106 	br	a6c0 <__adddf3+0xc4>
    ad7c:	103f6226 	beq	r2,zero,ab08 <__adddf3+0x50c>
    ad80:	4808977a 	slli	r4,r9,29
    ad84:	00880034 	movhi	r2,8192
    ad88:	10bfffc4 	addi	r2,r2,-1
    ad8c:	3084703a 	and	r2,r6,r2
    ad90:	4814d0fa 	srli	r10,r9,3
    ad94:	1104b03a 	or	r2,r2,r4
    ad98:	3821883a 	mov	r16,r7
    ad9c:	003edb06 	br	a90c <__adddf3+0x310>
    ada0:	7363c83a 	sub	r17,r14,r13
    ada4:	7445803a 	cmpltu	r2,r14,r17
    ada8:	5251c83a 	sub	r8,r10,r9
    adac:	4091c83a 	sub	r8,r8,r2
    adb0:	4080202c 	andhi	r2,r8,128
    adb4:	10004626 	beq	r2,zero,aed0 <__adddf3+0x8d4>
    adb8:	6ba3c83a 	sub	r17,r13,r14
    adbc:	4a95c83a 	sub	r10,r9,r10
    adc0:	6c51803a 	cmpltu	r8,r13,r17
    adc4:	5211c83a 	sub	r8,r10,r8
    adc8:	3821883a 	mov	r16,r7
    adcc:	003e5a06 	br	a738 <__adddf3+0x13c>
    add0:	4804977a 	slli	r2,r9,29
    add4:	01080034 	movhi	r4,8192
    add8:	213fffc4 	addi	r4,r4,-1
    addc:	310c703a 	and	r6,r6,r4
    ade0:	4814d0fa 	srli	r10,r9,3
    ade4:	1184b03a 	or	r2,r2,r6
    ade8:	003ec606 	br	a904 <__adddf3+0x308>
    adec:	500a977a 	slli	r5,r10,29
    adf0:	5014d0fa 	srli	r10,r10,3
    adf4:	10002126 	beq	r2,zero,ae7c <__adddf3+0x880>
    adf8:	00c80034 	movhi	r3,8192
    adfc:	18ffffc4 	addi	r3,r3,-1
    ae00:	20c4703a 	and	r2,r4,r3
    ae04:	5100022c 	andhi	r4,r10,8
    ae08:	1144b03a 	or	r2,r2,r5
    ae0c:	203ed826 	beq	r4,zero,a970 <__adddf3+0x374>
    ae10:	4808d0fa 	srli	r4,r9,3
    ae14:	2140022c 	andhi	r5,r4,8
    ae18:	283ed51e 	bne	r5,zero,a970 <__adddf3+0x374>
    ae1c:	4812977a 	slli	r9,r9,29
    ae20:	30c4703a 	and	r2,r6,r3
    ae24:	3821883a 	mov	r16,r7
    ae28:	1244b03a 	or	r2,r2,r9
    ae2c:	2015883a 	mov	r10,r4
    ae30:	003ecf06 	br	a970 <__adddf3+0x374>
    ae34:	4804977a 	slli	r2,r9,29
    ae38:	01080034 	movhi	r4,8192
    ae3c:	213fffc4 	addi	r4,r4,-1
    ae40:	310c703a 	and	r6,r6,r4
    ae44:	4814d0fa 	srli	r10,r9,3
    ae48:	1184b03a 	or	r2,r2,r6
    ae4c:	003eaf06 	br	a90c <__adddf3+0x310>
    ae50:	7363883a 	add	r17,r14,r13
    ae54:	5255883a 	add	r10,r10,r9
    ae58:	8b91803a 	cmpltu	r8,r17,r14
    ae5c:	5211883a 	add	r8,r10,r8
    ae60:	4080202c 	andhi	r2,r8,128
    ae64:	103ea026 	beq	r2,zero,a8e8 <__adddf3+0x2ec>
    ae68:	00bfe034 	movhi	r2,65408
    ae6c:	10bfffc4 	addi	r2,r2,-1
    ae70:	4090703a 	and	r8,r8,r2
    ae74:	04800044 	movi	r18,1
    ae78:	003e9b06 	br	a8e8 <__adddf3+0x2ec>
    ae7c:	00880034 	movhi	r2,8192
    ae80:	10bfffc4 	addi	r2,r2,-1
    ae84:	2084703a 	and	r2,r4,r2
    ae88:	1144b03a 	or	r2,r2,r5
    ae8c:	003eb806 	br	a970 <__adddf3+0x374>
    ae90:	193ff804 	addi	r4,r3,-32
    ae94:	19400820 	cmpeqi	r5,r3,32
    ae98:	5108d83a 	srl	r4,r10,r4
    ae9c:	2800041e 	bne	r5,zero,aeb0 <__adddf3+0x8b4>
    aea0:	01401004 	movi	r5,64
    aea4:	28c7c83a 	sub	r3,r5,r3
    aea8:	50d4983a 	sll	r10,r10,r3
    aeac:	729cb03a 	or	r14,r14,r10
    aeb0:	7022c03a 	cmpne	r17,r14,zero
    aeb4:	8922b03a 	or	r17,r17,r4
    aeb8:	003edb06 	br	aa28 <__adddf3+0x42c>
    aebc:	7363883a 	add	r17,r14,r13
    aec0:	5255883a 	add	r10,r10,r9
    aec4:	8b51803a 	cmpltu	r8,r17,r13
    aec8:	5211883a 	add	r8,r10,r8
    aecc:	003f6206 	br	ac58 <__adddf3+0x65c>
    aed0:	8a04b03a 	or	r2,r17,r8
    aed4:	103f0c26 	beq	r2,zero,ab08 <__adddf3+0x50c>
    aed8:	003e8306 	br	a8e8 <__adddf3+0x2ec>
    aedc:	0005883a 	mov	r2,zero
    aee0:	00c1ffc4 	movi	r3,2047
    aee4:	0011883a 	mov	r8,zero
    aee8:	003e2a06 	br	a794 <__adddf3+0x198>

0000aeec <__divdf3>:
    aeec:	2804d53a 	srli	r2,r5,20
    aef0:	defff304 	addi	sp,sp,-52
    aef4:	dc000315 	stw	r16,12(sp)
    aef8:	04000434 	movhi	r16,16
    aefc:	ddc00a15 	stw	r23,40(sp)
    af00:	dd800915 	stw	r22,36(sp)
    af04:	dc800515 	stw	r18,20(sp)
    af08:	843fffc4 	addi	r16,r16,-1
    af0c:	dfc00c15 	stw	ra,48(sp)
    af10:	df000b15 	stw	fp,44(sp)
    af14:	dd400815 	stw	r21,32(sp)
    af18:	dd000715 	stw	r20,28(sp)
    af1c:	dcc00615 	stw	r19,24(sp)
    af20:	dc400415 	stw	r17,16(sp)
    af24:	1081ffcc 	andi	r2,r2,2047
    af28:	282cd7fa 	srli	r22,r5,31
    af2c:	302f883a 	mov	r23,r6
    af30:	2025883a 	mov	r18,r4
    af34:	2c20703a 	and	r16,r5,r16
    af38:	10010d26 	beq	r2,zero,b370 <__divdf3+0x484>
    af3c:	10c1ffe0 	cmpeqi	r3,r2,2047
    af40:	1801201e 	bne	r3,zero,b3c4 <__divdf3+0x4d8>
    af44:	2028d77a 	srli	r20,r4,29
    af48:	800a90fa 	slli	r5,r16,3
    af4c:	202490fa 	slli	r18,r4,3
    af50:	14ff0044 	addi	r19,r2,-1023
    af54:	a14ab03a 	or	r5,r20,r5
    af58:	2d002034 	orhi	r20,r5,128
    af5c:	0021883a 	mov	r16,zero
    af60:	0039883a 	mov	fp,zero
    af64:	3804d53a 	srli	r2,r7,20
    af68:	00c00434 	movhi	r3,16
    af6c:	18ffffc4 	addi	r3,r3,-1
    af70:	1081ffcc 	andi	r2,r2,2047
    af74:	3810d7fa 	srli	r8,r7,31
    af78:	38e2703a 	and	r17,r7,r3
    af7c:	1000e926 	beq	r2,zero,b324 <__divdf3+0x438>
    af80:	10c1ffe0 	cmpeqi	r3,r2,2047
    af84:	1801161e 	bne	r3,zero,b3e0 <__divdf3+0x4f4>
    af88:	880690fa 	slli	r3,r17,3
    af8c:	b822d77a 	srli	r17,r23,29
    af90:	b81290fa 	slli	r9,r23,3
    af94:	10bf0044 	addi	r2,r2,-1023
    af98:	88c6b03a 	or	r3,r17,r3
    af9c:	1c402034 	orhi	r17,r3,128
    afa0:	98a7c83a 	sub	r19,r19,r2
    afa4:	0007883a 	mov	r3,zero
    afa8:	80800428 	cmpgeui	r2,r16,16
    afac:	b22af03a 	xor	r21,r22,r8
    afb0:	1000391e 	bne	r2,zero,b098 <__divdf3+0x1ac>
    afb4:	800490ba 	slli	r2,r16,2
    afb8:	01800074 	movhi	r6,1
    afbc:	118d883a 	add	r6,r2,r6
    afc0:	30abf217 	ldw	r2,-20536(r6)
    afc4:	1000683a 	jmp	r2
    afc8:	0000b098 	cmpnei	zero,zero,706
    afcc:	0000b074 	movhi	zero,705
    afd0:	0000b024 	muli	zero,zero,704
    afd4:	0000b084 	movi	zero,706
    afd8:	0000b024 	muli	zero,zero,704
    afdc:	0000b444 	movi	zero,721
    afe0:	0000b024 	muli	zero,zero,704
    afe4:	0000b084 	movi	zero,706
    afe8:	0000b074 	movhi	zero,705
    afec:	0000b074 	movhi	zero,705
    aff0:	0000b444 	movi	zero,721
    aff4:	0000b084 	movi	zero,706
    aff8:	0000b008 	cmpgei	zero,zero,704
    affc:	0000b008 	cmpgei	zero,zero,704
    b000:	0000b008 	cmpgei	zero,zero,704
    b004:	0000b4d4 	movui	zero,723
    b008:	b02b883a 	mov	r21,r22
    b00c:	e08000a0 	cmpeqi	r2,fp,2
    b010:	1000181e 	bne	r2,zero,b074 <__divdf3+0x188>
    b014:	e08000e0 	cmpeqi	r2,fp,3
    b018:	1001bf1e 	bne	r2,zero,b718 <__divdf3+0x82c>
    b01c:	e0800060 	cmpeqi	r2,fp,1
    b020:	1000ad26 	beq	r2,zero,b2d8 <__divdf3+0x3ec>
    b024:	0007883a 	mov	r3,zero
    b028:	000b883a 	mov	r5,zero
    b02c:	0025883a 	mov	r18,zero
    b030:	1806953a 	slli	r3,r3,20
    b034:	a82a97fa 	slli	r21,r21,31
    b038:	9005883a 	mov	r2,r18
    b03c:	1946b03a 	or	r3,r3,r5
    b040:	1d46b03a 	or	r3,r3,r21
    b044:	dfc00c17 	ldw	ra,48(sp)
    b048:	df000b17 	ldw	fp,44(sp)
    b04c:	ddc00a17 	ldw	r23,40(sp)
    b050:	dd800917 	ldw	r22,36(sp)
    b054:	dd400817 	ldw	r21,32(sp)
    b058:	dd000717 	ldw	r20,28(sp)
    b05c:	dcc00617 	ldw	r19,24(sp)
    b060:	dc800517 	ldw	r18,20(sp)
    b064:	dc400417 	ldw	r17,16(sp)
    b068:	dc000317 	ldw	r16,12(sp)
    b06c:	dec00d04 	addi	sp,sp,52
    b070:	f800283a 	ret
    b074:	00c1ffc4 	movi	r3,2047
    b078:	000b883a 	mov	r5,zero
    b07c:	0025883a 	mov	r18,zero
    b080:	003feb06 	br	b030 <__divdf3+0x144>
    b084:	402b883a 	mov	r21,r8
    b088:	8829883a 	mov	r20,r17
    b08c:	4825883a 	mov	r18,r9
    b090:	1839883a 	mov	fp,r3
    b094:	003fdd06 	br	b00c <__divdf3+0x120>
    b098:	8d012836 	bltu	r17,r20,b53c <__divdf3+0x650>
    b09c:	8d012626 	beq	r17,r20,b538 <__divdf3+0x64c>
    b0a0:	9cffffc4 	addi	r19,r19,-1
    b0a4:	0021883a 	mov	r16,zero
    b0a8:	8806923a 	slli	r3,r17,8
    b0ac:	480cd63a 	srli	r6,r9,24
    b0b0:	4804923a 	slli	r2,r9,8
    b0b4:	1838d43a 	srli	fp,r3,16
    b0b8:	a009883a 	mov	r4,r20
    b0bc:	30ecb03a 	or	r22,r6,r3
    b0c0:	e00b883a 	mov	r5,fp
    b0c4:	d8800015 	stw	r2,0(sp)
    b0c8:	00094d00 	call	94d0 <__udivsi3>
    b0cc:	a009883a 	mov	r4,r20
    b0d0:	e00b883a 	mov	r5,fp
    b0d4:	d8800115 	stw	r2,4(sp)
    b0d8:	00095340 	call	9534 <__umodsi3>
    b0dc:	d8c00117 	ldw	r3,4(sp)
    b0e0:	1004943a 	slli	r2,r2,16
    b0e4:	9008d43a 	srli	r4,r18,16
    b0e8:	b47fffcc 	andi	r17,r22,65535
    b0ec:	88ef383a 	mul	r23,r17,r3
    b0f0:	2088b03a 	or	r4,r4,r2
    b0f4:	25c0042e 	bgeu	r4,r23,b108 <__divdf3+0x21c>
    b0f8:	2589883a 	add	r4,r4,r22
    b0fc:	18bfffc4 	addi	r2,r3,-1
    b100:	2581412e 	bgeu	r4,r22,b608 <__divdf3+0x71c>
    b104:	1007883a 	mov	r3,r2
    b108:	25efc83a 	sub	r23,r4,r23
    b10c:	e00b883a 	mov	r5,fp
    b110:	b809883a 	mov	r4,r23
    b114:	d8c00115 	stw	r3,4(sp)
    b118:	00094d00 	call	94d0 <__udivsi3>
    b11c:	b809883a 	mov	r4,r23
    b120:	e00b883a 	mov	r5,fp
    b124:	1029883a 	mov	r20,r2
    b128:	00095340 	call	9534 <__umodsi3>
    b12c:	1008943a 	slli	r4,r2,16
    b130:	8d13383a 	mul	r9,r17,r20
    b134:	94bfffcc 	andi	r18,r18,65535
    b138:	9108b03a 	or	r4,r18,r4
    b13c:	d8c00117 	ldw	r3,4(sp)
    b140:	2240042e 	bgeu	r4,r9,b154 <__divdf3+0x268>
    b144:	2589883a 	add	r4,r4,r22
    b148:	a0bfffc4 	addi	r2,r20,-1
    b14c:	25812a2e 	bgeu	r4,r22,b5f8 <__divdf3+0x70c>
    b150:	1029883a 	mov	r20,r2
    b154:	180a943a 	slli	r5,r3,16
    b158:	d8800017 	ldw	r2,0(sp)
    b15c:	2249c83a 	sub	r4,r4,r9
    b160:	2d28b03a 	or	r20,r5,r20
    b164:	100ed43a 	srli	r7,r2,16
    b168:	123fffcc 	andi	r8,r2,65535
    b16c:	a00ad43a 	srli	r5,r20,16
    b170:	a0bfffcc 	andi	r2,r20,65535
    b174:	122f383a 	mul	r23,r2,r8
    b178:	2a15383a 	mul	r10,r5,r8
    b17c:	3887383a 	mul	r3,r7,r2
    b180:	b804d43a 	srli	r2,r23,16
    b184:	29cb383a 	mul	r5,r5,r7
    b188:	1a87883a 	add	r3,r3,r10
    b18c:	10c5883a 	add	r2,r2,r3
    b190:	1280022e 	bgeu	r2,r10,b19c <__divdf3+0x2b0>
    b194:	00c00074 	movhi	r3,1
    b198:	28cb883a 	add	r5,r5,r3
    b19c:	1006d43a 	srli	r3,r2,16
    b1a0:	1004943a 	slli	r2,r2,16
    b1a4:	bdffffcc 	andi	r23,r23,65535
    b1a8:	1947883a 	add	r3,r3,r5
    b1ac:	15ef883a 	add	r23,r2,r23
    b1b0:	20c00236 	bltu	r4,r3,b1bc <__divdf3+0x2d0>
    b1b4:	20c00b1e 	bne	r4,r3,b1e4 <__divdf3+0x2f8>
    b1b8:	85c00a2e 	bgeu	r16,r23,b1e4 <__divdf3+0x2f8>
    b1bc:	d8800017 	ldw	r2,0(sp)
    b1c0:	80a1883a 	add	r16,r16,r2
    b1c4:	8085803a 	cmpltu	r2,r16,r2
    b1c8:	1585883a 	add	r2,r2,r22
    b1cc:	2089883a 	add	r4,r4,r2
    b1d0:	a0bfffc4 	addi	r2,r20,-1
    b1d4:	b101042e 	bgeu	r22,r4,b5e8 <__divdf3+0x6fc>
    b1d8:	20c13836 	bltu	r4,r3,b6bc <__divdf3+0x7d0>
    b1dc:	19013626 	beq	r3,r4,b6b8 <__divdf3+0x7cc>
    b1e0:	1029883a 	mov	r20,r2
    b1e4:	85efc83a 	sub	r23,r16,r23
    b1e8:	20c9c83a 	sub	r4,r4,r3
    b1ec:	85e1803a 	cmpltu	r16,r16,r23
    b1f0:	2421c83a 	sub	r16,r4,r16
    b1f4:	b4011e26 	beq	r22,r16,b670 <__divdf3+0x784>
    b1f8:	8009883a 	mov	r4,r16
    b1fc:	e00b883a 	mov	r5,fp
    b200:	da000215 	stw	r8,8(sp)
    b204:	d9c00115 	stw	r7,4(sp)
    b208:	00094d00 	call	94d0 <__udivsi3>
    b20c:	8009883a 	mov	r4,r16
    b210:	e00b883a 	mov	r5,fp
    b214:	1025883a 	mov	r18,r2
    b218:	00095340 	call	9534 <__umodsi3>
    b21c:	1004943a 	slli	r2,r2,16
    b220:	b808d43a 	srli	r4,r23,16
    b224:	8ca1383a 	mul	r16,r17,r18
    b228:	d9c00117 	ldw	r7,4(sp)
    b22c:	2088b03a 	or	r4,r4,r2
    b230:	da000217 	ldw	r8,8(sp)
    b234:	2400e536 	bltu	r4,r16,b5cc <__divdf3+0x6e0>
    b238:	2421c83a 	sub	r16,r4,r16
    b23c:	8009883a 	mov	r4,r16
    b240:	e00b883a 	mov	r5,fp
    b244:	da000215 	stw	r8,8(sp)
    b248:	d9c00115 	stw	r7,4(sp)
    b24c:	00094d00 	call	94d0 <__udivsi3>
    b250:	8009883a 	mov	r4,r16
    b254:	e00b883a 	mov	r5,fp
    b258:	1021883a 	mov	r16,r2
    b25c:	00095340 	call	9534 <__umodsi3>
    b260:	1004943a 	slli	r2,r2,16
    b264:	8c23383a 	mul	r17,r17,r16
    b268:	bdffffcc 	andi	r23,r23,65535
    b26c:	b8aeb03a 	or	r23,r23,r2
    b270:	d9c00117 	ldw	r7,4(sp)
    b274:	da000217 	ldw	r8,8(sp)
    b278:	bc40cd36 	bltu	r23,r17,b5b0 <__divdf3+0x6c4>
    b27c:	9008943a 	slli	r4,r18,16
    b280:	bc63c83a 	sub	r17,r23,r17
    b284:	2424b03a 	or	r18,r4,r16
    b288:	900ad43a 	srli	r5,r18,16
    b28c:	90bfffcc 	andi	r2,r18,65535
    b290:	4089383a 	mul	r4,r8,r2
    b294:	3885383a 	mul	r2,r7,r2
    b298:	2a11383a 	mul	r8,r5,r8
    b29c:	2006d43a 	srli	r3,r4,16
    b2a0:	394f383a 	mul	r7,r7,r5
    b2a4:	1205883a 	add	r2,r2,r8
    b2a8:	1887883a 	add	r3,r3,r2
    b2ac:	1a00022e 	bgeu	r3,r8,b2b8 <__divdf3+0x3cc>
    b2b0:	00800074 	movhi	r2,1
    b2b4:	388f883a 	add	r7,r7,r2
    b2b8:	1804d43a 	srli	r2,r3,16
    b2bc:	1806943a 	slli	r3,r3,16
    b2c0:	213fffcc 	andi	r4,r4,65535
    b2c4:	11cf883a 	add	r7,r2,r7
    b2c8:	1907883a 	add	r3,r3,r4
    b2cc:	89c09336 	bltu	r17,r7,b51c <__divdf3+0x630>
    b2d0:	89c09126 	beq	r17,r7,b518 <__divdf3+0x62c>
    b2d4:	94800054 	ori	r18,r18,1
    b2d8:	9980ffc4 	addi	r6,r19,1023
    b2dc:	0180600e 	bge	zero,r6,b460 <__divdf3+0x574>
    b2e0:	908001cc 	andi	r2,r18,7
    b2e4:	1000e81e 	bne	r2,zero,b688 <__divdf3+0x79c>
    b2e8:	900ed0fa 	srli	r7,r18,3
    b2ec:	a080402c 	andhi	r2,r20,256
    b2f0:	10000426 	beq	r2,zero,b304 <__divdf3+0x418>
    b2f4:	00bfc034 	movhi	r2,65280
    b2f8:	10bfffc4 	addi	r2,r2,-1
    b2fc:	a0a8703a 	and	r20,r20,r2
    b300:	99810004 	addi	r6,r19,1024
    b304:	3081ffc8 	cmpgei	r2,r6,2047
    b308:	103f5a1e 	bne	r2,zero,b074 <__divdf3+0x188>
    b30c:	a008977a 	slli	r4,r20,29
    b310:	a00a927a 	slli	r5,r20,9
    b314:	30c1ffcc 	andi	r3,r6,2047
    b318:	21e4b03a 	or	r18,r4,r7
    b31c:	280ad33a 	srli	r5,r5,12
    b320:	003f4306 	br	b030 <__divdf3+0x144>
    b324:	8dd2b03a 	or	r9,r17,r23
    b328:	48004226 	beq	r9,zero,b434 <__divdf3+0x548>
    b32c:	da000015 	stw	r8,0(sp)
    b330:	88009326 	beq	r17,zero,b580 <__divdf3+0x694>
    b334:	8809883a 	mov	r4,r17
    b338:	000cd940 	call	cd94 <__clzsi2>
    b33c:	da000017 	ldw	r8,0(sp)
    b340:	117ffd44 	addi	r5,r2,-11
    b344:	01000744 	movi	r4,29
    b348:	127ffe04 	addi	r9,r2,-8
    b34c:	2149c83a 	sub	r4,r4,r5
    b350:	8a46983a 	sll	r3,r17,r9
    b354:	b908d83a 	srl	r4,r23,r4
    b358:	ba52983a 	sll	r9,r23,r9
    b35c:	20e2b03a 	or	r17,r4,r3
    b360:	14c5883a 	add	r2,r2,r19
    b364:	14c0fcc4 	addi	r19,r2,1011
    b368:	0007883a 	mov	r3,zero
    b36c:	003f0e06 	br	afa8 <__divdf3+0xbc>
    b370:	8128b03a 	or	r20,r16,r4
    b374:	2023883a 	mov	r17,r4
    b378:	a0002926 	beq	r20,zero,b420 <__divdf3+0x534>
    b37c:	d9c00015 	stw	r7,0(sp)
    b380:	80007426 	beq	r16,zero,b554 <__divdf3+0x668>
    b384:	8009883a 	mov	r4,r16
    b388:	000cd940 	call	cd94 <__clzsi2>
    b38c:	d9c00017 	ldw	r7,0(sp)
    b390:	10fffd44 	addi	r3,r2,-11
    b394:	05000744 	movi	r20,29
    b398:	113ffe04 	addi	r4,r2,-8
    b39c:	a0e9c83a 	sub	r20,r20,r3
    b3a0:	810a983a 	sll	r5,r16,r4
    b3a4:	8d28d83a 	srl	r20,r17,r20
    b3a8:	8924983a 	sll	r18,r17,r4
    b3ac:	a168b03a 	or	r20,r20,r5
    b3b0:	04ff0344 	movi	r19,-1011
    b3b4:	98a7c83a 	sub	r19,r19,r2
    b3b8:	0021883a 	mov	r16,zero
    b3bc:	0039883a 	mov	fp,zero
    b3c0:	003ee806 	br	af64 <__divdf3+0x78>
    b3c4:	8128b03a 	or	r20,r16,r4
    b3c8:	a000101e 	bne	r20,zero,b40c <__divdf3+0x520>
    b3cc:	0025883a 	mov	r18,zero
    b3d0:	04000204 	movi	r16,8
    b3d4:	04c1ffc4 	movi	r19,2047
    b3d8:	07000084 	movi	fp,2
    b3dc:	003ee106 	br	af64 <__divdf3+0x78>
    b3e0:	8dd2b03a 	or	r9,r17,r23
    b3e4:	9cfe0044 	addi	r19,r19,-2047
    b3e8:	4800041e 	bne	r9,zero,b3fc <__divdf3+0x510>
    b3ec:	84000094 	ori	r16,r16,2
    b3f0:	0023883a 	mov	r17,zero
    b3f4:	00c00084 	movi	r3,2
    b3f8:	003eeb06 	br	afa8 <__divdf3+0xbc>
    b3fc:	840000d4 	ori	r16,r16,3
    b400:	b813883a 	mov	r9,r23
    b404:	00c000c4 	movi	r3,3
    b408:	003ee706 	br	afa8 <__divdf3+0xbc>
    b40c:	8029883a 	mov	r20,r16
    b410:	04c1ffc4 	movi	r19,2047
    b414:	04000304 	movi	r16,12
    b418:	070000c4 	movi	fp,3
    b41c:	003ed106 	br	af64 <__divdf3+0x78>
    b420:	0025883a 	mov	r18,zero
    b424:	04000104 	movi	r16,4
    b428:	0027883a 	mov	r19,zero
    b42c:	07000044 	movi	fp,1
    b430:	003ecc06 	br	af64 <__divdf3+0x78>
    b434:	84000054 	ori	r16,r16,1
    b438:	0023883a 	mov	r17,zero
    b43c:	00c00044 	movi	r3,1
    b440:	003ed906 	br	afa8 <__divdf3+0xbc>
    b444:	01400434 	movhi	r5,16
    b448:	002b883a 	mov	r21,zero
    b44c:	297fffc4 	addi	r5,r5,-1
    b450:	04bfffc4 	movi	r18,-1
    b454:	00c1ffc4 	movi	r3,2047
    b458:	003ef506 	br	b030 <__divdf3+0x144>
    b45c:	04bfffc4 	movi	r18,-1
    b460:	01400044 	movi	r5,1
    b464:	298bc83a 	sub	r5,r5,r6
    b468:	28800e48 	cmpgei	r2,r5,57
    b46c:	103eed1e 	bne	r2,zero,b024 <__divdf3+0x138>
    b470:	28800808 	cmpgei	r2,r5,32
    b474:	1000681e 	bne	r2,zero,b618 <__divdf3+0x72c>
    b478:	98810784 	addi	r2,r19,1054
    b47c:	a086983a 	sll	r3,r20,r2
    b480:	9148d83a 	srl	r4,r18,r5
    b484:	9084983a 	sll	r2,r18,r2
    b488:	a14ad83a 	srl	r5,r20,r5
    b48c:	1924b03a 	or	r18,r3,r4
    b490:	1004c03a 	cmpne	r2,r2,zero
    b494:	90a4b03a 	or	r18,r18,r2
    b498:	908001cc 	andi	r2,r18,7
    b49c:	10000726 	beq	r2,zero,b4bc <__divdf3+0x5d0>
    b4a0:	908003cc 	andi	r2,r18,15
    b4a4:	10800120 	cmpeqi	r2,r2,4
    b4a8:	1000041e 	bne	r2,zero,b4bc <__divdf3+0x5d0>
    b4ac:	90800104 	addi	r2,r18,4
    b4b0:	14a5803a 	cmpltu	r18,r2,r18
    b4b4:	2c8b883a 	add	r5,r5,r18
    b4b8:	1025883a 	mov	r18,r2
    b4bc:	2880202c 	andhi	r2,r5,128
    b4c0:	10009126 	beq	r2,zero,b708 <__divdf3+0x81c>
    b4c4:	00c00044 	movi	r3,1
    b4c8:	000b883a 	mov	r5,zero
    b4cc:	0025883a 	mov	r18,zero
    b4d0:	003ed706 	br	b030 <__divdf3+0x144>
    b4d4:	a080022c 	andhi	r2,r20,8
    b4d8:	10000926 	beq	r2,zero,b500 <__divdf3+0x614>
    b4dc:	8880022c 	andhi	r2,r17,8
    b4e0:	1000071e 	bne	r2,zero,b500 <__divdf3+0x614>
    b4e4:	00800434 	movhi	r2,16
    b4e8:	89400234 	orhi	r5,r17,8
    b4ec:	10bfffc4 	addi	r2,r2,-1
    b4f0:	288a703a 	and	r5,r5,r2
    b4f4:	402b883a 	mov	r21,r8
    b4f8:	4825883a 	mov	r18,r9
    b4fc:	003fd506 	br	b454 <__divdf3+0x568>
    b500:	00800434 	movhi	r2,16
    b504:	a1400234 	orhi	r5,r20,8
    b508:	10bfffc4 	addi	r2,r2,-1
    b50c:	288a703a 	and	r5,r5,r2
    b510:	b02b883a 	mov	r21,r22
    b514:	003fcf06 	br	b454 <__divdf3+0x568>
    b518:	183f6f26 	beq	r3,zero,b2d8 <__divdf3+0x3ec>
    b51c:	b463883a 	add	r17,r22,r17
    b520:	90bfffc4 	addi	r2,r18,-1
    b524:	8d804d36 	bltu	r17,r22,b65c <__divdf3+0x770>
    b528:	89c06b36 	bltu	r17,r7,b6d8 <__divdf3+0x7ec>
    b52c:	89c07f26 	beq	r17,r7,b72c <__divdf3+0x840>
    b530:	1025883a 	mov	r18,r2
    b534:	003f6706 	br	b2d4 <__divdf3+0x3e8>
    b538:	927ed936 	bltu	r18,r9,b0a0 <__divdf3+0x1b4>
    b53c:	a00897fa 	slli	r4,r20,31
    b540:	9004d07a 	srli	r2,r18,1
    b544:	902097fa 	slli	r16,r18,31
    b548:	a028d07a 	srli	r20,r20,1
    b54c:	20a4b03a 	or	r18,r4,r2
    b550:	003ed506 	br	b0a8 <__divdf3+0x1bc>
    b554:	000cd940 	call	cd94 <__clzsi2>
    b558:	10c00544 	addi	r3,r2,21
    b55c:	19000748 	cmpgei	r4,r3,29
    b560:	100b883a 	mov	r5,r2
    b564:	d9c00017 	ldw	r7,0(sp)
    b568:	10800804 	addi	r2,r2,32
    b56c:	203f8926 	beq	r4,zero,b394 <__divdf3+0x4a8>
    b570:	297ffe04 	addi	r5,r5,-8
    b574:	9168983a 	sll	r20,r18,r5
    b578:	0025883a 	mov	r18,zero
    b57c:	003f8c06 	br	b3b0 <__divdf3+0x4c4>
    b580:	b809883a 	mov	r4,r23
    b584:	000cd940 	call	cd94 <__clzsi2>
    b588:	11400544 	addi	r5,r2,21
    b58c:	29000748 	cmpgei	r4,r5,29
    b590:	1007883a 	mov	r3,r2
    b594:	da000017 	ldw	r8,0(sp)
    b598:	10800804 	addi	r2,r2,32
    b59c:	203f6926 	beq	r4,zero,b344 <__divdf3+0x458>
    b5a0:	18fffe04 	addi	r3,r3,-8
    b5a4:	b8e2983a 	sll	r17,r23,r3
    b5a8:	0013883a 	mov	r9,zero
    b5ac:	003f6c06 	br	b360 <__divdf3+0x474>
    b5b0:	bdaf883a 	add	r23,r23,r22
    b5b4:	80bfffc4 	addi	r2,r16,-1
    b5b8:	bd803b36 	bltu	r23,r22,b6a8 <__divdf3+0x7bc>
    b5bc:	bc403a2e 	bgeu	r23,r17,b6a8 <__divdf3+0x7bc>
    b5c0:	843fff84 	addi	r16,r16,-2
    b5c4:	bdaf883a 	add	r23,r23,r22
    b5c8:	003f2c06 	br	b27c <__divdf3+0x390>
    b5cc:	2589883a 	add	r4,r4,r22
    b5d0:	90bfffc4 	addi	r2,r18,-1
    b5d4:	25803636 	bltu	r4,r22,b6b0 <__divdf3+0x7c4>
    b5d8:	2400352e 	bgeu	r4,r16,b6b0 <__divdf3+0x7c4>
    b5dc:	94bfff84 	addi	r18,r18,-2
    b5e0:	2589883a 	add	r4,r4,r22
    b5e4:	003f1406 	br	b238 <__divdf3+0x34c>
    b5e8:	b13efd1e 	bne	r22,r4,b1e0 <__divdf3+0x2f4>
    b5ec:	d9400017 	ldw	r5,0(sp)
    b5f0:	817efb36 	bltu	r16,r5,b1e0 <__divdf3+0x2f4>
    b5f4:	003ef806 	br	b1d8 <__divdf3+0x2ec>
    b5f8:	227ed52e 	bgeu	r4,r9,b150 <__divdf3+0x264>
    b5fc:	a53fff84 	addi	r20,r20,-2
    b600:	2589883a 	add	r4,r4,r22
    b604:	003ed306 	br	b154 <__divdf3+0x268>
    b608:	25febe2e 	bgeu	r4,r23,b104 <__divdf3+0x218>
    b60c:	18ffff84 	addi	r3,r3,-2
    b610:	2589883a 	add	r4,r4,r22
    b614:	003ebc06 	br	b108 <__divdf3+0x21c>
    b618:	00fff844 	movi	r3,-31
    b61c:	1987c83a 	sub	r3,r3,r6
    b620:	29400820 	cmpeqi	r5,r5,32
    b624:	a0c6d83a 	srl	r3,r20,r3
    b628:	2800031e 	bne	r5,zero,b638 <__divdf3+0x74c>
    b62c:	99410f84 	addi	r5,r19,1086
    b630:	a14a983a 	sll	r5,r20,r5
    b634:	9164b03a 	or	r18,r18,r5
    b638:	9024c03a 	cmpne	r18,r18,zero
    b63c:	90e4b03a 	or	r18,r18,r3
    b640:	910001cc 	andi	r4,r18,7
    b644:	20002c1e 	bne	r4,zero,b6f8 <__divdf3+0x80c>
    b648:	000b883a 	mov	r5,zero
    b64c:	9024d0fa 	srli	r18,r18,3
    b650:	0007883a 	mov	r3,zero
    b654:	9124b03a 	or	r18,r18,r4
    b658:	003e7506 	br	b030 <__divdf3+0x144>
    b65c:	1025883a 	mov	r18,r2
    b660:	89ff1c1e 	bne	r17,r7,b2d4 <__divdf3+0x3e8>
    b664:	d8800017 	ldw	r2,0(sp)
    b668:	18bf1a1e 	bne	r3,r2,b2d4 <__divdf3+0x3e8>
    b66c:	003f1a06 	br	b2d8 <__divdf3+0x3ec>
    b670:	9980ffc4 	addi	r6,r19,1023
    b674:	01bf790e 	bge	zero,r6,b45c <__divdf3+0x570>
    b678:	000f883a 	mov	r7,zero
    b67c:	01000044 	movi	r4,1
    b680:	a129883a 	add	r20,r20,r4
    b684:	003f1906 	br	b2ec <__divdf3+0x400>
    b688:	908003cc 	andi	r2,r18,15
    b68c:	10800118 	cmpnei	r2,r2,4
    b690:	103f1526 	beq	r2,zero,b2e8 <__divdf3+0x3fc>
    b694:	91c00104 	addi	r7,r18,4
    b698:	013ffec4 	movi	r4,-5
    b69c:	380ed0fa 	srli	r7,r7,3
    b6a0:	2489803a 	cmpltu	r4,r4,r18
    b6a4:	003ff606 	br	b680 <__divdf3+0x794>
    b6a8:	1021883a 	mov	r16,r2
    b6ac:	003ef306 	br	b27c <__divdf3+0x390>
    b6b0:	1025883a 	mov	r18,r2
    b6b4:	003ee006 	br	b238 <__divdf3+0x34c>
    b6b8:	85fec92e 	bgeu	r16,r23,b1e0 <__divdf3+0x2f4>
    b6bc:	d8800017 	ldw	r2,0(sp)
    b6c0:	a53fff84 	addi	r20,r20,-2
    b6c4:	80a1883a 	add	r16,r16,r2
    b6c8:	8085803a 	cmpltu	r2,r16,r2
    b6cc:	1585883a 	add	r2,r2,r22
    b6d0:	2089883a 	add	r4,r4,r2
    b6d4:	003ec306 	br	b1e4 <__divdf3+0x2f8>
    b6d8:	d9000017 	ldw	r4,0(sp)
    b6dc:	94bfff84 	addi	r18,r18,-2
    b6e0:	2105883a 	add	r2,r4,r4
    b6e4:	1109803a 	cmpltu	r4,r2,r4
    b6e8:	258d883a 	add	r6,r4,r22
    b6ec:	89a3883a 	add	r17,r17,r6
    b6f0:	d8800015 	stw	r2,0(sp)
    b6f4:	003fda06 	br	b660 <__divdf3+0x774>
    b6f8:	908003cc 	andi	r2,r18,15
    b6fc:	10800118 	cmpnei	r2,r2,4
    b700:	000b883a 	mov	r5,zero
    b704:	103f691e 	bne	r2,zero,b4ac <__divdf3+0x5c0>
    b708:	2804927a 	slli	r2,r5,9
    b70c:	2808977a 	slli	r4,r5,29
    b710:	100ad33a 	srli	r5,r2,12
    b714:	003fcd06 	br	b64c <__divdf3+0x760>
    b718:	00800434 	movhi	r2,16
    b71c:	a1400234 	orhi	r5,r20,8
    b720:	10bfffc4 	addi	r2,r2,-1
    b724:	288a703a 	and	r5,r5,r2
    b728:	003f4a06 	br	b454 <__divdf3+0x568>
    b72c:	d9000017 	ldw	r4,0(sp)
    b730:	20ffe936 	bltu	r4,r3,b6d8 <__divdf3+0x7ec>
    b734:	1025883a 	mov	r18,r2
    b738:	003fca06 	br	b664 <__divdf3+0x778>

0000b73c <__eqdf2>:
    b73c:	2810d53a 	srli	r8,r5,20
    b740:	3806d53a 	srli	r3,r7,20
    b744:	00800434 	movhi	r2,16
    b748:	4201ffcc 	andi	r8,r8,2047
    b74c:	10bfffc4 	addi	r2,r2,-1
    b750:	4241ffd8 	cmpnei	r9,r8,2047
    b754:	2814d7fa 	srli	r10,r5,31
    b758:	3816d7fa 	srli	r11,r7,31
    b75c:	288a703a 	and	r5,r5,r2
    b760:	388e703a 	and	r7,r7,r2
    b764:	1881ffcc 	andi	r2,r3,2047
    b768:	48000626 	beq	r9,zero,b784 <__eqdf2+0x48>
    b76c:	10c1ffe0 	cmpeqi	r3,r2,2047
    b770:	1800021e 	bne	r3,zero,b77c <__eqdf2+0x40>
    b774:	4080011e 	bne	r8,r2,b77c <__eqdf2+0x40>
    b778:	29c00826 	beq	r5,r7,b79c <__eqdf2+0x60>
    b77c:	00800044 	movi	r2,1
    b780:	f800283a 	ret
    b784:	2906b03a 	or	r3,r5,r4
    b788:	183ffc1e 	bne	r3,zero,b77c <__eqdf2+0x40>
    b78c:	1081ffd8 	cmpnei	r2,r2,2047
    b790:	103ffa1e 	bne	r2,zero,b77c <__eqdf2+0x40>
    b794:	398eb03a 	or	r7,r7,r6
    b798:	383ff81e 	bne	r7,zero,b77c <__eqdf2+0x40>
    b79c:	21bff71e 	bne	r4,r6,b77c <__eqdf2+0x40>
    b7a0:	52c00426 	beq	r10,r11,b7b4 <__eqdf2+0x78>
    b7a4:	403ff51e 	bne	r8,zero,b77c <__eqdf2+0x40>
    b7a8:	290ab03a 	or	r5,r5,r4
    b7ac:	2804c03a 	cmpne	r2,r5,zero
    b7b0:	f800283a 	ret
    b7b4:	0005883a 	mov	r2,zero
    b7b8:	f800283a 	ret

0000b7bc <__gedf2>:
    b7bc:	2810d53a 	srli	r8,r5,20
    b7c0:	3812d53a 	srli	r9,r7,20
    b7c4:	00c00434 	movhi	r3,16
    b7c8:	4201ffcc 	andi	r8,r8,2047
    b7cc:	18ffffc4 	addi	r3,r3,-1
    b7d0:	4281ffd8 	cmpnei	r10,r8,2047
    b7d4:	2816d7fa 	srli	r11,r5,31
    b7d8:	3804d7fa 	srli	r2,r7,31
    b7dc:	28ca703a 	and	r5,r5,r3
    b7e0:	38ce703a 	and	r7,r7,r3
    b7e4:	48c1ffcc 	andi	r3,r9,2047
    b7e8:	50000a26 	beq	r10,zero,b814 <__gedf2+0x58>
    b7ec:	1a41ffd8 	cmpnei	r9,r3,2047
    b7f0:	48000c26 	beq	r9,zero,b824 <__gedf2+0x68>
    b7f4:	4000171e 	bne	r8,zero,b854 <__gedf2+0x98>
    b7f8:	2912b03a 	or	r9,r5,r4
    b7fc:	1800121e 	bne	r3,zero,b848 <__gedf2+0x8c>
    b800:	3994b03a 	or	r10,r7,r6
    b804:	5000101e 	bne	r10,zero,b848 <__gedf2+0x8c>
    b808:	48000a1e 	bne	r9,zero,b834 <__gedf2+0x78>
    b80c:	0005883a 	mov	r2,zero
    b810:	f800283a 	ret
    b814:	2912b03a 	or	r9,r5,r4
    b818:	48001d1e 	bne	r9,zero,b890 <__gedf2+0xd4>
    b81c:	1a41ffe0 	cmpeqi	r9,r3,2047
    b820:	48000c26 	beq	r9,zero,b854 <__gedf2+0x98>
    b824:	3992b03a 	or	r9,r7,r6
    b828:	4800191e 	bne	r9,zero,b890 <__gedf2+0xd4>
    b82c:	40000526 	beq	r8,zero,b844 <__gedf2+0x88>
    b830:	58800c26 	beq	r11,r2,b864 <__gedf2+0xa8>
    b834:	00800044 	movi	r2,1
    b838:	58000526 	beq	r11,zero,b850 <__gedf2+0x94>
    b83c:	00bfffc4 	movi	r2,-1
    b840:	f800283a 	ret
    b844:	2912b03a 	or	r9,r5,r4
    b848:	483ff91e 	bne	r9,zero,b830 <__gedf2+0x74>
    b84c:	103ffb26 	beq	r2,zero,b83c <__gedf2+0x80>
    b850:	f800283a 	ret
    b854:	183ff61e 	bne	r3,zero,b830 <__gedf2+0x74>
    b858:	3992b03a 	or	r9,r7,r6
    b85c:	483ff41e 	bne	r9,zero,b830 <__gedf2+0x74>
    b860:	003ff406 	br	b834 <__gedf2+0x78>
    b864:	1a000716 	blt	r3,r8,b884 <__gedf2+0xc8>
    b868:	40fff816 	blt	r8,r3,b84c <__gedf2+0x90>
    b86c:	397ff136 	bltu	r7,r5,b834 <__gedf2+0x78>
    b870:	29c00926 	beq	r5,r7,b898 <__gedf2+0xdc>
    b874:	29ffe52e 	bgeu	r5,r7,b80c <__gedf2+0x50>
    b878:	583ff026 	beq	r11,zero,b83c <__gedf2+0x80>
    b87c:	5805883a 	mov	r2,r11
    b880:	f800283a 	ret
    b884:	103fed1e 	bne	r2,zero,b83c <__gedf2+0x80>
    b888:	00800044 	movi	r2,1
    b88c:	f800283a 	ret
    b890:	00bfff84 	movi	r2,-2
    b894:	f800283a 	ret
    b898:	313fe636 	bltu	r6,r4,b834 <__gedf2+0x78>
    b89c:	21bfdb2e 	bgeu	r4,r6,b80c <__gedf2+0x50>
    b8a0:	003ff506 	br	b878 <__gedf2+0xbc>

0000b8a4 <__ledf2>:
    b8a4:	2810d53a 	srli	r8,r5,20
    b8a8:	3812d53a 	srli	r9,r7,20
    b8ac:	00c00434 	movhi	r3,16
    b8b0:	4201ffcc 	andi	r8,r8,2047
    b8b4:	18ffffc4 	addi	r3,r3,-1
    b8b8:	4281ffd8 	cmpnei	r10,r8,2047
    b8bc:	2816d7fa 	srli	r11,r5,31
    b8c0:	3804d7fa 	srli	r2,r7,31
    b8c4:	28ca703a 	and	r5,r5,r3
    b8c8:	38ce703a 	and	r7,r7,r3
    b8cc:	48c1ffcc 	andi	r3,r9,2047
    b8d0:	50000a26 	beq	r10,zero,b8fc <__ledf2+0x58>
    b8d4:	1a41ffd8 	cmpnei	r9,r3,2047
    b8d8:	48000c26 	beq	r9,zero,b90c <__ledf2+0x68>
    b8dc:	4000191e 	bne	r8,zero,b944 <__ledf2+0xa0>
    b8e0:	2912b03a 	or	r9,r5,r4
    b8e4:	18000d1e 	bne	r3,zero,b91c <__ledf2+0x78>
    b8e8:	3994b03a 	or	r10,r7,r6
    b8ec:	50000b1e 	bne	r10,zero,b91c <__ledf2+0x78>
    b8f0:	48000c1e 	bne	r9,zero,b924 <__ledf2+0x80>
    b8f4:	0005883a 	mov	r2,zero
    b8f8:	f800283a 	ret
    b8fc:	2912b03a 	or	r9,r5,r4
    b900:	48000c1e 	bne	r9,zero,b934 <__ledf2+0x90>
    b904:	1a41ffe0 	cmpeqi	r9,r3,2047
    b908:	48000e26 	beq	r9,zero,b944 <__ledf2+0xa0>
    b90c:	3992b03a 	or	r9,r7,r6
    b910:	4800081e 	bne	r9,zero,b934 <__ledf2+0x90>
    b914:	4000021e 	bne	r8,zero,b920 <__ledf2+0x7c>
    b918:	2912b03a 	or	r9,r5,r4
    b91c:	48000726 	beq	r9,zero,b93c <__ledf2+0x98>
    b920:	58800c26 	beq	r11,r2,b954 <__ledf2+0xb0>
    b924:	00800044 	movi	r2,1
    b928:	58000526 	beq	r11,zero,b940 <__ledf2+0x9c>
    b92c:	00bfffc4 	movi	r2,-1
    b930:	f800283a 	ret
    b934:	00800084 	movi	r2,2
    b938:	f800283a 	ret
    b93c:	103ffb26 	beq	r2,zero,b92c <__ledf2+0x88>
    b940:	f800283a 	ret
    b944:	183ff61e 	bne	r3,zero,b920 <__ledf2+0x7c>
    b948:	3992b03a 	or	r9,r7,r6
    b94c:	483ff41e 	bne	r9,zero,b920 <__ledf2+0x7c>
    b950:	003ff406 	br	b924 <__ledf2+0x80>
    b954:	1a00030e 	bge	r3,r8,b964 <__ledf2+0xc0>
    b958:	103ff41e 	bne	r2,zero,b92c <__ledf2+0x88>
    b95c:	00800044 	movi	r2,1
    b960:	f800283a 	ret
    b964:	40fff516 	blt	r8,r3,b93c <__ledf2+0x98>
    b968:	397fee36 	bltu	r7,r5,b924 <__ledf2+0x80>
    b96c:	29c00426 	beq	r5,r7,b980 <__ledf2+0xdc>
    b970:	29ffe02e 	bgeu	r5,r7,b8f4 <__ledf2+0x50>
    b974:	583fed26 	beq	r11,zero,b92c <__ledf2+0x88>
    b978:	5805883a 	mov	r2,r11
    b97c:	f800283a 	ret
    b980:	313fe836 	bltu	r6,r4,b924 <__ledf2+0x80>
    b984:	21bfdb2e 	bgeu	r4,r6,b8f4 <__ledf2+0x50>
    b988:	003ffa06 	br	b974 <__ledf2+0xd0>

0000b98c <__muldf3>:
    b98c:	2804d53a 	srli	r2,r5,20
    b990:	defff504 	addi	sp,sp,-44
    b994:	02000434 	movhi	r8,16
    b998:	df000915 	stw	fp,36(sp)
    b99c:	dd000515 	stw	r20,20(sp)
    b9a0:	dcc00415 	stw	r19,16(sp)
    b9a4:	dc000115 	stw	r16,4(sp)
    b9a8:	423fffc4 	addi	r8,r8,-1
    b9ac:	dfc00a15 	stw	ra,40(sp)
    b9b0:	ddc00815 	stw	r23,32(sp)
    b9b4:	dd800715 	stw	r22,28(sp)
    b9b8:	dd400615 	stw	r21,24(sp)
    b9bc:	dc800315 	stw	r18,12(sp)
    b9c0:	dc400215 	stw	r17,8(sp)
    b9c4:	1081ffcc 	andi	r2,r2,2047
    b9c8:	2828d7fa 	srli	r20,r5,31
    b9cc:	2027883a 	mov	r19,r4
    b9d0:	3039883a 	mov	fp,r6
    b9d4:	2a20703a 	and	r16,r5,r8
    b9d8:	1000e726 	beq	r2,zero,bd78 <__muldf3+0x3ec>
    b9dc:	10c1ffe0 	cmpeqi	r3,r2,2047
    b9e0:	1800f91e 	bne	r3,zero,bdc8 <__muldf3+0x43c>
    b9e4:	800a90fa 	slli	r5,r16,3
    b9e8:	2020d77a 	srli	r16,r4,29
    b9ec:	202490fa 	slli	r18,r4,3
    b9f0:	14ff0044 	addi	r19,r2,-1023
    b9f4:	8160b03a 	or	r16,r16,r5
    b9f8:	84002034 	orhi	r16,r16,128
    b9fc:	002b883a 	mov	r21,zero
    ba00:	002d883a 	mov	r22,zero
    ba04:	3804d53a 	srli	r2,r7,20
    ba08:	00c00434 	movhi	r3,16
    ba0c:	18ffffc4 	addi	r3,r3,-1
    ba10:	1081ffcc 	andi	r2,r2,2047
    ba14:	382ed7fa 	srli	r23,r7,31
    ba18:	38e2703a 	and	r17,r7,r3
    ba1c:	1000c526 	beq	r2,zero,bd34 <__muldf3+0x3a8>
    ba20:	10c1ffe0 	cmpeqi	r3,r2,2047
    ba24:	1800ef1e 	bne	r3,zero,bde4 <__muldf3+0x458>
    ba28:	880690fa 	slli	r3,r17,3
    ba2c:	e022d77a 	srli	r17,fp,29
    ba30:	e00a90fa 	slli	r5,fp,3
    ba34:	10bf0044 	addi	r2,r2,-1023
    ba38:	88e2b03a 	or	r17,r17,r3
    ba3c:	8c402034 	orhi	r17,r17,128
    ba40:	98a7883a 	add	r19,r19,r2
    ba44:	0007883a 	mov	r3,zero
    ba48:	a8800428 	cmpgeui	r2,r21,16
    ba4c:	a5ccf03a 	xor	r6,r20,r23
    ba50:	9a000044 	addi	r8,r19,1
    ba54:	1000371e 	bne	r2,zero,bb34 <__muldf3+0x1a8>
    ba58:	a80490ba 	slli	r2,r21,2
    ba5c:	01000074 	movhi	r4,1
    ba60:	1109883a 	add	r4,r2,r4
    ba64:	20ae9b17 	ldw	r2,-17812(r4)
    ba68:	1000683a 	jmp	r2
    ba6c:	0000bb34 	movhi	zero,748
    ba70:	0000bab0 	cmpltui	zero,zero,746
    ba74:	0000bab0 	cmpltui	zero,zero,746
    ba78:	0000baac 	andhi	zero,zero,746
    ba7c:	0000babc 	xorhi	zero,zero,746
    ba80:	0000babc 	xorhi	zero,zero,746
    ba84:	0000be58 	cmpnei	zero,zero,761
    ba88:	0000baac 	andhi	zero,zero,746
    ba8c:	0000babc 	xorhi	zero,zero,746
    ba90:	0000be58 	cmpnei	zero,zero,761
    ba94:	0000babc 	xorhi	zero,zero,746
    ba98:	0000baac 	andhi	zero,zero,746
    ba9c:	0000be00 	call	be0 <kf_bfly3+0x378>
    baa0:	0000be00 	call	be0 <kf_bfly3+0x378>
    baa4:	0000be00 	call	be0 <kf_bfly3+0x378>
    baa8:	0000bee4 	muli	zero,zero,763
    baac:	b80d883a 	mov	r6,r23
    bab0:	8821883a 	mov	r16,r17
    bab4:	2825883a 	mov	r18,r5
    bab8:	182d883a 	mov	r22,r3
    babc:	b08000a0 	cmpeqi	r2,r22,2
    bac0:	1000181e 	bne	r2,zero,bb24 <__muldf3+0x198>
    bac4:	b08000e0 	cmpeqi	r2,r22,3
    bac8:	1001481e 	bne	r2,zero,bfec <__muldf3+0x660>
    bacc:	b0800060 	cmpeqi	r2,r22,1
    bad0:	10007e26 	beq	r2,zero,bccc <__muldf3+0x340>
    bad4:	0007883a 	mov	r3,zero
    bad8:	0021883a 	mov	r16,zero
    badc:	0025883a 	mov	r18,zero
    bae0:	1806953a 	slli	r3,r3,20
    bae4:	300c97fa 	slli	r6,r6,31
    bae8:	9005883a 	mov	r2,r18
    baec:	1c06b03a 	or	r3,r3,r16
    baf0:	1986b03a 	or	r3,r3,r6
    baf4:	dfc00a17 	ldw	ra,40(sp)
    baf8:	df000917 	ldw	fp,36(sp)
    bafc:	ddc00817 	ldw	r23,32(sp)
    bb00:	dd800717 	ldw	r22,28(sp)
    bb04:	dd400617 	ldw	r21,24(sp)
    bb08:	dd000517 	ldw	r20,20(sp)
    bb0c:	dcc00417 	ldw	r19,16(sp)
    bb10:	dc800317 	ldw	r18,12(sp)
    bb14:	dc400217 	ldw	r17,8(sp)
    bb18:	dc000117 	ldw	r16,4(sp)
    bb1c:	dec00b04 	addi	sp,sp,44
    bb20:	f800283a 	ret
    bb24:	00c1ffc4 	movi	r3,2047
    bb28:	0021883a 	mov	r16,zero
    bb2c:	0025883a 	mov	r18,zero
    bb30:	003feb06 	br	bae0 <__muldf3+0x154>
    bb34:	9004d43a 	srli	r2,r18,16
    bb38:	281ed43a 	srli	r15,r5,16
    bb3c:	94bfffcc 	andi	r18,r18,65535
    bb40:	297fffcc 	andi	r5,r5,65535
    bb44:	2c89383a 	mul	r4,r5,r18
    bb48:	114f383a 	mul	r7,r2,r5
    bb4c:	7c87383a 	mul	r3,r15,r18
    bb50:	2012d43a 	srli	r9,r4,16
    bb54:	13dd383a 	mul	r14,r2,r15
    bb58:	19c7883a 	add	r3,r3,r7
    bb5c:	48d3883a 	add	r9,r9,r3
    bb60:	49c0022e 	bgeu	r9,r7,bb6c <__muldf3+0x1e0>
    bb64:	00c00074 	movhi	r3,1
    bb68:	70dd883a 	add	r14,r14,r3
    bb6c:	881ad43a 	srli	r13,r17,16
    bb70:	8c7fffcc 	andi	r17,r17,65535
    bb74:	8c87383a 	mul	r3,r17,r18
    bb78:	144f383a 	mul	r7,r2,r17
    bb7c:	6ca5383a 	mul	r18,r13,r18
    bb80:	1816d43a 	srli	r11,r3,16
    bb84:	4814943a 	slli	r10,r9,16
    bb88:	91e5883a 	add	r18,r18,r7
    bb8c:	213fffcc 	andi	r4,r4,65535
    bb90:	5c97883a 	add	r11,r11,r18
    bb94:	4818d43a 	srli	r12,r9,16
    bb98:	1345383a 	mul	r2,r2,r13
    bb9c:	5115883a 	add	r10,r10,r4
    bba0:	59c0022e 	bgeu	r11,r7,bbac <__muldf3+0x220>
    bba4:	01000074 	movhi	r4,1
    bba8:	1105883a 	add	r2,r2,r4
    bbac:	8028d43a 	srli	r20,r16,16
    bbb0:	827fffcc 	andi	r9,r16,65535
    bbb4:	2a6b383a 	mul	r21,r5,r9
    bbb8:	7a49383a 	mul	r4,r15,r9
    bbbc:	a14b383a 	mul	r5,r20,r5
    bbc0:	580e943a 	slli	r7,r11,16
    bbc4:	a82cd43a 	srli	r22,r21,16
    bbc8:	5824d43a 	srli	r18,r11,16
    bbcc:	18ffffcc 	andi	r3,r3,65535
    bbd0:	2149883a 	add	r4,r4,r5
    bbd4:	38cf883a 	add	r7,r7,r3
    bbd8:	b109883a 	add	r4,r22,r4
    bbdc:	7d1f383a 	mul	r15,r15,r20
    bbe0:	9097883a 	add	r11,r18,r2
    bbe4:	61c7883a 	add	r3,r12,r7
    bbe8:	2140022e 	bgeu	r4,r5,bbf4 <__muldf3+0x268>
    bbec:	00800074 	movhi	r2,1
    bbf0:	789f883a 	add	r15,r15,r2
    bbf4:	8a65383a 	mul	r18,r17,r9
    bbf8:	6a53383a 	mul	r9,r13,r9
    bbfc:	a463383a 	mul	r17,r20,r17
    bc00:	9020d43a 	srli	r16,r18,16
    bc04:	200ad43a 	srli	r5,r4,16
    bc08:	2008943a 	slli	r4,r4,16
    bc0c:	4c53883a 	add	r9,r9,r17
    bc10:	ab3fffcc 	andi	r12,r21,65535
    bc14:	8253883a 	add	r9,r16,r9
    bc18:	6d1b383a 	mul	r13,r13,r20
    bc1c:	2bdf883a 	add	r15,r5,r15
    bc20:	2309883a 	add	r4,r4,r12
    bc24:	4c40022e 	bgeu	r9,r17,bc30 <__muldf3+0x2a4>
    bc28:	00800074 	movhi	r2,1
    bc2c:	689b883a 	add	r13,r13,r2
    bc30:	4804943a 	slli	r2,r9,16
    bc34:	917fffcc 	andi	r5,r18,65535
    bc38:	1b87883a 	add	r3,r3,r14
    bc3c:	1145883a 	add	r2,r2,r5
    bc40:	19cf803a 	cmpltu	r7,r3,r7
    bc44:	12c5883a 	add	r2,r2,r11
    bc48:	1907883a 	add	r3,r3,r4
    bc4c:	11dd883a 	add	r14,r2,r7
    bc50:	1909803a 	cmpltu	r4,r3,r4
    bc54:	73cb883a 	add	r5,r14,r15
    bc58:	4812d43a 	srli	r9,r9,16
    bc5c:	2919883a 	add	r12,r5,r4
    bc60:	12c5803a 	cmpltu	r2,r2,r11
    bc64:	71e1803a 	cmpltu	r16,r14,r7
    bc68:	1420b03a 	or	r16,r2,r16
    bc6c:	2bcb803a 	cmpltu	r5,r5,r15
    bc70:	6109803a 	cmpltu	r4,r12,r4
    bc74:	2908b03a 	or	r4,r5,r4
    bc78:	8261883a 	add	r16,r16,r9
    bc7c:	1824927a 	slli	r18,r3,9
    bc80:	8121883a 	add	r16,r16,r4
    bc84:	8361883a 	add	r16,r16,r13
    bc88:	8020927a 	slli	r16,r16,9
    bc8c:	1806d5fa 	srli	r3,r3,23
    bc90:	600ad5fa 	srli	r5,r12,23
    bc94:	6004927a 	slli	r2,r12,9
    bc98:	92a4b03a 	or	r18,r18,r10
    bc9c:	9024c03a 	cmpne	r18,r18,zero
    bca0:	90e4b03a 	or	r18,r18,r3
    bca4:	80c0402c 	andhi	r3,r16,256
    bca8:	90a4b03a 	or	r18,r18,r2
    bcac:	8160b03a 	or	r16,r16,r5
    bcb0:	1800b326 	beq	r3,zero,bf80 <__muldf3+0x5f4>
    bcb4:	9006d07a 	srli	r3,r18,1
    bcb8:	800497fa 	slli	r2,r16,31
    bcbc:	9480004c 	andi	r18,r18,1
    bcc0:	8020d07a 	srli	r16,r16,1
    bcc4:	1c86b03a 	or	r3,r3,r18
    bcc8:	18a4b03a 	or	r18,r3,r2
    bccc:	4100ffc4 	addi	r4,r8,1023
    bcd0:	0100670e 	bge	zero,r4,be70 <__muldf3+0x4e4>
    bcd4:	908001cc 	andi	r2,r18,7
    bcd8:	10000726 	beq	r2,zero,bcf8 <__muldf3+0x36c>
    bcdc:	908003cc 	andi	r2,r18,15
    bce0:	10800120 	cmpeqi	r2,r2,4
    bce4:	1000041e 	bne	r2,zero,bcf8 <__muldf3+0x36c>
    bce8:	90800104 	addi	r2,r18,4
    bcec:	14a5803a 	cmpltu	r18,r2,r18
    bcf0:	84a1883a 	add	r16,r16,r18
    bcf4:	1025883a 	mov	r18,r2
    bcf8:	8080402c 	andhi	r2,r16,256
    bcfc:	10000426 	beq	r2,zero,bd10 <__muldf3+0x384>
    bd00:	00bfc034 	movhi	r2,65280
    bd04:	10bfffc4 	addi	r2,r2,-1
    bd08:	80a0703a 	and	r16,r16,r2
    bd0c:	41010004 	addi	r4,r8,1024
    bd10:	2081ffc8 	cmpgei	r2,r4,2047
    bd14:	103f831e 	bne	r2,zero,bb24 <__muldf3+0x198>
    bd18:	8004977a 	slli	r2,r16,29
    bd1c:	9024d0fa 	srli	r18,r18,3
    bd20:	8020927a 	slli	r16,r16,9
    bd24:	20c1ffcc 	andi	r3,r4,2047
    bd28:	14a4b03a 	or	r18,r2,r18
    bd2c:	8020d33a 	srli	r16,r16,12
    bd30:	003f6b06 	br	bae0 <__muldf3+0x154>
    bd34:	8f0ab03a 	or	r5,r17,fp
    bd38:	28004326 	beq	r5,zero,be48 <__muldf3+0x4bc>
    bd3c:	88008526 	beq	r17,zero,bf54 <__muldf3+0x5c8>
    bd40:	8809883a 	mov	r4,r17
    bd44:	000cd940 	call	cd94 <__clzsi2>
    bd48:	11bffd44 	addi	r6,r2,-11
    bd4c:	01000744 	movi	r4,29
    bd50:	117ffe04 	addi	r5,r2,-8
    bd54:	2189c83a 	sub	r4,r4,r6
    bd58:	8962983a 	sll	r17,r17,r5
    bd5c:	e108d83a 	srl	r4,fp,r4
    bd60:	e14a983a 	sll	r5,fp,r5
    bd64:	2462b03a 	or	r17,r4,r17
    bd68:	9885c83a 	sub	r2,r19,r2
    bd6c:	14ff0344 	addi	r19,r2,-1011
    bd70:	0007883a 	mov	r3,zero
    bd74:	003f3406 	br	ba48 <__muldf3+0xbc>
    bd78:	8124b03a 	or	r18,r16,r4
    bd7c:	90002d26 	beq	r18,zero,be34 <__muldf3+0x4a8>
    bd80:	d9c00015 	stw	r7,0(sp)
    bd84:	80006826 	beq	r16,zero,bf28 <__muldf3+0x59c>
    bd88:	8009883a 	mov	r4,r16
    bd8c:	000cd940 	call	cd94 <__clzsi2>
    bd90:	d9c00017 	ldw	r7,0(sp)
    bd94:	113ffd44 	addi	r4,r2,-11
    bd98:	00c00744 	movi	r3,29
    bd9c:	14bffe04 	addi	r18,r2,-8
    bda0:	1907c83a 	sub	r3,r3,r4
    bda4:	84a0983a 	sll	r16,r16,r18
    bda8:	98c6d83a 	srl	r3,r19,r3
    bdac:	9ca4983a 	sll	r18,r19,r18
    bdb0:	1c20b03a 	or	r16,r3,r16
    bdb4:	04ff0344 	movi	r19,-1011
    bdb8:	98a7c83a 	sub	r19,r19,r2
    bdbc:	002b883a 	mov	r21,zero
    bdc0:	002d883a 	mov	r22,zero
    bdc4:	003f0f06 	br	ba04 <__muldf3+0x78>
    bdc8:	8124b03a 	or	r18,r16,r4
    bdcc:	9000141e 	bne	r18,zero,be20 <__muldf3+0x494>
    bdd0:	0021883a 	mov	r16,zero
    bdd4:	05400204 	movi	r21,8
    bdd8:	04c1ffc4 	movi	r19,2047
    bddc:	05800084 	movi	r22,2
    bde0:	003f0806 	br	ba04 <__muldf3+0x78>
    bde4:	8f0ab03a 	or	r5,r17,fp
    bde8:	9cc1ffc4 	addi	r19,r19,2047
    bdec:	2800081e 	bne	r5,zero,be10 <__muldf3+0x484>
    bdf0:	ad400094 	ori	r21,r21,2
    bdf4:	0023883a 	mov	r17,zero
    bdf8:	00c00084 	movi	r3,2
    bdfc:	003f1206 	br	ba48 <__muldf3+0xbc>
    be00:	b08000a0 	cmpeqi	r2,r22,2
    be04:	a00d883a 	mov	r6,r20
    be08:	103f2e26 	beq	r2,zero,bac4 <__muldf3+0x138>
    be0c:	003f4506 	br	bb24 <__muldf3+0x198>
    be10:	ad4000d4 	ori	r21,r21,3
    be14:	e00b883a 	mov	r5,fp
    be18:	00c000c4 	movi	r3,3
    be1c:	003f0a06 	br	ba48 <__muldf3+0xbc>
    be20:	2025883a 	mov	r18,r4
    be24:	05400304 	movi	r21,12
    be28:	04c1ffc4 	movi	r19,2047
    be2c:	058000c4 	movi	r22,3
    be30:	003ef406 	br	ba04 <__muldf3+0x78>
    be34:	0021883a 	mov	r16,zero
    be38:	05400104 	movi	r21,4
    be3c:	0027883a 	mov	r19,zero
    be40:	05800044 	movi	r22,1
    be44:	003eef06 	br	ba04 <__muldf3+0x78>
    be48:	ad400054 	ori	r21,r21,1
    be4c:	0023883a 	mov	r17,zero
    be50:	00c00044 	movi	r3,1
    be54:	003efc06 	br	ba48 <__muldf3+0xbc>
    be58:	04000434 	movhi	r16,16
    be5c:	000d883a 	mov	r6,zero
    be60:	843fffc4 	addi	r16,r16,-1
    be64:	04bfffc4 	movi	r18,-1
    be68:	00c1ffc4 	movi	r3,2047
    be6c:	003f1c06 	br	bae0 <__muldf3+0x154>
    be70:	00800044 	movi	r2,1
    be74:	1105c83a 	sub	r2,r2,r4
    be78:	10c00e48 	cmpgei	r3,r2,57
    be7c:	183f151e 	bne	r3,zero,bad4 <__muldf3+0x148>
    be80:	10c00808 	cmpgei	r3,r2,32
    be84:	1800401e 	bne	r3,zero,bf88 <__muldf3+0x5fc>
    be88:	42010784 	addi	r8,r8,1054
    be8c:	8206983a 	sll	r3,r16,r8
    be90:	9088d83a 	srl	r4,r18,r2
    be94:	9210983a 	sll	r8,r18,r8
    be98:	80a0d83a 	srl	r16,r16,r2
    be9c:	1904b03a 	or	r2,r3,r4
    bea0:	4024c03a 	cmpne	r18,r8,zero
    bea4:	1484b03a 	or	r2,r2,r18
    bea8:	10c001cc 	andi	r3,r2,7
    beac:	18000726 	beq	r3,zero,becc <__muldf3+0x540>
    beb0:	10c003cc 	andi	r3,r2,15
    beb4:	18c00120 	cmpeqi	r3,r3,4
    beb8:	1800041e 	bne	r3,zero,becc <__muldf3+0x540>
    bebc:	10c00104 	addi	r3,r2,4
    bec0:	1885803a 	cmpltu	r2,r3,r2
    bec4:	80a1883a 	add	r16,r16,r2
    bec8:	1805883a 	mov	r2,r3
    becc:	80c0202c 	andhi	r3,r16,128
    bed0:	18004226 	beq	r3,zero,bfdc <__muldf3+0x650>
    bed4:	00c00044 	movi	r3,1
    bed8:	0021883a 	mov	r16,zero
    bedc:	0025883a 	mov	r18,zero
    bee0:	003eff06 	br	bae0 <__muldf3+0x154>
    bee4:	8080022c 	andhi	r2,r16,8
    bee8:	10000926 	beq	r2,zero,bf10 <__muldf3+0x584>
    beec:	8880022c 	andhi	r2,r17,8
    bef0:	1000071e 	bne	r2,zero,bf10 <__muldf3+0x584>
    bef4:	00800434 	movhi	r2,16
    bef8:	8c000234 	orhi	r16,r17,8
    befc:	10bfffc4 	addi	r2,r2,-1
    bf00:	80a0703a 	and	r16,r16,r2
    bf04:	b80d883a 	mov	r6,r23
    bf08:	2825883a 	mov	r18,r5
    bf0c:	003fd606 	br	be68 <__muldf3+0x4dc>
    bf10:	00800434 	movhi	r2,16
    bf14:	84000234 	orhi	r16,r16,8
    bf18:	10bfffc4 	addi	r2,r2,-1
    bf1c:	80a0703a 	and	r16,r16,r2
    bf20:	a00d883a 	mov	r6,r20
    bf24:	003fd006 	br	be68 <__muldf3+0x4dc>
    bf28:	000cd940 	call	cd94 <__clzsi2>
    bf2c:	11000544 	addi	r4,r2,21
    bf30:	21400748 	cmpgei	r5,r4,29
    bf34:	1007883a 	mov	r3,r2
    bf38:	d9c00017 	ldw	r7,0(sp)
    bf3c:	10800804 	addi	r2,r2,32
    bf40:	283f9526 	beq	r5,zero,bd98 <__muldf3+0x40c>
    bf44:	18fffe04 	addi	r3,r3,-8
    bf48:	98e0983a 	sll	r16,r19,r3
    bf4c:	0025883a 	mov	r18,zero
    bf50:	003f9806 	br	bdb4 <__muldf3+0x428>
    bf54:	e009883a 	mov	r4,fp
    bf58:	000cd940 	call	cd94 <__clzsi2>
    bf5c:	11800544 	addi	r6,r2,21
    bf60:	31000748 	cmpgei	r4,r6,29
    bf64:	1007883a 	mov	r3,r2
    bf68:	10800804 	addi	r2,r2,32
    bf6c:	203f7726 	beq	r4,zero,bd4c <__muldf3+0x3c0>
    bf70:	1c7ffe04 	addi	r17,r3,-8
    bf74:	e462983a 	sll	r17,fp,r17
    bf78:	000b883a 	mov	r5,zero
    bf7c:	003f7a06 	br	bd68 <__muldf3+0x3dc>
    bf80:	9811883a 	mov	r8,r19
    bf84:	003f5106 	br	bccc <__muldf3+0x340>
    bf88:	00fff844 	movi	r3,-31
    bf8c:	1907c83a 	sub	r3,r3,r4
    bf90:	10800820 	cmpeqi	r2,r2,32
    bf94:	80c6d83a 	srl	r3,r16,r3
    bf98:	1000031e 	bne	r2,zero,bfa8 <__muldf3+0x61c>
    bf9c:	42010f84 	addi	r8,r8,1086
    bfa0:	8220983a 	sll	r16,r16,r8
    bfa4:	9424b03a 	or	r18,r18,r16
    bfa8:	9024c03a 	cmpne	r18,r18,zero
    bfac:	90c4b03a 	or	r2,r18,r3
    bfb0:	148001cc 	andi	r18,r2,7
    bfb4:	9000051e 	bne	r18,zero,bfcc <__muldf3+0x640>
    bfb8:	0021883a 	mov	r16,zero
    bfbc:	1004d0fa 	srli	r2,r2,3
    bfc0:	0007883a 	mov	r3,zero
    bfc4:	14a4b03a 	or	r18,r2,r18
    bfc8:	003ec506 	br	bae0 <__muldf3+0x154>
    bfcc:	10c003cc 	andi	r3,r2,15
    bfd0:	18c00118 	cmpnei	r3,r3,4
    bfd4:	0021883a 	mov	r16,zero
    bfd8:	183fb81e 	bne	r3,zero,bebc <__muldf3+0x530>
    bfdc:	8006927a 	slli	r3,r16,9
    bfe0:	8024977a 	slli	r18,r16,29
    bfe4:	1820d33a 	srli	r16,r3,12
    bfe8:	003ff406 	br	bfbc <__muldf3+0x630>
    bfec:	00800434 	movhi	r2,16
    bff0:	84000234 	orhi	r16,r16,8
    bff4:	10bfffc4 	addi	r2,r2,-1
    bff8:	80a0703a 	and	r16,r16,r2
    bffc:	003f9a06 	br	be68 <__muldf3+0x4dc>

0000c000 <__subdf3>:
    c000:	00800434 	movhi	r2,16
    c004:	defffb04 	addi	sp,sp,-20
    c008:	3812d53a 	srli	r9,r7,20
    c00c:	10bfffc4 	addi	r2,r2,-1
    c010:	2886703a 	and	r3,r5,r2
    c014:	dc000015 	stw	r16,0(sp)
    c018:	3884703a 	and	r2,r7,r2
    c01c:	2820d53a 	srli	r16,r5,20
    c020:	3014d77a 	srli	r10,r6,29
    c024:	280ad7fa 	srli	r5,r5,31
    c028:	180690fa 	slli	r3,r3,3
    c02c:	2016d77a 	srli	r11,r4,29
    c030:	100490fa 	slli	r2,r2,3
    c034:	4a41ffcc 	andi	r9,r9,2047
    c038:	dc800215 	stw	r18,8(sp)
    c03c:	8401ffcc 	andi	r16,r16,2047
    c040:	dfc00415 	stw	ra,16(sp)
    c044:	dcc00315 	stw	r19,12(sp)
    c048:	dc400115 	stw	r17,4(sp)
    c04c:	4b01ffd8 	cmpnei	r12,r9,2047
    c050:	3810d7fa 	srli	r8,r7,31
    c054:	2825883a 	mov	r18,r5
    c058:	5084b03a 	or	r2,r10,r2
    c05c:	201c90fa 	slli	r14,r4,3
    c060:	301a90fa 	slli	r13,r6,3
    c064:	29403fcc 	andi	r5,r5,255
    c068:	58ceb03a 	or	r7,r11,r3
    c06c:	8255c83a 	sub	r10,r16,r9
    c070:	60006826 	beq	r12,zero,c214 <__subdf3+0x214>
    c074:	42c0005c 	xori	r11,r8,1
    c078:	2ac07326 	beq	r5,r11,c248 <__subdf3+0x248>
    c07c:	0280590e 	bge	zero,r10,c1e4 <__subdf3+0x1e4>
    c080:	4800691e 	bne	r9,zero,c228 <__subdf3+0x228>
    c084:	1346b03a 	or	r3,r2,r13
    c088:	1800e826 	beq	r3,zero,c42c <__subdf3+0x42c>
    c08c:	50ffffc4 	addi	r3,r10,-1
    c090:	18018126 	beq	r3,zero,c698 <__subdf3+0x698>
    c094:	5281ffd8 	cmpnei	r10,r10,2047
    c098:	5000eb26 	beq	r10,zero,c448 <__subdf3+0x448>
    c09c:	1815883a 	mov	r10,r3
    c0a0:	50c00e48 	cmpgei	r3,r10,57
    c0a4:	1800651e 	bne	r3,zero,c23c <__subdf3+0x23c>
    c0a8:	50c00808 	cmpgei	r3,r10,32
    c0ac:	18012a1e 	bne	r3,zero,c558 <__subdf3+0x558>
    c0b0:	00c00804 	movi	r3,32
    c0b4:	1a87c83a 	sub	r3,r3,r10
    c0b8:	10e2983a 	sll	r17,r2,r3
    c0bc:	6a88d83a 	srl	r4,r13,r10
    c0c0:	68da983a 	sll	r13,r13,r3
    c0c4:	1284d83a 	srl	r2,r2,r10
    c0c8:	8922b03a 	or	r17,r17,r4
    c0cc:	681ac03a 	cmpne	r13,r13,zero
    c0d0:	8b62b03a 	or	r17,r17,r13
    c0d4:	388fc83a 	sub	r7,r7,r2
    c0d8:	7463c83a 	sub	r17,r14,r17
    c0dc:	7445803a 	cmpltu	r2,r14,r17
    c0e0:	3889c83a 	sub	r4,r7,r2
    c0e4:	2080202c 	andhi	r2,r4,128
    c0e8:	10008e26 	beq	r2,zero,c324 <__subdf3+0x324>
    c0ec:	04c02034 	movhi	r19,128
    c0f0:	9cffffc4 	addi	r19,r19,-1
    c0f4:	24e6703a 	and	r19,r4,r19
    c0f8:	9800a626 	beq	r19,zero,c394 <__subdf3+0x394>
    c0fc:	9809883a 	mov	r4,r19
    c100:	000cd940 	call	cd94 <__clzsi2>
    c104:	117ffe04 	addi	r5,r2,-8
    c108:	01000804 	movi	r4,32
    c10c:	2149c83a 	sub	r4,r4,r5
    c110:	8908d83a 	srl	r4,r17,r4
    c114:	9944983a 	sll	r2,r19,r5
    c118:	8962983a 	sll	r17,r17,r5
    c11c:	2084b03a 	or	r2,r4,r2
    c120:	2c00a516 	blt	r5,r16,c3b8 <__subdf3+0x3b8>
    c124:	2c0bc83a 	sub	r5,r5,r16
    c128:	29000044 	addi	r4,r5,1
    c12c:	20c00808 	cmpgei	r3,r4,32
    c130:	1800701e 	bne	r3,zero,c2f4 <__subdf3+0x2f4>
    c134:	00c00804 	movi	r3,32
    c138:	1907c83a 	sub	r3,r3,r4
    c13c:	890ad83a 	srl	r5,r17,r4
    c140:	88e2983a 	sll	r17,r17,r3
    c144:	10c6983a 	sll	r3,r2,r3
    c148:	1108d83a 	srl	r4,r2,r4
    c14c:	8822c03a 	cmpne	r17,r17,zero
    c150:	1946b03a 	or	r3,r3,r5
    c154:	1c62b03a 	or	r17,r3,r17
    c158:	0021883a 	mov	r16,zero
    c15c:	888001cc 	andi	r2,r17,7
    c160:	10000726 	beq	r2,zero,c180 <__subdf3+0x180>
    c164:	888003cc 	andi	r2,r17,15
    c168:	10800120 	cmpeqi	r2,r2,4
    c16c:	1000041e 	bne	r2,zero,c180 <__subdf3+0x180>
    c170:	88800104 	addi	r2,r17,4
    c174:	1463803a 	cmpltu	r17,r2,r17
    c178:	2449883a 	add	r4,r4,r17
    c17c:	1023883a 	mov	r17,r2
    c180:	2080202c 	andhi	r2,r4,128
    c184:	10006926 	beq	r2,zero,c32c <__subdf3+0x32c>
    c188:	84000044 	addi	r16,r16,1
    c18c:	8081ffe0 	cmpeqi	r2,r16,2047
    c190:	8401ffcc 	andi	r16,r16,2047
    c194:	10007b1e 	bne	r2,zero,c384 <__subdf3+0x384>
    c198:	00bfe034 	movhi	r2,65408
    c19c:	10bfffc4 	addi	r2,r2,-1
    c1a0:	2084703a 	and	r2,r4,r2
    c1a4:	1006927a 	slli	r3,r2,9
    c1a8:	8822d0fa 	srli	r17,r17,3
    c1ac:	1008977a 	slli	r4,r2,29
    c1b0:	1806d33a 	srli	r3,r3,12
    c1b4:	2444b03a 	or	r2,r4,r17
    c1b8:	8020953a 	slli	r16,r16,20
    c1bc:	902497fa 	slli	r18,r18,31
    c1c0:	80c6b03a 	or	r3,r16,r3
    c1c4:	1c86b03a 	or	r3,r3,r18
    c1c8:	dfc00417 	ldw	ra,16(sp)
    c1cc:	dcc00317 	ldw	r19,12(sp)
    c1d0:	dc800217 	ldw	r18,8(sp)
    c1d4:	dc400117 	ldw	r17,4(sp)
    c1d8:	dc000017 	ldw	r16,0(sp)
    c1dc:	dec00504 	addi	sp,sp,20
    c1e0:	f800283a 	ret
    c1e4:	50002c26 	beq	r10,zero,c298 <__subdf3+0x298>
    c1e8:	4c15c83a 	sub	r10,r9,r16
    c1ec:	5825883a 	mov	r18,r11
    c1f0:	8000b21e 	bne	r16,zero,c4bc <__subdf3+0x4bc>
    c1f4:	3b86b03a 	or	r3,r7,r14
    c1f8:	18010826 	beq	r3,zero,c61c <__subdf3+0x61c>
    c1fc:	50ffffc4 	addi	r3,r10,-1
    c200:	18015a26 	beq	r3,zero,c76c <__subdf3+0x76c>
    c204:	5401ffd8 	cmpnei	r16,r10,2047
    c208:	80012926 	beq	r16,zero,c6b0 <__subdf3+0x6b0>
    c20c:	1815883a 	mov	r10,r3
    c210:	0000ac06 	br	c4c4 <__subdf3+0x4c4>
    c214:	1346b03a 	or	r3,r2,r13
    c218:	183f9626 	beq	r3,zero,c074 <__subdf3+0x74>
    c21c:	42c03fcc 	andi	r11,r8,255
    c220:	2a006a26 	beq	r5,r8,c3cc <__subdf3+0x3cc>
    c224:	02bfef0e 	bge	zero,r10,c1e4 <__subdf3+0x1e4>
    c228:	80c1ffd8 	cmpnei	r3,r16,2047
    c22c:	18008626 	beq	r3,zero,c448 <__subdf3+0x448>
    c230:	50c00e48 	cmpgei	r3,r10,57
    c234:	10802034 	orhi	r2,r2,128
    c238:	183f9b26 	beq	r3,zero,c0a8 <__subdf3+0xa8>
    c23c:	1344b03a 	or	r2,r2,r13
    c240:	1022c03a 	cmpne	r17,r2,zero
    c244:	003fa406 	br	c0d8 <__subdf3+0xd8>
    c248:	0280600e 	bge	zero,r10,c3cc <__subdf3+0x3cc>
    c24c:	48002126 	beq	r9,zero,c2d4 <__subdf3+0x2d4>
    c250:	80c1ffd8 	cmpnei	r3,r16,2047
    c254:	18011d26 	beq	r3,zero,c6cc <__subdf3+0x6cc>
    c258:	10802034 	orhi	r2,r2,128
    c25c:	50c00e48 	cmpgei	r3,r10,57
    c260:	18003e1e 	bne	r3,zero,c35c <__subdf3+0x35c>
    c264:	50c00808 	cmpgei	r3,r10,32
    c268:	1800d526 	beq	r3,zero,c5c0 <__subdf3+0x5c0>
    c26c:	547ff804 	addi	r17,r10,-32
    c270:	51000820 	cmpeqi	r4,r10,32
    c274:	1446d83a 	srl	r3,r2,r17
    c278:	2000041e 	bne	r4,zero,c28c <__subdf3+0x28c>
    c27c:	01001004 	movi	r4,64
    c280:	2295c83a 	sub	r10,r4,r10
    c284:	1284983a 	sll	r2,r2,r10
    c288:	689ab03a 	or	r13,r13,r2
    c28c:	6822c03a 	cmpne	r17,r13,zero
    c290:	88e2b03a 	or	r17,r17,r3
    c294:	00003306 	br	c364 <__subdf3+0x364>
    c298:	80c00044 	addi	r3,r16,1
    c29c:	18c1ff8c 	andi	r3,r3,2046
    c2a0:	1800971e 	bne	r3,zero,c500 <__subdf3+0x500>
    c2a4:	1350b03a 	or	r8,r2,r13
    c2a8:	3b86b03a 	or	r3,r7,r14
    c2ac:	8000e21e 	bne	r16,zero,c638 <__subdf3+0x638>
    c2b0:	18012526 	beq	r3,zero,c748 <__subdf3+0x748>
    c2b4:	4001411e 	bne	r8,zero,c7bc <__subdf3+0x7bc>
    c2b8:	3806977a 	slli	r3,r7,29
    c2bc:	00880034 	movhi	r2,8192
    c2c0:	10bfffc4 	addi	r2,r2,-1
    c2c4:	208a703a 	and	r5,r4,r2
    c2c8:	3810d0fa 	srli	r8,r7,3
    c2cc:	28c4b03a 	or	r2,r5,r3
    c2d0:	00001d06 	br	c348 <__subdf3+0x348>
    c2d4:	1346b03a 	or	r3,r2,r13
    c2d8:	18005426 	beq	r3,zero,c42c <__subdf3+0x42c>
    c2dc:	50ffffc4 	addi	r3,r10,-1
    c2e0:	1800e526 	beq	r3,zero,c678 <__subdf3+0x678>
    c2e4:	5281ffd8 	cmpnei	r10,r10,2047
    c2e8:	50012d26 	beq	r10,zero,c7a0 <__subdf3+0x7a0>
    c2ec:	1815883a 	mov	r10,r3
    c2f0:	003fda06 	br	c25c <__subdf3+0x25c>
    c2f4:	297ff844 	addi	r5,r5,-31
    c2f8:	20c00820 	cmpeqi	r3,r4,32
    c2fc:	114ad83a 	srl	r5,r2,r5
    c300:	1800041e 	bne	r3,zero,c314 <__subdf3+0x314>
    c304:	00c01004 	movi	r3,64
    c308:	1909c83a 	sub	r4,r3,r4
    c30c:	1104983a 	sll	r2,r2,r4
    c310:	88a2b03a 	or	r17,r17,r2
    c314:	8822c03a 	cmpne	r17,r17,zero
    c318:	8962b03a 	or	r17,r17,r5
    c31c:	0009883a 	mov	r4,zero
    c320:	0021883a 	mov	r16,zero
    c324:	888001cc 	andi	r2,r17,7
    c328:	103f8e1e 	bne	r2,zero,c164 <__subdf3+0x164>
    c32c:	8822d0fa 	srli	r17,r17,3
    c330:	2004977a 	slli	r2,r4,29
    c334:	2010d0fa 	srli	r8,r4,3
    c338:	8015883a 	mov	r10,r16
    c33c:	8884b03a 	or	r2,r17,r2
    c340:	50c1ffe0 	cmpeqi	r3,r10,2047
    c344:	18016f1e 	bne	r3,zero,c904 <__subdf3+0x904>
    c348:	00c00434 	movhi	r3,16
    c34c:	18ffffc4 	addi	r3,r3,-1
    c350:	40c6703a 	and	r3,r8,r3
    c354:	5401ffcc 	andi	r16,r10,2047
    c358:	003f9706 	br	c1b8 <__subdf3+0x1b8>
    c35c:	1344b03a 	or	r2,r2,r13
    c360:	1022c03a 	cmpne	r17,r2,zero
    c364:	8ba3883a 	add	r17,r17,r14
    c368:	8b85803a 	cmpltu	r2,r17,r14
    c36c:	11c9883a 	add	r4,r2,r7
    c370:	2080202c 	andhi	r2,r4,128
    c374:	103feb26 	beq	r2,zero,c324 <__subdf3+0x324>
    c378:	84000044 	addi	r16,r16,1
    c37c:	8081ffe0 	cmpeqi	r2,r16,2047
    c380:	10006b26 	beq	r2,zero,c530 <__subdf3+0x530>
    c384:	0401ffc4 	movi	r16,2047
    c388:	0007883a 	mov	r3,zero
    c38c:	0005883a 	mov	r2,zero
    c390:	003f8906 	br	c1b8 <__subdf3+0x1b8>
    c394:	8809883a 	mov	r4,r17
    c398:	000cd940 	call	cd94 <__clzsi2>
    c39c:	11400604 	addi	r5,r2,24
    c3a0:	28c00808 	cmpgei	r3,r5,32
    c3a4:	183f5826 	beq	r3,zero,c108 <__subdf3+0x108>
    c3a8:	10bffe04 	addi	r2,r2,-8
    c3ac:	8884983a 	sll	r2,r17,r2
    c3b0:	0023883a 	mov	r17,zero
    c3b4:	2c3f5b0e 	bge	r5,r16,c124 <__subdf3+0x124>
    c3b8:	013fe034 	movhi	r4,65408
    c3bc:	213fffc4 	addi	r4,r4,-1
    c3c0:	8161c83a 	sub	r16,r16,r5
    c3c4:	1108703a 	and	r4,r2,r4
    c3c8:	003f6406 	br	c15c <__subdf3+0x15c>
    c3cc:	50002c26 	beq	r10,zero,c480 <__subdf3+0x480>
    c3d0:	4c15c83a 	sub	r10,r9,r16
    c3d4:	80007226 	beq	r16,zero,c5a0 <__subdf3+0x5a0>
    c3d8:	6000ea26 	beq	r12,zero,c784 <__subdf3+0x784>
    c3dc:	39c02034 	orhi	r7,r7,128
    c3e0:	50c00e48 	cmpgei	r3,r10,57
    c3e4:	1800c01e 	bne	r3,zero,c6e8 <__subdf3+0x6e8>
    c3e8:	50c00808 	cmpgei	r3,r10,32
    c3ec:	1801261e 	bne	r3,zero,c888 <__subdf3+0x888>
    c3f0:	00c00804 	movi	r3,32
    c3f4:	1a87c83a 	sub	r3,r3,r10
    c3f8:	38e2983a 	sll	r17,r7,r3
    c3fc:	7288d83a 	srl	r4,r14,r10
    c400:	70c6983a 	sll	r3,r14,r3
    c404:	3a8ed83a 	srl	r7,r7,r10
    c408:	8922b03a 	or	r17,r17,r4
    c40c:	1806c03a 	cmpne	r3,r3,zero
    c410:	88e2b03a 	or	r17,r17,r3
    c414:	11c5883a 	add	r2,r2,r7
    c418:	8b63883a 	add	r17,r17,r13
    c41c:	8b49803a 	cmpltu	r4,r17,r13
    c420:	2089883a 	add	r4,r4,r2
    c424:	4821883a 	mov	r16,r9
    c428:	003fd106 	br	c370 <__subdf3+0x370>
    c42c:	380c977a 	slli	r6,r7,29
    c430:	00880034 	movhi	r2,8192
    c434:	10bfffc4 	addi	r2,r2,-1
    c438:	2088703a 	and	r4,r4,r2
    c43c:	3810d0fa 	srli	r8,r7,3
    c440:	2184b03a 	or	r2,r4,r6
    c444:	003fbe06 	br	c340 <__subdf3+0x340>
    c448:	380c977a 	slli	r6,r7,29
    c44c:	00880034 	movhi	r2,8192
    c450:	10bfffc4 	addi	r2,r2,-1
    c454:	380ed0fa 	srli	r7,r7,3
    c458:	2084703a 	and	r2,r4,r2
    c45c:	1184b03a 	or	r2,r2,r6
    c460:	3886b03a 	or	r3,r7,r2
    c464:	18012326 	beq	r3,zero,c8f4 <__subdf3+0x8f4>
    c468:	01000434 	movhi	r4,16
    c46c:	38c00234 	orhi	r3,r7,8
    c470:	213fffc4 	addi	r4,r4,-1
    c474:	1906703a 	and	r3,r3,r4
    c478:	0401ffc4 	movi	r16,2047
    c47c:	003f4e06 	br	c1b8 <__subdf3+0x1b8>
    c480:	80c00044 	addi	r3,r16,1
    c484:	1941ff8c 	andi	r5,r3,2046
    c488:	2800581e 	bne	r5,zero,c5ec <__subdf3+0x5ec>
    c48c:	3b86b03a 	or	r3,r7,r14
    c490:	8000a31e 	bne	r16,zero,c720 <__subdf3+0x720>
    c494:	1800ea26 	beq	r3,zero,c840 <__subdf3+0x840>
    c498:	1346b03a 	or	r3,r2,r13
    c49c:	1800ef1e 	bne	r3,zero,c85c <__subdf3+0x85c>
    c4a0:	380a977a 	slli	r5,r7,29
    c4a4:	00880034 	movhi	r2,8192
    c4a8:	10bfffc4 	addi	r2,r2,-1
    c4ac:	2084703a 	and	r2,r4,r2
    c4b0:	3810d0fa 	srli	r8,r7,3
    c4b4:	2884b03a 	or	r2,r5,r2
    c4b8:	003fa306 	br	c348 <__subdf3+0x348>
    c4bc:	60007c26 	beq	r12,zero,c6b0 <__subdf3+0x6b0>
    c4c0:	39c02034 	orhi	r7,r7,128
    c4c4:	50c00e48 	cmpgei	r3,r10,57
    c4c8:	18002e1e 	bne	r3,zero,c584 <__subdf3+0x584>
    c4cc:	50c00808 	cmpgei	r3,r10,32
    c4d0:	1800881e 	bne	r3,zero,c6f4 <__subdf3+0x6f4>
    c4d4:	00c00804 	movi	r3,32
    c4d8:	1a87c83a 	sub	r3,r3,r10
    c4dc:	7288d83a 	srl	r4,r14,r10
    c4e0:	38e2983a 	sll	r17,r7,r3
    c4e4:	70dc983a 	sll	r14,r14,r3
    c4e8:	3aa0d83a 	srl	r16,r7,r10
    c4ec:	8922b03a 	or	r17,r17,r4
    c4f0:	701cc03a 	cmpne	r14,r14,zero
    c4f4:	8ba2b03a 	or	r17,r17,r14
    c4f8:	1405c83a 	sub	r2,r2,r16
    c4fc:	00002306 	br	c58c <__subdf3+0x58c>
    c500:	7363c83a 	sub	r17,r14,r13
    c504:	3889c83a 	sub	r4,r7,r2
    c508:	7467803a 	cmpltu	r19,r14,r17
    c50c:	24e7c83a 	sub	r19,r4,r19
    c510:	98c0202c 	andhi	r3,r19,128
    c514:	1800521e 	bne	r3,zero,c660 <__subdf3+0x660>
    c518:	8cc4b03a 	or	r2,r17,r19
    c51c:	103ef61e 	bne	r2,zero,c0f8 <__subdf3+0xf8>
    c520:	0011883a 	mov	r8,zero
    c524:	0025883a 	mov	r18,zero
    c528:	003f8706 	br	c348 <__subdf3+0x348>
    c52c:	04000084 	movi	r16,2
    c530:	00bfe034 	movhi	r2,65408
    c534:	10bfffc4 	addi	r2,r2,-1
    c538:	8806d07a 	srli	r3,r17,1
    c53c:	2084703a 	and	r2,r4,r2
    c540:	100a97fa 	slli	r5,r2,31
    c544:	8c40004c 	andi	r17,r17,1
    c548:	1c62b03a 	or	r17,r3,r17
    c54c:	1008d07a 	srli	r4,r2,1
    c550:	2c62b03a 	or	r17,r5,r17
    c554:	003f0106 	br	c15c <__subdf3+0x15c>
    c558:	547ff804 	addi	r17,r10,-32
    c55c:	51000820 	cmpeqi	r4,r10,32
    c560:	1446d83a 	srl	r3,r2,r17
    c564:	2000041e 	bne	r4,zero,c578 <__subdf3+0x578>
    c568:	01001004 	movi	r4,64
    c56c:	2295c83a 	sub	r10,r4,r10
    c570:	1284983a 	sll	r2,r2,r10
    c574:	689ab03a 	or	r13,r13,r2
    c578:	6822c03a 	cmpne	r17,r13,zero
    c57c:	88e2b03a 	or	r17,r17,r3
    c580:	003ed506 	br	c0d8 <__subdf3+0xd8>
    c584:	3ba2b03a 	or	r17,r7,r14
    c588:	8822c03a 	cmpne	r17,r17,zero
    c58c:	6c63c83a 	sub	r17,r13,r17
    c590:	6c49803a 	cmpltu	r4,r13,r17
    c594:	1109c83a 	sub	r4,r2,r4
    c598:	4821883a 	mov	r16,r9
    c59c:	003ed106 	br	c0e4 <__subdf3+0xe4>
    c5a0:	3b86b03a 	or	r3,r7,r14
    c5a4:	18001d26 	beq	r3,zero,c61c <__subdf3+0x61c>
    c5a8:	50ffffc4 	addi	r3,r10,-1
    c5ac:	1800c126 	beq	r3,zero,c8b4 <__subdf3+0x8b4>
    c5b0:	5281ffd8 	cmpnei	r10,r10,2047
    c5b4:	50003e26 	beq	r10,zero,c6b0 <__subdf3+0x6b0>
    c5b8:	1815883a 	mov	r10,r3
    c5bc:	003f8806 	br	c3e0 <__subdf3+0x3e0>
    c5c0:	00c00804 	movi	r3,32
    c5c4:	1a87c83a 	sub	r3,r3,r10
    c5c8:	10e2983a 	sll	r17,r2,r3
    c5cc:	6a88d83a 	srl	r4,r13,r10
    c5d0:	68da983a 	sll	r13,r13,r3
    c5d4:	1284d83a 	srl	r2,r2,r10
    c5d8:	8922b03a 	or	r17,r17,r4
    c5dc:	681ac03a 	cmpne	r13,r13,zero
    c5e0:	8b62b03a 	or	r17,r17,r13
    c5e4:	388f883a 	add	r7,r7,r2
    c5e8:	003f5e06 	br	c364 <__subdf3+0x364>
    c5ec:	1901ffe0 	cmpeqi	r4,r3,2047
    c5f0:	203f641e 	bne	r4,zero,c384 <__subdf3+0x384>
    c5f4:	735b883a 	add	r13,r14,r13
    c5f8:	6b89803a 	cmpltu	r4,r13,r14
    c5fc:	3885883a 	add	r2,r7,r2
    c600:	1105883a 	add	r2,r2,r4
    c604:	102297fa 	slli	r17,r2,31
    c608:	681ad07a 	srli	r13,r13,1
    c60c:	1008d07a 	srli	r4,r2,1
    c610:	1821883a 	mov	r16,r3
    c614:	8b62b03a 	or	r17,r17,r13
    c618:	003f4206 	br	c324 <__subdf3+0x324>
    c61c:	1008977a 	slli	r4,r2,29
    c620:	00c80034 	movhi	r3,8192
    c624:	18ffffc4 	addi	r3,r3,-1
    c628:	30cc703a 	and	r6,r6,r3
    c62c:	1010d0fa 	srli	r8,r2,3
    c630:	3104b03a 	or	r2,r6,r4
    c634:	003f4206 	br	c340 <__subdf3+0x340>
    c638:	18006c1e 	bne	r3,zero,c7ec <__subdf3+0x7ec>
    c63c:	4000a826 	beq	r8,zero,c8e0 <__subdf3+0x8e0>
    c640:	1008977a 	slli	r4,r2,29
    c644:	00c80034 	movhi	r3,8192
    c648:	18ffffc4 	addi	r3,r3,-1
    c64c:	30c6703a 	and	r3,r6,r3
    c650:	100ed0fa 	srli	r7,r2,3
    c654:	5825883a 	mov	r18,r11
    c658:	1904b03a 	or	r2,r3,r4
    c65c:	003f8006 	br	c460 <__subdf3+0x460>
    c660:	6ba3c83a 	sub	r17,r13,r14
    c664:	11c5c83a 	sub	r2,r2,r7
    c668:	6c49803a 	cmpltu	r4,r13,r17
    c66c:	1127c83a 	sub	r19,r2,r4
    c670:	5825883a 	mov	r18,r11
    c674:	003ea006 	br	c0f8 <__subdf3+0xf8>
    c678:	7363883a 	add	r17,r14,r13
    c67c:	3885883a 	add	r2,r7,r2
    c680:	8b9d803a 	cmpltu	r14,r17,r14
    c684:	1389883a 	add	r4,r2,r14
    c688:	2080202c 	andhi	r2,r4,128
    c68c:	103fa71e 	bne	r2,zero,c52c <__subdf3+0x52c>
    c690:	04000044 	movi	r16,1
    c694:	003f2306 	br	c324 <__subdf3+0x324>
    c698:	7363c83a 	sub	r17,r14,r13
    c69c:	3885c83a 	sub	r2,r7,r2
    c6a0:	745d803a 	cmpltu	r14,r14,r17
    c6a4:	1389c83a 	sub	r4,r2,r14
    c6a8:	04000044 	movi	r16,1
    c6ac:	003e8d06 	br	c0e4 <__subdf3+0xe4>
    c6b0:	1008977a 	slli	r4,r2,29
    c6b4:	00c80034 	movhi	r3,8192
    c6b8:	18ffffc4 	addi	r3,r3,-1
    c6bc:	30c6703a 	and	r3,r6,r3
    c6c0:	100ed0fa 	srli	r7,r2,3
    c6c4:	1904b03a 	or	r2,r3,r4
    c6c8:	003f6506 	br	c460 <__subdf3+0x460>
    c6cc:	380c977a 	slli	r6,r7,29
    c6d0:	00880034 	movhi	r2,8192
    c6d4:	10bfffc4 	addi	r2,r2,-1
    c6d8:	2088703a 	and	r4,r4,r2
    c6dc:	380ed0fa 	srli	r7,r7,3
    c6e0:	2184b03a 	or	r2,r4,r6
    c6e4:	003f5e06 	br	c460 <__subdf3+0x460>
    c6e8:	3ba2b03a 	or	r17,r7,r14
    c6ec:	8822c03a 	cmpne	r17,r17,zero
    c6f0:	003f4906 	br	c418 <__subdf3+0x418>
    c6f4:	547ff804 	addi	r17,r10,-32
    c6f8:	51000820 	cmpeqi	r4,r10,32
    c6fc:	3c46d83a 	srl	r3,r7,r17
    c700:	2000041e 	bne	r4,zero,c714 <__subdf3+0x714>
    c704:	01001004 	movi	r4,64
    c708:	2295c83a 	sub	r10,r4,r10
    c70c:	3a8e983a 	sll	r7,r7,r10
    c710:	71dcb03a 	or	r14,r14,r7
    c714:	7022c03a 	cmpne	r17,r14,zero
    c718:	88e2b03a 	or	r17,r17,r3
    c71c:	003f9b06 	br	c58c <__subdf3+0x58c>
    c720:	18001826 	beq	r3,zero,c784 <__subdf3+0x784>
    c724:	135ab03a 	or	r13,r2,r13
    c728:	380a977a 	slli	r5,r7,29
    c72c:	380ed0fa 	srli	r7,r7,3
    c730:	6800311e 	bne	r13,zero,c7f8 <__subdf3+0x7f8>
    c734:	00880034 	movhi	r2,8192
    c738:	10bfffc4 	addi	r2,r2,-1
    c73c:	2084703a 	and	r2,r4,r2
    c740:	1144b03a 	or	r2,r2,r5
    c744:	003f4606 	br	c460 <__subdf3+0x460>
    c748:	40005f26 	beq	r8,zero,c8c8 <__subdf3+0x8c8>
    c74c:	1008977a 	slli	r4,r2,29
    c750:	00c80034 	movhi	r3,8192
    c754:	18ffffc4 	addi	r3,r3,-1
    c758:	30cc703a 	and	r6,r6,r3
    c75c:	1010d0fa 	srli	r8,r2,3
    c760:	5825883a 	mov	r18,r11
    c764:	3104b03a 	or	r2,r6,r4
    c768:	003ef706 	br	c348 <__subdf3+0x348>
    c76c:	6ba3c83a 	sub	r17,r13,r14
    c770:	11c5c83a 	sub	r2,r2,r7
    c774:	6c5b803a 	cmpltu	r13,r13,r17
    c778:	1349c83a 	sub	r4,r2,r13
    c77c:	04000044 	movi	r16,1
    c780:	003e5806 	br	c0e4 <__subdf3+0xe4>
    c784:	1006977a 	slli	r3,r2,29
    c788:	01080034 	movhi	r4,8192
    c78c:	213fffc4 	addi	r4,r4,-1
    c790:	3108703a 	and	r4,r6,r4
    c794:	100ed0fa 	srli	r7,r2,3
    c798:	1904b03a 	or	r2,r3,r4
    c79c:	003f3006 	br	c460 <__subdf3+0x460>
    c7a0:	3806977a 	slli	r3,r7,29
    c7a4:	00880034 	movhi	r2,8192
    c7a8:	10bfffc4 	addi	r2,r2,-1
    c7ac:	2084703a 	and	r2,r4,r2
    c7b0:	380ed0fa 	srli	r7,r7,3
    c7b4:	10c4b03a 	or	r2,r2,r3
    c7b8:	003f2906 	br	c460 <__subdf3+0x460>
    c7bc:	7363c83a 	sub	r17,r14,r13
    c7c0:	7447803a 	cmpltu	r3,r14,r17
    c7c4:	3889c83a 	sub	r4,r7,r2
    c7c8:	20c9c83a 	sub	r4,r4,r3
    c7cc:	20c0202c 	andhi	r3,r4,128
    c7d0:	18004026 	beq	r3,zero,c8d4 <__subdf3+0x8d4>
    c7d4:	6ba3c83a 	sub	r17,r13,r14
    c7d8:	11c5c83a 	sub	r2,r2,r7
    c7dc:	6c5b803a 	cmpltu	r13,r13,r17
    c7e0:	1349c83a 	sub	r4,r2,r13
    c7e4:	5825883a 	mov	r18,r11
    c7e8:	003e5c06 	br	c15c <__subdf3+0x15c>
    c7ec:	380a977a 	slli	r5,r7,29
    c7f0:	380ed0fa 	srli	r7,r7,3
    c7f4:	403fcf26 	beq	r8,zero,c734 <__subdf3+0x734>
    c7f8:	00c80034 	movhi	r3,8192
    c7fc:	18ffffc4 	addi	r3,r3,-1
    c800:	20c8703a 	and	r4,r4,r3
    c804:	3a00022c 	andhi	r8,r7,8
    c808:	2148b03a 	or	r4,r4,r5
    c80c:	40000826 	beq	r8,zero,c830 <__subdf3+0x830>
    c810:	100ad0fa 	srli	r5,r2,3
    c814:	2a00022c 	andhi	r8,r5,8
    c818:	4000051e 	bne	r8,zero,c830 <__subdf3+0x830>
    c81c:	1004977a 	slli	r2,r2,29
    c820:	30c6703a 	and	r3,r6,r3
    c824:	5825883a 	mov	r18,r11
    c828:	1888b03a 	or	r4,r3,r2
    c82c:	280f883a 	mov	r7,r5
    c830:	380e90fa 	slli	r7,r7,3
    c834:	2005883a 	mov	r2,r4
    c838:	380ed0fa 	srli	r7,r7,3
    c83c:	003f0806 	br	c460 <__subdf3+0x460>
    c840:	100a977a 	slli	r5,r2,29
    c844:	00c80034 	movhi	r3,8192
    c848:	18ffffc4 	addi	r3,r3,-1
    c84c:	30c6703a 	and	r3,r6,r3
    c850:	1010d0fa 	srli	r8,r2,3
    c854:	28c4b03a 	or	r2,r5,r3
    c858:	003ebb06 	br	c348 <__subdf3+0x348>
    c85c:	7363883a 	add	r17,r14,r13
    c860:	3885883a 	add	r2,r7,r2
    c864:	8b9d803a 	cmpltu	r14,r17,r14
    c868:	1389883a 	add	r4,r2,r14
    c86c:	2080202c 	andhi	r2,r4,128
    c870:	103eac26 	beq	r2,zero,c324 <__subdf3+0x324>
    c874:	00bfe034 	movhi	r2,65408
    c878:	10bfffc4 	addi	r2,r2,-1
    c87c:	2088703a 	and	r4,r4,r2
    c880:	04000044 	movi	r16,1
    c884:	003ea706 	br	c324 <__subdf3+0x324>
    c888:	50fff804 	addi	r3,r10,-32
    c88c:	51000820 	cmpeqi	r4,r10,32
    c890:	38c6d83a 	srl	r3,r7,r3
    c894:	2000041e 	bne	r4,zero,c8a8 <__subdf3+0x8a8>
    c898:	01001004 	movi	r4,64
    c89c:	2295c83a 	sub	r10,r4,r10
    c8a0:	3a8e983a 	sll	r7,r7,r10
    c8a4:	71dcb03a 	or	r14,r14,r7
    c8a8:	7022c03a 	cmpne	r17,r14,zero
    c8ac:	88e2b03a 	or	r17,r17,r3
    c8b0:	003ed906 	br	c418 <__subdf3+0x418>
    c8b4:	7363883a 	add	r17,r14,r13
    c8b8:	3885883a 	add	r2,r7,r2
    c8bc:	8b5b803a 	cmpltu	r13,r17,r13
    c8c0:	1349883a 	add	r4,r2,r13
    c8c4:	003f7006 	br	c688 <__subdf3+0x688>
    c8c8:	0005883a 	mov	r2,zero
    c8cc:	0025883a 	mov	r18,zero
    c8d0:	003e9d06 	br	c348 <__subdf3+0x348>
    c8d4:	8904b03a 	or	r2,r17,r4
    c8d8:	103f1126 	beq	r2,zero,c520 <__subdf3+0x520>
    c8dc:	003e9106 	br	c324 <__subdf3+0x324>
    c8e0:	01c00434 	movhi	r7,16
    c8e4:	00bfffc4 	movi	r2,-1
    c8e8:	39ffffc4 	addi	r7,r7,-1
    c8ec:	0025883a 	mov	r18,zero
    c8f0:	003edd06 	br	c468 <__subdf3+0x468>
    c8f4:	0005883a 	mov	r2,zero
    c8f8:	0401ffc4 	movi	r16,2047
    c8fc:	0007883a 	mov	r3,zero
    c900:	003e2d06 	br	c1b8 <__subdf3+0x1b8>
    c904:	400f883a 	mov	r7,r8
    c908:	003ed506 	br	c460 <__subdf3+0x460>

0000c90c <__unorddf2>:
    c90c:	2806d53a 	srli	r3,r5,20
    c910:	3810d53a 	srli	r8,r7,20
    c914:	02400434 	movhi	r9,16
    c918:	18c1ffcc 	andi	r3,r3,2047
    c91c:	4a7fffc4 	addi	r9,r9,-1
    c920:	18c1ffd8 	cmpnei	r3,r3,2047
    c924:	2a4a703a 	and	r5,r5,r9
    c928:	3a4e703a 	and	r7,r7,r9
    c92c:	4201ffcc 	andi	r8,r8,2047
    c930:	18000426 	beq	r3,zero,c944 <__unorddf2+0x38>
    c934:	4201ffd8 	cmpnei	r8,r8,2047
    c938:	40000626 	beq	r8,zero,c954 <__unorddf2+0x48>
    c93c:	0005883a 	mov	r2,zero
    c940:	f800283a 	ret
    c944:	290ab03a 	or	r5,r5,r4
    c948:	283ffa26 	beq	r5,zero,c934 <__unorddf2+0x28>
    c94c:	00800044 	movi	r2,1
    c950:	f800283a 	ret
    c954:	398eb03a 	or	r7,r7,r6
    c958:	3804c03a 	cmpne	r2,r7,zero
    c95c:	f800283a 	ret

0000c960 <__fixdfsi>:
    c960:	2806d53a 	srli	r3,r5,20
    c964:	01800434 	movhi	r6,16
    c968:	31bfffc4 	addi	r6,r6,-1
    c96c:	18c1ffcc 	andi	r3,r3,2047
    c970:	19c0ffd0 	cmplti	r7,r3,1023
    c974:	2810d7fa 	srli	r8,r5,31
    c978:	298a703a 	and	r5,r5,r6
    c97c:	3800061e 	bne	r7,zero,c998 <__fixdfsi+0x38>
    c980:	18810790 	cmplti	r2,r3,1054
    c984:	1000061e 	bne	r2,zero,c9a0 <__fixdfsi+0x40>
    c988:	00a00034 	movhi	r2,32768
    c98c:	10bfffc4 	addi	r2,r2,-1
    c990:	4085883a 	add	r2,r8,r2
    c994:	f800283a 	ret
    c998:	0005883a 	mov	r2,zero
    c99c:	f800283a 	ret
    c9a0:	01810cc4 	movi	r6,1075
    c9a4:	30cdc83a 	sub	r6,r6,r3
    c9a8:	30800808 	cmpgei	r2,r6,32
    c9ac:	29400434 	orhi	r5,r5,16
    c9b0:	1000071e 	bne	r2,zero,c9d0 <__fixdfsi+0x70>
    c9b4:	18befb44 	addi	r2,r3,-1043
    c9b8:	2884983a 	sll	r2,r5,r2
    c9bc:	2188d83a 	srl	r4,r4,r6
    c9c0:	1104b03a 	or	r2,r2,r4
    c9c4:	403ff526 	beq	r8,zero,c99c <__fixdfsi+0x3c>
    c9c8:	0085c83a 	sub	r2,zero,r2
    c9cc:	f800283a 	ret
    c9d0:	008104c4 	movi	r2,1043
    c9d4:	10c5c83a 	sub	r2,r2,r3
    c9d8:	2884d83a 	srl	r2,r5,r2
    c9dc:	003ff906 	br	c9c4 <__fixdfsi+0x64>

0000c9e0 <__floatsidf>:
    c9e0:	defffd04 	addi	sp,sp,-12
    c9e4:	dfc00215 	stw	ra,8(sp)
    c9e8:	dc400115 	stw	r17,4(sp)
    c9ec:	dc000015 	stw	r16,0(sp)
    c9f0:	20001326 	beq	r4,zero,ca40 <__floatsidf+0x60>
    c9f4:	2022d7fa 	srli	r17,r4,31
    c9f8:	2021883a 	mov	r16,r4
    c9fc:	20002416 	blt	r4,zero,ca90 <__floatsidf+0xb0>
    ca00:	8009883a 	mov	r4,r16
    ca04:	000cd940 	call	cd94 <__clzsi2>
    ca08:	01010784 	movi	r4,1054
    ca0c:	2089c83a 	sub	r4,r4,r2
    ca10:	114002c8 	cmpgei	r5,r2,11
    ca14:	20c1ffcc 	andi	r3,r4,2047
    ca18:	2800161e 	bne	r5,zero,ca74 <__floatsidf+0x94>
    ca1c:	010002c4 	movi	r4,11
    ca20:	2089c83a 	sub	r4,r4,r2
    ca24:	810ad83a 	srl	r5,r16,r4
    ca28:	01000434 	movhi	r4,16
    ca2c:	10800544 	addi	r2,r2,21
    ca30:	213fffc4 	addi	r4,r4,-1
    ca34:	8084983a 	sll	r2,r16,r2
    ca38:	290a703a 	and	r5,r5,r4
    ca3c:	00000406 	br	ca50 <__floatsidf+0x70>
    ca40:	0023883a 	mov	r17,zero
    ca44:	0007883a 	mov	r3,zero
    ca48:	000b883a 	mov	r5,zero
    ca4c:	0005883a 	mov	r2,zero
    ca50:	1808953a 	slli	r4,r3,20
    ca54:	880697fa 	slli	r3,r17,31
    ca58:	2148b03a 	or	r4,r4,r5
    ca5c:	20c6b03a 	or	r3,r4,r3
    ca60:	dfc00217 	ldw	ra,8(sp)
    ca64:	dc400117 	ldw	r17,4(sp)
    ca68:	dc000017 	ldw	r16,0(sp)
    ca6c:	dec00304 	addi	sp,sp,12
    ca70:	f800283a 	ret
    ca74:	10bffd44 	addi	r2,r2,-11
    ca78:	808a983a 	sll	r5,r16,r2
    ca7c:	00800434 	movhi	r2,16
    ca80:	10bfffc4 	addi	r2,r2,-1
    ca84:	288a703a 	and	r5,r5,r2
    ca88:	0005883a 	mov	r2,zero
    ca8c:	003ff006 	br	ca50 <__floatsidf+0x70>
    ca90:	0121c83a 	sub	r16,zero,r4
    ca94:	003fda06 	br	ca00 <__floatsidf+0x20>

0000ca98 <__floatunsidf>:
    ca98:	defffe04 	addi	sp,sp,-8
    ca9c:	dc000015 	stw	r16,0(sp)
    caa0:	dfc00115 	stw	ra,4(sp)
    caa4:	2021883a 	mov	r16,r4
    caa8:	20000f26 	beq	r4,zero,cae8 <__floatunsidf+0x50>
    caac:	000cd940 	call	cd94 <__clzsi2>
    cab0:	00c10784 	movi	r3,1054
    cab4:	1887c83a 	sub	r3,r3,r2
    cab8:	110002c8 	cmpgei	r4,r2,11
    cabc:	18c1ffcc 	andi	r3,r3,2047
    cac0:	2000121e 	bne	r4,zero,cb0c <__floatunsidf+0x74>
    cac4:	014002c4 	movi	r5,11
    cac8:	288bc83a 	sub	r5,r5,r2
    cacc:	814ad83a 	srl	r5,r16,r5
    cad0:	01000434 	movhi	r4,16
    cad4:	10800544 	addi	r2,r2,21
    cad8:	213fffc4 	addi	r4,r4,-1
    cadc:	80a0983a 	sll	r16,r16,r2
    cae0:	290a703a 	and	r5,r5,r4
    cae4:	00000206 	br	caf0 <__floatunsidf+0x58>
    cae8:	0007883a 	mov	r3,zero
    caec:	000b883a 	mov	r5,zero
    caf0:	1806953a 	slli	r3,r3,20
    caf4:	8005883a 	mov	r2,r16
    caf8:	1946b03a 	or	r3,r3,r5
    cafc:	dfc00117 	ldw	ra,4(sp)
    cb00:	dc000017 	ldw	r16,0(sp)
    cb04:	dec00204 	addi	sp,sp,8
    cb08:	f800283a 	ret
    cb0c:	117ffd44 	addi	r5,r2,-11
    cb10:	814a983a 	sll	r5,r16,r5
    cb14:	00800434 	movhi	r2,16
    cb18:	10bfffc4 	addi	r2,r2,-1
    cb1c:	288a703a 	and	r5,r5,r2
    cb20:	0021883a 	mov	r16,zero
    cb24:	003ff206 	br	caf0 <__floatunsidf+0x58>

0000cb28 <__extendsfdf2>:
    cb28:	200ad5fa 	srli	r5,r4,23
    cb2c:	defffd04 	addi	sp,sp,-12
    cb30:	dc000015 	stw	r16,0(sp)
    cb34:	29403fcc 	andi	r5,r5,255
    cb38:	04002034 	movhi	r16,128
    cb3c:	28800044 	addi	r2,r5,1
    cb40:	dc400115 	stw	r17,4(sp)
    cb44:	843fffc4 	addi	r16,r16,-1
    cb48:	dfc00215 	stw	ra,8(sp)
    cb4c:	10803f8c 	andi	r2,r2,254
    cb50:	2022d7fa 	srli	r17,r4,31
    cb54:	8120703a 	and	r16,r16,r4
    cb58:	10000d26 	beq	r2,zero,cb90 <__extendsfdf2+0x68>
    cb5c:	8008d0fa 	srli	r4,r16,3
    cb60:	8020977a 	slli	r16,r16,29
    cb64:	28c0e004 	addi	r3,r5,896
    cb68:	180a953a 	slli	r5,r3,20
    cb6c:	880697fa 	slli	r3,r17,31
    cb70:	8005883a 	mov	r2,r16
    cb74:	290ab03a 	or	r5,r5,r4
    cb78:	28c6b03a 	or	r3,r5,r3
    cb7c:	dfc00217 	ldw	ra,8(sp)
    cb80:	dc400117 	ldw	r17,4(sp)
    cb84:	dc000017 	ldw	r16,0(sp)
    cb88:	dec00304 	addi	sp,sp,12
    cb8c:	f800283a 	ret
    cb90:	2800111e 	bne	r5,zero,cbd8 <__extendsfdf2+0xb0>
    cb94:	80001926 	beq	r16,zero,cbfc <__extendsfdf2+0xd4>
    cb98:	8009883a 	mov	r4,r16
    cb9c:	000cd940 	call	cd94 <__clzsi2>
    cba0:	10c002c8 	cmpgei	r3,r2,11
    cba4:	18001b1e 	bne	r3,zero,cc14 <__extendsfdf2+0xec>
    cba8:	010002c4 	movi	r4,11
    cbac:	2089c83a 	sub	r4,r4,r2
    cbb0:	10c00544 	addi	r3,r2,21
    cbb4:	810ad83a 	srl	r5,r16,r4
    cbb8:	80e0983a 	sll	r16,r16,r3
    cbbc:	01000434 	movhi	r4,16
    cbc0:	00c0e244 	movi	r3,905
    cbc4:	213fffc4 	addi	r4,r4,-1
    cbc8:	1887c83a 	sub	r3,r3,r2
    cbcc:	2908703a 	and	r4,r5,r4
    cbd0:	18c1ffcc 	andi	r3,r3,2047
    cbd4:	003fe406 	br	cb68 <__extendsfdf2+0x40>
    cbd8:	80000b26 	beq	r16,zero,cc08 <__extendsfdf2+0xe0>
    cbdc:	800ad0fa 	srli	r5,r16,3
    cbe0:	00800434 	movhi	r2,16
    cbe4:	10bfffc4 	addi	r2,r2,-1
    cbe8:	29000234 	orhi	r4,r5,8
    cbec:	8020977a 	slli	r16,r16,29
    cbf0:	2088703a 	and	r4,r4,r2
    cbf4:	00c1ffc4 	movi	r3,2047
    cbf8:	003fdb06 	br	cb68 <__extendsfdf2+0x40>
    cbfc:	0007883a 	mov	r3,zero
    cc00:	0009883a 	mov	r4,zero
    cc04:	003fd806 	br	cb68 <__extendsfdf2+0x40>
    cc08:	00c1ffc4 	movi	r3,2047
    cc0c:	0009883a 	mov	r4,zero
    cc10:	003fd506 	br	cb68 <__extendsfdf2+0x40>
    cc14:	113ffd44 	addi	r4,r2,-11
    cc18:	810a983a 	sll	r5,r16,r4
    cc1c:	0021883a 	mov	r16,zero
    cc20:	003fe606 	br	cbbc <__extendsfdf2+0x94>

0000cc24 <__truncdfsf2>:
    cc24:	2804d53a 	srli	r2,r5,20
    cc28:	00c00434 	movhi	r3,16
    cc2c:	18ffffc4 	addi	r3,r3,-1
    cc30:	28c6703a 	and	r3,r5,r3
    cc34:	180c90fa 	slli	r6,r3,3
    cc38:	1081ffcc 	andi	r2,r2,2047
    cc3c:	2006d77a 	srli	r3,r4,29
    cc40:	11c00044 	addi	r7,r2,1
    cc44:	39c1ff8c 	andi	r7,r7,2046
    cc48:	280ad7fa 	srli	r5,r5,31
    cc4c:	201090fa 	slli	r8,r4,3
    cc50:	1986b03a 	or	r3,r3,r6
    cc54:	38000b26 	beq	r7,zero,cc84 <__truncdfsf2+0x60>
    cc58:	11bf2004 	addi	r6,r2,-896
    cc5c:	31c03fc8 	cmpgei	r7,r6,255
    cc60:	38001226 	beq	r7,zero,ccac <__truncdfsf2+0x88>
    cc64:	00bfffc4 	movi	r2,-1
    cc68:	0007883a 	mov	r3,zero
    cc6c:	10803fcc 	andi	r2,r2,255
    cc70:	100495fa 	slli	r2,r2,23
    cc74:	280a97fa 	slli	r5,r5,31
    cc78:	10c4b03a 	or	r2,r2,r3
    cc7c:	1144b03a 	or	r2,r2,r5
    cc80:	f800283a 	ret
    cc84:	1a10b03a 	or	r8,r3,r8
    cc88:	1000041e 	bne	r2,zero,cc9c <__truncdfsf2+0x78>
    cc8c:	40001d1e 	bne	r8,zero,cd04 <__truncdfsf2+0xe0>
    cc90:	0005883a 	mov	r2,zero
    cc94:	0007883a 	mov	r3,zero
    cc98:	003ff406 	br	cc6c <__truncdfsf2+0x48>
    cc9c:	403ff126 	beq	r8,zero,cc64 <__truncdfsf2+0x40>
    cca0:	18c01034 	orhi	r3,r3,64
    cca4:	00bfffc4 	movi	r2,-1
    cca8:	003ff006 	br	cc6c <__truncdfsf2+0x48>
    ccac:	0180170e 	bge	zero,r6,cd0c <__truncdfsf2+0xe8>
    ccb0:	200891ba 	slli	r4,r4,6
    ccb4:	180690fa 	slli	r3,r3,3
    ccb8:	4010d77a 	srli	r8,r8,29
    ccbc:	2008c03a 	cmpne	r4,r4,zero
    ccc0:	20c6b03a 	or	r3,r4,r3
    ccc4:	1a06b03a 	or	r3,r3,r8
    ccc8:	188001cc 	andi	r2,r3,7
    cccc:	10002f26 	beq	r2,zero,cd8c <__truncdfsf2+0x168>
    ccd0:	188003cc 	andi	r2,r3,15
    ccd4:	10800118 	cmpnei	r2,r2,4
    ccd8:	10000126 	beq	r2,zero,cce0 <__truncdfsf2+0xbc>
    ccdc:	18c00104 	addi	r3,r3,4
    cce0:	1881002c 	andhi	r2,r3,1024
    cce4:	10002926 	beq	r2,zero,cd8c <__truncdfsf2+0x168>
    cce8:	30800044 	addi	r2,r6,1
    ccec:	11003fe0 	cmpeqi	r4,r2,255
    ccf0:	203fdc1e 	bne	r4,zero,cc64 <__truncdfsf2+0x40>
    ccf4:	180691ba 	slli	r3,r3,6
    ccf8:	1806d27a 	srli	r3,r3,9
    ccfc:	003fdb06 	br	cc6c <__truncdfsf2+0x48>
    cd00:	0005883a 	mov	r2,zero
    cd04:	00c00144 	movi	r3,5
    cd08:	003ffa06 	br	ccf4 <__truncdfsf2+0xd0>
    cd0c:	313ffa50 	cmplti	r4,r6,-23
    cd10:	203ffb1e 	bne	r4,zero,cd00 <__truncdfsf2+0xdc>
    cd14:	01c00784 	movi	r7,30
    cd18:	398fc83a 	sub	r7,r7,r6
    cd1c:	3a400808 	cmpgei	r9,r7,32
    cd20:	19002034 	orhi	r4,r3,128
    cd24:	48001126 	beq	r9,zero,cd6c <__truncdfsf2+0x148>
    cd28:	00ffff84 	movi	r3,-2
    cd2c:	198dc83a 	sub	r6,r3,r6
    cd30:	39c00820 	cmpeqi	r7,r7,32
    cd34:	218cd83a 	srl	r6,r4,r6
    cd38:	3800031e 	bne	r7,zero,cd48 <__truncdfsf2+0x124>
    cd3c:	10ff2884 	addi	r3,r2,-862
    cd40:	20c8983a 	sll	r4,r4,r3
    cd44:	4110b03a 	or	r8,r8,r4
    cd48:	4006c03a 	cmpne	r3,r8,zero
    cd4c:	1986b03a 	or	r3,r3,r6
    cd50:	188001cc 	andi	r2,r3,7
    cd54:	000d883a 	mov	r6,zero
    cd58:	103fdd1e 	bne	r2,zero,ccd0 <__truncdfsf2+0xac>
    cd5c:	1881002c 	andhi	r2,r3,1024
    cd60:	103fe426 	beq	r2,zero,ccf4 <__truncdfsf2+0xd0>
    cd64:	00800044 	movi	r2,1
    cd68:	003fe206 	br	ccf4 <__truncdfsf2+0xd0>
    cd6c:	10ff2084 	addi	r3,r2,-894
    cd70:	40c4983a 	sll	r2,r8,r3
    cd74:	20c8983a 	sll	r4,r4,r3
    cd78:	41c6d83a 	srl	r3,r8,r7
    cd7c:	1004c03a 	cmpne	r2,r2,zero
    cd80:	1108b03a 	or	r4,r2,r4
    cd84:	1906b03a 	or	r3,r3,r4
    cd88:	003ff106 	br	cd50 <__truncdfsf2+0x12c>
    cd8c:	3005883a 	mov	r2,r6
    cd90:	003fd806 	br	ccf4 <__truncdfsf2+0xd0>

0000cd94 <__clzsi2>:
    cd94:	00bfffd4 	movui	r2,65535
    cd98:	11000436 	bltu	r2,r4,cdac <__clzsi2+0x18>
    cd9c:	20804030 	cmpltui	r2,r4,256
    cda0:	10000e26 	beq	r2,zero,cddc <__clzsi2+0x48>
    cda4:	01400804 	movi	r5,32
    cda8:	00000406 	br	cdbc <__clzsi2+0x28>
    cdac:	00804034 	movhi	r2,256
    cdb0:	20800736 	bltu	r4,r2,cdd0 <__clzsi2+0x3c>
    cdb4:	2008d63a 	srli	r4,r4,24
    cdb8:	01400204 	movi	r5,8
    cdbc:	00c000b4 	movhi	r3,2
    cdc0:	20c7883a 	add	r3,r4,r3
    cdc4:	1885db03 	ldbu	r2,5996(r3)
    cdc8:	2885c83a 	sub	r2,r5,r2
    cdcc:	f800283a 	ret
    cdd0:	2008d43a 	srli	r4,r4,16
    cdd4:	01400404 	movi	r5,16
    cdd8:	003ff806 	br	cdbc <__clzsi2+0x28>
    cddc:	2008d23a 	srli	r4,r4,8
    cde0:	01400604 	movi	r5,24
    cde4:	003ff506 	br	cdbc <__clzsi2+0x28>

0000cde8 <__errno>:
    cde8:	008000b4 	movhi	r2,2
    cdec:	108f1717 	ldw	r2,15452(r2)
    cdf0:	f800283a 	ret

0000cdf4 <malloc>:
    cdf4:	008000b4 	movhi	r2,2
    cdf8:	200b883a 	mov	r5,r4
    cdfc:	110f1717 	ldw	r4,15452(r2)
    ce00:	000ce141 	jmpi	ce14 <_malloc_r>

0000ce04 <free>:
    ce04:	008000b4 	movhi	r2,2
    ce08:	200b883a 	mov	r5,r4
    ce0c:	110f1717 	ldw	r4,15452(r2)
    ce10:	00135c01 	jmpi	135c0 <_free_r>

0000ce14 <_malloc_r>:
    ce14:	defff604 	addi	sp,sp,-40
    ce18:	dc400115 	stw	r17,4(sp)
    ce1c:	2c4002c4 	addi	r17,r5,11
    ce20:	dc800215 	stw	r18,8(sp)
    ce24:	dfc00915 	stw	ra,36(sp)
    ce28:	df000815 	stw	fp,32(sp)
    ce2c:	ddc00715 	stw	r23,28(sp)
    ce30:	dd800615 	stw	r22,24(sp)
    ce34:	dd400515 	stw	r21,20(sp)
    ce38:	dd000415 	stw	r20,16(sp)
    ce3c:	dcc00315 	stw	r19,12(sp)
    ce40:	dc000015 	stw	r16,0(sp)
    ce44:	888005e8 	cmpgeui	r2,r17,23
    ce48:	2025883a 	mov	r18,r4
    ce4c:	10001b1e 	bne	r2,zero,cebc <_malloc_r+0xa8>
    ce50:	29400468 	cmpgeui	r5,r5,17
    ce54:	2800821e 	bne	r5,zero,d060 <_malloc_r+0x24c>
    ce58:	001a5540 	call	1a554 <__malloc_lock>
    ce5c:	04400404 	movi	r17,16
    ce60:	00800604 	movi	r2,24
    ce64:	01c00084 	movi	r7,2
    ce68:	04c000b4 	movhi	r19,2
    ce6c:	9cc8fe04 	addi	r19,r19,9208
    ce70:	9885883a 	add	r2,r19,r2
    ce74:	14000117 	ldw	r16,4(r2)
    ce78:	10fffe04 	addi	r3,r2,-8
    ce7c:	80c08b26 	beq	r16,r3,d0ac <_malloc_r+0x298>
    ce80:	80800117 	ldw	r2,4(r16)
    ce84:	81000317 	ldw	r4,12(r16)
    ce88:	00ffff04 	movi	r3,-4
    ce8c:	10c4703a 	and	r2,r2,r3
    ce90:	81400217 	ldw	r5,8(r16)
    ce94:	8085883a 	add	r2,r16,r2
    ce98:	10c00117 	ldw	r3,4(r2)
    ce9c:	29000315 	stw	r4,12(r5)
    cea0:	21400215 	stw	r5,8(r4)
    cea4:	18c00054 	ori	r3,r3,1
    cea8:	10c00115 	stw	r3,4(r2)
    ceac:	9009883a 	mov	r4,r18
    ceb0:	001a5780 	call	1a578 <__malloc_unlock>
    ceb4:	80800204 	addi	r2,r16,8
    ceb8:	00006c06 	br	d06c <_malloc_r+0x258>
    cebc:	00bffe04 	movi	r2,-8
    cec0:	88a2703a 	and	r17,r17,r2
    cec4:	88006616 	blt	r17,zero,d060 <_malloc_r+0x24c>
    cec8:	89406536 	bltu	r17,r5,d060 <_malloc_r+0x24c>
    cecc:	001a5540 	call	1a554 <__malloc_lock>
    ced0:	88807e28 	cmpgeui	r2,r17,504
    ced4:	10012226 	beq	r2,zero,d360 <_malloc_r+0x54c>
    ced8:	8804d27a 	srli	r2,r17,9
    cedc:	10006f26 	beq	r2,zero,d09c <_malloc_r+0x288>
    cee0:	10c00168 	cmpgeui	r3,r2,5
    cee4:	1800fe1e 	bne	r3,zero,d2e0 <_malloc_r+0x4cc>
    cee8:	8804d1ba 	srli	r2,r17,6
    ceec:	11c00e44 	addi	r7,r2,57
    cef0:	380890fa 	slli	r4,r7,3
    cef4:	12000e04 	addi	r8,r2,56
    cef8:	04c000b4 	movhi	r19,2
    cefc:	9cc8fe04 	addi	r19,r19,9208
    cf00:	9909883a 	add	r4,r19,r4
    cf04:	24000117 	ldw	r16,4(r4)
    cf08:	213ffe04 	addi	r4,r4,-8
    cf0c:	24000b26 	beq	r4,r16,cf3c <_malloc_r+0x128>
    cf10:	01bfff04 	movi	r6,-4
    cf14:	00000306 	br	cf24 <_malloc_r+0x110>
    cf18:	1800d60e 	bge	r3,zero,d274 <_malloc_r+0x460>
    cf1c:	84000317 	ldw	r16,12(r16)
    cf20:	24000626 	beq	r4,r16,cf3c <_malloc_r+0x128>
    cf24:	80800117 	ldw	r2,4(r16)
    cf28:	1184703a 	and	r2,r2,r6
    cf2c:	1447c83a 	sub	r3,r2,r17
    cf30:	19400408 	cmpgei	r5,r3,16
    cf34:	283ff826 	beq	r5,zero,cf18 <_malloc_r+0x104>
    cf38:	400f883a 	mov	r7,r8
    cf3c:	9c000417 	ldw	r16,16(r19)
    cf40:	024000b4 	movhi	r9,2
    cf44:	4a490004 	addi	r9,r9,9216
    cf48:	82405f26 	beq	r16,r9,d0c8 <_malloc_r+0x2b4>
    cf4c:	80c00117 	ldw	r3,4(r16)
    cf50:	00bfff04 	movi	r2,-4
    cf54:	1884703a 	and	r2,r3,r2
    cf58:	1447c83a 	sub	r3,r2,r17
    cf5c:	19000410 	cmplti	r4,r3,16
    cf60:	20010a26 	beq	r4,zero,d38c <_malloc_r+0x578>
    cf64:	9a400515 	stw	r9,20(r19)
    cf68:	9a400415 	stw	r9,16(r19)
    cf6c:	1800ff0e 	bge	r3,zero,d36c <_malloc_r+0x558>
    cf70:	10c08028 	cmpgeui	r3,r2,512
    cf74:	1800c11e 	bne	r3,zero,d27c <_malloc_r+0x468>
    cf78:	1006d0fa 	srli	r3,r2,3
    cf7c:	1008d17a 	srli	r4,r2,5
    cf80:	00800044 	movi	r2,1
    cf84:	18c00044 	addi	r3,r3,1
    cf88:	180690fa 	slli	r3,r3,3
    cf8c:	99400117 	ldw	r5,4(r19)
    cf90:	1104983a 	sll	r2,r2,r4
    cf94:	98c7883a 	add	r3,r19,r3
    cf98:	19000017 	ldw	r4,0(r3)
    cf9c:	1144b03a 	or	r2,r2,r5
    cfa0:	197ffe04 	addi	r5,r3,-8
    cfa4:	81400315 	stw	r5,12(r16)
    cfa8:	81000215 	stw	r4,8(r16)
    cfac:	98800115 	stw	r2,4(r19)
    cfb0:	1c000015 	stw	r16,0(r3)
    cfb4:	24000315 	stw	r16,12(r4)
    cfb8:	3807d0ba 	srai	r3,r7,2
    cfbc:	01000044 	movi	r4,1
    cfc0:	20c8983a 	sll	r4,r4,r3
    cfc4:	11004536 	bltu	r2,r4,d0dc <_malloc_r+0x2c8>
    cfc8:	2086703a 	and	r3,r4,r2
    cfcc:	18000a1e 	bne	r3,zero,cff8 <_malloc_r+0x1e4>
    cfd0:	00ffff04 	movi	r3,-4
    cfd4:	2109883a 	add	r4,r4,r4
    cfd8:	38ce703a 	and	r7,r7,r3
    cfdc:	2086703a 	and	r3,r4,r2
    cfe0:	39c00104 	addi	r7,r7,4
    cfe4:	1800041e 	bne	r3,zero,cff8 <_malloc_r+0x1e4>
    cfe8:	2109883a 	add	r4,r4,r4
    cfec:	2086703a 	and	r3,r4,r2
    cff0:	39c00104 	addi	r7,r7,4
    cff4:	183ffc26 	beq	r3,zero,cfe8 <_malloc_r+0x1d4>
    cff8:	02bfff04 	movi	r10,-4
    cffc:	381690fa 	slli	r11,r7,3
    d000:	3819883a 	mov	r12,r7
    d004:	9ad7883a 	add	r11,r19,r11
    d008:	5811883a 	mov	r8,r11
    d00c:	40800317 	ldw	r2,12(r8)
    d010:	4080bc26 	beq	r8,r2,d304 <_malloc_r+0x4f0>
    d014:	10c00117 	ldw	r3,4(r2)
    d018:	1021883a 	mov	r16,r2
    d01c:	10800317 	ldw	r2,12(r2)
    d020:	1a86703a 	and	r3,r3,r10
    d024:	1c4bc83a 	sub	r5,r3,r17
    d028:	29800410 	cmplti	r6,r5,16
    d02c:	3000ba26 	beq	r6,zero,d318 <_malloc_r+0x504>
    d030:	283ff716 	blt	r5,zero,d010 <_malloc_r+0x1fc>
    d034:	80c7883a 	add	r3,r16,r3
    d038:	19400117 	ldw	r5,4(r3)
    d03c:	81800217 	ldw	r6,8(r16)
    d040:	9009883a 	mov	r4,r18
    d044:	29400054 	ori	r5,r5,1
    d048:	19400115 	stw	r5,4(r3)
    d04c:	30800315 	stw	r2,12(r6)
    d050:	11800215 	stw	r6,8(r2)
    d054:	001a5780 	call	1a578 <__malloc_unlock>
    d058:	80800204 	addi	r2,r16,8
    d05c:	00000306 	br	d06c <_malloc_r+0x258>
    d060:	00800304 	movi	r2,12
    d064:	90800015 	stw	r2,0(r18)
    d068:	0005883a 	mov	r2,zero
    d06c:	dfc00917 	ldw	ra,36(sp)
    d070:	df000817 	ldw	fp,32(sp)
    d074:	ddc00717 	ldw	r23,28(sp)
    d078:	dd800617 	ldw	r22,24(sp)
    d07c:	dd400517 	ldw	r21,20(sp)
    d080:	dd000417 	ldw	r20,16(sp)
    d084:	dcc00317 	ldw	r19,12(sp)
    d088:	dc800217 	ldw	r18,8(sp)
    d08c:	dc400117 	ldw	r17,4(sp)
    d090:	dc000017 	ldw	r16,0(sp)
    d094:	dec00a04 	addi	sp,sp,40
    d098:	f800283a 	ret
    d09c:	01008004 	movi	r4,512
    d0a0:	01c01004 	movi	r7,64
    d0a4:	02000fc4 	movi	r8,63
    d0a8:	003f9306 	br	cef8 <_malloc_r+0xe4>
    d0ac:	14000317 	ldw	r16,12(r2)
    d0b0:	39c00084 	addi	r7,r7,2
    d0b4:	143f721e 	bne	r2,r16,ce80 <_malloc_r+0x6c>
    d0b8:	9c000417 	ldw	r16,16(r19)
    d0bc:	024000b4 	movhi	r9,2
    d0c0:	4a490004 	addi	r9,r9,9216
    d0c4:	827fa11e 	bne	r16,r9,cf4c <_malloc_r+0x138>
    d0c8:	3807d0ba 	srai	r3,r7,2
    d0cc:	01000044 	movi	r4,1
    d0d0:	98800117 	ldw	r2,4(r19)
    d0d4:	20c8983a 	sll	r4,r4,r3
    d0d8:	113fbb2e 	bgeu	r2,r4,cfc8 <_malloc_r+0x1b4>
    d0dc:	9c000217 	ldw	r16,8(r19)
    d0e0:	00bfff04 	movi	r2,-4
    d0e4:	85400117 	ldw	r21,4(r16)
    d0e8:	a8ac703a 	and	r22,r21,r2
    d0ec:	b4400336 	bltu	r22,r17,d0fc <_malloc_r+0x2e8>
    d0f0:	b445c83a 	sub	r2,r22,r17
    d0f4:	10c00408 	cmpgei	r3,r2,16
    d0f8:	1800541e 	bne	r3,zero,d24c <_malloc_r+0x438>
    d0fc:	008000b4 	movhi	r2,2
    d100:	108f1817 	ldw	r2,15456(r2)
    d104:	00c000b4 	movhi	r3,2
    d108:	1d565a17 	ldw	r21,22888(r3)
    d10c:	10bfffd8 	cmpnei	r2,r2,-1
    d110:	85b9883a 	add	fp,r16,r22
    d114:	8d6b883a 	add	r21,r17,r21
    d118:	1000d626 	beq	r2,zero,d474 <_malloc_r+0x660>
    d11c:	ad4403c4 	addi	r21,r21,4111
    d120:	00bc0004 	movi	r2,-4096
    d124:	a8aa703a 	and	r21,r21,r2
    d128:	a80b883a 	mov	r5,r21
    d12c:	9009883a 	mov	r4,r18
    d130:	000d8580 	call	d858 <_sbrk_r>
    d134:	102f883a 	mov	r23,r2
    d138:	10bfffd8 	cmpnei	r2,r2,-1
    d13c:	1000a826 	beq	r2,zero,d3e0 <_malloc_r+0x5cc>
    d140:	bf00a636 	bltu	r23,fp,d3dc <_malloc_r+0x5c8>
    d144:	008000b4 	movhi	r2,2
    d148:	15167217 	ldw	r20,22984(r2)
    d14c:	ad29883a 	add	r20,r21,r20
    d150:	15167215 	stw	r20,22984(r2)
    d154:	a007883a 	mov	r3,r20
    d158:	e5c0ec26 	beq	fp,r23,d50c <_malloc_r+0x6f8>
    d15c:	008000b4 	movhi	r2,2
    d160:	108f1817 	ldw	r2,15456(r2)
    d164:	10bfffd8 	cmpnei	r2,r2,-1
    d168:	1000ef26 	beq	r2,zero,d528 <_malloc_r+0x714>
    d16c:	bf39c83a 	sub	fp,r23,fp
    d170:	e0c7883a 	add	r3,fp,r3
    d174:	008000b4 	movhi	r2,2
    d178:	10d67215 	stw	r3,22984(r2)
    d17c:	bf0001cc 	andi	fp,r23,7
    d180:	e000c526 	beq	fp,zero,d498 <_malloc_r+0x684>
    d184:	bf2fc83a 	sub	r23,r23,fp
    d188:	bdc00204 	addi	r23,r23,8
    d18c:	05040204 	movi	r20,4104
    d190:	a729c83a 	sub	r20,r20,fp
    d194:	bd6b883a 	add	r21,r23,r21
    d198:	a569c83a 	sub	r20,r20,r21
    d19c:	a503ffcc 	andi	r20,r20,4095
    d1a0:	a00b883a 	mov	r5,r20
    d1a4:	9009883a 	mov	r4,r18
    d1a8:	000d8580 	call	d858 <_sbrk_r>
    d1ac:	10ffffe0 	cmpeqi	r3,r2,-1
    d1b0:	1800f31e 	bne	r3,zero,d580 <_malloc_r+0x76c>
    d1b4:	15c5c83a 	sub	r2,r2,r23
    d1b8:	152b883a 	add	r21,r2,r20
    d1bc:	008000b4 	movhi	r2,2
    d1c0:	11567217 	ldw	r5,22984(r2)
    d1c4:	9dc00215 	stw	r23,8(r19)
    d1c8:	ad400054 	ori	r21,r21,1
    d1cc:	a169883a 	add	r20,r20,r5
    d1d0:	15167215 	stw	r20,22984(r2)
    d1d4:	bd400115 	stw	r21,4(r23)
    d1d8:	84c0d626 	beq	r16,r19,d534 <_malloc_r+0x720>
    d1dc:	b0800428 	cmpgeui	r2,r22,16
    d1e0:	1000d626 	beq	r2,zero,d53c <_malloc_r+0x728>
    d1e4:	80c00117 	ldw	r3,4(r16)
    d1e8:	013ffe04 	movi	r4,-8
    d1ec:	b0bffd04 	addi	r2,r22,-12
    d1f0:	1104703a 	and	r2,r2,r4
    d1f4:	18c0004c 	andi	r3,r3,1
    d1f8:	1886b03a 	or	r3,r3,r2
    d1fc:	80c00115 	stw	r3,4(r16)
    d200:	01000144 	movi	r4,5
    d204:	8087883a 	add	r3,r16,r2
    d208:	19000115 	stw	r4,4(r3)
    d20c:	19000215 	stw	r4,8(r3)
    d210:	10800428 	cmpgeui	r2,r2,16
    d214:	1000df1e 	bne	r2,zero,d594 <_malloc_r+0x780>
    d218:	bd400117 	ldw	r21,4(r23)
    d21c:	b821883a 	mov	r16,r23
    d220:	008000b4 	movhi	r2,2
    d224:	10965917 	ldw	r2,22884(r2)
    d228:	1500022e 	bgeu	r2,r20,d234 <_malloc_r+0x420>
    d22c:	008000b4 	movhi	r2,2
    d230:	15165915 	stw	r20,22884(r2)
    d234:	008000b4 	movhi	r2,2
    d238:	10965817 	ldw	r2,22880(r2)
    d23c:	15006a2e 	bgeu	r2,r20,d3e8 <_malloc_r+0x5d4>
    d240:	008000b4 	movhi	r2,2
    d244:	15165815 	stw	r20,22880(r2)
    d248:	00006706 	br	d3e8 <_malloc_r+0x5d4>
    d24c:	88c00054 	ori	r3,r17,1
    d250:	80c00115 	stw	r3,4(r16)
    d254:	8463883a 	add	r17,r16,r17
    d258:	10800054 	ori	r2,r2,1
    d25c:	9c400215 	stw	r17,8(r19)
    d260:	88800115 	stw	r2,4(r17)
    d264:	9009883a 	mov	r4,r18
    d268:	001a5780 	call	1a578 <__malloc_unlock>
    d26c:	80800204 	addi	r2,r16,8
    d270:	003f7e06 	br	d06c <_malloc_r+0x258>
    d274:	81000317 	ldw	r4,12(r16)
    d278:	003f0506 	br	ce90 <_malloc_r+0x7c>
    d27c:	1006d27a 	srli	r3,r2,9
    d280:	19000168 	cmpgeui	r4,r3,5
    d284:	20005026 	beq	r4,zero,d3c8 <_malloc_r+0x5b4>
    d288:	19000568 	cmpgeui	r4,r3,21
    d28c:	20008c1e 	bne	r4,zero,d4c0 <_malloc_r+0x6ac>
    d290:	19401704 	addi	r5,r3,92
    d294:	280a90fa 	slli	r5,r5,3
    d298:	190016c4 	addi	r4,r3,91
    d29c:	994b883a 	add	r5,r19,r5
    d2a0:	28c00017 	ldw	r3,0(r5)
    d2a4:	297ffe04 	addi	r5,r5,-8
    d2a8:	28c07426 	beq	r5,r3,d47c <_malloc_r+0x668>
    d2ac:	01bfff04 	movi	r6,-4
    d2b0:	19000117 	ldw	r4,4(r3)
    d2b4:	2188703a 	and	r4,r4,r6
    d2b8:	1100022e 	bgeu	r2,r4,d2c4 <_malloc_r+0x4b0>
    d2bc:	18c00217 	ldw	r3,8(r3)
    d2c0:	28fffb1e 	bne	r5,r3,d2b0 <_malloc_r+0x49c>
    d2c4:	19400317 	ldw	r5,12(r3)
    d2c8:	98800117 	ldw	r2,4(r19)
    d2cc:	81400315 	stw	r5,12(r16)
    d2d0:	80c00215 	stw	r3,8(r16)
    d2d4:	2c000215 	stw	r16,8(r5)
    d2d8:	1c000315 	stw	r16,12(r3)
    d2dc:	003f3606 	br	cfb8 <_malloc_r+0x1a4>
    d2e0:	10c00568 	cmpgeui	r3,r2,21
    d2e4:	18004a26 	beq	r3,zero,d410 <_malloc_r+0x5fc>
    d2e8:	10c01568 	cmpgeui	r3,r2,85
    d2ec:	18007b1e 	bne	r3,zero,d4dc <_malloc_r+0x6c8>
    d2f0:	8804d33a 	srli	r2,r17,12
    d2f4:	11c01bc4 	addi	r7,r2,111
    d2f8:	380890fa 	slli	r4,r7,3
    d2fc:	12001b84 	addi	r8,r2,110
    d300:	003efd06 	br	cef8 <_malloc_r+0xe4>
    d304:	63000044 	addi	r12,r12,1
    d308:	608000cc 	andi	r2,r12,3
    d30c:	42000204 	addi	r8,r8,8
    d310:	103f3e1e 	bne	r2,zero,d00c <_malloc_r+0x1f8>
    d314:	00004506 	br	d42c <_malloc_r+0x618>
    d318:	81000217 	ldw	r4,8(r16)
    d31c:	89800054 	ori	r6,r17,1
    d320:	81800115 	stw	r6,4(r16)
    d324:	20800315 	stw	r2,12(r4)
    d328:	11000215 	stw	r4,8(r2)
    d32c:	8463883a 	add	r17,r16,r17
    d330:	9c400515 	stw	r17,20(r19)
    d334:	9c400415 	stw	r17,16(r19)
    d338:	28800054 	ori	r2,r5,1
    d33c:	88800115 	stw	r2,4(r17)
    d340:	8a400315 	stw	r9,12(r17)
    d344:	8a400215 	stw	r9,8(r17)
    d348:	80c7883a 	add	r3,r16,r3
    d34c:	19400015 	stw	r5,0(r3)
    d350:	9009883a 	mov	r4,r18
    d354:	001a5780 	call	1a578 <__malloc_unlock>
    d358:	80800204 	addi	r2,r16,8
    d35c:	003f4306 	br	d06c <_malloc_r+0x258>
    d360:	880ed0fa 	srli	r7,r17,3
    d364:	88800204 	addi	r2,r17,8
    d368:	003ebf06 	br	ce68 <_malloc_r+0x54>
    d36c:	8085883a 	add	r2,r16,r2
    d370:	10c00117 	ldw	r3,4(r2)
    d374:	9009883a 	mov	r4,r18
    d378:	18c00054 	ori	r3,r3,1
    d37c:	10c00115 	stw	r3,4(r2)
    d380:	001a5780 	call	1a578 <__malloc_unlock>
    d384:	80800204 	addi	r2,r16,8
    d388:	003f3806 	br	d06c <_malloc_r+0x258>
    d38c:	89000054 	ori	r4,r17,1
    d390:	81000115 	stw	r4,4(r16)
    d394:	8463883a 	add	r17,r16,r17
    d398:	9c400515 	stw	r17,20(r19)
    d39c:	9c400415 	stw	r17,16(r19)
    d3a0:	19000054 	ori	r4,r3,1
    d3a4:	89000115 	stw	r4,4(r17)
    d3a8:	8085883a 	add	r2,r16,r2
    d3ac:	8a400315 	stw	r9,12(r17)
    d3b0:	8a400215 	stw	r9,8(r17)
    d3b4:	10c00015 	stw	r3,0(r2)
    d3b8:	9009883a 	mov	r4,r18
    d3bc:	001a5780 	call	1a578 <__malloc_unlock>
    d3c0:	80800204 	addi	r2,r16,8
    d3c4:	003f2906 	br	d06c <_malloc_r+0x258>
    d3c8:	1006d1ba 	srli	r3,r2,6
    d3cc:	19400e44 	addi	r5,r3,57
    d3d0:	280a90fa 	slli	r5,r5,3
    d3d4:	19000e04 	addi	r4,r3,56
    d3d8:	003fb006 	br	d29c <_malloc_r+0x488>
    d3dc:	84c04626 	beq	r16,r19,d4f8 <_malloc_r+0x6e4>
    d3e0:	9c000217 	ldw	r16,8(r19)
    d3e4:	85400117 	ldw	r21,4(r16)
    d3e8:	00bfff04 	movi	r2,-4
    d3ec:	a8aa703a 	and	r21,r21,r2
    d3f0:	ac45c83a 	sub	r2,r21,r17
    d3f4:	ac400236 	bltu	r21,r17,d400 <_malloc_r+0x5ec>
    d3f8:	10c00408 	cmpgei	r3,r2,16
    d3fc:	183f931e 	bne	r3,zero,d24c <_malloc_r+0x438>
    d400:	9009883a 	mov	r4,r18
    d404:	001a5780 	call	1a578 <__malloc_unlock>
    d408:	0005883a 	mov	r2,zero
    d40c:	003f1706 	br	d06c <_malloc_r+0x258>
    d410:	11c01704 	addi	r7,r2,92
    d414:	380890fa 	slli	r4,r7,3
    d418:	120016c4 	addi	r8,r2,91
    d41c:	003eb606 	br	cef8 <_malloc_r+0xe4>
    d420:	58800217 	ldw	r2,8(r11)
    d424:	39ffffc4 	addi	r7,r7,-1
    d428:	12c0701e 	bne	r2,r11,d5ec <_malloc_r+0x7d8>
    d42c:	388000cc 	andi	r2,r7,3
    d430:	5afffe04 	addi	r11,r11,-8
    d434:	103ffa1e 	bne	r2,zero,d420 <_malloc_r+0x60c>
    d438:	98c00117 	ldw	r3,4(r19)
    d43c:	0104303a 	nor	r2,zero,r4
    d440:	10c4703a 	and	r2,r2,r3
    d444:	98800115 	stw	r2,4(r19)
    d448:	2109883a 	add	r4,r4,r4
    d44c:	113f2336 	bltu	r2,r4,d0dc <_malloc_r+0x2c8>
    d450:	203f2226 	beq	r4,zero,d0dc <_malloc_r+0x2c8>
    d454:	2086703a 	and	r3,r4,r2
    d458:	1800041e 	bne	r3,zero,d46c <_malloc_r+0x658>
    d45c:	2109883a 	add	r4,r4,r4
    d460:	2086703a 	and	r3,r4,r2
    d464:	63000104 	addi	r12,r12,4
    d468:	183ffc26 	beq	r3,zero,d45c <_malloc_r+0x648>
    d46c:	600f883a 	mov	r7,r12
    d470:	003ee206 	br	cffc <_malloc_r+0x1e8>
    d474:	ad400404 	addi	r21,r21,16
    d478:	003f2b06 	br	d128 <_malloc_r+0x314>
    d47c:	2009d0ba 	srai	r4,r4,2
    d480:	00800044 	movi	r2,1
    d484:	99800117 	ldw	r6,4(r19)
    d488:	1104983a 	sll	r2,r2,r4
    d48c:	1184b03a 	or	r2,r2,r6
    d490:	98800115 	stw	r2,4(r19)
    d494:	003f8d06 	br	d2cc <_malloc_r+0x4b8>
    d498:	bd69883a 	add	r20,r23,r21
    d49c:	0529c83a 	sub	r20,zero,r20
    d4a0:	a503ffcc 	andi	r20,r20,4095
    d4a4:	a00b883a 	mov	r5,r20
    d4a8:	9009883a 	mov	r4,r18
    d4ac:	000d8580 	call	d858 <_sbrk_r>
    d4b0:	10ffffe0 	cmpeqi	r3,r2,-1
    d4b4:	183f3f26 	beq	r3,zero,d1b4 <_malloc_r+0x3a0>
    d4b8:	0029883a 	mov	r20,zero
    d4bc:	003f3f06 	br	d1bc <_malloc_r+0x3a8>
    d4c0:	19001568 	cmpgeui	r4,r3,85
    d4c4:	2000201e 	bne	r4,zero,d548 <_malloc_r+0x734>
    d4c8:	1006d33a 	srli	r3,r2,12
    d4cc:	19401bc4 	addi	r5,r3,111
    d4d0:	280a90fa 	slli	r5,r5,3
    d4d4:	19001b84 	addi	r4,r3,110
    d4d8:	003f7006 	br	d29c <_malloc_r+0x488>
    d4dc:	10c05568 	cmpgeui	r3,r2,341
    d4e0:	1800201e 	bne	r3,zero,d564 <_malloc_r+0x750>
    d4e4:	8804d3fa 	srli	r2,r17,15
    d4e8:	11c01e04 	addi	r7,r2,120
    d4ec:	380890fa 	slli	r4,r7,3
    d4f0:	12001dc4 	addi	r8,r2,119
    d4f4:	003e8006 	br	cef8 <_malloc_r+0xe4>
    d4f8:	008000b4 	movhi	r2,2
    d4fc:	10d67217 	ldw	r3,22984(r2)
    d500:	a8c7883a 	add	r3,r21,r3
    d504:	10d67215 	stw	r3,22984(r2)
    d508:	003f1406 	br	d15c <_malloc_r+0x348>
    d50c:	e083ffcc 	andi	r2,fp,4095
    d510:	103f121e 	bne	r2,zero,d15c <_malloc_r+0x348>
    d514:	9c000217 	ldw	r16,8(r19)
    d518:	b56b883a 	add	r21,r22,r21
    d51c:	ad400054 	ori	r21,r21,1
    d520:	85400115 	stw	r21,4(r16)
    d524:	003f3e06 	br	d220 <_malloc_r+0x40c>
    d528:	008000b4 	movhi	r2,2
    d52c:	15cf1815 	stw	r23,15456(r2)
    d530:	003f1206 	br	d17c <_malloc_r+0x368>
    d534:	b821883a 	mov	r16,r23
    d538:	003f3906 	br	d220 <_malloc_r+0x40c>
    d53c:	00800044 	movi	r2,1
    d540:	b8800115 	stw	r2,4(r23)
    d544:	003fae06 	br	d400 <_malloc_r+0x5ec>
    d548:	19005568 	cmpgeui	r4,r3,341
    d54c:	2000191e 	bne	r4,zero,d5b4 <_malloc_r+0x7a0>
    d550:	1006d3fa 	srli	r3,r2,15
    d554:	19401e04 	addi	r5,r3,120
    d558:	280a90fa 	slli	r5,r5,3
    d55c:	19001dc4 	addi	r4,r3,119
    d560:	003f4e06 	br	d29c <_malloc_r+0x488>
    d564:	10815568 	cmpgeui	r2,r2,1365
    d568:	1000191e 	bne	r2,zero,d5d0 <_malloc_r+0x7bc>
    d56c:	8804d4ba 	srli	r2,r17,18
    d570:	11c01f44 	addi	r7,r2,125
    d574:	380890fa 	slli	r4,r7,3
    d578:	12001f04 	addi	r8,r2,124
    d57c:	003e5e06 	br	cef8 <_malloc_r+0xe4>
    d580:	e73ffe04 	addi	fp,fp,-8
    d584:	af2b883a 	add	r21,r21,fp
    d588:	adebc83a 	sub	r21,r21,r23
    d58c:	0029883a 	mov	r20,zero
    d590:	003f0a06 	br	d1bc <_malloc_r+0x3a8>
    d594:	81400204 	addi	r5,r16,8
    d598:	9009883a 	mov	r4,r18
    d59c:	00135c00 	call	135c0 <_free_r>
    d5a0:	9c000217 	ldw	r16,8(r19)
    d5a4:	008000b4 	movhi	r2,2
    d5a8:	15167217 	ldw	r20,22984(r2)
    d5ac:	85400117 	ldw	r21,4(r16)
    d5b0:	003f1b06 	br	d220 <_malloc_r+0x40c>
    d5b4:	18c15568 	cmpgeui	r3,r3,1365
    d5b8:	1800091e 	bne	r3,zero,d5e0 <_malloc_r+0x7cc>
    d5bc:	1006d4ba 	srli	r3,r2,18
    d5c0:	19401f44 	addi	r5,r3,125
    d5c4:	280a90fa 	slli	r5,r5,3
    d5c8:	19001f04 	addi	r4,r3,124
    d5cc:	003f3306 	br	d29c <_malloc_r+0x488>
    d5d0:	0100fe04 	movi	r4,1016
    d5d4:	01c01fc4 	movi	r7,127
    d5d8:	02001f84 	movi	r8,126
    d5dc:	003e4606 	br	cef8 <_malloc_r+0xe4>
    d5e0:	0140fe04 	movi	r5,1016
    d5e4:	01001f84 	movi	r4,126
    d5e8:	003f2c06 	br	d29c <_malloc_r+0x488>
    d5ec:	98800117 	ldw	r2,4(r19)
    d5f0:	003f9506 	br	d448 <_malloc_r+0x634>

0000d5f4 <memcpy>:
    d5f4:	30c00430 	cmpltui	r3,r6,16
    d5f8:	2005883a 	mov	r2,r4
    d5fc:	18002d1e 	bne	r3,zero,d6b4 <memcpy+0xc0>
    d600:	2906b03a 	or	r3,r5,r4
    d604:	18c000cc 	andi	r3,r3,3
    d608:	1800351e 	bne	r3,zero,d6e0 <memcpy+0xec>
    d60c:	32fffc04 	addi	r11,r6,-16
    d610:	5816d13a 	srli	r11,r11,4
    d614:	280f883a 	mov	r7,r5
    d618:	2007883a 	mov	r3,r4
    d61c:	5ac00044 	addi	r11,r11,1
    d620:	5816913a 	slli	r11,r11,4
    d624:	22d5883a 	add	r10,r4,r11
    d628:	39000117 	ldw	r4,4(r7)
    d62c:	3a400017 	ldw	r9,0(r7)
    d630:	3a000217 	ldw	r8,8(r7)
    d634:	19000115 	stw	r4,4(r3)
    d638:	39000317 	ldw	r4,12(r7)
    d63c:	1a400015 	stw	r9,0(r3)
    d640:	1a000215 	stw	r8,8(r3)
    d644:	19000315 	stw	r4,12(r3)
    d648:	18c00404 	addi	r3,r3,16
    d64c:	39c00404 	addi	r7,r7,16
    d650:	50fff51e 	bne	r10,r3,d628 <memcpy+0x34>
    d654:	3100030c 	andi	r4,r6,12
    d658:	2acb883a 	add	r5,r5,r11
    d65c:	320003cc 	andi	r8,r6,15
    d660:	20002226 	beq	r4,zero,d6ec <memcpy+0xf8>
    d664:	280f883a 	mov	r7,r5
    d668:	1813883a 	mov	r9,r3
    d66c:	39c00104 	addi	r7,r7,4
    d670:	3abfff17 	ldw	r10,-4(r7)
    d674:	41c9c83a 	sub	r4,r8,r7
    d678:	2909883a 	add	r4,r5,r4
    d67c:	4a800015 	stw	r10,0(r9)
    d680:	21000128 	cmpgeui	r4,r4,4
    d684:	4a400104 	addi	r9,r9,4
    d688:	203ff81e 	bne	r4,zero,d66c <memcpy+0x78>
    d68c:	413fff04 	addi	r4,r8,-4
    d690:	2008d0ba 	srli	r4,r4,2
    d694:	318000cc 	andi	r6,r6,3
    d698:	31ffffc4 	addi	r7,r6,-1
    d69c:	21000044 	addi	r4,r4,1
    d6a0:	200890ba 	slli	r4,r4,2
    d6a4:	1907883a 	add	r3,r3,r4
    d6a8:	290b883a 	add	r5,r5,r4
    d6ac:	3000041e 	bne	r6,zero,d6c0 <memcpy+0xcc>
    d6b0:	f800283a 	ret
    d6b4:	2007883a 	mov	r3,r4
    d6b8:	31ffffc4 	addi	r7,r6,-1
    d6bc:	303ffc26 	beq	r6,zero,d6b0 <memcpy+0xbc>
    d6c0:	39c00044 	addi	r7,r7,1
    d6c4:	19cf883a 	add	r7,r3,r7
    d6c8:	29800003 	ldbu	r6,0(r5)
    d6cc:	18c00044 	addi	r3,r3,1
    d6d0:	29400044 	addi	r5,r5,1
    d6d4:	19bfffc5 	stb	r6,-1(r3)
    d6d8:	38fffb1e 	bne	r7,r3,d6c8 <memcpy+0xd4>
    d6dc:	f800283a 	ret
    d6e0:	31ffffc4 	addi	r7,r6,-1
    d6e4:	2007883a 	mov	r3,r4
    d6e8:	003ff506 	br	d6c0 <memcpy+0xcc>
    d6ec:	400d883a 	mov	r6,r8
    d6f0:	003ff106 	br	d6b8 <memcpy+0xc4>

0000d6f4 <_printf_r>:
    d6f4:	defffd04 	addi	sp,sp,-12
    d6f8:	2805883a 	mov	r2,r5
    d6fc:	dfc00015 	stw	ra,0(sp)
    d700:	d9800115 	stw	r6,4(sp)
    d704:	d9c00215 	stw	r7,8(sp)
    d708:	21400217 	ldw	r5,8(r4)
    d70c:	d9c00104 	addi	r7,sp,4
    d710:	100d883a 	mov	r6,r2
    d714:	000f2700 	call	f270 <___vfprintf_internal_r>
    d718:	dfc00017 	ldw	ra,0(sp)
    d71c:	dec00304 	addi	sp,sp,12
    d720:	f800283a 	ret

0000d724 <printf>:
    d724:	defffc04 	addi	sp,sp,-16
    d728:	dfc00015 	stw	ra,0(sp)
    d72c:	d9400115 	stw	r5,4(sp)
    d730:	d9800215 	stw	r6,8(sp)
    d734:	d9c00315 	stw	r7,12(sp)
    d738:	008000b4 	movhi	r2,2
    d73c:	108f1717 	ldw	r2,15452(r2)
    d740:	200b883a 	mov	r5,r4
    d744:	d9800104 	addi	r6,sp,4
    d748:	11000217 	ldw	r4,8(r2)
    d74c:	00112780 	call	11278 <__vfprintf_internal>
    d750:	dfc00017 	ldw	ra,0(sp)
    d754:	dec00404 	addi	sp,sp,16
    d758:	f800283a 	ret

0000d75c <_putchar_r>:
    d75c:	21800217 	ldw	r6,8(r4)
    d760:	00163001 	jmpi	16300 <_putc_r>

0000d764 <putchar>:
    d764:	008000b4 	movhi	r2,2
    d768:	108f1717 	ldw	r2,15452(r2)
    d76c:	200b883a 	mov	r5,r4
    d770:	11800217 	ldw	r6,8(r2)
    d774:	1009883a 	mov	r4,r2
    d778:	00163001 	jmpi	16300 <_putc_r>

0000d77c <_puts_r>:
    d77c:	defff504 	addi	sp,sp,-44
    d780:	dc000815 	stw	r16,32(sp)
    d784:	2021883a 	mov	r16,r4
    d788:	2809883a 	mov	r4,r5
    d78c:	dc400915 	stw	r17,36(sp)
    d790:	dfc00a15 	stw	ra,40(sp)
    d794:	2823883a 	mov	r17,r5
    d798:	000d8b00 	call	d8b0 <strlen>
    d79c:	11000044 	addi	r4,r2,1
    d7a0:	d8800515 	stw	r2,20(sp)
    d7a4:	00800044 	movi	r2,1
    d7a8:	00c000b4 	movhi	r3,2
    d7ac:	d8800715 	stw	r2,28(sp)
    d7b0:	d8800404 	addi	r2,sp,16
    d7b4:	18c61b04 	addi	r3,r3,6252
    d7b8:	d8800115 	stw	r2,4(sp)
    d7bc:	00800084 	movi	r2,2
    d7c0:	dc400415 	stw	r17,16(sp)
    d7c4:	d8c00615 	stw	r3,24(sp)
    d7c8:	d9000315 	stw	r4,12(sp)
    d7cc:	d8800215 	stw	r2,8(sp)
    d7d0:	81400217 	ldw	r5,8(r16)
    d7d4:	80000226 	beq	r16,zero,d7e0 <_puts_r+0x64>
    d7d8:	80800e17 	ldw	r2,56(r16)
    d7dc:	10001326 	beq	r2,zero,d82c <_puts_r+0xb0>
    d7e0:	2880030b 	ldhu	r2,12(r5)
    d7e4:	10c8000c 	andi	r3,r2,8192
    d7e8:	1800061e 	bne	r3,zero,d804 <_puts_r+0x88>
    d7ec:	28c01917 	ldw	r3,100(r5)
    d7f0:	0137ffc4 	movi	r4,-8193
    d7f4:	10880014 	ori	r2,r2,8192
    d7f8:	1906703a 	and	r3,r3,r4
    d7fc:	2880030d 	sth	r2,12(r5)
    d800:	28c01915 	stw	r3,100(r5)
    d804:	d9800104 	addi	r6,sp,4
    d808:	8009883a 	mov	r4,r16
    d80c:	00138bc0 	call	138bc <__sfvwrite_r>
    d810:	10000b1e 	bne	r2,zero,d840 <_puts_r+0xc4>
    d814:	00800284 	movi	r2,10
    d818:	dfc00a17 	ldw	ra,40(sp)
    d81c:	dc400917 	ldw	r17,36(sp)
    d820:	dc000817 	ldw	r16,32(sp)
    d824:	dec00b04 	addi	sp,sp,44
    d828:	f800283a 	ret
    d82c:	8009883a 	mov	r4,r16
    d830:	d9400015 	stw	r5,0(sp)
    d834:	001345c0 	call	1345c <__sinit>
    d838:	d9400017 	ldw	r5,0(sp)
    d83c:	003fe806 	br	d7e0 <_puts_r+0x64>
    d840:	00bfffc4 	movi	r2,-1
    d844:	003ff406 	br	d818 <_puts_r+0x9c>

0000d848 <puts>:
    d848:	008000b4 	movhi	r2,2
    d84c:	200b883a 	mov	r5,r4
    d850:	110f1717 	ldw	r4,15452(r2)
    d854:	000d77c1 	jmpi	d77c <_puts_r>

0000d858 <_sbrk_r>:
    d858:	defffe04 	addi	sp,sp,-8
    d85c:	dc000015 	stw	r16,0(sp)
    d860:	008000b4 	movhi	r2,2
    d864:	2021883a 	mov	r16,r4
    d868:	2809883a 	mov	r4,r5
    d86c:	dfc00115 	stw	ra,4(sp)
    d870:	10165b15 	stw	zero,22892(r2)
    d874:	001a9880 	call	1a988 <sbrk>
    d878:	10ffffd8 	cmpnei	r3,r2,-1
    d87c:	18000426 	beq	r3,zero,d890 <_sbrk_r+0x38>
    d880:	dfc00117 	ldw	ra,4(sp)
    d884:	dc000017 	ldw	r16,0(sp)
    d888:	dec00204 	addi	sp,sp,8
    d88c:	f800283a 	ret
    d890:	00c000b4 	movhi	r3,2
    d894:	18d65b17 	ldw	r3,22892(r3)
    d898:	183ff926 	beq	r3,zero,d880 <_sbrk_r+0x28>
    d89c:	80c00015 	stw	r3,0(r16)
    d8a0:	dfc00117 	ldw	ra,4(sp)
    d8a4:	dc000017 	ldw	r16,0(sp)
    d8a8:	dec00204 	addi	sp,sp,8
    d8ac:	f800283a 	ret

0000d8b0 <strlen>:
    d8b0:	208000cc 	andi	r2,r4,3
    d8b4:	10000926 	beq	r2,zero,d8dc <strlen+0x2c>
    d8b8:	2005883a 	mov	r2,r4
    d8bc:	00000306 	br	d8cc <strlen+0x1c>
    d8c0:	10800044 	addi	r2,r2,1
    d8c4:	10c000cc 	andi	r3,r2,3
    d8c8:	18000526 	beq	r3,zero,d8e0 <strlen+0x30>
    d8cc:	10c00007 	ldb	r3,0(r2)
    d8d0:	183ffb1e 	bne	r3,zero,d8c0 <strlen+0x10>
    d8d4:	1105c83a 	sub	r2,r2,r4
    d8d8:	f800283a 	ret
    d8dc:	2005883a 	mov	r2,r4
    d8e0:	11400017 	ldw	r5,0(r2)
    d8e4:	01ffbff4 	movhi	r7,65279
    d8e8:	39ffbfc4 	addi	r7,r7,-257
    d8ec:	29c7883a 	add	r3,r5,r7
    d8f0:	01a02074 	movhi	r6,32897
    d8f4:	014a303a 	nor	r5,zero,r5
    d8f8:	1946703a 	and	r3,r3,r5
    d8fc:	31a02004 	addi	r6,r6,-32640
    d900:	1986703a 	and	r3,r3,r6
    d904:	1800071e 	bne	r3,zero,d924 <strlen+0x74>
    d908:	11400117 	ldw	r5,4(r2)
    d90c:	10800104 	addi	r2,r2,4
    d910:	29c7883a 	add	r3,r5,r7
    d914:	014a303a 	nor	r5,zero,r5
    d918:	1946703a 	and	r3,r3,r5
    d91c:	1986703a 	and	r3,r3,r6
    d920:	183ff926 	beq	r3,zero,d908 <strlen+0x58>
    d924:	10c00007 	ldb	r3,0(r2)
    d928:	183fea26 	beq	r3,zero,d8d4 <strlen+0x24>
    d92c:	10c00047 	ldb	r3,1(r2)
    d930:	10800044 	addi	r2,r2,1
    d934:	183fe726 	beq	r3,zero,d8d4 <strlen+0x24>
    d938:	10c00047 	ldb	r3,1(r2)
    d93c:	10800044 	addi	r2,r2,1
    d940:	183ffa1e 	bne	r3,zero,d92c <strlen+0x7c>
    d944:	003fe306 	br	d8d4 <strlen+0x24>

0000d948 <_strtod_l>:
    d948:	deffdf04 	addi	sp,sp,-132
    d94c:	008000b4 	movhi	r2,2
    d950:	dd401c15 	stw	r21,112(sp)
    d954:	1546b917 	ldw	r21,6884(r2)
    d958:	dc001715 	stw	r16,92(sp)
    d95c:	2021883a 	mov	r16,r4
    d960:	a809883a 	mov	r4,r21
    d964:	df001f15 	stw	fp,124(sp)
    d968:	dd801d15 	stw	r22,116(sp)
    d96c:	dd001b15 	stw	r20,108(sp)
    d970:	282d883a 	mov	r22,r5
    d974:	dc801915 	stw	r18,100(sp)
    d978:	dc401815 	stw	r17,96(sp)
    d97c:	d9800315 	stw	r6,12(sp)
    d980:	dfc02015 	stw	ra,128(sp)
    d984:	ddc01e15 	stw	r23,120(sp)
    d988:	dcc01a15 	stw	r19,104(sp)
    d98c:	3829883a 	mov	r20,r7
    d990:	d8001315 	stw	zero,76(sp)
    d994:	000d8b00 	call	d8b0 <strlen>
    d998:	100d883a 	mov	r6,r2
    d99c:	0025883a 	mov	r18,zero
    d9a0:	0023883a 	mov	r17,zero
    d9a4:	dd801215 	stw	r22,72(sp)
    d9a8:	b039883a 	mov	fp,r22
    d9ac:	e4c00003 	ldbu	r19,0(fp)
    d9b0:	00c00074 	movhi	r3,1
    d9b4:	98803fcc 	andi	r2,r19,255
    d9b8:	100890ba 	slli	r4,r2,2
    d9bc:	10800ba8 	cmpgeui	r2,r2,46
    d9c0:	1000311e 	bne	r2,zero,da88 <_strtod_l+0x140>
    d9c4:	20c7883a 	add	r3,r4,r3
    d9c8:	18b67417 	ldw	r2,-9776(r3)
    d9cc:	1000683a 	jmp	r2
    d9d0:	0000db5c 	xori	zero,zero,877
    d9d4:	0000da88 	cmpgei	zero,zero,874
    d9d8:	0000da88 	cmpgei	zero,zero,874
    d9dc:	0000da88 	cmpgei	zero,zero,874
    d9e0:	0000da88 	cmpgei	zero,zero,874
    d9e4:	0000da88 	cmpgei	zero,zero,874
    d9e8:	0000da88 	cmpgei	zero,zero,874
    d9ec:	0000da88 	cmpgei	zero,zero,874
    d9f0:	0000da88 	cmpgei	zero,zero,874
    d9f4:	0000dbac 	andhi	zero,zero,878
    d9f8:	0000dbac 	andhi	zero,zero,878
    d9fc:	0000dbac 	andhi	zero,zero,878
    da00:	0000dbac 	andhi	zero,zero,878
    da04:	0000dbac 	andhi	zero,zero,878
    da08:	0000da88 	cmpgei	zero,zero,874
    da0c:	0000da88 	cmpgei	zero,zero,874
    da10:	0000da88 	cmpgei	zero,zero,874
    da14:	0000da88 	cmpgei	zero,zero,874
    da18:	0000da88 	cmpgei	zero,zero,874
    da1c:	0000da88 	cmpgei	zero,zero,874
    da20:	0000da88 	cmpgei	zero,zero,874
    da24:	0000da88 	cmpgei	zero,zero,874
    da28:	0000da88 	cmpgei	zero,zero,874
    da2c:	0000da88 	cmpgei	zero,zero,874
    da30:	0000da88 	cmpgei	zero,zero,874
    da34:	0000da88 	cmpgei	zero,zero,874
    da38:	0000da88 	cmpgei	zero,zero,874
    da3c:	0000da88 	cmpgei	zero,zero,874
    da40:	0000da88 	cmpgei	zero,zero,874
    da44:	0000da88 	cmpgei	zero,zero,874
    da48:	0000da88 	cmpgei	zero,zero,874
    da4c:	0000da88 	cmpgei	zero,zero,874
    da50:	0000dbac 	andhi	zero,zero,878
    da54:	0000da88 	cmpgei	zero,zero,874
    da58:	0000da88 	cmpgei	zero,zero,874
    da5c:	0000da88 	cmpgei	zero,zero,874
    da60:	0000da88 	cmpgei	zero,zero,874
    da64:	0000da88 	cmpgei	zero,zero,874
    da68:	0000da88 	cmpgei	zero,zero,874
    da6c:	0000da88 	cmpgei	zero,zero,874
    da70:	0000da88 	cmpgei	zero,zero,874
    da74:	0000da88 	cmpgei	zero,zero,874
    da78:	0000da88 	cmpgei	zero,zero,874
    da7c:	0000e758 	cmpnei	zero,zero,925
    da80:	0000da88 	cmpgei	zero,zero,874
    da84:	0000e738 	rdprs	zero,zero,924
    da88:	9cc03fcc 	andi	r19,r19,255
    da8c:	9cc0201c 	xori	r19,r19,128
    da90:	d8000415 	stw	zero,16(sp)
    da94:	9cffe004 	addi	r19,r19,-128
    da98:	98800c18 	cmpnei	r2,r19,48
    da9c:	10004626 	beq	r2,zero,dbb8 <_strtod_l+0x270>
    daa0:	0023883a 	mov	r17,zero
    daa4:	98800c08 	cmpgei	r2,r19,48
    daa8:	9825883a 	mov	r18,r19
    daac:	1003c226 	beq	r2,zero,e9b8 <_strtod_l+0x1070>
    dab0:	e029883a 	mov	r20,fp
    dab4:	0013883a 	mov	r9,zero
    dab8:	0011883a 	mov	r8,zero
    dabc:	002f883a 	mov	r23,zero
    dac0:	00000806 	br	dae4 <_strtod_l+0x19c>
    dac4:	1a3ff404 	addi	r8,r3,-48
    dac8:	a5000044 	addi	r20,r20,1
    dacc:	dd001215 	stw	r20,72(sp)
    dad0:	a4800007 	ldb	r18,0(r20)
    dad4:	bdc00044 	addi	r23,r23,1
    dad8:	90800c10 	cmplti	r2,r18,48
    dadc:	9027883a 	mov	r19,r18
    dae0:	1000791e 	bne	r2,zero,dcc8 <_strtod_l+0x380>
    dae4:	40c002a4 	muli	r3,r8,10
    dae8:	488002a4 	muli	r2,r9,10
    daec:	99000e90 	cmplti	r4,r19,58
    daf0:	b9400248 	cmpgei	r5,r23,9
    daf4:	1cc7883a 	add	r3,r3,r19
    daf8:	14c5883a 	add	r2,r2,r19
    dafc:	20000326 	beq	r4,zero,db0c <_strtod_l+0x1c4>
    db00:	283ff026 	beq	r5,zero,dac4 <_strtod_l+0x17c>
    db04:	127ff404 	addi	r9,r2,-48
    db08:	003fef06 	br	dac8 <_strtod_l+0x180>
    db0c:	a80b883a 	mov	r5,r21
    db10:	a009883a 	mov	r4,r20
    db14:	da400615 	stw	r9,24(sp)
    db18:	da000515 	stw	r8,20(sp)
    db1c:	d9800715 	stw	r6,28(sp)
    db20:	0016be00 	call	16be0 <strncmp>
    db24:	da000517 	ldw	r8,20(sp)
    db28:	da400617 	ldw	r9,24(sp)
    db2c:	10003026 	beq	r2,zero,dbf0 <_strtod_l+0x2a8>
    db30:	9cc01960 	cmpeqi	r19,r19,101
    db34:	b82b883a 	mov	r21,r23
    db38:	0005883a 	mov	r2,zero
    db3c:	0029883a 	mov	r20,zero
    db40:	000b883a 	mov	r5,zero
    db44:	9800021e 	bne	r19,zero,db50 <_strtod_l+0x208>
    db48:	90c01160 	cmpeqi	r3,r18,69
    db4c:	18006c26 	beq	r3,zero,dd00 <_strtod_l+0x3b8>
    db50:	b800a61e 	bne	r23,zero,ddec <_strtod_l+0x4a4>
    db54:	8886b03a 	or	r3,r17,r2
    db58:	1800a31e 	bne	r3,zero,dde8 <_strtod_l+0x4a0>
    db5c:	d8800317 	ldw	r2,12(sp)
    db60:	10000226 	beq	r2,zero,db6c <_strtod_l+0x224>
    db64:	d8800317 	ldw	r2,12(sp)
    db68:	15800015 	stw	r22,0(r2)
    db6c:	002d883a 	mov	r22,zero
    db70:	002b883a 	mov	r21,zero
    db74:	b005883a 	mov	r2,r22
    db78:	a807883a 	mov	r3,r21
    db7c:	dfc02017 	ldw	ra,128(sp)
    db80:	df001f17 	ldw	fp,124(sp)
    db84:	ddc01e17 	ldw	r23,120(sp)
    db88:	dd801d17 	ldw	r22,116(sp)
    db8c:	dd401c17 	ldw	r21,112(sp)
    db90:	dd001b17 	ldw	r20,108(sp)
    db94:	dcc01a17 	ldw	r19,104(sp)
    db98:	dc801917 	ldw	r18,100(sp)
    db9c:	dc401817 	ldw	r17,96(sp)
    dba0:	dc001717 	ldw	r16,92(sp)
    dba4:	dec02104 	addi	sp,sp,132
    dba8:	f800283a 	ret
    dbac:	e7000044 	addi	fp,fp,1
    dbb0:	df001215 	stw	fp,72(sp)
    dbb4:	003f7d06 	br	d9ac <_strtod_l+0x64>
    dbb8:	e0800043 	ldbu	r2,1(fp)
    dbbc:	e5c00044 	addi	r23,fp,1
    dbc0:	108037cc 	andi	r2,r2,223
    dbc4:	10801618 	cmpnei	r2,r2,88
    dbc8:	10035b26 	beq	r2,zero,e938 <_strtod_l+0xff0>
    dbcc:	ddc01215 	stw	r23,72(sp)
    dbd0:	bcc00007 	ldb	r19,0(r23)
    dbd4:	b839883a 	mov	fp,r23
    dbd8:	bdc00044 	addi	r23,r23,1
    dbdc:	98800c20 	cmpeqi	r2,r19,48
    dbe0:	103ffa1e 	bne	r2,zero,dbcc <_strtod_l+0x284>
    dbe4:	9800ca26 	beq	r19,zero,df10 <_strtod_l+0x5c8>
    dbe8:	04400044 	movi	r17,1
    dbec:	003fad06 	br	daa4 <_strtod_l+0x15c>
    dbf0:	d9800717 	ldw	r6,28(sp)
    dbf4:	a18d883a 	add	r6,r20,r6
    dbf8:	d9801215 	stw	r6,72(sp)
    dbfc:	34800007 	ldb	r18,0(r6)
    dc00:	b803dd1e 	bne	r23,zero,eb78 <_strtod_l+0x1230>
    dc04:	90800c18 	cmpnei	r2,r18,48
    dc08:	1003c71e 	bne	r2,zero,eb28 <_strtod_l+0x11e0>
    dc0c:	d8c01217 	ldw	r3,72(sp)
    dc10:	01400044 	movi	r5,1
    dc14:	28cbc83a 	sub	r5,r5,r3
    dc18:	1945883a 	add	r2,r3,r5
    dc1c:	18c00044 	addi	r3,r3,1
    dc20:	d8c01215 	stw	r3,72(sp)
    dc24:	1c800007 	ldb	r18,0(r3)
    dc28:	91000c20 	cmpeqi	r4,r18,48
    dc2c:	203ffa1e 	bne	r4,zero,dc18 <_strtod_l+0x2d0>
    dc30:	90fff3c4 	addi	r3,r18,-49
    dc34:	18c00268 	cmpgeui	r3,r3,9
    dc38:	18026a1e 	bne	r3,zero,e5e4 <_strtod_l+0xc9c>
    dc3c:	da801217 	ldw	r10,72(sp)
    dc40:	94bff404 	addi	r18,r18,-48
    dc44:	15000044 	addi	r20,r2,1
    dc48:	5039883a 	mov	fp,r10
    dc4c:	05c00044 	movi	r23,1
    dc50:	002b883a 	mov	r21,zero
    dc54:	420002a4 	muli	r8,r8,10
    dc58:	0005883a 	mov	r2,zero
    dc5c:	9211883a 	add	r8,r18,r8
    dc60:	50c00044 	addi	r3,r10,1
    dc64:	d8c01215 	stw	r3,72(sp)
    dc68:	54800047 	ldb	r18,1(r10)
    dc6c:	917ff404 	addi	r5,r18,-48
    dc70:	28c002b0 	cmpltui	r3,r5,10
    dc74:	18023326 	beq	r3,zero,e544 <_strtod_l+0xbfc>
    dc78:	da801217 	ldw	r10,72(sp)
    dc7c:	10800044 	addi	r2,r2,1
    dc80:	2825883a 	mov	r18,r5
    dc84:	283ff626 	beq	r5,zero,dc60 <_strtod_l+0x318>
    dc88:	b8c00044 	addi	r3,r23,1
    dc8c:	11800060 	cmpeqi	r6,r2,1
    dc90:	1809883a 	mov	r4,r3
    dc94:	a0a9883a 	add	r20,r20,r2
    dc98:	3003431e 	bne	r6,zero,e9a8 <_strtod_l+0x1060>
    dc9c:	15c5883a 	add	r2,r2,r23
    dca0:	11ffffc4 	addi	r7,r2,-1
    dca4:	b9000268 	cmpgeui	r4,r23,9
    dca8:	b805883a 	mov	r2,r23
    dcac:	19800448 	cmpgei	r6,r3,17
    dcb0:	182f883a 	mov	r23,r3
    dcb4:	2003381e 	bne	r4,zero,e998 <_strtod_l+0x1050>
    dcb8:	420002a4 	muli	r8,r8,10
    dcbc:	38c33926 	beq	r7,r3,e9a4 <_strtod_l+0x105c>
    dcc0:	18c00044 	addi	r3,r3,1
    dcc4:	003ff706 	br	dca4 <_strtod_l+0x35c>
    dcc8:	a80b883a 	mov	r5,r21
    dccc:	a009883a 	mov	r4,r20
    dcd0:	da000715 	stw	r8,28(sp)
    dcd4:	da400615 	stw	r9,24(sp)
    dcd8:	d9800515 	stw	r6,20(sp)
    dcdc:	0016be00 	call	16be0 <strncmp>
    dce0:	d9800517 	ldw	r6,20(sp)
    dce4:	da400617 	ldw	r9,24(sp)
    dce8:	da000717 	ldw	r8,28(sp)
    dcec:	10009226 	beq	r2,zero,df38 <_strtod_l+0x5f0>
    dcf0:	b82b883a 	mov	r21,r23
    dcf4:	0029883a 	mov	r20,zero
    dcf8:	0005883a 	mov	r2,zero
    dcfc:	000b883a 	mov	r5,zero
    dd00:	0027883a 	mov	r19,zero
    dd04:	b8006b26 	beq	r23,zero,deb4 <_strtod_l+0x56c>
    dd08:	9d05c83a 	sub	r2,r19,r20
    dd0c:	d8800915 	stw	r2,36(sp)
    dd10:	a800011e 	bne	r21,zero,dd18 <_strtod_l+0x3d0>
    dd14:	b82b883a 	mov	r21,r23
    dd18:	b8800450 	cmplti	r2,r23,17
    dd1c:	b82d883a 	mov	r22,r23
    dd20:	1000011e 	bne	r2,zero,dd28 <_strtod_l+0x3e0>
    dd24:	05800404 	movi	r22,16
    dd28:	4009883a 	mov	r4,r8
    dd2c:	da000515 	stw	r8,20(sp)
    dd30:	da400615 	stw	r9,24(sp)
    dd34:	000ca980 	call	ca98 <__floatunsidf>
    dd38:	b9000290 	cmplti	r4,r23,10
    dd3c:	da000517 	ldw	r8,20(sp)
    dd40:	1025883a 	mov	r18,r2
    dd44:	1823883a 	mov	r17,r3
    dd48:	2000171e 	bne	r4,zero,dda8 <_strtod_l+0x460>
    dd4c:	b0bffdc4 	addi	r2,r22,-9
    dd50:	100690fa 	slli	r3,r2,3
    dd54:	008000b4 	movhi	r2,2
    dd58:	1086e604 	addi	r2,r2,7064
    dd5c:	10c5883a 	add	r2,r2,r3
    dd60:	11800017 	ldw	r6,0(r2)
    dd64:	11c00117 	ldw	r7,4(r2)
    dd68:	880b883a 	mov	r5,r17
    dd6c:	9009883a 	mov	r4,r18
    dd70:	000b98c0 	call	b98c <__muldf3>
    dd74:	da400617 	ldw	r9,24(sp)
    dd78:	1025883a 	mov	r18,r2
    dd7c:	1823883a 	mov	r17,r3
    dd80:	4809883a 	mov	r4,r9
    dd84:	000ca980 	call	ca98 <__floatunsidf>
    dd88:	9009883a 	mov	r4,r18
    dd8c:	880b883a 	mov	r5,r17
    dd90:	100d883a 	mov	r6,r2
    dd94:	180f883a 	mov	r7,r3
    dd98:	000a5fc0 	call	a5fc <__adddf3>
    dd9c:	da000517 	ldw	r8,20(sp)
    dda0:	1025883a 	mov	r18,r2
    dda4:	1823883a 	mov	r17,r3
    dda8:	b8800408 	cmpgei	r2,r23,16
    ddac:	1000681e 	bne	r2,zero,df50 <_strtod_l+0x608>
    ddb0:	9d05c83a 	sub	r2,r19,r20
    ddb4:	1002f526 	beq	r2,zero,e98c <_strtod_l+0x1044>
    ddb8:	9d05c83a 	sub	r2,r19,r20
    ddbc:	0082720e 	bge	zero,r2,e788 <_strtod_l+0xe40>
    ddc0:	108005c8 	cmpgei	r2,r2,23
    ddc4:	10035a26 	beq	r2,zero,eb30 <_strtod_l+0x11e8>
    ddc8:	00800944 	movi	r2,37
    ddcc:	15c5c83a 	sub	r2,r2,r23
    ddd0:	9d07c83a 	sub	r3,r19,r20
    ddd4:	10c36b0e 	bge	r2,r3,eb84 <_strtod_l+0x123c>
    ddd8:	bdadc83a 	sub	r22,r23,r22
    dddc:	9d05c83a 	sub	r2,r19,r20
    dde0:	b0ad883a 	add	r22,r22,r2
    dde4:	00005e06 	br	df60 <_strtod_l+0x618>
    dde8:	002f883a 	mov	r23,zero
    ddec:	dd801217 	ldw	r22,72(sp)
    ddf0:	b0c00044 	addi	r3,r22,1
    ddf4:	d8c01215 	stw	r3,72(sp)
    ddf8:	b4800047 	ldb	r18,1(r22)
    ddfc:	90c00ae0 	cmpeqi	r3,r18,43
    de00:	1801f61e 	bne	r3,zero,e5dc <_strtod_l+0xc94>
    de04:	90c00b60 	cmpeqi	r3,r18,45
    de08:	1801be1e 	bne	r3,zero,e504 <_strtod_l+0xbbc>
    de0c:	000d883a 	mov	r6,zero
    de10:	90fff404 	addi	r3,r18,-48
    de14:	18c002a8 	cmpgeui	r3,r3,10
    de18:	1801b71e 	bne	r3,zero,e4f8 <_strtod_l+0xbb0>
    de1c:	90c00c18 	cmpnei	r3,r18,48
    de20:	1800071e 	bne	r3,zero,de40 <_strtod_l+0x4f8>
    de24:	d8c01217 	ldw	r3,72(sp)
    de28:	18c00044 	addi	r3,r3,1
    de2c:	d8c01215 	stw	r3,72(sp)
    de30:	1c800007 	ldb	r18,0(r3)
    de34:	18c00044 	addi	r3,r3,1
    de38:	91000c20 	cmpeqi	r4,r18,48
    de3c:	203ffb1e 	bne	r4,zero,de2c <_strtod_l+0x4e4>
    de40:	90fff3c4 	addi	r3,r18,-49
    de44:	18c00268 	cmpgeui	r3,r3,9
    de48:	183fad1e 	bne	r3,zero,dd00 <_strtod_l+0x3b8>
    de4c:	dac01217 	ldw	r11,72(sp)
    de50:	94fff404 	addi	r19,r18,-48
    de54:	59c00044 	addi	r7,r11,1
    de58:	d9c01215 	stw	r7,72(sp)
    de5c:	5c800047 	ldb	r18,1(r11)
    de60:	90c00c08 	cmpgei	r3,r18,48
    de64:	1800071e 	bne	r3,zero,de84 <_strtod_l+0x53c>
    de68:	0002de06 	br	e9e4 <_strtod_l+0x109c>
    de6c:	39c00044 	addi	r7,r7,1
    de70:	d9c01215 	stw	r7,72(sp)
    de74:	54800047 	ldb	r18,1(r10)
    de78:	1cfff404 	addi	r19,r3,-48
    de7c:	90c00c08 	cmpgei	r3,r18,48
    de80:	18000526 	beq	r3,zero,de98 <_strtod_l+0x550>
    de84:	98c002a4 	muli	r3,r19,10
    de88:	91000e90 	cmplti	r4,r18,58
    de8c:	3815883a 	mov	r10,r7
    de90:	1c87883a 	add	r3,r3,r18
    de94:	203ff51e 	bne	r4,zero,de6c <_strtod_l+0x524>
    de98:	3ac7c83a 	sub	r3,r7,r11
    de9c:	18c00248 	cmpgei	r3,r3,9
    dea0:	1802d026 	beq	r3,zero,e9e4 <_strtod_l+0x109c>
    dea4:	04d387c4 	movi	r19,19999
    dea8:	303f9626 	beq	r6,zero,dd04 <_strtod_l+0x3bc>
    deac:	04e7c83a 	sub	r19,zero,r19
    deb0:	b83f951e 	bne	r23,zero,dd08 <_strtod_l+0x3c0>
    deb4:	8884b03a 	or	r2,r17,r2
    deb8:	1000151e 	bne	r2,zero,df10 <_strtod_l+0x5c8>
    debc:	283f271e 	bne	r5,zero,db5c <_strtod_l+0x214>
    dec0:	90801a60 	cmpeqi	r2,r18,105
    dec4:	1002cc1e 	bne	r2,zero,e9f8 <_strtod_l+0x10b0>
    dec8:	90801a88 	cmpgei	r2,r18,106
    decc:	1002421e 	bne	r2,zero,e7d8 <_strtod_l+0xe90>
    ded0:	90801260 	cmpeqi	r2,r18,73
    ded4:	1002c81e 	bne	r2,zero,e9f8 <_strtod_l+0x10b0>
    ded8:	948013a0 	cmpeqi	r18,r18,78
    dedc:	903f1f26 	beq	r18,zero,db5c <_strtod_l+0x214>
    dee0:	014000b4 	movhi	r5,2
    dee4:	29461f04 	addi	r5,r5,6268
    dee8:	d9001204 	addi	r4,sp,72
    deec:	00148200 	call	14820 <__match>
    def0:	103f1a26 	beq	r2,zero,db5c <_strtod_l+0x214>
    def4:	d8801217 	ldw	r2,72(sp)
    def8:	10800007 	ldb	r2,0(r2)
    defc:	10800a18 	cmpnei	r2,r2,40
    df00:	1003b526 	beq	r2,zero,edd8 <_strtod_l+0x1490>
    df04:	002d883a 	mov	r22,zero
    df08:	055ffe34 	movhi	r21,32760
    df0c:	00000206 	br	df18 <_strtod_l+0x5d0>
    df10:	002d883a 	mov	r22,zero
    df14:	002b883a 	mov	r21,zero
    df18:	d8c00317 	ldw	r3,12(sp)
    df1c:	18000226 	beq	r3,zero,df28 <_strtod_l+0x5e0>
    df20:	d8801217 	ldw	r2,72(sp)
    df24:	18800015 	stw	r2,0(r3)
    df28:	d8800417 	ldw	r2,16(sp)
    df2c:	103f1126 	beq	r2,zero,db74 <_strtod_l+0x22c>
    df30:	ad60003c 	xorhi	r21,r21,32768
    df34:	003f0f06 	br	db74 <_strtod_l+0x22c>
    df38:	a18d883a 	add	r6,r20,r6
    df3c:	d9801215 	stw	r6,72(sp)
    df40:	34800007 	ldb	r18,0(r6)
    df44:	b82b883a 	mov	r21,r23
    df48:	0029883a 	mov	r20,zero
    df4c:	003f4706 	br	dc6c <_strtod_l+0x324>
    df50:	bdadc83a 	sub	r22,r23,r22
    df54:	9d05c83a 	sub	r2,r19,r20
    df58:	b0ad883a 	add	r22,r22,r2
    df5c:	0582210e 	bge	zero,r22,e7e4 <_strtod_l+0xe9c>
    df60:	b08003cc 	andi	r2,r22,15
    df64:	10000d26 	beq	r2,zero,df9c <_strtod_l+0x654>
    df68:	100690fa 	slli	r3,r2,3
    df6c:	008000b4 	movhi	r2,2
    df70:	1086e604 	addi	r2,r2,7064
    df74:	10c5883a 	add	r2,r2,r3
    df78:	11000017 	ldw	r4,0(r2)
    df7c:	11400117 	ldw	r5,4(r2)
    df80:	900d883a 	mov	r6,r18
    df84:	880f883a 	mov	r7,r17
    df88:	da000515 	stw	r8,20(sp)
    df8c:	000b98c0 	call	b98c <__muldf3>
    df90:	da000517 	ldw	r8,20(sp)
    df94:	1025883a 	mov	r18,r2
    df98:	1823883a 	mov	r17,r3
    df9c:	027ffc04 	movi	r9,-16
    dfa0:	b26c703a 	and	r22,r22,r9
    dfa4:	b0003f26 	beq	r22,zero,e0a4 <_strtod_l+0x75c>
    dfa8:	b0804d50 	cmplti	r2,r22,309
    dfac:	10025d26 	beq	r2,zero,e924 <_strtod_l+0xfdc>
    dfb0:	b013d13a 	srai	r9,r22,4
    dfb4:	48800090 	cmplti	r2,r9,2
    dfb8:	1003821e 	bne	r2,zero,edc4 <_strtod_l+0x147c>
    dfbc:	008000b4 	movhi	r2,2
    dfc0:	1086dc04 	addi	r2,r2,7024
    dfc4:	002d883a 	mov	r22,zero
    dfc8:	9009883a 	mov	r4,r18
    dfcc:	880b883a 	mov	r5,r17
    dfd0:	dc000715 	stw	r16,28(sp)
    dfd4:	dc800815 	stw	r18,32(sp)
    dfd8:	d8800515 	stw	r2,20(sp)
    dfdc:	b025883a 	mov	r18,r22
    dfe0:	0007883a 	mov	r3,zero
    dfe4:	882d883a 	mov	r22,r17
    dfe8:	da000615 	stw	r8,24(sp)
    dfec:	4821883a 	mov	r16,r9
    dff0:	1023883a 	mov	r17,r2
    dff4:	8080004c 	andi	r2,r16,1
    dff8:	8021d07a 	srai	r16,r16,1
    dffc:	10000626 	beq	r2,zero,e018 <_strtod_l+0x6d0>
    e000:	89800017 	ldw	r6,0(r17)
    e004:	89c00117 	ldw	r7,4(r17)
    e008:	000b98c0 	call	b98c <__muldf3>
    e00c:	180b883a 	mov	r5,r3
    e010:	1009883a 	mov	r4,r2
    e014:	00c00044 	movi	r3,1
    e018:	81800058 	cmpnei	r6,r16,1
    e01c:	94800044 	addi	r18,r18,1
    e020:	8c400204 	addi	r17,r17,8
    e024:	303ff31e 	bne	r6,zero,dff4 <_strtod_l+0x6ac>
    e028:	18c03fcc 	andi	r3,r3,255
    e02c:	b023883a 	mov	r17,r22
    e030:	da000617 	ldw	r8,24(sp)
    e034:	902d883a 	mov	r22,r18
    e038:	dc000717 	ldw	r16,28(sp)
    e03c:	dc800817 	ldw	r18,32(sp)
    e040:	18000226 	beq	r3,zero,e04c <_strtod_l+0x704>
    e044:	2025883a 	mov	r18,r4
    e048:	2823883a 	mov	r17,r5
    e04c:	d8800517 	ldw	r2,20(sp)
    e050:	b01690fa 	slli	r11,r22,3
    e054:	01ff2c34 	movhi	r7,64688
    e058:	900d883a 	mov	r6,r18
    e05c:	12d7883a 	add	r11,r2,r11
    e060:	59000017 	ldw	r4,0(r11)
    e064:	59400117 	ldw	r5,4(r11)
    e068:	89cf883a 	add	r7,r17,r7
    e06c:	da000615 	stw	r8,24(sp)
    e070:	000b98c0 	call	b98c <__muldf3>
    e074:	191ffc2c 	andhi	r4,r3,32752
    e078:	015f2834 	movhi	r5,31904
    e07c:	1025883a 	mov	r18,r2
    e080:	29022836 	bltu	r5,r4,e924 <_strtod_l+0xfdc>
    e084:	009f2434 	movhi	r2,31888
    e088:	da000617 	ldw	r8,24(sp)
    e08c:	11030e2e 	bgeu	r2,r4,ecc8 <_strtod_l+0x1380>
    e090:	045ffc34 	movhi	r17,32752
    e094:	8c7fffc4 	addi	r17,r17,-1
    e098:	04bfffc4 	movi	r18,-1
    e09c:	d8001015 	stw	zero,64(sp)
    e0a0:	00000106 	br	e0a8 <_strtod_l+0x760>
    e0a4:	d8001015 	stw	zero,64(sp)
    e0a8:	da000015 	stw	r8,0(sp)
    e0ac:	b80f883a 	mov	r7,r23
    e0b0:	a80d883a 	mov	r6,r21
    e0b4:	e00b883a 	mov	r5,fp
    e0b8:	8009883a 	mov	r4,r16
    e0bc:	00153a00 	call	153a0 <__s2b>
    e0c0:	d8800715 	stw	r2,28(sp)
    e0c4:	10021726 	beq	r2,zero,e924 <_strtod_l+0xfdc>
    e0c8:	d8c00917 	ldw	r3,36(sp)
    e0cc:	a4e7c83a 	sub	r19,r20,r19
    e0d0:	1805d7fa 	srai	r2,r3,31
    e0d4:	d8c00815 	stw	r3,32(sp)
    e0d8:	9884703a 	and	r2,r19,r2
    e0dc:	d8800515 	stw	r2,20(sp)
    e0e0:	18019f16 	blt	r3,zero,e760 <_strtod_l+0xe18>
    e0e4:	d8c00717 	ldw	r3,28(sp)
    e0e8:	00800434 	movhi	r2,16
    e0ec:	dd401017 	ldw	r21,64(sp)
    e0f0:	18c00304 	addi	r3,r3,12
    e0f4:	10bfffc4 	addi	r2,r2,-1
    e0f8:	002f883a 	mov	r23,zero
    e0fc:	0027883a 	mov	r19,zero
    e100:	d8c00d15 	stw	r3,52(sp)
    e104:	d8801115 	stw	r2,68(sp)
    e108:	dd800717 	ldw	r22,28(sp)
    e10c:	8009883a 	mov	r4,r16
    e110:	b1400117 	ldw	r5,4(r22)
    e114:	00151a00 	call	151a0 <_Balloc>
    e118:	1029883a 	mov	r20,r2
    e11c:	1000d126 	beq	r2,zero,e464 <_strtod_l+0xb1c>
    e120:	b1800417 	ldw	r6,16(r22)
    e124:	d9400d17 	ldw	r5,52(sp)
    e128:	11000304 	addi	r4,r2,12
    e12c:	31800084 	addi	r6,r6,2
    e130:	300c90ba 	slli	r6,r6,2
    e134:	dc800b15 	stw	r18,44(sp)
    e138:	dc400a15 	stw	r17,40(sp)
    e13c:	000d5f40 	call	d5f4 <memcpy>
    e140:	d8801504 	addi	r2,sp,84
    e144:	d9c01404 	addi	r7,sp,80
    e148:	d8800015 	stw	r2,0(sp)
    e14c:	900b883a 	mov	r5,r18
    e150:	880d883a 	mov	r6,r17
    e154:	8009883a 	mov	r4,r16
    e158:	0015fa80 	call	15fa8 <__d2b>
    e15c:	d8801315 	stw	r2,76(sp)
    e160:	1000b526 	beq	r2,zero,e438 <_strtod_l+0xaf0>
    e164:	01400044 	movi	r5,1
    e168:	8009883a 	mov	r4,r16
    e16c:	00155ec0 	call	155ec <__i2b>
    e170:	1027883a 	mov	r19,r2
    e174:	1000bb26 	beq	r2,zero,e464 <_strtod_l+0xb1c>
    e178:	d8801417 	ldw	r2,80(sp)
    e17c:	1000d216 	blt	r2,zero,e4c8 <_strtod_l+0xb80>
    e180:	d8c00517 	ldw	r3,20(sp)
    e184:	d9c00817 	ldw	r7,32(sp)
    e188:	10f9883a 	add	fp,r2,r3
    e18c:	d9001517 	ldw	r4,84(sp)
    e190:	1545c83a 	sub	r2,r2,r21
    e194:	00c00d84 	movi	r3,54
    e198:	1105883a 	add	r2,r2,r4
    e19c:	10bfffc4 	addi	r2,r2,-1
    e1a0:	117f0088 	cmpgei	r5,r2,-1022
    e1a4:	1907c83a 	sub	r3,r3,r4
    e1a8:	2800b71e 	bne	r5,zero,e488 <_strtod_l+0xb40>
    e1ac:	05bf0084 	movi	r22,-1022
    e1b0:	b089c83a 	sub	r4,r22,r2
    e1b4:	21400808 	cmpgei	r5,r4,32
    e1b8:	1907c83a 	sub	r3,r3,r4
    e1bc:	2800c61e 	bne	r5,zero,e4d8 <_strtod_l+0xb90>
    e1c0:	05800044 	movi	r22,1
    e1c4:	b104983a 	sll	r2,r22,r4
    e1c8:	d8000e15 	stw	zero,56(sp)
    e1cc:	d8800c15 	stw	r2,48(sp)
    e1d0:	38cf883a 	add	r7,r7,r3
    e1d4:	e0c7883a 	add	r3,fp,r3
    e1d8:	a9ed883a 	add	r22,r21,r7
    e1dc:	e005883a 	mov	r2,fp
    e1e0:	1f00010e 	bge	r3,fp,e1e8 <_strtod_l+0x8a0>
    e1e4:	1805883a 	mov	r2,r3
    e1e8:	b080010e 	bge	r22,r2,e1f0 <_strtod_l+0x8a8>
    e1ec:	b005883a 	mov	r2,r22
    e1f0:	0080030e 	bge	zero,r2,e200 <_strtod_l+0x8b8>
    e1f4:	1887c83a 	sub	r3,r3,r2
    e1f8:	b0adc83a 	sub	r22,r22,r2
    e1fc:	e0b9c83a 	sub	fp,fp,r2
    e200:	d9800517 	ldw	r6,20(sp)
    e204:	01806f16 	blt	zero,r6,e3c4 <_strtod_l+0xa7c>
    e208:	00c08516 	blt	zero,r3,e420 <_strtod_l+0xad8>
    e20c:	d8800917 	ldw	r2,36(sp)
    e210:	00808e16 	blt	zero,r2,e44c <_strtod_l+0xb04>
    e214:	05809516 	blt	zero,r22,e46c <_strtod_l+0xb24>
    e218:	0700060e 	bge	zero,fp,e234 <_strtod_l+0x8ec>
    e21c:	980b883a 	mov	r5,r19
    e220:	e00d883a 	mov	r6,fp
    e224:	8009883a 	mov	r4,r16
    e228:	0015a380 	call	15a38 <__lshift>
    e22c:	1027883a 	mov	r19,r2
    e230:	10008c26 	beq	r2,zero,e464 <_strtod_l+0xb1c>
    e234:	d9401317 	ldw	r5,76(sp)
    e238:	a00d883a 	mov	r6,r20
    e23c:	8009883a 	mov	r4,r16
    e240:	0015c180 	call	15c18 <__mdiff>
    e244:	102f883a 	mov	r23,r2
    e248:	10008626 	beq	r2,zero,e464 <_strtod_l+0xb1c>
    e24c:	10800317 	ldw	r2,12(r2)
    e250:	980b883a 	mov	r5,r19
    e254:	b8000315 	stw	zero,12(r23)
    e258:	b809883a 	mov	r4,r23
    e25c:	d8800615 	stw	r2,24(sp)
    e260:	0015bc00 	call	15bc0 <__mcmp>
    e264:	1002a916 	blt	r2,zero,ed0c <_strtod_l+0x13c4>
    e268:	10026026 	beq	r2,zero,ebec <_strtod_l+0x12a4>
    e26c:	980b883a 	mov	r5,r19
    e270:	b809883a 	mov	r4,r23
    e274:	001610c0 	call	1610c <__ratio>
    e278:	000d883a 	mov	r6,zero
    e27c:	01d00034 	movhi	r7,16384
    e280:	1009883a 	mov	r4,r2
    e284:	180b883a 	mov	r5,r3
    e288:	1039883a 	mov	fp,r2
    e28c:	182d883a 	mov	r22,r3
    e290:	000b8a40 	call	b8a4 <__ledf2>
    e294:	00808016 	blt	zero,r2,e498 <_strtod_l+0xb50>
    e298:	d8800617 	ldw	r2,24(sp)
    e29c:	10009e26 	beq	r2,zero,e518 <_strtod_l+0xbd0>
    e2a0:	0011883a 	mov	r8,zero
    e2a4:	024ffc34 	movhi	r9,16368
    e2a8:	d8000c15 	stw	zero,48(sp)
    e2ac:	058ffc34 	movhi	r22,16368
    e2b0:	8f1ffc2c 	andhi	fp,r17,32752
    e2b4:	009ff834 	movhi	r2,32736
    e2b8:	e080a626 	beq	fp,r2,e554 <_strtod_l+0xc0c>
    e2bc:	a8001d26 	beq	r21,zero,e334 <_strtod_l+0x9ec>
    e2c0:	0081a834 	movhi	r2,1696
    e2c4:	17001b36 	bltu	r2,fp,e334 <_strtod_l+0x9ec>
    e2c8:	d9000c17 	ldw	r4,48(sp)
    e2cc:	01d07834 	movhi	r7,16864
    e2d0:	01bff034 	movhi	r6,65472
    e2d4:	39ffffc4 	addi	r7,r7,-1
    e2d8:	b00b883a 	mov	r5,r22
    e2dc:	da400b15 	stw	r9,44(sp)
    e2e0:	da000a15 	stw	r8,40(sp)
    e2e4:	000b8a40 	call	b8a4 <__ledf2>
    e2e8:	da000a17 	ldw	r8,40(sp)
    e2ec:	da400b17 	ldw	r9,44(sp)
    e2f0:	00800d16 	blt	zero,r2,e328 <_strtod_l+0x9e0>
    e2f4:	d9000c17 	ldw	r4,48(sp)
    e2f8:	b00b883a 	mov	r5,r22
    e2fc:	001906c0 	call	1906c <__fixunsdfsi>
    e300:	1009883a 	mov	r4,r2
    e304:	1000011e 	bne	r2,zero,e30c <_strtod_l+0x9c4>
    e308:	01000044 	movi	r4,1
    e30c:	000ca980 	call	ca98 <__floatunsidf>
    e310:	1011883a 	mov	r8,r2
    e314:	d8800c15 	stw	r2,48(sp)
    e318:	d8800617 	ldw	r2,24(sp)
    e31c:	182d883a 	mov	r22,r3
    e320:	1001b31e 	bne	r2,zero,e9f0 <_strtod_l+0x10a8>
    e324:	1a60003c 	xorhi	r9,r3,32768
    e328:	0081ac34 	movhi	r2,1712
    e32c:	4893883a 	add	r9,r9,r2
    e330:	4f13c83a 	sub	r9,r9,fp
    e334:	9009883a 	mov	r4,r18
    e338:	880b883a 	mov	r5,r17
    e33c:	da400b15 	stw	r9,44(sp)
    e340:	da000a15 	stw	r8,40(sp)
    e344:	0015e440 	call	15e44 <__ulp>
    e348:	da000a17 	ldw	r8,40(sp)
    e34c:	da400b17 	ldw	r9,44(sp)
    e350:	100d883a 	mov	r6,r2
    e354:	4009883a 	mov	r4,r8
    e358:	480b883a 	mov	r5,r9
    e35c:	180f883a 	mov	r7,r3
    e360:	000b98c0 	call	b98c <__muldf3>
    e364:	900d883a 	mov	r6,r18
    e368:	880f883a 	mov	r7,r17
    e36c:	1009883a 	mov	r4,r2
    e370:	180b883a 	mov	r5,r3
    e374:	000a5fc0 	call	a5fc <__adddf3>
    e378:	1823883a 	mov	r17,r3
    e37c:	1025883a 	mov	r18,r2
    e380:	1811883a 	mov	r8,r3
    e384:	a800021e 	bne	r21,zero,e390 <_strtod_l+0xa48>
    e388:	409ffc2c 	andhi	r2,r8,32752
    e38c:	e0809b26 	beq	fp,r2,e5fc <_strtod_l+0xcb4>
    e390:	d9401317 	ldw	r5,76(sp)
    e394:	8009883a 	mov	r4,r16
    e398:	00152440 	call	15244 <_Bfree>
    e39c:	a00b883a 	mov	r5,r20
    e3a0:	8009883a 	mov	r4,r16
    e3a4:	00152440 	call	15244 <_Bfree>
    e3a8:	980b883a 	mov	r5,r19
    e3ac:	8009883a 	mov	r4,r16
    e3b0:	00152440 	call	15244 <_Bfree>
    e3b4:	b80b883a 	mov	r5,r23
    e3b8:	8009883a 	mov	r4,r16
    e3bc:	00152440 	call	15244 <_Bfree>
    e3c0:	003f5106 	br	e108 <_strtod_l+0x7c0>
    e3c4:	980b883a 	mov	r5,r19
    e3c8:	8009883a 	mov	r4,r16
    e3cc:	d8c00615 	stw	r3,24(sp)
    e3d0:	00158f00 	call	158f0 <__pow5mult>
    e3d4:	d8c00617 	ldw	r3,24(sp)
    e3d8:	1027883a 	mov	r19,r2
    e3dc:	10002126 	beq	r2,zero,e464 <_strtod_l+0xb1c>
    e3e0:	d9801317 	ldw	r6,76(sp)
    e3e4:	100b883a 	mov	r5,r2
    e3e8:	8009883a 	mov	r4,r16
    e3ec:	d8c00615 	stw	r3,24(sp)
    e3f0:	001569c0 	call	1569c <__multiply>
    e3f4:	d8c00617 	ldw	r3,24(sp)
    e3f8:	10001a26 	beq	r2,zero,e464 <_strtod_l+0xb1c>
    e3fc:	d9401317 	ldw	r5,76(sp)
    e400:	8009883a 	mov	r4,r16
    e404:	d8800f15 	stw	r2,60(sp)
    e408:	d8c00615 	stw	r3,24(sp)
    e40c:	00152440 	call	15244 <_Bfree>
    e410:	d8800f17 	ldw	r2,60(sp)
    e414:	d8c00617 	ldw	r3,24(sp)
    e418:	d8801315 	stw	r2,76(sp)
    e41c:	00ff7b0e 	bge	zero,r3,e20c <_strtod_l+0x8c4>
    e420:	d9401317 	ldw	r5,76(sp)
    e424:	180d883a 	mov	r6,r3
    e428:	8009883a 	mov	r4,r16
    e42c:	0015a380 	call	15a38 <__lshift>
    e430:	d8801315 	stw	r2,76(sp)
    e434:	103f751e 	bne	r2,zero,e20c <_strtod_l+0x8c4>
    e438:	00c00884 	movi	r3,34
    e43c:	80c00015 	stw	r3,0(r16)
    e440:	002d883a 	mov	r22,zero
    e444:	055ffc34 	movhi	r21,32752
    e448:	00009406 	br	e69c <_strtod_l+0xd54>
    e44c:	d9800817 	ldw	r6,32(sp)
    e450:	a00b883a 	mov	r5,r20
    e454:	8009883a 	mov	r4,r16
    e458:	00158f00 	call	158f0 <__pow5mult>
    e45c:	1029883a 	mov	r20,r2
    e460:	103f6c1e 	bne	r2,zero,e214 <_strtod_l+0x8cc>
    e464:	d8801317 	ldw	r2,76(sp)
    e468:	003ff306 	br	e438 <_strtod_l+0xaf0>
    e46c:	a00b883a 	mov	r5,r20
    e470:	b00d883a 	mov	r6,r22
    e474:	8009883a 	mov	r4,r16
    e478:	0015a380 	call	15a38 <__lshift>
    e47c:	1029883a 	mov	r20,r2
    e480:	103f651e 	bne	r2,zero,e218 <_strtod_l+0x8d0>
    e484:	003ff706 	br	e464 <_strtod_l+0xb1c>
    e488:	00800044 	movi	r2,1
    e48c:	d8000e15 	stw	zero,56(sp)
    e490:	d8800c15 	stw	r2,48(sp)
    e494:	003f4e06 	br	e1d0 <_strtod_l+0x888>
    e498:	b00b883a 	mov	r5,r22
    e49c:	000d883a 	mov	r6,zero
    e4a0:	01cff834 	movhi	r7,16352
    e4a4:	e009883a 	mov	r4,fp
    e4a8:	000b98c0 	call	b98c <__muldf3>
    e4ac:	1011883a 	mov	r8,r2
    e4b0:	d8800c15 	stw	r2,48(sp)
    e4b4:	d8800617 	ldw	r2,24(sp)
    e4b8:	182d883a 	mov	r22,r3
    e4bc:	10001f1e 	bne	r2,zero,e53c <_strtod_l+0xbf4>
    e4c0:	1a60003c 	xorhi	r9,r3,32768
    e4c4:	003f7a06 	br	e2b0 <_strtod_l+0x968>
    e4c8:	d8c00817 	ldw	r3,32(sp)
    e4cc:	df000517 	ldw	fp,20(sp)
    e4d0:	188fc83a 	sub	r7,r3,r2
    e4d4:	003f2d06 	br	e18c <_strtod_l+0x844>
    e4d8:	013ef884 	movi	r4,-1054
    e4dc:	2085c83a 	sub	r2,r4,r2
    e4e0:	01000044 	movi	r4,1
    e4e4:	2084983a 	sll	r2,r4,r2
    e4e8:	d8800e15 	stw	r2,56(sp)
    e4ec:	00800044 	movi	r2,1
    e4f0:	d8800c15 	stw	r2,48(sp)
    e4f4:	003f3606 	br	e1d0 <_strtod_l+0x888>
    e4f8:	dd801215 	stw	r22,72(sp)
    e4fc:	0027883a 	mov	r19,zero
    e500:	003e0006 	br	dd04 <_strtod_l+0x3bc>
    e504:	01800044 	movi	r6,1
    e508:	b0c00084 	addi	r3,r22,2
    e50c:	d8c01215 	stw	r3,72(sp)
    e510:	b4800087 	ldb	r18,2(r22)
    e514:	003e3e06 	br	de10 <_strtod_l+0x4c8>
    e518:	90007026 	beq	r18,zero,e6dc <_strtod_l+0xd94>
    e51c:	90800058 	cmpnei	r2,r18,1
    e520:	1000011e 	bne	r2,zero,e528 <_strtod_l+0xbe0>
    e524:	88021926 	beq	r17,zero,ed8c <_strtod_l+0x1444>
    e528:	0011883a 	mov	r8,zero
    e52c:	026ffc34 	movhi	r9,49136
    e530:	d8000c15 	stw	zero,48(sp)
    e534:	058ffc34 	movhi	r22,16368
    e538:	003f5d06 	br	e2b0 <_strtod_l+0x968>
    e53c:	1813883a 	mov	r9,r3
    e540:	003f5b06 	br	e2b0 <_strtod_l+0x968>
    e544:	90c01960 	cmpeqi	r3,r18,101
    e548:	01400044 	movi	r5,1
    e54c:	183e271e 	bne	r3,zero,ddec <_strtod_l+0x4a4>
    e550:	003d7d06 	br	db48 <_strtod_l+0x200>
    e554:	00bf2c34 	movhi	r2,64688
    e558:	88a3883a 	add	r17,r17,r2
    e55c:	9009883a 	mov	r4,r18
    e560:	880b883a 	mov	r5,r17
    e564:	da400f15 	stw	r9,60(sp)
    e568:	da000e15 	stw	r8,56(sp)
    e56c:	0015e440 	call	15e44 <__ulp>
    e570:	da000e17 	ldw	r8,56(sp)
    e574:	da400f17 	ldw	r9,60(sp)
    e578:	100d883a 	mov	r6,r2
    e57c:	4009883a 	mov	r4,r8
    e580:	480b883a 	mov	r5,r9
    e584:	180f883a 	mov	r7,r3
    e588:	000b98c0 	call	b98c <__muldf3>
    e58c:	900d883a 	mov	r6,r18
    e590:	1009883a 	mov	r4,r2
    e594:	180b883a 	mov	r5,r3
    e598:	880f883a 	mov	r7,r17
    e59c:	000a5fc0 	call	a5fc <__adddf3>
    e5a0:	195ffc2c 	andhi	r5,r3,32752
    e5a4:	011f2834 	movhi	r4,31904
    e5a8:	1025883a 	mov	r18,r2
    e5ac:	29005e36 	bltu	r5,r4,e728 <_strtod_l+0xde0>
    e5b0:	d8c00a17 	ldw	r3,40(sp)
    e5b4:	009ffc34 	movhi	r2,32752
    e5b8:	10bfffc4 	addi	r2,r2,-1
    e5bc:	1880031e 	bne	r3,r2,e5cc <_strtod_l+0xc84>
    e5c0:	d8800b17 	ldw	r2,44(sp)
    e5c4:	10bfffd8 	cmpnei	r2,r2,-1
    e5c8:	103fa626 	beq	r2,zero,e464 <_strtod_l+0xb1c>
    e5cc:	045ffc34 	movhi	r17,32752
    e5d0:	8c7fffc4 	addi	r17,r17,-1
    e5d4:	04bfffc4 	movi	r18,-1
    e5d8:	003f6d06 	br	e390 <_strtod_l+0xa48>
    e5dc:	000d883a 	mov	r6,zero
    e5e0:	003fc906 	br	e508 <_strtod_l+0xbc0>
    e5e4:	90c01960 	cmpeqi	r3,r18,101
    e5e8:	1800771e 	bne	r3,zero,e7c8 <_strtod_l+0xe80>
    e5ec:	90c01160 	cmpeqi	r3,r18,69
    e5f0:	1800751e 	bne	r3,zero,e7c8 <_strtod_l+0xe80>
    e5f4:	01400044 	movi	r5,1
    e5f8:	003e2e06 	br	deb4 <_strtod_l+0x56c>
    e5fc:	df000c17 	ldw	fp,48(sp)
    e600:	b00b883a 	mov	r5,r22
    e604:	da000a15 	stw	r8,40(sp)
    e608:	e009883a 	mov	r4,fp
    e60c:	00190e00 	call	190e0 <__fixdfdi>
    e610:	1009883a 	mov	r4,r2
    e614:	180b883a 	mov	r5,r3
    e618:	00191e40 	call	191e4 <__floatdidf>
    e61c:	e009883a 	mov	r4,fp
    e620:	b00b883a 	mov	r5,r22
    e624:	100d883a 	mov	r6,r2
    e628:	180f883a 	mov	r7,r3
    e62c:	000c0000 	call	c000 <__subdf3>
    e630:	d9000617 	ldw	r4,24(sp)
    e634:	d9401117 	ldw	r5,68(sp)
    e638:	da000a17 	ldw	r8,40(sp)
    e63c:	2488b03a 	or	r4,r4,r18
    e640:	1039883a 	mov	fp,r2
    e644:	4150703a 	and	r8,r8,r5
    e648:	2210b03a 	or	r8,r4,r8
    e64c:	182d883a 	mov	r22,r3
    e650:	01a52834 	movhi	r6,38048
    e654:	40004426 	beq	r8,zero,e768 <_strtod_l+0xe20>
    e658:	01cff834 	movhi	r7,16352
    e65c:	318d6544 	addi	r6,r6,13717
    e660:	39ffffc4 	addi	r7,r7,-1
    e664:	1009883a 	mov	r4,r2
    e668:	180b883a 	mov	r5,r3
    e66c:	000b8a40 	call	b8a4 <__ledf2>
    e670:	10000716 	blt	r2,zero,e690 <_strtod_l+0xd48>
    e674:	018d6c34 	movhi	r6,13744
    e678:	31b94d44 	addi	r6,r6,-6859
    e67c:	01cff834 	movhi	r7,16352
    e680:	e009883a 	mov	r4,fp
    e684:	b00b883a 	mov	r5,r22
    e688:	000b7bc0 	call	b7bc <__gedf2>
    e68c:	00bf400e 	bge	zero,r2,e390 <_strtod_l+0xa48>
    e690:	d8801317 	ldw	r2,76(sp)
    e694:	902d883a 	mov	r22,r18
    e698:	882b883a 	mov	r21,r17
    e69c:	100b883a 	mov	r5,r2
    e6a0:	8009883a 	mov	r4,r16
    e6a4:	00152440 	call	15244 <_Bfree>
    e6a8:	a00b883a 	mov	r5,r20
    e6ac:	8009883a 	mov	r4,r16
    e6b0:	00152440 	call	15244 <_Bfree>
    e6b4:	980b883a 	mov	r5,r19
    e6b8:	8009883a 	mov	r4,r16
    e6bc:	00152440 	call	15244 <_Bfree>
    e6c0:	d9400717 	ldw	r5,28(sp)
    e6c4:	8009883a 	mov	r4,r16
    e6c8:	00152440 	call	15244 <_Bfree>
    e6cc:	b80b883a 	mov	r5,r23
    e6d0:	8009883a 	mov	r4,r16
    e6d4:	00152440 	call	15244 <_Bfree>
    e6d8:	003e0f06 	br	df18 <_strtod_l+0x5d0>
    e6dc:	d8801117 	ldw	r2,68(sp)
    e6e0:	8884703a 	and	r2,r17,r2
    e6e4:	103f901e 	bne	r2,zero,e528 <_strtod_l+0xbe0>
    e6e8:	000d883a 	mov	r6,zero
    e6ec:	01cffc34 	movhi	r7,16368
    e6f0:	e009883a 	mov	r4,fp
    e6f4:	b00b883a 	mov	r5,r22
    e6f8:	000b8a40 	call	b8a4 <__ledf2>
    e6fc:	10011916 	blt	r2,zero,eb64 <_strtod_l+0x121c>
    e700:	b00b883a 	mov	r5,r22
    e704:	000d883a 	mov	r6,zero
    e708:	01cff834 	movhi	r7,16352
    e70c:	e009883a 	mov	r4,fp
    e710:	000b98c0 	call	b98c <__muldf3>
    e714:	d8800c15 	stw	r2,48(sp)
    e718:	182d883a 	mov	r22,r3
    e71c:	1011883a 	mov	r8,r2
    e720:	1a60003c 	xorhi	r9,r3,32768
    e724:	003ee206 	br	e2b0 <_strtod_l+0x968>
    e728:	0440d434 	movhi	r17,848
    e72c:	1c63883a 	add	r17,r3,r17
    e730:	8811883a 	mov	r8,r17
    e734:	003f1306 	br	e384 <_strtod_l+0xa3c>
    e738:	00800044 	movi	r2,1
    e73c:	d8800415 	stw	r2,16(sp)
    e740:	e0800044 	addi	r2,fp,1
    e744:	d8801215 	stw	r2,72(sp)
    e748:	e4c00047 	ldb	r19,1(fp)
    e74c:	983d0326 	beq	r19,zero,db5c <_strtod_l+0x214>
    e750:	1039883a 	mov	fp,r2
    e754:	003cd006 	br	da98 <_strtod_l+0x150>
    e758:	d8000415 	stw	zero,16(sp)
    e75c:	003ff806 	br	e740 <_strtod_l+0xdf8>
    e760:	d8000815 	stw	zero,32(sp)
    e764:	003e5f06 	br	e0e4 <_strtod_l+0x79c>
    e768:	01cff434 	movhi	r7,16336
    e76c:	318d6544 	addi	r6,r6,13717
    e770:	39ffffc4 	addi	r7,r7,-1
    e774:	1009883a 	mov	r4,r2
    e778:	180b883a 	mov	r5,r3
    e77c:	000b8a40 	call	b8a4 <__ledf2>
    e780:	103f030e 	bge	r2,zero,e390 <_strtod_l+0xa48>
    e784:	003fc206 	br	e690 <_strtod_l+0xd48>
    e788:	9d05c83a 	sub	r2,r19,r20
    e78c:	10bffa90 	cmplti	r2,r2,-22
    e790:	103def1e 	bne	r2,zero,df50 <_strtod_l+0x608>
    e794:	a4c5c83a 	sub	r2,r20,r19
    e798:	100690fa 	slli	r3,r2,3
    e79c:	008000b4 	movhi	r2,2
    e7a0:	1086e604 	addi	r2,r2,7064
    e7a4:	10c5883a 	add	r2,r2,r3
    e7a8:	11800017 	ldw	r6,0(r2)
    e7ac:	11c00117 	ldw	r7,4(r2)
    e7b0:	9009883a 	mov	r4,r18
    e7b4:	880b883a 	mov	r5,r17
    e7b8:	000aeec0 	call	aeec <__divdf3>
    e7bc:	102d883a 	mov	r22,r2
    e7c0:	182b883a 	mov	r21,r3
    e7c4:	003dd406 	br	df18 <_strtod_l+0x5d0>
    e7c8:	002b883a 	mov	r21,zero
    e7cc:	0029883a 	mov	r20,zero
    e7d0:	01400044 	movi	r5,1
    e7d4:	003cdf06 	br	db54 <_strtod_l+0x20c>
    e7d8:	94801ba0 	cmpeqi	r18,r18,110
    e7dc:	903dc01e 	bne	r18,zero,dee0 <_strtod_l+0x598>
    e7e0:	003cde06 	br	db5c <_strtod_l+0x214>
    e7e4:	b03e2f26 	beq	r22,zero,e0a4 <_strtod_l+0x75c>
    e7e8:	05adc83a 	sub	r22,zero,r22
    e7ec:	b08003cc 	andi	r2,r22,15
    e7f0:	10000d26 	beq	r2,zero,e828 <_strtod_l+0xee0>
    e7f4:	100490fa 	slli	r2,r2,3
    e7f8:	00c000b4 	movhi	r3,2
    e7fc:	18c6e604 	addi	r3,r3,7064
    e800:	1885883a 	add	r2,r3,r2
    e804:	11800017 	ldw	r6,0(r2)
    e808:	11c00117 	ldw	r7,4(r2)
    e80c:	9009883a 	mov	r4,r18
    e810:	880b883a 	mov	r5,r17
    e814:	da000515 	stw	r8,20(sp)
    e818:	000aeec0 	call	aeec <__divdf3>
    e81c:	da000517 	ldw	r8,20(sp)
    e820:	1025883a 	mov	r18,r2
    e824:	1823883a 	mov	r17,r3
    e828:	b02dd13a 	srai	r22,r22,4
    e82c:	b03e1d26 	beq	r22,zero,e0a4 <_strtod_l+0x75c>
    e830:	b0800808 	cmpgei	r2,r22,32
    e834:	1000361e 	bne	r2,zero,e910 <_strtod_l+0xfc8>
    e838:	b080040c 	andi	r2,r22,16
    e83c:	d8801015 	stw	r2,64(sp)
    e840:	10000226 	beq	r2,zero,e84c <_strtod_l+0xf04>
    e844:	00801a84 	movi	r2,106
    e848:	d8801015 	stw	r2,64(sp)
    e84c:	024000b4 	movhi	r9,2
    e850:	880b883a 	mov	r5,r17
    e854:	4a462a04 	addi	r9,r9,6312
    e858:	dc000615 	stw	r16,24(sp)
    e85c:	b023883a 	mov	r17,r22
    e860:	9009883a 	mov	r4,r18
    e864:	0007883a 	mov	r3,zero
    e868:	da000515 	stw	r8,20(sp)
    e86c:	4821883a 	mov	r16,r9
    e870:	282d883a 	mov	r22,r5
    e874:	8880004c 	andi	r2,r17,1
    e878:	8823d07a 	srai	r17,r17,1
    e87c:	10000626 	beq	r2,zero,e898 <_strtod_l+0xf50>
    e880:	81800017 	ldw	r6,0(r16)
    e884:	81c00117 	ldw	r7,4(r16)
    e888:	000b98c0 	call	b98c <__muldf3>
    e88c:	180b883a 	mov	r5,r3
    e890:	1009883a 	mov	r4,r2
    e894:	00c00044 	movi	r3,1
    e898:	84000204 	addi	r16,r16,8
    e89c:	883ff51e 	bne	r17,zero,e874 <_strtod_l+0xf2c>
    e8a0:	18c03fcc 	andi	r3,r3,255
    e8a4:	da000517 	ldw	r8,20(sp)
    e8a8:	dc000617 	ldw	r16,24(sp)
    e8ac:	b023883a 	mov	r17,r22
    e8b0:	18000226 	beq	r3,zero,e8bc <_strtod_l+0xf74>
    e8b4:	2025883a 	mov	r18,r4
    e8b8:	2823883a 	mov	r17,r5
    e8bc:	d8801017 	ldw	r2,64(sp)
    e8c0:	10000b26 	beq	r2,zero,e8f0 <_strtod_l+0xfa8>
    e8c4:	8806d53a 	srli	r3,r17,20
    e8c8:	00801ac4 	movi	r2,107
    e8cc:	18c1ffcc 	andi	r3,r3,2047
    e8d0:	10c5c83a 	sub	r2,r2,r3
    e8d4:	0080060e 	bge	zero,r2,e8f0 <_strtod_l+0xfa8>
    e8d8:	11000810 	cmplti	r4,r2,32
    e8dc:	20017b1e 	bne	r4,zero,eecc <_strtod_l+0x1584>
    e8e0:	10800d50 	cmplti	r2,r2,53
    e8e4:	0025883a 	mov	r18,zero
    e8e8:	1001851e 	bne	r2,zero,ef00 <_strtod_l+0x15b8>
    e8ec:	0440dc34 	movhi	r17,880
    e8f0:	000d883a 	mov	r6,zero
    e8f4:	000f883a 	mov	r7,zero
    e8f8:	9009883a 	mov	r4,r18
    e8fc:	880b883a 	mov	r5,r17
    e900:	da000515 	stw	r8,20(sp)
    e904:	000b73c0 	call	b73c <__eqdf2>
    e908:	da000517 	ldw	r8,20(sp)
    e90c:	103de61e 	bne	r2,zero,e0a8 <_strtod_l+0x760>
    e910:	00800884 	movi	r2,34
    e914:	80800015 	stw	r2,0(r16)
    e918:	002d883a 	mov	r22,zero
    e91c:	002b883a 	mov	r21,zero
    e920:	003d7d06 	br	df18 <_strtod_l+0x5d0>
    e924:	00800884 	movi	r2,34
    e928:	80800015 	stw	r2,0(r16)
    e92c:	002d883a 	mov	r22,zero
    e930:	055ffc34 	movhi	r21,32752
    e934:	003d7806 	br	df18 <_strtod_l+0x5d0>
    e938:	d8800417 	ldw	r2,16(sp)
    e93c:	018000b4 	movhi	r6,2
    e940:	dd000215 	stw	r20,8(sp)
    e944:	d8800115 	stw	r2,4(sp)
    e948:	d8801304 	addi	r2,sp,76
    e94c:	d8800015 	stw	r2,0(sp)
    e950:	d9c01404 	addi	r7,sp,80
    e954:	31862504 	addi	r6,r6,6292
    e958:	d9401204 	addi	r5,sp,72
    e95c:	8009883a 	mov	r4,r16
    e960:	0013f5c0 	call	13f5c <__gethex>
    e964:	14c001cc 	andi	r19,r2,7
    e968:	983d6926 	beq	r19,zero,df10 <_strtod_l+0x5c8>
    e96c:	98c00198 	cmpnei	r3,r19,6
    e970:	18003f1e 	bne	r3,zero,ea70 <_strtod_l+0x1128>
    e974:	d8800317 	ldw	r2,12(sp)
    e978:	103c7c26 	beq	r2,zero,db6c <_strtod_l+0x224>
    e97c:	15c00015 	stw	r23,0(r2)
    e980:	002d883a 	mov	r22,zero
    e984:	002b883a 	mov	r21,zero
    e988:	003c7a06 	br	db74 <_strtod_l+0x22c>
    e98c:	902d883a 	mov	r22,r18
    e990:	882b883a 	mov	r21,r17
    e994:	003d6006 	br	df18 <_strtod_l+0x5d0>
    e998:	303cc81e 	bne	r6,zero,dcbc <_strtod_l+0x374>
    e99c:	4a4002a4 	muli	r9,r9,10
    e9a0:	003cc606 	br	dcbc <_strtod_l+0x374>
    e9a4:	11000084 	addi	r4,r2,2
    e9a8:	bdc00248 	cmpgei	r23,r23,9
    e9ac:	b800231e 	bne	r23,zero,ea3c <_strtod_l+0x10f4>
    e9b0:	202f883a 	mov	r23,r4
    e9b4:	003ca706 	br	dc54 <_strtod_l+0x30c>
    e9b8:	a80b883a 	mov	r5,r21
    e9bc:	e009883a 	mov	r4,fp
    e9c0:	d9800515 	stw	r6,20(sp)
    e9c4:	0016be00 	call	16be0 <strncmp>
    e9c8:	d9800517 	ldw	r6,20(sp)
    e9cc:	10002226 	beq	r2,zero,ea58 <_strtod_l+0x1110>
    e9d0:	002b883a 	mov	r21,zero
    e9d4:	0013883a 	mov	r9,zero
    e9d8:	0011883a 	mov	r8,zero
    e9dc:	002f883a 	mov	r23,zero
    e9e0:	003cc406 	br	dcf4 <_strtod_l+0x3ac>
    e9e4:	98d38810 	cmplti	r3,r19,20000
    e9e8:	183d2f1e 	bne	r3,zero,dea8 <_strtod_l+0x560>
    e9ec:	003d2d06 	br	dea4 <_strtod_l+0x55c>
    e9f0:	1813883a 	mov	r9,r3
    e9f4:	003e4c06 	br	e328 <_strtod_l+0x9e0>
    e9f8:	014000b4 	movhi	r5,2
    e9fc:	29461c04 	addi	r5,r5,6256
    ea00:	d9001204 	addi	r4,sp,72
    ea04:	00148200 	call	14820 <__match>
    ea08:	103c5426 	beq	r2,zero,db5c <_strtod_l+0x214>
    ea0c:	d8801217 	ldw	r2,72(sp)
    ea10:	014000b4 	movhi	r5,2
    ea14:	29461d04 	addi	r5,r5,6260
    ea18:	10bfffc4 	addi	r2,r2,-1
    ea1c:	d9001204 	addi	r4,sp,72
    ea20:	d8801215 	stw	r2,72(sp)
    ea24:	00148200 	call	14820 <__match>
    ea28:	103fc01e 	bne	r2,zero,e92c <_strtod_l+0xfe4>
    ea2c:	d8801217 	ldw	r2,72(sp)
    ea30:	10800044 	addi	r2,r2,1
    ea34:	d8801215 	stw	r2,72(sp)
    ea38:	003fbc06 	br	e92c <_strtod_l+0xfe4>
    ea3c:	20800448 	cmpgei	r2,r4,17
    ea40:	1000671e 	bne	r2,zero,ebe0 <_strtod_l+0x1298>
    ea44:	4a4002a4 	muli	r9,r9,10
    ea48:	202f883a 	mov	r23,r4
    ea4c:	0005883a 	mov	r2,zero
    ea50:	2a53883a 	add	r9,r5,r9
    ea54:	003c8206 	br	dc60 <_strtod_l+0x318>
    ea58:	e18d883a 	add	r6,fp,r6
    ea5c:	d9801215 	stw	r6,72(sp)
    ea60:	34800007 	ldb	r18,0(r6)
    ea64:	0011883a 	mov	r8,zero
    ea68:	0013883a 	mov	r9,zero
    ea6c:	003c6506 	br	dc04 <_strtod_l+0x2bc>
    ea70:	d9801317 	ldw	r6,76(sp)
    ea74:	30000826 	beq	r6,zero,ea98 <_strtod_l+0x1150>
    ea78:	01400d44 	movi	r5,53
    ea7c:	d9001504 	addi	r4,sp,84
    ea80:	d8800515 	stw	r2,20(sp)
    ea84:	00162240 	call	16224 <__copybits>
    ea88:	d9401317 	ldw	r5,76(sp)
    ea8c:	8009883a 	mov	r4,r16
    ea90:	00152440 	call	15244 <_Bfree>
    ea94:	d8800517 	ldw	r2,20(sp)
    ea98:	98c001a8 	cmpgeui	r3,r19,6
    ea9c:	1800141e 	bne	r3,zero,eaf0 <_strtod_l+0x11a8>
    eaa0:	982690ba 	slli	r19,r19,2
    eaa4:	00c00074 	movhi	r3,1
    eaa8:	98c7883a 	add	r3,r19,r3
    eaac:	18faad17 	ldw	r3,-5452(r3)
    eab0:	1800683a 	jmp	r3
    eab4:	0000eaf0 	cmpltui	zero,zero,939
    eab8:	0000eacc 	andi	zero,zero,939
    eabc:	0000eb1c 	xori	zero,zero,940
    eac0:	0000eb14 	movui	zero,940
    eac4:	0000eb04 	movi	zero,940
    eac8:	0000eacc 	andi	zero,zero,939
    eacc:	d8c01417 	ldw	r3,80(sp)
    ead0:	dc401617 	ldw	r17,88(sp)
    ead4:	013ffc34 	movhi	r4,65520
    ead8:	18c10cc4 	addi	r3,r3,1075
    eadc:	1806953a 	slli	r3,r3,20
    eae0:	213fffc4 	addi	r4,r4,-1
    eae4:	dc801517 	ldw	r18,84(sp)
    eae8:	8922703a 	and	r17,r17,r4
    eaec:	88e2b03a 	or	r17,r17,r3
    eaf0:	1080020c 	andi	r2,r2,8
    eaf4:	902d883a 	mov	r22,r18
    eaf8:	103fa526 	beq	r2,zero,e990 <_strtod_l+0x1048>
    eafc:	8d600034 	orhi	r21,r17,32768
    eb00:	003d0506 	br	df18 <_strtod_l+0x5d0>
    eb04:	04600034 	movhi	r17,32768
    eb08:	8c7fffc4 	addi	r17,r17,-1
    eb0c:	04bfffc4 	movi	r18,-1
    eb10:	003ff706 	br	eaf0 <_strtod_l+0x11a8>
    eb14:	045ffc34 	movhi	r17,32752
    eb18:	003ff506 	br	eaf0 <_strtod_l+0x11a8>
    eb1c:	dc801517 	ldw	r18,84(sp)
    eb20:	dc401617 	ldw	r17,88(sp)
    eb24:	003ff206 	br	eaf0 <_strtod_l+0x11a8>
    eb28:	0005883a 	mov	r2,zero
    eb2c:	003c4006 	br	dc30 <_strtod_l+0x2e8>
    eb30:	d8800917 	ldw	r2,36(sp)
    eb34:	900d883a 	mov	r6,r18
    eb38:	880f883a 	mov	r7,r17
    eb3c:	100690fa 	slli	r3,r2,3
    eb40:	008000b4 	movhi	r2,2
    eb44:	1086e604 	addi	r2,r2,7064
    eb48:	10c5883a 	add	r2,r2,r3
    eb4c:	11000017 	ldw	r4,0(r2)
    eb50:	11400117 	ldw	r5,4(r2)
    eb54:	000b98c0 	call	b98c <__muldf3>
    eb58:	102d883a 	mov	r22,r2
    eb5c:	182b883a 	mov	r21,r3
    eb60:	003ced06 	br	df18 <_strtod_l+0x5d0>
    eb64:	0011883a 	mov	r8,zero
    eb68:	026ff834 	movhi	r9,49120
    eb6c:	d8000c15 	stw	zero,48(sp)
    eb70:	058ff834 	movhi	r22,16352
    eb74:	003dce06 	br	e2b0 <_strtod_l+0x968>
    eb78:	b82b883a 	mov	r21,r23
    eb7c:	0029883a 	mov	r20,zero
    eb80:	003c3a06 	br	dc6c <_strtod_l+0x324>
    eb84:	008003c4 	movi	r2,15
    eb88:	15efc83a 	sub	r23,r2,r23
    eb8c:	b80490fa 	slli	r2,r23,3
    eb90:	040000b4 	movhi	r16,2
    eb94:	8406e604 	addi	r16,r16,7064
    eb98:	8085883a 	add	r2,r16,r2
    eb9c:	11000017 	ldw	r4,0(r2)
    eba0:	11400117 	ldw	r5,4(r2)
    eba4:	900d883a 	mov	r6,r18
    eba8:	880f883a 	mov	r7,r17
    ebac:	000b98c0 	call	b98c <__muldf3>
    ebb0:	d9000917 	ldw	r4,36(sp)
    ebb4:	180b883a 	mov	r5,r3
    ebb8:	25efc83a 	sub	r23,r4,r23
    ebbc:	b80c90fa 	slli	r6,r23,3
    ebc0:	1009883a 	mov	r4,r2
    ebc4:	81a1883a 	add	r16,r16,r6
    ebc8:	81800017 	ldw	r6,0(r16)
    ebcc:	81c00117 	ldw	r7,4(r16)
    ebd0:	000b98c0 	call	b98c <__muldf3>
    ebd4:	102d883a 	mov	r22,r2
    ebd8:	182b883a 	mov	r21,r3
    ebdc:	003cce06 	br	df18 <_strtod_l+0x5d0>
    ebe0:	202f883a 	mov	r23,r4
    ebe4:	0005883a 	mov	r2,zero
    ebe8:	003c1d06 	br	dc60 <_strtod_l+0x318>
    ebec:	d9000617 	ldw	r4,24(sp)
    ebf0:	00c00434 	movhi	r3,16
    ebf4:	18ffffc4 	addi	r3,r3,-1
    ebf8:	dd800b17 	ldw	r22,44(sp)
    ebfc:	dd400a17 	ldw	r21,40(sp)
    ec00:	88c4703a 	and	r2,r17,r3
    ec04:	20006726 	beq	r4,zero,eda4 <_strtod_l+0x145c>
    ec08:	10c09d26 	beq	r2,r3,ee80 <_strtod_l+0x1538>
    ec0c:	d8800e17 	ldw	r2,56(sp)
    ec10:	10006826 	beq	r2,zero,edb4 <_strtod_l+0x146c>
    ec14:	1444703a 	and	r2,r2,r17
    ec18:	10001c26 	beq	r2,zero,ec8c <_strtod_l+0x1344>
    ec1c:	d8800617 	ldw	r2,24(sp)
    ec20:	9009883a 	mov	r4,r18
    ec24:	880b883a 	mov	r5,r17
    ec28:	10007626 	beq	r2,zero,ee04 <_strtod_l+0x14bc>
    ec2c:	0015e440 	call	15e44 <__ulp>
    ec30:	1009883a 	mov	r4,r2
    ec34:	d8801017 	ldw	r2,64(sp)
    ec38:	180b883a 	mov	r5,r3
    ec3c:	10000c26 	beq	r2,zero,ec70 <_strtod_l+0x1328>
    ec40:	8804d53a 	srli	r2,r17,20
    ec44:	10c1ffcc 	andi	r3,r2,2047
    ec48:	00801ac4 	movi	r2,107
    ec4c:	10c5c83a 	sub	r2,r2,r3
    ec50:	0080070e 	bge	zero,r2,ec70 <_strtod_l+0x1328>
    ec54:	1004953a 	slli	r2,r2,20
    ec58:	01cffc34 	movhi	r7,16368
    ec5c:	000d883a 	mov	r6,zero
    ec60:	11cf883a 	add	r7,r2,r7
    ec64:	000b98c0 	call	b98c <__muldf3>
    ec68:	1009883a 	mov	r4,r2
    ec6c:	180b883a 	mov	r5,r3
    ec70:	200d883a 	mov	r6,r4
    ec74:	280f883a 	mov	r7,r5
    ec78:	9009883a 	mov	r4,r18
    ec7c:	880b883a 	mov	r5,r17
    ec80:	000a5fc0 	call	a5fc <__adddf3>
    ec84:	102d883a 	mov	r22,r2
    ec88:	182b883a 	mov	r21,r3
    ec8c:	d8801017 	ldw	r2,64(sp)
    ec90:	10001c26 	beq	r2,zero,ed04 <_strtod_l+0x13bc>
    ec94:	b009883a 	mov	r4,r22
    ec98:	a80b883a 	mov	r5,r21
    ec9c:	000d883a 	mov	r6,zero
    eca0:	01ce5434 	movhi	r7,14672
    eca4:	000b98c0 	call	b98c <__muldf3>
    eca8:	182b883a 	mov	r21,r3
    ecac:	10c6b03a 	or	r3,r2,r3
    ecb0:	102d883a 	mov	r22,r2
    ecb4:	d8801317 	ldw	r2,76(sp)
    ecb8:	183e781e 	bne	r3,zero,e69c <_strtod_l+0xd54>
    ecbc:	00c00884 	movi	r3,34
    ecc0:	80c00015 	stw	r3,0(r16)
    ecc4:	003e7506 	br	e69c <_strtod_l+0xd54>
    ecc8:	0440d434 	movhi	r17,848
    eccc:	1c63883a 	add	r17,r3,r17
    ecd0:	d8001015 	stw	zero,64(sp)
    ecd4:	003cf406 	br	e0a8 <_strtod_l+0x760>
    ecd8:	9009883a 	mov	r4,r18
    ecdc:	880b883a 	mov	r5,r17
    ece0:	000c0000 	call	c000 <__subdf3>
    ece4:	000d883a 	mov	r6,zero
    ece8:	000f883a 	mov	r7,zero
    ecec:	1009883a 	mov	r4,r2
    ecf0:	180b883a 	mov	r5,r3
    ecf4:	102d883a 	mov	r22,r2
    ecf8:	182b883a 	mov	r21,r3
    ecfc:	000b73c0 	call	b73c <__eqdf2>
    ed00:	10002226 	beq	r2,zero,ed8c <_strtod_l+0x1444>
    ed04:	d8801317 	ldw	r2,76(sp)
    ed08:	003e6406 	br	e69c <_strtod_l+0xd54>
    ed0c:	d8800617 	ldw	r2,24(sp)
    ed10:	dd800b17 	ldw	r22,44(sp)
    ed14:	dd400a17 	ldw	r21,40(sp)
    ed18:	14a4b03a 	or	r18,r2,r18
    ed1c:	903fdb1e 	bne	r18,zero,ec8c <_strtod_l+0x1344>
    ed20:	00800434 	movhi	r2,16
    ed24:	10bfffc4 	addi	r2,r2,-1
    ed28:	8884703a 	and	r2,r17,r2
    ed2c:	103fd71e 	bne	r2,zero,ec8c <_strtod_l+0x1344>
    ed30:	8c5ffc2c 	andhi	r17,r17,32752
    ed34:	0081ac34 	movhi	r2,1712
    ed38:	147fd42e 	bgeu	r2,r17,ec8c <_strtod_l+0x1344>
    ed3c:	b8800517 	ldw	r2,20(r23)
    ed40:	1000031e 	bne	r2,zero,ed50 <_strtod_l+0x1408>
    ed44:	b8800417 	ldw	r2,16(r23)
    ed48:	10800090 	cmplti	r2,r2,2
    ed4c:	103fcf1e 	bne	r2,zero,ec8c <_strtod_l+0x1344>
    ed50:	b80b883a 	mov	r5,r23
    ed54:	8009883a 	mov	r4,r16
    ed58:	01800044 	movi	r6,1
    ed5c:	0015a380 	call	15a38 <__lshift>
    ed60:	980b883a 	mov	r5,r19
    ed64:	1009883a 	mov	r4,r2
    ed68:	102f883a 	mov	r23,r2
    ed6c:	0015bc00 	call	15bc0 <__mcmp>
    ed70:	00bfc60e 	bge	zero,r2,ec8c <_strtod_l+0x1344>
    ed74:	d8801017 	ldw	r2,64(sp)
    ed78:	10005a26 	beq	r2,zero,eee4 <_strtod_l+0x159c>
    ed7c:	0081ac34 	movhi	r2,1712
    ed80:	14405816 	blt	r2,r17,eee4 <_strtod_l+0x159c>
    ed84:	0080dc34 	movhi	r2,880
    ed88:	147fc216 	blt	r2,r17,ec94 <_strtod_l+0x134c>
    ed8c:	00c00884 	movi	r3,34
    ed90:	d8801317 	ldw	r2,76(sp)
    ed94:	80c00015 	stw	r3,0(r16)
    ed98:	002d883a 	mov	r22,zero
    ed9c:	002b883a 	mov	r21,zero
    eda0:	003e3e06 	br	e69c <_strtod_l+0xd54>
    eda4:	1484b03a 	or	r2,r2,r18
    eda8:	103f981e 	bne	r2,zero,ec0c <_strtod_l+0x12c4>
    edac:	8c5ffc2c 	andhi	r17,r17,32752
    edb0:	003ff006 	br	ed74 <_strtod_l+0x142c>
    edb4:	d8800c17 	ldw	r2,48(sp)
    edb8:	14b8703a 	and	fp,r2,r18
    edbc:	e03fb326 	beq	fp,zero,ec8c <_strtod_l+0x1344>
    edc0:	003f9606 	br	ec1c <_strtod_l+0x12d4>
    edc4:	008000b4 	movhi	r2,2
    edc8:	1086dc04 	addi	r2,r2,7024
    edcc:	002d883a 	mov	r22,zero
    edd0:	d8800515 	stw	r2,20(sp)
    edd4:	003c9d06 	br	e04c <_strtod_l+0x704>
    edd8:	014000b4 	movhi	r5,2
    eddc:	d9801504 	addi	r6,sp,84
    ede0:	29462004 	addi	r5,r5,6272
    ede4:	d9001204 	addi	r4,sp,72
    ede8:	00148700 	call	14870 <__hexnan>
    edec:	10800158 	cmpnei	r2,r2,5
    edf0:	103c441e 	bne	r2,zero,df04 <_strtod_l+0x5bc>
    edf4:	dd401617 	ldw	r21,88(sp)
    edf8:	dd801517 	ldw	r22,84(sp)
    edfc:	ad5ffc34 	orhi	r21,r21,32752
    ee00:	003c4506 	br	df18 <_strtod_l+0x5d0>
    ee04:	0015e440 	call	15e44 <__ulp>
    ee08:	100d883a 	mov	r6,r2
    ee0c:	d8801017 	ldw	r2,64(sp)
    ee10:	180f883a 	mov	r7,r3
    ee14:	103fb026 	beq	r2,zero,ecd8 <_strtod_l+0x1390>
    ee18:	8804d53a 	srli	r2,r17,20
    ee1c:	10c1ffcc 	andi	r3,r2,2047
    ee20:	00801ac4 	movi	r2,107
    ee24:	10c5c83a 	sub	r2,r2,r3
    ee28:	0080090e 	bge	zero,r2,ee50 <_strtod_l+0x1508>
    ee2c:	1004953a 	slli	r2,r2,20
    ee30:	380b883a 	mov	r5,r7
    ee34:	01cffc34 	movhi	r7,16368
    ee38:	3009883a 	mov	r4,r6
    ee3c:	11cf883a 	add	r7,r2,r7
    ee40:	000d883a 	mov	r6,zero
    ee44:	000b98c0 	call	b98c <__muldf3>
    ee48:	100d883a 	mov	r6,r2
    ee4c:	180f883a 	mov	r7,r3
    ee50:	9009883a 	mov	r4,r18
    ee54:	880b883a 	mov	r5,r17
    ee58:	000c0000 	call	c000 <__subdf3>
    ee5c:	000d883a 	mov	r6,zero
    ee60:	000f883a 	mov	r7,zero
    ee64:	1009883a 	mov	r4,r2
    ee68:	180b883a 	mov	r5,r3
    ee6c:	102d883a 	mov	r22,r2
    ee70:	182b883a 	mov	r21,r3
    ee74:	000b73c0 	call	b73c <__eqdf2>
    ee78:	103f861e 	bne	r2,zero,ec94 <_strtod_l+0x134c>
    ee7c:	003fc306 	br	ed8c <_strtod_l+0x1444>
    ee80:	d8801017 	ldw	r2,64(sp)
    ee84:	10001526 	beq	r2,zero,eedc <_strtod_l+0x1594>
    ee88:	889ffc2c 	andhi	r2,r17,32752
    ee8c:	00c1a834 	movhi	r3,1696
    ee90:	18801236 	bltu	r3,r2,eedc <_strtod_l+0x1594>
    ee94:	1004d53a 	srli	r2,r2,20
    ee98:	00c01ac4 	movi	r3,107
    ee9c:	1887c83a 	sub	r3,r3,r2
    eea0:	00bfffc4 	movi	r2,-1
    eea4:	10c4983a 	sll	r2,r2,r3
    eea8:	90bf581e 	bne	r18,r2,ec0c <_strtod_l+0x12c4>
    eeac:	009ffc34 	movhi	r2,32752
    eeb0:	10bfffc4 	addi	r2,r2,-1
    eeb4:	88801826 	beq	r17,r2,ef18 <_strtod_l+0x15d0>
    eeb8:	8c5ffc2c 	andhi	r17,r17,32752
    eebc:	00800434 	movhi	r2,16
    eec0:	002d883a 	mov	r22,zero
    eec4:	88ab883a 	add	r21,r17,r2
    eec8:	003f7006 	br	ec8c <_strtod_l+0x1344>
    eecc:	00ffffc4 	movi	r3,-1
    eed0:	1884983a 	sll	r2,r3,r2
    eed4:	14a4703a 	and	r18,r2,r18
    eed8:	003e8506 	br	e8f0 <_strtod_l+0xfa8>
    eedc:	00bfffc4 	movi	r2,-1
    eee0:	003ff106 	br	eea8 <_strtod_l+0x1560>
    eee4:	05400434 	movhi	r21,16
    eee8:	00bffc34 	movhi	r2,65520
    eeec:	88a3883a 	add	r17,r17,r2
    eef0:	ad7fffc4 	addi	r21,r21,-1
    eef4:	05bfffc4 	movi	r22,-1
    eef8:	8d6ab03a 	or	r21,r17,r21
    eefc:	003f6306 	br	ec8c <_strtod_l+0x1344>
    ef00:	008012c4 	movi	r2,75
    ef04:	10c7c83a 	sub	r3,r2,r3
    ef08:	00bfffc4 	movi	r2,-1
    ef0c:	10c4983a 	sll	r2,r2,r3
    ef10:	1462703a 	and	r17,r2,r17
    ef14:	003e7606 	br	e8f0 <_strtod_l+0xfa8>
    ef18:	94bfffd8 	cmpnei	r18,r18,-1
    ef1c:	903fe61e 	bne	r18,zero,eeb8 <_strtod_l+0x1570>
    ef20:	003d5006 	br	e464 <_strtod_l+0xb1c>

0000ef24 <_strtod_r>:
    ef24:	01c000b4 	movhi	r7,2
    ef28:	39ca0004 	addi	r7,r7,10240
    ef2c:	000d9481 	jmpi	d948 <_strtod_l>

0000ef30 <strtod_l>:
    ef30:	00c000b4 	movhi	r3,2
    ef34:	2005883a 	mov	r2,r4
    ef38:	190f1717 	ldw	r4,15452(r3)
    ef3c:	300f883a 	mov	r7,r6
    ef40:	280d883a 	mov	r6,r5
    ef44:	100b883a 	mov	r5,r2
    ef48:	000d9481 	jmpi	d948 <_strtod_l>

0000ef4c <strtod>:
    ef4c:	00c000b4 	movhi	r3,2
    ef50:	2005883a 	mov	r2,r4
    ef54:	190f1717 	ldw	r4,15452(r3)
    ef58:	01c000b4 	movhi	r7,2
    ef5c:	280d883a 	mov	r6,r5
    ef60:	39ca0004 	addi	r7,r7,10240
    ef64:	100b883a 	mov	r5,r2
    ef68:	000d9481 	jmpi	d948 <_strtod_l>

0000ef6c <strtof_l>:
    ef6c:	00c000b4 	movhi	r3,2
    ef70:	2005883a 	mov	r2,r4
    ef74:	190f1717 	ldw	r4,15452(r3)
    ef78:	defffa04 	addi	sp,sp,-24
    ef7c:	300f883a 	mov	r7,r6
    ef80:	280d883a 	mov	r6,r5
    ef84:	100b883a 	mov	r5,r2
    ef88:	dc400115 	stw	r17,4(sp)
    ef8c:	dc000015 	stw	r16,0(sp)
    ef90:	dfc00515 	stw	ra,20(sp)
    ef94:	dd000415 	stw	r20,16(sp)
    ef98:	dcc00315 	stw	r19,12(sp)
    ef9c:	dc800215 	stw	r18,8(sp)
    efa0:	000d9480 	call	d948 <_strtod_l>
    efa4:	100d883a 	mov	r6,r2
    efa8:	180f883a 	mov	r7,r3
    efac:	1009883a 	mov	r4,r2
    efb0:	180b883a 	mov	r5,r3
    efb4:	1023883a 	mov	r17,r2
    efb8:	1821883a 	mov	r16,r3
    efbc:	000c90c0 	call	c90c <__unorddf2>
    efc0:	10002d1e 	bne	r2,zero,f078 <strtof_l+0x10c>
    efc4:	8809883a 	mov	r4,r17
    efc8:	800b883a 	mov	r5,r16
    efcc:	04a00034 	movhi	r18,32768
    efd0:	000cc240 	call	cc24 <__truncdfsf2>
    efd4:	94bfffc4 	addi	r18,r18,-1
    efd8:	90a8703a 	and	r20,r18,r2
    efdc:	015fe034 	movhi	r5,32640
    efe0:	297fffc4 	addi	r5,r5,-1
    efe4:	a009883a 	mov	r4,r20
    efe8:	1027883a 	mov	r19,r2
    efec:	0019dcc0 	call	19dcc <__unordsf2>
    eff0:	1000181e 	bne	r2,zero,f054 <strtof_l+0xe8>
    eff4:	015fe034 	movhi	r5,32640
    eff8:	297fffc4 	addi	r5,r5,-1
    effc:	a009883a 	mov	r4,r20
    f000:	0019d180 	call	19d18 <__lesf2>
    f004:	0080130e 	bge	zero,r2,f054 <strtof_l+0xe8>
    f008:	84a0703a 	and	r16,r16,r18
    f00c:	01dffc34 	movhi	r7,32752
    f010:	01bfffc4 	movi	r6,-1
    f014:	39ffffc4 	addi	r7,r7,-1
    f018:	8809883a 	mov	r4,r17
    f01c:	800b883a 	mov	r5,r16
    f020:	000c90c0 	call	c90c <__unorddf2>
    f024:	1000071e 	bne	r2,zero,f044 <strtof_l+0xd8>
    f028:	01dffc34 	movhi	r7,32752
    f02c:	01bfffc4 	movi	r6,-1
    f030:	39ffffc4 	addi	r7,r7,-1
    f034:	8809883a 	mov	r4,r17
    f038:	800b883a 	mov	r5,r16
    f03c:	000b8a40 	call	b8a4 <__ledf2>
    f040:	00800416 	blt	zero,r2,f054 <strtof_l+0xe8>
    f044:	008000b4 	movhi	r2,2
    f048:	108f1717 	ldw	r2,15452(r2)
    f04c:	00c00884 	movi	r3,34
    f050:	10c00015 	stw	r3,0(r2)
    f054:	9805883a 	mov	r2,r19
    f058:	dfc00517 	ldw	ra,20(sp)
    f05c:	dd000417 	ldw	r20,16(sp)
    f060:	dcc00317 	ldw	r19,12(sp)
    f064:	dc800217 	ldw	r18,8(sp)
    f068:	dc400117 	ldw	r17,4(sp)
    f06c:	dc000017 	ldw	r16,0(sp)
    f070:	dec00604 	addi	sp,sp,24
    f074:	f800283a 	ret
    f078:	8000020e 	bge	r16,zero,f084 <strtof_l+0x118>
    f07c:	04fff034 	movhi	r19,65472
    f080:	003ff406 	br	f054 <strtof_l+0xe8>
    f084:	04dff034 	movhi	r19,32704
    f088:	003ff206 	br	f054 <strtof_l+0xe8>

0000f08c <strtof>:
    f08c:	00c000b4 	movhi	r3,2
    f090:	2005883a 	mov	r2,r4
    f094:	190f1717 	ldw	r4,15452(r3)
    f098:	01c000b4 	movhi	r7,2
    f09c:	defffa04 	addi	sp,sp,-24
    f0a0:	280d883a 	mov	r6,r5
    f0a4:	39ca0004 	addi	r7,r7,10240
    f0a8:	100b883a 	mov	r5,r2
    f0ac:	dc400115 	stw	r17,4(sp)
    f0b0:	dc000015 	stw	r16,0(sp)
    f0b4:	dfc00515 	stw	ra,20(sp)
    f0b8:	dd000415 	stw	r20,16(sp)
    f0bc:	dcc00315 	stw	r19,12(sp)
    f0c0:	dc800215 	stw	r18,8(sp)
    f0c4:	000d9480 	call	d948 <_strtod_l>
    f0c8:	100d883a 	mov	r6,r2
    f0cc:	180f883a 	mov	r7,r3
    f0d0:	1009883a 	mov	r4,r2
    f0d4:	180b883a 	mov	r5,r3
    f0d8:	1023883a 	mov	r17,r2
    f0dc:	1821883a 	mov	r16,r3
    f0e0:	000c90c0 	call	c90c <__unorddf2>
    f0e4:	10002d1e 	bne	r2,zero,f19c <strtof+0x110>
    f0e8:	8809883a 	mov	r4,r17
    f0ec:	800b883a 	mov	r5,r16
    f0f0:	04a00034 	movhi	r18,32768
    f0f4:	000cc240 	call	cc24 <__truncdfsf2>
    f0f8:	94bfffc4 	addi	r18,r18,-1
    f0fc:	90a8703a 	and	r20,r18,r2
    f100:	015fe034 	movhi	r5,32640
    f104:	297fffc4 	addi	r5,r5,-1
    f108:	a009883a 	mov	r4,r20
    f10c:	1027883a 	mov	r19,r2
    f110:	0019dcc0 	call	19dcc <__unordsf2>
    f114:	1000181e 	bne	r2,zero,f178 <strtof+0xec>
    f118:	015fe034 	movhi	r5,32640
    f11c:	297fffc4 	addi	r5,r5,-1
    f120:	a009883a 	mov	r4,r20
    f124:	0019d180 	call	19d18 <__lesf2>
    f128:	0080130e 	bge	zero,r2,f178 <strtof+0xec>
    f12c:	84a0703a 	and	r16,r16,r18
    f130:	01dffc34 	movhi	r7,32752
    f134:	01bfffc4 	movi	r6,-1
    f138:	39ffffc4 	addi	r7,r7,-1
    f13c:	8809883a 	mov	r4,r17
    f140:	800b883a 	mov	r5,r16
    f144:	000c90c0 	call	c90c <__unorddf2>
    f148:	1000071e 	bne	r2,zero,f168 <strtof+0xdc>
    f14c:	01dffc34 	movhi	r7,32752
    f150:	01bfffc4 	movi	r6,-1
    f154:	39ffffc4 	addi	r7,r7,-1
    f158:	8809883a 	mov	r4,r17
    f15c:	800b883a 	mov	r5,r16
    f160:	000b8a40 	call	b8a4 <__ledf2>
    f164:	00800416 	blt	zero,r2,f178 <strtof+0xec>
    f168:	008000b4 	movhi	r2,2
    f16c:	108f1717 	ldw	r2,15452(r2)
    f170:	00c00884 	movi	r3,34
    f174:	10c00015 	stw	r3,0(r2)
    f178:	9805883a 	mov	r2,r19
    f17c:	dfc00517 	ldw	ra,20(sp)
    f180:	dd000417 	ldw	r20,16(sp)
    f184:	dcc00317 	ldw	r19,12(sp)
    f188:	dc800217 	ldw	r18,8(sp)
    f18c:	dc400117 	ldw	r17,4(sp)
    f190:	dc000017 	ldw	r16,0(sp)
    f194:	dec00604 	addi	sp,sp,24
    f198:	f800283a 	ret
    f19c:	8000020e 	bge	r16,zero,f1a8 <strtof+0x11c>
    f1a0:	04fff034 	movhi	r19,65472
    f1a4:	003ff406 	br	f178 <strtof+0xec>
    f1a8:	04dff034 	movhi	r19,32704
    f1ac:	003ff206 	br	f178 <strtof+0xec>

0000f1b0 <strtok>:
    f1b0:	008000b4 	movhi	r2,2
    f1b4:	118f1717 	ldw	r6,15452(r2)
    f1b8:	01c00044 	movi	r7,1
    f1bc:	31801704 	addi	r6,r6,92
    f1c0:	000f1c41 	jmpi	f1c4 <__strtok_r>

0000f1c4 <__strtok_r>:
    f1c4:	20001d26 	beq	r4,zero,f23c <__strtok_r+0x78>
    f1c8:	22400007 	ldb	r9,0(r4)
    f1cc:	20800044 	addi	r2,r4,1
    f1d0:	2807883a 	mov	r3,r5
    f1d4:	00000106 	br	f1dc <__strtok_r+0x18>
    f1d8:	4a001126 	beq	r9,r8,f220 <__strtok_r+0x5c>
    f1dc:	1a000007 	ldb	r8,0(r3)
    f1e0:	18c00044 	addi	r3,r3,1
    f1e4:	403ffc1e 	bne	r8,zero,f1d8 <__strtok_r+0x14>
    f1e8:	48001826 	beq	r9,zero,f24c <__strtok_r+0x88>
    f1ec:	12000007 	ldb	r8,0(r2)
    f1f0:	2807883a 	mov	r3,r5
    f1f4:	10800044 	addi	r2,r2,1
    f1f8:	00000106 	br	f200 <__strtok_r+0x3c>
    f1fc:	383ffb26 	beq	r7,zero,f1ec <__strtok_r+0x28>
    f200:	19c00007 	ldb	r7,0(r3)
    f204:	18c00044 	addi	r3,r3,1
    f208:	41fffc1e 	bne	r8,r7,f1fc <__strtok_r+0x38>
    f20c:	40000726 	beq	r8,zero,f22c <__strtok_r+0x68>
    f210:	103fffc5 	stb	zero,-1(r2)
    f214:	30800015 	stw	r2,0(r6)
    f218:	2005883a 	mov	r2,r4
    f21c:	f800283a 	ret
    f220:	38000d26 	beq	r7,zero,f258 <__strtok_r+0x94>
    f224:	1009883a 	mov	r4,r2
    f228:	003fe706 	br	f1c8 <__strtok_r+0x4>
    f22c:	0005883a 	mov	r2,zero
    f230:	30800015 	stw	r2,0(r6)
    f234:	2005883a 	mov	r2,r4
    f238:	f800283a 	ret
    f23c:	31000017 	ldw	r4,0(r6)
    f240:	203fe11e 	bne	r4,zero,f1c8 <__strtok_r+0x4>
    f244:	0005883a 	mov	r2,zero
    f248:	f800283a 	ret
    f24c:	30000015 	stw	zero,0(r6)
    f250:	0005883a 	mov	r2,zero
    f254:	f800283a 	ret
    f258:	30800015 	stw	r2,0(r6)
    f25c:	20000005 	stb	zero,0(r4)
    f260:	2005883a 	mov	r2,r4
    f264:	f800283a 	ret

0000f268 <strtok_r>:
    f268:	01c00044 	movi	r7,1
    f26c:	000f1c41 	jmpi	f1c4 <__strtok_r>

0000f270 <___vfprintf_internal_r>:
    f270:	deffbf04 	addi	sp,sp,-260
    f274:	dfc04015 	stw	ra,256(sp)
    f278:	dd803d15 	stw	r22,244(sp)
    f27c:	dcc03a15 	stw	r19,232(sp)
    f280:	dc803915 	stw	r18,228(sp)
    f284:	2027883a 	mov	r19,r4
    f288:	2825883a 	mov	r18,r5
    f28c:	302d883a 	mov	r22,r6
    f290:	d9c00615 	stw	r7,24(sp)
    f294:	df003f15 	stw	fp,252(sp)
    f298:	ddc03e15 	stw	r23,248(sp)
    f29c:	dd403c15 	stw	r21,240(sp)
    f2a0:	dd003b15 	stw	r20,236(sp)
    f2a4:	dc403815 	stw	r17,224(sp)
    f2a8:	dc003715 	stw	r16,220(sp)
    f2ac:	0014c040 	call	14c04 <_localeconv_r>
    f2b0:	10800017 	ldw	r2,0(r2)
    f2b4:	1009883a 	mov	r4,r2
    f2b8:	d8800d15 	stw	r2,52(sp)
    f2bc:	000d8b00 	call	d8b0 <strlen>
    f2c0:	d8800b15 	stw	r2,44(sp)
    f2c4:	98000226 	beq	r19,zero,f2d0 <___vfprintf_internal_r+0x60>
    f2c8:	98800e17 	ldw	r2,56(r19)
    f2cc:	1001de26 	beq	r2,zero,fa48 <___vfprintf_internal_r+0x7d8>
    f2d0:	9080030b 	ldhu	r2,12(r18)
    f2d4:	10c8000c 	andi	r3,r2,8192
    f2d8:	1800061e 	bne	r3,zero,f2f4 <___vfprintf_internal_r+0x84>
    f2dc:	90c01917 	ldw	r3,100(r18)
    f2e0:	0137ffc4 	movi	r4,-8193
    f2e4:	10880014 	ori	r2,r2,8192
    f2e8:	1906703a 	and	r3,r3,r4
    f2ec:	9080030d 	sth	r2,12(r18)
    f2f0:	90c01915 	stw	r3,100(r18)
    f2f4:	10c0020c 	andi	r3,r2,8
    f2f8:	1800fa26 	beq	r3,zero,f6e4 <___vfprintf_internal_r+0x474>
    f2fc:	90c00417 	ldw	r3,16(r18)
    f300:	1800f826 	beq	r3,zero,f6e4 <___vfprintf_internal_r+0x474>
    f304:	1080068c 	andi	r2,r2,26
    f308:	10800298 	cmpnei	r2,r2,10
    f30c:	1000fd26 	beq	r2,zero,f704 <___vfprintf_internal_r+0x494>
    f310:	d8802704 	addi	r2,sp,156
    f314:	b02f883a 	mov	r23,r22
    f318:	d8801a15 	stw	r2,104(sp)
    f31c:	d8001c15 	stw	zero,112(sp)
    f320:	d8001b15 	stw	zero,108(sp)
    f324:	d8000815 	stw	zero,32(sp)
    f328:	d8000915 	stw	zero,36(sp)
    f32c:	d8000a15 	stw	zero,40(sp)
    f330:	d8000c15 	stw	zero,48(sp)
    f334:	d8001015 	stw	zero,64(sp)
    f338:	d8000515 	stw	zero,20(sp)
    f33c:	102d883a 	mov	r22,r2
    f340:	b8800007 	ldb	r2,0(r23)
    f344:	1000d526 	beq	r2,zero,f69c <___vfprintf_internal_r+0x42c>
    f348:	b821883a 	mov	r16,r23
    f34c:	00000306 	br	f35c <___vfprintf_internal_r+0xec>
    f350:	80800047 	ldb	r2,1(r16)
    f354:	84000044 	addi	r16,r16,1
    f358:	10012026 	beq	r2,zero,f7dc <___vfprintf_internal_r+0x56c>
    f35c:	10800958 	cmpnei	r2,r2,37
    f360:	103ffb1e 	bne	r2,zero,f350 <___vfprintf_internal_r+0xe0>
    f364:	85e3c83a 	sub	r17,r16,r23
    f368:	85c11e1e 	bne	r16,r23,f7e4 <___vfprintf_internal_r+0x574>
    f36c:	80800003 	ldbu	r2,0(r16)
    f370:	10803fcc 	andi	r2,r2,255
    f374:	1080201c 	xori	r2,r2,128
    f378:	10bfe004 	addi	r2,r2,-128
    f37c:	1000c726 	beq	r2,zero,f69c <___vfprintf_internal_r+0x42c>
    f380:	82c00047 	ldb	r11,1(r16)
    f384:	85c00044 	addi	r23,r16,1
    f388:	d8001345 	stb	zero,77(sp)
    f38c:	0009883a 	mov	r4,zero
    f390:	000b883a 	mov	r5,zero
    f394:	023fffc4 	movi	r8,-1
    f398:	0021883a 	mov	r16,zero
    f39c:	0019883a 	mov	r12,zero
    f3a0:	bdc00044 	addi	r23,r23,1
    f3a4:	5839883a 	mov	fp,r11
    f3a8:	e0bff804 	addi	r2,fp,-32
    f3ac:	10c01668 	cmpgeui	r3,r2,89
    f3b0:	18006a1e 	bne	r3,zero,f55c <___vfprintf_internal_r+0x2ec>
    f3b4:	100490ba 	slli	r2,r2,2
    f3b8:	00c00074 	movhi	r3,1
    f3bc:	10c7883a 	add	r3,r2,r3
    f3c0:	18bcf217 	ldw	r2,-3128(r3)
    f3c4:	1000683a 	jmp	r2
    f3c8:	0000fc6c 	andhi	zero,zero,1009
    f3cc:	0000f55c 	xori	zero,zero,981
    f3d0:	0000f55c 	xori	zero,zero,981
    f3d4:	0000fc60 	cmpeqi	zero,zero,1009
    f3d8:	0000f55c 	xori	zero,zero,981
    f3dc:	0000f55c 	xori	zero,zero,981
    f3e0:	0000f55c 	xori	zero,zero,981
    f3e4:	0000f55c 	xori	zero,zero,981
    f3e8:	0000f55c 	xori	zero,zero,981
    f3ec:	0000f55c 	xori	zero,zero,981
    f3f0:	0000faec 	andhi	zero,zero,1003
    f3f4:	0000fc50 	cmplti	zero,zero,1009
    f3f8:	0000f55c 	xori	zero,zero,981
    f3fc:	0000fb04 	movi	zero,1004
    f400:	0000fb10 	cmplti	zero,zero,1004
    f404:	0000f55c 	xori	zero,zero,981
    f408:	0000fc44 	movi	zero,1009
    f40c:	0000f52c 	andhi	zero,zero,980
    f410:	0000f52c 	andhi	zero,zero,980
    f414:	0000f52c 	andhi	zero,zero,980
    f418:	0000f52c 	andhi	zero,zero,980
    f41c:	0000f52c 	andhi	zero,zero,980
    f420:	0000f52c 	andhi	zero,zero,980
    f424:	0000f52c 	andhi	zero,zero,980
    f428:	0000f52c 	andhi	zero,zero,980
    f42c:	0000f52c 	andhi	zero,zero,980
    f430:	0000f55c 	xori	zero,zero,981
    f434:	0000f55c 	xori	zero,zero,981
    f438:	0000f55c 	xori	zero,zero,981
    f43c:	0000f55c 	xori	zero,zero,981
    f440:	0000f55c 	xori	zero,zero,981
    f444:	0000f55c 	xori	zero,zero,981
    f448:	0000f55c 	xori	zero,zero,981
    f44c:	0000f55c 	xori	zero,zero,981
    f450:	0000f55c 	xori	zero,zero,981
    f454:	0000f55c 	xori	zero,zero,981
    f458:	0000fb54 	movui	zero,1005
    f45c:	0000f840 	call	f84 <kf_bfly5+0x384>
    f460:	0000f55c 	xori	zero,zero,981
    f464:	0000f840 	call	f84 <kf_bfly5+0x384>
    f468:	0000f55c 	xori	zero,zero,981
    f46c:	0000f55c 	xori	zero,zero,981
    f470:	0000f55c 	xori	zero,zero,981
    f474:	0000f55c 	xori	zero,zero,981
    f478:	0000fdec 	andhi	zero,zero,1015
    f47c:	0000f55c 	xori	zero,zero,981
    f480:	0000f55c 	xori	zero,zero,981
    f484:	0000f774 	movhi	zero,989
    f488:	0000f55c 	xori	zero,zero,981
    f48c:	0000f55c 	xori	zero,zero,981
    f490:	0000f55c 	xori	zero,zero,981
    f494:	0000f55c 	xori	zero,zero,981
    f498:	0000f55c 	xori	zero,zero,981
    f49c:	0000f74c 	andi	zero,zero,989
    f4a0:	0000f55c 	xori	zero,zero,981
    f4a4:	0000f55c 	xori	zero,zero,981
    f4a8:	0000fe2c 	andhi	zero,zero,1016
    f4ac:	0000f55c 	xori	zero,zero,981
    f4b0:	0000f55c 	xori	zero,zero,981
    f4b4:	0000f55c 	xori	zero,zero,981
    f4b8:	0000f55c 	xori	zero,zero,981
    f4bc:	0000f55c 	xori	zero,zero,981
    f4c0:	0000f55c 	xori	zero,zero,981
    f4c4:	0000f55c 	xori	zero,zero,981
    f4c8:	0000f55c 	xori	zero,zero,981
    f4cc:	0000f55c 	xori	zero,zero,981
    f4d0:	0000f55c 	xori	zero,zero,981
    f4d4:	0000fe04 	movi	zero,1016
    f4d8:	0000fa54 	movui	zero,1001
    f4dc:	0000f840 	call	f84 <kf_bfly5+0x384>
    f4e0:	0000f840 	call	f84 <kf_bfly5+0x384>
    f4e4:	0000f840 	call	f84 <kf_bfly5+0x384>
    f4e8:	0000fdf8 	rdprs	zero,zero,1015
    f4ec:	0000fa54 	movui	zero,1001
    f4f0:	0000f55c 	xori	zero,zero,981
    f4f4:	0000f55c 	xori	zero,zero,981
    f4f8:	0000fc98 	cmpnei	zero,zero,1010
    f4fc:	0000f55c 	xori	zero,zero,981
    f500:	0000fdac 	andhi	zero,zero,1014
    f504:	0000f778 	rdprs	zero,zero,989
    f508:	0000fd6c 	andhi	zero,zero,1013
    f50c:	0000fd60 	cmpeqi	zero,zero,1013
    f510:	0000f55c 	xori	zero,zero,981
    f514:	0000fd08 	cmpgei	zero,zero,1012
    f518:	0000f55c 	xori	zero,zero,981
    f51c:	0000f750 	cmplti	zero,zero,989
    f520:	0000f55c 	xori	zero,zero,981
    f524:	0000f55c 	xori	zero,zero,981
    f528:	0000fcc0 	call	fcc <kf_bfly5+0x3cc>
    f52c:	0021883a 	mov	r16,zero
    f530:	e0bff404 	addi	r2,fp,-48
    f534:	bf000007 	ldb	fp,0(r23)
    f538:	840002a4 	muli	r16,r16,10
    f53c:	bdc00044 	addi	r23,r23,1
    f540:	1421883a 	add	r16,r2,r16
    f544:	e0bff404 	addi	r2,fp,-48
    f548:	10c002b0 	cmpltui	r3,r2,10
    f54c:	183ff91e 	bne	r3,zero,f534 <___vfprintf_internal_r+0x2c4>
    f550:	e0bff804 	addi	r2,fp,-32
    f554:	10c01668 	cmpgeui	r3,r2,89
    f558:	183f9626 	beq	r3,zero,f3b4 <___vfprintf_internal_r+0x144>
    f55c:	21003fcc 	andi	r4,r4,255
    f560:	2006521e 	bne	r4,zero,10eac <___vfprintf_internal_r+0x1c3c>
    f564:	e0004d26 	beq	fp,zero,f69c <___vfprintf_internal_r+0x42c>
    f568:	df001d05 	stb	fp,116(sp)
    f56c:	d8001345 	stb	zero,77(sp)
    f570:	05000044 	movi	r20,1
    f574:	05400044 	movi	r21,1
    f578:	dc401d04 	addi	r17,sp,116
    f57c:	db000415 	stw	r12,16(sp)
    f580:	0011883a 	mov	r8,zero
    f584:	d8000715 	stw	zero,28(sp)
    f588:	d8800417 	ldw	r2,16(sp)
    f58c:	1380008c 	andi	r14,r2,2
    f590:	70000126 	beq	r14,zero,f598 <___vfprintf_internal_r+0x328>
    f594:	a5000084 	addi	r20,r20,2
    f598:	d8800417 	ldw	r2,16(sp)
    f59c:	d8c01c17 	ldw	r3,112(sp)
    f5a0:	1340210c 	andi	r13,r2,132
    f5a4:	6800021e 	bne	r13,zero,f5b0 <___vfprintf_internal_r+0x340>
    f5a8:	850fc83a 	sub	r7,r16,r20
    f5ac:	01c36916 	blt	zero,r7,10354 <___vfprintf_internal_r+0x10e4>
    f5b0:	d8801347 	ldb	r2,77(sp)
    f5b4:	10000c26 	beq	r2,zero,f5e8 <___vfprintf_internal_r+0x378>
    f5b8:	d8801b17 	ldw	r2,108(sp)
    f5bc:	d9001344 	addi	r4,sp,77
    f5c0:	18c00044 	addi	r3,r3,1
    f5c4:	10800044 	addi	r2,r2,1
    f5c8:	b1000015 	stw	r4,0(r22)
    f5cc:	01000044 	movi	r4,1
    f5d0:	d8801b15 	stw	r2,108(sp)
    f5d4:	b1000115 	stw	r4,4(r22)
    f5d8:	d8c01c15 	stw	r3,112(sp)
    f5dc:	10800208 	cmpgei	r2,r2,8
    f5e0:	10039d1e 	bne	r2,zero,10458 <___vfprintf_internal_r+0x11e8>
    f5e4:	b5800204 	addi	r22,r22,8
    f5e8:	70000c26 	beq	r14,zero,f61c <___vfprintf_internal_r+0x3ac>
    f5ec:	d8801b17 	ldw	r2,108(sp)
    f5f0:	d9001384 	addi	r4,sp,78
    f5f4:	18c00084 	addi	r3,r3,2
    f5f8:	10800044 	addi	r2,r2,1
    f5fc:	b1000015 	stw	r4,0(r22)
    f600:	01000084 	movi	r4,2
    f604:	d8801b15 	stw	r2,108(sp)
    f608:	b1000115 	stw	r4,4(r22)
    f60c:	d8c01c15 	stw	r3,112(sp)
    f610:	10800208 	cmpgei	r2,r2,8
    f614:	10039e1e 	bne	r2,zero,10490 <___vfprintf_internal_r+0x1220>
    f618:	b5800204 	addi	r22,r22,8
    f61c:	6b402018 	cmpnei	r13,r13,128
    f620:	68025a26 	beq	r13,zero,ff8c <___vfprintf_internal_r+0xd1c>
    f624:	4551c83a 	sub	r8,r8,r21
    f628:	02029216 	blt	zero,r8,10074 <___vfprintf_internal_r+0xe04>
    f62c:	d8800417 	ldw	r2,16(sp)
    f630:	1080400c 	andi	r2,r2,256
    f634:	10020f1e 	bne	r2,zero,fe74 <___vfprintf_internal_r+0xc04>
    f638:	d8801b17 	ldw	r2,108(sp)
    f63c:	1d47883a 	add	r3,r3,r21
    f640:	b4400015 	stw	r17,0(r22)
    f644:	10800044 	addi	r2,r2,1
    f648:	b5400115 	stw	r21,4(r22)
    f64c:	d8801b15 	stw	r2,108(sp)
    f650:	d8c01c15 	stw	r3,112(sp)
    f654:	10800208 	cmpgei	r2,r2,8
    f658:	1002fb1e 	bne	r2,zero,10248 <___vfprintf_internal_r+0xfd8>
    f65c:	b5800204 	addi	r22,r22,8
    f660:	d8800417 	ldw	r2,16(sp)
    f664:	1440010c 	andi	r17,r2,4
    f668:	88000226 	beq	r17,zero,f674 <___vfprintf_internal_r+0x404>
    f66c:	8523c83a 	sub	r17,r16,r20
    f670:	0440c616 	blt	zero,r17,f98c <___vfprintf_internal_r+0x71c>
    f674:	8500010e 	bge	r16,r20,f67c <___vfprintf_internal_r+0x40c>
    f678:	a021883a 	mov	r16,r20
    f67c:	d8800517 	ldw	r2,20(sp)
    f680:	1405883a 	add	r2,r2,r16
    f684:	d8800515 	stw	r2,20(sp)
    f688:	1802c11e 	bne	r3,zero,10190 <___vfprintf_internal_r+0xf20>
    f68c:	b8800007 	ldb	r2,0(r23)
    f690:	d8001b15 	stw	zero,108(sp)
    f694:	dd802704 	addi	r22,sp,156
    f698:	103f2b1e 	bne	r2,zero,f348 <___vfprintf_internal_r+0xd8>
    f69c:	d8801c17 	ldw	r2,112(sp)
    f6a0:	1005fd1e 	bne	r2,zero,10e98 <___vfprintf_internal_r+0x1c28>
    f6a4:	9080030b 	ldhu	r2,12(r18)
    f6a8:	1080100c 	andi	r2,r2,64
    f6ac:	1006a91e 	bne	r2,zero,11154 <___vfprintf_internal_r+0x1ee4>
    f6b0:	d8800517 	ldw	r2,20(sp)
    f6b4:	dfc04017 	ldw	ra,256(sp)
    f6b8:	df003f17 	ldw	fp,252(sp)
    f6bc:	ddc03e17 	ldw	r23,248(sp)
    f6c0:	dd803d17 	ldw	r22,244(sp)
    f6c4:	dd403c17 	ldw	r21,240(sp)
    f6c8:	dd003b17 	ldw	r20,236(sp)
    f6cc:	dcc03a17 	ldw	r19,232(sp)
    f6d0:	dc803917 	ldw	r18,228(sp)
    f6d4:	dc403817 	ldw	r17,224(sp)
    f6d8:	dc003717 	ldw	r16,220(sp)
    f6dc:	dec04104 	addi	sp,sp,260
    f6e0:	f800283a 	ret
    f6e4:	900b883a 	mov	r5,r18
    f6e8:	9809883a 	mov	r4,r19
    f6ec:	00113540 	call	11354 <__swsetup_r>
    f6f0:	1006981e 	bne	r2,zero,11154 <___vfprintf_internal_r+0x1ee4>
    f6f4:	9080030b 	ldhu	r2,12(r18)
    f6f8:	1080068c 	andi	r2,r2,26
    f6fc:	10800298 	cmpnei	r2,r2,10
    f700:	103f031e 	bne	r2,zero,f310 <___vfprintf_internal_r+0xa0>
    f704:	9080038f 	ldh	r2,14(r18)
    f708:	103f0116 	blt	r2,zero,f310 <___vfprintf_internal_r+0xa0>
    f70c:	d9c00617 	ldw	r7,24(sp)
    f710:	b00d883a 	mov	r6,r22
    f714:	900b883a 	mov	r5,r18
    f718:	9809883a 	mov	r4,r19
    f71c:	dfc04017 	ldw	ra,256(sp)
    f720:	df003f17 	ldw	fp,252(sp)
    f724:	ddc03e17 	ldw	r23,248(sp)
    f728:	dd803d17 	ldw	r22,244(sp)
    f72c:	dd403c17 	ldw	r21,240(sp)
    f730:	dd003b17 	ldw	r20,236(sp)
    f734:	dcc03a17 	ldw	r19,232(sp)
    f738:	dc803917 	ldw	r18,228(sp)
    f73c:	dc403817 	ldw	r17,224(sp)
    f740:	dc003717 	ldw	r16,220(sp)
    f744:	dec04104 	addi	sp,sp,260
    f748:	00112941 	jmpi	11294 <__sbprintf>
    f74c:	63000414 	ori	r12,r12,16
    f750:	6080080c 	andi	r2,r12,32
    f754:	10008126 	beq	r2,zero,f95c <___vfprintf_internal_r+0x6ec>
    f758:	d8c00617 	ldw	r3,24(sp)
    f75c:	00800044 	movi	r2,1
    f760:	1d000017 	ldw	r20,0(r3)
    f764:	1d400117 	ldw	r21,4(r3)
    f768:	18c00204 	addi	r3,r3,8
    f76c:	d8c00615 	stw	r3,24(sp)
    f770:	00000906 	br	f798 <___vfprintf_internal_r+0x528>
    f774:	63000414 	ori	r12,r12,16
    f778:	6080080c 	andi	r2,r12,32
    f77c:	10006b26 	beq	r2,zero,f92c <___vfprintf_internal_r+0x6bc>
    f780:	d8c00617 	ldw	r3,24(sp)
    f784:	0005883a 	mov	r2,zero
    f788:	1d000017 	ldw	r20,0(r3)
    f78c:	1d400117 	ldw	r21,4(r3)
    f790:	18c00204 	addi	r3,r3,8
    f794:	d8c00615 	stw	r3,24(sp)
    f798:	d8001345 	stb	zero,77(sp)
    f79c:	40ffffe0 	cmpeqi	r3,r8,-1
    f7a0:	001b883a 	mov	r13,zero
    f7a4:	1801081e 	bne	r3,zero,fbc8 <___vfprintf_internal_r+0x958>
    f7a8:	047fdfc4 	movi	r17,-129
    f7ac:	6448703a 	and	r4,r12,r17
    f7b0:	a546b03a 	or	r3,r20,r21
    f7b4:	d9000415 	stw	r4,16(sp)
    f7b8:	1802e41e 	bne	r3,zero,1034c <___vfprintf_internal_r+0x10dc>
    f7bc:	40025e1e 	bne	r8,zero,10138 <___vfprintf_internal_r+0xec8>
    f7c0:	1003ac1e 	bne	r2,zero,10674 <___vfprintf_internal_r+0x1404>
    f7c4:	6540004c 	andi	r21,r12,1
    f7c8:	a803e226 	beq	r21,zero,10754 <___vfprintf_internal_r+0x14e4>
    f7cc:	00800c04 	movi	r2,48
    f7d0:	d88026c5 	stb	r2,155(sp)
    f7d4:	dc4026c4 	addi	r17,sp,155
    f7d8:	0000ba06 	br	fac4 <___vfprintf_internal_r+0x854>
    f7dc:	85e3c83a 	sub	r17,r16,r23
    f7e0:	85ffae26 	beq	r16,r23,f69c <___vfprintf_internal_r+0x42c>
    f7e4:	d8c01c17 	ldw	r3,112(sp)
    f7e8:	d8801b17 	ldw	r2,108(sp)
    f7ec:	b5c00015 	stw	r23,0(r22)
    f7f0:	1c47883a 	add	r3,r3,r17
    f7f4:	10800044 	addi	r2,r2,1
    f7f8:	d8801b15 	stw	r2,108(sp)
    f7fc:	b4400115 	stw	r17,4(r22)
    f800:	d8c01c15 	stw	r3,112(sp)
    f804:	10800208 	cmpgei	r2,r2,8
    f808:	1000061e 	bne	r2,zero,f824 <___vfprintf_internal_r+0x5b4>
    f80c:	b5800204 	addi	r22,r22,8
    f810:	d8c00517 	ldw	r3,20(sp)
    f814:	80800003 	ldbu	r2,0(r16)
    f818:	1c47883a 	add	r3,r3,r17
    f81c:	d8c00515 	stw	r3,20(sp)
    f820:	003ed306 	br	f370 <___vfprintf_internal_r+0x100>
    f824:	d9801a04 	addi	r6,sp,104
    f828:	900b883a 	mov	r5,r18
    f82c:	9809883a 	mov	r4,r19
    f830:	0016da40 	call	16da4 <__sprint_r>
    f834:	103f9b1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
    f838:	dd802704 	addi	r22,sp,156
    f83c:	003ff406 	br	f810 <___vfprintf_internal_r+0x5a0>
    f840:	21003fcc 	andi	r4,r4,255
    f844:	2006271e 	bne	r4,zero,110e4 <___vfprintf_internal_r+0x1e74>
    f848:	d8c00617 	ldw	r3,24(sp)
    f84c:	6080020c 	andi	r2,r12,8
    f850:	19000204 	addi	r4,r3,8
    f854:	d9000e15 	stw	r4,56(sp)
    f858:	1003c01e 	bne	r2,zero,1075c <___vfprintf_internal_r+0x14ec>
    f85c:	d8800617 	ldw	r2,24(sp)
    f860:	10c00017 	ldw	r3,0(r2)
    f864:	10800117 	ldw	r2,4(r2)
    f868:	d8c00915 	stw	r3,36(sp)
    f86c:	d8800a15 	stw	r2,40(sp)
    f870:	dd400a17 	ldw	r21,40(sp)
    f874:	dd000917 	ldw	r20,36(sp)
    f878:	00a00034 	movhi	r2,32768
    f87c:	10bfffc4 	addi	r2,r2,-1
    f880:	a8a2703a 	and	r17,r21,r2
    f884:	01dffc34 	movhi	r7,32752
    f888:	01bfffc4 	movi	r6,-1
    f88c:	39ffffc4 	addi	r7,r7,-1
    f890:	a009883a 	mov	r4,r20
    f894:	880b883a 	mov	r5,r17
    f898:	da000615 	stw	r8,24(sp)
    f89c:	db000415 	stw	r12,16(sp)
    f8a0:	000c90c0 	call	c90c <__unorddf2>
    f8a4:	db000417 	ldw	r12,16(sp)
    f8a8:	da000617 	ldw	r8,24(sp)
    f8ac:	10044b1e 	bne	r2,zero,109dc <___vfprintf_internal_r+0x176c>
    f8b0:	01dffc34 	movhi	r7,32752
    f8b4:	01bfffc4 	movi	r6,-1
    f8b8:	39ffffc4 	addi	r7,r7,-1
    f8bc:	a009883a 	mov	r4,r20
    f8c0:	880b883a 	mov	r5,r17
    f8c4:	000b8a40 	call	b8a4 <__ledf2>
    f8c8:	db000417 	ldw	r12,16(sp)
    f8cc:	da000617 	ldw	r8,24(sp)
    f8d0:	0084420e 	bge	zero,r2,109dc <___vfprintf_internal_r+0x176c>
    f8d4:	000d883a 	mov	r6,zero
    f8d8:	000f883a 	mov	r7,zero
    f8dc:	a009883a 	mov	r4,r20
    f8e0:	a80b883a 	mov	r5,r21
    f8e4:	000b8a40 	call	b8a4 <__ledf2>
    f8e8:	db000417 	ldw	r12,16(sp)
    f8ec:	10055716 	blt	r2,zero,10e4c <___vfprintf_internal_r+0x1bdc>
    f8f0:	db401343 	ldbu	r13,77(sp)
    f8f4:	e0801210 	cmplti	r2,fp,72
    f8f8:	1005451e 	bne	r2,zero,10e10 <___vfprintf_internal_r+0x1ba0>
    f8fc:	044000b4 	movhi	r17,2
    f900:	8c463504 	addi	r17,r17,6356
    f904:	00bfdfc4 	movi	r2,-129
    f908:	6084703a 	and	r2,r12,r2
    f90c:	d8800415 	stw	r2,16(sp)
    f910:	d8800e17 	ldw	r2,56(sp)
    f914:	050000c4 	movi	r20,3
    f918:	054000c4 	movi	r21,3
    f91c:	d8800615 	stw	r2,24(sp)
    f920:	0011883a 	mov	r8,zero
    f924:	d8000715 	stw	zero,28(sp)
    f928:	00006a06 	br	fad4 <___vfprintf_internal_r+0x864>
    f92c:	d8c00617 	ldw	r3,24(sp)
    f930:	6080040c 	andi	r2,r12,16
    f934:	1d000017 	ldw	r20,0(r3)
    f938:	18c00104 	addi	r3,r3,4
    f93c:	d8c00615 	stw	r3,24(sp)
    f940:	1000031e 	bne	r2,zero,f950 <___vfprintf_internal_r+0x6e0>
    f944:	6080100c 	andi	r2,r12,64
    f948:	10000126 	beq	r2,zero,f950 <___vfprintf_internal_r+0x6e0>
    f94c:	a53fffcc 	andi	r20,r20,65535
    f950:	002b883a 	mov	r21,zero
    f954:	0005883a 	mov	r2,zero
    f958:	003f8f06 	br	f798 <___vfprintf_internal_r+0x528>
    f95c:	d8c00617 	ldw	r3,24(sp)
    f960:	6080040c 	andi	r2,r12,16
    f964:	1d000017 	ldw	r20,0(r3)
    f968:	18c00104 	addi	r3,r3,4
    f96c:	d8c00615 	stw	r3,24(sp)
    f970:	1000031e 	bne	r2,zero,f980 <___vfprintf_internal_r+0x710>
    f974:	6080100c 	andi	r2,r12,64
    f978:	10000126 	beq	r2,zero,f980 <___vfprintf_internal_r+0x710>
    f97c:	a53fffcc 	andi	r20,r20,65535
    f980:	002b883a 	mov	r21,zero
    f984:	00800044 	movi	r2,1
    f988:	003f8306 	br	f798 <___vfprintf_internal_r+0x528>
    f98c:	030000b4 	movhi	r12,2
    f990:	89000450 	cmplti	r4,r17,17
    f994:	d8801b17 	ldw	r2,108(sp)
    f998:	63064904 	addi	r12,r12,6436
    f99c:	20001b1e 	bne	r4,zero,fa0c <___vfprintf_internal_r+0x79c>
    f9a0:	05400404 	movi	r21,16
    f9a4:	6039883a 	mov	fp,r12
    f9a8:	00000406 	br	f9bc <___vfprintf_internal_r+0x74c>
    f9ac:	8c7ffc04 	addi	r17,r17,-16
    f9b0:	89000448 	cmpgei	r4,r17,17
    f9b4:	b5800204 	addi	r22,r22,8
    f9b8:	20001326 	beq	r4,zero,fa08 <___vfprintf_internal_r+0x798>
    f9bc:	10800044 	addi	r2,r2,1
    f9c0:	18c00404 	addi	r3,r3,16
    f9c4:	b7000015 	stw	fp,0(r22)
    f9c8:	b5400115 	stw	r21,4(r22)
    f9cc:	d8c01c15 	stw	r3,112(sp)
    f9d0:	d8801b15 	stw	r2,108(sp)
    f9d4:	11000208 	cmpgei	r4,r2,8
    f9d8:	203ff426 	beq	r4,zero,f9ac <___vfprintf_internal_r+0x73c>
    f9dc:	d9801a04 	addi	r6,sp,104
    f9e0:	900b883a 	mov	r5,r18
    f9e4:	9809883a 	mov	r4,r19
    f9e8:	0016da40 	call	16da4 <__sprint_r>
    f9ec:	103f2d1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
    f9f0:	8c7ffc04 	addi	r17,r17,-16
    f9f4:	89000448 	cmpgei	r4,r17,17
    f9f8:	d8c01c17 	ldw	r3,112(sp)
    f9fc:	d8801b17 	ldw	r2,108(sp)
    fa00:	dd802704 	addi	r22,sp,156
    fa04:	203fed1e 	bne	r4,zero,f9bc <___vfprintf_internal_r+0x74c>
    fa08:	e019883a 	mov	r12,fp
    fa0c:	10800044 	addi	r2,r2,1
    fa10:	1c47883a 	add	r3,r3,r17
    fa14:	d8801b15 	stw	r2,108(sp)
    fa18:	b3000015 	stw	r12,0(r22)
    fa1c:	b4400115 	stw	r17,4(r22)
    fa20:	d8c01c15 	stw	r3,112(sp)
    fa24:	10800210 	cmplti	r2,r2,8
    fa28:	103f121e 	bne	r2,zero,f674 <___vfprintf_internal_r+0x404>
    fa2c:	d9801a04 	addi	r6,sp,104
    fa30:	900b883a 	mov	r5,r18
    fa34:	9809883a 	mov	r4,r19
    fa38:	0016da40 	call	16da4 <__sprint_r>
    fa3c:	103f191e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
    fa40:	d8c01c17 	ldw	r3,112(sp)
    fa44:	003f0b06 	br	f674 <___vfprintf_internal_r+0x404>
    fa48:	9809883a 	mov	r4,r19
    fa4c:	001345c0 	call	1345c <__sinit>
    fa50:	003e1f06 	br	f2d0 <___vfprintf_internal_r+0x60>
    fa54:	21003fcc 	andi	r4,r4,255
    fa58:	2005a41e 	bne	r4,zero,110ec <___vfprintf_internal_r+0x1e7c>
    fa5c:	6080080c 	andi	r2,r12,32
    fa60:	10004126 	beq	r2,zero,fb68 <___vfprintf_internal_r+0x8f8>
    fa64:	d8c00617 	ldw	r3,24(sp)
    fa68:	18800117 	ldw	r2,4(r3)
    fa6c:	1d000017 	ldw	r20,0(r3)
    fa70:	18c00204 	addi	r3,r3,8
    fa74:	d8c00615 	stw	r3,24(sp)
    fa78:	102b883a 	mov	r21,r2
    fa7c:	10004816 	blt	r2,zero,fba0 <___vfprintf_internal_r+0x930>
    fa80:	40bfffd8 	cmpnei	r2,r8,-1
    fa84:	db401343 	ldbu	r13,77(sp)
    fa88:	10000626 	beq	r2,zero,faa4 <___vfprintf_internal_r+0x834>
    fa8c:	047fdfc4 	movi	r17,-129
    fa90:	6446703a 	and	r3,r12,r17
    fa94:	a544b03a 	or	r2,r20,r21
    fa98:	d8c00415 	stw	r3,16(sp)
    fa9c:	1002f426 	beq	r2,zero,10670 <___vfprintf_internal_r+0x1400>
    faa0:	db000417 	ldw	r12,16(sp)
    faa4:	a8037d1e 	bne	r21,zero,1089c <___vfprintf_internal_r+0x162c>
    faa8:	a08002a8 	cmpgeui	r2,r20,10
    faac:	10037b1e 	bne	r2,zero,1089c <___vfprintf_internal_r+0x162c>
    fab0:	a5000c04 	addi	r20,r20,48
    fab4:	dd0026c5 	stb	r20,155(sp)
    fab8:	db000415 	stw	r12,16(sp)
    fabc:	05400044 	movi	r21,1
    fac0:	dc4026c4 	addi	r17,sp,155
    fac4:	4029883a 	mov	r20,r8
    fac8:	4540010e 	bge	r8,r21,fad0 <___vfprintf_internal_r+0x860>
    facc:	a829883a 	mov	r20,r21
    fad0:	d8000715 	stw	zero,28(sp)
    fad4:	6b403fcc 	andi	r13,r13,255
    fad8:	6b40201c 	xori	r13,r13,128
    fadc:	6b7fe004 	addi	r13,r13,-128
    fae0:	683ea926 	beq	r13,zero,f588 <___vfprintf_internal_r+0x318>
    fae4:	a5000044 	addi	r20,r20,1
    fae8:	003ea706 	br	f588 <___vfprintf_internal_r+0x318>
    faec:	d8800617 	ldw	r2,24(sp)
    faf0:	14000017 	ldw	r16,0(r2)
    faf4:	10800104 	addi	r2,r2,4
    faf8:	8003130e 	bge	r16,zero,10748 <___vfprintf_internal_r+0x14d8>
    fafc:	0421c83a 	sub	r16,zero,r16
    fb00:	d8800615 	stw	r2,24(sp)
    fb04:	bac00007 	ldb	r11,0(r23)
    fb08:	63000114 	ori	r12,r12,4
    fb0c:	003e2406 	br	f3a0 <___vfprintf_internal_r+0x130>
    fb10:	bf000007 	ldb	fp,0(r23)
    fb14:	b8c00044 	addi	r3,r23,1
    fb18:	e0800aa0 	cmpeqi	r2,fp,42
    fb1c:	1005c71e 	bne	r2,zero,1123c <___vfprintf_internal_r+0x1fcc>
    fb20:	e0bff404 	addi	r2,fp,-48
    fb24:	118002b0 	cmpltui	r6,r2,10
    fb28:	182f883a 	mov	r23,r3
    fb2c:	0011883a 	mov	r8,zero
    fb30:	303e1d26 	beq	r6,zero,f3a8 <___vfprintf_internal_r+0x138>
    fb34:	bf000007 	ldb	fp,0(r23)
    fb38:	420002a4 	muli	r8,r8,10
    fb3c:	bdc00044 	addi	r23,r23,1
    fb40:	4091883a 	add	r8,r8,r2
    fb44:	e0bff404 	addi	r2,fp,-48
    fb48:	10c002b0 	cmpltui	r3,r2,10
    fb4c:	183ff91e 	bne	r3,zero,fb34 <___vfprintf_internal_r+0x8c4>
    fb50:	003e1506 	br	f3a8 <___vfprintf_internal_r+0x138>
    fb54:	21003fcc 	andi	r4,r4,255
    fb58:	20055e1e 	bne	r4,zero,110d4 <___vfprintf_internal_r+0x1e64>
    fb5c:	63000414 	ori	r12,r12,16
    fb60:	6080080c 	andi	r2,r12,32
    fb64:	103fbf1e 	bne	r2,zero,fa64 <___vfprintf_internal_r+0x7f4>
    fb68:	d8c00617 	ldw	r3,24(sp)
    fb6c:	6080040c 	andi	r2,r12,16
    fb70:	1d000017 	ldw	r20,0(r3)
    fb74:	18c00104 	addi	r3,r3,4
    fb78:	d8c00615 	stw	r3,24(sp)
    fb7c:	1002e91e 	bne	r2,zero,10724 <___vfprintf_internal_r+0x14b4>
    fb80:	6080100c 	andi	r2,r12,64
    fb84:	1002e726 	beq	r2,zero,10724 <___vfprintf_internal_r+0x14b4>
    fb88:	a53fffcc 	andi	r20,r20,65535
    fb8c:	a520001c 	xori	r20,r20,32768
    fb90:	a5200004 	addi	r20,r20,-32768
    fb94:	a02bd7fa 	srai	r21,r20,31
    fb98:	a805883a 	mov	r2,r21
    fb9c:	103fb80e 	bge	r2,zero,fa80 <___vfprintf_internal_r+0x810>
    fba0:	a004c03a 	cmpne	r2,r20,zero
    fba4:	056bc83a 	sub	r21,zero,r21
    fba8:	a8abc83a 	sub	r21,r21,r2
    fbac:	00800b44 	movi	r2,45
    fbb0:	d8801345 	stb	r2,77(sp)
    fbb4:	40ffffe0 	cmpeqi	r3,r8,-1
    fbb8:	0529c83a 	sub	r20,zero,r20
    fbbc:	03400b44 	movi	r13,45
    fbc0:	00800044 	movi	r2,1
    fbc4:	183ef826 	beq	r3,zero,f7a8 <___vfprintf_internal_r+0x538>
    fbc8:	10c00060 	cmpeqi	r3,r2,1
    fbcc:	183fb51e 	bne	r3,zero,faa4 <___vfprintf_internal_r+0x834>
    fbd0:	108000a0 	cmpeqi	r2,r2,2
    fbd4:	10015d1e 	bne	r2,zero,1014c <___vfprintf_internal_r+0xedc>
    fbd8:	dc402704 	addi	r17,sp,156
    fbdc:	a006d0fa 	srli	r3,r20,3
    fbe0:	a808977a 	slli	r4,r21,29
    fbe4:	a82ad0fa 	srli	r21,r21,3
    fbe8:	a50001cc 	andi	r20,r20,7
    fbec:	a0800c04 	addi	r2,r20,48
    fbf0:	20e8b03a 	or	r20,r4,r3
    fbf4:	88bfffc5 	stb	r2,-1(r17)
    fbf8:	a546b03a 	or	r3,r20,r21
    fbfc:	880b883a 	mov	r5,r17
    fc00:	8c7fffc4 	addi	r17,r17,-1
    fc04:	183ff51e 	bne	r3,zero,fbdc <___vfprintf_internal_r+0x96c>
    fc08:	60c0004c 	andi	r3,r12,1
    fc0c:	18015c26 	beq	r3,zero,10180 <___vfprintf_internal_r+0xf10>
    fc10:	10803fcc 	andi	r2,r2,255
    fc14:	1080201c 	xori	r2,r2,128
    fc18:	10bfe004 	addi	r2,r2,-128
    fc1c:	10800c18 	cmpnei	r2,r2,48
    fc20:	10015726 	beq	r2,zero,10180 <___vfprintf_internal_r+0xf10>
    fc24:	00800c04 	movi	r2,48
    fc28:	297fff84 	addi	r5,r5,-2
    fc2c:	88bfffc5 	stb	r2,-1(r17)
    fc30:	d8802704 	addi	r2,sp,156
    fc34:	116bc83a 	sub	r21,r2,r5
    fc38:	db000415 	stw	r12,16(sp)
    fc3c:	2823883a 	mov	r17,r5
    fc40:	003fa006 	br	fac4 <___vfprintf_internal_r+0x854>
    fc44:	bac00007 	ldb	r11,0(r23)
    fc48:	63002014 	ori	r12,r12,128
    fc4c:	003dd406 	br	f3a0 <___vfprintf_internal_r+0x130>
    fc50:	bac00007 	ldb	r11,0(r23)
    fc54:	01000044 	movi	r4,1
    fc58:	01400ac4 	movi	r5,43
    fc5c:	003dd006 	br	f3a0 <___vfprintf_internal_r+0x130>
    fc60:	bac00007 	ldb	r11,0(r23)
    fc64:	63000054 	ori	r12,r12,1
    fc68:	003dcd06 	br	f3a0 <___vfprintf_internal_r+0x130>
    fc6c:	28803fcc 	andi	r2,r5,255
    fc70:	1080201c 	xori	r2,r2,128
    fc74:	10bfe004 	addi	r2,r2,-128
    fc78:	bf000003 	ldbu	fp,0(r23)
    fc7c:	10000c1e 	bne	r2,zero,fcb0 <___vfprintf_internal_r+0xa40>
    fc80:	e2c03fcc 	andi	r11,fp,255
    fc84:	5ac0201c 	xori	r11,r11,128
    fc88:	01000044 	movi	r4,1
    fc8c:	01400804 	movi	r5,32
    fc90:	5affe004 	addi	r11,r11,-128
    fc94:	003dc206 	br	f3a0 <___vfprintf_internal_r+0x130>
    fc98:	bac00007 	ldb	r11,0(r23)
    fc9c:	58801b18 	cmpnei	r2,r11,108
    fca0:	1002a71e 	bne	r2,zero,10740 <___vfprintf_internal_r+0x14d0>
    fca4:	bf000043 	ldbu	fp,1(r23)
    fca8:	63000814 	ori	r12,r12,32
    fcac:	bdc00044 	addi	r23,r23,1
    fcb0:	e2c03fcc 	andi	r11,fp,255
    fcb4:	5ac0201c 	xori	r11,r11,128
    fcb8:	5affe004 	addi	r11,r11,-128
    fcbc:	003db806 	br	f3a0 <___vfprintf_internal_r+0x130>
    fcc0:	21003fcc 	andi	r4,r4,255
    fcc4:	20050b1e 	bne	r4,zero,110f4 <___vfprintf_internal_r+0x1e84>
    fcc8:	008000b4 	movhi	r2,2
    fccc:	10863804 	addi	r2,r2,6368
    fcd0:	d8800c15 	stw	r2,48(sp)
    fcd4:	6080080c 	andi	r2,r12,32
    fcd8:	10005b26 	beq	r2,zero,fe48 <___vfprintf_internal_r+0xbd8>
    fcdc:	d8800617 	ldw	r2,24(sp)
    fce0:	15000017 	ldw	r20,0(r2)
    fce4:	15400117 	ldw	r21,4(r2)
    fce8:	10800204 	addi	r2,r2,8
    fcec:	d8800615 	stw	r2,24(sp)
    fcf0:	6080004c 	andi	r2,r12,1
    fcf4:	10000226 	beq	r2,zero,fd00 <___vfprintf_internal_r+0xa90>
    fcf8:	a544b03a 	or	r2,r20,r21
    fcfc:	10029c1e 	bne	r2,zero,10770 <___vfprintf_internal_r+0x1500>
    fd00:	00800084 	movi	r2,2
    fd04:	003ea406 	br	f798 <___vfprintf_internal_r+0x528>
    fd08:	d8800617 	ldw	r2,24(sp)
    fd0c:	d8001345 	stb	zero,77(sp)
    fd10:	14400017 	ldw	r17,0(r2)
    fd14:	10c00104 	addi	r3,r2,4
    fd18:	8802ba26 	beq	r17,zero,10804 <___vfprintf_internal_r+0x1594>
    fd1c:	40bfffe0 	cmpeqi	r2,r8,-1
    fd20:	1003c61e 	bne	r2,zero,10c3c <___vfprintf_internal_r+0x19cc>
    fd24:	400d883a 	mov	r6,r8
    fd28:	000b883a 	mov	r5,zero
    fd2c:	8809883a 	mov	r4,r17
    fd30:	d8c00715 	stw	r3,28(sp)
    fd34:	db000615 	stw	r12,24(sp)
    fd38:	da000415 	stw	r8,16(sp)
    fd3c:	0014eb40 	call	14eb4 <memchr>
    fd40:	da000417 	ldw	r8,16(sp)
    fd44:	db000617 	ldw	r12,24(sp)
    fd48:	d8c00717 	ldw	r3,28(sp)
    fd4c:	1004d126 	beq	r2,zero,11094 <___vfprintf_internal_r+0x1e24>
    fd50:	146bc83a 	sub	r21,r2,r17
    fd54:	a829883a 	mov	r20,r21
    fd58:	d8c00615 	stw	r3,24(sp)
    fd5c:	003e0706 	br	f57c <___vfprintf_internal_r+0x30c>
    fd60:	bac00007 	ldb	r11,0(r23)
    fd64:	63000814 	ori	r12,r12,32
    fd68:	003d8d06 	br	f3a0 <___vfprintf_internal_r+0x130>
    fd6c:	d8c00617 	ldw	r3,24(sp)
    fd70:	00800c04 	movi	r2,48
    fd74:	d8801385 	stb	r2,78(sp)
    fd78:	00801e04 	movi	r2,120
    fd7c:	010000b4 	movhi	r4,2
    fd80:	d88013c5 	stb	r2,79(sp)
    fd84:	18800104 	addi	r2,r3,4
    fd88:	d8800615 	stw	r2,24(sp)
    fd8c:	20863804 	addi	r2,r4,6368
    fd90:	d8800c15 	stw	r2,48(sp)
    fd94:	1d000017 	ldw	r20,0(r3)
    fd98:	002b883a 	mov	r21,zero
    fd9c:	63000094 	ori	r12,r12,2
    fda0:	00800084 	movi	r2,2
    fda4:	07001e04 	movi	fp,120
    fda8:	003e7b06 	br	f798 <___vfprintf_internal_r+0x528>
    fdac:	21003fcc 	andi	r4,r4,255
    fdb0:	2004ca1e 	bne	r4,zero,110dc <___vfprintf_internal_r+0x1e6c>
    fdb4:	d9000617 	ldw	r4,24(sp)
    fdb8:	6080080c 	andi	r2,r12,32
    fdbc:	20c00104 	addi	r3,r4,4
    fdc0:	1002711e 	bne	r2,zero,10788 <___vfprintf_internal_r+0x1518>
    fdc4:	6080040c 	andi	r2,r12,16
    fdc8:	1002dc1e 	bne	r2,zero,1093c <___vfprintf_internal_r+0x16cc>
    fdcc:	6300100c 	andi	r12,r12,64
    fdd0:	6002da26 	beq	r12,zero,1093c <___vfprintf_internal_r+0x16cc>
    fdd4:	d8800617 	ldw	r2,24(sp)
    fdd8:	d8c00615 	stw	r3,24(sp)
    fddc:	d8c00517 	ldw	r3,20(sp)
    fde0:	10800017 	ldw	r2,0(r2)
    fde4:	10c0000d 	sth	r3,0(r2)
    fde8:	003d5506 	br	f340 <___vfprintf_internal_r+0xd0>
    fdec:	bac00007 	ldb	r11,0(r23)
    fdf0:	63000214 	ori	r12,r12,8
    fdf4:	003d6a06 	br	f3a0 <___vfprintf_internal_r+0x130>
    fdf8:	bac00007 	ldb	r11,0(r23)
    fdfc:	63001014 	ori	r12,r12,64
    fe00:	003d6706 	br	f3a0 <___vfprintf_internal_r+0x130>
    fe04:	d8c00617 	ldw	r3,24(sp)
    fe08:	d8001345 	stb	zero,77(sp)
    fe0c:	05000044 	movi	r20,1
    fe10:	18800017 	ldw	r2,0(r3)
    fe14:	18c00104 	addi	r3,r3,4
    fe18:	d8c00615 	stw	r3,24(sp)
    fe1c:	d8801d05 	stb	r2,116(sp)
    fe20:	05400044 	movi	r21,1
    fe24:	dc401d04 	addi	r17,sp,116
    fe28:	003dd406 	br	f57c <___vfprintf_internal_r+0x30c>
    fe2c:	21003fcc 	andi	r4,r4,255
    fe30:	2004b21e 	bne	r4,zero,110fc <___vfprintf_internal_r+0x1e8c>
    fe34:	008000b4 	movhi	r2,2
    fe38:	10863d04 	addi	r2,r2,6388
    fe3c:	d8800c15 	stw	r2,48(sp)
    fe40:	6080080c 	andi	r2,r12,32
    fe44:	103fa51e 	bne	r2,zero,fcdc <___vfprintf_internal_r+0xa6c>
    fe48:	d8c00617 	ldw	r3,24(sp)
    fe4c:	6080040c 	andi	r2,r12,16
    fe50:	1d000017 	ldw	r20,0(r3)
    fe54:	18c00104 	addi	r3,r3,4
    fe58:	d8c00615 	stw	r3,24(sp)
    fe5c:	10022f1e 	bne	r2,zero,1071c <___vfprintf_internal_r+0x14ac>
    fe60:	6080100c 	andi	r2,r12,64
    fe64:	10022d26 	beq	r2,zero,1071c <___vfprintf_internal_r+0x14ac>
    fe68:	a53fffcc 	andi	r20,r20,65535
    fe6c:	002b883a 	mov	r21,zero
    fe70:	003f9f06 	br	fcf0 <___vfprintf_internal_r+0xa80>
    fe74:	e2c01990 	cmplti	r11,fp,102
    fe78:	5800fb1e 	bne	r11,zero,10268 <___vfprintf_internal_r+0xff8>
    fe7c:	d9000917 	ldw	r4,36(sp)
    fe80:	d9400a17 	ldw	r5,40(sp)
    fe84:	000d883a 	mov	r6,zero
    fe88:	000f883a 	mov	r7,zero
    fe8c:	d8c00e15 	stw	r3,56(sp)
    fe90:	000b73c0 	call	b73c <__eqdf2>
    fe94:	d8c00e17 	ldw	r3,56(sp)
    fe98:	1001891e 	bne	r2,zero,104c0 <___vfprintf_internal_r+0x1250>
    fe9c:	d8801b17 	ldw	r2,108(sp)
    fea0:	010000b4 	movhi	r4,2
    fea4:	21064404 	addi	r4,r4,6416
    fea8:	10800044 	addi	r2,r2,1
    feac:	18c00044 	addi	r3,r3,1
    feb0:	b1000015 	stw	r4,0(r22)
    feb4:	01000044 	movi	r4,1
    feb8:	d8801b15 	stw	r2,108(sp)
    febc:	b1000115 	stw	r4,4(r22)
    fec0:	d8c01c15 	stw	r3,112(sp)
    fec4:	10800208 	cmpgei	r2,r2,8
    fec8:	10034a1e 	bne	r2,zero,10bf4 <___vfprintf_internal_r+0x1984>
    fecc:	b5800204 	addi	r22,r22,8
    fed0:	d8801417 	ldw	r2,80(sp)
    fed4:	d9000817 	ldw	r4,32(sp)
    fed8:	1102150e 	bge	r2,r4,10730 <___vfprintf_internal_r+0x14c0>
    fedc:	d8800d17 	ldw	r2,52(sp)
    fee0:	d9000b17 	ldw	r4,44(sp)
    fee4:	b0800015 	stw	r2,0(r22)
    fee8:	d8801b17 	ldw	r2,108(sp)
    feec:	1907883a 	add	r3,r3,r4
    fef0:	b1000115 	stw	r4,4(r22)
    fef4:	10800044 	addi	r2,r2,1
    fef8:	d8801b15 	stw	r2,108(sp)
    fefc:	d8c01c15 	stw	r3,112(sp)
    ff00:	10800208 	cmpgei	r2,r2,8
    ff04:	1002371e 	bne	r2,zero,107e4 <___vfprintf_internal_r+0x1574>
    ff08:	b5800204 	addi	r22,r22,8
    ff0c:	d8800817 	ldw	r2,32(sp)
    ff10:	157fffc4 	addi	r21,r2,-1
    ff14:	057dd20e 	bge	zero,r21,f660 <___vfprintf_internal_r+0x3f0>
    ff18:	01c000b4 	movhi	r7,2
    ff1c:	a9000450 	cmplti	r4,r21,17
    ff20:	d8801b17 	ldw	r2,108(sp)
    ff24:	39c64504 	addi	r7,r7,6420
    ff28:	20032e1e 	bne	r4,zero,10be4 <___vfprintf_internal_r+0x1974>
    ff2c:	07000404 	movi	fp,16
    ff30:	3823883a 	mov	r17,r7
    ff34:	00000406 	br	ff48 <___vfprintf_internal_r+0xcd8>
    ff38:	b5800204 	addi	r22,r22,8
    ff3c:	ad7ffc04 	addi	r21,r21,-16
    ff40:	a9000448 	cmpgei	r4,r21,17
    ff44:	20032626 	beq	r4,zero,10be0 <___vfprintf_internal_r+0x1970>
    ff48:	10800044 	addi	r2,r2,1
    ff4c:	18c00404 	addi	r3,r3,16
    ff50:	b4400015 	stw	r17,0(r22)
    ff54:	b7000115 	stw	fp,4(r22)
    ff58:	d8c01c15 	stw	r3,112(sp)
    ff5c:	d8801b15 	stw	r2,108(sp)
    ff60:	11000208 	cmpgei	r4,r2,8
    ff64:	203ff426 	beq	r4,zero,ff38 <___vfprintf_internal_r+0xcc8>
    ff68:	d9801a04 	addi	r6,sp,104
    ff6c:	900b883a 	mov	r5,r18
    ff70:	9809883a 	mov	r4,r19
    ff74:	0016da40 	call	16da4 <__sprint_r>
    ff78:	103dca1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
    ff7c:	d8c01c17 	ldw	r3,112(sp)
    ff80:	d8801b17 	ldw	r2,108(sp)
    ff84:	dd802704 	addi	r22,sp,156
    ff88:	003fec06 	br	ff3c <___vfprintf_internal_r+0xccc>
    ff8c:	8519c83a 	sub	r12,r16,r20
    ff90:	033da40e 	bge	zero,r12,f624 <___vfprintf_internal_r+0x3b4>
    ff94:	01c000b4 	movhi	r7,2
    ff98:	61000450 	cmplti	r4,r12,17
    ff9c:	d8801b17 	ldw	r2,108(sp)
    ffa0:	39c64504 	addi	r7,r7,6420
    ffa4:	2000281e 	bne	r4,zero,10048 <___vfprintf_internal_r+0xdd8>
    ffa8:	dc400e15 	stw	r17,56(sp)
    ffac:	dc000f15 	stw	r16,60(sp)
    ffb0:	b009883a 	mov	r4,r22
    ffb4:	03400404 	movi	r13,16
    ffb8:	a02d883a 	mov	r22,r20
    ffbc:	6021883a 	mov	r16,r12
    ffc0:	4029883a 	mov	r20,r8
    ffc4:	3823883a 	mov	r17,r7
    ffc8:	00000406 	br	ffdc <___vfprintf_internal_r+0xd6c>
    ffcc:	843ffc04 	addi	r16,r16,-16
    ffd0:	81400448 	cmpgei	r5,r16,17
    ffd4:	21000204 	addi	r4,r4,8
    ffd8:	28001426 	beq	r5,zero,1002c <___vfprintf_internal_r+0xdbc>
    ffdc:	10800044 	addi	r2,r2,1
    ffe0:	18c00404 	addi	r3,r3,16
    ffe4:	24400015 	stw	r17,0(r4)
    ffe8:	23400115 	stw	r13,4(r4)
    ffec:	d8c01c15 	stw	r3,112(sp)
    fff0:	d8801b15 	stw	r2,108(sp)
    fff4:	11400208 	cmpgei	r5,r2,8
    fff8:	283ff426 	beq	r5,zero,ffcc <___vfprintf_internal_r+0xd5c>
    fffc:	d9801a04 	addi	r6,sp,104
   10000:	900b883a 	mov	r5,r18
   10004:	9809883a 	mov	r4,r19
   10008:	0016da40 	call	16da4 <__sprint_r>
   1000c:	103da51e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10010:	843ffc04 	addi	r16,r16,-16
   10014:	81400448 	cmpgei	r5,r16,17
   10018:	d8c01c17 	ldw	r3,112(sp)
   1001c:	d8801b17 	ldw	r2,108(sp)
   10020:	d9002704 	addi	r4,sp,156
   10024:	03400404 	movi	r13,16
   10028:	283fec1e 	bne	r5,zero,ffdc <___vfprintf_internal_r+0xd6c>
   1002c:	8019883a 	mov	r12,r16
   10030:	880f883a 	mov	r7,r17
   10034:	dc000f17 	ldw	r16,60(sp)
   10038:	dc400e17 	ldw	r17,56(sp)
   1003c:	a011883a 	mov	r8,r20
   10040:	b029883a 	mov	r20,r22
   10044:	202d883a 	mov	r22,r4
   10048:	10800044 	addi	r2,r2,1
   1004c:	1b07883a 	add	r3,r3,r12
   10050:	d8801b15 	stw	r2,108(sp)
   10054:	b1c00015 	stw	r7,0(r22)
   10058:	b3000115 	stw	r12,4(r22)
   1005c:	d8c01c15 	stw	r3,112(sp)
   10060:	10800208 	cmpgei	r2,r2,8
   10064:	1002eb1e 	bne	r2,zero,10c14 <___vfprintf_internal_r+0x19a4>
   10068:	4551c83a 	sub	r8,r8,r21
   1006c:	b5800204 	addi	r22,r22,8
   10070:	023d6e0e 	bge	zero,r8,f62c <___vfprintf_internal_r+0x3bc>
   10074:	01c000b4 	movhi	r7,2
   10078:	41000450 	cmplti	r4,r8,17
   1007c:	d8801b17 	ldw	r2,108(sp)
   10080:	39c64504 	addi	r7,r7,6420
   10084:	2000221e 	bne	r4,zero,10110 <___vfprintf_internal_r+0xea0>
   10088:	dc400e15 	stw	r17,56(sp)
   1008c:	dc000f15 	stw	r16,60(sp)
   10090:	03000404 	movi	r12,16
   10094:	4021883a 	mov	r16,r8
   10098:	3823883a 	mov	r17,r7
   1009c:	00000406 	br	100b0 <___vfprintf_internal_r+0xe40>
   100a0:	843ffc04 	addi	r16,r16,-16
   100a4:	81000448 	cmpgei	r4,r16,17
   100a8:	b5800204 	addi	r22,r22,8
   100ac:	20001426 	beq	r4,zero,10100 <___vfprintf_internal_r+0xe90>
   100b0:	10800044 	addi	r2,r2,1
   100b4:	18c00404 	addi	r3,r3,16
   100b8:	b4400015 	stw	r17,0(r22)
   100bc:	b3000115 	stw	r12,4(r22)
   100c0:	d8c01c15 	stw	r3,112(sp)
   100c4:	d8801b15 	stw	r2,108(sp)
   100c8:	11000208 	cmpgei	r4,r2,8
   100cc:	203ff426 	beq	r4,zero,100a0 <___vfprintf_internal_r+0xe30>
   100d0:	d9801a04 	addi	r6,sp,104
   100d4:	900b883a 	mov	r5,r18
   100d8:	9809883a 	mov	r4,r19
   100dc:	0016da40 	call	16da4 <__sprint_r>
   100e0:	103d701e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   100e4:	843ffc04 	addi	r16,r16,-16
   100e8:	81000448 	cmpgei	r4,r16,17
   100ec:	d8c01c17 	ldw	r3,112(sp)
   100f0:	d8801b17 	ldw	r2,108(sp)
   100f4:	dd802704 	addi	r22,sp,156
   100f8:	03000404 	movi	r12,16
   100fc:	203fec1e 	bne	r4,zero,100b0 <___vfprintf_internal_r+0xe40>
   10100:	8011883a 	mov	r8,r16
   10104:	880f883a 	mov	r7,r17
   10108:	dc000f17 	ldw	r16,60(sp)
   1010c:	dc400e17 	ldw	r17,56(sp)
   10110:	10800044 	addi	r2,r2,1
   10114:	1a07883a 	add	r3,r3,r8
   10118:	d8801b15 	stw	r2,108(sp)
   1011c:	b1c00015 	stw	r7,0(r22)
   10120:	b2000115 	stw	r8,4(r22)
   10124:	d8c01c15 	stw	r3,112(sp)
   10128:	10800208 	cmpgei	r2,r2,8
   1012c:	1001731e 	bne	r2,zero,106fc <___vfprintf_internal_r+0x148c>
   10130:	b5800204 	addi	r22,r22,8
   10134:	003d3d06 	br	f62c <___vfprintf_internal_r+0x3bc>
   10138:	10c00060 	cmpeqi	r3,r2,1
   1013c:	1803831e 	bne	r3,zero,10f4c <___vfprintf_internal_r+0x1cdc>
   10140:	108000a0 	cmpeqi	r2,r2,2
   10144:	db000417 	ldw	r12,16(sp)
   10148:	103ea326 	beq	r2,zero,fbd8 <___vfprintf_internal_r+0x968>
   1014c:	d9000c17 	ldw	r4,48(sp)
   10150:	dc402704 	addi	r17,sp,156
   10154:	a08003cc 	andi	r2,r20,15
   10158:	a806973a 	slli	r3,r21,28
   1015c:	a028d13a 	srli	r20,r20,4
   10160:	2085883a 	add	r2,r4,r2
   10164:	10800003 	ldbu	r2,0(r2)
   10168:	a82ad13a 	srli	r21,r21,4
   1016c:	1d28b03a 	or	r20,r3,r20
   10170:	88bfffc5 	stb	r2,-1(r17)
   10174:	a544b03a 	or	r2,r20,r21
   10178:	8c7fffc4 	addi	r17,r17,-1
   1017c:	103ff51e 	bne	r2,zero,10154 <___vfprintf_internal_r+0xee4>
   10180:	d8802704 	addi	r2,sp,156
   10184:	146bc83a 	sub	r21,r2,r17
   10188:	db000415 	stw	r12,16(sp)
   1018c:	003e4d06 	br	fac4 <___vfprintf_internal_r+0x854>
   10190:	d9801a04 	addi	r6,sp,104
   10194:	900b883a 	mov	r5,r18
   10198:	9809883a 	mov	r4,r19
   1019c:	0016da40 	call	16da4 <__sprint_r>
   101a0:	103d3a26 	beq	r2,zero,f68c <___vfprintf_internal_r+0x41c>
   101a4:	003d3f06 	br	f6a4 <___vfprintf_internal_r+0x434>
   101a8:	d8801b17 	ldw	r2,108(sp)
   101ac:	010000b4 	movhi	r4,2
   101b0:	21064404 	addi	r4,r4,6416
   101b4:	10800044 	addi	r2,r2,1
   101b8:	18c00044 	addi	r3,r3,1
   101bc:	b1000015 	stw	r4,0(r22)
   101c0:	01000044 	movi	r4,1
   101c4:	d8801b15 	stw	r2,108(sp)
   101c8:	b1000115 	stw	r4,4(r22)
   101cc:	d8c01c15 	stw	r3,112(sp)
   101d0:	10800208 	cmpgei	r2,r2,8
   101d4:	1003211e 	bne	r2,zero,10e5c <___vfprintf_internal_r+0x1bec>
   101d8:	b5800204 	addi	r22,r22,8
   101dc:	2802a51e 	bne	r5,zero,10c74 <___vfprintf_internal_r+0x1a04>
   101e0:	d8800417 	ldw	r2,16(sp)
   101e4:	d9000817 	ldw	r4,32(sp)
   101e8:	1080004c 	andi	r2,r2,1
   101ec:	1104b03a 	or	r2,r2,r4
   101f0:	103d1b26 	beq	r2,zero,f660 <___vfprintf_internal_r+0x3f0>
   101f4:	d8800d17 	ldw	r2,52(sp)
   101f8:	d9000b17 	ldw	r4,44(sp)
   101fc:	b0800015 	stw	r2,0(r22)
   10200:	d8801b17 	ldw	r2,108(sp)
   10204:	20c7883a 	add	r3,r4,r3
   10208:	b1000115 	stw	r4,4(r22)
   1020c:	10800044 	addi	r2,r2,1
   10210:	d8c01c15 	stw	r3,112(sp)
   10214:	d8801b15 	stw	r2,108(sp)
   10218:	11000208 	cmpgei	r4,r2,8
   1021c:	2003381e 	bne	r4,zero,10f00 <___vfprintf_internal_r+0x1c90>
   10220:	b5800204 	addi	r22,r22,8
   10224:	d9000817 	ldw	r4,32(sp)
   10228:	10800044 	addi	r2,r2,1
   1022c:	d8801b15 	stw	r2,108(sp)
   10230:	20c7883a 	add	r3,r4,r3
   10234:	b4400015 	stw	r17,0(r22)
   10238:	b1000115 	stw	r4,4(r22)
   1023c:	d8c01c15 	stw	r3,112(sp)
   10240:	10800208 	cmpgei	r2,r2,8
   10244:	103d0526 	beq	r2,zero,f65c <___vfprintf_internal_r+0x3ec>
   10248:	d9801a04 	addi	r6,sp,104
   1024c:	900b883a 	mov	r5,r18
   10250:	9809883a 	mov	r4,r19
   10254:	0016da40 	call	16da4 <__sprint_r>
   10258:	103d121e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   1025c:	d8c01c17 	ldw	r3,112(sp)
   10260:	dd802704 	addi	r22,sp,156
   10264:	003cfe06 	br	f660 <___vfprintf_internal_r+0x3f0>
   10268:	d8800817 	ldw	r2,32(sp)
   1026c:	dd401b17 	ldw	r21,108(sp)
   10270:	18c00044 	addi	r3,r3,1
   10274:	10800088 	cmpgei	r2,r2,2
   10278:	ad400044 	addi	r21,r21,1
   1027c:	b7000204 	addi	fp,r22,8
   10280:	1000e826 	beq	r2,zero,10624 <___vfprintf_internal_r+0x13b4>
   10284:	00800044 	movi	r2,1
   10288:	b0800115 	stw	r2,4(r22)
   1028c:	b4400015 	stw	r17,0(r22)
   10290:	d8c01c15 	stw	r3,112(sp)
   10294:	dd401b15 	stw	r21,108(sp)
   10298:	a8800210 	cmplti	r2,r21,8
   1029c:	1001ad26 	beq	r2,zero,10954 <___vfprintf_internal_r+0x16e4>
   102a0:	d8800b17 	ldw	r2,44(sp)
   102a4:	d9000d17 	ldw	r4,52(sp)
   102a8:	ad400044 	addi	r21,r21,1
   102ac:	1887883a 	add	r3,r3,r2
   102b0:	e0800115 	stw	r2,4(fp)
   102b4:	e1000015 	stw	r4,0(fp)
   102b8:	d8c01c15 	stw	r3,112(sp)
   102bc:	dd401b15 	stw	r21,108(sp)
   102c0:	a8800208 	cmpgei	r2,r21,8
   102c4:	1001ac1e 	bne	r2,zero,10978 <___vfprintf_internal_r+0x1708>
   102c8:	e7000204 	addi	fp,fp,8
   102cc:	d9000917 	ldw	r4,36(sp)
   102d0:	d9400a17 	ldw	r5,40(sp)
   102d4:	000d883a 	mov	r6,zero
   102d8:	000f883a 	mov	r7,zero
   102dc:	d8c00715 	stw	r3,28(sp)
   102e0:	000b73c0 	call	b73c <__eqdf2>
   102e4:	d8c00817 	ldw	r3,32(sp)
   102e8:	1dbfffc4 	addi	r22,r3,-1
   102ec:	d8c00717 	ldw	r3,28(sp)
   102f0:	1000e426 	beq	r2,zero,10684 <___vfprintf_internal_r+0x1414>
   102f4:	8a400044 	addi	r9,r17,1
   102f8:	ad400044 	addi	r21,r21,1
   102fc:	1d87883a 	add	r3,r3,r22
   10300:	e2400015 	stw	r9,0(fp)
   10304:	e5800115 	stw	r22,4(fp)
   10308:	d8c01c15 	stw	r3,112(sp)
   1030c:	dd401b15 	stw	r21,108(sp)
   10310:	a8800208 	cmpgei	r2,r21,8
   10314:	1000cd1e 	bne	r2,zero,1064c <___vfprintf_internal_r+0x13dc>
   10318:	e7000204 	addi	fp,fp,8
   1031c:	d9001017 	ldw	r4,64(sp)
   10320:	ad400044 	addi	r21,r21,1
   10324:	d8801644 	addi	r2,sp,89
   10328:	20c7883a 	add	r3,r4,r3
   1032c:	dd401b15 	stw	r21,108(sp)
   10330:	e0800015 	stw	r2,0(fp)
   10334:	e1000115 	stw	r4,4(fp)
   10338:	d8c01c15 	stw	r3,112(sp)
   1033c:	ad400208 	cmpgei	r21,r21,8
   10340:	a83fc11e 	bne	r21,zero,10248 <___vfprintf_internal_r+0xfd8>
   10344:	e5800204 	addi	r22,fp,8
   10348:	003cc506 	br	f660 <___vfprintf_internal_r+0x3f0>
   1034c:	db000417 	ldw	r12,16(sp)
   10350:	003e1d06 	br	fbc8 <___vfprintf_internal_r+0x958>
   10354:	030000b4 	movhi	r12,2
   10358:	39000450 	cmplti	r4,r7,17
   1035c:	d8801b17 	ldw	r2,108(sp)
   10360:	63064904 	addi	r12,r12,6436
   10364:	2000321e 	bne	r4,zero,10430 <___vfprintf_internal_r+0x11c0>
   10368:	dc401115 	stw	r17,68(sp)
   1036c:	b009883a 	mov	r4,r22
   10370:	9023883a 	mov	r17,r18
   10374:	a82d883a 	mov	r22,r21
   10378:	ddc01215 	stw	r23,72(sp)
   1037c:	03c00404 	movi	r15,16
   10380:	a02f883a 	mov	r23,r20
   10384:	db800e15 	stw	r14,56(sp)
   10388:	8029883a 	mov	r20,r16
   1038c:	db400f15 	stw	r13,60(sp)
   10390:	402b883a 	mov	r21,r8
   10394:	3821883a 	mov	r16,r7
   10398:	6025883a 	mov	r18,r12
   1039c:	00000406 	br	103b0 <___vfprintf_internal_r+0x1140>
   103a0:	843ffc04 	addi	r16,r16,-16
   103a4:	81800448 	cmpgei	r6,r16,17
   103a8:	21000204 	addi	r4,r4,8
   103ac:	30001426 	beq	r6,zero,10400 <___vfprintf_internal_r+0x1190>
   103b0:	10800044 	addi	r2,r2,1
   103b4:	18c00404 	addi	r3,r3,16
   103b8:	24800015 	stw	r18,0(r4)
   103bc:	23c00115 	stw	r15,4(r4)
   103c0:	d8c01c15 	stw	r3,112(sp)
   103c4:	d8801b15 	stw	r2,108(sp)
   103c8:	11800208 	cmpgei	r6,r2,8
   103cc:	303ff426 	beq	r6,zero,103a0 <___vfprintf_internal_r+0x1130>
   103d0:	d9801a04 	addi	r6,sp,104
   103d4:	880b883a 	mov	r5,r17
   103d8:	9809883a 	mov	r4,r19
   103dc:	0016da40 	call	16da4 <__sprint_r>
   103e0:	10017c1e 	bne	r2,zero,109d4 <___vfprintf_internal_r+0x1764>
   103e4:	843ffc04 	addi	r16,r16,-16
   103e8:	81800448 	cmpgei	r6,r16,17
   103ec:	d8c01c17 	ldw	r3,112(sp)
   103f0:	d8801b17 	ldw	r2,108(sp)
   103f4:	d9002704 	addi	r4,sp,156
   103f8:	03c00404 	movi	r15,16
   103fc:	303fec1e 	bne	r6,zero,103b0 <___vfprintf_internal_r+0x1140>
   10400:	800f883a 	mov	r7,r16
   10404:	9019883a 	mov	r12,r18
   10408:	a021883a 	mov	r16,r20
   1040c:	8825883a 	mov	r18,r17
   10410:	b829883a 	mov	r20,r23
   10414:	db800e17 	ldw	r14,56(sp)
   10418:	db400f17 	ldw	r13,60(sp)
   1041c:	ddc01217 	ldw	r23,72(sp)
   10420:	dc401117 	ldw	r17,68(sp)
   10424:	a811883a 	mov	r8,r21
   10428:	b02b883a 	mov	r21,r22
   1042c:	202d883a 	mov	r22,r4
   10430:	10800044 	addi	r2,r2,1
   10434:	19c7883a 	add	r3,r3,r7
   10438:	d8801b15 	stw	r2,108(sp)
   1043c:	b3000015 	stw	r12,0(r22)
   10440:	b1c00115 	stw	r7,4(r22)
   10444:	d8c01c15 	stw	r3,112(sp)
   10448:	10800208 	cmpgei	r2,r2,8
   1044c:	1001531e 	bne	r2,zero,1099c <___vfprintf_internal_r+0x172c>
   10450:	b5800204 	addi	r22,r22,8
   10454:	003c5606 	br	f5b0 <___vfprintf_internal_r+0x340>
   10458:	d9801a04 	addi	r6,sp,104
   1045c:	900b883a 	mov	r5,r18
   10460:	9809883a 	mov	r4,r19
   10464:	da001115 	stw	r8,68(sp)
   10468:	db400f15 	stw	r13,60(sp)
   1046c:	db800e15 	stw	r14,56(sp)
   10470:	0016da40 	call	16da4 <__sprint_r>
   10474:	103c8b1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10478:	d8c01c17 	ldw	r3,112(sp)
   1047c:	da001117 	ldw	r8,68(sp)
   10480:	db400f17 	ldw	r13,60(sp)
   10484:	db800e17 	ldw	r14,56(sp)
   10488:	dd802704 	addi	r22,sp,156
   1048c:	003c5606 	br	f5e8 <___vfprintf_internal_r+0x378>
   10490:	d9801a04 	addi	r6,sp,104
   10494:	900b883a 	mov	r5,r18
   10498:	9809883a 	mov	r4,r19
   1049c:	da000f15 	stw	r8,60(sp)
   104a0:	db400e15 	stw	r13,56(sp)
   104a4:	0016da40 	call	16da4 <__sprint_r>
   104a8:	103c7e1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   104ac:	d8c01c17 	ldw	r3,112(sp)
   104b0:	da000f17 	ldw	r8,60(sp)
   104b4:	db400e17 	ldw	r13,56(sp)
   104b8:	dd802704 	addi	r22,sp,156
   104bc:	003c5706 	br	f61c <___vfprintf_internal_r+0x3ac>
   104c0:	d9401417 	ldw	r5,80(sp)
   104c4:	017f380e 	bge	zero,r5,101a8 <___vfprintf_internal_r+0xf38>
   104c8:	d8800717 	ldw	r2,28(sp)
   104cc:	d9000817 	ldw	r4,32(sp)
   104d0:	102b883a 	mov	r21,r2
   104d4:	2080b316 	blt	r4,r2,107a4 <___vfprintf_internal_r+0x1534>
   104d8:	05400a0e 	bge	zero,r21,10504 <___vfprintf_internal_r+0x1294>
   104dc:	d8801b17 	ldw	r2,108(sp)
   104e0:	1d47883a 	add	r3,r3,r21
   104e4:	b4400015 	stw	r17,0(r22)
   104e8:	10800044 	addi	r2,r2,1
   104ec:	d8801b15 	stw	r2,108(sp)
   104f0:	b5400115 	stw	r21,4(r22)
   104f4:	d8c01c15 	stw	r3,112(sp)
   104f8:	10800208 	cmpgei	r2,r2,8
   104fc:	1002cf1e 	bne	r2,zero,1103c <___vfprintf_internal_r+0x1dcc>
   10500:	b5800204 	addi	r22,r22,8
   10504:	a800b516 	blt	r21,zero,107dc <___vfprintf_internal_r+0x156c>
   10508:	d8800717 	ldw	r2,28(sp)
   1050c:	156bc83a 	sub	r21,r2,r21
   10510:	0540c416 	blt	zero,r21,10824 <___vfprintf_internal_r+0x15b4>
   10514:	dd401417 	ldw	r21,80(sp)
   10518:	d8800817 	ldw	r2,32(sp)
   1051c:	a880a40e 	bge	r21,r2,107b0 <___vfprintf_internal_r+0x1540>
   10520:	d8800d17 	ldw	r2,52(sp)
   10524:	d9000b17 	ldw	r4,44(sp)
   10528:	b0800015 	stw	r2,0(r22)
   1052c:	d8801b17 	ldw	r2,108(sp)
   10530:	1907883a 	add	r3,r3,r4
   10534:	b1000115 	stw	r4,4(r22)
   10538:	10800044 	addi	r2,r2,1
   1053c:	d8801b15 	stw	r2,108(sp)
   10540:	d8c01c15 	stw	r3,112(sp)
   10544:	10800208 	cmpgei	r2,r2,8
   10548:	1002b31e 	bne	r2,zero,11018 <___vfprintf_internal_r+0x1da8>
   1054c:	b5800204 	addi	r22,r22,8
   10550:	d9000817 	ldw	r4,32(sp)
   10554:	d9400717 	ldw	r5,28(sp)
   10558:	2545c83a 	sub	r2,r4,r21
   1055c:	2149c83a 	sub	r4,r4,r5
   10560:	102b883a 	mov	r21,r2
   10564:	2080010e 	bge	r4,r2,1056c <___vfprintf_internal_r+0x12fc>
   10568:	202b883a 	mov	r21,r4
   1056c:	05400c0e 	bge	zero,r21,105a0 <___vfprintf_internal_r+0x1330>
   10570:	d9000717 	ldw	r4,28(sp)
   10574:	1d47883a 	add	r3,r3,r21
   10578:	b5400115 	stw	r21,4(r22)
   1057c:	8913883a 	add	r9,r17,r4
   10580:	d9001b17 	ldw	r4,108(sp)
   10584:	b2400015 	stw	r9,0(r22)
   10588:	d8c01c15 	stw	r3,112(sp)
   1058c:	21000044 	addi	r4,r4,1
   10590:	d9001b15 	stw	r4,108(sp)
   10594:	21000208 	cmpgei	r4,r4,8
   10598:	2002b31e 	bne	r4,zero,11068 <___vfprintf_internal_r+0x1df8>
   1059c:	b5800204 	addi	r22,r22,8
   105a0:	a800010e 	bge	r21,zero,105a8 <___vfprintf_internal_r+0x1338>
   105a4:	002b883a 	mov	r21,zero
   105a8:	156bc83a 	sub	r21,r2,r21
   105ac:	057c2c0e 	bge	zero,r21,f660 <___vfprintf_internal_r+0x3f0>
   105b0:	01c000b4 	movhi	r7,2
   105b4:	a9000450 	cmplti	r4,r21,17
   105b8:	d8801b17 	ldw	r2,108(sp)
   105bc:	39c64504 	addi	r7,r7,6420
   105c0:	2001881e 	bne	r4,zero,10be4 <___vfprintf_internal_r+0x1974>
   105c4:	07000404 	movi	fp,16
   105c8:	3823883a 	mov	r17,r7
   105cc:	00000406 	br	105e0 <___vfprintf_internal_r+0x1370>
   105d0:	b5800204 	addi	r22,r22,8
   105d4:	ad7ffc04 	addi	r21,r21,-16
   105d8:	a9000448 	cmpgei	r4,r21,17
   105dc:	20018026 	beq	r4,zero,10be0 <___vfprintf_internal_r+0x1970>
   105e0:	10800044 	addi	r2,r2,1
   105e4:	18c00404 	addi	r3,r3,16
   105e8:	b4400015 	stw	r17,0(r22)
   105ec:	b7000115 	stw	fp,4(r22)
   105f0:	d8c01c15 	stw	r3,112(sp)
   105f4:	d8801b15 	stw	r2,108(sp)
   105f8:	11000208 	cmpgei	r4,r2,8
   105fc:	203ff426 	beq	r4,zero,105d0 <___vfprintf_internal_r+0x1360>
   10600:	d9801a04 	addi	r6,sp,104
   10604:	900b883a 	mov	r5,r18
   10608:	9809883a 	mov	r4,r19
   1060c:	0016da40 	call	16da4 <__sprint_r>
   10610:	103c241e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10614:	d8c01c17 	ldw	r3,112(sp)
   10618:	d8801b17 	ldw	r2,108(sp)
   1061c:	dd802704 	addi	r22,sp,156
   10620:	003fec06 	br	105d4 <___vfprintf_internal_r+0x1364>
   10624:	d8800417 	ldw	r2,16(sp)
   10628:	1080004c 	andi	r2,r2,1
   1062c:	103f151e 	bne	r2,zero,10284 <___vfprintf_internal_r+0x1014>
   10630:	00800044 	movi	r2,1
   10634:	b0800115 	stw	r2,4(r22)
   10638:	b4400015 	stw	r17,0(r22)
   1063c:	d8c01c15 	stw	r3,112(sp)
   10640:	dd401b15 	stw	r21,108(sp)
   10644:	a8800210 	cmplti	r2,r21,8
   10648:	103f341e 	bne	r2,zero,1031c <___vfprintf_internal_r+0x10ac>
   1064c:	d9801a04 	addi	r6,sp,104
   10650:	900b883a 	mov	r5,r18
   10654:	9809883a 	mov	r4,r19
   10658:	0016da40 	call	16da4 <__sprint_r>
   1065c:	103c111e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10660:	d8c01c17 	ldw	r3,112(sp)
   10664:	dd401b17 	ldw	r21,108(sp)
   10668:	df002704 	addi	fp,sp,156
   1066c:	003f2b06 	br	1031c <___vfprintf_internal_r+0x10ac>
   10670:	4002361e 	bne	r8,zero,10f4c <___vfprintf_internal_r+0x1cdc>
   10674:	0011883a 	mov	r8,zero
   10678:	002b883a 	mov	r21,zero
   1067c:	dc402704 	addi	r17,sp,156
   10680:	003d1006 	br	fac4 <___vfprintf_internal_r+0x854>
   10684:	05bf250e 	bge	zero,r22,1031c <___vfprintf_internal_r+0x10ac>
   10688:	01c000b4 	movhi	r7,2
   1068c:	b0800450 	cmplti	r2,r22,17
   10690:	39c64504 	addi	r7,r7,6420
   10694:	1001731e 	bne	r2,zero,10c64 <___vfprintf_internal_r+0x19f4>
   10698:	dc000715 	stw	r16,28(sp)
   1069c:	04400404 	movi	r17,16
   106a0:	3821883a 	mov	r16,r7
   106a4:	00000406 	br	106b8 <___vfprintf_internal_r+0x1448>
   106a8:	e7000204 	addi	fp,fp,8
   106ac:	b5bffc04 	addi	r22,r22,-16
   106b0:	b0800448 	cmpgei	r2,r22,17
   106b4:	10016926 	beq	r2,zero,10c5c <___vfprintf_internal_r+0x19ec>
   106b8:	ad400044 	addi	r21,r21,1
   106bc:	18c00404 	addi	r3,r3,16
   106c0:	e4000015 	stw	r16,0(fp)
   106c4:	e4400115 	stw	r17,4(fp)
   106c8:	d8c01c15 	stw	r3,112(sp)
   106cc:	dd401b15 	stw	r21,108(sp)
   106d0:	a8800208 	cmpgei	r2,r21,8
   106d4:	103ff426 	beq	r2,zero,106a8 <___vfprintf_internal_r+0x1438>
   106d8:	d9801a04 	addi	r6,sp,104
   106dc:	900b883a 	mov	r5,r18
   106e0:	9809883a 	mov	r4,r19
   106e4:	0016da40 	call	16da4 <__sprint_r>
   106e8:	103bee1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   106ec:	d8c01c17 	ldw	r3,112(sp)
   106f0:	dd401b17 	ldw	r21,108(sp)
   106f4:	df002704 	addi	fp,sp,156
   106f8:	003fec06 	br	106ac <___vfprintf_internal_r+0x143c>
   106fc:	d9801a04 	addi	r6,sp,104
   10700:	900b883a 	mov	r5,r18
   10704:	9809883a 	mov	r4,r19
   10708:	0016da40 	call	16da4 <__sprint_r>
   1070c:	103be51e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10710:	d8c01c17 	ldw	r3,112(sp)
   10714:	dd802704 	addi	r22,sp,156
   10718:	003bc406 	br	f62c <___vfprintf_internal_r+0x3bc>
   1071c:	002b883a 	mov	r21,zero
   10720:	003d7306 	br	fcf0 <___vfprintf_internal_r+0xa80>
   10724:	a02bd7fa 	srai	r21,r20,31
   10728:	a805883a 	mov	r2,r21
   1072c:	003cd306 	br	fa7c <___vfprintf_internal_r+0x80c>
   10730:	d8800417 	ldw	r2,16(sp)
   10734:	1080004c 	andi	r2,r2,1
   10738:	103bc926 	beq	r2,zero,f660 <___vfprintf_internal_r+0x3f0>
   1073c:	003de706 	br	fedc <___vfprintf_internal_r+0xc6c>
   10740:	63000414 	ori	r12,r12,16
   10744:	003b1606 	br	f3a0 <___vfprintf_internal_r+0x130>
   10748:	bac00007 	ldb	r11,0(r23)
   1074c:	d8800615 	stw	r2,24(sp)
   10750:	003b1306 	br	f3a0 <___vfprintf_internal_r+0x130>
   10754:	dc402704 	addi	r17,sp,156
   10758:	003cda06 	br	fac4 <___vfprintf_internal_r+0x854>
   1075c:	18800017 	ldw	r2,0(r3)
   10760:	d8800915 	stw	r2,36(sp)
   10764:	18800117 	ldw	r2,4(r3)
   10768:	d8800a15 	stw	r2,40(sp)
   1076c:	003c4006 	br	f870 <___vfprintf_internal_r+0x600>
   10770:	00800c04 	movi	r2,48
   10774:	d8801385 	stb	r2,78(sp)
   10778:	df0013c5 	stb	fp,79(sp)
   1077c:	63000094 	ori	r12,r12,2
   10780:	00800084 	movi	r2,2
   10784:	003c0406 	br	f798 <___vfprintf_internal_r+0x528>
   10788:	d9400517 	ldw	r5,20(sp)
   1078c:	20800017 	ldw	r2,0(r4)
   10790:	d8c00615 	stw	r3,24(sp)
   10794:	2809d7fa 	srai	r4,r5,31
   10798:	11400015 	stw	r5,0(r2)
   1079c:	11000115 	stw	r4,4(r2)
   107a0:	003ae706 	br	f340 <___vfprintf_internal_r+0xd0>
   107a4:	202b883a 	mov	r21,r4
   107a8:	057f4c16 	blt	zero,r21,104dc <___vfprintf_internal_r+0x126c>
   107ac:	003f5506 	br	10504 <___vfprintf_internal_r+0x1294>
   107b0:	d8800417 	ldw	r2,16(sp)
   107b4:	1080004c 	andi	r2,r2,1
   107b8:	103f591e 	bne	r2,zero,10520 <___vfprintf_internal_r+0x12b0>
   107bc:	d9000817 	ldw	r4,32(sp)
   107c0:	d9400717 	ldw	r5,28(sp)
   107c4:	2545c83a 	sub	r2,r4,r21
   107c8:	2179c83a 	sub	fp,r4,r5
   107cc:	102b883a 	mov	r21,r2
   107d0:	e0bf730e 	bge	fp,r2,105a0 <___vfprintf_internal_r+0x1330>
   107d4:	e02b883a 	mov	r21,fp
   107d8:	003f7106 	br	105a0 <___vfprintf_internal_r+0x1330>
   107dc:	002b883a 	mov	r21,zero
   107e0:	003f4906 	br	10508 <___vfprintf_internal_r+0x1298>
   107e4:	d9801a04 	addi	r6,sp,104
   107e8:	900b883a 	mov	r5,r18
   107ec:	9809883a 	mov	r4,r19
   107f0:	0016da40 	call	16da4 <__sprint_r>
   107f4:	103bab1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   107f8:	d8c01c17 	ldw	r3,112(sp)
   107fc:	dd802704 	addi	r22,sp,156
   10800:	003dc206 	br	ff0c <___vfprintf_internal_r+0xc9c>
   10804:	408001f0 	cmpltui	r2,r8,7
   10808:	402b883a 	mov	r21,r8
   1080c:	1001a026 	beq	r2,zero,10e90 <___vfprintf_internal_r+0x1c20>
   10810:	044000b4 	movhi	r17,2
   10814:	a829883a 	mov	r20,r21
   10818:	d8c00615 	stw	r3,24(sp)
   1081c:	8c464204 	addi	r17,r17,6408
   10820:	003b5606 	br	f57c <___vfprintf_internal_r+0x30c>
   10824:	01c000b4 	movhi	r7,2
   10828:	a9000450 	cmplti	r4,r21,17
   1082c:	d8801b17 	ldw	r2,108(sp)
   10830:	39c64504 	addi	r7,r7,6420
   10834:	20017b1e 	bne	r4,zero,10e24 <___vfprintf_internal_r+0x1bb4>
   10838:	dc000e15 	stw	r16,56(sp)
   1083c:	07000404 	movi	fp,16
   10840:	3821883a 	mov	r16,r7
   10844:	00000406 	br	10858 <___vfprintf_internal_r+0x15e8>
   10848:	b5800204 	addi	r22,r22,8
   1084c:	ad7ffc04 	addi	r21,r21,-16
   10850:	a9000448 	cmpgei	r4,r21,17
   10854:	20017126 	beq	r4,zero,10e1c <___vfprintf_internal_r+0x1bac>
   10858:	10800044 	addi	r2,r2,1
   1085c:	18c00404 	addi	r3,r3,16
   10860:	b4000015 	stw	r16,0(r22)
   10864:	b7000115 	stw	fp,4(r22)
   10868:	d8c01c15 	stw	r3,112(sp)
   1086c:	d8801b15 	stw	r2,108(sp)
   10870:	11000208 	cmpgei	r4,r2,8
   10874:	203ff426 	beq	r4,zero,10848 <___vfprintf_internal_r+0x15d8>
   10878:	d9801a04 	addi	r6,sp,104
   1087c:	900b883a 	mov	r5,r18
   10880:	9809883a 	mov	r4,r19
   10884:	0016da40 	call	16da4 <__sprint_r>
   10888:	103b861e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   1088c:	d8c01c17 	ldw	r3,112(sp)
   10890:	d8801b17 	ldw	r2,108(sp)
   10894:	dd802704 	addi	r22,sp,156
   10898:	003fec06 	br	1084c <___vfprintf_internal_r+0x15dc>
   1089c:	dc402704 	addi	r17,sp,156
   108a0:	a805883a 	mov	r2,r21
   108a4:	dc000715 	stw	r16,28(sp)
   108a8:	902b883a 	mov	r21,r18
   108ac:	8821883a 	mov	r16,r17
   108b0:	db000415 	stw	r12,16(sp)
   108b4:	a023883a 	mov	r17,r20
   108b8:	da000e15 	stw	r8,56(sp)
   108bc:	9829883a 	mov	r20,r19
   108c0:	1025883a 	mov	r18,r2
   108c4:	6827883a 	mov	r19,r13
   108c8:	8809883a 	mov	r4,r17
   108cc:	900b883a 	mov	r5,r18
   108d0:	01800284 	movi	r6,10
   108d4:	000f883a 	mov	r7,zero
   108d8:	00197e40 	call	197e4 <__umoddi3>
   108dc:	10800c04 	addi	r2,r2,48
   108e0:	8809883a 	mov	r4,r17
   108e4:	900b883a 	mov	r5,r18
   108e8:	01800284 	movi	r6,10
   108ec:	000f883a 	mov	r7,zero
   108f0:	80bfffc5 	stb	r2,-1(r16)
   108f4:	00192540 	call	19254 <__udivdi3>
   108f8:	900d883a 	mov	r6,r18
   108fc:	880f883a 	mov	r7,r17
   10900:	843fffc4 	addi	r16,r16,-1
   10904:	1023883a 	mov	r17,r2
   10908:	1825883a 	mov	r18,r3
   1090c:	303fee1e 	bne	r6,zero,108c8 <___vfprintf_internal_r+0x1658>
   10910:	39c002a8 	cmpgeui	r7,r7,10
   10914:	383fec1e 	bne	r7,zero,108c8 <___vfprintf_internal_r+0x1658>
   10918:	8023883a 	mov	r17,r16
   1091c:	d8802704 	addi	r2,sp,156
   10920:	981b883a 	mov	r13,r19
   10924:	a825883a 	mov	r18,r21
   10928:	dc000717 	ldw	r16,28(sp)
   1092c:	da000e17 	ldw	r8,56(sp)
   10930:	a027883a 	mov	r19,r20
   10934:	146bc83a 	sub	r21,r2,r17
   10938:	003c6206 	br	fac4 <___vfprintf_internal_r+0x854>
   1093c:	d8800617 	ldw	r2,24(sp)
   10940:	10800017 	ldw	r2,0(r2)
   10944:	d8c00615 	stw	r3,24(sp)
   10948:	d8c00517 	ldw	r3,20(sp)
   1094c:	10c00015 	stw	r3,0(r2)
   10950:	003a7b06 	br	f340 <___vfprintf_internal_r+0xd0>
   10954:	d9801a04 	addi	r6,sp,104
   10958:	900b883a 	mov	r5,r18
   1095c:	9809883a 	mov	r4,r19
   10960:	0016da40 	call	16da4 <__sprint_r>
   10964:	103b4f1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10968:	d8c01c17 	ldw	r3,112(sp)
   1096c:	dd401b17 	ldw	r21,108(sp)
   10970:	df002704 	addi	fp,sp,156
   10974:	003e4a06 	br	102a0 <___vfprintf_internal_r+0x1030>
   10978:	d9801a04 	addi	r6,sp,104
   1097c:	900b883a 	mov	r5,r18
   10980:	9809883a 	mov	r4,r19
   10984:	0016da40 	call	16da4 <__sprint_r>
   10988:	103b461e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   1098c:	d8c01c17 	ldw	r3,112(sp)
   10990:	dd401b17 	ldw	r21,108(sp)
   10994:	df002704 	addi	fp,sp,156
   10998:	003e4c06 	br	102cc <___vfprintf_internal_r+0x105c>
   1099c:	d9801a04 	addi	r6,sp,104
   109a0:	900b883a 	mov	r5,r18
   109a4:	9809883a 	mov	r4,r19
   109a8:	da001115 	stw	r8,68(sp)
   109ac:	db400f15 	stw	r13,60(sp)
   109b0:	db800e15 	stw	r14,56(sp)
   109b4:	0016da40 	call	16da4 <__sprint_r>
   109b8:	103b3a1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   109bc:	d8c01c17 	ldw	r3,112(sp)
   109c0:	da001117 	ldw	r8,68(sp)
   109c4:	db400f17 	ldw	r13,60(sp)
   109c8:	db800e17 	ldw	r14,56(sp)
   109cc:	dd802704 	addi	r22,sp,156
   109d0:	003af706 	br	f5b0 <___vfprintf_internal_r+0x340>
   109d4:	8825883a 	mov	r18,r17
   109d8:	003b3206 	br	f6a4 <___vfprintf_internal_r+0x434>
   109dc:	d9000917 	ldw	r4,36(sp)
   109e0:	d9400a17 	ldw	r5,40(sp)
   109e4:	da000615 	stw	r8,24(sp)
   109e8:	200d883a 	mov	r6,r4
   109ec:	280f883a 	mov	r7,r5
   109f0:	db000415 	stw	r12,16(sp)
   109f4:	000c90c0 	call	c90c <__unorddf2>
   109f8:	db000417 	ldw	r12,16(sp)
   109fc:	da000617 	ldw	r8,24(sp)
   10a00:	1001f51e 	bne	r2,zero,111d8 <___vfprintf_internal_r+0x1f68>
   10a04:	057ff7c4 	movi	r21,-33
   10a08:	40bfffe0 	cmpeqi	r2,r8,-1
   10a0c:	e56a703a 	and	r21,fp,r21
   10a10:	1001931e 	bne	r2,zero,11060 <___vfprintf_internal_r+0x1df0>
   10a14:	a88011d8 	cmpnei	r2,r21,71
   10a18:	10013626 	beq	r2,zero,10ef4 <___vfprintf_internal_r+0x1c84>
   10a1c:	60804014 	ori	r2,r12,256
   10a20:	d8800415 	stw	r2,16(sp)
   10a24:	d8800a17 	ldw	r2,40(sp)
   10a28:	10011516 	blt	r2,zero,10e80 <___vfprintf_internal_r+0x1c10>
   10a2c:	dd000a17 	ldw	r20,40(sp)
   10a30:	d8000605 	stb	zero,24(sp)
   10a34:	e08019a0 	cmpeqi	r2,fp,102
   10a38:	d8800f15 	stw	r2,60(sp)
   10a3c:	1000b91e 	bne	r2,zero,10d24 <___vfprintf_internal_r+0x1ab4>
   10a40:	e08011a0 	cmpeqi	r2,fp,70
   10a44:	1000b71e 	bne	r2,zero,10d24 <___vfprintf_internal_r+0x1ab4>
   10a48:	a8801158 	cmpnei	r2,r21,69
   10a4c:	10014126 	beq	r2,zero,10f54 <___vfprintf_internal_r+0x1ce4>
   10a50:	d8801804 	addi	r2,sp,96
   10a54:	d8800315 	stw	r2,12(sp)
   10a58:	d9400917 	ldw	r5,36(sp)
   10a5c:	d8801504 	addi	r2,sp,84
   10a60:	d8800215 	stw	r2,8(sp)
   10a64:	d8801404 	addi	r2,sp,80
   10a68:	da000015 	stw	r8,0(sp)
   10a6c:	9809883a 	mov	r4,r19
   10a70:	d8800115 	stw	r2,4(sp)
   10a74:	01c00084 	movi	r7,2
   10a78:	a00d883a 	mov	r6,r20
   10a7c:	db000815 	stw	r12,32(sp)
   10a80:	da000715 	stw	r8,28(sp)
   10a84:	00116b40 	call	116b4 <_dtoa_r>
   10a88:	da000717 	ldw	r8,28(sp)
   10a8c:	e10019d8 	cmpnei	r4,fp,103
   10a90:	db000817 	ldw	r12,32(sp)
   10a94:	1023883a 	mov	r17,r2
   10a98:	4007883a 	mov	r3,r8
   10a9c:	2001411e 	bne	r4,zero,10fa4 <___vfprintf_internal_r+0x1d34>
   10aa0:	6080004c 	andi	r2,r12,1
   10aa4:	1001411e 	bne	r2,zero,10fac <___vfprintf_internal_r+0x1d3c>
   10aa8:	d8801417 	ldw	r2,80(sp)
   10aac:	ad4011e0 	cmpeqi	r21,r21,71
   10ab0:	d8800715 	stw	r2,28(sp)
   10ab4:	d8801817 	ldw	r2,96(sp)
   10ab8:	1445c83a 	sub	r2,r2,r17
   10abc:	d8800815 	stw	r2,32(sp)
   10ac0:	a8000526 	beq	r21,zero,10ad8 <___vfprintf_internal_r+0x1868>
   10ac4:	d8c00717 	ldw	r3,28(sp)
   10ac8:	18bfff50 	cmplti	r2,r3,-3
   10acc:	1000011e 	bne	r2,zero,10ad4 <___vfprintf_internal_r+0x1864>
   10ad0:	40c1460e 	bge	r8,r3,10fec <___vfprintf_internal_r+0x1d7c>
   10ad4:	e73fff84 	addi	fp,fp,-2
   10ad8:	d8800717 	ldw	r2,28(sp)
   10adc:	df001645 	stb	fp,89(sp)
   10ae0:	157fffc4 	addi	r21,r2,-1
   10ae4:	dd401415 	stw	r21,80(sp)
   10ae8:	a801ab16 	blt	r21,zero,11198 <___vfprintf_internal_r+0x1f28>
   10aec:	00800ac4 	movi	r2,43
   10af0:	d8801685 	stb	r2,90(sp)
   10af4:	a8800290 	cmplti	r2,r21,10
   10af8:	1001a01e 	bne	r2,zero,1117c <___vfprintf_internal_r+0x1f0c>
   10afc:	d98019c4 	addi	r6,sp,103
   10b00:	9029883a 	mov	r20,r18
   10b04:	dc400715 	stw	r17,28(sp)
   10b08:	8025883a 	mov	r18,r16
   10b0c:	db000f15 	stw	r12,60(sp)
   10b10:	3021883a 	mov	r16,r6
   10b14:	a809883a 	mov	r4,r21
   10b18:	01400284 	movi	r5,10
   10b1c:	000945c0 	call	945c <__modsi3>
   10b20:	10800c04 	addi	r2,r2,48
   10b24:	a809883a 	mov	r4,r21
   10b28:	80bfffc5 	stb	r2,-1(r16)
   10b2c:	01400284 	movi	r5,10
   10b30:	00093dc0 	call	93dc <__divsi3>
   10b34:	a9001908 	cmpgei	r4,r21,100
   10b38:	8023883a 	mov	r17,r16
   10b3c:	102b883a 	mov	r21,r2
   10b40:	843fffc4 	addi	r16,r16,-1
   10b44:	203ff31e 	bne	r4,zero,10b14 <___vfprintf_internal_r+0x18a4>
   10b48:	800d883a 	mov	r6,r16
   10b4c:	11000c04 	addi	r4,r2,48
   10b50:	9021883a 	mov	r16,r18
   10b54:	a025883a 	mov	r18,r20
   10b58:	8829883a 	mov	r20,r17
   10b5c:	a0bfff84 	addi	r2,r20,-2
   10b60:	313fffc5 	stb	r4,-1(r6)
   10b64:	d8c019c4 	addi	r3,sp,103
   10b68:	db000f17 	ldw	r12,60(sp)
   10b6c:	dc400717 	ldw	r17,28(sp)
   10b70:	10c1be2e 	bgeu	r2,r3,1126c <___vfprintf_internal_r+0x1ffc>
   10b74:	d8c016c4 	addi	r3,sp,91
   10b78:	00000106 	br	10b80 <___vfprintf_internal_r+0x1910>
   10b7c:	11000003 	ldbu	r4,0(r2)
   10b80:	19000005 	stb	r4,0(r3)
   10b84:	10800044 	addi	r2,r2,1
   10b88:	d90019c4 	addi	r4,sp,103
   10b8c:	18c00044 	addi	r3,r3,1
   10b90:	113ffa1e 	bne	r2,r4,10b7c <___vfprintf_internal_r+0x190c>
   10b94:	d8801a44 	addi	r2,sp,105
   10b98:	d8c016c4 	addi	r3,sp,91
   10b9c:	1505c83a 	sub	r2,r2,r20
   10ba0:	1885883a 	add	r2,r3,r2
   10ba4:	d8c01644 	addi	r3,sp,89
   10ba8:	10c5c83a 	sub	r2,r2,r3
   10bac:	d8801015 	stw	r2,64(sp)
   10bb0:	d8c00817 	ldw	r3,32(sp)
   10bb4:	d9001017 	ldw	r4,64(sp)
   10bb8:	18800088 	cmpgei	r2,r3,2
   10bbc:	192b883a 	add	r21,r3,r4
   10bc0:	10018126 	beq	r2,zero,111c8 <___vfprintf_internal_r+0x1f58>
   10bc4:	d8800b17 	ldw	r2,44(sp)
   10bc8:	a8ab883a 	add	r21,r21,r2
   10bcc:	a829883a 	mov	r20,r21
   10bd0:	a800010e 	bge	r21,zero,10bd8 <___vfprintf_internal_r+0x1968>
   10bd4:	0029883a 	mov	r20,zero
   10bd8:	d8000715 	stw	zero,28(sp)
   10bdc:	00008406 	br	10df0 <___vfprintf_internal_r+0x1b80>
   10be0:	880f883a 	mov	r7,r17
   10be4:	10800044 	addi	r2,r2,1
   10be8:	1d47883a 	add	r3,r3,r21
   10bec:	b1c00015 	stw	r7,0(r22)
   10bf0:	003a9506 	br	f648 <___vfprintf_internal_r+0x3d8>
   10bf4:	d9801a04 	addi	r6,sp,104
   10bf8:	900b883a 	mov	r5,r18
   10bfc:	9809883a 	mov	r4,r19
   10c00:	0016da40 	call	16da4 <__sprint_r>
   10c04:	103aa71e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10c08:	d8c01c17 	ldw	r3,112(sp)
   10c0c:	dd802704 	addi	r22,sp,156
   10c10:	003caf06 	br	fed0 <___vfprintf_internal_r+0xc60>
   10c14:	d9801a04 	addi	r6,sp,104
   10c18:	900b883a 	mov	r5,r18
   10c1c:	9809883a 	mov	r4,r19
   10c20:	da000e15 	stw	r8,56(sp)
   10c24:	0016da40 	call	16da4 <__sprint_r>
   10c28:	103a9e1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10c2c:	d8c01c17 	ldw	r3,112(sp)
   10c30:	da000e17 	ldw	r8,56(sp)
   10c34:	dd802704 	addi	r22,sp,156
   10c38:	003a7a06 	br	f624 <___vfprintf_internal_r+0x3b4>
   10c3c:	8809883a 	mov	r4,r17
   10c40:	db000415 	stw	r12,16(sp)
   10c44:	d8c00615 	stw	r3,24(sp)
   10c48:	000d8b00 	call	d8b0 <strlen>
   10c4c:	db000417 	ldw	r12,16(sp)
   10c50:	102b883a 	mov	r21,r2
   10c54:	1029883a 	mov	r20,r2
   10c58:	003a4806 	br	f57c <___vfprintf_internal_r+0x30c>
   10c5c:	800f883a 	mov	r7,r16
   10c60:	dc000717 	ldw	r16,28(sp)
   10c64:	ad400044 	addi	r21,r21,1
   10c68:	1d87883a 	add	r3,r3,r22
   10c6c:	e1c00015 	stw	r7,0(fp)
   10c70:	003da406 	br	10304 <___vfprintf_internal_r+0x1094>
   10c74:	d8800d17 	ldw	r2,52(sp)
   10c78:	d9000b17 	ldw	r4,44(sp)
   10c7c:	b0800015 	stw	r2,0(r22)
   10c80:	d8801b17 	ldw	r2,108(sp)
   10c84:	20c7883a 	add	r3,r4,r3
   10c88:	b1000115 	stw	r4,4(r22)
   10c8c:	10800044 	addi	r2,r2,1
   10c90:	d8c01c15 	stw	r3,112(sp)
   10c94:	d8801b15 	stw	r2,108(sp)
   10c98:	11000208 	cmpgei	r4,r2,8
   10c9c:	2000981e 	bne	r4,zero,10f00 <___vfprintf_internal_r+0x1c90>
   10ca0:	b5800204 	addi	r22,r22,8
   10ca4:	283d5f0e 	bge	r5,zero,10224 <___vfprintf_internal_r+0xfb4>
   10ca8:	01c000b4 	movhi	r7,2
   10cac:	293ffc08 	cmpgei	r4,r5,-16
   10cb0:	39c64504 	addi	r7,r7,6420
   10cb4:	0179c83a 	sub	fp,zero,r5
   10cb8:	2001151e 	bne	r4,zero,11110 <___vfprintf_internal_r+0x1ea0>
   10cbc:	dc000715 	stw	r16,28(sp)
   10cc0:	05400404 	movi	r21,16
   10cc4:	9021883a 	mov	r16,r18
   10cc8:	3825883a 	mov	r18,r7
   10ccc:	00000406 	br	10ce0 <___vfprintf_internal_r+0x1a70>
   10cd0:	b5800204 	addi	r22,r22,8
   10cd4:	e73ffc04 	addi	fp,fp,-16
   10cd8:	e1800448 	cmpgei	r6,fp,17
   10cdc:	30010926 	beq	r6,zero,11104 <___vfprintf_internal_r+0x1e94>
   10ce0:	10800044 	addi	r2,r2,1
   10ce4:	18c00404 	addi	r3,r3,16
   10ce8:	b4800015 	stw	r18,0(r22)
   10cec:	b5400115 	stw	r21,4(r22)
   10cf0:	d8c01c15 	stw	r3,112(sp)
   10cf4:	d8801b15 	stw	r2,108(sp)
   10cf8:	11800208 	cmpgei	r6,r2,8
   10cfc:	303ff426 	beq	r6,zero,10cd0 <___vfprintf_internal_r+0x1a60>
   10d00:	d9801a04 	addi	r6,sp,104
   10d04:	800b883a 	mov	r5,r16
   10d08:	9809883a 	mov	r4,r19
   10d0c:	0016da40 	call	16da4 <__sprint_r>
   10d10:	1001411e 	bne	r2,zero,11218 <___vfprintf_internal_r+0x1fa8>
   10d14:	d8c01c17 	ldw	r3,112(sp)
   10d18:	d8801b17 	ldw	r2,108(sp)
   10d1c:	dd802704 	addi	r22,sp,156
   10d20:	003fec06 	br	10cd4 <___vfprintf_internal_r+0x1a64>
   10d24:	d8801804 	addi	r2,sp,96
   10d28:	d8800315 	stw	r2,12(sp)
   10d2c:	d9400917 	ldw	r5,36(sp)
   10d30:	d8801504 	addi	r2,sp,84
   10d34:	d8800215 	stw	r2,8(sp)
   10d38:	d8801404 	addi	r2,sp,80
   10d3c:	da000015 	stw	r8,0(sp)
   10d40:	d8800115 	stw	r2,4(sp)
   10d44:	01c000c4 	movi	r7,3
   10d48:	a00d883a 	mov	r6,r20
   10d4c:	9809883a 	mov	r4,r19
   10d50:	db000815 	stw	r12,32(sp)
   10d54:	da000715 	stw	r8,28(sp)
   10d58:	00116b40 	call	116b4 <_dtoa_r>
   10d5c:	da000717 	ldw	r8,28(sp)
   10d60:	1023883a 	mov	r17,r2
   10d64:	db000817 	ldw	r12,32(sp)
   10d68:	1207883a 	add	r3,r2,r8
   10d6c:	88800007 	ldb	r2,0(r17)
   10d70:	10800c20 	cmpeqi	r2,r2,48
   10d74:	10004f1e 	bne	r2,zero,10eb4 <___vfprintf_internal_r+0x1c44>
   10d78:	d8801417 	ldw	r2,80(sp)
   10d7c:	1893883a 	add	r9,r3,r2
   10d80:	d9000917 	ldw	r4,36(sp)
   10d84:	000d883a 	mov	r6,zero
   10d88:	000f883a 	mov	r7,zero
   10d8c:	a00b883a 	mov	r5,r20
   10d90:	da401115 	stw	r9,68(sp)
   10d94:	da000815 	stw	r8,32(sp)
   10d98:	db000715 	stw	r12,28(sp)
   10d9c:	000b73c0 	call	b73c <__eqdf2>
   10da0:	db000717 	ldw	r12,28(sp)
   10da4:	da000817 	ldw	r8,32(sp)
   10da8:	da401117 	ldw	r9,68(sp)
   10dac:	1000811e 	bne	r2,zero,10fb4 <___vfprintf_internal_r+0x1d44>
   10db0:	4805883a 	mov	r2,r9
   10db4:	d8c01417 	ldw	r3,80(sp)
   10db8:	1445c83a 	sub	r2,r2,r17
   10dbc:	ad4011d8 	cmpnei	r21,r21,71
   10dc0:	d8c00715 	stw	r3,28(sp)
   10dc4:	d8800815 	stw	r2,32(sp)
   10dc8:	a83f3e26 	beq	r21,zero,10ac4 <___vfprintf_internal_r+0x1854>
   10dcc:	d8800f17 	ldw	r2,60(sp)
   10dd0:	103f4126 	beq	r2,zero,10ad8 <___vfprintf_internal_r+0x1868>
   10dd4:	d8c00717 	ldw	r3,28(sp)
   10dd8:	6080004c 	andi	r2,r12,1
   10ddc:	1204b03a 	or	r2,r2,r8
   10de0:	00c1050e 	bge	zero,r3,111f8 <___vfprintf_internal_r+0x1f88>
   10de4:	1000f11e 	bne	r2,zero,111ac <___vfprintf_internal_r+0x1f3c>
   10de8:	dd400717 	ldw	r21,28(sp)
   10dec:	a829883a 	mov	r20,r21
   10df0:	d8800607 	ldb	r2,24(sp)
   10df4:	10007826 	beq	r2,zero,10fd8 <___vfprintf_internal_r+0x1d68>
   10df8:	00800b44 	movi	r2,45
   10dfc:	d8801345 	stb	r2,77(sp)
   10e00:	d8800e17 	ldw	r2,56(sp)
   10e04:	0011883a 	mov	r8,zero
   10e08:	d8800615 	stw	r2,24(sp)
   10e0c:	003b3506 	br	fae4 <___vfprintf_internal_r+0x874>
   10e10:	044000b4 	movhi	r17,2
   10e14:	8c463404 	addi	r17,r17,6352
   10e18:	003aba06 	br	f904 <___vfprintf_internal_r+0x694>
   10e1c:	800f883a 	mov	r7,r16
   10e20:	dc000e17 	ldw	r16,56(sp)
   10e24:	10800044 	addi	r2,r2,1
   10e28:	1d47883a 	add	r3,r3,r21
   10e2c:	d8801b15 	stw	r2,108(sp)
   10e30:	b1c00015 	stw	r7,0(r22)
   10e34:	b5400115 	stw	r21,4(r22)
   10e38:	d8c01c15 	stw	r3,112(sp)
   10e3c:	10800208 	cmpgei	r2,r2,8
   10e40:	10003a1e 	bne	r2,zero,10f2c <___vfprintf_internal_r+0x1cbc>
   10e44:	b5800204 	addi	r22,r22,8
   10e48:	003db206 	br	10514 <___vfprintf_internal_r+0x12a4>
   10e4c:	00800b44 	movi	r2,45
   10e50:	d8801345 	stb	r2,77(sp)
   10e54:	03400b44 	movi	r13,45
   10e58:	003aa606 	br	f8f4 <___vfprintf_internal_r+0x684>
   10e5c:	d9801a04 	addi	r6,sp,104
   10e60:	900b883a 	mov	r5,r18
   10e64:	9809883a 	mov	r4,r19
   10e68:	0016da40 	call	16da4 <__sprint_r>
   10e6c:	103a0d1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10e70:	d9401417 	ldw	r5,80(sp)
   10e74:	d8c01c17 	ldw	r3,112(sp)
   10e78:	dd802704 	addi	r22,sp,156
   10e7c:	003cd706 	br	101dc <___vfprintf_internal_r+0xf6c>
   10e80:	1520003c 	xorhi	r20,r2,32768
   10e84:	00800b44 	movi	r2,45
   10e88:	d8800605 	stb	r2,24(sp)
   10e8c:	003ee906 	br	10a34 <___vfprintf_internal_r+0x17c4>
   10e90:	05400184 	movi	r21,6
   10e94:	003e5e06 	br	10810 <___vfprintf_internal_r+0x15a0>
   10e98:	d9801a04 	addi	r6,sp,104
   10e9c:	900b883a 	mov	r5,r18
   10ea0:	9809883a 	mov	r4,r19
   10ea4:	0016da40 	call	16da4 <__sprint_r>
   10ea8:	0039fe06 	br	f6a4 <___vfprintf_internal_r+0x434>
   10eac:	d9401345 	stb	r5,77(sp)
   10eb0:	0039ac06 	br	f564 <___vfprintf_internal_r+0x2f4>
   10eb4:	d9000917 	ldw	r4,36(sp)
   10eb8:	000d883a 	mov	r6,zero
   10ebc:	000f883a 	mov	r7,zero
   10ec0:	a00b883a 	mov	r5,r20
   10ec4:	d8c01115 	stw	r3,68(sp)
   10ec8:	da000815 	stw	r8,32(sp)
   10ecc:	db000715 	stw	r12,28(sp)
   10ed0:	000b73c0 	call	b73c <__eqdf2>
   10ed4:	db000717 	ldw	r12,28(sp)
   10ed8:	da000817 	ldw	r8,32(sp)
   10edc:	d8c01117 	ldw	r3,68(sp)
   10ee0:	103fa526 	beq	r2,zero,10d78 <___vfprintf_internal_r+0x1b08>
   10ee4:	00800044 	movi	r2,1
   10ee8:	1205c83a 	sub	r2,r2,r8
   10eec:	d8801415 	stw	r2,80(sp)
   10ef0:	003fa206 	br	10d7c <___vfprintf_internal_r+0x1b0c>
   10ef4:	403ec91e 	bne	r8,zero,10a1c <___vfprintf_internal_r+0x17ac>
   10ef8:	02000044 	movi	r8,1
   10efc:	003ec706 	br	10a1c <___vfprintf_internal_r+0x17ac>
   10f00:	d9801a04 	addi	r6,sp,104
   10f04:	900b883a 	mov	r5,r18
   10f08:	9809883a 	mov	r4,r19
   10f0c:	0016da40 	call	16da4 <__sprint_r>
   10f10:	1039e41e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10f14:	d9401417 	ldw	r5,80(sp)
   10f18:	d8c01c17 	ldw	r3,112(sp)
   10f1c:	d8801b17 	ldw	r2,108(sp)
   10f20:	dd802704 	addi	r22,sp,156
   10f24:	283cbf0e 	bge	r5,zero,10224 <___vfprintf_internal_r+0xfb4>
   10f28:	003f5f06 	br	10ca8 <___vfprintf_internal_r+0x1a38>
   10f2c:	d9801a04 	addi	r6,sp,104
   10f30:	900b883a 	mov	r5,r18
   10f34:	9809883a 	mov	r4,r19
   10f38:	0016da40 	call	16da4 <__sprint_r>
   10f3c:	1039d91e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   10f40:	d8c01c17 	ldw	r3,112(sp)
   10f44:	dd802704 	addi	r22,sp,156
   10f48:	003d7206 	br	10514 <___vfprintf_internal_r+0x12a4>
   10f4c:	db000417 	ldw	r12,16(sp)
   10f50:	003ad706 	br	fab0 <___vfprintf_internal_r+0x840>
   10f54:	d8801804 	addi	r2,sp,96
   10f58:	d8800315 	stw	r2,12(sp)
   10f5c:	d9400917 	ldw	r5,36(sp)
   10f60:	d8801504 	addi	r2,sp,84
   10f64:	40c00044 	addi	r3,r8,1
   10f68:	d8800215 	stw	r2,8(sp)
   10f6c:	d8801404 	addi	r2,sp,80
   10f70:	d8c00015 	stw	r3,0(sp)
   10f74:	d8800115 	stw	r2,4(sp)
   10f78:	01c00084 	movi	r7,2
   10f7c:	a00d883a 	mov	r6,r20
   10f80:	9809883a 	mov	r4,r19
   10f84:	db001115 	stw	r12,68(sp)
   10f88:	da000815 	stw	r8,32(sp)
   10f8c:	d8c00715 	stw	r3,28(sp)
   10f90:	00116b40 	call	116b4 <_dtoa_r>
   10f94:	d8c00717 	ldw	r3,28(sp)
   10f98:	da000817 	ldw	r8,32(sp)
   10f9c:	db001117 	ldw	r12,68(sp)
   10fa0:	1023883a 	mov	r17,r2
   10fa4:	e08011d8 	cmpnei	r2,fp,71
   10fa8:	103ebd26 	beq	r2,zero,10aa0 <___vfprintf_internal_r+0x1830>
   10fac:	88d3883a 	add	r9,r17,r3
   10fb0:	003f7306 	br	10d80 <___vfprintf_internal_r+0x1b10>
   10fb4:	d8801817 	ldw	r2,96(sp)
   10fb8:	127f7e2e 	bgeu	r2,r9,10db4 <___vfprintf_internal_r+0x1b44>
   10fbc:	01000c04 	movi	r4,48
   10fc0:	10c00044 	addi	r3,r2,1
   10fc4:	d8c01815 	stw	r3,96(sp)
   10fc8:	11000005 	stb	r4,0(r2)
   10fcc:	d8801817 	ldw	r2,96(sp)
   10fd0:	127ffb36 	bltu	r2,r9,10fc0 <___vfprintf_internal_r+0x1d50>
   10fd4:	003f7706 	br	10db4 <___vfprintf_internal_r+0x1b44>
   10fd8:	d8800e17 	ldw	r2,56(sp)
   10fdc:	db401343 	ldbu	r13,77(sp)
   10fe0:	0011883a 	mov	r8,zero
   10fe4:	d8800615 	stw	r2,24(sp)
   10fe8:	003aba06 	br	fad4 <___vfprintf_internal_r+0x864>
   10fec:	d8800717 	ldw	r2,28(sp)
   10ff0:	d8c00817 	ldw	r3,32(sp)
   10ff4:	10c02b16 	blt	r2,r3,110a4 <___vfprintf_internal_r+0x1e34>
   10ff8:	6300004c 	andi	r12,r12,1
   10ffc:	6000581e 	bne	r12,zero,11160 <___vfprintf_internal_r+0x1ef0>
   11000:	1029883a 	mov	r20,r2
   11004:	1000010e 	bge	r2,zero,1100c <___vfprintf_internal_r+0x1d9c>
   11008:	0029883a 	mov	r20,zero
   1100c:	dd400717 	ldw	r21,28(sp)
   11010:	070019c4 	movi	fp,103
   11014:	003f7606 	br	10df0 <___vfprintf_internal_r+0x1b80>
   11018:	d9801a04 	addi	r6,sp,104
   1101c:	900b883a 	mov	r5,r18
   11020:	9809883a 	mov	r4,r19
   11024:	0016da40 	call	16da4 <__sprint_r>
   11028:	10399e1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   1102c:	dd401417 	ldw	r21,80(sp)
   11030:	d8c01c17 	ldw	r3,112(sp)
   11034:	dd802704 	addi	r22,sp,156
   11038:	003d4506 	br	10550 <___vfprintf_internal_r+0x12e0>
   1103c:	d9801a04 	addi	r6,sp,104
   11040:	900b883a 	mov	r5,r18
   11044:	9809883a 	mov	r4,r19
   11048:	0016da40 	call	16da4 <__sprint_r>
   1104c:	1039951e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   11050:	d8c01c17 	ldw	r3,112(sp)
   11054:	dd802704 	addi	r22,sp,156
   11058:	a83d2b0e 	bge	r21,zero,10508 <___vfprintf_internal_r+0x1298>
   1105c:	003ddf06 	br	107dc <___vfprintf_internal_r+0x156c>
   11060:	02000184 	movi	r8,6
   11064:	003e6d06 	br	10a1c <___vfprintf_internal_r+0x17ac>
   11068:	d9801a04 	addi	r6,sp,104
   1106c:	900b883a 	mov	r5,r18
   11070:	9809883a 	mov	r4,r19
   11074:	0016da40 	call	16da4 <__sprint_r>
   11078:	10398a1e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   1107c:	d8801417 	ldw	r2,80(sp)
   11080:	d9000817 	ldw	r4,32(sp)
   11084:	d8c01c17 	ldw	r3,112(sp)
   11088:	dd802704 	addi	r22,sp,156
   1108c:	2085c83a 	sub	r2,r4,r2
   11090:	003d4306 	br	105a0 <___vfprintf_internal_r+0x1330>
   11094:	4029883a 	mov	r20,r8
   11098:	d8c00615 	stw	r3,24(sp)
   1109c:	402b883a 	mov	r21,r8
   110a0:	00393606 	br	f57c <___vfprintf_internal_r+0x30c>
   110a4:	d8800817 	ldw	r2,32(sp)
   110a8:	d8c00b17 	ldw	r3,44(sp)
   110ac:	10eb883a 	add	r21,r2,r3
   110b0:	d8800717 	ldw	r2,28(sp)
   110b4:	00800316 	blt	zero,r2,110c4 <___vfprintf_internal_r+0x1e54>
   110b8:	d8800717 	ldw	r2,28(sp)
   110bc:	a8abc83a 	sub	r21,r21,r2
   110c0:	ad400044 	addi	r21,r21,1
   110c4:	a829883a 	mov	r20,r21
   110c8:	a8002a16 	blt	r21,zero,11174 <___vfprintf_internal_r+0x1f04>
   110cc:	070019c4 	movi	fp,103
   110d0:	003f4706 	br	10df0 <___vfprintf_internal_r+0x1b80>
   110d4:	d9401345 	stb	r5,77(sp)
   110d8:	003aa006 	br	fb5c <___vfprintf_internal_r+0x8ec>
   110dc:	d9401345 	stb	r5,77(sp)
   110e0:	003b3406 	br	fdb4 <___vfprintf_internal_r+0xb44>
   110e4:	d9401345 	stb	r5,77(sp)
   110e8:	0039d706 	br	f848 <___vfprintf_internal_r+0x5d8>
   110ec:	d9401345 	stb	r5,77(sp)
   110f0:	003a5a06 	br	fa5c <___vfprintf_internal_r+0x7ec>
   110f4:	d9401345 	stb	r5,77(sp)
   110f8:	003af306 	br	fcc8 <___vfprintf_internal_r+0xa58>
   110fc:	d9401345 	stb	r5,77(sp)
   11100:	003b4c06 	br	fe34 <___vfprintf_internal_r+0xbc4>
   11104:	900f883a 	mov	r7,r18
   11108:	8025883a 	mov	r18,r16
   1110c:	dc000717 	ldw	r16,28(sp)
   11110:	10800044 	addi	r2,r2,1
   11114:	1f07883a 	add	r3,r3,fp
   11118:	b1c00015 	stw	r7,0(r22)
   1111c:	b7000115 	stw	fp,4(r22)
   11120:	d8c01c15 	stw	r3,112(sp)
   11124:	d8801b15 	stw	r2,108(sp)
   11128:	11000208 	cmpgei	r4,r2,8
   1112c:	203c3c26 	beq	r4,zero,10220 <___vfprintf_internal_r+0xfb0>
   11130:	d9801a04 	addi	r6,sp,104
   11134:	900b883a 	mov	r5,r18
   11138:	9809883a 	mov	r4,r19
   1113c:	0016da40 	call	16da4 <__sprint_r>
   11140:	1039581e 	bne	r2,zero,f6a4 <___vfprintf_internal_r+0x434>
   11144:	d8c01c17 	ldw	r3,112(sp)
   11148:	d8801b17 	ldw	r2,108(sp)
   1114c:	dd802704 	addi	r22,sp,156
   11150:	003c3406 	br	10224 <___vfprintf_internal_r+0xfb4>
   11154:	00bfffc4 	movi	r2,-1
   11158:	d8800515 	stw	r2,20(sp)
   1115c:	00395406 	br	f6b0 <___vfprintf_internal_r+0x440>
   11160:	d8800717 	ldw	r2,28(sp)
   11164:	d8c00b17 	ldw	r3,44(sp)
   11168:	10eb883a 	add	r21,r2,r3
   1116c:	a829883a 	mov	r20,r21
   11170:	a83fd60e 	bge	r21,zero,110cc <___vfprintf_internal_r+0x1e5c>
   11174:	0029883a 	mov	r20,zero
   11178:	003fd406 	br	110cc <___vfprintf_internal_r+0x1e5c>
   1117c:	00800c04 	movi	r2,48
   11180:	ad400c04 	addi	r21,r21,48
   11184:	d88016c5 	stb	r2,91(sp)
   11188:	00800104 	movi	r2,4
   1118c:	dd401705 	stb	r21,92(sp)
   11190:	d8801015 	stw	r2,64(sp)
   11194:	003e8606 	br	10bb0 <___vfprintf_internal_r+0x1940>
   11198:	05400044 	movi	r21,1
   1119c:	a8abc83a 	sub	r21,r21,r2
   111a0:	00800b44 	movi	r2,45
   111a4:	d8801685 	stb	r2,90(sp)
   111a8:	003e5206 	br	10af4 <___vfprintf_internal_r+0x1884>
   111ac:	d8800b17 	ldw	r2,44(sp)
   111b0:	18ab883a 	add	r21,r3,r2
   111b4:	aa2b883a 	add	r21,r21,r8
   111b8:	a829883a 	mov	r20,r21
   111bc:	a83f0c0e 	bge	r21,zero,10df0 <___vfprintf_internal_r+0x1b80>
   111c0:	0029883a 	mov	r20,zero
   111c4:	003f0a06 	br	10df0 <___vfprintf_internal_r+0x1b80>
   111c8:	6080004c 	andi	r2,r12,1
   111cc:	d8800715 	stw	r2,28(sp)
   111d0:	103e7c1e 	bne	r2,zero,10bc4 <___vfprintf_internal_r+0x1954>
   111d4:	003ff806 	br	111b8 <___vfprintf_internal_r+0x1f48>
   111d8:	d8800a17 	ldw	r2,40(sp)
   111dc:	10001316 	blt	r2,zero,1122c <___vfprintf_internal_r+0x1fbc>
   111e0:	db401343 	ldbu	r13,77(sp)
   111e4:	e0801210 	cmplti	r2,fp,72
   111e8:	10000d1e 	bne	r2,zero,11220 <___vfprintf_internal_r+0x1fb0>
   111ec:	044000b4 	movhi	r17,2
   111f0:	8c463704 	addi	r17,r17,6364
   111f4:	0039c306 	br	f904 <___vfprintf_internal_r+0x694>
   111f8:	1000031e 	bne	r2,zero,11208 <___vfprintf_internal_r+0x1f98>
   111fc:	05000044 	movi	r20,1
   11200:	05400044 	movi	r21,1
   11204:	003efa06 	br	10df0 <___vfprintf_internal_r+0x1b80>
   11208:	d8800b17 	ldw	r2,44(sp)
   1120c:	15400044 	addi	r21,r2,1
   11210:	aa2b883a 	add	r21,r21,r8
   11214:	003fe806 	br	111b8 <___vfprintf_internal_r+0x1f48>
   11218:	8025883a 	mov	r18,r16
   1121c:	00392106 	br	f6a4 <___vfprintf_internal_r+0x434>
   11220:	044000b4 	movhi	r17,2
   11224:	8c463604 	addi	r17,r17,6360
   11228:	0039b606 	br	f904 <___vfprintf_internal_r+0x694>
   1122c:	00800b44 	movi	r2,45
   11230:	d8801345 	stb	r2,77(sp)
   11234:	03400b44 	movi	r13,45
   11238:	003fea06 	br	111e4 <___vfprintf_internal_r+0x1f74>
   1123c:	d8800617 	ldw	r2,24(sp)
   11240:	12000017 	ldw	r8,0(r2)
   11244:	10800104 	addi	r2,r2,4
   11248:	4000010e 	bge	r8,zero,11250 <___vfprintf_internal_r+0x1fe0>
   1124c:	023fffc4 	movi	r8,-1
   11250:	bf000043 	ldbu	fp,1(r23)
   11254:	d8800615 	stw	r2,24(sp)
   11258:	182f883a 	mov	r23,r3
   1125c:	e2c03fcc 	andi	r11,fp,255
   11260:	5ac0201c 	xori	r11,r11,128
   11264:	5affe004 	addi	r11,r11,-128
   11268:	00384d06 	br	f3a0 <___vfprintf_internal_r+0x130>
   1126c:	00800084 	movi	r2,2
   11270:	d8801015 	stw	r2,64(sp)
   11274:	003e4e06 	br	10bb0 <___vfprintf_internal_r+0x1940>

00011278 <__vfprintf_internal>:
   11278:	00c000b4 	movhi	r3,2
   1127c:	2005883a 	mov	r2,r4
   11280:	190f1717 	ldw	r4,15452(r3)
   11284:	300f883a 	mov	r7,r6
   11288:	280d883a 	mov	r6,r5
   1128c:	100b883a 	mov	r5,r2
   11290:	000f2701 	jmpi	f270 <___vfprintf_internal_r>

00011294 <__sbprintf>:
   11294:	2880030b 	ldhu	r2,12(r5)
   11298:	2b001917 	ldw	r12,100(r5)
   1129c:	2ac0038b 	ldhu	r11,14(r5)
   112a0:	2a800717 	ldw	r10,28(r5)
   112a4:	2a400917 	ldw	r9,36(r5)
   112a8:	defee204 	addi	sp,sp,-1144
   112ac:	da001a04 	addi	r8,sp,104
   112b0:	00c10004 	movi	r3,1024
   112b4:	dc011a15 	stw	r16,1128(sp)
   112b8:	10bfff4c 	andi	r2,r2,65533
   112bc:	2821883a 	mov	r16,r5
   112c0:	d80b883a 	mov	r5,sp
   112c4:	dc811c15 	stw	r18,1136(sp)
   112c8:	dc411b15 	stw	r17,1132(sp)
   112cc:	dfc11d15 	stw	ra,1140(sp)
   112d0:	2025883a 	mov	r18,r4
   112d4:	d880030d 	sth	r2,12(sp)
   112d8:	db001915 	stw	r12,100(sp)
   112dc:	dac0038d 	sth	r11,14(sp)
   112e0:	da800715 	stw	r10,28(sp)
   112e4:	da400915 	stw	r9,36(sp)
   112e8:	da000015 	stw	r8,0(sp)
   112ec:	da000415 	stw	r8,16(sp)
   112f0:	d8c00215 	stw	r3,8(sp)
   112f4:	d8c00515 	stw	r3,20(sp)
   112f8:	d8000615 	stw	zero,24(sp)
   112fc:	000f2700 	call	f270 <___vfprintf_internal_r>
   11300:	1023883a 	mov	r17,r2
   11304:	10000d0e 	bge	r2,zero,1133c <__sbprintf+0xa8>
   11308:	d880030b 	ldhu	r2,12(sp)
   1130c:	1080100c 	andi	r2,r2,64
   11310:	10000326 	beq	r2,zero,11320 <__sbprintf+0x8c>
   11314:	8080030b 	ldhu	r2,12(r16)
   11318:	10801014 	ori	r2,r2,64
   1131c:	8080030d 	sth	r2,12(r16)
   11320:	8805883a 	mov	r2,r17
   11324:	dfc11d17 	ldw	ra,1140(sp)
   11328:	dc811c17 	ldw	r18,1136(sp)
   1132c:	dc411b17 	ldw	r17,1132(sp)
   11330:	dc011a17 	ldw	r16,1128(sp)
   11334:	dec11e04 	addi	sp,sp,1144
   11338:	f800283a 	ret
   1133c:	d80b883a 	mov	r5,sp
   11340:	9009883a 	mov	r4,r18
   11344:	00130240 	call	13024 <_fflush_r>
   11348:	103fef26 	beq	r2,zero,11308 <__sbprintf+0x74>
   1134c:	047fffc4 	movi	r17,-1
   11350:	003fed06 	br	11308 <__sbprintf+0x74>

00011354 <__swsetup_r>:
   11354:	008000b4 	movhi	r2,2
   11358:	108f1717 	ldw	r2,15452(r2)
   1135c:	defffd04 	addi	sp,sp,-12
   11360:	dc400115 	stw	r17,4(sp)
   11364:	dc000015 	stw	r16,0(sp)
   11368:	dfc00215 	stw	ra,8(sp)
   1136c:	2023883a 	mov	r17,r4
   11370:	2821883a 	mov	r16,r5
   11374:	10000226 	beq	r2,zero,11380 <__swsetup_r+0x2c>
   11378:	10c00e17 	ldw	r3,56(r2)
   1137c:	18001f26 	beq	r3,zero,113fc <__swsetup_r+0xa8>
   11380:	8180030b 	ldhu	r6,12(r16)
   11384:	30c0020c 	andi	r3,r6,8
   11388:	3005883a 	mov	r2,r6
   1138c:	18002126 	beq	r3,zero,11414 <__swsetup_r+0xc0>
   11390:	80c00417 	ldw	r3,16(r16)
   11394:	18002826 	beq	r3,zero,11438 <__swsetup_r+0xe4>
   11398:	1100004c 	andi	r4,r2,1
   1139c:	20000b1e 	bne	r4,zero,113cc <__swsetup_r+0x78>
   113a0:	1100008c 	andi	r4,r2,2
   113a4:	20002e1e 	bne	r4,zero,11460 <__swsetup_r+0x10c>
   113a8:	81000517 	ldw	r4,20(r16)
   113ac:	81000215 	stw	r4,8(r16)
   113b0:	18000b26 	beq	r3,zero,113e0 <__swsetup_r+0x8c>
   113b4:	0005883a 	mov	r2,zero
   113b8:	dfc00217 	ldw	ra,8(sp)
   113bc:	dc400117 	ldw	r17,4(sp)
   113c0:	dc000017 	ldw	r16,0(sp)
   113c4:	dec00304 	addi	sp,sp,12
   113c8:	f800283a 	ret
   113cc:	81000517 	ldw	r4,20(r16)
   113d0:	80000215 	stw	zero,8(r16)
   113d4:	0109c83a 	sub	r4,zero,r4
   113d8:	81000615 	stw	r4,24(r16)
   113dc:	183ff51e 	bne	r3,zero,113b4 <__swsetup_r+0x60>
   113e0:	10c0200c 	andi	r3,r2,128
   113e4:	0005883a 	mov	r2,zero
   113e8:	183ff326 	beq	r3,zero,113b8 <__swsetup_r+0x64>
   113ec:	31801014 	ori	r6,r6,64
   113f0:	8180030d 	sth	r6,12(r16)
   113f4:	00bfffc4 	movi	r2,-1
   113f8:	003fef06 	br	113b8 <__swsetup_r+0x64>
   113fc:	1009883a 	mov	r4,r2
   11400:	001345c0 	call	1345c <__sinit>
   11404:	8180030b 	ldhu	r6,12(r16)
   11408:	30c0020c 	andi	r3,r6,8
   1140c:	3005883a 	mov	r2,r6
   11410:	183fdf1e 	bne	r3,zero,11390 <__swsetup_r+0x3c>
   11414:	3080040c 	andi	r2,r6,16
   11418:	10002126 	beq	r2,zero,114a0 <__swsetup_r+0x14c>
   1141c:	3080010c 	andi	r2,r6,4
   11420:	1000111e 	bne	r2,zero,11468 <__swsetup_r+0x114>
   11424:	80c00417 	ldw	r3,16(r16)
   11428:	30800214 	ori	r2,r6,8
   1142c:	8080030d 	sth	r2,12(r16)
   11430:	100d883a 	mov	r6,r2
   11434:	183fd81e 	bne	r3,zero,11398 <__swsetup_r+0x44>
   11438:	1100a00c 	andi	r4,r2,640
   1143c:	21008020 	cmpeqi	r4,r4,512
   11440:	203fd51e 	bne	r4,zero,11398 <__swsetup_r+0x44>
   11444:	800b883a 	mov	r5,r16
   11448:	8809883a 	mov	r4,r17
   1144c:	0014c1c0 	call	14c1c <__smakebuf_r>
   11450:	8180030b 	ldhu	r6,12(r16)
   11454:	80c00417 	ldw	r3,16(r16)
   11458:	3005883a 	mov	r2,r6
   1145c:	003fce06 	br	11398 <__swsetup_r+0x44>
   11460:	0009883a 	mov	r4,zero
   11464:	003fd106 	br	113ac <__swsetup_r+0x58>
   11468:	81400c17 	ldw	r5,48(r16)
   1146c:	28000626 	beq	r5,zero,11488 <__swsetup_r+0x134>
   11470:	80801004 	addi	r2,r16,64
   11474:	28800326 	beq	r5,r2,11484 <__swsetup_r+0x130>
   11478:	8809883a 	mov	r4,r17
   1147c:	00135c00 	call	135c0 <_free_r>
   11480:	8180030b 	ldhu	r6,12(r16)
   11484:	80000c15 	stw	zero,48(r16)
   11488:	80c00417 	ldw	r3,16(r16)
   1148c:	00bff6c4 	movi	r2,-37
   11490:	118c703a 	and	r6,r2,r6
   11494:	80000115 	stw	zero,4(r16)
   11498:	80c00015 	stw	r3,0(r16)
   1149c:	003fe206 	br	11428 <__swsetup_r+0xd4>
   114a0:	00800244 	movi	r2,9
   114a4:	88800015 	stw	r2,0(r17)
   114a8:	31801014 	ori	r6,r6,64
   114ac:	8180030d 	sth	r6,12(r16)
   114b0:	00bfffc4 	movi	r2,-1
   114b4:	003fc006 	br	113b8 <__swsetup_r+0x64>

000114b8 <quorem>:
   114b8:	defff504 	addi	sp,sp,-44
   114bc:	dc800315 	stw	r18,12(sp)
   114c0:	20800417 	ldw	r2,16(r4)
   114c4:	2c800417 	ldw	r18,16(r5)
   114c8:	dfc00a15 	stw	ra,40(sp)
   114cc:	df000915 	stw	fp,36(sp)
   114d0:	ddc00815 	stw	r23,32(sp)
   114d4:	dd800715 	stw	r22,28(sp)
   114d8:	dd400615 	stw	r21,24(sp)
   114dc:	dd000515 	stw	r20,20(sp)
   114e0:	dcc00415 	stw	r19,16(sp)
   114e4:	dc400215 	stw	r17,8(sp)
   114e8:	dc000115 	stw	r16,4(sp)
   114ec:	14806f16 	blt	r2,r18,116ac <quorem+0x1f4>
   114f0:	94bfffc4 	addi	r18,r18,-1
   114f4:	902c90ba 	slli	r22,r18,2
   114f8:	2c000504 	addi	r16,r5,20
   114fc:	25000504 	addi	r20,r4,20
   11500:	85a7883a 	add	r19,r16,r22
   11504:	9f000017 	ldw	fp,0(r19)
   11508:	a5ad883a 	add	r22,r20,r22
   1150c:	202b883a 	mov	r21,r4
   11510:	b1000017 	ldw	r4,0(r22)
   11514:	e7000044 	addi	fp,fp,1
   11518:	282f883a 	mov	r23,r5
   1151c:	e00b883a 	mov	r5,fp
   11520:	d9000015 	stw	r4,0(sp)
   11524:	00094d00 	call	94d0 <__udivsi3>
   11528:	d9000017 	ldw	r4,0(sp)
   1152c:	1023883a 	mov	r17,r2
   11530:	27002a36 	bltu	r4,fp,115dc <quorem+0x124>
   11534:	800b883a 	mov	r5,r16
   11538:	a009883a 	mov	r4,r20
   1153c:	0013883a 	mov	r9,zero
   11540:	0007883a 	mov	r3,zero
   11544:	2a000017 	ldw	r8,0(r5)
   11548:	21800017 	ldw	r6,0(r4)
   1154c:	21000104 	addi	r4,r4,4
   11550:	40bfffcc 	andi	r2,r8,65535
   11554:	1445383a 	mul	r2,r2,r17
   11558:	400ed43a 	srli	r7,r8,16
   1155c:	32bfffcc 	andi	r10,r6,65535
   11560:	1245883a 	add	r2,r2,r9
   11564:	1012d43a 	srli	r9,r2,16
   11568:	123fffcc 	andi	r8,r2,65535
   1156c:	3c4f383a 	mul	r7,r7,r17
   11570:	1a07c83a 	sub	r3,r3,r8
   11574:	1a91883a 	add	r8,r3,r10
   11578:	3006d43a 	srli	r3,r6,16
   1157c:	4005d43a 	srai	r2,r8,16
   11580:	3a4f883a 	add	r7,r7,r9
   11584:	39bfffcc 	andi	r6,r7,65535
   11588:	1987c83a 	sub	r3,r3,r6
   1158c:	1887883a 	add	r3,r3,r2
   11590:	1804943a 	slli	r2,r3,16
   11594:	423fffcc 	andi	r8,r8,65535
   11598:	29400104 	addi	r5,r5,4
   1159c:	1210b03a 	or	r8,r2,r8
   115a0:	223fff15 	stw	r8,-4(r4)
   115a4:	3812d43a 	srli	r9,r7,16
   115a8:	1807d43a 	srai	r3,r3,16
   115ac:	997fe52e 	bgeu	r19,r5,11544 <quorem+0x8c>
   115b0:	b0800017 	ldw	r2,0(r22)
   115b4:	1000091e 	bne	r2,zero,115dc <quorem+0x124>
   115b8:	b5bfff04 	addi	r22,r22,-4
   115bc:	a5800336 	bltu	r20,r22,115cc <quorem+0x114>
   115c0:	00000506 	br	115d8 <quorem+0x120>
   115c4:	94bfffc4 	addi	r18,r18,-1
   115c8:	a580032e 	bgeu	r20,r22,115d8 <quorem+0x120>
   115cc:	b0800017 	ldw	r2,0(r22)
   115d0:	b5bfff04 	addi	r22,r22,-4
   115d4:	103ffb26 	beq	r2,zero,115c4 <quorem+0x10c>
   115d8:	ac800415 	stw	r18,16(r21)
   115dc:	b80b883a 	mov	r5,r23
   115e0:	a809883a 	mov	r4,r21
   115e4:	0015bc00 	call	15bc0 <__mcmp>
   115e8:	10002316 	blt	r2,zero,11678 <quorem+0x1c0>
   115ec:	8c400044 	addi	r17,r17,1
   115f0:	a00d883a 	mov	r6,r20
   115f4:	0007883a 	mov	r3,zero
   115f8:	81000017 	ldw	r4,0(r16)
   115fc:	31400017 	ldw	r5,0(r6)
   11600:	31800104 	addi	r6,r6,4
   11604:	20bfffcc 	andi	r2,r4,65535
   11608:	1887c83a 	sub	r3,r3,r2
   1160c:	28bfffcc 	andi	r2,r5,65535
   11610:	1885883a 	add	r2,r3,r2
   11614:	2008d43a 	srli	r4,r4,16
   11618:	2806d43a 	srli	r3,r5,16
   1161c:	100fd43a 	srai	r7,r2,16
   11620:	117fffcc 	andi	r5,r2,65535
   11624:	1907c83a 	sub	r3,r3,r4
   11628:	19c7883a 	add	r3,r3,r7
   1162c:	1804943a 	slli	r2,r3,16
   11630:	84000104 	addi	r16,r16,4
   11634:	1807d43a 	srai	r3,r3,16
   11638:	1144b03a 	or	r2,r2,r5
   1163c:	30bfff15 	stw	r2,-4(r6)
   11640:	9c3fed2e 	bgeu	r19,r16,115f8 <quorem+0x140>
   11644:	900490ba 	slli	r2,r18,2
   11648:	a085883a 	add	r2,r20,r2
   1164c:	10c00017 	ldw	r3,0(r2)
   11650:	1800091e 	bne	r3,zero,11678 <quorem+0x1c0>
   11654:	10bfff04 	addi	r2,r2,-4
   11658:	a0800336 	bltu	r20,r2,11668 <quorem+0x1b0>
   1165c:	00000506 	br	11674 <quorem+0x1bc>
   11660:	94bfffc4 	addi	r18,r18,-1
   11664:	a080032e 	bgeu	r20,r2,11674 <quorem+0x1bc>
   11668:	10c00017 	ldw	r3,0(r2)
   1166c:	10bfff04 	addi	r2,r2,-4
   11670:	183ffb26 	beq	r3,zero,11660 <quorem+0x1a8>
   11674:	ac800415 	stw	r18,16(r21)
   11678:	8805883a 	mov	r2,r17
   1167c:	dfc00a17 	ldw	ra,40(sp)
   11680:	df000917 	ldw	fp,36(sp)
   11684:	ddc00817 	ldw	r23,32(sp)
   11688:	dd800717 	ldw	r22,28(sp)
   1168c:	dd400617 	ldw	r21,24(sp)
   11690:	dd000517 	ldw	r20,20(sp)
   11694:	dcc00417 	ldw	r19,16(sp)
   11698:	dc800317 	ldw	r18,12(sp)
   1169c:	dc400217 	ldw	r17,8(sp)
   116a0:	dc000117 	ldw	r16,4(sp)
   116a4:	dec00b04 	addi	sp,sp,44
   116a8:	f800283a 	ret
   116ac:	0005883a 	mov	r2,zero
   116b0:	003ff206 	br	1167c <quorem+0x1c4>

000116b4 <_dtoa_r>:
   116b4:	20801017 	ldw	r2,64(r4)
   116b8:	deffe304 	addi	sp,sp,-116
   116bc:	df001b15 	stw	fp,108(sp)
   116c0:	dcc01615 	stw	r19,88(sp)
   116c4:	dc801515 	stw	r18,84(sp)
   116c8:	dc401415 	stw	r17,80(sp)
   116cc:	dc001315 	stw	r16,76(sp)
   116d0:	dfc01c15 	stw	ra,112(sp)
   116d4:	ddc01a15 	stw	r23,104(sp)
   116d8:	dd801915 	stw	r22,100(sp)
   116dc:	dd401815 	stw	r21,96(sp)
   116e0:	dd001715 	stw	r20,92(sp)
   116e4:	d9c00215 	stw	r7,8(sp)
   116e8:	dc001f17 	ldw	r16,124(sp)
   116ec:	2039883a 	mov	fp,r4
   116f0:	3025883a 	mov	r18,r6
   116f4:	2827883a 	mov	r19,r5
   116f8:	3023883a 	mov	r17,r6
   116fc:	10000826 	beq	r2,zero,11720 <_dtoa_r+0x6c>
   11700:	21801117 	ldw	r6,68(r4)
   11704:	00c00044 	movi	r3,1
   11708:	100b883a 	mov	r5,r2
   1170c:	1986983a 	sll	r3,r3,r6
   11710:	11800115 	stw	r6,4(r2)
   11714:	10c00215 	stw	r3,8(r2)
   11718:	00152440 	call	15244 <_Bfree>
   1171c:	e0001015 	stw	zero,64(fp)
   11720:	90018916 	blt	r18,zero,11d48 <_dtoa_r+0x694>
   11724:	80000015 	stw	zero,0(r16)
   11728:	909ffc2c 	andhi	r2,r18,32752
   1172c:	00dffc34 	movhi	r3,32752
   11730:	10c18e26 	beq	r2,r3,11d6c <_dtoa_r+0x6b8>
   11734:	000d883a 	mov	r6,zero
   11738:	000f883a 	mov	r7,zero
   1173c:	9809883a 	mov	r4,r19
   11740:	880b883a 	mov	r5,r17
   11744:	000b73c0 	call	b73c <__eqdf2>
   11748:	1000191e 	bne	r2,zero,117b0 <_dtoa_r+0xfc>
   1174c:	d8c01e17 	ldw	r3,120(sp)
   11750:	00800044 	movi	r2,1
   11754:	18800015 	stw	r2,0(r3)
   11758:	d8802017 	ldw	r2,128(sp)
   1175c:	1002ff26 	beq	r2,zero,1235c <_dtoa_r+0xca8>
   11760:	d9002017 	ldw	r4,128(sp)
   11764:	008000b4 	movhi	r2,2
   11768:	10864444 	addi	r2,r2,6417
   1176c:	00c000b4 	movhi	r3,2
   11770:	20800015 	stw	r2,0(r4)
   11774:	18864404 	addi	r2,r3,6416
   11778:	d8800115 	stw	r2,4(sp)
   1177c:	d8800117 	ldw	r2,4(sp)
   11780:	dfc01c17 	ldw	ra,112(sp)
   11784:	df001b17 	ldw	fp,108(sp)
   11788:	ddc01a17 	ldw	r23,104(sp)
   1178c:	dd801917 	ldw	r22,100(sp)
   11790:	dd401817 	ldw	r21,96(sp)
   11794:	dd001717 	ldw	r20,92(sp)
   11798:	dcc01617 	ldw	r19,88(sp)
   1179c:	dc801517 	ldw	r18,84(sp)
   117a0:	dc401417 	ldw	r17,80(sp)
   117a4:	dc001317 	ldw	r16,76(sp)
   117a8:	dec01d04 	addi	sp,sp,116
   117ac:	f800283a 	ret
   117b0:	d8801104 	addi	r2,sp,68
   117b4:	9020d53a 	srli	r16,r18,20
   117b8:	d8800015 	stw	r2,0(sp)
   117bc:	d9c01204 	addi	r7,sp,72
   117c0:	980b883a 	mov	r5,r19
   117c4:	880d883a 	mov	r6,r17
   117c8:	e009883a 	mov	r4,fp
   117cc:	0015fa80 	call	15fa8 <__d2b>
   117d0:	102f883a 	mov	r23,r2
   117d4:	8001781e 	bne	r16,zero,11db8 <_dtoa_r+0x704>
   117d8:	dd001117 	ldw	r20,68(sp)
   117dc:	dc001217 	ldw	r16,72(sp)
   117e0:	a421883a 	add	r16,r20,r16
   117e4:	80810c84 	addi	r2,r16,1074
   117e8:	10c00850 	cmplti	r3,r2,33
   117ec:	1802eb1e 	bne	r3,zero,1239c <_dtoa_r+0xce8>
   117f0:	01001004 	movi	r4,64
   117f4:	2085c83a 	sub	r2,r4,r2
   117f8:	81010484 	addi	r4,r16,1042
   117fc:	90a4983a 	sll	r18,r18,r2
   11800:	9908d83a 	srl	r4,r19,r4
   11804:	9108b03a 	or	r4,r18,r4
   11808:	000ca980 	call	ca98 <__floatunsidf>
   1180c:	1009883a 	mov	r4,r2
   11810:	017f8434 	movhi	r5,65040
   11814:	00800044 	movi	r2,1
   11818:	194b883a 	add	r5,r3,r5
   1181c:	843fffc4 	addi	r16,r16,-1
   11820:	d8800915 	stw	r2,36(sp)
   11824:	000d883a 	mov	r6,zero
   11828:	01cffe34 	movhi	r7,16376
   1182c:	000c0000 	call	c000 <__subdf3>
   11830:	0198dbf4 	movhi	r6,25455
   11834:	01cff4f4 	movhi	r7,16339
   11838:	3190d844 	addi	r6,r6,17249
   1183c:	39e1e9c4 	addi	r7,r7,-30809
   11840:	1009883a 	mov	r4,r2
   11844:	180b883a 	mov	r5,r3
   11848:	000b98c0 	call	b98c <__muldf3>
   1184c:	01a2d874 	movhi	r6,35681
   11850:	01cff1f4 	movhi	r7,16327
   11854:	31b22cc4 	addi	r6,r6,-14157
   11858:	39e28a04 	addi	r7,r7,-30168
   1185c:	180b883a 	mov	r5,r3
   11860:	1009883a 	mov	r4,r2
   11864:	000a5fc0 	call	a5fc <__adddf3>
   11868:	8009883a 	mov	r4,r16
   1186c:	102b883a 	mov	r21,r2
   11870:	1825883a 	mov	r18,r3
   11874:	000c9e00 	call	c9e0 <__floatsidf>
   11878:	019427f4 	movhi	r6,20639
   1187c:	01cff4f4 	movhi	r7,16339
   11880:	319e7ec4 	addi	r6,r6,31227
   11884:	39d104c4 	addi	r7,r7,17427
   11888:	1009883a 	mov	r4,r2
   1188c:	180b883a 	mov	r5,r3
   11890:	000b98c0 	call	b98c <__muldf3>
   11894:	100d883a 	mov	r6,r2
   11898:	180f883a 	mov	r7,r3
   1189c:	a809883a 	mov	r4,r21
   118a0:	900b883a 	mov	r5,r18
   118a4:	000a5fc0 	call	a5fc <__adddf3>
   118a8:	1009883a 	mov	r4,r2
   118ac:	180b883a 	mov	r5,r3
   118b0:	1025883a 	mov	r18,r2
   118b4:	182d883a 	mov	r22,r3
   118b8:	000c9600 	call	c960 <__fixdfsi>
   118bc:	000d883a 	mov	r6,zero
   118c0:	000f883a 	mov	r7,zero
   118c4:	9009883a 	mov	r4,r18
   118c8:	b00b883a 	mov	r5,r22
   118cc:	102b883a 	mov	r21,r2
   118d0:	000b8a40 	call	b8a4 <__ledf2>
   118d4:	10029716 	blt	r2,zero,12334 <_dtoa_r+0xc80>
   118d8:	a421c83a 	sub	r16,r20,r16
   118dc:	a88005e8 	cmpgeui	r2,r21,23
   118e0:	85bfffc4 	addi	r22,r16,-1
   118e4:	10028b1e 	bne	r2,zero,12314 <_dtoa_r+0xc60>
   118e8:	a80690fa 	slli	r3,r21,3
   118ec:	008000b4 	movhi	r2,2
   118f0:	1086e604 	addi	r2,r2,7064
   118f4:	10c5883a 	add	r2,r2,r3
   118f8:	11800017 	ldw	r6,0(r2)
   118fc:	11c00117 	ldw	r7,4(r2)
   11900:	9809883a 	mov	r4,r19
   11904:	880b883a 	mov	r5,r17
   11908:	000b8a40 	call	b8a4 <__ledf2>
   1190c:	10025f0e 	bge	r2,zero,1228c <_dtoa_r+0xbd8>
   11910:	d8000815 	stw	zero,32(sp)
   11914:	ad7fffc4 	addi	r21,r21,-1
   11918:	b0028116 	blt	r22,zero,12320 <_dtoa_r+0xc6c>
   1191c:	d8000415 	stw	zero,16(sp)
   11920:	a8025d0e 	bge	r21,zero,12298 <_dtoa_r+0xbe4>
   11924:	d8800417 	ldw	r2,16(sp)
   11928:	d8c00217 	ldw	r3,8(sp)
   1192c:	dd400615 	stw	r21,24(sp)
   11930:	1545c83a 	sub	r2,r2,r21
   11934:	d8800415 	stw	r2,16(sp)
   11938:	0545c83a 	sub	r2,zero,r21
   1193c:	d8800715 	stw	r2,28(sp)
   11940:	188002a8 	cmpgeui	r2,r3,10
   11944:	002b883a 	mov	r21,zero
   11948:	1002591e 	bne	r2,zero,122b0 <_dtoa_r+0xbfc>
   1194c:	18800190 	cmplti	r2,r3,6
   11950:	1002961e 	bne	r2,zero,123ac <_dtoa_r+0xcf8>
   11954:	18bfff04 	addi	r2,r3,-4
   11958:	d8800215 	stw	r2,8(sp)
   1195c:	0021883a 	mov	r16,zero
   11960:	d8c00217 	ldw	r3,8(sp)
   11964:	18800120 	cmpeqi	r2,r3,4
   11968:	10036d1e 	bne	r2,zero,12720 <_dtoa_r+0x106c>
   1196c:	18800160 	cmpeqi	r2,r3,5
   11970:	1003291e 	bne	r2,zero,12618 <_dtoa_r+0xf64>
   11974:	188000a0 	cmpeqi	r2,r3,2
   11978:	10025926 	beq	r2,zero,122e0 <_dtoa_r+0xc2c>
   1197c:	d8000515 	stw	zero,20(sp)
   11980:	d8801d17 	ldw	r2,116(sp)
   11984:	0083340e 	bge	zero,r2,12658 <_dtoa_r+0xfa4>
   11988:	d8800b15 	stw	r2,44(sp)
   1198c:	d8800315 	stw	r2,12(sp)
   11990:	100d883a 	mov	r6,r2
   11994:	e0001115 	stw	zero,68(fp)
   11998:	30800610 	cmplti	r2,r6,24
   1199c:	1004f61e 	bne	r2,zero,12d78 <_dtoa_r+0x16c4>
   119a0:	00c00044 	movi	r3,1
   119a4:	00800104 	movi	r2,4
   119a8:	1085883a 	add	r2,r2,r2
   119ac:	11000504 	addi	r4,r2,20
   119b0:	180b883a 	mov	r5,r3
   119b4:	18c00044 	addi	r3,r3,1
   119b8:	313ffb2e 	bgeu	r6,r4,119a8 <_dtoa_r+0x2f4>
   119bc:	e1401115 	stw	r5,68(fp)
   119c0:	e009883a 	mov	r4,fp
   119c4:	00151a00 	call	151a0 <_Balloc>
   119c8:	d8800115 	stw	r2,4(sp)
   119cc:	1004e326 	beq	r2,zero,12d5c <_dtoa_r+0x16a8>
   119d0:	d8800117 	ldw	r2,4(sp)
   119d4:	e0801015 	stw	r2,64(fp)
   119d8:	d8800317 	ldw	r2,12(sp)
   119dc:	108003e8 	cmpgeui	r2,r2,15
   119e0:	1001091e 	bne	r2,zero,11e08 <_dtoa_r+0x754>
   119e4:	80010826 	beq	r16,zero,11e08 <_dtoa_r+0x754>
   119e8:	d9000617 	ldw	r4,24(sp)
   119ec:	0103970e 	bge	zero,r4,1284c <_dtoa_r+0x1198>
   119f0:	208003cc 	andi	r2,r4,15
   119f4:	100690fa 	slli	r3,r2,3
   119f8:	2029d13a 	srai	r20,r4,4
   119fc:	008000b4 	movhi	r2,2
   11a00:	1086e604 	addi	r2,r2,7064
   11a04:	10c5883a 	add	r2,r2,r3
   11a08:	a0c0040c 	andi	r3,r20,16
   11a0c:	12800017 	ldw	r10,0(r2)
   11a10:	12400117 	ldw	r9,4(r2)
   11a14:	18033c26 	beq	r3,zero,12708 <_dtoa_r+0x1054>
   11a18:	008000b4 	movhi	r2,2
   11a1c:	1086dc04 	addi	r2,r2,7024
   11a20:	11800817 	ldw	r6,32(r2)
   11a24:	11c00917 	ldw	r7,36(r2)
   11a28:	9809883a 	mov	r4,r19
   11a2c:	880b883a 	mov	r5,r17
   11a30:	da400e15 	stw	r9,56(sp)
   11a34:	da800d15 	stw	r10,52(sp)
   11a38:	000aeec0 	call	aeec <__divdf3>
   11a3c:	da800d17 	ldw	r10,52(sp)
   11a40:	da400e17 	ldw	r9,56(sp)
   11a44:	a50003cc 	andi	r20,r20,15
   11a48:	d8800a15 	stw	r2,40(sp)
   11a4c:	d8c00c15 	stw	r3,48(sp)
   11a50:	040000c4 	movi	r16,3
   11a54:	a0001126 	beq	r20,zero,11a9c <_dtoa_r+0x3e8>
   11a58:	048000b4 	movhi	r18,2
   11a5c:	9486dc04 	addi	r18,r18,7024
   11a60:	5009883a 	mov	r4,r10
   11a64:	480b883a 	mov	r5,r9
   11a68:	a180004c 	andi	r6,r20,1
   11a6c:	30000626 	beq	r6,zero,11a88 <_dtoa_r+0x3d4>
   11a70:	91800017 	ldw	r6,0(r18)
   11a74:	91c00117 	ldw	r7,4(r18)
   11a78:	84000044 	addi	r16,r16,1
   11a7c:	000b98c0 	call	b98c <__muldf3>
   11a80:	1009883a 	mov	r4,r2
   11a84:	180b883a 	mov	r5,r3
   11a88:	a029d07a 	srai	r20,r20,1
   11a8c:	94800204 	addi	r18,r18,8
   11a90:	a03ff51e 	bne	r20,zero,11a68 <_dtoa_r+0x3b4>
   11a94:	2015883a 	mov	r10,r4
   11a98:	2813883a 	mov	r9,r5
   11a9c:	d9000a17 	ldw	r4,40(sp)
   11aa0:	d9400c17 	ldw	r5,48(sp)
   11aa4:	500d883a 	mov	r6,r10
   11aa8:	480f883a 	mov	r7,r9
   11aac:	000aeec0 	call	aeec <__divdf3>
   11ab0:	d8800a15 	stw	r2,40(sp)
   11ab4:	1825883a 	mov	r18,r3
   11ab8:	d8800817 	ldw	r2,32(sp)
   11abc:	10000726 	beq	r2,zero,11adc <_dtoa_r+0x428>
   11ac0:	dd000a17 	ldw	r20,40(sp)
   11ac4:	000d883a 	mov	r6,zero
   11ac8:	01cffc34 	movhi	r7,16368
   11acc:	a009883a 	mov	r4,r20
   11ad0:	900b883a 	mov	r5,r18
   11ad4:	000b8a40 	call	b8a4 <__ledf2>
   11ad8:	10044516 	blt	r2,zero,12bf0 <_dtoa_r+0x153c>
   11adc:	8009883a 	mov	r4,r16
   11ae0:	000c9e00 	call	c9e0 <__floatsidf>
   11ae4:	d9800a17 	ldw	r6,40(sp)
   11ae8:	900f883a 	mov	r7,r18
   11aec:	1009883a 	mov	r4,r2
   11af0:	180b883a 	mov	r5,r3
   11af4:	000b98c0 	call	b98c <__muldf3>
   11af8:	000d883a 	mov	r6,zero
   11afc:	01d00734 	movhi	r7,16412
   11b00:	1009883a 	mov	r4,r2
   11b04:	180b883a 	mov	r5,r3
   11b08:	000a5fc0 	call	a5fc <__adddf3>
   11b0c:	1029883a 	mov	r20,r2
   11b10:	00bf3034 	movhi	r2,64704
   11b14:	1885883a 	add	r2,r3,r2
   11b18:	d8800c15 	stw	r2,48(sp)
   11b1c:	d8800317 	ldw	r2,12(sp)
   11b20:	10032d26 	beq	r2,zero,127d8 <_dtoa_r+0x1124>
   11b24:	d8800617 	ldw	r2,24(sp)
   11b28:	d8801015 	stw	r2,64(sp)
   11b2c:	d8800317 	ldw	r2,12(sp)
   11b30:	d8800d15 	stw	r2,52(sp)
   11b34:	d8800d17 	ldw	r2,52(sp)
   11b38:	dc000a17 	ldw	r16,40(sp)
   11b3c:	900b883a 	mov	r5,r18
   11b40:	10bfffc4 	addi	r2,r2,-1
   11b44:	100690fa 	slli	r3,r2,3
   11b48:	008000b4 	movhi	r2,2
   11b4c:	1086e604 	addi	r2,r2,7064
   11b50:	10c5883a 	add	r2,r2,r3
   11b54:	12c00017 	ldw	r11,0(r2)
   11b58:	13000117 	ldw	r12,4(r2)
   11b5c:	8009883a 	mov	r4,r16
   11b60:	dac00e15 	stw	r11,56(sp)
   11b64:	db000a15 	stw	r12,40(sp)
   11b68:	000c9600 	call	c960 <__fixdfsi>
   11b6c:	1009883a 	mov	r4,r2
   11b70:	10800c04 	addi	r2,r2,48
   11b74:	d8800f15 	stw	r2,60(sp)
   11b78:	000c9e00 	call	c9e0 <__floatsidf>
   11b7c:	8009883a 	mov	r4,r16
   11b80:	100d883a 	mov	r6,r2
   11b84:	180f883a 	mov	r7,r3
   11b88:	900b883a 	mov	r5,r18
   11b8c:	000c0000 	call	c000 <__subdf3>
   11b90:	d9000117 	ldw	r4,4(sp)
   11b94:	dac00e17 	ldw	r11,56(sp)
   11b98:	db000a17 	ldw	r12,40(sp)
   11b9c:	1825883a 	mov	r18,r3
   11ba0:	d8c00517 	ldw	r3,20(sp)
   11ba4:	22000044 	addi	r8,r4,1
   11ba8:	da000e15 	stw	r8,56(sp)
   11bac:	1021883a 	mov	r16,r2
   11bb0:	580d883a 	mov	r6,r11
   11bb4:	600f883a 	mov	r7,r12
   11bb8:	1803b226 	beq	r3,zero,12a84 <_dtoa_r+0x13d0>
   11bbc:	0009883a 	mov	r4,zero
   11bc0:	014ff834 	movhi	r5,16352
   11bc4:	000aeec0 	call	aeec <__divdf3>
   11bc8:	d9c00c17 	ldw	r7,48(sp)
   11bcc:	a00d883a 	mov	r6,r20
   11bd0:	1009883a 	mov	r4,r2
   11bd4:	180b883a 	mov	r5,r3
   11bd8:	000c0000 	call	c000 <__subdf3>
   11bdc:	d9000117 	ldw	r4,4(sp)
   11be0:	1029883a 	mov	r20,r2
   11be4:	d8800f17 	ldw	r2,60(sp)
   11be8:	800d883a 	mov	r6,r16
   11bec:	900f883a 	mov	r7,r18
   11bf0:	20800005 	stb	r2,0(r4)
   11bf4:	180b883a 	mov	r5,r3
   11bf8:	a009883a 	mov	r4,r20
   11bfc:	d8c00a15 	stw	r3,40(sp)
   11c00:	000b7bc0 	call	b7bc <__gedf2>
   11c04:	da000e17 	ldw	r8,56(sp)
   11c08:	0083e516 	blt	zero,r2,12ba0 <_dtoa_r+0x14ec>
   11c0c:	0005883a 	mov	r2,zero
   11c10:	dd400e15 	stw	r21,56(sp)
   11c14:	dd800f15 	stw	r22,60(sp)
   11c18:	ddc00c15 	stw	r23,48(sp)
   11c1c:	dd800d17 	ldw	r22,52(sp)
   11c20:	402b883a 	mov	r21,r8
   11c24:	dc400d15 	stw	r17,52(sp)
   11c28:	dc400a17 	ldw	r17,40(sp)
   11c2c:	dcc00a15 	stw	r19,40(sp)
   11c30:	1027883a 	mov	r19,r2
   11c34:	00002606 	br	11cd0 <_dtoa_r+0x61c>
   11c38:	9cc00044 	addi	r19,r19,1
   11c3c:	9d806d0e 	bge	r19,r22,11df4 <_dtoa_r+0x740>
   11c40:	a009883a 	mov	r4,r20
   11c44:	880b883a 	mov	r5,r17
   11c48:	000d883a 	mov	r6,zero
   11c4c:	01d00934 	movhi	r7,16420
   11c50:	000b98c0 	call	b98c <__muldf3>
   11c54:	000d883a 	mov	r6,zero
   11c58:	01d00934 	movhi	r7,16420
   11c5c:	8009883a 	mov	r4,r16
   11c60:	900b883a 	mov	r5,r18
   11c64:	1029883a 	mov	r20,r2
   11c68:	1823883a 	mov	r17,r3
   11c6c:	000b98c0 	call	b98c <__muldf3>
   11c70:	180b883a 	mov	r5,r3
   11c74:	1009883a 	mov	r4,r2
   11c78:	1821883a 	mov	r16,r3
   11c7c:	1025883a 	mov	r18,r2
   11c80:	000c9600 	call	c960 <__fixdfsi>
   11c84:	1009883a 	mov	r4,r2
   11c88:	102f883a 	mov	r23,r2
   11c8c:	000c9e00 	call	c9e0 <__floatsidf>
   11c90:	9009883a 	mov	r4,r18
   11c94:	800b883a 	mov	r5,r16
   11c98:	100d883a 	mov	r6,r2
   11c9c:	180f883a 	mov	r7,r3
   11ca0:	000c0000 	call	c000 <__subdf3>
   11ca4:	ad400044 	addi	r21,r21,1
   11ca8:	ba000c04 	addi	r8,r23,48
   11cac:	aa3fffc5 	stb	r8,-1(r21)
   11cb0:	a00d883a 	mov	r6,r20
   11cb4:	880f883a 	mov	r7,r17
   11cb8:	1009883a 	mov	r4,r2
   11cbc:	180b883a 	mov	r5,r3
   11cc0:	1021883a 	mov	r16,r2
   11cc4:	1825883a 	mov	r18,r3
   11cc8:	000b8a40 	call	b8a4 <__ledf2>
   11ccc:	10040516 	blt	r2,zero,12ce4 <_dtoa_r+0x1630>
   11cd0:	800d883a 	mov	r6,r16
   11cd4:	900f883a 	mov	r7,r18
   11cd8:	0009883a 	mov	r4,zero
   11cdc:	014ffc34 	movhi	r5,16368
   11ce0:	000c0000 	call	c000 <__subdf3>
   11ce4:	a00d883a 	mov	r6,r20
   11ce8:	880f883a 	mov	r7,r17
   11cec:	1009883a 	mov	r4,r2
   11cf0:	180b883a 	mov	r5,r3
   11cf4:	000b8a40 	call	b8a4 <__ledf2>
   11cf8:	103fcf0e 	bge	r2,zero,11c38 <_dtoa_r+0x584>
   11cfc:	d8801017 	ldw	r2,64(sp)
   11d00:	ddc00c17 	ldw	r23,48(sp)
   11d04:	d9000117 	ldw	r4,4(sp)
   11d08:	a829883a 	mov	r20,r21
   11d0c:	14c00044 	addi	r19,r2,1
   11d10:	00000106 	br	11d18 <_dtoa_r+0x664>
   11d14:	a103d826 	beq	r20,r4,12c78 <_dtoa_r+0x15c4>
   11d18:	a0ffffc3 	ldbu	r3,-1(r20)
   11d1c:	a011883a 	mov	r8,r20
   11d20:	a53fffc4 	addi	r20,r20,-1
   11d24:	18803fcc 	andi	r2,r3,255
   11d28:	1080201c 	xori	r2,r2,128
   11d2c:	10bfe004 	addi	r2,r2,-128
   11d30:	10800e60 	cmpeqi	r2,r2,57
   11d34:	103ff71e 	bne	r2,zero,11d14 <_dtoa_r+0x660>
   11d38:	18c00044 	addi	r3,r3,1
   11d3c:	a0c00005 	stb	r3,0(r20)
   11d40:	dcc00215 	stw	r19,8(sp)
   11d44:	00014406 	br	12258 <_dtoa_r+0xba4>
   11d48:	04600034 	movhi	r17,32768
   11d4c:	8c7fffc4 	addi	r17,r17,-1
   11d50:	9462703a 	and	r17,r18,r17
   11d54:	00800044 	movi	r2,1
   11d58:	8825883a 	mov	r18,r17
   11d5c:	80800015 	stw	r2,0(r16)
   11d60:	00dffc34 	movhi	r3,32752
   11d64:	909ffc2c 	andhi	r2,r18,32752
   11d68:	10fe721e 	bne	r2,r3,11734 <_dtoa_r+0x80>
   11d6c:	d9001e17 	ldw	r4,120(sp)
   11d70:	00800434 	movhi	r2,16
   11d74:	10bfffc4 	addi	r2,r2,-1
   11d78:	9084703a 	and	r2,r18,r2
   11d7c:	00c9c3c4 	movi	r3,9999
   11d80:	20c00015 	stw	r3,0(r4)
   11d84:	14e6b03a 	or	r19,r2,r19
   11d88:	9800141e 	bne	r19,zero,11ddc <_dtoa_r+0x728>
   11d8c:	d8802017 	ldw	r2,128(sp)
   11d90:	10041126 	beq	r2,zero,12dd8 <_dtoa_r+0x1724>
   11d94:	008000b4 	movhi	r2,2
   11d98:	1007883a 	mov	r3,r2
   11d9c:	18c64e04 	addi	r3,r3,6456
   11da0:	008000b4 	movhi	r2,2
   11da4:	d8c00115 	stw	r3,4(sp)
   11da8:	10865004 	addi	r2,r2,6464
   11dac:	d8c02017 	ldw	r3,128(sp)
   11db0:	18800015 	stw	r2,0(r3)
   11db4:	003e7106 	br	1177c <_dtoa_r+0xc8>
   11db8:	01400434 	movhi	r5,16
   11dbc:	297fffc4 	addi	r5,r5,-1
   11dc0:	894a703a 	and	r5,r17,r5
   11dc4:	dd001117 	ldw	r20,68(sp)
   11dc8:	9809883a 	mov	r4,r19
   11dcc:	294ffc34 	orhi	r5,r5,16368
   11dd0:	843f0044 	addi	r16,r16,-1023
   11dd4:	d8000915 	stw	zero,36(sp)
   11dd8:	003e9206 	br	11824 <_dtoa_r+0x170>
   11ddc:	d8802017 	ldw	r2,128(sp)
   11de0:	1002061e 	bne	r2,zero,125fc <_dtoa_r+0xf48>
   11de4:	008000b4 	movhi	r2,2
   11de8:	10864d04 	addi	r2,r2,6452
   11dec:	d8800115 	stw	r2,4(sp)
   11df0:	003e6206 	br	1177c <_dtoa_r+0xc8>
   11df4:	dd400e17 	ldw	r21,56(sp)
   11df8:	dd800f17 	ldw	r22,60(sp)
   11dfc:	ddc00c17 	ldw	r23,48(sp)
   11e00:	dc400d17 	ldw	r17,52(sp)
   11e04:	dcc00a17 	ldw	r19,40(sp)
   11e08:	d8801217 	ldw	r2,72(sp)
   11e0c:	10006e16 	blt	r2,zero,11fc8 <_dtoa_r+0x914>
   11e10:	d9000617 	ldw	r4,24(sp)
   11e14:	20c003c8 	cmpgei	r3,r4,15
   11e18:	18006b1e 	bne	r3,zero,11fc8 <_dtoa_r+0x914>
   11e1c:	200690fa 	slli	r3,r4,3
   11e20:	008000b4 	movhi	r2,2
   11e24:	1086e604 	addi	r2,r2,7064
   11e28:	10c5883a 	add	r2,r2,r3
   11e2c:	14000017 	ldw	r16,0(r2)
   11e30:	14800117 	ldw	r18,4(r2)
   11e34:	d8801d17 	ldw	r2,116(sp)
   11e38:	1000150e 	bge	r2,zero,11e90 <_dtoa_r+0x7dc>
   11e3c:	d8800317 	ldw	r2,12(sp)
   11e40:	00801316 	blt	zero,r2,11e90 <_dtoa_r+0x7dc>
   11e44:	d8800317 	ldw	r2,12(sp)
   11e48:	1002771e 	bne	r2,zero,12828 <_dtoa_r+0x1174>
   11e4c:	8009883a 	mov	r4,r16
   11e50:	000d883a 	mov	r6,zero
   11e54:	01d00534 	movhi	r7,16404
   11e58:	900b883a 	mov	r5,r18
   11e5c:	000b98c0 	call	b98c <__muldf3>
   11e60:	100d883a 	mov	r6,r2
   11e64:	180f883a 	mov	r7,r3
   11e68:	9809883a 	mov	r4,r19
   11e6c:	880b883a 	mov	r5,r17
   11e70:	000b8a40 	call	b8a4 <__ledf2>
   11e74:	0029883a 	mov	r20,zero
   11e78:	0021883a 	mov	r16,zero
   11e7c:	00820916 	blt	zero,r2,126a4 <_dtoa_r+0xff0>
   11e80:	d8801d17 	ldw	r2,116(sp)
   11e84:	da000117 	ldw	r8,4(sp)
   11e88:	00a6303a 	nor	r19,zero,r2
   11e8c:	00020b06 	br	126bc <_dtoa_r+0x1008>
   11e90:	800d883a 	mov	r6,r16
   11e94:	900f883a 	mov	r7,r18
   11e98:	9809883a 	mov	r4,r19
   11e9c:	880b883a 	mov	r5,r17
   11ea0:	000aeec0 	call	aeec <__divdf3>
   11ea4:	180b883a 	mov	r5,r3
   11ea8:	1009883a 	mov	r4,r2
   11eac:	000c9600 	call	c960 <__fixdfsi>
   11eb0:	1009883a 	mov	r4,r2
   11eb4:	102b883a 	mov	r21,r2
   11eb8:	000c9e00 	call	c9e0 <__floatsidf>
   11ebc:	800d883a 	mov	r6,r16
   11ec0:	900f883a 	mov	r7,r18
   11ec4:	1009883a 	mov	r4,r2
   11ec8:	180b883a 	mov	r5,r3
   11ecc:	000b98c0 	call	b98c <__muldf3>
   11ed0:	100d883a 	mov	r6,r2
   11ed4:	9809883a 	mov	r4,r19
   11ed8:	880b883a 	mov	r5,r17
   11edc:	180f883a 	mov	r7,r3
   11ee0:	000c0000 	call	c000 <__subdf3>
   11ee4:	d9800117 	ldw	r6,4(sp)
   11ee8:	dd800317 	ldw	r22,12(sp)
   11eec:	1009883a 	mov	r4,r2
   11ef0:	a8800c04 	addi	r2,r21,48
   11ef4:	30800005 	stb	r2,0(r6)
   11ef8:	b0800060 	cmpeqi	r2,r22,1
   11efc:	180b883a 	mov	r5,r3
   11f00:	35000044 	addi	r20,r6,1
   11f04:	10029c1e 	bne	r2,zero,12978 <_dtoa_r+0x12c4>
   11f08:	04400044 	movi	r17,1
   11f0c:	ddc00215 	stw	r23,8(sp)
   11f10:	00001c06 	br	11f84 <_dtoa_r+0x8d0>
   11f14:	800d883a 	mov	r6,r16
   11f18:	900f883a 	mov	r7,r18
   11f1c:	a809883a 	mov	r4,r21
   11f20:	980b883a 	mov	r5,r19
   11f24:	000aeec0 	call	aeec <__divdf3>
   11f28:	180b883a 	mov	r5,r3
   11f2c:	1009883a 	mov	r4,r2
   11f30:	000c9600 	call	c960 <__fixdfsi>
   11f34:	1009883a 	mov	r4,r2
   11f38:	102f883a 	mov	r23,r2
   11f3c:	000c9e00 	call	c9e0 <__floatsidf>
   11f40:	800d883a 	mov	r6,r16
   11f44:	900f883a 	mov	r7,r18
   11f48:	1009883a 	mov	r4,r2
   11f4c:	180b883a 	mov	r5,r3
   11f50:	000b98c0 	call	b98c <__muldf3>
   11f54:	a809883a 	mov	r4,r21
   11f58:	980b883a 	mov	r5,r19
   11f5c:	100d883a 	mov	r6,r2
   11f60:	180f883a 	mov	r7,r3
   11f64:	000c0000 	call	c000 <__subdf3>
   11f68:	b9000c04 	addi	r4,r23,48
   11f6c:	a1000005 	stb	r4,0(r20)
   11f70:	8c400044 	addi	r17,r17,1
   11f74:	a5000044 	addi	r20,r20,1
   11f78:	1009883a 	mov	r4,r2
   11f7c:	180b883a 	mov	r5,r3
   11f80:	b4427b26 	beq	r22,r17,12970 <_dtoa_r+0x12bc>
   11f84:	000d883a 	mov	r6,zero
   11f88:	01d00934 	movhi	r7,16420
   11f8c:	000b98c0 	call	b98c <__muldf3>
   11f90:	000d883a 	mov	r6,zero
   11f94:	000f883a 	mov	r7,zero
   11f98:	1009883a 	mov	r4,r2
   11f9c:	180b883a 	mov	r5,r3
   11fa0:	102b883a 	mov	r21,r2
   11fa4:	1827883a 	mov	r19,r3
   11fa8:	000b73c0 	call	b73c <__eqdf2>
   11fac:	103fd91e 	bne	r2,zero,11f14 <_dtoa_r+0x860>
   11fb0:	d8800617 	ldw	r2,24(sp)
   11fb4:	ddc00217 	ldw	r23,8(sp)
   11fb8:	a011883a 	mov	r8,r20
   11fbc:	10800044 	addi	r2,r2,1
   11fc0:	d8800215 	stw	r2,8(sp)
   11fc4:	0000a406 	br	12258 <_dtoa_r+0xba4>
   11fc8:	d8c00517 	ldw	r3,20(sp)
   11fcc:	1800e726 	beq	r3,zero,1236c <_dtoa_r+0xcb8>
   11fd0:	d8c00217 	ldw	r3,8(sp)
   11fd4:	18c00088 	cmpgei	r3,r3,2
   11fd8:	1801e526 	beq	r3,zero,12770 <_dtoa_r+0x10bc>
   11fdc:	d8800317 	ldw	r2,12(sp)
   11fe0:	153fffc4 	addi	r20,r2,-1
   11fe4:	d8800717 	ldw	r2,28(sp)
   11fe8:	1501c50e 	bge	r2,r20,12700 <_dtoa_r+0x104c>
   11fec:	d8800717 	ldw	r2,28(sp)
   11ff0:	dd000715 	stw	r20,28(sp)
   11ff4:	a085c83a 	sub	r2,r20,r2
   11ff8:	a8ab883a 	add	r21,r21,r2
   11ffc:	0029883a 	mov	r20,zero
   12000:	d8800317 	ldw	r2,12(sp)
   12004:	10028b16 	blt	r2,zero,12a34 <_dtoa_r+0x1380>
   12008:	d8c00417 	ldw	r3,16(sp)
   1200c:	b0ad883a 	add	r22,r22,r2
   12010:	1885883a 	add	r2,r3,r2
   12014:	1825883a 	mov	r18,r3
   12018:	d8800415 	stw	r2,16(sp)
   1201c:	01400044 	movi	r5,1
   12020:	e009883a 	mov	r4,fp
   12024:	00155ec0 	call	155ec <__i2b>
   12028:	1021883a 	mov	r16,r2
   1202c:	0480080e 	bge	zero,r18,12050 <_dtoa_r+0x99c>
   12030:	0580070e 	bge	zero,r22,12050 <_dtoa_r+0x99c>
   12034:	9005883a 	mov	r2,r18
   12038:	b481a916 	blt	r22,r18,126e0 <_dtoa_r+0x102c>
   1203c:	d8c00417 	ldw	r3,16(sp)
   12040:	90a5c83a 	sub	r18,r18,r2
   12044:	b0adc83a 	sub	r22,r22,r2
   12048:	1887c83a 	sub	r3,r3,r2
   1204c:	d8c00415 	stw	r3,16(sp)
   12050:	d8800717 	ldw	r2,28(sp)
   12054:	10001526 	beq	r2,zero,120ac <_dtoa_r+0x9f8>
   12058:	d8800517 	ldw	r2,20(sp)
   1205c:	1001f526 	beq	r2,zero,12834 <_dtoa_r+0x1180>
   12060:	05000f0e 	bge	zero,r20,120a0 <_dtoa_r+0x9ec>
   12064:	800b883a 	mov	r5,r16
   12068:	a00d883a 	mov	r6,r20
   1206c:	e009883a 	mov	r4,fp
   12070:	00158f00 	call	158f0 <__pow5mult>
   12074:	b80d883a 	mov	r6,r23
   12078:	100b883a 	mov	r5,r2
   1207c:	e009883a 	mov	r4,fp
   12080:	1021883a 	mov	r16,r2
   12084:	001569c0 	call	1569c <__multiply>
   12088:	b80b883a 	mov	r5,r23
   1208c:	e009883a 	mov	r4,fp
   12090:	d8800915 	stw	r2,36(sp)
   12094:	00152440 	call	15244 <_Bfree>
   12098:	d8800917 	ldw	r2,36(sp)
   1209c:	102f883a 	mov	r23,r2
   120a0:	d8800717 	ldw	r2,28(sp)
   120a4:	150dc83a 	sub	r6,r2,r20
   120a8:	15025d1e 	bne	r2,r20,12a20 <_dtoa_r+0x136c>
   120ac:	01400044 	movi	r5,1
   120b0:	e009883a 	mov	r4,fp
   120b4:	00155ec0 	call	155ec <__i2b>
   120b8:	1029883a 	mov	r20,r2
   120bc:	0540bd16 	blt	zero,r21,123b4 <_dtoa_r+0xd00>
   120c0:	d8800217 	ldw	r2,8(sp)
   120c4:	10800088 	cmpgei	r2,r2,2
   120c8:	10015626 	beq	r2,zero,12624 <_dtoa_r+0xf70>
   120cc:	0023883a 	mov	r17,zero
   120d0:	00800044 	movi	r2,1
   120d4:	a800c01e 	bne	r21,zero,123d8 <_dtoa_r+0xd24>
   120d8:	1585883a 	add	r2,r2,r22
   120dc:	108007cc 	andi	r2,r2,31
   120e0:	1000ac26 	beq	r2,zero,12394 <_dtoa_r+0xce0>
   120e4:	00c00804 	movi	r3,32
   120e8:	1887c83a 	sub	r3,r3,r2
   120ec:	19000150 	cmplti	r4,r3,5
   120f0:	20033d1e 	bne	r4,zero,12de8 <_dtoa_r+0x1734>
   120f4:	00c00704 	movi	r3,28
   120f8:	1885c83a 	sub	r2,r3,r2
   120fc:	d8c00417 	ldw	r3,16(sp)
   12100:	90a5883a 	add	r18,r18,r2
   12104:	b0ad883a 	add	r22,r22,r2
   12108:	1887883a 	add	r3,r3,r2
   1210c:	d8c00415 	stw	r3,16(sp)
   12110:	d8800417 	ldw	r2,16(sp)
   12114:	00809916 	blt	zero,r2,1237c <_dtoa_r+0xcc8>
   12118:	0580050e 	bge	zero,r22,12130 <_dtoa_r+0xa7c>
   1211c:	a00b883a 	mov	r5,r20
   12120:	b00d883a 	mov	r6,r22
   12124:	e009883a 	mov	r4,fp
   12128:	0015a380 	call	15a38 <__lshift>
   1212c:	1029883a 	mov	r20,r2
   12130:	d8800817 	ldw	r2,32(sp)
   12134:	10011d1e 	bne	r2,zero,125ac <_dtoa_r+0xef8>
   12138:	d8800317 	ldw	r2,12(sp)
   1213c:	00810a0e 	bge	zero,r2,12568 <_dtoa_r+0xeb4>
   12140:	d8800517 	ldw	r2,20(sp)
   12144:	1000b71e 	bne	r2,zero,12424 <_dtoa_r+0xd70>
   12148:	d8800617 	ldw	r2,24(sp)
   1214c:	10800044 	addi	r2,r2,1
   12150:	d8800215 	stw	r2,8(sp)
   12154:	dc800317 	ldw	r18,12(sp)
   12158:	dd400117 	ldw	r21,4(sp)
   1215c:	04400044 	movi	r17,1
   12160:	00000706 	br	12180 <_dtoa_r+0xacc>
   12164:	b80b883a 	mov	r5,r23
   12168:	000f883a 	mov	r7,zero
   1216c:	01800284 	movi	r6,10
   12170:	e009883a 	mov	r4,fp
   12174:	00152680 	call	15268 <__multadd>
   12178:	102f883a 	mov	r23,r2
   1217c:	8c400044 	addi	r17,r17,1
   12180:	a00b883a 	mov	r5,r20
   12184:	b809883a 	mov	r4,r23
   12188:	00114b80 	call	114b8 <quorem>
   1218c:	14c00c04 	addi	r19,r2,48
   12190:	ac45883a 	add	r2,r21,r17
   12194:	14ffffc5 	stb	r19,-1(r2)
   12198:	8cbff216 	blt	r17,r18,12164 <_dtoa_r+0xab0>
   1219c:	d8800317 	ldw	r2,12(sp)
   121a0:	00815d0e 	bge	zero,r2,12718 <_dtoa_r+0x1064>
   121a4:	d8c00117 	ldw	r3,4(sp)
   121a8:	0023883a 	mov	r17,zero
   121ac:	1891883a 	add	r8,r3,r2
   121b0:	b80b883a 	mov	r5,r23
   121b4:	01800044 	movi	r6,1
   121b8:	e009883a 	mov	r4,fp
   121bc:	da000315 	stw	r8,12(sp)
   121c0:	0015a380 	call	15a38 <__lshift>
   121c4:	a00b883a 	mov	r5,r20
   121c8:	1009883a 	mov	r4,r2
   121cc:	102f883a 	mov	r23,r2
   121d0:	0015bc00 	call	15bc0 <__mcmp>
   121d4:	da000317 	ldw	r8,12(sp)
   121d8:	0081540e 	bge	zero,r2,1272c <_dtoa_r+0x1078>
   121dc:	413fffc3 	ldbu	r4,-1(r8)
   121e0:	d9400117 	ldw	r5,4(sp)
   121e4:	00000306 	br	121f4 <_dtoa_r+0xb40>
   121e8:	28c15a26 	beq	r5,r3,12754 <_dtoa_r+0x10a0>
   121ec:	193fffc3 	ldbu	r4,-1(r3)
   121f0:	1811883a 	mov	r8,r3
   121f4:	20803fcc 	andi	r2,r4,255
   121f8:	1080201c 	xori	r2,r2,128
   121fc:	10bfe004 	addi	r2,r2,-128
   12200:	10800e60 	cmpeqi	r2,r2,57
   12204:	40ffffc4 	addi	r3,r8,-1
   12208:	103ff71e 	bne	r2,zero,121e8 <_dtoa_r+0xb34>
   1220c:	21000044 	addi	r4,r4,1
   12210:	19000005 	stb	r4,0(r3)
   12214:	a00b883a 	mov	r5,r20
   12218:	e009883a 	mov	r4,fp
   1221c:	da000315 	stw	r8,12(sp)
   12220:	00152440 	call	15244 <_Bfree>
   12224:	da000317 	ldw	r8,12(sp)
   12228:	80000b26 	beq	r16,zero,12258 <_dtoa_r+0xba4>
   1222c:	88000526 	beq	r17,zero,12244 <_dtoa_r+0xb90>
   12230:	8c000426 	beq	r17,r16,12244 <_dtoa_r+0xb90>
   12234:	880b883a 	mov	r5,r17
   12238:	e009883a 	mov	r4,fp
   1223c:	00152440 	call	15244 <_Bfree>
   12240:	da000317 	ldw	r8,12(sp)
   12244:	800b883a 	mov	r5,r16
   12248:	e009883a 	mov	r4,fp
   1224c:	da000315 	stw	r8,12(sp)
   12250:	00152440 	call	15244 <_Bfree>
   12254:	da000317 	ldw	r8,12(sp)
   12258:	b80b883a 	mov	r5,r23
   1225c:	e009883a 	mov	r4,fp
   12260:	da000315 	stw	r8,12(sp)
   12264:	00152440 	call	15244 <_Bfree>
   12268:	da000317 	ldw	r8,12(sp)
   1226c:	d8801e17 	ldw	r2,120(sp)
   12270:	d8c00217 	ldw	r3,8(sp)
   12274:	40000005 	stb	zero,0(r8)
   12278:	10c00015 	stw	r3,0(r2)
   1227c:	d8802017 	ldw	r2,128(sp)
   12280:	103d3e26 	beq	r2,zero,1177c <_dtoa_r+0xc8>
   12284:	12000015 	stw	r8,0(r2)
   12288:	003d3c06 	br	1177c <_dtoa_r+0xc8>
   1228c:	d8000815 	stw	zero,32(sp)
   12290:	b0002316 	blt	r22,zero,12320 <_dtoa_r+0xc6c>
   12294:	d8000415 	stw	zero,16(sp)
   12298:	d8c00217 	ldw	r3,8(sp)
   1229c:	dd400615 	stw	r21,24(sp)
   122a0:	d8000715 	stw	zero,28(sp)
   122a4:	188002a8 	cmpgeui	r2,r3,10
   122a8:	b56d883a 	add	r22,r22,r21
   122ac:	103da726 	beq	r2,zero,1194c <_dtoa_r+0x298>
   122b0:	00800044 	movi	r2,1
   122b4:	d8800515 	stw	r2,20(sp)
   122b8:	00bfffc4 	movi	r2,-1
   122bc:	04000044 	movi	r16,1
   122c0:	d8000215 	stw	zero,8(sp)
   122c4:	d8800315 	stw	r2,12(sp)
   122c8:	d8001d15 	stw	zero,116(sp)
   122cc:	d8800317 	ldw	r2,12(sp)
   122d0:	e0001115 	stw	zero,68(fp)
   122d4:	000b883a 	mov	r5,zero
   122d8:	d8800b15 	stw	r2,44(sp)
   122dc:	003db806 	br	119c0 <_dtoa_r+0x30c>
   122e0:	188000e0 	cmpeqi	r2,r3,3
   122e4:	d8000515 	stw	zero,20(sp)
   122e8:	1002a526 	beq	r2,zero,12d80 <_dtoa_r+0x16cc>
   122ec:	d8801d17 	ldw	r2,116(sp)
   122f0:	d8c00617 	ldw	r3,24(sp)
   122f4:	10c5883a 	add	r2,r2,r3
   122f8:	d8800b15 	stw	r2,44(sp)
   122fc:	10800044 	addi	r2,r2,1
   12300:	d8800315 	stw	r2,12(sp)
   12304:	100d883a 	mov	r6,r2
   12308:	00bda216 	blt	zero,r2,11994 <_dtoa_r+0x2e0>
   1230c:	01800044 	movi	r6,1
   12310:	003da006 	br	11994 <_dtoa_r+0x2e0>
   12314:	00800044 	movi	r2,1
   12318:	d8800815 	stw	r2,32(sp)
   1231c:	b03d7f0e 	bge	r22,zero,1191c <_dtoa_r+0x268>
   12320:	00800044 	movi	r2,1
   12324:	1405c83a 	sub	r2,r2,r16
   12328:	d8800415 	stw	r2,16(sp)
   1232c:	002d883a 	mov	r22,zero
   12330:	003d7b06 	br	11920 <_dtoa_r+0x26c>
   12334:	a809883a 	mov	r4,r21
   12338:	000c9e00 	call	c9e0 <__floatsidf>
   1233c:	900d883a 	mov	r6,r18
   12340:	b00f883a 	mov	r7,r22
   12344:	1009883a 	mov	r4,r2
   12348:	180b883a 	mov	r5,r3
   1234c:	000b73c0 	call	b73c <__eqdf2>
   12350:	103d6126 	beq	r2,zero,118d8 <_dtoa_r+0x224>
   12354:	ad7fffc4 	addi	r21,r21,-1
   12358:	003d5f06 	br	118d8 <_dtoa_r+0x224>
   1235c:	008000b4 	movhi	r2,2
   12360:	10864404 	addi	r2,r2,6416
   12364:	d8800115 	stw	r2,4(sp)
   12368:	003d0406 	br	1177c <_dtoa_r+0xc8>
   1236c:	dd000717 	ldw	r20,28(sp)
   12370:	dc800417 	ldw	r18,16(sp)
   12374:	0021883a 	mov	r16,zero
   12378:	003f2c06 	br	1202c <_dtoa_r+0x978>
   1237c:	b80b883a 	mov	r5,r23
   12380:	100d883a 	mov	r6,r2
   12384:	e009883a 	mov	r4,fp
   12388:	0015a380 	call	15a38 <__lshift>
   1238c:	102f883a 	mov	r23,r2
   12390:	003f6106 	br	12118 <_dtoa_r+0xa64>
   12394:	00800704 	movi	r2,28
   12398:	003f5806 	br	120fc <_dtoa_r+0xa48>
   1239c:	01000804 	movi	r4,32
   123a0:	2089c83a 	sub	r4,r4,r2
   123a4:	9908983a 	sll	r4,r19,r4
   123a8:	003d1706 	br	11808 <_dtoa_r+0x154>
   123ac:	04000044 	movi	r16,1
   123b0:	003d6b06 	br	11960 <_dtoa_r+0x2ac>
   123b4:	100b883a 	mov	r5,r2
   123b8:	a80d883a 	mov	r6,r21
   123bc:	e009883a 	mov	r4,fp
   123c0:	00158f00 	call	158f0 <__pow5mult>
   123c4:	d8c00217 	ldw	r3,8(sp)
   123c8:	1029883a 	mov	r20,r2
   123cc:	18c00090 	cmplti	r3,r3,2
   123d0:	18014b1e 	bne	r3,zero,12900 <_dtoa_r+0x124c>
   123d4:	0023883a 	mov	r17,zero
   123d8:	a0800417 	ldw	r2,16(r20)
   123dc:	10800104 	addi	r2,r2,4
   123e0:	100490ba 	slli	r2,r2,2
   123e4:	a085883a 	add	r2,r20,r2
   123e8:	11000017 	ldw	r4,0(r2)
   123ec:	00154d80 	call	154d8 <__hi0bits>
   123f0:	00c00804 	movi	r3,32
   123f4:	1885c83a 	sub	r2,r3,r2
   123f8:	003f3706 	br	120d8 <_dtoa_r+0xa24>
   123fc:	800b883a 	mov	r5,r16
   12400:	000f883a 	mov	r7,zero
   12404:	01800284 	movi	r6,10
   12408:	e009883a 	mov	r4,fp
   1240c:	00152680 	call	15268 <__multadd>
   12410:	1021883a 	mov	r16,r2
   12414:	d8800b17 	ldw	r2,44(sp)
   12418:	0082460e 	bge	zero,r2,12d34 <_dtoa_r+0x1680>
   1241c:	dd400615 	stw	r21,24(sp)
   12420:	d8800315 	stw	r2,12(sp)
   12424:	0480b016 	blt	zero,r18,126e8 <_dtoa_r+0x1034>
   12428:	88016c1e 	bne	r17,zero,129dc <_dtoa_r+0x1328>
   1242c:	8025883a 	mov	r18,r16
   12430:	dd800117 	ldw	r22,4(sp)
   12434:	d9000317 	ldw	r4,12(sp)
   12438:	98c0004c 	andi	r3,r19,1
   1243c:	b0bfffc4 	addi	r2,r22,-1
   12440:	1105883a 	add	r2,r2,r4
   12444:	d8800515 	stw	r2,20(sp)
   12448:	d8800217 	ldw	r2,8(sp)
   1244c:	d8c00815 	stw	r3,32(sp)
   12450:	1884b03a 	or	r2,r3,r2
   12454:	d8800715 	stw	r2,28(sp)
   12458:	00002b06 	br	12508 <_dtoa_r+0xe54>
   1245c:	b809883a 	mov	r4,r23
   12460:	d9400415 	stw	r5,16(sp)
   12464:	0015bc00 	call	15bc0 <__mcmp>
   12468:	d9400417 	ldw	r5,16(sp)
   1246c:	e009883a 	mov	r4,fp
   12470:	d8800315 	stw	r2,12(sp)
   12474:	00152440 	call	15244 <_Bfree>
   12478:	d8800317 	ldw	r2,12(sp)
   1247c:	1000021e 	bne	r2,zero,12488 <_dtoa_r+0xdd4>
   12480:	d8c00717 	ldw	r3,28(sp)
   12484:	18021d26 	beq	r3,zero,12cfc <_dtoa_r+0x1648>
   12488:	b2000044 	addi	r8,r22,1
   1248c:	da000315 	stw	r8,12(sp)
   12490:	88012116 	blt	r17,zero,12918 <_dtoa_r+0x1264>
   12494:	d8c00217 	ldw	r3,8(sp)
   12498:	88e2b03a 	or	r17,r17,r3
   1249c:	d8c00817 	ldw	r3,32(sp)
   124a0:	1c62b03a 	or	r17,r3,r17
   124a4:	88011c26 	beq	r17,zero,12918 <_dtoa_r+0x1264>
   124a8:	00816616 	blt	zero,r2,12a44 <_dtoa_r+0x1390>
   124ac:	d8800517 	ldw	r2,20(sp)
   124b0:	b4c00005 	stb	r19,0(r22)
   124b4:	15816d26 	beq	r2,r22,12a6c <_dtoa_r+0x13b8>
   124b8:	b80b883a 	mov	r5,r23
   124bc:	000f883a 	mov	r7,zero
   124c0:	01800284 	movi	r6,10
   124c4:	e009883a 	mov	r4,fp
   124c8:	00152680 	call	15268 <__multadd>
   124cc:	102f883a 	mov	r23,r2
   124d0:	800b883a 	mov	r5,r16
   124d4:	000f883a 	mov	r7,zero
   124d8:	01800284 	movi	r6,10
   124dc:	e009883a 	mov	r4,fp
   124e0:	84801d26 	beq	r16,r18,12558 <_dtoa_r+0xea4>
   124e4:	00152680 	call	15268 <__multadd>
   124e8:	900b883a 	mov	r5,r18
   124ec:	000f883a 	mov	r7,zero
   124f0:	01800284 	movi	r6,10
   124f4:	e009883a 	mov	r4,fp
   124f8:	1021883a 	mov	r16,r2
   124fc:	00152680 	call	15268 <__multadd>
   12500:	1025883a 	mov	r18,r2
   12504:	dd800317 	ldw	r22,12(sp)
   12508:	a00b883a 	mov	r5,r20
   1250c:	b809883a 	mov	r4,r23
   12510:	00114b80 	call	114b8 <quorem>
   12514:	800b883a 	mov	r5,r16
   12518:	b809883a 	mov	r4,r23
   1251c:	102b883a 	mov	r21,r2
   12520:	0015bc00 	call	15bc0 <__mcmp>
   12524:	a00b883a 	mov	r5,r20
   12528:	900d883a 	mov	r6,r18
   1252c:	e009883a 	mov	r4,fp
   12530:	1023883a 	mov	r17,r2
   12534:	0015c180 	call	15c18 <__mdiff>
   12538:	100b883a 	mov	r5,r2
   1253c:	10800317 	ldw	r2,12(r2)
   12540:	acc00c04 	addi	r19,r21,48
   12544:	103fc526 	beq	r2,zero,1245c <_dtoa_r+0xda8>
   12548:	e009883a 	mov	r4,fp
   1254c:	00152440 	call	15244 <_Bfree>
   12550:	00800044 	movi	r2,1
   12554:	003fcc06 	br	12488 <_dtoa_r+0xdd4>
   12558:	00152680 	call	15268 <__multadd>
   1255c:	1021883a 	mov	r16,r2
   12560:	1025883a 	mov	r18,r2
   12564:	003fe706 	br	12504 <_dtoa_r+0xe50>
   12568:	d8800217 	ldw	r2,8(sp)
   1256c:	108000d0 	cmplti	r2,r2,3
   12570:	10004026 	beq	r2,zero,12674 <_dtoa_r+0xfc0>
   12574:	d8800517 	ldw	r2,20(sp)
   12578:	103faa1e 	bne	r2,zero,12424 <_dtoa_r+0xd70>
   1257c:	a00b883a 	mov	r5,r20
   12580:	b809883a 	mov	r4,r23
   12584:	00114b80 	call	114b8 <quorem>
   12588:	14c00c04 	addi	r19,r2,48
   1258c:	d8800117 	ldw	r2,4(sp)
   12590:	0023883a 	mov	r17,zero
   12594:	12000044 	addi	r8,r2,1
   12598:	14c00005 	stb	r19,0(r2)
   1259c:	d8800617 	ldw	r2,24(sp)
   125a0:	10800044 	addi	r2,r2,1
   125a4:	d8800215 	stw	r2,8(sp)
   125a8:	003f0106 	br	121b0 <_dtoa_r+0xafc>
   125ac:	a00b883a 	mov	r5,r20
   125b0:	b809883a 	mov	r4,r23
   125b4:	0015bc00 	call	15bc0 <__mcmp>
   125b8:	103edf0e 	bge	r2,zero,12138 <_dtoa_r+0xa84>
   125bc:	b80b883a 	mov	r5,r23
   125c0:	000f883a 	mov	r7,zero
   125c4:	01800284 	movi	r6,10
   125c8:	e009883a 	mov	r4,fp
   125cc:	00152680 	call	15268 <__multadd>
   125d0:	d8c00617 	ldw	r3,24(sp)
   125d4:	102f883a 	mov	r23,r2
   125d8:	d8800517 	ldw	r2,20(sp)
   125dc:	1d7fffc4 	addi	r21,r3,-1
   125e0:	103f861e 	bne	r2,zero,123fc <_dtoa_r+0xd48>
   125e4:	d8800b17 	ldw	r2,44(sp)
   125e8:	0081cb0e 	bge	zero,r2,12d18 <_dtoa_r+0x1664>
   125ec:	d8c00617 	ldw	r3,24(sp)
   125f0:	d8800315 	stw	r2,12(sp)
   125f4:	d8c00215 	stw	r3,8(sp)
   125f8:	003ed606 	br	12154 <_dtoa_r+0xaa0>
   125fc:	008000b4 	movhi	r2,2
   12600:	1007883a 	mov	r3,r2
   12604:	18c64d04 	addi	r3,r3,6452
   12608:	008000b4 	movhi	r2,2
   1260c:	d8c00115 	stw	r3,4(sp)
   12610:	10864dc4 	addi	r2,r2,6455
   12614:	003de506 	br	11dac <_dtoa_r+0x6f8>
   12618:	00800044 	movi	r2,1
   1261c:	d8800515 	stw	r2,20(sp)
   12620:	003f3206 	br	122ec <_dtoa_r+0xc38>
   12624:	983ea91e 	bne	r19,zero,120cc <_dtoa_r+0xa18>
   12628:	00800434 	movhi	r2,16
   1262c:	10bfffc4 	addi	r2,r2,-1
   12630:	8884703a 	and	r2,r17,r2
   12634:	103ea51e 	bne	r2,zero,120cc <_dtoa_r+0xa18>
   12638:	8c5ffc2c 	andhi	r17,r17,32752
   1263c:	883ea326 	beq	r17,zero,120cc <_dtoa_r+0xa18>
   12640:	d8800417 	ldw	r2,16(sp)
   12644:	b5800044 	addi	r22,r22,1
   12648:	04400044 	movi	r17,1
   1264c:	10800044 	addi	r2,r2,1
   12650:	d8800415 	stw	r2,16(sp)
   12654:	003e9e06 	br	120d0 <_dtoa_r+0xa1c>
   12658:	00800044 	movi	r2,1
   1265c:	d8800315 	stw	r2,12(sp)
   12660:	d8801d15 	stw	r2,116(sp)
   12664:	003f1906 	br	122cc <_dtoa_r+0xc18>
   12668:	d8800b17 	ldw	r2,44(sp)
   1266c:	dd400615 	stw	r21,24(sp)
   12670:	d8800315 	stw	r2,12(sp)
   12674:	d8800317 	ldw	r2,12(sp)
   12678:	103e011e 	bne	r2,zero,11e80 <_dtoa_r+0x7cc>
   1267c:	a00b883a 	mov	r5,r20
   12680:	e009883a 	mov	r4,fp
   12684:	000f883a 	mov	r7,zero
   12688:	01800144 	movi	r6,5
   1268c:	00152680 	call	15268 <__multadd>
   12690:	100b883a 	mov	r5,r2
   12694:	b809883a 	mov	r4,r23
   12698:	1029883a 	mov	r20,r2
   1269c:	0015bc00 	call	15bc0 <__mcmp>
   126a0:	00bdf70e 	bge	zero,r2,11e80 <_dtoa_r+0x7cc>
   126a4:	d8c00117 	ldw	r3,4(sp)
   126a8:	00800c44 	movi	r2,49
   126ac:	18800005 	stb	r2,0(r3)
   126b0:	d8800617 	ldw	r2,24(sp)
   126b4:	1a000044 	addi	r8,r3,1
   126b8:	14c00044 	addi	r19,r2,1
   126bc:	a00b883a 	mov	r5,r20
   126c0:	e009883a 	mov	r4,fp
   126c4:	da000315 	stw	r8,12(sp)
   126c8:	00152440 	call	15244 <_Bfree>
   126cc:	98800044 	addi	r2,r19,1
   126d0:	d8800215 	stw	r2,8(sp)
   126d4:	da000317 	ldw	r8,12(sp)
   126d8:	803eda1e 	bne	r16,zero,12244 <_dtoa_r+0xb90>
   126dc:	003ede06 	br	12258 <_dtoa_r+0xba4>
   126e0:	b005883a 	mov	r2,r22
   126e4:	003e5506 	br	1203c <_dtoa_r+0x988>
   126e8:	800b883a 	mov	r5,r16
   126ec:	900d883a 	mov	r6,r18
   126f0:	e009883a 	mov	r4,fp
   126f4:	0015a380 	call	15a38 <__lshift>
   126f8:	1021883a 	mov	r16,r2
   126fc:	003f4a06 	br	12428 <_dtoa_r+0xd74>
   12700:	1529c83a 	sub	r20,r2,r20
   12704:	003e3e06 	br	12000 <_dtoa_r+0x94c>
   12708:	dcc00a15 	stw	r19,40(sp)
   1270c:	dc400c15 	stw	r17,48(sp)
   12710:	04000084 	movi	r16,2
   12714:	003ccf06 	br	11a54 <_dtoa_r+0x3a0>
   12718:	00800044 	movi	r2,1
   1271c:	003ea106 	br	121a4 <_dtoa_r+0xaf0>
   12720:	00800044 	movi	r2,1
   12724:	d8800515 	stw	r2,20(sp)
   12728:	003c9506 	br	11980 <_dtoa_r+0x2cc>
   1272c:	1000021e 	bne	r2,zero,12738 <_dtoa_r+0x1084>
   12730:	98c0004c 	andi	r3,r19,1
   12734:	183ea91e 	bne	r3,zero,121dc <_dtoa_r+0xb28>
   12738:	40bfffc7 	ldb	r2,-1(r8)
   1273c:	4007883a 	mov	r3,r8
   12740:	423fffc4 	addi	r8,r8,-1
   12744:	10800c20 	cmpeqi	r2,r2,48
   12748:	103ffb1e 	bne	r2,zero,12738 <_dtoa_r+0x1084>
   1274c:	1811883a 	mov	r8,r3
   12750:	003eb006 	br	12214 <_dtoa_r+0xb60>
   12754:	d8c00117 	ldw	r3,4(sp)
   12758:	00800c44 	movi	r2,49
   1275c:	18800005 	stb	r2,0(r3)
   12760:	d8800217 	ldw	r2,8(sp)
   12764:	10800044 	addi	r2,r2,1
   12768:	d8800215 	stw	r2,8(sp)
   1276c:	003ea906 	br	12214 <_dtoa_r+0xb60>
   12770:	d8c00917 	ldw	r3,36(sp)
   12774:	18010e26 	beq	r3,zero,12bb0 <_dtoa_r+0x14fc>
   12778:	d8c00417 	ldw	r3,16(sp)
   1277c:	10810cc4 	addi	r2,r2,1075
   12780:	b0ad883a 	add	r22,r22,r2
   12784:	1885883a 	add	r2,r3,r2
   12788:	dd000717 	ldw	r20,28(sp)
   1278c:	1825883a 	mov	r18,r3
   12790:	d8800415 	stw	r2,16(sp)
   12794:	003e2106 	br	1201c <_dtoa_r+0x968>
   12798:	8009883a 	mov	r4,r16
   1279c:	000c9e00 	call	c9e0 <__floatsidf>
   127a0:	d9800a17 	ldw	r6,40(sp)
   127a4:	900f883a 	mov	r7,r18
   127a8:	1009883a 	mov	r4,r2
   127ac:	180b883a 	mov	r5,r3
   127b0:	000b98c0 	call	b98c <__muldf3>
   127b4:	000d883a 	mov	r6,zero
   127b8:	01d00734 	movhi	r7,16412
   127bc:	1009883a 	mov	r4,r2
   127c0:	180b883a 	mov	r5,r3
   127c4:	000a5fc0 	call	a5fc <__adddf3>
   127c8:	1029883a 	mov	r20,r2
   127cc:	00bf3034 	movhi	r2,64704
   127d0:	1885883a 	add	r2,r3,r2
   127d4:	d8800c15 	stw	r2,48(sp)
   127d8:	d9000a17 	ldw	r4,40(sp)
   127dc:	900b883a 	mov	r5,r18
   127e0:	000d883a 	mov	r6,zero
   127e4:	01d00534 	movhi	r7,16404
   127e8:	000c0000 	call	c000 <__subdf3>
   127ec:	d9c00c17 	ldw	r7,48(sp)
   127f0:	a00d883a 	mov	r6,r20
   127f4:	1009883a 	mov	r4,r2
   127f8:	180b883a 	mov	r5,r3
   127fc:	1025883a 	mov	r18,r2
   12800:	1821883a 	mov	r16,r3
   12804:	000b7bc0 	call	b7bc <__gedf2>
   12808:	00812b16 	blt	zero,r2,12cb8 <_dtoa_r+0x1604>
   1280c:	d8800c17 	ldw	r2,48(sp)
   12810:	a00d883a 	mov	r6,r20
   12814:	9009883a 	mov	r4,r18
   12818:	11e0003c 	xorhi	r7,r2,32768
   1281c:	800b883a 	mov	r5,r16
   12820:	000b8a40 	call	b8a4 <__ledf2>
   12824:	103d780e 	bge	r2,zero,11e08 <_dtoa_r+0x754>
   12828:	0029883a 	mov	r20,zero
   1282c:	0021883a 	mov	r16,zero
   12830:	003d9306 	br	11e80 <_dtoa_r+0x7cc>
   12834:	d9800717 	ldw	r6,28(sp)
   12838:	b80b883a 	mov	r5,r23
   1283c:	e009883a 	mov	r4,fp
   12840:	00158f00 	call	158f0 <__pow5mult>
   12844:	102f883a 	mov	r23,r2
   12848:	003e1806 	br	120ac <_dtoa_r+0x9f8>
   1284c:	d8800617 	ldw	r2,24(sp)
   12850:	1000e326 	beq	r2,zero,12be0 <_dtoa_r+0x152c>
   12854:	00a9c83a 	sub	r20,zero,r2
   12858:	a08003cc 	andi	r2,r20,15
   1285c:	100690fa 	slli	r3,r2,3
   12860:	008000b4 	movhi	r2,2
   12864:	1086e604 	addi	r2,r2,7064
   12868:	10c5883a 	add	r2,r2,r3
   1286c:	11800017 	ldw	r6,0(r2)
   12870:	11c00117 	ldw	r7,4(r2)
   12874:	9809883a 	mov	r4,r19
   12878:	880b883a 	mov	r5,r17
   1287c:	a029d13a 	srai	r20,r20,4
   12880:	000b98c0 	call	b98c <__muldf3>
   12884:	d8800a15 	stw	r2,40(sp)
   12888:	1825883a 	mov	r18,r3
   1288c:	a0013126 	beq	r20,zero,12d54 <_dtoa_r+0x16a0>
   12890:	020000b4 	movhi	r8,2
   12894:	04000084 	movi	r16,2
   12898:	4206dc04 	addi	r8,r8,7024
   1289c:	180b883a 	mov	r5,r3
   128a0:	dc400c15 	stw	r17,48(sp)
   128a4:	1009883a 	mov	r4,r2
   128a8:	8023883a 	mov	r17,r16
   128ac:	0007883a 	mov	r3,zero
   128b0:	4021883a 	mov	r16,r8
   128b4:	a180004c 	andi	r6,r20,1
   128b8:	30000726 	beq	r6,zero,128d8 <_dtoa_r+0x1224>
   128bc:	81800017 	ldw	r6,0(r16)
   128c0:	81c00117 	ldw	r7,4(r16)
   128c4:	8c400044 	addi	r17,r17,1
   128c8:	000b98c0 	call	b98c <__muldf3>
   128cc:	180b883a 	mov	r5,r3
   128d0:	1009883a 	mov	r4,r2
   128d4:	00c00044 	movi	r3,1
   128d8:	a029d07a 	srai	r20,r20,1
   128dc:	84000204 	addi	r16,r16,8
   128e0:	a03ff41e 	bne	r20,zero,128b4 <_dtoa_r+0x1200>
   128e4:	18c03fcc 	andi	r3,r3,255
   128e8:	8821883a 	mov	r16,r17
   128ec:	dc400c17 	ldw	r17,48(sp)
   128f0:	183c7126 	beq	r3,zero,11ab8 <_dtoa_r+0x404>
   128f4:	d9000a15 	stw	r4,40(sp)
   128f8:	2825883a 	mov	r18,r5
   128fc:	003c6e06 	br	11ab8 <_dtoa_r+0x404>
   12900:	983eb41e 	bne	r19,zero,123d4 <_dtoa_r+0xd20>
   12904:	00800434 	movhi	r2,16
   12908:	10bfffc4 	addi	r2,r2,-1
   1290c:	8884703a 	and	r2,r17,r2
   12910:	103f4926 	beq	r2,zero,12638 <_dtoa_r+0xf84>
   12914:	003eaf06 	br	123d4 <_dtoa_r+0xd20>
   12918:	00800e0e 	bge	zero,r2,12954 <_dtoa_r+0x12a0>
   1291c:	b80b883a 	mov	r5,r23
   12920:	01800044 	movi	r6,1
   12924:	e009883a 	mov	r4,fp
   12928:	da000215 	stw	r8,8(sp)
   1292c:	0015a380 	call	15a38 <__lshift>
   12930:	a00b883a 	mov	r5,r20
   12934:	1009883a 	mov	r4,r2
   12938:	102f883a 	mov	r23,r2
   1293c:	0015bc00 	call	15bc0 <__mcmp>
   12940:	da000217 	ldw	r8,8(sp)
   12944:	0080e30e 	bge	zero,r2,12cd4 <_dtoa_r+0x1620>
   12948:	98c00e60 	cmpeqi	r3,r19,57
   1294c:	1800cf1e 	bne	r3,zero,12c8c <_dtoa_r+0x15d8>
   12950:	acc00c44 	addi	r19,r21,49
   12954:	8023883a 	mov	r17,r16
   12958:	d8800617 	ldw	r2,24(sp)
   1295c:	b4c00005 	stb	r19,0(r22)
   12960:	9021883a 	mov	r16,r18
   12964:	10800044 	addi	r2,r2,1
   12968:	d8800215 	stw	r2,8(sp)
   1296c:	003e2906 	br	12214 <_dtoa_r+0xb60>
   12970:	b82b883a 	mov	r21,r23
   12974:	ddc00217 	ldw	r23,8(sp)
   12978:	200d883a 	mov	r6,r4
   1297c:	280f883a 	mov	r7,r5
   12980:	000a5fc0 	call	a5fc <__adddf3>
   12984:	102d883a 	mov	r22,r2
   12988:	1009883a 	mov	r4,r2
   1298c:	d8800617 	ldw	r2,24(sp)
   12990:	800d883a 	mov	r6,r16
   12994:	900f883a 	mov	r7,r18
   12998:	10800044 	addi	r2,r2,1
   1299c:	180b883a 	mov	r5,r3
   129a0:	1823883a 	mov	r17,r3
   129a4:	1027883a 	mov	r19,r2
   129a8:	d8800215 	stw	r2,8(sp)
   129ac:	000b7bc0 	call	b7bc <__gedf2>
   129b0:	00808916 	blt	zero,r2,12bd8 <_dtoa_r+0x1524>
   129b4:	800d883a 	mov	r6,r16
   129b8:	900f883a 	mov	r7,r18
   129bc:	b009883a 	mov	r4,r22
   129c0:	880b883a 	mov	r5,r17
   129c4:	000b73c0 	call	b73c <__eqdf2>
   129c8:	1000021e 	bne	r2,zero,129d4 <_dtoa_r+0x1320>
   129cc:	ad40004c 	andi	r21,r21,1
   129d0:	a800811e 	bne	r21,zero,12bd8 <_dtoa_r+0x1524>
   129d4:	a011883a 	mov	r8,r20
   129d8:	003e1f06 	br	12258 <_dtoa_r+0xba4>
   129dc:	81400117 	ldw	r5,4(r16)
   129e0:	e009883a 	mov	r4,fp
   129e4:	00151a00 	call	151a0 <_Balloc>
   129e8:	1023883a 	mov	r17,r2
   129ec:	1000f326 	beq	r2,zero,12dbc <_dtoa_r+0x1708>
   129f0:	81800417 	ldw	r6,16(r16)
   129f4:	81400304 	addi	r5,r16,12
   129f8:	11000304 	addi	r4,r2,12
   129fc:	31800084 	addi	r6,r6,2
   12a00:	300c90ba 	slli	r6,r6,2
   12a04:	000d5f40 	call	d5f4 <memcpy>
   12a08:	01800044 	movi	r6,1
   12a0c:	880b883a 	mov	r5,r17
   12a10:	e009883a 	mov	r4,fp
   12a14:	0015a380 	call	15a38 <__lshift>
   12a18:	1025883a 	mov	r18,r2
   12a1c:	003e8406 	br	12430 <_dtoa_r+0xd7c>
   12a20:	b80b883a 	mov	r5,r23
   12a24:	e009883a 	mov	r4,fp
   12a28:	00158f00 	call	158f0 <__pow5mult>
   12a2c:	102f883a 	mov	r23,r2
   12a30:	003d9e06 	br	120ac <_dtoa_r+0x9f8>
   12a34:	d8800417 	ldw	r2,16(sp)
   12a38:	d8c00317 	ldw	r3,12(sp)
   12a3c:	10e5c83a 	sub	r18,r2,r3
   12a40:	003d7606 	br	1201c <_dtoa_r+0x968>
   12a44:	98800e58 	cmpnei	r2,r19,57
   12a48:	10009026 	beq	r2,zero,12c8c <_dtoa_r+0x15d8>
   12a4c:	d8800617 	ldw	r2,24(sp)
   12a50:	98c00044 	addi	r3,r19,1
   12a54:	8023883a 	mov	r17,r16
   12a58:	10800044 	addi	r2,r2,1
   12a5c:	d8800215 	stw	r2,8(sp)
   12a60:	b0c00005 	stb	r3,0(r22)
   12a64:	9021883a 	mov	r16,r18
   12a68:	003dea06 	br	12214 <_dtoa_r+0xb60>
   12a6c:	d8800617 	ldw	r2,24(sp)
   12a70:	8023883a 	mov	r17,r16
   12a74:	9021883a 	mov	r16,r18
   12a78:	10800044 	addi	r2,r2,1
   12a7c:	d8800215 	stw	r2,8(sp)
   12a80:	003dcb06 	br	121b0 <_dtoa_r+0xafc>
   12a84:	d9400c17 	ldw	r5,48(sp)
   12a88:	a009883a 	mov	r4,r20
   12a8c:	000b98c0 	call	b98c <__muldf3>
   12a90:	d9400117 	ldw	r5,4(sp)
   12a94:	d9000f17 	ldw	r4,60(sp)
   12a98:	d9800d17 	ldw	r6,52(sp)
   12a9c:	d8800a15 	stw	r2,40(sp)
   12aa0:	29000005 	stb	r4,0(r5)
   12aa4:	d8c00c15 	stw	r3,48(sp)
   12aa8:	31000058 	cmpnei	r4,r6,1
   12aac:	da000e17 	ldw	r8,56(sp)
   12ab0:	29a9883a 	add	r20,r5,r6
   12ab4:	20009d26 	beq	r4,zero,12d2c <_dtoa_r+0x1678>
   12ab8:	dc400d15 	stw	r17,52(sp)
   12abc:	8009883a 	mov	r4,r16
   12ac0:	900b883a 	mov	r5,r18
   12ac4:	4023883a 	mov	r17,r8
   12ac8:	dcc00e15 	stw	r19,56(sp)
   12acc:	000d883a 	mov	r6,zero
   12ad0:	01d00934 	movhi	r7,16420
   12ad4:	000b98c0 	call	b98c <__muldf3>
   12ad8:	180b883a 	mov	r5,r3
   12adc:	1009883a 	mov	r4,r2
   12ae0:	1825883a 	mov	r18,r3
   12ae4:	1027883a 	mov	r19,r2
   12ae8:	000c9600 	call	c960 <__fixdfsi>
   12aec:	1009883a 	mov	r4,r2
   12af0:	1021883a 	mov	r16,r2
   12af4:	000c9e00 	call	c9e0 <__floatsidf>
   12af8:	9809883a 	mov	r4,r19
   12afc:	900b883a 	mov	r5,r18
   12b00:	100d883a 	mov	r6,r2
   12b04:	180f883a 	mov	r7,r3
   12b08:	8c400044 	addi	r17,r17,1
   12b0c:	84000c04 	addi	r16,r16,48
   12b10:	000c0000 	call	c000 <__subdf3>
   12b14:	8c3fffc5 	stb	r16,-1(r17)
   12b18:	1009883a 	mov	r4,r2
   12b1c:	180b883a 	mov	r5,r3
   12b20:	a47fea1e 	bne	r20,r17,12acc <_dtoa_r+0x1418>
   12b24:	dc400d17 	ldw	r17,52(sp)
   12b28:	dcc00e17 	ldw	r19,56(sp)
   12b2c:	1021883a 	mov	r16,r2
   12b30:	1825883a 	mov	r18,r3
   12b34:	d9000a17 	ldw	r4,40(sp)
   12b38:	d9400c17 	ldw	r5,48(sp)
   12b3c:	000d883a 	mov	r6,zero
   12b40:	01cff834 	movhi	r7,16352
   12b44:	000a5fc0 	call	a5fc <__adddf3>
   12b48:	800d883a 	mov	r6,r16
   12b4c:	900f883a 	mov	r7,r18
   12b50:	1009883a 	mov	r4,r2
   12b54:	180b883a 	mov	r5,r3
   12b58:	000b8a40 	call	b8a4 <__ledf2>
   12b5c:	10005916 	blt	r2,zero,12cc4 <_dtoa_r+0x1610>
   12b60:	d9800a17 	ldw	r6,40(sp)
   12b64:	d9c00c17 	ldw	r7,48(sp)
   12b68:	0009883a 	mov	r4,zero
   12b6c:	014ff834 	movhi	r5,16352
   12b70:	000c0000 	call	c000 <__subdf3>
   12b74:	800d883a 	mov	r6,r16
   12b78:	900f883a 	mov	r7,r18
   12b7c:	1009883a 	mov	r4,r2
   12b80:	180b883a 	mov	r5,r3
   12b84:	000b7bc0 	call	b7bc <__gedf2>
   12b88:	00bc9f0e 	bge	zero,r2,11e08 <_dtoa_r+0x754>
   12b8c:	a0bfffc7 	ldb	r2,-1(r20)
   12b90:	a011883a 	mov	r8,r20
   12b94:	a53fffc4 	addi	r20,r20,-1
   12b98:	10800c20 	cmpeqi	r2,r2,48
   12b9c:	103ffb1e 	bne	r2,zero,12b8c <_dtoa_r+0x14d8>
   12ba0:	d8801017 	ldw	r2,64(sp)
   12ba4:	10800044 	addi	r2,r2,1
   12ba8:	d8800215 	stw	r2,8(sp)
   12bac:	003daa06 	br	12258 <_dtoa_r+0xba4>
   12bb0:	d8c01117 	ldw	r3,68(sp)
   12bb4:	d9000417 	ldw	r4,16(sp)
   12bb8:	00800d84 	movi	r2,54
   12bbc:	10c5c83a 	sub	r2,r2,r3
   12bc0:	b0ad883a 	add	r22,r22,r2
   12bc4:	2085883a 	add	r2,r4,r2
   12bc8:	dd000717 	ldw	r20,28(sp)
   12bcc:	2025883a 	mov	r18,r4
   12bd0:	d8800415 	stw	r2,16(sp)
   12bd4:	003d1106 	br	1201c <_dtoa_r+0x968>
   12bd8:	d9000117 	ldw	r4,4(sp)
   12bdc:	003c4e06 	br	11d18 <_dtoa_r+0x664>
   12be0:	dcc00a15 	stw	r19,40(sp)
   12be4:	8825883a 	mov	r18,r17
   12be8:	04000084 	movi	r16,2
   12bec:	003bb206 	br	11ab8 <_dtoa_r+0x404>
   12bf0:	d8800317 	ldw	r2,12(sp)
   12bf4:	103ee826 	beq	r2,zero,12798 <_dtoa_r+0x10e4>
   12bf8:	d8800b17 	ldw	r2,44(sp)
   12bfc:	00bc820e 	bge	zero,r2,11e08 <_dtoa_r+0x754>
   12c00:	900b883a 	mov	r5,r18
   12c04:	a009883a 	mov	r4,r20
   12c08:	000d883a 	mov	r6,zero
   12c0c:	01d00934 	movhi	r7,16420
   12c10:	000b98c0 	call	b98c <__muldf3>
   12c14:	81000044 	addi	r4,r16,1
   12c18:	1029883a 	mov	r20,r2
   12c1c:	1825883a 	mov	r18,r3
   12c20:	d8800a15 	stw	r2,40(sp)
   12c24:	000c9e00 	call	c9e0 <__floatsidf>
   12c28:	a00d883a 	mov	r6,r20
   12c2c:	900f883a 	mov	r7,r18
   12c30:	1009883a 	mov	r4,r2
   12c34:	180b883a 	mov	r5,r3
   12c38:	000b98c0 	call	b98c <__muldf3>
   12c3c:	1009883a 	mov	r4,r2
   12c40:	000d883a 	mov	r6,zero
   12c44:	01d00734 	movhi	r7,16412
   12c48:	180b883a 	mov	r5,r3
   12c4c:	000a5fc0 	call	a5fc <__adddf3>
   12c50:	d9000617 	ldw	r4,24(sp)
   12c54:	1029883a 	mov	r20,r2
   12c58:	00bf3034 	movhi	r2,64704
   12c5c:	1887883a 	add	r3,r3,r2
   12c60:	d8800b17 	ldw	r2,44(sp)
   12c64:	213fffc4 	addi	r4,r4,-1
   12c68:	d9001015 	stw	r4,64(sp)
   12c6c:	d8c00c15 	stw	r3,48(sp)
   12c70:	d8800d15 	stw	r2,52(sp)
   12c74:	003baf06 	br	11b34 <_dtoa_r+0x480>
   12c78:	00c00c44 	movi	r3,49
   12c7c:	9cc00044 	addi	r19,r19,1
   12c80:	003c2e06 	br	11d3c <_dtoa_r+0x688>
   12c84:	b0800044 	addi	r2,r22,1
   12c88:	d8800315 	stw	r2,12(sp)
   12c8c:	00800e44 	movi	r2,57
   12c90:	b0800005 	stb	r2,0(r22)
   12c94:	d8800617 	ldw	r2,24(sp)
   12c98:	8023883a 	mov	r17,r16
   12c9c:	da000317 	ldw	r8,12(sp)
   12ca0:	10800044 	addi	r2,r2,1
   12ca4:	d9400117 	ldw	r5,4(sp)
   12ca8:	d8800215 	stw	r2,8(sp)
   12cac:	9021883a 	mov	r16,r18
   12cb0:	01000e44 	movi	r4,57
   12cb4:	003d4f06 	br	121f4 <_dtoa_r+0xb40>
   12cb8:	0029883a 	mov	r20,zero
   12cbc:	0021883a 	mov	r16,zero
   12cc0:	003e7806 	br	126a4 <_dtoa_r+0xff0>
   12cc4:	d8801017 	ldw	r2,64(sp)
   12cc8:	d9000117 	ldw	r4,4(sp)
   12ccc:	14c00044 	addi	r19,r2,1
   12cd0:	003c1106 	br	11d18 <_dtoa_r+0x664>
   12cd4:	103f1f1e 	bne	r2,zero,12954 <_dtoa_r+0x12a0>
   12cd8:	9880004c 	andi	r2,r19,1
   12cdc:	103f1a1e 	bne	r2,zero,12948 <_dtoa_r+0x1294>
   12ce0:	003f1c06 	br	12954 <_dtoa_r+0x12a0>
   12ce4:	d8801017 	ldw	r2,64(sp)
   12ce8:	ddc00c17 	ldw	r23,48(sp)
   12cec:	a811883a 	mov	r8,r21
   12cf0:	10800044 	addi	r2,r2,1
   12cf4:	d8800215 	stw	r2,8(sp)
   12cf8:	003d5706 	br	12258 <_dtoa_r+0xba4>
   12cfc:	98800e60 	cmpeqi	r2,r19,57
   12d00:	103fe01e 	bne	r2,zero,12c84 <_dtoa_r+0x15d0>
   12d04:	0440010e 	bge	zero,r17,12d0c <_dtoa_r+0x1658>
   12d08:	acc00c44 	addi	r19,r21,49
   12d0c:	8023883a 	mov	r17,r16
   12d10:	b2000044 	addi	r8,r22,1
   12d14:	003f1006 	br	12958 <_dtoa_r+0x12a4>
   12d18:	d8800217 	ldw	r2,8(sp)
   12d1c:	108000c8 	cmpgei	r2,r2,3
   12d20:	103e511e 	bne	r2,zero,12668 <_dtoa_r+0xfb4>
   12d24:	dd400615 	stw	r21,24(sp)
   12d28:	003e1406 	br	1257c <_dtoa_r+0xec8>
   12d2c:	4029883a 	mov	r20,r8
   12d30:	003f8006 	br	12b34 <_dtoa_r+0x1480>
   12d34:	d8800217 	ldw	r2,8(sp)
   12d38:	108000c8 	cmpgei	r2,r2,3
   12d3c:	103e4a1e 	bne	r2,zero,12668 <_dtoa_r+0xfb4>
   12d40:	d8800b17 	ldw	r2,44(sp)
   12d44:	dd400615 	stw	r21,24(sp)
   12d48:	d8800315 	stw	r2,12(sp)
   12d4c:	04bdb60e 	bge	zero,r18,12428 <_dtoa_r+0xd74>
   12d50:	003e6506 	br	126e8 <_dtoa_r+0x1034>
   12d54:	04000084 	movi	r16,2
   12d58:	003b5706 	br	11ab8 <_dtoa_r+0x404>
   12d5c:	01c000b4 	movhi	r7,2
   12d60:	010000b4 	movhi	r4,2
   12d64:	39c65104 	addi	r7,r7,6468
   12d68:	000d883a 	mov	r6,zero
   12d6c:	01406a84 	movi	r5,426
   12d70:	21065604 	addi	r4,r4,6488
   12d74:	00183400 	call	18340 <__assert_func>
   12d78:	000b883a 	mov	r5,zero
   12d7c:	003b1006 	br	119c0 <_dtoa_r+0x30c>
   12d80:	e0001115 	stw	zero,68(fp)
   12d84:	000b883a 	mov	r5,zero
   12d88:	e009883a 	mov	r4,fp
   12d8c:	00151a00 	call	151a0 <_Balloc>
   12d90:	d8800115 	stw	r2,4(sp)
   12d94:	103ff126 	beq	r2,zero,12d5c <_dtoa_r+0x16a8>
   12d98:	d8800117 	ldw	r2,4(sp)
   12d9c:	d8001d15 	stw	zero,116(sp)
   12da0:	e0801015 	stw	r2,64(fp)
   12da4:	00bfffc4 	movi	r2,-1
   12da8:	d8800315 	stw	r2,12(sp)
   12dac:	d8800b15 	stw	r2,44(sp)
   12db0:	00800044 	movi	r2,1
   12db4:	d8800515 	stw	r2,20(sp)
   12db8:	003c1306 	br	11e08 <_dtoa_r+0x754>
   12dbc:	01c000b4 	movhi	r7,2
   12dc0:	010000b4 	movhi	r4,2
   12dc4:	39c65104 	addi	r7,r7,6468
   12dc8:	000d883a 	mov	r6,zero
   12dcc:	0140ba84 	movi	r5,746
   12dd0:	21065604 	addi	r4,r4,6488
   12dd4:	00183400 	call	18340 <__assert_func>
   12dd8:	008000b4 	movhi	r2,2
   12ddc:	10864e04 	addi	r2,r2,6456
   12de0:	d8800115 	stw	r2,4(sp)
   12de4:	003a6506 	br	1177c <_dtoa_r+0xc8>
   12de8:	18c00120 	cmpeqi	r3,r3,4
   12dec:	183cc81e 	bne	r3,zero,12110 <_dtoa_r+0xa5c>
   12df0:	00c00f04 	movi	r3,60
   12df4:	1885c83a 	sub	r2,r3,r2
   12df8:	003cc006 	br	120fc <_dtoa_r+0xa48>

00012dfc <__sflush_r>:
   12dfc:	2880030b 	ldhu	r2,12(r5)
   12e00:	defffb04 	addi	sp,sp,-20
   12e04:	dcc00315 	stw	r19,12(sp)
   12e08:	dc000015 	stw	r16,0(sp)
   12e0c:	dfc00415 	stw	ra,16(sp)
   12e10:	dc800215 	stw	r18,8(sp)
   12e14:	dc400115 	stw	r17,4(sp)
   12e18:	10c0020c 	andi	r3,r2,8
   12e1c:	2821883a 	mov	r16,r5
   12e20:	2027883a 	mov	r19,r4
   12e24:	18003f1e 	bne	r3,zero,12f24 <__sflush_r+0x128>
   12e28:	28c00117 	ldw	r3,4(r5)
   12e2c:	10820014 	ori	r2,r2,2048
   12e30:	2880030d 	sth	r2,12(r5)
   12e34:	00c0550e 	bge	zero,r3,12f8c <__sflush_r+0x190>
   12e38:	82000a17 	ldw	r8,40(r16)
   12e3c:	40003126 	beq	r8,zero,12f04 <__sflush_r+0x108>
   12e40:	9c400017 	ldw	r17,0(r19)
   12e44:	1104000c 	andi	r4,r2,4096
   12e48:	98000015 	stw	zero,0(r19)
   12e4c:	1007883a 	mov	r3,r2
   12e50:	2000531e 	bne	r4,zero,12fa0 <__sflush_r+0x1a4>
   12e54:	81400717 	ldw	r5,28(r16)
   12e58:	01c00044 	movi	r7,1
   12e5c:	000d883a 	mov	r6,zero
   12e60:	9809883a 	mov	r4,r19
   12e64:	403ee83a 	callr	r8
   12e68:	10ffffd8 	cmpnei	r3,r2,-1
   12e6c:	18005826 	beq	r3,zero,12fd0 <__sflush_r+0x1d4>
   12e70:	80c0030b 	ldhu	r3,12(r16)
   12e74:	82000a17 	ldw	r8,40(r16)
   12e78:	18c0010c 	andi	r3,r3,4
   12e7c:	18000626 	beq	r3,zero,12e98 <__sflush_r+0x9c>
   12e80:	81000117 	ldw	r4,4(r16)
   12e84:	80c00c17 	ldw	r3,48(r16)
   12e88:	1105c83a 	sub	r2,r2,r4
   12e8c:	18000226 	beq	r3,zero,12e98 <__sflush_r+0x9c>
   12e90:	80c00f17 	ldw	r3,60(r16)
   12e94:	10c5c83a 	sub	r2,r2,r3
   12e98:	81400717 	ldw	r5,28(r16)
   12e9c:	100d883a 	mov	r6,r2
   12ea0:	000f883a 	mov	r7,zero
   12ea4:	9809883a 	mov	r4,r19
   12ea8:	403ee83a 	callr	r8
   12eac:	10ffffd8 	cmpnei	r3,r2,-1
   12eb0:	18003d1e 	bne	r3,zero,12fa8 <__sflush_r+0x1ac>
   12eb4:	99000017 	ldw	r4,0(r19)
   12eb8:	80c0030b 	ldhu	r3,12(r16)
   12ebc:	20004e26 	beq	r4,zero,12ff8 <__sflush_r+0x1fc>
   12ec0:	21400760 	cmpeqi	r5,r4,29
   12ec4:	2800021e 	bne	r5,zero,12ed0 <__sflush_r+0xd4>
   12ec8:	210005a0 	cmpeqi	r4,r4,22
   12ecc:	20002c26 	beq	r4,zero,12f80 <__sflush_r+0x184>
   12ed0:	80800417 	ldw	r2,16(r16)
   12ed4:	18fdffcc 	andi	r3,r3,63487
   12ed8:	80c0030d 	sth	r3,12(r16)
   12edc:	80000115 	stw	zero,4(r16)
   12ee0:	80800015 	stw	r2,0(r16)
   12ee4:	81400c17 	ldw	r5,48(r16)
   12ee8:	9c400015 	stw	r17,0(r19)
   12eec:	28000526 	beq	r5,zero,12f04 <__sflush_r+0x108>
   12ef0:	80801004 	addi	r2,r16,64
   12ef4:	28800226 	beq	r5,r2,12f00 <__sflush_r+0x104>
   12ef8:	9809883a 	mov	r4,r19
   12efc:	00135c00 	call	135c0 <_free_r>
   12f00:	80000c15 	stw	zero,48(r16)
   12f04:	0005883a 	mov	r2,zero
   12f08:	dfc00417 	ldw	ra,16(sp)
   12f0c:	dcc00317 	ldw	r19,12(sp)
   12f10:	dc800217 	ldw	r18,8(sp)
   12f14:	dc400117 	ldw	r17,4(sp)
   12f18:	dc000017 	ldw	r16,0(sp)
   12f1c:	dec00504 	addi	sp,sp,20
   12f20:	f800283a 	ret
   12f24:	2c800417 	ldw	r18,16(r5)
   12f28:	903ff626 	beq	r18,zero,12f04 <__sflush_r+0x108>
   12f2c:	2c400017 	ldw	r17,0(r5)
   12f30:	108000cc 	andi	r2,r2,3
   12f34:	2c800015 	stw	r18,0(r5)
   12f38:	8ca3c83a 	sub	r17,r17,r18
   12f3c:	1000161e 	bne	r2,zero,12f98 <__sflush_r+0x19c>
   12f40:	28800517 	ldw	r2,20(r5)
   12f44:	80800215 	stw	r2,8(r16)
   12f48:	04400316 	blt	zero,r17,12f58 <__sflush_r+0x15c>
   12f4c:	003fed06 	br	12f04 <__sflush_r+0x108>
   12f50:	90a5883a 	add	r18,r18,r2
   12f54:	047feb0e 	bge	zero,r17,12f04 <__sflush_r+0x108>
   12f58:	80800917 	ldw	r2,36(r16)
   12f5c:	81400717 	ldw	r5,28(r16)
   12f60:	880f883a 	mov	r7,r17
   12f64:	900d883a 	mov	r6,r18
   12f68:	9809883a 	mov	r4,r19
   12f6c:	103ee83a 	callr	r2
   12f70:	88a3c83a 	sub	r17,r17,r2
   12f74:	00bff616 	blt	zero,r2,12f50 <__sflush_r+0x154>
   12f78:	80c0030b 	ldhu	r3,12(r16)
   12f7c:	00bfffc4 	movi	r2,-1
   12f80:	18c01014 	ori	r3,r3,64
   12f84:	80c0030d 	sth	r3,12(r16)
   12f88:	003fdf06 	br	12f08 <__sflush_r+0x10c>
   12f8c:	28c00f17 	ldw	r3,60(r5)
   12f90:	00ffa916 	blt	zero,r3,12e38 <__sflush_r+0x3c>
   12f94:	003fdb06 	br	12f04 <__sflush_r+0x108>
   12f98:	0005883a 	mov	r2,zero
   12f9c:	003fe906 	br	12f44 <__sflush_r+0x148>
   12fa0:	80801417 	ldw	r2,80(r16)
   12fa4:	003fb406 	br	12e78 <__sflush_r+0x7c>
   12fa8:	80c0030b 	ldhu	r3,12(r16)
   12fac:	81000417 	ldw	r4,16(r16)
   12fb0:	80000115 	stw	zero,4(r16)
   12fb4:	197dffcc 	andi	r5,r3,63487
   12fb8:	8140030d 	sth	r5,12(r16)
   12fbc:	81000015 	stw	r4,0(r16)
   12fc0:	18c4000c 	andi	r3,r3,4096
   12fc4:	183fc726 	beq	r3,zero,12ee4 <__sflush_r+0xe8>
   12fc8:	80801415 	stw	r2,80(r16)
   12fcc:	003fc506 	br	12ee4 <__sflush_r+0xe8>
   12fd0:	98c00017 	ldw	r3,0(r19)
   12fd4:	183fa626 	beq	r3,zero,12e70 <__sflush_r+0x74>
   12fd8:	19000760 	cmpeqi	r4,r3,29
   12fdc:	20000e1e 	bne	r4,zero,13018 <__sflush_r+0x21c>
   12fe0:	18c00598 	cmpnei	r3,r3,22
   12fe4:	18000c26 	beq	r3,zero,13018 <__sflush_r+0x21c>
   12fe8:	80c0030b 	ldhu	r3,12(r16)
   12fec:	18c01014 	ori	r3,r3,64
   12ff0:	80c0030d 	sth	r3,12(r16)
   12ff4:	003fc406 	br	12f08 <__sflush_r+0x10c>
   12ff8:	81000417 	ldw	r4,16(r16)
   12ffc:	197dffcc 	andi	r5,r3,63487
   13000:	8140030d 	sth	r5,12(r16)
   13004:	80000115 	stw	zero,4(r16)
   13008:	81000015 	stw	r4,0(r16)
   1300c:	18c4000c 	andi	r3,r3,4096
   13010:	183fb426 	beq	r3,zero,12ee4 <__sflush_r+0xe8>
   13014:	003fec06 	br	12fc8 <__sflush_r+0x1cc>
   13018:	9c400015 	stw	r17,0(r19)
   1301c:	0005883a 	mov	r2,zero
   13020:	003fb906 	br	12f08 <__sflush_r+0x10c>

00013024 <_fflush_r>:
   13024:	defffd04 	addi	sp,sp,-12
   13028:	dc000115 	stw	r16,4(sp)
   1302c:	dfc00215 	stw	ra,8(sp)
   13030:	2021883a 	mov	r16,r4
   13034:	20000226 	beq	r4,zero,13040 <_fflush_r+0x1c>
   13038:	20800e17 	ldw	r2,56(r4)
   1303c:	10000726 	beq	r2,zero,1305c <_fflush_r+0x38>
   13040:	2880030f 	ldh	r2,12(r5)
   13044:	10000a1e 	bne	r2,zero,13070 <_fflush_r+0x4c>
   13048:	0005883a 	mov	r2,zero
   1304c:	dfc00217 	ldw	ra,8(sp)
   13050:	dc000117 	ldw	r16,4(sp)
   13054:	dec00304 	addi	sp,sp,12
   13058:	f800283a 	ret
   1305c:	d9400015 	stw	r5,0(sp)
   13060:	001345c0 	call	1345c <__sinit>
   13064:	d9400017 	ldw	r5,0(sp)
   13068:	2880030f 	ldh	r2,12(r5)
   1306c:	103ff626 	beq	r2,zero,13048 <_fflush_r+0x24>
   13070:	8009883a 	mov	r4,r16
   13074:	dfc00217 	ldw	ra,8(sp)
   13078:	dc000117 	ldw	r16,4(sp)
   1307c:	dec00304 	addi	sp,sp,12
   13080:	0012dfc1 	jmpi	12dfc <__sflush_r>

00013084 <fflush>:
   13084:	20001726 	beq	r4,zero,130e4 <fflush+0x60>
   13088:	008000b4 	movhi	r2,2
   1308c:	200b883a 	mov	r5,r4
   13090:	110f1717 	ldw	r4,15452(r2)
   13094:	20000226 	beq	r4,zero,130a0 <fflush+0x1c>
   13098:	20800e17 	ldw	r2,56(r4)
   1309c:	10000526 	beq	r2,zero,130b4 <fflush+0x30>
   130a0:	2880030f 	ldh	r2,12(r5)
   130a4:	1000021e 	bne	r2,zero,130b0 <fflush+0x2c>
   130a8:	0005883a 	mov	r2,zero
   130ac:	f800283a 	ret
   130b0:	0012dfc1 	jmpi	12dfc <__sflush_r>
   130b4:	defffd04 	addi	sp,sp,-12
   130b8:	d9400115 	stw	r5,4(sp)
   130bc:	d9000015 	stw	r4,0(sp)
   130c0:	dfc00215 	stw	ra,8(sp)
   130c4:	001345c0 	call	1345c <__sinit>
   130c8:	d9400117 	ldw	r5,4(sp)
   130cc:	d9000017 	ldw	r4,0(sp)
   130d0:	2880030f 	ldh	r2,12(r5)
   130d4:	10000826 	beq	r2,zero,130f8 <fflush+0x74>
   130d8:	dfc00217 	ldw	ra,8(sp)
   130dc:	dec00304 	addi	sp,sp,12
   130e0:	0012dfc1 	jmpi	12dfc <__sflush_r>
   130e4:	008000b4 	movhi	r2,2
   130e8:	110f1617 	ldw	r4,15448(r2)
   130ec:	01400074 	movhi	r5,1
   130f0:	294c0904 	addi	r5,r5,12324
   130f4:	0013dd81 	jmpi	13dd8 <_fwalk_reent>
   130f8:	0005883a 	mov	r2,zero
   130fc:	dfc00217 	ldw	ra,8(sp)
   13100:	dec00304 	addi	sp,sp,12
   13104:	f800283a 	ret

00013108 <__fp_lock>:
   13108:	0005883a 	mov	r2,zero
   1310c:	f800283a 	ret

00013110 <_cleanup_r>:
   13110:	014000b4 	movhi	r5,2
   13114:	29615504 	addi	r5,r5,-31404
   13118:	0013dd81 	jmpi	13dd8 <_fwalk_reent>

0001311c <__fp_unlock>:
   1311c:	0005883a 	mov	r2,zero
   13120:	f800283a 	ret

00013124 <__sinit.part.0>:
   13124:	00c00074 	movhi	r3,1
   13128:	20800117 	ldw	r2,4(r4)
   1312c:	18cc4404 	addi	r3,r3,12560
   13130:	20c00f15 	stw	r3,60(r4)
   13134:	2140bb04 	addi	r5,r4,748
   13138:	00c000c4 	movi	r3,3
   1313c:	20c0b915 	stw	r3,740(r4)
   13140:	2140ba15 	stw	r5,744(r4)
   13144:	2000b815 	stw	zero,736(r4)
   13148:	10001705 	stb	zero,92(r2)
   1314c:	10001745 	stb	zero,93(r2)
   13150:	10001785 	stb	zero,94(r2)
   13154:	100017c5 	stb	zero,95(r2)
   13158:	10001805 	stb	zero,96(r2)
   1315c:	10001845 	stb	zero,97(r2)
   13160:	10001885 	stb	zero,98(r2)
   13164:	100018c5 	stb	zero,99(r2)
   13168:	00c00104 	movi	r3,4
   1316c:	10c00315 	stw	r3,12(r2)
   13170:	02000074 	movhi	r8,1
   13174:	20c00217 	ldw	r3,8(r4)
   13178:	01c00074 	movhi	r7,1
   1317c:	01800074 	movhi	r6,1
   13180:	01400074 	movhi	r5,1
   13184:	421a7a04 	addi	r8,r8,27112
   13188:	39da9104 	addi	r7,r7,27204
   1318c:	319ab104 	addi	r6,r6,27332
   13190:	295ac804 	addi	r5,r5,27424
   13194:	02400074 	movhi	r9,1
   13198:	10001915 	stw	zero,100(r2)
   1319c:	10000015 	stw	zero,0(r2)
   131a0:	10000115 	stw	zero,4(r2)
   131a4:	10000215 	stw	zero,8(r2)
   131a8:	10000415 	stw	zero,16(r2)
   131ac:	10000515 	stw	zero,20(r2)
   131b0:	10000615 	stw	zero,24(r2)
   131b4:	10800715 	stw	r2,28(r2)
   131b8:	12000815 	stw	r8,32(r2)
   131bc:	11c00915 	stw	r7,36(r2)
   131c0:	11800a15 	stw	r6,40(r2)
   131c4:	11400b15 	stw	r5,44(r2)
   131c8:	4a400284 	addi	r9,r9,10
   131cc:	1a400315 	stw	r9,12(r3)
   131d0:	18001915 	stw	zero,100(r3)
   131d4:	18000015 	stw	zero,0(r3)
   131d8:	18000115 	stw	zero,4(r3)
   131dc:	18000215 	stw	zero,8(r3)
   131e0:	18000415 	stw	zero,16(r3)
   131e4:	18001705 	stb	zero,92(r3)
   131e8:	18001745 	stb	zero,93(r3)
   131ec:	18001785 	stb	zero,94(r3)
   131f0:	180017c5 	stb	zero,95(r3)
   131f4:	18001805 	stb	zero,96(r3)
   131f8:	18001845 	stb	zero,97(r3)
   131fc:	18001885 	stb	zero,98(r3)
   13200:	180018c5 	stb	zero,99(r3)
   13204:	20800317 	ldw	r2,12(r4)
   13208:	024000b4 	movhi	r9,2
   1320c:	18000515 	stw	zero,20(r3)
   13210:	18000615 	stw	zero,24(r3)
   13214:	18c00715 	stw	r3,28(r3)
   13218:	1a000815 	stw	r8,32(r3)
   1321c:	19c00915 	stw	r7,36(r3)
   13220:	19800a15 	stw	r6,40(r3)
   13224:	19400b15 	stw	r5,44(r3)
   13228:	4a400484 	addi	r9,r9,18
   1322c:	10001915 	stw	zero,100(r2)
   13230:	10000015 	stw	zero,0(r2)
   13234:	10000115 	stw	zero,4(r2)
   13238:	10000215 	stw	zero,8(r2)
   1323c:	12400315 	stw	r9,12(r2)
   13240:	10000415 	stw	zero,16(r2)
   13244:	10000515 	stw	zero,20(r2)
   13248:	10000615 	stw	zero,24(r2)
   1324c:	10001705 	stb	zero,92(r2)
   13250:	10001745 	stb	zero,93(r2)
   13254:	10001785 	stb	zero,94(r2)
   13258:	100017c5 	stb	zero,95(r2)
   1325c:	10001805 	stb	zero,96(r2)
   13260:	10001845 	stb	zero,97(r2)
   13264:	10001885 	stb	zero,98(r2)
   13268:	100018c5 	stb	zero,99(r2)
   1326c:	10800715 	stw	r2,28(r2)
   13270:	12000815 	stw	r8,32(r2)
   13274:	11c00915 	stw	r7,36(r2)
   13278:	11800a15 	stw	r6,40(r2)
   1327c:	11400b15 	stw	r5,44(r2)
   13280:	00800044 	movi	r2,1
   13284:	20800e15 	stw	r2,56(r4)
   13288:	f800283a 	ret

0001328c <__sfmoreglue>:
   1328c:	defffc04 	addi	sp,sp,-16
   13290:	dc400115 	stw	r17,4(sp)
   13294:	2c7fffc4 	addi	r17,r5,-1
   13298:	8c401a24 	muli	r17,r17,104
   1329c:	dc800215 	stw	r18,8(sp)
   132a0:	2825883a 	mov	r18,r5
   132a4:	89401d04 	addi	r5,r17,116
   132a8:	dc000015 	stw	r16,0(sp)
   132ac:	dfc00315 	stw	ra,12(sp)
   132b0:	000ce140 	call	ce14 <_malloc_r>
   132b4:	1021883a 	mov	r16,r2
   132b8:	10000726 	beq	r2,zero,132d8 <__sfmoreglue+0x4c>
   132bc:	11000304 	addi	r4,r2,12
   132c0:	10000015 	stw	zero,0(r2)
   132c4:	14800115 	stw	r18,4(r2)
   132c8:	11000215 	stw	r4,8(r2)
   132cc:	89801a04 	addi	r6,r17,104
   132d0:	000b883a 	mov	r5,zero
   132d4:	00150b00 	call	150b0 <memset>
   132d8:	8005883a 	mov	r2,r16
   132dc:	dfc00317 	ldw	ra,12(sp)
   132e0:	dc800217 	ldw	r18,8(sp)
   132e4:	dc400117 	ldw	r17,4(sp)
   132e8:	dc000017 	ldw	r16,0(sp)
   132ec:	dec00404 	addi	sp,sp,16
   132f0:	f800283a 	ret

000132f4 <__sfp>:
   132f4:	defffb04 	addi	sp,sp,-20
   132f8:	008000b4 	movhi	r2,2
   132fc:	dc000015 	stw	r16,0(sp)
   13300:	140f1617 	ldw	r16,15448(r2)
   13304:	dc400115 	stw	r17,4(sp)
   13308:	dfc00415 	stw	ra,16(sp)
   1330c:	80800e17 	ldw	r2,56(r16)
   13310:	dcc00315 	stw	r19,12(sp)
   13314:	dc800215 	stw	r18,8(sp)
   13318:	2023883a 	mov	r17,r4
   1331c:	10003126 	beq	r2,zero,133e4 <__sfp+0xf0>
   13320:	8100ba17 	ldw	r4,744(r16)
   13324:	8140b917 	ldw	r5,740(r16)
   13328:	04c00104 	movi	r19,4
   1332c:	8400b804 	addi	r16,r16,736
   13330:	297fffc4 	addi	r5,r5,-1
   13334:	2800050e 	bge	r5,zero,1334c <__sfp+0x58>
   13338:	00002406 	br	133cc <__sfp+0xd8>
   1333c:	297fffc4 	addi	r5,r5,-1
   13340:	28bfffd8 	cmpnei	r2,r5,-1
   13344:	21001a04 	addi	r4,r4,104
   13348:	10002026 	beq	r2,zero,133cc <__sfp+0xd8>
   1334c:	2080030f 	ldh	r2,12(r4)
   13350:	103ffa1e 	bne	r2,zero,1333c <__sfp+0x48>
   13354:	00bffff4 	movhi	r2,65535
   13358:	10800044 	addi	r2,r2,1
   1335c:	20001915 	stw	zero,100(r4)
   13360:	20000015 	stw	zero,0(r4)
   13364:	20000115 	stw	zero,4(r4)
   13368:	20000215 	stw	zero,8(r4)
   1336c:	20800315 	stw	r2,12(r4)
   13370:	20000415 	stw	zero,16(r4)
   13374:	20000515 	stw	zero,20(r4)
   13378:	20000615 	stw	zero,24(r4)
   1337c:	20001705 	stb	zero,92(r4)
   13380:	20001745 	stb	zero,93(r4)
   13384:	20001785 	stb	zero,94(r4)
   13388:	200017c5 	stb	zero,95(r4)
   1338c:	20001805 	stb	zero,96(r4)
   13390:	20001845 	stb	zero,97(r4)
   13394:	20001885 	stb	zero,98(r4)
   13398:	200018c5 	stb	zero,99(r4)
   1339c:	20000c15 	stw	zero,48(r4)
   133a0:	20000d15 	stw	zero,52(r4)
   133a4:	20001115 	stw	zero,68(r4)
   133a8:	20001215 	stw	zero,72(r4)
   133ac:	2005883a 	mov	r2,r4
   133b0:	dfc00417 	ldw	ra,16(sp)
   133b4:	dcc00317 	ldw	r19,12(sp)
   133b8:	dc800217 	ldw	r18,8(sp)
   133bc:	dc400117 	ldw	r17,4(sp)
   133c0:	dc000017 	ldw	r16,0(sp)
   133c4:	dec00504 	addi	sp,sp,20
   133c8:	f800283a 	ret
   133cc:	80800017 	ldw	r2,0(r16)
   133d0:	10000726 	beq	r2,zero,133f0 <__sfp+0xfc>
   133d4:	11000217 	ldw	r4,8(r2)
   133d8:	11400117 	ldw	r5,4(r2)
   133dc:	1021883a 	mov	r16,r2
   133e0:	003fd306 	br	13330 <__sfp+0x3c>
   133e4:	8009883a 	mov	r4,r16
   133e8:	00131240 	call	13124 <__sinit.part.0>
   133ec:	003fcc06 	br	13320 <__sfp+0x2c>
   133f0:	01406b04 	movi	r5,428
   133f4:	8809883a 	mov	r4,r17
   133f8:	000ce140 	call	ce14 <_malloc_r>
   133fc:	1025883a 	mov	r18,r2
   13400:	10000c26 	beq	r2,zero,13434 <__sfp+0x140>
   13404:	11000304 	addi	r4,r2,12
   13408:	11000215 	stw	r4,8(r2)
   1340c:	000b883a 	mov	r5,zero
   13410:	10000015 	stw	zero,0(r2)
   13414:	14c00115 	stw	r19,4(r2)
   13418:	01806804 	movi	r6,416
   1341c:	00150b00 	call	150b0 <memset>
   13420:	1009883a 	mov	r4,r2
   13424:	84800015 	stw	r18,0(r16)
   13428:	014000c4 	movi	r5,3
   1342c:	9021883a 	mov	r16,r18
   13430:	003fc606 	br	1334c <__sfp+0x58>
   13434:	80000015 	stw	zero,0(r16)
   13438:	00800304 	movi	r2,12
   1343c:	88800015 	stw	r2,0(r17)
   13440:	0009883a 	mov	r4,zero
   13444:	003fd906 	br	133ac <__sfp+0xb8>

00013448 <_cleanup>:
   13448:	008000b4 	movhi	r2,2
   1344c:	110f1617 	ldw	r4,15448(r2)
   13450:	014000b4 	movhi	r5,2
   13454:	29615504 	addi	r5,r5,-31404
   13458:	0013dd81 	jmpi	13dd8 <_fwalk_reent>

0001345c <__sinit>:
   1345c:	20800e17 	ldw	r2,56(r4)
   13460:	10000126 	beq	r2,zero,13468 <__sinit+0xc>
   13464:	f800283a 	ret
   13468:	00131241 	jmpi	13124 <__sinit.part.0>

0001346c <__sfp_lock_acquire>:
   1346c:	f800283a 	ret

00013470 <__sfp_lock_release>:
   13470:	f800283a 	ret

00013474 <__sinit_lock_acquire>:
   13474:	f800283a 	ret

00013478 <__sinit_lock_release>:
   13478:	f800283a 	ret

0001347c <__fp_lock_all>:
   1347c:	008000b4 	movhi	r2,2
   13480:	110f1717 	ldw	r4,15452(r2)
   13484:	01400074 	movhi	r5,1
   13488:	294c4204 	addi	r5,r5,12552
   1348c:	0013d401 	jmpi	13d40 <_fwalk>

00013490 <__fp_unlock_all>:
   13490:	008000b4 	movhi	r2,2
   13494:	110f1717 	ldw	r4,15452(r2)
   13498:	01400074 	movhi	r5,1
   1349c:	294c4704 	addi	r5,r5,12572
   134a0:	0013d401 	jmpi	13d40 <_fwalk>

000134a4 <_malloc_trim_r>:
   134a4:	defffb04 	addi	sp,sp,-20
   134a8:	dcc00315 	stw	r19,12(sp)
   134ac:	04c000b4 	movhi	r19,2
   134b0:	dc800215 	stw	r18,8(sp)
   134b4:	dc400115 	stw	r17,4(sp)
   134b8:	dc000015 	stw	r16,0(sp)
   134bc:	dfc00415 	stw	ra,16(sp)
   134c0:	2821883a 	mov	r16,r5
   134c4:	9cc8fe04 	addi	r19,r19,9208
   134c8:	2025883a 	mov	r18,r4
   134cc:	001a5540 	call	1a554 <__malloc_lock>
   134d0:	98800217 	ldw	r2,8(r19)
   134d4:	14400117 	ldw	r17,4(r2)
   134d8:	00bfff04 	movi	r2,-4
   134dc:	88a2703a 	and	r17,r17,r2
   134e0:	8c21c83a 	sub	r16,r17,r16
   134e4:	8403fbc4 	addi	r16,r16,4079
   134e8:	8020d33a 	srli	r16,r16,12
   134ec:	843fffc4 	addi	r16,r16,-1
   134f0:	8020933a 	slli	r16,r16,12
   134f4:	80840008 	cmpgei	r2,r16,4096
   134f8:	10000626 	beq	r2,zero,13514 <_malloc_trim_r+0x70>
   134fc:	000b883a 	mov	r5,zero
   13500:	9009883a 	mov	r4,r18
   13504:	000d8580 	call	d858 <_sbrk_r>
   13508:	98c00217 	ldw	r3,8(r19)
   1350c:	1c47883a 	add	r3,r3,r17
   13510:	10c00a26 	beq	r2,r3,1353c <_malloc_trim_r+0x98>
   13514:	9009883a 	mov	r4,r18
   13518:	001a5780 	call	1a578 <__malloc_unlock>
   1351c:	0005883a 	mov	r2,zero
   13520:	dfc00417 	ldw	ra,16(sp)
   13524:	dcc00317 	ldw	r19,12(sp)
   13528:	dc800217 	ldw	r18,8(sp)
   1352c:	dc400117 	ldw	r17,4(sp)
   13530:	dc000017 	ldw	r16,0(sp)
   13534:	dec00504 	addi	sp,sp,20
   13538:	f800283a 	ret
   1353c:	040bc83a 	sub	r5,zero,r16
   13540:	9009883a 	mov	r4,r18
   13544:	000d8580 	call	d858 <_sbrk_r>
   13548:	10bfffd8 	cmpnei	r2,r2,-1
   1354c:	10000d26 	beq	r2,zero,13584 <_malloc_trim_r+0xe0>
   13550:	008000b4 	movhi	r2,2
   13554:	10967217 	ldw	r2,22984(r2)
   13558:	98c00217 	ldw	r3,8(r19)
   1355c:	8c23c83a 	sub	r17,r17,r16
   13560:	8c400054 	ori	r17,r17,1
   13564:	1421c83a 	sub	r16,r2,r16
   13568:	1c400115 	stw	r17,4(r3)
   1356c:	008000b4 	movhi	r2,2
   13570:	9009883a 	mov	r4,r18
   13574:	14167215 	stw	r16,22984(r2)
   13578:	001a5780 	call	1a578 <__malloc_unlock>
   1357c:	00800044 	movi	r2,1
   13580:	003fe706 	br	13520 <_malloc_trim_r+0x7c>
   13584:	000b883a 	mov	r5,zero
   13588:	9009883a 	mov	r4,r18
   1358c:	000d8580 	call	d858 <_sbrk_r>
   13590:	99000217 	ldw	r4,8(r19)
   13594:	1107c83a 	sub	r3,r2,r4
   13598:	19400410 	cmplti	r5,r3,16
   1359c:	283fdd1e 	bne	r5,zero,13514 <_malloc_trim_r+0x70>
   135a0:	014000b4 	movhi	r5,2
   135a4:	294f1817 	ldw	r5,15456(r5)
   135a8:	18c00054 	ori	r3,r3,1
   135ac:	20c00115 	stw	r3,4(r4)
   135b0:	1145c83a 	sub	r2,r2,r5
   135b4:	014000b4 	movhi	r5,2
   135b8:	28967215 	stw	r2,22984(r5)
   135bc:	003fd506 	br	13514 <_malloc_trim_r+0x70>

000135c0 <_free_r>:
   135c0:	28004f26 	beq	r5,zero,13700 <_free_r+0x140>
   135c4:	defffd04 	addi	sp,sp,-12
   135c8:	dc400115 	stw	r17,4(sp)
   135cc:	dc000015 	stw	r16,0(sp)
   135d0:	2023883a 	mov	r17,r4
   135d4:	2821883a 	mov	r16,r5
   135d8:	dfc00215 	stw	ra,8(sp)
   135dc:	001a5540 	call	1a554 <__malloc_lock>
   135e0:	81ffff17 	ldw	r7,-4(r16)
   135e4:	00bfff84 	movi	r2,-2
   135e8:	80fffe04 	addi	r3,r16,-8
   135ec:	3884703a 	and	r2,r7,r2
   135f0:	010000b4 	movhi	r4,2
   135f4:	188d883a 	add	r6,r3,r2
   135f8:	2108fe04 	addi	r4,r4,9208
   135fc:	31400117 	ldw	r5,4(r6)
   13600:	22000217 	ldw	r8,8(r4)
   13604:	027fff04 	movi	r9,-4
   13608:	2a4a703a 	and	r5,r5,r9
   1360c:	41806426 	beq	r8,r6,137a0 <_free_r+0x1e0>
   13610:	31400115 	stw	r5,4(r6)
   13614:	39c0004c 	andi	r7,r7,1
   13618:	3151883a 	add	r8,r6,r5
   1361c:	3800281e 	bne	r7,zero,136c0 <_free_r+0x100>
   13620:	82bffe17 	ldw	r10,-8(r16)
   13624:	42000117 	ldw	r8,4(r8)
   13628:	01c000b4 	movhi	r7,2
   1362c:	1a87c83a 	sub	r3,r3,r10
   13630:	1a400217 	ldw	r9,8(r3)
   13634:	39c90004 	addi	r7,r7,9216
   13638:	1285883a 	add	r2,r2,r10
   1363c:	4200004c 	andi	r8,r8,1
   13640:	49c04c26 	beq	r9,r7,13774 <_free_r+0x1b4>
   13644:	1a800317 	ldw	r10,12(r3)
   13648:	4a800315 	stw	r10,12(r9)
   1364c:	52400215 	stw	r9,8(r10)
   13650:	40007126 	beq	r8,zero,13818 <_free_r+0x258>
   13654:	11400054 	ori	r5,r2,1
   13658:	19400115 	stw	r5,4(r3)
   1365c:	30800015 	stw	r2,0(r6)
   13660:	11408028 	cmpgeui	r5,r2,512
   13664:	28002c1e 	bne	r5,zero,13718 <_free_r+0x158>
   13668:	100ad0fa 	srli	r5,r2,3
   1366c:	100cd17a 	srli	r6,r2,5
   13670:	00800044 	movi	r2,1
   13674:	29400044 	addi	r5,r5,1
   13678:	280a90fa 	slli	r5,r5,3
   1367c:	21c00117 	ldw	r7,4(r4)
   13680:	1184983a 	sll	r2,r2,r6
   13684:	214b883a 	add	r5,r4,r5
   13688:	29800017 	ldw	r6,0(r5)
   1368c:	11c4b03a 	or	r2,r2,r7
   13690:	29fffe04 	addi	r7,r5,-8
   13694:	19c00315 	stw	r7,12(r3)
   13698:	19800215 	stw	r6,8(r3)
   1369c:	20800115 	stw	r2,4(r4)
   136a0:	28c00015 	stw	r3,0(r5)
   136a4:	30c00315 	stw	r3,12(r6)
   136a8:	8809883a 	mov	r4,r17
   136ac:	dfc00217 	ldw	ra,8(sp)
   136b0:	dc400117 	ldw	r17,4(sp)
   136b4:	dc000017 	ldw	r16,0(sp)
   136b8:	dec00304 	addi	sp,sp,12
   136bc:	001a5781 	jmpi	1a578 <__malloc_unlock>
   136c0:	41c00117 	ldw	r7,4(r8)
   136c4:	39c0004c 	andi	r7,r7,1
   136c8:	38000e1e 	bne	r7,zero,13704 <_free_r+0x144>
   136cc:	01c000b4 	movhi	r7,2
   136d0:	1145883a 	add	r2,r2,r5
   136d4:	39c90004 	addi	r7,r7,9216
   136d8:	31400217 	ldw	r5,8(r6)
   136dc:	12400054 	ori	r9,r2,1
   136e0:	1891883a 	add	r8,r3,r2
   136e4:	29c05226 	beq	r5,r7,13830 <_free_r+0x270>
   136e8:	31800317 	ldw	r6,12(r6)
   136ec:	29800315 	stw	r6,12(r5)
   136f0:	31400215 	stw	r5,8(r6)
   136f4:	1a400115 	stw	r9,4(r3)
   136f8:	40800015 	stw	r2,0(r8)
   136fc:	003fd806 	br	13660 <_free_r+0xa0>
   13700:	f800283a 	ret
   13704:	11400054 	ori	r5,r2,1
   13708:	817fff15 	stw	r5,-4(r16)
   1370c:	30800015 	stw	r2,0(r6)
   13710:	11408028 	cmpgeui	r5,r2,512
   13714:	283fd426 	beq	r5,zero,13668 <_free_r+0xa8>
   13718:	100ad27a 	srli	r5,r2,9
   1371c:	29800168 	cmpgeui	r6,r5,5
   13720:	3000341e 	bne	r6,zero,137f4 <_free_r+0x234>
   13724:	100ad1ba 	srli	r5,r2,6
   13728:	29800e44 	addi	r6,r5,57
   1372c:	300c90fa 	slli	r6,r6,3
   13730:	29c00e04 	addi	r7,r5,56
   13734:	218d883a 	add	r6,r4,r6
   13738:	31400017 	ldw	r5,0(r6)
   1373c:	31bffe04 	addi	r6,r6,-8
   13740:	31404226 	beq	r6,r5,1384c <_free_r+0x28c>
   13744:	01ffff04 	movi	r7,-4
   13748:	29000117 	ldw	r4,4(r5)
   1374c:	21c8703a 	and	r4,r4,r7
   13750:	1100022e 	bgeu	r2,r4,1375c <_free_r+0x19c>
   13754:	29400217 	ldw	r5,8(r5)
   13758:	317ffb1e 	bne	r6,r5,13748 <_free_r+0x188>
   1375c:	29800317 	ldw	r6,12(r5)
   13760:	19800315 	stw	r6,12(r3)
   13764:	19400215 	stw	r5,8(r3)
   13768:	30c00215 	stw	r3,8(r6)
   1376c:	28c00315 	stw	r3,12(r5)
   13770:	003fcd06 	br	136a8 <_free_r+0xe8>
   13774:	40004d1e 	bne	r8,zero,138ac <_free_r+0x2ec>
   13778:	31000317 	ldw	r4,12(r6)
   1377c:	31800217 	ldw	r6,8(r6)
   13780:	2885883a 	add	r2,r5,r2
   13784:	11400054 	ori	r5,r2,1
   13788:	31000315 	stw	r4,12(r6)
   1378c:	21800215 	stw	r6,8(r4)
   13790:	19400115 	stw	r5,4(r3)
   13794:	1887883a 	add	r3,r3,r2
   13798:	18800015 	stw	r2,0(r3)
   1379c:	003fc206 	br	136a8 <_free_r+0xe8>
   137a0:	39c0004c 	andi	r7,r7,1
   137a4:	1145883a 	add	r2,r2,r5
   137a8:	3800071e 	bne	r7,zero,137c8 <_free_r+0x208>
   137ac:	81fffe17 	ldw	r7,-8(r16)
   137b0:	19c7c83a 	sub	r3,r3,r7
   137b4:	19400317 	ldw	r5,12(r3)
   137b8:	19800217 	ldw	r6,8(r3)
   137bc:	11c5883a 	add	r2,r2,r7
   137c0:	31400315 	stw	r5,12(r6)
   137c4:	29800215 	stw	r6,8(r5)
   137c8:	014000b4 	movhi	r5,2
   137cc:	11800054 	ori	r6,r2,1
   137d0:	294f1917 	ldw	r5,15460(r5)
   137d4:	19800115 	stw	r6,4(r3)
   137d8:	20c00215 	stw	r3,8(r4)
   137dc:	117fb236 	bltu	r2,r5,136a8 <_free_r+0xe8>
   137e0:	008000b4 	movhi	r2,2
   137e4:	11565a17 	ldw	r5,22888(r2)
   137e8:	8809883a 	mov	r4,r17
   137ec:	00134a40 	call	134a4 <_malloc_trim_r>
   137f0:	003fad06 	br	136a8 <_free_r+0xe8>
   137f4:	29800568 	cmpgeui	r6,r5,21
   137f8:	30000926 	beq	r6,zero,13820 <_free_r+0x260>
   137fc:	29801568 	cmpgeui	r6,r5,85
   13800:	3000191e 	bne	r6,zero,13868 <_free_r+0x2a8>
   13804:	100ad33a 	srli	r5,r2,12
   13808:	29801bc4 	addi	r6,r5,111
   1380c:	300c90fa 	slli	r6,r6,3
   13810:	29c01b84 	addi	r7,r5,110
   13814:	003fc706 	br	13734 <_free_r+0x174>
   13818:	1145883a 	add	r2,r2,r5
   1381c:	003fae06 	br	136d8 <_free_r+0x118>
   13820:	29801704 	addi	r6,r5,92
   13824:	300c90fa 	slli	r6,r6,3
   13828:	29c016c4 	addi	r7,r5,91
   1382c:	003fc106 	br	13734 <_free_r+0x174>
   13830:	20c00515 	stw	r3,20(r4)
   13834:	20c00415 	stw	r3,16(r4)
   13838:	19c00315 	stw	r7,12(r3)
   1383c:	19c00215 	stw	r7,8(r3)
   13840:	1a400115 	stw	r9,4(r3)
   13844:	40800015 	stw	r2,0(r8)
   13848:	003f9706 	br	136a8 <_free_r+0xe8>
   1384c:	380fd0ba 	srai	r7,r7,2
   13850:	00800044 	movi	r2,1
   13854:	22000117 	ldw	r8,4(r4)
   13858:	11ce983a 	sll	r7,r2,r7
   1385c:	3a0eb03a 	or	r7,r7,r8
   13860:	21c00115 	stw	r7,4(r4)
   13864:	003fbe06 	br	13760 <_free_r+0x1a0>
   13868:	29805568 	cmpgeui	r6,r5,341
   1386c:	3000051e 	bne	r6,zero,13884 <_free_r+0x2c4>
   13870:	100ad3fa 	srli	r5,r2,15
   13874:	29801e04 	addi	r6,r5,120
   13878:	300c90fa 	slli	r6,r6,3
   1387c:	29c01dc4 	addi	r7,r5,119
   13880:	003fac06 	br	13734 <_free_r+0x174>
   13884:	29415568 	cmpgeui	r5,r5,1365
   13888:	2800051e 	bne	r5,zero,138a0 <_free_r+0x2e0>
   1388c:	100ad4ba 	srli	r5,r2,18
   13890:	29801f44 	addi	r6,r5,125
   13894:	300c90fa 	slli	r6,r6,3
   13898:	29c01f04 	addi	r7,r5,124
   1389c:	003fa506 	br	13734 <_free_r+0x174>
   138a0:	0180fe04 	movi	r6,1016
   138a4:	01c01f84 	movi	r7,126
   138a8:	003fa206 	br	13734 <_free_r+0x174>
   138ac:	11000054 	ori	r4,r2,1
   138b0:	19000115 	stw	r4,4(r3)
   138b4:	30800015 	stw	r2,0(r6)
   138b8:	003f7b06 	br	136a8 <_free_r+0xe8>

000138bc <__sfvwrite_r>:
   138bc:	30800217 	ldw	r2,8(r6)
   138c0:	10009a26 	beq	r2,zero,13b2c <__sfvwrite_r+0x270>
   138c4:	2a00030b 	ldhu	r8,12(r5)
   138c8:	defff404 	addi	sp,sp,-48
   138cc:	dd400715 	stw	r21,28(sp)
   138d0:	dd000615 	stw	r20,24(sp)
   138d4:	dc000215 	stw	r16,8(sp)
   138d8:	dfc00b15 	stw	ra,44(sp)
   138dc:	df000a15 	stw	fp,40(sp)
   138e0:	ddc00915 	stw	r23,36(sp)
   138e4:	dd800815 	stw	r22,32(sp)
   138e8:	dcc00515 	stw	r19,20(sp)
   138ec:	dc800415 	stw	r18,16(sp)
   138f0:	dc400315 	stw	r17,12(sp)
   138f4:	4080020c 	andi	r2,r8,8
   138f8:	3029883a 	mov	r20,r6
   138fc:	202b883a 	mov	r21,r4
   13900:	2821883a 	mov	r16,r5
   13904:	10002626 	beq	r2,zero,139a0 <__sfvwrite_r+0xe4>
   13908:	28800417 	ldw	r2,16(r5)
   1390c:	10002426 	beq	r2,zero,139a0 <__sfvwrite_r+0xe4>
   13910:	4080008c 	andi	r2,r8,2
   13914:	a4400017 	ldw	r17,0(r20)
   13918:	10002926 	beq	r2,zero,139c0 <__sfvwrite_r+0x104>
   1391c:	05a00034 	movhi	r22,32768
   13920:	0027883a 	mov	r19,zero
   13924:	0025883a 	mov	r18,zero
   13928:	b5bf0004 	addi	r22,r22,-1024
   1392c:	980d883a 	mov	r6,r19
   13930:	a809883a 	mov	r4,r21
   13934:	90007026 	beq	r18,zero,13af8 <__sfvwrite_r+0x23c>
   13938:	900f883a 	mov	r7,r18
   1393c:	b480012e 	bgeu	r22,r18,13944 <__sfvwrite_r+0x88>
   13940:	b00f883a 	mov	r7,r22
   13944:	80800917 	ldw	r2,36(r16)
   13948:	81400717 	ldw	r5,28(r16)
   1394c:	103ee83a 	callr	r2
   13950:	0080710e 	bge	zero,r2,13b18 <__sfvwrite_r+0x25c>
   13954:	a0c00217 	ldw	r3,8(r20)
   13958:	98a7883a 	add	r19,r19,r2
   1395c:	90a5c83a 	sub	r18,r18,r2
   13960:	1885c83a 	sub	r2,r3,r2
   13964:	a0800215 	stw	r2,8(r20)
   13968:	103ff01e 	bne	r2,zero,1392c <__sfvwrite_r+0x70>
   1396c:	0005883a 	mov	r2,zero
   13970:	dfc00b17 	ldw	ra,44(sp)
   13974:	df000a17 	ldw	fp,40(sp)
   13978:	ddc00917 	ldw	r23,36(sp)
   1397c:	dd800817 	ldw	r22,32(sp)
   13980:	dd400717 	ldw	r21,28(sp)
   13984:	dd000617 	ldw	r20,24(sp)
   13988:	dcc00517 	ldw	r19,20(sp)
   1398c:	dc800417 	ldw	r18,16(sp)
   13990:	dc400317 	ldw	r17,12(sp)
   13994:	dc000217 	ldw	r16,8(sp)
   13998:	dec00c04 	addi	sp,sp,48
   1399c:	f800283a 	ret
   139a0:	800b883a 	mov	r5,r16
   139a4:	a809883a 	mov	r4,r21
   139a8:	00113540 	call	11354 <__swsetup_r>
   139ac:	1000e21e 	bne	r2,zero,13d38 <__sfvwrite_r+0x47c>
   139b0:	8200030b 	ldhu	r8,12(r16)
   139b4:	a4400017 	ldw	r17,0(r20)
   139b8:	4080008c 	andi	r2,r8,2
   139bc:	103fd71e 	bne	r2,zero,1391c <__sfvwrite_r+0x60>
   139c0:	4080004c 	andi	r2,r8,1
   139c4:	10005b1e 	bne	r2,zero,13b34 <__sfvwrite_r+0x278>
   139c8:	00a00034 	movhi	r2,32768
   139cc:	10bfff84 	addi	r2,r2,-2
   139d0:	00e00034 	movhi	r3,32768
   139d4:	d8800015 	stw	r2,0(sp)
   139d8:	18bfffc4 	addi	r2,r3,-1
   139dc:	0039883a 	mov	fp,zero
   139e0:	0025883a 	mov	r18,zero
   139e4:	d8800115 	stw	r2,4(sp)
   139e8:	90003f26 	beq	r18,zero,13ae8 <__sfvwrite_r+0x22c>
   139ec:	4080800c 	andi	r2,r8,512
   139f0:	81000017 	ldw	r4,0(r16)
   139f4:	85c00217 	ldw	r23,8(r16)
   139f8:	10008726 	beq	r2,zero,13c18 <__sfvwrite_r+0x35c>
   139fc:	b82d883a 	mov	r22,r23
   13a00:	95c0aa36 	bltu	r18,r23,13cac <__sfvwrite_r+0x3f0>
   13a04:	4081200c 	andi	r2,r8,1152
   13a08:	10002526 	beq	r2,zero,13aa0 <__sfvwrite_r+0x1e4>
   13a0c:	80800517 	ldw	r2,20(r16)
   13a10:	81400417 	ldw	r5,16(r16)
   13a14:	108000e4 	muli	r2,r2,3
   13a18:	216dc83a 	sub	r22,r4,r5
   13a1c:	b1000044 	addi	r4,r22,1
   13a20:	1026d7fa 	srli	r19,r2,31
   13a24:	2489883a 	add	r4,r4,r18
   13a28:	9885883a 	add	r2,r19,r2
   13a2c:	1027d07a 	srai	r19,r2,1
   13a30:	980d883a 	mov	r6,r19
   13a34:	9900022e 	bgeu	r19,r4,13a40 <__sfvwrite_r+0x184>
   13a38:	2027883a 	mov	r19,r4
   13a3c:	200d883a 	mov	r6,r4
   13a40:	4201000c 	andi	r8,r8,1024
   13a44:	4000ac26 	beq	r8,zero,13cf8 <__sfvwrite_r+0x43c>
   13a48:	300b883a 	mov	r5,r6
   13a4c:	a809883a 	mov	r4,r21
   13a50:	000ce140 	call	ce14 <_malloc_r>
   13a54:	1000b426 	beq	r2,zero,13d28 <__sfvwrite_r+0x46c>
   13a58:	81400417 	ldw	r5,16(r16)
   13a5c:	b00d883a 	mov	r6,r22
   13a60:	1009883a 	mov	r4,r2
   13a64:	000d5f40 	call	d5f4 <memcpy>
   13a68:	100f883a 	mov	r7,r2
   13a6c:	8080030b 	ldhu	r2,12(r16)
   13a70:	00fedfc4 	movi	r3,-1153
   13a74:	10c4703a 	and	r2,r2,r3
   13a78:	10802014 	ori	r2,r2,128
   13a7c:	8080030d 	sth	r2,12(r16)
   13a80:	3d89883a 	add	r4,r7,r22
   13a84:	9d85c83a 	sub	r2,r19,r22
   13a88:	81c00415 	stw	r7,16(r16)
   13a8c:	81000015 	stw	r4,0(r16)
   13a90:	84c00515 	stw	r19,20(r16)
   13a94:	902f883a 	mov	r23,r18
   13a98:	80800215 	stw	r2,8(r16)
   13a9c:	902d883a 	mov	r22,r18
   13aa0:	b00d883a 	mov	r6,r22
   13aa4:	e00b883a 	mov	r5,fp
   13aa8:	0014f840 	call	14f84 <memmove>
   13aac:	81000217 	ldw	r4,8(r16)
   13ab0:	80800017 	ldw	r2,0(r16)
   13ab4:	9027883a 	mov	r19,r18
   13ab8:	25c9c83a 	sub	r4,r4,r23
   13abc:	1585883a 	add	r2,r2,r22
   13ac0:	81000215 	stw	r4,8(r16)
   13ac4:	80800015 	stw	r2,0(r16)
   13ac8:	0025883a 	mov	r18,zero
   13acc:	a1800217 	ldw	r6,8(r20)
   13ad0:	e4f9883a 	add	fp,fp,r19
   13ad4:	34e7c83a 	sub	r19,r6,r19
   13ad8:	a4c00215 	stw	r19,8(r20)
   13adc:	983fa326 	beq	r19,zero,1396c <__sfvwrite_r+0xb0>
   13ae0:	8200030b 	ldhu	r8,12(r16)
   13ae4:	903fc11e 	bne	r18,zero,139ec <__sfvwrite_r+0x130>
   13ae8:	8f000017 	ldw	fp,0(r17)
   13aec:	8c800117 	ldw	r18,4(r17)
   13af0:	8c400204 	addi	r17,r17,8
   13af4:	003fbc06 	br	139e8 <__sfvwrite_r+0x12c>
   13af8:	8cc00017 	ldw	r19,0(r17)
   13afc:	8c800117 	ldw	r18,4(r17)
   13b00:	8c400204 	addi	r17,r17,8
   13b04:	003f8906 	br	1392c <__sfvwrite_r+0x70>
   13b08:	800b883a 	mov	r5,r16
   13b0c:	a809883a 	mov	r4,r21
   13b10:	00130240 	call	13024 <_fflush_r>
   13b14:	10002226 	beq	r2,zero,13ba0 <__sfvwrite_r+0x2e4>
   13b18:	8080030b 	ldhu	r2,12(r16)
   13b1c:	10801014 	ori	r2,r2,64
   13b20:	8080030d 	sth	r2,12(r16)
   13b24:	00bfffc4 	movi	r2,-1
   13b28:	003f9106 	br	13970 <__sfvwrite_r+0xb4>
   13b2c:	0005883a 	mov	r2,zero
   13b30:	f800283a 	ret
   13b34:	002d883a 	mov	r22,zero
   13b38:	0039883a 	mov	fp,zero
   13b3c:	0005883a 	mov	r2,zero
   13b40:	002f883a 	mov	r23,zero
   13b44:	b0001d26 	beq	r22,zero,13bbc <__sfvwrite_r+0x300>
   13b48:	10002026 	beq	r2,zero,13bcc <__sfvwrite_r+0x310>
   13b4c:	e027883a 	mov	r19,fp
   13b50:	b4c0012e 	bgeu	r22,r19,13b58 <__sfvwrite_r+0x29c>
   13b54:	b027883a 	mov	r19,r22
   13b58:	81000017 	ldw	r4,0(r16)
   13b5c:	80800417 	ldw	r2,16(r16)
   13b60:	81c00517 	ldw	r7,20(r16)
   13b64:	1100032e 	bgeu	r2,r4,13b74 <__sfvwrite_r+0x2b8>
   13b68:	84800217 	ldw	r18,8(r16)
   13b6c:	3ca5883a 	add	r18,r7,r18
   13b70:	94c01e16 	blt	r18,r19,13bec <__sfvwrite_r+0x330>
   13b74:	99c05016 	blt	r19,r7,13cb8 <__sfvwrite_r+0x3fc>
   13b78:	80800917 	ldw	r2,36(r16)
   13b7c:	81400717 	ldw	r5,28(r16)
   13b80:	b80d883a 	mov	r6,r23
   13b84:	a809883a 	mov	r4,r21
   13b88:	103ee83a 	callr	r2
   13b8c:	1025883a 	mov	r18,r2
   13b90:	00bfe10e 	bge	zero,r2,13b18 <__sfvwrite_r+0x25c>
   13b94:	e4b9c83a 	sub	fp,fp,r18
   13b98:	e03fdb26 	beq	fp,zero,13b08 <__sfvwrite_r+0x24c>
   13b9c:	00800044 	movi	r2,1
   13ba0:	a1800217 	ldw	r6,8(r20)
   13ba4:	bcaf883a 	add	r23,r23,r18
   13ba8:	b4adc83a 	sub	r22,r22,r18
   13bac:	34a5c83a 	sub	r18,r6,r18
   13bb0:	a4800215 	stw	r18,8(r20)
   13bb4:	903f6d26 	beq	r18,zero,1396c <__sfvwrite_r+0xb0>
   13bb8:	b03fe31e 	bne	r22,zero,13b48 <__sfvwrite_r+0x28c>
   13bbc:	8d800117 	ldw	r22,4(r17)
   13bc0:	8dc00017 	ldw	r23,0(r17)
   13bc4:	8c400204 	addi	r17,r17,8
   13bc8:	b03ffc26 	beq	r22,zero,13bbc <__sfvwrite_r+0x300>
   13bcc:	b00d883a 	mov	r6,r22
   13bd0:	01400284 	movi	r5,10
   13bd4:	b809883a 	mov	r4,r23
   13bd8:	0014eb40 	call	14eb4 <memchr>
   13bdc:	10004326 	beq	r2,zero,13cec <__sfvwrite_r+0x430>
   13be0:	10800044 	addi	r2,r2,1
   13be4:	15f9c83a 	sub	fp,r2,r23
   13be8:	003fd806 	br	13b4c <__sfvwrite_r+0x290>
   13bec:	b80b883a 	mov	r5,r23
   13bf0:	900d883a 	mov	r6,r18
   13bf4:	0014f840 	call	14f84 <memmove>
   13bf8:	80800017 	ldw	r2,0(r16)
   13bfc:	800b883a 	mov	r5,r16
   13c00:	a809883a 	mov	r4,r21
   13c04:	1485883a 	add	r2,r2,r18
   13c08:	80800015 	stw	r2,0(r16)
   13c0c:	00130240 	call	13024 <_fflush_r>
   13c10:	103fe026 	beq	r2,zero,13b94 <__sfvwrite_r+0x2d8>
   13c14:	003fc006 	br	13b18 <__sfvwrite_r+0x25c>
   13c18:	80800417 	ldw	r2,16(r16)
   13c1c:	11001136 	bltu	r2,r4,13c64 <__sfvwrite_r+0x3a8>
   13c20:	84c00517 	ldw	r19,20(r16)
   13c24:	94c00f36 	bltu	r18,r19,13c64 <__sfvwrite_r+0x3a8>
   13c28:	d8800017 	ldw	r2,0(sp)
   13c2c:	14802d2e 	bgeu	r2,r18,13ce4 <__sfvwrite_r+0x428>
   13c30:	d9000117 	ldw	r4,4(sp)
   13c34:	980b883a 	mov	r5,r19
   13c38:	00093dc0 	call	93dc <__divsi3>
   13c3c:	14cf383a 	mul	r7,r2,r19
   13c40:	82000917 	ldw	r8,36(r16)
   13c44:	81400717 	ldw	r5,28(r16)
   13c48:	e00d883a 	mov	r6,fp
   13c4c:	a809883a 	mov	r4,r21
   13c50:	403ee83a 	callr	r8
   13c54:	1027883a 	mov	r19,r2
   13c58:	00bfaf0e 	bge	zero,r2,13b18 <__sfvwrite_r+0x25c>
   13c5c:	94e5c83a 	sub	r18,r18,r19
   13c60:	003f9a06 	br	13acc <__sfvwrite_r+0x210>
   13c64:	b827883a 	mov	r19,r23
   13c68:	95c0012e 	bgeu	r18,r23,13c70 <__sfvwrite_r+0x3b4>
   13c6c:	9027883a 	mov	r19,r18
   13c70:	980d883a 	mov	r6,r19
   13c74:	e00b883a 	mov	r5,fp
   13c78:	0014f840 	call	14f84 <memmove>
   13c7c:	80800217 	ldw	r2,8(r16)
   13c80:	81000017 	ldw	r4,0(r16)
   13c84:	14c5c83a 	sub	r2,r2,r19
   13c88:	24c9883a 	add	r4,r4,r19
   13c8c:	80800215 	stw	r2,8(r16)
   13c90:	81000015 	stw	r4,0(r16)
   13c94:	103ff11e 	bne	r2,zero,13c5c <__sfvwrite_r+0x3a0>
   13c98:	800b883a 	mov	r5,r16
   13c9c:	a809883a 	mov	r4,r21
   13ca0:	00130240 	call	13024 <_fflush_r>
   13ca4:	103fed26 	beq	r2,zero,13c5c <__sfvwrite_r+0x3a0>
   13ca8:	003f9b06 	br	13b18 <__sfvwrite_r+0x25c>
   13cac:	902f883a 	mov	r23,r18
   13cb0:	902d883a 	mov	r22,r18
   13cb4:	003f7a06 	br	13aa0 <__sfvwrite_r+0x1e4>
   13cb8:	980d883a 	mov	r6,r19
   13cbc:	b80b883a 	mov	r5,r23
   13cc0:	0014f840 	call	14f84 <memmove>
   13cc4:	80c00217 	ldw	r3,8(r16)
   13cc8:	80800017 	ldw	r2,0(r16)
   13ccc:	9825883a 	mov	r18,r19
   13cd0:	1cc7c83a 	sub	r3,r3,r19
   13cd4:	14c5883a 	add	r2,r2,r19
   13cd8:	80c00215 	stw	r3,8(r16)
   13cdc:	80800015 	stw	r2,0(r16)
   13ce0:	003fac06 	br	13b94 <__sfvwrite_r+0x2d8>
   13ce4:	9009883a 	mov	r4,r18
   13ce8:	003fd206 	br	13c34 <__sfvwrite_r+0x378>
   13cec:	b4c00044 	addi	r19,r22,1
   13cf0:	9839883a 	mov	fp,r19
   13cf4:	003f9606 	br	13b50 <__sfvwrite_r+0x294>
   13cf8:	a809883a 	mov	r4,r21
   13cfc:	00164ac0 	call	164ac <_realloc_r>
   13d00:	100f883a 	mov	r7,r2
   13d04:	103f5e1e 	bne	r2,zero,13a80 <__sfvwrite_r+0x1c4>
   13d08:	81400417 	ldw	r5,16(r16)
   13d0c:	a809883a 	mov	r4,r21
   13d10:	00135c00 	call	135c0 <_free_r>
   13d14:	8080030b 	ldhu	r2,12(r16)
   13d18:	00c00304 	movi	r3,12
   13d1c:	a8c00015 	stw	r3,0(r21)
   13d20:	10bfdfcc 	andi	r2,r2,65407
   13d24:	003f7d06 	br	13b1c <__sfvwrite_r+0x260>
   13d28:	00c00304 	movi	r3,12
   13d2c:	8080030b 	ldhu	r2,12(r16)
   13d30:	a8c00015 	stw	r3,0(r21)
   13d34:	003f7906 	br	13b1c <__sfvwrite_r+0x260>
   13d38:	00bfffc4 	movi	r2,-1
   13d3c:	003f0c06 	br	13970 <__sfvwrite_r+0xb4>

00013d40 <_fwalk>:
   13d40:	defffa04 	addi	sp,sp,-24
   13d44:	dd000415 	stw	r20,16(sp)
   13d48:	dcc00315 	stw	r19,12(sp)
   13d4c:	dc800215 	stw	r18,8(sp)
   13d50:	dfc00515 	stw	ra,20(sp)
   13d54:	dc400115 	stw	r17,4(sp)
   13d58:	dc000015 	stw	r16,0(sp)
   13d5c:	2827883a 	mov	r19,r5
   13d60:	2480b804 	addi	r18,r4,736
   13d64:	0029883a 	mov	r20,zero
   13d68:	94400117 	ldw	r17,4(r18)
   13d6c:	94000217 	ldw	r16,8(r18)
   13d70:	8c7fffc4 	addi	r17,r17,-1
   13d74:	88000d16 	blt	r17,zero,13dac <_fwalk+0x6c>
   13d78:	8080030b 	ldhu	r2,12(r16)
   13d7c:	8c7fffc4 	addi	r17,r17,-1
   13d80:	108000b0 	cmpltui	r2,r2,2
   13d84:	1000061e 	bne	r2,zero,13da0 <_fwalk+0x60>
   13d88:	8080038f 	ldh	r2,14(r16)
   13d8c:	8009883a 	mov	r4,r16
   13d90:	10bfffe0 	cmpeqi	r2,r2,-1
   13d94:	1000021e 	bne	r2,zero,13da0 <_fwalk+0x60>
   13d98:	983ee83a 	callr	r19
   13d9c:	a0a8b03a 	or	r20,r20,r2
   13da0:	88bfffd8 	cmpnei	r2,r17,-1
   13da4:	84001a04 	addi	r16,r16,104
   13da8:	103ff31e 	bne	r2,zero,13d78 <_fwalk+0x38>
   13dac:	94800017 	ldw	r18,0(r18)
   13db0:	903fed1e 	bne	r18,zero,13d68 <_fwalk+0x28>
   13db4:	a005883a 	mov	r2,r20
   13db8:	dfc00517 	ldw	ra,20(sp)
   13dbc:	dd000417 	ldw	r20,16(sp)
   13dc0:	dcc00317 	ldw	r19,12(sp)
   13dc4:	dc800217 	ldw	r18,8(sp)
   13dc8:	dc400117 	ldw	r17,4(sp)
   13dcc:	dc000017 	ldw	r16,0(sp)
   13dd0:	dec00604 	addi	sp,sp,24
   13dd4:	f800283a 	ret

00013dd8 <_fwalk_reent>:
   13dd8:	defff904 	addi	sp,sp,-28
   13ddc:	dd400515 	stw	r21,20(sp)
   13de0:	dd000415 	stw	r20,16(sp)
   13de4:	dcc00315 	stw	r19,12(sp)
   13de8:	dc800215 	stw	r18,8(sp)
   13dec:	dfc00615 	stw	ra,24(sp)
   13df0:	dc400115 	stw	r17,4(sp)
   13df4:	dc000015 	stw	r16,0(sp)
   13df8:	202b883a 	mov	r21,r4
   13dfc:	2827883a 	mov	r19,r5
   13e00:	2480b804 	addi	r18,r4,736
   13e04:	0029883a 	mov	r20,zero
   13e08:	94400117 	ldw	r17,4(r18)
   13e0c:	94000217 	ldw	r16,8(r18)
   13e10:	8c7fffc4 	addi	r17,r17,-1
   13e14:	88000e16 	blt	r17,zero,13e50 <_fwalk_reent+0x78>
   13e18:	8080030b 	ldhu	r2,12(r16)
   13e1c:	8c7fffc4 	addi	r17,r17,-1
   13e20:	108000b0 	cmpltui	r2,r2,2
   13e24:	1000071e 	bne	r2,zero,13e44 <_fwalk_reent+0x6c>
   13e28:	8080038f 	ldh	r2,14(r16)
   13e2c:	800b883a 	mov	r5,r16
   13e30:	a809883a 	mov	r4,r21
   13e34:	10bfffe0 	cmpeqi	r2,r2,-1
   13e38:	1000021e 	bne	r2,zero,13e44 <_fwalk_reent+0x6c>
   13e3c:	983ee83a 	callr	r19
   13e40:	a0a8b03a 	or	r20,r20,r2
   13e44:	88bfffd8 	cmpnei	r2,r17,-1
   13e48:	84001a04 	addi	r16,r16,104
   13e4c:	103ff21e 	bne	r2,zero,13e18 <_fwalk_reent+0x40>
   13e50:	94800017 	ldw	r18,0(r18)
   13e54:	903fec1e 	bne	r18,zero,13e08 <_fwalk_reent+0x30>
   13e58:	a005883a 	mov	r2,r20
   13e5c:	dfc00617 	ldw	ra,24(sp)
   13e60:	dd400517 	ldw	r21,20(sp)
   13e64:	dd000417 	ldw	r20,16(sp)
   13e68:	dcc00317 	ldw	r19,12(sp)
   13e6c:	dc800217 	ldw	r18,8(sp)
   13e70:	dc400117 	ldw	r17,4(sp)
   13e74:	dc000017 	ldw	r16,0(sp)
   13e78:	dec00704 	addi	sp,sp,28
   13e7c:	f800283a 	ret

00013e80 <rshift>:
   13e80:	2817d17a 	srai	r11,r5,5
   13e84:	21c00417 	ldw	r7,16(r4)
   13e88:	59c0220e 	bge	r11,r7,13f14 <rshift+0x94>
   13e8c:	381090ba 	slli	r8,r7,2
   13e90:	580490ba 	slli	r2,r11,2
   13e94:	22400504 	addi	r9,r4,20
   13e98:	298007cc 	andi	r6,r5,31
   13e9c:	4a11883a 	add	r8,r9,r8
   13ea0:	4885883a 	add	r2,r9,r2
   13ea4:	30001e26 	beq	r6,zero,13f20 <rshift+0xa0>
   13ea8:	10c00017 	ldw	r3,0(r2)
   13eac:	03000804 	movi	r12,32
   13eb0:	10800104 	addi	r2,r2,4
   13eb4:	198ad83a 	srl	r5,r3,r6
   13eb8:	6199c83a 	sub	r12,r12,r6
   13ebc:	1200122e 	bgeu	r2,r8,13f08 <rshift+0x88>
   13ec0:	4815883a 	mov	r10,r9
   13ec4:	10c00017 	ldw	r3,0(r2)
   13ec8:	52800104 	addi	r10,r10,4
   13ecc:	10800104 	addi	r2,r2,4
   13ed0:	1b06983a 	sll	r3,r3,r12
   13ed4:	1946b03a 	or	r3,r3,r5
   13ed8:	50ffff15 	stw	r3,-4(r10)
   13edc:	10ffff17 	ldw	r3,-4(r2)
   13ee0:	198ad83a 	srl	r5,r3,r6
   13ee4:	123ff736 	bltu	r2,r8,13ec4 <rshift+0x44>
   13ee8:	3acfc83a 	sub	r7,r7,r11
   13eec:	380e90ba 	slli	r7,r7,2
   13ef0:	39ffff04 	addi	r7,r7,-4
   13ef4:	49cf883a 	add	r7,r9,r7
   13ef8:	39400015 	stw	r5,0(r7)
   13efc:	28001226 	beq	r5,zero,13f48 <rshift+0xc8>
   13f00:	39c00104 	addi	r7,r7,4
   13f04:	00001006 	br	13f48 <rshift+0xc8>
   13f08:	21400515 	stw	r5,20(r4)
   13f0c:	480f883a 	mov	r7,r9
   13f10:	283ffb1e 	bne	r5,zero,13f00 <rshift+0x80>
   13f14:	20000415 	stw	zero,16(r4)
   13f18:	20000515 	stw	zero,20(r4)
   13f1c:	f800283a 	ret
   13f20:	4807883a 	mov	r3,r9
   13f24:	123ffb2e 	bgeu	r2,r8,13f14 <rshift+0x94>
   13f28:	11400017 	ldw	r5,0(r2)
   13f2c:	10800104 	addi	r2,r2,4
   13f30:	18c00104 	addi	r3,r3,4
   13f34:	197fff15 	stw	r5,-4(r3)
   13f38:	123ffb36 	bltu	r2,r8,13f28 <rshift+0xa8>
   13f3c:	3acfc83a 	sub	r7,r7,r11
   13f40:	380e90ba 	slli	r7,r7,2
   13f44:	49cf883a 	add	r7,r9,r7
   13f48:	3a45c83a 	sub	r2,r7,r9
   13f4c:	1005d0ba 	srai	r2,r2,2
   13f50:	20800415 	stw	r2,16(r4)
   13f54:	3a7ff026 	beq	r7,r9,13f18 <rshift+0x98>
   13f58:	f800283a 	ret

00013f5c <__gethex>:
   13f5c:	deffed04 	addi	sp,sp,-76
   13f60:	008000b4 	movhi	r2,2
   13f64:	dc800b15 	stw	r18,44(sp)
   13f68:	1486b917 	ldw	r18,6884(r2)
   13f6c:	dd000d15 	stw	r20,52(sp)
   13f70:	2029883a 	mov	r20,r4
   13f74:	9009883a 	mov	r4,r18
   13f78:	ddc01015 	stw	r23,64(sp)
   13f7c:	dd800f15 	stw	r22,60(sp)
   13f80:	dc400a15 	stw	r17,40(sp)
   13f84:	282d883a 	mov	r22,r5
   13f88:	dd000115 	stw	r20,4(sp)
   13f8c:	d9c00815 	stw	r7,32(sp)
   13f90:	dfc01215 	stw	ra,72(sp)
   13f94:	df001115 	stw	fp,68(sp)
   13f98:	dd400e15 	stw	r21,56(sp)
   13f9c:	dcc00c15 	stw	r19,48(sp)
   13fa0:	dc000915 	stw	r16,36(sp)
   13fa4:	3023883a 	mov	r17,r6
   13fa8:	000d8b00 	call	d8b0 <strlen>
   13fac:	b1c00017 	ldw	r7,0(r22)
   13fb0:	9087883a 	add	r3,r18,r2
   13fb4:	1029883a 	mov	r20,r2
   13fb8:	39000083 	ldbu	r4,2(r7)
   13fbc:	1dffffc3 	ldbu	r23,-1(r3)
   13fc0:	20800c18 	cmpnei	r2,r4,48
   13fc4:	1001651e 	bne	r2,zero,1455c <__gethex+0x600>
   13fc8:	017fff84 	movi	r5,-2
   13fcc:	38c000c4 	addi	r3,r7,3
   13fd0:	29cbc83a 	sub	r5,r5,r7
   13fd4:	19000003 	ldbu	r4,0(r3)
   13fd8:	28eb883a 	add	r21,r5,r3
   13fdc:	1827883a 	mov	r19,r3
   13fe0:	20800c20 	cmpeqi	r2,r4,48
   13fe4:	18c00044 	addi	r3,r3,1
   13fe8:	103ffa1e 	bne	r2,zero,13fd4 <__gethex+0x78>
   13fec:	008000b4 	movhi	r2,2
   13ff0:	2085883a 	add	r2,r4,r2
   13ff4:	10867803 	ldbu	r2,6624(r2)
   13ff8:	1000191e 	bne	r2,zero,14060 <__gethex+0x104>
   13ffc:	a00d883a 	mov	r6,r20
   14000:	900b883a 	mov	r5,r18
   14004:	9809883a 	mov	r4,r19
   14008:	0016be00 	call	16be0 <strncmp>
   1400c:	1000e41e 	bne	r2,zero,143a0 <__gethex+0x444>
   14010:	9d21883a 	add	r16,r19,r20
   14014:	80c00003 	ldbu	r3,0(r16)
   14018:	008000b4 	movhi	r2,2
   1401c:	19003fcc 	andi	r4,r3,255
   14020:	2085883a 	add	r2,r4,r2
   14024:	10867803 	ldbu	r2,6624(r2)
   14028:	1000df26 	beq	r2,zero,143a8 <__gethex+0x44c>
   1402c:	21000c18 	cmpnei	r4,r4,48
   14030:	8027883a 	mov	r19,r16
   14034:	2000071e 	bne	r4,zero,14054 <__gethex+0xf8>
   14038:	98800043 	ldbu	r2,1(r19)
   1403c:	9cc00044 	addi	r19,r19,1
   14040:	10c00c20 	cmpeqi	r3,r2,48
   14044:	183ffc1e 	bne	r3,zero,14038 <__gethex+0xdc>
   14048:	00c000b4 	movhi	r3,2
   1404c:	10c7883a 	add	r3,r2,r3
   14050:	18867803 	ldbu	r2,6624(r3)
   14054:	1013003a 	cmpeq	r9,r2,zero
   14058:	05400044 	movi	r21,1
   1405c:	00000606 	br	14078 <__gethex+0x11c>
   14060:	98c00003 	ldbu	r3,0(r19)
   14064:	008000b4 	movhi	r2,2
   14068:	0013883a 	mov	r9,zero
   1406c:	1885883a 	add	r2,r3,r2
   14070:	10867803 	ldbu	r2,6624(r2)
   14074:	0021883a 	mov	r16,zero
   14078:	9839883a 	mov	fp,r19
   1407c:	10000626 	beq	r2,zero,14098 <__gethex+0x13c>
   14080:	e0800043 	ldbu	r2,1(fp)
   14084:	00c000b4 	movhi	r3,2
   14088:	e7000044 	addi	fp,fp,1
   1408c:	10c7883a 	add	r3,r2,r3
   14090:	18867803 	ldbu	r2,6624(r3)
   14094:	103ffa1e 	bne	r2,zero,14080 <__gethex+0x124>
   14098:	a00d883a 	mov	r6,r20
   1409c:	900b883a 	mov	r5,r18
   140a0:	e009883a 	mov	r4,fp
   140a4:	da400015 	stw	r9,0(sp)
   140a8:	0016be00 	call	16be0 <strncmp>
   140ac:	da400017 	ldw	r9,0(sp)
   140b0:	1000031e 	bne	r2,zero,140c0 <__gethex+0x164>
   140b4:	80012c26 	beq	r16,zero,14568 <__gethex+0x60c>
   140b8:	e0800003 	ldbu	r2,0(fp)
   140bc:	00000206 	br	140c8 <__gethex+0x16c>
   140c0:	e0800003 	ldbu	r2,0(fp)
   140c4:	8000de26 	beq	r16,zero,14440 <__gethex+0x4e4>
   140c8:	8721c83a 	sub	r16,r16,fp
   140cc:	800690ba 	slli	r3,r16,2
   140d0:	d8c00015 	stw	r3,0(sp)
   140d4:	108037cc 	andi	r2,r2,223
   140d8:	10801418 	cmpnei	r2,r2,80
   140dc:	e021883a 	mov	r16,fp
   140e0:	10006726 	beq	r2,zero,14280 <__gethex+0x324>
   140e4:	b7000015 	stw	fp,0(r22)
   140e8:	4800821e 	bne	r9,zero,142f4 <__gethex+0x398>
   140ec:	84c7c83a 	sub	r3,r16,r19
   140f0:	18ffffc4 	addi	r3,r3,-1
   140f4:	18800210 	cmplti	r2,r3,8
   140f8:	000b883a 	mov	r5,zero
   140fc:	1000041e 	bne	r2,zero,14110 <__gethex+0x1b4>
   14100:	1807d07a 	srai	r3,r3,1
   14104:	29400044 	addi	r5,r5,1
   14108:	18800208 	cmpgei	r2,r3,8
   1410c:	103ffc1e 	bne	r2,zero,14100 <__gethex+0x1a4>
   14110:	d9000117 	ldw	r4,4(sp)
   14114:	00151a00 	call	151a0 <_Balloc>
   14118:	102b883a 	mov	r21,r2
   1411c:	1001b226 	beq	r2,zero,147e8 <__gethex+0x88c>
   14120:	15800504 	addi	r22,r2,20
   14124:	b015883a 	mov	r10,r22
   14128:	9c01572e 	bgeu	r19,r16,14688 <__gethex+0x72c>
   1412c:	03000044 	movi	r12,1
   14130:	0039883a 	mov	fp,zero
   14134:	0013883a 	mov	r9,zero
   14138:	bdc03fcc 	andi	r23,r23,255
   1413c:	6519c83a 	sub	r12,r12,r20
   14140:	837fffc3 	ldbu	r13,-1(r16)
   14144:	83bfffc4 	addi	r14,r16,-1
   14148:	6dc02f26 	beq	r13,r23,14208 <__gethex+0x2ac>
   1414c:	e0800820 	cmpeqi	r2,fp,32
   14150:	1000421e 	bne	r2,zero,1425c <__gethex+0x300>
   14154:	e005883a 	mov	r2,fp
   14158:	e7000104 	addi	fp,fp,4
   1415c:	020000b4 	movhi	r8,2
   14160:	6a11883a 	add	r8,r13,r8
   14164:	40c67803 	ldbu	r3,6624(r8)
   14168:	7021883a 	mov	r16,r14
   1416c:	18c003cc 	andi	r3,r3,15
   14170:	1886983a 	sll	r3,r3,r2
   14174:	48d2b03a 	or	r9,r9,r3
   14178:	9c3ff136 	bltu	r19,r16,14140 <__gethex+0x1e4>
   1417c:	50800104 	addi	r2,r10,4
   14180:	1585c83a 	sub	r2,r2,r22
   14184:	1005d0ba 	srai	r2,r2,2
   14188:	52400015 	stw	r9,0(r10)
   1418c:	4809883a 	mov	r4,r9
   14190:	1020917a 	slli	r16,r2,5
   14194:	a8800415 	stw	r2,16(r21)
   14198:	00154d80 	call	154d8 <__hi0bits>
   1419c:	8c800017 	ldw	r18,0(r17)
   141a0:	8085c83a 	sub	r2,r16,r2
   141a4:	90808c16 	blt	r18,r2,143d8 <__gethex+0x47c>
   141a8:	1480e016 	blt	r2,r18,1452c <__gethex+0x5d0>
   141ac:	002f883a 	mov	r23,zero
   141b0:	88800217 	ldw	r2,8(r17)
   141b4:	d8c00017 	ldw	r3,0(sp)
   141b8:	10c12a16 	blt	r2,r3,14664 <__gethex+0x708>
   141bc:	88800117 	ldw	r2,4(r17)
   141c0:	d8c00017 	ldw	r3,0(sp)
   141c4:	18805a0e 	bge	r3,r2,14330 <__gethex+0x3d4>
   141c8:	10e7c83a 	sub	r19,r2,r3
   141cc:	9c80a016 	blt	r19,r18,14450 <__gethex+0x4f4>
   141d0:	88c00317 	ldw	r3,12(r17)
   141d4:	190000a0 	cmpeqi	r4,r3,2
   141d8:	20014e1e 	bne	r4,zero,14714 <__gethex+0x7b8>
   141dc:	190000e0 	cmpeqi	r4,r3,3
   141e0:	2001491e 	bne	r4,zero,14708 <__gethex+0x7ac>
   141e4:	18c00058 	cmpnei	r3,r3,1
   141e8:	18013626 	beq	r3,zero,146c4 <__gethex+0x768>
   141ec:	d9000117 	ldw	r4,4(sp)
   141f0:	a80b883a 	mov	r5,r21
   141f4:	04001404 	movi	r16,80
   141f8:	00152440 	call	15244 <_Bfree>
   141fc:	d8801317 	ldw	r2,76(sp)
   14200:	10000015 	stw	zero,0(r2)
   14204:	00005906 	br	1436c <__gethex+0x410>
   14208:	7309883a 	add	r4,r14,r12
   1420c:	24ffcf36 	bltu	r4,r19,1414c <__gethex+0x1f0>
   14210:	a00d883a 	mov	r6,r20
   14214:	900b883a 	mov	r5,r18
   14218:	db000715 	stw	r12,28(sp)
   1421c:	db400615 	stw	r13,24(sp)
   14220:	db800515 	stw	r14,20(sp)
   14224:	da400415 	stw	r9,16(sp)
   14228:	da800315 	stw	r10,12(sp)
   1422c:	d9000215 	stw	r4,8(sp)
   14230:	0016be00 	call	16be0 <strncmp>
   14234:	d9000217 	ldw	r4,8(sp)
   14238:	da800317 	ldw	r10,12(sp)
   1423c:	da400417 	ldw	r9,16(sp)
   14240:	db800517 	ldw	r14,20(sp)
   14244:	db400617 	ldw	r13,24(sp)
   14248:	db000717 	ldw	r12,28(sp)
   1424c:	103fbf1e 	bne	r2,zero,1414c <__gethex+0x1f0>
   14250:	2021883a 	mov	r16,r4
   14254:	9c3fba36 	bltu	r19,r16,14140 <__gethex+0x1e4>
   14258:	003fc806 	br	1417c <__gethex+0x220>
   1425c:	52400015 	stw	r9,0(r10)
   14260:	837fffc3 	ldbu	r13,-1(r16)
   14264:	52800104 	addi	r10,r10,4
   14268:	0005883a 	mov	r2,zero
   1426c:	07000104 	movi	fp,4
   14270:	0013883a 	mov	r9,zero
   14274:	003fb906 	br	1415c <__gethex+0x200>
   14278:	d8000015 	stw	zero,0(sp)
   1427c:	02400044 	movi	r9,1
   14280:	80800043 	ldbu	r2,1(r16)
   14284:	10c00ae0 	cmpeqi	r3,r2,43
   14288:	1800a61e 	bne	r3,zero,14524 <__gethex+0x5c8>
   1428c:	10c00b60 	cmpeqi	r3,r2,45
   14290:	18004d1e 	bne	r3,zero,143c8 <__gethex+0x46c>
   14294:	87000044 	addi	fp,r16,1
   14298:	000b883a 	mov	r5,zero
   1429c:	00c000b4 	movhi	r3,2
   142a0:	10c7883a 	add	r3,r2,r3
   142a4:	18867803 	ldbu	r2,6624(r3)
   142a8:	10ffffc4 	addi	r3,r2,-1
   142ac:	18c03fcc 	andi	r3,r3,255
   142b0:	18c00668 	cmpgeui	r3,r3,25
   142b4:	1800421e 	bne	r3,zero,143c0 <__gethex+0x464>
   142b8:	e1000043 	ldbu	r4,1(fp)
   142bc:	00c000b4 	movhi	r3,2
   142c0:	10803fcc 	andi	r2,r2,255
   142c4:	20c7883a 	add	r3,r4,r3
   142c8:	18c67803 	ldbu	r3,6624(r3)
   142cc:	10bffc04 	addi	r2,r2,-16
   142d0:	e7000044 	addi	fp,fp,1
   142d4:	1800131e 	bne	r3,zero,14324 <__gethex+0x3c8>
   142d8:	28000126 	beq	r5,zero,142e0 <__gethex+0x384>
   142dc:	0085c83a 	sub	r2,zero,r2
   142e0:	d8c00017 	ldw	r3,0(sp)
   142e4:	b7000015 	stw	fp,0(r22)
   142e8:	1885883a 	add	r2,r3,r2
   142ec:	d8800015 	stw	r2,0(sp)
   142f0:	483f7e26 	beq	r9,zero,140ec <__gethex+0x190>
   142f4:	a8005426 	beq	r21,zero,14448 <__gethex+0x4ec>
   142f8:	0021883a 	mov	r16,zero
   142fc:	00001b06 	br	1436c <__gethex+0x410>
   14300:	e2800043 	ldbu	r10,1(fp)
   14304:	108002a4 	muli	r2,r2,10
   14308:	010000b4 	movhi	r4,2
   1430c:	5109883a 	add	r4,r10,r4
   14310:	10c5883a 	add	r2,r2,r3
   14314:	20c67803 	ldbu	r3,6624(r4)
   14318:	e7000044 	addi	fp,fp,1
   1431c:	10bffc04 	addi	r2,r2,-16
   14320:	183fed26 	beq	r3,zero,142d8 <__gethex+0x37c>
   14324:	19000690 	cmplti	r4,r3,26
   14328:	203ff51e 	bne	r4,zero,14300 <__gethex+0x3a4>
   1432c:	003fea06 	br	142d8 <__gethex+0x37c>
   14330:	04000044 	movi	r16,1
   14334:	b8000826 	beq	r23,zero,14358 <__gethex+0x3fc>
   14338:	88800317 	ldw	r2,12(r17)
   1433c:	10c000a0 	cmpeqi	r3,r2,2
   14340:	1800581e 	bne	r3,zero,144a4 <__gethex+0x548>
   14344:	10c000e0 	cmpeqi	r3,r2,3
   14348:	18005a1e 	bne	r3,zero,144b4 <__gethex+0x558>
   1434c:	10800058 	cmpnei	r2,r2,1
   14350:	10006d26 	beq	r2,zero,14508 <__gethex+0x5ac>
   14354:	84000414 	ori	r16,r16,16
   14358:	d8801317 	ldw	r2,76(sp)
   1435c:	d8c00017 	ldw	r3,0(sp)
   14360:	15400015 	stw	r21,0(r2)
   14364:	d8800817 	ldw	r2,32(sp)
   14368:	10c00015 	stw	r3,0(r2)
   1436c:	8005883a 	mov	r2,r16
   14370:	dfc01217 	ldw	ra,72(sp)
   14374:	df001117 	ldw	fp,68(sp)
   14378:	ddc01017 	ldw	r23,64(sp)
   1437c:	dd800f17 	ldw	r22,60(sp)
   14380:	dd400e17 	ldw	r21,56(sp)
   14384:	dd000d17 	ldw	r20,52(sp)
   14388:	dcc00c17 	ldw	r19,48(sp)
   1438c:	dc800b17 	ldw	r18,44(sp)
   14390:	dc400a17 	ldw	r17,40(sp)
   14394:	dc000917 	ldw	r16,36(sp)
   14398:	dec01304 	addi	sp,sp,76
   1439c:	f800283a 	ret
   143a0:	98c00003 	ldbu	r3,0(r19)
   143a4:	9821883a 	mov	r16,r19
   143a8:	18c037cc 	andi	r3,r3,223
   143ac:	18c01420 	cmpeqi	r3,r3,80
   143b0:	183fb11e 	bne	r3,zero,14278 <__gethex+0x31c>
   143b4:	b4000015 	stw	r16,0(r22)
   143b8:	a83fcf1e 	bne	r21,zero,142f8 <__gethex+0x39c>
   143bc:	00002206 	br	14448 <__gethex+0x4ec>
   143c0:	8039883a 	mov	fp,r16
   143c4:	003f4706 	br	140e4 <__gethex+0x188>
   143c8:	01400044 	movi	r5,1
   143cc:	80800083 	ldbu	r2,2(r16)
   143d0:	87000084 	addi	fp,r16,2
   143d4:	003fb106 	br	1429c <__gethex+0x340>
   143d8:	14a1c83a 	sub	r16,r2,r18
   143dc:	800b883a 	mov	r5,r16
   143e0:	a809883a 	mov	r4,r21
   143e4:	00162a00 	call	162a0 <__any_on>
   143e8:	102f883a 	mov	r23,r2
   143ec:	10000d26 	beq	r2,zero,14424 <__gethex+0x4c8>
   143f0:	813fffc4 	addi	r4,r16,-1
   143f4:	2007d17a 	srai	r3,r4,5
   143f8:	214007cc 	andi	r5,r4,31
   143fc:	00800044 	movi	r2,1
   14400:	180690ba 	slli	r3,r3,2
   14404:	1144983a 	sll	r2,r2,r5
   14408:	b0c7883a 	add	r3,r22,r3
   1440c:	18c00017 	ldw	r3,0(r3)
   14410:	10c4703a 	and	r2,r2,r3
   14414:	10009e26 	beq	r2,zero,14690 <__gethex+0x734>
   14418:	21000090 	cmplti	r4,r4,2
   1441c:	2000a326 	beq	r4,zero,146ac <__gethex+0x750>
   14420:	05c00084 	movi	r23,2
   14424:	800b883a 	mov	r5,r16
   14428:	a809883a 	mov	r4,r21
   1442c:	0013e800 	call	13e80 <rshift>
   14430:	d8800017 	ldw	r2,0(sp)
   14434:	1405883a 	add	r2,r2,r16
   14438:	d8800015 	stw	r2,0(sp)
   1443c:	003f5c06 	br	141b0 <__gethex+0x254>
   14440:	d8000015 	stw	zero,0(sp)
   14444:	003f2306 	br	140d4 <__gethex+0x178>
   14448:	04000184 	movi	r16,6
   1444c:	003fc706 	br	1436c <__gethex+0x410>
   14450:	9c3fffc4 	addi	r16,r19,-1
   14454:	b8008a1e 	bne	r23,zero,14680 <__gethex+0x724>
   14458:	80008f1e 	bne	r16,zero,14698 <__gethex+0x73c>
   1445c:	8007d17a 	srai	r3,r16,5
   14460:	00800044 	movi	r2,1
   14464:	840007cc 	andi	r16,r16,31
   14468:	180690ba 	slli	r3,r3,2
   1446c:	1404983a 	sll	r2,r2,r16
   14470:	b0c7883a 	add	r3,r22,r3
   14474:	18c00017 	ldw	r3,0(r3)
   14478:	10c4703a 	and	r2,r2,r3
   1447c:	10000126 	beq	r2,zero,14484 <__gethex+0x528>
   14480:	bdc00094 	ori	r23,r23,2
   14484:	980b883a 	mov	r5,r19
   14488:	a809883a 	mov	r4,r21
   1448c:	0013e800 	call	13e80 <rshift>
   14490:	88800117 	ldw	r2,4(r17)
   14494:	94e5c83a 	sub	r18,r18,r19
   14498:	04000084 	movi	r16,2
   1449c:	d8800015 	stw	r2,0(sp)
   144a0:	003fa406 	br	14334 <__gethex+0x3d8>
   144a4:	d8c01417 	ldw	r3,80(sp)
   144a8:	00800044 	movi	r2,1
   144ac:	10c5c83a 	sub	r2,r2,r3
   144b0:	d8801415 	stw	r2,80(sp)
   144b4:	d8801417 	ldw	r2,80(sp)
   144b8:	103fa626 	beq	r2,zero,14354 <__gethex+0x3f8>
   144bc:	adc00417 	ldw	r23,16(r21)
   144c0:	b005883a 	mov	r2,r22
   144c4:	b83890ba 	slli	fp,r23,2
   144c8:	b70b883a 	add	r5,r22,fp
   144cc:	00000306 	br	144dc <__gethex+0x580>
   144d0:	10800104 	addi	r2,r2,4
   144d4:	103fff15 	stw	zero,-4(r2)
   144d8:	1140332e 	bgeu	r2,r5,145a8 <__gethex+0x64c>
   144dc:	10c00017 	ldw	r3,0(r2)
   144e0:	193fffe0 	cmpeqi	r4,r3,-1
   144e4:	203ffa1e 	bne	r4,zero,144d0 <__gethex+0x574>
   144e8:	18c00044 	addi	r3,r3,1
   144ec:	10c00015 	stw	r3,0(r2)
   144f0:	840000a0 	cmpeqi	r16,r16,2
   144f4:	80008a1e 	bne	r16,zero,14720 <__gethex+0x7c4>
   144f8:	948007cc 	andi	r18,r18,31
   144fc:	9000a01e 	bne	r18,zero,14780 <__gethex+0x824>
   14500:	04000844 	movi	r16,33
   14504:	003f9406 	br	14358 <__gethex+0x3fc>
   14508:	b880008c 	andi	r2,r23,2
   1450c:	103f9126 	beq	r2,zero,14354 <__gethex+0x3f8>
   14510:	b0800017 	ldw	r2,0(r22)
   14514:	b884b03a 	or	r2,r23,r2
   14518:	1080004c 	andi	r2,r2,1
   1451c:	103fe71e 	bne	r2,zero,144bc <__gethex+0x560>
   14520:	003f8c06 	br	14354 <__gethex+0x3f8>
   14524:	000b883a 	mov	r5,zero
   14528:	003fa806 	br	143cc <__gethex+0x470>
   1452c:	d9000117 	ldw	r4,4(sp)
   14530:	90a1c83a 	sub	r16,r18,r2
   14534:	a80b883a 	mov	r5,r21
   14538:	800d883a 	mov	r6,r16
   1453c:	0015a380 	call	15a38 <__lshift>
   14540:	102b883a 	mov	r21,r2
   14544:	d8800017 	ldw	r2,0(sp)
   14548:	ad800504 	addi	r22,r21,20
   1454c:	002f883a 	mov	r23,zero
   14550:	1405c83a 	sub	r2,r2,r16
   14554:	d8800015 	stw	r2,0(sp)
   14558:	003f1506 	br	141b0 <__gethex+0x254>
   1455c:	3cc00084 	addi	r19,r7,2
   14560:	002b883a 	mov	r21,zero
   14564:	003ea106 	br	13fec <__gethex+0x90>
   14568:	e521883a 	add	r16,fp,r20
   1456c:	80800003 	ldbu	r2,0(r16)
   14570:	00c000b4 	movhi	r3,2
   14574:	8039883a 	mov	fp,r16
   14578:	11003fcc 	andi	r4,r2,255
   1457c:	20c7883a 	add	r3,r4,r3
   14580:	18c67803 	ldbu	r3,6624(r3)
   14584:	183ecf26 	beq	r3,zero,140c4 <__gethex+0x168>
   14588:	e0800043 	ldbu	r2,1(fp)
   1458c:	00c000b4 	movhi	r3,2
   14590:	e7000044 	addi	fp,fp,1
   14594:	11003fcc 	andi	r4,r2,255
   14598:	20c7883a 	add	r3,r4,r3
   1459c:	18c67803 	ldbu	r3,6624(r3)
   145a0:	183ff91e 	bne	r3,zero,14588 <__gethex+0x62c>
   145a4:	003ec706 	br	140c4 <__gethex+0x168>
   145a8:	a8800217 	ldw	r2,8(r21)
   145ac:	b880610e 	bge	r23,r2,14734 <__gethex+0x7d8>
   145b0:	b805883a 	mov	r2,r23
   145b4:	10c00144 	addi	r3,r2,5
   145b8:	180690ba 	slli	r3,r3,2
   145bc:	10800044 	addi	r2,r2,1
   145c0:	a8800415 	stw	r2,16(r21)
   145c4:	a8c7883a 	add	r3,r21,r3
   145c8:	01000044 	movi	r4,1
   145cc:	19000015 	stw	r4,0(r3)
   145d0:	84000098 	cmpnei	r16,r16,2
   145d4:	80005226 	beq	r16,zero,14720 <__gethex+0x7c4>
   145d8:	b8bfc70e 	bge	r23,r2,144f8 <__gethex+0x59c>
   145dc:	0080730e 	bge	zero,r2,147ac <__gethex+0x850>
   145e0:	100490ba 	slli	r2,r2,2
   145e4:	a8c00517 	ldw	r3,20(r21)
   145e8:	a9400604 	addi	r5,r21,24
   145ec:	b085883a 	add	r2,r22,r2
   145f0:	1808d07a 	srli	r4,r3,1
   145f4:	28806a2e 	bgeu	r5,r2,147a0 <__gethex+0x844>
   145f8:	b00d883a 	mov	r6,r22
   145fc:	28c00017 	ldw	r3,0(r5)
   14600:	31800104 	addi	r6,r6,4
   14604:	29400104 	addi	r5,r5,4
   14608:	180697fa 	slli	r3,r3,31
   1460c:	1906b03a 	or	r3,r3,r4
   14610:	30ffff15 	stw	r3,-4(r6)
   14614:	28ffff17 	ldw	r3,-4(r5)
   14618:	1808d07a 	srli	r4,r3,1
   1461c:	28bff736 	bltu	r5,r2,145fc <__gethex+0x6a0>
   14620:	1545c83a 	sub	r2,r2,r21
   14624:	10bff9c4 	addi	r2,r2,-25
   14628:	1004d0ba 	srli	r2,r2,2
   1462c:	10800044 	addi	r2,r2,1
   14630:	100490ba 	slli	r2,r2,2
   14634:	b085883a 	add	r2,r22,r2
   14638:	11000015 	stw	r4,0(r2)
   1463c:	2000681e 	bne	r4,zero,147e0 <__gethex+0x884>
   14640:	1587c83a 	sub	r3,r2,r22
   14644:	1807d0ba 	srai	r3,r3,2
   14648:	a8c00415 	stw	r3,16(r21)
   1464c:	15805826 	beq	r2,r22,147b0 <__gethex+0x854>
   14650:	d8c00017 	ldw	r3,0(sp)
   14654:	88800217 	ldw	r2,8(r17)
   14658:	18c00044 	addi	r3,r3,1
   1465c:	d8c00015 	stw	r3,0(sp)
   14660:	10ffa70e 	bge	r2,r3,14500 <__gethex+0x5a4>
   14664:	d9000117 	ldw	r4,4(sp)
   14668:	a80b883a 	mov	r5,r21
   1466c:	040028c4 	movi	r16,163
   14670:	00152440 	call	15244 <_Bfree>
   14674:	d8801317 	ldw	r2,76(sp)
   14678:	10000015 	stw	zero,0(r2)
   1467c:	003f3b06 	br	1436c <__gethex+0x410>
   14680:	05c00044 	movi	r23,1
   14684:	003f7506 	br	1445c <__gethex+0x500>
   14688:	0013883a 	mov	r9,zero
   1468c:	003ebb06 	br	1417c <__gethex+0x220>
   14690:	05c00044 	movi	r23,1
   14694:	003f6306 	br	14424 <__gethex+0x4c8>
   14698:	800b883a 	mov	r5,r16
   1469c:	a809883a 	mov	r4,r21
   146a0:	00162a00 	call	162a0 <__any_on>
   146a4:	102f883a 	mov	r23,r2
   146a8:	003f6c06 	br	1445c <__gethex+0x500>
   146ac:	817fff84 	addi	r5,r16,-2
   146b0:	a809883a 	mov	r4,r21
   146b4:	00162a00 	call	162a0 <__any_on>
   146b8:	103f5926 	beq	r2,zero,14420 <__gethex+0x4c4>
   146bc:	05c000c4 	movi	r23,3
   146c0:	003f5806 	br	14424 <__gethex+0x4c8>
   146c4:	94fec91e 	bne	r18,r19,141ec <__gethex+0x290>
   146c8:	90c00060 	cmpeqi	r3,r18,1
   146cc:	1800051e 	bne	r3,zero,146e4 <__gethex+0x788>
   146d0:	917fffc4 	addi	r5,r18,-1
   146d4:	a809883a 	mov	r4,r21
   146d8:	00162a00 	call	162a0 <__any_on>
   146dc:	103ec326 	beq	r2,zero,141ec <__gethex+0x290>
   146e0:	88800117 	ldw	r2,4(r17)
   146e4:	d8c00817 	ldw	r3,32(sp)
   146e8:	04001884 	movi	r16,98
   146ec:	18800015 	stw	r2,0(r3)
   146f0:	00800044 	movi	r2,1
   146f4:	a8800415 	stw	r2,16(r21)
   146f8:	b0800015 	stw	r2,0(r22)
   146fc:	d8801317 	ldw	r2,76(sp)
   14700:	15400015 	stw	r21,0(r2)
   14704:	003f1906 	br	1436c <__gethex+0x410>
   14708:	d8c01417 	ldw	r3,80(sp)
   1470c:	183eb726 	beq	r3,zero,141ec <__gethex+0x290>
   14710:	003ff406 	br	146e4 <__gethex+0x788>
   14714:	d8c01417 	ldw	r3,80(sp)
   14718:	183eb41e 	bne	r3,zero,141ec <__gethex+0x290>
   1471c:	003ff106 	br	146e4 <__gethex+0x788>
   14720:	88800017 	ldw	r2,0(r17)
   14724:	10bfffc4 	addi	r2,r2,-1
   14728:	14802326 	beq	r2,r18,147b8 <__gethex+0x85c>
   1472c:	04000884 	movi	r16,34
   14730:	003f0906 	br	14358 <__gethex+0x3fc>
   14734:	a9400117 	ldw	r5,4(r21)
   14738:	d9000117 	ldw	r4,4(sp)
   1473c:	29400044 	addi	r5,r5,1
   14740:	00151a00 	call	151a0 <_Balloc>
   14744:	1027883a 	mov	r19,r2
   14748:	10002e26 	beq	r2,zero,14804 <__gethex+0x8a8>
   1474c:	a9800417 	ldw	r6,16(r21)
   14750:	a9400304 	addi	r5,r21,12
   14754:	11000304 	addi	r4,r2,12
   14758:	31800084 	addi	r6,r6,2
   1475c:	300c90ba 	slli	r6,r6,2
   14760:	15800504 	addi	r22,r2,20
   14764:	000d5f40 	call	d5f4 <memcpy>
   14768:	d9000117 	ldw	r4,4(sp)
   1476c:	a80b883a 	mov	r5,r21
   14770:	982b883a 	mov	r21,r19
   14774:	00152440 	call	15244 <_Bfree>
   14778:	98800417 	ldw	r2,16(r19)
   1477c:	003f8d06 	br	145b4 <__gethex+0x658>
   14780:	b739883a 	add	fp,r22,fp
   14784:	e13fff17 	ldw	r4,-4(fp)
   14788:	00154d80 	call	154d8 <__hi0bits>
   1478c:	00c00804 	movi	r3,32
   14790:	1ca5c83a 	sub	r18,r3,r18
   14794:	14bf5a0e 	bge	r2,r18,14500 <__gethex+0x5a4>
   14798:	a8800417 	ldw	r2,16(r21)
   1479c:	003f8f06 	br	145dc <__gethex+0x680>
   147a0:	b1000015 	stw	r4,0(r22)
   147a4:	b005883a 	mov	r2,r22
   147a8:	20000d1e 	bne	r4,zero,147e0 <__gethex+0x884>
   147ac:	a8000415 	stw	zero,16(r21)
   147b0:	a8000515 	stw	zero,20(r21)
   147b4:	003fa606 	br	14650 <__gethex+0x6f4>
   147b8:	9007d17a 	srai	r3,r18,5
   147bc:	00800044 	movi	r2,1
   147c0:	948007cc 	andi	r18,r18,31
   147c4:	180690ba 	slli	r3,r3,2
   147c8:	1484983a 	sll	r2,r2,r18
   147cc:	b0ed883a 	add	r22,r22,r3
   147d0:	b0c00017 	ldw	r3,0(r22)
   147d4:	10c4703a 	and	r2,r2,r3
   147d8:	103fd426 	beq	r2,zero,1472c <__gethex+0x7d0>
   147dc:	003f4806 	br	14500 <__gethex+0x5a4>
   147e0:	10800104 	addi	r2,r2,4
   147e4:	003f9606 	br	14640 <__gethex+0x6e4>
   147e8:	01c000b4 	movhi	r7,2
   147ec:	010000b4 	movhi	r4,2
   147f0:	39c65104 	addi	r7,r7,6468
   147f4:	000d883a 	mov	r6,zero
   147f8:	01403784 	movi	r5,222
   147fc:	21066604 	addi	r4,r4,6552
   14800:	00183400 	call	18340 <__assert_func>
   14804:	01c000b4 	movhi	r7,2
   14808:	010000b4 	movhi	r4,2
   1480c:	39c65104 	addi	r7,r7,6468
   14810:	000d883a 	mov	r6,zero
   14814:	01402104 	movi	r5,132
   14818:	21066604 	addi	r4,r4,6552
   1481c:	00183400 	call	18340 <__assert_func>

00014820 <__match>:
   14820:	21800017 	ldw	r6,0(r4)
   14824:	29c00007 	ldb	r7,0(r5)
   14828:	31800044 	addi	r6,r6,1
   1482c:	29400044 	addi	r5,r5,1
   14830:	38000c26 	beq	r7,zero,14864 <__match+0x44>
   14834:	30c00003 	ldbu	r3,0(r6)
   14838:	18bfefc4 	addi	r2,r3,-65
   1483c:	10803fcc 	andi	r2,r2,255
   14840:	18c03fcc 	andi	r3,r3,255
   14844:	18c0201c 	xori	r3,r3,128
   14848:	108006a8 	cmpgeui	r2,r2,26
   1484c:	18ffe004 	addi	r3,r3,-128
   14850:	1000011e 	bne	r2,zero,14858 <__match+0x38>
   14854:	18c00804 	addi	r3,r3,32
   14858:	19fff226 	beq	r3,r7,14824 <__match+0x4>
   1485c:	0005883a 	mov	r2,zero
   14860:	f800283a 	ret
   14864:	21800015 	stw	r6,0(r4)
   14868:	00800044 	movi	r2,1
   1486c:	f800283a 	ret

00014870 <__hexnan>:
   14870:	2b400017 	ldw	r13,0(r5)
   14874:	defffc04 	addi	sp,sp,-16
   14878:	dc400115 	stw	r17,4(sp)
   1487c:	6805d17a 	srai	r2,r13,5
   14880:	dfc00315 	stw	ra,12(sp)
   14884:	dc800215 	stw	r18,8(sp)
   14888:	100490ba 	slli	r2,r2,2
   1488c:	dc000015 	stw	r16,0(sp)
   14890:	6b4007cc 	andi	r13,r13,31
   14894:	3023883a 	mov	r17,r6
   14898:	3085883a 	add	r2,r6,r2
   1489c:	6800651e 	bne	r13,zero,14a34 <__hexnan+0x1c4>
   148a0:	143fff04 	addi	r16,r2,-4
   148a4:	1025883a 	mov	r18,r2
   148a8:	21400017 	ldw	r5,0(r4)
   148ac:	903fff15 	stw	zero,-4(r18)
   148b0:	28c00043 	ldbu	r3,1(r5)
   148b4:	18006d26 	beq	r3,zero,14a6c <__hexnan+0x1fc>
   148b8:	8017883a 	mov	r11,r16
   148bc:	800f883a 	mov	r7,r16
   148c0:	0011883a 	mov	r8,zero
   148c4:	0019883a 	mov	r12,zero
   148c8:	0013883a 	mov	r9,zero
   148cc:	03c00204 	movi	r15,8
   148d0:	03800804 	movi	r14,32
   148d4:	008000b4 	movhi	r2,2
   148d8:	1885883a 	add	r2,r3,r2
   148dc:	10867803 	ldbu	r2,6624(r2)
   148e0:	11803fcc 	andi	r6,r2,255
   148e4:	3000431e 	bne	r6,zero,149f4 <__hexnan+0x184>
   148e8:	18800868 	cmpgeui	r2,r3,33
   148ec:	10005d1e 	bne	r2,zero,14a64 <__hexnan+0x1f4>
   148f0:	6240050e 	bge	r12,r9,14908 <__hexnan+0x98>
   148f4:	3ac0022e 	bgeu	r7,r11,14900 <__hexnan+0x90>
   148f8:	40800208 	cmpgei	r2,r8,8
   148fc:	10002926 	beq	r2,zero,149a4 <__hexnan+0x134>
   14900:	89c03636 	bltu	r17,r7,149dc <__hexnan+0x16c>
   14904:	02000204 	movi	r8,8
   14908:	28c00083 	ldbu	r3,2(r5)
   1490c:	29400044 	addi	r5,r5,1
   14910:	183ff01e 	bne	r3,zero,148d4 <__hexnan+0x64>
   14914:	48005526 	beq	r9,zero,14a6c <__hexnan+0x1fc>
   14918:	3ac0022e 	bgeu	r7,r11,14924 <__hexnan+0xb4>
   1491c:	40800208 	cmpgei	r2,r8,8
   14920:	10006626 	beq	r2,zero,14abc <__hexnan+0x24c>
   14924:	89c0462e 	bgeu	r17,r7,14a40 <__hexnan+0x1d0>
   14928:	8807883a 	mov	r3,r17
   1492c:	3805883a 	mov	r2,r7
   14930:	11000017 	ldw	r4,0(r2)
   14934:	10800104 	addi	r2,r2,4
   14938:	18c00104 	addi	r3,r3,4
   1493c:	193fff15 	stw	r4,-4(r3)
   14940:	80bffb2e 	bgeu	r16,r2,14930 <__hexnan+0xc0>
   14944:	80800044 	addi	r2,r16,1
   14948:	38c00044 	addi	r3,r7,1
   1494c:	10c05536 	bltu	r2,r3,14aa4 <__hexnan+0x234>
   14950:	81c9c83a 	sub	r4,r16,r7
   14954:	2008d0ba 	srli	r4,r4,2
   14958:	21000044 	addi	r4,r4,1
   1495c:	200890ba 	slli	r4,r4,2
   14960:	8909883a 	add	r4,r17,r4
   14964:	20c00044 	addi	r3,r4,1
   14968:	10c05236 	bltu	r2,r3,14ab4 <__hexnan+0x244>
   1496c:	810dc83a 	sub	r6,r16,r4
   14970:	300cd0ba 	srli	r6,r6,2
   14974:	31800044 	addi	r6,r6,1
   14978:	300c90ba 	slli	r6,r6,2
   1497c:	000b883a 	mov	r5,zero
   14980:	00150b00 	call	150b0 <memset>
   14984:	90bfff17 	ldw	r2,-4(r18)
   14988:	1000041e 	bne	r2,zero,1499c <__hexnan+0x12c>
   1498c:	8c003e26 	beq	r17,r16,14a88 <__hexnan+0x218>
   14990:	80bfff17 	ldw	r2,-4(r16)
   14994:	843fff04 	addi	r16,r16,-4
   14998:	103ffc26 	beq	r2,zero,1498c <__hexnan+0x11c>
   1499c:	00800144 	movi	r2,5
   149a0:	00003306 	br	14a70 <__hexnan+0x200>
   149a4:	7a11c83a 	sub	r8,r15,r8
   149a8:	401090ba 	slli	r8,r8,2
   149ac:	39800017 	ldw	r6,0(r7)
   149b0:	3805883a 	mov	r2,r7
   149b4:	723fc83a 	sub	ra,r14,r8
   149b8:	12800117 	ldw	r10,4(r2)
   149bc:	10800104 	addi	r2,r2,4
   149c0:	57c6983a 	sll	r3,r10,ra
   149c4:	1986b03a 	or	r3,r3,r6
   149c8:	520cd83a 	srl	r6,r10,r8
   149cc:	10ffff15 	stw	r3,-4(r2)
   149d0:	11800015 	stw	r6,0(r2)
   149d4:	12fff836 	bltu	r2,r11,149b8 <__hexnan+0x148>
   149d8:	89ffca2e 	bgeu	r17,r7,14904 <__hexnan+0x94>
   149dc:	3affff04 	addi	r11,r7,-4
   149e0:	383fff15 	stw	zero,-4(r7)
   149e4:	4819883a 	mov	r12,r9
   149e8:	580f883a 	mov	r7,r11
   149ec:	0011883a 	mov	r8,zero
   149f0:	003fc506 	br	14908 <__hexnan+0x98>
   149f4:	42000044 	addi	r8,r8,1
   149f8:	40c00248 	cmpgei	r3,r8,9
   149fc:	4a400044 	addi	r9,r9,1
   14a00:	1800061e 	bne	r3,zero,14a1c <__hexnan+0x1ac>
   14a04:	38c00017 	ldw	r3,0(r7)
   14a08:	1806913a 	slli	r3,r3,4
   14a0c:	108003cc 	andi	r2,r2,15
   14a10:	10c4b03a 	or	r2,r2,r3
   14a14:	38800015 	stw	r2,0(r7)
   14a18:	003fbb06 	br	14908 <__hexnan+0x98>
   14a1c:	89ffba2e 	bgeu	r17,r7,14908 <__hexnan+0x98>
   14a20:	383fff15 	stw	zero,-4(r7)
   14a24:	0007883a 	mov	r3,zero
   14a28:	39ffff04 	addi	r7,r7,-4
   14a2c:	02000044 	movi	r8,1
   14a30:	003ff606 	br	14a0c <__hexnan+0x19c>
   14a34:	14800104 	addi	r18,r2,4
   14a38:	1021883a 	mov	r16,r2
   14a3c:	003f9a06 	br	148a8 <__hexnan+0x38>
   14a40:	90bfff17 	ldw	r2,-4(r18)
   14a44:	683fd026 	beq	r13,zero,14988 <__hexnan+0x118>
   14a48:	00c00804 	movi	r3,32
   14a4c:	1b5bc83a 	sub	r13,r3,r13
   14a50:	00ffffc4 	movi	r3,-1
   14a54:	1b46d83a 	srl	r3,r3,r13
   14a58:	10c4703a 	and	r2,r2,r3
   14a5c:	90bfff15 	stw	r2,-4(r18)
   14a60:	003fc906 	br	14988 <__hexnan+0x118>
   14a64:	18c00a58 	cmpnei	r3,r3,41
   14a68:	18000b26 	beq	r3,zero,14a98 <__hexnan+0x228>
   14a6c:	00800104 	movi	r2,4
   14a70:	dfc00317 	ldw	ra,12(sp)
   14a74:	dc800217 	ldw	r18,8(sp)
   14a78:	dc400117 	ldw	r17,4(sp)
   14a7c:	dc000017 	ldw	r16,0(sp)
   14a80:	dec00404 	addi	sp,sp,16
   14a84:	f800283a 	ret
   14a88:	00800044 	movi	r2,1
   14a8c:	80800015 	stw	r2,0(r16)
   14a90:	00800144 	movi	r2,5
   14a94:	003ff606 	br	14a70 <__hexnan+0x200>
   14a98:	29400084 	addi	r5,r5,2
   14a9c:	21400015 	stw	r5,0(r4)
   14aa0:	003f9c06 	br	14914 <__hexnan+0xa4>
   14aa4:	01000104 	movi	r4,4
   14aa8:	8909883a 	add	r4,r17,r4
   14aac:	20c00044 	addi	r3,r4,1
   14ab0:	10ffae2e 	bgeu	r2,r3,1496c <__hexnan+0xfc>
   14ab4:	01800104 	movi	r6,4
   14ab8:	003fb006 	br	1497c <__hexnan+0x10c>
   14abc:	01800204 	movi	r6,8
   14ac0:	320dc83a 	sub	r6,r6,r8
   14ac4:	300c90ba 	slli	r6,r6,2
   14ac8:	39000017 	ldw	r4,0(r7)
   14acc:	02000804 	movi	r8,32
   14ad0:	4191c83a 	sub	r8,r8,r6
   14ad4:	3805883a 	mov	r2,r7
   14ad8:	11400117 	ldw	r5,4(r2)
   14adc:	10800104 	addi	r2,r2,4
   14ae0:	2a06983a 	sll	r3,r5,r8
   14ae4:	1906b03a 	or	r3,r3,r4
   14ae8:	2988d83a 	srl	r4,r5,r6
   14aec:	10ffff15 	stw	r3,-4(r2)
   14af0:	11000015 	stw	r4,0(r2)
   14af4:	12fff836 	bltu	r2,r11,14ad8 <__hexnan+0x268>
   14af8:	89ff8b36 	bltu	r17,r7,14928 <__hexnan+0xb8>
   14afc:	003fd006 	br	14a40 <__hexnan+0x1d0>

00014b00 <__numeric_load_locale>:
   14b00:	0005883a 	mov	r2,zero
   14b04:	f800283a 	ret

00014b08 <_setlocale_r>:
   14b08:	30001626 	beq	r6,zero,14b64 <_setlocale_r+0x5c>
   14b0c:	014000b4 	movhi	r5,2
   14b10:	defffe04 	addi	sp,sp,-8
   14b14:	2946bd04 	addi	r5,r5,6900
   14b18:	3009883a 	mov	r4,r6
   14b1c:	dc000015 	stw	r16,0(sp)
   14b20:	dfc00115 	stw	ra,4(sp)
   14b24:	3021883a 	mov	r16,r6
   14b28:	0016b280 	call	16b28 <strcmp>
   14b2c:	1000061e 	bne	r2,zero,14b48 <_setlocale_r+0x40>
   14b30:	008000b4 	movhi	r2,2
   14b34:	1086bc04 	addi	r2,r2,6896
   14b38:	dfc00117 	ldw	ra,4(sp)
   14b3c:	dc000017 	ldw	r16,0(sp)
   14b40:	dec00204 	addi	sp,sp,8
   14b44:	f800283a 	ret
   14b48:	80800003 	ldbu	r2,0(r16)
   14b4c:	10bfef44 	addi	r2,r2,-67
   14b50:	10000726 	beq	r2,zero,14b70 <_setlocale_r+0x68>
   14b54:	80800003 	ldbu	r2,0(r16)
   14b58:	103ff526 	beq	r2,zero,14b30 <_setlocale_r+0x28>
   14b5c:	0005883a 	mov	r2,zero
   14b60:	003ff506 	br	14b38 <_setlocale_r+0x30>
   14b64:	008000b4 	movhi	r2,2
   14b68:	1086bc04 	addi	r2,r2,6896
   14b6c:	f800283a 	ret
   14b70:	80800043 	ldbu	r2,1(r16)
   14b74:	103fee26 	beq	r2,zero,14b30 <_setlocale_r+0x28>
   14b78:	003ff606 	br	14b54 <_setlocale_r+0x4c>

00014b7c <__locale_mb_cur_max>:
   14b7c:	008000b4 	movhi	r2,2
   14b80:	108a4a07 	ldb	r2,10536(r2)
   14b84:	f800283a 	ret

00014b88 <setlocale>:
   14b88:	28001626 	beq	r5,zero,14be4 <setlocale+0x5c>
   14b8c:	defffe04 	addi	sp,sp,-8
   14b90:	dc000015 	stw	r16,0(sp)
   14b94:	2821883a 	mov	r16,r5
   14b98:	014000b4 	movhi	r5,2
   14b9c:	2946bd04 	addi	r5,r5,6900
   14ba0:	8009883a 	mov	r4,r16
   14ba4:	dfc00115 	stw	ra,4(sp)
   14ba8:	0016b280 	call	16b28 <strcmp>
   14bac:	1000061e 	bne	r2,zero,14bc8 <setlocale+0x40>
   14bb0:	008000b4 	movhi	r2,2
   14bb4:	1086bc04 	addi	r2,r2,6896
   14bb8:	dfc00117 	ldw	ra,4(sp)
   14bbc:	dc000017 	ldw	r16,0(sp)
   14bc0:	dec00204 	addi	sp,sp,8
   14bc4:	f800283a 	ret
   14bc8:	80800003 	ldbu	r2,0(r16)
   14bcc:	10bfef44 	addi	r2,r2,-67
   14bd0:	10000726 	beq	r2,zero,14bf0 <setlocale+0x68>
   14bd4:	80800003 	ldbu	r2,0(r16)
   14bd8:	103ff526 	beq	r2,zero,14bb0 <setlocale+0x28>
   14bdc:	0005883a 	mov	r2,zero
   14be0:	003ff506 	br	14bb8 <setlocale+0x30>
   14be4:	008000b4 	movhi	r2,2
   14be8:	1086bc04 	addi	r2,r2,6896
   14bec:	f800283a 	ret
   14bf0:	80800043 	ldbu	r2,1(r16)
   14bf4:	103fee26 	beq	r2,zero,14bb0 <setlocale+0x28>
   14bf8:	003ff606 	br	14bd4 <setlocale+0x4c>

00014bfc <__localeconv_l>:
   14bfc:	20803c04 	addi	r2,r4,240
   14c00:	f800283a 	ret

00014c04 <_localeconv_r>:
   14c04:	008000b4 	movhi	r2,2
   14c08:	108a3c04 	addi	r2,r2,10480
   14c0c:	f800283a 	ret

00014c10 <localeconv>:
   14c10:	008000b4 	movhi	r2,2
   14c14:	108a3c04 	addi	r2,r2,10480
   14c18:	f800283a 	ret

00014c1c <__smakebuf_r>:
   14c1c:	2880030b 	ldhu	r2,12(r5)
   14c20:	deffe804 	addi	sp,sp,-96
   14c24:	dc001215 	stw	r16,72(sp)
   14c28:	dfc01715 	stw	ra,92(sp)
   14c2c:	dd001615 	stw	r20,88(sp)
   14c30:	dcc01515 	stw	r19,84(sp)
   14c34:	dc801415 	stw	r18,80(sp)
   14c38:	dc401315 	stw	r17,76(sp)
   14c3c:	10c0008c 	andi	r3,r2,2
   14c40:	2821883a 	mov	r16,r5
   14c44:	18000d26 	beq	r3,zero,14c7c <__smakebuf_r+0x60>
   14c48:	288010c4 	addi	r2,r5,67
   14c4c:	28800015 	stw	r2,0(r5)
   14c50:	28800415 	stw	r2,16(r5)
   14c54:	00800044 	movi	r2,1
   14c58:	28800515 	stw	r2,20(r5)
   14c5c:	dfc01717 	ldw	ra,92(sp)
   14c60:	dd001617 	ldw	r20,88(sp)
   14c64:	dcc01517 	ldw	r19,84(sp)
   14c68:	dc801417 	ldw	r18,80(sp)
   14c6c:	dc401317 	ldw	r17,76(sp)
   14c70:	dc001217 	ldw	r16,72(sp)
   14c74:	dec01804 	addi	sp,sp,96
   14c78:	f800283a 	ret
   14c7c:	2940038f 	ldh	r5,14(r5)
   14c80:	2023883a 	mov	r17,r4
   14c84:	28002816 	blt	r5,zero,14d28 <__smakebuf_r+0x10c>
   14c88:	d80d883a 	mov	r6,sp
   14c8c:	001888c0 	call	1888c <_fstat_r>
   14c90:	10002416 	blt	r2,zero,14d24 <__smakebuf_r+0x108>
   14c94:	d8800117 	ldw	r2,4(sp)
   14c98:	10bc000c 	andi	r2,r2,61440
   14c9c:	10880018 	cmpnei	r2,r2,8192
   14ca0:	1000461e 	bne	r2,zero,14dbc <__smakebuf_r+0x1a0>
   14ca4:	8140038f 	ldh	r5,14(r16)
   14ca8:	8809883a 	mov	r4,r17
   14cac:	00188ec0 	call	188ec <_isatty_r>
   14cb0:	10003e26 	beq	r2,zero,14dac <__smakebuf_r+0x190>
   14cb4:	8080030b 	ldhu	r2,12(r16)
   14cb8:	80c010c4 	addi	r3,r16,67
   14cbc:	80c00015 	stw	r3,0(r16)
   14cc0:	10800054 	ori	r2,r2,1
   14cc4:	8080030d 	sth	r2,12(r16)
   14cc8:	00800044 	movi	r2,1
   14ccc:	80c00415 	stw	r3,16(r16)
   14cd0:	80800515 	stw	r2,20(r16)
   14cd4:	04c00044 	movi	r19,1
   14cd8:	05010004 	movi	r20,1024
   14cdc:	04820004 	movi	r18,2048
   14ce0:	a00b883a 	mov	r5,r20
   14ce4:	8809883a 	mov	r4,r17
   14ce8:	000ce140 	call	ce14 <_malloc_r>
   14cec:	10001726 	beq	r2,zero,14d4c <__smakebuf_r+0x130>
   14cf0:	80c0030b 	ldhu	r3,12(r16)
   14cf4:	01000074 	movhi	r4,1
   14cf8:	210c4404 	addi	r4,r4,12560
   14cfc:	89000f15 	stw	r4,60(r17)
   14d00:	18c02014 	ori	r3,r3,128
   14d04:	80c0030d 	sth	r3,12(r16)
   14d08:	80800015 	stw	r2,0(r16)
   14d0c:	80800415 	stw	r2,16(r16)
   14d10:	85000515 	stw	r20,20(r16)
   14d14:	98001d1e 	bne	r19,zero,14d8c <__smakebuf_r+0x170>
   14d18:	90c6b03a 	or	r3,r18,r3
   14d1c:	80c0030d 	sth	r3,12(r16)
   14d20:	003fce06 	br	14c5c <__smakebuf_r+0x40>
   14d24:	8080030b 	ldhu	r2,12(r16)
   14d28:	1080200c 	andi	r2,r2,128
   14d2c:	0027883a 	mov	r19,zero
   14d30:	10001326 	beq	r2,zero,14d80 <__smakebuf_r+0x164>
   14d34:	05001004 	movi	r20,64
   14d38:	a00b883a 	mov	r5,r20
   14d3c:	8809883a 	mov	r4,r17
   14d40:	0025883a 	mov	r18,zero
   14d44:	000ce140 	call	ce14 <_malloc_r>
   14d48:	103fe91e 	bne	r2,zero,14cf0 <__smakebuf_r+0xd4>
   14d4c:	8080030b 	ldhu	r2,12(r16)
   14d50:	10c0800c 	andi	r3,r2,512
   14d54:	183fc11e 	bne	r3,zero,14c5c <__smakebuf_r+0x40>
   14d58:	00ffff04 	movi	r3,-4
   14d5c:	10c4703a 	and	r2,r2,r3
   14d60:	10800094 	ori	r2,r2,2
   14d64:	80c010c4 	addi	r3,r16,67
   14d68:	8080030d 	sth	r2,12(r16)
   14d6c:	00800044 	movi	r2,1
   14d70:	80c00015 	stw	r3,0(r16)
   14d74:	80c00415 	stw	r3,16(r16)
   14d78:	80800515 	stw	r2,20(r16)
   14d7c:	003fb706 	br	14c5c <__smakebuf_r+0x40>
   14d80:	05010004 	movi	r20,1024
   14d84:	0025883a 	mov	r18,zero
   14d88:	003fd506 	br	14ce0 <__smakebuf_r+0xc4>
   14d8c:	8140038f 	ldh	r5,14(r16)
   14d90:	8809883a 	mov	r4,r17
   14d94:	00188ec0 	call	188ec <_isatty_r>
   14d98:	80c0030b 	ldhu	r3,12(r16)
   14d9c:	103fde26 	beq	r2,zero,14d18 <__smakebuf_r+0xfc>
   14da0:	18ffff0c 	andi	r3,r3,65532
   14da4:	18c00054 	ori	r3,r3,1
   14da8:	003fdb06 	br	14d18 <__smakebuf_r+0xfc>
   14dac:	04c00044 	movi	r19,1
   14db0:	05010004 	movi	r20,1024
   14db4:	04820004 	movi	r18,2048
   14db8:	003fc906 	br	14ce0 <__smakebuf_r+0xc4>
   14dbc:	0027883a 	mov	r19,zero
   14dc0:	05010004 	movi	r20,1024
   14dc4:	04820004 	movi	r18,2048
   14dc8:	003fc506 	br	14ce0 <__smakebuf_r+0xc4>

00014dcc <__swhatbuf_r>:
   14dcc:	deffea04 	addi	sp,sp,-88
   14dd0:	dc001215 	stw	r16,72(sp)
   14dd4:	2821883a 	mov	r16,r5
   14dd8:	2940038f 	ldh	r5,14(r5)
   14ddc:	dc801415 	stw	r18,80(sp)
   14de0:	dc401315 	stw	r17,76(sp)
   14de4:	dfc01515 	stw	ra,84(sp)
   14de8:	3023883a 	mov	r17,r6
   14dec:	3825883a 	mov	r18,r7
   14df0:	28001016 	blt	r5,zero,14e34 <__swhatbuf_r+0x68>
   14df4:	d80d883a 	mov	r6,sp
   14df8:	001888c0 	call	1888c <_fstat_r>
   14dfc:	10000d16 	blt	r2,zero,14e34 <__swhatbuf_r+0x68>
   14e00:	d8c00117 	ldw	r3,4(sp)
   14e04:	00820004 	movi	r2,2048
   14e08:	18fc000c 	andi	r3,r3,61440
   14e0c:	18c80020 	cmpeqi	r3,r3,8192
   14e10:	90c00015 	stw	r3,0(r18)
   14e14:	00c10004 	movi	r3,1024
   14e18:	88c00015 	stw	r3,0(r17)
   14e1c:	dfc01517 	ldw	ra,84(sp)
   14e20:	dc801417 	ldw	r18,80(sp)
   14e24:	dc401317 	ldw	r17,76(sp)
   14e28:	dc001217 	ldw	r16,72(sp)
   14e2c:	dec01604 	addi	sp,sp,88
   14e30:	f800283a 	ret
   14e34:	8080030b 	ldhu	r2,12(r16)
   14e38:	90000015 	stw	zero,0(r18)
   14e3c:	1080200c 	andi	r2,r2,128
   14e40:	10000426 	beq	r2,zero,14e54 <__swhatbuf_r+0x88>
   14e44:	00801004 	movi	r2,64
   14e48:	88800015 	stw	r2,0(r17)
   14e4c:	0005883a 	mov	r2,zero
   14e50:	003ff206 	br	14e1c <__swhatbuf_r+0x50>
   14e54:	00810004 	movi	r2,1024
   14e58:	88800015 	stw	r2,0(r17)
   14e5c:	0005883a 	mov	r2,zero
   14e60:	003fee06 	br	14e1c <__swhatbuf_r+0x50>

00014e64 <_mbtowc_r>:
   14e64:	008000b4 	movhi	r2,2
   14e68:	108a3917 	ldw	r2,10468(r2)
   14e6c:	1000683a 	jmp	r2

00014e70 <__ascii_mbtowc>:
   14e70:	deffff04 	addi	sp,sp,-4
   14e74:	28000826 	beq	r5,zero,14e98 <__ascii_mbtowc+0x28>
   14e78:	30000926 	beq	r6,zero,14ea0 <__ascii_mbtowc+0x30>
   14e7c:	38000b26 	beq	r7,zero,14eac <__ascii_mbtowc+0x3c>
   14e80:	30800003 	ldbu	r2,0(r6)
   14e84:	28800015 	stw	r2,0(r5)
   14e88:	30800003 	ldbu	r2,0(r6)
   14e8c:	1004c03a 	cmpne	r2,r2,zero
   14e90:	dec00104 	addi	sp,sp,4
   14e94:	f800283a 	ret
   14e98:	d80b883a 	mov	r5,sp
   14e9c:	303ff71e 	bne	r6,zero,14e7c <__ascii_mbtowc+0xc>
   14ea0:	0005883a 	mov	r2,zero
   14ea4:	dec00104 	addi	sp,sp,4
   14ea8:	f800283a 	ret
   14eac:	00bfff84 	movi	r2,-2
   14eb0:	003ff706 	br	14e90 <__ascii_mbtowc+0x20>

00014eb4 <memchr>:
   14eb4:	208000cc 	andi	r2,r4,3
   14eb8:	280f883a 	mov	r7,r5
   14ebc:	10000e26 	beq	r2,zero,14ef8 <memchr+0x44>
   14ec0:	30bfffc4 	addi	r2,r6,-1
   14ec4:	30001726 	beq	r6,zero,14f24 <memchr+0x70>
   14ec8:	29803fcc 	andi	r6,r5,255
   14ecc:	00000606 	br	14ee8 <memchr+0x34>
   14ed0:	21000044 	addi	r4,r4,1
   14ed4:	20c000cc 	andi	r3,r4,3
   14ed8:	18000826 	beq	r3,zero,14efc <memchr+0x48>
   14edc:	10bfffc4 	addi	r2,r2,-1
   14ee0:	10ffffe0 	cmpeqi	r3,r2,-1
   14ee4:	18000f1e 	bne	r3,zero,14f24 <memchr+0x70>
   14ee8:	20c00003 	ldbu	r3,0(r4)
   14eec:	19bff81e 	bne	r3,r6,14ed0 <memchr+0x1c>
   14ef0:	2005883a 	mov	r2,r4
   14ef4:	f800283a 	ret
   14ef8:	3005883a 	mov	r2,r6
   14efc:	10c00128 	cmpgeui	r3,r2,4
   14f00:	18000a1e 	bne	r3,zero,14f2c <memchr+0x78>
   14f04:	10001e26 	beq	r2,zero,14f80 <memchr+0xcc>
   14f08:	2087883a 	add	r3,r4,r2
   14f0c:	39803fcc 	andi	r6,r7,255
   14f10:	2005883a 	mov	r2,r4
   14f14:	11000003 	ldbu	r4,0(r2)
   14f18:	21bff626 	beq	r4,r6,14ef4 <memchr+0x40>
   14f1c:	10800044 	addi	r2,r2,1
   14f20:	18bffc1e 	bne	r3,r2,14f14 <memchr+0x60>
   14f24:	0005883a 	mov	r2,zero
   14f28:	f800283a 	ret
   14f2c:	29403fcc 	andi	r5,r5,255
   14f30:	280c923a 	slli	r6,r5,8
   14f34:	027fbff4 	movhi	r9,65279
   14f38:	02202074 	movhi	r8,32897
   14f3c:	314ab03a 	or	r5,r6,r5
   14f40:	280c943a 	slli	r6,r5,16
   14f44:	4a7fbfc4 	addi	r9,r9,-257
   14f48:	42202004 	addi	r8,r8,-32640
   14f4c:	314cb03a 	or	r6,r6,r5
   14f50:	20c00017 	ldw	r3,0(r4)
   14f54:	30c6f03a 	xor	r3,r6,r3
   14f58:	1a4b883a 	add	r5,r3,r9
   14f5c:	00c6303a 	nor	r3,zero,r3
   14f60:	28c6703a 	and	r3,r5,r3
   14f64:	1a06703a 	and	r3,r3,r8
   14f68:	183fe71e 	bne	r3,zero,14f08 <memchr+0x54>
   14f6c:	10bfff04 	addi	r2,r2,-4
   14f70:	10c00128 	cmpgeui	r3,r2,4
   14f74:	21000104 	addi	r4,r4,4
   14f78:	183ff51e 	bne	r3,zero,14f50 <memchr+0x9c>
   14f7c:	003fe106 	br	14f04 <memchr+0x50>
   14f80:	f800283a 	ret

00014f84 <memmove>:
   14f84:	2005883a 	mov	r2,r4
   14f88:	29000a2e 	bgeu	r5,r4,14fb4 <memmove+0x30>
   14f8c:	2989883a 	add	r4,r5,r6
   14f90:	1100082e 	bgeu	r2,r4,14fb4 <memmove+0x30>
   14f94:	1187883a 	add	r3,r2,r6
   14f98:	30003e26 	beq	r6,zero,15094 <memmove+0x110>
   14f9c:	217fffc3 	ldbu	r5,-1(r4)
   14fa0:	18ffffc4 	addi	r3,r3,-1
   14fa4:	213fffc4 	addi	r4,r4,-1
   14fa8:	19400005 	stb	r5,0(r3)
   14fac:	10fffb1e 	bne	r2,r3,14f9c <memmove+0x18>
   14fb0:	f800283a 	ret
   14fb4:	30c00430 	cmpltui	r3,r6,16
   14fb8:	18000b26 	beq	r3,zero,14fe8 <memmove+0x64>
   14fbc:	1007883a 	mov	r3,r2
   14fc0:	31ffffc4 	addi	r7,r6,-1
   14fc4:	30003726 	beq	r6,zero,150a4 <memmove+0x120>
   14fc8:	39c00044 	addi	r7,r7,1
   14fcc:	29cf883a 	add	r7,r5,r7
   14fd0:	29800003 	ldbu	r6,0(r5)
   14fd4:	29400044 	addi	r5,r5,1
   14fd8:	18c00044 	addi	r3,r3,1
   14fdc:	19bfffc5 	stb	r6,-1(r3)
   14fe0:	29fffb1e 	bne	r5,r7,14fd0 <memmove+0x4c>
   14fe4:	f800283a 	ret
   14fe8:	2886b03a 	or	r3,r5,r2
   14fec:	18c000cc 	andi	r3,r3,3
   14ff0:	1800291e 	bne	r3,zero,15098 <memmove+0x114>
   14ff4:	327ffc04 	addi	r9,r6,-16
   14ff8:	4812d13a 	srli	r9,r9,4
   14ffc:	280f883a 	mov	r7,r5
   15000:	1007883a 	mov	r3,r2
   15004:	4a400044 	addi	r9,r9,1
   15008:	4812913a 	slli	r9,r9,4
   1500c:	1251883a 	add	r8,r2,r9
   15010:	39000017 	ldw	r4,0(r7)
   15014:	39c00404 	addi	r7,r7,16
   15018:	18c00404 	addi	r3,r3,16
   1501c:	193ffc15 	stw	r4,-16(r3)
   15020:	393ffd17 	ldw	r4,-12(r7)
   15024:	193ffd15 	stw	r4,-12(r3)
   15028:	393ffe17 	ldw	r4,-8(r7)
   1502c:	193ffe15 	stw	r4,-8(r3)
   15030:	393fff17 	ldw	r4,-4(r7)
   15034:	193fff15 	stw	r4,-4(r3)
   15038:	40fff51e 	bne	r8,r3,15010 <memmove+0x8c>
   1503c:	3100030c 	andi	r4,r6,12
   15040:	2a4b883a 	add	r5,r5,r9
   15044:	320003cc 	andi	r8,r6,15
   15048:	20001726 	beq	r4,zero,150a8 <memmove+0x124>
   1504c:	2813883a 	mov	r9,r5
   15050:	180f883a 	mov	r7,r3
   15054:	4a800017 	ldw	r10,0(r9)
   15058:	39c00104 	addi	r7,r7,4
   1505c:	41c9c83a 	sub	r4,r8,r7
   15060:	1909883a 	add	r4,r3,r4
   15064:	21000128 	cmpgeui	r4,r4,4
   15068:	3abfff15 	stw	r10,-4(r7)
   1506c:	4a400104 	addi	r9,r9,4
   15070:	203ff81e 	bne	r4,zero,15054 <memmove+0xd0>
   15074:	413fff04 	addi	r4,r8,-4
   15078:	2008d0ba 	srli	r4,r4,2
   1507c:	318000cc 	andi	r6,r6,3
   15080:	21000044 	addi	r4,r4,1
   15084:	200890ba 	slli	r4,r4,2
   15088:	1907883a 	add	r3,r3,r4
   1508c:	290b883a 	add	r5,r5,r4
   15090:	003fcb06 	br	14fc0 <memmove+0x3c>
   15094:	f800283a 	ret
   15098:	31ffffc4 	addi	r7,r6,-1
   1509c:	1007883a 	mov	r3,r2
   150a0:	003fc906 	br	14fc8 <memmove+0x44>
   150a4:	f800283a 	ret
   150a8:	400d883a 	mov	r6,r8
   150ac:	003fc406 	br	14fc0 <memmove+0x3c>

000150b0 <memset>:
   150b0:	20c000cc 	andi	r3,r4,3
   150b4:	2005883a 	mov	r2,r4
   150b8:	18003626 	beq	r3,zero,15194 <memset+0xe4>
   150bc:	31ffffc4 	addi	r7,r6,-1
   150c0:	30003326 	beq	r6,zero,15190 <memset+0xe0>
   150c4:	2811883a 	mov	r8,r5
   150c8:	2007883a 	mov	r3,r4
   150cc:	00000306 	br	150dc <memset+0x2c>
   150d0:	39ffffc4 	addi	r7,r7,-1
   150d4:	39bfffe0 	cmpeqi	r6,r7,-1
   150d8:	30002d1e 	bne	r6,zero,15190 <memset+0xe0>
   150dc:	18c00044 	addi	r3,r3,1
   150e0:	198000cc 	andi	r6,r3,3
   150e4:	1a3fffc5 	stb	r8,-1(r3)
   150e8:	303ff91e 	bne	r6,zero,150d0 <memset+0x20>
   150ec:	39000130 	cmpltui	r4,r7,4
   150f0:	2000221e 	bne	r4,zero,1517c <memset+0xcc>
   150f4:	29003fcc 	andi	r4,r5,255
   150f8:	200c923a 	slli	r6,r4,8
   150fc:	3a000430 	cmpltui	r8,r7,16
   15100:	3108b03a 	or	r4,r6,r4
   15104:	200c943a 	slli	r6,r4,16
   15108:	310cb03a 	or	r6,r6,r4
   1510c:	40000e1e 	bne	r8,zero,15148 <memset+0x98>
   15110:	393ffc04 	addi	r4,r7,-16
   15114:	2008d13a 	srli	r4,r4,4
   15118:	21000044 	addi	r4,r4,1
   1511c:	2008913a 	slli	r4,r4,4
   15120:	1909883a 	add	r4,r3,r4
   15124:	19800015 	stw	r6,0(r3)
   15128:	19800115 	stw	r6,4(r3)
   1512c:	19800215 	stw	r6,8(r3)
   15130:	19800315 	stw	r6,12(r3)
   15134:	18c00404 	addi	r3,r3,16
   15138:	20fffa1e 	bne	r4,r3,15124 <memset+0x74>
   1513c:	3900030c 	andi	r4,r7,12
   15140:	39c003cc 	andi	r7,r7,15
   15144:	20000d26 	beq	r4,zero,1517c <memset+0xcc>
   15148:	1811883a 	mov	r8,r3
   1514c:	42000104 	addi	r8,r8,4
   15150:	3a09c83a 	sub	r4,r7,r8
   15154:	1909883a 	add	r4,r3,r4
   15158:	21000128 	cmpgeui	r4,r4,4
   1515c:	41bfff15 	stw	r6,-4(r8)
   15160:	203ffa1e 	bne	r4,zero,1514c <memset+0x9c>
   15164:	393fff04 	addi	r4,r7,-4
   15168:	2008d0ba 	srli	r4,r4,2
   1516c:	39c000cc 	andi	r7,r7,3
   15170:	21000044 	addi	r4,r4,1
   15174:	200890ba 	slli	r4,r4,2
   15178:	1907883a 	add	r3,r3,r4
   1517c:	38000426 	beq	r7,zero,15190 <memset+0xe0>
   15180:	19cf883a 	add	r7,r3,r7
   15184:	18c00044 	addi	r3,r3,1
   15188:	197fffc5 	stb	r5,-1(r3)
   1518c:	38fffd1e 	bne	r7,r3,15184 <memset+0xd4>
   15190:	f800283a 	ret
   15194:	2007883a 	mov	r3,r4
   15198:	300f883a 	mov	r7,r6
   1519c:	003fd306 	br	150ec <memset+0x3c>

000151a0 <_Balloc>:
   151a0:	20801317 	ldw	r2,76(r4)
   151a4:	defffc04 	addi	sp,sp,-16
   151a8:	dc400115 	stw	r17,4(sp)
   151ac:	dc000015 	stw	r16,0(sp)
   151b0:	dfc00315 	stw	ra,12(sp)
   151b4:	dc800215 	stw	r18,8(sp)
   151b8:	2021883a 	mov	r16,r4
   151bc:	2823883a 	mov	r17,r5
   151c0:	10000e26 	beq	r2,zero,151fc <_Balloc+0x5c>
   151c4:	880690ba 	slli	r3,r17,2
   151c8:	10c7883a 	add	r3,r2,r3
   151cc:	18800017 	ldw	r2,0(r3)
   151d0:	10001126 	beq	r2,zero,15218 <_Balloc+0x78>
   151d4:	11000017 	ldw	r4,0(r2)
   151d8:	19000015 	stw	r4,0(r3)
   151dc:	10000415 	stw	zero,16(r2)
   151e0:	10000315 	stw	zero,12(r2)
   151e4:	dfc00317 	ldw	ra,12(sp)
   151e8:	dc800217 	ldw	r18,8(sp)
   151ec:	dc400117 	ldw	r17,4(sp)
   151f0:	dc000017 	ldw	r16,0(sp)
   151f4:	dec00404 	addi	sp,sp,16
   151f8:	f800283a 	ret
   151fc:	01800844 	movi	r6,33
   15200:	01400104 	movi	r5,4
   15204:	00183b80 	call	183b8 <_calloc_r>
   15208:	80801315 	stw	r2,76(r16)
   1520c:	103fed1e 	bne	r2,zero,151c4 <_Balloc+0x24>
   15210:	0005883a 	mov	r2,zero
   15214:	003ff306 	br	151e4 <_Balloc+0x44>
   15218:	04800044 	movi	r18,1
   1521c:	9464983a 	sll	r18,r18,r17
   15220:	01400044 	movi	r5,1
   15224:	8009883a 	mov	r4,r16
   15228:	91800144 	addi	r6,r18,5
   1522c:	300c90ba 	slli	r6,r6,2
   15230:	00183b80 	call	183b8 <_calloc_r>
   15234:	103ff626 	beq	r2,zero,15210 <_Balloc+0x70>
   15238:	14400115 	stw	r17,4(r2)
   1523c:	14800215 	stw	r18,8(r2)
   15240:	003fe606 	br	151dc <_Balloc+0x3c>

00015244 <_Bfree>:
   15244:	28000726 	beq	r5,zero,15264 <_Bfree+0x20>
   15248:	28c00117 	ldw	r3,4(r5)
   1524c:	20801317 	ldw	r2,76(r4)
   15250:	180690ba 	slli	r3,r3,2
   15254:	10c5883a 	add	r2,r2,r3
   15258:	10c00017 	ldw	r3,0(r2)
   1525c:	28c00015 	stw	r3,0(r5)
   15260:	11400015 	stw	r5,0(r2)
   15264:	f800283a 	ret

00015268 <__multadd>:
   15268:	defffa04 	addi	sp,sp,-24
   1526c:	dc400115 	stw	r17,4(sp)
   15270:	2c400417 	ldw	r17,16(r5)
   15274:	dcc00315 	stw	r19,12(sp)
   15278:	dc800215 	stw	r18,8(sp)
   1527c:	dc000015 	stw	r16,0(sp)
   15280:	dfc00515 	stw	ra,20(sp)
   15284:	dd000415 	stw	r20,16(sp)
   15288:	2825883a 	mov	r18,r5
   1528c:	2027883a 	mov	r19,r4
   15290:	3821883a 	mov	r16,r7
   15294:	2a400504 	addi	r9,r5,20
   15298:	0015883a 	mov	r10,zero
   1529c:	48c00017 	ldw	r3,0(r9)
   152a0:	4a400104 	addi	r9,r9,4
   152a4:	52800044 	addi	r10,r10,1
   152a8:	1a3fffcc 	andi	r8,r3,65535
   152ac:	4191383a 	mul	r8,r8,r6
   152b0:	180ed43a 	srli	r7,r3,16
   152b4:	4407883a 	add	r3,r8,r16
   152b8:	1810d43a 	srli	r8,r3,16
   152bc:	398f383a 	mul	r7,r7,r6
   152c0:	18ffffcc 	andi	r3,r3,65535
   152c4:	3a0f883a 	add	r7,r7,r8
   152c8:	3810943a 	slli	r8,r7,16
   152cc:	3820d43a 	srli	r16,r7,16
   152d0:	40c7883a 	add	r3,r8,r3
   152d4:	48ffff15 	stw	r3,-4(r9)
   152d8:	547ff016 	blt	r10,r17,1529c <__multadd+0x34>
   152dc:	80000826 	beq	r16,zero,15300 <__multadd+0x98>
   152e0:	90800217 	ldw	r2,8(r18)
   152e4:	88800f0e 	bge	r17,r2,15324 <__multadd+0xbc>
   152e8:	88800144 	addi	r2,r17,5
   152ec:	100490ba 	slli	r2,r2,2
   152f0:	8c400044 	addi	r17,r17,1
   152f4:	9085883a 	add	r2,r18,r2
   152f8:	14000015 	stw	r16,0(r2)
   152fc:	94400415 	stw	r17,16(r18)
   15300:	9005883a 	mov	r2,r18
   15304:	dfc00517 	ldw	ra,20(sp)
   15308:	dd000417 	ldw	r20,16(sp)
   1530c:	dcc00317 	ldw	r19,12(sp)
   15310:	dc800217 	ldw	r18,8(sp)
   15314:	dc400117 	ldw	r17,4(sp)
   15318:	dc000017 	ldw	r16,0(sp)
   1531c:	dec00604 	addi	sp,sp,24
   15320:	f800283a 	ret
   15324:	91400117 	ldw	r5,4(r18)
   15328:	9809883a 	mov	r4,r19
   1532c:	29400044 	addi	r5,r5,1
   15330:	00151a00 	call	151a0 <_Balloc>
   15334:	1029883a 	mov	r20,r2
   15338:	10001226 	beq	r2,zero,15384 <__multadd+0x11c>
   1533c:	91800417 	ldw	r6,16(r18)
   15340:	91400304 	addi	r5,r18,12
   15344:	11000304 	addi	r4,r2,12
   15348:	31800084 	addi	r6,r6,2
   1534c:	300c90ba 	slli	r6,r6,2
   15350:	000d5f40 	call	d5f4 <memcpy>
   15354:	90000926 	beq	r18,zero,1537c <__multadd+0x114>
   15358:	90c00117 	ldw	r3,4(r18)
   1535c:	98801317 	ldw	r2,76(r19)
   15360:	180690ba 	slli	r3,r3,2
   15364:	10c5883a 	add	r2,r2,r3
   15368:	10c00017 	ldw	r3,0(r2)
   1536c:	90c00015 	stw	r3,0(r18)
   15370:	14800015 	stw	r18,0(r2)
   15374:	a025883a 	mov	r18,r20
   15378:	003fdb06 	br	152e8 <__multadd+0x80>
   1537c:	a025883a 	mov	r18,r20
   15380:	003fd906 	br	152e8 <__multadd+0x80>
   15384:	01c000b4 	movhi	r7,2
   15388:	010000b4 	movhi	r4,2
   1538c:	39c65104 	addi	r7,r7,6468
   15390:	000d883a 	mov	r6,zero
   15394:	01402d44 	movi	r5,181
   15398:	2106bf04 	addi	r4,r4,6908
   1539c:	00183400 	call	18340 <__assert_func>

000153a0 <__s2b>:
   153a0:	defff904 	addi	sp,sp,-28
   153a4:	dc800215 	stw	r18,8(sp)
   153a8:	dc000015 	stw	r16,0(sp)
   153ac:	2025883a 	mov	r18,r4
   153b0:	2821883a 	mov	r16,r5
   153b4:	39000204 	addi	r4,r7,8
   153b8:	01400244 	movi	r5,9
   153bc:	dcc00315 	stw	r19,12(sp)
   153c0:	dc400115 	stw	r17,4(sp)
   153c4:	dfc00615 	stw	ra,24(sp)
   153c8:	3823883a 	mov	r17,r7
   153cc:	dd400515 	stw	r21,20(sp)
   153d0:	dd000415 	stw	r20,16(sp)
   153d4:	3027883a 	mov	r19,r6
   153d8:	00093dc0 	call	93dc <__divsi3>
   153dc:	88c00290 	cmplti	r3,r17,10
   153e0:	1800341e 	bne	r3,zero,154b4 <__s2b+0x114>
   153e4:	00c00044 	movi	r3,1
   153e8:	000b883a 	mov	r5,zero
   153ec:	18c7883a 	add	r3,r3,r3
   153f0:	29400044 	addi	r5,r5,1
   153f4:	18bffd16 	blt	r3,r2,153ec <__s2b+0x4c>
   153f8:	9009883a 	mov	r4,r18
   153fc:	00151a00 	call	151a0 <_Balloc>
   15400:	100b883a 	mov	r5,r2
   15404:	10002d26 	beq	r2,zero,154bc <__s2b+0x11c>
   15408:	d8800717 	ldw	r2,28(sp)
   1540c:	28800515 	stw	r2,20(r5)
   15410:	00800044 	movi	r2,1
   15414:	28800415 	stw	r2,16(r5)
   15418:	98800290 	cmplti	r2,r19,10
   1541c:	1000221e 	bne	r2,zero,154a8 <__s2b+0x108>
   15420:	85400244 	addi	r21,r16,9
   15424:	a829883a 	mov	r20,r21
   15428:	84e1883a 	add	r16,r16,r19
   1542c:	a1c00007 	ldb	r7,0(r20)
   15430:	01800284 	movi	r6,10
   15434:	9009883a 	mov	r4,r18
   15438:	39fff404 	addi	r7,r7,-48
   1543c:	00152680 	call	15268 <__multadd>
   15440:	a5000044 	addi	r20,r20,1
   15444:	100b883a 	mov	r5,r2
   15448:	a43ff81e 	bne	r20,r16,1542c <__s2b+0x8c>
   1544c:	9c3ffe04 	addi	r16,r19,-8
   15450:	ac21883a 	add	r16,r21,r16
   15454:	9c400a0e 	bge	r19,r17,15480 <__s2b+0xe0>
   15458:	8ce3c83a 	sub	r17,r17,r19
   1545c:	8463883a 	add	r17,r16,r17
   15460:	81c00007 	ldb	r7,0(r16)
   15464:	01800284 	movi	r6,10
   15468:	9009883a 	mov	r4,r18
   1546c:	39fff404 	addi	r7,r7,-48
   15470:	00152680 	call	15268 <__multadd>
   15474:	84000044 	addi	r16,r16,1
   15478:	100b883a 	mov	r5,r2
   1547c:	8c3ff81e 	bne	r17,r16,15460 <__s2b+0xc0>
   15480:	2805883a 	mov	r2,r5
   15484:	dfc00617 	ldw	ra,24(sp)
   15488:	dd400517 	ldw	r21,20(sp)
   1548c:	dd000417 	ldw	r20,16(sp)
   15490:	dcc00317 	ldw	r19,12(sp)
   15494:	dc800217 	ldw	r18,8(sp)
   15498:	dc400117 	ldw	r17,4(sp)
   1549c:	dc000017 	ldw	r16,0(sp)
   154a0:	dec00704 	addi	sp,sp,28
   154a4:	f800283a 	ret
   154a8:	84000284 	addi	r16,r16,10
   154ac:	04c00244 	movi	r19,9
   154b0:	003fe806 	br	15454 <__s2b+0xb4>
   154b4:	000b883a 	mov	r5,zero
   154b8:	003fcf06 	br	153f8 <__s2b+0x58>
   154bc:	01c000b4 	movhi	r7,2
   154c0:	010000b4 	movhi	r4,2
   154c4:	39c65104 	addi	r7,r7,6468
   154c8:	000d883a 	mov	r6,zero
   154cc:	01403384 	movi	r5,206
   154d0:	2106bf04 	addi	r4,r4,6908
   154d4:	00183400 	call	18340 <__assert_func>

000154d8 <__hi0bits>:
   154d8:	20bfffec 	andhi	r2,r4,65535
   154dc:	1000131e 	bne	r2,zero,1552c <__hi0bits+0x54>
   154e0:	2008943a 	slli	r4,r4,16
   154e4:	00800404 	movi	r2,16
   154e8:	20ffc02c 	andhi	r3,r4,65280
   154ec:	1800021e 	bne	r3,zero,154f8 <__hi0bits+0x20>
   154f0:	2008923a 	slli	r4,r4,8
   154f4:	10800204 	addi	r2,r2,8
   154f8:	20fc002c 	andhi	r3,r4,61440
   154fc:	1800021e 	bne	r3,zero,15508 <__hi0bits+0x30>
   15500:	2008913a 	slli	r4,r4,4
   15504:	10800104 	addi	r2,r2,4
   15508:	20f0002c 	andhi	r3,r4,49152
   1550c:	1800021e 	bne	r3,zero,15518 <__hi0bits+0x40>
   15510:	200890ba 	slli	r4,r4,2
   15514:	10800084 	addi	r2,r2,2
   15518:	20000316 	blt	r4,zero,15528 <__hi0bits+0x50>
   1551c:	2110002c 	andhi	r4,r4,16384
   15520:	10800044 	addi	r2,r2,1
   15524:	20000326 	beq	r4,zero,15534 <__hi0bits+0x5c>
   15528:	f800283a 	ret
   1552c:	0005883a 	mov	r2,zero
   15530:	003fed06 	br	154e8 <__hi0bits+0x10>
   15534:	00800804 	movi	r2,32
   15538:	f800283a 	ret

0001553c <__lo0bits>:
   1553c:	20c00017 	ldw	r3,0(r4)
   15540:	188001cc 	andi	r2,r3,7
   15544:	10000826 	beq	r2,zero,15568 <__lo0bits+0x2c>
   15548:	1880004c 	andi	r2,r3,1
   1554c:	10001f1e 	bne	r2,zero,155cc <__lo0bits+0x90>
   15550:	1880008c 	andi	r2,r3,2
   15554:	10002126 	beq	r2,zero,155dc <__lo0bits+0xa0>
   15558:	1806d07a 	srli	r3,r3,1
   1555c:	00800044 	movi	r2,1
   15560:	20c00015 	stw	r3,0(r4)
   15564:	f800283a 	ret
   15568:	18bfffcc 	andi	r2,r3,65535
   1556c:	10001426 	beq	r2,zero,155c0 <__lo0bits+0x84>
   15570:	0005883a 	mov	r2,zero
   15574:	19403fcc 	andi	r5,r3,255
   15578:	2800021e 	bne	r5,zero,15584 <__lo0bits+0x48>
   1557c:	1806d23a 	srli	r3,r3,8
   15580:	10800204 	addi	r2,r2,8
   15584:	194003cc 	andi	r5,r3,15
   15588:	2800021e 	bne	r5,zero,15594 <__lo0bits+0x58>
   1558c:	1806d13a 	srli	r3,r3,4
   15590:	10800104 	addi	r2,r2,4
   15594:	194000cc 	andi	r5,r3,3
   15598:	2800021e 	bne	r5,zero,155a4 <__lo0bits+0x68>
   1559c:	1806d0ba 	srli	r3,r3,2
   155a0:	10800084 	addi	r2,r2,2
   155a4:	1940004c 	andi	r5,r3,1
   155a8:	2800031e 	bne	r5,zero,155b8 <__lo0bits+0x7c>
   155ac:	1806d07a 	srli	r3,r3,1
   155b0:	10800044 	addi	r2,r2,1
   155b4:	18000726 	beq	r3,zero,155d4 <__lo0bits+0x98>
   155b8:	20c00015 	stw	r3,0(r4)
   155bc:	f800283a 	ret
   155c0:	1806d43a 	srli	r3,r3,16
   155c4:	00800404 	movi	r2,16
   155c8:	003fea06 	br	15574 <__lo0bits+0x38>
   155cc:	0005883a 	mov	r2,zero
   155d0:	f800283a 	ret
   155d4:	00800804 	movi	r2,32
   155d8:	f800283a 	ret
   155dc:	1806d0ba 	srli	r3,r3,2
   155e0:	00800084 	movi	r2,2
   155e4:	20c00015 	stw	r3,0(r4)
   155e8:	f800283a 	ret

000155ec <__i2b>:
   155ec:	20c01317 	ldw	r3,76(r4)
   155f0:	defffd04 	addi	sp,sp,-12
   155f4:	dc400115 	stw	r17,4(sp)
   155f8:	dc000015 	stw	r16,0(sp)
   155fc:	dfc00215 	stw	ra,8(sp)
   15600:	2021883a 	mov	r16,r4
   15604:	2823883a 	mov	r17,r5
   15608:	18000d26 	beq	r3,zero,15640 <__i2b+0x54>
   1560c:	18800117 	ldw	r2,4(r3)
   15610:	10001826 	beq	r2,zero,15674 <__i2b+0x88>
   15614:	11000017 	ldw	r4,0(r2)
   15618:	19000115 	stw	r4,4(r3)
   1561c:	00c00044 	movi	r3,1
   15620:	10000315 	stw	zero,12(r2)
   15624:	14400515 	stw	r17,20(r2)
   15628:	10c00415 	stw	r3,16(r2)
   1562c:	dfc00217 	ldw	ra,8(sp)
   15630:	dc400117 	ldw	r17,4(sp)
   15634:	dc000017 	ldw	r16,0(sp)
   15638:	dec00304 	addi	sp,sp,12
   1563c:	f800283a 	ret
   15640:	01800844 	movi	r6,33
   15644:	01400104 	movi	r5,4
   15648:	00183b80 	call	183b8 <_calloc_r>
   1564c:	80801315 	stw	r2,76(r16)
   15650:	1007883a 	mov	r3,r2
   15654:	103fed1e 	bne	r2,zero,1560c <__i2b+0x20>
   15658:	01c000b4 	movhi	r7,2
   1565c:	010000b4 	movhi	r4,2
   15660:	39c65104 	addi	r7,r7,6468
   15664:	000d883a 	mov	r6,zero
   15668:	01405004 	movi	r5,320
   1566c:	2106bf04 	addi	r4,r4,6908
   15670:	00183400 	call	18340 <__assert_func>
   15674:	01800704 	movi	r6,28
   15678:	01400044 	movi	r5,1
   1567c:	8009883a 	mov	r4,r16
   15680:	00183b80 	call	183b8 <_calloc_r>
   15684:	103ff426 	beq	r2,zero,15658 <__i2b+0x6c>
   15688:	00c00044 	movi	r3,1
   1568c:	10c00115 	stw	r3,4(r2)
   15690:	00c00084 	movi	r3,2
   15694:	10c00215 	stw	r3,8(r2)
   15698:	003fe006 	br	1561c <__i2b+0x30>

0001569c <__multiply>:
   1569c:	defff804 	addi	sp,sp,-32
   156a0:	dd400515 	stw	r21,20(sp)
   156a4:	dd000415 	stw	r20,16(sp)
   156a8:	35400417 	ldw	r21,16(r6)
   156ac:	2d000417 	ldw	r20,16(r5)
   156b0:	dd800615 	stw	r22,24(sp)
   156b4:	dcc00315 	stw	r19,12(sp)
   156b8:	dfc00715 	stw	ra,28(sp)
   156bc:	dc800215 	stw	r18,8(sp)
   156c0:	dc400115 	stw	r17,4(sp)
   156c4:	dc000015 	stw	r16,0(sp)
   156c8:	282d883a 	mov	r22,r5
   156cc:	3027883a 	mov	r19,r6
   156d0:	a5400516 	blt	r20,r21,156e8 <__multiply+0x4c>
   156d4:	a807883a 	mov	r3,r21
   156d8:	2827883a 	mov	r19,r5
   156dc:	a02b883a 	mov	r21,r20
   156e0:	302d883a 	mov	r22,r6
   156e4:	1829883a 	mov	r20,r3
   156e8:	98800217 	ldw	r2,8(r19)
   156ec:	ad23883a 	add	r17,r21,r20
   156f0:	99400117 	ldw	r5,4(r19)
   156f4:	1440010e 	bge	r2,r17,156fc <__multiply+0x60>
   156f8:	29400044 	addi	r5,r5,1
   156fc:	00151a00 	call	151a0 <_Balloc>
   15700:	1025883a 	mov	r18,r2
   15704:	10007326 	beq	r2,zero,158d4 <__multiply+0x238>
   15708:	882090ba 	slli	r16,r17,2
   1570c:	11000504 	addi	r4,r2,20
   15710:	2421883a 	add	r16,r4,r16
   15714:	2400082e 	bgeu	r4,r16,15738 <__multiply+0x9c>
   15718:	808dc83a 	sub	r6,r16,r2
   1571c:	31bffac4 	addi	r6,r6,-21
   15720:	300cd0ba 	srli	r6,r6,2
   15724:	000b883a 	mov	r5,zero
   15728:	31800044 	addi	r6,r6,1
   1572c:	300c90ba 	slli	r6,r6,2
   15730:	00150b00 	call	150b0 <memset>
   15734:	1009883a 	mov	r4,r2
   15738:	a01290ba 	slli	r9,r20,2
   1573c:	a80e90ba 	slli	r7,r21,2
   15740:	b0800504 	addi	r2,r22,20
   15744:	9a800504 	addi	r10,r19,20
   15748:	1253883a 	add	r9,r2,r9
   1574c:	51cf883a 	add	r7,r10,r7
   15750:	12404b2e 	bgeu	r2,r9,15880 <__multiply+0x1e4>
   15754:	98c00544 	addi	r3,r19,21
   15758:	38c05c36 	bltu	r7,r3,158cc <__multiply+0x230>
   1575c:	3cd1c83a 	sub	r8,r7,r19
   15760:	423ffac4 	addi	r8,r8,-21
   15764:	4010d0ba 	srli	r8,r8,2
   15768:	42000044 	addi	r8,r8,1
   1576c:	401090ba 	slli	r8,r8,2
   15770:	00000506 	br	15788 <__multiply+0xec>
   15774:	6018d43a 	srli	r12,r12,16
   15778:	6000231e 	bne	r12,zero,15808 <__multiply+0x16c>
   1577c:	10800104 	addi	r2,r2,4
   15780:	21000104 	addi	r4,r4,4
   15784:	12403e2e 	bgeu	r2,r9,15880 <__multiply+0x1e4>
   15788:	13000017 	ldw	r12,0(r2)
   1578c:	63bfffcc 	andi	r14,r12,65535
   15790:	703ff826 	beq	r14,zero,15774 <__multiply+0xd8>
   15794:	201b883a 	mov	r13,r4
   15798:	5019883a 	mov	r12,r10
   1579c:	001f883a 	mov	r15,zero
   157a0:	61400017 	ldw	r5,0(r12)
   157a4:	6ac00017 	ldw	r11,0(r13)
   157a8:	6b400104 	addi	r13,r13,4
   157ac:	29bfffcc 	andi	r6,r5,65535
   157b0:	338d383a 	mul	r6,r6,r14
   157b4:	2806d43a 	srli	r3,r5,16
   157b8:	597fffcc 	andi	r5,r11,65535
   157bc:	314d883a 	add	r6,r6,r5
   157c0:	33cd883a 	add	r6,r6,r15
   157c4:	1b87383a 	mul	r3,r3,r14
   157c8:	5816d43a 	srli	r11,r11,16
   157cc:	300ad43a 	srli	r5,r6,16
   157d0:	31bfffcc 	andi	r6,r6,65535
   157d4:	1ac7883a 	add	r3,r3,r11
   157d8:	1947883a 	add	r3,r3,r5
   157dc:	180a943a 	slli	r5,r3,16
   157e0:	63000104 	addi	r12,r12,4
   157e4:	181ed43a 	srli	r15,r3,16
   157e8:	298cb03a 	or	r6,r5,r6
   157ec:	69bfff15 	stw	r6,-4(r13)
   157f0:	61ffeb36 	bltu	r12,r7,157a0 <__multiply+0x104>
   157f4:	2207883a 	add	r3,r4,r8
   157f8:	1bc00015 	stw	r15,0(r3)
   157fc:	13000017 	ldw	r12,0(r2)
   15800:	6018d43a 	srli	r12,r12,16
   15804:	603fdd26 	beq	r12,zero,1577c <__multiply+0xe0>
   15808:	20c00017 	ldw	r3,0(r4)
   1580c:	201b883a 	mov	r13,r4
   15810:	5017883a 	mov	r11,r10
   15814:	181d883a 	mov	r14,r3
   15818:	001f883a 	mov	r15,zero
   1581c:	5980000b 	ldhu	r6,0(r11)
   15820:	703ed43a 	srli	ra,r14,16
   15824:	197fffcc 	andi	r5,r3,65535
   15828:	3307383a 	mul	r3,r6,r12
   1582c:	5ac00104 	addi	r11,r11,4
   15830:	6b800117 	ldw	r14,4(r13)
   15834:	1fc7883a 	add	r3,r3,ra
   15838:	1bc7883a 	add	r3,r3,r15
   1583c:	181e943a 	slli	r15,r3,16
   15840:	180cd43a 	srli	r6,r3,16
   15844:	77ffffcc 	andi	ra,r14,65535
   15848:	794ab03a 	or	r5,r15,r5
   1584c:	69400015 	stw	r5,0(r13)
   15850:	58ffff8b 	ldhu	r3,-2(r11)
   15854:	6b400104 	addi	r13,r13,4
   15858:	1b07383a 	mul	r3,r3,r12
   1585c:	1fc7883a 	add	r3,r3,ra
   15860:	1987883a 	add	r3,r3,r6
   15864:	181ed43a 	srli	r15,r3,16
   15868:	59ffec36 	bltu	r11,r7,1581c <__multiply+0x180>
   1586c:	220b883a 	add	r5,r4,r8
   15870:	28c00015 	stw	r3,0(r5)
   15874:	10800104 	addi	r2,r2,4
   15878:	21000104 	addi	r4,r4,4
   1587c:	127fc236 	bltu	r2,r9,15788 <__multiply+0xec>
   15880:	04400316 	blt	zero,r17,15890 <__multiply+0x1f4>
   15884:	00000506 	br	1589c <__multiply+0x200>
   15888:	8c7fffc4 	addi	r17,r17,-1
   1588c:	88000326 	beq	r17,zero,1589c <__multiply+0x200>
   15890:	80bfff17 	ldw	r2,-4(r16)
   15894:	843fff04 	addi	r16,r16,-4
   15898:	103ffb26 	beq	r2,zero,15888 <__multiply+0x1ec>
   1589c:	9005883a 	mov	r2,r18
   158a0:	94400415 	stw	r17,16(r18)
   158a4:	dfc00717 	ldw	ra,28(sp)
   158a8:	dd800617 	ldw	r22,24(sp)
   158ac:	dd400517 	ldw	r21,20(sp)
   158b0:	dd000417 	ldw	r20,16(sp)
   158b4:	dcc00317 	ldw	r19,12(sp)
   158b8:	dc800217 	ldw	r18,8(sp)
   158bc:	dc400117 	ldw	r17,4(sp)
   158c0:	dc000017 	ldw	r16,0(sp)
   158c4:	dec00804 	addi	sp,sp,32
   158c8:	f800283a 	ret
   158cc:	02000104 	movi	r8,4
   158d0:	003fad06 	br	15788 <__multiply+0xec>
   158d4:	01c000b4 	movhi	r7,2
   158d8:	010000b4 	movhi	r4,2
   158dc:	39c65104 	addi	r7,r7,6468
   158e0:	000d883a 	mov	r6,zero
   158e4:	01405744 	movi	r5,349
   158e8:	2106bf04 	addi	r4,r4,6908
   158ec:	00183400 	call	18340 <__assert_func>

000158f0 <__pow5mult>:
   158f0:	defffb04 	addi	sp,sp,-20
   158f4:	dcc00315 	stw	r19,12(sp)
   158f8:	dc000015 	stw	r16,0(sp)
   158fc:	dfc00415 	stw	ra,16(sp)
   15900:	dc800215 	stw	r18,8(sp)
   15904:	dc400115 	stw	r17,4(sp)
   15908:	308000cc 	andi	r2,r6,3
   1590c:	3021883a 	mov	r16,r6
   15910:	2027883a 	mov	r19,r4
   15914:	10002d1e 	bne	r2,zero,159cc <__pow5mult+0xdc>
   15918:	2825883a 	mov	r18,r5
   1591c:	8021d0ba 	srai	r16,r16,2
   15920:	80001926 	beq	r16,zero,15988 <__pow5mult+0x98>
   15924:	9c401217 	ldw	r17,72(r19)
   15928:	8800061e 	bne	r17,zero,15944 <__pow5mult+0x54>
   1592c:	00002f06 	br	159ec <__pow5mult+0xfc>
   15930:	8021d07a 	srai	r16,r16,1
   15934:	80001426 	beq	r16,zero,15988 <__pow5mult+0x98>
   15938:	88800017 	ldw	r2,0(r17)
   1593c:	10001a26 	beq	r2,zero,159a8 <__pow5mult+0xb8>
   15940:	1023883a 	mov	r17,r2
   15944:	8080004c 	andi	r2,r16,1
   15948:	103ff926 	beq	r2,zero,15930 <__pow5mult+0x40>
   1594c:	880d883a 	mov	r6,r17
   15950:	900b883a 	mov	r5,r18
   15954:	9809883a 	mov	r4,r19
   15958:	001569c0 	call	1569c <__multiply>
   1595c:	90001926 	beq	r18,zero,159c4 <__pow5mult+0xd4>
   15960:	91000117 	ldw	r4,4(r18)
   15964:	98c01317 	ldw	r3,76(r19)
   15968:	8021d07a 	srai	r16,r16,1
   1596c:	200890ba 	slli	r4,r4,2
   15970:	1907883a 	add	r3,r3,r4
   15974:	19000017 	ldw	r4,0(r3)
   15978:	91000015 	stw	r4,0(r18)
   1597c:	1c800015 	stw	r18,0(r3)
   15980:	1025883a 	mov	r18,r2
   15984:	803fec1e 	bne	r16,zero,15938 <__pow5mult+0x48>
   15988:	9005883a 	mov	r2,r18
   1598c:	dfc00417 	ldw	ra,16(sp)
   15990:	dcc00317 	ldw	r19,12(sp)
   15994:	dc800217 	ldw	r18,8(sp)
   15998:	dc400117 	ldw	r17,4(sp)
   1599c:	dc000017 	ldw	r16,0(sp)
   159a0:	dec00504 	addi	sp,sp,20
   159a4:	f800283a 	ret
   159a8:	880d883a 	mov	r6,r17
   159ac:	880b883a 	mov	r5,r17
   159b0:	9809883a 	mov	r4,r19
   159b4:	001569c0 	call	1569c <__multiply>
   159b8:	88800015 	stw	r2,0(r17)
   159bc:	10000015 	stw	zero,0(r2)
   159c0:	003fdf06 	br	15940 <__pow5mult+0x50>
   159c4:	1025883a 	mov	r18,r2
   159c8:	003fd906 	br	15930 <__pow5mult+0x40>
   159cc:	100490ba 	slli	r2,r2,2
   159d0:	00c000b4 	movhi	r3,2
   159d4:	000f883a 	mov	r7,zero
   159d8:	10c7883a 	add	r3,r2,r3
   159dc:	1986ce17 	ldw	r6,6968(r3)
   159e0:	00152680 	call	15268 <__multadd>
   159e4:	1025883a 	mov	r18,r2
   159e8:	003fcc06 	br	1591c <__pow5mult+0x2c>
   159ec:	01400044 	movi	r5,1
   159f0:	9809883a 	mov	r4,r19
   159f4:	00151a00 	call	151a0 <_Balloc>
   159f8:	1023883a 	mov	r17,r2
   159fc:	10000726 	beq	r2,zero,15a1c <__pow5mult+0x12c>
   15a00:	00809c44 	movi	r2,625
   15a04:	88800515 	stw	r2,20(r17)
   15a08:	00800044 	movi	r2,1
   15a0c:	88800415 	stw	r2,16(r17)
   15a10:	9c401215 	stw	r17,72(r19)
   15a14:	88000015 	stw	zero,0(r17)
   15a18:	003fca06 	br	15944 <__pow5mult+0x54>
   15a1c:	01c000b4 	movhi	r7,2
   15a20:	010000b4 	movhi	r4,2
   15a24:	39c65104 	addi	r7,r7,6468
   15a28:	000d883a 	mov	r6,zero
   15a2c:	01405004 	movi	r5,320
   15a30:	2106bf04 	addi	r4,r4,6908
   15a34:	00183400 	call	18340 <__assert_func>

00015a38 <__lshift>:
   15a38:	defff804 	addi	sp,sp,-32
   15a3c:	dd800615 	stw	r22,24(sp)
   15a40:	dc000015 	stw	r16,0(sp)
   15a44:	302dd17a 	srai	r22,r6,5
   15a48:	2c000417 	ldw	r16,16(r5)
   15a4c:	28800217 	ldw	r2,8(r5)
   15a50:	dd000415 	stw	r20,16(sp)
   15a54:	b421883a 	add	r16,r22,r16
   15a58:	dcc00315 	stw	r19,12(sp)
   15a5c:	dc800215 	stw	r18,8(sp)
   15a60:	dc400115 	stw	r17,4(sp)
   15a64:	dfc00715 	stw	ra,28(sp)
   15a68:	dd400515 	stw	r21,20(sp)
   15a6c:	85000044 	addi	r20,r16,1
   15a70:	2827883a 	mov	r19,r5
   15a74:	3025883a 	mov	r18,r6
   15a78:	29400117 	ldw	r5,4(r5)
   15a7c:	2023883a 	mov	r17,r4
   15a80:	1500030e 	bge	r2,r20,15a90 <__lshift+0x58>
   15a84:	1085883a 	add	r2,r2,r2
   15a88:	29400044 	addi	r5,r5,1
   15a8c:	153ffd16 	blt	r2,r20,15a84 <__lshift+0x4c>
   15a90:	8809883a 	mov	r4,r17
   15a94:	00151a00 	call	151a0 <_Balloc>
   15a98:	102b883a 	mov	r21,r2
   15a9c:	10004126 	beq	r2,zero,15ba4 <__lshift+0x16c>
   15aa0:	11000504 	addi	r4,r2,20
   15aa4:	0580050e 	bge	zero,r22,15abc <__lshift+0x84>
   15aa8:	b02c90ba 	slli	r22,r22,2
   15aac:	000b883a 	mov	r5,zero
   15ab0:	b00d883a 	mov	r6,r22
   15ab4:	00150b00 	call	150b0 <memset>
   15ab8:	1589883a 	add	r4,r2,r22
   15abc:	9a000417 	ldw	r8,16(r19)
   15ac0:	98c00504 	addi	r3,r19,20
   15ac4:	948007cc 	andi	r18,r18,31
   15ac8:	401090ba 	slli	r8,r8,2
   15acc:	1a11883a 	add	r8,r3,r8
   15ad0:	90002c26 	beq	r18,zero,15b84 <__lshift+0x14c>
   15ad4:	01400804 	movi	r5,32
   15ad8:	2c8bc83a 	sub	r5,r5,r18
   15adc:	2005883a 	mov	r2,r4
   15ae0:	000f883a 	mov	r7,zero
   15ae4:	19800017 	ldw	r6,0(r3)
   15ae8:	10800104 	addi	r2,r2,4
   15aec:	18c00104 	addi	r3,r3,4
   15af0:	348c983a 	sll	r6,r6,r18
   15af4:	31ccb03a 	or	r6,r6,r7
   15af8:	11bfff15 	stw	r6,-4(r2)
   15afc:	19bfff17 	ldw	r6,-4(r3)
   15b00:	314ed83a 	srl	r7,r6,r5
   15b04:	1a3ff736 	bltu	r3,r8,15ae4 <__lshift+0xac>
   15b08:	98800544 	addi	r2,r19,21
   15b0c:	40802336 	bltu	r8,r2,15b9c <__lshift+0x164>
   15b10:	44c7c83a 	sub	r3,r8,r19
   15b14:	18fffac4 	addi	r3,r3,-21
   15b18:	1806d0ba 	srli	r3,r3,2
   15b1c:	18c00044 	addi	r3,r3,1
   15b20:	180690ba 	slli	r3,r3,2
   15b24:	20c9883a 	add	r4,r4,r3
   15b28:	21c00015 	stw	r7,0(r4)
   15b2c:	38000126 	beq	r7,zero,15b34 <__lshift+0xfc>
   15b30:	a021883a 	mov	r16,r20
   15b34:	ac000415 	stw	r16,16(r21)
   15b38:	98000726 	beq	r19,zero,15b58 <__lshift+0x120>
   15b3c:	98c00117 	ldw	r3,4(r19)
   15b40:	88801317 	ldw	r2,76(r17)
   15b44:	180690ba 	slli	r3,r3,2
   15b48:	10c5883a 	add	r2,r2,r3
   15b4c:	10c00017 	ldw	r3,0(r2)
   15b50:	98c00015 	stw	r3,0(r19)
   15b54:	14c00015 	stw	r19,0(r2)
   15b58:	a805883a 	mov	r2,r21
   15b5c:	dfc00717 	ldw	ra,28(sp)
   15b60:	dd800617 	ldw	r22,24(sp)
   15b64:	dd400517 	ldw	r21,20(sp)
   15b68:	dd000417 	ldw	r20,16(sp)
   15b6c:	dcc00317 	ldw	r19,12(sp)
   15b70:	dc800217 	ldw	r18,8(sp)
   15b74:	dc400117 	ldw	r17,4(sp)
   15b78:	dc000017 	ldw	r16,0(sp)
   15b7c:	dec00804 	addi	sp,sp,32
   15b80:	f800283a 	ret
   15b84:	18800017 	ldw	r2,0(r3)
   15b88:	18c00104 	addi	r3,r3,4
   15b8c:	21000104 	addi	r4,r4,4
   15b90:	20bfff15 	stw	r2,-4(r4)
   15b94:	1a3ffb36 	bltu	r3,r8,15b84 <__lshift+0x14c>
   15b98:	003fe606 	br	15b34 <__lshift+0xfc>
   15b9c:	00c00104 	movi	r3,4
   15ba0:	003fe006 	br	15b24 <__lshift+0xec>
   15ba4:	01c000b4 	movhi	r7,2
   15ba8:	010000b4 	movhi	r4,2
   15bac:	39c65104 	addi	r7,r7,6468
   15bb0:	000d883a 	mov	r6,zero
   15bb4:	01407644 	movi	r5,473
   15bb8:	2106bf04 	addi	r4,r4,6908
   15bbc:	00183400 	call	18340 <__assert_func>

00015bc0 <__mcmp>:
   15bc0:	21800417 	ldw	r6,16(r4)
   15bc4:	28c00417 	ldw	r3,16(r5)
   15bc8:	30c5c83a 	sub	r2,r6,r3
   15bcc:	30c00e1e 	bne	r6,r3,15c08 <__mcmp+0x48>
   15bd0:	180690ba 	slli	r3,r3,2
   15bd4:	21c00504 	addi	r7,r4,20
   15bd8:	29400504 	addi	r5,r5,20
   15bdc:	38c9883a 	add	r4,r7,r3
   15be0:	28c7883a 	add	r3,r5,r3
   15be4:	00000106 	br	15bec <__mcmp+0x2c>
   15be8:	3900082e 	bgeu	r7,r4,15c0c <__mcmp+0x4c>
   15bec:	21bfff17 	ldw	r6,-4(r4)
   15bf0:	197fff17 	ldw	r5,-4(r3)
   15bf4:	213fff04 	addi	r4,r4,-4
   15bf8:	18ffff04 	addi	r3,r3,-4
   15bfc:	317ffa26 	beq	r6,r5,15be8 <__mcmp+0x28>
   15c00:	3140032e 	bgeu	r6,r5,15c10 <__mcmp+0x50>
   15c04:	00bfffc4 	movi	r2,-1
   15c08:	f800283a 	ret
   15c0c:	f800283a 	ret
   15c10:	00800044 	movi	r2,1
   15c14:	f800283a 	ret

00015c18 <__mdiff>:
   15c18:	28800417 	ldw	r2,16(r5)
   15c1c:	30c00417 	ldw	r3,16(r6)
   15c20:	defffc04 	addi	sp,sp,-16
   15c24:	dc800215 	stw	r18,8(sp)
   15c28:	dc400115 	stw	r17,4(sp)
   15c2c:	dc000015 	stw	r16,0(sp)
   15c30:	dfc00315 	stw	ra,12(sp)
   15c34:	2823883a 	mov	r17,r5
   15c38:	3021883a 	mov	r16,r6
   15c3c:	10e5c83a 	sub	r18,r2,r3
   15c40:	10c0641e 	bne	r2,r3,15dd4 <__mdiff+0x1bc>
   15c44:	180c90ba 	slli	r6,r3,2
   15c48:	29400504 	addi	r5,r5,20
   15c4c:	80c00504 	addi	r3,r16,20
   15c50:	2985883a 	add	r2,r5,r6
   15c54:	1987883a 	add	r3,r3,r6
   15c58:	00000106 	br	15c60 <__mdiff+0x48>
   15c5c:	2880642e 	bgeu	r5,r2,15df0 <__mdiff+0x1d8>
   15c60:	11bfff17 	ldw	r6,-4(r2)
   15c64:	19ffff17 	ldw	r7,-4(r3)
   15c68:	10bfff04 	addi	r2,r2,-4
   15c6c:	18ffff04 	addi	r3,r3,-4
   15c70:	31fffa26 	beq	r6,r7,15c5c <__mdiff+0x44>
   15c74:	31c05236 	bltu	r6,r7,15dc0 <__mdiff+0x1a8>
   15c78:	89400117 	ldw	r5,4(r17)
   15c7c:	00151a00 	call	151a0 <_Balloc>
   15c80:	10006226 	beq	r2,zero,15e0c <__mdiff+0x1f4>
   15c84:	8a400417 	ldw	r9,16(r17)
   15c88:	83000417 	ldw	r12,16(r16)
   15c8c:	8ac00504 	addi	r11,r17,20
   15c90:	481090ba 	slli	r8,r9,2
   15c94:	601890ba 	slli	r12,r12,2
   15c98:	81800504 	addi	r6,r16,20
   15c9c:	13400504 	addi	r13,r2,20
   15ca0:	14800315 	stw	r18,12(r2)
   15ca4:	5a11883a 	add	r8,r11,r8
   15ca8:	3319883a 	add	r12,r6,r12
   15cac:	681d883a 	mov	r14,r13
   15cb0:	5815883a 	mov	r10,r11
   15cb4:	0007883a 	mov	r3,zero
   15cb8:	51000017 	ldw	r4,0(r10)
   15cbc:	31c00017 	ldw	r7,0(r6)
   15cc0:	73800104 	addi	r14,r14,4
   15cc4:	217fffcc 	andi	r5,r4,65535
   15cc8:	28cb883a 	add	r5,r5,r3
   15ccc:	38ffffcc 	andi	r3,r7,65535
   15cd0:	28cbc83a 	sub	r5,r5,r3
   15cd4:	380ed43a 	srli	r7,r7,16
   15cd8:	2006d43a 	srli	r3,r4,16
   15cdc:	2809d43a 	srai	r4,r5,16
   15ce0:	297fffcc 	andi	r5,r5,65535
   15ce4:	19c7c83a 	sub	r3,r3,r7
   15ce8:	1907883a 	add	r3,r3,r4
   15cec:	1808943a 	slli	r4,r3,16
   15cf0:	31800104 	addi	r6,r6,4
   15cf4:	1807d43a 	srai	r3,r3,16
   15cf8:	214ab03a 	or	r5,r4,r5
   15cfc:	717fff15 	stw	r5,-4(r14)
   15d00:	52800104 	addi	r10,r10,4
   15d04:	333fec36 	bltu	r6,r12,15cb8 <__mdiff+0xa0>
   15d08:	640fc83a 	sub	r7,r12,r16
   15d0c:	39fffac4 	addi	r7,r7,-21
   15d10:	84000544 	addi	r16,r16,21
   15d14:	380ed0ba 	srli	r7,r7,2
   15d18:	64003336 	bltu	r12,r16,15de8 <__mdiff+0x1d0>
   15d1c:	380890ba 	slli	r4,r7,2
   15d20:	6909883a 	add	r4,r13,r4
   15d24:	64002e36 	bltu	r12,r16,15de0 <__mdiff+0x1c8>
   15d28:	39800044 	addi	r6,r7,1
   15d2c:	300c90ba 	slli	r6,r6,2
   15d30:	5997883a 	add	r11,r11,r6
   15d34:	699b883a 	add	r13,r13,r6
   15d38:	5a00152e 	bgeu	r11,r8,15d90 <__mdiff+0x178>
   15d3c:	680f883a 	mov	r7,r13
   15d40:	580d883a 	mov	r6,r11
   15d44:	31000017 	ldw	r4,0(r6)
   15d48:	39c00104 	addi	r7,r7,4
   15d4c:	31800104 	addi	r6,r6,4
   15d50:	217fffcc 	andi	r5,r4,65535
   15d54:	28cb883a 	add	r5,r5,r3
   15d58:	2815d43a 	srai	r10,r5,16
   15d5c:	2006d43a 	srli	r3,r4,16
   15d60:	297fffcc 	andi	r5,r5,65535
   15d64:	1a87883a 	add	r3,r3,r10
   15d68:	1814943a 	slli	r10,r3,16
   15d6c:	1807d43a 	srai	r3,r3,16
   15d70:	514ab03a 	or	r5,r10,r5
   15d74:	397fff15 	stw	r5,-4(r7)
   15d78:	323ff236 	bltu	r6,r8,15d44 <__mdiff+0x12c>
   15d7c:	413fffc4 	addi	r4,r8,-1
   15d80:	22c9c83a 	sub	r4,r4,r11
   15d84:	2008d0ba 	srli	r4,r4,2
   15d88:	200890ba 	slli	r4,r4,2
   15d8c:	6909883a 	add	r4,r13,r4
   15d90:	2800041e 	bne	r5,zero,15da4 <__mdiff+0x18c>
   15d94:	20ffff17 	ldw	r3,-4(r4)
   15d98:	4a7fffc4 	addi	r9,r9,-1
   15d9c:	213fff04 	addi	r4,r4,-4
   15da0:	183ffc26 	beq	r3,zero,15d94 <__mdiff+0x17c>
   15da4:	12400415 	stw	r9,16(r2)
   15da8:	dfc00317 	ldw	ra,12(sp)
   15dac:	dc800217 	ldw	r18,8(sp)
   15db0:	dc400117 	ldw	r17,4(sp)
   15db4:	dc000017 	ldw	r16,0(sp)
   15db8:	dec00404 	addi	sp,sp,16
   15dbc:	f800283a 	ret
   15dc0:	8805883a 	mov	r2,r17
   15dc4:	04800044 	movi	r18,1
   15dc8:	8023883a 	mov	r17,r16
   15dcc:	1021883a 	mov	r16,r2
   15dd0:	003fa906 	br	15c78 <__mdiff+0x60>
   15dd4:	903ffa16 	blt	r18,zero,15dc0 <__mdiff+0x1a8>
   15dd8:	0025883a 	mov	r18,zero
   15ddc:	003fa606 	br	15c78 <__mdiff+0x60>
   15de0:	01800104 	movi	r6,4
   15de4:	003fd206 	br	15d30 <__mdiff+0x118>
   15de8:	0009883a 	mov	r4,zero
   15dec:	003fcc06 	br	15d20 <__mdiff+0x108>
   15df0:	000b883a 	mov	r5,zero
   15df4:	00151a00 	call	151a0 <_Balloc>
   15df8:	10000b26 	beq	r2,zero,15e28 <__mdiff+0x210>
   15dfc:	00c00044 	movi	r3,1
   15e00:	10c00415 	stw	r3,16(r2)
   15e04:	10000515 	stw	zero,20(r2)
   15e08:	003fe706 	br	15da8 <__mdiff+0x190>
   15e0c:	01c000b4 	movhi	r7,2
   15e10:	010000b4 	movhi	r4,2
   15e14:	39c65104 	addi	r7,r7,6468
   15e18:	000d883a 	mov	r6,zero
   15e1c:	01409004 	movi	r5,576
   15e20:	2106bf04 	addi	r4,r4,6908
   15e24:	00183400 	call	18340 <__assert_func>
   15e28:	01c000b4 	movhi	r7,2
   15e2c:	010000b4 	movhi	r4,2
   15e30:	39c65104 	addi	r7,r7,6468
   15e34:	000d883a 	mov	r6,zero
   15e38:	01408c84 	movi	r5,562
   15e3c:	2106bf04 	addi	r4,r4,6908
   15e40:	00183400 	call	18340 <__assert_func>

00015e44 <__ulp>:
   15e44:	28dffc2c 	andhi	r3,r5,32752
   15e48:	017f3034 	movhi	r5,64704
   15e4c:	1947883a 	add	r3,r3,r5
   15e50:	00c0020e 	bge	zero,r3,15e5c <__ulp+0x18>
   15e54:	0005883a 	mov	r2,zero
   15e58:	f800283a 	ret
   15e5c:	00c7c83a 	sub	r3,zero,r3
   15e60:	1807d53a 	srai	r3,r3,20
   15e64:	18800508 	cmpgei	r2,r3,20
   15e68:	1000041e 	bne	r2,zero,15e7c <__ulp+0x38>
   15e6c:	00800234 	movhi	r2,8
   15e70:	10c7d83a 	sra	r3,r2,r3
   15e74:	0005883a 	mov	r2,zero
   15e78:	f800283a 	ret
   15e7c:	193ffb04 	addi	r4,r3,-20
   15e80:	208007c8 	cmpgei	r2,r4,31
   15e84:	0007883a 	mov	r3,zero
   15e88:	1000031e 	bne	r2,zero,15e98 <__ulp+0x54>
   15e8c:	00a00034 	movhi	r2,32768
   15e90:	1104d83a 	srl	r2,r2,r4
   15e94:	f800283a 	ret
   15e98:	00800044 	movi	r2,1
   15e9c:	f800283a 	ret

00015ea0 <__b2d>:
   15ea0:	defffa04 	addi	sp,sp,-24
   15ea4:	dc400115 	stw	r17,4(sp)
   15ea8:	24400417 	ldw	r17,16(r4)
   15eac:	dc000015 	stw	r16,0(sp)
   15eb0:	24000504 	addi	r16,r4,20
   15eb4:	882290ba 	slli	r17,r17,2
   15eb8:	dc800215 	stw	r18,8(sp)
   15ebc:	dd000415 	stw	r20,16(sp)
   15ec0:	8463883a 	add	r17,r16,r17
   15ec4:	8cbfff17 	ldw	r18,-4(r17)
   15ec8:	dcc00315 	stw	r19,12(sp)
   15ecc:	dfc00515 	stw	ra,20(sp)
   15ed0:	9009883a 	mov	r4,r18
   15ed4:	2827883a 	mov	r19,r5
   15ed8:	00154d80 	call	154d8 <__hi0bits>
   15edc:	00c00804 	movi	r3,32
   15ee0:	1889c83a 	sub	r4,r3,r2
   15ee4:	99000015 	stw	r4,0(r19)
   15ee8:	110002c8 	cmpgei	r4,r2,11
   15eec:	8d3fff04 	addi	r20,r17,-4
   15ef0:	20002026 	beq	r4,zero,15f74 <__b2d+0xd4>
   15ef4:	10bffd44 	addi	r2,r2,-11
   15ef8:	85000e2e 	bgeu	r16,r20,15f34 <__b2d+0x94>
   15efc:	897ffe17 	ldw	r5,-8(r17)
   15f00:	10001226 	beq	r2,zero,15f4c <__b2d+0xac>
   15f04:	1889c83a 	sub	r4,r3,r2
   15f08:	90a4983a 	sll	r18,r18,r2
   15f0c:	2906d83a 	srl	r3,r5,r4
   15f10:	89bffe04 	addi	r6,r17,-8
   15f14:	2884983a 	sll	r2,r5,r2
   15f18:	90e4b03a 	or	r18,r18,r3
   15f1c:	90cffc34 	orhi	r3,r18,16368
   15f20:	81800c2e 	bgeu	r16,r6,15f54 <__b2d+0xb4>
   15f24:	897ffd17 	ldw	r5,-12(r17)
   15f28:	2908d83a 	srl	r4,r5,r4
   15f2c:	1104b03a 	or	r2,r2,r4
   15f30:	00000806 	br	15f54 <__b2d+0xb4>
   15f34:	10000426 	beq	r2,zero,15f48 <__b2d+0xa8>
   15f38:	90a4983a 	sll	r18,r18,r2
   15f3c:	0005883a 	mov	r2,zero
   15f40:	90cffc34 	orhi	r3,r18,16368
   15f44:	00000306 	br	15f54 <__b2d+0xb4>
   15f48:	000b883a 	mov	r5,zero
   15f4c:	90cffc34 	orhi	r3,r18,16368
   15f50:	2805883a 	mov	r2,r5
   15f54:	dfc00517 	ldw	ra,20(sp)
   15f58:	dd000417 	ldw	r20,16(sp)
   15f5c:	dcc00317 	ldw	r19,12(sp)
   15f60:	dc800217 	ldw	r18,8(sp)
   15f64:	dc400117 	ldw	r17,4(sp)
   15f68:	dc000017 	ldw	r16,0(sp)
   15f6c:	dec00604 	addi	sp,sp,24
   15f70:	f800283a 	ret
   15f74:	014002c4 	movi	r5,11
   15f78:	2889c83a 	sub	r4,r5,r2
   15f7c:	9106d83a 	srl	r3,r18,r4
   15f80:	18cffc34 	orhi	r3,r3,16368
   15f84:	85000536 	bltu	r16,r20,15f9c <__b2d+0xfc>
   15f88:	000b883a 	mov	r5,zero
   15f8c:	10800544 	addi	r2,r2,21
   15f90:	9084983a 	sll	r2,r18,r2
   15f94:	1144b03a 	or	r2,r2,r5
   15f98:	003fee06 	br	15f54 <__b2d+0xb4>
   15f9c:	897ffe17 	ldw	r5,-8(r17)
   15fa0:	290ad83a 	srl	r5,r5,r4
   15fa4:	003ff906 	br	15f8c <__b2d+0xec>

00015fa8 <__d2b>:
   15fa8:	defff804 	addi	sp,sp,-32
   15fac:	dd000615 	stw	r20,24(sp)
   15fb0:	2829883a 	mov	r20,r5
   15fb4:	01400044 	movi	r5,1
   15fb8:	dcc00515 	stw	r19,20(sp)
   15fbc:	dc000215 	stw	r16,8(sp)
   15fc0:	dfc00715 	stw	ra,28(sp)
   15fc4:	dc800415 	stw	r18,16(sp)
   15fc8:	dc400315 	stw	r17,12(sp)
   15fcc:	3021883a 	mov	r16,r6
   15fd0:	3827883a 	mov	r19,r7
   15fd4:	00151a00 	call	151a0 <_Balloc>
   15fd8:	10004526 	beq	r2,zero,160f0 <__d2b+0x148>
   15fdc:	8024d53a 	srli	r18,r16,20
   15fe0:	01800434 	movhi	r6,16
   15fe4:	31bfffc4 	addi	r6,r6,-1
   15fe8:	9481ffcc 	andi	r18,r18,2047
   15fec:	1023883a 	mov	r17,r2
   15ff0:	81a0703a 	and	r16,r16,r6
   15ff4:	90000126 	beq	r18,zero,15ffc <__d2b+0x54>
   15ff8:	84000434 	orhi	r16,r16,16
   15ffc:	dc000115 	stw	r16,4(sp)
   16000:	a0002226 	beq	r20,zero,1608c <__d2b+0xe4>
   16004:	d809883a 	mov	r4,sp
   16008:	dd000015 	stw	r20,0(sp)
   1600c:	001553c0 	call	1553c <__lo0bits>
   16010:	d8c00117 	ldw	r3,4(sp)
   16014:	10003326 	beq	r2,zero,160e4 <__d2b+0x13c>
   16018:	01000804 	movi	r4,32
   1601c:	2089c83a 	sub	r4,r4,r2
   16020:	1908983a 	sll	r4,r3,r4
   16024:	d9400017 	ldw	r5,0(sp)
   16028:	1886d83a 	srl	r3,r3,r2
   1602c:	2148b03a 	or	r4,r4,r5
   16030:	89000515 	stw	r4,20(r17)
   16034:	d8c00115 	stw	r3,4(sp)
   16038:	88c00615 	stw	r3,24(r17)
   1603c:	1800271e 	bne	r3,zero,160dc <__d2b+0x134>
   16040:	04000044 	movi	r16,1
   16044:	8c000415 	stw	r16,16(r17)
   16048:	90001926 	beq	r18,zero,160b0 <__d2b+0x108>
   1604c:	00c00d44 	movi	r3,53
   16050:	94bef344 	addi	r18,r18,-1075
   16054:	90a5883a 	add	r18,r18,r2
   16058:	1885c83a 	sub	r2,r3,r2
   1605c:	d8c00817 	ldw	r3,32(sp)
   16060:	9c800015 	stw	r18,0(r19)
   16064:	18800015 	stw	r2,0(r3)
   16068:	8805883a 	mov	r2,r17
   1606c:	dfc00717 	ldw	ra,28(sp)
   16070:	dd000617 	ldw	r20,24(sp)
   16074:	dcc00517 	ldw	r19,20(sp)
   16078:	dc800417 	ldw	r18,16(sp)
   1607c:	dc400317 	ldw	r17,12(sp)
   16080:	dc000217 	ldw	r16,8(sp)
   16084:	dec00804 	addi	sp,sp,32
   16088:	f800283a 	ret
   1608c:	d9000104 	addi	r4,sp,4
   16090:	001553c0 	call	1553c <__lo0bits>
   16094:	00c00044 	movi	r3,1
   16098:	88c00415 	stw	r3,16(r17)
   1609c:	d8c00117 	ldw	r3,4(sp)
   160a0:	10800804 	addi	r2,r2,32
   160a4:	04000044 	movi	r16,1
   160a8:	88c00515 	stw	r3,20(r17)
   160ac:	903fe71e 	bne	r18,zero,1604c <__d2b+0xa4>
   160b0:	800690ba 	slli	r3,r16,2
   160b4:	10bef384 	addi	r2,r2,-1074
   160b8:	98800015 	stw	r2,0(r19)
   160bc:	88c5883a 	add	r2,r17,r3
   160c0:	11000417 	ldw	r4,16(r2)
   160c4:	8020917a 	slli	r16,r16,5
   160c8:	00154d80 	call	154d8 <__hi0bits>
   160cc:	80a1c83a 	sub	r16,r16,r2
   160d0:	d8800817 	ldw	r2,32(sp)
   160d4:	14000015 	stw	r16,0(r2)
   160d8:	003fe306 	br	16068 <__d2b+0xc0>
   160dc:	04000084 	movi	r16,2
   160e0:	003fd806 	br	16044 <__d2b+0x9c>
   160e4:	d9000017 	ldw	r4,0(sp)
   160e8:	89000515 	stw	r4,20(r17)
   160ec:	003fd206 	br	16038 <__d2b+0x90>
   160f0:	01c000b4 	movhi	r7,2
   160f4:	010000b4 	movhi	r4,2
   160f8:	39c65104 	addi	r7,r7,6468
   160fc:	000d883a 	mov	r6,zero
   16100:	0140c284 	movi	r5,778
   16104:	2106bf04 	addi	r4,r4,6908
   16108:	00183400 	call	18340 <__assert_func>

0001610c <__ratio>:
   1610c:	defff904 	addi	sp,sp,-28
   16110:	dc400315 	stw	r17,12(sp)
   16114:	2823883a 	mov	r17,r5
   16118:	d80b883a 	mov	r5,sp
   1611c:	dfc00615 	stw	ra,24(sp)
   16120:	dcc00515 	stw	r19,20(sp)
   16124:	dc800415 	stw	r18,16(sp)
   16128:	2027883a 	mov	r19,r4
   1612c:	dc000215 	stw	r16,8(sp)
   16130:	0015ea00 	call	15ea0 <__b2d>
   16134:	d9400104 	addi	r5,sp,4
   16138:	8809883a 	mov	r4,r17
   1613c:	1025883a 	mov	r18,r2
   16140:	1821883a 	mov	r16,r3
   16144:	0015ea00 	call	15ea0 <__b2d>
   16148:	89000417 	ldw	r4,16(r17)
   1614c:	9a000417 	ldw	r8,16(r19)
   16150:	d9400117 	ldw	r5,4(sp)
   16154:	100d883a 	mov	r6,r2
   16158:	4111c83a 	sub	r8,r8,r4
   1615c:	d9000017 	ldw	r4,0(sp)
   16160:	4010917a 	slli	r8,r8,5
   16164:	180f883a 	mov	r7,r3
   16168:	2149c83a 	sub	r4,r4,r5
   1616c:	4111883a 	add	r8,r8,r4
   16170:	02000c0e 	bge	zero,r8,161a4 <__ratio+0x98>
   16174:	4010953a 	slli	r8,r8,20
   16178:	4421883a 	add	r16,r8,r16
   1617c:	9009883a 	mov	r4,r18
   16180:	800b883a 	mov	r5,r16
   16184:	000aeec0 	call	aeec <__divdf3>
   16188:	dfc00617 	ldw	ra,24(sp)
   1618c:	dcc00517 	ldw	r19,20(sp)
   16190:	dc800417 	ldw	r18,16(sp)
   16194:	dc400317 	ldw	r17,12(sp)
   16198:	dc000217 	ldw	r16,8(sp)
   1619c:	dec00704 	addi	sp,sp,28
   161a0:	f800283a 	ret
   161a4:	00bffc34 	movhi	r2,65520
   161a8:	4091383a 	mul	r8,r8,r2
   161ac:	40cf883a 	add	r7,r8,r3
   161b0:	003ff206 	br	1617c <__ratio+0x70>

000161b4 <_mprec_log10>:
   161b4:	defffe04 	addi	sp,sp,-8
   161b8:	dc000015 	stw	r16,0(sp)
   161bc:	dfc00115 	stw	ra,4(sp)
   161c0:	20800608 	cmpgei	r2,r4,24
   161c4:	2021883a 	mov	r16,r4
   161c8:	10000f26 	beq	r2,zero,16208 <_mprec_log10+0x54>
   161cc:	0009883a 	mov	r4,zero
   161d0:	014ffc34 	movhi	r5,16368
   161d4:	000d883a 	mov	r6,zero
   161d8:	01d00934 	movhi	r7,16420
   161dc:	000b98c0 	call	b98c <__muldf3>
   161e0:	843fffc4 	addi	r16,r16,-1
   161e4:	1009883a 	mov	r4,r2
   161e8:	180b883a 	mov	r5,r3
   161ec:	803ff91e 	bne	r16,zero,161d4 <_mprec_log10+0x20>
   161f0:	2005883a 	mov	r2,r4
   161f4:	2807883a 	mov	r3,r5
   161f8:	dfc00117 	ldw	ra,4(sp)
   161fc:	dc000017 	ldw	r16,0(sp)
   16200:	dec00204 	addi	sp,sp,8
   16204:	f800283a 	ret
   16208:	202090fa 	slli	r16,r4,3
   1620c:	008000b4 	movhi	r2,2
   16210:	1086e604 	addi	r2,r2,7064
   16214:	1421883a 	add	r16,r2,r16
   16218:	81000017 	ldw	r4,0(r16)
   1621c:	81400117 	ldw	r5,4(r16)
   16220:	003ff306 	br	161f0 <_mprec_log10+0x3c>

00016224 <__copybits>:
   16224:	297fffc4 	addi	r5,r5,-1
   16228:	280fd17a 	srai	r7,r5,5
   1622c:	31400417 	ldw	r5,16(r6)
   16230:	30800504 	addi	r2,r6,20
   16234:	39c00044 	addi	r7,r7,1
   16238:	280a90ba 	slli	r5,r5,2
   1623c:	380e90ba 	slli	r7,r7,2
   16240:	114b883a 	add	r5,r2,r5
   16244:	21cf883a 	add	r7,r4,r7
   16248:	11400c2e 	bgeu	r2,r5,1627c <__copybits+0x58>
   1624c:	2007883a 	mov	r3,r4
   16250:	12000017 	ldw	r8,0(r2)
   16254:	10800104 	addi	r2,r2,4
   16258:	18c00104 	addi	r3,r3,4
   1625c:	1a3fff15 	stw	r8,-4(r3)
   16260:	117ffb36 	bltu	r2,r5,16250 <__copybits+0x2c>
   16264:	2985c83a 	sub	r2,r5,r6
   16268:	10bffac4 	addi	r2,r2,-21
   1626c:	1004d0ba 	srli	r2,r2,2
   16270:	10800044 	addi	r2,r2,1
   16274:	100490ba 	slli	r2,r2,2
   16278:	2089883a 	add	r4,r4,r2
   1627c:	21c0072e 	bgeu	r4,r7,1629c <__copybits+0x78>
   16280:	39bfffc4 	addi	r6,r7,-1
   16284:	310dc83a 	sub	r6,r6,r4
   16288:	300cd0ba 	srli	r6,r6,2
   1628c:	000b883a 	mov	r5,zero
   16290:	31800044 	addi	r6,r6,1
   16294:	300c90ba 	slli	r6,r6,2
   16298:	00150b01 	jmpi	150b0 <memset>
   1629c:	f800283a 	ret

000162a0 <__any_on>:
   162a0:	20c00417 	ldw	r3,16(r4)
   162a4:	280dd17a 	srai	r6,r5,5
   162a8:	21000504 	addi	r4,r4,20
   162ac:	1980080e 	bge	r3,r6,162d0 <__any_on+0x30>
   162b0:	180490ba 	slli	r2,r3,2
   162b4:	2085883a 	add	r2,r4,r2
   162b8:	20800f2e 	bgeu	r4,r2,162f8 <__any_on+0x58>
   162bc:	10ffff17 	ldw	r3,-4(r2)
   162c0:	10bfff04 	addi	r2,r2,-4
   162c4:	183ffc26 	beq	r3,zero,162b8 <__any_on+0x18>
   162c8:	00800044 	movi	r2,1
   162cc:	f800283a 	ret
   162d0:	300490ba 	slli	r2,r6,2
   162d4:	2085883a 	add	r2,r4,r2
   162d8:	30fff70e 	bge	r6,r3,162b8 <__any_on+0x18>
   162dc:	294007cc 	andi	r5,r5,31
   162e0:	283ff526 	beq	r5,zero,162b8 <__any_on+0x18>
   162e4:	11800017 	ldw	r6,0(r2)
   162e8:	3146d83a 	srl	r3,r6,r5
   162ec:	194a983a 	sll	r5,r3,r5
   162f0:	317ff51e 	bne	r6,r5,162c8 <__any_on+0x28>
   162f4:	003ff006 	br	162b8 <__any_on+0x18>
   162f8:	0005883a 	mov	r2,zero
   162fc:	f800283a 	ret

00016300 <_putc_r>:
   16300:	defffc04 	addi	sp,sp,-16
   16304:	dc400215 	stw	r17,8(sp)
   16308:	dfc00315 	stw	ra,12(sp)
   1630c:	2023883a 	mov	r17,r4
   16310:	20000226 	beq	r4,zero,1631c <_putc_r+0x1c>
   16314:	20800e17 	ldw	r2,56(r4)
   16318:	10000e26 	beq	r2,zero,16354 <_putc_r+0x54>
   1631c:	30800217 	ldw	r2,8(r6)
   16320:	10bfffc4 	addi	r2,r2,-1
   16324:	30800215 	stw	r2,8(r6)
   16328:	10001316 	blt	r2,zero,16378 <_putc_r+0x78>
   1632c:	30800017 	ldw	r2,0(r6)
   16330:	11400005 	stb	r5,0(r2)
   16334:	30800017 	ldw	r2,0(r6)
   16338:	10c00044 	addi	r3,r2,1
   1633c:	30c00015 	stw	r3,0(r6)
   16340:	10800003 	ldbu	r2,0(r2)
   16344:	dfc00317 	ldw	ra,12(sp)
   16348:	dc400217 	ldw	r17,8(sp)
   1634c:	dec00404 	addi	sp,sp,16
   16350:	f800283a 	ret
   16354:	d9800115 	stw	r6,4(sp)
   16358:	d9400015 	stw	r5,0(sp)
   1635c:	001345c0 	call	1345c <__sinit>
   16360:	d9800117 	ldw	r6,4(sp)
   16364:	d9400017 	ldw	r5,0(sp)
   16368:	30800217 	ldw	r2,8(r6)
   1636c:	10bfffc4 	addi	r2,r2,-1
   16370:	30800215 	stw	r2,8(r6)
   16374:	103fed0e 	bge	r2,zero,1632c <_putc_r+0x2c>
   16378:	30c00617 	ldw	r3,24(r6)
   1637c:	10c00e16 	blt	r2,r3,163b8 <_putc_r+0xb8>
   16380:	30800017 	ldw	r2,0(r6)
   16384:	11400005 	stb	r5,0(r2)
   16388:	30c00017 	ldw	r3,0(r6)
   1638c:	18800003 	ldbu	r2,0(r3)
   16390:	108002a0 	cmpeqi	r2,r2,10
   16394:	1000071e 	bne	r2,zero,163b4 <_putc_r+0xb4>
   16398:	18800044 	addi	r2,r3,1
   1639c:	30800015 	stw	r2,0(r6)
   163a0:	18800003 	ldbu	r2,0(r3)
   163a4:	dfc00317 	ldw	ra,12(sp)
   163a8:	dc400217 	ldw	r17,8(sp)
   163ac:	dec00404 	addi	sp,sp,16
   163b0:	f800283a 	ret
   163b4:	01400284 	movi	r5,10
   163b8:	8809883a 	mov	r4,r17
   163bc:	dfc00317 	ldw	ra,12(sp)
   163c0:	dc400217 	ldw	r17,8(sp)
   163c4:	dec00404 	addi	sp,sp,16
   163c8:	00180e81 	jmpi	180e8 <__swbuf_r>

000163cc <putc>:
   163cc:	defffc04 	addi	sp,sp,-16
   163d0:	008000b4 	movhi	r2,2
   163d4:	dc800215 	stw	r18,8(sp)
   163d8:	148f1717 	ldw	r18,15452(r2)
   163dc:	dc400115 	stw	r17,4(sp)
   163e0:	dfc00315 	stw	ra,12(sp)
   163e4:	2023883a 	mov	r17,r4
   163e8:	90000226 	beq	r18,zero,163f4 <putc+0x28>
   163ec:	90800e17 	ldw	r2,56(r18)
   163f0:	10000f26 	beq	r2,zero,16430 <putc+0x64>
   163f4:	28800217 	ldw	r2,8(r5)
   163f8:	10bfffc4 	addi	r2,r2,-1
   163fc:	28800215 	stw	r2,8(r5)
   16400:	10001316 	blt	r2,zero,16450 <putc+0x84>
   16404:	28800017 	ldw	r2,0(r5)
   16408:	14400005 	stb	r17,0(r2)
   1640c:	28800017 	ldw	r2,0(r5)
   16410:	10c00044 	addi	r3,r2,1
   16414:	28c00015 	stw	r3,0(r5)
   16418:	10800003 	ldbu	r2,0(r2)
   1641c:	dfc00317 	ldw	ra,12(sp)
   16420:	dc800217 	ldw	r18,8(sp)
   16424:	dc400117 	ldw	r17,4(sp)
   16428:	dec00404 	addi	sp,sp,16
   1642c:	f800283a 	ret
   16430:	9009883a 	mov	r4,r18
   16434:	d9400015 	stw	r5,0(sp)
   16438:	001345c0 	call	1345c <__sinit>
   1643c:	d9400017 	ldw	r5,0(sp)
   16440:	28800217 	ldw	r2,8(r5)
   16444:	10bfffc4 	addi	r2,r2,-1
   16448:	28800215 	stw	r2,8(r5)
   1644c:	103fed0e 	bge	r2,zero,16404 <putc+0x38>
   16450:	28c00617 	ldw	r3,24(r5)
   16454:	10c00a16 	blt	r2,r3,16480 <putc+0xb4>
   16458:	28800017 	ldw	r2,0(r5)
   1645c:	14400005 	stb	r17,0(r2)
   16460:	28c00017 	ldw	r3,0(r5)
   16464:	18800003 	ldbu	r2,0(r3)
   16468:	108002a0 	cmpeqi	r2,r2,10
   1646c:	10000c1e 	bne	r2,zero,164a0 <putc+0xd4>
   16470:	18800044 	addi	r2,r3,1
   16474:	28800015 	stw	r2,0(r5)
   16478:	18800003 	ldbu	r2,0(r3)
   1647c:	003fe706 	br	1641c <putc+0x50>
   16480:	280d883a 	mov	r6,r5
   16484:	880b883a 	mov	r5,r17
   16488:	9009883a 	mov	r4,r18
   1648c:	dfc00317 	ldw	ra,12(sp)
   16490:	dc800217 	ldw	r18,8(sp)
   16494:	dc400117 	ldw	r17,4(sp)
   16498:	dec00404 	addi	sp,sp,16
   1649c:	00180e81 	jmpi	180e8 <__swbuf_r>
   164a0:	280d883a 	mov	r6,r5
   164a4:	01400284 	movi	r5,10
   164a8:	003ff706 	br	16488 <putc+0xbc>

000164ac <_realloc_r>:
   164ac:	defff604 	addi	sp,sp,-40
   164b0:	dc800215 	stw	r18,8(sp)
   164b4:	dfc00915 	stw	ra,36(sp)
   164b8:	df000815 	stw	fp,32(sp)
   164bc:	ddc00715 	stw	r23,28(sp)
   164c0:	dd800615 	stw	r22,24(sp)
   164c4:	dd400515 	stw	r21,20(sp)
   164c8:	dd000415 	stw	r20,16(sp)
   164cc:	dcc00315 	stw	r19,12(sp)
   164d0:	dc400115 	stw	r17,4(sp)
   164d4:	dc000015 	stw	r16,0(sp)
   164d8:	3025883a 	mov	r18,r6
   164dc:	28008b26 	beq	r5,zero,1670c <_realloc_r+0x260>
   164e0:	2821883a 	mov	r16,r5
   164e4:	2027883a 	mov	r19,r4
   164e8:	944002c4 	addi	r17,r18,11
   164ec:	001a5540 	call	1a554 <__malloc_lock>
   164f0:	888005f0 	cmpltui	r2,r17,23
   164f4:	1000521e 	bne	r2,zero,16640 <_realloc_r+0x194>
   164f8:	017ffe04 	movi	r5,-8
   164fc:	8962703a 	and	r17,r17,r5
   16500:	8807883a 	mov	r3,r17
   16504:	88005116 	blt	r17,zero,1664c <_realloc_r+0x1a0>
   16508:	8c805036 	bltu	r17,r18,1664c <_realloc_r+0x1a0>
   1650c:	80bfff17 	ldw	r2,-4(r16)
   16510:	017fff04 	movi	r5,-4
   16514:	857ffe04 	addi	r21,r16,-8
   16518:	1168703a 	and	r20,r2,r5
   1651c:	a0c0390e 	bge	r20,r3,16604 <_realloc_r+0x158>
   16520:	05c000b4 	movhi	r23,2
   16524:	bdc8fe04 	addi	r23,r23,9208
   16528:	ba000217 	ldw	r8,8(r23)
   1652c:	ad0f883a 	add	r7,r21,r20
   16530:	39000117 	ldw	r4,4(r7)
   16534:	41c08e26 	beq	r8,r7,16770 <_realloc_r+0x2c4>
   16538:	01bfff84 	movi	r6,-2
   1653c:	218c703a 	and	r6,r4,r6
   16540:	398d883a 	add	r6,r7,r6
   16544:	31800117 	ldw	r6,4(r6)
   16548:	3180004c 	andi	r6,r6,1
   1654c:	30004f1e 	bne	r6,zero,1668c <_realloc_r+0x1e0>
   16550:	2148703a 	and	r4,r4,r5
   16554:	a10b883a 	add	r5,r20,r4
   16558:	28c0bb0e 	bge	r5,r3,16848 <_realloc_r+0x39c>
   1655c:	1080004c 	andi	r2,r2,1
   16560:	10004c1e 	bne	r2,zero,16694 <_realloc_r+0x1e8>
   16564:	873ffe17 	ldw	fp,-8(r16)
   16568:	00bfff04 	movi	r2,-4
   1656c:	af39c83a 	sub	fp,r21,fp
   16570:	e1400117 	ldw	r5,4(fp)
   16574:	288a703a 	and	r5,r5,r2
   16578:	38000426 	beq	r7,zero,1658c <_realloc_r+0xe0>
   1657c:	a16d883a 	add	r22,r20,r5
   16580:	b12d883a 	add	r22,r22,r4
   16584:	41c0ba26 	beq	r8,r7,16870 <_realloc_r+0x3c4>
   16588:	b0c0930e 	bge	r22,r3,167d8 <_realloc_r+0x32c>
   1658c:	e0004126 	beq	fp,zero,16694 <_realloc_r+0x1e8>
   16590:	a16d883a 	add	r22,r20,r5
   16594:	b0c03f16 	blt	r22,r3,16694 <_realloc_r+0x1e8>
   16598:	e0800317 	ldw	r2,12(fp)
   1659c:	e0c00217 	ldw	r3,8(fp)
   165a0:	a1bfff04 	addi	r6,r20,-4
   165a4:	31400968 	cmpgeui	r5,r6,37
   165a8:	18800315 	stw	r2,12(r3)
   165ac:	10c00215 	stw	r3,8(r2)
   165b0:	e1000204 	addi	r4,fp,8
   165b4:	2800941e 	bne	r5,zero,16808 <_realloc_r+0x35c>
   165b8:	30800530 	cmpltui	r2,r6,20
   165bc:	1000db1e 	bne	r2,zero,1692c <_realloc_r+0x480>
   165c0:	80c00017 	ldw	r3,0(r16)
   165c4:	30800728 	cmpgeui	r2,r6,28
   165c8:	e0c00215 	stw	r3,8(fp)
   165cc:	80c00117 	ldw	r3,4(r16)
   165d0:	e0c00315 	stw	r3,12(fp)
   165d4:	1000d71e 	bne	r2,zero,16934 <_realloc_r+0x488>
   165d8:	84000204 	addi	r16,r16,8
   165dc:	e0800404 	addi	r2,fp,16
   165e0:	80c00017 	ldw	r3,0(r16)
   165e4:	b029883a 	mov	r20,r22
   165e8:	e02b883a 	mov	r21,fp
   165ec:	10c00015 	stw	r3,0(r2)
   165f0:	80c00117 	ldw	r3,4(r16)
   165f4:	10c00115 	stw	r3,4(r2)
   165f8:	80c00217 	ldw	r3,8(r16)
   165fc:	2021883a 	mov	r16,r4
   16600:	10c00215 	stw	r3,8(r2)
   16604:	a9800117 	ldw	r6,4(r21)
   16608:	a447c83a 	sub	r3,r20,r17
   1660c:	19000430 	cmpltui	r4,r3,16
   16610:	3180004c 	andi	r6,r6,1
   16614:	ad05883a 	add	r2,r21,r20
   16618:	20004926 	beq	r4,zero,16740 <_realloc_r+0x294>
   1661c:	a18cb03a 	or	r6,r20,r6
   16620:	a9800115 	stw	r6,4(r21)
   16624:	10c00117 	ldw	r3,4(r2)
   16628:	18c00054 	ori	r3,r3,1
   1662c:	10c00115 	stw	r3,4(r2)
   16630:	9809883a 	mov	r4,r19
   16634:	001a5780 	call	1a578 <__malloc_unlock>
   16638:	8025883a 	mov	r18,r16
   1663c:	00000606 	br	16658 <_realloc_r+0x1ac>
   16640:	04400404 	movi	r17,16
   16644:	00c00404 	movi	r3,16
   16648:	8cbfb02e 	bgeu	r17,r18,1650c <_realloc_r+0x60>
   1664c:	00800304 	movi	r2,12
   16650:	98800015 	stw	r2,0(r19)
   16654:	0025883a 	mov	r18,zero
   16658:	9005883a 	mov	r2,r18
   1665c:	dfc00917 	ldw	ra,36(sp)
   16660:	df000817 	ldw	fp,32(sp)
   16664:	ddc00717 	ldw	r23,28(sp)
   16668:	dd800617 	ldw	r22,24(sp)
   1666c:	dd400517 	ldw	r21,20(sp)
   16670:	dd000417 	ldw	r20,16(sp)
   16674:	dcc00317 	ldw	r19,12(sp)
   16678:	dc800217 	ldw	r18,8(sp)
   1667c:	dc400117 	ldw	r17,4(sp)
   16680:	dc000017 	ldw	r16,0(sp)
   16684:	dec00a04 	addi	sp,sp,40
   16688:	f800283a 	ret
   1668c:	1080004c 	andi	r2,r2,1
   16690:	10006826 	beq	r2,zero,16834 <_realloc_r+0x388>
   16694:	900b883a 	mov	r5,r18
   16698:	9809883a 	mov	r4,r19
   1669c:	000ce140 	call	ce14 <_malloc_r>
   166a0:	1025883a 	mov	r18,r2
   166a4:	10001626 	beq	r2,zero,16700 <_realloc_r+0x254>
   166a8:	80bfff17 	ldw	r2,-4(r16)
   166ac:	013fff84 	movi	r4,-2
   166b0:	90fffe04 	addi	r3,r18,-8
   166b4:	1104703a 	and	r2,r2,r4
   166b8:	a885883a 	add	r2,r21,r2
   166bc:	10c05826 	beq	r2,r3,16820 <_realloc_r+0x374>
   166c0:	a1bfff04 	addi	r6,r20,-4
   166c4:	30800968 	cmpgeui	r2,r6,37
   166c8:	1000651e 	bne	r2,zero,16860 <_realloc_r+0x3b4>
   166cc:	30800530 	cmpltui	r2,r6,20
   166d0:	10003826 	beq	r2,zero,167b4 <_realloc_r+0x308>
   166d4:	9005883a 	mov	r2,r18
   166d8:	8007883a 	mov	r3,r16
   166dc:	19000017 	ldw	r4,0(r3)
   166e0:	11000015 	stw	r4,0(r2)
   166e4:	19000117 	ldw	r4,4(r3)
   166e8:	11000115 	stw	r4,4(r2)
   166ec:	18c00217 	ldw	r3,8(r3)
   166f0:	10c00215 	stw	r3,8(r2)
   166f4:	800b883a 	mov	r5,r16
   166f8:	9809883a 	mov	r4,r19
   166fc:	00135c00 	call	135c0 <_free_r>
   16700:	9809883a 	mov	r4,r19
   16704:	001a5780 	call	1a578 <__malloc_unlock>
   16708:	003fd306 	br	16658 <_realloc_r+0x1ac>
   1670c:	300b883a 	mov	r5,r6
   16710:	dfc00917 	ldw	ra,36(sp)
   16714:	df000817 	ldw	fp,32(sp)
   16718:	ddc00717 	ldw	r23,28(sp)
   1671c:	dd800617 	ldw	r22,24(sp)
   16720:	dd400517 	ldw	r21,20(sp)
   16724:	dd000417 	ldw	r20,16(sp)
   16728:	dcc00317 	ldw	r19,12(sp)
   1672c:	dc800217 	ldw	r18,8(sp)
   16730:	dc400117 	ldw	r17,4(sp)
   16734:	dc000017 	ldw	r16,0(sp)
   16738:	dec00a04 	addi	sp,sp,40
   1673c:	000ce141 	jmpi	ce14 <_malloc_r>
   16740:	344cb03a 	or	r6,r6,r17
   16744:	a9800115 	stw	r6,4(r21)
   16748:	ac4b883a 	add	r5,r21,r17
   1674c:	18c00054 	ori	r3,r3,1
   16750:	28c00115 	stw	r3,4(r5)
   16754:	10c00117 	ldw	r3,4(r2)
   16758:	29400204 	addi	r5,r5,8
   1675c:	9809883a 	mov	r4,r19
   16760:	18c00054 	ori	r3,r3,1
   16764:	10c00115 	stw	r3,4(r2)
   16768:	00135c00 	call	135c0 <_free_r>
   1676c:	003fb006 	br	16630 <_realloc_r+0x184>
   16770:	2148703a 	and	r4,r4,r5
   16774:	a10b883a 	add	r5,r20,r4
   16778:	89800404 	addi	r6,r17,16
   1677c:	29bf7716 	blt	r5,r6,1655c <_realloc_r+0xb0>
   16780:	ac6b883a 	add	r21,r21,r17
   16784:	2c45c83a 	sub	r2,r5,r17
   16788:	bd400215 	stw	r21,8(r23)
   1678c:	10800054 	ori	r2,r2,1
   16790:	a8800115 	stw	r2,4(r21)
   16794:	80bfff17 	ldw	r2,-4(r16)
   16798:	9809883a 	mov	r4,r19
   1679c:	8025883a 	mov	r18,r16
   167a0:	1080004c 	andi	r2,r2,1
   167a4:	1462b03a 	or	r17,r2,r17
   167a8:	847fff15 	stw	r17,-4(r16)
   167ac:	001a5780 	call	1a578 <__malloc_unlock>
   167b0:	003fa906 	br	16658 <_realloc_r+0x1ac>
   167b4:	80c00017 	ldw	r3,0(r16)
   167b8:	30800728 	cmpgeui	r2,r6,28
   167bc:	90c00015 	stw	r3,0(r18)
   167c0:	80c00117 	ldw	r3,4(r16)
   167c4:	90c00115 	stw	r3,4(r18)
   167c8:	10004f1e 	bne	r2,zero,16908 <_realloc_r+0x45c>
   167cc:	80c00204 	addi	r3,r16,8
   167d0:	90800204 	addi	r2,r18,8
   167d4:	003fc106 	br	166dc <_realloc_r+0x230>
   167d8:	38800317 	ldw	r2,12(r7)
   167dc:	38c00217 	ldw	r3,8(r7)
   167e0:	a1bfff04 	addi	r6,r20,-4
   167e4:	31400968 	cmpgeui	r5,r6,37
   167e8:	18800315 	stw	r2,12(r3)
   167ec:	10c00215 	stw	r3,8(r2)
   167f0:	e0c00217 	ldw	r3,8(fp)
   167f4:	e0800317 	ldw	r2,12(fp)
   167f8:	e1000204 	addi	r4,fp,8
   167fc:	18800315 	stw	r2,12(r3)
   16800:	10c00215 	stw	r3,8(r2)
   16804:	283f6c26 	beq	r5,zero,165b8 <_realloc_r+0x10c>
   16808:	800b883a 	mov	r5,r16
   1680c:	0014f840 	call	14f84 <memmove>
   16810:	1021883a 	mov	r16,r2
   16814:	b029883a 	mov	r20,r22
   16818:	e02b883a 	mov	r21,fp
   1681c:	003f7906 	br	16604 <_realloc_r+0x158>
   16820:	90bfff17 	ldw	r2,-4(r18)
   16824:	00ffff04 	movi	r3,-4
   16828:	10c4703a 	and	r2,r2,r3
   1682c:	a0a9883a 	add	r20,r20,r2
   16830:	003f7406 	br	16604 <_realloc_r+0x158>
   16834:	873ffe17 	ldw	fp,-8(r16)
   16838:	af39c83a 	sub	fp,r21,fp
   1683c:	e0800117 	ldw	r2,4(fp)
   16840:	114a703a 	and	r5,r2,r5
   16844:	003f5106 	br	1658c <_realloc_r+0xe0>
   16848:	38800317 	ldw	r2,12(r7)
   1684c:	38c00217 	ldw	r3,8(r7)
   16850:	2829883a 	mov	r20,r5
   16854:	18800315 	stw	r2,12(r3)
   16858:	10c00215 	stw	r3,8(r2)
   1685c:	003f6906 	br	16604 <_realloc_r+0x158>
   16860:	800b883a 	mov	r5,r16
   16864:	9009883a 	mov	r4,r18
   16868:	0014f840 	call	14f84 <memmove>
   1686c:	003fa106 	br	166f4 <_realloc_r+0x248>
   16870:	88800404 	addi	r2,r17,16
   16874:	b0bf4516 	blt	r22,r2,1658c <_realloc_r+0xe0>
   16878:	e0800317 	ldw	r2,12(fp)
   1687c:	e0c00217 	ldw	r3,8(fp)
   16880:	a1bfff04 	addi	r6,r20,-4
   16884:	31000968 	cmpgeui	r4,r6,37
   16888:	18800315 	stw	r2,12(r3)
   1688c:	10c00215 	stw	r3,8(r2)
   16890:	e4800204 	addi	r18,fp,8
   16894:	2000391e 	bne	r4,zero,1697c <_realloc_r+0x4d0>
   16898:	30800530 	cmpltui	r2,r6,20
   1689c:	1000351e 	bne	r2,zero,16974 <_realloc_r+0x4c8>
   168a0:	80c00017 	ldw	r3,0(r16)
   168a4:	30800728 	cmpgeui	r2,r6,28
   168a8:	e0c00215 	stw	r3,8(fp)
   168ac:	80c00117 	ldw	r3,4(r16)
   168b0:	e0c00315 	stw	r3,12(fp)
   168b4:	10003c1e 	bne	r2,zero,169a8 <_realloc_r+0x4fc>
   168b8:	84000204 	addi	r16,r16,8
   168bc:	e0800404 	addi	r2,fp,16
   168c0:	80c00017 	ldw	r3,0(r16)
   168c4:	10c00015 	stw	r3,0(r2)
   168c8:	80c00117 	ldw	r3,4(r16)
   168cc:	10c00115 	stw	r3,4(r2)
   168d0:	80c00217 	ldw	r3,8(r16)
   168d4:	10c00215 	stw	r3,8(r2)
   168d8:	e447883a 	add	r3,fp,r17
   168dc:	b445c83a 	sub	r2,r22,r17
   168e0:	b8c00215 	stw	r3,8(r23)
   168e4:	10800054 	ori	r2,r2,1
   168e8:	18800115 	stw	r2,4(r3)
   168ec:	e0800117 	ldw	r2,4(fp)
   168f0:	9809883a 	mov	r4,r19
   168f4:	1080004c 	andi	r2,r2,1
   168f8:	1462b03a 	or	r17,r2,r17
   168fc:	e4400115 	stw	r17,4(fp)
   16900:	001a5780 	call	1a578 <__malloc_unlock>
   16904:	003f5406 	br	16658 <_realloc_r+0x1ac>
   16908:	80800217 	ldw	r2,8(r16)
   1690c:	31800920 	cmpeqi	r6,r6,36
   16910:	90800215 	stw	r2,8(r18)
   16914:	80800317 	ldw	r2,12(r16)
   16918:	90800315 	stw	r2,12(r18)
   1691c:	30000e1e 	bne	r6,zero,16958 <_realloc_r+0x4ac>
   16920:	80c00404 	addi	r3,r16,16
   16924:	90800404 	addi	r2,r18,16
   16928:	003f6c06 	br	166dc <_realloc_r+0x230>
   1692c:	2005883a 	mov	r2,r4
   16930:	003f2b06 	br	165e0 <_realloc_r+0x134>
   16934:	80800217 	ldw	r2,8(r16)
   16938:	31800920 	cmpeqi	r6,r6,36
   1693c:	e0800415 	stw	r2,16(fp)
   16940:	80800317 	ldw	r2,12(r16)
   16944:	e0800515 	stw	r2,20(fp)
   16948:	3000101e 	bne	r6,zero,1698c <_realloc_r+0x4e0>
   1694c:	84000404 	addi	r16,r16,16
   16950:	e0800604 	addi	r2,fp,24
   16954:	003f2206 	br	165e0 <_realloc_r+0x134>
   16958:	81000417 	ldw	r4,16(r16)
   1695c:	80c00604 	addi	r3,r16,24
   16960:	90800604 	addi	r2,r18,24
   16964:	91000415 	stw	r4,16(r18)
   16968:	81000517 	ldw	r4,20(r16)
   1696c:	91000515 	stw	r4,20(r18)
   16970:	003f5a06 	br	166dc <_realloc_r+0x230>
   16974:	9005883a 	mov	r2,r18
   16978:	003fd106 	br	168c0 <_realloc_r+0x414>
   1697c:	800b883a 	mov	r5,r16
   16980:	9009883a 	mov	r4,r18
   16984:	0014f840 	call	14f84 <memmove>
   16988:	003fd306 	br	168d8 <_realloc_r+0x42c>
   1698c:	80c00417 	ldw	r3,16(r16)
   16990:	84000604 	addi	r16,r16,24
   16994:	e0800804 	addi	r2,fp,32
   16998:	e0c00615 	stw	r3,24(fp)
   1699c:	80ffff17 	ldw	r3,-4(r16)
   169a0:	e0c00715 	stw	r3,28(fp)
   169a4:	003f0e06 	br	165e0 <_realloc_r+0x134>
   169a8:	80800217 	ldw	r2,8(r16)
   169ac:	31800920 	cmpeqi	r6,r6,36
   169b0:	e0800415 	stw	r2,16(fp)
   169b4:	80800317 	ldw	r2,12(r16)
   169b8:	e0800515 	stw	r2,20(fp)
   169bc:	3000031e 	bne	r6,zero,169cc <_realloc_r+0x520>
   169c0:	84000404 	addi	r16,r16,16
   169c4:	e0800604 	addi	r2,fp,24
   169c8:	003fbd06 	br	168c0 <_realloc_r+0x414>
   169cc:	80c00417 	ldw	r3,16(r16)
   169d0:	84000604 	addi	r16,r16,24
   169d4:	e0800804 	addi	r2,fp,32
   169d8:	e0c00615 	stw	r3,24(fp)
   169dc:	80ffff17 	ldw	r3,-4(r16)
   169e0:	e0c00715 	stw	r3,28(fp)
   169e4:	003fb606 	br	168c0 <_realloc_r+0x414>

000169e8 <__sread>:
   169e8:	defffe04 	addi	sp,sp,-8
   169ec:	dc000015 	stw	r16,0(sp)
   169f0:	2821883a 	mov	r16,r5
   169f4:	2940038f 	ldh	r5,14(r5)
   169f8:	dfc00115 	stw	ra,4(sp)
   169fc:	00189a80 	call	189a8 <_read_r>
   16a00:	10000716 	blt	r2,zero,16a20 <__sread+0x38>
   16a04:	80c01417 	ldw	r3,80(r16)
   16a08:	1887883a 	add	r3,r3,r2
   16a0c:	80c01415 	stw	r3,80(r16)
   16a10:	dfc00117 	ldw	ra,4(sp)
   16a14:	dc000017 	ldw	r16,0(sp)
   16a18:	dec00204 	addi	sp,sp,8
   16a1c:	f800283a 	ret
   16a20:	80c0030b 	ldhu	r3,12(r16)
   16a24:	18fbffcc 	andi	r3,r3,61439
   16a28:	80c0030d 	sth	r3,12(r16)
   16a2c:	dfc00117 	ldw	ra,4(sp)
   16a30:	dc000017 	ldw	r16,0(sp)
   16a34:	dec00204 	addi	sp,sp,8
   16a38:	f800283a 	ret

00016a3c <__seofread>:
   16a3c:	0005883a 	mov	r2,zero
   16a40:	f800283a 	ret

00016a44 <__swrite>:
   16a44:	2880030b 	ldhu	r2,12(r5)
   16a48:	defffb04 	addi	sp,sp,-20
   16a4c:	dcc00315 	stw	r19,12(sp)
   16a50:	dc800215 	stw	r18,8(sp)
   16a54:	dc400115 	stw	r17,4(sp)
   16a58:	dc000015 	stw	r16,0(sp)
   16a5c:	dfc00415 	stw	ra,16(sp)
   16a60:	10c0400c 	andi	r3,r2,256
   16a64:	2821883a 	mov	r16,r5
   16a68:	2023883a 	mov	r17,r4
   16a6c:	3025883a 	mov	r18,r6
   16a70:	3827883a 	mov	r19,r7
   16a74:	18000d1e 	bne	r3,zero,16aac <__swrite+0x68>
   16a78:	8140038f 	ldh	r5,14(r16)
   16a7c:	10bbffcc 	andi	r2,r2,61439
   16a80:	980f883a 	mov	r7,r19
   16a84:	900d883a 	mov	r6,r18
   16a88:	8809883a 	mov	r4,r17
   16a8c:	8080030d 	sth	r2,12(r16)
   16a90:	dfc00417 	ldw	ra,16(sp)
   16a94:	dcc00317 	ldw	r19,12(sp)
   16a98:	dc800217 	ldw	r18,8(sp)
   16a9c:	dc400117 	ldw	r17,4(sp)
   16aa0:	dc000017 	ldw	r16,0(sp)
   16aa4:	dec00504 	addi	sp,sp,20
   16aa8:	00182841 	jmpi	18284 <_write_r>
   16aac:	2940038f 	ldh	r5,14(r5)
   16ab0:	01c00084 	movi	r7,2
   16ab4:	000d883a 	mov	r6,zero
   16ab8:	00189440 	call	18944 <_lseek_r>
   16abc:	8080030b 	ldhu	r2,12(r16)
   16ac0:	003fed06 	br	16a78 <__swrite+0x34>

00016ac4 <__sseek>:
   16ac4:	defffe04 	addi	sp,sp,-8
   16ac8:	dc000015 	stw	r16,0(sp)
   16acc:	2821883a 	mov	r16,r5
   16ad0:	2940038f 	ldh	r5,14(r5)
   16ad4:	dfc00115 	stw	ra,4(sp)
   16ad8:	00189440 	call	18944 <_lseek_r>
   16adc:	10ffffd8 	cmpnei	r3,r2,-1
   16ae0:	18000826 	beq	r3,zero,16b04 <__sseek+0x40>
   16ae4:	80c0030b 	ldhu	r3,12(r16)
   16ae8:	80801415 	stw	r2,80(r16)
   16aec:	18c40014 	ori	r3,r3,4096
   16af0:	80c0030d 	sth	r3,12(r16)
   16af4:	dfc00117 	ldw	ra,4(sp)
   16af8:	dc000017 	ldw	r16,0(sp)
   16afc:	dec00204 	addi	sp,sp,8
   16b00:	f800283a 	ret
   16b04:	80c0030b 	ldhu	r3,12(r16)
   16b08:	18fbffcc 	andi	r3,r3,61439
   16b0c:	80c0030d 	sth	r3,12(r16)
   16b10:	dfc00117 	ldw	ra,4(sp)
   16b14:	dc000017 	ldw	r16,0(sp)
   16b18:	dec00204 	addi	sp,sp,8
   16b1c:	f800283a 	ret

00016b20 <__sclose>:
   16b20:	2940038f 	ldh	r5,14(r5)
   16b24:	00182e81 	jmpi	182e8 <_close_r>

00016b28 <strcmp>:
   16b28:	2144b03a 	or	r2,r4,r5
   16b2c:	108000cc 	andi	r2,r2,3
   16b30:	1000141e 	bne	r2,zero,16b84 <strcmp+0x5c>
   16b34:	20800017 	ldw	r2,0(r4)
   16b38:	28c00017 	ldw	r3,0(r5)
   16b3c:	10c0111e 	bne	r2,r3,16b84 <strcmp+0x5c>
   16b40:	01ffbff4 	movhi	r7,65279
   16b44:	01a02074 	movhi	r6,32897
   16b48:	39ffbfc4 	addi	r7,r7,-257
   16b4c:	31a02004 	addi	r6,r6,-32640
   16b50:	00000306 	br	16b60 <strcmp+0x38>
   16b54:	20800017 	ldw	r2,0(r4)
   16b58:	28c00017 	ldw	r3,0(r5)
   16b5c:	10c0091e 	bne	r2,r3,16b84 <strcmp+0x5c>
   16b60:	11c7883a 	add	r3,r2,r7
   16b64:	0084303a 	nor	r2,zero,r2
   16b68:	1884703a 	and	r2,r3,r2
   16b6c:	1184703a 	and	r2,r2,r6
   16b70:	21000104 	addi	r4,r4,4
   16b74:	29400104 	addi	r5,r5,4
   16b78:	103ff626 	beq	r2,zero,16b54 <strcmp+0x2c>
   16b7c:	0005883a 	mov	r2,zero
   16b80:	f800283a 	ret
   16b84:	20c00003 	ldbu	r3,0(r4)
   16b88:	18803fcc 	andi	r2,r3,255
   16b8c:	1080201c 	xori	r2,r2,128
   16b90:	10bfe004 	addi	r2,r2,-128
   16b94:	1000071e 	bne	r2,zero,16bb4 <strcmp+0x8c>
   16b98:	00000a06 	br	16bc4 <strcmp+0x9c>
   16b9c:	20c00003 	ldbu	r3,0(r4)
   16ba0:	29400044 	addi	r5,r5,1
   16ba4:	18803fcc 	andi	r2,r3,255
   16ba8:	1080201c 	xori	r2,r2,128
   16bac:	10bfe004 	addi	r2,r2,-128
   16bb0:	10000726 	beq	r2,zero,16bd0 <strcmp+0xa8>
   16bb4:	29800007 	ldb	r6,0(r5)
   16bb8:	21000044 	addi	r4,r4,1
   16bbc:	30bff726 	beq	r6,r2,16b9c <strcmp+0x74>
   16bc0:	18803fcc 	andi	r2,r3,255
   16bc4:	28c00003 	ldbu	r3,0(r5)
   16bc8:	10c5c83a 	sub	r2,r2,r3
   16bcc:	f800283a 	ret
   16bd0:	28c00003 	ldbu	r3,0(r5)
   16bd4:	0005883a 	mov	r2,zero
   16bd8:	10c5c83a 	sub	r2,r2,r3
   16bdc:	f800283a 	ret

00016be0 <strncmp>:
   16be0:	30003126 	beq	r6,zero,16ca8 <strncmp+0xc8>
   16be4:	2144b03a 	or	r2,r4,r5
   16be8:	108000cc 	andi	r2,r2,3
   16bec:	10001d1e 	bne	r2,zero,16c64 <strncmp+0x84>
   16bf0:	30800128 	cmpgeui	r2,r6,4
   16bf4:	10001b26 	beq	r2,zero,16c64 <strncmp+0x84>
   16bf8:	02bfbff4 	movhi	r10,65279
   16bfc:	02602074 	movhi	r9,32897
   16c00:	52bfbfc4 	addi	r10,r10,-257
   16c04:	4a602004 	addi	r9,r9,-32640
   16c08:	00000706 	br	16c28 <strncmp+0x48>
   16c0c:	31bfff04 	addi	r6,r6,-4
   16c10:	30c00130 	cmpltui	r3,r6,4
   16c14:	30002426 	beq	r6,zero,16ca8 <strncmp+0xc8>
   16c18:	1000231e 	bne	r2,zero,16ca8 <strncmp+0xc8>
   16c1c:	21000104 	addi	r4,r4,4
   16c20:	29400104 	addi	r5,r5,4
   16c24:	18000f1e 	bne	r3,zero,16c64 <strncmp+0x84>
   16c28:	20c00017 	ldw	r3,0(r4)
   16c2c:	29c00017 	ldw	r7,0(r5)
   16c30:	1a85883a 	add	r2,r3,r10
   16c34:	00d0303a 	nor	r8,zero,r3
   16c38:	1204703a 	and	r2,r2,r8
   16c3c:	1244703a 	and	r2,r2,r9
   16c40:	19fff226 	beq	r3,r7,16c0c <strncmp+0x2c>
   16c44:	21c00007 	ldb	r7,0(r4)
   16c48:	28800007 	ldb	r2,0(r5)
   16c4c:	38800a26 	beq	r7,r2,16c78 <strncmp+0x98>
   16c50:	2807883a 	mov	r3,r5
   16c54:	20800003 	ldbu	r2,0(r4)
   16c58:	18c00003 	ldbu	r3,0(r3)
   16c5c:	10c5c83a 	sub	r2,r2,r3
   16c60:	f800283a 	ret
   16c64:	21c00007 	ldb	r7,0(r4)
   16c68:	28800007 	ldb	r2,0(r5)
   16c6c:	38bff81e 	bne	r7,r2,16c50 <strncmp+0x70>
   16c70:	30800060 	cmpeqi	r2,r6,1
   16c74:	10000c1e 	bne	r2,zero,16ca8 <strncmp+0xc8>
   16c78:	2807883a 	mov	r3,r5
   16c7c:	00000406 	br	16c90 <strncmp+0xb0>
   16c80:	21c00007 	ldb	r7,0(r4)
   16c84:	1a000007 	ldb	r8,0(r3)
   16c88:	3a3ff21e 	bne	r7,r8,16c54 <strncmp+0x74>
   16c8c:	10000626 	beq	r2,zero,16ca8 <strncmp+0xc8>
   16c90:	18c00044 	addi	r3,r3,1
   16c94:	00c4303a 	nor	r2,zero,r3
   16c98:	1185883a 	add	r2,r2,r6
   16c9c:	21000044 	addi	r4,r4,1
   16ca0:	2885883a 	add	r2,r5,r2
   16ca4:	383ff61e 	bne	r7,zero,16c80 <strncmp+0xa0>
   16ca8:	0005883a 	mov	r2,zero
   16cac:	f800283a 	ret

00016cb0 <__sprint_r.part.0>:
   16cb0:	28801917 	ldw	r2,100(r5)
   16cb4:	defff604 	addi	sp,sp,-40
   16cb8:	dcc00315 	stw	r19,12(sp)
   16cbc:	dfc00915 	stw	ra,36(sp)
   16cc0:	df000815 	stw	fp,32(sp)
   16cc4:	ddc00715 	stw	r23,28(sp)
   16cc8:	dd800615 	stw	r22,24(sp)
   16ccc:	dd400515 	stw	r21,20(sp)
   16cd0:	dd000415 	stw	r20,16(sp)
   16cd4:	dc800215 	stw	r18,8(sp)
   16cd8:	dc400115 	stw	r17,4(sp)
   16cdc:	dc000015 	stw	r16,0(sp)
   16ce0:	1088000c 	andi	r2,r2,8192
   16ce4:	3027883a 	mov	r19,r6
   16ce8:	10002c26 	beq	r2,zero,16d9c <__sprint_r.part.0+0xec>
   16cec:	30800217 	ldw	r2,8(r6)
   16cf0:	35000017 	ldw	r20,0(r6)
   16cf4:	2821883a 	mov	r16,r5
   16cf8:	2023883a 	mov	r17,r4
   16cfc:	05bfff04 	movi	r22,-4
   16d00:	10002426 	beq	r2,zero,16d94 <__sprint_r.part.0+0xe4>
   16d04:	a5400117 	ldw	r21,4(r20)
   16d08:	a5c00017 	ldw	r23,0(r20)
   16d0c:	a824d0ba 	srli	r18,r21,2
   16d10:	90001b26 	beq	r18,zero,16d80 <__sprint_r.part.0+0xd0>
   16d14:	0039883a 	mov	fp,zero
   16d18:	00000206 	br	16d24 <__sprint_r.part.0+0x74>
   16d1c:	bdc00104 	addi	r23,r23,4
   16d20:	97001626 	beq	r18,fp,16d7c <__sprint_r.part.0+0xcc>
   16d24:	b9400017 	ldw	r5,0(r23)
   16d28:	800d883a 	mov	r6,r16
   16d2c:	8809883a 	mov	r4,r17
   16d30:	00187f00 	call	187f0 <_fputwc_r>
   16d34:	10bfffe0 	cmpeqi	r2,r2,-1
   16d38:	e7000044 	addi	fp,fp,1
   16d3c:	103ff726 	beq	r2,zero,16d1c <__sprint_r.part.0+0x6c>
   16d40:	00bfffc4 	movi	r2,-1
   16d44:	98000215 	stw	zero,8(r19)
   16d48:	98000115 	stw	zero,4(r19)
   16d4c:	dfc00917 	ldw	ra,36(sp)
   16d50:	df000817 	ldw	fp,32(sp)
   16d54:	ddc00717 	ldw	r23,28(sp)
   16d58:	dd800617 	ldw	r22,24(sp)
   16d5c:	dd400517 	ldw	r21,20(sp)
   16d60:	dd000417 	ldw	r20,16(sp)
   16d64:	dcc00317 	ldw	r19,12(sp)
   16d68:	dc800217 	ldw	r18,8(sp)
   16d6c:	dc400117 	ldw	r17,4(sp)
   16d70:	dc000017 	ldw	r16,0(sp)
   16d74:	dec00a04 	addi	sp,sp,40
   16d78:	f800283a 	ret
   16d7c:	98800217 	ldw	r2,8(r19)
   16d80:	adaa703a 	and	r21,r21,r22
   16d84:	1545c83a 	sub	r2,r2,r21
   16d88:	98800215 	stw	r2,8(r19)
   16d8c:	a5000204 	addi	r20,r20,8
   16d90:	103fdc1e 	bne	r2,zero,16d04 <__sprint_r.part.0+0x54>
   16d94:	0005883a 	mov	r2,zero
   16d98:	003fea06 	br	16d44 <__sprint_r.part.0+0x94>
   16d9c:	00138bc0 	call	138bc <__sfvwrite_r>
   16da0:	003fe806 	br	16d44 <__sprint_r.part.0+0x94>

00016da4 <__sprint_r>:
   16da4:	30c00217 	ldw	r3,8(r6)
   16da8:	18000126 	beq	r3,zero,16db0 <__sprint_r+0xc>
   16dac:	0016cb01 	jmpi	16cb0 <__sprint_r.part.0>
   16db0:	30000115 	stw	zero,4(r6)
   16db4:	0005883a 	mov	r2,zero
   16db8:	f800283a 	ret

00016dbc <___vfiprintf_internal_r>:
   16dbc:	deffcf04 	addi	sp,sp,-196
   16dc0:	dd802d15 	stw	r22,180(sp)
   16dc4:	dd402c15 	stw	r21,176(sp)
   16dc8:	dd002b15 	stw	r20,172(sp)
   16dcc:	dfc03015 	stw	ra,192(sp)
   16dd0:	df002f15 	stw	fp,188(sp)
   16dd4:	ddc02e15 	stw	r23,184(sp)
   16dd8:	dcc02a15 	stw	r19,168(sp)
   16ddc:	dc802915 	stw	r18,164(sp)
   16de0:	dc402815 	stw	r17,160(sp)
   16de4:	dc002715 	stw	r16,156(sp)
   16de8:	d9c00415 	stw	r7,16(sp)
   16dec:	202d883a 	mov	r22,r4
   16df0:	282b883a 	mov	r21,r5
   16df4:	3029883a 	mov	r20,r6
   16df8:	20000226 	beq	r4,zero,16e04 <___vfiprintf_internal_r+0x48>
   16dfc:	20800e17 	ldw	r2,56(r4)
   16e00:	1001b826 	beq	r2,zero,174e4 <___vfiprintf_internal_r+0x728>
   16e04:	a880030b 	ldhu	r2,12(r21)
   16e08:	10c8000c 	andi	r3,r2,8192
   16e0c:	1800061e 	bne	r3,zero,16e28 <___vfiprintf_internal_r+0x6c>
   16e10:	a8c01917 	ldw	r3,100(r21)
   16e14:	0137ffc4 	movi	r4,-8193
   16e18:	10880014 	ori	r2,r2,8192
   16e1c:	1906703a 	and	r3,r3,r4
   16e20:	a880030d 	sth	r2,12(r21)
   16e24:	a8c01915 	stw	r3,100(r21)
   16e28:	10c0020c 	andi	r3,r2,8
   16e2c:	18010326 	beq	r3,zero,1723c <___vfiprintf_internal_r+0x480>
   16e30:	a8c00417 	ldw	r3,16(r21)
   16e34:	18010126 	beq	r3,zero,1723c <___vfiprintf_internal_r+0x480>
   16e38:	1080068c 	andi	r2,r2,26
   16e3c:	10800298 	cmpnei	r2,r2,10
   16e40:	10010626 	beq	r2,zero,1725c <___vfiprintf_internal_r+0x4a0>
   16e44:	dc801704 	addi	r18,sp,92
   16e48:	dc800a15 	stw	r18,40(sp)
   16e4c:	d8000c15 	stw	zero,48(sp)
   16e50:	d8000b15 	stw	zero,44(sp)
   16e54:	9021883a 	mov	r16,r18
   16e58:	d8000515 	stw	zero,20(sp)
   16e5c:	d8000115 	stw	zero,4(sp)
   16e60:	a0800007 	ldb	r2,0(r20)
   16e64:	1000e326 	beq	r2,zero,171f4 <___vfiprintf_internal_r+0x438>
   16e68:	a023883a 	mov	r17,r20
   16e6c:	00000306 	br	16e7c <___vfiprintf_internal_r+0xc0>
   16e70:	88800047 	ldb	r2,1(r17)
   16e74:	8c400044 	addi	r17,r17,1
   16e78:	10012e26 	beq	r2,zero,17334 <___vfiprintf_internal_r+0x578>
   16e7c:	10800958 	cmpnei	r2,r2,37
   16e80:	103ffb1e 	bne	r2,zero,16e70 <___vfiprintf_internal_r+0xb4>
   16e84:	8d27c83a 	sub	r19,r17,r20
   16e88:	8d012c1e 	bne	r17,r20,1733c <___vfiprintf_internal_r+0x580>
   16e8c:	88800003 	ldbu	r2,0(r17)
   16e90:	10803fcc 	andi	r2,r2,255
   16e94:	1080201c 	xori	r2,r2,128
   16e98:	10bfe004 	addi	r2,r2,-128
   16e9c:	1000d526 	beq	r2,zero,171f4 <___vfiprintf_internal_r+0x438>
   16ea0:	88800047 	ldb	r2,1(r17)
   16ea4:	8d000044 	addi	r20,r17,1
   16ea8:	d8000945 	stb	zero,37(sp)
   16eac:	000b883a 	mov	r5,zero
   16eb0:	000d883a 	mov	r6,zero
   16eb4:	023fffc4 	movi	r8,-1
   16eb8:	0023883a 	mov	r17,zero
   16ebc:	001b883a 	mov	r13,zero
   16ec0:	a5000044 	addi	r20,r20,1
   16ec4:	10fff804 	addi	r3,r2,-32
   16ec8:	19001668 	cmpgeui	r4,r3,89
   16ecc:	20006a1e 	bne	r4,zero,17078 <___vfiprintf_internal_r+0x2bc>
   16ed0:	180690ba 	slli	r3,r3,2
   16ed4:	01000074 	movhi	r4,1
   16ed8:	1909883a 	add	r4,r3,r4
   16edc:	20dbb917 	ldw	r3,28388(r4)
   16ee0:	1800683a 	jmp	r3
   16ee4:	000176fc 	xorhi	zero,zero,1499
   16ee8:	00017078 	rdprs	zero,zero,1473
   16eec:	00017078 	rdprs	zero,zero,1473
   16ef0:	000176f0 	cmpltui	zero,zero,1499
   16ef4:	00017078 	rdprs	zero,zero,1473
   16ef8:	00017078 	rdprs	zero,zero,1473
   16efc:	00017078 	rdprs	zero,zero,1473
   16f00:	00017078 	rdprs	zero,zero,1473
   16f04:	00017078 	rdprs	zero,zero,1473
   16f08:	00017078 	rdprs	zero,zero,1473
   16f0c:	00017560 	cmpeqi	zero,zero,1493
   16f10:	000176e0 	cmpeqi	zero,zero,1499
   16f14:	00017078 	rdprs	zero,zero,1473
   16f18:	00017578 	rdprs	zero,zero,1493
   16f1c:	00017584 	movi	zero,1494
   16f20:	00017078 	rdprs	zero,zero,1473
   16f24:	000176d4 	movui	zero,1499
   16f28:	00017048 	cmpgei	zero,zero,1473
   16f2c:	00017048 	cmpgei	zero,zero,1473
   16f30:	00017048 	cmpgei	zero,zero,1473
   16f34:	00017048 	cmpgei	zero,zero,1473
   16f38:	00017048 	cmpgei	zero,zero,1473
   16f3c:	00017048 	cmpgei	zero,zero,1473
   16f40:	00017048 	cmpgei	zero,zero,1473
   16f44:	00017048 	cmpgei	zero,zero,1473
   16f48:	00017048 	cmpgei	zero,zero,1473
   16f4c:	00017078 	rdprs	zero,zero,1473
   16f50:	00017078 	rdprs	zero,zero,1473
   16f54:	00017078 	rdprs	zero,zero,1473
   16f58:	00017078 	rdprs	zero,zero,1473
   16f5c:	00017078 	rdprs	zero,zero,1473
   16f60:	00017078 	rdprs	zero,zero,1473
   16f64:	00017078 	rdprs	zero,zero,1473
   16f68:	00017078 	rdprs	zero,zero,1473
   16f6c:	00017078 	rdprs	zero,zero,1473
   16f70:	00017078 	rdprs	zero,zero,1473
   16f74:	000175c8 	cmpgei	zero,zero,1495
   16f78:	00017078 	rdprs	zero,zero,1473
   16f7c:	00017078 	rdprs	zero,zero,1473
   16f80:	00017078 	rdprs	zero,zero,1473
   16f84:	00017078 	rdprs	zero,zero,1473
   16f88:	00017078 	rdprs	zero,zero,1473
   16f8c:	00017078 	rdprs	zero,zero,1473
   16f90:	00017078 	rdprs	zero,zero,1473
   16f94:	00017078 	rdprs	zero,zero,1473
   16f98:	00017078 	rdprs	zero,zero,1473
   16f9c:	00017078 	rdprs	zero,zero,1473
   16fa0:	000172cc 	andi	zero,zero,1483
   16fa4:	00017078 	rdprs	zero,zero,1473
   16fa8:	00017078 	rdprs	zero,zero,1473
   16fac:	00017078 	rdprs	zero,zero,1473
   16fb0:	00017078 	rdprs	zero,zero,1473
   16fb4:	00017078 	rdprs	zero,zero,1473
   16fb8:	000172a4 	muli	zero,zero,1482
   16fbc:	00017078 	rdprs	zero,zero,1473
   16fc0:	00017078 	rdprs	zero,zero,1473
   16fc4:	000177cc 	andi	zero,zero,1503
   16fc8:	00017078 	rdprs	zero,zero,1473
   16fcc:	00017078 	rdprs	zero,zero,1473
   16fd0:	00017078 	rdprs	zero,zero,1473
   16fd4:	00017078 	rdprs	zero,zero,1473
   16fd8:	00017078 	rdprs	zero,zero,1473
   16fdc:	00017078 	rdprs	zero,zero,1473
   16fe0:	00017078 	rdprs	zero,zero,1473
   16fe4:	00017078 	rdprs	zero,zero,1473
   16fe8:	00017078 	rdprs	zero,zero,1473
   16fec:	00017078 	rdprs	zero,zero,1473
   16ff0:	000177a4 	muli	zero,zero,1502
   16ff4:	000174ec 	andhi	zero,zero,1491
   16ff8:	00017078 	rdprs	zero,zero,1473
   16ffc:	00017078 	rdprs	zero,zero,1473
   17000:	00017078 	rdprs	zero,zero,1473
   17004:	00017744 	movi	zero,1501
   17008:	000174ec 	andhi	zero,zero,1491
   1700c:	00017078 	rdprs	zero,zero,1473
   17010:	00017078 	rdprs	zero,zero,1473
   17014:	00017790 	cmplti	zero,zero,1502
   17018:	00017078 	rdprs	zero,zero,1473
   1701c:	00017750 	cmplti	zero,zero,1501
   17020:	000172d0 	cmplti	zero,zero,1483
   17024:	000178c0 	call	178c <kf_work+0x218>
   17028:	000178b4 	movhi	zero,1506
   1702c:	00017078 	rdprs	zero,zero,1473
   17030:	0001785c 	xori	zero,zero,1505
   17034:	00017078 	rdprs	zero,zero,1473
   17038:	000172a8 	cmpgeui	zero,zero,1482
   1703c:	00017078 	rdprs	zero,zero,1473
   17040:	00017078 	rdprs	zero,zero,1473
   17044:	00017814 	movui	zero,1504
   17048:	0023883a 	mov	r17,zero
   1704c:	10fff404 	addi	r3,r2,-48
   17050:	a0800007 	ldb	r2,0(r20)
   17054:	8c4002a4 	muli	r17,r17,10
   17058:	a5000044 	addi	r20,r20,1
   1705c:	1c63883a 	add	r17,r3,r17
   17060:	10fff404 	addi	r3,r2,-48
   17064:	190002b0 	cmpltui	r4,r3,10
   17068:	203ff91e 	bne	r4,zero,17050 <___vfiprintf_internal_r+0x294>
   1706c:	10fff804 	addi	r3,r2,-32
   17070:	19001668 	cmpgeui	r4,r3,89
   17074:	203f9626 	beq	r4,zero,16ed0 <___vfiprintf_internal_r+0x114>
   17078:	29403fcc 	andi	r5,r5,255
   1707c:	2803b41e 	bne	r5,zero,17f50 <___vfiprintf_internal_r+0x1194>
   17080:	10005c26 	beq	r2,zero,171f4 <___vfiprintf_internal_r+0x438>
   17084:	d8800d05 	stb	r2,52(sp)
   17088:	d8000945 	stb	zero,37(sp)
   1708c:	05c00044 	movi	r23,1
   17090:	07000044 	movi	fp,1
   17094:	dcc00d04 	addi	r19,sp,52
   17098:	db400015 	stw	r13,0(sp)
   1709c:	0011883a 	mov	r8,zero
   170a0:	d8800017 	ldw	r2,0(sp)
   170a4:	1380008c 	andi	r14,r2,2
   170a8:	70000126 	beq	r14,zero,170b0 <___vfiprintf_internal_r+0x2f4>
   170ac:	bdc00084 	addi	r23,r23,2
   170b0:	d8800017 	ldw	r2,0(sp)
   170b4:	d9000b17 	ldw	r4,44(sp)
   170b8:	1340210c 	andi	r13,r2,132
   170bc:	21800044 	addi	r6,r4,1
   170c0:	d8800c17 	ldw	r2,48(sp)
   170c4:	300b883a 	mov	r5,r6
   170c8:	6800021e 	bne	r13,zero,170d4 <___vfiprintf_internal_r+0x318>
   170cc:	8dc7c83a 	sub	r3,r17,r23
   170d0:	00c2e316 	blt	zero,r3,17c60 <___vfiprintf_internal_r+0xea4>
   170d4:	d8c00947 	ldb	r3,37(sp)
   170d8:	18000c26 	beq	r3,zero,1710c <___vfiprintf_internal_r+0x350>
   170dc:	d8c00944 	addi	r3,sp,37
   170e0:	10800044 	addi	r2,r2,1
   170e4:	80c00015 	stw	r3,0(r16)
   170e8:	00c00044 	movi	r3,1
   170ec:	80c00115 	stw	r3,4(r16)
   170f0:	d8800c15 	stw	r2,48(sp)
   170f4:	d9400b15 	stw	r5,44(sp)
   170f8:	28c00208 	cmpgei	r3,r5,8
   170fc:	18029e1e 	bne	r3,zero,17b78 <___vfiprintf_internal_r+0xdbc>
   17100:	2809883a 	mov	r4,r5
   17104:	84000204 	addi	r16,r16,8
   17108:	29400044 	addi	r5,r5,1
   1710c:	70001726 	beq	r14,zero,1716c <___vfiprintf_internal_r+0x3b0>
   17110:	d8c00984 	addi	r3,sp,38
   17114:	10800084 	addi	r2,r2,2
   17118:	80c00015 	stw	r3,0(r16)
   1711c:	00c00084 	movi	r3,2
   17120:	80c00115 	stw	r3,4(r16)
   17124:	d8800c15 	stw	r2,48(sp)
   17128:	d9400b15 	stw	r5,44(sp)
   1712c:	28c00208 	cmpgei	r3,r5,8
   17130:	1802a826 	beq	r3,zero,17bd4 <___vfiprintf_internal_r+0xe18>
   17134:	10032326 	beq	r2,zero,17dc4 <___vfiprintf_internal_r+0x1008>
   17138:	d9800a04 	addi	r6,sp,40
   1713c:	a80b883a 	mov	r5,r21
   17140:	b009883a 	mov	r4,r22
   17144:	da000315 	stw	r8,12(sp)
   17148:	db400215 	stw	r13,8(sp)
   1714c:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17150:	10002a1e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17154:	d9000b17 	ldw	r4,44(sp)
   17158:	d8800c17 	ldw	r2,48(sp)
   1715c:	da000317 	ldw	r8,12(sp)
   17160:	db400217 	ldw	r13,8(sp)
   17164:	9021883a 	mov	r16,r18
   17168:	21400044 	addi	r5,r4,1
   1716c:	6b402018 	cmpnei	r13,r13,128
   17170:	6801ef26 	beq	r13,zero,17930 <___vfiprintf_internal_r+0xb74>
   17174:	4711c83a 	sub	r8,r8,fp
   17178:	02022c16 	blt	zero,r8,17a2c <___vfiprintf_internal_r+0xc70>
   1717c:	e085883a 	add	r2,fp,r2
   17180:	d9400b15 	stw	r5,44(sp)
   17184:	84c00015 	stw	r19,0(r16)
   17188:	87000115 	stw	fp,4(r16)
   1718c:	d8800c15 	stw	r2,48(sp)
   17190:	29400208 	cmpgei	r5,r5,8
   17194:	2801e026 	beq	r5,zero,17918 <___vfiprintf_internal_r+0xb5c>
   17198:	10009826 	beq	r2,zero,173fc <___vfiprintf_internal_r+0x640>
   1719c:	d9800a04 	addi	r6,sp,40
   171a0:	a80b883a 	mov	r5,r21
   171a4:	b009883a 	mov	r4,r22
   171a8:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   171ac:	1000131e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   171b0:	d8800c17 	ldw	r2,48(sp)
   171b4:	9021883a 	mov	r16,r18
   171b8:	d8c00017 	ldw	r3,0(sp)
   171bc:	1cc0010c 	andi	r19,r3,4
   171c0:	98000226 	beq	r19,zero,171cc <___vfiprintf_internal_r+0x410>
   171c4:	8de7c83a 	sub	r19,r17,r23
   171c8:	04c09316 	blt	zero,r19,17418 <___vfiprintf_internal_r+0x65c>
   171cc:	8dc0010e 	bge	r17,r23,171d4 <___vfiprintf_internal_r+0x418>
   171d0:	b823883a 	mov	r17,r23
   171d4:	d8c00117 	ldw	r3,4(sp)
   171d8:	1c47883a 	add	r3,r3,r17
   171dc:	d8c00115 	stw	r3,4(sp)
   171e0:	10025b1e 	bne	r2,zero,17b50 <___vfiprintf_internal_r+0xd94>
   171e4:	a0800007 	ldb	r2,0(r20)
   171e8:	d8000b15 	stw	zero,44(sp)
   171ec:	9021883a 	mov	r16,r18
   171f0:	103f1d1e 	bne	r2,zero,16e68 <___vfiprintf_internal_r+0xac>
   171f4:	d8800c17 	ldw	r2,48(sp)
   171f8:	1003571e 	bne	r2,zero,17f58 <___vfiprintf_internal_r+0x119c>
   171fc:	a880030b 	ldhu	r2,12(r21)
   17200:	1080100c 	andi	r2,r2,64
   17204:	1003721e 	bne	r2,zero,17fd0 <___vfiprintf_internal_r+0x1214>
   17208:	d8800117 	ldw	r2,4(sp)
   1720c:	dfc03017 	ldw	ra,192(sp)
   17210:	df002f17 	ldw	fp,188(sp)
   17214:	ddc02e17 	ldw	r23,184(sp)
   17218:	dd802d17 	ldw	r22,180(sp)
   1721c:	dd402c17 	ldw	r21,176(sp)
   17220:	dd002b17 	ldw	r20,172(sp)
   17224:	dcc02a17 	ldw	r19,168(sp)
   17228:	dc802917 	ldw	r18,164(sp)
   1722c:	dc402817 	ldw	r17,160(sp)
   17230:	dc002717 	ldw	r16,156(sp)
   17234:	dec03104 	addi	sp,sp,196
   17238:	f800283a 	ret
   1723c:	a80b883a 	mov	r5,r21
   17240:	b009883a 	mov	r4,r22
   17244:	00113540 	call	11354 <__swsetup_r>
   17248:	1003611e 	bne	r2,zero,17fd0 <___vfiprintf_internal_r+0x1214>
   1724c:	a880030b 	ldhu	r2,12(r21)
   17250:	1080068c 	andi	r2,r2,26
   17254:	10800298 	cmpnei	r2,r2,10
   17258:	103efa1e 	bne	r2,zero,16e44 <___vfiprintf_internal_r+0x88>
   1725c:	a880038f 	ldh	r2,14(r21)
   17260:	103ef816 	blt	r2,zero,16e44 <___vfiprintf_internal_r+0x88>
   17264:	d9c00417 	ldw	r7,16(sp)
   17268:	a00d883a 	mov	r6,r20
   1726c:	a80b883a 	mov	r5,r21
   17270:	b009883a 	mov	r4,r22
   17274:	dfc03017 	ldw	ra,192(sp)
   17278:	df002f17 	ldw	fp,188(sp)
   1727c:	ddc02e17 	ldw	r23,184(sp)
   17280:	dd802d17 	ldw	r22,180(sp)
   17284:	dd402c17 	ldw	r21,176(sp)
   17288:	dd002b17 	ldw	r20,172(sp)
   1728c:	dcc02a17 	ldw	r19,168(sp)
   17290:	dc802917 	ldw	r18,164(sp)
   17294:	dc402817 	ldw	r17,160(sp)
   17298:	dc002717 	ldw	r16,156(sp)
   1729c:	dec03104 	addi	sp,sp,196
   172a0:	00180281 	jmpi	18028 <__sbprintf>
   172a4:	6b400414 	ori	r13,r13,16
   172a8:	6880080c 	andi	r2,r13,32
   172ac:	10004726 	beq	r2,zero,173cc <___vfiprintf_internal_r+0x610>
   172b0:	d8c00417 	ldw	r3,16(sp)
   172b4:	00800044 	movi	r2,1
   172b8:	1dc00017 	ldw	r23,0(r3)
   172bc:	1f000117 	ldw	fp,4(r3)
   172c0:	18c00204 	addi	r3,r3,8
   172c4:	d8c00415 	stw	r3,16(sp)
   172c8:	00000906 	br	172f0 <___vfiprintf_internal_r+0x534>
   172cc:	6b400414 	ori	r13,r13,16
   172d0:	6880080c 	andi	r2,r13,32
   172d4:	10003126 	beq	r2,zero,1739c <___vfiprintf_internal_r+0x5e0>
   172d8:	d8c00417 	ldw	r3,16(sp)
   172dc:	0005883a 	mov	r2,zero
   172e0:	1dc00017 	ldw	r23,0(r3)
   172e4:	1f000117 	ldw	fp,4(r3)
   172e8:	18c00204 	addi	r3,r3,8
   172ec:	d8c00415 	stw	r3,16(sp)
   172f0:	d8000945 	stb	zero,37(sp)
   172f4:	40ffffe0 	cmpeqi	r3,r8,-1
   172f8:	001d883a 	mov	r14,zero
   172fc:	1800cf1e 	bne	r3,zero,1763c <___vfiprintf_internal_r+0x880>
   17300:	04ffdfc4 	movi	r19,-129
   17304:	6cc8703a 	and	r4,r13,r19
   17308:	bf06b03a 	or	r3,r23,fp
   1730c:	d9000015 	stw	r4,0(sp)
   17310:	1802341e 	bne	r3,zero,17be4 <___vfiprintf_internal_r+0xe28>
   17314:	4001f91e 	bne	r8,zero,17afc <___vfiprintf_internal_r+0xd40>
   17318:	1002a11e 	bne	r2,zero,17da0 <___vfiprintf_internal_r+0xfe4>
   1731c:	6f00004c 	andi	fp,r13,1
   17320:	e002c526 	beq	fp,zero,17e38 <___vfiprintf_internal_r+0x107c>
   17324:	00800c04 	movi	r2,48
   17328:	d88016c5 	stb	r2,91(sp)
   1732c:	dcc016c4 	addi	r19,sp,91
   17330:	0000df06 	br	176b0 <___vfiprintf_internal_r+0x8f4>
   17334:	8d27c83a 	sub	r19,r17,r20
   17338:	8d3fae26 	beq	r17,r20,171f4 <___vfiprintf_internal_r+0x438>
   1733c:	d8c00c17 	ldw	r3,48(sp)
   17340:	d8800b17 	ldw	r2,44(sp)
   17344:	85000015 	stw	r20,0(r16)
   17348:	98c7883a 	add	r3,r19,r3
   1734c:	10800044 	addi	r2,r2,1
   17350:	d8800b15 	stw	r2,44(sp)
   17354:	84c00115 	stw	r19,4(r16)
   17358:	d8c00c15 	stw	r3,48(sp)
   1735c:	10800208 	cmpgei	r2,r2,8
   17360:	1000061e 	bne	r2,zero,1737c <___vfiprintf_internal_r+0x5c0>
   17364:	84000204 	addi	r16,r16,8
   17368:	d8c00117 	ldw	r3,4(sp)
   1736c:	88800003 	ldbu	r2,0(r17)
   17370:	1cc7883a 	add	r3,r3,r19
   17374:	d8c00115 	stw	r3,4(sp)
   17378:	003ec506 	br	16e90 <___vfiprintf_internal_r+0xd4>
   1737c:	18028426 	beq	r3,zero,17d90 <___vfiprintf_internal_r+0xfd4>
   17380:	d9800a04 	addi	r6,sp,40
   17384:	a80b883a 	mov	r5,r21
   17388:	b009883a 	mov	r4,r22
   1738c:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17390:	103f9a1e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17394:	9021883a 	mov	r16,r18
   17398:	003ff306 	br	17368 <___vfiprintf_internal_r+0x5ac>
   1739c:	d8c00417 	ldw	r3,16(sp)
   173a0:	6880040c 	andi	r2,r13,16
   173a4:	1dc00017 	ldw	r23,0(r3)
   173a8:	18c00104 	addi	r3,r3,4
   173ac:	d8c00415 	stw	r3,16(sp)
   173b0:	1000031e 	bne	r2,zero,173c0 <___vfiprintf_internal_r+0x604>
   173b4:	6880100c 	andi	r2,r13,64
   173b8:	10000126 	beq	r2,zero,173c0 <___vfiprintf_internal_r+0x604>
   173bc:	bdffffcc 	andi	r23,r23,65535
   173c0:	0039883a 	mov	fp,zero
   173c4:	0005883a 	mov	r2,zero
   173c8:	003fc906 	br	172f0 <___vfiprintf_internal_r+0x534>
   173cc:	d8c00417 	ldw	r3,16(sp)
   173d0:	6880040c 	andi	r2,r13,16
   173d4:	1dc00017 	ldw	r23,0(r3)
   173d8:	18c00104 	addi	r3,r3,4
   173dc:	d8c00415 	stw	r3,16(sp)
   173e0:	1000031e 	bne	r2,zero,173f0 <___vfiprintf_internal_r+0x634>
   173e4:	6880100c 	andi	r2,r13,64
   173e8:	10000126 	beq	r2,zero,173f0 <___vfiprintf_internal_r+0x634>
   173ec:	bdffffcc 	andi	r23,r23,65535
   173f0:	0039883a 	mov	fp,zero
   173f4:	00800044 	movi	r2,1
   173f8:	003fbd06 	br	172f0 <___vfiprintf_internal_r+0x534>
   173fc:	d8c00017 	ldw	r3,0(sp)
   17400:	d8000b15 	stw	zero,44(sp)
   17404:	1cc0010c 	andi	r19,r3,4
   17408:	98025026 	beq	r19,zero,17d4c <___vfiprintf_internal_r+0xf90>
   1740c:	8de7c83a 	sub	r19,r17,r23
   17410:	04c24e0e 	bge	zero,r19,17d4c <___vfiprintf_internal_r+0xf90>
   17414:	9021883a 	mov	r16,r18
   17418:	98c00450 	cmplti	r3,r19,17
   1741c:	d9000b17 	ldw	r4,44(sp)
   17420:	01c000b4 	movhi	r7,2
   17424:	1802e41e 	bne	r3,zero,17fb8 <___vfiprintf_internal_r+0x11fc>
   17428:	39c71c04 	addi	r7,r7,7280
   1742c:	07000404 	movi	fp,16
   17430:	00000606 	br	1744c <___vfiprintf_internal_r+0x690>
   17434:	21400084 	addi	r5,r4,2
   17438:	84000204 	addi	r16,r16,8
   1743c:	1809883a 	mov	r4,r3
   17440:	9cfffc04 	addi	r19,r19,-16
   17444:	98c00448 	cmpgei	r3,r19,17
   17448:	18001726 	beq	r3,zero,174a8 <___vfiprintf_internal_r+0x6ec>
   1744c:	20c00044 	addi	r3,r4,1
   17450:	10800404 	addi	r2,r2,16
   17454:	81c00015 	stw	r7,0(r16)
   17458:	87000115 	stw	fp,4(r16)
   1745c:	d8800c15 	stw	r2,48(sp)
   17460:	d8c00b15 	stw	r3,44(sp)
   17464:	19400208 	cmpgei	r5,r3,8
   17468:	283ff226 	beq	r5,zero,17434 <___vfiprintf_internal_r+0x678>
   1746c:	d9800a04 	addi	r6,sp,40
   17470:	a80b883a 	mov	r5,r21
   17474:	b009883a 	mov	r4,r22
   17478:	10012926 	beq	r2,zero,17920 <___vfiprintf_internal_r+0xb64>
   1747c:	d9c00015 	stw	r7,0(sp)
   17480:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17484:	103f5d1e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17488:	d9000b17 	ldw	r4,44(sp)
   1748c:	9cfffc04 	addi	r19,r19,-16
   17490:	98c00448 	cmpgei	r3,r19,17
   17494:	d8800c17 	ldw	r2,48(sp)
   17498:	d9c00017 	ldw	r7,0(sp)
   1749c:	9021883a 	mov	r16,r18
   174a0:	21400044 	addi	r5,r4,1
   174a4:	183fe91e 	bne	r3,zero,1744c <___vfiprintf_internal_r+0x690>
   174a8:	14c5883a 	add	r2,r2,r19
   174ac:	d9400b15 	stw	r5,44(sp)
   174b0:	81c00015 	stw	r7,0(r16)
   174b4:	84c00115 	stw	r19,4(r16)
   174b8:	d8800c15 	stw	r2,48(sp)
   174bc:	29400210 	cmplti	r5,r5,8
   174c0:	283f421e 	bne	r5,zero,171cc <___vfiprintf_internal_r+0x410>
   174c4:	10022126 	beq	r2,zero,17d4c <___vfiprintf_internal_r+0xf90>
   174c8:	d9800a04 	addi	r6,sp,40
   174cc:	a80b883a 	mov	r5,r21
   174d0:	b009883a 	mov	r4,r22
   174d4:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   174d8:	103f481e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   174dc:	d8800c17 	ldw	r2,48(sp)
   174e0:	003f3a06 	br	171cc <___vfiprintf_internal_r+0x410>
   174e4:	001345c0 	call	1345c <__sinit>
   174e8:	003e4606 	br	16e04 <___vfiprintf_internal_r+0x48>
   174ec:	29403fcc 	andi	r5,r5,255
   174f0:	2802af1e 	bne	r5,zero,17fb0 <___vfiprintf_internal_r+0x11f4>
   174f4:	6880080c 	andi	r2,r13,32
   174f8:	10003826 	beq	r2,zero,175dc <___vfiprintf_internal_r+0x820>
   174fc:	d8c00417 	ldw	r3,16(sp)
   17500:	18800117 	ldw	r2,4(r3)
   17504:	1dc00017 	ldw	r23,0(r3)
   17508:	18c00204 	addi	r3,r3,8
   1750c:	d8c00415 	stw	r3,16(sp)
   17510:	1039883a 	mov	fp,r2
   17514:	10003f16 	blt	r2,zero,17614 <___vfiprintf_internal_r+0x858>
   17518:	40bfffd8 	cmpnei	r2,r8,-1
   1751c:	db800943 	ldbu	r14,37(sp)
   17520:	10000626 	beq	r2,zero,1753c <___vfiprintf_internal_r+0x780>
   17524:	04ffdfc4 	movi	r19,-129
   17528:	6cc6703a 	and	r3,r13,r19
   1752c:	bf04b03a 	or	r2,r23,fp
   17530:	d8c00015 	stw	r3,0(sp)
   17534:	10021926 	beq	r2,zero,17d9c <___vfiprintf_internal_r+0xfe0>
   17538:	db400017 	ldw	r13,0(sp)
   1753c:	e001ab1e 	bne	fp,zero,17bec <___vfiprintf_internal_r+0xe30>
   17540:	b88002a8 	cmpgeui	r2,r23,10
   17544:	1001a91e 	bne	r2,zero,17bec <___vfiprintf_internal_r+0xe30>
   17548:	bdc00c04 	addi	r23,r23,48
   1754c:	ddc016c5 	stb	r23,91(sp)
   17550:	db400015 	stw	r13,0(sp)
   17554:	07000044 	movi	fp,1
   17558:	dcc016c4 	addi	r19,sp,91
   1755c:	00005406 	br	176b0 <___vfiprintf_internal_r+0x8f4>
   17560:	d8800417 	ldw	r2,16(sp)
   17564:	14400017 	ldw	r17,0(r2)
   17568:	10c00104 	addi	r3,r2,4
   1756c:	88022f0e 	bge	r17,zero,17e2c <___vfiprintf_internal_r+0x1070>
   17570:	0463c83a 	sub	r17,zero,r17
   17574:	d8c00415 	stw	r3,16(sp)
   17578:	a0800007 	ldb	r2,0(r20)
   1757c:	6b400114 	ori	r13,r13,4
   17580:	003e4f06 	br	16ec0 <___vfiprintf_internal_r+0x104>
   17584:	a0800007 	ldb	r2,0(r20)
   17588:	a1000044 	addi	r4,r20,1
   1758c:	10c00aa0 	cmpeqi	r3,r2,42
   17590:	1802921e 	bne	r3,zero,17fdc <___vfiprintf_internal_r+0x1220>
   17594:	10fff404 	addi	r3,r2,-48
   17598:	19c002b0 	cmpltui	r7,r3,10
   1759c:	2029883a 	mov	r20,r4
   175a0:	0011883a 	mov	r8,zero
   175a4:	383e4726 	beq	r7,zero,16ec4 <___vfiprintf_internal_r+0x108>
   175a8:	a0800007 	ldb	r2,0(r20)
   175ac:	420002a4 	muli	r8,r8,10
   175b0:	a5000044 	addi	r20,r20,1
   175b4:	40d1883a 	add	r8,r8,r3
   175b8:	10fff404 	addi	r3,r2,-48
   175bc:	190002b0 	cmpltui	r4,r3,10
   175c0:	203ff91e 	bne	r4,zero,175a8 <___vfiprintf_internal_r+0x7ec>
   175c4:	003e3f06 	br	16ec4 <___vfiprintf_internal_r+0x108>
   175c8:	29403fcc 	andi	r5,r5,255
   175cc:	28026d1e 	bne	r5,zero,17f84 <___vfiprintf_internal_r+0x11c8>
   175d0:	6b400414 	ori	r13,r13,16
   175d4:	6880080c 	andi	r2,r13,32
   175d8:	103fc81e 	bne	r2,zero,174fc <___vfiprintf_internal_r+0x740>
   175dc:	d8c00417 	ldw	r3,16(sp)
   175e0:	6880040c 	andi	r2,r13,16
   175e4:	1dc00017 	ldw	r23,0(r3)
   175e8:	18c00104 	addi	r3,r3,4
   175ec:	d8c00415 	stw	r3,16(sp)
   175f0:	1001f11e 	bne	r2,zero,17db8 <___vfiprintf_internal_r+0xffc>
   175f4:	6880100c 	andi	r2,r13,64
   175f8:	1001ef26 	beq	r2,zero,17db8 <___vfiprintf_internal_r+0xffc>
   175fc:	bdffffcc 	andi	r23,r23,65535
   17600:	bde0001c 	xori	r23,r23,32768
   17604:	bde00004 	addi	r23,r23,-32768
   17608:	b839d7fa 	srai	fp,r23,31
   1760c:	e005883a 	mov	r2,fp
   17610:	103fc10e 	bge	r2,zero,17518 <___vfiprintf_internal_r+0x75c>
   17614:	b804c03a 	cmpne	r2,r23,zero
   17618:	0739c83a 	sub	fp,zero,fp
   1761c:	e0b9c83a 	sub	fp,fp,r2
   17620:	00800b44 	movi	r2,45
   17624:	d8800945 	stb	r2,37(sp)
   17628:	40ffffe0 	cmpeqi	r3,r8,-1
   1762c:	05efc83a 	sub	r23,zero,r23
   17630:	03800b44 	movi	r14,45
   17634:	00800044 	movi	r2,1
   17638:	183f3126 	beq	r3,zero,17300 <___vfiprintf_internal_r+0x544>
   1763c:	10c00060 	cmpeqi	r3,r2,1
   17640:	183fbe1e 	bne	r3,zero,1753c <___vfiprintf_internal_r+0x780>
   17644:	108000a0 	cmpeqi	r2,r2,2
   17648:	1001311e 	bne	r2,zero,17b10 <___vfiprintf_internal_r+0xd54>
   1764c:	9027883a 	mov	r19,r18
   17650:	e008977a 	slli	r4,fp,29
   17654:	b806d0fa 	srli	r3,r23,3
   17658:	e038d0fa 	srli	fp,fp,3
   1765c:	b88001cc 	andi	r2,r23,7
   17660:	10800c04 	addi	r2,r2,48
   17664:	20eeb03a 	or	r23,r4,r3
   17668:	98bfffc5 	stb	r2,-1(r19)
   1766c:	bf06b03a 	or	r3,r23,fp
   17670:	980b883a 	mov	r5,r19
   17674:	9cffffc4 	addi	r19,r19,-1
   17678:	183ff51e 	bne	r3,zero,17650 <___vfiprintf_internal_r+0x894>
   1767c:	68c0004c 	andi	r3,r13,1
   17680:	18013026 	beq	r3,zero,17b44 <___vfiprintf_internal_r+0xd88>
   17684:	10803fcc 	andi	r2,r2,255
   17688:	1080201c 	xori	r2,r2,128
   1768c:	10bfe004 	addi	r2,r2,-128
   17690:	10800c18 	cmpnei	r2,r2,48
   17694:	10012b26 	beq	r2,zero,17b44 <___vfiprintf_internal_r+0xd88>
   17698:	297fff84 	addi	r5,r5,-2
   1769c:	00800c04 	movi	r2,48
   176a0:	98bfffc5 	stb	r2,-1(r19)
   176a4:	9179c83a 	sub	fp,r18,r5
   176a8:	db400015 	stw	r13,0(sp)
   176ac:	2827883a 	mov	r19,r5
   176b0:	e02f883a 	mov	r23,fp
   176b4:	e200010e 	bge	fp,r8,176bc <___vfiprintf_internal_r+0x900>
   176b8:	402f883a 	mov	r23,r8
   176bc:	73803fcc 	andi	r14,r14,255
   176c0:	7380201c 	xori	r14,r14,128
   176c4:	73bfe004 	addi	r14,r14,-128
   176c8:	703e7526 	beq	r14,zero,170a0 <___vfiprintf_internal_r+0x2e4>
   176cc:	bdc00044 	addi	r23,r23,1
   176d0:	003e7306 	br	170a0 <___vfiprintf_internal_r+0x2e4>
   176d4:	a0800007 	ldb	r2,0(r20)
   176d8:	6b402014 	ori	r13,r13,128
   176dc:	003df806 	br	16ec0 <___vfiprintf_internal_r+0x104>
   176e0:	a0800007 	ldb	r2,0(r20)
   176e4:	01400044 	movi	r5,1
   176e8:	01800ac4 	movi	r6,43
   176ec:	003df406 	br	16ec0 <___vfiprintf_internal_r+0x104>
   176f0:	a0800007 	ldb	r2,0(r20)
   176f4:	6b400054 	ori	r13,r13,1
   176f8:	003df106 	br	16ec0 <___vfiprintf_internal_r+0x104>
   176fc:	30c03fcc 	andi	r3,r6,255
   17700:	18c0201c 	xori	r3,r3,128
   17704:	18ffe004 	addi	r3,r3,-128
   17708:	a0800003 	ldbu	r2,0(r20)
   1770c:	1800091e 	bne	r3,zero,17734 <___vfiprintf_internal_r+0x978>
   17710:	10803fcc 	andi	r2,r2,255
   17714:	1080201c 	xori	r2,r2,128
   17718:	01400044 	movi	r5,1
   1771c:	01800804 	movi	r6,32
   17720:	10bfe004 	addi	r2,r2,-128
   17724:	003de606 	br	16ec0 <___vfiprintf_internal_r+0x104>
   17728:	a0800043 	ldbu	r2,1(r20)
   1772c:	6b400814 	ori	r13,r13,32
   17730:	a5000044 	addi	r20,r20,1
   17734:	10803fcc 	andi	r2,r2,255
   17738:	1080201c 	xori	r2,r2,128
   1773c:	10bfe004 	addi	r2,r2,-128
   17740:	003ddf06 	br	16ec0 <___vfiprintf_internal_r+0x104>
   17744:	a0800007 	ldb	r2,0(r20)
   17748:	6b401014 	ori	r13,r13,64
   1774c:	003ddc06 	br	16ec0 <___vfiprintf_internal_r+0x104>
   17750:	29403fcc 	andi	r5,r5,255
   17754:	28020f1e 	bne	r5,zero,17f94 <___vfiprintf_internal_r+0x11d8>
   17758:	d9000417 	ldw	r4,16(sp)
   1775c:	6880080c 	andi	r2,r13,32
   17760:	20c00104 	addi	r3,r4,4
   17764:	1001c01e 	bne	r2,zero,17e68 <___vfiprintf_internal_r+0x10ac>
   17768:	6880040c 	andi	r2,r13,16
   1776c:	1001df1e 	bne	r2,zero,17eec <___vfiprintf_internal_r+0x1130>
   17770:	6b40100c 	andi	r13,r13,64
   17774:	6801dd26 	beq	r13,zero,17eec <___vfiprintf_internal_r+0x1130>
   17778:	d8800417 	ldw	r2,16(sp)
   1777c:	d8c00415 	stw	r3,16(sp)
   17780:	d8c00117 	ldw	r3,4(sp)
   17784:	10800017 	ldw	r2,0(r2)
   17788:	10c0000d 	sth	r3,0(r2)
   1778c:	003db406 	br	16e60 <___vfiprintf_internal_r+0xa4>
   17790:	a0800007 	ldb	r2,0(r20)
   17794:	10c01b18 	cmpnei	r3,r2,108
   17798:	183fe326 	beq	r3,zero,17728 <___vfiprintf_internal_r+0x96c>
   1779c:	6b400414 	ori	r13,r13,16
   177a0:	003dc706 	br	16ec0 <___vfiprintf_internal_r+0x104>
   177a4:	d8c00417 	ldw	r3,16(sp)
   177a8:	d8000945 	stb	zero,37(sp)
   177ac:	05c00044 	movi	r23,1
   177b0:	18800017 	ldw	r2,0(r3)
   177b4:	18c00104 	addi	r3,r3,4
   177b8:	d8c00415 	stw	r3,16(sp)
   177bc:	d8800d05 	stb	r2,52(sp)
   177c0:	07000044 	movi	fp,1
   177c4:	dcc00d04 	addi	r19,sp,52
   177c8:	003e3306 	br	17098 <___vfiprintf_internal_r+0x2dc>
   177cc:	29403fcc 	andi	r5,r5,255
   177d0:	2801ee1e 	bne	r5,zero,17f8c <___vfiprintf_internal_r+0x11d0>
   177d4:	00c000b4 	movhi	r3,2
   177d8:	18c63d04 	addi	r3,r3,6388
   177dc:	d8c00515 	stw	r3,20(sp)
   177e0:	68c0080c 	andi	r3,r13,32
   177e4:	18001226 	beq	r3,zero,17830 <___vfiprintf_internal_r+0xa74>
   177e8:	d8c00417 	ldw	r3,16(sp)
   177ec:	1dc00017 	ldw	r23,0(r3)
   177f0:	1f000117 	ldw	fp,4(r3)
   177f4:	18c00204 	addi	r3,r3,8
   177f8:	d8c00415 	stw	r3,16(sp)
   177fc:	68c0004c 	andi	r3,r13,1
   17800:	18000226 	beq	r3,zero,1780c <___vfiprintf_internal_r+0xa50>
   17804:	bf06b03a 	or	r3,r23,fp
   17808:	1801911e 	bne	r3,zero,17e50 <___vfiprintf_internal_r+0x1094>
   1780c:	00800084 	movi	r2,2
   17810:	003eb706 	br	172f0 <___vfiprintf_internal_r+0x534>
   17814:	29403fcc 	andi	r5,r5,255
   17818:	2801e01e 	bne	r5,zero,17f9c <___vfiprintf_internal_r+0x11e0>
   1781c:	00c000b4 	movhi	r3,2
   17820:	18c63804 	addi	r3,r3,6368
   17824:	d8c00515 	stw	r3,20(sp)
   17828:	68c0080c 	andi	r3,r13,32
   1782c:	183fee1e 	bne	r3,zero,177e8 <___vfiprintf_internal_r+0xa2c>
   17830:	d9000417 	ldw	r4,16(sp)
   17834:	68c0040c 	andi	r3,r13,16
   17838:	25c00017 	ldw	r23,0(r4)
   1783c:	21000104 	addi	r4,r4,4
   17840:	d9000415 	stw	r4,16(sp)
   17844:	18015a1e 	bne	r3,zero,17db0 <___vfiprintf_internal_r+0xff4>
   17848:	68c0100c 	andi	r3,r13,64
   1784c:	18015826 	beq	r3,zero,17db0 <___vfiprintf_internal_r+0xff4>
   17850:	bdffffcc 	andi	r23,r23,65535
   17854:	0039883a 	mov	fp,zero
   17858:	003fe806 	br	177fc <___vfiprintf_internal_r+0xa40>
   1785c:	d8800417 	ldw	r2,16(sp)
   17860:	d8000945 	stb	zero,37(sp)
   17864:	14c00017 	ldw	r19,0(r2)
   17868:	10c00104 	addi	r3,r2,4
   1786c:	9801a526 	beq	r19,zero,17f04 <___vfiprintf_internal_r+0x1148>
   17870:	40bfffe0 	cmpeqi	r2,r8,-1
   17874:	10018a1e 	bne	r2,zero,17ea0 <___vfiprintf_internal_r+0x10e4>
   17878:	400d883a 	mov	r6,r8
   1787c:	000b883a 	mov	r5,zero
   17880:	9809883a 	mov	r4,r19
   17884:	d8c00315 	stw	r3,12(sp)
   17888:	db400215 	stw	r13,8(sp)
   1788c:	da000015 	stw	r8,0(sp)
   17890:	0014eb40 	call	14eb4 <memchr>
   17894:	da000017 	ldw	r8,0(sp)
   17898:	db400217 	ldw	r13,8(sp)
   1789c:	d8c00317 	ldw	r3,12(sp)
   178a0:	1001b426 	beq	r2,zero,17f74 <___vfiprintf_internal_r+0x11b8>
   178a4:	14f9c83a 	sub	fp,r2,r19
   178a8:	e02f883a 	mov	r23,fp
   178ac:	d8c00415 	stw	r3,16(sp)
   178b0:	003df906 	br	17098 <___vfiprintf_internal_r+0x2dc>
   178b4:	a0800007 	ldb	r2,0(r20)
   178b8:	6b400814 	ori	r13,r13,32
   178bc:	003d8006 	br	16ec0 <___vfiprintf_internal_r+0x104>
   178c0:	d8c00417 	ldw	r3,16(sp)
   178c4:	00800c04 	movi	r2,48
   178c8:	d8800985 	stb	r2,38(sp)
   178cc:	00801e04 	movi	r2,120
   178d0:	010000b4 	movhi	r4,2
   178d4:	d88009c5 	stb	r2,39(sp)
   178d8:	18800104 	addi	r2,r3,4
   178dc:	d8800415 	stw	r2,16(sp)
   178e0:	20863804 	addi	r2,r4,6368
   178e4:	d8800515 	stw	r2,20(sp)
   178e8:	1dc00017 	ldw	r23,0(r3)
   178ec:	0039883a 	mov	fp,zero
   178f0:	6b400094 	ori	r13,r13,2
   178f4:	00800084 	movi	r2,2
   178f8:	003e7d06 	br	172f0 <___vfiprintf_internal_r+0x534>
   178fc:	00c00044 	movi	r3,1
   17900:	e005883a 	mov	r2,fp
   17904:	dcc01715 	stw	r19,92(sp)
   17908:	df001815 	stw	fp,96(sp)
   1790c:	df000c15 	stw	fp,48(sp)
   17910:	d8c00b15 	stw	r3,44(sp)
   17914:	9021883a 	mov	r16,r18
   17918:	84000204 	addi	r16,r16,8
   1791c:	003e2606 	br	171b8 <___vfiprintf_internal_r+0x3fc>
   17920:	01400044 	movi	r5,1
   17924:	0009883a 	mov	r4,zero
   17928:	9021883a 	mov	r16,r18
   1792c:	003ec406 	br	17440 <___vfiprintf_internal_r+0x684>
   17930:	8dc7c83a 	sub	r3,r17,r23
   17934:	00fe0f0e 	bge	zero,r3,17174 <___vfiprintf_internal_r+0x3b8>
   17938:	19800450 	cmplti	r6,r3,17
   1793c:	01c000b4 	movhi	r7,2
   17940:	3001a01e 	bne	r6,zero,17fc4 <___vfiprintf_internal_r+0x1208>
   17944:	39c71804 	addi	r7,r7,7264
   17948:	03400404 	movi	r13,16
   1794c:	00000606 	br	17968 <___vfiprintf_internal_r+0xbac>
   17950:	21800084 	addi	r6,r4,2
   17954:	84000204 	addi	r16,r16,8
   17958:	2809883a 	mov	r4,r5
   1795c:	18fffc04 	addi	r3,r3,-16
   17960:	19400448 	cmpgei	r5,r3,17
   17964:	28001c26 	beq	r5,zero,179d8 <___vfiprintf_internal_r+0xc1c>
   17968:	21400044 	addi	r5,r4,1
   1796c:	10800404 	addi	r2,r2,16
   17970:	81c00015 	stw	r7,0(r16)
   17974:	83400115 	stw	r13,4(r16)
   17978:	d8800c15 	stw	r2,48(sp)
   1797c:	d9400b15 	stw	r5,44(sp)
   17980:	29800208 	cmpgei	r6,r5,8
   17984:	303ff226 	beq	r6,zero,17950 <___vfiprintf_internal_r+0xb94>
   17988:	d9800a04 	addi	r6,sp,40
   1798c:	a80b883a 	mov	r5,r21
   17990:	b009883a 	mov	r4,r22
   17994:	10007426 	beq	r2,zero,17b68 <___vfiprintf_internal_r+0xdac>
   17998:	d9c00615 	stw	r7,24(sp)
   1799c:	d8c00315 	stw	r3,12(sp)
   179a0:	da000215 	stw	r8,8(sp)
   179a4:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   179a8:	103e141e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   179ac:	d8c00317 	ldw	r3,12(sp)
   179b0:	d9000b17 	ldw	r4,44(sp)
   179b4:	d8800c17 	ldw	r2,48(sp)
   179b8:	18fffc04 	addi	r3,r3,-16
   179bc:	19400448 	cmpgei	r5,r3,17
   179c0:	d9c00617 	ldw	r7,24(sp)
   179c4:	da000217 	ldw	r8,8(sp)
   179c8:	9021883a 	mov	r16,r18
   179cc:	21800044 	addi	r6,r4,1
   179d0:	03400404 	movi	r13,16
   179d4:	283fe41e 	bne	r5,zero,17968 <___vfiprintf_internal_r+0xbac>
   179d8:	10c5883a 	add	r2,r2,r3
   179dc:	80c00115 	stw	r3,4(r16)
   179e0:	81c00015 	stw	r7,0(r16)
   179e4:	d8800c15 	stw	r2,48(sp)
   179e8:	d9800b15 	stw	r6,44(sp)
   179ec:	30c00208 	cmpgei	r3,r6,8
   179f0:	18011326 	beq	r3,zero,17e40 <___vfiprintf_internal_r+0x1084>
   179f4:	10014b26 	beq	r2,zero,17f24 <___vfiprintf_internal_r+0x1168>
   179f8:	d9800a04 	addi	r6,sp,40
   179fc:	a80b883a 	mov	r5,r21
   17a00:	b009883a 	mov	r4,r22
   17a04:	da000215 	stw	r8,8(sp)
   17a08:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17a0c:	103dfb1e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17a10:	da000217 	ldw	r8,8(sp)
   17a14:	d9000b17 	ldw	r4,44(sp)
   17a18:	d8800c17 	ldw	r2,48(sp)
   17a1c:	4711c83a 	sub	r8,r8,fp
   17a20:	9021883a 	mov	r16,r18
   17a24:	21400044 	addi	r5,r4,1
   17a28:	023dd40e 	bge	zero,r8,1717c <___vfiprintf_internal_r+0x3c0>
   17a2c:	01c000b4 	movhi	r7,2
   17a30:	40c00450 	cmplti	r3,r8,17
   17a34:	39c71804 	addi	r7,r7,7264
   17a38:	03400404 	movi	r13,16
   17a3c:	18000726 	beq	r3,zero,17a5c <___vfiprintf_internal_r+0xca0>
   17a40:	00002006 	br	17ac4 <___vfiprintf_internal_r+0xd08>
   17a44:	21400084 	addi	r5,r4,2
   17a48:	84000204 	addi	r16,r16,8
   17a4c:	1809883a 	mov	r4,r3
   17a50:	423ffc04 	addi	r8,r8,-16
   17a54:	40c00448 	cmpgei	r3,r8,17
   17a58:	18001a26 	beq	r3,zero,17ac4 <___vfiprintf_internal_r+0xd08>
   17a5c:	20c00044 	addi	r3,r4,1
   17a60:	10800404 	addi	r2,r2,16
   17a64:	81c00015 	stw	r7,0(r16)
   17a68:	83400115 	stw	r13,4(r16)
   17a6c:	d8800c15 	stw	r2,48(sp)
   17a70:	d8c00b15 	stw	r3,44(sp)
   17a74:	19400208 	cmpgei	r5,r3,8
   17a78:	283ff226 	beq	r5,zero,17a44 <___vfiprintf_internal_r+0xc88>
   17a7c:	d9800a04 	addi	r6,sp,40
   17a80:	a80b883a 	mov	r5,r21
   17a84:	b009883a 	mov	r4,r22
   17a88:	10001826 	beq	r2,zero,17aec <___vfiprintf_internal_r+0xd30>
   17a8c:	d9c00315 	stw	r7,12(sp)
   17a90:	da000215 	stw	r8,8(sp)
   17a94:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17a98:	103dd81e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17a9c:	da000217 	ldw	r8,8(sp)
   17aa0:	d9000b17 	ldw	r4,44(sp)
   17aa4:	d8800c17 	ldw	r2,48(sp)
   17aa8:	423ffc04 	addi	r8,r8,-16
   17aac:	40c00448 	cmpgei	r3,r8,17
   17ab0:	d9c00317 	ldw	r7,12(sp)
   17ab4:	9021883a 	mov	r16,r18
   17ab8:	21400044 	addi	r5,r4,1
   17abc:	03400404 	movi	r13,16
   17ac0:	183fe61e 	bne	r3,zero,17a5c <___vfiprintf_internal_r+0xca0>
   17ac4:	1205883a 	add	r2,r2,r8
   17ac8:	81c00015 	stw	r7,0(r16)
   17acc:	82000115 	stw	r8,4(r16)
   17ad0:	d8800c15 	stw	r2,48(sp)
   17ad4:	d9400b15 	stw	r5,44(sp)
   17ad8:	28c00208 	cmpgei	r3,r5,8
   17adc:	1800a11e 	bne	r3,zero,17d64 <___vfiprintf_internal_r+0xfa8>
   17ae0:	84000204 	addi	r16,r16,8
   17ae4:	29400044 	addi	r5,r5,1
   17ae8:	003da406 	br	1717c <___vfiprintf_internal_r+0x3c0>
   17aec:	01400044 	movi	r5,1
   17af0:	0009883a 	mov	r4,zero
   17af4:	9021883a 	mov	r16,r18
   17af8:	003fd506 	br	17a50 <___vfiprintf_internal_r+0xc94>
   17afc:	10c00060 	cmpeqi	r3,r2,1
   17b00:	18011a1e 	bne	r3,zero,17f6c <___vfiprintf_internal_r+0x11b0>
   17b04:	108000a0 	cmpeqi	r2,r2,2
   17b08:	db400017 	ldw	r13,0(sp)
   17b0c:	103ecf26 	beq	r2,zero,1764c <___vfiprintf_internal_r+0x890>
   17b10:	9027883a 	mov	r19,r18
   17b14:	d9000517 	ldw	r4,20(sp)
   17b18:	b88003cc 	andi	r2,r23,15
   17b1c:	e006973a 	slli	r3,fp,28
   17b20:	b82ed13a 	srli	r23,r23,4
   17b24:	2085883a 	add	r2,r4,r2
   17b28:	10800003 	ldbu	r2,0(r2)
   17b2c:	e038d13a 	srli	fp,fp,4
   17b30:	1deeb03a 	or	r23,r3,r23
   17b34:	98bfffc5 	stb	r2,-1(r19)
   17b38:	bf04b03a 	or	r2,r23,fp
   17b3c:	9cffffc4 	addi	r19,r19,-1
   17b40:	103ff41e 	bne	r2,zero,17b14 <___vfiprintf_internal_r+0xd58>
   17b44:	94f9c83a 	sub	fp,r18,r19
   17b48:	db400015 	stw	r13,0(sp)
   17b4c:	003ed806 	br	176b0 <___vfiprintf_internal_r+0x8f4>
   17b50:	d9800a04 	addi	r6,sp,40
   17b54:	a80b883a 	mov	r5,r21
   17b58:	b009883a 	mov	r4,r22
   17b5c:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17b60:	103da026 	beq	r2,zero,171e4 <___vfiprintf_internal_r+0x428>
   17b64:	003da506 	br	171fc <___vfiprintf_internal_r+0x440>
   17b68:	01800044 	movi	r6,1
   17b6c:	0009883a 	mov	r4,zero
   17b70:	9021883a 	mov	r16,r18
   17b74:	003f7906 	br	1795c <___vfiprintf_internal_r+0xba0>
   17b78:	10009626 	beq	r2,zero,17dd4 <___vfiprintf_internal_r+0x1018>
   17b7c:	d9800a04 	addi	r6,sp,40
   17b80:	a80b883a 	mov	r5,r21
   17b84:	b009883a 	mov	r4,r22
   17b88:	da000615 	stw	r8,24(sp)
   17b8c:	db400315 	stw	r13,12(sp)
   17b90:	db800215 	stw	r14,8(sp)
   17b94:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17b98:	103d981e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17b9c:	d9000b17 	ldw	r4,44(sp)
   17ba0:	d8800c17 	ldw	r2,48(sp)
   17ba4:	da000617 	ldw	r8,24(sp)
   17ba8:	db400317 	ldw	r13,12(sp)
   17bac:	db800217 	ldw	r14,8(sp)
   17bb0:	9021883a 	mov	r16,r18
   17bb4:	21400044 	addi	r5,r4,1
   17bb8:	003d5406 	br	1710c <___vfiprintf_internal_r+0x350>
   17bbc:	d8800984 	addi	r2,sp,38
   17bc0:	d8801715 	stw	r2,92(sp)
   17bc4:	00800084 	movi	r2,2
   17bc8:	d8801815 	stw	r2,96(sp)
   17bcc:	01400044 	movi	r5,1
   17bd0:	9021883a 	mov	r16,r18
   17bd4:	2809883a 	mov	r4,r5
   17bd8:	84000204 	addi	r16,r16,8
   17bdc:	21400044 	addi	r5,r4,1
   17be0:	003d6206 	br	1716c <___vfiprintf_internal_r+0x3b0>
   17be4:	db400017 	ldw	r13,0(sp)
   17be8:	003e9406 	br	1763c <___vfiprintf_internal_r+0x880>
   17bec:	9027883a 	mov	r19,r18
   17bf0:	b809883a 	mov	r4,r23
   17bf4:	e00b883a 	mov	r5,fp
   17bf8:	01800284 	movi	r6,10
   17bfc:	000f883a 	mov	r7,zero
   17c00:	db800315 	stw	r14,12(sp)
   17c04:	da000215 	stw	r8,8(sp)
   17c08:	db400015 	stw	r13,0(sp)
   17c0c:	00197e40 	call	197e4 <__umoddi3>
   17c10:	10800c04 	addi	r2,r2,48
   17c14:	b809883a 	mov	r4,r23
   17c18:	e00b883a 	mov	r5,fp
   17c1c:	98bfffc5 	stb	r2,-1(r19)
   17c20:	01800284 	movi	r6,10
   17c24:	000f883a 	mov	r7,zero
   17c28:	00192540 	call	19254 <__udivdi3>
   17c2c:	e009883a 	mov	r4,fp
   17c30:	b80b883a 	mov	r5,r23
   17c34:	db400017 	ldw	r13,0(sp)
   17c38:	da000217 	ldw	r8,8(sp)
   17c3c:	db800317 	ldw	r14,12(sp)
   17c40:	9cffffc4 	addi	r19,r19,-1
   17c44:	102f883a 	mov	r23,r2
   17c48:	1839883a 	mov	fp,r3
   17c4c:	203fe81e 	bne	r4,zero,17bf0 <___vfiprintf_internal_r+0xe34>
   17c50:	294002a8 	cmpgeui	r5,r5,10
   17c54:	283fe61e 	bne	r5,zero,17bf0 <___vfiprintf_internal_r+0xe34>
   17c58:	94f9c83a 	sub	fp,r18,r19
   17c5c:	003e9406 	br	176b0 <___vfiprintf_internal_r+0x8f4>
   17c60:	19400450 	cmplti	r5,r3,17
   17c64:	01c000b4 	movhi	r7,2
   17c68:	2800ce1e 	bne	r5,zero,17fa4 <___vfiprintf_internal_r+0x11e8>
   17c6c:	39c71c04 	addi	r7,r7,7280
   17c70:	03c00404 	movi	r15,16
   17c74:	00000706 	br	17c94 <___vfiprintf_internal_r+0xed8>
   17c78:	27c00084 	addi	ra,r4,2
   17c7c:	84000204 	addi	r16,r16,8
   17c80:	3009883a 	mov	r4,r6
   17c84:	18fffc04 	addi	r3,r3,-16
   17c88:	19400448 	cmpgei	r5,r3,17
   17c8c:	28002026 	beq	r5,zero,17d10 <___vfiprintf_internal_r+0xf54>
   17c90:	21800044 	addi	r6,r4,1
   17c94:	10800404 	addi	r2,r2,16
   17c98:	81c00015 	stw	r7,0(r16)
   17c9c:	83c00115 	stw	r15,4(r16)
   17ca0:	d8800c15 	stw	r2,48(sp)
   17ca4:	d9800b15 	stw	r6,44(sp)
   17ca8:	31400208 	cmpgei	r5,r6,8
   17cac:	283ff226 	beq	r5,zero,17c78 <___vfiprintf_internal_r+0xebc>
   17cb0:	d9800a04 	addi	r6,sp,40
   17cb4:	a80b883a 	mov	r5,r21
   17cb8:	b009883a 	mov	r4,r22
   17cbc:	10001f26 	beq	r2,zero,17d3c <___vfiprintf_internal_r+0xf80>
   17cc0:	d9c00815 	stw	r7,32(sp)
   17cc4:	d8c00715 	stw	r3,28(sp)
   17cc8:	da000615 	stw	r8,24(sp)
   17ccc:	db400315 	stw	r13,12(sp)
   17cd0:	db800215 	stw	r14,8(sp)
   17cd4:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17cd8:	103d481e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17cdc:	d8c00717 	ldw	r3,28(sp)
   17ce0:	d9000b17 	ldw	r4,44(sp)
   17ce4:	d8800c17 	ldw	r2,48(sp)
   17ce8:	18fffc04 	addi	r3,r3,-16
   17cec:	19400448 	cmpgei	r5,r3,17
   17cf0:	d9c00817 	ldw	r7,32(sp)
   17cf4:	da000617 	ldw	r8,24(sp)
   17cf8:	db400317 	ldw	r13,12(sp)
   17cfc:	db800217 	ldw	r14,8(sp)
   17d00:	9021883a 	mov	r16,r18
   17d04:	27c00044 	addi	ra,r4,1
   17d08:	03c00404 	movi	r15,16
   17d0c:	283fe01e 	bne	r5,zero,17c90 <___vfiprintf_internal_r+0xed4>
   17d10:	10c5883a 	add	r2,r2,r3
   17d14:	80c00115 	stw	r3,4(r16)
   17d18:	81c00015 	stw	r7,0(r16)
   17d1c:	d8800c15 	stw	r2,48(sp)
   17d20:	dfc00b15 	stw	ra,44(sp)
   17d24:	f8c00208 	cmpgei	r3,ra,8
   17d28:	18002f1e 	bne	r3,zero,17de8 <___vfiprintf_internal_r+0x102c>
   17d2c:	84000204 	addi	r16,r16,8
   17d30:	f9400044 	addi	r5,ra,1
   17d34:	f809883a 	mov	r4,ra
   17d38:	003ce606 	br	170d4 <___vfiprintf_internal_r+0x318>
   17d3c:	0009883a 	mov	r4,zero
   17d40:	07c00044 	movi	ra,1
   17d44:	9021883a 	mov	r16,r18
   17d48:	003fce06 	br	17c84 <___vfiprintf_internal_r+0xec8>
   17d4c:	8dc0010e 	bge	r17,r23,17d54 <___vfiprintf_internal_r+0xf98>
   17d50:	b823883a 	mov	r17,r23
   17d54:	d8800117 	ldw	r2,4(sp)
   17d58:	1445883a 	add	r2,r2,r17
   17d5c:	d8800115 	stw	r2,4(sp)
   17d60:	003d2006 	br	171e4 <___vfiprintf_internal_r+0x428>
   17d64:	103ee526 	beq	r2,zero,178fc <___vfiprintf_internal_r+0xb40>
   17d68:	d9800a04 	addi	r6,sp,40
   17d6c:	a80b883a 	mov	r5,r21
   17d70:	b009883a 	mov	r4,r22
   17d74:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17d78:	103d201e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17d7c:	d9400b17 	ldw	r5,44(sp)
   17d80:	d8800c17 	ldw	r2,48(sp)
   17d84:	9021883a 	mov	r16,r18
   17d88:	29400044 	addi	r5,r5,1
   17d8c:	003cfb06 	br	1717c <___vfiprintf_internal_r+0x3c0>
   17d90:	d8000b15 	stw	zero,44(sp)
   17d94:	9021883a 	mov	r16,r18
   17d98:	003d7306 	br	17368 <___vfiprintf_internal_r+0x5ac>
   17d9c:	4000731e 	bne	r8,zero,17f6c <___vfiprintf_internal_r+0x11b0>
   17da0:	0011883a 	mov	r8,zero
   17da4:	0039883a 	mov	fp,zero
   17da8:	9027883a 	mov	r19,r18
   17dac:	003e4006 	br	176b0 <___vfiprintf_internal_r+0x8f4>
   17db0:	0039883a 	mov	fp,zero
   17db4:	003e9106 	br	177fc <___vfiprintf_internal_r+0xa40>
   17db8:	b839d7fa 	srai	fp,r23,31
   17dbc:	e005883a 	mov	r2,fp
   17dc0:	003dd406 	br	17514 <___vfiprintf_internal_r+0x758>
   17dc4:	01400044 	movi	r5,1
   17dc8:	0009883a 	mov	r4,zero
   17dcc:	9021883a 	mov	r16,r18
   17dd0:	003ce606 	br	1716c <___vfiprintf_internal_r+0x3b0>
   17dd4:	70002b1e 	bne	r14,zero,17e84 <___vfiprintf_internal_r+0x10c8>
   17dd8:	0009883a 	mov	r4,zero
   17ddc:	01400044 	movi	r5,1
   17de0:	9021883a 	mov	r16,r18
   17de4:	003ce106 	br	1716c <___vfiprintf_internal_r+0x3b0>
   17de8:	10003726 	beq	r2,zero,17ec8 <___vfiprintf_internal_r+0x110c>
   17dec:	d9800a04 	addi	r6,sp,40
   17df0:	a80b883a 	mov	r5,r21
   17df4:	b009883a 	mov	r4,r22
   17df8:	da000615 	stw	r8,24(sp)
   17dfc:	db400315 	stw	r13,12(sp)
   17e00:	db800215 	stw	r14,8(sp)
   17e04:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17e08:	103cfc1e 	bne	r2,zero,171fc <___vfiprintf_internal_r+0x440>
   17e0c:	d9000b17 	ldw	r4,44(sp)
   17e10:	d8800c17 	ldw	r2,48(sp)
   17e14:	da000617 	ldw	r8,24(sp)
   17e18:	db400317 	ldw	r13,12(sp)
   17e1c:	db800217 	ldw	r14,8(sp)
   17e20:	9021883a 	mov	r16,r18
   17e24:	21400044 	addi	r5,r4,1
   17e28:	003caa06 	br	170d4 <___vfiprintf_internal_r+0x318>
   17e2c:	a0800007 	ldb	r2,0(r20)
   17e30:	d8c00415 	stw	r3,16(sp)
   17e34:	003c2206 	br	16ec0 <___vfiprintf_internal_r+0x104>
   17e38:	9027883a 	mov	r19,r18
   17e3c:	003e1c06 	br	176b0 <___vfiprintf_internal_r+0x8f4>
   17e40:	84000204 	addi	r16,r16,8
   17e44:	31400044 	addi	r5,r6,1
   17e48:	3009883a 	mov	r4,r6
   17e4c:	003cc906 	br	17174 <___vfiprintf_internal_r+0x3b8>
   17e50:	00c00c04 	movi	r3,48
   17e54:	d88009c5 	stb	r2,39(sp)
   17e58:	d8c00985 	stb	r3,38(sp)
   17e5c:	6b400094 	ori	r13,r13,2
   17e60:	00800084 	movi	r2,2
   17e64:	003d2206 	br	172f0 <___vfiprintf_internal_r+0x534>
   17e68:	d9400117 	ldw	r5,4(sp)
   17e6c:	20800017 	ldw	r2,0(r4)
   17e70:	d8c00415 	stw	r3,16(sp)
   17e74:	2809d7fa 	srai	r4,r5,31
   17e78:	11400015 	stw	r5,0(r2)
   17e7c:	11000115 	stw	r4,4(r2)
   17e80:	003bf706 	br	16e60 <___vfiprintf_internal_r+0xa4>
   17e84:	d8800984 	addi	r2,sp,38
   17e88:	d8801715 	stw	r2,92(sp)
   17e8c:	00800084 	movi	r2,2
   17e90:	d8801815 	stw	r2,96(sp)
   17e94:	01000044 	movi	r4,1
   17e98:	9021883a 	mov	r16,r18
   17e9c:	003f4e06 	br	17bd8 <___vfiprintf_internal_r+0xe1c>
   17ea0:	9809883a 	mov	r4,r19
   17ea4:	d8c00215 	stw	r3,8(sp)
   17ea8:	db400015 	stw	r13,0(sp)
   17eac:	000d8b00 	call	d8b0 <strlen>
   17eb0:	d8c00217 	ldw	r3,8(sp)
   17eb4:	db400017 	ldw	r13,0(sp)
   17eb8:	1039883a 	mov	fp,r2
   17ebc:	102f883a 	mov	r23,r2
   17ec0:	d8c00415 	stw	r3,16(sp)
   17ec4:	003c7406 	br	17098 <___vfiprintf_internal_r+0x2dc>
   17ec8:	d8c00947 	ldb	r3,37(sp)
   17ecc:	18001b26 	beq	r3,zero,17f3c <___vfiprintf_internal_r+0x1180>
   17ed0:	d8800944 	addi	r2,sp,37
   17ed4:	d8801715 	stw	r2,92(sp)
   17ed8:	00800044 	movi	r2,1
   17edc:	d8801815 	stw	r2,96(sp)
   17ee0:	01400044 	movi	r5,1
   17ee4:	9021883a 	mov	r16,r18
   17ee8:	003c8506 	br	17100 <___vfiprintf_internal_r+0x344>
   17eec:	d8800417 	ldw	r2,16(sp)
   17ef0:	10800017 	ldw	r2,0(r2)
   17ef4:	d8c00415 	stw	r3,16(sp)
   17ef8:	d8c00117 	ldw	r3,4(sp)
   17efc:	10c00015 	stw	r3,0(r2)
   17f00:	003bd706 	br	16e60 <___vfiprintf_internal_r+0xa4>
   17f04:	408001f0 	cmpltui	r2,r8,7
   17f08:	4039883a 	mov	fp,r8
   17f0c:	10000926 	beq	r2,zero,17f34 <___vfiprintf_internal_r+0x1178>
   17f10:	04c000b4 	movhi	r19,2
   17f14:	e02f883a 	mov	r23,fp
   17f18:	d8c00415 	stw	r3,16(sp)
   17f1c:	9cc64204 	addi	r19,r19,6408
   17f20:	003c5d06 	br	17098 <___vfiprintf_internal_r+0x2dc>
   17f24:	01400044 	movi	r5,1
   17f28:	0009883a 	mov	r4,zero
   17f2c:	9021883a 	mov	r16,r18
   17f30:	003c9006 	br	17174 <___vfiprintf_internal_r+0x3b8>
   17f34:	07000184 	movi	fp,6
   17f38:	003ff506 	br	17f10 <___vfiprintf_internal_r+0x1154>
   17f3c:	703f1f1e 	bne	r14,zero,17bbc <___vfiprintf_internal_r+0xe00>
   17f40:	0009883a 	mov	r4,zero
   17f44:	01400044 	movi	r5,1
   17f48:	9021883a 	mov	r16,r18
   17f4c:	003c8906 	br	17174 <___vfiprintf_internal_r+0x3b8>
   17f50:	d9800945 	stb	r6,37(sp)
   17f54:	003c4a06 	br	17080 <___vfiprintf_internal_r+0x2c4>
   17f58:	d9800a04 	addi	r6,sp,40
   17f5c:	a80b883a 	mov	r5,r21
   17f60:	b009883a 	mov	r4,r22
   17f64:	0016cb00 	call	16cb0 <__sprint_r.part.0>
   17f68:	003ca406 	br	171fc <___vfiprintf_internal_r+0x440>
   17f6c:	db400017 	ldw	r13,0(sp)
   17f70:	003d7506 	br	17548 <___vfiprintf_internal_r+0x78c>
   17f74:	402f883a 	mov	r23,r8
   17f78:	d8c00415 	stw	r3,16(sp)
   17f7c:	4039883a 	mov	fp,r8
   17f80:	003c4506 	br	17098 <___vfiprintf_internal_r+0x2dc>
   17f84:	d9800945 	stb	r6,37(sp)
   17f88:	003d9106 	br	175d0 <___vfiprintf_internal_r+0x814>
   17f8c:	d9800945 	stb	r6,37(sp)
   17f90:	003e1006 	br	177d4 <___vfiprintf_internal_r+0xa18>
   17f94:	d9800945 	stb	r6,37(sp)
   17f98:	003def06 	br	17758 <___vfiprintf_internal_r+0x99c>
   17f9c:	d9800945 	stb	r6,37(sp)
   17fa0:	003e1e06 	br	1781c <___vfiprintf_internal_r+0xa60>
   17fa4:	303f883a 	mov	ra,r6
   17fa8:	39c71c04 	addi	r7,r7,7280
   17fac:	003f5806 	br	17d10 <___vfiprintf_internal_r+0xf54>
   17fb0:	d9800945 	stb	r6,37(sp)
   17fb4:	003d4f06 	br	174f4 <___vfiprintf_internal_r+0x738>
   17fb8:	21400044 	addi	r5,r4,1
   17fbc:	39c71c04 	addi	r7,r7,7280
   17fc0:	003d3906 	br	174a8 <___vfiprintf_internal_r+0x6ec>
   17fc4:	280d883a 	mov	r6,r5
   17fc8:	39c71804 	addi	r7,r7,7264
   17fcc:	003e8206 	br	179d8 <___vfiprintf_internal_r+0xc1c>
   17fd0:	00bfffc4 	movi	r2,-1
   17fd4:	d8800115 	stw	r2,4(sp)
   17fd8:	003c8b06 	br	17208 <___vfiprintf_internal_r+0x44c>
   17fdc:	d8800417 	ldw	r2,16(sp)
   17fe0:	12000017 	ldw	r8,0(r2)
   17fe4:	10c00104 	addi	r3,r2,4
   17fe8:	4000010e 	bge	r8,zero,17ff0 <___vfiprintf_internal_r+0x1234>
   17fec:	023fffc4 	movi	r8,-1
   17ff0:	a0800043 	ldbu	r2,1(r20)
   17ff4:	d8c00415 	stw	r3,16(sp)
   17ff8:	2029883a 	mov	r20,r4
   17ffc:	10803fcc 	andi	r2,r2,255
   18000:	1080201c 	xori	r2,r2,128
   18004:	10bfe004 	addi	r2,r2,-128
   18008:	003bad06 	br	16ec0 <___vfiprintf_internal_r+0x104>

0001800c <__vfiprintf_internal>:
   1800c:	00c000b4 	movhi	r3,2
   18010:	2005883a 	mov	r2,r4
   18014:	190f1717 	ldw	r4,15452(r3)
   18018:	300f883a 	mov	r7,r6
   1801c:	280d883a 	mov	r6,r5
   18020:	100b883a 	mov	r5,r2
   18024:	0016dbc1 	jmpi	16dbc <___vfiprintf_internal_r>

00018028 <__sbprintf>:
   18028:	2880030b 	ldhu	r2,12(r5)
   1802c:	2b001917 	ldw	r12,100(r5)
   18030:	2ac0038b 	ldhu	r11,14(r5)
   18034:	2a800717 	ldw	r10,28(r5)
   18038:	2a400917 	ldw	r9,36(r5)
   1803c:	defee204 	addi	sp,sp,-1144
   18040:	da001a04 	addi	r8,sp,104
   18044:	00c10004 	movi	r3,1024
   18048:	dc011a15 	stw	r16,1128(sp)
   1804c:	10bfff4c 	andi	r2,r2,65533
   18050:	2821883a 	mov	r16,r5
   18054:	d80b883a 	mov	r5,sp
   18058:	dc811c15 	stw	r18,1136(sp)
   1805c:	dc411b15 	stw	r17,1132(sp)
   18060:	dfc11d15 	stw	ra,1140(sp)
   18064:	2025883a 	mov	r18,r4
   18068:	d880030d 	sth	r2,12(sp)
   1806c:	db001915 	stw	r12,100(sp)
   18070:	dac0038d 	sth	r11,14(sp)
   18074:	da800715 	stw	r10,28(sp)
   18078:	da400915 	stw	r9,36(sp)
   1807c:	da000015 	stw	r8,0(sp)
   18080:	da000415 	stw	r8,16(sp)
   18084:	d8c00215 	stw	r3,8(sp)
   18088:	d8c00515 	stw	r3,20(sp)
   1808c:	d8000615 	stw	zero,24(sp)
   18090:	0016dbc0 	call	16dbc <___vfiprintf_internal_r>
   18094:	1023883a 	mov	r17,r2
   18098:	10000d0e 	bge	r2,zero,180d0 <__sbprintf+0xa8>
   1809c:	d880030b 	ldhu	r2,12(sp)
   180a0:	1080100c 	andi	r2,r2,64
   180a4:	10000326 	beq	r2,zero,180b4 <__sbprintf+0x8c>
   180a8:	8080030b 	ldhu	r2,12(r16)
   180ac:	10801014 	ori	r2,r2,64
   180b0:	8080030d 	sth	r2,12(r16)
   180b4:	8805883a 	mov	r2,r17
   180b8:	dfc11d17 	ldw	ra,1140(sp)
   180bc:	dc811c17 	ldw	r18,1136(sp)
   180c0:	dc411b17 	ldw	r17,1132(sp)
   180c4:	dc011a17 	ldw	r16,1128(sp)
   180c8:	dec11e04 	addi	sp,sp,1144
   180cc:	f800283a 	ret
   180d0:	d80b883a 	mov	r5,sp
   180d4:	9009883a 	mov	r4,r18
   180d8:	00130240 	call	13024 <_fflush_r>
   180dc:	103fef26 	beq	r2,zero,1809c <__sbprintf+0x74>
   180e0:	047fffc4 	movi	r17,-1
   180e4:	003fed06 	br	1809c <__sbprintf+0x74>

000180e8 <__swbuf_r>:
   180e8:	defffb04 	addi	sp,sp,-20
   180ec:	dcc00315 	stw	r19,12(sp)
   180f0:	dc400115 	stw	r17,4(sp)
   180f4:	dc000015 	stw	r16,0(sp)
   180f8:	dfc00415 	stw	ra,16(sp)
   180fc:	dc800215 	stw	r18,8(sp)
   18100:	2027883a 	mov	r19,r4
   18104:	2823883a 	mov	r17,r5
   18108:	3021883a 	mov	r16,r6
   1810c:	20000226 	beq	r4,zero,18118 <__swbuf_r+0x30>
   18110:	20800e17 	ldw	r2,56(r4)
   18114:	10003e26 	beq	r2,zero,18210 <__swbuf_r+0x128>
   18118:	80800617 	ldw	r2,24(r16)
   1811c:	80c0030b 	ldhu	r3,12(r16)
   18120:	80800215 	stw	r2,8(r16)
   18124:	1880020c 	andi	r2,r3,8
   18128:	10001f26 	beq	r2,zero,181a8 <__swbuf_r+0xc0>
   1812c:	80800417 	ldw	r2,16(r16)
   18130:	10001d26 	beq	r2,zero,181a8 <__swbuf_r+0xc0>
   18134:	1948000c 	andi	r5,r3,8192
   18138:	8c803fcc 	andi	r18,r17,255
   1813c:	28002326 	beq	r5,zero,181cc <__swbuf_r+0xe4>
   18140:	80c00017 	ldw	r3,0(r16)
   18144:	81000517 	ldw	r4,20(r16)
   18148:	1885c83a 	sub	r2,r3,r2
   1814c:	1100290e 	bge	r2,r4,181f4 <__swbuf_r+0x10c>
   18150:	10800044 	addi	r2,r2,1
   18154:	81400217 	ldw	r5,8(r16)
   18158:	19000044 	addi	r4,r3,1
   1815c:	81000015 	stw	r4,0(r16)
   18160:	297fffc4 	addi	r5,r5,-1
   18164:	81400215 	stw	r5,8(r16)
   18168:	1c400005 	stb	r17,0(r3)
   1816c:	80c00517 	ldw	r3,20(r16)
   18170:	18802926 	beq	r3,r2,18218 <__swbuf_r+0x130>
   18174:	8080030b 	ldhu	r2,12(r16)
   18178:	1080004c 	andi	r2,r2,1
   1817c:	10000226 	beq	r2,zero,18188 <__swbuf_r+0xa0>
   18180:	90800298 	cmpnei	r2,r18,10
   18184:	10002426 	beq	r2,zero,18218 <__swbuf_r+0x130>
   18188:	9005883a 	mov	r2,r18
   1818c:	dfc00417 	ldw	ra,16(sp)
   18190:	dcc00317 	ldw	r19,12(sp)
   18194:	dc800217 	ldw	r18,8(sp)
   18198:	dc400117 	ldw	r17,4(sp)
   1819c:	dc000017 	ldw	r16,0(sp)
   181a0:	dec00504 	addi	sp,sp,20
   181a4:	f800283a 	ret
   181a8:	800b883a 	mov	r5,r16
   181ac:	9809883a 	mov	r4,r19
   181b0:	00113540 	call	11354 <__swsetup_r>
   181b4:	10001c1e 	bne	r2,zero,18228 <__swbuf_r+0x140>
   181b8:	80c0030b 	ldhu	r3,12(r16)
   181bc:	80800417 	ldw	r2,16(r16)
   181c0:	8c803fcc 	andi	r18,r17,255
   181c4:	1948000c 	andi	r5,r3,8192
   181c8:	283fdd1e 	bne	r5,zero,18140 <__swbuf_r+0x58>
   181cc:	81001917 	ldw	r4,100(r16)
   181d0:	18c80014 	ori	r3,r3,8192
   181d4:	0177ffc4 	movi	r5,-8193
   181d8:	2148703a 	and	r4,r4,r5
   181dc:	80c0030d 	sth	r3,12(r16)
   181e0:	80c00017 	ldw	r3,0(r16)
   181e4:	81001915 	stw	r4,100(r16)
   181e8:	81000517 	ldw	r4,20(r16)
   181ec:	1885c83a 	sub	r2,r3,r2
   181f0:	113fd716 	blt	r2,r4,18150 <__swbuf_r+0x68>
   181f4:	800b883a 	mov	r5,r16
   181f8:	9809883a 	mov	r4,r19
   181fc:	00130240 	call	13024 <_fflush_r>
   18200:	1000091e 	bne	r2,zero,18228 <__swbuf_r+0x140>
   18204:	80c00017 	ldw	r3,0(r16)
   18208:	00800044 	movi	r2,1
   1820c:	003fd106 	br	18154 <__swbuf_r+0x6c>
   18210:	001345c0 	call	1345c <__sinit>
   18214:	003fc006 	br	18118 <__swbuf_r+0x30>
   18218:	800b883a 	mov	r5,r16
   1821c:	9809883a 	mov	r4,r19
   18220:	00130240 	call	13024 <_fflush_r>
   18224:	103fd826 	beq	r2,zero,18188 <__swbuf_r+0xa0>
   18228:	04bfffc4 	movi	r18,-1
   1822c:	003fd606 	br	18188 <__swbuf_r+0xa0>

00018230 <__swbuf>:
   18230:	00c000b4 	movhi	r3,2
   18234:	2005883a 	mov	r2,r4
   18238:	190f1717 	ldw	r4,15452(r3)
   1823c:	280d883a 	mov	r6,r5
   18240:	100b883a 	mov	r5,r2
   18244:	00180e81 	jmpi	180e8 <__swbuf_r>

00018248 <_wctomb_r>:
   18248:	008000b4 	movhi	r2,2
   1824c:	108a3817 	ldw	r2,10464(r2)
   18250:	1000683a 	jmp	r2

00018254 <__ascii_wctomb>:
   18254:	28000926 	beq	r5,zero,1827c <__ascii_wctomb+0x28>
   18258:	30804030 	cmpltui	r2,r6,256
   1825c:	10000326 	beq	r2,zero,1826c <__ascii_wctomb+0x18>
   18260:	29800005 	stb	r6,0(r5)
   18264:	00800044 	movi	r2,1
   18268:	f800283a 	ret
   1826c:	00802284 	movi	r2,138
   18270:	20800015 	stw	r2,0(r4)
   18274:	00bfffc4 	movi	r2,-1
   18278:	f800283a 	ret
   1827c:	0005883a 	mov	r2,zero
   18280:	f800283a 	ret

00018284 <_write_r>:
   18284:	2807883a 	mov	r3,r5
   18288:	defffe04 	addi	sp,sp,-8
   1828c:	dc000015 	stw	r16,0(sp)
   18290:	300b883a 	mov	r5,r6
   18294:	008000b4 	movhi	r2,2
   18298:	380d883a 	mov	r6,r7
   1829c:	2021883a 	mov	r16,r4
   182a0:	1809883a 	mov	r4,r3
   182a4:	dfc00115 	stw	ra,4(sp)
   182a8:	10165b15 	stw	zero,22892(r2)
   182ac:	001aa7c0 	call	1aa7c <write>
   182b0:	10ffffd8 	cmpnei	r3,r2,-1
   182b4:	18000426 	beq	r3,zero,182c8 <_write_r+0x44>
   182b8:	dfc00117 	ldw	ra,4(sp)
   182bc:	dc000017 	ldw	r16,0(sp)
   182c0:	dec00204 	addi	sp,sp,8
   182c4:	f800283a 	ret
   182c8:	00c000b4 	movhi	r3,2
   182cc:	18d65b17 	ldw	r3,22892(r3)
   182d0:	183ff926 	beq	r3,zero,182b8 <_write_r+0x34>
   182d4:	80c00015 	stw	r3,0(r16)
   182d8:	dfc00117 	ldw	ra,4(sp)
   182dc:	dc000017 	ldw	r16,0(sp)
   182e0:	dec00204 	addi	sp,sp,8
   182e4:	f800283a 	ret

000182e8 <_close_r>:
   182e8:	defffe04 	addi	sp,sp,-8
   182ec:	dc000015 	stw	r16,0(sp)
   182f0:	008000b4 	movhi	r2,2
   182f4:	2021883a 	mov	r16,r4
   182f8:	2809883a 	mov	r4,r5
   182fc:	dfc00115 	stw	ra,4(sp)
   18300:	10165b15 	stw	zero,22892(r2)
   18304:	0019e540 	call	19e54 <close>
   18308:	10ffffd8 	cmpnei	r3,r2,-1
   1830c:	18000426 	beq	r3,zero,18320 <_close_r+0x38>
   18310:	dfc00117 	ldw	ra,4(sp)
   18314:	dc000017 	ldw	r16,0(sp)
   18318:	dec00204 	addi	sp,sp,8
   1831c:	f800283a 	ret
   18320:	00c000b4 	movhi	r3,2
   18324:	18d65b17 	ldw	r3,22892(r3)
   18328:	183ff926 	beq	r3,zero,18310 <_close_r+0x28>
   1832c:	80c00015 	stw	r3,0(r16)
   18330:	dfc00117 	ldw	ra,4(sp)
   18334:	dc000017 	ldw	r16,0(sp)
   18338:	dec00204 	addi	sp,sp,8
   1833c:	f800283a 	ret

00018340 <__assert_func>:
   18340:	008000b4 	movhi	r2,2
   18344:	120f1717 	ldw	r8,15452(r2)
   18348:	defffc04 	addi	sp,sp,-16
   1834c:	3807883a 	mov	r3,r7
   18350:	3005883a 	mov	r2,r6
   18354:	dfc00315 	stw	ra,12(sp)
   18358:	42400317 	ldw	r9,12(r8)
   1835c:	200f883a 	mov	r7,r4
   18360:	2811883a 	mov	r8,r5
   18364:	180d883a 	mov	r6,r3
   18368:	10000a26 	beq	r2,zero,18394 <__assert_func+0x54>
   1836c:	00c000b4 	movhi	r3,2
   18370:	18c72004 	addi	r3,r3,7296
   18374:	014000b4 	movhi	r5,2
   18378:	29472404 	addi	r5,r5,7312
   1837c:	4809883a 	mov	r4,r9
   18380:	d8c00115 	stw	r3,4(sp)
   18384:	da000015 	stw	r8,0(sp)
   18388:	d8800215 	stw	r2,8(sp)
   1838c:	00186540 	call	18654 <fiprintf>
   18390:	0018b040 	call	18b04 <abort>
   18394:	00c000b4 	movhi	r3,2
   18398:	18c72304 	addi	r3,r3,7308
   1839c:	1805883a 	mov	r2,r3
   183a0:	003ff406 	br	18374 <__assert_func+0x34>

000183a4 <__assert>:
   183a4:	deffff04 	addi	sp,sp,-4
   183a8:	300f883a 	mov	r7,r6
   183ac:	000d883a 	mov	r6,zero
   183b0:	dfc00015 	stw	ra,0(sp)
   183b4:	00183400 	call	18340 <__assert_func>

000183b8 <_calloc_r>:
   183b8:	2984383a 	mulxuu	r2,r5,r6
   183bc:	deffff04 	addi	sp,sp,-4
   183c0:	dfc00015 	stw	ra,0(sp)
   183c4:	298b383a 	mul	r5,r5,r6
   183c8:	1000261e 	bne	r2,zero,18464 <_calloc_r+0xac>
   183cc:	000ce140 	call	ce14 <_malloc_r>
   183d0:	1009883a 	mov	r4,r2
   183d4:	10001626 	beq	r2,zero,18430 <_calloc_r+0x78>
   183d8:	11bfff17 	ldw	r6,-4(r2)
   183dc:	00bfff04 	movi	r2,-4
   183e0:	308c703a 	and	r6,r6,r2
   183e4:	31bfff04 	addi	r6,r6,-4
   183e8:	30800968 	cmpgeui	r2,r6,37
   183ec:	1000141e 	bne	r2,zero,18440 <_calloc_r+0x88>
   183f0:	30800530 	cmpltui	r2,r6,20
   183f4:	10000a1e 	bne	r2,zero,18420 <_calloc_r+0x68>
   183f8:	20000015 	stw	zero,0(r4)
   183fc:	20000115 	stw	zero,4(r4)
   18400:	30800728 	cmpgeui	r2,r6,28
   18404:	10001526 	beq	r2,zero,1845c <_calloc_r+0xa4>
   18408:	20000215 	stw	zero,8(r4)
   1840c:	20000315 	stw	zero,12(r4)
   18410:	31800920 	cmpeqi	r6,r6,36
   18414:	30001b1e 	bne	r6,zero,18484 <_calloc_r+0xcc>
   18418:	20800404 	addi	r2,r4,16
   1841c:	00000106 	br	18424 <_calloc_r+0x6c>
   18420:	2005883a 	mov	r2,r4
   18424:	10000015 	stw	zero,0(r2)
   18428:	10000115 	stw	zero,4(r2)
   1842c:	10000215 	stw	zero,8(r2)
   18430:	2005883a 	mov	r2,r4
   18434:	dfc00017 	ldw	ra,0(sp)
   18438:	dec00104 	addi	sp,sp,4
   1843c:	f800283a 	ret
   18440:	000b883a 	mov	r5,zero
   18444:	00150b00 	call	150b0 <memset>
   18448:	1009883a 	mov	r4,r2
   1844c:	2005883a 	mov	r2,r4
   18450:	dfc00017 	ldw	ra,0(sp)
   18454:	dec00104 	addi	sp,sp,4
   18458:	f800283a 	ret
   1845c:	20800204 	addi	r2,r4,8
   18460:	003ff006 	br	18424 <_calloc_r+0x6c>
   18464:	000cde80 	call	cde8 <__errno>
   18468:	00c00304 	movi	r3,12
   1846c:	0009883a 	mov	r4,zero
   18470:	10c00015 	stw	r3,0(r2)
   18474:	2005883a 	mov	r2,r4
   18478:	dfc00017 	ldw	ra,0(sp)
   1847c:	dec00104 	addi	sp,sp,4
   18480:	f800283a 	ret
   18484:	20000415 	stw	zero,16(r4)
   18488:	20800604 	addi	r2,r4,24
   1848c:	20000515 	stw	zero,20(r4)
   18490:	003fe406 	br	18424 <_calloc_r+0x6c>

00018494 <_fclose_r.part.0>:
   18494:	defffc04 	addi	sp,sp,-16
   18498:	dc800215 	stw	r18,8(sp)
   1849c:	dc400115 	stw	r17,4(sp)
   184a0:	dc000015 	stw	r16,0(sp)
   184a4:	dfc00315 	stw	ra,12(sp)
   184a8:	2821883a 	mov	r16,r5
   184ac:	2023883a 	mov	r17,r4
   184b0:	0012dfc0 	call	12dfc <__sflush_r>
   184b4:	80c00b17 	ldw	r3,44(r16)
   184b8:	1025883a 	mov	r18,r2
   184bc:	18000426 	beq	r3,zero,184d0 <_fclose_r.part.0+0x3c>
   184c0:	81400717 	ldw	r5,28(r16)
   184c4:	8809883a 	mov	r4,r17
   184c8:	183ee83a 	callr	r3
   184cc:	10001916 	blt	r2,zero,18534 <_fclose_r.part.0+0xa0>
   184d0:	8080030b 	ldhu	r2,12(r16)
   184d4:	1080200c 	andi	r2,r2,128
   184d8:	10001a1e 	bne	r2,zero,18544 <_fclose_r.part.0+0xb0>
   184dc:	81400c17 	ldw	r5,48(r16)
   184e0:	28000526 	beq	r5,zero,184f8 <_fclose_r.part.0+0x64>
   184e4:	80801004 	addi	r2,r16,64
   184e8:	28800226 	beq	r5,r2,184f4 <_fclose_r.part.0+0x60>
   184ec:	8809883a 	mov	r4,r17
   184f0:	00135c00 	call	135c0 <_free_r>
   184f4:	80000c15 	stw	zero,48(r16)
   184f8:	81401117 	ldw	r5,68(r16)
   184fc:	28000326 	beq	r5,zero,1850c <_fclose_r.part.0+0x78>
   18500:	8809883a 	mov	r4,r17
   18504:	00135c00 	call	135c0 <_free_r>
   18508:	80001115 	stw	zero,68(r16)
   1850c:	001346c0 	call	1346c <__sfp_lock_acquire>
   18510:	8000030d 	sth	zero,12(r16)
   18514:	00134700 	call	13470 <__sfp_lock_release>
   18518:	9005883a 	mov	r2,r18
   1851c:	dfc00317 	ldw	ra,12(sp)
   18520:	dc800217 	ldw	r18,8(sp)
   18524:	dc400117 	ldw	r17,4(sp)
   18528:	dc000017 	ldw	r16,0(sp)
   1852c:	dec00404 	addi	sp,sp,16
   18530:	f800283a 	ret
   18534:	8080030b 	ldhu	r2,12(r16)
   18538:	04bfffc4 	movi	r18,-1
   1853c:	1080200c 	andi	r2,r2,128
   18540:	103fe626 	beq	r2,zero,184dc <_fclose_r.part.0+0x48>
   18544:	81400417 	ldw	r5,16(r16)
   18548:	8809883a 	mov	r4,r17
   1854c:	00135c00 	call	135c0 <_free_r>
   18550:	003fe206 	br	184dc <_fclose_r.part.0+0x48>

00018554 <_fclose_r>:
   18554:	28001926 	beq	r5,zero,185bc <_fclose_r+0x68>
   18558:	defffd04 	addi	sp,sp,-12
   1855c:	dc000115 	stw	r16,4(sp)
   18560:	dfc00215 	stw	ra,8(sp)
   18564:	2021883a 	mov	r16,r4
   18568:	20000226 	beq	r4,zero,18574 <_fclose_r+0x20>
   1856c:	20800e17 	ldw	r2,56(r4)
   18570:	10000c26 	beq	r2,zero,185a4 <_fclose_r+0x50>
   18574:	2880030f 	ldh	r2,12(r5)
   18578:	1000051e 	bne	r2,zero,18590 <_fclose_r+0x3c>
   1857c:	0005883a 	mov	r2,zero
   18580:	dfc00217 	ldw	ra,8(sp)
   18584:	dc000117 	ldw	r16,4(sp)
   18588:	dec00304 	addi	sp,sp,12
   1858c:	f800283a 	ret
   18590:	8009883a 	mov	r4,r16
   18594:	dfc00217 	ldw	ra,8(sp)
   18598:	dc000117 	ldw	r16,4(sp)
   1859c:	dec00304 	addi	sp,sp,12
   185a0:	00184941 	jmpi	18494 <_fclose_r.part.0>
   185a4:	d9400015 	stw	r5,0(sp)
   185a8:	001345c0 	call	1345c <__sinit>
   185ac:	d9400017 	ldw	r5,0(sp)
   185b0:	2880030f 	ldh	r2,12(r5)
   185b4:	103ff126 	beq	r2,zero,1857c <_fclose_r+0x28>
   185b8:	003ff506 	br	18590 <_fclose_r+0x3c>
   185bc:	0005883a 	mov	r2,zero
   185c0:	f800283a 	ret

000185c4 <fclose>:
   185c4:	20000826 	beq	r4,zero,185e8 <fclose+0x24>
   185c8:	008000b4 	movhi	r2,2
   185cc:	200b883a 	mov	r5,r4
   185d0:	110f1717 	ldw	r4,15452(r2)
   185d4:	20000226 	beq	r4,zero,185e0 <fclose+0x1c>
   185d8:	20800e17 	ldw	r2,56(r4)
   185dc:	10000526 	beq	r2,zero,185f4 <fclose+0x30>
   185e0:	2880030f 	ldh	r2,12(r5)
   185e4:	1000021e 	bne	r2,zero,185f0 <fclose+0x2c>
   185e8:	0005883a 	mov	r2,zero
   185ec:	f800283a 	ret
   185f0:	00184941 	jmpi	18494 <_fclose_r.part.0>
   185f4:	defffd04 	addi	sp,sp,-12
   185f8:	d9400115 	stw	r5,4(sp)
   185fc:	d9000015 	stw	r4,0(sp)
   18600:	dfc00215 	stw	ra,8(sp)
   18604:	001345c0 	call	1345c <__sinit>
   18608:	d9400117 	ldw	r5,4(sp)
   1860c:	d9000017 	ldw	r4,0(sp)
   18610:	2880030f 	ldh	r2,12(r5)
   18614:	10000326 	beq	r2,zero,18624 <fclose+0x60>
   18618:	dfc00217 	ldw	ra,8(sp)
   1861c:	dec00304 	addi	sp,sp,12
   18620:	00184941 	jmpi	18494 <_fclose_r.part.0>
   18624:	0005883a 	mov	r2,zero
   18628:	dfc00217 	ldw	ra,8(sp)
   1862c:	dec00304 	addi	sp,sp,12
   18630:	f800283a 	ret

00018634 <_fiprintf_r>:
   18634:	defffe04 	addi	sp,sp,-8
   18638:	dfc00015 	stw	ra,0(sp)
   1863c:	d9c00115 	stw	r7,4(sp)
   18640:	d9c00104 	addi	r7,sp,4
   18644:	0018a0c0 	call	18a0c <_vfiprintf_r>
   18648:	dfc00017 	ldw	ra,0(sp)
   1864c:	dec00204 	addi	sp,sp,8
   18650:	f800283a 	ret

00018654 <fiprintf>:
   18654:	defffd04 	addi	sp,sp,-12
   18658:	2005883a 	mov	r2,r4
   1865c:	dfc00015 	stw	ra,0(sp)
   18660:	d9800115 	stw	r6,4(sp)
   18664:	d9c00215 	stw	r7,8(sp)
   18668:	00c000b4 	movhi	r3,2
   1866c:	190f1717 	ldw	r4,15452(r3)
   18670:	280d883a 	mov	r6,r5
   18674:	d9c00104 	addi	r7,sp,4
   18678:	100b883a 	mov	r5,r2
   1867c:	0018a0c0 	call	18a0c <_vfiprintf_r>
   18680:	dfc00017 	ldw	ra,0(sp)
   18684:	dec00304 	addi	sp,sp,12
   18688:	f800283a 	ret

0001868c <__fputwc>:
   1868c:	defff904 	addi	sp,sp,-28
   18690:	dcc00415 	stw	r19,16(sp)
   18694:	dc800315 	stw	r18,12(sp)
   18698:	dc000115 	stw	r16,4(sp)
   1869c:	dfc00615 	stw	ra,24(sp)
   186a0:	dd000515 	stw	r20,20(sp)
   186a4:	dc400215 	stw	r17,8(sp)
   186a8:	2025883a 	mov	r18,r4
   186ac:	2827883a 	mov	r19,r5
   186b0:	3021883a 	mov	r16,r6
   186b4:	0014b7c0 	call	14b7c <__locale_mb_cur_max>
   186b8:	10800058 	cmpnei	r2,r2,1
   186bc:	1000071e 	bne	r2,zero,186dc <__fputwc+0x50>
   186c0:	98bfffc4 	addi	r2,r19,-1
   186c4:	10803fe8 	cmpgeui	r2,r2,255
   186c8:	1000041e 	bne	r2,zero,186dc <__fputwc+0x50>
   186cc:	980b883a 	mov	r5,r19
   186d0:	dcc000c5 	stb	r19,3(sp)
   186d4:	05000044 	movi	r20,1
   186d8:	00000a06 	br	18704 <__fputwc+0x78>
   186dc:	81c01704 	addi	r7,r16,92
   186e0:	980d883a 	mov	r6,r19
   186e4:	d94000c4 	addi	r5,sp,3
   186e8:	9009883a 	mov	r4,r18
   186ec:	0018a100 	call	18a10 <_wcrtomb_r>
   186f0:	1029883a 	mov	r20,r2
   186f4:	10bfffd8 	cmpnei	r2,r2,-1
   186f8:	10003926 	beq	r2,zero,187e0 <__fputwc+0x154>
   186fc:	a0001f26 	beq	r20,zero,1877c <__fputwc+0xf0>
   18700:	d94000c3 	ldbu	r5,3(sp)
   18704:	0023883a 	mov	r17,zero
   18708:	00000a06 	br	18734 <__fputwc+0xa8>
   1870c:	80800017 	ldw	r2,0(r16)
   18710:	11400005 	stb	r5,0(r2)
   18714:	80c00017 	ldw	r3,0(r16)
   18718:	18c00044 	addi	r3,r3,1
   1871c:	80c00015 	stw	r3,0(r16)
   18720:	8c400044 	addi	r17,r17,1
   18724:	d88000c4 	addi	r2,sp,3
   18728:	1447883a 	add	r3,r2,r17
   1872c:	8d00132e 	bgeu	r17,r20,1877c <__fputwc+0xf0>
   18730:	19400003 	ldbu	r5,0(r3)
   18734:	80c00217 	ldw	r3,8(r16)
   18738:	18ffffc4 	addi	r3,r3,-1
   1873c:	80c00215 	stw	r3,8(r16)
   18740:	183ff20e 	bge	r3,zero,1870c <__fputwc+0x80>
   18744:	80800617 	ldw	r2,24(r16)
   18748:	18801616 	blt	r3,r2,187a4 <__fputwc+0x118>
   1874c:	80800017 	ldw	r2,0(r16)
   18750:	11400005 	stb	r5,0(r2)
   18754:	80800017 	ldw	r2,0(r16)
   18758:	10c00003 	ldbu	r3,0(r2)
   1875c:	10800044 	addi	r2,r2,1
   18760:	18c002a0 	cmpeqi	r3,r3,10
   18764:	1800171e 	bne	r3,zero,187c4 <__fputwc+0x138>
   18768:	80800015 	stw	r2,0(r16)
   1876c:	8c400044 	addi	r17,r17,1
   18770:	d88000c4 	addi	r2,sp,3
   18774:	1447883a 	add	r3,r2,r17
   18778:	8d3fed36 	bltu	r17,r20,18730 <__fputwc+0xa4>
   1877c:	9829883a 	mov	r20,r19
   18780:	a005883a 	mov	r2,r20
   18784:	dfc00617 	ldw	ra,24(sp)
   18788:	dd000517 	ldw	r20,20(sp)
   1878c:	dcc00417 	ldw	r19,16(sp)
   18790:	dc800317 	ldw	r18,12(sp)
   18794:	dc400217 	ldw	r17,8(sp)
   18798:	dc000117 	ldw	r16,4(sp)
   1879c:	dec00704 	addi	sp,sp,28
   187a0:	f800283a 	ret
   187a4:	29403fcc 	andi	r5,r5,255
   187a8:	800d883a 	mov	r6,r16
   187ac:	9009883a 	mov	r4,r18
   187b0:	00180e80 	call	180e8 <__swbuf_r>
   187b4:	10bfffe0 	cmpeqi	r2,r2,-1
   187b8:	103fd926 	beq	r2,zero,18720 <__fputwc+0x94>
   187bc:	053fffc4 	movi	r20,-1
   187c0:	003fef06 	br	18780 <__fputwc+0xf4>
   187c4:	800d883a 	mov	r6,r16
   187c8:	01400284 	movi	r5,10
   187cc:	9009883a 	mov	r4,r18
   187d0:	00180e80 	call	180e8 <__swbuf_r>
   187d4:	10bfffe0 	cmpeqi	r2,r2,-1
   187d8:	103fd126 	beq	r2,zero,18720 <__fputwc+0x94>
   187dc:	003ff706 	br	187bc <__fputwc+0x130>
   187e0:	8080030b 	ldhu	r2,12(r16)
   187e4:	10801014 	ori	r2,r2,64
   187e8:	8080030d 	sth	r2,12(r16)
   187ec:	003fe406 	br	18780 <__fputwc+0xf4>

000187f0 <_fputwc_r>:
   187f0:	3080030b 	ldhu	r2,12(r6)
   187f4:	10c8000c 	andi	r3,r2,8192
   187f8:	1800051e 	bne	r3,zero,18810 <_fputwc_r+0x20>
   187fc:	30c01917 	ldw	r3,100(r6)
   18800:	10880014 	ori	r2,r2,8192
   18804:	3080030d 	sth	r2,12(r6)
   18808:	18880014 	ori	r2,r3,8192
   1880c:	30801915 	stw	r2,100(r6)
   18810:	001868c1 	jmpi	1868c <__fputwc>

00018814 <fputwc>:
   18814:	defffc04 	addi	sp,sp,-16
   18818:	008000b4 	movhi	r2,2
   1881c:	dc000215 	stw	r16,8(sp)
   18820:	140f1717 	ldw	r16,15452(r2)
   18824:	dfc00315 	stw	ra,12(sp)
   18828:	280d883a 	mov	r6,r5
   1882c:	200b883a 	mov	r5,r4
   18830:	80000226 	beq	r16,zero,1883c <fputwc+0x28>
   18834:	80800e17 	ldw	r2,56(r16)
   18838:	10000d26 	beq	r2,zero,18870 <fputwc+0x5c>
   1883c:	3080030b 	ldhu	r2,12(r6)
   18840:	10c8000c 	andi	r3,r2,8192
   18844:	1800051e 	bne	r3,zero,1885c <fputwc+0x48>
   18848:	30c01917 	ldw	r3,100(r6)
   1884c:	10880014 	ori	r2,r2,8192
   18850:	3080030d 	sth	r2,12(r6)
   18854:	18880014 	ori	r2,r3,8192
   18858:	30801915 	stw	r2,100(r6)
   1885c:	8009883a 	mov	r4,r16
   18860:	dfc00317 	ldw	ra,12(sp)
   18864:	dc000217 	ldw	r16,8(sp)
   18868:	dec00404 	addi	sp,sp,16
   1886c:	001868c1 	jmpi	1868c <__fputwc>
   18870:	d9000015 	stw	r4,0(sp)
   18874:	8009883a 	mov	r4,r16
   18878:	d9800115 	stw	r6,4(sp)
   1887c:	001345c0 	call	1345c <__sinit>
   18880:	d9800117 	ldw	r6,4(sp)
   18884:	d9400017 	ldw	r5,0(sp)
   18888:	003fec06 	br	1883c <fputwc+0x28>

0001888c <_fstat_r>:
   1888c:	2807883a 	mov	r3,r5
   18890:	defffe04 	addi	sp,sp,-8
   18894:	dc000015 	stw	r16,0(sp)
   18898:	008000b4 	movhi	r2,2
   1889c:	300b883a 	mov	r5,r6
   188a0:	2021883a 	mov	r16,r4
   188a4:	1809883a 	mov	r4,r3
   188a8:	dfc00115 	stw	ra,4(sp)
   188ac:	10165b15 	stw	zero,22892(r2)
   188b0:	0019fc40 	call	19fc4 <fstat>
   188b4:	10ffffd8 	cmpnei	r3,r2,-1
   188b8:	18000426 	beq	r3,zero,188cc <_fstat_r+0x40>
   188bc:	dfc00117 	ldw	ra,4(sp)
   188c0:	dc000017 	ldw	r16,0(sp)
   188c4:	dec00204 	addi	sp,sp,8
   188c8:	f800283a 	ret
   188cc:	00c000b4 	movhi	r3,2
   188d0:	18d65b17 	ldw	r3,22892(r3)
   188d4:	183ff926 	beq	r3,zero,188bc <_fstat_r+0x30>
   188d8:	80c00015 	stw	r3,0(r16)
   188dc:	dfc00117 	ldw	ra,4(sp)
   188e0:	dc000017 	ldw	r16,0(sp)
   188e4:	dec00204 	addi	sp,sp,8
   188e8:	f800283a 	ret

000188ec <_isatty_r>:
   188ec:	defffe04 	addi	sp,sp,-8
   188f0:	dc000015 	stw	r16,0(sp)
   188f4:	008000b4 	movhi	r2,2
   188f8:	2021883a 	mov	r16,r4
   188fc:	2809883a 	mov	r4,r5
   18900:	dfc00115 	stw	ra,4(sp)
   18904:	10165b15 	stw	zero,22892(r2)
   18908:	001a0d00 	call	1a0d0 <isatty>
   1890c:	10ffffd8 	cmpnei	r3,r2,-1
   18910:	18000426 	beq	r3,zero,18924 <_isatty_r+0x38>
   18914:	dfc00117 	ldw	ra,4(sp)
   18918:	dc000017 	ldw	r16,0(sp)
   1891c:	dec00204 	addi	sp,sp,8
   18920:	f800283a 	ret
   18924:	00c000b4 	movhi	r3,2
   18928:	18d65b17 	ldw	r3,22892(r3)
   1892c:	183ff926 	beq	r3,zero,18914 <_isatty_r+0x28>
   18930:	80c00015 	stw	r3,0(r16)
   18934:	dfc00117 	ldw	ra,4(sp)
   18938:	dc000017 	ldw	r16,0(sp)
   1893c:	dec00204 	addi	sp,sp,8
   18940:	f800283a 	ret

00018944 <_lseek_r>:
   18944:	2807883a 	mov	r3,r5
   18948:	defffe04 	addi	sp,sp,-8
   1894c:	dc000015 	stw	r16,0(sp)
   18950:	300b883a 	mov	r5,r6
   18954:	008000b4 	movhi	r2,2
   18958:	380d883a 	mov	r6,r7
   1895c:	2021883a 	mov	r16,r4
   18960:	1809883a 	mov	r4,r3
   18964:	dfc00115 	stw	ra,4(sp)
   18968:	10165b15 	stw	zero,22892(r2)
   1896c:	001a4040 	call	1a404 <lseek>
   18970:	10ffffd8 	cmpnei	r3,r2,-1
   18974:	18000426 	beq	r3,zero,18988 <_lseek_r+0x44>
   18978:	dfc00117 	ldw	ra,4(sp)
   1897c:	dc000017 	ldw	r16,0(sp)
   18980:	dec00204 	addi	sp,sp,8
   18984:	f800283a 	ret
   18988:	00c000b4 	movhi	r3,2
   1898c:	18d65b17 	ldw	r3,22892(r3)
   18990:	183ff926 	beq	r3,zero,18978 <_lseek_r+0x34>
   18994:	80c00015 	stw	r3,0(r16)
   18998:	dfc00117 	ldw	ra,4(sp)
   1899c:	dc000017 	ldw	r16,0(sp)
   189a0:	dec00204 	addi	sp,sp,8
   189a4:	f800283a 	ret

000189a8 <_read_r>:
   189a8:	2807883a 	mov	r3,r5
   189ac:	defffe04 	addi	sp,sp,-8
   189b0:	dc000015 	stw	r16,0(sp)
   189b4:	300b883a 	mov	r5,r6
   189b8:	008000b4 	movhi	r2,2
   189bc:	380d883a 	mov	r6,r7
   189c0:	2021883a 	mov	r16,r4
   189c4:	1809883a 	mov	r4,r3
   189c8:	dfc00115 	stw	ra,4(sp)
   189cc:	10165b15 	stw	zero,22892(r2)
   189d0:	001a8340 	call	1a834 <read>
   189d4:	10ffffd8 	cmpnei	r3,r2,-1
   189d8:	18000426 	beq	r3,zero,189ec <_read_r+0x44>
   189dc:	dfc00117 	ldw	ra,4(sp)
   189e0:	dc000017 	ldw	r16,0(sp)
   189e4:	dec00204 	addi	sp,sp,8
   189e8:	f800283a 	ret
   189ec:	00c000b4 	movhi	r3,2
   189f0:	18d65b17 	ldw	r3,22892(r3)
   189f4:	183ff926 	beq	r3,zero,189dc <_read_r+0x34>
   189f8:	80c00015 	stw	r3,0(r16)
   189fc:	dfc00117 	ldw	ra,4(sp)
   18a00:	dc000017 	ldw	r16,0(sp)
   18a04:	dec00204 	addi	sp,sp,8
   18a08:	f800283a 	ret

00018a0c <_vfiprintf_r>:
   18a0c:	0016dbc1 	jmpi	16dbc <___vfiprintf_internal_r>

00018a10 <_wcrtomb_r>:
   18a10:	defffa04 	addi	sp,sp,-24
   18a14:	dc400415 	stw	r17,16(sp)
   18a18:	dc000315 	stw	r16,12(sp)
   18a1c:	008000b4 	movhi	r2,2
   18a20:	dfc00515 	stw	ra,20(sp)
   18a24:	108a3817 	ldw	r2,10464(r2)
   18a28:	2023883a 	mov	r17,r4
   18a2c:	3821883a 	mov	r16,r7
   18a30:	28000826 	beq	r5,zero,18a54 <_wcrtomb_r+0x44>
   18a34:	103ee83a 	callr	r2
   18a38:	10ffffd8 	cmpnei	r3,r2,-1
   18a3c:	18000a26 	beq	r3,zero,18a68 <_wcrtomb_r+0x58>
   18a40:	dfc00517 	ldw	ra,20(sp)
   18a44:	dc400417 	ldw	r17,16(sp)
   18a48:	dc000317 	ldw	r16,12(sp)
   18a4c:	dec00604 	addi	sp,sp,24
   18a50:	f800283a 	ret
   18a54:	000d883a 	mov	r6,zero
   18a58:	d9400084 	addi	r5,sp,2
   18a5c:	103ee83a 	callr	r2
   18a60:	10ffffd8 	cmpnei	r3,r2,-1
   18a64:	183ff61e 	bne	r3,zero,18a40 <_wcrtomb_r+0x30>
   18a68:	00802284 	movi	r2,138
   18a6c:	80000015 	stw	zero,0(r16)
   18a70:	88800015 	stw	r2,0(r17)
   18a74:	00bfffc4 	movi	r2,-1
   18a78:	003ff106 	br	18a40 <_wcrtomb_r+0x30>

00018a7c <wcrtomb>:
   18a7c:	defffa04 	addi	sp,sp,-24
   18a80:	00c000b4 	movhi	r3,2
   18a84:	dc400415 	stw	r17,16(sp)
   18a88:	dc000315 	stw	r16,12(sp)
   18a8c:	1c4f1717 	ldw	r17,15452(r3)
   18a90:	dfc00515 	stw	ra,20(sp)
   18a94:	00c000b4 	movhi	r3,2
   18a98:	18ca3817 	ldw	r3,10464(r3)
   18a9c:	3021883a 	mov	r16,r6
   18aa0:	20000c26 	beq	r4,zero,18ad4 <wcrtomb+0x58>
   18aa4:	280d883a 	mov	r6,r5
   18aa8:	800f883a 	mov	r7,r16
   18aac:	200b883a 	mov	r5,r4
   18ab0:	8809883a 	mov	r4,r17
   18ab4:	183ee83a 	callr	r3
   18ab8:	10ffffd8 	cmpnei	r3,r2,-1
   18abc:	18000c26 	beq	r3,zero,18af0 <wcrtomb+0x74>
   18ac0:	dfc00517 	ldw	ra,20(sp)
   18ac4:	dc400417 	ldw	r17,16(sp)
   18ac8:	dc000317 	ldw	r16,12(sp)
   18acc:	dec00604 	addi	sp,sp,24
   18ad0:	f800283a 	ret
   18ad4:	300f883a 	mov	r7,r6
   18ad8:	d9400084 	addi	r5,sp,2
   18adc:	000d883a 	mov	r6,zero
   18ae0:	8809883a 	mov	r4,r17
   18ae4:	183ee83a 	callr	r3
   18ae8:	10ffffd8 	cmpnei	r3,r2,-1
   18aec:	183ff41e 	bne	r3,zero,18ac0 <wcrtomb+0x44>
   18af0:	00802284 	movi	r2,138
   18af4:	80000015 	stw	zero,0(r16)
   18af8:	88800015 	stw	r2,0(r17)
   18afc:	00bfffc4 	movi	r2,-1
   18b00:	003fef06 	br	18ac0 <wcrtomb+0x44>

00018b04 <abort>:
   18b04:	deffff04 	addi	sp,sp,-4
   18b08:	01000184 	movi	r4,6
   18b0c:	dfc00015 	stw	ra,0(sp)
   18b10:	0018d900 	call	18d90 <raise>
   18b14:	01000044 	movi	r4,1
   18b18:	0019f500 	call	19f50 <_exit>

00018b1c <_init_signal_r>:
   18b1c:	2080b717 	ldw	r2,732(r4)
   18b20:	10000226 	beq	r2,zero,18b2c <_init_signal_r+0x10>
   18b24:	0005883a 	mov	r2,zero
   18b28:	f800283a 	ret
   18b2c:	defffe04 	addi	sp,sp,-8
   18b30:	01402004 	movi	r5,128
   18b34:	dc000015 	stw	r16,0(sp)
   18b38:	dfc00115 	stw	ra,4(sp)
   18b3c:	2021883a 	mov	r16,r4
   18b40:	000ce140 	call	ce14 <_malloc_r>
   18b44:	8080b715 	stw	r2,732(r16)
   18b48:	1009883a 	mov	r4,r2
   18b4c:	10000826 	beq	r2,zero,18b70 <_init_signal_r+0x54>
   18b50:	01802004 	movi	r6,128
   18b54:	000b883a 	mov	r5,zero
   18b58:	00150b00 	call	150b0 <memset>
   18b5c:	0005883a 	mov	r2,zero
   18b60:	dfc00117 	ldw	ra,4(sp)
   18b64:	dc000017 	ldw	r16,0(sp)
   18b68:	dec00204 	addi	sp,sp,8
   18b6c:	f800283a 	ret
   18b70:	00bfffc4 	movi	r2,-1
   18b74:	003ffa06 	br	18b60 <_init_signal_r+0x44>

00018b78 <_signal_r>:
   18b78:	defffc04 	addi	sp,sp,-16
   18b7c:	dc400115 	stw	r17,4(sp)
   18b80:	dfc00315 	stw	ra,12(sp)
   18b84:	dc800215 	stw	r18,8(sp)
   18b88:	dc000015 	stw	r16,0(sp)
   18b8c:	28800830 	cmpltui	r2,r5,32
   18b90:	2023883a 	mov	r17,r4
   18b94:	10000e26 	beq	r2,zero,18bd0 <_signal_r+0x58>
   18b98:	20c0b717 	ldw	r3,732(r4)
   18b9c:	2821883a 	mov	r16,r5
   18ba0:	3025883a 	mov	r18,r6
   18ba4:	18000e26 	beq	r3,zero,18be0 <_signal_r+0x68>
   18ba8:	802090ba 	slli	r16,r16,2
   18bac:	1c21883a 	add	r16,r3,r16
   18bb0:	80800017 	ldw	r2,0(r16)
   18bb4:	84800015 	stw	r18,0(r16)
   18bb8:	dfc00317 	ldw	ra,12(sp)
   18bbc:	dc800217 	ldw	r18,8(sp)
   18bc0:	dc400117 	ldw	r17,4(sp)
   18bc4:	dc000017 	ldw	r16,0(sp)
   18bc8:	dec00404 	addi	sp,sp,16
   18bcc:	f800283a 	ret
   18bd0:	00800584 	movi	r2,22
   18bd4:	20800015 	stw	r2,0(r4)
   18bd8:	00bfffc4 	movi	r2,-1
   18bdc:	003ff606 	br	18bb8 <_signal_r+0x40>
   18be0:	01402004 	movi	r5,128
   18be4:	000ce140 	call	ce14 <_malloc_r>
   18be8:	8880b715 	stw	r2,732(r17)
   18bec:	10000626 	beq	r2,zero,18c08 <_signal_r+0x90>
   18bf0:	01802004 	movi	r6,128
   18bf4:	000b883a 	mov	r5,zero
   18bf8:	1009883a 	mov	r4,r2
   18bfc:	00150b00 	call	150b0 <memset>
   18c00:	1007883a 	mov	r3,r2
   18c04:	003fe806 	br	18ba8 <_signal_r+0x30>
   18c08:	00bfffc4 	movi	r2,-1
   18c0c:	003fea06 	br	18bb8 <_signal_r+0x40>

00018c10 <_raise_r>:
   18c10:	28800830 	cmpltui	r2,r5,32
   18c14:	10002b26 	beq	r2,zero,18cc4 <_raise_r+0xb4>
   18c18:	2080b717 	ldw	r2,732(r4)
   18c1c:	defffd04 	addi	sp,sp,-12
   18c20:	dc000115 	stw	r16,4(sp)
   18c24:	dfc00215 	stw	ra,8(sp)
   18c28:	2821883a 	mov	r16,r5
   18c2c:	10001026 	beq	r2,zero,18c70 <_raise_r+0x60>
   18c30:	280690ba 	slli	r3,r5,2
   18c34:	10c5883a 	add	r2,r2,r3
   18c38:	10c00017 	ldw	r3,0(r2)
   18c3c:	18000c26 	beq	r3,zero,18c70 <_raise_r+0x60>
   18c40:	19400060 	cmpeqi	r5,r3,1
   18c44:	28001a1e 	bne	r5,zero,18cb0 <_raise_r+0xa0>
   18c48:	197fffd8 	cmpnei	r5,r3,-1
   18c4c:	28001126 	beq	r5,zero,18c94 <_raise_r+0x84>
   18c50:	10000015 	stw	zero,0(r2)
   18c54:	8009883a 	mov	r4,r16
   18c58:	183ee83a 	callr	r3
   18c5c:	0005883a 	mov	r2,zero
   18c60:	dfc00217 	ldw	ra,8(sp)
   18c64:	dc000117 	ldw	r16,4(sp)
   18c68:	dec00304 	addi	sp,sp,12
   18c6c:	f800283a 	ret
   18c70:	d9000015 	stw	r4,0(sp)
   18c74:	00190680 	call	19068 <_getpid_r>
   18c78:	d9000017 	ldw	r4,0(sp)
   18c7c:	800d883a 	mov	r6,r16
   18c80:	100b883a 	mov	r5,r2
   18c84:	dfc00217 	ldw	ra,8(sp)
   18c88:	dc000117 	ldw	r16,4(sp)
   18c8c:	dec00304 	addi	sp,sp,12
   18c90:	00190081 	jmpi	19008 <_kill_r>
   18c94:	00800584 	movi	r2,22
   18c98:	20800015 	stw	r2,0(r4)
   18c9c:	00800044 	movi	r2,1
   18ca0:	dfc00217 	ldw	ra,8(sp)
   18ca4:	dc000117 	ldw	r16,4(sp)
   18ca8:	dec00304 	addi	sp,sp,12
   18cac:	f800283a 	ret
   18cb0:	0005883a 	mov	r2,zero
   18cb4:	dfc00217 	ldw	ra,8(sp)
   18cb8:	dc000117 	ldw	r16,4(sp)
   18cbc:	dec00304 	addi	sp,sp,12
   18cc0:	f800283a 	ret
   18cc4:	00800584 	movi	r2,22
   18cc8:	20800015 	stw	r2,0(r4)
   18ccc:	00bfffc4 	movi	r2,-1
   18cd0:	f800283a 	ret

00018cd4 <__sigtramp_r>:
   18cd4:	28800830 	cmpltui	r2,r5,32
   18cd8:	10002b26 	beq	r2,zero,18d88 <__sigtramp_r+0xb4>
   18cdc:	20c0b717 	ldw	r3,732(r4)
   18ce0:	defffd04 	addi	sp,sp,-12
   18ce4:	dc400115 	stw	r17,4(sp)
   18ce8:	dc000015 	stw	r16,0(sp)
   18cec:	dfc00215 	stw	ra,8(sp)
   18cf0:	2821883a 	mov	r16,r5
   18cf4:	2023883a 	mov	r17,r4
   18cf8:	18001326 	beq	r3,zero,18d48 <__sigtramp_r+0x74>
   18cfc:	800490ba 	slli	r2,r16,2
   18d00:	1887883a 	add	r3,r3,r2
   18d04:	18800017 	ldw	r2,0(r3)
   18d08:	10000d26 	beq	r2,zero,18d40 <__sigtramp_r+0x6c>
   18d0c:	113fffe0 	cmpeqi	r4,r2,-1
   18d10:	2000191e 	bne	r4,zero,18d78 <__sigtramp_r+0xa4>
   18d14:	11000060 	cmpeqi	r4,r2,1
   18d18:	2000151e 	bne	r4,zero,18d70 <__sigtramp_r+0x9c>
   18d1c:	18000015 	stw	zero,0(r3)
   18d20:	8009883a 	mov	r4,r16
   18d24:	103ee83a 	callr	r2
   18d28:	0005883a 	mov	r2,zero
   18d2c:	dfc00217 	ldw	ra,8(sp)
   18d30:	dc400117 	ldw	r17,4(sp)
   18d34:	dc000017 	ldw	r16,0(sp)
   18d38:	dec00304 	addi	sp,sp,12
   18d3c:	f800283a 	ret
   18d40:	00800044 	movi	r2,1
   18d44:	003ff906 	br	18d2c <__sigtramp_r+0x58>
   18d48:	01402004 	movi	r5,128
   18d4c:	000ce140 	call	ce14 <_malloc_r>
   18d50:	8880b715 	stw	r2,732(r17)
   18d54:	10000a26 	beq	r2,zero,18d80 <__sigtramp_r+0xac>
   18d58:	01802004 	movi	r6,128
   18d5c:	000b883a 	mov	r5,zero
   18d60:	1009883a 	mov	r4,r2
   18d64:	00150b00 	call	150b0 <memset>
   18d68:	1007883a 	mov	r3,r2
   18d6c:	003fe306 	br	18cfc <__sigtramp_r+0x28>
   18d70:	008000c4 	movi	r2,3
   18d74:	003fed06 	br	18d2c <__sigtramp_r+0x58>
   18d78:	00800084 	movi	r2,2
   18d7c:	003feb06 	br	18d2c <__sigtramp_r+0x58>
   18d80:	00bfffc4 	movi	r2,-1
   18d84:	003fe906 	br	18d2c <__sigtramp_r+0x58>
   18d88:	00bfffc4 	movi	r2,-1
   18d8c:	f800283a 	ret

00018d90 <raise>:
   18d90:	defffd04 	addi	sp,sp,-12
   18d94:	dc400115 	stw	r17,4(sp)
   18d98:	00c000b4 	movhi	r3,2
   18d9c:	dfc00215 	stw	ra,8(sp)
   18da0:	dc000015 	stw	r16,0(sp)
   18da4:	20800830 	cmpltui	r2,r4,32
   18da8:	1c4f1717 	ldw	r17,15452(r3)
   18dac:	10002326 	beq	r2,zero,18e3c <raise+0xac>
   18db0:	8880b717 	ldw	r2,732(r17)
   18db4:	2021883a 	mov	r16,r4
   18db8:	10001026 	beq	r2,zero,18dfc <raise+0x6c>
   18dbc:	200690ba 	slli	r3,r4,2
   18dc0:	10c5883a 	add	r2,r2,r3
   18dc4:	10c00017 	ldw	r3,0(r2)
   18dc8:	18000c26 	beq	r3,zero,18dfc <raise+0x6c>
   18dcc:	19400060 	cmpeqi	r5,r3,1
   18dd0:	2800181e 	bne	r5,zero,18e34 <raise+0xa4>
   18dd4:	197fffd8 	cmpnei	r5,r3,-1
   18dd8:	28001226 	beq	r5,zero,18e24 <raise+0x94>
   18ddc:	10000015 	stw	zero,0(r2)
   18de0:	183ee83a 	callr	r3
   18de4:	0005883a 	mov	r2,zero
   18de8:	dfc00217 	ldw	ra,8(sp)
   18dec:	dc400117 	ldw	r17,4(sp)
   18df0:	dc000017 	ldw	r16,0(sp)
   18df4:	dec00304 	addi	sp,sp,12
   18df8:	f800283a 	ret
   18dfc:	8809883a 	mov	r4,r17
   18e00:	00190680 	call	19068 <_getpid_r>
   18e04:	800d883a 	mov	r6,r16
   18e08:	100b883a 	mov	r5,r2
   18e0c:	8809883a 	mov	r4,r17
   18e10:	dfc00217 	ldw	ra,8(sp)
   18e14:	dc400117 	ldw	r17,4(sp)
   18e18:	dc000017 	ldw	r16,0(sp)
   18e1c:	dec00304 	addi	sp,sp,12
   18e20:	00190081 	jmpi	19008 <_kill_r>
   18e24:	00800584 	movi	r2,22
   18e28:	88800015 	stw	r2,0(r17)
   18e2c:	00800044 	movi	r2,1
   18e30:	003fed06 	br	18de8 <raise+0x58>
   18e34:	0005883a 	mov	r2,zero
   18e38:	003feb06 	br	18de8 <raise+0x58>
   18e3c:	00800584 	movi	r2,22
   18e40:	88800015 	stw	r2,0(r17)
   18e44:	00bfffc4 	movi	r2,-1
   18e48:	003fe706 	br	18de8 <raise+0x58>

00018e4c <signal>:
   18e4c:	defffc04 	addi	sp,sp,-16
   18e50:	dc800215 	stw	r18,8(sp)
   18e54:	00c000b4 	movhi	r3,2
   18e58:	dfc00315 	stw	ra,12(sp)
   18e5c:	dc400115 	stw	r17,4(sp)
   18e60:	dc000015 	stw	r16,0(sp)
   18e64:	20800830 	cmpltui	r2,r4,32
   18e68:	1c8f1717 	ldw	r18,15452(r3)
   18e6c:	10000e26 	beq	r2,zero,18ea8 <signal+0x5c>
   18e70:	2021883a 	mov	r16,r4
   18e74:	9100b717 	ldw	r4,732(r18)
   18e78:	2823883a 	mov	r17,r5
   18e7c:	20000e26 	beq	r4,zero,18eb8 <signal+0x6c>
   18e80:	802090ba 	slli	r16,r16,2
   18e84:	2421883a 	add	r16,r4,r16
   18e88:	80800017 	ldw	r2,0(r16)
   18e8c:	84400015 	stw	r17,0(r16)
   18e90:	dfc00317 	ldw	ra,12(sp)
   18e94:	dc800217 	ldw	r18,8(sp)
   18e98:	dc400117 	ldw	r17,4(sp)
   18e9c:	dc000017 	ldw	r16,0(sp)
   18ea0:	dec00404 	addi	sp,sp,16
   18ea4:	f800283a 	ret
   18ea8:	00800584 	movi	r2,22
   18eac:	90800015 	stw	r2,0(r18)
   18eb0:	00bfffc4 	movi	r2,-1
   18eb4:	003ff606 	br	18e90 <signal+0x44>
   18eb8:	9009883a 	mov	r4,r18
   18ebc:	01402004 	movi	r5,128
   18ec0:	000ce140 	call	ce14 <_malloc_r>
   18ec4:	9080b715 	stw	r2,732(r18)
   18ec8:	1009883a 	mov	r4,r2
   18ecc:	10000526 	beq	r2,zero,18ee4 <signal+0x98>
   18ed0:	01802004 	movi	r6,128
   18ed4:	000b883a 	mov	r5,zero
   18ed8:	00150b00 	call	150b0 <memset>
   18edc:	1009883a 	mov	r4,r2
   18ee0:	003fe706 	br	18e80 <signal+0x34>
   18ee4:	00bfffc4 	movi	r2,-1
   18ee8:	003fe906 	br	18e90 <signal+0x44>

00018eec <_init_signal>:
   18eec:	defffe04 	addi	sp,sp,-8
   18ef0:	008000b4 	movhi	r2,2
   18ef4:	dc000015 	stw	r16,0(sp)
   18ef8:	140f1717 	ldw	r16,15452(r2)
   18efc:	dfc00115 	stw	ra,4(sp)
   18f00:	8080b717 	ldw	r2,732(r16)
   18f04:	10000526 	beq	r2,zero,18f1c <_init_signal+0x30>
   18f08:	0005883a 	mov	r2,zero
   18f0c:	dfc00117 	ldw	ra,4(sp)
   18f10:	dc000017 	ldw	r16,0(sp)
   18f14:	dec00204 	addi	sp,sp,8
   18f18:	f800283a 	ret
   18f1c:	8009883a 	mov	r4,r16
   18f20:	01402004 	movi	r5,128
   18f24:	000ce140 	call	ce14 <_malloc_r>
   18f28:	8080b715 	stw	r2,732(r16)
   18f2c:	1009883a 	mov	r4,r2
   18f30:	10000426 	beq	r2,zero,18f44 <_init_signal+0x58>
   18f34:	01802004 	movi	r6,128
   18f38:	000b883a 	mov	r5,zero
   18f3c:	00150b00 	call	150b0 <memset>
   18f40:	003ff106 	br	18f08 <_init_signal+0x1c>
   18f44:	00bfffc4 	movi	r2,-1
   18f48:	003ff006 	br	18f0c <_init_signal+0x20>

00018f4c <__sigtramp>:
   18f4c:	defffd04 	addi	sp,sp,-12
   18f50:	dc400115 	stw	r17,4(sp)
   18f54:	00c000b4 	movhi	r3,2
   18f58:	dfc00215 	stw	ra,8(sp)
   18f5c:	dc000015 	stw	r16,0(sp)
   18f60:	20800830 	cmpltui	r2,r4,32
   18f64:	1c4f1717 	ldw	r17,15452(r3)
   18f68:	10002526 	beq	r2,zero,19000 <__sigtramp+0xb4>
   18f6c:	88c0b717 	ldw	r3,732(r17)
   18f70:	2021883a 	mov	r16,r4
   18f74:	18001326 	beq	r3,zero,18fc4 <__sigtramp+0x78>
   18f78:	800890ba 	slli	r4,r16,2
   18f7c:	1907883a 	add	r3,r3,r4
   18f80:	18800017 	ldw	r2,0(r3)
   18f84:	10000d26 	beq	r2,zero,18fbc <__sigtramp+0x70>
   18f88:	113fffe0 	cmpeqi	r4,r2,-1
   18f8c:	20001a1e 	bne	r4,zero,18ff8 <__sigtramp+0xac>
   18f90:	11000060 	cmpeqi	r4,r2,1
   18f94:	2000161e 	bne	r4,zero,18ff0 <__sigtramp+0xa4>
   18f98:	18000015 	stw	zero,0(r3)
   18f9c:	8009883a 	mov	r4,r16
   18fa0:	103ee83a 	callr	r2
   18fa4:	0005883a 	mov	r2,zero
   18fa8:	dfc00217 	ldw	ra,8(sp)
   18fac:	dc400117 	ldw	r17,4(sp)
   18fb0:	dc000017 	ldw	r16,0(sp)
   18fb4:	dec00304 	addi	sp,sp,12
   18fb8:	f800283a 	ret
   18fbc:	00800044 	movi	r2,1
   18fc0:	003ff906 	br	18fa8 <__sigtramp+0x5c>
   18fc4:	01402004 	movi	r5,128
   18fc8:	8809883a 	mov	r4,r17
   18fcc:	000ce140 	call	ce14 <_malloc_r>
   18fd0:	8880b715 	stw	r2,732(r17)
   18fd4:	10000a26 	beq	r2,zero,19000 <__sigtramp+0xb4>
   18fd8:	01802004 	movi	r6,128
   18fdc:	000b883a 	mov	r5,zero
   18fe0:	1009883a 	mov	r4,r2
   18fe4:	00150b00 	call	150b0 <memset>
   18fe8:	1007883a 	mov	r3,r2
   18fec:	003fe206 	br	18f78 <__sigtramp+0x2c>
   18ff0:	008000c4 	movi	r2,3
   18ff4:	003fec06 	br	18fa8 <__sigtramp+0x5c>
   18ff8:	00800084 	movi	r2,2
   18ffc:	003fea06 	br	18fa8 <__sigtramp+0x5c>
   19000:	00bfffc4 	movi	r2,-1
   19004:	003fe806 	br	18fa8 <__sigtramp+0x5c>

00019008 <_kill_r>:
   19008:	2807883a 	mov	r3,r5
   1900c:	defffe04 	addi	sp,sp,-8
   19010:	dc000015 	stw	r16,0(sp)
   19014:	008000b4 	movhi	r2,2
   19018:	300b883a 	mov	r5,r6
   1901c:	2021883a 	mov	r16,r4
   19020:	1809883a 	mov	r4,r3
   19024:	dfc00115 	stw	ra,4(sp)
   19028:	10165b15 	stw	zero,22892(r2)
   1902c:	001a1b00 	call	1a1b0 <kill>
   19030:	10ffffd8 	cmpnei	r3,r2,-1
   19034:	18000426 	beq	r3,zero,19048 <_kill_r+0x40>
   19038:	dfc00117 	ldw	ra,4(sp)
   1903c:	dc000017 	ldw	r16,0(sp)
   19040:	dec00204 	addi	sp,sp,8
   19044:	f800283a 	ret
   19048:	00c000b4 	movhi	r3,2
   1904c:	18d65b17 	ldw	r3,22892(r3)
   19050:	183ff926 	beq	r3,zero,19038 <_kill_r+0x30>
   19054:	80c00015 	stw	r3,0(r16)
   19058:	dfc00117 	ldw	ra,4(sp)
   1905c:	dc000017 	ldw	r16,0(sp)
   19060:	dec00204 	addi	sp,sp,8
   19064:	f800283a 	ret

00019068 <_getpid_r>:
   19068:	001a0741 	jmpi	1a074 <getpid>

0001906c <__fixunsdfsi>:
   1906c:	defffd04 	addi	sp,sp,-12
   19070:	000d883a 	mov	r6,zero
   19074:	01d07834 	movhi	r7,16864
   19078:	dc400115 	stw	r17,4(sp)
   1907c:	dc000015 	stw	r16,0(sp)
   19080:	dfc00215 	stw	ra,8(sp)
   19084:	2023883a 	mov	r17,r4
   19088:	2821883a 	mov	r16,r5
   1908c:	000b7bc0 	call	b7bc <__gedf2>
   19090:	1000080e 	bge	r2,zero,190b4 <__fixunsdfsi+0x48>
   19094:	8809883a 	mov	r4,r17
   19098:	800b883a 	mov	r5,r16
   1909c:	000c9600 	call	c960 <__fixdfsi>
   190a0:	dfc00217 	ldw	ra,8(sp)
   190a4:	dc400117 	ldw	r17,4(sp)
   190a8:	dc000017 	ldw	r16,0(sp)
   190ac:	dec00304 	addi	sp,sp,12
   190b0:	f800283a 	ret
   190b4:	000d883a 	mov	r6,zero
   190b8:	01d07834 	movhi	r7,16864
   190bc:	8809883a 	mov	r4,r17
   190c0:	800b883a 	mov	r5,r16
   190c4:	000c0000 	call	c000 <__subdf3>
   190c8:	180b883a 	mov	r5,r3
   190cc:	1009883a 	mov	r4,r2
   190d0:	000c9600 	call	c960 <__fixdfsi>
   190d4:	00e00034 	movhi	r3,32768
   190d8:	10c5883a 	add	r2,r2,r3
   190dc:	003ff006 	br	190a0 <__fixunsdfsi+0x34>

000190e0 <__fixdfdi>:
   190e0:	defffd04 	addi	sp,sp,-12
   190e4:	000d883a 	mov	r6,zero
   190e8:	000f883a 	mov	r7,zero
   190ec:	dc400115 	stw	r17,4(sp)
   190f0:	dc000015 	stw	r16,0(sp)
   190f4:	dfc00215 	stw	ra,8(sp)
   190f8:	2023883a 	mov	r17,r4
   190fc:	2821883a 	mov	r16,r5
   19100:	000b8a40 	call	b8a4 <__ledf2>
   19104:	10000716 	blt	r2,zero,19124 <__fixdfdi+0x44>
   19108:	8809883a 	mov	r4,r17
   1910c:	800b883a 	mov	r5,r16
   19110:	dfc00217 	ldw	ra,8(sp)
   19114:	dc400117 	ldw	r17,4(sp)
   19118:	dc000017 	ldw	r16,0(sp)
   1911c:	dec00304 	addi	sp,sp,12
   19120:	00191541 	jmpi	19154 <__fixunsdfdi>
   19124:	8809883a 	mov	r4,r17
   19128:	8160003c 	xorhi	r5,r16,32768
   1912c:	00191540 	call	19154 <__fixunsdfdi>
   19130:	1008c03a 	cmpne	r4,r2,zero
   19134:	00c7c83a 	sub	r3,zero,r3
   19138:	0085c83a 	sub	r2,zero,r2
   1913c:	1907c83a 	sub	r3,r3,r4
   19140:	dfc00217 	ldw	ra,8(sp)
   19144:	dc400117 	ldw	r17,4(sp)
   19148:	dc000017 	ldw	r16,0(sp)
   1914c:	dec00304 	addi	sp,sp,12
   19150:	f800283a 	ret

00019154 <__fixunsdfdi>:
   19154:	defffc04 	addi	sp,sp,-16
   19158:	000d883a 	mov	r6,zero
   1915c:	01cf7c34 	movhi	r7,15856
   19160:	dfc00315 	stw	ra,12(sp)
   19164:	dc800215 	stw	r18,8(sp)
   19168:	dc400115 	stw	r17,4(sp)
   1916c:	dc000015 	stw	r16,0(sp)
   19170:	2025883a 	mov	r18,r4
   19174:	2823883a 	mov	r17,r5
   19178:	000b98c0 	call	b98c <__muldf3>
   1917c:	180b883a 	mov	r5,r3
   19180:	1009883a 	mov	r4,r2
   19184:	001906c0 	call	1906c <__fixunsdfsi>
   19188:	1009883a 	mov	r4,r2
   1918c:	1021883a 	mov	r16,r2
   19190:	000ca980 	call	ca98 <__floatunsidf>
   19194:	000d883a 	mov	r6,zero
   19198:	01d07c34 	movhi	r7,16880
   1919c:	1009883a 	mov	r4,r2
   191a0:	180b883a 	mov	r5,r3
   191a4:	000b98c0 	call	b98c <__muldf3>
   191a8:	100d883a 	mov	r6,r2
   191ac:	180f883a 	mov	r7,r3
   191b0:	9009883a 	mov	r4,r18
   191b4:	880b883a 	mov	r5,r17
   191b8:	000c0000 	call	c000 <__subdf3>
   191bc:	180b883a 	mov	r5,r3
   191c0:	1009883a 	mov	r4,r2
   191c4:	001906c0 	call	1906c <__fixunsdfsi>
   191c8:	8007883a 	mov	r3,r16
   191cc:	dfc00317 	ldw	ra,12(sp)
   191d0:	dc800217 	ldw	r18,8(sp)
   191d4:	dc400117 	ldw	r17,4(sp)
   191d8:	dc000017 	ldw	r16,0(sp)
   191dc:	dec00404 	addi	sp,sp,16
   191e0:	f800283a 	ret

000191e4 <__floatdidf>:
   191e4:	defffc04 	addi	sp,sp,-16
   191e8:	dc800215 	stw	r18,8(sp)
   191ec:	2025883a 	mov	r18,r4
   191f0:	2809883a 	mov	r4,r5
   191f4:	dfc00315 	stw	ra,12(sp)
   191f8:	dc400115 	stw	r17,4(sp)
   191fc:	dc000015 	stw	r16,0(sp)
   19200:	000c9e00 	call	c9e0 <__floatsidf>
   19204:	000d883a 	mov	r6,zero
   19208:	01d07c34 	movhi	r7,16880
   1920c:	180b883a 	mov	r5,r3
   19210:	1009883a 	mov	r4,r2
   19214:	000b98c0 	call	b98c <__muldf3>
   19218:	9009883a 	mov	r4,r18
   1921c:	1023883a 	mov	r17,r2
   19220:	1821883a 	mov	r16,r3
   19224:	000ca980 	call	ca98 <__floatunsidf>
   19228:	880d883a 	mov	r6,r17
   1922c:	800f883a 	mov	r7,r16
   19230:	1009883a 	mov	r4,r2
   19234:	180b883a 	mov	r5,r3
   19238:	000a5fc0 	call	a5fc <__adddf3>
   1923c:	dfc00317 	ldw	ra,12(sp)
   19240:	dc800217 	ldw	r18,8(sp)
   19244:	dc400117 	ldw	r17,4(sp)
   19248:	dc000017 	ldw	r16,0(sp)
   1924c:	dec00404 	addi	sp,sp,16
   19250:	f800283a 	ret

00019254 <__udivdi3>:
   19254:	defff504 	addi	sp,sp,-44
   19258:	dcc00415 	stw	r19,16(sp)
   1925c:	dc000115 	stw	r16,4(sp)
   19260:	dfc00a15 	stw	ra,40(sp)
   19264:	df000915 	stw	fp,36(sp)
   19268:	ddc00815 	stw	r23,32(sp)
   1926c:	dd800715 	stw	r22,28(sp)
   19270:	dd400615 	stw	r21,24(sp)
   19274:	dd000515 	stw	r20,20(sp)
   19278:	dc800315 	stw	r18,12(sp)
   1927c:	dc400215 	stw	r17,8(sp)
   19280:	2027883a 	mov	r19,r4
   19284:	2821883a 	mov	r16,r5
   19288:	3800411e 	bne	r7,zero,19390 <__udivdi3+0x13c>
   1928c:	3829883a 	mov	r20,r7
   19290:	3023883a 	mov	r17,r6
   19294:	2025883a 	mov	r18,r4
   19298:	29805d2e 	bgeu	r5,r6,19410 <__udivdi3+0x1bc>
   1929c:	00bfffd4 	movui	r2,65535
   192a0:	282b883a 	mov	r21,r5
   192a4:	1180a02e 	bgeu	r2,r6,19528 <__udivdi3+0x2d4>
   192a8:	00804034 	movhi	r2,256
   192ac:	30813636 	bltu	r6,r2,19788 <__udivdi3+0x534>
   192b0:	3006d63a 	srli	r3,r6,24
   192b4:	05000604 	movi	r20,24
   192b8:	008000b4 	movhi	r2,2
   192bc:	1885883a 	add	r2,r3,r2
   192c0:	1085db03 	ldbu	r2,5996(r2)
   192c4:	00c00804 	movi	r3,32
   192c8:	1505883a 	add	r2,r2,r20
   192cc:	1889c83a 	sub	r4,r3,r2
   192d0:	18800526 	beq	r3,r2,192e8 <__udivdi3+0x94>
   192d4:	8120983a 	sll	r16,r16,r4
   192d8:	9884d83a 	srl	r2,r19,r2
   192dc:	3122983a 	sll	r17,r6,r4
   192e0:	9924983a 	sll	r18,r19,r4
   192e4:	142ab03a 	or	r21,r2,r16
   192e8:	882cd43a 	srli	r22,r17,16
   192ec:	a809883a 	mov	r4,r21
   192f0:	8d3fffcc 	andi	r20,r17,65535
   192f4:	b00b883a 	mov	r5,r22
   192f8:	00095340 	call	9534 <__umodsi3>
   192fc:	a809883a 	mov	r4,r21
   19300:	b00b883a 	mov	r5,r22
   19304:	1027883a 	mov	r19,r2
   19308:	00094d00 	call	94d0 <__udivsi3>
   1930c:	9826943a 	slli	r19,r19,16
   19310:	9008d43a 	srli	r4,r18,16
   19314:	1021883a 	mov	r16,r2
   19318:	a085383a 	mul	r2,r20,r2
   1931c:	9908b03a 	or	r4,r19,r4
   19320:	2080052e 	bgeu	r4,r2,19338 <__udivdi3+0xe4>
   19324:	2449883a 	add	r4,r4,r17
   19328:	80ffffc4 	addi	r3,r16,-1
   1932c:	24400136 	bltu	r4,r17,19334 <__udivdi3+0xe0>
   19330:	20812636 	bltu	r4,r2,197cc <__udivdi3+0x578>
   19334:	1821883a 	mov	r16,r3
   19338:	20a7c83a 	sub	r19,r4,r2
   1933c:	9809883a 	mov	r4,r19
   19340:	b00b883a 	mov	r5,r22
   19344:	00095340 	call	9534 <__umodsi3>
   19348:	9809883a 	mov	r4,r19
   1934c:	b00b883a 	mov	r5,r22
   19350:	1027883a 	mov	r19,r2
   19354:	9826943a 	slli	r19,r19,16
   19358:	00094d00 	call	94d0 <__udivsi3>
   1935c:	a0a9383a 	mul	r20,r20,r2
   19360:	94bfffcc 	andi	r18,r18,65535
   19364:	9ca4b03a 	or	r18,r19,r18
   19368:	9500052e 	bgeu	r18,r20,19380 <__udivdi3+0x12c>
   1936c:	8ca5883a 	add	r18,r17,r18
   19370:	10ffffc4 	addi	r3,r2,-1
   19374:	94400136 	bltu	r18,r17,1937c <__udivdi3+0x128>
   19378:	95011236 	bltu	r18,r20,197c4 <__udivdi3+0x570>
   1937c:	1805883a 	mov	r2,r3
   19380:	8020943a 	slli	r16,r16,16
   19384:	0007883a 	mov	r3,zero
   19388:	8084b03a 	or	r2,r16,r2
   1938c:	00000306 	br	1939c <__udivdi3+0x148>
   19390:	29c00e2e 	bgeu	r5,r7,193cc <__udivdi3+0x178>
   19394:	0007883a 	mov	r3,zero
   19398:	0005883a 	mov	r2,zero
   1939c:	dfc00a17 	ldw	ra,40(sp)
   193a0:	df000917 	ldw	fp,36(sp)
   193a4:	ddc00817 	ldw	r23,32(sp)
   193a8:	dd800717 	ldw	r22,28(sp)
   193ac:	dd400617 	ldw	r21,24(sp)
   193b0:	dd000517 	ldw	r20,20(sp)
   193b4:	dcc00417 	ldw	r19,16(sp)
   193b8:	dc800317 	ldw	r18,12(sp)
   193bc:	dc400217 	ldw	r17,8(sp)
   193c0:	dc000117 	ldw	r16,4(sp)
   193c4:	dec00b04 	addi	sp,sp,44
   193c8:	f800283a 	ret
   193cc:	00bfffd4 	movui	r2,65535
   193d0:	11c05a2e 	bgeu	r2,r7,1953c <__udivdi3+0x2e8>
   193d4:	00804034 	movhi	r2,256
   193d8:	3880dd36 	bltu	r7,r2,19750 <__udivdi3+0x4fc>
   193dc:	3804d63a 	srli	r2,r7,24
   193e0:	01000604 	movi	r4,24
   193e4:	00c000b4 	movhi	r3,2
   193e8:	10c7883a 	add	r3,r2,r3
   193ec:	1885db03 	ldbu	r2,5996(r3)
   193f0:	00c00804 	movi	r3,32
   193f4:	1105883a 	add	r2,r2,r4
   193f8:	18abc83a 	sub	r21,r3,r2
   193fc:	1880861e 	bne	r3,r2,19618 <__udivdi3+0x3c4>
   19400:	3c00d836 	bltu	r7,r16,19764 <__udivdi3+0x510>
   19404:	9985403a 	cmpgeu	r2,r19,r6
   19408:	0007883a 	mov	r3,zero
   1940c:	003fe306 	br	1939c <__udivdi3+0x148>
   19410:	3000041e 	bne	r6,zero,19424 <__udivdi3+0x1d0>
   19414:	000b883a 	mov	r5,zero
   19418:	01000044 	movi	r4,1
   1941c:	00094d00 	call	94d0 <__udivsi3>
   19420:	1023883a 	mov	r17,r2
   19424:	00bfffd4 	movui	r2,65535
   19428:	14403a2e 	bgeu	r2,r17,19514 <__udivdi3+0x2c0>
   1942c:	00804034 	movhi	r2,256
   19430:	8880d236 	bltu	r17,r2,1977c <__udivdi3+0x528>
   19434:	8806d63a 	srli	r3,r17,24
   19438:	05000604 	movi	r20,24
   1943c:	008000b4 	movhi	r2,2
   19440:	1885883a 	add	r2,r3,r2
   19444:	1085db03 	ldbu	r2,5996(r2)
   19448:	00c00804 	movi	r3,32
   1944c:	1505883a 	add	r2,r2,r20
   19450:	188dc83a 	sub	r6,r3,r2
   19454:	18803e1e 	bne	r3,r2,19550 <__udivdi3+0x2fc>
   19458:	882ad43a 	srli	r21,r17,16
   1945c:	8461c83a 	sub	r16,r16,r17
   19460:	8cffffcc 	andi	r19,r17,65535
   19464:	00c00044 	movi	r3,1
   19468:	8009883a 	mov	r4,r16
   1946c:	a80b883a 	mov	r5,r21
   19470:	d8c00015 	stw	r3,0(sp)
   19474:	00095340 	call	9534 <__umodsi3>
   19478:	8009883a 	mov	r4,r16
   1947c:	a80b883a 	mov	r5,r21
   19480:	1021883a 	mov	r16,r2
   19484:	00094d00 	call	94d0 <__udivsi3>
   19488:	8020943a 	slli	r16,r16,16
   1948c:	9008d43a 	srli	r4,r18,16
   19490:	1029883a 	mov	r20,r2
   19494:	14c5383a 	mul	r2,r2,r19
   19498:	8108b03a 	or	r4,r16,r4
   1949c:	d8c00017 	ldw	r3,0(sp)
   194a0:	2080052e 	bgeu	r4,r2,194b8 <__udivdi3+0x264>
   194a4:	2449883a 	add	r4,r4,r17
   194a8:	a17fffc4 	addi	r5,r20,-1
   194ac:	24400136 	bltu	r4,r17,194b4 <__udivdi3+0x260>
   194b0:	2080c936 	bltu	r4,r2,197d8 <__udivdi3+0x584>
   194b4:	2829883a 	mov	r20,r5
   194b8:	20a1c83a 	sub	r16,r4,r2
   194bc:	8009883a 	mov	r4,r16
   194c0:	a80b883a 	mov	r5,r21
   194c4:	d8c00015 	stw	r3,0(sp)
   194c8:	00095340 	call	9534 <__umodsi3>
   194cc:	8009883a 	mov	r4,r16
   194d0:	a80b883a 	mov	r5,r21
   194d4:	1021883a 	mov	r16,r2
   194d8:	8020943a 	slli	r16,r16,16
   194dc:	00094d00 	call	94d0 <__udivsi3>
   194e0:	14e7383a 	mul	r19,r2,r19
   194e4:	94bfffcc 	andi	r18,r18,65535
   194e8:	84a4b03a 	or	r18,r16,r18
   194ec:	d8c00017 	ldw	r3,0(sp)
   194f0:	94c0052e 	bgeu	r18,r19,19508 <__udivdi3+0x2b4>
   194f4:	8ca5883a 	add	r18,r17,r18
   194f8:	113fffc4 	addi	r4,r2,-1
   194fc:	94400136 	bltu	r18,r17,19504 <__udivdi3+0x2b0>
   19500:	94c0ae36 	bltu	r18,r19,197bc <__udivdi3+0x568>
   19504:	2005883a 	mov	r2,r4
   19508:	a00c943a 	slli	r6,r20,16
   1950c:	3084b03a 	or	r2,r6,r2
   19510:	003fa206 	br	1939c <__udivdi3+0x148>
   19514:	88804030 	cmpltui	r2,r17,256
   19518:	10009e1e 	bne	r2,zero,19794 <__udivdi3+0x540>
   1951c:	8806d23a 	srli	r3,r17,8
   19520:	05000204 	movi	r20,8
   19524:	003fc506 	br	1943c <__udivdi3+0x1e8>
   19528:	30804030 	cmpltui	r2,r6,256
   1952c:	10008b1e 	bne	r2,zero,1975c <__udivdi3+0x508>
   19530:	3006d23a 	srli	r3,r6,8
   19534:	05000204 	movi	r20,8
   19538:	003f5f06 	br	192b8 <__udivdi3+0x64>
   1953c:	38804030 	cmpltui	r2,r7,256
   19540:	10008b1e 	bne	r2,zero,19770 <__udivdi3+0x51c>
   19544:	3804d23a 	srli	r2,r7,8
   19548:	01000204 	movi	r4,8
   1954c:	003fa506 	br	193e4 <__udivdi3+0x190>
   19550:	89a2983a 	sll	r17,r17,r6
   19554:	80acd83a 	srl	r22,r16,r2
   19558:	81a0983a 	sll	r16,r16,r6
   1955c:	882ad43a 	srli	r21,r17,16
   19560:	9884d83a 	srl	r2,r19,r2
   19564:	b009883a 	mov	r4,r22
   19568:	a80b883a 	mov	r5,r21
   1956c:	99a4983a 	sll	r18,r19,r6
   19570:	1428b03a 	or	r20,r2,r16
   19574:	00095340 	call	9534 <__umodsi3>
   19578:	b009883a 	mov	r4,r22
   1957c:	a80b883a 	mov	r5,r21
   19580:	1021883a 	mov	r16,r2
   19584:	00094d00 	call	94d0 <__udivsi3>
   19588:	8008943a 	slli	r4,r16,16
   1958c:	a00ad43a 	srli	r5,r20,16
   19590:	8cffffcc 	andi	r19,r17,65535
   19594:	98a1383a 	mul	r16,r19,r2
   19598:	2148b03a 	or	r4,r4,r5
   1959c:	102d883a 	mov	r22,r2
   195a0:	2400062e 	bgeu	r4,r16,195bc <__udivdi3+0x368>
   195a4:	2449883a 	add	r4,r4,r17
   195a8:	10bfffc4 	addi	r2,r2,-1
   195ac:	24408136 	bltu	r4,r17,197b4 <__udivdi3+0x560>
   195b0:	2400802e 	bgeu	r4,r16,197b4 <__udivdi3+0x560>
   195b4:	b5bfff84 	addi	r22,r22,-2
   195b8:	2449883a 	add	r4,r4,r17
   195bc:	2421c83a 	sub	r16,r4,r16
   195c0:	8009883a 	mov	r4,r16
   195c4:	a80b883a 	mov	r5,r21
   195c8:	00095340 	call	9534 <__umodsi3>
   195cc:	8009883a 	mov	r4,r16
   195d0:	a80b883a 	mov	r5,r21
   195d4:	1021883a 	mov	r16,r2
   195d8:	8020943a 	slli	r16,r16,16
   195dc:	00094d00 	call	94d0 <__udivsi3>
   195e0:	9889383a 	mul	r4,r19,r2
   195e4:	a53fffcc 	andi	r20,r20,65535
   195e8:	8520b03a 	or	r16,r16,r20
   195ec:	8100062e 	bgeu	r16,r4,19608 <__udivdi3+0x3b4>
   195f0:	8461883a 	add	r16,r16,r17
   195f4:	10ffffc4 	addi	r3,r2,-1
   195f8:	84406a36 	bltu	r16,r17,197a4 <__udivdi3+0x550>
   195fc:	8100692e 	bgeu	r16,r4,197a4 <__udivdi3+0x550>
   19600:	10bfff84 	addi	r2,r2,-2
   19604:	8461883a 	add	r16,r16,r17
   19608:	b006943a 	slli	r3,r22,16
   1960c:	8121c83a 	sub	r16,r16,r4
   19610:	1886b03a 	or	r3,r3,r2
   19614:	003f9406 	br	19468 <__udivdi3+0x214>
   19618:	30acd83a 	srl	r22,r6,r2
   1961c:	3d4e983a 	sll	r7,r7,r21
   19620:	80a4d83a 	srl	r18,r16,r2
   19624:	8546983a 	sll	r3,r16,r21
   19628:	b1ecb03a 	or	r22,r22,r7
   1962c:	b038d43a 	srli	fp,r22,16
   19630:	9884d83a 	srl	r2,r19,r2
   19634:	9009883a 	mov	r4,r18
   19638:	e00b883a 	mov	r5,fp
   1963c:	10e2b03a 	or	r17,r2,r3
   19640:	3568983a 	sll	r20,r6,r21
   19644:	00095340 	call	9534 <__umodsi3>
   19648:	9009883a 	mov	r4,r18
   1964c:	e00b883a 	mov	r5,fp
   19650:	1025883a 	mov	r18,r2
   19654:	00094d00 	call	94d0 <__udivsi3>
   19658:	9008943a 	slli	r4,r18,16
   1965c:	8806d43a 	srli	r3,r17,16
   19660:	b5ffffcc 	andi	r23,r22,65535
   19664:	b8a5383a 	mul	r18,r23,r2
   19668:	20c8b03a 	or	r4,r4,r3
   1966c:	1021883a 	mov	r16,r2
   19670:	2480062e 	bgeu	r4,r18,1968c <__udivdi3+0x438>
   19674:	2589883a 	add	r4,r4,r22
   19678:	10bfffc4 	addi	r2,r2,-1
   1967c:	25804b36 	bltu	r4,r22,197ac <__udivdi3+0x558>
   19680:	24804a2e 	bgeu	r4,r18,197ac <__udivdi3+0x558>
   19684:	843fff84 	addi	r16,r16,-2
   19688:	2589883a 	add	r4,r4,r22
   1968c:	24a5c83a 	sub	r18,r4,r18
   19690:	9009883a 	mov	r4,r18
   19694:	e00b883a 	mov	r5,fp
   19698:	00095340 	call	9534 <__umodsi3>
   1969c:	9009883a 	mov	r4,r18
   196a0:	e00b883a 	mov	r5,fp
   196a4:	1025883a 	mov	r18,r2
   196a8:	9024943a 	slli	r18,r18,16
   196ac:	00094d00 	call	94d0 <__udivsi3>
   196b0:	b8af383a 	mul	r23,r23,r2
   196b4:	8c7fffcc 	andi	r17,r17,65535
   196b8:	9462b03a 	or	r17,r18,r17
   196bc:	8dc0062e 	bgeu	r17,r23,196d8 <__udivdi3+0x484>
   196c0:	8da3883a 	add	r17,r17,r22
   196c4:	10ffffc4 	addi	r3,r2,-1
   196c8:	8d803436 	bltu	r17,r22,1979c <__udivdi3+0x548>
   196cc:	8dc0332e 	bgeu	r17,r23,1979c <__udivdi3+0x548>
   196d0:	10bfff84 	addi	r2,r2,-2
   196d4:	8da3883a 	add	r17,r17,r22
   196d8:	8020943a 	slli	r16,r16,16
   196dc:	10ffffcc 	andi	r3,r2,65535
   196e0:	a00ed43a 	srli	r7,r20,16
   196e4:	8084b03a 	or	r2,r16,r2
   196e8:	1008d43a 	srli	r4,r2,16
   196ec:	a1bfffcc 	andi	r6,r20,65535
   196f0:	1991383a 	mul	r8,r3,r6
   196f4:	218d383a 	mul	r6,r4,r6
   196f8:	19c7383a 	mul	r3,r3,r7
   196fc:	400ad43a 	srli	r5,r8,16
   19700:	21c9383a 	mul	r4,r4,r7
   19704:	1987883a 	add	r3,r3,r6
   19708:	28c7883a 	add	r3,r5,r3
   1970c:	8de3c83a 	sub	r17,r17,r23
   19710:	1980022e 	bgeu	r3,r6,1971c <__udivdi3+0x4c8>
   19714:	01400074 	movhi	r5,1
   19718:	2149883a 	add	r4,r4,r5
   1971c:	180ad43a 	srli	r5,r3,16
   19720:	2909883a 	add	r4,r5,r4
   19724:	89000836 	bltu	r17,r4,19748 <__udivdi3+0x4f4>
   19728:	89000226 	beq	r17,r4,19734 <__udivdi3+0x4e0>
   1972c:	0007883a 	mov	r3,zero
   19730:	003f1a06 	br	1939c <__udivdi3+0x148>
   19734:	1806943a 	slli	r3,r3,16
   19738:	9d4c983a 	sll	r6,r19,r21
   1973c:	423fffcc 	andi	r8,r8,65535
   19740:	1a07883a 	add	r3,r3,r8
   19744:	30fff92e 	bgeu	r6,r3,1972c <__udivdi3+0x4d8>
   19748:	10bfffc4 	addi	r2,r2,-1
   1974c:	003ff706 	br	1972c <__udivdi3+0x4d8>
   19750:	3804d43a 	srli	r2,r7,16
   19754:	01000404 	movi	r4,16
   19758:	003f2206 	br	193e4 <__udivdi3+0x190>
   1975c:	3007883a 	mov	r3,r6
   19760:	003ed506 	br	192b8 <__udivdi3+0x64>
   19764:	0007883a 	mov	r3,zero
   19768:	00800044 	movi	r2,1
   1976c:	003f0b06 	br	1939c <__udivdi3+0x148>
   19770:	3805883a 	mov	r2,r7
   19774:	0009883a 	mov	r4,zero
   19778:	003f1a06 	br	193e4 <__udivdi3+0x190>
   1977c:	8806d43a 	srli	r3,r17,16
   19780:	05000404 	movi	r20,16
   19784:	003f2d06 	br	1943c <__udivdi3+0x1e8>
   19788:	3006d43a 	srli	r3,r6,16
   1978c:	05000404 	movi	r20,16
   19790:	003ec906 	br	192b8 <__udivdi3+0x64>
   19794:	8807883a 	mov	r3,r17
   19798:	003f2806 	br	1943c <__udivdi3+0x1e8>
   1979c:	1805883a 	mov	r2,r3
   197a0:	003fcd06 	br	196d8 <__udivdi3+0x484>
   197a4:	1805883a 	mov	r2,r3
   197a8:	003f9706 	br	19608 <__udivdi3+0x3b4>
   197ac:	1021883a 	mov	r16,r2
   197b0:	003fb606 	br	1968c <__udivdi3+0x438>
   197b4:	102d883a 	mov	r22,r2
   197b8:	003f8006 	br	195bc <__udivdi3+0x368>
   197bc:	10bfff84 	addi	r2,r2,-2
   197c0:	003f5106 	br	19508 <__udivdi3+0x2b4>
   197c4:	10bfff84 	addi	r2,r2,-2
   197c8:	003eed06 	br	19380 <__udivdi3+0x12c>
   197cc:	843fff84 	addi	r16,r16,-2
   197d0:	2449883a 	add	r4,r4,r17
   197d4:	003ed806 	br	19338 <__udivdi3+0xe4>
   197d8:	a53fff84 	addi	r20,r20,-2
   197dc:	2449883a 	add	r4,r4,r17
   197e0:	003f3506 	br	194b8 <__udivdi3+0x264>

000197e4 <__umoddi3>:
   197e4:	defff504 	addi	sp,sp,-44
   197e8:	dc400215 	stw	r17,8(sp)
   197ec:	dc000115 	stw	r16,4(sp)
   197f0:	dfc00a15 	stw	ra,40(sp)
   197f4:	df000915 	stw	fp,36(sp)
   197f8:	ddc00815 	stw	r23,32(sp)
   197fc:	dd800715 	stw	r22,28(sp)
   19800:	dd400615 	stw	r21,24(sp)
   19804:	dd000515 	stw	r20,20(sp)
   19808:	dcc00415 	stw	r19,16(sp)
   1980c:	dc800315 	stw	r18,12(sp)
   19810:	2823883a 	mov	r17,r5
   19814:	2021883a 	mov	r16,r4
   19818:	3800371e 	bne	r7,zero,198f8 <__umoddi3+0x114>
   1981c:	3825883a 	mov	r18,r7
   19820:	3029883a 	mov	r20,r6
   19824:	2027883a 	mov	r19,r4
   19828:	2980572e 	bgeu	r5,r6,19988 <__umoddi3+0x1a4>
   1982c:	00bfffd4 	movui	r2,65535
   19830:	282b883a 	mov	r21,r5
   19834:	1180922e 	bgeu	r2,r6,19a80 <__umoddi3+0x29c>
   19838:	00804034 	movhi	r2,256
   1983c:	30812036 	bltu	r6,r2,19cc0 <__umoddi3+0x4dc>
   19840:	3006d63a 	srli	r3,r6,24
   19844:	04800604 	movi	r18,24
   19848:	008000b4 	movhi	r2,2
   1984c:	1885883a 	add	r2,r3,r2
   19850:	1085db03 	ldbu	r2,5996(r2)
   19854:	00c00804 	movi	r3,32
   19858:	1485883a 	add	r2,r2,r18
   1985c:	18a5c83a 	sub	r18,r3,r2
   19860:	18800526 	beq	r3,r2,19878 <__umoddi3+0x94>
   19864:	8ca2983a 	sll	r17,r17,r18
   19868:	8084d83a 	srl	r2,r16,r2
   1986c:	34a8983a 	sll	r20,r6,r18
   19870:	84a6983a 	sll	r19,r16,r18
   19874:	146ab03a 	or	r21,r2,r17
   19878:	a02cd43a 	srli	r22,r20,16
   1987c:	a809883a 	mov	r4,r21
   19880:	a43fffcc 	andi	r16,r20,65535
   19884:	b00b883a 	mov	r5,r22
   19888:	00095340 	call	9534 <__umodsi3>
   1988c:	a809883a 	mov	r4,r21
   19890:	b00b883a 	mov	r5,r22
   19894:	1023883a 	mov	r17,r2
   19898:	00094d00 	call	94d0 <__udivsi3>
   1989c:	8822943a 	slli	r17,r17,16
   198a0:	9808d43a 	srli	r4,r19,16
   198a4:	80ab383a 	mul	r21,r16,r2
   198a8:	8908b03a 	or	r4,r17,r4
   198ac:	2540042e 	bgeu	r4,r21,198c0 <__umoddi3+0xdc>
   198b0:	2509883a 	add	r4,r4,r20
   198b4:	25000236 	bltu	r4,r20,198c0 <__umoddi3+0xdc>
   198b8:	2540012e 	bgeu	r4,r21,198c0 <__umoddi3+0xdc>
   198bc:	2509883a 	add	r4,r4,r20
   198c0:	256bc83a 	sub	r21,r4,r21
   198c4:	b00b883a 	mov	r5,r22
   198c8:	a809883a 	mov	r4,r21
   198cc:	00095340 	call	9534 <__umodsi3>
   198d0:	1023883a 	mov	r17,r2
   198d4:	b00b883a 	mov	r5,r22
   198d8:	a809883a 	mov	r4,r21
   198dc:	00094d00 	call	94d0 <__udivsi3>
   198e0:	8822943a 	slli	r17,r17,16
   198e4:	8085383a 	mul	r2,r16,r2
   198e8:	98ffffcc 	andi	r3,r19,65535
   198ec:	88c6b03a 	or	r3,r17,r3
   198f0:	18805a2e 	bgeu	r3,r2,19a5c <__umoddi3+0x278>
   198f4:	00005506 	br	19a4c <__umoddi3+0x268>
   198f8:	2005883a 	mov	r2,r4
   198fc:	29c00d2e 	bgeu	r5,r7,19934 <__umoddi3+0x150>
   19900:	2807883a 	mov	r3,r5
   19904:	dfc00a17 	ldw	ra,40(sp)
   19908:	df000917 	ldw	fp,36(sp)
   1990c:	ddc00817 	ldw	r23,32(sp)
   19910:	dd800717 	ldw	r22,28(sp)
   19914:	dd400617 	ldw	r21,24(sp)
   19918:	dd000517 	ldw	r20,20(sp)
   1991c:	dcc00417 	ldw	r19,16(sp)
   19920:	dc800317 	ldw	r18,12(sp)
   19924:	dc400217 	ldw	r17,8(sp)
   19928:	dc000117 	ldw	r16,4(sp)
   1992c:	dec00b04 	addi	sp,sp,44
   19930:	f800283a 	ret
   19934:	013fffd4 	movui	r4,65535
   19938:	2807883a 	mov	r3,r5
   1993c:	21c0552e 	bgeu	r4,r7,19a94 <__umoddi3+0x2b0>
   19940:	01004034 	movhi	r4,256
   19944:	3900e336 	bltu	r7,r4,19cd4 <__umoddi3+0x4f0>
   19948:	3808d63a 	srli	r4,r7,24
   1994c:	02000604 	movi	r8,24
   19950:	014000b4 	movhi	r5,2
   19954:	214b883a 	add	r5,r4,r5
   19958:	2d45db03 	ldbu	r21,5996(r5)
   1995c:	01000804 	movi	r4,32
   19960:	aa2b883a 	add	r21,r21,r8
   19964:	2569c83a 	sub	r20,r4,r21
   19968:	25404f1e 	bne	r4,r21,19aa8 <__umoddi3+0x2c4>
   1996c:	3c400136 	bltu	r7,r17,19974 <__umoddi3+0x190>
   19970:	81bfe436 	bltu	r16,r6,19904 <__umoddi3+0x120>
   19974:	8185c83a 	sub	r2,r16,r6
   19978:	89cfc83a 	sub	r7,r17,r7
   1997c:	8087803a 	cmpltu	r3,r16,r2
   19980:	38c7c83a 	sub	r3,r7,r3
   19984:	003fdf06 	br	19904 <__umoddi3+0x120>
   19988:	3000041e 	bne	r6,zero,1999c <__umoddi3+0x1b8>
   1998c:	000b883a 	mov	r5,zero
   19990:	01000044 	movi	r4,1
   19994:	00094d00 	call	94d0 <__udivsi3>
   19998:	1029883a 	mov	r20,r2
   1999c:	00bfffd4 	movui	r2,65535
   199a0:	1500322e 	bgeu	r2,r20,19a6c <__umoddi3+0x288>
   199a4:	00804034 	movhi	r2,256
   199a8:	a080cd36 	bltu	r20,r2,19ce0 <__umoddi3+0x4fc>
   199ac:	a006d63a 	srli	r3,r20,24
   199b0:	04800604 	movi	r18,24
   199b4:	008000b4 	movhi	r2,2
   199b8:	1885883a 	add	r2,r3,r2
   199bc:	1585db03 	ldbu	r22,5996(r2)
   199c0:	00800804 	movi	r2,32
   199c4:	b4ad883a 	add	r22,r22,r18
   199c8:	15a5c83a 	sub	r18,r2,r22
   199cc:	15808a1e 	bne	r2,r22,19bf8 <__umoddi3+0x414>
   199d0:	a02ed43a 	srli	r23,r20,16
   199d4:	8d23c83a 	sub	r17,r17,r20
   199d8:	a57fffcc 	andi	r21,r20,65535
   199dc:	b80b883a 	mov	r5,r23
   199e0:	8809883a 	mov	r4,r17
   199e4:	00095340 	call	9534 <__umodsi3>
   199e8:	8809883a 	mov	r4,r17
   199ec:	b80b883a 	mov	r5,r23
   199f0:	102d883a 	mov	r22,r2
   199f4:	00094d00 	call	94d0 <__udivsi3>
   199f8:	b02c943a 	slli	r22,r22,16
   199fc:	9808d43a 	srli	r4,r19,16
   19a00:	1561383a 	mul	r16,r2,r21
   19a04:	b108b03a 	or	r4,r22,r4
   19a08:	2400032e 	bgeu	r4,r16,19a18 <__umoddi3+0x234>
   19a0c:	2509883a 	add	r4,r4,r20
   19a10:	25000136 	bltu	r4,r20,19a18 <__umoddi3+0x234>
   19a14:	2400be36 	bltu	r4,r16,19d10 <__umoddi3+0x52c>
   19a18:	2421c83a 	sub	r16,r4,r16
   19a1c:	b80b883a 	mov	r5,r23
   19a20:	8009883a 	mov	r4,r16
   19a24:	00095340 	call	9534 <__umodsi3>
   19a28:	1023883a 	mov	r17,r2
   19a2c:	b80b883a 	mov	r5,r23
   19a30:	8009883a 	mov	r4,r16
   19a34:	00094d00 	call	94d0 <__udivsi3>
   19a38:	8822943a 	slli	r17,r17,16
   19a3c:	1545383a 	mul	r2,r2,r21
   19a40:	98ffffcc 	andi	r3,r19,65535
   19a44:	88c6b03a 	or	r3,r17,r3
   19a48:	1880042e 	bgeu	r3,r2,19a5c <__umoddi3+0x278>
   19a4c:	1d07883a 	add	r3,r3,r20
   19a50:	1d000236 	bltu	r3,r20,19a5c <__umoddi3+0x278>
   19a54:	1880012e 	bgeu	r3,r2,19a5c <__umoddi3+0x278>
   19a58:	1d07883a 	add	r3,r3,r20
   19a5c:	1885c83a 	sub	r2,r3,r2
   19a60:	1484d83a 	srl	r2,r2,r18
   19a64:	0007883a 	mov	r3,zero
   19a68:	003fa606 	br	19904 <__umoddi3+0x120>
   19a6c:	a0804030 	cmpltui	r2,r20,256
   19a70:	10009e1e 	bne	r2,zero,19cec <__umoddi3+0x508>
   19a74:	a006d23a 	srli	r3,r20,8
   19a78:	04800204 	movi	r18,8
   19a7c:	003fcd06 	br	199b4 <__umoddi3+0x1d0>
   19a80:	30804030 	cmpltui	r2,r6,256
   19a84:	1000911e 	bne	r2,zero,19ccc <__umoddi3+0x4e8>
   19a88:	3006d23a 	srli	r3,r6,8
   19a8c:	04800204 	movi	r18,8
   19a90:	003f6d06 	br	19848 <__umoddi3+0x64>
   19a94:	39004030 	cmpltui	r4,r7,256
   19a98:	2000961e 	bne	r4,zero,19cf4 <__umoddi3+0x510>
   19a9c:	3808d23a 	srli	r4,r7,8
   19aa0:	02000204 	movi	r8,8
   19aa4:	003faa06 	br	19950 <__umoddi3+0x16c>
   19aa8:	3d0e983a 	sll	r7,r7,r20
   19aac:	3544d83a 	srl	r2,r6,r21
   19ab0:	8d64d83a 	srl	r18,r17,r21
   19ab4:	8d22983a 	sll	r17,r17,r20
   19ab8:	11eeb03a 	or	r23,r2,r7
   19abc:	b838d43a 	srli	fp,r23,16
   19ac0:	8544d83a 	srl	r2,r16,r21
   19ac4:	9009883a 	mov	r4,r18
   19ac8:	e00b883a 	mov	r5,fp
   19acc:	3526983a 	sll	r19,r6,r20
   19ad0:	1462b03a 	or	r17,r2,r17
   19ad4:	00095340 	call	9534 <__umodsi3>
   19ad8:	9009883a 	mov	r4,r18
   19adc:	e00b883a 	mov	r5,fp
   19ae0:	1025883a 	mov	r18,r2
   19ae4:	00094d00 	call	94d0 <__udivsi3>
   19ae8:	9008943a 	slli	r4,r18,16
   19aec:	8806d43a 	srli	r3,r17,16
   19af0:	b9ffffcc 	andi	r7,r23,65535
   19af4:	38a5383a 	mul	r18,r7,r2
   19af8:	20c8b03a 	or	r4,r4,r3
   19afc:	8520983a 	sll	r16,r16,r20
   19b00:	102d883a 	mov	r22,r2
   19b04:	2480062e 	bgeu	r4,r18,19b20 <__umoddi3+0x33c>
   19b08:	25c9883a 	add	r4,r4,r23
   19b0c:	10bfffc4 	addi	r2,r2,-1
   19b10:	25c07d36 	bltu	r4,r23,19d08 <__umoddi3+0x524>
   19b14:	24807c2e 	bgeu	r4,r18,19d08 <__umoddi3+0x524>
   19b18:	b5bfff84 	addi	r22,r22,-2
   19b1c:	25c9883a 	add	r4,r4,r23
   19b20:	24a5c83a 	sub	r18,r4,r18
   19b24:	9009883a 	mov	r4,r18
   19b28:	e00b883a 	mov	r5,fp
   19b2c:	d9c00015 	stw	r7,0(sp)
   19b30:	00095340 	call	9534 <__umodsi3>
   19b34:	9009883a 	mov	r4,r18
   19b38:	e00b883a 	mov	r5,fp
   19b3c:	1025883a 	mov	r18,r2
   19b40:	00094d00 	call	94d0 <__udivsi3>
   19b44:	d9c00017 	ldw	r7,0(sp)
   19b48:	9024943a 	slli	r18,r18,16
   19b4c:	8c7fffcc 	andi	r17,r17,65535
   19b50:	388f383a 	mul	r7,r7,r2
   19b54:	9448b03a 	or	r4,r18,r17
   19b58:	21c0062e 	bgeu	r4,r7,19b74 <__umoddi3+0x390>
   19b5c:	25c9883a 	add	r4,r4,r23
   19b60:	10ffffc4 	addi	r3,r2,-1
   19b64:	25c06636 	bltu	r4,r23,19d00 <__umoddi3+0x51c>
   19b68:	21c0652e 	bgeu	r4,r7,19d00 <__umoddi3+0x51c>
   19b6c:	10bfff84 	addi	r2,r2,-2
   19b70:	25c9883a 	add	r4,r4,r23
   19b74:	b00a943a 	slli	r5,r22,16
   19b78:	11bfffcc 	andi	r6,r2,65535
   19b7c:	9806d43a 	srli	r3,r19,16
   19b80:	2884b03a 	or	r2,r5,r2
   19b84:	102cd43a 	srli	r22,r2,16
   19b88:	997fffcc 	andi	r5,r19,65535
   19b8c:	3151383a 	mul	r8,r6,r5
   19b90:	b14b383a 	mul	r5,r22,r5
   19b94:	30cd383a 	mul	r6,r6,r3
   19b98:	4004d43a 	srli	r2,r8,16
   19b9c:	b0ed383a 	mul	r22,r22,r3
   19ba0:	314d883a 	add	r6,r6,r5
   19ba4:	1185883a 	add	r2,r2,r6
   19ba8:	21c9c83a 	sub	r4,r4,r7
   19bac:	1140022e 	bgeu	r2,r5,19bb8 <__umoddi3+0x3d4>
   19bb0:	00c00074 	movhi	r3,1
   19bb4:	b0ed883a 	add	r22,r22,r3
   19bb8:	1006d43a 	srli	r3,r2,16
   19bbc:	1004943a 	slli	r2,r2,16
   19bc0:	423fffcc 	andi	r8,r8,65535
   19bc4:	1dad883a 	add	r22,r3,r22
   19bc8:	1205883a 	add	r2,r2,r8
   19bcc:	25803636 	bltu	r4,r22,19ca8 <__umoddi3+0x4c4>
   19bd0:	25803426 	beq	r4,r22,19ca4 <__umoddi3+0x4c0>
   19bd4:	8085c83a 	sub	r2,r16,r2
   19bd8:	8087803a 	cmpltu	r3,r16,r2
   19bdc:	2589c83a 	sub	r4,r4,r22
   19be0:	20c7c83a 	sub	r3,r4,r3
   19be4:	1d60983a 	sll	r16,r3,r21
   19be8:	1504d83a 	srl	r2,r2,r20
   19bec:	1d06d83a 	srl	r3,r3,r20
   19bf0:	8084b03a 	or	r2,r16,r2
   19bf4:	003f4306 	br	19904 <__umoddi3+0x120>
   19bf8:	a4a8983a 	sll	r20,r20,r18
   19bfc:	8daad83a 	srl	r21,r17,r22
   19c00:	8ca2983a 	sll	r17,r17,r18
   19c04:	a02ed43a 	srli	r23,r20,16
   19c08:	a809883a 	mov	r4,r21
   19c0c:	85acd83a 	srl	r22,r16,r22
   19c10:	b80b883a 	mov	r5,r23
   19c14:	00095340 	call	9534 <__umodsi3>
   19c18:	a809883a 	mov	r4,r21
   19c1c:	b80b883a 	mov	r5,r23
   19c20:	b46cb03a 	or	r22,r22,r17
   19c24:	1027883a 	mov	r19,r2
   19c28:	00094d00 	call	94d0 <__udivsi3>
   19c2c:	9826943a 	slli	r19,r19,16
   19c30:	b008d43a 	srli	r4,r22,16
   19c34:	a57fffcc 	andi	r21,r20,65535
   19c38:	a8a3383a 	mul	r17,r21,r2
   19c3c:	9908b03a 	or	r4,r19,r4
   19c40:	84a6983a 	sll	r19,r16,r18
   19c44:	2440042e 	bgeu	r4,r17,19c58 <__umoddi3+0x474>
   19c48:	2509883a 	add	r4,r4,r20
   19c4c:	25000236 	bltu	r4,r20,19c58 <__umoddi3+0x474>
   19c50:	2440012e 	bgeu	r4,r17,19c58 <__umoddi3+0x474>
   19c54:	2509883a 	add	r4,r4,r20
   19c58:	2463c83a 	sub	r17,r4,r17
   19c5c:	8809883a 	mov	r4,r17
   19c60:	b80b883a 	mov	r5,r23
   19c64:	00095340 	call	9534 <__umodsi3>
   19c68:	1021883a 	mov	r16,r2
   19c6c:	8809883a 	mov	r4,r17
   19c70:	b80b883a 	mov	r5,r23
   19c74:	8020943a 	slli	r16,r16,16
   19c78:	00094d00 	call	94d0 <__udivsi3>
   19c7c:	a885383a 	mul	r2,r21,r2
   19c80:	b47fffcc 	andi	r17,r22,65535
   19c84:	8462b03a 	or	r17,r16,r17
   19c88:	8880042e 	bgeu	r17,r2,19c9c <__umoddi3+0x4b8>
   19c8c:	8d23883a 	add	r17,r17,r20
   19c90:	8d000236 	bltu	r17,r20,19c9c <__umoddi3+0x4b8>
   19c94:	8880012e 	bgeu	r17,r2,19c9c <__umoddi3+0x4b8>
   19c98:	8d23883a 	add	r17,r17,r20
   19c9c:	88a3c83a 	sub	r17,r17,r2
   19ca0:	003f4e06 	br	199dc <__umoddi3+0x1f8>
   19ca4:	80bfcb2e 	bgeu	r16,r2,19bd4 <__umoddi3+0x3f0>
   19ca8:	14e7c83a 	sub	r19,r2,r19
   19cac:	14c5803a 	cmpltu	r2,r2,r19
   19cb0:	15c5883a 	add	r2,r2,r23
   19cb4:	b0adc83a 	sub	r22,r22,r2
   19cb8:	9805883a 	mov	r2,r19
   19cbc:	003fc506 	br	19bd4 <__umoddi3+0x3f0>
   19cc0:	3006d43a 	srli	r3,r6,16
   19cc4:	04800404 	movi	r18,16
   19cc8:	003edf06 	br	19848 <__umoddi3+0x64>
   19ccc:	3007883a 	mov	r3,r6
   19cd0:	003edd06 	br	19848 <__umoddi3+0x64>
   19cd4:	3808d43a 	srli	r4,r7,16
   19cd8:	02000404 	movi	r8,16
   19cdc:	003f1c06 	br	19950 <__umoddi3+0x16c>
   19ce0:	a006d43a 	srli	r3,r20,16
   19ce4:	04800404 	movi	r18,16
   19ce8:	003f3206 	br	199b4 <__umoddi3+0x1d0>
   19cec:	a007883a 	mov	r3,r20
   19cf0:	003f3006 	br	199b4 <__umoddi3+0x1d0>
   19cf4:	3809883a 	mov	r4,r7
   19cf8:	0011883a 	mov	r8,zero
   19cfc:	003f1406 	br	19950 <__umoddi3+0x16c>
   19d00:	1805883a 	mov	r2,r3
   19d04:	003f9b06 	br	19b74 <__umoddi3+0x390>
   19d08:	102d883a 	mov	r22,r2
   19d0c:	003f8406 	br	19b20 <__umoddi3+0x33c>
   19d10:	2509883a 	add	r4,r4,r20
   19d14:	003f4006 	br	19a18 <__umoddi3+0x234>

00019d18 <__lesf2>:
   19d18:	200cd5fa 	srli	r6,r4,23
   19d1c:	280ed5fa 	srli	r7,r5,23
   19d20:	00c02034 	movhi	r3,128
   19d24:	31803fcc 	andi	r6,r6,255
   19d28:	18ffffc4 	addi	r3,r3,-1
   19d2c:	32003fd8 	cmpnei	r8,r6,255
   19d30:	2012d7fa 	srli	r9,r4,31
   19d34:	2804d7fa 	srli	r2,r5,31
   19d38:	1908703a 	and	r4,r3,r4
   19d3c:	1946703a 	and	r3,r3,r5
   19d40:	39403fcc 	andi	r5,r7,255
   19d44:	40000826 	beq	r8,zero,19d68 <__lesf2+0x50>
   19d48:	29c03fd8 	cmpnei	r7,r5,255
   19d4c:	38000926 	beq	r7,zero,19d74 <__lesf2+0x5c>
   19d50:	3000181e 	bne	r6,zero,19db4 <__lesf2+0x9c>
   19d54:	2800091e 	bne	r5,zero,19d7c <__lesf2+0x64>
   19d58:	1800081e 	bne	r3,zero,19d7c <__lesf2+0x64>
   19d5c:	2000091e 	bne	r4,zero,19d84 <__lesf2+0x6c>
   19d60:	0005883a 	mov	r2,zero
   19d64:	f800283a 	ret
   19d68:	20000a1e 	bne	r4,zero,19d94 <__lesf2+0x7c>
   19d6c:	29c03fe0 	cmpeqi	r7,r5,255
   19d70:	38001026 	beq	r7,zero,19db4 <__lesf2+0x9c>
   19d74:	1800071e 	bne	r3,zero,19d94 <__lesf2+0x7c>
   19d78:	3000011e 	bne	r6,zero,19d80 <__lesf2+0x68>
   19d7c:	20000b26 	beq	r4,zero,19dac <__lesf2+0x94>
   19d80:	48800626 	beq	r9,r2,19d9c <__lesf2+0x84>
   19d84:	00800044 	movi	r2,1
   19d88:	48000926 	beq	r9,zero,19db0 <__lesf2+0x98>
   19d8c:	00bfffc4 	movi	r2,-1
   19d90:	f800283a 	ret
   19d94:	00800084 	movi	r2,2
   19d98:	f800283a 	ret
   19d9c:	29800816 	blt	r5,r6,19dc0 <__lesf2+0xa8>
   19da0:	31400216 	blt	r6,r5,19dac <__lesf2+0x94>
   19da4:	19000636 	bltu	r3,r4,19dc0 <__lesf2+0xa8>
   19da8:	20ffed2e 	bgeu	r4,r3,19d60 <__lesf2+0x48>
   19dac:	103ff726 	beq	r2,zero,19d8c <__lesf2+0x74>
   19db0:	f800283a 	ret
   19db4:	283ff21e 	bne	r5,zero,19d80 <__lesf2+0x68>
   19db8:	183ff11e 	bne	r3,zero,19d80 <__lesf2+0x68>
   19dbc:	003ff106 	br	19d84 <__lesf2+0x6c>
   19dc0:	103ff21e 	bne	r2,zero,19d8c <__lesf2+0x74>
   19dc4:	00800044 	movi	r2,1
   19dc8:	f800283a 	ret

00019dcc <__unordsf2>:
   19dcc:	2006d5fa 	srli	r3,r4,23
   19dd0:	00802034 	movhi	r2,128
   19dd4:	10bfffc4 	addi	r2,r2,-1
   19dd8:	18c03fcc 	andi	r3,r3,255
   19ddc:	18c03fd8 	cmpnei	r3,r3,255
   19de0:	1108703a 	and	r4,r2,r4
   19de4:	280cd5fa 	srli	r6,r5,23
   19de8:	1144703a 	and	r2,r2,r5
   19dec:	18000526 	beq	r3,zero,19e04 <__unordsf2+0x38>
   19df0:	31803fcc 	andi	r6,r6,255
   19df4:	31803fd8 	cmpnei	r6,r6,255
   19df8:	30000526 	beq	r6,zero,19e10 <__unordsf2+0x44>
   19dfc:	0005883a 	mov	r2,zero
   19e00:	f800283a 	ret
   19e04:	203ffa26 	beq	r4,zero,19df0 <__unordsf2+0x24>
   19e08:	00800044 	movi	r2,1
   19e0c:	f800283a 	ret
   19e10:	1004c03a 	cmpne	r2,r2,zero
   19e14:	f800283a 	ret

00019e18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   19e18:	defffe04 	addi	sp,sp,-8
   19e1c:	dfc00115 	stw	ra,4(sp)
   19e20:	df000015 	stw	fp,0(sp)
   19e24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19e28:	d0a00a17 	ldw	r2,-32728(gp)
   19e2c:	10000326 	beq	r2,zero,19e3c <alt_get_errno+0x24>
   19e30:	d0a00a17 	ldw	r2,-32728(gp)
   19e34:	103ee83a 	callr	r2
   19e38:	00000106 	br	19e40 <alt_get_errno+0x28>
   19e3c:	d0a74504 	addi	r2,gp,-25324
}
   19e40:	e037883a 	mov	sp,fp
   19e44:	dfc00117 	ldw	ra,4(sp)
   19e48:	df000017 	ldw	fp,0(sp)
   19e4c:	dec00204 	addi	sp,sp,8
   19e50:	f800283a 	ret

00019e54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   19e54:	defffb04 	addi	sp,sp,-20
   19e58:	dfc00415 	stw	ra,16(sp)
   19e5c:	df000315 	stw	fp,12(sp)
   19e60:	df000304 	addi	fp,sp,12
   19e64:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   19e68:	e0bffd17 	ldw	r2,-12(fp)
   19e6c:	10000616 	blt	r2,zero,19e88 <close+0x34>
   19e70:	e0bffd17 	ldw	r2,-12(fp)
   19e74:	10c00324 	muli	r3,r2,12
   19e78:	008000b4 	movhi	r2,2
   19e7c:	108a6504 	addi	r2,r2,10644
   19e80:	1885883a 	add	r2,r3,r2
   19e84:	00000106 	br	19e8c <close+0x38>
   19e88:	0005883a 	mov	r2,zero
   19e8c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   19e90:	e0bfff17 	ldw	r2,-4(fp)
   19e94:	10001926 	beq	r2,zero,19efc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   19e98:	e0bfff17 	ldw	r2,-4(fp)
   19e9c:	10800017 	ldw	r2,0(r2)
   19ea0:	10800417 	ldw	r2,16(r2)
   19ea4:	10000626 	beq	r2,zero,19ec0 <close+0x6c>
   19ea8:	e0bfff17 	ldw	r2,-4(fp)
   19eac:	10800017 	ldw	r2,0(r2)
   19eb0:	10800417 	ldw	r2,16(r2)
   19eb4:	e13fff17 	ldw	r4,-4(fp)
   19eb8:	103ee83a 	callr	r2
   19ebc:	00000106 	br	19ec4 <close+0x70>
   19ec0:	0005883a 	mov	r2,zero
   19ec4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   19ec8:	e13ffd17 	ldw	r4,-12(fp)
   19ecc:	001a9300 	call	1a930 <alt_release_fd>
    if (rval < 0)
   19ed0:	e0bffe17 	ldw	r2,-8(fp)
   19ed4:	1000070e 	bge	r2,zero,19ef4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   19ed8:	0019e180 	call	19e18 <alt_get_errno>
   19edc:	1007883a 	mov	r3,r2
   19ee0:	e0bffe17 	ldw	r2,-8(fp)
   19ee4:	0085c83a 	sub	r2,zero,r2
   19ee8:	18800015 	stw	r2,0(r3)
      return -1;
   19eec:	00bfffc4 	movi	r2,-1
   19ef0:	00000706 	br	19f10 <close+0xbc>
    }
    return 0;
   19ef4:	0005883a 	mov	r2,zero
   19ef8:	00000506 	br	19f10 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   19efc:	0019e180 	call	19e18 <alt_get_errno>
   19f00:	1007883a 	mov	r3,r2
   19f04:	00801444 	movi	r2,81
   19f08:	18800015 	stw	r2,0(r3)
    return -1;
   19f0c:	00bfffc4 	movi	r2,-1
  }
}
   19f10:	e037883a 	mov	sp,fp
   19f14:	dfc00117 	ldw	ra,4(sp)
   19f18:	df000017 	ldw	fp,0(sp)
   19f1c:	dec00204 	addi	sp,sp,8
   19f20:	f800283a 	ret

00019f24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   19f24:	defffc04 	addi	sp,sp,-16
   19f28:	df000315 	stw	fp,12(sp)
   19f2c:	df000304 	addi	fp,sp,12
   19f30:	e13fff15 	stw	r4,-4(fp)
   19f34:	e17ffe15 	stw	r5,-8(fp)
   19f38:	e1bffd15 	stw	r6,-12(fp)
  return len;
   19f3c:	e0bffd17 	ldw	r2,-12(fp)
}
   19f40:	e037883a 	mov	sp,fp
   19f44:	df000017 	ldw	fp,0(sp)
   19f48:	dec00104 	addi	sp,sp,4
   19f4c:	f800283a 	ret

00019f50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19f50:	defffd04 	addi	sp,sp,-12
   19f54:	df000215 	stw	fp,8(sp)
   19f58:	df000204 	addi	fp,sp,8
   19f5c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19f60:	0001883a 	nop
   19f64:	e0bffe17 	ldw	r2,-8(fp)
   19f68:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19f6c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19f70:	10000226 	beq	r2,zero,19f7c <_exit+0x2c>
    ALT_SIM_FAIL();
   19f74:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   19f78:	00000106 	br	19f80 <_exit+0x30>
    ALT_SIM_PASS();
   19f7c:	002af0b0 	cmpltui	zero,zero,43970
}
   19f80:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19f84:	003fff06 	br	19f84 <_exit+0x34>

00019f88 <alt_get_errno>:
{
   19f88:	defffe04 	addi	sp,sp,-8
   19f8c:	dfc00115 	stw	ra,4(sp)
   19f90:	df000015 	stw	fp,0(sp)
   19f94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   19f98:	d0a00a17 	ldw	r2,-32728(gp)
   19f9c:	10000326 	beq	r2,zero,19fac <alt_get_errno+0x24>
   19fa0:	d0a00a17 	ldw	r2,-32728(gp)
   19fa4:	103ee83a 	callr	r2
   19fa8:	00000106 	br	19fb0 <alt_get_errno+0x28>
   19fac:	d0a74504 	addi	r2,gp,-25324
}
   19fb0:	e037883a 	mov	sp,fp
   19fb4:	dfc00117 	ldw	ra,4(sp)
   19fb8:	df000017 	ldw	fp,0(sp)
   19fbc:	dec00204 	addi	sp,sp,8
   19fc0:	f800283a 	ret

00019fc4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   19fc4:	defffb04 	addi	sp,sp,-20
   19fc8:	dfc00415 	stw	ra,16(sp)
   19fcc:	df000315 	stw	fp,12(sp)
   19fd0:	df000304 	addi	fp,sp,12
   19fd4:	e13ffe15 	stw	r4,-8(fp)
   19fd8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   19fdc:	e0bffe17 	ldw	r2,-8(fp)
   19fe0:	10000616 	blt	r2,zero,19ffc <fstat+0x38>
   19fe4:	e0bffe17 	ldw	r2,-8(fp)
   19fe8:	10c00324 	muli	r3,r2,12
   19fec:	008000b4 	movhi	r2,2
   19ff0:	108a6504 	addi	r2,r2,10644
   19ff4:	1885883a 	add	r2,r3,r2
   19ff8:	00000106 	br	1a000 <fstat+0x3c>
   19ffc:	0005883a 	mov	r2,zero
   1a000:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1a004:	e0bfff17 	ldw	r2,-4(fp)
   1a008:	10001026 	beq	r2,zero,1a04c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1a00c:	e0bfff17 	ldw	r2,-4(fp)
   1a010:	10800017 	ldw	r2,0(r2)
   1a014:	10800817 	ldw	r2,32(r2)
   1a018:	10000726 	beq	r2,zero,1a038 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1a01c:	e0bfff17 	ldw	r2,-4(fp)
   1a020:	10800017 	ldw	r2,0(r2)
   1a024:	10800817 	ldw	r2,32(r2)
   1a028:	e17ffd17 	ldw	r5,-12(fp)
   1a02c:	e13fff17 	ldw	r4,-4(fp)
   1a030:	103ee83a 	callr	r2
   1a034:	00000a06 	br	1a060 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1a038:	e0bffd17 	ldw	r2,-12(fp)
   1a03c:	00c80004 	movi	r3,8192
   1a040:	10c00115 	stw	r3,4(r2)
      return 0;
   1a044:	0005883a 	mov	r2,zero
   1a048:	00000506 	br	1a060 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a04c:	0019f880 	call	19f88 <alt_get_errno>
   1a050:	1007883a 	mov	r3,r2
   1a054:	00801444 	movi	r2,81
   1a058:	18800015 	stw	r2,0(r3)
    return -1;
   1a05c:	00bfffc4 	movi	r2,-1
  }
}
   1a060:	e037883a 	mov	sp,fp
   1a064:	dfc00117 	ldw	ra,4(sp)
   1a068:	df000017 	ldw	fp,0(sp)
   1a06c:	dec00204 	addi	sp,sp,8
   1a070:	f800283a 	ret

0001a074 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1a074:	deffff04 	addi	sp,sp,-4
   1a078:	df000015 	stw	fp,0(sp)
   1a07c:	d839883a 	mov	fp,sp
  return 0;
   1a080:	0005883a 	mov	r2,zero
}
   1a084:	e037883a 	mov	sp,fp
   1a088:	df000017 	ldw	fp,0(sp)
   1a08c:	dec00104 	addi	sp,sp,4
   1a090:	f800283a 	ret

0001a094 <alt_get_errno>:
{
   1a094:	defffe04 	addi	sp,sp,-8
   1a098:	dfc00115 	stw	ra,4(sp)
   1a09c:	df000015 	stw	fp,0(sp)
   1a0a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a0a4:	d0a00a17 	ldw	r2,-32728(gp)
   1a0a8:	10000326 	beq	r2,zero,1a0b8 <alt_get_errno+0x24>
   1a0ac:	d0a00a17 	ldw	r2,-32728(gp)
   1a0b0:	103ee83a 	callr	r2
   1a0b4:	00000106 	br	1a0bc <alt_get_errno+0x28>
   1a0b8:	d0a74504 	addi	r2,gp,-25324
}
   1a0bc:	e037883a 	mov	sp,fp
   1a0c0:	dfc00117 	ldw	ra,4(sp)
   1a0c4:	df000017 	ldw	fp,0(sp)
   1a0c8:	dec00204 	addi	sp,sp,8
   1a0cc:	f800283a 	ret

0001a0d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1a0d0:	deffea04 	addi	sp,sp,-88
   1a0d4:	dfc01515 	stw	ra,84(sp)
   1a0d8:	df001415 	stw	fp,80(sp)
   1a0dc:	df001404 	addi	fp,sp,80
   1a0e0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a0e4:	e0bfec17 	ldw	r2,-80(fp)
   1a0e8:	10000616 	blt	r2,zero,1a104 <isatty+0x34>
   1a0ec:	e0bfec17 	ldw	r2,-80(fp)
   1a0f0:	10c00324 	muli	r3,r2,12
   1a0f4:	008000b4 	movhi	r2,2
   1a0f8:	108a6504 	addi	r2,r2,10644
   1a0fc:	1885883a 	add	r2,r3,r2
   1a100:	00000106 	br	1a108 <isatty+0x38>
   1a104:	0005883a 	mov	r2,zero
   1a108:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1a10c:	e0bfff17 	ldw	r2,-4(fp)
   1a110:	10000e26 	beq	r2,zero,1a14c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a114:	e0bfff17 	ldw	r2,-4(fp)
   1a118:	10800017 	ldw	r2,0(r2)
   1a11c:	10800817 	ldw	r2,32(r2)
   1a120:	1000021e 	bne	r2,zero,1a12c <isatty+0x5c>
    {
      return 1;
   1a124:	00800044 	movi	r2,1
   1a128:	00000d06 	br	1a160 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a12c:	e0bfed04 	addi	r2,fp,-76
   1a130:	100b883a 	mov	r5,r2
   1a134:	e13fec17 	ldw	r4,-80(fp)
   1a138:	0019fc40 	call	19fc4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a13c:	e0bfee17 	ldw	r2,-72(fp)
   1a140:	10880020 	cmpeqi	r2,r2,8192
   1a144:	10803fcc 	andi	r2,r2,255
   1a148:	00000506 	br	1a160 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a14c:	001a0940 	call	1a094 <alt_get_errno>
   1a150:	1007883a 	mov	r3,r2
   1a154:	00801444 	movi	r2,81
   1a158:	18800015 	stw	r2,0(r3)
    return 0;
   1a15c:	0005883a 	mov	r2,zero
  }
}
   1a160:	e037883a 	mov	sp,fp
   1a164:	dfc00117 	ldw	ra,4(sp)
   1a168:	df000017 	ldw	fp,0(sp)
   1a16c:	dec00204 	addi	sp,sp,8
   1a170:	f800283a 	ret

0001a174 <alt_get_errno>:
{
   1a174:	defffe04 	addi	sp,sp,-8
   1a178:	dfc00115 	stw	ra,4(sp)
   1a17c:	df000015 	stw	fp,0(sp)
   1a180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a184:	d0a00a17 	ldw	r2,-32728(gp)
   1a188:	10000326 	beq	r2,zero,1a198 <alt_get_errno+0x24>
   1a18c:	d0a00a17 	ldw	r2,-32728(gp)
   1a190:	103ee83a 	callr	r2
   1a194:	00000106 	br	1a19c <alt_get_errno+0x28>
   1a198:	d0a74504 	addi	r2,gp,-25324
}
   1a19c:	e037883a 	mov	sp,fp
   1a1a0:	dfc00117 	ldw	ra,4(sp)
   1a1a4:	df000017 	ldw	fp,0(sp)
   1a1a8:	dec00204 	addi	sp,sp,8
   1a1ac:	f800283a 	ret

0001a1b0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1a1b0:	defffb04 	addi	sp,sp,-20
   1a1b4:	dfc00415 	stw	ra,16(sp)
   1a1b8:	df000315 	stw	fp,12(sp)
   1a1bc:	df000304 	addi	fp,sp,12
   1a1c0:	e13ffe15 	stw	r4,-8(fp)
   1a1c4:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   1a1c8:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   1a1cc:	e0bffe17 	ldw	r2,-8(fp)
   1a1d0:	00802e16 	blt	zero,r2,1a28c <kill+0xdc>
  {
    switch (sig)
   1a1d4:	e0bffd17 	ldw	r2,-12(fp)
   1a1d8:	10800828 	cmpgeui	r2,r2,32
   1a1dc:	1000281e 	bne	r2,zero,1a280 <kill+0xd0>
   1a1e0:	e0bffd17 	ldw	r2,-12(fp)
   1a1e4:	100690ba 	slli	r3,r2,2
   1a1e8:	008000b4 	movhi	r2,2
   1a1ec:	1885883a 	add	r2,r3,r2
   1a1f0:	10a87e17 	ldw	r2,-24072(r2)
   1a1f4:	1000683a 	jmp	r2
   1a1f8:	0001a2a0 	cmpeqi	zero,zero,1674
   1a1fc:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a200:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a204:	0001a278 	rdprs	zero,zero,1673
   1a208:	0001a278 	rdprs	zero,zero,1673
   1a20c:	0001a278 	rdprs	zero,zero,1673
   1a210:	0001a278 	rdprs	zero,zero,1673
   1a214:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a218:	0001a278 	rdprs	zero,zero,1673
   1a21c:	0001a278 	rdprs	zero,zero,1673
   1a220:	0001a278 	rdprs	zero,zero,1673
   1a224:	0001a278 	rdprs	zero,zero,1673
   1a228:	0001a278 	rdprs	zero,zero,1673
   1a22c:	0001a278 	rdprs	zero,zero,1673
   1a230:	0001a278 	rdprs	zero,zero,1673
   1a234:	0001a278 	rdprs	zero,zero,1673
   1a238:	0001a2a0 	cmpeqi	zero,zero,1674
   1a23c:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a240:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a244:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a248:	0001a2a0 	cmpeqi	zero,zero,1674
   1a24c:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a250:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a254:	0001a278 	rdprs	zero,zero,1673
   1a258:	0001a278 	rdprs	zero,zero,1673
   1a25c:	0001a278 	rdprs	zero,zero,1673
   1a260:	0001a278 	rdprs	zero,zero,1673
   1a264:	0001a278 	rdprs	zero,zero,1673
   1a268:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a26c:	0001a280 	call	1a28 <kiss_fft_alloc+0x140>
   1a270:	0001a278 	rdprs	zero,zero,1673
   1a274:	0001a278 	rdprs	zero,zero,1673
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1a278:	0009883a 	mov	r4,zero
   1a27c:	0019f500 	call	19f50 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1a280:	00800584 	movi	r2,22
   1a284:	e0bfff15 	stw	r2,-4(fp)
   1a288:	00000606 	br	1a2a4 <kill+0xf4>
    }
  }

  else if (pid > 0)
   1a28c:	e0bffe17 	ldw	r2,-8(fp)
   1a290:	0080040e 	bge	zero,r2,1a2a4 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1a294:	008000c4 	movi	r2,3
   1a298:	e0bfff15 	stw	r2,-4(fp)
   1a29c:	00000106 	br	1a2a4 <kill+0xf4>
      break;
   1a2a0:	0001883a 	nop
  }

  if (status)
   1a2a4:	e0bfff17 	ldw	r2,-4(fp)
   1a2a8:	10000626 	beq	r2,zero,1a2c4 <kill+0x114>
  {
    ALT_ERRNO = status;
   1a2ac:	001a1740 	call	1a174 <alt_get_errno>
   1a2b0:	1007883a 	mov	r3,r2
   1a2b4:	e0bfff17 	ldw	r2,-4(fp)
   1a2b8:	18800015 	stw	r2,0(r3)
    return -1;
   1a2bc:	00bfffc4 	movi	r2,-1
   1a2c0:	00000106 	br	1a2c8 <kill+0x118>
  }

  return 0;
   1a2c4:	0005883a 	mov	r2,zero
}
   1a2c8:	e037883a 	mov	sp,fp
   1a2cc:	dfc00117 	ldw	ra,4(sp)
   1a2d0:	df000017 	ldw	fp,0(sp)
   1a2d4:	dec00204 	addi	sp,sp,8
   1a2d8:	f800283a 	ret

0001a2dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1a2dc:	defffc04 	addi	sp,sp,-16
   1a2e0:	df000315 	stw	fp,12(sp)
   1a2e4:	df000304 	addi	fp,sp,12
   1a2e8:	e13fff15 	stw	r4,-4(fp)
   1a2ec:	e17ffe15 	stw	r5,-8(fp)
   1a2f0:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   1a2f4:	e0fffe17 	ldw	r3,-8(fp)
   1a2f8:	e0bfff17 	ldw	r2,-4(fp)
   1a2fc:	18800c26 	beq	r3,r2,1a330 <alt_load_section+0x54>
  {
    while( to != end )
   1a300:	00000806 	br	1a324 <alt_load_section+0x48>
    {
      *to++ = *from++;
   1a304:	e0ffff17 	ldw	r3,-4(fp)
   1a308:	18800104 	addi	r2,r3,4
   1a30c:	e0bfff15 	stw	r2,-4(fp)
   1a310:	e0bffe17 	ldw	r2,-8(fp)
   1a314:	11000104 	addi	r4,r2,4
   1a318:	e13ffe15 	stw	r4,-8(fp)
   1a31c:	18c00017 	ldw	r3,0(r3)
   1a320:	10c00015 	stw	r3,0(r2)
    while( to != end )
   1a324:	e0fffe17 	ldw	r3,-8(fp)
   1a328:	e0bffd17 	ldw	r2,-12(fp)
   1a32c:	18bff51e 	bne	r3,r2,1a304 <alt_load_section+0x28>
    }
  }
}
   1a330:	0001883a 	nop
   1a334:	e037883a 	mov	sp,fp
   1a338:	df000017 	ldw	fp,0(sp)
   1a33c:	dec00104 	addi	sp,sp,4
   1a340:	f800283a 	ret

0001a344 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1a344:	defffe04 	addi	sp,sp,-8
   1a348:	dfc00115 	stw	ra,4(sp)
   1a34c:	df000015 	stw	fp,0(sp)
   1a350:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1a354:	018000b4 	movhi	r6,2
   1a358:	318f2504 	addi	r6,r6,15508
   1a35c:	014000b4 	movhi	r5,2
   1a360:	2947f504 	addi	r5,r5,8148
   1a364:	010000b4 	movhi	r4,2
   1a368:	210f2504 	addi	r4,r4,15508
   1a36c:	001a2dc0 	call	1a2dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1a370:	01800034 	movhi	r6,0
   1a374:	31808f04 	addi	r6,r6,572
   1a378:	01400034 	movhi	r5,0
   1a37c:	29400804 	addi	r5,r5,32
   1a380:	01000034 	movhi	r4,0
   1a384:	21000804 	addi	r4,r4,32
   1a388:	001a2dc0 	call	1a2dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1a38c:	018000b4 	movhi	r6,2
   1a390:	3187f504 	addi	r6,r6,8148
   1a394:	014000b4 	movhi	r5,2
   1a398:	2943aa04 	addi	r5,r5,3752
   1a39c:	010000b4 	movhi	r4,2
   1a3a0:	2103aa04 	addi	r4,r4,3752
   1a3a4:	001a2dc0 	call	1a2dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1a3a8:	001fff00 	call	1fff0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1a3ac:	002024c0 	call	2024c <alt_icache_flush_all>
}
   1a3b0:	0001883a 	nop
   1a3b4:	e037883a 	mov	sp,fp
   1a3b8:	dfc00117 	ldw	ra,4(sp)
   1a3bc:	df000017 	ldw	fp,0(sp)
   1a3c0:	dec00204 	addi	sp,sp,8
   1a3c4:	f800283a 	ret

0001a3c8 <alt_get_errno>:
{
   1a3c8:	defffe04 	addi	sp,sp,-8
   1a3cc:	dfc00115 	stw	ra,4(sp)
   1a3d0:	df000015 	stw	fp,0(sp)
   1a3d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a3d8:	d0a00a17 	ldw	r2,-32728(gp)
   1a3dc:	10000326 	beq	r2,zero,1a3ec <alt_get_errno+0x24>
   1a3e0:	d0a00a17 	ldw	r2,-32728(gp)
   1a3e4:	103ee83a 	callr	r2
   1a3e8:	00000106 	br	1a3f0 <alt_get_errno+0x28>
   1a3ec:	d0a74504 	addi	r2,gp,-25324
}
   1a3f0:	e037883a 	mov	sp,fp
   1a3f4:	dfc00117 	ldw	ra,4(sp)
   1a3f8:	df000017 	ldw	fp,0(sp)
   1a3fc:	dec00204 	addi	sp,sp,8
   1a400:	f800283a 	ret

0001a404 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a404:	defff904 	addi	sp,sp,-28
   1a408:	dfc00615 	stw	ra,24(sp)
   1a40c:	df000515 	stw	fp,20(sp)
   1a410:	df000504 	addi	fp,sp,20
   1a414:	e13ffd15 	stw	r4,-12(fp)
   1a418:	e17ffc15 	stw	r5,-16(fp)
   1a41c:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a420:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a424:	e0bffd17 	ldw	r2,-12(fp)
   1a428:	10000616 	blt	r2,zero,1a444 <lseek+0x40>
   1a42c:	e0bffd17 	ldw	r2,-12(fp)
   1a430:	10c00324 	muli	r3,r2,12
   1a434:	008000b4 	movhi	r2,2
   1a438:	108a6504 	addi	r2,r2,10644
   1a43c:	1885883a 	add	r2,r3,r2
   1a440:	00000106 	br	1a448 <lseek+0x44>
   1a444:	0005883a 	mov	r2,zero
   1a448:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   1a44c:	e0bffe17 	ldw	r2,-8(fp)
   1a450:	10001026 	beq	r2,zero,1a494 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a454:	e0bffe17 	ldw	r2,-8(fp)
   1a458:	10800017 	ldw	r2,0(r2)
   1a45c:	10800717 	ldw	r2,28(r2)
   1a460:	10000926 	beq	r2,zero,1a488 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a464:	e0bffe17 	ldw	r2,-8(fp)
   1a468:	10800017 	ldw	r2,0(r2)
   1a46c:	10800717 	ldw	r2,28(r2)
   1a470:	e1bffb17 	ldw	r6,-20(fp)
   1a474:	e17ffc17 	ldw	r5,-16(fp)
   1a478:	e13ffe17 	ldw	r4,-8(fp)
   1a47c:	103ee83a 	callr	r2
   1a480:	e0bfff15 	stw	r2,-4(fp)
   1a484:	00000506 	br	1a49c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a488:	00bfde84 	movi	r2,-134
   1a48c:	e0bfff15 	stw	r2,-4(fp)
   1a490:	00000206 	br	1a49c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a494:	00bfebc4 	movi	r2,-81
   1a498:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   1a49c:	e0bfff17 	ldw	r2,-4(fp)
   1a4a0:	1000070e 	bge	r2,zero,1a4c0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1a4a4:	001a3c80 	call	1a3c8 <alt_get_errno>
   1a4a8:	1007883a 	mov	r3,r2
   1a4ac:	e0bfff17 	ldw	r2,-4(fp)
   1a4b0:	0085c83a 	sub	r2,zero,r2
   1a4b4:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a4b8:	00bfffc4 	movi	r2,-1
   1a4bc:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   1a4c0:	e0bfff17 	ldw	r2,-4(fp)
}
   1a4c4:	e037883a 	mov	sp,fp
   1a4c8:	dfc00117 	ldw	ra,4(sp)
   1a4cc:	df000017 	ldw	fp,0(sp)
   1a4d0:	dec00204 	addi	sp,sp,8
   1a4d4:	f800283a 	ret

0001a4d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1a4d8:	defffd04 	addi	sp,sp,-12
   1a4dc:	dfc00215 	stw	ra,8(sp)
   1a4e0:	df000115 	stw	fp,4(sp)
   1a4e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1a4e8:	0009883a 	mov	r4,zero
   1a4ec:	001aba80 	call	1aba8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1a4f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1a4f4:	001abe40 	call	1abe4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1a4f8:	018000b4 	movhi	r6,2
   1a4fc:	3187d404 	addi	r6,r6,8016
   1a500:	014000b4 	movhi	r5,2
   1a504:	2947d404 	addi	r5,r5,8016
   1a508:	010000b4 	movhi	r4,2
   1a50c:	2107d404 	addi	r4,r4,8016
   1a510:	00203300 	call	20330 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1a514:	00200f40 	call	200f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1a518:	010000b4 	movhi	r4,2
   1a51c:	21005604 	addi	r4,r4,344
   1a520:	0020c380 	call	20c38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1a524:	d0a74717 	ldw	r2,-25316(gp)
   1a528:	d0e74817 	ldw	r3,-25312(gp)
   1a52c:	d1274917 	ldw	r4,-25308(gp)
   1a530:	200d883a 	mov	r6,r4
   1a534:	180b883a 	mov	r5,r3
   1a538:	1009883a 	mov	r4,r2
   1a53c:	0001d240 	call	1d24 <main>
   1a540:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1a544:	01000044 	movi	r4,1
   1a548:	0019e540 	call	19e54 <close>
  exit (result);
   1a54c:	e13fff17 	ldw	r4,-4(fp)
   1a550:	0020c4c0 	call	20c4c <exit>

0001a554 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a554:	defffe04 	addi	sp,sp,-8
   1a558:	df000115 	stw	fp,4(sp)
   1a55c:	df000104 	addi	fp,sp,4
   1a560:	e13fff15 	stw	r4,-4(fp)
}
   1a564:	0001883a 	nop
   1a568:	e037883a 	mov	sp,fp
   1a56c:	df000017 	ldw	fp,0(sp)
   1a570:	dec00104 	addi	sp,sp,4
   1a574:	f800283a 	ret

0001a578 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a578:	defffe04 	addi	sp,sp,-8
   1a57c:	df000115 	stw	fp,4(sp)
   1a580:	df000104 	addi	fp,sp,4
   1a584:	e13fff15 	stw	r4,-4(fp)
}
   1a588:	0001883a 	nop
   1a58c:	e037883a 	mov	sp,fp
   1a590:	df000017 	ldw	fp,0(sp)
   1a594:	dec00104 	addi	sp,sp,4
   1a598:	f800283a 	ret

0001a59c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1a59c:	defff204 	addi	sp,sp,-56
   1a5a0:	dfc00a15 	stw	ra,40(sp)
   1a5a4:	df000915 	stw	fp,36(sp)
   1a5a8:	df000904 	addi	fp,sp,36
   1a5ac:	e13ff715 	stw	r4,-36(fp)
   1a5b0:	e1400215 	stw	r5,8(fp)
   1a5b4:	e1800315 	stw	r6,12(fp)
   1a5b8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   1a5bc:	e0800204 	addi	r2,fp,8
   1a5c0:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   1a5c4:	e0bff717 	ldw	r2,-36(fp)
   1a5c8:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   1a5cc:	00006f06 	br	1a78c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   1a5d0:	e0bffec7 	ldb	r2,-5(fp)
   1a5d4:	10800960 	cmpeqi	r2,r2,37
   1a5d8:	1000041e 	bne	r2,zero,1a5ec <alt_printf+0x50>
        {
            alt_putchar(c);
   1a5dc:	e0bffec7 	ldb	r2,-5(fp)
   1a5e0:	1009883a 	mov	r4,r2
   1a5e4:	001a7c80 	call	1a7c8 <alt_putchar>
   1a5e8:	00006806 	br	1a78c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   1a5ec:	e0bfff17 	ldw	r2,-4(fp)
   1a5f0:	10c00044 	addi	r3,r2,1
   1a5f4:	e0ffff15 	stw	r3,-4(fp)
   1a5f8:	10800003 	ldbu	r2,0(r2)
   1a5fc:	e0bffec5 	stb	r2,-5(fp)
   1a600:	e0bffec7 	ldb	r2,-5(fp)
   1a604:	10006926 	beq	r2,zero,1a7ac <alt_printf+0x210>
            {
                if (c == '%')
   1a608:	e0bffec7 	ldb	r2,-5(fp)
   1a60c:	10800958 	cmpnei	r2,r2,37
   1a610:	1000041e 	bne	r2,zero,1a624 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   1a614:	e0bffec7 	ldb	r2,-5(fp)
   1a618:	1009883a 	mov	r4,r2
   1a61c:	001a7c80 	call	1a7c8 <alt_putchar>
   1a620:	00005a06 	br	1a78c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   1a624:	e0bffec7 	ldb	r2,-5(fp)
   1a628:	108018d8 	cmpnei	r2,r2,99
   1a62c:	1000081e 	bne	r2,zero,1a650 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   1a630:	e0bff817 	ldw	r2,-32(fp)
   1a634:	10c00104 	addi	r3,r2,4
   1a638:	e0fff815 	stw	r3,-32(fp)
   1a63c:	10800017 	ldw	r2,0(r2)
   1a640:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   1a644:	e13ff917 	ldw	r4,-28(fp)
   1a648:	001a7c80 	call	1a7c8 <alt_putchar>
   1a64c:	00004f06 	br	1a78c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   1a650:	e0bffec7 	ldb	r2,-5(fp)
   1a654:	10801e18 	cmpnei	r2,r2,120
   1a658:	1000341e 	bne	r2,zero,1a72c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   1a65c:	e0bff817 	ldw	r2,-32(fp)
   1a660:	10c00104 	addi	r3,r2,4
   1a664:	e0fff815 	stw	r3,-32(fp)
   1a668:	10800017 	ldw	r2,0(r2)
   1a66c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   1a670:	e0bffb17 	ldw	r2,-20(fp)
   1a674:	1000031e 	bne	r2,zero,1a684 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   1a678:	01000c04 	movi	r4,48
   1a67c:	001a7c80 	call	1a7c8 <alt_putchar>
                        continue;
   1a680:	00004206 	br	1a78c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   1a684:	00800704 	movi	r2,28
   1a688:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   1a68c:	00000306 	br	1a69c <alt_printf+0x100>
                        digit_shift -= 4;
   1a690:	e0bffd17 	ldw	r2,-12(fp)
   1a694:	10bfff04 	addi	r2,r2,-4
   1a698:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   1a69c:	00c003c4 	movi	r3,15
   1a6a0:	e0bffd17 	ldw	r2,-12(fp)
   1a6a4:	1884983a 	sll	r2,r3,r2
   1a6a8:	1007883a 	mov	r3,r2
   1a6ac:	e0bffb17 	ldw	r2,-20(fp)
   1a6b0:	1884703a 	and	r2,r3,r2
   1a6b4:	103ff626 	beq	r2,zero,1a690 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   1a6b8:	00001906 	br	1a720 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1a6bc:	00c003c4 	movi	r3,15
   1a6c0:	e0bffd17 	ldw	r2,-12(fp)
   1a6c4:	1884983a 	sll	r2,r3,r2
   1a6c8:	1007883a 	mov	r3,r2
   1a6cc:	e0bffb17 	ldw	r2,-20(fp)
   1a6d0:	1886703a 	and	r3,r3,r2
   1a6d4:	e0bffd17 	ldw	r2,-12(fp)
   1a6d8:	1884d83a 	srl	r2,r3,r2
   1a6dc:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   1a6e0:	e0bffa17 	ldw	r2,-24(fp)
   1a6e4:	108002a8 	cmpgeui	r2,r2,10
   1a6e8:	1000041e 	bne	r2,zero,1a6fc <alt_printf+0x160>
                            c = '0' + digit;
   1a6ec:	e0bffa17 	ldw	r2,-24(fp)
   1a6f0:	10800c04 	addi	r2,r2,48
   1a6f4:	e0bffec5 	stb	r2,-5(fp)
   1a6f8:	00000306 	br	1a708 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   1a6fc:	e0bffa17 	ldw	r2,-24(fp)
   1a700:	108015c4 	addi	r2,r2,87
   1a704:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   1a708:	e0bffec7 	ldb	r2,-5(fp)
   1a70c:	1009883a 	mov	r4,r2
   1a710:	001a7c80 	call	1a7c8 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   1a714:	e0bffd17 	ldw	r2,-12(fp)
   1a718:	10bfff04 	addi	r2,r2,-4
   1a71c:	e0bffd15 	stw	r2,-12(fp)
   1a720:	e0bffd17 	ldw	r2,-12(fp)
   1a724:	103fe50e 	bge	r2,zero,1a6bc <alt_printf+0x120>
   1a728:	00001806 	br	1a78c <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   1a72c:	e0bffec7 	ldb	r2,-5(fp)
   1a730:	10801cd8 	cmpnei	r2,r2,115
   1a734:	1000151e 	bne	r2,zero,1a78c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1a738:	e0bff817 	ldw	r2,-32(fp)
   1a73c:	10c00104 	addi	r3,r2,4
   1a740:	e0fff815 	stw	r3,-32(fp)
   1a744:	10800017 	ldw	r2,0(r2)
   1a748:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   1a74c:	00000906 	br	1a774 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   1a750:	e0bffc17 	ldw	r2,-16(fp)
   1a754:	10c00044 	addi	r3,r2,1
   1a758:	e0fffc15 	stw	r3,-16(fp)
   1a75c:	10800003 	ldbu	r2,0(r2)
   1a760:	10803fcc 	andi	r2,r2,255
   1a764:	1080201c 	xori	r2,r2,128
   1a768:	10bfe004 	addi	r2,r2,-128
   1a76c:	1009883a 	mov	r4,r2
   1a770:	001a7c80 	call	1a7c8 <alt_putchar>
                    while(*s)
   1a774:	e0bffc17 	ldw	r2,-16(fp)
   1a778:	10800003 	ldbu	r2,0(r2)
   1a77c:	10803fcc 	andi	r2,r2,255
   1a780:	1080201c 	xori	r2,r2,128
   1a784:	10bfe004 	addi	r2,r2,-128
   1a788:	103ff11e 	bne	r2,zero,1a750 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
   1a78c:	e0bfff17 	ldw	r2,-4(fp)
   1a790:	10c00044 	addi	r3,r2,1
   1a794:	e0ffff15 	stw	r3,-4(fp)
   1a798:	10800003 	ldbu	r2,0(r2)
   1a79c:	e0bffec5 	stb	r2,-5(fp)
   1a7a0:	e0bffec7 	ldb	r2,-5(fp)
   1a7a4:	103f8a1e 	bne	r2,zero,1a5d0 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   1a7a8:	00000106 	br	1a7b0 <alt_printf+0x214>
                break;
   1a7ac:	0001883a 	nop
}
   1a7b0:	0001883a 	nop
   1a7b4:	e037883a 	mov	sp,fp
   1a7b8:	dfc00117 	ldw	ra,4(sp)
   1a7bc:	df000017 	ldw	fp,0(sp)
   1a7c0:	dec00504 	addi	sp,sp,20
   1a7c4:	f800283a 	ret

0001a7c8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1a7c8:	defffd04 	addi	sp,sp,-12
   1a7cc:	dfc00215 	stw	ra,8(sp)
   1a7d0:	df000115 	stw	fp,4(sp)
   1a7d4:	df000104 	addi	fp,sp,4
   1a7d8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   1a7dc:	e13fff17 	ldw	r4,-4(fp)
   1a7e0:	000d7640 	call	d764 <putchar>
#endif
#endif
}
   1a7e4:	e037883a 	mov	sp,fp
   1a7e8:	dfc00117 	ldw	ra,4(sp)
   1a7ec:	df000017 	ldw	fp,0(sp)
   1a7f0:	dec00204 	addi	sp,sp,8
   1a7f4:	f800283a 	ret

0001a7f8 <alt_get_errno>:
{
   1a7f8:	defffe04 	addi	sp,sp,-8
   1a7fc:	dfc00115 	stw	ra,4(sp)
   1a800:	df000015 	stw	fp,0(sp)
   1a804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a808:	d0a00a17 	ldw	r2,-32728(gp)
   1a80c:	10000326 	beq	r2,zero,1a81c <alt_get_errno+0x24>
   1a810:	d0a00a17 	ldw	r2,-32728(gp)
   1a814:	103ee83a 	callr	r2
   1a818:	00000106 	br	1a820 <alt_get_errno+0x28>
   1a81c:	d0a74504 	addi	r2,gp,-25324
}
   1a820:	e037883a 	mov	sp,fp
   1a824:	dfc00117 	ldw	ra,4(sp)
   1a828:	df000017 	ldw	fp,0(sp)
   1a82c:	dec00204 	addi	sp,sp,8
   1a830:	f800283a 	ret

0001a834 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a834:	defff904 	addi	sp,sp,-28
   1a838:	dfc00615 	stw	ra,24(sp)
   1a83c:	df000515 	stw	fp,20(sp)
   1a840:	df000504 	addi	fp,sp,20
   1a844:	e13ffd15 	stw	r4,-12(fp)
   1a848:	e17ffc15 	stw	r5,-16(fp)
   1a84c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a850:	e0bffd17 	ldw	r2,-12(fp)
   1a854:	10000616 	blt	r2,zero,1a870 <read+0x3c>
   1a858:	e0bffd17 	ldw	r2,-12(fp)
   1a85c:	10c00324 	muli	r3,r2,12
   1a860:	008000b4 	movhi	r2,2
   1a864:	108a6504 	addi	r2,r2,10644
   1a868:	1885883a 	add	r2,r3,r2
   1a86c:	00000106 	br	1a874 <read+0x40>
   1a870:	0005883a 	mov	r2,zero
   1a874:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1a878:	e0bfff17 	ldw	r2,-4(fp)
   1a87c:	10002226 	beq	r2,zero,1a908 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a880:	e0bfff17 	ldw	r2,-4(fp)
   1a884:	10800217 	ldw	r2,8(r2)
   1a888:	108000cc 	andi	r2,r2,3
   1a88c:	10800060 	cmpeqi	r2,r2,1
   1a890:	1000181e 	bne	r2,zero,1a8f4 <read+0xc0>
        (fd->dev->read))
   1a894:	e0bfff17 	ldw	r2,-4(fp)
   1a898:	10800017 	ldw	r2,0(r2)
   1a89c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a8a0:	10001426 	beq	r2,zero,1a8f4 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a8a4:	e0bfff17 	ldw	r2,-4(fp)
   1a8a8:	10800017 	ldw	r2,0(r2)
   1a8ac:	10800517 	ldw	r2,20(r2)
   1a8b0:	e0fffb17 	ldw	r3,-20(fp)
   1a8b4:	180d883a 	mov	r6,r3
   1a8b8:	e17ffc17 	ldw	r5,-16(fp)
   1a8bc:	e13fff17 	ldw	r4,-4(fp)
   1a8c0:	103ee83a 	callr	r2
   1a8c4:	e0bffe15 	stw	r2,-8(fp)
   1a8c8:	e0bffe17 	ldw	r2,-8(fp)
   1a8cc:	1000070e 	bge	r2,zero,1a8ec <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1a8d0:	001a7f80 	call	1a7f8 <alt_get_errno>
   1a8d4:	1007883a 	mov	r3,r2
   1a8d8:	e0bffe17 	ldw	r2,-8(fp)
   1a8dc:	0085c83a 	sub	r2,zero,r2
   1a8e0:	18800015 	stw	r2,0(r3)
          return -1;
   1a8e4:	00bfffc4 	movi	r2,-1
   1a8e8:	00000c06 	br	1a91c <read+0xe8>
        }
        return rval;
   1a8ec:	e0bffe17 	ldw	r2,-8(fp)
   1a8f0:	00000a06 	br	1a91c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a8f4:	001a7f80 	call	1a7f8 <alt_get_errno>
   1a8f8:	1007883a 	mov	r3,r2
   1a8fc:	00800344 	movi	r2,13
   1a900:	18800015 	stw	r2,0(r3)
   1a904:	00000406 	br	1a918 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a908:	001a7f80 	call	1a7f8 <alt_get_errno>
   1a90c:	1007883a 	mov	r3,r2
   1a910:	00801444 	movi	r2,81
   1a914:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a918:	00bfffc4 	movi	r2,-1
}
   1a91c:	e037883a 	mov	sp,fp
   1a920:	dfc00117 	ldw	ra,4(sp)
   1a924:	df000017 	ldw	fp,0(sp)
   1a928:	dec00204 	addi	sp,sp,8
   1a92c:	f800283a 	ret

0001a930 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1a930:	defffe04 	addi	sp,sp,-8
   1a934:	df000115 	stw	fp,4(sp)
   1a938:	df000104 	addi	fp,sp,4
   1a93c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1a940:	e0bfff17 	ldw	r2,-4(fp)
   1a944:	108000d0 	cmplti	r2,r2,3
   1a948:	10000a1e 	bne	r2,zero,1a974 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
   1a94c:	e0bfff17 	ldw	r2,-4(fp)
   1a950:	10c00324 	muli	r3,r2,12
   1a954:	008000b4 	movhi	r2,2
   1a958:	1885883a 	add	r2,r3,r2
   1a95c:	100a6715 	stw	zero,10652(r2)
    alt_fd_list[fd].dev      = 0;
   1a960:	e0bfff17 	ldw	r2,-4(fp)
   1a964:	10c00324 	muli	r3,r2,12
   1a968:	008000b4 	movhi	r2,2
   1a96c:	1885883a 	add	r2,r3,r2
   1a970:	100a6515 	stw	zero,10644(r2)
  }
}
   1a974:	0001883a 	nop
   1a978:	e037883a 	mov	sp,fp
   1a97c:	df000017 	ldw	fp,0(sp)
   1a980:	dec00104 	addi	sp,sp,4
   1a984:	f800283a 	ret

0001a988 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1a988:	defff904 	addi	sp,sp,-28
   1a98c:	df000615 	stw	fp,24(sp)
   1a990:	df000604 	addi	fp,sp,24
   1a994:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   1a998:	0005303a 	rdctl	r2,status
   1a99c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a9a0:	e0fffd17 	ldw	r3,-12(fp)
   1a9a4:	00bfff84 	movi	r2,-2
   1a9a8:	1884703a 	and	r2,r3,r2
   1a9ac:	1001703a 	wrctl	status,r2
  return context;
   1a9b0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1a9b4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1a9b8:	d0a00b17 	ldw	r2,-32724(gp)
   1a9bc:	10c000c4 	addi	r3,r2,3
   1a9c0:	00bfff04 	movi	r2,-4
   1a9c4:	1884703a 	and	r2,r3,r2
   1a9c8:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1a9cc:	d0e00b17 	ldw	r3,-32724(gp)
   1a9d0:	e0bffa17 	ldw	r2,-24(fp)
   1a9d4:	1887883a 	add	r3,r3,r2
   1a9d8:	00810034 	movhi	r2,1024
   1a9dc:	10800004 	addi	r2,r2,0
   1a9e0:	10c0072e 	bgeu	r2,r3,1aa00 <sbrk+0x78>
   1a9e4:	e0bfff17 	ldw	r2,-4(fp)
   1a9e8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1a9ec:	e0bffc17 	ldw	r2,-16(fp)
   1a9f0:	1001703a 	wrctl	status,r2
}
   1a9f4:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1a9f8:	00bfffc4 	movi	r2,-1
   1a9fc:	00000c06 	br	1aa30 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1aa00:	d0a00b17 	ldw	r2,-32724(gp)
   1aa04:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   1aa08:	d0e00b17 	ldw	r3,-32724(gp)
   1aa0c:	e0bffa17 	ldw	r2,-24(fp)
   1aa10:	1885883a 	add	r2,r3,r2
   1aa14:	d0a00b15 	stw	r2,-32724(gp)
   1aa18:	e0bfff17 	ldw	r2,-4(fp)
   1aa1c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   1aa20:	e0bffb17 	ldw	r2,-20(fp)
   1aa24:	1001703a 	wrctl	status,r2
}
   1aa28:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1aa2c:	e0bffe17 	ldw	r2,-8(fp)
} 
   1aa30:	e037883a 	mov	sp,fp
   1aa34:	df000017 	ldw	fp,0(sp)
   1aa38:	dec00104 	addi	sp,sp,4
   1aa3c:	f800283a 	ret

0001aa40 <alt_get_errno>:
{
   1aa40:	defffe04 	addi	sp,sp,-8
   1aa44:	dfc00115 	stw	ra,4(sp)
   1aa48:	df000015 	stw	fp,0(sp)
   1aa4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1aa50:	d0a00a17 	ldw	r2,-32728(gp)
   1aa54:	10000326 	beq	r2,zero,1aa64 <alt_get_errno+0x24>
   1aa58:	d0a00a17 	ldw	r2,-32728(gp)
   1aa5c:	103ee83a 	callr	r2
   1aa60:	00000106 	br	1aa68 <alt_get_errno+0x28>
   1aa64:	d0a74504 	addi	r2,gp,-25324
}
   1aa68:	e037883a 	mov	sp,fp
   1aa6c:	dfc00117 	ldw	ra,4(sp)
   1aa70:	df000017 	ldw	fp,0(sp)
   1aa74:	dec00204 	addi	sp,sp,8
   1aa78:	f800283a 	ret

0001aa7c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1aa7c:	defff904 	addi	sp,sp,-28
   1aa80:	dfc00615 	stw	ra,24(sp)
   1aa84:	df000515 	stw	fp,20(sp)
   1aa88:	df000504 	addi	fp,sp,20
   1aa8c:	e13ffd15 	stw	r4,-12(fp)
   1aa90:	e17ffc15 	stw	r5,-16(fp)
   1aa94:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1aa98:	e0bffd17 	ldw	r2,-12(fp)
   1aa9c:	10000616 	blt	r2,zero,1aab8 <write+0x3c>
   1aaa0:	e0bffd17 	ldw	r2,-12(fp)
   1aaa4:	10c00324 	muli	r3,r2,12
   1aaa8:	008000b4 	movhi	r2,2
   1aaac:	108a6504 	addi	r2,r2,10644
   1aab0:	1885883a 	add	r2,r3,r2
   1aab4:	00000106 	br	1aabc <write+0x40>
   1aab8:	0005883a 	mov	r2,zero
   1aabc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1aac0:	e0bfff17 	ldw	r2,-4(fp)
   1aac4:	10002126 	beq	r2,zero,1ab4c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1aac8:	e0bfff17 	ldw	r2,-4(fp)
   1aacc:	10800217 	ldw	r2,8(r2)
   1aad0:	108000cc 	andi	r2,r2,3
   1aad4:	10001826 	beq	r2,zero,1ab38 <write+0xbc>
   1aad8:	e0bfff17 	ldw	r2,-4(fp)
   1aadc:	10800017 	ldw	r2,0(r2)
   1aae0:	10800617 	ldw	r2,24(r2)
   1aae4:	10001426 	beq	r2,zero,1ab38 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1aae8:	e0bfff17 	ldw	r2,-4(fp)
   1aaec:	10800017 	ldw	r2,0(r2)
   1aaf0:	10800617 	ldw	r2,24(r2)
   1aaf4:	e0fffb17 	ldw	r3,-20(fp)
   1aaf8:	180d883a 	mov	r6,r3
   1aafc:	e17ffc17 	ldw	r5,-16(fp)
   1ab00:	e13fff17 	ldw	r4,-4(fp)
   1ab04:	103ee83a 	callr	r2
   1ab08:	e0bffe15 	stw	r2,-8(fp)
   1ab0c:	e0bffe17 	ldw	r2,-8(fp)
   1ab10:	1000070e 	bge	r2,zero,1ab30 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1ab14:	001aa400 	call	1aa40 <alt_get_errno>
   1ab18:	1007883a 	mov	r3,r2
   1ab1c:	e0bffe17 	ldw	r2,-8(fp)
   1ab20:	0085c83a 	sub	r2,zero,r2
   1ab24:	18800015 	stw	r2,0(r3)
        return -1;
   1ab28:	00bfffc4 	movi	r2,-1
   1ab2c:	00000c06 	br	1ab60 <write+0xe4>
      }
      return rval;
   1ab30:	e0bffe17 	ldw	r2,-8(fp)
   1ab34:	00000a06 	br	1ab60 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1ab38:	001aa400 	call	1aa40 <alt_get_errno>
   1ab3c:	1007883a 	mov	r3,r2
   1ab40:	00800344 	movi	r2,13
   1ab44:	18800015 	stw	r2,0(r3)
   1ab48:	00000406 	br	1ab5c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1ab4c:	001aa400 	call	1aa40 <alt_get_errno>
   1ab50:	1007883a 	mov	r3,r2
   1ab54:	00801444 	movi	r2,81
   1ab58:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1ab5c:	00bfffc4 	movi	r2,-1
}
   1ab60:	e037883a 	mov	sp,fp
   1ab64:	dfc00117 	ldw	ra,4(sp)
   1ab68:	df000017 	ldw	fp,0(sp)
   1ab6c:	dec00204 	addi	sp,sp,8
   1ab70:	f800283a 	ret

0001ab74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1ab74:	defffd04 	addi	sp,sp,-12
   1ab78:	dfc00215 	stw	ra,8(sp)
   1ab7c:	df000115 	stw	fp,4(sp)
   1ab80:	df000104 	addi	fp,sp,4
   1ab84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1ab88:	d1600704 	addi	r5,gp,-32740
   1ab8c:	e13fff17 	ldw	r4,-4(fp)
   1ab90:	002004c0 	call	2004c <alt_dev_llist_insert>
}
   1ab94:	e037883a 	mov	sp,fp
   1ab98:	dfc00117 	ldw	ra,4(sp)
   1ab9c:	df000017 	ldw	fp,0(sp)
   1aba0:	dec00204 	addi	sp,sp,8
   1aba4:	f800283a 	ret

0001aba8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1aba8:	defffd04 	addi	sp,sp,-12
   1abac:	dfc00215 	stw	ra,8(sp)
   1abb0:	df000115 	stw	fp,4(sp)
   1abb4:	df000104 	addi	fp,sp,4
   1abb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1abbc:	00209440 	call	20944 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1abc0:	00800044 	movi	r2,1
   1abc4:	1001703a 	wrctl	status,r2
}
   1abc8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   1abcc:	0001883a 	nop
   1abd0:	e037883a 	mov	sp,fp
   1abd4:	dfc00117 	ldw	ra,4(sp)
   1abd8:	df000017 	ldw	fp,0(sp)
   1abdc:	dec00204 	addi	sp,sp,8
   1abe0:	f800283a 	ret

0001abe4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1abe4:	defffe04 	addi	sp,sp,-8
   1abe8:	dfc00115 	stw	ra,4(sp)
   1abec:	df000015 	stw	fp,0(sp)
   1abf0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1abf4:	01c00204 	movi	r7,8
   1abf8:	000d883a 	mov	r6,zero
   1abfc:	000b883a 	mov	r5,zero
   1ac00:	013fc834 	movhi	r4,65312
   1ac04:	21080004 	addi	r4,r4,8192
   1ac08:	001f5880 	call	1f588 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1ac0c:	01800204 	movi	r6,8
   1ac10:	000b883a 	mov	r5,zero
   1ac14:	010000b4 	movhi	r4,2
   1ac18:	210acf04 	addi	r4,r4,11068
   1ac1c:	001ec000 	call	1ec00 <altera_avalon_jtag_uart_init>
   1ac20:	010000b4 	movhi	r4,2
   1ac24:	210ac504 	addi	r4,r4,11028
   1ac28:	001ab740 	call	1ab74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1ac2c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1ac30:	010000b4 	movhi	r4,2
   1ac34:	210edd04 	addi	r4,r4,15220
   1ac38:	001ab740 	call	1ab74 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1ac3c:	010000b4 	movhi	r4,2
   1ac40:	210ee904 	addi	r4,r4,15268
   1ac44:	001ab740 	call	1ab74 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1ac48:	010000b4 	movhi	r4,2
   1ac4c:	210ef504 	addi	r4,r4,15316
   1ac50:	001f6b80 	call	1f6b8 <alt_up_character_lcd_init>
   1ac54:	010000b4 	movhi	r4,2
   1ac58:	210ef504 	addi	r4,r4,15316
   1ac5c:	001ab740 	call	1ab74 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1ac60:	010000b4 	movhi	r4,2
   1ac64:	210f0004 	addi	r4,r4,15360
   1ac68:	001ab740 	call	1ab74 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1ac6c:	010000b4 	movhi	r4,2
   1ac70:	210f0b04 	addi	r4,r4,15404
   1ac74:	001ab740 	call	1ab74 <alt_dev_reg>
}
   1ac78:	0001883a 	nop
   1ac7c:	e037883a 	mov	sp,fp
   1ac80:	dfc00117 	ldw	ra,4(sp)
   1ac84:	df000017 	ldw	fp,0(sp)
   1ac88:	dec00204 	addi	sp,sp,8
   1ac8c:	f800283a 	ret

0001ac90 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   1ac90:	defffa04 	addi	sp,sp,-24
   1ac94:	dfc00515 	stw	ra,20(sp)
   1ac98:	df000415 	stw	fp,16(sp)
   1ac9c:	df000404 	addi	fp,sp,16
   1aca0:	e13ffd15 	stw	r4,-12(fp)
   1aca4:	e17ffc15 	stw	r5,-16(fp)
    bool result = false;
   1aca8:	e03fff15 	stw	zero,-4(fp)
    
    if (alt_up_sd_card_is_Present())
   1acac:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1acb0:	10001e26 	beq	r2,zero,1ad2c <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
   1acb4:	00803fc4 	movi	r2,255
   1acb8:	e0bffe8d 	sth	r2,-6(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1acbc:	d0a75017 	ldw	r2,-25280(gp)
   1acc0:	e13ffd17 	ldw	r4,-12(fp)
   1acc4:	e0fffc17 	ldw	r3,-16(fp)
   1acc8:	20c7883a 	add	r3,r4,r3
   1accc:	1806927a 	slli	r3,r3,9
   1acd0:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
   1acd4:	d0a74f17 	ldw	r2,-25284(gp)
   1acd8:	00c00604 	movi	r3,24
   1acdc:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1ace0:	d0a74c17 	ldw	r2,-25296(gp)
   1ace4:	1080002b 	ldhuio	r2,0(r2)
   1ace8:	10bfffcc 	andi	r2,r2,65535
   1acec:	e0bffe8d 	sth	r2,-6(fp)
        } while ((reg_state & 0x04)!=0);
   1acf0:	e0bffe8b 	ldhu	r2,-6(fp)
   1acf4:	10bfffcc 	andi	r2,r2,65535
   1acf8:	1080010c 	andi	r2,r2,4
   1acfc:	103ff81e 	bne	r2,zero,1ace0 <Write_Sector_Data+0x50>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   1ad00:	e0bffe8b 	ldhu	r2,-6(fp)
   1ad04:	10bfffcc 	andi	r2,r2,65535
   1ad08:	1080040c 	andi	r2,r2,16
   1ad0c:	1000071e 	bne	r2,zero,1ad2c <Write_Sector_Data+0x9c>
        {
            result = true;
   1ad10:	00800044 	movi	r2,1
   1ad14:	e0bfff15 	stw	r2,-4(fp)
            current_sector_modified = false;
   1ad18:	d0275515 	stw	zero,-25260(gp)
            current_sector_index = sector_index+partition_offset;
   1ad1c:	e0fffd17 	ldw	r3,-12(fp)
   1ad20:	e0bffc17 	ldw	r2,-16(fp)
   1ad24:	1885883a 	add	r2,r3,r2
   1ad28:	d0a75615 	stw	r2,-25256(gp)
        }
    }
    return result;
   1ad2c:	e0bfff17 	ldw	r2,-4(fp)
}
   1ad30:	e037883a 	mov	sp,fp
   1ad34:	dfc00117 	ldw	ra,4(sp)
   1ad38:	df000017 	ldw	fp,0(sp)
   1ad3c:	dec00204 	addi	sp,sp,8
   1ad40:	f800283a 	ret

0001ad44 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   1ad44:	defffd04 	addi	sp,sp,-12
   1ad48:	dfc00215 	stw	ra,8(sp)
   1ad4c:	df000115 	stw	fp,4(sp)
   1ad50:	df000104 	addi	fp,sp,4
    bool result = true;
   1ad54:	00800044 	movi	r2,1
   1ad58:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   1ad5c:	d0a75517 	ldw	r2,-25260(gp)
   1ad60:	10000526 	beq	r2,zero,1ad78 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   1ad64:	d0a75617 	ldw	r2,-25256(gp)
   1ad68:	000b883a 	mov	r5,zero
   1ad6c:	1009883a 	mov	r4,r2
   1ad70:	001ac900 	call	1ac90 <Write_Sector_Data>
   1ad74:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1ad78:	e0bfff17 	ldw	r2,-4(fp)
}
   1ad7c:	e037883a 	mov	sp,fp
   1ad80:	dfc00117 	ldw	ra,4(sp)
   1ad84:	df000017 	ldw	fp,0(sp)
   1ad88:	dec00204 	addi	sp,sp,8
   1ad8c:	f800283a 	ret

0001ad90 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   1ad90:	defffa04 	addi	sp,sp,-24
   1ad94:	dfc00515 	stw	ra,20(sp)
   1ad98:	df000415 	stw	fp,16(sp)
   1ad9c:	df000404 	addi	fp,sp,16
   1ada0:	e13ffd15 	stw	r4,-12(fp)
   1ada4:	e17ffc15 	stw	r5,-16(fp)
	bool result = false;
   1ada8:	e03fff15 	stw	zero,-4(fp)
    
	if (alt_up_sd_card_is_Present())
   1adac:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1adb0:	10002726 	beq	r2,zero,1ae50 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
   1adb4:	00803fc4 	movi	r2,255
   1adb8:	e0bffe8d 	sth	r2,-6(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   1adbc:	d0a75517 	ldw	r2,-25260(gp)
   1adc0:	10000726 	beq	r2,zero,1ade0 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   1adc4:	d0a75617 	ldw	r2,-25256(gp)
   1adc8:	000b883a 	mov	r5,zero
   1adcc:	1009883a 	mov	r4,r2
   1add0:	001ac900 	call	1ac90 <Write_Sector_Data>
   1add4:	1000021e 	bne	r2,zero,1ade0 <Read_Sector_Data+0x50>
            {
                return false;
   1add8:	0005883a 	mov	r2,zero
   1addc:	00001d06 	br	1ae54 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   1ade0:	d0a75017 	ldw	r2,-25280(gp)
   1ade4:	e13ffd17 	ldw	r4,-12(fp)
   1ade8:	e0fffc17 	ldw	r3,-16(fp)
   1adec:	20c7883a 	add	r3,r4,r3
   1adf0:	1806927a 	slli	r3,r3,9
   1adf4:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
   1adf8:	d0a74f17 	ldw	r2,-25284(gp)
   1adfc:	00c00444 	movi	r3,17
   1ae00:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   1ae04:	d0a74c17 	ldw	r2,-25296(gp)
   1ae08:	1080002b 	ldhuio	r2,0(r2)
   1ae0c:	10bfffcc 	andi	r2,r2,65535
   1ae10:	e0bffe8d 	sth	r2,-6(fp)
		} while ((reg_state & 0x04)!=0);
   1ae14:	e0bffe8b 	ldhu	r2,-6(fp)
   1ae18:	10bfffcc 	andi	r2,r2,65535
   1ae1c:	1080010c 	andi	r2,r2,4
   1ae20:	103ff81e 	bne	r2,zero,1ae04 <Read_Sector_Data+0x74>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   1ae24:	e0bffe8b 	ldhu	r2,-6(fp)
   1ae28:	10bfffcc 	andi	r2,r2,65535
   1ae2c:	1080040c 	andi	r2,r2,16
   1ae30:	1000071e 	bne	r2,zero,1ae50 <Read_Sector_Data+0xc0>
		{
			result = true;
   1ae34:	00800044 	movi	r2,1
   1ae38:	e0bfff15 	stw	r2,-4(fp)
            current_sector_modified = false;
   1ae3c:	d0275515 	stw	zero,-25260(gp)
            current_sector_index = sector_index+partition_offset;
   1ae40:	e0fffd17 	ldw	r3,-12(fp)
   1ae44:	e0bffc17 	ldw	r2,-16(fp)
   1ae48:	1885883a 	add	r2,r3,r2
   1ae4c:	d0a75615 	stw	r2,-25256(gp)
		}
	}
	return result;
   1ae50:	e0bfff17 	ldw	r2,-4(fp)
}
   1ae54:	e037883a 	mov	sp,fp
   1ae58:	dfc00117 	ldw	ra,4(sp)
   1ae5c:	df000017 	ldw	fp,0(sp)
   1ae60:	dec00204 	addi	sp,sp,8
   1ae64:	f800283a 	ret

0001ae68 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   1ae68:	defffb04 	addi	sp,sp,-20
   1ae6c:	dfc00415 	stw	ra,16(sp)
   1ae70:	df000315 	stw	fp,12(sp)
   1ae74:	df000304 	addi	fp,sp,12
   1ae78:	e13ffe15 	stw	r4,-8(fp)
   1ae7c:	e17ffd15 	stw	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   1ae80:	e0bffe17 	ldw	r2,-8(fp)
   1ae84:	1004d23a 	srli	r2,r2,8
   1ae88:	d0e75217 	ldw	r3,-25272(gp)
   1ae8c:	10c5883a 	add	r2,r2,r3
   1ae90:	e0bfff15 	stw	r2,-4(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1ae94:	008000b4 	movhi	r2,2
   1ae98:	10968d17 	ldw	r2,23092(r2)
   1ae9c:	e0ffff17 	ldw	r3,-4(fp)
   1aea0:	1885883a 	add	r2,r3,r2
   1aea4:	e0bfff15 	stw	r2,-4(fp)
     
    if (sector_index != current_sector_index)
   1aea8:	d0a75617 	ldw	r2,-25256(gp)
   1aeac:	e0ffff17 	ldw	r3,-4(fp)
   1aeb0:	18800726 	beq	r3,r2,1aed0 <get_cluster_flag+0x68>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1aeb4:	e0bfff17 	ldw	r2,-4(fp)
   1aeb8:	000b883a 	mov	r5,zero
   1aebc:	1009883a 	mov	r4,r2
   1aec0:	001ad900 	call	1ad90 <Read_Sector_Data>
   1aec4:	1000021e 	bne	r2,zero,1aed0 <get_cluster_flag+0x68>
        {
            return false;
   1aec8:	0005883a 	mov	r2,zero
   1aecc:	00000d06 	br	1af04 <get_cluster_flag+0x9c>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
   1aed0:	e0bffe17 	ldw	r2,-8(fp)
   1aed4:	10803fcc 	andi	r2,r2,255
   1aed8:	1085883a 	add	r2,r2,r2
   1aedc:	1007883a 	mov	r3,r2
   1aee0:	d0a75417 	ldw	r2,-25264(gp)
   1aee4:	10800a17 	ldw	r2,40(r2)
   1aee8:	1885883a 	add	r2,r3,r2
   1aeec:	1080002b 	ldhuio	r2,0(r2)
   1aef0:	10bfffcc 	andi	r2,r2,65535
   1aef4:	1007883a 	mov	r3,r2
   1aef8:	e0bffd17 	ldw	r2,-12(fp)
   1aefc:	10c0000d 	sth	r3,0(r2)
    return true;
   1af00:	00800044 	movi	r2,1
}
   1af04:	e037883a 	mov	sp,fp
   1af08:	dfc00117 	ldw	ra,4(sp)
   1af0c:	df000017 	ldw	fp,0(sp)
   1af10:	dec00204 	addi	sp,sp,8
   1af14:	f800283a 	ret

0001af18 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   1af18:	defffa04 	addi	sp,sp,-24
   1af1c:	dfc00515 	stw	ra,20(sp)
   1af20:	df000415 	stw	fp,16(sp)
   1af24:	df000404 	addi	fp,sp,16
   1af28:	e13ffe15 	stw	r4,-8(fp)
   1af2c:	2805883a 	mov	r2,r5
   1af30:	e1bffc15 	stw	r6,-16(fp)
   1af34:	e0bffd0d 	sth	r2,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   1af38:	e0bffe17 	ldw	r2,-8(fp)
   1af3c:	1004d23a 	srli	r2,r2,8
   1af40:	d0e75217 	ldw	r3,-25272(gp)
   1af44:	10c5883a 	add	r2,r2,r3
   1af48:	e0bfff15 	stw	r2,-4(fp)
    
    if (first_fat)
   1af4c:	e0bffc17 	ldw	r2,-16(fp)
   1af50:	10000626 	beq	r2,zero,1af6c <mark_cluster+0x54>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   1af54:	008000b4 	movhi	r2,2
   1af58:	10968d17 	ldw	r2,23092(r2)
   1af5c:	e0ffff17 	ldw	r3,-4(fp)
   1af60:	1885883a 	add	r2,r3,r2
   1af64:	e0bfff15 	stw	r2,-4(fp)
   1af68:	00000506 	br	1af80 <mark_cluster+0x68>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   1af6c:	008000b4 	movhi	r2,2
   1af70:	10968e17 	ldw	r2,23096(r2)
   1af74:	e0ffff17 	ldw	r3,-4(fp)
   1af78:	1885883a 	add	r2,r3,r2
   1af7c:	e0bfff15 	stw	r2,-4(fp)
    }
     
    if (sector_index != current_sector_index)
   1af80:	d0a75617 	ldw	r2,-25256(gp)
   1af84:	e0ffff17 	ldw	r3,-4(fp)
   1af88:	18800726 	beq	r3,r2,1afa8 <mark_cluster+0x90>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   1af8c:	e0bfff17 	ldw	r2,-4(fp)
   1af90:	000b883a 	mov	r5,zero
   1af94:	1009883a 	mov	r4,r2
   1af98:	001ad900 	call	1ad90 <Read_Sector_Data>
   1af9c:	1000021e 	bne	r2,zero,1afa8 <mark_cluster+0x90>
        {
            return false;
   1afa0:	0005883a 	mov	r2,zero
   1afa4:	00000d06 	br	1afdc <mark_cluster+0xc4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
   1afa8:	e0bffe17 	ldw	r2,-8(fp)
   1afac:	10803fcc 	andi	r2,r2,255
   1afb0:	1085883a 	add	r2,r2,r2
   1afb4:	1007883a 	mov	r3,r2
   1afb8:	d0a75417 	ldw	r2,-25264(gp)
   1afbc:	10800a17 	ldw	r2,40(r2)
   1afc0:	1885883a 	add	r2,r3,r2
   1afc4:	1007883a 	mov	r3,r2
   1afc8:	e0bffd0f 	ldh	r2,-12(fp)
   1afcc:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
   1afd0:	00800044 	movi	r2,1
   1afd4:	d0a75515 	stw	r2,-25260(gp)
    return true;
   1afd8:	00800044 	movi	r2,1
}
   1afdc:	e037883a 	mov	sp,fp
   1afe0:	dfc00117 	ldw	ra,4(sp)
   1afe4:	df000017 	ldw	fp,0(sp)
   1afe8:	dec00204 	addi	sp,sp,8
   1afec:	f800283a 	ret

0001aff0 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   1aff0:	defff704 	addi	sp,sp,-36
   1aff4:	dfc00815 	stw	ra,32(sp)
   1aff8:	df000715 	stw	fp,28(sp)
   1affc:	df000704 	addi	fp,sp,28
	bool result = false;
   1b000:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   1b004:	000b883a 	mov	r5,zero
   1b008:	0009883a 	mov	r4,zero
   1b00c:	001ad900 	call	1ad90 <Read_Sector_Data>
   1b010:	10005c26 	beq	r2,zero,1b184 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
   1b014:	d0a75417 	ldw	r2,-25264(gp)
   1b018:	10800a17 	ldw	r2,40(r2)
   1b01c:	10807f84 	addi	r2,r2,510
   1b020:	1080002b 	ldhuio	r2,0(r2)
   1b024:	10bfffcc 	andi	r2,r2,65535
   1b028:	10bfffcc 	andi	r2,r2,65535
   1b02c:	10a0001c 	xori	r2,r2,32768
   1b030:	10a00004 	addi	r2,r2,-32768
   1b034:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   1b038:	e0bffd17 	ldw	r2,-12(fp)
   1b03c:	10ffffcc 	andi	r3,r2,65535
   1b040:	00aa9554 	movui	r2,43605
   1b044:	18804f1e 	bne	r3,r2,1b184 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   1b048:	e03ffe15 	stw	zero,-8(fp)
   1b04c:	00004a06 	br	1b178 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   1b050:	e0bffe17 	ldw	r2,-8(fp)
   1b054:	1004913a 	slli	r2,r2,4
   1b058:	10806f84 	addi	r2,r2,446
   1b05c:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
   1b060:	d0a75417 	ldw	r2,-25264(gp)
   1b064:	10c00a17 	ldw	r3,40(r2)
   1b068:	e0bffc17 	ldw	r2,-16(fp)
   1b06c:	1885883a 	add	r2,r3,r2
   1b070:	10800104 	addi	r2,r2,4
   1b074:	10800023 	ldbuio	r2,0(r2)
   1b078:	10803fcc 	andi	r2,r2,255
   1b07c:	e0bffbc5 	stb	r2,-17(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   1b080:	e0bffbc7 	ldb	r2,-17(fp)
   1b084:	10800060 	cmpeqi	r2,r2,1
   1b088:	1000091e 	bne	r2,zero,1b0b0 <Check_for_Master_Boot_Record+0xc0>
   1b08c:	e0bffbc7 	ldb	r2,-17(fp)
   1b090:	10800120 	cmpeqi	r2,r2,4
   1b094:	1000061e 	bne	r2,zero,1b0b0 <Check_for_Master_Boot_Record+0xc0>
   1b098:	e0bffbc7 	ldb	r2,-17(fp)
   1b09c:	108001a0 	cmpeqi	r2,r2,6
   1b0a0:	1000031e 	bne	r2,zero,1b0b0 <Check_for_Master_Boot_Record+0xc0>
   1b0a4:	e0bffbc7 	ldb	r2,-17(fp)
   1b0a8:	10800398 	cmpnei	r2,r2,14
   1b0ac:	10002f1e 	bne	r2,zero,1b16c <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
   1b0b0:	d0a75417 	ldw	r2,-25264(gp)
   1b0b4:	10c00a17 	ldw	r3,40(r2)
   1b0b8:	e0bffc17 	ldw	r2,-16(fp)
   1b0bc:	1885883a 	add	r2,r3,r2
   1b0c0:	10800284 	addi	r2,r2,10
   1b0c4:	1080002b 	ldhuio	r2,0(r2)
   1b0c8:	10bfffcc 	andi	r2,r2,65535
   1b0cc:	10bfffcc 	andi	r2,r2,65535
   1b0d0:	1006943a 	slli	r3,r2,16
   1b0d4:	d0a75417 	ldw	r2,-25264(gp)
   1b0d8:	11000a17 	ldw	r4,40(r2)
   1b0dc:	e0bffc17 	ldw	r2,-16(fp)
   1b0e0:	2085883a 	add	r2,r4,r2
   1b0e4:	10800204 	addi	r2,r2,8
   1b0e8:	1080002b 	ldhuio	r2,0(r2)
   1b0ec:	10bfffcc 	andi	r2,r2,65535
   1b0f0:	10bfffcc 	andi	r2,r2,65535
   1b0f4:	1884b03a 	or	r2,r3,r2
   1b0f8:	e0bffa15 	stw	r2,-24(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
   1b0fc:	d0a75417 	ldw	r2,-25264(gp)
   1b100:	10c00a17 	ldw	r3,40(r2)
   1b104:	e0bffc17 	ldw	r2,-16(fp)
   1b108:	1885883a 	add	r2,r3,r2
   1b10c:	10800384 	addi	r2,r2,14
   1b110:	1080002b 	ldhuio	r2,0(r2)
   1b114:	10bfffcc 	andi	r2,r2,65535
   1b118:	10bfffcc 	andi	r2,r2,65535
   1b11c:	1006943a 	slli	r3,r2,16
   1b120:	d0a75417 	ldw	r2,-25264(gp)
   1b124:	11000a17 	ldw	r4,40(r2)
   1b128:	e0bffc17 	ldw	r2,-16(fp)
   1b12c:	2085883a 	add	r2,r4,r2
   1b130:	10800304 	addi	r2,r2,12
   1b134:	1080002b 	ldhuio	r2,0(r2)
   1b138:	10bfffcc 	andi	r2,r2,65535
   1b13c:	10bfffcc 	andi	r2,r2,65535
   1b140:	1884b03a 	or	r2,r3,r2
   1b144:	e0bff915 	stw	r2,-28(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   1b148:	e0bff917 	ldw	r2,-28(fp)
   1b14c:	0080070e 	bge	zero,r2,1b16c <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
   1b150:	00800044 	movi	r2,1
   1b154:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   1b158:	e0bff917 	ldw	r2,-28(fp)
   1b15c:	d0a75315 	stw	r2,-25268(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   1b160:	e0bffa17 	ldw	r2,-24(fp)
   1b164:	d0a75215 	stw	r2,-25272(gp)
						break;
   1b168:	00000606 	br	1b184 <Check_for_Master_Boot_Record+0x194>
			for (index = 0; index < 4; index++)
   1b16c:	e0bffe17 	ldw	r2,-8(fp)
   1b170:	10800044 	addi	r2,r2,1
   1b174:	e0bffe15 	stw	r2,-8(fp)
   1b178:	e0bffe17 	ldw	r2,-8(fp)
   1b17c:	10800110 	cmplti	r2,r2,4
   1b180:	103fb31e 	bne	r2,zero,1b050 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
   1b184:	e0bfff17 	ldw	r2,-4(fp)
}
   1b188:	e037883a 	mov	sp,fp
   1b18c:	dfc00117 	ldw	ra,4(sp)
   1b190:	df000017 	ldw	fp,0(sp)
   1b194:	dec00204 	addi	sp,sp,8
   1b198:	f800283a 	ret

0001b19c <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   1b19c:	defff804 	addi	sp,sp,-32
   1b1a0:	dfc00715 	stw	ra,28(sp)
   1b1a4:	df000615 	stw	fp,24(sp)
   1b1a8:	df000604 	addi	fp,sp,24
   1b1ac:	e13ffd15 	stw	r4,-12(fp)
   1b1b0:	e17ffc15 	stw	r5,-16(fp)
   1b1b4:	e1bffb15 	stw	r6,-20(fp)
   1b1b8:	e1fffa15 	stw	r7,-24(fp)
	bool result = false;
   1b1bc:	e03fff15 	stw	zero,-4(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1b1c0:	e0bffd17 	ldw	r2,-12(fp)
   1b1c4:	108007cc 	andi	r2,r2,31
   1b1c8:	10008c1e 	bne	r2,zero,1b3fc <Read_File_Record_At_Offset+0x260>
   1b1cc:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1b1d0:	10008a26 	beq	r2,zero,1b3fc <Read_File_Record_At_Offset+0x260>
   1b1d4:	d0a74b17 	ldw	r2,-25300(gp)
   1b1d8:	10008826 	beq	r2,zero,1b3fc <Read_File_Record_At_Offset+0x260>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   1b1dc:	e03ffe15 	stw	zero,-8(fp)
   1b1e0:	00001106 	br	1b228 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
   1b1e4:	e0fffd17 	ldw	r3,-12(fp)
   1b1e8:	e0bffe17 	ldw	r2,-8(fp)
   1b1ec:	1885883a 	add	r2,r3,r2
   1b1f0:	1007883a 	mov	r3,r2
   1b1f4:	d0a75417 	ldw	r2,-25264(gp)
   1b1f8:	10800a17 	ldw	r2,40(r2)
   1b1fc:	1885883a 	add	r2,r3,r2
   1b200:	10800023 	ldbuio	r2,0(r2)
   1b204:	10803fcc 	andi	r2,r2,255
   1b208:	1009883a 	mov	r4,r2
   1b20c:	e0fffc17 	ldw	r3,-16(fp)
   1b210:	e0bffe17 	ldw	r2,-8(fp)
   1b214:	1885883a 	add	r2,r3,r2
   1b218:	11000005 	stb	r4,0(r2)
		for (counter = 0; counter < 8; counter++)
   1b21c:	e0bffe17 	ldw	r2,-8(fp)
   1b220:	10800044 	addi	r2,r2,1
   1b224:	e0bffe15 	stw	r2,-8(fp)
   1b228:	e0bffe17 	ldw	r2,-8(fp)
   1b22c:	10800210 	cmplti	r2,r2,8
   1b230:	103fec1e 	bne	r2,zero,1b1e4 <Read_File_Record_At_Offset+0x48>
		}        
		for (counter = 0; counter < 3; counter++)
   1b234:	e03ffe15 	stw	zero,-8(fp)
   1b238:	00001206 	br	1b284 <Read_File_Record_At_Offset+0xe8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
   1b23c:	e0fffd17 	ldw	r3,-12(fp)
   1b240:	e0bffe17 	ldw	r2,-8(fp)
   1b244:	1885883a 	add	r2,r3,r2
   1b248:	1007883a 	mov	r3,r2
   1b24c:	d0a75417 	ldw	r2,-25264(gp)
   1b250:	10800a17 	ldw	r2,40(r2)
   1b254:	1885883a 	add	r2,r3,r2
   1b258:	10800204 	addi	r2,r2,8
   1b25c:	10800023 	ldbuio	r2,0(r2)
   1b260:	10803fcc 	andi	r2,r2,255
   1b264:	1009883a 	mov	r4,r2
   1b268:	e0fffc17 	ldw	r3,-16(fp)
   1b26c:	e0bffe17 	ldw	r2,-8(fp)
   1b270:	1885883a 	add	r2,r3,r2
   1b274:	11000205 	stb	r4,8(r2)
		for (counter = 0; counter < 3; counter++)
   1b278:	e0bffe17 	ldw	r2,-8(fp)
   1b27c:	10800044 	addi	r2,r2,1
   1b280:	e0bffe15 	stw	r2,-8(fp)
   1b284:	e0bffe17 	ldw	r2,-8(fp)
   1b288:	108000d0 	cmplti	r2,r2,3
   1b28c:	103feb1e 	bne	r2,zero,1b23c <Read_File_Record_At_Offset+0xa0>
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
   1b290:	d0a75417 	ldw	r2,-25264(gp)
   1b294:	10c00a17 	ldw	r3,40(r2)
   1b298:	e0bffd17 	ldw	r2,-12(fp)
   1b29c:	1885883a 	add	r2,r3,r2
   1b2a0:	108002c4 	addi	r2,r2,11
   1b2a4:	10800023 	ldbuio	r2,0(r2)
   1b2a8:	10803fcc 	andi	r2,r2,255
   1b2ac:	1007883a 	mov	r3,r2
   1b2b0:	e0bffc17 	ldw	r2,-16(fp)
   1b2b4:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
   1b2b8:	d0a75417 	ldw	r2,-25264(gp)
   1b2bc:	10c00a17 	ldw	r3,40(r2)
   1b2c0:	e0bffd17 	ldw	r2,-12(fp)
   1b2c4:	1885883a 	add	r2,r3,r2
   1b2c8:	10800384 	addi	r2,r2,14
   1b2cc:	1080002b 	ldhuio	r2,0(r2)
   1b2d0:	10bfffcc 	andi	r2,r2,65535
   1b2d4:	1007883a 	mov	r3,r2
   1b2d8:	e0bffc17 	ldw	r2,-16(fp)
   1b2dc:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
   1b2e0:	d0a75417 	ldw	r2,-25264(gp)
   1b2e4:	10c00a17 	ldw	r3,40(r2)
   1b2e8:	e0bffd17 	ldw	r2,-12(fp)
   1b2ec:	1885883a 	add	r2,r3,r2
   1b2f0:	10800404 	addi	r2,r2,16
   1b2f4:	1080002b 	ldhuio	r2,0(r2)
   1b2f8:	10bfffcc 	andi	r2,r2,65535
   1b2fc:	1007883a 	mov	r3,r2
   1b300:	e0bffc17 	ldw	r2,-16(fp)
   1b304:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
   1b308:	d0a75417 	ldw	r2,-25264(gp)
   1b30c:	10c00a17 	ldw	r3,40(r2)
   1b310:	e0bffd17 	ldw	r2,-12(fp)
   1b314:	1885883a 	add	r2,r3,r2
   1b318:	10800484 	addi	r2,r2,18
   1b31c:	1080002b 	ldhuio	r2,0(r2)
   1b320:	10bfffcc 	andi	r2,r2,65535
   1b324:	1007883a 	mov	r3,r2
   1b328:	e0bffc17 	ldw	r2,-16(fp)
   1b32c:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
   1b330:	d0a75417 	ldw	r2,-25264(gp)
   1b334:	10c00a17 	ldw	r3,40(r2)
   1b338:	e0bffd17 	ldw	r2,-12(fp)
   1b33c:	1885883a 	add	r2,r3,r2
   1b340:	10800584 	addi	r2,r2,22
   1b344:	1080002b 	ldhuio	r2,0(r2)
   1b348:	10bfffcc 	andi	r2,r2,65535
   1b34c:	1007883a 	mov	r3,r2
   1b350:	e0bffc17 	ldw	r2,-16(fp)
   1b354:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
   1b358:	d0a75417 	ldw	r2,-25264(gp)
   1b35c:	10c00a17 	ldw	r3,40(r2)
   1b360:	e0bffd17 	ldw	r2,-12(fp)
   1b364:	1885883a 	add	r2,r3,r2
   1b368:	10800604 	addi	r2,r2,24
   1b36c:	1080002b 	ldhuio	r2,0(r2)
   1b370:	10bfffcc 	andi	r2,r2,65535
   1b374:	1007883a 	mov	r3,r2
   1b378:	e0bffc17 	ldw	r2,-16(fp)
   1b37c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
   1b380:	d0a75417 	ldw	r2,-25264(gp)
   1b384:	10c00a17 	ldw	r3,40(r2)
   1b388:	e0bffd17 	ldw	r2,-12(fp)
   1b38c:	1885883a 	add	r2,r3,r2
   1b390:	10800684 	addi	r2,r2,26
   1b394:	1080002b 	ldhuio	r2,0(r2)
   1b398:	10bfffcc 	andi	r2,r2,65535
   1b39c:	1007883a 	mov	r3,r2
   1b3a0:	e0bffc17 	ldw	r2,-16(fp)
   1b3a4:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
   1b3a8:	d0a75417 	ldw	r2,-25264(gp)
   1b3ac:	10c00a17 	ldw	r3,40(r2)
   1b3b0:	e0bffd17 	ldw	r2,-12(fp)
   1b3b4:	1885883a 	add	r2,r3,r2
   1b3b8:	10800704 	addi	r2,r2,28
   1b3bc:	10800037 	ldwio	r2,0(r2)
   1b3c0:	1007883a 	mov	r3,r2
   1b3c4:	e0bffc17 	ldw	r2,-16(fp)
   1b3c8:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   1b3cc:	e0bffc17 	ldw	r2,-16(fp)
   1b3d0:	e0fffb17 	ldw	r3,-20(fp)
   1b3d4:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
   1b3d8:	e0bffc17 	ldw	r2,-16(fp)
   1b3dc:	e0fffa17 	ldw	r3,-24(fp)
   1b3e0:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
   1b3e4:	e0bffd17 	ldw	r2,-12(fp)
   1b3e8:	1007883a 	mov	r3,r2
   1b3ec:	e0bffc17 	ldw	r2,-16(fp)
   1b3f0:	10c00c0d 	sth	r3,48(r2)
		result = true;
   1b3f4:	00800044 	movi	r2,1
   1b3f8:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
   1b3fc:	e0bfff17 	ldw	r2,-4(fp)
}
   1b400:	e037883a 	mov	sp,fp
   1b404:	dfc00117 	ldw	ra,4(sp)
   1b408:	df000017 	ldw	fp,0(sp)
   1b40c:	dec00204 	addi	sp,sp,8
   1b410:	f800283a 	ret

0001b414 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   1b414:	defff904 	addi	sp,sp,-28
   1b418:	dfc00615 	stw	ra,24(sp)
   1b41c:	df000515 	stw	fp,20(sp)
   1b420:	df000504 	addi	fp,sp,20
   1b424:	e13ffc15 	stw	r4,-16(fp)
   1b428:	e17ffb15 	stw	r5,-20(fp)
    bool result = false;
   1b42c:	e03fff15 	stw	zero,-4(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1b430:	e0bffc17 	ldw	r2,-16(fp)
   1b434:	108007cc 	andi	r2,r2,31
   1b438:	1000921e 	bne	r2,zero,1b684 <Write_File_Record_At_Offset+0x270>
   1b43c:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1b440:	10009026 	beq	r2,zero,1b684 <Write_File_Record_At_Offset+0x270>
   1b444:	d0a74b17 	ldw	r2,-25300(gp)
   1b448:	10008e26 	beq	r2,zero,1b684 <Write_File_Record_At_Offset+0x270>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   1b44c:	e03ffe15 	stw	zero,-8(fp)
   1b450:	00001f06 	br	1b4d0 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
   1b454:	e0bffe17 	ldw	r2,-8(fp)
   1b458:	10800044 	addi	r2,r2,1
   1b45c:	e0fffb17 	ldw	r3,-20(fp)
   1b460:	1885883a 	add	r2,r3,r2
   1b464:	10800003 	ldbu	r2,0(r2)
   1b468:	10803fcc 	andi	r2,r2,255
   1b46c:	e0bffd8d 	sth	r2,-10(fp)
            two_chars = two_chars << 8;
   1b470:	e0bffd8f 	ldh	r2,-10(fp)
   1b474:	1004923a 	slli	r2,r2,8
   1b478:	e0bffd8d 	sth	r2,-10(fp)
            two_chars = two_chars | record->name[counter];
   1b47c:	e0fffb17 	ldw	r3,-20(fp)
   1b480:	e0bffe17 	ldw	r2,-8(fp)
   1b484:	1885883a 	add	r2,r3,r2
   1b488:	10800003 	ldbu	r2,0(r2)
   1b48c:	10803fcc 	andi	r2,r2,255
   1b490:	e0fffd8b 	ldhu	r3,-10(fp)
   1b494:	1884b03a 	or	r2,r3,r2
   1b498:	e0bffd8d 	sth	r2,-10(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
   1b49c:	e0fffc17 	ldw	r3,-16(fp)
   1b4a0:	e0bffe17 	ldw	r2,-8(fp)
   1b4a4:	1885883a 	add	r2,r3,r2
   1b4a8:	1007883a 	mov	r3,r2
   1b4ac:	d0a75417 	ldw	r2,-25264(gp)
   1b4b0:	10800a17 	ldw	r2,40(r2)
   1b4b4:	1885883a 	add	r2,r3,r2
   1b4b8:	1007883a 	mov	r3,r2
   1b4bc:	e0bffd8f 	ldh	r2,-10(fp)
   1b4c0:	1880002d 	sthio	r2,0(r3)
        for (counter = 0; counter < 8; counter=counter+2)
   1b4c4:	e0bffe17 	ldw	r2,-8(fp)
   1b4c8:	10800084 	addi	r2,r2,2
   1b4cc:	e0bffe15 	stw	r2,-8(fp)
   1b4d0:	e0bffe17 	ldw	r2,-8(fp)
   1b4d4:	10800210 	cmplti	r2,r2,8
   1b4d8:	103fde1e 	bne	r2,zero,1b454 <Write_File_Record_At_Offset+0x40>
        }        
        for (counter = 0; counter < 3; counter++)
   1b4dc:	e03ffe15 	stw	zero,-8(fp)
   1b4e0:	00001206 	br	1b52c <Write_File_Record_At_Offset+0x118>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
   1b4e4:	e0fffc17 	ldw	r3,-16(fp)
   1b4e8:	e0bffe17 	ldw	r2,-8(fp)
   1b4ec:	1885883a 	add	r2,r3,r2
   1b4f0:	1007883a 	mov	r3,r2
   1b4f4:	d0a75417 	ldw	r2,-25264(gp)
   1b4f8:	10800a17 	ldw	r2,40(r2)
   1b4fc:	1885883a 	add	r2,r3,r2
   1b500:	10800204 	addi	r2,r2,8
   1b504:	1009883a 	mov	r4,r2
   1b508:	e0fffb17 	ldw	r3,-20(fp)
   1b50c:	e0bffe17 	ldw	r2,-8(fp)
   1b510:	1885883a 	add	r2,r3,r2
   1b514:	10800203 	ldbu	r2,8(r2)
   1b518:	10803fcc 	andi	r2,r2,255
   1b51c:	20800025 	stbio	r2,0(r4)
        for (counter = 0; counter < 3; counter++)
   1b520:	e0bffe17 	ldw	r2,-8(fp)
   1b524:	10800044 	addi	r2,r2,1
   1b528:	e0bffe15 	stw	r2,-8(fp)
   1b52c:	e0bffe17 	ldw	r2,-8(fp)
   1b530:	108000d0 	cmplti	r2,r2,3
   1b534:	103feb1e 	bne	r2,zero,1b4e4 <Write_File_Record_At_Offset+0xd0>
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
   1b538:	d0a75417 	ldw	r2,-25264(gp)
   1b53c:	10c00a17 	ldw	r3,40(r2)
   1b540:	e0bffc17 	ldw	r2,-16(fp)
   1b544:	1885883a 	add	r2,r3,r2
   1b548:	108002c4 	addi	r2,r2,11
   1b54c:	1007883a 	mov	r3,r2
   1b550:	e0bffb17 	ldw	r2,-20(fp)
   1b554:	108002c3 	ldbu	r2,11(r2)
   1b558:	10803fcc 	andi	r2,r2,255
   1b55c:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
   1b560:	d0a75417 	ldw	r2,-25264(gp)
   1b564:	10c00a17 	ldw	r3,40(r2)
   1b568:	e0bffc17 	ldw	r2,-16(fp)
   1b56c:	1885883a 	add	r2,r3,r2
   1b570:	10800384 	addi	r2,r2,14
   1b574:	1007883a 	mov	r3,r2
   1b578:	e0bffb17 	ldw	r2,-20(fp)
   1b57c:	1080030b 	ldhu	r2,12(r2)
   1b580:	10bfffcc 	andi	r2,r2,65535
   1b584:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
   1b588:	d0a75417 	ldw	r2,-25264(gp)
   1b58c:	10c00a17 	ldw	r3,40(r2)
   1b590:	e0bffc17 	ldw	r2,-16(fp)
   1b594:	1885883a 	add	r2,r3,r2
   1b598:	10800404 	addi	r2,r2,16
   1b59c:	1007883a 	mov	r3,r2
   1b5a0:	e0bffb17 	ldw	r2,-20(fp)
   1b5a4:	1080038b 	ldhu	r2,14(r2)
   1b5a8:	10bfffcc 	andi	r2,r2,65535
   1b5ac:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
   1b5b0:	d0a75417 	ldw	r2,-25264(gp)
   1b5b4:	10c00a17 	ldw	r3,40(r2)
   1b5b8:	e0bffc17 	ldw	r2,-16(fp)
   1b5bc:	1885883a 	add	r2,r3,r2
   1b5c0:	10800484 	addi	r2,r2,18
   1b5c4:	1007883a 	mov	r3,r2
   1b5c8:	e0bffb17 	ldw	r2,-20(fp)
   1b5cc:	1080040b 	ldhu	r2,16(r2)
   1b5d0:	10bfffcc 	andi	r2,r2,65535
   1b5d4:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
   1b5d8:	d0a75417 	ldw	r2,-25264(gp)
   1b5dc:	10c00a17 	ldw	r3,40(r2)
   1b5e0:	e0bffc17 	ldw	r2,-16(fp)
   1b5e4:	1885883a 	add	r2,r3,r2
   1b5e8:	10800584 	addi	r2,r2,22
   1b5ec:	1007883a 	mov	r3,r2
   1b5f0:	e0bffb17 	ldw	r2,-20(fp)
   1b5f4:	1080048b 	ldhu	r2,18(r2)
   1b5f8:	10bfffcc 	andi	r2,r2,65535
   1b5fc:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
   1b600:	d0a75417 	ldw	r2,-25264(gp)
   1b604:	10c00a17 	ldw	r3,40(r2)
   1b608:	e0bffc17 	ldw	r2,-16(fp)
   1b60c:	1885883a 	add	r2,r3,r2
   1b610:	10800604 	addi	r2,r2,24
   1b614:	1007883a 	mov	r3,r2
   1b618:	e0bffb17 	ldw	r2,-20(fp)
   1b61c:	1080050b 	ldhu	r2,20(r2)
   1b620:	10bfffcc 	andi	r2,r2,65535
   1b624:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
   1b628:	d0a75417 	ldw	r2,-25264(gp)
   1b62c:	10c00a17 	ldw	r3,40(r2)
   1b630:	e0bffc17 	ldw	r2,-16(fp)
   1b634:	1885883a 	add	r2,r3,r2
   1b638:	10800684 	addi	r2,r2,26
   1b63c:	1007883a 	mov	r3,r2
   1b640:	e0bffb17 	ldw	r2,-20(fp)
   1b644:	1080058b 	ldhu	r2,22(r2)
   1b648:	10bfffcc 	andi	r2,r2,65535
   1b64c:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
   1b650:	d0a75417 	ldw	r2,-25264(gp)
   1b654:	10c00a17 	ldw	r3,40(r2)
   1b658:	e0bffc17 	ldw	r2,-16(fp)
   1b65c:	1885883a 	add	r2,r3,r2
   1b660:	10800704 	addi	r2,r2,28
   1b664:	1007883a 	mov	r3,r2
   1b668:	e0bffb17 	ldw	r2,-20(fp)
   1b66c:	10800617 	ldw	r2,24(r2)
   1b670:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
   1b674:	00800044 	movi	r2,1
   1b678:	d0a75515 	stw	r2,-25260(gp)
        result = true;
   1b67c:	00800044 	movi	r2,1
   1b680:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1b684:	e0bfff17 	ldw	r2,-4(fp)
}
   1b688:	e037883a 	mov	sp,fp
   1b68c:	dfc00117 	ldw	ra,4(sp)
   1b690:	df000017 	ldw	fp,0(sp)
   1b694:	dec00204 	addi	sp,sp,8
   1b698:	f800283a 	ret

0001b69c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   1b69c:	defff904 	addi	sp,sp,-28
   1b6a0:	dfc00615 	stw	ra,24(sp)
   1b6a4:	df000515 	stw	fp,20(sp)
   1b6a8:	df000504 	addi	fp,sp,20
   1b6ac:	e13ffb15 	stw	r4,-20(fp)
	bool result = false;
   1b6b0:	e03fff15 	stw	zero,-4(fp)
	int counter = 0;
   1b6b4:	e03ffe15 	stw	zero,-8(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   1b6b8:	e17ffb17 	ldw	r5,-20(fp)
   1b6bc:	0009883a 	mov	r4,zero
   1b6c0:	001ad900 	call	1ad90 <Read_Sector_Data>
   1b6c4:	e0bfff15 	stw	r2,-4(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
   1b6c8:	d0a75417 	ldw	r2,-25264(gp)
   1b6cc:	10800a17 	ldw	r2,40(r2)
   1b6d0:	10807f84 	addi	r2,r2,510
   1b6d4:	1080002b 	ldhuio	r2,0(r2)
   1b6d8:	10bfffcc 	andi	r2,r2,65535
   1b6dc:	e0bffc8d 	sth	r2,-14(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
   1b6e0:	e0bffc8f 	ldh	r2,-14(fp)
   1b6e4:	10ffffcc 	andi	r3,r2,65535
   1b6e8:	00aa9554 	movui	r2,43605
   1b6ec:	1881571e 	bne	r3,r2,1bc4c <Check_for_DOS_FAT+0x5b0>
   1b6f0:	e0bfff17 	ldw	r2,-4(fp)
   1b6f4:	10015526 	beq	r2,zero,1bc4c <Check_for_DOS_FAT+0x5b0>
	{
		int num_clusters = 0;
   1b6f8:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
   1b6fc:	d0a75417 	ldw	r2,-25264(gp)
   1b700:	10800a17 	ldw	r2,40(r2)
   1b704:	10800023 	ldbuio	r2,0(r2)
   1b708:	10803fcc 	andi	r2,r2,255
   1b70c:	1007883a 	mov	r3,r2
   1b710:	008000b4 	movhi	r2,2
   1b714:	10d67c05 	stb	r3,23024(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
   1b718:	d0a75417 	ldw	r2,-25264(gp)
   1b71c:	10800a17 	ldw	r2,40(r2)
   1b720:	10800044 	addi	r2,r2,1
   1b724:	10800023 	ldbuio	r2,0(r2)
   1b728:	10803fcc 	andi	r2,r2,255
   1b72c:	1007883a 	mov	r3,r2
   1b730:	008000b4 	movhi	r2,2
   1b734:	10d67c45 	stb	r3,23025(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
   1b738:	d0a75417 	ldw	r2,-25264(gp)
   1b73c:	10800a17 	ldw	r2,40(r2)
   1b740:	10800084 	addi	r2,r2,2
   1b744:	10800023 	ldbuio	r2,0(r2)
   1b748:	10803fcc 	andi	r2,r2,255
   1b74c:	1007883a 	mov	r3,r2
   1b750:	008000b4 	movhi	r2,2
   1b754:	10d67c85 	stb	r3,23026(r2)
		for (counter = 0; counter < 8; counter++)
   1b758:	e03ffe15 	stw	zero,-8(fp)
   1b75c:	00000f06 	br	1b79c <Check_for_DOS_FAT+0x100>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
   1b760:	d0a75417 	ldw	r2,-25264(gp)
   1b764:	10c00a17 	ldw	r3,40(r2)
   1b768:	e0bffe17 	ldw	r2,-8(fp)
   1b76c:	1885883a 	add	r2,r3,r2
   1b770:	108000c4 	addi	r2,r2,3
   1b774:	10800023 	ldbuio	r2,0(r2)
   1b778:	10803fcc 	andi	r2,r2,255
   1b77c:	1009883a 	mov	r4,r2
   1b780:	e0fffe17 	ldw	r3,-8(fp)
   1b784:	008000b4 	movhi	r2,2
   1b788:	1885883a 	add	r2,r3,r2
   1b78c:	11167cc5 	stb	r4,23027(r2)
		for (counter = 0; counter < 8; counter++)
   1b790:	e0bffe17 	ldw	r2,-8(fp)
   1b794:	10800044 	addi	r2,r2,1
   1b798:	e0bffe15 	stw	r2,-8(fp)
   1b79c:	e0bffe17 	ldw	r2,-8(fp)
   1b7a0:	10800210 	cmplti	r2,r2,8
   1b7a4:	103fee1e 	bne	r2,zero,1b760 <Check_for_DOS_FAT+0xc4>
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
   1b7a8:	d0a75417 	ldw	r2,-25264(gp)
   1b7ac:	10800a17 	ldw	r2,40(r2)
   1b7b0:	10800304 	addi	r2,r2,12
   1b7b4:	10800023 	ldbuio	r2,0(r2)
   1b7b8:	10803fcc 	andi	r2,r2,255
   1b7bc:	10803fcc 	andi	r2,r2,255
   1b7c0:	1004923a 	slli	r2,r2,8
   1b7c4:	1007883a 	mov	r3,r2
   1b7c8:	d0a75417 	ldw	r2,-25264(gp)
   1b7cc:	10800a17 	ldw	r2,40(r2)
   1b7d0:	108002c4 	addi	r2,r2,11
   1b7d4:	10800023 	ldbuio	r2,0(r2)
   1b7d8:	10803fcc 	andi	r2,r2,255
   1b7dc:	10803fcc 	andi	r2,r2,255
   1b7e0:	1080201c 	xori	r2,r2,128
   1b7e4:	10bfe004 	addi	r2,r2,-128
   1b7e8:	1884b03a 	or	r2,r3,r2
   1b7ec:	1007883a 	mov	r3,r2
   1b7f0:	008000b4 	movhi	r2,2
   1b7f4:	10d67f0d 	sth	r3,23036(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
   1b7f8:	d0a75417 	ldw	r2,-25264(gp)
   1b7fc:	10800a17 	ldw	r2,40(r2)
   1b800:	10800344 	addi	r2,r2,13
   1b804:	10800023 	ldbuio	r2,0(r2)
   1b808:	10803fcc 	andi	r2,r2,255
   1b80c:	1007883a 	mov	r3,r2
   1b810:	008000b4 	movhi	r2,2
   1b814:	10d67f85 	stb	r3,23038(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
   1b818:	d0a75417 	ldw	r2,-25264(gp)
   1b81c:	10800a17 	ldw	r2,40(r2)
   1b820:	10800384 	addi	r2,r2,14
   1b824:	1080002b 	ldhuio	r2,0(r2)
   1b828:	10bfffcc 	andi	r2,r2,65535
   1b82c:	1007883a 	mov	r3,r2
   1b830:	008000b4 	movhi	r2,2
   1b834:	10d6800d 	sth	r3,23040(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
   1b838:	d0a75417 	ldw	r2,-25264(gp)
   1b83c:	10800a17 	ldw	r2,40(r2)
   1b840:	10800404 	addi	r2,r2,16
   1b844:	10800023 	ldbuio	r2,0(r2)
   1b848:	10803fcc 	andi	r2,r2,255
   1b84c:	1007883a 	mov	r3,r2
   1b850:	008000b4 	movhi	r2,2
   1b854:	10d68085 	stb	r3,23042(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
   1b858:	d0a75417 	ldw	r2,-25264(gp)
   1b85c:	10800a17 	ldw	r2,40(r2)
   1b860:	10800484 	addi	r2,r2,18
   1b864:	10800023 	ldbuio	r2,0(r2)
   1b868:	10803fcc 	andi	r2,r2,255
   1b86c:	10803fcc 	andi	r2,r2,255
   1b870:	1004923a 	slli	r2,r2,8
   1b874:	1007883a 	mov	r3,r2
   1b878:	d0a75417 	ldw	r2,-25264(gp)
   1b87c:	10800a17 	ldw	r2,40(r2)
   1b880:	10800444 	addi	r2,r2,17
   1b884:	10800023 	ldbuio	r2,0(r2)
   1b888:	10803fcc 	andi	r2,r2,255
   1b88c:	10803fcc 	andi	r2,r2,255
   1b890:	1884b03a 	or	r2,r3,r2
   1b894:	1007883a 	mov	r3,r2
   1b898:	008000b4 	movhi	r2,2
   1b89c:	10d6810d 	sth	r3,23044(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
   1b8a0:	d0a75417 	ldw	r2,-25264(gp)
   1b8a4:	10800a17 	ldw	r2,40(r2)
   1b8a8:	10800504 	addi	r2,r2,20
   1b8ac:	10800023 	ldbuio	r2,0(r2)
   1b8b0:	10803fcc 	andi	r2,r2,255
   1b8b4:	10803fcc 	andi	r2,r2,255
   1b8b8:	1004923a 	slli	r2,r2,8
   1b8bc:	1007883a 	mov	r3,r2
   1b8c0:	d0a75417 	ldw	r2,-25264(gp)
   1b8c4:	10800a17 	ldw	r2,40(r2)
   1b8c8:	108004c4 	addi	r2,r2,19
   1b8cc:	10800023 	ldbuio	r2,0(r2)
   1b8d0:	10803fcc 	andi	r2,r2,255
   1b8d4:	10803fcc 	andi	r2,r2,255
   1b8d8:	1884b03a 	or	r2,r3,r2
   1b8dc:	1007883a 	mov	r3,r2
   1b8e0:	008000b4 	movhi	r2,2
   1b8e4:	10d6818d 	sth	r3,23046(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
   1b8e8:	d0a75417 	ldw	r2,-25264(gp)
   1b8ec:	10800a17 	ldw	r2,40(r2)
   1b8f0:	10800544 	addi	r2,r2,21
   1b8f4:	10800023 	ldbuio	r2,0(r2)
   1b8f8:	10803fcc 	andi	r2,r2,255
   1b8fc:	1007883a 	mov	r3,r2
   1b900:	008000b4 	movhi	r2,2
   1b904:	10d68205 	stb	r3,23048(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
   1b908:	d0a75417 	ldw	r2,-25264(gp)
   1b90c:	10800a17 	ldw	r2,40(r2)
   1b910:	10800584 	addi	r2,r2,22
   1b914:	1080002b 	ldhuio	r2,0(r2)
   1b918:	10bfffcc 	andi	r2,r2,65535
   1b91c:	1007883a 	mov	r3,r2
   1b920:	008000b4 	movhi	r2,2
   1b924:	10d6828d 	sth	r3,23050(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
   1b928:	d0a75417 	ldw	r2,-25264(gp)
   1b92c:	10800a17 	ldw	r2,40(r2)
   1b930:	10800604 	addi	r2,r2,24
   1b934:	1080002b 	ldhuio	r2,0(r2)
   1b938:	10bfffcc 	andi	r2,r2,65535
   1b93c:	1007883a 	mov	r3,r2
   1b940:	008000b4 	movhi	r2,2
   1b944:	10d6830d 	sth	r3,23052(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
   1b948:	d0a75417 	ldw	r2,-25264(gp)
   1b94c:	10800a17 	ldw	r2,40(r2)
   1b950:	10800684 	addi	r2,r2,26
   1b954:	1080002b 	ldhuio	r2,0(r2)
   1b958:	10bfffcc 	andi	r2,r2,65535
   1b95c:	1007883a 	mov	r3,r2
   1b960:	008000b4 	movhi	r2,2
   1b964:	10d6838d 	sth	r3,23054(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
   1b968:	d0a75417 	ldw	r2,-25264(gp)
   1b96c:	10800a17 	ldw	r2,40(r2)
   1b970:	10800704 	addi	r2,r2,28
   1b974:	10800037 	ldwio	r2,0(r2)
   1b978:	1007883a 	mov	r3,r2
   1b97c:	008000b4 	movhi	r2,2
   1b980:	10d68415 	stw	r3,23056(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
   1b984:	d0a75417 	ldw	r2,-25264(gp)
   1b988:	10800a17 	ldw	r2,40(r2)
   1b98c:	10800804 	addi	r2,r2,32
   1b990:	10800037 	ldwio	r2,0(r2)
   1b994:	1007883a 	mov	r3,r2
   1b998:	008000b4 	movhi	r2,2
   1b99c:	10d68515 	stw	r3,23060(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
   1b9a0:	d0a75417 	ldw	r2,-25264(gp)
   1b9a4:	10800a17 	ldw	r2,40(r2)
   1b9a8:	10800904 	addi	r2,r2,36
   1b9ac:	10800023 	ldbuio	r2,0(r2)
   1b9b0:	10803fcc 	andi	r2,r2,255
   1b9b4:	1007883a 	mov	r3,r2
   1b9b8:	008000b4 	movhi	r2,2
   1b9bc:	10d68605 	stb	r3,23064(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
   1b9c0:	d0a75417 	ldw	r2,-25264(gp)
   1b9c4:	10800a17 	ldw	r2,40(r2)
   1b9c8:	10800944 	addi	r2,r2,37
   1b9cc:	10800023 	ldbuio	r2,0(r2)
   1b9d0:	10803fcc 	andi	r2,r2,255
   1b9d4:	1007883a 	mov	r3,r2
   1b9d8:	008000b4 	movhi	r2,2
   1b9dc:	10d68645 	stb	r3,23065(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
   1b9e0:	d0a75417 	ldw	r2,-25264(gp)
   1b9e4:	10800a17 	ldw	r2,40(r2)
   1b9e8:	10800984 	addi	r2,r2,38
   1b9ec:	10800023 	ldbuio	r2,0(r2)
   1b9f0:	10803fcc 	andi	r2,r2,255
   1b9f4:	1007883a 	mov	r3,r2
   1b9f8:	008000b4 	movhi	r2,2
   1b9fc:	10d68685 	stb	r3,23066(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   1ba00:	008000b4 	movhi	r2,2
   1ba04:	1096800b 	ldhu	r2,23040(r2)
   1ba08:	10ffffcc 	andi	r3,r2,65535
   1ba0c:	008000b4 	movhi	r2,2
   1ba10:	10d68d15 	stw	r3,23092(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   1ba14:	008000b4 	movhi	r2,2
   1ba18:	10d68d17 	ldw	r3,23092(r2)
   1ba1c:	008000b4 	movhi	r2,2
   1ba20:	1096828b 	ldhu	r2,23050(r2)
   1ba24:	10bfffcc 	andi	r2,r2,65535
   1ba28:	1887883a 	add	r3,r3,r2
   1ba2c:	008000b4 	movhi	r2,2
   1ba30:	10d68e15 	stw	r3,23096(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   1ba34:	008000b4 	movhi	r2,2
   1ba38:	10d68e17 	ldw	r3,23096(r2)
   1ba3c:	008000b4 	movhi	r2,2
   1ba40:	1096828b 	ldhu	r2,23050(r2)
   1ba44:	10bfffcc 	andi	r2,r2,65535
   1ba48:	1887883a 	add	r3,r3,r2
   1ba4c:	008000b4 	movhi	r2,2
   1ba50:	10d68f15 	stw	r3,23100(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   1ba54:	008000b4 	movhi	r2,2
   1ba58:	10968f17 	ldw	r2,23100(r2)
   1ba5c:	00c000b4 	movhi	r3,2
   1ba60:	18d6810b 	ldhu	r3,23044(r3)
   1ba64:	18ffffcc 	andi	r3,r3,65535
   1ba68:	1808917a 	slli	r4,r3,5
   1ba6c:	00c000b4 	movhi	r3,2
   1ba70:	18d67f0b 	ldhu	r3,23036(r3)
   1ba74:	18ffffcc 	andi	r3,r3,65535
   1ba78:	20c7283a 	div	r3,r4,r3
   1ba7c:	10c7883a 	add	r3,r2,r3
   1ba80:	008000b4 	movhi	r2,2
   1ba84:	10d69015 	stw	r3,23104(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
   1ba88:	008000b4 	movhi	r2,2
   1ba8c:	1096818b 	ldhu	r2,23046(r2)
   1ba90:	10bfffcc 	andi	r2,r2,65535
   1ba94:	10000926 	beq	r2,zero,1babc <Check_for_DOS_FAT+0x420>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
   1ba98:	008000b4 	movhi	r2,2
   1ba9c:	1096818b 	ldhu	r2,23046(r2)
   1baa0:	10ffffcc 	andi	r3,r2,65535
   1baa4:	008000b4 	movhi	r2,2
   1baa8:	10967f83 	ldbu	r2,23038(r2)
   1baac:	10803fcc 	andi	r2,r2,255
   1bab0:	1885283a 	div	r2,r3,r2
   1bab4:	e0bffd15 	stw	r2,-12(fp)
   1bab8:	00000706 	br	1bad8 <Check_for_DOS_FAT+0x43c>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
   1babc:	008000b4 	movhi	r2,2
   1bac0:	10d68517 	ldw	r3,23060(r2)
   1bac4:	008000b4 	movhi	r2,2
   1bac8:	10967f83 	ldbu	r2,23038(r2)
   1bacc:	10803fcc 	andi	r2,r2,255
   1bad0:	1885203a 	divu	r2,r3,r2
   1bad4:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
   1bad8:	e0bffd17 	ldw	r2,-12(fp)
   1badc:	1083fdc8 	cmpgei	r2,r2,4087
   1bae0:	1000041e 	bne	r2,zero,1baf4 <Check_for_DOS_FAT+0x458>
		{
			boot_sector_data.bits_for_cluster_index = 12;
   1bae4:	00c00304 	movi	r3,12
   1bae8:	008000b4 	movhi	r2,2
   1baec:	10d68c85 	stb	r3,23090(r2)
   1baf0:	00000a06 	br	1bb1c <Check_for_DOS_FAT+0x480>
		}
		else if (num_clusters <= 65517)
   1baf4:	e0bffd17 	ldw	r2,-12(fp)
   1baf8:	00fffb54 	movui	r3,65517
   1bafc:	18800416 	blt	r3,r2,1bb10 <Check_for_DOS_FAT+0x474>
		{
			boot_sector_data.bits_for_cluster_index = 16;
   1bb00:	00c00404 	movi	r3,16
   1bb04:	008000b4 	movhi	r2,2
   1bb08:	10d68c85 	stb	r3,23090(r2)
   1bb0c:	00000306 	br	1bb1c <Check_for_DOS_FAT+0x480>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
   1bb10:	00c00804 	movi	r3,32
   1bb14:	008000b4 	movhi	r2,2
   1bb18:	10d68c85 	stb	r3,23090(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
   1bb1c:	e03ffe15 	stw	zero,-8(fp)
   1bb20:	00000f06 	br	1bb60 <Check_for_DOS_FAT+0x4c4>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
   1bb24:	d0a75417 	ldw	r2,-25264(gp)
   1bb28:	10c00a17 	ldw	r3,40(r2)
   1bb2c:	e0bffe17 	ldw	r2,-8(fp)
   1bb30:	1885883a 	add	r2,r3,r2
   1bb34:	108009c4 	addi	r2,r2,39
   1bb38:	10800023 	ldbuio	r2,0(r2)
   1bb3c:	10803fcc 	andi	r2,r2,255
   1bb40:	1009883a 	mov	r4,r2
   1bb44:	e0fffe17 	ldw	r3,-8(fp)
   1bb48:	008000b4 	movhi	r2,2
   1bb4c:	1885883a 	add	r2,r3,r2
   1bb50:	111686c5 	stb	r4,23067(r2)
		for (counter = 0; counter < 4; counter++)
   1bb54:	e0bffe17 	ldw	r2,-8(fp)
   1bb58:	10800044 	addi	r2,r2,1
   1bb5c:	e0bffe15 	stw	r2,-8(fp)
   1bb60:	e0bffe17 	ldw	r2,-8(fp)
   1bb64:	10800110 	cmplti	r2,r2,4
   1bb68:	103fee1e 	bne	r2,zero,1bb24 <Check_for_DOS_FAT+0x488>
		}    
		for (counter = 0; counter < 11; counter++)
   1bb6c:	e03ffe15 	stw	zero,-8(fp)
   1bb70:	00000f06 	br	1bbb0 <Check_for_DOS_FAT+0x514>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
   1bb74:	d0a75417 	ldw	r2,-25264(gp)
   1bb78:	10c00a17 	ldw	r3,40(r2)
   1bb7c:	e0bffe17 	ldw	r2,-8(fp)
   1bb80:	1885883a 	add	r2,r3,r2
   1bb84:	10800ac4 	addi	r2,r2,43
   1bb88:	10800023 	ldbuio	r2,0(r2)
   1bb8c:	10803fcc 	andi	r2,r2,255
   1bb90:	1009883a 	mov	r4,r2
   1bb94:	e0fffe17 	ldw	r3,-8(fp)
   1bb98:	008000b4 	movhi	r2,2
   1bb9c:	1885883a 	add	r2,r3,r2
   1bba0:	111687c5 	stb	r4,23071(r2)
		for (counter = 0; counter < 11; counter++)
   1bba4:	e0bffe17 	ldw	r2,-8(fp)
   1bba8:	10800044 	addi	r2,r2,1
   1bbac:	e0bffe15 	stw	r2,-8(fp)
   1bbb0:	e0bffe17 	ldw	r2,-8(fp)
   1bbb4:	108002d0 	cmplti	r2,r2,11
   1bbb8:	103fee1e 	bne	r2,zero,1bb74 <Check_for_DOS_FAT+0x4d8>
		}    
		for (counter = 0; counter < 8; counter++)
   1bbbc:	e03ffe15 	stw	zero,-8(fp)
   1bbc0:	00000f06 	br	1bc00 <Check_for_DOS_FAT+0x564>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
   1bbc4:	d0a75417 	ldw	r2,-25264(gp)
   1bbc8:	10c00a17 	ldw	r3,40(r2)
   1bbcc:	e0bffe17 	ldw	r2,-8(fp)
   1bbd0:	1885883a 	add	r2,r3,r2
   1bbd4:	10800d84 	addi	r2,r2,54
   1bbd8:	10800023 	ldbuio	r2,0(r2)
   1bbdc:	10803fcc 	andi	r2,r2,255
   1bbe0:	1009883a 	mov	r4,r2
   1bbe4:	e0fffe17 	ldw	r3,-8(fp)
   1bbe8:	008000b4 	movhi	r2,2
   1bbec:	1885883a 	add	r2,r3,r2
   1bbf0:	11168a85 	stb	r4,23082(r2)
		for (counter = 0; counter < 8; counter++)
   1bbf4:	e0bffe17 	ldw	r2,-8(fp)
   1bbf8:	10800044 	addi	r2,r2,1
   1bbfc:	e0bffe15 	stw	r2,-8(fp)
   1bc00:	e0bffe17 	ldw	r2,-8(fp)
   1bc04:	10800210 	cmplti	r2,r2,8
   1bc08:	103fee1e 	bne	r2,zero,1bbc4 <Check_for_DOS_FAT+0x528>
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1bc0c:	e03ffe15 	stw	zero,-8(fp)
   1bc10:	00000806 	br	1bc34 <Check_for_DOS_FAT+0x598>
		{
			active_files[counter].in_use = false;
   1bc14:	e0bffe17 	ldw	r2,-8(fp)
   1bc18:	100691ba 	slli	r3,r2,6
   1bc1c:	008000b4 	movhi	r2,2
   1bc20:	1885883a 	add	r2,r3,r2
   1bc24:	1016a015 	stw	zero,23168(r2)
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   1bc28:	e0bffe17 	ldw	r2,-8(fp)
   1bc2c:	10800044 	addi	r2,r2,1
   1bc30:	e0bffe15 	stw	r2,-8(fp)
   1bc34:	e0bffe17 	ldw	r2,-8(fp)
   1bc38:	10800510 	cmplti	r2,r2,20
   1bc3c:	103ff51e 	bne	r2,zero,1bc14 <Check_for_DOS_FAT+0x578>
		}
		result = true;
   1bc40:	00800044 	movi	r2,1
   1bc44:	e0bfff15 	stw	r2,-4(fp)
	{
   1bc48:	00000106 	br	1bc50 <Check_for_DOS_FAT+0x5b4>
	}
    else
    {
        result = false;
   1bc4c:	e03fff15 	stw	zero,-4(fp)
    }
	return result;
   1bc50:	e0bfff17 	ldw	r2,-4(fp)
}
   1bc54:	e037883a 	mov	sp,fp
   1bc58:	dfc00117 	ldw	ra,4(sp)
   1bc5c:	df000017 	ldw	fp,0(sp)
   1bc60:	dec00204 	addi	sp,sp,8
   1bc64:	f800283a 	ret

0001bc68 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   1bc68:	defffc04 	addi	sp,sp,-16
   1bc6c:	dfc00315 	stw	ra,12(sp)
   1bc70:	df000215 	stw	fp,8(sp)
   1bc74:	df000204 	addi	fp,sp,8
	bool result = false;
   1bc78:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   1bc7c:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1bc80:	10002c26 	beq	r2,zero,1bd34 <Look_for_FAT16+0xcc>
	{
		short int csd_file_format = *CSD_register_w0;
   1bc84:	d0a74e17 	ldw	r2,-25288(gp)
   1bc88:	1080000b 	ldhu	r2,0(r2)
   1bc8c:	e0bffe8d 	sth	r2,-6(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   1bc90:	d0275215 	stw	zero,-25272(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   1bc94:	d0275315 	stw	zero,-25268(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   1bc98:	e0bffe8f 	ldh	r2,-6(fp)
   1bc9c:	10002516 	blt	r2,zero,1bd34 <Look_for_FAT16+0xcc>
   1bca0:	e0bffe8b 	ldhu	r2,-6(fp)
   1bca4:	10bfffcc 	andi	r2,r2,65535
   1bca8:	1083000c 	andi	r2,r2,3072
   1bcac:	10830020 	cmpeqi	r2,r2,3072
   1bcb0:	1000201e 	bne	r2,zero,1bd34 <Look_for_FAT16+0xcc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   1bcb4:	e0bffe8b 	ldhu	r2,-6(fp)
   1bcb8:	10bfffcc 	andi	r2,r2,65535
   1bcbc:	1083000c 	andi	r2,r2,3072
   1bcc0:	10810018 	cmpnei	r2,r2,1024
   1bcc4:	1000031e 	bne	r2,zero,1bcd4 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   1bcc8:	0009883a 	mov	r4,zero
   1bccc:	001b69c0 	call	1b69c <Check_for_DOS_FAT>
   1bcd0:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   1bcd4:	e0bffe8b 	ldhu	r2,-6(fp)
   1bcd8:	10bfffcc 	andi	r2,r2,65535
   1bcdc:	1083000c 	andi	r2,r2,3072
   1bce0:	1000061e 	bne	r2,zero,1bcfc <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   1bce4:	001aff00 	call	1aff0 <Check_for_Master_Boot_Record>
   1bce8:	10000426 	beq	r2,zero,1bcfc <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   1bcec:	d0a75217 	ldw	r2,-25272(gp)
   1bcf0:	1009883a 	mov	r4,r2
   1bcf4:	001b69c0 	call	1b69c <Check_for_DOS_FAT>
   1bcf8:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
   1bcfc:	e0bfff17 	ldw	r2,-4(fp)
   1bd00:	10800058 	cmpnei	r2,r2,1
   1bd04:	10000b1e 	bne	r2,zero,1bd34 <Look_for_FAT16+0xcc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
   1bd08:	008000b4 	movhi	r2,2
   1bd0c:	10968c83 	ldbu	r2,23090(r2)
   1bd10:	10803fcc 	andi	r2,r2,255
   1bd14:	10800420 	cmpeqi	r2,r2,16
   1bd18:	1000021e 	bne	r2,zero,1bd24 <Look_for_FAT16+0xbc>
				{
					result = false;
   1bd1c:	e03fff15 	stw	zero,-4(fp)
   1bd20:	00000406 	br	1bd34 <Look_for_FAT16+0xcc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   1bd24:	008000b4 	movhi	r2,2
   1bd28:	1096818b 	ldhu	r2,23046(r2)
   1bd2c:	10bfffcc 	andi	r2,r2,65535
   1bd30:	d0a75315 	stw	r2,-25268(gp)
				}
			}
		}
	}
	return result;
   1bd34:	e0bfff17 	ldw	r2,-4(fp)
}
   1bd38:	e037883a 	mov	sp,fp
   1bd3c:	dfc00117 	ldw	ra,4(sp)
   1bd40:	df000017 	ldw	fp,0(sp)
   1bd44:	dec00204 	addi	sp,sp,8
   1bd48:	f800283a 	ret

0001bd4c <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   1bd4c:	defffb04 	addi	sp,sp,-20
   1bd50:	dfc00415 	stw	ra,16(sp)
   1bd54:	df000315 	stw	fp,12(sp)
   1bd58:	df000304 	addi	fp,sp,12
   1bd5c:	e13ffd15 	stw	r4,-12(fp)
    int index;
    int length = strlen(file_name);
   1bd60:	e13ffd17 	ldw	r4,-12(fp)
   1bd64:	000d8b00 	call	d8b0 <strlen>
   1bd68:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   1bd6c:	e03fff15 	stw	zero,-4(fp)
   1bd70:	00002006 	br	1bdf4 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   1bd74:	e0bfff17 	ldw	r2,-4(fp)
   1bd78:	e0fffd17 	ldw	r3,-12(fp)
   1bd7c:	1885883a 	add	r2,r3,r2
   1bd80:	10800003 	ldbu	r2,0(r2)
   1bd84:	10803fcc 	andi	r2,r2,255
   1bd88:	1080201c 	xori	r2,r2,128
   1bd8c:	10bfe004 	addi	r2,r2,-128
   1bd90:	10801850 	cmplti	r2,r2,97
   1bd94:	1000141e 	bne	r2,zero,1bde8 <filename_to_upper_case+0x9c>
   1bd98:	e0bfff17 	ldw	r2,-4(fp)
   1bd9c:	e0fffd17 	ldw	r3,-12(fp)
   1bda0:	1885883a 	add	r2,r3,r2
   1bda4:	10800003 	ldbu	r2,0(r2)
   1bda8:	10803fcc 	andi	r2,r2,255
   1bdac:	1080201c 	xori	r2,r2,128
   1bdb0:	10bfe004 	addi	r2,r2,-128
   1bdb4:	10801ec8 	cmpgei	r2,r2,123
   1bdb8:	10000b1e 	bne	r2,zero,1bde8 <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   1bdbc:	e0bfff17 	ldw	r2,-4(fp)
   1bdc0:	e0fffd17 	ldw	r3,-12(fp)
   1bdc4:	1885883a 	add	r2,r3,r2
   1bdc8:	10800003 	ldbu	r2,0(r2)
   1bdcc:	10bff804 	addi	r2,r2,-32
   1bdd0:	1009883a 	mov	r4,r2
   1bdd4:	e0bfff17 	ldw	r2,-4(fp)
   1bdd8:	e0fffd17 	ldw	r3,-12(fp)
   1bddc:	1885883a 	add	r2,r3,r2
   1bde0:	2007883a 	mov	r3,r4
   1bde4:	10c00005 	stb	r3,0(r2)
    for (index = 0; index < length; index++)
   1bde8:	e0bfff17 	ldw	r2,-4(fp)
   1bdec:	10800044 	addi	r2,r2,1
   1bdf0:	e0bfff15 	stw	r2,-4(fp)
   1bdf4:	e0ffff17 	ldw	r3,-4(fp)
   1bdf8:	e0bffe17 	ldw	r2,-8(fp)
   1bdfc:	18bfdd16 	blt	r3,r2,1bd74 <filename_to_upper_case+0x28>
        }
    }
}
   1be00:	0001883a 	nop
   1be04:	0001883a 	nop
   1be08:	e037883a 	mov	sp,fp
   1be0c:	dfc00117 	ldw	ra,4(sp)
   1be10:	df000017 	ldw	fp,0(sp)
   1be14:	dec00204 	addi	sp,sp,8
   1be18:	f800283a 	ret

0001be1c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   1be1c:	defff804 	addi	sp,sp,-32
   1be20:	dfc00715 	stw	ra,28(sp)
   1be24:	df000615 	stw	fp,24(sp)
   1be28:	df000604 	addi	fp,sp,24
   1be2c:	e13ffa15 	stw	r4,-24(fp)
    int length = strlen(file_name);
   1be30:	e13ffa17 	ldw	r4,-24(fp)
   1be34:	000d8b00 	call	d8b0 <strlen>
   1be38:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
   1be3c:	00bfffc4 	movi	r2,-1
   1be40:	e0bffe15 	stw	r2,-8(fp)
    int last_period = -1;
   1be44:	00bfffc4 	movi	r2,-1
   1be48:	e0bffd15 	stw	r2,-12(fp)
    bool result = true;
   1be4c:	00800044 	movi	r2,1
   1be50:	e0bffc15 	stw	r2,-16(fp)
    
    for(index = 0; index < length; index++)
   1be54:	e03fff15 	stw	zero,-4(fp)
   1be58:	00006d06 	br	1c010 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   1be5c:	e0bfff17 	ldw	r2,-4(fp)
   1be60:	e0fffa17 	ldw	r3,-24(fp)
   1be64:	1885883a 	add	r2,r3,r2
   1be68:	10800003 	ldbu	r2,0(r2)
   1be6c:	10803fcc 	andi	r2,r2,255
   1be70:	1080201c 	xori	r2,r2,128
   1be74:	10bfe004 	addi	r2,r2,-128
   1be78:	10800820 	cmpeqi	r2,r2,32
   1be7c:	10003e1e 	bne	r2,zero,1bf78 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1be80:	e0bfff17 	ldw	r2,-4(fp)
   1be84:	10bfffc4 	addi	r2,r2,-1
        if ((file_name[index] == ' ') ||
   1be88:	e0fffe17 	ldw	r3,-8(fp)
   1be8c:	1880121e 	bne	r3,r2,1bed8 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1be90:	e0bfff17 	ldw	r2,-4(fp)
   1be94:	e0fffa17 	ldw	r3,-24(fp)
   1be98:	1885883a 	add	r2,r3,r2
   1be9c:	10800003 	ldbu	r2,0(r2)
   1bea0:	10803fcc 	andi	r2,r2,255
   1bea4:	1080201c 	xori	r2,r2,128
   1bea8:	10bfe004 	addi	r2,r2,-128
   1beac:	10801720 	cmpeqi	r2,r2,92
   1beb0:	1000311e 	bne	r2,zero,1bf78 <check_file_name_for_FAT16_compliance+0x15c>
   1beb4:	e0bfff17 	ldw	r2,-4(fp)
   1beb8:	e0fffa17 	ldw	r3,-24(fp)
   1bebc:	1885883a 	add	r2,r3,r2
   1bec0:	10800003 	ldbu	r2,0(r2)
   1bec4:	10803fcc 	andi	r2,r2,255
   1bec8:	1080201c 	xori	r2,r2,128
   1becc:	10bfe004 	addi	r2,r2,-128
   1bed0:	10800be0 	cmpeqi	r2,r2,47
   1bed4:	1000281e 	bne	r2,zero,1bf78 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1bed8:	e0ffff17 	ldw	r3,-4(fp)
   1bedc:	e0bffd17 	ldw	r2,-12(fp)
   1bee0:	1885c83a 	sub	r2,r3,r2
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   1bee4:	10800258 	cmpnei	r2,r2,9
   1bee8:	1000091e 	bne	r2,zero,1bf10 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   1beec:	e0bfff17 	ldw	r2,-4(fp)
   1bef0:	e0fffa17 	ldw	r3,-24(fp)
   1bef4:	1885883a 	add	r2,r3,r2
   1bef8:	10800003 	ldbu	r2,0(r2)
   1befc:	10803fcc 	andi	r2,r2,255
   1bf00:	1080201c 	xori	r2,r2,128
   1bf04:	10bfe004 	addi	r2,r2,-128
   1bf08:	10800b98 	cmpnei	r2,r2,46
   1bf0c:	10001a1e 	bne	r2,zero,1bf78 <check_file_name_for_FAT16_compliance+0x15c>
   1bf10:	e0fffe17 	ldw	r3,-8(fp)
   1bf14:	e0bffd17 	ldw	r2,-12(fp)
   1bf18:	18801926 	beq	r3,r2,1bf80 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1bf1c:	e0ffff17 	ldw	r3,-4(fp)
   1bf20:	e0bffd17 	ldw	r2,-12(fp)
   1bf24:	1885c83a 	sub	r2,r3,r2
   1bf28:	10800110 	cmplti	r2,r2,4
   1bf2c:	1000141e 	bne	r2,zero,1bf80 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1bf30:	e0bfff17 	ldw	r2,-4(fp)
   1bf34:	e0fffa17 	ldw	r3,-24(fp)
   1bf38:	1885883a 	add	r2,r3,r2
   1bf3c:	10800003 	ldbu	r2,0(r2)
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   1bf40:	10803fcc 	andi	r2,r2,255
   1bf44:	1080201c 	xori	r2,r2,128
   1bf48:	10bfe004 	addi	r2,r2,-128
   1bf4c:	10801720 	cmpeqi	r2,r2,92
   1bf50:	10000b1e 	bne	r2,zero,1bf80 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   1bf54:	e0bfff17 	ldw	r2,-4(fp)
   1bf58:	e0fffa17 	ldw	r3,-24(fp)
   1bf5c:	1885883a 	add	r2,r3,r2
   1bf60:	10800003 	ldbu	r2,0(r2)
   1bf64:	10803fcc 	andi	r2,r2,255
   1bf68:	1080201c 	xori	r2,r2,128
   1bf6c:	10bfe004 	addi	r2,r2,-128
   1bf70:	10800be0 	cmpeqi	r2,r2,47
   1bf74:	1000021e 	bne	r2,zero,1bf80 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   1bf78:	e03ffc15 	stw	zero,-16(fp)
            break;
   1bf7c:	00002706 	br	1c01c <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   1bf80:	e0bfff17 	ldw	r2,-4(fp)
   1bf84:	e0fffa17 	ldw	r3,-24(fp)
   1bf88:	1885883a 	add	r2,r3,r2
   1bf8c:	10800003 	ldbu	r2,0(r2)
   1bf90:	10803fcc 	andi	r2,r2,255
   1bf94:	1080201c 	xori	r2,r2,128
   1bf98:	10bfe004 	addi	r2,r2,-128
   1bf9c:	10801720 	cmpeqi	r2,r2,92
   1bfa0:	1000091e 	bne	r2,zero,1bfc8 <check_file_name_for_FAT16_compliance+0x1ac>
   1bfa4:	e0bfff17 	ldw	r2,-4(fp)
   1bfa8:	e0fffa17 	ldw	r3,-24(fp)
   1bfac:	1885883a 	add	r2,r3,r2
   1bfb0:	10800003 	ldbu	r2,0(r2)
   1bfb4:	10803fcc 	andi	r2,r2,255
   1bfb8:	1080201c 	xori	r2,r2,128
   1bfbc:	10bfe004 	addi	r2,r2,-128
   1bfc0:	10800bd8 	cmpnei	r2,r2,47
   1bfc4:	1000041e 	bne	r2,zero,1bfd8 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   1bfc8:	e0bfff17 	ldw	r2,-4(fp)
   1bfcc:	e0bffd15 	stw	r2,-12(fp)
            last_dir_break_position = index;
   1bfd0:	e0bfff17 	ldw	r2,-4(fp)
   1bfd4:	e0bffe15 	stw	r2,-8(fp)
        }
        if (file_name[index] == '.')
   1bfd8:	e0bfff17 	ldw	r2,-4(fp)
   1bfdc:	e0fffa17 	ldw	r3,-24(fp)
   1bfe0:	1885883a 	add	r2,r3,r2
   1bfe4:	10800003 	ldbu	r2,0(r2)
   1bfe8:	10803fcc 	andi	r2,r2,255
   1bfec:	1080201c 	xori	r2,r2,128
   1bff0:	10bfe004 	addi	r2,r2,-128
   1bff4:	10800b98 	cmpnei	r2,r2,46
   1bff8:	1000021e 	bne	r2,zero,1c004 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   1bffc:	e0bfff17 	ldw	r2,-4(fp)
   1c000:	e0bffd15 	stw	r2,-12(fp)
    for(index = 0; index < length; index++)
   1c004:	e0bfff17 	ldw	r2,-4(fp)
   1c008:	10800044 	addi	r2,r2,1
   1c00c:	e0bfff15 	stw	r2,-4(fp)
   1c010:	e0ffff17 	ldw	r3,-4(fp)
   1c014:	e0bffb17 	ldw	r2,-20(fp)
   1c018:	18bf9016 	blt	r3,r2,1be5c <check_file_name_for_FAT16_compliance+0x40>
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   1c01c:	e0bffb17 	ldw	r2,-20(fp)
   1c020:	10bfffc4 	addi	r2,r2,-1
   1c024:	e0fffa17 	ldw	r3,-24(fp)
   1c028:	1885883a 	add	r2,r3,r2
   1c02c:	10800003 	ldbu	r2,0(r2)
   1c030:	10803fcc 	andi	r2,r2,255
   1c034:	1080201c 	xori	r2,r2,128
   1c038:	10bfe004 	addi	r2,r2,-128
   1c03c:	10801720 	cmpeqi	r2,r2,92
   1c040:	10000a1e 	bne	r2,zero,1c06c <check_file_name_for_FAT16_compliance+0x250>
   1c044:	e0bffb17 	ldw	r2,-20(fp)
   1c048:	10bfffc4 	addi	r2,r2,-1
   1c04c:	e0fffa17 	ldw	r3,-24(fp)
   1c050:	1885883a 	add	r2,r3,r2
   1c054:	10800003 	ldbu	r2,0(r2)
   1c058:	10803fcc 	andi	r2,r2,255
   1c05c:	1080201c 	xori	r2,r2,128
   1c060:	10bfe004 	addi	r2,r2,-128
   1c064:	10800bd8 	cmpnei	r2,r2,47
   1c068:	1000011e 	bne	r2,zero,1c070 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   1c06c:	e03ffc15 	stw	zero,-16(fp)
    }
    return result;
   1c070:	e0bffc17 	ldw	r2,-16(fp)
}
   1c074:	e037883a 	mov	sp,fp
   1c078:	dfc00117 	ldw	ra,4(sp)
   1c07c:	df000017 	ldw	fp,0(sp)
   1c080:	dec00204 	addi	sp,sp,8
   1c084:	f800283a 	ret

0001c088 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   1c088:	defffb04 	addi	sp,sp,-20
   1c08c:	dfc00415 	stw	ra,16(sp)
   1c090:	df000315 	stw	fp,12(sp)
   1c094:	df000304 	addi	fp,sp,12
   1c098:	e13ffd15 	stw	r4,-12(fp)
    int index = 0;
   1c09c:	e03fff15 	stw	zero,-4(fp)
    int length = strlen(name);
   1c0a0:	e13ffd17 	ldw	r4,-12(fp)
   1c0a4:	000d8b00 	call	d8b0 <strlen>
   1c0a8:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   1c0ac:	e03fff15 	stw	zero,-4(fp)
   1c0b0:	00001506 	br	1c108 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   1c0b4:	e0bfff17 	ldw	r2,-4(fp)
   1c0b8:	e0fffd17 	ldw	r3,-12(fp)
   1c0bc:	1885883a 	add	r2,r3,r2
   1c0c0:	10800003 	ldbu	r2,0(r2)
   1c0c4:	10803fcc 	andi	r2,r2,255
   1c0c8:	1080201c 	xori	r2,r2,128
   1c0cc:	10bfe004 	addi	r2,r2,-128
   1c0d0:	10801720 	cmpeqi	r2,r2,92
   1c0d4:	10000f1e 	bne	r2,zero,1c114 <get_dir_divider_location+0x8c>
   1c0d8:	e0bfff17 	ldw	r2,-4(fp)
   1c0dc:	e0fffd17 	ldw	r3,-12(fp)
   1c0e0:	1885883a 	add	r2,r3,r2
   1c0e4:	10800003 	ldbu	r2,0(r2)
   1c0e8:	10803fcc 	andi	r2,r2,255
   1c0ec:	1080201c 	xori	r2,r2,128
   1c0f0:	10bfe004 	addi	r2,r2,-128
   1c0f4:	10800be0 	cmpeqi	r2,r2,47
   1c0f8:	1000061e 	bne	r2,zero,1c114 <get_dir_divider_location+0x8c>
    for(index = 0; index < length; index++)
   1c0fc:	e0bfff17 	ldw	r2,-4(fp)
   1c100:	10800044 	addi	r2,r2,1
   1c104:	e0bfff15 	stw	r2,-4(fp)
   1c108:	e0ffff17 	ldw	r3,-4(fp)
   1c10c:	e0bffe17 	ldw	r2,-8(fp)
   1c110:	18bfe816 	blt	r3,r2,1c0b4 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
   1c114:	e0ffff17 	ldw	r3,-4(fp)
   1c118:	e0bffe17 	ldw	r2,-8(fp)
   1c11c:	1880021e 	bne	r3,r2,1c128 <get_dir_divider_location+0xa0>
    {
        index = -1;
   1c120:	00bfffc4 	movi	r2,-1
   1c124:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return index;
   1c128:	e0bfff17 	ldw	r2,-4(fp)
}
   1c12c:	e037883a 	mov	sp,fp
   1c130:	dfc00117 	ldw	ra,4(sp)
   1c134:	df000017 	ldw	fp,0(sp)
   1c138:	dec00204 	addi	sp,sp,8
   1c13c:	f800283a 	ret

0001c140 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   1c140:	defffa04 	addi	sp,sp,-24
   1c144:	df000515 	stw	fp,20(sp)
   1c148:	df000504 	addi	fp,sp,20
   1c14c:	e13ffd15 	stw	r4,-12(fp)
   1c150:	e17ffc15 	stw	r5,-16(fp)
   1c154:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
   1c158:	00800044 	movi	r2,1
   1c15c:	e0bfff15 	stw	r2,-4(fp)
	int index;

    for (index = 0; index < 8; index++)
   1c160:	e03ffe15 	stw	zero,-8(fp)
   1c164:	00004606 	br	1c280 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   1c168:	e0fffd17 	ldw	r3,-12(fp)
   1c16c:	e0bffe17 	ldw	r2,-8(fp)
   1c170:	1885883a 	add	r2,r3,r2
   1c174:	10800003 	ldbu	r2,0(r2)
   1c178:	10803fcc 	andi	r2,r2,255
   1c17c:	10801870 	cmpltui	r2,r2,97
   1c180:	1000101e 	bne	r2,zero,1c1c4 <match_file_record_to_name_ext+0x84>
   1c184:	e0fffd17 	ldw	r3,-12(fp)
   1c188:	e0bffe17 	ldw	r2,-8(fp)
   1c18c:	1885883a 	add	r2,r3,r2
   1c190:	10800003 	ldbu	r2,0(r2)
   1c194:	10803fcc 	andi	r2,r2,255
   1c198:	10801ee8 	cmpgeui	r2,r2,123
   1c19c:	1000091e 	bne	r2,zero,1c1c4 <match_file_record_to_name_ext+0x84>
   1c1a0:	e0fffd17 	ldw	r3,-12(fp)
   1c1a4:	e0bffe17 	ldw	r2,-8(fp)
   1c1a8:	1885883a 	add	r2,r3,r2
   1c1ac:	10800003 	ldbu	r2,0(r2)
   1c1b0:	10bff804 	addi	r2,r2,-32
   1c1b4:	10c03fcc 	andi	r3,r2,255
   1c1b8:	18c0201c 	xori	r3,r3,128
   1c1bc:	18ffe004 	addi	r3,r3,-128
   1c1c0:	00000706 	br	1c1e0 <match_file_record_to_name_ext+0xa0>
   1c1c4:	e0fffd17 	ldw	r3,-12(fp)
   1c1c8:	e0bffe17 	ldw	r2,-8(fp)
   1c1cc:	1885883a 	add	r2,r3,r2
   1c1d0:	10800003 	ldbu	r2,0(r2)
   1c1d4:	10c03fcc 	andi	r3,r2,255
   1c1d8:	18c0201c 	xori	r3,r3,128
   1c1dc:	18ffe004 	addi	r3,r3,-128
   1c1e0:	e0bffe17 	ldw	r2,-8(fp)
   1c1e4:	e13ffc17 	ldw	r4,-16(fp)
   1c1e8:	2085883a 	add	r2,r4,r2
   1c1ec:	10800003 	ldbu	r2,0(r2)
   1c1f0:	10803fcc 	andi	r2,r2,255
   1c1f4:	1080201c 	xori	r2,r2,128
   1c1f8:	10bfe004 	addi	r2,r2,-128
   1c1fc:	10801850 	cmplti	r2,r2,97
   1c200:	1000121e 	bne	r2,zero,1c24c <match_file_record_to_name_ext+0x10c>
   1c204:	e0bffe17 	ldw	r2,-8(fp)
   1c208:	e13ffc17 	ldw	r4,-16(fp)
   1c20c:	2085883a 	add	r2,r4,r2
   1c210:	10800003 	ldbu	r2,0(r2)
   1c214:	10803fcc 	andi	r2,r2,255
   1c218:	1080201c 	xori	r2,r2,128
   1c21c:	10bfe004 	addi	r2,r2,-128
   1c220:	10801ec8 	cmpgei	r2,r2,123
   1c224:	1000091e 	bne	r2,zero,1c24c <match_file_record_to_name_ext+0x10c>
   1c228:	e0bffe17 	ldw	r2,-8(fp)
   1c22c:	e13ffc17 	ldw	r4,-16(fp)
   1c230:	2085883a 	add	r2,r4,r2
   1c234:	10800003 	ldbu	r2,0(r2)
   1c238:	10bff804 	addi	r2,r2,-32
   1c23c:	10803fcc 	andi	r2,r2,255
   1c240:	1080201c 	xori	r2,r2,128
   1c244:	10bfe004 	addi	r2,r2,-128
   1c248:	00000706 	br	1c268 <match_file_record_to_name_ext+0x128>
   1c24c:	e0bffe17 	ldw	r2,-8(fp)
   1c250:	e13ffc17 	ldw	r4,-16(fp)
   1c254:	2085883a 	add	r2,r4,r2
   1c258:	10800003 	ldbu	r2,0(r2)
   1c25c:	10803fcc 	andi	r2,r2,255
   1c260:	1080201c 	xori	r2,r2,128
   1c264:	10bfe004 	addi	r2,r2,-128
   1c268:	18800226 	beq	r3,r2,1c274 <match_file_record_to_name_ext+0x134>
        {
            match = false;
   1c26c:	e03fff15 	stw	zero,-4(fp)
			break;
   1c270:	00000606 	br	1c28c <match_file_record_to_name_ext+0x14c>
    for (index = 0; index < 8; index++)
   1c274:	e0bffe17 	ldw	r2,-8(fp)
   1c278:	10800044 	addi	r2,r2,1
   1c27c:	e0bffe15 	stw	r2,-8(fp)
   1c280:	e0bffe17 	ldw	r2,-8(fp)
   1c284:	10800210 	cmplti	r2,r2,8
   1c288:	103fb71e 	bne	r2,zero,1c168 <match_file_record_to_name_ext+0x28>
        }
    }
    for (index = 0; index < 3; index++)
   1c28c:	e03ffe15 	stw	zero,-8(fp)
   1c290:	00004606 	br	1c3ac <match_file_record_to_name_ext+0x26c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   1c294:	e0fffd17 	ldw	r3,-12(fp)
   1c298:	e0bffe17 	ldw	r2,-8(fp)
   1c29c:	1885883a 	add	r2,r3,r2
   1c2a0:	10800203 	ldbu	r2,8(r2)
   1c2a4:	10803fcc 	andi	r2,r2,255
   1c2a8:	10801870 	cmpltui	r2,r2,97
   1c2ac:	1000101e 	bne	r2,zero,1c2f0 <match_file_record_to_name_ext+0x1b0>
   1c2b0:	e0fffd17 	ldw	r3,-12(fp)
   1c2b4:	e0bffe17 	ldw	r2,-8(fp)
   1c2b8:	1885883a 	add	r2,r3,r2
   1c2bc:	10800203 	ldbu	r2,8(r2)
   1c2c0:	10803fcc 	andi	r2,r2,255
   1c2c4:	10801ee8 	cmpgeui	r2,r2,123
   1c2c8:	1000091e 	bne	r2,zero,1c2f0 <match_file_record_to_name_ext+0x1b0>
   1c2cc:	e0fffd17 	ldw	r3,-12(fp)
   1c2d0:	e0bffe17 	ldw	r2,-8(fp)
   1c2d4:	1885883a 	add	r2,r3,r2
   1c2d8:	10800203 	ldbu	r2,8(r2)
   1c2dc:	10bff804 	addi	r2,r2,-32
   1c2e0:	10c03fcc 	andi	r3,r2,255
   1c2e4:	18c0201c 	xori	r3,r3,128
   1c2e8:	18ffe004 	addi	r3,r3,-128
   1c2ec:	00000706 	br	1c30c <match_file_record_to_name_ext+0x1cc>
   1c2f0:	e0fffd17 	ldw	r3,-12(fp)
   1c2f4:	e0bffe17 	ldw	r2,-8(fp)
   1c2f8:	1885883a 	add	r2,r3,r2
   1c2fc:	10800203 	ldbu	r2,8(r2)
   1c300:	10c03fcc 	andi	r3,r2,255
   1c304:	18c0201c 	xori	r3,r3,128
   1c308:	18ffe004 	addi	r3,r3,-128
   1c30c:	e0bffe17 	ldw	r2,-8(fp)
   1c310:	e13ffb17 	ldw	r4,-20(fp)
   1c314:	2085883a 	add	r2,r4,r2
   1c318:	10800003 	ldbu	r2,0(r2)
   1c31c:	10803fcc 	andi	r2,r2,255
   1c320:	1080201c 	xori	r2,r2,128
   1c324:	10bfe004 	addi	r2,r2,-128
   1c328:	10801850 	cmplti	r2,r2,97
   1c32c:	1000121e 	bne	r2,zero,1c378 <match_file_record_to_name_ext+0x238>
   1c330:	e0bffe17 	ldw	r2,-8(fp)
   1c334:	e13ffb17 	ldw	r4,-20(fp)
   1c338:	2085883a 	add	r2,r4,r2
   1c33c:	10800003 	ldbu	r2,0(r2)
   1c340:	10803fcc 	andi	r2,r2,255
   1c344:	1080201c 	xori	r2,r2,128
   1c348:	10bfe004 	addi	r2,r2,-128
   1c34c:	10801ec8 	cmpgei	r2,r2,123
   1c350:	1000091e 	bne	r2,zero,1c378 <match_file_record_to_name_ext+0x238>
   1c354:	e0bffe17 	ldw	r2,-8(fp)
   1c358:	e13ffb17 	ldw	r4,-20(fp)
   1c35c:	2085883a 	add	r2,r4,r2
   1c360:	10800003 	ldbu	r2,0(r2)
   1c364:	10bff804 	addi	r2,r2,-32
   1c368:	10803fcc 	andi	r2,r2,255
   1c36c:	1080201c 	xori	r2,r2,128
   1c370:	10bfe004 	addi	r2,r2,-128
   1c374:	00000706 	br	1c394 <match_file_record_to_name_ext+0x254>
   1c378:	e0bffe17 	ldw	r2,-8(fp)
   1c37c:	e13ffb17 	ldw	r4,-20(fp)
   1c380:	2085883a 	add	r2,r4,r2
   1c384:	10800003 	ldbu	r2,0(r2)
   1c388:	10803fcc 	andi	r2,r2,255
   1c38c:	1080201c 	xori	r2,r2,128
   1c390:	10bfe004 	addi	r2,r2,-128
   1c394:	18800226 	beq	r3,r2,1c3a0 <match_file_record_to_name_ext+0x260>
        {
            match = false;
   1c398:	e03fff15 	stw	zero,-4(fp)
			break;
   1c39c:	00000606 	br	1c3b8 <match_file_record_to_name_ext+0x278>
    for (index = 0; index < 3; index++)
   1c3a0:	e0bffe17 	ldw	r2,-8(fp)
   1c3a4:	10800044 	addi	r2,r2,1
   1c3a8:	e0bffe15 	stw	r2,-8(fp)
   1c3ac:	e0bffe17 	ldw	r2,-8(fp)
   1c3b0:	108000d0 	cmplti	r2,r2,3
   1c3b4:	103fb71e 	bne	r2,zero,1c294 <match_file_record_to_name_ext+0x154>
        }
    }
	return match;
   1c3b8:	e0bfff17 	ldw	r2,-4(fp)
}
   1c3bc:	e037883a 	mov	sp,fp
   1c3c0:	df000017 	ldw	fp,0(sp)
   1c3c4:	dec00104 	addi	sp,sp,4
   1c3c8:	f800283a 	ret

0001c3cc <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   1c3cc:	deffe704 	addi	sp,sp,-100
   1c3d0:	dfc01815 	stw	ra,96(sp)
   1c3d4:	df001715 	stw	fp,92(sp)
   1c3d8:	df001704 	addi	fp,sp,92
   1c3dc:	e13feb15 	stw	r4,-84(fp)
   1c3e0:	e17fea15 	stw	r5,-88(fp)
   1c3e4:	e1bfe915 	stw	r6,-92(fp)
    bool result = false;
   1c3e8:	e03fff15 	stw	zero,-4(fp)
    int home_dir_cluster = 0;
   1c3ec:	e03ffe15 	stw	zero,-8(fp)
    int location, index;
    int start_location = 0;
   1c3f0:	e03ffb15 	stw	zero,-20(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   1c3f4:	e13feb17 	ldw	r4,-84(fp)
   1c3f8:	001c0880 	call	1c088 <get_dir_divider_location>
   1c3fc:	e0bffd15 	stw	r2,-12(fp)
    while (location > 0)
   1c400:	00011d06 	br	1c878 <get_home_directory_cluster_for_file+0x4ac>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1c404:	00880834 	movhi	r2,8224
   1c408:	10880804 	addi	r2,r2,8224
   1c40c:	e0bfee15 	stw	r2,-72(fp)
   1c410:	00880834 	movhi	r2,8224
   1c414:	10880804 	addi	r2,r2,8224
   1c418:	e0bfef15 	stw	r2,-68(fp)
        char extension[3] = { ' ', ' ', ' ' };
   1c41c:	00800804 	movi	r2,32
   1c420:	e0bfed45 	stb	r2,-75(fp)
   1c424:	00800804 	movi	r2,32
   1c428:	e0bfed85 	stb	r2,-74(fp)
   1c42c:	00800804 	movi	r2,32
   1c430:	e0bfedc5 	stb	r2,-73(fp)
        int ext_index = -1;
   1c434:	00bfffc4 	movi	r2,-1
   1c438:	e0bffa15 	stw	r2,-24(fp)
        int new_cluster = home_dir_cluster;
   1c43c:	e0bffe17 	ldw	r2,-8(fp)
   1c440:	e0bff915 	stw	r2,-28(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   1c444:	e03ffc15 	stw	zero,-16(fp)
   1c448:	00002b06 	br	1c4f8 <get_home_directory_cluster_for_file+0x12c>
        {
            if (file_name[index+start_location] == '.')
   1c44c:	e0fffc17 	ldw	r3,-16(fp)
   1c450:	e0bffb17 	ldw	r2,-20(fp)
   1c454:	1885883a 	add	r2,r3,r2
   1c458:	1007883a 	mov	r3,r2
   1c45c:	e0bfeb17 	ldw	r2,-84(fp)
   1c460:	10c5883a 	add	r2,r2,r3
   1c464:	10800003 	ldbu	r2,0(r2)
   1c468:	10803fcc 	andi	r2,r2,255
   1c46c:	1080201c 	xori	r2,r2,128
   1c470:	10bfe004 	addi	r2,r2,-128
   1c474:	10800b98 	cmpnei	r2,r2,46
   1c478:	1000031e 	bne	r2,zero,1c488 <get_home_directory_cluster_for_file+0xbc>
            {
                ext_index = index;
   1c47c:	e0bffc17 	ldw	r2,-16(fp)
   1c480:	e0bffa15 	stw	r2,-24(fp)
   1c484:	00001906 	br	1c4ec <get_home_directory_cluster_for_file+0x120>
            }
            else if (ext_index < 0)
   1c488:	e0bffa17 	ldw	r2,-24(fp)
   1c48c:	10000b0e 	bge	r2,zero,1c4bc <get_home_directory_cluster_for_file+0xf0>
            {
                name[index] = file_name[index+start_location];
   1c490:	e0fffc17 	ldw	r3,-16(fp)
   1c494:	e0bffb17 	ldw	r2,-20(fp)
   1c498:	1885883a 	add	r2,r3,r2
   1c49c:	1007883a 	mov	r3,r2
   1c4a0:	e0bfeb17 	ldw	r2,-84(fp)
   1c4a4:	10c5883a 	add	r2,r2,r3
   1c4a8:	10c00003 	ldbu	r3,0(r2)
   1c4ac:	e0bffc17 	ldw	r2,-16(fp)
   1c4b0:	e085883a 	add	r2,fp,r2
   1c4b4:	10ffee05 	stb	r3,-72(r2)
   1c4b8:	00000c06 	br	1c4ec <get_home_directory_cluster_for_file+0x120>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   1c4bc:	e0fffc17 	ldw	r3,-16(fp)
   1c4c0:	e0bffb17 	ldw	r2,-20(fp)
   1c4c4:	1885883a 	add	r2,r3,r2
   1c4c8:	1007883a 	mov	r3,r2
   1c4cc:	e0bfeb17 	ldw	r2,-84(fp)
   1c4d0:	10c7883a 	add	r3,r2,r3
   1c4d4:	e13ffc17 	ldw	r4,-16(fp)
   1c4d8:	e0bffa17 	ldw	r2,-24(fp)
   1c4dc:	2085c83a 	sub	r2,r4,r2
   1c4e0:	18c00003 	ldbu	r3,0(r3)
   1c4e4:	e085883a 	add	r2,fp,r2
   1c4e8:	10ffed45 	stb	r3,-75(r2)
        for (index = 0; index < location; index++)
   1c4ec:	e0bffc17 	ldw	r2,-16(fp)
   1c4f0:	10800044 	addi	r2,r2,1
   1c4f4:	e0bffc15 	stw	r2,-16(fp)
   1c4f8:	e0fffc17 	ldw	r3,-16(fp)
   1c4fc:	e0bffd17 	ldw	r2,-12(fp)
   1c500:	18bfd216 	blt	r3,r2,1c44c <get_home_directory_cluster_for_file+0x80>
            }
        }
        
        if (home_dir_cluster == 0)
   1c504:	e0bffe17 	ldw	r2,-8(fp)
   1c508:	1000591e 	bne	r2,zero,1c670 <get_home_directory_cluster_for_file+0x2a4>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1c50c:	008000b4 	movhi	r2,2
   1c510:	1096810b 	ldhu	r2,23044(r2)
   1c514:	10bfffcc 	andi	r2,r2,65535
   1c518:	1006917a 	slli	r3,r2,5
   1c51c:	008000b4 	movhi	r2,2
   1c520:	10967f0b 	ldhu	r2,23036(r2)
   1c524:	10bfffcc 	andi	r2,r2,65535
   1c528:	1885283a 	div	r2,r3,r2
   1c52c:	e0bff115 	stw	r2,-60(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1c530:	e03ff815 	stw	zero,-32(fp)
   1c534:	00003a06 	br	1c620 <get_home_directory_cluster_for_file+0x254>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   1c538:	008000b4 	movhi	r2,2
   1c53c:	10d68f17 	ldw	r3,23100(r2)
   1c540:	e0bff817 	ldw	r2,-32(fp)
   1c544:	1885883a 	add	r2,r3,r2
   1c548:	1007883a 	mov	r3,r2
   1c54c:	d0a75217 	ldw	r2,-25272(gp)
   1c550:	100b883a 	mov	r5,r2
   1c554:	1809883a 	mov	r4,r3
   1c558:	001ad900 	call	1ad90 <Read_Sector_Data>
   1c55c:	10003426 	beq	r2,zero,1c630 <get_home_directory_cluster_for_file+0x264>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1c560:	e03ff715 	stw	zero,-36(fp)
   1c564:	00002506 	br	1c5fc <get_home_directory_cluster_for_file+0x230>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1c568:	e0bff717 	ldw	r2,-36(fp)
   1c56c:	1004917a 	slli	r2,r2,5
   1c570:	e0fff817 	ldw	r3,-32(fp)
   1c574:	180f883a 	mov	r7,r3
   1c578:	000d883a 	mov	r6,zero
   1c57c:	e17fe917 	ldw	r5,-92(fp)
   1c580:	1009883a 	mov	r4,r2
   1c584:	001b19c0 	call	1b19c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1c588:	e0bfe917 	ldw	r2,-92(fp)
   1c58c:	10800003 	ldbu	r2,0(r2)
   1c590:	10803fcc 	andi	r2,r2,255
   1c594:	10803960 	cmpeqi	r2,r2,229
   1c598:	1000151e 	bne	r2,zero,1c5f0 <get_home_directory_cluster_for_file+0x224>
   1c59c:	e0bfe917 	ldw	r2,-92(fp)
   1c5a0:	10800003 	ldbu	r2,0(r2)
   1c5a4:	10803fcc 	andi	r2,r2,255
   1c5a8:	10001126 	beq	r2,zero,1c5f0 <get_home_directory_cluster_for_file+0x224>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1c5ac:	e0ffed44 	addi	r3,fp,-75
   1c5b0:	e0bfee04 	addi	r2,fp,-72
   1c5b4:	180d883a 	mov	r6,r3
   1c5b8:	100b883a 	mov	r5,r2
   1c5bc:	e13fe917 	ldw	r4,-92(fp)
   1c5c0:	001c1400 	call	1c140 <match_file_record_to_name_ext>
   1c5c4:	e0bff015 	stw	r2,-64(fp)
                            if (match)
   1c5c8:	e0bff017 	ldw	r2,-64(fp)
   1c5cc:	10000826 	beq	r2,zero,1c5f0 <get_home_directory_cluster_for_file+0x224>
                            {
                                new_cluster = file_record->start_cluster_index;
   1c5d0:	e0bfe917 	ldw	r2,-92(fp)
   1c5d4:	1080058b 	ldhu	r2,22(r2)
   1c5d8:	10bfffcc 	andi	r2,r2,65535
   1c5dc:	e0bff915 	stw	r2,-28(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   1c5e0:	e0bfe917 	ldw	r2,-92(fp)
   1c5e4:	00c00044 	movi	r3,1
   1c5e8:	10c00a15 	stw	r3,40(r2)
                                break;
   1c5ec:	00000606 	br	1c608 <get_home_directory_cluster_for_file+0x23c>
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1c5f0:	e0bff717 	ldw	r2,-36(fp)
   1c5f4:	10800044 	addi	r2,r2,1
   1c5f8:	e0bff715 	stw	r2,-36(fp)
   1c5fc:	e0bff717 	ldw	r2,-36(fp)
   1c600:	10800410 	cmplti	r2,r2,16
   1c604:	103fd81e 	bne	r2,zero,1c568 <get_home_directory_cluster_for_file+0x19c>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   1c608:	e0fff917 	ldw	r3,-28(fp)
   1c60c:	e0bffe17 	ldw	r2,-8(fp)
   1c610:	1880091e 	bne	r3,r2,1c638 <get_home_directory_cluster_for_file+0x26c>
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1c614:	e0bff817 	ldw	r2,-32(fp)
   1c618:	10800044 	addi	r2,r2,1
   1c61c:	e0bff815 	stw	r2,-32(fp)
   1c620:	e0fff817 	ldw	r3,-32(fp)
   1c624:	e0bff117 	ldw	r2,-60(fp)
   1c628:	18bfc316 	blt	r3,r2,1c538 <get_home_directory_cluster_for_file+0x16c>
   1c62c:	00000306 	br	1c63c <get_home_directory_cluster_for_file+0x270>
                    break;
   1c630:	0001883a 	nop
   1c634:	00000106 	br	1c63c <get_home_directory_cluster_for_file+0x270>
                {
                    break;
   1c638:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
   1c63c:	e0fff917 	ldw	r3,-28(fp)
   1c640:	e0bffe17 	ldw	r2,-8(fp)
   1c644:	18800826 	beq	r3,r2,1c668 <get_home_directory_cluster_for_file+0x29c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1c648:	e0bff917 	ldw	r2,-28(fp)
   1c64c:	e0bffe15 	stw	r2,-8(fp)
                start_location = start_location+location+1;
   1c650:	e0fffb17 	ldw	r3,-20(fp)
   1c654:	e0bffd17 	ldw	r2,-12(fp)
   1c658:	1885883a 	add	r2,r3,r2
   1c65c:	10800044 	addi	r2,r2,1
   1c660:	e0bffb15 	stw	r2,-20(fp)
   1c664:	00007a06 	br	1c850 <get_home_directory_cluster_for_file+0x484>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1c668:	0005883a 	mov	r2,zero
   1c66c:	00008e06 	br	1c8a8 <get_home_directory_cluster_for_file+0x4dc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   1c670:	e0bffe17 	ldw	r2,-8(fp)
   1c674:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1c678:	e0bff417 	ldw	r2,-48(fp)
   1c67c:	10ffff84 	addi	r3,r2,-2
   1c680:	008000b4 	movhi	r2,2
   1c684:	10967f83 	ldbu	r2,23038(r2)
   1c688:	10803fcc 	andi	r2,r2,255
   1c68c:	1885383a 	mul	r2,r3,r2
   1c690:	1007883a 	mov	r3,r2
   1c694:	008000b4 	movhi	r2,2
   1c698:	10969017 	ldw	r2,23104(r2)
   1c69c:	1885883a 	add	r2,r3,r2
   1c6a0:	e0bff315 	stw	r2,-52(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1c6a4:	e03ff615 	stw	zero,-40(fp)
   1c6a8:	00003606 	br	1c784 <get_home_directory_cluster_for_file+0x3b8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1c6ac:	e0fff617 	ldw	r3,-40(fp)
   1c6b0:	e0bff317 	ldw	r2,-52(fp)
   1c6b4:	1885883a 	add	r2,r3,r2
   1c6b8:	d0e75217 	ldw	r3,-25272(gp)
   1c6bc:	180b883a 	mov	r5,r3
   1c6c0:	1009883a 	mov	r4,r2
   1c6c4:	001ad900 	call	1ad90 <Read_Sector_Data>
   1c6c8:	10003426 	beq	r2,zero,1c79c <get_home_directory_cluster_for_file+0x3d0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1c6cc:	e03ff515 	stw	zero,-44(fp)
   1c6d0:	00002306 	br	1c760 <get_home_directory_cluster_for_file+0x394>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1c6d4:	e0bff517 	ldw	r2,-44(fp)
   1c6d8:	1004917a 	slli	r2,r2,5
   1c6dc:	e0fff417 	ldw	r3,-48(fp)
   1c6e0:	e13ff617 	ldw	r4,-40(fp)
   1c6e4:	200f883a 	mov	r7,r4
   1c6e8:	180d883a 	mov	r6,r3
   1c6ec:	e17fe917 	ldw	r5,-92(fp)
   1c6f0:	1009883a 	mov	r4,r2
   1c6f4:	001b19c0 	call	1b19c <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1c6f8:	e0bfe917 	ldw	r2,-92(fp)
   1c6fc:	10800003 	ldbu	r2,0(r2)
   1c700:	10803fcc 	andi	r2,r2,255
   1c704:	10803960 	cmpeqi	r2,r2,229
   1c708:	1000121e 	bne	r2,zero,1c754 <get_home_directory_cluster_for_file+0x388>
   1c70c:	e0bfe917 	ldw	r2,-92(fp)
   1c710:	10800003 	ldbu	r2,0(r2)
   1c714:	10803fcc 	andi	r2,r2,255
   1c718:	10000e26 	beq	r2,zero,1c754 <get_home_directory_cluster_for_file+0x388>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   1c71c:	e0ffed44 	addi	r3,fp,-75
   1c720:	e0bfee04 	addi	r2,fp,-72
   1c724:	180d883a 	mov	r6,r3
   1c728:	100b883a 	mov	r5,r2
   1c72c:	e13fe917 	ldw	r4,-92(fp)
   1c730:	001c1400 	call	1c140 <match_file_record_to_name_ext>
   1c734:	e0bff215 	stw	r2,-56(fp)
                                if (match)
   1c738:	e0bff217 	ldw	r2,-56(fp)
   1c73c:	10000526 	beq	r2,zero,1c754 <get_home_directory_cluster_for_file+0x388>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   1c740:	e0bfe917 	ldw	r2,-92(fp)
   1c744:	1080058b 	ldhu	r2,22(r2)
   1c748:	10bfffcc 	andi	r2,r2,65535
   1c74c:	e0bff915 	stw	r2,-28(fp)
                                    break;
   1c750:	00000606 	br	1c76c <get_home_directory_cluster_for_file+0x3a0>
                        for (file_counter = 0; file_counter < 16; file_counter++)
   1c754:	e0bff517 	ldw	r2,-44(fp)
   1c758:	10800044 	addi	r2,r2,1
   1c75c:	e0bff515 	stw	r2,-44(fp)
   1c760:	e0bff517 	ldw	r2,-44(fp)
   1c764:	10800410 	cmplti	r2,r2,16
   1c768:	103fda1e 	bne	r2,zero,1c6d4 <get_home_directory_cluster_for_file+0x308>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   1c76c:	e0fff917 	ldw	r3,-28(fp)
   1c770:	e0bffe17 	ldw	r2,-8(fp)
   1c774:	18800b1e 	bne	r3,r2,1c7a4 <get_home_directory_cluster_for_file+0x3d8>
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1c778:	e0bff617 	ldw	r2,-40(fp)
   1c77c:	10800044 	addi	r2,r2,1
   1c780:	e0bff615 	stw	r2,-40(fp)
   1c784:	008000b4 	movhi	r2,2
   1c788:	10967f83 	ldbu	r2,23038(r2)
   1c78c:	10803fcc 	andi	r2,r2,255
   1c790:	e0fff617 	ldw	r3,-40(fp)
   1c794:	18bfc516 	blt	r3,r2,1c6ac <get_home_directory_cluster_for_file+0x2e0>
   1c798:	00000306 	br	1c7a8 <get_home_directory_cluster_for_file+0x3dc>
                        break;
   1c79c:	0001883a 	nop
   1c7a0:	00000106 	br	1c7a8 <get_home_directory_cluster_for_file+0x3dc>
                    {
                        break;
   1c7a4:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   1c7a8:	e0fff917 	ldw	r3,-28(fp)
   1c7ac:	e0bffe17 	ldw	r2,-8(fp)
   1c7b0:	1880141e 	bne	r3,r2,1c804 <get_home_directory_cluster_for_file+0x438>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   1c7b4:	e0bff917 	ldw	r2,-28(fp)
   1c7b8:	e0ffec84 	addi	r3,fp,-78
   1c7bc:	180b883a 	mov	r5,r3
   1c7c0:	1009883a 	mov	r4,r2
   1c7c4:	001ae680 	call	1ae68 <get_cluster_flag>
   1c7c8:	10000c26 	beq	r2,zero,1c7fc <get_home_directory_cluster_for_file+0x430>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1c7cc:	e0bfec8b 	ldhu	r2,-78(fp)
   1c7d0:	10bfffcc 	andi	r2,r2,65535
   1c7d4:	10fffe0c 	andi	r3,r2,65528
   1c7d8:	00bffe14 	movui	r2,65528
   1c7dc:	1880021e 	bne	r3,r2,1c7e8 <get_home_directory_cluster_for_file+0x41c>
						{
							return false;
   1c7e0:	0005883a 	mov	r2,zero
   1c7e4:	00003006 	br	1c8a8 <get_home_directory_cluster_for_file+0x4dc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   1c7e8:	e0bfec8b 	ldhu	r2,-78(fp)
   1c7ec:	10bfffcc 	andi	r2,r2,65535
   1c7f0:	10bffe0c 	andi	r2,r2,65528
   1c7f4:	e0bff915 	stw	r2,-28(fp)
   1c7f8:	00000206 	br	1c804 <get_home_directory_cluster_for_file+0x438>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   1c7fc:	0005883a 	mov	r2,zero
   1c800:	00002906 	br	1c8a8 <get_home_directory_cluster_for_file+0x4dc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   1c804:	e0bff417 	ldw	r2,-48(fp)
   1c808:	00fffdd4 	movui	r3,65527
   1c80c:	18800316 	blt	r3,r2,1c81c <get_home_directory_cluster_for_file+0x450>
   1c810:	e0fff917 	ldw	r3,-28(fp)
   1c814:	e0bffe17 	ldw	r2,-8(fp)
   1c818:	18bf9726 	beq	r3,r2,1c678 <get_home_directory_cluster_for_file+0x2ac>
            if (new_cluster != home_dir_cluster)
   1c81c:	e0fff917 	ldw	r3,-28(fp)
   1c820:	e0bffe17 	ldw	r2,-8(fp)
   1c824:	18800826 	beq	r3,r2,1c848 <get_home_directory_cluster_for_file+0x47c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   1c828:	e0bff917 	ldw	r2,-28(fp)
   1c82c:	e0bffe15 	stw	r2,-8(fp)
                start_location = start_location+location+1;
   1c830:	e0fffb17 	ldw	r3,-20(fp)
   1c834:	e0bffd17 	ldw	r2,-12(fp)
   1c838:	1885883a 	add	r2,r3,r2
   1c83c:	10800044 	addi	r2,r2,1
   1c840:	e0bffb15 	stw	r2,-20(fp)
   1c844:	00000206 	br	1c850 <get_home_directory_cluster_for_file+0x484>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   1c848:	0005883a 	mov	r2,zero
   1c84c:	00001606 	br	1c8a8 <get_home_directory_cluster_for_file+0x4dc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   1c850:	e0bffb17 	ldw	r2,-20(fp)
   1c854:	e0ffeb17 	ldw	r3,-84(fp)
   1c858:	1885883a 	add	r2,r3,r2
   1c85c:	1009883a 	mov	r4,r2
   1c860:	001c0880 	call	1c088 <get_dir_divider_location>
   1c864:	e0bffd15 	stw	r2,-12(fp)
        if (location < 0)
   1c868:	e0bffd17 	ldw	r2,-12(fp)
   1c86c:	1000020e 	bge	r2,zero,1c878 <get_home_directory_cluster_for_file+0x4ac>
        {
            // Directory has been located.
            result = true;
   1c870:	00800044 	movi	r2,1
   1c874:	e0bfff15 	stw	r2,-4(fp)
    while (location > 0)
   1c878:	e0bffd17 	ldw	r2,-12(fp)
   1c87c:	00bee116 	blt	zero,r2,1c404 <get_home_directory_cluster_for_file+0x38>
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   1c880:	e0bfea17 	ldw	r2,-88(fp)
   1c884:	e0fffe17 	ldw	r3,-8(fp)
   1c888:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   1c88c:	e0bffe17 	ldw	r2,-8(fp)
   1c890:	1000041e 	bne	r2,zero,1c8a4 <get_home_directory_cluster_for_file+0x4d8>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   1c894:	e0bfe917 	ldw	r2,-92(fp)
   1c898:	10000a15 	stw	zero,40(r2)
		result = true;
   1c89c:	00800044 	movi	r2,1
   1c8a0:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   1c8a4:	e0bfff17 	ldw	r2,-4(fp)
}
   1c8a8:	e037883a 	mov	sp,fp
   1c8ac:	dfc00117 	ldw	ra,4(sp)
   1c8b0:	df000017 	ldw	fp,0(sp)
   1c8b4:	dec00204 	addi	sp,sp,8
   1c8b8:	f800283a 	ret

0001c8bc <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   1c8bc:	deffe804 	addi	sp,sp,-96
   1c8c0:	dfc01715 	stw	ra,92(sp)
   1c8c4:	df001615 	stw	fp,88(sp)
   1c8c8:	df001604 	addi	fp,sp,88
   1c8cc:	e13fec15 	stw	r4,-80(fp)
   1c8d0:	e17feb15 	stw	r5,-84(fp)
   1c8d4:	e1bfea15 	stw	r6,-88(fp)
    int location = get_dir_divider_location( file_name );
   1c8d8:	e13feb17 	ldw	r4,-84(fp)
   1c8dc:	001c0880 	call	1c088 <get_dir_divider_location>
   1c8e0:	e0bfff15 	stw	r2,-4(fp)
    int last_dir_separator = 0;
   1c8e4:	e03ffe15 	stw	zero,-8(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   1c8e8:	00880834 	movhi	r2,8224
   1c8ec:	10880804 	addi	r2,r2,8224
   1c8f0:	e0bfef15 	stw	r2,-68(fp)
   1c8f4:	00880834 	movhi	r2,8224
   1c8f8:	10880804 	addi	r2,r2,8224
   1c8fc:	e0bff015 	stw	r2,-64(fp)
    char extension[3] = { ' ', ' ', ' ' };
   1c900:	00800804 	movi	r2,32
   1c904:	e0bfee45 	stb	r2,-71(fp)
   1c908:	00800804 	movi	r2,32
   1c90c:	e0bfee85 	stb	r2,-70(fp)
   1c910:	00800804 	movi	r2,32
   1c914:	e0bfeec5 	stb	r2,-69(fp)
    int ext_index = -1;
   1c918:	00bfffc4 	movi	r2,-1
   1c91c:	e0bffd15 	stw	r2,-12(fp)
    int cluster = directory_start_cluster;
   1c920:	e0bfec17 	ldw	r2,-80(fp)
   1c924:	e0bffc15 	stw	r2,-16(fp)
    int index;
	int length = strlen(file_name);
   1c928:	e13feb17 	ldw	r4,-84(fp)
   1c92c:	000d8b00 	call	d8b0 <strlen>
   1c930:	e0bff515 	stw	r2,-44(fp)
    bool result = false;
   1c934:	e03ffa15 	stw	zero,-24(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   1c938:	00000b06 	br	1c968 <find_file_in_directory+0xac>
    {
        last_dir_separator = last_dir_separator+location+1;
   1c93c:	e0fffe17 	ldw	r3,-8(fp)
   1c940:	e0bfff17 	ldw	r2,-4(fp)
   1c944:	1885883a 	add	r2,r3,r2
   1c948:	10800044 	addi	r2,r2,1
   1c94c:	e0bffe15 	stw	r2,-8(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   1c950:	e0bffe17 	ldw	r2,-8(fp)
   1c954:	e0ffeb17 	ldw	r3,-84(fp)
   1c958:	1885883a 	add	r2,r3,r2
   1c95c:	1009883a 	mov	r4,r2
   1c960:	001c0880 	call	1c088 <get_dir_divider_location>
   1c964:	e0bfff15 	stw	r2,-4(fp)
    while (location > 0)
   1c968:	e0bfff17 	ldw	r2,-4(fp)
   1c96c:	00bff316 	blt	zero,r2,1c93c <find_file_in_directory+0x80>
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   1c970:	e0bffe17 	ldw	r2,-8(fp)
   1c974:	e0bffb15 	stw	r2,-20(fp)
   1c978:	00002506 	br	1ca10 <find_file_in_directory+0x154>
    {
        if (file_name[index] == '.')
   1c97c:	e0bffb17 	ldw	r2,-20(fp)
   1c980:	e0ffeb17 	ldw	r3,-84(fp)
   1c984:	1885883a 	add	r2,r3,r2
   1c988:	10800003 	ldbu	r2,0(r2)
   1c98c:	10803fcc 	andi	r2,r2,255
   1c990:	1080201c 	xori	r2,r2,128
   1c994:	10bfe004 	addi	r2,r2,-128
   1c998:	10800b98 	cmpnei	r2,r2,46
   1c99c:	1000031e 	bne	r2,zero,1c9ac <find_file_in_directory+0xf0>
        {
            ext_index = index;
   1c9a0:	e0bffb17 	ldw	r2,-20(fp)
   1c9a4:	e0bffd15 	stw	r2,-12(fp)
   1c9a8:	00001606 	br	1ca04 <find_file_in_directory+0x148>
        }
        else if (ext_index < 0)
   1c9ac:	e0bffd17 	ldw	r2,-12(fp)
   1c9b0:	10000a0e 	bge	r2,zero,1c9dc <find_file_in_directory+0x120>
        {
            name[index-last_dir_separator] = file_name[index];
   1c9b4:	e0bffb17 	ldw	r2,-20(fp)
   1c9b8:	e0ffeb17 	ldw	r3,-84(fp)
   1c9bc:	1887883a 	add	r3,r3,r2
   1c9c0:	e13ffb17 	ldw	r4,-20(fp)
   1c9c4:	e0bffe17 	ldw	r2,-8(fp)
   1c9c8:	2085c83a 	sub	r2,r4,r2
   1c9cc:	18c00003 	ldbu	r3,0(r3)
   1c9d0:	e085883a 	add	r2,fp,r2
   1c9d4:	10ffef05 	stb	r3,-68(r2)
   1c9d8:	00000a06 	br	1ca04 <find_file_in_directory+0x148>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   1c9dc:	e0bffb17 	ldw	r2,-20(fp)
   1c9e0:	e0ffeb17 	ldw	r3,-84(fp)
   1c9e4:	1887883a 	add	r3,r3,r2
   1c9e8:	e13ffb17 	ldw	r4,-20(fp)
   1c9ec:	e0bffd17 	ldw	r2,-12(fp)
   1c9f0:	2085c83a 	sub	r2,r4,r2
   1c9f4:	10bfffc4 	addi	r2,r2,-1
   1c9f8:	18c00003 	ldbu	r3,0(r3)
   1c9fc:	e085883a 	add	r2,fp,r2
   1ca00:	10ffee45 	stb	r3,-71(r2)
    for (index = last_dir_separator; index < length; index++)
   1ca04:	e0bffb17 	ldw	r2,-20(fp)
   1ca08:	10800044 	addi	r2,r2,1
   1ca0c:	e0bffb15 	stw	r2,-20(fp)
   1ca10:	e0fffb17 	ldw	r3,-20(fp)
   1ca14:	e0bff517 	ldw	r2,-44(fp)
   1ca18:	18bfd816 	blt	r3,r2,1c97c <find_file_in_directory+0xc0>
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   1ca1c:	e0bfec17 	ldw	r2,-80(fp)
   1ca20:	1000431e 	bne	r2,zero,1cb30 <find_file_in_directory+0x274>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1ca24:	008000b4 	movhi	r2,2
   1ca28:	1096810b 	ldhu	r2,23044(r2)
   1ca2c:	10bfffcc 	andi	r2,r2,65535
   1ca30:	1006917a 	slli	r3,r2,5
   1ca34:	008000b4 	movhi	r2,2
   1ca38:	10967f0b 	ldhu	r2,23036(r2)
   1ca3c:	10bfffcc 	andi	r2,r2,65535
   1ca40:	1885283a 	div	r2,r3,r2
   1ca44:	e0bff215 	stw	r2,-56(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1ca48:	e03ff915 	stw	zero,-28(fp)
   1ca4c:	00003406 	br	1cb20 <find_file_in_directory+0x264>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1ca50:	008000b4 	movhi	r2,2
   1ca54:	10d68f17 	ldw	r3,23100(r2)
   1ca58:	e0bff917 	ldw	r2,-28(fp)
   1ca5c:	1885883a 	add	r2,r3,r2
   1ca60:	1007883a 	mov	r3,r2
   1ca64:	d0a75217 	ldw	r2,-25272(gp)
   1ca68:	100b883a 	mov	r5,r2
   1ca6c:	1809883a 	mov	r4,r3
   1ca70:	001ad900 	call	1ad90 <Read_Sector_Data>
   1ca74:	10009326 	beq	r2,zero,1ccc4 <find_file_in_directory+0x408>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1ca78:	e03ff815 	stw	zero,-32(fp)
   1ca7c:	00002006 	br	1cb00 <find_file_in_directory+0x244>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   1ca80:	e0bff817 	ldw	r2,-32(fp)
   1ca84:	1004917a 	slli	r2,r2,5
   1ca88:	e0fff917 	ldw	r3,-28(fp)
   1ca8c:	180f883a 	mov	r7,r3
   1ca90:	000d883a 	mov	r6,zero
   1ca94:	e17fea17 	ldw	r5,-88(fp)
   1ca98:	1009883a 	mov	r4,r2
   1ca9c:	001b19c0 	call	1b19c <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1caa0:	e0bfea17 	ldw	r2,-88(fp)
   1caa4:	10800003 	ldbu	r2,0(r2)
   1caa8:	10803fcc 	andi	r2,r2,255
   1caac:	10803960 	cmpeqi	r2,r2,229
   1cab0:	1000101e 	bne	r2,zero,1caf4 <find_file_in_directory+0x238>
   1cab4:	e0bfea17 	ldw	r2,-88(fp)
   1cab8:	10800003 	ldbu	r2,0(r2)
   1cabc:	10803fcc 	andi	r2,r2,255
   1cac0:	10000c26 	beq	r2,zero,1caf4 <find_file_in_directory+0x238>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   1cac4:	e0ffee44 	addi	r3,fp,-71
   1cac8:	e0bfef04 	addi	r2,fp,-68
   1cacc:	180d883a 	mov	r6,r3
   1cad0:	100b883a 	mov	r5,r2
   1cad4:	e13fea17 	ldw	r4,-88(fp)
   1cad8:	001c1400 	call	1c140 <match_file_record_to_name_ext>
   1cadc:	e0bff115 	stw	r2,-60(fp)

                        if (match)
   1cae0:	e0bff117 	ldw	r2,-60(fp)
   1cae4:	10000326 	beq	r2,zero,1caf4 <find_file_in_directory+0x238>
                        {
                            result = true;
   1cae8:	00800044 	movi	r2,1
   1caec:	e0bffa15 	stw	r2,-24(fp)
                            break;
   1caf0:	00000606 	br	1cb0c <find_file_in_directory+0x250>
                for (file_counter = 0; file_counter < 16; file_counter++)
   1caf4:	e0bff817 	ldw	r2,-32(fp)
   1caf8:	10800044 	addi	r2,r2,1
   1cafc:	e0bff815 	stw	r2,-32(fp)
   1cb00:	e0bff817 	ldw	r2,-32(fp)
   1cb04:	10800410 	cmplti	r2,r2,16
   1cb08:	103fdd1e 	bne	r2,zero,1ca80 <find_file_in_directory+0x1c4>
            }
            else
            {
                break;
            }
            if (result)
   1cb0c:	e0bffa17 	ldw	r2,-24(fp)
   1cb10:	10006e1e 	bne	r2,zero,1cccc <find_file_in_directory+0x410>
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1cb14:	e0bff917 	ldw	r2,-28(fp)
   1cb18:	10800044 	addi	r2,r2,1
   1cb1c:	e0bff915 	stw	r2,-28(fp)
   1cb20:	e0fff917 	ldw	r3,-28(fp)
   1cb24:	e0bff217 	ldw	r2,-56(fp)
   1cb28:	18bfc916 	blt	r3,r2,1ca50 <find_file_in_directory+0x194>
   1cb2c:	00006806 	br	1ccd0 <find_file_in_directory+0x414>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1cb30:	e0bffc17 	ldw	r2,-16(fp)
   1cb34:	10ffff84 	addi	r3,r2,-2
   1cb38:	008000b4 	movhi	r2,2
   1cb3c:	10967f83 	ldbu	r2,23038(r2)
   1cb40:	10803fcc 	andi	r2,r2,255
   1cb44:	1885383a 	mul	r2,r3,r2
   1cb48:	1007883a 	mov	r3,r2
   1cb4c:	008000b4 	movhi	r2,2
   1cb50:	10969017 	ldw	r2,23104(r2)
   1cb54:	1885883a 	add	r2,r3,r2
   1cb58:	e0bff415 	stw	r2,-48(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1cb5c:	e03ff715 	stw	zero,-36(fp)
   1cb60:	00003306 	br	1cc30 <find_file_in_directory+0x374>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1cb64:	e0fff717 	ldw	r3,-36(fp)
   1cb68:	e0bff417 	ldw	r2,-48(fp)
   1cb6c:	1885883a 	add	r2,r3,r2
   1cb70:	d0e75217 	ldw	r3,-25272(gp)
   1cb74:	180b883a 	mov	r5,r3
   1cb78:	1009883a 	mov	r4,r2
   1cb7c:	001ad900 	call	1ad90 <Read_Sector_Data>
   1cb80:	10003126 	beq	r2,zero,1cc48 <find_file_in_directory+0x38c>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1cb84:	e03ff615 	stw	zero,-40(fp)
   1cb88:	00002106 	br	1cc10 <find_file_in_directory+0x354>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   1cb8c:	e0bff617 	ldw	r2,-40(fp)
   1cb90:	1004917a 	slli	r2,r2,5
   1cb94:	e0fffc17 	ldw	r3,-16(fp)
   1cb98:	e13ff717 	ldw	r4,-36(fp)
   1cb9c:	200f883a 	mov	r7,r4
   1cba0:	180d883a 	mov	r6,r3
   1cba4:	e17fea17 	ldw	r5,-88(fp)
   1cba8:	1009883a 	mov	r4,r2
   1cbac:	001b19c0 	call	1b19c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   1cbb0:	e0bfea17 	ldw	r2,-88(fp)
   1cbb4:	10800003 	ldbu	r2,0(r2)
   1cbb8:	10803fcc 	andi	r2,r2,255
   1cbbc:	10803960 	cmpeqi	r2,r2,229
   1cbc0:	1000101e 	bne	r2,zero,1cc04 <find_file_in_directory+0x348>
   1cbc4:	e0bfea17 	ldw	r2,-88(fp)
   1cbc8:	10800003 	ldbu	r2,0(r2)
   1cbcc:	10803fcc 	andi	r2,r2,255
   1cbd0:	10000c26 	beq	r2,zero,1cc04 <find_file_in_directory+0x348>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   1cbd4:	e0ffee44 	addi	r3,fp,-71
   1cbd8:	e0bfef04 	addi	r2,fp,-68
   1cbdc:	180d883a 	mov	r6,r3
   1cbe0:	100b883a 	mov	r5,r2
   1cbe4:	e13fea17 	ldw	r4,-88(fp)
   1cbe8:	001c1400 	call	1c140 <match_file_record_to_name_ext>
   1cbec:	e0bff315 	stw	r2,-52(fp)

                            if (match)
   1cbf0:	e0bff317 	ldw	r2,-52(fp)
   1cbf4:	10000326 	beq	r2,zero,1cc04 <find_file_in_directory+0x348>
                            {                               
                                result = true;
   1cbf8:	00800044 	movi	r2,1
   1cbfc:	e0bffa15 	stw	r2,-24(fp)
                                break;
   1cc00:	00000606 	br	1cc1c <find_file_in_directory+0x360>
                    for (file_counter = 0; file_counter < 16; file_counter++)
   1cc04:	e0bff617 	ldw	r2,-40(fp)
   1cc08:	10800044 	addi	r2,r2,1
   1cc0c:	e0bff615 	stw	r2,-40(fp)
   1cc10:	e0bff617 	ldw	r2,-40(fp)
   1cc14:	10800410 	cmplti	r2,r2,16
   1cc18:	103fdc1e 	bne	r2,zero,1cb8c <find_file_in_directory+0x2d0>
                }
                else
                {
                    break;
                }
                if (result)
   1cc1c:	e0bffa17 	ldw	r2,-24(fp)
   1cc20:	10000b1e 	bne	r2,zero,1cc50 <find_file_in_directory+0x394>
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1cc24:	e0bff717 	ldw	r2,-36(fp)
   1cc28:	10800044 	addi	r2,r2,1
   1cc2c:	e0bff715 	stw	r2,-36(fp)
   1cc30:	008000b4 	movhi	r2,2
   1cc34:	10967f83 	ldbu	r2,23038(r2)
   1cc38:	10803fcc 	andi	r2,r2,255
   1cc3c:	e0fff717 	ldw	r3,-36(fp)
   1cc40:	18bfc816 	blt	r3,r2,1cb64 <find_file_in_directory+0x2a8>
   1cc44:	00000306 	br	1cc54 <find_file_in_directory+0x398>
                    break;
   1cc48:	0001883a 	nop
   1cc4c:	00000106 	br	1cc54 <find_file_in_directory+0x398>
                {
                    break;
   1cc50:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   1cc54:	e0bffa17 	ldw	r2,-24(fp)
   1cc58:	1000141e 	bne	r2,zero,1ccac <find_file_in_directory+0x3f0>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   1cc5c:	e0bffc17 	ldw	r2,-16(fp)
   1cc60:	e0ffed84 	addi	r3,fp,-74
   1cc64:	180b883a 	mov	r5,r3
   1cc68:	1009883a 	mov	r4,r2
   1cc6c:	001ae680 	call	1ae68 <get_cluster_flag>
   1cc70:	10000c26 	beq	r2,zero,1cca4 <find_file_in_directory+0x3e8>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1cc74:	e0bfed8b 	ldhu	r2,-74(fp)
   1cc78:	10bfffcc 	andi	r2,r2,65535
   1cc7c:	10fffe0c 	andi	r3,r2,65528
   1cc80:	00bffe14 	movui	r2,65528
   1cc84:	1880021e 	bne	r3,r2,1cc90 <find_file_in_directory+0x3d4>
					{
						return false;
   1cc88:	0005883a 	mov	r2,zero
   1cc8c:	00001106 	br	1ccd4 <find_file_in_directory+0x418>
					}
					cluster = (new_cluster & 0x0000fff8);
   1cc90:	e0bfed8b 	ldhu	r2,-74(fp)
   1cc94:	10bfffcc 	andi	r2,r2,65535
   1cc98:	10bffe0c 	andi	r2,r2,65528
   1cc9c:	e0bffc15 	stw	r2,-16(fp)
   1cca0:	00000206 	br	1ccac <find_file_in_directory+0x3f0>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   1cca4:	0005883a 	mov	r2,zero
   1cca8:	00000a06 	br	1ccd4 <find_file_in_directory+0x418>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   1ccac:	e0bffc17 	ldw	r2,-16(fp)
   1ccb0:	00fffdd4 	movui	r3,65527
   1ccb4:	18800616 	blt	r3,r2,1ccd0 <find_file_in_directory+0x414>
   1ccb8:	e0bffa17 	ldw	r2,-24(fp)
   1ccbc:	103f9c26 	beq	r2,zero,1cb30 <find_file_in_directory+0x274>
   1ccc0:	00000306 	br	1ccd0 <find_file_in_directory+0x414>
                break;
   1ccc4:	0001883a 	nop
   1ccc8:	00000106 	br	1ccd0 <find_file_in_directory+0x414>
                break;
   1cccc:	0001883a 	nop
    }
    
    return result;   
   1ccd0:	e0bffa17 	ldw	r2,-24(fp)
}
   1ccd4:	e037883a 	mov	sp,fp
   1ccd8:	dfc00117 	ldw	ra,4(sp)
   1ccdc:	df000017 	ldw	fp,0(sp)
   1cce0:	dec00204 	addi	sp,sp,8
   1cce4:	f800283a 	ret

0001cce8 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   1cce8:	defff504 	addi	sp,sp,-44
   1ccec:	dfc00a15 	stw	ra,40(sp)
   1ccf0:	df000915 	stw	fp,36(sp)
   1ccf4:	df000904 	addi	fp,sp,36
   1ccf8:	e13ff715 	stw	r4,-36(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   1ccfc:	008000b4 	movhi	r2,2
   1cd00:	10968d17 	ldw	r2,23092(r2)
   1cd04:	e0bfff15 	stw	r2,-4(fp)
    unsigned int cluster_index = 2;
   1cd08:	00800084 	movi	r2,2
   1cd0c:	e0bffe15 	stw	r2,-8(fp)
    short int cluster = -1;
   1cd10:	00bfffc4 	movi	r2,-1
   1cd14:	e0bffd8d 	sth	r2,-10(fp)
    bool result = false;
   1cd18:	e03ffc15 	stw	zero,-16(fp)
	unsigned max_cluster_index = 0;
   1cd1c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   1cd20:	008000b4 	movhi	r2,2
   1cd24:	10969017 	ldw	r2,23104(r2)
   1cd28:	e0bffa15 	stw	r2,-24(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   1cd2c:	008000b4 	movhi	r2,2
   1cd30:	1096818b 	ldhu	r2,23046(r2)
   1cd34:	10bfffcc 	andi	r2,r2,65535
   1cd38:	e0bff915 	stw	r2,-28(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   1cd3c:	008000b4 	movhi	r2,2
   1cd40:	10968517 	ldw	r2,23060(r2)
   1cd44:	e0bff815 	stw	r2,-32(fp)

	if (less_than_32 > greater_than_32)
   1cd48:	e0bff917 	ldw	r2,-28(fp)
   1cd4c:	e0fff817 	ldw	r3,-32(fp)
   1cd50:	18800a2e 	bgeu	r3,r2,1cd7c <find_first_empty_cluster+0x94>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1cd54:	e0fff917 	ldw	r3,-28(fp)
   1cd58:	e0bffa17 	ldw	r2,-24(fp)
   1cd5c:	1887c83a 	sub	r3,r3,r2
   1cd60:	008000b4 	movhi	r2,2
   1cd64:	10967f83 	ldbu	r2,23038(r2)
   1cd68:	10803fcc 	andi	r2,r2,255
   1cd6c:	1885203a 	divu	r2,r3,r2
   1cd70:	10800044 	addi	r2,r2,1
   1cd74:	e0bffb15 	stw	r2,-20(fp)
   1cd78:	00002906 	br	1ce20 <find_first_empty_cluster+0x138>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   1cd7c:	e0fff817 	ldw	r3,-32(fp)
   1cd80:	e0bffa17 	ldw	r2,-24(fp)
   1cd84:	1887c83a 	sub	r3,r3,r2
   1cd88:	008000b4 	movhi	r2,2
   1cd8c:	10967f83 	ldbu	r2,23038(r2)
   1cd90:	10803fcc 	andi	r2,r2,255
   1cd94:	1885203a 	divu	r2,r3,r2
   1cd98:	10800044 	addi	r2,r2,1
   1cd9c:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   1cda0:	00001f06 	br	1ce20 <find_first_empty_cluster+0x138>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   1cda4:	e0bfff17 	ldw	r2,-4(fp)
   1cda8:	d0e75217 	ldw	r3,-25272(gp)
   1cdac:	180b883a 	mov	r5,r3
   1cdb0:	1009883a 	mov	r4,r2
   1cdb4:	001ad900 	call	1ad90 <Read_Sector_Data>
   1cdb8:	10001426 	beq	r2,zero,1ce0c <find_first_empty_cluster+0x124>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   1cdbc:	e0bffe17 	ldw	r2,-8(fp)
   1cdc0:	10803fcc 	andi	r2,r2,255
   1cdc4:	1085883a 	add	r2,r2,r2
   1cdc8:	1007883a 	mov	r3,r2
   1cdcc:	d0a75417 	ldw	r2,-25264(gp)
   1cdd0:	10800a17 	ldw	r2,40(r2)
   1cdd4:	1885883a 	add	r2,r3,r2
   1cdd8:	1080002b 	ldhuio	r2,0(r2)
   1cddc:	10bfffcc 	andi	r2,r2,65535
   1cde0:	e0bffd8d 	sth	r2,-10(fp)
                if (cluster == 0)
   1cde4:	e0bffd8f 	ldh	r2,-10(fp)
   1cde8:	10000726 	beq	r2,zero,1ce08 <find_first_empty_cluster+0x120>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
   1cdec:	e0bffe17 	ldw	r2,-8(fp)
   1cdf0:	10800044 	addi	r2,r2,1
   1cdf4:	e0bffe15 	stw	r2,-8(fp)
                } 
            } while ((cluster_index % 256) != 0);
   1cdf8:	e0bffe17 	ldw	r2,-8(fp)
   1cdfc:	10803fcc 	andi	r2,r2,255
   1ce00:	103fee1e 	bne	r2,zero,1cdbc <find_first_empty_cluster+0xd4>
   1ce04:	00000106 	br	1ce0c <find_first_empty_cluster+0x124>
                    break;
   1ce08:	0001883a 	nop
        }
        if (cluster == 0)
   1ce0c:	e0bffd8f 	ldh	r2,-10(fp)
   1ce10:	10000826 	beq	r2,zero,1ce34 <find_first_empty_cluster+0x14c>
        {
            break;
        }
        sector++;
   1ce14:	e0bfff17 	ldw	r2,-4(fp)
   1ce18:	10800044 	addi	r2,r2,1
   1ce1c:	e0bfff15 	stw	r2,-4(fp)
    while (sector != boot_sector_data.second_fat_sector_offset)
   1ce20:	008000b4 	movhi	r2,2
   1ce24:	10968e17 	ldw	r2,23096(r2)
   1ce28:	e0ffff17 	ldw	r3,-4(fp)
   1ce2c:	18bfdd1e 	bne	r3,r2,1cda4 <find_first_empty_cluster+0xbc>
   1ce30:	00000106 	br	1ce38 <find_first_empty_cluster+0x150>
            break;
   1ce34:	0001883a 	nop
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   1ce38:	e0bffd8f 	ldh	r2,-10(fp)
   1ce3c:	1000081e 	bne	r2,zero,1ce60 <find_first_empty_cluster+0x178>
   1ce40:	e0bffd8f 	ldh	r2,-10(fp)
   1ce44:	e0fffb17 	ldw	r3,-20(fp)
   1ce48:	18800536 	bltu	r3,r2,1ce60 <find_first_empty_cluster+0x178>
    {
        *cluster_number = cluster_index;
   1ce4c:	e0bff717 	ldw	r2,-36(fp)
   1ce50:	e0fffe17 	ldw	r3,-8(fp)
   1ce54:	10c00015 	stw	r3,0(r2)
		result = true;
   1ce58:	00800044 	movi	r2,1
   1ce5c:	e0bffc15 	stw	r2,-16(fp)
    }
    return result;
   1ce60:	e0bffc17 	ldw	r2,-16(fp)
}
   1ce64:	e037883a 	mov	sp,fp
   1ce68:	dfc00117 	ldw	ra,4(sp)
   1ce6c:	df000017 	ldw	fp,0(sp)
   1ce70:	dec00204 	addi	sp,sp,8
   1ce74:	f800283a 	ret

0001ce78 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   1ce78:	defff604 	addi	sp,sp,-40
   1ce7c:	dfc00915 	stw	ra,36(sp)
   1ce80:	df000815 	stw	fp,32(sp)
   1ce84:	df000804 	addi	fp,sp,32
   1ce88:	e13ff815 	stw	r4,-32(fp)
    int result = -1;
   1ce8c:	00bfffc4 	movi	r2,-1
   1ce90:	e0bfff15 	stw	r2,-4(fp)
    int cluster = start_cluster_index;
   1ce94:	e0bff817 	ldw	r2,-32(fp)
   1ce98:	e0bffe15 	stw	r2,-8(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1ce9c:	e0bffe17 	ldw	r2,-8(fp)
   1cea0:	10ffff84 	addi	r3,r2,-2
   1cea4:	008000b4 	movhi	r2,2
   1cea8:	10967f83 	ldbu	r2,23038(r2)
   1ceac:	10803fcc 	andi	r2,r2,255
   1ceb0:	1885383a 	mul	r2,r3,r2
   1ceb4:	1007883a 	mov	r3,r2
   1ceb8:	008000b4 	movhi	r2,2
   1cebc:	10969017 	ldw	r2,23104(r2)
   1cec0:	1885883a 	add	r2,r3,r2
   1cec4:	e0bffb15 	stw	r2,-20(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1cec8:	e03ffd15 	stw	zero,-12(fp)
   1cecc:	00002c06 	br	1cf80 <find_first_empty_record_in_a_subdirectory+0x108>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1ced0:	e0fffd17 	ldw	r3,-12(fp)
   1ced4:	e0bffb17 	ldw	r2,-20(fp)
   1ced8:	1885883a 	add	r2,r3,r2
   1cedc:	d0e75217 	ldw	r3,-25272(gp)
   1cee0:	180b883a 	mov	r5,r3
   1cee4:	1009883a 	mov	r4,r2
   1cee8:	001ad900 	call	1ad90 <Read_Sector_Data>
   1ceec:	10002a26 	beq	r2,zero,1cf98 <find_first_empty_record_in_a_subdirectory+0x120>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   1cef0:	e03ffc15 	stw	zero,-16(fp)
   1cef4:	00001c06 	br	1cf68 <find_first_empty_record_in_a_subdirectory+0xf0>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1cef8:	e0bffc17 	ldw	r2,-16(fp)
   1cefc:	1004917a 	slli	r2,r2,5
   1cf00:	1007883a 	mov	r3,r2
   1cf04:	d0a75417 	ldw	r2,-25264(gp)
   1cf08:	10800a17 	ldw	r2,40(r2)
   1cf0c:	1885883a 	add	r2,r3,r2
   1cf10:	10800023 	ldbuio	r2,0(r2)
   1cf14:	10803fcc 	andi	r2,r2,255
   1cf18:	10803fcc 	andi	r2,r2,255
   1cf1c:	e0bffa8d 	sth	r2,-22(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   1cf20:	e0bffa8b 	ldhu	r2,-22(fp)
   1cf24:	10803960 	cmpeqi	r2,r2,229
   1cf28:	1000021e 	bne	r2,zero,1cf34 <find_first_empty_record_in_a_subdirectory+0xbc>
   1cf2c:	e0bffa8b 	ldhu	r2,-22(fp)
   1cf30:	10000a1e 	bne	r2,zero,1cf5c <find_first_empty_record_in_a_subdirectory+0xe4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   1cf34:	e0bffd17 	ldw	r2,-12(fp)
   1cf38:	1006913a 	slli	r3,r2,4
   1cf3c:	e0bffc17 	ldw	r2,-16(fp)
   1cf40:	1885883a 	add	r2,r3,r2
   1cf44:	1004943a 	slli	r2,r2,16
   1cf48:	e0fffe17 	ldw	r3,-8(fp)
   1cf4c:	1884b03a 	or	r2,r3,r2
   1cf50:	e0bfff15 	stw	r2,-4(fp)
                        return result;
   1cf54:	e0bfff17 	ldw	r2,-4(fp)
   1cf58:	00005206 	br	1d0a4 <find_first_empty_record_in_a_subdirectory+0x22c>
                for (file_counter = 0; file_counter < 16; file_counter++)
   1cf5c:	e0bffc17 	ldw	r2,-16(fp)
   1cf60:	10800044 	addi	r2,r2,1
   1cf64:	e0bffc15 	stw	r2,-16(fp)
   1cf68:	e0bffc17 	ldw	r2,-16(fp)
   1cf6c:	10800410 	cmplti	r2,r2,16
   1cf70:	103fe11e 	bne	r2,zero,1cef8 <find_first_empty_record_in_a_subdirectory+0x80>
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1cf74:	e0bffd17 	ldw	r2,-12(fp)
   1cf78:	10800044 	addi	r2,r2,1
   1cf7c:	e0bffd15 	stw	r2,-12(fp)
   1cf80:	008000b4 	movhi	r2,2
   1cf84:	10967f83 	ldbu	r2,23038(r2)
   1cf88:	10803fcc 	andi	r2,r2,255
   1cf8c:	e0fffd17 	ldw	r3,-12(fp)
   1cf90:	18bfcf16 	blt	r3,r2,1ced0 <find_first_empty_record_in_a_subdirectory+0x58>
   1cf94:	00000106 	br	1cf9c <find_first_empty_record_in_a_subdirectory+0x124>
                    }
                }
            }
            else
            {
                break;
   1cf98:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   1cf9c:	e0bfff17 	ldw	r2,-4(fp)
   1cfa0:	1000390e 	bge	r2,zero,1d088 <find_first_empty_record_in_a_subdirectory+0x210>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   1cfa4:	e0bffe17 	ldw	r2,-8(fp)
   1cfa8:	e0fffa04 	addi	r3,fp,-24
   1cfac:	180b883a 	mov	r5,r3
   1cfb0:	1009883a 	mov	r4,r2
   1cfb4:	001ae680 	call	1ae68 <get_cluster_flag>
   1cfb8:	10003126 	beq	r2,zero,1d080 <find_first_empty_record_in_a_subdirectory+0x208>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1cfbc:	e0bffa0b 	ldhu	r2,-24(fp)
   1cfc0:	10bfffcc 	andi	r2,r2,65535
   1cfc4:	10fffe0c 	andi	r3,r2,65528
   1cfc8:	00bffe14 	movui	r2,65528
   1cfcc:	18802e1e 	bne	r3,r2,1d088 <find_first_empty_record_in_a_subdirectory+0x210>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   1cfd0:	e0bff904 	addi	r2,fp,-28
   1cfd4:	1009883a 	mov	r4,r2
   1cfd8:	001cce80 	call	1cce8 <find_first_empty_cluster>
   1cfdc:	10002326 	beq	r2,zero,1d06c <find_first_empty_record_in_a_subdirectory+0x1f4>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1cfe0:	e0bffe17 	ldw	r2,-8(fp)
   1cfe4:	e0fff917 	ldw	r3,-28(fp)
   1cfe8:	18ffffcc 	andi	r3,r3,65535
   1cfec:	18e0001c 	xori	r3,r3,32768
   1cff0:	18e00004 	addi	r3,r3,-32768
   1cff4:	01800044 	movi	r6,1
   1cff8:	180b883a 	mov	r5,r3
   1cffc:	1009883a 	mov	r4,r2
   1d000:	001af180 	call	1af18 <mark_cluster>
   1d004:	10001926 	beq	r2,zero,1d06c <find_first_empty_record_in_a_subdirectory+0x1f4>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1d008:	e0bff917 	ldw	r2,-28(fp)
   1d00c:	01800044 	movi	r6,1
   1d010:	017fffc4 	movi	r5,-1
   1d014:	1009883a 	mov	r4,r2
   1d018:	001af180 	call	1af18 <mark_cluster>
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   1d01c:	10001326 	beq	r2,zero,1d06c <find_first_empty_record_in_a_subdirectory+0x1f4>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1d020:	e0bffe17 	ldw	r2,-8(fp)
   1d024:	e0fff917 	ldw	r3,-28(fp)
   1d028:	18ffffcc 	andi	r3,r3,65535
   1d02c:	18e0001c 	xori	r3,r3,32768
   1d030:	18e00004 	addi	r3,r3,-32768
   1d034:	000d883a 	mov	r6,zero
   1d038:	180b883a 	mov	r5,r3
   1d03c:	1009883a 	mov	r4,r2
   1d040:	001af180 	call	1af18 <mark_cluster>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   1d044:	10000926 	beq	r2,zero,1d06c <find_first_empty_record_in_a_subdirectory+0x1f4>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   1d048:	e0bff917 	ldw	r2,-28(fp)
   1d04c:	000d883a 	mov	r6,zero
   1d050:	017fffc4 	movi	r5,-1
   1d054:	1009883a 	mov	r4,r2
   1d058:	001af180 	call	1af18 <mark_cluster>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   1d05c:	10000326 	beq	r2,zero,1d06c <find_first_empty_record_in_a_subdirectory+0x1f4>
						{
							Save_Modified_Sector();
   1d060:	001ad440 	call	1ad44 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   1d064:	e0bff917 	ldw	r2,-28(fp)
   1d068:	e0bfff15 	stw	r2,-4(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   1d06c:	e0bffa0b 	ldhu	r2,-24(fp)
   1d070:	10bfffcc 	andi	r2,r2,65535
   1d074:	10bffe0c 	andi	r2,r2,65528
   1d078:	e0bffe15 	stw	r2,-8(fp)
   1d07c:	00000206 	br	1d088 <find_first_empty_record_in_a_subdirectory+0x210>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   1d080:	00bfffc4 	movi	r2,-1
   1d084:	e0bfff15 	stw	r2,-4(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   1d088:	e0bffe17 	ldw	r2,-8(fp)
   1d08c:	00fffdd4 	movui	r3,65527
   1d090:	18800316 	blt	r3,r2,1d0a0 <find_first_empty_record_in_a_subdirectory+0x228>
   1d094:	e0bfff17 	ldw	r2,-4(fp)
   1d098:	10bfffe0 	cmpeqi	r2,r2,-1
   1d09c:	103f7f1e 	bne	r2,zero,1ce9c <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
   1d0a0:	e0bfff17 	ldw	r2,-4(fp)
}
   1d0a4:	e037883a 	mov	sp,fp
   1d0a8:	dfc00117 	ldw	ra,4(sp)
   1d0ac:	df000017 	ldw	fp,0(sp)
   1d0b0:	dec00204 	addi	sp,sp,8
   1d0b4:	f800283a 	ret

0001d0b8 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   1d0b8:	defff904 	addi	sp,sp,-28
   1d0bc:	dfc00615 	stw	ra,24(sp)
   1d0c0:	df000515 	stw	fp,20(sp)
   1d0c4:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1d0c8:	008000b4 	movhi	r2,2
   1d0cc:	1096810b 	ldhu	r2,23044(r2)
   1d0d0:	10bfffcc 	andi	r2,r2,65535
   1d0d4:	1006917a 	slli	r3,r2,5
   1d0d8:	008000b4 	movhi	r2,2
   1d0dc:	10967f0b 	ldhu	r2,23036(r2)
   1d0e0:	10bfffcc 	andi	r2,r2,65535
   1d0e4:	1885283a 	div	r2,r3,r2
   1d0e8:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   1d0ec:	00bfffc4 	movi	r2,-1
   1d0f0:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1d0f4:	e03fff15 	stw	zero,-4(fp)
   1d0f8:	00002c06 	br	1d1ac <find_first_empty_record_in_root_directory+0xf4>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1d0fc:	008000b4 	movhi	r2,2
   1d100:	10d68f17 	ldw	r3,23100(r2)
   1d104:	e0bfff17 	ldw	r2,-4(fp)
   1d108:	1885883a 	add	r2,r3,r2
   1d10c:	1007883a 	mov	r3,r2
   1d110:	d0a75217 	ldw	r2,-25272(gp)
   1d114:	100b883a 	mov	r5,r2
   1d118:	1809883a 	mov	r4,r3
   1d11c:	001ad900 	call	1ad90 <Read_Sector_Data>
   1d120:	10002626 	beq	r2,zero,1d1bc <find_first_empty_record_in_root_directory+0x104>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   1d124:	e03ffe15 	stw	zero,-8(fp)
   1d128:	00001a06 	br	1d194 <find_first_empty_record_in_root_directory+0xdc>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   1d12c:	e0bffe17 	ldw	r2,-8(fp)
   1d130:	1004917a 	slli	r2,r2,5
   1d134:	1007883a 	mov	r3,r2
   1d138:	d0a75417 	ldw	r2,-25264(gp)
   1d13c:	10800a17 	ldw	r2,40(r2)
   1d140:	1885883a 	add	r2,r3,r2
   1d144:	10800023 	ldbuio	r2,0(r2)
   1d148:	10803fcc 	andi	r2,r2,255
   1d14c:	10803fcc 	andi	r2,r2,255
   1d150:	e0bffb8d 	sth	r2,-18(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   1d154:	e0bffb8b 	ldhu	r2,-18(fp)
   1d158:	10803960 	cmpeqi	r2,r2,229
   1d15c:	1000021e 	bne	r2,zero,1d168 <find_first_empty_record_in_root_directory+0xb0>
   1d160:	e0bffb8b 	ldhu	r2,-18(fp)
   1d164:	1000081e 	bne	r2,zero,1d188 <find_first_empty_record_in_root_directory+0xd0>
                {
                    result = (sector_index*16 + file_counter) << 16;
   1d168:	e0bfff17 	ldw	r2,-4(fp)
   1d16c:	1006913a 	slli	r3,r2,4
   1d170:	e0bffe17 	ldw	r2,-8(fp)
   1d174:	1885883a 	add	r2,r3,r2
   1d178:	1004943a 	slli	r2,r2,16
   1d17c:	e0bffc15 	stw	r2,-16(fp)
                    return result;
   1d180:	e0bffc17 	ldw	r2,-16(fp)
   1d184:	00000f06 	br	1d1c4 <find_first_empty_record_in_root_directory+0x10c>
            for (file_counter = 0; file_counter < 16; file_counter++)
   1d188:	e0bffe17 	ldw	r2,-8(fp)
   1d18c:	10800044 	addi	r2,r2,1
   1d190:	e0bffe15 	stw	r2,-8(fp)
   1d194:	e0bffe17 	ldw	r2,-8(fp)
   1d198:	10800410 	cmplti	r2,r2,16
   1d19c:	103fe31e 	bne	r2,zero,1d12c <find_first_empty_record_in_root_directory+0x74>
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   1d1a0:	e0bfff17 	ldw	r2,-4(fp)
   1d1a4:	10800044 	addi	r2,r2,1
   1d1a8:	e0bfff15 	stw	r2,-4(fp)
   1d1ac:	e0ffff17 	ldw	r3,-4(fp)
   1d1b0:	e0bffd17 	ldw	r2,-12(fp)
   1d1b4:	18bfd116 	blt	r3,r2,1d0fc <find_first_empty_record_in_root_directory+0x44>
   1d1b8:	00000106 	br	1d1c0 <find_first_empty_record_in_root_directory+0x108>
                }
            }
        }
        else
        {
            break;
   1d1bc:	0001883a 	nop
        }
    }
    return result;
   1d1c0:	e0bffc17 	ldw	r2,-16(fp)
}
   1d1c4:	e037883a 	mov	sp,fp
   1d1c8:	dfc00117 	ldw	ra,4(sp)
   1d1cc:	df000017 	ldw	fp,0(sp)
   1d1d0:	dec00204 	addi	sp,sp,8
   1d1d4:	f800283a 	ret

0001d1d8 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   1d1d8:	defffa04 	addi	sp,sp,-24
   1d1dc:	df000515 	stw	fp,20(sp)
   1d1e0:	df000504 	addi	fp,sp,20
   1d1e4:	e13ffd15 	stw	r4,-12(fp)
   1d1e8:	e17ffc15 	stw	r5,-16(fp)
   1d1ec:	e1bffb15 	stw	r6,-20(fp)
    int counter;
    int local = 0;
   1d1f0:	e03ffe15 	stw	zero,-8(fp)
    
    for(counter = 0; counter < 8; counter++)
   1d1f4:	e03fff15 	stw	zero,-4(fp)
   1d1f8:	00002506 	br	1d290 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   1d1fc:	e0bffe17 	ldw	r2,-8(fp)
   1d200:	e0fffd17 	ldw	r3,-12(fp)
   1d204:	1885883a 	add	r2,r3,r2
   1d208:	10800003 	ldbu	r2,0(r2)
   1d20c:	10803fcc 	andi	r2,r2,255
   1d210:	1080201c 	xori	r2,r2,128
   1d214:	10bfe004 	addi	r2,r2,-128
   1d218:	10800ba0 	cmpeqi	r2,r2,46
   1d21c:	1000141e 	bne	r2,zero,1d270 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   1d220:	e0bffe17 	ldw	r2,-8(fp)
   1d224:	e0fffd17 	ldw	r3,-12(fp)
   1d228:	1887883a 	add	r3,r3,r2
   1d22c:	e0bfff17 	ldw	r2,-4(fp)
   1d230:	e13ffc17 	ldw	r4,-16(fp)
   1d234:	2085883a 	add	r2,r4,r2
   1d238:	18c00003 	ldbu	r3,0(r3)
   1d23c:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   1d240:	e0bffe17 	ldw	r2,-8(fp)
   1d244:	e0fffd17 	ldw	r3,-12(fp)
   1d248:	1885883a 	add	r2,r3,r2
   1d24c:	10800003 	ldbu	r2,0(r2)
   1d250:	10803fcc 	andi	r2,r2,255
   1d254:	1080201c 	xori	r2,r2,128
   1d258:	10bfe004 	addi	r2,r2,-128
   1d25c:	10000926 	beq	r2,zero,1d284 <convert_filename_to_name_extension+0xac>
   1d260:	e0bffe17 	ldw	r2,-8(fp)
   1d264:	10800044 	addi	r2,r2,1
   1d268:	e0bffe15 	stw	r2,-8(fp)
   1d26c:	00000506 	br	1d284 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   1d270:	e0bfff17 	ldw	r2,-4(fp)
   1d274:	e0fffc17 	ldw	r3,-16(fp)
   1d278:	1885883a 	add	r2,r3,r2
   1d27c:	00c00804 	movi	r3,32
   1d280:	10c00005 	stb	r3,0(r2)
    for(counter = 0; counter < 8; counter++)
   1d284:	e0bfff17 	ldw	r2,-4(fp)
   1d288:	10800044 	addi	r2,r2,1
   1d28c:	e0bfff15 	stw	r2,-4(fp)
   1d290:	e0bfff17 	ldw	r2,-4(fp)
   1d294:	10800210 	cmplti	r2,r2,8
   1d298:	103fd81e 	bne	r2,zero,1d1fc <convert_filename_to_name_extension+0x24>
        }
    }
    if (filename[local] == '.') local++;
   1d29c:	e0bffe17 	ldw	r2,-8(fp)
   1d2a0:	e0fffd17 	ldw	r3,-12(fp)
   1d2a4:	1885883a 	add	r2,r3,r2
   1d2a8:	10800003 	ldbu	r2,0(r2)
   1d2ac:	10803fcc 	andi	r2,r2,255
   1d2b0:	1080201c 	xori	r2,r2,128
   1d2b4:	10bfe004 	addi	r2,r2,-128
   1d2b8:	10800b98 	cmpnei	r2,r2,46
   1d2bc:	1000031e 	bne	r2,zero,1d2cc <convert_filename_to_name_extension+0xf4>
   1d2c0:	e0bffe17 	ldw	r2,-8(fp)
   1d2c4:	10800044 	addi	r2,r2,1
   1d2c8:	e0bffe15 	stw	r2,-8(fp)
    for(counter = 0; counter < 3; counter++)
   1d2cc:	e03fff15 	stw	zero,-4(fp)
   1d2d0:	00001c06 	br	1d344 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   1d2d4:	e0bffe17 	ldw	r2,-8(fp)
   1d2d8:	e0fffd17 	ldw	r3,-12(fp)
   1d2dc:	1885883a 	add	r2,r3,r2
   1d2e0:	10800003 	ldbu	r2,0(r2)
   1d2e4:	10803fcc 	andi	r2,r2,255
   1d2e8:	1080201c 	xori	r2,r2,128
   1d2ec:	10bfe004 	addi	r2,r2,-128
   1d2f0:	10000c26 	beq	r2,zero,1d324 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   1d2f4:	e0bffe17 	ldw	r2,-8(fp)
   1d2f8:	e0fffd17 	ldw	r3,-12(fp)
   1d2fc:	1887883a 	add	r3,r3,r2
   1d300:	e0bfff17 	ldw	r2,-4(fp)
   1d304:	e13ffb17 	ldw	r4,-20(fp)
   1d308:	2085883a 	add	r2,r4,r2
   1d30c:	18c00003 	ldbu	r3,0(r3)
   1d310:	10c00005 	stb	r3,0(r2)
            local++;
   1d314:	e0bffe17 	ldw	r2,-8(fp)
   1d318:	10800044 	addi	r2,r2,1
   1d31c:	e0bffe15 	stw	r2,-8(fp)
   1d320:	00000506 	br	1d338 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   1d324:	e0bfff17 	ldw	r2,-4(fp)
   1d328:	e0fffb17 	ldw	r3,-20(fp)
   1d32c:	1885883a 	add	r2,r3,r2
   1d330:	00c00804 	movi	r3,32
   1d334:	10c00005 	stb	r3,0(r2)
    for(counter = 0; counter < 3; counter++)
   1d338:	e0bfff17 	ldw	r2,-4(fp)
   1d33c:	10800044 	addi	r2,r2,1
   1d340:	e0bfff15 	stw	r2,-4(fp)
   1d344:	e0bfff17 	ldw	r2,-4(fp)
   1d348:	108000d0 	cmplti	r2,r2,3
   1d34c:	103fe11e 	bne	r2,zero,1d2d4 <convert_filename_to_name_extension+0xfc>
        }
    }

}
   1d350:	0001883a 	nop
   1d354:	0001883a 	nop
   1d358:	e037883a 	mov	sp,fp
   1d35c:	df000017 	ldw	fp,0(sp)
   1d360:	dec00104 	addi	sp,sp,4
   1d364:	f800283a 	ret

0001d368 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   1d368:	defff504 	addi	sp,sp,-44
   1d36c:	dfc00a15 	stw	ra,40(sp)
   1d370:	df000915 	stw	fp,36(sp)
   1d374:	df000904 	addi	fp,sp,36
   1d378:	e13ff915 	stw	r4,-28(fp)
   1d37c:	e17ff815 	stw	r5,-32(fp)
   1d380:	e1bff715 	stw	r6,-36(fp)
    unsigned int cluster_number;
    bool result = false;
   1d384:	e03fff15 	stw	zero,-4(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   1d388:	e0bffa04 	addi	r2,fp,-24
   1d38c:	1009883a 	mov	r4,r2
   1d390:	001cce80 	call	1cce8 <find_first_empty_cluster>
   1d394:	10009d26 	beq	r2,zero,1d60c <create_file+0x2a4>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   1d398:	e0bff717 	ldw	r2,-36(fp)
   1d39c:	10800a17 	ldw	r2,40(r2)
   1d3a0:	1000031e 	bne	r2,zero,1d3b0 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   1d3a4:	001d0b80 	call	1d0b8 <find_first_empty_record_in_root_directory>
   1d3a8:	e0bffe15 	stw	r2,-8(fp)
   1d3ac:	00000606 	br	1d3c8 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   1d3b0:	e0bff717 	ldw	r2,-36(fp)
   1d3b4:	1080058b 	ldhu	r2,22(r2)
   1d3b8:	10bfffcc 	andi	r2,r2,65535
   1d3bc:	1009883a 	mov	r4,r2
   1d3c0:	001ce780 	call	1ce78 <find_first_empty_record_in_a_subdirectory>
   1d3c4:	e0bffe15 	stw	r2,-8(fp)
        }
        if (record_index >= 0)
   1d3c8:	e0bffe17 	ldw	r2,-8(fp)
   1d3cc:	10008f16 	blt	r2,zero,1d60c <create_file+0x2a4>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   1d3d0:	e13ff917 	ldw	r4,-28(fp)
   1d3d4:	001c0880 	call	1c088 <get_dir_divider_location>
   1d3d8:	e0bffd15 	stw	r2,-12(fp)
            int last_dir_separator = 0;
   1d3dc:	e03ffc15 	stw	zero,-16(fp)

            // Skip through all directory separators.
            while (location > 0)
   1d3e0:	00000b06 	br	1d410 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   1d3e4:	e0fffc17 	ldw	r3,-16(fp)
   1d3e8:	e0bffd17 	ldw	r2,-12(fp)
   1d3ec:	1885883a 	add	r2,r3,r2
   1d3f0:	10800044 	addi	r2,r2,1
   1d3f4:	e0bffc15 	stw	r2,-16(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   1d3f8:	e0bffc17 	ldw	r2,-16(fp)
   1d3fc:	e0fff917 	ldw	r3,-28(fp)
   1d400:	1885883a 	add	r2,r3,r2
   1d404:	1009883a 	mov	r4,r2
   1d408:	001c0880 	call	1c088 <get_dir_divider_location>
   1d40c:	e0bffd15 	stw	r2,-12(fp)
            while (location > 0)
   1d410:	e0bffd17 	ldw	r2,-12(fp)
   1d414:	00bff316 	blt	zero,r2,1d3e4 <create_file+0x7c>
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   1d418:	e0bffc17 	ldw	r2,-16(fp)
   1d41c:	e0fff917 	ldw	r3,-28(fp)
   1d420:	1887883a 	add	r3,r3,r2
   1d424:	e13ff817 	ldw	r4,-32(fp)
   1d428:	e0bff817 	ldw	r2,-32(fp)
   1d42c:	10800204 	addi	r2,r2,8
   1d430:	100d883a 	mov	r6,r2
   1d434:	200b883a 	mov	r5,r4
   1d438:	1809883a 	mov	r4,r3
   1d43c:	001d1d80 	call	1d1d8 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   1d440:	e0bff817 	ldw	r2,-32(fp)
   1d444:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   1d448:	e0bff817 	ldw	r2,-32(fp)
   1d44c:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   1d450:	e0bff817 	ldw	r2,-32(fp)
   1d454:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   1d458:	e0bff817 	ldw	r2,-32(fp)
   1d45c:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   1d460:	e0bff817 	ldw	r2,-32(fp)
   1d464:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   1d468:	e0bff817 	ldw	r2,-32(fp)
   1d46c:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   1d470:	e0bffa17 	ldw	r2,-24(fp)
   1d474:	1007883a 	mov	r3,r2
   1d478:	e0bff817 	ldw	r2,-32(fp)
   1d47c:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   1d480:	e0bff817 	ldw	r2,-32(fp)
   1d484:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   1d488:	e0fffa17 	ldw	r3,-24(fp)
   1d48c:	e0bff817 	ldw	r2,-32(fp)
   1d490:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   1d494:	e0bff817 	ldw	r2,-32(fp)
   1d498:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   1d49c:	e0bff817 	ldw	r2,-32(fp)
   1d4a0:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   1d4a4:	e0bffe17 	ldw	r2,-8(fp)
   1d4a8:	10ffffcc 	andi	r3,r2,65535
   1d4ac:	e0bff817 	ldw	r2,-32(fp)
   1d4b0:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   1d4b4:	e0bffe17 	ldw	r2,-8(fp)
   1d4b8:	1004d43a 	srli	r2,r2,16
   1d4bc:	1007883a 	mov	r3,r2
   1d4c0:	00800404 	movi	r2,16
   1d4c4:	1885283a 	div	r2,r3,r2
   1d4c8:	1007883a 	mov	r3,r2
   1d4cc:	e0bff817 	ldw	r2,-32(fp)
   1d4d0:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   1d4d4:	e0bffe17 	ldw	r2,-8(fp)
   1d4d8:	1004d43a 	srli	r2,r2,16
   1d4dc:	1007883a 	mov	r3,r2
   1d4e0:	00a00034 	movhi	r2,32768
   1d4e4:	108003c4 	addi	r2,r2,15
   1d4e8:	1884703a 	and	r2,r3,r2
   1d4ec:	1000040e 	bge	r2,zero,1d500 <create_file+0x198>
   1d4f0:	10bfffc4 	addi	r2,r2,-1
   1d4f4:	00fffc04 	movi	r3,-16
   1d4f8:	10c4b03a 	or	r2,r2,r3
   1d4fc:	10800044 	addi	r2,r2,1
   1d500:	1004917a 	slli	r2,r2,5
   1d504:	1007883a 	mov	r3,r2
   1d508:	e0bff817 	ldw	r2,-32(fp)
   1d50c:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   1d510:	e0bff717 	ldw	r2,-36(fp)
   1d514:	1080058b 	ldhu	r2,22(r2)
   1d518:	10ffffcc 	andi	r3,r2,65535
   1d51c:	e0bff817 	ldw	r2,-32(fp)
   1d520:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   1d524:	e0bff817 	ldw	r2,-32(fp)
   1d528:	00c00044 	movi	r3,1
   1d52c:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   1d530:	e0bff817 	ldw	r2,-32(fp)
   1d534:	00c00044 	movi	r3,1
   1d538:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1d53c:	e0bff817 	ldw	r2,-32(fp)
   1d540:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1d544:	1000061e 	bne	r2,zero,1d560 <create_file+0x1f8>
   1d548:	008000b4 	movhi	r2,2
   1d54c:	10d68f17 	ldw	r3,23100(r2)
   1d550:	e0bff817 	ldw	r2,-32(fp)
   1d554:	10800b17 	ldw	r2,44(r2)
   1d558:	1885883a 	add	r2,r3,r2
   1d55c:	00000d06 	br	1d594 <create_file+0x22c>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   1d560:	008000b4 	movhi	r2,2
   1d564:	10d69017 	ldw	r3,23104(r2)
   1d568:	e0bff817 	ldw	r2,-32(fp)
   1d56c:	10800a17 	ldw	r2,40(r2)
   1d570:	113fff84 	addi	r4,r2,-2
   1d574:	008000b4 	movhi	r2,2
   1d578:	10967f83 	ldbu	r2,23038(r2)
   1d57c:	10803fcc 	andi	r2,r2,255
   1d580:	2085383a 	mul	r2,r4,r2
   1d584:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   1d588:	e0bff817 	ldw	r2,-32(fp)
   1d58c:	10800b17 	ldw	r2,44(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   1d590:	1885883a 	add	r2,r3,r2
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   1d594:	e0bffb15 	stw	r2,-20(fp)

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   1d598:	e0bffb17 	ldw	r2,-20(fp)
   1d59c:	d0e75217 	ldw	r3,-25272(gp)
   1d5a0:	180b883a 	mov	r5,r3
   1d5a4:	1009883a 	mov	r4,r2
   1d5a8:	001ad900 	call	1ad90 <Read_Sector_Data>
   1d5ac:	10001726 	beq	r2,zero,1d60c <create_file+0x2a4>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   1d5b0:	e0bff817 	ldw	r2,-32(fp)
   1d5b4:	10800c0b 	ldhu	r2,48(r2)
   1d5b8:	10bfffcc 	andi	r2,r2,65535
   1d5bc:	10a0001c 	xori	r2,r2,32768
   1d5c0:	10a00004 	addi	r2,r2,-32768
   1d5c4:	e17ff817 	ldw	r5,-32(fp)
   1d5c8:	1009883a 	mov	r4,r2
   1d5cc:	001b4140 	call	1b414 <Write_File_Record_At_Offset>
   1d5d0:	10000e26 	beq	r2,zero,1d60c <create_file+0x2a4>
                {
                    Save_Modified_Sector();
   1d5d4:	001ad440 	call	1ad44 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   1d5d8:	e0bffa17 	ldw	r2,-24(fp)
   1d5dc:	01800044 	movi	r6,1
   1d5e0:	017fffc4 	movi	r5,-1
   1d5e4:	1009883a 	mov	r4,r2
   1d5e8:	001af180 	call	1af18 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   1d5ec:	e0bffa17 	ldw	r2,-24(fp)
   1d5f0:	000d883a 	mov	r6,zero
   1d5f4:	017fffc4 	movi	r5,-1
   1d5f8:	1009883a 	mov	r4,r2
   1d5fc:	001af180 	call	1af18 <mark_cluster>
   1d600:	10000226 	beq	r2,zero,1d60c <create_file+0x2a4>
                    {
                        result = true;
   1d604:	00800044 	movi	r2,1
   1d608:	e0bfff15 	stw	r2,-4(fp)
                }
            }
        }

    }
    return result;           
   1d60c:	e0bfff17 	ldw	r2,-4(fp)
}
   1d610:	e037883a 	mov	sp,fp
   1d614:	dfc00117 	ldw	ra,4(sp)
   1d618:	df000017 	ldw	fp,0(sp)
   1d61c:	dec00204 	addi	sp,sp,8
   1d620:	f800283a 	ret

0001d624 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   1d624:	defffb04 	addi	sp,sp,-20
   1d628:	df000415 	stw	fp,16(sp)
   1d62c:	df000404 	addi	fp,sp,16
   1d630:	e13ffd15 	stw	r4,-12(fp)
   1d634:	e17ffc15 	stw	r5,-16(fp)
	int index;
	int flength = 0;
   1d638:	e03ffe15 	stw	zero,-8(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1d63c:	e03fff15 	stw	zero,-4(fp)
   1d640:	00001606 	br	1d69c <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
   1d644:	e0fffd17 	ldw	r3,-12(fp)
   1d648:	e0bfff17 	ldw	r2,-4(fp)
   1d64c:	1885883a 	add	r2,r3,r2
   1d650:	10800003 	ldbu	r2,0(r2)
   1d654:	10803fcc 	andi	r2,r2,255
   1d658:	10800820 	cmpeqi	r2,r2,32
   1d65c:	10000c1e 	bne	r2,zero,1d690 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
   1d660:	e0fffd17 	ldw	r3,-12(fp)
   1d664:	e0bfff17 	ldw	r2,-4(fp)
   1d668:	1885883a 	add	r2,r3,r2
   1d66c:	11000003 	ldbu	r4,0(r2)
   1d670:	e0bffe17 	ldw	r2,-8(fp)
   1d674:	e0fffc17 	ldw	r3,-16(fp)
   1d678:	1885883a 	add	r2,r3,r2
   1d67c:	2007883a 	mov	r3,r4
   1d680:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   1d684:	e0bffe17 	ldw	r2,-8(fp)
   1d688:	10800044 	addi	r2,r2,1
   1d68c:	e0bffe15 	stw	r2,-8(fp)
	for (index = 0; index < 8; index++)
   1d690:	e0bfff17 	ldw	r2,-4(fp)
   1d694:	10800044 	addi	r2,r2,1
   1d698:	e0bfff15 	stw	r2,-4(fp)
   1d69c:	e0bfff17 	ldw	r2,-4(fp)
   1d6a0:	10800210 	cmplti	r2,r2,8
   1d6a4:	103fe71e 	bne	r2,zero,1d644 <copy_file_record_name_to_string+0x20>
		}
	}
	if (file_record->extension[0] != ' ')
   1d6a8:	e0bffd17 	ldw	r2,-12(fp)
   1d6ac:	10800203 	ldbu	r2,8(r2)
   1d6b0:	10803fcc 	andi	r2,r2,255
   1d6b4:	10800820 	cmpeqi	r2,r2,32
   1d6b8:	1000231e 	bne	r2,zero,1d748 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   1d6bc:	e0bffe17 	ldw	r2,-8(fp)
   1d6c0:	e0fffc17 	ldw	r3,-16(fp)
   1d6c4:	1885883a 	add	r2,r3,r2
   1d6c8:	00c00b84 	movi	r3,46
   1d6cc:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   1d6d0:	e0bffe17 	ldw	r2,-8(fp)
   1d6d4:	10800044 	addi	r2,r2,1
   1d6d8:	e0bffe15 	stw	r2,-8(fp)
		for (index = 0; index < 3; index++)
   1d6dc:	e03fff15 	stw	zero,-4(fp)
   1d6e0:	00001606 	br	1d73c <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   1d6e4:	e0fffd17 	ldw	r3,-12(fp)
   1d6e8:	e0bfff17 	ldw	r2,-4(fp)
   1d6ec:	1885883a 	add	r2,r3,r2
   1d6f0:	10800203 	ldbu	r2,8(r2)
   1d6f4:	10803fcc 	andi	r2,r2,255
   1d6f8:	10800820 	cmpeqi	r2,r2,32
   1d6fc:	10000c1e 	bne	r2,zero,1d730 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   1d700:	e0fffd17 	ldw	r3,-12(fp)
   1d704:	e0bfff17 	ldw	r2,-4(fp)
   1d708:	1885883a 	add	r2,r3,r2
   1d70c:	11000203 	ldbu	r4,8(r2)
   1d710:	e0bffe17 	ldw	r2,-8(fp)
   1d714:	e0fffc17 	ldw	r3,-16(fp)
   1d718:	1885883a 	add	r2,r3,r2
   1d71c:	2007883a 	mov	r3,r4
   1d720:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   1d724:	e0bffe17 	ldw	r2,-8(fp)
   1d728:	10800044 	addi	r2,r2,1
   1d72c:	e0bffe15 	stw	r2,-8(fp)
		for (index = 0; index < 3; index++)
   1d730:	e0bfff17 	ldw	r2,-4(fp)
   1d734:	10800044 	addi	r2,r2,1
   1d738:	e0bfff15 	stw	r2,-4(fp)
   1d73c:	e0bfff17 	ldw	r2,-4(fp)
   1d740:	108000d0 	cmplti	r2,r2,3
   1d744:	103fe71e 	bne	r2,zero,1d6e4 <copy_file_record_name_to_string+0xc0>
			}
		}
	}
	file_name[flength] = 0;
   1d748:	e0bffe17 	ldw	r2,-8(fp)
   1d74c:	e0fffc17 	ldw	r3,-16(fp)
   1d750:	1885883a 	add	r2,r3,r2
   1d754:	10000005 	stb	zero,0(r2)
}
   1d758:	0001883a 	nop
   1d75c:	e037883a 	mov	sp,fp
   1d760:	df000017 	ldw	fp,0(sp)
   1d764:	dec00104 	addi	sp,sp,4
   1d768:	f800283a 	ret

0001d76c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   1d76c:	defffc04 	addi	sp,sp,-16
   1d770:	dfc00315 	stw	ra,12(sp)
   1d774:	df000215 	stw	fp,8(sp)
   1d778:	df000204 	addi	fp,sp,8
   1d77c:	e13ffe15 	stw	r4,-8(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   1d780:	d1600704 	addi	r5,gp,-32740
   1d784:	e13ffe17 	ldw	r4,-8(fp)
   1d788:	00201bc0 	call	201bc <alt_find_dev>
   1d78c:	e0bfff15 	stw	r2,-4(fp)

	if (dev != NULL)
   1d790:	e0bfff17 	ldw	r2,-4(fp)
   1d794:	10001d26 	beq	r2,zero,1d80c <alt_up_sd_card_open_dev+0xa0>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   1d798:	e0bfff17 	ldw	r2,-4(fp)
   1d79c:	10800a17 	ldw	r2,40(r2)
   1d7a0:	10808d04 	addi	r2,r2,564
   1d7a4:	d0a74c15 	stw	r2,-25296(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   1d7a8:	e0bfff17 	ldw	r2,-4(fp)
   1d7ac:	10800a17 	ldw	r2,40(r2)
   1d7b0:	10808904 	addi	r2,r2,548
   1d7b4:	d0a74d15 	stw	r2,-25292(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   1d7b8:	e0bfff17 	ldw	r2,-4(fp)
   1d7bc:	10800a17 	ldw	r2,40(r2)
   1d7c0:	10808404 	addi	r2,r2,528
   1d7c4:	d0a74e15 	stw	r2,-25288(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   1d7c8:	e0bfff17 	ldw	r2,-4(fp)
   1d7cc:	10800a17 	ldw	r2,40(r2)
   1d7d0:	10808c04 	addi	r2,r2,560
   1d7d4:	d0a74f15 	stw	r2,-25284(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   1d7d8:	e0bfff17 	ldw	r2,-4(fp)
   1d7dc:	10800a17 	ldw	r2,40(r2)
   1d7e0:	10808b04 	addi	r2,r2,556
   1d7e4:	d0a75015 	stw	r2,-25280(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   1d7e8:	e0bfff17 	ldw	r2,-4(fp)
   1d7ec:	10800a17 	ldw	r2,40(r2)
   1d7f0:	d0a75115 	stw	r2,-25276(gp)
		device_pointer = dev;
   1d7f4:	e0bfff17 	ldw	r2,-4(fp)
   1d7f8:	d0a75415 	stw	r2,-25264(gp)
		initialized = false;
   1d7fc:	d0274a15 	stw	zero,-25304(gp)
		is_sd_card_formated_as_FAT16 = false;
   1d800:	d0274b15 	stw	zero,-25300(gp)
		search_data.valid = false;
   1d804:	008000b4 	movhi	r2,2
   1d808:	1017d515 	stw	zero,24404(r2)
	}
	return dev;
   1d80c:	e0bfff17 	ldw	r2,-4(fp)
}
   1d810:	e037883a 	mov	sp,fp
   1d814:	dfc00117 	ldw	ra,4(sp)
   1d818:	df000017 	ldw	fp,0(sp)
   1d81c:	dec00204 	addi	sp,sp,8
   1d820:	f800283a 	ret

0001d824 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   1d824:	defffd04 	addi	sp,sp,-12
   1d828:	df000215 	stw	fp,8(sp)
   1d82c:	df000204 	addi	fp,sp,8
    bool result = false;
   1d830:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   1d834:	d0a75417 	ldw	r2,-25264(gp)
   1d838:	10000826 	beq	r2,zero,1d85c <alt_up_sd_card_is_Present+0x38>
   1d83c:	d0a74c17 	ldw	r2,-25296(gp)
   1d840:	1080002b 	ldhuio	r2,0(r2)
   1d844:	10bfffcc 	andi	r2,r2,65535
   1d848:	1080008c 	andi	r2,r2,2
   1d84c:	10000326 	beq	r2,zero,1d85c <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   1d850:	00800044 	movi	r2,1
   1d854:	e0bfff15 	stw	r2,-4(fp)
   1d858:	00001906 	br	1d8c0 <alt_up_sd_card_is_Present+0x9c>
    }
	else if (initialized == true)
   1d85c:	d0a74a17 	ldw	r2,-25304(gp)
   1d860:	10800058 	cmpnei	r2,r2,1
   1d864:	1000161e 	bne	r2,zero,1d8c0 <alt_up_sd_card_is_Present+0x9c>
	{
		int index;

		initialized = false;
   1d868:	d0274a15 	stw	zero,-25304(gp)
		search_data.valid = false;
   1d86c:	008000b4 	movhi	r2,2
   1d870:	1017d515 	stw	zero,24404(r2)
		is_sd_card_formated_as_FAT16 = false;
   1d874:	d0274b15 	stw	zero,-25300(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   1d878:	e03ffe15 	stw	zero,-8(fp)
   1d87c:	00000d06 	br	1d8b4 <alt_up_sd_card_is_Present+0x90>
		{
			active_files[index].in_use = false;
   1d880:	e0bffe17 	ldw	r2,-8(fp)
   1d884:	100691ba 	slli	r3,r2,6
   1d888:	008000b4 	movhi	r2,2
   1d88c:	1885883a 	add	r2,r3,r2
   1d890:	1016a015 	stw	zero,23168(r2)
			active_files[index].modified = false;
   1d894:	e0bffe17 	ldw	r2,-8(fp)
   1d898:	100691ba 	slli	r3,r2,6
   1d89c:	008000b4 	movhi	r2,2
   1d8a0:	1885883a 	add	r2,r3,r2
   1d8a4:	10169f15 	stw	zero,23164(r2)
		for(index = 0; index < MAX_FILES_OPENED; index++)
   1d8a8:	e0bffe17 	ldw	r2,-8(fp)
   1d8ac:	10800044 	addi	r2,r2,1
   1d8b0:	e0bffe15 	stw	r2,-8(fp)
   1d8b4:	e0bffe17 	ldw	r2,-8(fp)
   1d8b8:	10800510 	cmplti	r2,r2,20
   1d8bc:	103ff01e 	bne	r2,zero,1d880 <alt_up_sd_card_is_Present+0x5c>
		}
	}
    return result;
   1d8c0:	e0bfff17 	ldw	r2,-4(fp)
}
   1d8c4:	e037883a 	mov	sp,fp
   1d8c8:	df000017 	ldw	fp,0(sp)
   1d8cc:	dec00104 	addi	sp,sp,4
   1d8d0:	f800283a 	ret

0001d8d4 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   1d8d4:	defffd04 	addi	sp,sp,-12
   1d8d8:	dfc00215 	stw	ra,8(sp)
   1d8dc:	df000115 	stw	fp,4(sp)
   1d8e0:	df000104 	addi	fp,sp,4
	bool result = false;
   1d8e4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   1d8e8:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1d8ec:	10000b26 	beq	r2,zero,1d91c <alt_up_sd_card_is_FAT16+0x48>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   1d8f0:	d0a74a17 	ldw	r2,-25304(gp)
   1d8f4:	1000061e 	bne	r2,zero,1d910 <alt_up_sd_card_is_FAT16+0x3c>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   1d8f8:	001bc680 	call	1bc68 <Look_for_FAT16>
   1d8fc:	d0a74b15 	stw	r2,-25300(gp)
			initialized = is_sd_card_formated_as_FAT16;
   1d900:	d0a74b17 	ldw	r2,-25300(gp)
   1d904:	d0a74a15 	stw	r2,-25304(gp)
			search_data.valid = false;
   1d908:	008000b4 	movhi	r2,2
   1d90c:	1017d515 	stw	zero,24404(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   1d910:	d0a74b17 	ldw	r2,-25300(gp)
   1d914:	e0bfff15 	stw	r2,-4(fp)
   1d918:	00000206 	br	1d924 <alt_up_sd_card_is_FAT16+0x50>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   1d91c:	d0274a15 	stw	zero,-25304(gp)
		is_sd_card_formated_as_FAT16 = false;
   1d920:	d0274b15 	stw	zero,-25300(gp)
	}

	return result;
   1d924:	e0bfff17 	ldw	r2,-4(fp)
}
   1d928:	e037883a 	mov	sp,fp
   1d92c:	dfc00117 	ldw	ra,4(sp)
   1d930:	df000017 	ldw	fp,0(sp)
   1d934:	dec00204 	addi	sp,sp,8
   1d938:	f800283a 	ret

0001d93c <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   1d93c:	deffea04 	addi	sp,sp,-88
   1d940:	dfc01515 	stw	ra,84(sp)
   1d944:	df001415 	stw	fp,80(sp)
   1d948:	df001404 	addi	fp,sp,80
   1d94c:	e13fed15 	stw	r4,-76(fp)
   1d950:	e17fec15 	stw	r5,-80(fp)
	short int result = 2;
   1d954:	00800084 	movi	r2,2
   1d958:	e0bfff8d 	sth	r2,-2(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1d95c:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1d960:	10001f26 	beq	r2,zero,1d9e0 <alt_up_sd_card_find_first+0xa4>
   1d964:	d0a74b17 	ldw	r2,-25300(gp)
   1d968:	10001d26 	beq	r2,zero,1d9e0 <alt_up_sd_card_find_first+0xa4>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   1d96c:	e0ffee04 	addi	r3,fp,-72
   1d970:	e0bffe04 	addi	r2,fp,-8
   1d974:	180d883a 	mov	r6,r3
   1d978:	100b883a 	mov	r5,r2
   1d97c:	e13fed17 	ldw	r4,-76(fp)
   1d980:	001c3cc0 	call	1c3cc <get_home_directory_cluster_for_file>
   1d984:	10001426 	beq	r2,zero,1d9d8 <alt_up_sd_card_find_first+0x9c>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   1d988:	e0bffe17 	ldw	r2,-8(fp)
   1d98c:	1007883a 	mov	r3,r2
   1d990:	008000b4 	movhi	r2,2
   1d994:	10d7d115 	stw	r3,24388(r2)
			search_data.current_cluster_index = home_directory_cluster;
   1d998:	e0bffe17 	ldw	r2,-8(fp)
   1d99c:	1007883a 	mov	r3,r2
   1d9a0:	008000b4 	movhi	r2,2
   1d9a4:	10d7d215 	stw	r3,24392(r2)
			search_data.current_sector_in_cluster = 0;
   1d9a8:	008000b4 	movhi	r2,2
   1d9ac:	1017d315 	stw	zero,24396(r2)
			search_data.file_index_in_sector = -1;
   1d9b0:	00ffffc4 	movi	r3,-1
   1d9b4:	008000b4 	movhi	r2,2
   1d9b8:	10d7d40d 	sth	r3,24400(r2)
			search_data.valid = true;
   1d9bc:	00c00044 	movi	r3,1
   1d9c0:	008000b4 	movhi	r2,2
   1d9c4:	10d7d515 	stw	r3,24404(r2)
			result = alt_up_sd_card_find_next(file_name);
   1d9c8:	e13fec17 	ldw	r4,-80(fp)
   1d9cc:	001d9f80 	call	1d9f8 <alt_up_sd_card_find_next>
   1d9d0:	e0bfff8d 	sth	r2,-2(fp)
   1d9d4:	00000206 	br	1d9e0 <alt_up_sd_card_find_first+0xa4>
		}
		else
		{
			result = 1;
   1d9d8:	00800044 	movi	r2,1
   1d9dc:	e0bfff8d 	sth	r2,-2(fp)
		}
	}
	return result;
   1d9e0:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1d9e4:	e037883a 	mov	sp,fp
   1d9e8:	dfc00117 	ldw	ra,4(sp)
   1d9ec:	df000017 	ldw	fp,0(sp)
   1d9f0:	dec00204 	addi	sp,sp,8
   1d9f4:	f800283a 	ret

0001d9f8 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   1d9f8:	deffe404 	addi	sp,sp,-112
   1d9fc:	dfc01b15 	stw	ra,108(sp)
   1da00:	df001a15 	stw	fp,104(sp)
   1da04:	df001a04 	addi	fp,sp,104
   1da08:	e13fe615 	stw	r4,-104(fp)
	short int result = 2;
   1da0c:	00800084 	movi	r2,2
   1da10:	e0bfff8d 	sth	r2,-2(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1da14:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1da18:	1000cc26 	beq	r2,zero,1dd4c <alt_up_sd_card_find_next+0x354>
   1da1c:	d0a74b17 	ldw	r2,-25300(gp)
   1da20:	1000ca26 	beq	r2,zero,1dd4c <alt_up_sd_card_find_next+0x354>
	{
		if (search_data.valid)
   1da24:	008000b4 	movhi	r2,2
   1da28:	1097d517 	ldw	r2,24404(r2)
   1da2c:	1000c526 	beq	r2,zero,1dd44 <alt_up_sd_card_find_next+0x34c>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   1da30:	008000b4 	movhi	r2,2
   1da34:	1097d217 	ldw	r2,24392(r2)
   1da38:	e0bffe15 	stw	r2,-8(fp)

			if (cluster == 0)
   1da3c:	e0bffe17 	ldw	r2,-8(fp)
   1da40:	10004f1e 	bne	r2,zero,1db80 <alt_up_sd_card_find_next+0x188>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   1da44:	008000b4 	movhi	r2,2
   1da48:	1096810b 	ldhu	r2,23044(r2)
   1da4c:	10bfffcc 	andi	r2,r2,65535
   1da50:	1006917a 	slli	r3,r2,5
   1da54:	008000b4 	movhi	r2,2
   1da58:	10967f0b 	ldhu	r2,23036(r2)
   1da5c:	10bfffcc 	andi	r2,r2,65535
   1da60:	1885283a 	div	r2,r3,r2
   1da64:	e0bff815 	stw	r2,-32(fp)
				int sector_index = search_data.current_sector_in_cluster;
   1da68:	008000b4 	movhi	r2,2
   1da6c:	1097d317 	ldw	r2,24396(r2)
   1da70:	e0bffd15 	stw	r2,-12(fp)
				int file_counter = search_data.file_index_in_sector+1;
   1da74:	008000b4 	movhi	r2,2
   1da78:	1097d40b 	ldhu	r2,24400(r2)
   1da7c:	10bfffcc 	andi	r2,r2,65535
   1da80:	10a0001c 	xori	r2,r2,32768
   1da84:	10a00004 	addi	r2,r2,-32768
   1da88:	10800044 	addi	r2,r2,1
   1da8c:	e0bffc15 	stw	r2,-16(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1da90:	00003306 	br	1db60 <alt_up_sd_card_find_next+0x168>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   1da94:	008000b4 	movhi	r2,2
   1da98:	10d68f17 	ldw	r3,23100(r2)
   1da9c:	e0bffd17 	ldw	r2,-12(fp)
   1daa0:	1885883a 	add	r2,r3,r2
   1daa4:	1007883a 	mov	r3,r2
   1daa8:	d0a75217 	ldw	r2,-25272(gp)
   1daac:	100b883a 	mov	r5,r2
   1dab0:	1809883a 	mov	r4,r3
   1dab4:	001ad900 	call	1ad90 <Read_Sector_Data>
   1dab8:	10002d26 	beq	r2,zero,1db70 <alt_up_sd_card_find_next+0x178>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   1dabc:	00002106 	br	1db44 <alt_up_sd_card_find_next+0x14c>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   1dac0:	e0bffc17 	ldw	r2,-16(fp)
   1dac4:	1004917a 	slli	r2,r2,5
   1dac8:	e13ffd17 	ldw	r4,-12(fp)
   1dacc:	e0ffe704 	addi	r3,fp,-100
   1dad0:	200f883a 	mov	r7,r4
   1dad4:	000d883a 	mov	r6,zero
   1dad8:	180b883a 	mov	r5,r3
   1dadc:	1009883a 	mov	r4,r2
   1dae0:	001b19c0 	call	1b19c <Read_File_Record_At_Offset>
   1dae4:	10001426 	beq	r2,zero,1db38 <alt_up_sd_card_find_next+0x140>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1dae8:	e0bfe703 	ldbu	r2,-100(fp)
   1daec:	10803fcc 	andi	r2,r2,255
   1daf0:	10001126 	beq	r2,zero,1db38 <alt_up_sd_card_find_next+0x140>
   1daf4:	e0bfe703 	ldbu	r2,-100(fp)
   1daf8:	10803fcc 	andi	r2,r2,255
   1dafc:	10803960 	cmpeqi	r2,r2,229
   1db00:	10000d1e 	bne	r2,zero,1db38 <alt_up_sd_card_find_next+0x140>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   1db04:	e0bffc17 	ldw	r2,-16(fp)
   1db08:	1007883a 	mov	r3,r2
   1db0c:	008000b4 	movhi	r2,2
   1db10:	10d7d40d 	sth	r3,24400(r2)
									search_data.current_sector_in_cluster = sector_index;
   1db14:	e0fffd17 	ldw	r3,-12(fp)
   1db18:	008000b4 	movhi	r2,2
   1db1c:	10d7d315 	stw	r3,24396(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   1db20:	e0bfe704 	addi	r2,fp,-100
   1db24:	e17fe617 	ldw	r5,-104(fp)
   1db28:	1009883a 	mov	r4,r2
   1db2c:	001d6240 	call	1d624 <copy_file_record_name_to_string>
									return 0;
   1db30:	0005883a 	mov	r2,zero
   1db34:	00008606 	br	1dd50 <alt_up_sd_card_find_next+0x358>
						for (; file_counter < 16; file_counter++)
   1db38:	e0bffc17 	ldw	r2,-16(fp)
   1db3c:	10800044 	addi	r2,r2,1
   1db40:	e0bffc15 	stw	r2,-16(fp)
   1db44:	e0bffc17 	ldw	r2,-16(fp)
   1db48:	10800410 	cmplti	r2,r2,16
   1db4c:	103fdc1e 	bne	r2,zero,1dac0 <alt_up_sd_card_find_next+0xc8>
								}
							}
						}
						file_counter = 0;
   1db50:	e03ffc15 	stw	zero,-16(fp)
				for (; sector_index < max_root_dir_sectors; sector_index++)
   1db54:	e0bffd17 	ldw	r2,-12(fp)
   1db58:	10800044 	addi	r2,r2,1
   1db5c:	e0bffd15 	stw	r2,-12(fp)
   1db60:	e0fffd17 	ldw	r3,-12(fp)
   1db64:	e0bff817 	ldw	r2,-32(fp)
   1db68:	18bfca16 	blt	r3,r2,1da94 <alt_up_sd_card_find_next+0x9c>
   1db6c:	00000106 	br	1db74 <alt_up_sd_card_find_next+0x17c>
					}
					else
					{
						break;
   1db70:	0001883a 	nop
					}
				}
				result = -1;
   1db74:	00bfffc4 	movi	r2,-1
   1db78:	e0bfff8d 	sth	r2,-2(fp)
   1db7c:	00007306 	br	1dd4c <alt_up_sd_card_find_next+0x354>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   1db80:	008000b4 	movhi	r2,2
   1db84:	1097d40b 	ldhu	r2,24400(r2)
   1db88:	10bfffcc 	andi	r2,r2,65535
   1db8c:	10a0001c 	xori	r2,r2,32768
   1db90:	10a00004 	addi	r2,r2,-32768
   1db94:	10800044 	addi	r2,r2,1
   1db98:	e0bffb15 	stw	r2,-20(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   1db9c:	e0bffe17 	ldw	r2,-8(fp)
   1dba0:	10ffff84 	addi	r3,r2,-2
   1dba4:	008000b4 	movhi	r2,2
   1dba8:	10967f83 	ldbu	r2,23038(r2)
   1dbac:	10803fcc 	andi	r2,r2,255
   1dbb0:	1885383a 	mul	r2,r3,r2
   1dbb4:	1007883a 	mov	r3,r2
   1dbb8:	008000b4 	movhi	r2,2
   1dbbc:	10969017 	ldw	r2,23104(r2)
   1dbc0:	1885883a 	add	r2,r3,r2
   1dbc4:	e0bff915 	stw	r2,-28(fp)
					int sector_index = search_data.current_sector_in_cluster;
   1dbc8:	008000b4 	movhi	r2,2
   1dbcc:	1097d317 	ldw	r2,24396(r2)
   1dbd0:	e0bffa15 	stw	r2,-24(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1dbd4:	00003506 	br	1dcac <alt_up_sd_card_find_next+0x2b4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   1dbd8:	e0fffa17 	ldw	r3,-24(fp)
   1dbdc:	e0bff917 	ldw	r2,-28(fp)
   1dbe0:	1885883a 	add	r2,r3,r2
   1dbe4:	d0e75217 	ldw	r3,-25272(gp)
   1dbe8:	180b883a 	mov	r5,r3
   1dbec:	1009883a 	mov	r4,r2
   1dbf0:	001ad900 	call	1ad90 <Read_Sector_Data>
   1dbf4:	10003326 	beq	r2,zero,1dcc4 <alt_up_sd_card_find_next+0x2cc>
						{        
							for (; file_counter < 16; file_counter++)
   1dbf8:	00002506 	br	1dc90 <alt_up_sd_card_find_next+0x298>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   1dbfc:	e0bffb17 	ldw	r2,-20(fp)
   1dc00:	1004917a 	slli	r2,r2,5
   1dc04:	e13ffe17 	ldw	r4,-8(fp)
   1dc08:	e17ffa17 	ldw	r5,-24(fp)
   1dc0c:	e0ffe704 	addi	r3,fp,-100
   1dc10:	280f883a 	mov	r7,r5
   1dc14:	200d883a 	mov	r6,r4
   1dc18:	180b883a 	mov	r5,r3
   1dc1c:	1009883a 	mov	r4,r2
   1dc20:	001b19c0 	call	1b19c <Read_File_Record_At_Offset>
   1dc24:	10001726 	beq	r2,zero,1dc84 <alt_up_sd_card_find_next+0x28c>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   1dc28:	e0bfe703 	ldbu	r2,-100(fp)
   1dc2c:	10803fcc 	andi	r2,r2,255
   1dc30:	10001426 	beq	r2,zero,1dc84 <alt_up_sd_card_find_next+0x28c>
   1dc34:	e0bfe703 	ldbu	r2,-100(fp)
   1dc38:	10803fcc 	andi	r2,r2,255
   1dc3c:	10803960 	cmpeqi	r2,r2,229
   1dc40:	1000101e 	bne	r2,zero,1dc84 <alt_up_sd_card_find_next+0x28c>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   1dc44:	e0fffe17 	ldw	r3,-8(fp)
   1dc48:	008000b4 	movhi	r2,2
   1dc4c:	10d7d215 	stw	r3,24392(r2)
										search_data.file_index_in_sector = file_counter;
   1dc50:	e0bffb17 	ldw	r2,-20(fp)
   1dc54:	1007883a 	mov	r3,r2
   1dc58:	008000b4 	movhi	r2,2
   1dc5c:	10d7d40d 	sth	r3,24400(r2)
										search_data.current_sector_in_cluster = sector_index;
   1dc60:	e0fffa17 	ldw	r3,-24(fp)
   1dc64:	008000b4 	movhi	r2,2
   1dc68:	10d7d315 	stw	r3,24396(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   1dc6c:	e0bfe704 	addi	r2,fp,-100
   1dc70:	e17fe617 	ldw	r5,-104(fp)
   1dc74:	1009883a 	mov	r4,r2
   1dc78:	001d6240 	call	1d624 <copy_file_record_name_to_string>
										return 0;
   1dc7c:	0005883a 	mov	r2,zero
   1dc80:	00003306 	br	1dd50 <alt_up_sd_card_find_next+0x358>
							for (; file_counter < 16; file_counter++)
   1dc84:	e0bffb17 	ldw	r2,-20(fp)
   1dc88:	10800044 	addi	r2,r2,1
   1dc8c:	e0bffb15 	stw	r2,-20(fp)
   1dc90:	e0bffb17 	ldw	r2,-20(fp)
   1dc94:	10800410 	cmplti	r2,r2,16
   1dc98:	103fd81e 	bne	r2,zero,1dbfc <alt_up_sd_card_find_next+0x204>
									}
								}
							}
							file_counter = 0;
   1dc9c:	e03ffb15 	stw	zero,-20(fp)
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   1dca0:	e0bffa17 	ldw	r2,-24(fp)
   1dca4:	10800044 	addi	r2,r2,1
   1dca8:	e0bffa15 	stw	r2,-24(fp)
   1dcac:	008000b4 	movhi	r2,2
   1dcb0:	10967f83 	ldbu	r2,23038(r2)
   1dcb4:	10803fcc 	andi	r2,r2,255
   1dcb8:	e0fffa17 	ldw	r3,-24(fp)
   1dcbc:	18bfc616 	blt	r3,r2,1dbd8 <alt_up_sd_card_find_next+0x1e0>
   1dcc0:	00000106 	br	1dcc8 <alt_up_sd_card_find_next+0x2d0>
						}
						else
						{
							break;
   1dcc4:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   1dcc8:	008000b4 	movhi	r2,2
   1dccc:	10967f83 	ldbu	r2,23038(r2)
   1dcd0:	10803fcc 	andi	r2,r2,255
   1dcd4:	e0fffa17 	ldw	r3,-24(fp)
   1dcd8:	18801616 	blt	r3,r2,1dd34 <alt_up_sd_card_find_next+0x33c>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   1dcdc:	e0bffe17 	ldw	r2,-8(fp)
   1dce0:	e0fff784 	addi	r3,fp,-34
   1dce4:	180b883a 	mov	r5,r3
   1dce8:	1009883a 	mov	r4,r2
   1dcec:	001ae680 	call	1ae68 <get_cluster_flag>
   1dcf0:	10000e26 	beq	r2,zero,1dd2c <alt_up_sd_card_find_next+0x334>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   1dcf4:	e0bff78b 	ldhu	r2,-34(fp)
   1dcf8:	10bfffcc 	andi	r2,r2,65535
   1dcfc:	10fffe0c 	andi	r3,r2,65528
   1dd00:	00bffe14 	movui	r2,65528
   1dd04:	1880041e 	bne	r3,r2,1dd18 <alt_up_sd_card_find_next+0x320>
							{
								result = -1;
   1dd08:	00bfffc4 	movi	r2,-1
   1dd0c:	e0bfff8d 	sth	r2,-2(fp)
								search_data.valid = false;
   1dd10:	008000b4 	movhi	r2,2
   1dd14:	1017d515 	stw	zero,24404(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   1dd18:	e0bff78b 	ldhu	r2,-34(fp)
   1dd1c:	10bfffcc 	andi	r2,r2,65535
   1dd20:	10bffe0c 	andi	r2,r2,65528
   1dd24:	e0bffe15 	stw	r2,-8(fp)
   1dd28:	00000206 	br	1dd34 <alt_up_sd_card_find_next+0x33c>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   1dd2c:	00bfffc4 	movi	r2,-1
   1dd30:	e0bfff8d 	sth	r2,-2(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   1dd34:	e0bffe17 	ldw	r2,-8(fp)
   1dd38:	00fffdd4 	movui	r3,65527
   1dd3c:	18bf970e 	bge	r3,r2,1db9c <alt_up_sd_card_find_next+0x1a4>
   1dd40:	00000206 	br	1dd4c <alt_up_sd_card_find_next+0x354>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   1dd44:	008000c4 	movi	r2,3
   1dd48:	e0bfff8d 	sth	r2,-2(fp)
		}
	}
	return result;
   1dd4c:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1dd50:	e037883a 	mov	sp,fp
   1dd54:	dfc00117 	ldw	ra,4(sp)
   1dd58:	df000017 	ldw	fp,0(sp)
   1dd5c:	dec00204 	addi	sp,sp,8
   1dd60:	f800283a 	ret

0001dd64 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   1dd64:	deffe904 	addi	sp,sp,-92
   1dd68:	dfc01615 	stw	ra,88(sp)
   1dd6c:	df001515 	stw	fp,84(sp)
   1dd70:	df001504 	addi	fp,sp,84
   1dd74:	e13fec15 	stw	r4,-80(fp)
   1dd78:	e17feb15 	stw	r5,-84(fp)
	short int file_record_index = -1;
   1dd7c:	00bfffc4 	movi	r2,-1
   1dd80:	e0bfff8d 	sth	r2,-2(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1dd84:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1dd88:	1000af26 	beq	r2,zero,1e048 <alt_up_sd_card_fopen+0x2e4>
   1dd8c:	d0a74b17 	ldw	r2,-25300(gp)
   1dd90:	1000ad26 	beq	r2,zero,1e048 <alt_up_sd_card_fopen+0x2e4>
	{
        unsigned int home_directory_cluster = 0;
   1dd94:	e03ffd15 	stw	zero,-12(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   1dd98:	e13fec17 	ldw	r4,-80(fp)
   1dd9c:	001bd4c0 	call	1bd4c <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   1dda0:	e13fec17 	ldw	r4,-80(fp)
   1dda4:	001be1c0 	call	1be1c <check_file_name_for_FAT16_compliance>
   1dda8:	1000a726 	beq	r2,zero,1e048 <alt_up_sd_card_fopen+0x2e4>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   1ddac:	e0ffed04 	addi	r3,fp,-76
   1ddb0:	e0bffd04 	addi	r2,fp,-12
   1ddb4:	180d883a 	mov	r6,r3
   1ddb8:	100b883a 	mov	r5,r2
   1ddbc:	e13fec17 	ldw	r4,-80(fp)
   1ddc0:	001c3cc0 	call	1c3cc <get_home_directory_cluster_for_file>
   1ddc4:	1000021e 	bne	r2,zero,1ddd0 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   1ddc8:	e0bfff8b 	ldhu	r2,-2(fp)
   1ddcc:	00009f06 	br	1e04c <alt_up_sd_card_fopen+0x2e8>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1ddd0:	e03ffe15 	stw	zero,-8(fp)
   1ddd4:	00000c06 	br	1de08 <alt_up_sd_card_fopen+0xa4>
    		{
    			if (active_files[index].in_use == false)
   1ddd8:	e0bffe17 	ldw	r2,-8(fp)
   1dddc:	100691ba 	slli	r3,r2,6
   1dde0:	008000b4 	movhi	r2,2
   1dde4:	1885883a 	add	r2,r3,r2
   1dde8:	1096a017 	ldw	r2,23168(r2)
   1ddec:	1000031e 	bne	r2,zero,1ddfc <alt_up_sd_card_fopen+0x98>
    			{
    				file_record_index = index;
   1ddf0:	e0bffe17 	ldw	r2,-8(fp)
   1ddf4:	e0bfff8d 	sth	r2,-2(fp)
    				break;
   1ddf8:	00000606 	br	1de14 <alt_up_sd_card_fopen+0xb0>
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   1ddfc:	e0bffe17 	ldw	r2,-8(fp)
   1de00:	10800044 	addi	r2,r2,1
   1de04:	e0bffe15 	stw	r2,-8(fp)
   1de08:	e0bffe17 	ldw	r2,-8(fp)
   1de0c:	10800510 	cmplti	r2,r2,20
   1de10:	103ff11e 	bne	r2,zero,1ddd8 <alt_up_sd_card_fopen+0x74>
    			}
    		}
    		if (file_record_index >= 0)
   1de14:	e0bfff8f 	ldh	r2,-2(fp)
   1de18:	10008b16 	blt	r2,zero,1e048 <alt_up_sd_card_fopen+0x2e4>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   1de1c:	e0bffd17 	ldw	r2,-12(fp)
   1de20:	1009883a 	mov	r4,r2
   1de24:	e0bfff8f 	ldh	r2,-2(fp)
   1de28:	100691ba 	slli	r3,r2,6
   1de2c:	008000b4 	movhi	r2,2
   1de30:	10969104 	addi	r2,r2,23108
   1de34:	1885883a 	add	r2,r3,r2
   1de38:	100d883a 	mov	r6,r2
   1de3c:	e17fec17 	ldw	r5,-80(fp)
   1de40:	001c8bc0 	call	1c8bc <find_file_in_directory>
   1de44:	10006126 	beq	r2,zero,1dfcc <alt_up_sd_card_fopen+0x268>
                {
                    if (create)
   1de48:	e0bfeb17 	ldw	r2,-84(fp)
   1de4c:	10000226 	beq	r2,zero,1de58 <alt_up_sd_card_fopen+0xf4>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   1de50:	00bfffc4 	movi	r2,-1
   1de54:	00007d06 	br	1e04c <alt_up_sd_card_fopen+0x2e8>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   1de58:	e0bfff8f 	ldh	r2,-2(fp)
   1de5c:	100691ba 	slli	r3,r2,6
   1de60:	008000b4 	movhi	r2,2
   1de64:	1885883a 	add	r2,r3,r2
   1de68:	10d6968b 	ldhu	r3,23130(r2)
   1de6c:	e0bfff8f 	ldh	r2,-2(fp)
   1de70:	18ffffcc 	andi	r3,r3,65535
   1de74:	100891ba 	slli	r4,r2,6
   1de78:	008000b4 	movhi	r2,2
   1de7c:	2085883a 	add	r2,r4,r2
   1de80:	10d69815 	stw	r3,23136(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   1de84:	e0bfff8f 	ldh	r2,-2(fp)
   1de88:	100691ba 	slli	r3,r2,6
   1de8c:	008000b4 	movhi	r2,2
   1de90:	1885883a 	add	r2,r3,r2
   1de94:	10169915 	stw	zero,23140(r2)
                    active_files[file_record_index].current_byte_position = 0;
   1de98:	e0bfff8f 	ldh	r2,-2(fp)
   1de9c:	100691ba 	slli	r3,r2,6
   1dea0:	008000b4 	movhi	r2,2
   1dea4:	1885883a 	add	r2,r3,r2
   1dea8:	10169a15 	stw	zero,23144(r2)
                    active_files[file_record_index].in_use = true;
   1deac:	e0bfff8f 	ldh	r2,-2(fp)
   1deb0:	100891ba 	slli	r4,r2,6
   1deb4:	00c00044 	movi	r3,1
   1deb8:	008000b4 	movhi	r2,2
   1debc:	2085883a 	add	r2,r4,r2
   1dec0:	10d6a015 	stw	r3,23168(r2)
    				active_files[file_record_index].modified = false;
   1dec4:	e0bfff8f 	ldh	r2,-2(fp)
   1dec8:	100691ba 	slli	r3,r2,6
   1decc:	008000b4 	movhi	r2,2
   1ded0:	1885883a 	add	r2,r3,r2
   1ded4:	10169f15 	stw	zero,23164(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1ded8:	e03ffe15 	stw	zero,-8(fp)
   1dedc:	00003706 	br	1dfbc <alt_up_sd_card_fopen+0x258>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   1dee0:	e0bfff8f 	ldh	r2,-2(fp)
   1dee4:	e0fffe17 	ldw	r3,-8(fp)
   1dee8:	18803126 	beq	r3,r2,1dfb0 <alt_up_sd_card_fopen+0x24c>
   1deec:	e0bffe17 	ldw	r2,-8(fp)
   1def0:	100691ba 	slli	r3,r2,6
   1def4:	008000b4 	movhi	r2,2
   1def8:	1885883a 	add	r2,r3,r2
   1defc:	1096a017 	ldw	r2,23168(r2)
   1df00:	10800058 	cmpnei	r2,r2,1
   1df04:	10002a1e 	bne	r2,zero,1dfb0 <alt_up_sd_card_fopen+0x24c>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1df08:	e0bfff8f 	ldh	r2,-2(fp)
   1df0c:	100691ba 	slli	r3,r2,6
   1df10:	008000b4 	movhi	r2,2
   1df14:	1885883a 	add	r2,r3,r2
   1df18:	10d69b17 	ldw	r3,23148(r2)
   1df1c:	e0bffe17 	ldw	r2,-8(fp)
   1df20:	100891ba 	slli	r4,r2,6
   1df24:	008000b4 	movhi	r2,2
   1df28:	2085883a 	add	r2,r4,r2
   1df2c:	10969b17 	ldw	r2,23148(r2)
   1df30:	18801f1e 	bne	r3,r2,1dfb0 <alt_up_sd_card_fopen+0x24c>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1df34:	e0bfff8f 	ldh	r2,-2(fp)
   1df38:	100691ba 	slli	r3,r2,6
   1df3c:	008000b4 	movhi	r2,2
   1df40:	1885883a 	add	r2,r3,r2
   1df44:	10d69c17 	ldw	r3,23152(r2)
   1df48:	e0bffe17 	ldw	r2,-8(fp)
   1df4c:	100891ba 	slli	r4,r2,6
   1df50:	008000b4 	movhi	r2,2
   1df54:	2085883a 	add	r2,r4,r2
   1df58:	10969c17 	ldw	r2,23152(r2)
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   1df5c:	1880141e 	bne	r3,r2,1dfb0 <alt_up_sd_card_fopen+0x24c>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   1df60:	e0bfff8f 	ldh	r2,-2(fp)
   1df64:	100691ba 	slli	r3,r2,6
   1df68:	008000b4 	movhi	r2,2
   1df6c:	1885883a 	add	r2,r3,r2
   1df70:	11169d0b 	ldhu	r4,23156(r2)
   1df74:	e0bffe17 	ldw	r2,-8(fp)
   1df78:	100691ba 	slli	r3,r2,6
   1df7c:	008000b4 	movhi	r2,2
   1df80:	1885883a 	add	r2,r3,r2
   1df84:	10969d0b 	ldhu	r2,23156(r2)
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   1df88:	20ffffcc 	andi	r3,r4,65535
   1df8c:	18e0001c 	xori	r3,r3,32768
   1df90:	18e00004 	addi	r3,r3,-32768
   1df94:	10bfffcc 	andi	r2,r2,65535
   1df98:	10a0001c 	xori	r2,r2,32768
   1df9c:	10a00004 	addi	r2,r2,-32768
   1dfa0:	1880031e 	bne	r3,r2,1dfb0 <alt_up_sd_card_fopen+0x24c>
							{
								// file already in use.
								file_record_index = -2;
   1dfa4:	00bfff84 	movi	r2,-2
   1dfa8:	e0bfff8d 	sth	r2,-2(fp)
								break;
   1dfac:	00002606 	br	1e048 <alt_up_sd_card_fopen+0x2e4>
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1dfb0:	e0bffe17 	ldw	r2,-8(fp)
   1dfb4:	10800044 	addi	r2,r2,1
   1dfb8:	e0bffe15 	stw	r2,-8(fp)
   1dfbc:	e0bffe17 	ldw	r2,-8(fp)
   1dfc0:	10800510 	cmplti	r2,r2,20
   1dfc4:	103fc61e 	bne	r2,zero,1dee0 <alt_up_sd_card_fopen+0x17c>
   1dfc8:	00001f06 	br	1e048 <alt_up_sd_card_fopen+0x2e4>
							}
						}
					}

                }
                else if (create)
   1dfcc:	e0bfeb17 	ldw	r2,-84(fp)
   1dfd0:	10001b26 	beq	r2,zero,1e040 <alt_up_sd_card_fopen+0x2dc>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   1dfd4:	e0bfff8f 	ldh	r2,-2(fp)
   1dfd8:	100691ba 	slli	r3,r2,6
   1dfdc:	008000b4 	movhi	r2,2
   1dfe0:	10969104 	addi	r2,r2,23108
   1dfe4:	1885883a 	add	r2,r3,r2
   1dfe8:	e0ffed04 	addi	r3,fp,-76
   1dfec:	180d883a 	mov	r6,r3
   1dff0:	100b883a 	mov	r5,r2
   1dff4:	e13fec17 	ldw	r4,-80(fp)
   1dff8:	001d3680 	call	1d368 <create_file>
   1dffc:	10000d26 	beq	r2,zero,1e034 <alt_up_sd_card_fopen+0x2d0>
                    {
                        active_files[file_record_index].in_use = true;
   1e000:	e0bfff8f 	ldh	r2,-2(fp)
   1e004:	100891ba 	slli	r4,r2,6
   1e008:	00c00044 	movi	r3,1
   1e00c:	008000b4 	movhi	r2,2
   1e010:	2085883a 	add	r2,r4,r2
   1e014:	10d6a015 	stw	r3,23168(r2)
    					active_files[file_record_index].modified = true;
   1e018:	e0bfff8f 	ldh	r2,-2(fp)
   1e01c:	100891ba 	slli	r4,r2,6
   1e020:	00c00044 	movi	r3,1
   1e024:	008000b4 	movhi	r2,2
   1e028:	2085883a 	add	r2,r4,r2
   1e02c:	10d69f15 	stw	r3,23164(r2)
   1e030:	00000506 	br	1e048 <alt_up_sd_card_fopen+0x2e4>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   1e034:	00bfffc4 	movi	r2,-1
   1e038:	e0bfff8d 	sth	r2,-2(fp)
   1e03c:	00000206 	br	1e048 <alt_up_sd_card_fopen+0x2e4>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   1e040:	00bfffc4 	movi	r2,-1
   1e044:	e0bfff8d 	sth	r2,-2(fp)
                }
    		}
        }
	}

	return file_record_index;
   1e048:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1e04c:	e037883a 	mov	sp,fp
   1e050:	dfc00117 	ldw	ra,4(sp)
   1e054:	df000017 	ldw	fp,0(sp)
   1e058:	dec00204 	addi	sp,sp,8
   1e05c:	f800283a 	ret

0001e060 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1e060:	defffd04 	addi	sp,sp,-12
   1e064:	df000215 	stw	fp,8(sp)
   1e068:	df000204 	addi	fp,sp,8
   1e06c:	2005883a 	mov	r2,r4
   1e070:	2807883a 	mov	r3,r5
   1e074:	e0bfff0d 	sth	r2,-4(fp)
   1e078:	1805883a 	mov	r2,r3
   1e07c:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1e080:	e0bfff0f 	ldh	r2,-4(fp)
   1e084:	10001016 	blt	r2,zero,1e0c8 <alt_up_sd_card_set_attributes+0x68>
   1e088:	e0bfff0f 	ldh	r2,-4(fp)
   1e08c:	10800508 	cmpgei	r2,r2,20
   1e090:	10000d1e 	bne	r2,zero,1e0c8 <alt_up_sd_card_set_attributes+0x68>
    {
        if (active_files[file_handle].in_use)
   1e094:	e0bfff0f 	ldh	r2,-4(fp)
   1e098:	100691ba 	slli	r3,r2,6
   1e09c:	008000b4 	movhi	r2,2
   1e0a0:	1885883a 	add	r2,r3,r2
   1e0a4:	1096a017 	ldw	r2,23168(r2)
   1e0a8:	10000726 	beq	r2,zero,1e0c8 <alt_up_sd_card_set_attributes+0x68>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   1e0ac:	e0bfff0f 	ldh	r2,-4(fp)
   1e0b0:	e0fffe0b 	ldhu	r3,-8(fp)
   1e0b4:	1809883a 	mov	r4,r3
   1e0b8:	100691ba 	slli	r3,r2,6
   1e0bc:	008000b4 	movhi	r2,2
   1e0c0:	1885883a 	add	r2,r3,r2
   1e0c4:	111693c5 	stb	r4,23119(r2)
        }
    }
}
   1e0c8:	0001883a 	nop
   1e0cc:	e037883a 	mov	sp,fp
   1e0d0:	df000017 	ldw	fp,0(sp)
   1e0d4:	dec00104 	addi	sp,sp,4
   1e0d8:	f800283a 	ret

0001e0dc <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   1e0dc:	defffd04 	addi	sp,sp,-12
   1e0e0:	df000215 	stw	fp,8(sp)
   1e0e4:	df000204 	addi	fp,sp,8
   1e0e8:	2005883a 	mov	r2,r4
   1e0ec:	e0bffe0d 	sth	r2,-8(fp)
	short int result = -1;
   1e0f0:	00bfffc4 	movi	r2,-1
   1e0f4:	e0bfff8d 	sth	r2,-2(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1e0f8:	e0bffe0f 	ldh	r2,-8(fp)
   1e0fc:	10001016 	blt	r2,zero,1e140 <alt_up_sd_card_get_attributes+0x64>
   1e100:	e0bffe0f 	ldh	r2,-8(fp)
   1e104:	10800508 	cmpgei	r2,r2,20
   1e108:	10000d1e 	bne	r2,zero,1e140 <alt_up_sd_card_get_attributes+0x64>
    {
        if (active_files[file_handle].in_use)
   1e10c:	e0bffe0f 	ldh	r2,-8(fp)
   1e110:	100691ba 	slli	r3,r2,6
   1e114:	008000b4 	movhi	r2,2
   1e118:	1885883a 	add	r2,r3,r2
   1e11c:	1096a017 	ldw	r2,23168(r2)
   1e120:	10000726 	beq	r2,zero,1e140 <alt_up_sd_card_get_attributes+0x64>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   1e124:	e0bffe0f 	ldh	r2,-8(fp)
   1e128:	100691ba 	slli	r3,r2,6
   1e12c:	008000b4 	movhi	r2,2
   1e130:	1885883a 	add	r2,r3,r2
   1e134:	109693c3 	ldbu	r2,23119(r2)
   1e138:	10803fcc 	andi	r2,r2,255
   1e13c:	e0bfff8d 	sth	r2,-2(fp)
		}
	}
	return result;
   1e140:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1e144:	e037883a 	mov	sp,fp
   1e148:	df000017 	ldw	fp,0(sp)
   1e14c:	dec00104 	addi	sp,sp,4
   1e150:	f800283a 	ret

0001e154 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   1e154:	defffa04 	addi	sp,sp,-24
   1e158:	dfc00515 	stw	ra,20(sp)
   1e15c:	df000415 	stw	fp,16(sp)
   1e160:	df000404 	addi	fp,sp,16
   1e164:	2005883a 	mov	r2,r4
   1e168:	e0bffc0d 	sth	r2,-16(fp)
    short int ch = -1;
   1e16c:	00bfffc4 	movi	r2,-1
   1e170:	e0bfff8d 	sth	r2,-2(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1e174:	e0bffc0f 	ldh	r2,-16(fp)
   1e178:	1000a516 	blt	r2,zero,1e410 <alt_up_sd_card_read+0x2bc>
   1e17c:	e0bffc0f 	ldh	r2,-16(fp)
   1e180:	10800508 	cmpgei	r2,r2,20
   1e184:	1000a21e 	bne	r2,zero,1e410 <alt_up_sd_card_read+0x2bc>
    {
        if (active_files[file_handle].in_use)
   1e188:	e0bffc0f 	ldh	r2,-16(fp)
   1e18c:	100691ba 	slli	r3,r2,6
   1e190:	008000b4 	movhi	r2,2
   1e194:	1885883a 	add	r2,r3,r2
   1e198:	1096a017 	ldw	r2,23168(r2)
   1e19c:	10009c26 	beq	r2,zero,1e410 <alt_up_sd_card_read+0x2bc>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1e1a0:	e0bffc0f 	ldh	r2,-16(fp)
   1e1a4:	100691ba 	slli	r3,r2,6
   1e1a8:	008000b4 	movhi	r2,2
   1e1ac:	1885883a 	add	r2,r3,r2
   1e1b0:	10d69a17 	ldw	r3,23144(r2)
   1e1b4:	e0bffc0f 	ldh	r2,-16(fp)
   1e1b8:	100891ba 	slli	r4,r2,6
   1e1bc:	008000b4 	movhi	r2,2
   1e1c0:	2085883a 	add	r2,r4,r2
   1e1c4:	10969717 	ldw	r2,23132(r2)
   1e1c8:	1880912e 	bgeu	r3,r2,1e410 <alt_up_sd_card_read+0x2bc>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e1cc:	008000b4 	movhi	r2,2
   1e1d0:	10d69017 	ldw	r3,23104(r2)
   1e1d4:	e0bffc0f 	ldh	r2,-16(fp)
   1e1d8:	100891ba 	slli	r4,r2,6
   1e1dc:	008000b4 	movhi	r2,2
   1e1e0:	2085883a 	add	r2,r4,r2
   1e1e4:	10969817 	ldw	r2,23136(r2)
   1e1e8:	113fff84 	addi	r4,r2,-2
   1e1ec:	008000b4 	movhi	r2,2
   1e1f0:	10967f83 	ldbu	r2,23038(r2)
   1e1f4:	10803fcc 	andi	r2,r2,255
   1e1f8:	2085383a 	mul	r2,r4,r2
   1e1fc:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   1e200:	e0bffc0f 	ldh	r2,-16(fp)
   1e204:	100891ba 	slli	r4,r2,6
   1e208:	008000b4 	movhi	r2,2
   1e20c:	2085883a 	add	r2,r4,r2
   1e210:	10969917 	ldw	r2,23140(r2)
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e214:	1885883a 	add	r2,r3,r2
   1e218:	e0bffe15 	stw	r2,-8(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   1e21c:	e0bffc0f 	ldh	r2,-16(fp)
   1e220:	100691ba 	slli	r3,r2,6
   1e224:	008000b4 	movhi	r2,2
   1e228:	1885883a 	add	r2,r3,r2
   1e22c:	10969a17 	ldw	r2,23144(r2)
   1e230:	10005326 	beq	r2,zero,1e380 <alt_up_sd_card_read+0x22c>
   1e234:	e0bffc0f 	ldh	r2,-16(fp)
   1e238:	100691ba 	slli	r3,r2,6
   1e23c:	008000b4 	movhi	r2,2
   1e240:	1885883a 	add	r2,r3,r2
   1e244:	10969a17 	ldw	r2,23144(r2)
   1e248:	10807fcc 	andi	r2,r2,511
   1e24c:	10004c1e 	bne	r2,zero,1e380 <alt_up_sd_card_read+0x22c>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1e250:	e0bffc0f 	ldh	r2,-16(fp)
   1e254:	100691ba 	slli	r3,r2,6
   1e258:	008000b4 	movhi	r2,2
   1e25c:	1885883a 	add	r2,r3,r2
   1e260:	10969917 	ldw	r2,23140(r2)
   1e264:	00c000b4 	movhi	r3,2
   1e268:	18d67f83 	ldbu	r3,23038(r3)
   1e26c:	18c03fcc 	andi	r3,r3,255
   1e270:	18ffffc4 	addi	r3,r3,-1
   1e274:	10c0341e 	bne	r2,r3,1e348 <alt_up_sd_card_read+0x1f4>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1e278:	e0bffc0f 	ldh	r2,-16(fp)
   1e27c:	100691ba 	slli	r3,r2,6
   1e280:	008000b4 	movhi	r2,2
   1e284:	1885883a 	add	r2,r3,r2
   1e288:	10969817 	ldw	r2,23136(r2)
   1e28c:	e0fffd84 	addi	r3,fp,-10
   1e290:	180b883a 	mov	r5,r3
   1e294:	1009883a 	mov	r4,r2
   1e298:	001ae680 	call	1ae68 <get_cluster_flag>
   1e29c:	10002826 	beq	r2,zero,1e340 <alt_up_sd_card_read+0x1ec>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   1e2a0:	e0bffd8b 	ldhu	r2,-10(fp)
   1e2a4:	10bfffcc 	andi	r2,r2,65535
   1e2a8:	10fffe0c 	andi	r3,r2,65528
   1e2ac:	00bffe14 	movui	r2,65528
   1e2b0:	1880021e 	bne	r3,r2,1e2bc <alt_up_sd_card_read+0x168>
                            {
                                /* End of file */
                                return -1;
   1e2b4:	00bfffc4 	movi	r2,-1
   1e2b8:	00005606 	br	1e414 <alt_up_sd_card_read+0x2c0>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1e2bc:	e0fffd8b 	ldhu	r3,-10(fp)
   1e2c0:	e0bffc0f 	ldh	r2,-16(fp)
   1e2c4:	18ffffcc 	andi	r3,r3,65535
   1e2c8:	100891ba 	slli	r4,r2,6
   1e2cc:	008000b4 	movhi	r2,2
   1e2d0:	2085883a 	add	r2,r4,r2
   1e2d4:	10d69815 	stw	r3,23136(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1e2d8:	e0bffc0f 	ldh	r2,-16(fp)
   1e2dc:	100691ba 	slli	r3,r2,6
   1e2e0:	008000b4 	movhi	r2,2
   1e2e4:	1885883a 	add	r2,r3,r2
   1e2e8:	10169915 	stw	zero,23140(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e2ec:	008000b4 	movhi	r2,2
   1e2f0:	10d69017 	ldw	r3,23104(r2)
   1e2f4:	e0bffc0f 	ldh	r2,-16(fp)
   1e2f8:	100891ba 	slli	r4,r2,6
   1e2fc:	008000b4 	movhi	r2,2
   1e300:	2085883a 	add	r2,r4,r2
   1e304:	10969817 	ldw	r2,23136(r2)
   1e308:	113fff84 	addi	r4,r2,-2
   1e30c:	008000b4 	movhi	r2,2
   1e310:	10967f83 	ldbu	r2,23038(r2)
   1e314:	10803fcc 	andi	r2,r2,255
   1e318:	2085383a 	mul	r2,r4,r2
   1e31c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1e320:	e0bffc0f 	ldh	r2,-16(fp)
   1e324:	100891ba 	slli	r4,r2,6
   1e328:	008000b4 	movhi	r2,2
   1e32c:	2085883a 	add	r2,r4,r2
   1e330:	10969917 	ldw	r2,23140(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e334:	1885883a 	add	r2,r3,r2
   1e338:	e0bffe15 	stw	r2,-8(fp)
   1e33c:	00001006 	br	1e380 <alt_up_sd_card_read+0x22c>
                            }
                        }
                        else
                        {
                            return -2;
   1e340:	00bfff84 	movi	r2,-2
   1e344:	00003306 	br	1e414 <alt_up_sd_card_read+0x2c0>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1e348:	e0bffc0f 	ldh	r2,-16(fp)
   1e34c:	100691ba 	slli	r3,r2,6
   1e350:	008000b4 	movhi	r2,2
   1e354:	1885883a 	add	r2,r3,r2
   1e358:	10d69917 	ldw	r3,23140(r2)
   1e35c:	e0bffc0f 	ldh	r2,-16(fp)
   1e360:	18c00044 	addi	r3,r3,1
   1e364:	100891ba 	slli	r4,r2,6
   1e368:	008000b4 	movhi	r2,2
   1e36c:	2085883a 	add	r2,r4,r2
   1e370:	10d69915 	stw	r3,23140(r2)
                        data_sector = data_sector + 1;
   1e374:	e0bffe17 	ldw	r2,-8(fp)
   1e378:	10800044 	addi	r2,r2,1
   1e37c:	e0bffe15 	stw	r2,-8(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   1e380:	d0e75217 	ldw	r3,-25272(gp)
   1e384:	e0bffe17 	ldw	r2,-8(fp)
   1e388:	1885883a 	add	r2,r3,r2
   1e38c:	1007883a 	mov	r3,r2
   1e390:	d0a75617 	ldw	r2,-25256(gp)
   1e394:	18800726 	beq	r3,r2,1e3b4 <alt_up_sd_card_read+0x260>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1e398:	d0a75217 	ldw	r2,-25272(gp)
   1e39c:	100b883a 	mov	r5,r2
   1e3a0:	e13ffe17 	ldw	r4,-8(fp)
   1e3a4:	001ad900 	call	1ad90 <Read_Sector_Data>
   1e3a8:	1000021e 	bne	r2,zero,1e3b4 <alt_up_sd_card_read+0x260>
                    {
						return -2;
   1e3ac:	00bfff84 	movi	r2,-2
   1e3b0:	00001806 	br	1e414 <alt_up_sd_card_read+0x2c0>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   1e3b4:	d0e75117 	ldw	r3,-25276(gp)
   1e3b8:	e0bffc0f 	ldh	r2,-16(fp)
   1e3bc:	100891ba 	slli	r4,r2,6
   1e3c0:	008000b4 	movhi	r2,2
   1e3c4:	2085883a 	add	r2,r4,r2
   1e3c8:	10969a17 	ldw	r2,23144(r2)
   1e3cc:	10807fcc 	andi	r2,r2,511
   1e3d0:	1885883a 	add	r2,r3,r2
   1e3d4:	10800023 	ldbuio	r2,0(r2)
   1e3d8:	10803fcc 	andi	r2,r2,255
   1e3dc:	10803fcc 	andi	r2,r2,255
   1e3e0:	e0bfff8d 	sth	r2,-2(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1e3e4:	e0bffc0f 	ldh	r2,-16(fp)
   1e3e8:	100691ba 	slli	r3,r2,6
   1e3ec:	008000b4 	movhi	r2,2
   1e3f0:	1885883a 	add	r2,r3,r2
   1e3f4:	10d69a17 	ldw	r3,23144(r2)
   1e3f8:	e0bffc0f 	ldh	r2,-16(fp)
   1e3fc:	18c00044 	addi	r3,r3,1
   1e400:	100891ba 	slli	r4,r2,6
   1e404:	008000b4 	movhi	r2,2
   1e408:	2085883a 	add	r2,r4,r2
   1e40c:	10d69a15 	stw	r3,23144(r2)
            }
        }
    }
    
    return ch;
   1e410:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1e414:	e037883a 	mov	sp,fp
   1e418:	dfc00117 	ldw	ra,4(sp)
   1e41c:	df000017 	ldw	fp,0(sp)
   1e420:	dec00204 	addi	sp,sp,8
   1e424:	f800283a 	ret

0001e428 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   1e428:	defff804 	addi	sp,sp,-32
   1e42c:	dfc00715 	stw	ra,28(sp)
   1e430:	df000615 	stw	fp,24(sp)
   1e434:	df000604 	addi	fp,sp,24
   1e438:	2005883a 	mov	r2,r4
   1e43c:	2807883a 	mov	r3,r5
   1e440:	e0bffb0d 	sth	r2,-20(fp)
   1e444:	1805883a 	mov	r2,r3
   1e448:	e0bffa05 	stb	r2,-24(fp)
    bool result = false;
   1e44c:	e03fff15 	stw	zero,-4(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1e450:	e0bffb0f 	ldh	r2,-20(fp)
   1e454:	10012d16 	blt	r2,zero,1e90c <alt_up_sd_card_write+0x4e4>
   1e458:	e0bffb0f 	ldh	r2,-20(fp)
   1e45c:	10800508 	cmpgei	r2,r2,20
   1e460:	10012a1e 	bne	r2,zero,1e90c <alt_up_sd_card_write+0x4e4>
    {
        if (active_files[file_handle].in_use)
   1e464:	e0bffb0f 	ldh	r2,-20(fp)
   1e468:	100691ba 	slli	r3,r2,6
   1e46c:	008000b4 	movhi	r2,2
   1e470:	1885883a 	add	r2,r3,r2
   1e474:	1096a017 	ldw	r2,23168(r2)
   1e478:	10012426 	beq	r2,zero,1e90c <alt_up_sd_card_write+0x4e4>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e47c:	008000b4 	movhi	r2,2
   1e480:	10d69017 	ldw	r3,23104(r2)
   1e484:	e0bffb0f 	ldh	r2,-20(fp)
   1e488:	100891ba 	slli	r4,r2,6
   1e48c:	008000b4 	movhi	r2,2
   1e490:	2085883a 	add	r2,r4,r2
   1e494:	10969817 	ldw	r2,23136(r2)
   1e498:	113fff84 	addi	r4,r2,-2
   1e49c:	008000b4 	movhi	r2,2
   1e4a0:	10967f83 	ldbu	r2,23038(r2)
   1e4a4:	10803fcc 	andi	r2,r2,255
   1e4a8:	2085383a 	mul	r2,r4,r2
   1e4ac:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   1e4b0:	e0bffb0f 	ldh	r2,-20(fp)
   1e4b4:	100891ba 	slli	r4,r2,6
   1e4b8:	008000b4 	movhi	r2,2
   1e4bc:	2085883a 	add	r2,r4,r2
   1e4c0:	10969917 	ldw	r2,23140(r2)
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e4c4:	1885883a 	add	r2,r3,r2
   1e4c8:	e0bffe15 	stw	r2,-8(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   1e4cc:	e0bffb0f 	ldh	r2,-20(fp)
   1e4d0:	100691ba 	slli	r3,r2,6
   1e4d4:	008000b4 	movhi	r2,2
   1e4d8:	1885883a 	add	r2,r3,r2
   1e4dc:	10969a17 	ldw	r2,23144(r2)
   1e4e0:	00c000b4 	movhi	r3,2
   1e4e4:	18d67f0b 	ldhu	r3,23036(r3)
   1e4e8:	18ffffcc 	andi	r3,r3,65535
   1e4ec:	10c9203a 	divu	r4,r2,r3
   1e4f0:	20c7383a 	mul	r3,r4,r3
   1e4f4:	10c5c83a 	sub	r2,r2,r3
   1e4f8:	e0bffd8d 	sth	r2,-10(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   1e4fc:	e0bffb0f 	ldh	r2,-20(fp)
   1e500:	100691ba 	slli	r3,r2,6
   1e504:	008000b4 	movhi	r2,2
   1e508:	1885883a 	add	r2,r3,r2
   1e50c:	10d69a17 	ldw	r3,23144(r2)
   1e510:	e0bffb0f 	ldh	r2,-20(fp)
   1e514:	100891ba 	slli	r4,r2,6
   1e518:	008000b4 	movhi	r2,2
   1e51c:	2085883a 	add	r2,r4,r2
   1e520:	10969717 	ldw	r2,23132(r2)
   1e524:	1880522e 	bgeu	r3,r2,1e670 <alt_up_sd_card_write+0x248>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1e528:	e0bffb0f 	ldh	r2,-20(fp)
   1e52c:	100691ba 	slli	r3,r2,6
   1e530:	008000b4 	movhi	r2,2
   1e534:	1885883a 	add	r2,r3,r2
   1e538:	10969a17 	ldw	r2,23144(r2)
   1e53c:	1000b626 	beq	r2,zero,1e818 <alt_up_sd_card_write+0x3f0>
   1e540:	e0bffd8f 	ldh	r2,-10(fp)
   1e544:	1000b41e 	bne	r2,zero,1e818 <alt_up_sd_card_write+0x3f0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1e548:	e0bffb0f 	ldh	r2,-20(fp)
   1e54c:	100691ba 	slli	r3,r2,6
   1e550:	008000b4 	movhi	r2,2
   1e554:	1885883a 	add	r2,r3,r2
   1e558:	10969917 	ldw	r2,23140(r2)
   1e55c:	00c000b4 	movhi	r3,2
   1e560:	18d67f83 	ldbu	r3,23038(r3)
   1e564:	18c03fcc 	andi	r3,r3,255
   1e568:	18ffffc4 	addi	r3,r3,-1
   1e56c:	10c0311e 	bne	r2,r3,1e634 <alt_up_sd_card_write+0x20c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1e570:	e0bffb0f 	ldh	r2,-20(fp)
   1e574:	100691ba 	slli	r3,r2,6
   1e578:	008000b4 	movhi	r2,2
   1e57c:	1885883a 	add	r2,r3,r2
   1e580:	10969817 	ldw	r2,23136(r2)
   1e584:	e0fffd04 	addi	r3,fp,-12
   1e588:	180b883a 	mov	r5,r3
   1e58c:	1009883a 	mov	r4,r2
   1e590:	001ae680 	call	1ae68 <get_cluster_flag>
   1e594:	10002526 	beq	r2,zero,1e62c <alt_up_sd_card_write+0x204>
                        {
                            if (next_cluster < 0x0000fff8)
   1e598:	e0bffd0b 	ldhu	r2,-12(fp)
   1e59c:	10bfffcc 	andi	r2,r2,65535
   1e5a0:	10bffe28 	cmpgeui	r2,r2,65528
   1e5a4:	10009c1e 	bne	r2,zero,1e818 <alt_up_sd_card_write+0x3f0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   1e5a8:	e0fffd0b 	ldhu	r3,-12(fp)
   1e5ac:	e0bffb0f 	ldh	r2,-20(fp)
   1e5b0:	18ffffcc 	andi	r3,r3,65535
   1e5b4:	100891ba 	slli	r4,r2,6
   1e5b8:	008000b4 	movhi	r2,2
   1e5bc:	2085883a 	add	r2,r4,r2
   1e5c0:	10d69815 	stw	r3,23136(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1e5c4:	e0bffb0f 	ldh	r2,-20(fp)
   1e5c8:	100691ba 	slli	r3,r2,6
   1e5cc:	008000b4 	movhi	r2,2
   1e5d0:	1885883a 	add	r2,r3,r2
   1e5d4:	10169915 	stw	zero,23140(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e5d8:	008000b4 	movhi	r2,2
   1e5dc:	10d69017 	ldw	r3,23104(r2)
   1e5e0:	e0bffb0f 	ldh	r2,-20(fp)
   1e5e4:	100891ba 	slli	r4,r2,6
   1e5e8:	008000b4 	movhi	r2,2
   1e5ec:	2085883a 	add	r2,r4,r2
   1e5f0:	10969817 	ldw	r2,23136(r2)
   1e5f4:	113fff84 	addi	r4,r2,-2
   1e5f8:	008000b4 	movhi	r2,2
   1e5fc:	10967f83 	ldbu	r2,23038(r2)
   1e600:	10803fcc 	andi	r2,r2,255
   1e604:	2085383a 	mul	r2,r4,r2
   1e608:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1e60c:	e0bffb0f 	ldh	r2,-20(fp)
   1e610:	100891ba 	slli	r4,r2,6
   1e614:	008000b4 	movhi	r2,2
   1e618:	2085883a 	add	r2,r4,r2
   1e61c:	10969917 	ldw	r2,23140(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e620:	1885883a 	add	r2,r3,r2
   1e624:	e0bffe15 	stw	r2,-8(fp)
   1e628:	00007b06 	br	1e818 <alt_up_sd_card_write+0x3f0>
                            }
                        }
                        else
                        {
                            return false;
   1e62c:	0005883a 	mov	r2,zero
   1e630:	0000b706 	br	1e910 <alt_up_sd_card_write+0x4e8>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1e634:	e0bffb0f 	ldh	r2,-20(fp)
   1e638:	100691ba 	slli	r3,r2,6
   1e63c:	008000b4 	movhi	r2,2
   1e640:	1885883a 	add	r2,r3,r2
   1e644:	10d69917 	ldw	r3,23140(r2)
   1e648:	e0bffb0f 	ldh	r2,-20(fp)
   1e64c:	18c00044 	addi	r3,r3,1
   1e650:	100891ba 	slli	r4,r2,6
   1e654:	008000b4 	movhi	r2,2
   1e658:	2085883a 	add	r2,r4,r2
   1e65c:	10d69915 	stw	r3,23140(r2)
                        data_sector = data_sector + 1;
   1e660:	e0bffe17 	ldw	r2,-8(fp)
   1e664:	10800044 	addi	r2,r2,1
   1e668:	e0bffe15 	stw	r2,-8(fp)
   1e66c:	00006a06 	br	1e818 <alt_up_sd_card_write+0x3f0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   1e670:	e0bffb0f 	ldh	r2,-20(fp)
   1e674:	100691ba 	slli	r3,r2,6
   1e678:	008000b4 	movhi	r2,2
   1e67c:	1885883a 	add	r2,r3,r2
   1e680:	10969a17 	ldw	r2,23144(r2)
   1e684:	10006426 	beq	r2,zero,1e818 <alt_up_sd_card_write+0x3f0>
   1e688:	e0bffd8f 	ldh	r2,-10(fp)
   1e68c:	1000621e 	bne	r2,zero,1e818 <alt_up_sd_card_write+0x3f0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   1e690:	e0bffb0f 	ldh	r2,-20(fp)
   1e694:	100691ba 	slli	r3,r2,6
   1e698:	008000b4 	movhi	r2,2
   1e69c:	1885883a 	add	r2,r3,r2
   1e6a0:	10969917 	ldw	r2,23140(r2)
   1e6a4:	00c000b4 	movhi	r3,2
   1e6a8:	18d67f83 	ldbu	r3,23038(r3)
   1e6ac:	18c03fcc 	andi	r3,r3,255
   1e6b0:	18ffffc4 	addi	r3,r3,-1
   1e6b4:	10c0361e 	bne	r2,r3,1e790 <alt_up_sd_card_write+0x368>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   1e6b8:	e0bffc04 	addi	r2,fp,-16
   1e6bc:	1009883a 	mov	r4,r2
   1e6c0:	001cce80 	call	1cce8 <find_first_empty_cluster>
   1e6c4:	10003026 	beq	r2,zero,1e788 <alt_up_sd_card_write+0x360>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   1e6c8:	e0bffb0f 	ldh	r2,-20(fp)
   1e6cc:	100691ba 	slli	r3,r2,6
   1e6d0:	008000b4 	movhi	r2,2
   1e6d4:	1885883a 	add	r2,r3,r2
   1e6d8:	10969817 	ldw	r2,23136(r2)
   1e6dc:	e0fffc17 	ldw	r3,-16(fp)
   1e6e0:	18ffffcc 	andi	r3,r3,65535
   1e6e4:	18e0001c 	xori	r3,r3,32768
   1e6e8:	18e00004 	addi	r3,r3,-32768
   1e6ec:	01800044 	movi	r6,1
   1e6f0:	180b883a 	mov	r5,r3
   1e6f4:	1009883a 	mov	r4,r2
   1e6f8:	001af180 	call	1af18 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   1e6fc:	e0bffc17 	ldw	r2,-16(fp)
   1e700:	01800044 	movi	r6,1
   1e704:	017fffc4 	movi	r5,-1
   1e708:	1009883a 	mov	r4,r2
   1e70c:	001af180 	call	1af18 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   1e710:	e0bffb0f 	ldh	r2,-20(fp)
   1e714:	100691ba 	slli	r3,r2,6
   1e718:	008000b4 	movhi	r2,2
   1e71c:	1885883a 	add	r2,r3,r2
   1e720:	10969817 	ldw	r2,23136(r2)
   1e724:	e0fffc17 	ldw	r3,-16(fp)
   1e728:	18ffffcc 	andi	r3,r3,65535
   1e72c:	18e0001c 	xori	r3,r3,32768
   1e730:	18e00004 	addi	r3,r3,-32768
   1e734:	000d883a 	mov	r6,zero
   1e738:	180b883a 	mov	r5,r3
   1e73c:	1009883a 	mov	r4,r2
   1e740:	001af180 	call	1af18 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   1e744:	e0bffc17 	ldw	r2,-16(fp)
   1e748:	000d883a 	mov	r6,zero
   1e74c:	017fffc4 	movi	r5,-1
   1e750:	1009883a 	mov	r4,r2
   1e754:	001af180 	call	1af18 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   1e758:	e0bffb0f 	ldh	r2,-20(fp)
   1e75c:	e0fffc17 	ldw	r3,-16(fp)
   1e760:	100891ba 	slli	r4,r2,6
   1e764:	008000b4 	movhi	r2,2
   1e768:	2085883a 	add	r2,r4,r2
   1e76c:	10d69815 	stw	r3,23136(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   1e770:	e0bffb0f 	ldh	r2,-20(fp)
   1e774:	100691ba 	slli	r3,r2,6
   1e778:	008000b4 	movhi	r2,2
   1e77c:	1885883a 	add	r2,r3,r2
   1e780:	10169915 	stw	zero,23140(r2)
   1e784:	00001006 	br	1e7c8 <alt_up_sd_card_write+0x3a0>
						}
						else
						{
							return false;
   1e788:	0005883a 	mov	r2,zero
   1e78c:	00006006 	br	1e910 <alt_up_sd_card_write+0x4e8>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   1e790:	e0bffb0f 	ldh	r2,-20(fp)
   1e794:	100691ba 	slli	r3,r2,6
   1e798:	008000b4 	movhi	r2,2
   1e79c:	1885883a 	add	r2,r3,r2
   1e7a0:	11169a17 	ldw	r4,23144(r2)
   1e7a4:	008000b4 	movhi	r2,2
   1e7a8:	10967f0b 	ldhu	r2,23036(r2)
   1e7ac:	10ffffcc 	andi	r3,r2,65535
   1e7b0:	e0bffb0f 	ldh	r2,-20(fp)
   1e7b4:	20c7203a 	divu	r3,r4,r3
   1e7b8:	100891ba 	slli	r4,r2,6
   1e7bc:	008000b4 	movhi	r2,2
   1e7c0:	2085883a 	add	r2,r4,r2
   1e7c4:	10d69915 	stw	r3,23140(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e7c8:	008000b4 	movhi	r2,2
   1e7cc:	10d69017 	ldw	r3,23104(r2)
   1e7d0:	e0bffb0f 	ldh	r2,-20(fp)
   1e7d4:	100891ba 	slli	r4,r2,6
   1e7d8:	008000b4 	movhi	r2,2
   1e7dc:	2085883a 	add	r2,r4,r2
   1e7e0:	10969817 	ldw	r2,23136(r2)
   1e7e4:	113fff84 	addi	r4,r2,-2
   1e7e8:	008000b4 	movhi	r2,2
   1e7ec:	10967f83 	ldbu	r2,23038(r2)
   1e7f0:	10803fcc 	andi	r2,r2,255
   1e7f4:	2085383a 	mul	r2,r4,r2
   1e7f8:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   1e7fc:	e0bffb0f 	ldh	r2,-20(fp)
   1e800:	100891ba 	slli	r4,r2,6
   1e804:	008000b4 	movhi	r2,2
   1e808:	2085883a 	add	r2,r4,r2
   1e80c:	10969917 	ldw	r2,23140(r2)
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1e810:	1885883a 	add	r2,r3,r2
   1e814:	e0bffe15 	stw	r2,-8(fp)
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   1e818:	d0e75217 	ldw	r3,-25272(gp)
   1e81c:	e0bffe17 	ldw	r2,-8(fp)
   1e820:	1885883a 	add	r2,r3,r2
   1e824:	1007883a 	mov	r3,r2
   1e828:	d0a75617 	ldw	r2,-25256(gp)
   1e82c:	18800726 	beq	r3,r2,1e84c <alt_up_sd_card_write+0x424>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   1e830:	d0a75217 	ldw	r2,-25272(gp)
   1e834:	100b883a 	mov	r5,r2
   1e838:	e13ffe17 	ldw	r4,-8(fp)
   1e83c:	001ad900 	call	1ad90 <Read_Sector_Data>
   1e840:	1000021e 	bne	r2,zero,1e84c <alt_up_sd_card_write+0x424>
                {
					return false;
   1e844:	0005883a 	mov	r2,zero
   1e848:	00003106 	br	1e910 <alt_up_sd_card_write+0x4e8>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   1e84c:	d0e75117 	ldw	r3,-25276(gp)
   1e850:	e0bffd8f 	ldh	r2,-10(fp)
   1e854:	1885883a 	add	r2,r3,r2
   1e858:	e0fffa07 	ldb	r3,-24(fp)
   1e85c:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   1e860:	e0bffb0f 	ldh	r2,-20(fp)
   1e864:	100691ba 	slli	r3,r2,6
   1e868:	008000b4 	movhi	r2,2
   1e86c:	1885883a 	add	r2,r3,r2
   1e870:	10d69a17 	ldw	r3,23144(r2)
   1e874:	e0bffb0f 	ldh	r2,-20(fp)
   1e878:	18c00044 	addi	r3,r3,1
   1e87c:	100891ba 	slli	r4,r2,6
   1e880:	008000b4 	movhi	r2,2
   1e884:	2085883a 	add	r2,r4,r2
   1e888:	10d69a15 	stw	r3,23144(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   1e88c:	e0bffb0f 	ldh	r2,-20(fp)
   1e890:	100691ba 	slli	r3,r2,6
   1e894:	008000b4 	movhi	r2,2
   1e898:	1885883a 	add	r2,r3,r2
   1e89c:	10d69a17 	ldw	r3,23144(r2)
   1e8a0:	e0bffb0f 	ldh	r2,-20(fp)
   1e8a4:	100891ba 	slli	r4,r2,6
   1e8a8:	008000b4 	movhi	r2,2
   1e8ac:	2085883a 	add	r2,r4,r2
   1e8b0:	10969717 	ldw	r2,23132(r2)
   1e8b4:	18801136 	bltu	r3,r2,1e8fc <alt_up_sd_card_write+0x4d4>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   1e8b8:	e0bffb0f 	ldh	r2,-20(fp)
   1e8bc:	100691ba 	slli	r3,r2,6
   1e8c0:	008000b4 	movhi	r2,2
   1e8c4:	1885883a 	add	r2,r3,r2
   1e8c8:	10d69717 	ldw	r3,23132(r2)
   1e8cc:	e0bffb0f 	ldh	r2,-20(fp)
   1e8d0:	18c00044 	addi	r3,r3,1
   1e8d4:	100891ba 	slli	r4,r2,6
   1e8d8:	008000b4 	movhi	r2,2
   1e8dc:	2085883a 	add	r2,r4,r2
   1e8e0:	10d69715 	stw	r3,23132(r2)
				active_files[file_handle].modified = true;
   1e8e4:	e0bffb0f 	ldh	r2,-20(fp)
   1e8e8:	100891ba 	slli	r4,r2,6
   1e8ec:	00c00044 	movi	r3,1
   1e8f0:	008000b4 	movhi	r2,2
   1e8f4:	2085883a 	add	r2,r4,r2
   1e8f8:	10d69f15 	stw	r3,23164(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   1e8fc:	00800044 	movi	r2,1
   1e900:	d0a75515 	stw	r2,-25260(gp)
			result = true;
   1e904:	00800044 	movi	r2,1
   1e908:	e0bfff15 	stw	r2,-4(fp)
		}
    }
    
    return result;
   1e90c:	e0bfff17 	ldw	r2,-4(fp)
}
   1e910:	e037883a 	mov	sp,fp
   1e914:	dfc00117 	ldw	ra,4(sp)
   1e918:	df000017 	ldw	fp,0(sp)
   1e91c:	dec00204 	addi	sp,sp,8
   1e920:	f800283a 	ret

0001e924 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   1e924:	defffb04 	addi	sp,sp,-20
   1e928:	dfc00415 	stw	ra,16(sp)
   1e92c:	df000315 	stw	fp,12(sp)
   1e930:	df000304 	addi	fp,sp,12
   1e934:	2005883a 	mov	r2,r4
   1e938:	e0bffd0d 	sth	r2,-12(fp)
    bool result = false;
   1e93c:	e03fff15 	stw	zero,-4(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   1e940:	001d8240 	call	1d824 <alt_up_sd_card_is_Present>
   1e944:	10004f26 	beq	r2,zero,1ea84 <alt_up_sd_card_fclose+0x160>
   1e948:	d0a74b17 	ldw	r2,-25300(gp)
   1e94c:	10004d26 	beq	r2,zero,1ea84 <alt_up_sd_card_fclose+0x160>
    {
        if (active_files[file_handle].in_use) 
   1e950:	e0bffd0f 	ldh	r2,-12(fp)
   1e954:	100691ba 	slli	r3,r2,6
   1e958:	008000b4 	movhi	r2,2
   1e95c:	1885883a 	add	r2,r3,r2
   1e960:	1096a017 	ldw	r2,23168(r2)
   1e964:	10004726 	beq	r2,zero,1ea84 <alt_up_sd_card_fclose+0x160>
        {
			if (active_files[file_handle].modified)
   1e968:	e0bffd0f 	ldh	r2,-12(fp)
   1e96c:	100691ba 	slli	r3,r2,6
   1e970:	008000b4 	movhi	r2,2
   1e974:	1885883a 	add	r2,r3,r2
   1e978:	10969f17 	ldw	r2,23164(r2)
   1e97c:	10003a26 	beq	r2,zero,1ea68 <alt_up_sd_card_fclose+0x144>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   1e980:	e0bffd0f 	ldh	r2,-12(fp)
   1e984:	100691ba 	slli	r3,r2,6
   1e988:	008000b4 	movhi	r2,2
   1e98c:	1885883a 	add	r2,r3,r2
   1e990:	10969c17 	ldw	r2,23152(r2)
   1e994:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   1e998:	e0bffd0f 	ldh	r2,-12(fp)
   1e99c:	100691ba 	slli	r3,r2,6
   1e9a0:	008000b4 	movhi	r2,2
   1e9a4:	1885883a 	add	r2,r3,r2
   1e9a8:	10969b17 	ldw	r2,23148(r2)
   1e9ac:	1000061e 	bne	r2,zero,1e9c8 <alt_up_sd_card_fclose+0xa4>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   1e9b0:	008000b4 	movhi	r2,2
   1e9b4:	10968f17 	ldw	r2,23100(r2)
   1e9b8:	e0fffe17 	ldw	r3,-8(fp)
   1e9bc:	1885883a 	add	r2,r3,r2
   1e9c0:	e0bffe15 	stw	r2,-8(fp)
   1e9c4:	00001006 	br	1ea08 <alt_up_sd_card_fclose+0xe4>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1e9c8:	008000b4 	movhi	r2,2
   1e9cc:	10d69017 	ldw	r3,23104(r2)
   1e9d0:	e0bffe17 	ldw	r2,-8(fp)
   1e9d4:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   1e9d8:	e0bffd0f 	ldh	r2,-12(fp)
   1e9dc:	100891ba 	slli	r4,r2,6
   1e9e0:	008000b4 	movhi	r2,2
   1e9e4:	2085883a 	add	r2,r4,r2
   1e9e8:	10969b17 	ldw	r2,23148(r2)
   1e9ec:	113fff84 	addi	r4,r2,-2
   1e9f0:	008000b4 	movhi	r2,2
   1e9f4:	10967f83 	ldbu	r2,23038(r2)
   1e9f8:	10803fcc 	andi	r2,r2,255
   1e9fc:	2085383a 	mul	r2,r4,r2
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   1ea00:	1885883a 	add	r2,r3,r2
   1ea04:	e0bffe15 	stw	r2,-8(fp)
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   1ea08:	e0bffe17 	ldw	r2,-8(fp)
   1ea0c:	d0e75217 	ldw	r3,-25272(gp)
   1ea10:	180b883a 	mov	r5,r3
   1ea14:	1009883a 	mov	r4,r2
   1ea18:	001ad900 	call	1ad90 <Read_Sector_Data>
   1ea1c:	10001226 	beq	r2,zero,1ea68 <alt_up_sd_card_fclose+0x144>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   1ea20:	e0bffd0f 	ldh	r2,-12(fp)
   1ea24:	100691ba 	slli	r3,r2,6
   1ea28:	008000b4 	movhi	r2,2
   1ea2c:	1885883a 	add	r2,r3,r2
   1ea30:	10969d0b 	ldhu	r2,23156(r2)
   1ea34:	113fffcc 	andi	r4,r2,65535
   1ea38:	2120001c 	xori	r4,r4,32768
   1ea3c:	21200004 	addi	r4,r4,-32768
   1ea40:	e0bffd0f 	ldh	r2,-12(fp)
   1ea44:	100691ba 	slli	r3,r2,6
   1ea48:	008000b4 	movhi	r2,2
   1ea4c:	10969104 	addi	r2,r2,23108
   1ea50:	1885883a 	add	r2,r3,r2
   1ea54:	100b883a 	mov	r5,r2
   1ea58:	001b4140 	call	1b414 <Write_File_Record_At_Offset>
   1ea5c:	10000226 	beq	r2,zero,1ea68 <alt_up_sd_card_fclose+0x144>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   1ea60:	001ad440 	call	1ad44 <Save_Modified_Sector>
   1ea64:	e0bfff15 	stw	r2,-4(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   1ea68:	e0bffd0f 	ldh	r2,-12(fp)
   1ea6c:	100691ba 	slli	r3,r2,6
   1ea70:	008000b4 	movhi	r2,2
   1ea74:	1885883a 	add	r2,r3,r2
   1ea78:	1016a015 	stw	zero,23168(r2)
			result = true;
   1ea7c:	00800044 	movi	r2,1
   1ea80:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    return result;
   1ea84:	e0bfff17 	ldw	r2,-4(fp)
}
   1ea88:	e037883a 	mov	sp,fp
   1ea8c:	dfc00117 	ldw	ra,4(sp)
   1ea90:	df000017 	ldw	fp,0(sp)
   1ea94:	dec00204 	addi	sp,sp,8
   1ea98:	f800283a 	ret

0001ea9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1ea9c:	defffa04 	addi	sp,sp,-24
   1eaa0:	dfc00515 	stw	ra,20(sp)
   1eaa4:	df000415 	stw	fp,16(sp)
   1eaa8:	df000404 	addi	fp,sp,16
   1eaac:	e13ffe15 	stw	r4,-8(fp)
   1eab0:	e17ffd15 	stw	r5,-12(fp)
   1eab4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1eab8:	e0bffe17 	ldw	r2,-8(fp)
   1eabc:	10800017 	ldw	r2,0(r2)
   1eac0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1eac4:	e0bfff17 	ldw	r2,-4(fp)
   1eac8:	10c00a04 	addi	r3,r2,40
   1eacc:	e0bffe17 	ldw	r2,-8(fp)
   1ead0:	10800217 	ldw	r2,8(r2)
   1ead4:	100f883a 	mov	r7,r2
   1ead8:	e1bffc17 	ldw	r6,-16(fp)
   1eadc:	e17ffd17 	ldw	r5,-12(fp)
   1eae0:	1809883a 	mov	r4,r3
   1eae4:	001f0c00 	call	1f0c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1eae8:	e037883a 	mov	sp,fp
   1eaec:	dfc00117 	ldw	ra,4(sp)
   1eaf0:	df000017 	ldw	fp,0(sp)
   1eaf4:	dec00204 	addi	sp,sp,8
   1eaf8:	f800283a 	ret

0001eafc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1eafc:	defffa04 	addi	sp,sp,-24
   1eb00:	dfc00515 	stw	ra,20(sp)
   1eb04:	df000415 	stw	fp,16(sp)
   1eb08:	df000404 	addi	fp,sp,16
   1eb0c:	e13ffe15 	stw	r4,-8(fp)
   1eb10:	e17ffd15 	stw	r5,-12(fp)
   1eb14:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1eb18:	e0bffe17 	ldw	r2,-8(fp)
   1eb1c:	10800017 	ldw	r2,0(r2)
   1eb20:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1eb24:	e0bfff17 	ldw	r2,-4(fp)
   1eb28:	10c00a04 	addi	r3,r2,40
   1eb2c:	e0bffe17 	ldw	r2,-8(fp)
   1eb30:	10800217 	ldw	r2,8(r2)
   1eb34:	100f883a 	mov	r7,r2
   1eb38:	e1bffc17 	ldw	r6,-16(fp)
   1eb3c:	e17ffd17 	ldw	r5,-12(fp)
   1eb40:	1809883a 	mov	r4,r3
   1eb44:	001f2e00 	call	1f2e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1eb48:	e037883a 	mov	sp,fp
   1eb4c:	dfc00117 	ldw	ra,4(sp)
   1eb50:	df000017 	ldw	fp,0(sp)
   1eb54:	dec00204 	addi	sp,sp,8
   1eb58:	f800283a 	ret

0001eb5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1eb5c:	defffc04 	addi	sp,sp,-16
   1eb60:	dfc00315 	stw	ra,12(sp)
   1eb64:	df000215 	stw	fp,8(sp)
   1eb68:	df000204 	addi	fp,sp,8
   1eb6c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1eb70:	e0bffe17 	ldw	r2,-8(fp)
   1eb74:	10800017 	ldw	r2,0(r2)
   1eb78:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1eb7c:	e0bfff17 	ldw	r2,-4(fp)
   1eb80:	10c00a04 	addi	r3,r2,40
   1eb84:	e0bffe17 	ldw	r2,-8(fp)
   1eb88:	10800217 	ldw	r2,8(r2)
   1eb8c:	100b883a 	mov	r5,r2
   1eb90:	1809883a 	mov	r4,r3
   1eb94:	001ef640 	call	1ef64 <altera_avalon_jtag_uart_close>
}
   1eb98:	e037883a 	mov	sp,fp
   1eb9c:	dfc00117 	ldw	ra,4(sp)
   1eba0:	df000017 	ldw	fp,0(sp)
   1eba4:	dec00204 	addi	sp,sp,8
   1eba8:	f800283a 	ret

0001ebac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1ebac:	defffa04 	addi	sp,sp,-24
   1ebb0:	dfc00515 	stw	ra,20(sp)
   1ebb4:	df000415 	stw	fp,16(sp)
   1ebb8:	df000404 	addi	fp,sp,16
   1ebbc:	e13ffe15 	stw	r4,-8(fp)
   1ebc0:	e17ffd15 	stw	r5,-12(fp)
   1ebc4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1ebc8:	e0bffe17 	ldw	r2,-8(fp)
   1ebcc:	10800017 	ldw	r2,0(r2)
   1ebd0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1ebd4:	e0bfff17 	ldw	r2,-4(fp)
   1ebd8:	10800a04 	addi	r2,r2,40
   1ebdc:	e1bffc17 	ldw	r6,-16(fp)
   1ebe0:	e17ffd17 	ldw	r5,-12(fp)
   1ebe4:	1009883a 	mov	r4,r2
   1ebe8:	001efcc0 	call	1efcc <altera_avalon_jtag_uart_ioctl>
}
   1ebec:	e037883a 	mov	sp,fp
   1ebf0:	dfc00117 	ldw	ra,4(sp)
   1ebf4:	df000017 	ldw	fp,0(sp)
   1ebf8:	dec00204 	addi	sp,sp,8
   1ebfc:	f800283a 	ret

0001ec00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1ec00:	defffb04 	addi	sp,sp,-20
   1ec04:	dfc00415 	stw	ra,16(sp)
   1ec08:	df000315 	stw	fp,12(sp)
   1ec0c:	df000304 	addi	fp,sp,12
   1ec10:	e13fff15 	stw	r4,-4(fp)
   1ec14:	e17ffe15 	stw	r5,-8(fp)
   1ec18:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ec1c:	e0bfff17 	ldw	r2,-4(fp)
   1ec20:	00c00044 	movi	r3,1
   1ec24:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1ec28:	e0bfff17 	ldw	r2,-4(fp)
   1ec2c:	10800017 	ldw	r2,0(r2)
   1ec30:	10800104 	addi	r2,r2,4
   1ec34:	1007883a 	mov	r3,r2
   1ec38:	e0bfff17 	ldw	r2,-4(fp)
   1ec3c:	10800817 	ldw	r2,32(r2)
   1ec40:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1ec44:	e0bffd17 	ldw	r2,-12(fp)
   1ec48:	018000b4 	movhi	r6,2
   1ec4c:	31bb2d04 	addi	r6,r6,-4940
   1ec50:	e17fff17 	ldw	r5,-4(fp)
   1ec54:	1009883a 	mov	r4,r2
   1ec58:	00203ac0 	call	203ac <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1ec5c:	e0bfff17 	ldw	r2,-4(fp)
   1ec60:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1ec64:	e0bfff17 	ldw	r2,-4(fp)
   1ec68:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1ec6c:	d0e75817 	ldw	r3,-25248(gp)
   1ec70:	e1ffff17 	ldw	r7,-4(fp)
   1ec74:	018000b4 	movhi	r6,2
   1ec78:	31bbb104 	addi	r6,r6,-4412
   1ec7c:	180b883a 	mov	r5,r3
   1ec80:	1009883a 	mov	r4,r2
   1ec84:	001fe900 	call	1fe90 <alt_alarm_start>
   1ec88:	1000040e 	bge	r2,zero,1ec9c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1ec8c:	e0ffff17 	ldw	r3,-4(fp)
   1ec90:	00a00034 	movhi	r2,32768
   1ec94:	10bfffc4 	addi	r2,r2,-1
   1ec98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1ec9c:	0001883a 	nop
   1eca0:	e037883a 	mov	sp,fp
   1eca4:	dfc00117 	ldw	ra,4(sp)
   1eca8:	df000017 	ldw	fp,0(sp)
   1ecac:	dec00204 	addi	sp,sp,8
   1ecb0:	f800283a 	ret

0001ecb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1ecb4:	defff704 	addi	sp,sp,-36
   1ecb8:	df000815 	stw	fp,32(sp)
   1ecbc:	df000804 	addi	fp,sp,32
   1ecc0:	e13ff915 	stw	r4,-28(fp)
   1ecc4:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1ecc8:	e0bff917 	ldw	r2,-28(fp)
   1eccc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   1ecd0:	e0bffd17 	ldw	r2,-12(fp)
   1ecd4:	10800017 	ldw	r2,0(r2)
   1ecd8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ecdc:	e0bffc17 	ldw	r2,-16(fp)
   1ece0:	10800104 	addi	r2,r2,4
   1ece4:	10800037 	ldwio	r2,0(r2)
   1ece8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1ecec:	e0bffb17 	ldw	r2,-20(fp)
   1ecf0:	1080c00c 	andi	r2,r2,768
   1ecf4:	10006d26 	beq	r2,zero,1eeac <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1ecf8:	e0bffb17 	ldw	r2,-20(fp)
   1ecfc:	1080400c 	andi	r2,r2,256
   1ed00:	10003526 	beq	r2,zero,1edd8 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1ed04:	00800074 	movhi	r2,1
   1ed08:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ed0c:	e0bffd17 	ldw	r2,-12(fp)
   1ed10:	10800a17 	ldw	r2,40(r2)
   1ed14:	10800044 	addi	r2,r2,1
   1ed18:	1081ffcc 	andi	r2,r2,2047
   1ed1c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1ed20:	e0bffd17 	ldw	r2,-12(fp)
   1ed24:	10800b17 	ldw	r2,44(r2)
   1ed28:	e0fffa17 	ldw	r3,-24(fp)
   1ed2c:	18801526 	beq	r3,r2,1ed84 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1ed30:	e0bffc17 	ldw	r2,-16(fp)
   1ed34:	10800037 	ldwio	r2,0(r2)
   1ed38:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1ed3c:	e0bfff17 	ldw	r2,-4(fp)
   1ed40:	10a0000c 	andi	r2,r2,32768
   1ed44:	10001126 	beq	r2,zero,1ed8c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1ed48:	e0bffd17 	ldw	r2,-12(fp)
   1ed4c:	10800a17 	ldw	r2,40(r2)
   1ed50:	e0ffff17 	ldw	r3,-4(fp)
   1ed54:	1809883a 	mov	r4,r3
   1ed58:	e0fffd17 	ldw	r3,-12(fp)
   1ed5c:	1885883a 	add	r2,r3,r2
   1ed60:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ed64:	e0bffd17 	ldw	r2,-12(fp)
   1ed68:	10800a17 	ldw	r2,40(r2)
   1ed6c:	10800044 	addi	r2,r2,1
   1ed70:	10c1ffcc 	andi	r3,r2,2047
   1ed74:	e0bffd17 	ldw	r2,-12(fp)
   1ed78:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1ed7c:	0001883a 	nop
      {
   1ed80:	003fe206 	br	1ed0c <altera_avalon_jtag_uart_irq+0x58>
          break;
   1ed84:	0001883a 	nop
   1ed88:	00000106 	br	1ed90 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   1ed8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1ed90:	e0bfff17 	ldw	r2,-4(fp)
   1ed94:	10bfffec 	andhi	r2,r2,65535
   1ed98:	10000f26 	beq	r2,zero,1edd8 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ed9c:	e0bffd17 	ldw	r2,-12(fp)
   1eda0:	10c00817 	ldw	r3,32(r2)
   1eda4:	00bfff84 	movi	r2,-2
   1eda8:	1886703a 	and	r3,r3,r2
   1edac:	e0bffd17 	ldw	r2,-12(fp)
   1edb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1edb4:	e0bffc17 	ldw	r2,-16(fp)
   1edb8:	10800104 	addi	r2,r2,4
   1edbc:	1007883a 	mov	r3,r2
   1edc0:	e0bffd17 	ldw	r2,-12(fp)
   1edc4:	10800817 	ldw	r2,32(r2)
   1edc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1edcc:	e0bffc17 	ldw	r2,-16(fp)
   1edd0:	10800104 	addi	r2,r2,4
   1edd4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1edd8:	e0bffb17 	ldw	r2,-20(fp)
   1eddc:	1080800c 	andi	r2,r2,512
   1ede0:	103fbe26 	beq	r2,zero,1ecdc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1ede4:	e0bffb17 	ldw	r2,-20(fp)
   1ede8:	1004d43a 	srli	r2,r2,16
   1edec:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1edf0:	00001406 	br	1ee44 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1edf4:	e0bffc17 	ldw	r2,-16(fp)
   1edf8:	e0fffd17 	ldw	r3,-12(fp)
   1edfc:	18c00d17 	ldw	r3,52(r3)
   1ee00:	e13ffd17 	ldw	r4,-12(fp)
   1ee04:	20c7883a 	add	r3,r4,r3
   1ee08:	18c20e03 	ldbu	r3,2104(r3)
   1ee0c:	18c03fcc 	andi	r3,r3,255
   1ee10:	18c0201c 	xori	r3,r3,128
   1ee14:	18ffe004 	addi	r3,r3,-128
   1ee18:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ee1c:	e0bffd17 	ldw	r2,-12(fp)
   1ee20:	10800d17 	ldw	r2,52(r2)
   1ee24:	10800044 	addi	r2,r2,1
   1ee28:	10c1ffcc 	andi	r3,r2,2047
   1ee2c:	e0bffd17 	ldw	r2,-12(fp)
   1ee30:	10c00d15 	stw	r3,52(r2)
   1ee34:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1ee38:	e0bffe17 	ldw	r2,-8(fp)
   1ee3c:	10bfffc4 	addi	r2,r2,-1
   1ee40:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   1ee44:	e0bffe17 	ldw	r2,-8(fp)
   1ee48:	10000526 	beq	r2,zero,1ee60 <altera_avalon_jtag_uart_irq+0x1ac>
   1ee4c:	e0bffd17 	ldw	r2,-12(fp)
   1ee50:	10c00d17 	ldw	r3,52(r2)
   1ee54:	e0bffd17 	ldw	r2,-12(fp)
   1ee58:	10800c17 	ldw	r2,48(r2)
   1ee5c:	18bfe51e 	bne	r3,r2,1edf4 <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
   1ee60:	e0bffe17 	ldw	r2,-8(fp)
   1ee64:	103f9d26 	beq	r2,zero,1ecdc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1ee68:	e0bffd17 	ldw	r2,-12(fp)
   1ee6c:	10c00817 	ldw	r3,32(r2)
   1ee70:	00bfff44 	movi	r2,-3
   1ee74:	1886703a 	and	r3,r3,r2
   1ee78:	e0bffd17 	ldw	r2,-12(fp)
   1ee7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ee80:	e0bffd17 	ldw	r2,-12(fp)
   1ee84:	10800017 	ldw	r2,0(r2)
   1ee88:	10800104 	addi	r2,r2,4
   1ee8c:	1007883a 	mov	r3,r2
   1ee90:	e0bffd17 	ldw	r2,-12(fp)
   1ee94:	10800817 	ldw	r2,32(r2)
   1ee98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1ee9c:	e0bffc17 	ldw	r2,-16(fp)
   1eea0:	10800104 	addi	r2,r2,4
   1eea4:	10800037 	ldwio	r2,0(r2)
  {
   1eea8:	003f8c06 	br	1ecdc <altera_avalon_jtag_uart_irq+0x28>
      break;
   1eeac:	0001883a 	nop
      }
    }
  }
}
   1eeb0:	0001883a 	nop
   1eeb4:	e037883a 	mov	sp,fp
   1eeb8:	df000017 	ldw	fp,0(sp)
   1eebc:	dec00104 	addi	sp,sp,4
   1eec0:	f800283a 	ret

0001eec4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1eec4:	defffc04 	addi	sp,sp,-16
   1eec8:	df000315 	stw	fp,12(sp)
   1eecc:	df000304 	addi	fp,sp,12
   1eed0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1eed4:	e0bffd17 	ldw	r2,-12(fp)
   1eed8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1eedc:	e0bfff17 	ldw	r2,-4(fp)
   1eee0:	10800017 	ldw	r2,0(r2)
   1eee4:	10800104 	addi	r2,r2,4
   1eee8:	10800037 	ldwio	r2,0(r2)
   1eeec:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1eef0:	e0bffe17 	ldw	r2,-8(fp)
   1eef4:	1081000c 	andi	r2,r2,1024
   1eef8:	10000b26 	beq	r2,zero,1ef28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1eefc:	e0bfff17 	ldw	r2,-4(fp)
   1ef00:	10800017 	ldw	r2,0(r2)
   1ef04:	10800104 	addi	r2,r2,4
   1ef08:	1007883a 	mov	r3,r2
   1ef0c:	e0bfff17 	ldw	r2,-4(fp)
   1ef10:	10800817 	ldw	r2,32(r2)
   1ef14:	10810014 	ori	r2,r2,1024
   1ef18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1ef1c:	e0bfff17 	ldw	r2,-4(fp)
   1ef20:	10000915 	stw	zero,36(r2)
   1ef24:	00000a06 	br	1ef50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1ef28:	e0bfff17 	ldw	r2,-4(fp)
   1ef2c:	10c00917 	ldw	r3,36(r2)
   1ef30:	00a00034 	movhi	r2,32768
   1ef34:	10bfff04 	addi	r2,r2,-4
   1ef38:	10c00536 	bltu	r2,r3,1ef50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1ef3c:	e0bfff17 	ldw	r2,-4(fp)
   1ef40:	10800917 	ldw	r2,36(r2)
   1ef44:	10c00044 	addi	r3,r2,1
   1ef48:	e0bfff17 	ldw	r2,-4(fp)
   1ef4c:	10c00915 	stw	r3,36(r2)
   1ef50:	d0a75817 	ldw	r2,-25248(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1ef54:	e037883a 	mov	sp,fp
   1ef58:	df000017 	ldw	fp,0(sp)
   1ef5c:	dec00104 	addi	sp,sp,4
   1ef60:	f800283a 	ret

0001ef64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1ef64:	defffd04 	addi	sp,sp,-12
   1ef68:	df000215 	stw	fp,8(sp)
   1ef6c:	df000204 	addi	fp,sp,8
   1ef70:	e13fff15 	stw	r4,-4(fp)
   1ef74:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ef78:	00000506 	br	1ef90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1ef7c:	e0bffe17 	ldw	r2,-8(fp)
   1ef80:	1090000c 	andi	r2,r2,16384
   1ef84:	10000226 	beq	r2,zero,1ef90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1ef88:	00bffd44 	movi	r2,-11
   1ef8c:	00000b06 	br	1efbc <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1ef90:	e0bfff17 	ldw	r2,-4(fp)
   1ef94:	10c00d17 	ldw	r3,52(r2)
   1ef98:	e0bfff17 	ldw	r2,-4(fp)
   1ef9c:	10800c17 	ldw	r2,48(r2)
   1efa0:	18800526 	beq	r3,r2,1efb8 <altera_avalon_jtag_uart_close+0x54>
   1efa4:	e0bfff17 	ldw	r2,-4(fp)
   1efa8:	10c00917 	ldw	r3,36(r2)
   1efac:	e0bfff17 	ldw	r2,-4(fp)
   1efb0:	10800117 	ldw	r2,4(r2)
   1efb4:	18bff136 	bltu	r3,r2,1ef7c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   1efb8:	0005883a 	mov	r2,zero
}
   1efbc:	e037883a 	mov	sp,fp
   1efc0:	df000017 	ldw	fp,0(sp)
   1efc4:	dec00104 	addi	sp,sp,4
   1efc8:	f800283a 	ret

0001efcc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1efcc:	defffa04 	addi	sp,sp,-24
   1efd0:	df000515 	stw	fp,20(sp)
   1efd4:	df000504 	addi	fp,sp,20
   1efd8:	e13ffd15 	stw	r4,-12(fp)
   1efdc:	e17ffc15 	stw	r5,-16(fp)
   1efe0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   1efe4:	00bff9c4 	movi	r2,-25
   1efe8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   1efec:	e0bffc17 	ldw	r2,-16(fp)
   1eff0:	109a8060 	cmpeqi	r2,r2,27137
   1eff4:	1000041e 	bne	r2,zero,1f008 <altera_avalon_jtag_uart_ioctl+0x3c>
   1eff8:	e0bffc17 	ldw	r2,-16(fp)
   1effc:	109a80a0 	cmpeqi	r2,r2,27138
   1f000:	1000181e 	bne	r2,zero,1f064 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1f004:	00002906 	br	1f0ac <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   1f008:	e0bffd17 	ldw	r2,-12(fp)
   1f00c:	10c00117 	ldw	r3,4(r2)
   1f010:	00a00034 	movhi	r2,32768
   1f014:	10bfffc4 	addi	r2,r2,-1
   1f018:	18802126 	beq	r3,r2,1f0a0 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   1f01c:	e0bffb17 	ldw	r2,-20(fp)
   1f020:	10800017 	ldw	r2,0(r2)
   1f024:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1f028:	e0bffe17 	ldw	r2,-8(fp)
   1f02c:	10800090 	cmplti	r2,r2,2
   1f030:	1000061e 	bne	r2,zero,1f04c <altera_avalon_jtag_uart_ioctl+0x80>
   1f034:	e0fffe17 	ldw	r3,-8(fp)
   1f038:	00a00034 	movhi	r2,32768
   1f03c:	10bfffc4 	addi	r2,r2,-1
   1f040:	18800226 	beq	r3,r2,1f04c <altera_avalon_jtag_uart_ioctl+0x80>
   1f044:	e0bffe17 	ldw	r2,-8(fp)
   1f048:	00000206 	br	1f054 <altera_avalon_jtag_uart_ioctl+0x88>
   1f04c:	00a00034 	movhi	r2,32768
   1f050:	10bfff84 	addi	r2,r2,-2
   1f054:	e0fffd17 	ldw	r3,-12(fp)
   1f058:	18800115 	stw	r2,4(r3)
      rc = 0;
   1f05c:	e03fff15 	stw	zero,-4(fp)
    break;
   1f060:	00000f06 	br	1f0a0 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   1f064:	e0bffd17 	ldw	r2,-12(fp)
   1f068:	10c00117 	ldw	r3,4(r2)
   1f06c:	00a00034 	movhi	r2,32768
   1f070:	10bfffc4 	addi	r2,r2,-1
   1f074:	18800c26 	beq	r3,r2,1f0a8 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1f078:	e0bffd17 	ldw	r2,-12(fp)
   1f07c:	10c00917 	ldw	r3,36(r2)
   1f080:	e0bffd17 	ldw	r2,-12(fp)
   1f084:	10800117 	ldw	r2,4(r2)
   1f088:	1885803a 	cmpltu	r2,r3,r2
   1f08c:	10c03fcc 	andi	r3,r2,255
   1f090:	e0bffb17 	ldw	r2,-20(fp)
   1f094:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1f098:	e03fff15 	stw	zero,-4(fp)
    break;
   1f09c:	00000206 	br	1f0a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   1f0a0:	0001883a 	nop
   1f0a4:	00000106 	br	1f0ac <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   1f0a8:	0001883a 	nop
  }

  return rc;
   1f0ac:	e0bfff17 	ldw	r2,-4(fp)
}
   1f0b0:	e037883a 	mov	sp,fp
   1f0b4:	df000017 	ldw	fp,0(sp)
   1f0b8:	dec00104 	addi	sp,sp,4
   1f0bc:	f800283a 	ret

0001f0c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1f0c0:	defff304 	addi	sp,sp,-52
   1f0c4:	dfc00c15 	stw	ra,48(sp)
   1f0c8:	df000b15 	stw	fp,44(sp)
   1f0cc:	df000b04 	addi	fp,sp,44
   1f0d0:	e13ff815 	stw	r4,-32(fp)
   1f0d4:	e17ff715 	stw	r5,-36(fp)
   1f0d8:	e1bff615 	stw	r6,-40(fp)
   1f0dc:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   1f0e0:	e0bff717 	ldw	r2,-36(fp)
   1f0e4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1f0e8:	00004706 	br	1f208 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1f0ec:	e0bff817 	ldw	r2,-32(fp)
   1f0f0:	10800a17 	ldw	r2,40(r2)
   1f0f4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   1f0f8:	e0bff817 	ldw	r2,-32(fp)
   1f0fc:	10800b17 	ldw	r2,44(r2)
   1f100:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   1f104:	e0fffd17 	ldw	r3,-12(fp)
   1f108:	e0bffc17 	ldw	r2,-16(fp)
   1f10c:	18800536 	bltu	r3,r2,1f124 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1f110:	e0fffd17 	ldw	r3,-12(fp)
   1f114:	e0bffc17 	ldw	r2,-16(fp)
   1f118:	1885c83a 	sub	r2,r3,r2
   1f11c:	e0bffe15 	stw	r2,-8(fp)
   1f120:	00000406 	br	1f134 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1f124:	00c20004 	movi	r3,2048
   1f128:	e0bffc17 	ldw	r2,-16(fp)
   1f12c:	1885c83a 	sub	r2,r3,r2
   1f130:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   1f134:	e0bffe17 	ldw	r2,-8(fp)
   1f138:	10001e26 	beq	r2,zero,1f1b4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1f13c:	e0fff617 	ldw	r3,-40(fp)
   1f140:	e0bffe17 	ldw	r2,-8(fp)
   1f144:	1880022e 	bgeu	r3,r2,1f150 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1f148:	e0bff617 	ldw	r2,-40(fp)
   1f14c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1f150:	e0bff817 	ldw	r2,-32(fp)
   1f154:	10c00e04 	addi	r3,r2,56
   1f158:	e0bffc17 	ldw	r2,-16(fp)
   1f15c:	1885883a 	add	r2,r3,r2
   1f160:	e1bffe17 	ldw	r6,-8(fp)
   1f164:	100b883a 	mov	r5,r2
   1f168:	e13fff17 	ldw	r4,-4(fp)
   1f16c:	000d5f40 	call	d5f4 <memcpy>
      ptr   += n;
   1f170:	e0ffff17 	ldw	r3,-4(fp)
   1f174:	e0bffe17 	ldw	r2,-8(fp)
   1f178:	1885883a 	add	r2,r3,r2
   1f17c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   1f180:	e0fff617 	ldw	r3,-40(fp)
   1f184:	e0bffe17 	ldw	r2,-8(fp)
   1f188:	1885c83a 	sub	r2,r3,r2
   1f18c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1f190:	e0fffc17 	ldw	r3,-16(fp)
   1f194:	e0bffe17 	ldw	r2,-8(fp)
   1f198:	1885883a 	add	r2,r3,r2
   1f19c:	10c1ffcc 	andi	r3,r2,2047
   1f1a0:	e0bff817 	ldw	r2,-32(fp)
   1f1a4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1f1a8:	e0bff617 	ldw	r2,-40(fp)
   1f1ac:	00bfcf16 	blt	zero,r2,1f0ec <altera_avalon_jtag_uart_read+0x2c>
   1f1b0:	00000106 	br	1f1b8 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   1f1b4:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   1f1b8:	e0ffff17 	ldw	r3,-4(fp)
   1f1bc:	e0bff717 	ldw	r2,-36(fp)
   1f1c0:	1880141e 	bne	r3,r2,1f214 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1f1c4:	e0bff517 	ldw	r2,-44(fp)
   1f1c8:	1090000c 	andi	r2,r2,16384
   1f1cc:	1000131e 	bne	r2,zero,1f21c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1f1d0:	0001883a 	nop
   1f1d4:	e0bff817 	ldw	r2,-32(fp)
   1f1d8:	10800a17 	ldw	r2,40(r2)
   1f1dc:	e0fffd17 	ldw	r3,-12(fp)
   1f1e0:	1880051e 	bne	r3,r2,1f1f8 <altera_avalon_jtag_uart_read+0x138>
   1f1e4:	e0bff817 	ldw	r2,-32(fp)
   1f1e8:	10c00917 	ldw	r3,36(r2)
   1f1ec:	e0bff817 	ldw	r2,-32(fp)
   1f1f0:	10800117 	ldw	r2,4(r2)
   1f1f4:	18bff736 	bltu	r3,r2,1f1d4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1f1f8:	e0bff817 	ldw	r2,-32(fp)
   1f1fc:	10800a17 	ldw	r2,40(r2)
   1f200:	e0fffd17 	ldw	r3,-12(fp)
   1f204:	18800726 	beq	r3,r2,1f224 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   1f208:	e0bff617 	ldw	r2,-40(fp)
   1f20c:	00bfb716 	blt	zero,r2,1f0ec <altera_avalon_jtag_uart_read+0x2c>
   1f210:	00000506 	br	1f228 <altera_avalon_jtag_uart_read+0x168>
      break;
   1f214:	0001883a 	nop
   1f218:	00000306 	br	1f228 <altera_avalon_jtag_uart_read+0x168>
      break;
   1f21c:	0001883a 	nop
   1f220:	00000106 	br	1f228 <altera_avalon_jtag_uart_read+0x168>
      break;
   1f224:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1f228:	e0ffff17 	ldw	r3,-4(fp)
   1f22c:	e0bff717 	ldw	r2,-36(fp)
   1f230:	18801926 	beq	r3,r2,1f298 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   1f234:	0005303a 	rdctl	r2,status
   1f238:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f23c:	e0fff917 	ldw	r3,-28(fp)
   1f240:	00bfff84 	movi	r2,-2
   1f244:	1884703a 	and	r2,r3,r2
   1f248:	1001703a 	wrctl	status,r2
  return context;
   1f24c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1f250:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1f254:	e0bff817 	ldw	r2,-32(fp)
   1f258:	10800817 	ldw	r2,32(r2)
   1f25c:	10c00054 	ori	r3,r2,1
   1f260:	e0bff817 	ldw	r2,-32(fp)
   1f264:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1f268:	e0bff817 	ldw	r2,-32(fp)
   1f26c:	10800017 	ldw	r2,0(r2)
   1f270:	10800104 	addi	r2,r2,4
   1f274:	1007883a 	mov	r3,r2
   1f278:	e0bff817 	ldw	r2,-32(fp)
   1f27c:	10800817 	ldw	r2,32(r2)
   1f280:	18800035 	stwio	r2,0(r3)
   1f284:	e0bffb17 	ldw	r2,-20(fp)
   1f288:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1f28c:	e0bffa17 	ldw	r2,-24(fp)
   1f290:	1001703a 	wrctl	status,r2
}
   1f294:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1f298:	e0ffff17 	ldw	r3,-4(fp)
   1f29c:	e0bff717 	ldw	r2,-36(fp)
   1f2a0:	18800426 	beq	r3,r2,1f2b4 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   1f2a4:	e0ffff17 	ldw	r3,-4(fp)
   1f2a8:	e0bff717 	ldw	r2,-36(fp)
   1f2ac:	1885c83a 	sub	r2,r3,r2
   1f2b0:	00000606 	br	1f2cc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1f2b4:	e0bff517 	ldw	r2,-44(fp)
   1f2b8:	1090000c 	andi	r2,r2,16384
   1f2bc:	10000226 	beq	r2,zero,1f2c8 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   1f2c0:	00bffd44 	movi	r2,-11
   1f2c4:	00000106 	br	1f2cc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1f2c8:	00bffec4 	movi	r2,-5
}
   1f2cc:	e037883a 	mov	sp,fp
   1f2d0:	dfc00117 	ldw	ra,4(sp)
   1f2d4:	df000017 	ldw	fp,0(sp)
   1f2d8:	dec00204 	addi	sp,sp,8
   1f2dc:	f800283a 	ret

0001f2e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1f2e0:	defff304 	addi	sp,sp,-52
   1f2e4:	dfc00c15 	stw	ra,48(sp)
   1f2e8:	df000b15 	stw	fp,44(sp)
   1f2ec:	df000b04 	addi	fp,sp,44
   1f2f0:	e13ff815 	stw	r4,-32(fp)
   1f2f4:	e17ff715 	stw	r5,-36(fp)
   1f2f8:	e1bff615 	stw	r6,-40(fp)
   1f2fc:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1f300:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1f304:	e0bff717 	ldw	r2,-36(fp)
   1f308:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1f30c:	00003706 	br	1f3ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1f310:	e0bff817 	ldw	r2,-32(fp)
   1f314:	10800c17 	ldw	r2,48(r2)
   1f318:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   1f31c:	e0bff817 	ldw	r2,-32(fp)
   1f320:	10800d17 	ldw	r2,52(r2)
   1f324:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   1f328:	e0fffc17 	ldw	r3,-16(fp)
   1f32c:	e0bfff17 	ldw	r2,-4(fp)
   1f330:	1880062e 	bgeu	r3,r2,1f34c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1f334:	e0ffff17 	ldw	r3,-4(fp)
   1f338:	e0bffc17 	ldw	r2,-16(fp)
   1f33c:	1885c83a 	sub	r2,r3,r2
   1f340:	10bfffc4 	addi	r2,r2,-1
   1f344:	e0bffe15 	stw	r2,-8(fp)
   1f348:	00000b06 	br	1f378 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1f34c:	e0bfff17 	ldw	r2,-4(fp)
   1f350:	10000526 	beq	r2,zero,1f368 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1f354:	00c20004 	movi	r3,2048
   1f358:	e0bffc17 	ldw	r2,-16(fp)
   1f35c:	1885c83a 	sub	r2,r3,r2
   1f360:	e0bffe15 	stw	r2,-8(fp)
   1f364:	00000406 	br	1f378 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1f368:	00c1ffc4 	movi	r3,2047
   1f36c:	e0bffc17 	ldw	r2,-16(fp)
   1f370:	1885c83a 	sub	r2,r3,r2
   1f374:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   1f378:	e0bffe17 	ldw	r2,-8(fp)
   1f37c:	10001e26 	beq	r2,zero,1f3f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1f380:	e0fff617 	ldw	r3,-40(fp)
   1f384:	e0bffe17 	ldw	r2,-8(fp)
   1f388:	1880022e 	bgeu	r3,r2,1f394 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1f38c:	e0bff617 	ldw	r2,-40(fp)
   1f390:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1f394:	e0bff817 	ldw	r2,-32(fp)
   1f398:	10c20e04 	addi	r3,r2,2104
   1f39c:	e0bffc17 	ldw	r2,-16(fp)
   1f3a0:	1885883a 	add	r2,r3,r2
   1f3a4:	e1bffe17 	ldw	r6,-8(fp)
   1f3a8:	e17ff717 	ldw	r5,-36(fp)
   1f3ac:	1009883a 	mov	r4,r2
   1f3b0:	000d5f40 	call	d5f4 <memcpy>
      ptr   += n;
   1f3b4:	e0fff717 	ldw	r3,-36(fp)
   1f3b8:	e0bffe17 	ldw	r2,-8(fp)
   1f3bc:	1885883a 	add	r2,r3,r2
   1f3c0:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   1f3c4:	e0fff617 	ldw	r3,-40(fp)
   1f3c8:	e0bffe17 	ldw	r2,-8(fp)
   1f3cc:	1885c83a 	sub	r2,r3,r2
   1f3d0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1f3d4:	e0fffc17 	ldw	r3,-16(fp)
   1f3d8:	e0bffe17 	ldw	r2,-8(fp)
   1f3dc:	1885883a 	add	r2,r3,r2
   1f3e0:	10c1ffcc 	andi	r3,r2,2047
   1f3e4:	e0bff817 	ldw	r2,-32(fp)
   1f3e8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   1f3ec:	e0bff617 	ldw	r2,-40(fp)
   1f3f0:	00bfc716 	blt	zero,r2,1f310 <altera_avalon_jtag_uart_write+0x30>
   1f3f4:	00000106 	br	1f3fc <altera_avalon_jtag_uart_write+0x11c>
        break;
   1f3f8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   1f3fc:	0005303a 	rdctl	r2,status
   1f400:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f404:	e0fff917 	ldw	r3,-28(fp)
   1f408:	00bfff84 	movi	r2,-2
   1f40c:	1884703a 	and	r2,r3,r2
   1f410:	1001703a 	wrctl	status,r2
  return context;
   1f414:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1f418:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1f41c:	e0bff817 	ldw	r2,-32(fp)
   1f420:	10800817 	ldw	r2,32(r2)
   1f424:	10c00094 	ori	r3,r2,2
   1f428:	e0bff817 	ldw	r2,-32(fp)
   1f42c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1f430:	e0bff817 	ldw	r2,-32(fp)
   1f434:	10800017 	ldw	r2,0(r2)
   1f438:	10800104 	addi	r2,r2,4
   1f43c:	1007883a 	mov	r3,r2
   1f440:	e0bff817 	ldw	r2,-32(fp)
   1f444:	10800817 	ldw	r2,32(r2)
   1f448:	18800035 	stwio	r2,0(r3)
   1f44c:	e0bffb17 	ldw	r2,-20(fp)
   1f450:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1f454:	e0bffa17 	ldw	r2,-24(fp)
   1f458:	1001703a 	wrctl	status,r2
}
   1f45c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1f460:	e0bff617 	ldw	r2,-40(fp)
   1f464:	0080100e 	bge	zero,r2,1f4a8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   1f468:	e0bff517 	ldw	r2,-44(fp)
   1f46c:	1090000c 	andi	r2,r2,16384
   1f470:	1000101e 	bne	r2,zero,1f4b4 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1f474:	0001883a 	nop
   1f478:	e0bff817 	ldw	r2,-32(fp)
   1f47c:	10800d17 	ldw	r2,52(r2)
   1f480:	e0ffff17 	ldw	r3,-4(fp)
   1f484:	1880051e 	bne	r3,r2,1f49c <altera_avalon_jtag_uart_write+0x1bc>
   1f488:	e0bff817 	ldw	r2,-32(fp)
   1f48c:	10c00917 	ldw	r3,36(r2)
   1f490:	e0bff817 	ldw	r2,-32(fp)
   1f494:	10800117 	ldw	r2,4(r2)
   1f498:	18bff736 	bltu	r3,r2,1f478 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1f49c:	e0bff817 	ldw	r2,-32(fp)
   1f4a0:	10800917 	ldw	r2,36(r2)
   1f4a4:	1000051e 	bne	r2,zero,1f4bc <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   1f4a8:	e0bff617 	ldw	r2,-40(fp)
   1f4ac:	00bfcf16 	blt	zero,r2,1f3ec <altera_avalon_jtag_uart_write+0x10c>
   1f4b0:	00000306 	br	1f4c0 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   1f4b4:	0001883a 	nop
   1f4b8:	00000106 	br	1f4c0 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   1f4bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1f4c0:	e0fff717 	ldw	r3,-36(fp)
   1f4c4:	e0bffd17 	ldw	r2,-12(fp)
   1f4c8:	18800426 	beq	r3,r2,1f4dc <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   1f4cc:	e0fff717 	ldw	r3,-36(fp)
   1f4d0:	e0bffd17 	ldw	r2,-12(fp)
   1f4d4:	1885c83a 	sub	r2,r3,r2
   1f4d8:	00000606 	br	1f4f4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   1f4dc:	e0bff517 	ldw	r2,-44(fp)
   1f4e0:	1090000c 	andi	r2,r2,16384
   1f4e4:	10000226 	beq	r2,zero,1f4f0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   1f4e8:	00bffd44 	movi	r2,-11
   1f4ec:	00000106 	br	1f4f4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1f4f0:	00bffec4 	movi	r2,-5
}
   1f4f4:	e037883a 	mov	sp,fp
   1f4f8:	dfc00117 	ldw	ra,4(sp)
   1f4fc:	df000017 	ldw	fp,0(sp)
   1f500:	dec00204 	addi	sp,sp,8
   1f504:	f800283a 	ret

0001f508 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1f508:	defff904 	addi	sp,sp,-28
   1f50c:	dfc00615 	stw	ra,24(sp)
   1f510:	df000515 	stw	fp,20(sp)
   1f514:	df000504 	addi	fp,sp,20
   1f518:	e13ffc15 	stw	r4,-16(fp)
   1f51c:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1f520:	0007883a 	mov	r3,zero
   1f524:	e0bffc17 	ldw	r2,-16(fp)
   1f528:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1f52c:	e0bffc17 	ldw	r2,-16(fp)
   1f530:	10800104 	addi	r2,r2,4
   1f534:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   1f538:	0005303a 	rdctl	r2,status
   1f53c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f540:	e0fffd17 	ldw	r3,-12(fp)
   1f544:	00bfff84 	movi	r2,-2
   1f548:	1884703a 	and	r2,r3,r2
   1f54c:	1001703a 	wrctl	status,r2
  return context;
   1f550:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1f554:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   1f558:	00208180 	call	20818 <alt_tick>
   1f55c:	e0bfff17 	ldw	r2,-4(fp)
   1f560:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   1f564:	e0bffe17 	ldw	r2,-8(fp)
   1f568:	1001703a 	wrctl	status,r2
}
   1f56c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   1f570:	0001883a 	nop
   1f574:	e037883a 	mov	sp,fp
   1f578:	dfc00117 	ldw	ra,4(sp)
   1f57c:	df000017 	ldw	fp,0(sp)
   1f580:	dec00204 	addi	sp,sp,8
   1f584:	f800283a 	ret

0001f588 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1f588:	defff904 	addi	sp,sp,-28
   1f58c:	dfc00615 	stw	ra,24(sp)
   1f590:	df000515 	stw	fp,20(sp)
   1f594:	df000504 	addi	fp,sp,20
   1f598:	e13ffe15 	stw	r4,-8(fp)
   1f59c:	e17ffd15 	stw	r5,-12(fp)
   1f5a0:	e1bffc15 	stw	r6,-16(fp)
   1f5a4:	e1fffb15 	stw	r7,-20(fp)
   1f5a8:	e0bffb17 	ldw	r2,-20(fp)
   1f5ac:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1f5b0:	d0a75817 	ldw	r2,-25248(gp)
   1f5b4:	1000031e 	bne	r2,zero,1f5c4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   1f5b8:	e0bfff17 	ldw	r2,-4(fp)
   1f5bc:	d0a75815 	stw	r2,-25248(gp)
    return 0;
   1f5c0:	00000106 	br	1f5c8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   1f5c4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1f5c8:	e0bffe17 	ldw	r2,-8(fp)
   1f5cc:	10800104 	addi	r2,r2,4
   1f5d0:	00c001c4 	movi	r3,7
   1f5d4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1f5d8:	018000b4 	movhi	r6,2
   1f5dc:	31bd4204 	addi	r6,r6,-2808
   1f5e0:	e17ffe17 	ldw	r5,-8(fp)
   1f5e4:	e13ffc17 	ldw	r4,-16(fp)
   1f5e8:	00203ac0 	call	203ac <alt_irq_register>
#endif  
}
   1f5ec:	0001883a 	nop
   1f5f0:	e037883a 	mov	sp,fp
   1f5f4:	dfc00117 	ldw	ra,4(sp)
   1f5f8:	df000017 	ldw	fp,0(sp)
   1f5fc:	dec00204 	addi	sp,sp,8
   1f600:	f800283a 	ret

0001f604 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1f604:	defffc04 	addi	sp,sp,-16
   1f608:	df000315 	stw	fp,12(sp)
   1f60c:	df000304 	addi	fp,sp,12
   1f610:	e13ffe15 	stw	r4,-8(fp)
   1f614:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1f618:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
   1f61c:	e0bffd17 	ldw	r2,-12(fp)
   1f620:	1000061e 	bne	r2,zero,1f63c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1f624:	e0bffe17 	ldw	r2,-8(fp)
   1f628:	1007883a 	mov	r3,r2
   1f62c:	e0bfffc3 	ldbu	r2,-1(fp)
   1f630:	10c4b03a 	or	r2,r2,r3
   1f634:	e0bfffc5 	stb	r2,-1(fp)
   1f638:	00000806 	br	1f65c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1f63c:	e0bffe17 	ldw	r2,-8(fp)
   1f640:	1007883a 	mov	r3,r2
   1f644:	e0bfffc3 	ldbu	r2,-1(fp)
   1f648:	10c4b03a 	or	r2,r2,r3
   1f64c:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
   1f650:	e0bfffc3 	ldbu	r2,-1(fp)
   1f654:	10801014 	ori	r2,r2,64
   1f658:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1f65c:	e0ffffc3 	ldbu	r3,-1(fp)
   1f660:	00bfe004 	movi	r2,-128
   1f664:	1884b03a 	or	r2,r3,r2
}
   1f668:	e037883a 	mov	sp,fp
   1f66c:	df000017 	ldw	fp,0(sp)
   1f670:	dec00104 	addi	sp,sp,4
   1f674:	f800283a 	ret

0001f678 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1f678:	defffd04 	addi	sp,sp,-12
   1f67c:	df000215 	stw	fp,8(sp)
   1f680:	df000204 	addi	fp,sp,8
   1f684:	e13fff15 	stw	r4,-4(fp)
   1f688:	2805883a 	mov	r2,r5
   1f68c:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1f690:	e0bfff17 	ldw	r2,-4(fp)
   1f694:	10800a17 	ldw	r2,40(r2)
   1f698:	1007883a 	mov	r3,r2
   1f69c:	e0bffe03 	ldbu	r2,-8(fp)
   1f6a0:	18800025 	stbio	r2,0(r3)
}
   1f6a4:	0001883a 	nop
   1f6a8:	e037883a 	mov	sp,fp
   1f6ac:	df000017 	ldw	fp,0(sp)
   1f6b0:	dec00104 	addi	sp,sp,4
   1f6b4:	f800283a 	ret

0001f6b8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1f6b8:	defffe04 	addi	sp,sp,-8
   1f6bc:	df000115 	stw	fp,4(sp)
   1f6c0:	df000104 	addi	fp,sp,4
   1f6c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1f6c8:	e0bfff17 	ldw	r2,-4(fp)
   1f6cc:	10800a17 	ldw	r2,40(r2)
   1f6d0:	1007883a 	mov	r3,r2
   1f6d4:	00800044 	movi	r2,1
   1f6d8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1f6dc:	0001883a 	nop
   1f6e0:	e037883a 	mov	sp,fp
   1f6e4:	df000017 	ldw	fp,0(sp)
   1f6e8:	dec00104 	addi	sp,sp,4
   1f6ec:	f800283a 	ret

0001f6f0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1f6f0:	defffc04 	addi	sp,sp,-16
   1f6f4:	dfc00315 	stw	ra,12(sp)
   1f6f8:	df000215 	stw	fp,8(sp)
   1f6fc:	df000204 	addi	fp,sp,8
   1f700:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1f704:	d1600704 	addi	r5,gp,-32740
   1f708:	e13ffe17 	ldw	r4,-8(fp)
   1f70c:	00201bc0 	call	201bc <alt_find_dev>
   1f710:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   1f714:	e0bfff17 	ldw	r2,-4(fp)
}
   1f718:	e037883a 	mov	sp,fp
   1f71c:	dfc00117 	ldw	ra,4(sp)
   1f720:	df000017 	ldw	fp,0(sp)
   1f724:	dec00204 	addi	sp,sp,8
   1f728:	f800283a 	ret

0001f72c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1f72c:	defffb04 	addi	sp,sp,-20
   1f730:	df000415 	stw	fp,16(sp)
   1f734:	df000404 	addi	fp,sp,16
   1f738:	e13ffe15 	stw	r4,-8(fp)
   1f73c:	e17ffd15 	stw	r5,-12(fp)
   1f740:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1f744:	e03fff15 	stw	zero,-4(fp)
   1f748:	00000f06 	br	1f788 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1f74c:	e0bffe17 	ldw	r2,-8(fp)
   1f750:	10800a17 	ldw	r2,40(r2)
   1f754:	10800044 	addi	r2,r2,1
   1f758:	1009883a 	mov	r4,r2
   1f75c:	e0fffd17 	ldw	r3,-12(fp)
   1f760:	e0bfff17 	ldw	r2,-4(fp)
   1f764:	1885883a 	add	r2,r3,r2
   1f768:	10800003 	ldbu	r2,0(r2)
   1f76c:	10803fcc 	andi	r2,r2,255
   1f770:	1080201c 	xori	r2,r2,128
   1f774:	10bfe004 	addi	r2,r2,-128
   1f778:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
   1f77c:	e0bfff17 	ldw	r2,-4(fp)
   1f780:	10800044 	addi	r2,r2,1
   1f784:	e0bfff15 	stw	r2,-4(fp)
   1f788:	e0ffff17 	ldw	r3,-4(fp)
   1f78c:	e0bffc17 	ldw	r2,-16(fp)
   1f790:	18bfee36 	bltu	r3,r2,1f74c <alt_up_character_lcd_write+0x20>
	}
}
   1f794:	0001883a 	nop
   1f798:	0001883a 	nop
   1f79c:	e037883a 	mov	sp,fp
   1f7a0:	df000017 	ldw	fp,0(sp)
   1f7a4:	dec00104 	addi	sp,sp,4
   1f7a8:	f800283a 	ret

0001f7ac <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1f7ac:	defffd04 	addi	sp,sp,-12
   1f7b0:	df000215 	stw	fp,8(sp)
   1f7b4:	df000204 	addi	fp,sp,8
   1f7b8:	e13fff15 	stw	r4,-4(fp)
   1f7bc:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
   1f7c0:	00000d06 	br	1f7f8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1f7c4:	e0bfff17 	ldw	r2,-4(fp)
   1f7c8:	10800a17 	ldw	r2,40(r2)
   1f7cc:	10800044 	addi	r2,r2,1
   1f7d0:	1007883a 	mov	r3,r2
   1f7d4:	e0bffe17 	ldw	r2,-8(fp)
   1f7d8:	10800003 	ldbu	r2,0(r2)
   1f7dc:	10803fcc 	andi	r2,r2,255
   1f7e0:	1080201c 	xori	r2,r2,128
   1f7e4:	10bfe004 	addi	r2,r2,-128
   1f7e8:	18800025 	stbio	r2,0(r3)
		++ptr;
   1f7ec:	e0bffe17 	ldw	r2,-8(fp)
   1f7f0:	10800044 	addi	r2,r2,1
   1f7f4:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
   1f7f8:	e0bffe17 	ldw	r2,-8(fp)
   1f7fc:	10800003 	ldbu	r2,0(r2)
   1f800:	10803fcc 	andi	r2,r2,255
   1f804:	1080201c 	xori	r2,r2,128
   1f808:	10bfe004 	addi	r2,r2,-128
   1f80c:	103fed1e 	bne	r2,zero,1f7c4 <alt_up_character_lcd_string+0x18>
	}
}
   1f810:	0001883a 	nop
   1f814:	0001883a 	nop
   1f818:	e037883a 	mov	sp,fp
   1f81c:	df000017 	ldw	fp,0(sp)
   1f820:	dec00104 	addi	sp,sp,4
   1f824:	f800283a 	ret

0001f828 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1f828:	defffb04 	addi	sp,sp,-20
   1f82c:	dfc00415 	stw	ra,16(sp)
   1f830:	df000315 	stw	fp,12(sp)
   1f834:	df000304 	addi	fp,sp,12
   1f838:	e13fff15 	stw	r4,-4(fp)
   1f83c:	e17ffe15 	stw	r5,-8(fp)
   1f840:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1f844:	e0bfff17 	ldw	r2,-4(fp)
   1f848:	10800017 	ldw	r2,0(r2)
   1f84c:	e0fffd17 	ldw	r3,-12(fp)
   1f850:	180d883a 	mov	r6,r3
   1f854:	e17ffe17 	ldw	r5,-8(fp)
   1f858:	1009883a 	mov	r4,r2
   1f85c:	001f72c0 	call	1f72c <alt_up_character_lcd_write>
	return 0;
   1f860:	0005883a 	mov	r2,zero
}
   1f864:	e037883a 	mov	sp,fp
   1f868:	dfc00117 	ldw	ra,4(sp)
   1f86c:	df000017 	ldw	fp,0(sp)
   1f870:	dec00204 	addi	sp,sp,8
   1f874:	f800283a 	ret

0001f878 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1f878:	defffa04 	addi	sp,sp,-24
   1f87c:	dfc00515 	stw	ra,20(sp)
   1f880:	df000415 	stw	fp,16(sp)
   1f884:	df000404 	addi	fp,sp,16
   1f888:	e13ffe15 	stw	r4,-8(fp)
   1f88c:	e17ffd15 	stw	r5,-12(fp)
   1f890:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1f894:	e0bffd17 	ldw	r2,-12(fp)
   1f898:	10800a28 	cmpgeui	r2,r2,40
   1f89c:	1000031e 	bne	r2,zero,1f8ac <alt_up_character_lcd_set_cursor_pos+0x34>
   1f8a0:	e0bffc17 	ldw	r2,-16(fp)
   1f8a4:	108000b0 	cmpltui	r2,r2,2
   1f8a8:	1000021e 	bne	r2,zero,1f8b4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1f8ac:	00bfffc4 	movi	r2,-1
   1f8b0:	00000906 	br	1f8d8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1f8b4:	e17ffc17 	ldw	r5,-16(fp)
   1f8b8:	e13ffd17 	ldw	r4,-12(fp)
   1f8bc:	001f6040 	call	1f604 <get_DDRAM_addr>
   1f8c0:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1f8c4:	e0bfffc3 	ldbu	r2,-1(fp)
   1f8c8:	100b883a 	mov	r5,r2
   1f8cc:	e13ffe17 	ldw	r4,-8(fp)
   1f8d0:	001f6780 	call	1f678 <alt_up_character_lcd_send_cmd>
	return 0;
   1f8d4:	0005883a 	mov	r2,zero
}
   1f8d8:	e037883a 	mov	sp,fp
   1f8dc:	dfc00117 	ldw	ra,4(sp)
   1f8e0:	df000017 	ldw	fp,0(sp)
   1f8e4:	dec00204 	addi	sp,sp,8
   1f8e8:	f800283a 	ret

0001f8ec <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1f8ec:	defffb04 	addi	sp,sp,-20
   1f8f0:	dfc00415 	stw	ra,16(sp)
   1f8f4:	df000315 	stw	fp,12(sp)
   1f8f8:	df000304 	addi	fp,sp,12
   1f8fc:	e13ffe15 	stw	r4,-8(fp)
   1f900:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   1f904:	e0bffd17 	ldw	r2,-12(fp)
   1f908:	10001526 	beq	r2,zero,1f960 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1f90c:	e0bffd17 	ldw	r2,-12(fp)
   1f910:	0080020e 	bge	zero,r2,1f91c <alt_up_character_lcd_shift_cursor+0x30>
   1f914:	00800504 	movi	r2,20
   1f918:	00000106 	br	1f920 <alt_up_character_lcd_shift_cursor+0x34>
   1f91c:	00800404 	movi	r2,16
   1f920:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1f924:	e0bffd17 	ldw	r2,-12(fp)
   1f928:	1000010e 	bge	r2,zero,1f930 <alt_up_character_lcd_shift_cursor+0x44>
   1f92c:	0085c83a 	sub	r2,zero,r2
   1f930:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1f934:	00000406 	br	1f948 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1f938:	e0bfff83 	ldbu	r2,-2(fp)
   1f93c:	100b883a 	mov	r5,r2
   1f940:	e13ffe17 	ldw	r4,-8(fp)
   1f944:	001f6780 	call	1f678 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   1f948:	e0bfffc3 	ldbu	r2,-1(fp)
   1f94c:	10ffffc4 	addi	r3,r2,-1
   1f950:	e0ffffc5 	stb	r3,-1(fp)
   1f954:	10803fcc 	andi	r2,r2,255
   1f958:	103ff71e 	bne	r2,zero,1f938 <alt_up_character_lcd_shift_cursor+0x4c>
   1f95c:	00000106 	br	1f964 <alt_up_character_lcd_shift_cursor+0x78>
		return;
   1f960:	0001883a 	nop
}
   1f964:	e037883a 	mov	sp,fp
   1f968:	dfc00117 	ldw	ra,4(sp)
   1f96c:	df000017 	ldw	fp,0(sp)
   1f970:	dec00204 	addi	sp,sp,8
   1f974:	f800283a 	ret

0001f978 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1f978:	defffb04 	addi	sp,sp,-20
   1f97c:	dfc00415 	stw	ra,16(sp)
   1f980:	df000315 	stw	fp,12(sp)
   1f984:	df000304 	addi	fp,sp,12
   1f988:	e13ffe15 	stw	r4,-8(fp)
   1f98c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   1f990:	e0bffd17 	ldw	r2,-12(fp)
   1f994:	10001526 	beq	r2,zero,1f9ec <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1f998:	e0bffd17 	ldw	r2,-12(fp)
   1f99c:	0080020e 	bge	zero,r2,1f9a8 <alt_up_character_lcd_shift_display+0x30>
   1f9a0:	00800704 	movi	r2,28
   1f9a4:	00000106 	br	1f9ac <alt_up_character_lcd_shift_display+0x34>
   1f9a8:	00800604 	movi	r2,24
   1f9ac:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1f9b0:	e0bffd17 	ldw	r2,-12(fp)
   1f9b4:	1000010e 	bge	r2,zero,1f9bc <alt_up_character_lcd_shift_display+0x44>
   1f9b8:	0085c83a 	sub	r2,zero,r2
   1f9bc:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1f9c0:	00000406 	br	1f9d4 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1f9c4:	e0bfff83 	ldbu	r2,-2(fp)
   1f9c8:	100b883a 	mov	r5,r2
   1f9cc:	e13ffe17 	ldw	r4,-8(fp)
   1f9d0:	001f6780 	call	1f678 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   1f9d4:	e0bfffc3 	ldbu	r2,-1(fp)
   1f9d8:	10ffffc4 	addi	r3,r2,-1
   1f9dc:	e0ffffc5 	stb	r3,-1(fp)
   1f9e0:	10803fcc 	andi	r2,r2,255
   1f9e4:	103ff71e 	bne	r2,zero,1f9c4 <alt_up_character_lcd_shift_display+0x4c>
   1f9e8:	00000106 	br	1f9f0 <alt_up_character_lcd_shift_display+0x78>
		return;
   1f9ec:	0001883a 	nop
}
   1f9f0:	e037883a 	mov	sp,fp
   1f9f4:	dfc00117 	ldw	ra,4(sp)
   1f9f8:	df000017 	ldw	fp,0(sp)
   1f9fc:	dec00204 	addi	sp,sp,8
   1fa00:	f800283a 	ret

0001fa04 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1fa04:	defffa04 	addi	sp,sp,-24
   1fa08:	dfc00515 	stw	ra,20(sp)
   1fa0c:	df000415 	stw	fp,16(sp)
   1fa10:	df000404 	addi	fp,sp,16
   1fa14:	e13ffe15 	stw	r4,-8(fp)
   1fa18:	e17ffd15 	stw	r5,-12(fp)
   1fa1c:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1fa20:	e0bffd17 	ldw	r2,-12(fp)
   1fa24:	10800a28 	cmpgeui	r2,r2,40
   1fa28:	1000031e 	bne	r2,zero,1fa38 <alt_up_character_lcd_erase_pos+0x34>
   1fa2c:	e0bffc17 	ldw	r2,-16(fp)
   1fa30:	108000b0 	cmpltui	r2,r2,2
   1fa34:	1000021e 	bne	r2,zero,1fa40 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1fa38:	00bfffc4 	movi	r2,-1
   1fa3c:	00000f06 	br	1fa7c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1fa40:	e17ffc17 	ldw	r5,-16(fp)
   1fa44:	e13ffd17 	ldw	r4,-12(fp)
   1fa48:	001f6040 	call	1f604 <get_DDRAM_addr>
   1fa4c:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1fa50:	e0bfffc3 	ldbu	r2,-1(fp)
   1fa54:	100b883a 	mov	r5,r2
   1fa58:	e13ffe17 	ldw	r4,-8(fp)
   1fa5c:	001f6780 	call	1f678 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1fa60:	e0bffe17 	ldw	r2,-8(fp)
   1fa64:	10800a17 	ldw	r2,40(r2)
   1fa68:	10800044 	addi	r2,r2,1
   1fa6c:	1007883a 	mov	r3,r2
   1fa70:	00800084 	movi	r2,2
   1fa74:	18800025 	stbio	r2,0(r3)
	return 0;
   1fa78:	0005883a 	mov	r2,zero
}
   1fa7c:	e037883a 	mov	sp,fp
   1fa80:	dfc00117 	ldw	ra,4(sp)
   1fa84:	df000017 	ldw	fp,0(sp)
   1fa88:	dec00204 	addi	sp,sp,8
   1fa8c:	f800283a 	ret

0001fa90 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1fa90:	defffd04 	addi	sp,sp,-12
   1fa94:	dfc00215 	stw	ra,8(sp)
   1fa98:	df000115 	stw	fp,4(sp)
   1fa9c:	df000104 	addi	fp,sp,4
   1faa0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1faa4:	01400304 	movi	r5,12
   1faa8:	e13fff17 	ldw	r4,-4(fp)
   1faac:	001f6780 	call	1f678 <alt_up_character_lcd_send_cmd>
}
   1fab0:	0001883a 	nop
   1fab4:	e037883a 	mov	sp,fp
   1fab8:	dfc00117 	ldw	ra,4(sp)
   1fabc:	df000017 	ldw	fp,0(sp)
   1fac0:	dec00204 	addi	sp,sp,8
   1fac4:	f800283a 	ret

0001fac8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1fac8:	defffd04 	addi	sp,sp,-12
   1facc:	dfc00215 	stw	ra,8(sp)
   1fad0:	df000115 	stw	fp,4(sp)
   1fad4:	df000104 	addi	fp,sp,4
   1fad8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1fadc:	014003c4 	movi	r5,15
   1fae0:	e13fff17 	ldw	r4,-4(fp)
   1fae4:	001f6780 	call	1f678 <alt_up_character_lcd_send_cmd>
}
   1fae8:	0001883a 	nop
   1faec:	e037883a 	mov	sp,fp
   1faf0:	dfc00117 	ldw	ra,4(sp)
   1faf4:	df000017 	ldw	fp,0(sp)
   1faf8:	dec00204 	addi	sp,sp,8
   1fafc:	f800283a 	ret

0001fb00 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1fb00:	defffd04 	addi	sp,sp,-12
   1fb04:	df000215 	stw	fp,8(sp)
   1fb08:	df000204 	addi	fp,sp,8
   1fb0c:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1fb10:	e0bffe17 	ldw	r2,-8(fp)
   1fb14:	10800a17 	ldw	r2,40(r2)
   1fb18:	10800104 	addi	r2,r2,4
   1fb1c:	10800037 	ldwio	r2,0(r2)
   1fb20:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1fb24:	e0bfff17 	ldw	r2,-4(fp)
   1fb28:	10800054 	ori	r2,r2,1
   1fb2c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1fb30:	e0bffe17 	ldw	r2,-8(fp)
   1fb34:	10800a17 	ldw	r2,40(r2)
   1fb38:	10800104 	addi	r2,r2,4
   1fb3c:	1007883a 	mov	r3,r2
   1fb40:	e0bfff17 	ldw	r2,-4(fp)
   1fb44:	18800035 	stwio	r2,0(r3)
}
   1fb48:	0001883a 	nop
   1fb4c:	e037883a 	mov	sp,fp
   1fb50:	df000017 	ldw	fp,0(sp)
   1fb54:	dec00104 	addi	sp,sp,4
   1fb58:	f800283a 	ret

0001fb5c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1fb5c:	defffd04 	addi	sp,sp,-12
   1fb60:	df000215 	stw	fp,8(sp)
   1fb64:	df000204 	addi	fp,sp,8
   1fb68:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1fb6c:	e0bffe17 	ldw	r2,-8(fp)
   1fb70:	10800a17 	ldw	r2,40(r2)
   1fb74:	10800104 	addi	r2,r2,4
   1fb78:	10800037 	ldwio	r2,0(r2)
   1fb7c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1fb80:	e0ffff17 	ldw	r3,-4(fp)
   1fb84:	00bfff84 	movi	r2,-2
   1fb88:	1884703a 	and	r2,r3,r2
   1fb8c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1fb90:	e0bffe17 	ldw	r2,-8(fp)
   1fb94:	10800a17 	ldw	r2,40(r2)
   1fb98:	10800104 	addi	r2,r2,4
   1fb9c:	1007883a 	mov	r3,r2
   1fba0:	e0bfff17 	ldw	r2,-4(fp)
   1fba4:	18800035 	stwio	r2,0(r3)
}
   1fba8:	0001883a 	nop
   1fbac:	e037883a 	mov	sp,fp
   1fbb0:	df000017 	ldw	fp,0(sp)
   1fbb4:	dec00104 	addi	sp,sp,4
   1fbb8:	f800283a 	ret

0001fbbc <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1fbbc:	defffd04 	addi	sp,sp,-12
   1fbc0:	df000215 	stw	fp,8(sp)
   1fbc4:	df000204 	addi	fp,sp,8
   1fbc8:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
   1fbcc:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1fbd0:	e0bffe17 	ldw	r2,-8(fp)
   1fbd4:	10800a17 	ldw	r2,40(r2)
   1fbd8:	10800084 	addi	r2,r2,2
   1fbdc:	1080002b 	ldhuio	r2,0(r2)
   1fbe0:	10bfffcc 	andi	r2,r2,65535
   1fbe4:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1fbe8:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1fbec:	e037883a 	mov	sp,fp
   1fbf0:	df000017 	ldw	fp,0(sp)
   1fbf4:	dec00104 	addi	sp,sp,4
   1fbf8:	f800283a 	ret

0001fbfc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1fbfc:	defffd04 	addi	sp,sp,-12
   1fc00:	df000215 	stw	fp,8(sp)
   1fc04:	df000204 	addi	fp,sp,8
   1fc08:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1fc0c:	e0bffe17 	ldw	r2,-8(fp)
   1fc10:	10800a17 	ldw	r2,40(r2)
   1fc14:	10800104 	addi	r2,r2,4
   1fc18:	10800037 	ldwio	r2,0(r2)
   1fc1c:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1fc20:	e0bfff17 	ldw	r2,-4(fp)
   1fc24:	1004d43a 	srli	r2,r2,16
}
   1fc28:	e037883a 	mov	sp,fp
   1fc2c:	df000017 	ldw	fp,0(sp)
   1fc30:	dec00104 	addi	sp,sp,4
   1fc34:	f800283a 	ret

0001fc38 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1fc38:	defffd04 	addi	sp,sp,-12
   1fc3c:	df000215 	stw	fp,8(sp)
   1fc40:	df000204 	addi	fp,sp,8
   1fc44:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1fc48:	e0bffe17 	ldw	r2,-8(fp)
   1fc4c:	1004d27a 	srli	r2,r2,9
   1fc50:	1080004c 	andi	r2,r2,1
   1fc54:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
   1fc58:	e0bfff17 	ldw	r2,-4(fp)
   1fc5c:	10000226 	beq	r2,zero,1fc68 <alt_up_rs232_check_parity+0x30>
   1fc60:	00bfffc4 	movi	r2,-1
   1fc64:	00000106 	br	1fc6c <alt_up_rs232_check_parity+0x34>
   1fc68:	0005883a 	mov	r2,zero
}
   1fc6c:	e037883a 	mov	sp,fp
   1fc70:	df000017 	ldw	fp,0(sp)
   1fc74:	dec00104 	addi	sp,sp,4
   1fc78:	f800283a 	ret

0001fc7c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1fc7c:	defffd04 	addi	sp,sp,-12
   1fc80:	df000215 	stw	fp,8(sp)
   1fc84:	df000204 	addi	fp,sp,8
   1fc88:	e13fff15 	stw	r4,-4(fp)
   1fc8c:	2805883a 	mov	r2,r5
   1fc90:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1fc94:	e0bfff17 	ldw	r2,-4(fp)
   1fc98:	10800a17 	ldw	r2,40(r2)
   1fc9c:	1007883a 	mov	r3,r2
   1fca0:	e0bffe03 	ldbu	r2,-8(fp)
   1fca4:	18800035 	stwio	r2,0(r3)
	return 0;
   1fca8:	0005883a 	mov	r2,zero
}
   1fcac:	e037883a 	mov	sp,fp
   1fcb0:	df000017 	ldw	fp,0(sp)
   1fcb4:	dec00104 	addi	sp,sp,4
   1fcb8:	f800283a 	ret

0001fcbc <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1fcbc:	defffa04 	addi	sp,sp,-24
   1fcc0:	dfc00515 	stw	ra,20(sp)
   1fcc4:	df000415 	stw	fp,16(sp)
   1fcc8:	df000404 	addi	fp,sp,16
   1fccc:	e13ffe15 	stw	r4,-8(fp)
   1fcd0:	e17ffd15 	stw	r5,-12(fp)
   1fcd4:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1fcd8:	e0bffe17 	ldw	r2,-8(fp)
   1fcdc:	10800a17 	ldw	r2,40(r2)
   1fce0:	10800037 	ldwio	r2,0(r2)
   1fce4:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1fce8:	e0bfff17 	ldw	r2,-4(fp)
   1fcec:	1007883a 	mov	r3,r2
   1fcf0:	e0bffd17 	ldw	r2,-12(fp)
   1fcf4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1fcf8:	e13fff17 	ldw	r4,-4(fp)
   1fcfc:	001fc380 	call	1fc38 <alt_up_rs232_check_parity>
   1fd00:	1007883a 	mov	r3,r2
   1fd04:	e0bffc17 	ldw	r2,-16(fp)
   1fd08:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1fd0c:	e0bfff17 	ldw	r2,-4(fp)
   1fd10:	1004d3fa 	srli	r2,r2,15
   1fd14:	1080004c 	andi	r2,r2,1
   1fd18:	10bfffc4 	addi	r2,r2,-1
}
   1fd1c:	e037883a 	mov	sp,fp
   1fd20:	dfc00117 	ldw	ra,4(sp)
   1fd24:	df000017 	ldw	fp,0(sp)
   1fd28:	dec00204 	addi	sp,sp,8
   1fd2c:	f800283a 	ret

0001fd30 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1fd30:	defff804 	addi	sp,sp,-32
   1fd34:	dfc00715 	stw	ra,28(sp)
   1fd38:	df000615 	stw	fp,24(sp)
   1fd3c:	df000604 	addi	fp,sp,24
   1fd40:	e13ffc15 	stw	r4,-16(fp)
   1fd44:	e17ffb15 	stw	r5,-20(fp)
   1fd48:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1fd4c:	e0bffc17 	ldw	r2,-16(fp)
   1fd50:	10800017 	ldw	r2,0(r2)
   1fd54:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   1fd58:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
   1fd5c:	00000c06 	br	1fd90 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1fd60:	e0bffb17 	ldw	r2,-20(fp)
   1fd64:	10c00044 	addi	r3,r2,1
   1fd68:	e0fffb15 	stw	r3,-20(fp)
   1fd6c:	e0fffdc4 	addi	r3,fp,-9
   1fd70:	180d883a 	mov	r6,r3
   1fd74:	100b883a 	mov	r5,r2
   1fd78:	e13ffe17 	ldw	r4,-8(fp)
   1fd7c:	001fcbc0 	call	1fcbc <alt_up_rs232_read_data>
   1fd80:	1000081e 	bne	r2,zero,1fda4 <alt_up_rs232_read_fd+0x74>
			count++;
   1fd84:	e0bfff17 	ldw	r2,-4(fp)
   1fd88:	10800044 	addi	r2,r2,1
   1fd8c:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
   1fd90:	e0bffa17 	ldw	r2,-24(fp)
   1fd94:	10ffffc4 	addi	r3,r2,-1
   1fd98:	e0fffa15 	stw	r3,-24(fp)
   1fd9c:	103ff01e 	bne	r2,zero,1fd60 <alt_up_rs232_read_fd+0x30>
   1fda0:	00000106 	br	1fda8 <alt_up_rs232_read_fd+0x78>
		else
			break;
   1fda4:	0001883a 	nop
	}
	return count;
   1fda8:	e0bfff17 	ldw	r2,-4(fp)
}
   1fdac:	e037883a 	mov	sp,fp
   1fdb0:	dfc00117 	ldw	ra,4(sp)
   1fdb4:	df000017 	ldw	fp,0(sp)
   1fdb8:	dec00204 	addi	sp,sp,8
   1fdbc:	f800283a 	ret

0001fdc0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1fdc0:	defff904 	addi	sp,sp,-28
   1fdc4:	dfc00615 	stw	ra,24(sp)
   1fdc8:	df000515 	stw	fp,20(sp)
   1fdcc:	df000504 	addi	fp,sp,20
   1fdd0:	e13ffd15 	stw	r4,-12(fp)
   1fdd4:	e17ffc15 	stw	r5,-16(fp)
   1fdd8:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1fddc:	e0bffd17 	ldw	r2,-12(fp)
   1fde0:	10800017 	ldw	r2,0(r2)
   1fde4:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   1fde8:	e03fff15 	stw	zero,-4(fp)
	while(len--)
   1fdec:	00000d06 	br	1fe24 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1fdf0:	e0bffc17 	ldw	r2,-16(fp)
   1fdf4:	10800003 	ldbu	r2,0(r2)
   1fdf8:	10803fcc 	andi	r2,r2,255
   1fdfc:	100b883a 	mov	r5,r2
   1fe00:	e13ffe17 	ldw	r4,-8(fp)
   1fe04:	001fc7c0 	call	1fc7c <alt_up_rs232_write_data>
   1fe08:	10000b1e 	bne	r2,zero,1fe38 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1fe0c:	e0bfff17 	ldw	r2,-4(fp)
   1fe10:	10800044 	addi	r2,r2,1
   1fe14:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
   1fe18:	e0bffc17 	ldw	r2,-16(fp)
   1fe1c:	10800044 	addi	r2,r2,1
   1fe20:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
   1fe24:	e0bffb17 	ldw	r2,-20(fp)
   1fe28:	10ffffc4 	addi	r3,r2,-1
   1fe2c:	e0fffb15 	stw	r3,-20(fp)
   1fe30:	103fef1e 	bne	r2,zero,1fdf0 <alt_up_rs232_write_fd+0x30>
   1fe34:	00000106 	br	1fe3c <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
   1fe38:	0001883a 	nop
	}
	return count;
   1fe3c:	e0bfff17 	ldw	r2,-4(fp)
}
   1fe40:	e037883a 	mov	sp,fp
   1fe44:	dfc00117 	ldw	ra,4(sp)
   1fe48:	df000017 	ldw	fp,0(sp)
   1fe4c:	dec00204 	addi	sp,sp,8
   1fe50:	f800283a 	ret

0001fe54 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1fe54:	defffc04 	addi	sp,sp,-16
   1fe58:	dfc00315 	stw	ra,12(sp)
   1fe5c:	df000215 	stw	fp,8(sp)
   1fe60:	df000204 	addi	fp,sp,8
   1fe64:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1fe68:	d1600704 	addi	r5,gp,-32740
   1fe6c:	e13ffe17 	ldw	r4,-8(fp)
   1fe70:	00201bc0 	call	201bc <alt_find_dev>
   1fe74:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   1fe78:	e0bfff17 	ldw	r2,-4(fp)
}
   1fe7c:	e037883a 	mov	sp,fp
   1fe80:	dfc00117 	ldw	ra,4(sp)
   1fe84:	df000017 	ldw	fp,0(sp)
   1fe88:	dec00204 	addi	sp,sp,8
   1fe8c:	f800283a 	ret

0001fe90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1fe90:	defff404 	addi	sp,sp,-48
   1fe94:	df000b15 	stw	fp,44(sp)
   1fe98:	df000b04 	addi	fp,sp,44
   1fe9c:	e13ff815 	stw	r4,-32(fp)
   1fea0:	e17ff715 	stw	r5,-36(fp)
   1fea4:	e1bff615 	stw	r6,-40(fp)
   1fea8:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   1feac:	e03ffe15 	stw	zero,-8(fp)
   1feb0:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   1feb4:	d0a75817 	ldw	r2,-25248(gp)
  
  if (alt_ticks_per_second ())
   1feb8:	10004826 	beq	r2,zero,1ffdc <alt_alarm_start+0x14c>
  {
    if (alarm)
   1febc:	e0bff817 	ldw	r2,-32(fp)
   1fec0:	10004426 	beq	r2,zero,1ffd4 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   1fec4:	e0bff817 	ldw	r2,-32(fp)
   1fec8:	e0fff617 	ldw	r3,-40(fp)
   1fecc:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   1fed0:	e0bff817 	ldw	r2,-32(fp)
   1fed4:	e0fff517 	ldw	r3,-44(fp)
   1fed8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   1fedc:	0005303a 	rdctl	r2,status
   1fee0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fee4:	e0fff917 	ldw	r3,-28(fp)
   1fee8:	00bfff84 	movi	r2,-2
   1feec:	1884703a 	and	r2,r3,r2
   1fef0:	1001703a 	wrctl	status,r2
  return context;
   1fef4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1fef8:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1fefc:	d0a75917 	ldw	r2,-25244(gp)
   1ff00:	d0e75a17 	ldw	r3,-25240(gp)
      
      current_nticks = alt_nticks();
   1ff04:	e0bffe15 	stw	r2,-8(fp)
   1ff08:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   1ff0c:	e0bff717 	ldw	r2,-36(fp)
   1ff10:	1011883a 	mov	r8,r2
   1ff14:	0013883a 	mov	r9,zero
   1ff18:	e13ffe17 	ldw	r4,-8(fp)
   1ff1c:	e17fff17 	ldw	r5,-4(fp)
   1ff20:	4105883a 	add	r2,r8,r4
   1ff24:	120d803a 	cmpltu	r6,r2,r8
   1ff28:	4947883a 	add	r3,r9,r5
   1ff2c:	30c9883a 	add	r4,r6,r3
   1ff30:	2007883a 	mov	r3,r4
   1ff34:	1009883a 	mov	r4,r2
   1ff38:	180b883a 	mov	r5,r3
   1ff3c:	01800044 	movi	r6,1
   1ff40:	000f883a 	mov	r7,zero
   1ff44:	2185883a 	add	r2,r4,r6
   1ff48:	1111803a 	cmpltu	r8,r2,r4
   1ff4c:	29c7883a 	add	r3,r5,r7
   1ff50:	40c9883a 	add	r4,r8,r3
   1ff54:	2007883a 	mov	r3,r4
   1ff58:	1009883a 	mov	r4,r2
   1ff5c:	180b883a 	mov	r5,r3
   1ff60:	e0bff817 	ldw	r2,-32(fp)
   1ff64:	11000215 	stw	r4,8(r2)
   1ff68:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1ff6c:	e0bff817 	ldw	r2,-32(fp)
   1ff70:	d0e00d04 	addi	r3,gp,-32716
   1ff74:	e0fffb15 	stw	r3,-20(fp)
   1ff78:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1ff7c:	e0bffa17 	ldw	r2,-24(fp)
   1ff80:	e0fffb17 	ldw	r3,-20(fp)
   1ff84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1ff88:	e0bffb17 	ldw	r2,-20(fp)
   1ff8c:	10c00017 	ldw	r3,0(r2)
   1ff90:	e0bffa17 	ldw	r2,-24(fp)
   1ff94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1ff98:	e0bffb17 	ldw	r2,-20(fp)
   1ff9c:	10800017 	ldw	r2,0(r2)
   1ffa0:	e0fffa17 	ldw	r3,-24(fp)
   1ffa4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1ffa8:	e0bffb17 	ldw	r2,-20(fp)
   1ffac:	e0fffa17 	ldw	r3,-24(fp)
   1ffb0:	10c00015 	stw	r3,0(r2)
}
   1ffb4:	0001883a 	nop
   1ffb8:	e0bffd17 	ldw	r2,-12(fp)
   1ffbc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1ffc0:	e0bffc17 	ldw	r2,-16(fp)
   1ffc4:	1001703a 	wrctl	status,r2
}
   1ffc8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   1ffcc:	0005883a 	mov	r2,zero
   1ffd0:	00000306 	br	1ffe0 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   1ffd4:	00bffa84 	movi	r2,-22
   1ffd8:	00000106 	br	1ffe0 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   1ffdc:	00bfde84 	movi	r2,-134
  }
}
   1ffe0:	e037883a 	mov	sp,fp
   1ffe4:	df000017 	ldw	fp,0(sp)
   1ffe8:	dec00104 	addi	sp,sp,4
   1ffec:	f800283a 	ret

0001fff0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1fff0:	deffff04 	addi	sp,sp,-4
   1fff4:	df000015 	stw	fp,0(sp)
   1fff8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1fffc:	0001883a 	nop
   20000:	e037883a 	mov	sp,fp
   20004:	df000017 	ldw	fp,0(sp)
   20008:	dec00104 	addi	sp,sp,4
   2000c:	f800283a 	ret

00020010 <alt_get_errno>:
{
   20010:	defffe04 	addi	sp,sp,-8
   20014:	dfc00115 	stw	ra,4(sp)
   20018:	df000015 	stw	fp,0(sp)
   2001c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20020:	d0a00a17 	ldw	r2,-32728(gp)
   20024:	10000326 	beq	r2,zero,20034 <alt_get_errno+0x24>
   20028:	d0a00a17 	ldw	r2,-32728(gp)
   2002c:	103ee83a 	callr	r2
   20030:	00000106 	br	20038 <alt_get_errno+0x28>
   20034:	d0a74504 	addi	r2,gp,-25324
}
   20038:	e037883a 	mov	sp,fp
   2003c:	dfc00117 	ldw	ra,4(sp)
   20040:	df000017 	ldw	fp,0(sp)
   20044:	dec00204 	addi	sp,sp,8
   20048:	f800283a 	ret

0002004c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2004c:	defffa04 	addi	sp,sp,-24
   20050:	dfc00515 	stw	ra,20(sp)
   20054:	df000415 	stw	fp,16(sp)
   20058:	df000404 	addi	fp,sp,16
   2005c:	e13ffd15 	stw	r4,-12(fp)
   20060:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   20064:	e0bffd17 	ldw	r2,-12(fp)
   20068:	10000326 	beq	r2,zero,20078 <alt_dev_llist_insert+0x2c>
   2006c:	e0bffd17 	ldw	r2,-12(fp)
   20070:	10800217 	ldw	r2,8(r2)
   20074:	1000061e 	bne	r2,zero,20090 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   20078:	00200100 	call	20010 <alt_get_errno>
   2007c:	1007883a 	mov	r3,r2
   20080:	00800584 	movi	r2,22
   20084:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   20088:	00bffa84 	movi	r2,-22
   2008c:	00001406 	br	200e0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   20090:	e0bffd17 	ldw	r2,-12(fp)
   20094:	e0fffc17 	ldw	r3,-16(fp)
   20098:	e0ffff15 	stw	r3,-4(fp)
   2009c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   200a0:	e0bffe17 	ldw	r2,-8(fp)
   200a4:	e0ffff17 	ldw	r3,-4(fp)
   200a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   200ac:	e0bfff17 	ldw	r2,-4(fp)
   200b0:	10c00017 	ldw	r3,0(r2)
   200b4:	e0bffe17 	ldw	r2,-8(fp)
   200b8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   200bc:	e0bfff17 	ldw	r2,-4(fp)
   200c0:	10800017 	ldw	r2,0(r2)
   200c4:	e0fffe17 	ldw	r3,-8(fp)
   200c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   200cc:	e0bfff17 	ldw	r2,-4(fp)
   200d0:	e0fffe17 	ldw	r3,-8(fp)
   200d4:	10c00015 	stw	r3,0(r2)
}
   200d8:	0001883a 	nop

  return 0;  
   200dc:	0005883a 	mov	r2,zero
}
   200e0:	e037883a 	mov	sp,fp
   200e4:	dfc00117 	ldw	ra,4(sp)
   200e8:	df000017 	ldw	fp,0(sp)
   200ec:	dec00204 	addi	sp,sp,8
   200f0:	f800283a 	ret

000200f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   200f4:	defffd04 	addi	sp,sp,-12
   200f8:	dfc00215 	stw	ra,8(sp)
   200fc:	df000115 	stw	fp,4(sp)
   20100:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20104:	008000b4 	movhi	r2,2
   20108:	1083a904 	addi	r2,r2,3748
   2010c:	e0bfff15 	stw	r2,-4(fp)
   20110:	00000606 	br	2012c <_do_ctors+0x38>
        (*ctor) (); 
   20114:	e0bfff17 	ldw	r2,-4(fp)
   20118:	10800017 	ldw	r2,0(r2)
   2011c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20120:	e0bfff17 	ldw	r2,-4(fp)
   20124:	10bfff04 	addi	r2,r2,-4
   20128:	e0bfff15 	stw	r2,-4(fp)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	008000b4 	movhi	r2,2
   20134:	1083aa04 	addi	r2,r2,3752
   20138:	18bff62e 	bgeu	r3,r2,20114 <_do_ctors+0x20>
}
   2013c:	0001883a 	nop
   20140:	0001883a 	nop
   20144:	e037883a 	mov	sp,fp
   20148:	dfc00117 	ldw	ra,4(sp)
   2014c:	df000017 	ldw	fp,0(sp)
   20150:	dec00204 	addi	sp,sp,8
   20154:	f800283a 	ret

00020158 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   20158:	defffd04 	addi	sp,sp,-12
   2015c:	dfc00215 	stw	ra,8(sp)
   20160:	df000115 	stw	fp,4(sp)
   20164:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20168:	008000b4 	movhi	r2,2
   2016c:	1083a904 	addi	r2,r2,3748
   20170:	e0bfff15 	stw	r2,-4(fp)
   20174:	00000606 	br	20190 <_do_dtors+0x38>
        (*dtor) (); 
   20178:	e0bfff17 	ldw	r2,-4(fp)
   2017c:	10800017 	ldw	r2,0(r2)
   20180:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	10bfff04 	addi	r2,r2,-4
   2018c:	e0bfff15 	stw	r2,-4(fp)
   20190:	e0ffff17 	ldw	r3,-4(fp)
   20194:	008000b4 	movhi	r2,2
   20198:	1083aa04 	addi	r2,r2,3752
   2019c:	18bff62e 	bgeu	r3,r2,20178 <_do_dtors+0x20>
}
   201a0:	0001883a 	nop
   201a4:	0001883a 	nop
   201a8:	e037883a 	mov	sp,fp
   201ac:	dfc00117 	ldw	ra,4(sp)
   201b0:	df000017 	ldw	fp,0(sp)
   201b4:	dec00204 	addi	sp,sp,8
   201b8:	f800283a 	ret

000201bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   201bc:	defffa04 	addi	sp,sp,-24
   201c0:	dfc00515 	stw	ra,20(sp)
   201c4:	df000415 	stw	fp,16(sp)
   201c8:	df000404 	addi	fp,sp,16
   201cc:	e13ffd15 	stw	r4,-12(fp)
   201d0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   201d4:	e0bffc17 	ldw	r2,-16(fp)
   201d8:	10800017 	ldw	r2,0(r2)
   201dc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   201e0:	e13ffd17 	ldw	r4,-12(fp)
   201e4:	000d8b00 	call	d8b0 <strlen>
   201e8:	10800044 	addi	r2,r2,1
   201ec:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   201f0:	00000d06 	br	20228 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   201f4:	e0bfff17 	ldw	r2,-4(fp)
   201f8:	10800217 	ldw	r2,8(r2)
   201fc:	e0fffe17 	ldw	r3,-8(fp)
   20200:	180d883a 	mov	r6,r3
   20204:	e17ffd17 	ldw	r5,-12(fp)
   20208:	1009883a 	mov	r4,r2
   2020c:	0020c800 	call	20c80 <memcmp>
   20210:	1000021e 	bne	r2,zero,2021c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   20214:	e0bfff17 	ldw	r2,-4(fp)
   20218:	00000706 	br	20238 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2021c:	e0bfff17 	ldw	r2,-4(fp)
   20220:	10800017 	ldw	r2,0(r2)
   20224:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   20228:	e0ffff17 	ldw	r3,-4(fp)
   2022c:	e0bffc17 	ldw	r2,-16(fp)
   20230:	18bff01e 	bne	r3,r2,201f4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   20234:	0005883a 	mov	r2,zero
}
   20238:	e037883a 	mov	sp,fp
   2023c:	dfc00117 	ldw	ra,4(sp)
   20240:	df000017 	ldw	fp,0(sp)
   20244:	dec00204 	addi	sp,sp,8
   20248:	f800283a 	ret

0002024c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2024c:	defffe04 	addi	sp,sp,-8
   20250:	dfc00115 	stw	ra,4(sp)
   20254:	df000015 	stw	fp,0(sp)
   20258:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2025c:	01440004 	movi	r5,4096
   20260:	0009883a 	mov	r4,zero
   20264:	0020b100 	call	20b10 <alt_icache_flush>
#endif
}
   20268:	0001883a 	nop
   2026c:	e037883a 	mov	sp,fp
   20270:	dfc00117 	ldw	ra,4(sp)
   20274:	df000017 	ldw	fp,0(sp)
   20278:	dec00204 	addi	sp,sp,8
   2027c:	f800283a 	ret

00020280 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   20280:	defff904 	addi	sp,sp,-28
   20284:	dfc00615 	stw	ra,24(sp)
   20288:	df000515 	stw	fp,20(sp)
   2028c:	df000504 	addi	fp,sp,20
   20290:	e13ffe15 	stw	r4,-8(fp)
   20294:	e17ffd15 	stw	r5,-12(fp)
   20298:	e1bffc15 	stw	r6,-16(fp)
   2029c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   202a0:	e1bffb17 	ldw	r6,-20(fp)
   202a4:	e17ffc17 	ldw	r5,-16(fp)
   202a8:	e13ffd17 	ldw	r4,-12(fp)
   202ac:	00206200 	call	20620 <open>
   202b0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   202b4:	e0bfff17 	ldw	r2,-4(fp)
   202b8:	10001716 	blt	r2,zero,20318 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   202bc:	e0bfff17 	ldw	r2,-4(fp)
   202c0:	10c00324 	muli	r3,r2,12
   202c4:	008000b4 	movhi	r2,2
   202c8:	1885883a 	add	r2,r3,r2
   202cc:	10ca6517 	ldw	r3,10644(r2)
   202d0:	e0bffe17 	ldw	r2,-8(fp)
   202d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   202d8:	e0bfff17 	ldw	r2,-4(fp)
   202dc:	10c00324 	muli	r3,r2,12
   202e0:	008000b4 	movhi	r2,2
   202e4:	1885883a 	add	r2,r3,r2
   202e8:	10ca6617 	ldw	r3,10648(r2)
   202ec:	e0bffe17 	ldw	r2,-8(fp)
   202f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   202f4:	e0bfff17 	ldw	r2,-4(fp)
   202f8:	10c00324 	muli	r3,r2,12
   202fc:	008000b4 	movhi	r2,2
   20300:	1885883a 	add	r2,r3,r2
   20304:	10ca6717 	ldw	r3,10652(r2)
   20308:	e0bffe17 	ldw	r2,-8(fp)
   2030c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   20310:	e13fff17 	ldw	r4,-4(fp)
   20314:	001a9300 	call	1a930 <alt_release_fd>
  }
} 
   20318:	0001883a 	nop
   2031c:	e037883a 	mov	sp,fp
   20320:	dfc00117 	ldw	ra,4(sp)
   20324:	df000017 	ldw	fp,0(sp)
   20328:	dec00204 	addi	sp,sp,8
   2032c:	f800283a 	ret

00020330 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   20330:	defffb04 	addi	sp,sp,-20
   20334:	dfc00415 	stw	ra,16(sp)
   20338:	df000315 	stw	fp,12(sp)
   2033c:	df000304 	addi	fp,sp,12
   20340:	e13fff15 	stw	r4,-4(fp)
   20344:	e17ffe15 	stw	r5,-8(fp)
   20348:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2034c:	01c07fc4 	movi	r7,511
   20350:	01800044 	movi	r6,1
   20354:	e17fff17 	ldw	r5,-4(fp)
   20358:	010000b4 	movhi	r4,2
   2035c:	210a6804 	addi	r4,r4,10656
   20360:	00202800 	call	20280 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   20364:	01c07fc4 	movi	r7,511
   20368:	000d883a 	mov	r6,zero
   2036c:	e17ffe17 	ldw	r5,-8(fp)
   20370:	010000b4 	movhi	r4,2
   20374:	210a6504 	addi	r4,r4,10644
   20378:	00202800 	call	20280 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2037c:	01c07fc4 	movi	r7,511
   20380:	01800044 	movi	r6,1
   20384:	e17ffd17 	ldw	r5,-12(fp)
   20388:	010000b4 	movhi	r4,2
   2038c:	210a6b04 	addi	r4,r4,10668
   20390:	00202800 	call	20280 <alt_open_fd>
}  
   20394:	0001883a 	nop
   20398:	e037883a 	mov	sp,fp
   2039c:	dfc00117 	ldw	ra,4(sp)
   203a0:	df000017 	ldw	fp,0(sp)
   203a4:	dec00204 	addi	sp,sp,8
   203a8:	f800283a 	ret

000203ac <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   203ac:	defff004 	addi	sp,sp,-64
   203b0:	df000f15 	stw	fp,60(sp)
   203b4:	df000f04 	addi	fp,sp,60
   203b8:	e13ff315 	stw	r4,-52(fp)
   203bc:	e17ff215 	stw	r5,-56(fp)
   203c0:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   203c4:	00bffa84 	movi	r2,-22
   203c8:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   203cc:	e0bff317 	ldw	r2,-52(fp)
   203d0:	10800828 	cmpgeui	r2,r2,32
   203d4:	1000501e 	bne	r2,zero,20518 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   203d8:	0005303a 	rdctl	r2,status
   203dc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   203e0:	e0fffd17 	ldw	r3,-12(fp)
   203e4:	00bfff84 	movi	r2,-2
   203e8:	1884703a 	and	r2,r3,r2
   203ec:	1001703a 	wrctl	status,r2
  return context;
   203f0:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   203f4:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   203f8:	e0bff317 	ldw	r2,-52(fp)
   203fc:	100890fa 	slli	r4,r2,3
   20400:	e0fff117 	ldw	r3,-60(fp)
   20404:	008000b4 	movhi	r2,2
   20408:	2085883a 	add	r2,r4,r2
   2040c:	10d7d615 	stw	r3,24408(r2)
    alt_irq[id].context = context;
   20410:	e0bff317 	ldw	r2,-52(fp)
   20414:	100890fa 	slli	r4,r2,3
   20418:	e0fff217 	ldw	r3,-56(fp)
   2041c:	008000b4 	movhi	r2,2
   20420:	2085883a 	add	r2,r4,r2
   20424:	10d7d715 	stw	r3,24412(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   20428:	e0bff117 	ldw	r2,-60(fp)
   2042c:	10001a26 	beq	r2,zero,20498 <alt_irq_register+0xec>
   20430:	e0bff317 	ldw	r2,-52(fp)
   20434:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   20438:	0005303a 	rdctl	r2,status
   2043c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20440:	e0fffb17 	ldw	r3,-20(fp)
   20444:	00bfff84 	movi	r2,-2
   20448:	1884703a 	and	r2,r3,r2
   2044c:	1001703a 	wrctl	status,r2
  return context;
   20450:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   20454:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   20458:	00c00044 	movi	r3,1
   2045c:	e0bffc17 	ldw	r2,-16(fp)
   20460:	1884983a 	sll	r2,r3,r2
   20464:	1007883a 	mov	r3,r2
   20468:	d0a75717 	ldw	r2,-25252(gp)
   2046c:	1884b03a 	or	r2,r3,r2
   20470:	d0a75715 	stw	r2,-25252(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   20474:	d0a75717 	ldw	r2,-25252(gp)
   20478:	100170fa 	wrctl	ienable,r2
   2047c:	e0bffa17 	ldw	r2,-24(fp)
   20480:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   20484:	e0bff917 	ldw	r2,-28(fp)
   20488:	1001703a 	wrctl	status,r2
}
   2048c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   20490:	0005883a 	mov	r2,zero
   20494:	00001a06 	br	20500 <alt_irq_register+0x154>
   20498:	e0bff317 	ldw	r2,-52(fp)
   2049c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   204a0:	0005303a 	rdctl	r2,status
   204a4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   204a8:	e0fff717 	ldw	r3,-36(fp)
   204ac:	00bfff84 	movi	r2,-2
   204b0:	1884703a 	and	r2,r3,r2
   204b4:	1001703a 	wrctl	status,r2
  return context;
   204b8:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   204bc:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   204c0:	00c00044 	movi	r3,1
   204c4:	e0bff817 	ldw	r2,-32(fp)
   204c8:	1884983a 	sll	r2,r3,r2
   204cc:	0084303a 	nor	r2,zero,r2
   204d0:	1007883a 	mov	r3,r2
   204d4:	d0a75717 	ldw	r2,-25252(gp)
   204d8:	1884703a 	and	r2,r3,r2
   204dc:	d0a75715 	stw	r2,-25252(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   204e0:	d0a75717 	ldw	r2,-25252(gp)
   204e4:	100170fa 	wrctl	ienable,r2
   204e8:	e0bff617 	ldw	r2,-40(fp)
   204ec:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   204f0:	e0bff517 	ldw	r2,-44(fp)
   204f4:	1001703a 	wrctl	status,r2
}
   204f8:	0001883a 	nop
  return 0;
   204fc:	0005883a 	mov	r2,zero
   20500:	e0bfff15 	stw	r2,-4(fp)
   20504:	e0bffe17 	ldw	r2,-8(fp)
   20508:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   2050c:	e0bff417 	ldw	r2,-48(fp)
   20510:	1001703a 	wrctl	status,r2
}
   20514:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   20518:	e0bfff17 	ldw	r2,-4(fp)
}
   2051c:	e037883a 	mov	sp,fp
   20520:	df000017 	ldw	fp,0(sp)
   20524:	dec00104 	addi	sp,sp,4
   20528:	f800283a 	ret

0002052c <alt_get_errno>:
{
   2052c:	defffe04 	addi	sp,sp,-8
   20530:	dfc00115 	stw	ra,4(sp)
   20534:	df000015 	stw	fp,0(sp)
   20538:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2053c:	d0a00a17 	ldw	r2,-32728(gp)
   20540:	10000326 	beq	r2,zero,20550 <alt_get_errno+0x24>
   20544:	d0a00a17 	ldw	r2,-32728(gp)
   20548:	103ee83a 	callr	r2
   2054c:	00000106 	br	20554 <alt_get_errno+0x28>
   20550:	d0a74504 	addi	r2,gp,-25324
}
   20554:	e037883a 	mov	sp,fp
   20558:	dfc00117 	ldw	ra,4(sp)
   2055c:	df000017 	ldw	fp,0(sp)
   20560:	dec00204 	addi	sp,sp,8
   20564:	f800283a 	ret

00020568 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   20568:	defffd04 	addi	sp,sp,-12
   2056c:	df000215 	stw	fp,8(sp)
   20570:	df000204 	addi	fp,sp,8
   20574:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   20578:	e0bffe17 	ldw	r2,-8(fp)
   2057c:	10800217 	ldw	r2,8(r2)
   20580:	10d00034 	orhi	r3,r2,16384
   20584:	e0bffe17 	ldw	r2,-8(fp)
   20588:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2058c:	e03fff15 	stw	zero,-4(fp)
   20590:	00001a06 	br	205fc <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   20594:	e0bfff17 	ldw	r2,-4(fp)
   20598:	10c00324 	muli	r3,r2,12
   2059c:	008000b4 	movhi	r2,2
   205a0:	1885883a 	add	r2,r3,r2
   205a4:	10ca6517 	ldw	r3,10644(r2)
   205a8:	e0bffe17 	ldw	r2,-8(fp)
   205ac:	10800017 	ldw	r2,0(r2)
   205b0:	18800f1e 	bne	r3,r2,205f0 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   205b4:	e0bfff17 	ldw	r2,-4(fp)
   205b8:	10c00324 	muli	r3,r2,12
   205bc:	008000b4 	movhi	r2,2
   205c0:	1885883a 	add	r2,r3,r2
   205c4:	108a6717 	ldw	r2,10652(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   205c8:	1000090e 	bge	r2,zero,205f0 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   205cc:	e0bfff17 	ldw	r2,-4(fp)
   205d0:	10c00324 	muli	r3,r2,12
   205d4:	008000b4 	movhi	r2,2
   205d8:	108a6504 	addi	r2,r2,10644
   205dc:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   205e0:	e0fffe17 	ldw	r3,-8(fp)
   205e4:	18800226 	beq	r3,r2,205f0 <alt_file_locked+0x88>
    {
      return -EACCES;
   205e8:	00bffcc4 	movi	r2,-13
   205ec:	00000806 	br	20610 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   205f0:	e0bfff17 	ldw	r2,-4(fp)
   205f4:	10800044 	addi	r2,r2,1
   205f8:	e0bfff15 	stw	r2,-4(fp)
   205fc:	d0a00917 	ldw	r2,-32732(gp)
   20600:	1007883a 	mov	r3,r2
   20604:	e0bfff17 	ldw	r2,-4(fp)
   20608:	18bfe22e 	bgeu	r3,r2,20594 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2060c:	0005883a 	mov	r2,zero
}
   20610:	e037883a 	mov	sp,fp
   20614:	df000017 	ldw	fp,0(sp)
   20618:	dec00104 	addi	sp,sp,4
   2061c:	f800283a 	ret

00020620 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   20620:	defff604 	addi	sp,sp,-40
   20624:	dfc00915 	stw	ra,36(sp)
   20628:	df000815 	stw	fp,32(sp)
   2062c:	df000804 	addi	fp,sp,32
   20630:	e13ffa15 	stw	r4,-24(fp)
   20634:	e17ff915 	stw	r5,-28(fp)
   20638:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2063c:	00bfffc4 	movi	r2,-1
   20640:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   20644:	00bffb44 	movi	r2,-19
   20648:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   2064c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   20650:	d1600704 	addi	r5,gp,-32740
   20654:	e13ffa17 	ldw	r4,-24(fp)
   20658:	00201bc0 	call	201bc <alt_find_dev>
   2065c:	e0bfff15 	stw	r2,-4(fp)
   20660:	e0bfff17 	ldw	r2,-4(fp)
   20664:	1000051e 	bne	r2,zero,2067c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   20668:	e13ffa17 	ldw	r4,-24(fp)
   2066c:	00209680 	call	20968 <alt_find_file>
   20670:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   20674:	00800044 	movi	r2,1
   20678:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2067c:	e0bfff17 	ldw	r2,-4(fp)
   20680:	10002926 	beq	r2,zero,20728 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   20684:	e13fff17 	ldw	r4,-4(fp)
   20688:	0020a700 	call	20a70 <alt_get_fd>
   2068c:	e0bffe15 	stw	r2,-8(fp)
   20690:	e0bffe17 	ldw	r2,-8(fp)
   20694:	1000030e 	bge	r2,zero,206a4 <open+0x84>
    {
      status = index;
   20698:	e0bffe17 	ldw	r2,-8(fp)
   2069c:	e0bffd15 	stw	r2,-12(fp)
   206a0:	00002306 	br	20730 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   206a4:	e0bffe17 	ldw	r2,-8(fp)
   206a8:	10c00324 	muli	r3,r2,12
   206ac:	008000b4 	movhi	r2,2
   206b0:	108a6504 	addi	r2,r2,10644
   206b4:	1885883a 	add	r2,r3,r2
   206b8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   206bc:	e0fff917 	ldw	r3,-28(fp)
   206c0:	00900034 	movhi	r2,16384
   206c4:	10bfffc4 	addi	r2,r2,-1
   206c8:	1886703a 	and	r3,r3,r2
   206cc:	e0bffb17 	ldw	r2,-20(fp)
   206d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   206d4:	e0bffc17 	ldw	r2,-16(fp)
   206d8:	1000051e 	bne	r2,zero,206f0 <open+0xd0>
   206dc:	e13ffb17 	ldw	r4,-20(fp)
   206e0:	00205680 	call	20568 <alt_file_locked>
   206e4:	e0bffd15 	stw	r2,-12(fp)
   206e8:	e0bffd17 	ldw	r2,-12(fp)
   206ec:	10001016 	blt	r2,zero,20730 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   206f0:	e0bfff17 	ldw	r2,-4(fp)
   206f4:	10800317 	ldw	r2,12(r2)
   206f8:	10000826 	beq	r2,zero,2071c <open+0xfc>
   206fc:	e0bfff17 	ldw	r2,-4(fp)
   20700:	10800317 	ldw	r2,12(r2)
   20704:	e1fff817 	ldw	r7,-32(fp)
   20708:	e1bff917 	ldw	r6,-28(fp)
   2070c:	e17ffa17 	ldw	r5,-24(fp)
   20710:	e13ffb17 	ldw	r4,-20(fp)
   20714:	103ee83a 	callr	r2
   20718:	00000106 	br	20720 <open+0x100>
   2071c:	0005883a 	mov	r2,zero
   20720:	e0bffd15 	stw	r2,-12(fp)
   20724:	00000206 	br	20730 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   20728:	00bffb44 	movi	r2,-19
   2072c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   20730:	e0bffd17 	ldw	r2,-12(fp)
   20734:	1000090e 	bge	r2,zero,2075c <open+0x13c>
  {
    alt_release_fd (index);  
   20738:	e13ffe17 	ldw	r4,-8(fp)
   2073c:	001a9300 	call	1a930 <alt_release_fd>
    ALT_ERRNO = -status;
   20740:	002052c0 	call	2052c <alt_get_errno>
   20744:	1007883a 	mov	r3,r2
   20748:	e0bffd17 	ldw	r2,-12(fp)
   2074c:	0085c83a 	sub	r2,zero,r2
   20750:	18800015 	stw	r2,0(r3)
    return -1;
   20754:	00bfffc4 	movi	r2,-1
   20758:	00000106 	br	20760 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   2075c:	e0bffe17 	ldw	r2,-8(fp)
}
   20760:	e037883a 	mov	sp,fp
   20764:	dfc00117 	ldw	ra,4(sp)
   20768:	df000017 	ldw	fp,0(sp)
   2076c:	dec00204 	addi	sp,sp,8
   20770:	f800283a 	ret

00020774 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   20774:	defffa04 	addi	sp,sp,-24
   20778:	df000515 	stw	fp,20(sp)
   2077c:	df000504 	addi	fp,sp,20
   20780:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   20784:	0005303a 	rdctl	r2,status
   20788:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2078c:	e0fffc17 	ldw	r3,-16(fp)
   20790:	00bfff84 	movi	r2,-2
   20794:	1884703a 	and	r2,r3,r2
   20798:	1001703a 	wrctl	status,r2
  return context;
   2079c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   207a0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   207a4:	e0bffb17 	ldw	r2,-20(fp)
   207a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   207ac:	e0bffd17 	ldw	r2,-12(fp)
   207b0:	10800017 	ldw	r2,0(r2)
   207b4:	e0fffd17 	ldw	r3,-12(fp)
   207b8:	18c00117 	ldw	r3,4(r3)
   207bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   207c0:	e0bffd17 	ldw	r2,-12(fp)
   207c4:	10800117 	ldw	r2,4(r2)
   207c8:	e0fffd17 	ldw	r3,-12(fp)
   207cc:	18c00017 	ldw	r3,0(r3)
   207d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   207d4:	e0bffd17 	ldw	r2,-12(fp)
   207d8:	e0fffd17 	ldw	r3,-12(fp)
   207dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   207e0:	e0bffd17 	ldw	r2,-12(fp)
   207e4:	e0fffd17 	ldw	r3,-12(fp)
   207e8:	10c00015 	stw	r3,0(r2)
} 
   207ec:	0001883a 	nop
   207f0:	e0bfff17 	ldw	r2,-4(fp)
   207f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   207f8:	e0bffe17 	ldw	r2,-8(fp)
   207fc:	1001703a 	wrctl	status,r2
}
   20800:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   20804:	0001883a 	nop
   20808:	e037883a 	mov	sp,fp
   2080c:	df000017 	ldw	fp,0(sp)
   20810:	dec00104 	addi	sp,sp,4
   20814:	f800283a 	ret

00020818 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   20818:	defff904 	addi	sp,sp,-28
   2081c:	dfc00615 	stw	ra,24(sp)
   20820:	df000515 	stw	fp,20(sp)
   20824:	dc400415 	stw	r17,16(sp)
   20828:	dc000315 	stw	r16,12(sp)
   2082c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   20830:	d0a00d17 	ldw	r2,-32716(gp)
   20834:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   20838:	d1275917 	ldw	r4,-25244(gp)
   2083c:	d1675a17 	ldw	r5,-25240(gp)
   20840:	01800044 	movi	r6,1
   20844:	000f883a 	mov	r7,zero
   20848:	2185883a 	add	r2,r4,r6
   2084c:	1111803a 	cmpltu	r8,r2,r4
   20850:	29c7883a 	add	r3,r5,r7
   20854:	40c9883a 	add	r4,r8,r3
   20858:	2007883a 	mov	r3,r4
   2085c:	1009883a 	mov	r4,r2
   20860:	180b883a 	mov	r5,r3
   20864:	d1275915 	stw	r4,-25244(gp)
   20868:	d1675a15 	stw	r5,-25240(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2086c:	00002906 	br	20914 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   20870:	e0bffd17 	ldw	r2,-12(fp)
   20874:	10800017 	ldw	r2,0(r2)
   20878:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   2087c:	e13ffd17 	ldw	r4,-12(fp)
   20880:	20800217 	ldw	r2,8(r4)
   20884:	20c00317 	ldw	r3,12(r4)
   20888:	d1275917 	ldw	r4,-25244(gp)
   2088c:	d1675a17 	ldw	r5,-25240(gp)
   20890:	28c01e36 	bltu	r5,r3,2090c <alt_tick+0xf4>
   20894:	1940011e 	bne	r3,r5,2089c <alt_tick+0x84>
   20898:	20801c36 	bltu	r4,r2,2090c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   2089c:	e0bffd17 	ldw	r2,-12(fp)
   208a0:	10800417 	ldw	r2,16(r2)
   208a4:	e0fffd17 	ldw	r3,-12(fp)
   208a8:	18c00517 	ldw	r3,20(r3)
   208ac:	1809883a 	mov	r4,r3
   208b0:	103ee83a 	callr	r2
   208b4:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   208b8:	e0bffb17 	ldw	r2,-20(fp)
   208bc:	1000031e 	bne	r2,zero,208cc <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   208c0:	e13ffd17 	ldw	r4,-12(fp)
   208c4:	00207740 	call	20774 <alt_alarm_stop>
   208c8:	00001006 	br	2090c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   208cc:	e0bffd17 	ldw	r2,-12(fp)
   208d0:	11000217 	ldw	r4,8(r2)
   208d4:	11400317 	ldw	r5,12(r2)
   208d8:	e0bffb17 	ldw	r2,-20(fp)
   208dc:	1021883a 	mov	r16,r2
   208e0:	0023883a 	mov	r17,zero
   208e4:	2405883a 	add	r2,r4,r16
   208e8:	110d803a 	cmpltu	r6,r2,r4
   208ec:	2c47883a 	add	r3,r5,r17
   208f0:	30c9883a 	add	r4,r6,r3
   208f4:	2007883a 	mov	r3,r4
   208f8:	1009883a 	mov	r4,r2
   208fc:	180b883a 	mov	r5,r3
   20900:	e0bffd17 	ldw	r2,-12(fp)
   20904:	11000215 	stw	r4,8(r2)
   20908:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   2090c:	e0bffc17 	ldw	r2,-16(fp)
   20910:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   20914:	e0fffd17 	ldw	r3,-12(fp)
   20918:	d0a00d04 	addi	r2,gp,-32716
   2091c:	18bfd41e 	bne	r3,r2,20870 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   20920:	0001883a 	nop
}
   20924:	0001883a 	nop
   20928:	e6fffe04 	addi	sp,fp,-8
   2092c:	dfc00317 	ldw	ra,12(sp)
   20930:	df000217 	ldw	fp,8(sp)
   20934:	dc400117 	ldw	r17,4(sp)
   20938:	dc000017 	ldw	r16,0(sp)
   2093c:	dec00404 	addi	sp,sp,16
   20940:	f800283a 	ret

00020944 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   20944:	deffff04 	addi	sp,sp,-4
   20948:	df000015 	stw	fp,0(sp)
   2094c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   20950:	000170fa 	wrctl	ienable,zero
}
   20954:	0001883a 	nop
   20958:	e037883a 	mov	sp,fp
   2095c:	df000017 	ldw	fp,0(sp)
   20960:	dec00104 	addi	sp,sp,4
   20964:	f800283a 	ret

00020968 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   20968:	defffb04 	addi	sp,sp,-20
   2096c:	dfc00415 	stw	ra,16(sp)
   20970:	df000315 	stw	fp,12(sp)
   20974:	df000304 	addi	fp,sp,12
   20978:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2097c:	d0a00517 	ldw	r2,-32748(gp)
   20980:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   20984:	00003106 	br	20a4c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   20988:	e0bfff17 	ldw	r2,-4(fp)
   2098c:	10800217 	ldw	r2,8(r2)
   20990:	1009883a 	mov	r4,r2
   20994:	000d8b00 	call	d8b0 <strlen>
   20998:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2099c:	e0bfff17 	ldw	r2,-4(fp)
   209a0:	10c00217 	ldw	r3,8(r2)
   209a4:	e0bffe17 	ldw	r2,-8(fp)
   209a8:	10bfffc4 	addi	r2,r2,-1
   209ac:	1885883a 	add	r2,r3,r2
   209b0:	10800003 	ldbu	r2,0(r2)
   209b4:	10803fcc 	andi	r2,r2,255
   209b8:	1080201c 	xori	r2,r2,128
   209bc:	10bfe004 	addi	r2,r2,-128
   209c0:	10800bd8 	cmpnei	r2,r2,47
   209c4:	1000031e 	bne	r2,zero,209d4 <alt_find_file+0x6c>
    {
      len -= 1;
   209c8:	e0bffe17 	ldw	r2,-8(fp)
   209cc:	10bfffc4 	addi	r2,r2,-1
   209d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   209d4:	e0bffe17 	ldw	r2,-8(fp)
   209d8:	e0fffd17 	ldw	r3,-12(fp)
   209dc:	1885883a 	add	r2,r3,r2
   209e0:	10800003 	ldbu	r2,0(r2)
   209e4:	10803fcc 	andi	r2,r2,255
   209e8:	1080201c 	xori	r2,r2,128
   209ec:	10bfe004 	addi	r2,r2,-128
   209f0:	10800be0 	cmpeqi	r2,r2,47
   209f4:	1000081e 	bne	r2,zero,20a18 <alt_find_file+0xb0>
   209f8:	e0bffe17 	ldw	r2,-8(fp)
   209fc:	e0fffd17 	ldw	r3,-12(fp)
   20a00:	1885883a 	add	r2,r3,r2
   20a04:	10800003 	ldbu	r2,0(r2)
   20a08:	10803fcc 	andi	r2,r2,255
   20a0c:	1080201c 	xori	r2,r2,128
   20a10:	10bfe004 	addi	r2,r2,-128
   20a14:	10000a1e 	bne	r2,zero,20a40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   20a18:	e0bfff17 	ldw	r2,-4(fp)
   20a1c:	10800217 	ldw	r2,8(r2)
   20a20:	e0fffe17 	ldw	r3,-8(fp)
   20a24:	180d883a 	mov	r6,r3
   20a28:	e17ffd17 	ldw	r5,-12(fp)
   20a2c:	1009883a 	mov	r4,r2
   20a30:	0020c800 	call	20c80 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   20a34:	1000021e 	bne	r2,zero,20a40 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   20a38:	e0bfff17 	ldw	r2,-4(fp)
   20a3c:	00000706 	br	20a5c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   20a40:	e0bfff17 	ldw	r2,-4(fp)
   20a44:	10800017 	ldw	r2,0(r2)
   20a48:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   20a4c:	e0ffff17 	ldw	r3,-4(fp)
   20a50:	d0a00504 	addi	r2,gp,-32748
   20a54:	18bfcc1e 	bne	r3,r2,20988 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   20a58:	0005883a 	mov	r2,zero
}
   20a5c:	e037883a 	mov	sp,fp
   20a60:	dfc00117 	ldw	ra,4(sp)
   20a64:	df000017 	ldw	fp,0(sp)
   20a68:	dec00204 	addi	sp,sp,8
   20a6c:	f800283a 	ret

00020a70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   20a70:	defffc04 	addi	sp,sp,-16
   20a74:	df000315 	stw	fp,12(sp)
   20a78:	df000304 	addi	fp,sp,12
   20a7c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   20a80:	00bffa04 	movi	r2,-24
   20a84:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   20a88:	e03fff15 	stw	zero,-4(fp)
   20a8c:	00001706 	br	20aec <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
   20a90:	e0bfff17 	ldw	r2,-4(fp)
   20a94:	10c00324 	muli	r3,r2,12
   20a98:	008000b4 	movhi	r2,2
   20a9c:	1885883a 	add	r2,r3,r2
   20aa0:	108a6517 	ldw	r2,10644(r2)
   20aa4:	10000e1e 	bne	r2,zero,20ae0 <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
   20aa8:	e0bfff17 	ldw	r2,-4(fp)
   20aac:	11000324 	muli	r4,r2,12
   20ab0:	e0fffd17 	ldw	r3,-12(fp)
   20ab4:	008000b4 	movhi	r2,2
   20ab8:	2085883a 	add	r2,r4,r2
   20abc:	10ca6515 	stw	r3,10644(r2)
      if (i > alt_max_fd)
   20ac0:	d0e00917 	ldw	r3,-32732(gp)
   20ac4:	e0bfff17 	ldw	r2,-4(fp)
   20ac8:	1880020e 	bge	r3,r2,20ad4 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   20acc:	e0bfff17 	ldw	r2,-4(fp)
   20ad0:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   20ad4:	e0bfff17 	ldw	r2,-4(fp)
   20ad8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   20adc:	00000706 	br	20afc <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
   20ae0:	e0bfff17 	ldw	r2,-4(fp)
   20ae4:	10800044 	addi	r2,r2,1
   20ae8:	e0bfff15 	stw	r2,-4(fp)
   20aec:	e0bfff17 	ldw	r2,-4(fp)
   20af0:	10800810 	cmplti	r2,r2,32
   20af4:	103fe61e 	bne	r2,zero,20a90 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   20af8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   20afc:	e0bffe17 	ldw	r2,-8(fp)
}
   20b00:	e037883a 	mov	sp,fp
   20b04:	df000017 	ldw	fp,0(sp)
   20b08:	dec00104 	addi	sp,sp,4
   20b0c:	f800283a 	ret

00020b10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   20b10:	defffb04 	addi	sp,sp,-20
   20b14:	df000415 	stw	fp,16(sp)
   20b18:	df000404 	addi	fp,sp,16
   20b1c:	e13ffd15 	stw	r4,-12(fp)
   20b20:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   20b24:	e0bffc17 	ldw	r2,-16(fp)
   20b28:	10840070 	cmpltui	r2,r2,4097
   20b2c:	1000021e 	bne	r2,zero,20b38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   20b30:	00840004 	movi	r2,4096
   20b34:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   20b38:	e0fffd17 	ldw	r3,-12(fp)
   20b3c:	e0bffc17 	ldw	r2,-16(fp)
   20b40:	1885883a 	add	r2,r3,r2
   20b44:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   20b48:	e0bffd17 	ldw	r2,-12(fp)
   20b4c:	e0bfff15 	stw	r2,-4(fp)
   20b50:	00000506 	br	20b68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   20b54:	e0bfff17 	ldw	r2,-4(fp)
   20b58:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   20b5c:	e0bfff17 	ldw	r2,-4(fp)
   20b60:	10800804 	addi	r2,r2,32
   20b64:	e0bfff15 	stw	r2,-4(fp)
   20b68:	e0ffff17 	ldw	r3,-4(fp)
   20b6c:	e0bffe17 	ldw	r2,-8(fp)
   20b70:	18bff836 	bltu	r3,r2,20b54 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   20b74:	e0bffd17 	ldw	r2,-12(fp)
   20b78:	108007cc 	andi	r2,r2,31
   20b7c:	10000226 	beq	r2,zero,20b88 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   20b80:	e0bfff17 	ldw	r2,-4(fp)
   20b84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   20b88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   20b8c:	0001883a 	nop
   20b90:	e037883a 	mov	sp,fp
   20b94:	df000017 	ldw	fp,0(sp)
   20b98:	dec00104 	addi	sp,sp,4
   20b9c:	f800283a 	ret

00020ba0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   20ba0:	defffe04 	addi	sp,sp,-8
   20ba4:	df000115 	stw	fp,4(sp)
   20ba8:	df000104 	addi	fp,sp,4
   20bac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   20bb0:	e0bfff17 	ldw	r2,-4(fp)
   20bb4:	10bffe84 	addi	r2,r2,-6
   20bb8:	10c00428 	cmpgeui	r3,r2,16
   20bbc:	1800191e 	bne	r3,zero,20c24 <alt_exception_cause_generated_bad_addr+0x84>
   20bc0:	100690ba 	slli	r3,r2,2
   20bc4:	008000b4 	movhi	r2,2
   20bc8:	1885883a 	add	r2,r3,r2
   20bcc:	1082f517 	ldw	r2,3028(r2)
   20bd0:	1000683a 	jmp	r2
   20bd4:	00020c14 	movui	zero,2096
   20bd8:	00020c14 	movui	zero,2096
   20bdc:	00020c24 	muli	zero,zero,2096
   20be0:	00020c24 	muli	zero,zero,2096
   20be4:	00020c24 	muli	zero,zero,2096
   20be8:	00020c14 	movui	zero,2096
   20bec:	00020c1c 	xori	zero,zero,2096
   20bf0:	00020c24 	muli	zero,zero,2096
   20bf4:	00020c14 	movui	zero,2096
   20bf8:	00020c14 	movui	zero,2096
   20bfc:	00020c24 	muli	zero,zero,2096
   20c00:	00020c14 	movui	zero,2096
   20c04:	00020c1c 	xori	zero,zero,2096
   20c08:	00020c24 	muli	zero,zero,2096
   20c0c:	00020c24 	muli	zero,zero,2096
   20c10:	00020c14 	movui	zero,2096
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   20c14:	00800044 	movi	r2,1
   20c18:	00000306 	br	20c28 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   20c1c:	0005883a 	mov	r2,zero
   20c20:	00000106 	br	20c28 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   20c24:	0005883a 	mov	r2,zero
  }
}
   20c28:	e037883a 	mov	sp,fp
   20c2c:	df000017 	ldw	fp,0(sp)
   20c30:	dec00104 	addi	sp,sp,4
   20c34:	f800283a 	ret

00020c38 <atexit>:
   20c38:	200b883a 	mov	r5,r4
   20c3c:	000f883a 	mov	r7,zero
   20c40:	000d883a 	mov	r6,zero
   20c44:	0009883a 	mov	r4,zero
   20c48:	0020cf81 	jmpi	20cf8 <__register_exitproc>

00020c4c <exit>:
   20c4c:	defffe04 	addi	sp,sp,-8
   20c50:	000b883a 	mov	r5,zero
   20c54:	dc000015 	stw	r16,0(sp)
   20c58:	dfc00115 	stw	ra,4(sp)
   20c5c:	2021883a 	mov	r16,r4
   20c60:	0020d880 	call	20d88 <__call_exitprocs>
   20c64:	008000b4 	movhi	r2,2
   20c68:	110f1617 	ldw	r4,15448(r2)
   20c6c:	20800f17 	ldw	r2,60(r4)
   20c70:	10000126 	beq	r2,zero,20c78 <exit+0x2c>
   20c74:	103ee83a 	callr	r2
   20c78:	8009883a 	mov	r4,r16
   20c7c:	0019f500 	call	19f50 <_exit>

00020c80 <memcmp>:
   20c80:	30800130 	cmpltui	r2,r6,4
   20c84:	10000b1e 	bne	r2,zero,20cb4 <memcmp+0x34>
   20c88:	2144b03a 	or	r2,r4,r5
   20c8c:	108000cc 	andi	r2,r2,3
   20c90:	1000171e 	bne	r2,zero,20cf0 <memcmp+0x70>
   20c94:	20c00017 	ldw	r3,0(r4)
   20c98:	28800017 	ldw	r2,0(r5)
   20c9c:	1880141e 	bne	r3,r2,20cf0 <memcmp+0x70>
   20ca0:	31bfff04 	addi	r6,r6,-4
   20ca4:	30800128 	cmpgeui	r2,r6,4
   20ca8:	21000104 	addi	r4,r4,4
   20cac:	29400104 	addi	r5,r5,4
   20cb0:	103ff81e 	bne	r2,zero,20c94 <memcmp+0x14>
   20cb4:	30bfffc4 	addi	r2,r6,-1
   20cb8:	30000b26 	beq	r6,zero,20ce8 <memcmp+0x68>
   20cbc:	11800044 	addi	r6,r2,1
   20cc0:	218d883a 	add	r6,r4,r6
   20cc4:	00000106 	br	20ccc <memcmp+0x4c>
   20cc8:	21800726 	beq	r4,r6,20ce8 <memcmp+0x68>
   20ccc:	20800003 	ldbu	r2,0(r4)
   20cd0:	28c00003 	ldbu	r3,0(r5)
   20cd4:	21000044 	addi	r4,r4,1
   20cd8:	29400044 	addi	r5,r5,1
   20cdc:	10fffa26 	beq	r2,r3,20cc8 <memcmp+0x48>
   20ce0:	10c5c83a 	sub	r2,r2,r3
   20ce4:	f800283a 	ret
   20ce8:	0005883a 	mov	r2,zero
   20cec:	f800283a 	ret
   20cf0:	30bfffc4 	addi	r2,r6,-1
   20cf4:	003ff106 	br	20cbc <memcmp+0x3c>

00020cf8 <__register_exitproc>:
   20cf8:	008000b4 	movhi	r2,2
   20cfc:	10cf1617 	ldw	r3,15448(r2)
   20d00:	18805217 	ldw	r2,328(r3)
   20d04:	10001726 	beq	r2,zero,20d64 <__register_exitproc+0x6c>
   20d08:	10c00117 	ldw	r3,4(r2)
   20d0c:	1a000808 	cmpgei	r8,r3,32
   20d10:	40001b1e 	bne	r8,zero,20d80 <__register_exitproc+0x88>
   20d14:	20000b26 	beq	r4,zero,20d44 <__register_exitproc+0x4c>
   20d18:	181090ba 	slli	r8,r3,2
   20d1c:	02400044 	movi	r9,1
   20d20:	48d2983a 	sll	r9,r9,r3
   20d24:	1211883a 	add	r8,r2,r8
   20d28:	41802215 	stw	r6,136(r8)
   20d2c:	11806217 	ldw	r6,392(r2)
   20d30:	21000098 	cmpnei	r4,r4,2
   20d34:	324cb03a 	or	r6,r6,r9
   20d38:	11806215 	stw	r6,392(r2)
   20d3c:	41c04215 	stw	r7,264(r8)
   20d40:	20000b26 	beq	r4,zero,20d70 <__register_exitproc+0x78>
   20d44:	19000084 	addi	r4,r3,2
   20d48:	200890ba 	slli	r4,r4,2
   20d4c:	18c00044 	addi	r3,r3,1
   20d50:	10c00115 	stw	r3,4(r2)
   20d54:	1105883a 	add	r2,r2,r4
   20d58:	11400015 	stw	r5,0(r2)
   20d5c:	0005883a 	mov	r2,zero
   20d60:	f800283a 	ret
   20d64:	18805304 	addi	r2,r3,332
   20d68:	18805215 	stw	r2,328(r3)
   20d6c:	003fe606 	br	20d08 <__register_exitproc+0x10>
   20d70:	11006317 	ldw	r4,396(r2)
   20d74:	2252b03a 	or	r9,r4,r9
   20d78:	12406315 	stw	r9,396(r2)
   20d7c:	003ff106 	br	20d44 <__register_exitproc+0x4c>
   20d80:	00bfffc4 	movi	r2,-1
   20d84:	f800283a 	ret

00020d88 <__call_exitprocs>:
   20d88:	defff704 	addi	sp,sp,-36
   20d8c:	008000b4 	movhi	r2,2
   20d90:	dcc00315 	stw	r19,12(sp)
   20d94:	14cf1617 	ldw	r19,15448(r2)
   20d98:	dc800215 	stw	r18,8(sp)
   20d9c:	dfc00815 	stw	ra,32(sp)
   20da0:	9c805217 	ldw	r18,328(r19)
   20da4:	ddc00715 	stw	r23,28(sp)
   20da8:	dd800615 	stw	r22,24(sp)
   20dac:	dd400515 	stw	r21,20(sp)
   20db0:	dd000415 	stw	r20,16(sp)
   20db4:	dc400115 	stw	r17,4(sp)
   20db8:	dc000015 	stw	r16,0(sp)
   20dbc:	90001026 	beq	r18,zero,20e00 <__call_exitprocs+0x78>
   20dc0:	202b883a 	mov	r21,r4
   20dc4:	282d883a 	mov	r22,r5
   20dc8:	05000044 	movi	r20,1
   20dcc:	94000117 	ldw	r16,4(r18)
   20dd0:	847fffc4 	addi	r17,r16,-1
   20dd4:	88000a16 	blt	r17,zero,20e00 <__call_exitprocs+0x78>
   20dd8:	84000044 	addi	r16,r16,1
   20ddc:	802090ba 	slli	r16,r16,2
   20de0:	9421883a 	add	r16,r18,r16
   20de4:	b0001126 	beq	r22,zero,20e2c <__call_exitprocs+0xa4>
   20de8:	80804017 	ldw	r2,256(r16)
   20dec:	15800f26 	beq	r2,r22,20e2c <__call_exitprocs+0xa4>
   20df0:	8c7fffc4 	addi	r17,r17,-1
   20df4:	88bfffd8 	cmpnei	r2,r17,-1
   20df8:	843fff04 	addi	r16,r16,-4
   20dfc:	103ff91e 	bne	r2,zero,20de4 <__call_exitprocs+0x5c>
   20e00:	dfc00817 	ldw	ra,32(sp)
   20e04:	ddc00717 	ldw	r23,28(sp)
   20e08:	dd800617 	ldw	r22,24(sp)
   20e0c:	dd400517 	ldw	r21,20(sp)
   20e10:	dd000417 	ldw	r20,16(sp)
   20e14:	dcc00317 	ldw	r19,12(sp)
   20e18:	dc800217 	ldw	r18,8(sp)
   20e1c:	dc400117 	ldw	r17,4(sp)
   20e20:	dc000017 	ldw	r16,0(sp)
   20e24:	dec00904 	addi	sp,sp,36
   20e28:	f800283a 	ret
   20e2c:	90800117 	ldw	r2,4(r18)
   20e30:	81800017 	ldw	r6,0(r16)
   20e34:	10bfffc4 	addi	r2,r2,-1
   20e38:	14401726 	beq	r2,r17,20e98 <__call_exitprocs+0x110>
   20e3c:	80000015 	stw	zero,0(r16)
   20e40:	303feb26 	beq	r6,zero,20df0 <__call_exitprocs+0x68>
   20e44:	a446983a 	sll	r3,r20,r17
   20e48:	90806217 	ldw	r2,392(r18)
   20e4c:	95c00117 	ldw	r23,4(r18)
   20e50:	1884703a 	and	r2,r3,r2
   20e54:	1000081e 	bne	r2,zero,20e78 <__call_exitprocs+0xf0>
   20e58:	303ee83a 	callr	r6
   20e5c:	90c00117 	ldw	r3,4(r18)
   20e60:	98805217 	ldw	r2,328(r19)
   20e64:	1dc0011e 	bne	r3,r23,20e6c <__call_exitprocs+0xe4>
   20e68:	90bfe126 	beq	r18,r2,20df0 <__call_exitprocs+0x68>
   20e6c:	103fe426 	beq	r2,zero,20e00 <__call_exitprocs+0x78>
   20e70:	1025883a 	mov	r18,r2
   20e74:	003fd506 	br	20dcc <__call_exitprocs+0x44>
   20e78:	90806317 	ldw	r2,396(r18)
   20e7c:	81002017 	ldw	r4,128(r16)
   20e80:	1886703a 	and	r3,r3,r2
   20e84:	1800061e 	bne	r3,zero,20ea0 <__call_exitprocs+0x118>
   20e88:	200b883a 	mov	r5,r4
   20e8c:	a809883a 	mov	r4,r21
   20e90:	303ee83a 	callr	r6
   20e94:	003ff106 	br	20e5c <__call_exitprocs+0xd4>
   20e98:	94400115 	stw	r17,4(r18)
   20e9c:	003fe806 	br	20e40 <__call_exitprocs+0xb8>
   20ea0:	303ee83a 	callr	r6
   20ea4:	003fed06 	br	20e5c <__call_exitprocs+0xd4>
