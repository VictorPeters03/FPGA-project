
rps.elf:     file format elf32-littlenios2
rps.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000228

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00018318 memsz 0x00018318 flags r-x
    LOAD off    0x00019338 vaddr 0x00018338 paddr 0x00019fc8 align 2**12
         filesz 0x00001c90 memsz 0x00001c90 flags rw-
    LOAD off    0x00000c58 vaddr 0x0001bc58 paddr 0x0001bc58 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017848  00000228  00000228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008c8  00017a70  00017a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c90  00018338  00019fc8  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  0001bc58  0001bc58  0001bc58  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0001bdb4  0001bdb4  0001afc8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0001afc8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001478  00000000  00000000  0001aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00036740  00000000  00000000  0001c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000de73  00000000  00000000  00052bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0001d22d  00000000  00000000  00060a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000032dc  00000000  00000000  0007dc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00005250  00000000  00000000  00080f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00023cfb  00000000  00000000  0008617c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000a9e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002b40  00000000  00000000  000a9e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000b0ae5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000b0ae8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000b0aed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000b0aee  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000b0aef  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000b0af3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000b0af7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000b0afb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000b0b04  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000b0b0d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  000b0b16  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  000b0b25  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000a4f38  00000000  00000000  000b0b51  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000228 l    d  .text	00000000 .text
00017a70 l    d  .rodata	00000000 .rodata
00018338 l    d  .rwdata	00000000 .rwdata
0001bc58 l    d  .bss	00000000 .bss
0001bdb4 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/school/Jaar-3/Periode-4/FPGA/FPGA-project/software/rps_bsp//obj/HAL/src/crt0.o
00000260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 kiss_fft.c
00000264 l     F .text	00000154 kf_bfly2
000003b8 l     F .text	000004b4 kf_bfly4
0000086c l     F .text	000003a0 kf_bfly3
00000c0c l     F .text	00000768 kf_bfly5
00001374 l     F .text	000002d4 kf_bfly_generic
00001648 l     F .text	00000238 kf_work
00001880 l     F .text	00000144 kf_factor
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 libmfcc.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
00017abc l     O .rodata	00000080 npio2_hw
00017b3c l     O .rodata	00000108 two_over_pi
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
00017c84 l     O .rodata	00000010 init_jk
00017c44 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 math_err.c
00006b10 l     F .text	00000048 with_errno
00006b58 l     F .text	00000050 xflow
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00018338 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000ca10 l     F .text	000000c0 __sbprintf
00017dec l     O .rodata	00000010 blanks.1
00017ddc l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000cc34 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000e8a8 l     F .text	00000008 __fp_lock
0000e8bc l     F .text	00000008 __fp_unlock
0000e8c4 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00017ea0 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
000115ac l     F .text	000000f4 __sprint_r.part.0
00012934 l     F .text	000000c0 __sbprintf
00017fd4 l     O .rodata	00000010 blanks.1
00017fc4 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00012ddc l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000147d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000148e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001494c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00014a64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00014b50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014cb8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00014da4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
000151e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019fb8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001544c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001558c l     F .text	00000034 alt_dev_reg
00018e78 l     O .rwdata	00001060 JTAG_UART
00019ed8 l     O .rwdata	00000030 AV_Config
00019f08 l     O .rwdata	00000030 Audio_Subsystem_Audio
00019f38 l     O .rwdata	0000002c Char_LCD_16x2
00019f64 l     O .rwdata	0000002c Serial_Port
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000158b4 l     F .text	00000210 altera_avalon_jtag_uart_irq
00015ac4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016108 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016c10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016e6c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001713c l     F .text	0000003c alt_get_errno
00017178 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001bc88 g     O .bss	00000004 alt_instruction_exception_handler
0000a7f8 g     F .text	00000018 putchar
00010c38 g     F .text	00000070 _mprec_log10
00010d24 g     F .text	00000060 __any_on
00013234 g     F .text	00000058 _isatty_r
00017eac g     O .rodata	00000028 __mprec_tinytens
00014ec0 g     F .text	0000007c alt_main
0000a810 g     F .text	000000cc _puts_r
0001bcb4 g     O .bss	00000100 alt_irq
00013380 g     F .text	00000064 _lseek_r
00003110 g     F .text	000000c4 log
00003490 g     F .text	000000ac sqrt
00019fc8 g       *ABS*	00000000 __flash_rwdata_start
00016278 g     F .text	00000040 alt_up_character_lcd_send_cmd
00008698 g     F .text	00000080 .hidden __eqdf2
0001bdb4 g       *ABS*	00000000 __alt_heap_start
00013b88 g     F .text	00000060 _kill_r
0000a7b8 g     F .text	00000038 printf
00013554 g     F .text	0000006c _wcrtomb_r
000136f8 g     F .text	00000098 _signal_r
00011548 g     F .text	0000005c __sseek
0000ec0c g     F .text	00000010 __sinit
000129f4 g     F .text	00000148 __swbuf_r
0001328c g     F .text	00000074 _setlocale_r
0000ea2c g     F .text	00000078 __sfmoreglue
00014f60 g     F .text	00000024 __malloc_unlock
00016930 g     F .text	00000090 alt_up_rs232_read_fd
00002c9c g     F .text	0000011c GetCenterFrequency
00006bcc g     F .text	0000004c .hidden __math_divzero
0000f978 g     F .text	0000012c memmove
0000ebf8 g     F .text	00000014 _cleanup
0000fb94 g     F .text	000000a4 _Balloc
00008718 g     F .text	000000e8 .hidden __gtdf2
00017584 g     F .text	00000024 altera_nios2_gen2_irq_init
00009e7c g     F .text	0000000c __errno
00016204 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000000c __reset
0000f640 g     F .text	00000008 __localeconv_l
00000020 g       *ABS*	00000000 __flash_exceptions_start
000131d4 g     F .text	00000060 _fstat_r
0001bc64 g     O .bss	00000004 errno
00002e68 g     F .text	000001e4 floor
000114c0 g     F .text	00000008 __seofread
0001bc70 g     O .bss	00000004 alt_argv
00021f90 g       *ABS*	00000000 _gp
00014a44 g     F .text	00000020 getpid
00018cf8 g     O .rwdata	00000180 alt_fd_list
00004cd0 g     F .text	0000074c __ieee754_rem_pio2
0000a7f0 g     F .text	00000008 _putchar_r
00016dbc g     F .text	00000090 alt_find_dev
0000a688 g     F .text	00000100 memcpy
00016428 g     F .text	00000050 alt_up_character_lcd_write_fd
00006c18 g     F .text	00000094 .hidden __math_invalid
0000e8b0 g     F .text	0000000c _cleanup_r
00009a74 g     F .text	000000b8 .hidden __floatsidf
00016f40 g     F .text	0000007c alt_io_redirect
00008800 g     F .text	000000e8 .hidden __ltdf2
00017a70 g       *ABS*	00000000 __DTOR_END__
000168bc g     F .text	00000074 alt_up_rs232_read_data
0000a8dc g     F .text	00000010 puts
00017768 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00010b94 g     F .text	000000a4 __ratio
00012918 g     F .text	0000001c __vfiprintf_internal
00015cc0 g     F .text	00000220 altera_avalon_jtag_uart_read
00009e88 g     F .text	00000010 malloc
0000a788 g     F .text	00000030 _printf_r
00007064 g     F .text	00000064 .hidden __udivsi3
00014aa0 g     F .text	000000b0 isatty
00013790 g     F .text	000000c4 _raise_r
00012c10 g     F .text	00000064 __assert_func
00017efc g     O .rodata	000000c8 __mprec_tens
00005688 g     F .text	000004ac __kernel_cos
0001bc60 g     O .bss	00000004 __malloc_top_pad
00013be8 g     F .text	00000004 _getpid_r
0000f648 g     F .text	0000000c _localeconv_r
00010004 g     F .text	000000b0 __i2b
0000f06c g     F .text	00000494 __sfvwrite_r
00013854 g     F .text	000000bc __sigtramp_r
0000a8ec g     F .text	00000058 _sbrk_r
00013434 g     F .text	00000064 _read_r
00019fb0 g     O .rwdata	00000004 alt_max_fd
00016838 g     F .text	00000044 alt_up_rs232_check_parity
00012e9c g     F .text	00000070 _fclose_r
0000e824 g     F .text	00000084 fflush
0001bc5c g     O .bss	00000004 __malloc_max_sbrked_mem
00016fbc g     F .text	00000180 alt_irq_register
00006848 g     F .text	000002c8 __kernel_sin
00009bbc g     F .text	000000fc .hidden __extendsfdf2
00007494 g     F .text	000008f0 .hidden __adddf3
0000714c g     F .text	00000070 .hidden __nesf2
00010928 g     F .text	00000108 __b2d
0001420c g     F .text	000005c4 .hidden __umoddi3
00014de0 g     F .text	000000e0 lseek
00019f90 g     O .rwdata	00000004 _global_impure_ptr
00010f30 g     F .text	0000053c _realloc_r
0001bdb4 g       *ABS*	00000000 __bss_end
00017458 g     F .text	0000012c alt_tick
00013bec g     F .text	00000620 .hidden __udivdi3
00013138 g     F .text	00000024 _fputwc_r
00017ed4 g     O .rodata	00000028 __mprec_bigtens
0000fdb8 g     F .text	00000138 __s2b
00013684 g     F .text	00000018 abort
00009b2c g     F .text	00000090 .hidden __floatunsidf
00010648 g     F .text	00000058 __mcmp
0000ec2c g     F .text	00000014 __fp_lock_all
00002050 g     F .text	000000cc check_KEYs
000173b4 g     F .text	000000a4 alt_alarm_stop
0001bc78 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000cc alt_irq_handler
00018cd0 g     O .rwdata	00000028 alt_dev_null
00005b34 g     F .text	00000d14 __kernel_rem_pio2
000166c8 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00016bf0 g     F .text	00000020 alt_dcache_flush_all
0000fef0 g     F .text	00000064 __hi0bits
000099f4 g     F .text	00000080 .hidden __fixdfsi
00019fc8 g       *ABS*	00000000 __ram_rwdata_end
00019fa8 g     O .rwdata	00000008 alt_dev_list
00015488 g     F .text	00000104 write
00010d84 g     F .text	000000cc _putc_r
000071bc g     F .text	000000b8 .hidden __gtsf2
00018338 g       *ABS*	00000000 __ram_rodata_end
00014988 g     F .text	000000bc fstat
000169c0 g     F .text	00000094 alt_up_rs232_write_fd
00014b8c g     F .text	0000012c kill
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00008800 g     F .text	000000e8 .hidden __ledf2
00006bc0 g     F .text	0000000c .hidden __math_oflow
00010378 g     F .text	00000148 __pow5mult
000116b8 g     F .text	00001260 ___vfiprintf_internal_r
000070c8 g     F .text	0000005c .hidden __umodsi3
0001bdb4 g       *ABS*	00000000 end
00015800 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001c8 g     F .exceptions	00000060 alt_instruction_exception_entry
00006d10 g     F .text	000000a0 .hidden __math_check_oflow
00017a70 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00006bb4 g     F .text	0000000c .hidden __math_may_uflow
00016188 g     F .text	0000007c alt_avalon_timer_sc_init
00009e28 g     F .text	00000054 .hidden __clzsi2
00015ee0 g     F .text	00000228 altera_avalon_jtag_uart_write
00002db8 g     F .text	000000b0 cos
00001c00 g     F .text	000000d4 kiss_fft_stride
0000ec1c g     F .text	00000004 __sfp_lock_acquire
0000f8a8 g     F .text	000000d0 memchr
00001cd4 g     F .text	00000048 kiss_fft
0001632c g     F .text	00000080 alt_up_character_lcd_write
0000a9dc g     F .text	00002018 ___vfprintf_internal_r
0000ed70 g     F .text	000002fc _free_r
00014f84 g     F .text	0000022c alt_printf
00018138 g     O .rodata	00000180 _ctype_b
00013300 g     F .text	0000000c __locale_mb_cur_max
00017950 g     F .text	00000120 __call_exitprocs
00019f98 g     O .rwdata	00000004 __malloc_sbrk_base
00000228 g     F .text	0000003c _start
0001bc7c g     O .bss	00000004 _alt_tick_rate
0000304c g     F .text	000000c4 sin
000104c0 g     F .text	00000188 __lshift
0001bc80 g     O .bss	00000008 _alt_nticks
000139cc g     F .text	000000a0 signal
0001521c g     F .text	00000108 read
000155fc g     F .text	000000a0 alt_sys_init
00016578 g     F .text	0000008c alt_up_character_lcd_shift_display
00007274 g     F .text	00000124 .hidden __floatsisf
000178c0 g     F .text	00000090 __register_exitproc
000167fc g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0000211c g     F .text	00000118 normalize_audio
000100b4 g     F .text	000002c4 __multiply
00016604 g     F .text	0000008c alt_up_character_lcd_erase_pos
00003bc8 g     F .text	00001108 __ieee754_pow
00015b64 g     F .text	00000068 altera_avalon_jtag_uart_close
000031d4 g     F .text	000002bc pow
00007124 g     F .text	00000028 .hidden __mulsi3
00018338 g       *ABS*	00000000 __ram_rwdata_start
00017a70 g       *ABS*	00000000 __ram_rodata_start
0001bc8c g     O .bss	00000028 __malloc_current_mallinfo
0000714c g     F .text	00000070 .hidden __eqsf2
00010a30 g     F .text	00000164 __d2b
0001569c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000176b0 g     F .text	000000b8 alt_get_fd
00012bb8 g     F .text	00000058 _close_r
00017848 g     F .text	00000078 memcmp
0001575c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001bdb4 g       *ABS*	00000000 __alt_stack_base
000157ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000cad0 g     F .text	00000164 __swsetup_r
00007d84 g     F .text	00000914 .hidden __divdf3
0000eaa4 g     F .text	00000154 __sfp
00010ca8 g     F .text	0000007c __copybits
0001875c g     O .rwdata	00000408 __malloc_av_
0000ec28 g     F .text	00000004 __sinit_lock_release
000088e8 g     F .text	000007ac .hidden __muldf3
0001146c g     F .text	00000054 __sread
0001675c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
000175a8 g     F .text	00000108 alt_find_file
00016c4c g     F .text	000000a8 alt_dev_llist_insert
00014f3c g     F .text	00000024 __malloc_lock
00015394 g     F .text	000000b8 sbrk
0000e7c4 g     F .text	00000060 _fflush_r
00012c88 g     F .text	00000154 _calloc_r
0001bc58 g       *ABS*	00000000 __bss_start
0000faa4 g     F .text	000000f0 memset
00001e0c g     F .text	00000244 main
0001bc74 g     O .bss	00000004 alt_envp
0001bc58 g     O .bss	00000004 __malloc_max_total_mem
000156fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012b3c g     F .text	00000018 __swbuf
000164ec g     F .text	0000008c alt_up_character_lcd_shift_cursor
000115a4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00012f0c g     F .text	00000070 fclose
00009cb8 g     F .text	00000170 .hidden __truncdfsf2
0000ce54 g     F .text	00001748 _dtoa_r
00009ea8 g     F .text	000007e0 _malloc_r
00013654 g     F .text	00000030 __ascii_wctomb
00019fb4 g     O .rwdata	00000004 alt_errno
00012f7c g     F .text	00000020 _fiprintf_r
00013a6c g     F .text	00000060 _init_signal
0000f500 g     F .text	00000098 _fwalk
000133e4 g     F .text	0000000c _mbtowc_r
00010e50 g     F .text	000000e0 putc
00006f70 g     F .text	00000080 .hidden __divsi3
000162f0 g     F .text	0000003c alt_up_character_lcd_open_dev
0000ec54 g     F .text	0000011c _malloc_trim_r
00017a70 g       *ABS*	00000000 __CTOR_END__
00006cac g     F .text	00000064 .hidden __math_check_uflow
000162b8 g     F .text	00000038 alt_up_character_lcd_init
00002b88 g     F .text	00000114 GetMagnitudeFactor
00013498 g     F .text	000000b8 strcmp
00017a70 g       *ABS*	00000000 __flash_rodata_start
00002530 g     F .text	00000290 GetCoefficient
00017a70 g       *ABS*	00000000 __DTOR_LIST__
00016a54 g     F .text	0000003c alt_up_rs232_open_dev
00008698 g     F .text	00000080 .hidden __nedf2
000155c0 g     F .text	0000003c alt_irq_init
00015324 g     F .text	00000070 alt_release_fd
00016690 g     F .text	00000038 alt_up_character_lcd_cursor_off
00017c94 g     O .rodata	00000100 .hidden __clz_tab
0001bc68 g     O .bss	00000004 _PathLocale
00017800 g     F .text	00000014 atexit
000071bc g     F .text	000000b8 .hidden __gesf2
00012b54 g     F .text	00000064 _write_r
0001330c g     F .text	00000074 setlocale
00019f94 g     O .rwdata	00000004 _impure_ptr
0001bc6c g     O .bss	00000004 alt_argc
0000e59c g     F .text	00000228 __sflush_r
00006db0 g     F .text	000001c0 scalbn
00016d58 g     F .text	00000064 _do_dtors
0000353c g     F .text	0000068c __ieee754_log
000022ec g     F .text	00000244 calculate_mfcc
00000020 g       .exceptions	00000000 alt_irq_entry
000133f0 g     F .text	00000044 __ascii_mbtowc
000108cc g     F .text	0000005c __ulp
0000ec40 g     F .text	00000014 __fp_unlock_all
00002234 g     F .text	000000b8 fft
00019fa0 g     O .rwdata	00000008 alt_fs_list
00016700 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001687c g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000f654 g     F .text	0000000c localeconv
0000541c g     F .text	0000026c __ieee754_sqrt
0000f810 g     F .text	00000098 __swhatbuf_r
00019fc8 g       *ABS*	00000000 _edata
0001bdb4 g       *ABS*	00000000 _end
00012fd4 g     F .text	00000164 __fputwc
00000228 g       *ABS*	00000000 __ram_exceptions_end
00015bcc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000114c8 g     F .text	00000080 __swrite
00019f9c g     O .rwdata	00000004 __malloc_trim_threshold
00017814 g     F .text	00000034 exit
00012f9c g     F .text	00000038 fiprintf
00013550 g     F .text	00000004 _vfiprintf_r
0000f598 g     F .text	000000a8 _fwalk_reent
00007398 g     F .text	000000fc .hidden __floatunsisf
000106a0 g     F .text	0000022c __mdiff
00001d1c g     F .text	00000020 kiss_fft_cleanup
00006ba8 g     F .text	0000000c .hidden __math_uflow
00006ff0 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000ec20 g     F .text	00000004 __sfp_lock_release
000163ac g     F .text	0000007c alt_up_character_lcd_string
00018034 g     O .rodata	00000101 _ctype_
000099a0 g     F .text	00000054 .hidden __unorddf2
00014914 g     F .text	00000038 _exit
00016a90 g     F .text	00000160 alt_alarm_start
0000f660 g     F .text	000001b0 __smakebuf_r
0000a944 g     F .text	00000098 strlen
0001369c g     F .text	0000005c _init_signal_r
00017254 g     F .text	00000160 open
00008718 g     F .text	000000e8 .hidden __gedf2
000151b0 g     F .text	00000030 alt_putchar
00012c74 g     F .text	00000014 __assert
00002888 g     F .text	00000300 GetFilterParameter
000116a0 g     F .text	00000018 __sprint_r
00016e4c g     F .text	00000020 alt_icache_flush_all
000027c0 g     F .text	000000c8 NormalizationFactor
00016478 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00019fbc g     O .rwdata	00000004 alt_priority_mask
0000c9f4 g     F .text	0000001c __vfprintf_internal
00001d3c g     F .text	000000d0 kiss_fft_next_fast_size
00013648 g     F .text	0000000c _wctomb_r
000019c4 g     F .text	0000023c kiss_fft_alloc
00009094 g     F .text	0000090c .hidden __subdf3
0000ff54 g     F .text	000000b0 __lo0bits
00019fc0 g     O .rwdata	00000008 alt_alarm_list
00016cf4 g     F .text	00000064 _do_ctors
00013acc g     F .text	000000bc __sigtramp
000167bc g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
000135c0 g     F .text	00000088 wcrtomb
0001480c g     F .text	000000dc close
00018b64 g     O .rwdata	0000016c __global_locale
00014d20 g     F .text	00000084 alt_load
0001315c g     F .text	00000078 fputwc
00013910 g     F .text	000000bc raise
00009e98 g     F .text	00000010 free
0000ec24 g     F .text	00000004 __sinit_lock_acquire
0000fc5c g     F .text	0000015c __multadd
0000fc38 g     F .text	00000024 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408a14 	ori	at,at,552
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008000b4 	movhi	r2,2
 148:	1885883a 	add	r2,r3,r2
 14c:	10ef2d17 	ldw	r3,-17228(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008000b4 	movhi	r2,2
 15c:	2085883a 	add	r2,r4,r2
 160:	10af2e17 	ldw	r2,-17224(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	0001883a 	nop
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1dc:	00bfffc4 	movi	r2,-1
 1e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 1e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1e8:	d0a73e17 	ldw	r2,-25352(gp)
 1ec:	10000726 	beq	r2,zero,20c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f0:	d0a73e17 	ldw	r2,-25352(gp)
 1f4:	e0ffff17 	ldw	r3,-4(fp)
 1f8:	e1bffe17 	ldw	r6,-8(fp)
 1fc:	e17ffd17 	ldw	r5,-12(fp)
 200:	1809883a 	mov	r4,r3
 204:	103ee83a 	callr	r2
 208:	00000206 	br	214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 20c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 210:	0005883a 	mov	r2,zero
}
 214:	e037883a 	mov	sp,fp
 218:	dfc00117 	ldw	ra,4(sp)
 21c:	df000017 	ldw	fp,0(sp)
 220:	dec00204 	addi	sp,sp,8
 224:	f800283a 	ret

Disassembly of section .text:

00000228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     228:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     22c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     230:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     234:	d687e414 	ori	gp,gp,8080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     238:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     23c:	10af1614 	ori	r2,r2,48216

    movhi r3, %hi(__bss_end)
     240:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     244:	18ef6d14 	ori	r3,r3,48564

    beq r2, r3, 1f
     248:	10c00326 	beq	r2,r3,258 <_start+0x30>

0:
    stw zero, (r2)
     24c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     254:	10fffd36 	bltu	r2,r3,24c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     258:	0014d200 	call	14d20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     25c:	0014ec00 	call	14ec0 <alt_main>

00000260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     260:	003fff06 	br	260 <alt_after_alt_main>

00000264 <kf_bfly2>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
     264:	defff704 	addi	sp,sp,-36
     268:	df000815 	stw	fp,32(sp)
     26c:	df000804 	addi	fp,sp,32
     270:	e13ffb15 	stw	r4,-20(fp)
     274:	e17ffa15 	stw	r5,-24(fp)
     278:	e1bff915 	stw	r6,-28(fp)
     27c:	e1fff815 	stw	r7,-32(fp)
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
     280:	e0bff917 	ldw	r2,-28(fp)
     284:	10804204 	addi	r2,r2,264
     288:	e0bffe15 	stw	r2,-8(fp)
    kiss_fft_cpx t;
    Fout2 = Fout + m;
     28c:	e0bff817 	ldw	r2,-32(fp)
     290:	100490fa 	slli	r2,r2,3
     294:	e0fffb17 	ldw	r3,-20(fp)
     298:	1885883a 	add	r2,r3,r2
     29c:	e0bfff15 	stw	r2,-4(fp)
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	10c00017 	ldw	r3,0(r2)
     2a8:	e13ffe17 	ldw	r4,-8(fp)
     2ac:	20800017 	ldw	r2,0(r4)
     2b0:	1887ff32 	custom	252,r3,r3,r2
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	11000117 	ldw	r4,4(r2)
     2bc:	e17ffe17 	ldw	r5,-8(fp)
     2c0:	28800117 	ldw	r2,4(r5)
     2c4:	2085ff32 	custom	252,r2,r4,r2
     2c8:	1885ffb2 	custom	254,r2,r3,r2
     2cc:	e0bffc15 	stw	r2,-16(fp)
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	10c00017 	ldw	r3,0(r2)
     2d8:	e13ffe17 	ldw	r4,-8(fp)
     2dc:	20800117 	ldw	r2,4(r4)
     2e0:	1887ff32 	custom	252,r3,r3,r2
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	11000117 	ldw	r4,4(r2)
     2ec:	e17ffe17 	ldw	r5,-8(fp)
     2f0:	28800017 	ldw	r2,0(r5)
     2f4:	2085ff32 	custom	252,r2,r4,r2
     2f8:	1885ff72 	custom	253,r2,r3,r2
     2fc:	e0bffd15 	stw	r2,-12(fp)
        tw1 += fstride;
     300:	e0bffa17 	ldw	r2,-24(fp)
     304:	100490fa 	slli	r2,r2,3
     308:	e0fffe17 	ldw	r3,-8(fp)
     30c:	1885883a 	add	r2,r3,r2
     310:	e0bffe15 	stw	r2,-8(fp)
        C_SUB( *Fout2 ,  *Fout , t );
     314:	e0bffb17 	ldw	r2,-20(fp)
     318:	10c00017 	ldw	r3,0(r2)
     31c:	e0bffc17 	ldw	r2,-16(fp)
     320:	1887ffb2 	custom	254,r3,r3,r2
     324:	e0bfff17 	ldw	r2,-4(fp)
     328:	10c00015 	stw	r3,0(r2)
     32c:	e0bffb17 	ldw	r2,-20(fp)
     330:	10c00117 	ldw	r3,4(r2)
     334:	e0bffd17 	ldw	r2,-12(fp)
     338:	1887ffb2 	custom	254,r3,r3,r2
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10c00115 	stw	r3,4(r2)
        C_ADDTO( *Fout ,  t );
     344:	e0bffb17 	ldw	r2,-20(fp)
     348:	10c00017 	ldw	r3,0(r2)
     34c:	e0bffc17 	ldw	r2,-16(fp)
     350:	1887ff72 	custom	253,r3,r3,r2
     354:	e0bffb17 	ldw	r2,-20(fp)
     358:	10c00015 	stw	r3,0(r2)
     35c:	e0bffb17 	ldw	r2,-20(fp)
     360:	10c00117 	ldw	r3,4(r2)
     364:	e0bffd17 	ldw	r2,-12(fp)
     368:	1887ff72 	custom	253,r3,r3,r2
     36c:	e0bffb17 	ldw	r2,-20(fp)
     370:	10c00115 	stw	r3,4(r2)
        ++Fout2;
     374:	e0bfff17 	ldw	r2,-4(fp)
     378:	10800204 	addi	r2,r2,8
     37c:	e0bfff15 	stw	r2,-4(fp)
        ++Fout;
     380:	e0bffb17 	ldw	r2,-20(fp)
     384:	10800204 	addi	r2,r2,8
     388:	e0bffb15 	stw	r2,-20(fp)
    }while (--m);
     38c:	e0bff817 	ldw	r2,-32(fp)
     390:	10bfffc4 	addi	r2,r2,-1
     394:	e0bff815 	stw	r2,-32(fp)
     398:	e0bff817 	ldw	r2,-32(fp)
     39c:	103fc01e 	bne	r2,zero,2a0 <kf_bfly2+0x3c>
}
     3a0:	0001883a 	nop
     3a4:	0001883a 	nop
     3a8:	e037883a 	mov	sp,fp
     3ac:	df000017 	ldw	fp,0(sp)
     3b0:	dec00104 	addi	sp,sp,4
     3b4:	f800283a 	ret

000003b8 <kf_bfly4>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
     3b8:	deffe904 	addi	sp,sp,-92
     3bc:	df001615 	stw	fp,88(sp)
     3c0:	df001604 	addi	fp,sp,88
     3c4:	e13fed15 	stw	r4,-76(fp)
     3c8:	e17fec15 	stw	r5,-80(fp)
     3cc:	e1bfeb15 	stw	r6,-84(fp)
     3d0:	e1ffea15 	stw	r7,-88(fp)
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
     3d4:	e0bfea17 	ldw	r2,-88(fp)
     3d8:	e0bffc15 	stw	r2,-16(fp)
    const size_t m2=2*m;
     3dc:	e0bfea17 	ldw	r2,-88(fp)
     3e0:	1085883a 	add	r2,r2,r2
     3e4:	e0bffb15 	stw	r2,-20(fp)
    const size_t m3=3*m;
     3e8:	e0ffea17 	ldw	r3,-88(fp)
     3ec:	1805883a 	mov	r2,r3
     3f0:	1085883a 	add	r2,r2,r2
     3f4:	10c5883a 	add	r2,r2,r3
     3f8:	e0bffa15 	stw	r2,-24(fp)


    tw3 = tw2 = tw1 = st->twiddles;
     3fc:	e0bfeb17 	ldw	r2,-84(fp)
     400:	10804204 	addi	r2,r2,264
     404:	e0bfff15 	stw	r2,-4(fp)
     408:	e0bfff17 	ldw	r2,-4(fp)
     40c:	e0bffe15 	stw	r2,-8(fp)
     410:	e0bffe17 	ldw	r2,-8(fp)
     414:	e0bffd15 	stw	r2,-12(fp)

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
     418:	e0bfea17 	ldw	r2,-88(fp)
     41c:	100490fa 	slli	r2,r2,3
     420:	e0ffed17 	ldw	r3,-76(fp)
     424:	1885883a 	add	r2,r3,r2
     428:	10c00017 	ldw	r3,0(r2)
     42c:	e13fff17 	ldw	r4,-4(fp)
     430:	20800017 	ldw	r2,0(r4)
     434:	1887ff32 	custom	252,r3,r3,r2
     438:	e0bfea17 	ldw	r2,-88(fp)
     43c:	100490fa 	slli	r2,r2,3
     440:	e13fed17 	ldw	r4,-76(fp)
     444:	2085883a 	add	r2,r4,r2
     448:	11000117 	ldw	r4,4(r2)
     44c:	e17fff17 	ldw	r5,-4(fp)
     450:	28800117 	ldw	r2,4(r5)
     454:	2085ff32 	custom	252,r2,r4,r2
     458:	1885ffb2 	custom	254,r2,r3,r2
     45c:	e0bfee15 	stw	r2,-72(fp)
     460:	e0bfea17 	ldw	r2,-88(fp)
     464:	100490fa 	slli	r2,r2,3
     468:	e0ffed17 	ldw	r3,-76(fp)
     46c:	1885883a 	add	r2,r3,r2
     470:	10c00017 	ldw	r3,0(r2)
     474:	e13fff17 	ldw	r4,-4(fp)
     478:	20800117 	ldw	r2,4(r4)
     47c:	1887ff32 	custom	252,r3,r3,r2
     480:	e0bfea17 	ldw	r2,-88(fp)
     484:	100490fa 	slli	r2,r2,3
     488:	e13fed17 	ldw	r4,-76(fp)
     48c:	2085883a 	add	r2,r4,r2
     490:	11000117 	ldw	r4,4(r2)
     494:	e17fff17 	ldw	r5,-4(fp)
     498:	28800017 	ldw	r2,0(r5)
     49c:	2085ff32 	custom	252,r2,r4,r2
     4a0:	1885ff72 	custom	253,r2,r3,r2
     4a4:	e0bfef15 	stw	r2,-68(fp)
        C_MUL(scratch[1],Fout[m2] , *tw2 );
     4a8:	e0bffb17 	ldw	r2,-20(fp)
     4ac:	100490fa 	slli	r2,r2,3
     4b0:	e0ffed17 	ldw	r3,-76(fp)
     4b4:	1885883a 	add	r2,r3,r2
     4b8:	10c00017 	ldw	r3,0(r2)
     4bc:	e13ffe17 	ldw	r4,-8(fp)
     4c0:	20800017 	ldw	r2,0(r4)
     4c4:	1887ff32 	custom	252,r3,r3,r2
     4c8:	e0bffb17 	ldw	r2,-20(fp)
     4cc:	100490fa 	slli	r2,r2,3
     4d0:	e13fed17 	ldw	r4,-76(fp)
     4d4:	2085883a 	add	r2,r4,r2
     4d8:	11000117 	ldw	r4,4(r2)
     4dc:	e17ffe17 	ldw	r5,-8(fp)
     4e0:	28800117 	ldw	r2,4(r5)
     4e4:	2085ff32 	custom	252,r2,r4,r2
     4e8:	1885ffb2 	custom	254,r2,r3,r2
     4ec:	e0bff015 	stw	r2,-64(fp)
     4f0:	e0bffb17 	ldw	r2,-20(fp)
     4f4:	100490fa 	slli	r2,r2,3
     4f8:	e0ffed17 	ldw	r3,-76(fp)
     4fc:	1885883a 	add	r2,r3,r2
     500:	10c00017 	ldw	r3,0(r2)
     504:	e13ffe17 	ldw	r4,-8(fp)
     508:	20800117 	ldw	r2,4(r4)
     50c:	1887ff32 	custom	252,r3,r3,r2
     510:	e0bffb17 	ldw	r2,-20(fp)
     514:	100490fa 	slli	r2,r2,3
     518:	e13fed17 	ldw	r4,-76(fp)
     51c:	2085883a 	add	r2,r4,r2
     520:	11000117 	ldw	r4,4(r2)
     524:	e17ffe17 	ldw	r5,-8(fp)
     528:	28800017 	ldw	r2,0(r5)
     52c:	2085ff32 	custom	252,r2,r4,r2
     530:	1885ff72 	custom	253,r2,r3,r2
     534:	e0bff115 	stw	r2,-60(fp)
        C_MUL(scratch[2],Fout[m3] , *tw3 );
     538:	e0bffa17 	ldw	r2,-24(fp)
     53c:	100490fa 	slli	r2,r2,3
     540:	e0ffed17 	ldw	r3,-76(fp)
     544:	1885883a 	add	r2,r3,r2
     548:	10c00017 	ldw	r3,0(r2)
     54c:	e13ffd17 	ldw	r4,-12(fp)
     550:	20800017 	ldw	r2,0(r4)
     554:	1887ff32 	custom	252,r3,r3,r2
     558:	e0bffa17 	ldw	r2,-24(fp)
     55c:	100490fa 	slli	r2,r2,3
     560:	e13fed17 	ldw	r4,-76(fp)
     564:	2085883a 	add	r2,r4,r2
     568:	11000117 	ldw	r4,4(r2)
     56c:	e17ffd17 	ldw	r5,-12(fp)
     570:	28800117 	ldw	r2,4(r5)
     574:	2085ff32 	custom	252,r2,r4,r2
     578:	1885ffb2 	custom	254,r2,r3,r2
     57c:	e0bff215 	stw	r2,-56(fp)
     580:	e0bffa17 	ldw	r2,-24(fp)
     584:	100490fa 	slli	r2,r2,3
     588:	e0ffed17 	ldw	r3,-76(fp)
     58c:	1885883a 	add	r2,r3,r2
     590:	10c00017 	ldw	r3,0(r2)
     594:	e13ffd17 	ldw	r4,-12(fp)
     598:	20800117 	ldw	r2,4(r4)
     59c:	1887ff32 	custom	252,r3,r3,r2
     5a0:	e0bffa17 	ldw	r2,-24(fp)
     5a4:	100490fa 	slli	r2,r2,3
     5a8:	e13fed17 	ldw	r4,-76(fp)
     5ac:	2085883a 	add	r2,r4,r2
     5b0:	11000117 	ldw	r4,4(r2)
     5b4:	e17ffd17 	ldw	r5,-12(fp)
     5b8:	28800017 	ldw	r2,0(r5)
     5bc:	2085ff32 	custom	252,r2,r4,r2
     5c0:	1885ff72 	custom	253,r2,r3,r2
     5c4:	e0bff315 	stw	r2,-52(fp)

        C_SUB( scratch[5] , *Fout, scratch[1] );
     5c8:	e0bfed17 	ldw	r2,-76(fp)
     5cc:	10c00017 	ldw	r3,0(r2)
     5d0:	e0bff017 	ldw	r2,-64(fp)
     5d4:	1885ffb2 	custom	254,r2,r3,r2
     5d8:	e0bff815 	stw	r2,-32(fp)
     5dc:	e0bfed17 	ldw	r2,-76(fp)
     5e0:	10c00117 	ldw	r3,4(r2)
     5e4:	e0bff117 	ldw	r2,-60(fp)
     5e8:	1885ffb2 	custom	254,r2,r3,r2
     5ec:	e0bff915 	stw	r2,-28(fp)
        C_ADDTO(*Fout, scratch[1]);
     5f0:	e0bfed17 	ldw	r2,-76(fp)
     5f4:	10c00017 	ldw	r3,0(r2)
     5f8:	e0bff017 	ldw	r2,-64(fp)
     5fc:	1887ff72 	custom	253,r3,r3,r2
     600:	e0bfed17 	ldw	r2,-76(fp)
     604:	10c00015 	stw	r3,0(r2)
     608:	e0bfed17 	ldw	r2,-76(fp)
     60c:	10c00117 	ldw	r3,4(r2)
     610:	e0bff117 	ldw	r2,-60(fp)
     614:	1887ff72 	custom	253,r3,r3,r2
     618:	e0bfed17 	ldw	r2,-76(fp)
     61c:	10c00115 	stw	r3,4(r2)
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
     620:	e0ffee17 	ldw	r3,-72(fp)
     624:	e0bff217 	ldw	r2,-56(fp)
     628:	1885ff72 	custom	253,r2,r3,r2
     62c:	e0bff415 	stw	r2,-48(fp)
     630:	e0ffef17 	ldw	r3,-68(fp)
     634:	e0bff317 	ldw	r2,-52(fp)
     638:	1885ff72 	custom	253,r2,r3,r2
     63c:	e0bff515 	stw	r2,-44(fp)
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
     640:	e0ffee17 	ldw	r3,-72(fp)
     644:	e0bff217 	ldw	r2,-56(fp)
     648:	1885ffb2 	custom	254,r2,r3,r2
     64c:	e0bff615 	stw	r2,-40(fp)
     650:	e0ffef17 	ldw	r3,-68(fp)
     654:	e0bff317 	ldw	r2,-52(fp)
     658:	1885ffb2 	custom	254,r2,r3,r2
     65c:	e0bff715 	stw	r2,-36(fp)
        C_SUB( Fout[m2], *Fout, scratch[3] );
     660:	e0bfed17 	ldw	r2,-76(fp)
     664:	11000017 	ldw	r4,0(r2)
     668:	e0fff417 	ldw	r3,-48(fp)
     66c:	e0bffb17 	ldw	r2,-20(fp)
     670:	100490fa 	slli	r2,r2,3
     674:	e17fed17 	ldw	r5,-76(fp)
     678:	2885883a 	add	r2,r5,r2
     67c:	20c7ffb2 	custom	254,r3,r4,r3
     680:	10c00015 	stw	r3,0(r2)
     684:	e0bfed17 	ldw	r2,-76(fp)
     688:	11000117 	ldw	r4,4(r2)
     68c:	e0fff517 	ldw	r3,-44(fp)
     690:	e0bffb17 	ldw	r2,-20(fp)
     694:	100490fa 	slli	r2,r2,3
     698:	e17fed17 	ldw	r5,-76(fp)
     69c:	2885883a 	add	r2,r5,r2
     6a0:	20c7ffb2 	custom	254,r3,r4,r3
     6a4:	10c00115 	stw	r3,4(r2)
        tw1 += fstride;
     6a8:	e0bfec17 	ldw	r2,-80(fp)
     6ac:	100490fa 	slli	r2,r2,3
     6b0:	e0ffff17 	ldw	r3,-4(fp)
     6b4:	1885883a 	add	r2,r3,r2
     6b8:	e0bfff15 	stw	r2,-4(fp)
        tw2 += fstride*2;
     6bc:	e0bfec17 	ldw	r2,-80(fp)
     6c0:	1004913a 	slli	r2,r2,4
     6c4:	e0fffe17 	ldw	r3,-8(fp)
     6c8:	1885883a 	add	r2,r3,r2
     6cc:	e0bffe15 	stw	r2,-8(fp)
        tw3 += fstride*3;
     6d0:	e0ffec17 	ldw	r3,-80(fp)
     6d4:	1805883a 	mov	r2,r3
     6d8:	1085883a 	add	r2,r2,r2
     6dc:	10c5883a 	add	r2,r2,r3
     6e0:	100490fa 	slli	r2,r2,3
     6e4:	1007883a 	mov	r3,r2
     6e8:	e0bffd17 	ldw	r2,-12(fp)
     6ec:	10c5883a 	add	r2,r2,r3
     6f0:	e0bffd15 	stw	r2,-12(fp)
        C_ADDTO( *Fout , scratch[3] );
     6f4:	e0bfed17 	ldw	r2,-76(fp)
     6f8:	10c00017 	ldw	r3,0(r2)
     6fc:	e0bff417 	ldw	r2,-48(fp)
     700:	1887ff72 	custom	253,r3,r3,r2
     704:	e0bfed17 	ldw	r2,-76(fp)
     708:	10c00015 	stw	r3,0(r2)
     70c:	e0bfed17 	ldw	r2,-76(fp)
     710:	10c00117 	ldw	r3,4(r2)
     714:	e0bff517 	ldw	r2,-44(fp)
     718:	1887ff72 	custom	253,r3,r3,r2
     71c:	e0bfed17 	ldw	r2,-76(fp)
     720:	10c00115 	stw	r3,4(r2)

        if(st->inverse) {
     724:	e0bfeb17 	ldw	r2,-84(fp)
     728:	10800117 	ldw	r2,4(r2)
     72c:	10002126 	beq	r2,zero,7b4 <kf_bfly4+0x3fc>
            Fout[m].r = scratch[5].r - scratch[4].i;
     730:	e13ff817 	ldw	r4,-32(fp)
     734:	e0fff717 	ldw	r3,-36(fp)
     738:	e0bfea17 	ldw	r2,-88(fp)
     73c:	100490fa 	slli	r2,r2,3
     740:	e17fed17 	ldw	r5,-76(fp)
     744:	2885883a 	add	r2,r5,r2
     748:	20c7ffb2 	custom	254,r3,r4,r3
     74c:	10c00015 	stw	r3,0(r2)
            Fout[m].i = scratch[5].i + scratch[4].r;
     750:	e13ff917 	ldw	r4,-28(fp)
     754:	e0fff617 	ldw	r3,-40(fp)
     758:	e0bfea17 	ldw	r2,-88(fp)
     75c:	100490fa 	slli	r2,r2,3
     760:	e17fed17 	ldw	r5,-76(fp)
     764:	2885883a 	add	r2,r5,r2
     768:	20c7ff72 	custom	253,r3,r4,r3
     76c:	10c00115 	stw	r3,4(r2)
            Fout[m3].r = scratch[5].r + scratch[4].i;
     770:	e13ff817 	ldw	r4,-32(fp)
     774:	e0fff717 	ldw	r3,-36(fp)
     778:	e0bffa17 	ldw	r2,-24(fp)
     77c:	100490fa 	slli	r2,r2,3
     780:	e17fed17 	ldw	r5,-76(fp)
     784:	2885883a 	add	r2,r5,r2
     788:	20c7ff72 	custom	253,r3,r4,r3
     78c:	10c00015 	stw	r3,0(r2)
            Fout[m3].i = scratch[5].i - scratch[4].r;
     790:	e13ff917 	ldw	r4,-28(fp)
     794:	e0fff617 	ldw	r3,-40(fp)
     798:	e0bffa17 	ldw	r2,-24(fp)
     79c:	100490fa 	slli	r2,r2,3
     7a0:	e17fed17 	ldw	r5,-76(fp)
     7a4:	2885883a 	add	r2,r5,r2
     7a8:	20c7ffb2 	custom	254,r3,r4,r3
     7ac:	10c00115 	stw	r3,4(r2)
     7b0:	00002006 	br	834 <kf_bfly4+0x47c>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
     7b4:	e13ff817 	ldw	r4,-32(fp)
     7b8:	e0fff717 	ldw	r3,-36(fp)
     7bc:	e0bfea17 	ldw	r2,-88(fp)
     7c0:	100490fa 	slli	r2,r2,3
     7c4:	e17fed17 	ldw	r5,-76(fp)
     7c8:	2885883a 	add	r2,r5,r2
     7cc:	20c7ff72 	custom	253,r3,r4,r3
     7d0:	10c00015 	stw	r3,0(r2)
            Fout[m].i = scratch[5].i - scratch[4].r;
     7d4:	e13ff917 	ldw	r4,-28(fp)
     7d8:	e0fff617 	ldw	r3,-40(fp)
     7dc:	e0bfea17 	ldw	r2,-88(fp)
     7e0:	100490fa 	slli	r2,r2,3
     7e4:	e17fed17 	ldw	r5,-76(fp)
     7e8:	2885883a 	add	r2,r5,r2
     7ec:	20c7ffb2 	custom	254,r3,r4,r3
     7f0:	10c00115 	stw	r3,4(r2)
            Fout[m3].r = scratch[5].r - scratch[4].i;
     7f4:	e13ff817 	ldw	r4,-32(fp)
     7f8:	e0fff717 	ldw	r3,-36(fp)
     7fc:	e0bffa17 	ldw	r2,-24(fp)
     800:	100490fa 	slli	r2,r2,3
     804:	e17fed17 	ldw	r5,-76(fp)
     808:	2885883a 	add	r2,r5,r2
     80c:	20c7ffb2 	custom	254,r3,r4,r3
     810:	10c00015 	stw	r3,0(r2)
            Fout[m3].i = scratch[5].i + scratch[4].r;
     814:	e13ff917 	ldw	r4,-28(fp)
     818:	e0fff617 	ldw	r3,-40(fp)
     81c:	e0bffa17 	ldw	r2,-24(fp)
     820:	100490fa 	slli	r2,r2,3
     824:	e17fed17 	ldw	r5,-76(fp)
     828:	2885883a 	add	r2,r5,r2
     82c:	20c7ff72 	custom	253,r3,r4,r3
     830:	10c00115 	stw	r3,4(r2)
        }
        ++Fout;
     834:	e0bfed17 	ldw	r2,-76(fp)
     838:	10800204 	addi	r2,r2,8
     83c:	e0bfed15 	stw	r2,-76(fp)
    }while(--k);
     840:	e0bffc17 	ldw	r2,-16(fp)
     844:	10bfffc4 	addi	r2,r2,-1
     848:	e0bffc15 	stw	r2,-16(fp)
     84c:	e0bffc17 	ldw	r2,-16(fp)
     850:	103ef11e 	bne	r2,zero,418 <kf_bfly4+0x60>
}
     854:	0001883a 	nop
     858:	0001883a 	nop
     85c:	e037883a 	mov	sp,fp
     860:	df000017 	ldw	fp,0(sp)
     864:	dec00104 	addi	sp,sp,4
     868:	f800283a 	ret

0000086c <kf_bfly3>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
     86c:	deffea04 	addi	sp,sp,-88
     870:	dfc01515 	stw	ra,84(sp)
     874:	df001415 	stw	fp,80(sp)
     878:	df001404 	addi	fp,sp,80
     87c:	e13fef15 	stw	r4,-68(fp)
     880:	e17fee15 	stw	r5,-72(fp)
     884:	e1bfed15 	stw	r6,-76(fp)
     888:	e1ffec15 	stw	r7,-80(fp)
     size_t k=m;
     88c:	e0bfec17 	ldw	r2,-80(fp)
     890:	e0bfff15 	stw	r2,-4(fp)
     const size_t m2 = 2*m;
     894:	e0bfec17 	ldw	r2,-80(fp)
     898:	1085883a 	add	r2,r2,r2
     89c:	e0bffc15 	stw	r2,-16(fp)
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
     8a0:	e17fec17 	ldw	r5,-80(fp)
     8a4:	e13fee17 	ldw	r4,-72(fp)
     8a8:	00071240 	call	7124 <__mulsi3>
     8ac:	e0ffed17 	ldw	r3,-76(fp)
     8b0:	10800844 	addi	r2,r2,33
     8b4:	100490fa 	slli	r2,r2,3
     8b8:	1885883a 	add	r2,r3,r2
     8bc:	10c00017 	ldw	r3,0(r2)
     8c0:	e0fff015 	stw	r3,-64(fp)
     8c4:	10800117 	ldw	r2,4(r2)
     8c8:	e0bff115 	stw	r2,-60(fp)

     tw1=tw2=st->twiddles;
     8cc:	e0bfed17 	ldw	r2,-76(fp)
     8d0:	10804204 	addi	r2,r2,264
     8d4:	e0bffd15 	stw	r2,-12(fp)
     8d8:	e0bffd17 	ldw	r2,-12(fp)
     8dc:	e0bffe15 	stw	r2,-8(fp)

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
     8e0:	e0bfec17 	ldw	r2,-80(fp)
     8e4:	100490fa 	slli	r2,r2,3
     8e8:	e0ffef17 	ldw	r3,-68(fp)
     8ec:	1885883a 	add	r2,r3,r2
     8f0:	10c00017 	ldw	r3,0(r2)
     8f4:	e13ffe17 	ldw	r4,-8(fp)
     8f8:	20800017 	ldw	r2,0(r4)
     8fc:	1887ff32 	custom	252,r3,r3,r2
     900:	e0bfec17 	ldw	r2,-80(fp)
     904:	100490fa 	slli	r2,r2,3
     908:	e13fef17 	ldw	r4,-68(fp)
     90c:	2085883a 	add	r2,r4,r2
     910:	11000117 	ldw	r4,4(r2)
     914:	e17ffe17 	ldw	r5,-8(fp)
     918:	28800117 	ldw	r2,4(r5)
     91c:	2085ff32 	custom	252,r2,r4,r2
     920:	1885ffb2 	custom	254,r2,r3,r2
     924:	e0bff415 	stw	r2,-48(fp)
     928:	e0bfec17 	ldw	r2,-80(fp)
     92c:	100490fa 	slli	r2,r2,3
     930:	e0ffef17 	ldw	r3,-68(fp)
     934:	1885883a 	add	r2,r3,r2
     938:	10c00017 	ldw	r3,0(r2)
     93c:	e13ffe17 	ldw	r4,-8(fp)
     940:	20800117 	ldw	r2,4(r4)
     944:	1887ff32 	custom	252,r3,r3,r2
     948:	e0bfec17 	ldw	r2,-80(fp)
     94c:	100490fa 	slli	r2,r2,3
     950:	e13fef17 	ldw	r4,-68(fp)
     954:	2085883a 	add	r2,r4,r2
     958:	11000117 	ldw	r4,4(r2)
     95c:	e17ffe17 	ldw	r5,-8(fp)
     960:	28800017 	ldw	r2,0(r5)
     964:	2085ff32 	custom	252,r2,r4,r2
     968:	1885ff72 	custom	253,r2,r3,r2
     96c:	e0bff515 	stw	r2,-44(fp)
         C_MUL(scratch[2],Fout[m2] , *tw2);
     970:	e0bffc17 	ldw	r2,-16(fp)
     974:	100490fa 	slli	r2,r2,3
     978:	e0ffef17 	ldw	r3,-68(fp)
     97c:	1885883a 	add	r2,r3,r2
     980:	10c00017 	ldw	r3,0(r2)
     984:	e13ffd17 	ldw	r4,-12(fp)
     988:	20800017 	ldw	r2,0(r4)
     98c:	1887ff32 	custom	252,r3,r3,r2
     990:	e0bffc17 	ldw	r2,-16(fp)
     994:	100490fa 	slli	r2,r2,3
     998:	e13fef17 	ldw	r4,-68(fp)
     99c:	2085883a 	add	r2,r4,r2
     9a0:	11000117 	ldw	r4,4(r2)
     9a4:	e17ffd17 	ldw	r5,-12(fp)
     9a8:	28800117 	ldw	r2,4(r5)
     9ac:	2085ff32 	custom	252,r2,r4,r2
     9b0:	1885ffb2 	custom	254,r2,r3,r2
     9b4:	e0bff615 	stw	r2,-40(fp)
     9b8:	e0bffc17 	ldw	r2,-16(fp)
     9bc:	100490fa 	slli	r2,r2,3
     9c0:	e0ffef17 	ldw	r3,-68(fp)
     9c4:	1885883a 	add	r2,r3,r2
     9c8:	10c00017 	ldw	r3,0(r2)
     9cc:	e13ffd17 	ldw	r4,-12(fp)
     9d0:	20800117 	ldw	r2,4(r4)
     9d4:	1887ff32 	custom	252,r3,r3,r2
     9d8:	e0bffc17 	ldw	r2,-16(fp)
     9dc:	100490fa 	slli	r2,r2,3
     9e0:	e13fef17 	ldw	r4,-68(fp)
     9e4:	2085883a 	add	r2,r4,r2
     9e8:	11000117 	ldw	r4,4(r2)
     9ec:	e17ffd17 	ldw	r5,-12(fp)
     9f0:	28800017 	ldw	r2,0(r5)
     9f4:	2085ff32 	custom	252,r2,r4,r2
     9f8:	1885ff72 	custom	253,r2,r3,r2
     9fc:	e0bff715 	stw	r2,-36(fp)

         C_ADD(scratch[3],scratch[1],scratch[2]);
     a00:	e0fff417 	ldw	r3,-48(fp)
     a04:	e0bff617 	ldw	r2,-40(fp)
     a08:	1885ff72 	custom	253,r2,r3,r2
     a0c:	e0bff815 	stw	r2,-32(fp)
     a10:	e0fff517 	ldw	r3,-44(fp)
     a14:	e0bff717 	ldw	r2,-36(fp)
     a18:	1885ff72 	custom	253,r2,r3,r2
     a1c:	e0bff915 	stw	r2,-28(fp)
         C_SUB(scratch[0],scratch[1],scratch[2]);
     a20:	e0fff417 	ldw	r3,-48(fp)
     a24:	e0bff617 	ldw	r2,-40(fp)
     a28:	1885ffb2 	custom	254,r2,r3,r2
     a2c:	e0bff215 	stw	r2,-56(fp)
     a30:	e0fff517 	ldw	r3,-44(fp)
     a34:	e0bff717 	ldw	r2,-36(fp)
     a38:	1885ffb2 	custom	254,r2,r3,r2
     a3c:	e0bff315 	stw	r2,-52(fp)
         tw1 += fstride;
     a40:	e0bfee17 	ldw	r2,-72(fp)
     a44:	100490fa 	slli	r2,r2,3
     a48:	e0fffe17 	ldw	r3,-8(fp)
     a4c:	1885883a 	add	r2,r3,r2
     a50:	e0bffe15 	stw	r2,-8(fp)
         tw2 += fstride*2;
     a54:	e0bfee17 	ldw	r2,-72(fp)
     a58:	1004913a 	slli	r2,r2,4
     a5c:	e0fffd17 	ldw	r3,-12(fp)
     a60:	1885883a 	add	r2,r3,r2
     a64:	e0bffd15 	stw	r2,-12(fp)

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
     a68:	e0bfef17 	ldw	r2,-68(fp)
     a6c:	11000017 	ldw	r4,0(r2)
     a70:	e0fff817 	ldw	r3,-32(fp)
     a74:	008fc034 	movhi	r2,16128
     a78:	1887ff32 	custom	252,r3,r3,r2
     a7c:	e0bfec17 	ldw	r2,-80(fp)
     a80:	100490fa 	slli	r2,r2,3
     a84:	e17fef17 	ldw	r5,-68(fp)
     a88:	2885883a 	add	r2,r5,r2
     a8c:	20c7ffb2 	custom	254,r3,r4,r3
     a90:	10c00015 	stw	r3,0(r2)
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
     a94:	e0bfef17 	ldw	r2,-68(fp)
     a98:	11000117 	ldw	r4,4(r2)
     a9c:	e0fff917 	ldw	r3,-28(fp)
     aa0:	008fc034 	movhi	r2,16128
     aa4:	1887ff32 	custom	252,r3,r3,r2
     aa8:	e0bfec17 	ldw	r2,-80(fp)
     aac:	100490fa 	slli	r2,r2,3
     ab0:	e17fef17 	ldw	r5,-68(fp)
     ab4:	2885883a 	add	r2,r5,r2
     ab8:	20c7ffb2 	custom	254,r3,r4,r3
     abc:	10c00115 	stw	r3,4(r2)

         C_MULBYSCALAR( scratch[0] , epi3.i );
     ac0:	e0fff217 	ldw	r3,-56(fp)
     ac4:	e0bff117 	ldw	r2,-60(fp)
     ac8:	1885ff32 	custom	252,r2,r3,r2
     acc:	e0bff215 	stw	r2,-56(fp)
     ad0:	e0fff317 	ldw	r3,-52(fp)
     ad4:	e0bff117 	ldw	r2,-60(fp)
     ad8:	1885ff32 	custom	252,r2,r3,r2
     adc:	e0bff315 	stw	r2,-52(fp)

         C_ADDTO(*Fout,scratch[3]);
     ae0:	e0bfef17 	ldw	r2,-68(fp)
     ae4:	10c00017 	ldw	r3,0(r2)
     ae8:	e0bff817 	ldw	r2,-32(fp)
     aec:	1887ff72 	custom	253,r3,r3,r2
     af0:	e0bfef17 	ldw	r2,-68(fp)
     af4:	10c00015 	stw	r3,0(r2)
     af8:	e0bfef17 	ldw	r2,-68(fp)
     afc:	10c00117 	ldw	r3,4(r2)
     b00:	e0bff917 	ldw	r2,-28(fp)
     b04:	1887ff72 	custom	253,r3,r3,r2
     b08:	e0bfef17 	ldw	r2,-68(fp)
     b0c:	10c00115 	stw	r3,4(r2)

         Fout[m2].r = Fout[m].r + scratch[0].i;
     b10:	e0bfec17 	ldw	r2,-80(fp)
     b14:	100490fa 	slli	r2,r2,3
     b18:	e0ffef17 	ldw	r3,-68(fp)
     b1c:	1885883a 	add	r2,r3,r2
     b20:	11000017 	ldw	r4,0(r2)
     b24:	e0fff317 	ldw	r3,-52(fp)
     b28:	e0bffc17 	ldw	r2,-16(fp)
     b2c:	100490fa 	slli	r2,r2,3
     b30:	e17fef17 	ldw	r5,-68(fp)
     b34:	2885883a 	add	r2,r5,r2
     b38:	20c7ff72 	custom	253,r3,r4,r3
     b3c:	10c00015 	stw	r3,0(r2)
         Fout[m2].i = Fout[m].i - scratch[0].r;
     b40:	e0bfec17 	ldw	r2,-80(fp)
     b44:	100490fa 	slli	r2,r2,3
     b48:	e0ffef17 	ldw	r3,-68(fp)
     b4c:	1885883a 	add	r2,r3,r2
     b50:	11000117 	ldw	r4,4(r2)
     b54:	e0fff217 	ldw	r3,-56(fp)
     b58:	e0bffc17 	ldw	r2,-16(fp)
     b5c:	100490fa 	slli	r2,r2,3
     b60:	e17fef17 	ldw	r5,-68(fp)
     b64:	2885883a 	add	r2,r5,r2
     b68:	20c7ffb2 	custom	254,r3,r4,r3
     b6c:	10c00115 	stw	r3,4(r2)

         Fout[m].r -= scratch[0].i;
     b70:	e0bfec17 	ldw	r2,-80(fp)
     b74:	100490fa 	slli	r2,r2,3
     b78:	e0ffef17 	ldw	r3,-68(fp)
     b7c:	1885883a 	add	r2,r3,r2
     b80:	11000017 	ldw	r4,0(r2)
     b84:	e0fff317 	ldw	r3,-52(fp)
     b88:	e0bfec17 	ldw	r2,-80(fp)
     b8c:	100490fa 	slli	r2,r2,3
     b90:	e17fef17 	ldw	r5,-68(fp)
     b94:	2885883a 	add	r2,r5,r2
     b98:	20c7ffb2 	custom	254,r3,r4,r3
     b9c:	10c00015 	stw	r3,0(r2)
         Fout[m].i += scratch[0].r;
     ba0:	e0bfec17 	ldw	r2,-80(fp)
     ba4:	100490fa 	slli	r2,r2,3
     ba8:	e0ffef17 	ldw	r3,-68(fp)
     bac:	1885883a 	add	r2,r3,r2
     bb0:	11000117 	ldw	r4,4(r2)
     bb4:	e0fff217 	ldw	r3,-56(fp)
     bb8:	e0bfec17 	ldw	r2,-80(fp)
     bbc:	100490fa 	slli	r2,r2,3
     bc0:	e17fef17 	ldw	r5,-68(fp)
     bc4:	2885883a 	add	r2,r5,r2
     bc8:	20c7ff72 	custom	253,r3,r4,r3
     bcc:	10c00115 	stw	r3,4(r2)

         ++Fout;
     bd0:	e0bfef17 	ldw	r2,-68(fp)
     bd4:	10800204 	addi	r2,r2,8
     bd8:	e0bfef15 	stw	r2,-68(fp)
     }while(--k);
     bdc:	e0bfff17 	ldw	r2,-4(fp)
     be0:	10bfffc4 	addi	r2,r2,-1
     be4:	e0bfff15 	stw	r2,-4(fp)
     be8:	e0bfff17 	ldw	r2,-4(fp)
     bec:	103f3c1e 	bne	r2,zero,8e0 <kf_bfly3+0x74>
}
     bf0:	0001883a 	nop
     bf4:	0001883a 	nop
     bf8:	e037883a 	mov	sp,fp
     bfc:	dfc00117 	ldw	ra,4(sp)
     c00:	df000017 	ldw	fp,0(sp)
     c04:	dec00204 	addi	sp,sp,8
     c08:	f800283a 	ret

00000c0c <kf_bfly5>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
     c0c:	deffd204 	addi	sp,sp,-184
     c10:	dfc02d15 	stw	ra,180(sp)
     c14:	df002c15 	stw	fp,176(sp)
     c18:	dc402b15 	stw	r17,172(sp)
     c1c:	dc002a15 	stw	r16,168(sp)
     c20:	df002c04 	addi	fp,sp,176
     c24:	e13fd715 	stw	r4,-164(fp)
     c28:	e17fd615 	stw	r5,-168(fp)
     c2c:	e1bfd515 	stw	r6,-172(fp)
     c30:	e1ffd415 	stw	r7,-176(fp)
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
     c34:	e0bfd517 	ldw	r2,-172(fp)
     c38:	10804204 	addi	r2,r2,264
     c3c:	e0bff715 	stw	r2,-36(fp)
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
     c40:	e0bfd417 	ldw	r2,-176(fp)
     c44:	e17fd617 	ldw	r5,-168(fp)
     c48:	1009883a 	mov	r4,r2
     c4c:	00071240 	call	7124 <__mulsi3>
     c50:	100490fa 	slli	r2,r2,3
     c54:	e0fff717 	ldw	r3,-36(fp)
     c58:	1885883a 	add	r2,r3,r2
     c5c:	10c00017 	ldw	r3,0(r2)
     c60:	e0ffda15 	stw	r3,-152(fp)
     c64:	10800117 	ldw	r2,4(r2)
     c68:	e0bfdb15 	stw	r2,-148(fp)
    yb = twiddles[fstride*2*m];
     c6c:	e0bfd417 	ldw	r2,-176(fp)
     c70:	e17fd617 	ldw	r5,-168(fp)
     c74:	1009883a 	mov	r4,r2
     c78:	00071240 	call	7124 <__mulsi3>
     c7c:	1004913a 	slli	r2,r2,4
     c80:	e0fff717 	ldw	r3,-36(fp)
     c84:	1885883a 	add	r2,r3,r2
     c88:	10c00017 	ldw	r3,0(r2)
     c8c:	e0ffd815 	stw	r3,-160(fp)
     c90:	10800117 	ldw	r2,4(r2)
     c94:	e0bfd915 	stw	r2,-156(fp)

    Fout0=Fout;
     c98:	e0bfd717 	ldw	r2,-164(fp)
     c9c:	e0bffd15 	stw	r2,-12(fp)
    Fout1=Fout0+m;
     ca0:	e0bfd417 	ldw	r2,-176(fp)
     ca4:	100490fa 	slli	r2,r2,3
     ca8:	e0fffd17 	ldw	r3,-12(fp)
     cac:	1885883a 	add	r2,r3,r2
     cb0:	e0bffc15 	stw	r2,-16(fp)
    Fout2=Fout0+2*m;
     cb4:	e0bfd417 	ldw	r2,-176(fp)
     cb8:	1004913a 	slli	r2,r2,4
     cbc:	e0fffd17 	ldw	r3,-12(fp)
     cc0:	1885883a 	add	r2,r3,r2
     cc4:	e0bffb15 	stw	r2,-20(fp)
    Fout3=Fout0+3*m;
     cc8:	e0ffd417 	ldw	r3,-176(fp)
     ccc:	1805883a 	mov	r2,r3
     cd0:	1085883a 	add	r2,r2,r2
     cd4:	10c5883a 	add	r2,r2,r3
     cd8:	100490fa 	slli	r2,r2,3
     cdc:	1007883a 	mov	r3,r2
     ce0:	e0bffd17 	ldw	r2,-12(fp)
     ce4:	10c5883a 	add	r2,r2,r3
     ce8:	e0bffa15 	stw	r2,-24(fp)
    Fout4=Fout0+4*m;
     cec:	e0bfd417 	ldw	r2,-176(fp)
     cf0:	1004917a 	slli	r2,r2,5
     cf4:	e0fffd17 	ldw	r3,-12(fp)
     cf8:	1885883a 	add	r2,r3,r2
     cfc:	e0bff915 	stw	r2,-28(fp)

    tw=st->twiddles;
     d00:	e0bfd517 	ldw	r2,-172(fp)
     d04:	10804204 	addi	r2,r2,264
     d08:	e0bff615 	stw	r2,-40(fp)
    for ( u=0; u<m; ++u ) {
     d0c:	e03ff815 	stw	zero,-32(fp)
     d10:	00018c06 	br	1344 <kf_bfly5+0x738>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
     d14:	e0bffd17 	ldw	r2,-12(fp)
     d18:	10c00017 	ldw	r3,0(r2)
     d1c:	e0ffdc15 	stw	r3,-144(fp)
     d20:	10800117 	ldw	r2,4(r2)
     d24:	e0bfdd15 	stw	r2,-140(fp)

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
     d28:	e0bffc17 	ldw	r2,-16(fp)
     d2c:	14000017 	ldw	r16,0(r2)
     d30:	e0bff817 	ldw	r2,-32(fp)
     d34:	e17fd617 	ldw	r5,-168(fp)
     d38:	1009883a 	mov	r4,r2
     d3c:	00071240 	call	7124 <__mulsi3>
     d40:	100490fa 	slli	r2,r2,3
     d44:	e0fff617 	ldw	r3,-40(fp)
     d48:	1887883a 	add	r3,r3,r2
     d4c:	18800017 	ldw	r2,0(r3)
     d50:	80a1ff32 	custom	252,r16,r16,r2
     d54:	e0bffc17 	ldw	r2,-16(fp)
     d58:	14400117 	ldw	r17,4(r2)
     d5c:	e0bff817 	ldw	r2,-32(fp)
     d60:	e17fd617 	ldw	r5,-168(fp)
     d64:	1009883a 	mov	r4,r2
     d68:	00071240 	call	7124 <__mulsi3>
     d6c:	100490fa 	slli	r2,r2,3
     d70:	e0fff617 	ldw	r3,-40(fp)
     d74:	1887883a 	add	r3,r3,r2
     d78:	18800117 	ldw	r2,4(r3)
     d7c:	8885ff32 	custom	252,r2,r17,r2
     d80:	8085ffb2 	custom	254,r2,r16,r2
     d84:	e0bfde15 	stw	r2,-136(fp)
     d88:	e0bffc17 	ldw	r2,-16(fp)
     d8c:	14000017 	ldw	r16,0(r2)
     d90:	e0bff817 	ldw	r2,-32(fp)
     d94:	e17fd617 	ldw	r5,-168(fp)
     d98:	1009883a 	mov	r4,r2
     d9c:	00071240 	call	7124 <__mulsi3>
     da0:	100490fa 	slli	r2,r2,3
     da4:	e0fff617 	ldw	r3,-40(fp)
     da8:	1887883a 	add	r3,r3,r2
     dac:	18800117 	ldw	r2,4(r3)
     db0:	80a1ff32 	custom	252,r16,r16,r2
     db4:	e0bffc17 	ldw	r2,-16(fp)
     db8:	14400117 	ldw	r17,4(r2)
     dbc:	e0bff817 	ldw	r2,-32(fp)
     dc0:	e17fd617 	ldw	r5,-168(fp)
     dc4:	1009883a 	mov	r4,r2
     dc8:	00071240 	call	7124 <__mulsi3>
     dcc:	100490fa 	slli	r2,r2,3
     dd0:	e0fff617 	ldw	r3,-40(fp)
     dd4:	1887883a 	add	r3,r3,r2
     dd8:	18800017 	ldw	r2,0(r3)
     ddc:	8885ff32 	custom	252,r2,r17,r2
     de0:	8085ff72 	custom	253,r2,r16,r2
     de4:	e0bfdf15 	stw	r2,-132(fp)
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
     de8:	e0bffb17 	ldw	r2,-20(fp)
     dec:	14000017 	ldw	r16,0(r2)
     df0:	e0bff817 	ldw	r2,-32(fp)
     df4:	e17fd617 	ldw	r5,-168(fp)
     df8:	1009883a 	mov	r4,r2
     dfc:	00071240 	call	7124 <__mulsi3>
     e00:	1004913a 	slli	r2,r2,4
     e04:	e0fff617 	ldw	r3,-40(fp)
     e08:	1887883a 	add	r3,r3,r2
     e0c:	18800017 	ldw	r2,0(r3)
     e10:	80a1ff32 	custom	252,r16,r16,r2
     e14:	e0bffb17 	ldw	r2,-20(fp)
     e18:	14400117 	ldw	r17,4(r2)
     e1c:	e0bff817 	ldw	r2,-32(fp)
     e20:	e17fd617 	ldw	r5,-168(fp)
     e24:	1009883a 	mov	r4,r2
     e28:	00071240 	call	7124 <__mulsi3>
     e2c:	1004913a 	slli	r2,r2,4
     e30:	e0fff617 	ldw	r3,-40(fp)
     e34:	1887883a 	add	r3,r3,r2
     e38:	18800117 	ldw	r2,4(r3)
     e3c:	8885ff32 	custom	252,r2,r17,r2
     e40:	8085ffb2 	custom	254,r2,r16,r2
     e44:	e0bfe015 	stw	r2,-128(fp)
     e48:	e0bffb17 	ldw	r2,-20(fp)
     e4c:	14000017 	ldw	r16,0(r2)
     e50:	e0bff817 	ldw	r2,-32(fp)
     e54:	e17fd617 	ldw	r5,-168(fp)
     e58:	1009883a 	mov	r4,r2
     e5c:	00071240 	call	7124 <__mulsi3>
     e60:	1004913a 	slli	r2,r2,4
     e64:	e0fff617 	ldw	r3,-40(fp)
     e68:	1887883a 	add	r3,r3,r2
     e6c:	18800117 	ldw	r2,4(r3)
     e70:	80a1ff32 	custom	252,r16,r16,r2
     e74:	e0bffb17 	ldw	r2,-20(fp)
     e78:	14400117 	ldw	r17,4(r2)
     e7c:	e0bff817 	ldw	r2,-32(fp)
     e80:	e17fd617 	ldw	r5,-168(fp)
     e84:	1009883a 	mov	r4,r2
     e88:	00071240 	call	7124 <__mulsi3>
     e8c:	1004913a 	slli	r2,r2,4
     e90:	e0fff617 	ldw	r3,-40(fp)
     e94:	1887883a 	add	r3,r3,r2
     e98:	18800017 	ldw	r2,0(r3)
     e9c:	8885ff32 	custom	252,r2,r17,r2
     ea0:	8085ff72 	custom	253,r2,r16,r2
     ea4:	e0bfe115 	stw	r2,-124(fp)
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
     ea8:	e0bffa17 	ldw	r2,-24(fp)
     eac:	14000017 	ldw	r16,0(r2)
     eb0:	e0bff817 	ldw	r2,-32(fp)
     eb4:	e17fd617 	ldw	r5,-168(fp)
     eb8:	1009883a 	mov	r4,r2
     ebc:	00071240 	call	7124 <__mulsi3>
     ec0:	1007883a 	mov	r3,r2
     ec4:	1805883a 	mov	r2,r3
     ec8:	1085883a 	add	r2,r2,r2
     ecc:	10c5883a 	add	r2,r2,r3
     ed0:	100490fa 	slli	r2,r2,3
     ed4:	1007883a 	mov	r3,r2
     ed8:	e0bff617 	ldw	r2,-40(fp)
     edc:	10c7883a 	add	r3,r2,r3
     ee0:	18800017 	ldw	r2,0(r3)
     ee4:	80a1ff32 	custom	252,r16,r16,r2
     ee8:	e0bffa17 	ldw	r2,-24(fp)
     eec:	14400117 	ldw	r17,4(r2)
     ef0:	e0bff817 	ldw	r2,-32(fp)
     ef4:	e17fd617 	ldw	r5,-168(fp)
     ef8:	1009883a 	mov	r4,r2
     efc:	00071240 	call	7124 <__mulsi3>
     f00:	1007883a 	mov	r3,r2
     f04:	1805883a 	mov	r2,r3
     f08:	1085883a 	add	r2,r2,r2
     f0c:	10c5883a 	add	r2,r2,r3
     f10:	100490fa 	slli	r2,r2,3
     f14:	1007883a 	mov	r3,r2
     f18:	e0bff617 	ldw	r2,-40(fp)
     f1c:	10c7883a 	add	r3,r2,r3
     f20:	18800117 	ldw	r2,4(r3)
     f24:	8885ff32 	custom	252,r2,r17,r2
     f28:	8085ffb2 	custom	254,r2,r16,r2
     f2c:	e0bfe215 	stw	r2,-120(fp)
     f30:	e0bffa17 	ldw	r2,-24(fp)
     f34:	14000017 	ldw	r16,0(r2)
     f38:	e0bff817 	ldw	r2,-32(fp)
     f3c:	e17fd617 	ldw	r5,-168(fp)
     f40:	1009883a 	mov	r4,r2
     f44:	00071240 	call	7124 <__mulsi3>
     f48:	1007883a 	mov	r3,r2
     f4c:	1805883a 	mov	r2,r3
     f50:	1085883a 	add	r2,r2,r2
     f54:	10c5883a 	add	r2,r2,r3
     f58:	100490fa 	slli	r2,r2,3
     f5c:	1007883a 	mov	r3,r2
     f60:	e0bff617 	ldw	r2,-40(fp)
     f64:	10c7883a 	add	r3,r2,r3
     f68:	18800117 	ldw	r2,4(r3)
     f6c:	80a1ff32 	custom	252,r16,r16,r2
     f70:	e0bffa17 	ldw	r2,-24(fp)
     f74:	14400117 	ldw	r17,4(r2)
     f78:	e0bff817 	ldw	r2,-32(fp)
     f7c:	e17fd617 	ldw	r5,-168(fp)
     f80:	1009883a 	mov	r4,r2
     f84:	00071240 	call	7124 <__mulsi3>
     f88:	1007883a 	mov	r3,r2
     f8c:	1805883a 	mov	r2,r3
     f90:	1085883a 	add	r2,r2,r2
     f94:	10c5883a 	add	r2,r2,r3
     f98:	100490fa 	slli	r2,r2,3
     f9c:	1007883a 	mov	r3,r2
     fa0:	e0bff617 	ldw	r2,-40(fp)
     fa4:	10c7883a 	add	r3,r2,r3
     fa8:	18800017 	ldw	r2,0(r3)
     fac:	8885ff32 	custom	252,r2,r17,r2
     fb0:	8085ff72 	custom	253,r2,r16,r2
     fb4:	e0bfe315 	stw	r2,-116(fp)
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
     fb8:	e0bff917 	ldw	r2,-28(fp)
     fbc:	14000017 	ldw	r16,0(r2)
     fc0:	e0bff817 	ldw	r2,-32(fp)
     fc4:	e17fd617 	ldw	r5,-168(fp)
     fc8:	1009883a 	mov	r4,r2
     fcc:	00071240 	call	7124 <__mulsi3>
     fd0:	1004917a 	slli	r2,r2,5
     fd4:	e0fff617 	ldw	r3,-40(fp)
     fd8:	1887883a 	add	r3,r3,r2
     fdc:	18800017 	ldw	r2,0(r3)
     fe0:	80a1ff32 	custom	252,r16,r16,r2
     fe4:	e0bff917 	ldw	r2,-28(fp)
     fe8:	14400117 	ldw	r17,4(r2)
     fec:	e0bff817 	ldw	r2,-32(fp)
     ff0:	e17fd617 	ldw	r5,-168(fp)
     ff4:	1009883a 	mov	r4,r2
     ff8:	00071240 	call	7124 <__mulsi3>
     ffc:	1004917a 	slli	r2,r2,5
    1000:	e0fff617 	ldw	r3,-40(fp)
    1004:	1887883a 	add	r3,r3,r2
    1008:	18800117 	ldw	r2,4(r3)
    100c:	8885ff32 	custom	252,r2,r17,r2
    1010:	8085ffb2 	custom	254,r2,r16,r2
    1014:	e0bfe415 	stw	r2,-112(fp)
    1018:	e0bff917 	ldw	r2,-28(fp)
    101c:	14000017 	ldw	r16,0(r2)
    1020:	e0bff817 	ldw	r2,-32(fp)
    1024:	e17fd617 	ldw	r5,-168(fp)
    1028:	1009883a 	mov	r4,r2
    102c:	00071240 	call	7124 <__mulsi3>
    1030:	1004917a 	slli	r2,r2,5
    1034:	e0fff617 	ldw	r3,-40(fp)
    1038:	1887883a 	add	r3,r3,r2
    103c:	18800117 	ldw	r2,4(r3)
    1040:	80a1ff32 	custom	252,r16,r16,r2
    1044:	e0bff917 	ldw	r2,-28(fp)
    1048:	14400117 	ldw	r17,4(r2)
    104c:	e0bff817 	ldw	r2,-32(fp)
    1050:	e17fd617 	ldw	r5,-168(fp)
    1054:	1009883a 	mov	r4,r2
    1058:	00071240 	call	7124 <__mulsi3>
    105c:	1004917a 	slli	r2,r2,5
    1060:	e0fff617 	ldw	r3,-40(fp)
    1064:	1887883a 	add	r3,r3,r2
    1068:	18800017 	ldw	r2,0(r3)
    106c:	8885ff32 	custom	252,r2,r17,r2
    1070:	8085ff72 	custom	253,r2,r16,r2
    1074:	e0bfe515 	stw	r2,-108(fp)

        C_ADD( scratch[7],scratch[1],scratch[4]);
    1078:	e0ffde17 	ldw	r3,-136(fp)
    107c:	e0bfe417 	ldw	r2,-112(fp)
    1080:	1885ff72 	custom	253,r2,r3,r2
    1084:	e0bfea15 	stw	r2,-88(fp)
    1088:	e0ffdf17 	ldw	r3,-132(fp)
    108c:	e0bfe517 	ldw	r2,-108(fp)
    1090:	1885ff72 	custom	253,r2,r3,r2
    1094:	e0bfeb15 	stw	r2,-84(fp)
        C_SUB( scratch[10],scratch[1],scratch[4]);
    1098:	e0ffde17 	ldw	r3,-136(fp)
    109c:	e0bfe417 	ldw	r2,-112(fp)
    10a0:	1885ffb2 	custom	254,r2,r3,r2
    10a4:	e0bff015 	stw	r2,-64(fp)
    10a8:	e0ffdf17 	ldw	r3,-132(fp)
    10ac:	e0bfe517 	ldw	r2,-108(fp)
    10b0:	1885ffb2 	custom	254,r2,r3,r2
    10b4:	e0bff115 	stw	r2,-60(fp)
        C_ADD( scratch[8],scratch[2],scratch[3]);
    10b8:	e0ffe017 	ldw	r3,-128(fp)
    10bc:	e0bfe217 	ldw	r2,-120(fp)
    10c0:	1885ff72 	custom	253,r2,r3,r2
    10c4:	e0bfec15 	stw	r2,-80(fp)
    10c8:	e0ffe117 	ldw	r3,-124(fp)
    10cc:	e0bfe317 	ldw	r2,-116(fp)
    10d0:	1885ff72 	custom	253,r2,r3,r2
    10d4:	e0bfed15 	stw	r2,-76(fp)
        C_SUB( scratch[9],scratch[2],scratch[3]);
    10d8:	e0ffe017 	ldw	r3,-128(fp)
    10dc:	e0bfe217 	ldw	r2,-120(fp)
    10e0:	1885ffb2 	custom	254,r2,r3,r2
    10e4:	e0bfee15 	stw	r2,-72(fp)
    10e8:	e0ffe117 	ldw	r3,-124(fp)
    10ec:	e0bfe317 	ldw	r2,-116(fp)
    10f0:	1885ffb2 	custom	254,r2,r3,r2
    10f4:	e0bfef15 	stw	r2,-68(fp)

        Fout0->r += scratch[7].r + scratch[8].r;
    10f8:	e0bffd17 	ldw	r2,-12(fp)
    10fc:	10c00017 	ldw	r3,0(r2)
    1100:	e13fea17 	ldw	r4,-88(fp)
    1104:	e0bfec17 	ldw	r2,-80(fp)
    1108:	2085ff72 	custom	253,r2,r4,r2
    110c:	1887ff72 	custom	253,r3,r3,r2
    1110:	e0bffd17 	ldw	r2,-12(fp)
    1114:	10c00015 	stw	r3,0(r2)
        Fout0->i += scratch[7].i + scratch[8].i;
    1118:	e0bffd17 	ldw	r2,-12(fp)
    111c:	10c00117 	ldw	r3,4(r2)
    1120:	e13feb17 	ldw	r4,-84(fp)
    1124:	e0bfed17 	ldw	r2,-76(fp)
    1128:	2085ff72 	custom	253,r2,r4,r2
    112c:	1887ff72 	custom	253,r3,r3,r2
    1130:	e0bffd17 	ldw	r2,-12(fp)
    1134:	10c00115 	stw	r3,4(r2)

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
    1138:	e0ffdc17 	ldw	r3,-144(fp)
    113c:	e13fea17 	ldw	r4,-88(fp)
    1140:	e0bfda17 	ldw	r2,-152(fp)
    1144:	2085ff32 	custom	252,r2,r4,r2
    1148:	1887ff72 	custom	253,r3,r3,r2
    114c:	e13fec17 	ldw	r4,-80(fp)
    1150:	e0bfd817 	ldw	r2,-160(fp)
    1154:	2085ff32 	custom	252,r2,r4,r2
    1158:	1885ff72 	custom	253,r2,r3,r2
    115c:	e0bfe615 	stw	r2,-104(fp)
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
    1160:	e0ffdd17 	ldw	r3,-140(fp)
    1164:	e13feb17 	ldw	r4,-84(fp)
    1168:	e0bfda17 	ldw	r2,-152(fp)
    116c:	2085ff32 	custom	252,r2,r4,r2
    1170:	1887ff72 	custom	253,r3,r3,r2
    1174:	e13fed17 	ldw	r4,-76(fp)
    1178:	e0bfd817 	ldw	r2,-160(fp)
    117c:	2085ff32 	custom	252,r2,r4,r2
    1180:	1885ff72 	custom	253,r2,r3,r2
    1184:	e0bfe715 	stw	r2,-100(fp)

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
    1188:	e0fff117 	ldw	r3,-60(fp)
    118c:	e0bfdb17 	ldw	r2,-148(fp)
    1190:	1887ff32 	custom	252,r3,r3,r2
    1194:	e13fef17 	ldw	r4,-68(fp)
    1198:	e0bfd917 	ldw	r2,-156(fp)
    119c:	2085ff32 	custom	252,r2,r4,r2
    11a0:	1885ff72 	custom	253,r2,r3,r2
    11a4:	e0bfe815 	stw	r2,-96(fp)
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
    11a8:	e0fff017 	ldw	r3,-64(fp)
    11ac:	e0bfdb17 	ldw	r2,-148(fp)
    11b0:	1885ff32 	custom	252,r2,r3,r2
    11b4:	10e0003c 	xorhi	r3,r2,32768
    11b8:	e13fee17 	ldw	r4,-72(fp)
    11bc:	e0bfd917 	ldw	r2,-156(fp)
    11c0:	2085ff32 	custom	252,r2,r4,r2
    11c4:	1885ffb2 	custom	254,r2,r3,r2
    11c8:	e0bfe915 	stw	r2,-92(fp)

        C_SUB(*Fout1,scratch[5],scratch[6]);
    11cc:	e0ffe617 	ldw	r3,-104(fp)
    11d0:	e0bfe817 	ldw	r2,-96(fp)
    11d4:	1887ffb2 	custom	254,r3,r3,r2
    11d8:	e0bffc17 	ldw	r2,-16(fp)
    11dc:	10c00015 	stw	r3,0(r2)
    11e0:	e0ffe717 	ldw	r3,-100(fp)
    11e4:	e0bfe917 	ldw	r2,-92(fp)
    11e8:	1887ffb2 	custom	254,r3,r3,r2
    11ec:	e0bffc17 	ldw	r2,-16(fp)
    11f0:	10c00115 	stw	r3,4(r2)
        C_ADD(*Fout4,scratch[5],scratch[6]);
    11f4:	e0ffe617 	ldw	r3,-104(fp)
    11f8:	e0bfe817 	ldw	r2,-96(fp)
    11fc:	1887ff72 	custom	253,r3,r3,r2
    1200:	e0bff917 	ldw	r2,-28(fp)
    1204:	10c00015 	stw	r3,0(r2)
    1208:	e0ffe717 	ldw	r3,-100(fp)
    120c:	e0bfe917 	ldw	r2,-92(fp)
    1210:	1887ff72 	custom	253,r3,r3,r2
    1214:	e0bff917 	ldw	r2,-28(fp)
    1218:	10c00115 	stw	r3,4(r2)

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
    121c:	e0ffdc17 	ldw	r3,-144(fp)
    1220:	e13fea17 	ldw	r4,-88(fp)
    1224:	e0bfd817 	ldw	r2,-160(fp)
    1228:	2085ff32 	custom	252,r2,r4,r2
    122c:	1887ff72 	custom	253,r3,r3,r2
    1230:	e13fec17 	ldw	r4,-80(fp)
    1234:	e0bfda17 	ldw	r2,-152(fp)
    1238:	2085ff32 	custom	252,r2,r4,r2
    123c:	1885ff72 	custom	253,r2,r3,r2
    1240:	e0bff215 	stw	r2,-56(fp)
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
    1244:	e0ffdd17 	ldw	r3,-140(fp)
    1248:	e13feb17 	ldw	r4,-84(fp)
    124c:	e0bfd817 	ldw	r2,-160(fp)
    1250:	2085ff32 	custom	252,r2,r4,r2
    1254:	1887ff72 	custom	253,r3,r3,r2
    1258:	e13fed17 	ldw	r4,-76(fp)
    125c:	e0bfda17 	ldw	r2,-152(fp)
    1260:	2085ff32 	custom	252,r2,r4,r2
    1264:	1885ff72 	custom	253,r2,r3,r2
    1268:	e0bff315 	stw	r2,-52(fp)
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
    126c:	e0ffef17 	ldw	r3,-68(fp)
    1270:	e0bfdb17 	ldw	r2,-148(fp)
    1274:	1887ff32 	custom	252,r3,r3,r2
    1278:	e13ff117 	ldw	r4,-60(fp)
    127c:	e0bfd917 	ldw	r2,-156(fp)
    1280:	2085ff32 	custom	252,r2,r4,r2
    1284:	1885ffb2 	custom	254,r2,r3,r2
    1288:	e0bff415 	stw	r2,-48(fp)
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
    128c:	e0fff017 	ldw	r3,-64(fp)
    1290:	e0bfd917 	ldw	r2,-156(fp)
    1294:	1887ff32 	custom	252,r3,r3,r2
    1298:	e13fee17 	ldw	r4,-72(fp)
    129c:	e0bfdb17 	ldw	r2,-148(fp)
    12a0:	2085ff32 	custom	252,r2,r4,r2
    12a4:	1885ffb2 	custom	254,r2,r3,r2
    12a8:	e0bff515 	stw	r2,-44(fp)

        C_ADD(*Fout2,scratch[11],scratch[12]);
    12ac:	e0fff217 	ldw	r3,-56(fp)
    12b0:	e0bff417 	ldw	r2,-48(fp)
    12b4:	1887ff72 	custom	253,r3,r3,r2
    12b8:	e0bffb17 	ldw	r2,-20(fp)
    12bc:	10c00015 	stw	r3,0(r2)
    12c0:	e0fff317 	ldw	r3,-52(fp)
    12c4:	e0bff517 	ldw	r2,-44(fp)
    12c8:	1887ff72 	custom	253,r3,r3,r2
    12cc:	e0bffb17 	ldw	r2,-20(fp)
    12d0:	10c00115 	stw	r3,4(r2)
        C_SUB(*Fout3,scratch[11],scratch[12]);
    12d4:	e0fff217 	ldw	r3,-56(fp)
    12d8:	e0bff417 	ldw	r2,-48(fp)
    12dc:	1887ffb2 	custom	254,r3,r3,r2
    12e0:	e0bffa17 	ldw	r2,-24(fp)
    12e4:	10c00015 	stw	r3,0(r2)
    12e8:	e0fff317 	ldw	r3,-52(fp)
    12ec:	e0bff517 	ldw	r2,-44(fp)
    12f0:	1887ffb2 	custom	254,r3,r3,r2
    12f4:	e0bffa17 	ldw	r2,-24(fp)
    12f8:	10c00115 	stw	r3,4(r2)

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
    12fc:	e0bffd17 	ldw	r2,-12(fp)
    1300:	10800204 	addi	r2,r2,8
    1304:	e0bffd15 	stw	r2,-12(fp)
    1308:	e0bffc17 	ldw	r2,-16(fp)
    130c:	10800204 	addi	r2,r2,8
    1310:	e0bffc15 	stw	r2,-16(fp)
    1314:	e0bffb17 	ldw	r2,-20(fp)
    1318:	10800204 	addi	r2,r2,8
    131c:	e0bffb15 	stw	r2,-20(fp)
    1320:	e0bffa17 	ldw	r2,-24(fp)
    1324:	10800204 	addi	r2,r2,8
    1328:	e0bffa15 	stw	r2,-24(fp)
    132c:	e0bff917 	ldw	r2,-28(fp)
    1330:	10800204 	addi	r2,r2,8
    1334:	e0bff915 	stw	r2,-28(fp)
    for ( u=0; u<m; ++u ) {
    1338:	e0bff817 	ldw	r2,-32(fp)
    133c:	10800044 	addi	r2,r2,1
    1340:	e0bff815 	stw	r2,-32(fp)
    1344:	e0fff817 	ldw	r3,-32(fp)
    1348:	e0bfd417 	ldw	r2,-176(fp)
    134c:	18be7116 	blt	r3,r2,d14 <kf_bfly5+0x108>
    }
}
    1350:	0001883a 	nop
    1354:	0001883a 	nop
    1358:	e6fffe04 	addi	sp,fp,-8
    135c:	dfc00317 	ldw	ra,12(sp)
    1360:	df000217 	ldw	fp,8(sp)
    1364:	dc400117 	ldw	r17,4(sp)
    1368:	dc000017 	ldw	r16,0(sp)
    136c:	dec00404 	addi	sp,sp,16
    1370:	f800283a 	ret

00001374 <kf_bfly_generic>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
    1374:	defff004 	addi	sp,sp,-64
    1378:	dfc00f15 	stw	ra,60(sp)
    137c:	df000e15 	stw	fp,56(sp)
    1380:	df000e04 	addi	fp,sp,56
    1384:	e13ff515 	stw	r4,-44(fp)
    1388:	e17ff415 	stw	r5,-48(fp)
    138c:	e1bff315 	stw	r6,-52(fp)
    1390:	e1fff215 	stw	r7,-56(fp)
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
    1394:	e0bff317 	ldw	r2,-52(fp)
    1398:	10804204 	addi	r2,r2,264
    139c:	e0bffa15 	stw	r2,-24(fp)
    kiss_fft_cpx t;
    int Norig = st->nfft;
    13a0:	e0bff317 	ldw	r2,-52(fp)
    13a4:	10800017 	ldw	r2,0(r2)
    13a8:	e0bff915 	stw	r2,-28(fp)

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
    13ac:	e0800217 	ldw	r2,8(fp)
    13b0:	100490fa 	slli	r2,r2,3
    13b4:	1009883a 	mov	r4,r2
    13b8:	0009e880 	call	9e88 <malloc>
    13bc:	e0bff815 	stw	r2,-32(fp)

    for ( u=0; u<m; ++u ) {
    13c0:	e03fff15 	stw	zero,-4(fp)
    13c4:	00009506 	br	161c <kf_bfly_generic+0x2a8>
        k=u;
    13c8:	e0bfff17 	ldw	r2,-4(fp)
    13cc:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    13d0:	e03ffd15 	stw	zero,-12(fp)
    13d4:	00001306 	br	1424 <kf_bfly_generic+0xb0>
            scratch[q1] = Fout[ k  ];
    13d8:	e0bffe17 	ldw	r2,-8(fp)
    13dc:	100490fa 	slli	r2,r2,3
    13e0:	e0fff517 	ldw	r3,-44(fp)
    13e4:	1887883a 	add	r3,r3,r2
    13e8:	e0bffd17 	ldw	r2,-12(fp)
    13ec:	100490fa 	slli	r2,r2,3
    13f0:	e13ff817 	ldw	r4,-32(fp)
    13f4:	2085883a 	add	r2,r4,r2
    13f8:	19000017 	ldw	r4,0(r3)
    13fc:	11000015 	stw	r4,0(r2)
    1400:	18c00117 	ldw	r3,4(r3)
    1404:	10c00115 	stw	r3,4(r2)
            C_FIXDIV(scratch[q1],p);
            k += m;
    1408:	e0fffe17 	ldw	r3,-8(fp)
    140c:	e0bff217 	ldw	r2,-56(fp)
    1410:	1885883a 	add	r2,r3,r2
    1414:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    1418:	e0bffd17 	ldw	r2,-12(fp)
    141c:	10800044 	addi	r2,r2,1
    1420:	e0bffd15 	stw	r2,-12(fp)
    1424:	e0fffd17 	ldw	r3,-12(fp)
    1428:	e0800217 	ldw	r2,8(fp)
    142c:	18bfea16 	blt	r3,r2,13d8 <kf_bfly_generic+0x64>
        }

        k=u;
    1430:	e0bfff17 	ldw	r2,-4(fp)
    1434:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    1438:	e03ffd15 	stw	zero,-12(fp)
    143c:	00007106 	br	1604 <kf_bfly_generic+0x290>
            int twidx=0;
    1440:	e03ffb15 	stw	zero,-20(fp)
            Fout[ k ] = scratch[0];
    1444:	e0bffe17 	ldw	r2,-8(fp)
    1448:	100490fa 	slli	r2,r2,3
    144c:	e0fff517 	ldw	r3,-44(fp)
    1450:	1885883a 	add	r2,r3,r2
    1454:	e0fff817 	ldw	r3,-32(fp)
    1458:	19000017 	ldw	r4,0(r3)
    145c:	11000015 	stw	r4,0(r2)
    1460:	18c00117 	ldw	r3,4(r3)
    1464:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
    1468:	00800044 	movi	r2,1
    146c:	e0bffc15 	stw	r2,-16(fp)
    1470:	00005a06 	br	15dc <kf_bfly_generic+0x268>
                twidx += fstride * k;
    1474:	e0bffe17 	ldw	r2,-8(fp)
    1478:	e17ff417 	ldw	r5,-48(fp)
    147c:	1009883a 	mov	r4,r2
    1480:	00071240 	call	7124 <__mulsi3>
    1484:	1007883a 	mov	r3,r2
    1488:	e0bffb17 	ldw	r2,-20(fp)
    148c:	1885883a 	add	r2,r3,r2
    1490:	e0bffb15 	stw	r2,-20(fp)
                if (twidx>=Norig) twidx-=Norig;
    1494:	e0fffb17 	ldw	r3,-20(fp)
    1498:	e0bff917 	ldw	r2,-28(fp)
    149c:	18800416 	blt	r3,r2,14b0 <kf_bfly_generic+0x13c>
    14a0:	e0fffb17 	ldw	r3,-20(fp)
    14a4:	e0bff917 	ldw	r2,-28(fp)
    14a8:	1885c83a 	sub	r2,r3,r2
    14ac:	e0bffb15 	stw	r2,-20(fp)
                C_MUL(t,scratch[q] , twiddles[twidx] );
    14b0:	e0bffc17 	ldw	r2,-16(fp)
    14b4:	100490fa 	slli	r2,r2,3
    14b8:	e0fff817 	ldw	r3,-32(fp)
    14bc:	1885883a 	add	r2,r3,r2
    14c0:	10c00017 	ldw	r3,0(r2)
    14c4:	e0bffb17 	ldw	r2,-20(fp)
    14c8:	100490fa 	slli	r2,r2,3
    14cc:	e13ffa17 	ldw	r4,-24(fp)
    14d0:	2089883a 	add	r4,r4,r2
    14d4:	20800017 	ldw	r2,0(r4)
    14d8:	1887ff32 	custom	252,r3,r3,r2
    14dc:	e0bffc17 	ldw	r2,-16(fp)
    14e0:	100490fa 	slli	r2,r2,3
    14e4:	e13ff817 	ldw	r4,-32(fp)
    14e8:	2085883a 	add	r2,r4,r2
    14ec:	11000117 	ldw	r4,4(r2)
    14f0:	e0bffb17 	ldw	r2,-20(fp)
    14f4:	100490fa 	slli	r2,r2,3
    14f8:	e17ffa17 	ldw	r5,-24(fp)
    14fc:	288b883a 	add	r5,r5,r2
    1500:	28800117 	ldw	r2,4(r5)
    1504:	2085ff32 	custom	252,r2,r4,r2
    1508:	1885ffb2 	custom	254,r2,r3,r2
    150c:	e0bff615 	stw	r2,-40(fp)
    1510:	e0bffc17 	ldw	r2,-16(fp)
    1514:	100490fa 	slli	r2,r2,3
    1518:	e0fff817 	ldw	r3,-32(fp)
    151c:	1885883a 	add	r2,r3,r2
    1520:	10c00017 	ldw	r3,0(r2)
    1524:	e0bffb17 	ldw	r2,-20(fp)
    1528:	100490fa 	slli	r2,r2,3
    152c:	e13ffa17 	ldw	r4,-24(fp)
    1530:	2089883a 	add	r4,r4,r2
    1534:	20800117 	ldw	r2,4(r4)
    1538:	1887ff32 	custom	252,r3,r3,r2
    153c:	e0bffc17 	ldw	r2,-16(fp)
    1540:	100490fa 	slli	r2,r2,3
    1544:	e13ff817 	ldw	r4,-32(fp)
    1548:	2085883a 	add	r2,r4,r2
    154c:	11000117 	ldw	r4,4(r2)
    1550:	e0bffb17 	ldw	r2,-20(fp)
    1554:	100490fa 	slli	r2,r2,3
    1558:	e17ffa17 	ldw	r5,-24(fp)
    155c:	288b883a 	add	r5,r5,r2
    1560:	28800017 	ldw	r2,0(r5)
    1564:	2085ff32 	custom	252,r2,r4,r2
    1568:	1885ff72 	custom	253,r2,r3,r2
    156c:	e0bff715 	stw	r2,-36(fp)
                C_ADDTO( Fout[ k ] ,t);
    1570:	e0bffe17 	ldw	r2,-8(fp)
    1574:	100490fa 	slli	r2,r2,3
    1578:	e0fff517 	ldw	r3,-44(fp)
    157c:	1885883a 	add	r2,r3,r2
    1580:	11000017 	ldw	r4,0(r2)
    1584:	e0fff617 	ldw	r3,-40(fp)
    1588:	e0bffe17 	ldw	r2,-8(fp)
    158c:	100490fa 	slli	r2,r2,3
    1590:	e17ff517 	ldw	r5,-44(fp)
    1594:	2885883a 	add	r2,r5,r2
    1598:	20c7ff72 	custom	253,r3,r4,r3
    159c:	10c00015 	stw	r3,0(r2)
    15a0:	e0bffe17 	ldw	r2,-8(fp)
    15a4:	100490fa 	slli	r2,r2,3
    15a8:	e0fff517 	ldw	r3,-44(fp)
    15ac:	1885883a 	add	r2,r3,r2
    15b0:	11000117 	ldw	r4,4(r2)
    15b4:	e0fff717 	ldw	r3,-36(fp)
    15b8:	e0bffe17 	ldw	r2,-8(fp)
    15bc:	100490fa 	slli	r2,r2,3
    15c0:	e17ff517 	ldw	r5,-44(fp)
    15c4:	2885883a 	add	r2,r5,r2
    15c8:	20c7ff72 	custom	253,r3,r4,r3
    15cc:	10c00115 	stw	r3,4(r2)
            for (q=1;q<p;++q ) {
    15d0:	e0bffc17 	ldw	r2,-16(fp)
    15d4:	10800044 	addi	r2,r2,1
    15d8:	e0bffc15 	stw	r2,-16(fp)
    15dc:	e0fffc17 	ldw	r3,-16(fp)
    15e0:	e0800217 	ldw	r2,8(fp)
    15e4:	18bfa316 	blt	r3,r2,1474 <kf_bfly_generic+0x100>
            }
            k += m;
    15e8:	e0fffe17 	ldw	r3,-8(fp)
    15ec:	e0bff217 	ldw	r2,-56(fp)
    15f0:	1885883a 	add	r2,r3,r2
    15f4:	e0bffe15 	stw	r2,-8(fp)
        for ( q1=0 ; q1<p ; ++q1 ) {
    15f8:	e0bffd17 	ldw	r2,-12(fp)
    15fc:	10800044 	addi	r2,r2,1
    1600:	e0bffd15 	stw	r2,-12(fp)
    1604:	e0fffd17 	ldw	r3,-12(fp)
    1608:	e0800217 	ldw	r2,8(fp)
    160c:	18bf8c16 	blt	r3,r2,1440 <kf_bfly_generic+0xcc>
    for ( u=0; u<m; ++u ) {
    1610:	e0bfff17 	ldw	r2,-4(fp)
    1614:	10800044 	addi	r2,r2,1
    1618:	e0bfff15 	stw	r2,-4(fp)
    161c:	e0ffff17 	ldw	r3,-4(fp)
    1620:	e0bff217 	ldw	r2,-56(fp)
    1624:	18bf6816 	blt	r3,r2,13c8 <kf_bfly_generic+0x54>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
    1628:	e13ff817 	ldw	r4,-32(fp)
    162c:	0009e980 	call	9e98 <free>
}
    1630:	0001883a 	nop
    1634:	e037883a 	mov	sp,fp
    1638:	dfc00117 	ldw	ra,4(sp)
    163c:	df000017 	ldw	fp,0(sp)
    1640:	dec00204 	addi	sp,sp,8
    1644:	f800283a 	ret

00001648 <kf_work>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
    1648:	defff404 	addi	sp,sp,-48
    164c:	dfc00b15 	stw	ra,44(sp)
    1650:	df000a15 	stw	fp,40(sp)
    1654:	df000a04 	addi	fp,sp,40
    1658:	e13ffb15 	stw	r4,-20(fp)
    165c:	e17ffa15 	stw	r5,-24(fp)
    1660:	e1bff915 	stw	r6,-28(fp)
    1664:	e1fff815 	stw	r7,-32(fp)
    kiss_fft_cpx * Fout_beg=Fout;
    1668:	e0bffb17 	ldw	r2,-20(fp)
    166c:	e0bfff15 	stw	r2,-4(fp)
    const int p=*factors++; /* the radix  */
    1670:	e0800217 	ldw	r2,8(fp)
    1674:	10c00104 	addi	r3,r2,4
    1678:	e0c00215 	stw	r3,8(fp)
    167c:	10800017 	ldw	r2,0(r2)
    1680:	e0bffe15 	stw	r2,-8(fp)
    const int m=*factors++; /* stage's fft length/p */
    1684:	e0800217 	ldw	r2,8(fp)
    1688:	10c00104 	addi	r3,r2,4
    168c:	e0c00215 	stw	r3,8(fp)
    1690:	10800017 	ldw	r2,0(r2)
    1694:	e0bffd15 	stw	r2,-12(fp)
    const kiss_fft_cpx * Fout_end = Fout + p*m;
    1698:	e17ffd17 	ldw	r5,-12(fp)
    169c:	e13ffe17 	ldw	r4,-8(fp)
    16a0:	00071240 	call	7124 <__mulsi3>
    16a4:	100490fa 	slli	r2,r2,3
    16a8:	e0fffb17 	ldw	r3,-20(fp)
    16ac:	1885883a 	add	r2,r3,r2
    16b0:	e0bffc15 	stw	r2,-16(fp)
        }
        return;
    }
#endif

    if (m==1) {
    16b4:	e0bffd17 	ldw	r2,-12(fp)
    16b8:	10800058 	cmpnei	r2,r2,1
    16bc:	1000151e 	bne	r2,zero,1714 <kf_work+0xcc>
        do{
            *Fout = *f;
    16c0:	e0bffb17 	ldw	r2,-20(fp)
    16c4:	e0fffa17 	ldw	r3,-24(fp)
    16c8:	19000017 	ldw	r4,0(r3)
    16cc:	11000015 	stw	r4,0(r2)
    16d0:	18c00117 	ldw	r3,4(r3)
    16d4:	10c00115 	stw	r3,4(r2)
            f += fstride*in_stride;
    16d8:	e0bff817 	ldw	r2,-32(fp)
    16dc:	e17ff917 	ldw	r5,-28(fp)
    16e0:	1009883a 	mov	r4,r2
    16e4:	00071240 	call	7124 <__mulsi3>
    16e8:	100490fa 	slli	r2,r2,3
    16ec:	e0fffa17 	ldw	r3,-24(fp)
    16f0:	1885883a 	add	r2,r3,r2
    16f4:	e0bffa15 	stw	r2,-24(fp)
        }while(++Fout != Fout_end );
    16f8:	e0bffb17 	ldw	r2,-20(fp)
    16fc:	10800204 	addi	r2,r2,8
    1700:	e0bffb15 	stw	r2,-20(fp)
    1704:	e0fffb17 	ldw	r3,-20(fp)
    1708:	e0bffc17 	ldw	r2,-16(fp)
    170c:	18bfec1e 	bne	r3,r2,16c0 <kf_work+0x78>
    1710:	00001e06 	br	178c <kf_work+0x144>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m, 
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
    1714:	e0bffe17 	ldw	r2,-8(fp)
    1718:	e17ff917 	ldw	r5,-28(fp)
    171c:	1009883a 	mov	r4,r2
    1720:	00071240 	call	7124 <__mulsi3>
    1724:	1007883a 	mov	r3,r2
    1728:	e0800317 	ldw	r2,12(fp)
    172c:	d8800115 	stw	r2,4(sp)
    1730:	e0800217 	ldw	r2,8(fp)
    1734:	d8800015 	stw	r2,0(sp)
    1738:	e1fff817 	ldw	r7,-32(fp)
    173c:	180d883a 	mov	r6,r3
    1740:	e17ffa17 	ldw	r5,-24(fp)
    1744:	e13ffb17 	ldw	r4,-20(fp)
    1748:	00016480 	call	1648 <kf_work>
            f += fstride*in_stride;
    174c:	e0bff817 	ldw	r2,-32(fp)
    1750:	e17ff917 	ldw	r5,-28(fp)
    1754:	1009883a 	mov	r4,r2
    1758:	00071240 	call	7124 <__mulsi3>
    175c:	100490fa 	slli	r2,r2,3
    1760:	e0fffa17 	ldw	r3,-24(fp)
    1764:	1885883a 	add	r2,r3,r2
    1768:	e0bffa15 	stw	r2,-24(fp)
        }while( (Fout += m) != Fout_end );
    176c:	e0bffd17 	ldw	r2,-12(fp)
    1770:	100490fa 	slli	r2,r2,3
    1774:	e0fffb17 	ldw	r3,-20(fp)
    1778:	1885883a 	add	r2,r3,r2
    177c:	e0bffb15 	stw	r2,-20(fp)
    1780:	e0fffb17 	ldw	r3,-20(fp)
    1784:	e0bffc17 	ldw	r2,-16(fp)
    1788:	18bfe21e 	bne	r3,r2,1714 <kf_work+0xcc>
    }

    Fout=Fout_beg;
    178c:	e0bfff17 	ldw	r2,-4(fp)
    1790:	e0bffb15 	stw	r2,-20(fp)

    // recombine the p smaller DFTs 
    switch (p) {
    1794:	e0bffe17 	ldw	r2,-8(fp)
    1798:	10800160 	cmpeqi	r2,r2,5
    179c:	1000241e 	bne	r2,zero,1830 <kf_work+0x1e8>
    17a0:	e0bffe17 	ldw	r2,-8(fp)
    17a4:	10800188 	cmpgei	r2,r2,6
    17a8:	1000271e 	bne	r2,zero,1848 <kf_work+0x200>
    17ac:	e0bffe17 	ldw	r2,-8(fp)
    17b0:	10800120 	cmpeqi	r2,r2,4
    17b4:	1000171e 	bne	r2,zero,1814 <kf_work+0x1cc>
    17b8:	e0bffe17 	ldw	r2,-8(fp)
    17bc:	10800148 	cmpgei	r2,r2,5
    17c0:	1000211e 	bne	r2,zero,1848 <kf_work+0x200>
    17c4:	e0bffe17 	ldw	r2,-8(fp)
    17c8:	108000a0 	cmpeqi	r2,r2,2
    17cc:	1000041e 	bne	r2,zero,17e0 <kf_work+0x198>
    17d0:	e0bffe17 	ldw	r2,-8(fp)
    17d4:	108000e0 	cmpeqi	r2,r2,3
    17d8:	1000071e 	bne	r2,zero,17f8 <kf_work+0x1b0>
    17dc:	00001a06 	br	1848 <kf_work+0x200>
        case 2: kf_bfly2(Fout,fstride,st,m); break;
    17e0:	e1fffd17 	ldw	r7,-12(fp)
    17e4:	e1800317 	ldw	r6,12(fp)
    17e8:	e17ff917 	ldw	r5,-28(fp)
    17ec:	e13ffb17 	ldw	r4,-20(fp)
    17f0:	00002640 	call	264 <kf_bfly2>
    17f4:	00001c06 	br	1868 <kf_work+0x220>
        case 3: kf_bfly3(Fout,fstride,st,m); break; 
    17f8:	e0bffd17 	ldw	r2,-12(fp)
    17fc:	100f883a 	mov	r7,r2
    1800:	e1800317 	ldw	r6,12(fp)
    1804:	e17ff917 	ldw	r5,-28(fp)
    1808:	e13ffb17 	ldw	r4,-20(fp)
    180c:	000086c0 	call	86c <kf_bfly3>
    1810:	00001506 	br	1868 <kf_work+0x220>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
    1814:	e0bffd17 	ldw	r2,-12(fp)
    1818:	100f883a 	mov	r7,r2
    181c:	e1800317 	ldw	r6,12(fp)
    1820:	e17ff917 	ldw	r5,-28(fp)
    1824:	e13ffb17 	ldw	r4,-20(fp)
    1828:	00003b80 	call	3b8 <kf_bfly4>
    182c:	00000e06 	br	1868 <kf_work+0x220>
        case 5: kf_bfly5(Fout,fstride,st,m); break; 
    1830:	e1fffd17 	ldw	r7,-12(fp)
    1834:	e1800317 	ldw	r6,12(fp)
    1838:	e17ff917 	ldw	r5,-28(fp)
    183c:	e13ffb17 	ldw	r4,-20(fp)
    1840:	0000c0c0 	call	c0c <kf_bfly5>
    1844:	00000806 	br	1868 <kf_work+0x220>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    1848:	e0bffe17 	ldw	r2,-8(fp)
    184c:	d8800015 	stw	r2,0(sp)
    1850:	e1fffd17 	ldw	r7,-12(fp)
    1854:	e1800317 	ldw	r6,12(fp)
    1858:	e17ff917 	ldw	r5,-28(fp)
    185c:	e13ffb17 	ldw	r4,-20(fp)
    1860:	00013740 	call	1374 <kf_bfly_generic>
    1864:	0001883a 	nop
    }
}
    1868:	0001883a 	nop
    186c:	e037883a 	mov	sp,fp
    1870:	dfc00117 	ldw	ra,4(sp)
    1874:	df000017 	ldw	fp,0(sp)
    1878:	dec00204 	addi	sp,sp,8
    187c:	f800283a 	ret

00001880 <kf_factor>:
    where 
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static 
void kf_factor(int n,int * facbuf)
{
    1880:	defff904 	addi	sp,sp,-28
    1884:	dfc00615 	stw	ra,24(sp)
    1888:	df000515 	stw	fp,20(sp)
    188c:	df000504 	addi	fp,sp,20
    1890:	e13ffc15 	stw	r4,-16(fp)
    1894:	e17ffb15 	stw	r5,-20(fp)
    int p=4;
    1898:	00800104 	movi	r2,4
    189c:	e0bfff15 	stw	r2,-4(fp)
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
    18a0:	e13ffc17 	ldw	r4,-16(fp)
    18a4:	0009a740 	call	9a74 <__floatsidf>
    18a8:	100d883a 	mov	r6,r2
    18ac:	180f883a 	mov	r7,r3
    18b0:	3009883a 	mov	r4,r6
    18b4:	380b883a 	mov	r5,r7
    18b8:	00034900 	call	3490 <sqrt>
    18bc:	100d883a 	mov	r6,r2
    18c0:	180f883a 	mov	r7,r3
    18c4:	3009883a 	mov	r4,r6
    18c8:	380b883a 	mov	r5,r7
    18cc:	0002e680 	call	2e68 <floor>
    18d0:	e0bffd15 	stw	r2,-12(fp)
    18d4:	e0fffe15 	stw	r3,-8(fp)

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
    18d8:	00001d06 	br	1950 <kf_factor+0xd0>
            switch (p) {
    18dc:	e0bfff17 	ldw	r2,-4(fp)
    18e0:	108000a0 	cmpeqi	r2,r2,2
    18e4:	1000061e 	bne	r2,zero,1900 <kf_factor+0x80>
    18e8:	e0bfff17 	ldw	r2,-4(fp)
    18ec:	10800118 	cmpnei	r2,r2,4
    18f0:	1000061e 	bne	r2,zero,190c <kf_factor+0x8c>
                case 4: p = 2; break;
    18f4:	00800084 	movi	r2,2
    18f8:	e0bfff15 	stw	r2,-4(fp)
    18fc:	00000706 	br	191c <kf_factor+0x9c>
                case 2: p = 3; break;
    1900:	008000c4 	movi	r2,3
    1904:	e0bfff15 	stw	r2,-4(fp)
    1908:	00000406 	br	191c <kf_factor+0x9c>
                default: p += 2; break;
    190c:	e0bfff17 	ldw	r2,-4(fp)
    1910:	10800084 	addi	r2,r2,2
    1914:	e0bfff15 	stw	r2,-4(fp)
    1918:	0001883a 	nop
            }
            if (p > floor_sqrt)
    191c:	e13fff17 	ldw	r4,-4(fp)
    1920:	0009a740 	call	9a74 <__floatsidf>
    1924:	1009883a 	mov	r4,r2
    1928:	180b883a 	mov	r5,r3
    192c:	200d883a 	mov	r6,r4
    1930:	280f883a 	mov	r7,r5
    1934:	e13ffd17 	ldw	r4,-12(fp)
    1938:	e17ffe17 	ldw	r5,-8(fp)
    193c:	00088000 	call	8800 <__ledf2>
    1940:	10000116 	blt	r2,zero,1948 <kf_factor+0xc8>
    1944:	00000206 	br	1950 <kf_factor+0xd0>
                p = n;          /* no more factors, skip to end */
    1948:	e0bffc17 	ldw	r2,-16(fp)
    194c:	e0bfff15 	stw	r2,-4(fp)
        while (n % p) {
    1950:	e0bffc17 	ldw	r2,-16(fp)
    1954:	e17fff17 	ldw	r5,-4(fp)
    1958:	1009883a 	mov	r4,r2
    195c:	0006ff00 	call	6ff0 <__modsi3>
    1960:	103fde1e 	bne	r2,zero,18dc <kf_factor+0x5c>
        }
        n /= p;
    1964:	e17fff17 	ldw	r5,-4(fp)
    1968:	e13ffc17 	ldw	r4,-16(fp)
    196c:	0006f700 	call	6f70 <__divsi3>
    1970:	e0bffc15 	stw	r2,-16(fp)
        *facbuf++ = p;
    1974:	e0bffb17 	ldw	r2,-20(fp)
    1978:	10c00104 	addi	r3,r2,4
    197c:	e0fffb15 	stw	r3,-20(fp)
    1980:	e0ffff17 	ldw	r3,-4(fp)
    1984:	10c00015 	stw	r3,0(r2)
        *facbuf++ = n;
    1988:	e0bffb17 	ldw	r2,-20(fp)
    198c:	10c00104 	addi	r3,r2,4
    1990:	e0fffb15 	stw	r3,-20(fp)
    1994:	e0fffc17 	ldw	r3,-16(fp)
    1998:	10c00015 	stw	r3,0(r2)
    } while (n > 1);
    199c:	e0bffc17 	ldw	r2,-16(fp)
    19a0:	10800088 	cmpgei	r2,r2,2
    19a4:	103fea1e 	bne	r2,zero,1950 <kf_factor+0xd0>
}
    19a8:	0001883a 	nop
    19ac:	0001883a 	nop
    19b0:	e037883a 	mov	sp,fp
    19b4:	dfc00117 	ldw	ra,4(sp)
    19b8:	df000017 	ldw	fp,0(sp)
    19bc:	dec00204 	addi	sp,sp,8
    19c0:	f800283a 	ret

000019c4 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem )
{
    19c4:	deffef04 	addi	sp,sp,-68
    19c8:	dfc01015 	stw	ra,64(sp)
    19cc:	df000f15 	stw	fp,60(sp)
    19d0:	dcc00e15 	stw	r19,56(sp)
    19d4:	dc800d15 	stw	r18,52(sp)
    19d8:	dc400c15 	stw	r17,48(sp)
    19dc:	dc000b15 	stw	r16,44(sp)
    19e0:	df000f04 	addi	fp,sp,60
    19e4:	e13ff415 	stw	r4,-48(fp)
    19e8:	e17ff315 	stw	r5,-52(fp)
    19ec:	e1bff215 	stw	r6,-56(fp)
    19f0:	e1fff115 	stw	r7,-60(fp)
    kiss_fft_cfg st=NULL;
    19f4:	e03ffb15 	stw	zero,-20(fp)
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
    19f8:	e0bff417 	ldw	r2,-48(fp)
    19fc:	10800844 	addi	r2,r2,33
    size_t memneeded = sizeof(struct kiss_fft_state)
    1a00:	100490fa 	slli	r2,r2,3
    1a04:	e0bff715 	stw	r2,-36(fp)

    if ( lenmem==NULL ) {
    1a08:	e0bff117 	ldw	r2,-60(fp)
    1a0c:	1000041e 	bne	r2,zero,1a20 <kiss_fft_alloc+0x5c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
    1a10:	e13ff717 	ldw	r4,-36(fp)
    1a14:	0009e880 	call	9e88 <malloc>
    1a18:	e0bffb15 	stw	r2,-20(fp)
    1a1c:	00000b06 	br	1a4c <kiss_fft_alloc+0x88>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
    1a20:	e0bff217 	ldw	r2,-56(fp)
    1a24:	10000626 	beq	r2,zero,1a40 <kiss_fft_alloc+0x7c>
    1a28:	e0bff117 	ldw	r2,-60(fp)
    1a2c:	10c00017 	ldw	r3,0(r2)
    1a30:	e0bff717 	ldw	r2,-36(fp)
    1a34:	18800236 	bltu	r3,r2,1a40 <kiss_fft_alloc+0x7c>
            st = (kiss_fft_cfg)mem;
    1a38:	e0bff217 	ldw	r2,-56(fp)
    1a3c:	e0bffb15 	stw	r2,-20(fp)
        *lenmem = memneeded;
    1a40:	e0bff117 	ldw	r2,-60(fp)
    1a44:	e0fff717 	ldw	r3,-36(fp)
    1a48:	10c00015 	stw	r3,0(r2)
    }
    if (st) {
    1a4c:	e0bffb17 	ldw	r2,-20(fp)
    1a50:	10006126 	beq	r2,zero,1bd8 <kiss_fft_alloc+0x214>
        int i;
        st->nfft=nfft;
    1a54:	e0bffb17 	ldw	r2,-20(fp)
    1a58:	e0fff417 	ldw	r3,-48(fp)
    1a5c:	10c00015 	stw	r3,0(r2)
        st->inverse = inverse_fft;
    1a60:	e0bffb17 	ldw	r2,-20(fp)
    1a64:	e0fff317 	ldw	r3,-52(fp)
    1a68:	10c00115 	stw	r3,4(r2)

        for (i=0;i<nfft;++i) {
    1a6c:	e03ffa15 	stw	zero,-24(fp)
    1a70:	00005106 	br	1bb8 <kiss_fft_alloc+0x1f4>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
    1a74:	00980034 	movhi	r2,24576
    1a78:	e0bff515 	stw	r2,-44(fp)
    1a7c:	00900274 	movhi	r2,16393
    1a80:	10887ec4 	addi	r2,r2,8699
    1a84:	e0bff615 	stw	r2,-40(fp)
            double phase = -2*pi*i / nfft;
    1a88:	000d883a 	mov	r6,zero
    1a8c:	01f00034 	movhi	r7,49152
    1a90:	e13ff517 	ldw	r4,-44(fp)
    1a94:	e17ff617 	ldw	r5,-40(fp)
    1a98:	00088e80 	call	88e8 <__muldf3>
    1a9c:	1009883a 	mov	r4,r2
    1aa0:	180b883a 	mov	r5,r3
    1aa4:	2025883a 	mov	r18,r4
    1aa8:	2827883a 	mov	r19,r5
    1aac:	e13ffa17 	ldw	r4,-24(fp)
    1ab0:	0009a740 	call	9a74 <__floatsidf>
    1ab4:	1009883a 	mov	r4,r2
    1ab8:	180b883a 	mov	r5,r3
    1abc:	200d883a 	mov	r6,r4
    1ac0:	280f883a 	mov	r7,r5
    1ac4:	9009883a 	mov	r4,r18
    1ac8:	980b883a 	mov	r5,r19
    1acc:	00088e80 	call	88e8 <__muldf3>
    1ad0:	1009883a 	mov	r4,r2
    1ad4:	180b883a 	mov	r5,r3
    1ad8:	2025883a 	mov	r18,r4
    1adc:	2827883a 	mov	r19,r5
    1ae0:	e13ff417 	ldw	r4,-48(fp)
    1ae4:	0009a740 	call	9a74 <__floatsidf>
    1ae8:	1009883a 	mov	r4,r2
    1aec:	180b883a 	mov	r5,r3
    1af0:	200d883a 	mov	r6,r4
    1af4:	280f883a 	mov	r7,r5
    1af8:	9009883a 	mov	r4,r18
    1afc:	980b883a 	mov	r5,r19
    1b00:	0007d840 	call	7d84 <__divdf3>
    1b04:	1009883a 	mov	r4,r2
    1b08:	180b883a 	mov	r5,r3
    1b0c:	e13ff815 	stw	r4,-32(fp)
    1b10:	e17ff915 	stw	r5,-28(fp)
            if (st->inverse)
    1b14:	e0bffb17 	ldw	r2,-20(fp)
    1b18:	10800117 	ldw	r2,4(r2)
    1b1c:	10000526 	beq	r2,zero,1b34 <kiss_fft_alloc+0x170>
                phase *= -1;
    1b20:	e43ff817 	ldw	r16,-32(fp)
    1b24:	e0bff917 	ldw	r2,-28(fp)
    1b28:	1460003c 	xorhi	r17,r2,32768
    1b2c:	e43ff815 	stw	r16,-32(fp)
    1b30:	e47ff915 	stw	r17,-28(fp)
            kf_cexp(st->twiddles+i, phase );
    1b34:	e13ff817 	ldw	r4,-32(fp)
    1b38:	e17ff917 	ldw	r5,-28(fp)
    1b3c:	0002db80 	call	2db8 <cos>
    1b40:	100d883a 	mov	r6,r2
    1b44:	180f883a 	mov	r7,r3
    1b48:	e0bffb17 	ldw	r2,-20(fp)
    1b4c:	10c04204 	addi	r3,r2,264
    1b50:	e0bffa17 	ldw	r2,-24(fp)
    1b54:	100490fa 	slli	r2,r2,3
    1b58:	18a5883a 	add	r18,r3,r2
    1b5c:	3009883a 	mov	r4,r6
    1b60:	380b883a 	mov	r5,r7
    1b64:	0009cb80 	call	9cb8 <__truncdfsf2>
    1b68:	1007883a 	mov	r3,r2
    1b6c:	90c00015 	stw	r3,0(r18)
    1b70:	e13ff817 	ldw	r4,-32(fp)
    1b74:	e17ff917 	ldw	r5,-28(fp)
    1b78:	000304c0 	call	304c <sin>
    1b7c:	100d883a 	mov	r6,r2
    1b80:	180f883a 	mov	r7,r3
    1b84:	e0bffb17 	ldw	r2,-20(fp)
    1b88:	10c04204 	addi	r3,r2,264
    1b8c:	e0bffa17 	ldw	r2,-24(fp)
    1b90:	100490fa 	slli	r2,r2,3
    1b94:	18a5883a 	add	r18,r3,r2
    1b98:	3009883a 	mov	r4,r6
    1b9c:	380b883a 	mov	r5,r7
    1ba0:	0009cb80 	call	9cb8 <__truncdfsf2>
    1ba4:	1007883a 	mov	r3,r2
    1ba8:	90c00115 	stw	r3,4(r18)
        for (i=0;i<nfft;++i) {
    1bac:	e0bffa17 	ldw	r2,-24(fp)
    1bb0:	10800044 	addi	r2,r2,1
    1bb4:	e0bffa15 	stw	r2,-24(fp)
    1bb8:	e0fffa17 	ldw	r3,-24(fp)
    1bbc:	e0bff417 	ldw	r2,-48(fp)
    1bc0:	18bfac16 	blt	r3,r2,1a74 <kiss_fft_alloc+0xb0>
        }

        kf_factor(nfft,st->factors);
    1bc4:	e0bffb17 	ldw	r2,-20(fp)
    1bc8:	10800204 	addi	r2,r2,8
    1bcc:	100b883a 	mov	r5,r2
    1bd0:	e13ff417 	ldw	r4,-48(fp)
    1bd4:	00018800 	call	1880 <kf_factor>
    }
    return st;
    1bd8:	e0bffb17 	ldw	r2,-20(fp)
}
    1bdc:	e6fffc04 	addi	sp,fp,-16
    1be0:	dfc00517 	ldw	ra,20(sp)
    1be4:	df000417 	ldw	fp,16(sp)
    1be8:	dcc00317 	ldw	r19,12(sp)
    1bec:	dc800217 	ldw	r18,8(sp)
    1bf0:	dc400117 	ldw	r17,4(sp)
    1bf4:	dc000017 	ldw	r16,0(sp)
    1bf8:	dec00604 	addi	sp,sp,24
    1bfc:	f800283a 	ret

00001c00 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
    1c00:	defff704 	addi	sp,sp,-36
    1c04:	dfc00815 	stw	ra,32(sp)
    1c08:	df000715 	stw	fp,28(sp)
    1c0c:	df000704 	addi	fp,sp,28
    1c10:	e13ffe15 	stw	r4,-8(fp)
    1c14:	e17ffd15 	stw	r5,-12(fp)
    1c18:	e1bffc15 	stw	r6,-16(fp)
    1c1c:	e1fffb15 	stw	r7,-20(fp)
    if (fin == fout) {
    1c20:	e0fffd17 	ldw	r3,-12(fp)
    1c24:	e0bffc17 	ldw	r2,-16(fp)
    1c28:	18801a1e 	bne	r3,r2,1c94 <kiss_fft_stride+0x94>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
    1c2c:	e0bffe17 	ldw	r2,-8(fp)
    1c30:	10800017 	ldw	r2,0(r2)
    1c34:	100490fa 	slli	r2,r2,3
    1c38:	1009883a 	mov	r4,r2
    1c3c:	0009e880 	call	9e88 <malloc>
    1c40:	e0bfff15 	stw	r2,-4(fp)
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
    1c44:	e0bffe17 	ldw	r2,-8(fp)
    1c48:	10800204 	addi	r2,r2,8
    1c4c:	e0fffe17 	ldw	r3,-8(fp)
    1c50:	d8c00115 	stw	r3,4(sp)
    1c54:	d8800015 	stw	r2,0(sp)
    1c58:	e1fffb17 	ldw	r7,-20(fp)
    1c5c:	01800044 	movi	r6,1
    1c60:	e17ffd17 	ldw	r5,-12(fp)
    1c64:	e13fff17 	ldw	r4,-4(fp)
    1c68:	00016480 	call	1648 <kf_work>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
    1c6c:	e0bffe17 	ldw	r2,-8(fp)
    1c70:	10800017 	ldw	r2,0(r2)
    1c74:	100490fa 	slli	r2,r2,3
    1c78:	100d883a 	mov	r6,r2
    1c7c:	e17fff17 	ldw	r5,-4(fp)
    1c80:	e13ffc17 	ldw	r4,-16(fp)
    1c84:	000a6880 	call	a688 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
    1c88:	e13fff17 	ldw	r4,-4(fp)
    1c8c:	0009e980 	call	9e98 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
    1c90:	00000a06 	br	1cbc <kiss_fft_stride+0xbc>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    1c94:	e0bffe17 	ldw	r2,-8(fp)
    1c98:	10800204 	addi	r2,r2,8
    1c9c:	e0fffe17 	ldw	r3,-8(fp)
    1ca0:	d8c00115 	stw	r3,4(sp)
    1ca4:	d8800015 	stw	r2,0(sp)
    1ca8:	e1fffb17 	ldw	r7,-20(fp)
    1cac:	01800044 	movi	r6,1
    1cb0:	e17ffd17 	ldw	r5,-12(fp)
    1cb4:	e13ffc17 	ldw	r4,-16(fp)
    1cb8:	00016480 	call	1648 <kf_work>
}
    1cbc:	0001883a 	nop
    1cc0:	e037883a 	mov	sp,fp
    1cc4:	dfc00117 	ldw	ra,4(sp)
    1cc8:	df000017 	ldw	fp,0(sp)
    1ccc:	dec00204 	addi	sp,sp,8
    1cd0:	f800283a 	ret

00001cd4 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    1cd4:	defffb04 	addi	sp,sp,-20
    1cd8:	dfc00415 	stw	ra,16(sp)
    1cdc:	df000315 	stw	fp,12(sp)
    1ce0:	df000304 	addi	fp,sp,12
    1ce4:	e13fff15 	stw	r4,-4(fp)
    1ce8:	e17ffe15 	stw	r5,-8(fp)
    1cec:	e1bffd15 	stw	r6,-12(fp)
    kiss_fft_stride(cfg,fin,fout,1);
    1cf0:	01c00044 	movi	r7,1
    1cf4:	e1bffd17 	ldw	r6,-12(fp)
    1cf8:	e17ffe17 	ldw	r5,-8(fp)
    1cfc:	e13fff17 	ldw	r4,-4(fp)
    1d00:	0001c000 	call	1c00 <kiss_fft_stride>
}
    1d04:	0001883a 	nop
    1d08:	e037883a 	mov	sp,fp
    1d0c:	dfc00117 	ldw	ra,4(sp)
    1d10:	df000017 	ldw	fp,0(sp)
    1d14:	dec00204 	addi	sp,sp,8
    1d18:	f800283a 	ret

00001d1c <kiss_fft_cleanup>:


void kiss_fft_cleanup(void)
{
    1d1c:	deffff04 	addi	sp,sp,-4
    1d20:	df000015 	stw	fp,0(sp)
    1d24:	d839883a 	mov	fp,sp
    // nothing needed any more
}
    1d28:	0001883a 	nop
    1d2c:	e037883a 	mov	sp,fp
    1d30:	df000017 	ldw	fp,0(sp)
    1d34:	dec00104 	addi	sp,sp,4
    1d38:	f800283a 	ret

00001d3c <kiss_fft_next_fast_size>:

int kiss_fft_next_fast_size(int n)
{
    1d3c:	defffc04 	addi	sp,sp,-16
    1d40:	dfc00315 	stw	ra,12(sp)
    1d44:	df000215 	stw	fp,8(sp)
    1d48:	df000204 	addi	fp,sp,8
    1d4c:	e13ffe15 	stw	r4,-8(fp)
    while(1) {
        int m=n;
    1d50:	e0bffe17 	ldw	r2,-8(fp)
    1d54:	e0bfff15 	stw	r2,-4(fp)
        while ( (m%2) == 0 ) m/=2;
    1d58:	00000506 	br	1d70 <kiss_fft_next_fast_size+0x34>
    1d5c:	e0bfff17 	ldw	r2,-4(fp)
    1d60:	1006d7fa 	srli	r3,r2,31
    1d64:	1885883a 	add	r2,r3,r2
    1d68:	1005d07a 	srai	r2,r2,1
    1d6c:	e0bfff15 	stw	r2,-4(fp)
    1d70:	e0bfff17 	ldw	r2,-4(fp)
    1d74:	1080004c 	andi	r2,r2,1
    1d78:	103ff826 	beq	r2,zero,1d5c <kiss_fft_next_fast_size+0x20>
        while ( (m%3) == 0 ) m/=3;
    1d7c:	00000506 	br	1d94 <kiss_fft_next_fast_size+0x58>
    1d80:	e0bfff17 	ldw	r2,-4(fp)
    1d84:	014000c4 	movi	r5,3
    1d88:	1009883a 	mov	r4,r2
    1d8c:	0006f700 	call	6f70 <__divsi3>
    1d90:	e0bfff15 	stw	r2,-4(fp)
    1d94:	e0bfff17 	ldw	r2,-4(fp)
    1d98:	014000c4 	movi	r5,3
    1d9c:	1009883a 	mov	r4,r2
    1da0:	0006ff00 	call	6ff0 <__modsi3>
    1da4:	103ff626 	beq	r2,zero,1d80 <kiss_fft_next_fast_size+0x44>
        while ( (m%5) == 0 ) m/=5;
    1da8:	00000506 	br	1dc0 <kiss_fft_next_fast_size+0x84>
    1dac:	e0bfff17 	ldw	r2,-4(fp)
    1db0:	01400144 	movi	r5,5
    1db4:	1009883a 	mov	r4,r2
    1db8:	0006f700 	call	6f70 <__divsi3>
    1dbc:	e0bfff15 	stw	r2,-4(fp)
    1dc0:	e0bfff17 	ldw	r2,-4(fp)
    1dc4:	01400144 	movi	r5,5
    1dc8:	1009883a 	mov	r4,r2
    1dcc:	0006ff00 	call	6ff0 <__modsi3>
    1dd0:	103ff626 	beq	r2,zero,1dac <kiss_fft_next_fast_size+0x70>
        if (m<=1)
    1dd4:	e0bfff17 	ldw	r2,-4(fp)
    1dd8:	10800088 	cmpgei	r2,r2,2
    1ddc:	10000426 	beq	r2,zero,1df0 <kiss_fft_next_fast_size+0xb4>
            break; /* n is completely factorable by twos, threes, and fives */
        n++;
    1de0:	e0bffe17 	ldw	r2,-8(fp)
    1de4:	10800044 	addi	r2,r2,1
    1de8:	e0bffe15 	stw	r2,-8(fp)
    while(1) {
    1dec:	003fd806 	br	1d50 <kiss_fft_next_fast_size+0x14>
            break; /* n is completely factorable by twos, threes, and fives */
    1df0:	0001883a 	nop
    }
    return n;
    1df4:	e0bffe17 	ldw	r2,-8(fp)
}
    1df8:	e037883a 	mov	sp,fp
    1dfc:	dfc00117 	ldw	ra,4(sp)
    1e00:	df000017 	ldw	fp,0(sp)
    1e04:	dec00204 	addi	sp,sp,8
    1e08:	f800283a 	ret

00001e0c <main>:
/*******************************************************************************
 * This program performs the following:
 *  1. records audio for 1.5 seconds when KEY[0] is pressed.
 *  2. Normalizes
 ******************************************************************************/
int main(void) {
    1e0c:	defffe04 	addi	sp,sp,-8
    1e10:	dfc00115 	stw	ra,4(sp)
    1e14:	df000015 	stw	fp,0(sp)
    1e18:	d839883a 	mov	fp,sp
    1e1c:	023fff74 	movhi	r8,65533
    1e20:	423b4904 	addi	r8,r8,-4828
    1e24:	da37883a 	add	sp,sp,r8
    /* Declare volatile pointers to I/O registers (volatile means that IO load
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile int *red_LED_ptr = (int *)LED_BASE;
    1e28:	00bfc834 	movhi	r2,65312
    1e2c:	e0bffb15 	stw	r2,-20(fp)
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    1e30:	00bfc834 	movhi	r2,65312
    1e34:	108c1004 	addi	r2,r2,12352
    1e38:	e0bffa15 	stw	r2,-24(fp)
    volatile int *sdram_ptr = ((int *)SDRAM_BASE+0x0000FFFF);
    1e3c:	00800134 	movhi	r2,4
    1e40:	10bfff04 	addi	r2,r2,-4
    1e44:	e0bfff15 	stw	r2,-4(fp)
    int sdram_count = 0;
    1e48:	e03ff915 	stw	zero,-28(fp)
    int counter = 0;
    1e4c:	e03ff815 	stw	zero,-32(fp)

    /* used for audio record/playback */
    int fifospace;
    int record = 0, play = 0, buffer_index = 0;
    1e50:	e03ff615 	stw	zero,-40(fp)
    1e54:	e03ff515 	stw	zero,-44(fp)
    1e58:	e03ff415 	stw	zero,-48(fp)
    float windowed_buffer[BUF_SIZE];
    kiss_fft_cpx output[FFT_SIZE];
    float mfcc_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];

    /* read and echo audio data */
    record = 0;
    1e5c:	e03ff615 	stw	zero,-40(fp)
    play = 0;
    1e60:	e03ff515 	stw	zero,-44(fp)
    int i;
    while (1) {
        check_KEYs(&record, &play, &buffer_index);
    1e64:	e13ff404 	addi	r4,fp,-48
    1e68:	e0fff504 	addi	r3,fp,-44
    1e6c:	e0bff604 	addi	r2,fp,-40
    1e70:	200d883a 	mov	r6,r4
    1e74:	180b883a 	mov	r5,r3
    1e78:	1009883a 	mov	r4,r2
    1e7c:	00020500 	call	2050 <check_KEYs>
        if (record) {
    1e80:	e0bff617 	ldw	r2,-40(fp)
    1e84:	103ff726 	beq	r2,zero,1e64 <main+0x58>
            *(red_LED_ptr) = 0x1;  // turn on LEDR[0]
    1e88:	e0bffb17 	ldw	r2,-20(fp)
    1e8c:	00c00044 	movi	r3,1
    1e90:	10c00015 	stw	r3,0(r2)

            fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
    1e94:	e0bffa17 	ldw	r2,-24(fp)
    1e98:	10800117 	ldw	r2,4(r2)
    1e9c:	e0bffe15 	stw	r2,-8(fp)
            if ((fifospace & 0x000000FF) > BUF_THRESHOLD)  // check RARC
    1ea0:	e0bffe17 	ldw	r2,-8(fp)
    1ea4:	10803fcc 	andi	r2,r2,255
    1ea8:	10801850 	cmplti	r2,r2,97
    1eac:	103fed1e 	bne	r2,zero,1e64 <main+0x58>
            {
                // store data until the the audio-in FIFO is empty or the buffer is full
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    1eb0:	00006006 	br	2034 <main+0x228>
                    left_buffer[buffer_index] = *(audio_ptr + 2);
    1eb4:	e17ff417 	ldw	r5,-48(fp)
    1eb8:	e0bffa17 	ldw	r2,-24(fp)
    1ebc:	10c00217 	ldw	r3,8(r2)
    1ec0:	00bffff4 	movhi	r2,65535
    1ec4:	10911404 	addi	r2,r2,17488
    1ec8:	e089883a 	add	r4,fp,r2
    1ecc:	280490ba 	slli	r2,r5,2
    1ed0:	2085883a 	add	r2,r4,r2
    1ed4:	10c00015 	stw	r3,0(r2)
                    right_buffer[buffer_index] = *(audio_ptr + 3);
    1ed8:	e17ff417 	ldw	r5,-48(fp)
    1edc:	e0bffa17 	ldw	r2,-24(fp)
    1ee0:	10c00317 	ldw	r3,12(r2)
    1ee4:	00bffff4 	movhi	r2,65535
    1ee8:	10a23404 	addi	r2,r2,-30512
    1eec:	e089883a 	add	r4,fp,r2
    1ef0:	280490ba 	slli	r2,r5,2
    1ef4:	2085883a 	add	r2,r4,r2
    1ef8:	10c00015 	stw	r3,0(r2)
                    ++buffer_index;
    1efc:	e0bff417 	ldw	r2,-48(fp)
    1f00:	10800044 	addi	r2,r2,1
    1f04:	e0bff415 	stw	r2,-48(fp)

                    if (buffer_index == BUF_SIZE) {
    1f08:	e0bff417 	ldw	r2,-48(fp)
    1f0c:	108bb818 	cmpnei	r2,r2,12000
    1f10:	1000451e 	bne	r2,zero,2028 <main+0x21c>
                        // done recording
                        record = 0;
    1f14:	e03ff615 	stw	zero,-40(fp)
                        *(red_LED_ptr) = 0x0;  // turn off LEDR
    1f18:	e0bffb17 	ldw	r2,-20(fp)
    1f1c:	10000015 	stw	zero,0(r2)
                        for (int i = 6000; i < 6600; i++) {
    1f20:	0085dc04 	movi	r2,6000
    1f24:	e0bffc15 	stw	r2,-16(fp)
    1f28:	00000e06 	br	1f64 <main+0x158>
                        	printf("%d\n", left_buffer[i]);
    1f2c:	00bffff4 	movhi	r2,65535
    1f30:	10911404 	addi	r2,r2,17488
    1f34:	e087883a 	add	r3,fp,r2
    1f38:	e0bffc17 	ldw	r2,-16(fp)
    1f3c:	100490ba 	slli	r2,r2,2
    1f40:	1885883a 	add	r2,r3,r2
    1f44:	10800017 	ldw	r2,0(r2)
    1f48:	100b883a 	mov	r5,r2
    1f4c:	01000074 	movhi	r4,1
    1f50:	211e9c04 	addi	r4,r4,31344
    1f54:	000a7b80 	call	a7b8 <printf>
                        for (int i = 6000; i < 6600; i++) {
    1f58:	e0bffc17 	ldw	r2,-16(fp)
    1f5c:	10800044 	addi	r2,r2,1
    1f60:	e0bffc15 	stw	r2,-16(fp)
    1f64:	e0bffc17 	ldw	r2,-16(fp)
    1f68:	10867210 	cmplti	r2,r2,6600
    1f6c:	103fef1e 	bne	r2,zero,1f2c <main+0x120>
							}
							printf("\n");
						}*/
                         //write the int buffer to the SDRAM

                        *(red_LED_ptr) = 0x2;
    1f70:	e0bffb17 	ldw	r2,-20(fp)
    1f74:	00c00084 	movi	r3,2
    1f78:	10c00015 	stw	r3,0(r2)
						for (i = 0; i < BUF_SIZE; i++) {
    1f7c:	e03ffd15 	stw	zero,-12(fp)
    1f80:	00000b06 	br	1fb0 <main+0x1a4>
							*sdram_ptr++ = i;
    1f84:	e0bfff17 	ldw	r2,-4(fp)
    1f88:	10c00104 	addi	r3,r2,4
    1f8c:	e0ffff15 	stw	r3,-4(fp)
    1f90:	e0fffd17 	ldw	r3,-12(fp)
    1f94:	10c00015 	stw	r3,0(r2)
									//left_buffer[i];
							//sdram_count++;
							printf("test\n");
    1f98:	01000074 	movhi	r4,1
    1f9c:	211e9d04 	addi	r4,r4,31348
    1fa0:	000a8dc0 	call	a8dc <puts>
						for (i = 0; i < BUF_SIZE; i++) {
    1fa4:	e0bffd17 	ldw	r2,-12(fp)
    1fa8:	10800044 	addi	r2,r2,1
    1fac:	e0bffd15 	stw	r2,-12(fp)
    1fb0:	e0bffd17 	ldw	r2,-12(fp)
    1fb4:	108bb810 	cmplti	r2,r2,12000
    1fb8:	103ff21e 	bne	r2,zero,1f84 <main+0x178>
						}
						printf("\n");
    1fbc:	01000284 	movi	r4,10
    1fc0:	000a7f80 	call	a7f8 <putchar>
						*(red_LED_ptr) = 0x4;
    1fc4:	e0bffb17 	ldw	r2,-20(fp)
    1fc8:	00c00104 	movi	r3,4
    1fcc:	10c00015 	stw	r3,0(r2)
						sdram_ptr = ((int *)SDRAM_BASE+0x0000FFFF);
    1fd0:	00800134 	movhi	r2,4
    1fd4:	10bfff04 	addi	r2,r2,-4
    1fd8:	e0bfff15 	stw	r2,-4(fp)
                        //0x7ff443c

                        for (i = 6000; i < 6600; i++) {
    1fdc:	0085dc04 	movi	r2,6000
    1fe0:	e0bffd15 	stw	r2,-12(fp)
    1fe4:	00000c06 	br	2018 <main+0x20c>
                        	int sample = *sdram_ptr++;
    1fe8:	e0bfff17 	ldw	r2,-4(fp)
    1fec:	10c00104 	addi	r3,r2,4
    1ff0:	e0ffff15 	stw	r3,-4(fp)
    1ff4:	10800017 	ldw	r2,0(r2)
    1ff8:	e0bff715 	stw	r2,-36(fp)
                        	printf("Sample: %d\n", sample);
    1ffc:	e17ff717 	ldw	r5,-36(fp)
    2000:	01000074 	movhi	r4,1
    2004:	211e9f04 	addi	r4,r4,31356
    2008:	000a7b80 	call	a7b8 <printf>
                        for (i = 6000; i < 6600; i++) {
    200c:	e0bffd17 	ldw	r2,-12(fp)
    2010:	10800044 	addi	r2,r2,1
    2014:	e0bffd15 	stw	r2,-12(fp)
    2018:	e0bffd17 	ldw	r2,-12(fp)
    201c:	10867210 	cmplti	r2,r2,6600
    2020:	103ff11e 	bne	r2,zero,1fe8 <main+0x1dc>
                        }
                        // Reset buffer_index for the next recording
                        buffer_index = 0;
    2024:	e03ff415 	stw	zero,-48(fp)
                    }
                    fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
    2028:	e0bffa17 	ldw	r2,-24(fp)
    202c:	10800117 	ldw	r2,4(r2)
    2030:	e0bffe15 	stw	r2,-8(fp)
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    2034:	e0bffe17 	ldw	r2,-8(fp)
    2038:	10803fcc 	andi	r2,r2,255
    203c:	103f8926 	beq	r2,zero,1e64 <main+0x58>
    2040:	e0bff417 	ldw	r2,-48(fp)
    2044:	108bb810 	cmplti	r2,r2,12000
    2048:	103f9a1e 	bne	r2,zero,1eb4 <main+0xa8>
        check_KEYs(&record, &play, &buffer_index);
    204c:	003f8506 	br	1e64 <main+0x58>

00002050 <check_KEYs>:
}

/****************************************************************************************
 * Subroutine to read KEYs
 ****************************************************************************************/
void check_KEYs(int *KEY0, int *KEY1, int *counter) {
    2050:	defff904 	addi	sp,sp,-28
    2054:	df000615 	stw	fp,24(sp)
    2058:	df000604 	addi	fp,sp,24
    205c:	e13ffc15 	stw	r4,-16(fp)
    2060:	e17ffb15 	stw	r5,-20(fp)
    2064:	e1bffa15 	stw	r6,-24(fp)
    volatile int *KEY_ptr = (int *)KEY_BASE;
    2068:	00bfc834 	movhi	r2,65312
    206c:	10801404 	addi	r2,r2,80
    2070:	e0bfff15 	stw	r2,-4(fp)
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    2074:	00bfc834 	movhi	r2,65312
    2078:	108c1004 	addi	r2,r2,12352
    207c:	e0bffe15 	stw	r2,-8(fp)
    int KEY_value;

    KEY_value = *(KEY_ptr);  // read the pushbutton KEY values
    2080:	e0bfff17 	ldw	r2,-4(fp)
    2084:	10800017 	ldw	r2,0(r2)
    2088:	e0bffd15 	stw	r2,-12(fp)
    while (*KEY_ptr)
    208c:	0001883a 	nop
    2090:	e0bfff17 	ldw	r2,-4(fp)
    2094:	10800017 	ldw	r2,0(r2)
    2098:	103ffd1e 	bne	r2,zero,2090 <check_KEYs+0x40>
        ;  // wait for pushbutton KEY release

    if (KEY_value == 0x1)  // check KEY0
    209c:	e0bffd17 	ldw	r2,-12(fp)
    20a0:	10800058 	cmpnei	r2,r2,1
    20a4:	10000b1e 	bne	r2,zero,20d4 <check_KEYs+0x84>
    {
        // reset counter to start recording
        *counter = 0;
    20a8:	e0bffa17 	ldw	r2,-24(fp)
    20ac:	10000015 	stw	zero,0(r2)
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
    20b0:	e0bffe17 	ldw	r2,-8(fp)
    20b4:	00c00104 	movi	r3,4
    20b8:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
    20bc:	e0bffe17 	ldw	r2,-8(fp)
    20c0:	10000015 	stw	zero,0(r2)

        *KEY0 = 1;
    20c4:	e0bffc17 	ldw	r2,-16(fp)
    20c8:	00c00044 	movi	r3,1
    20cc:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x8;
        *(audio_ptr) = 0x0;

        *KEY1 = 1;
    }
}
    20d0:	00000d06 	br	2108 <check_KEYs+0xb8>
    } else if (KEY_value == 0x2)  // check KEY1
    20d4:	e0bffd17 	ldw	r2,-12(fp)
    20d8:	10800098 	cmpnei	r2,r2,2
    20dc:	10000a1e 	bne	r2,zero,2108 <check_KEYs+0xb8>
        *counter = 0;
    20e0:	e0bffa17 	ldw	r2,-24(fp)
    20e4:	10000015 	stw	zero,0(r2)
        *(audio_ptr) = 0x8;
    20e8:	e0bffe17 	ldw	r2,-8(fp)
    20ec:	00c00204 	movi	r3,8
    20f0:	10c00015 	stw	r3,0(r2)
        *(audio_ptr) = 0x0;
    20f4:	e0bffe17 	ldw	r2,-8(fp)
    20f8:	10000015 	stw	zero,0(r2)
        *KEY1 = 1;
    20fc:	e0bffb17 	ldw	r2,-20(fp)
    2100:	00c00044 	movi	r3,1
    2104:	10c00015 	stw	r3,0(r2)
}
    2108:	0001883a 	nop
    210c:	e037883a 	mov	sp,fp
    2110:	df000017 	ldw	fp,0(sp)
    2114:	dec00104 	addi	sp,sp,4
    2118:	f800283a 	ret

0000211c <normalize_audio>:

void normalize_audio(float *input_buffer, float *output_buffer, int size) {
    211c:	defff604 	addi	sp,sp,-40
    2120:	dfc00915 	stw	ra,36(sp)
    2124:	df000815 	stw	fp,32(sp)
    2128:	df000804 	addi	fp,sp,32
    212c:	e13ffa15 	stw	r4,-24(fp)
    2130:	e17ff915 	stw	r5,-28(fp)
    2134:	e1bff815 	stw	r6,-32(fp)
	float max_val = 0.0f;
    2138:	e03fff15 	stw	zero,-4(fp)

	// Find the maximum absolute value
	for (int i = 0; i < size; i++) {
    213c:	e03ffe15 	stw	zero,-8(fp)
    2140:	00001606 	br	219c <normalize_audio+0x80>
		float signed_val = input_buffer[i] - 32768.0f;  // Adjusting for unsigned 16-bit PCM
    2144:	e0bffe17 	ldw	r2,-8(fp)
    2148:	100490ba 	slli	r2,r2,2
    214c:	e0fffa17 	ldw	r3,-24(fp)
    2150:	1885883a 	add	r2,r3,r2
    2154:	10c00017 	ldw	r3,0(r2)
    2158:	0091c034 	movhi	r2,18176
    215c:	1885ffb2 	custom	254,r2,r3,r2
    2160:	e0bffc15 	stw	r2,-16(fp)
		float abs_val = fabs(signed_val);
    2164:	e0fffc17 	ldw	r3,-16(fp)
    2168:	00a00034 	movhi	r2,32768
    216c:	10bfffc4 	addi	r2,r2,-1
    2170:	1884703a 	and	r2,r3,r2
    2174:	e0bffb15 	stw	r2,-20(fp)
		if (abs_val > max_val) {
    2178:	e17fff17 	ldw	r5,-4(fp)
    217c:	e13ffb17 	ldw	r4,-20(fp)
    2180:	00071bc0 	call	71bc <__gesf2>
    2184:	0080020e 	bge	zero,r2,2190 <normalize_audio+0x74>
			max_val = abs_val;
    2188:	e0bffb17 	ldw	r2,-20(fp)
    218c:	e0bfff15 	stw	r2,-4(fp)
	for (int i = 0; i < size; i++) {
    2190:	e0bffe17 	ldw	r2,-8(fp)
    2194:	10800044 	addi	r2,r2,1
    2198:	e0bffe15 	stw	r2,-8(fp)
    219c:	e0fffe17 	ldw	r3,-8(fp)
    21a0:	e0bff817 	ldw	r2,-32(fp)
    21a4:	18bfe716 	blt	r3,r2,2144 <normalize_audio+0x28>
		}
	}

	// Prevent division by zero
	if (max_val == 0) {
    21a8:	000b883a 	mov	r5,zero
    21ac:	e13fff17 	ldw	r4,-4(fp)
    21b0:	000714c0 	call	714c <__eqsf2>
    21b4:	1000021e 	bne	r2,zero,21c0 <normalize_audio+0xa4>
		max_val = 1.0f;  // To avoid division by zero
    21b8:	008fe034 	movhi	r2,16256
    21bc:	e0bfff15 	stw	r2,-4(fp)
	}

	// Normalize the input buffer to the range [-1, 1]
	for (int i = 0; i < size; i++) {
    21c0:	e03ffd15 	stw	zero,-12(fp)
    21c4:	00001106 	br	220c <normalize_audio+0xf0>
		output_buffer[i] = (input_buffer[i] - 32768.0f) / max_val;
    21c8:	e0bffd17 	ldw	r2,-12(fp)
    21cc:	100490ba 	slli	r2,r2,2
    21d0:	e0fffa17 	ldw	r3,-24(fp)
    21d4:	1885883a 	add	r2,r3,r2
    21d8:	10c00017 	ldw	r3,0(r2)
    21dc:	0091c034 	movhi	r2,18176
    21e0:	1889ffb2 	custom	254,r4,r3,r2
    21e4:	e0bffd17 	ldw	r2,-12(fp)
    21e8:	100490ba 	slli	r2,r2,2
    21ec:	e0fff917 	ldw	r3,-28(fp)
    21f0:	1885883a 	add	r2,r3,r2
    21f4:	e0ffff17 	ldw	r3,-4(fp)
    21f8:	20c7fff2 	custom	255,r3,r4,r3
    21fc:	10c00015 	stw	r3,0(r2)
	for (int i = 0; i < size; i++) {
    2200:	e0bffd17 	ldw	r2,-12(fp)
    2204:	10800044 	addi	r2,r2,1
    2208:	e0bffd15 	stw	r2,-12(fp)
    220c:	e0fffd17 	ldw	r3,-12(fp)
    2210:	e0bff817 	ldw	r2,-32(fp)
    2214:	18bfec16 	blt	r3,r2,21c8 <normalize_audio+0xac>
	}
}
    2218:	0001883a 	nop
    221c:	0001883a 	nop
    2220:	e037883a 	mov	sp,fp
    2224:	dfc00117 	ldw	ra,4(sp)
    2228:	df000017 	ldw	fp,0(sp)
    222c:	dec00204 	addi	sp,sp,8
    2230:	f800283a 	ret

00002234 <fft>:

void fft(float *input_buffer, kiss_fft_cpx *output_buffer) {
    2234:	def7fa04 	addi	sp,sp,-8216
    2238:	dfc80515 	stw	ra,8212(sp)
    223c:	df080415 	stw	fp,8208(sp)
    2240:	df080404 	addi	fp,sp,8208
    2244:	e137fd15 	stw	r4,-8204(fp)
    2248:	e177fc15 	stw	r5,-8208(fp)
    kiss_fft_cfg config;

    config = kiss_fft_alloc(FFT_SIZE, 0, NULL, NULL);
    224c:	000f883a 	mov	r7,zero
    2250:	000d883a 	mov	r6,zero
    2254:	000b883a 	mov	r5,zero
    2258:	01010004 	movi	r4,1024
    225c:	00019c40 	call	19c4 <kiss_fft_alloc>
    2260:	e0bffe15 	stw	r2,-8(fp)

    // Convert input to kiss_fft_cpx format
    kiss_fft_cpx kiss_input_buffer[FFT_SIZE];
    for (int i = 0; i < FFT_SIZE; i++) {
    2264:	e03fff15 	stw	zero,-4(fp)
    2268:	00001006 	br	22ac <fft+0x78>
        kiss_input_buffer[i].r = input_buffer[i];
    226c:	e0bfff17 	ldw	r2,-4(fp)
    2270:	100490ba 	slli	r2,r2,2
    2274:	e0f7fd17 	ldw	r3,-8204(fp)
    2278:	1885883a 	add	r2,r3,r2
    227c:	10c00017 	ldw	r3,0(r2)
    2280:	e0bfff17 	ldw	r2,-4(fp)
    2284:	100490fa 	slli	r2,r2,3
    2288:	e085883a 	add	r2,fp,r2
    228c:	10f7fe15 	stw	r3,-8200(r2)
        kiss_input_buffer[i].i = 0; // Assuming input is real, imaginary part is 0
    2290:	e0bfff17 	ldw	r2,-4(fp)
    2294:	100490fa 	slli	r2,r2,3
    2298:	e085883a 	add	r2,fp,r2
    229c:	1037ff15 	stw	zero,-8196(r2)
    for (int i = 0; i < FFT_SIZE; i++) {
    22a0:	e0bfff17 	ldw	r2,-4(fp)
    22a4:	10800044 	addi	r2,r2,1
    22a8:	e0bfff15 	stw	r2,-4(fp)
    22ac:	e0bfff17 	ldw	r2,-4(fp)
    22b0:	10810010 	cmplti	r2,r2,1024
    22b4:	103fed1e 	bne	r2,zero,226c <fft+0x38>
    }

    // Perform FFT
    kiss_fft(config, kiss_input_buffer, output_buffer);
    22b8:	e0b7fe04 	addi	r2,fp,-8200
    22bc:	e1b7fc17 	ldw	r6,-8208(fp)
    22c0:	100b883a 	mov	r5,r2
    22c4:	e13ffe17 	ldw	r4,-8(fp)
    22c8:	0001cd40 	call	1cd4 <kiss_fft>

    // Free the FFT configuration
    kiss_fft_free(config);
    22cc:	e13ffe17 	ldw	r4,-8(fp)
    22d0:	0009e980 	call	9e98 <free>
}
    22d4:	0001883a 	nop
    22d8:	e037883a 	mov	sp,fp
    22dc:	dfc00117 	ldw	ra,4(sp)
    22e0:	df000017 	ldw	fp,0(sp)
    22e4:	dec00204 	addi	sp,sp,8
    22e8:	f800283a 	ret

000022ec <calculate_mfcc>:

void calculate_mfcc(float *input_buffer, int signal_length, float *mfcc_buffer) {
    22ec:	dee7f304 	addi	sp,sp,-24628
    22f0:	dfd80c15 	stw	ra,24624(sp)
    22f4:	df180b15 	stw	fp,24620(sp)
    22f8:	dc980a15 	stw	r18,24616(sp)
    22fc:	dc580915 	stw	r17,24612(sp)
    2300:	dc180815 	stw	r16,24608(sp)
    2304:	df180b04 	addi	fp,sp,24620
    2308:	e127f815 	stw	r4,-24608(fp)
    230c:	e167f715 	stw	r5,-24612(fp)
    2310:	e1a7f615 	stw	r6,-24616(fp)
    float frame[FFT_SIZE];
    float windowed_frame[FFT_SIZE];
    // Calculate how many frames can be extracted from the input signal.
    int num_frames = (signal_length - FFT_SIZE) / FFT_SHIFT + 1;
    2314:	e0a7f717 	ldw	r2,-24612(fp)
    2318:	10bf0004 	addi	r2,r2,-1024
    231c:	1000010e 	bge	r2,zero,2324 <calculate_mfcc+0x38>
    2320:	10807fc4 	addi	r2,r2,511
    2324:	1005d27a 	srai	r2,r2,9
    2328:	10800044 	addi	r2,r2,1
    232c:	e0bff915 	stw	r2,-28(fp)

    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
    2330:	e03ffc15 	stw	zero,-16(fp)
    2334:	00007106 	br	24fc <calculate_mfcc+0x210>
        // Extract FFT_SIZE samples from the start of the current frame.
        memcpy(frame, input_buffer + frame_num * FFT_SHIFT, sizeof(float) * FFT_SIZE);
    2338:	e0bffc17 	ldw	r2,-16(fp)
    233c:	100492fa 	slli	r2,r2,11
    2340:	e0e7f817 	ldw	r3,-24608(fp)
    2344:	1887883a 	add	r3,r3,r2
    2348:	e0bbf904 	addi	r2,fp,-4124
    234c:	01840004 	movi	r6,4096
    2350:	180b883a 	mov	r5,r3
    2354:	1009883a 	mov	r4,r2
    2358:	000a6880 	call	a688 <memcpy>
        printf("cycle %d fft", frame_num + 1);
    235c:	e0bffc17 	ldw	r2,-16(fp)
    2360:	10800044 	addi	r2,r2,1
    2364:	100b883a 	mov	r5,r2
    2368:	01000074 	movhi	r4,1
    236c:	211ea204 	addi	r4,r4,31368
    2370:	000a7b80 	call	a7b8 <printf>
        // Apply the Hamming Window to the current frame.
        //hamming_window(frame, windowed_frame, FFT_SIZE);

        // Calculate the FFT of the current frame.
        kiss_fft_cpx fft_output[FFT_SIZE];
        fft(frame, fft_output);
    2374:	e0e7f904 	addi	r3,fp,-24604
    2378:	e0bbf904 	addi	r2,fp,-4124
    237c:	180b883a 	mov	r5,r3
    2380:	1009883a 	mov	r4,r2
    2384:	00022340 	call	2234 <fft>

        alt_printf("cycle %d spectrum", frame_num + 1);
    2388:	e0bffc17 	ldw	r2,-16(fp)
    238c:	10800044 	addi	r2,r2,1
    2390:	100b883a 	mov	r5,r2
    2394:	01000074 	movhi	r4,1
    2398:	211ea604 	addi	r4,r4,31384
    239c:	0014f840 	call	14f84 <alt_printf>

        // Compute the magnitude spectrum of the current frame.
        double magnitude_spectrum[FFT_SIZE];
        for (int i = 0; i < FFT_SIZE; i++) {
    23a0:	e03ffb15 	stw	zero,-20(fp)
    23a4:	00002906 	br	244c <calculate_mfcc+0x160>
            magnitude_spectrum[i] = sqrt(fft_output[i].r * fft_output[i].r + fft_output[i].i * fft_output[i].i);
    23a8:	e0bffb17 	ldw	r2,-20(fp)
    23ac:	100490fa 	slli	r2,r2,3
    23b0:	10bffd04 	addi	r2,r2,-12
    23b4:	1705883a 	add	r2,r2,fp
    23b8:	10e7fc17 	ldw	r3,-24592(r2)
    23bc:	e0bffb17 	ldw	r2,-20(fp)
    23c0:	100490fa 	slli	r2,r2,3
    23c4:	10bffd04 	addi	r2,r2,-12
    23c8:	1709883a 	add	r4,r2,fp
    23cc:	20a7fc17 	ldw	r2,-24592(r4)
    23d0:	1887ff32 	custom	252,r3,r3,r2
    23d4:	e0bffb17 	ldw	r2,-20(fp)
    23d8:	100490fa 	slli	r2,r2,3
    23dc:	10bffd04 	addi	r2,r2,-12
    23e0:	1705883a 	add	r2,r2,fp
    23e4:	1127fd17 	ldw	r4,-24588(r2)
    23e8:	e0bffb17 	ldw	r2,-20(fp)
    23ec:	100490fa 	slli	r2,r2,3
    23f0:	10bffd04 	addi	r2,r2,-12
    23f4:	170b883a 	add	r5,r2,fp
    23f8:	28a7fd17 	ldw	r2,-24588(r5)
    23fc:	2085ff32 	custom	252,r2,r4,r2
    2400:	1885ff72 	custom	253,r2,r3,r2
    2404:	1009883a 	mov	r4,r2
    2408:	0009bbc0 	call	9bbc <__extendsfdf2>
    240c:	100d883a 	mov	r6,r2
    2410:	180f883a 	mov	r7,r3
    2414:	3009883a 	mov	r4,r6
    2418:	380b883a 	mov	r5,r7
    241c:	00034900 	call	3490 <sqrt>
    2420:	1009883a 	mov	r4,r2
    2424:	180b883a 	mov	r5,r3
    2428:	e0bffb17 	ldw	r2,-20(fp)
    242c:	100490fa 	slli	r2,r2,3
    2430:	10bffd04 	addi	r2,r2,-12
    2434:	1705883a 	add	r2,r2,fp
    2438:	112ffc15 	stw	r4,-16400(r2)
    243c:	116ffd15 	stw	r5,-16396(r2)
        for (int i = 0; i < FFT_SIZE; i++) {
    2440:	e0bffb17 	ldw	r2,-20(fp)
    2444:	10800044 	addi	r2,r2,1
    2448:	e0bffb15 	stw	r2,-20(fp)
    244c:	e0bffb17 	ldw	r2,-20(fp)
    2450:	10810010 	cmplti	r2,r2,1024
    2454:	103fd41e 	bne	r2,zero,23a8 <calculate_mfcc+0xbc>
        }

        printf("cycle %d mfcc", frame_num + 1);
    2458:	e0bffc17 	ldw	r2,-16(fp)
    245c:	10800044 	addi	r2,r2,1
    2460:	100b883a 	mov	r5,r2
    2464:	01000074 	movhi	r4,1
    2468:	211eab04 	addi	r4,r4,31404
    246c:	000a7b80 	call	a7b8 <printf>

        // Calculate MFCCs for the current frame.
        for (int m = 0; m < NUM_MFCC; m++) {
    2470:	e03ffa15 	stw	zero,-24(fp)
    2474:	00001b06 	br	24e4 <calculate_mfcc+0x1f8>
            mfcc_buffer[frame_num * NUM_MFCC + m] = GetCoefficient(magnitude_spectrum, 8192, NUM_FILTERS, FFT_SIZE, m);
    2478:	e0bffa17 	ldw	r2,-24(fp)
    247c:	e0eff904 	addi	r3,fp,-16412
    2480:	d8800015 	stw	r2,0(sp)
    2484:	01c10004 	movi	r7,1024
    2488:	01800304 	movi	r6,12
    248c:	01480004 	movi	r5,8192
    2490:	1809883a 	mov	r4,r3
    2494:	00025300 	call	2530 <GetCoefficient>
    2498:	1021883a 	mov	r16,r2
    249c:	1823883a 	mov	r17,r3
    24a0:	01400344 	movi	r5,13
    24a4:	e13ffc17 	ldw	r4,-16(fp)
    24a8:	00071240 	call	7124 <__mulsi3>
    24ac:	1007883a 	mov	r3,r2
    24b0:	e0bffa17 	ldw	r2,-24(fp)
    24b4:	1885883a 	add	r2,r3,r2
    24b8:	100490ba 	slli	r2,r2,2
    24bc:	e0e7f617 	ldw	r3,-24616(fp)
    24c0:	18a5883a 	add	r18,r3,r2
    24c4:	8009883a 	mov	r4,r16
    24c8:	880b883a 	mov	r5,r17
    24cc:	0009cb80 	call	9cb8 <__truncdfsf2>
    24d0:	1007883a 	mov	r3,r2
    24d4:	90c00015 	stw	r3,0(r18)
        for (int m = 0; m < NUM_MFCC; m++) {
    24d8:	e0bffa17 	ldw	r2,-24(fp)
    24dc:	10800044 	addi	r2,r2,1
    24e0:	e0bffa15 	stw	r2,-24(fp)
    24e4:	e0bffa17 	ldw	r2,-24(fp)
    24e8:	10800350 	cmplti	r2,r2,13
    24ec:	103fe21e 	bne	r2,zero,2478 <calculate_mfcc+0x18c>
    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
    24f0:	e0bffc17 	ldw	r2,-16(fp)
    24f4:	10800044 	addi	r2,r2,1
    24f8:	e0bffc15 	stw	r2,-16(fp)
    24fc:	e0fffc17 	ldw	r3,-16(fp)
    2500:	e0bff917 	ldw	r2,-28(fp)
    2504:	18bf8c16 	blt	r3,r2,2338 <calculate_mfcc+0x4c>
        }
    }
}
    2508:	0001883a 	nop
    250c:	0001883a 	nop
    2510:	e6fffd04 	addi	sp,fp,-12
    2514:	dfc00417 	ldw	ra,16(sp)
    2518:	df000317 	ldw	fp,12(sp)
    251c:	dc800217 	ldw	r18,8(sp)
    2520:	dc400117 	ldw	r17,4(sp)
    2524:	dc000017 	ldw	r16,0(sp)
    2528:	dec00504 	addi	sp,sp,20
    252c:	f800283a 	ret

00002530 <GetCoefficient>:
 * binSize - the size of the spectralData array, usually a power of 2
 * m - The mth MFCC coefficient to compute
 *
 */
double GetCoefficient(double* spectralData, unsigned int samplingRate, unsigned int NumFilters, unsigned int binSize, unsigned int m)
{
    2530:	deffee04 	addi	sp,sp,-72
    2534:	dfc01115 	stw	ra,68(sp)
    2538:	df001015 	stw	fp,64(sp)
    253c:	dcc00f15 	stw	r19,60(sp)
    2540:	dc800e15 	stw	r18,56(sp)
    2544:	dc400d15 	stw	r17,52(sp)
    2548:	dc000c15 	stw	r16,48(sp)
    254c:	df001004 	addi	fp,sp,64
    2550:	e13ff315 	stw	r4,-52(fp)
    2554:	e17ff215 	stw	r5,-56(fp)
    2558:	e1bff115 	stw	r6,-60(fp)
    255c:	e1fff015 	stw	r7,-64(fp)
	double result = 0.0f;
    2560:	e03ff415 	stw	zero,-48(fp)
    2564:	e03ff515 	stw	zero,-44(fp)
	double outerSum = 0.0f;
    2568:	e03ffa15 	stw	zero,-24(fp)
    256c:	e03ffb15 	stw	zero,-20(fp)
	double innerSum = 0.0f;
    2570:	e03ff815 	stw	zero,-32(fp)
    2574:	e03ff915 	stw	zero,-28(fp)
	unsigned int k, l;

	// 0 <= m < L
	if(m >= NumFilters)
    2578:	e0c00217 	ldw	r3,8(fp)
    257c:	e0bff117 	ldw	r2,-60(fp)
    2580:	18800336 	bltu	r3,r2,2590 <GetCoefficient+0x60>
	{
		// This represents an error condition - the specified coefficient is greater than or equal to the number of filters. The behavior in this case is undefined.
		return 0.0f;
    2584:	0005883a 	mov	r2,zero
    2588:	0007883a 	mov	r3,zero
    258c:	00007f06 	br	278c <GetCoefficient+0x25c>
	}

	result = NormalizationFactor(NumFilters, m);
    2590:	e0bff117 	ldw	r2,-60(fp)
    2594:	e0c00217 	ldw	r3,8(fp)
    2598:	180b883a 	mov	r5,r3
    259c:	1009883a 	mov	r4,r2
    25a0:	00027c00 	call	27c0 <NormalizationFactor>
    25a4:	e0bff415 	stw	r2,-48(fp)
    25a8:	e0fff515 	stw	r3,-44(fp)

	for(l = 1; l <= NumFilters; l++)
    25ac:	00800044 	movi	r2,1
    25b0:	e0bff615 	stw	r2,-40(fp)
    25b4:	00006706 	br	2754 <GetCoefficient+0x224>
	{
		// Compute inner sum
		innerSum = 0.0f;
    25b8:	e03ff815 	stw	zero,-32(fp)
    25bc:	e03ff915 	stw	zero,-28(fp)
		for(k = 0; k < binSize - 1; k++)
    25c0:	e03ff715 	stw	zero,-36(fp)
    25c4:	00002606 	br	2660 <GetCoefficient+0x130>
		{
			innerSum += fabs(spectralData[k] * GetFilterParameter(samplingRate, binSize, k, l));
    25c8:	e0bff717 	ldw	r2,-36(fp)
    25cc:	100490fa 	slli	r2,r2,3
    25d0:	e0fff317 	ldw	r3,-52(fp)
    25d4:	1885883a 	add	r2,r3,r2
    25d8:	14000017 	ldw	r16,0(r2)
    25dc:	14400117 	ldw	r17,4(r2)
    25e0:	e1fff617 	ldw	r7,-40(fp)
    25e4:	e1bff717 	ldw	r6,-36(fp)
    25e8:	e17ff017 	ldw	r5,-64(fp)
    25ec:	e13ff217 	ldw	r4,-56(fp)
    25f0:	00028880 	call	2888 <GetFilterParameter>
    25f4:	1009883a 	mov	r4,r2
    25f8:	180b883a 	mov	r5,r3
    25fc:	200d883a 	mov	r6,r4
    2600:	280f883a 	mov	r7,r5
    2604:	8009883a 	mov	r4,r16
    2608:	880b883a 	mov	r5,r17
    260c:	00088e80 	call	88e8 <__muldf3>
    2610:	100d883a 	mov	r6,r2
    2614:	180f883a 	mov	r7,r3
    2618:	3009883a 	mov	r4,r6
    261c:	380b883a 	mov	r5,r7
    2620:	2025883a 	mov	r18,r4
    2624:	00a00034 	movhi	r2,32768
    2628:	10bfffc4 	addi	r2,r2,-1
    262c:	28a6703a 	and	r19,r5,r2
    2630:	900d883a 	mov	r6,r18
    2634:	980f883a 	mov	r7,r19
    2638:	e13ff817 	ldw	r4,-32(fp)
    263c:	e17ff917 	ldw	r5,-28(fp)
    2640:	00074940 	call	7494 <__adddf3>
    2644:	1009883a 	mov	r4,r2
    2648:	180b883a 	mov	r5,r3
    264c:	e13ff815 	stw	r4,-32(fp)
    2650:	e17ff915 	stw	r5,-28(fp)
		for(k = 0; k < binSize - 1; k++)
    2654:	e0bff717 	ldw	r2,-36(fp)
    2658:	10800044 	addi	r2,r2,1
    265c:	e0bff715 	stw	r2,-36(fp)
    2660:	e0bff017 	ldw	r2,-64(fp)
    2664:	10bfffc4 	addi	r2,r2,-1
    2668:	e0fff717 	ldw	r3,-36(fp)
    266c:	18bfd636 	bltu	r3,r2,25c8 <GetCoefficient+0x98>
		}

		if(innerSum > 0.0f)
    2670:	000d883a 	mov	r6,zero
    2674:	000f883a 	mov	r7,zero
    2678:	e13ff817 	ldw	r4,-32(fp)
    267c:	e17ff917 	ldw	r5,-28(fp)
    2680:	00087180 	call	8718 <__gedf2>
    2684:	0080050e 	bge	zero,r2,269c <GetCoefficient+0x16c>
		{
			innerSum = log(innerSum); // The log of 0 is undefined, so don't use it
    2688:	e13ff817 	ldw	r4,-32(fp)
    268c:	e17ff917 	ldw	r5,-28(fp)
    2690:	00031100 	call	3110 <log>
    2694:	e0bff815 	stw	r2,-32(fp)
    2698:	e0fff915 	stw	r3,-28(fp)
		}

		innerSum = innerSum * cos(((m * PI) / NumFilters) * (l - 0.5f));
    269c:	e1000217 	ldw	r4,8(fp)
    26a0:	00073980 	call	7398 <__floatunsisf>
    26a4:	1007883a 	mov	r3,r2
    26a8:	00901274 	movhi	r2,16457
    26ac:	1083f6c4 	addi	r2,r2,4059
    26b0:	18a1ff32 	custom	252,r16,r3,r2
    26b4:	e13ff117 	ldw	r4,-60(fp)
    26b8:	00073980 	call	7398 <__floatunsisf>
    26bc:	1007883a 	mov	r3,r2
    26c0:	80e1fff2 	custom	255,r16,r16,r3
    26c4:	e13ff617 	ldw	r4,-40(fp)
    26c8:	00073980 	call	7398 <__floatunsisf>
    26cc:	1007883a 	mov	r3,r2
    26d0:	008fc034 	movhi	r2,16128
    26d4:	1885ffb2 	custom	254,r2,r3,r2
    26d8:	8085ff32 	custom	252,r2,r16,r2
    26dc:	1009883a 	mov	r4,r2
    26e0:	0009bbc0 	call	9bbc <__extendsfdf2>
    26e4:	100d883a 	mov	r6,r2
    26e8:	180f883a 	mov	r7,r3
    26ec:	3009883a 	mov	r4,r6
    26f0:	380b883a 	mov	r5,r7
    26f4:	0002db80 	call	2db8 <cos>
    26f8:	1009883a 	mov	r4,r2
    26fc:	180b883a 	mov	r5,r3
    2700:	200d883a 	mov	r6,r4
    2704:	280f883a 	mov	r7,r5
    2708:	e13ff817 	ldw	r4,-32(fp)
    270c:	e17ff917 	ldw	r5,-28(fp)
    2710:	00088e80 	call	88e8 <__muldf3>
    2714:	1009883a 	mov	r4,r2
    2718:	180b883a 	mov	r5,r3
    271c:	e13ff815 	stw	r4,-32(fp)
    2720:	e17ff915 	stw	r5,-28(fp)


		outerSum += innerSum;
    2724:	e1bff817 	ldw	r6,-32(fp)
    2728:	e1fff917 	ldw	r7,-28(fp)
    272c:	e13ffa17 	ldw	r4,-24(fp)
    2730:	e17ffb17 	ldw	r5,-20(fp)
    2734:	00074940 	call	7494 <__adddf3>
    2738:	1009883a 	mov	r4,r2
    273c:	180b883a 	mov	r5,r3
    2740:	e13ffa15 	stw	r4,-24(fp)
    2744:	e17ffb15 	stw	r5,-20(fp)
	for(l = 1; l <= NumFilters; l++)
    2748:	e0bff617 	ldw	r2,-40(fp)
    274c:	10800044 	addi	r2,r2,1
    2750:	e0bff615 	stw	r2,-40(fp)
    2754:	e0bff617 	ldw	r2,-40(fp)
    2758:	e0fff117 	ldw	r3,-60(fp)
    275c:	18bf962e 	bgeu	r3,r2,25b8 <GetCoefficient+0x88>
	}

	result *= outerSum;
    2760:	e1bffa17 	ldw	r6,-24(fp)
    2764:	e1fffb17 	ldw	r7,-20(fp)
    2768:	e13ff417 	ldw	r4,-48(fp)
    276c:	e17ff517 	ldw	r5,-44(fp)
    2770:	00088e80 	call	88e8 <__muldf3>
    2774:	1009883a 	mov	r4,r2
    2778:	180b883a 	mov	r5,r3
    277c:	e13ff415 	stw	r4,-48(fp)
    2780:	e17ff515 	stw	r5,-44(fp)

	return result;
    2784:	e0bff417 	ldw	r2,-48(fp)
    2788:	e0fff517 	ldw	r3,-44(fp)
}
    278c:	1009883a 	mov	r4,r2
    2790:	180b883a 	mov	r5,r3
    2794:	2005883a 	mov	r2,r4
    2798:	2807883a 	mov	r3,r5
    279c:	e6fffc04 	addi	sp,fp,-16
    27a0:	dfc00517 	ldw	ra,20(sp)
    27a4:	df000417 	ldw	fp,16(sp)
    27a8:	dcc00317 	ldw	r19,12(sp)
    27ac:	dc800217 	ldw	r18,8(sp)
    27b0:	dc400117 	ldw	r17,4(sp)
    27b4:	dc000017 	ldw	r16,0(sp)
    27b8:	dec00604 	addi	sp,sp,24
    27bc:	f800283a 	ret

000027c0 <NormalizationFactor>:
/*
 * Computes the Normalization Factor (Equation 6)
 * Used for internal computation only - not to be called directly
 */
double NormalizationFactor(int NumFilters, int m)
{
    27c0:	defffa04 	addi	sp,sp,-24
    27c4:	dfc00515 	stw	ra,20(sp)
    27c8:	df000415 	stw	fp,16(sp)
    27cc:	df000404 	addi	fp,sp,16
    27d0:	e13ffd15 	stw	r4,-12(fp)
    27d4:	e17ffc15 	stw	r5,-16(fp)
	double normalizationFactor = 0.0f;
    27d8:	e03ffe15 	stw	zero,-8(fp)
    27dc:	e03fff15 	stw	zero,-4(fp)

	if(m == 0)
    27e0:	e0bffc17 	ldw	r2,-16(fp)
    27e4:	10000f1e 	bne	r2,zero,2824 <NormalizationFactor+0x64>
	{
		normalizationFactor = sqrt(1.0f / NumFilters);
    27e8:	e13ffd17 	ldw	r4,-12(fp)
    27ec:	00072740 	call	7274 <__floatsisf>
    27f0:	1007883a 	mov	r3,r2
    27f4:	008fe034 	movhi	r2,16256
    27f8:	10c5fff2 	custom	255,r2,r2,r3
    27fc:	1009883a 	mov	r4,r2
    2800:	0009bbc0 	call	9bbc <__extendsfdf2>
    2804:	100d883a 	mov	r6,r2
    2808:	180f883a 	mov	r7,r3
    280c:	3009883a 	mov	r4,r6
    2810:	380b883a 	mov	r5,r7
    2814:	00034900 	call	3490 <sqrt>
    2818:	e0bffe15 	stw	r2,-8(fp)
    281c:	e0ffff15 	stw	r3,-4(fp)
    2820:	00000e06 	br	285c <NormalizationFactor+0x9c>
	}
	else
	{
		normalizationFactor = sqrt(2.0f / NumFilters);
    2824:	e13ffd17 	ldw	r4,-12(fp)
    2828:	00072740 	call	7274 <__floatsisf>
    282c:	1007883a 	mov	r3,r2
    2830:	00900034 	movhi	r2,16384
    2834:	10c5fff2 	custom	255,r2,r2,r3
    2838:	1009883a 	mov	r4,r2
    283c:	0009bbc0 	call	9bbc <__extendsfdf2>
    2840:	100d883a 	mov	r6,r2
    2844:	180f883a 	mov	r7,r3
    2848:	3009883a 	mov	r4,r6
    284c:	380b883a 	mov	r5,r7
    2850:	00034900 	call	3490 <sqrt>
    2854:	e0bffe15 	stw	r2,-8(fp)
    2858:	e0ffff15 	stw	r3,-4(fp)
	}

	return normalizationFactor;
    285c:	e0bffe17 	ldw	r2,-8(fp)
    2860:	e0ffff17 	ldw	r3,-4(fp)
    2864:	1009883a 	mov	r4,r2
    2868:	180b883a 	mov	r5,r3
}
    286c:	2005883a 	mov	r2,r4
    2870:	2807883a 	mov	r3,r5
    2874:	e037883a 	mov	sp,fp
    2878:	dfc00117 	ldw	ra,4(sp)
    287c:	df000017 	ldw	fp,0(sp)
    2880:	dec00204 	addi	sp,sp,8
    2884:	f800283a 	ret

00002888 <GetFilterParameter>:
/*
 * Compute the filter parameter for the specified frequency and filter bands (Eq. 2)
 * Used for internal computation only - not the be called directly
 */
double GetFilterParameter(unsigned int samplingRate, unsigned int binSize, unsigned int frequencyBand, unsigned int filterBand)
{
    2888:	deffee04 	addi	sp,sp,-72
    288c:	dfc01115 	stw	ra,68(sp)
    2890:	df001015 	stw	fp,64(sp)
    2894:	dc400f15 	stw	r17,60(sp)
    2898:	dc000e15 	stw	r16,56(sp)
    289c:	df001004 	addi	fp,sp,64
    28a0:	e13ff315 	stw	r4,-52(fp)
    28a4:	e17ff215 	stw	r5,-56(fp)
    28a8:	e1bff115 	stw	r6,-60(fp)
    28ac:	e1fff015 	stw	r7,-64(fp)
	double filterParameter = 0.0f;
    28b0:	e03ffc15 	stw	zero,-16(fp)
    28b4:	e03ffd15 	stw	zero,-12(fp)

	double boundary = (frequencyBand * samplingRate) / binSize;		// k * Fs / N
    28b8:	e17ff317 	ldw	r5,-52(fp)
    28bc:	e13ff117 	ldw	r4,-60(fp)
    28c0:	00071240 	call	7124 <__mulsi3>
    28c4:	e17ff217 	ldw	r5,-56(fp)
    28c8:	1009883a 	mov	r4,r2
    28cc:	00070640 	call	7064 <__udivsi3>
    28d0:	1009883a 	mov	r4,r2
    28d4:	0009b2c0 	call	9b2c <__floatunsidf>
    28d8:	1009883a 	mov	r4,r2
    28dc:	180b883a 	mov	r5,r3
    28e0:	e13ffa15 	stw	r4,-24(fp)
    28e4:	e17ffb15 	stw	r5,-20(fp)
	double prevCenterFrequency = GetCenterFrequency(filterBand - 1);		// fc(l - 1) etc.
    28e8:	e0bff017 	ldw	r2,-64(fp)
    28ec:	10bfffc4 	addi	r2,r2,-1
    28f0:	1009883a 	mov	r4,r2
    28f4:	0002c9c0 	call	2c9c <GetCenterFrequency>
    28f8:	e0bff815 	stw	r2,-32(fp)
    28fc:	e0fff915 	stw	r3,-28(fp)
	double thisCenterFrequency = GetCenterFrequency(filterBand);
    2900:	e13ff017 	ldw	r4,-64(fp)
    2904:	0002c9c0 	call	2c9c <GetCenterFrequency>
    2908:	e0bff615 	stw	r2,-40(fp)
    290c:	e0fff715 	stw	r3,-36(fp)
	double nextCenterFrequency = GetCenterFrequency(filterBand + 1);
    2910:	e0bff017 	ldw	r2,-64(fp)
    2914:	10800044 	addi	r2,r2,1
    2918:	1009883a 	mov	r4,r2
    291c:	0002c9c0 	call	2c9c <GetCenterFrequency>
    2920:	e0bff415 	stw	r2,-48(fp)
    2924:	e0fff515 	stw	r3,-44(fp)

	if(boundary >= 0 && boundary < prevCenterFrequency)
    2928:	000d883a 	mov	r6,zero
    292c:	000f883a 	mov	r7,zero
    2930:	e13ffa17 	ldw	r4,-24(fp)
    2934:	e17ffb17 	ldw	r5,-20(fp)
    2938:	00087180 	call	8718 <__gedf2>
    293c:	10000916 	blt	r2,zero,2964 <GetFilterParameter+0xdc>
    2940:	e1bff817 	ldw	r6,-32(fp)
    2944:	e1fff917 	ldw	r7,-28(fp)
    2948:	e13ffa17 	ldw	r4,-24(fp)
    294c:	e17ffb17 	ldw	r5,-20(fp)
    2950:	00088000 	call	8800 <__ledf2>
    2954:	1000030e 	bge	r2,zero,2964 <GetFilterParameter+0xdc>
	{
		filterParameter = 0.0f;
    2958:	e03ffc15 	stw	zero,-16(fp)
    295c:	e03ffd15 	stw	zero,-12(fp)
    2960:	00007c06 	br	2b54 <GetFilterParameter+0x2cc>
	}
	else if(boundary >= prevCenterFrequency && boundary < thisCenterFrequency)
    2964:	e1bff817 	ldw	r6,-32(fp)
    2968:	e1fff917 	ldw	r7,-28(fp)
    296c:	e13ffa17 	ldw	r4,-24(fp)
    2970:	e17ffb17 	ldw	r5,-20(fp)
    2974:	00087180 	call	8718 <__gedf2>
    2978:	10002f16 	blt	r2,zero,2a38 <GetFilterParameter+0x1b0>
    297c:	e1bff617 	ldw	r6,-40(fp)
    2980:	e1fff717 	ldw	r7,-36(fp)
    2984:	e13ffa17 	ldw	r4,-24(fp)
    2988:	e17ffb17 	ldw	r5,-20(fp)
    298c:	00088000 	call	8800 <__ledf2>
    2990:	1000290e 	bge	r2,zero,2a38 <GetFilterParameter+0x1b0>
	{
		filterParameter = (boundary - prevCenterFrequency) / (thisCenterFrequency - prevCenterFrequency);
    2994:	e1bff817 	ldw	r6,-32(fp)
    2998:	e1fff917 	ldw	r7,-28(fp)
    299c:	e13ffa17 	ldw	r4,-24(fp)
    29a0:	e17ffb17 	ldw	r5,-20(fp)
    29a4:	00090940 	call	9094 <__subdf3>
    29a8:	1009883a 	mov	r4,r2
    29ac:	180b883a 	mov	r5,r3
    29b0:	2021883a 	mov	r16,r4
    29b4:	2823883a 	mov	r17,r5
    29b8:	e1bff817 	ldw	r6,-32(fp)
    29bc:	e1fff917 	ldw	r7,-28(fp)
    29c0:	e13ff617 	ldw	r4,-40(fp)
    29c4:	e17ff717 	ldw	r5,-36(fp)
    29c8:	00090940 	call	9094 <__subdf3>
    29cc:	1009883a 	mov	r4,r2
    29d0:	180b883a 	mov	r5,r3
    29d4:	2005883a 	mov	r2,r4
    29d8:	2807883a 	mov	r3,r5
    29dc:	100d883a 	mov	r6,r2
    29e0:	180f883a 	mov	r7,r3
    29e4:	8009883a 	mov	r4,r16
    29e8:	880b883a 	mov	r5,r17
    29ec:	0007d840 	call	7d84 <__divdf3>
    29f0:	1009883a 	mov	r4,r2
    29f4:	180b883a 	mov	r5,r3
    29f8:	e13ffc15 	stw	r4,-16(fp)
    29fc:	e17ffd15 	stw	r5,-12(fp)
		filterParameter *= GetMagnitudeFactor(filterBand);
    2a00:	e13ff017 	ldw	r4,-64(fp)
    2a04:	0002b880 	call	2b88 <GetMagnitudeFactor>
    2a08:	1009883a 	mov	r4,r2
    2a0c:	180b883a 	mov	r5,r3
    2a10:	200d883a 	mov	r6,r4
    2a14:	280f883a 	mov	r7,r5
    2a18:	e13ffc17 	ldw	r4,-16(fp)
    2a1c:	e17ffd17 	ldw	r5,-12(fp)
    2a20:	00088e80 	call	88e8 <__muldf3>
    2a24:	1009883a 	mov	r4,r2
    2a28:	180b883a 	mov	r5,r3
    2a2c:	e13ffc15 	stw	r4,-16(fp)
    2a30:	e17ffd15 	stw	r5,-12(fp)
    2a34:	00004706 	br	2b54 <GetFilterParameter+0x2cc>
	}
	else if(boundary >= thisCenterFrequency && boundary < nextCenterFrequency)
    2a38:	e1bff617 	ldw	r6,-40(fp)
    2a3c:	e1fff717 	ldw	r7,-36(fp)
    2a40:	e13ffa17 	ldw	r4,-24(fp)
    2a44:	e17ffb17 	ldw	r5,-20(fp)
    2a48:	00087180 	call	8718 <__gedf2>
    2a4c:	10002f16 	blt	r2,zero,2b0c <GetFilterParameter+0x284>
    2a50:	e1bff417 	ldw	r6,-48(fp)
    2a54:	e1fff517 	ldw	r7,-44(fp)
    2a58:	e13ffa17 	ldw	r4,-24(fp)
    2a5c:	e17ffb17 	ldw	r5,-20(fp)
    2a60:	00088000 	call	8800 <__ledf2>
    2a64:	1000290e 	bge	r2,zero,2b0c <GetFilterParameter+0x284>
	{
		filterParameter = (boundary - nextCenterFrequency) / (thisCenterFrequency - nextCenterFrequency);
    2a68:	e1bff417 	ldw	r6,-48(fp)
    2a6c:	e1fff517 	ldw	r7,-44(fp)
    2a70:	e13ffa17 	ldw	r4,-24(fp)
    2a74:	e17ffb17 	ldw	r5,-20(fp)
    2a78:	00090940 	call	9094 <__subdf3>
    2a7c:	1009883a 	mov	r4,r2
    2a80:	180b883a 	mov	r5,r3
    2a84:	2021883a 	mov	r16,r4
    2a88:	2823883a 	mov	r17,r5
    2a8c:	e1bff417 	ldw	r6,-48(fp)
    2a90:	e1fff517 	ldw	r7,-44(fp)
    2a94:	e13ff617 	ldw	r4,-40(fp)
    2a98:	e17ff717 	ldw	r5,-36(fp)
    2a9c:	00090940 	call	9094 <__subdf3>
    2aa0:	1009883a 	mov	r4,r2
    2aa4:	180b883a 	mov	r5,r3
    2aa8:	2005883a 	mov	r2,r4
    2aac:	2807883a 	mov	r3,r5
    2ab0:	100d883a 	mov	r6,r2
    2ab4:	180f883a 	mov	r7,r3
    2ab8:	8009883a 	mov	r4,r16
    2abc:	880b883a 	mov	r5,r17
    2ac0:	0007d840 	call	7d84 <__divdf3>
    2ac4:	1009883a 	mov	r4,r2
    2ac8:	180b883a 	mov	r5,r3
    2acc:	e13ffc15 	stw	r4,-16(fp)
    2ad0:	e17ffd15 	stw	r5,-12(fp)
		filterParameter *= GetMagnitudeFactor(filterBand);
    2ad4:	e13ff017 	ldw	r4,-64(fp)
    2ad8:	0002b880 	call	2b88 <GetMagnitudeFactor>
    2adc:	1009883a 	mov	r4,r2
    2ae0:	180b883a 	mov	r5,r3
    2ae4:	200d883a 	mov	r6,r4
    2ae8:	280f883a 	mov	r7,r5
    2aec:	e13ffc17 	ldw	r4,-16(fp)
    2af0:	e17ffd17 	ldw	r5,-12(fp)
    2af4:	00088e80 	call	88e8 <__muldf3>
    2af8:	1009883a 	mov	r4,r2
    2afc:	180b883a 	mov	r5,r3
    2b00:	e13ffc15 	stw	r4,-16(fp)
    2b04:	e17ffd15 	stw	r5,-12(fp)
    2b08:	00001206 	br	2b54 <GetFilterParameter+0x2cc>
	}
	else if(boundary >= nextCenterFrequency && boundary < samplingRate)
    2b0c:	e1bff417 	ldw	r6,-48(fp)
    2b10:	e1fff517 	ldw	r7,-44(fp)
    2b14:	e13ffa17 	ldw	r4,-24(fp)
    2b18:	e17ffb17 	ldw	r5,-20(fp)
    2b1c:	00087180 	call	8718 <__gedf2>
    2b20:	10000c16 	blt	r2,zero,2b54 <GetFilterParameter+0x2cc>
    2b24:	e13ff317 	ldw	r4,-52(fp)
    2b28:	0009b2c0 	call	9b2c <__floatunsidf>
    2b2c:	1009883a 	mov	r4,r2
    2b30:	180b883a 	mov	r5,r3
    2b34:	200d883a 	mov	r6,r4
    2b38:	280f883a 	mov	r7,r5
    2b3c:	e13ffa17 	ldw	r4,-24(fp)
    2b40:	e17ffb17 	ldw	r5,-20(fp)
    2b44:	00088000 	call	8800 <__ledf2>
    2b48:	1000020e 	bge	r2,zero,2b54 <GetFilterParameter+0x2cc>
	{
		filterParameter = 0.0f;
    2b4c:	e03ffc15 	stw	zero,-16(fp)
    2b50:	e03ffd15 	stw	zero,-12(fp)
	}

	return filterParameter;
    2b54:	e0bffc17 	ldw	r2,-16(fp)
    2b58:	e0fffd17 	ldw	r3,-12(fp)
    2b5c:	1009883a 	mov	r4,r2
    2b60:	180b883a 	mov	r5,r3
}
    2b64:	2005883a 	mov	r2,r4
    2b68:	2807883a 	mov	r3,r5
    2b6c:	e6fffe04 	addi	sp,fp,-8
    2b70:	dfc00317 	ldw	ra,12(sp)
    2b74:	df000217 	ldw	fp,8(sp)
    2b78:	dc400117 	ldw	r17,4(sp)
    2b7c:	dc000017 	ldw	r16,0(sp)
    2b80:	dec00404 	addi	sp,sp,16
    2b84:	f800283a 	ret

00002b88 <GetMagnitudeFactor>:
/*
 * Compute the band-dependent magnitude factor for the given filter band (Eq. 3)
 * Used for internal computation only - not the be called directly
 */
double GetMagnitudeFactor(unsigned int filterBand)
{
    2b88:	defff904 	addi	sp,sp,-28
    2b8c:	dfc00615 	stw	ra,24(sp)
    2b90:	df000515 	stw	fp,20(sp)
    2b94:	dc400415 	stw	r17,16(sp)
    2b98:	dc000315 	stw	r16,12(sp)
    2b9c:	df000504 	addi	fp,sp,20
    2ba0:	e13ffb15 	stw	r4,-20(fp)
	double magnitudeFactor = 0.0f;
    2ba4:	e03ffc15 	stw	zero,-16(fp)
    2ba8:	e03ffd15 	stw	zero,-12(fp)

	if(filterBand >= 1 && filterBand <= 14)
    2bac:	e0bffb17 	ldw	r2,-20(fp)
    2bb0:	10000926 	beq	r2,zero,2bd8 <GetMagnitudeFactor+0x50>
    2bb4:	e0bffb17 	ldw	r2,-20(fp)
    2bb8:	108003e8 	cmpgeui	r2,r2,15
    2bbc:	1000061e 	bne	r2,zero,2bd8 <GetMagnitudeFactor+0x50>
	{
		magnitudeFactor = 0.015;
    2bc0:	00b80034 	movhi	r2,57344
    2bc4:	e0bffc15 	stw	r2,-16(fp)
    2bc8:	008fe3f4 	movhi	r2,16271
    2bcc:	10ae1444 	addi	r2,r2,-18351
    2bd0:	e0bffd15 	stw	r2,-12(fp)
    2bd4:	00002406 	br	2c68 <GetMagnitudeFactor+0xe0>
	}
	else if(filterBand >= 15 && filterBand <= 48)
    2bd8:	e0bffb17 	ldw	r2,-20(fp)
    2bdc:	108003f0 	cmpltui	r2,r2,15
    2be0:	1000211e 	bne	r2,zero,2c68 <GetMagnitudeFactor+0xe0>
    2be4:	e0bffb17 	ldw	r2,-20(fp)
    2be8:	10800c68 	cmpgeui	r2,r2,49
    2bec:	10001e1e 	bne	r2,zero,2c68 <GetMagnitudeFactor+0xe0>
	{
		magnitudeFactor = 2.0f / (GetCenterFrequency(filterBand + 1) - GetCenterFrequency(filterBand -1));
    2bf0:	e0bffb17 	ldw	r2,-20(fp)
    2bf4:	10800044 	addi	r2,r2,1
    2bf8:	1009883a 	mov	r4,r2
    2bfc:	0002c9c0 	call	2c9c <GetCenterFrequency>
    2c00:	1021883a 	mov	r16,r2
    2c04:	1823883a 	mov	r17,r3
    2c08:	e0bffb17 	ldw	r2,-20(fp)
    2c0c:	10bfffc4 	addi	r2,r2,-1
    2c10:	1009883a 	mov	r4,r2
    2c14:	0002c9c0 	call	2c9c <GetCenterFrequency>
    2c18:	1009883a 	mov	r4,r2
    2c1c:	180b883a 	mov	r5,r3
    2c20:	200d883a 	mov	r6,r4
    2c24:	280f883a 	mov	r7,r5
    2c28:	8009883a 	mov	r4,r16
    2c2c:	880b883a 	mov	r5,r17
    2c30:	00090940 	call	9094 <__subdf3>
    2c34:	1009883a 	mov	r4,r2
    2c38:	180b883a 	mov	r5,r3
    2c3c:	2005883a 	mov	r2,r4
    2c40:	2807883a 	mov	r3,r5
    2c44:	100d883a 	mov	r6,r2
    2c48:	180f883a 	mov	r7,r3
    2c4c:	0009883a 	mov	r4,zero
    2c50:	01500034 	movhi	r5,16384
    2c54:	0007d840 	call	7d84 <__divdf3>
    2c58:	1009883a 	mov	r4,r2
    2c5c:	180b883a 	mov	r5,r3
    2c60:	e13ffc15 	stw	r4,-16(fp)
    2c64:	e17ffd15 	stw	r5,-12(fp)
	}

	return magnitudeFactor;
    2c68:	e0bffc17 	ldw	r2,-16(fp)
    2c6c:	e0fffd17 	ldw	r3,-12(fp)
    2c70:	1009883a 	mov	r4,r2
    2c74:	180b883a 	mov	r5,r3
}
    2c78:	2005883a 	mov	r2,r4
    2c7c:	2807883a 	mov	r3,r5
    2c80:	e6fffe04 	addi	sp,fp,-8
    2c84:	dfc00317 	ldw	ra,12(sp)
    2c88:	df000217 	ldw	fp,8(sp)
    2c8c:	dc400117 	ldw	r17,4(sp)
    2c90:	dc000017 	ldw	r16,0(sp)
    2c94:	dec00404 	addi	sp,sp,16
    2c98:	f800283a 	ret

00002c9c <GetCenterFrequency>:
 * This where the mel-frequency scaling occurs. Filters are specified so that their
 * center frequencies are equally spaced on the mel scale
 * Used for internal computation only - not the be called directly
 */
double GetCenterFrequency(unsigned int filterBand)
{
    2c9c:	defff904 	addi	sp,sp,-28
    2ca0:	dfc00615 	stw	ra,24(sp)
    2ca4:	df000515 	stw	fp,20(sp)
    2ca8:	df000504 	addi	fp,sp,20
    2cac:	e13ffb15 	stw	r4,-20(fp)
	double centerFrequency = 0.0f;
    2cb0:	e03ffe15 	stw	zero,-8(fp)
    2cb4:	e03fff15 	stw	zero,-4(fp)
	double exponent;

	if(filterBand == 0)
    2cb8:	e0bffb17 	ldw	r2,-20(fp)
    2cbc:	1000031e 	bne	r2,zero,2ccc <GetCenterFrequency+0x30>
	{
		centerFrequency = 0;
    2cc0:	e03ffe15 	stw	zero,-8(fp)
    2cc4:	e03fff15 	stw	zero,-4(fp)
    2cc8:	00003006 	br	2d8c <GetCenterFrequency+0xf0>
	}
	else if(filterBand >= 1 && filterBand <= 14)
    2ccc:	e0bffb17 	ldw	r2,-20(fp)
    2cd0:	10001126 	beq	r2,zero,2d18 <GetCenterFrequency+0x7c>
    2cd4:	e0bffb17 	ldw	r2,-20(fp)
    2cd8:	108003e8 	cmpgeui	r2,r2,15
    2cdc:	10000e1e 	bne	r2,zero,2d18 <GetCenterFrequency+0x7c>
	{
		centerFrequency = (200.0f * filterBand) / 3.0f;
    2ce0:	e13ffb17 	ldw	r4,-20(fp)
    2ce4:	00073980 	call	7398 <__floatunsisf>
    2ce8:	1007883a 	mov	r3,r2
    2cec:	0090d234 	movhi	r2,17224
    2cf0:	1887ff32 	custom	252,r3,r3,r2
    2cf4:	00901034 	movhi	r2,16448
    2cf8:	1885fff2 	custom	255,r2,r3,r2
    2cfc:	1009883a 	mov	r4,r2
    2d00:	0009bbc0 	call	9bbc <__extendsfdf2>
    2d04:	1009883a 	mov	r4,r2
    2d08:	180b883a 	mov	r5,r3
    2d0c:	e13ffe15 	stw	r4,-8(fp)
    2d10:	e17fff15 	stw	r5,-4(fp)
    2d14:	00001d06 	br	2d8c <GetCenterFrequency+0xf0>
	}
	else
	{
		exponent = filterBand - 14.0f;
    2d18:	e13ffb17 	ldw	r4,-20(fp)
    2d1c:	00073980 	call	7398 <__floatunsisf>
    2d20:	1007883a 	mov	r3,r2
    2d24:	00905834 	movhi	r2,16736
    2d28:	1885ffb2 	custom	254,r2,r3,r2
    2d2c:	1009883a 	mov	r4,r2
    2d30:	0009bbc0 	call	9bbc <__extendsfdf2>
    2d34:	1009883a 	mov	r4,r2
    2d38:	180b883a 	mov	r5,r3
    2d3c:	e13ffc15 	stw	r4,-16(fp)
    2d40:	e17ffd15 	stw	r5,-12(fp)
		centerFrequency = pow(1.0711703, exponent);
    2d44:	e1bffc17 	ldw	r6,-16(fp)
    2d48:	e1fffd17 	ldw	r7,-12(fp)
    2d4c:	01200034 	movhi	r4,32768
    2d50:	014ffc74 	movhi	r5,16369
    2d54:	2948e0c4 	addi	r5,r5,9091
    2d58:	00031d40 	call	31d4 <pow>
    2d5c:	e0bffe15 	stw	r2,-8(fp)
    2d60:	e0ffff15 	stw	r3,-4(fp)
		centerFrequency *= 1073.4;
    2d64:	01a80034 	movhi	r6,40960
    2d68:	01d02474 	movhi	r7,16529
    2d6c:	39f16644 	addi	r7,r7,-14951
    2d70:	e13ffe17 	ldw	r4,-8(fp)
    2d74:	e17fff17 	ldw	r5,-4(fp)
    2d78:	00088e80 	call	88e8 <__muldf3>
    2d7c:	1009883a 	mov	r4,r2
    2d80:	180b883a 	mov	r5,r3
    2d84:	e13ffe15 	stw	r4,-8(fp)
    2d88:	e17fff15 	stw	r5,-4(fp)
	}

	return centerFrequency;
    2d8c:	e0bffe17 	ldw	r2,-8(fp)
    2d90:	e0ffff17 	ldw	r3,-4(fp)
    2d94:	1009883a 	mov	r4,r2
    2d98:	180b883a 	mov	r5,r3
}
    2d9c:	2005883a 	mov	r2,r4
    2da0:	2807883a 	mov	r3,r5
    2da4:	e037883a 	mov	sp,fp
    2da8:	dfc00117 	ldw	ra,4(sp)
    2dac:	df000017 	ldw	fp,0(sp)
    2db0:	dec00204 	addi	sp,sp,8
    2db4:	f800283a 	ret

00002db8 <cos>:
    2db8:	00a00034 	movhi	r2,32768
    2dbc:	10bfffc4 	addi	r2,r2,-1
    2dc0:	00cffa74 	movhi	r3,16361
    2dc4:	2884703a 	and	r2,r5,r2
    2dc8:	18c87ec4 	addi	r3,r3,8699
    2dcc:	18801a0e 	bge	r3,r2,2e38 <cos+0x80>
    2dd0:	defffa04 	addi	sp,sp,-24
    2dd4:	dfc00515 	stw	ra,20(sp)
    2dd8:	00dffc34 	movhi	r3,32752
    2ddc:	10c00616 	blt	r2,r3,2df8 <cos+0x40>
    2de0:	280f883a 	mov	r7,r5
    2de4:	200d883a 	mov	r6,r4
    2de8:	00090940 	call	9094 <__subdf3>
    2dec:	dfc00517 	ldw	ra,20(sp)
    2df0:	dec00604 	addi	sp,sp,24
    2df4:	f800283a 	ret
    2df8:	d9800104 	addi	r6,sp,4
    2dfc:	0004cd00 	call	4cd0 <__ieee754_rem_pio2>
    2e00:	108000cc 	andi	r2,r2,3
    2e04:	10c00060 	cmpeqi	r3,r2,1
    2e08:	d9800317 	ldw	r6,12(sp)
    2e0c:	d9c00417 	ldw	r7,16(sp)
    2e10:	d9000117 	ldw	r4,4(sp)
    2e14:	d9400217 	ldw	r5,8(sp)
    2e18:	18000a1e 	bne	r3,zero,2e44 <cos+0x8c>
    2e1c:	10c000a0 	cmpeqi	r3,r2,2
    2e20:	18000e1e 	bne	r3,zero,2e5c <cos+0xa4>
    2e24:	10000b26 	beq	r2,zero,2e54 <cos+0x9c>
    2e28:	00800044 	movi	r2,1
    2e2c:	d8800015 	stw	r2,0(sp)
    2e30:	00068480 	call	6848 <__kernel_sin>
    2e34:	003fed06 	br	2dec <cos+0x34>
    2e38:	000d883a 	mov	r6,zero
    2e3c:	000f883a 	mov	r7,zero
    2e40:	00056881 	jmpi	5688 <__kernel_cos>
    2e44:	d8800015 	stw	r2,0(sp)
    2e48:	00068480 	call	6848 <__kernel_sin>
    2e4c:	18e0003c 	xorhi	r3,r3,32768
    2e50:	003fe606 	br	2dec <cos+0x34>
    2e54:	00056880 	call	5688 <__kernel_cos>
    2e58:	003fe406 	br	2dec <cos+0x34>
    2e5c:	00056880 	call	5688 <__kernel_cos>
    2e60:	18e0003c 	xorhi	r3,r3,32768
    2e64:	003fe106 	br	2dec <cos+0x34>

00002e68 <floor>:
    2e68:	280fd53a 	srai	r7,r5,20
    2e6c:	defffb04 	addi	sp,sp,-20
    2e70:	dc800215 	stw	r18,8(sp)
    2e74:	39c1ffcc 	andi	r7,r7,2047
    2e78:	3cbf0044 	addi	r18,r7,-1023
    2e7c:	dc400115 	stw	r17,4(sp)
    2e80:	dc000015 	stw	r16,0(sp)
    2e84:	dfc00415 	stw	ra,16(sp)
    2e88:	dcc00315 	stw	r19,12(sp)
    2e8c:	90800508 	cmpgei	r2,r18,20
    2e90:	2821883a 	mov	r16,r5
    2e94:	200d883a 	mov	r6,r4
    2e98:	2023883a 	mov	r17,r4
    2e9c:	10002b1e 	bne	r2,zero,2f4c <floor+0xe4>
    2ea0:	90001b16 	blt	r18,zero,2f10 <floor+0xa8>
    2ea4:	00800434 	movhi	r2,16
    2ea8:	10bfffc4 	addi	r2,r2,-1
    2eac:	14a7d83a 	sra	r19,r2,r18
    2eb0:	2cc4703a 	and	r2,r5,r19
    2eb4:	1104b03a 	or	r2,r2,r4
    2eb8:	10002826 	beq	r2,zero,2f5c <floor+0xf4>
    2ebc:	01a20034 	movhi	r6,34816
    2ec0:	01df8e34 	movhi	r7,32312
    2ec4:	319d6704 	addi	r6,r6,30108
    2ec8:	39f90f04 	addi	r7,r7,-7108
    2ecc:	00074940 	call	7494 <__adddf3>
    2ed0:	000d883a 	mov	r6,zero
    2ed4:	000f883a 	mov	r7,zero
    2ed8:	1009883a 	mov	r4,r2
    2edc:	180b883a 	mov	r5,r3
    2ee0:	00087180 	call	8718 <__gedf2>
    2ee4:	0080070e 	bge	zero,r2,2f04 <floor+0x9c>
    2ee8:	8000030e 	bge	r16,zero,2ef8 <floor+0x90>
    2eec:	00800434 	movhi	r2,16
    2ef0:	14a5d83a 	sra	r18,r2,r18
    2ef4:	9421883a 	add	r16,r18,r16
    2ef8:	04c4303a 	nor	r2,zero,r19
    2efc:	80a0703a 	and	r16,r16,r2
    2f00:	0023883a 	mov	r17,zero
    2f04:	8805883a 	mov	r2,r17
    2f08:	8007883a 	mov	r3,r16
    2f0c:	00001506 	br	2f64 <floor+0xfc>
    2f10:	01a20034 	movhi	r6,34816
    2f14:	01df8e34 	movhi	r7,32312
    2f18:	319d6704 	addi	r6,r6,30108
    2f1c:	39f90f04 	addi	r7,r7,-7108
    2f20:	00074940 	call	7494 <__adddf3>
    2f24:	000d883a 	mov	r6,zero
    2f28:	000f883a 	mov	r7,zero
    2f2c:	1009883a 	mov	r4,r2
    2f30:	180b883a 	mov	r5,r3
    2f34:	00087180 	call	8718 <__gedf2>
    2f38:	00bff20e 	bge	zero,r2,2f04 <floor+0x9c>
    2f3c:	80002a16 	blt	r16,zero,2fe8 <floor+0x180>
    2f40:	0023883a 	mov	r17,zero
    2f44:	0021883a 	mov	r16,zero
    2f48:	003fee06 	br	2f04 <floor+0x9c>
    2f4c:	90800d10 	cmplti	r2,r18,52
    2f50:	10000b1e 	bne	r2,zero,2f80 <floor+0x118>
    2f54:	94810018 	cmpnei	r18,r18,1024
    2f58:	90001d26 	beq	r18,zero,2fd0 <floor+0x168>
    2f5c:	3005883a 	mov	r2,r6
    2f60:	8007883a 	mov	r3,r16
    2f64:	dfc00417 	ldw	ra,16(sp)
    2f68:	dcc00317 	ldw	r19,12(sp)
    2f6c:	dc800217 	ldw	r18,8(sp)
    2f70:	dc400117 	ldw	r17,4(sp)
    2f74:	dc000017 	ldw	r16,0(sp)
    2f78:	dec00504 	addi	sp,sp,20
    2f7c:	f800283a 	ret
    2f80:	39fefb44 	addi	r7,r7,-1043
    2f84:	04ffffc4 	movi	r19,-1
    2f88:	99e6d83a 	srl	r19,r19,r7
    2f8c:	9904703a 	and	r2,r19,r4
    2f90:	10001226 	beq	r2,zero,2fdc <floor+0x174>
    2f94:	01a20034 	movhi	r6,34816
    2f98:	01df8e34 	movhi	r7,32312
    2f9c:	319d6704 	addi	r6,r6,30108
    2fa0:	39f90f04 	addi	r7,r7,-7108
    2fa4:	00074940 	call	7494 <__adddf3>
    2fa8:	000d883a 	mov	r6,zero
    2fac:	000f883a 	mov	r7,zero
    2fb0:	1009883a 	mov	r4,r2
    2fb4:	180b883a 	mov	r5,r3
    2fb8:	00087180 	call	8718 <__gedf2>
    2fbc:	00bfd10e 	bge	zero,r2,2f04 <floor+0x9c>
    2fc0:	80001116 	blt	r16,zero,3008 <floor+0x1a0>
    2fc4:	04ce303a 	nor	r7,zero,r19
    2fc8:	89e2703a 	and	r17,r17,r7
    2fcc:	003fcd06 	br	2f04 <floor+0x9c>
    2fd0:	280f883a 	mov	r7,r5
    2fd4:	00074940 	call	7494 <__adddf3>
    2fd8:	003fe206 	br	2f64 <floor+0xfc>
    2fdc:	2807883a 	mov	r3,r5
    2fe0:	2005883a 	mov	r2,r4
    2fe4:	003fdf06 	br	2f64 <floor+0xfc>
    2fe8:	00a00034 	movhi	r2,32768
    2fec:	10bfffc4 	addi	r2,r2,-1
    2ff0:	8084703a 	and	r2,r16,r2
    2ff4:	1462b03a 	or	r17,r2,r17
    2ff8:	88000e26 	beq	r17,zero,3034 <floor+0x1cc>
    2ffc:	0023883a 	mov	r17,zero
    3000:	042ffc34 	movhi	r16,49136
    3004:	003fbf06 	br	2f04 <floor+0x9c>
    3008:	90800518 	cmpnei	r2,r18,20
    300c:	10000b26 	beq	r2,zero,303c <floor+0x1d4>
    3010:	00800d04 	movi	r2,52
    3014:	14a5c83a 	sub	r18,r2,r18
    3018:	00800044 	movi	r2,1
    301c:	1484983a 	sll	r2,r2,r18
    3020:	1445883a 	add	r2,r2,r17
    3024:	1440072e 	bgeu	r2,r17,3044 <floor+0x1dc>
    3028:	84000044 	addi	r16,r16,1
    302c:	1023883a 	mov	r17,r2
    3030:	003fe406 	br	2fc4 <floor+0x15c>
    3034:	0023883a 	mov	r17,zero
    3038:	003fb206 	br	2f04 <floor+0x9c>
    303c:	84000044 	addi	r16,r16,1
    3040:	003fe006 	br	2fc4 <floor+0x15c>
    3044:	1023883a 	mov	r17,r2
    3048:	003fde06 	br	2fc4 <floor+0x15c>

0000304c <sin>:
    304c:	00a00034 	movhi	r2,32768
    3050:	defffa04 	addi	sp,sp,-24
    3054:	10bfffc4 	addi	r2,r2,-1
    3058:	00cffa74 	movhi	r3,16361
    305c:	dfc00515 	stw	ra,20(sp)
    3060:	2884703a 	and	r2,r5,r2
    3064:	18c87ec4 	addi	r3,r3,8699
    3068:	1880170e 	bge	r3,r2,30c8 <sin+0x7c>
    306c:	00dffc34 	movhi	r3,32752
    3070:	10c00616 	blt	r2,r3,308c <sin+0x40>
    3074:	280f883a 	mov	r7,r5
    3078:	200d883a 	mov	r6,r4
    307c:	00090940 	call	9094 <__subdf3>
    3080:	dfc00517 	ldw	ra,20(sp)
    3084:	dec00604 	addi	sp,sp,24
    3088:	f800283a 	ret
    308c:	d9800104 	addi	r6,sp,4
    3090:	0004cd00 	call	4cd0 <__ieee754_rem_pio2>
    3094:	108000cc 	andi	r2,r2,3
    3098:	10c00060 	cmpeqi	r3,r2,1
    309c:	d9800317 	ldw	r6,12(sp)
    30a0:	d9c00417 	ldw	r7,16(sp)
    30a4:	d9000117 	ldw	r4,4(sp)
    30a8:	d9400217 	ldw	r5,8(sp)
    30ac:	18000d1e 	bne	r3,zero,30e4 <sin+0x98>
    30b0:	10c000a0 	cmpeqi	r3,r2,2
    30b4:	1800111e 	bne	r3,zero,30fc <sin+0xb0>
    30b8:	10000c26 	beq	r2,zero,30ec <sin+0xa0>
    30bc:	00056880 	call	5688 <__kernel_cos>
    30c0:	18e0003c 	xorhi	r3,r3,32768
    30c4:	003fee06 	br	3080 <sin+0x34>
    30c8:	d8000015 	stw	zero,0(sp)
    30cc:	000d883a 	mov	r6,zero
    30d0:	000f883a 	mov	r7,zero
    30d4:	00068480 	call	6848 <__kernel_sin>
    30d8:	dfc00517 	ldw	ra,20(sp)
    30dc:	dec00604 	addi	sp,sp,24
    30e0:	f800283a 	ret
    30e4:	00056880 	call	5688 <__kernel_cos>
    30e8:	003fe506 	br	3080 <sin+0x34>
    30ec:	00800044 	movi	r2,1
    30f0:	d8800015 	stw	r2,0(sp)
    30f4:	00068480 	call	6848 <__kernel_sin>
    30f8:	003fe106 	br	3080 <sin+0x34>
    30fc:	00800044 	movi	r2,1
    3100:	d8800015 	stw	r2,0(sp)
    3104:	00068480 	call	6848 <__kernel_sin>
    3108:	18e0003c 	xorhi	r3,r3,32768
    310c:	003fdc06 	br	3080 <sin+0x34>

00003110 <log>:
    3110:	defffb04 	addi	sp,sp,-20
    3114:	dcc00315 	stw	r19,12(sp)
    3118:	dc800215 	stw	r18,8(sp)
    311c:	dc400115 	stw	r17,4(sp)
    3120:	dc000015 	stw	r16,0(sp)
    3124:	2023883a 	mov	r17,r4
    3128:	2821883a 	mov	r16,r5
    312c:	dfc00415 	stw	ra,16(sp)
    3130:	000353c0 	call	353c <__ieee754_log>
    3134:	880d883a 	mov	r6,r17
    3138:	800f883a 	mov	r7,r16
    313c:	8809883a 	mov	r4,r17
    3140:	800b883a 	mov	r5,r16
    3144:	1027883a 	mov	r19,r2
    3148:	1825883a 	mov	r18,r3
    314c:	00099a00 	call	99a0 <__unorddf2>
    3150:	1000111e 	bne	r2,zero,3198 <log+0x88>
    3154:	000d883a 	mov	r6,zero
    3158:	000f883a 	mov	r7,zero
    315c:	8809883a 	mov	r4,r17
    3160:	800b883a 	mov	r5,r16
    3164:	00087180 	call	8718 <__gedf2>
    3168:	00800b16 	blt	zero,r2,3198 <log+0x88>
    316c:	000d883a 	mov	r6,zero
    3170:	000f883a 	mov	r7,zero
    3174:	8809883a 	mov	r4,r17
    3178:	800b883a 	mov	r5,r16
    317c:	00086980 	call	8698 <__eqdf2>
    3180:	10000e1e 	bne	r2,zero,31bc <log+0xac>
    3184:	0009e7c0 	call	9e7c <__errno>
    3188:	00c00884 	movi	r3,34
    318c:	10c00015 	stw	r3,0(r2)
    3190:	0027883a 	mov	r19,zero
    3194:	04bffc34 	movhi	r18,65520
    3198:	9805883a 	mov	r2,r19
    319c:	9007883a 	mov	r3,r18
    31a0:	dfc00417 	ldw	ra,16(sp)
    31a4:	dcc00317 	ldw	r19,12(sp)
    31a8:	dc800217 	ldw	r18,8(sp)
    31ac:	dc400117 	ldw	r17,4(sp)
    31b0:	dc000017 	ldw	r16,0(sp)
    31b4:	dec00504 	addi	sp,sp,20
    31b8:	f800283a 	ret
    31bc:	0009e7c0 	call	9e7c <__errno>
    31c0:	00c00844 	movi	r3,33
    31c4:	10c00015 	stw	r3,0(r2)
    31c8:	0027883a 	mov	r19,zero
    31cc:	049ffe34 	movhi	r18,32760
    31d0:	003ff106 	br	3198 <log+0x88>

000031d4 <pow>:
    31d4:	defff704 	addi	sp,sp,-36
    31d8:	dd800615 	stw	r22,24(sp)
    31dc:	dd000415 	stw	r20,16(sp)
    31e0:	dcc00315 	stw	r19,12(sp)
    31e4:	dc800215 	stw	r18,8(sp)
    31e8:	dc400115 	stw	r17,4(sp)
    31ec:	dc000015 	stw	r16,0(sp)
    31f0:	3823883a 	mov	r17,r7
    31f4:	3021883a 	mov	r16,r6
    31f8:	dfc00815 	stw	ra,32(sp)
    31fc:	ddc00715 	stw	r23,28(sp)
    3200:	dd400515 	stw	r21,20(sp)
    3204:	202d883a 	mov	r22,r4
    3208:	2825883a 	mov	r18,r5
    320c:	0003bc80 	call	3bc8 <__ieee754_pow>
    3210:	800d883a 	mov	r6,r16
    3214:	880f883a 	mov	r7,r17
    3218:	8009883a 	mov	r4,r16
    321c:	880b883a 	mov	r5,r17
    3220:	1027883a 	mov	r19,r2
    3224:	1829883a 	mov	r20,r3
    3228:	00099a00 	call	99a0 <__unorddf2>
    322c:	10005d1e 	bne	r2,zero,33a4 <pow+0x1d0>
    3230:	000d883a 	mov	r6,zero
    3234:	000f883a 	mov	r7,zero
    3238:	b009883a 	mov	r4,r22
    323c:	900b883a 	mov	r5,r18
    3240:	00086980 	call	8698 <__eqdf2>
    3244:	10006426 	beq	r2,zero,33d8 <pow+0x204>
    3248:	01600034 	movhi	r5,32768
    324c:	297fffc4 	addi	r5,r5,-1
    3250:	a16a703a 	and	r21,r20,r5
    3254:	01dffc34 	movhi	r7,32752
    3258:	01bfffc4 	movi	r6,-1
    325c:	39ffffc4 	addi	r7,r7,-1
    3260:	9809883a 	mov	r4,r19
    3264:	a80b883a 	mov	r5,r21
    3268:	00099a00 	call	99a0 <__unorddf2>
    326c:	1000071e 	bne	r2,zero,328c <pow+0xb8>
    3270:	01dffc34 	movhi	r7,32752
    3274:	01bfffc4 	movi	r6,-1
    3278:	39ffffc4 	addi	r7,r7,-1
    327c:	9809883a 	mov	r4,r19
    3280:	a80b883a 	mov	r5,r21
    3284:	00087180 	call	8718 <__gedf2>
    3288:	0080200e 	bge	zero,r2,330c <pow+0x138>
    328c:	05600034 	movhi	r21,32768
    3290:	ad7fffc4 	addi	r21,r21,-1
    3294:	956e703a 	and	r23,r18,r21
    3298:	01dffc34 	movhi	r7,32752
    329c:	01bfffc4 	movi	r6,-1
    32a0:	39ffffc4 	addi	r7,r7,-1
    32a4:	b009883a 	mov	r4,r22
    32a8:	b80b883a 	mov	r5,r23
    32ac:	00099a00 	call	99a0 <__unorddf2>
    32b0:	10003c1e 	bne	r2,zero,33a4 <pow+0x1d0>
    32b4:	01dffc34 	movhi	r7,32752
    32b8:	01bfffc4 	movi	r6,-1
    32bc:	39ffffc4 	addi	r7,r7,-1
    32c0:	b009883a 	mov	r4,r22
    32c4:	b80b883a 	mov	r5,r23
    32c8:	00087180 	call	8718 <__gedf2>
    32cc:	00803516 	blt	zero,r2,33a4 <pow+0x1d0>
    32d0:	8d6a703a 	and	r21,r17,r21
    32d4:	01dffc34 	movhi	r7,32752
    32d8:	01bfffc4 	movi	r6,-1
    32dc:	39ffffc4 	addi	r7,r7,-1
    32e0:	8009883a 	mov	r4,r16
    32e4:	a80b883a 	mov	r5,r21
    32e8:	00099a00 	call	99a0 <__unorddf2>
    32ec:	1000071e 	bne	r2,zero,330c <pow+0x138>
    32f0:	01dffc34 	movhi	r7,32752
    32f4:	01bfffc4 	movi	r6,-1
    32f8:	39ffffc4 	addi	r7,r7,-1
    32fc:	8009883a 	mov	r4,r16
    3300:	a80b883a 	mov	r5,r21
    3304:	00087180 	call	8718 <__gedf2>
    3308:	0080570e 	bge	zero,r2,3468 <pow+0x294>
    330c:	000d883a 	mov	r6,zero
    3310:	000f883a 	mov	r7,zero
    3314:	9809883a 	mov	r4,r19
    3318:	a00b883a 	mov	r5,r20
    331c:	00086980 	call	8698 <__eqdf2>
    3320:	1000201e 	bne	r2,zero,33a4 <pow+0x1d0>
    3324:	05600034 	movhi	r21,32768
    3328:	ad7fffc4 	addi	r21,r21,-1
    332c:	9564703a 	and	r18,r18,r21
    3330:	01dffc34 	movhi	r7,32752
    3334:	01bfffc4 	movi	r6,-1
    3338:	39ffffc4 	addi	r7,r7,-1
    333c:	b009883a 	mov	r4,r22
    3340:	900b883a 	mov	r5,r18
    3344:	00099a00 	call	99a0 <__unorddf2>
    3348:	1000161e 	bne	r2,zero,33a4 <pow+0x1d0>
    334c:	01dffc34 	movhi	r7,32752
    3350:	01bfffc4 	movi	r6,-1
    3354:	39ffffc4 	addi	r7,r7,-1
    3358:	b009883a 	mov	r4,r22
    335c:	900b883a 	mov	r5,r18
    3360:	00087180 	call	8718 <__gedf2>
    3364:	00800f16 	blt	zero,r2,33a4 <pow+0x1d0>
    3368:	8d62703a 	and	r17,r17,r21
    336c:	01dffc34 	movhi	r7,32752
    3370:	01bfffc4 	movi	r6,-1
    3374:	39ffffc4 	addi	r7,r7,-1
    3378:	8009883a 	mov	r4,r16
    337c:	880b883a 	mov	r5,r17
    3380:	00099a00 	call	99a0 <__unorddf2>
    3384:	1000071e 	bne	r2,zero,33a4 <pow+0x1d0>
    3388:	01dffc34 	movhi	r7,32752
    338c:	01bfffc4 	movi	r6,-1
    3390:	39ffffc4 	addi	r7,r7,-1
    3394:	8009883a 	mov	r4,r16
    3398:	880b883a 	mov	r5,r17
    339c:	00087180 	call	8718 <__gedf2>
    33a0:	00802a0e 	bge	zero,r2,344c <pow+0x278>
    33a4:	9805883a 	mov	r2,r19
    33a8:	a007883a 	mov	r3,r20
    33ac:	dfc00817 	ldw	ra,32(sp)
    33b0:	ddc00717 	ldw	r23,28(sp)
    33b4:	dd800617 	ldw	r22,24(sp)
    33b8:	dd400517 	ldw	r21,20(sp)
    33bc:	dd000417 	ldw	r20,16(sp)
    33c0:	dcc00317 	ldw	r19,12(sp)
    33c4:	dc800217 	ldw	r18,8(sp)
    33c8:	dc400117 	ldw	r17,4(sp)
    33cc:	dc000017 	ldw	r16,0(sp)
    33d0:	dec00904 	addi	sp,sp,36
    33d4:	f800283a 	ret
    33d8:	000d883a 	mov	r6,zero
    33dc:	000f883a 	mov	r7,zero
    33e0:	8009883a 	mov	r4,r16
    33e4:	880b883a 	mov	r5,r17
    33e8:	00086980 	call	8698 <__eqdf2>
    33ec:	10001b26 	beq	r2,zero,345c <pow+0x288>
    33f0:	01600034 	movhi	r5,32768
    33f4:	297fffc4 	addi	r5,r5,-1
    33f8:	8964703a 	and	r18,r17,r5
    33fc:	01dffc34 	movhi	r7,32752
    3400:	01bfffc4 	movi	r6,-1
    3404:	39ffffc4 	addi	r7,r7,-1
    3408:	8009883a 	mov	r4,r16
    340c:	900b883a 	mov	r5,r18
    3410:	00099a00 	call	99a0 <__unorddf2>
    3414:	103fe31e 	bne	r2,zero,33a4 <pow+0x1d0>
    3418:	01dffc34 	movhi	r7,32752
    341c:	01bfffc4 	movi	r6,-1
    3420:	39ffffc4 	addi	r7,r7,-1
    3424:	8009883a 	mov	r4,r16
    3428:	900b883a 	mov	r5,r18
    342c:	00087180 	call	8718 <__gedf2>
    3430:	00bfdc16 	blt	zero,r2,33a4 <pow+0x1d0>
    3434:	000d883a 	mov	r6,zero
    3438:	000f883a 	mov	r7,zero
    343c:	8009883a 	mov	r4,r16
    3440:	880b883a 	mov	r5,r17
    3444:	00088000 	call	8800 <__ledf2>
    3448:	103fd60e 	bge	r2,zero,33a4 <pow+0x1d0>
    344c:	0009e7c0 	call	9e7c <__errno>
    3450:	00c00884 	movi	r3,34
    3454:	10c00015 	stw	r3,0(r2)
    3458:	003fd206 	br	33a4 <pow+0x1d0>
    345c:	0027883a 	mov	r19,zero
    3460:	050ffc34 	movhi	r20,16368
    3464:	003fcf06 	br	33a4 <pow+0x1d0>
    3468:	980d883a 	mov	r6,r19
    346c:	a00f883a 	mov	r7,r20
    3470:	9809883a 	mov	r4,r19
    3474:	a00b883a 	mov	r5,r20
    3478:	00099a00 	call	99a0 <__unorddf2>
    347c:	103ff326 	beq	r2,zero,344c <pow+0x278>
    3480:	0009e7c0 	call	9e7c <__errno>
    3484:	00c00844 	movi	r3,33
    3488:	10c00015 	stw	r3,0(r2)
    348c:	003fc506 	br	33a4 <pow+0x1d0>

00003490 <sqrt>:
    3490:	defffb04 	addi	sp,sp,-20
    3494:	dcc00315 	stw	r19,12(sp)
    3498:	dc800215 	stw	r18,8(sp)
    349c:	dc400115 	stw	r17,4(sp)
    34a0:	dc000015 	stw	r16,0(sp)
    34a4:	2023883a 	mov	r17,r4
    34a8:	2821883a 	mov	r16,r5
    34ac:	dfc00415 	stw	ra,16(sp)
    34b0:	000541c0 	call	541c <__ieee754_sqrt>
    34b4:	880d883a 	mov	r6,r17
    34b8:	800f883a 	mov	r7,r16
    34bc:	8809883a 	mov	r4,r17
    34c0:	800b883a 	mov	r5,r16
    34c4:	1027883a 	mov	r19,r2
    34c8:	1825883a 	mov	r18,r3
    34cc:	00099a00 	call	99a0 <__unorddf2>
    34d0:	1000061e 	bne	r2,zero,34ec <sqrt+0x5c>
    34d4:	000d883a 	mov	r6,zero
    34d8:	000f883a 	mov	r7,zero
    34dc:	8809883a 	mov	r4,r17
    34e0:	800b883a 	mov	r5,r16
    34e4:	00088000 	call	8800 <__ledf2>
    34e8:	10000916 	blt	r2,zero,3510 <sqrt+0x80>
    34ec:	9805883a 	mov	r2,r19
    34f0:	9007883a 	mov	r3,r18
    34f4:	dfc00417 	ldw	ra,16(sp)
    34f8:	dcc00317 	ldw	r19,12(sp)
    34fc:	dc800217 	ldw	r18,8(sp)
    3500:	dc400117 	ldw	r17,4(sp)
    3504:	dc000017 	ldw	r16,0(sp)
    3508:	dec00504 	addi	sp,sp,20
    350c:	f800283a 	ret
    3510:	0009e7c0 	call	9e7c <__errno>
    3514:	00c00844 	movi	r3,33
    3518:	10c00015 	stw	r3,0(r2)
    351c:	000d883a 	mov	r6,zero
    3520:	000f883a 	mov	r7,zero
    3524:	0009883a 	mov	r4,zero
    3528:	000b883a 	mov	r5,zero
    352c:	0007d840 	call	7d84 <__divdf3>
    3530:	1027883a 	mov	r19,r2
    3534:	1825883a 	mov	r18,r3
    3538:	003fec06 	br	34ec <sqrt+0x5c>

0000353c <__ieee754_log>:
    353c:	defff204 	addi	sp,sp,-56
    3540:	dfc00d15 	stw	ra,52(sp)
    3544:	df000c15 	stw	fp,48(sp)
    3548:	ddc00b15 	stw	r23,44(sp)
    354c:	dd800a15 	stw	r22,40(sp)
    3550:	dd400915 	stw	r21,36(sp)
    3554:	dd000815 	stw	r20,32(sp)
    3558:	dcc00715 	stw	r19,28(sp)
    355c:	dc800615 	stw	r18,24(sp)
    3560:	dc400515 	stw	r17,20(sp)
    3564:	dc000415 	stw	r16,16(sp)
    3568:	01800434 	movhi	r6,16
    356c:	2005883a 	mov	r2,r4
    3570:	280f883a 	mov	r7,r5
    3574:	2980690e 	bge	r5,r6,371c <__ieee754_log+0x1e0>
    3578:	00e00034 	movhi	r3,32768
    357c:	18ffffc4 	addi	r3,r3,-1
    3580:	28c6703a 	and	r3,r5,r3
    3584:	1906b03a 	or	r3,r3,r4
    3588:	18011d26 	beq	r3,zero,3a00 <__ieee754_log+0x4c4>
    358c:	28015c16 	blt	r5,zero,3b00 <__ieee754_log+0x5c4>
    3590:	000d883a 	mov	r6,zero
    3594:	01d0d434 	movhi	r7,17232
    3598:	00088e80 	call	88e8 <__muldf3>
    359c:	011ffc34 	movhi	r4,32752
    35a0:	180f883a 	mov	r7,r3
    35a4:	01bff284 	movi	r6,-54
    35a8:	1900600e 	bge	r3,r4,372c <__ieee754_log+0x1f0>
    35ac:	04000434 	movhi	r16,16
    35b0:	843fffc4 	addi	r16,r16,-1
    35b4:	01400274 	movhi	r5,9
    35b8:	1c24703a 	and	r18,r3,r16
    35bc:	2957d904 	addi	r5,r5,24420
    35c0:	1807d53a 	srai	r3,r3,20
    35c4:	914b883a 	add	r5,r18,r5
    35c8:	2940042c 	andhi	r5,r5,16
    35cc:	2827d53a 	srai	r19,r5,20
    35d0:	18ff0044 	addi	r3,r3,-1023
    35d4:	294ffc3c 	xorhi	r5,r5,16368
    35d8:	1987883a 	add	r3,r3,r6
    35dc:	2c8ab03a 	or	r5,r5,r18
    35e0:	000d883a 	mov	r6,zero
    35e4:	01cffc34 	movhi	r7,16368
    35e8:	1009883a 	mov	r4,r2
    35ec:	98e7883a 	add	r19,r19,r3
    35f0:	00090940 	call	9094 <__subdf3>
    35f4:	91400084 	addi	r5,r18,2
    35f8:	2c0a703a 	and	r5,r5,r16
    35fc:	294000c8 	cmpgei	r5,r5,3
    3600:	000d883a 	mov	r6,zero
    3604:	1023883a 	mov	r17,r2
    3608:	1821883a 	mov	r16,r3
    360c:	2800571e 	bne	r5,zero,376c <__ieee754_log+0x230>
    3610:	000f883a 	mov	r7,zero
    3614:	1009883a 	mov	r4,r2
    3618:	180b883a 	mov	r5,r3
    361c:	00086980 	call	8698 <__eqdf2>
    3620:	1000fd26 	beq	r2,zero,3a18 <__ieee754_log+0x4dc>
    3624:	01955574 	movhi	r6,21845
    3628:	01cff574 	movhi	r7,16341
    362c:	8809883a 	mov	r4,r17
    3630:	800b883a 	mov	r5,r16
    3634:	31955544 	addi	r6,r6,21845
    3638:	39d55544 	addi	r7,r7,21845
    363c:	00088e80 	call	88e8 <__muldf3>
    3640:	100d883a 	mov	r6,r2
    3644:	180f883a 	mov	r7,r3
    3648:	0009883a 	mov	r4,zero
    364c:	014ff834 	movhi	r5,16352
    3650:	00090940 	call	9094 <__subdf3>
    3654:	880d883a 	mov	r6,r17
    3658:	800f883a 	mov	r7,r16
    365c:	8809883a 	mov	r4,r17
    3660:	800b883a 	mov	r5,r16
    3664:	1029883a 	mov	r20,r2
    3668:	1825883a 	mov	r18,r3
    366c:	00088e80 	call	88e8 <__muldf3>
    3670:	a009883a 	mov	r4,r20
    3674:	900b883a 	mov	r5,r18
    3678:	100d883a 	mov	r6,r2
    367c:	180f883a 	mov	r7,r3
    3680:	00088e80 	call	88e8 <__muldf3>
    3684:	1029883a 	mov	r20,r2
    3688:	1825883a 	mov	r18,r3
    368c:	98011626 	beq	r19,zero,3ae8 <__ieee754_log+0x5ac>
    3690:	9809883a 	mov	r4,r19
    3694:	0009a740 	call	9a74 <__floatsidf>
    3698:	01cff9b4 	movhi	r7,16358
    369c:	01bfb834 	movhi	r6,65248
    36a0:	39cb9084 	addi	r7,r7,11842
    36a4:	1009883a 	mov	r4,r2
    36a8:	180b883a 	mov	r5,r3
    36ac:	102b883a 	mov	r21,r2
    36b0:	1827883a 	mov	r19,r3
    36b4:	00088e80 	call	88e8 <__muldf3>
    36b8:	018d5e74 	movhi	r6,13689
    36bc:	01cf7ab4 	movhi	r7,15850
    36c0:	318f1d84 	addi	r6,r6,15478
    36c4:	39ce7bc4 	addi	r7,r7,14831
    36c8:	a809883a 	mov	r4,r21
    36cc:	980b883a 	mov	r5,r19
    36d0:	102b883a 	mov	r21,r2
    36d4:	1827883a 	mov	r19,r3
    36d8:	00088e80 	call	88e8 <__muldf3>
    36dc:	a009883a 	mov	r4,r20
    36e0:	900b883a 	mov	r5,r18
    36e4:	100d883a 	mov	r6,r2
    36e8:	180f883a 	mov	r7,r3
    36ec:	00090940 	call	9094 <__subdf3>
    36f0:	880d883a 	mov	r6,r17
    36f4:	800f883a 	mov	r7,r16
    36f8:	1009883a 	mov	r4,r2
    36fc:	180b883a 	mov	r5,r3
    3700:	00090940 	call	9094 <__subdf3>
    3704:	100d883a 	mov	r6,r2
    3708:	180f883a 	mov	r7,r3
    370c:	a809883a 	mov	r4,r21
    3710:	980b883a 	mov	r5,r19
    3714:	00090940 	call	9094 <__subdf3>
    3718:	00000806 	br	373c <__ieee754_log+0x200>
    371c:	2807883a 	mov	r3,r5
    3720:	011ffc34 	movhi	r4,32752
    3724:	000d883a 	mov	r6,zero
    3728:	193fa016 	blt	r3,r4,35ac <__ieee754_log+0x70>
    372c:	100d883a 	mov	r6,r2
    3730:	1009883a 	mov	r4,r2
    3734:	380b883a 	mov	r5,r7
    3738:	00074940 	call	7494 <__adddf3>
    373c:	dfc00d17 	ldw	ra,52(sp)
    3740:	df000c17 	ldw	fp,48(sp)
    3744:	ddc00b17 	ldw	r23,44(sp)
    3748:	dd800a17 	ldw	r22,40(sp)
    374c:	dd400917 	ldw	r21,36(sp)
    3750:	dd000817 	ldw	r20,32(sp)
    3754:	dcc00717 	ldw	r19,28(sp)
    3758:	dc800617 	ldw	r18,24(sp)
    375c:	dc400517 	ldw	r17,20(sp)
    3760:	dc000417 	ldw	r16,16(sp)
    3764:	dec00e04 	addi	sp,sp,56
    3768:	f800283a 	ret
    376c:	01d00034 	movhi	r7,16384
    3770:	1009883a 	mov	r4,r2
    3774:	180b883a 	mov	r5,r3
    3778:	00074940 	call	7494 <__adddf3>
    377c:	100d883a 	mov	r6,r2
    3780:	180f883a 	mov	r7,r3
    3784:	800b883a 	mov	r5,r16
    3788:	8809883a 	mov	r4,r17
    378c:	0007d840 	call	7d84 <__divdf3>
    3790:	9809883a 	mov	r4,r19
    3794:	102d883a 	mov	r22,r2
    3798:	182b883a 	mov	r21,r3
    379c:	0009a740 	call	9a74 <__floatsidf>
    37a0:	b00d883a 	mov	r6,r22
    37a4:	a80f883a 	mov	r7,r21
    37a8:	b009883a 	mov	r4,r22
    37ac:	a80b883a 	mov	r5,r21
    37b0:	1039883a 	mov	fp,r2
    37b4:	d8c00315 	stw	r3,12(sp)
    37b8:	00088e80 	call	88e8 <__muldf3>
    37bc:	1015883a 	mov	r10,r2
    37c0:	00bffeb4 	movhi	r2,65530
    37c4:	10bae184 	addi	r2,r2,-5242
    37c8:	9097883a 	add	r11,r18,r2
    37cc:	500d883a 	mov	r6,r10
    37d0:	5009883a 	mov	r4,r10
    37d4:	180f883a 	mov	r7,r3
    37d8:	180b883a 	mov	r5,r3
    37dc:	dac00215 	stw	r11,8(sp)
    37e0:	da800115 	stw	r10,4(sp)
    37e4:	d8c00015 	stw	r3,0(sp)
    37e8:	00088e80 	call	88e8 <__muldf3>
    37ec:	01b7cfb4 	movhi	r6,57150
    37f0:	01cff0f4 	movhi	r7,16323
    37f4:	31949104 	addi	r6,r6,21060
    37f8:	39fc4484 	addi	r7,r7,-3822
    37fc:	1009883a 	mov	r4,r2
    3800:	180b883a 	mov	r5,r3
    3804:	1829883a 	mov	r20,r3
    3808:	102f883a 	mov	r23,r2
    380c:	00088e80 	call	88e8 <__muldf3>
    3810:	01a5b2f4 	movhi	r6,38603
    3814:	01cff1f4 	movhi	r7,16327
    3818:	3180f784 	addi	r6,r6,990
    381c:	39d19904 	addi	r7,r7,18020
    3820:	1009883a 	mov	r4,r2
    3824:	180b883a 	mov	r5,r3
    3828:	00074940 	call	7494 <__adddf3>
    382c:	a00f883a 	mov	r7,r20
    3830:	b80d883a 	mov	r6,r23
    3834:	1009883a 	mov	r4,r2
    3838:	180b883a 	mov	r5,r3
    383c:	00088e80 	call	88e8 <__muldf3>
    3840:	01a508f4 	movhi	r6,37923
    3844:	01cff4b4 	movhi	r7,16338
    3848:	31a4d644 	addi	r6,r6,-27815
    384c:	39d24904 	addi	r7,r7,18724
    3850:	1009883a 	mov	r4,r2
    3854:	180b883a 	mov	r5,r3
    3858:	00074940 	call	7494 <__adddf3>
    385c:	a00f883a 	mov	r7,r20
    3860:	b80d883a 	mov	r6,r23
    3864:	1009883a 	mov	r4,r2
    3868:	180b883a 	mov	r5,r3
    386c:	00088e80 	call	88e8 <__muldf3>
    3870:	01955574 	movhi	r6,21845
    3874:	01cff974 	movhi	r7,16357
    3878:	319564c4 	addi	r6,r6,21907
    387c:	39d55544 	addi	r7,r7,21845
    3880:	1009883a 	mov	r4,r2
    3884:	180b883a 	mov	r5,r3
    3888:	00074940 	call	7494 <__adddf3>
    388c:	da800117 	ldw	r10,4(sp)
    3890:	da400017 	ldw	r9,0(sp)
    3894:	1009883a 	mov	r4,r2
    3898:	500d883a 	mov	r6,r10
    389c:	480f883a 	mov	r7,r9
    38a0:	180b883a 	mov	r5,r3
    38a4:	00088e80 	call	88e8 <__muldf3>
    38a8:	01b41e74 	movhi	r6,53369
    38ac:	01cff134 	movhi	r7,16324
    38b0:	a00b883a 	mov	r5,r20
    38b4:	31b1a7c4 	addi	r6,r6,-14689
    38b8:	39e68244 	addi	r7,r7,-26103
    38bc:	b809883a 	mov	r4,r23
    38c0:	d8800115 	stw	r2,4(sp)
    38c4:	d8c00015 	stw	r3,0(sp)
    38c8:	00088e80 	call	88e8 <__muldf3>
    38cc:	018763b4 	movhi	r6,7566
    38d0:	01cff334 	movhi	r7,16332
    38d4:	319e2bc4 	addi	r6,r6,30895
    38d8:	39dc7144 	addi	r7,r7,29125
    38dc:	1009883a 	mov	r4,r2
    38e0:	180b883a 	mov	r5,r3
    38e4:	00074940 	call	7494 <__adddf3>
    38e8:	a00f883a 	mov	r7,r20
    38ec:	b80d883a 	mov	r6,r23
    38f0:	1009883a 	mov	r4,r2
    38f4:	180b883a 	mov	r5,r3
    38f8:	00088e80 	call	88e8 <__muldf3>
    38fc:	01a66634 	movhi	r6,39320
    3900:	01cff6b4 	movhi	r7,16346
    3904:	31be8104 	addi	r6,r6,-1532
    3908:	39e66644 	addi	r7,r7,-26215
    390c:	1009883a 	mov	r4,r2
    3910:	180b883a 	mov	r5,r3
    3914:	00074940 	call	7494 <__adddf3>
    3918:	a00f883a 	mov	r7,r20
    391c:	b80d883a 	mov	r6,r23
    3920:	1009883a 	mov	r4,r2
    3924:	180b883a 	mov	r5,r3
    3928:	00088e80 	call	88e8 <__muldf3>
    392c:	da800117 	ldw	r10,4(sp)
    3930:	da400017 	ldw	r9,0(sp)
    3934:	100d883a 	mov	r6,r2
    3938:	180f883a 	mov	r7,r3
    393c:	480b883a 	mov	r5,r9
    3940:	5009883a 	mov	r4,r10
    3944:	00074940 	call	7494 <__adddf3>
    3948:	dac00217 	ldw	r11,8(sp)
    394c:	014001f4 	movhi	r5,7
    3950:	296e1444 	addi	r5,r5,-18351
    3954:	2ca5c83a 	sub	r18,r5,r18
    3958:	92e4b03a 	or	r18,r18,r11
    395c:	1829883a 	mov	r20,r3
    3960:	0480470e 	bge	zero,r18,3a80 <__ieee754_log+0x544>
    3964:	000d883a 	mov	r6,zero
    3968:	01cff834 	movhi	r7,16352
    396c:	8809883a 	mov	r4,r17
    3970:	800b883a 	mov	r5,r16
    3974:	d8800115 	stw	r2,4(sp)
    3978:	00088e80 	call	88e8 <__muldf3>
    397c:	880d883a 	mov	r6,r17
    3980:	800f883a 	mov	r7,r16
    3984:	1009883a 	mov	r4,r2
    3988:	180b883a 	mov	r5,r3
    398c:	00088e80 	call	88e8 <__muldf3>
    3990:	da000117 	ldw	r8,4(sp)
    3994:	a00b883a 	mov	r5,r20
    3998:	100d883a 	mov	r6,r2
    399c:	4009883a 	mov	r4,r8
    39a0:	180f883a 	mov	r7,r3
    39a4:	1825883a 	mov	r18,r3
    39a8:	d8800015 	stw	r2,0(sp)
    39ac:	00074940 	call	7494 <__adddf3>
    39b0:	a80f883a 	mov	r7,r21
    39b4:	b00d883a 	mov	r6,r22
    39b8:	1009883a 	mov	r4,r2
    39bc:	180b883a 	mov	r5,r3
    39c0:	00088e80 	call	88e8 <__muldf3>
    39c4:	da400017 	ldw	r9,0(sp)
    39c8:	102b883a 	mov	r21,r2
    39cc:	1829883a 	mov	r20,r3
    39d0:	9800531e 	bne	r19,zero,3b20 <__ieee754_log+0x5e4>
    39d4:	4809883a 	mov	r4,r9
    39d8:	900b883a 	mov	r5,r18
    39dc:	100d883a 	mov	r6,r2
    39e0:	180f883a 	mov	r7,r3
    39e4:	00090940 	call	9094 <__subdf3>
    39e8:	100d883a 	mov	r6,r2
    39ec:	180f883a 	mov	r7,r3
    39f0:	8809883a 	mov	r4,r17
    39f4:	800b883a 	mov	r5,r16
    39f8:	00090940 	call	9094 <__subdf3>
    39fc:	003f4f06 	br	373c <__ieee754_log+0x200>
    3a00:	000d883a 	mov	r6,zero
    3a04:	000f883a 	mov	r7,zero
    3a08:	0009883a 	mov	r4,zero
    3a0c:	0170d434 	movhi	r5,50000
    3a10:	0007d840 	call	7d84 <__divdf3>
    3a14:	003f4906 	br	373c <__ieee754_log+0x200>
    3a18:	98006826 	beq	r19,zero,3bbc <__ieee754_log+0x680>
    3a1c:	9809883a 	mov	r4,r19
    3a20:	0009a740 	call	9a74 <__floatsidf>
    3a24:	01cff9b4 	movhi	r7,16358
    3a28:	01bfb834 	movhi	r6,65248
    3a2c:	39cb9084 	addi	r7,r7,11842
    3a30:	1009883a 	mov	r4,r2
    3a34:	180b883a 	mov	r5,r3
    3a38:	1023883a 	mov	r17,r2
    3a3c:	1821883a 	mov	r16,r3
    3a40:	00088e80 	call	88e8 <__muldf3>
    3a44:	018d5e74 	movhi	r6,13689
    3a48:	01cf7ab4 	movhi	r7,15850
    3a4c:	8809883a 	mov	r4,r17
    3a50:	800b883a 	mov	r5,r16
    3a54:	318f1d84 	addi	r6,r6,15478
    3a58:	39ce7bc4 	addi	r7,r7,14831
    3a5c:	1027883a 	mov	r19,r2
    3a60:	1825883a 	mov	r18,r3
    3a64:	00088e80 	call	88e8 <__muldf3>
    3a68:	100d883a 	mov	r6,r2
    3a6c:	180f883a 	mov	r7,r3
    3a70:	9809883a 	mov	r4,r19
    3a74:	900b883a 	mov	r5,r18
    3a78:	00074940 	call	7494 <__adddf3>
    3a7c:	003f2f06 	br	373c <__ieee754_log+0x200>
    3a80:	100d883a 	mov	r6,r2
    3a84:	180f883a 	mov	r7,r3
    3a88:	8809883a 	mov	r4,r17
    3a8c:	800b883a 	mov	r5,r16
    3a90:	00090940 	call	9094 <__subdf3>
    3a94:	b00d883a 	mov	r6,r22
    3a98:	a80f883a 	mov	r7,r21
    3a9c:	1009883a 	mov	r4,r2
    3aa0:	180b883a 	mov	r5,r3
    3aa4:	00088e80 	call	88e8 <__muldf3>
    3aa8:	1029883a 	mov	r20,r2
    3aac:	1825883a 	mov	r18,r3
    3ab0:	98000d26 	beq	r19,zero,3ae8 <__ieee754_log+0x5ac>
    3ab4:	dcc00317 	ldw	r19,12(sp)
    3ab8:	01cff9b4 	movhi	r7,16358
    3abc:	01bfb834 	movhi	r6,65248
    3ac0:	39cb9084 	addi	r7,r7,11842
    3ac4:	e009883a 	mov	r4,fp
    3ac8:	980b883a 	mov	r5,r19
    3acc:	00088e80 	call	88e8 <__muldf3>
    3ad0:	018d5e74 	movhi	r6,13689
    3ad4:	01cf7ab4 	movhi	r7,15850
    3ad8:	318f1d84 	addi	r6,r6,15478
    3adc:	39ce7bc4 	addi	r7,r7,14831
    3ae0:	e009883a 	mov	r4,fp
    3ae4:	003ef906 	br	36cc <__ieee754_log+0x190>
    3ae8:	a00d883a 	mov	r6,r20
    3aec:	900f883a 	mov	r7,r18
    3af0:	8809883a 	mov	r4,r17
    3af4:	800b883a 	mov	r5,r16
    3af8:	00090940 	call	9094 <__subdf3>
    3afc:	003f0f06 	br	373c <__ieee754_log+0x200>
    3b00:	200d883a 	mov	r6,r4
    3b04:	00090940 	call	9094 <__subdf3>
    3b08:	000d883a 	mov	r6,zero
    3b0c:	000f883a 	mov	r7,zero
    3b10:	1009883a 	mov	r4,r2
    3b14:	180b883a 	mov	r5,r3
    3b18:	0007d840 	call	7d84 <__divdf3>
    3b1c:	003f0706 	br	373c <__ieee754_log+0x200>
    3b20:	dcc00317 	ldw	r19,12(sp)
    3b24:	01cff9b4 	movhi	r7,16358
    3b28:	e009883a 	mov	r4,fp
    3b2c:	980b883a 	mov	r5,r19
    3b30:	01bfb834 	movhi	r6,65248
    3b34:	39cb9084 	addi	r7,r7,11842
    3b38:	da400015 	stw	r9,0(sp)
    3b3c:	00088e80 	call	88e8 <__muldf3>
    3b40:	018d5e74 	movhi	r6,13689
    3b44:	01cf7ab4 	movhi	r7,15850
    3b48:	e009883a 	mov	r4,fp
    3b4c:	980b883a 	mov	r5,r19
    3b50:	318f1d84 	addi	r6,r6,15478
    3b54:	39ce7bc4 	addi	r7,r7,14831
    3b58:	102d883a 	mov	r22,r2
    3b5c:	1827883a 	mov	r19,r3
    3b60:	00088e80 	call	88e8 <__muldf3>
    3b64:	a80d883a 	mov	r6,r21
    3b68:	a00f883a 	mov	r7,r20
    3b6c:	1009883a 	mov	r4,r2
    3b70:	180b883a 	mov	r5,r3
    3b74:	00074940 	call	7494 <__adddf3>
    3b78:	da400017 	ldw	r9,0(sp)
    3b7c:	900b883a 	mov	r5,r18
    3b80:	100d883a 	mov	r6,r2
    3b84:	4809883a 	mov	r4,r9
    3b88:	180f883a 	mov	r7,r3
    3b8c:	00090940 	call	9094 <__subdf3>
    3b90:	880d883a 	mov	r6,r17
    3b94:	800f883a 	mov	r7,r16
    3b98:	1009883a 	mov	r4,r2
    3b9c:	180b883a 	mov	r5,r3
    3ba0:	00090940 	call	9094 <__subdf3>
    3ba4:	100d883a 	mov	r6,r2
    3ba8:	180f883a 	mov	r7,r3
    3bac:	b009883a 	mov	r4,r22
    3bb0:	980b883a 	mov	r5,r19
    3bb4:	00090940 	call	9094 <__subdf3>
    3bb8:	003ee006 	br	373c <__ieee754_log+0x200>
    3bbc:	0005883a 	mov	r2,zero
    3bc0:	0007883a 	mov	r3,zero
    3bc4:	003edd06 	br	373c <__ieee754_log+0x200>

00003bc8 <__ieee754_pow>:
    3bc8:	00e00034 	movhi	r3,32768
    3bcc:	deffeb04 	addi	sp,sp,-84
    3bd0:	18ffffc4 	addi	r3,r3,-1
    3bd4:	dc000b15 	stw	r16,44(sp)
    3bd8:	3021883a 	mov	r16,r6
    3bdc:	38cc703a 	and	r6,r7,r3
    3be0:	dd401015 	stw	r21,64(sp)
    3be4:	dc400c15 	stw	r17,48(sp)
    3be8:	dfc01415 	stw	ra,80(sp)
    3bec:	df001315 	stw	fp,76(sp)
    3bf0:	ddc01215 	stw	r23,72(sp)
    3bf4:	dd801115 	stw	r22,68(sp)
    3bf8:	dd000f15 	stw	r20,60(sp)
    3bfc:	dcc00e15 	stw	r19,56(sp)
    3c00:	dc800d15 	stw	r18,52(sp)
    3c04:	3404b03a 	or	r2,r6,r16
    3c08:	3823883a 	mov	r17,r7
    3c0c:	282b883a 	mov	r21,r5
    3c10:	1000191e 	bne	r2,zero,3c78 <__ieee754_pow+0xb0>
    3c14:	2880023c 	xorhi	r2,r5,8
    3c18:	2006d7fa 	srli	r3,r4,31
    3c1c:	1004907a 	slli	r2,r2,1
    3c20:	017ffc34 	movhi	r5,65520
    3c24:	200c907a 	slli	r6,r4,1
    3c28:	1884b03a 	or	r2,r3,r2
    3c2c:	2880202e 	bgeu	r5,r2,3cb0 <__ieee754_pow+0xe8>
    3c30:	800d883a 	mov	r6,r16
    3c34:	880f883a 	mov	r7,r17
    3c38:	a80b883a 	mov	r5,r21
    3c3c:	00074940 	call	7494 <__adddf3>
    3c40:	102d883a 	mov	r22,r2
    3c44:	b005883a 	mov	r2,r22
    3c48:	dfc01417 	ldw	ra,80(sp)
    3c4c:	df001317 	ldw	fp,76(sp)
    3c50:	ddc01217 	ldw	r23,72(sp)
    3c54:	dd801117 	ldw	r22,68(sp)
    3c58:	dd401017 	ldw	r21,64(sp)
    3c5c:	dd000f17 	ldw	r20,60(sp)
    3c60:	dcc00e17 	ldw	r19,56(sp)
    3c64:	dc800d17 	ldw	r18,52(sp)
    3c68:	dc400c17 	ldw	r17,48(sp)
    3c6c:	dc000b17 	ldw	r16,44(sp)
    3c70:	dec01504 	addi	sp,sp,84
    3c74:	f800283a 	ret
    3c78:	28e6703a 	and	r19,r5,r3
    3c7c:	009ffc34 	movhi	r2,32752
    3c80:	14c00f0e 	bge	r2,r19,3cc0 <__ieee754_pow+0xf8>
    3c84:	00b00434 	movhi	r2,49168
    3c88:	a885883a 	add	r2,r21,r2
    3c8c:	1104b03a 	or	r2,r2,r4
    3c90:	103fe71e 	bne	r2,zero,3c30 <__ieee754_pow+0x68>
    3c94:	8880023c 	xorhi	r2,r17,8
    3c98:	8006d7fa 	srli	r3,r16,31
    3c9c:	1004907a 	slli	r2,r2,1
    3ca0:	017ffc34 	movhi	r5,65520
    3ca4:	800c907a 	slli	r6,r16,1
    3ca8:	1884b03a 	or	r2,r3,r2
    3cac:	28bfe036 	bltu	r5,r2,3c30 <__ieee754_pow+0x68>
    3cb0:	11402726 	beq	r2,r5,3d50 <__ieee754_pow+0x188>
    3cb4:	002d883a 	mov	r22,zero
    3cb8:	00cffc34 	movhi	r3,16368
    3cbc:	003fe106 	br	3c44 <__ieee754_pow+0x7c>
    3cc0:	98802526 	beq	r19,r2,3d58 <__ieee754_pow+0x190>
    3cc4:	009ffc34 	movhi	r2,32752
    3cc8:	11bfee16 	blt	r2,r6,3c84 <__ieee754_pow+0xbc>
    3ccc:	30802426 	beq	r6,r2,3d60 <__ieee754_pow+0x198>
    3cd0:	a8006e16 	blt	r21,zero,3e8c <__ieee754_pow+0x2c4>
    3cd4:	0025883a 	mov	r18,zero
    3cd8:	80002326 	beq	r16,zero,3d68 <__ieee754_pow+0x1a0>
    3cdc:	00e00034 	movhi	r3,32768
    3ce0:	18ffffc4 	addi	r3,r3,-1
    3ce4:	202d883a 	mov	r22,r4
    3ce8:	a8c6703a 	and	r3,r21,r3
    3cec:	20003a26 	beq	r4,zero,3dd8 <__ieee754_pow+0x210>
    3cf0:	a828d7fa 	srli	r20,r21,31
    3cf4:	a53fffc4 	addi	r20,r20,-1
    3cf8:	9504b03a 	or	r2,r18,r20
    3cfc:	10008026 	beq	r2,zero,3f00 <__ieee754_pow+0x338>
    3d00:	00907834 	movhi	r2,16864
    3d04:	1180810e 	bge	r2,r6,3f0c <__ieee754_pow+0x344>
    3d08:	0090fc34 	movhi	r2,17392
    3d0c:	11834f0e 	bge	r2,r6,4a4c <__ieee754_pow+0xe84>
    3d10:	008ffc34 	movhi	r2,16368
    3d14:	9880480e 	bge	r19,r2,3e38 <__ieee754_pow+0x270>
    3d18:	88004816 	blt	r17,zero,3e3c <__ieee754_pow+0x274>
    3d1c:	0009883a 	mov	r4,zero
    3d20:	dfc01417 	ldw	ra,80(sp)
    3d24:	df001317 	ldw	fp,76(sp)
    3d28:	ddc01217 	ldw	r23,72(sp)
    3d2c:	dd801117 	ldw	r22,68(sp)
    3d30:	dd401017 	ldw	r21,64(sp)
    3d34:	dd000f17 	ldw	r20,60(sp)
    3d38:	dcc00e17 	ldw	r19,56(sp)
    3d3c:	dc800d17 	ldw	r18,52(sp)
    3d40:	dc400c17 	ldw	r17,48(sp)
    3d44:	dc000b17 	ldw	r16,44(sp)
    3d48:	dec01504 	addi	sp,sp,84
    3d4c:	0006ba81 	jmpi	6ba8 <__math_uflow>
    3d50:	303fd826 	beq	r6,zero,3cb4 <__ieee754_pow+0xec>
    3d54:	003fb606 	br	3c30 <__ieee754_pow+0x68>
    3d58:	203fb51e 	bne	r4,zero,3c30 <__ieee754_pow+0x68>
    3d5c:	003fd906 	br	3cc4 <__ieee754_pow+0xfc>
    3d60:	803fdb26 	beq	r16,zero,3cd0 <__ieee754_pow+0x108>
    3d64:	003fc706 	br	3c84 <__ieee754_pow+0xbc>
    3d68:	009ffc34 	movhi	r2,32752
    3d6c:	30805a26 	beq	r6,r2,3ed8 <__ieee754_pow+0x310>
    3d70:	008ffc34 	movhi	r2,16368
    3d74:	30831026 	beq	r6,r2,49b8 <__ieee754_pow+0xdf0>
    3d78:	00900034 	movhi	r2,16384
    3d7c:	8883a626 	beq	r17,r2,4c18 <__ieee754_pow+0x1050>
    3d80:	008ff834 	movhi	r2,16352
    3d84:	88bfd51e 	bne	r17,r2,3cdc <__ieee754_pow+0x114>
    3d88:	a83fd416 	blt	r21,zero,3cdc <__ieee754_pow+0x114>
    3d8c:	a80b883a 	mov	r5,r21
    3d90:	dfc01417 	ldw	ra,80(sp)
    3d94:	df001317 	ldw	fp,76(sp)
    3d98:	ddc01217 	ldw	r23,72(sp)
    3d9c:	dd801117 	ldw	r22,68(sp)
    3da0:	dd401017 	ldw	r21,64(sp)
    3da4:	dd000f17 	ldw	r20,60(sp)
    3da8:	dcc00e17 	ldw	r19,56(sp)
    3dac:	dc800d17 	ldw	r18,52(sp)
    3db0:	dc400c17 	ldw	r17,48(sp)
    3db4:	dc000b17 	ldw	r16,44(sp)
    3db8:	dec01504 	addi	sp,sp,84
    3dbc:	000541c1 	jmpi	541c <__ieee754_sqrt>
    3dc0:	20004f1e 	bne	r4,zero,3f00 <__ieee754_pow+0x338>
    3dc4:	00e00034 	movhi	r3,32768
    3dc8:	18ffffc4 	addi	r3,r3,-1
    3dcc:	002d883a 	mov	r22,zero
    3dd0:	a8c6703a 	and	r3,r21,r3
    3dd4:	0025883a 	mov	r18,zero
    3dd8:	98000526 	beq	r19,zero,3df0 <__ieee754_pow+0x228>
    3ddc:	00900034 	movhi	r2,16384
    3de0:	10bfffc4 	addi	r2,r2,-1
    3de4:	a884703a 	and	r2,r21,r2
    3de8:	014ffc34 	movhi	r5,16368
    3dec:	117fc01e 	bne	r2,r5,3cf0 <__ieee754_pow+0x128>
    3df0:	88001f16 	blt	r17,zero,3e70 <__ieee754_pow+0x2a8>
    3df4:	a83f930e 	bge	r21,zero,3c44 <__ieee754_pow+0x7c>
    3df8:	00b00434 	movhi	r2,49168
    3dfc:	9885883a 	add	r2,r19,r2
    3e00:	1484b03a 	or	r2,r2,r18
    3e04:	10038a1e 	bne	r2,zero,4c30 <__ieee754_pow+0x1068>
    3e08:	b00d883a 	mov	r6,r22
    3e0c:	180f883a 	mov	r7,r3
    3e10:	3009883a 	mov	r4,r6
    3e14:	380b883a 	mov	r5,r7
    3e18:	00090940 	call	9094 <__subdf3>
    3e1c:	100d883a 	mov	r6,r2
    3e20:	180f883a 	mov	r7,r3
    3e24:	1009883a 	mov	r4,r2
    3e28:	180b883a 	mov	r5,r3
    3e2c:	0007d840 	call	7d84 <__divdf3>
    3e30:	102d883a 	mov	r22,r2
    3e34:	003f8306 	br	3c44 <__ieee754_pow+0x7c>
    3e38:	047fb80e 	bge	zero,r17,3d1c <__ieee754_pow+0x154>
    3e3c:	0009883a 	mov	r4,zero
    3e40:	dfc01417 	ldw	ra,80(sp)
    3e44:	df001317 	ldw	fp,76(sp)
    3e48:	ddc01217 	ldw	r23,72(sp)
    3e4c:	dd801117 	ldw	r22,68(sp)
    3e50:	dd401017 	ldw	r21,64(sp)
    3e54:	dd000f17 	ldw	r20,60(sp)
    3e58:	dcc00e17 	ldw	r19,56(sp)
    3e5c:	dc800d17 	ldw	r18,52(sp)
    3e60:	dc400c17 	ldw	r17,48(sp)
    3e64:	dc000b17 	ldw	r16,44(sp)
    3e68:	dec01504 	addi	sp,sp,84
    3e6c:	0006bc01 	jmpi	6bc0 <__math_oflow>
    3e70:	180f883a 	mov	r7,r3
    3e74:	000d883a 	mov	r6,zero
    3e78:	0009883a 	mov	r4,zero
    3e7c:	014ffc34 	movhi	r5,16368
    3e80:	0007d840 	call	7d84 <__divdf3>
    3e84:	102d883a 	mov	r22,r2
    3e88:	003fda06 	br	3df4 <__ieee754_pow+0x22c>
    3e8c:	0090d034 	movhi	r2,17216
    3e90:	30800e0e 	bge	r6,r2,3ecc <__ieee754_pow+0x304>
    3e94:	008ffc34 	movhi	r2,16368
    3e98:	30800916 	blt	r6,r2,3ec0 <__ieee754_pow+0x2f8>
    3e9c:	3005d53a 	srai	r2,r6,20
    3ea0:	10bf0044 	addi	r2,r2,-1023
    3ea4:	10c00550 	cmplti	r3,r2,21
    3ea8:	18034c1e 	bne	r3,zero,4bdc <__ieee754_pow+0x1014>
    3eac:	00c00d04 	movi	r3,52
    3eb0:	1885c83a 	sub	r2,r3,r2
    3eb4:	8086d83a 	srl	r3,r16,r2
    3eb8:	1884983a 	sll	r2,r3,r2
    3ebc:	14037926 	beq	r2,r16,4ca4 <__ieee754_pow+0x10dc>
    3ec0:	0025883a 	mov	r18,zero
    3ec4:	803faa26 	beq	r16,zero,3d70 <__ieee754_pow+0x1a8>
    3ec8:	003f8406 	br	3cdc <__ieee754_pow+0x114>
    3ecc:	04800084 	movi	r18,2
    3ed0:	803f821e 	bne	r16,zero,3cdc <__ieee754_pow+0x114>
    3ed4:	003fa406 	br	3d68 <__ieee754_pow+0x1a0>
    3ed8:	00b00434 	movhi	r2,49168
    3edc:	9885883a 	add	r2,r19,r2
    3ee0:	1104b03a 	or	r2,r2,r4
    3ee4:	103f7326 	beq	r2,zero,3cb4 <__ieee754_pow+0xec>
    3ee8:	008ffc34 	movhi	r2,16368
    3eec:	002d883a 	mov	r22,zero
    3ef0:	98833716 	blt	r19,r2,4bd0 <__ieee754_pow+0x1008>
    3ef4:	88033416 	blt	r17,zero,4bc8 <__ieee754_pow+0x1000>
    3ef8:	8807883a 	mov	r3,r17
    3efc:	003f5106 	br	3c44 <__ieee754_pow+0x7c>
    3f00:	200d883a 	mov	r6,r4
    3f04:	a80f883a 	mov	r7,r21
    3f08:	003fc106 	br	3e10 <__ieee754_pow+0x248>
    3f0c:	ad5ffc2c 	andhi	r21,r21,32752
    3f10:	a802cc1e 	bne	r21,zero,4a44 <__ieee754_pow+0xe7c>
    3f14:	180b883a 	mov	r5,r3
    3f18:	000d883a 	mov	r6,zero
    3f1c:	01d0d034 	movhi	r7,17216
    3f20:	00088e80 	call	88e8 <__muldf3>
    3f24:	102d883a 	mov	r22,r2
    3f28:	1827883a 	mov	r19,r3
    3f2c:	017ff2c4 	movi	r5,-53
    3f30:	9809d53a 	srai	r4,r19,20
    3f34:	00800434 	movhi	r2,16
    3f38:	10bfffc4 	addi	r2,r2,-1
    3f3c:	00c00134 	movhi	r3,4
    3f40:	213f0044 	addi	r4,r4,-1023
    3f44:	9884703a 	and	r2,r19,r2
    3f48:	18e62384 	addi	r3,r3,-26482
    3f4c:	2159883a 	add	r12,r4,r5
    3f50:	170ffc34 	orhi	fp,r2,16368
    3f54:	1880060e 	bge	r3,r2,3f70 <__ieee754_pow+0x3a8>
    3f58:	00c00334 	movhi	r3,12
    3f5c:	18ed9e44 	addi	r3,r3,-18823
    3f60:	1883370e 	bge	r3,r2,4c40 <__ieee754_pow+0x1078>
    3f64:	00bffc34 	movhi	r2,65520
    3f68:	63000044 	addi	r12,r12,1
    3f6c:	e0b9883a 	add	fp,fp,r2
    3f70:	d8000015 	stw	zero,0(sp)
    3f74:	d8000115 	stw	zero,4(sp)
    3f78:	d8000a15 	stw	zero,40(sp)
    3f7c:	001f883a 	mov	r15,zero
    3f80:	002f883a 	mov	r23,zero
    3f84:	034ffc34 	movhi	r13,16368
    3f88:	680f883a 	mov	r7,r13
    3f8c:	b009883a 	mov	r4,r22
    3f90:	e00b883a 	mov	r5,fp
    3f94:	000d883a 	mov	r6,zero
    3f98:	dbc00915 	stw	r15,36(sp)
    3f9c:	db000815 	stw	r12,32(sp)
    3fa0:	db400215 	stw	r13,8(sp)
    3fa4:	00090940 	call	9094 <__subdf3>
    3fa8:	db400217 	ldw	r13,8(sp)
    3fac:	b009883a 	mov	r4,r22
    3fb0:	e00b883a 	mov	r5,fp
    3fb4:	680f883a 	mov	r7,r13
    3fb8:	000d883a 	mov	r6,zero
    3fbc:	db400615 	stw	r13,24(sp)
    3fc0:	d8800315 	stw	r2,12(sp)
    3fc4:	d8c00215 	stw	r3,8(sp)
    3fc8:	00074940 	call	7494 <__adddf3>
    3fcc:	100d883a 	mov	r6,r2
    3fd0:	180f883a 	mov	r7,r3
    3fd4:	0009883a 	mov	r4,zero
    3fd8:	014ffc34 	movhi	r5,16368
    3fdc:	0007d840 	call	7d84 <__divdf3>
    3fe0:	dac00217 	ldw	r11,8(sp)
    3fe4:	da400317 	ldw	r9,12(sp)
    3fe8:	100d883a 	mov	r6,r2
    3fec:	580b883a 	mov	r5,r11
    3ff0:	4809883a 	mov	r4,r9
    3ff4:	180f883a 	mov	r7,r3
    3ff8:	d8800515 	stw	r2,20(sp)
    3ffc:	d8c00415 	stw	r3,16(sp)
    4000:	00088e80 	call	88e8 <__muldf3>
    4004:	e009d07a 	srai	r4,fp,1
    4008:	01400234 	movhi	r5,8
    400c:	000d883a 	mov	r6,zero
    4010:	21080034 	orhi	r4,r4,8192
    4014:	2149883a 	add	r4,r4,r5
    4018:	25ef883a 	add	r23,r4,r23
    401c:	b80f883a 	mov	r7,r23
    4020:	0009883a 	mov	r4,zero
    4024:	180b883a 	mov	r5,r3
    4028:	1827883a 	mov	r19,r3
    402c:	102b883a 	mov	r21,r2
    4030:	00088e80 	call	88e8 <__muldf3>
    4034:	da400317 	ldw	r9,12(sp)
    4038:	dac00217 	ldw	r11,8(sp)
    403c:	100d883a 	mov	r6,r2
    4040:	4809883a 	mov	r4,r9
    4044:	580b883a 	mov	r5,r11
    4048:	180f883a 	mov	r7,r3
    404c:	00090940 	call	9094 <__subdf3>
    4050:	db400617 	ldw	r13,24(sp)
    4054:	b80b883a 	mov	r5,r23
    4058:	000d883a 	mov	r6,zero
    405c:	680f883a 	mov	r7,r13
    4060:	0009883a 	mov	r4,zero
    4064:	182f883a 	mov	r23,r3
    4068:	d8800215 	stw	r2,8(sp)
    406c:	00090940 	call	9094 <__subdf3>
    4070:	b009883a 	mov	r4,r22
    4074:	e00b883a 	mov	r5,fp
    4078:	100d883a 	mov	r6,r2
    407c:	180f883a 	mov	r7,r3
    4080:	00090940 	call	9094 <__subdf3>
    4084:	980f883a 	mov	r7,r19
    4088:	000d883a 	mov	r6,zero
    408c:	1009883a 	mov	r4,r2
    4090:	180b883a 	mov	r5,r3
    4094:	00088e80 	call	88e8 <__muldf3>
    4098:	dac00217 	ldw	r11,8(sp)
    409c:	b80b883a 	mov	r5,r23
    40a0:	100d883a 	mov	r6,r2
    40a4:	5809883a 	mov	r4,r11
    40a8:	180f883a 	mov	r7,r3
    40ac:	00090940 	call	9094 <__subdf3>
    40b0:	da000417 	ldw	r8,16(sp)
    40b4:	da800517 	ldw	r10,20(sp)
    40b8:	1009883a 	mov	r4,r2
    40bc:	400f883a 	mov	r7,r8
    40c0:	500d883a 	mov	r6,r10
    40c4:	180b883a 	mov	r5,r3
    40c8:	00088e80 	call	88e8 <__muldf3>
    40cc:	a80d883a 	mov	r6,r21
    40d0:	980f883a 	mov	r7,r19
    40d4:	a809883a 	mov	r4,r21
    40d8:	980b883a 	mov	r5,r19
    40dc:	d8800415 	stw	r2,16(sp)
    40e0:	d8c00315 	stw	r3,12(sp)
    40e4:	00088e80 	call	88e8 <__muldf3>
    40e8:	01929174 	movhi	r6,19013
    40ec:	01cff2b4 	movhi	r7,16330
    40f0:	3193bbc4 	addi	r6,r6,20207
    40f4:	39df8a04 	addi	r7,r7,32296
    40f8:	1009883a 	mov	r4,r2
    40fc:	180b883a 	mov	r5,r3
    4100:	102f883a 	mov	r23,r2
    4104:	182d883a 	mov	r22,r3
    4108:	00088e80 	call	88e8 <__muldf3>
    410c:	01a4f2b4 	movhi	r6,37834
    4110:	01cff3b4 	movhi	r7,16334
    4114:	31b6d944 	addi	r6,r6,-9371
    4118:	39e19284 	addi	r7,r7,-31158
    411c:	1009883a 	mov	r4,r2
    4120:	180b883a 	mov	r5,r3
    4124:	00074940 	call	7494 <__adddf3>
    4128:	b80d883a 	mov	r6,r23
    412c:	b00f883a 	mov	r7,r22
    4130:	1009883a 	mov	r4,r2
    4134:	180b883a 	mov	r5,r3
    4138:	00088e80 	call	88e8 <__muldf3>
    413c:	01aa4774 	movhi	r6,43293
    4140:	01cff474 	movhi	r7,16337
    4144:	31904044 	addi	r6,r6,16641
    4148:	39dd1804 	addi	r7,r7,29792
    414c:	1009883a 	mov	r4,r2
    4150:	180b883a 	mov	r5,r3
    4154:	00074940 	call	7494 <__adddf3>
    4158:	b80d883a 	mov	r6,r23
    415c:	b00f883a 	mov	r7,r22
    4160:	1009883a 	mov	r4,r2
    4164:	180b883a 	mov	r5,r3
    4168:	00088e80 	call	88e8 <__muldf3>
    416c:	019463f4 	movhi	r6,20879
    4170:	01cff574 	movhi	r7,16341
    4174:	31899344 	addi	r6,r6,9805
    4178:	39d55544 	addi	r7,r7,21845
    417c:	1009883a 	mov	r4,r2
    4180:	180b883a 	mov	r5,r3
    4184:	00074940 	call	7494 <__adddf3>
    4188:	b80d883a 	mov	r6,r23
    418c:	b00f883a 	mov	r7,r22
    4190:	1009883a 	mov	r4,r2
    4194:	180b883a 	mov	r5,r3
    4198:	00088e80 	call	88e8 <__muldf3>
    419c:	01b6dc34 	movhi	r6,56176
    41a0:	01cff6f4 	movhi	r7,16347
    41a4:	31aaffc4 	addi	r6,r6,-21505
    41a8:	39db6d84 	addi	r7,r7,28086
    41ac:	1009883a 	mov	r4,r2
    41b0:	180b883a 	mov	r5,r3
    41b4:	00074940 	call	7494 <__adddf3>
    41b8:	b80d883a 	mov	r6,r23
    41bc:	b00f883a 	mov	r7,r22
    41c0:	1009883a 	mov	r4,r2
    41c4:	180b883a 	mov	r5,r3
    41c8:	00088e80 	call	88e8 <__muldf3>
    41cc:	018cccf4 	movhi	r6,13107
    41d0:	01cff8f4 	movhi	r7,16355
    41d4:	318cc0c4 	addi	r6,r6,13059
    41d8:	39ccccc4 	addi	r7,r7,13107
    41dc:	1009883a 	mov	r4,r2
    41e0:	180b883a 	mov	r5,r3
    41e4:	00074940 	call	7494 <__adddf3>
    41e8:	b80d883a 	mov	r6,r23
    41ec:	b00f883a 	mov	r7,r22
    41f0:	b809883a 	mov	r4,r23
    41f4:	b00b883a 	mov	r5,r22
    41f8:	1839883a 	mov	fp,r3
    41fc:	d8800215 	stw	r2,8(sp)
    4200:	00088e80 	call	88e8 <__muldf3>
    4204:	dac00217 	ldw	r11,8(sp)
    4208:	e00b883a 	mov	r5,fp
    420c:	100d883a 	mov	r6,r2
    4210:	5809883a 	mov	r4,r11
    4214:	180f883a 	mov	r7,r3
    4218:	00088e80 	call	88e8 <__muldf3>
    421c:	980f883a 	mov	r7,r19
    4220:	a809883a 	mov	r4,r21
    4224:	980b883a 	mov	r5,r19
    4228:	000d883a 	mov	r6,zero
    422c:	102f883a 	mov	r23,r2
    4230:	182d883a 	mov	r22,r3
    4234:	00074940 	call	7494 <__adddf3>
    4238:	da800417 	ldw	r10,16(sp)
    423c:	da400317 	ldw	r9,12(sp)
    4240:	1009883a 	mov	r4,r2
    4244:	500d883a 	mov	r6,r10
    4248:	480f883a 	mov	r7,r9
    424c:	180b883a 	mov	r5,r3
    4250:	da800715 	stw	r10,28(sp)
    4254:	da400615 	stw	r9,24(sp)
    4258:	00088e80 	call	88e8 <__muldf3>
    425c:	b80d883a 	mov	r6,r23
    4260:	b00f883a 	mov	r7,r22
    4264:	1009883a 	mov	r4,r2
    4268:	180b883a 	mov	r5,r3
    426c:	00074940 	call	7494 <__adddf3>
    4270:	980f883a 	mov	r7,r19
    4274:	980b883a 	mov	r5,r19
    4278:	000d883a 	mov	r6,zero
    427c:	0009883a 	mov	r4,zero
    4280:	d8800315 	stw	r2,12(sp)
    4284:	d8c00215 	stw	r3,8(sp)
    4288:	00088e80 	call	88e8 <__muldf3>
    428c:	000d883a 	mov	r6,zero
    4290:	01d00234 	movhi	r7,16392
    4294:	1009883a 	mov	r4,r2
    4298:	180b883a 	mov	r5,r3
    429c:	d8800515 	stw	r2,20(sp)
    42a0:	d8c00415 	stw	r3,16(sp)
    42a4:	00074940 	call	7494 <__adddf3>
    42a8:	da000317 	ldw	r8,12(sp)
    42ac:	dac00217 	ldw	r11,8(sp)
    42b0:	1009883a 	mov	r4,r2
    42b4:	400d883a 	mov	r6,r8
    42b8:	580f883a 	mov	r7,r11
    42bc:	180b883a 	mov	r5,r3
    42c0:	00074940 	call	7494 <__adddf3>
    42c4:	980b883a 	mov	r5,r19
    42c8:	000d883a 	mov	r6,zero
    42cc:	180f883a 	mov	r7,r3
    42d0:	0009883a 	mov	r4,zero
    42d4:	182d883a 	mov	r22,r3
    42d8:	00088e80 	call	88e8 <__muldf3>
    42dc:	b00b883a 	mov	r5,r22
    42e0:	000d883a 	mov	r6,zero
    42e4:	01d00234 	movhi	r7,16392
    42e8:	0009883a 	mov	r4,zero
    42ec:	1039883a 	mov	fp,r2
    42f0:	182f883a 	mov	r23,r3
    42f4:	00090940 	call	9094 <__subdf3>
    42f8:	db800517 	ldw	r14,20(sp)
    42fc:	db400417 	ldw	r13,16(sp)
    4300:	1009883a 	mov	r4,r2
    4304:	700d883a 	mov	r6,r14
    4308:	680f883a 	mov	r7,r13
    430c:	180b883a 	mov	r5,r3
    4310:	00090940 	call	9094 <__subdf3>
    4314:	da000317 	ldw	r8,12(sp)
    4318:	dac00217 	ldw	r11,8(sp)
    431c:	100d883a 	mov	r6,r2
    4320:	4009883a 	mov	r4,r8
    4324:	580b883a 	mov	r5,r11
    4328:	180f883a 	mov	r7,r3
    432c:	00090940 	call	9094 <__subdf3>
    4330:	a80d883a 	mov	r6,r21
    4334:	980f883a 	mov	r7,r19
    4338:	1009883a 	mov	r4,r2
    433c:	180b883a 	mov	r5,r3
    4340:	00088e80 	call	88e8 <__muldf3>
    4344:	da800717 	ldw	r10,28(sp)
    4348:	da400617 	ldw	r9,24(sp)
    434c:	b00f883a 	mov	r7,r22
    4350:	5009883a 	mov	r4,r10
    4354:	480b883a 	mov	r5,r9
    4358:	000d883a 	mov	r6,zero
    435c:	102b883a 	mov	r21,r2
    4360:	1827883a 	mov	r19,r3
    4364:	00088e80 	call	88e8 <__muldf3>
    4368:	a809883a 	mov	r4,r21
    436c:	980b883a 	mov	r5,r19
    4370:	100d883a 	mov	r6,r2
    4374:	180f883a 	mov	r7,r3
    4378:	00074940 	call	7494 <__adddf3>
    437c:	e009883a 	mov	r4,fp
    4380:	b80b883a 	mov	r5,r23
    4384:	100d883a 	mov	r6,r2
    4388:	180f883a 	mov	r7,r3
    438c:	102d883a 	mov	r22,r2
    4390:	182b883a 	mov	r21,r3
    4394:	00074940 	call	7494 <__adddf3>
    4398:	01cffbf4 	movhi	r7,16367
    439c:	01b80034 	movhi	r6,57344
    43a0:	39f1c244 	addi	r7,r7,-14583
    43a4:	0009883a 	mov	r4,zero
    43a8:	180b883a 	mov	r5,r3
    43ac:	1827883a 	mov	r19,r3
    43b0:	00088e80 	call	88e8 <__muldf3>
    43b4:	e00d883a 	mov	r6,fp
    43b8:	b80f883a 	mov	r7,r23
    43bc:	980b883a 	mov	r5,r19
    43c0:	0009883a 	mov	r4,zero
    43c4:	1039883a 	mov	fp,r2
    43c8:	182f883a 	mov	r23,r3
    43cc:	00090940 	call	9094 <__subdf3>
    43d0:	b009883a 	mov	r4,r22
    43d4:	a80b883a 	mov	r5,r21
    43d8:	100d883a 	mov	r6,r2
    43dc:	180f883a 	mov	r7,r3
    43e0:	00090940 	call	9094 <__subdf3>
    43e4:	01b70eb4 	movhi	r6,56378
    43e8:	01cffbf4 	movhi	r7,16367
    43ec:	3180ff44 	addi	r6,r6,1021
    43f0:	39f1c244 	addi	r7,r7,-14583
    43f4:	1009883a 	mov	r4,r2
    43f8:	180b883a 	mov	r5,r3
    43fc:	00088e80 	call	88e8 <__muldf3>
    4400:	018516f4 	movhi	r6,5211
    4404:	01ef8fb4 	movhi	r7,48702
    4408:	980b883a 	mov	r5,r19
    440c:	31807d44 	addi	r6,r6,501
    4410:	39cbf804 	addi	r7,r7,12256
    4414:	0009883a 	mov	r4,zero
    4418:	102d883a 	mov	r22,r2
    441c:	182b883a 	mov	r21,r3
    4420:	00088e80 	call	88e8 <__muldf3>
    4424:	b009883a 	mov	r4,r22
    4428:	a80b883a 	mov	r5,r21
    442c:	100d883a 	mov	r6,r2
    4430:	180f883a 	mov	r7,r3
    4434:	00074940 	call	7494 <__adddf3>
    4438:	dbc00917 	ldw	r15,36(sp)
    443c:	d9800a17 	ldw	r6,40(sp)
    4440:	180b883a 	mov	r5,r3
    4444:	780f883a 	mov	r7,r15
    4448:	1009883a 	mov	r4,r2
    444c:	00074940 	call	7494 <__adddf3>
    4450:	db000817 	ldw	r12,32(sp)
    4454:	102d883a 	mov	r22,r2
    4458:	182b883a 	mov	r21,r3
    445c:	6009883a 	mov	r4,r12
    4460:	0009a740 	call	9a74 <__floatsidf>
    4464:	b00d883a 	mov	r6,r22
    4468:	a80f883a 	mov	r7,r21
    446c:	e009883a 	mov	r4,fp
    4470:	b80b883a 	mov	r5,r23
    4474:	d8800315 	stw	r2,12(sp)
    4478:	d8c00215 	stw	r3,8(sp)
    447c:	00074940 	call	7494 <__adddf3>
    4480:	d9800017 	ldw	r6,0(sp)
    4484:	d9c00117 	ldw	r7,4(sp)
    4488:	1009883a 	mov	r4,r2
    448c:	180b883a 	mov	r5,r3
    4490:	00074940 	call	7494 <__adddf3>
    4494:	da800317 	ldw	r10,12(sp)
    4498:	da400217 	ldw	r9,8(sp)
    449c:	1009883a 	mov	r4,r2
    44a0:	500d883a 	mov	r6,r10
    44a4:	480f883a 	mov	r7,r9
    44a8:	180b883a 	mov	r5,r3
    44ac:	00074940 	call	7494 <__adddf3>
    44b0:	da800317 	ldw	r10,12(sp)
    44b4:	da400217 	ldw	r9,8(sp)
    44b8:	0009883a 	mov	r4,zero
    44bc:	500d883a 	mov	r6,r10
    44c0:	480f883a 	mov	r7,r9
    44c4:	180b883a 	mov	r5,r3
    44c8:	1827883a 	mov	r19,r3
    44cc:	00090940 	call	9094 <__subdf3>
    44d0:	d9800017 	ldw	r6,0(sp)
    44d4:	d9c00117 	ldw	r7,4(sp)
    44d8:	1009883a 	mov	r4,r2
    44dc:	180b883a 	mov	r5,r3
    44e0:	00090940 	call	9094 <__subdf3>
    44e4:	e00d883a 	mov	r6,fp
    44e8:	b80f883a 	mov	r7,r23
    44ec:	1009883a 	mov	r4,r2
    44f0:	180b883a 	mov	r5,r3
    44f4:	00090940 	call	9094 <__subdf3>
    44f8:	b009883a 	mov	r4,r22
    44fc:	100d883a 	mov	r6,r2
    4500:	180f883a 	mov	r7,r3
    4504:	a80b883a 	mov	r5,r21
    4508:	94bfffc4 	addi	r18,r18,-1
    450c:	00090940 	call	9094 <__subdf3>
    4510:	9528b03a 	or	r20,r18,r20
    4514:	102f883a 	mov	r23,r2
    4518:	182d883a 	mov	r22,r3
    451c:	a001471e 	bne	r20,zero,4a3c <__ieee754_pow+0xe74>
    4520:	052ffc34 	movhi	r20,49136
    4524:	880f883a 	mov	r7,r17
    4528:	8009883a 	mov	r4,r16
    452c:	880b883a 	mov	r5,r17
    4530:	000d883a 	mov	r6,zero
    4534:	00090940 	call	9094 <__subdf3>
    4538:	980f883a 	mov	r7,r19
    453c:	000d883a 	mov	r6,zero
    4540:	1009883a 	mov	r4,r2
    4544:	180b883a 	mov	r5,r3
    4548:	00088e80 	call	88e8 <__muldf3>
    454c:	800d883a 	mov	r6,r16
    4550:	880f883a 	mov	r7,r17
    4554:	b809883a 	mov	r4,r23
    4558:	b00b883a 	mov	r5,r22
    455c:	102b883a 	mov	r21,r2
    4560:	1825883a 	mov	r18,r3
    4564:	00088e80 	call	88e8 <__muldf3>
    4568:	a809883a 	mov	r4,r21
    456c:	900b883a 	mov	r5,r18
    4570:	100d883a 	mov	r6,r2
    4574:	180f883a 	mov	r7,r3
    4578:	00074940 	call	7494 <__adddf3>
    457c:	880f883a 	mov	r7,r17
    4580:	980b883a 	mov	r5,r19
    4584:	000d883a 	mov	r6,zero
    4588:	0009883a 	mov	r4,zero
    458c:	1027883a 	mov	r19,r2
    4590:	182b883a 	mov	r21,r3
    4594:	00088e80 	call	88e8 <__muldf3>
    4598:	a80b883a 	mov	r5,r21
    459c:	100d883a 	mov	r6,r2
    45a0:	180f883a 	mov	r7,r3
    45a4:	9809883a 	mov	r4,r19
    45a8:	1023883a 	mov	r17,r2
    45ac:	1825883a 	mov	r18,r3
    45b0:	00074940 	call	7494 <__adddf3>
    45b4:	01502434 	movhi	r5,16528
    45b8:	1821883a 	mov	r16,r3
    45bc:	8817883a 	mov	r11,r17
    45c0:	902f883a 	mov	r23,r18
    45c4:	102d883a 	mov	r22,r2
    45c8:	1839883a 	mov	fp,r3
    45cc:	1940fe16 	blt	r3,r5,49c8 <__ieee754_pow+0xe00>
    45d0:	1947c83a 	sub	r3,r3,r5
    45d4:	1d86b03a 	or	r3,r3,r22
    45d8:	1801ab1e 	bne	r3,zero,4c88 <__ieee754_pow+0x10c0>
    45dc:	01994b34 	movhi	r6,25900
    45e0:	01cf25f4 	movhi	r7,15511
    45e4:	31a0bf84 	addi	r6,r6,-32002
    45e8:	39c551c4 	addi	r7,r7,5447
    45ec:	9809883a 	mov	r4,r19
    45f0:	a80b883a 	mov	r5,r21
    45f4:	00074940 	call	7494 <__adddf3>
    45f8:	880d883a 	mov	r6,r17
    45fc:	900f883a 	mov	r7,r18
    4600:	b009883a 	mov	r4,r22
    4604:	800b883a 	mov	r5,r16
    4608:	1039883a 	mov	fp,r2
    460c:	182f883a 	mov	r23,r3
    4610:	00090940 	call	9094 <__subdf3>
    4614:	100d883a 	mov	r6,r2
    4618:	180f883a 	mov	r7,r3
    461c:	e009883a 	mov	r4,fp
    4620:	b80b883a 	mov	r5,r23
    4624:	00087180 	call	8718 <__gedf2>
    4628:	00819716 	blt	zero,r2,4c88 <__ieee754_pow+0x10c0>
    462c:	8009d53a 	srai	r4,r16,20
    4630:	2101ffcc 	andi	r4,r4,2047
    4634:	00c00434 	movhi	r3,16
    4638:	213f0084 	addi	r4,r4,-1022
    463c:	1909d83a 	sra	r4,r3,r4
    4640:	00800434 	movhi	r2,16
    4644:	10bfffc4 	addi	r2,r2,-1
    4648:	2407883a 	add	r3,r4,r16
    464c:	1809d53a 	srai	r4,r3,20
    4650:	18ac703a 	and	r22,r3,r2
    4654:	b5800434 	orhi	r22,r22,16
    4658:	2101ffcc 	andi	r4,r4,2047
    465c:	213f0044 	addi	r4,r4,-1023
    4660:	110fd83a 	sra	r7,r2,r4
    4664:	00800504 	movi	r2,20
    4668:	1109c83a 	sub	r4,r2,r4
    466c:	b105d83a 	sra	r2,r22,r4
    4670:	01ce303a 	nor	r7,zero,r7
    4674:	38ce703a 	and	r7,r7,r3
    4678:	d8800215 	stw	r2,8(sp)
    467c:	8000020e 	bge	r16,zero,4688 <__ieee754_pow+0xac0>
    4680:	0085c83a 	sub	r2,zero,r2
    4684:	d8800215 	stw	r2,8(sp)
    4688:	000d883a 	mov	r6,zero
    468c:	8809883a 	mov	r4,r17
    4690:	900b883a 	mov	r5,r18
    4694:	00090940 	call	9094 <__subdf3>
    4698:	100d883a 	mov	r6,r2
    469c:	180f883a 	mov	r7,r3
    46a0:	9809883a 	mov	r4,r19
    46a4:	a80b883a 	mov	r5,r21
    46a8:	182f883a 	mov	r23,r3
    46ac:	d8800015 	stw	r2,0(sp)
    46b0:	00074940 	call	7494 <__adddf3>
    46b4:	d8800217 	ldw	r2,8(sp)
    46b8:	dac00017 	ldw	r11,0(sp)
    46bc:	1839883a 	mov	fp,r3
    46c0:	1004953a 	slli	r2,r2,20
    46c4:	d8800115 	stw	r2,4(sp)
    46c8:	01cff9b4 	movhi	r7,16358
    46cc:	e00b883a 	mov	r5,fp
    46d0:	000d883a 	mov	r6,zero
    46d4:	39cb90c4 	addi	r7,r7,11843
    46d8:	0009883a 	mov	r4,zero
    46dc:	dac00015 	stw	r11,0(sp)
    46e0:	00088e80 	call	88e8 <__muldf3>
    46e4:	dac00017 	ldw	r11,0(sp)
    46e8:	b80f883a 	mov	r7,r23
    46ec:	e00b883a 	mov	r5,fp
    46f0:	580d883a 	mov	r6,r11
    46f4:	0009883a 	mov	r4,zero
    46f8:	182f883a 	mov	r23,r3
    46fc:	102d883a 	mov	r22,r2
    4700:	00090940 	call	9094 <__subdf3>
    4704:	9809883a 	mov	r4,r19
    4708:	a80b883a 	mov	r5,r21
    470c:	100d883a 	mov	r6,r2
    4710:	180f883a 	mov	r7,r3
    4714:	00090940 	call	9094 <__subdf3>
    4718:	01bfbeb4 	movhi	r6,65274
    471c:	01cff9b4 	movhi	r7,16358
    4720:	318e7bc4 	addi	r6,r6,14831
    4724:	39cb9084 	addi	r7,r7,11842
    4728:	1009883a 	mov	r4,r2
    472c:	180b883a 	mov	r5,r3
    4730:	00088e80 	call	88e8 <__muldf3>
    4734:	01832a34 	movhi	r6,3240
    4738:	01ef8834 	movhi	r7,48672
    473c:	e00b883a 	mov	r5,fp
    4740:	319b0e44 	addi	r6,r6,27705
    4744:	39d71844 	addi	r7,r7,23649
    4748:	0009883a 	mov	r4,zero
    474c:	1023883a 	mov	r17,r2
    4750:	1821883a 	mov	r16,r3
    4754:	00088e80 	call	88e8 <__muldf3>
    4758:	8809883a 	mov	r4,r17
    475c:	800b883a 	mov	r5,r16
    4760:	100d883a 	mov	r6,r2
    4764:	180f883a 	mov	r7,r3
    4768:	00074940 	call	7494 <__adddf3>
    476c:	b80b883a 	mov	r5,r23
    4770:	100d883a 	mov	r6,r2
    4774:	180f883a 	mov	r7,r3
    4778:	b009883a 	mov	r4,r22
    477c:	1027883a 	mov	r19,r2
    4780:	1825883a 	mov	r18,r3
    4784:	00074940 	call	7494 <__adddf3>
    4788:	b80f883a 	mov	r7,r23
    478c:	b00d883a 	mov	r6,r22
    4790:	1009883a 	mov	r4,r2
    4794:	180b883a 	mov	r5,r3
    4798:	1023883a 	mov	r17,r2
    479c:	1821883a 	mov	r16,r3
    47a0:	00090940 	call	9094 <__subdf3>
    47a4:	9809883a 	mov	r4,r19
    47a8:	900b883a 	mov	r5,r18
    47ac:	100d883a 	mov	r6,r2
    47b0:	180f883a 	mov	r7,r3
    47b4:	00090940 	call	9094 <__subdf3>
    47b8:	880d883a 	mov	r6,r17
    47bc:	800f883a 	mov	r7,r16
    47c0:	8809883a 	mov	r4,r17
    47c4:	800b883a 	mov	r5,r16
    47c8:	1039883a 	mov	fp,r2
    47cc:	182b883a 	mov	r21,r3
    47d0:	00088e80 	call	88e8 <__muldf3>
    47d4:	019caff4 	movhi	r6,29375
    47d8:	01cf99b4 	movhi	r7,15974
    47dc:	31a93404 	addi	r6,r6,-23344
    47e0:	39cdda44 	addi	r7,r7,14185
    47e4:	1009883a 	mov	r4,r2
    47e8:	180b883a 	mov	r5,r3
    47ec:	1027883a 	mov	r19,r2
    47f0:	1825883a 	mov	r18,r3
    47f4:	00088e80 	call	88e8 <__muldf3>
    47f8:	01b174b4 	movhi	r6,50642
    47fc:	01cfaf34 	movhi	r7,16060
    4800:	319afc44 	addi	r6,r6,27633
    4804:	39ef5044 	addi	r7,r7,-17087
    4808:	1009883a 	mov	r4,r2
    480c:	180b883a 	mov	r5,r3
    4810:	00090940 	call	9094 <__subdf3>
    4814:	980d883a 	mov	r6,r19
    4818:	900f883a 	mov	r7,r18
    481c:	1009883a 	mov	r4,r2
    4820:	180b883a 	mov	r5,r3
    4824:	00088e80 	call	88e8 <__muldf3>
    4828:	01abc9b4 	movhi	r6,44838
    482c:	01cfc474 	movhi	r7,16145
    4830:	31b78b04 	addi	r6,r6,-8660
    4834:	39d59a84 	addi	r7,r7,22122
    4838:	1009883a 	mov	r4,r2
    483c:	180b883a 	mov	r5,r3
    4840:	00074940 	call	7494 <__adddf3>
    4844:	980d883a 	mov	r6,r19
    4848:	900f883a 	mov	r7,r18
    484c:	1009883a 	mov	r4,r2
    4850:	180b883a 	mov	r5,r3
    4854:	00088e80 	call	88e8 <__muldf3>
    4858:	0185aff4 	movhi	r6,5823
    485c:	01cfd9f4 	movhi	r7,16231
    4860:	31af64c4 	addi	r6,r6,-17005
    4864:	39f05b04 	addi	r7,r7,-16020
    4868:	1009883a 	mov	r4,r2
    486c:	180b883a 	mov	r5,r3
    4870:	00090940 	call	9094 <__subdf3>
    4874:	980d883a 	mov	r6,r19
    4878:	900f883a 	mov	r7,r18
    487c:	1009883a 	mov	r4,r2
    4880:	180b883a 	mov	r5,r3
    4884:	00088e80 	call	88e8 <__muldf3>
    4888:	01955574 	movhi	r6,21845
    488c:	01cff174 	movhi	r7,16325
    4890:	31954f84 	addi	r6,r6,21822
    4894:	39d55544 	addi	r7,r7,21845
    4898:	1009883a 	mov	r4,r2
    489c:	180b883a 	mov	r5,r3
    48a0:	00074940 	call	7494 <__adddf3>
    48a4:	980d883a 	mov	r6,r19
    48a8:	900f883a 	mov	r7,r18
    48ac:	1009883a 	mov	r4,r2
    48b0:	180b883a 	mov	r5,r3
    48b4:	00088e80 	call	88e8 <__muldf3>
    48b8:	100d883a 	mov	r6,r2
    48bc:	180f883a 	mov	r7,r3
    48c0:	8809883a 	mov	r4,r17
    48c4:	800b883a 	mov	r5,r16
    48c8:	00090940 	call	9094 <__subdf3>
    48cc:	100d883a 	mov	r6,r2
    48d0:	180f883a 	mov	r7,r3
    48d4:	8809883a 	mov	r4,r17
    48d8:	800b883a 	mov	r5,r16
    48dc:	1027883a 	mov	r19,r2
    48e0:	1825883a 	mov	r18,r3
    48e4:	00088e80 	call	88e8 <__muldf3>
    48e8:	9809883a 	mov	r4,r19
    48ec:	900b883a 	mov	r5,r18
    48f0:	000d883a 	mov	r6,zero
    48f4:	01d00034 	movhi	r7,16384
    48f8:	182f883a 	mov	r23,r3
    48fc:	d8800015 	stw	r2,0(sp)
    4900:	00090940 	call	9094 <__subdf3>
    4904:	da400017 	ldw	r9,0(sp)
    4908:	100d883a 	mov	r6,r2
    490c:	180f883a 	mov	r7,r3
    4910:	4809883a 	mov	r4,r9
    4914:	b80b883a 	mov	r5,r23
    4918:	0007d840 	call	7d84 <__divdf3>
    491c:	e00d883a 	mov	r6,fp
    4920:	a80f883a 	mov	r7,r21
    4924:	8809883a 	mov	r4,r17
    4928:	800b883a 	mov	r5,r16
    492c:	1027883a 	mov	r19,r2
    4930:	1825883a 	mov	r18,r3
    4934:	00088e80 	call	88e8 <__muldf3>
    4938:	e00d883a 	mov	r6,fp
    493c:	a80f883a 	mov	r7,r21
    4940:	1009883a 	mov	r4,r2
    4944:	180b883a 	mov	r5,r3
    4948:	00074940 	call	7494 <__adddf3>
    494c:	100d883a 	mov	r6,r2
    4950:	180f883a 	mov	r7,r3
    4954:	9809883a 	mov	r4,r19
    4958:	900b883a 	mov	r5,r18
    495c:	00090940 	call	9094 <__subdf3>
    4960:	880d883a 	mov	r6,r17
    4964:	800f883a 	mov	r7,r16
    4968:	1009883a 	mov	r4,r2
    496c:	180b883a 	mov	r5,r3
    4970:	00090940 	call	9094 <__subdf3>
    4974:	100d883a 	mov	r6,r2
    4978:	0009883a 	mov	r4,zero
    497c:	014ffc34 	movhi	r5,16368
    4980:	180f883a 	mov	r7,r3
    4984:	00090940 	call	9094 <__subdf3>
    4988:	180b883a 	mov	r5,r3
    498c:	d8c00117 	ldw	r3,4(sp)
    4990:	1009883a 	mov	r4,r2
    4994:	194d883a 	add	r6,r3,r5
    4998:	3007d53a 	srai	r3,r6,20
    499c:	00c0b50e 	bge	zero,r3,4c74 <__ieee754_pow+0x10ac>
    49a0:	300b883a 	mov	r5,r6
    49a4:	000d883a 	mov	r6,zero
    49a8:	a00f883a 	mov	r7,r20
    49ac:	00088e80 	call	88e8 <__muldf3>
    49b0:	102d883a 	mov	r22,r2
    49b4:	003ca306 	br	3c44 <__ieee754_pow+0x7c>
    49b8:	88009016 	blt	r17,zero,4bfc <__ieee754_pow+0x1034>
    49bc:	202d883a 	mov	r22,r4
    49c0:	a807883a 	mov	r3,r21
    49c4:	003c9f06 	br	3c44 <__ieee754_pow+0x7c>
    49c8:	01200034 	movhi	r4,32768
    49cc:	213fffc4 	addi	r4,r4,-1
    49d0:	00902474 	movhi	r2,16529
    49d4:	1908703a 	and	r4,r3,r4
    49d8:	10b2ffc4 	addi	r2,r2,-13313
    49dc:	1100750e 	bge	r2,r4,4bb4 <__ieee754_pow+0xfec>
    49e0:	008fdbf4 	movhi	r2,16239
    49e4:	108d0004 	addi	r2,r2,13312
    49e8:	1885883a 	add	r2,r3,r2
    49ec:	1584b03a 	or	r2,r2,r22
    49f0:	10000b1e 	bne	r2,zero,4a20 <__ieee754_pow+0xe58>
    49f4:	880d883a 	mov	r6,r17
    49f8:	900f883a 	mov	r7,r18
    49fc:	b009883a 	mov	r4,r22
    4a00:	180b883a 	mov	r5,r3
    4a04:	00090940 	call	9094 <__subdf3>
    4a08:	980d883a 	mov	r6,r19
    4a0c:	a80f883a 	mov	r7,r21
    4a10:	1009883a 	mov	r4,r2
    4a14:	180b883a 	mov	r5,r3
    4a18:	00087180 	call	8718 <__gedf2>
    4a1c:	103f0316 	blt	r2,zero,462c <__ieee754_pow+0xa64>
    4a20:	0009883a 	mov	r4,zero
    4a24:	000d883a 	mov	r6,zero
    4a28:	000f883a 	mov	r7,zero
    4a2c:	a00b883a 	mov	r5,r20
    4a30:	00088000 	call	8800 <__ledf2>
    4a34:	1008803a 	cmplt	r4,r2,zero
    4a38:	003cb906 	br	3d20 <__ieee754_pow+0x158>
    4a3c:	050ffc34 	movhi	r20,16368
    4a40:	003eb806 	br	4524 <__ieee754_pow+0x95c>
    4a44:	000b883a 	mov	r5,zero
    4a48:	003d3906 	br	3f30 <__ieee754_pow+0x368>
    4a4c:	008ffc34 	movhi	r2,16368
    4a50:	10bfff84 	addi	r2,r2,-2
    4a54:	14fcb00e 	bge	r2,r19,3d18 <__ieee754_pow+0x150>
    4a58:	008ffc34 	movhi	r2,16368
    4a5c:	14fcf616 	blt	r2,r19,3e38 <__ieee754_pow+0x270>
    4a60:	000d883a 	mov	r6,zero
    4a64:	01cffc34 	movhi	r7,16368
    4a68:	180b883a 	mov	r5,r3
    4a6c:	00090940 	call	9094 <__subdf3>
    4a70:	01cffdf4 	movhi	r7,16375
    4a74:	01980034 	movhi	r6,24576
    4a78:	39c551c4 	addi	r7,r7,5447
    4a7c:	1009883a 	mov	r4,r2
    4a80:	180b883a 	mov	r5,r3
    4a84:	102b883a 	mov	r21,r2
    4a88:	1827883a 	mov	r19,r3
    4a8c:	00088e80 	call	88e8 <__muldf3>
    4a90:	01be17b4 	movhi	r6,63582
    4a94:	01cf9574 	movhi	r7,15957
    4a98:	a809883a 	mov	r4,r21
    4a9c:	980b883a 	mov	r5,r19
    4aa0:	31b7d104 	addi	r6,r6,-8380
    4aa4:	39eb82c4 	addi	r7,r7,-20981
    4aa8:	1039883a 	mov	fp,r2
    4aac:	182f883a 	mov	r23,r3
    4ab0:	00088e80 	call	88e8 <__muldf3>
    4ab4:	a809883a 	mov	r4,r21
    4ab8:	980b883a 	mov	r5,r19
    4abc:	000d883a 	mov	r6,zero
    4ac0:	01cff434 	movhi	r7,16336
    4ac4:	182d883a 	mov	r22,r3
    4ac8:	d8800215 	stw	r2,8(sp)
    4acc:	00088e80 	call	88e8 <__muldf3>
    4ad0:	01155574 	movhi	r4,21845
    4ad4:	014ff574 	movhi	r5,16341
    4ad8:	100d883a 	mov	r6,r2
    4adc:	180f883a 	mov	r7,r3
    4ae0:	21155544 	addi	r4,r4,21845
    4ae4:	29555544 	addi	r5,r5,21845
    4ae8:	00090940 	call	9094 <__subdf3>
    4aec:	a80d883a 	mov	r6,r21
    4af0:	980f883a 	mov	r7,r19
    4af4:	1009883a 	mov	r4,r2
    4af8:	180b883a 	mov	r5,r3
    4afc:	00088e80 	call	88e8 <__muldf3>
    4b00:	100d883a 	mov	r6,r2
    4b04:	180f883a 	mov	r7,r3
    4b08:	0009883a 	mov	r4,zero
    4b0c:	014ff834 	movhi	r5,16352
    4b10:	00090940 	call	9094 <__subdf3>
    4b14:	a80d883a 	mov	r6,r21
    4b18:	980f883a 	mov	r7,r19
    4b1c:	a809883a 	mov	r4,r21
    4b20:	980b883a 	mov	r5,r19
    4b24:	d8800115 	stw	r2,4(sp)
    4b28:	d8c00015 	stw	r3,0(sp)
    4b2c:	00088e80 	call	88e8 <__muldf3>
    4b30:	da800117 	ldw	r10,4(sp)
    4b34:	da400017 	ldw	r9,0(sp)
    4b38:	100d883a 	mov	r6,r2
    4b3c:	5009883a 	mov	r4,r10
    4b40:	480b883a 	mov	r5,r9
    4b44:	180f883a 	mov	r7,r3
    4b48:	00088e80 	call	88e8 <__muldf3>
    4b4c:	01994b34 	movhi	r6,25900
    4b50:	01cffdf4 	movhi	r7,16375
    4b54:	31a0bf84 	addi	r6,r6,-32002
    4b58:	39c551c4 	addi	r7,r7,5447
    4b5c:	1009883a 	mov	r4,r2
    4b60:	180b883a 	mov	r5,r3
    4b64:	00088e80 	call	88e8 <__muldf3>
    4b68:	da000217 	ldw	r8,8(sp)
    4b6c:	b00b883a 	mov	r5,r22
    4b70:	100d883a 	mov	r6,r2
    4b74:	4009883a 	mov	r4,r8
    4b78:	180f883a 	mov	r7,r3
    4b7c:	00090940 	call	9094 <__subdf3>
    4b80:	100d883a 	mov	r6,r2
    4b84:	180f883a 	mov	r7,r3
    4b88:	e009883a 	mov	r4,fp
    4b8c:	b80b883a 	mov	r5,r23
    4b90:	102d883a 	mov	r22,r2
    4b94:	182b883a 	mov	r21,r3
    4b98:	00074940 	call	7494 <__adddf3>
    4b9c:	1827883a 	mov	r19,r3
    4ba0:	e00d883a 	mov	r6,fp
    4ba4:	b80f883a 	mov	r7,r23
    4ba8:	0009883a 	mov	r4,zero
    4bac:	180b883a 	mov	r5,r3
    4bb0:	003e5006 	br	44f4 <__ieee754_pow+0x92c>
    4bb4:	008ff834 	movhi	r2,16352
    4bb8:	11004316 	blt	r2,r4,4cc8 <__ieee754_pow+0x1100>
    4bbc:	d8000115 	stw	zero,4(sp)
    4bc0:	d8000215 	stw	zero,8(sp)
    4bc4:	003ec006 	br	46c8 <__ieee754_pow+0xb00>
    4bc8:	0007883a 	mov	r3,zero
    4bcc:	003c1d06 	br	3c44 <__ieee754_pow+0x7c>
    4bd0:	883ffd0e 	bge	r17,zero,4bc8 <__ieee754_pow+0x1000>
    4bd4:	88e0003c 	xorhi	r3,r17,32768
    4bd8:	003c1a06 	br	3c44 <__ieee754_pow+0x7c>
    4bdc:	803c781e 	bne	r16,zero,3dc0 <__ieee754_pow+0x1f8>
    4be0:	00c00504 	movi	r3,20
    4be4:	1885c83a 	sub	r2,r3,r2
    4be8:	3087d83a 	sra	r3,r6,r2
    4bec:	1884983a 	sll	r2,r3,r2
    4bf0:	11803126 	beq	r2,r6,4cb8 <__ieee754_pow+0x10f0>
    4bf4:	0025883a 	mov	r18,zero
    4bf8:	003c5d06 	br	3d70 <__ieee754_pow+0x1a8>
    4bfc:	200d883a 	mov	r6,r4
    4c00:	a80f883a 	mov	r7,r21
    4c04:	0009883a 	mov	r4,zero
    4c08:	014ffc34 	movhi	r5,16368
    4c0c:	0007d840 	call	7d84 <__divdf3>
    4c10:	102d883a 	mov	r22,r2
    4c14:	003c0b06 	br	3c44 <__ieee754_pow+0x7c>
    4c18:	200d883a 	mov	r6,r4
    4c1c:	a80f883a 	mov	r7,r21
    4c20:	a80b883a 	mov	r5,r21
    4c24:	00088e80 	call	88e8 <__muldf3>
    4c28:	102d883a 	mov	r22,r2
    4c2c:	003c0506 	br	3c44 <__ieee754_pow+0x7c>
    4c30:	94800058 	cmpnei	r18,r18,1
    4c34:	903c031e 	bne	r18,zero,3c44 <__ieee754_pow+0x7c>
    4c38:	18e0003c 	xorhi	r3,r3,32768
    4c3c:	003c0106 	br	3c44 <__ieee754_pow+0x7c>
    4c40:	008ff8f4 	movhi	r2,16355
    4c44:	10ae00c4 	addi	r2,r2,-18429
    4c48:	00d0f434 	movhi	r3,17360
    4c4c:	03cf9374 	movhi	r15,15949
    4c50:	01100034 	movhi	r4,16384
    4c54:	d8800115 	stw	r2,4(sp)
    4c58:	18b40184 	addi	r2,r3,-12282
    4c5c:	d9000015 	stw	r4,0(sp)
    4c60:	d8800a15 	stw	r2,40(sp)
    4c64:	7bff7ac4 	addi	r15,r15,-533
    4c68:	05c00134 	movhi	r23,4
    4c6c:	034ffe34 	movhi	r13,16376
    4c70:	003cc506 	br	3f88 <__ieee754_pow+0x3c0>
    4c74:	d9800217 	ldw	r6,8(sp)
    4c78:	0006db00 	call	6db0 <scalbn>
    4c7c:	1009883a 	mov	r4,r2
    4c80:	180b883a 	mov	r5,r3
    4c84:	003f4706 	br	49a4 <__ieee754_pow+0xddc>
    4c88:	0009883a 	mov	r4,zero
    4c8c:	000d883a 	mov	r6,zero
    4c90:	000f883a 	mov	r7,zero
    4c94:	a00b883a 	mov	r5,r20
    4c98:	00088000 	call	8800 <__ledf2>
    4c9c:	1008803a 	cmplt	r4,r2,zero
    4ca0:	003c6706 	br	3e40 <__ieee754_pow+0x278>
    4ca4:	18c0004c 	andi	r3,r3,1
    4ca8:	04800084 	movi	r18,2
    4cac:	90e5c83a 	sub	r18,r18,r3
    4cb0:	803c2f26 	beq	r16,zero,3d70 <__ieee754_pow+0x1a8>
    4cb4:	003c0906 	br	3cdc <__ieee754_pow+0x114>
    4cb8:	18c0004c 	andi	r3,r3,1
    4cbc:	04800084 	movi	r18,2
    4cc0:	90e5c83a 	sub	r18,r18,r3
    4cc4:	003c2a06 	br	3d70 <__ieee754_pow+0x1a8>
    4cc8:	2009d53a 	srai	r4,r4,20
    4ccc:	003e5906 	br	4634 <__ieee754_pow+0xa6c>

00004cd0 <__ieee754_rem_pio2>:
    4cd0:	deffea04 	addi	sp,sp,-88
    4cd4:	dc000c15 	stw	r16,48(sp)
    4cd8:	04200034 	movhi	r16,32768
    4cdc:	843fffc4 	addi	r16,r16,-1
    4ce0:	008ffa74 	movhi	r2,16361
    4ce4:	dcc00f15 	stw	r19,60(sp)
    4ce8:	dc800e15 	stw	r18,56(sp)
    4cec:	dc400d15 	stw	r17,52(sp)
    4cf0:	dfc01515 	stw	ra,84(sp)
    4cf4:	df001415 	stw	fp,80(sp)
    4cf8:	ddc01315 	stw	r23,76(sp)
    4cfc:	dd801215 	stw	r22,72(sp)
    4d00:	dd401115 	stw	r21,68(sp)
    4d04:	dd001015 	stw	r20,64(sp)
    4d08:	2c20703a 	and	r16,r5,r16
    4d0c:	10887ec4 	addi	r2,r2,8699
    4d10:	2825883a 	mov	r18,r5
    4d14:	2027883a 	mov	r19,r4
    4d18:	3023883a 	mov	r17,r6
    4d1c:	14008b0e 	bge	r2,r16,4f4c <__ieee754_rem_pio2+0x27c>
    4d20:	009000f4 	movhi	r2,16387
    4d24:	10b65ec4 	addi	r2,r2,-9861
    4d28:	14002f16 	blt	r2,r16,4de8 <__ieee754_rem_pio2+0x118>
    4d2c:	01cffe74 	movhi	r7,16377
    4d30:	01951034 	movhi	r6,21568
    4d34:	39c87ec4 	addi	r7,r7,8699
    4d38:	01417e0e 	bge	zero,r5,5334 <__ieee754_rem_pio2+0x664>
    4d3c:	00090940 	call	9094 <__subdf3>
    4d40:	018ffe74 	movhi	r6,16377
    4d44:	31887ec4 	addi	r6,r6,8699
    4d48:	1009883a 	mov	r4,r2
    4d4c:	180b883a 	mov	r5,r3
    4d50:	8180cb26 	beq	r16,r6,5080 <__ieee754_rem_pio2+0x3b0>
    4d54:	018698b4 	movhi	r6,6754
    4d58:	01cf7474 	movhi	r7,15825
    4d5c:	3198cc44 	addi	r6,r6,25393
    4d60:	39ed1844 	addi	r7,r7,-19359
    4d64:	d8800315 	stw	r2,12(sp)
    4d68:	d8c00215 	stw	r3,8(sp)
    4d6c:	00090940 	call	9094 <__subdf3>
    4d70:	d9000317 	ldw	r4,12(sp)
    4d74:	d9400217 	ldw	r5,8(sp)
    4d78:	100d883a 	mov	r6,r2
    4d7c:	180f883a 	mov	r7,r3
    4d80:	88800015 	stw	r2,0(r17)
    4d84:	88c00115 	stw	r3,4(r17)
    4d88:	00090940 	call	9094 <__subdf3>
    4d8c:	018698b4 	movhi	r6,6754
    4d90:	01cf7474 	movhi	r7,15825
    4d94:	3198cc44 	addi	r6,r6,25393
    4d98:	39ed1844 	addi	r7,r7,-19359
    4d9c:	1009883a 	mov	r4,r2
    4da0:	180b883a 	mov	r5,r3
    4da4:	00090940 	call	9094 <__subdf3>
    4da8:	88800215 	stw	r2,8(r17)
    4dac:	88c00315 	stw	r3,12(r17)
    4db0:	05000044 	movi	r20,1
    4db4:	a005883a 	mov	r2,r20
    4db8:	dfc01517 	ldw	ra,84(sp)
    4dbc:	df001417 	ldw	fp,80(sp)
    4dc0:	ddc01317 	ldw	r23,76(sp)
    4dc4:	dd801217 	ldw	r22,72(sp)
    4dc8:	dd401117 	ldw	r21,68(sp)
    4dcc:	dd001017 	ldw	r20,64(sp)
    4dd0:	dcc00f17 	ldw	r19,60(sp)
    4dd4:	dc800e17 	ldw	r18,56(sp)
    4dd8:	dc400d17 	ldw	r17,52(sp)
    4ddc:	dc000c17 	ldw	r16,48(sp)
    4de0:	dec01604 	addi	sp,sp,88
    4de4:	f800283a 	ret
    4de8:	00904e74 	movhi	r2,16697
    4dec:	10887ec4 	addi	r2,r2,8699
    4df0:	14005c16 	blt	r2,r16,4f64 <__ieee754_rem_pio2+0x294>
    4df4:	019b72b4 	movhi	r6,28106
    4df8:	01cff934 	movhi	r7,16356
    4dfc:	31b220c4 	addi	r6,r6,-14205
    4e00:	39d7cc04 	addi	r7,r7,24368
    4e04:	800b883a 	mov	r5,r16
    4e08:	00088e80 	call	88e8 <__muldf3>
    4e0c:	000d883a 	mov	r6,zero
    4e10:	01cff834 	movhi	r7,16352
    4e14:	1009883a 	mov	r4,r2
    4e18:	180b883a 	mov	r5,r3
    4e1c:	00074940 	call	7494 <__adddf3>
    4e20:	180b883a 	mov	r5,r3
    4e24:	1009883a 	mov	r4,r2
    4e28:	00099f40 	call	99f4 <__fixdfsi>
    4e2c:	1009883a 	mov	r4,r2
    4e30:	1029883a 	mov	r20,r2
    4e34:	0009a740 	call	9a74 <__floatsidf>
    4e38:	01cffe74 	movhi	r7,16377
    4e3c:	01951034 	movhi	r6,21568
    4e40:	39c87ec4 	addi	r7,r7,8699
    4e44:	1009883a 	mov	r4,r2
    4e48:	180b883a 	mov	r5,r3
    4e4c:	102d883a 	mov	r22,r2
    4e50:	182b883a 	mov	r21,r3
    4e54:	00088e80 	call	88e8 <__muldf3>
    4e58:	9809883a 	mov	r4,r19
    4e5c:	100d883a 	mov	r6,r2
    4e60:	180f883a 	mov	r7,r3
    4e64:	800b883a 	mov	r5,r16
    4e68:	00090940 	call	9094 <__subdf3>
    4e6c:	018698b4 	movhi	r6,6754
    4e70:	01cf7474 	movhi	r7,15825
    4e74:	3198cc44 	addi	r6,r6,25393
    4e78:	39ed1844 	addi	r7,r7,-19359
    4e7c:	b009883a 	mov	r4,r22
    4e80:	a80b883a 	mov	r5,r21
    4e84:	1039883a 	mov	fp,r2
    4e88:	d8c00215 	stw	r3,8(sp)
    4e8c:	00088e80 	call	88e8 <__muldf3>
    4e90:	db000217 	ldw	r12,8(sp)
    4e94:	e009883a 	mov	r4,fp
    4e98:	100d883a 	mov	r6,r2
    4e9c:	600b883a 	mov	r5,r12
    4ea0:	180f883a 	mov	r7,r3
    4ea4:	db000315 	stw	r12,12(sp)
    4ea8:	102f883a 	mov	r23,r2
    4eac:	1827883a 	mov	r19,r3
    4eb0:	df000415 	stw	fp,16(sp)
    4eb4:	00090940 	call	9094 <__subdf3>
    4eb8:	a1000808 	cmpgei	r4,r20,32
    4ebc:	db000317 	ldw	r12,12(sp)
    4ec0:	1017883a 	mov	r11,r2
    4ec4:	1815883a 	mov	r10,r3
    4ec8:	e01b883a 	mov	r13,fp
    4ecc:	2000851e 	bne	r4,zero,50e4 <__ieee754_rem_pio2+0x414>
    4ed0:	a00a90ba 	slli	r5,r20,2
    4ed4:	01000074 	movhi	r4,1
    4ed8:	2909883a 	add	r4,r5,r4
    4edc:	211eae17 	ldw	r4,31416(r4)
    4ee0:	24008026 	beq	r4,r16,50e4 <__ieee754_rem_pio2+0x414>
    4ee4:	88800015 	stw	r2,0(r17)
    4ee8:	88c00115 	stw	r3,4(r17)
    4eec:	580d883a 	mov	r6,r11
    4ef0:	500f883a 	mov	r7,r10
    4ef4:	6809883a 	mov	r4,r13
    4ef8:	600b883a 	mov	r5,r12
    4efc:	dac00315 	stw	r11,12(sp)
    4f00:	da800215 	stw	r10,8(sp)
    4f04:	00090940 	call	9094 <__subdf3>
    4f08:	b80d883a 	mov	r6,r23
    4f0c:	980f883a 	mov	r7,r19
    4f10:	1009883a 	mov	r4,r2
    4f14:	180b883a 	mov	r5,r3
    4f18:	00090940 	call	9094 <__subdf3>
    4f1c:	88800215 	stw	r2,8(r17)
    4f20:	88c00315 	stw	r3,12(r17)
    4f24:	903fa30e 	bge	r18,zero,4db4 <__ieee754_rem_pio2+0xe4>
    4f28:	da800217 	ldw	r10,8(sp)
    4f2c:	dac00317 	ldw	r11,12(sp)
    4f30:	18e0003c 	xorhi	r3,r3,32768
    4f34:	52a0003c 	xorhi	r10,r10,32768
    4f38:	8ac00015 	stw	r11,0(r17)
    4f3c:	8a800115 	stw	r10,4(r17)
    4f40:	88c00315 	stw	r3,12(r17)
    4f44:	0529c83a 	sub	r20,zero,r20
    4f48:	003f9a06 	br	4db4 <__ieee754_rem_pio2+0xe4>
    4f4c:	89000015 	stw	r4,0(r17)
    4f50:	89400115 	stw	r5,4(r17)
    4f54:	30000215 	stw	zero,8(r6)
    4f58:	30000315 	stw	zero,12(r6)
    4f5c:	0029883a 	mov	r20,zero
    4f60:	003f9406 	br	4db4 <__ieee754_rem_pio2+0xe4>
    4f64:	009ffc34 	movhi	r2,32752
    4f68:	8080670e 	bge	r16,r2,5108 <__ieee754_rem_pio2+0x438>
    4f6c:	8029d53a 	srai	r20,r16,20
    4f70:	a53efa84 	addi	r20,r20,-1046
    4f74:	a00a953a 	slli	r5,r20,20
    4f78:	8161c83a 	sub	r16,r16,r5
    4f7c:	800b883a 	mov	r5,r16
    4f80:	00099f40 	call	99f4 <__fixdfsi>
    4f84:	1009883a 	mov	r4,r2
    4f88:	0009a740 	call	9a74 <__floatsidf>
    4f8c:	9809883a 	mov	r4,r19
    4f90:	800b883a 	mov	r5,r16
    4f94:	100d883a 	mov	r6,r2
    4f98:	180f883a 	mov	r7,r3
    4f9c:	d8800615 	stw	r2,24(sp)
    4fa0:	d8c00715 	stw	r3,28(sp)
    4fa4:	00090940 	call	9094 <__subdf3>
    4fa8:	000d883a 	mov	r6,zero
    4fac:	01d05c34 	movhi	r7,16752
    4fb0:	1009883a 	mov	r4,r2
    4fb4:	180b883a 	mov	r5,r3
    4fb8:	00088e80 	call	88e8 <__muldf3>
    4fbc:	180b883a 	mov	r5,r3
    4fc0:	1009883a 	mov	r4,r2
    4fc4:	1821883a 	mov	r16,r3
    4fc8:	1027883a 	mov	r19,r2
    4fcc:	00099f40 	call	99f4 <__fixdfsi>
    4fd0:	1009883a 	mov	r4,r2
    4fd4:	102b883a 	mov	r21,r2
    4fd8:	0009a740 	call	9a74 <__floatsidf>
    4fdc:	100d883a 	mov	r6,r2
    4fe0:	180f883a 	mov	r7,r3
    4fe4:	9809883a 	mov	r4,r19
    4fe8:	800b883a 	mov	r5,r16
    4fec:	d8800815 	stw	r2,32(sp)
    4ff0:	d8c00915 	stw	r3,36(sp)
    4ff4:	00090940 	call	9094 <__subdf3>
    4ff8:	000d883a 	mov	r6,zero
    4ffc:	01d05c34 	movhi	r7,16752
    5000:	1009883a 	mov	r4,r2
    5004:	180b883a 	mov	r5,r3
    5008:	00088e80 	call	88e8 <__muldf3>
    500c:	1009883a 	mov	r4,r2
    5010:	180b883a 	mov	r5,r3
    5014:	000d883a 	mov	r6,zero
    5018:	000f883a 	mov	r7,zero
    501c:	d8800a15 	stw	r2,40(sp)
    5020:	d8c00b15 	stw	r3,44(sp)
    5024:	00086980 	call	8698 <__eqdf2>
    5028:	1000c01e 	bne	r2,zero,532c <__ieee754_rem_pio2+0x65c>
    502c:	a800bd1e 	bne	r21,zero,5324 <__ieee754_rem_pio2+0x654>
    5030:	01c00044 	movi	r7,1
    5034:	00800074 	movhi	r2,1
    5038:	109ecf04 	addi	r2,r2,31548
    503c:	d8800115 	stw	r2,4(sp)
    5040:	00800084 	movi	r2,2
    5044:	a00d883a 	mov	r6,r20
    5048:	d8800015 	stw	r2,0(sp)
    504c:	880b883a 	mov	r5,r17
    5050:	d9000604 	addi	r4,sp,24
    5054:	0005b340 	call	5b34 <__kernel_rem_pio2>
    5058:	1029883a 	mov	r20,r2
    505c:	903f550e 	bge	r18,zero,4db4 <__ieee754_rem_pio2+0xe4>
    5060:	88c00117 	ldw	r3,4(r17)
    5064:	88800317 	ldw	r2,12(r17)
    5068:	0529c83a 	sub	r20,zero,r20
    506c:	18e0003c 	xorhi	r3,r3,32768
    5070:	10a0003c 	xorhi	r2,r2,32768
    5074:	88c00115 	stw	r3,4(r17)
    5078:	88800315 	stw	r2,12(r17)
    507c:	003f4d06 	br	4db4 <__ieee754_rem_pio2+0xe4>
    5080:	01cf7474 	movhi	r7,15825
    5084:	01869834 	movhi	r6,6752
    5088:	39ed1844 	addi	r7,r7,-19359
    508c:	00090940 	call	9094 <__subdf3>
    5090:	018b80f4 	movhi	r6,11779
    5094:	01cee8f4 	movhi	r7,15267
    5098:	319c1cc4 	addi	r6,r6,28787
    509c:	39c66284 	addi	r7,r7,6538
    50a0:	1009883a 	mov	r4,r2
    50a4:	180b883a 	mov	r5,r3
    50a8:	1025883a 	mov	r18,r2
    50ac:	1821883a 	mov	r16,r3
    50b0:	00090940 	call	9094 <__subdf3>
    50b4:	100d883a 	mov	r6,r2
    50b8:	180f883a 	mov	r7,r3
    50bc:	9009883a 	mov	r4,r18
    50c0:	800b883a 	mov	r5,r16
    50c4:	88800015 	stw	r2,0(r17)
    50c8:	88c00115 	stw	r3,4(r17)
    50cc:	00090940 	call	9094 <__subdf3>
    50d0:	018b80f4 	movhi	r6,11779
    50d4:	01cee8f4 	movhi	r7,15267
    50d8:	319c1cc4 	addi	r6,r6,28787
    50dc:	39c66284 	addi	r7,r7,6538
    50e0:	003f2e06 	br	4d9c <__ieee754_rem_pio2+0xcc>
    50e4:	1812d53a 	srli	r9,r3,20
    50e8:	8021d53a 	srai	r16,r16,20
    50ec:	4a41ffcc 	andi	r9,r9,2047
    50f0:	8253c83a 	sub	r9,r16,r9
    50f4:	4a400448 	cmpgei	r9,r9,17
    50f8:	48000c1e 	bne	r9,zero,512c <__ieee754_rem_pio2+0x45c>
    50fc:	88800015 	stw	r2,0(r17)
    5100:	88c00115 	stw	r3,4(r17)
    5104:	003f7906 	br	4eec <__ieee754_rem_pio2+0x21c>
    5108:	200d883a 	mov	r6,r4
    510c:	280f883a 	mov	r7,r5
    5110:	00090940 	call	9094 <__subdf3>
    5114:	88800215 	stw	r2,8(r17)
    5118:	88c00315 	stw	r3,12(r17)
    511c:	88800015 	stw	r2,0(r17)
    5120:	88c00115 	stw	r3,4(r17)
    5124:	0029883a 	mov	r20,zero
    5128:	003f2206 	br	4db4 <__ieee754_rem_pio2+0xe4>
    512c:	01cf7474 	movhi	r7,15825
    5130:	01869834 	movhi	r6,6752
    5134:	39ed1844 	addi	r7,r7,-19359
    5138:	b009883a 	mov	r4,r22
    513c:	a80b883a 	mov	r5,r21
    5140:	00088e80 	call	88e8 <__muldf3>
    5144:	d9400217 	ldw	r5,8(sp)
    5148:	100d883a 	mov	r6,r2
    514c:	180f883a 	mov	r7,r3
    5150:	e009883a 	mov	r4,fp
    5154:	102f883a 	mov	r23,r2
    5158:	1827883a 	mov	r19,r3
    515c:	00090940 	call	9094 <__subdf3>
    5160:	d9400217 	ldw	r5,8(sp)
    5164:	100d883a 	mov	r6,r2
    5168:	180f883a 	mov	r7,r3
    516c:	e009883a 	mov	r4,fp
    5170:	d8800315 	stw	r2,12(sp)
    5174:	d8c00415 	stw	r3,16(sp)
    5178:	00090940 	call	9094 <__subdf3>
    517c:	b80d883a 	mov	r6,r23
    5180:	980f883a 	mov	r7,r19
    5184:	1009883a 	mov	r4,r2
    5188:	180b883a 	mov	r5,r3
    518c:	00090940 	call	9094 <__subdf3>
    5190:	018b80f4 	movhi	r6,11779
    5194:	01cee8f4 	movhi	r7,15267
    5198:	319c1cc4 	addi	r6,r6,28787
    519c:	39c66284 	addi	r7,r7,6538
    51a0:	b009883a 	mov	r4,r22
    51a4:	a80b883a 	mov	r5,r21
    51a8:	102f883a 	mov	r23,r2
    51ac:	1827883a 	mov	r19,r3
    51b0:	00088e80 	call	88e8 <__muldf3>
    51b4:	b80d883a 	mov	r6,r23
    51b8:	980f883a 	mov	r7,r19
    51bc:	1009883a 	mov	r4,r2
    51c0:	180b883a 	mov	r5,r3
    51c4:	00090940 	call	9094 <__subdf3>
    51c8:	da400417 	ldw	r9,16(sp)
    51cc:	db800317 	ldw	r14,12(sp)
    51d0:	100d883a 	mov	r6,r2
    51d4:	480b883a 	mov	r5,r9
    51d8:	7009883a 	mov	r4,r14
    51dc:	180f883a 	mov	r7,r3
    51e0:	da400215 	stw	r9,8(sp)
    51e4:	102f883a 	mov	r23,r2
    51e8:	1827883a 	mov	r19,r3
    51ec:	00090940 	call	9094 <__subdf3>
    51f0:	1815883a 	mov	r10,r3
    51f4:	1806d53a 	srli	r3,r3,20
    51f8:	da400217 	ldw	r9,8(sp)
    51fc:	db800317 	ldw	r14,12(sp)
    5200:	18c1ffcc 	andi	r3,r3,2047
    5204:	80e1c83a 	sub	r16,r16,r3
    5208:	84000c88 	cmpgei	r16,r16,50
    520c:	1017883a 	mov	r11,r2
    5210:	80003f26 	beq	r16,zero,5310 <__ieee754_rem_pio2+0x640>
    5214:	01cee8f4 	movhi	r7,15267
    5218:	018b8034 	movhi	r6,11776
    521c:	39c66284 	addi	r7,r7,6538
    5220:	b009883a 	mov	r4,r22
    5224:	a80b883a 	mov	r5,r21
    5228:	da400315 	stw	r9,12(sp)
    522c:	db800215 	stw	r14,8(sp)
    5230:	00088e80 	call	88e8 <__muldf3>
    5234:	db800217 	ldw	r14,8(sp)
    5238:	da400317 	ldw	r9,12(sp)
    523c:	100d883a 	mov	r6,r2
    5240:	7009883a 	mov	r4,r14
    5244:	480b883a 	mov	r5,r9
    5248:	180f883a 	mov	r7,r3
    524c:	1027883a 	mov	r19,r2
    5250:	1821883a 	mov	r16,r3
    5254:	db800515 	stw	r14,20(sp)
    5258:	da400415 	stw	r9,16(sp)
    525c:	00090940 	call	9094 <__subdf3>
    5260:	db800517 	ldw	r14,20(sp)
    5264:	da400417 	ldw	r9,16(sp)
    5268:	100d883a 	mov	r6,r2
    526c:	7009883a 	mov	r4,r14
    5270:	480b883a 	mov	r5,r9
    5274:	180f883a 	mov	r7,r3
    5278:	d8800315 	stw	r2,12(sp)
    527c:	d8c00215 	stw	r3,8(sp)
    5280:	00090940 	call	9094 <__subdf3>
    5284:	980d883a 	mov	r6,r19
    5288:	800f883a 	mov	r7,r16
    528c:	1009883a 	mov	r4,r2
    5290:	180b883a 	mov	r5,r3
    5294:	00090940 	call	9094 <__subdf3>
    5298:	01894834 	movhi	r6,9504
    529c:	01ce5f34 	movhi	r7,14716
    52a0:	31927044 	addi	r6,r6,18881
    52a4:	39e0e684 	addi	r7,r7,-31846
    52a8:	b009883a 	mov	r4,r22
    52ac:	a80b883a 	mov	r5,r21
    52b0:	1027883a 	mov	r19,r2
    52b4:	1821883a 	mov	r16,r3
    52b8:	00088e80 	call	88e8 <__muldf3>
    52bc:	980d883a 	mov	r6,r19
    52c0:	800f883a 	mov	r7,r16
    52c4:	1009883a 	mov	r4,r2
    52c8:	180b883a 	mov	r5,r3
    52cc:	00090940 	call	9094 <__subdf3>
    52d0:	db400317 	ldw	r13,12(sp)
    52d4:	db000217 	ldw	r12,8(sp)
    52d8:	100d883a 	mov	r6,r2
    52dc:	6809883a 	mov	r4,r13
    52e0:	600b883a 	mov	r5,r12
    52e4:	180f883a 	mov	r7,r3
    52e8:	102f883a 	mov	r23,r2
    52ec:	1827883a 	mov	r19,r3
    52f0:	00090940 	call	9094 <__subdf3>
    52f4:	db400317 	ldw	r13,12(sp)
    52f8:	db000217 	ldw	r12,8(sp)
    52fc:	1017883a 	mov	r11,r2
    5300:	1815883a 	mov	r10,r3
    5304:	88800015 	stw	r2,0(r17)
    5308:	88c00115 	stw	r3,4(r17)
    530c:	003ef706 	br	4eec <__ieee754_rem_pio2+0x21c>
    5310:	88800015 	stw	r2,0(r17)
    5314:	8a800115 	stw	r10,4(r17)
    5318:	701b883a 	mov	r13,r14
    531c:	4819883a 	mov	r12,r9
    5320:	003ef206 	br	4eec <__ieee754_rem_pio2+0x21c>
    5324:	01c00084 	movi	r7,2
    5328:	003f4206 	br	5034 <__ieee754_rem_pio2+0x364>
    532c:	01c000c4 	movi	r7,3
    5330:	003f4006 	br	5034 <__ieee754_rem_pio2+0x364>
    5334:	00074940 	call	7494 <__adddf3>
    5338:	010ffe74 	movhi	r4,16377
    533c:	21087ec4 	addi	r4,r4,8699
    5340:	1027883a 	mov	r19,r2
    5344:	1825883a 	mov	r18,r3
    5348:	81001926 	beq	r16,r4,53b0 <__ieee754_rem_pio2+0x6e0>
    534c:	018698b4 	movhi	r6,6754
    5350:	01cf7474 	movhi	r7,15825
    5354:	3198cc44 	addi	r6,r6,25393
    5358:	39ed1844 	addi	r7,r7,-19359
    535c:	1009883a 	mov	r4,r2
    5360:	180b883a 	mov	r5,r3
    5364:	00074940 	call	7494 <__adddf3>
    5368:	100d883a 	mov	r6,r2
    536c:	180f883a 	mov	r7,r3
    5370:	9809883a 	mov	r4,r19
    5374:	900b883a 	mov	r5,r18
    5378:	88800015 	stw	r2,0(r17)
    537c:	88c00115 	stw	r3,4(r17)
    5380:	00090940 	call	9094 <__subdf3>
    5384:	018698b4 	movhi	r6,6754
    5388:	01cf7474 	movhi	r7,15825
    538c:	3198cc44 	addi	r6,r6,25393
    5390:	39ed1844 	addi	r7,r7,-19359
    5394:	1009883a 	mov	r4,r2
    5398:	180b883a 	mov	r5,r3
    539c:	00074940 	call	7494 <__adddf3>
    53a0:	88800215 	stw	r2,8(r17)
    53a4:	88c00315 	stw	r3,12(r17)
    53a8:	053fffc4 	movi	r20,-1
    53ac:	003e8106 	br	4db4 <__ieee754_rem_pio2+0xe4>
    53b0:	01cf7474 	movhi	r7,15825
    53b4:	01869834 	movhi	r6,6752
    53b8:	39ed1844 	addi	r7,r7,-19359
    53bc:	1009883a 	mov	r4,r2
    53c0:	180b883a 	mov	r5,r3
    53c4:	00074940 	call	7494 <__adddf3>
    53c8:	018b80f4 	movhi	r6,11779
    53cc:	01cee8f4 	movhi	r7,15267
    53d0:	319c1cc4 	addi	r6,r6,28787
    53d4:	39c66284 	addi	r7,r7,6538
    53d8:	1009883a 	mov	r4,r2
    53dc:	180b883a 	mov	r5,r3
    53e0:	1025883a 	mov	r18,r2
    53e4:	1821883a 	mov	r16,r3
    53e8:	00074940 	call	7494 <__adddf3>
    53ec:	100d883a 	mov	r6,r2
    53f0:	180f883a 	mov	r7,r3
    53f4:	9009883a 	mov	r4,r18
    53f8:	800b883a 	mov	r5,r16
    53fc:	88800015 	stw	r2,0(r17)
    5400:	88c00115 	stw	r3,4(r17)
    5404:	00090940 	call	9094 <__subdf3>
    5408:	018b80f4 	movhi	r6,11779
    540c:	01cee8f4 	movhi	r7,15267
    5410:	319c1cc4 	addi	r6,r6,28787
    5414:	39c66284 	addi	r7,r7,6538
    5418:	003fde06 	br	5394 <__ieee754_rem_pio2+0x6c4>

0000541c <__ieee754_sqrt>:
    541c:	defffd04 	addi	sp,sp,-12
    5420:	dc400115 	stw	r17,4(sp)
    5424:	dc000015 	stw	r16,0(sp)
    5428:	dfc00215 	stw	ra,8(sp)
    542c:	28dffc2c 	andhi	r3,r5,32752
    5430:	009ffc34 	movhi	r2,32752
    5434:	2821883a 	mov	r16,r5
    5438:	2023883a 	mov	r17,r4
    543c:	18807726 	beq	r3,r2,561c <__ieee754_sqrt+0x200>
    5440:	2011883a 	mov	r8,r4
    5444:	01403a0e 	bge	zero,r5,5530 <__ieee754_sqrt+0x114>
    5448:	2807d53a 	srai	r3,r5,20
    544c:	18004626 	beq	r3,zero,5568 <__ieee754_sqrt+0x14c>
    5450:	00800434 	movhi	r2,16
    5454:	1aff0044 	addi	r11,r3,-1023
    5458:	10bfffc4 	addi	r2,r2,-1
    545c:	8084703a 	and	r2,r16,r2
    5460:	5900004c 	andi	r4,r11,1
    5464:	10c00434 	orhi	r3,r2,16
    5468:	20000426 	beq	r4,zero,547c <__ieee754_sqrt+0x60>
    546c:	4004d7fa 	srli	r2,r8,31
    5470:	18c7883a 	add	r3,r3,r3
    5474:	4211883a 	add	r8,r8,r8
    5478:	10c7883a 	add	r3,r2,r3
    547c:	4004d7fa 	srli	r2,r8,31
    5480:	5817d07a 	srai	r11,r11,1
    5484:	18c7883a 	add	r3,r3,r3
    5488:	1887883a 	add	r3,r3,r2
    548c:	4209883a 	add	r4,r8,r8
    5490:	01c00584 	movi	r7,22
    5494:	0019883a 	mov	r12,zero
    5498:	000b883a 	mov	r5,zero
    549c:	00800834 	movhi	r2,32
    54a0:	288d883a 	add	r6,r5,r2
    54a4:	2010d7fa 	srli	r8,r4,31
    54a8:	39ffffc4 	addi	r7,r7,-1
    54ac:	19800316 	blt	r3,r6,54bc <__ieee754_sqrt+0xa0>
    54b0:	1987c83a 	sub	r3,r3,r6
    54b4:	308b883a 	add	r5,r6,r2
    54b8:	6099883a 	add	r12,r12,r2
    54bc:	18c7883a 	add	r3,r3,r3
    54c0:	1004d07a 	srli	r2,r2,1
    54c4:	40c7883a 	add	r3,r8,r3
    54c8:	2109883a 	add	r4,r4,r4
    54cc:	383ff41e 	bne	r7,zero,54a0 <__ieee754_sqrt+0x84>
    54d0:	0013883a 	mov	r9,zero
    54d4:	00800804 	movi	r2,32
    54d8:	01a00034 	movhi	r6,32768
    54dc:	00000806 	br	5500 <__ieee754_sqrt+0xe4>
    54e0:	19403326 	beq	r3,r5,55b0 <__ieee754_sqrt+0x194>
    54e4:	2010d7fa 	srli	r8,r4,31
    54e8:	18c7883a 	add	r3,r3,r3
    54ec:	10bfffc4 	addi	r2,r2,-1
    54f0:	300cd07a 	srli	r6,r6,1
    54f4:	1a07883a 	add	r3,r3,r8
    54f8:	2109883a 	add	r4,r4,r4
    54fc:	10003226 	beq	r2,zero,55c8 <__ieee754_sqrt+0x1ac>
    5500:	31d1883a 	add	r8,r6,r7
    5504:	28fff60e 	bge	r5,r3,54e0 <__ieee754_sqrt+0xc4>
    5508:	418f883a 	add	r7,r8,r6
    550c:	40002516 	blt	r8,zero,55a4 <__ieee754_sqrt+0x188>
    5510:	2815883a 	mov	r10,r5
    5514:	1947c83a 	sub	r3,r3,r5
    5518:	2200012e 	bgeu	r4,r8,5520 <__ieee754_sqrt+0x104>
    551c:	18ffffc4 	addi	r3,r3,-1
    5520:	2209c83a 	sub	r4,r4,r8
    5524:	4993883a 	add	r9,r9,r6
    5528:	500b883a 	mov	r5,r10
    552c:	003fed06 	br	54e4 <__ieee754_sqrt+0xc8>
    5530:	00a00034 	movhi	r2,32768
    5534:	10bfffc4 	addi	r2,r2,-1
    5538:	2884703a 	and	r2,r5,r2
    553c:	1104b03a 	or	r2,r2,r4
    5540:	10004826 	beq	r2,zero,5664 <__ieee754_sqrt+0x248>
    5544:	28003e1e 	bne	r5,zero,5640 <__ieee754_sqrt+0x224>
    5548:	0007883a 	mov	r3,zero
    554c:	4004d2fa 	srli	r2,r8,11
    5550:	18fffac4 	addi	r3,r3,-21
    5554:	4010957a 	slli	r8,r8,21
    5558:	1021883a 	mov	r16,r2
    555c:	103ffb26 	beq	r2,zero,554c <__ieee754_sqrt+0x130>
    5560:	1100042c 	andhi	r4,r2,16
    5564:	2000441e 	bne	r4,zero,5678 <__ieee754_sqrt+0x25c>
    5568:	0005883a 	mov	r2,zero
    556c:	8421883a 	add	r16,r16,r16
    5570:	8140042c 	andhi	r5,r16,16
    5574:	1009883a 	mov	r4,r2
    5578:	10800044 	addi	r2,r2,1
    557c:	283ffb26 	beq	r5,zero,556c <__ieee754_sqrt+0x150>
    5580:	01800804 	movi	r6,32
    5584:	400b883a 	mov	r5,r8
    5588:	308dc83a 	sub	r6,r6,r2
    558c:	4090983a 	sll	r8,r8,r2
    5590:	8005883a 	mov	r2,r16
    5594:	298ed83a 	srl	r7,r5,r6
    5598:	1907c83a 	sub	r3,r3,r4
    559c:	38a0b03a 	or	r16,r7,r2
    55a0:	003fab06 	br	5450 <__ieee754_sqrt+0x34>
    55a4:	383fda16 	blt	r7,zero,5510 <__ieee754_sqrt+0xf4>
    55a8:	2a800044 	addi	r10,r5,1
    55ac:	003fd906 	br	5514 <__ieee754_sqrt+0xf8>
    55b0:	223fcc36 	bltu	r4,r8,54e4 <__ieee754_sqrt+0xc8>
    55b4:	418f883a 	add	r7,r8,r6
    55b8:	403ffa16 	blt	r8,zero,55a4 <__ieee754_sqrt+0x188>
    55bc:	1815883a 	mov	r10,r3
    55c0:	0007883a 	mov	r3,zero
    55c4:	003fd606 	br	5520 <__ieee754_sqrt+0x104>
    55c8:	1906b03a 	or	r3,r3,r4
    55cc:	18000e1e 	bne	r3,zero,5608 <__ieee754_sqrt+0x1ec>
    55d0:	4804d07a 	srli	r2,r9,1
    55d4:	6007d07a 	srai	r3,r12,1
    55d8:	01cff834 	movhi	r7,16352
    55dc:	6300004c 	andi	r12,r12,1
    55e0:	19cf883a 	add	r7,r3,r7
    55e4:	60000126 	beq	r12,zero,55ec <__ieee754_sqrt+0x1d0>
    55e8:	10a00034 	orhi	r2,r2,32768
    55ec:	5806953a 	slli	r3,r11,20
    55f0:	19c7883a 	add	r3,r3,r7
    55f4:	dfc00217 	ldw	ra,8(sp)
    55f8:	dc400117 	ldw	r17,4(sp)
    55fc:	dc000017 	ldw	r16,0(sp)
    5600:	dec00304 	addi	sp,sp,12
    5604:	f800283a 	ret
    5608:	48ffffd8 	cmpnei	r3,r9,-1
    560c:	18001826 	beq	r3,zero,5670 <__ieee754_sqrt+0x254>
    5610:	48800044 	addi	r2,r9,1
    5614:	1004d07a 	srli	r2,r2,1
    5618:	003fee06 	br	55d4 <__ieee754_sqrt+0x1b8>
    561c:	200d883a 	mov	r6,r4
    5620:	280f883a 	mov	r7,r5
    5624:	00088e80 	call	88e8 <__muldf3>
    5628:	880d883a 	mov	r6,r17
    562c:	800f883a 	mov	r7,r16
    5630:	1009883a 	mov	r4,r2
    5634:	180b883a 	mov	r5,r3
    5638:	00074940 	call	7494 <__adddf3>
    563c:	003fed06 	br	55f4 <__ieee754_sqrt+0x1d8>
    5640:	200d883a 	mov	r6,r4
    5644:	280f883a 	mov	r7,r5
    5648:	00090940 	call	9094 <__subdf3>
    564c:	100d883a 	mov	r6,r2
    5650:	180f883a 	mov	r7,r3
    5654:	1009883a 	mov	r4,r2
    5658:	180b883a 	mov	r5,r3
    565c:	0007d840 	call	7d84 <__divdf3>
    5660:	003fe406 	br	55f4 <__ieee754_sqrt+0x1d8>
    5664:	2005883a 	mov	r2,r4
    5668:	2807883a 	mov	r3,r5
    566c:	003fe106 	br	55f4 <__ieee754_sqrt+0x1d8>
    5670:	63000044 	addi	r12,r12,1
    5674:	003fd706 	br	55d4 <__ieee754_sqrt+0x1b8>
    5678:	400b883a 	mov	r5,r8
    567c:	01800804 	movi	r6,32
    5680:	013fffc4 	movi	r4,-1
    5684:	003fc306 	br	5594 <__ieee754_sqrt+0x178>

00005688 <__kernel_cos>:
    5688:	defff204 	addi	sp,sp,-56
    568c:	dc000415 	stw	r16,16(sp)
    5690:	04200034 	movhi	r16,32768
    5694:	843fffc4 	addi	r16,r16,-1
    5698:	df000c15 	stw	fp,48(sp)
    569c:	ddc00b15 	stw	r23,44(sp)
    56a0:	dd800a15 	stw	r22,40(sp)
    56a4:	dd400915 	stw	r21,36(sp)
    56a8:	dc800615 	stw	r18,24(sp)
    56ac:	dfc00d15 	stw	ra,52(sp)
    56b0:	dd000815 	stw	r20,32(sp)
    56b4:	dcc00715 	stw	r19,28(sp)
    56b8:	dc400515 	stw	r17,20(sp)
    56bc:	2c24703a 	and	r18,r5,r16
    56c0:	008f9034 	movhi	r2,15936
    56c4:	2839883a 	mov	fp,r5
    56c8:	202b883a 	mov	r21,r4
    56cc:	302d883a 	mov	r22,r6
    56d0:	382f883a 	mov	r23,r7
    56d4:	9080750e 	bge	r18,r2,58ac <__kernel_cos+0x224>
    56d8:	00099f40 	call	99f4 <__fixdfsi>
    56dc:	10011226 	beq	r2,zero,5b28 <__kernel_cos+0x4a0>
    56e0:	a80d883a 	mov	r6,r21
    56e4:	e00f883a 	mov	r7,fp
    56e8:	a809883a 	mov	r4,r21
    56ec:	e00b883a 	mov	r5,fp
    56f0:	00088e80 	call	88e8 <__muldf3>
    56f4:	01afa234 	movhi	r6,48776
    56f8:	01ef6a74 	movhi	r7,48553
    56fc:	318e3504 	addi	r6,r6,14548
    5700:	39feba44 	addi	r7,r7,-1303
    5704:	1009883a 	mov	r4,r2
    5708:	180b883a 	mov	r5,r3
    570c:	1023883a 	mov	r17,r2
    5710:	1821883a 	mov	r16,r3
    5714:	00088e80 	call	88e8 <__muldf3>
    5718:	01af6d74 	movhi	r6,48565
    571c:	01cf88b4 	movhi	r7,15906
    5720:	31ac7104 	addi	r6,r6,-20028
    5724:	39fba784 	addi	r7,r7,-4450
    5728:	1009883a 	mov	r4,r2
    572c:	180b883a 	mov	r5,r3
    5730:	00074940 	call	7494 <__adddf3>
    5734:	880d883a 	mov	r6,r17
    5738:	800f883a 	mov	r7,r16
    573c:	1009883a 	mov	r4,r2
    5740:	180b883a 	mov	r5,r3
    5744:	00088e80 	call	88e8 <__muldf3>
    5748:	01a02734 	movhi	r6,32924
    574c:	01cfa4b4 	movhi	r7,16018
    5750:	3194ab44 	addi	r6,r6,21165
    5754:	39df93c4 	addi	r7,r7,32335
    5758:	1009883a 	mov	r4,r2
    575c:	180b883a 	mov	r5,r3
    5760:	00090940 	call	9094 <__subdf3>
    5764:	880d883a 	mov	r6,r17
    5768:	800f883a 	mov	r7,r16
    576c:	1009883a 	mov	r4,r2
    5770:	180b883a 	mov	r5,r3
    5774:	00088e80 	call	88e8 <__muldf3>
    5778:	018672f4 	movhi	r6,6603
    577c:	01cfbeb4 	movhi	r7,16122
    5780:	31856404 	addi	r6,r6,5520
    5784:	39c06804 	addi	r7,r7,416
    5788:	1009883a 	mov	r4,r2
    578c:	180b883a 	mov	r5,r3
    5790:	00074940 	call	7494 <__adddf3>
    5794:	880d883a 	mov	r6,r17
    5798:	800f883a 	mov	r7,r16
    579c:	1009883a 	mov	r4,r2
    57a0:	180b883a 	mov	r5,r3
    57a4:	00088e80 	call	88e8 <__muldf3>
    57a8:	0185b074 	movhi	r6,5825
    57ac:	01cfd5f4 	movhi	r7,16215
    57b0:	31945dc4 	addi	r6,r6,20855
    57b4:	39f05b04 	addi	r7,r7,-16020
    57b8:	1009883a 	mov	r4,r2
    57bc:	180b883a 	mov	r5,r3
    57c0:	00090940 	call	9094 <__subdf3>
    57c4:	880d883a 	mov	r6,r17
    57c8:	800f883a 	mov	r7,r16
    57cc:	1009883a 	mov	r4,r2
    57d0:	180b883a 	mov	r5,r3
    57d4:	00088e80 	call	88e8 <__muldf3>
    57d8:	01955574 	movhi	r6,21845
    57dc:	01cfe974 	movhi	r7,16293
    57e0:	31955304 	addi	r6,r6,21836
    57e4:	39d55544 	addi	r7,r7,21845
    57e8:	1009883a 	mov	r4,r2
    57ec:	180b883a 	mov	r5,r3
    57f0:	00074940 	call	7494 <__adddf3>
    57f4:	880d883a 	mov	r6,r17
    57f8:	800f883a 	mov	r7,r16
    57fc:	1009883a 	mov	r4,r2
    5800:	180b883a 	mov	r5,r3
    5804:	00088e80 	call	88e8 <__muldf3>
    5808:	1017883a 	mov	r11,r2
    580c:	1815883a 	mov	r10,r3
    5810:	8809883a 	mov	r4,r17
    5814:	800b883a 	mov	r5,r16
    5818:	000d883a 	mov	r6,zero
    581c:	01cff834 	movhi	r7,16352
    5820:	da800115 	stw	r10,4(sp)
    5824:	dac00015 	stw	r11,0(sp)
    5828:	00088e80 	call	88e8 <__muldf3>
    582c:	dac00017 	ldw	r11,0(sp)
    5830:	da800117 	ldw	r10,4(sp)
    5834:	8809883a 	mov	r4,r17
    5838:	580d883a 	mov	r6,r11
    583c:	500f883a 	mov	r7,r10
    5840:	800b883a 	mov	r5,r16
    5844:	1023883a 	mov	r17,r2
    5848:	1821883a 	mov	r16,r3
    584c:	00088e80 	call	88e8 <__muldf3>
    5850:	b00d883a 	mov	r6,r22
    5854:	b80f883a 	mov	r7,r23
    5858:	a809883a 	mov	r4,r21
    585c:	e00b883a 	mov	r5,fp
    5860:	1027883a 	mov	r19,r2
    5864:	1825883a 	mov	r18,r3
    5868:	00088e80 	call	88e8 <__muldf3>
    586c:	9809883a 	mov	r4,r19
    5870:	900b883a 	mov	r5,r18
    5874:	100d883a 	mov	r6,r2
    5878:	180f883a 	mov	r7,r3
    587c:	00090940 	call	9094 <__subdf3>
    5880:	8809883a 	mov	r4,r17
    5884:	800b883a 	mov	r5,r16
    5888:	100d883a 	mov	r6,r2
    588c:	180f883a 	mov	r7,r3
    5890:	00090940 	call	9094 <__subdf3>
    5894:	100d883a 	mov	r6,r2
    5898:	180f883a 	mov	r7,r3
    589c:	0009883a 	mov	r4,zero
    58a0:	014ffc34 	movhi	r5,16368
    58a4:	00090940 	call	9094 <__subdf3>
    58a8:	00008f06 	br	5ae8 <__kernel_cos+0x460>
    58ac:	200d883a 	mov	r6,r4
    58b0:	280f883a 	mov	r7,r5
    58b4:	00088e80 	call	88e8 <__muldf3>
    58b8:	01afa234 	movhi	r6,48776
    58bc:	01ef6a74 	movhi	r7,48553
    58c0:	318e3504 	addi	r6,r6,14548
    58c4:	39feba44 	addi	r7,r7,-1303
    58c8:	1009883a 	mov	r4,r2
    58cc:	180b883a 	mov	r5,r3
    58d0:	1029883a 	mov	r20,r2
    58d4:	1827883a 	mov	r19,r3
    58d8:	00088e80 	call	88e8 <__muldf3>
    58dc:	01af6d74 	movhi	r6,48565
    58e0:	01cf88b4 	movhi	r7,15906
    58e4:	31ac7104 	addi	r6,r6,-20028
    58e8:	39fba784 	addi	r7,r7,-4450
    58ec:	1009883a 	mov	r4,r2
    58f0:	180b883a 	mov	r5,r3
    58f4:	00074940 	call	7494 <__adddf3>
    58f8:	a00d883a 	mov	r6,r20
    58fc:	980f883a 	mov	r7,r19
    5900:	1009883a 	mov	r4,r2
    5904:	180b883a 	mov	r5,r3
    5908:	00088e80 	call	88e8 <__muldf3>
    590c:	01a02734 	movhi	r6,32924
    5910:	01cfa4b4 	movhi	r7,16018
    5914:	3194ab44 	addi	r6,r6,21165
    5918:	39df93c4 	addi	r7,r7,32335
    591c:	1009883a 	mov	r4,r2
    5920:	180b883a 	mov	r5,r3
    5924:	00090940 	call	9094 <__subdf3>
    5928:	a00d883a 	mov	r6,r20
    592c:	980f883a 	mov	r7,r19
    5930:	1009883a 	mov	r4,r2
    5934:	180b883a 	mov	r5,r3
    5938:	00088e80 	call	88e8 <__muldf3>
    593c:	018672f4 	movhi	r6,6603
    5940:	01cfbeb4 	movhi	r7,16122
    5944:	31856404 	addi	r6,r6,5520
    5948:	39c06804 	addi	r7,r7,416
    594c:	1009883a 	mov	r4,r2
    5950:	180b883a 	mov	r5,r3
    5954:	00074940 	call	7494 <__adddf3>
    5958:	a00d883a 	mov	r6,r20
    595c:	980f883a 	mov	r7,r19
    5960:	1009883a 	mov	r4,r2
    5964:	180b883a 	mov	r5,r3
    5968:	00088e80 	call	88e8 <__muldf3>
    596c:	0185b074 	movhi	r6,5825
    5970:	01cfd5f4 	movhi	r7,16215
    5974:	31945dc4 	addi	r6,r6,20855
    5978:	39f05b04 	addi	r7,r7,-16020
    597c:	1009883a 	mov	r4,r2
    5980:	180b883a 	mov	r5,r3
    5984:	00090940 	call	9094 <__subdf3>
    5988:	a00d883a 	mov	r6,r20
    598c:	980f883a 	mov	r7,r19
    5990:	1009883a 	mov	r4,r2
    5994:	180b883a 	mov	r5,r3
    5998:	00088e80 	call	88e8 <__muldf3>
    599c:	01955574 	movhi	r6,21845
    59a0:	01cfe974 	movhi	r7,16293
    59a4:	31955304 	addi	r6,r6,21836
    59a8:	39d55544 	addi	r7,r7,21845
    59ac:	1009883a 	mov	r4,r2
    59b0:	180b883a 	mov	r5,r3
    59b4:	00074940 	call	7494 <__adddf3>
    59b8:	1009883a 	mov	r4,r2
    59bc:	a00d883a 	mov	r6,r20
    59c0:	980f883a 	mov	r7,r19
    59c4:	180b883a 	mov	r5,r3
    59c8:	00088e80 	call	88e8 <__muldf3>
    59cc:	010ff4f4 	movhi	r4,16339
    59d0:	210ccc84 	addi	r4,r4,13106
    59d4:	1013883a 	mov	r9,r2
    59d8:	1811883a 	mov	r8,r3
    59dc:	a023883a 	mov	r17,r20
    59e0:	9821883a 	mov	r16,r19
    59e4:	1017883a 	mov	r11,r2
    59e8:	1815883a 	mov	r10,r3
    59ec:	24bf880e 	bge	r4,r18,5810 <__kernel_cos+0x188>
    59f0:	008ffa74 	movhi	r2,16361
    59f4:	14804816 	blt	r2,r18,5b18 <__kernel_cos+0x490>
    59f8:	043ff834 	movhi	r16,65504
    59fc:	9421883a 	add	r16,r18,r16
    5a00:	000d883a 	mov	r6,zero
    5a04:	800f883a 	mov	r7,r16
    5a08:	0009883a 	mov	r4,zero
    5a0c:	014ffc34 	movhi	r5,16368
    5a10:	da400015 	stw	r9,0(sp)
    5a14:	d8c00115 	stw	r3,4(sp)
    5a18:	00090940 	call	9094 <__subdf3>
    5a1c:	da400017 	ldw	r9,0(sp)
    5a20:	da000117 	ldw	r8,4(sp)
    5a24:	1017883a 	mov	r11,r2
    5a28:	1815883a 	mov	r10,r3
    5a2c:	980b883a 	mov	r5,r19
    5a30:	000d883a 	mov	r6,zero
    5a34:	01cff834 	movhi	r7,16352
    5a38:	a009883a 	mov	r4,r20
    5a3c:	da800115 	stw	r10,4(sp)
    5a40:	dac00015 	stw	r11,0(sp)
    5a44:	da000315 	stw	r8,12(sp)
    5a48:	da400215 	stw	r9,8(sp)
    5a4c:	00088e80 	call	88e8 <__muldf3>
    5a50:	800f883a 	mov	r7,r16
    5a54:	000d883a 	mov	r6,zero
    5a58:	1009883a 	mov	r4,r2
    5a5c:	180b883a 	mov	r5,r3
    5a60:	00090940 	call	9094 <__subdf3>
    5a64:	da400217 	ldw	r9,8(sp)
    5a68:	da000317 	ldw	r8,12(sp)
    5a6c:	980b883a 	mov	r5,r19
    5a70:	480d883a 	mov	r6,r9
    5a74:	400f883a 	mov	r7,r8
    5a78:	a009883a 	mov	r4,r20
    5a7c:	1023883a 	mov	r17,r2
    5a80:	1821883a 	mov	r16,r3
    5a84:	00088e80 	call	88e8 <__muldf3>
    5a88:	b00d883a 	mov	r6,r22
    5a8c:	b80f883a 	mov	r7,r23
    5a90:	a809883a 	mov	r4,r21
    5a94:	e00b883a 	mov	r5,fp
    5a98:	1027883a 	mov	r19,r2
    5a9c:	1825883a 	mov	r18,r3
    5aa0:	00088e80 	call	88e8 <__muldf3>
    5aa4:	100d883a 	mov	r6,r2
    5aa8:	180f883a 	mov	r7,r3
    5aac:	9809883a 	mov	r4,r19
    5ab0:	900b883a 	mov	r5,r18
    5ab4:	00090940 	call	9094 <__subdf3>
    5ab8:	100d883a 	mov	r6,r2
    5abc:	180f883a 	mov	r7,r3
    5ac0:	8809883a 	mov	r4,r17
    5ac4:	800b883a 	mov	r5,r16
    5ac8:	00090940 	call	9094 <__subdf3>
    5acc:	dac00017 	ldw	r11,0(sp)
    5ad0:	da800117 	ldw	r10,4(sp)
    5ad4:	100d883a 	mov	r6,r2
    5ad8:	180f883a 	mov	r7,r3
    5adc:	5809883a 	mov	r4,r11
    5ae0:	500b883a 	mov	r5,r10
    5ae4:	00090940 	call	9094 <__subdf3>
    5ae8:	dfc00d17 	ldw	ra,52(sp)
    5aec:	df000c17 	ldw	fp,48(sp)
    5af0:	ddc00b17 	ldw	r23,44(sp)
    5af4:	dd800a17 	ldw	r22,40(sp)
    5af8:	dd400917 	ldw	r21,36(sp)
    5afc:	dd000817 	ldw	r20,32(sp)
    5b00:	dcc00717 	ldw	r19,28(sp)
    5b04:	dc800617 	ldw	r18,24(sp)
    5b08:	dc400517 	ldw	r17,20(sp)
    5b0c:	dc000417 	ldw	r16,16(sp)
    5b10:	dec00e04 	addi	sp,sp,56
    5b14:	f800283a 	ret
    5b18:	0017883a 	mov	r11,zero
    5b1c:	028ff9f4 	movhi	r10,16359
    5b20:	040ff4b4 	movhi	r16,16338
    5b24:	003fc106 	br	5a2c <__kernel_cos+0x3a4>
    5b28:	0005883a 	mov	r2,zero
    5b2c:	00cffc34 	movhi	r3,16368
    5b30:	003fed06 	br	5ae8 <__kernel_cos+0x460>

00005b34 <__kernel_rem_pio2>:
    5b34:	deff5f04 	addi	sp,sp,-644
    5b38:	d880a117 	ldw	r2,644(sp)
    5b3c:	dc009715 	stw	r16,604(sp)
    5b40:	dfc0a015 	stw	ra,640(sp)
    5b44:	100690ba 	slli	r3,r2,2
    5b48:	00800074 	movhi	r2,1
    5b4c:	df009f15 	stw	fp,636(sp)
    5b50:	1885883a 	add	r2,r3,r2
    5b54:	109f2117 	ldw	r2,31876(r2)
    5b58:	ddc09e15 	stw	r23,632(sp)
    5b5c:	dd809d15 	stw	r22,628(sp)
    5b60:	d8800515 	stw	r2,20(sp)
    5b64:	38bfffc4 	addi	r2,r7,-1
    5b68:	dd409c15 	stw	r21,624(sp)
    5b6c:	dd009b15 	stw	r20,620(sp)
    5b70:	dcc09a15 	stw	r19,616(sp)
    5b74:	dc809915 	stw	r18,612(sp)
    5b78:	dc409815 	stw	r17,608(sp)
    5b7c:	d9c00715 	stw	r7,28(sp)
    5b80:	30fffb10 	cmplti	r3,r6,-20
    5b84:	d9000215 	stw	r4,8(sp)
    5b88:	d9400915 	stw	r5,36(sp)
    5b8c:	d8800115 	stw	r2,4(sp)
    5b90:	3021883a 	mov	r16,r6
    5b94:	18028c1e 	bne	r3,zero,65c8 <__kernel_rem_pio2+0xa94>
    5b98:	01400604 	movi	r5,24
    5b9c:	313fff44 	addi	r4,r6,-3
    5ba0:	0006f700 	call	6f70 <__divsi3>
    5ba4:	d8800615 	stw	r2,24(sp)
    5ba8:	10800044 	addi	r2,r2,1
    5bac:	100690ba 	slli	r3,r2,2
    5bb0:	10c5c83a 	sub	r2,r2,r3
    5bb4:	100690fa 	slli	r3,r2,3
    5bb8:	d9000117 	ldw	r4,4(sp)
    5bbc:	80c7883a 	add	r3,r16,r3
    5bc0:	d8800517 	ldw	r2,20(sp)
    5bc4:	d8c00315 	stw	r3,12(sp)
    5bc8:	d8c00617 	ldw	r3,24(sp)
    5bcc:	1105883a 	add	r2,r2,r4
    5bd0:	1925c83a 	sub	r18,r3,r4
    5bd4:	10000f16 	blt	r2,zero,5c14 <__kernel_rem_pio2+0xe0>
    5bd8:	902290ba 	slli	r17,r18,2
    5bdc:	d8c0a217 	ldw	r3,648(sp)
    5be0:	10800044 	addi	r2,r2,1
    5be4:	dc001f04 	addi	r16,sp,124
    5be8:	1c63883a 	add	r17,r3,r17
    5bec:	14a7883a 	add	r19,r2,r18
    5bf0:	90016016 	blt	r18,zero,6174 <__kernel_rem_pio2+0x640>
    5bf4:	89000017 	ldw	r4,0(r17)
    5bf8:	0009a740 	call	9a74 <__floatsidf>
    5bfc:	80800015 	stw	r2,0(r16)
    5c00:	80c00115 	stw	r3,4(r16)
    5c04:	94800044 	addi	r18,r18,1
    5c08:	84000204 	addi	r16,r16,8
    5c0c:	8c400104 	addi	r17,r17,4
    5c10:	94fff71e 	bne	r18,r19,5bf0 <__kernel_rem_pio2+0xbc>
    5c14:	d8800517 	ldw	r2,20(sp)
    5c18:	10002516 	blt	r2,zero,5cb0 <__kernel_rem_pio2+0x17c>
    5c1c:	dcc00117 	ldw	r19,4(sp)
    5c20:	d8c01f04 	addi	r3,sp,124
    5c24:	dc406f04 	addi	r17,sp,444
    5c28:	982490fa 	slli	r18,r19,3
    5c2c:	94000204 	addi	r16,r18,8
    5c30:	1ca5883a 	add	r18,r3,r18
    5c34:	d8c00717 	ldw	r3,28(sp)
    5c38:	10ef883a 	add	r23,r2,r3
    5c3c:	d8800217 	ldw	r2,8(sp)
    5c40:	80a1883a 	add	r16,r16,r2
    5c44:	d8800117 	ldw	r2,4(sp)
    5c48:	10015f16 	blt	r2,zero,61c8 <__kernel_rem_pio2+0x694>
    5c4c:	dd000217 	ldw	r20,8(sp)
    5c50:	902d883a 	mov	r22,r18
    5c54:	0039883a 	mov	fp,zero
    5c58:	002b883a 	mov	r21,zero
    5c5c:	b1800017 	ldw	r6,0(r22)
    5c60:	b1c00117 	ldw	r7,4(r22)
    5c64:	a1000017 	ldw	r4,0(r20)
    5c68:	a1400117 	ldw	r5,4(r20)
    5c6c:	a5000204 	addi	r20,r20,8
    5c70:	b5bffe04 	addi	r22,r22,-8
    5c74:	00088e80 	call	88e8 <__muldf3>
    5c78:	e009883a 	mov	r4,fp
    5c7c:	a80b883a 	mov	r5,r21
    5c80:	100d883a 	mov	r6,r2
    5c84:	180f883a 	mov	r7,r3
    5c88:	00074940 	call	7494 <__adddf3>
    5c8c:	1039883a 	mov	fp,r2
    5c90:	182b883a 	mov	r21,r3
    5c94:	a43ff11e 	bne	r20,r16,5c5c <__kernel_rem_pio2+0x128>
    5c98:	8f000015 	stw	fp,0(r17)
    5c9c:	8d400115 	stw	r21,4(r17)
    5ca0:	9cc00044 	addi	r19,r19,1
    5ca4:	8c400204 	addi	r17,r17,8
    5ca8:	94800204 	addi	r18,r18,8
    5cac:	9dffe51e 	bne	r19,r23,5c44 <__kernel_rem_pio2+0x110>
    5cb0:	dc400517 	ldw	r17,20(sp)
    5cb4:	d8c00717 	ldw	r3,28(sp)
    5cb8:	d9000217 	ldw	r4,8(sp)
    5cbc:	88bfffc4 	addi	r2,r17,-1
    5cc0:	180690fa 	slli	r3,r3,3
    5cc4:	883890ba 	slli	fp,r17,2
    5cc8:	100490ba 	slli	r2,r2,2
    5ccc:	243ffe04 	addi	r16,r4,-8
    5cd0:	80e1883a 	add	r16,r16,r3
    5cd4:	e1000b04 	addi	r4,fp,44
    5cd8:	10808c04 	addi	r2,r2,560
    5cdc:	d8c00b04 	addi	r3,sp,44
    5ce0:	26c9883a 	add	r4,r4,sp
    5ce4:	10c5883a 	add	r2,r2,r3
    5ce8:	d9000415 	stw	r4,16(sp)
    5cec:	d8800815 	stw	r2,32(sp)
    5cf0:	883890fa 	slli	fp,r17,3
    5cf4:	d8c00b04 	addi	r3,sp,44
    5cf8:	e0808c04 	addi	r2,fp,560
    5cfc:	10c5883a 	add	r2,r2,r3
    5d00:	157fd817 	ldw	r21,-160(r2)
    5d04:	153fd917 	ldw	r20,-156(r2)
    5d08:	0440280e 	bge	zero,r17,5dac <__kernel_rem_pio2+0x278>
    5d0c:	d8806f04 	addi	r2,sp,444
    5d10:	1725883a 	add	r18,r2,fp
    5d14:	1827883a 	mov	r19,r3
    5d18:	000d883a 	mov	r6,zero
    5d1c:	01cf9c34 	movhi	r7,15984
    5d20:	a809883a 	mov	r4,r21
    5d24:	a00b883a 	mov	r5,r20
    5d28:	00088e80 	call	88e8 <__muldf3>
    5d2c:	180b883a 	mov	r5,r3
    5d30:	1009883a 	mov	r4,r2
    5d34:	00099f40 	call	99f4 <__fixdfsi>
    5d38:	1009883a 	mov	r4,r2
    5d3c:	0009a740 	call	9a74 <__floatsidf>
    5d40:	000d883a 	mov	r6,zero
    5d44:	01d05c34 	movhi	r7,16752
    5d48:	1009883a 	mov	r4,r2
    5d4c:	180b883a 	mov	r5,r3
    5d50:	102f883a 	mov	r23,r2
    5d54:	182d883a 	mov	r22,r3
    5d58:	00088e80 	call	88e8 <__muldf3>
    5d5c:	100d883a 	mov	r6,r2
    5d60:	180f883a 	mov	r7,r3
    5d64:	a809883a 	mov	r4,r21
    5d68:	a00b883a 	mov	r5,r20
    5d6c:	00090940 	call	9094 <__subdf3>
    5d70:	180b883a 	mov	r5,r3
    5d74:	1009883a 	mov	r4,r2
    5d78:	00099f40 	call	99f4 <__fixdfsi>
    5d7c:	91bffe17 	ldw	r6,-8(r18)
    5d80:	91ffff17 	ldw	r7,-4(r18)
    5d84:	98800015 	stw	r2,0(r19)
    5d88:	b809883a 	mov	r4,r23
    5d8c:	b00b883a 	mov	r5,r22
    5d90:	00074940 	call	7494 <__adddf3>
    5d94:	102b883a 	mov	r21,r2
    5d98:	94bffe04 	addi	r18,r18,-8
    5d9c:	d8806f04 	addi	r2,sp,444
    5da0:	1829883a 	mov	r20,r3
    5da4:	9cc00104 	addi	r19,r19,4
    5da8:	14bfdb1e 	bne	r2,r18,5d18 <__kernel_rem_pio2+0x1e4>
    5dac:	dd800317 	ldw	r22,12(sp)
    5db0:	a809883a 	mov	r4,r21
    5db4:	a00b883a 	mov	r5,r20
    5db8:	b00d883a 	mov	r6,r22
    5dbc:	0006db00 	call	6db0 <scalbn>
    5dc0:	000d883a 	mov	r6,zero
    5dc4:	01cff034 	movhi	r7,16320
    5dc8:	1009883a 	mov	r4,r2
    5dcc:	180b883a 	mov	r5,r3
    5dd0:	1029883a 	mov	r20,r2
    5dd4:	1827883a 	mov	r19,r3
    5dd8:	00088e80 	call	88e8 <__muldf3>
    5ddc:	1009883a 	mov	r4,r2
    5de0:	180b883a 	mov	r5,r3
    5de4:	0002e680 	call	2e68 <floor>
    5de8:	000d883a 	mov	r6,zero
    5dec:	01d00834 	movhi	r7,16416
    5df0:	1009883a 	mov	r4,r2
    5df4:	180b883a 	mov	r5,r3
    5df8:	00088e80 	call	88e8 <__muldf3>
    5dfc:	100d883a 	mov	r6,r2
    5e00:	180f883a 	mov	r7,r3
    5e04:	a009883a 	mov	r4,r20
    5e08:	980b883a 	mov	r5,r19
    5e0c:	00090940 	call	9094 <__subdf3>
    5e10:	180b883a 	mov	r5,r3
    5e14:	1009883a 	mov	r4,r2
    5e18:	1827883a 	mov	r19,r3
    5e1c:	102b883a 	mov	r21,r2
    5e20:	00099f40 	call	99f4 <__fixdfsi>
    5e24:	1009883a 	mov	r4,r2
    5e28:	1029883a 	mov	r20,r2
    5e2c:	0009a740 	call	9a74 <__floatsidf>
    5e30:	980b883a 	mov	r5,r19
    5e34:	100d883a 	mov	r6,r2
    5e38:	180f883a 	mov	r7,r3
    5e3c:	a809883a 	mov	r4,r21
    5e40:	00090940 	call	9094 <__subdf3>
    5e44:	1025883a 	mov	r18,r2
    5e48:	1027883a 	mov	r19,r2
    5e4c:	1813883a 	mov	r9,r3
    5e50:	0580670e 	bge	zero,r22,5ff0 <__kernel_rem_pio2+0x4bc>
    5e54:	88bfffc4 	addi	r2,r17,-1
    5e58:	100490ba 	slli	r2,r2,2
    5e5c:	d9400b04 	addi	r5,sp,44
    5e60:	01000604 	movi	r4,24
    5e64:	10808c04 	addi	r2,r2,560
    5e68:	1145883a 	add	r2,r2,r5
    5e6c:	117f7417 	ldw	r5,-560(r2)
    5e70:	2589c83a 	sub	r4,r4,r22
    5e74:	054005c4 	movi	r21,23
    5e78:	290dd83a 	sra	r6,r5,r4
    5e7c:	adabc83a 	sub	r21,r21,r22
    5e80:	3108983a 	sll	r4,r6,r4
    5e84:	a1a9883a 	add	r20,r20,r6
    5e88:	2909c83a 	sub	r4,r5,r4
    5e8c:	256bd83a 	sra	r21,r4,r21
    5e90:	113f7415 	stw	r4,-560(r2)
    5e94:	05406016 	blt	zero,r21,6018 <__kernel_rem_pio2+0x4e4>
    5e98:	480b883a 	mov	r5,r9
    5e9c:	000d883a 	mov	r6,zero
    5ea0:	000f883a 	mov	r7,zero
    5ea4:	9809883a 	mov	r4,r19
    5ea8:	da400015 	stw	r9,0(sp)
    5eac:	00086980 	call	8698 <__eqdf2>
    5eb0:	da400017 	ldw	r9,0(sp)
    5eb4:	1001d21e 	bne	r2,zero,6600 <__kernel_rem_pio2+0xacc>
    5eb8:	d8800517 	ldw	r2,20(sp)
    5ebc:	8cffffc4 	addi	r19,r17,-1
    5ec0:	98800a16 	blt	r19,r2,5eec <__kernel_rem_pio2+0x3b8>
    5ec4:	880490ba 	slli	r2,r17,2
    5ec8:	d9400417 	ldw	r5,16(sp)
    5ecc:	0007883a 	mov	r3,zero
    5ed0:	10800b04 	addi	r2,r2,44
    5ed4:	16c5883a 	add	r2,r2,sp
    5ed8:	113fff17 	ldw	r4,-4(r2)
    5edc:	10bfff04 	addi	r2,r2,-4
    5ee0:	1906b03a 	or	r3,r3,r4
    5ee4:	117ffc1e 	bne	r2,r5,5ed8 <__kernel_rem_pio2+0x3a4>
    5ee8:	1800ba1e 	bne	r3,zero,61d4 <__kernel_rem_pio2+0x6a0>
    5eec:	d8800817 	ldw	r2,32(sp)
    5ef0:	10bf7417 	ldw	r2,-560(r2)
    5ef4:	1000b11e 	bne	r2,zero,61bc <__kernel_rem_pio2+0x688>
    5ef8:	d8800417 	ldw	r2,16(sp)
    5efc:	05000044 	movi	r20,1
    5f00:	10fffe17 	ldw	r3,-8(r2)
    5f04:	a5000044 	addi	r20,r20,1
    5f08:	10bfff04 	addi	r2,r2,-4
    5f0c:	183ffc26 	beq	r3,zero,5f00 <__kernel_rem_pio2+0x3cc>
    5f10:	8d05883a 	add	r2,r17,r20
    5f14:	8d400044 	addi	r21,r17,1
    5f18:	d8800015 	stw	r2,0(sp)
    5f1c:	d8800617 	ldw	r2,24(sp)
    5f20:	88a7883a 	add	r19,r17,r2
    5f24:	d8800717 	ldw	r2,28(sp)
    5f28:	982690ba 	slli	r19,r19,2
    5f2c:	1463883a 	add	r17,r2,r17
    5f30:	d880a217 	ldw	r2,648(sp)
    5f34:	882290fa 	slli	r17,r17,3
    5f38:	14e7883a 	add	r19,r2,r19
    5f3c:	d8801f04 	addi	r2,sp,124
    5f40:	1463883a 	add	r17,r2,r17
    5f44:	d8806f04 	addi	r2,sp,444
    5f48:	1725883a 	add	r18,r2,fp
    5f4c:	99000117 	ldw	r4,4(r19)
    5f50:	0009a740 	call	9a74 <__floatsidf>
    5f54:	1009883a 	mov	r4,r2
    5f58:	88800015 	stw	r2,0(r17)
    5f5c:	d8800117 	ldw	r2,4(sp)
    5f60:	88c00115 	stw	r3,4(r17)
    5f64:	180b883a 	mov	r5,r3
    5f68:	10001e16 	blt	r2,zero,5fe4 <__kernel_rem_pio2+0x4b0>
    5f6c:	dd000217 	ldw	r20,8(sp)
    5f70:	882f883a 	mov	r23,r17
    5f74:	002d883a 	mov	r22,zero
    5f78:	0039883a 	mov	fp,zero
    5f7c:	00000306 	br	5f8c <__kernel_rem_pio2+0x458>
    5f80:	b9000017 	ldw	r4,0(r23)
    5f84:	b9400117 	ldw	r5,4(r23)
    5f88:	a5000204 	addi	r20,r20,8
    5f8c:	a1800017 	ldw	r6,0(r20)
    5f90:	a1c00117 	ldw	r7,4(r20)
    5f94:	bdfffe04 	addi	r23,r23,-8
    5f98:	00088e80 	call	88e8 <__muldf3>
    5f9c:	b009883a 	mov	r4,r22
    5fa0:	e00b883a 	mov	r5,fp
    5fa4:	100d883a 	mov	r6,r2
    5fa8:	180f883a 	mov	r7,r3
    5fac:	00074940 	call	7494 <__adddf3>
    5fb0:	102d883a 	mov	r22,r2
    5fb4:	1839883a 	mov	fp,r3
    5fb8:	a43ff11e 	bne	r20,r16,5f80 <__kernel_rem_pio2+0x44c>
    5fbc:	d8800017 	ldw	r2,0(sp)
    5fc0:	95800215 	stw	r22,8(r18)
    5fc4:	97000315 	stw	fp,12(r18)
    5fc8:	ad400044 	addi	r21,r21,1
    5fcc:	9cc00104 	addi	r19,r19,4
    5fd0:	8c400204 	addi	r17,r17,8
    5fd4:	94800204 	addi	r18,r18,8
    5fd8:	157fdc0e 	bge	r2,r21,5f4c <__kernel_rem_pio2+0x418>
    5fdc:	1023883a 	mov	r17,r2
    5fe0:	003f4306 	br	5cf0 <__kernel_rem_pio2+0x1bc>
    5fe4:	002d883a 	mov	r22,zero
    5fe8:	0039883a 	mov	fp,zero
    5fec:	003ff306 	br	5fbc <__kernel_rem_pio2+0x488>
    5ff0:	d8800317 	ldw	r2,12(sp)
    5ff4:	1000651e 	bne	r2,zero,618c <__kernel_rem_pio2+0x658>
    5ff8:	88bfffc4 	addi	r2,r17,-1
    5ffc:	100490ba 	slli	r2,r2,2
    6000:	d9000b04 	addi	r4,sp,44
    6004:	10808c04 	addi	r2,r2,560
    6008:	1105883a 	add	r2,r2,r4
    600c:	157f7417 	ldw	r21,-560(r2)
    6010:	a82bd5fa 	srai	r21,r21,23
    6014:	057fa00e 	bge	zero,r21,5e98 <__kernel_rem_pio2+0x364>
    6018:	a5000044 	addi	r20,r20,1
    601c:	0441ac0e 	bge	zero,r17,66d0 <__kernel_rem_pio2+0xb9c>
    6020:	da800b17 	ldw	r10,44(sp)
    6024:	5000561e 	bne	r10,zero,6180 <__kernel_rem_pio2+0x64c>
    6028:	88800060 	cmpeqi	r2,r17,1
    602c:	1000271e 	bne	r2,zero,60cc <__kernel_rem_pio2+0x598>
    6030:	da800c17 	ldw	r10,48(sp)
    6034:	d9400c04 	addi	r5,sp,48
    6038:	00800044 	movi	r2,1
    603c:	11000044 	addi	r4,r2,1
    6040:	29400104 	addi	r5,r5,4
    6044:	5000061e 	bne	r10,zero,6060 <__kernel_rem_pio2+0x52c>
    6048:	89002026 	beq	r17,r4,60cc <__kernel_rem_pio2+0x598>
    604c:	2a800017 	ldw	r10,0(r5)
    6050:	2005883a 	mov	r2,r4
    6054:	11000044 	addi	r4,r2,1
    6058:	29400104 	addi	r5,r5,4
    605c:	503ffa26 	beq	r10,zero,6048 <__kernel_rem_pio2+0x514>
    6060:	100490ba 	slli	r2,r2,2
    6064:	01404034 	movhi	r5,256
    6068:	2a95c83a 	sub	r10,r5,r10
    606c:	10808c04 	addi	r2,r2,560
    6070:	d9400b04 	addi	r5,sp,44
    6074:	1145883a 	add	r2,r2,r5
    6078:	12bf7415 	stw	r10,-560(r2)
    607c:	2440120e 	bge	r4,r17,60c8 <__kernel_rem_pio2+0x594>
    6080:	200890ba 	slli	r4,r4,2
    6084:	880490ba 	slli	r2,r17,2
    6088:	d9c00b04 	addi	r7,sp,44
    608c:	21408c04 	addi	r5,r4,560
    6090:	01804034 	movhi	r6,256
    6094:	29cb883a 	add	r5,r5,r7
    6098:	21000b04 	addi	r4,r4,44
    609c:	10800b04 	addi	r2,r2,44
    60a0:	297f7417 	ldw	r5,-560(r5)
    60a4:	26c9883a 	add	r4,r4,sp
    60a8:	16c5883a 	add	r2,r2,sp
    60ac:	31bfffc4 	addi	r6,r6,-1
    60b0:	00000106 	br	60b8 <__kernel_rem_pio2+0x584>
    60b4:	21400017 	ldw	r5,0(r4)
    60b8:	314bc83a 	sub	r5,r6,r5
    60bc:	21400015 	stw	r5,0(r4)
    60c0:	21000104 	addi	r4,r4,4
    60c4:	20bffb1e 	bne	r4,r2,60b4 <__kernel_rem_pio2+0x580>
    60c8:	02800044 	movi	r10,1
    60cc:	d9000317 	ldw	r4,12(sp)
    60d0:	01000e0e 	bge	zero,r4,610c <__kernel_rem_pio2+0x5d8>
    60d4:	20800060 	cmpeqi	r2,r4,1
    60d8:	1001371e 	bne	r2,zero,65b8 <__kernel_rem_pio2+0xa84>
    60dc:	208000a0 	cmpeqi	r2,r4,2
    60e0:	10000a26 	beq	r2,zero,610c <__kernel_rem_pio2+0x5d8>
    60e4:	88bfffc4 	addi	r2,r17,-1
    60e8:	100490ba 	slli	r2,r2,2
    60ec:	01401034 	movhi	r5,64
    60f0:	d9000b04 	addi	r4,sp,44
    60f4:	10808c04 	addi	r2,r2,560
    60f8:	1105883a 	add	r2,r2,r4
    60fc:	113f7417 	ldw	r4,-560(r2)
    6100:	297fffc4 	addi	r5,r5,-1
    6104:	2148703a 	and	r4,r4,r5
    6108:	113f7415 	stw	r4,-560(r2)
    610c:	a8800098 	cmpnei	r2,r21,2
    6110:	103f611e 	bne	r2,zero,5e98 <__kernel_rem_pio2+0x364>
    6114:	900d883a 	mov	r6,r18
    6118:	180f883a 	mov	r7,r3
    611c:	0009883a 	mov	r4,zero
    6120:	014ffc34 	movhi	r5,16368
    6124:	da800015 	stw	r10,0(sp)
    6128:	00090940 	call	9094 <__subdf3>
    612c:	da800017 	ldw	r10,0(sp)
    6130:	1027883a 	mov	r19,r2
    6134:	1813883a 	mov	r9,r3
    6138:	503f5726 	beq	r10,zero,5e98 <__kernel_rem_pio2+0x364>
    613c:	d9800317 	ldw	r6,12(sp)
    6140:	0009883a 	mov	r4,zero
    6144:	014ffc34 	movhi	r5,16368
    6148:	d8c00015 	stw	r3,0(sp)
    614c:	0006db00 	call	6db0 <scalbn>
    6150:	da400017 	ldw	r9,0(sp)
    6154:	9809883a 	mov	r4,r19
    6158:	100d883a 	mov	r6,r2
    615c:	480b883a 	mov	r5,r9
    6160:	180f883a 	mov	r7,r3
    6164:	00090940 	call	9094 <__subdf3>
    6168:	1027883a 	mov	r19,r2
    616c:	1813883a 	mov	r9,r3
    6170:	003f4906 	br	5e98 <__kernel_rem_pio2+0x364>
    6174:	0005883a 	mov	r2,zero
    6178:	0007883a 	mov	r3,zero
    617c:	003e9f06 	br	5bfc <__kernel_rem_pio2+0xc8>
    6180:	01000044 	movi	r4,1
    6184:	0005883a 	mov	r2,zero
    6188:	003fb506 	br	6060 <__kernel_rem_pio2+0x52c>
    618c:	180b883a 	mov	r5,r3
    6190:	000d883a 	mov	r6,zero
    6194:	01cff834 	movhi	r7,16352
    6198:	9009883a 	mov	r4,r18
    619c:	d8c00a15 	stw	r3,40(sp)
    61a0:	d8c00015 	stw	r3,0(sp)
    61a4:	00087180 	call	8718 <__gedf2>
    61a8:	da400017 	ldw	r9,0(sp)
    61ac:	d8c00a17 	ldw	r3,40(sp)
    61b0:	1001080e 	bge	r2,zero,65d4 <__kernel_rem_pio2+0xaa0>
    61b4:	002b883a 	mov	r21,zero
    61b8:	003f3706 	br	5e98 <__kernel_rem_pio2+0x364>
    61bc:	8d400044 	addi	r21,r17,1
    61c0:	dd400015 	stw	r21,0(sp)
    61c4:	003f5506 	br	5f1c <__kernel_rem_pio2+0x3e8>
    61c8:	0039883a 	mov	fp,zero
    61cc:	002b883a 	mov	r21,zero
    61d0:	003eb106 	br	5c98 <__kernel_rem_pio2+0x164>
    61d4:	d8c00317 	ldw	r3,12(sp)
    61d8:	980490ba 	slli	r2,r19,2
    61dc:	d9400b04 	addi	r5,sp,44
    61e0:	193ffa04 	addi	r4,r3,-24
    61e4:	10c08c04 	addi	r3,r2,560
    61e8:	1947883a 	add	r3,r3,r5
    61ec:	18ff7417 	ldw	r3,-560(r3)
    61f0:	dd400215 	stw	r21,8(sp)
    61f4:	d9000315 	stw	r4,12(sp)
    61f8:	1800091e 	bne	r3,zero,6220 <__kernel_rem_pio2+0x6ec>
    61fc:	10800b04 	addi	r2,r2,44
    6200:	16c5883a 	add	r2,r2,sp
    6204:	2007883a 	mov	r3,r4
    6208:	113fff17 	ldw	r4,-4(r2)
    620c:	9cffffc4 	addi	r19,r19,-1
    6210:	10bfff04 	addi	r2,r2,-4
    6214:	18fffa04 	addi	r3,r3,-24
    6218:	203ffb26 	beq	r4,zero,6208 <__kernel_rem_pio2+0x6d4>
    621c:	d8c00315 	stw	r3,12(sp)
    6220:	d9800317 	ldw	r6,12(sp)
    6224:	0009883a 	mov	r4,zero
    6228:	014ffc34 	movhi	r5,16368
    622c:	0006db00 	call	6db0 <scalbn>
    6230:	1021883a 	mov	r16,r2
    6234:	1823883a 	mov	r17,r3
    6238:	98017116 	blt	r19,zero,6800 <__kernel_rem_pio2+0xccc>
    623c:	980490fa 	slli	r2,r19,3
    6240:	982c90ba 	slli	r22,r19,2
    6244:	d8c06f04 	addi	r3,sp,444
    6248:	18b9883a 	add	fp,r3,r2
    624c:	d8800315 	stw	r2,12(sp)
    6250:	b0800b04 	addi	r2,r22,44
    6254:	df000115 	stw	fp,4(sp)
    6258:	16ed883a 	add	r22,r2,sp
    625c:	b1000017 	ldw	r4,0(r22)
    6260:	e73ffe04 	addi	fp,fp,-8
    6264:	0009a740 	call	9a74 <__floatsidf>
    6268:	800d883a 	mov	r6,r16
    626c:	880f883a 	mov	r7,r17
    6270:	1009883a 	mov	r4,r2
    6274:	180b883a 	mov	r5,r3
    6278:	00088e80 	call	88e8 <__muldf3>
    627c:	8009883a 	mov	r4,r16
    6280:	880b883a 	mov	r5,r17
    6284:	000d883a 	mov	r6,zero
    6288:	01cf9c34 	movhi	r7,15984
    628c:	e0800215 	stw	r2,8(fp)
    6290:	e0c00315 	stw	r3,12(fp)
    6294:	00088e80 	call	88e8 <__muldf3>
    6298:	b009883a 	mov	r4,r22
    629c:	1021883a 	mov	r16,r2
    62a0:	d8800b04 	addi	r2,sp,44
    62a4:	1823883a 	mov	r17,r3
    62a8:	b5bfff04 	addi	r22,r22,-4
    62ac:	113feb1e 	bne	r2,r4,625c <__kernel_rem_pio2+0x728>
    62b0:	05cffe74 	movhi	r23,16377
    62b4:	dc800517 	ldw	r18,20(sp)
    62b8:	bdc87ec4 	addi	r23,r23,8699
    62bc:	dd800117 	ldw	r22,4(sp)
    62c0:	d8804704 	addi	r2,sp,284
    62c4:	dd000415 	stw	r20,16(sp)
    62c8:	dcc00015 	stw	r19,0(sp)
    62cc:	ddc00115 	stw	r23,4(sp)
    62d0:	0021883a 	mov	r16,zero
    62d4:	102b883a 	mov	r21,r2
    62d8:	90002316 	blt	r18,zero,6368 <__kernel_rem_pio2+0x834>
    62dc:	04c00074 	movhi	r19,1
    62e0:	d9400117 	ldw	r5,4(sp)
    62e4:	9cdf1104 	addi	r19,r19,31812
    62e8:	b02f883a 	mov	r23,r22
    62ec:	01100034 	movhi	r4,16384
    62f0:	0039883a 	mov	fp,zero
    62f4:	0023883a 	mov	r17,zero
    62f8:	0029883a 	mov	r20,zero
    62fc:	00000506 	br	6314 <__kernel_rem_pio2+0x7e0>
    6300:	9cc00204 	addi	r19,r19,8
    6304:	bdc00204 	addi	r23,r23,8
    6308:	85000e16 	blt	r16,r20,6344 <__kernel_rem_pio2+0x810>
    630c:	99000017 	ldw	r4,0(r19)
    6310:	99400117 	ldw	r5,4(r19)
    6314:	b9800017 	ldw	r6,0(r23)
    6318:	b9c00117 	ldw	r7,4(r23)
    631c:	a5000044 	addi	r20,r20,1
    6320:	00088e80 	call	88e8 <__muldf3>
    6324:	e009883a 	mov	r4,fp
    6328:	880b883a 	mov	r5,r17
    632c:	100d883a 	mov	r6,r2
    6330:	180f883a 	mov	r7,r3
    6334:	00074940 	call	7494 <__adddf3>
    6338:	1039883a 	mov	fp,r2
    633c:	1823883a 	mov	r17,r3
    6340:	953fef0e 	bge	r18,r20,6300 <__kernel_rem_pio2+0x7cc>
    6344:	d8c00017 	ldw	r3,0(sp)
    6348:	af000015 	stw	fp,0(r21)
    634c:	ac400115 	stw	r17,4(r21)
    6350:	80800044 	addi	r2,r16,1
    6354:	ad400204 	addi	r21,r21,8
    6358:	b5bffe04 	addi	r22,r22,-8
    635c:	1c000526 	beq	r3,r16,6374 <__kernel_rem_pio2+0x840>
    6360:	1021883a 	mov	r16,r2
    6364:	903fdd0e 	bge	r18,zero,62dc <__kernel_rem_pio2+0x7a8>
    6368:	0039883a 	mov	fp,zero
    636c:	0023883a 	mov	r17,zero
    6370:	003ff406 	br	6344 <__kernel_rem_pio2+0x810>
    6374:	d880a117 	ldw	r2,644(sp)
    6378:	dd000417 	ldw	r20,16(sp)
    637c:	dcc00017 	ldw	r19,0(sp)
    6380:	108000c8 	cmpgei	r2,r2,3
    6384:	1000241e 	bne	r2,zero,6418 <__kernel_rem_pio2+0x8e4>
    6388:	d880a117 	ldw	r2,644(sp)
    638c:	0080d216 	blt	zero,r2,66d8 <__kernel_rem_pio2+0xba4>
    6390:	1000141e 	bne	r2,zero,63e4 <__kernel_rem_pio2+0x8b0>
    6394:	d8c00317 	ldw	r3,12(sp)
    6398:	d8804704 	addi	r2,sp,284
    639c:	0009883a 	mov	r4,zero
    63a0:	10eb883a 	add	r21,r2,r3
    63a4:	000b883a 	mov	r5,zero
    63a8:	a9800017 	ldw	r6,0(r21)
    63ac:	a9c00117 	ldw	r7,4(r21)
    63b0:	00074940 	call	7494 <__adddf3>
    63b4:	a80d883a 	mov	r6,r21
    63b8:	1009883a 	mov	r4,r2
    63bc:	d8804704 	addi	r2,sp,284
    63c0:	180b883a 	mov	r5,r3
    63c4:	ad7ffe04 	addi	r21,r21,-8
    63c8:	11bff71e 	bne	r2,r6,63a8 <__kernel_rem_pio2+0x874>
    63cc:	d8800217 	ldw	r2,8(sp)
    63d0:	10000126 	beq	r2,zero,63d8 <__kernel_rem_pio2+0x8a4>
    63d4:	2960003c 	xorhi	r5,r5,32768
    63d8:	d8800917 	ldw	r2,36(sp)
    63dc:	11000015 	stw	r4,0(r2)
    63e0:	11400115 	stw	r5,4(r2)
    63e4:	a08001cc 	andi	r2,r20,7
    63e8:	dfc0a017 	ldw	ra,640(sp)
    63ec:	df009f17 	ldw	fp,636(sp)
    63f0:	ddc09e17 	ldw	r23,632(sp)
    63f4:	dd809d17 	ldw	r22,628(sp)
    63f8:	dd409c17 	ldw	r21,624(sp)
    63fc:	dd009b17 	ldw	r20,620(sp)
    6400:	dcc09a17 	ldw	r19,616(sp)
    6404:	dc809917 	ldw	r18,612(sp)
    6408:	dc409817 	ldw	r17,608(sp)
    640c:	dc009717 	ldw	r16,604(sp)
    6410:	dec0a104 	addi	sp,sp,644
    6414:	f800283a 	ret
    6418:	d880a117 	ldw	r2,644(sp)
    641c:	108000e0 	cmpeqi	r2,r2,3
    6420:	103ff026 	beq	r2,zero,63e4 <__kernel_rem_pio2+0x8b0>
    6424:	98010226 	beq	r19,zero,6830 <__kernel_rem_pio2+0xcfc>
    6428:	d8c00317 	ldw	r3,12(sp)
    642c:	d9000b04 	addi	r4,sp,44
    6430:	18808c04 	addi	r2,r3,560
    6434:	1105883a 	add	r2,r2,r4
    6438:	14bfb017 	ldw	r18,-320(r2)
    643c:	147fb117 	ldw	r17,-316(r2)
    6440:	d8804704 	addi	r2,sp,284
    6444:	10e1883a 	add	r16,r2,r3
    6448:	85bffe17 	ldw	r22,-8(r16)
    644c:	857fff17 	ldw	r21,-4(r16)
    6450:	9009883a 	mov	r4,r18
    6454:	880b883a 	mov	r5,r17
    6458:	b00d883a 	mov	r6,r22
    645c:	a80f883a 	mov	r7,r21
    6460:	00074940 	call	7494 <__adddf3>
    6464:	100d883a 	mov	r6,r2
    6468:	180f883a 	mov	r7,r3
    646c:	b009883a 	mov	r4,r22
    6470:	a80b883a 	mov	r5,r21
    6474:	9039883a 	mov	fp,r18
    6478:	882f883a 	mov	r23,r17
    647c:	1025883a 	mov	r18,r2
    6480:	1823883a 	mov	r17,r3
    6484:	00090940 	call	9094 <__subdf3>
    6488:	e00d883a 	mov	r6,fp
    648c:	b80f883a 	mov	r7,r23
    6490:	1009883a 	mov	r4,r2
    6494:	180b883a 	mov	r5,r3
    6498:	00074940 	call	7494 <__adddf3>
    649c:	80800015 	stw	r2,0(r16)
    64a0:	80c00115 	stw	r3,4(r16)
    64a4:	84bffe15 	stw	r18,-8(r16)
    64a8:	847fff15 	stw	r17,-4(r16)
    64ac:	d8804704 	addi	r2,sp,284
    64b0:	843ffe04 	addi	r16,r16,-8
    64b4:	143fe41e 	bne	r2,r16,6448 <__kernel_rem_pio2+0x914>
    64b8:	9cc00088 	cmpgei	r19,r19,2
    64bc:	9800dc26 	beq	r19,zero,6830 <__kernel_rem_pio2+0xcfc>
    64c0:	d8c00317 	ldw	r3,12(sp)
    64c4:	d9000b04 	addi	r4,sp,44
    64c8:	dc404904 	addi	r17,sp,292
    64cc:	18808c04 	addi	r2,r3,560
    64d0:	1105883a 	add	r2,r2,r4
    64d4:	14ffb017 	ldw	r19,-320(r2)
    64d8:	14bfb117 	ldw	r18,-316(r2)
    64dc:	d8804704 	addi	r2,sp,284
    64e0:	10eb883a 	add	r21,r2,r3
    64e4:	a821883a 	mov	r16,r21
    64e8:	dd000015 	stw	r20,0(sp)
    64ec:	85fffe17 	ldw	r23,-8(r16)
    64f0:	85bfff17 	ldw	r22,-4(r16)
    64f4:	9809883a 	mov	r4,r19
    64f8:	900b883a 	mov	r5,r18
    64fc:	b80d883a 	mov	r6,r23
    6500:	b00f883a 	mov	r7,r22
    6504:	00074940 	call	7494 <__adddf3>
    6508:	100d883a 	mov	r6,r2
    650c:	180f883a 	mov	r7,r3
    6510:	b809883a 	mov	r4,r23
    6514:	b00b883a 	mov	r5,r22
    6518:	9829883a 	mov	r20,r19
    651c:	9039883a 	mov	fp,r18
    6520:	1027883a 	mov	r19,r2
    6524:	1825883a 	mov	r18,r3
    6528:	00090940 	call	9094 <__subdf3>
    652c:	a00d883a 	mov	r6,r20
    6530:	e00f883a 	mov	r7,fp
    6534:	1009883a 	mov	r4,r2
    6538:	180b883a 	mov	r5,r3
    653c:	00074940 	call	7494 <__adddf3>
    6540:	80800015 	stw	r2,0(r16)
    6544:	80c00115 	stw	r3,4(r16)
    6548:	84fffe15 	stw	r19,-8(r16)
    654c:	84bfff15 	stw	r18,-4(r16)
    6550:	843ffe04 	addi	r16,r16,-8
    6554:	8c3fe51e 	bne	r17,r16,64ec <__kernel_rem_pio2+0x9b8>
    6558:	dd000017 	ldw	r20,0(sp)
    655c:	0009883a 	mov	r4,zero
    6560:	000b883a 	mov	r5,zero
    6564:	a9800017 	ldw	r6,0(r21)
    6568:	a9c00117 	ldw	r7,4(r21)
    656c:	ad7ffe04 	addi	r21,r21,-8
    6570:	00074940 	call	7494 <__adddf3>
    6574:	1009883a 	mov	r4,r2
    6578:	180b883a 	mov	r5,r3
    657c:	8d7ff91e 	bne	r17,r21,6564 <__kernel_rem_pio2+0xa30>
    6580:	da000217 	ldw	r8,8(sp)
    6584:	d9c04717 	ldw	r7,284(sp)
    6588:	d8c04817 	ldw	r3,288(sp)
    658c:	d9804917 	ldw	r6,292(sp)
    6590:	d8804a17 	ldw	r2,296(sp)
    6594:	4000891e 	bne	r8,zero,67bc <__kernel_rem_pio2+0xc88>
    6598:	da000917 	ldw	r8,36(sp)
    659c:	41c00015 	stw	r7,0(r8)
    65a0:	40c00115 	stw	r3,4(r8)
    65a4:	41800215 	stw	r6,8(r8)
    65a8:	40800315 	stw	r2,12(r8)
    65ac:	41000415 	stw	r4,16(r8)
    65b0:	41400515 	stw	r5,20(r8)
    65b4:	003f8b06 	br	63e4 <__kernel_rem_pio2+0x8b0>
    65b8:	88bfffc4 	addi	r2,r17,-1
    65bc:	100490ba 	slli	r2,r2,2
    65c0:	01402034 	movhi	r5,128
    65c4:	003eca06 	br	60f0 <__kernel_rem_pio2+0x5bc>
    65c8:	00fffa04 	movi	r3,-24
    65cc:	d8000615 	stw	zero,24(sp)
    65d0:	003d7906 	br	5bb8 <__kernel_rem_pio2+0x84>
    65d4:	a5000044 	addi	r20,r20,1
    65d8:	05400084 	movi	r21,2
    65dc:	047e9016 	blt	zero,r17,6020 <__kernel_rem_pio2+0x4ec>
    65e0:	480f883a 	mov	r7,r9
    65e4:	900d883a 	mov	r6,r18
    65e8:	0009883a 	mov	r4,zero
    65ec:	014ffc34 	movhi	r5,16368
    65f0:	00090940 	call	9094 <__subdf3>
    65f4:	1027883a 	mov	r19,r2
    65f8:	1813883a 	mov	r9,r3
    65fc:	003e2606 	br	5e98 <__kernel_rem_pio2+0x364>
    6600:	ddc00317 	ldw	r23,12(sp)
    6604:	9809883a 	mov	r4,r19
    6608:	480b883a 	mov	r5,r9
    660c:	05cdc83a 	sub	r6,zero,r23
    6610:	dd400215 	stw	r21,8(sp)
    6614:	0006db00 	call	6db0 <scalbn>
    6618:	000d883a 	mov	r6,zero
    661c:	01d05c34 	movhi	r7,16752
    6620:	1009883a 	mov	r4,r2
    6624:	180b883a 	mov	r5,r3
    6628:	1025883a 	mov	r18,r2
    662c:	1821883a 	mov	r16,r3
    6630:	00087180 	call	8718 <__gedf2>
    6634:	10005716 	blt	r2,zero,6794 <__kernel_rem_pio2+0xc60>
    6638:	000d883a 	mov	r6,zero
    663c:	01cf9c34 	movhi	r7,15984
    6640:	9009883a 	mov	r4,r18
    6644:	800b883a 	mov	r5,r16
    6648:	00088e80 	call	88e8 <__muldf3>
    664c:	882c90ba 	slli	r22,r17,2
    6650:	180b883a 	mov	r5,r3
    6654:	1009883a 	mov	r4,r2
    6658:	00099f40 	call	99f4 <__fixdfsi>
    665c:	1009883a 	mov	r4,r2
    6660:	102b883a 	mov	r21,r2
    6664:	d8c00b04 	addi	r3,sp,44
    6668:	b0808c04 	addi	r2,r22,560
    666c:	10ed883a 	add	r22,r2,r3
    6670:	0009a740 	call	9a74 <__floatsidf>
    6674:	000d883a 	mov	r6,zero
    6678:	01d05c34 	movhi	r7,16752
    667c:	1009883a 	mov	r4,r2
    6680:	180b883a 	mov	r5,r3
    6684:	00088e80 	call	88e8 <__muldf3>
    6688:	100d883a 	mov	r6,r2
    668c:	180f883a 	mov	r7,r3
    6690:	9009883a 	mov	r4,r18
    6694:	800b883a 	mov	r5,r16
    6698:	00090940 	call	9094 <__subdf3>
    669c:	180b883a 	mov	r5,r3
    66a0:	1009883a 	mov	r4,r2
    66a4:	00099f40 	call	99f4 <__fixdfsi>
    66a8:	8cc00044 	addi	r19,r17,1
    66ac:	980690ba 	slli	r3,r19,2
    66b0:	b0bf7415 	stw	r2,-560(r22)
    66b4:	b8800604 	addi	r2,r23,24
    66b8:	d8800315 	stw	r2,12(sp)
    66bc:	18808c04 	addi	r2,r3,560
    66c0:	d8c00b04 	addi	r3,sp,44
    66c4:	10c7883a 	add	r3,r2,r3
    66c8:	1d7f7415 	stw	r21,-560(r3)
    66cc:	003ed406 	br	6220 <__kernel_rem_pio2+0x6ec>
    66d0:	0015883a 	mov	r10,zero
    66d4:	003e7d06 	br	60cc <__kernel_rem_pio2+0x598>
    66d8:	d8c00317 	ldw	r3,12(sp)
    66dc:	d8804704 	addi	r2,sp,284
    66e0:	10eb883a 	add	r21,r2,r3
    66e4:	0005883a 	mov	r2,zero
    66e8:	0007883a 	mov	r3,zero
    66ec:	1009883a 	mov	r4,r2
    66f0:	180b883a 	mov	r5,r3
    66f4:	a9800017 	ldw	r6,0(r21)
    66f8:	a9c00117 	ldw	r7,4(r21)
    66fc:	00074940 	call	7494 <__adddf3>
    6700:	a80d883a 	mov	r6,r21
    6704:	1009883a 	mov	r4,r2
    6708:	d8804704 	addi	r2,sp,284
    670c:	180b883a 	mov	r5,r3
    6710:	ad7ffe04 	addi	r21,r21,-8
    6714:	11bff71e 	bne	r2,r6,66f4 <__kernel_rem_pio2+0xbc0>
    6718:	2005883a 	mov	r2,r4
    671c:	d9000217 	ldw	r4,8(sp)
    6720:	20002a1e 	bne	r4,zero,67cc <__kernel_rem_pio2+0xc98>
    6724:	d9800917 	ldw	r6,36(sp)
    6728:	d9004717 	ldw	r4,284(sp)
    672c:	d9404817 	ldw	r5,288(sp)
    6730:	30800015 	stw	r2,0(r6)
    6734:	30c00115 	stw	r3,4(r6)
    6738:	180f883a 	mov	r7,r3
    673c:	100d883a 	mov	r6,r2
    6740:	00090940 	call	9094 <__subdf3>
    6744:	1009883a 	mov	r4,r2
    6748:	180b883a 	mov	r5,r3
    674c:	04c00d0e 	bge	zero,r19,6784 <__kernel_rem_pio2+0xc50>
    6750:	dc004904 	addi	r16,sp,292
    6754:	04400044 	movi	r17,1
    6758:	81800017 	ldw	r6,0(r16)
    675c:	81c00117 	ldw	r7,4(r16)
    6760:	8c400044 	addi	r17,r17,1
    6764:	84000204 	addi	r16,r16,8
    6768:	00074940 	call	7494 <__adddf3>
    676c:	1009883a 	mov	r4,r2
    6770:	180b883a 	mov	r5,r3
    6774:	9c7ff80e 	bge	r19,r17,6758 <__kernel_rem_pio2+0xc24>
    6778:	d8800217 	ldw	r2,8(sp)
    677c:	10000126 	beq	r2,zero,6784 <__kernel_rem_pio2+0xc50>
    6780:	2960003c 	xorhi	r5,r5,32768
    6784:	d8800917 	ldw	r2,36(sp)
    6788:	11000215 	stw	r4,8(r2)
    678c:	11400315 	stw	r5,12(r2)
    6790:	003f1406 	br	63e4 <__kernel_rem_pio2+0x8b0>
    6794:	880490ba 	slli	r2,r17,2
    6798:	800b883a 	mov	r5,r16
    679c:	d8c00b04 	addi	r3,sp,44
    67a0:	10808c04 	addi	r2,r2,560
    67a4:	9009883a 	mov	r4,r18
    67a8:	10e1883a 	add	r16,r2,r3
    67ac:	00099f40 	call	99f4 <__fixdfsi>
    67b0:	80bf7415 	stw	r2,-560(r16)
    67b4:	8827883a 	mov	r19,r17
    67b8:	003e9906 	br	6220 <__kernel_rem_pio2+0x6ec>
    67bc:	18e0003c 	xorhi	r3,r3,32768
    67c0:	10a0003c 	xorhi	r2,r2,32768
    67c4:	2960003c 	xorhi	r5,r5,32768
    67c8:	003f7306 	br	6598 <__kernel_rem_pio2+0xa64>
    67cc:	d9c00917 	ldw	r7,36(sp)
    67d0:	d9004717 	ldw	r4,284(sp)
    67d4:	d9404817 	ldw	r5,288(sp)
    67d8:	19a0003c 	xorhi	r6,r3,32768
    67dc:	39800115 	stw	r6,4(r7)
    67e0:	38800015 	stw	r2,0(r7)
    67e4:	100d883a 	mov	r6,r2
    67e8:	180f883a 	mov	r7,r3
    67ec:	00090940 	call	9094 <__subdf3>
    67f0:	1009883a 	mov	r4,r2
    67f4:	180b883a 	mov	r5,r3
    67f8:	04ffd516 	blt	zero,r19,6750 <__kernel_rem_pio2+0xc1c>
    67fc:	003fe006 	br	6780 <__kernel_rem_pio2+0xc4c>
    6800:	d880a117 	ldw	r2,644(sp)
    6804:	108000c8 	cmpgei	r2,r2,3
    6808:	1000061e 	bne	r2,zero,6824 <__kernel_rem_pio2+0xcf0>
    680c:	d880a117 	ldw	r2,644(sp)
    6810:	00800a16 	blt	zero,r2,683c <__kernel_rem_pio2+0xd08>
    6814:	103ef31e 	bne	r2,zero,63e4 <__kernel_rem_pio2+0x8b0>
    6818:	0009883a 	mov	r4,zero
    681c:	000b883a 	mov	r5,zero
    6820:	003eea06 	br	63cc <__kernel_rem_pio2+0x898>
    6824:	d880a117 	ldw	r2,644(sp)
    6828:	108000e0 	cmpeqi	r2,r2,3
    682c:	103eed26 	beq	r2,zero,63e4 <__kernel_rem_pio2+0x8b0>
    6830:	0009883a 	mov	r4,zero
    6834:	000b883a 	mov	r5,zero
    6838:	003f5106 	br	6580 <__kernel_rem_pio2+0xa4c>
    683c:	0005883a 	mov	r2,zero
    6840:	0007883a 	mov	r3,zero
    6844:	003fb506 	br	671c <__kernel_rem_pio2+0xbe8>

00006848 <__kernel_sin>:
    6848:	02200034 	movhi	r8,32768
    684c:	defff304 	addi	sp,sp,-52
    6850:	423fffc4 	addi	r8,r8,-1
    6854:	dd400815 	stw	r21,32(sp)
    6858:	dd000715 	stw	r20,28(sp)
    685c:	dc400415 	stw	r17,16(sp)
    6860:	dc000315 	stw	r16,12(sp)
    6864:	dfc00c15 	stw	ra,48(sp)
    6868:	df000b15 	stw	fp,44(sp)
    686c:	ddc00a15 	stw	r23,40(sp)
    6870:	dd800915 	stw	r22,36(sp)
    6874:	dcc00615 	stw	r19,24(sp)
    6878:	dc800515 	stw	r18,20(sp)
    687c:	2a10703a 	and	r8,r5,r8
    6880:	00cf9034 	movhi	r3,15936
    6884:	2821883a 	mov	r16,r5
    6888:	2023883a 	mov	r17,r4
    688c:	302b883a 	mov	r21,r6
    6890:	3829883a 	mov	r20,r7
    6894:	40c0020e 	bge	r8,r3,68a0 <__kernel_sin+0x58>
    6898:	00099f40 	call	99f4 <__fixdfsi>
    689c:	10009926 	beq	r2,zero,6b04 <__kernel_sin+0x2bc>
    68a0:	880d883a 	mov	r6,r17
    68a4:	800f883a 	mov	r7,r16
    68a8:	8809883a 	mov	r4,r17
    68ac:	800b883a 	mov	r5,r16
    68b0:	00088e80 	call	88e8 <__muldf3>
    68b4:	100d883a 	mov	r6,r2
    68b8:	180f883a 	mov	r7,r3
    68bc:	8809883a 	mov	r4,r17
    68c0:	800b883a 	mov	r5,r16
    68c4:	1027883a 	mov	r19,r2
    68c8:	1825883a 	mov	r18,r3
    68cc:	00088e80 	call	88e8 <__muldf3>
    68d0:	0196b434 	movhi	r6,23248
    68d4:	01cf79b4 	movhi	r7,15846
    68d8:	31b55f04 	addi	r6,r6,-10884
    68dc:	39f64e84 	addi	r7,r7,-9926
    68e0:	9809883a 	mov	r4,r19
    68e4:	900b883a 	mov	r5,r18
    68e8:	102f883a 	mov	r23,r2
    68ec:	182d883a 	mov	r22,r3
    68f0:	00088e80 	call	88e8 <__muldf3>
    68f4:	01a28b34 	movhi	r6,35372
    68f8:	01cf96f4 	movhi	r7,15963
    68fc:	31a73ac4 	addi	r6,r6,-25365
    6900:	39f97984 	addi	r7,r7,-6682
    6904:	1009883a 	mov	r4,r2
    6908:	180b883a 	mov	r5,r3
    690c:	00090940 	call	9094 <__subdf3>
    6910:	980d883a 	mov	r6,r19
    6914:	900f883a 	mov	r7,r18
    6918:	1009883a 	mov	r4,r2
    691c:	180b883a 	mov	r5,r3
    6920:	00088e80 	call	88e8 <__muldf3>
    6924:	0195ecb4 	movhi	r6,22450
    6928:	01cfb1f4 	movhi	r7,16071
    692c:	31bf9f44 	addi	r6,r6,-387
    6930:	39c778c4 	addi	r7,r7,7651
    6934:	1009883a 	mov	r4,r2
    6938:	180b883a 	mov	r5,r3
    693c:	00074940 	call	7494 <__adddf3>
    6940:	980d883a 	mov	r6,r19
    6944:	900f883a 	mov	r7,r18
    6948:	1009883a 	mov	r4,r2
    694c:	180b883a 	mov	r5,r3
    6950:	00088e80 	call	88e8 <__muldf3>
    6954:	01867074 	movhi	r6,6593
    6958:	01cfcab4 	movhi	r7,16170
    695c:	31987544 	addi	r6,r6,25045
    6960:	39c06804 	addi	r7,r7,416
    6964:	1009883a 	mov	r4,r2
    6968:	180b883a 	mov	r5,r3
    696c:	00090940 	call	9094 <__subdf3>
    6970:	980d883a 	mov	r6,r19
    6974:	900f883a 	mov	r7,r18
    6978:	1009883a 	mov	r4,r2
    697c:	180b883a 	mov	r5,r3
    6980:	00088e80 	call	88e8 <__muldf3>
    6984:	01844474 	movhi	r6,4369
    6988:	01cfe074 	movhi	r7,16257
    698c:	31be2984 	addi	r6,r6,-1882
    6990:	39c44444 	addi	r7,r7,4369
    6994:	1009883a 	mov	r4,r2
    6998:	180b883a 	mov	r5,r3
    699c:	00074940 	call	7494 <__adddf3>
    69a0:	1011883a 	mov	r8,r2
    69a4:	d8800d17 	ldw	r2,52(sp)
    69a8:	1839883a 	mov	fp,r3
    69ac:	10003e26 	beq	r2,zero,6aa8 <__kernel_sin+0x260>
    69b0:	000d883a 	mov	r6,zero
    69b4:	01cff834 	movhi	r7,16352
    69b8:	a809883a 	mov	r4,r21
    69bc:	a00b883a 	mov	r5,r20
    69c0:	da000215 	stw	r8,8(sp)
    69c4:	00088e80 	call	88e8 <__muldf3>
    69c8:	da000217 	ldw	r8,8(sp)
    69cc:	e00f883a 	mov	r7,fp
    69d0:	b809883a 	mov	r4,r23
    69d4:	400d883a 	mov	r6,r8
    69d8:	b00b883a 	mov	r5,r22
    69dc:	d8800115 	stw	r2,4(sp)
    69e0:	d8c00015 	stw	r3,0(sp)
    69e4:	00088e80 	call	88e8 <__muldf3>
    69e8:	da800117 	ldw	r10,4(sp)
    69ec:	da400017 	ldw	r9,0(sp)
    69f0:	100d883a 	mov	r6,r2
    69f4:	5009883a 	mov	r4,r10
    69f8:	480b883a 	mov	r5,r9
    69fc:	180f883a 	mov	r7,r3
    6a00:	00090940 	call	9094 <__subdf3>
    6a04:	980d883a 	mov	r6,r19
    6a08:	900f883a 	mov	r7,r18
    6a0c:	1009883a 	mov	r4,r2
    6a10:	180b883a 	mov	r5,r3
    6a14:	00088e80 	call	88e8 <__muldf3>
    6a18:	a80d883a 	mov	r6,r21
    6a1c:	a00f883a 	mov	r7,r20
    6a20:	1009883a 	mov	r4,r2
    6a24:	180b883a 	mov	r5,r3
    6a28:	00090940 	call	9094 <__subdf3>
    6a2c:	01955574 	movhi	r6,21845
    6a30:	01cff174 	movhi	r7,16325
    6a34:	31955244 	addi	r6,r6,21833
    6a38:	39d55544 	addi	r7,r7,21845
    6a3c:	b809883a 	mov	r4,r23
    6a40:	b00b883a 	mov	r5,r22
    6a44:	1027883a 	mov	r19,r2
    6a48:	1825883a 	mov	r18,r3
    6a4c:	00088e80 	call	88e8 <__muldf3>
    6a50:	100d883a 	mov	r6,r2
    6a54:	180f883a 	mov	r7,r3
    6a58:	9809883a 	mov	r4,r19
    6a5c:	900b883a 	mov	r5,r18
    6a60:	00074940 	call	7494 <__adddf3>
    6a64:	100d883a 	mov	r6,r2
    6a68:	180f883a 	mov	r7,r3
    6a6c:	8809883a 	mov	r4,r17
    6a70:	800b883a 	mov	r5,r16
    6a74:	00090940 	call	9094 <__subdf3>
    6a78:	dfc00c17 	ldw	ra,48(sp)
    6a7c:	df000b17 	ldw	fp,44(sp)
    6a80:	ddc00a17 	ldw	r23,40(sp)
    6a84:	dd800917 	ldw	r22,36(sp)
    6a88:	dd400817 	ldw	r21,32(sp)
    6a8c:	dd000717 	ldw	r20,28(sp)
    6a90:	dcc00617 	ldw	r19,24(sp)
    6a94:	dc800517 	ldw	r18,20(sp)
    6a98:	dc400417 	ldw	r17,16(sp)
    6a9c:	dc000317 	ldw	r16,12(sp)
    6aa0:	dec00d04 	addi	sp,sp,52
    6aa4:	f800283a 	ret
    6aa8:	400d883a 	mov	r6,r8
    6aac:	9809883a 	mov	r4,r19
    6ab0:	900b883a 	mov	r5,r18
    6ab4:	180f883a 	mov	r7,r3
    6ab8:	00088e80 	call	88e8 <__muldf3>
    6abc:	01955574 	movhi	r6,21845
    6ac0:	01cff174 	movhi	r7,16325
    6ac4:	31955244 	addi	r6,r6,21833
    6ac8:	39d55544 	addi	r7,r7,21845
    6acc:	1009883a 	mov	r4,r2
    6ad0:	180b883a 	mov	r5,r3
    6ad4:	00090940 	call	9094 <__subdf3>
    6ad8:	b80d883a 	mov	r6,r23
    6adc:	b00f883a 	mov	r7,r22
    6ae0:	1009883a 	mov	r4,r2
    6ae4:	180b883a 	mov	r5,r3
    6ae8:	00088e80 	call	88e8 <__muldf3>
    6aec:	880d883a 	mov	r6,r17
    6af0:	800f883a 	mov	r7,r16
    6af4:	1009883a 	mov	r4,r2
    6af8:	180b883a 	mov	r5,r3
    6afc:	00074940 	call	7494 <__adddf3>
    6b00:	003fdd06 	br	6a78 <__kernel_sin+0x230>
    6b04:	8805883a 	mov	r2,r17
    6b08:	8007883a 	mov	r3,r16
    6b0c:	003fda06 	br	6a78 <__kernel_sin+0x230>

00006b10 <with_errno>:
    6b10:	defffc04 	addi	sp,sp,-16
    6b14:	dc800215 	stw	r18,8(sp)
    6b18:	dc400115 	stw	r17,4(sp)
    6b1c:	dc000015 	stw	r16,0(sp)
    6b20:	dfc00315 	stw	ra,12(sp)
    6b24:	2023883a 	mov	r17,r4
    6b28:	2821883a 	mov	r16,r5
    6b2c:	3025883a 	mov	r18,r6
    6b30:	0009e7c0 	call	9e7c <__errno>
    6b34:	14800015 	stw	r18,0(r2)
    6b38:	8007883a 	mov	r3,r16
    6b3c:	8805883a 	mov	r2,r17
    6b40:	dfc00317 	ldw	ra,12(sp)
    6b44:	dc800217 	ldw	r18,8(sp)
    6b48:	dc400117 	ldw	r17,4(sp)
    6b4c:	dc000017 	ldw	r16,0(sp)
    6b50:	dec00404 	addi	sp,sp,16
    6b54:	f800283a 	ret

00006b58 <xflow>:
    6b58:	defffd04 	addi	sp,sp,-12
    6b5c:	2005883a 	mov	r2,r4
    6b60:	dfc00215 	stw	ra,8(sp)
    6b64:	2809883a 	mov	r4,r5
    6b68:	300b883a 	mov	r5,r6
    6b6c:	10000c26 	beq	r2,zero,6ba0 <xflow+0x48>
    6b70:	30a0003c 	xorhi	r2,r6,32768
    6b74:	d9000015 	stw	r4,0(sp)
    6b78:	d8800115 	stw	r2,4(sp)
    6b7c:	d9800017 	ldw	r6,0(sp)
    6b80:	d9c00117 	ldw	r7,4(sp)
    6b84:	00088e80 	call	88e8 <__muldf3>
    6b88:	01800884 	movi	r6,34
    6b8c:	1009883a 	mov	r4,r2
    6b90:	180b883a 	mov	r5,r3
    6b94:	dfc00217 	ldw	ra,8(sp)
    6b98:	dec00304 	addi	sp,sp,12
    6b9c:	0006b101 	jmpi	6b10 <with_errno>
    6ba0:	3005883a 	mov	r2,r6
    6ba4:	003ff306 	br	6b74 <xflow+0x1c>

00006ba8 <__math_uflow>:
    6ba8:	000b883a 	mov	r5,zero
    6bac:	01840034 	movhi	r6,4096
    6bb0:	0006b581 	jmpi	6b58 <xflow>

00006bb4 <__math_may_uflow>:
    6bb4:	000b883a 	mov	r5,zero
    6bb8:	01879634 	movhi	r6,7768
    6bbc:	0006b581 	jmpi	6b58 <xflow>

00006bc0 <__math_oflow>:
    6bc0:	000b883a 	mov	r5,zero
    6bc4:	019c0034 	movhi	r6,28672
    6bc8:	0006b581 	jmpi	6b58 <xflow>

00006bcc <__math_divzero>:
    6bcc:	defffd04 	addi	sp,sp,-12
    6bd0:	dfc00215 	stw	ra,8(sp)
    6bd4:	20000e1e 	bne	r4,zero,6c10 <__math_divzero+0x44>
    6bd8:	008ffc34 	movhi	r2,16368
    6bdc:	d8000015 	stw	zero,0(sp)
    6be0:	d8800115 	stw	r2,4(sp)
    6be4:	d9000017 	ldw	r4,0(sp)
    6be8:	d9400117 	ldw	r5,4(sp)
    6bec:	000d883a 	mov	r6,zero
    6bf0:	000f883a 	mov	r7,zero
    6bf4:	0007d840 	call	7d84 <__divdf3>
    6bf8:	01800884 	movi	r6,34
    6bfc:	1009883a 	mov	r4,r2
    6c00:	180b883a 	mov	r5,r3
    6c04:	dfc00217 	ldw	ra,8(sp)
    6c08:	dec00304 	addi	sp,sp,12
    6c0c:	0006b101 	jmpi	6b10 <with_errno>
    6c10:	00affc34 	movhi	r2,49136
    6c14:	003ff106 	br	6bdc <__math_divzero+0x10>

00006c18 <__math_invalid>:
    6c18:	defffd04 	addi	sp,sp,-12
    6c1c:	200d883a 	mov	r6,r4
    6c20:	280f883a 	mov	r7,r5
    6c24:	dfc00215 	stw	ra,8(sp)
    6c28:	dc400115 	stw	r17,4(sp)
    6c2c:	dc000015 	stw	r16,0(sp)
    6c30:	2023883a 	mov	r17,r4
    6c34:	2821883a 	mov	r16,r5
    6c38:	00090940 	call	9094 <__subdf3>
    6c3c:	100d883a 	mov	r6,r2
    6c40:	180f883a 	mov	r7,r3
    6c44:	1009883a 	mov	r4,r2
    6c48:	180b883a 	mov	r5,r3
    6c4c:	0007d840 	call	7d84 <__divdf3>
    6c50:	880d883a 	mov	r6,r17
    6c54:	800f883a 	mov	r7,r16
    6c58:	8809883a 	mov	r4,r17
    6c5c:	800b883a 	mov	r5,r16
    6c60:	1023883a 	mov	r17,r2
    6c64:	1821883a 	mov	r16,r3
    6c68:	00099a00 	call	99a0 <__unorddf2>
    6c6c:	1000081e 	bne	r2,zero,6c90 <__math_invalid+0x78>
    6c70:	01800844 	movi	r6,33
    6c74:	8809883a 	mov	r4,r17
    6c78:	800b883a 	mov	r5,r16
    6c7c:	dfc00217 	ldw	ra,8(sp)
    6c80:	dc400117 	ldw	r17,4(sp)
    6c84:	dc000017 	ldw	r16,0(sp)
    6c88:	dec00304 	addi	sp,sp,12
    6c8c:	0006b101 	jmpi	6b10 <with_errno>
    6c90:	8805883a 	mov	r2,r17
    6c94:	8007883a 	mov	r3,r16
    6c98:	dfc00217 	ldw	ra,8(sp)
    6c9c:	dc400117 	ldw	r17,4(sp)
    6ca0:	dc000017 	ldw	r16,0(sp)
    6ca4:	dec00304 	addi	sp,sp,12
    6ca8:	f800283a 	ret

00006cac <__math_check_uflow>:
    6cac:	defffd04 	addi	sp,sp,-12
    6cb0:	000d883a 	mov	r6,zero
    6cb4:	000f883a 	mov	r7,zero
    6cb8:	dc400115 	stw	r17,4(sp)
    6cbc:	dc000015 	stw	r16,0(sp)
    6cc0:	dfc00215 	stw	ra,8(sp)
    6cc4:	2023883a 	mov	r17,r4
    6cc8:	2821883a 	mov	r16,r5
    6ccc:	00086980 	call	8698 <__eqdf2>
    6cd0:	10000726 	beq	r2,zero,6cf0 <__math_check_uflow+0x44>
    6cd4:	8805883a 	mov	r2,r17
    6cd8:	8007883a 	mov	r3,r16
    6cdc:	dfc00217 	ldw	ra,8(sp)
    6ce0:	dc400117 	ldw	r17,4(sp)
    6ce4:	dc000017 	ldw	r16,0(sp)
    6ce8:	dec00304 	addi	sp,sp,12
    6cec:	f800283a 	ret
    6cf0:	01800884 	movi	r6,34
    6cf4:	8809883a 	mov	r4,r17
    6cf8:	800b883a 	mov	r5,r16
    6cfc:	dfc00217 	ldw	ra,8(sp)
    6d00:	dc400117 	ldw	r17,4(sp)
    6d04:	dc000017 	ldw	r16,0(sp)
    6d08:	dec00304 	addi	sp,sp,12
    6d0c:	0006b101 	jmpi	6b10 <with_errno>

00006d10 <__math_check_oflow>:
    6d10:	00a00034 	movhi	r2,32768
    6d14:	defffc04 	addi	sp,sp,-16
    6d18:	10bfffc4 	addi	r2,r2,-1
    6d1c:	dc000015 	stw	r16,0(sp)
    6d20:	01dffc34 	movhi	r7,32752
    6d24:	28a0703a 	and	r16,r5,r2
    6d28:	dc400115 	stw	r17,4(sp)
    6d2c:	01bfffc4 	movi	r6,-1
    6d30:	2823883a 	mov	r17,r5
    6d34:	39ffffc4 	addi	r7,r7,-1
    6d38:	800b883a 	mov	r5,r16
    6d3c:	dc800215 	stw	r18,8(sp)
    6d40:	dfc00315 	stw	ra,12(sp)
    6d44:	2025883a 	mov	r18,r4
    6d48:	00099a00 	call	99a0 <__unorddf2>
    6d4c:	1000071e 	bne	r2,zero,6d6c <__math_check_oflow+0x5c>
    6d50:	01dffc34 	movhi	r7,32752
    6d54:	01bfffc4 	movi	r6,-1
    6d58:	39ffffc4 	addi	r7,r7,-1
    6d5c:	9009883a 	mov	r4,r18
    6d60:	800b883a 	mov	r5,r16
    6d64:	00088000 	call	8800 <__ledf2>
    6d68:	00800816 	blt	zero,r2,6d8c <__math_check_oflow+0x7c>
    6d6c:	9005883a 	mov	r2,r18
    6d70:	8807883a 	mov	r3,r17
    6d74:	dfc00317 	ldw	ra,12(sp)
    6d78:	dc800217 	ldw	r18,8(sp)
    6d7c:	dc400117 	ldw	r17,4(sp)
    6d80:	dc000017 	ldw	r16,0(sp)
    6d84:	dec00404 	addi	sp,sp,16
    6d88:	f800283a 	ret
    6d8c:	01800884 	movi	r6,34
    6d90:	9009883a 	mov	r4,r18
    6d94:	880b883a 	mov	r5,r17
    6d98:	dfc00317 	ldw	ra,12(sp)
    6d9c:	dc800217 	ldw	r18,8(sp)
    6da0:	dc400117 	ldw	r17,4(sp)
    6da4:	dc000017 	ldw	r16,0(sp)
    6da8:	dec00404 	addi	sp,sp,16
    6dac:	0006b101 	jmpi	6b10 <with_errno>

00006db0 <scalbn>:
    6db0:	2807d53a 	srai	r3,r5,20
    6db4:	defffe04 	addi	sp,sp,-8
    6db8:	dc000015 	stw	r16,0(sp)
    6dbc:	dfc00115 	stw	ra,4(sp)
    6dc0:	18c1ffcc 	andi	r3,r3,2047
    6dc4:	280f883a 	mov	r7,r5
    6dc8:	2005883a 	mov	r2,r4
    6dcc:	3021883a 	mov	r16,r6
    6dd0:	1800241e 	bne	r3,zero,6e64 <scalbn+0xb4>
    6dd4:	00e00034 	movhi	r3,32768
    6dd8:	18ffffc4 	addi	r3,r3,-1
    6ddc:	28c6703a 	and	r3,r5,r3
    6de0:	1906b03a 	or	r3,r3,r4
    6de4:	18003626 	beq	r3,zero,6ec0 <scalbn+0x110>
    6de8:	000d883a 	mov	r6,zero
    6dec:	01d0d434 	movhi	r7,17232
    6df0:	00088e80 	call	88e8 <__muldf3>
    6df4:	01bffff4 	movhi	r6,65535
    6df8:	318f2c04 	addi	r6,r6,15536
    6dfc:	1009883a 	mov	r4,r2
    6e00:	180f883a 	mov	r7,r3
    6e04:	81804d16 	blt	r16,r6,6f3c <scalbn+0x18c>
    6e08:	1807d53a 	srai	r3,r3,20
    6e0c:	3811883a 	mov	r8,r7
    6e10:	18c1ffcc 	andi	r3,r3,2047
    6e14:	18fff284 	addi	r3,r3,-54
    6e18:	80c7883a 	add	r3,r16,r3
    6e1c:	1901ffd0 	cmplti	r4,r3,2047
    6e20:	20001926 	beq	r4,zero,6e88 <scalbn+0xd8>
    6e24:	00c03c16 	blt	zero,r3,6f18 <scalbn+0x168>
    6e28:	193ff2c8 	cmpgei	r4,r3,-53
    6e2c:	20002c1e 	bne	r4,zero,6ee0 <scalbn+0x130>
    6e30:	00b0d414 	movui	r2,50000
    6e34:	14001416 	blt	r2,r16,6e88 <scalbn+0xd8>
    6e38:	0130be74 	movhi	r4,49913
    6e3c:	01406974 	movhi	r5,421
    6e40:	213cd644 	addi	r4,r4,-3239
    6e44:	295b87c4 	addi	r5,r5,28191
    6e48:	38004616 	blt	r7,zero,6f64 <scalbn+0x1b4>
    6e4c:	01b0be74 	movhi	r6,49913
    6e50:	01c06974 	movhi	r7,421
    6e54:	31bcd644 	addi	r6,r6,-3239
    6e58:	39db87c4 	addi	r7,r7,28191
    6e5c:	00088e80 	call	88e8 <__muldf3>
    6e60:	00001306 	br	6eb0 <scalbn+0x100>
    6e64:	1981ffd8 	cmpnei	r6,r3,2047
    6e68:	2811883a 	mov	r8,r5
    6e6c:	303fea1e 	bne	r6,zero,6e18 <scalbn+0x68>
    6e70:	200d883a 	mov	r6,r4
    6e74:	00074940 	call	7494 <__adddf3>
    6e78:	dfc00117 	ldw	ra,4(sp)
    6e7c:	dc000017 	ldw	r16,0(sp)
    6e80:	dec00204 	addi	sp,sp,8
    6e84:	f800283a 	ret
    6e88:	01220034 	movhi	r4,34816
    6e8c:	015f8e34 	movhi	r5,32312
    6e90:	211d6704 	addi	r4,r4,30108
    6e94:	29790f04 	addi	r5,r5,-7108
    6e98:	38000e16 	blt	r7,zero,6ed4 <scalbn+0x124>
    6e9c:	01a20034 	movhi	r6,34816
    6ea0:	01df8e34 	movhi	r7,32312
    6ea4:	319d6704 	addi	r6,r6,30108
    6ea8:	39f90f04 	addi	r7,r7,-7108
    6eac:	00088e80 	call	88e8 <__muldf3>
    6eb0:	dfc00117 	ldw	ra,4(sp)
    6eb4:	dc000017 	ldw	r16,0(sp)
    6eb8:	dec00204 	addi	sp,sp,8
    6ebc:	f800283a 	ret
    6ec0:	2807883a 	mov	r3,r5
    6ec4:	dfc00117 	ldw	ra,4(sp)
    6ec8:	dc000017 	ldw	r16,0(sp)
    6ecc:	dec00204 	addi	sp,sp,8
    6ed0:	f800283a 	ret
    6ed4:	017f8e34 	movhi	r5,65080
    6ed8:	29790f04 	addi	r5,r5,-7108
    6edc:	003fef06 	br	6e9c <scalbn+0xec>
    6ee0:	18c00d84 	addi	r3,r3,54
    6ee4:	1806953a 	slli	r3,r3,20
    6ee8:	01600434 	movhi	r5,32784
    6eec:	297fffc4 	addi	r5,r5,-1
    6ef0:	414a703a 	and	r5,r8,r5
    6ef4:	000d883a 	mov	r6,zero
    6ef8:	01cf2434 	movhi	r7,15504
    6efc:	1009883a 	mov	r4,r2
    6f00:	194ab03a 	or	r5,r3,r5
    6f04:	00088e80 	call	88e8 <__muldf3>
    6f08:	dfc00117 	ldw	ra,4(sp)
    6f0c:	dc000017 	ldw	r16,0(sp)
    6f10:	dec00204 	addi	sp,sp,8
    6f14:	f800283a 	ret
    6f18:	1806953a 	slli	r3,r3,20
    6f1c:	01e00434 	movhi	r7,32784
    6f20:	39ffffc4 	addi	r7,r7,-1
    6f24:	41ce703a 	and	r7,r8,r7
    6f28:	38c6b03a 	or	r3,r7,r3
    6f2c:	dfc00117 	ldw	ra,4(sp)
    6f30:	dc000017 	ldw	r16,0(sp)
    6f34:	dec00204 	addi	sp,sp,8
    6f38:	f800283a 	ret
    6f3c:	01b0be74 	movhi	r6,49913
    6f40:	01c06974 	movhi	r7,421
    6f44:	31bcd644 	addi	r6,r6,-3239
    6f48:	39db87c4 	addi	r7,r7,28191
    6f4c:	180b883a 	mov	r5,r3
    6f50:	00088e80 	call	88e8 <__muldf3>
    6f54:	dfc00117 	ldw	ra,4(sp)
    6f58:	dc000017 	ldw	r16,0(sp)
    6f5c:	dec00204 	addi	sp,sp,8
    6f60:	f800283a 	ret
    6f64:	01606974 	movhi	r5,33189
    6f68:	295b87c4 	addi	r5,r5,28191
    6f6c:	003fb706 	br	6e4c <scalbn+0x9c>

00006f70 <__divsi3>:
    6f70:	20001a16 	blt	r4,zero,6fdc <__divsi3+0x6c>
    6f74:	000f883a 	mov	r7,zero
    6f78:	2800020e 	bge	r5,zero,6f84 <__divsi3+0x14>
    6f7c:	014bc83a 	sub	r5,zero,r5
    6f80:	39c0005c 	xori	r7,r7,1
    6f84:	200d883a 	mov	r6,r4
    6f88:	00c00044 	movi	r3,1
    6f8c:	2900092e 	bgeu	r5,r4,6fb4 <__divsi3+0x44>
    6f90:	00800804 	movi	r2,32
    6f94:	00c00044 	movi	r3,1
    6f98:	00000106 	br	6fa0 <__divsi3+0x30>
    6f9c:	10001226 	beq	r2,zero,6fe8 <__divsi3+0x78>
    6fa0:	294b883a 	add	r5,r5,r5
    6fa4:	10bfffc4 	addi	r2,r2,-1
    6fa8:	18c7883a 	add	r3,r3,r3
    6fac:	293ffb36 	bltu	r5,r4,6f9c <__divsi3+0x2c>
    6fb0:	18000d26 	beq	r3,zero,6fe8 <__divsi3+0x78>
    6fb4:	0005883a 	mov	r2,zero
    6fb8:	31400236 	bltu	r6,r5,6fc4 <__divsi3+0x54>
    6fbc:	314dc83a 	sub	r6,r6,r5
    6fc0:	10c4b03a 	or	r2,r2,r3
    6fc4:	1806d07a 	srli	r3,r3,1
    6fc8:	280ad07a 	srli	r5,r5,1
    6fcc:	183ffa1e 	bne	r3,zero,6fb8 <__divsi3+0x48>
    6fd0:	38000126 	beq	r7,zero,6fd8 <__divsi3+0x68>
    6fd4:	0085c83a 	sub	r2,zero,r2
    6fd8:	f800283a 	ret
    6fdc:	0109c83a 	sub	r4,zero,r4
    6fe0:	01c00044 	movi	r7,1
    6fe4:	003fe406 	br	6f78 <__divsi3+0x8>
    6fe8:	0005883a 	mov	r2,zero
    6fec:	003ff806 	br	6fd0 <__divsi3+0x60>

00006ff0 <__modsi3>:
    6ff0:	20001916 	blt	r4,zero,7058 <__modsi3+0x68>
    6ff4:	000f883a 	mov	r7,zero
    6ff8:	2005883a 	mov	r2,r4
    6ffc:	2800010e 	bge	r5,zero,7004 <__modsi3+0x14>
    7000:	014bc83a 	sub	r5,zero,r5
    7004:	00c00044 	movi	r3,1
    7008:	2900092e 	bgeu	r5,r4,7030 <__modsi3+0x40>
    700c:	01800804 	movi	r6,32
    7010:	00c00044 	movi	r3,1
    7014:	00000106 	br	701c <__modsi3+0x2c>
    7018:	30000d26 	beq	r6,zero,7050 <__modsi3+0x60>
    701c:	294b883a 	add	r5,r5,r5
    7020:	31bfffc4 	addi	r6,r6,-1
    7024:	18c7883a 	add	r3,r3,r3
    7028:	293ffb36 	bltu	r5,r4,7018 <__modsi3+0x28>
    702c:	18000826 	beq	r3,zero,7050 <__modsi3+0x60>
    7030:	1806d07a 	srli	r3,r3,1
    7034:	11400136 	bltu	r2,r5,703c <__modsi3+0x4c>
    7038:	1145c83a 	sub	r2,r2,r5
    703c:	280ad07a 	srli	r5,r5,1
    7040:	183ffb1e 	bne	r3,zero,7030 <__modsi3+0x40>
    7044:	38000126 	beq	r7,zero,704c <__modsi3+0x5c>
    7048:	0085c83a 	sub	r2,zero,r2
    704c:	f800283a 	ret
    7050:	2005883a 	mov	r2,r4
    7054:	003ffb06 	br	7044 <__modsi3+0x54>
    7058:	0109c83a 	sub	r4,zero,r4
    705c:	01c00044 	movi	r7,1
    7060:	003fe506 	br	6ff8 <__modsi3+0x8>

00007064 <__udivsi3>:
    7064:	200d883a 	mov	r6,r4
    7068:	2900152e 	bgeu	r5,r4,70c0 <__udivsi3+0x5c>
    706c:	28001416 	blt	r5,zero,70c0 <__udivsi3+0x5c>
    7070:	00800804 	movi	r2,32
    7074:	00c00044 	movi	r3,1
    7078:	00000206 	br	7084 <__udivsi3+0x20>
    707c:	10000e26 	beq	r2,zero,70b8 <__udivsi3+0x54>
    7080:	28000516 	blt	r5,zero,7098 <__udivsi3+0x34>
    7084:	294b883a 	add	r5,r5,r5
    7088:	10bfffc4 	addi	r2,r2,-1
    708c:	18c7883a 	add	r3,r3,r3
    7090:	293ffa36 	bltu	r5,r4,707c <__udivsi3+0x18>
    7094:	18000826 	beq	r3,zero,70b8 <__udivsi3+0x54>
    7098:	0005883a 	mov	r2,zero
    709c:	31400236 	bltu	r6,r5,70a8 <__udivsi3+0x44>
    70a0:	314dc83a 	sub	r6,r6,r5
    70a4:	10c4b03a 	or	r2,r2,r3
    70a8:	1806d07a 	srli	r3,r3,1
    70ac:	280ad07a 	srli	r5,r5,1
    70b0:	183ffa1e 	bne	r3,zero,709c <__udivsi3+0x38>
    70b4:	f800283a 	ret
    70b8:	0005883a 	mov	r2,zero
    70bc:	f800283a 	ret
    70c0:	00c00044 	movi	r3,1
    70c4:	003ff406 	br	7098 <__udivsi3+0x34>

000070c8 <__umodsi3>:
    70c8:	2005883a 	mov	r2,r4
    70cc:	2900132e 	bgeu	r5,r4,711c <__umodsi3+0x54>
    70d0:	28001216 	blt	r5,zero,711c <__umodsi3+0x54>
    70d4:	01800804 	movi	r6,32
    70d8:	00c00044 	movi	r3,1
    70dc:	00000206 	br	70e8 <__umodsi3+0x20>
    70e0:	30000c26 	beq	r6,zero,7114 <__umodsi3+0x4c>
    70e4:	28000516 	blt	r5,zero,70fc <__umodsi3+0x34>
    70e8:	294b883a 	add	r5,r5,r5
    70ec:	31bfffc4 	addi	r6,r6,-1
    70f0:	18c7883a 	add	r3,r3,r3
    70f4:	293ffa36 	bltu	r5,r4,70e0 <__umodsi3+0x18>
    70f8:	18000626 	beq	r3,zero,7114 <__umodsi3+0x4c>
    70fc:	1806d07a 	srli	r3,r3,1
    7100:	11400136 	bltu	r2,r5,7108 <__umodsi3+0x40>
    7104:	1145c83a 	sub	r2,r2,r5
    7108:	280ad07a 	srli	r5,r5,1
    710c:	183ffb1e 	bne	r3,zero,70fc <__umodsi3+0x34>
    7110:	f800283a 	ret
    7114:	2005883a 	mov	r2,r4
    7118:	f800283a 	ret
    711c:	00c00044 	movi	r3,1
    7120:	003ff606 	br	70fc <__umodsi3+0x34>

00007124 <__mulsi3>:
    7124:	0005883a 	mov	r2,zero
    7128:	20000726 	beq	r4,zero,7148 <__mulsi3+0x24>
    712c:	20c0004c 	andi	r3,r4,1
    7130:	2008d07a 	srli	r4,r4,1
    7134:	18000126 	beq	r3,zero,713c <__mulsi3+0x18>
    7138:	1145883a 	add	r2,r2,r5
    713c:	294b883a 	add	r5,r5,r5
    7140:	203ffa1e 	bne	r4,zero,712c <__mulsi3+0x8>
    7144:	f800283a 	ret
    7148:	f800283a 	ret

0000714c <__eqsf2>:
    714c:	200cd5fa 	srli	r6,r4,23
    7150:	2806d5fa 	srli	r3,r5,23
    7154:	00802034 	movhi	r2,128
    7158:	31803fcc 	andi	r6,r6,255
    715c:	10bfffc4 	addi	r2,r2,-1
    7160:	31c03fd8 	cmpnei	r7,r6,255
    7164:	2010d7fa 	srli	r8,r4,31
    7168:	2812d7fa 	srli	r9,r5,31
    716c:	1108703a 	and	r4,r2,r4
    7170:	18c03fcc 	andi	r3,r3,255
    7174:	1144703a 	and	r2,r2,r5
    7178:	38000626 	beq	r7,zero,7194 <__eqsf2+0x48>
    717c:	19403fe0 	cmpeqi	r5,r3,255
    7180:	2800021e 	bne	r5,zero,718c <__eqsf2+0x40>
    7184:	30c0011e 	bne	r6,r3,718c <__eqsf2+0x40>
    7188:	20800626 	beq	r4,r2,71a4 <__eqsf2+0x58>
    718c:	00800044 	movi	r2,1
    7190:	f800283a 	ret
    7194:	203ffd1e 	bne	r4,zero,718c <__eqsf2+0x40>
    7198:	18c03fd8 	cmpnei	r3,r3,255
    719c:	183ffb1e 	bne	r3,zero,718c <__eqsf2+0x40>
    71a0:	103ffa1e 	bne	r2,zero,718c <__eqsf2+0x40>
    71a4:	42400326 	beq	r8,r9,71b4 <__eqsf2+0x68>
    71a8:	303ff81e 	bne	r6,zero,718c <__eqsf2+0x40>
    71ac:	2004c03a 	cmpne	r2,r4,zero
    71b0:	f800283a 	ret
    71b4:	0005883a 	mov	r2,zero
    71b8:	f800283a 	ret

000071bc <__gesf2>:
    71bc:	200cd5fa 	srli	r6,r4,23
    71c0:	280ed5fa 	srli	r7,r5,23
    71c4:	00c02034 	movhi	r3,128
    71c8:	31803fcc 	andi	r6,r6,255
    71cc:	18ffffc4 	addi	r3,r3,-1
    71d0:	32003fd8 	cmpnei	r8,r6,255
    71d4:	2012d7fa 	srli	r9,r4,31
    71d8:	2804d7fa 	srli	r2,r5,31
    71dc:	1908703a 	and	r4,r3,r4
    71e0:	1946703a 	and	r3,r3,r5
    71e4:	39403fcc 	andi	r5,r7,255
    71e8:	40000826 	beq	r8,zero,720c <__gesf2+0x50>
    71ec:	29c03fd8 	cmpnei	r7,r5,255
    71f0:	38000926 	beq	r7,zero,7218 <__gesf2+0x5c>
    71f4:	3000121e 	bne	r6,zero,7240 <__gesf2+0x84>
    71f8:	28000e1e 	bne	r5,zero,7234 <__gesf2+0x78>
    71fc:	18000d1e 	bne	r3,zero,7234 <__gesf2+0x78>
    7200:	2000081e 	bne	r4,zero,7224 <__gesf2+0x68>
    7204:	0005883a 	mov	r2,zero
    7208:	f800283a 	ret
    720c:	2000171e 	bne	r4,zero,726c <__gesf2+0xb0>
    7210:	29c03fe0 	cmpeqi	r7,r5,255
    7214:	38000a26 	beq	r7,zero,7240 <__gesf2+0x84>
    7218:	1800141e 	bne	r3,zero,726c <__gesf2+0xb0>
    721c:	30000526 	beq	r6,zero,7234 <__gesf2+0x78>
    7220:	48800a26 	beq	r9,r2,724c <__gesf2+0x90>
    7224:	00800044 	movi	r2,1
    7228:	48000426 	beq	r9,zero,723c <__gesf2+0x80>
    722c:	00bfffc4 	movi	r2,-1
    7230:	f800283a 	ret
    7234:	203ffa1e 	bne	r4,zero,7220 <__gesf2+0x64>
    7238:	103ffc26 	beq	r2,zero,722c <__gesf2+0x70>
    723c:	f800283a 	ret
    7240:	283ff71e 	bne	r5,zero,7220 <__gesf2+0x64>
    7244:	183ff61e 	bne	r3,zero,7220 <__gesf2+0x64>
    7248:	003ff606 	br	7224 <__gesf2+0x68>
    724c:	29800416 	blt	r5,r6,7260 <__gesf2+0xa4>
    7250:	317ff916 	blt	r6,r5,7238 <__gesf2+0x7c>
    7254:	19000236 	bltu	r3,r4,7260 <__gesf2+0xa4>
    7258:	20ffea2e 	bgeu	r4,r3,7204 <__gesf2+0x48>
    725c:	003ff606 	br	7238 <__gesf2+0x7c>
    7260:	103ff21e 	bne	r2,zero,722c <__gesf2+0x70>
    7264:	00800044 	movi	r2,1
    7268:	f800283a 	ret
    726c:	00bfff84 	movi	r2,-2
    7270:	f800283a 	ret

00007274 <__floatsisf>:
    7274:	defffd04 	addi	sp,sp,-12
    7278:	dfc00215 	stw	ra,8(sp)
    727c:	dc400115 	stw	r17,4(sp)
    7280:	dc000015 	stw	r16,0(sp)
    7284:	20001226 	beq	r4,zero,72d0 <__floatsisf+0x5c>
    7288:	2022d7fa 	srli	r17,r4,31
    728c:	2021883a 	mov	r16,r4
    7290:	20003816 	blt	r4,zero,7374 <__floatsisf+0x100>
    7294:	8009883a 	mov	r4,r16
    7298:	0009e280 	call	9e28 <__clzsi2>
    729c:	1009883a 	mov	r4,r2
    72a0:	00802784 	movi	r2,158
    72a4:	1105c83a 	sub	r2,r2,r4
    72a8:	10c025c8 	cmpgei	r3,r2,151
    72ac:	1800151e 	bne	r3,zero,7304 <__floatsisf+0x90>
    72b0:	20c00248 	cmpgei	r3,r4,9
    72b4:	18003126 	beq	r3,zero,737c <__floatsisf+0x108>
    72b8:	213ffe04 	addi	r4,r4,-8
    72bc:	8120983a 	sll	r16,r16,r4
    72c0:	00c02034 	movhi	r3,128
    72c4:	18ffffc4 	addi	r3,r3,-1
    72c8:	80e0703a 	and	r16,r16,r3
    72cc:	00000306 	br	72dc <__floatsisf+0x68>
    72d0:	0023883a 	mov	r17,zero
    72d4:	0005883a 	mov	r2,zero
    72d8:	0021883a 	mov	r16,zero
    72dc:	10803fcc 	andi	r2,r2,255
    72e0:	100495fa 	slli	r2,r2,23
    72e4:	882297fa 	slli	r17,r17,31
    72e8:	1404b03a 	or	r2,r2,r16
    72ec:	1444b03a 	or	r2,r2,r17
    72f0:	dfc00217 	ldw	ra,8(sp)
    72f4:	dc400117 	ldw	r17,4(sp)
    72f8:	dc000017 	ldw	r16,0(sp)
    72fc:	dec00304 	addi	sp,sp,12
    7300:	f800283a 	ret
    7304:	10c02690 	cmplti	r3,r2,154
    7308:	1800071e 	bne	r3,zero,7328 <__floatsisf+0xb4>
    730c:	20c006c4 	addi	r3,r4,27
    7310:	01400144 	movi	r5,5
    7314:	80c6983a 	sll	r3,r16,r3
    7318:	290bc83a 	sub	r5,r5,r4
    731c:	814ad83a 	srl	r5,r16,r5
    7320:	1806c03a 	cmpne	r3,r3,zero
    7324:	28e0b03a 	or	r16,r5,r3
    7328:	20c00188 	cmpgei	r3,r4,6
    732c:	1800171e 	bne	r3,zero,738c <__floatsisf+0x118>
    7330:	00ff0034 	movhi	r3,64512
    7334:	18ffffc4 	addi	r3,r3,-1
    7338:	818001cc 	andi	r6,r16,7
    733c:	80ca703a 	and	r5,r16,r3
    7340:	30000926 	beq	r6,zero,7368 <__floatsisf+0xf4>
    7344:	818003cc 	andi	r6,r16,15
    7348:	31800120 	cmpeqi	r6,r6,4
    734c:	3000061e 	bne	r6,zero,7368 <__floatsisf+0xf4>
    7350:	29400104 	addi	r5,r5,4
    7354:	2981002c 	andhi	r6,r5,1024
    7358:	30000326 	beq	r6,zero,7368 <__floatsisf+0xf4>
    735c:	28ca703a 	and	r5,r5,r3
    7360:	00c027c4 	movi	r3,159
    7364:	1905c83a 	sub	r2,r3,r4
    7368:	282091ba 	slli	r16,r5,6
    736c:	8020d27a 	srli	r16,r16,9
    7370:	003fda06 	br	72dc <__floatsisf+0x68>
    7374:	0121c83a 	sub	r16,zero,r4
    7378:	003fc606 	br	7294 <__floatsisf+0x20>
    737c:	01002034 	movhi	r4,128
    7380:	213fffc4 	addi	r4,r4,-1
    7384:	8120703a 	and	r16,r16,r4
    7388:	003fd406 	br	72dc <__floatsisf+0x68>
    738c:	20fffec4 	addi	r3,r4,-5
    7390:	80e0983a 	sll	r16,r16,r3
    7394:	003fe606 	br	7330 <__floatsisf+0xbc>

00007398 <__floatunsisf>:
    7398:	defffe04 	addi	sp,sp,-8
    739c:	dfc00115 	stw	ra,4(sp)
    73a0:	dc000015 	stw	r16,0(sp)
    73a4:	20000f26 	beq	r4,zero,73e4 <__floatunsisf+0x4c>
    73a8:	2021883a 	mov	r16,r4
    73ac:	0009e280 	call	9e28 <__clzsi2>
    73b0:	1009883a 	mov	r4,r2
    73b4:	00802784 	movi	r2,158
    73b8:	1105c83a 	sub	r2,r2,r4
    73bc:	10c025c8 	cmpgei	r3,r2,151
    73c0:	1800111e 	bne	r3,zero,7408 <__floatunsisf+0x70>
    73c4:	20c00248 	cmpgei	r3,r4,9
    73c8:	18002b26 	beq	r3,zero,7478 <__floatunsisf+0xe0>
    73cc:	213ffe04 	addi	r4,r4,-8
    73d0:	8120983a 	sll	r16,r16,r4
    73d4:	00c02034 	movhi	r3,128
    73d8:	18ffffc4 	addi	r3,r3,-1
    73dc:	80e0703a 	and	r16,r16,r3
    73e0:	00000206 	br	73ec <__floatunsisf+0x54>
    73e4:	0005883a 	mov	r2,zero
    73e8:	0021883a 	mov	r16,zero
    73ec:	10803fcc 	andi	r2,r2,255
    73f0:	100495fa 	slli	r2,r2,23
    73f4:	1404b03a 	or	r2,r2,r16
    73f8:	dfc00117 	ldw	ra,4(sp)
    73fc:	dc000017 	ldw	r16,0(sp)
    7400:	dec00204 	addi	sp,sp,8
    7404:	f800283a 	ret
    7408:	10c02690 	cmplti	r3,r2,154
    740c:	1800071e 	bne	r3,zero,742c <__floatunsisf+0x94>
    7410:	20c006c4 	addi	r3,r4,27
    7414:	80ca983a 	sll	r5,r16,r3
    7418:	00c00144 	movi	r3,5
    741c:	1907c83a 	sub	r3,r3,r4
    7420:	80e0d83a 	srl	r16,r16,r3
    7424:	2806c03a 	cmpne	r3,r5,zero
    7428:	1c20b03a 	or	r16,r3,r16
    742c:	20c00188 	cmpgei	r3,r4,6
    7430:	1800151e 	bne	r3,zero,7488 <__floatunsisf+0xf0>
    7434:	00ff0034 	movhi	r3,64512
    7438:	18ffffc4 	addi	r3,r3,-1
    743c:	818001cc 	andi	r6,r16,7
    7440:	80ca703a 	and	r5,r16,r3
    7444:	30000926 	beq	r6,zero,746c <__floatunsisf+0xd4>
    7448:	840003cc 	andi	r16,r16,15
    744c:	84000120 	cmpeqi	r16,r16,4
    7450:	8000061e 	bne	r16,zero,746c <__floatunsisf+0xd4>
    7454:	29400104 	addi	r5,r5,4
    7458:	2981002c 	andhi	r6,r5,1024
    745c:	30000326 	beq	r6,zero,746c <__floatunsisf+0xd4>
    7460:	28ca703a 	and	r5,r5,r3
    7464:	00c027c4 	movi	r3,159
    7468:	1905c83a 	sub	r2,r3,r4
    746c:	282091ba 	slli	r16,r5,6
    7470:	8020d27a 	srli	r16,r16,9
    7474:	003fdd06 	br	73ec <__floatunsisf+0x54>
    7478:	01002034 	movhi	r4,128
    747c:	213fffc4 	addi	r4,r4,-1
    7480:	8120703a 	and	r16,r16,r4
    7484:	003fd906 	br	73ec <__floatunsisf+0x54>
    7488:	20fffec4 	addi	r3,r4,-5
    748c:	80e0983a 	sll	r16,r16,r3
    7490:	003fe806 	br	7434 <__floatunsisf+0x9c>

00007494 <__adddf3>:
    7494:	02000434 	movhi	r8,16
    7498:	423fffc4 	addi	r8,r8,-1
    749c:	2806d53a 	srli	r3,r5,20
    74a0:	3804d53a 	srli	r2,r7,20
    74a4:	2a14703a 	and	r10,r5,r8
    74a8:	3a12703a 	and	r9,r7,r8
    74ac:	280ad7fa 	srli	r5,r5,31
    74b0:	501490fa 	slli	r10,r10,3
    74b4:	2018d77a 	srli	r12,r4,29
    74b8:	481290fa 	slli	r9,r9,3
    74bc:	3016d77a 	srli	r11,r6,29
    74c0:	380ed7fa 	srli	r7,r7,31
    74c4:	defffb04 	addi	sp,sp,-20
    74c8:	dc800215 	stw	r18,8(sp)
    74cc:	dc000015 	stw	r16,0(sp)
    74d0:	1c81ffcc 	andi	r18,r3,2047
    74d4:	1081ffcc 	andi	r2,r2,2047
    74d8:	dfc00415 	stw	ra,16(sp)
    74dc:	dcc00315 	stw	r19,12(sp)
    74e0:	dc400115 	stw	r17,4(sp)
    74e4:	201c90fa 	slli	r14,r4,3
    74e8:	301a90fa 	slli	r13,r6,3
    74ec:	2821883a 	mov	r16,r5
    74f0:	6294b03a 	or	r10,r12,r10
    74f4:	5a52b03a 	or	r9,r11,r9
    74f8:	9087c83a 	sub	r3,r18,r2
    74fc:	29c06126 	beq	r5,r7,7684 <__adddf3+0x1f0>
    7500:	00c0550e 	bge	zero,r3,7658 <__adddf3+0x1c4>
    7504:	10007326 	beq	r2,zero,76d4 <__adddf3+0x240>
    7508:	9081ffd8 	cmpnei	r2,r18,2047
    750c:	1000b826 	beq	r2,zero,77f0 <__adddf3+0x35c>
    7510:	4a402034 	orhi	r9,r9,128
    7514:	18800e48 	cmpgei	r2,r3,57
    7518:	1000ee1e 	bne	r2,zero,78d4 <__adddf3+0x440>
    751c:	18800808 	cmpgei	r2,r3,32
    7520:	10012d1e 	bne	r2,zero,79d8 <__adddf3+0x544>
    7524:	00800804 	movi	r2,32
    7528:	10c5c83a 	sub	r2,r2,r3
    752c:	68c8d83a 	srl	r4,r13,r3
    7530:	48a2983a 	sll	r17,r9,r2
    7534:	689a983a 	sll	r13,r13,r2
    7538:	48c6d83a 	srl	r3,r9,r3
    753c:	8922b03a 	or	r17,r17,r4
    7540:	681ac03a 	cmpne	r13,r13,zero
    7544:	8b62b03a 	or	r17,r17,r13
    7548:	50d5c83a 	sub	r10,r10,r3
    754c:	7463c83a 	sub	r17,r14,r17
    7550:	7451803a 	cmpltu	r8,r14,r17
    7554:	5211c83a 	sub	r8,r10,r8
    7558:	4080202c 	andhi	r2,r8,128
    755c:	10008826 	beq	r2,zero,7780 <__adddf3+0x2ec>
    7560:	02402034 	movhi	r9,128
    7564:	4a7fffc4 	addi	r9,r9,-1
    7568:	4266703a 	and	r19,r8,r9
    756c:	9800ae26 	beq	r19,zero,7828 <__adddf3+0x394>
    7570:	9809883a 	mov	r4,r19
    7574:	0009e280 	call	9e28 <__clzsi2>
    7578:	10fffe04 	addi	r3,r2,-8
    757c:	02000804 	movi	r8,32
    7580:	40d1c83a 	sub	r8,r8,r3
    7584:	8a10d83a 	srl	r8,r17,r8
    7588:	98d2983a 	sll	r9,r19,r3
    758c:	88e2983a 	sll	r17,r17,r3
    7590:	4250b03a 	or	r8,r8,r9
    7594:	1c80ad16 	blt	r3,r18,784c <__adddf3+0x3b8>
    7598:	1c87c83a 	sub	r3,r3,r18
    759c:	19000044 	addi	r4,r3,1
    75a0:	20800808 	cmpgei	r2,r4,32
    75a4:	10006a1e 	bne	r2,zero,7750 <__adddf3+0x2bc>
    75a8:	00800804 	movi	r2,32
    75ac:	1105c83a 	sub	r2,r2,r4
    75b0:	8906d83a 	srl	r3,r17,r4
    75b4:	88a2983a 	sll	r17,r17,r2
    75b8:	4084983a 	sll	r2,r8,r2
    75bc:	4110d83a 	srl	r8,r8,r4
    75c0:	8822c03a 	cmpne	r17,r17,zero
    75c4:	10c4b03a 	or	r2,r2,r3
    75c8:	1462b03a 	or	r17,r2,r17
    75cc:	0025883a 	mov	r18,zero
    75d0:	888001cc 	andi	r2,r17,7
    75d4:	10000726 	beq	r2,zero,75f4 <__adddf3+0x160>
    75d8:	888003cc 	andi	r2,r17,15
    75dc:	10800120 	cmpeqi	r2,r2,4
    75e0:	1000041e 	bne	r2,zero,75f4 <__adddf3+0x160>
    75e4:	88c00104 	addi	r3,r17,4
    75e8:	1c63803a 	cmpltu	r17,r3,r17
    75ec:	4451883a 	add	r8,r8,r17
    75f0:	1823883a 	mov	r17,r3
    75f4:	4080202c 	andhi	r2,r8,128
    75f8:	10006326 	beq	r2,zero,7788 <__adddf3+0x2f4>
    75fc:	90c00044 	addi	r3,r18,1
    7600:	1881ffe0 	cmpeqi	r2,r3,2047
    7604:	18c1ffcc 	andi	r3,r3,2047
    7608:	1000751e 	bne	r2,zero,77e0 <__adddf3+0x34c>
    760c:	00bfe034 	movhi	r2,65408
    7610:	10bfffc4 	addi	r2,r2,-1
    7614:	4090703a 	and	r8,r8,r2
    7618:	4004977a 	slli	r2,r8,29
    761c:	4010927a 	slli	r8,r8,9
    7620:	8822d0fa 	srli	r17,r17,3
    7624:	4010d33a 	srli	r8,r8,12
    7628:	1444b03a 	or	r2,r2,r17
    762c:	1806953a 	slli	r3,r3,20
    7630:	802097fa 	slli	r16,r16,31
    7634:	1a06b03a 	or	r3,r3,r8
    7638:	1c06b03a 	or	r3,r3,r16
    763c:	dfc00417 	ldw	ra,16(sp)
    7640:	dcc00317 	ldw	r19,12(sp)
    7644:	dc800217 	ldw	r18,8(sp)
    7648:	dc400117 	ldw	r17,4(sp)
    764c:	dc000017 	ldw	r16,0(sp)
    7650:	dec00504 	addi	sp,sp,20
    7654:	f800283a 	ret
    7658:	18002626 	beq	r3,zero,76f4 <__adddf3+0x260>
    765c:	1487c83a 	sub	r3,r2,r18
    7660:	9000b51e 	bne	r18,zero,7938 <__adddf3+0x4a4>
    7664:	5388b03a 	or	r4,r10,r14
    7668:	20010f26 	beq	r4,zero,7aa8 <__adddf3+0x614>
    766c:	193fffc4 	addi	r4,r3,-1
    7670:	20016126 	beq	r4,zero,7bf8 <__adddf3+0x764>
    7674:	18c1ffd8 	cmpnei	r3,r3,2047
    7678:	18012e26 	beq	r3,zero,7b34 <__adddf3+0x6a0>
    767c:	2007883a 	mov	r3,r4
    7680:	0000b006 	br	7944 <__adddf3+0x4b0>
    7684:	00c0760e 	bge	zero,r3,7860 <__adddf3+0x3cc>
    7688:	10002926 	beq	r2,zero,7730 <__adddf3+0x29c>
    768c:	9081ffd8 	cmpnei	r2,r18,2047
    7690:	10012126 	beq	r2,zero,7b18 <__adddf3+0x684>
    7694:	4a402034 	orhi	r9,r9,128
    7698:	18800e48 	cmpgei	r2,r3,57
    769c:	1000461e 	bne	r2,zero,77b8 <__adddf3+0x324>
    76a0:	18800808 	cmpgei	r2,r3,32
    76a4:	1000e326 	beq	r2,zero,7a34 <__adddf3+0x5a0>
    76a8:	1c7ff804 	addi	r17,r3,-32
    76ac:	19000820 	cmpeqi	r4,r3,32
    76b0:	4c44d83a 	srl	r2,r9,r17
    76b4:	2000041e 	bne	r4,zero,76c8 <__adddf3+0x234>
    76b8:	01001004 	movi	r4,64
    76bc:	20c7c83a 	sub	r3,r4,r3
    76c0:	48d2983a 	sll	r9,r9,r3
    76c4:	6a5ab03a 	or	r13,r13,r9
    76c8:	6822c03a 	cmpne	r17,r13,zero
    76cc:	88a2b03a 	or	r17,r17,r2
    76d0:	00003b06 	br	77c0 <__adddf3+0x32c>
    76d4:	4b44b03a 	or	r2,r9,r13
    76d8:	10008126 	beq	r2,zero,78e0 <__adddf3+0x44c>
    76dc:	18bfffc4 	addi	r2,r3,-1
    76e0:	10010726 	beq	r2,zero,7b00 <__adddf3+0x66c>
    76e4:	18c1ffd8 	cmpnei	r3,r3,2047
    76e8:	18004126 	beq	r3,zero,77f0 <__adddf3+0x35c>
    76ec:	1007883a 	mov	r3,r2
    76f0:	003f8806 	br	7514 <__adddf3+0x80>
    76f4:	90800044 	addi	r2,r18,1
    76f8:	1081ff8c 	andi	r2,r2,2046
    76fc:	1000a01e 	bne	r2,zero,7980 <__adddf3+0x4ec>
    7700:	538ab03a 	or	r5,r10,r14
    7704:	4b44b03a 	or	r2,r9,r13
    7708:	9000ef1e 	bne	r18,zero,7ac8 <__adddf3+0x634>
    770c:	28014126 	beq	r5,zero,7c14 <__adddf3+0x780>
    7710:	1001491e 	bne	r2,zero,7c38 <__adddf3+0x7a4>
    7714:	500a977a 	slli	r5,r10,29
    7718:	00880034 	movhi	r2,8192
    771c:	10bfffc4 	addi	r2,r2,-1
    7720:	2084703a 	and	r2,r4,r2
    7724:	5014d0fa 	srli	r10,r10,3
    7728:	1144b03a 	or	r2,r2,r5
    772c:	00001d06 	br	77a4 <__adddf3+0x310>
    7730:	4b44b03a 	or	r2,r9,r13
    7734:	10006a26 	beq	r2,zero,78e0 <__adddf3+0x44c>
    7738:	18bfffc4 	addi	r2,r3,-1
    773c:	1000e826 	beq	r2,zero,7ae0 <__adddf3+0x64c>
    7740:	18c1ffd8 	cmpnei	r3,r3,2047
    7744:	1800f426 	beq	r3,zero,7b18 <__adddf3+0x684>
    7748:	1007883a 	mov	r3,r2
    774c:	003fd206 	br	7698 <__adddf3+0x204>
    7750:	18fff844 	addi	r3,r3,-31
    7754:	20800820 	cmpeqi	r2,r4,32
    7758:	40c6d83a 	srl	r3,r8,r3
    775c:	1000041e 	bne	r2,zero,7770 <__adddf3+0x2dc>
    7760:	00801004 	movi	r2,64
    7764:	1109c83a 	sub	r4,r2,r4
    7768:	4110983a 	sll	r8,r8,r4
    776c:	8a22b03a 	or	r17,r17,r8
    7770:	8822c03a 	cmpne	r17,r17,zero
    7774:	88e2b03a 	or	r17,r17,r3
    7778:	0011883a 	mov	r8,zero
    777c:	0025883a 	mov	r18,zero
    7780:	888001cc 	andi	r2,r17,7
    7784:	103f941e 	bne	r2,zero,75d8 <__adddf3+0x144>
    7788:	8822d0fa 	srli	r17,r17,3
    778c:	4004977a 	slli	r2,r8,29
    7790:	4014d0fa 	srli	r10,r8,3
    7794:	9007883a 	mov	r3,r18
    7798:	8884b03a 	or	r2,r17,r2
    779c:	1901ffe0 	cmpeqi	r4,r3,2047
    77a0:	2000191e 	bne	r4,zero,7808 <__adddf3+0x374>
    77a4:	02000434 	movhi	r8,16
    77a8:	423fffc4 	addi	r8,r8,-1
    77ac:	5210703a 	and	r8,r10,r8
    77b0:	18c1ffcc 	andi	r3,r3,2047
    77b4:	003f9d06 	br	762c <__adddf3+0x198>
    77b8:	4b62b03a 	or	r17,r9,r13
    77bc:	8822c03a 	cmpne	r17,r17,zero
    77c0:	8ba3883a 	add	r17,r17,r14
    77c4:	8b91803a 	cmpltu	r8,r17,r14
    77c8:	4291883a 	add	r8,r8,r10
    77cc:	4080202c 	andhi	r2,r8,128
    77d0:	103feb26 	beq	r2,zero,7780 <__adddf3+0x2ec>
    77d4:	94800044 	addi	r18,r18,1
    77d8:	9081ffe0 	cmpeqi	r2,r18,2047
    77dc:	10007426 	beq	r2,zero,79b0 <__adddf3+0x51c>
    77e0:	00c1ffc4 	movi	r3,2047
    77e4:	0011883a 	mov	r8,zero
    77e8:	0005883a 	mov	r2,zero
    77ec:	003f8f06 	br	762c <__adddf3+0x198>
    77f0:	500a977a 	slli	r5,r10,29
    77f4:	00c80034 	movhi	r3,8192
    77f8:	18ffffc4 	addi	r3,r3,-1
    77fc:	5014d0fa 	srli	r10,r10,3
    7800:	20c4703a 	and	r2,r4,r3
    7804:	1144b03a 	or	r2,r2,r5
    7808:	1286b03a 	or	r3,r2,r10
    780c:	18015926 	beq	r3,zero,7d74 <__adddf3+0x8e0>
    7810:	00c00434 	movhi	r3,16
    7814:	18ffffc4 	addi	r3,r3,-1
    7818:	52000234 	orhi	r8,r10,8
    781c:	40d0703a 	and	r8,r8,r3
    7820:	00c1ffc4 	movi	r3,2047
    7824:	003f8106 	br	762c <__adddf3+0x198>
    7828:	8809883a 	mov	r4,r17
    782c:	0009e280 	call	9e28 <__clzsi2>
    7830:	10c00604 	addi	r3,r2,24
    7834:	19000808 	cmpgei	r4,r3,32
    7838:	203f5026 	beq	r4,zero,757c <__adddf3+0xe8>
    783c:	123ffe04 	addi	r8,r2,-8
    7840:	8a10983a 	sll	r8,r17,r8
    7844:	0023883a 	mov	r17,zero
    7848:	1cbf530e 	bge	r3,r18,7598 <__adddf3+0x104>
    784c:	00bfe034 	movhi	r2,65408
    7850:	10bfffc4 	addi	r2,r2,-1
    7854:	90e5c83a 	sub	r18,r18,r3
    7858:	4090703a 	and	r8,r8,r2
    785c:	003f5c06 	br	75d0 <__adddf3+0x13c>
    7860:	18002626 	beq	r3,zero,78fc <__adddf3+0x468>
    7864:	1487c83a 	sub	r3,r2,r18
    7868:	90006e1e 	bne	r18,zero,7a24 <__adddf3+0x590>
    786c:	5388b03a 	or	r4,r10,r14
    7870:	2000fd26 	beq	r4,zero,7c68 <__adddf3+0x7d4>
    7874:	193fffc4 	addi	r4,r3,-1
    7878:	20013626 	beq	r4,zero,7d54 <__adddf3+0x8c0>
    787c:	18c1ffd8 	cmpnei	r3,r3,2047
    7880:	1800b426 	beq	r3,zero,7b54 <__adddf3+0x6c0>
    7884:	2007883a 	mov	r3,r4
    7888:	19000e48 	cmpgei	r4,r3,57
    788c:	2000b81e 	bne	r4,zero,7b70 <__adddf3+0x6dc>
    7890:	19000808 	cmpgei	r4,r3,32
    7894:	2001241e 	bne	r4,zero,7d28 <__adddf3+0x894>
    7898:	01000804 	movi	r4,32
    789c:	20c9c83a 	sub	r4,r4,r3
    78a0:	5122983a 	sll	r17,r10,r4
    78a4:	70cad83a 	srl	r5,r14,r3
    78a8:	7108983a 	sll	r4,r14,r4
    78ac:	50d4d83a 	srl	r10,r10,r3
    78b0:	8962b03a 	or	r17,r17,r5
    78b4:	2008c03a 	cmpne	r4,r4,zero
    78b8:	8922b03a 	or	r17,r17,r4
    78bc:	4a93883a 	add	r9,r9,r10
    78c0:	8b63883a 	add	r17,r17,r13
    78c4:	8b51803a 	cmpltu	r8,r17,r13
    78c8:	4251883a 	add	r8,r8,r9
    78cc:	1025883a 	mov	r18,r2
    78d0:	003fbe06 	br	77cc <__adddf3+0x338>
    78d4:	4b62b03a 	or	r17,r9,r13
    78d8:	8822c03a 	cmpne	r17,r17,zero
    78dc:	003f1b06 	br	754c <__adddf3+0xb8>
    78e0:	500c977a 	slli	r6,r10,29
    78e4:	01480034 	movhi	r5,8192
    78e8:	297fffc4 	addi	r5,r5,-1
    78ec:	2144703a 	and	r2,r4,r5
    78f0:	5014d0fa 	srli	r10,r10,3
    78f4:	3084b03a 	or	r2,r6,r2
    78f8:	003fa806 	br	779c <__adddf3+0x308>
    78fc:	90800044 	addi	r2,r18,1
    7900:	1141ff8c 	andi	r5,r2,2046
    7904:	2800561e 	bne	r5,zero,7a60 <__adddf3+0x5cc>
    7908:	5384b03a 	or	r2,r10,r14
    790c:	9000a61e 	bne	r18,zero,7ba8 <__adddf3+0x714>
    7910:	1000ee26 	beq	r2,zero,7ccc <__adddf3+0x838>
    7914:	4b44b03a 	or	r2,r9,r13
    7918:	1000f31e 	bne	r2,zero,7ce8 <__adddf3+0x854>
    791c:	5004977a 	slli	r2,r10,29
    7920:	01480034 	movhi	r5,8192
    7924:	297fffc4 	addi	r5,r5,-1
    7928:	2148703a 	and	r4,r4,r5
    792c:	5014d0fa 	srli	r10,r10,3
    7930:	1104b03a 	or	r2,r2,r4
    7934:	003f9b06 	br	77a4 <__adddf3+0x310>
    7938:	1101ffd8 	cmpnei	r4,r2,2047
    793c:	20007d26 	beq	r4,zero,7b34 <__adddf3+0x6a0>
    7940:	52802034 	orhi	r10,r10,128
    7944:	19000e48 	cmpgei	r4,r3,57
    7948:	20002e1e 	bne	r4,zero,7a04 <__adddf3+0x570>
    794c:	19000808 	cmpgei	r4,r3,32
    7950:	20008a1e 	bne	r4,zero,7b7c <__adddf3+0x6e8>
    7954:	01000804 	movi	r4,32
    7958:	20c9c83a 	sub	r4,r4,r3
    795c:	5122983a 	sll	r17,r10,r4
    7960:	70cad83a 	srl	r5,r14,r3
    7964:	711c983a 	sll	r14,r14,r4
    7968:	50d4d83a 	srl	r10,r10,r3
    796c:	8962b03a 	or	r17,r17,r5
    7970:	701cc03a 	cmpne	r14,r14,zero
    7974:	8ba2b03a 	or	r17,r17,r14
    7978:	4a93c83a 	sub	r9,r9,r10
    797c:	00002306 	br	7a0c <__adddf3+0x578>
    7980:	7363c83a 	sub	r17,r14,r13
    7984:	5267c83a 	sub	r19,r10,r9
    7988:	7451803a 	cmpltu	r8,r14,r17
    798c:	9a27c83a 	sub	r19,r19,r8
    7990:	9880202c 	andhi	r2,r19,128
    7994:	10003e1e 	bne	r2,zero,7a90 <__adddf3+0x5fc>
    7998:	8cc4b03a 	or	r2,r17,r19
    799c:	103ef31e 	bne	r2,zero,756c <__adddf3+0xd8>
    79a0:	0015883a 	mov	r10,zero
    79a4:	0021883a 	mov	r16,zero
    79a8:	003f7e06 	br	77a4 <__adddf3+0x310>
    79ac:	04800084 	movi	r18,2
    79b0:	00bfe034 	movhi	r2,65408
    79b4:	10bfffc4 	addi	r2,r2,-1
    79b8:	8806d07a 	srli	r3,r17,1
    79bc:	4090703a 	and	r8,r8,r2
    79c0:	400497fa 	slli	r2,r8,31
    79c4:	8c40004c 	andi	r17,r17,1
    79c8:	1c62b03a 	or	r17,r3,r17
    79cc:	4010d07a 	srli	r8,r8,1
    79d0:	1462b03a 	or	r17,r2,r17
    79d4:	003efe06 	br	75d0 <__adddf3+0x13c>
    79d8:	1c7ff804 	addi	r17,r3,-32
    79dc:	19000820 	cmpeqi	r4,r3,32
    79e0:	4c44d83a 	srl	r2,r9,r17
    79e4:	2000041e 	bne	r4,zero,79f8 <__adddf3+0x564>
    79e8:	01001004 	movi	r4,64
    79ec:	20c7c83a 	sub	r3,r4,r3
    79f0:	48d2983a 	sll	r9,r9,r3
    79f4:	6a5ab03a 	or	r13,r13,r9
    79f8:	6822c03a 	cmpne	r17,r13,zero
    79fc:	88a2b03a 	or	r17,r17,r2
    7a00:	003ed206 	br	754c <__adddf3+0xb8>
    7a04:	5394b03a 	or	r10,r10,r14
    7a08:	5022c03a 	cmpne	r17,r10,zero
    7a0c:	6c63c83a 	sub	r17,r13,r17
    7a10:	6c51803a 	cmpltu	r8,r13,r17
    7a14:	4a11c83a 	sub	r8,r9,r8
    7a18:	3821883a 	mov	r16,r7
    7a1c:	1025883a 	mov	r18,r2
    7a20:	003ecd06 	br	7558 <__adddf3+0xc4>
    7a24:	1101ffd8 	cmpnei	r4,r2,2047
    7a28:	20004a26 	beq	r4,zero,7b54 <__adddf3+0x6c0>
    7a2c:	52802034 	orhi	r10,r10,128
    7a30:	003f9506 	br	7888 <__adddf3+0x3f4>
    7a34:	00800804 	movi	r2,32
    7a38:	10c5c83a 	sub	r2,r2,r3
    7a3c:	68c8d83a 	srl	r4,r13,r3
    7a40:	48a2983a 	sll	r17,r9,r2
    7a44:	689a983a 	sll	r13,r13,r2
    7a48:	48c6d83a 	srl	r3,r9,r3
    7a4c:	8922b03a 	or	r17,r17,r4
    7a50:	681ac03a 	cmpne	r13,r13,zero
    7a54:	8b62b03a 	or	r17,r17,r13
    7a58:	50d5883a 	add	r10,r10,r3
    7a5c:	003f5806 	br	77c0 <__adddf3+0x32c>
    7a60:	10c1ffe0 	cmpeqi	r3,r2,2047
    7a64:	183f5e1e 	bne	r3,zero,77e0 <__adddf3+0x34c>
    7a68:	7351883a 	add	r8,r14,r13
    7a6c:	4387803a 	cmpltu	r3,r8,r14
    7a70:	5255883a 	add	r10,r10,r9
    7a74:	50c7883a 	add	r3,r10,r3
    7a78:	401ad07a 	srli	r13,r8,1
    7a7c:	182297fa 	slli	r17,r3,31
    7a80:	1810d07a 	srli	r8,r3,1
    7a84:	1025883a 	mov	r18,r2
    7a88:	8b62b03a 	or	r17,r17,r13
    7a8c:	003f3c06 	br	7780 <__adddf3+0x2ec>
    7a90:	6ba3c83a 	sub	r17,r13,r14
    7a94:	4a93c83a 	sub	r9,r9,r10
    7a98:	6c51803a 	cmpltu	r8,r13,r17
    7a9c:	4a27c83a 	sub	r19,r9,r8
    7aa0:	3821883a 	mov	r16,r7
    7aa4:	003eb106 	br	756c <__adddf3+0xd8>
    7aa8:	480a977a 	slli	r5,r9,29
    7aac:	01080034 	movhi	r4,8192
    7ab0:	213fffc4 	addi	r4,r4,-1
    7ab4:	3104703a 	and	r2,r6,r4
    7ab8:	4814d0fa 	srli	r10,r9,3
    7abc:	1144b03a 	or	r2,r2,r5
    7ac0:	3821883a 	mov	r16,r7
    7ac4:	003f3506 	br	779c <__adddf3+0x308>
    7ac8:	28006e1e 	bne	r5,zero,7c84 <__adddf3+0x7f0>
    7acc:	1000191e 	bne	r2,zero,7b34 <__adddf3+0x6a0>
    7ad0:	0021883a 	mov	r16,zero
    7ad4:	4015883a 	mov	r10,r8
    7ad8:	00bfffc4 	movi	r2,-1
    7adc:	003f4c06 	br	7810 <__adddf3+0x37c>
    7ae0:	7363883a 	add	r17,r14,r13
    7ae4:	5255883a 	add	r10,r10,r9
    7ae8:	8b91803a 	cmpltu	r8,r17,r14
    7aec:	5211883a 	add	r8,r10,r8
    7af0:	4080202c 	andhi	r2,r8,128
    7af4:	103fad1e 	bne	r2,zero,79ac <__adddf3+0x518>
    7af8:	04800044 	movi	r18,1
    7afc:	003f2006 	br	7780 <__adddf3+0x2ec>
    7b00:	7363c83a 	sub	r17,r14,r13
    7b04:	5255c83a 	sub	r10,r10,r9
    7b08:	7451803a 	cmpltu	r8,r14,r17
    7b0c:	5211c83a 	sub	r8,r10,r8
    7b10:	04800044 	movi	r18,1
    7b14:	003e9006 	br	7558 <__adddf3+0xc4>
    7b18:	5004977a 	slli	r2,r10,29
    7b1c:	00c80034 	movhi	r3,8192
    7b20:	18ffffc4 	addi	r3,r3,-1
    7b24:	20c8703a 	and	r4,r4,r3
    7b28:	5014d0fa 	srli	r10,r10,3
    7b2c:	1104b03a 	or	r2,r2,r4
    7b30:	003f3506 	br	7808 <__adddf3+0x374>
    7b34:	4806977a 	slli	r3,r9,29
    7b38:	00880034 	movhi	r2,8192
    7b3c:	10bfffc4 	addi	r2,r2,-1
    7b40:	3084703a 	and	r2,r6,r2
    7b44:	4814d0fa 	srli	r10,r9,3
    7b48:	10c4b03a 	or	r2,r2,r3
    7b4c:	3821883a 	mov	r16,r7
    7b50:	003f2d06 	br	7808 <__adddf3+0x374>
    7b54:	4804977a 	slli	r2,r9,29
    7b58:	00c80034 	movhi	r3,8192
    7b5c:	18ffffc4 	addi	r3,r3,-1
    7b60:	30cc703a 	and	r6,r6,r3
    7b64:	4814d0fa 	srli	r10,r9,3
    7b68:	1184b03a 	or	r2,r2,r6
    7b6c:	003f2606 	br	7808 <__adddf3+0x374>
    7b70:	5394b03a 	or	r10,r10,r14
    7b74:	5022c03a 	cmpne	r17,r10,zero
    7b78:	003f5106 	br	78c0 <__adddf3+0x42c>
    7b7c:	1c7ff804 	addi	r17,r3,-32
    7b80:	19400820 	cmpeqi	r5,r3,32
    7b84:	5448d83a 	srl	r4,r10,r17
    7b88:	2800041e 	bne	r5,zero,7b9c <__adddf3+0x708>
    7b8c:	01401004 	movi	r5,64
    7b90:	28c7c83a 	sub	r3,r5,r3
    7b94:	50d4983a 	sll	r10,r10,r3
    7b98:	729cb03a 	or	r14,r14,r10
    7b9c:	7022c03a 	cmpne	r17,r14,zero
    7ba0:	8922b03a 	or	r17,r17,r4
    7ba4:	003f9906 	br	7a0c <__adddf3+0x578>
    7ba8:	103fea26 	beq	r2,zero,7b54 <__adddf3+0x6c0>
    7bac:	4b50b03a 	or	r8,r9,r13
    7bb0:	500a977a 	slli	r5,r10,29
    7bb4:	5014d0fa 	srli	r10,r10,3
    7bb8:	40005626 	beq	r8,zero,7d14 <__adddf3+0x880>
    7bbc:	00c80034 	movhi	r3,8192
    7bc0:	18ffffc4 	addi	r3,r3,-1
    7bc4:	20c4703a 	and	r2,r4,r3
    7bc8:	5100022c 	andhi	r4,r10,8
    7bcc:	1144b03a 	or	r2,r2,r5
    7bd0:	203f0d26 	beq	r4,zero,7808 <__adddf3+0x374>
    7bd4:	4808d0fa 	srli	r4,r9,3
    7bd8:	2140022c 	andhi	r5,r4,8
    7bdc:	283f0a1e 	bne	r5,zero,7808 <__adddf3+0x374>
    7be0:	4804977a 	slli	r2,r9,29
    7be4:	30cc703a 	and	r6,r6,r3
    7be8:	3821883a 	mov	r16,r7
    7bec:	3084b03a 	or	r2,r6,r2
    7bf0:	2015883a 	mov	r10,r4
    7bf4:	003f0406 	br	7808 <__adddf3+0x374>
    7bf8:	6ba3c83a 	sub	r17,r13,r14
    7bfc:	4a95c83a 	sub	r10,r9,r10
    7c00:	6c51803a 	cmpltu	r8,r13,r17
    7c04:	5211c83a 	sub	r8,r10,r8
    7c08:	3821883a 	mov	r16,r7
    7c0c:	04800044 	movi	r18,1
    7c10:	003e5106 	br	7558 <__adddf3+0xc4>
    7c14:	103f6226 	beq	r2,zero,79a0 <__adddf3+0x50c>
    7c18:	4808977a 	slli	r4,r9,29
    7c1c:	00880034 	movhi	r2,8192
    7c20:	10bfffc4 	addi	r2,r2,-1
    7c24:	3084703a 	and	r2,r6,r2
    7c28:	4814d0fa 	srli	r10,r9,3
    7c2c:	1104b03a 	or	r2,r2,r4
    7c30:	3821883a 	mov	r16,r7
    7c34:	003edb06 	br	77a4 <__adddf3+0x310>
    7c38:	7363c83a 	sub	r17,r14,r13
    7c3c:	7445803a 	cmpltu	r2,r14,r17
    7c40:	5251c83a 	sub	r8,r10,r9
    7c44:	4091c83a 	sub	r8,r8,r2
    7c48:	4080202c 	andhi	r2,r8,128
    7c4c:	10004626 	beq	r2,zero,7d68 <__adddf3+0x8d4>
    7c50:	6ba3c83a 	sub	r17,r13,r14
    7c54:	4a95c83a 	sub	r10,r9,r10
    7c58:	6c51803a 	cmpltu	r8,r13,r17
    7c5c:	5211c83a 	sub	r8,r10,r8
    7c60:	3821883a 	mov	r16,r7
    7c64:	003e5a06 	br	75d0 <__adddf3+0x13c>
    7c68:	4804977a 	slli	r2,r9,29
    7c6c:	01080034 	movhi	r4,8192
    7c70:	213fffc4 	addi	r4,r4,-1
    7c74:	310c703a 	and	r6,r6,r4
    7c78:	4814d0fa 	srli	r10,r9,3
    7c7c:	1184b03a 	or	r2,r2,r6
    7c80:	003ec606 	br	779c <__adddf3+0x308>
    7c84:	500a977a 	slli	r5,r10,29
    7c88:	5014d0fa 	srli	r10,r10,3
    7c8c:	10002126 	beq	r2,zero,7d14 <__adddf3+0x880>
    7c90:	00c80034 	movhi	r3,8192
    7c94:	18ffffc4 	addi	r3,r3,-1
    7c98:	20c4703a 	and	r2,r4,r3
    7c9c:	5100022c 	andhi	r4,r10,8
    7ca0:	1144b03a 	or	r2,r2,r5
    7ca4:	203ed826 	beq	r4,zero,7808 <__adddf3+0x374>
    7ca8:	4808d0fa 	srli	r4,r9,3
    7cac:	2140022c 	andhi	r5,r4,8
    7cb0:	283ed51e 	bne	r5,zero,7808 <__adddf3+0x374>
    7cb4:	4812977a 	slli	r9,r9,29
    7cb8:	30c4703a 	and	r2,r6,r3
    7cbc:	3821883a 	mov	r16,r7
    7cc0:	1244b03a 	or	r2,r2,r9
    7cc4:	2015883a 	mov	r10,r4
    7cc8:	003ecf06 	br	7808 <__adddf3+0x374>
    7ccc:	4804977a 	slli	r2,r9,29
    7cd0:	01080034 	movhi	r4,8192
    7cd4:	213fffc4 	addi	r4,r4,-1
    7cd8:	310c703a 	and	r6,r6,r4
    7cdc:	4814d0fa 	srli	r10,r9,3
    7ce0:	1184b03a 	or	r2,r2,r6
    7ce4:	003eaf06 	br	77a4 <__adddf3+0x310>
    7ce8:	7363883a 	add	r17,r14,r13
    7cec:	5255883a 	add	r10,r10,r9
    7cf0:	8b91803a 	cmpltu	r8,r17,r14
    7cf4:	5211883a 	add	r8,r10,r8
    7cf8:	4080202c 	andhi	r2,r8,128
    7cfc:	103ea026 	beq	r2,zero,7780 <__adddf3+0x2ec>
    7d00:	00bfe034 	movhi	r2,65408
    7d04:	10bfffc4 	addi	r2,r2,-1
    7d08:	4090703a 	and	r8,r8,r2
    7d0c:	04800044 	movi	r18,1
    7d10:	003e9b06 	br	7780 <__adddf3+0x2ec>
    7d14:	00880034 	movhi	r2,8192
    7d18:	10bfffc4 	addi	r2,r2,-1
    7d1c:	2084703a 	and	r2,r4,r2
    7d20:	1144b03a 	or	r2,r2,r5
    7d24:	003eb806 	br	7808 <__adddf3+0x374>
    7d28:	193ff804 	addi	r4,r3,-32
    7d2c:	19400820 	cmpeqi	r5,r3,32
    7d30:	5108d83a 	srl	r4,r10,r4
    7d34:	2800041e 	bne	r5,zero,7d48 <__adddf3+0x8b4>
    7d38:	01401004 	movi	r5,64
    7d3c:	28c7c83a 	sub	r3,r5,r3
    7d40:	50d4983a 	sll	r10,r10,r3
    7d44:	729cb03a 	or	r14,r14,r10
    7d48:	7022c03a 	cmpne	r17,r14,zero
    7d4c:	8922b03a 	or	r17,r17,r4
    7d50:	003edb06 	br	78c0 <__adddf3+0x42c>
    7d54:	7363883a 	add	r17,r14,r13
    7d58:	5255883a 	add	r10,r10,r9
    7d5c:	8b51803a 	cmpltu	r8,r17,r13
    7d60:	5211883a 	add	r8,r10,r8
    7d64:	003f6206 	br	7af0 <__adddf3+0x65c>
    7d68:	8a04b03a 	or	r2,r17,r8
    7d6c:	103f0c26 	beq	r2,zero,79a0 <__adddf3+0x50c>
    7d70:	003e8306 	br	7780 <__adddf3+0x2ec>
    7d74:	0005883a 	mov	r2,zero
    7d78:	00c1ffc4 	movi	r3,2047
    7d7c:	0011883a 	mov	r8,zero
    7d80:	003e2a06 	br	762c <__adddf3+0x198>

00007d84 <__divdf3>:
    7d84:	2810d53a 	srli	r8,r5,20
    7d88:	defff004 	addi	sp,sp,-64
    7d8c:	dc000615 	stw	r16,24(sp)
    7d90:	04000434 	movhi	r16,16
    7d94:	ddc00d15 	stw	r23,52(sp)
    7d98:	dd800c15 	stw	r22,48(sp)
    7d9c:	dd400b15 	stw	r21,44(sp)
    7da0:	dd000a15 	stw	r20,40(sp)
    7da4:	843fffc4 	addi	r16,r16,-1
    7da8:	dfc00f15 	stw	ra,60(sp)
    7dac:	df000e15 	stw	fp,56(sp)
    7db0:	dcc00915 	stw	r19,36(sp)
    7db4:	dc800815 	stw	r18,32(sp)
    7db8:	dc400715 	stw	r17,28(sp)
    7dbc:	4201ffcc 	andi	r8,r8,2047
    7dc0:	282cd7fa 	srli	r22,r5,31
    7dc4:	302f883a 	mov	r23,r6
    7dc8:	382b883a 	mov	r21,r7
    7dcc:	2029883a 	mov	r20,r4
    7dd0:	2c20703a 	and	r16,r5,r16
    7dd4:	40014426 	beq	r8,zero,82e8 <__divdf3+0x564>
    7dd8:	4081ffe0 	cmpeqi	r2,r8,2047
    7ddc:	1001551e 	bne	r2,zero,8334 <__divdf3+0x5b0>
    7de0:	2024d77a 	srli	r18,r4,29
    7de4:	800a90fa 	slli	r5,r16,3
    7de8:	202890fa 	slli	r20,r4,3
    7dec:	447f0044 	addi	r17,r8,-1023
    7df0:	914ab03a 	or	r5,r18,r5
    7df4:	2c802034 	orhi	r18,r5,128
    7df8:	0021883a 	mov	r16,zero
    7dfc:	0039883a 	mov	fp,zero
    7e00:	a810d53a 	srli	r8,r21,20
    7e04:	00c00434 	movhi	r3,16
    7e08:	18ffffc4 	addi	r3,r3,-1
    7e0c:	4201ffcc 	andi	r8,r8,2047
    7e10:	a826d7fa 	srli	r19,r21,31
    7e14:	a8ea703a 	and	r21,r21,r3
    7e18:	40012226 	beq	r8,zero,82a4 <__divdf3+0x520>
    7e1c:	4081ffe0 	cmpeqi	r2,r8,2047
    7e20:	10014b1e 	bne	r2,zero,8350 <__divdf3+0x5cc>
    7e24:	a80690fa 	slli	r3,r21,3
    7e28:	b804d77a 	srli	r2,r23,29
    7e2c:	b81290fa 	slli	r9,r23,3
    7e30:	423f0044 	addi	r8,r8,-1023
    7e34:	10c6b03a 	or	r3,r2,r3
    7e38:	1d402034 	orhi	r21,r3,128
    7e3c:	8a23c83a 	sub	r17,r17,r8
    7e40:	0007883a 	mov	r3,zero
    7e44:	80800428 	cmpgeui	r2,r16,16
    7e48:	b4cef03a 	xor	r7,r22,r19
    7e4c:	1000391e 	bne	r2,zero,7f34 <__divdf3+0x1b0>
    7e50:	800c90ba 	slli	r6,r16,2
    7e54:	00800034 	movhi	r2,0
    7e58:	3085883a 	add	r2,r6,r2
    7e5c:	109f9917 	ldw	r2,32356(r2)
    7e60:	1000683a 	jmp	r2
    7e64:	00007f34 	movhi	zero,508
    7e68:	00007f10 	cmplti	zero,zero,508
    7e6c:	00007ec0 	call	7ec <kf_bfly4+0x434>
    7e70:	00007f20 	cmpeqi	zero,zero,508
    7e74:	00007ec0 	call	7ec <kf_bfly4+0x434>
    7e78:	000083b4 	movhi	zero,526
    7e7c:	00007ec0 	call	7ec <kf_bfly4+0x434>
    7e80:	00007f20 	cmpeqi	zero,zero,508
    7e84:	00007f10 	cmplti	zero,zero,508
    7e88:	00007f10 	cmplti	zero,zero,508
    7e8c:	000083b4 	movhi	zero,526
    7e90:	00007f20 	cmpeqi	zero,zero,508
    7e94:	00007ea4 	muli	zero,zero,506
    7e98:	00007ea4 	muli	zero,zero,506
    7e9c:	00007ea4 	muli	zero,zero,506
    7ea0:	00008444 	movi	zero,529
    7ea4:	b00f883a 	mov	r7,r22
    7ea8:	e08000a0 	cmpeqi	r2,fp,2
    7eac:	1000181e 	bne	r2,zero,7f10 <__divdf3+0x18c>
    7eb0:	e08000e0 	cmpeqi	r2,fp,3
    7eb4:	1001ef1e 	bne	r2,zero,8674 <__divdf3+0x8f0>
    7eb8:	e0800060 	cmpeqi	r2,fp,1
    7ebc:	1000e626 	beq	r2,zero,8258 <__divdf3+0x4d4>
    7ec0:	0007883a 	mov	r3,zero
    7ec4:	000b883a 	mov	r5,zero
    7ec8:	0029883a 	mov	r20,zero
    7ecc:	1806953a 	slli	r3,r3,20
    7ed0:	380e97fa 	slli	r7,r7,31
    7ed4:	a005883a 	mov	r2,r20
    7ed8:	1946b03a 	or	r3,r3,r5
    7edc:	19c6b03a 	or	r3,r3,r7
    7ee0:	dfc00f17 	ldw	ra,60(sp)
    7ee4:	df000e17 	ldw	fp,56(sp)
    7ee8:	ddc00d17 	ldw	r23,52(sp)
    7eec:	dd800c17 	ldw	r22,48(sp)
    7ef0:	dd400b17 	ldw	r21,44(sp)
    7ef4:	dd000a17 	ldw	r20,40(sp)
    7ef8:	dcc00917 	ldw	r19,36(sp)
    7efc:	dc800817 	ldw	r18,32(sp)
    7f00:	dc400717 	ldw	r17,28(sp)
    7f04:	dc000617 	ldw	r16,24(sp)
    7f08:	dec01004 	addi	sp,sp,64
    7f0c:	f800283a 	ret
    7f10:	00c1ffc4 	movi	r3,2047
    7f14:	000b883a 	mov	r5,zero
    7f18:	0029883a 	mov	r20,zero
    7f1c:	003feb06 	br	7ecc <__divdf3+0x148>
    7f20:	980f883a 	mov	r7,r19
    7f24:	a825883a 	mov	r18,r21
    7f28:	4829883a 	mov	r20,r9
    7f2c:	1839883a 	mov	fp,r3
    7f30:	003fdd06 	br	7ea8 <__divdf3+0x124>
    7f34:	ac815d36 	bltu	r21,r18,84ac <__divdf3+0x728>
    7f38:	ac815b26 	beq	r21,r18,84a8 <__divdf3+0x724>
    7f3c:	8c7fffc4 	addi	r17,r17,-1
    7f40:	a039883a 	mov	fp,r20
    7f44:	9021883a 	mov	r16,r18
    7f48:	002d883a 	mov	r22,zero
    7f4c:	a806923a 	slli	r3,r21,8
    7f50:	482ad63a 	srli	r21,r9,24
    7f54:	8009883a 	mov	r4,r16
    7f58:	182ed43a 	srli	r23,r3,16
    7f5c:	a8eab03a 	or	r21,r21,r3
    7f60:	d9c00015 	stw	r7,0(sp)
    7f64:	b80b883a 	mov	r5,r23
    7f68:	4826923a 	slli	r19,r9,8
    7f6c:	ad3fffcc 	andi	r20,r21,65535
    7f70:	00070640 	call	7064 <__udivsi3>
    7f74:	100b883a 	mov	r5,r2
    7f78:	a009883a 	mov	r4,r20
    7f7c:	1025883a 	mov	r18,r2
    7f80:	00071240 	call	7124 <__mulsi3>
    7f84:	8009883a 	mov	r4,r16
    7f88:	b80b883a 	mov	r5,r23
    7f8c:	1021883a 	mov	r16,r2
    7f90:	00070c80 	call	70c8 <__umodsi3>
    7f94:	1004943a 	slli	r2,r2,16
    7f98:	e008d43a 	srli	r4,fp,16
    7f9c:	d9c00017 	ldw	r7,0(sp)
    7fa0:	2088b03a 	or	r4,r4,r2
    7fa4:	2400042e 	bgeu	r4,r16,7fb8 <__divdf3+0x234>
    7fa8:	2549883a 	add	r4,r4,r21
    7fac:	90bfffc4 	addi	r2,r18,-1
    7fb0:	25416e2e 	bgeu	r4,r21,856c <__divdf3+0x7e8>
    7fb4:	1025883a 	mov	r18,r2
    7fb8:	2421c83a 	sub	r16,r4,r16
    7fbc:	b80b883a 	mov	r5,r23
    7fc0:	8009883a 	mov	r4,r16
    7fc4:	d9c00215 	stw	r7,8(sp)
    7fc8:	00070640 	call	7064 <__udivsi3>
    7fcc:	100b883a 	mov	r5,r2
    7fd0:	a009883a 	mov	r4,r20
    7fd4:	d8800115 	stw	r2,4(sp)
    7fd8:	00071240 	call	7124 <__mulsi3>
    7fdc:	b80b883a 	mov	r5,r23
    7fe0:	8009883a 	mov	r4,r16
    7fe4:	d8800015 	stw	r2,0(sp)
    7fe8:	00070c80 	call	70c8 <__umodsi3>
    7fec:	100c943a 	slli	r6,r2,16
    7ff0:	da000017 	ldw	r8,0(sp)
    7ff4:	e73fffcc 	andi	fp,fp,65535
    7ff8:	e18cb03a 	or	r6,fp,r6
    7ffc:	d8c00117 	ldw	r3,4(sp)
    8000:	d9c00217 	ldw	r7,8(sp)
    8004:	3200042e 	bgeu	r6,r8,8018 <__divdf3+0x294>
    8008:	354d883a 	add	r6,r6,r21
    800c:	18bfffc4 	addi	r2,r3,-1
    8010:	3541522e 	bgeu	r6,r21,855c <__divdf3+0x7d8>
    8014:	1007883a 	mov	r3,r2
    8018:	9024943a 	slli	r18,r18,16
    801c:	9f3fffcc 	andi	fp,r19,65535
    8020:	320dc83a 	sub	r6,r6,r8
    8024:	90e4b03a 	or	r18,r18,r3
    8028:	9012d43a 	srli	r9,r18,16
    802c:	92ffffcc 	andi	r11,r18,65535
    8030:	5809883a 	mov	r4,r11
    8034:	e00b883a 	mov	r5,fp
    8038:	d9c00515 	stw	r7,20(sp)
    803c:	d9800315 	stw	r6,12(sp)
    8040:	dac00415 	stw	r11,16(sp)
    8044:	da400015 	stw	r9,0(sp)
    8048:	00071240 	call	7124 <__mulsi3>
    804c:	da400017 	ldw	r9,0(sp)
    8050:	e00b883a 	mov	r5,fp
    8054:	d8800215 	stw	r2,8(sp)
    8058:	4809883a 	mov	r4,r9
    805c:	00071240 	call	7124 <__mulsi3>
    8060:	da400017 	ldw	r9,0(sp)
    8064:	9820d43a 	srli	r16,r19,16
    8068:	d8800115 	stw	r2,4(sp)
    806c:	4809883a 	mov	r4,r9
    8070:	800b883a 	mov	r5,r16
    8074:	00071240 	call	7124 <__mulsi3>
    8078:	dac00417 	ldw	r11,16(sp)
    807c:	8009883a 	mov	r4,r16
    8080:	d8800015 	stw	r2,0(sp)
    8084:	580b883a 	mov	r5,r11
    8088:	00071240 	call	7124 <__mulsi3>
    808c:	da000217 	ldw	r8,8(sp)
    8090:	da400117 	ldw	r9,4(sp)
    8094:	da800017 	ldw	r10,0(sp)
    8098:	4008d43a 	srli	r4,r8,16
    809c:	1247883a 	add	r3,r2,r9
    80a0:	d9800317 	ldw	r6,12(sp)
    80a4:	20c7883a 	add	r3,r4,r3
    80a8:	d9c00517 	ldw	r7,20(sp)
    80ac:	1a40022e 	bgeu	r3,r9,80b8 <__divdf3+0x334>
    80b0:	00800074 	movhi	r2,1
    80b4:	5095883a 	add	r10,r10,r2
    80b8:	1808d43a 	srli	r4,r3,16
    80bc:	1806943a 	slli	r3,r3,16
    80c0:	423fffcc 	andi	r8,r8,65535
    80c4:	2285883a 	add	r2,r4,r10
    80c8:	1a07883a 	add	r3,r3,r8
    80cc:	30800236 	bltu	r6,r2,80d8 <__divdf3+0x354>
    80d0:	30800a1e 	bne	r6,r2,80fc <__divdf3+0x378>
    80d4:	b0c0092e 	bgeu	r22,r3,80fc <__divdf3+0x378>
    80d8:	b4ed883a 	add	r22,r22,r19
    80dc:	b4c9803a 	cmpltu	r4,r22,r19
    80e0:	2549883a 	add	r4,r4,r21
    80e4:	310d883a 	add	r6,r6,r4
    80e8:	913fffc4 	addi	r4,r18,-1
    80ec:	a981182e 	bgeu	r21,r6,8550 <__divdf3+0x7cc>
    80f0:	30814a36 	bltu	r6,r2,861c <__divdf3+0x898>
    80f4:	11814826 	beq	r2,r6,8618 <__divdf3+0x894>
    80f8:	2025883a 	mov	r18,r4
    80fc:	b0c7c83a 	sub	r3,r22,r3
    8100:	3085c83a 	sub	r2,r6,r2
    8104:	b0ed803a 	cmpltu	r22,r22,r3
    8108:	15adc83a 	sub	r22,r2,r22
    810c:	ad813026 	beq	r21,r22,85d0 <__divdf3+0x84c>
    8110:	b009883a 	mov	r4,r22
    8114:	b80b883a 	mov	r5,r23
    8118:	d8c00215 	stw	r3,8(sp)
    811c:	d9c00115 	stw	r7,4(sp)
    8120:	00070640 	call	7064 <__udivsi3>
    8124:	100b883a 	mov	r5,r2
    8128:	a009883a 	mov	r4,r20
    812c:	d8800015 	stw	r2,0(sp)
    8130:	00071240 	call	7124 <__mulsi3>
    8134:	b009883a 	mov	r4,r22
    8138:	b80b883a 	mov	r5,r23
    813c:	102d883a 	mov	r22,r2
    8140:	00070c80 	call	70c8 <__umodsi3>
    8144:	d8c00217 	ldw	r3,8(sp)
    8148:	1004943a 	slli	r2,r2,16
    814c:	d9800017 	ldw	r6,0(sp)
    8150:	1808d43a 	srli	r4,r3,16
    8154:	d9c00117 	ldw	r7,4(sp)
    8158:	2088b03a 	or	r4,r4,r2
    815c:	2580f536 	bltu	r4,r22,8534 <__divdf3+0x7b0>
    8160:	25adc83a 	sub	r22,r4,r22
    8164:	b009883a 	mov	r4,r22
    8168:	b80b883a 	mov	r5,r23
    816c:	d8c00315 	stw	r3,12(sp)
    8170:	d9c00215 	stw	r7,8(sp)
    8174:	d9800115 	stw	r6,4(sp)
    8178:	00070640 	call	7064 <__udivsi3>
    817c:	100b883a 	mov	r5,r2
    8180:	a009883a 	mov	r4,r20
    8184:	d8800015 	stw	r2,0(sp)
    8188:	00071240 	call	7124 <__mulsi3>
    818c:	b009883a 	mov	r4,r22
    8190:	b80b883a 	mov	r5,r23
    8194:	102d883a 	mov	r22,r2
    8198:	00070c80 	call	70c8 <__umodsi3>
    819c:	d8c00317 	ldw	r3,12(sp)
    81a0:	1004943a 	slli	r2,r2,16
    81a4:	da000017 	ldw	r8,0(sp)
    81a8:	18ffffcc 	andi	r3,r3,65535
    81ac:	1886b03a 	or	r3,r3,r2
    81b0:	d9800117 	ldw	r6,4(sp)
    81b4:	d9c00217 	ldw	r7,8(sp)
    81b8:	1d80d736 	bltu	r3,r22,8518 <__divdf3+0x794>
    81bc:	3028943a 	slli	r20,r6,16
    81c0:	e009883a 	mov	r4,fp
    81c4:	d9c00215 	stw	r7,8(sp)
    81c8:	a228b03a 	or	r20,r20,r8
    81cc:	a1bfffcc 	andi	r6,r20,65535
    81d0:	a02ed43a 	srli	r23,r20,16
    81d4:	300b883a 	mov	r5,r6
    81d8:	1dadc83a 	sub	r22,r3,r22
    81dc:	d9800115 	stw	r6,4(sp)
    81e0:	00071240 	call	7124 <__mulsi3>
    81e4:	e00b883a 	mov	r5,fp
    81e8:	b809883a 	mov	r4,r23
    81ec:	d8800015 	stw	r2,0(sp)
    81f0:	00071240 	call	7124 <__mulsi3>
    81f4:	8009883a 	mov	r4,r16
    81f8:	b80b883a 	mov	r5,r23
    81fc:	1039883a 	mov	fp,r2
    8200:	00071240 	call	7124 <__mulsi3>
    8204:	d9800117 	ldw	r6,4(sp)
    8208:	8009883a 	mov	r4,r16
    820c:	1021883a 	mov	r16,r2
    8210:	300b883a 	mov	r5,r6
    8214:	00071240 	call	7124 <__mulsi3>
    8218:	da000017 	ldw	r8,0(sp)
    821c:	1705883a 	add	r2,r2,fp
    8220:	d9c00217 	ldw	r7,8(sp)
    8224:	4006d43a 	srli	r3,r8,16
    8228:	1887883a 	add	r3,r3,r2
    822c:	1f00022e 	bgeu	r3,fp,8238 <__divdf3+0x4b4>
    8230:	00800074 	movhi	r2,1
    8234:	80a1883a 	add	r16,r16,r2
    8238:	1808d43a 	srli	r4,r3,16
    823c:	1806943a 	slli	r3,r3,16
    8240:	45ffffcc 	andi	r23,r8,65535
    8244:	2409883a 	add	r4,r4,r16
    8248:	1dc7883a 	add	r3,r3,r23
    824c:	b1008f36 	bltu	r22,r4,848c <__divdf3+0x708>
    8250:	b1008d26 	beq	r22,r4,8488 <__divdf3+0x704>
    8254:	a5000054 	ori	r20,r20,1
    8258:	8980ffc4 	addi	r6,r17,1023
    825c:	01805c0e 	bge	zero,r6,83d0 <__divdf3+0x64c>
    8260:	a08001cc 	andi	r2,r20,7
    8264:	1000e01e 	bne	r2,zero,85e8 <__divdf3+0x864>
    8268:	a008d0fa 	srli	r4,r20,3
    826c:	9080402c 	andhi	r2,r18,256
    8270:	10000426 	beq	r2,zero,8284 <__divdf3+0x500>
    8274:	00bfc034 	movhi	r2,65280
    8278:	10bfffc4 	addi	r2,r2,-1
    827c:	90a4703a 	and	r18,r18,r2
    8280:	89810004 	addi	r6,r17,1024
    8284:	3081ffc8 	cmpgei	r2,r6,2047
    8288:	103f211e 	bne	r2,zero,7f10 <__divdf3+0x18c>
    828c:	9028977a 	slli	r20,r18,29
    8290:	900a927a 	slli	r5,r18,9
    8294:	30c1ffcc 	andi	r3,r6,2047
    8298:	a128b03a 	or	r20,r20,r4
    829c:	280ad33a 	srli	r5,r5,12
    82a0:	003f0a06 	br	7ecc <__divdf3+0x148>
    82a4:	add2b03a 	or	r9,r21,r23
    82a8:	48003e26 	beq	r9,zero,83a4 <__divdf3+0x620>
    82ac:	a8008f26 	beq	r21,zero,84ec <__divdf3+0x768>
    82b0:	a809883a 	mov	r4,r21
    82b4:	0009e280 	call	9e28 <__clzsi2>
    82b8:	117ffd44 	addi	r5,r2,-11
    82bc:	01000744 	movi	r4,29
    82c0:	127ffe04 	addi	r9,r2,-8
    82c4:	2149c83a 	sub	r4,r4,r5
    82c8:	aa46983a 	sll	r3,r21,r9
    82cc:	b908d83a 	srl	r4,r23,r4
    82d0:	ba52983a 	sll	r9,r23,r9
    82d4:	20eab03a 	or	r21,r4,r3
    82d8:	1451883a 	add	r8,r2,r17
    82dc:	4440fcc4 	addi	r17,r8,1011
    82e0:	0007883a 	mov	r3,zero
    82e4:	003ed706 	br	7e44 <__divdf3+0xc0>
    82e8:	8124b03a 	or	r18,r16,r4
    82ec:	2027883a 	mov	r19,r4
    82f0:	90002726 	beq	r18,zero,8390 <__divdf3+0x60c>
    82f4:	80007326 	beq	r16,zero,84c4 <__divdf3+0x740>
    82f8:	8009883a 	mov	r4,r16
    82fc:	0009e280 	call	9e28 <__clzsi2>
    8300:	113ffd44 	addi	r4,r2,-11
    8304:	00c00744 	movi	r3,29
    8308:	14bffe04 	addi	r18,r2,-8
    830c:	1907c83a 	sub	r3,r3,r4
    8310:	848a983a 	sll	r5,r16,r18
    8314:	98c6d83a 	srl	r3,r19,r3
    8318:	9ca8983a 	sll	r20,r19,r18
    831c:	1964b03a 	or	r18,r3,r5
    8320:	023f0344 	movi	r8,-1011
    8324:	40a3c83a 	sub	r17,r8,r2
    8328:	0021883a 	mov	r16,zero
    832c:	0039883a 	mov	fp,zero
    8330:	003eb306 	br	7e00 <__divdf3+0x7c>
    8334:	8124b03a 	or	r18,r16,r4
    8338:	9000101e 	bne	r18,zero,837c <__divdf3+0x5f8>
    833c:	0029883a 	mov	r20,zero
    8340:	04000204 	movi	r16,8
    8344:	0441ffc4 	movi	r17,2047
    8348:	07000084 	movi	fp,2
    834c:	003eac06 	br	7e00 <__divdf3+0x7c>
    8350:	add2b03a 	or	r9,r21,r23
    8354:	8c7e0044 	addi	r17,r17,-2047
    8358:	4800041e 	bne	r9,zero,836c <__divdf3+0x5e8>
    835c:	84000094 	ori	r16,r16,2
    8360:	002b883a 	mov	r21,zero
    8364:	00c00084 	movi	r3,2
    8368:	003eb606 	br	7e44 <__divdf3+0xc0>
    836c:	840000d4 	ori	r16,r16,3
    8370:	b813883a 	mov	r9,r23
    8374:	00c000c4 	movi	r3,3
    8378:	003eb206 	br	7e44 <__divdf3+0xc0>
    837c:	8025883a 	mov	r18,r16
    8380:	0441ffc4 	movi	r17,2047
    8384:	04000304 	movi	r16,12
    8388:	070000c4 	movi	fp,3
    838c:	003e9c06 	br	7e00 <__divdf3+0x7c>
    8390:	0029883a 	mov	r20,zero
    8394:	04000104 	movi	r16,4
    8398:	0023883a 	mov	r17,zero
    839c:	07000044 	movi	fp,1
    83a0:	003e9706 	br	7e00 <__divdf3+0x7c>
    83a4:	84000054 	ori	r16,r16,1
    83a8:	002b883a 	mov	r21,zero
    83ac:	00c00044 	movi	r3,1
    83b0:	003ea406 	br	7e44 <__divdf3+0xc0>
    83b4:	01400434 	movhi	r5,16
    83b8:	000f883a 	mov	r7,zero
    83bc:	297fffc4 	addi	r5,r5,-1
    83c0:	053fffc4 	movi	r20,-1
    83c4:	00c1ffc4 	movi	r3,2047
    83c8:	003ec006 	br	7ecc <__divdf3+0x148>
    83cc:	053fffc4 	movi	r20,-1
    83d0:	01400044 	movi	r5,1
    83d4:	298bc83a 	sub	r5,r5,r6
    83d8:	28800e48 	cmpgei	r2,r5,57
    83dc:	103eb81e 	bne	r2,zero,7ec0 <__divdf3+0x13c>
    83e0:	28800808 	cmpgei	r2,r5,32
    83e4:	1000651e 	bne	r2,zero,857c <__divdf3+0x7f8>
    83e8:	8a010784 	addi	r8,r17,1054
    83ec:	9204983a 	sll	r2,r18,r8
    83f0:	a146d83a 	srl	r3,r20,r5
    83f4:	a210983a 	sll	r8,r20,r8
    83f8:	914ad83a 	srl	r5,r18,r5
    83fc:	10e8b03a 	or	r20,r2,r3
    8400:	4010c03a 	cmpne	r8,r8,zero
    8404:	a228b03a 	or	r20,r20,r8
    8408:	a08001cc 	andi	r2,r20,7
    840c:	10000726 	beq	r2,zero,842c <__divdf3+0x6a8>
    8410:	a08003cc 	andi	r2,r20,15
    8414:	10800120 	cmpeqi	r2,r2,4
    8418:	1000041e 	bne	r2,zero,842c <__divdf3+0x6a8>
    841c:	a0800104 	addi	r2,r20,4
    8420:	1529803a 	cmpltu	r20,r2,r20
    8424:	2d0b883a 	add	r5,r5,r20
    8428:	1029883a 	mov	r20,r2
    842c:	2880202c 	andhi	r2,r5,128
    8430:	10008c26 	beq	r2,zero,8664 <__divdf3+0x8e0>
    8434:	00c00044 	movi	r3,1
    8438:	000b883a 	mov	r5,zero
    843c:	0029883a 	mov	r20,zero
    8440:	003ea206 	br	7ecc <__divdf3+0x148>
    8444:	9080022c 	andhi	r2,r18,8
    8448:	10000926 	beq	r2,zero,8470 <__divdf3+0x6ec>
    844c:	a880022c 	andhi	r2,r21,8
    8450:	1000071e 	bne	r2,zero,8470 <__divdf3+0x6ec>
    8454:	00800434 	movhi	r2,16
    8458:	a9400234 	orhi	r5,r21,8
    845c:	10bfffc4 	addi	r2,r2,-1
    8460:	288a703a 	and	r5,r5,r2
    8464:	980f883a 	mov	r7,r19
    8468:	4829883a 	mov	r20,r9
    846c:	003fd506 	br	83c4 <__divdf3+0x640>
    8470:	00800434 	movhi	r2,16
    8474:	91400234 	orhi	r5,r18,8
    8478:	10bfffc4 	addi	r2,r2,-1
    847c:	288a703a 	and	r5,r5,r2
    8480:	b00f883a 	mov	r7,r22
    8484:	003fcf06 	br	83c4 <__divdf3+0x640>
    8488:	183f7326 	beq	r3,zero,8258 <__divdf3+0x4d4>
    848c:	adad883a 	add	r22,r21,r22
    8490:	a0bfffc4 	addi	r2,r20,-1
    8494:	b5404a36 	bltu	r22,r21,85c0 <__divdf3+0x83c>
    8498:	b1006636 	bltu	r22,r4,8634 <__divdf3+0x8b0>
    849c:	b1007a26 	beq	r22,r4,8688 <__divdf3+0x904>
    84a0:	1029883a 	mov	r20,r2
    84a4:	003f6b06 	br	8254 <__divdf3+0x4d0>
    84a8:	a27ea436 	bltu	r20,r9,7f3c <__divdf3+0x1b8>
    84ac:	903897fa 	slli	fp,r18,31
    84b0:	a004d07a 	srli	r2,r20,1
    84b4:	9020d07a 	srli	r16,r18,1
    84b8:	a02c97fa 	slli	r22,r20,31
    84bc:	e0b8b03a 	or	fp,fp,r2
    84c0:	003ea206 	br	7f4c <__divdf3+0x1c8>
    84c4:	0009e280 	call	9e28 <__clzsi2>
    84c8:	11000544 	addi	r4,r2,21
    84cc:	20c00748 	cmpgei	r3,r4,29
    84d0:	100b883a 	mov	r5,r2
    84d4:	10800804 	addi	r2,r2,32
    84d8:	183f8a26 	beq	r3,zero,8304 <__divdf3+0x580>
    84dc:	297ffe04 	addi	r5,r5,-8
    84e0:	a164983a 	sll	r18,r20,r5
    84e4:	0029883a 	mov	r20,zero
    84e8:	003f8d06 	br	8320 <__divdf3+0x59c>
    84ec:	b809883a 	mov	r4,r23
    84f0:	0009e280 	call	9e28 <__clzsi2>
    84f4:	11400544 	addi	r5,r2,21
    84f8:	29000748 	cmpgei	r4,r5,29
    84fc:	1007883a 	mov	r3,r2
    8500:	10800804 	addi	r2,r2,32
    8504:	203f6d26 	beq	r4,zero,82bc <__divdf3+0x538>
    8508:	18fffe04 	addi	r3,r3,-8
    850c:	b8ea983a 	sll	r21,r23,r3
    8510:	0013883a 	mov	r9,zero
    8514:	003f7006 	br	82d8 <__divdf3+0x554>
    8518:	1d47883a 	add	r3,r3,r21
    851c:	40bfffc4 	addi	r2,r8,-1
    8520:	1d403936 	bltu	r3,r21,8608 <__divdf3+0x884>
    8524:	1d80382e 	bgeu	r3,r22,8608 <__divdf3+0x884>
    8528:	423fff84 	addi	r8,r8,-2
    852c:	1d47883a 	add	r3,r3,r21
    8530:	003f2206 	br	81bc <__divdf3+0x438>
    8534:	2549883a 	add	r4,r4,r21
    8538:	30bfffc4 	addi	r2,r6,-1
    853c:	25403436 	bltu	r4,r21,8610 <__divdf3+0x88c>
    8540:	2580332e 	bgeu	r4,r22,8610 <__divdf3+0x88c>
    8544:	31bfff84 	addi	r6,r6,-2
    8548:	2549883a 	add	r4,r4,r21
    854c:	003f0406 	br	8160 <__divdf3+0x3dc>
    8550:	a9bee91e 	bne	r21,r6,80f8 <__divdf3+0x374>
    8554:	b4fee836 	bltu	r22,r19,80f8 <__divdf3+0x374>
    8558:	003ee506 	br	80f0 <__divdf3+0x36c>
    855c:	323ead2e 	bgeu	r6,r8,8014 <__divdf3+0x290>
    8560:	18ffff84 	addi	r3,r3,-2
    8564:	354d883a 	add	r6,r6,r21
    8568:	003eab06 	br	8018 <__divdf3+0x294>
    856c:	243e912e 	bgeu	r4,r16,7fb4 <__divdf3+0x230>
    8570:	94bfff84 	addi	r18,r18,-2
    8574:	2549883a 	add	r4,r4,r21
    8578:	003e8f06 	br	7fb8 <__divdf3+0x234>
    857c:	00fff844 	movi	r3,-31
    8580:	1987c83a 	sub	r3,r3,r6
    8584:	29400820 	cmpeqi	r5,r5,32
    8588:	90c6d83a 	srl	r3,r18,r3
    858c:	2800031e 	bne	r5,zero,859c <__divdf3+0x818>
    8590:	89410f84 	addi	r5,r17,1086
    8594:	914a983a 	sll	r5,r18,r5
    8598:	a168b03a 	or	r20,r20,r5
    859c:	a028c03a 	cmpne	r20,r20,zero
    85a0:	a0e8b03a 	or	r20,r20,r3
    85a4:	a48001cc 	andi	r18,r20,7
    85a8:	90002a1e 	bne	r18,zero,8654 <__divdf3+0x8d0>
    85ac:	000b883a 	mov	r5,zero
    85b0:	a028d0fa 	srli	r20,r20,3
    85b4:	0007883a 	mov	r3,zero
    85b8:	a4a8b03a 	or	r20,r20,r18
    85bc:	003e4306 	br	7ecc <__divdf3+0x148>
    85c0:	1029883a 	mov	r20,r2
    85c4:	b13f231e 	bne	r22,r4,8254 <__divdf3+0x4d0>
    85c8:	1cff221e 	bne	r3,r19,8254 <__divdf3+0x4d0>
    85cc:	003f2206 	br	8258 <__divdf3+0x4d4>
    85d0:	8980ffc4 	addi	r6,r17,1023
    85d4:	01bf7d0e 	bge	zero,r6,83cc <__divdf3+0x648>
    85d8:	0009883a 	mov	r4,zero
    85dc:	05000044 	movi	r20,1
    85e0:	9525883a 	add	r18,r18,r20
    85e4:	003f2106 	br	826c <__divdf3+0x4e8>
    85e8:	a08003cc 	andi	r2,r20,15
    85ec:	10800118 	cmpnei	r2,r2,4
    85f0:	103f1d26 	beq	r2,zero,8268 <__divdf3+0x4e4>
    85f4:	a1000104 	addi	r4,r20,4
    85f8:	00bffec4 	movi	r2,-5
    85fc:	2008d0fa 	srli	r4,r4,3
    8600:	1529803a 	cmpltu	r20,r2,r20
    8604:	003ff606 	br	85e0 <__divdf3+0x85c>
    8608:	1011883a 	mov	r8,r2
    860c:	003eeb06 	br	81bc <__divdf3+0x438>
    8610:	100d883a 	mov	r6,r2
    8614:	003ed206 	br	8160 <__divdf3+0x3dc>
    8618:	b0feb72e 	bgeu	r22,r3,80f8 <__divdf3+0x374>
    861c:	b4ed883a 	add	r22,r22,r19
    8620:	b4c9803a 	cmpltu	r4,r22,r19
    8624:	2549883a 	add	r4,r4,r21
    8628:	94bfff84 	addi	r18,r18,-2
    862c:	310d883a 	add	r6,r6,r4
    8630:	003eb206 	br	80fc <__divdf3+0x378>
    8634:	9cc5883a 	add	r2,r19,r19
    8638:	14e7803a 	cmpltu	r19,r2,r19
    863c:	9d6b883a 	add	r21,r19,r21
    8640:	b56d883a 	add	r22,r22,r21
    8644:	a53fff84 	addi	r20,r20,-2
    8648:	1027883a 	mov	r19,r2
    864c:	b13fde26 	beq	r22,r4,85c8 <__divdf3+0x844>
    8650:	003f0006 	br	8254 <__divdf3+0x4d0>
    8654:	a08003cc 	andi	r2,r20,15
    8658:	10800118 	cmpnei	r2,r2,4
    865c:	000b883a 	mov	r5,zero
    8660:	103f6e1e 	bne	r2,zero,841c <__divdf3+0x698>
    8664:	2804927a 	slli	r2,r5,9
    8668:	2824977a 	slli	r18,r5,29
    866c:	100ad33a 	srli	r5,r2,12
    8670:	003fcf06 	br	85b0 <__divdf3+0x82c>
    8674:	00800434 	movhi	r2,16
    8678:	91400234 	orhi	r5,r18,8
    867c:	10bfffc4 	addi	r2,r2,-1
    8680:	288a703a 	and	r5,r5,r2
    8684:	003f4f06 	br	83c4 <__divdf3+0x640>
    8688:	98ffea36 	bltu	r19,r3,8634 <__divdf3+0x8b0>
    868c:	1029883a 	mov	r20,r2
    8690:	1cfef01e 	bne	r3,r19,8254 <__divdf3+0x4d0>
    8694:	003ef006 	br	8258 <__divdf3+0x4d4>

00008698 <__eqdf2>:
    8698:	2810d53a 	srli	r8,r5,20
    869c:	3806d53a 	srli	r3,r7,20
    86a0:	00800434 	movhi	r2,16
    86a4:	4201ffcc 	andi	r8,r8,2047
    86a8:	10bfffc4 	addi	r2,r2,-1
    86ac:	4241ffd8 	cmpnei	r9,r8,2047
    86b0:	2814d7fa 	srli	r10,r5,31
    86b4:	3816d7fa 	srli	r11,r7,31
    86b8:	288a703a 	and	r5,r5,r2
    86bc:	388e703a 	and	r7,r7,r2
    86c0:	1881ffcc 	andi	r2,r3,2047
    86c4:	48000626 	beq	r9,zero,86e0 <__eqdf2+0x48>
    86c8:	10c1ffe0 	cmpeqi	r3,r2,2047
    86cc:	1800021e 	bne	r3,zero,86d8 <__eqdf2+0x40>
    86d0:	4080011e 	bne	r8,r2,86d8 <__eqdf2+0x40>
    86d4:	29c00826 	beq	r5,r7,86f8 <__eqdf2+0x60>
    86d8:	00800044 	movi	r2,1
    86dc:	f800283a 	ret
    86e0:	2906b03a 	or	r3,r5,r4
    86e4:	183ffc1e 	bne	r3,zero,86d8 <__eqdf2+0x40>
    86e8:	1081ffd8 	cmpnei	r2,r2,2047
    86ec:	103ffa1e 	bne	r2,zero,86d8 <__eqdf2+0x40>
    86f0:	398eb03a 	or	r7,r7,r6
    86f4:	383ff81e 	bne	r7,zero,86d8 <__eqdf2+0x40>
    86f8:	21bff71e 	bne	r4,r6,86d8 <__eqdf2+0x40>
    86fc:	52c00426 	beq	r10,r11,8710 <__eqdf2+0x78>
    8700:	403ff51e 	bne	r8,zero,86d8 <__eqdf2+0x40>
    8704:	290ab03a 	or	r5,r5,r4
    8708:	2804c03a 	cmpne	r2,r5,zero
    870c:	f800283a 	ret
    8710:	0005883a 	mov	r2,zero
    8714:	f800283a 	ret

00008718 <__gedf2>:
    8718:	2810d53a 	srli	r8,r5,20
    871c:	3812d53a 	srli	r9,r7,20
    8720:	00c00434 	movhi	r3,16
    8724:	4201ffcc 	andi	r8,r8,2047
    8728:	18ffffc4 	addi	r3,r3,-1
    872c:	4281ffd8 	cmpnei	r10,r8,2047
    8730:	2816d7fa 	srli	r11,r5,31
    8734:	3804d7fa 	srli	r2,r7,31
    8738:	28ca703a 	and	r5,r5,r3
    873c:	38ce703a 	and	r7,r7,r3
    8740:	48c1ffcc 	andi	r3,r9,2047
    8744:	50000a26 	beq	r10,zero,8770 <__gedf2+0x58>
    8748:	1a41ffd8 	cmpnei	r9,r3,2047
    874c:	48000c26 	beq	r9,zero,8780 <__gedf2+0x68>
    8750:	4000171e 	bne	r8,zero,87b0 <__gedf2+0x98>
    8754:	2912b03a 	or	r9,r5,r4
    8758:	1800121e 	bne	r3,zero,87a4 <__gedf2+0x8c>
    875c:	3994b03a 	or	r10,r7,r6
    8760:	5000101e 	bne	r10,zero,87a4 <__gedf2+0x8c>
    8764:	48000a1e 	bne	r9,zero,8790 <__gedf2+0x78>
    8768:	0005883a 	mov	r2,zero
    876c:	f800283a 	ret
    8770:	2912b03a 	or	r9,r5,r4
    8774:	48001d1e 	bne	r9,zero,87ec <__gedf2+0xd4>
    8778:	1a41ffe0 	cmpeqi	r9,r3,2047
    877c:	48000c26 	beq	r9,zero,87b0 <__gedf2+0x98>
    8780:	3992b03a 	or	r9,r7,r6
    8784:	4800191e 	bne	r9,zero,87ec <__gedf2+0xd4>
    8788:	40000526 	beq	r8,zero,87a0 <__gedf2+0x88>
    878c:	58800c26 	beq	r11,r2,87c0 <__gedf2+0xa8>
    8790:	00800044 	movi	r2,1
    8794:	58000526 	beq	r11,zero,87ac <__gedf2+0x94>
    8798:	00bfffc4 	movi	r2,-1
    879c:	f800283a 	ret
    87a0:	2912b03a 	or	r9,r5,r4
    87a4:	483ff91e 	bne	r9,zero,878c <__gedf2+0x74>
    87a8:	103ffb26 	beq	r2,zero,8798 <__gedf2+0x80>
    87ac:	f800283a 	ret
    87b0:	183ff61e 	bne	r3,zero,878c <__gedf2+0x74>
    87b4:	3992b03a 	or	r9,r7,r6
    87b8:	483ff41e 	bne	r9,zero,878c <__gedf2+0x74>
    87bc:	003ff406 	br	8790 <__gedf2+0x78>
    87c0:	1a000716 	blt	r3,r8,87e0 <__gedf2+0xc8>
    87c4:	40fff816 	blt	r8,r3,87a8 <__gedf2+0x90>
    87c8:	397ff136 	bltu	r7,r5,8790 <__gedf2+0x78>
    87cc:	29c00926 	beq	r5,r7,87f4 <__gedf2+0xdc>
    87d0:	29ffe52e 	bgeu	r5,r7,8768 <__gedf2+0x50>
    87d4:	583ff026 	beq	r11,zero,8798 <__gedf2+0x80>
    87d8:	5805883a 	mov	r2,r11
    87dc:	f800283a 	ret
    87e0:	103fed1e 	bne	r2,zero,8798 <__gedf2+0x80>
    87e4:	00800044 	movi	r2,1
    87e8:	f800283a 	ret
    87ec:	00bfff84 	movi	r2,-2
    87f0:	f800283a 	ret
    87f4:	313fe636 	bltu	r6,r4,8790 <__gedf2+0x78>
    87f8:	21bfdb2e 	bgeu	r4,r6,8768 <__gedf2+0x50>
    87fc:	003ff506 	br	87d4 <__gedf2+0xbc>

00008800 <__ledf2>:
    8800:	2810d53a 	srli	r8,r5,20
    8804:	3812d53a 	srli	r9,r7,20
    8808:	00c00434 	movhi	r3,16
    880c:	4201ffcc 	andi	r8,r8,2047
    8810:	18ffffc4 	addi	r3,r3,-1
    8814:	4281ffd8 	cmpnei	r10,r8,2047
    8818:	2816d7fa 	srli	r11,r5,31
    881c:	3804d7fa 	srli	r2,r7,31
    8820:	28ca703a 	and	r5,r5,r3
    8824:	38ce703a 	and	r7,r7,r3
    8828:	48c1ffcc 	andi	r3,r9,2047
    882c:	50000a26 	beq	r10,zero,8858 <__ledf2+0x58>
    8830:	1a41ffd8 	cmpnei	r9,r3,2047
    8834:	48000c26 	beq	r9,zero,8868 <__ledf2+0x68>
    8838:	4000191e 	bne	r8,zero,88a0 <__ledf2+0xa0>
    883c:	2912b03a 	or	r9,r5,r4
    8840:	18000d1e 	bne	r3,zero,8878 <__ledf2+0x78>
    8844:	3994b03a 	or	r10,r7,r6
    8848:	50000b1e 	bne	r10,zero,8878 <__ledf2+0x78>
    884c:	48000c1e 	bne	r9,zero,8880 <__ledf2+0x80>
    8850:	0005883a 	mov	r2,zero
    8854:	f800283a 	ret
    8858:	2912b03a 	or	r9,r5,r4
    885c:	48000c1e 	bne	r9,zero,8890 <__ledf2+0x90>
    8860:	1a41ffe0 	cmpeqi	r9,r3,2047
    8864:	48000e26 	beq	r9,zero,88a0 <__ledf2+0xa0>
    8868:	3992b03a 	or	r9,r7,r6
    886c:	4800081e 	bne	r9,zero,8890 <__ledf2+0x90>
    8870:	4000021e 	bne	r8,zero,887c <__ledf2+0x7c>
    8874:	2912b03a 	or	r9,r5,r4
    8878:	48000726 	beq	r9,zero,8898 <__ledf2+0x98>
    887c:	58800c26 	beq	r11,r2,88b0 <__ledf2+0xb0>
    8880:	00800044 	movi	r2,1
    8884:	58000526 	beq	r11,zero,889c <__ledf2+0x9c>
    8888:	00bfffc4 	movi	r2,-1
    888c:	f800283a 	ret
    8890:	00800084 	movi	r2,2
    8894:	f800283a 	ret
    8898:	103ffb26 	beq	r2,zero,8888 <__ledf2+0x88>
    889c:	f800283a 	ret
    88a0:	183ff61e 	bne	r3,zero,887c <__ledf2+0x7c>
    88a4:	3992b03a 	or	r9,r7,r6
    88a8:	483ff41e 	bne	r9,zero,887c <__ledf2+0x7c>
    88ac:	003ff406 	br	8880 <__ledf2+0x80>
    88b0:	1a00030e 	bge	r3,r8,88c0 <__ledf2+0xc0>
    88b4:	103ff41e 	bne	r2,zero,8888 <__ledf2+0x88>
    88b8:	00800044 	movi	r2,1
    88bc:	f800283a 	ret
    88c0:	40fff516 	blt	r8,r3,8898 <__ledf2+0x98>
    88c4:	397fee36 	bltu	r7,r5,8880 <__ledf2+0x80>
    88c8:	29c00426 	beq	r5,r7,88dc <__ledf2+0xdc>
    88cc:	29ffe02e 	bgeu	r5,r7,8850 <__ledf2+0x50>
    88d0:	583fed26 	beq	r11,zero,8888 <__ledf2+0x88>
    88d4:	5805883a 	mov	r2,r11
    88d8:	f800283a 	ret
    88dc:	313fe836 	bltu	r6,r4,8880 <__ledf2+0x80>
    88e0:	21bfdb2e 	bgeu	r4,r6,8850 <__ledf2+0x50>
    88e4:	003ffa06 	br	88d0 <__ledf2+0xd0>

000088e8 <__muldf3>:
    88e8:	2810d53a 	srli	r8,r5,20
    88ec:	defff004 	addi	sp,sp,-64
    88f0:	00800434 	movhi	r2,16
    88f4:	df000e15 	stw	fp,56(sp)
    88f8:	dd000a15 	stw	r20,40(sp)
    88fc:	dcc00915 	stw	r19,36(sp)
    8900:	dc400715 	stw	r17,28(sp)
    8904:	10bfffc4 	addi	r2,r2,-1
    8908:	dfc00f15 	stw	ra,60(sp)
    890c:	ddc00d15 	stw	r23,52(sp)
    8910:	dd800c15 	stw	r22,48(sp)
    8914:	dd400b15 	stw	r21,44(sp)
    8918:	dc800815 	stw	r18,32(sp)
    891c:	dc000615 	stw	r16,24(sp)
    8920:	4201ffcc 	andi	r8,r8,2047
    8924:	2828d7fa 	srli	r20,r5,31
    8928:	2023883a 	mov	r17,r4
    892c:	3039883a 	mov	fp,r6
    8930:	28a6703a 	and	r19,r5,r2
    8934:	40013426 	beq	r8,zero,8e08 <__muldf3+0x520>
    8938:	4081ffe0 	cmpeqi	r2,r8,2047
    893c:	1001461e 	bne	r2,zero,8e58 <__muldf3+0x570>
    8940:	980a90fa 	slli	r5,r19,3
    8944:	2026d77a 	srli	r19,r4,29
    8948:	202490fa 	slli	r18,r4,3
    894c:	423f0044 	addi	r8,r8,-1023
    8950:	9966b03a 	or	r19,r19,r5
    8954:	9cc02034 	orhi	r19,r19,128
    8958:	002b883a 	mov	r21,zero
    895c:	002d883a 	mov	r22,zero
    8960:	3804d53a 	srli	r2,r7,20
    8964:	00c00434 	movhi	r3,16
    8968:	18ffffc4 	addi	r3,r3,-1
    896c:	1081ffcc 	andi	r2,r2,2047
    8970:	382ed7fa 	srli	r23,r7,31
    8974:	38e0703a 	and	r16,r7,r3
    8978:	10011026 	beq	r2,zero,8dbc <__muldf3+0x4d4>
    897c:	10c1ffe0 	cmpeqi	r3,r2,2047
    8980:	18013c1e 	bne	r3,zero,8e74 <__muldf3+0x58c>
    8984:	e008d77a 	srli	r4,fp,29
    8988:	802090fa 	slli	r16,r16,3
    898c:	e02290fa 	slli	r17,fp,3
    8990:	10bf0044 	addi	r2,r2,-1023
    8994:	2420b03a 	or	r16,r4,r16
    8998:	84002034 	orhi	r16,r16,128
    899c:	4091883a 	add	r8,r8,r2
    89a0:	0009883a 	mov	r4,zero
    89a4:	a8800428 	cmpgeui	r2,r21,16
    89a8:	a5ccf03a 	xor	r6,r20,r23
    89ac:	41c00044 	addi	r7,r8,1
    89b0:	1000371e 	bne	r2,zero,8a90 <__muldf3+0x1a8>
    89b4:	a80490ba 	slli	r2,r21,2
    89b8:	00c00074 	movhi	r3,1
    89bc:	10c7883a 	add	r3,r2,r3
    89c0:	18a27217 	ldw	r2,-30264(r3)
    89c4:	1000683a 	jmp	r2
    89c8:	00008a90 	cmplti	zero,zero,554
    89cc:	00008a0c 	andi	zero,zero,552
    89d0:	00008a0c 	andi	zero,zero,552
    89d4:	00008a08 	cmpgei	zero,zero,552
    89d8:	00008a18 	cmpnei	zero,zero,552
    89dc:	00008a18 	cmpnei	zero,zero,552
    89e0:	00008ee8 	cmpgeui	zero,zero,571
    89e4:	00008a08 	cmpgei	zero,zero,552
    89e8:	00008a18 	cmpnei	zero,zero,552
    89ec:	00008ee8 	cmpgeui	zero,zero,571
    89f0:	00008a18 	cmpnei	zero,zero,552
    89f4:	00008a08 	cmpgei	zero,zero,552
    89f8:	00008e90 	cmplti	zero,zero,570
    89fc:	00008e90 	cmplti	zero,zero,570
    8a00:	00008e90 	cmplti	zero,zero,570
    8a04:	00008f74 	movhi	zero,573
    8a08:	b80d883a 	mov	r6,r23
    8a0c:	8027883a 	mov	r19,r16
    8a10:	8825883a 	mov	r18,r17
    8a14:	202d883a 	mov	r22,r4
    8a18:	b08000a0 	cmpeqi	r2,r22,2
    8a1c:	1000181e 	bne	r2,zero,8a80 <__muldf3+0x198>
    8a20:	b08000e0 	cmpeqi	r2,r22,3
    8a24:	1001961e 	bne	r2,zero,9080 <__muldf3+0x798>
    8a28:	b0800060 	cmpeqi	r2,r22,1
    8a2c:	1000c926 	beq	r2,zero,8d54 <__muldf3+0x46c>
    8a30:	0007883a 	mov	r3,zero
    8a34:	0027883a 	mov	r19,zero
    8a38:	0025883a 	mov	r18,zero
    8a3c:	1806953a 	slli	r3,r3,20
    8a40:	300c97fa 	slli	r6,r6,31
    8a44:	9005883a 	mov	r2,r18
    8a48:	1cc6b03a 	or	r3,r3,r19
    8a4c:	1986b03a 	or	r3,r3,r6
    8a50:	dfc00f17 	ldw	ra,60(sp)
    8a54:	df000e17 	ldw	fp,56(sp)
    8a58:	ddc00d17 	ldw	r23,52(sp)
    8a5c:	dd800c17 	ldw	r22,48(sp)
    8a60:	dd400b17 	ldw	r21,44(sp)
    8a64:	dd000a17 	ldw	r20,40(sp)
    8a68:	dcc00917 	ldw	r19,36(sp)
    8a6c:	dc800817 	ldw	r18,32(sp)
    8a70:	dc400717 	ldw	r17,28(sp)
    8a74:	dc000617 	ldw	r16,24(sp)
    8a78:	dec01004 	addi	sp,sp,64
    8a7c:	f800283a 	ret
    8a80:	00c1ffc4 	movi	r3,2047
    8a84:	0027883a 	mov	r19,zero
    8a88:	0025883a 	mov	r18,zero
    8a8c:	003feb06 	br	8a3c <__muldf3+0x154>
    8a90:	9028d43a 	srli	r20,r18,16
    8a94:	8f3fffcc 	andi	fp,r17,65535
    8a98:	957fffcc 	andi	r21,r18,65535
    8a9c:	a80b883a 	mov	r5,r21
    8aa0:	e009883a 	mov	r4,fp
    8aa4:	d9800315 	stw	r6,12(sp)
    8aa8:	da000215 	stw	r8,8(sp)
    8aac:	d9c00115 	stw	r7,4(sp)
    8ab0:	8822d43a 	srli	r17,r17,16
    8ab4:	00071240 	call	7124 <__mulsi3>
    8ab8:	e00b883a 	mov	r5,fp
    8abc:	a009883a 	mov	r4,r20
    8ac0:	102d883a 	mov	r22,r2
    8ac4:	00071240 	call	7124 <__mulsi3>
    8ac8:	880b883a 	mov	r5,r17
    8acc:	a009883a 	mov	r4,r20
    8ad0:	102f883a 	mov	r23,r2
    8ad4:	00071240 	call	7124 <__mulsi3>
    8ad8:	a80b883a 	mov	r5,r21
    8adc:	8809883a 	mov	r4,r17
    8ae0:	d8800015 	stw	r2,0(sp)
    8ae4:	00071240 	call	7124 <__mulsi3>
    8ae8:	b006d43a 	srli	r3,r22,16
    8aec:	15e5883a 	add	r18,r2,r23
    8af0:	d9c00117 	ldw	r7,4(sp)
    8af4:	1c87883a 	add	r3,r3,r18
    8af8:	da000217 	ldw	r8,8(sp)
    8afc:	d9800317 	ldw	r6,12(sp)
    8b00:	1dc0042e 	bgeu	r3,r23,8b14 <__muldf3+0x22c>
    8b04:	d9000017 	ldw	r4,0(sp)
    8b08:	00800074 	movhi	r2,1
    8b0c:	2085883a 	add	r2,r4,r2
    8b10:	d8800015 	stw	r2,0(sp)
    8b14:	1804943a 	slli	r2,r3,16
    8b18:	85ffffcc 	andi	r23,r16,65535
    8b1c:	b5bfffcc 	andi	r22,r22,65535
    8b20:	1585883a 	add	r2,r2,r22
    8b24:	a80b883a 	mov	r5,r21
    8b28:	b809883a 	mov	r4,r23
    8b2c:	1824d43a 	srli	r18,r3,16
    8b30:	d9800515 	stw	r6,20(sp)
    8b34:	da000415 	stw	r8,16(sp)
    8b38:	d9c00315 	stw	r7,12(sp)
    8b3c:	8020d43a 	srli	r16,r16,16
    8b40:	d8800115 	stw	r2,4(sp)
    8b44:	00071240 	call	7124 <__mulsi3>
    8b48:	a009883a 	mov	r4,r20
    8b4c:	b80b883a 	mov	r5,r23
    8b50:	d8800215 	stw	r2,8(sp)
    8b54:	00071240 	call	7124 <__mulsi3>
    8b58:	a009883a 	mov	r4,r20
    8b5c:	800b883a 	mov	r5,r16
    8b60:	102d883a 	mov	r22,r2
    8b64:	00071240 	call	7124 <__mulsi3>
    8b68:	a80b883a 	mov	r5,r21
    8b6c:	8009883a 	mov	r4,r16
    8b70:	1029883a 	mov	r20,r2
    8b74:	00071240 	call	7124 <__mulsi3>
    8b78:	da800217 	ldw	r10,8(sp)
    8b7c:	1585883a 	add	r2,r2,r22
    8b80:	d9c00317 	ldw	r7,12(sp)
    8b84:	5006d43a 	srli	r3,r10,16
    8b88:	da000417 	ldw	r8,16(sp)
    8b8c:	d9800517 	ldw	r6,20(sp)
    8b90:	1887883a 	add	r3,r3,r2
    8b94:	1d80022e 	bgeu	r3,r22,8ba0 <__muldf3+0x2b8>
    8b98:	00800074 	movhi	r2,1
    8b9c:	a0a9883a 	add	r20,r20,r2
    8ba0:	1804d43a 	srli	r2,r3,16
    8ba4:	1806943a 	slli	r3,r3,16
    8ba8:	982cd43a 	srli	r22,r19,16
    8bac:	9d7fffcc 	andi	r21,r19,65535
    8bb0:	e009883a 	mov	r4,fp
    8bb4:	54ffffcc 	andi	r19,r10,65535
    8bb8:	a80b883a 	mov	r5,r21
    8bbc:	1ce7883a 	add	r19,r3,r19
    8bc0:	d9800515 	stw	r6,20(sp)
    8bc4:	da000415 	stw	r8,16(sp)
    8bc8:	d9c00315 	stw	r7,12(sp)
    8bcc:	1529883a 	add	r20,r2,r20
    8bd0:	00071240 	call	7124 <__mulsi3>
    8bd4:	e00b883a 	mov	r5,fp
    8bd8:	b009883a 	mov	r4,r22
    8bdc:	d8800215 	stw	r2,8(sp)
    8be0:	00071240 	call	7124 <__mulsi3>
    8be4:	8809883a 	mov	r4,r17
    8be8:	b00b883a 	mov	r5,r22
    8bec:	1039883a 	mov	fp,r2
    8bf0:	00071240 	call	7124 <__mulsi3>
    8bf4:	8809883a 	mov	r4,r17
    8bf8:	a80b883a 	mov	r5,r21
    8bfc:	1023883a 	mov	r17,r2
    8c00:	00071240 	call	7124 <__mulsi3>
    8c04:	d8c00217 	ldw	r3,8(sp)
    8c08:	1705883a 	add	r2,r2,fp
    8c0c:	d9c00317 	ldw	r7,12(sp)
    8c10:	1808d43a 	srli	r4,r3,16
    8c14:	da000417 	ldw	r8,16(sp)
    8c18:	d9800517 	ldw	r6,20(sp)
    8c1c:	2089883a 	add	r4,r4,r2
    8c20:	94e5883a 	add	r18,r18,r19
    8c24:	2700022e 	bgeu	r4,fp,8c30 <__muldf3+0x348>
    8c28:	00800074 	movhi	r2,1
    8c2c:	88a3883a 	add	r17,r17,r2
    8c30:	2004d43a 	srli	r2,r4,16
    8c34:	2038943a 	slli	fp,r4,16
    8c38:	18ffffcc 	andi	r3,r3,65535
    8c3c:	b809883a 	mov	r4,r23
    8c40:	a80b883a 	mov	r5,r21
    8c44:	d9800415 	stw	r6,16(sp)
    8c48:	da000315 	stw	r8,12(sp)
    8c4c:	d9c00215 	stw	r7,8(sp)
    8c50:	e0f9883a 	add	fp,fp,r3
    8c54:	1463883a 	add	r17,r2,r17
    8c58:	00071240 	call	7124 <__mulsi3>
    8c5c:	b80b883a 	mov	r5,r23
    8c60:	b009883a 	mov	r4,r22
    8c64:	102f883a 	mov	r23,r2
    8c68:	00071240 	call	7124 <__mulsi3>
    8c6c:	b00b883a 	mov	r5,r22
    8c70:	8009883a 	mov	r4,r16
    8c74:	102d883a 	mov	r22,r2
    8c78:	00071240 	call	7124 <__mulsi3>
    8c7c:	a80b883a 	mov	r5,r21
    8c80:	8009883a 	mov	r4,r16
    8c84:	1021883a 	mov	r16,r2
    8c88:	00071240 	call	7124 <__mulsi3>
    8c8c:	b80ad43a 	srli	r5,r23,16
    8c90:	1585883a 	add	r2,r2,r22
    8c94:	d9c00217 	ldw	r7,8(sp)
    8c98:	288b883a 	add	r5,r5,r2
    8c9c:	da000317 	ldw	r8,12(sp)
    8ca0:	d9800417 	ldw	r6,16(sp)
    8ca4:	2d80022e 	bgeu	r5,r22,8cb0 <__muldf3+0x3c8>
    8ca8:	00800074 	movhi	r2,1
    8cac:	80a1883a 	add	r16,r16,r2
    8cb0:	2806943a 	slli	r3,r5,16
    8cb4:	d8800017 	ldw	r2,0(sp)
    8cb8:	bdffffcc 	andi	r23,r23,65535
    8cbc:	1dc7883a 	add	r3,r3,r23
    8cc0:	90ab883a 	add	r21,r18,r2
    8cc4:	acd5803a 	cmpltu	r10,r21,r19
    8cc8:	1d07883a 	add	r3,r3,r20
    8ccc:	af2b883a 	add	r21,r21,fp
    8cd0:	1a97883a 	add	r11,r3,r10
    8cd4:	af09803a 	cmpltu	r4,r21,fp
    8cd8:	2826d43a 	srli	r19,r5,16
    8cdc:	5c53883a 	add	r9,r11,r17
    8ce0:	4905883a 	add	r2,r9,r4
    8ce4:	1d07803a 	cmpltu	r3,r3,r20
    8ce8:	5a95803a 	cmpltu	r10,r11,r10
    8cec:	1a86b03a 	or	r3,r3,r10
    8cf0:	1109803a 	cmpltu	r4,r2,r4
    8cf4:	4c53803a 	cmpltu	r9,r9,r17
    8cf8:	1ce7883a 	add	r19,r3,r19
    8cfc:	4908b03a 	or	r4,r9,r4
    8d00:	a824927a 	slli	r18,r21,9
    8d04:	d8c00117 	ldw	r3,4(sp)
    8d08:	9927883a 	add	r19,r19,r4
    8d0c:	9c27883a 	add	r19,r19,r16
    8d10:	9826927a 	slli	r19,r19,9
    8d14:	a82ad5fa 	srli	r21,r21,23
    8d18:	100ad5fa 	srli	r5,r2,23
    8d1c:	90e4b03a 	or	r18,r18,r3
    8d20:	1004927a 	slli	r2,r2,9
    8d24:	9024c03a 	cmpne	r18,r18,zero
    8d28:	9564b03a 	or	r18,r18,r21
    8d2c:	98c0402c 	andhi	r3,r19,256
    8d30:	90a4b03a 	or	r18,r18,r2
    8d34:	9966b03a 	or	r19,r19,r5
    8d38:	1800b626 	beq	r3,zero,9014 <__muldf3+0x72c>
    8d3c:	9006d07a 	srli	r3,r18,1
    8d40:	980497fa 	slli	r2,r19,31
    8d44:	9480004c 	andi	r18,r18,1
    8d48:	9826d07a 	srli	r19,r19,1
    8d4c:	1c86b03a 	or	r3,r3,r18
    8d50:	18a4b03a 	or	r18,r3,r2
    8d54:	3900ffc4 	addi	r4,r7,1023
    8d58:	0100690e 	bge	zero,r4,8f00 <__muldf3+0x618>
    8d5c:	908001cc 	andi	r2,r18,7
    8d60:	10000726 	beq	r2,zero,8d80 <__muldf3+0x498>
    8d64:	908003cc 	andi	r2,r18,15
    8d68:	10800120 	cmpeqi	r2,r2,4
    8d6c:	1000041e 	bne	r2,zero,8d80 <__muldf3+0x498>
    8d70:	90800104 	addi	r2,r18,4
    8d74:	14a5803a 	cmpltu	r18,r2,r18
    8d78:	9ca7883a 	add	r19,r19,r18
    8d7c:	1025883a 	mov	r18,r2
    8d80:	9880402c 	andhi	r2,r19,256
    8d84:	10000426 	beq	r2,zero,8d98 <__muldf3+0x4b0>
    8d88:	00bfc034 	movhi	r2,65280
    8d8c:	10bfffc4 	addi	r2,r2,-1
    8d90:	98a6703a 	and	r19,r19,r2
    8d94:	39010004 	addi	r4,r7,1024
    8d98:	2081ffc8 	cmpgei	r2,r4,2047
    8d9c:	103f381e 	bne	r2,zero,8a80 <__muldf3+0x198>
    8da0:	9804977a 	slli	r2,r19,29
    8da4:	9024d0fa 	srli	r18,r18,3
    8da8:	9826927a 	slli	r19,r19,9
    8dac:	20c1ffcc 	andi	r3,r4,2047
    8db0:	14a4b03a 	or	r18,r2,r18
    8db4:	9826d33a 	srli	r19,r19,12
    8db8:	003f2006 	br	8a3c <__muldf3+0x154>
    8dbc:	8722b03a 	or	r17,r16,fp
    8dc0:	88004526 	beq	r17,zero,8ed8 <__muldf3+0x5f0>
    8dc4:	da000015 	stw	r8,0(sp)
    8dc8:	80008626 	beq	r16,zero,8fe4 <__muldf3+0x6fc>
    8dcc:	8009883a 	mov	r4,r16
    8dd0:	0009e280 	call	9e28 <__clzsi2>
    8dd4:	da000017 	ldw	r8,0(sp)
    8dd8:	117ffd44 	addi	r5,r2,-11
    8ddc:	01000744 	movi	r4,29
    8de0:	147ffe04 	addi	r17,r2,-8
    8de4:	2149c83a 	sub	r4,r4,r5
    8de8:	8460983a 	sll	r16,r16,r17
    8dec:	e108d83a 	srl	r4,fp,r4
    8df0:	e462983a 	sll	r17,fp,r17
    8df4:	2420b03a 	or	r16,r4,r16
    8df8:	4091c83a 	sub	r8,r8,r2
    8dfc:	423f0344 	addi	r8,r8,-1011
    8e00:	0009883a 	mov	r4,zero
    8e04:	003ee706 	br	89a4 <__muldf3+0xbc>
    8e08:	9924b03a 	or	r18,r19,r4
    8e0c:	90002d26 	beq	r18,zero,8ec4 <__muldf3+0x5dc>
    8e10:	d9c00015 	stw	r7,0(sp)
    8e14:	98006826 	beq	r19,zero,8fb8 <__muldf3+0x6d0>
    8e18:	9809883a 	mov	r4,r19
    8e1c:	0009e280 	call	9e28 <__clzsi2>
    8e20:	d9c00017 	ldw	r7,0(sp)
    8e24:	113ffd44 	addi	r4,r2,-11
    8e28:	00c00744 	movi	r3,29
    8e2c:	14bffe04 	addi	r18,r2,-8
    8e30:	1907c83a 	sub	r3,r3,r4
    8e34:	9ca6983a 	sll	r19,r19,r18
    8e38:	88c6d83a 	srl	r3,r17,r3
    8e3c:	8ca4983a 	sll	r18,r17,r18
    8e40:	1ce6b03a 	or	r19,r3,r19
    8e44:	023f0344 	movi	r8,-1011
    8e48:	4091c83a 	sub	r8,r8,r2
    8e4c:	002b883a 	mov	r21,zero
    8e50:	002d883a 	mov	r22,zero
    8e54:	003ec206 	br	8960 <__muldf3+0x78>
    8e58:	9924b03a 	or	r18,r19,r4
    8e5c:	9000141e 	bne	r18,zero,8eb0 <__muldf3+0x5c8>
    8e60:	0027883a 	mov	r19,zero
    8e64:	05400204 	movi	r21,8
    8e68:	0201ffc4 	movi	r8,2047
    8e6c:	05800084 	movi	r22,2
    8e70:	003ebb06 	br	8960 <__muldf3+0x78>
    8e74:	8722b03a 	or	r17,r16,fp
    8e78:	4201ffc4 	addi	r8,r8,2047
    8e7c:	8800081e 	bne	r17,zero,8ea0 <__muldf3+0x5b8>
    8e80:	ad400094 	ori	r21,r21,2
    8e84:	0021883a 	mov	r16,zero
    8e88:	01000084 	movi	r4,2
    8e8c:	003ec506 	br	89a4 <__muldf3+0xbc>
    8e90:	b08000a0 	cmpeqi	r2,r22,2
    8e94:	a00d883a 	mov	r6,r20
    8e98:	103ee126 	beq	r2,zero,8a20 <__muldf3+0x138>
    8e9c:	003ef806 	br	8a80 <__muldf3+0x198>
    8ea0:	ad4000d4 	ori	r21,r21,3
    8ea4:	e023883a 	mov	r17,fp
    8ea8:	010000c4 	movi	r4,3
    8eac:	003ebd06 	br	89a4 <__muldf3+0xbc>
    8eb0:	2025883a 	mov	r18,r4
    8eb4:	05400304 	movi	r21,12
    8eb8:	0201ffc4 	movi	r8,2047
    8ebc:	058000c4 	movi	r22,3
    8ec0:	003ea706 	br	8960 <__muldf3+0x78>
    8ec4:	0027883a 	mov	r19,zero
    8ec8:	05400104 	movi	r21,4
    8ecc:	0011883a 	mov	r8,zero
    8ed0:	05800044 	movi	r22,1
    8ed4:	003ea206 	br	8960 <__muldf3+0x78>
    8ed8:	ad400054 	ori	r21,r21,1
    8edc:	0021883a 	mov	r16,zero
    8ee0:	01000044 	movi	r4,1
    8ee4:	003eaf06 	br	89a4 <__muldf3+0xbc>
    8ee8:	04c00434 	movhi	r19,16
    8eec:	000d883a 	mov	r6,zero
    8ef0:	9cffffc4 	addi	r19,r19,-1
    8ef4:	04bfffc4 	movi	r18,-1
    8ef8:	00c1ffc4 	movi	r3,2047
    8efc:	003ecf06 	br	8a3c <__muldf3+0x154>
    8f00:	00800044 	movi	r2,1
    8f04:	1105c83a 	sub	r2,r2,r4
    8f08:	10c00e48 	cmpgei	r3,r2,57
    8f0c:	183ec81e 	bne	r3,zero,8a30 <__muldf3+0x148>
    8f10:	10c00808 	cmpgei	r3,r2,32
    8f14:	1800411e 	bne	r3,zero,901c <__muldf3+0x734>
    8f18:	39c10784 	addi	r7,r7,1054
    8f1c:	99c6983a 	sll	r3,r19,r7
    8f20:	9088d83a 	srl	r4,r18,r2
    8f24:	91ce983a 	sll	r7,r18,r7
    8f28:	98a6d83a 	srl	r19,r19,r2
    8f2c:	1904b03a 	or	r2,r3,r4
    8f30:	3824c03a 	cmpne	r18,r7,zero
    8f34:	1484b03a 	or	r2,r2,r18
    8f38:	10c001cc 	andi	r3,r2,7
    8f3c:	18000726 	beq	r3,zero,8f5c <__muldf3+0x674>
    8f40:	10c003cc 	andi	r3,r2,15
    8f44:	18c00120 	cmpeqi	r3,r3,4
    8f48:	1800041e 	bne	r3,zero,8f5c <__muldf3+0x674>
    8f4c:	10c00104 	addi	r3,r2,4
    8f50:	1885803a 	cmpltu	r2,r3,r2
    8f54:	98a7883a 	add	r19,r19,r2
    8f58:	1805883a 	mov	r2,r3
    8f5c:	98c0202c 	andhi	r3,r19,128
    8f60:	18004326 	beq	r3,zero,9070 <__muldf3+0x788>
    8f64:	00c00044 	movi	r3,1
    8f68:	0027883a 	mov	r19,zero
    8f6c:	0025883a 	mov	r18,zero
    8f70:	003eb206 	br	8a3c <__muldf3+0x154>
    8f74:	9880022c 	andhi	r2,r19,8
    8f78:	10000926 	beq	r2,zero,8fa0 <__muldf3+0x6b8>
    8f7c:	8080022c 	andhi	r2,r16,8
    8f80:	1000071e 	bne	r2,zero,8fa0 <__muldf3+0x6b8>
    8f84:	00800434 	movhi	r2,16
    8f88:	84c00234 	orhi	r19,r16,8
    8f8c:	10bfffc4 	addi	r2,r2,-1
    8f90:	98a6703a 	and	r19,r19,r2
    8f94:	b80d883a 	mov	r6,r23
    8f98:	8825883a 	mov	r18,r17
    8f9c:	003fd606 	br	8ef8 <__muldf3+0x610>
    8fa0:	00800434 	movhi	r2,16
    8fa4:	9cc00234 	orhi	r19,r19,8
    8fa8:	10bfffc4 	addi	r2,r2,-1
    8fac:	98a6703a 	and	r19,r19,r2
    8fb0:	a00d883a 	mov	r6,r20
    8fb4:	003fd006 	br	8ef8 <__muldf3+0x610>
    8fb8:	0009e280 	call	9e28 <__clzsi2>
    8fbc:	11000544 	addi	r4,r2,21
    8fc0:	21400748 	cmpgei	r5,r4,29
    8fc4:	1007883a 	mov	r3,r2
    8fc8:	d9c00017 	ldw	r7,0(sp)
    8fcc:	10800804 	addi	r2,r2,32
    8fd0:	283f9526 	beq	r5,zero,8e28 <__muldf3+0x540>
    8fd4:	18fffe04 	addi	r3,r3,-8
    8fd8:	88e6983a 	sll	r19,r17,r3
    8fdc:	0025883a 	mov	r18,zero
    8fe0:	003f9806 	br	8e44 <__muldf3+0x55c>
    8fe4:	e009883a 	mov	r4,fp
    8fe8:	0009e280 	call	9e28 <__clzsi2>
    8fec:	11400544 	addi	r5,r2,21
    8ff0:	29000748 	cmpgei	r4,r5,29
    8ff4:	1007883a 	mov	r3,r2
    8ff8:	da000017 	ldw	r8,0(sp)
    8ffc:	10800804 	addi	r2,r2,32
    9000:	203f7626 	beq	r4,zero,8ddc <__muldf3+0x4f4>
    9004:	1c3ffe04 	addi	r16,r3,-8
    9008:	e420983a 	sll	r16,fp,r16
    900c:	0023883a 	mov	r17,zero
    9010:	003f7906 	br	8df8 <__muldf3+0x510>
    9014:	400f883a 	mov	r7,r8
    9018:	003f4e06 	br	8d54 <__muldf3+0x46c>
    901c:	00fff844 	movi	r3,-31
    9020:	1907c83a 	sub	r3,r3,r4
    9024:	10800820 	cmpeqi	r2,r2,32
    9028:	98c6d83a 	srl	r3,r19,r3
    902c:	1000031e 	bne	r2,zero,903c <__muldf3+0x754>
    9030:	39c10f84 	addi	r7,r7,1086
    9034:	99e6983a 	sll	r19,r19,r7
    9038:	94e4b03a 	or	r18,r18,r19
    903c:	9024c03a 	cmpne	r18,r18,zero
    9040:	90c4b03a 	or	r2,r18,r3
    9044:	148001cc 	andi	r18,r2,7
    9048:	9000051e 	bne	r18,zero,9060 <__muldf3+0x778>
    904c:	0027883a 	mov	r19,zero
    9050:	1004d0fa 	srli	r2,r2,3
    9054:	0007883a 	mov	r3,zero
    9058:	14a4b03a 	or	r18,r2,r18
    905c:	003e7706 	br	8a3c <__muldf3+0x154>
    9060:	10c003cc 	andi	r3,r2,15
    9064:	18c00118 	cmpnei	r3,r3,4
    9068:	0027883a 	mov	r19,zero
    906c:	183fb71e 	bne	r3,zero,8f4c <__muldf3+0x664>
    9070:	9806927a 	slli	r3,r19,9
    9074:	9824977a 	slli	r18,r19,29
    9078:	1826d33a 	srli	r19,r3,12
    907c:	003ff406 	br	9050 <__muldf3+0x768>
    9080:	00800434 	movhi	r2,16
    9084:	9cc00234 	orhi	r19,r19,8
    9088:	10bfffc4 	addi	r2,r2,-1
    908c:	98a6703a 	and	r19,r19,r2
    9090:	003f9906 	br	8ef8 <__muldf3+0x610>

00009094 <__subdf3>:
    9094:	00800434 	movhi	r2,16
    9098:	defffb04 	addi	sp,sp,-20
    909c:	3812d53a 	srli	r9,r7,20
    90a0:	10bfffc4 	addi	r2,r2,-1
    90a4:	2886703a 	and	r3,r5,r2
    90a8:	dc000015 	stw	r16,0(sp)
    90ac:	3884703a 	and	r2,r7,r2
    90b0:	2820d53a 	srli	r16,r5,20
    90b4:	3014d77a 	srli	r10,r6,29
    90b8:	280ad7fa 	srli	r5,r5,31
    90bc:	180690fa 	slli	r3,r3,3
    90c0:	2016d77a 	srli	r11,r4,29
    90c4:	100490fa 	slli	r2,r2,3
    90c8:	4a41ffcc 	andi	r9,r9,2047
    90cc:	dc800215 	stw	r18,8(sp)
    90d0:	8401ffcc 	andi	r16,r16,2047
    90d4:	dfc00415 	stw	ra,16(sp)
    90d8:	dcc00315 	stw	r19,12(sp)
    90dc:	dc400115 	stw	r17,4(sp)
    90e0:	4b01ffd8 	cmpnei	r12,r9,2047
    90e4:	3810d7fa 	srli	r8,r7,31
    90e8:	2825883a 	mov	r18,r5
    90ec:	5084b03a 	or	r2,r10,r2
    90f0:	201c90fa 	slli	r14,r4,3
    90f4:	301a90fa 	slli	r13,r6,3
    90f8:	29403fcc 	andi	r5,r5,255
    90fc:	58ceb03a 	or	r7,r11,r3
    9100:	8255c83a 	sub	r10,r16,r9
    9104:	60006826 	beq	r12,zero,92a8 <__subdf3+0x214>
    9108:	42c0005c 	xori	r11,r8,1
    910c:	2ac07326 	beq	r5,r11,92dc <__subdf3+0x248>
    9110:	0280590e 	bge	zero,r10,9278 <__subdf3+0x1e4>
    9114:	4800691e 	bne	r9,zero,92bc <__subdf3+0x228>
    9118:	1346b03a 	or	r3,r2,r13
    911c:	1800e826 	beq	r3,zero,94c0 <__subdf3+0x42c>
    9120:	50ffffc4 	addi	r3,r10,-1
    9124:	18018126 	beq	r3,zero,972c <__subdf3+0x698>
    9128:	5281ffd8 	cmpnei	r10,r10,2047
    912c:	5000eb26 	beq	r10,zero,94dc <__subdf3+0x448>
    9130:	1815883a 	mov	r10,r3
    9134:	50c00e48 	cmpgei	r3,r10,57
    9138:	1800651e 	bne	r3,zero,92d0 <__subdf3+0x23c>
    913c:	50c00808 	cmpgei	r3,r10,32
    9140:	18012a1e 	bne	r3,zero,95ec <__subdf3+0x558>
    9144:	00c00804 	movi	r3,32
    9148:	1a87c83a 	sub	r3,r3,r10
    914c:	10e2983a 	sll	r17,r2,r3
    9150:	6a88d83a 	srl	r4,r13,r10
    9154:	68da983a 	sll	r13,r13,r3
    9158:	1284d83a 	srl	r2,r2,r10
    915c:	8922b03a 	or	r17,r17,r4
    9160:	681ac03a 	cmpne	r13,r13,zero
    9164:	8b62b03a 	or	r17,r17,r13
    9168:	388fc83a 	sub	r7,r7,r2
    916c:	7463c83a 	sub	r17,r14,r17
    9170:	7445803a 	cmpltu	r2,r14,r17
    9174:	3889c83a 	sub	r4,r7,r2
    9178:	2080202c 	andhi	r2,r4,128
    917c:	10008e26 	beq	r2,zero,93b8 <__subdf3+0x324>
    9180:	04c02034 	movhi	r19,128
    9184:	9cffffc4 	addi	r19,r19,-1
    9188:	24e6703a 	and	r19,r4,r19
    918c:	9800a626 	beq	r19,zero,9428 <__subdf3+0x394>
    9190:	9809883a 	mov	r4,r19
    9194:	0009e280 	call	9e28 <__clzsi2>
    9198:	117ffe04 	addi	r5,r2,-8
    919c:	01000804 	movi	r4,32
    91a0:	2149c83a 	sub	r4,r4,r5
    91a4:	8908d83a 	srl	r4,r17,r4
    91a8:	9944983a 	sll	r2,r19,r5
    91ac:	8962983a 	sll	r17,r17,r5
    91b0:	2084b03a 	or	r2,r4,r2
    91b4:	2c00a516 	blt	r5,r16,944c <__subdf3+0x3b8>
    91b8:	2c0bc83a 	sub	r5,r5,r16
    91bc:	29000044 	addi	r4,r5,1
    91c0:	20c00808 	cmpgei	r3,r4,32
    91c4:	1800701e 	bne	r3,zero,9388 <__subdf3+0x2f4>
    91c8:	00c00804 	movi	r3,32
    91cc:	1907c83a 	sub	r3,r3,r4
    91d0:	890ad83a 	srl	r5,r17,r4
    91d4:	88e2983a 	sll	r17,r17,r3
    91d8:	10c6983a 	sll	r3,r2,r3
    91dc:	1108d83a 	srl	r4,r2,r4
    91e0:	8822c03a 	cmpne	r17,r17,zero
    91e4:	1946b03a 	or	r3,r3,r5
    91e8:	1c62b03a 	or	r17,r3,r17
    91ec:	0021883a 	mov	r16,zero
    91f0:	888001cc 	andi	r2,r17,7
    91f4:	10000726 	beq	r2,zero,9214 <__subdf3+0x180>
    91f8:	888003cc 	andi	r2,r17,15
    91fc:	10800120 	cmpeqi	r2,r2,4
    9200:	1000041e 	bne	r2,zero,9214 <__subdf3+0x180>
    9204:	88800104 	addi	r2,r17,4
    9208:	1463803a 	cmpltu	r17,r2,r17
    920c:	2449883a 	add	r4,r4,r17
    9210:	1023883a 	mov	r17,r2
    9214:	2080202c 	andhi	r2,r4,128
    9218:	10006926 	beq	r2,zero,93c0 <__subdf3+0x32c>
    921c:	84000044 	addi	r16,r16,1
    9220:	8081ffe0 	cmpeqi	r2,r16,2047
    9224:	8401ffcc 	andi	r16,r16,2047
    9228:	10007b1e 	bne	r2,zero,9418 <__subdf3+0x384>
    922c:	00bfe034 	movhi	r2,65408
    9230:	10bfffc4 	addi	r2,r2,-1
    9234:	2084703a 	and	r2,r4,r2
    9238:	1006927a 	slli	r3,r2,9
    923c:	8822d0fa 	srli	r17,r17,3
    9240:	1008977a 	slli	r4,r2,29
    9244:	1806d33a 	srli	r3,r3,12
    9248:	2444b03a 	or	r2,r4,r17
    924c:	8020953a 	slli	r16,r16,20
    9250:	902497fa 	slli	r18,r18,31
    9254:	80c6b03a 	or	r3,r16,r3
    9258:	1c86b03a 	or	r3,r3,r18
    925c:	dfc00417 	ldw	ra,16(sp)
    9260:	dcc00317 	ldw	r19,12(sp)
    9264:	dc800217 	ldw	r18,8(sp)
    9268:	dc400117 	ldw	r17,4(sp)
    926c:	dc000017 	ldw	r16,0(sp)
    9270:	dec00504 	addi	sp,sp,20
    9274:	f800283a 	ret
    9278:	50002c26 	beq	r10,zero,932c <__subdf3+0x298>
    927c:	4c15c83a 	sub	r10,r9,r16
    9280:	5825883a 	mov	r18,r11
    9284:	8000b21e 	bne	r16,zero,9550 <__subdf3+0x4bc>
    9288:	3b86b03a 	or	r3,r7,r14
    928c:	18010826 	beq	r3,zero,96b0 <__subdf3+0x61c>
    9290:	50ffffc4 	addi	r3,r10,-1
    9294:	18015a26 	beq	r3,zero,9800 <__subdf3+0x76c>
    9298:	5401ffd8 	cmpnei	r16,r10,2047
    929c:	80012926 	beq	r16,zero,9744 <__subdf3+0x6b0>
    92a0:	1815883a 	mov	r10,r3
    92a4:	0000ac06 	br	9558 <__subdf3+0x4c4>
    92a8:	1346b03a 	or	r3,r2,r13
    92ac:	183f9626 	beq	r3,zero,9108 <__subdf3+0x74>
    92b0:	42c03fcc 	andi	r11,r8,255
    92b4:	2a006a26 	beq	r5,r8,9460 <__subdf3+0x3cc>
    92b8:	02bfef0e 	bge	zero,r10,9278 <__subdf3+0x1e4>
    92bc:	80c1ffd8 	cmpnei	r3,r16,2047
    92c0:	18008626 	beq	r3,zero,94dc <__subdf3+0x448>
    92c4:	50c00e48 	cmpgei	r3,r10,57
    92c8:	10802034 	orhi	r2,r2,128
    92cc:	183f9b26 	beq	r3,zero,913c <__subdf3+0xa8>
    92d0:	1344b03a 	or	r2,r2,r13
    92d4:	1022c03a 	cmpne	r17,r2,zero
    92d8:	003fa406 	br	916c <__subdf3+0xd8>
    92dc:	0280600e 	bge	zero,r10,9460 <__subdf3+0x3cc>
    92e0:	48002126 	beq	r9,zero,9368 <__subdf3+0x2d4>
    92e4:	80c1ffd8 	cmpnei	r3,r16,2047
    92e8:	18011d26 	beq	r3,zero,9760 <__subdf3+0x6cc>
    92ec:	10802034 	orhi	r2,r2,128
    92f0:	50c00e48 	cmpgei	r3,r10,57
    92f4:	18003e1e 	bne	r3,zero,93f0 <__subdf3+0x35c>
    92f8:	50c00808 	cmpgei	r3,r10,32
    92fc:	1800d526 	beq	r3,zero,9654 <__subdf3+0x5c0>
    9300:	547ff804 	addi	r17,r10,-32
    9304:	51000820 	cmpeqi	r4,r10,32
    9308:	1446d83a 	srl	r3,r2,r17
    930c:	2000041e 	bne	r4,zero,9320 <__subdf3+0x28c>
    9310:	01001004 	movi	r4,64
    9314:	2295c83a 	sub	r10,r4,r10
    9318:	1284983a 	sll	r2,r2,r10
    931c:	689ab03a 	or	r13,r13,r2
    9320:	6822c03a 	cmpne	r17,r13,zero
    9324:	88e2b03a 	or	r17,r17,r3
    9328:	00003306 	br	93f8 <__subdf3+0x364>
    932c:	80c00044 	addi	r3,r16,1
    9330:	18c1ff8c 	andi	r3,r3,2046
    9334:	1800971e 	bne	r3,zero,9594 <__subdf3+0x500>
    9338:	1350b03a 	or	r8,r2,r13
    933c:	3b86b03a 	or	r3,r7,r14
    9340:	8000e21e 	bne	r16,zero,96cc <__subdf3+0x638>
    9344:	18012526 	beq	r3,zero,97dc <__subdf3+0x748>
    9348:	4001411e 	bne	r8,zero,9850 <__subdf3+0x7bc>
    934c:	3806977a 	slli	r3,r7,29
    9350:	00880034 	movhi	r2,8192
    9354:	10bfffc4 	addi	r2,r2,-1
    9358:	208a703a 	and	r5,r4,r2
    935c:	3810d0fa 	srli	r8,r7,3
    9360:	28c4b03a 	or	r2,r5,r3
    9364:	00001d06 	br	93dc <__subdf3+0x348>
    9368:	1346b03a 	or	r3,r2,r13
    936c:	18005426 	beq	r3,zero,94c0 <__subdf3+0x42c>
    9370:	50ffffc4 	addi	r3,r10,-1
    9374:	1800e526 	beq	r3,zero,970c <__subdf3+0x678>
    9378:	5281ffd8 	cmpnei	r10,r10,2047
    937c:	50012d26 	beq	r10,zero,9834 <__subdf3+0x7a0>
    9380:	1815883a 	mov	r10,r3
    9384:	003fda06 	br	92f0 <__subdf3+0x25c>
    9388:	297ff844 	addi	r5,r5,-31
    938c:	20c00820 	cmpeqi	r3,r4,32
    9390:	114ad83a 	srl	r5,r2,r5
    9394:	1800041e 	bne	r3,zero,93a8 <__subdf3+0x314>
    9398:	00c01004 	movi	r3,64
    939c:	1909c83a 	sub	r4,r3,r4
    93a0:	1104983a 	sll	r2,r2,r4
    93a4:	88a2b03a 	or	r17,r17,r2
    93a8:	8822c03a 	cmpne	r17,r17,zero
    93ac:	8962b03a 	or	r17,r17,r5
    93b0:	0009883a 	mov	r4,zero
    93b4:	0021883a 	mov	r16,zero
    93b8:	888001cc 	andi	r2,r17,7
    93bc:	103f8e1e 	bne	r2,zero,91f8 <__subdf3+0x164>
    93c0:	8822d0fa 	srli	r17,r17,3
    93c4:	2004977a 	slli	r2,r4,29
    93c8:	2010d0fa 	srli	r8,r4,3
    93cc:	8015883a 	mov	r10,r16
    93d0:	8884b03a 	or	r2,r17,r2
    93d4:	50c1ffe0 	cmpeqi	r3,r10,2047
    93d8:	18016f1e 	bne	r3,zero,9998 <__subdf3+0x904>
    93dc:	00c00434 	movhi	r3,16
    93e0:	18ffffc4 	addi	r3,r3,-1
    93e4:	40c6703a 	and	r3,r8,r3
    93e8:	5401ffcc 	andi	r16,r10,2047
    93ec:	003f9706 	br	924c <__subdf3+0x1b8>
    93f0:	1344b03a 	or	r2,r2,r13
    93f4:	1022c03a 	cmpne	r17,r2,zero
    93f8:	8ba3883a 	add	r17,r17,r14
    93fc:	8b85803a 	cmpltu	r2,r17,r14
    9400:	11c9883a 	add	r4,r2,r7
    9404:	2080202c 	andhi	r2,r4,128
    9408:	103feb26 	beq	r2,zero,93b8 <__subdf3+0x324>
    940c:	84000044 	addi	r16,r16,1
    9410:	8081ffe0 	cmpeqi	r2,r16,2047
    9414:	10006b26 	beq	r2,zero,95c4 <__subdf3+0x530>
    9418:	0401ffc4 	movi	r16,2047
    941c:	0007883a 	mov	r3,zero
    9420:	0005883a 	mov	r2,zero
    9424:	003f8906 	br	924c <__subdf3+0x1b8>
    9428:	8809883a 	mov	r4,r17
    942c:	0009e280 	call	9e28 <__clzsi2>
    9430:	11400604 	addi	r5,r2,24
    9434:	28c00808 	cmpgei	r3,r5,32
    9438:	183f5826 	beq	r3,zero,919c <__subdf3+0x108>
    943c:	10bffe04 	addi	r2,r2,-8
    9440:	8884983a 	sll	r2,r17,r2
    9444:	0023883a 	mov	r17,zero
    9448:	2c3f5b0e 	bge	r5,r16,91b8 <__subdf3+0x124>
    944c:	013fe034 	movhi	r4,65408
    9450:	213fffc4 	addi	r4,r4,-1
    9454:	8161c83a 	sub	r16,r16,r5
    9458:	1108703a 	and	r4,r2,r4
    945c:	003f6406 	br	91f0 <__subdf3+0x15c>
    9460:	50002c26 	beq	r10,zero,9514 <__subdf3+0x480>
    9464:	4c15c83a 	sub	r10,r9,r16
    9468:	80007226 	beq	r16,zero,9634 <__subdf3+0x5a0>
    946c:	6000ea26 	beq	r12,zero,9818 <__subdf3+0x784>
    9470:	39c02034 	orhi	r7,r7,128
    9474:	50c00e48 	cmpgei	r3,r10,57
    9478:	1800c01e 	bne	r3,zero,977c <__subdf3+0x6e8>
    947c:	50c00808 	cmpgei	r3,r10,32
    9480:	1801261e 	bne	r3,zero,991c <__subdf3+0x888>
    9484:	00c00804 	movi	r3,32
    9488:	1a87c83a 	sub	r3,r3,r10
    948c:	38e2983a 	sll	r17,r7,r3
    9490:	7288d83a 	srl	r4,r14,r10
    9494:	70c6983a 	sll	r3,r14,r3
    9498:	3a8ed83a 	srl	r7,r7,r10
    949c:	8922b03a 	or	r17,r17,r4
    94a0:	1806c03a 	cmpne	r3,r3,zero
    94a4:	88e2b03a 	or	r17,r17,r3
    94a8:	11c5883a 	add	r2,r2,r7
    94ac:	8b63883a 	add	r17,r17,r13
    94b0:	8b49803a 	cmpltu	r4,r17,r13
    94b4:	2089883a 	add	r4,r4,r2
    94b8:	4821883a 	mov	r16,r9
    94bc:	003fd106 	br	9404 <__subdf3+0x370>
    94c0:	380c977a 	slli	r6,r7,29
    94c4:	00880034 	movhi	r2,8192
    94c8:	10bfffc4 	addi	r2,r2,-1
    94cc:	2088703a 	and	r4,r4,r2
    94d0:	3810d0fa 	srli	r8,r7,3
    94d4:	2184b03a 	or	r2,r4,r6
    94d8:	003fbe06 	br	93d4 <__subdf3+0x340>
    94dc:	380c977a 	slli	r6,r7,29
    94e0:	00880034 	movhi	r2,8192
    94e4:	10bfffc4 	addi	r2,r2,-1
    94e8:	380ed0fa 	srli	r7,r7,3
    94ec:	2084703a 	and	r2,r4,r2
    94f0:	1184b03a 	or	r2,r2,r6
    94f4:	3886b03a 	or	r3,r7,r2
    94f8:	18012326 	beq	r3,zero,9988 <__subdf3+0x8f4>
    94fc:	01000434 	movhi	r4,16
    9500:	38c00234 	orhi	r3,r7,8
    9504:	213fffc4 	addi	r4,r4,-1
    9508:	1906703a 	and	r3,r3,r4
    950c:	0401ffc4 	movi	r16,2047
    9510:	003f4e06 	br	924c <__subdf3+0x1b8>
    9514:	80c00044 	addi	r3,r16,1
    9518:	1941ff8c 	andi	r5,r3,2046
    951c:	2800581e 	bne	r5,zero,9680 <__subdf3+0x5ec>
    9520:	3b86b03a 	or	r3,r7,r14
    9524:	8000a31e 	bne	r16,zero,97b4 <__subdf3+0x720>
    9528:	1800ea26 	beq	r3,zero,98d4 <__subdf3+0x840>
    952c:	1346b03a 	or	r3,r2,r13
    9530:	1800ef1e 	bne	r3,zero,98f0 <__subdf3+0x85c>
    9534:	380a977a 	slli	r5,r7,29
    9538:	00880034 	movhi	r2,8192
    953c:	10bfffc4 	addi	r2,r2,-1
    9540:	2084703a 	and	r2,r4,r2
    9544:	3810d0fa 	srli	r8,r7,3
    9548:	2884b03a 	or	r2,r5,r2
    954c:	003fa306 	br	93dc <__subdf3+0x348>
    9550:	60007c26 	beq	r12,zero,9744 <__subdf3+0x6b0>
    9554:	39c02034 	orhi	r7,r7,128
    9558:	50c00e48 	cmpgei	r3,r10,57
    955c:	18002e1e 	bne	r3,zero,9618 <__subdf3+0x584>
    9560:	50c00808 	cmpgei	r3,r10,32
    9564:	1800881e 	bne	r3,zero,9788 <__subdf3+0x6f4>
    9568:	00c00804 	movi	r3,32
    956c:	1a87c83a 	sub	r3,r3,r10
    9570:	7288d83a 	srl	r4,r14,r10
    9574:	38e2983a 	sll	r17,r7,r3
    9578:	70dc983a 	sll	r14,r14,r3
    957c:	3aa0d83a 	srl	r16,r7,r10
    9580:	8922b03a 	or	r17,r17,r4
    9584:	701cc03a 	cmpne	r14,r14,zero
    9588:	8ba2b03a 	or	r17,r17,r14
    958c:	1405c83a 	sub	r2,r2,r16
    9590:	00002306 	br	9620 <__subdf3+0x58c>
    9594:	7363c83a 	sub	r17,r14,r13
    9598:	3889c83a 	sub	r4,r7,r2
    959c:	7467803a 	cmpltu	r19,r14,r17
    95a0:	24e7c83a 	sub	r19,r4,r19
    95a4:	98c0202c 	andhi	r3,r19,128
    95a8:	1800521e 	bne	r3,zero,96f4 <__subdf3+0x660>
    95ac:	8cc4b03a 	or	r2,r17,r19
    95b0:	103ef61e 	bne	r2,zero,918c <__subdf3+0xf8>
    95b4:	0011883a 	mov	r8,zero
    95b8:	0025883a 	mov	r18,zero
    95bc:	003f8706 	br	93dc <__subdf3+0x348>
    95c0:	04000084 	movi	r16,2
    95c4:	00bfe034 	movhi	r2,65408
    95c8:	10bfffc4 	addi	r2,r2,-1
    95cc:	8806d07a 	srli	r3,r17,1
    95d0:	2084703a 	and	r2,r4,r2
    95d4:	100a97fa 	slli	r5,r2,31
    95d8:	8c40004c 	andi	r17,r17,1
    95dc:	1c62b03a 	or	r17,r3,r17
    95e0:	1008d07a 	srli	r4,r2,1
    95e4:	2c62b03a 	or	r17,r5,r17
    95e8:	003f0106 	br	91f0 <__subdf3+0x15c>
    95ec:	547ff804 	addi	r17,r10,-32
    95f0:	51000820 	cmpeqi	r4,r10,32
    95f4:	1446d83a 	srl	r3,r2,r17
    95f8:	2000041e 	bne	r4,zero,960c <__subdf3+0x578>
    95fc:	01001004 	movi	r4,64
    9600:	2295c83a 	sub	r10,r4,r10
    9604:	1284983a 	sll	r2,r2,r10
    9608:	689ab03a 	or	r13,r13,r2
    960c:	6822c03a 	cmpne	r17,r13,zero
    9610:	88e2b03a 	or	r17,r17,r3
    9614:	003ed506 	br	916c <__subdf3+0xd8>
    9618:	3ba2b03a 	or	r17,r7,r14
    961c:	8822c03a 	cmpne	r17,r17,zero
    9620:	6c63c83a 	sub	r17,r13,r17
    9624:	6c49803a 	cmpltu	r4,r13,r17
    9628:	1109c83a 	sub	r4,r2,r4
    962c:	4821883a 	mov	r16,r9
    9630:	003ed106 	br	9178 <__subdf3+0xe4>
    9634:	3b86b03a 	or	r3,r7,r14
    9638:	18001d26 	beq	r3,zero,96b0 <__subdf3+0x61c>
    963c:	50ffffc4 	addi	r3,r10,-1
    9640:	1800c126 	beq	r3,zero,9948 <__subdf3+0x8b4>
    9644:	5281ffd8 	cmpnei	r10,r10,2047
    9648:	50003e26 	beq	r10,zero,9744 <__subdf3+0x6b0>
    964c:	1815883a 	mov	r10,r3
    9650:	003f8806 	br	9474 <__subdf3+0x3e0>
    9654:	00c00804 	movi	r3,32
    9658:	1a87c83a 	sub	r3,r3,r10
    965c:	10e2983a 	sll	r17,r2,r3
    9660:	6a88d83a 	srl	r4,r13,r10
    9664:	68da983a 	sll	r13,r13,r3
    9668:	1284d83a 	srl	r2,r2,r10
    966c:	8922b03a 	or	r17,r17,r4
    9670:	681ac03a 	cmpne	r13,r13,zero
    9674:	8b62b03a 	or	r17,r17,r13
    9678:	388f883a 	add	r7,r7,r2
    967c:	003f5e06 	br	93f8 <__subdf3+0x364>
    9680:	1901ffe0 	cmpeqi	r4,r3,2047
    9684:	203f641e 	bne	r4,zero,9418 <__subdf3+0x384>
    9688:	735b883a 	add	r13,r14,r13
    968c:	6b89803a 	cmpltu	r4,r13,r14
    9690:	3885883a 	add	r2,r7,r2
    9694:	1105883a 	add	r2,r2,r4
    9698:	102297fa 	slli	r17,r2,31
    969c:	681ad07a 	srli	r13,r13,1
    96a0:	1008d07a 	srli	r4,r2,1
    96a4:	1821883a 	mov	r16,r3
    96a8:	8b62b03a 	or	r17,r17,r13
    96ac:	003f4206 	br	93b8 <__subdf3+0x324>
    96b0:	1008977a 	slli	r4,r2,29
    96b4:	00c80034 	movhi	r3,8192
    96b8:	18ffffc4 	addi	r3,r3,-1
    96bc:	30cc703a 	and	r6,r6,r3
    96c0:	1010d0fa 	srli	r8,r2,3
    96c4:	3104b03a 	or	r2,r6,r4
    96c8:	003f4206 	br	93d4 <__subdf3+0x340>
    96cc:	18006c1e 	bne	r3,zero,9880 <__subdf3+0x7ec>
    96d0:	4000a826 	beq	r8,zero,9974 <__subdf3+0x8e0>
    96d4:	1008977a 	slli	r4,r2,29
    96d8:	00c80034 	movhi	r3,8192
    96dc:	18ffffc4 	addi	r3,r3,-1
    96e0:	30c6703a 	and	r3,r6,r3
    96e4:	100ed0fa 	srli	r7,r2,3
    96e8:	5825883a 	mov	r18,r11
    96ec:	1904b03a 	or	r2,r3,r4
    96f0:	003f8006 	br	94f4 <__subdf3+0x460>
    96f4:	6ba3c83a 	sub	r17,r13,r14
    96f8:	11c5c83a 	sub	r2,r2,r7
    96fc:	6c49803a 	cmpltu	r4,r13,r17
    9700:	1127c83a 	sub	r19,r2,r4
    9704:	5825883a 	mov	r18,r11
    9708:	003ea006 	br	918c <__subdf3+0xf8>
    970c:	7363883a 	add	r17,r14,r13
    9710:	3885883a 	add	r2,r7,r2
    9714:	8b9d803a 	cmpltu	r14,r17,r14
    9718:	1389883a 	add	r4,r2,r14
    971c:	2080202c 	andhi	r2,r4,128
    9720:	103fa71e 	bne	r2,zero,95c0 <__subdf3+0x52c>
    9724:	04000044 	movi	r16,1
    9728:	003f2306 	br	93b8 <__subdf3+0x324>
    972c:	7363c83a 	sub	r17,r14,r13
    9730:	3885c83a 	sub	r2,r7,r2
    9734:	745d803a 	cmpltu	r14,r14,r17
    9738:	1389c83a 	sub	r4,r2,r14
    973c:	04000044 	movi	r16,1
    9740:	003e8d06 	br	9178 <__subdf3+0xe4>
    9744:	1008977a 	slli	r4,r2,29
    9748:	00c80034 	movhi	r3,8192
    974c:	18ffffc4 	addi	r3,r3,-1
    9750:	30c6703a 	and	r3,r6,r3
    9754:	100ed0fa 	srli	r7,r2,3
    9758:	1904b03a 	or	r2,r3,r4
    975c:	003f6506 	br	94f4 <__subdf3+0x460>
    9760:	380c977a 	slli	r6,r7,29
    9764:	00880034 	movhi	r2,8192
    9768:	10bfffc4 	addi	r2,r2,-1
    976c:	2088703a 	and	r4,r4,r2
    9770:	380ed0fa 	srli	r7,r7,3
    9774:	2184b03a 	or	r2,r4,r6
    9778:	003f5e06 	br	94f4 <__subdf3+0x460>
    977c:	3ba2b03a 	or	r17,r7,r14
    9780:	8822c03a 	cmpne	r17,r17,zero
    9784:	003f4906 	br	94ac <__subdf3+0x418>
    9788:	547ff804 	addi	r17,r10,-32
    978c:	51000820 	cmpeqi	r4,r10,32
    9790:	3c46d83a 	srl	r3,r7,r17
    9794:	2000041e 	bne	r4,zero,97a8 <__subdf3+0x714>
    9798:	01001004 	movi	r4,64
    979c:	2295c83a 	sub	r10,r4,r10
    97a0:	3a8e983a 	sll	r7,r7,r10
    97a4:	71dcb03a 	or	r14,r14,r7
    97a8:	7022c03a 	cmpne	r17,r14,zero
    97ac:	88e2b03a 	or	r17,r17,r3
    97b0:	003f9b06 	br	9620 <__subdf3+0x58c>
    97b4:	18001826 	beq	r3,zero,9818 <__subdf3+0x784>
    97b8:	135ab03a 	or	r13,r2,r13
    97bc:	380a977a 	slli	r5,r7,29
    97c0:	380ed0fa 	srli	r7,r7,3
    97c4:	6800311e 	bne	r13,zero,988c <__subdf3+0x7f8>
    97c8:	00880034 	movhi	r2,8192
    97cc:	10bfffc4 	addi	r2,r2,-1
    97d0:	2084703a 	and	r2,r4,r2
    97d4:	1144b03a 	or	r2,r2,r5
    97d8:	003f4606 	br	94f4 <__subdf3+0x460>
    97dc:	40005f26 	beq	r8,zero,995c <__subdf3+0x8c8>
    97e0:	1008977a 	slli	r4,r2,29
    97e4:	00c80034 	movhi	r3,8192
    97e8:	18ffffc4 	addi	r3,r3,-1
    97ec:	30cc703a 	and	r6,r6,r3
    97f0:	1010d0fa 	srli	r8,r2,3
    97f4:	5825883a 	mov	r18,r11
    97f8:	3104b03a 	or	r2,r6,r4
    97fc:	003ef706 	br	93dc <__subdf3+0x348>
    9800:	6ba3c83a 	sub	r17,r13,r14
    9804:	11c5c83a 	sub	r2,r2,r7
    9808:	6c5b803a 	cmpltu	r13,r13,r17
    980c:	1349c83a 	sub	r4,r2,r13
    9810:	04000044 	movi	r16,1
    9814:	003e5806 	br	9178 <__subdf3+0xe4>
    9818:	1006977a 	slli	r3,r2,29
    981c:	01080034 	movhi	r4,8192
    9820:	213fffc4 	addi	r4,r4,-1
    9824:	3108703a 	and	r4,r6,r4
    9828:	100ed0fa 	srli	r7,r2,3
    982c:	1904b03a 	or	r2,r3,r4
    9830:	003f3006 	br	94f4 <__subdf3+0x460>
    9834:	3806977a 	slli	r3,r7,29
    9838:	00880034 	movhi	r2,8192
    983c:	10bfffc4 	addi	r2,r2,-1
    9840:	2084703a 	and	r2,r4,r2
    9844:	380ed0fa 	srli	r7,r7,3
    9848:	10c4b03a 	or	r2,r2,r3
    984c:	003f2906 	br	94f4 <__subdf3+0x460>
    9850:	7363c83a 	sub	r17,r14,r13
    9854:	7447803a 	cmpltu	r3,r14,r17
    9858:	3889c83a 	sub	r4,r7,r2
    985c:	20c9c83a 	sub	r4,r4,r3
    9860:	20c0202c 	andhi	r3,r4,128
    9864:	18004026 	beq	r3,zero,9968 <__subdf3+0x8d4>
    9868:	6ba3c83a 	sub	r17,r13,r14
    986c:	11c5c83a 	sub	r2,r2,r7
    9870:	6c5b803a 	cmpltu	r13,r13,r17
    9874:	1349c83a 	sub	r4,r2,r13
    9878:	5825883a 	mov	r18,r11
    987c:	003e5c06 	br	91f0 <__subdf3+0x15c>
    9880:	380a977a 	slli	r5,r7,29
    9884:	380ed0fa 	srli	r7,r7,3
    9888:	403fcf26 	beq	r8,zero,97c8 <__subdf3+0x734>
    988c:	00c80034 	movhi	r3,8192
    9890:	18ffffc4 	addi	r3,r3,-1
    9894:	20c8703a 	and	r4,r4,r3
    9898:	3a00022c 	andhi	r8,r7,8
    989c:	2148b03a 	or	r4,r4,r5
    98a0:	40000826 	beq	r8,zero,98c4 <__subdf3+0x830>
    98a4:	100ad0fa 	srli	r5,r2,3
    98a8:	2a00022c 	andhi	r8,r5,8
    98ac:	4000051e 	bne	r8,zero,98c4 <__subdf3+0x830>
    98b0:	1004977a 	slli	r2,r2,29
    98b4:	30c6703a 	and	r3,r6,r3
    98b8:	5825883a 	mov	r18,r11
    98bc:	1888b03a 	or	r4,r3,r2
    98c0:	280f883a 	mov	r7,r5
    98c4:	380e90fa 	slli	r7,r7,3
    98c8:	2005883a 	mov	r2,r4
    98cc:	380ed0fa 	srli	r7,r7,3
    98d0:	003f0806 	br	94f4 <__subdf3+0x460>
    98d4:	100a977a 	slli	r5,r2,29
    98d8:	00c80034 	movhi	r3,8192
    98dc:	18ffffc4 	addi	r3,r3,-1
    98e0:	30c6703a 	and	r3,r6,r3
    98e4:	1010d0fa 	srli	r8,r2,3
    98e8:	28c4b03a 	or	r2,r5,r3
    98ec:	003ebb06 	br	93dc <__subdf3+0x348>
    98f0:	7363883a 	add	r17,r14,r13
    98f4:	3885883a 	add	r2,r7,r2
    98f8:	8b9d803a 	cmpltu	r14,r17,r14
    98fc:	1389883a 	add	r4,r2,r14
    9900:	2080202c 	andhi	r2,r4,128
    9904:	103eac26 	beq	r2,zero,93b8 <__subdf3+0x324>
    9908:	00bfe034 	movhi	r2,65408
    990c:	10bfffc4 	addi	r2,r2,-1
    9910:	2088703a 	and	r4,r4,r2
    9914:	04000044 	movi	r16,1
    9918:	003ea706 	br	93b8 <__subdf3+0x324>
    991c:	50fff804 	addi	r3,r10,-32
    9920:	51000820 	cmpeqi	r4,r10,32
    9924:	38c6d83a 	srl	r3,r7,r3
    9928:	2000041e 	bne	r4,zero,993c <__subdf3+0x8a8>
    992c:	01001004 	movi	r4,64
    9930:	2295c83a 	sub	r10,r4,r10
    9934:	3a8e983a 	sll	r7,r7,r10
    9938:	71dcb03a 	or	r14,r14,r7
    993c:	7022c03a 	cmpne	r17,r14,zero
    9940:	88e2b03a 	or	r17,r17,r3
    9944:	003ed906 	br	94ac <__subdf3+0x418>
    9948:	7363883a 	add	r17,r14,r13
    994c:	3885883a 	add	r2,r7,r2
    9950:	8b5b803a 	cmpltu	r13,r17,r13
    9954:	1349883a 	add	r4,r2,r13
    9958:	003f7006 	br	971c <__subdf3+0x688>
    995c:	0005883a 	mov	r2,zero
    9960:	0025883a 	mov	r18,zero
    9964:	003e9d06 	br	93dc <__subdf3+0x348>
    9968:	8904b03a 	or	r2,r17,r4
    996c:	103f1126 	beq	r2,zero,95b4 <__subdf3+0x520>
    9970:	003e9106 	br	93b8 <__subdf3+0x324>
    9974:	01c00434 	movhi	r7,16
    9978:	00bfffc4 	movi	r2,-1
    997c:	39ffffc4 	addi	r7,r7,-1
    9980:	0025883a 	mov	r18,zero
    9984:	003edd06 	br	94fc <__subdf3+0x468>
    9988:	0005883a 	mov	r2,zero
    998c:	0401ffc4 	movi	r16,2047
    9990:	0007883a 	mov	r3,zero
    9994:	003e2d06 	br	924c <__subdf3+0x1b8>
    9998:	400f883a 	mov	r7,r8
    999c:	003ed506 	br	94f4 <__subdf3+0x460>

000099a0 <__unorddf2>:
    99a0:	2806d53a 	srli	r3,r5,20
    99a4:	3810d53a 	srli	r8,r7,20
    99a8:	02400434 	movhi	r9,16
    99ac:	18c1ffcc 	andi	r3,r3,2047
    99b0:	4a7fffc4 	addi	r9,r9,-1
    99b4:	18c1ffd8 	cmpnei	r3,r3,2047
    99b8:	2a4a703a 	and	r5,r5,r9
    99bc:	3a4e703a 	and	r7,r7,r9
    99c0:	4201ffcc 	andi	r8,r8,2047
    99c4:	18000426 	beq	r3,zero,99d8 <__unorddf2+0x38>
    99c8:	4201ffd8 	cmpnei	r8,r8,2047
    99cc:	40000626 	beq	r8,zero,99e8 <__unorddf2+0x48>
    99d0:	0005883a 	mov	r2,zero
    99d4:	f800283a 	ret
    99d8:	290ab03a 	or	r5,r5,r4
    99dc:	283ffa26 	beq	r5,zero,99c8 <__unorddf2+0x28>
    99e0:	00800044 	movi	r2,1
    99e4:	f800283a 	ret
    99e8:	398eb03a 	or	r7,r7,r6
    99ec:	3804c03a 	cmpne	r2,r7,zero
    99f0:	f800283a 	ret

000099f4 <__fixdfsi>:
    99f4:	2806d53a 	srli	r3,r5,20
    99f8:	01800434 	movhi	r6,16
    99fc:	31bfffc4 	addi	r6,r6,-1
    9a00:	18c1ffcc 	andi	r3,r3,2047
    9a04:	19c0ffd0 	cmplti	r7,r3,1023
    9a08:	2810d7fa 	srli	r8,r5,31
    9a0c:	298a703a 	and	r5,r5,r6
    9a10:	3800061e 	bne	r7,zero,9a2c <__fixdfsi+0x38>
    9a14:	18810790 	cmplti	r2,r3,1054
    9a18:	1000061e 	bne	r2,zero,9a34 <__fixdfsi+0x40>
    9a1c:	00a00034 	movhi	r2,32768
    9a20:	10bfffc4 	addi	r2,r2,-1
    9a24:	4085883a 	add	r2,r8,r2
    9a28:	f800283a 	ret
    9a2c:	0005883a 	mov	r2,zero
    9a30:	f800283a 	ret
    9a34:	01810cc4 	movi	r6,1075
    9a38:	30cdc83a 	sub	r6,r6,r3
    9a3c:	30800808 	cmpgei	r2,r6,32
    9a40:	29400434 	orhi	r5,r5,16
    9a44:	1000071e 	bne	r2,zero,9a64 <__fixdfsi+0x70>
    9a48:	18befb44 	addi	r2,r3,-1043
    9a4c:	2884983a 	sll	r2,r5,r2
    9a50:	2188d83a 	srl	r4,r4,r6
    9a54:	1104b03a 	or	r2,r2,r4
    9a58:	403ff526 	beq	r8,zero,9a30 <__fixdfsi+0x3c>
    9a5c:	0085c83a 	sub	r2,zero,r2
    9a60:	f800283a 	ret
    9a64:	008104c4 	movi	r2,1043
    9a68:	10c5c83a 	sub	r2,r2,r3
    9a6c:	2884d83a 	srl	r2,r5,r2
    9a70:	003ff906 	br	9a58 <__fixdfsi+0x64>

00009a74 <__floatsidf>:
    9a74:	defffd04 	addi	sp,sp,-12
    9a78:	dfc00215 	stw	ra,8(sp)
    9a7c:	dc400115 	stw	r17,4(sp)
    9a80:	dc000015 	stw	r16,0(sp)
    9a84:	20001326 	beq	r4,zero,9ad4 <__floatsidf+0x60>
    9a88:	2022d7fa 	srli	r17,r4,31
    9a8c:	2021883a 	mov	r16,r4
    9a90:	20002416 	blt	r4,zero,9b24 <__floatsidf+0xb0>
    9a94:	8009883a 	mov	r4,r16
    9a98:	0009e280 	call	9e28 <__clzsi2>
    9a9c:	01010784 	movi	r4,1054
    9aa0:	2089c83a 	sub	r4,r4,r2
    9aa4:	114002c8 	cmpgei	r5,r2,11
    9aa8:	20c1ffcc 	andi	r3,r4,2047
    9aac:	2800161e 	bne	r5,zero,9b08 <__floatsidf+0x94>
    9ab0:	010002c4 	movi	r4,11
    9ab4:	2089c83a 	sub	r4,r4,r2
    9ab8:	810ad83a 	srl	r5,r16,r4
    9abc:	01000434 	movhi	r4,16
    9ac0:	10800544 	addi	r2,r2,21
    9ac4:	213fffc4 	addi	r4,r4,-1
    9ac8:	8084983a 	sll	r2,r16,r2
    9acc:	290a703a 	and	r5,r5,r4
    9ad0:	00000406 	br	9ae4 <__floatsidf+0x70>
    9ad4:	0023883a 	mov	r17,zero
    9ad8:	0007883a 	mov	r3,zero
    9adc:	000b883a 	mov	r5,zero
    9ae0:	0005883a 	mov	r2,zero
    9ae4:	1808953a 	slli	r4,r3,20
    9ae8:	880697fa 	slli	r3,r17,31
    9aec:	2148b03a 	or	r4,r4,r5
    9af0:	20c6b03a 	or	r3,r4,r3
    9af4:	dfc00217 	ldw	ra,8(sp)
    9af8:	dc400117 	ldw	r17,4(sp)
    9afc:	dc000017 	ldw	r16,0(sp)
    9b00:	dec00304 	addi	sp,sp,12
    9b04:	f800283a 	ret
    9b08:	10bffd44 	addi	r2,r2,-11
    9b0c:	808a983a 	sll	r5,r16,r2
    9b10:	00800434 	movhi	r2,16
    9b14:	10bfffc4 	addi	r2,r2,-1
    9b18:	288a703a 	and	r5,r5,r2
    9b1c:	0005883a 	mov	r2,zero
    9b20:	003ff006 	br	9ae4 <__floatsidf+0x70>
    9b24:	0121c83a 	sub	r16,zero,r4
    9b28:	003fda06 	br	9a94 <__floatsidf+0x20>

00009b2c <__floatunsidf>:
    9b2c:	defffe04 	addi	sp,sp,-8
    9b30:	dc000015 	stw	r16,0(sp)
    9b34:	dfc00115 	stw	ra,4(sp)
    9b38:	2021883a 	mov	r16,r4
    9b3c:	20000f26 	beq	r4,zero,9b7c <__floatunsidf+0x50>
    9b40:	0009e280 	call	9e28 <__clzsi2>
    9b44:	00c10784 	movi	r3,1054
    9b48:	1887c83a 	sub	r3,r3,r2
    9b4c:	110002c8 	cmpgei	r4,r2,11
    9b50:	18c1ffcc 	andi	r3,r3,2047
    9b54:	2000121e 	bne	r4,zero,9ba0 <__floatunsidf+0x74>
    9b58:	014002c4 	movi	r5,11
    9b5c:	288bc83a 	sub	r5,r5,r2
    9b60:	814ad83a 	srl	r5,r16,r5
    9b64:	01000434 	movhi	r4,16
    9b68:	10800544 	addi	r2,r2,21
    9b6c:	213fffc4 	addi	r4,r4,-1
    9b70:	80a0983a 	sll	r16,r16,r2
    9b74:	290a703a 	and	r5,r5,r4
    9b78:	00000206 	br	9b84 <__floatunsidf+0x58>
    9b7c:	0007883a 	mov	r3,zero
    9b80:	000b883a 	mov	r5,zero
    9b84:	1806953a 	slli	r3,r3,20
    9b88:	8005883a 	mov	r2,r16
    9b8c:	1946b03a 	or	r3,r3,r5
    9b90:	dfc00117 	ldw	ra,4(sp)
    9b94:	dc000017 	ldw	r16,0(sp)
    9b98:	dec00204 	addi	sp,sp,8
    9b9c:	f800283a 	ret
    9ba0:	117ffd44 	addi	r5,r2,-11
    9ba4:	814a983a 	sll	r5,r16,r5
    9ba8:	00800434 	movhi	r2,16
    9bac:	10bfffc4 	addi	r2,r2,-1
    9bb0:	288a703a 	and	r5,r5,r2
    9bb4:	0021883a 	mov	r16,zero
    9bb8:	003ff206 	br	9b84 <__floatunsidf+0x58>

00009bbc <__extendsfdf2>:
    9bbc:	200ad5fa 	srli	r5,r4,23
    9bc0:	defffd04 	addi	sp,sp,-12
    9bc4:	dc000015 	stw	r16,0(sp)
    9bc8:	29403fcc 	andi	r5,r5,255
    9bcc:	04002034 	movhi	r16,128
    9bd0:	28800044 	addi	r2,r5,1
    9bd4:	dc400115 	stw	r17,4(sp)
    9bd8:	843fffc4 	addi	r16,r16,-1
    9bdc:	dfc00215 	stw	ra,8(sp)
    9be0:	10803f8c 	andi	r2,r2,254
    9be4:	2022d7fa 	srli	r17,r4,31
    9be8:	8120703a 	and	r16,r16,r4
    9bec:	10000d26 	beq	r2,zero,9c24 <__extendsfdf2+0x68>
    9bf0:	8008d0fa 	srli	r4,r16,3
    9bf4:	8020977a 	slli	r16,r16,29
    9bf8:	28c0e004 	addi	r3,r5,896
    9bfc:	180a953a 	slli	r5,r3,20
    9c00:	880697fa 	slli	r3,r17,31
    9c04:	8005883a 	mov	r2,r16
    9c08:	290ab03a 	or	r5,r5,r4
    9c0c:	28c6b03a 	or	r3,r5,r3
    9c10:	dfc00217 	ldw	ra,8(sp)
    9c14:	dc400117 	ldw	r17,4(sp)
    9c18:	dc000017 	ldw	r16,0(sp)
    9c1c:	dec00304 	addi	sp,sp,12
    9c20:	f800283a 	ret
    9c24:	2800111e 	bne	r5,zero,9c6c <__extendsfdf2+0xb0>
    9c28:	80001926 	beq	r16,zero,9c90 <__extendsfdf2+0xd4>
    9c2c:	8009883a 	mov	r4,r16
    9c30:	0009e280 	call	9e28 <__clzsi2>
    9c34:	10c002c8 	cmpgei	r3,r2,11
    9c38:	18001b1e 	bne	r3,zero,9ca8 <__extendsfdf2+0xec>
    9c3c:	010002c4 	movi	r4,11
    9c40:	2089c83a 	sub	r4,r4,r2
    9c44:	10c00544 	addi	r3,r2,21
    9c48:	810ad83a 	srl	r5,r16,r4
    9c4c:	80e0983a 	sll	r16,r16,r3
    9c50:	01000434 	movhi	r4,16
    9c54:	00c0e244 	movi	r3,905
    9c58:	213fffc4 	addi	r4,r4,-1
    9c5c:	1887c83a 	sub	r3,r3,r2
    9c60:	2908703a 	and	r4,r5,r4
    9c64:	18c1ffcc 	andi	r3,r3,2047
    9c68:	003fe406 	br	9bfc <__extendsfdf2+0x40>
    9c6c:	80000b26 	beq	r16,zero,9c9c <__extendsfdf2+0xe0>
    9c70:	800ad0fa 	srli	r5,r16,3
    9c74:	00800434 	movhi	r2,16
    9c78:	10bfffc4 	addi	r2,r2,-1
    9c7c:	29000234 	orhi	r4,r5,8
    9c80:	8020977a 	slli	r16,r16,29
    9c84:	2088703a 	and	r4,r4,r2
    9c88:	00c1ffc4 	movi	r3,2047
    9c8c:	003fdb06 	br	9bfc <__extendsfdf2+0x40>
    9c90:	0007883a 	mov	r3,zero
    9c94:	0009883a 	mov	r4,zero
    9c98:	003fd806 	br	9bfc <__extendsfdf2+0x40>
    9c9c:	00c1ffc4 	movi	r3,2047
    9ca0:	0009883a 	mov	r4,zero
    9ca4:	003fd506 	br	9bfc <__extendsfdf2+0x40>
    9ca8:	113ffd44 	addi	r4,r2,-11
    9cac:	810a983a 	sll	r5,r16,r4
    9cb0:	0021883a 	mov	r16,zero
    9cb4:	003fe606 	br	9c50 <__extendsfdf2+0x94>

00009cb8 <__truncdfsf2>:
    9cb8:	2804d53a 	srli	r2,r5,20
    9cbc:	00c00434 	movhi	r3,16
    9cc0:	18ffffc4 	addi	r3,r3,-1
    9cc4:	28c6703a 	and	r3,r5,r3
    9cc8:	180c90fa 	slli	r6,r3,3
    9ccc:	1081ffcc 	andi	r2,r2,2047
    9cd0:	2006d77a 	srli	r3,r4,29
    9cd4:	11c00044 	addi	r7,r2,1
    9cd8:	39c1ff8c 	andi	r7,r7,2046
    9cdc:	280ad7fa 	srli	r5,r5,31
    9ce0:	201090fa 	slli	r8,r4,3
    9ce4:	1986b03a 	or	r3,r3,r6
    9ce8:	38000b26 	beq	r7,zero,9d18 <__truncdfsf2+0x60>
    9cec:	11bf2004 	addi	r6,r2,-896
    9cf0:	31c03fc8 	cmpgei	r7,r6,255
    9cf4:	38001226 	beq	r7,zero,9d40 <__truncdfsf2+0x88>
    9cf8:	00bfffc4 	movi	r2,-1
    9cfc:	0007883a 	mov	r3,zero
    9d00:	10803fcc 	andi	r2,r2,255
    9d04:	100495fa 	slli	r2,r2,23
    9d08:	280a97fa 	slli	r5,r5,31
    9d0c:	10c4b03a 	or	r2,r2,r3
    9d10:	1144b03a 	or	r2,r2,r5
    9d14:	f800283a 	ret
    9d18:	1a10b03a 	or	r8,r3,r8
    9d1c:	1000041e 	bne	r2,zero,9d30 <__truncdfsf2+0x78>
    9d20:	40001d1e 	bne	r8,zero,9d98 <__truncdfsf2+0xe0>
    9d24:	0005883a 	mov	r2,zero
    9d28:	0007883a 	mov	r3,zero
    9d2c:	003ff406 	br	9d00 <__truncdfsf2+0x48>
    9d30:	403ff126 	beq	r8,zero,9cf8 <__truncdfsf2+0x40>
    9d34:	18c01034 	orhi	r3,r3,64
    9d38:	00bfffc4 	movi	r2,-1
    9d3c:	003ff006 	br	9d00 <__truncdfsf2+0x48>
    9d40:	0180170e 	bge	zero,r6,9da0 <__truncdfsf2+0xe8>
    9d44:	200891ba 	slli	r4,r4,6
    9d48:	180690fa 	slli	r3,r3,3
    9d4c:	4010d77a 	srli	r8,r8,29
    9d50:	2008c03a 	cmpne	r4,r4,zero
    9d54:	20c6b03a 	or	r3,r4,r3
    9d58:	1a06b03a 	or	r3,r3,r8
    9d5c:	188001cc 	andi	r2,r3,7
    9d60:	10002f26 	beq	r2,zero,9e20 <__truncdfsf2+0x168>
    9d64:	188003cc 	andi	r2,r3,15
    9d68:	10800118 	cmpnei	r2,r2,4
    9d6c:	10000126 	beq	r2,zero,9d74 <__truncdfsf2+0xbc>
    9d70:	18c00104 	addi	r3,r3,4
    9d74:	1881002c 	andhi	r2,r3,1024
    9d78:	10002926 	beq	r2,zero,9e20 <__truncdfsf2+0x168>
    9d7c:	30800044 	addi	r2,r6,1
    9d80:	11003fe0 	cmpeqi	r4,r2,255
    9d84:	203fdc1e 	bne	r4,zero,9cf8 <__truncdfsf2+0x40>
    9d88:	180691ba 	slli	r3,r3,6
    9d8c:	1806d27a 	srli	r3,r3,9
    9d90:	003fdb06 	br	9d00 <__truncdfsf2+0x48>
    9d94:	0005883a 	mov	r2,zero
    9d98:	00c00144 	movi	r3,5
    9d9c:	003ffa06 	br	9d88 <__truncdfsf2+0xd0>
    9da0:	313ffa50 	cmplti	r4,r6,-23
    9da4:	203ffb1e 	bne	r4,zero,9d94 <__truncdfsf2+0xdc>
    9da8:	01c00784 	movi	r7,30
    9dac:	398fc83a 	sub	r7,r7,r6
    9db0:	3a400808 	cmpgei	r9,r7,32
    9db4:	19002034 	orhi	r4,r3,128
    9db8:	48001126 	beq	r9,zero,9e00 <__truncdfsf2+0x148>
    9dbc:	00ffff84 	movi	r3,-2
    9dc0:	198dc83a 	sub	r6,r3,r6
    9dc4:	39c00820 	cmpeqi	r7,r7,32
    9dc8:	218cd83a 	srl	r6,r4,r6
    9dcc:	3800031e 	bne	r7,zero,9ddc <__truncdfsf2+0x124>
    9dd0:	10ff2884 	addi	r3,r2,-862
    9dd4:	20c8983a 	sll	r4,r4,r3
    9dd8:	4110b03a 	or	r8,r8,r4
    9ddc:	4006c03a 	cmpne	r3,r8,zero
    9de0:	1986b03a 	or	r3,r3,r6
    9de4:	188001cc 	andi	r2,r3,7
    9de8:	000d883a 	mov	r6,zero
    9dec:	103fdd1e 	bne	r2,zero,9d64 <__truncdfsf2+0xac>
    9df0:	1881002c 	andhi	r2,r3,1024
    9df4:	103fe426 	beq	r2,zero,9d88 <__truncdfsf2+0xd0>
    9df8:	00800044 	movi	r2,1
    9dfc:	003fe206 	br	9d88 <__truncdfsf2+0xd0>
    9e00:	10ff2084 	addi	r3,r2,-894
    9e04:	40c4983a 	sll	r2,r8,r3
    9e08:	20c8983a 	sll	r4,r4,r3
    9e0c:	41c6d83a 	srl	r3,r8,r7
    9e10:	1004c03a 	cmpne	r2,r2,zero
    9e14:	1108b03a 	or	r4,r2,r4
    9e18:	1906b03a 	or	r3,r3,r4
    9e1c:	003ff106 	br	9de4 <__truncdfsf2+0x12c>
    9e20:	3005883a 	mov	r2,r6
    9e24:	003fd806 	br	9d88 <__truncdfsf2+0xd0>

00009e28 <__clzsi2>:
    9e28:	00bfffd4 	movui	r2,65535
    9e2c:	11000436 	bltu	r2,r4,9e40 <__clzsi2+0x18>
    9e30:	20804030 	cmpltui	r2,r4,256
    9e34:	10000e26 	beq	r2,zero,9e70 <__clzsi2+0x48>
    9e38:	01400804 	movi	r5,32
    9e3c:	00000406 	br	9e50 <__clzsi2+0x28>
    9e40:	00804034 	movhi	r2,256
    9e44:	20800736 	bltu	r4,r2,9e64 <__clzsi2+0x3c>
    9e48:	2008d63a 	srli	r4,r4,24
    9e4c:	01400204 	movi	r5,8
    9e50:	00c00074 	movhi	r3,1
    9e54:	20c7883a 	add	r3,r4,r3
    9e58:	189f2503 	ldbu	r2,31892(r3)
    9e5c:	2885c83a 	sub	r2,r5,r2
    9e60:	f800283a 	ret
    9e64:	2008d43a 	srli	r4,r4,16
    9e68:	01400404 	movi	r5,16
    9e6c:	003ff806 	br	9e50 <__clzsi2+0x28>
    9e70:	2008d23a 	srli	r4,r4,8
    9e74:	01400604 	movi	r5,24
    9e78:	003ff506 	br	9e50 <__clzsi2+0x28>

00009e7c <__errno>:
    9e7c:	008000b4 	movhi	r2,2
    9e80:	10a7e517 	ldw	r2,-24684(r2)
    9e84:	f800283a 	ret

00009e88 <malloc>:
    9e88:	008000b4 	movhi	r2,2
    9e8c:	200b883a 	mov	r5,r4
    9e90:	1127e517 	ldw	r4,-24684(r2)
    9e94:	0009ea81 	jmpi	9ea8 <_malloc_r>

00009e98 <free>:
    9e98:	008000b4 	movhi	r2,2
    9e9c:	200b883a 	mov	r5,r4
    9ea0:	1127e517 	ldw	r4,-24684(r2)
    9ea4:	000ed701 	jmpi	ed70 <_free_r>

00009ea8 <_malloc_r>:
    9ea8:	defff604 	addi	sp,sp,-40
    9eac:	dc400115 	stw	r17,4(sp)
    9eb0:	2c4002c4 	addi	r17,r5,11
    9eb4:	dc800215 	stw	r18,8(sp)
    9eb8:	dfc00915 	stw	ra,36(sp)
    9ebc:	df000815 	stw	fp,32(sp)
    9ec0:	ddc00715 	stw	r23,28(sp)
    9ec4:	dd800615 	stw	r22,24(sp)
    9ec8:	dd400515 	stw	r21,20(sp)
    9ecc:	dd000415 	stw	r20,16(sp)
    9ed0:	dcc00315 	stw	r19,12(sp)
    9ed4:	dc000015 	stw	r16,0(sp)
    9ed8:	888005e8 	cmpgeui	r2,r17,23
    9edc:	2025883a 	mov	r18,r4
    9ee0:	10001b1e 	bne	r2,zero,9f50 <_malloc_r+0xa8>
    9ee4:	29400468 	cmpgeui	r5,r5,17
    9ee8:	2800821e 	bne	r5,zero,a0f4 <_malloc_r+0x24c>
    9eec:	0014f3c0 	call	14f3c <__malloc_lock>
    9ef0:	04400404 	movi	r17,16
    9ef4:	00800604 	movi	r2,24
    9ef8:	01c00084 	movi	r7,2
    9efc:	04c000b4 	movhi	r19,2
    9f00:	9ce1d704 	addi	r19,r19,-30884
    9f04:	9885883a 	add	r2,r19,r2
    9f08:	14000117 	ldw	r16,4(r2)
    9f0c:	10fffe04 	addi	r3,r2,-8
    9f10:	80c08b26 	beq	r16,r3,a140 <_malloc_r+0x298>
    9f14:	80800117 	ldw	r2,4(r16)
    9f18:	81000317 	ldw	r4,12(r16)
    9f1c:	00ffff04 	movi	r3,-4
    9f20:	10c4703a 	and	r2,r2,r3
    9f24:	81400217 	ldw	r5,8(r16)
    9f28:	8085883a 	add	r2,r16,r2
    9f2c:	10c00117 	ldw	r3,4(r2)
    9f30:	29000315 	stw	r4,12(r5)
    9f34:	21400215 	stw	r5,8(r4)
    9f38:	18c00054 	ori	r3,r3,1
    9f3c:	10c00115 	stw	r3,4(r2)
    9f40:	9009883a 	mov	r4,r18
    9f44:	0014f600 	call	14f60 <__malloc_unlock>
    9f48:	80800204 	addi	r2,r16,8
    9f4c:	00006c06 	br	a100 <_malloc_r+0x258>
    9f50:	00bffe04 	movi	r2,-8
    9f54:	88a2703a 	and	r17,r17,r2
    9f58:	88006616 	blt	r17,zero,a0f4 <_malloc_r+0x24c>
    9f5c:	89406536 	bltu	r17,r5,a0f4 <_malloc_r+0x24c>
    9f60:	0014f3c0 	call	14f3c <__malloc_lock>
    9f64:	88807e28 	cmpgeui	r2,r17,504
    9f68:	10012226 	beq	r2,zero,a3f4 <_malloc_r+0x54c>
    9f6c:	8804d27a 	srli	r2,r17,9
    9f70:	10006f26 	beq	r2,zero,a130 <_malloc_r+0x288>
    9f74:	10c00168 	cmpgeui	r3,r2,5
    9f78:	1800fe1e 	bne	r3,zero,a374 <_malloc_r+0x4cc>
    9f7c:	8804d1ba 	srli	r2,r17,6
    9f80:	11c00e44 	addi	r7,r2,57
    9f84:	380890fa 	slli	r4,r7,3
    9f88:	12000e04 	addi	r8,r2,56
    9f8c:	04c000b4 	movhi	r19,2
    9f90:	9ce1d704 	addi	r19,r19,-30884
    9f94:	9909883a 	add	r4,r19,r4
    9f98:	24000117 	ldw	r16,4(r4)
    9f9c:	213ffe04 	addi	r4,r4,-8
    9fa0:	24000b26 	beq	r4,r16,9fd0 <_malloc_r+0x128>
    9fa4:	01bfff04 	movi	r6,-4
    9fa8:	00000306 	br	9fb8 <_malloc_r+0x110>
    9fac:	1800d60e 	bge	r3,zero,a308 <_malloc_r+0x460>
    9fb0:	84000317 	ldw	r16,12(r16)
    9fb4:	24000626 	beq	r4,r16,9fd0 <_malloc_r+0x128>
    9fb8:	80800117 	ldw	r2,4(r16)
    9fbc:	1184703a 	and	r2,r2,r6
    9fc0:	1447c83a 	sub	r3,r2,r17
    9fc4:	19400408 	cmpgei	r5,r3,16
    9fc8:	283ff826 	beq	r5,zero,9fac <_malloc_r+0x104>
    9fcc:	400f883a 	mov	r7,r8
    9fd0:	9c000417 	ldw	r16,16(r19)
    9fd4:	024000b4 	movhi	r9,2
    9fd8:	4a61d904 	addi	r9,r9,-30876
    9fdc:	82405f26 	beq	r16,r9,a15c <_malloc_r+0x2b4>
    9fe0:	80c00117 	ldw	r3,4(r16)
    9fe4:	00bfff04 	movi	r2,-4
    9fe8:	1884703a 	and	r2,r3,r2
    9fec:	1447c83a 	sub	r3,r2,r17
    9ff0:	19000410 	cmplti	r4,r3,16
    9ff4:	20010a26 	beq	r4,zero,a420 <_malloc_r+0x578>
    9ff8:	9a400515 	stw	r9,20(r19)
    9ffc:	9a400415 	stw	r9,16(r19)
    a000:	1800ff0e 	bge	r3,zero,a400 <_malloc_r+0x558>
    a004:	10c08028 	cmpgeui	r3,r2,512
    a008:	1800c11e 	bne	r3,zero,a310 <_malloc_r+0x468>
    a00c:	1006d0fa 	srli	r3,r2,3
    a010:	1008d17a 	srli	r4,r2,5
    a014:	00800044 	movi	r2,1
    a018:	18c00044 	addi	r3,r3,1
    a01c:	180690fa 	slli	r3,r3,3
    a020:	99400117 	ldw	r5,4(r19)
    a024:	1104983a 	sll	r2,r2,r4
    a028:	98c7883a 	add	r3,r19,r3
    a02c:	19000017 	ldw	r4,0(r3)
    a030:	1144b03a 	or	r2,r2,r5
    a034:	197ffe04 	addi	r5,r3,-8
    a038:	81400315 	stw	r5,12(r16)
    a03c:	81000215 	stw	r4,8(r16)
    a040:	98800115 	stw	r2,4(r19)
    a044:	1c000015 	stw	r16,0(r3)
    a048:	24000315 	stw	r16,12(r4)
    a04c:	3807d0ba 	srai	r3,r7,2
    a050:	01000044 	movi	r4,1
    a054:	20c8983a 	sll	r4,r4,r3
    a058:	11004536 	bltu	r2,r4,a170 <_malloc_r+0x2c8>
    a05c:	2086703a 	and	r3,r4,r2
    a060:	18000a1e 	bne	r3,zero,a08c <_malloc_r+0x1e4>
    a064:	00ffff04 	movi	r3,-4
    a068:	2109883a 	add	r4,r4,r4
    a06c:	38ce703a 	and	r7,r7,r3
    a070:	2086703a 	and	r3,r4,r2
    a074:	39c00104 	addi	r7,r7,4
    a078:	1800041e 	bne	r3,zero,a08c <_malloc_r+0x1e4>
    a07c:	2109883a 	add	r4,r4,r4
    a080:	2086703a 	and	r3,r4,r2
    a084:	39c00104 	addi	r7,r7,4
    a088:	183ffc26 	beq	r3,zero,a07c <_malloc_r+0x1d4>
    a08c:	02bfff04 	movi	r10,-4
    a090:	381690fa 	slli	r11,r7,3
    a094:	3819883a 	mov	r12,r7
    a098:	9ad7883a 	add	r11,r19,r11
    a09c:	5811883a 	mov	r8,r11
    a0a0:	40800317 	ldw	r2,12(r8)
    a0a4:	4080bc26 	beq	r8,r2,a398 <_malloc_r+0x4f0>
    a0a8:	10c00117 	ldw	r3,4(r2)
    a0ac:	1021883a 	mov	r16,r2
    a0b0:	10800317 	ldw	r2,12(r2)
    a0b4:	1a86703a 	and	r3,r3,r10
    a0b8:	1c4bc83a 	sub	r5,r3,r17
    a0bc:	29800410 	cmplti	r6,r5,16
    a0c0:	3000ba26 	beq	r6,zero,a3ac <_malloc_r+0x504>
    a0c4:	283ff716 	blt	r5,zero,a0a4 <_malloc_r+0x1fc>
    a0c8:	80c7883a 	add	r3,r16,r3
    a0cc:	19400117 	ldw	r5,4(r3)
    a0d0:	81800217 	ldw	r6,8(r16)
    a0d4:	9009883a 	mov	r4,r18
    a0d8:	29400054 	ori	r5,r5,1
    a0dc:	19400115 	stw	r5,4(r3)
    a0e0:	30800315 	stw	r2,12(r6)
    a0e4:	11800215 	stw	r6,8(r2)
    a0e8:	0014f600 	call	14f60 <__malloc_unlock>
    a0ec:	80800204 	addi	r2,r16,8
    a0f0:	00000306 	br	a100 <_malloc_r+0x258>
    a0f4:	00800304 	movi	r2,12
    a0f8:	90800015 	stw	r2,0(r18)
    a0fc:	0005883a 	mov	r2,zero
    a100:	dfc00917 	ldw	ra,36(sp)
    a104:	df000817 	ldw	fp,32(sp)
    a108:	ddc00717 	ldw	r23,28(sp)
    a10c:	dd800617 	ldw	r22,24(sp)
    a110:	dd400517 	ldw	r21,20(sp)
    a114:	dd000417 	ldw	r20,16(sp)
    a118:	dcc00317 	ldw	r19,12(sp)
    a11c:	dc800217 	ldw	r18,8(sp)
    a120:	dc400117 	ldw	r17,4(sp)
    a124:	dc000017 	ldw	r16,0(sp)
    a128:	dec00a04 	addi	sp,sp,40
    a12c:	f800283a 	ret
    a130:	01008004 	movi	r4,512
    a134:	01c01004 	movi	r7,64
    a138:	02000fc4 	movi	r8,63
    a13c:	003f9306 	br	9f8c <_malloc_r+0xe4>
    a140:	14000317 	ldw	r16,12(r2)
    a144:	39c00084 	addi	r7,r7,2
    a148:	143f721e 	bne	r2,r16,9f14 <_malloc_r+0x6c>
    a14c:	9c000417 	ldw	r16,16(r19)
    a150:	024000b4 	movhi	r9,2
    a154:	4a61d904 	addi	r9,r9,-30876
    a158:	827fa11e 	bne	r16,r9,9fe0 <_malloc_r+0x138>
    a15c:	3807d0ba 	srai	r3,r7,2
    a160:	01000044 	movi	r4,1
    a164:	98800117 	ldw	r2,4(r19)
    a168:	20c8983a 	sll	r4,r4,r3
    a16c:	113fbb2e 	bgeu	r2,r4,a05c <_malloc_r+0x1b4>
    a170:	9c000217 	ldw	r16,8(r19)
    a174:	00bfff04 	movi	r2,-4
    a178:	85400117 	ldw	r21,4(r16)
    a17c:	a8ac703a 	and	r22,r21,r2
    a180:	b4400336 	bltu	r22,r17,a190 <_malloc_r+0x2e8>
    a184:	b445c83a 	sub	r2,r22,r17
    a188:	10c00408 	cmpgei	r3,r2,16
    a18c:	1800541e 	bne	r3,zero,a2e0 <_malloc_r+0x438>
    a190:	008000b4 	movhi	r2,2
    a194:	10a7e617 	ldw	r2,-24680(r2)
    a198:	00c000b4 	movhi	r3,2
    a19c:	1d6f1817 	ldw	r21,-17312(r3)
    a1a0:	10bfffd8 	cmpnei	r2,r2,-1
    a1a4:	85b9883a 	add	fp,r16,r22
    a1a8:	8d6b883a 	add	r21,r17,r21
    a1ac:	1000d626 	beq	r2,zero,a508 <_malloc_r+0x660>
    a1b0:	ad4403c4 	addi	r21,r21,4111
    a1b4:	00bc0004 	movi	r2,-4096
    a1b8:	a8aa703a 	and	r21,r21,r2
    a1bc:	a80b883a 	mov	r5,r21
    a1c0:	9009883a 	mov	r4,r18
    a1c4:	000a8ec0 	call	a8ec <_sbrk_r>
    a1c8:	102f883a 	mov	r23,r2
    a1cc:	10bfffd8 	cmpnei	r2,r2,-1
    a1d0:	1000a826 	beq	r2,zero,a474 <_malloc_r+0x5cc>
    a1d4:	bf00a636 	bltu	r23,fp,a470 <_malloc_r+0x5c8>
    a1d8:	008000b4 	movhi	r2,2
    a1dc:	152f2317 	ldw	r20,-17268(r2)
    a1e0:	ad29883a 	add	r20,r21,r20
    a1e4:	152f2315 	stw	r20,-17268(r2)
    a1e8:	a007883a 	mov	r3,r20
    a1ec:	e5c0ec26 	beq	fp,r23,a5a0 <_malloc_r+0x6f8>
    a1f0:	008000b4 	movhi	r2,2
    a1f4:	10a7e617 	ldw	r2,-24680(r2)
    a1f8:	10bfffd8 	cmpnei	r2,r2,-1
    a1fc:	1000ef26 	beq	r2,zero,a5bc <_malloc_r+0x714>
    a200:	bf39c83a 	sub	fp,r23,fp
    a204:	e0c7883a 	add	r3,fp,r3
    a208:	008000b4 	movhi	r2,2
    a20c:	10ef2315 	stw	r3,-17268(r2)
    a210:	bf0001cc 	andi	fp,r23,7
    a214:	e000c526 	beq	fp,zero,a52c <_malloc_r+0x684>
    a218:	bf2fc83a 	sub	r23,r23,fp
    a21c:	bdc00204 	addi	r23,r23,8
    a220:	05040204 	movi	r20,4104
    a224:	a729c83a 	sub	r20,r20,fp
    a228:	bd6b883a 	add	r21,r23,r21
    a22c:	a569c83a 	sub	r20,r20,r21
    a230:	a503ffcc 	andi	r20,r20,4095
    a234:	a00b883a 	mov	r5,r20
    a238:	9009883a 	mov	r4,r18
    a23c:	000a8ec0 	call	a8ec <_sbrk_r>
    a240:	10ffffe0 	cmpeqi	r3,r2,-1
    a244:	1800f31e 	bne	r3,zero,a614 <_malloc_r+0x76c>
    a248:	15c5c83a 	sub	r2,r2,r23
    a24c:	152b883a 	add	r21,r2,r20
    a250:	008000b4 	movhi	r2,2
    a254:	116f2317 	ldw	r5,-17268(r2)
    a258:	9dc00215 	stw	r23,8(r19)
    a25c:	ad400054 	ori	r21,r21,1
    a260:	a169883a 	add	r20,r20,r5
    a264:	152f2315 	stw	r20,-17268(r2)
    a268:	bd400115 	stw	r21,4(r23)
    a26c:	84c0d626 	beq	r16,r19,a5c8 <_malloc_r+0x720>
    a270:	b0800428 	cmpgeui	r2,r22,16
    a274:	1000d626 	beq	r2,zero,a5d0 <_malloc_r+0x728>
    a278:	80c00117 	ldw	r3,4(r16)
    a27c:	013ffe04 	movi	r4,-8
    a280:	b0bffd04 	addi	r2,r22,-12
    a284:	1104703a 	and	r2,r2,r4
    a288:	18c0004c 	andi	r3,r3,1
    a28c:	1886b03a 	or	r3,r3,r2
    a290:	80c00115 	stw	r3,4(r16)
    a294:	01000144 	movi	r4,5
    a298:	8087883a 	add	r3,r16,r2
    a29c:	19000115 	stw	r4,4(r3)
    a2a0:	19000215 	stw	r4,8(r3)
    a2a4:	10800428 	cmpgeui	r2,r2,16
    a2a8:	1000df1e 	bne	r2,zero,a628 <_malloc_r+0x780>
    a2ac:	bd400117 	ldw	r21,4(r23)
    a2b0:	b821883a 	mov	r16,r23
    a2b4:	008000b4 	movhi	r2,2
    a2b8:	10af1717 	ldw	r2,-17316(r2)
    a2bc:	1500022e 	bgeu	r2,r20,a2c8 <_malloc_r+0x420>
    a2c0:	008000b4 	movhi	r2,2
    a2c4:	152f1715 	stw	r20,-17316(r2)
    a2c8:	008000b4 	movhi	r2,2
    a2cc:	10af1617 	ldw	r2,-17320(r2)
    a2d0:	15006a2e 	bgeu	r2,r20,a47c <_malloc_r+0x5d4>
    a2d4:	008000b4 	movhi	r2,2
    a2d8:	152f1615 	stw	r20,-17320(r2)
    a2dc:	00006706 	br	a47c <_malloc_r+0x5d4>
    a2e0:	88c00054 	ori	r3,r17,1
    a2e4:	80c00115 	stw	r3,4(r16)
    a2e8:	8463883a 	add	r17,r16,r17
    a2ec:	10800054 	ori	r2,r2,1
    a2f0:	9c400215 	stw	r17,8(r19)
    a2f4:	88800115 	stw	r2,4(r17)
    a2f8:	9009883a 	mov	r4,r18
    a2fc:	0014f600 	call	14f60 <__malloc_unlock>
    a300:	80800204 	addi	r2,r16,8
    a304:	003f7e06 	br	a100 <_malloc_r+0x258>
    a308:	81000317 	ldw	r4,12(r16)
    a30c:	003f0506 	br	9f24 <_malloc_r+0x7c>
    a310:	1006d27a 	srli	r3,r2,9
    a314:	19000168 	cmpgeui	r4,r3,5
    a318:	20005026 	beq	r4,zero,a45c <_malloc_r+0x5b4>
    a31c:	19000568 	cmpgeui	r4,r3,21
    a320:	20008c1e 	bne	r4,zero,a554 <_malloc_r+0x6ac>
    a324:	19401704 	addi	r5,r3,92
    a328:	280a90fa 	slli	r5,r5,3
    a32c:	190016c4 	addi	r4,r3,91
    a330:	994b883a 	add	r5,r19,r5
    a334:	28c00017 	ldw	r3,0(r5)
    a338:	297ffe04 	addi	r5,r5,-8
    a33c:	28c07426 	beq	r5,r3,a510 <_malloc_r+0x668>
    a340:	01bfff04 	movi	r6,-4
    a344:	19000117 	ldw	r4,4(r3)
    a348:	2188703a 	and	r4,r4,r6
    a34c:	1100022e 	bgeu	r2,r4,a358 <_malloc_r+0x4b0>
    a350:	18c00217 	ldw	r3,8(r3)
    a354:	28fffb1e 	bne	r5,r3,a344 <_malloc_r+0x49c>
    a358:	19400317 	ldw	r5,12(r3)
    a35c:	98800117 	ldw	r2,4(r19)
    a360:	81400315 	stw	r5,12(r16)
    a364:	80c00215 	stw	r3,8(r16)
    a368:	2c000215 	stw	r16,8(r5)
    a36c:	1c000315 	stw	r16,12(r3)
    a370:	003f3606 	br	a04c <_malloc_r+0x1a4>
    a374:	10c00568 	cmpgeui	r3,r2,21
    a378:	18004a26 	beq	r3,zero,a4a4 <_malloc_r+0x5fc>
    a37c:	10c01568 	cmpgeui	r3,r2,85
    a380:	18007b1e 	bne	r3,zero,a570 <_malloc_r+0x6c8>
    a384:	8804d33a 	srli	r2,r17,12
    a388:	11c01bc4 	addi	r7,r2,111
    a38c:	380890fa 	slli	r4,r7,3
    a390:	12001b84 	addi	r8,r2,110
    a394:	003efd06 	br	9f8c <_malloc_r+0xe4>
    a398:	63000044 	addi	r12,r12,1
    a39c:	608000cc 	andi	r2,r12,3
    a3a0:	42000204 	addi	r8,r8,8
    a3a4:	103f3e1e 	bne	r2,zero,a0a0 <_malloc_r+0x1f8>
    a3a8:	00004506 	br	a4c0 <_malloc_r+0x618>
    a3ac:	81000217 	ldw	r4,8(r16)
    a3b0:	89800054 	ori	r6,r17,1
    a3b4:	81800115 	stw	r6,4(r16)
    a3b8:	20800315 	stw	r2,12(r4)
    a3bc:	11000215 	stw	r4,8(r2)
    a3c0:	8463883a 	add	r17,r16,r17
    a3c4:	9c400515 	stw	r17,20(r19)
    a3c8:	9c400415 	stw	r17,16(r19)
    a3cc:	28800054 	ori	r2,r5,1
    a3d0:	88800115 	stw	r2,4(r17)
    a3d4:	8a400315 	stw	r9,12(r17)
    a3d8:	8a400215 	stw	r9,8(r17)
    a3dc:	80c7883a 	add	r3,r16,r3
    a3e0:	19400015 	stw	r5,0(r3)
    a3e4:	9009883a 	mov	r4,r18
    a3e8:	0014f600 	call	14f60 <__malloc_unlock>
    a3ec:	80800204 	addi	r2,r16,8
    a3f0:	003f4306 	br	a100 <_malloc_r+0x258>
    a3f4:	880ed0fa 	srli	r7,r17,3
    a3f8:	88800204 	addi	r2,r17,8
    a3fc:	003ebf06 	br	9efc <_malloc_r+0x54>
    a400:	8085883a 	add	r2,r16,r2
    a404:	10c00117 	ldw	r3,4(r2)
    a408:	9009883a 	mov	r4,r18
    a40c:	18c00054 	ori	r3,r3,1
    a410:	10c00115 	stw	r3,4(r2)
    a414:	0014f600 	call	14f60 <__malloc_unlock>
    a418:	80800204 	addi	r2,r16,8
    a41c:	003f3806 	br	a100 <_malloc_r+0x258>
    a420:	89000054 	ori	r4,r17,1
    a424:	81000115 	stw	r4,4(r16)
    a428:	8463883a 	add	r17,r16,r17
    a42c:	9c400515 	stw	r17,20(r19)
    a430:	9c400415 	stw	r17,16(r19)
    a434:	19000054 	ori	r4,r3,1
    a438:	89000115 	stw	r4,4(r17)
    a43c:	8085883a 	add	r2,r16,r2
    a440:	8a400315 	stw	r9,12(r17)
    a444:	8a400215 	stw	r9,8(r17)
    a448:	10c00015 	stw	r3,0(r2)
    a44c:	9009883a 	mov	r4,r18
    a450:	0014f600 	call	14f60 <__malloc_unlock>
    a454:	80800204 	addi	r2,r16,8
    a458:	003f2906 	br	a100 <_malloc_r+0x258>
    a45c:	1006d1ba 	srli	r3,r2,6
    a460:	19400e44 	addi	r5,r3,57
    a464:	280a90fa 	slli	r5,r5,3
    a468:	19000e04 	addi	r4,r3,56
    a46c:	003fb006 	br	a330 <_malloc_r+0x488>
    a470:	84c04626 	beq	r16,r19,a58c <_malloc_r+0x6e4>
    a474:	9c000217 	ldw	r16,8(r19)
    a478:	85400117 	ldw	r21,4(r16)
    a47c:	00bfff04 	movi	r2,-4
    a480:	a8aa703a 	and	r21,r21,r2
    a484:	ac45c83a 	sub	r2,r21,r17
    a488:	ac400236 	bltu	r21,r17,a494 <_malloc_r+0x5ec>
    a48c:	10c00408 	cmpgei	r3,r2,16
    a490:	183f931e 	bne	r3,zero,a2e0 <_malloc_r+0x438>
    a494:	9009883a 	mov	r4,r18
    a498:	0014f600 	call	14f60 <__malloc_unlock>
    a49c:	0005883a 	mov	r2,zero
    a4a0:	003f1706 	br	a100 <_malloc_r+0x258>
    a4a4:	11c01704 	addi	r7,r2,92
    a4a8:	380890fa 	slli	r4,r7,3
    a4ac:	120016c4 	addi	r8,r2,91
    a4b0:	003eb606 	br	9f8c <_malloc_r+0xe4>
    a4b4:	58800217 	ldw	r2,8(r11)
    a4b8:	39ffffc4 	addi	r7,r7,-1
    a4bc:	12c0701e 	bne	r2,r11,a680 <_malloc_r+0x7d8>
    a4c0:	388000cc 	andi	r2,r7,3
    a4c4:	5afffe04 	addi	r11,r11,-8
    a4c8:	103ffa1e 	bne	r2,zero,a4b4 <_malloc_r+0x60c>
    a4cc:	98c00117 	ldw	r3,4(r19)
    a4d0:	0104303a 	nor	r2,zero,r4
    a4d4:	10c4703a 	and	r2,r2,r3
    a4d8:	98800115 	stw	r2,4(r19)
    a4dc:	2109883a 	add	r4,r4,r4
    a4e0:	113f2336 	bltu	r2,r4,a170 <_malloc_r+0x2c8>
    a4e4:	203f2226 	beq	r4,zero,a170 <_malloc_r+0x2c8>
    a4e8:	2086703a 	and	r3,r4,r2
    a4ec:	1800041e 	bne	r3,zero,a500 <_malloc_r+0x658>
    a4f0:	2109883a 	add	r4,r4,r4
    a4f4:	2086703a 	and	r3,r4,r2
    a4f8:	63000104 	addi	r12,r12,4
    a4fc:	183ffc26 	beq	r3,zero,a4f0 <_malloc_r+0x648>
    a500:	600f883a 	mov	r7,r12
    a504:	003ee206 	br	a090 <_malloc_r+0x1e8>
    a508:	ad400404 	addi	r21,r21,16
    a50c:	003f2b06 	br	a1bc <_malloc_r+0x314>
    a510:	2009d0ba 	srai	r4,r4,2
    a514:	00800044 	movi	r2,1
    a518:	99800117 	ldw	r6,4(r19)
    a51c:	1104983a 	sll	r2,r2,r4
    a520:	1184b03a 	or	r2,r2,r6
    a524:	98800115 	stw	r2,4(r19)
    a528:	003f8d06 	br	a360 <_malloc_r+0x4b8>
    a52c:	bd69883a 	add	r20,r23,r21
    a530:	0529c83a 	sub	r20,zero,r20
    a534:	a503ffcc 	andi	r20,r20,4095
    a538:	a00b883a 	mov	r5,r20
    a53c:	9009883a 	mov	r4,r18
    a540:	000a8ec0 	call	a8ec <_sbrk_r>
    a544:	10ffffe0 	cmpeqi	r3,r2,-1
    a548:	183f3f26 	beq	r3,zero,a248 <_malloc_r+0x3a0>
    a54c:	0029883a 	mov	r20,zero
    a550:	003f3f06 	br	a250 <_malloc_r+0x3a8>
    a554:	19001568 	cmpgeui	r4,r3,85
    a558:	2000201e 	bne	r4,zero,a5dc <_malloc_r+0x734>
    a55c:	1006d33a 	srli	r3,r2,12
    a560:	19401bc4 	addi	r5,r3,111
    a564:	280a90fa 	slli	r5,r5,3
    a568:	19001b84 	addi	r4,r3,110
    a56c:	003f7006 	br	a330 <_malloc_r+0x488>
    a570:	10c05568 	cmpgeui	r3,r2,341
    a574:	1800201e 	bne	r3,zero,a5f8 <_malloc_r+0x750>
    a578:	8804d3fa 	srli	r2,r17,15
    a57c:	11c01e04 	addi	r7,r2,120
    a580:	380890fa 	slli	r4,r7,3
    a584:	12001dc4 	addi	r8,r2,119
    a588:	003e8006 	br	9f8c <_malloc_r+0xe4>
    a58c:	008000b4 	movhi	r2,2
    a590:	10ef2317 	ldw	r3,-17268(r2)
    a594:	a8c7883a 	add	r3,r21,r3
    a598:	10ef2315 	stw	r3,-17268(r2)
    a59c:	003f1406 	br	a1f0 <_malloc_r+0x348>
    a5a0:	e083ffcc 	andi	r2,fp,4095
    a5a4:	103f121e 	bne	r2,zero,a1f0 <_malloc_r+0x348>
    a5a8:	9c000217 	ldw	r16,8(r19)
    a5ac:	b56b883a 	add	r21,r22,r21
    a5b0:	ad400054 	ori	r21,r21,1
    a5b4:	85400115 	stw	r21,4(r16)
    a5b8:	003f3e06 	br	a2b4 <_malloc_r+0x40c>
    a5bc:	008000b4 	movhi	r2,2
    a5c0:	15e7e615 	stw	r23,-24680(r2)
    a5c4:	003f1206 	br	a210 <_malloc_r+0x368>
    a5c8:	b821883a 	mov	r16,r23
    a5cc:	003f3906 	br	a2b4 <_malloc_r+0x40c>
    a5d0:	00800044 	movi	r2,1
    a5d4:	b8800115 	stw	r2,4(r23)
    a5d8:	003fae06 	br	a494 <_malloc_r+0x5ec>
    a5dc:	19005568 	cmpgeui	r4,r3,341
    a5e0:	2000191e 	bne	r4,zero,a648 <_malloc_r+0x7a0>
    a5e4:	1006d3fa 	srli	r3,r2,15
    a5e8:	19401e04 	addi	r5,r3,120
    a5ec:	280a90fa 	slli	r5,r5,3
    a5f0:	19001dc4 	addi	r4,r3,119
    a5f4:	003f4e06 	br	a330 <_malloc_r+0x488>
    a5f8:	10815568 	cmpgeui	r2,r2,1365
    a5fc:	1000191e 	bne	r2,zero,a664 <_malloc_r+0x7bc>
    a600:	8804d4ba 	srli	r2,r17,18
    a604:	11c01f44 	addi	r7,r2,125
    a608:	380890fa 	slli	r4,r7,3
    a60c:	12001f04 	addi	r8,r2,124
    a610:	003e5e06 	br	9f8c <_malloc_r+0xe4>
    a614:	e73ffe04 	addi	fp,fp,-8
    a618:	af2b883a 	add	r21,r21,fp
    a61c:	adebc83a 	sub	r21,r21,r23
    a620:	0029883a 	mov	r20,zero
    a624:	003f0a06 	br	a250 <_malloc_r+0x3a8>
    a628:	81400204 	addi	r5,r16,8
    a62c:	9009883a 	mov	r4,r18
    a630:	000ed700 	call	ed70 <_free_r>
    a634:	9c000217 	ldw	r16,8(r19)
    a638:	008000b4 	movhi	r2,2
    a63c:	152f2317 	ldw	r20,-17268(r2)
    a640:	85400117 	ldw	r21,4(r16)
    a644:	003f1b06 	br	a2b4 <_malloc_r+0x40c>
    a648:	18c15568 	cmpgeui	r3,r3,1365
    a64c:	1800091e 	bne	r3,zero,a674 <_malloc_r+0x7cc>
    a650:	1006d4ba 	srli	r3,r2,18
    a654:	19401f44 	addi	r5,r3,125
    a658:	280a90fa 	slli	r5,r5,3
    a65c:	19001f04 	addi	r4,r3,124
    a660:	003f3306 	br	a330 <_malloc_r+0x488>
    a664:	0100fe04 	movi	r4,1016
    a668:	01c01fc4 	movi	r7,127
    a66c:	02001f84 	movi	r8,126
    a670:	003e4606 	br	9f8c <_malloc_r+0xe4>
    a674:	0140fe04 	movi	r5,1016
    a678:	01001f84 	movi	r4,126
    a67c:	003f2c06 	br	a330 <_malloc_r+0x488>
    a680:	98800117 	ldw	r2,4(r19)
    a684:	003f9506 	br	a4dc <_malloc_r+0x634>

0000a688 <memcpy>:
    a688:	30c00430 	cmpltui	r3,r6,16
    a68c:	2005883a 	mov	r2,r4
    a690:	18002d1e 	bne	r3,zero,a748 <memcpy+0xc0>
    a694:	2906b03a 	or	r3,r5,r4
    a698:	18c000cc 	andi	r3,r3,3
    a69c:	1800351e 	bne	r3,zero,a774 <memcpy+0xec>
    a6a0:	32fffc04 	addi	r11,r6,-16
    a6a4:	5816d13a 	srli	r11,r11,4
    a6a8:	280f883a 	mov	r7,r5
    a6ac:	2007883a 	mov	r3,r4
    a6b0:	5ac00044 	addi	r11,r11,1
    a6b4:	5816913a 	slli	r11,r11,4
    a6b8:	22d5883a 	add	r10,r4,r11
    a6bc:	39000117 	ldw	r4,4(r7)
    a6c0:	3a400017 	ldw	r9,0(r7)
    a6c4:	3a000217 	ldw	r8,8(r7)
    a6c8:	19000115 	stw	r4,4(r3)
    a6cc:	39000317 	ldw	r4,12(r7)
    a6d0:	1a400015 	stw	r9,0(r3)
    a6d4:	1a000215 	stw	r8,8(r3)
    a6d8:	19000315 	stw	r4,12(r3)
    a6dc:	18c00404 	addi	r3,r3,16
    a6e0:	39c00404 	addi	r7,r7,16
    a6e4:	50fff51e 	bne	r10,r3,a6bc <memcpy+0x34>
    a6e8:	3100030c 	andi	r4,r6,12
    a6ec:	2acb883a 	add	r5,r5,r11
    a6f0:	320003cc 	andi	r8,r6,15
    a6f4:	20002226 	beq	r4,zero,a780 <memcpy+0xf8>
    a6f8:	280f883a 	mov	r7,r5
    a6fc:	1813883a 	mov	r9,r3
    a700:	39c00104 	addi	r7,r7,4
    a704:	3abfff17 	ldw	r10,-4(r7)
    a708:	41c9c83a 	sub	r4,r8,r7
    a70c:	2909883a 	add	r4,r5,r4
    a710:	4a800015 	stw	r10,0(r9)
    a714:	21000128 	cmpgeui	r4,r4,4
    a718:	4a400104 	addi	r9,r9,4
    a71c:	203ff81e 	bne	r4,zero,a700 <memcpy+0x78>
    a720:	413fff04 	addi	r4,r8,-4
    a724:	2008d0ba 	srli	r4,r4,2
    a728:	318000cc 	andi	r6,r6,3
    a72c:	31ffffc4 	addi	r7,r6,-1
    a730:	21000044 	addi	r4,r4,1
    a734:	200890ba 	slli	r4,r4,2
    a738:	1907883a 	add	r3,r3,r4
    a73c:	290b883a 	add	r5,r5,r4
    a740:	3000041e 	bne	r6,zero,a754 <memcpy+0xcc>
    a744:	f800283a 	ret
    a748:	2007883a 	mov	r3,r4
    a74c:	31ffffc4 	addi	r7,r6,-1
    a750:	303ffc26 	beq	r6,zero,a744 <memcpy+0xbc>
    a754:	39c00044 	addi	r7,r7,1
    a758:	19cf883a 	add	r7,r3,r7
    a75c:	29800003 	ldbu	r6,0(r5)
    a760:	18c00044 	addi	r3,r3,1
    a764:	29400044 	addi	r5,r5,1
    a768:	19bfffc5 	stb	r6,-1(r3)
    a76c:	38fffb1e 	bne	r7,r3,a75c <memcpy+0xd4>
    a770:	f800283a 	ret
    a774:	31ffffc4 	addi	r7,r6,-1
    a778:	2007883a 	mov	r3,r4
    a77c:	003ff506 	br	a754 <memcpy+0xcc>
    a780:	400d883a 	mov	r6,r8
    a784:	003ff106 	br	a74c <memcpy+0xc4>

0000a788 <_printf_r>:
    a788:	defffd04 	addi	sp,sp,-12
    a78c:	2805883a 	mov	r2,r5
    a790:	dfc00015 	stw	ra,0(sp)
    a794:	d9800115 	stw	r6,4(sp)
    a798:	d9c00215 	stw	r7,8(sp)
    a79c:	21400217 	ldw	r5,8(r4)
    a7a0:	d9c00104 	addi	r7,sp,4
    a7a4:	100d883a 	mov	r6,r2
    a7a8:	000a9dc0 	call	a9dc <___vfprintf_internal_r>
    a7ac:	dfc00017 	ldw	ra,0(sp)
    a7b0:	dec00304 	addi	sp,sp,12
    a7b4:	f800283a 	ret

0000a7b8 <printf>:
    a7b8:	defffc04 	addi	sp,sp,-16
    a7bc:	dfc00015 	stw	ra,0(sp)
    a7c0:	d9400115 	stw	r5,4(sp)
    a7c4:	d9800215 	stw	r6,8(sp)
    a7c8:	d9c00315 	stw	r7,12(sp)
    a7cc:	008000b4 	movhi	r2,2
    a7d0:	10a7e517 	ldw	r2,-24684(r2)
    a7d4:	200b883a 	mov	r5,r4
    a7d8:	d9800104 	addi	r6,sp,4
    a7dc:	11000217 	ldw	r4,8(r2)
    a7e0:	000c9f40 	call	c9f4 <__vfprintf_internal>
    a7e4:	dfc00017 	ldw	ra,0(sp)
    a7e8:	dec00404 	addi	sp,sp,16
    a7ec:	f800283a 	ret

0000a7f0 <_putchar_r>:
    a7f0:	21800217 	ldw	r6,8(r4)
    a7f4:	0010d841 	jmpi	10d84 <_putc_r>

0000a7f8 <putchar>:
    a7f8:	008000b4 	movhi	r2,2
    a7fc:	10a7e517 	ldw	r2,-24684(r2)
    a800:	200b883a 	mov	r5,r4
    a804:	11800217 	ldw	r6,8(r2)
    a808:	1009883a 	mov	r4,r2
    a80c:	0010d841 	jmpi	10d84 <_putc_r>

0000a810 <_puts_r>:
    a810:	defff504 	addi	sp,sp,-44
    a814:	dc000815 	stw	r16,32(sp)
    a818:	2021883a 	mov	r16,r4
    a81c:	2809883a 	mov	r4,r5
    a820:	dc400915 	stw	r17,36(sp)
    a824:	dfc00a15 	stw	ra,40(sp)
    a828:	2823883a 	mov	r17,r5
    a82c:	000a9440 	call	a944 <strlen>
    a830:	11000044 	addi	r4,r2,1
    a834:	d8800515 	stw	r2,20(sp)
    a838:	00800044 	movi	r2,1
    a83c:	00c00074 	movhi	r3,1
    a840:	d8800715 	stw	r2,28(sp)
    a844:	d8800404 	addi	r2,sp,16
    a848:	18df6504 	addi	r3,r3,32148
    a84c:	d8800115 	stw	r2,4(sp)
    a850:	00800084 	movi	r2,2
    a854:	dc400415 	stw	r17,16(sp)
    a858:	d8c00615 	stw	r3,24(sp)
    a85c:	d9000315 	stw	r4,12(sp)
    a860:	d8800215 	stw	r2,8(sp)
    a864:	81400217 	ldw	r5,8(r16)
    a868:	80000226 	beq	r16,zero,a874 <_puts_r+0x64>
    a86c:	80800e17 	ldw	r2,56(r16)
    a870:	10001326 	beq	r2,zero,a8c0 <_puts_r+0xb0>
    a874:	2880030b 	ldhu	r2,12(r5)
    a878:	10c8000c 	andi	r3,r2,8192
    a87c:	1800061e 	bne	r3,zero,a898 <_puts_r+0x88>
    a880:	28c01917 	ldw	r3,100(r5)
    a884:	0137ffc4 	movi	r4,-8193
    a888:	10880014 	ori	r2,r2,8192
    a88c:	1906703a 	and	r3,r3,r4
    a890:	2880030d 	sth	r2,12(r5)
    a894:	28c01915 	stw	r3,100(r5)
    a898:	d9800104 	addi	r6,sp,4
    a89c:	8009883a 	mov	r4,r16
    a8a0:	000f06c0 	call	f06c <__sfvwrite_r>
    a8a4:	10000b1e 	bne	r2,zero,a8d4 <_puts_r+0xc4>
    a8a8:	00800284 	movi	r2,10
    a8ac:	dfc00a17 	ldw	ra,40(sp)
    a8b0:	dc400917 	ldw	r17,36(sp)
    a8b4:	dc000817 	ldw	r16,32(sp)
    a8b8:	dec00b04 	addi	sp,sp,44
    a8bc:	f800283a 	ret
    a8c0:	8009883a 	mov	r4,r16
    a8c4:	d9400015 	stw	r5,0(sp)
    a8c8:	000ec0c0 	call	ec0c <__sinit>
    a8cc:	d9400017 	ldw	r5,0(sp)
    a8d0:	003fe806 	br	a874 <_puts_r+0x64>
    a8d4:	00bfffc4 	movi	r2,-1
    a8d8:	003ff406 	br	a8ac <_puts_r+0x9c>

0000a8dc <puts>:
    a8dc:	008000b4 	movhi	r2,2
    a8e0:	200b883a 	mov	r5,r4
    a8e4:	1127e517 	ldw	r4,-24684(r2)
    a8e8:	000a8101 	jmpi	a810 <_puts_r>

0000a8ec <_sbrk_r>:
    a8ec:	defffe04 	addi	sp,sp,-8
    a8f0:	dc000015 	stw	r16,0(sp)
    a8f4:	008000b4 	movhi	r2,2
    a8f8:	2021883a 	mov	r16,r4
    a8fc:	2809883a 	mov	r4,r5
    a900:	dfc00115 	stw	ra,4(sp)
    a904:	102f1915 	stw	zero,-17308(r2)
    a908:	00153940 	call	15394 <sbrk>
    a90c:	10ffffd8 	cmpnei	r3,r2,-1
    a910:	18000426 	beq	r3,zero,a924 <_sbrk_r+0x38>
    a914:	dfc00117 	ldw	ra,4(sp)
    a918:	dc000017 	ldw	r16,0(sp)
    a91c:	dec00204 	addi	sp,sp,8
    a920:	f800283a 	ret
    a924:	00c000b4 	movhi	r3,2
    a928:	18ef1917 	ldw	r3,-17308(r3)
    a92c:	183ff926 	beq	r3,zero,a914 <_sbrk_r+0x28>
    a930:	80c00015 	stw	r3,0(r16)
    a934:	dfc00117 	ldw	ra,4(sp)
    a938:	dc000017 	ldw	r16,0(sp)
    a93c:	dec00204 	addi	sp,sp,8
    a940:	f800283a 	ret

0000a944 <strlen>:
    a944:	208000cc 	andi	r2,r4,3
    a948:	10000926 	beq	r2,zero,a970 <strlen+0x2c>
    a94c:	2005883a 	mov	r2,r4
    a950:	00000306 	br	a960 <strlen+0x1c>
    a954:	10800044 	addi	r2,r2,1
    a958:	10c000cc 	andi	r3,r2,3
    a95c:	18000526 	beq	r3,zero,a974 <strlen+0x30>
    a960:	10c00007 	ldb	r3,0(r2)
    a964:	183ffb1e 	bne	r3,zero,a954 <strlen+0x10>
    a968:	1105c83a 	sub	r2,r2,r4
    a96c:	f800283a 	ret
    a970:	2005883a 	mov	r2,r4
    a974:	11400017 	ldw	r5,0(r2)
    a978:	01ffbff4 	movhi	r7,65279
    a97c:	39ffbfc4 	addi	r7,r7,-257
    a980:	29c7883a 	add	r3,r5,r7
    a984:	01a02074 	movhi	r6,32897
    a988:	014a303a 	nor	r5,zero,r5
    a98c:	1946703a 	and	r3,r3,r5
    a990:	31a02004 	addi	r6,r6,-32640
    a994:	1986703a 	and	r3,r3,r6
    a998:	1800071e 	bne	r3,zero,a9b8 <strlen+0x74>
    a99c:	11400117 	ldw	r5,4(r2)
    a9a0:	10800104 	addi	r2,r2,4
    a9a4:	29c7883a 	add	r3,r5,r7
    a9a8:	014a303a 	nor	r5,zero,r5
    a9ac:	1946703a 	and	r3,r3,r5
    a9b0:	1986703a 	and	r3,r3,r6
    a9b4:	183ff926 	beq	r3,zero,a99c <strlen+0x58>
    a9b8:	10c00007 	ldb	r3,0(r2)
    a9bc:	183fea26 	beq	r3,zero,a968 <strlen+0x24>
    a9c0:	10c00047 	ldb	r3,1(r2)
    a9c4:	10800044 	addi	r2,r2,1
    a9c8:	183fe726 	beq	r3,zero,a968 <strlen+0x24>
    a9cc:	10c00047 	ldb	r3,1(r2)
    a9d0:	10800044 	addi	r2,r2,1
    a9d4:	183ffa1e 	bne	r3,zero,a9c0 <strlen+0x7c>
    a9d8:	003fe306 	br	a968 <strlen+0x24>

0000a9dc <___vfprintf_internal_r>:
    a9dc:	deffbf04 	addi	sp,sp,-260
    a9e0:	dfc04015 	stw	ra,256(sp)
    a9e4:	dd803d15 	stw	r22,244(sp)
    a9e8:	dcc03a15 	stw	r19,232(sp)
    a9ec:	dc803915 	stw	r18,228(sp)
    a9f0:	2027883a 	mov	r19,r4
    a9f4:	2825883a 	mov	r18,r5
    a9f8:	302d883a 	mov	r22,r6
    a9fc:	d9c00615 	stw	r7,24(sp)
    aa00:	df003f15 	stw	fp,252(sp)
    aa04:	ddc03e15 	stw	r23,248(sp)
    aa08:	dd403c15 	stw	r21,240(sp)
    aa0c:	dd003b15 	stw	r20,236(sp)
    aa10:	dc403815 	stw	r17,224(sp)
    aa14:	dc003715 	stw	r16,220(sp)
    aa18:	000f6480 	call	f648 <_localeconv_r>
    aa1c:	10800017 	ldw	r2,0(r2)
    aa20:	1009883a 	mov	r4,r2
    aa24:	d8800d15 	stw	r2,52(sp)
    aa28:	000a9440 	call	a944 <strlen>
    aa2c:	d8800b15 	stw	r2,44(sp)
    aa30:	98000226 	beq	r19,zero,aa3c <___vfprintf_internal_r+0x60>
    aa34:	98800e17 	ldw	r2,56(r19)
    aa38:	1001e026 	beq	r2,zero,b1bc <___vfprintf_internal_r+0x7e0>
    aa3c:	9080030b 	ldhu	r2,12(r18)
    aa40:	10c8000c 	andi	r3,r2,8192
    aa44:	1800061e 	bne	r3,zero,aa60 <___vfprintf_internal_r+0x84>
    aa48:	90c01917 	ldw	r3,100(r18)
    aa4c:	0137ffc4 	movi	r4,-8193
    aa50:	10880014 	ori	r2,r2,8192
    aa54:	1906703a 	and	r3,r3,r4
    aa58:	9080030d 	sth	r2,12(r18)
    aa5c:	90c01915 	stw	r3,100(r18)
    aa60:	10c0020c 	andi	r3,r2,8
    aa64:	1800fc26 	beq	r3,zero,ae58 <___vfprintf_internal_r+0x47c>
    aa68:	90c00417 	ldw	r3,16(r18)
    aa6c:	1800fa26 	beq	r3,zero,ae58 <___vfprintf_internal_r+0x47c>
    aa70:	1080068c 	andi	r2,r2,26
    aa74:	10800298 	cmpnei	r2,r2,10
    aa78:	1000ff26 	beq	r2,zero,ae78 <___vfprintf_internal_r+0x49c>
    aa7c:	d8802704 	addi	r2,sp,156
    aa80:	b02f883a 	mov	r23,r22
    aa84:	d8801a15 	stw	r2,104(sp)
    aa88:	d8001c15 	stw	zero,112(sp)
    aa8c:	d8001b15 	stw	zero,108(sp)
    aa90:	d8000815 	stw	zero,32(sp)
    aa94:	d8000915 	stw	zero,36(sp)
    aa98:	d8000a15 	stw	zero,40(sp)
    aa9c:	d8000c15 	stw	zero,48(sp)
    aaa0:	d8001015 	stw	zero,64(sp)
    aaa4:	d8000515 	stw	zero,20(sp)
    aaa8:	102d883a 	mov	r22,r2
    aaac:	b8800007 	ldb	r2,0(r23)
    aab0:	1000d726 	beq	r2,zero,ae10 <___vfprintf_internal_r+0x434>
    aab4:	b821883a 	mov	r16,r23
    aab8:	00000306 	br	aac8 <___vfprintf_internal_r+0xec>
    aabc:	80800047 	ldb	r2,1(r16)
    aac0:	84000044 	addi	r16,r16,1
    aac4:	10012226 	beq	r2,zero,af50 <___vfprintf_internal_r+0x574>
    aac8:	10800958 	cmpnei	r2,r2,37
    aacc:	103ffb1e 	bne	r2,zero,aabc <___vfprintf_internal_r+0xe0>
    aad0:	85e3c83a 	sub	r17,r16,r23
    aad4:	85c1201e 	bne	r16,r23,af58 <___vfprintf_internal_r+0x57c>
    aad8:	80800003 	ldbu	r2,0(r16)
    aadc:	10803fcc 	andi	r2,r2,255
    aae0:	1080201c 	xori	r2,r2,128
    aae4:	10bfe004 	addi	r2,r2,-128
    aae8:	1000c926 	beq	r2,zero,ae10 <___vfprintf_internal_r+0x434>
    aaec:	82c00047 	ldb	r11,1(r16)
    aaf0:	85c00044 	addi	r23,r16,1
    aaf4:	d8001345 	stb	zero,77(sp)
    aaf8:	0009883a 	mov	r4,zero
    aafc:	000b883a 	mov	r5,zero
    ab00:	023fffc4 	movi	r8,-1
    ab04:	0021883a 	mov	r16,zero
    ab08:	0019883a 	mov	r12,zero
    ab0c:	bdc00044 	addi	r23,r23,1
    ab10:	5839883a 	mov	fp,r11
    ab14:	e0bff804 	addi	r2,fp,-32
    ab18:	10c01668 	cmpgeui	r3,r2,89
    ab1c:	18006c1e 	bne	r3,zero,acd0 <___vfprintf_internal_r+0x2f4>
    ab20:	100490ba 	slli	r2,r2,2
    ab24:	00c00074 	movhi	r3,1
    ab28:	10c7883a 	add	r3,r2,r3
    ab2c:	18aacd17 	ldw	r2,-21708(r3)
    ab30:	1000683a 	jmp	r2
    ab34:	0000b3e8 	cmpgeui	zero,zero,719
    ab38:	0000acd0 	cmplti	zero,zero,691
    ab3c:	0000acd0 	cmplti	zero,zero,691
    ab40:	0000b3dc 	xori	zero,zero,719
    ab44:	0000acd0 	cmplti	zero,zero,691
    ab48:	0000acd0 	cmplti	zero,zero,691
    ab4c:	0000acd0 	cmplti	zero,zero,691
    ab50:	0000acd0 	cmplti	zero,zero,691
    ab54:	0000acd0 	cmplti	zero,zero,691
    ab58:	0000acd0 	cmplti	zero,zero,691
    ab5c:	0000b260 	cmpeqi	zero,zero,713
    ab60:	0000b3cc 	andi	zero,zero,719
    ab64:	0000acd0 	cmplti	zero,zero,691
    ab68:	0000b278 	rdprs	zero,zero,713
    ab6c:	0000b284 	movi	zero,714
    ab70:	0000acd0 	cmplti	zero,zero,691
    ab74:	0000b3c0 	call	b3c <kf_bfly3+0x2d0>
    ab78:	0000ac98 	cmpnei	zero,zero,690
    ab7c:	0000ac98 	cmpnei	zero,zero,690
    ab80:	0000ac98 	cmpnei	zero,zero,690
    ab84:	0000ac98 	cmpnei	zero,zero,690
    ab88:	0000ac98 	cmpnei	zero,zero,690
    ab8c:	0000ac98 	cmpnei	zero,zero,690
    ab90:	0000ac98 	cmpnei	zero,zero,690
    ab94:	0000ac98 	cmpnei	zero,zero,690
    ab98:	0000ac98 	cmpnei	zero,zero,690
    ab9c:	0000acd0 	cmplti	zero,zero,691
    aba0:	0000acd0 	cmplti	zero,zero,691
    aba4:	0000acd0 	cmplti	zero,zero,691
    aba8:	0000acd0 	cmplti	zero,zero,691
    abac:	0000acd0 	cmplti	zero,zero,691
    abb0:	0000acd0 	cmplti	zero,zero,691
    abb4:	0000acd0 	cmplti	zero,zero,691
    abb8:	0000acd0 	cmplti	zero,zero,691
    abbc:	0000acd0 	cmplti	zero,zero,691
    abc0:	0000acd0 	cmplti	zero,zero,691
    abc4:	0000b2d0 	cmplti	zero,zero,715
    abc8:	0000afb4 	movhi	zero,702
    abcc:	0000acd0 	cmplti	zero,zero,691
    abd0:	0000afb4 	movhi	zero,702
    abd4:	0000acd0 	cmplti	zero,zero,691
    abd8:	0000acd0 	cmplti	zero,zero,691
    abdc:	0000acd0 	cmplti	zero,zero,691
    abe0:	0000acd0 	cmplti	zero,zero,691
    abe4:	0000b568 	cmpgeui	zero,zero,725
    abe8:	0000acd0 	cmplti	zero,zero,691
    abec:	0000acd0 	cmplti	zero,zero,691
    abf0:	0000aee8 	cmpgeui	zero,zero,699
    abf4:	0000acd0 	cmplti	zero,zero,691
    abf8:	0000acd0 	cmplti	zero,zero,691
    abfc:	0000acd0 	cmplti	zero,zero,691
    ac00:	0000acd0 	cmplti	zero,zero,691
    ac04:	0000acd0 	cmplti	zero,zero,691
    ac08:	0000aec0 	call	aec <kf_bfly3+0x280>
    ac0c:	0000acd0 	cmplti	zero,zero,691
    ac10:	0000acd0 	cmplti	zero,zero,691
    ac14:	0000b5a8 	cmpgeui	zero,zero,726
    ac18:	0000acd0 	cmplti	zero,zero,691
    ac1c:	0000acd0 	cmplti	zero,zero,691
    ac20:	0000acd0 	cmplti	zero,zero,691
    ac24:	0000acd0 	cmplti	zero,zero,691
    ac28:	0000acd0 	cmplti	zero,zero,691
    ac2c:	0000acd0 	cmplti	zero,zero,691
    ac30:	0000acd0 	cmplti	zero,zero,691
    ac34:	0000acd0 	cmplti	zero,zero,691
    ac38:	0000acd0 	cmplti	zero,zero,691
    ac3c:	0000acd0 	cmplti	zero,zero,691
    ac40:	0000b580 	call	b58 <kf_bfly3+0x2ec>
    ac44:	0000b1c8 	cmpgei	zero,zero,711
    ac48:	0000afb4 	movhi	zero,702
    ac4c:	0000afb4 	movhi	zero,702
    ac50:	0000afb4 	movhi	zero,702
    ac54:	0000b574 	movhi	zero,725
    ac58:	0000b1c8 	cmpgei	zero,zero,711
    ac5c:	0000acd0 	cmplti	zero,zero,691
    ac60:	0000acd0 	cmplti	zero,zero,691
    ac64:	0000b414 	movui	zero,720
    ac68:	0000acd0 	cmplti	zero,zero,691
    ac6c:	0000b528 	cmpgeui	zero,zero,724
    ac70:	0000aeec 	andhi	zero,zero,699
    ac74:	0000b4e8 	cmpgeui	zero,zero,723
    ac78:	0000b4dc 	xori	zero,zero,723
    ac7c:	0000acd0 	cmplti	zero,zero,691
    ac80:	0000b484 	movi	zero,722
    ac84:	0000acd0 	cmplti	zero,zero,691
    ac88:	0000aec4 	movi	zero,699
    ac8c:	0000acd0 	cmplti	zero,zero,691
    ac90:	0000acd0 	cmplti	zero,zero,691
    ac94:	0000b43c 	xorhi	zero,zero,720
    ac98:	0021883a 	mov	r16,zero
    ac9c:	e0fff404 	addi	r3,fp,-48
    aca0:	800490ba 	slli	r2,r16,2
    aca4:	bf000007 	ldb	fp,0(r23)
    aca8:	bdc00044 	addi	r23,r23,1
    acac:	1421883a 	add	r16,r2,r16
    acb0:	8421883a 	add	r16,r16,r16
    acb4:	1c21883a 	add	r16,r3,r16
    acb8:	e0fff404 	addi	r3,fp,-48
    acbc:	188002b0 	cmpltui	r2,r3,10
    acc0:	103ff71e 	bne	r2,zero,aca0 <___vfprintf_internal_r+0x2c4>
    acc4:	e0bff804 	addi	r2,fp,-32
    acc8:	10c01668 	cmpgeui	r3,r2,89
    accc:	183f9426 	beq	r3,zero,ab20 <___vfprintf_internal_r+0x144>
    acd0:	21003fcc 	andi	r4,r4,255
    acd4:	2006541e 	bne	r4,zero,c628 <___vfprintf_internal_r+0x1c4c>
    acd8:	e0004d26 	beq	fp,zero,ae10 <___vfprintf_internal_r+0x434>
    acdc:	df001d05 	stb	fp,116(sp)
    ace0:	d8001345 	stb	zero,77(sp)
    ace4:	05000044 	movi	r20,1
    ace8:	05400044 	movi	r21,1
    acec:	dc401d04 	addi	r17,sp,116
    acf0:	db000415 	stw	r12,16(sp)
    acf4:	0011883a 	mov	r8,zero
    acf8:	d8000715 	stw	zero,28(sp)
    acfc:	d8800417 	ldw	r2,16(sp)
    ad00:	1380008c 	andi	r14,r2,2
    ad04:	70000126 	beq	r14,zero,ad0c <___vfprintf_internal_r+0x330>
    ad08:	a5000084 	addi	r20,r20,2
    ad0c:	d8800417 	ldw	r2,16(sp)
    ad10:	d8c01c17 	ldw	r3,112(sp)
    ad14:	1340210c 	andi	r13,r2,132
    ad18:	6800021e 	bne	r13,zero,ad24 <___vfprintf_internal_r+0x348>
    ad1c:	850fc83a 	sub	r7,r16,r20
    ad20:	01c36b16 	blt	zero,r7,bad0 <___vfprintf_internal_r+0x10f4>
    ad24:	d8801347 	ldb	r2,77(sp)
    ad28:	10000c26 	beq	r2,zero,ad5c <___vfprintf_internal_r+0x380>
    ad2c:	d8801b17 	ldw	r2,108(sp)
    ad30:	d9001344 	addi	r4,sp,77
    ad34:	18c00044 	addi	r3,r3,1
    ad38:	10800044 	addi	r2,r2,1
    ad3c:	b1000015 	stw	r4,0(r22)
    ad40:	01000044 	movi	r4,1
    ad44:	d8801b15 	stw	r2,108(sp)
    ad48:	b1000115 	stw	r4,4(r22)
    ad4c:	d8c01c15 	stw	r3,112(sp)
    ad50:	10800208 	cmpgei	r2,r2,8
    ad54:	10039f1e 	bne	r2,zero,bbd4 <___vfprintf_internal_r+0x11f8>
    ad58:	b5800204 	addi	r22,r22,8
    ad5c:	70000c26 	beq	r14,zero,ad90 <___vfprintf_internal_r+0x3b4>
    ad60:	d8801b17 	ldw	r2,108(sp)
    ad64:	d9001384 	addi	r4,sp,78
    ad68:	18c00084 	addi	r3,r3,2
    ad6c:	10800044 	addi	r2,r2,1
    ad70:	b1000015 	stw	r4,0(r22)
    ad74:	01000084 	movi	r4,2
    ad78:	d8801b15 	stw	r2,108(sp)
    ad7c:	b1000115 	stw	r4,4(r22)
    ad80:	d8c01c15 	stw	r3,112(sp)
    ad84:	10800208 	cmpgei	r2,r2,8
    ad88:	1003a01e 	bne	r2,zero,bc0c <___vfprintf_internal_r+0x1230>
    ad8c:	b5800204 	addi	r22,r22,8
    ad90:	6b402018 	cmpnei	r13,r13,128
    ad94:	68025c26 	beq	r13,zero,b708 <___vfprintf_internal_r+0xd2c>
    ad98:	4551c83a 	sub	r8,r8,r21
    ad9c:	02029416 	blt	zero,r8,b7f0 <___vfprintf_internal_r+0xe14>
    ada0:	d8800417 	ldw	r2,16(sp)
    ada4:	1080400c 	andi	r2,r2,256
    ada8:	1002111e 	bne	r2,zero,b5f0 <___vfprintf_internal_r+0xc14>
    adac:	d8801b17 	ldw	r2,108(sp)
    adb0:	1d47883a 	add	r3,r3,r21
    adb4:	b4400015 	stw	r17,0(r22)
    adb8:	10800044 	addi	r2,r2,1
    adbc:	b5400115 	stw	r21,4(r22)
    adc0:	d8801b15 	stw	r2,108(sp)
    adc4:	d8c01c15 	stw	r3,112(sp)
    adc8:	10800208 	cmpgei	r2,r2,8
    adcc:	1002fd1e 	bne	r2,zero,b9c4 <___vfprintf_internal_r+0xfe8>
    add0:	b5800204 	addi	r22,r22,8
    add4:	d8800417 	ldw	r2,16(sp)
    add8:	1440010c 	andi	r17,r2,4
    addc:	88000226 	beq	r17,zero,ade8 <___vfprintf_internal_r+0x40c>
    ade0:	8523c83a 	sub	r17,r16,r20
    ade4:	0440c616 	blt	zero,r17,b100 <___vfprintf_internal_r+0x724>
    ade8:	8500010e 	bge	r16,r20,adf0 <___vfprintf_internal_r+0x414>
    adec:	a021883a 	mov	r16,r20
    adf0:	d8800517 	ldw	r2,20(sp)
    adf4:	1405883a 	add	r2,r2,r16
    adf8:	d8800515 	stw	r2,20(sp)
    adfc:	1802c31e 	bne	r3,zero,b90c <___vfprintf_internal_r+0xf30>
    ae00:	b8800007 	ldb	r2,0(r23)
    ae04:	d8001b15 	stw	zero,108(sp)
    ae08:	dd802704 	addi	r22,sp,156
    ae0c:	103f291e 	bne	r2,zero,aab4 <___vfprintf_internal_r+0xd8>
    ae10:	d8801c17 	ldw	r2,112(sp)
    ae14:	1005ff1e 	bne	r2,zero,c614 <___vfprintf_internal_r+0x1c38>
    ae18:	9080030b 	ldhu	r2,12(r18)
    ae1c:	1080100c 	andi	r2,r2,64
    ae20:	1006ab1e 	bne	r2,zero,c8d0 <___vfprintf_internal_r+0x1ef4>
    ae24:	d8800517 	ldw	r2,20(sp)
    ae28:	dfc04017 	ldw	ra,256(sp)
    ae2c:	df003f17 	ldw	fp,252(sp)
    ae30:	ddc03e17 	ldw	r23,248(sp)
    ae34:	dd803d17 	ldw	r22,244(sp)
    ae38:	dd403c17 	ldw	r21,240(sp)
    ae3c:	dd003b17 	ldw	r20,236(sp)
    ae40:	dcc03a17 	ldw	r19,232(sp)
    ae44:	dc803917 	ldw	r18,228(sp)
    ae48:	dc403817 	ldw	r17,224(sp)
    ae4c:	dc003717 	ldw	r16,220(sp)
    ae50:	dec04104 	addi	sp,sp,260
    ae54:	f800283a 	ret
    ae58:	900b883a 	mov	r5,r18
    ae5c:	9809883a 	mov	r4,r19
    ae60:	000cad00 	call	cad0 <__swsetup_r>
    ae64:	10069a1e 	bne	r2,zero,c8d0 <___vfprintf_internal_r+0x1ef4>
    ae68:	9080030b 	ldhu	r2,12(r18)
    ae6c:	1080068c 	andi	r2,r2,26
    ae70:	10800298 	cmpnei	r2,r2,10
    ae74:	103f011e 	bne	r2,zero,aa7c <___vfprintf_internal_r+0xa0>
    ae78:	9080038f 	ldh	r2,14(r18)
    ae7c:	103eff16 	blt	r2,zero,aa7c <___vfprintf_internal_r+0xa0>
    ae80:	d9c00617 	ldw	r7,24(sp)
    ae84:	b00d883a 	mov	r6,r22
    ae88:	900b883a 	mov	r5,r18
    ae8c:	9809883a 	mov	r4,r19
    ae90:	dfc04017 	ldw	ra,256(sp)
    ae94:	df003f17 	ldw	fp,252(sp)
    ae98:	ddc03e17 	ldw	r23,248(sp)
    ae9c:	dd803d17 	ldw	r22,244(sp)
    aea0:	dd403c17 	ldw	r21,240(sp)
    aea4:	dd003b17 	ldw	r20,236(sp)
    aea8:	dcc03a17 	ldw	r19,232(sp)
    aeac:	dc803917 	ldw	r18,228(sp)
    aeb0:	dc403817 	ldw	r17,224(sp)
    aeb4:	dc003717 	ldw	r16,220(sp)
    aeb8:	dec04104 	addi	sp,sp,260
    aebc:	000ca101 	jmpi	ca10 <__sbprintf>
    aec0:	63000414 	ori	r12,r12,16
    aec4:	6080080c 	andi	r2,r12,32
    aec8:	10008126 	beq	r2,zero,b0d0 <___vfprintf_internal_r+0x6f4>
    aecc:	d8c00617 	ldw	r3,24(sp)
    aed0:	00800044 	movi	r2,1
    aed4:	1d000017 	ldw	r20,0(r3)
    aed8:	1d400117 	ldw	r21,4(r3)
    aedc:	18c00204 	addi	r3,r3,8
    aee0:	d8c00615 	stw	r3,24(sp)
    aee4:	00000906 	br	af0c <___vfprintf_internal_r+0x530>
    aee8:	63000414 	ori	r12,r12,16
    aeec:	6080080c 	andi	r2,r12,32
    aef0:	10006b26 	beq	r2,zero,b0a0 <___vfprintf_internal_r+0x6c4>
    aef4:	d8c00617 	ldw	r3,24(sp)
    aef8:	0005883a 	mov	r2,zero
    aefc:	1d000017 	ldw	r20,0(r3)
    af00:	1d400117 	ldw	r21,4(r3)
    af04:	18c00204 	addi	r3,r3,8
    af08:	d8c00615 	stw	r3,24(sp)
    af0c:	d8001345 	stb	zero,77(sp)
    af10:	40ffffe0 	cmpeqi	r3,r8,-1
    af14:	001b883a 	mov	r13,zero
    af18:	18010a1e 	bne	r3,zero,b344 <___vfprintf_internal_r+0x968>
    af1c:	047fdfc4 	movi	r17,-129
    af20:	6448703a 	and	r4,r12,r17
    af24:	a546b03a 	or	r3,r20,r21
    af28:	d9000415 	stw	r4,16(sp)
    af2c:	1802e61e 	bne	r3,zero,bac8 <___vfprintf_internal_r+0x10ec>
    af30:	4002601e 	bne	r8,zero,b8b4 <___vfprintf_internal_r+0xed8>
    af34:	1003ae1e 	bne	r2,zero,bdf0 <___vfprintf_internal_r+0x1414>
    af38:	6540004c 	andi	r21,r12,1
    af3c:	a803e426 	beq	r21,zero,bed0 <___vfprintf_internal_r+0x14f4>
    af40:	00800c04 	movi	r2,48
    af44:	d88026c5 	stb	r2,155(sp)
    af48:	dc4026c4 	addi	r17,sp,155
    af4c:	0000ba06 	br	b238 <___vfprintf_internal_r+0x85c>
    af50:	85e3c83a 	sub	r17,r16,r23
    af54:	85ffae26 	beq	r16,r23,ae10 <___vfprintf_internal_r+0x434>
    af58:	d8c01c17 	ldw	r3,112(sp)
    af5c:	d8801b17 	ldw	r2,108(sp)
    af60:	b5c00015 	stw	r23,0(r22)
    af64:	1c47883a 	add	r3,r3,r17
    af68:	10800044 	addi	r2,r2,1
    af6c:	d8801b15 	stw	r2,108(sp)
    af70:	b4400115 	stw	r17,4(r22)
    af74:	d8c01c15 	stw	r3,112(sp)
    af78:	10800208 	cmpgei	r2,r2,8
    af7c:	1000061e 	bne	r2,zero,af98 <___vfprintf_internal_r+0x5bc>
    af80:	b5800204 	addi	r22,r22,8
    af84:	d8c00517 	ldw	r3,20(sp)
    af88:	80800003 	ldbu	r2,0(r16)
    af8c:	1c47883a 	add	r3,r3,r17
    af90:	d8c00515 	stw	r3,20(sp)
    af94:	003ed106 	br	aadc <___vfprintf_internal_r+0x100>
    af98:	d9801a04 	addi	r6,sp,104
    af9c:	900b883a 	mov	r5,r18
    afa0:	9809883a 	mov	r4,r19
    afa4:	00116a00 	call	116a0 <__sprint_r>
    afa8:	103f9b1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    afac:	dd802704 	addi	r22,sp,156
    afb0:	003ff406 	br	af84 <___vfprintf_internal_r+0x5a8>
    afb4:	21003fcc 	andi	r4,r4,255
    afb8:	2006291e 	bne	r4,zero,c860 <___vfprintf_internal_r+0x1e84>
    afbc:	d8c00617 	ldw	r3,24(sp)
    afc0:	6080020c 	andi	r2,r12,8
    afc4:	19000204 	addi	r4,r3,8
    afc8:	d9000e15 	stw	r4,56(sp)
    afcc:	1003c21e 	bne	r2,zero,bed8 <___vfprintf_internal_r+0x14fc>
    afd0:	d8800617 	ldw	r2,24(sp)
    afd4:	10c00017 	ldw	r3,0(r2)
    afd8:	10800117 	ldw	r2,4(r2)
    afdc:	d8c00915 	stw	r3,36(sp)
    afe0:	d8800a15 	stw	r2,40(sp)
    afe4:	dd400a17 	ldw	r21,40(sp)
    afe8:	dd000917 	ldw	r20,36(sp)
    afec:	00a00034 	movhi	r2,32768
    aff0:	10bfffc4 	addi	r2,r2,-1
    aff4:	a8a2703a 	and	r17,r21,r2
    aff8:	01dffc34 	movhi	r7,32752
    affc:	01bfffc4 	movi	r6,-1
    b000:	39ffffc4 	addi	r7,r7,-1
    b004:	a009883a 	mov	r4,r20
    b008:	880b883a 	mov	r5,r17
    b00c:	da000615 	stw	r8,24(sp)
    b010:	db000415 	stw	r12,16(sp)
    b014:	00099a00 	call	99a0 <__unorddf2>
    b018:	db000417 	ldw	r12,16(sp)
    b01c:	da000617 	ldw	r8,24(sp)
    b020:	10044d1e 	bne	r2,zero,c158 <___vfprintf_internal_r+0x177c>
    b024:	01dffc34 	movhi	r7,32752
    b028:	01bfffc4 	movi	r6,-1
    b02c:	39ffffc4 	addi	r7,r7,-1
    b030:	a009883a 	mov	r4,r20
    b034:	880b883a 	mov	r5,r17
    b038:	00088000 	call	8800 <__ledf2>
    b03c:	db000417 	ldw	r12,16(sp)
    b040:	da000617 	ldw	r8,24(sp)
    b044:	0084440e 	bge	zero,r2,c158 <___vfprintf_internal_r+0x177c>
    b048:	000d883a 	mov	r6,zero
    b04c:	000f883a 	mov	r7,zero
    b050:	a009883a 	mov	r4,r20
    b054:	a80b883a 	mov	r5,r21
    b058:	00088000 	call	8800 <__ledf2>
    b05c:	db000417 	ldw	r12,16(sp)
    b060:	10055916 	blt	r2,zero,c5c8 <___vfprintf_internal_r+0x1bec>
    b064:	db401343 	ldbu	r13,77(sp)
    b068:	e0801210 	cmplti	r2,fp,72
    b06c:	1005471e 	bne	r2,zero,c58c <___vfprintf_internal_r+0x1bb0>
    b070:	04400074 	movhi	r17,1
    b074:	8c5f6704 	addi	r17,r17,32156
    b078:	00bfdfc4 	movi	r2,-129
    b07c:	6084703a 	and	r2,r12,r2
    b080:	d8800415 	stw	r2,16(sp)
    b084:	d8800e17 	ldw	r2,56(sp)
    b088:	050000c4 	movi	r20,3
    b08c:	054000c4 	movi	r21,3
    b090:	d8800615 	stw	r2,24(sp)
    b094:	0011883a 	mov	r8,zero
    b098:	d8000715 	stw	zero,28(sp)
    b09c:	00006a06 	br	b248 <___vfprintf_internal_r+0x86c>
    b0a0:	d8c00617 	ldw	r3,24(sp)
    b0a4:	6080040c 	andi	r2,r12,16
    b0a8:	1d000017 	ldw	r20,0(r3)
    b0ac:	18c00104 	addi	r3,r3,4
    b0b0:	d8c00615 	stw	r3,24(sp)
    b0b4:	1000031e 	bne	r2,zero,b0c4 <___vfprintf_internal_r+0x6e8>
    b0b8:	6080100c 	andi	r2,r12,64
    b0bc:	10000126 	beq	r2,zero,b0c4 <___vfprintf_internal_r+0x6e8>
    b0c0:	a53fffcc 	andi	r20,r20,65535
    b0c4:	002b883a 	mov	r21,zero
    b0c8:	0005883a 	mov	r2,zero
    b0cc:	003f8f06 	br	af0c <___vfprintf_internal_r+0x530>
    b0d0:	d8c00617 	ldw	r3,24(sp)
    b0d4:	6080040c 	andi	r2,r12,16
    b0d8:	1d000017 	ldw	r20,0(r3)
    b0dc:	18c00104 	addi	r3,r3,4
    b0e0:	d8c00615 	stw	r3,24(sp)
    b0e4:	1000031e 	bne	r2,zero,b0f4 <___vfprintf_internal_r+0x718>
    b0e8:	6080100c 	andi	r2,r12,64
    b0ec:	10000126 	beq	r2,zero,b0f4 <___vfprintf_internal_r+0x718>
    b0f0:	a53fffcc 	andi	r20,r20,65535
    b0f4:	002b883a 	mov	r21,zero
    b0f8:	00800044 	movi	r2,1
    b0fc:	003f8306 	br	af0c <___vfprintf_internal_r+0x530>
    b100:	03000074 	movhi	r12,1
    b104:	89000450 	cmplti	r4,r17,17
    b108:	d8801b17 	ldw	r2,108(sp)
    b10c:	631f7b04 	addi	r12,r12,32236
    b110:	20001b1e 	bne	r4,zero,b180 <___vfprintf_internal_r+0x7a4>
    b114:	05400404 	movi	r21,16
    b118:	6039883a 	mov	fp,r12
    b11c:	00000406 	br	b130 <___vfprintf_internal_r+0x754>
    b120:	8c7ffc04 	addi	r17,r17,-16
    b124:	89000448 	cmpgei	r4,r17,17
    b128:	b5800204 	addi	r22,r22,8
    b12c:	20001326 	beq	r4,zero,b17c <___vfprintf_internal_r+0x7a0>
    b130:	10800044 	addi	r2,r2,1
    b134:	18c00404 	addi	r3,r3,16
    b138:	b7000015 	stw	fp,0(r22)
    b13c:	b5400115 	stw	r21,4(r22)
    b140:	d8c01c15 	stw	r3,112(sp)
    b144:	d8801b15 	stw	r2,108(sp)
    b148:	11000208 	cmpgei	r4,r2,8
    b14c:	203ff426 	beq	r4,zero,b120 <___vfprintf_internal_r+0x744>
    b150:	d9801a04 	addi	r6,sp,104
    b154:	900b883a 	mov	r5,r18
    b158:	9809883a 	mov	r4,r19
    b15c:	00116a00 	call	116a0 <__sprint_r>
    b160:	103f2d1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    b164:	8c7ffc04 	addi	r17,r17,-16
    b168:	89000448 	cmpgei	r4,r17,17
    b16c:	d8c01c17 	ldw	r3,112(sp)
    b170:	d8801b17 	ldw	r2,108(sp)
    b174:	dd802704 	addi	r22,sp,156
    b178:	203fed1e 	bne	r4,zero,b130 <___vfprintf_internal_r+0x754>
    b17c:	e019883a 	mov	r12,fp
    b180:	10800044 	addi	r2,r2,1
    b184:	1c47883a 	add	r3,r3,r17
    b188:	d8801b15 	stw	r2,108(sp)
    b18c:	b3000015 	stw	r12,0(r22)
    b190:	b4400115 	stw	r17,4(r22)
    b194:	d8c01c15 	stw	r3,112(sp)
    b198:	10800210 	cmplti	r2,r2,8
    b19c:	103f121e 	bne	r2,zero,ade8 <___vfprintf_internal_r+0x40c>
    b1a0:	d9801a04 	addi	r6,sp,104
    b1a4:	900b883a 	mov	r5,r18
    b1a8:	9809883a 	mov	r4,r19
    b1ac:	00116a00 	call	116a0 <__sprint_r>
    b1b0:	103f191e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    b1b4:	d8c01c17 	ldw	r3,112(sp)
    b1b8:	003f0b06 	br	ade8 <___vfprintf_internal_r+0x40c>
    b1bc:	9809883a 	mov	r4,r19
    b1c0:	000ec0c0 	call	ec0c <__sinit>
    b1c4:	003e1d06 	br	aa3c <___vfprintf_internal_r+0x60>
    b1c8:	21003fcc 	andi	r4,r4,255
    b1cc:	2005a61e 	bne	r4,zero,c868 <___vfprintf_internal_r+0x1e8c>
    b1d0:	6080080c 	andi	r2,r12,32
    b1d4:	10004326 	beq	r2,zero,b2e4 <___vfprintf_internal_r+0x908>
    b1d8:	d8c00617 	ldw	r3,24(sp)
    b1dc:	18800117 	ldw	r2,4(r3)
    b1e0:	1d000017 	ldw	r20,0(r3)
    b1e4:	18c00204 	addi	r3,r3,8
    b1e8:	d8c00615 	stw	r3,24(sp)
    b1ec:	102b883a 	mov	r21,r2
    b1f0:	10004a16 	blt	r2,zero,b31c <___vfprintf_internal_r+0x940>
    b1f4:	40bfffd8 	cmpnei	r2,r8,-1
    b1f8:	db401343 	ldbu	r13,77(sp)
    b1fc:	10000626 	beq	r2,zero,b218 <___vfprintf_internal_r+0x83c>
    b200:	047fdfc4 	movi	r17,-129
    b204:	6446703a 	and	r3,r12,r17
    b208:	a544b03a 	or	r2,r20,r21
    b20c:	d8c00415 	stw	r3,16(sp)
    b210:	1002f626 	beq	r2,zero,bdec <___vfprintf_internal_r+0x1410>
    b214:	db000417 	ldw	r12,16(sp)
    b218:	a8037f1e 	bne	r21,zero,c018 <___vfprintf_internal_r+0x163c>
    b21c:	a08002a8 	cmpgeui	r2,r20,10
    b220:	10037d1e 	bne	r2,zero,c018 <___vfprintf_internal_r+0x163c>
    b224:	a5000c04 	addi	r20,r20,48
    b228:	dd0026c5 	stb	r20,155(sp)
    b22c:	db000415 	stw	r12,16(sp)
    b230:	05400044 	movi	r21,1
    b234:	dc4026c4 	addi	r17,sp,155
    b238:	4029883a 	mov	r20,r8
    b23c:	4540010e 	bge	r8,r21,b244 <___vfprintf_internal_r+0x868>
    b240:	a829883a 	mov	r20,r21
    b244:	d8000715 	stw	zero,28(sp)
    b248:	6b403fcc 	andi	r13,r13,255
    b24c:	6b40201c 	xori	r13,r13,128
    b250:	6b7fe004 	addi	r13,r13,-128
    b254:	683ea926 	beq	r13,zero,acfc <___vfprintf_internal_r+0x320>
    b258:	a5000044 	addi	r20,r20,1
    b25c:	003ea706 	br	acfc <___vfprintf_internal_r+0x320>
    b260:	d8800617 	ldw	r2,24(sp)
    b264:	14000017 	ldw	r16,0(r2)
    b268:	10800104 	addi	r2,r2,4
    b26c:	8003150e 	bge	r16,zero,bec4 <___vfprintf_internal_r+0x14e8>
    b270:	0421c83a 	sub	r16,zero,r16
    b274:	d8800615 	stw	r2,24(sp)
    b278:	bac00007 	ldb	r11,0(r23)
    b27c:	63000114 	ori	r12,r12,4
    b280:	003e2206 	br	ab0c <___vfprintf_internal_r+0x130>
    b284:	bf000007 	ldb	fp,0(r23)
    b288:	b8800044 	addi	r2,r23,1
    b28c:	e0c00aa0 	cmpeqi	r3,fp,42
    b290:	1805c91e 	bne	r3,zero,c9b8 <___vfprintf_internal_r+0x1fdc>
    b294:	e0fff404 	addi	r3,fp,-48
    b298:	198002b0 	cmpltui	r6,r3,10
    b29c:	102f883a 	mov	r23,r2
    b2a0:	0011883a 	mov	r8,zero
    b2a4:	303e1b26 	beq	r6,zero,ab14 <___vfprintf_internal_r+0x138>
    b2a8:	400490ba 	slli	r2,r8,2
    b2ac:	bf000007 	ldb	fp,0(r23)
    b2b0:	bdc00044 	addi	r23,r23,1
    b2b4:	1211883a 	add	r8,r2,r8
    b2b8:	4211883a 	add	r8,r8,r8
    b2bc:	40d1883a 	add	r8,r8,r3
    b2c0:	e0fff404 	addi	r3,fp,-48
    b2c4:	188002b0 	cmpltui	r2,r3,10
    b2c8:	103ff71e 	bne	r2,zero,b2a8 <___vfprintf_internal_r+0x8cc>
    b2cc:	003e1106 	br	ab14 <___vfprintf_internal_r+0x138>
    b2d0:	21003fcc 	andi	r4,r4,255
    b2d4:	20055e1e 	bne	r4,zero,c850 <___vfprintf_internal_r+0x1e74>
    b2d8:	63000414 	ori	r12,r12,16
    b2dc:	6080080c 	andi	r2,r12,32
    b2e0:	103fbd1e 	bne	r2,zero,b1d8 <___vfprintf_internal_r+0x7fc>
    b2e4:	d8c00617 	ldw	r3,24(sp)
    b2e8:	6080040c 	andi	r2,r12,16
    b2ec:	1d000017 	ldw	r20,0(r3)
    b2f0:	18c00104 	addi	r3,r3,4
    b2f4:	d8c00615 	stw	r3,24(sp)
    b2f8:	1002e91e 	bne	r2,zero,bea0 <___vfprintf_internal_r+0x14c4>
    b2fc:	6080100c 	andi	r2,r12,64
    b300:	1002e726 	beq	r2,zero,bea0 <___vfprintf_internal_r+0x14c4>
    b304:	a53fffcc 	andi	r20,r20,65535
    b308:	a520001c 	xori	r20,r20,32768
    b30c:	a5200004 	addi	r20,r20,-32768
    b310:	a02bd7fa 	srai	r21,r20,31
    b314:	a805883a 	mov	r2,r21
    b318:	103fb60e 	bge	r2,zero,b1f4 <___vfprintf_internal_r+0x818>
    b31c:	a004c03a 	cmpne	r2,r20,zero
    b320:	056bc83a 	sub	r21,zero,r21
    b324:	a8abc83a 	sub	r21,r21,r2
    b328:	00800b44 	movi	r2,45
    b32c:	d8801345 	stb	r2,77(sp)
    b330:	40ffffe0 	cmpeqi	r3,r8,-1
    b334:	0529c83a 	sub	r20,zero,r20
    b338:	03400b44 	movi	r13,45
    b33c:	00800044 	movi	r2,1
    b340:	183ef626 	beq	r3,zero,af1c <___vfprintf_internal_r+0x540>
    b344:	10c00060 	cmpeqi	r3,r2,1
    b348:	183fb31e 	bne	r3,zero,b218 <___vfprintf_internal_r+0x83c>
    b34c:	108000a0 	cmpeqi	r2,r2,2
    b350:	10015d1e 	bne	r2,zero,b8c8 <___vfprintf_internal_r+0xeec>
    b354:	dc402704 	addi	r17,sp,156
    b358:	a006d0fa 	srli	r3,r20,3
    b35c:	a808977a 	slli	r4,r21,29
    b360:	a82ad0fa 	srli	r21,r21,3
    b364:	a50001cc 	andi	r20,r20,7
    b368:	a0800c04 	addi	r2,r20,48
    b36c:	20e8b03a 	or	r20,r4,r3
    b370:	88bfffc5 	stb	r2,-1(r17)
    b374:	a546b03a 	or	r3,r20,r21
    b378:	880b883a 	mov	r5,r17
    b37c:	8c7fffc4 	addi	r17,r17,-1
    b380:	183ff51e 	bne	r3,zero,b358 <___vfprintf_internal_r+0x97c>
    b384:	60c0004c 	andi	r3,r12,1
    b388:	18015c26 	beq	r3,zero,b8fc <___vfprintf_internal_r+0xf20>
    b38c:	10803fcc 	andi	r2,r2,255
    b390:	1080201c 	xori	r2,r2,128
    b394:	10bfe004 	addi	r2,r2,-128
    b398:	10800c18 	cmpnei	r2,r2,48
    b39c:	10015726 	beq	r2,zero,b8fc <___vfprintf_internal_r+0xf20>
    b3a0:	00800c04 	movi	r2,48
    b3a4:	297fff84 	addi	r5,r5,-2
    b3a8:	88bfffc5 	stb	r2,-1(r17)
    b3ac:	d8802704 	addi	r2,sp,156
    b3b0:	116bc83a 	sub	r21,r2,r5
    b3b4:	db000415 	stw	r12,16(sp)
    b3b8:	2823883a 	mov	r17,r5
    b3bc:	003f9e06 	br	b238 <___vfprintf_internal_r+0x85c>
    b3c0:	bac00007 	ldb	r11,0(r23)
    b3c4:	63002014 	ori	r12,r12,128
    b3c8:	003dd006 	br	ab0c <___vfprintf_internal_r+0x130>
    b3cc:	bac00007 	ldb	r11,0(r23)
    b3d0:	01000044 	movi	r4,1
    b3d4:	01400ac4 	movi	r5,43
    b3d8:	003dcc06 	br	ab0c <___vfprintf_internal_r+0x130>
    b3dc:	bac00007 	ldb	r11,0(r23)
    b3e0:	63000054 	ori	r12,r12,1
    b3e4:	003dc906 	br	ab0c <___vfprintf_internal_r+0x130>
    b3e8:	28803fcc 	andi	r2,r5,255
    b3ec:	1080201c 	xori	r2,r2,128
    b3f0:	10bfe004 	addi	r2,r2,-128
    b3f4:	bf000003 	ldbu	fp,0(r23)
    b3f8:	10000c1e 	bne	r2,zero,b42c <___vfprintf_internal_r+0xa50>
    b3fc:	e2c03fcc 	andi	r11,fp,255
    b400:	5ac0201c 	xori	r11,r11,128
    b404:	01000044 	movi	r4,1
    b408:	01400804 	movi	r5,32
    b40c:	5affe004 	addi	r11,r11,-128
    b410:	003dbe06 	br	ab0c <___vfprintf_internal_r+0x130>
    b414:	bac00007 	ldb	r11,0(r23)
    b418:	58801b18 	cmpnei	r2,r11,108
    b41c:	1002a71e 	bne	r2,zero,bebc <___vfprintf_internal_r+0x14e0>
    b420:	bf000043 	ldbu	fp,1(r23)
    b424:	63000814 	ori	r12,r12,32
    b428:	bdc00044 	addi	r23,r23,1
    b42c:	e2c03fcc 	andi	r11,fp,255
    b430:	5ac0201c 	xori	r11,r11,128
    b434:	5affe004 	addi	r11,r11,-128
    b438:	003db406 	br	ab0c <___vfprintf_internal_r+0x130>
    b43c:	21003fcc 	andi	r4,r4,255
    b440:	20050b1e 	bne	r4,zero,c870 <___vfprintf_internal_r+0x1e94>
    b444:	00800074 	movhi	r2,1
    b448:	109f6a04 	addi	r2,r2,32168
    b44c:	d8800c15 	stw	r2,48(sp)
    b450:	6080080c 	andi	r2,r12,32
    b454:	10005b26 	beq	r2,zero,b5c4 <___vfprintf_internal_r+0xbe8>
    b458:	d8800617 	ldw	r2,24(sp)
    b45c:	15000017 	ldw	r20,0(r2)
    b460:	15400117 	ldw	r21,4(r2)
    b464:	10800204 	addi	r2,r2,8
    b468:	d8800615 	stw	r2,24(sp)
    b46c:	6080004c 	andi	r2,r12,1
    b470:	10000226 	beq	r2,zero,b47c <___vfprintf_internal_r+0xaa0>
    b474:	a544b03a 	or	r2,r20,r21
    b478:	10029c1e 	bne	r2,zero,beec <___vfprintf_internal_r+0x1510>
    b47c:	00800084 	movi	r2,2
    b480:	003ea206 	br	af0c <___vfprintf_internal_r+0x530>
    b484:	d8800617 	ldw	r2,24(sp)
    b488:	d8001345 	stb	zero,77(sp)
    b48c:	14400017 	ldw	r17,0(r2)
    b490:	10c00104 	addi	r3,r2,4
    b494:	8802ba26 	beq	r17,zero,bf80 <___vfprintf_internal_r+0x15a4>
    b498:	40bfffe0 	cmpeqi	r2,r8,-1
    b49c:	1003c61e 	bne	r2,zero,c3b8 <___vfprintf_internal_r+0x19dc>
    b4a0:	400d883a 	mov	r6,r8
    b4a4:	000b883a 	mov	r5,zero
    b4a8:	8809883a 	mov	r4,r17
    b4ac:	d8c00715 	stw	r3,28(sp)
    b4b0:	db000615 	stw	r12,24(sp)
    b4b4:	da000415 	stw	r8,16(sp)
    b4b8:	000f8a80 	call	f8a8 <memchr>
    b4bc:	da000417 	ldw	r8,16(sp)
    b4c0:	db000617 	ldw	r12,24(sp)
    b4c4:	d8c00717 	ldw	r3,28(sp)
    b4c8:	1004d126 	beq	r2,zero,c810 <___vfprintf_internal_r+0x1e34>
    b4cc:	146bc83a 	sub	r21,r2,r17
    b4d0:	a829883a 	mov	r20,r21
    b4d4:	d8c00615 	stw	r3,24(sp)
    b4d8:	003e0506 	br	acf0 <___vfprintf_internal_r+0x314>
    b4dc:	bac00007 	ldb	r11,0(r23)
    b4e0:	63000814 	ori	r12,r12,32
    b4e4:	003d8906 	br	ab0c <___vfprintf_internal_r+0x130>
    b4e8:	d8c00617 	ldw	r3,24(sp)
    b4ec:	00800c04 	movi	r2,48
    b4f0:	d8801385 	stb	r2,78(sp)
    b4f4:	00801e04 	movi	r2,120
    b4f8:	01000074 	movhi	r4,1
    b4fc:	d88013c5 	stb	r2,79(sp)
    b500:	18800104 	addi	r2,r3,4
    b504:	d8800615 	stw	r2,24(sp)
    b508:	209f6a04 	addi	r2,r4,32168
    b50c:	d8800c15 	stw	r2,48(sp)
    b510:	1d000017 	ldw	r20,0(r3)
    b514:	002b883a 	mov	r21,zero
    b518:	63000094 	ori	r12,r12,2
    b51c:	00800084 	movi	r2,2
    b520:	07001e04 	movi	fp,120
    b524:	003e7906 	br	af0c <___vfprintf_internal_r+0x530>
    b528:	21003fcc 	andi	r4,r4,255
    b52c:	2004ca1e 	bne	r4,zero,c858 <___vfprintf_internal_r+0x1e7c>
    b530:	d9000617 	ldw	r4,24(sp)
    b534:	6080080c 	andi	r2,r12,32
    b538:	20c00104 	addi	r3,r4,4
    b53c:	1002711e 	bne	r2,zero,bf04 <___vfprintf_internal_r+0x1528>
    b540:	6080040c 	andi	r2,r12,16
    b544:	1002dc1e 	bne	r2,zero,c0b8 <___vfprintf_internal_r+0x16dc>
    b548:	6300100c 	andi	r12,r12,64
    b54c:	6002da26 	beq	r12,zero,c0b8 <___vfprintf_internal_r+0x16dc>
    b550:	d8800617 	ldw	r2,24(sp)
    b554:	d8c00615 	stw	r3,24(sp)
    b558:	d8c00517 	ldw	r3,20(sp)
    b55c:	10800017 	ldw	r2,0(r2)
    b560:	10c0000d 	sth	r3,0(r2)
    b564:	003d5106 	br	aaac <___vfprintf_internal_r+0xd0>
    b568:	bac00007 	ldb	r11,0(r23)
    b56c:	63000214 	ori	r12,r12,8
    b570:	003d6606 	br	ab0c <___vfprintf_internal_r+0x130>
    b574:	bac00007 	ldb	r11,0(r23)
    b578:	63001014 	ori	r12,r12,64
    b57c:	003d6306 	br	ab0c <___vfprintf_internal_r+0x130>
    b580:	d8c00617 	ldw	r3,24(sp)
    b584:	d8001345 	stb	zero,77(sp)
    b588:	05000044 	movi	r20,1
    b58c:	18800017 	ldw	r2,0(r3)
    b590:	18c00104 	addi	r3,r3,4
    b594:	d8c00615 	stw	r3,24(sp)
    b598:	d8801d05 	stb	r2,116(sp)
    b59c:	05400044 	movi	r21,1
    b5a0:	dc401d04 	addi	r17,sp,116
    b5a4:	003dd206 	br	acf0 <___vfprintf_internal_r+0x314>
    b5a8:	21003fcc 	andi	r4,r4,255
    b5ac:	2004b21e 	bne	r4,zero,c878 <___vfprintf_internal_r+0x1e9c>
    b5b0:	00800074 	movhi	r2,1
    b5b4:	109f6f04 	addi	r2,r2,32188
    b5b8:	d8800c15 	stw	r2,48(sp)
    b5bc:	6080080c 	andi	r2,r12,32
    b5c0:	103fa51e 	bne	r2,zero,b458 <___vfprintf_internal_r+0xa7c>
    b5c4:	d8c00617 	ldw	r3,24(sp)
    b5c8:	6080040c 	andi	r2,r12,16
    b5cc:	1d000017 	ldw	r20,0(r3)
    b5d0:	18c00104 	addi	r3,r3,4
    b5d4:	d8c00615 	stw	r3,24(sp)
    b5d8:	10022f1e 	bne	r2,zero,be98 <___vfprintf_internal_r+0x14bc>
    b5dc:	6080100c 	andi	r2,r12,64
    b5e0:	10022d26 	beq	r2,zero,be98 <___vfprintf_internal_r+0x14bc>
    b5e4:	a53fffcc 	andi	r20,r20,65535
    b5e8:	002b883a 	mov	r21,zero
    b5ec:	003f9f06 	br	b46c <___vfprintf_internal_r+0xa90>
    b5f0:	e2c01990 	cmplti	r11,fp,102
    b5f4:	5800fb1e 	bne	r11,zero,b9e4 <___vfprintf_internal_r+0x1008>
    b5f8:	d9000917 	ldw	r4,36(sp)
    b5fc:	d9400a17 	ldw	r5,40(sp)
    b600:	000d883a 	mov	r6,zero
    b604:	000f883a 	mov	r7,zero
    b608:	d8c00e15 	stw	r3,56(sp)
    b60c:	00086980 	call	8698 <__eqdf2>
    b610:	d8c00e17 	ldw	r3,56(sp)
    b614:	1001891e 	bne	r2,zero,bc3c <___vfprintf_internal_r+0x1260>
    b618:	d8801b17 	ldw	r2,108(sp)
    b61c:	01000074 	movhi	r4,1
    b620:	211f7604 	addi	r4,r4,32216
    b624:	10800044 	addi	r2,r2,1
    b628:	18c00044 	addi	r3,r3,1
    b62c:	b1000015 	stw	r4,0(r22)
    b630:	01000044 	movi	r4,1
    b634:	d8801b15 	stw	r2,108(sp)
    b638:	b1000115 	stw	r4,4(r22)
    b63c:	d8c01c15 	stw	r3,112(sp)
    b640:	10800208 	cmpgei	r2,r2,8
    b644:	10034a1e 	bne	r2,zero,c370 <___vfprintf_internal_r+0x1994>
    b648:	b5800204 	addi	r22,r22,8
    b64c:	d8801417 	ldw	r2,80(sp)
    b650:	d9000817 	ldw	r4,32(sp)
    b654:	1102150e 	bge	r2,r4,beac <___vfprintf_internal_r+0x14d0>
    b658:	d8800d17 	ldw	r2,52(sp)
    b65c:	d9000b17 	ldw	r4,44(sp)
    b660:	b0800015 	stw	r2,0(r22)
    b664:	d8801b17 	ldw	r2,108(sp)
    b668:	1907883a 	add	r3,r3,r4
    b66c:	b1000115 	stw	r4,4(r22)
    b670:	10800044 	addi	r2,r2,1
    b674:	d8801b15 	stw	r2,108(sp)
    b678:	d8c01c15 	stw	r3,112(sp)
    b67c:	10800208 	cmpgei	r2,r2,8
    b680:	1002371e 	bne	r2,zero,bf60 <___vfprintf_internal_r+0x1584>
    b684:	b5800204 	addi	r22,r22,8
    b688:	d8800817 	ldw	r2,32(sp)
    b68c:	157fffc4 	addi	r21,r2,-1
    b690:	057dd00e 	bge	zero,r21,add4 <___vfprintf_internal_r+0x3f8>
    b694:	01c00074 	movhi	r7,1
    b698:	a9000450 	cmplti	r4,r21,17
    b69c:	d8801b17 	ldw	r2,108(sp)
    b6a0:	39df7704 	addi	r7,r7,32220
    b6a4:	20032e1e 	bne	r4,zero,c360 <___vfprintf_internal_r+0x1984>
    b6a8:	07000404 	movi	fp,16
    b6ac:	3823883a 	mov	r17,r7
    b6b0:	00000406 	br	b6c4 <___vfprintf_internal_r+0xce8>
    b6b4:	b5800204 	addi	r22,r22,8
    b6b8:	ad7ffc04 	addi	r21,r21,-16
    b6bc:	a9000448 	cmpgei	r4,r21,17
    b6c0:	20032626 	beq	r4,zero,c35c <___vfprintf_internal_r+0x1980>
    b6c4:	10800044 	addi	r2,r2,1
    b6c8:	18c00404 	addi	r3,r3,16
    b6cc:	b4400015 	stw	r17,0(r22)
    b6d0:	b7000115 	stw	fp,4(r22)
    b6d4:	d8c01c15 	stw	r3,112(sp)
    b6d8:	d8801b15 	stw	r2,108(sp)
    b6dc:	11000208 	cmpgei	r4,r2,8
    b6e0:	203ff426 	beq	r4,zero,b6b4 <___vfprintf_internal_r+0xcd8>
    b6e4:	d9801a04 	addi	r6,sp,104
    b6e8:	900b883a 	mov	r5,r18
    b6ec:	9809883a 	mov	r4,r19
    b6f0:	00116a00 	call	116a0 <__sprint_r>
    b6f4:	103dc81e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    b6f8:	d8c01c17 	ldw	r3,112(sp)
    b6fc:	d8801b17 	ldw	r2,108(sp)
    b700:	dd802704 	addi	r22,sp,156
    b704:	003fec06 	br	b6b8 <___vfprintf_internal_r+0xcdc>
    b708:	8519c83a 	sub	r12,r16,r20
    b70c:	033da20e 	bge	zero,r12,ad98 <___vfprintf_internal_r+0x3bc>
    b710:	01c00074 	movhi	r7,1
    b714:	61000450 	cmplti	r4,r12,17
    b718:	d8801b17 	ldw	r2,108(sp)
    b71c:	39df7704 	addi	r7,r7,32220
    b720:	2000281e 	bne	r4,zero,b7c4 <___vfprintf_internal_r+0xde8>
    b724:	dc400e15 	stw	r17,56(sp)
    b728:	dc000f15 	stw	r16,60(sp)
    b72c:	b009883a 	mov	r4,r22
    b730:	03400404 	movi	r13,16
    b734:	a02d883a 	mov	r22,r20
    b738:	6021883a 	mov	r16,r12
    b73c:	4029883a 	mov	r20,r8
    b740:	3823883a 	mov	r17,r7
    b744:	00000406 	br	b758 <___vfprintf_internal_r+0xd7c>
    b748:	843ffc04 	addi	r16,r16,-16
    b74c:	81400448 	cmpgei	r5,r16,17
    b750:	21000204 	addi	r4,r4,8
    b754:	28001426 	beq	r5,zero,b7a8 <___vfprintf_internal_r+0xdcc>
    b758:	10800044 	addi	r2,r2,1
    b75c:	18c00404 	addi	r3,r3,16
    b760:	24400015 	stw	r17,0(r4)
    b764:	23400115 	stw	r13,4(r4)
    b768:	d8c01c15 	stw	r3,112(sp)
    b76c:	d8801b15 	stw	r2,108(sp)
    b770:	11400208 	cmpgei	r5,r2,8
    b774:	283ff426 	beq	r5,zero,b748 <___vfprintf_internal_r+0xd6c>
    b778:	d9801a04 	addi	r6,sp,104
    b77c:	900b883a 	mov	r5,r18
    b780:	9809883a 	mov	r4,r19
    b784:	00116a00 	call	116a0 <__sprint_r>
    b788:	103da31e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    b78c:	843ffc04 	addi	r16,r16,-16
    b790:	81400448 	cmpgei	r5,r16,17
    b794:	d8c01c17 	ldw	r3,112(sp)
    b798:	d8801b17 	ldw	r2,108(sp)
    b79c:	d9002704 	addi	r4,sp,156
    b7a0:	03400404 	movi	r13,16
    b7a4:	283fec1e 	bne	r5,zero,b758 <___vfprintf_internal_r+0xd7c>
    b7a8:	8019883a 	mov	r12,r16
    b7ac:	880f883a 	mov	r7,r17
    b7b0:	dc000f17 	ldw	r16,60(sp)
    b7b4:	dc400e17 	ldw	r17,56(sp)
    b7b8:	a011883a 	mov	r8,r20
    b7bc:	b029883a 	mov	r20,r22
    b7c0:	202d883a 	mov	r22,r4
    b7c4:	10800044 	addi	r2,r2,1
    b7c8:	1b07883a 	add	r3,r3,r12
    b7cc:	d8801b15 	stw	r2,108(sp)
    b7d0:	b1c00015 	stw	r7,0(r22)
    b7d4:	b3000115 	stw	r12,4(r22)
    b7d8:	d8c01c15 	stw	r3,112(sp)
    b7dc:	10800208 	cmpgei	r2,r2,8
    b7e0:	1002eb1e 	bne	r2,zero,c390 <___vfprintf_internal_r+0x19b4>
    b7e4:	4551c83a 	sub	r8,r8,r21
    b7e8:	b5800204 	addi	r22,r22,8
    b7ec:	023d6c0e 	bge	zero,r8,ada0 <___vfprintf_internal_r+0x3c4>
    b7f0:	01c00074 	movhi	r7,1
    b7f4:	41000450 	cmplti	r4,r8,17
    b7f8:	d8801b17 	ldw	r2,108(sp)
    b7fc:	39df7704 	addi	r7,r7,32220
    b800:	2000221e 	bne	r4,zero,b88c <___vfprintf_internal_r+0xeb0>
    b804:	dc400e15 	stw	r17,56(sp)
    b808:	dc000f15 	stw	r16,60(sp)
    b80c:	03000404 	movi	r12,16
    b810:	4021883a 	mov	r16,r8
    b814:	3823883a 	mov	r17,r7
    b818:	00000406 	br	b82c <___vfprintf_internal_r+0xe50>
    b81c:	843ffc04 	addi	r16,r16,-16
    b820:	81000448 	cmpgei	r4,r16,17
    b824:	b5800204 	addi	r22,r22,8
    b828:	20001426 	beq	r4,zero,b87c <___vfprintf_internal_r+0xea0>
    b82c:	10800044 	addi	r2,r2,1
    b830:	18c00404 	addi	r3,r3,16
    b834:	b4400015 	stw	r17,0(r22)
    b838:	b3000115 	stw	r12,4(r22)
    b83c:	d8c01c15 	stw	r3,112(sp)
    b840:	d8801b15 	stw	r2,108(sp)
    b844:	11000208 	cmpgei	r4,r2,8
    b848:	203ff426 	beq	r4,zero,b81c <___vfprintf_internal_r+0xe40>
    b84c:	d9801a04 	addi	r6,sp,104
    b850:	900b883a 	mov	r5,r18
    b854:	9809883a 	mov	r4,r19
    b858:	00116a00 	call	116a0 <__sprint_r>
    b85c:	103d6e1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    b860:	843ffc04 	addi	r16,r16,-16
    b864:	81000448 	cmpgei	r4,r16,17
    b868:	d8c01c17 	ldw	r3,112(sp)
    b86c:	d8801b17 	ldw	r2,108(sp)
    b870:	dd802704 	addi	r22,sp,156
    b874:	03000404 	movi	r12,16
    b878:	203fec1e 	bne	r4,zero,b82c <___vfprintf_internal_r+0xe50>
    b87c:	8011883a 	mov	r8,r16
    b880:	880f883a 	mov	r7,r17
    b884:	dc000f17 	ldw	r16,60(sp)
    b888:	dc400e17 	ldw	r17,56(sp)
    b88c:	10800044 	addi	r2,r2,1
    b890:	1a07883a 	add	r3,r3,r8
    b894:	d8801b15 	stw	r2,108(sp)
    b898:	b1c00015 	stw	r7,0(r22)
    b89c:	b2000115 	stw	r8,4(r22)
    b8a0:	d8c01c15 	stw	r3,112(sp)
    b8a4:	10800208 	cmpgei	r2,r2,8
    b8a8:	1001731e 	bne	r2,zero,be78 <___vfprintf_internal_r+0x149c>
    b8ac:	b5800204 	addi	r22,r22,8
    b8b0:	003d3b06 	br	ada0 <___vfprintf_internal_r+0x3c4>
    b8b4:	10c00060 	cmpeqi	r3,r2,1
    b8b8:	1803831e 	bne	r3,zero,c6c8 <___vfprintf_internal_r+0x1cec>
    b8bc:	108000a0 	cmpeqi	r2,r2,2
    b8c0:	db000417 	ldw	r12,16(sp)
    b8c4:	103ea326 	beq	r2,zero,b354 <___vfprintf_internal_r+0x978>
    b8c8:	d9000c17 	ldw	r4,48(sp)
    b8cc:	dc402704 	addi	r17,sp,156
    b8d0:	a08003cc 	andi	r2,r20,15
    b8d4:	a806973a 	slli	r3,r21,28
    b8d8:	a028d13a 	srli	r20,r20,4
    b8dc:	2085883a 	add	r2,r4,r2
    b8e0:	10800003 	ldbu	r2,0(r2)
    b8e4:	a82ad13a 	srli	r21,r21,4
    b8e8:	1d28b03a 	or	r20,r3,r20
    b8ec:	88bfffc5 	stb	r2,-1(r17)
    b8f0:	a544b03a 	or	r2,r20,r21
    b8f4:	8c7fffc4 	addi	r17,r17,-1
    b8f8:	103ff51e 	bne	r2,zero,b8d0 <___vfprintf_internal_r+0xef4>
    b8fc:	d8802704 	addi	r2,sp,156
    b900:	146bc83a 	sub	r21,r2,r17
    b904:	db000415 	stw	r12,16(sp)
    b908:	003e4b06 	br	b238 <___vfprintf_internal_r+0x85c>
    b90c:	d9801a04 	addi	r6,sp,104
    b910:	900b883a 	mov	r5,r18
    b914:	9809883a 	mov	r4,r19
    b918:	00116a00 	call	116a0 <__sprint_r>
    b91c:	103d3826 	beq	r2,zero,ae00 <___vfprintf_internal_r+0x424>
    b920:	003d3d06 	br	ae18 <___vfprintf_internal_r+0x43c>
    b924:	d8801b17 	ldw	r2,108(sp)
    b928:	01000074 	movhi	r4,1
    b92c:	211f7604 	addi	r4,r4,32216
    b930:	10800044 	addi	r2,r2,1
    b934:	18c00044 	addi	r3,r3,1
    b938:	b1000015 	stw	r4,0(r22)
    b93c:	01000044 	movi	r4,1
    b940:	d8801b15 	stw	r2,108(sp)
    b944:	b1000115 	stw	r4,4(r22)
    b948:	d8c01c15 	stw	r3,112(sp)
    b94c:	10800208 	cmpgei	r2,r2,8
    b950:	1003211e 	bne	r2,zero,c5d8 <___vfprintf_internal_r+0x1bfc>
    b954:	b5800204 	addi	r22,r22,8
    b958:	2802a51e 	bne	r5,zero,c3f0 <___vfprintf_internal_r+0x1a14>
    b95c:	d8800417 	ldw	r2,16(sp)
    b960:	d9000817 	ldw	r4,32(sp)
    b964:	1080004c 	andi	r2,r2,1
    b968:	1104b03a 	or	r2,r2,r4
    b96c:	103d1926 	beq	r2,zero,add4 <___vfprintf_internal_r+0x3f8>
    b970:	d8800d17 	ldw	r2,52(sp)
    b974:	d9000b17 	ldw	r4,44(sp)
    b978:	b0800015 	stw	r2,0(r22)
    b97c:	d8801b17 	ldw	r2,108(sp)
    b980:	20c7883a 	add	r3,r4,r3
    b984:	b1000115 	stw	r4,4(r22)
    b988:	10800044 	addi	r2,r2,1
    b98c:	d8c01c15 	stw	r3,112(sp)
    b990:	d8801b15 	stw	r2,108(sp)
    b994:	11000208 	cmpgei	r4,r2,8
    b998:	2003381e 	bne	r4,zero,c67c <___vfprintf_internal_r+0x1ca0>
    b99c:	b5800204 	addi	r22,r22,8
    b9a0:	d9000817 	ldw	r4,32(sp)
    b9a4:	10800044 	addi	r2,r2,1
    b9a8:	d8801b15 	stw	r2,108(sp)
    b9ac:	20c7883a 	add	r3,r4,r3
    b9b0:	b4400015 	stw	r17,0(r22)
    b9b4:	b1000115 	stw	r4,4(r22)
    b9b8:	d8c01c15 	stw	r3,112(sp)
    b9bc:	10800208 	cmpgei	r2,r2,8
    b9c0:	103d0326 	beq	r2,zero,add0 <___vfprintf_internal_r+0x3f4>
    b9c4:	d9801a04 	addi	r6,sp,104
    b9c8:	900b883a 	mov	r5,r18
    b9cc:	9809883a 	mov	r4,r19
    b9d0:	00116a00 	call	116a0 <__sprint_r>
    b9d4:	103d101e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    b9d8:	d8c01c17 	ldw	r3,112(sp)
    b9dc:	dd802704 	addi	r22,sp,156
    b9e0:	003cfc06 	br	add4 <___vfprintf_internal_r+0x3f8>
    b9e4:	d8800817 	ldw	r2,32(sp)
    b9e8:	dd401b17 	ldw	r21,108(sp)
    b9ec:	18c00044 	addi	r3,r3,1
    b9f0:	10800088 	cmpgei	r2,r2,2
    b9f4:	ad400044 	addi	r21,r21,1
    b9f8:	b7000204 	addi	fp,r22,8
    b9fc:	1000e826 	beq	r2,zero,bda0 <___vfprintf_internal_r+0x13c4>
    ba00:	00800044 	movi	r2,1
    ba04:	b0800115 	stw	r2,4(r22)
    ba08:	b4400015 	stw	r17,0(r22)
    ba0c:	d8c01c15 	stw	r3,112(sp)
    ba10:	dd401b15 	stw	r21,108(sp)
    ba14:	a8800210 	cmplti	r2,r21,8
    ba18:	1001ad26 	beq	r2,zero,c0d0 <___vfprintf_internal_r+0x16f4>
    ba1c:	d8800b17 	ldw	r2,44(sp)
    ba20:	d9000d17 	ldw	r4,52(sp)
    ba24:	ad400044 	addi	r21,r21,1
    ba28:	1887883a 	add	r3,r3,r2
    ba2c:	e0800115 	stw	r2,4(fp)
    ba30:	e1000015 	stw	r4,0(fp)
    ba34:	d8c01c15 	stw	r3,112(sp)
    ba38:	dd401b15 	stw	r21,108(sp)
    ba3c:	a8800208 	cmpgei	r2,r21,8
    ba40:	1001ac1e 	bne	r2,zero,c0f4 <___vfprintf_internal_r+0x1718>
    ba44:	e7000204 	addi	fp,fp,8
    ba48:	d9000917 	ldw	r4,36(sp)
    ba4c:	d9400a17 	ldw	r5,40(sp)
    ba50:	000d883a 	mov	r6,zero
    ba54:	000f883a 	mov	r7,zero
    ba58:	d8c00715 	stw	r3,28(sp)
    ba5c:	00086980 	call	8698 <__eqdf2>
    ba60:	d8c00817 	ldw	r3,32(sp)
    ba64:	1dbfffc4 	addi	r22,r3,-1
    ba68:	d8c00717 	ldw	r3,28(sp)
    ba6c:	1000e426 	beq	r2,zero,be00 <___vfprintf_internal_r+0x1424>
    ba70:	8a400044 	addi	r9,r17,1
    ba74:	ad400044 	addi	r21,r21,1
    ba78:	1d87883a 	add	r3,r3,r22
    ba7c:	e2400015 	stw	r9,0(fp)
    ba80:	e5800115 	stw	r22,4(fp)
    ba84:	d8c01c15 	stw	r3,112(sp)
    ba88:	dd401b15 	stw	r21,108(sp)
    ba8c:	a8800208 	cmpgei	r2,r21,8
    ba90:	1000cd1e 	bne	r2,zero,bdc8 <___vfprintf_internal_r+0x13ec>
    ba94:	e7000204 	addi	fp,fp,8
    ba98:	d9001017 	ldw	r4,64(sp)
    ba9c:	ad400044 	addi	r21,r21,1
    baa0:	d8801644 	addi	r2,sp,89
    baa4:	20c7883a 	add	r3,r4,r3
    baa8:	dd401b15 	stw	r21,108(sp)
    baac:	e0800015 	stw	r2,0(fp)
    bab0:	e1000115 	stw	r4,4(fp)
    bab4:	d8c01c15 	stw	r3,112(sp)
    bab8:	ad400208 	cmpgei	r21,r21,8
    babc:	a83fc11e 	bne	r21,zero,b9c4 <___vfprintf_internal_r+0xfe8>
    bac0:	e5800204 	addi	r22,fp,8
    bac4:	003cc306 	br	add4 <___vfprintf_internal_r+0x3f8>
    bac8:	db000417 	ldw	r12,16(sp)
    bacc:	003e1d06 	br	b344 <___vfprintf_internal_r+0x968>
    bad0:	03000074 	movhi	r12,1
    bad4:	39000450 	cmplti	r4,r7,17
    bad8:	d8801b17 	ldw	r2,108(sp)
    badc:	631f7b04 	addi	r12,r12,32236
    bae0:	2000321e 	bne	r4,zero,bbac <___vfprintf_internal_r+0x11d0>
    bae4:	dc401115 	stw	r17,68(sp)
    bae8:	b009883a 	mov	r4,r22
    baec:	9023883a 	mov	r17,r18
    baf0:	a82d883a 	mov	r22,r21
    baf4:	ddc01215 	stw	r23,72(sp)
    baf8:	03c00404 	movi	r15,16
    bafc:	a02f883a 	mov	r23,r20
    bb00:	db800e15 	stw	r14,56(sp)
    bb04:	8029883a 	mov	r20,r16
    bb08:	db400f15 	stw	r13,60(sp)
    bb0c:	402b883a 	mov	r21,r8
    bb10:	3821883a 	mov	r16,r7
    bb14:	6025883a 	mov	r18,r12
    bb18:	00000406 	br	bb2c <___vfprintf_internal_r+0x1150>
    bb1c:	843ffc04 	addi	r16,r16,-16
    bb20:	81800448 	cmpgei	r6,r16,17
    bb24:	21000204 	addi	r4,r4,8
    bb28:	30001426 	beq	r6,zero,bb7c <___vfprintf_internal_r+0x11a0>
    bb2c:	10800044 	addi	r2,r2,1
    bb30:	18c00404 	addi	r3,r3,16
    bb34:	24800015 	stw	r18,0(r4)
    bb38:	23c00115 	stw	r15,4(r4)
    bb3c:	d8c01c15 	stw	r3,112(sp)
    bb40:	d8801b15 	stw	r2,108(sp)
    bb44:	11800208 	cmpgei	r6,r2,8
    bb48:	303ff426 	beq	r6,zero,bb1c <___vfprintf_internal_r+0x1140>
    bb4c:	d9801a04 	addi	r6,sp,104
    bb50:	880b883a 	mov	r5,r17
    bb54:	9809883a 	mov	r4,r19
    bb58:	00116a00 	call	116a0 <__sprint_r>
    bb5c:	10017c1e 	bne	r2,zero,c150 <___vfprintf_internal_r+0x1774>
    bb60:	843ffc04 	addi	r16,r16,-16
    bb64:	81800448 	cmpgei	r6,r16,17
    bb68:	d8c01c17 	ldw	r3,112(sp)
    bb6c:	d8801b17 	ldw	r2,108(sp)
    bb70:	d9002704 	addi	r4,sp,156
    bb74:	03c00404 	movi	r15,16
    bb78:	303fec1e 	bne	r6,zero,bb2c <___vfprintf_internal_r+0x1150>
    bb7c:	800f883a 	mov	r7,r16
    bb80:	9019883a 	mov	r12,r18
    bb84:	a021883a 	mov	r16,r20
    bb88:	8825883a 	mov	r18,r17
    bb8c:	b829883a 	mov	r20,r23
    bb90:	db800e17 	ldw	r14,56(sp)
    bb94:	db400f17 	ldw	r13,60(sp)
    bb98:	ddc01217 	ldw	r23,72(sp)
    bb9c:	dc401117 	ldw	r17,68(sp)
    bba0:	a811883a 	mov	r8,r21
    bba4:	b02b883a 	mov	r21,r22
    bba8:	202d883a 	mov	r22,r4
    bbac:	10800044 	addi	r2,r2,1
    bbb0:	19c7883a 	add	r3,r3,r7
    bbb4:	d8801b15 	stw	r2,108(sp)
    bbb8:	b3000015 	stw	r12,0(r22)
    bbbc:	b1c00115 	stw	r7,4(r22)
    bbc0:	d8c01c15 	stw	r3,112(sp)
    bbc4:	10800208 	cmpgei	r2,r2,8
    bbc8:	1001531e 	bne	r2,zero,c118 <___vfprintf_internal_r+0x173c>
    bbcc:	b5800204 	addi	r22,r22,8
    bbd0:	003c5406 	br	ad24 <___vfprintf_internal_r+0x348>
    bbd4:	d9801a04 	addi	r6,sp,104
    bbd8:	900b883a 	mov	r5,r18
    bbdc:	9809883a 	mov	r4,r19
    bbe0:	da001115 	stw	r8,68(sp)
    bbe4:	db400f15 	stw	r13,60(sp)
    bbe8:	db800e15 	stw	r14,56(sp)
    bbec:	00116a00 	call	116a0 <__sprint_r>
    bbf0:	103c891e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    bbf4:	d8c01c17 	ldw	r3,112(sp)
    bbf8:	da001117 	ldw	r8,68(sp)
    bbfc:	db400f17 	ldw	r13,60(sp)
    bc00:	db800e17 	ldw	r14,56(sp)
    bc04:	dd802704 	addi	r22,sp,156
    bc08:	003c5406 	br	ad5c <___vfprintf_internal_r+0x380>
    bc0c:	d9801a04 	addi	r6,sp,104
    bc10:	900b883a 	mov	r5,r18
    bc14:	9809883a 	mov	r4,r19
    bc18:	da000f15 	stw	r8,60(sp)
    bc1c:	db400e15 	stw	r13,56(sp)
    bc20:	00116a00 	call	116a0 <__sprint_r>
    bc24:	103c7c1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    bc28:	d8c01c17 	ldw	r3,112(sp)
    bc2c:	da000f17 	ldw	r8,60(sp)
    bc30:	db400e17 	ldw	r13,56(sp)
    bc34:	dd802704 	addi	r22,sp,156
    bc38:	003c5506 	br	ad90 <___vfprintf_internal_r+0x3b4>
    bc3c:	d9401417 	ldw	r5,80(sp)
    bc40:	017f380e 	bge	zero,r5,b924 <___vfprintf_internal_r+0xf48>
    bc44:	d8800717 	ldw	r2,28(sp)
    bc48:	d9000817 	ldw	r4,32(sp)
    bc4c:	102b883a 	mov	r21,r2
    bc50:	2080b316 	blt	r4,r2,bf20 <___vfprintf_internal_r+0x1544>
    bc54:	05400a0e 	bge	zero,r21,bc80 <___vfprintf_internal_r+0x12a4>
    bc58:	d8801b17 	ldw	r2,108(sp)
    bc5c:	1d47883a 	add	r3,r3,r21
    bc60:	b4400015 	stw	r17,0(r22)
    bc64:	10800044 	addi	r2,r2,1
    bc68:	d8801b15 	stw	r2,108(sp)
    bc6c:	b5400115 	stw	r21,4(r22)
    bc70:	d8c01c15 	stw	r3,112(sp)
    bc74:	10800208 	cmpgei	r2,r2,8
    bc78:	1002cf1e 	bne	r2,zero,c7b8 <___vfprintf_internal_r+0x1ddc>
    bc7c:	b5800204 	addi	r22,r22,8
    bc80:	a800b516 	blt	r21,zero,bf58 <___vfprintf_internal_r+0x157c>
    bc84:	d8800717 	ldw	r2,28(sp)
    bc88:	156bc83a 	sub	r21,r2,r21
    bc8c:	0540c416 	blt	zero,r21,bfa0 <___vfprintf_internal_r+0x15c4>
    bc90:	dd401417 	ldw	r21,80(sp)
    bc94:	d8800817 	ldw	r2,32(sp)
    bc98:	a880a40e 	bge	r21,r2,bf2c <___vfprintf_internal_r+0x1550>
    bc9c:	d8800d17 	ldw	r2,52(sp)
    bca0:	d9000b17 	ldw	r4,44(sp)
    bca4:	b0800015 	stw	r2,0(r22)
    bca8:	d8801b17 	ldw	r2,108(sp)
    bcac:	1907883a 	add	r3,r3,r4
    bcb0:	b1000115 	stw	r4,4(r22)
    bcb4:	10800044 	addi	r2,r2,1
    bcb8:	d8801b15 	stw	r2,108(sp)
    bcbc:	d8c01c15 	stw	r3,112(sp)
    bcc0:	10800208 	cmpgei	r2,r2,8
    bcc4:	1002b31e 	bne	r2,zero,c794 <___vfprintf_internal_r+0x1db8>
    bcc8:	b5800204 	addi	r22,r22,8
    bccc:	d9000817 	ldw	r4,32(sp)
    bcd0:	d9400717 	ldw	r5,28(sp)
    bcd4:	2545c83a 	sub	r2,r4,r21
    bcd8:	2149c83a 	sub	r4,r4,r5
    bcdc:	102b883a 	mov	r21,r2
    bce0:	2080010e 	bge	r4,r2,bce8 <___vfprintf_internal_r+0x130c>
    bce4:	202b883a 	mov	r21,r4
    bce8:	05400c0e 	bge	zero,r21,bd1c <___vfprintf_internal_r+0x1340>
    bcec:	d9000717 	ldw	r4,28(sp)
    bcf0:	1d47883a 	add	r3,r3,r21
    bcf4:	b5400115 	stw	r21,4(r22)
    bcf8:	8913883a 	add	r9,r17,r4
    bcfc:	d9001b17 	ldw	r4,108(sp)
    bd00:	b2400015 	stw	r9,0(r22)
    bd04:	d8c01c15 	stw	r3,112(sp)
    bd08:	21000044 	addi	r4,r4,1
    bd0c:	d9001b15 	stw	r4,108(sp)
    bd10:	21000208 	cmpgei	r4,r4,8
    bd14:	2002b31e 	bne	r4,zero,c7e4 <___vfprintf_internal_r+0x1e08>
    bd18:	b5800204 	addi	r22,r22,8
    bd1c:	a800010e 	bge	r21,zero,bd24 <___vfprintf_internal_r+0x1348>
    bd20:	002b883a 	mov	r21,zero
    bd24:	156bc83a 	sub	r21,r2,r21
    bd28:	057c2a0e 	bge	zero,r21,add4 <___vfprintf_internal_r+0x3f8>
    bd2c:	01c00074 	movhi	r7,1
    bd30:	a9000450 	cmplti	r4,r21,17
    bd34:	d8801b17 	ldw	r2,108(sp)
    bd38:	39df7704 	addi	r7,r7,32220
    bd3c:	2001881e 	bne	r4,zero,c360 <___vfprintf_internal_r+0x1984>
    bd40:	07000404 	movi	fp,16
    bd44:	3823883a 	mov	r17,r7
    bd48:	00000406 	br	bd5c <___vfprintf_internal_r+0x1380>
    bd4c:	b5800204 	addi	r22,r22,8
    bd50:	ad7ffc04 	addi	r21,r21,-16
    bd54:	a9000448 	cmpgei	r4,r21,17
    bd58:	20018026 	beq	r4,zero,c35c <___vfprintf_internal_r+0x1980>
    bd5c:	10800044 	addi	r2,r2,1
    bd60:	18c00404 	addi	r3,r3,16
    bd64:	b4400015 	stw	r17,0(r22)
    bd68:	b7000115 	stw	fp,4(r22)
    bd6c:	d8c01c15 	stw	r3,112(sp)
    bd70:	d8801b15 	stw	r2,108(sp)
    bd74:	11000208 	cmpgei	r4,r2,8
    bd78:	203ff426 	beq	r4,zero,bd4c <___vfprintf_internal_r+0x1370>
    bd7c:	d9801a04 	addi	r6,sp,104
    bd80:	900b883a 	mov	r5,r18
    bd84:	9809883a 	mov	r4,r19
    bd88:	00116a00 	call	116a0 <__sprint_r>
    bd8c:	103c221e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    bd90:	d8c01c17 	ldw	r3,112(sp)
    bd94:	d8801b17 	ldw	r2,108(sp)
    bd98:	dd802704 	addi	r22,sp,156
    bd9c:	003fec06 	br	bd50 <___vfprintf_internal_r+0x1374>
    bda0:	d8800417 	ldw	r2,16(sp)
    bda4:	1080004c 	andi	r2,r2,1
    bda8:	103f151e 	bne	r2,zero,ba00 <___vfprintf_internal_r+0x1024>
    bdac:	00800044 	movi	r2,1
    bdb0:	b0800115 	stw	r2,4(r22)
    bdb4:	b4400015 	stw	r17,0(r22)
    bdb8:	d8c01c15 	stw	r3,112(sp)
    bdbc:	dd401b15 	stw	r21,108(sp)
    bdc0:	a8800210 	cmplti	r2,r21,8
    bdc4:	103f341e 	bne	r2,zero,ba98 <___vfprintf_internal_r+0x10bc>
    bdc8:	d9801a04 	addi	r6,sp,104
    bdcc:	900b883a 	mov	r5,r18
    bdd0:	9809883a 	mov	r4,r19
    bdd4:	00116a00 	call	116a0 <__sprint_r>
    bdd8:	103c0f1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    bddc:	d8c01c17 	ldw	r3,112(sp)
    bde0:	dd401b17 	ldw	r21,108(sp)
    bde4:	df002704 	addi	fp,sp,156
    bde8:	003f2b06 	br	ba98 <___vfprintf_internal_r+0x10bc>
    bdec:	4002361e 	bne	r8,zero,c6c8 <___vfprintf_internal_r+0x1cec>
    bdf0:	0011883a 	mov	r8,zero
    bdf4:	002b883a 	mov	r21,zero
    bdf8:	dc402704 	addi	r17,sp,156
    bdfc:	003d0e06 	br	b238 <___vfprintf_internal_r+0x85c>
    be00:	05bf250e 	bge	zero,r22,ba98 <___vfprintf_internal_r+0x10bc>
    be04:	01c00074 	movhi	r7,1
    be08:	b0800450 	cmplti	r2,r22,17
    be0c:	39df7704 	addi	r7,r7,32220
    be10:	1001731e 	bne	r2,zero,c3e0 <___vfprintf_internal_r+0x1a04>
    be14:	dc000715 	stw	r16,28(sp)
    be18:	04400404 	movi	r17,16
    be1c:	3821883a 	mov	r16,r7
    be20:	00000406 	br	be34 <___vfprintf_internal_r+0x1458>
    be24:	e7000204 	addi	fp,fp,8
    be28:	b5bffc04 	addi	r22,r22,-16
    be2c:	b0800448 	cmpgei	r2,r22,17
    be30:	10016926 	beq	r2,zero,c3d8 <___vfprintf_internal_r+0x19fc>
    be34:	ad400044 	addi	r21,r21,1
    be38:	18c00404 	addi	r3,r3,16
    be3c:	e4000015 	stw	r16,0(fp)
    be40:	e4400115 	stw	r17,4(fp)
    be44:	d8c01c15 	stw	r3,112(sp)
    be48:	dd401b15 	stw	r21,108(sp)
    be4c:	a8800208 	cmpgei	r2,r21,8
    be50:	103ff426 	beq	r2,zero,be24 <___vfprintf_internal_r+0x1448>
    be54:	d9801a04 	addi	r6,sp,104
    be58:	900b883a 	mov	r5,r18
    be5c:	9809883a 	mov	r4,r19
    be60:	00116a00 	call	116a0 <__sprint_r>
    be64:	103bec1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    be68:	d8c01c17 	ldw	r3,112(sp)
    be6c:	dd401b17 	ldw	r21,108(sp)
    be70:	df002704 	addi	fp,sp,156
    be74:	003fec06 	br	be28 <___vfprintf_internal_r+0x144c>
    be78:	d9801a04 	addi	r6,sp,104
    be7c:	900b883a 	mov	r5,r18
    be80:	9809883a 	mov	r4,r19
    be84:	00116a00 	call	116a0 <__sprint_r>
    be88:	103be31e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    be8c:	d8c01c17 	ldw	r3,112(sp)
    be90:	dd802704 	addi	r22,sp,156
    be94:	003bc206 	br	ada0 <___vfprintf_internal_r+0x3c4>
    be98:	002b883a 	mov	r21,zero
    be9c:	003d7306 	br	b46c <___vfprintf_internal_r+0xa90>
    bea0:	a02bd7fa 	srai	r21,r20,31
    bea4:	a805883a 	mov	r2,r21
    bea8:	003cd106 	br	b1f0 <___vfprintf_internal_r+0x814>
    beac:	d8800417 	ldw	r2,16(sp)
    beb0:	1080004c 	andi	r2,r2,1
    beb4:	103bc726 	beq	r2,zero,add4 <___vfprintf_internal_r+0x3f8>
    beb8:	003de706 	br	b658 <___vfprintf_internal_r+0xc7c>
    bebc:	63000414 	ori	r12,r12,16
    bec0:	003b1206 	br	ab0c <___vfprintf_internal_r+0x130>
    bec4:	bac00007 	ldb	r11,0(r23)
    bec8:	d8800615 	stw	r2,24(sp)
    becc:	003b0f06 	br	ab0c <___vfprintf_internal_r+0x130>
    bed0:	dc402704 	addi	r17,sp,156
    bed4:	003cd806 	br	b238 <___vfprintf_internal_r+0x85c>
    bed8:	18800017 	ldw	r2,0(r3)
    bedc:	d8800915 	stw	r2,36(sp)
    bee0:	18800117 	ldw	r2,4(r3)
    bee4:	d8800a15 	stw	r2,40(sp)
    bee8:	003c3e06 	br	afe4 <___vfprintf_internal_r+0x608>
    beec:	00800c04 	movi	r2,48
    bef0:	d8801385 	stb	r2,78(sp)
    bef4:	df0013c5 	stb	fp,79(sp)
    bef8:	63000094 	ori	r12,r12,2
    befc:	00800084 	movi	r2,2
    bf00:	003c0206 	br	af0c <___vfprintf_internal_r+0x530>
    bf04:	d9400517 	ldw	r5,20(sp)
    bf08:	20800017 	ldw	r2,0(r4)
    bf0c:	d8c00615 	stw	r3,24(sp)
    bf10:	2809d7fa 	srai	r4,r5,31
    bf14:	11400015 	stw	r5,0(r2)
    bf18:	11000115 	stw	r4,4(r2)
    bf1c:	003ae306 	br	aaac <___vfprintf_internal_r+0xd0>
    bf20:	202b883a 	mov	r21,r4
    bf24:	057f4c16 	blt	zero,r21,bc58 <___vfprintf_internal_r+0x127c>
    bf28:	003f5506 	br	bc80 <___vfprintf_internal_r+0x12a4>
    bf2c:	d8800417 	ldw	r2,16(sp)
    bf30:	1080004c 	andi	r2,r2,1
    bf34:	103f591e 	bne	r2,zero,bc9c <___vfprintf_internal_r+0x12c0>
    bf38:	d9000817 	ldw	r4,32(sp)
    bf3c:	d9400717 	ldw	r5,28(sp)
    bf40:	2545c83a 	sub	r2,r4,r21
    bf44:	2179c83a 	sub	fp,r4,r5
    bf48:	102b883a 	mov	r21,r2
    bf4c:	e0bf730e 	bge	fp,r2,bd1c <___vfprintf_internal_r+0x1340>
    bf50:	e02b883a 	mov	r21,fp
    bf54:	003f7106 	br	bd1c <___vfprintf_internal_r+0x1340>
    bf58:	002b883a 	mov	r21,zero
    bf5c:	003f4906 	br	bc84 <___vfprintf_internal_r+0x12a8>
    bf60:	d9801a04 	addi	r6,sp,104
    bf64:	900b883a 	mov	r5,r18
    bf68:	9809883a 	mov	r4,r19
    bf6c:	00116a00 	call	116a0 <__sprint_r>
    bf70:	103ba91e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    bf74:	d8c01c17 	ldw	r3,112(sp)
    bf78:	dd802704 	addi	r22,sp,156
    bf7c:	003dc206 	br	b688 <___vfprintf_internal_r+0xcac>
    bf80:	408001f0 	cmpltui	r2,r8,7
    bf84:	402b883a 	mov	r21,r8
    bf88:	1001a026 	beq	r2,zero,c60c <___vfprintf_internal_r+0x1c30>
    bf8c:	04400074 	movhi	r17,1
    bf90:	a829883a 	mov	r20,r21
    bf94:	d8c00615 	stw	r3,24(sp)
    bf98:	8c5f7404 	addi	r17,r17,32208
    bf9c:	003b5406 	br	acf0 <___vfprintf_internal_r+0x314>
    bfa0:	01c00074 	movhi	r7,1
    bfa4:	a9000450 	cmplti	r4,r21,17
    bfa8:	d8801b17 	ldw	r2,108(sp)
    bfac:	39df7704 	addi	r7,r7,32220
    bfb0:	20017b1e 	bne	r4,zero,c5a0 <___vfprintf_internal_r+0x1bc4>
    bfb4:	dc000e15 	stw	r16,56(sp)
    bfb8:	07000404 	movi	fp,16
    bfbc:	3821883a 	mov	r16,r7
    bfc0:	00000406 	br	bfd4 <___vfprintf_internal_r+0x15f8>
    bfc4:	b5800204 	addi	r22,r22,8
    bfc8:	ad7ffc04 	addi	r21,r21,-16
    bfcc:	a9000448 	cmpgei	r4,r21,17
    bfd0:	20017126 	beq	r4,zero,c598 <___vfprintf_internal_r+0x1bbc>
    bfd4:	10800044 	addi	r2,r2,1
    bfd8:	18c00404 	addi	r3,r3,16
    bfdc:	b4000015 	stw	r16,0(r22)
    bfe0:	b7000115 	stw	fp,4(r22)
    bfe4:	d8c01c15 	stw	r3,112(sp)
    bfe8:	d8801b15 	stw	r2,108(sp)
    bfec:	11000208 	cmpgei	r4,r2,8
    bff0:	203ff426 	beq	r4,zero,bfc4 <___vfprintf_internal_r+0x15e8>
    bff4:	d9801a04 	addi	r6,sp,104
    bff8:	900b883a 	mov	r5,r18
    bffc:	9809883a 	mov	r4,r19
    c000:	00116a00 	call	116a0 <__sprint_r>
    c004:	103b841e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c008:	d8c01c17 	ldw	r3,112(sp)
    c00c:	d8801b17 	ldw	r2,108(sp)
    c010:	dd802704 	addi	r22,sp,156
    c014:	003fec06 	br	bfc8 <___vfprintf_internal_r+0x15ec>
    c018:	dc402704 	addi	r17,sp,156
    c01c:	a805883a 	mov	r2,r21
    c020:	dc000715 	stw	r16,28(sp)
    c024:	902b883a 	mov	r21,r18
    c028:	8821883a 	mov	r16,r17
    c02c:	db000415 	stw	r12,16(sp)
    c030:	a023883a 	mov	r17,r20
    c034:	da000e15 	stw	r8,56(sp)
    c038:	9829883a 	mov	r20,r19
    c03c:	1025883a 	mov	r18,r2
    c040:	6827883a 	mov	r19,r13
    c044:	8809883a 	mov	r4,r17
    c048:	900b883a 	mov	r5,r18
    c04c:	01800284 	movi	r6,10
    c050:	000f883a 	mov	r7,zero
    c054:	001420c0 	call	1420c <__umoddi3>
    c058:	10800c04 	addi	r2,r2,48
    c05c:	8809883a 	mov	r4,r17
    c060:	900b883a 	mov	r5,r18
    c064:	01800284 	movi	r6,10
    c068:	000f883a 	mov	r7,zero
    c06c:	80bfffc5 	stb	r2,-1(r16)
    c070:	0013bec0 	call	13bec <__udivdi3>
    c074:	900d883a 	mov	r6,r18
    c078:	880f883a 	mov	r7,r17
    c07c:	843fffc4 	addi	r16,r16,-1
    c080:	1023883a 	mov	r17,r2
    c084:	1825883a 	mov	r18,r3
    c088:	303fee1e 	bne	r6,zero,c044 <___vfprintf_internal_r+0x1668>
    c08c:	39c002a8 	cmpgeui	r7,r7,10
    c090:	383fec1e 	bne	r7,zero,c044 <___vfprintf_internal_r+0x1668>
    c094:	8023883a 	mov	r17,r16
    c098:	d8802704 	addi	r2,sp,156
    c09c:	981b883a 	mov	r13,r19
    c0a0:	a825883a 	mov	r18,r21
    c0a4:	dc000717 	ldw	r16,28(sp)
    c0a8:	da000e17 	ldw	r8,56(sp)
    c0ac:	a027883a 	mov	r19,r20
    c0b0:	146bc83a 	sub	r21,r2,r17
    c0b4:	003c6006 	br	b238 <___vfprintf_internal_r+0x85c>
    c0b8:	d8800617 	ldw	r2,24(sp)
    c0bc:	10800017 	ldw	r2,0(r2)
    c0c0:	d8c00615 	stw	r3,24(sp)
    c0c4:	d8c00517 	ldw	r3,20(sp)
    c0c8:	10c00015 	stw	r3,0(r2)
    c0cc:	003a7706 	br	aaac <___vfprintf_internal_r+0xd0>
    c0d0:	d9801a04 	addi	r6,sp,104
    c0d4:	900b883a 	mov	r5,r18
    c0d8:	9809883a 	mov	r4,r19
    c0dc:	00116a00 	call	116a0 <__sprint_r>
    c0e0:	103b4d1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c0e4:	d8c01c17 	ldw	r3,112(sp)
    c0e8:	dd401b17 	ldw	r21,108(sp)
    c0ec:	df002704 	addi	fp,sp,156
    c0f0:	003e4a06 	br	ba1c <___vfprintf_internal_r+0x1040>
    c0f4:	d9801a04 	addi	r6,sp,104
    c0f8:	900b883a 	mov	r5,r18
    c0fc:	9809883a 	mov	r4,r19
    c100:	00116a00 	call	116a0 <__sprint_r>
    c104:	103b441e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c108:	d8c01c17 	ldw	r3,112(sp)
    c10c:	dd401b17 	ldw	r21,108(sp)
    c110:	df002704 	addi	fp,sp,156
    c114:	003e4c06 	br	ba48 <___vfprintf_internal_r+0x106c>
    c118:	d9801a04 	addi	r6,sp,104
    c11c:	900b883a 	mov	r5,r18
    c120:	9809883a 	mov	r4,r19
    c124:	da001115 	stw	r8,68(sp)
    c128:	db400f15 	stw	r13,60(sp)
    c12c:	db800e15 	stw	r14,56(sp)
    c130:	00116a00 	call	116a0 <__sprint_r>
    c134:	103b381e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c138:	d8c01c17 	ldw	r3,112(sp)
    c13c:	da001117 	ldw	r8,68(sp)
    c140:	db400f17 	ldw	r13,60(sp)
    c144:	db800e17 	ldw	r14,56(sp)
    c148:	dd802704 	addi	r22,sp,156
    c14c:	003af506 	br	ad24 <___vfprintf_internal_r+0x348>
    c150:	8825883a 	mov	r18,r17
    c154:	003b3006 	br	ae18 <___vfprintf_internal_r+0x43c>
    c158:	d9000917 	ldw	r4,36(sp)
    c15c:	d9400a17 	ldw	r5,40(sp)
    c160:	da000615 	stw	r8,24(sp)
    c164:	200d883a 	mov	r6,r4
    c168:	280f883a 	mov	r7,r5
    c16c:	db000415 	stw	r12,16(sp)
    c170:	00099a00 	call	99a0 <__unorddf2>
    c174:	db000417 	ldw	r12,16(sp)
    c178:	da000617 	ldw	r8,24(sp)
    c17c:	1001f51e 	bne	r2,zero,c954 <___vfprintf_internal_r+0x1f78>
    c180:	057ff7c4 	movi	r21,-33
    c184:	40bfffe0 	cmpeqi	r2,r8,-1
    c188:	e56a703a 	and	r21,fp,r21
    c18c:	1001931e 	bne	r2,zero,c7dc <___vfprintf_internal_r+0x1e00>
    c190:	a88011d8 	cmpnei	r2,r21,71
    c194:	10013626 	beq	r2,zero,c670 <___vfprintf_internal_r+0x1c94>
    c198:	60804014 	ori	r2,r12,256
    c19c:	d8800415 	stw	r2,16(sp)
    c1a0:	d8800a17 	ldw	r2,40(sp)
    c1a4:	10011516 	blt	r2,zero,c5fc <___vfprintf_internal_r+0x1c20>
    c1a8:	dd000a17 	ldw	r20,40(sp)
    c1ac:	d8000605 	stb	zero,24(sp)
    c1b0:	e08019a0 	cmpeqi	r2,fp,102
    c1b4:	d8800f15 	stw	r2,60(sp)
    c1b8:	1000b91e 	bne	r2,zero,c4a0 <___vfprintf_internal_r+0x1ac4>
    c1bc:	e08011a0 	cmpeqi	r2,fp,70
    c1c0:	1000b71e 	bne	r2,zero,c4a0 <___vfprintf_internal_r+0x1ac4>
    c1c4:	a8801158 	cmpnei	r2,r21,69
    c1c8:	10014126 	beq	r2,zero,c6d0 <___vfprintf_internal_r+0x1cf4>
    c1cc:	d8801804 	addi	r2,sp,96
    c1d0:	d8800315 	stw	r2,12(sp)
    c1d4:	d9400917 	ldw	r5,36(sp)
    c1d8:	d8801504 	addi	r2,sp,84
    c1dc:	d8800215 	stw	r2,8(sp)
    c1e0:	d8801404 	addi	r2,sp,80
    c1e4:	da000015 	stw	r8,0(sp)
    c1e8:	9809883a 	mov	r4,r19
    c1ec:	d8800115 	stw	r2,4(sp)
    c1f0:	01c00084 	movi	r7,2
    c1f4:	a00d883a 	mov	r6,r20
    c1f8:	db000815 	stw	r12,32(sp)
    c1fc:	da000715 	stw	r8,28(sp)
    c200:	000ce540 	call	ce54 <_dtoa_r>
    c204:	da000717 	ldw	r8,28(sp)
    c208:	e10019d8 	cmpnei	r4,fp,103
    c20c:	db000817 	ldw	r12,32(sp)
    c210:	1023883a 	mov	r17,r2
    c214:	4007883a 	mov	r3,r8
    c218:	2001411e 	bne	r4,zero,c720 <___vfprintf_internal_r+0x1d44>
    c21c:	6080004c 	andi	r2,r12,1
    c220:	1001411e 	bne	r2,zero,c728 <___vfprintf_internal_r+0x1d4c>
    c224:	d8801417 	ldw	r2,80(sp)
    c228:	ad4011e0 	cmpeqi	r21,r21,71
    c22c:	d8800715 	stw	r2,28(sp)
    c230:	d8801817 	ldw	r2,96(sp)
    c234:	1445c83a 	sub	r2,r2,r17
    c238:	d8800815 	stw	r2,32(sp)
    c23c:	a8000526 	beq	r21,zero,c254 <___vfprintf_internal_r+0x1878>
    c240:	d8c00717 	ldw	r3,28(sp)
    c244:	18bfff50 	cmplti	r2,r3,-3
    c248:	1000011e 	bne	r2,zero,c250 <___vfprintf_internal_r+0x1874>
    c24c:	40c1460e 	bge	r8,r3,c768 <___vfprintf_internal_r+0x1d8c>
    c250:	e73fff84 	addi	fp,fp,-2
    c254:	d8800717 	ldw	r2,28(sp)
    c258:	df001645 	stb	fp,89(sp)
    c25c:	157fffc4 	addi	r21,r2,-1
    c260:	dd401415 	stw	r21,80(sp)
    c264:	a801ab16 	blt	r21,zero,c914 <___vfprintf_internal_r+0x1f38>
    c268:	00800ac4 	movi	r2,43
    c26c:	d8801685 	stb	r2,90(sp)
    c270:	a8800290 	cmplti	r2,r21,10
    c274:	1001a01e 	bne	r2,zero,c8f8 <___vfprintf_internal_r+0x1f1c>
    c278:	d98019c4 	addi	r6,sp,103
    c27c:	9029883a 	mov	r20,r18
    c280:	dc400715 	stw	r17,28(sp)
    c284:	8025883a 	mov	r18,r16
    c288:	db000f15 	stw	r12,60(sp)
    c28c:	3021883a 	mov	r16,r6
    c290:	a809883a 	mov	r4,r21
    c294:	01400284 	movi	r5,10
    c298:	0006ff00 	call	6ff0 <__modsi3>
    c29c:	10800c04 	addi	r2,r2,48
    c2a0:	a809883a 	mov	r4,r21
    c2a4:	80bfffc5 	stb	r2,-1(r16)
    c2a8:	01400284 	movi	r5,10
    c2ac:	0006f700 	call	6f70 <__divsi3>
    c2b0:	a9001908 	cmpgei	r4,r21,100
    c2b4:	8023883a 	mov	r17,r16
    c2b8:	102b883a 	mov	r21,r2
    c2bc:	843fffc4 	addi	r16,r16,-1
    c2c0:	203ff31e 	bne	r4,zero,c290 <___vfprintf_internal_r+0x18b4>
    c2c4:	800d883a 	mov	r6,r16
    c2c8:	11000c04 	addi	r4,r2,48
    c2cc:	9021883a 	mov	r16,r18
    c2d0:	a025883a 	mov	r18,r20
    c2d4:	8829883a 	mov	r20,r17
    c2d8:	a0bfff84 	addi	r2,r20,-2
    c2dc:	313fffc5 	stb	r4,-1(r6)
    c2e0:	d8c019c4 	addi	r3,sp,103
    c2e4:	db000f17 	ldw	r12,60(sp)
    c2e8:	dc400717 	ldw	r17,28(sp)
    c2ec:	10c1be2e 	bgeu	r2,r3,c9e8 <___vfprintf_internal_r+0x200c>
    c2f0:	d8c016c4 	addi	r3,sp,91
    c2f4:	00000106 	br	c2fc <___vfprintf_internal_r+0x1920>
    c2f8:	11000003 	ldbu	r4,0(r2)
    c2fc:	19000005 	stb	r4,0(r3)
    c300:	10800044 	addi	r2,r2,1
    c304:	d90019c4 	addi	r4,sp,103
    c308:	18c00044 	addi	r3,r3,1
    c30c:	113ffa1e 	bne	r2,r4,c2f8 <___vfprintf_internal_r+0x191c>
    c310:	d8801a44 	addi	r2,sp,105
    c314:	d8c016c4 	addi	r3,sp,91
    c318:	1505c83a 	sub	r2,r2,r20
    c31c:	1885883a 	add	r2,r3,r2
    c320:	d8c01644 	addi	r3,sp,89
    c324:	10c5c83a 	sub	r2,r2,r3
    c328:	d8801015 	stw	r2,64(sp)
    c32c:	d8c00817 	ldw	r3,32(sp)
    c330:	d9001017 	ldw	r4,64(sp)
    c334:	18800088 	cmpgei	r2,r3,2
    c338:	192b883a 	add	r21,r3,r4
    c33c:	10018126 	beq	r2,zero,c944 <___vfprintf_internal_r+0x1f68>
    c340:	d8800b17 	ldw	r2,44(sp)
    c344:	a8ab883a 	add	r21,r21,r2
    c348:	a829883a 	mov	r20,r21
    c34c:	a800010e 	bge	r21,zero,c354 <___vfprintf_internal_r+0x1978>
    c350:	0029883a 	mov	r20,zero
    c354:	d8000715 	stw	zero,28(sp)
    c358:	00008406 	br	c56c <___vfprintf_internal_r+0x1b90>
    c35c:	880f883a 	mov	r7,r17
    c360:	10800044 	addi	r2,r2,1
    c364:	1d47883a 	add	r3,r3,r21
    c368:	b1c00015 	stw	r7,0(r22)
    c36c:	003a9306 	br	adbc <___vfprintf_internal_r+0x3e0>
    c370:	d9801a04 	addi	r6,sp,104
    c374:	900b883a 	mov	r5,r18
    c378:	9809883a 	mov	r4,r19
    c37c:	00116a00 	call	116a0 <__sprint_r>
    c380:	103aa51e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c384:	d8c01c17 	ldw	r3,112(sp)
    c388:	dd802704 	addi	r22,sp,156
    c38c:	003caf06 	br	b64c <___vfprintf_internal_r+0xc70>
    c390:	d9801a04 	addi	r6,sp,104
    c394:	900b883a 	mov	r5,r18
    c398:	9809883a 	mov	r4,r19
    c39c:	da000e15 	stw	r8,56(sp)
    c3a0:	00116a00 	call	116a0 <__sprint_r>
    c3a4:	103a9c1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c3a8:	d8c01c17 	ldw	r3,112(sp)
    c3ac:	da000e17 	ldw	r8,56(sp)
    c3b0:	dd802704 	addi	r22,sp,156
    c3b4:	003a7806 	br	ad98 <___vfprintf_internal_r+0x3bc>
    c3b8:	8809883a 	mov	r4,r17
    c3bc:	db000415 	stw	r12,16(sp)
    c3c0:	d8c00615 	stw	r3,24(sp)
    c3c4:	000a9440 	call	a944 <strlen>
    c3c8:	db000417 	ldw	r12,16(sp)
    c3cc:	102b883a 	mov	r21,r2
    c3d0:	1029883a 	mov	r20,r2
    c3d4:	003a4606 	br	acf0 <___vfprintf_internal_r+0x314>
    c3d8:	800f883a 	mov	r7,r16
    c3dc:	dc000717 	ldw	r16,28(sp)
    c3e0:	ad400044 	addi	r21,r21,1
    c3e4:	1d87883a 	add	r3,r3,r22
    c3e8:	e1c00015 	stw	r7,0(fp)
    c3ec:	003da406 	br	ba80 <___vfprintf_internal_r+0x10a4>
    c3f0:	d8800d17 	ldw	r2,52(sp)
    c3f4:	d9000b17 	ldw	r4,44(sp)
    c3f8:	b0800015 	stw	r2,0(r22)
    c3fc:	d8801b17 	ldw	r2,108(sp)
    c400:	20c7883a 	add	r3,r4,r3
    c404:	b1000115 	stw	r4,4(r22)
    c408:	10800044 	addi	r2,r2,1
    c40c:	d8c01c15 	stw	r3,112(sp)
    c410:	d8801b15 	stw	r2,108(sp)
    c414:	11000208 	cmpgei	r4,r2,8
    c418:	2000981e 	bne	r4,zero,c67c <___vfprintf_internal_r+0x1ca0>
    c41c:	b5800204 	addi	r22,r22,8
    c420:	283d5f0e 	bge	r5,zero,b9a0 <___vfprintf_internal_r+0xfc4>
    c424:	01c00074 	movhi	r7,1
    c428:	293ffc08 	cmpgei	r4,r5,-16
    c42c:	39df7704 	addi	r7,r7,32220
    c430:	0179c83a 	sub	fp,zero,r5
    c434:	2001151e 	bne	r4,zero,c88c <___vfprintf_internal_r+0x1eb0>
    c438:	dc000715 	stw	r16,28(sp)
    c43c:	05400404 	movi	r21,16
    c440:	9021883a 	mov	r16,r18
    c444:	3825883a 	mov	r18,r7
    c448:	00000406 	br	c45c <___vfprintf_internal_r+0x1a80>
    c44c:	b5800204 	addi	r22,r22,8
    c450:	e73ffc04 	addi	fp,fp,-16
    c454:	e1800448 	cmpgei	r6,fp,17
    c458:	30010926 	beq	r6,zero,c880 <___vfprintf_internal_r+0x1ea4>
    c45c:	10800044 	addi	r2,r2,1
    c460:	18c00404 	addi	r3,r3,16
    c464:	b4800015 	stw	r18,0(r22)
    c468:	b5400115 	stw	r21,4(r22)
    c46c:	d8c01c15 	stw	r3,112(sp)
    c470:	d8801b15 	stw	r2,108(sp)
    c474:	11800208 	cmpgei	r6,r2,8
    c478:	303ff426 	beq	r6,zero,c44c <___vfprintf_internal_r+0x1a70>
    c47c:	d9801a04 	addi	r6,sp,104
    c480:	800b883a 	mov	r5,r16
    c484:	9809883a 	mov	r4,r19
    c488:	00116a00 	call	116a0 <__sprint_r>
    c48c:	1001411e 	bne	r2,zero,c994 <___vfprintf_internal_r+0x1fb8>
    c490:	d8c01c17 	ldw	r3,112(sp)
    c494:	d8801b17 	ldw	r2,108(sp)
    c498:	dd802704 	addi	r22,sp,156
    c49c:	003fec06 	br	c450 <___vfprintf_internal_r+0x1a74>
    c4a0:	d8801804 	addi	r2,sp,96
    c4a4:	d8800315 	stw	r2,12(sp)
    c4a8:	d9400917 	ldw	r5,36(sp)
    c4ac:	d8801504 	addi	r2,sp,84
    c4b0:	d8800215 	stw	r2,8(sp)
    c4b4:	d8801404 	addi	r2,sp,80
    c4b8:	da000015 	stw	r8,0(sp)
    c4bc:	d8800115 	stw	r2,4(sp)
    c4c0:	01c000c4 	movi	r7,3
    c4c4:	a00d883a 	mov	r6,r20
    c4c8:	9809883a 	mov	r4,r19
    c4cc:	db000815 	stw	r12,32(sp)
    c4d0:	da000715 	stw	r8,28(sp)
    c4d4:	000ce540 	call	ce54 <_dtoa_r>
    c4d8:	da000717 	ldw	r8,28(sp)
    c4dc:	1023883a 	mov	r17,r2
    c4e0:	db000817 	ldw	r12,32(sp)
    c4e4:	1207883a 	add	r3,r2,r8
    c4e8:	88800007 	ldb	r2,0(r17)
    c4ec:	10800c20 	cmpeqi	r2,r2,48
    c4f0:	10004f1e 	bne	r2,zero,c630 <___vfprintf_internal_r+0x1c54>
    c4f4:	d8801417 	ldw	r2,80(sp)
    c4f8:	1893883a 	add	r9,r3,r2
    c4fc:	d9000917 	ldw	r4,36(sp)
    c500:	000d883a 	mov	r6,zero
    c504:	000f883a 	mov	r7,zero
    c508:	a00b883a 	mov	r5,r20
    c50c:	da401115 	stw	r9,68(sp)
    c510:	da000815 	stw	r8,32(sp)
    c514:	db000715 	stw	r12,28(sp)
    c518:	00086980 	call	8698 <__eqdf2>
    c51c:	db000717 	ldw	r12,28(sp)
    c520:	da000817 	ldw	r8,32(sp)
    c524:	da401117 	ldw	r9,68(sp)
    c528:	1000811e 	bne	r2,zero,c730 <___vfprintf_internal_r+0x1d54>
    c52c:	4805883a 	mov	r2,r9
    c530:	d8c01417 	ldw	r3,80(sp)
    c534:	1445c83a 	sub	r2,r2,r17
    c538:	ad4011d8 	cmpnei	r21,r21,71
    c53c:	d8c00715 	stw	r3,28(sp)
    c540:	d8800815 	stw	r2,32(sp)
    c544:	a83f3e26 	beq	r21,zero,c240 <___vfprintf_internal_r+0x1864>
    c548:	d8800f17 	ldw	r2,60(sp)
    c54c:	103f4126 	beq	r2,zero,c254 <___vfprintf_internal_r+0x1878>
    c550:	d8c00717 	ldw	r3,28(sp)
    c554:	6080004c 	andi	r2,r12,1
    c558:	1204b03a 	or	r2,r2,r8
    c55c:	00c1050e 	bge	zero,r3,c974 <___vfprintf_internal_r+0x1f98>
    c560:	1000f11e 	bne	r2,zero,c928 <___vfprintf_internal_r+0x1f4c>
    c564:	dd400717 	ldw	r21,28(sp)
    c568:	a829883a 	mov	r20,r21
    c56c:	d8800607 	ldb	r2,24(sp)
    c570:	10007826 	beq	r2,zero,c754 <___vfprintf_internal_r+0x1d78>
    c574:	00800b44 	movi	r2,45
    c578:	d8801345 	stb	r2,77(sp)
    c57c:	d8800e17 	ldw	r2,56(sp)
    c580:	0011883a 	mov	r8,zero
    c584:	d8800615 	stw	r2,24(sp)
    c588:	003b3306 	br	b258 <___vfprintf_internal_r+0x87c>
    c58c:	04400074 	movhi	r17,1
    c590:	8c5f6604 	addi	r17,r17,32152
    c594:	003ab806 	br	b078 <___vfprintf_internal_r+0x69c>
    c598:	800f883a 	mov	r7,r16
    c59c:	dc000e17 	ldw	r16,56(sp)
    c5a0:	10800044 	addi	r2,r2,1
    c5a4:	1d47883a 	add	r3,r3,r21
    c5a8:	d8801b15 	stw	r2,108(sp)
    c5ac:	b1c00015 	stw	r7,0(r22)
    c5b0:	b5400115 	stw	r21,4(r22)
    c5b4:	d8c01c15 	stw	r3,112(sp)
    c5b8:	10800208 	cmpgei	r2,r2,8
    c5bc:	10003a1e 	bne	r2,zero,c6a8 <___vfprintf_internal_r+0x1ccc>
    c5c0:	b5800204 	addi	r22,r22,8
    c5c4:	003db206 	br	bc90 <___vfprintf_internal_r+0x12b4>
    c5c8:	00800b44 	movi	r2,45
    c5cc:	d8801345 	stb	r2,77(sp)
    c5d0:	03400b44 	movi	r13,45
    c5d4:	003aa406 	br	b068 <___vfprintf_internal_r+0x68c>
    c5d8:	d9801a04 	addi	r6,sp,104
    c5dc:	900b883a 	mov	r5,r18
    c5e0:	9809883a 	mov	r4,r19
    c5e4:	00116a00 	call	116a0 <__sprint_r>
    c5e8:	103a0b1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c5ec:	d9401417 	ldw	r5,80(sp)
    c5f0:	d8c01c17 	ldw	r3,112(sp)
    c5f4:	dd802704 	addi	r22,sp,156
    c5f8:	003cd706 	br	b958 <___vfprintf_internal_r+0xf7c>
    c5fc:	1520003c 	xorhi	r20,r2,32768
    c600:	00800b44 	movi	r2,45
    c604:	d8800605 	stb	r2,24(sp)
    c608:	003ee906 	br	c1b0 <___vfprintf_internal_r+0x17d4>
    c60c:	05400184 	movi	r21,6
    c610:	003e5e06 	br	bf8c <___vfprintf_internal_r+0x15b0>
    c614:	d9801a04 	addi	r6,sp,104
    c618:	900b883a 	mov	r5,r18
    c61c:	9809883a 	mov	r4,r19
    c620:	00116a00 	call	116a0 <__sprint_r>
    c624:	0039fc06 	br	ae18 <___vfprintf_internal_r+0x43c>
    c628:	d9401345 	stb	r5,77(sp)
    c62c:	0039aa06 	br	acd8 <___vfprintf_internal_r+0x2fc>
    c630:	d9000917 	ldw	r4,36(sp)
    c634:	000d883a 	mov	r6,zero
    c638:	000f883a 	mov	r7,zero
    c63c:	a00b883a 	mov	r5,r20
    c640:	d8c01115 	stw	r3,68(sp)
    c644:	da000815 	stw	r8,32(sp)
    c648:	db000715 	stw	r12,28(sp)
    c64c:	00086980 	call	8698 <__eqdf2>
    c650:	db000717 	ldw	r12,28(sp)
    c654:	da000817 	ldw	r8,32(sp)
    c658:	d8c01117 	ldw	r3,68(sp)
    c65c:	103fa526 	beq	r2,zero,c4f4 <___vfprintf_internal_r+0x1b18>
    c660:	00800044 	movi	r2,1
    c664:	1205c83a 	sub	r2,r2,r8
    c668:	d8801415 	stw	r2,80(sp)
    c66c:	003fa206 	br	c4f8 <___vfprintf_internal_r+0x1b1c>
    c670:	403ec91e 	bne	r8,zero,c198 <___vfprintf_internal_r+0x17bc>
    c674:	02000044 	movi	r8,1
    c678:	003ec706 	br	c198 <___vfprintf_internal_r+0x17bc>
    c67c:	d9801a04 	addi	r6,sp,104
    c680:	900b883a 	mov	r5,r18
    c684:	9809883a 	mov	r4,r19
    c688:	00116a00 	call	116a0 <__sprint_r>
    c68c:	1039e21e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c690:	d9401417 	ldw	r5,80(sp)
    c694:	d8c01c17 	ldw	r3,112(sp)
    c698:	d8801b17 	ldw	r2,108(sp)
    c69c:	dd802704 	addi	r22,sp,156
    c6a0:	283cbf0e 	bge	r5,zero,b9a0 <___vfprintf_internal_r+0xfc4>
    c6a4:	003f5f06 	br	c424 <___vfprintf_internal_r+0x1a48>
    c6a8:	d9801a04 	addi	r6,sp,104
    c6ac:	900b883a 	mov	r5,r18
    c6b0:	9809883a 	mov	r4,r19
    c6b4:	00116a00 	call	116a0 <__sprint_r>
    c6b8:	1039d71e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c6bc:	d8c01c17 	ldw	r3,112(sp)
    c6c0:	dd802704 	addi	r22,sp,156
    c6c4:	003d7206 	br	bc90 <___vfprintf_internal_r+0x12b4>
    c6c8:	db000417 	ldw	r12,16(sp)
    c6cc:	003ad506 	br	b224 <___vfprintf_internal_r+0x848>
    c6d0:	d8801804 	addi	r2,sp,96
    c6d4:	d8800315 	stw	r2,12(sp)
    c6d8:	d9400917 	ldw	r5,36(sp)
    c6dc:	d8801504 	addi	r2,sp,84
    c6e0:	40c00044 	addi	r3,r8,1
    c6e4:	d8800215 	stw	r2,8(sp)
    c6e8:	d8801404 	addi	r2,sp,80
    c6ec:	d8c00015 	stw	r3,0(sp)
    c6f0:	d8800115 	stw	r2,4(sp)
    c6f4:	01c00084 	movi	r7,2
    c6f8:	a00d883a 	mov	r6,r20
    c6fc:	9809883a 	mov	r4,r19
    c700:	db001115 	stw	r12,68(sp)
    c704:	da000815 	stw	r8,32(sp)
    c708:	d8c00715 	stw	r3,28(sp)
    c70c:	000ce540 	call	ce54 <_dtoa_r>
    c710:	d8c00717 	ldw	r3,28(sp)
    c714:	da000817 	ldw	r8,32(sp)
    c718:	db001117 	ldw	r12,68(sp)
    c71c:	1023883a 	mov	r17,r2
    c720:	e08011d8 	cmpnei	r2,fp,71
    c724:	103ebd26 	beq	r2,zero,c21c <___vfprintf_internal_r+0x1840>
    c728:	88d3883a 	add	r9,r17,r3
    c72c:	003f7306 	br	c4fc <___vfprintf_internal_r+0x1b20>
    c730:	d8801817 	ldw	r2,96(sp)
    c734:	127f7e2e 	bgeu	r2,r9,c530 <___vfprintf_internal_r+0x1b54>
    c738:	01000c04 	movi	r4,48
    c73c:	10c00044 	addi	r3,r2,1
    c740:	d8c01815 	stw	r3,96(sp)
    c744:	11000005 	stb	r4,0(r2)
    c748:	d8801817 	ldw	r2,96(sp)
    c74c:	127ffb36 	bltu	r2,r9,c73c <___vfprintf_internal_r+0x1d60>
    c750:	003f7706 	br	c530 <___vfprintf_internal_r+0x1b54>
    c754:	d8800e17 	ldw	r2,56(sp)
    c758:	db401343 	ldbu	r13,77(sp)
    c75c:	0011883a 	mov	r8,zero
    c760:	d8800615 	stw	r2,24(sp)
    c764:	003ab806 	br	b248 <___vfprintf_internal_r+0x86c>
    c768:	d8800717 	ldw	r2,28(sp)
    c76c:	d8c00817 	ldw	r3,32(sp)
    c770:	10c02b16 	blt	r2,r3,c820 <___vfprintf_internal_r+0x1e44>
    c774:	6300004c 	andi	r12,r12,1
    c778:	6000581e 	bne	r12,zero,c8dc <___vfprintf_internal_r+0x1f00>
    c77c:	1029883a 	mov	r20,r2
    c780:	1000010e 	bge	r2,zero,c788 <___vfprintf_internal_r+0x1dac>
    c784:	0029883a 	mov	r20,zero
    c788:	dd400717 	ldw	r21,28(sp)
    c78c:	070019c4 	movi	fp,103
    c790:	003f7606 	br	c56c <___vfprintf_internal_r+0x1b90>
    c794:	d9801a04 	addi	r6,sp,104
    c798:	900b883a 	mov	r5,r18
    c79c:	9809883a 	mov	r4,r19
    c7a0:	00116a00 	call	116a0 <__sprint_r>
    c7a4:	10399c1e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c7a8:	dd401417 	ldw	r21,80(sp)
    c7ac:	d8c01c17 	ldw	r3,112(sp)
    c7b0:	dd802704 	addi	r22,sp,156
    c7b4:	003d4506 	br	bccc <___vfprintf_internal_r+0x12f0>
    c7b8:	d9801a04 	addi	r6,sp,104
    c7bc:	900b883a 	mov	r5,r18
    c7c0:	9809883a 	mov	r4,r19
    c7c4:	00116a00 	call	116a0 <__sprint_r>
    c7c8:	1039931e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c7cc:	d8c01c17 	ldw	r3,112(sp)
    c7d0:	dd802704 	addi	r22,sp,156
    c7d4:	a83d2b0e 	bge	r21,zero,bc84 <___vfprintf_internal_r+0x12a8>
    c7d8:	003ddf06 	br	bf58 <___vfprintf_internal_r+0x157c>
    c7dc:	02000184 	movi	r8,6
    c7e0:	003e6d06 	br	c198 <___vfprintf_internal_r+0x17bc>
    c7e4:	d9801a04 	addi	r6,sp,104
    c7e8:	900b883a 	mov	r5,r18
    c7ec:	9809883a 	mov	r4,r19
    c7f0:	00116a00 	call	116a0 <__sprint_r>
    c7f4:	1039881e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c7f8:	d8801417 	ldw	r2,80(sp)
    c7fc:	d9000817 	ldw	r4,32(sp)
    c800:	d8c01c17 	ldw	r3,112(sp)
    c804:	dd802704 	addi	r22,sp,156
    c808:	2085c83a 	sub	r2,r4,r2
    c80c:	003d4306 	br	bd1c <___vfprintf_internal_r+0x1340>
    c810:	4029883a 	mov	r20,r8
    c814:	d8c00615 	stw	r3,24(sp)
    c818:	402b883a 	mov	r21,r8
    c81c:	00393406 	br	acf0 <___vfprintf_internal_r+0x314>
    c820:	d8800817 	ldw	r2,32(sp)
    c824:	d8c00b17 	ldw	r3,44(sp)
    c828:	10eb883a 	add	r21,r2,r3
    c82c:	d8800717 	ldw	r2,28(sp)
    c830:	00800316 	blt	zero,r2,c840 <___vfprintf_internal_r+0x1e64>
    c834:	d8800717 	ldw	r2,28(sp)
    c838:	a8abc83a 	sub	r21,r21,r2
    c83c:	ad400044 	addi	r21,r21,1
    c840:	a829883a 	mov	r20,r21
    c844:	a8002a16 	blt	r21,zero,c8f0 <___vfprintf_internal_r+0x1f14>
    c848:	070019c4 	movi	fp,103
    c84c:	003f4706 	br	c56c <___vfprintf_internal_r+0x1b90>
    c850:	d9401345 	stb	r5,77(sp)
    c854:	003aa006 	br	b2d8 <___vfprintf_internal_r+0x8fc>
    c858:	d9401345 	stb	r5,77(sp)
    c85c:	003b3406 	br	b530 <___vfprintf_internal_r+0xb54>
    c860:	d9401345 	stb	r5,77(sp)
    c864:	0039d506 	br	afbc <___vfprintf_internal_r+0x5e0>
    c868:	d9401345 	stb	r5,77(sp)
    c86c:	003a5806 	br	b1d0 <___vfprintf_internal_r+0x7f4>
    c870:	d9401345 	stb	r5,77(sp)
    c874:	003af306 	br	b444 <___vfprintf_internal_r+0xa68>
    c878:	d9401345 	stb	r5,77(sp)
    c87c:	003b4c06 	br	b5b0 <___vfprintf_internal_r+0xbd4>
    c880:	900f883a 	mov	r7,r18
    c884:	8025883a 	mov	r18,r16
    c888:	dc000717 	ldw	r16,28(sp)
    c88c:	10800044 	addi	r2,r2,1
    c890:	1f07883a 	add	r3,r3,fp
    c894:	b1c00015 	stw	r7,0(r22)
    c898:	b7000115 	stw	fp,4(r22)
    c89c:	d8c01c15 	stw	r3,112(sp)
    c8a0:	d8801b15 	stw	r2,108(sp)
    c8a4:	11000208 	cmpgei	r4,r2,8
    c8a8:	203c3c26 	beq	r4,zero,b99c <___vfprintf_internal_r+0xfc0>
    c8ac:	d9801a04 	addi	r6,sp,104
    c8b0:	900b883a 	mov	r5,r18
    c8b4:	9809883a 	mov	r4,r19
    c8b8:	00116a00 	call	116a0 <__sprint_r>
    c8bc:	1039561e 	bne	r2,zero,ae18 <___vfprintf_internal_r+0x43c>
    c8c0:	d8c01c17 	ldw	r3,112(sp)
    c8c4:	d8801b17 	ldw	r2,108(sp)
    c8c8:	dd802704 	addi	r22,sp,156
    c8cc:	003c3406 	br	b9a0 <___vfprintf_internal_r+0xfc4>
    c8d0:	00bfffc4 	movi	r2,-1
    c8d4:	d8800515 	stw	r2,20(sp)
    c8d8:	00395206 	br	ae24 <___vfprintf_internal_r+0x448>
    c8dc:	d8800717 	ldw	r2,28(sp)
    c8e0:	d8c00b17 	ldw	r3,44(sp)
    c8e4:	10eb883a 	add	r21,r2,r3
    c8e8:	a829883a 	mov	r20,r21
    c8ec:	a83fd60e 	bge	r21,zero,c848 <___vfprintf_internal_r+0x1e6c>
    c8f0:	0029883a 	mov	r20,zero
    c8f4:	003fd406 	br	c848 <___vfprintf_internal_r+0x1e6c>
    c8f8:	00800c04 	movi	r2,48
    c8fc:	ad400c04 	addi	r21,r21,48
    c900:	d88016c5 	stb	r2,91(sp)
    c904:	00800104 	movi	r2,4
    c908:	dd401705 	stb	r21,92(sp)
    c90c:	d8801015 	stw	r2,64(sp)
    c910:	003e8606 	br	c32c <___vfprintf_internal_r+0x1950>
    c914:	05400044 	movi	r21,1
    c918:	a8abc83a 	sub	r21,r21,r2
    c91c:	00800b44 	movi	r2,45
    c920:	d8801685 	stb	r2,90(sp)
    c924:	003e5206 	br	c270 <___vfprintf_internal_r+0x1894>
    c928:	d8800b17 	ldw	r2,44(sp)
    c92c:	18ab883a 	add	r21,r3,r2
    c930:	aa2b883a 	add	r21,r21,r8
    c934:	a829883a 	mov	r20,r21
    c938:	a83f0c0e 	bge	r21,zero,c56c <___vfprintf_internal_r+0x1b90>
    c93c:	0029883a 	mov	r20,zero
    c940:	003f0a06 	br	c56c <___vfprintf_internal_r+0x1b90>
    c944:	6080004c 	andi	r2,r12,1
    c948:	d8800715 	stw	r2,28(sp)
    c94c:	103e7c1e 	bne	r2,zero,c340 <___vfprintf_internal_r+0x1964>
    c950:	003ff806 	br	c934 <___vfprintf_internal_r+0x1f58>
    c954:	d8800a17 	ldw	r2,40(sp)
    c958:	10001316 	blt	r2,zero,c9a8 <___vfprintf_internal_r+0x1fcc>
    c95c:	db401343 	ldbu	r13,77(sp)
    c960:	e0801210 	cmplti	r2,fp,72
    c964:	10000d1e 	bne	r2,zero,c99c <___vfprintf_internal_r+0x1fc0>
    c968:	04400074 	movhi	r17,1
    c96c:	8c5f6904 	addi	r17,r17,32164
    c970:	0039c106 	br	b078 <___vfprintf_internal_r+0x69c>
    c974:	1000031e 	bne	r2,zero,c984 <___vfprintf_internal_r+0x1fa8>
    c978:	05000044 	movi	r20,1
    c97c:	05400044 	movi	r21,1
    c980:	003efa06 	br	c56c <___vfprintf_internal_r+0x1b90>
    c984:	d8800b17 	ldw	r2,44(sp)
    c988:	15400044 	addi	r21,r2,1
    c98c:	aa2b883a 	add	r21,r21,r8
    c990:	003fe806 	br	c934 <___vfprintf_internal_r+0x1f58>
    c994:	8025883a 	mov	r18,r16
    c998:	00391f06 	br	ae18 <___vfprintf_internal_r+0x43c>
    c99c:	04400074 	movhi	r17,1
    c9a0:	8c5f6804 	addi	r17,r17,32160
    c9a4:	0039b406 	br	b078 <___vfprintf_internal_r+0x69c>
    c9a8:	00800b44 	movi	r2,45
    c9ac:	d8801345 	stb	r2,77(sp)
    c9b0:	03400b44 	movi	r13,45
    c9b4:	003fea06 	br	c960 <___vfprintf_internal_r+0x1f84>
    c9b8:	d8c00617 	ldw	r3,24(sp)
    c9bc:	1a000017 	ldw	r8,0(r3)
    c9c0:	18c00104 	addi	r3,r3,4
    c9c4:	4000010e 	bge	r8,zero,c9cc <___vfprintf_internal_r+0x1ff0>
    c9c8:	023fffc4 	movi	r8,-1
    c9cc:	bf000043 	ldbu	fp,1(r23)
    c9d0:	d8c00615 	stw	r3,24(sp)
    c9d4:	102f883a 	mov	r23,r2
    c9d8:	e2c03fcc 	andi	r11,fp,255
    c9dc:	5ac0201c 	xori	r11,r11,128
    c9e0:	5affe004 	addi	r11,r11,-128
    c9e4:	00384906 	br	ab0c <___vfprintf_internal_r+0x130>
    c9e8:	00800084 	movi	r2,2
    c9ec:	d8801015 	stw	r2,64(sp)
    c9f0:	003e4e06 	br	c32c <___vfprintf_internal_r+0x1950>

0000c9f4 <__vfprintf_internal>:
    c9f4:	00c000b4 	movhi	r3,2
    c9f8:	2005883a 	mov	r2,r4
    c9fc:	1927e517 	ldw	r4,-24684(r3)
    ca00:	300f883a 	mov	r7,r6
    ca04:	280d883a 	mov	r6,r5
    ca08:	100b883a 	mov	r5,r2
    ca0c:	000a9dc1 	jmpi	a9dc <___vfprintf_internal_r>

0000ca10 <__sbprintf>:
    ca10:	2880030b 	ldhu	r2,12(r5)
    ca14:	2b001917 	ldw	r12,100(r5)
    ca18:	2ac0038b 	ldhu	r11,14(r5)
    ca1c:	2a800717 	ldw	r10,28(r5)
    ca20:	2a400917 	ldw	r9,36(r5)
    ca24:	defee204 	addi	sp,sp,-1144
    ca28:	da001a04 	addi	r8,sp,104
    ca2c:	00c10004 	movi	r3,1024
    ca30:	dc011a15 	stw	r16,1128(sp)
    ca34:	10bfff4c 	andi	r2,r2,65533
    ca38:	2821883a 	mov	r16,r5
    ca3c:	d80b883a 	mov	r5,sp
    ca40:	dc811c15 	stw	r18,1136(sp)
    ca44:	dc411b15 	stw	r17,1132(sp)
    ca48:	dfc11d15 	stw	ra,1140(sp)
    ca4c:	2025883a 	mov	r18,r4
    ca50:	d880030d 	sth	r2,12(sp)
    ca54:	db001915 	stw	r12,100(sp)
    ca58:	dac0038d 	sth	r11,14(sp)
    ca5c:	da800715 	stw	r10,28(sp)
    ca60:	da400915 	stw	r9,36(sp)
    ca64:	da000015 	stw	r8,0(sp)
    ca68:	da000415 	stw	r8,16(sp)
    ca6c:	d8c00215 	stw	r3,8(sp)
    ca70:	d8c00515 	stw	r3,20(sp)
    ca74:	d8000615 	stw	zero,24(sp)
    ca78:	000a9dc0 	call	a9dc <___vfprintf_internal_r>
    ca7c:	1023883a 	mov	r17,r2
    ca80:	10000d0e 	bge	r2,zero,cab8 <__sbprintf+0xa8>
    ca84:	d880030b 	ldhu	r2,12(sp)
    ca88:	1080100c 	andi	r2,r2,64
    ca8c:	10000326 	beq	r2,zero,ca9c <__sbprintf+0x8c>
    ca90:	8080030b 	ldhu	r2,12(r16)
    ca94:	10801014 	ori	r2,r2,64
    ca98:	8080030d 	sth	r2,12(r16)
    ca9c:	8805883a 	mov	r2,r17
    caa0:	dfc11d17 	ldw	ra,1140(sp)
    caa4:	dc811c17 	ldw	r18,1136(sp)
    caa8:	dc411b17 	ldw	r17,1132(sp)
    caac:	dc011a17 	ldw	r16,1128(sp)
    cab0:	dec11e04 	addi	sp,sp,1144
    cab4:	f800283a 	ret
    cab8:	d80b883a 	mov	r5,sp
    cabc:	9009883a 	mov	r4,r18
    cac0:	000e7c40 	call	e7c4 <_fflush_r>
    cac4:	103fef26 	beq	r2,zero,ca84 <__sbprintf+0x74>
    cac8:	047fffc4 	movi	r17,-1
    cacc:	003fed06 	br	ca84 <__sbprintf+0x74>

0000cad0 <__swsetup_r>:
    cad0:	008000b4 	movhi	r2,2
    cad4:	10a7e517 	ldw	r2,-24684(r2)
    cad8:	defffd04 	addi	sp,sp,-12
    cadc:	dc400115 	stw	r17,4(sp)
    cae0:	dc000015 	stw	r16,0(sp)
    cae4:	dfc00215 	stw	ra,8(sp)
    cae8:	2023883a 	mov	r17,r4
    caec:	2821883a 	mov	r16,r5
    caf0:	10000226 	beq	r2,zero,cafc <__swsetup_r+0x2c>
    caf4:	10c00e17 	ldw	r3,56(r2)
    caf8:	18001f26 	beq	r3,zero,cb78 <__swsetup_r+0xa8>
    cafc:	8180030b 	ldhu	r6,12(r16)
    cb00:	30c0020c 	andi	r3,r6,8
    cb04:	3005883a 	mov	r2,r6
    cb08:	18002126 	beq	r3,zero,cb90 <__swsetup_r+0xc0>
    cb0c:	80c00417 	ldw	r3,16(r16)
    cb10:	18002826 	beq	r3,zero,cbb4 <__swsetup_r+0xe4>
    cb14:	1100004c 	andi	r4,r2,1
    cb18:	20000b1e 	bne	r4,zero,cb48 <__swsetup_r+0x78>
    cb1c:	1100008c 	andi	r4,r2,2
    cb20:	20002e1e 	bne	r4,zero,cbdc <__swsetup_r+0x10c>
    cb24:	81000517 	ldw	r4,20(r16)
    cb28:	81000215 	stw	r4,8(r16)
    cb2c:	18000b26 	beq	r3,zero,cb5c <__swsetup_r+0x8c>
    cb30:	0005883a 	mov	r2,zero
    cb34:	dfc00217 	ldw	ra,8(sp)
    cb38:	dc400117 	ldw	r17,4(sp)
    cb3c:	dc000017 	ldw	r16,0(sp)
    cb40:	dec00304 	addi	sp,sp,12
    cb44:	f800283a 	ret
    cb48:	81000517 	ldw	r4,20(r16)
    cb4c:	80000215 	stw	zero,8(r16)
    cb50:	0109c83a 	sub	r4,zero,r4
    cb54:	81000615 	stw	r4,24(r16)
    cb58:	183ff51e 	bne	r3,zero,cb30 <__swsetup_r+0x60>
    cb5c:	10c0200c 	andi	r3,r2,128
    cb60:	0005883a 	mov	r2,zero
    cb64:	183ff326 	beq	r3,zero,cb34 <__swsetup_r+0x64>
    cb68:	31801014 	ori	r6,r6,64
    cb6c:	8180030d 	sth	r6,12(r16)
    cb70:	00bfffc4 	movi	r2,-1
    cb74:	003fef06 	br	cb34 <__swsetup_r+0x64>
    cb78:	1009883a 	mov	r4,r2
    cb7c:	000ec0c0 	call	ec0c <__sinit>
    cb80:	8180030b 	ldhu	r6,12(r16)
    cb84:	30c0020c 	andi	r3,r6,8
    cb88:	3005883a 	mov	r2,r6
    cb8c:	183fdf1e 	bne	r3,zero,cb0c <__swsetup_r+0x3c>
    cb90:	3080040c 	andi	r2,r6,16
    cb94:	10002126 	beq	r2,zero,cc1c <__swsetup_r+0x14c>
    cb98:	3080010c 	andi	r2,r6,4
    cb9c:	1000111e 	bne	r2,zero,cbe4 <__swsetup_r+0x114>
    cba0:	80c00417 	ldw	r3,16(r16)
    cba4:	30800214 	ori	r2,r6,8
    cba8:	8080030d 	sth	r2,12(r16)
    cbac:	100d883a 	mov	r6,r2
    cbb0:	183fd81e 	bne	r3,zero,cb14 <__swsetup_r+0x44>
    cbb4:	1100a00c 	andi	r4,r2,640
    cbb8:	21008020 	cmpeqi	r4,r4,512
    cbbc:	203fd51e 	bne	r4,zero,cb14 <__swsetup_r+0x44>
    cbc0:	800b883a 	mov	r5,r16
    cbc4:	8809883a 	mov	r4,r17
    cbc8:	000f6600 	call	f660 <__smakebuf_r>
    cbcc:	8180030b 	ldhu	r6,12(r16)
    cbd0:	80c00417 	ldw	r3,16(r16)
    cbd4:	3005883a 	mov	r2,r6
    cbd8:	003fce06 	br	cb14 <__swsetup_r+0x44>
    cbdc:	0009883a 	mov	r4,zero
    cbe0:	003fd106 	br	cb28 <__swsetup_r+0x58>
    cbe4:	81400c17 	ldw	r5,48(r16)
    cbe8:	28000626 	beq	r5,zero,cc04 <__swsetup_r+0x134>
    cbec:	80801004 	addi	r2,r16,64
    cbf0:	28800326 	beq	r5,r2,cc00 <__swsetup_r+0x130>
    cbf4:	8809883a 	mov	r4,r17
    cbf8:	000ed700 	call	ed70 <_free_r>
    cbfc:	8180030b 	ldhu	r6,12(r16)
    cc00:	80000c15 	stw	zero,48(r16)
    cc04:	80c00417 	ldw	r3,16(r16)
    cc08:	00bff6c4 	movi	r2,-37
    cc0c:	118c703a 	and	r6,r2,r6
    cc10:	80000115 	stw	zero,4(r16)
    cc14:	80c00015 	stw	r3,0(r16)
    cc18:	003fe206 	br	cba4 <__swsetup_r+0xd4>
    cc1c:	00800244 	movi	r2,9
    cc20:	88800015 	stw	r2,0(r17)
    cc24:	31801014 	ori	r6,r6,64
    cc28:	8180030d 	sth	r6,12(r16)
    cc2c:	00bfffc4 	movi	r2,-1
    cc30:	003fc006 	br	cb34 <__swsetup_r+0x64>

0000cc34 <quorem>:
    cc34:	defff204 	addi	sp,sp,-56
    cc38:	dc400515 	stw	r17,20(sp)
    cc3c:	20800417 	ldw	r2,16(r4)
    cc40:	2c400417 	ldw	r17,16(r5)
    cc44:	dfc00d15 	stw	ra,52(sp)
    cc48:	df000c15 	stw	fp,48(sp)
    cc4c:	ddc00b15 	stw	r23,44(sp)
    cc50:	dd800a15 	stw	r22,40(sp)
    cc54:	dd400915 	stw	r21,36(sp)
    cc58:	dd000815 	stw	r20,32(sp)
    cc5c:	dcc00715 	stw	r19,28(sp)
    cc60:	dc800615 	stw	r18,24(sp)
    cc64:	dc000415 	stw	r16,16(sp)
    cc68:	d9000115 	stw	r4,4(sp)
    cc6c:	d9400215 	stw	r5,8(sp)
    cc70:	14407616 	blt	r2,r17,ce4c <quorem+0x218>
    cc74:	8c7fffc4 	addi	r17,r17,-1
    cc78:	882a90ba 	slli	r21,r17,2
    cc7c:	2f000504 	addi	fp,r5,20
    cc80:	25800504 	addi	r22,r4,20
    cc84:	e565883a 	add	r18,fp,r21
    cc88:	b545883a 	add	r2,r22,r21
    cc8c:	95c00017 	ldw	r23,0(r18)
    cc90:	15000017 	ldw	r20,0(r2)
    cc94:	dd800015 	stw	r22,0(sp)
    cc98:	bdc00044 	addi	r23,r23,1
    cc9c:	b80b883a 	mov	r5,r23
    cca0:	a009883a 	mov	r4,r20
    cca4:	d8800315 	stw	r2,12(sp)
    cca8:	00070640 	call	7064 <__udivsi3>
    ccac:	1021883a 	mov	r16,r2
    ccb0:	a5c02f36 	bltu	r20,r23,cd70 <quorem+0x13c>
    ccb4:	e029883a 	mov	r20,fp
    ccb8:	002b883a 	mov	r21,zero
    ccbc:	002f883a 	mov	r23,zero
    ccc0:	a4c00017 	ldw	r19,0(r20)
    ccc4:	800b883a 	mov	r5,r16
    ccc8:	b5800104 	addi	r22,r22,4
    cccc:	993fffcc 	andi	r4,r19,65535
    ccd0:	00071240 	call	7124 <__mulsi3>
    ccd4:	9808d43a 	srli	r4,r19,16
    ccd8:	800b883a 	mov	r5,r16
    ccdc:	156b883a 	add	r21,r2,r21
    cce0:	00071240 	call	7124 <__mulsi3>
    cce4:	b0ffff17 	ldw	r3,-4(r22)
    cce8:	a80ad43a 	srli	r5,r21,16
    ccec:	a93fffcc 	andi	r4,r21,65535
    ccf0:	19bfffcc 	andi	r6,r3,65535
    ccf4:	b909c83a 	sub	r4,r23,r4
    ccf8:	2189883a 	add	r4,r4,r6
    ccfc:	1806d43a 	srli	r3,r3,16
    cd00:	1145883a 	add	r2,r2,r5
    cd04:	200bd43a 	srai	r5,r4,16
    cd08:	11bfffcc 	andi	r6,r2,65535
    cd0c:	1987c83a 	sub	r3,r3,r6
    cd10:	1947883a 	add	r3,r3,r5
    cd14:	180a943a 	slli	r5,r3,16
    cd18:	213fffcc 	andi	r4,r4,65535
    cd1c:	a5000104 	addi	r20,r20,4
    cd20:	2908b03a 	or	r4,r5,r4
    cd24:	b13fff15 	stw	r4,-4(r22)
    cd28:	102ad43a 	srli	r21,r2,16
    cd2c:	182fd43a 	srai	r23,r3,16
    cd30:	953fe32e 	bgeu	r18,r20,ccc0 <quorem+0x8c>
    cd34:	d8c00317 	ldw	r3,12(sp)
    cd38:	18800017 	ldw	r2,0(r3)
    cd3c:	10000c1e 	bne	r2,zero,cd70 <quorem+0x13c>
    cd40:	d8800017 	ldw	r2,0(sp)
    cd44:	1d7fff04 	addi	r21,r3,-4
    cd48:	15400436 	bltu	r2,r21,cd5c <quorem+0x128>
    cd4c:	00000606 	br	cd68 <quorem+0x134>
    cd50:	d8800017 	ldw	r2,0(sp)
    cd54:	8c7fffc4 	addi	r17,r17,-1
    cd58:	1540032e 	bgeu	r2,r21,cd68 <quorem+0x134>
    cd5c:	a8800017 	ldw	r2,0(r21)
    cd60:	ad7fff04 	addi	r21,r21,-4
    cd64:	103ffa26 	beq	r2,zero,cd50 <quorem+0x11c>
    cd68:	d8800117 	ldw	r2,4(sp)
    cd6c:	14400415 	stw	r17,16(r2)
    cd70:	d9400217 	ldw	r5,8(sp)
    cd74:	d9000117 	ldw	r4,4(sp)
    cd78:	00106480 	call	10648 <__mcmp>
    cd7c:	10002616 	blt	r2,zero,ce18 <quorem+0x1e4>
    cd80:	d9400017 	ldw	r5,0(sp)
    cd84:	84000044 	addi	r16,r16,1
    cd88:	0007883a 	mov	r3,zero
    cd8c:	e1000017 	ldw	r4,0(fp)
    cd90:	29800017 	ldw	r6,0(r5)
    cd94:	29400104 	addi	r5,r5,4
    cd98:	20bfffcc 	andi	r2,r4,65535
    cd9c:	1887c83a 	sub	r3,r3,r2
    cda0:	30bfffcc 	andi	r2,r6,65535
    cda4:	1885883a 	add	r2,r3,r2
    cda8:	2008d43a 	srli	r4,r4,16
    cdac:	3006d43a 	srli	r3,r6,16
    cdb0:	100fd43a 	srai	r7,r2,16
    cdb4:	11bfffcc 	andi	r6,r2,65535
    cdb8:	1907c83a 	sub	r3,r3,r4
    cdbc:	19c7883a 	add	r3,r3,r7
    cdc0:	1804943a 	slli	r2,r3,16
    cdc4:	e7000104 	addi	fp,fp,4
    cdc8:	1807d43a 	srai	r3,r3,16
    cdcc:	1184b03a 	or	r2,r2,r6
    cdd0:	28bfff15 	stw	r2,-4(r5)
    cdd4:	973fed2e 	bgeu	r18,fp,cd8c <quorem+0x158>
    cdd8:	880490ba 	slli	r2,r17,2
    cddc:	d9000017 	ldw	r4,0(sp)
    cde0:	2085883a 	add	r2,r4,r2
    cde4:	10c00017 	ldw	r3,0(r2)
    cde8:	18000b1e 	bne	r3,zero,ce18 <quorem+0x1e4>
    cdec:	10bfff04 	addi	r2,r2,-4
    cdf0:	20800436 	bltu	r4,r2,ce04 <quorem+0x1d0>
    cdf4:	00000606 	br	ce10 <quorem+0x1dc>
    cdf8:	d8c00017 	ldw	r3,0(sp)
    cdfc:	8c7fffc4 	addi	r17,r17,-1
    ce00:	1880032e 	bgeu	r3,r2,ce10 <quorem+0x1dc>
    ce04:	10c00017 	ldw	r3,0(r2)
    ce08:	10bfff04 	addi	r2,r2,-4
    ce0c:	183ffa26 	beq	r3,zero,cdf8 <quorem+0x1c4>
    ce10:	d8800117 	ldw	r2,4(sp)
    ce14:	14400415 	stw	r17,16(r2)
    ce18:	8005883a 	mov	r2,r16
    ce1c:	dfc00d17 	ldw	ra,52(sp)
    ce20:	df000c17 	ldw	fp,48(sp)
    ce24:	ddc00b17 	ldw	r23,44(sp)
    ce28:	dd800a17 	ldw	r22,40(sp)
    ce2c:	dd400917 	ldw	r21,36(sp)
    ce30:	dd000817 	ldw	r20,32(sp)
    ce34:	dcc00717 	ldw	r19,28(sp)
    ce38:	dc800617 	ldw	r18,24(sp)
    ce3c:	dc400517 	ldw	r17,20(sp)
    ce40:	dc000417 	ldw	r16,16(sp)
    ce44:	dec00e04 	addi	sp,sp,56
    ce48:	f800283a 	ret
    ce4c:	0005883a 	mov	r2,zero
    ce50:	003ff206 	br	ce1c <quorem+0x1e8>

0000ce54 <_dtoa_r>:
    ce54:	20801017 	ldw	r2,64(r4)
    ce58:	deffe304 	addi	sp,sp,-116
    ce5c:	df001b15 	stw	fp,108(sp)
    ce60:	dcc01615 	stw	r19,88(sp)
    ce64:	dc801515 	stw	r18,84(sp)
    ce68:	dc401415 	stw	r17,80(sp)
    ce6c:	dc001315 	stw	r16,76(sp)
    ce70:	dfc01c15 	stw	ra,112(sp)
    ce74:	ddc01a15 	stw	r23,104(sp)
    ce78:	dd801915 	stw	r22,100(sp)
    ce7c:	dd401815 	stw	r21,96(sp)
    ce80:	dd001715 	stw	r20,92(sp)
    ce84:	d9c00215 	stw	r7,8(sp)
    ce88:	dc001f17 	ldw	r16,124(sp)
    ce8c:	2039883a 	mov	fp,r4
    ce90:	3025883a 	mov	r18,r6
    ce94:	2827883a 	mov	r19,r5
    ce98:	3023883a 	mov	r17,r6
    ce9c:	10000826 	beq	r2,zero,cec0 <_dtoa_r+0x6c>
    cea0:	21801117 	ldw	r6,68(r4)
    cea4:	00c00044 	movi	r3,1
    cea8:	100b883a 	mov	r5,r2
    ceac:	1986983a 	sll	r3,r3,r6
    ceb0:	11800115 	stw	r6,4(r2)
    ceb4:	10c00215 	stw	r3,8(r2)
    ceb8:	000fc380 	call	fc38 <_Bfree>
    cebc:	e0001015 	stw	zero,64(fp)
    cec0:	90018916 	blt	r18,zero,d4e8 <_dtoa_r+0x694>
    cec4:	80000015 	stw	zero,0(r16)
    cec8:	909ffc2c 	andhi	r2,r18,32752
    cecc:	00dffc34 	movhi	r3,32752
    ced0:	10c18e26 	beq	r2,r3,d50c <_dtoa_r+0x6b8>
    ced4:	000d883a 	mov	r6,zero
    ced8:	000f883a 	mov	r7,zero
    cedc:	9809883a 	mov	r4,r19
    cee0:	880b883a 	mov	r5,r17
    cee4:	00086980 	call	8698 <__eqdf2>
    cee8:	1000191e 	bne	r2,zero,cf50 <_dtoa_r+0xfc>
    ceec:	d8c01e17 	ldw	r3,120(sp)
    cef0:	00800044 	movi	r2,1
    cef4:	18800015 	stw	r2,0(r3)
    cef8:	d8802017 	ldw	r2,128(sp)
    cefc:	1002ff26 	beq	r2,zero,dafc <_dtoa_r+0xca8>
    cf00:	d9002017 	ldw	r4,128(sp)
    cf04:	00800074 	movhi	r2,1
    cf08:	109f7644 	addi	r2,r2,32217
    cf0c:	00c00074 	movhi	r3,1
    cf10:	20800015 	stw	r2,0(r4)
    cf14:	189f7604 	addi	r2,r3,32216
    cf18:	d8800115 	stw	r2,4(sp)
    cf1c:	d8800117 	ldw	r2,4(sp)
    cf20:	dfc01c17 	ldw	ra,112(sp)
    cf24:	df001b17 	ldw	fp,108(sp)
    cf28:	ddc01a17 	ldw	r23,104(sp)
    cf2c:	dd801917 	ldw	r22,100(sp)
    cf30:	dd401817 	ldw	r21,96(sp)
    cf34:	dd001717 	ldw	r20,92(sp)
    cf38:	dcc01617 	ldw	r19,88(sp)
    cf3c:	dc801517 	ldw	r18,84(sp)
    cf40:	dc401417 	ldw	r17,80(sp)
    cf44:	dc001317 	ldw	r16,76(sp)
    cf48:	dec01d04 	addi	sp,sp,116
    cf4c:	f800283a 	ret
    cf50:	d8801104 	addi	r2,sp,68
    cf54:	9020d53a 	srli	r16,r18,20
    cf58:	d8800015 	stw	r2,0(sp)
    cf5c:	d9c01204 	addi	r7,sp,72
    cf60:	980b883a 	mov	r5,r19
    cf64:	880d883a 	mov	r6,r17
    cf68:	e009883a 	mov	r4,fp
    cf6c:	0010a300 	call	10a30 <__d2b>
    cf70:	102f883a 	mov	r23,r2
    cf74:	8001781e 	bne	r16,zero,d558 <_dtoa_r+0x704>
    cf78:	dd001117 	ldw	r20,68(sp)
    cf7c:	dc001217 	ldw	r16,72(sp)
    cf80:	a421883a 	add	r16,r20,r16
    cf84:	80810c84 	addi	r2,r16,1074
    cf88:	10c00850 	cmplti	r3,r2,33
    cf8c:	1802eb1e 	bne	r3,zero,db3c <_dtoa_r+0xce8>
    cf90:	01001004 	movi	r4,64
    cf94:	2085c83a 	sub	r2,r4,r2
    cf98:	81010484 	addi	r4,r16,1042
    cf9c:	90a4983a 	sll	r18,r18,r2
    cfa0:	9908d83a 	srl	r4,r19,r4
    cfa4:	9108b03a 	or	r4,r18,r4
    cfa8:	0009b2c0 	call	9b2c <__floatunsidf>
    cfac:	1009883a 	mov	r4,r2
    cfb0:	017f8434 	movhi	r5,65040
    cfb4:	00800044 	movi	r2,1
    cfb8:	194b883a 	add	r5,r3,r5
    cfbc:	843fffc4 	addi	r16,r16,-1
    cfc0:	d8800915 	stw	r2,36(sp)
    cfc4:	000d883a 	mov	r6,zero
    cfc8:	01cffe34 	movhi	r7,16376
    cfcc:	00090940 	call	9094 <__subdf3>
    cfd0:	0198dbf4 	movhi	r6,25455
    cfd4:	01cff4f4 	movhi	r7,16339
    cfd8:	3190d844 	addi	r6,r6,17249
    cfdc:	39e1e9c4 	addi	r7,r7,-30809
    cfe0:	1009883a 	mov	r4,r2
    cfe4:	180b883a 	mov	r5,r3
    cfe8:	00088e80 	call	88e8 <__muldf3>
    cfec:	01a2d874 	movhi	r6,35681
    cff0:	01cff1f4 	movhi	r7,16327
    cff4:	31b22cc4 	addi	r6,r6,-14157
    cff8:	39e28a04 	addi	r7,r7,-30168
    cffc:	180b883a 	mov	r5,r3
    d000:	1009883a 	mov	r4,r2
    d004:	00074940 	call	7494 <__adddf3>
    d008:	8009883a 	mov	r4,r16
    d00c:	102b883a 	mov	r21,r2
    d010:	1825883a 	mov	r18,r3
    d014:	0009a740 	call	9a74 <__floatsidf>
    d018:	019427f4 	movhi	r6,20639
    d01c:	01cff4f4 	movhi	r7,16339
    d020:	319e7ec4 	addi	r6,r6,31227
    d024:	39d104c4 	addi	r7,r7,17427
    d028:	1009883a 	mov	r4,r2
    d02c:	180b883a 	mov	r5,r3
    d030:	00088e80 	call	88e8 <__muldf3>
    d034:	100d883a 	mov	r6,r2
    d038:	180f883a 	mov	r7,r3
    d03c:	a809883a 	mov	r4,r21
    d040:	900b883a 	mov	r5,r18
    d044:	00074940 	call	7494 <__adddf3>
    d048:	1009883a 	mov	r4,r2
    d04c:	180b883a 	mov	r5,r3
    d050:	1025883a 	mov	r18,r2
    d054:	182d883a 	mov	r22,r3
    d058:	00099f40 	call	99f4 <__fixdfsi>
    d05c:	000d883a 	mov	r6,zero
    d060:	000f883a 	mov	r7,zero
    d064:	9009883a 	mov	r4,r18
    d068:	b00b883a 	mov	r5,r22
    d06c:	102b883a 	mov	r21,r2
    d070:	00088000 	call	8800 <__ledf2>
    d074:	10029716 	blt	r2,zero,dad4 <_dtoa_r+0xc80>
    d078:	a421c83a 	sub	r16,r20,r16
    d07c:	a88005e8 	cmpgeui	r2,r21,23
    d080:	85bfffc4 	addi	r22,r16,-1
    d084:	10028b1e 	bne	r2,zero,dab4 <_dtoa_r+0xc60>
    d088:	a80690fa 	slli	r3,r21,3
    d08c:	00800074 	movhi	r2,1
    d090:	109fbf04 	addi	r2,r2,32508
    d094:	10c5883a 	add	r2,r2,r3
    d098:	11800017 	ldw	r6,0(r2)
    d09c:	11c00117 	ldw	r7,4(r2)
    d0a0:	9809883a 	mov	r4,r19
    d0a4:	880b883a 	mov	r5,r17
    d0a8:	00088000 	call	8800 <__ledf2>
    d0ac:	10025f0e 	bge	r2,zero,da2c <_dtoa_r+0xbd8>
    d0b0:	d8000815 	stw	zero,32(sp)
    d0b4:	ad7fffc4 	addi	r21,r21,-1
    d0b8:	b0028116 	blt	r22,zero,dac0 <_dtoa_r+0xc6c>
    d0bc:	d8000415 	stw	zero,16(sp)
    d0c0:	a8025d0e 	bge	r21,zero,da38 <_dtoa_r+0xbe4>
    d0c4:	d8800417 	ldw	r2,16(sp)
    d0c8:	d8c00217 	ldw	r3,8(sp)
    d0cc:	dd400615 	stw	r21,24(sp)
    d0d0:	1545c83a 	sub	r2,r2,r21
    d0d4:	d8800415 	stw	r2,16(sp)
    d0d8:	0545c83a 	sub	r2,zero,r21
    d0dc:	d8800715 	stw	r2,28(sp)
    d0e0:	188002a8 	cmpgeui	r2,r3,10
    d0e4:	002b883a 	mov	r21,zero
    d0e8:	1002591e 	bne	r2,zero,da50 <_dtoa_r+0xbfc>
    d0ec:	18800190 	cmplti	r2,r3,6
    d0f0:	1002961e 	bne	r2,zero,db4c <_dtoa_r+0xcf8>
    d0f4:	18bfff04 	addi	r2,r3,-4
    d0f8:	d8800215 	stw	r2,8(sp)
    d0fc:	0021883a 	mov	r16,zero
    d100:	d8c00217 	ldw	r3,8(sp)
    d104:	18800120 	cmpeqi	r2,r3,4
    d108:	10036d1e 	bne	r2,zero,dec0 <_dtoa_r+0x106c>
    d10c:	18800160 	cmpeqi	r2,r3,5
    d110:	1003291e 	bne	r2,zero,ddb8 <_dtoa_r+0xf64>
    d114:	188000a0 	cmpeqi	r2,r3,2
    d118:	10025926 	beq	r2,zero,da80 <_dtoa_r+0xc2c>
    d11c:	d8000515 	stw	zero,20(sp)
    d120:	d8801d17 	ldw	r2,116(sp)
    d124:	0083340e 	bge	zero,r2,ddf8 <_dtoa_r+0xfa4>
    d128:	d8800b15 	stw	r2,44(sp)
    d12c:	d8800315 	stw	r2,12(sp)
    d130:	100d883a 	mov	r6,r2
    d134:	e0001115 	stw	zero,68(fp)
    d138:	30800610 	cmplti	r2,r6,24
    d13c:	1004f61e 	bne	r2,zero,e518 <_dtoa_r+0x16c4>
    d140:	00c00044 	movi	r3,1
    d144:	00800104 	movi	r2,4
    d148:	1085883a 	add	r2,r2,r2
    d14c:	11000504 	addi	r4,r2,20
    d150:	180b883a 	mov	r5,r3
    d154:	18c00044 	addi	r3,r3,1
    d158:	313ffb2e 	bgeu	r6,r4,d148 <_dtoa_r+0x2f4>
    d15c:	e1401115 	stw	r5,68(fp)
    d160:	e009883a 	mov	r4,fp
    d164:	000fb940 	call	fb94 <_Balloc>
    d168:	d8800115 	stw	r2,4(sp)
    d16c:	1004e326 	beq	r2,zero,e4fc <_dtoa_r+0x16a8>
    d170:	d8800117 	ldw	r2,4(sp)
    d174:	e0801015 	stw	r2,64(fp)
    d178:	d8800317 	ldw	r2,12(sp)
    d17c:	108003e8 	cmpgeui	r2,r2,15
    d180:	1001091e 	bne	r2,zero,d5a8 <_dtoa_r+0x754>
    d184:	80010826 	beq	r16,zero,d5a8 <_dtoa_r+0x754>
    d188:	d9000617 	ldw	r4,24(sp)
    d18c:	0103970e 	bge	zero,r4,dfec <_dtoa_r+0x1198>
    d190:	208003cc 	andi	r2,r4,15
    d194:	100690fa 	slli	r3,r2,3
    d198:	2029d13a 	srai	r20,r4,4
    d19c:	00800074 	movhi	r2,1
    d1a0:	109fbf04 	addi	r2,r2,32508
    d1a4:	10c5883a 	add	r2,r2,r3
    d1a8:	a0c0040c 	andi	r3,r20,16
    d1ac:	12800017 	ldw	r10,0(r2)
    d1b0:	12400117 	ldw	r9,4(r2)
    d1b4:	18033c26 	beq	r3,zero,dea8 <_dtoa_r+0x1054>
    d1b8:	00800074 	movhi	r2,1
    d1bc:	109fb504 	addi	r2,r2,32468
    d1c0:	11800817 	ldw	r6,32(r2)
    d1c4:	11c00917 	ldw	r7,36(r2)
    d1c8:	9809883a 	mov	r4,r19
    d1cc:	880b883a 	mov	r5,r17
    d1d0:	da400e15 	stw	r9,56(sp)
    d1d4:	da800d15 	stw	r10,52(sp)
    d1d8:	0007d840 	call	7d84 <__divdf3>
    d1dc:	da800d17 	ldw	r10,52(sp)
    d1e0:	da400e17 	ldw	r9,56(sp)
    d1e4:	a50003cc 	andi	r20,r20,15
    d1e8:	d8800a15 	stw	r2,40(sp)
    d1ec:	d8c00c15 	stw	r3,48(sp)
    d1f0:	040000c4 	movi	r16,3
    d1f4:	a0001126 	beq	r20,zero,d23c <_dtoa_r+0x3e8>
    d1f8:	04800074 	movhi	r18,1
    d1fc:	949fb504 	addi	r18,r18,32468
    d200:	5009883a 	mov	r4,r10
    d204:	480b883a 	mov	r5,r9
    d208:	a180004c 	andi	r6,r20,1
    d20c:	30000626 	beq	r6,zero,d228 <_dtoa_r+0x3d4>
    d210:	91800017 	ldw	r6,0(r18)
    d214:	91c00117 	ldw	r7,4(r18)
    d218:	84000044 	addi	r16,r16,1
    d21c:	00088e80 	call	88e8 <__muldf3>
    d220:	1009883a 	mov	r4,r2
    d224:	180b883a 	mov	r5,r3
    d228:	a029d07a 	srai	r20,r20,1
    d22c:	94800204 	addi	r18,r18,8
    d230:	a03ff51e 	bne	r20,zero,d208 <_dtoa_r+0x3b4>
    d234:	2015883a 	mov	r10,r4
    d238:	2813883a 	mov	r9,r5
    d23c:	d9000a17 	ldw	r4,40(sp)
    d240:	d9400c17 	ldw	r5,48(sp)
    d244:	500d883a 	mov	r6,r10
    d248:	480f883a 	mov	r7,r9
    d24c:	0007d840 	call	7d84 <__divdf3>
    d250:	d8800a15 	stw	r2,40(sp)
    d254:	1825883a 	mov	r18,r3
    d258:	d8800817 	ldw	r2,32(sp)
    d25c:	10000726 	beq	r2,zero,d27c <_dtoa_r+0x428>
    d260:	dd000a17 	ldw	r20,40(sp)
    d264:	000d883a 	mov	r6,zero
    d268:	01cffc34 	movhi	r7,16368
    d26c:	a009883a 	mov	r4,r20
    d270:	900b883a 	mov	r5,r18
    d274:	00088000 	call	8800 <__ledf2>
    d278:	10044516 	blt	r2,zero,e390 <_dtoa_r+0x153c>
    d27c:	8009883a 	mov	r4,r16
    d280:	0009a740 	call	9a74 <__floatsidf>
    d284:	d9800a17 	ldw	r6,40(sp)
    d288:	900f883a 	mov	r7,r18
    d28c:	1009883a 	mov	r4,r2
    d290:	180b883a 	mov	r5,r3
    d294:	00088e80 	call	88e8 <__muldf3>
    d298:	000d883a 	mov	r6,zero
    d29c:	01d00734 	movhi	r7,16412
    d2a0:	1009883a 	mov	r4,r2
    d2a4:	180b883a 	mov	r5,r3
    d2a8:	00074940 	call	7494 <__adddf3>
    d2ac:	1029883a 	mov	r20,r2
    d2b0:	00bf3034 	movhi	r2,64704
    d2b4:	1885883a 	add	r2,r3,r2
    d2b8:	d8800c15 	stw	r2,48(sp)
    d2bc:	d8800317 	ldw	r2,12(sp)
    d2c0:	10032d26 	beq	r2,zero,df78 <_dtoa_r+0x1124>
    d2c4:	d8800617 	ldw	r2,24(sp)
    d2c8:	d8801015 	stw	r2,64(sp)
    d2cc:	d8800317 	ldw	r2,12(sp)
    d2d0:	d8800d15 	stw	r2,52(sp)
    d2d4:	d8800d17 	ldw	r2,52(sp)
    d2d8:	dc000a17 	ldw	r16,40(sp)
    d2dc:	900b883a 	mov	r5,r18
    d2e0:	10bfffc4 	addi	r2,r2,-1
    d2e4:	100690fa 	slli	r3,r2,3
    d2e8:	00800074 	movhi	r2,1
    d2ec:	109fbf04 	addi	r2,r2,32508
    d2f0:	10c5883a 	add	r2,r2,r3
    d2f4:	12c00017 	ldw	r11,0(r2)
    d2f8:	13000117 	ldw	r12,4(r2)
    d2fc:	8009883a 	mov	r4,r16
    d300:	dac00e15 	stw	r11,56(sp)
    d304:	db000a15 	stw	r12,40(sp)
    d308:	00099f40 	call	99f4 <__fixdfsi>
    d30c:	1009883a 	mov	r4,r2
    d310:	10800c04 	addi	r2,r2,48
    d314:	d8800f15 	stw	r2,60(sp)
    d318:	0009a740 	call	9a74 <__floatsidf>
    d31c:	8009883a 	mov	r4,r16
    d320:	100d883a 	mov	r6,r2
    d324:	180f883a 	mov	r7,r3
    d328:	900b883a 	mov	r5,r18
    d32c:	00090940 	call	9094 <__subdf3>
    d330:	d9000117 	ldw	r4,4(sp)
    d334:	dac00e17 	ldw	r11,56(sp)
    d338:	db000a17 	ldw	r12,40(sp)
    d33c:	1825883a 	mov	r18,r3
    d340:	d8c00517 	ldw	r3,20(sp)
    d344:	22000044 	addi	r8,r4,1
    d348:	da000e15 	stw	r8,56(sp)
    d34c:	1021883a 	mov	r16,r2
    d350:	580d883a 	mov	r6,r11
    d354:	600f883a 	mov	r7,r12
    d358:	1803b226 	beq	r3,zero,e224 <_dtoa_r+0x13d0>
    d35c:	0009883a 	mov	r4,zero
    d360:	014ff834 	movhi	r5,16352
    d364:	0007d840 	call	7d84 <__divdf3>
    d368:	d9c00c17 	ldw	r7,48(sp)
    d36c:	a00d883a 	mov	r6,r20
    d370:	1009883a 	mov	r4,r2
    d374:	180b883a 	mov	r5,r3
    d378:	00090940 	call	9094 <__subdf3>
    d37c:	d9000117 	ldw	r4,4(sp)
    d380:	1029883a 	mov	r20,r2
    d384:	d8800f17 	ldw	r2,60(sp)
    d388:	800d883a 	mov	r6,r16
    d38c:	900f883a 	mov	r7,r18
    d390:	20800005 	stb	r2,0(r4)
    d394:	180b883a 	mov	r5,r3
    d398:	a009883a 	mov	r4,r20
    d39c:	d8c00a15 	stw	r3,40(sp)
    d3a0:	00087180 	call	8718 <__gedf2>
    d3a4:	da000e17 	ldw	r8,56(sp)
    d3a8:	0083e516 	blt	zero,r2,e340 <_dtoa_r+0x14ec>
    d3ac:	0005883a 	mov	r2,zero
    d3b0:	dd400e15 	stw	r21,56(sp)
    d3b4:	dd800f15 	stw	r22,60(sp)
    d3b8:	ddc00c15 	stw	r23,48(sp)
    d3bc:	dd800d17 	ldw	r22,52(sp)
    d3c0:	402b883a 	mov	r21,r8
    d3c4:	dc400d15 	stw	r17,52(sp)
    d3c8:	dc400a17 	ldw	r17,40(sp)
    d3cc:	dcc00a15 	stw	r19,40(sp)
    d3d0:	1027883a 	mov	r19,r2
    d3d4:	00002606 	br	d470 <_dtoa_r+0x61c>
    d3d8:	9cc00044 	addi	r19,r19,1
    d3dc:	9d806d0e 	bge	r19,r22,d594 <_dtoa_r+0x740>
    d3e0:	a009883a 	mov	r4,r20
    d3e4:	880b883a 	mov	r5,r17
    d3e8:	000d883a 	mov	r6,zero
    d3ec:	01d00934 	movhi	r7,16420
    d3f0:	00088e80 	call	88e8 <__muldf3>
    d3f4:	000d883a 	mov	r6,zero
    d3f8:	01d00934 	movhi	r7,16420
    d3fc:	8009883a 	mov	r4,r16
    d400:	900b883a 	mov	r5,r18
    d404:	1029883a 	mov	r20,r2
    d408:	1823883a 	mov	r17,r3
    d40c:	00088e80 	call	88e8 <__muldf3>
    d410:	180b883a 	mov	r5,r3
    d414:	1009883a 	mov	r4,r2
    d418:	1821883a 	mov	r16,r3
    d41c:	1025883a 	mov	r18,r2
    d420:	00099f40 	call	99f4 <__fixdfsi>
    d424:	1009883a 	mov	r4,r2
    d428:	102f883a 	mov	r23,r2
    d42c:	0009a740 	call	9a74 <__floatsidf>
    d430:	9009883a 	mov	r4,r18
    d434:	800b883a 	mov	r5,r16
    d438:	100d883a 	mov	r6,r2
    d43c:	180f883a 	mov	r7,r3
    d440:	00090940 	call	9094 <__subdf3>
    d444:	ad400044 	addi	r21,r21,1
    d448:	ba000c04 	addi	r8,r23,48
    d44c:	aa3fffc5 	stb	r8,-1(r21)
    d450:	a00d883a 	mov	r6,r20
    d454:	880f883a 	mov	r7,r17
    d458:	1009883a 	mov	r4,r2
    d45c:	180b883a 	mov	r5,r3
    d460:	1021883a 	mov	r16,r2
    d464:	1825883a 	mov	r18,r3
    d468:	00088000 	call	8800 <__ledf2>
    d46c:	10040516 	blt	r2,zero,e484 <_dtoa_r+0x1630>
    d470:	800d883a 	mov	r6,r16
    d474:	900f883a 	mov	r7,r18
    d478:	0009883a 	mov	r4,zero
    d47c:	014ffc34 	movhi	r5,16368
    d480:	00090940 	call	9094 <__subdf3>
    d484:	a00d883a 	mov	r6,r20
    d488:	880f883a 	mov	r7,r17
    d48c:	1009883a 	mov	r4,r2
    d490:	180b883a 	mov	r5,r3
    d494:	00088000 	call	8800 <__ledf2>
    d498:	103fcf0e 	bge	r2,zero,d3d8 <_dtoa_r+0x584>
    d49c:	d8801017 	ldw	r2,64(sp)
    d4a0:	ddc00c17 	ldw	r23,48(sp)
    d4a4:	d9000117 	ldw	r4,4(sp)
    d4a8:	a829883a 	mov	r20,r21
    d4ac:	14c00044 	addi	r19,r2,1
    d4b0:	00000106 	br	d4b8 <_dtoa_r+0x664>
    d4b4:	a103d826 	beq	r20,r4,e418 <_dtoa_r+0x15c4>
    d4b8:	a0ffffc3 	ldbu	r3,-1(r20)
    d4bc:	a011883a 	mov	r8,r20
    d4c0:	a53fffc4 	addi	r20,r20,-1
    d4c4:	18803fcc 	andi	r2,r3,255
    d4c8:	1080201c 	xori	r2,r2,128
    d4cc:	10bfe004 	addi	r2,r2,-128
    d4d0:	10800e60 	cmpeqi	r2,r2,57
    d4d4:	103ff71e 	bne	r2,zero,d4b4 <_dtoa_r+0x660>
    d4d8:	18c00044 	addi	r3,r3,1
    d4dc:	a0c00005 	stb	r3,0(r20)
    d4e0:	dcc00215 	stw	r19,8(sp)
    d4e4:	00014406 	br	d9f8 <_dtoa_r+0xba4>
    d4e8:	04600034 	movhi	r17,32768
    d4ec:	8c7fffc4 	addi	r17,r17,-1
    d4f0:	9462703a 	and	r17,r18,r17
    d4f4:	00800044 	movi	r2,1
    d4f8:	8825883a 	mov	r18,r17
    d4fc:	80800015 	stw	r2,0(r16)
    d500:	00dffc34 	movhi	r3,32752
    d504:	909ffc2c 	andhi	r2,r18,32752
    d508:	10fe721e 	bne	r2,r3,ced4 <_dtoa_r+0x80>
    d50c:	d9001e17 	ldw	r4,120(sp)
    d510:	00800434 	movhi	r2,16
    d514:	10bfffc4 	addi	r2,r2,-1
    d518:	9084703a 	and	r2,r18,r2
    d51c:	00c9c3c4 	movi	r3,9999
    d520:	20c00015 	stw	r3,0(r4)
    d524:	14e6b03a 	or	r19,r2,r19
    d528:	9800141e 	bne	r19,zero,d57c <_dtoa_r+0x728>
    d52c:	d8802017 	ldw	r2,128(sp)
    d530:	10041126 	beq	r2,zero,e578 <_dtoa_r+0x1724>
    d534:	00800074 	movhi	r2,1
    d538:	1007883a 	mov	r3,r2
    d53c:	18df8004 	addi	r3,r3,32256
    d540:	00800074 	movhi	r2,1
    d544:	d8c00115 	stw	r3,4(sp)
    d548:	109f8204 	addi	r2,r2,32264
    d54c:	d8c02017 	ldw	r3,128(sp)
    d550:	18800015 	stw	r2,0(r3)
    d554:	003e7106 	br	cf1c <_dtoa_r+0xc8>
    d558:	01400434 	movhi	r5,16
    d55c:	297fffc4 	addi	r5,r5,-1
    d560:	894a703a 	and	r5,r17,r5
    d564:	dd001117 	ldw	r20,68(sp)
    d568:	9809883a 	mov	r4,r19
    d56c:	294ffc34 	orhi	r5,r5,16368
    d570:	843f0044 	addi	r16,r16,-1023
    d574:	d8000915 	stw	zero,36(sp)
    d578:	003e9206 	br	cfc4 <_dtoa_r+0x170>
    d57c:	d8802017 	ldw	r2,128(sp)
    d580:	1002061e 	bne	r2,zero,dd9c <_dtoa_r+0xf48>
    d584:	00800074 	movhi	r2,1
    d588:	109f7f04 	addi	r2,r2,32252
    d58c:	d8800115 	stw	r2,4(sp)
    d590:	003e6206 	br	cf1c <_dtoa_r+0xc8>
    d594:	dd400e17 	ldw	r21,56(sp)
    d598:	dd800f17 	ldw	r22,60(sp)
    d59c:	ddc00c17 	ldw	r23,48(sp)
    d5a0:	dc400d17 	ldw	r17,52(sp)
    d5a4:	dcc00a17 	ldw	r19,40(sp)
    d5a8:	d8801217 	ldw	r2,72(sp)
    d5ac:	10006e16 	blt	r2,zero,d768 <_dtoa_r+0x914>
    d5b0:	d9000617 	ldw	r4,24(sp)
    d5b4:	20c003c8 	cmpgei	r3,r4,15
    d5b8:	18006b1e 	bne	r3,zero,d768 <_dtoa_r+0x914>
    d5bc:	200690fa 	slli	r3,r4,3
    d5c0:	00800074 	movhi	r2,1
    d5c4:	109fbf04 	addi	r2,r2,32508
    d5c8:	10c5883a 	add	r2,r2,r3
    d5cc:	14000017 	ldw	r16,0(r2)
    d5d0:	14800117 	ldw	r18,4(r2)
    d5d4:	d8801d17 	ldw	r2,116(sp)
    d5d8:	1000150e 	bge	r2,zero,d630 <_dtoa_r+0x7dc>
    d5dc:	d8800317 	ldw	r2,12(sp)
    d5e0:	00801316 	blt	zero,r2,d630 <_dtoa_r+0x7dc>
    d5e4:	d8800317 	ldw	r2,12(sp)
    d5e8:	1002771e 	bne	r2,zero,dfc8 <_dtoa_r+0x1174>
    d5ec:	8009883a 	mov	r4,r16
    d5f0:	000d883a 	mov	r6,zero
    d5f4:	01d00534 	movhi	r7,16404
    d5f8:	900b883a 	mov	r5,r18
    d5fc:	00088e80 	call	88e8 <__muldf3>
    d600:	100d883a 	mov	r6,r2
    d604:	180f883a 	mov	r7,r3
    d608:	9809883a 	mov	r4,r19
    d60c:	880b883a 	mov	r5,r17
    d610:	00088000 	call	8800 <__ledf2>
    d614:	0029883a 	mov	r20,zero
    d618:	0021883a 	mov	r16,zero
    d61c:	00820916 	blt	zero,r2,de44 <_dtoa_r+0xff0>
    d620:	d8801d17 	ldw	r2,116(sp)
    d624:	da000117 	ldw	r8,4(sp)
    d628:	00a6303a 	nor	r19,zero,r2
    d62c:	00020b06 	br	de5c <_dtoa_r+0x1008>
    d630:	800d883a 	mov	r6,r16
    d634:	900f883a 	mov	r7,r18
    d638:	9809883a 	mov	r4,r19
    d63c:	880b883a 	mov	r5,r17
    d640:	0007d840 	call	7d84 <__divdf3>
    d644:	180b883a 	mov	r5,r3
    d648:	1009883a 	mov	r4,r2
    d64c:	00099f40 	call	99f4 <__fixdfsi>
    d650:	1009883a 	mov	r4,r2
    d654:	102b883a 	mov	r21,r2
    d658:	0009a740 	call	9a74 <__floatsidf>
    d65c:	800d883a 	mov	r6,r16
    d660:	900f883a 	mov	r7,r18
    d664:	1009883a 	mov	r4,r2
    d668:	180b883a 	mov	r5,r3
    d66c:	00088e80 	call	88e8 <__muldf3>
    d670:	100d883a 	mov	r6,r2
    d674:	9809883a 	mov	r4,r19
    d678:	880b883a 	mov	r5,r17
    d67c:	180f883a 	mov	r7,r3
    d680:	00090940 	call	9094 <__subdf3>
    d684:	d9800117 	ldw	r6,4(sp)
    d688:	dd800317 	ldw	r22,12(sp)
    d68c:	1009883a 	mov	r4,r2
    d690:	a8800c04 	addi	r2,r21,48
    d694:	30800005 	stb	r2,0(r6)
    d698:	b0800060 	cmpeqi	r2,r22,1
    d69c:	180b883a 	mov	r5,r3
    d6a0:	35000044 	addi	r20,r6,1
    d6a4:	10029c1e 	bne	r2,zero,e118 <_dtoa_r+0x12c4>
    d6a8:	04400044 	movi	r17,1
    d6ac:	ddc00215 	stw	r23,8(sp)
    d6b0:	00001c06 	br	d724 <_dtoa_r+0x8d0>
    d6b4:	800d883a 	mov	r6,r16
    d6b8:	900f883a 	mov	r7,r18
    d6bc:	a809883a 	mov	r4,r21
    d6c0:	980b883a 	mov	r5,r19
    d6c4:	0007d840 	call	7d84 <__divdf3>
    d6c8:	180b883a 	mov	r5,r3
    d6cc:	1009883a 	mov	r4,r2
    d6d0:	00099f40 	call	99f4 <__fixdfsi>
    d6d4:	1009883a 	mov	r4,r2
    d6d8:	102f883a 	mov	r23,r2
    d6dc:	0009a740 	call	9a74 <__floatsidf>
    d6e0:	800d883a 	mov	r6,r16
    d6e4:	900f883a 	mov	r7,r18
    d6e8:	1009883a 	mov	r4,r2
    d6ec:	180b883a 	mov	r5,r3
    d6f0:	00088e80 	call	88e8 <__muldf3>
    d6f4:	a809883a 	mov	r4,r21
    d6f8:	980b883a 	mov	r5,r19
    d6fc:	100d883a 	mov	r6,r2
    d700:	180f883a 	mov	r7,r3
    d704:	00090940 	call	9094 <__subdf3>
    d708:	b9000c04 	addi	r4,r23,48
    d70c:	a1000005 	stb	r4,0(r20)
    d710:	8c400044 	addi	r17,r17,1
    d714:	a5000044 	addi	r20,r20,1
    d718:	1009883a 	mov	r4,r2
    d71c:	180b883a 	mov	r5,r3
    d720:	b4427b26 	beq	r22,r17,e110 <_dtoa_r+0x12bc>
    d724:	000d883a 	mov	r6,zero
    d728:	01d00934 	movhi	r7,16420
    d72c:	00088e80 	call	88e8 <__muldf3>
    d730:	000d883a 	mov	r6,zero
    d734:	000f883a 	mov	r7,zero
    d738:	1009883a 	mov	r4,r2
    d73c:	180b883a 	mov	r5,r3
    d740:	102b883a 	mov	r21,r2
    d744:	1827883a 	mov	r19,r3
    d748:	00086980 	call	8698 <__eqdf2>
    d74c:	103fd91e 	bne	r2,zero,d6b4 <_dtoa_r+0x860>
    d750:	d8800617 	ldw	r2,24(sp)
    d754:	ddc00217 	ldw	r23,8(sp)
    d758:	a011883a 	mov	r8,r20
    d75c:	10800044 	addi	r2,r2,1
    d760:	d8800215 	stw	r2,8(sp)
    d764:	0000a406 	br	d9f8 <_dtoa_r+0xba4>
    d768:	d8c00517 	ldw	r3,20(sp)
    d76c:	1800e726 	beq	r3,zero,db0c <_dtoa_r+0xcb8>
    d770:	d8c00217 	ldw	r3,8(sp)
    d774:	18c00088 	cmpgei	r3,r3,2
    d778:	1801e526 	beq	r3,zero,df10 <_dtoa_r+0x10bc>
    d77c:	d8800317 	ldw	r2,12(sp)
    d780:	153fffc4 	addi	r20,r2,-1
    d784:	d8800717 	ldw	r2,28(sp)
    d788:	1501c50e 	bge	r2,r20,dea0 <_dtoa_r+0x104c>
    d78c:	d8800717 	ldw	r2,28(sp)
    d790:	dd000715 	stw	r20,28(sp)
    d794:	a085c83a 	sub	r2,r20,r2
    d798:	a8ab883a 	add	r21,r21,r2
    d79c:	0029883a 	mov	r20,zero
    d7a0:	d8800317 	ldw	r2,12(sp)
    d7a4:	10028b16 	blt	r2,zero,e1d4 <_dtoa_r+0x1380>
    d7a8:	d8c00417 	ldw	r3,16(sp)
    d7ac:	b0ad883a 	add	r22,r22,r2
    d7b0:	1885883a 	add	r2,r3,r2
    d7b4:	1825883a 	mov	r18,r3
    d7b8:	d8800415 	stw	r2,16(sp)
    d7bc:	01400044 	movi	r5,1
    d7c0:	e009883a 	mov	r4,fp
    d7c4:	00100040 	call	10004 <__i2b>
    d7c8:	1021883a 	mov	r16,r2
    d7cc:	0480080e 	bge	zero,r18,d7f0 <_dtoa_r+0x99c>
    d7d0:	0580070e 	bge	zero,r22,d7f0 <_dtoa_r+0x99c>
    d7d4:	9005883a 	mov	r2,r18
    d7d8:	b481a916 	blt	r22,r18,de80 <_dtoa_r+0x102c>
    d7dc:	d8c00417 	ldw	r3,16(sp)
    d7e0:	90a5c83a 	sub	r18,r18,r2
    d7e4:	b0adc83a 	sub	r22,r22,r2
    d7e8:	1887c83a 	sub	r3,r3,r2
    d7ec:	d8c00415 	stw	r3,16(sp)
    d7f0:	d8800717 	ldw	r2,28(sp)
    d7f4:	10001526 	beq	r2,zero,d84c <_dtoa_r+0x9f8>
    d7f8:	d8800517 	ldw	r2,20(sp)
    d7fc:	1001f526 	beq	r2,zero,dfd4 <_dtoa_r+0x1180>
    d800:	05000f0e 	bge	zero,r20,d840 <_dtoa_r+0x9ec>
    d804:	800b883a 	mov	r5,r16
    d808:	a00d883a 	mov	r6,r20
    d80c:	e009883a 	mov	r4,fp
    d810:	00103780 	call	10378 <__pow5mult>
    d814:	b80d883a 	mov	r6,r23
    d818:	100b883a 	mov	r5,r2
    d81c:	e009883a 	mov	r4,fp
    d820:	1021883a 	mov	r16,r2
    d824:	00100b40 	call	100b4 <__multiply>
    d828:	b80b883a 	mov	r5,r23
    d82c:	e009883a 	mov	r4,fp
    d830:	d8800915 	stw	r2,36(sp)
    d834:	000fc380 	call	fc38 <_Bfree>
    d838:	d8800917 	ldw	r2,36(sp)
    d83c:	102f883a 	mov	r23,r2
    d840:	d8800717 	ldw	r2,28(sp)
    d844:	150dc83a 	sub	r6,r2,r20
    d848:	15025d1e 	bne	r2,r20,e1c0 <_dtoa_r+0x136c>
    d84c:	01400044 	movi	r5,1
    d850:	e009883a 	mov	r4,fp
    d854:	00100040 	call	10004 <__i2b>
    d858:	1029883a 	mov	r20,r2
    d85c:	0540bd16 	blt	zero,r21,db54 <_dtoa_r+0xd00>
    d860:	d8800217 	ldw	r2,8(sp)
    d864:	10800088 	cmpgei	r2,r2,2
    d868:	10015626 	beq	r2,zero,ddc4 <_dtoa_r+0xf70>
    d86c:	0023883a 	mov	r17,zero
    d870:	00800044 	movi	r2,1
    d874:	a800c01e 	bne	r21,zero,db78 <_dtoa_r+0xd24>
    d878:	1585883a 	add	r2,r2,r22
    d87c:	108007cc 	andi	r2,r2,31
    d880:	1000ac26 	beq	r2,zero,db34 <_dtoa_r+0xce0>
    d884:	00c00804 	movi	r3,32
    d888:	1887c83a 	sub	r3,r3,r2
    d88c:	19000150 	cmplti	r4,r3,5
    d890:	20033d1e 	bne	r4,zero,e588 <_dtoa_r+0x1734>
    d894:	00c00704 	movi	r3,28
    d898:	1885c83a 	sub	r2,r3,r2
    d89c:	d8c00417 	ldw	r3,16(sp)
    d8a0:	90a5883a 	add	r18,r18,r2
    d8a4:	b0ad883a 	add	r22,r22,r2
    d8a8:	1887883a 	add	r3,r3,r2
    d8ac:	d8c00415 	stw	r3,16(sp)
    d8b0:	d8800417 	ldw	r2,16(sp)
    d8b4:	00809916 	blt	zero,r2,db1c <_dtoa_r+0xcc8>
    d8b8:	0580050e 	bge	zero,r22,d8d0 <_dtoa_r+0xa7c>
    d8bc:	a00b883a 	mov	r5,r20
    d8c0:	b00d883a 	mov	r6,r22
    d8c4:	e009883a 	mov	r4,fp
    d8c8:	00104c00 	call	104c0 <__lshift>
    d8cc:	1029883a 	mov	r20,r2
    d8d0:	d8800817 	ldw	r2,32(sp)
    d8d4:	10011d1e 	bne	r2,zero,dd4c <_dtoa_r+0xef8>
    d8d8:	d8800317 	ldw	r2,12(sp)
    d8dc:	00810a0e 	bge	zero,r2,dd08 <_dtoa_r+0xeb4>
    d8e0:	d8800517 	ldw	r2,20(sp)
    d8e4:	1000b71e 	bne	r2,zero,dbc4 <_dtoa_r+0xd70>
    d8e8:	d8800617 	ldw	r2,24(sp)
    d8ec:	10800044 	addi	r2,r2,1
    d8f0:	d8800215 	stw	r2,8(sp)
    d8f4:	dc800317 	ldw	r18,12(sp)
    d8f8:	dd400117 	ldw	r21,4(sp)
    d8fc:	04400044 	movi	r17,1
    d900:	00000706 	br	d920 <_dtoa_r+0xacc>
    d904:	b80b883a 	mov	r5,r23
    d908:	000f883a 	mov	r7,zero
    d90c:	01800284 	movi	r6,10
    d910:	e009883a 	mov	r4,fp
    d914:	000fc5c0 	call	fc5c <__multadd>
    d918:	102f883a 	mov	r23,r2
    d91c:	8c400044 	addi	r17,r17,1
    d920:	a00b883a 	mov	r5,r20
    d924:	b809883a 	mov	r4,r23
    d928:	000cc340 	call	cc34 <quorem>
    d92c:	14c00c04 	addi	r19,r2,48
    d930:	ac45883a 	add	r2,r21,r17
    d934:	14ffffc5 	stb	r19,-1(r2)
    d938:	8cbff216 	blt	r17,r18,d904 <_dtoa_r+0xab0>
    d93c:	d8800317 	ldw	r2,12(sp)
    d940:	00815d0e 	bge	zero,r2,deb8 <_dtoa_r+0x1064>
    d944:	d8c00117 	ldw	r3,4(sp)
    d948:	0023883a 	mov	r17,zero
    d94c:	1891883a 	add	r8,r3,r2
    d950:	b80b883a 	mov	r5,r23
    d954:	01800044 	movi	r6,1
    d958:	e009883a 	mov	r4,fp
    d95c:	da000315 	stw	r8,12(sp)
    d960:	00104c00 	call	104c0 <__lshift>
    d964:	a00b883a 	mov	r5,r20
    d968:	1009883a 	mov	r4,r2
    d96c:	102f883a 	mov	r23,r2
    d970:	00106480 	call	10648 <__mcmp>
    d974:	da000317 	ldw	r8,12(sp)
    d978:	0081540e 	bge	zero,r2,decc <_dtoa_r+0x1078>
    d97c:	413fffc3 	ldbu	r4,-1(r8)
    d980:	d9400117 	ldw	r5,4(sp)
    d984:	00000306 	br	d994 <_dtoa_r+0xb40>
    d988:	28c15a26 	beq	r5,r3,def4 <_dtoa_r+0x10a0>
    d98c:	193fffc3 	ldbu	r4,-1(r3)
    d990:	1811883a 	mov	r8,r3
    d994:	20803fcc 	andi	r2,r4,255
    d998:	1080201c 	xori	r2,r2,128
    d99c:	10bfe004 	addi	r2,r2,-128
    d9a0:	10800e60 	cmpeqi	r2,r2,57
    d9a4:	40ffffc4 	addi	r3,r8,-1
    d9a8:	103ff71e 	bne	r2,zero,d988 <_dtoa_r+0xb34>
    d9ac:	21000044 	addi	r4,r4,1
    d9b0:	19000005 	stb	r4,0(r3)
    d9b4:	a00b883a 	mov	r5,r20
    d9b8:	e009883a 	mov	r4,fp
    d9bc:	da000315 	stw	r8,12(sp)
    d9c0:	000fc380 	call	fc38 <_Bfree>
    d9c4:	da000317 	ldw	r8,12(sp)
    d9c8:	80000b26 	beq	r16,zero,d9f8 <_dtoa_r+0xba4>
    d9cc:	88000526 	beq	r17,zero,d9e4 <_dtoa_r+0xb90>
    d9d0:	8c000426 	beq	r17,r16,d9e4 <_dtoa_r+0xb90>
    d9d4:	880b883a 	mov	r5,r17
    d9d8:	e009883a 	mov	r4,fp
    d9dc:	000fc380 	call	fc38 <_Bfree>
    d9e0:	da000317 	ldw	r8,12(sp)
    d9e4:	800b883a 	mov	r5,r16
    d9e8:	e009883a 	mov	r4,fp
    d9ec:	da000315 	stw	r8,12(sp)
    d9f0:	000fc380 	call	fc38 <_Bfree>
    d9f4:	da000317 	ldw	r8,12(sp)
    d9f8:	b80b883a 	mov	r5,r23
    d9fc:	e009883a 	mov	r4,fp
    da00:	da000315 	stw	r8,12(sp)
    da04:	000fc380 	call	fc38 <_Bfree>
    da08:	da000317 	ldw	r8,12(sp)
    da0c:	d8801e17 	ldw	r2,120(sp)
    da10:	d8c00217 	ldw	r3,8(sp)
    da14:	40000005 	stb	zero,0(r8)
    da18:	10c00015 	stw	r3,0(r2)
    da1c:	d8802017 	ldw	r2,128(sp)
    da20:	103d3e26 	beq	r2,zero,cf1c <_dtoa_r+0xc8>
    da24:	12000015 	stw	r8,0(r2)
    da28:	003d3c06 	br	cf1c <_dtoa_r+0xc8>
    da2c:	d8000815 	stw	zero,32(sp)
    da30:	b0002316 	blt	r22,zero,dac0 <_dtoa_r+0xc6c>
    da34:	d8000415 	stw	zero,16(sp)
    da38:	d8c00217 	ldw	r3,8(sp)
    da3c:	dd400615 	stw	r21,24(sp)
    da40:	d8000715 	stw	zero,28(sp)
    da44:	188002a8 	cmpgeui	r2,r3,10
    da48:	b56d883a 	add	r22,r22,r21
    da4c:	103da726 	beq	r2,zero,d0ec <_dtoa_r+0x298>
    da50:	00800044 	movi	r2,1
    da54:	d8800515 	stw	r2,20(sp)
    da58:	00bfffc4 	movi	r2,-1
    da5c:	04000044 	movi	r16,1
    da60:	d8000215 	stw	zero,8(sp)
    da64:	d8800315 	stw	r2,12(sp)
    da68:	d8001d15 	stw	zero,116(sp)
    da6c:	d8800317 	ldw	r2,12(sp)
    da70:	e0001115 	stw	zero,68(fp)
    da74:	000b883a 	mov	r5,zero
    da78:	d8800b15 	stw	r2,44(sp)
    da7c:	003db806 	br	d160 <_dtoa_r+0x30c>
    da80:	188000e0 	cmpeqi	r2,r3,3
    da84:	d8000515 	stw	zero,20(sp)
    da88:	1002a526 	beq	r2,zero,e520 <_dtoa_r+0x16cc>
    da8c:	d8801d17 	ldw	r2,116(sp)
    da90:	d8c00617 	ldw	r3,24(sp)
    da94:	10c5883a 	add	r2,r2,r3
    da98:	d8800b15 	stw	r2,44(sp)
    da9c:	10800044 	addi	r2,r2,1
    daa0:	d8800315 	stw	r2,12(sp)
    daa4:	100d883a 	mov	r6,r2
    daa8:	00bda216 	blt	zero,r2,d134 <_dtoa_r+0x2e0>
    daac:	01800044 	movi	r6,1
    dab0:	003da006 	br	d134 <_dtoa_r+0x2e0>
    dab4:	00800044 	movi	r2,1
    dab8:	d8800815 	stw	r2,32(sp)
    dabc:	b03d7f0e 	bge	r22,zero,d0bc <_dtoa_r+0x268>
    dac0:	00800044 	movi	r2,1
    dac4:	1405c83a 	sub	r2,r2,r16
    dac8:	d8800415 	stw	r2,16(sp)
    dacc:	002d883a 	mov	r22,zero
    dad0:	003d7b06 	br	d0c0 <_dtoa_r+0x26c>
    dad4:	a809883a 	mov	r4,r21
    dad8:	0009a740 	call	9a74 <__floatsidf>
    dadc:	900d883a 	mov	r6,r18
    dae0:	b00f883a 	mov	r7,r22
    dae4:	1009883a 	mov	r4,r2
    dae8:	180b883a 	mov	r5,r3
    daec:	00086980 	call	8698 <__eqdf2>
    daf0:	103d6126 	beq	r2,zero,d078 <_dtoa_r+0x224>
    daf4:	ad7fffc4 	addi	r21,r21,-1
    daf8:	003d5f06 	br	d078 <_dtoa_r+0x224>
    dafc:	00800074 	movhi	r2,1
    db00:	109f7604 	addi	r2,r2,32216
    db04:	d8800115 	stw	r2,4(sp)
    db08:	003d0406 	br	cf1c <_dtoa_r+0xc8>
    db0c:	dd000717 	ldw	r20,28(sp)
    db10:	dc800417 	ldw	r18,16(sp)
    db14:	0021883a 	mov	r16,zero
    db18:	003f2c06 	br	d7cc <_dtoa_r+0x978>
    db1c:	b80b883a 	mov	r5,r23
    db20:	100d883a 	mov	r6,r2
    db24:	e009883a 	mov	r4,fp
    db28:	00104c00 	call	104c0 <__lshift>
    db2c:	102f883a 	mov	r23,r2
    db30:	003f6106 	br	d8b8 <_dtoa_r+0xa64>
    db34:	00800704 	movi	r2,28
    db38:	003f5806 	br	d89c <_dtoa_r+0xa48>
    db3c:	01000804 	movi	r4,32
    db40:	2089c83a 	sub	r4,r4,r2
    db44:	9908983a 	sll	r4,r19,r4
    db48:	003d1706 	br	cfa8 <_dtoa_r+0x154>
    db4c:	04000044 	movi	r16,1
    db50:	003d6b06 	br	d100 <_dtoa_r+0x2ac>
    db54:	100b883a 	mov	r5,r2
    db58:	a80d883a 	mov	r6,r21
    db5c:	e009883a 	mov	r4,fp
    db60:	00103780 	call	10378 <__pow5mult>
    db64:	d8c00217 	ldw	r3,8(sp)
    db68:	1029883a 	mov	r20,r2
    db6c:	18c00090 	cmplti	r3,r3,2
    db70:	18014b1e 	bne	r3,zero,e0a0 <_dtoa_r+0x124c>
    db74:	0023883a 	mov	r17,zero
    db78:	a0800417 	ldw	r2,16(r20)
    db7c:	10800104 	addi	r2,r2,4
    db80:	100490ba 	slli	r2,r2,2
    db84:	a085883a 	add	r2,r20,r2
    db88:	11000017 	ldw	r4,0(r2)
    db8c:	000fef00 	call	fef0 <__hi0bits>
    db90:	00c00804 	movi	r3,32
    db94:	1885c83a 	sub	r2,r3,r2
    db98:	003f3706 	br	d878 <_dtoa_r+0xa24>
    db9c:	800b883a 	mov	r5,r16
    dba0:	000f883a 	mov	r7,zero
    dba4:	01800284 	movi	r6,10
    dba8:	e009883a 	mov	r4,fp
    dbac:	000fc5c0 	call	fc5c <__multadd>
    dbb0:	1021883a 	mov	r16,r2
    dbb4:	d8800b17 	ldw	r2,44(sp)
    dbb8:	0082460e 	bge	zero,r2,e4d4 <_dtoa_r+0x1680>
    dbbc:	dd400615 	stw	r21,24(sp)
    dbc0:	d8800315 	stw	r2,12(sp)
    dbc4:	0480b016 	blt	zero,r18,de88 <_dtoa_r+0x1034>
    dbc8:	88016c1e 	bne	r17,zero,e17c <_dtoa_r+0x1328>
    dbcc:	8025883a 	mov	r18,r16
    dbd0:	dd800117 	ldw	r22,4(sp)
    dbd4:	d9000317 	ldw	r4,12(sp)
    dbd8:	98c0004c 	andi	r3,r19,1
    dbdc:	b0bfffc4 	addi	r2,r22,-1
    dbe0:	1105883a 	add	r2,r2,r4
    dbe4:	d8800515 	stw	r2,20(sp)
    dbe8:	d8800217 	ldw	r2,8(sp)
    dbec:	d8c00815 	stw	r3,32(sp)
    dbf0:	1884b03a 	or	r2,r3,r2
    dbf4:	d8800715 	stw	r2,28(sp)
    dbf8:	00002b06 	br	dca8 <_dtoa_r+0xe54>
    dbfc:	b809883a 	mov	r4,r23
    dc00:	d9400415 	stw	r5,16(sp)
    dc04:	00106480 	call	10648 <__mcmp>
    dc08:	d9400417 	ldw	r5,16(sp)
    dc0c:	e009883a 	mov	r4,fp
    dc10:	d8800315 	stw	r2,12(sp)
    dc14:	000fc380 	call	fc38 <_Bfree>
    dc18:	d8800317 	ldw	r2,12(sp)
    dc1c:	1000021e 	bne	r2,zero,dc28 <_dtoa_r+0xdd4>
    dc20:	d8c00717 	ldw	r3,28(sp)
    dc24:	18021d26 	beq	r3,zero,e49c <_dtoa_r+0x1648>
    dc28:	b2000044 	addi	r8,r22,1
    dc2c:	da000315 	stw	r8,12(sp)
    dc30:	88012116 	blt	r17,zero,e0b8 <_dtoa_r+0x1264>
    dc34:	d8c00217 	ldw	r3,8(sp)
    dc38:	88e2b03a 	or	r17,r17,r3
    dc3c:	d8c00817 	ldw	r3,32(sp)
    dc40:	1c62b03a 	or	r17,r3,r17
    dc44:	88011c26 	beq	r17,zero,e0b8 <_dtoa_r+0x1264>
    dc48:	00816616 	blt	zero,r2,e1e4 <_dtoa_r+0x1390>
    dc4c:	d8800517 	ldw	r2,20(sp)
    dc50:	b4c00005 	stb	r19,0(r22)
    dc54:	15816d26 	beq	r2,r22,e20c <_dtoa_r+0x13b8>
    dc58:	b80b883a 	mov	r5,r23
    dc5c:	000f883a 	mov	r7,zero
    dc60:	01800284 	movi	r6,10
    dc64:	e009883a 	mov	r4,fp
    dc68:	000fc5c0 	call	fc5c <__multadd>
    dc6c:	102f883a 	mov	r23,r2
    dc70:	800b883a 	mov	r5,r16
    dc74:	000f883a 	mov	r7,zero
    dc78:	01800284 	movi	r6,10
    dc7c:	e009883a 	mov	r4,fp
    dc80:	84801d26 	beq	r16,r18,dcf8 <_dtoa_r+0xea4>
    dc84:	000fc5c0 	call	fc5c <__multadd>
    dc88:	900b883a 	mov	r5,r18
    dc8c:	000f883a 	mov	r7,zero
    dc90:	01800284 	movi	r6,10
    dc94:	e009883a 	mov	r4,fp
    dc98:	1021883a 	mov	r16,r2
    dc9c:	000fc5c0 	call	fc5c <__multadd>
    dca0:	1025883a 	mov	r18,r2
    dca4:	dd800317 	ldw	r22,12(sp)
    dca8:	a00b883a 	mov	r5,r20
    dcac:	b809883a 	mov	r4,r23
    dcb0:	000cc340 	call	cc34 <quorem>
    dcb4:	800b883a 	mov	r5,r16
    dcb8:	b809883a 	mov	r4,r23
    dcbc:	102b883a 	mov	r21,r2
    dcc0:	00106480 	call	10648 <__mcmp>
    dcc4:	a00b883a 	mov	r5,r20
    dcc8:	900d883a 	mov	r6,r18
    dccc:	e009883a 	mov	r4,fp
    dcd0:	1023883a 	mov	r17,r2
    dcd4:	00106a00 	call	106a0 <__mdiff>
    dcd8:	100b883a 	mov	r5,r2
    dcdc:	10800317 	ldw	r2,12(r2)
    dce0:	acc00c04 	addi	r19,r21,48
    dce4:	103fc526 	beq	r2,zero,dbfc <_dtoa_r+0xda8>
    dce8:	e009883a 	mov	r4,fp
    dcec:	000fc380 	call	fc38 <_Bfree>
    dcf0:	00800044 	movi	r2,1
    dcf4:	003fcc06 	br	dc28 <_dtoa_r+0xdd4>
    dcf8:	000fc5c0 	call	fc5c <__multadd>
    dcfc:	1021883a 	mov	r16,r2
    dd00:	1025883a 	mov	r18,r2
    dd04:	003fe706 	br	dca4 <_dtoa_r+0xe50>
    dd08:	d8800217 	ldw	r2,8(sp)
    dd0c:	108000d0 	cmplti	r2,r2,3
    dd10:	10004026 	beq	r2,zero,de14 <_dtoa_r+0xfc0>
    dd14:	d8800517 	ldw	r2,20(sp)
    dd18:	103faa1e 	bne	r2,zero,dbc4 <_dtoa_r+0xd70>
    dd1c:	a00b883a 	mov	r5,r20
    dd20:	b809883a 	mov	r4,r23
    dd24:	000cc340 	call	cc34 <quorem>
    dd28:	14c00c04 	addi	r19,r2,48
    dd2c:	d8800117 	ldw	r2,4(sp)
    dd30:	0023883a 	mov	r17,zero
    dd34:	12000044 	addi	r8,r2,1
    dd38:	14c00005 	stb	r19,0(r2)
    dd3c:	d8800617 	ldw	r2,24(sp)
    dd40:	10800044 	addi	r2,r2,1
    dd44:	d8800215 	stw	r2,8(sp)
    dd48:	003f0106 	br	d950 <_dtoa_r+0xafc>
    dd4c:	a00b883a 	mov	r5,r20
    dd50:	b809883a 	mov	r4,r23
    dd54:	00106480 	call	10648 <__mcmp>
    dd58:	103edf0e 	bge	r2,zero,d8d8 <_dtoa_r+0xa84>
    dd5c:	b80b883a 	mov	r5,r23
    dd60:	000f883a 	mov	r7,zero
    dd64:	01800284 	movi	r6,10
    dd68:	e009883a 	mov	r4,fp
    dd6c:	000fc5c0 	call	fc5c <__multadd>
    dd70:	d8c00617 	ldw	r3,24(sp)
    dd74:	102f883a 	mov	r23,r2
    dd78:	d8800517 	ldw	r2,20(sp)
    dd7c:	1d7fffc4 	addi	r21,r3,-1
    dd80:	103f861e 	bne	r2,zero,db9c <_dtoa_r+0xd48>
    dd84:	d8800b17 	ldw	r2,44(sp)
    dd88:	0081cb0e 	bge	zero,r2,e4b8 <_dtoa_r+0x1664>
    dd8c:	d8c00617 	ldw	r3,24(sp)
    dd90:	d8800315 	stw	r2,12(sp)
    dd94:	d8c00215 	stw	r3,8(sp)
    dd98:	003ed606 	br	d8f4 <_dtoa_r+0xaa0>
    dd9c:	00800074 	movhi	r2,1
    dda0:	1007883a 	mov	r3,r2
    dda4:	18df7f04 	addi	r3,r3,32252
    dda8:	00800074 	movhi	r2,1
    ddac:	d8c00115 	stw	r3,4(sp)
    ddb0:	109f7fc4 	addi	r2,r2,32255
    ddb4:	003de506 	br	d54c <_dtoa_r+0x6f8>
    ddb8:	00800044 	movi	r2,1
    ddbc:	d8800515 	stw	r2,20(sp)
    ddc0:	003f3206 	br	da8c <_dtoa_r+0xc38>
    ddc4:	983ea91e 	bne	r19,zero,d86c <_dtoa_r+0xa18>
    ddc8:	00800434 	movhi	r2,16
    ddcc:	10bfffc4 	addi	r2,r2,-1
    ddd0:	8884703a 	and	r2,r17,r2
    ddd4:	103ea51e 	bne	r2,zero,d86c <_dtoa_r+0xa18>
    ddd8:	8c5ffc2c 	andhi	r17,r17,32752
    dddc:	883ea326 	beq	r17,zero,d86c <_dtoa_r+0xa18>
    dde0:	d8800417 	ldw	r2,16(sp)
    dde4:	b5800044 	addi	r22,r22,1
    dde8:	04400044 	movi	r17,1
    ddec:	10800044 	addi	r2,r2,1
    ddf0:	d8800415 	stw	r2,16(sp)
    ddf4:	003e9e06 	br	d870 <_dtoa_r+0xa1c>
    ddf8:	00800044 	movi	r2,1
    ddfc:	d8800315 	stw	r2,12(sp)
    de00:	d8801d15 	stw	r2,116(sp)
    de04:	003f1906 	br	da6c <_dtoa_r+0xc18>
    de08:	d8800b17 	ldw	r2,44(sp)
    de0c:	dd400615 	stw	r21,24(sp)
    de10:	d8800315 	stw	r2,12(sp)
    de14:	d8800317 	ldw	r2,12(sp)
    de18:	103e011e 	bne	r2,zero,d620 <_dtoa_r+0x7cc>
    de1c:	a00b883a 	mov	r5,r20
    de20:	e009883a 	mov	r4,fp
    de24:	000f883a 	mov	r7,zero
    de28:	01800144 	movi	r6,5
    de2c:	000fc5c0 	call	fc5c <__multadd>
    de30:	100b883a 	mov	r5,r2
    de34:	b809883a 	mov	r4,r23
    de38:	1029883a 	mov	r20,r2
    de3c:	00106480 	call	10648 <__mcmp>
    de40:	00bdf70e 	bge	zero,r2,d620 <_dtoa_r+0x7cc>
    de44:	d8c00117 	ldw	r3,4(sp)
    de48:	00800c44 	movi	r2,49
    de4c:	18800005 	stb	r2,0(r3)
    de50:	d8800617 	ldw	r2,24(sp)
    de54:	1a000044 	addi	r8,r3,1
    de58:	14c00044 	addi	r19,r2,1
    de5c:	a00b883a 	mov	r5,r20
    de60:	e009883a 	mov	r4,fp
    de64:	da000315 	stw	r8,12(sp)
    de68:	000fc380 	call	fc38 <_Bfree>
    de6c:	98800044 	addi	r2,r19,1
    de70:	d8800215 	stw	r2,8(sp)
    de74:	da000317 	ldw	r8,12(sp)
    de78:	803eda1e 	bne	r16,zero,d9e4 <_dtoa_r+0xb90>
    de7c:	003ede06 	br	d9f8 <_dtoa_r+0xba4>
    de80:	b005883a 	mov	r2,r22
    de84:	003e5506 	br	d7dc <_dtoa_r+0x988>
    de88:	800b883a 	mov	r5,r16
    de8c:	900d883a 	mov	r6,r18
    de90:	e009883a 	mov	r4,fp
    de94:	00104c00 	call	104c0 <__lshift>
    de98:	1021883a 	mov	r16,r2
    de9c:	003f4a06 	br	dbc8 <_dtoa_r+0xd74>
    dea0:	1529c83a 	sub	r20,r2,r20
    dea4:	003e3e06 	br	d7a0 <_dtoa_r+0x94c>
    dea8:	dcc00a15 	stw	r19,40(sp)
    deac:	dc400c15 	stw	r17,48(sp)
    deb0:	04000084 	movi	r16,2
    deb4:	003ccf06 	br	d1f4 <_dtoa_r+0x3a0>
    deb8:	00800044 	movi	r2,1
    debc:	003ea106 	br	d944 <_dtoa_r+0xaf0>
    dec0:	00800044 	movi	r2,1
    dec4:	d8800515 	stw	r2,20(sp)
    dec8:	003c9506 	br	d120 <_dtoa_r+0x2cc>
    decc:	1000021e 	bne	r2,zero,ded8 <_dtoa_r+0x1084>
    ded0:	98c0004c 	andi	r3,r19,1
    ded4:	183ea91e 	bne	r3,zero,d97c <_dtoa_r+0xb28>
    ded8:	40bfffc7 	ldb	r2,-1(r8)
    dedc:	4007883a 	mov	r3,r8
    dee0:	423fffc4 	addi	r8,r8,-1
    dee4:	10800c20 	cmpeqi	r2,r2,48
    dee8:	103ffb1e 	bne	r2,zero,ded8 <_dtoa_r+0x1084>
    deec:	1811883a 	mov	r8,r3
    def0:	003eb006 	br	d9b4 <_dtoa_r+0xb60>
    def4:	d8c00117 	ldw	r3,4(sp)
    def8:	00800c44 	movi	r2,49
    defc:	18800005 	stb	r2,0(r3)
    df00:	d8800217 	ldw	r2,8(sp)
    df04:	10800044 	addi	r2,r2,1
    df08:	d8800215 	stw	r2,8(sp)
    df0c:	003ea906 	br	d9b4 <_dtoa_r+0xb60>
    df10:	d8c00917 	ldw	r3,36(sp)
    df14:	18010e26 	beq	r3,zero,e350 <_dtoa_r+0x14fc>
    df18:	d8c00417 	ldw	r3,16(sp)
    df1c:	10810cc4 	addi	r2,r2,1075
    df20:	b0ad883a 	add	r22,r22,r2
    df24:	1885883a 	add	r2,r3,r2
    df28:	dd000717 	ldw	r20,28(sp)
    df2c:	1825883a 	mov	r18,r3
    df30:	d8800415 	stw	r2,16(sp)
    df34:	003e2106 	br	d7bc <_dtoa_r+0x968>
    df38:	8009883a 	mov	r4,r16
    df3c:	0009a740 	call	9a74 <__floatsidf>
    df40:	d9800a17 	ldw	r6,40(sp)
    df44:	900f883a 	mov	r7,r18
    df48:	1009883a 	mov	r4,r2
    df4c:	180b883a 	mov	r5,r3
    df50:	00088e80 	call	88e8 <__muldf3>
    df54:	000d883a 	mov	r6,zero
    df58:	01d00734 	movhi	r7,16412
    df5c:	1009883a 	mov	r4,r2
    df60:	180b883a 	mov	r5,r3
    df64:	00074940 	call	7494 <__adddf3>
    df68:	1029883a 	mov	r20,r2
    df6c:	00bf3034 	movhi	r2,64704
    df70:	1885883a 	add	r2,r3,r2
    df74:	d8800c15 	stw	r2,48(sp)
    df78:	d9000a17 	ldw	r4,40(sp)
    df7c:	900b883a 	mov	r5,r18
    df80:	000d883a 	mov	r6,zero
    df84:	01d00534 	movhi	r7,16404
    df88:	00090940 	call	9094 <__subdf3>
    df8c:	d9c00c17 	ldw	r7,48(sp)
    df90:	a00d883a 	mov	r6,r20
    df94:	1009883a 	mov	r4,r2
    df98:	180b883a 	mov	r5,r3
    df9c:	1025883a 	mov	r18,r2
    dfa0:	1821883a 	mov	r16,r3
    dfa4:	00087180 	call	8718 <__gedf2>
    dfa8:	00812b16 	blt	zero,r2,e458 <_dtoa_r+0x1604>
    dfac:	d8800c17 	ldw	r2,48(sp)
    dfb0:	a00d883a 	mov	r6,r20
    dfb4:	9009883a 	mov	r4,r18
    dfb8:	11e0003c 	xorhi	r7,r2,32768
    dfbc:	800b883a 	mov	r5,r16
    dfc0:	00088000 	call	8800 <__ledf2>
    dfc4:	103d780e 	bge	r2,zero,d5a8 <_dtoa_r+0x754>
    dfc8:	0029883a 	mov	r20,zero
    dfcc:	0021883a 	mov	r16,zero
    dfd0:	003d9306 	br	d620 <_dtoa_r+0x7cc>
    dfd4:	d9800717 	ldw	r6,28(sp)
    dfd8:	b80b883a 	mov	r5,r23
    dfdc:	e009883a 	mov	r4,fp
    dfe0:	00103780 	call	10378 <__pow5mult>
    dfe4:	102f883a 	mov	r23,r2
    dfe8:	003e1806 	br	d84c <_dtoa_r+0x9f8>
    dfec:	d8800617 	ldw	r2,24(sp)
    dff0:	1000e326 	beq	r2,zero,e380 <_dtoa_r+0x152c>
    dff4:	00a9c83a 	sub	r20,zero,r2
    dff8:	a08003cc 	andi	r2,r20,15
    dffc:	100690fa 	slli	r3,r2,3
    e000:	00800074 	movhi	r2,1
    e004:	109fbf04 	addi	r2,r2,32508
    e008:	10c5883a 	add	r2,r2,r3
    e00c:	11800017 	ldw	r6,0(r2)
    e010:	11c00117 	ldw	r7,4(r2)
    e014:	9809883a 	mov	r4,r19
    e018:	880b883a 	mov	r5,r17
    e01c:	a029d13a 	srai	r20,r20,4
    e020:	00088e80 	call	88e8 <__muldf3>
    e024:	d8800a15 	stw	r2,40(sp)
    e028:	1825883a 	mov	r18,r3
    e02c:	a0013126 	beq	r20,zero,e4f4 <_dtoa_r+0x16a0>
    e030:	02000074 	movhi	r8,1
    e034:	04000084 	movi	r16,2
    e038:	421fb504 	addi	r8,r8,32468
    e03c:	180b883a 	mov	r5,r3
    e040:	dc400c15 	stw	r17,48(sp)
    e044:	1009883a 	mov	r4,r2
    e048:	8023883a 	mov	r17,r16
    e04c:	0007883a 	mov	r3,zero
    e050:	4021883a 	mov	r16,r8
    e054:	a180004c 	andi	r6,r20,1
    e058:	30000726 	beq	r6,zero,e078 <_dtoa_r+0x1224>
    e05c:	81800017 	ldw	r6,0(r16)
    e060:	81c00117 	ldw	r7,4(r16)
    e064:	8c400044 	addi	r17,r17,1
    e068:	00088e80 	call	88e8 <__muldf3>
    e06c:	180b883a 	mov	r5,r3
    e070:	1009883a 	mov	r4,r2
    e074:	00c00044 	movi	r3,1
    e078:	a029d07a 	srai	r20,r20,1
    e07c:	84000204 	addi	r16,r16,8
    e080:	a03ff41e 	bne	r20,zero,e054 <_dtoa_r+0x1200>
    e084:	18c03fcc 	andi	r3,r3,255
    e088:	8821883a 	mov	r16,r17
    e08c:	dc400c17 	ldw	r17,48(sp)
    e090:	183c7126 	beq	r3,zero,d258 <_dtoa_r+0x404>
    e094:	d9000a15 	stw	r4,40(sp)
    e098:	2825883a 	mov	r18,r5
    e09c:	003c6e06 	br	d258 <_dtoa_r+0x404>
    e0a0:	983eb41e 	bne	r19,zero,db74 <_dtoa_r+0xd20>
    e0a4:	00800434 	movhi	r2,16
    e0a8:	10bfffc4 	addi	r2,r2,-1
    e0ac:	8884703a 	and	r2,r17,r2
    e0b0:	103f4926 	beq	r2,zero,ddd8 <_dtoa_r+0xf84>
    e0b4:	003eaf06 	br	db74 <_dtoa_r+0xd20>
    e0b8:	00800e0e 	bge	zero,r2,e0f4 <_dtoa_r+0x12a0>
    e0bc:	b80b883a 	mov	r5,r23
    e0c0:	01800044 	movi	r6,1
    e0c4:	e009883a 	mov	r4,fp
    e0c8:	da000215 	stw	r8,8(sp)
    e0cc:	00104c00 	call	104c0 <__lshift>
    e0d0:	a00b883a 	mov	r5,r20
    e0d4:	1009883a 	mov	r4,r2
    e0d8:	102f883a 	mov	r23,r2
    e0dc:	00106480 	call	10648 <__mcmp>
    e0e0:	da000217 	ldw	r8,8(sp)
    e0e4:	0080e30e 	bge	zero,r2,e474 <_dtoa_r+0x1620>
    e0e8:	98c00e60 	cmpeqi	r3,r19,57
    e0ec:	1800cf1e 	bne	r3,zero,e42c <_dtoa_r+0x15d8>
    e0f0:	acc00c44 	addi	r19,r21,49
    e0f4:	8023883a 	mov	r17,r16
    e0f8:	d8800617 	ldw	r2,24(sp)
    e0fc:	b4c00005 	stb	r19,0(r22)
    e100:	9021883a 	mov	r16,r18
    e104:	10800044 	addi	r2,r2,1
    e108:	d8800215 	stw	r2,8(sp)
    e10c:	003e2906 	br	d9b4 <_dtoa_r+0xb60>
    e110:	b82b883a 	mov	r21,r23
    e114:	ddc00217 	ldw	r23,8(sp)
    e118:	200d883a 	mov	r6,r4
    e11c:	280f883a 	mov	r7,r5
    e120:	00074940 	call	7494 <__adddf3>
    e124:	102d883a 	mov	r22,r2
    e128:	1009883a 	mov	r4,r2
    e12c:	d8800617 	ldw	r2,24(sp)
    e130:	800d883a 	mov	r6,r16
    e134:	900f883a 	mov	r7,r18
    e138:	10800044 	addi	r2,r2,1
    e13c:	180b883a 	mov	r5,r3
    e140:	1823883a 	mov	r17,r3
    e144:	1027883a 	mov	r19,r2
    e148:	d8800215 	stw	r2,8(sp)
    e14c:	00087180 	call	8718 <__gedf2>
    e150:	00808916 	blt	zero,r2,e378 <_dtoa_r+0x1524>
    e154:	800d883a 	mov	r6,r16
    e158:	900f883a 	mov	r7,r18
    e15c:	b009883a 	mov	r4,r22
    e160:	880b883a 	mov	r5,r17
    e164:	00086980 	call	8698 <__eqdf2>
    e168:	1000021e 	bne	r2,zero,e174 <_dtoa_r+0x1320>
    e16c:	ad40004c 	andi	r21,r21,1
    e170:	a800811e 	bne	r21,zero,e378 <_dtoa_r+0x1524>
    e174:	a011883a 	mov	r8,r20
    e178:	003e1f06 	br	d9f8 <_dtoa_r+0xba4>
    e17c:	81400117 	ldw	r5,4(r16)
    e180:	e009883a 	mov	r4,fp
    e184:	000fb940 	call	fb94 <_Balloc>
    e188:	1023883a 	mov	r17,r2
    e18c:	1000f326 	beq	r2,zero,e55c <_dtoa_r+0x1708>
    e190:	81800417 	ldw	r6,16(r16)
    e194:	81400304 	addi	r5,r16,12
    e198:	11000304 	addi	r4,r2,12
    e19c:	31800084 	addi	r6,r6,2
    e1a0:	300c90ba 	slli	r6,r6,2
    e1a4:	000a6880 	call	a688 <memcpy>
    e1a8:	01800044 	movi	r6,1
    e1ac:	880b883a 	mov	r5,r17
    e1b0:	e009883a 	mov	r4,fp
    e1b4:	00104c00 	call	104c0 <__lshift>
    e1b8:	1025883a 	mov	r18,r2
    e1bc:	003e8406 	br	dbd0 <_dtoa_r+0xd7c>
    e1c0:	b80b883a 	mov	r5,r23
    e1c4:	e009883a 	mov	r4,fp
    e1c8:	00103780 	call	10378 <__pow5mult>
    e1cc:	102f883a 	mov	r23,r2
    e1d0:	003d9e06 	br	d84c <_dtoa_r+0x9f8>
    e1d4:	d8800417 	ldw	r2,16(sp)
    e1d8:	d8c00317 	ldw	r3,12(sp)
    e1dc:	10e5c83a 	sub	r18,r2,r3
    e1e0:	003d7606 	br	d7bc <_dtoa_r+0x968>
    e1e4:	98800e58 	cmpnei	r2,r19,57
    e1e8:	10009026 	beq	r2,zero,e42c <_dtoa_r+0x15d8>
    e1ec:	d8800617 	ldw	r2,24(sp)
    e1f0:	98c00044 	addi	r3,r19,1
    e1f4:	8023883a 	mov	r17,r16
    e1f8:	10800044 	addi	r2,r2,1
    e1fc:	d8800215 	stw	r2,8(sp)
    e200:	b0c00005 	stb	r3,0(r22)
    e204:	9021883a 	mov	r16,r18
    e208:	003dea06 	br	d9b4 <_dtoa_r+0xb60>
    e20c:	d8800617 	ldw	r2,24(sp)
    e210:	8023883a 	mov	r17,r16
    e214:	9021883a 	mov	r16,r18
    e218:	10800044 	addi	r2,r2,1
    e21c:	d8800215 	stw	r2,8(sp)
    e220:	003dcb06 	br	d950 <_dtoa_r+0xafc>
    e224:	d9400c17 	ldw	r5,48(sp)
    e228:	a009883a 	mov	r4,r20
    e22c:	00088e80 	call	88e8 <__muldf3>
    e230:	d9400117 	ldw	r5,4(sp)
    e234:	d9000f17 	ldw	r4,60(sp)
    e238:	d9800d17 	ldw	r6,52(sp)
    e23c:	d8800a15 	stw	r2,40(sp)
    e240:	29000005 	stb	r4,0(r5)
    e244:	d8c00c15 	stw	r3,48(sp)
    e248:	31000058 	cmpnei	r4,r6,1
    e24c:	da000e17 	ldw	r8,56(sp)
    e250:	29a9883a 	add	r20,r5,r6
    e254:	20009d26 	beq	r4,zero,e4cc <_dtoa_r+0x1678>
    e258:	dc400d15 	stw	r17,52(sp)
    e25c:	8009883a 	mov	r4,r16
    e260:	900b883a 	mov	r5,r18
    e264:	4023883a 	mov	r17,r8
    e268:	dcc00e15 	stw	r19,56(sp)
    e26c:	000d883a 	mov	r6,zero
    e270:	01d00934 	movhi	r7,16420
    e274:	00088e80 	call	88e8 <__muldf3>
    e278:	180b883a 	mov	r5,r3
    e27c:	1009883a 	mov	r4,r2
    e280:	1825883a 	mov	r18,r3
    e284:	1027883a 	mov	r19,r2
    e288:	00099f40 	call	99f4 <__fixdfsi>
    e28c:	1009883a 	mov	r4,r2
    e290:	1021883a 	mov	r16,r2
    e294:	0009a740 	call	9a74 <__floatsidf>
    e298:	9809883a 	mov	r4,r19
    e29c:	900b883a 	mov	r5,r18
    e2a0:	100d883a 	mov	r6,r2
    e2a4:	180f883a 	mov	r7,r3
    e2a8:	8c400044 	addi	r17,r17,1
    e2ac:	84000c04 	addi	r16,r16,48
    e2b0:	00090940 	call	9094 <__subdf3>
    e2b4:	8c3fffc5 	stb	r16,-1(r17)
    e2b8:	1009883a 	mov	r4,r2
    e2bc:	180b883a 	mov	r5,r3
    e2c0:	a47fea1e 	bne	r20,r17,e26c <_dtoa_r+0x1418>
    e2c4:	dc400d17 	ldw	r17,52(sp)
    e2c8:	dcc00e17 	ldw	r19,56(sp)
    e2cc:	1021883a 	mov	r16,r2
    e2d0:	1825883a 	mov	r18,r3
    e2d4:	d9000a17 	ldw	r4,40(sp)
    e2d8:	d9400c17 	ldw	r5,48(sp)
    e2dc:	000d883a 	mov	r6,zero
    e2e0:	01cff834 	movhi	r7,16352
    e2e4:	00074940 	call	7494 <__adddf3>
    e2e8:	800d883a 	mov	r6,r16
    e2ec:	900f883a 	mov	r7,r18
    e2f0:	1009883a 	mov	r4,r2
    e2f4:	180b883a 	mov	r5,r3
    e2f8:	00088000 	call	8800 <__ledf2>
    e2fc:	10005916 	blt	r2,zero,e464 <_dtoa_r+0x1610>
    e300:	d9800a17 	ldw	r6,40(sp)
    e304:	d9c00c17 	ldw	r7,48(sp)
    e308:	0009883a 	mov	r4,zero
    e30c:	014ff834 	movhi	r5,16352
    e310:	00090940 	call	9094 <__subdf3>
    e314:	800d883a 	mov	r6,r16
    e318:	900f883a 	mov	r7,r18
    e31c:	1009883a 	mov	r4,r2
    e320:	180b883a 	mov	r5,r3
    e324:	00087180 	call	8718 <__gedf2>
    e328:	00bc9f0e 	bge	zero,r2,d5a8 <_dtoa_r+0x754>
    e32c:	a0bfffc7 	ldb	r2,-1(r20)
    e330:	a011883a 	mov	r8,r20
    e334:	a53fffc4 	addi	r20,r20,-1
    e338:	10800c20 	cmpeqi	r2,r2,48
    e33c:	103ffb1e 	bne	r2,zero,e32c <_dtoa_r+0x14d8>
    e340:	d8801017 	ldw	r2,64(sp)
    e344:	10800044 	addi	r2,r2,1
    e348:	d8800215 	stw	r2,8(sp)
    e34c:	003daa06 	br	d9f8 <_dtoa_r+0xba4>
    e350:	d8c01117 	ldw	r3,68(sp)
    e354:	d9000417 	ldw	r4,16(sp)
    e358:	00800d84 	movi	r2,54
    e35c:	10c5c83a 	sub	r2,r2,r3
    e360:	b0ad883a 	add	r22,r22,r2
    e364:	2085883a 	add	r2,r4,r2
    e368:	dd000717 	ldw	r20,28(sp)
    e36c:	2025883a 	mov	r18,r4
    e370:	d8800415 	stw	r2,16(sp)
    e374:	003d1106 	br	d7bc <_dtoa_r+0x968>
    e378:	d9000117 	ldw	r4,4(sp)
    e37c:	003c4e06 	br	d4b8 <_dtoa_r+0x664>
    e380:	dcc00a15 	stw	r19,40(sp)
    e384:	8825883a 	mov	r18,r17
    e388:	04000084 	movi	r16,2
    e38c:	003bb206 	br	d258 <_dtoa_r+0x404>
    e390:	d8800317 	ldw	r2,12(sp)
    e394:	103ee826 	beq	r2,zero,df38 <_dtoa_r+0x10e4>
    e398:	d8800b17 	ldw	r2,44(sp)
    e39c:	00bc820e 	bge	zero,r2,d5a8 <_dtoa_r+0x754>
    e3a0:	900b883a 	mov	r5,r18
    e3a4:	a009883a 	mov	r4,r20
    e3a8:	000d883a 	mov	r6,zero
    e3ac:	01d00934 	movhi	r7,16420
    e3b0:	00088e80 	call	88e8 <__muldf3>
    e3b4:	81000044 	addi	r4,r16,1
    e3b8:	1029883a 	mov	r20,r2
    e3bc:	1825883a 	mov	r18,r3
    e3c0:	d8800a15 	stw	r2,40(sp)
    e3c4:	0009a740 	call	9a74 <__floatsidf>
    e3c8:	a00d883a 	mov	r6,r20
    e3cc:	900f883a 	mov	r7,r18
    e3d0:	1009883a 	mov	r4,r2
    e3d4:	180b883a 	mov	r5,r3
    e3d8:	00088e80 	call	88e8 <__muldf3>
    e3dc:	1009883a 	mov	r4,r2
    e3e0:	000d883a 	mov	r6,zero
    e3e4:	01d00734 	movhi	r7,16412
    e3e8:	180b883a 	mov	r5,r3
    e3ec:	00074940 	call	7494 <__adddf3>
    e3f0:	d9000617 	ldw	r4,24(sp)
    e3f4:	1029883a 	mov	r20,r2
    e3f8:	00bf3034 	movhi	r2,64704
    e3fc:	1887883a 	add	r3,r3,r2
    e400:	d8800b17 	ldw	r2,44(sp)
    e404:	213fffc4 	addi	r4,r4,-1
    e408:	d9001015 	stw	r4,64(sp)
    e40c:	d8c00c15 	stw	r3,48(sp)
    e410:	d8800d15 	stw	r2,52(sp)
    e414:	003baf06 	br	d2d4 <_dtoa_r+0x480>
    e418:	00c00c44 	movi	r3,49
    e41c:	9cc00044 	addi	r19,r19,1
    e420:	003c2e06 	br	d4dc <_dtoa_r+0x688>
    e424:	b0800044 	addi	r2,r22,1
    e428:	d8800315 	stw	r2,12(sp)
    e42c:	00800e44 	movi	r2,57
    e430:	b0800005 	stb	r2,0(r22)
    e434:	d8800617 	ldw	r2,24(sp)
    e438:	8023883a 	mov	r17,r16
    e43c:	da000317 	ldw	r8,12(sp)
    e440:	10800044 	addi	r2,r2,1
    e444:	d9400117 	ldw	r5,4(sp)
    e448:	d8800215 	stw	r2,8(sp)
    e44c:	9021883a 	mov	r16,r18
    e450:	01000e44 	movi	r4,57
    e454:	003d4f06 	br	d994 <_dtoa_r+0xb40>
    e458:	0029883a 	mov	r20,zero
    e45c:	0021883a 	mov	r16,zero
    e460:	003e7806 	br	de44 <_dtoa_r+0xff0>
    e464:	d8801017 	ldw	r2,64(sp)
    e468:	d9000117 	ldw	r4,4(sp)
    e46c:	14c00044 	addi	r19,r2,1
    e470:	003c1106 	br	d4b8 <_dtoa_r+0x664>
    e474:	103f1f1e 	bne	r2,zero,e0f4 <_dtoa_r+0x12a0>
    e478:	9880004c 	andi	r2,r19,1
    e47c:	103f1a1e 	bne	r2,zero,e0e8 <_dtoa_r+0x1294>
    e480:	003f1c06 	br	e0f4 <_dtoa_r+0x12a0>
    e484:	d8801017 	ldw	r2,64(sp)
    e488:	ddc00c17 	ldw	r23,48(sp)
    e48c:	a811883a 	mov	r8,r21
    e490:	10800044 	addi	r2,r2,1
    e494:	d8800215 	stw	r2,8(sp)
    e498:	003d5706 	br	d9f8 <_dtoa_r+0xba4>
    e49c:	98800e60 	cmpeqi	r2,r19,57
    e4a0:	103fe01e 	bne	r2,zero,e424 <_dtoa_r+0x15d0>
    e4a4:	0440010e 	bge	zero,r17,e4ac <_dtoa_r+0x1658>
    e4a8:	acc00c44 	addi	r19,r21,49
    e4ac:	8023883a 	mov	r17,r16
    e4b0:	b2000044 	addi	r8,r22,1
    e4b4:	003f1006 	br	e0f8 <_dtoa_r+0x12a4>
    e4b8:	d8800217 	ldw	r2,8(sp)
    e4bc:	108000c8 	cmpgei	r2,r2,3
    e4c0:	103e511e 	bne	r2,zero,de08 <_dtoa_r+0xfb4>
    e4c4:	dd400615 	stw	r21,24(sp)
    e4c8:	003e1406 	br	dd1c <_dtoa_r+0xec8>
    e4cc:	4029883a 	mov	r20,r8
    e4d0:	003f8006 	br	e2d4 <_dtoa_r+0x1480>
    e4d4:	d8800217 	ldw	r2,8(sp)
    e4d8:	108000c8 	cmpgei	r2,r2,3
    e4dc:	103e4a1e 	bne	r2,zero,de08 <_dtoa_r+0xfb4>
    e4e0:	d8800b17 	ldw	r2,44(sp)
    e4e4:	dd400615 	stw	r21,24(sp)
    e4e8:	d8800315 	stw	r2,12(sp)
    e4ec:	04bdb60e 	bge	zero,r18,dbc8 <_dtoa_r+0xd74>
    e4f0:	003e6506 	br	de88 <_dtoa_r+0x1034>
    e4f4:	04000084 	movi	r16,2
    e4f8:	003b5706 	br	d258 <_dtoa_r+0x404>
    e4fc:	01c00074 	movhi	r7,1
    e500:	01000074 	movhi	r4,1
    e504:	39df8304 	addi	r7,r7,32268
    e508:	000d883a 	mov	r6,zero
    e50c:	01406a84 	movi	r5,426
    e510:	211f8804 	addi	r4,r4,32288
    e514:	0012c100 	call	12c10 <__assert_func>
    e518:	000b883a 	mov	r5,zero
    e51c:	003b1006 	br	d160 <_dtoa_r+0x30c>
    e520:	e0001115 	stw	zero,68(fp)
    e524:	000b883a 	mov	r5,zero
    e528:	e009883a 	mov	r4,fp
    e52c:	000fb940 	call	fb94 <_Balloc>
    e530:	d8800115 	stw	r2,4(sp)
    e534:	103ff126 	beq	r2,zero,e4fc <_dtoa_r+0x16a8>
    e538:	d8800117 	ldw	r2,4(sp)
    e53c:	d8001d15 	stw	zero,116(sp)
    e540:	e0801015 	stw	r2,64(fp)
    e544:	00bfffc4 	movi	r2,-1
    e548:	d8800315 	stw	r2,12(sp)
    e54c:	d8800b15 	stw	r2,44(sp)
    e550:	00800044 	movi	r2,1
    e554:	d8800515 	stw	r2,20(sp)
    e558:	003c1306 	br	d5a8 <_dtoa_r+0x754>
    e55c:	01c00074 	movhi	r7,1
    e560:	01000074 	movhi	r4,1
    e564:	39df8304 	addi	r7,r7,32268
    e568:	000d883a 	mov	r6,zero
    e56c:	0140ba84 	movi	r5,746
    e570:	211f8804 	addi	r4,r4,32288
    e574:	0012c100 	call	12c10 <__assert_func>
    e578:	00800074 	movhi	r2,1
    e57c:	109f8004 	addi	r2,r2,32256
    e580:	d8800115 	stw	r2,4(sp)
    e584:	003a6506 	br	cf1c <_dtoa_r+0xc8>
    e588:	18c00120 	cmpeqi	r3,r3,4
    e58c:	183cc81e 	bne	r3,zero,d8b0 <_dtoa_r+0xa5c>
    e590:	00c00f04 	movi	r3,60
    e594:	1885c83a 	sub	r2,r3,r2
    e598:	003cc006 	br	d89c <_dtoa_r+0xa48>

0000e59c <__sflush_r>:
    e59c:	2880030b 	ldhu	r2,12(r5)
    e5a0:	defffb04 	addi	sp,sp,-20
    e5a4:	dcc00315 	stw	r19,12(sp)
    e5a8:	dc000015 	stw	r16,0(sp)
    e5ac:	dfc00415 	stw	ra,16(sp)
    e5b0:	dc800215 	stw	r18,8(sp)
    e5b4:	dc400115 	stw	r17,4(sp)
    e5b8:	10c0020c 	andi	r3,r2,8
    e5bc:	2821883a 	mov	r16,r5
    e5c0:	2027883a 	mov	r19,r4
    e5c4:	18003f1e 	bne	r3,zero,e6c4 <__sflush_r+0x128>
    e5c8:	28c00117 	ldw	r3,4(r5)
    e5cc:	10820014 	ori	r2,r2,2048
    e5d0:	2880030d 	sth	r2,12(r5)
    e5d4:	00c0550e 	bge	zero,r3,e72c <__sflush_r+0x190>
    e5d8:	82000a17 	ldw	r8,40(r16)
    e5dc:	40003126 	beq	r8,zero,e6a4 <__sflush_r+0x108>
    e5e0:	9c400017 	ldw	r17,0(r19)
    e5e4:	1104000c 	andi	r4,r2,4096
    e5e8:	98000015 	stw	zero,0(r19)
    e5ec:	1007883a 	mov	r3,r2
    e5f0:	2000531e 	bne	r4,zero,e740 <__sflush_r+0x1a4>
    e5f4:	81400717 	ldw	r5,28(r16)
    e5f8:	01c00044 	movi	r7,1
    e5fc:	000d883a 	mov	r6,zero
    e600:	9809883a 	mov	r4,r19
    e604:	403ee83a 	callr	r8
    e608:	10ffffd8 	cmpnei	r3,r2,-1
    e60c:	18005826 	beq	r3,zero,e770 <__sflush_r+0x1d4>
    e610:	80c0030b 	ldhu	r3,12(r16)
    e614:	82000a17 	ldw	r8,40(r16)
    e618:	18c0010c 	andi	r3,r3,4
    e61c:	18000626 	beq	r3,zero,e638 <__sflush_r+0x9c>
    e620:	81000117 	ldw	r4,4(r16)
    e624:	80c00c17 	ldw	r3,48(r16)
    e628:	1105c83a 	sub	r2,r2,r4
    e62c:	18000226 	beq	r3,zero,e638 <__sflush_r+0x9c>
    e630:	80c00f17 	ldw	r3,60(r16)
    e634:	10c5c83a 	sub	r2,r2,r3
    e638:	81400717 	ldw	r5,28(r16)
    e63c:	100d883a 	mov	r6,r2
    e640:	000f883a 	mov	r7,zero
    e644:	9809883a 	mov	r4,r19
    e648:	403ee83a 	callr	r8
    e64c:	10ffffd8 	cmpnei	r3,r2,-1
    e650:	18003d1e 	bne	r3,zero,e748 <__sflush_r+0x1ac>
    e654:	99000017 	ldw	r4,0(r19)
    e658:	80c0030b 	ldhu	r3,12(r16)
    e65c:	20004e26 	beq	r4,zero,e798 <__sflush_r+0x1fc>
    e660:	21400760 	cmpeqi	r5,r4,29
    e664:	2800021e 	bne	r5,zero,e670 <__sflush_r+0xd4>
    e668:	210005a0 	cmpeqi	r4,r4,22
    e66c:	20002c26 	beq	r4,zero,e720 <__sflush_r+0x184>
    e670:	80800417 	ldw	r2,16(r16)
    e674:	18fdffcc 	andi	r3,r3,63487
    e678:	80c0030d 	sth	r3,12(r16)
    e67c:	80000115 	stw	zero,4(r16)
    e680:	80800015 	stw	r2,0(r16)
    e684:	81400c17 	ldw	r5,48(r16)
    e688:	9c400015 	stw	r17,0(r19)
    e68c:	28000526 	beq	r5,zero,e6a4 <__sflush_r+0x108>
    e690:	80801004 	addi	r2,r16,64
    e694:	28800226 	beq	r5,r2,e6a0 <__sflush_r+0x104>
    e698:	9809883a 	mov	r4,r19
    e69c:	000ed700 	call	ed70 <_free_r>
    e6a0:	80000c15 	stw	zero,48(r16)
    e6a4:	0005883a 	mov	r2,zero
    e6a8:	dfc00417 	ldw	ra,16(sp)
    e6ac:	dcc00317 	ldw	r19,12(sp)
    e6b0:	dc800217 	ldw	r18,8(sp)
    e6b4:	dc400117 	ldw	r17,4(sp)
    e6b8:	dc000017 	ldw	r16,0(sp)
    e6bc:	dec00504 	addi	sp,sp,20
    e6c0:	f800283a 	ret
    e6c4:	2c800417 	ldw	r18,16(r5)
    e6c8:	903ff626 	beq	r18,zero,e6a4 <__sflush_r+0x108>
    e6cc:	2c400017 	ldw	r17,0(r5)
    e6d0:	108000cc 	andi	r2,r2,3
    e6d4:	2c800015 	stw	r18,0(r5)
    e6d8:	8ca3c83a 	sub	r17,r17,r18
    e6dc:	1000161e 	bne	r2,zero,e738 <__sflush_r+0x19c>
    e6e0:	28800517 	ldw	r2,20(r5)
    e6e4:	80800215 	stw	r2,8(r16)
    e6e8:	04400316 	blt	zero,r17,e6f8 <__sflush_r+0x15c>
    e6ec:	003fed06 	br	e6a4 <__sflush_r+0x108>
    e6f0:	90a5883a 	add	r18,r18,r2
    e6f4:	047feb0e 	bge	zero,r17,e6a4 <__sflush_r+0x108>
    e6f8:	80800917 	ldw	r2,36(r16)
    e6fc:	81400717 	ldw	r5,28(r16)
    e700:	880f883a 	mov	r7,r17
    e704:	900d883a 	mov	r6,r18
    e708:	9809883a 	mov	r4,r19
    e70c:	103ee83a 	callr	r2
    e710:	88a3c83a 	sub	r17,r17,r2
    e714:	00bff616 	blt	zero,r2,e6f0 <__sflush_r+0x154>
    e718:	80c0030b 	ldhu	r3,12(r16)
    e71c:	00bfffc4 	movi	r2,-1
    e720:	18c01014 	ori	r3,r3,64
    e724:	80c0030d 	sth	r3,12(r16)
    e728:	003fdf06 	br	e6a8 <__sflush_r+0x10c>
    e72c:	28c00f17 	ldw	r3,60(r5)
    e730:	00ffa916 	blt	zero,r3,e5d8 <__sflush_r+0x3c>
    e734:	003fdb06 	br	e6a4 <__sflush_r+0x108>
    e738:	0005883a 	mov	r2,zero
    e73c:	003fe906 	br	e6e4 <__sflush_r+0x148>
    e740:	80801417 	ldw	r2,80(r16)
    e744:	003fb406 	br	e618 <__sflush_r+0x7c>
    e748:	80c0030b 	ldhu	r3,12(r16)
    e74c:	81000417 	ldw	r4,16(r16)
    e750:	80000115 	stw	zero,4(r16)
    e754:	197dffcc 	andi	r5,r3,63487
    e758:	8140030d 	sth	r5,12(r16)
    e75c:	81000015 	stw	r4,0(r16)
    e760:	18c4000c 	andi	r3,r3,4096
    e764:	183fc726 	beq	r3,zero,e684 <__sflush_r+0xe8>
    e768:	80801415 	stw	r2,80(r16)
    e76c:	003fc506 	br	e684 <__sflush_r+0xe8>
    e770:	98c00017 	ldw	r3,0(r19)
    e774:	183fa626 	beq	r3,zero,e610 <__sflush_r+0x74>
    e778:	19000760 	cmpeqi	r4,r3,29
    e77c:	20000e1e 	bne	r4,zero,e7b8 <__sflush_r+0x21c>
    e780:	18c00598 	cmpnei	r3,r3,22
    e784:	18000c26 	beq	r3,zero,e7b8 <__sflush_r+0x21c>
    e788:	80c0030b 	ldhu	r3,12(r16)
    e78c:	18c01014 	ori	r3,r3,64
    e790:	80c0030d 	sth	r3,12(r16)
    e794:	003fc406 	br	e6a8 <__sflush_r+0x10c>
    e798:	81000417 	ldw	r4,16(r16)
    e79c:	197dffcc 	andi	r5,r3,63487
    e7a0:	8140030d 	sth	r5,12(r16)
    e7a4:	80000115 	stw	zero,4(r16)
    e7a8:	81000015 	stw	r4,0(r16)
    e7ac:	18c4000c 	andi	r3,r3,4096
    e7b0:	183fb426 	beq	r3,zero,e684 <__sflush_r+0xe8>
    e7b4:	003fec06 	br	e768 <__sflush_r+0x1cc>
    e7b8:	9c400015 	stw	r17,0(r19)
    e7bc:	0005883a 	mov	r2,zero
    e7c0:	003fb906 	br	e6a8 <__sflush_r+0x10c>

0000e7c4 <_fflush_r>:
    e7c4:	defffd04 	addi	sp,sp,-12
    e7c8:	dc000115 	stw	r16,4(sp)
    e7cc:	dfc00215 	stw	ra,8(sp)
    e7d0:	2021883a 	mov	r16,r4
    e7d4:	20000226 	beq	r4,zero,e7e0 <_fflush_r+0x1c>
    e7d8:	20800e17 	ldw	r2,56(r4)
    e7dc:	10000726 	beq	r2,zero,e7fc <_fflush_r+0x38>
    e7e0:	2880030f 	ldh	r2,12(r5)
    e7e4:	10000a1e 	bne	r2,zero,e810 <_fflush_r+0x4c>
    e7e8:	0005883a 	mov	r2,zero
    e7ec:	dfc00217 	ldw	ra,8(sp)
    e7f0:	dc000117 	ldw	r16,4(sp)
    e7f4:	dec00304 	addi	sp,sp,12
    e7f8:	f800283a 	ret
    e7fc:	d9400015 	stw	r5,0(sp)
    e800:	000ec0c0 	call	ec0c <__sinit>
    e804:	d9400017 	ldw	r5,0(sp)
    e808:	2880030f 	ldh	r2,12(r5)
    e80c:	103ff626 	beq	r2,zero,e7e8 <_fflush_r+0x24>
    e810:	8009883a 	mov	r4,r16
    e814:	dfc00217 	ldw	ra,8(sp)
    e818:	dc000117 	ldw	r16,4(sp)
    e81c:	dec00304 	addi	sp,sp,12
    e820:	000e59c1 	jmpi	e59c <__sflush_r>

0000e824 <fflush>:
    e824:	20001726 	beq	r4,zero,e884 <fflush+0x60>
    e828:	008000b4 	movhi	r2,2
    e82c:	200b883a 	mov	r5,r4
    e830:	1127e517 	ldw	r4,-24684(r2)
    e834:	20000226 	beq	r4,zero,e840 <fflush+0x1c>
    e838:	20800e17 	ldw	r2,56(r4)
    e83c:	10000526 	beq	r2,zero,e854 <fflush+0x30>
    e840:	2880030f 	ldh	r2,12(r5)
    e844:	1000021e 	bne	r2,zero,e850 <fflush+0x2c>
    e848:	0005883a 	mov	r2,zero
    e84c:	f800283a 	ret
    e850:	000e59c1 	jmpi	e59c <__sflush_r>
    e854:	defffd04 	addi	sp,sp,-12
    e858:	d9400115 	stw	r5,4(sp)
    e85c:	d9000015 	stw	r4,0(sp)
    e860:	dfc00215 	stw	ra,8(sp)
    e864:	000ec0c0 	call	ec0c <__sinit>
    e868:	d9400117 	ldw	r5,4(sp)
    e86c:	d9000017 	ldw	r4,0(sp)
    e870:	2880030f 	ldh	r2,12(r5)
    e874:	10000826 	beq	r2,zero,e898 <fflush+0x74>
    e878:	dfc00217 	ldw	ra,8(sp)
    e87c:	dec00304 	addi	sp,sp,12
    e880:	000e59c1 	jmpi	e59c <__sflush_r>
    e884:	008000b4 	movhi	r2,2
    e888:	1127e417 	ldw	r4,-24688(r2)
    e88c:	01400074 	movhi	r5,1
    e890:	2979f104 	addi	r5,r5,-6204
    e894:	000f5981 	jmpi	f598 <_fwalk_reent>
    e898:	0005883a 	mov	r2,zero
    e89c:	dfc00217 	ldw	ra,8(sp)
    e8a0:	dec00304 	addi	sp,sp,12
    e8a4:	f800283a 	ret

0000e8a8 <__fp_lock>:
    e8a8:	0005883a 	mov	r2,zero
    e8ac:	f800283a 	ret

0000e8b0 <_cleanup_r>:
    e8b0:	01400074 	movhi	r5,1
    e8b4:	294ba704 	addi	r5,r5,11932
    e8b8:	000f5981 	jmpi	f598 <_fwalk_reent>

0000e8bc <__fp_unlock>:
    e8bc:	0005883a 	mov	r2,zero
    e8c0:	f800283a 	ret

0000e8c4 <__sinit.part.0>:
    e8c4:	00c00074 	movhi	r3,1
    e8c8:	20800117 	ldw	r2,4(r4)
    e8cc:	18fa2c04 	addi	r3,r3,-5968
    e8d0:	20c00f15 	stw	r3,60(r4)
    e8d4:	2140bb04 	addi	r5,r4,748
    e8d8:	00c000c4 	movi	r3,3
    e8dc:	20c0b915 	stw	r3,740(r4)
    e8e0:	2140ba15 	stw	r5,744(r4)
    e8e4:	2000b815 	stw	zero,736(r4)
    e8e8:	10001705 	stb	zero,92(r2)
    e8ec:	10001745 	stb	zero,93(r2)
    e8f0:	10001785 	stb	zero,94(r2)
    e8f4:	100017c5 	stb	zero,95(r2)
    e8f8:	10001805 	stb	zero,96(r2)
    e8fc:	10001845 	stb	zero,97(r2)
    e900:	10001885 	stb	zero,98(r2)
    e904:	100018c5 	stb	zero,99(r2)
    e908:	00c00104 	movi	r3,4
    e90c:	10c00315 	stw	r3,12(r2)
    e910:	02000074 	movhi	r8,1
    e914:	20c00217 	ldw	r3,8(r4)
    e918:	01c00074 	movhi	r7,1
    e91c:	01800074 	movhi	r6,1
    e920:	01400074 	movhi	r5,1
    e924:	42051b04 	addi	r8,r8,5228
    e928:	39c53204 	addi	r7,r7,5320
    e92c:	31855204 	addi	r6,r6,5448
    e930:	29456904 	addi	r5,r5,5540
    e934:	02400074 	movhi	r9,1
    e938:	10001915 	stw	zero,100(r2)
    e93c:	10000015 	stw	zero,0(r2)
    e940:	10000115 	stw	zero,4(r2)
    e944:	10000215 	stw	zero,8(r2)
    e948:	10000415 	stw	zero,16(r2)
    e94c:	10000515 	stw	zero,20(r2)
    e950:	10000615 	stw	zero,24(r2)
    e954:	10800715 	stw	r2,28(r2)
    e958:	12000815 	stw	r8,32(r2)
    e95c:	11c00915 	stw	r7,36(r2)
    e960:	11800a15 	stw	r6,40(r2)
    e964:	11400b15 	stw	r5,44(r2)
    e968:	4a400284 	addi	r9,r9,10
    e96c:	1a400315 	stw	r9,12(r3)
    e970:	18001915 	stw	zero,100(r3)
    e974:	18000015 	stw	zero,0(r3)
    e978:	18000115 	stw	zero,4(r3)
    e97c:	18000215 	stw	zero,8(r3)
    e980:	18000415 	stw	zero,16(r3)
    e984:	18001705 	stb	zero,92(r3)
    e988:	18001745 	stb	zero,93(r3)
    e98c:	18001785 	stb	zero,94(r3)
    e990:	180017c5 	stb	zero,95(r3)
    e994:	18001805 	stb	zero,96(r3)
    e998:	18001845 	stb	zero,97(r3)
    e99c:	18001885 	stb	zero,98(r3)
    e9a0:	180018c5 	stb	zero,99(r3)
    e9a4:	20800317 	ldw	r2,12(r4)
    e9a8:	024000b4 	movhi	r9,2
    e9ac:	18000515 	stw	zero,20(r3)
    e9b0:	18000615 	stw	zero,24(r3)
    e9b4:	18c00715 	stw	r3,28(r3)
    e9b8:	1a000815 	stw	r8,32(r3)
    e9bc:	19c00915 	stw	r7,36(r3)
    e9c0:	19800a15 	stw	r6,40(r3)
    e9c4:	19400b15 	stw	r5,44(r3)
    e9c8:	4a400484 	addi	r9,r9,18
    e9cc:	10001915 	stw	zero,100(r2)
    e9d0:	10000015 	stw	zero,0(r2)
    e9d4:	10000115 	stw	zero,4(r2)
    e9d8:	10000215 	stw	zero,8(r2)
    e9dc:	12400315 	stw	r9,12(r2)
    e9e0:	10000415 	stw	zero,16(r2)
    e9e4:	10000515 	stw	zero,20(r2)
    e9e8:	10000615 	stw	zero,24(r2)
    e9ec:	10001705 	stb	zero,92(r2)
    e9f0:	10001745 	stb	zero,93(r2)
    e9f4:	10001785 	stb	zero,94(r2)
    e9f8:	100017c5 	stb	zero,95(r2)
    e9fc:	10001805 	stb	zero,96(r2)
    ea00:	10001845 	stb	zero,97(r2)
    ea04:	10001885 	stb	zero,98(r2)
    ea08:	100018c5 	stb	zero,99(r2)
    ea0c:	10800715 	stw	r2,28(r2)
    ea10:	12000815 	stw	r8,32(r2)
    ea14:	11c00915 	stw	r7,36(r2)
    ea18:	11800a15 	stw	r6,40(r2)
    ea1c:	11400b15 	stw	r5,44(r2)
    ea20:	00800044 	movi	r2,1
    ea24:	20800e15 	stw	r2,56(r4)
    ea28:	f800283a 	ret

0000ea2c <__sfmoreglue>:
    ea2c:	defffc04 	addi	sp,sp,-16
    ea30:	dc800215 	stw	r18,8(sp)
    ea34:	2825883a 	mov	r18,r5
    ea38:	dc000015 	stw	r16,0(sp)
    ea3c:	01401a04 	movi	r5,104
    ea40:	2021883a 	mov	r16,r4
    ea44:	913fffc4 	addi	r4,r18,-1
    ea48:	dfc00315 	stw	ra,12(sp)
    ea4c:	dc400115 	stw	r17,4(sp)
    ea50:	00071240 	call	7124 <__mulsi3>
    ea54:	8009883a 	mov	r4,r16
    ea58:	11401d04 	addi	r5,r2,116
    ea5c:	1023883a 	mov	r17,r2
    ea60:	0009ea80 	call	9ea8 <_malloc_r>
    ea64:	1021883a 	mov	r16,r2
    ea68:	10000726 	beq	r2,zero,ea88 <__sfmoreglue+0x5c>
    ea6c:	11000304 	addi	r4,r2,12
    ea70:	10000015 	stw	zero,0(r2)
    ea74:	14800115 	stw	r18,4(r2)
    ea78:	11000215 	stw	r4,8(r2)
    ea7c:	89801a04 	addi	r6,r17,104
    ea80:	000b883a 	mov	r5,zero
    ea84:	000faa40 	call	faa4 <memset>
    ea88:	8005883a 	mov	r2,r16
    ea8c:	dfc00317 	ldw	ra,12(sp)
    ea90:	dc800217 	ldw	r18,8(sp)
    ea94:	dc400117 	ldw	r17,4(sp)
    ea98:	dc000017 	ldw	r16,0(sp)
    ea9c:	dec00404 	addi	sp,sp,16
    eaa0:	f800283a 	ret

0000eaa4 <__sfp>:
    eaa4:	defffb04 	addi	sp,sp,-20
    eaa8:	008000b4 	movhi	r2,2
    eaac:	dc000015 	stw	r16,0(sp)
    eab0:	1427e417 	ldw	r16,-24688(r2)
    eab4:	dc400115 	stw	r17,4(sp)
    eab8:	dfc00415 	stw	ra,16(sp)
    eabc:	80800e17 	ldw	r2,56(r16)
    eac0:	dcc00315 	stw	r19,12(sp)
    eac4:	dc800215 	stw	r18,8(sp)
    eac8:	2023883a 	mov	r17,r4
    eacc:	10003126 	beq	r2,zero,eb94 <__sfp+0xf0>
    ead0:	8100ba17 	ldw	r4,744(r16)
    ead4:	8140b917 	ldw	r5,740(r16)
    ead8:	04c00104 	movi	r19,4
    eadc:	8400b804 	addi	r16,r16,736
    eae0:	297fffc4 	addi	r5,r5,-1
    eae4:	2800050e 	bge	r5,zero,eafc <__sfp+0x58>
    eae8:	00002406 	br	eb7c <__sfp+0xd8>
    eaec:	297fffc4 	addi	r5,r5,-1
    eaf0:	28bfffd8 	cmpnei	r2,r5,-1
    eaf4:	21001a04 	addi	r4,r4,104
    eaf8:	10002026 	beq	r2,zero,eb7c <__sfp+0xd8>
    eafc:	2080030f 	ldh	r2,12(r4)
    eb00:	103ffa1e 	bne	r2,zero,eaec <__sfp+0x48>
    eb04:	00bffff4 	movhi	r2,65535
    eb08:	10800044 	addi	r2,r2,1
    eb0c:	20001915 	stw	zero,100(r4)
    eb10:	20000015 	stw	zero,0(r4)
    eb14:	20000115 	stw	zero,4(r4)
    eb18:	20000215 	stw	zero,8(r4)
    eb1c:	20800315 	stw	r2,12(r4)
    eb20:	20000415 	stw	zero,16(r4)
    eb24:	20000515 	stw	zero,20(r4)
    eb28:	20000615 	stw	zero,24(r4)
    eb2c:	20001705 	stb	zero,92(r4)
    eb30:	20001745 	stb	zero,93(r4)
    eb34:	20001785 	stb	zero,94(r4)
    eb38:	200017c5 	stb	zero,95(r4)
    eb3c:	20001805 	stb	zero,96(r4)
    eb40:	20001845 	stb	zero,97(r4)
    eb44:	20001885 	stb	zero,98(r4)
    eb48:	200018c5 	stb	zero,99(r4)
    eb4c:	20000c15 	stw	zero,48(r4)
    eb50:	20000d15 	stw	zero,52(r4)
    eb54:	20001115 	stw	zero,68(r4)
    eb58:	20001215 	stw	zero,72(r4)
    eb5c:	2005883a 	mov	r2,r4
    eb60:	dfc00417 	ldw	ra,16(sp)
    eb64:	dcc00317 	ldw	r19,12(sp)
    eb68:	dc800217 	ldw	r18,8(sp)
    eb6c:	dc400117 	ldw	r17,4(sp)
    eb70:	dc000017 	ldw	r16,0(sp)
    eb74:	dec00504 	addi	sp,sp,20
    eb78:	f800283a 	ret
    eb7c:	80800017 	ldw	r2,0(r16)
    eb80:	10000726 	beq	r2,zero,eba0 <__sfp+0xfc>
    eb84:	11000217 	ldw	r4,8(r2)
    eb88:	11400117 	ldw	r5,4(r2)
    eb8c:	1021883a 	mov	r16,r2
    eb90:	003fd306 	br	eae0 <__sfp+0x3c>
    eb94:	8009883a 	mov	r4,r16
    eb98:	000e8c40 	call	e8c4 <__sinit.part.0>
    eb9c:	003fcc06 	br	ead0 <__sfp+0x2c>
    eba0:	01406b04 	movi	r5,428
    eba4:	8809883a 	mov	r4,r17
    eba8:	0009ea80 	call	9ea8 <_malloc_r>
    ebac:	1025883a 	mov	r18,r2
    ebb0:	10000c26 	beq	r2,zero,ebe4 <__sfp+0x140>
    ebb4:	11000304 	addi	r4,r2,12
    ebb8:	11000215 	stw	r4,8(r2)
    ebbc:	000b883a 	mov	r5,zero
    ebc0:	10000015 	stw	zero,0(r2)
    ebc4:	14c00115 	stw	r19,4(r2)
    ebc8:	01806804 	movi	r6,416
    ebcc:	000faa40 	call	faa4 <memset>
    ebd0:	1009883a 	mov	r4,r2
    ebd4:	84800015 	stw	r18,0(r16)
    ebd8:	014000c4 	movi	r5,3
    ebdc:	9021883a 	mov	r16,r18
    ebe0:	003fc606 	br	eafc <__sfp+0x58>
    ebe4:	80000015 	stw	zero,0(r16)
    ebe8:	00800304 	movi	r2,12
    ebec:	88800015 	stw	r2,0(r17)
    ebf0:	0009883a 	mov	r4,zero
    ebf4:	003fd906 	br	eb5c <__sfp+0xb8>

0000ebf8 <_cleanup>:
    ebf8:	008000b4 	movhi	r2,2
    ebfc:	1127e417 	ldw	r4,-24688(r2)
    ec00:	01400074 	movhi	r5,1
    ec04:	294ba704 	addi	r5,r5,11932
    ec08:	000f5981 	jmpi	f598 <_fwalk_reent>

0000ec0c <__sinit>:
    ec0c:	20800e17 	ldw	r2,56(r4)
    ec10:	10000126 	beq	r2,zero,ec18 <__sinit+0xc>
    ec14:	f800283a 	ret
    ec18:	000e8c41 	jmpi	e8c4 <__sinit.part.0>

0000ec1c <__sfp_lock_acquire>:
    ec1c:	f800283a 	ret

0000ec20 <__sfp_lock_release>:
    ec20:	f800283a 	ret

0000ec24 <__sinit_lock_acquire>:
    ec24:	f800283a 	ret

0000ec28 <__sinit_lock_release>:
    ec28:	f800283a 	ret

0000ec2c <__fp_lock_all>:
    ec2c:	008000b4 	movhi	r2,2
    ec30:	1127e517 	ldw	r4,-24684(r2)
    ec34:	01400074 	movhi	r5,1
    ec38:	297a2a04 	addi	r5,r5,-5976
    ec3c:	000f5001 	jmpi	f500 <_fwalk>

0000ec40 <__fp_unlock_all>:
    ec40:	008000b4 	movhi	r2,2
    ec44:	1127e517 	ldw	r4,-24684(r2)
    ec48:	01400074 	movhi	r5,1
    ec4c:	297a2f04 	addi	r5,r5,-5956
    ec50:	000f5001 	jmpi	f500 <_fwalk>

0000ec54 <_malloc_trim_r>:
    ec54:	defffb04 	addi	sp,sp,-20
    ec58:	dcc00315 	stw	r19,12(sp)
    ec5c:	04c000b4 	movhi	r19,2
    ec60:	dc800215 	stw	r18,8(sp)
    ec64:	dc400115 	stw	r17,4(sp)
    ec68:	dc000015 	stw	r16,0(sp)
    ec6c:	dfc00415 	stw	ra,16(sp)
    ec70:	2821883a 	mov	r16,r5
    ec74:	9ce1d704 	addi	r19,r19,-30884
    ec78:	2025883a 	mov	r18,r4
    ec7c:	0014f3c0 	call	14f3c <__malloc_lock>
    ec80:	98800217 	ldw	r2,8(r19)
    ec84:	14400117 	ldw	r17,4(r2)
    ec88:	00bfff04 	movi	r2,-4
    ec8c:	88a2703a 	and	r17,r17,r2
    ec90:	8c21c83a 	sub	r16,r17,r16
    ec94:	8403fbc4 	addi	r16,r16,4079
    ec98:	8020d33a 	srli	r16,r16,12
    ec9c:	843fffc4 	addi	r16,r16,-1
    eca0:	8020933a 	slli	r16,r16,12
    eca4:	80840008 	cmpgei	r2,r16,4096
    eca8:	10000626 	beq	r2,zero,ecc4 <_malloc_trim_r+0x70>
    ecac:	000b883a 	mov	r5,zero
    ecb0:	9009883a 	mov	r4,r18
    ecb4:	000a8ec0 	call	a8ec <_sbrk_r>
    ecb8:	98c00217 	ldw	r3,8(r19)
    ecbc:	1c47883a 	add	r3,r3,r17
    ecc0:	10c00a26 	beq	r2,r3,ecec <_malloc_trim_r+0x98>
    ecc4:	9009883a 	mov	r4,r18
    ecc8:	0014f600 	call	14f60 <__malloc_unlock>
    eccc:	0005883a 	mov	r2,zero
    ecd0:	dfc00417 	ldw	ra,16(sp)
    ecd4:	dcc00317 	ldw	r19,12(sp)
    ecd8:	dc800217 	ldw	r18,8(sp)
    ecdc:	dc400117 	ldw	r17,4(sp)
    ece0:	dc000017 	ldw	r16,0(sp)
    ece4:	dec00504 	addi	sp,sp,20
    ece8:	f800283a 	ret
    ecec:	040bc83a 	sub	r5,zero,r16
    ecf0:	9009883a 	mov	r4,r18
    ecf4:	000a8ec0 	call	a8ec <_sbrk_r>
    ecf8:	10bfffd8 	cmpnei	r2,r2,-1
    ecfc:	10000d26 	beq	r2,zero,ed34 <_malloc_trim_r+0xe0>
    ed00:	008000b4 	movhi	r2,2
    ed04:	10af2317 	ldw	r2,-17268(r2)
    ed08:	98c00217 	ldw	r3,8(r19)
    ed0c:	8c23c83a 	sub	r17,r17,r16
    ed10:	8c400054 	ori	r17,r17,1
    ed14:	1421c83a 	sub	r16,r2,r16
    ed18:	1c400115 	stw	r17,4(r3)
    ed1c:	008000b4 	movhi	r2,2
    ed20:	9009883a 	mov	r4,r18
    ed24:	142f2315 	stw	r16,-17268(r2)
    ed28:	0014f600 	call	14f60 <__malloc_unlock>
    ed2c:	00800044 	movi	r2,1
    ed30:	003fe706 	br	ecd0 <_malloc_trim_r+0x7c>
    ed34:	000b883a 	mov	r5,zero
    ed38:	9009883a 	mov	r4,r18
    ed3c:	000a8ec0 	call	a8ec <_sbrk_r>
    ed40:	99000217 	ldw	r4,8(r19)
    ed44:	1107c83a 	sub	r3,r2,r4
    ed48:	19400410 	cmplti	r5,r3,16
    ed4c:	283fdd1e 	bne	r5,zero,ecc4 <_malloc_trim_r+0x70>
    ed50:	014000b4 	movhi	r5,2
    ed54:	2967e617 	ldw	r5,-24680(r5)
    ed58:	18c00054 	ori	r3,r3,1
    ed5c:	20c00115 	stw	r3,4(r4)
    ed60:	1145c83a 	sub	r2,r2,r5
    ed64:	014000b4 	movhi	r5,2
    ed68:	28af2315 	stw	r2,-17268(r5)
    ed6c:	003fd506 	br	ecc4 <_malloc_trim_r+0x70>

0000ed70 <_free_r>:
    ed70:	28004f26 	beq	r5,zero,eeb0 <_free_r+0x140>
    ed74:	defffd04 	addi	sp,sp,-12
    ed78:	dc400115 	stw	r17,4(sp)
    ed7c:	dc000015 	stw	r16,0(sp)
    ed80:	2023883a 	mov	r17,r4
    ed84:	2821883a 	mov	r16,r5
    ed88:	dfc00215 	stw	ra,8(sp)
    ed8c:	0014f3c0 	call	14f3c <__malloc_lock>
    ed90:	81ffff17 	ldw	r7,-4(r16)
    ed94:	00bfff84 	movi	r2,-2
    ed98:	80fffe04 	addi	r3,r16,-8
    ed9c:	3884703a 	and	r2,r7,r2
    eda0:	010000b4 	movhi	r4,2
    eda4:	188d883a 	add	r6,r3,r2
    eda8:	2121d704 	addi	r4,r4,-30884
    edac:	31400117 	ldw	r5,4(r6)
    edb0:	22000217 	ldw	r8,8(r4)
    edb4:	027fff04 	movi	r9,-4
    edb8:	2a4a703a 	and	r5,r5,r9
    edbc:	41806426 	beq	r8,r6,ef50 <_free_r+0x1e0>
    edc0:	31400115 	stw	r5,4(r6)
    edc4:	39c0004c 	andi	r7,r7,1
    edc8:	3151883a 	add	r8,r6,r5
    edcc:	3800281e 	bne	r7,zero,ee70 <_free_r+0x100>
    edd0:	82bffe17 	ldw	r10,-8(r16)
    edd4:	42000117 	ldw	r8,4(r8)
    edd8:	01c000b4 	movhi	r7,2
    eddc:	1a87c83a 	sub	r3,r3,r10
    ede0:	1a400217 	ldw	r9,8(r3)
    ede4:	39e1d904 	addi	r7,r7,-30876
    ede8:	1285883a 	add	r2,r2,r10
    edec:	4200004c 	andi	r8,r8,1
    edf0:	49c04c26 	beq	r9,r7,ef24 <_free_r+0x1b4>
    edf4:	1a800317 	ldw	r10,12(r3)
    edf8:	4a800315 	stw	r10,12(r9)
    edfc:	52400215 	stw	r9,8(r10)
    ee00:	40007126 	beq	r8,zero,efc8 <_free_r+0x258>
    ee04:	11400054 	ori	r5,r2,1
    ee08:	19400115 	stw	r5,4(r3)
    ee0c:	30800015 	stw	r2,0(r6)
    ee10:	11408028 	cmpgeui	r5,r2,512
    ee14:	28002c1e 	bne	r5,zero,eec8 <_free_r+0x158>
    ee18:	100ad0fa 	srli	r5,r2,3
    ee1c:	100cd17a 	srli	r6,r2,5
    ee20:	00800044 	movi	r2,1
    ee24:	29400044 	addi	r5,r5,1
    ee28:	280a90fa 	slli	r5,r5,3
    ee2c:	21c00117 	ldw	r7,4(r4)
    ee30:	1184983a 	sll	r2,r2,r6
    ee34:	214b883a 	add	r5,r4,r5
    ee38:	29800017 	ldw	r6,0(r5)
    ee3c:	11c4b03a 	or	r2,r2,r7
    ee40:	29fffe04 	addi	r7,r5,-8
    ee44:	19c00315 	stw	r7,12(r3)
    ee48:	19800215 	stw	r6,8(r3)
    ee4c:	20800115 	stw	r2,4(r4)
    ee50:	28c00015 	stw	r3,0(r5)
    ee54:	30c00315 	stw	r3,12(r6)
    ee58:	8809883a 	mov	r4,r17
    ee5c:	dfc00217 	ldw	ra,8(sp)
    ee60:	dc400117 	ldw	r17,4(sp)
    ee64:	dc000017 	ldw	r16,0(sp)
    ee68:	dec00304 	addi	sp,sp,12
    ee6c:	0014f601 	jmpi	14f60 <__malloc_unlock>
    ee70:	41c00117 	ldw	r7,4(r8)
    ee74:	39c0004c 	andi	r7,r7,1
    ee78:	38000e1e 	bne	r7,zero,eeb4 <_free_r+0x144>
    ee7c:	01c000b4 	movhi	r7,2
    ee80:	1145883a 	add	r2,r2,r5
    ee84:	39e1d904 	addi	r7,r7,-30876
    ee88:	31400217 	ldw	r5,8(r6)
    ee8c:	12400054 	ori	r9,r2,1
    ee90:	1891883a 	add	r8,r3,r2
    ee94:	29c05226 	beq	r5,r7,efe0 <_free_r+0x270>
    ee98:	31800317 	ldw	r6,12(r6)
    ee9c:	29800315 	stw	r6,12(r5)
    eea0:	31400215 	stw	r5,8(r6)
    eea4:	1a400115 	stw	r9,4(r3)
    eea8:	40800015 	stw	r2,0(r8)
    eeac:	003fd806 	br	ee10 <_free_r+0xa0>
    eeb0:	f800283a 	ret
    eeb4:	11400054 	ori	r5,r2,1
    eeb8:	817fff15 	stw	r5,-4(r16)
    eebc:	30800015 	stw	r2,0(r6)
    eec0:	11408028 	cmpgeui	r5,r2,512
    eec4:	283fd426 	beq	r5,zero,ee18 <_free_r+0xa8>
    eec8:	100ad27a 	srli	r5,r2,9
    eecc:	29800168 	cmpgeui	r6,r5,5
    eed0:	3000341e 	bne	r6,zero,efa4 <_free_r+0x234>
    eed4:	100ad1ba 	srli	r5,r2,6
    eed8:	29800e44 	addi	r6,r5,57
    eedc:	300c90fa 	slli	r6,r6,3
    eee0:	29c00e04 	addi	r7,r5,56
    eee4:	218d883a 	add	r6,r4,r6
    eee8:	31400017 	ldw	r5,0(r6)
    eeec:	31bffe04 	addi	r6,r6,-8
    eef0:	31404226 	beq	r6,r5,effc <_free_r+0x28c>
    eef4:	01ffff04 	movi	r7,-4
    eef8:	29000117 	ldw	r4,4(r5)
    eefc:	21c8703a 	and	r4,r4,r7
    ef00:	1100022e 	bgeu	r2,r4,ef0c <_free_r+0x19c>
    ef04:	29400217 	ldw	r5,8(r5)
    ef08:	317ffb1e 	bne	r6,r5,eef8 <_free_r+0x188>
    ef0c:	29800317 	ldw	r6,12(r5)
    ef10:	19800315 	stw	r6,12(r3)
    ef14:	19400215 	stw	r5,8(r3)
    ef18:	30c00215 	stw	r3,8(r6)
    ef1c:	28c00315 	stw	r3,12(r5)
    ef20:	003fcd06 	br	ee58 <_free_r+0xe8>
    ef24:	40004d1e 	bne	r8,zero,f05c <_free_r+0x2ec>
    ef28:	31000317 	ldw	r4,12(r6)
    ef2c:	31800217 	ldw	r6,8(r6)
    ef30:	2885883a 	add	r2,r5,r2
    ef34:	11400054 	ori	r5,r2,1
    ef38:	31000315 	stw	r4,12(r6)
    ef3c:	21800215 	stw	r6,8(r4)
    ef40:	19400115 	stw	r5,4(r3)
    ef44:	1887883a 	add	r3,r3,r2
    ef48:	18800015 	stw	r2,0(r3)
    ef4c:	003fc206 	br	ee58 <_free_r+0xe8>
    ef50:	39c0004c 	andi	r7,r7,1
    ef54:	1145883a 	add	r2,r2,r5
    ef58:	3800071e 	bne	r7,zero,ef78 <_free_r+0x208>
    ef5c:	81fffe17 	ldw	r7,-8(r16)
    ef60:	19c7c83a 	sub	r3,r3,r7
    ef64:	19400317 	ldw	r5,12(r3)
    ef68:	19800217 	ldw	r6,8(r3)
    ef6c:	11c5883a 	add	r2,r2,r7
    ef70:	31400315 	stw	r5,12(r6)
    ef74:	29800215 	stw	r6,8(r5)
    ef78:	014000b4 	movhi	r5,2
    ef7c:	11800054 	ori	r6,r2,1
    ef80:	2967e717 	ldw	r5,-24676(r5)
    ef84:	19800115 	stw	r6,4(r3)
    ef88:	20c00215 	stw	r3,8(r4)
    ef8c:	117fb236 	bltu	r2,r5,ee58 <_free_r+0xe8>
    ef90:	008000b4 	movhi	r2,2
    ef94:	116f1817 	ldw	r5,-17312(r2)
    ef98:	8809883a 	mov	r4,r17
    ef9c:	000ec540 	call	ec54 <_malloc_trim_r>
    efa0:	003fad06 	br	ee58 <_free_r+0xe8>
    efa4:	29800568 	cmpgeui	r6,r5,21
    efa8:	30000926 	beq	r6,zero,efd0 <_free_r+0x260>
    efac:	29801568 	cmpgeui	r6,r5,85
    efb0:	3000191e 	bne	r6,zero,f018 <_free_r+0x2a8>
    efb4:	100ad33a 	srli	r5,r2,12
    efb8:	29801bc4 	addi	r6,r5,111
    efbc:	300c90fa 	slli	r6,r6,3
    efc0:	29c01b84 	addi	r7,r5,110
    efc4:	003fc706 	br	eee4 <_free_r+0x174>
    efc8:	1145883a 	add	r2,r2,r5
    efcc:	003fae06 	br	ee88 <_free_r+0x118>
    efd0:	29801704 	addi	r6,r5,92
    efd4:	300c90fa 	slli	r6,r6,3
    efd8:	29c016c4 	addi	r7,r5,91
    efdc:	003fc106 	br	eee4 <_free_r+0x174>
    efe0:	20c00515 	stw	r3,20(r4)
    efe4:	20c00415 	stw	r3,16(r4)
    efe8:	19c00315 	stw	r7,12(r3)
    efec:	19c00215 	stw	r7,8(r3)
    eff0:	1a400115 	stw	r9,4(r3)
    eff4:	40800015 	stw	r2,0(r8)
    eff8:	003f9706 	br	ee58 <_free_r+0xe8>
    effc:	380fd0ba 	srai	r7,r7,2
    f000:	00800044 	movi	r2,1
    f004:	22000117 	ldw	r8,4(r4)
    f008:	11ce983a 	sll	r7,r2,r7
    f00c:	3a0eb03a 	or	r7,r7,r8
    f010:	21c00115 	stw	r7,4(r4)
    f014:	003fbe06 	br	ef10 <_free_r+0x1a0>
    f018:	29805568 	cmpgeui	r6,r5,341
    f01c:	3000051e 	bne	r6,zero,f034 <_free_r+0x2c4>
    f020:	100ad3fa 	srli	r5,r2,15
    f024:	29801e04 	addi	r6,r5,120
    f028:	300c90fa 	slli	r6,r6,3
    f02c:	29c01dc4 	addi	r7,r5,119
    f030:	003fac06 	br	eee4 <_free_r+0x174>
    f034:	29415568 	cmpgeui	r5,r5,1365
    f038:	2800051e 	bne	r5,zero,f050 <_free_r+0x2e0>
    f03c:	100ad4ba 	srli	r5,r2,18
    f040:	29801f44 	addi	r6,r5,125
    f044:	300c90fa 	slli	r6,r6,3
    f048:	29c01f04 	addi	r7,r5,124
    f04c:	003fa506 	br	eee4 <_free_r+0x174>
    f050:	0180fe04 	movi	r6,1016
    f054:	01c01f84 	movi	r7,126
    f058:	003fa206 	br	eee4 <_free_r+0x174>
    f05c:	11000054 	ori	r4,r2,1
    f060:	19000115 	stw	r4,4(r3)
    f064:	30800015 	stw	r2,0(r6)
    f068:	003f7b06 	br	ee58 <_free_r+0xe8>

0000f06c <__sfvwrite_r>:
    f06c:	30800217 	ldw	r2,8(r6)
    f070:	10009b26 	beq	r2,zero,f2e0 <__sfvwrite_r+0x274>
    f074:	2a00030b 	ldhu	r8,12(r5)
    f078:	defff404 	addi	sp,sp,-48
    f07c:	dd400715 	stw	r21,28(sp)
    f080:	dd000615 	stw	r20,24(sp)
    f084:	dc000215 	stw	r16,8(sp)
    f088:	dfc00b15 	stw	ra,44(sp)
    f08c:	df000a15 	stw	fp,40(sp)
    f090:	ddc00915 	stw	r23,36(sp)
    f094:	dd800815 	stw	r22,32(sp)
    f098:	dcc00515 	stw	r19,20(sp)
    f09c:	dc800415 	stw	r18,16(sp)
    f0a0:	dc400315 	stw	r17,12(sp)
    f0a4:	4080020c 	andi	r2,r8,8
    f0a8:	3029883a 	mov	r20,r6
    f0ac:	202b883a 	mov	r21,r4
    f0b0:	2821883a 	mov	r16,r5
    f0b4:	10002626 	beq	r2,zero,f150 <__sfvwrite_r+0xe4>
    f0b8:	28800417 	ldw	r2,16(r5)
    f0bc:	10002426 	beq	r2,zero,f150 <__sfvwrite_r+0xe4>
    f0c0:	4080008c 	andi	r2,r8,2
    f0c4:	a4400017 	ldw	r17,0(r20)
    f0c8:	10002926 	beq	r2,zero,f170 <__sfvwrite_r+0x104>
    f0cc:	05a00034 	movhi	r22,32768
    f0d0:	0027883a 	mov	r19,zero
    f0d4:	0025883a 	mov	r18,zero
    f0d8:	b5bf0004 	addi	r22,r22,-1024
    f0dc:	980d883a 	mov	r6,r19
    f0e0:	a809883a 	mov	r4,r21
    f0e4:	90007126 	beq	r18,zero,f2ac <__sfvwrite_r+0x240>
    f0e8:	900f883a 	mov	r7,r18
    f0ec:	b480012e 	bgeu	r22,r18,f0f4 <__sfvwrite_r+0x88>
    f0f0:	b00f883a 	mov	r7,r22
    f0f4:	80800917 	ldw	r2,36(r16)
    f0f8:	81400717 	ldw	r5,28(r16)
    f0fc:	103ee83a 	callr	r2
    f100:	0080720e 	bge	zero,r2,f2cc <__sfvwrite_r+0x260>
    f104:	a0c00217 	ldw	r3,8(r20)
    f108:	98a7883a 	add	r19,r19,r2
    f10c:	90a5c83a 	sub	r18,r18,r2
    f110:	1885c83a 	sub	r2,r3,r2
    f114:	a0800215 	stw	r2,8(r20)
    f118:	103ff01e 	bne	r2,zero,f0dc <__sfvwrite_r+0x70>
    f11c:	0005883a 	mov	r2,zero
    f120:	dfc00b17 	ldw	ra,44(sp)
    f124:	df000a17 	ldw	fp,40(sp)
    f128:	ddc00917 	ldw	r23,36(sp)
    f12c:	dd800817 	ldw	r22,32(sp)
    f130:	dd400717 	ldw	r21,28(sp)
    f134:	dd000617 	ldw	r20,24(sp)
    f138:	dcc00517 	ldw	r19,20(sp)
    f13c:	dc800417 	ldw	r18,16(sp)
    f140:	dc400317 	ldw	r17,12(sp)
    f144:	dc000217 	ldw	r16,8(sp)
    f148:	dec00c04 	addi	sp,sp,48
    f14c:	f800283a 	ret
    f150:	800b883a 	mov	r5,r16
    f154:	a809883a 	mov	r4,r21
    f158:	000cad00 	call	cad0 <__swsetup_r>
    f15c:	1000e61e 	bne	r2,zero,f4f8 <__sfvwrite_r+0x48c>
    f160:	8200030b 	ldhu	r8,12(r16)
    f164:	a4400017 	ldw	r17,0(r20)
    f168:	4080008c 	andi	r2,r8,2
    f16c:	103fd71e 	bne	r2,zero,f0cc <__sfvwrite_r+0x60>
    f170:	4080004c 	andi	r2,r8,1
    f174:	10005c1e 	bne	r2,zero,f2e8 <__sfvwrite_r+0x27c>
    f178:	00a00034 	movhi	r2,32768
    f17c:	10bfff84 	addi	r2,r2,-2
    f180:	00e00034 	movhi	r3,32768
    f184:	d8800015 	stw	r2,0(sp)
    f188:	18bfffc4 	addi	r2,r3,-1
    f18c:	0039883a 	mov	fp,zero
    f190:	0025883a 	mov	r18,zero
    f194:	d8800115 	stw	r2,4(sp)
    f198:	90004026 	beq	r18,zero,f29c <__sfvwrite_r+0x230>
    f19c:	4080800c 	andi	r2,r8,512
    f1a0:	81000017 	ldw	r4,0(r16)
    f1a4:	85c00217 	ldw	r23,8(r16)
    f1a8:	10008826 	beq	r2,zero,f3cc <__sfvwrite_r+0x360>
    f1ac:	b82d883a 	mov	r22,r23
    f1b0:	95c0ae36 	bltu	r18,r23,f46c <__sfvwrite_r+0x400>
    f1b4:	4081200c 	andi	r2,r8,1152
    f1b8:	10002626 	beq	r2,zero,f254 <__sfvwrite_r+0x1e8>
    f1bc:	81800517 	ldw	r6,20(r16)
    f1c0:	81400417 	ldw	r5,16(r16)
    f1c4:	3185883a 	add	r2,r6,r6
    f1c8:	1185883a 	add	r2,r2,r6
    f1cc:	1026d7fa 	srli	r19,r2,31
    f1d0:	216dc83a 	sub	r22,r4,r5
    f1d4:	b1000044 	addi	r4,r22,1
    f1d8:	98a7883a 	add	r19,r19,r2
    f1dc:	9827d07a 	srai	r19,r19,1
    f1e0:	2485883a 	add	r2,r4,r18
    f1e4:	980d883a 	mov	r6,r19
    f1e8:	9880022e 	bgeu	r19,r2,f1f4 <__sfvwrite_r+0x188>
    f1ec:	1027883a 	mov	r19,r2
    f1f0:	100d883a 	mov	r6,r2
    f1f4:	4201000c 	andi	r8,r8,1024
    f1f8:	4000af26 	beq	r8,zero,f4b8 <__sfvwrite_r+0x44c>
    f1fc:	300b883a 	mov	r5,r6
    f200:	a809883a 	mov	r4,r21
    f204:	0009ea80 	call	9ea8 <_malloc_r>
    f208:	1000b726 	beq	r2,zero,f4e8 <__sfvwrite_r+0x47c>
    f20c:	81400417 	ldw	r5,16(r16)
    f210:	b00d883a 	mov	r6,r22
    f214:	1009883a 	mov	r4,r2
    f218:	000a6880 	call	a688 <memcpy>
    f21c:	100f883a 	mov	r7,r2
    f220:	8080030b 	ldhu	r2,12(r16)
    f224:	00fedfc4 	movi	r3,-1153
    f228:	10c4703a 	and	r2,r2,r3
    f22c:	10802014 	ori	r2,r2,128
    f230:	8080030d 	sth	r2,12(r16)
    f234:	3d89883a 	add	r4,r7,r22
    f238:	9d85c83a 	sub	r2,r19,r22
    f23c:	81c00415 	stw	r7,16(r16)
    f240:	81000015 	stw	r4,0(r16)
    f244:	84c00515 	stw	r19,20(r16)
    f248:	902f883a 	mov	r23,r18
    f24c:	80800215 	stw	r2,8(r16)
    f250:	902d883a 	mov	r22,r18
    f254:	b00d883a 	mov	r6,r22
    f258:	e00b883a 	mov	r5,fp
    f25c:	000f9780 	call	f978 <memmove>
    f260:	81000217 	ldw	r4,8(r16)
    f264:	80800017 	ldw	r2,0(r16)
    f268:	9027883a 	mov	r19,r18
    f26c:	25c9c83a 	sub	r4,r4,r23
    f270:	1585883a 	add	r2,r2,r22
    f274:	81000215 	stw	r4,8(r16)
    f278:	80800015 	stw	r2,0(r16)
    f27c:	0025883a 	mov	r18,zero
    f280:	a1800217 	ldw	r6,8(r20)
    f284:	e4f9883a 	add	fp,fp,r19
    f288:	34e7c83a 	sub	r19,r6,r19
    f28c:	a4c00215 	stw	r19,8(r20)
    f290:	983fa226 	beq	r19,zero,f11c <__sfvwrite_r+0xb0>
    f294:	8200030b 	ldhu	r8,12(r16)
    f298:	903fc01e 	bne	r18,zero,f19c <__sfvwrite_r+0x130>
    f29c:	8f000017 	ldw	fp,0(r17)
    f2a0:	8c800117 	ldw	r18,4(r17)
    f2a4:	8c400204 	addi	r17,r17,8
    f2a8:	003fbb06 	br	f198 <__sfvwrite_r+0x12c>
    f2ac:	8cc00017 	ldw	r19,0(r17)
    f2b0:	8c800117 	ldw	r18,4(r17)
    f2b4:	8c400204 	addi	r17,r17,8
    f2b8:	003f8806 	br	f0dc <__sfvwrite_r+0x70>
    f2bc:	800b883a 	mov	r5,r16
    f2c0:	a809883a 	mov	r4,r21
    f2c4:	000e7c40 	call	e7c4 <_fflush_r>
    f2c8:	10002226 	beq	r2,zero,f354 <__sfvwrite_r+0x2e8>
    f2cc:	8080030b 	ldhu	r2,12(r16)
    f2d0:	10801014 	ori	r2,r2,64
    f2d4:	8080030d 	sth	r2,12(r16)
    f2d8:	00bfffc4 	movi	r2,-1
    f2dc:	003f9006 	br	f120 <__sfvwrite_r+0xb4>
    f2e0:	0005883a 	mov	r2,zero
    f2e4:	f800283a 	ret
    f2e8:	002d883a 	mov	r22,zero
    f2ec:	0039883a 	mov	fp,zero
    f2f0:	0005883a 	mov	r2,zero
    f2f4:	002f883a 	mov	r23,zero
    f2f8:	b0001d26 	beq	r22,zero,f370 <__sfvwrite_r+0x304>
    f2fc:	10002026 	beq	r2,zero,f380 <__sfvwrite_r+0x314>
    f300:	e027883a 	mov	r19,fp
    f304:	b4c0012e 	bgeu	r22,r19,f30c <__sfvwrite_r+0x2a0>
    f308:	b027883a 	mov	r19,r22
    f30c:	81000017 	ldw	r4,0(r16)
    f310:	80800417 	ldw	r2,16(r16)
    f314:	81c00517 	ldw	r7,20(r16)
    f318:	1100032e 	bgeu	r2,r4,f328 <__sfvwrite_r+0x2bc>
    f31c:	84800217 	ldw	r18,8(r16)
    f320:	3ca5883a 	add	r18,r7,r18
    f324:	94c01e16 	blt	r18,r19,f3a0 <__sfvwrite_r+0x334>
    f328:	99c05316 	blt	r19,r7,f478 <__sfvwrite_r+0x40c>
    f32c:	80800917 	ldw	r2,36(r16)
    f330:	81400717 	ldw	r5,28(r16)
    f334:	b80d883a 	mov	r6,r23
    f338:	a809883a 	mov	r4,r21
    f33c:	103ee83a 	callr	r2
    f340:	1025883a 	mov	r18,r2
    f344:	00bfe10e 	bge	zero,r2,f2cc <__sfvwrite_r+0x260>
    f348:	e4b9c83a 	sub	fp,fp,r18
    f34c:	e03fdb26 	beq	fp,zero,f2bc <__sfvwrite_r+0x250>
    f350:	00800044 	movi	r2,1
    f354:	a1800217 	ldw	r6,8(r20)
    f358:	bcaf883a 	add	r23,r23,r18
    f35c:	b4adc83a 	sub	r22,r22,r18
    f360:	34a5c83a 	sub	r18,r6,r18
    f364:	a4800215 	stw	r18,8(r20)
    f368:	903f6c26 	beq	r18,zero,f11c <__sfvwrite_r+0xb0>
    f36c:	b03fe31e 	bne	r22,zero,f2fc <__sfvwrite_r+0x290>
    f370:	8d800117 	ldw	r22,4(r17)
    f374:	8dc00017 	ldw	r23,0(r17)
    f378:	8c400204 	addi	r17,r17,8
    f37c:	b03ffc26 	beq	r22,zero,f370 <__sfvwrite_r+0x304>
    f380:	b00d883a 	mov	r6,r22
    f384:	01400284 	movi	r5,10
    f388:	b809883a 	mov	r4,r23
    f38c:	000f8a80 	call	f8a8 <memchr>
    f390:	10004626 	beq	r2,zero,f4ac <__sfvwrite_r+0x440>
    f394:	10800044 	addi	r2,r2,1
    f398:	15f9c83a 	sub	fp,r2,r23
    f39c:	003fd806 	br	f300 <__sfvwrite_r+0x294>
    f3a0:	b80b883a 	mov	r5,r23
    f3a4:	900d883a 	mov	r6,r18
    f3a8:	000f9780 	call	f978 <memmove>
    f3ac:	80800017 	ldw	r2,0(r16)
    f3b0:	800b883a 	mov	r5,r16
    f3b4:	a809883a 	mov	r4,r21
    f3b8:	1485883a 	add	r2,r2,r18
    f3bc:	80800015 	stw	r2,0(r16)
    f3c0:	000e7c40 	call	e7c4 <_fflush_r>
    f3c4:	103fe026 	beq	r2,zero,f348 <__sfvwrite_r+0x2dc>
    f3c8:	003fc006 	br	f2cc <__sfvwrite_r+0x260>
    f3cc:	80800417 	ldw	r2,16(r16)
    f3d0:	11001436 	bltu	r2,r4,f424 <__sfvwrite_r+0x3b8>
    f3d4:	84c00517 	ldw	r19,20(r16)
    f3d8:	94c01236 	bltu	r18,r19,f424 <__sfvwrite_r+0x3b8>
    f3dc:	d8800017 	ldw	r2,0(sp)
    f3e0:	1480302e 	bgeu	r2,r18,f4a4 <__sfvwrite_r+0x438>
    f3e4:	d9000117 	ldw	r4,4(sp)
    f3e8:	980b883a 	mov	r5,r19
    f3ec:	0006f700 	call	6f70 <__divsi3>
    f3f0:	980b883a 	mov	r5,r19
    f3f4:	1009883a 	mov	r4,r2
    f3f8:	00071240 	call	7124 <__mulsi3>
    f3fc:	82000917 	ldw	r8,36(r16)
    f400:	81400717 	ldw	r5,28(r16)
    f404:	100f883a 	mov	r7,r2
    f408:	e00d883a 	mov	r6,fp
    f40c:	a809883a 	mov	r4,r21
    f410:	403ee83a 	callr	r8
    f414:	1027883a 	mov	r19,r2
    f418:	00bfac0e 	bge	zero,r2,f2cc <__sfvwrite_r+0x260>
    f41c:	94e5c83a 	sub	r18,r18,r19
    f420:	003f9706 	br	f280 <__sfvwrite_r+0x214>
    f424:	b827883a 	mov	r19,r23
    f428:	95c0012e 	bgeu	r18,r23,f430 <__sfvwrite_r+0x3c4>
    f42c:	9027883a 	mov	r19,r18
    f430:	980d883a 	mov	r6,r19
    f434:	e00b883a 	mov	r5,fp
    f438:	000f9780 	call	f978 <memmove>
    f43c:	80800217 	ldw	r2,8(r16)
    f440:	81000017 	ldw	r4,0(r16)
    f444:	14c5c83a 	sub	r2,r2,r19
    f448:	24c9883a 	add	r4,r4,r19
    f44c:	80800215 	stw	r2,8(r16)
    f450:	81000015 	stw	r4,0(r16)
    f454:	103ff11e 	bne	r2,zero,f41c <__sfvwrite_r+0x3b0>
    f458:	800b883a 	mov	r5,r16
    f45c:	a809883a 	mov	r4,r21
    f460:	000e7c40 	call	e7c4 <_fflush_r>
    f464:	103fed26 	beq	r2,zero,f41c <__sfvwrite_r+0x3b0>
    f468:	003f9806 	br	f2cc <__sfvwrite_r+0x260>
    f46c:	902f883a 	mov	r23,r18
    f470:	902d883a 	mov	r22,r18
    f474:	003f7706 	br	f254 <__sfvwrite_r+0x1e8>
    f478:	980d883a 	mov	r6,r19
    f47c:	b80b883a 	mov	r5,r23
    f480:	000f9780 	call	f978 <memmove>
    f484:	80c00217 	ldw	r3,8(r16)
    f488:	80800017 	ldw	r2,0(r16)
    f48c:	9825883a 	mov	r18,r19
    f490:	1cc7c83a 	sub	r3,r3,r19
    f494:	14c5883a 	add	r2,r2,r19
    f498:	80c00215 	stw	r3,8(r16)
    f49c:	80800015 	stw	r2,0(r16)
    f4a0:	003fa906 	br	f348 <__sfvwrite_r+0x2dc>
    f4a4:	9009883a 	mov	r4,r18
    f4a8:	003fcf06 	br	f3e8 <__sfvwrite_r+0x37c>
    f4ac:	b4c00044 	addi	r19,r22,1
    f4b0:	9839883a 	mov	fp,r19
    f4b4:	003f9306 	br	f304 <__sfvwrite_r+0x298>
    f4b8:	a809883a 	mov	r4,r21
    f4bc:	0010f300 	call	10f30 <_realloc_r>
    f4c0:	100f883a 	mov	r7,r2
    f4c4:	103f5b1e 	bne	r2,zero,f234 <__sfvwrite_r+0x1c8>
    f4c8:	81400417 	ldw	r5,16(r16)
    f4cc:	a809883a 	mov	r4,r21
    f4d0:	000ed700 	call	ed70 <_free_r>
    f4d4:	8080030b 	ldhu	r2,12(r16)
    f4d8:	00c00304 	movi	r3,12
    f4dc:	a8c00015 	stw	r3,0(r21)
    f4e0:	10bfdfcc 	andi	r2,r2,65407
    f4e4:	003f7a06 	br	f2d0 <__sfvwrite_r+0x264>
    f4e8:	00c00304 	movi	r3,12
    f4ec:	8080030b 	ldhu	r2,12(r16)
    f4f0:	a8c00015 	stw	r3,0(r21)
    f4f4:	003f7606 	br	f2d0 <__sfvwrite_r+0x264>
    f4f8:	00bfffc4 	movi	r2,-1
    f4fc:	003f0806 	br	f120 <__sfvwrite_r+0xb4>

0000f500 <_fwalk>:
    f500:	defffa04 	addi	sp,sp,-24
    f504:	dd000415 	stw	r20,16(sp)
    f508:	dcc00315 	stw	r19,12(sp)
    f50c:	dc800215 	stw	r18,8(sp)
    f510:	dfc00515 	stw	ra,20(sp)
    f514:	dc400115 	stw	r17,4(sp)
    f518:	dc000015 	stw	r16,0(sp)
    f51c:	2827883a 	mov	r19,r5
    f520:	2480b804 	addi	r18,r4,736
    f524:	0029883a 	mov	r20,zero
    f528:	94400117 	ldw	r17,4(r18)
    f52c:	94000217 	ldw	r16,8(r18)
    f530:	8c7fffc4 	addi	r17,r17,-1
    f534:	88000d16 	blt	r17,zero,f56c <_fwalk+0x6c>
    f538:	8080030b 	ldhu	r2,12(r16)
    f53c:	8c7fffc4 	addi	r17,r17,-1
    f540:	108000b0 	cmpltui	r2,r2,2
    f544:	1000061e 	bne	r2,zero,f560 <_fwalk+0x60>
    f548:	8080038f 	ldh	r2,14(r16)
    f54c:	8009883a 	mov	r4,r16
    f550:	10bfffe0 	cmpeqi	r2,r2,-1
    f554:	1000021e 	bne	r2,zero,f560 <_fwalk+0x60>
    f558:	983ee83a 	callr	r19
    f55c:	a0a8b03a 	or	r20,r20,r2
    f560:	88bfffd8 	cmpnei	r2,r17,-1
    f564:	84001a04 	addi	r16,r16,104
    f568:	103ff31e 	bne	r2,zero,f538 <_fwalk+0x38>
    f56c:	94800017 	ldw	r18,0(r18)
    f570:	903fed1e 	bne	r18,zero,f528 <_fwalk+0x28>
    f574:	a005883a 	mov	r2,r20
    f578:	dfc00517 	ldw	ra,20(sp)
    f57c:	dd000417 	ldw	r20,16(sp)
    f580:	dcc00317 	ldw	r19,12(sp)
    f584:	dc800217 	ldw	r18,8(sp)
    f588:	dc400117 	ldw	r17,4(sp)
    f58c:	dc000017 	ldw	r16,0(sp)
    f590:	dec00604 	addi	sp,sp,24
    f594:	f800283a 	ret

0000f598 <_fwalk_reent>:
    f598:	defff904 	addi	sp,sp,-28
    f59c:	dd400515 	stw	r21,20(sp)
    f5a0:	dd000415 	stw	r20,16(sp)
    f5a4:	dcc00315 	stw	r19,12(sp)
    f5a8:	dc800215 	stw	r18,8(sp)
    f5ac:	dfc00615 	stw	ra,24(sp)
    f5b0:	dc400115 	stw	r17,4(sp)
    f5b4:	dc000015 	stw	r16,0(sp)
    f5b8:	202b883a 	mov	r21,r4
    f5bc:	2827883a 	mov	r19,r5
    f5c0:	2480b804 	addi	r18,r4,736
    f5c4:	0029883a 	mov	r20,zero
    f5c8:	94400117 	ldw	r17,4(r18)
    f5cc:	94000217 	ldw	r16,8(r18)
    f5d0:	8c7fffc4 	addi	r17,r17,-1
    f5d4:	88000e16 	blt	r17,zero,f610 <_fwalk_reent+0x78>
    f5d8:	8080030b 	ldhu	r2,12(r16)
    f5dc:	8c7fffc4 	addi	r17,r17,-1
    f5e0:	108000b0 	cmpltui	r2,r2,2
    f5e4:	1000071e 	bne	r2,zero,f604 <_fwalk_reent+0x6c>
    f5e8:	8080038f 	ldh	r2,14(r16)
    f5ec:	800b883a 	mov	r5,r16
    f5f0:	a809883a 	mov	r4,r21
    f5f4:	10bfffe0 	cmpeqi	r2,r2,-1
    f5f8:	1000021e 	bne	r2,zero,f604 <_fwalk_reent+0x6c>
    f5fc:	983ee83a 	callr	r19
    f600:	a0a8b03a 	or	r20,r20,r2
    f604:	88bfffd8 	cmpnei	r2,r17,-1
    f608:	84001a04 	addi	r16,r16,104
    f60c:	103ff21e 	bne	r2,zero,f5d8 <_fwalk_reent+0x40>
    f610:	94800017 	ldw	r18,0(r18)
    f614:	903fec1e 	bne	r18,zero,f5c8 <_fwalk_reent+0x30>
    f618:	a005883a 	mov	r2,r20
    f61c:	dfc00617 	ldw	ra,24(sp)
    f620:	dd400517 	ldw	r21,20(sp)
    f624:	dd000417 	ldw	r20,16(sp)
    f628:	dcc00317 	ldw	r19,12(sp)
    f62c:	dc800217 	ldw	r18,8(sp)
    f630:	dc400117 	ldw	r17,4(sp)
    f634:	dc000017 	ldw	r16,0(sp)
    f638:	dec00704 	addi	sp,sp,28
    f63c:	f800283a 	ret

0000f640 <__localeconv_l>:
    f640:	20803c04 	addi	r2,r4,240
    f644:	f800283a 	ret

0000f648 <_localeconv_r>:
    f648:	008000b4 	movhi	r2,2
    f64c:	10a31504 	addi	r2,r2,-29612
    f650:	f800283a 	ret

0000f654 <localeconv>:
    f654:	008000b4 	movhi	r2,2
    f658:	10a31504 	addi	r2,r2,-29612
    f65c:	f800283a 	ret

0000f660 <__smakebuf_r>:
    f660:	2880030b 	ldhu	r2,12(r5)
    f664:	deffe804 	addi	sp,sp,-96
    f668:	dc001215 	stw	r16,72(sp)
    f66c:	dfc01715 	stw	ra,92(sp)
    f670:	dd001615 	stw	r20,88(sp)
    f674:	dcc01515 	stw	r19,84(sp)
    f678:	dc801415 	stw	r18,80(sp)
    f67c:	dc401315 	stw	r17,76(sp)
    f680:	10c0008c 	andi	r3,r2,2
    f684:	2821883a 	mov	r16,r5
    f688:	18000d26 	beq	r3,zero,f6c0 <__smakebuf_r+0x60>
    f68c:	288010c4 	addi	r2,r5,67
    f690:	28800015 	stw	r2,0(r5)
    f694:	28800415 	stw	r2,16(r5)
    f698:	00800044 	movi	r2,1
    f69c:	28800515 	stw	r2,20(r5)
    f6a0:	dfc01717 	ldw	ra,92(sp)
    f6a4:	dd001617 	ldw	r20,88(sp)
    f6a8:	dcc01517 	ldw	r19,84(sp)
    f6ac:	dc801417 	ldw	r18,80(sp)
    f6b0:	dc401317 	ldw	r17,76(sp)
    f6b4:	dc001217 	ldw	r16,72(sp)
    f6b8:	dec01804 	addi	sp,sp,96
    f6bc:	f800283a 	ret
    f6c0:	2940038f 	ldh	r5,14(r5)
    f6c4:	2023883a 	mov	r17,r4
    f6c8:	28002816 	blt	r5,zero,f76c <__smakebuf_r+0x10c>
    f6cc:	d80d883a 	mov	r6,sp
    f6d0:	00131d40 	call	131d4 <_fstat_r>
    f6d4:	10002416 	blt	r2,zero,f768 <__smakebuf_r+0x108>
    f6d8:	d8800117 	ldw	r2,4(sp)
    f6dc:	10bc000c 	andi	r2,r2,61440
    f6e0:	10880018 	cmpnei	r2,r2,8192
    f6e4:	1000461e 	bne	r2,zero,f800 <__smakebuf_r+0x1a0>
    f6e8:	8140038f 	ldh	r5,14(r16)
    f6ec:	8809883a 	mov	r4,r17
    f6f0:	00132340 	call	13234 <_isatty_r>
    f6f4:	10003e26 	beq	r2,zero,f7f0 <__smakebuf_r+0x190>
    f6f8:	8080030b 	ldhu	r2,12(r16)
    f6fc:	80c010c4 	addi	r3,r16,67
    f700:	80c00015 	stw	r3,0(r16)
    f704:	10800054 	ori	r2,r2,1
    f708:	8080030d 	sth	r2,12(r16)
    f70c:	00800044 	movi	r2,1
    f710:	80c00415 	stw	r3,16(r16)
    f714:	80800515 	stw	r2,20(r16)
    f718:	04c00044 	movi	r19,1
    f71c:	05010004 	movi	r20,1024
    f720:	04820004 	movi	r18,2048
    f724:	a00b883a 	mov	r5,r20
    f728:	8809883a 	mov	r4,r17
    f72c:	0009ea80 	call	9ea8 <_malloc_r>
    f730:	10001726 	beq	r2,zero,f790 <__smakebuf_r+0x130>
    f734:	80c0030b 	ldhu	r3,12(r16)
    f738:	01000074 	movhi	r4,1
    f73c:	213a2c04 	addi	r4,r4,-5968
    f740:	89000f15 	stw	r4,60(r17)
    f744:	18c02014 	ori	r3,r3,128
    f748:	80c0030d 	sth	r3,12(r16)
    f74c:	80800015 	stw	r2,0(r16)
    f750:	80800415 	stw	r2,16(r16)
    f754:	85000515 	stw	r20,20(r16)
    f758:	98001d1e 	bne	r19,zero,f7d0 <__smakebuf_r+0x170>
    f75c:	90c6b03a 	or	r3,r18,r3
    f760:	80c0030d 	sth	r3,12(r16)
    f764:	003fce06 	br	f6a0 <__smakebuf_r+0x40>
    f768:	8080030b 	ldhu	r2,12(r16)
    f76c:	1080200c 	andi	r2,r2,128
    f770:	0027883a 	mov	r19,zero
    f774:	10001326 	beq	r2,zero,f7c4 <__smakebuf_r+0x164>
    f778:	05001004 	movi	r20,64
    f77c:	a00b883a 	mov	r5,r20
    f780:	8809883a 	mov	r4,r17
    f784:	0025883a 	mov	r18,zero
    f788:	0009ea80 	call	9ea8 <_malloc_r>
    f78c:	103fe91e 	bne	r2,zero,f734 <__smakebuf_r+0xd4>
    f790:	8080030b 	ldhu	r2,12(r16)
    f794:	10c0800c 	andi	r3,r2,512
    f798:	183fc11e 	bne	r3,zero,f6a0 <__smakebuf_r+0x40>
    f79c:	00ffff04 	movi	r3,-4
    f7a0:	10c4703a 	and	r2,r2,r3
    f7a4:	10800094 	ori	r2,r2,2
    f7a8:	80c010c4 	addi	r3,r16,67
    f7ac:	8080030d 	sth	r2,12(r16)
    f7b0:	00800044 	movi	r2,1
    f7b4:	80c00015 	stw	r3,0(r16)
    f7b8:	80c00415 	stw	r3,16(r16)
    f7bc:	80800515 	stw	r2,20(r16)
    f7c0:	003fb706 	br	f6a0 <__smakebuf_r+0x40>
    f7c4:	05010004 	movi	r20,1024
    f7c8:	0025883a 	mov	r18,zero
    f7cc:	003fd506 	br	f724 <__smakebuf_r+0xc4>
    f7d0:	8140038f 	ldh	r5,14(r16)
    f7d4:	8809883a 	mov	r4,r17
    f7d8:	00132340 	call	13234 <_isatty_r>
    f7dc:	80c0030b 	ldhu	r3,12(r16)
    f7e0:	103fde26 	beq	r2,zero,f75c <__smakebuf_r+0xfc>
    f7e4:	18ffff0c 	andi	r3,r3,65532
    f7e8:	18c00054 	ori	r3,r3,1
    f7ec:	003fdb06 	br	f75c <__smakebuf_r+0xfc>
    f7f0:	04c00044 	movi	r19,1
    f7f4:	05010004 	movi	r20,1024
    f7f8:	04820004 	movi	r18,2048
    f7fc:	003fc906 	br	f724 <__smakebuf_r+0xc4>
    f800:	0027883a 	mov	r19,zero
    f804:	05010004 	movi	r20,1024
    f808:	04820004 	movi	r18,2048
    f80c:	003fc506 	br	f724 <__smakebuf_r+0xc4>

0000f810 <__swhatbuf_r>:
    f810:	deffea04 	addi	sp,sp,-88
    f814:	dc001215 	stw	r16,72(sp)
    f818:	2821883a 	mov	r16,r5
    f81c:	2940038f 	ldh	r5,14(r5)
    f820:	dc801415 	stw	r18,80(sp)
    f824:	dc401315 	stw	r17,76(sp)
    f828:	dfc01515 	stw	ra,84(sp)
    f82c:	3023883a 	mov	r17,r6
    f830:	3825883a 	mov	r18,r7
    f834:	28001016 	blt	r5,zero,f878 <__swhatbuf_r+0x68>
    f838:	d80d883a 	mov	r6,sp
    f83c:	00131d40 	call	131d4 <_fstat_r>
    f840:	10000d16 	blt	r2,zero,f878 <__swhatbuf_r+0x68>
    f844:	d8c00117 	ldw	r3,4(sp)
    f848:	00820004 	movi	r2,2048
    f84c:	18fc000c 	andi	r3,r3,61440
    f850:	18c80020 	cmpeqi	r3,r3,8192
    f854:	90c00015 	stw	r3,0(r18)
    f858:	00c10004 	movi	r3,1024
    f85c:	88c00015 	stw	r3,0(r17)
    f860:	dfc01517 	ldw	ra,84(sp)
    f864:	dc801417 	ldw	r18,80(sp)
    f868:	dc401317 	ldw	r17,76(sp)
    f86c:	dc001217 	ldw	r16,72(sp)
    f870:	dec01604 	addi	sp,sp,88
    f874:	f800283a 	ret
    f878:	8080030b 	ldhu	r2,12(r16)
    f87c:	90000015 	stw	zero,0(r18)
    f880:	1080200c 	andi	r2,r2,128
    f884:	10000426 	beq	r2,zero,f898 <__swhatbuf_r+0x88>
    f888:	00801004 	movi	r2,64
    f88c:	88800015 	stw	r2,0(r17)
    f890:	0005883a 	mov	r2,zero
    f894:	003ff206 	br	f860 <__swhatbuf_r+0x50>
    f898:	00810004 	movi	r2,1024
    f89c:	88800015 	stw	r2,0(r17)
    f8a0:	0005883a 	mov	r2,zero
    f8a4:	003fee06 	br	f860 <__swhatbuf_r+0x50>

0000f8a8 <memchr>:
    f8a8:	208000cc 	andi	r2,r4,3
    f8ac:	280f883a 	mov	r7,r5
    f8b0:	10000e26 	beq	r2,zero,f8ec <memchr+0x44>
    f8b4:	30bfffc4 	addi	r2,r6,-1
    f8b8:	30001726 	beq	r6,zero,f918 <memchr+0x70>
    f8bc:	29803fcc 	andi	r6,r5,255
    f8c0:	00000606 	br	f8dc <memchr+0x34>
    f8c4:	21000044 	addi	r4,r4,1
    f8c8:	20c000cc 	andi	r3,r4,3
    f8cc:	18000826 	beq	r3,zero,f8f0 <memchr+0x48>
    f8d0:	10bfffc4 	addi	r2,r2,-1
    f8d4:	10ffffe0 	cmpeqi	r3,r2,-1
    f8d8:	18000f1e 	bne	r3,zero,f918 <memchr+0x70>
    f8dc:	20c00003 	ldbu	r3,0(r4)
    f8e0:	19bff81e 	bne	r3,r6,f8c4 <memchr+0x1c>
    f8e4:	2005883a 	mov	r2,r4
    f8e8:	f800283a 	ret
    f8ec:	3005883a 	mov	r2,r6
    f8f0:	10c00128 	cmpgeui	r3,r2,4
    f8f4:	18000a1e 	bne	r3,zero,f920 <memchr+0x78>
    f8f8:	10001e26 	beq	r2,zero,f974 <memchr+0xcc>
    f8fc:	2087883a 	add	r3,r4,r2
    f900:	39803fcc 	andi	r6,r7,255
    f904:	2005883a 	mov	r2,r4
    f908:	11000003 	ldbu	r4,0(r2)
    f90c:	21bff626 	beq	r4,r6,f8e8 <memchr+0x40>
    f910:	10800044 	addi	r2,r2,1
    f914:	18bffc1e 	bne	r3,r2,f908 <memchr+0x60>
    f918:	0005883a 	mov	r2,zero
    f91c:	f800283a 	ret
    f920:	29403fcc 	andi	r5,r5,255
    f924:	280c923a 	slli	r6,r5,8
    f928:	027fbff4 	movhi	r9,65279
    f92c:	02202074 	movhi	r8,32897
    f930:	314ab03a 	or	r5,r6,r5
    f934:	280c943a 	slli	r6,r5,16
    f938:	4a7fbfc4 	addi	r9,r9,-257
    f93c:	42202004 	addi	r8,r8,-32640
    f940:	314cb03a 	or	r6,r6,r5
    f944:	20c00017 	ldw	r3,0(r4)
    f948:	30c6f03a 	xor	r3,r6,r3
    f94c:	1a4b883a 	add	r5,r3,r9
    f950:	00c6303a 	nor	r3,zero,r3
    f954:	28c6703a 	and	r3,r5,r3
    f958:	1a06703a 	and	r3,r3,r8
    f95c:	183fe71e 	bne	r3,zero,f8fc <memchr+0x54>
    f960:	10bfff04 	addi	r2,r2,-4
    f964:	10c00128 	cmpgeui	r3,r2,4
    f968:	21000104 	addi	r4,r4,4
    f96c:	183ff51e 	bne	r3,zero,f944 <memchr+0x9c>
    f970:	003fe106 	br	f8f8 <memchr+0x50>
    f974:	f800283a 	ret

0000f978 <memmove>:
    f978:	2005883a 	mov	r2,r4
    f97c:	29000a2e 	bgeu	r5,r4,f9a8 <memmove+0x30>
    f980:	2989883a 	add	r4,r5,r6
    f984:	1100082e 	bgeu	r2,r4,f9a8 <memmove+0x30>
    f988:	1187883a 	add	r3,r2,r6
    f98c:	30003e26 	beq	r6,zero,fa88 <memmove+0x110>
    f990:	217fffc3 	ldbu	r5,-1(r4)
    f994:	18ffffc4 	addi	r3,r3,-1
    f998:	213fffc4 	addi	r4,r4,-1
    f99c:	19400005 	stb	r5,0(r3)
    f9a0:	10fffb1e 	bne	r2,r3,f990 <memmove+0x18>
    f9a4:	f800283a 	ret
    f9a8:	30c00430 	cmpltui	r3,r6,16
    f9ac:	18000b26 	beq	r3,zero,f9dc <memmove+0x64>
    f9b0:	1007883a 	mov	r3,r2
    f9b4:	31ffffc4 	addi	r7,r6,-1
    f9b8:	30003726 	beq	r6,zero,fa98 <memmove+0x120>
    f9bc:	39c00044 	addi	r7,r7,1
    f9c0:	29cf883a 	add	r7,r5,r7
    f9c4:	29800003 	ldbu	r6,0(r5)
    f9c8:	29400044 	addi	r5,r5,1
    f9cc:	18c00044 	addi	r3,r3,1
    f9d0:	19bfffc5 	stb	r6,-1(r3)
    f9d4:	29fffb1e 	bne	r5,r7,f9c4 <memmove+0x4c>
    f9d8:	f800283a 	ret
    f9dc:	2886b03a 	or	r3,r5,r2
    f9e0:	18c000cc 	andi	r3,r3,3
    f9e4:	1800291e 	bne	r3,zero,fa8c <memmove+0x114>
    f9e8:	327ffc04 	addi	r9,r6,-16
    f9ec:	4812d13a 	srli	r9,r9,4
    f9f0:	280f883a 	mov	r7,r5
    f9f4:	1007883a 	mov	r3,r2
    f9f8:	4a400044 	addi	r9,r9,1
    f9fc:	4812913a 	slli	r9,r9,4
    fa00:	1251883a 	add	r8,r2,r9
    fa04:	39000017 	ldw	r4,0(r7)
    fa08:	39c00404 	addi	r7,r7,16
    fa0c:	18c00404 	addi	r3,r3,16
    fa10:	193ffc15 	stw	r4,-16(r3)
    fa14:	393ffd17 	ldw	r4,-12(r7)
    fa18:	193ffd15 	stw	r4,-12(r3)
    fa1c:	393ffe17 	ldw	r4,-8(r7)
    fa20:	193ffe15 	stw	r4,-8(r3)
    fa24:	393fff17 	ldw	r4,-4(r7)
    fa28:	193fff15 	stw	r4,-4(r3)
    fa2c:	40fff51e 	bne	r8,r3,fa04 <memmove+0x8c>
    fa30:	3100030c 	andi	r4,r6,12
    fa34:	2a4b883a 	add	r5,r5,r9
    fa38:	320003cc 	andi	r8,r6,15
    fa3c:	20001726 	beq	r4,zero,fa9c <memmove+0x124>
    fa40:	2813883a 	mov	r9,r5
    fa44:	180f883a 	mov	r7,r3
    fa48:	4a800017 	ldw	r10,0(r9)
    fa4c:	39c00104 	addi	r7,r7,4
    fa50:	41c9c83a 	sub	r4,r8,r7
    fa54:	1909883a 	add	r4,r3,r4
    fa58:	21000128 	cmpgeui	r4,r4,4
    fa5c:	3abfff15 	stw	r10,-4(r7)
    fa60:	4a400104 	addi	r9,r9,4
    fa64:	203ff81e 	bne	r4,zero,fa48 <memmove+0xd0>
    fa68:	413fff04 	addi	r4,r8,-4
    fa6c:	2008d0ba 	srli	r4,r4,2
    fa70:	318000cc 	andi	r6,r6,3
    fa74:	21000044 	addi	r4,r4,1
    fa78:	200890ba 	slli	r4,r4,2
    fa7c:	1907883a 	add	r3,r3,r4
    fa80:	290b883a 	add	r5,r5,r4
    fa84:	003fcb06 	br	f9b4 <memmove+0x3c>
    fa88:	f800283a 	ret
    fa8c:	31ffffc4 	addi	r7,r6,-1
    fa90:	1007883a 	mov	r3,r2
    fa94:	003fc906 	br	f9bc <memmove+0x44>
    fa98:	f800283a 	ret
    fa9c:	400d883a 	mov	r6,r8
    faa0:	003fc406 	br	f9b4 <memmove+0x3c>

0000faa4 <memset>:
    faa4:	20c000cc 	andi	r3,r4,3
    faa8:	2005883a 	mov	r2,r4
    faac:	18003626 	beq	r3,zero,fb88 <memset+0xe4>
    fab0:	31ffffc4 	addi	r7,r6,-1
    fab4:	30003326 	beq	r6,zero,fb84 <memset+0xe0>
    fab8:	2811883a 	mov	r8,r5
    fabc:	2007883a 	mov	r3,r4
    fac0:	00000306 	br	fad0 <memset+0x2c>
    fac4:	39ffffc4 	addi	r7,r7,-1
    fac8:	39bfffe0 	cmpeqi	r6,r7,-1
    facc:	30002d1e 	bne	r6,zero,fb84 <memset+0xe0>
    fad0:	18c00044 	addi	r3,r3,1
    fad4:	198000cc 	andi	r6,r3,3
    fad8:	1a3fffc5 	stb	r8,-1(r3)
    fadc:	303ff91e 	bne	r6,zero,fac4 <memset+0x20>
    fae0:	39000130 	cmpltui	r4,r7,4
    fae4:	2000221e 	bne	r4,zero,fb70 <memset+0xcc>
    fae8:	29003fcc 	andi	r4,r5,255
    faec:	200c923a 	slli	r6,r4,8
    faf0:	3a000430 	cmpltui	r8,r7,16
    faf4:	3108b03a 	or	r4,r6,r4
    faf8:	200c943a 	slli	r6,r4,16
    fafc:	310cb03a 	or	r6,r6,r4
    fb00:	40000e1e 	bne	r8,zero,fb3c <memset+0x98>
    fb04:	393ffc04 	addi	r4,r7,-16
    fb08:	2008d13a 	srli	r4,r4,4
    fb0c:	21000044 	addi	r4,r4,1
    fb10:	2008913a 	slli	r4,r4,4
    fb14:	1909883a 	add	r4,r3,r4
    fb18:	19800015 	stw	r6,0(r3)
    fb1c:	19800115 	stw	r6,4(r3)
    fb20:	19800215 	stw	r6,8(r3)
    fb24:	19800315 	stw	r6,12(r3)
    fb28:	18c00404 	addi	r3,r3,16
    fb2c:	20fffa1e 	bne	r4,r3,fb18 <memset+0x74>
    fb30:	3900030c 	andi	r4,r7,12
    fb34:	39c003cc 	andi	r7,r7,15
    fb38:	20000d26 	beq	r4,zero,fb70 <memset+0xcc>
    fb3c:	1811883a 	mov	r8,r3
    fb40:	42000104 	addi	r8,r8,4
    fb44:	3a09c83a 	sub	r4,r7,r8
    fb48:	1909883a 	add	r4,r3,r4
    fb4c:	21000128 	cmpgeui	r4,r4,4
    fb50:	41bfff15 	stw	r6,-4(r8)
    fb54:	203ffa1e 	bne	r4,zero,fb40 <memset+0x9c>
    fb58:	393fff04 	addi	r4,r7,-4
    fb5c:	2008d0ba 	srli	r4,r4,2
    fb60:	39c000cc 	andi	r7,r7,3
    fb64:	21000044 	addi	r4,r4,1
    fb68:	200890ba 	slli	r4,r4,2
    fb6c:	1907883a 	add	r3,r3,r4
    fb70:	38000426 	beq	r7,zero,fb84 <memset+0xe0>
    fb74:	19cf883a 	add	r7,r3,r7
    fb78:	18c00044 	addi	r3,r3,1
    fb7c:	197fffc5 	stb	r5,-1(r3)
    fb80:	38fffd1e 	bne	r7,r3,fb78 <memset+0xd4>
    fb84:	f800283a 	ret
    fb88:	2007883a 	mov	r3,r4
    fb8c:	300f883a 	mov	r7,r6
    fb90:	003fd306 	br	fae0 <memset+0x3c>

0000fb94 <_Balloc>:
    fb94:	20801317 	ldw	r2,76(r4)
    fb98:	defffc04 	addi	sp,sp,-16
    fb9c:	dc400115 	stw	r17,4(sp)
    fba0:	dc000015 	stw	r16,0(sp)
    fba4:	dfc00315 	stw	ra,12(sp)
    fba8:	dc800215 	stw	r18,8(sp)
    fbac:	2021883a 	mov	r16,r4
    fbb0:	2823883a 	mov	r17,r5
    fbb4:	10000e26 	beq	r2,zero,fbf0 <_Balloc+0x5c>
    fbb8:	880690ba 	slli	r3,r17,2
    fbbc:	10c7883a 	add	r3,r2,r3
    fbc0:	18800017 	ldw	r2,0(r3)
    fbc4:	10001126 	beq	r2,zero,fc0c <_Balloc+0x78>
    fbc8:	11000017 	ldw	r4,0(r2)
    fbcc:	19000015 	stw	r4,0(r3)
    fbd0:	10000415 	stw	zero,16(r2)
    fbd4:	10000315 	stw	zero,12(r2)
    fbd8:	dfc00317 	ldw	ra,12(sp)
    fbdc:	dc800217 	ldw	r18,8(sp)
    fbe0:	dc400117 	ldw	r17,4(sp)
    fbe4:	dc000017 	ldw	r16,0(sp)
    fbe8:	dec00404 	addi	sp,sp,16
    fbec:	f800283a 	ret
    fbf0:	01800844 	movi	r6,33
    fbf4:	01400104 	movi	r5,4
    fbf8:	0012c880 	call	12c88 <_calloc_r>
    fbfc:	80801315 	stw	r2,76(r16)
    fc00:	103fed1e 	bne	r2,zero,fbb8 <_Balloc+0x24>
    fc04:	0005883a 	mov	r2,zero
    fc08:	003ff306 	br	fbd8 <_Balloc+0x44>
    fc0c:	04800044 	movi	r18,1
    fc10:	9464983a 	sll	r18,r18,r17
    fc14:	01400044 	movi	r5,1
    fc18:	8009883a 	mov	r4,r16
    fc1c:	91800144 	addi	r6,r18,5
    fc20:	300c90ba 	slli	r6,r6,2
    fc24:	0012c880 	call	12c88 <_calloc_r>
    fc28:	103ff626 	beq	r2,zero,fc04 <_Balloc+0x70>
    fc2c:	14400115 	stw	r17,4(r2)
    fc30:	14800215 	stw	r18,8(r2)
    fc34:	003fe606 	br	fbd0 <_Balloc+0x3c>

0000fc38 <_Bfree>:
    fc38:	28000726 	beq	r5,zero,fc58 <_Bfree+0x20>
    fc3c:	28c00117 	ldw	r3,4(r5)
    fc40:	20801317 	ldw	r2,76(r4)
    fc44:	180690ba 	slli	r3,r3,2
    fc48:	10c5883a 	add	r2,r2,r3
    fc4c:	10c00017 	ldw	r3,0(r2)
    fc50:	28c00015 	stw	r3,0(r5)
    fc54:	11400015 	stw	r5,0(r2)
    fc58:	f800283a 	ret

0000fc5c <__multadd>:
    fc5c:	defff704 	addi	sp,sp,-36
    fc60:	dc800215 	stw	r18,8(sp)
    fc64:	2c800417 	ldw	r18,16(r5)
    fc68:	ddc00715 	stw	r23,28(sp)
    fc6c:	dd800615 	stw	r22,24(sp)
    fc70:	dd400515 	stw	r21,20(sp)
    fc74:	dd000415 	stw	r20,16(sp)
    fc78:	dcc00315 	stw	r19,12(sp)
    fc7c:	dc400115 	stw	r17,4(sp)
    fc80:	dfc00815 	stw	ra,32(sp)
    fc84:	dc000015 	stw	r16,0(sp)
    fc88:	2827883a 	mov	r19,r5
    fc8c:	2029883a 	mov	r20,r4
    fc90:	302b883a 	mov	r21,r6
    fc94:	3823883a 	mov	r17,r7
    fc98:	2d800504 	addi	r22,r5,20
    fc9c:	002f883a 	mov	r23,zero
    fca0:	b4000017 	ldw	r16,0(r22)
    fca4:	a80b883a 	mov	r5,r21
    fca8:	b5800104 	addi	r22,r22,4
    fcac:	813fffcc 	andi	r4,r16,65535
    fcb0:	00071240 	call	7124 <__mulsi3>
    fcb4:	8008d43a 	srli	r4,r16,16
    fcb8:	a80b883a 	mov	r5,r21
    fcbc:	1461883a 	add	r16,r2,r17
    fcc0:	00071240 	call	7124 <__mulsi3>
    fcc4:	800ed43a 	srli	r7,r16,16
    fcc8:	843fffcc 	andi	r16,r16,65535
    fccc:	bdc00044 	addi	r23,r23,1
    fcd0:	11c5883a 	add	r2,r2,r7
    fcd4:	1006943a 	slli	r3,r2,16
    fcd8:	1022d43a 	srli	r17,r2,16
    fcdc:	1c21883a 	add	r16,r3,r16
    fce0:	b43fff15 	stw	r16,-4(r22)
    fce4:	bcbfee16 	blt	r23,r18,fca0 <__multadd+0x44>
    fce8:	88000826 	beq	r17,zero,fd0c <__multadd+0xb0>
    fcec:	98800217 	ldw	r2,8(r19)
    fcf0:	9080120e 	bge	r18,r2,fd3c <__multadd+0xe0>
    fcf4:	90800144 	addi	r2,r18,5
    fcf8:	100490ba 	slli	r2,r2,2
    fcfc:	94800044 	addi	r18,r18,1
    fd00:	9885883a 	add	r2,r19,r2
    fd04:	14400015 	stw	r17,0(r2)
    fd08:	9c800415 	stw	r18,16(r19)
    fd0c:	9805883a 	mov	r2,r19
    fd10:	dfc00817 	ldw	ra,32(sp)
    fd14:	ddc00717 	ldw	r23,28(sp)
    fd18:	dd800617 	ldw	r22,24(sp)
    fd1c:	dd400517 	ldw	r21,20(sp)
    fd20:	dd000417 	ldw	r20,16(sp)
    fd24:	dcc00317 	ldw	r19,12(sp)
    fd28:	dc800217 	ldw	r18,8(sp)
    fd2c:	dc400117 	ldw	r17,4(sp)
    fd30:	dc000017 	ldw	r16,0(sp)
    fd34:	dec00904 	addi	sp,sp,36
    fd38:	f800283a 	ret
    fd3c:	99400117 	ldw	r5,4(r19)
    fd40:	a009883a 	mov	r4,r20
    fd44:	29400044 	addi	r5,r5,1
    fd48:	000fb940 	call	fb94 <_Balloc>
    fd4c:	1021883a 	mov	r16,r2
    fd50:	10001226 	beq	r2,zero,fd9c <__multadd+0x140>
    fd54:	99800417 	ldw	r6,16(r19)
    fd58:	99400304 	addi	r5,r19,12
    fd5c:	11000304 	addi	r4,r2,12
    fd60:	31800084 	addi	r6,r6,2
    fd64:	300c90ba 	slli	r6,r6,2
    fd68:	000a6880 	call	a688 <memcpy>
    fd6c:	98000926 	beq	r19,zero,fd94 <__multadd+0x138>
    fd70:	98c00117 	ldw	r3,4(r19)
    fd74:	a0801317 	ldw	r2,76(r20)
    fd78:	180690ba 	slli	r3,r3,2
    fd7c:	10c5883a 	add	r2,r2,r3
    fd80:	10c00017 	ldw	r3,0(r2)
    fd84:	98c00015 	stw	r3,0(r19)
    fd88:	14c00015 	stw	r19,0(r2)
    fd8c:	8027883a 	mov	r19,r16
    fd90:	003fd806 	br	fcf4 <__multadd+0x98>
    fd94:	8027883a 	mov	r19,r16
    fd98:	003fd606 	br	fcf4 <__multadd+0x98>
    fd9c:	01c00074 	movhi	r7,1
    fda0:	01000074 	movhi	r4,1
    fda4:	39df8304 	addi	r7,r7,32268
    fda8:	000d883a 	mov	r6,zero
    fdac:	01402d44 	movi	r5,181
    fdb0:	211f9804 	addi	r4,r4,32352
    fdb4:	0012c100 	call	12c10 <__assert_func>

0000fdb8 <__s2b>:
    fdb8:	defff904 	addi	sp,sp,-28
    fdbc:	dc800215 	stw	r18,8(sp)
    fdc0:	dc000015 	stw	r16,0(sp)
    fdc4:	2025883a 	mov	r18,r4
    fdc8:	2821883a 	mov	r16,r5
    fdcc:	39000204 	addi	r4,r7,8
    fdd0:	01400244 	movi	r5,9
    fdd4:	dcc00315 	stw	r19,12(sp)
    fdd8:	dc400115 	stw	r17,4(sp)
    fddc:	dfc00615 	stw	ra,24(sp)
    fde0:	3823883a 	mov	r17,r7
    fde4:	dd400515 	stw	r21,20(sp)
    fde8:	dd000415 	stw	r20,16(sp)
    fdec:	3027883a 	mov	r19,r6
    fdf0:	0006f700 	call	6f70 <__divsi3>
    fdf4:	88c00290 	cmplti	r3,r17,10
    fdf8:	1800341e 	bne	r3,zero,fecc <__s2b+0x114>
    fdfc:	00c00044 	movi	r3,1
    fe00:	000b883a 	mov	r5,zero
    fe04:	18c7883a 	add	r3,r3,r3
    fe08:	29400044 	addi	r5,r5,1
    fe0c:	18bffd16 	blt	r3,r2,fe04 <__s2b+0x4c>
    fe10:	9009883a 	mov	r4,r18
    fe14:	000fb940 	call	fb94 <_Balloc>
    fe18:	100b883a 	mov	r5,r2
    fe1c:	10002d26 	beq	r2,zero,fed4 <__s2b+0x11c>
    fe20:	d8800717 	ldw	r2,28(sp)
    fe24:	28800515 	stw	r2,20(r5)
    fe28:	00800044 	movi	r2,1
    fe2c:	28800415 	stw	r2,16(r5)
    fe30:	98800290 	cmplti	r2,r19,10
    fe34:	1000221e 	bne	r2,zero,fec0 <__s2b+0x108>
    fe38:	85400244 	addi	r21,r16,9
    fe3c:	a829883a 	mov	r20,r21
    fe40:	84e1883a 	add	r16,r16,r19
    fe44:	a1c00007 	ldb	r7,0(r20)
    fe48:	01800284 	movi	r6,10
    fe4c:	9009883a 	mov	r4,r18
    fe50:	39fff404 	addi	r7,r7,-48
    fe54:	000fc5c0 	call	fc5c <__multadd>
    fe58:	a5000044 	addi	r20,r20,1
    fe5c:	100b883a 	mov	r5,r2
    fe60:	a43ff81e 	bne	r20,r16,fe44 <__s2b+0x8c>
    fe64:	9c3ffe04 	addi	r16,r19,-8
    fe68:	ac21883a 	add	r16,r21,r16
    fe6c:	9c400a0e 	bge	r19,r17,fe98 <__s2b+0xe0>
    fe70:	8ce3c83a 	sub	r17,r17,r19
    fe74:	8463883a 	add	r17,r16,r17
    fe78:	81c00007 	ldb	r7,0(r16)
    fe7c:	01800284 	movi	r6,10
    fe80:	9009883a 	mov	r4,r18
    fe84:	39fff404 	addi	r7,r7,-48
    fe88:	000fc5c0 	call	fc5c <__multadd>
    fe8c:	84000044 	addi	r16,r16,1
    fe90:	100b883a 	mov	r5,r2
    fe94:	8c3ff81e 	bne	r17,r16,fe78 <__s2b+0xc0>
    fe98:	2805883a 	mov	r2,r5
    fe9c:	dfc00617 	ldw	ra,24(sp)
    fea0:	dd400517 	ldw	r21,20(sp)
    fea4:	dd000417 	ldw	r20,16(sp)
    fea8:	dcc00317 	ldw	r19,12(sp)
    feac:	dc800217 	ldw	r18,8(sp)
    feb0:	dc400117 	ldw	r17,4(sp)
    feb4:	dc000017 	ldw	r16,0(sp)
    feb8:	dec00704 	addi	sp,sp,28
    febc:	f800283a 	ret
    fec0:	84000284 	addi	r16,r16,10
    fec4:	04c00244 	movi	r19,9
    fec8:	003fe806 	br	fe6c <__s2b+0xb4>
    fecc:	000b883a 	mov	r5,zero
    fed0:	003fcf06 	br	fe10 <__s2b+0x58>
    fed4:	01c00074 	movhi	r7,1
    fed8:	01000074 	movhi	r4,1
    fedc:	39df8304 	addi	r7,r7,32268
    fee0:	000d883a 	mov	r6,zero
    fee4:	01403384 	movi	r5,206
    fee8:	211f9804 	addi	r4,r4,32352
    feec:	0012c100 	call	12c10 <__assert_func>

0000fef0 <__hi0bits>:
    fef0:	20bfffec 	andhi	r2,r4,65535
    fef4:	1000131e 	bne	r2,zero,ff44 <__hi0bits+0x54>
    fef8:	2008943a 	slli	r4,r4,16
    fefc:	00800404 	movi	r2,16
    ff00:	20ffc02c 	andhi	r3,r4,65280
    ff04:	1800021e 	bne	r3,zero,ff10 <__hi0bits+0x20>
    ff08:	2008923a 	slli	r4,r4,8
    ff0c:	10800204 	addi	r2,r2,8
    ff10:	20fc002c 	andhi	r3,r4,61440
    ff14:	1800021e 	bne	r3,zero,ff20 <__hi0bits+0x30>
    ff18:	2008913a 	slli	r4,r4,4
    ff1c:	10800104 	addi	r2,r2,4
    ff20:	20f0002c 	andhi	r3,r4,49152
    ff24:	1800021e 	bne	r3,zero,ff30 <__hi0bits+0x40>
    ff28:	200890ba 	slli	r4,r4,2
    ff2c:	10800084 	addi	r2,r2,2
    ff30:	20000316 	blt	r4,zero,ff40 <__hi0bits+0x50>
    ff34:	2110002c 	andhi	r4,r4,16384
    ff38:	10800044 	addi	r2,r2,1
    ff3c:	20000326 	beq	r4,zero,ff4c <__hi0bits+0x5c>
    ff40:	f800283a 	ret
    ff44:	0005883a 	mov	r2,zero
    ff48:	003fed06 	br	ff00 <__hi0bits+0x10>
    ff4c:	00800804 	movi	r2,32
    ff50:	f800283a 	ret

0000ff54 <__lo0bits>:
    ff54:	20c00017 	ldw	r3,0(r4)
    ff58:	188001cc 	andi	r2,r3,7
    ff5c:	10000826 	beq	r2,zero,ff80 <__lo0bits+0x2c>
    ff60:	1880004c 	andi	r2,r3,1
    ff64:	10001f1e 	bne	r2,zero,ffe4 <__lo0bits+0x90>
    ff68:	1880008c 	andi	r2,r3,2
    ff6c:	10002126 	beq	r2,zero,fff4 <__lo0bits+0xa0>
    ff70:	1806d07a 	srli	r3,r3,1
    ff74:	00800044 	movi	r2,1
    ff78:	20c00015 	stw	r3,0(r4)
    ff7c:	f800283a 	ret
    ff80:	18bfffcc 	andi	r2,r3,65535
    ff84:	10001426 	beq	r2,zero,ffd8 <__lo0bits+0x84>
    ff88:	0005883a 	mov	r2,zero
    ff8c:	19403fcc 	andi	r5,r3,255
    ff90:	2800021e 	bne	r5,zero,ff9c <__lo0bits+0x48>
    ff94:	1806d23a 	srli	r3,r3,8
    ff98:	10800204 	addi	r2,r2,8
    ff9c:	194003cc 	andi	r5,r3,15
    ffa0:	2800021e 	bne	r5,zero,ffac <__lo0bits+0x58>
    ffa4:	1806d13a 	srli	r3,r3,4
    ffa8:	10800104 	addi	r2,r2,4
    ffac:	194000cc 	andi	r5,r3,3
    ffb0:	2800021e 	bne	r5,zero,ffbc <__lo0bits+0x68>
    ffb4:	1806d0ba 	srli	r3,r3,2
    ffb8:	10800084 	addi	r2,r2,2
    ffbc:	1940004c 	andi	r5,r3,1
    ffc0:	2800031e 	bne	r5,zero,ffd0 <__lo0bits+0x7c>
    ffc4:	1806d07a 	srli	r3,r3,1
    ffc8:	10800044 	addi	r2,r2,1
    ffcc:	18000726 	beq	r3,zero,ffec <__lo0bits+0x98>
    ffd0:	20c00015 	stw	r3,0(r4)
    ffd4:	f800283a 	ret
    ffd8:	1806d43a 	srli	r3,r3,16
    ffdc:	00800404 	movi	r2,16
    ffe0:	003fea06 	br	ff8c <__lo0bits+0x38>
    ffe4:	0005883a 	mov	r2,zero
    ffe8:	f800283a 	ret
    ffec:	00800804 	movi	r2,32
    fff0:	f800283a 	ret
    fff4:	1806d0ba 	srli	r3,r3,2
    fff8:	00800084 	movi	r2,2
    fffc:	20c00015 	stw	r3,0(r4)
   10000:	f800283a 	ret

00010004 <__i2b>:
   10004:	20c01317 	ldw	r3,76(r4)
   10008:	defffd04 	addi	sp,sp,-12
   1000c:	dc400115 	stw	r17,4(sp)
   10010:	dc000015 	stw	r16,0(sp)
   10014:	dfc00215 	stw	ra,8(sp)
   10018:	2021883a 	mov	r16,r4
   1001c:	2823883a 	mov	r17,r5
   10020:	18000d26 	beq	r3,zero,10058 <__i2b+0x54>
   10024:	18800117 	ldw	r2,4(r3)
   10028:	10001826 	beq	r2,zero,1008c <__i2b+0x88>
   1002c:	11000017 	ldw	r4,0(r2)
   10030:	19000115 	stw	r4,4(r3)
   10034:	00c00044 	movi	r3,1
   10038:	10000315 	stw	zero,12(r2)
   1003c:	14400515 	stw	r17,20(r2)
   10040:	10c00415 	stw	r3,16(r2)
   10044:	dfc00217 	ldw	ra,8(sp)
   10048:	dc400117 	ldw	r17,4(sp)
   1004c:	dc000017 	ldw	r16,0(sp)
   10050:	dec00304 	addi	sp,sp,12
   10054:	f800283a 	ret
   10058:	01800844 	movi	r6,33
   1005c:	01400104 	movi	r5,4
   10060:	0012c880 	call	12c88 <_calloc_r>
   10064:	80801315 	stw	r2,76(r16)
   10068:	1007883a 	mov	r3,r2
   1006c:	103fed1e 	bne	r2,zero,10024 <__i2b+0x20>
   10070:	01c00074 	movhi	r7,1
   10074:	01000074 	movhi	r4,1
   10078:	39df8304 	addi	r7,r7,32268
   1007c:	000d883a 	mov	r6,zero
   10080:	01405004 	movi	r5,320
   10084:	211f9804 	addi	r4,r4,32352
   10088:	0012c100 	call	12c10 <__assert_func>
   1008c:	01800704 	movi	r6,28
   10090:	01400044 	movi	r5,1
   10094:	8009883a 	mov	r4,r16
   10098:	0012c880 	call	12c88 <_calloc_r>
   1009c:	103ff426 	beq	r2,zero,10070 <__i2b+0x6c>
   100a0:	00c00044 	movi	r3,1
   100a4:	10c00115 	stw	r3,4(r2)
   100a8:	00c00084 	movi	r3,2
   100ac:	10c00215 	stw	r3,8(r2)
   100b0:	003fe006 	br	10034 <__i2b+0x30>

000100b4 <__multiply>:
   100b4:	defff004 	addi	sp,sp,-64
   100b8:	dd800c15 	stw	r22,48(sp)
   100bc:	dc400715 	stw	r17,28(sp)
   100c0:	2d800417 	ldw	r22,16(r5)
   100c4:	34400417 	ldw	r17,16(r6)
   100c8:	dc800815 	stw	r18,32(sp)
   100cc:	dc000615 	stw	r16,24(sp)
   100d0:	dfc00f15 	stw	ra,60(sp)
   100d4:	df000e15 	stw	fp,56(sp)
   100d8:	ddc00d15 	stw	r23,52(sp)
   100dc:	dd400b15 	stw	r21,44(sp)
   100e0:	dd000a15 	stw	r20,40(sp)
   100e4:	dcc00915 	stw	r19,36(sp)
   100e8:	2825883a 	mov	r18,r5
   100ec:	3021883a 	mov	r16,r6
   100f0:	b4400516 	blt	r22,r17,10108 <__multiply+0x54>
   100f4:	8807883a 	mov	r3,r17
   100f8:	2821883a 	mov	r16,r5
   100fc:	b023883a 	mov	r17,r22
   10100:	3025883a 	mov	r18,r6
   10104:	182d883a 	mov	r22,r3
   10108:	80800217 	ldw	r2,8(r16)
   1010c:	8d87883a 	add	r3,r17,r22
   10110:	d8c00015 	stw	r3,0(sp)
   10114:	81400117 	ldw	r5,4(r16)
   10118:	10c0010e 	bge	r2,r3,10120 <__multiply+0x6c>
   1011c:	29400044 	addi	r5,r5,1
   10120:	000fb940 	call	fb94 <_Balloc>
   10124:	d8800515 	stw	r2,20(sp)
   10128:	10008c26 	beq	r2,zero,1035c <__multiply+0x2a8>
   1012c:	d8800017 	ldw	r2,0(sp)
   10130:	102690ba 	slli	r19,r2,2
   10134:	d8800517 	ldw	r2,20(sp)
   10138:	15000504 	addi	r20,r2,20
   1013c:	a4c5883a 	add	r2,r20,r19
   10140:	d8800115 	stw	r2,4(sp)
   10144:	a0800a2e 	bgeu	r20,r2,10170 <__multiply+0xbc>
   10148:	d8800117 	ldw	r2,4(sp)
   1014c:	d8c00517 	ldw	r3,20(sp)
   10150:	000b883a 	mov	r5,zero
   10154:	a009883a 	mov	r4,r20
   10158:	10cdc83a 	sub	r6,r2,r3
   1015c:	31bffac4 	addi	r6,r6,-21
   10160:	300cd0ba 	srli	r6,r6,2
   10164:	31800044 	addi	r6,r6,1
   10168:	300c90ba 	slli	r6,r6,2
   1016c:	000faa40 	call	faa4 <memset>
   10170:	b02c90ba 	slli	r22,r22,2
   10174:	882290ba 	slli	r17,r17,2
   10178:	94800504 	addi	r18,r18,20
   1017c:	80800504 	addi	r2,r16,20
   10180:	9587883a 	add	r3,r18,r22
   10184:	d8800315 	stw	r2,12(sp)
   10188:	d8c00215 	stw	r3,8(sp)
   1018c:	1463883a 	add	r17,r2,r17
   10190:	90c0542e 	bgeu	r18,r3,102e4 <__multiply+0x230>
   10194:	80800544 	addi	r2,r16,21
   10198:	88806d36 	bltu	r17,r2,10350 <__multiply+0x29c>
   1019c:	8c05c83a 	sub	r2,r17,r16
   101a0:	10bffac4 	addi	r2,r2,-21
   101a4:	1004d0ba 	srli	r2,r2,2
   101a8:	10800044 	addi	r2,r2,1
   101ac:	100490ba 	slli	r2,r2,2
   101b0:	d8800415 	stw	r2,16(sp)
   101b4:	00000606 	br	101d0 <__multiply+0x11c>
   101b8:	102ad43a 	srli	r21,r2,16
   101bc:	a800271e 	bne	r21,zero,1025c <__multiply+0x1a8>
   101c0:	d8800217 	ldw	r2,8(sp)
   101c4:	94800104 	addi	r18,r18,4
   101c8:	a5000104 	addi	r20,r20,4
   101cc:	9080452e 	bgeu	r18,r2,102e4 <__multiply+0x230>
   101d0:	90800017 	ldw	r2,0(r18)
   101d4:	15ffffcc 	andi	r23,r2,65535
   101d8:	b83ff726 	beq	r23,zero,101b8 <__multiply+0x104>
   101dc:	dd400317 	ldw	r21,12(sp)
   101e0:	a02d883a 	mov	r22,r20
   101e4:	0027883a 	mov	r19,zero
   101e8:	af000017 	ldw	fp,0(r21)
   101ec:	b4000017 	ldw	r16,0(r22)
   101f0:	b80b883a 	mov	r5,r23
   101f4:	e13fffcc 	andi	r4,fp,65535
   101f8:	00071240 	call	7124 <__mulsi3>
   101fc:	e008d43a 	srli	r4,fp,16
   10200:	823fffcc 	andi	r8,r16,65535
   10204:	1205883a 	add	r2,r2,r8
   10208:	b80b883a 	mov	r5,r23
   1020c:	14e7883a 	add	r19,r2,r19
   10210:	8020d43a 	srli	r16,r16,16
   10214:	00071240 	call	7124 <__mulsi3>
   10218:	9808d43a 	srli	r4,r19,16
   1021c:	1405883a 	add	r2,r2,r16
   10220:	98ffffcc 	andi	r3,r19,65535
   10224:	1105883a 	add	r2,r2,r4
   10228:	1008943a 	slli	r4,r2,16
   1022c:	b5800104 	addi	r22,r22,4
   10230:	ad400104 	addi	r21,r21,4
   10234:	20c6b03a 	or	r3,r4,r3
   10238:	b0ffff15 	stw	r3,-4(r22)
   1023c:	1026d43a 	srli	r19,r2,16
   10240:	ac7fe936 	bltu	r21,r17,101e8 <__multiply+0x134>
   10244:	d8800417 	ldw	r2,16(sp)
   10248:	a085883a 	add	r2,r20,r2
   1024c:	14c00015 	stw	r19,0(r2)
   10250:	90800017 	ldw	r2,0(r18)
   10254:	102ad43a 	srli	r21,r2,16
   10258:	a83fd926 	beq	r21,zero,101c0 <__multiply+0x10c>
   1025c:	a5c00017 	ldw	r23,0(r20)
   10260:	dd800317 	ldw	r22,12(sp)
   10264:	a027883a 	mov	r19,r20
   10268:	b821883a 	mov	r16,r23
   1026c:	0039883a 	mov	fp,zero
   10270:	b100000b 	ldhu	r4,0(r22)
   10274:	a80b883a 	mov	r5,r21
   10278:	9cc00104 	addi	r19,r19,4
   1027c:	00071240 	call	7124 <__mulsi3>
   10280:	800cd43a 	srli	r6,r16,16
   10284:	b8ffffcc 	andi	r3,r23,65535
   10288:	b5800104 	addi	r22,r22,4
   1028c:	118d883a 	add	r6,r2,r6
   10290:	3739883a 	add	fp,r6,fp
   10294:	e004943a 	slli	r2,fp,16
   10298:	9c000017 	ldw	r16,0(r19)
   1029c:	a80b883a 	mov	r5,r21
   102a0:	10c6b03a 	or	r3,r2,r3
   102a4:	98ffff15 	stw	r3,-4(r19)
   102a8:	b13fff8b 	ldhu	r4,-2(r22)
   102ac:	00071240 	call	7124 <__mulsi3>
   102b0:	e00cd43a 	srli	r6,fp,16
   102b4:	80ffffcc 	andi	r3,r16,65535
   102b8:	10c7883a 	add	r3,r2,r3
   102bc:	19af883a 	add	r23,r3,r6
   102c0:	b838d43a 	srli	fp,r23,16
   102c4:	b47fea36 	bltu	r22,r17,10270 <__multiply+0x1bc>
   102c8:	d8800417 	ldw	r2,16(sp)
   102cc:	94800104 	addi	r18,r18,4
   102d0:	a085883a 	add	r2,r20,r2
   102d4:	15c00015 	stw	r23,0(r2)
   102d8:	d8800217 	ldw	r2,8(sp)
   102dc:	a5000104 	addi	r20,r20,4
   102e0:	90bfbb36 	bltu	r18,r2,101d0 <__multiply+0x11c>
   102e4:	d8800017 	ldw	r2,0(sp)
   102e8:	00800516 	blt	zero,r2,10300 <__multiply+0x24c>
   102ec:	00000906 	br	10314 <__multiply+0x260>
   102f0:	d8800017 	ldw	r2,0(sp)
   102f4:	10bfffc4 	addi	r2,r2,-1
   102f8:	d8800015 	stw	r2,0(sp)
   102fc:	10000526 	beq	r2,zero,10314 <__multiply+0x260>
   10300:	d8c00117 	ldw	r3,4(sp)
   10304:	18bfff17 	ldw	r2,-4(r3)
   10308:	18ffff04 	addi	r3,r3,-4
   1030c:	d8c00115 	stw	r3,4(sp)
   10310:	103ff726 	beq	r2,zero,102f0 <__multiply+0x23c>
   10314:	d8800517 	ldw	r2,20(sp)
   10318:	d8c00017 	ldw	r3,0(sp)
   1031c:	10c00415 	stw	r3,16(r2)
   10320:	dfc00f17 	ldw	ra,60(sp)
   10324:	df000e17 	ldw	fp,56(sp)
   10328:	ddc00d17 	ldw	r23,52(sp)
   1032c:	dd800c17 	ldw	r22,48(sp)
   10330:	dd400b17 	ldw	r21,44(sp)
   10334:	dd000a17 	ldw	r20,40(sp)
   10338:	dcc00917 	ldw	r19,36(sp)
   1033c:	dc800817 	ldw	r18,32(sp)
   10340:	dc400717 	ldw	r17,28(sp)
   10344:	dc000617 	ldw	r16,24(sp)
   10348:	dec01004 	addi	sp,sp,64
   1034c:	f800283a 	ret
   10350:	00800104 	movi	r2,4
   10354:	d8800415 	stw	r2,16(sp)
   10358:	003f9d06 	br	101d0 <__multiply+0x11c>
   1035c:	01c00074 	movhi	r7,1
   10360:	01000074 	movhi	r4,1
   10364:	39df8304 	addi	r7,r7,32268
   10368:	000d883a 	mov	r6,zero
   1036c:	01405744 	movi	r5,349
   10370:	211f9804 	addi	r4,r4,32352
   10374:	0012c100 	call	12c10 <__assert_func>

00010378 <__pow5mult>:
   10378:	defffb04 	addi	sp,sp,-20
   1037c:	dcc00315 	stw	r19,12(sp)
   10380:	dc000015 	stw	r16,0(sp)
   10384:	dfc00415 	stw	ra,16(sp)
   10388:	dc800215 	stw	r18,8(sp)
   1038c:	dc400115 	stw	r17,4(sp)
   10390:	308000cc 	andi	r2,r6,3
   10394:	3021883a 	mov	r16,r6
   10398:	2027883a 	mov	r19,r4
   1039c:	10002d1e 	bne	r2,zero,10454 <__pow5mult+0xdc>
   103a0:	2825883a 	mov	r18,r5
   103a4:	8021d0ba 	srai	r16,r16,2
   103a8:	80001926 	beq	r16,zero,10410 <__pow5mult+0x98>
   103ac:	9c401217 	ldw	r17,72(r19)
   103b0:	8800061e 	bne	r17,zero,103cc <__pow5mult+0x54>
   103b4:	00002f06 	br	10474 <__pow5mult+0xfc>
   103b8:	8021d07a 	srai	r16,r16,1
   103bc:	80001426 	beq	r16,zero,10410 <__pow5mult+0x98>
   103c0:	88800017 	ldw	r2,0(r17)
   103c4:	10001a26 	beq	r2,zero,10430 <__pow5mult+0xb8>
   103c8:	1023883a 	mov	r17,r2
   103cc:	8080004c 	andi	r2,r16,1
   103d0:	103ff926 	beq	r2,zero,103b8 <__pow5mult+0x40>
   103d4:	880d883a 	mov	r6,r17
   103d8:	900b883a 	mov	r5,r18
   103dc:	9809883a 	mov	r4,r19
   103e0:	00100b40 	call	100b4 <__multiply>
   103e4:	90001926 	beq	r18,zero,1044c <__pow5mult+0xd4>
   103e8:	91000117 	ldw	r4,4(r18)
   103ec:	98c01317 	ldw	r3,76(r19)
   103f0:	8021d07a 	srai	r16,r16,1
   103f4:	200890ba 	slli	r4,r4,2
   103f8:	1907883a 	add	r3,r3,r4
   103fc:	19000017 	ldw	r4,0(r3)
   10400:	91000015 	stw	r4,0(r18)
   10404:	1c800015 	stw	r18,0(r3)
   10408:	1025883a 	mov	r18,r2
   1040c:	803fec1e 	bne	r16,zero,103c0 <__pow5mult+0x48>
   10410:	9005883a 	mov	r2,r18
   10414:	dfc00417 	ldw	ra,16(sp)
   10418:	dcc00317 	ldw	r19,12(sp)
   1041c:	dc800217 	ldw	r18,8(sp)
   10420:	dc400117 	ldw	r17,4(sp)
   10424:	dc000017 	ldw	r16,0(sp)
   10428:	dec00504 	addi	sp,sp,20
   1042c:	f800283a 	ret
   10430:	880d883a 	mov	r6,r17
   10434:	880b883a 	mov	r5,r17
   10438:	9809883a 	mov	r4,r19
   1043c:	00100b40 	call	100b4 <__multiply>
   10440:	88800015 	stw	r2,0(r17)
   10444:	10000015 	stw	zero,0(r2)
   10448:	003fdf06 	br	103c8 <__pow5mult+0x50>
   1044c:	1025883a 	mov	r18,r2
   10450:	003fd906 	br	103b8 <__pow5mult+0x40>
   10454:	100490ba 	slli	r2,r2,2
   10458:	00c00074 	movhi	r3,1
   1045c:	000f883a 	mov	r7,zero
   10460:	10c7883a 	add	r3,r2,r3
   10464:	199fa717 	ldw	r6,32412(r3)
   10468:	000fc5c0 	call	fc5c <__multadd>
   1046c:	1025883a 	mov	r18,r2
   10470:	003fcc06 	br	103a4 <__pow5mult+0x2c>
   10474:	01400044 	movi	r5,1
   10478:	9809883a 	mov	r4,r19
   1047c:	000fb940 	call	fb94 <_Balloc>
   10480:	1023883a 	mov	r17,r2
   10484:	10000726 	beq	r2,zero,104a4 <__pow5mult+0x12c>
   10488:	00809c44 	movi	r2,625
   1048c:	88800515 	stw	r2,20(r17)
   10490:	00800044 	movi	r2,1
   10494:	88800415 	stw	r2,16(r17)
   10498:	9c401215 	stw	r17,72(r19)
   1049c:	88000015 	stw	zero,0(r17)
   104a0:	003fca06 	br	103cc <__pow5mult+0x54>
   104a4:	01c00074 	movhi	r7,1
   104a8:	01000074 	movhi	r4,1
   104ac:	39df8304 	addi	r7,r7,32268
   104b0:	000d883a 	mov	r6,zero
   104b4:	01405004 	movi	r5,320
   104b8:	211f9804 	addi	r4,r4,32352
   104bc:	0012c100 	call	12c10 <__assert_func>

000104c0 <__lshift>:
   104c0:	defff804 	addi	sp,sp,-32
   104c4:	dd800615 	stw	r22,24(sp)
   104c8:	dc000015 	stw	r16,0(sp)
   104cc:	302dd17a 	srai	r22,r6,5
   104d0:	2c000417 	ldw	r16,16(r5)
   104d4:	28800217 	ldw	r2,8(r5)
   104d8:	dd000415 	stw	r20,16(sp)
   104dc:	b421883a 	add	r16,r22,r16
   104e0:	dcc00315 	stw	r19,12(sp)
   104e4:	dc800215 	stw	r18,8(sp)
   104e8:	dc400115 	stw	r17,4(sp)
   104ec:	dfc00715 	stw	ra,28(sp)
   104f0:	dd400515 	stw	r21,20(sp)
   104f4:	85000044 	addi	r20,r16,1
   104f8:	2827883a 	mov	r19,r5
   104fc:	3025883a 	mov	r18,r6
   10500:	29400117 	ldw	r5,4(r5)
   10504:	2023883a 	mov	r17,r4
   10508:	1500030e 	bge	r2,r20,10518 <__lshift+0x58>
   1050c:	1085883a 	add	r2,r2,r2
   10510:	29400044 	addi	r5,r5,1
   10514:	153ffd16 	blt	r2,r20,1050c <__lshift+0x4c>
   10518:	8809883a 	mov	r4,r17
   1051c:	000fb940 	call	fb94 <_Balloc>
   10520:	102b883a 	mov	r21,r2
   10524:	10004126 	beq	r2,zero,1062c <__lshift+0x16c>
   10528:	11000504 	addi	r4,r2,20
   1052c:	0580050e 	bge	zero,r22,10544 <__lshift+0x84>
   10530:	b02c90ba 	slli	r22,r22,2
   10534:	000b883a 	mov	r5,zero
   10538:	b00d883a 	mov	r6,r22
   1053c:	000faa40 	call	faa4 <memset>
   10540:	1589883a 	add	r4,r2,r22
   10544:	9a000417 	ldw	r8,16(r19)
   10548:	98c00504 	addi	r3,r19,20
   1054c:	948007cc 	andi	r18,r18,31
   10550:	401090ba 	slli	r8,r8,2
   10554:	1a11883a 	add	r8,r3,r8
   10558:	90002c26 	beq	r18,zero,1060c <__lshift+0x14c>
   1055c:	01400804 	movi	r5,32
   10560:	2c8bc83a 	sub	r5,r5,r18
   10564:	2005883a 	mov	r2,r4
   10568:	000f883a 	mov	r7,zero
   1056c:	19800017 	ldw	r6,0(r3)
   10570:	10800104 	addi	r2,r2,4
   10574:	18c00104 	addi	r3,r3,4
   10578:	348c983a 	sll	r6,r6,r18
   1057c:	31ccb03a 	or	r6,r6,r7
   10580:	11bfff15 	stw	r6,-4(r2)
   10584:	19bfff17 	ldw	r6,-4(r3)
   10588:	314ed83a 	srl	r7,r6,r5
   1058c:	1a3ff736 	bltu	r3,r8,1056c <__lshift+0xac>
   10590:	98800544 	addi	r2,r19,21
   10594:	40802336 	bltu	r8,r2,10624 <__lshift+0x164>
   10598:	44c7c83a 	sub	r3,r8,r19
   1059c:	18fffac4 	addi	r3,r3,-21
   105a0:	1806d0ba 	srli	r3,r3,2
   105a4:	18c00044 	addi	r3,r3,1
   105a8:	180690ba 	slli	r3,r3,2
   105ac:	20c9883a 	add	r4,r4,r3
   105b0:	21c00015 	stw	r7,0(r4)
   105b4:	38000126 	beq	r7,zero,105bc <__lshift+0xfc>
   105b8:	a021883a 	mov	r16,r20
   105bc:	ac000415 	stw	r16,16(r21)
   105c0:	98000726 	beq	r19,zero,105e0 <__lshift+0x120>
   105c4:	98c00117 	ldw	r3,4(r19)
   105c8:	88801317 	ldw	r2,76(r17)
   105cc:	180690ba 	slli	r3,r3,2
   105d0:	10c5883a 	add	r2,r2,r3
   105d4:	10c00017 	ldw	r3,0(r2)
   105d8:	98c00015 	stw	r3,0(r19)
   105dc:	14c00015 	stw	r19,0(r2)
   105e0:	a805883a 	mov	r2,r21
   105e4:	dfc00717 	ldw	ra,28(sp)
   105e8:	dd800617 	ldw	r22,24(sp)
   105ec:	dd400517 	ldw	r21,20(sp)
   105f0:	dd000417 	ldw	r20,16(sp)
   105f4:	dcc00317 	ldw	r19,12(sp)
   105f8:	dc800217 	ldw	r18,8(sp)
   105fc:	dc400117 	ldw	r17,4(sp)
   10600:	dc000017 	ldw	r16,0(sp)
   10604:	dec00804 	addi	sp,sp,32
   10608:	f800283a 	ret
   1060c:	18800017 	ldw	r2,0(r3)
   10610:	18c00104 	addi	r3,r3,4
   10614:	21000104 	addi	r4,r4,4
   10618:	20bfff15 	stw	r2,-4(r4)
   1061c:	1a3ffb36 	bltu	r3,r8,1060c <__lshift+0x14c>
   10620:	003fe606 	br	105bc <__lshift+0xfc>
   10624:	00c00104 	movi	r3,4
   10628:	003fe006 	br	105ac <__lshift+0xec>
   1062c:	01c00074 	movhi	r7,1
   10630:	01000074 	movhi	r4,1
   10634:	39df8304 	addi	r7,r7,32268
   10638:	000d883a 	mov	r6,zero
   1063c:	01407644 	movi	r5,473
   10640:	211f9804 	addi	r4,r4,32352
   10644:	0012c100 	call	12c10 <__assert_func>

00010648 <__mcmp>:
   10648:	21800417 	ldw	r6,16(r4)
   1064c:	28c00417 	ldw	r3,16(r5)
   10650:	30c5c83a 	sub	r2,r6,r3
   10654:	30c00e1e 	bne	r6,r3,10690 <__mcmp+0x48>
   10658:	180690ba 	slli	r3,r3,2
   1065c:	21c00504 	addi	r7,r4,20
   10660:	29400504 	addi	r5,r5,20
   10664:	38c9883a 	add	r4,r7,r3
   10668:	28c7883a 	add	r3,r5,r3
   1066c:	00000106 	br	10674 <__mcmp+0x2c>
   10670:	3900082e 	bgeu	r7,r4,10694 <__mcmp+0x4c>
   10674:	21bfff17 	ldw	r6,-4(r4)
   10678:	197fff17 	ldw	r5,-4(r3)
   1067c:	213fff04 	addi	r4,r4,-4
   10680:	18ffff04 	addi	r3,r3,-4
   10684:	317ffa26 	beq	r6,r5,10670 <__mcmp+0x28>
   10688:	3140032e 	bgeu	r6,r5,10698 <__mcmp+0x50>
   1068c:	00bfffc4 	movi	r2,-1
   10690:	f800283a 	ret
   10694:	f800283a 	ret
   10698:	00800044 	movi	r2,1
   1069c:	f800283a 	ret

000106a0 <__mdiff>:
   106a0:	28800417 	ldw	r2,16(r5)
   106a4:	30c00417 	ldw	r3,16(r6)
   106a8:	defffc04 	addi	sp,sp,-16
   106ac:	dc800215 	stw	r18,8(sp)
   106b0:	dc400115 	stw	r17,4(sp)
   106b4:	dc000015 	stw	r16,0(sp)
   106b8:	dfc00315 	stw	ra,12(sp)
   106bc:	2823883a 	mov	r17,r5
   106c0:	3021883a 	mov	r16,r6
   106c4:	10e5c83a 	sub	r18,r2,r3
   106c8:	10c0641e 	bne	r2,r3,1085c <__mdiff+0x1bc>
   106cc:	180c90ba 	slli	r6,r3,2
   106d0:	29400504 	addi	r5,r5,20
   106d4:	80c00504 	addi	r3,r16,20
   106d8:	2985883a 	add	r2,r5,r6
   106dc:	1987883a 	add	r3,r3,r6
   106e0:	00000106 	br	106e8 <__mdiff+0x48>
   106e4:	2880642e 	bgeu	r5,r2,10878 <__mdiff+0x1d8>
   106e8:	11bfff17 	ldw	r6,-4(r2)
   106ec:	19ffff17 	ldw	r7,-4(r3)
   106f0:	10bfff04 	addi	r2,r2,-4
   106f4:	18ffff04 	addi	r3,r3,-4
   106f8:	31fffa26 	beq	r6,r7,106e4 <__mdiff+0x44>
   106fc:	31c05236 	bltu	r6,r7,10848 <__mdiff+0x1a8>
   10700:	89400117 	ldw	r5,4(r17)
   10704:	000fb940 	call	fb94 <_Balloc>
   10708:	10006226 	beq	r2,zero,10894 <__mdiff+0x1f4>
   1070c:	8a400417 	ldw	r9,16(r17)
   10710:	83000417 	ldw	r12,16(r16)
   10714:	8ac00504 	addi	r11,r17,20
   10718:	481090ba 	slli	r8,r9,2
   1071c:	601890ba 	slli	r12,r12,2
   10720:	81800504 	addi	r6,r16,20
   10724:	13400504 	addi	r13,r2,20
   10728:	14800315 	stw	r18,12(r2)
   1072c:	5a11883a 	add	r8,r11,r8
   10730:	3319883a 	add	r12,r6,r12
   10734:	681d883a 	mov	r14,r13
   10738:	5815883a 	mov	r10,r11
   1073c:	0007883a 	mov	r3,zero
   10740:	51000017 	ldw	r4,0(r10)
   10744:	31c00017 	ldw	r7,0(r6)
   10748:	73800104 	addi	r14,r14,4
   1074c:	217fffcc 	andi	r5,r4,65535
   10750:	28cb883a 	add	r5,r5,r3
   10754:	38ffffcc 	andi	r3,r7,65535
   10758:	28cbc83a 	sub	r5,r5,r3
   1075c:	380ed43a 	srli	r7,r7,16
   10760:	2006d43a 	srli	r3,r4,16
   10764:	2809d43a 	srai	r4,r5,16
   10768:	297fffcc 	andi	r5,r5,65535
   1076c:	19c7c83a 	sub	r3,r3,r7
   10770:	1907883a 	add	r3,r3,r4
   10774:	1808943a 	slli	r4,r3,16
   10778:	31800104 	addi	r6,r6,4
   1077c:	1807d43a 	srai	r3,r3,16
   10780:	214ab03a 	or	r5,r4,r5
   10784:	717fff15 	stw	r5,-4(r14)
   10788:	52800104 	addi	r10,r10,4
   1078c:	333fec36 	bltu	r6,r12,10740 <__mdiff+0xa0>
   10790:	640fc83a 	sub	r7,r12,r16
   10794:	39fffac4 	addi	r7,r7,-21
   10798:	84000544 	addi	r16,r16,21
   1079c:	380ed0ba 	srli	r7,r7,2
   107a0:	64003336 	bltu	r12,r16,10870 <__mdiff+0x1d0>
   107a4:	380890ba 	slli	r4,r7,2
   107a8:	6909883a 	add	r4,r13,r4
   107ac:	64002e36 	bltu	r12,r16,10868 <__mdiff+0x1c8>
   107b0:	39800044 	addi	r6,r7,1
   107b4:	300c90ba 	slli	r6,r6,2
   107b8:	5997883a 	add	r11,r11,r6
   107bc:	699b883a 	add	r13,r13,r6
   107c0:	5a00152e 	bgeu	r11,r8,10818 <__mdiff+0x178>
   107c4:	680f883a 	mov	r7,r13
   107c8:	580d883a 	mov	r6,r11
   107cc:	31000017 	ldw	r4,0(r6)
   107d0:	39c00104 	addi	r7,r7,4
   107d4:	31800104 	addi	r6,r6,4
   107d8:	217fffcc 	andi	r5,r4,65535
   107dc:	28cb883a 	add	r5,r5,r3
   107e0:	2815d43a 	srai	r10,r5,16
   107e4:	2006d43a 	srli	r3,r4,16
   107e8:	297fffcc 	andi	r5,r5,65535
   107ec:	1a87883a 	add	r3,r3,r10
   107f0:	1814943a 	slli	r10,r3,16
   107f4:	1807d43a 	srai	r3,r3,16
   107f8:	514ab03a 	or	r5,r10,r5
   107fc:	397fff15 	stw	r5,-4(r7)
   10800:	323ff236 	bltu	r6,r8,107cc <__mdiff+0x12c>
   10804:	413fffc4 	addi	r4,r8,-1
   10808:	22c9c83a 	sub	r4,r4,r11
   1080c:	2008d0ba 	srli	r4,r4,2
   10810:	200890ba 	slli	r4,r4,2
   10814:	6909883a 	add	r4,r13,r4
   10818:	2800041e 	bne	r5,zero,1082c <__mdiff+0x18c>
   1081c:	20ffff17 	ldw	r3,-4(r4)
   10820:	4a7fffc4 	addi	r9,r9,-1
   10824:	213fff04 	addi	r4,r4,-4
   10828:	183ffc26 	beq	r3,zero,1081c <__mdiff+0x17c>
   1082c:	12400415 	stw	r9,16(r2)
   10830:	dfc00317 	ldw	ra,12(sp)
   10834:	dc800217 	ldw	r18,8(sp)
   10838:	dc400117 	ldw	r17,4(sp)
   1083c:	dc000017 	ldw	r16,0(sp)
   10840:	dec00404 	addi	sp,sp,16
   10844:	f800283a 	ret
   10848:	8805883a 	mov	r2,r17
   1084c:	04800044 	movi	r18,1
   10850:	8023883a 	mov	r17,r16
   10854:	1021883a 	mov	r16,r2
   10858:	003fa906 	br	10700 <__mdiff+0x60>
   1085c:	903ffa16 	blt	r18,zero,10848 <__mdiff+0x1a8>
   10860:	0025883a 	mov	r18,zero
   10864:	003fa606 	br	10700 <__mdiff+0x60>
   10868:	01800104 	movi	r6,4
   1086c:	003fd206 	br	107b8 <__mdiff+0x118>
   10870:	0009883a 	mov	r4,zero
   10874:	003fcc06 	br	107a8 <__mdiff+0x108>
   10878:	000b883a 	mov	r5,zero
   1087c:	000fb940 	call	fb94 <_Balloc>
   10880:	10000b26 	beq	r2,zero,108b0 <__mdiff+0x210>
   10884:	00c00044 	movi	r3,1
   10888:	10c00415 	stw	r3,16(r2)
   1088c:	10000515 	stw	zero,20(r2)
   10890:	003fe706 	br	10830 <__mdiff+0x190>
   10894:	01c00074 	movhi	r7,1
   10898:	01000074 	movhi	r4,1
   1089c:	39df8304 	addi	r7,r7,32268
   108a0:	000d883a 	mov	r6,zero
   108a4:	01409004 	movi	r5,576
   108a8:	211f9804 	addi	r4,r4,32352
   108ac:	0012c100 	call	12c10 <__assert_func>
   108b0:	01c00074 	movhi	r7,1
   108b4:	01000074 	movhi	r4,1
   108b8:	39df8304 	addi	r7,r7,32268
   108bc:	000d883a 	mov	r6,zero
   108c0:	01408c84 	movi	r5,562
   108c4:	211f9804 	addi	r4,r4,32352
   108c8:	0012c100 	call	12c10 <__assert_func>

000108cc <__ulp>:
   108cc:	28dffc2c 	andhi	r3,r5,32752
   108d0:	017f3034 	movhi	r5,64704
   108d4:	1947883a 	add	r3,r3,r5
   108d8:	00c0020e 	bge	zero,r3,108e4 <__ulp+0x18>
   108dc:	0005883a 	mov	r2,zero
   108e0:	f800283a 	ret
   108e4:	00c7c83a 	sub	r3,zero,r3
   108e8:	1807d53a 	srai	r3,r3,20
   108ec:	18800508 	cmpgei	r2,r3,20
   108f0:	1000041e 	bne	r2,zero,10904 <__ulp+0x38>
   108f4:	00800234 	movhi	r2,8
   108f8:	10c7d83a 	sra	r3,r2,r3
   108fc:	0005883a 	mov	r2,zero
   10900:	f800283a 	ret
   10904:	193ffb04 	addi	r4,r3,-20
   10908:	208007c8 	cmpgei	r2,r4,31
   1090c:	0007883a 	mov	r3,zero
   10910:	1000031e 	bne	r2,zero,10920 <__ulp+0x54>
   10914:	00a00034 	movhi	r2,32768
   10918:	1104d83a 	srl	r2,r2,r4
   1091c:	f800283a 	ret
   10920:	00800044 	movi	r2,1
   10924:	f800283a 	ret

00010928 <__b2d>:
   10928:	defffa04 	addi	sp,sp,-24
   1092c:	dc400115 	stw	r17,4(sp)
   10930:	24400417 	ldw	r17,16(r4)
   10934:	dc000015 	stw	r16,0(sp)
   10938:	24000504 	addi	r16,r4,20
   1093c:	882290ba 	slli	r17,r17,2
   10940:	dc800215 	stw	r18,8(sp)
   10944:	dd000415 	stw	r20,16(sp)
   10948:	8463883a 	add	r17,r16,r17
   1094c:	8cbfff17 	ldw	r18,-4(r17)
   10950:	dcc00315 	stw	r19,12(sp)
   10954:	dfc00515 	stw	ra,20(sp)
   10958:	9009883a 	mov	r4,r18
   1095c:	2827883a 	mov	r19,r5
   10960:	000fef00 	call	fef0 <__hi0bits>
   10964:	00c00804 	movi	r3,32
   10968:	1889c83a 	sub	r4,r3,r2
   1096c:	99000015 	stw	r4,0(r19)
   10970:	110002c8 	cmpgei	r4,r2,11
   10974:	8d3fff04 	addi	r20,r17,-4
   10978:	20002026 	beq	r4,zero,109fc <__b2d+0xd4>
   1097c:	10bffd44 	addi	r2,r2,-11
   10980:	85000e2e 	bgeu	r16,r20,109bc <__b2d+0x94>
   10984:	897ffe17 	ldw	r5,-8(r17)
   10988:	10001226 	beq	r2,zero,109d4 <__b2d+0xac>
   1098c:	1889c83a 	sub	r4,r3,r2
   10990:	90a4983a 	sll	r18,r18,r2
   10994:	2906d83a 	srl	r3,r5,r4
   10998:	89bffe04 	addi	r6,r17,-8
   1099c:	2884983a 	sll	r2,r5,r2
   109a0:	90e4b03a 	or	r18,r18,r3
   109a4:	90cffc34 	orhi	r3,r18,16368
   109a8:	81800c2e 	bgeu	r16,r6,109dc <__b2d+0xb4>
   109ac:	897ffd17 	ldw	r5,-12(r17)
   109b0:	2908d83a 	srl	r4,r5,r4
   109b4:	1104b03a 	or	r2,r2,r4
   109b8:	00000806 	br	109dc <__b2d+0xb4>
   109bc:	10000426 	beq	r2,zero,109d0 <__b2d+0xa8>
   109c0:	90a4983a 	sll	r18,r18,r2
   109c4:	0005883a 	mov	r2,zero
   109c8:	90cffc34 	orhi	r3,r18,16368
   109cc:	00000306 	br	109dc <__b2d+0xb4>
   109d0:	000b883a 	mov	r5,zero
   109d4:	90cffc34 	orhi	r3,r18,16368
   109d8:	2805883a 	mov	r2,r5
   109dc:	dfc00517 	ldw	ra,20(sp)
   109e0:	dd000417 	ldw	r20,16(sp)
   109e4:	dcc00317 	ldw	r19,12(sp)
   109e8:	dc800217 	ldw	r18,8(sp)
   109ec:	dc400117 	ldw	r17,4(sp)
   109f0:	dc000017 	ldw	r16,0(sp)
   109f4:	dec00604 	addi	sp,sp,24
   109f8:	f800283a 	ret
   109fc:	014002c4 	movi	r5,11
   10a00:	2889c83a 	sub	r4,r5,r2
   10a04:	9106d83a 	srl	r3,r18,r4
   10a08:	18cffc34 	orhi	r3,r3,16368
   10a0c:	85000536 	bltu	r16,r20,10a24 <__b2d+0xfc>
   10a10:	000b883a 	mov	r5,zero
   10a14:	10800544 	addi	r2,r2,21
   10a18:	9084983a 	sll	r2,r18,r2
   10a1c:	1144b03a 	or	r2,r2,r5
   10a20:	003fee06 	br	109dc <__b2d+0xb4>
   10a24:	897ffe17 	ldw	r5,-8(r17)
   10a28:	290ad83a 	srl	r5,r5,r4
   10a2c:	003ff906 	br	10a14 <__b2d+0xec>

00010a30 <__d2b>:
   10a30:	defff804 	addi	sp,sp,-32
   10a34:	dd000615 	stw	r20,24(sp)
   10a38:	2829883a 	mov	r20,r5
   10a3c:	01400044 	movi	r5,1
   10a40:	dcc00515 	stw	r19,20(sp)
   10a44:	dc000215 	stw	r16,8(sp)
   10a48:	dfc00715 	stw	ra,28(sp)
   10a4c:	dc800415 	stw	r18,16(sp)
   10a50:	dc400315 	stw	r17,12(sp)
   10a54:	3021883a 	mov	r16,r6
   10a58:	3827883a 	mov	r19,r7
   10a5c:	000fb940 	call	fb94 <_Balloc>
   10a60:	10004526 	beq	r2,zero,10b78 <__d2b+0x148>
   10a64:	8024d53a 	srli	r18,r16,20
   10a68:	01800434 	movhi	r6,16
   10a6c:	31bfffc4 	addi	r6,r6,-1
   10a70:	9481ffcc 	andi	r18,r18,2047
   10a74:	1023883a 	mov	r17,r2
   10a78:	81a0703a 	and	r16,r16,r6
   10a7c:	90000126 	beq	r18,zero,10a84 <__d2b+0x54>
   10a80:	84000434 	orhi	r16,r16,16
   10a84:	dc000115 	stw	r16,4(sp)
   10a88:	a0002226 	beq	r20,zero,10b14 <__d2b+0xe4>
   10a8c:	d809883a 	mov	r4,sp
   10a90:	dd000015 	stw	r20,0(sp)
   10a94:	000ff540 	call	ff54 <__lo0bits>
   10a98:	d8c00117 	ldw	r3,4(sp)
   10a9c:	10003326 	beq	r2,zero,10b6c <__d2b+0x13c>
   10aa0:	01000804 	movi	r4,32
   10aa4:	2089c83a 	sub	r4,r4,r2
   10aa8:	1908983a 	sll	r4,r3,r4
   10aac:	d9400017 	ldw	r5,0(sp)
   10ab0:	1886d83a 	srl	r3,r3,r2
   10ab4:	2148b03a 	or	r4,r4,r5
   10ab8:	89000515 	stw	r4,20(r17)
   10abc:	d8c00115 	stw	r3,4(sp)
   10ac0:	88c00615 	stw	r3,24(r17)
   10ac4:	1800271e 	bne	r3,zero,10b64 <__d2b+0x134>
   10ac8:	04000044 	movi	r16,1
   10acc:	8c000415 	stw	r16,16(r17)
   10ad0:	90001926 	beq	r18,zero,10b38 <__d2b+0x108>
   10ad4:	00c00d44 	movi	r3,53
   10ad8:	94bef344 	addi	r18,r18,-1075
   10adc:	90a5883a 	add	r18,r18,r2
   10ae0:	1885c83a 	sub	r2,r3,r2
   10ae4:	d8c00817 	ldw	r3,32(sp)
   10ae8:	9c800015 	stw	r18,0(r19)
   10aec:	18800015 	stw	r2,0(r3)
   10af0:	8805883a 	mov	r2,r17
   10af4:	dfc00717 	ldw	ra,28(sp)
   10af8:	dd000617 	ldw	r20,24(sp)
   10afc:	dcc00517 	ldw	r19,20(sp)
   10b00:	dc800417 	ldw	r18,16(sp)
   10b04:	dc400317 	ldw	r17,12(sp)
   10b08:	dc000217 	ldw	r16,8(sp)
   10b0c:	dec00804 	addi	sp,sp,32
   10b10:	f800283a 	ret
   10b14:	d9000104 	addi	r4,sp,4
   10b18:	000ff540 	call	ff54 <__lo0bits>
   10b1c:	00c00044 	movi	r3,1
   10b20:	88c00415 	stw	r3,16(r17)
   10b24:	d8c00117 	ldw	r3,4(sp)
   10b28:	10800804 	addi	r2,r2,32
   10b2c:	04000044 	movi	r16,1
   10b30:	88c00515 	stw	r3,20(r17)
   10b34:	903fe71e 	bne	r18,zero,10ad4 <__d2b+0xa4>
   10b38:	800690ba 	slli	r3,r16,2
   10b3c:	10bef384 	addi	r2,r2,-1074
   10b40:	98800015 	stw	r2,0(r19)
   10b44:	88c5883a 	add	r2,r17,r3
   10b48:	11000417 	ldw	r4,16(r2)
   10b4c:	8020917a 	slli	r16,r16,5
   10b50:	000fef00 	call	fef0 <__hi0bits>
   10b54:	80a1c83a 	sub	r16,r16,r2
   10b58:	d8800817 	ldw	r2,32(sp)
   10b5c:	14000015 	stw	r16,0(r2)
   10b60:	003fe306 	br	10af0 <__d2b+0xc0>
   10b64:	04000084 	movi	r16,2
   10b68:	003fd806 	br	10acc <__d2b+0x9c>
   10b6c:	d9000017 	ldw	r4,0(sp)
   10b70:	89000515 	stw	r4,20(r17)
   10b74:	003fd206 	br	10ac0 <__d2b+0x90>
   10b78:	01c00074 	movhi	r7,1
   10b7c:	01000074 	movhi	r4,1
   10b80:	39df8304 	addi	r7,r7,32268
   10b84:	000d883a 	mov	r6,zero
   10b88:	0140c284 	movi	r5,778
   10b8c:	211f9804 	addi	r4,r4,32352
   10b90:	0012c100 	call	12c10 <__assert_func>

00010b94 <__ratio>:
   10b94:	defff904 	addi	sp,sp,-28
   10b98:	dc400315 	stw	r17,12(sp)
   10b9c:	2823883a 	mov	r17,r5
   10ba0:	d80b883a 	mov	r5,sp
   10ba4:	dfc00615 	stw	ra,24(sp)
   10ba8:	dcc00515 	stw	r19,20(sp)
   10bac:	dc800415 	stw	r18,16(sp)
   10bb0:	2027883a 	mov	r19,r4
   10bb4:	dc000215 	stw	r16,8(sp)
   10bb8:	00109280 	call	10928 <__b2d>
   10bbc:	d9400104 	addi	r5,sp,4
   10bc0:	8809883a 	mov	r4,r17
   10bc4:	1025883a 	mov	r18,r2
   10bc8:	1821883a 	mov	r16,r3
   10bcc:	00109280 	call	10928 <__b2d>
   10bd0:	89000417 	ldw	r4,16(r17)
   10bd4:	9a000417 	ldw	r8,16(r19)
   10bd8:	d9400117 	ldw	r5,4(sp)
   10bdc:	100d883a 	mov	r6,r2
   10be0:	4111c83a 	sub	r8,r8,r4
   10be4:	d9000017 	ldw	r4,0(sp)
   10be8:	4010917a 	slli	r8,r8,5
   10bec:	180f883a 	mov	r7,r3
   10bf0:	2149c83a 	sub	r4,r4,r5
   10bf4:	4111883a 	add	r8,r8,r4
   10bf8:	02000c0e 	bge	zero,r8,10c2c <__ratio+0x98>
   10bfc:	4010953a 	slli	r8,r8,20
   10c00:	4421883a 	add	r16,r8,r16
   10c04:	9009883a 	mov	r4,r18
   10c08:	800b883a 	mov	r5,r16
   10c0c:	0007d840 	call	7d84 <__divdf3>
   10c10:	dfc00617 	ldw	ra,24(sp)
   10c14:	dcc00517 	ldw	r19,20(sp)
   10c18:	dc800417 	ldw	r18,16(sp)
   10c1c:	dc400317 	ldw	r17,12(sp)
   10c20:	dc000217 	ldw	r16,8(sp)
   10c24:	dec00704 	addi	sp,sp,28
   10c28:	f800283a 	ret
   10c2c:	4010953a 	slli	r8,r8,20
   10c30:	1a0fc83a 	sub	r7,r3,r8
   10c34:	003ff306 	br	10c04 <__ratio+0x70>

00010c38 <_mprec_log10>:
   10c38:	defffe04 	addi	sp,sp,-8
   10c3c:	dc000015 	stw	r16,0(sp)
   10c40:	dfc00115 	stw	ra,4(sp)
   10c44:	20800608 	cmpgei	r2,r4,24
   10c48:	2021883a 	mov	r16,r4
   10c4c:	10000f26 	beq	r2,zero,10c8c <_mprec_log10+0x54>
   10c50:	0009883a 	mov	r4,zero
   10c54:	014ffc34 	movhi	r5,16368
   10c58:	000d883a 	mov	r6,zero
   10c5c:	01d00934 	movhi	r7,16420
   10c60:	00088e80 	call	88e8 <__muldf3>
   10c64:	843fffc4 	addi	r16,r16,-1
   10c68:	1009883a 	mov	r4,r2
   10c6c:	180b883a 	mov	r5,r3
   10c70:	803ff91e 	bne	r16,zero,10c58 <_mprec_log10+0x20>
   10c74:	2005883a 	mov	r2,r4
   10c78:	2807883a 	mov	r3,r5
   10c7c:	dfc00117 	ldw	ra,4(sp)
   10c80:	dc000017 	ldw	r16,0(sp)
   10c84:	dec00204 	addi	sp,sp,8
   10c88:	f800283a 	ret
   10c8c:	202090fa 	slli	r16,r4,3
   10c90:	00800074 	movhi	r2,1
   10c94:	109fbf04 	addi	r2,r2,32508
   10c98:	1421883a 	add	r16,r2,r16
   10c9c:	81000017 	ldw	r4,0(r16)
   10ca0:	81400117 	ldw	r5,4(r16)
   10ca4:	003ff306 	br	10c74 <_mprec_log10+0x3c>

00010ca8 <__copybits>:
   10ca8:	297fffc4 	addi	r5,r5,-1
   10cac:	280fd17a 	srai	r7,r5,5
   10cb0:	31400417 	ldw	r5,16(r6)
   10cb4:	30800504 	addi	r2,r6,20
   10cb8:	39c00044 	addi	r7,r7,1
   10cbc:	280a90ba 	slli	r5,r5,2
   10cc0:	380e90ba 	slli	r7,r7,2
   10cc4:	114b883a 	add	r5,r2,r5
   10cc8:	21cf883a 	add	r7,r4,r7
   10ccc:	11400c2e 	bgeu	r2,r5,10d00 <__copybits+0x58>
   10cd0:	2007883a 	mov	r3,r4
   10cd4:	12000017 	ldw	r8,0(r2)
   10cd8:	10800104 	addi	r2,r2,4
   10cdc:	18c00104 	addi	r3,r3,4
   10ce0:	1a3fff15 	stw	r8,-4(r3)
   10ce4:	117ffb36 	bltu	r2,r5,10cd4 <__copybits+0x2c>
   10ce8:	2985c83a 	sub	r2,r5,r6
   10cec:	10bffac4 	addi	r2,r2,-21
   10cf0:	1004d0ba 	srli	r2,r2,2
   10cf4:	10800044 	addi	r2,r2,1
   10cf8:	100490ba 	slli	r2,r2,2
   10cfc:	2089883a 	add	r4,r4,r2
   10d00:	21c0072e 	bgeu	r4,r7,10d20 <__copybits+0x78>
   10d04:	39bfffc4 	addi	r6,r7,-1
   10d08:	310dc83a 	sub	r6,r6,r4
   10d0c:	300cd0ba 	srli	r6,r6,2
   10d10:	000b883a 	mov	r5,zero
   10d14:	31800044 	addi	r6,r6,1
   10d18:	300c90ba 	slli	r6,r6,2
   10d1c:	000faa41 	jmpi	faa4 <memset>
   10d20:	f800283a 	ret

00010d24 <__any_on>:
   10d24:	20c00417 	ldw	r3,16(r4)
   10d28:	280dd17a 	srai	r6,r5,5
   10d2c:	21000504 	addi	r4,r4,20
   10d30:	1980080e 	bge	r3,r6,10d54 <__any_on+0x30>
   10d34:	180490ba 	slli	r2,r3,2
   10d38:	2085883a 	add	r2,r4,r2
   10d3c:	20800f2e 	bgeu	r4,r2,10d7c <__any_on+0x58>
   10d40:	10ffff17 	ldw	r3,-4(r2)
   10d44:	10bfff04 	addi	r2,r2,-4
   10d48:	183ffc26 	beq	r3,zero,10d3c <__any_on+0x18>
   10d4c:	00800044 	movi	r2,1
   10d50:	f800283a 	ret
   10d54:	300490ba 	slli	r2,r6,2
   10d58:	2085883a 	add	r2,r4,r2
   10d5c:	30fff70e 	bge	r6,r3,10d3c <__any_on+0x18>
   10d60:	294007cc 	andi	r5,r5,31
   10d64:	283ff526 	beq	r5,zero,10d3c <__any_on+0x18>
   10d68:	11800017 	ldw	r6,0(r2)
   10d6c:	3146d83a 	srl	r3,r6,r5
   10d70:	194a983a 	sll	r5,r3,r5
   10d74:	317ff51e 	bne	r6,r5,10d4c <__any_on+0x28>
   10d78:	003ff006 	br	10d3c <__any_on+0x18>
   10d7c:	0005883a 	mov	r2,zero
   10d80:	f800283a 	ret

00010d84 <_putc_r>:
   10d84:	defffc04 	addi	sp,sp,-16
   10d88:	dc400215 	stw	r17,8(sp)
   10d8c:	dfc00315 	stw	ra,12(sp)
   10d90:	2023883a 	mov	r17,r4
   10d94:	20000226 	beq	r4,zero,10da0 <_putc_r+0x1c>
   10d98:	20800e17 	ldw	r2,56(r4)
   10d9c:	10000e26 	beq	r2,zero,10dd8 <_putc_r+0x54>
   10da0:	30800217 	ldw	r2,8(r6)
   10da4:	10bfffc4 	addi	r2,r2,-1
   10da8:	30800215 	stw	r2,8(r6)
   10dac:	10001316 	blt	r2,zero,10dfc <_putc_r+0x78>
   10db0:	30800017 	ldw	r2,0(r6)
   10db4:	11400005 	stb	r5,0(r2)
   10db8:	30800017 	ldw	r2,0(r6)
   10dbc:	10c00044 	addi	r3,r2,1
   10dc0:	30c00015 	stw	r3,0(r6)
   10dc4:	10800003 	ldbu	r2,0(r2)
   10dc8:	dfc00317 	ldw	ra,12(sp)
   10dcc:	dc400217 	ldw	r17,8(sp)
   10dd0:	dec00404 	addi	sp,sp,16
   10dd4:	f800283a 	ret
   10dd8:	d9800115 	stw	r6,4(sp)
   10ddc:	d9400015 	stw	r5,0(sp)
   10de0:	000ec0c0 	call	ec0c <__sinit>
   10de4:	d9800117 	ldw	r6,4(sp)
   10de8:	d9400017 	ldw	r5,0(sp)
   10dec:	30800217 	ldw	r2,8(r6)
   10df0:	10bfffc4 	addi	r2,r2,-1
   10df4:	30800215 	stw	r2,8(r6)
   10df8:	103fed0e 	bge	r2,zero,10db0 <_putc_r+0x2c>
   10dfc:	30c00617 	ldw	r3,24(r6)
   10e00:	10c00e16 	blt	r2,r3,10e3c <_putc_r+0xb8>
   10e04:	30800017 	ldw	r2,0(r6)
   10e08:	11400005 	stb	r5,0(r2)
   10e0c:	30c00017 	ldw	r3,0(r6)
   10e10:	18800003 	ldbu	r2,0(r3)
   10e14:	108002a0 	cmpeqi	r2,r2,10
   10e18:	1000071e 	bne	r2,zero,10e38 <_putc_r+0xb4>
   10e1c:	18800044 	addi	r2,r3,1
   10e20:	30800015 	stw	r2,0(r6)
   10e24:	18800003 	ldbu	r2,0(r3)
   10e28:	dfc00317 	ldw	ra,12(sp)
   10e2c:	dc400217 	ldw	r17,8(sp)
   10e30:	dec00404 	addi	sp,sp,16
   10e34:	f800283a 	ret
   10e38:	01400284 	movi	r5,10
   10e3c:	8809883a 	mov	r4,r17
   10e40:	dfc00317 	ldw	ra,12(sp)
   10e44:	dc400217 	ldw	r17,8(sp)
   10e48:	dec00404 	addi	sp,sp,16
   10e4c:	00129f41 	jmpi	129f4 <__swbuf_r>

00010e50 <putc>:
   10e50:	defffc04 	addi	sp,sp,-16
   10e54:	008000b4 	movhi	r2,2
   10e58:	dc800215 	stw	r18,8(sp)
   10e5c:	14a7e517 	ldw	r18,-24684(r2)
   10e60:	dc400115 	stw	r17,4(sp)
   10e64:	dfc00315 	stw	ra,12(sp)
   10e68:	2023883a 	mov	r17,r4
   10e6c:	90000226 	beq	r18,zero,10e78 <putc+0x28>
   10e70:	90800e17 	ldw	r2,56(r18)
   10e74:	10000f26 	beq	r2,zero,10eb4 <putc+0x64>
   10e78:	28800217 	ldw	r2,8(r5)
   10e7c:	10bfffc4 	addi	r2,r2,-1
   10e80:	28800215 	stw	r2,8(r5)
   10e84:	10001316 	blt	r2,zero,10ed4 <putc+0x84>
   10e88:	28800017 	ldw	r2,0(r5)
   10e8c:	14400005 	stb	r17,0(r2)
   10e90:	28800017 	ldw	r2,0(r5)
   10e94:	10c00044 	addi	r3,r2,1
   10e98:	28c00015 	stw	r3,0(r5)
   10e9c:	10800003 	ldbu	r2,0(r2)
   10ea0:	dfc00317 	ldw	ra,12(sp)
   10ea4:	dc800217 	ldw	r18,8(sp)
   10ea8:	dc400117 	ldw	r17,4(sp)
   10eac:	dec00404 	addi	sp,sp,16
   10eb0:	f800283a 	ret
   10eb4:	9009883a 	mov	r4,r18
   10eb8:	d9400015 	stw	r5,0(sp)
   10ebc:	000ec0c0 	call	ec0c <__sinit>
   10ec0:	d9400017 	ldw	r5,0(sp)
   10ec4:	28800217 	ldw	r2,8(r5)
   10ec8:	10bfffc4 	addi	r2,r2,-1
   10ecc:	28800215 	stw	r2,8(r5)
   10ed0:	103fed0e 	bge	r2,zero,10e88 <putc+0x38>
   10ed4:	28c00617 	ldw	r3,24(r5)
   10ed8:	10c00a16 	blt	r2,r3,10f04 <putc+0xb4>
   10edc:	28800017 	ldw	r2,0(r5)
   10ee0:	14400005 	stb	r17,0(r2)
   10ee4:	28c00017 	ldw	r3,0(r5)
   10ee8:	18800003 	ldbu	r2,0(r3)
   10eec:	108002a0 	cmpeqi	r2,r2,10
   10ef0:	10000c1e 	bne	r2,zero,10f24 <putc+0xd4>
   10ef4:	18800044 	addi	r2,r3,1
   10ef8:	28800015 	stw	r2,0(r5)
   10efc:	18800003 	ldbu	r2,0(r3)
   10f00:	003fe706 	br	10ea0 <putc+0x50>
   10f04:	280d883a 	mov	r6,r5
   10f08:	880b883a 	mov	r5,r17
   10f0c:	9009883a 	mov	r4,r18
   10f10:	dfc00317 	ldw	ra,12(sp)
   10f14:	dc800217 	ldw	r18,8(sp)
   10f18:	dc400117 	ldw	r17,4(sp)
   10f1c:	dec00404 	addi	sp,sp,16
   10f20:	00129f41 	jmpi	129f4 <__swbuf_r>
   10f24:	280d883a 	mov	r6,r5
   10f28:	01400284 	movi	r5,10
   10f2c:	003ff706 	br	10f0c <putc+0xbc>

00010f30 <_realloc_r>:
   10f30:	defff604 	addi	sp,sp,-40
   10f34:	dc800215 	stw	r18,8(sp)
   10f38:	dfc00915 	stw	ra,36(sp)
   10f3c:	df000815 	stw	fp,32(sp)
   10f40:	ddc00715 	stw	r23,28(sp)
   10f44:	dd800615 	stw	r22,24(sp)
   10f48:	dd400515 	stw	r21,20(sp)
   10f4c:	dd000415 	stw	r20,16(sp)
   10f50:	dcc00315 	stw	r19,12(sp)
   10f54:	dc400115 	stw	r17,4(sp)
   10f58:	dc000015 	stw	r16,0(sp)
   10f5c:	3025883a 	mov	r18,r6
   10f60:	28008b26 	beq	r5,zero,11190 <_realloc_r+0x260>
   10f64:	2821883a 	mov	r16,r5
   10f68:	2027883a 	mov	r19,r4
   10f6c:	944002c4 	addi	r17,r18,11
   10f70:	0014f3c0 	call	14f3c <__malloc_lock>
   10f74:	888005f0 	cmpltui	r2,r17,23
   10f78:	1000521e 	bne	r2,zero,110c4 <_realloc_r+0x194>
   10f7c:	017ffe04 	movi	r5,-8
   10f80:	8962703a 	and	r17,r17,r5
   10f84:	8807883a 	mov	r3,r17
   10f88:	88005116 	blt	r17,zero,110d0 <_realloc_r+0x1a0>
   10f8c:	8c805036 	bltu	r17,r18,110d0 <_realloc_r+0x1a0>
   10f90:	80bfff17 	ldw	r2,-4(r16)
   10f94:	017fff04 	movi	r5,-4
   10f98:	857ffe04 	addi	r21,r16,-8
   10f9c:	1168703a 	and	r20,r2,r5
   10fa0:	a0c0390e 	bge	r20,r3,11088 <_realloc_r+0x158>
   10fa4:	05c000b4 	movhi	r23,2
   10fa8:	bde1d704 	addi	r23,r23,-30884
   10fac:	ba000217 	ldw	r8,8(r23)
   10fb0:	ad0f883a 	add	r7,r21,r20
   10fb4:	39000117 	ldw	r4,4(r7)
   10fb8:	41c08e26 	beq	r8,r7,111f4 <_realloc_r+0x2c4>
   10fbc:	01bfff84 	movi	r6,-2
   10fc0:	218c703a 	and	r6,r4,r6
   10fc4:	398d883a 	add	r6,r7,r6
   10fc8:	31800117 	ldw	r6,4(r6)
   10fcc:	3180004c 	andi	r6,r6,1
   10fd0:	30004f1e 	bne	r6,zero,11110 <_realloc_r+0x1e0>
   10fd4:	2148703a 	and	r4,r4,r5
   10fd8:	a10b883a 	add	r5,r20,r4
   10fdc:	28c0bb0e 	bge	r5,r3,112cc <_realloc_r+0x39c>
   10fe0:	1080004c 	andi	r2,r2,1
   10fe4:	10004c1e 	bne	r2,zero,11118 <_realloc_r+0x1e8>
   10fe8:	873ffe17 	ldw	fp,-8(r16)
   10fec:	00bfff04 	movi	r2,-4
   10ff0:	af39c83a 	sub	fp,r21,fp
   10ff4:	e1400117 	ldw	r5,4(fp)
   10ff8:	288a703a 	and	r5,r5,r2
   10ffc:	38000426 	beq	r7,zero,11010 <_realloc_r+0xe0>
   11000:	a16d883a 	add	r22,r20,r5
   11004:	b12d883a 	add	r22,r22,r4
   11008:	41c0ba26 	beq	r8,r7,112f4 <_realloc_r+0x3c4>
   1100c:	b0c0930e 	bge	r22,r3,1125c <_realloc_r+0x32c>
   11010:	e0004126 	beq	fp,zero,11118 <_realloc_r+0x1e8>
   11014:	a16d883a 	add	r22,r20,r5
   11018:	b0c03f16 	blt	r22,r3,11118 <_realloc_r+0x1e8>
   1101c:	e0800317 	ldw	r2,12(fp)
   11020:	e0c00217 	ldw	r3,8(fp)
   11024:	a1bfff04 	addi	r6,r20,-4
   11028:	31400968 	cmpgeui	r5,r6,37
   1102c:	18800315 	stw	r2,12(r3)
   11030:	10c00215 	stw	r3,8(r2)
   11034:	e1000204 	addi	r4,fp,8
   11038:	2800941e 	bne	r5,zero,1128c <_realloc_r+0x35c>
   1103c:	30800530 	cmpltui	r2,r6,20
   11040:	1000db1e 	bne	r2,zero,113b0 <_realloc_r+0x480>
   11044:	80c00017 	ldw	r3,0(r16)
   11048:	30800728 	cmpgeui	r2,r6,28
   1104c:	e0c00215 	stw	r3,8(fp)
   11050:	80c00117 	ldw	r3,4(r16)
   11054:	e0c00315 	stw	r3,12(fp)
   11058:	1000d71e 	bne	r2,zero,113b8 <_realloc_r+0x488>
   1105c:	84000204 	addi	r16,r16,8
   11060:	e0800404 	addi	r2,fp,16
   11064:	80c00017 	ldw	r3,0(r16)
   11068:	b029883a 	mov	r20,r22
   1106c:	e02b883a 	mov	r21,fp
   11070:	10c00015 	stw	r3,0(r2)
   11074:	80c00117 	ldw	r3,4(r16)
   11078:	10c00115 	stw	r3,4(r2)
   1107c:	80c00217 	ldw	r3,8(r16)
   11080:	2021883a 	mov	r16,r4
   11084:	10c00215 	stw	r3,8(r2)
   11088:	a9800117 	ldw	r6,4(r21)
   1108c:	a447c83a 	sub	r3,r20,r17
   11090:	19000430 	cmpltui	r4,r3,16
   11094:	3180004c 	andi	r6,r6,1
   11098:	ad05883a 	add	r2,r21,r20
   1109c:	20004926 	beq	r4,zero,111c4 <_realloc_r+0x294>
   110a0:	a18cb03a 	or	r6,r20,r6
   110a4:	a9800115 	stw	r6,4(r21)
   110a8:	10c00117 	ldw	r3,4(r2)
   110ac:	18c00054 	ori	r3,r3,1
   110b0:	10c00115 	stw	r3,4(r2)
   110b4:	9809883a 	mov	r4,r19
   110b8:	0014f600 	call	14f60 <__malloc_unlock>
   110bc:	8025883a 	mov	r18,r16
   110c0:	00000606 	br	110dc <_realloc_r+0x1ac>
   110c4:	04400404 	movi	r17,16
   110c8:	00c00404 	movi	r3,16
   110cc:	8cbfb02e 	bgeu	r17,r18,10f90 <_realloc_r+0x60>
   110d0:	00800304 	movi	r2,12
   110d4:	98800015 	stw	r2,0(r19)
   110d8:	0025883a 	mov	r18,zero
   110dc:	9005883a 	mov	r2,r18
   110e0:	dfc00917 	ldw	ra,36(sp)
   110e4:	df000817 	ldw	fp,32(sp)
   110e8:	ddc00717 	ldw	r23,28(sp)
   110ec:	dd800617 	ldw	r22,24(sp)
   110f0:	dd400517 	ldw	r21,20(sp)
   110f4:	dd000417 	ldw	r20,16(sp)
   110f8:	dcc00317 	ldw	r19,12(sp)
   110fc:	dc800217 	ldw	r18,8(sp)
   11100:	dc400117 	ldw	r17,4(sp)
   11104:	dc000017 	ldw	r16,0(sp)
   11108:	dec00a04 	addi	sp,sp,40
   1110c:	f800283a 	ret
   11110:	1080004c 	andi	r2,r2,1
   11114:	10006826 	beq	r2,zero,112b8 <_realloc_r+0x388>
   11118:	900b883a 	mov	r5,r18
   1111c:	9809883a 	mov	r4,r19
   11120:	0009ea80 	call	9ea8 <_malloc_r>
   11124:	1025883a 	mov	r18,r2
   11128:	10001626 	beq	r2,zero,11184 <_realloc_r+0x254>
   1112c:	80bfff17 	ldw	r2,-4(r16)
   11130:	013fff84 	movi	r4,-2
   11134:	90fffe04 	addi	r3,r18,-8
   11138:	1104703a 	and	r2,r2,r4
   1113c:	a885883a 	add	r2,r21,r2
   11140:	10c05826 	beq	r2,r3,112a4 <_realloc_r+0x374>
   11144:	a1bfff04 	addi	r6,r20,-4
   11148:	30800968 	cmpgeui	r2,r6,37
   1114c:	1000651e 	bne	r2,zero,112e4 <_realloc_r+0x3b4>
   11150:	30800530 	cmpltui	r2,r6,20
   11154:	10003826 	beq	r2,zero,11238 <_realloc_r+0x308>
   11158:	9005883a 	mov	r2,r18
   1115c:	8007883a 	mov	r3,r16
   11160:	19000017 	ldw	r4,0(r3)
   11164:	11000015 	stw	r4,0(r2)
   11168:	19000117 	ldw	r4,4(r3)
   1116c:	11000115 	stw	r4,4(r2)
   11170:	18c00217 	ldw	r3,8(r3)
   11174:	10c00215 	stw	r3,8(r2)
   11178:	800b883a 	mov	r5,r16
   1117c:	9809883a 	mov	r4,r19
   11180:	000ed700 	call	ed70 <_free_r>
   11184:	9809883a 	mov	r4,r19
   11188:	0014f600 	call	14f60 <__malloc_unlock>
   1118c:	003fd306 	br	110dc <_realloc_r+0x1ac>
   11190:	300b883a 	mov	r5,r6
   11194:	dfc00917 	ldw	ra,36(sp)
   11198:	df000817 	ldw	fp,32(sp)
   1119c:	ddc00717 	ldw	r23,28(sp)
   111a0:	dd800617 	ldw	r22,24(sp)
   111a4:	dd400517 	ldw	r21,20(sp)
   111a8:	dd000417 	ldw	r20,16(sp)
   111ac:	dcc00317 	ldw	r19,12(sp)
   111b0:	dc800217 	ldw	r18,8(sp)
   111b4:	dc400117 	ldw	r17,4(sp)
   111b8:	dc000017 	ldw	r16,0(sp)
   111bc:	dec00a04 	addi	sp,sp,40
   111c0:	0009ea81 	jmpi	9ea8 <_malloc_r>
   111c4:	344cb03a 	or	r6,r6,r17
   111c8:	a9800115 	stw	r6,4(r21)
   111cc:	ac4b883a 	add	r5,r21,r17
   111d0:	18c00054 	ori	r3,r3,1
   111d4:	28c00115 	stw	r3,4(r5)
   111d8:	10c00117 	ldw	r3,4(r2)
   111dc:	29400204 	addi	r5,r5,8
   111e0:	9809883a 	mov	r4,r19
   111e4:	18c00054 	ori	r3,r3,1
   111e8:	10c00115 	stw	r3,4(r2)
   111ec:	000ed700 	call	ed70 <_free_r>
   111f0:	003fb006 	br	110b4 <_realloc_r+0x184>
   111f4:	2148703a 	and	r4,r4,r5
   111f8:	a10b883a 	add	r5,r20,r4
   111fc:	89800404 	addi	r6,r17,16
   11200:	29bf7716 	blt	r5,r6,10fe0 <_realloc_r+0xb0>
   11204:	ac6b883a 	add	r21,r21,r17
   11208:	2c45c83a 	sub	r2,r5,r17
   1120c:	bd400215 	stw	r21,8(r23)
   11210:	10800054 	ori	r2,r2,1
   11214:	a8800115 	stw	r2,4(r21)
   11218:	80bfff17 	ldw	r2,-4(r16)
   1121c:	9809883a 	mov	r4,r19
   11220:	8025883a 	mov	r18,r16
   11224:	1080004c 	andi	r2,r2,1
   11228:	1462b03a 	or	r17,r2,r17
   1122c:	847fff15 	stw	r17,-4(r16)
   11230:	0014f600 	call	14f60 <__malloc_unlock>
   11234:	003fa906 	br	110dc <_realloc_r+0x1ac>
   11238:	80c00017 	ldw	r3,0(r16)
   1123c:	30800728 	cmpgeui	r2,r6,28
   11240:	90c00015 	stw	r3,0(r18)
   11244:	80c00117 	ldw	r3,4(r16)
   11248:	90c00115 	stw	r3,4(r18)
   1124c:	10004f1e 	bne	r2,zero,1138c <_realloc_r+0x45c>
   11250:	80c00204 	addi	r3,r16,8
   11254:	90800204 	addi	r2,r18,8
   11258:	003fc106 	br	11160 <_realloc_r+0x230>
   1125c:	38800317 	ldw	r2,12(r7)
   11260:	38c00217 	ldw	r3,8(r7)
   11264:	a1bfff04 	addi	r6,r20,-4
   11268:	31400968 	cmpgeui	r5,r6,37
   1126c:	18800315 	stw	r2,12(r3)
   11270:	10c00215 	stw	r3,8(r2)
   11274:	e0c00217 	ldw	r3,8(fp)
   11278:	e0800317 	ldw	r2,12(fp)
   1127c:	e1000204 	addi	r4,fp,8
   11280:	18800315 	stw	r2,12(r3)
   11284:	10c00215 	stw	r3,8(r2)
   11288:	283f6c26 	beq	r5,zero,1103c <_realloc_r+0x10c>
   1128c:	800b883a 	mov	r5,r16
   11290:	000f9780 	call	f978 <memmove>
   11294:	1021883a 	mov	r16,r2
   11298:	b029883a 	mov	r20,r22
   1129c:	e02b883a 	mov	r21,fp
   112a0:	003f7906 	br	11088 <_realloc_r+0x158>
   112a4:	90bfff17 	ldw	r2,-4(r18)
   112a8:	00ffff04 	movi	r3,-4
   112ac:	10c4703a 	and	r2,r2,r3
   112b0:	a0a9883a 	add	r20,r20,r2
   112b4:	003f7406 	br	11088 <_realloc_r+0x158>
   112b8:	873ffe17 	ldw	fp,-8(r16)
   112bc:	af39c83a 	sub	fp,r21,fp
   112c0:	e0800117 	ldw	r2,4(fp)
   112c4:	114a703a 	and	r5,r2,r5
   112c8:	003f5106 	br	11010 <_realloc_r+0xe0>
   112cc:	38800317 	ldw	r2,12(r7)
   112d0:	38c00217 	ldw	r3,8(r7)
   112d4:	2829883a 	mov	r20,r5
   112d8:	18800315 	stw	r2,12(r3)
   112dc:	10c00215 	stw	r3,8(r2)
   112e0:	003f6906 	br	11088 <_realloc_r+0x158>
   112e4:	800b883a 	mov	r5,r16
   112e8:	9009883a 	mov	r4,r18
   112ec:	000f9780 	call	f978 <memmove>
   112f0:	003fa106 	br	11178 <_realloc_r+0x248>
   112f4:	88800404 	addi	r2,r17,16
   112f8:	b0bf4516 	blt	r22,r2,11010 <_realloc_r+0xe0>
   112fc:	e0800317 	ldw	r2,12(fp)
   11300:	e0c00217 	ldw	r3,8(fp)
   11304:	a1bfff04 	addi	r6,r20,-4
   11308:	31000968 	cmpgeui	r4,r6,37
   1130c:	18800315 	stw	r2,12(r3)
   11310:	10c00215 	stw	r3,8(r2)
   11314:	e4800204 	addi	r18,fp,8
   11318:	2000391e 	bne	r4,zero,11400 <_realloc_r+0x4d0>
   1131c:	30800530 	cmpltui	r2,r6,20
   11320:	1000351e 	bne	r2,zero,113f8 <_realloc_r+0x4c8>
   11324:	80c00017 	ldw	r3,0(r16)
   11328:	30800728 	cmpgeui	r2,r6,28
   1132c:	e0c00215 	stw	r3,8(fp)
   11330:	80c00117 	ldw	r3,4(r16)
   11334:	e0c00315 	stw	r3,12(fp)
   11338:	10003c1e 	bne	r2,zero,1142c <_realloc_r+0x4fc>
   1133c:	84000204 	addi	r16,r16,8
   11340:	e0800404 	addi	r2,fp,16
   11344:	80c00017 	ldw	r3,0(r16)
   11348:	10c00015 	stw	r3,0(r2)
   1134c:	80c00117 	ldw	r3,4(r16)
   11350:	10c00115 	stw	r3,4(r2)
   11354:	80c00217 	ldw	r3,8(r16)
   11358:	10c00215 	stw	r3,8(r2)
   1135c:	e447883a 	add	r3,fp,r17
   11360:	b445c83a 	sub	r2,r22,r17
   11364:	b8c00215 	stw	r3,8(r23)
   11368:	10800054 	ori	r2,r2,1
   1136c:	18800115 	stw	r2,4(r3)
   11370:	e0800117 	ldw	r2,4(fp)
   11374:	9809883a 	mov	r4,r19
   11378:	1080004c 	andi	r2,r2,1
   1137c:	1462b03a 	or	r17,r2,r17
   11380:	e4400115 	stw	r17,4(fp)
   11384:	0014f600 	call	14f60 <__malloc_unlock>
   11388:	003f5406 	br	110dc <_realloc_r+0x1ac>
   1138c:	80800217 	ldw	r2,8(r16)
   11390:	31800920 	cmpeqi	r6,r6,36
   11394:	90800215 	stw	r2,8(r18)
   11398:	80800317 	ldw	r2,12(r16)
   1139c:	90800315 	stw	r2,12(r18)
   113a0:	30000e1e 	bne	r6,zero,113dc <_realloc_r+0x4ac>
   113a4:	80c00404 	addi	r3,r16,16
   113a8:	90800404 	addi	r2,r18,16
   113ac:	003f6c06 	br	11160 <_realloc_r+0x230>
   113b0:	2005883a 	mov	r2,r4
   113b4:	003f2b06 	br	11064 <_realloc_r+0x134>
   113b8:	80800217 	ldw	r2,8(r16)
   113bc:	31800920 	cmpeqi	r6,r6,36
   113c0:	e0800415 	stw	r2,16(fp)
   113c4:	80800317 	ldw	r2,12(r16)
   113c8:	e0800515 	stw	r2,20(fp)
   113cc:	3000101e 	bne	r6,zero,11410 <_realloc_r+0x4e0>
   113d0:	84000404 	addi	r16,r16,16
   113d4:	e0800604 	addi	r2,fp,24
   113d8:	003f2206 	br	11064 <_realloc_r+0x134>
   113dc:	81000417 	ldw	r4,16(r16)
   113e0:	80c00604 	addi	r3,r16,24
   113e4:	90800604 	addi	r2,r18,24
   113e8:	91000415 	stw	r4,16(r18)
   113ec:	81000517 	ldw	r4,20(r16)
   113f0:	91000515 	stw	r4,20(r18)
   113f4:	003f5a06 	br	11160 <_realloc_r+0x230>
   113f8:	9005883a 	mov	r2,r18
   113fc:	003fd106 	br	11344 <_realloc_r+0x414>
   11400:	800b883a 	mov	r5,r16
   11404:	9009883a 	mov	r4,r18
   11408:	000f9780 	call	f978 <memmove>
   1140c:	003fd306 	br	1135c <_realloc_r+0x42c>
   11410:	80c00417 	ldw	r3,16(r16)
   11414:	84000604 	addi	r16,r16,24
   11418:	e0800804 	addi	r2,fp,32
   1141c:	e0c00615 	stw	r3,24(fp)
   11420:	80ffff17 	ldw	r3,-4(r16)
   11424:	e0c00715 	stw	r3,28(fp)
   11428:	003f0e06 	br	11064 <_realloc_r+0x134>
   1142c:	80800217 	ldw	r2,8(r16)
   11430:	31800920 	cmpeqi	r6,r6,36
   11434:	e0800415 	stw	r2,16(fp)
   11438:	80800317 	ldw	r2,12(r16)
   1143c:	e0800515 	stw	r2,20(fp)
   11440:	3000031e 	bne	r6,zero,11450 <_realloc_r+0x520>
   11444:	84000404 	addi	r16,r16,16
   11448:	e0800604 	addi	r2,fp,24
   1144c:	003fbd06 	br	11344 <_realloc_r+0x414>
   11450:	80c00417 	ldw	r3,16(r16)
   11454:	84000604 	addi	r16,r16,24
   11458:	e0800804 	addi	r2,fp,32
   1145c:	e0c00615 	stw	r3,24(fp)
   11460:	80ffff17 	ldw	r3,-4(r16)
   11464:	e0c00715 	stw	r3,28(fp)
   11468:	003fb606 	br	11344 <_realloc_r+0x414>

0001146c <__sread>:
   1146c:	defffe04 	addi	sp,sp,-8
   11470:	dc000015 	stw	r16,0(sp)
   11474:	2821883a 	mov	r16,r5
   11478:	2940038f 	ldh	r5,14(r5)
   1147c:	dfc00115 	stw	ra,4(sp)
   11480:	00134340 	call	13434 <_read_r>
   11484:	10000716 	blt	r2,zero,114a4 <__sread+0x38>
   11488:	80c01417 	ldw	r3,80(r16)
   1148c:	1887883a 	add	r3,r3,r2
   11490:	80c01415 	stw	r3,80(r16)
   11494:	dfc00117 	ldw	ra,4(sp)
   11498:	dc000017 	ldw	r16,0(sp)
   1149c:	dec00204 	addi	sp,sp,8
   114a0:	f800283a 	ret
   114a4:	80c0030b 	ldhu	r3,12(r16)
   114a8:	18fbffcc 	andi	r3,r3,61439
   114ac:	80c0030d 	sth	r3,12(r16)
   114b0:	dfc00117 	ldw	ra,4(sp)
   114b4:	dc000017 	ldw	r16,0(sp)
   114b8:	dec00204 	addi	sp,sp,8
   114bc:	f800283a 	ret

000114c0 <__seofread>:
   114c0:	0005883a 	mov	r2,zero
   114c4:	f800283a 	ret

000114c8 <__swrite>:
   114c8:	2880030b 	ldhu	r2,12(r5)
   114cc:	defffb04 	addi	sp,sp,-20
   114d0:	dcc00315 	stw	r19,12(sp)
   114d4:	dc800215 	stw	r18,8(sp)
   114d8:	dc400115 	stw	r17,4(sp)
   114dc:	dc000015 	stw	r16,0(sp)
   114e0:	dfc00415 	stw	ra,16(sp)
   114e4:	10c0400c 	andi	r3,r2,256
   114e8:	2821883a 	mov	r16,r5
   114ec:	2023883a 	mov	r17,r4
   114f0:	3025883a 	mov	r18,r6
   114f4:	3827883a 	mov	r19,r7
   114f8:	18000d1e 	bne	r3,zero,11530 <__swrite+0x68>
   114fc:	8140038f 	ldh	r5,14(r16)
   11500:	10bbffcc 	andi	r2,r2,61439
   11504:	980f883a 	mov	r7,r19
   11508:	900d883a 	mov	r6,r18
   1150c:	8809883a 	mov	r4,r17
   11510:	8080030d 	sth	r2,12(r16)
   11514:	dfc00417 	ldw	ra,16(sp)
   11518:	dcc00317 	ldw	r19,12(sp)
   1151c:	dc800217 	ldw	r18,8(sp)
   11520:	dc400117 	ldw	r17,4(sp)
   11524:	dc000017 	ldw	r16,0(sp)
   11528:	dec00504 	addi	sp,sp,20
   1152c:	0012b541 	jmpi	12b54 <_write_r>
   11530:	2940038f 	ldh	r5,14(r5)
   11534:	01c00084 	movi	r7,2
   11538:	000d883a 	mov	r6,zero
   1153c:	00133800 	call	13380 <_lseek_r>
   11540:	8080030b 	ldhu	r2,12(r16)
   11544:	003fed06 	br	114fc <__swrite+0x34>

00011548 <__sseek>:
   11548:	defffe04 	addi	sp,sp,-8
   1154c:	dc000015 	stw	r16,0(sp)
   11550:	2821883a 	mov	r16,r5
   11554:	2940038f 	ldh	r5,14(r5)
   11558:	dfc00115 	stw	ra,4(sp)
   1155c:	00133800 	call	13380 <_lseek_r>
   11560:	10ffffd8 	cmpnei	r3,r2,-1
   11564:	18000826 	beq	r3,zero,11588 <__sseek+0x40>
   11568:	80c0030b 	ldhu	r3,12(r16)
   1156c:	80801415 	stw	r2,80(r16)
   11570:	18c40014 	ori	r3,r3,4096
   11574:	80c0030d 	sth	r3,12(r16)
   11578:	dfc00117 	ldw	ra,4(sp)
   1157c:	dc000017 	ldw	r16,0(sp)
   11580:	dec00204 	addi	sp,sp,8
   11584:	f800283a 	ret
   11588:	80c0030b 	ldhu	r3,12(r16)
   1158c:	18fbffcc 	andi	r3,r3,61439
   11590:	80c0030d 	sth	r3,12(r16)
   11594:	dfc00117 	ldw	ra,4(sp)
   11598:	dc000017 	ldw	r16,0(sp)
   1159c:	dec00204 	addi	sp,sp,8
   115a0:	f800283a 	ret

000115a4 <__sclose>:
   115a4:	2940038f 	ldh	r5,14(r5)
   115a8:	0012bb81 	jmpi	12bb8 <_close_r>

000115ac <__sprint_r.part.0>:
   115ac:	28801917 	ldw	r2,100(r5)
   115b0:	defff604 	addi	sp,sp,-40
   115b4:	dcc00315 	stw	r19,12(sp)
   115b8:	dfc00915 	stw	ra,36(sp)
   115bc:	df000815 	stw	fp,32(sp)
   115c0:	ddc00715 	stw	r23,28(sp)
   115c4:	dd800615 	stw	r22,24(sp)
   115c8:	dd400515 	stw	r21,20(sp)
   115cc:	dd000415 	stw	r20,16(sp)
   115d0:	dc800215 	stw	r18,8(sp)
   115d4:	dc400115 	stw	r17,4(sp)
   115d8:	dc000015 	stw	r16,0(sp)
   115dc:	1088000c 	andi	r2,r2,8192
   115e0:	3027883a 	mov	r19,r6
   115e4:	10002c26 	beq	r2,zero,11698 <__sprint_r.part.0+0xec>
   115e8:	30800217 	ldw	r2,8(r6)
   115ec:	35000017 	ldw	r20,0(r6)
   115f0:	2821883a 	mov	r16,r5
   115f4:	2023883a 	mov	r17,r4
   115f8:	05bfff04 	movi	r22,-4
   115fc:	10002426 	beq	r2,zero,11690 <__sprint_r.part.0+0xe4>
   11600:	a5400117 	ldw	r21,4(r20)
   11604:	a5c00017 	ldw	r23,0(r20)
   11608:	a824d0ba 	srli	r18,r21,2
   1160c:	90001b26 	beq	r18,zero,1167c <__sprint_r.part.0+0xd0>
   11610:	0039883a 	mov	fp,zero
   11614:	00000206 	br	11620 <__sprint_r.part.0+0x74>
   11618:	bdc00104 	addi	r23,r23,4
   1161c:	97001626 	beq	r18,fp,11678 <__sprint_r.part.0+0xcc>
   11620:	b9400017 	ldw	r5,0(r23)
   11624:	800d883a 	mov	r6,r16
   11628:	8809883a 	mov	r4,r17
   1162c:	00131380 	call	13138 <_fputwc_r>
   11630:	10bfffe0 	cmpeqi	r2,r2,-1
   11634:	e7000044 	addi	fp,fp,1
   11638:	103ff726 	beq	r2,zero,11618 <__sprint_r.part.0+0x6c>
   1163c:	00bfffc4 	movi	r2,-1
   11640:	98000215 	stw	zero,8(r19)
   11644:	98000115 	stw	zero,4(r19)
   11648:	dfc00917 	ldw	ra,36(sp)
   1164c:	df000817 	ldw	fp,32(sp)
   11650:	ddc00717 	ldw	r23,28(sp)
   11654:	dd800617 	ldw	r22,24(sp)
   11658:	dd400517 	ldw	r21,20(sp)
   1165c:	dd000417 	ldw	r20,16(sp)
   11660:	dcc00317 	ldw	r19,12(sp)
   11664:	dc800217 	ldw	r18,8(sp)
   11668:	dc400117 	ldw	r17,4(sp)
   1166c:	dc000017 	ldw	r16,0(sp)
   11670:	dec00a04 	addi	sp,sp,40
   11674:	f800283a 	ret
   11678:	98800217 	ldw	r2,8(r19)
   1167c:	adaa703a 	and	r21,r21,r22
   11680:	1545c83a 	sub	r2,r2,r21
   11684:	98800215 	stw	r2,8(r19)
   11688:	a5000204 	addi	r20,r20,8
   1168c:	103fdc1e 	bne	r2,zero,11600 <__sprint_r.part.0+0x54>
   11690:	0005883a 	mov	r2,zero
   11694:	003fea06 	br	11640 <__sprint_r.part.0+0x94>
   11698:	000f06c0 	call	f06c <__sfvwrite_r>
   1169c:	003fe806 	br	11640 <__sprint_r.part.0+0x94>

000116a0 <__sprint_r>:
   116a0:	30c00217 	ldw	r3,8(r6)
   116a4:	18000126 	beq	r3,zero,116ac <__sprint_r+0xc>
   116a8:	00115ac1 	jmpi	115ac <__sprint_r.part.0>
   116ac:	30000115 	stw	zero,4(r6)
   116b0:	0005883a 	mov	r2,zero
   116b4:	f800283a 	ret

000116b8 <___vfiprintf_internal_r>:
   116b8:	deffcf04 	addi	sp,sp,-196
   116bc:	dd802d15 	stw	r22,180(sp)
   116c0:	dd402c15 	stw	r21,176(sp)
   116c4:	dd002b15 	stw	r20,172(sp)
   116c8:	dfc03015 	stw	ra,192(sp)
   116cc:	df002f15 	stw	fp,188(sp)
   116d0:	ddc02e15 	stw	r23,184(sp)
   116d4:	dcc02a15 	stw	r19,168(sp)
   116d8:	dc802915 	stw	r18,164(sp)
   116dc:	dc402815 	stw	r17,160(sp)
   116e0:	dc002715 	stw	r16,156(sp)
   116e4:	d9c00415 	stw	r7,16(sp)
   116e8:	202d883a 	mov	r22,r4
   116ec:	282b883a 	mov	r21,r5
   116f0:	3029883a 	mov	r20,r6
   116f4:	20000226 	beq	r4,zero,11700 <___vfiprintf_internal_r+0x48>
   116f8:	20800e17 	ldw	r2,56(r4)
   116fc:	1001ba26 	beq	r2,zero,11de8 <___vfiprintf_internal_r+0x730>
   11700:	a880030b 	ldhu	r2,12(r21)
   11704:	10c8000c 	andi	r3,r2,8192
   11708:	1800061e 	bne	r3,zero,11724 <___vfiprintf_internal_r+0x6c>
   1170c:	a8c01917 	ldw	r3,100(r21)
   11710:	0137ffc4 	movi	r4,-8193
   11714:	10880014 	ori	r2,r2,8192
   11718:	1906703a 	and	r3,r3,r4
   1171c:	a880030d 	sth	r2,12(r21)
   11720:	a8c01915 	stw	r3,100(r21)
   11724:	10c0020c 	andi	r3,r2,8
   11728:	18010526 	beq	r3,zero,11b40 <___vfiprintf_internal_r+0x488>
   1172c:	a8c00417 	ldw	r3,16(r21)
   11730:	18010326 	beq	r3,zero,11b40 <___vfiprintf_internal_r+0x488>
   11734:	1080068c 	andi	r2,r2,26
   11738:	10800298 	cmpnei	r2,r2,10
   1173c:	10010826 	beq	r2,zero,11b60 <___vfiprintf_internal_r+0x4a8>
   11740:	dc801704 	addi	r18,sp,92
   11744:	dc800a15 	stw	r18,40(sp)
   11748:	d8000c15 	stw	zero,48(sp)
   1174c:	d8000b15 	stw	zero,44(sp)
   11750:	9021883a 	mov	r16,r18
   11754:	d8000515 	stw	zero,20(sp)
   11758:	d8000115 	stw	zero,4(sp)
   1175c:	a0800007 	ldb	r2,0(r20)
   11760:	1000e526 	beq	r2,zero,11af8 <___vfiprintf_internal_r+0x440>
   11764:	a023883a 	mov	r17,r20
   11768:	00000306 	br	11778 <___vfiprintf_internal_r+0xc0>
   1176c:	88800047 	ldb	r2,1(r17)
   11770:	8c400044 	addi	r17,r17,1
   11774:	10013026 	beq	r2,zero,11c38 <___vfiprintf_internal_r+0x580>
   11778:	10800958 	cmpnei	r2,r2,37
   1177c:	103ffb1e 	bne	r2,zero,1176c <___vfiprintf_internal_r+0xb4>
   11780:	8d27c83a 	sub	r19,r17,r20
   11784:	8d012e1e 	bne	r17,r20,11c40 <___vfiprintf_internal_r+0x588>
   11788:	88800003 	ldbu	r2,0(r17)
   1178c:	10803fcc 	andi	r2,r2,255
   11790:	1080201c 	xori	r2,r2,128
   11794:	10bfe004 	addi	r2,r2,-128
   11798:	1000d726 	beq	r2,zero,11af8 <___vfiprintf_internal_r+0x440>
   1179c:	88800047 	ldb	r2,1(r17)
   117a0:	8d000044 	addi	r20,r17,1
   117a4:	d8000945 	stb	zero,37(sp)
   117a8:	000b883a 	mov	r5,zero
   117ac:	000d883a 	mov	r6,zero
   117b0:	023fffc4 	movi	r8,-1
   117b4:	0023883a 	mov	r17,zero
   117b8:	001b883a 	mov	r13,zero
   117bc:	a5000044 	addi	r20,r20,1
   117c0:	10fff804 	addi	r3,r2,-32
   117c4:	19001668 	cmpgeui	r4,r3,89
   117c8:	20006c1e 	bne	r4,zero,1197c <___vfiprintf_internal_r+0x2c4>
   117cc:	180690ba 	slli	r3,r3,2
   117d0:	01000074 	movhi	r4,1
   117d4:	1909883a 	add	r4,r3,r4
   117d8:	20c5f817 	ldw	r3,6112(r4)
   117dc:	1800683a 	jmp	r3
   117e0:	00012008 	cmpgei	zero,zero,1152
   117e4:	0001197c 	xorhi	zero,zero,1125
   117e8:	0001197c 	xorhi	zero,zero,1125
   117ec:	00011ffc 	xorhi	zero,zero,1151
   117f0:	0001197c 	xorhi	zero,zero,1125
   117f4:	0001197c 	xorhi	zero,zero,1125
   117f8:	0001197c 	xorhi	zero,zero,1125
   117fc:	0001197c 	xorhi	zero,zero,1125
   11800:	0001197c 	xorhi	zero,zero,1125
   11804:	0001197c 	xorhi	zero,zero,1125
   11808:	00011e64 	muli	zero,zero,1145
   1180c:	00011fec 	andhi	zero,zero,1151
   11810:	0001197c 	xorhi	zero,zero,1125
   11814:	00011e7c 	xorhi	zero,zero,1145
   11818:	00011e88 	cmpgei	zero,zero,1146
   1181c:	0001197c 	xorhi	zero,zero,1125
   11820:	00011fe0 	cmpeqi	zero,zero,1151
   11824:	00011944 	movi	zero,1125
   11828:	00011944 	movi	zero,1125
   1182c:	00011944 	movi	zero,1125
   11830:	00011944 	movi	zero,1125
   11834:	00011944 	movi	zero,1125
   11838:	00011944 	movi	zero,1125
   1183c:	00011944 	movi	zero,1125
   11840:	00011944 	movi	zero,1125
   11844:	00011944 	movi	zero,1125
   11848:	0001197c 	xorhi	zero,zero,1125
   1184c:	0001197c 	xorhi	zero,zero,1125
   11850:	0001197c 	xorhi	zero,zero,1125
   11854:	0001197c 	xorhi	zero,zero,1125
   11858:	0001197c 	xorhi	zero,zero,1125
   1185c:	0001197c 	xorhi	zero,zero,1125
   11860:	0001197c 	xorhi	zero,zero,1125
   11864:	0001197c 	xorhi	zero,zero,1125
   11868:	0001197c 	xorhi	zero,zero,1125
   1186c:	0001197c 	xorhi	zero,zero,1125
   11870:	00011ed4 	movui	zero,1147
   11874:	0001197c 	xorhi	zero,zero,1125
   11878:	0001197c 	xorhi	zero,zero,1125
   1187c:	0001197c 	xorhi	zero,zero,1125
   11880:	0001197c 	xorhi	zero,zero,1125
   11884:	0001197c 	xorhi	zero,zero,1125
   11888:	0001197c 	xorhi	zero,zero,1125
   1188c:	0001197c 	xorhi	zero,zero,1125
   11890:	0001197c 	xorhi	zero,zero,1125
   11894:	0001197c 	xorhi	zero,zero,1125
   11898:	0001197c 	xorhi	zero,zero,1125
   1189c:	00011bd0 	cmplti	zero,zero,1135
   118a0:	0001197c 	xorhi	zero,zero,1125
   118a4:	0001197c 	xorhi	zero,zero,1125
   118a8:	0001197c 	xorhi	zero,zero,1125
   118ac:	0001197c 	xorhi	zero,zero,1125
   118b0:	0001197c 	xorhi	zero,zero,1125
   118b4:	00011ba8 	cmpgeui	zero,zero,1134
   118b8:	0001197c 	xorhi	zero,zero,1125
   118bc:	0001197c 	xorhi	zero,zero,1125
   118c0:	000120d8 	cmpnei	zero,zero,1155
   118c4:	0001197c 	xorhi	zero,zero,1125
   118c8:	0001197c 	xorhi	zero,zero,1125
   118cc:	0001197c 	xorhi	zero,zero,1125
   118d0:	0001197c 	xorhi	zero,zero,1125
   118d4:	0001197c 	xorhi	zero,zero,1125
   118d8:	0001197c 	xorhi	zero,zero,1125
   118dc:	0001197c 	xorhi	zero,zero,1125
   118e0:	0001197c 	xorhi	zero,zero,1125
   118e4:	0001197c 	xorhi	zero,zero,1125
   118e8:	0001197c 	xorhi	zero,zero,1125
   118ec:	000120b0 	cmpltui	zero,zero,1154
   118f0:	00011df0 	cmpltui	zero,zero,1143
   118f4:	0001197c 	xorhi	zero,zero,1125
   118f8:	0001197c 	xorhi	zero,zero,1125
   118fc:	0001197c 	xorhi	zero,zero,1125
   11900:	00012050 	cmplti	zero,zero,1153
   11904:	00011df0 	cmpltui	zero,zero,1143
   11908:	0001197c 	xorhi	zero,zero,1125
   1190c:	0001197c 	xorhi	zero,zero,1125
   11910:	0001209c 	xori	zero,zero,1154
   11914:	0001197c 	xorhi	zero,zero,1125
   11918:	0001205c 	xori	zero,zero,1153
   1191c:	00011bd4 	movui	zero,1135
   11920:	000121cc 	andi	zero,zero,1159
   11924:	000121c0 	call	121c <kf_bfly5+0x610>
   11928:	0001197c 	xorhi	zero,zero,1125
   1192c:	00012168 	cmpgeui	zero,zero,1157
   11930:	0001197c 	xorhi	zero,zero,1125
   11934:	00011bac 	andhi	zero,zero,1134
   11938:	0001197c 	xorhi	zero,zero,1125
   1193c:	0001197c 	xorhi	zero,zero,1125
   11940:	00012120 	cmpeqi	zero,zero,1156
   11944:	0023883a 	mov	r17,zero
   11948:	113ff404 	addi	r4,r2,-48
   1194c:	880690ba 	slli	r3,r17,2
   11950:	a0800007 	ldb	r2,0(r20)
   11954:	a5000044 	addi	r20,r20,1
   11958:	1c63883a 	add	r17,r3,r17
   1195c:	8c63883a 	add	r17,r17,r17
   11960:	2463883a 	add	r17,r4,r17
   11964:	113ff404 	addi	r4,r2,-48
   11968:	20c002b0 	cmpltui	r3,r4,10
   1196c:	183ff71e 	bne	r3,zero,1194c <___vfiprintf_internal_r+0x294>
   11970:	10fff804 	addi	r3,r2,-32
   11974:	19001668 	cmpgeui	r4,r3,89
   11978:	203f9426 	beq	r4,zero,117cc <___vfiprintf_internal_r+0x114>
   1197c:	29403fcc 	andi	r5,r5,255
   11980:	2803b61e 	bne	r5,zero,1285c <___vfiprintf_internal_r+0x11a4>
   11984:	10005c26 	beq	r2,zero,11af8 <___vfiprintf_internal_r+0x440>
   11988:	d8800d05 	stb	r2,52(sp)
   1198c:	d8000945 	stb	zero,37(sp)
   11990:	05c00044 	movi	r23,1
   11994:	07000044 	movi	fp,1
   11998:	dcc00d04 	addi	r19,sp,52
   1199c:	db400015 	stw	r13,0(sp)
   119a0:	0011883a 	mov	r8,zero
   119a4:	d8800017 	ldw	r2,0(sp)
   119a8:	1380008c 	andi	r14,r2,2
   119ac:	70000126 	beq	r14,zero,119b4 <___vfiprintf_internal_r+0x2fc>
   119b0:	bdc00084 	addi	r23,r23,2
   119b4:	d8800017 	ldw	r2,0(sp)
   119b8:	d9000b17 	ldw	r4,44(sp)
   119bc:	1340210c 	andi	r13,r2,132
   119c0:	21800044 	addi	r6,r4,1
   119c4:	d8800c17 	ldw	r2,48(sp)
   119c8:	300b883a 	mov	r5,r6
   119cc:	6800021e 	bne	r13,zero,119d8 <___vfiprintf_internal_r+0x320>
   119d0:	8dc7c83a 	sub	r3,r17,r23
   119d4:	00c2e516 	blt	zero,r3,1256c <___vfiprintf_internal_r+0xeb4>
   119d8:	d8c00947 	ldb	r3,37(sp)
   119dc:	18000c26 	beq	r3,zero,11a10 <___vfiprintf_internal_r+0x358>
   119e0:	d8c00944 	addi	r3,sp,37
   119e4:	10800044 	addi	r2,r2,1
   119e8:	80c00015 	stw	r3,0(r16)
   119ec:	00c00044 	movi	r3,1
   119f0:	80c00115 	stw	r3,4(r16)
   119f4:	d8800c15 	stw	r2,48(sp)
   119f8:	d9400b15 	stw	r5,44(sp)
   119fc:	28c00208 	cmpgei	r3,r5,8
   11a00:	1802a01e 	bne	r3,zero,12484 <___vfiprintf_internal_r+0xdcc>
   11a04:	2809883a 	mov	r4,r5
   11a08:	84000204 	addi	r16,r16,8
   11a0c:	29400044 	addi	r5,r5,1
   11a10:	70001726 	beq	r14,zero,11a70 <___vfiprintf_internal_r+0x3b8>
   11a14:	d8c00984 	addi	r3,sp,38
   11a18:	10800084 	addi	r2,r2,2
   11a1c:	80c00015 	stw	r3,0(r16)
   11a20:	00c00084 	movi	r3,2
   11a24:	80c00115 	stw	r3,4(r16)
   11a28:	d8800c15 	stw	r2,48(sp)
   11a2c:	d9400b15 	stw	r5,44(sp)
   11a30:	28c00208 	cmpgei	r3,r5,8
   11a34:	1802aa26 	beq	r3,zero,124e0 <___vfiprintf_internal_r+0xe28>
   11a38:	10032526 	beq	r2,zero,126d0 <___vfiprintf_internal_r+0x1018>
   11a3c:	d9800a04 	addi	r6,sp,40
   11a40:	a80b883a 	mov	r5,r21
   11a44:	b009883a 	mov	r4,r22
   11a48:	da000315 	stw	r8,12(sp)
   11a4c:	db400215 	stw	r13,8(sp)
   11a50:	00115ac0 	call	115ac <__sprint_r.part.0>
   11a54:	10002a1e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   11a58:	d9000b17 	ldw	r4,44(sp)
   11a5c:	d8800c17 	ldw	r2,48(sp)
   11a60:	da000317 	ldw	r8,12(sp)
   11a64:	db400217 	ldw	r13,8(sp)
   11a68:	9021883a 	mov	r16,r18
   11a6c:	21400044 	addi	r5,r4,1
   11a70:	6b402018 	cmpnei	r13,r13,128
   11a74:	6801f126 	beq	r13,zero,1223c <___vfiprintf_internal_r+0xb84>
   11a78:	4711c83a 	sub	r8,r8,fp
   11a7c:	02022e16 	blt	zero,r8,12338 <___vfiprintf_internal_r+0xc80>
   11a80:	e085883a 	add	r2,fp,r2
   11a84:	d9400b15 	stw	r5,44(sp)
   11a88:	84c00015 	stw	r19,0(r16)
   11a8c:	87000115 	stw	fp,4(r16)
   11a90:	d8800c15 	stw	r2,48(sp)
   11a94:	29400208 	cmpgei	r5,r5,8
   11a98:	2801e226 	beq	r5,zero,12224 <___vfiprintf_internal_r+0xb6c>
   11a9c:	10009826 	beq	r2,zero,11d00 <___vfiprintf_internal_r+0x648>
   11aa0:	d9800a04 	addi	r6,sp,40
   11aa4:	a80b883a 	mov	r5,r21
   11aa8:	b009883a 	mov	r4,r22
   11aac:	00115ac0 	call	115ac <__sprint_r.part.0>
   11ab0:	1000131e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   11ab4:	d8800c17 	ldw	r2,48(sp)
   11ab8:	9021883a 	mov	r16,r18
   11abc:	d8c00017 	ldw	r3,0(sp)
   11ac0:	1cc0010c 	andi	r19,r3,4
   11ac4:	98000226 	beq	r19,zero,11ad0 <___vfiprintf_internal_r+0x418>
   11ac8:	8de7c83a 	sub	r19,r17,r23
   11acc:	04c09316 	blt	zero,r19,11d1c <___vfiprintf_internal_r+0x664>
   11ad0:	8dc0010e 	bge	r17,r23,11ad8 <___vfiprintf_internal_r+0x420>
   11ad4:	b823883a 	mov	r17,r23
   11ad8:	d8c00117 	ldw	r3,4(sp)
   11adc:	1c47883a 	add	r3,r3,r17
   11ae0:	d8c00115 	stw	r3,4(sp)
   11ae4:	10025d1e 	bne	r2,zero,1245c <___vfiprintf_internal_r+0xda4>
   11ae8:	a0800007 	ldb	r2,0(r20)
   11aec:	d8000b15 	stw	zero,44(sp)
   11af0:	9021883a 	mov	r16,r18
   11af4:	103f1b1e 	bne	r2,zero,11764 <___vfiprintf_internal_r+0xac>
   11af8:	d8800c17 	ldw	r2,48(sp)
   11afc:	1003591e 	bne	r2,zero,12864 <___vfiprintf_internal_r+0x11ac>
   11b00:	a880030b 	ldhu	r2,12(r21)
   11b04:	1080100c 	andi	r2,r2,64
   11b08:	1003741e 	bne	r2,zero,128dc <___vfiprintf_internal_r+0x1224>
   11b0c:	d8800117 	ldw	r2,4(sp)
   11b10:	dfc03017 	ldw	ra,192(sp)
   11b14:	df002f17 	ldw	fp,188(sp)
   11b18:	ddc02e17 	ldw	r23,184(sp)
   11b1c:	dd802d17 	ldw	r22,180(sp)
   11b20:	dd402c17 	ldw	r21,176(sp)
   11b24:	dd002b17 	ldw	r20,172(sp)
   11b28:	dcc02a17 	ldw	r19,168(sp)
   11b2c:	dc802917 	ldw	r18,164(sp)
   11b30:	dc402817 	ldw	r17,160(sp)
   11b34:	dc002717 	ldw	r16,156(sp)
   11b38:	dec03104 	addi	sp,sp,196
   11b3c:	f800283a 	ret
   11b40:	a80b883a 	mov	r5,r21
   11b44:	b009883a 	mov	r4,r22
   11b48:	000cad00 	call	cad0 <__swsetup_r>
   11b4c:	1003631e 	bne	r2,zero,128dc <___vfiprintf_internal_r+0x1224>
   11b50:	a880030b 	ldhu	r2,12(r21)
   11b54:	1080068c 	andi	r2,r2,26
   11b58:	10800298 	cmpnei	r2,r2,10
   11b5c:	103ef81e 	bne	r2,zero,11740 <___vfiprintf_internal_r+0x88>
   11b60:	a880038f 	ldh	r2,14(r21)
   11b64:	103ef616 	blt	r2,zero,11740 <___vfiprintf_internal_r+0x88>
   11b68:	d9c00417 	ldw	r7,16(sp)
   11b6c:	a00d883a 	mov	r6,r20
   11b70:	a80b883a 	mov	r5,r21
   11b74:	b009883a 	mov	r4,r22
   11b78:	dfc03017 	ldw	ra,192(sp)
   11b7c:	df002f17 	ldw	fp,188(sp)
   11b80:	ddc02e17 	ldw	r23,184(sp)
   11b84:	dd802d17 	ldw	r22,180(sp)
   11b88:	dd402c17 	ldw	r21,176(sp)
   11b8c:	dd002b17 	ldw	r20,172(sp)
   11b90:	dcc02a17 	ldw	r19,168(sp)
   11b94:	dc802917 	ldw	r18,164(sp)
   11b98:	dc402817 	ldw	r17,160(sp)
   11b9c:	dc002717 	ldw	r16,156(sp)
   11ba0:	dec03104 	addi	sp,sp,196
   11ba4:	00129341 	jmpi	12934 <__sbprintf>
   11ba8:	6b400414 	ori	r13,r13,16
   11bac:	6880080c 	andi	r2,r13,32
   11bb0:	10004726 	beq	r2,zero,11cd0 <___vfiprintf_internal_r+0x618>
   11bb4:	d8c00417 	ldw	r3,16(sp)
   11bb8:	00800044 	movi	r2,1
   11bbc:	1dc00017 	ldw	r23,0(r3)
   11bc0:	1f000117 	ldw	fp,4(r3)
   11bc4:	18c00204 	addi	r3,r3,8
   11bc8:	d8c00415 	stw	r3,16(sp)
   11bcc:	00000906 	br	11bf4 <___vfiprintf_internal_r+0x53c>
   11bd0:	6b400414 	ori	r13,r13,16
   11bd4:	6880080c 	andi	r2,r13,32
   11bd8:	10003126 	beq	r2,zero,11ca0 <___vfiprintf_internal_r+0x5e8>
   11bdc:	d8c00417 	ldw	r3,16(sp)
   11be0:	0005883a 	mov	r2,zero
   11be4:	1dc00017 	ldw	r23,0(r3)
   11be8:	1f000117 	ldw	fp,4(r3)
   11bec:	18c00204 	addi	r3,r3,8
   11bf0:	d8c00415 	stw	r3,16(sp)
   11bf4:	d8000945 	stb	zero,37(sp)
   11bf8:	40ffffe0 	cmpeqi	r3,r8,-1
   11bfc:	001d883a 	mov	r14,zero
   11c00:	1800d11e 	bne	r3,zero,11f48 <___vfiprintf_internal_r+0x890>
   11c04:	04ffdfc4 	movi	r19,-129
   11c08:	6cc8703a 	and	r4,r13,r19
   11c0c:	bf06b03a 	or	r3,r23,fp
   11c10:	d9000015 	stw	r4,0(sp)
   11c14:	1802361e 	bne	r3,zero,124f0 <___vfiprintf_internal_r+0xe38>
   11c18:	4001fb1e 	bne	r8,zero,12408 <___vfiprintf_internal_r+0xd50>
   11c1c:	1002a31e 	bne	r2,zero,126ac <___vfiprintf_internal_r+0xff4>
   11c20:	6f00004c 	andi	fp,r13,1
   11c24:	e002c726 	beq	fp,zero,12744 <___vfiprintf_internal_r+0x108c>
   11c28:	00800c04 	movi	r2,48
   11c2c:	d88016c5 	stb	r2,91(sp)
   11c30:	dcc016c4 	addi	r19,sp,91
   11c34:	0000e106 	br	11fbc <___vfiprintf_internal_r+0x904>
   11c38:	8d27c83a 	sub	r19,r17,r20
   11c3c:	8d3fae26 	beq	r17,r20,11af8 <___vfiprintf_internal_r+0x440>
   11c40:	d8c00c17 	ldw	r3,48(sp)
   11c44:	d8800b17 	ldw	r2,44(sp)
   11c48:	85000015 	stw	r20,0(r16)
   11c4c:	98c7883a 	add	r3,r19,r3
   11c50:	10800044 	addi	r2,r2,1
   11c54:	d8800b15 	stw	r2,44(sp)
   11c58:	84c00115 	stw	r19,4(r16)
   11c5c:	d8c00c15 	stw	r3,48(sp)
   11c60:	10800208 	cmpgei	r2,r2,8
   11c64:	1000061e 	bne	r2,zero,11c80 <___vfiprintf_internal_r+0x5c8>
   11c68:	84000204 	addi	r16,r16,8
   11c6c:	d8c00117 	ldw	r3,4(sp)
   11c70:	88800003 	ldbu	r2,0(r17)
   11c74:	1cc7883a 	add	r3,r3,r19
   11c78:	d8c00115 	stw	r3,4(sp)
   11c7c:	003ec306 	br	1178c <___vfiprintf_internal_r+0xd4>
   11c80:	18028626 	beq	r3,zero,1269c <___vfiprintf_internal_r+0xfe4>
   11c84:	d9800a04 	addi	r6,sp,40
   11c88:	a80b883a 	mov	r5,r21
   11c8c:	b009883a 	mov	r4,r22
   11c90:	00115ac0 	call	115ac <__sprint_r.part.0>
   11c94:	103f9a1e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   11c98:	9021883a 	mov	r16,r18
   11c9c:	003ff306 	br	11c6c <___vfiprintf_internal_r+0x5b4>
   11ca0:	d8c00417 	ldw	r3,16(sp)
   11ca4:	6880040c 	andi	r2,r13,16
   11ca8:	1dc00017 	ldw	r23,0(r3)
   11cac:	18c00104 	addi	r3,r3,4
   11cb0:	d8c00415 	stw	r3,16(sp)
   11cb4:	1000031e 	bne	r2,zero,11cc4 <___vfiprintf_internal_r+0x60c>
   11cb8:	6880100c 	andi	r2,r13,64
   11cbc:	10000126 	beq	r2,zero,11cc4 <___vfiprintf_internal_r+0x60c>
   11cc0:	bdffffcc 	andi	r23,r23,65535
   11cc4:	0039883a 	mov	fp,zero
   11cc8:	0005883a 	mov	r2,zero
   11ccc:	003fc906 	br	11bf4 <___vfiprintf_internal_r+0x53c>
   11cd0:	d8c00417 	ldw	r3,16(sp)
   11cd4:	6880040c 	andi	r2,r13,16
   11cd8:	1dc00017 	ldw	r23,0(r3)
   11cdc:	18c00104 	addi	r3,r3,4
   11ce0:	d8c00415 	stw	r3,16(sp)
   11ce4:	1000031e 	bne	r2,zero,11cf4 <___vfiprintf_internal_r+0x63c>
   11ce8:	6880100c 	andi	r2,r13,64
   11cec:	10000126 	beq	r2,zero,11cf4 <___vfiprintf_internal_r+0x63c>
   11cf0:	bdffffcc 	andi	r23,r23,65535
   11cf4:	0039883a 	mov	fp,zero
   11cf8:	00800044 	movi	r2,1
   11cfc:	003fbd06 	br	11bf4 <___vfiprintf_internal_r+0x53c>
   11d00:	d8c00017 	ldw	r3,0(sp)
   11d04:	d8000b15 	stw	zero,44(sp)
   11d08:	1cc0010c 	andi	r19,r3,4
   11d0c:	98025226 	beq	r19,zero,12658 <___vfiprintf_internal_r+0xfa0>
   11d10:	8de7c83a 	sub	r19,r17,r23
   11d14:	04c2500e 	bge	zero,r19,12658 <___vfiprintf_internal_r+0xfa0>
   11d18:	9021883a 	mov	r16,r18
   11d1c:	98c00450 	cmplti	r3,r19,17
   11d20:	d9000b17 	ldw	r4,44(sp)
   11d24:	01c00074 	movhi	r7,1
   11d28:	1802e61e 	bne	r3,zero,128c4 <___vfiprintf_internal_r+0x120c>
   11d2c:	39dff504 	addi	r7,r7,32724
   11d30:	07000404 	movi	fp,16
   11d34:	00000606 	br	11d50 <___vfiprintf_internal_r+0x698>
   11d38:	21400084 	addi	r5,r4,2
   11d3c:	84000204 	addi	r16,r16,8
   11d40:	1809883a 	mov	r4,r3
   11d44:	9cfffc04 	addi	r19,r19,-16
   11d48:	98c00448 	cmpgei	r3,r19,17
   11d4c:	18001726 	beq	r3,zero,11dac <___vfiprintf_internal_r+0x6f4>
   11d50:	20c00044 	addi	r3,r4,1
   11d54:	10800404 	addi	r2,r2,16
   11d58:	81c00015 	stw	r7,0(r16)
   11d5c:	87000115 	stw	fp,4(r16)
   11d60:	d8800c15 	stw	r2,48(sp)
   11d64:	d8c00b15 	stw	r3,44(sp)
   11d68:	19400208 	cmpgei	r5,r3,8
   11d6c:	283ff226 	beq	r5,zero,11d38 <___vfiprintf_internal_r+0x680>
   11d70:	d9800a04 	addi	r6,sp,40
   11d74:	a80b883a 	mov	r5,r21
   11d78:	b009883a 	mov	r4,r22
   11d7c:	10012b26 	beq	r2,zero,1222c <___vfiprintf_internal_r+0xb74>
   11d80:	d9c00015 	stw	r7,0(sp)
   11d84:	00115ac0 	call	115ac <__sprint_r.part.0>
   11d88:	103f5d1e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   11d8c:	d9000b17 	ldw	r4,44(sp)
   11d90:	9cfffc04 	addi	r19,r19,-16
   11d94:	98c00448 	cmpgei	r3,r19,17
   11d98:	d8800c17 	ldw	r2,48(sp)
   11d9c:	d9c00017 	ldw	r7,0(sp)
   11da0:	9021883a 	mov	r16,r18
   11da4:	21400044 	addi	r5,r4,1
   11da8:	183fe91e 	bne	r3,zero,11d50 <___vfiprintf_internal_r+0x698>
   11dac:	14c5883a 	add	r2,r2,r19
   11db0:	d9400b15 	stw	r5,44(sp)
   11db4:	81c00015 	stw	r7,0(r16)
   11db8:	84c00115 	stw	r19,4(r16)
   11dbc:	d8800c15 	stw	r2,48(sp)
   11dc0:	29400210 	cmplti	r5,r5,8
   11dc4:	283f421e 	bne	r5,zero,11ad0 <___vfiprintf_internal_r+0x418>
   11dc8:	10022326 	beq	r2,zero,12658 <___vfiprintf_internal_r+0xfa0>
   11dcc:	d9800a04 	addi	r6,sp,40
   11dd0:	a80b883a 	mov	r5,r21
   11dd4:	b009883a 	mov	r4,r22
   11dd8:	00115ac0 	call	115ac <__sprint_r.part.0>
   11ddc:	103f481e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   11de0:	d8800c17 	ldw	r2,48(sp)
   11de4:	003f3a06 	br	11ad0 <___vfiprintf_internal_r+0x418>
   11de8:	000ec0c0 	call	ec0c <__sinit>
   11dec:	003e4406 	br	11700 <___vfiprintf_internal_r+0x48>
   11df0:	29403fcc 	andi	r5,r5,255
   11df4:	2802b11e 	bne	r5,zero,128bc <___vfiprintf_internal_r+0x1204>
   11df8:	6880080c 	andi	r2,r13,32
   11dfc:	10003a26 	beq	r2,zero,11ee8 <___vfiprintf_internal_r+0x830>
   11e00:	d8c00417 	ldw	r3,16(sp)
   11e04:	18800117 	ldw	r2,4(r3)
   11e08:	1dc00017 	ldw	r23,0(r3)
   11e0c:	18c00204 	addi	r3,r3,8
   11e10:	d8c00415 	stw	r3,16(sp)
   11e14:	1039883a 	mov	fp,r2
   11e18:	10004116 	blt	r2,zero,11f20 <___vfiprintf_internal_r+0x868>
   11e1c:	40bfffd8 	cmpnei	r2,r8,-1
   11e20:	db800943 	ldbu	r14,37(sp)
   11e24:	10000626 	beq	r2,zero,11e40 <___vfiprintf_internal_r+0x788>
   11e28:	04ffdfc4 	movi	r19,-129
   11e2c:	6cc6703a 	and	r3,r13,r19
   11e30:	bf04b03a 	or	r2,r23,fp
   11e34:	d8c00015 	stw	r3,0(sp)
   11e38:	10021b26 	beq	r2,zero,126a8 <___vfiprintf_internal_r+0xff0>
   11e3c:	db400017 	ldw	r13,0(sp)
   11e40:	e001ad1e 	bne	fp,zero,124f8 <___vfiprintf_internal_r+0xe40>
   11e44:	b88002a8 	cmpgeui	r2,r23,10
   11e48:	1001ab1e 	bne	r2,zero,124f8 <___vfiprintf_internal_r+0xe40>
   11e4c:	bdc00c04 	addi	r23,r23,48
   11e50:	ddc016c5 	stb	r23,91(sp)
   11e54:	db400015 	stw	r13,0(sp)
   11e58:	07000044 	movi	fp,1
   11e5c:	dcc016c4 	addi	r19,sp,91
   11e60:	00005606 	br	11fbc <___vfiprintf_internal_r+0x904>
   11e64:	d8800417 	ldw	r2,16(sp)
   11e68:	14400017 	ldw	r17,0(r2)
   11e6c:	10c00104 	addi	r3,r2,4
   11e70:	8802310e 	bge	r17,zero,12738 <___vfiprintf_internal_r+0x1080>
   11e74:	0463c83a 	sub	r17,zero,r17
   11e78:	d8c00415 	stw	r3,16(sp)
   11e7c:	a0800007 	ldb	r2,0(r20)
   11e80:	6b400114 	ori	r13,r13,4
   11e84:	003e4d06 	br	117bc <___vfiprintf_internal_r+0x104>
   11e88:	a0800007 	ldb	r2,0(r20)
   11e8c:	a0c00044 	addi	r3,r20,1
   11e90:	11000aa0 	cmpeqi	r4,r2,42
   11e94:	2002941e 	bne	r4,zero,128e8 <___vfiprintf_internal_r+0x1230>
   11e98:	113ff404 	addi	r4,r2,-48
   11e9c:	21c002b0 	cmpltui	r7,r4,10
   11ea0:	1829883a 	mov	r20,r3
   11ea4:	0011883a 	mov	r8,zero
   11ea8:	383e4526 	beq	r7,zero,117c0 <___vfiprintf_internal_r+0x108>
   11eac:	400690ba 	slli	r3,r8,2
   11eb0:	a0800007 	ldb	r2,0(r20)
   11eb4:	a5000044 	addi	r20,r20,1
   11eb8:	1a11883a 	add	r8,r3,r8
   11ebc:	4211883a 	add	r8,r8,r8
   11ec0:	4111883a 	add	r8,r8,r4
   11ec4:	113ff404 	addi	r4,r2,-48
   11ec8:	20c002b0 	cmpltui	r3,r4,10
   11ecc:	183ff71e 	bne	r3,zero,11eac <___vfiprintf_internal_r+0x7f4>
   11ed0:	003e3b06 	br	117c0 <___vfiprintf_internal_r+0x108>
   11ed4:	29403fcc 	andi	r5,r5,255
   11ed8:	28026d1e 	bne	r5,zero,12890 <___vfiprintf_internal_r+0x11d8>
   11edc:	6b400414 	ori	r13,r13,16
   11ee0:	6880080c 	andi	r2,r13,32
   11ee4:	103fc61e 	bne	r2,zero,11e00 <___vfiprintf_internal_r+0x748>
   11ee8:	d8c00417 	ldw	r3,16(sp)
   11eec:	6880040c 	andi	r2,r13,16
   11ef0:	1dc00017 	ldw	r23,0(r3)
   11ef4:	18c00104 	addi	r3,r3,4
   11ef8:	d8c00415 	stw	r3,16(sp)
   11efc:	1001f11e 	bne	r2,zero,126c4 <___vfiprintf_internal_r+0x100c>
   11f00:	6880100c 	andi	r2,r13,64
   11f04:	1001ef26 	beq	r2,zero,126c4 <___vfiprintf_internal_r+0x100c>
   11f08:	bdffffcc 	andi	r23,r23,65535
   11f0c:	bde0001c 	xori	r23,r23,32768
   11f10:	bde00004 	addi	r23,r23,-32768
   11f14:	b839d7fa 	srai	fp,r23,31
   11f18:	e005883a 	mov	r2,fp
   11f1c:	103fbf0e 	bge	r2,zero,11e1c <___vfiprintf_internal_r+0x764>
   11f20:	b804c03a 	cmpne	r2,r23,zero
   11f24:	0739c83a 	sub	fp,zero,fp
   11f28:	e0b9c83a 	sub	fp,fp,r2
   11f2c:	00800b44 	movi	r2,45
   11f30:	d8800945 	stb	r2,37(sp)
   11f34:	40ffffe0 	cmpeqi	r3,r8,-1
   11f38:	05efc83a 	sub	r23,zero,r23
   11f3c:	03800b44 	movi	r14,45
   11f40:	00800044 	movi	r2,1
   11f44:	183f2f26 	beq	r3,zero,11c04 <___vfiprintf_internal_r+0x54c>
   11f48:	10c00060 	cmpeqi	r3,r2,1
   11f4c:	183fbc1e 	bne	r3,zero,11e40 <___vfiprintf_internal_r+0x788>
   11f50:	108000a0 	cmpeqi	r2,r2,2
   11f54:	1001311e 	bne	r2,zero,1241c <___vfiprintf_internal_r+0xd64>
   11f58:	9027883a 	mov	r19,r18
   11f5c:	e008977a 	slli	r4,fp,29
   11f60:	b806d0fa 	srli	r3,r23,3
   11f64:	e038d0fa 	srli	fp,fp,3
   11f68:	b88001cc 	andi	r2,r23,7
   11f6c:	10800c04 	addi	r2,r2,48
   11f70:	20eeb03a 	or	r23,r4,r3
   11f74:	98bfffc5 	stb	r2,-1(r19)
   11f78:	bf06b03a 	or	r3,r23,fp
   11f7c:	980b883a 	mov	r5,r19
   11f80:	9cffffc4 	addi	r19,r19,-1
   11f84:	183ff51e 	bne	r3,zero,11f5c <___vfiprintf_internal_r+0x8a4>
   11f88:	68c0004c 	andi	r3,r13,1
   11f8c:	18013026 	beq	r3,zero,12450 <___vfiprintf_internal_r+0xd98>
   11f90:	10803fcc 	andi	r2,r2,255
   11f94:	1080201c 	xori	r2,r2,128
   11f98:	10bfe004 	addi	r2,r2,-128
   11f9c:	10800c18 	cmpnei	r2,r2,48
   11fa0:	10012b26 	beq	r2,zero,12450 <___vfiprintf_internal_r+0xd98>
   11fa4:	297fff84 	addi	r5,r5,-2
   11fa8:	00800c04 	movi	r2,48
   11fac:	98bfffc5 	stb	r2,-1(r19)
   11fb0:	9179c83a 	sub	fp,r18,r5
   11fb4:	db400015 	stw	r13,0(sp)
   11fb8:	2827883a 	mov	r19,r5
   11fbc:	e02f883a 	mov	r23,fp
   11fc0:	e200010e 	bge	fp,r8,11fc8 <___vfiprintf_internal_r+0x910>
   11fc4:	402f883a 	mov	r23,r8
   11fc8:	73803fcc 	andi	r14,r14,255
   11fcc:	7380201c 	xori	r14,r14,128
   11fd0:	73bfe004 	addi	r14,r14,-128
   11fd4:	703e7326 	beq	r14,zero,119a4 <___vfiprintf_internal_r+0x2ec>
   11fd8:	bdc00044 	addi	r23,r23,1
   11fdc:	003e7106 	br	119a4 <___vfiprintf_internal_r+0x2ec>
   11fe0:	a0800007 	ldb	r2,0(r20)
   11fe4:	6b402014 	ori	r13,r13,128
   11fe8:	003df406 	br	117bc <___vfiprintf_internal_r+0x104>
   11fec:	a0800007 	ldb	r2,0(r20)
   11ff0:	01400044 	movi	r5,1
   11ff4:	01800ac4 	movi	r6,43
   11ff8:	003df006 	br	117bc <___vfiprintf_internal_r+0x104>
   11ffc:	a0800007 	ldb	r2,0(r20)
   12000:	6b400054 	ori	r13,r13,1
   12004:	003ded06 	br	117bc <___vfiprintf_internal_r+0x104>
   12008:	30c03fcc 	andi	r3,r6,255
   1200c:	18c0201c 	xori	r3,r3,128
   12010:	18ffe004 	addi	r3,r3,-128
   12014:	a0800003 	ldbu	r2,0(r20)
   12018:	1800091e 	bne	r3,zero,12040 <___vfiprintf_internal_r+0x988>
   1201c:	10803fcc 	andi	r2,r2,255
   12020:	1080201c 	xori	r2,r2,128
   12024:	01400044 	movi	r5,1
   12028:	01800804 	movi	r6,32
   1202c:	10bfe004 	addi	r2,r2,-128
   12030:	003de206 	br	117bc <___vfiprintf_internal_r+0x104>
   12034:	a0800043 	ldbu	r2,1(r20)
   12038:	6b400814 	ori	r13,r13,32
   1203c:	a5000044 	addi	r20,r20,1
   12040:	10803fcc 	andi	r2,r2,255
   12044:	1080201c 	xori	r2,r2,128
   12048:	10bfe004 	addi	r2,r2,-128
   1204c:	003ddb06 	br	117bc <___vfiprintf_internal_r+0x104>
   12050:	a0800007 	ldb	r2,0(r20)
   12054:	6b401014 	ori	r13,r13,64
   12058:	003dd806 	br	117bc <___vfiprintf_internal_r+0x104>
   1205c:	29403fcc 	andi	r5,r5,255
   12060:	28020f1e 	bne	r5,zero,128a0 <___vfiprintf_internal_r+0x11e8>
   12064:	d9000417 	ldw	r4,16(sp)
   12068:	6880080c 	andi	r2,r13,32
   1206c:	20c00104 	addi	r3,r4,4
   12070:	1001c01e 	bne	r2,zero,12774 <___vfiprintf_internal_r+0x10bc>
   12074:	6880040c 	andi	r2,r13,16
   12078:	1001df1e 	bne	r2,zero,127f8 <___vfiprintf_internal_r+0x1140>
   1207c:	6b40100c 	andi	r13,r13,64
   12080:	6801dd26 	beq	r13,zero,127f8 <___vfiprintf_internal_r+0x1140>
   12084:	d8800417 	ldw	r2,16(sp)
   12088:	d8c00415 	stw	r3,16(sp)
   1208c:	d8c00117 	ldw	r3,4(sp)
   12090:	10800017 	ldw	r2,0(r2)
   12094:	10c0000d 	sth	r3,0(r2)
   12098:	003db006 	br	1175c <___vfiprintf_internal_r+0xa4>
   1209c:	a0800007 	ldb	r2,0(r20)
   120a0:	10c01b18 	cmpnei	r3,r2,108
   120a4:	183fe326 	beq	r3,zero,12034 <___vfiprintf_internal_r+0x97c>
   120a8:	6b400414 	ori	r13,r13,16
   120ac:	003dc306 	br	117bc <___vfiprintf_internal_r+0x104>
   120b0:	d8c00417 	ldw	r3,16(sp)
   120b4:	d8000945 	stb	zero,37(sp)
   120b8:	05c00044 	movi	r23,1
   120bc:	18800017 	ldw	r2,0(r3)
   120c0:	18c00104 	addi	r3,r3,4
   120c4:	d8c00415 	stw	r3,16(sp)
   120c8:	d8800d05 	stb	r2,52(sp)
   120cc:	07000044 	movi	fp,1
   120d0:	dcc00d04 	addi	r19,sp,52
   120d4:	003e3106 	br	1199c <___vfiprintf_internal_r+0x2e4>
   120d8:	29403fcc 	andi	r5,r5,255
   120dc:	2801ee1e 	bne	r5,zero,12898 <___vfiprintf_internal_r+0x11e0>
   120e0:	00c00074 	movhi	r3,1
   120e4:	18df6f04 	addi	r3,r3,32188
   120e8:	d8c00515 	stw	r3,20(sp)
   120ec:	68c0080c 	andi	r3,r13,32
   120f0:	18001226 	beq	r3,zero,1213c <___vfiprintf_internal_r+0xa84>
   120f4:	d8c00417 	ldw	r3,16(sp)
   120f8:	1dc00017 	ldw	r23,0(r3)
   120fc:	1f000117 	ldw	fp,4(r3)
   12100:	18c00204 	addi	r3,r3,8
   12104:	d8c00415 	stw	r3,16(sp)
   12108:	68c0004c 	andi	r3,r13,1
   1210c:	18000226 	beq	r3,zero,12118 <___vfiprintf_internal_r+0xa60>
   12110:	bf06b03a 	or	r3,r23,fp
   12114:	1801911e 	bne	r3,zero,1275c <___vfiprintf_internal_r+0x10a4>
   12118:	00800084 	movi	r2,2
   1211c:	003eb506 	br	11bf4 <___vfiprintf_internal_r+0x53c>
   12120:	29403fcc 	andi	r5,r5,255
   12124:	2801e01e 	bne	r5,zero,128a8 <___vfiprintf_internal_r+0x11f0>
   12128:	00c00074 	movhi	r3,1
   1212c:	18df6a04 	addi	r3,r3,32168
   12130:	d8c00515 	stw	r3,20(sp)
   12134:	68c0080c 	andi	r3,r13,32
   12138:	183fee1e 	bne	r3,zero,120f4 <___vfiprintf_internal_r+0xa3c>
   1213c:	d9000417 	ldw	r4,16(sp)
   12140:	68c0040c 	andi	r3,r13,16
   12144:	25c00017 	ldw	r23,0(r4)
   12148:	21000104 	addi	r4,r4,4
   1214c:	d9000415 	stw	r4,16(sp)
   12150:	18015a1e 	bne	r3,zero,126bc <___vfiprintf_internal_r+0x1004>
   12154:	68c0100c 	andi	r3,r13,64
   12158:	18015826 	beq	r3,zero,126bc <___vfiprintf_internal_r+0x1004>
   1215c:	bdffffcc 	andi	r23,r23,65535
   12160:	0039883a 	mov	fp,zero
   12164:	003fe806 	br	12108 <___vfiprintf_internal_r+0xa50>
   12168:	d8800417 	ldw	r2,16(sp)
   1216c:	d8000945 	stb	zero,37(sp)
   12170:	14c00017 	ldw	r19,0(r2)
   12174:	10c00104 	addi	r3,r2,4
   12178:	9801a526 	beq	r19,zero,12810 <___vfiprintf_internal_r+0x1158>
   1217c:	40bfffe0 	cmpeqi	r2,r8,-1
   12180:	10018a1e 	bne	r2,zero,127ac <___vfiprintf_internal_r+0x10f4>
   12184:	400d883a 	mov	r6,r8
   12188:	000b883a 	mov	r5,zero
   1218c:	9809883a 	mov	r4,r19
   12190:	d8c00315 	stw	r3,12(sp)
   12194:	db400215 	stw	r13,8(sp)
   12198:	da000015 	stw	r8,0(sp)
   1219c:	000f8a80 	call	f8a8 <memchr>
   121a0:	da000017 	ldw	r8,0(sp)
   121a4:	db400217 	ldw	r13,8(sp)
   121a8:	d8c00317 	ldw	r3,12(sp)
   121ac:	1001b426 	beq	r2,zero,12880 <___vfiprintf_internal_r+0x11c8>
   121b0:	14f9c83a 	sub	fp,r2,r19
   121b4:	e02f883a 	mov	r23,fp
   121b8:	d8c00415 	stw	r3,16(sp)
   121bc:	003df706 	br	1199c <___vfiprintf_internal_r+0x2e4>
   121c0:	a0800007 	ldb	r2,0(r20)
   121c4:	6b400814 	ori	r13,r13,32
   121c8:	003d7c06 	br	117bc <___vfiprintf_internal_r+0x104>
   121cc:	d8c00417 	ldw	r3,16(sp)
   121d0:	00800c04 	movi	r2,48
   121d4:	d8800985 	stb	r2,38(sp)
   121d8:	00801e04 	movi	r2,120
   121dc:	01000074 	movhi	r4,1
   121e0:	d88009c5 	stb	r2,39(sp)
   121e4:	18800104 	addi	r2,r3,4
   121e8:	d8800415 	stw	r2,16(sp)
   121ec:	209f6a04 	addi	r2,r4,32168
   121f0:	d8800515 	stw	r2,20(sp)
   121f4:	1dc00017 	ldw	r23,0(r3)
   121f8:	0039883a 	mov	fp,zero
   121fc:	6b400094 	ori	r13,r13,2
   12200:	00800084 	movi	r2,2
   12204:	003e7b06 	br	11bf4 <___vfiprintf_internal_r+0x53c>
   12208:	00c00044 	movi	r3,1
   1220c:	e005883a 	mov	r2,fp
   12210:	dcc01715 	stw	r19,92(sp)
   12214:	df001815 	stw	fp,96(sp)
   12218:	df000c15 	stw	fp,48(sp)
   1221c:	d8c00b15 	stw	r3,44(sp)
   12220:	9021883a 	mov	r16,r18
   12224:	84000204 	addi	r16,r16,8
   12228:	003e2406 	br	11abc <___vfiprintf_internal_r+0x404>
   1222c:	01400044 	movi	r5,1
   12230:	0009883a 	mov	r4,zero
   12234:	9021883a 	mov	r16,r18
   12238:	003ec206 	br	11d44 <___vfiprintf_internal_r+0x68c>
   1223c:	8dc7c83a 	sub	r3,r17,r23
   12240:	00fe0d0e 	bge	zero,r3,11a78 <___vfiprintf_internal_r+0x3c0>
   12244:	19800450 	cmplti	r6,r3,17
   12248:	01c00074 	movhi	r7,1
   1224c:	3001a01e 	bne	r6,zero,128d0 <___vfiprintf_internal_r+0x1218>
   12250:	39dff104 	addi	r7,r7,32708
   12254:	03400404 	movi	r13,16
   12258:	00000606 	br	12274 <___vfiprintf_internal_r+0xbbc>
   1225c:	21800084 	addi	r6,r4,2
   12260:	84000204 	addi	r16,r16,8
   12264:	2809883a 	mov	r4,r5
   12268:	18fffc04 	addi	r3,r3,-16
   1226c:	19400448 	cmpgei	r5,r3,17
   12270:	28001c26 	beq	r5,zero,122e4 <___vfiprintf_internal_r+0xc2c>
   12274:	21400044 	addi	r5,r4,1
   12278:	10800404 	addi	r2,r2,16
   1227c:	81c00015 	stw	r7,0(r16)
   12280:	83400115 	stw	r13,4(r16)
   12284:	d8800c15 	stw	r2,48(sp)
   12288:	d9400b15 	stw	r5,44(sp)
   1228c:	29800208 	cmpgei	r6,r5,8
   12290:	303ff226 	beq	r6,zero,1225c <___vfiprintf_internal_r+0xba4>
   12294:	d9800a04 	addi	r6,sp,40
   12298:	a80b883a 	mov	r5,r21
   1229c:	b009883a 	mov	r4,r22
   122a0:	10007426 	beq	r2,zero,12474 <___vfiprintf_internal_r+0xdbc>
   122a4:	d9c00615 	stw	r7,24(sp)
   122a8:	d8c00315 	stw	r3,12(sp)
   122ac:	da000215 	stw	r8,8(sp)
   122b0:	00115ac0 	call	115ac <__sprint_r.part.0>
   122b4:	103e121e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   122b8:	d8c00317 	ldw	r3,12(sp)
   122bc:	d9000b17 	ldw	r4,44(sp)
   122c0:	d8800c17 	ldw	r2,48(sp)
   122c4:	18fffc04 	addi	r3,r3,-16
   122c8:	19400448 	cmpgei	r5,r3,17
   122cc:	d9c00617 	ldw	r7,24(sp)
   122d0:	da000217 	ldw	r8,8(sp)
   122d4:	9021883a 	mov	r16,r18
   122d8:	21800044 	addi	r6,r4,1
   122dc:	03400404 	movi	r13,16
   122e0:	283fe41e 	bne	r5,zero,12274 <___vfiprintf_internal_r+0xbbc>
   122e4:	10c5883a 	add	r2,r2,r3
   122e8:	80c00115 	stw	r3,4(r16)
   122ec:	81c00015 	stw	r7,0(r16)
   122f0:	d8800c15 	stw	r2,48(sp)
   122f4:	d9800b15 	stw	r6,44(sp)
   122f8:	30c00208 	cmpgei	r3,r6,8
   122fc:	18011326 	beq	r3,zero,1274c <___vfiprintf_internal_r+0x1094>
   12300:	10014b26 	beq	r2,zero,12830 <___vfiprintf_internal_r+0x1178>
   12304:	d9800a04 	addi	r6,sp,40
   12308:	a80b883a 	mov	r5,r21
   1230c:	b009883a 	mov	r4,r22
   12310:	da000215 	stw	r8,8(sp)
   12314:	00115ac0 	call	115ac <__sprint_r.part.0>
   12318:	103df91e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   1231c:	da000217 	ldw	r8,8(sp)
   12320:	d9000b17 	ldw	r4,44(sp)
   12324:	d8800c17 	ldw	r2,48(sp)
   12328:	4711c83a 	sub	r8,r8,fp
   1232c:	9021883a 	mov	r16,r18
   12330:	21400044 	addi	r5,r4,1
   12334:	023dd20e 	bge	zero,r8,11a80 <___vfiprintf_internal_r+0x3c8>
   12338:	01c00074 	movhi	r7,1
   1233c:	40c00450 	cmplti	r3,r8,17
   12340:	39dff104 	addi	r7,r7,32708
   12344:	03400404 	movi	r13,16
   12348:	18000726 	beq	r3,zero,12368 <___vfiprintf_internal_r+0xcb0>
   1234c:	00002006 	br	123d0 <___vfiprintf_internal_r+0xd18>
   12350:	21400084 	addi	r5,r4,2
   12354:	84000204 	addi	r16,r16,8
   12358:	1809883a 	mov	r4,r3
   1235c:	423ffc04 	addi	r8,r8,-16
   12360:	40c00448 	cmpgei	r3,r8,17
   12364:	18001a26 	beq	r3,zero,123d0 <___vfiprintf_internal_r+0xd18>
   12368:	20c00044 	addi	r3,r4,1
   1236c:	10800404 	addi	r2,r2,16
   12370:	81c00015 	stw	r7,0(r16)
   12374:	83400115 	stw	r13,4(r16)
   12378:	d8800c15 	stw	r2,48(sp)
   1237c:	d8c00b15 	stw	r3,44(sp)
   12380:	19400208 	cmpgei	r5,r3,8
   12384:	283ff226 	beq	r5,zero,12350 <___vfiprintf_internal_r+0xc98>
   12388:	d9800a04 	addi	r6,sp,40
   1238c:	a80b883a 	mov	r5,r21
   12390:	b009883a 	mov	r4,r22
   12394:	10001826 	beq	r2,zero,123f8 <___vfiprintf_internal_r+0xd40>
   12398:	d9c00315 	stw	r7,12(sp)
   1239c:	da000215 	stw	r8,8(sp)
   123a0:	00115ac0 	call	115ac <__sprint_r.part.0>
   123a4:	103dd61e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   123a8:	da000217 	ldw	r8,8(sp)
   123ac:	d9000b17 	ldw	r4,44(sp)
   123b0:	d8800c17 	ldw	r2,48(sp)
   123b4:	423ffc04 	addi	r8,r8,-16
   123b8:	40c00448 	cmpgei	r3,r8,17
   123bc:	d9c00317 	ldw	r7,12(sp)
   123c0:	9021883a 	mov	r16,r18
   123c4:	21400044 	addi	r5,r4,1
   123c8:	03400404 	movi	r13,16
   123cc:	183fe61e 	bne	r3,zero,12368 <___vfiprintf_internal_r+0xcb0>
   123d0:	1205883a 	add	r2,r2,r8
   123d4:	81c00015 	stw	r7,0(r16)
   123d8:	82000115 	stw	r8,4(r16)
   123dc:	d8800c15 	stw	r2,48(sp)
   123e0:	d9400b15 	stw	r5,44(sp)
   123e4:	28c00208 	cmpgei	r3,r5,8
   123e8:	1800a11e 	bne	r3,zero,12670 <___vfiprintf_internal_r+0xfb8>
   123ec:	84000204 	addi	r16,r16,8
   123f0:	29400044 	addi	r5,r5,1
   123f4:	003da206 	br	11a80 <___vfiprintf_internal_r+0x3c8>
   123f8:	01400044 	movi	r5,1
   123fc:	0009883a 	mov	r4,zero
   12400:	9021883a 	mov	r16,r18
   12404:	003fd506 	br	1235c <___vfiprintf_internal_r+0xca4>
   12408:	10c00060 	cmpeqi	r3,r2,1
   1240c:	18011a1e 	bne	r3,zero,12878 <___vfiprintf_internal_r+0x11c0>
   12410:	108000a0 	cmpeqi	r2,r2,2
   12414:	db400017 	ldw	r13,0(sp)
   12418:	103ecf26 	beq	r2,zero,11f58 <___vfiprintf_internal_r+0x8a0>
   1241c:	9027883a 	mov	r19,r18
   12420:	d9000517 	ldw	r4,20(sp)
   12424:	b88003cc 	andi	r2,r23,15
   12428:	e006973a 	slli	r3,fp,28
   1242c:	b82ed13a 	srli	r23,r23,4
   12430:	2085883a 	add	r2,r4,r2
   12434:	10800003 	ldbu	r2,0(r2)
   12438:	e038d13a 	srli	fp,fp,4
   1243c:	1deeb03a 	or	r23,r3,r23
   12440:	98bfffc5 	stb	r2,-1(r19)
   12444:	bf04b03a 	or	r2,r23,fp
   12448:	9cffffc4 	addi	r19,r19,-1
   1244c:	103ff41e 	bne	r2,zero,12420 <___vfiprintf_internal_r+0xd68>
   12450:	94f9c83a 	sub	fp,r18,r19
   12454:	db400015 	stw	r13,0(sp)
   12458:	003ed806 	br	11fbc <___vfiprintf_internal_r+0x904>
   1245c:	d9800a04 	addi	r6,sp,40
   12460:	a80b883a 	mov	r5,r21
   12464:	b009883a 	mov	r4,r22
   12468:	00115ac0 	call	115ac <__sprint_r.part.0>
   1246c:	103d9e26 	beq	r2,zero,11ae8 <___vfiprintf_internal_r+0x430>
   12470:	003da306 	br	11b00 <___vfiprintf_internal_r+0x448>
   12474:	01800044 	movi	r6,1
   12478:	0009883a 	mov	r4,zero
   1247c:	9021883a 	mov	r16,r18
   12480:	003f7906 	br	12268 <___vfiprintf_internal_r+0xbb0>
   12484:	10009626 	beq	r2,zero,126e0 <___vfiprintf_internal_r+0x1028>
   12488:	d9800a04 	addi	r6,sp,40
   1248c:	a80b883a 	mov	r5,r21
   12490:	b009883a 	mov	r4,r22
   12494:	da000615 	stw	r8,24(sp)
   12498:	db400315 	stw	r13,12(sp)
   1249c:	db800215 	stw	r14,8(sp)
   124a0:	00115ac0 	call	115ac <__sprint_r.part.0>
   124a4:	103d961e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   124a8:	d9000b17 	ldw	r4,44(sp)
   124ac:	d8800c17 	ldw	r2,48(sp)
   124b0:	da000617 	ldw	r8,24(sp)
   124b4:	db400317 	ldw	r13,12(sp)
   124b8:	db800217 	ldw	r14,8(sp)
   124bc:	9021883a 	mov	r16,r18
   124c0:	21400044 	addi	r5,r4,1
   124c4:	003d5206 	br	11a10 <___vfiprintf_internal_r+0x358>
   124c8:	d8800984 	addi	r2,sp,38
   124cc:	d8801715 	stw	r2,92(sp)
   124d0:	00800084 	movi	r2,2
   124d4:	d8801815 	stw	r2,96(sp)
   124d8:	01400044 	movi	r5,1
   124dc:	9021883a 	mov	r16,r18
   124e0:	2809883a 	mov	r4,r5
   124e4:	84000204 	addi	r16,r16,8
   124e8:	21400044 	addi	r5,r4,1
   124ec:	003d6006 	br	11a70 <___vfiprintf_internal_r+0x3b8>
   124f0:	db400017 	ldw	r13,0(sp)
   124f4:	003e9406 	br	11f48 <___vfiprintf_internal_r+0x890>
   124f8:	9027883a 	mov	r19,r18
   124fc:	b809883a 	mov	r4,r23
   12500:	e00b883a 	mov	r5,fp
   12504:	01800284 	movi	r6,10
   12508:	000f883a 	mov	r7,zero
   1250c:	db800315 	stw	r14,12(sp)
   12510:	da000215 	stw	r8,8(sp)
   12514:	db400015 	stw	r13,0(sp)
   12518:	001420c0 	call	1420c <__umoddi3>
   1251c:	10800c04 	addi	r2,r2,48
   12520:	b809883a 	mov	r4,r23
   12524:	e00b883a 	mov	r5,fp
   12528:	98bfffc5 	stb	r2,-1(r19)
   1252c:	01800284 	movi	r6,10
   12530:	000f883a 	mov	r7,zero
   12534:	0013bec0 	call	13bec <__udivdi3>
   12538:	e009883a 	mov	r4,fp
   1253c:	b80b883a 	mov	r5,r23
   12540:	db400017 	ldw	r13,0(sp)
   12544:	da000217 	ldw	r8,8(sp)
   12548:	db800317 	ldw	r14,12(sp)
   1254c:	9cffffc4 	addi	r19,r19,-1
   12550:	102f883a 	mov	r23,r2
   12554:	1839883a 	mov	fp,r3
   12558:	203fe81e 	bne	r4,zero,124fc <___vfiprintf_internal_r+0xe44>
   1255c:	294002a8 	cmpgeui	r5,r5,10
   12560:	283fe61e 	bne	r5,zero,124fc <___vfiprintf_internal_r+0xe44>
   12564:	94f9c83a 	sub	fp,r18,r19
   12568:	003e9406 	br	11fbc <___vfiprintf_internal_r+0x904>
   1256c:	19400450 	cmplti	r5,r3,17
   12570:	01c00074 	movhi	r7,1
   12574:	2800ce1e 	bne	r5,zero,128b0 <___vfiprintf_internal_r+0x11f8>
   12578:	39dff504 	addi	r7,r7,32724
   1257c:	03c00404 	movi	r15,16
   12580:	00000706 	br	125a0 <___vfiprintf_internal_r+0xee8>
   12584:	27c00084 	addi	ra,r4,2
   12588:	84000204 	addi	r16,r16,8
   1258c:	3009883a 	mov	r4,r6
   12590:	18fffc04 	addi	r3,r3,-16
   12594:	19400448 	cmpgei	r5,r3,17
   12598:	28002026 	beq	r5,zero,1261c <___vfiprintf_internal_r+0xf64>
   1259c:	21800044 	addi	r6,r4,1
   125a0:	10800404 	addi	r2,r2,16
   125a4:	81c00015 	stw	r7,0(r16)
   125a8:	83c00115 	stw	r15,4(r16)
   125ac:	d8800c15 	stw	r2,48(sp)
   125b0:	d9800b15 	stw	r6,44(sp)
   125b4:	31400208 	cmpgei	r5,r6,8
   125b8:	283ff226 	beq	r5,zero,12584 <___vfiprintf_internal_r+0xecc>
   125bc:	d9800a04 	addi	r6,sp,40
   125c0:	a80b883a 	mov	r5,r21
   125c4:	b009883a 	mov	r4,r22
   125c8:	10001f26 	beq	r2,zero,12648 <___vfiprintf_internal_r+0xf90>
   125cc:	d9c00815 	stw	r7,32(sp)
   125d0:	d8c00715 	stw	r3,28(sp)
   125d4:	da000615 	stw	r8,24(sp)
   125d8:	db400315 	stw	r13,12(sp)
   125dc:	db800215 	stw	r14,8(sp)
   125e0:	00115ac0 	call	115ac <__sprint_r.part.0>
   125e4:	103d461e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   125e8:	d8c00717 	ldw	r3,28(sp)
   125ec:	d9000b17 	ldw	r4,44(sp)
   125f0:	d8800c17 	ldw	r2,48(sp)
   125f4:	18fffc04 	addi	r3,r3,-16
   125f8:	19400448 	cmpgei	r5,r3,17
   125fc:	d9c00817 	ldw	r7,32(sp)
   12600:	da000617 	ldw	r8,24(sp)
   12604:	db400317 	ldw	r13,12(sp)
   12608:	db800217 	ldw	r14,8(sp)
   1260c:	9021883a 	mov	r16,r18
   12610:	27c00044 	addi	ra,r4,1
   12614:	03c00404 	movi	r15,16
   12618:	283fe01e 	bne	r5,zero,1259c <___vfiprintf_internal_r+0xee4>
   1261c:	10c5883a 	add	r2,r2,r3
   12620:	80c00115 	stw	r3,4(r16)
   12624:	81c00015 	stw	r7,0(r16)
   12628:	d8800c15 	stw	r2,48(sp)
   1262c:	dfc00b15 	stw	ra,44(sp)
   12630:	f8c00208 	cmpgei	r3,ra,8
   12634:	18002f1e 	bne	r3,zero,126f4 <___vfiprintf_internal_r+0x103c>
   12638:	84000204 	addi	r16,r16,8
   1263c:	f9400044 	addi	r5,ra,1
   12640:	f809883a 	mov	r4,ra
   12644:	003ce406 	br	119d8 <___vfiprintf_internal_r+0x320>
   12648:	0009883a 	mov	r4,zero
   1264c:	07c00044 	movi	ra,1
   12650:	9021883a 	mov	r16,r18
   12654:	003fce06 	br	12590 <___vfiprintf_internal_r+0xed8>
   12658:	8dc0010e 	bge	r17,r23,12660 <___vfiprintf_internal_r+0xfa8>
   1265c:	b823883a 	mov	r17,r23
   12660:	d8800117 	ldw	r2,4(sp)
   12664:	1445883a 	add	r2,r2,r17
   12668:	d8800115 	stw	r2,4(sp)
   1266c:	003d1e06 	br	11ae8 <___vfiprintf_internal_r+0x430>
   12670:	103ee526 	beq	r2,zero,12208 <___vfiprintf_internal_r+0xb50>
   12674:	d9800a04 	addi	r6,sp,40
   12678:	a80b883a 	mov	r5,r21
   1267c:	b009883a 	mov	r4,r22
   12680:	00115ac0 	call	115ac <__sprint_r.part.0>
   12684:	103d1e1e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   12688:	d9400b17 	ldw	r5,44(sp)
   1268c:	d8800c17 	ldw	r2,48(sp)
   12690:	9021883a 	mov	r16,r18
   12694:	29400044 	addi	r5,r5,1
   12698:	003cf906 	br	11a80 <___vfiprintf_internal_r+0x3c8>
   1269c:	d8000b15 	stw	zero,44(sp)
   126a0:	9021883a 	mov	r16,r18
   126a4:	003d7106 	br	11c6c <___vfiprintf_internal_r+0x5b4>
   126a8:	4000731e 	bne	r8,zero,12878 <___vfiprintf_internal_r+0x11c0>
   126ac:	0011883a 	mov	r8,zero
   126b0:	0039883a 	mov	fp,zero
   126b4:	9027883a 	mov	r19,r18
   126b8:	003e4006 	br	11fbc <___vfiprintf_internal_r+0x904>
   126bc:	0039883a 	mov	fp,zero
   126c0:	003e9106 	br	12108 <___vfiprintf_internal_r+0xa50>
   126c4:	b839d7fa 	srai	fp,r23,31
   126c8:	e005883a 	mov	r2,fp
   126cc:	003dd206 	br	11e18 <___vfiprintf_internal_r+0x760>
   126d0:	01400044 	movi	r5,1
   126d4:	0009883a 	mov	r4,zero
   126d8:	9021883a 	mov	r16,r18
   126dc:	003ce406 	br	11a70 <___vfiprintf_internal_r+0x3b8>
   126e0:	70002b1e 	bne	r14,zero,12790 <___vfiprintf_internal_r+0x10d8>
   126e4:	0009883a 	mov	r4,zero
   126e8:	01400044 	movi	r5,1
   126ec:	9021883a 	mov	r16,r18
   126f0:	003cdf06 	br	11a70 <___vfiprintf_internal_r+0x3b8>
   126f4:	10003726 	beq	r2,zero,127d4 <___vfiprintf_internal_r+0x111c>
   126f8:	d9800a04 	addi	r6,sp,40
   126fc:	a80b883a 	mov	r5,r21
   12700:	b009883a 	mov	r4,r22
   12704:	da000615 	stw	r8,24(sp)
   12708:	db400315 	stw	r13,12(sp)
   1270c:	db800215 	stw	r14,8(sp)
   12710:	00115ac0 	call	115ac <__sprint_r.part.0>
   12714:	103cfa1e 	bne	r2,zero,11b00 <___vfiprintf_internal_r+0x448>
   12718:	d9000b17 	ldw	r4,44(sp)
   1271c:	d8800c17 	ldw	r2,48(sp)
   12720:	da000617 	ldw	r8,24(sp)
   12724:	db400317 	ldw	r13,12(sp)
   12728:	db800217 	ldw	r14,8(sp)
   1272c:	9021883a 	mov	r16,r18
   12730:	21400044 	addi	r5,r4,1
   12734:	003ca806 	br	119d8 <___vfiprintf_internal_r+0x320>
   12738:	a0800007 	ldb	r2,0(r20)
   1273c:	d8c00415 	stw	r3,16(sp)
   12740:	003c1e06 	br	117bc <___vfiprintf_internal_r+0x104>
   12744:	9027883a 	mov	r19,r18
   12748:	003e1c06 	br	11fbc <___vfiprintf_internal_r+0x904>
   1274c:	84000204 	addi	r16,r16,8
   12750:	31400044 	addi	r5,r6,1
   12754:	3009883a 	mov	r4,r6
   12758:	003cc706 	br	11a78 <___vfiprintf_internal_r+0x3c0>
   1275c:	00c00c04 	movi	r3,48
   12760:	d88009c5 	stb	r2,39(sp)
   12764:	d8c00985 	stb	r3,38(sp)
   12768:	6b400094 	ori	r13,r13,2
   1276c:	00800084 	movi	r2,2
   12770:	003d2006 	br	11bf4 <___vfiprintf_internal_r+0x53c>
   12774:	d9400117 	ldw	r5,4(sp)
   12778:	20800017 	ldw	r2,0(r4)
   1277c:	d8c00415 	stw	r3,16(sp)
   12780:	2809d7fa 	srai	r4,r5,31
   12784:	11400015 	stw	r5,0(r2)
   12788:	11000115 	stw	r4,4(r2)
   1278c:	003bf306 	br	1175c <___vfiprintf_internal_r+0xa4>
   12790:	d8800984 	addi	r2,sp,38
   12794:	d8801715 	stw	r2,92(sp)
   12798:	00800084 	movi	r2,2
   1279c:	d8801815 	stw	r2,96(sp)
   127a0:	01000044 	movi	r4,1
   127a4:	9021883a 	mov	r16,r18
   127a8:	003f4e06 	br	124e4 <___vfiprintf_internal_r+0xe2c>
   127ac:	9809883a 	mov	r4,r19
   127b0:	d8c00215 	stw	r3,8(sp)
   127b4:	db400015 	stw	r13,0(sp)
   127b8:	000a9440 	call	a944 <strlen>
   127bc:	d8c00217 	ldw	r3,8(sp)
   127c0:	db400017 	ldw	r13,0(sp)
   127c4:	1039883a 	mov	fp,r2
   127c8:	102f883a 	mov	r23,r2
   127cc:	d8c00415 	stw	r3,16(sp)
   127d0:	003c7206 	br	1199c <___vfiprintf_internal_r+0x2e4>
   127d4:	d8c00947 	ldb	r3,37(sp)
   127d8:	18001b26 	beq	r3,zero,12848 <___vfiprintf_internal_r+0x1190>
   127dc:	d8800944 	addi	r2,sp,37
   127e0:	d8801715 	stw	r2,92(sp)
   127e4:	00800044 	movi	r2,1
   127e8:	d8801815 	stw	r2,96(sp)
   127ec:	01400044 	movi	r5,1
   127f0:	9021883a 	mov	r16,r18
   127f4:	003c8306 	br	11a04 <___vfiprintf_internal_r+0x34c>
   127f8:	d8800417 	ldw	r2,16(sp)
   127fc:	10800017 	ldw	r2,0(r2)
   12800:	d8c00415 	stw	r3,16(sp)
   12804:	d8c00117 	ldw	r3,4(sp)
   12808:	10c00015 	stw	r3,0(r2)
   1280c:	003bd306 	br	1175c <___vfiprintf_internal_r+0xa4>
   12810:	408001f0 	cmpltui	r2,r8,7
   12814:	4039883a 	mov	fp,r8
   12818:	10000926 	beq	r2,zero,12840 <___vfiprintf_internal_r+0x1188>
   1281c:	04c00074 	movhi	r19,1
   12820:	e02f883a 	mov	r23,fp
   12824:	d8c00415 	stw	r3,16(sp)
   12828:	9cdf7404 	addi	r19,r19,32208
   1282c:	003c5b06 	br	1199c <___vfiprintf_internal_r+0x2e4>
   12830:	01400044 	movi	r5,1
   12834:	0009883a 	mov	r4,zero
   12838:	9021883a 	mov	r16,r18
   1283c:	003c8e06 	br	11a78 <___vfiprintf_internal_r+0x3c0>
   12840:	07000184 	movi	fp,6
   12844:	003ff506 	br	1281c <___vfiprintf_internal_r+0x1164>
   12848:	703f1f1e 	bne	r14,zero,124c8 <___vfiprintf_internal_r+0xe10>
   1284c:	0009883a 	mov	r4,zero
   12850:	01400044 	movi	r5,1
   12854:	9021883a 	mov	r16,r18
   12858:	003c8706 	br	11a78 <___vfiprintf_internal_r+0x3c0>
   1285c:	d9800945 	stb	r6,37(sp)
   12860:	003c4806 	br	11984 <___vfiprintf_internal_r+0x2cc>
   12864:	d9800a04 	addi	r6,sp,40
   12868:	a80b883a 	mov	r5,r21
   1286c:	b009883a 	mov	r4,r22
   12870:	00115ac0 	call	115ac <__sprint_r.part.0>
   12874:	003ca206 	br	11b00 <___vfiprintf_internal_r+0x448>
   12878:	db400017 	ldw	r13,0(sp)
   1287c:	003d7306 	br	11e4c <___vfiprintf_internal_r+0x794>
   12880:	402f883a 	mov	r23,r8
   12884:	d8c00415 	stw	r3,16(sp)
   12888:	4039883a 	mov	fp,r8
   1288c:	003c4306 	br	1199c <___vfiprintf_internal_r+0x2e4>
   12890:	d9800945 	stb	r6,37(sp)
   12894:	003d9106 	br	11edc <___vfiprintf_internal_r+0x824>
   12898:	d9800945 	stb	r6,37(sp)
   1289c:	003e1006 	br	120e0 <___vfiprintf_internal_r+0xa28>
   128a0:	d9800945 	stb	r6,37(sp)
   128a4:	003def06 	br	12064 <___vfiprintf_internal_r+0x9ac>
   128a8:	d9800945 	stb	r6,37(sp)
   128ac:	003e1e06 	br	12128 <___vfiprintf_internal_r+0xa70>
   128b0:	303f883a 	mov	ra,r6
   128b4:	39dff504 	addi	r7,r7,32724
   128b8:	003f5806 	br	1261c <___vfiprintf_internal_r+0xf64>
   128bc:	d9800945 	stb	r6,37(sp)
   128c0:	003d4d06 	br	11df8 <___vfiprintf_internal_r+0x740>
   128c4:	21400044 	addi	r5,r4,1
   128c8:	39dff504 	addi	r7,r7,32724
   128cc:	003d3706 	br	11dac <___vfiprintf_internal_r+0x6f4>
   128d0:	280d883a 	mov	r6,r5
   128d4:	39dff104 	addi	r7,r7,32708
   128d8:	003e8206 	br	122e4 <___vfiprintf_internal_r+0xc2c>
   128dc:	00bfffc4 	movi	r2,-1
   128e0:	d8800115 	stw	r2,4(sp)
   128e4:	003c8906 	br	11b0c <___vfiprintf_internal_r+0x454>
   128e8:	d8800417 	ldw	r2,16(sp)
   128ec:	12000017 	ldw	r8,0(r2)
   128f0:	11000104 	addi	r4,r2,4
   128f4:	4000010e 	bge	r8,zero,128fc <___vfiprintf_internal_r+0x1244>
   128f8:	023fffc4 	movi	r8,-1
   128fc:	a0800043 	ldbu	r2,1(r20)
   12900:	d9000415 	stw	r4,16(sp)
   12904:	1829883a 	mov	r20,r3
   12908:	10803fcc 	andi	r2,r2,255
   1290c:	1080201c 	xori	r2,r2,128
   12910:	10bfe004 	addi	r2,r2,-128
   12914:	003ba906 	br	117bc <___vfiprintf_internal_r+0x104>

00012918 <__vfiprintf_internal>:
   12918:	00c000b4 	movhi	r3,2
   1291c:	2005883a 	mov	r2,r4
   12920:	1927e517 	ldw	r4,-24684(r3)
   12924:	300f883a 	mov	r7,r6
   12928:	280d883a 	mov	r6,r5
   1292c:	100b883a 	mov	r5,r2
   12930:	00116b81 	jmpi	116b8 <___vfiprintf_internal_r>

00012934 <__sbprintf>:
   12934:	2880030b 	ldhu	r2,12(r5)
   12938:	2b001917 	ldw	r12,100(r5)
   1293c:	2ac0038b 	ldhu	r11,14(r5)
   12940:	2a800717 	ldw	r10,28(r5)
   12944:	2a400917 	ldw	r9,36(r5)
   12948:	defee204 	addi	sp,sp,-1144
   1294c:	da001a04 	addi	r8,sp,104
   12950:	00c10004 	movi	r3,1024
   12954:	dc011a15 	stw	r16,1128(sp)
   12958:	10bfff4c 	andi	r2,r2,65533
   1295c:	2821883a 	mov	r16,r5
   12960:	d80b883a 	mov	r5,sp
   12964:	dc811c15 	stw	r18,1136(sp)
   12968:	dc411b15 	stw	r17,1132(sp)
   1296c:	dfc11d15 	stw	ra,1140(sp)
   12970:	2025883a 	mov	r18,r4
   12974:	d880030d 	sth	r2,12(sp)
   12978:	db001915 	stw	r12,100(sp)
   1297c:	dac0038d 	sth	r11,14(sp)
   12980:	da800715 	stw	r10,28(sp)
   12984:	da400915 	stw	r9,36(sp)
   12988:	da000015 	stw	r8,0(sp)
   1298c:	da000415 	stw	r8,16(sp)
   12990:	d8c00215 	stw	r3,8(sp)
   12994:	d8c00515 	stw	r3,20(sp)
   12998:	d8000615 	stw	zero,24(sp)
   1299c:	00116b80 	call	116b8 <___vfiprintf_internal_r>
   129a0:	1023883a 	mov	r17,r2
   129a4:	10000d0e 	bge	r2,zero,129dc <__sbprintf+0xa8>
   129a8:	d880030b 	ldhu	r2,12(sp)
   129ac:	1080100c 	andi	r2,r2,64
   129b0:	10000326 	beq	r2,zero,129c0 <__sbprintf+0x8c>
   129b4:	8080030b 	ldhu	r2,12(r16)
   129b8:	10801014 	ori	r2,r2,64
   129bc:	8080030d 	sth	r2,12(r16)
   129c0:	8805883a 	mov	r2,r17
   129c4:	dfc11d17 	ldw	ra,1140(sp)
   129c8:	dc811c17 	ldw	r18,1136(sp)
   129cc:	dc411b17 	ldw	r17,1132(sp)
   129d0:	dc011a17 	ldw	r16,1128(sp)
   129d4:	dec11e04 	addi	sp,sp,1144
   129d8:	f800283a 	ret
   129dc:	d80b883a 	mov	r5,sp
   129e0:	9009883a 	mov	r4,r18
   129e4:	000e7c40 	call	e7c4 <_fflush_r>
   129e8:	103fef26 	beq	r2,zero,129a8 <__sbprintf+0x74>
   129ec:	047fffc4 	movi	r17,-1
   129f0:	003fed06 	br	129a8 <__sbprintf+0x74>

000129f4 <__swbuf_r>:
   129f4:	defffb04 	addi	sp,sp,-20
   129f8:	dcc00315 	stw	r19,12(sp)
   129fc:	dc400115 	stw	r17,4(sp)
   12a00:	dc000015 	stw	r16,0(sp)
   12a04:	dfc00415 	stw	ra,16(sp)
   12a08:	dc800215 	stw	r18,8(sp)
   12a0c:	2027883a 	mov	r19,r4
   12a10:	2823883a 	mov	r17,r5
   12a14:	3021883a 	mov	r16,r6
   12a18:	20000226 	beq	r4,zero,12a24 <__swbuf_r+0x30>
   12a1c:	20800e17 	ldw	r2,56(r4)
   12a20:	10003e26 	beq	r2,zero,12b1c <__swbuf_r+0x128>
   12a24:	80800617 	ldw	r2,24(r16)
   12a28:	80c0030b 	ldhu	r3,12(r16)
   12a2c:	80800215 	stw	r2,8(r16)
   12a30:	1880020c 	andi	r2,r3,8
   12a34:	10001f26 	beq	r2,zero,12ab4 <__swbuf_r+0xc0>
   12a38:	80800417 	ldw	r2,16(r16)
   12a3c:	10001d26 	beq	r2,zero,12ab4 <__swbuf_r+0xc0>
   12a40:	1948000c 	andi	r5,r3,8192
   12a44:	8c803fcc 	andi	r18,r17,255
   12a48:	28002326 	beq	r5,zero,12ad8 <__swbuf_r+0xe4>
   12a4c:	80c00017 	ldw	r3,0(r16)
   12a50:	81000517 	ldw	r4,20(r16)
   12a54:	1885c83a 	sub	r2,r3,r2
   12a58:	1100290e 	bge	r2,r4,12b00 <__swbuf_r+0x10c>
   12a5c:	10800044 	addi	r2,r2,1
   12a60:	81400217 	ldw	r5,8(r16)
   12a64:	19000044 	addi	r4,r3,1
   12a68:	81000015 	stw	r4,0(r16)
   12a6c:	297fffc4 	addi	r5,r5,-1
   12a70:	81400215 	stw	r5,8(r16)
   12a74:	1c400005 	stb	r17,0(r3)
   12a78:	80c00517 	ldw	r3,20(r16)
   12a7c:	18802926 	beq	r3,r2,12b24 <__swbuf_r+0x130>
   12a80:	8080030b 	ldhu	r2,12(r16)
   12a84:	1080004c 	andi	r2,r2,1
   12a88:	10000226 	beq	r2,zero,12a94 <__swbuf_r+0xa0>
   12a8c:	90800298 	cmpnei	r2,r18,10
   12a90:	10002426 	beq	r2,zero,12b24 <__swbuf_r+0x130>
   12a94:	9005883a 	mov	r2,r18
   12a98:	dfc00417 	ldw	ra,16(sp)
   12a9c:	dcc00317 	ldw	r19,12(sp)
   12aa0:	dc800217 	ldw	r18,8(sp)
   12aa4:	dc400117 	ldw	r17,4(sp)
   12aa8:	dc000017 	ldw	r16,0(sp)
   12aac:	dec00504 	addi	sp,sp,20
   12ab0:	f800283a 	ret
   12ab4:	800b883a 	mov	r5,r16
   12ab8:	9809883a 	mov	r4,r19
   12abc:	000cad00 	call	cad0 <__swsetup_r>
   12ac0:	10001c1e 	bne	r2,zero,12b34 <__swbuf_r+0x140>
   12ac4:	80c0030b 	ldhu	r3,12(r16)
   12ac8:	80800417 	ldw	r2,16(r16)
   12acc:	8c803fcc 	andi	r18,r17,255
   12ad0:	1948000c 	andi	r5,r3,8192
   12ad4:	283fdd1e 	bne	r5,zero,12a4c <__swbuf_r+0x58>
   12ad8:	81001917 	ldw	r4,100(r16)
   12adc:	18c80014 	ori	r3,r3,8192
   12ae0:	0177ffc4 	movi	r5,-8193
   12ae4:	2148703a 	and	r4,r4,r5
   12ae8:	80c0030d 	sth	r3,12(r16)
   12aec:	80c00017 	ldw	r3,0(r16)
   12af0:	81001915 	stw	r4,100(r16)
   12af4:	81000517 	ldw	r4,20(r16)
   12af8:	1885c83a 	sub	r2,r3,r2
   12afc:	113fd716 	blt	r2,r4,12a5c <__swbuf_r+0x68>
   12b00:	800b883a 	mov	r5,r16
   12b04:	9809883a 	mov	r4,r19
   12b08:	000e7c40 	call	e7c4 <_fflush_r>
   12b0c:	1000091e 	bne	r2,zero,12b34 <__swbuf_r+0x140>
   12b10:	80c00017 	ldw	r3,0(r16)
   12b14:	00800044 	movi	r2,1
   12b18:	003fd106 	br	12a60 <__swbuf_r+0x6c>
   12b1c:	000ec0c0 	call	ec0c <__sinit>
   12b20:	003fc006 	br	12a24 <__swbuf_r+0x30>
   12b24:	800b883a 	mov	r5,r16
   12b28:	9809883a 	mov	r4,r19
   12b2c:	000e7c40 	call	e7c4 <_fflush_r>
   12b30:	103fd826 	beq	r2,zero,12a94 <__swbuf_r+0xa0>
   12b34:	04bfffc4 	movi	r18,-1
   12b38:	003fd606 	br	12a94 <__swbuf_r+0xa0>

00012b3c <__swbuf>:
   12b3c:	00c000b4 	movhi	r3,2
   12b40:	2005883a 	mov	r2,r4
   12b44:	1927e517 	ldw	r4,-24684(r3)
   12b48:	280d883a 	mov	r6,r5
   12b4c:	100b883a 	mov	r5,r2
   12b50:	00129f41 	jmpi	129f4 <__swbuf_r>

00012b54 <_write_r>:
   12b54:	2807883a 	mov	r3,r5
   12b58:	defffe04 	addi	sp,sp,-8
   12b5c:	dc000015 	stw	r16,0(sp)
   12b60:	300b883a 	mov	r5,r6
   12b64:	008000b4 	movhi	r2,2
   12b68:	380d883a 	mov	r6,r7
   12b6c:	2021883a 	mov	r16,r4
   12b70:	1809883a 	mov	r4,r3
   12b74:	dfc00115 	stw	ra,4(sp)
   12b78:	102f1915 	stw	zero,-17308(r2)
   12b7c:	00154880 	call	15488 <write>
   12b80:	10ffffd8 	cmpnei	r3,r2,-1
   12b84:	18000426 	beq	r3,zero,12b98 <_write_r+0x44>
   12b88:	dfc00117 	ldw	ra,4(sp)
   12b8c:	dc000017 	ldw	r16,0(sp)
   12b90:	dec00204 	addi	sp,sp,8
   12b94:	f800283a 	ret
   12b98:	00c000b4 	movhi	r3,2
   12b9c:	18ef1917 	ldw	r3,-17308(r3)
   12ba0:	183ff926 	beq	r3,zero,12b88 <_write_r+0x34>
   12ba4:	80c00015 	stw	r3,0(r16)
   12ba8:	dfc00117 	ldw	ra,4(sp)
   12bac:	dc000017 	ldw	r16,0(sp)
   12bb0:	dec00204 	addi	sp,sp,8
   12bb4:	f800283a 	ret

00012bb8 <_close_r>:
   12bb8:	defffe04 	addi	sp,sp,-8
   12bbc:	dc000015 	stw	r16,0(sp)
   12bc0:	008000b4 	movhi	r2,2
   12bc4:	2021883a 	mov	r16,r4
   12bc8:	2809883a 	mov	r4,r5
   12bcc:	dfc00115 	stw	ra,4(sp)
   12bd0:	102f1915 	stw	zero,-17308(r2)
   12bd4:	001480c0 	call	1480c <close>
   12bd8:	10ffffd8 	cmpnei	r3,r2,-1
   12bdc:	18000426 	beq	r3,zero,12bf0 <_close_r+0x38>
   12be0:	dfc00117 	ldw	ra,4(sp)
   12be4:	dc000017 	ldw	r16,0(sp)
   12be8:	dec00204 	addi	sp,sp,8
   12bec:	f800283a 	ret
   12bf0:	00c000b4 	movhi	r3,2
   12bf4:	18ef1917 	ldw	r3,-17308(r3)
   12bf8:	183ff926 	beq	r3,zero,12be0 <_close_r+0x28>
   12bfc:	80c00015 	stw	r3,0(r16)
   12c00:	dfc00117 	ldw	ra,4(sp)
   12c04:	dc000017 	ldw	r16,0(sp)
   12c08:	dec00204 	addi	sp,sp,8
   12c0c:	f800283a 	ret

00012c10 <__assert_func>:
   12c10:	008000b4 	movhi	r2,2
   12c14:	1227e517 	ldw	r8,-24684(r2)
   12c18:	defffc04 	addi	sp,sp,-16
   12c1c:	3807883a 	mov	r3,r7
   12c20:	3005883a 	mov	r2,r6
   12c24:	dfc00315 	stw	ra,12(sp)
   12c28:	42400317 	ldw	r9,12(r8)
   12c2c:	200f883a 	mov	r7,r4
   12c30:	2811883a 	mov	r8,r5
   12c34:	180d883a 	mov	r6,r3
   12c38:	10000a26 	beq	r2,zero,12c64 <__assert_func+0x54>
   12c3c:	00c00074 	movhi	r3,1
   12c40:	18dff904 	addi	r3,r3,32740
   12c44:	01400074 	movhi	r5,1
   12c48:	295ffd04 	addi	r5,r5,32756
   12c4c:	4809883a 	mov	r4,r9
   12c50:	d8c00115 	stw	r3,4(sp)
   12c54:	da000015 	stw	r8,0(sp)
   12c58:	d8800215 	stw	r2,8(sp)
   12c5c:	0012f9c0 	call	12f9c <fiprintf>
   12c60:	00136840 	call	13684 <abort>
   12c64:	00c00074 	movhi	r3,1
   12c68:	18dffc04 	addi	r3,r3,32752
   12c6c:	1805883a 	mov	r2,r3
   12c70:	003ff406 	br	12c44 <__assert_func+0x34>

00012c74 <__assert>:
   12c74:	deffff04 	addi	sp,sp,-4
   12c78:	300f883a 	mov	r7,r6
   12c7c:	000d883a 	mov	r6,zero
   12c80:	dfc00015 	stw	ra,0(sp)
   12c84:	0012c100 	call	12c10 <__assert_func>

00012c88 <_calloc_r>:
   12c88:	2806d43a 	srli	r3,r5,16
   12c8c:	defffb04 	addi	sp,sp,-20
   12c90:	dc400115 	stw	r17,4(sp)
   12c94:	dc000015 	stw	r16,0(sp)
   12c98:	dfc00415 	stw	ra,16(sp)
   12c9c:	dcc00315 	stw	r19,12(sp)
   12ca0:	dc800215 	stw	r18,8(sp)
   12ca4:	3022d43a 	srli	r17,r6,16
   12ca8:	2805883a 	mov	r2,r5
   12cac:	2021883a 	mov	r16,r4
   12cb0:	18002d1e 	bne	r3,zero,12d68 <_calloc_r+0xe0>
   12cb4:	88003e1e 	bne	r17,zero,12db0 <_calloc_r+0x128>
   12cb8:	317fffcc 	andi	r5,r6,65535
   12cbc:	113fffcc 	andi	r4,r2,65535
   12cc0:	00071240 	call	7124 <__mulsi3>
   12cc4:	100b883a 	mov	r5,r2
   12cc8:	8009883a 	mov	r4,r16
   12ccc:	0009ea80 	call	9ea8 <_malloc_r>
   12cd0:	1009883a 	mov	r4,r2
   12cd4:	10001626 	beq	r2,zero,12d30 <_calloc_r+0xa8>
   12cd8:	11bfff17 	ldw	r6,-4(r2)
   12cdc:	00bfff04 	movi	r2,-4
   12ce0:	308c703a 	and	r6,r6,r2
   12ce4:	31bfff04 	addi	r6,r6,-4
   12ce8:	30800968 	cmpgeui	r2,r6,37
   12cec:	1000181e 	bne	r2,zero,12d50 <_calloc_r+0xc8>
   12cf0:	30800530 	cmpltui	r2,r6,20
   12cf4:	10000a1e 	bne	r2,zero,12d20 <_calloc_r+0x98>
   12cf8:	20000015 	stw	zero,0(r4)
   12cfc:	20000115 	stw	zero,4(r4)
   12d00:	30800728 	cmpgeui	r2,r6,28
   12d04:	10001626 	beq	r2,zero,12d60 <_calloc_r+0xd8>
   12d08:	20000215 	stw	zero,8(r4)
   12d0c:	20000315 	stw	zero,12(r4)
   12d10:	31800920 	cmpeqi	r6,r6,36
   12d14:	30002d1e 	bne	r6,zero,12dcc <_calloc_r+0x144>
   12d18:	20800404 	addi	r2,r4,16
   12d1c:	00000106 	br	12d24 <_calloc_r+0x9c>
   12d20:	2005883a 	mov	r2,r4
   12d24:	10000015 	stw	zero,0(r2)
   12d28:	10000115 	stw	zero,4(r2)
   12d2c:	10000215 	stw	zero,8(r2)
   12d30:	2005883a 	mov	r2,r4
   12d34:	dfc00417 	ldw	ra,16(sp)
   12d38:	dcc00317 	ldw	r19,12(sp)
   12d3c:	dc800217 	ldw	r18,8(sp)
   12d40:	dc400117 	ldw	r17,4(sp)
   12d44:	dc000017 	ldw	r16,0(sp)
   12d48:	dec00504 	addi	sp,sp,20
   12d4c:	f800283a 	ret
   12d50:	000b883a 	mov	r5,zero
   12d54:	000faa40 	call	faa4 <memset>
   12d58:	1009883a 	mov	r4,r2
   12d5c:	003ff406 	br	12d30 <_calloc_r+0xa8>
   12d60:	20800204 	addi	r2,r4,8
   12d64:	003fef06 	br	12d24 <_calloc_r+0x9c>
   12d68:	8800131e 	bne	r17,zero,12db8 <_calloc_r+0x130>
   12d6c:	1823883a 	mov	r17,r3
   12d70:	3027883a 	mov	r19,r6
   12d74:	317fffcc 	andi	r5,r6,65535
   12d78:	113fffcc 	andi	r4,r2,65535
   12d7c:	00071240 	call	7124 <__mulsi3>
   12d80:	897fffcc 	andi	r5,r17,65535
   12d84:	993fffcc 	andi	r4,r19,65535
   12d88:	1025883a 	mov	r18,r2
   12d8c:	00071240 	call	7124 <__mulsi3>
   12d90:	900ad43a 	srli	r5,r18,16
   12d94:	114b883a 	add	r5,r2,r5
   12d98:	2804d43a 	srli	r2,r5,16
   12d9c:	1000061e 	bne	r2,zero,12db8 <_calloc_r+0x130>
   12da0:	280a943a 	slli	r5,r5,16
   12da4:	94bfffcc 	andi	r18,r18,65535
   12da8:	2c8ab03a 	or	r5,r5,r18
   12dac:	003fc606 	br	12cc8 <_calloc_r+0x40>
   12db0:	2827883a 	mov	r19,r5
   12db4:	003fef06 	br	12d74 <_calloc_r+0xec>
   12db8:	0009e7c0 	call	9e7c <__errno>
   12dbc:	00c00304 	movi	r3,12
   12dc0:	10c00015 	stw	r3,0(r2)
   12dc4:	0009883a 	mov	r4,zero
   12dc8:	003fd906 	br	12d30 <_calloc_r+0xa8>
   12dcc:	20000415 	stw	zero,16(r4)
   12dd0:	20800604 	addi	r2,r4,24
   12dd4:	20000515 	stw	zero,20(r4)
   12dd8:	003fd206 	br	12d24 <_calloc_r+0x9c>

00012ddc <_fclose_r.part.0>:
   12ddc:	defffc04 	addi	sp,sp,-16
   12de0:	dc800215 	stw	r18,8(sp)
   12de4:	dc400115 	stw	r17,4(sp)
   12de8:	dc000015 	stw	r16,0(sp)
   12dec:	dfc00315 	stw	ra,12(sp)
   12df0:	2821883a 	mov	r16,r5
   12df4:	2023883a 	mov	r17,r4
   12df8:	000e59c0 	call	e59c <__sflush_r>
   12dfc:	80c00b17 	ldw	r3,44(r16)
   12e00:	1025883a 	mov	r18,r2
   12e04:	18000426 	beq	r3,zero,12e18 <_fclose_r.part.0+0x3c>
   12e08:	81400717 	ldw	r5,28(r16)
   12e0c:	8809883a 	mov	r4,r17
   12e10:	183ee83a 	callr	r3
   12e14:	10001916 	blt	r2,zero,12e7c <_fclose_r.part.0+0xa0>
   12e18:	8080030b 	ldhu	r2,12(r16)
   12e1c:	1080200c 	andi	r2,r2,128
   12e20:	10001a1e 	bne	r2,zero,12e8c <_fclose_r.part.0+0xb0>
   12e24:	81400c17 	ldw	r5,48(r16)
   12e28:	28000526 	beq	r5,zero,12e40 <_fclose_r.part.0+0x64>
   12e2c:	80801004 	addi	r2,r16,64
   12e30:	28800226 	beq	r5,r2,12e3c <_fclose_r.part.0+0x60>
   12e34:	8809883a 	mov	r4,r17
   12e38:	000ed700 	call	ed70 <_free_r>
   12e3c:	80000c15 	stw	zero,48(r16)
   12e40:	81401117 	ldw	r5,68(r16)
   12e44:	28000326 	beq	r5,zero,12e54 <_fclose_r.part.0+0x78>
   12e48:	8809883a 	mov	r4,r17
   12e4c:	000ed700 	call	ed70 <_free_r>
   12e50:	80001115 	stw	zero,68(r16)
   12e54:	000ec1c0 	call	ec1c <__sfp_lock_acquire>
   12e58:	8000030d 	sth	zero,12(r16)
   12e5c:	000ec200 	call	ec20 <__sfp_lock_release>
   12e60:	9005883a 	mov	r2,r18
   12e64:	dfc00317 	ldw	ra,12(sp)
   12e68:	dc800217 	ldw	r18,8(sp)
   12e6c:	dc400117 	ldw	r17,4(sp)
   12e70:	dc000017 	ldw	r16,0(sp)
   12e74:	dec00404 	addi	sp,sp,16
   12e78:	f800283a 	ret
   12e7c:	8080030b 	ldhu	r2,12(r16)
   12e80:	04bfffc4 	movi	r18,-1
   12e84:	1080200c 	andi	r2,r2,128
   12e88:	103fe626 	beq	r2,zero,12e24 <_fclose_r.part.0+0x48>
   12e8c:	81400417 	ldw	r5,16(r16)
   12e90:	8809883a 	mov	r4,r17
   12e94:	000ed700 	call	ed70 <_free_r>
   12e98:	003fe206 	br	12e24 <_fclose_r.part.0+0x48>

00012e9c <_fclose_r>:
   12e9c:	28001926 	beq	r5,zero,12f04 <_fclose_r+0x68>
   12ea0:	defffd04 	addi	sp,sp,-12
   12ea4:	dc000115 	stw	r16,4(sp)
   12ea8:	dfc00215 	stw	ra,8(sp)
   12eac:	2021883a 	mov	r16,r4
   12eb0:	20000226 	beq	r4,zero,12ebc <_fclose_r+0x20>
   12eb4:	20800e17 	ldw	r2,56(r4)
   12eb8:	10000c26 	beq	r2,zero,12eec <_fclose_r+0x50>
   12ebc:	2880030f 	ldh	r2,12(r5)
   12ec0:	1000051e 	bne	r2,zero,12ed8 <_fclose_r+0x3c>
   12ec4:	0005883a 	mov	r2,zero
   12ec8:	dfc00217 	ldw	ra,8(sp)
   12ecc:	dc000117 	ldw	r16,4(sp)
   12ed0:	dec00304 	addi	sp,sp,12
   12ed4:	f800283a 	ret
   12ed8:	8009883a 	mov	r4,r16
   12edc:	dfc00217 	ldw	ra,8(sp)
   12ee0:	dc000117 	ldw	r16,4(sp)
   12ee4:	dec00304 	addi	sp,sp,12
   12ee8:	0012ddc1 	jmpi	12ddc <_fclose_r.part.0>
   12eec:	d9400015 	stw	r5,0(sp)
   12ef0:	000ec0c0 	call	ec0c <__sinit>
   12ef4:	d9400017 	ldw	r5,0(sp)
   12ef8:	2880030f 	ldh	r2,12(r5)
   12efc:	103ff126 	beq	r2,zero,12ec4 <_fclose_r+0x28>
   12f00:	003ff506 	br	12ed8 <_fclose_r+0x3c>
   12f04:	0005883a 	mov	r2,zero
   12f08:	f800283a 	ret

00012f0c <fclose>:
   12f0c:	20000826 	beq	r4,zero,12f30 <fclose+0x24>
   12f10:	008000b4 	movhi	r2,2
   12f14:	200b883a 	mov	r5,r4
   12f18:	1127e517 	ldw	r4,-24684(r2)
   12f1c:	20000226 	beq	r4,zero,12f28 <fclose+0x1c>
   12f20:	20800e17 	ldw	r2,56(r4)
   12f24:	10000526 	beq	r2,zero,12f3c <fclose+0x30>
   12f28:	2880030f 	ldh	r2,12(r5)
   12f2c:	1000021e 	bne	r2,zero,12f38 <fclose+0x2c>
   12f30:	0005883a 	mov	r2,zero
   12f34:	f800283a 	ret
   12f38:	0012ddc1 	jmpi	12ddc <_fclose_r.part.0>
   12f3c:	defffd04 	addi	sp,sp,-12
   12f40:	d9400115 	stw	r5,4(sp)
   12f44:	d9000015 	stw	r4,0(sp)
   12f48:	dfc00215 	stw	ra,8(sp)
   12f4c:	000ec0c0 	call	ec0c <__sinit>
   12f50:	d9400117 	ldw	r5,4(sp)
   12f54:	d9000017 	ldw	r4,0(sp)
   12f58:	2880030f 	ldh	r2,12(r5)
   12f5c:	10000326 	beq	r2,zero,12f6c <fclose+0x60>
   12f60:	dfc00217 	ldw	ra,8(sp)
   12f64:	dec00304 	addi	sp,sp,12
   12f68:	0012ddc1 	jmpi	12ddc <_fclose_r.part.0>
   12f6c:	0005883a 	mov	r2,zero
   12f70:	dfc00217 	ldw	ra,8(sp)
   12f74:	dec00304 	addi	sp,sp,12
   12f78:	f800283a 	ret

00012f7c <_fiprintf_r>:
   12f7c:	defffe04 	addi	sp,sp,-8
   12f80:	dfc00015 	stw	ra,0(sp)
   12f84:	d9c00115 	stw	r7,4(sp)
   12f88:	d9c00104 	addi	r7,sp,4
   12f8c:	00135500 	call	13550 <_vfiprintf_r>
   12f90:	dfc00017 	ldw	ra,0(sp)
   12f94:	dec00204 	addi	sp,sp,8
   12f98:	f800283a 	ret

00012f9c <fiprintf>:
   12f9c:	defffd04 	addi	sp,sp,-12
   12fa0:	2005883a 	mov	r2,r4
   12fa4:	dfc00015 	stw	ra,0(sp)
   12fa8:	d9800115 	stw	r6,4(sp)
   12fac:	d9c00215 	stw	r7,8(sp)
   12fb0:	00c000b4 	movhi	r3,2
   12fb4:	1927e517 	ldw	r4,-24684(r3)
   12fb8:	280d883a 	mov	r6,r5
   12fbc:	d9c00104 	addi	r7,sp,4
   12fc0:	100b883a 	mov	r5,r2
   12fc4:	00135500 	call	13550 <_vfiprintf_r>
   12fc8:	dfc00017 	ldw	ra,0(sp)
   12fcc:	dec00304 	addi	sp,sp,12
   12fd0:	f800283a 	ret

00012fd4 <__fputwc>:
   12fd4:	defff904 	addi	sp,sp,-28
   12fd8:	dcc00415 	stw	r19,16(sp)
   12fdc:	dc800315 	stw	r18,12(sp)
   12fe0:	dc000115 	stw	r16,4(sp)
   12fe4:	dfc00615 	stw	ra,24(sp)
   12fe8:	dd000515 	stw	r20,20(sp)
   12fec:	dc400215 	stw	r17,8(sp)
   12ff0:	2025883a 	mov	r18,r4
   12ff4:	2827883a 	mov	r19,r5
   12ff8:	3021883a 	mov	r16,r6
   12ffc:	00133000 	call	13300 <__locale_mb_cur_max>
   13000:	10800058 	cmpnei	r2,r2,1
   13004:	1000071e 	bne	r2,zero,13024 <__fputwc+0x50>
   13008:	98bfffc4 	addi	r2,r19,-1
   1300c:	10803fe8 	cmpgeui	r2,r2,255
   13010:	1000041e 	bne	r2,zero,13024 <__fputwc+0x50>
   13014:	980b883a 	mov	r5,r19
   13018:	dcc000c5 	stb	r19,3(sp)
   1301c:	05000044 	movi	r20,1
   13020:	00000a06 	br	1304c <__fputwc+0x78>
   13024:	81c01704 	addi	r7,r16,92
   13028:	980d883a 	mov	r6,r19
   1302c:	d94000c4 	addi	r5,sp,3
   13030:	9009883a 	mov	r4,r18
   13034:	00135540 	call	13554 <_wcrtomb_r>
   13038:	1029883a 	mov	r20,r2
   1303c:	10bfffd8 	cmpnei	r2,r2,-1
   13040:	10003926 	beq	r2,zero,13128 <__fputwc+0x154>
   13044:	a0001f26 	beq	r20,zero,130c4 <__fputwc+0xf0>
   13048:	d94000c3 	ldbu	r5,3(sp)
   1304c:	0023883a 	mov	r17,zero
   13050:	00000a06 	br	1307c <__fputwc+0xa8>
   13054:	80800017 	ldw	r2,0(r16)
   13058:	11400005 	stb	r5,0(r2)
   1305c:	80c00017 	ldw	r3,0(r16)
   13060:	18c00044 	addi	r3,r3,1
   13064:	80c00015 	stw	r3,0(r16)
   13068:	8c400044 	addi	r17,r17,1
   1306c:	d88000c4 	addi	r2,sp,3
   13070:	1447883a 	add	r3,r2,r17
   13074:	8d00132e 	bgeu	r17,r20,130c4 <__fputwc+0xf0>
   13078:	19400003 	ldbu	r5,0(r3)
   1307c:	80c00217 	ldw	r3,8(r16)
   13080:	18ffffc4 	addi	r3,r3,-1
   13084:	80c00215 	stw	r3,8(r16)
   13088:	183ff20e 	bge	r3,zero,13054 <__fputwc+0x80>
   1308c:	80800617 	ldw	r2,24(r16)
   13090:	18801616 	blt	r3,r2,130ec <__fputwc+0x118>
   13094:	80800017 	ldw	r2,0(r16)
   13098:	11400005 	stb	r5,0(r2)
   1309c:	80800017 	ldw	r2,0(r16)
   130a0:	10c00003 	ldbu	r3,0(r2)
   130a4:	10800044 	addi	r2,r2,1
   130a8:	18c002a0 	cmpeqi	r3,r3,10
   130ac:	1800171e 	bne	r3,zero,1310c <__fputwc+0x138>
   130b0:	80800015 	stw	r2,0(r16)
   130b4:	8c400044 	addi	r17,r17,1
   130b8:	d88000c4 	addi	r2,sp,3
   130bc:	1447883a 	add	r3,r2,r17
   130c0:	8d3fed36 	bltu	r17,r20,13078 <__fputwc+0xa4>
   130c4:	9829883a 	mov	r20,r19
   130c8:	a005883a 	mov	r2,r20
   130cc:	dfc00617 	ldw	ra,24(sp)
   130d0:	dd000517 	ldw	r20,20(sp)
   130d4:	dcc00417 	ldw	r19,16(sp)
   130d8:	dc800317 	ldw	r18,12(sp)
   130dc:	dc400217 	ldw	r17,8(sp)
   130e0:	dc000117 	ldw	r16,4(sp)
   130e4:	dec00704 	addi	sp,sp,28
   130e8:	f800283a 	ret
   130ec:	29403fcc 	andi	r5,r5,255
   130f0:	800d883a 	mov	r6,r16
   130f4:	9009883a 	mov	r4,r18
   130f8:	00129f40 	call	129f4 <__swbuf_r>
   130fc:	10bfffe0 	cmpeqi	r2,r2,-1
   13100:	103fd926 	beq	r2,zero,13068 <__fputwc+0x94>
   13104:	053fffc4 	movi	r20,-1
   13108:	003fef06 	br	130c8 <__fputwc+0xf4>
   1310c:	800d883a 	mov	r6,r16
   13110:	01400284 	movi	r5,10
   13114:	9009883a 	mov	r4,r18
   13118:	00129f40 	call	129f4 <__swbuf_r>
   1311c:	10bfffe0 	cmpeqi	r2,r2,-1
   13120:	103fd126 	beq	r2,zero,13068 <__fputwc+0x94>
   13124:	003ff706 	br	13104 <__fputwc+0x130>
   13128:	8080030b 	ldhu	r2,12(r16)
   1312c:	10801014 	ori	r2,r2,64
   13130:	8080030d 	sth	r2,12(r16)
   13134:	003fe406 	br	130c8 <__fputwc+0xf4>

00013138 <_fputwc_r>:
   13138:	3080030b 	ldhu	r2,12(r6)
   1313c:	10c8000c 	andi	r3,r2,8192
   13140:	1800051e 	bne	r3,zero,13158 <_fputwc_r+0x20>
   13144:	30c01917 	ldw	r3,100(r6)
   13148:	10880014 	ori	r2,r2,8192
   1314c:	3080030d 	sth	r2,12(r6)
   13150:	18880014 	ori	r2,r3,8192
   13154:	30801915 	stw	r2,100(r6)
   13158:	0012fd41 	jmpi	12fd4 <__fputwc>

0001315c <fputwc>:
   1315c:	defffc04 	addi	sp,sp,-16
   13160:	008000b4 	movhi	r2,2
   13164:	dc000215 	stw	r16,8(sp)
   13168:	1427e517 	ldw	r16,-24684(r2)
   1316c:	dfc00315 	stw	ra,12(sp)
   13170:	280d883a 	mov	r6,r5
   13174:	200b883a 	mov	r5,r4
   13178:	80000226 	beq	r16,zero,13184 <fputwc+0x28>
   1317c:	80800e17 	ldw	r2,56(r16)
   13180:	10000d26 	beq	r2,zero,131b8 <fputwc+0x5c>
   13184:	3080030b 	ldhu	r2,12(r6)
   13188:	10c8000c 	andi	r3,r2,8192
   1318c:	1800051e 	bne	r3,zero,131a4 <fputwc+0x48>
   13190:	30c01917 	ldw	r3,100(r6)
   13194:	10880014 	ori	r2,r2,8192
   13198:	3080030d 	sth	r2,12(r6)
   1319c:	18880014 	ori	r2,r3,8192
   131a0:	30801915 	stw	r2,100(r6)
   131a4:	8009883a 	mov	r4,r16
   131a8:	dfc00317 	ldw	ra,12(sp)
   131ac:	dc000217 	ldw	r16,8(sp)
   131b0:	dec00404 	addi	sp,sp,16
   131b4:	0012fd41 	jmpi	12fd4 <__fputwc>
   131b8:	d9000015 	stw	r4,0(sp)
   131bc:	8009883a 	mov	r4,r16
   131c0:	d9800115 	stw	r6,4(sp)
   131c4:	000ec0c0 	call	ec0c <__sinit>
   131c8:	d9800117 	ldw	r6,4(sp)
   131cc:	d9400017 	ldw	r5,0(sp)
   131d0:	003fec06 	br	13184 <fputwc+0x28>

000131d4 <_fstat_r>:
   131d4:	2807883a 	mov	r3,r5
   131d8:	defffe04 	addi	sp,sp,-8
   131dc:	dc000015 	stw	r16,0(sp)
   131e0:	008000b4 	movhi	r2,2
   131e4:	300b883a 	mov	r5,r6
   131e8:	2021883a 	mov	r16,r4
   131ec:	1809883a 	mov	r4,r3
   131f0:	dfc00115 	stw	ra,4(sp)
   131f4:	102f1915 	stw	zero,-17308(r2)
   131f8:	00149880 	call	14988 <fstat>
   131fc:	10ffffd8 	cmpnei	r3,r2,-1
   13200:	18000426 	beq	r3,zero,13214 <_fstat_r+0x40>
   13204:	dfc00117 	ldw	ra,4(sp)
   13208:	dc000017 	ldw	r16,0(sp)
   1320c:	dec00204 	addi	sp,sp,8
   13210:	f800283a 	ret
   13214:	00c000b4 	movhi	r3,2
   13218:	18ef1917 	ldw	r3,-17308(r3)
   1321c:	183ff926 	beq	r3,zero,13204 <_fstat_r+0x30>
   13220:	80c00015 	stw	r3,0(r16)
   13224:	dfc00117 	ldw	ra,4(sp)
   13228:	dc000017 	ldw	r16,0(sp)
   1322c:	dec00204 	addi	sp,sp,8
   13230:	f800283a 	ret

00013234 <_isatty_r>:
   13234:	defffe04 	addi	sp,sp,-8
   13238:	dc000015 	stw	r16,0(sp)
   1323c:	008000b4 	movhi	r2,2
   13240:	2021883a 	mov	r16,r4
   13244:	2809883a 	mov	r4,r5
   13248:	dfc00115 	stw	ra,4(sp)
   1324c:	102f1915 	stw	zero,-17308(r2)
   13250:	0014aa00 	call	14aa0 <isatty>
   13254:	10ffffd8 	cmpnei	r3,r2,-1
   13258:	18000426 	beq	r3,zero,1326c <_isatty_r+0x38>
   1325c:	dfc00117 	ldw	ra,4(sp)
   13260:	dc000017 	ldw	r16,0(sp)
   13264:	dec00204 	addi	sp,sp,8
   13268:	f800283a 	ret
   1326c:	00c000b4 	movhi	r3,2
   13270:	18ef1917 	ldw	r3,-17308(r3)
   13274:	183ff926 	beq	r3,zero,1325c <_isatty_r+0x28>
   13278:	80c00015 	stw	r3,0(r16)
   1327c:	dfc00117 	ldw	ra,4(sp)
   13280:	dc000017 	ldw	r16,0(sp)
   13284:	dec00204 	addi	sp,sp,8
   13288:	f800283a 	ret

0001328c <_setlocale_r>:
   1328c:	30001626 	beq	r6,zero,132e8 <_setlocale_r+0x5c>
   13290:	014000b4 	movhi	r5,2
   13294:	defffe04 	addi	sp,sp,-8
   13298:	29600a04 	addi	r5,r5,-32728
   1329c:	3009883a 	mov	r4,r6
   132a0:	dc000015 	stw	r16,0(sp)
   132a4:	dfc00115 	stw	ra,4(sp)
   132a8:	3021883a 	mov	r16,r6
   132ac:	00134980 	call	13498 <strcmp>
   132b0:	1000061e 	bne	r2,zero,132cc <_setlocale_r+0x40>
   132b4:	008000b4 	movhi	r2,2
   132b8:	10a00904 	addi	r2,r2,-32732
   132bc:	dfc00117 	ldw	ra,4(sp)
   132c0:	dc000017 	ldw	r16,0(sp)
   132c4:	dec00204 	addi	sp,sp,8
   132c8:	f800283a 	ret
   132cc:	80800003 	ldbu	r2,0(r16)
   132d0:	10bfef44 	addi	r2,r2,-67
   132d4:	10000726 	beq	r2,zero,132f4 <_setlocale_r+0x68>
   132d8:	80800003 	ldbu	r2,0(r16)
   132dc:	103ff526 	beq	r2,zero,132b4 <_setlocale_r+0x28>
   132e0:	0005883a 	mov	r2,zero
   132e4:	003ff506 	br	132bc <_setlocale_r+0x30>
   132e8:	008000b4 	movhi	r2,2
   132ec:	10a00904 	addi	r2,r2,-32732
   132f0:	f800283a 	ret
   132f4:	80800043 	ldbu	r2,1(r16)
   132f8:	103fee26 	beq	r2,zero,132b4 <_setlocale_r+0x28>
   132fc:	003ff606 	br	132d8 <_setlocale_r+0x4c>

00013300 <__locale_mb_cur_max>:
   13300:	008000b4 	movhi	r2,2
   13304:	10a32307 	ldb	r2,-29556(r2)
   13308:	f800283a 	ret

0001330c <setlocale>:
   1330c:	28001626 	beq	r5,zero,13368 <setlocale+0x5c>
   13310:	defffe04 	addi	sp,sp,-8
   13314:	dc000015 	stw	r16,0(sp)
   13318:	2821883a 	mov	r16,r5
   1331c:	014000b4 	movhi	r5,2
   13320:	29600a04 	addi	r5,r5,-32728
   13324:	8009883a 	mov	r4,r16
   13328:	dfc00115 	stw	ra,4(sp)
   1332c:	00134980 	call	13498 <strcmp>
   13330:	1000061e 	bne	r2,zero,1334c <setlocale+0x40>
   13334:	008000b4 	movhi	r2,2
   13338:	10a00904 	addi	r2,r2,-32732
   1333c:	dfc00117 	ldw	ra,4(sp)
   13340:	dc000017 	ldw	r16,0(sp)
   13344:	dec00204 	addi	sp,sp,8
   13348:	f800283a 	ret
   1334c:	80800003 	ldbu	r2,0(r16)
   13350:	10bfef44 	addi	r2,r2,-67
   13354:	10000726 	beq	r2,zero,13374 <setlocale+0x68>
   13358:	80800003 	ldbu	r2,0(r16)
   1335c:	103ff526 	beq	r2,zero,13334 <setlocale+0x28>
   13360:	0005883a 	mov	r2,zero
   13364:	003ff506 	br	1333c <setlocale+0x30>
   13368:	008000b4 	movhi	r2,2
   1336c:	10a00904 	addi	r2,r2,-32732
   13370:	f800283a 	ret
   13374:	80800043 	ldbu	r2,1(r16)
   13378:	103fee26 	beq	r2,zero,13334 <setlocale+0x28>
   1337c:	003ff606 	br	13358 <setlocale+0x4c>

00013380 <_lseek_r>:
   13380:	2807883a 	mov	r3,r5
   13384:	defffe04 	addi	sp,sp,-8
   13388:	dc000015 	stw	r16,0(sp)
   1338c:	300b883a 	mov	r5,r6
   13390:	008000b4 	movhi	r2,2
   13394:	380d883a 	mov	r6,r7
   13398:	2021883a 	mov	r16,r4
   1339c:	1809883a 	mov	r4,r3
   133a0:	dfc00115 	stw	ra,4(sp)
   133a4:	102f1915 	stw	zero,-17308(r2)
   133a8:	0014de00 	call	14de0 <lseek>
   133ac:	10ffffd8 	cmpnei	r3,r2,-1
   133b0:	18000426 	beq	r3,zero,133c4 <_lseek_r+0x44>
   133b4:	dfc00117 	ldw	ra,4(sp)
   133b8:	dc000017 	ldw	r16,0(sp)
   133bc:	dec00204 	addi	sp,sp,8
   133c0:	f800283a 	ret
   133c4:	00c000b4 	movhi	r3,2
   133c8:	18ef1917 	ldw	r3,-17308(r3)
   133cc:	183ff926 	beq	r3,zero,133b4 <_lseek_r+0x34>
   133d0:	80c00015 	stw	r3,0(r16)
   133d4:	dfc00117 	ldw	ra,4(sp)
   133d8:	dc000017 	ldw	r16,0(sp)
   133dc:	dec00204 	addi	sp,sp,8
   133e0:	f800283a 	ret

000133e4 <_mbtowc_r>:
   133e4:	008000b4 	movhi	r2,2
   133e8:	10a31217 	ldw	r2,-29624(r2)
   133ec:	1000683a 	jmp	r2

000133f0 <__ascii_mbtowc>:
   133f0:	deffff04 	addi	sp,sp,-4
   133f4:	28000826 	beq	r5,zero,13418 <__ascii_mbtowc+0x28>
   133f8:	30000926 	beq	r6,zero,13420 <__ascii_mbtowc+0x30>
   133fc:	38000b26 	beq	r7,zero,1342c <__ascii_mbtowc+0x3c>
   13400:	30800003 	ldbu	r2,0(r6)
   13404:	28800015 	stw	r2,0(r5)
   13408:	30800003 	ldbu	r2,0(r6)
   1340c:	1004c03a 	cmpne	r2,r2,zero
   13410:	dec00104 	addi	sp,sp,4
   13414:	f800283a 	ret
   13418:	d80b883a 	mov	r5,sp
   1341c:	303ff71e 	bne	r6,zero,133fc <__ascii_mbtowc+0xc>
   13420:	0005883a 	mov	r2,zero
   13424:	dec00104 	addi	sp,sp,4
   13428:	f800283a 	ret
   1342c:	00bfff84 	movi	r2,-2
   13430:	003ff706 	br	13410 <__ascii_mbtowc+0x20>

00013434 <_read_r>:
   13434:	2807883a 	mov	r3,r5
   13438:	defffe04 	addi	sp,sp,-8
   1343c:	dc000015 	stw	r16,0(sp)
   13440:	300b883a 	mov	r5,r6
   13444:	008000b4 	movhi	r2,2
   13448:	380d883a 	mov	r6,r7
   1344c:	2021883a 	mov	r16,r4
   13450:	1809883a 	mov	r4,r3
   13454:	dfc00115 	stw	ra,4(sp)
   13458:	102f1915 	stw	zero,-17308(r2)
   1345c:	001521c0 	call	1521c <read>
   13460:	10ffffd8 	cmpnei	r3,r2,-1
   13464:	18000426 	beq	r3,zero,13478 <_read_r+0x44>
   13468:	dfc00117 	ldw	ra,4(sp)
   1346c:	dc000017 	ldw	r16,0(sp)
   13470:	dec00204 	addi	sp,sp,8
   13474:	f800283a 	ret
   13478:	00c000b4 	movhi	r3,2
   1347c:	18ef1917 	ldw	r3,-17308(r3)
   13480:	183ff926 	beq	r3,zero,13468 <_read_r+0x34>
   13484:	80c00015 	stw	r3,0(r16)
   13488:	dfc00117 	ldw	ra,4(sp)
   1348c:	dc000017 	ldw	r16,0(sp)
   13490:	dec00204 	addi	sp,sp,8
   13494:	f800283a 	ret

00013498 <strcmp>:
   13498:	2144b03a 	or	r2,r4,r5
   1349c:	108000cc 	andi	r2,r2,3
   134a0:	1000141e 	bne	r2,zero,134f4 <strcmp+0x5c>
   134a4:	20800017 	ldw	r2,0(r4)
   134a8:	28c00017 	ldw	r3,0(r5)
   134ac:	10c0111e 	bne	r2,r3,134f4 <strcmp+0x5c>
   134b0:	01ffbff4 	movhi	r7,65279
   134b4:	01a02074 	movhi	r6,32897
   134b8:	39ffbfc4 	addi	r7,r7,-257
   134bc:	31a02004 	addi	r6,r6,-32640
   134c0:	00000306 	br	134d0 <strcmp+0x38>
   134c4:	20800017 	ldw	r2,0(r4)
   134c8:	28c00017 	ldw	r3,0(r5)
   134cc:	10c0091e 	bne	r2,r3,134f4 <strcmp+0x5c>
   134d0:	11c7883a 	add	r3,r2,r7
   134d4:	0084303a 	nor	r2,zero,r2
   134d8:	1884703a 	and	r2,r3,r2
   134dc:	1184703a 	and	r2,r2,r6
   134e0:	21000104 	addi	r4,r4,4
   134e4:	29400104 	addi	r5,r5,4
   134e8:	103ff626 	beq	r2,zero,134c4 <strcmp+0x2c>
   134ec:	0005883a 	mov	r2,zero
   134f0:	f800283a 	ret
   134f4:	20c00003 	ldbu	r3,0(r4)
   134f8:	18803fcc 	andi	r2,r3,255
   134fc:	1080201c 	xori	r2,r2,128
   13500:	10bfe004 	addi	r2,r2,-128
   13504:	1000071e 	bne	r2,zero,13524 <strcmp+0x8c>
   13508:	00000a06 	br	13534 <strcmp+0x9c>
   1350c:	20c00003 	ldbu	r3,0(r4)
   13510:	29400044 	addi	r5,r5,1
   13514:	18803fcc 	andi	r2,r3,255
   13518:	1080201c 	xori	r2,r2,128
   1351c:	10bfe004 	addi	r2,r2,-128
   13520:	10000726 	beq	r2,zero,13540 <strcmp+0xa8>
   13524:	29800007 	ldb	r6,0(r5)
   13528:	21000044 	addi	r4,r4,1
   1352c:	30bff726 	beq	r6,r2,1350c <strcmp+0x74>
   13530:	18803fcc 	andi	r2,r3,255
   13534:	28c00003 	ldbu	r3,0(r5)
   13538:	10c5c83a 	sub	r2,r2,r3
   1353c:	f800283a 	ret
   13540:	28c00003 	ldbu	r3,0(r5)
   13544:	0005883a 	mov	r2,zero
   13548:	10c5c83a 	sub	r2,r2,r3
   1354c:	f800283a 	ret

00013550 <_vfiprintf_r>:
   13550:	00116b81 	jmpi	116b8 <___vfiprintf_internal_r>

00013554 <_wcrtomb_r>:
   13554:	defffa04 	addi	sp,sp,-24
   13558:	dc400415 	stw	r17,16(sp)
   1355c:	dc000315 	stw	r16,12(sp)
   13560:	008000b4 	movhi	r2,2
   13564:	dfc00515 	stw	ra,20(sp)
   13568:	10a31117 	ldw	r2,-29628(r2)
   1356c:	2023883a 	mov	r17,r4
   13570:	3821883a 	mov	r16,r7
   13574:	28000826 	beq	r5,zero,13598 <_wcrtomb_r+0x44>
   13578:	103ee83a 	callr	r2
   1357c:	10ffffd8 	cmpnei	r3,r2,-1
   13580:	18000a26 	beq	r3,zero,135ac <_wcrtomb_r+0x58>
   13584:	dfc00517 	ldw	ra,20(sp)
   13588:	dc400417 	ldw	r17,16(sp)
   1358c:	dc000317 	ldw	r16,12(sp)
   13590:	dec00604 	addi	sp,sp,24
   13594:	f800283a 	ret
   13598:	000d883a 	mov	r6,zero
   1359c:	d9400084 	addi	r5,sp,2
   135a0:	103ee83a 	callr	r2
   135a4:	10ffffd8 	cmpnei	r3,r2,-1
   135a8:	183ff61e 	bne	r3,zero,13584 <_wcrtomb_r+0x30>
   135ac:	00802284 	movi	r2,138
   135b0:	80000015 	stw	zero,0(r16)
   135b4:	88800015 	stw	r2,0(r17)
   135b8:	00bfffc4 	movi	r2,-1
   135bc:	003ff106 	br	13584 <_wcrtomb_r+0x30>

000135c0 <wcrtomb>:
   135c0:	defffa04 	addi	sp,sp,-24
   135c4:	00c000b4 	movhi	r3,2
   135c8:	dc400415 	stw	r17,16(sp)
   135cc:	dc000315 	stw	r16,12(sp)
   135d0:	1c67e517 	ldw	r17,-24684(r3)
   135d4:	dfc00515 	stw	ra,20(sp)
   135d8:	00c000b4 	movhi	r3,2
   135dc:	18e31117 	ldw	r3,-29628(r3)
   135e0:	3021883a 	mov	r16,r6
   135e4:	20000c26 	beq	r4,zero,13618 <wcrtomb+0x58>
   135e8:	280d883a 	mov	r6,r5
   135ec:	800f883a 	mov	r7,r16
   135f0:	200b883a 	mov	r5,r4
   135f4:	8809883a 	mov	r4,r17
   135f8:	183ee83a 	callr	r3
   135fc:	10ffffd8 	cmpnei	r3,r2,-1
   13600:	18000c26 	beq	r3,zero,13634 <wcrtomb+0x74>
   13604:	dfc00517 	ldw	ra,20(sp)
   13608:	dc400417 	ldw	r17,16(sp)
   1360c:	dc000317 	ldw	r16,12(sp)
   13610:	dec00604 	addi	sp,sp,24
   13614:	f800283a 	ret
   13618:	300f883a 	mov	r7,r6
   1361c:	d9400084 	addi	r5,sp,2
   13620:	000d883a 	mov	r6,zero
   13624:	8809883a 	mov	r4,r17
   13628:	183ee83a 	callr	r3
   1362c:	10ffffd8 	cmpnei	r3,r2,-1
   13630:	183ff41e 	bne	r3,zero,13604 <wcrtomb+0x44>
   13634:	00802284 	movi	r2,138
   13638:	80000015 	stw	zero,0(r16)
   1363c:	88800015 	stw	r2,0(r17)
   13640:	00bfffc4 	movi	r2,-1
   13644:	003fef06 	br	13604 <wcrtomb+0x44>

00013648 <_wctomb_r>:
   13648:	008000b4 	movhi	r2,2
   1364c:	10a31117 	ldw	r2,-29628(r2)
   13650:	1000683a 	jmp	r2

00013654 <__ascii_wctomb>:
   13654:	28000926 	beq	r5,zero,1367c <__ascii_wctomb+0x28>
   13658:	30804030 	cmpltui	r2,r6,256
   1365c:	10000326 	beq	r2,zero,1366c <__ascii_wctomb+0x18>
   13660:	29800005 	stb	r6,0(r5)
   13664:	00800044 	movi	r2,1
   13668:	f800283a 	ret
   1366c:	00802284 	movi	r2,138
   13670:	20800015 	stw	r2,0(r4)
   13674:	00bfffc4 	movi	r2,-1
   13678:	f800283a 	ret
   1367c:	0005883a 	mov	r2,zero
   13680:	f800283a 	ret

00013684 <abort>:
   13684:	deffff04 	addi	sp,sp,-4
   13688:	01000184 	movi	r4,6
   1368c:	dfc00015 	stw	ra,0(sp)
   13690:	00139100 	call	13910 <raise>
   13694:	01000044 	movi	r4,1
   13698:	00149140 	call	14914 <_exit>

0001369c <_init_signal_r>:
   1369c:	2080b717 	ldw	r2,732(r4)
   136a0:	10000226 	beq	r2,zero,136ac <_init_signal_r+0x10>
   136a4:	0005883a 	mov	r2,zero
   136a8:	f800283a 	ret
   136ac:	defffe04 	addi	sp,sp,-8
   136b0:	01402004 	movi	r5,128
   136b4:	dc000015 	stw	r16,0(sp)
   136b8:	dfc00115 	stw	ra,4(sp)
   136bc:	2021883a 	mov	r16,r4
   136c0:	0009ea80 	call	9ea8 <_malloc_r>
   136c4:	8080b715 	stw	r2,732(r16)
   136c8:	1009883a 	mov	r4,r2
   136cc:	10000826 	beq	r2,zero,136f0 <_init_signal_r+0x54>
   136d0:	01802004 	movi	r6,128
   136d4:	000b883a 	mov	r5,zero
   136d8:	000faa40 	call	faa4 <memset>
   136dc:	0005883a 	mov	r2,zero
   136e0:	dfc00117 	ldw	ra,4(sp)
   136e4:	dc000017 	ldw	r16,0(sp)
   136e8:	dec00204 	addi	sp,sp,8
   136ec:	f800283a 	ret
   136f0:	00bfffc4 	movi	r2,-1
   136f4:	003ffa06 	br	136e0 <_init_signal_r+0x44>

000136f8 <_signal_r>:
   136f8:	defffc04 	addi	sp,sp,-16
   136fc:	dc400115 	stw	r17,4(sp)
   13700:	dfc00315 	stw	ra,12(sp)
   13704:	dc800215 	stw	r18,8(sp)
   13708:	dc000015 	stw	r16,0(sp)
   1370c:	28800830 	cmpltui	r2,r5,32
   13710:	2023883a 	mov	r17,r4
   13714:	10000e26 	beq	r2,zero,13750 <_signal_r+0x58>
   13718:	20c0b717 	ldw	r3,732(r4)
   1371c:	2821883a 	mov	r16,r5
   13720:	3025883a 	mov	r18,r6
   13724:	18000e26 	beq	r3,zero,13760 <_signal_r+0x68>
   13728:	802090ba 	slli	r16,r16,2
   1372c:	1c21883a 	add	r16,r3,r16
   13730:	80800017 	ldw	r2,0(r16)
   13734:	84800015 	stw	r18,0(r16)
   13738:	dfc00317 	ldw	ra,12(sp)
   1373c:	dc800217 	ldw	r18,8(sp)
   13740:	dc400117 	ldw	r17,4(sp)
   13744:	dc000017 	ldw	r16,0(sp)
   13748:	dec00404 	addi	sp,sp,16
   1374c:	f800283a 	ret
   13750:	00800584 	movi	r2,22
   13754:	20800015 	stw	r2,0(r4)
   13758:	00bfffc4 	movi	r2,-1
   1375c:	003ff606 	br	13738 <_signal_r+0x40>
   13760:	01402004 	movi	r5,128
   13764:	0009ea80 	call	9ea8 <_malloc_r>
   13768:	8880b715 	stw	r2,732(r17)
   1376c:	10000626 	beq	r2,zero,13788 <_signal_r+0x90>
   13770:	01802004 	movi	r6,128
   13774:	000b883a 	mov	r5,zero
   13778:	1009883a 	mov	r4,r2
   1377c:	000faa40 	call	faa4 <memset>
   13780:	1007883a 	mov	r3,r2
   13784:	003fe806 	br	13728 <_signal_r+0x30>
   13788:	00bfffc4 	movi	r2,-1
   1378c:	003fea06 	br	13738 <_signal_r+0x40>

00013790 <_raise_r>:
   13790:	28800830 	cmpltui	r2,r5,32
   13794:	10002b26 	beq	r2,zero,13844 <_raise_r+0xb4>
   13798:	2080b717 	ldw	r2,732(r4)
   1379c:	defffd04 	addi	sp,sp,-12
   137a0:	dc000115 	stw	r16,4(sp)
   137a4:	dfc00215 	stw	ra,8(sp)
   137a8:	2821883a 	mov	r16,r5
   137ac:	10001026 	beq	r2,zero,137f0 <_raise_r+0x60>
   137b0:	280690ba 	slli	r3,r5,2
   137b4:	10c5883a 	add	r2,r2,r3
   137b8:	10c00017 	ldw	r3,0(r2)
   137bc:	18000c26 	beq	r3,zero,137f0 <_raise_r+0x60>
   137c0:	19400060 	cmpeqi	r5,r3,1
   137c4:	28001a1e 	bne	r5,zero,13830 <_raise_r+0xa0>
   137c8:	197fffd8 	cmpnei	r5,r3,-1
   137cc:	28001126 	beq	r5,zero,13814 <_raise_r+0x84>
   137d0:	10000015 	stw	zero,0(r2)
   137d4:	8009883a 	mov	r4,r16
   137d8:	183ee83a 	callr	r3
   137dc:	0005883a 	mov	r2,zero
   137e0:	dfc00217 	ldw	ra,8(sp)
   137e4:	dc000117 	ldw	r16,4(sp)
   137e8:	dec00304 	addi	sp,sp,12
   137ec:	f800283a 	ret
   137f0:	d9000015 	stw	r4,0(sp)
   137f4:	0013be80 	call	13be8 <_getpid_r>
   137f8:	d9000017 	ldw	r4,0(sp)
   137fc:	800d883a 	mov	r6,r16
   13800:	100b883a 	mov	r5,r2
   13804:	dfc00217 	ldw	ra,8(sp)
   13808:	dc000117 	ldw	r16,4(sp)
   1380c:	dec00304 	addi	sp,sp,12
   13810:	0013b881 	jmpi	13b88 <_kill_r>
   13814:	00800584 	movi	r2,22
   13818:	20800015 	stw	r2,0(r4)
   1381c:	00800044 	movi	r2,1
   13820:	dfc00217 	ldw	ra,8(sp)
   13824:	dc000117 	ldw	r16,4(sp)
   13828:	dec00304 	addi	sp,sp,12
   1382c:	f800283a 	ret
   13830:	0005883a 	mov	r2,zero
   13834:	dfc00217 	ldw	ra,8(sp)
   13838:	dc000117 	ldw	r16,4(sp)
   1383c:	dec00304 	addi	sp,sp,12
   13840:	f800283a 	ret
   13844:	00800584 	movi	r2,22
   13848:	20800015 	stw	r2,0(r4)
   1384c:	00bfffc4 	movi	r2,-1
   13850:	f800283a 	ret

00013854 <__sigtramp_r>:
   13854:	28800830 	cmpltui	r2,r5,32
   13858:	10002b26 	beq	r2,zero,13908 <__sigtramp_r+0xb4>
   1385c:	20c0b717 	ldw	r3,732(r4)
   13860:	defffd04 	addi	sp,sp,-12
   13864:	dc400115 	stw	r17,4(sp)
   13868:	dc000015 	stw	r16,0(sp)
   1386c:	dfc00215 	stw	ra,8(sp)
   13870:	2821883a 	mov	r16,r5
   13874:	2023883a 	mov	r17,r4
   13878:	18001326 	beq	r3,zero,138c8 <__sigtramp_r+0x74>
   1387c:	800490ba 	slli	r2,r16,2
   13880:	1887883a 	add	r3,r3,r2
   13884:	18800017 	ldw	r2,0(r3)
   13888:	10000d26 	beq	r2,zero,138c0 <__sigtramp_r+0x6c>
   1388c:	113fffe0 	cmpeqi	r4,r2,-1
   13890:	2000191e 	bne	r4,zero,138f8 <__sigtramp_r+0xa4>
   13894:	11000060 	cmpeqi	r4,r2,1
   13898:	2000151e 	bne	r4,zero,138f0 <__sigtramp_r+0x9c>
   1389c:	18000015 	stw	zero,0(r3)
   138a0:	8009883a 	mov	r4,r16
   138a4:	103ee83a 	callr	r2
   138a8:	0005883a 	mov	r2,zero
   138ac:	dfc00217 	ldw	ra,8(sp)
   138b0:	dc400117 	ldw	r17,4(sp)
   138b4:	dc000017 	ldw	r16,0(sp)
   138b8:	dec00304 	addi	sp,sp,12
   138bc:	f800283a 	ret
   138c0:	00800044 	movi	r2,1
   138c4:	003ff906 	br	138ac <__sigtramp_r+0x58>
   138c8:	01402004 	movi	r5,128
   138cc:	0009ea80 	call	9ea8 <_malloc_r>
   138d0:	8880b715 	stw	r2,732(r17)
   138d4:	10000a26 	beq	r2,zero,13900 <__sigtramp_r+0xac>
   138d8:	01802004 	movi	r6,128
   138dc:	000b883a 	mov	r5,zero
   138e0:	1009883a 	mov	r4,r2
   138e4:	000faa40 	call	faa4 <memset>
   138e8:	1007883a 	mov	r3,r2
   138ec:	003fe306 	br	1387c <__sigtramp_r+0x28>
   138f0:	008000c4 	movi	r2,3
   138f4:	003fed06 	br	138ac <__sigtramp_r+0x58>
   138f8:	00800084 	movi	r2,2
   138fc:	003feb06 	br	138ac <__sigtramp_r+0x58>
   13900:	00bfffc4 	movi	r2,-1
   13904:	003fe906 	br	138ac <__sigtramp_r+0x58>
   13908:	00bfffc4 	movi	r2,-1
   1390c:	f800283a 	ret

00013910 <raise>:
   13910:	defffd04 	addi	sp,sp,-12
   13914:	dc400115 	stw	r17,4(sp)
   13918:	00c000b4 	movhi	r3,2
   1391c:	dfc00215 	stw	ra,8(sp)
   13920:	dc000015 	stw	r16,0(sp)
   13924:	20800830 	cmpltui	r2,r4,32
   13928:	1c67e517 	ldw	r17,-24684(r3)
   1392c:	10002326 	beq	r2,zero,139bc <raise+0xac>
   13930:	8880b717 	ldw	r2,732(r17)
   13934:	2021883a 	mov	r16,r4
   13938:	10001026 	beq	r2,zero,1397c <raise+0x6c>
   1393c:	200690ba 	slli	r3,r4,2
   13940:	10c5883a 	add	r2,r2,r3
   13944:	10c00017 	ldw	r3,0(r2)
   13948:	18000c26 	beq	r3,zero,1397c <raise+0x6c>
   1394c:	19400060 	cmpeqi	r5,r3,1
   13950:	2800181e 	bne	r5,zero,139b4 <raise+0xa4>
   13954:	197fffd8 	cmpnei	r5,r3,-1
   13958:	28001226 	beq	r5,zero,139a4 <raise+0x94>
   1395c:	10000015 	stw	zero,0(r2)
   13960:	183ee83a 	callr	r3
   13964:	0005883a 	mov	r2,zero
   13968:	dfc00217 	ldw	ra,8(sp)
   1396c:	dc400117 	ldw	r17,4(sp)
   13970:	dc000017 	ldw	r16,0(sp)
   13974:	dec00304 	addi	sp,sp,12
   13978:	f800283a 	ret
   1397c:	8809883a 	mov	r4,r17
   13980:	0013be80 	call	13be8 <_getpid_r>
   13984:	800d883a 	mov	r6,r16
   13988:	100b883a 	mov	r5,r2
   1398c:	8809883a 	mov	r4,r17
   13990:	dfc00217 	ldw	ra,8(sp)
   13994:	dc400117 	ldw	r17,4(sp)
   13998:	dc000017 	ldw	r16,0(sp)
   1399c:	dec00304 	addi	sp,sp,12
   139a0:	0013b881 	jmpi	13b88 <_kill_r>
   139a4:	00800584 	movi	r2,22
   139a8:	88800015 	stw	r2,0(r17)
   139ac:	00800044 	movi	r2,1
   139b0:	003fed06 	br	13968 <raise+0x58>
   139b4:	0005883a 	mov	r2,zero
   139b8:	003feb06 	br	13968 <raise+0x58>
   139bc:	00800584 	movi	r2,22
   139c0:	88800015 	stw	r2,0(r17)
   139c4:	00bfffc4 	movi	r2,-1
   139c8:	003fe706 	br	13968 <raise+0x58>

000139cc <signal>:
   139cc:	defffc04 	addi	sp,sp,-16
   139d0:	dc800215 	stw	r18,8(sp)
   139d4:	00c000b4 	movhi	r3,2
   139d8:	dfc00315 	stw	ra,12(sp)
   139dc:	dc400115 	stw	r17,4(sp)
   139e0:	dc000015 	stw	r16,0(sp)
   139e4:	20800830 	cmpltui	r2,r4,32
   139e8:	1ca7e517 	ldw	r18,-24684(r3)
   139ec:	10000e26 	beq	r2,zero,13a28 <signal+0x5c>
   139f0:	2021883a 	mov	r16,r4
   139f4:	9100b717 	ldw	r4,732(r18)
   139f8:	2823883a 	mov	r17,r5
   139fc:	20000e26 	beq	r4,zero,13a38 <signal+0x6c>
   13a00:	802090ba 	slli	r16,r16,2
   13a04:	2421883a 	add	r16,r4,r16
   13a08:	80800017 	ldw	r2,0(r16)
   13a0c:	84400015 	stw	r17,0(r16)
   13a10:	dfc00317 	ldw	ra,12(sp)
   13a14:	dc800217 	ldw	r18,8(sp)
   13a18:	dc400117 	ldw	r17,4(sp)
   13a1c:	dc000017 	ldw	r16,0(sp)
   13a20:	dec00404 	addi	sp,sp,16
   13a24:	f800283a 	ret
   13a28:	00800584 	movi	r2,22
   13a2c:	90800015 	stw	r2,0(r18)
   13a30:	00bfffc4 	movi	r2,-1
   13a34:	003ff606 	br	13a10 <signal+0x44>
   13a38:	9009883a 	mov	r4,r18
   13a3c:	01402004 	movi	r5,128
   13a40:	0009ea80 	call	9ea8 <_malloc_r>
   13a44:	9080b715 	stw	r2,732(r18)
   13a48:	1009883a 	mov	r4,r2
   13a4c:	10000526 	beq	r2,zero,13a64 <signal+0x98>
   13a50:	01802004 	movi	r6,128
   13a54:	000b883a 	mov	r5,zero
   13a58:	000faa40 	call	faa4 <memset>
   13a5c:	1009883a 	mov	r4,r2
   13a60:	003fe706 	br	13a00 <signal+0x34>
   13a64:	00bfffc4 	movi	r2,-1
   13a68:	003fe906 	br	13a10 <signal+0x44>

00013a6c <_init_signal>:
   13a6c:	defffe04 	addi	sp,sp,-8
   13a70:	008000b4 	movhi	r2,2
   13a74:	dc000015 	stw	r16,0(sp)
   13a78:	1427e517 	ldw	r16,-24684(r2)
   13a7c:	dfc00115 	stw	ra,4(sp)
   13a80:	8080b717 	ldw	r2,732(r16)
   13a84:	10000526 	beq	r2,zero,13a9c <_init_signal+0x30>
   13a88:	0005883a 	mov	r2,zero
   13a8c:	dfc00117 	ldw	ra,4(sp)
   13a90:	dc000017 	ldw	r16,0(sp)
   13a94:	dec00204 	addi	sp,sp,8
   13a98:	f800283a 	ret
   13a9c:	8009883a 	mov	r4,r16
   13aa0:	01402004 	movi	r5,128
   13aa4:	0009ea80 	call	9ea8 <_malloc_r>
   13aa8:	8080b715 	stw	r2,732(r16)
   13aac:	1009883a 	mov	r4,r2
   13ab0:	10000426 	beq	r2,zero,13ac4 <_init_signal+0x58>
   13ab4:	01802004 	movi	r6,128
   13ab8:	000b883a 	mov	r5,zero
   13abc:	000faa40 	call	faa4 <memset>
   13ac0:	003ff106 	br	13a88 <_init_signal+0x1c>
   13ac4:	00bfffc4 	movi	r2,-1
   13ac8:	003ff006 	br	13a8c <_init_signal+0x20>

00013acc <__sigtramp>:
   13acc:	defffd04 	addi	sp,sp,-12
   13ad0:	dc400115 	stw	r17,4(sp)
   13ad4:	00c000b4 	movhi	r3,2
   13ad8:	dfc00215 	stw	ra,8(sp)
   13adc:	dc000015 	stw	r16,0(sp)
   13ae0:	20800830 	cmpltui	r2,r4,32
   13ae4:	1c67e517 	ldw	r17,-24684(r3)
   13ae8:	10002526 	beq	r2,zero,13b80 <__sigtramp+0xb4>
   13aec:	88c0b717 	ldw	r3,732(r17)
   13af0:	2021883a 	mov	r16,r4
   13af4:	18001326 	beq	r3,zero,13b44 <__sigtramp+0x78>
   13af8:	800890ba 	slli	r4,r16,2
   13afc:	1907883a 	add	r3,r3,r4
   13b00:	18800017 	ldw	r2,0(r3)
   13b04:	10000d26 	beq	r2,zero,13b3c <__sigtramp+0x70>
   13b08:	113fffe0 	cmpeqi	r4,r2,-1
   13b0c:	20001a1e 	bne	r4,zero,13b78 <__sigtramp+0xac>
   13b10:	11000060 	cmpeqi	r4,r2,1
   13b14:	2000161e 	bne	r4,zero,13b70 <__sigtramp+0xa4>
   13b18:	18000015 	stw	zero,0(r3)
   13b1c:	8009883a 	mov	r4,r16
   13b20:	103ee83a 	callr	r2
   13b24:	0005883a 	mov	r2,zero
   13b28:	dfc00217 	ldw	ra,8(sp)
   13b2c:	dc400117 	ldw	r17,4(sp)
   13b30:	dc000017 	ldw	r16,0(sp)
   13b34:	dec00304 	addi	sp,sp,12
   13b38:	f800283a 	ret
   13b3c:	00800044 	movi	r2,1
   13b40:	003ff906 	br	13b28 <__sigtramp+0x5c>
   13b44:	01402004 	movi	r5,128
   13b48:	8809883a 	mov	r4,r17
   13b4c:	0009ea80 	call	9ea8 <_malloc_r>
   13b50:	8880b715 	stw	r2,732(r17)
   13b54:	10000a26 	beq	r2,zero,13b80 <__sigtramp+0xb4>
   13b58:	01802004 	movi	r6,128
   13b5c:	000b883a 	mov	r5,zero
   13b60:	1009883a 	mov	r4,r2
   13b64:	000faa40 	call	faa4 <memset>
   13b68:	1007883a 	mov	r3,r2
   13b6c:	003fe206 	br	13af8 <__sigtramp+0x2c>
   13b70:	008000c4 	movi	r2,3
   13b74:	003fec06 	br	13b28 <__sigtramp+0x5c>
   13b78:	00800084 	movi	r2,2
   13b7c:	003fea06 	br	13b28 <__sigtramp+0x5c>
   13b80:	00bfffc4 	movi	r2,-1
   13b84:	003fe806 	br	13b28 <__sigtramp+0x5c>

00013b88 <_kill_r>:
   13b88:	2807883a 	mov	r3,r5
   13b8c:	defffe04 	addi	sp,sp,-8
   13b90:	dc000015 	stw	r16,0(sp)
   13b94:	008000b4 	movhi	r2,2
   13b98:	300b883a 	mov	r5,r6
   13b9c:	2021883a 	mov	r16,r4
   13ba0:	1809883a 	mov	r4,r3
   13ba4:	dfc00115 	stw	ra,4(sp)
   13ba8:	102f1915 	stw	zero,-17308(r2)
   13bac:	0014b8c0 	call	14b8c <kill>
   13bb0:	10ffffd8 	cmpnei	r3,r2,-1
   13bb4:	18000426 	beq	r3,zero,13bc8 <_kill_r+0x40>
   13bb8:	dfc00117 	ldw	ra,4(sp)
   13bbc:	dc000017 	ldw	r16,0(sp)
   13bc0:	dec00204 	addi	sp,sp,8
   13bc4:	f800283a 	ret
   13bc8:	00c000b4 	movhi	r3,2
   13bcc:	18ef1917 	ldw	r3,-17308(r3)
   13bd0:	183ff926 	beq	r3,zero,13bb8 <_kill_r+0x30>
   13bd4:	80c00015 	stw	r3,0(r16)
   13bd8:	dfc00117 	ldw	ra,4(sp)
   13bdc:	dc000017 	ldw	r16,0(sp)
   13be0:	dec00204 	addi	sp,sp,8
   13be4:	f800283a 	ret

00013be8 <_getpid_r>:
   13be8:	0014a441 	jmpi	14a44 <getpid>

00013bec <__udivdi3>:
   13bec:	defff504 	addi	sp,sp,-44
   13bf0:	dd000515 	stw	r20,20(sp)
   13bf4:	dc800315 	stw	r18,12(sp)
   13bf8:	dfc00a15 	stw	ra,40(sp)
   13bfc:	df000915 	stw	fp,36(sp)
   13c00:	ddc00815 	stw	r23,32(sp)
   13c04:	dd800715 	stw	r22,28(sp)
   13c08:	dd400615 	stw	r21,24(sp)
   13c0c:	dcc00415 	stw	r19,16(sp)
   13c10:	dc400215 	stw	r17,8(sp)
   13c14:	dc000115 	stw	r16,4(sp)
   13c18:	2029883a 	mov	r20,r4
   13c1c:	2825883a 	mov	r18,r5
   13c20:	3800461e 	bne	r7,zero,13d3c <__udivdi3+0x150>
   13c24:	3823883a 	mov	r17,r7
   13c28:	3021883a 	mov	r16,r6
   13c2c:	2027883a 	mov	r19,r4
   13c30:	2980622e 	bgeu	r5,r6,13dbc <__udivdi3+0x1d0>
   13c34:	00bfffd4 	movui	r2,65535
   13c38:	282b883a 	mov	r21,r5
   13c3c:	1180aa2e 	bgeu	r2,r6,13ee8 <__udivdi3+0x2fc>
   13c40:	00804034 	movhi	r2,256
   13c44:	30815a36 	bltu	r6,r2,141b0 <__udivdi3+0x5c4>
   13c48:	3006d63a 	srli	r3,r6,24
   13c4c:	04400604 	movi	r17,24
   13c50:	00800074 	movhi	r2,1
   13c54:	1885883a 	add	r2,r3,r2
   13c58:	109f2503 	ldbu	r2,31892(r2)
   13c5c:	00c00804 	movi	r3,32
   13c60:	1463883a 	add	r17,r2,r17
   13c64:	1c45c83a 	sub	r2,r3,r17
   13c68:	1c400526 	beq	r3,r17,13c80 <__udivdi3+0x94>
   13c6c:	9086983a 	sll	r3,r18,r2
   13c70:	a462d83a 	srl	r17,r20,r17
   13c74:	30a0983a 	sll	r16,r6,r2
   13c78:	a0a6983a 	sll	r19,r20,r2
   13c7c:	88eab03a 	or	r21,r17,r3
   13c80:	802cd43a 	srli	r22,r16,16
   13c84:	a809883a 	mov	r4,r21
   13c88:	853fffcc 	andi	r20,r16,65535
   13c8c:	b00b883a 	mov	r5,r22
   13c90:	00070c80 	call	70c8 <__umodsi3>
   13c94:	a809883a 	mov	r4,r21
   13c98:	b00b883a 	mov	r5,r22
   13c9c:	1025883a 	mov	r18,r2
   13ca0:	00070640 	call	7064 <__udivsi3>
   13ca4:	a009883a 	mov	r4,r20
   13ca8:	100b883a 	mov	r5,r2
   13cac:	102b883a 	mov	r21,r2
   13cb0:	00071240 	call	7124 <__mulsi3>
   13cb4:	9024943a 	slli	r18,r18,16
   13cb8:	9808d43a 	srli	r4,r19,16
   13cbc:	9108b03a 	or	r4,r18,r4
   13cc0:	2080052e 	bgeu	r4,r2,13cd8 <__udivdi3+0xec>
   13cc4:	2409883a 	add	r4,r4,r16
   13cc8:	a8ffffc4 	addi	r3,r21,-1
   13ccc:	24000136 	bltu	r4,r16,13cd4 <__udivdi3+0xe8>
   13cd0:	20814836 	bltu	r4,r2,141f4 <__udivdi3+0x608>
   13cd4:	182b883a 	mov	r21,r3
   13cd8:	20a3c83a 	sub	r17,r4,r2
   13cdc:	8809883a 	mov	r4,r17
   13ce0:	b00b883a 	mov	r5,r22
   13ce4:	00070c80 	call	70c8 <__umodsi3>
   13ce8:	8809883a 	mov	r4,r17
   13cec:	1023883a 	mov	r17,r2
   13cf0:	b00b883a 	mov	r5,r22
   13cf4:	8822943a 	slli	r17,r17,16
   13cf8:	00070640 	call	7064 <__udivsi3>
   13cfc:	100b883a 	mov	r5,r2
   13d00:	a009883a 	mov	r4,r20
   13d04:	9cffffcc 	andi	r19,r19,65535
   13d08:	1025883a 	mov	r18,r2
   13d0c:	8ce6b03a 	or	r19,r17,r19
   13d10:	00071240 	call	7124 <__mulsi3>
   13d14:	9880052e 	bgeu	r19,r2,13d2c <__udivdi3+0x140>
   13d18:	84e7883a 	add	r19,r16,r19
   13d1c:	90ffffc4 	addi	r3,r18,-1
   13d20:	9c000136 	bltu	r19,r16,13d28 <__udivdi3+0x13c>
   13d24:	98813136 	bltu	r19,r2,141ec <__udivdi3+0x600>
   13d28:	1825883a 	mov	r18,r3
   13d2c:	a80c943a 	slli	r6,r21,16
   13d30:	0007883a 	mov	r3,zero
   13d34:	3484b03a 	or	r2,r6,r18
   13d38:	00000306 	br	13d48 <__udivdi3+0x15c>
   13d3c:	29c00e2e 	bgeu	r5,r7,13d78 <__udivdi3+0x18c>
   13d40:	0007883a 	mov	r3,zero
   13d44:	0005883a 	mov	r2,zero
   13d48:	dfc00a17 	ldw	ra,40(sp)
   13d4c:	df000917 	ldw	fp,36(sp)
   13d50:	ddc00817 	ldw	r23,32(sp)
   13d54:	dd800717 	ldw	r22,28(sp)
   13d58:	dd400617 	ldw	r21,24(sp)
   13d5c:	dd000517 	ldw	r20,20(sp)
   13d60:	dcc00417 	ldw	r19,16(sp)
   13d64:	dc800317 	ldw	r18,12(sp)
   13d68:	dc400217 	ldw	r17,8(sp)
   13d6c:	dc000117 	ldw	r16,4(sp)
   13d70:	dec00b04 	addi	sp,sp,44
   13d74:	f800283a 	ret
   13d78:	00bfffd4 	movui	r2,65535
   13d7c:	11c05f2e 	bgeu	r2,r7,13efc <__udivdi3+0x310>
   13d80:	00804034 	movhi	r2,256
   13d84:	3880fc36 	bltu	r7,r2,14178 <__udivdi3+0x58c>
   13d88:	3804d63a 	srli	r2,r7,24
   13d8c:	01000604 	movi	r4,24
   13d90:	00c00074 	movhi	r3,1
   13d94:	10c7883a 	add	r3,r2,r3
   13d98:	189f2503 	ldbu	r2,31892(r3)
   13d9c:	00c00804 	movi	r3,32
   13da0:	1105883a 	add	r2,r2,r4
   13da4:	18a3c83a 	sub	r17,r3,r2
   13da8:	1880901e 	bne	r3,r2,13fec <__udivdi3+0x400>
   13dac:	3c80f736 	bltu	r7,r18,1418c <__udivdi3+0x5a0>
   13db0:	a185403a 	cmpgeu	r2,r20,r6
   13db4:	0007883a 	mov	r3,zero
   13db8:	003fe306 	br	13d48 <__udivdi3+0x15c>
   13dbc:	3000041e 	bne	r6,zero,13dd0 <__udivdi3+0x1e4>
   13dc0:	000b883a 	mov	r5,zero
   13dc4:	01000044 	movi	r4,1
   13dc8:	00070640 	call	7064 <__udivsi3>
   13dcc:	1021883a 	mov	r16,r2
   13dd0:	00bfffd4 	movui	r2,65535
   13dd4:	14003f2e 	bgeu	r2,r16,13ed4 <__udivdi3+0x2e8>
   13dd8:	00804034 	movhi	r2,256
   13ddc:	8080f136 	bltu	r16,r2,141a4 <__udivdi3+0x5b8>
   13de0:	8006d63a 	srli	r3,r16,24
   13de4:	04400604 	movi	r17,24
   13de8:	00800074 	movhi	r2,1
   13dec:	1885883a 	add	r2,r3,r2
   13df0:	109f2503 	ldbu	r2,31892(r2)
   13df4:	00c00804 	movi	r3,32
   13df8:	1463883a 	add	r17,r2,r17
   13dfc:	1c45c83a 	sub	r2,r3,r17
   13e00:	1c40431e 	bne	r3,r17,13f10 <__udivdi3+0x324>
   13e04:	802cd43a 	srli	r22,r16,16
   13e08:	9423c83a 	sub	r17,r18,r16
   13e0c:	853fffcc 	andi	r20,r16,65535
   13e10:	00c00044 	movi	r3,1
   13e14:	b00b883a 	mov	r5,r22
   13e18:	8809883a 	mov	r4,r17
   13e1c:	d8c00015 	stw	r3,0(sp)
   13e20:	00070c80 	call	70c8 <__umodsi3>
   13e24:	b00b883a 	mov	r5,r22
   13e28:	8809883a 	mov	r4,r17
   13e2c:	1025883a 	mov	r18,r2
   13e30:	00070640 	call	7064 <__udivsi3>
   13e34:	1009883a 	mov	r4,r2
   13e38:	a00b883a 	mov	r5,r20
   13e3c:	102b883a 	mov	r21,r2
   13e40:	00071240 	call	7124 <__mulsi3>
   13e44:	9024943a 	slli	r18,r18,16
   13e48:	9808d43a 	srli	r4,r19,16
   13e4c:	d8c00017 	ldw	r3,0(sp)
   13e50:	9108b03a 	or	r4,r18,r4
   13e54:	2080052e 	bgeu	r4,r2,13e6c <__udivdi3+0x280>
   13e58:	2409883a 	add	r4,r4,r16
   13e5c:	a97fffc4 	addi	r5,r21,-1
   13e60:	24000136 	bltu	r4,r16,13e68 <__udivdi3+0x27c>
   13e64:	2080e636 	bltu	r4,r2,14200 <__udivdi3+0x614>
   13e68:	282b883a 	mov	r21,r5
   13e6c:	20a3c83a 	sub	r17,r4,r2
   13e70:	8809883a 	mov	r4,r17
   13e74:	b00b883a 	mov	r5,r22
   13e78:	d8c00015 	stw	r3,0(sp)
   13e7c:	00070c80 	call	70c8 <__umodsi3>
   13e80:	8809883a 	mov	r4,r17
   13e84:	1023883a 	mov	r17,r2
   13e88:	b00b883a 	mov	r5,r22
   13e8c:	8822943a 	slli	r17,r17,16
   13e90:	00070640 	call	7064 <__udivsi3>
   13e94:	a00b883a 	mov	r5,r20
   13e98:	1009883a 	mov	r4,r2
   13e9c:	9cffffcc 	andi	r19,r19,65535
   13ea0:	1025883a 	mov	r18,r2
   13ea4:	8ce6b03a 	or	r19,r17,r19
   13ea8:	00071240 	call	7124 <__mulsi3>
   13eac:	d8c00017 	ldw	r3,0(sp)
   13eb0:	9880052e 	bgeu	r19,r2,13ec8 <__udivdi3+0x2dc>
   13eb4:	84e7883a 	add	r19,r16,r19
   13eb8:	913fffc4 	addi	r4,r18,-1
   13ebc:	9c000136 	bltu	r19,r16,13ec4 <__udivdi3+0x2d8>
   13ec0:	9880c836 	bltu	r19,r2,141e4 <__udivdi3+0x5f8>
   13ec4:	2025883a 	mov	r18,r4
   13ec8:	a80c943a 	slli	r6,r21,16
   13ecc:	3484b03a 	or	r2,r6,r18
   13ed0:	003f9d06 	br	13d48 <__udivdi3+0x15c>
   13ed4:	80804030 	cmpltui	r2,r16,256
   13ed8:	1000b81e 	bne	r2,zero,141bc <__udivdi3+0x5d0>
   13edc:	8006d23a 	srli	r3,r16,8
   13ee0:	04400204 	movi	r17,8
   13ee4:	003fc006 	br	13de8 <__udivdi3+0x1fc>
   13ee8:	30804030 	cmpltui	r2,r6,256
   13eec:	1000a51e 	bne	r2,zero,14184 <__udivdi3+0x598>
   13ef0:	3006d23a 	srli	r3,r6,8
   13ef4:	04400204 	movi	r17,8
   13ef8:	003f5506 	br	13c50 <__udivdi3+0x64>
   13efc:	38804030 	cmpltui	r2,r7,256
   13f00:	1000a51e 	bne	r2,zero,14198 <__udivdi3+0x5ac>
   13f04:	3804d23a 	srli	r2,r7,8
   13f08:	01000204 	movi	r4,8
   13f0c:	003fa006 	br	13d90 <__udivdi3+0x1a4>
   13f10:	80a0983a 	sll	r16,r16,r2
   13f14:	946ed83a 	srl	r23,r18,r17
   13f18:	9086983a 	sll	r3,r18,r2
   13f1c:	802cd43a 	srli	r22,r16,16
   13f20:	a462d83a 	srl	r17,r20,r17
   13f24:	b809883a 	mov	r4,r23
   13f28:	b00b883a 	mov	r5,r22
   13f2c:	88eab03a 	or	r21,r17,r3
   13f30:	a0a6983a 	sll	r19,r20,r2
   13f34:	00070c80 	call	70c8 <__umodsi3>
   13f38:	b809883a 	mov	r4,r23
   13f3c:	b00b883a 	mov	r5,r22
   13f40:	1025883a 	mov	r18,r2
   13f44:	853fffcc 	andi	r20,r16,65535
   13f48:	00070640 	call	7064 <__udivsi3>
   13f4c:	a009883a 	mov	r4,r20
   13f50:	100b883a 	mov	r5,r2
   13f54:	102f883a 	mov	r23,r2
   13f58:	00071240 	call	7124 <__mulsi3>
   13f5c:	9024943a 	slli	r18,r18,16
   13f60:	a808d43a 	srli	r4,r21,16
   13f64:	9108b03a 	or	r4,r18,r4
   13f68:	2080062e 	bgeu	r4,r2,13f84 <__udivdi3+0x398>
   13f6c:	2409883a 	add	r4,r4,r16
   13f70:	b8ffffc4 	addi	r3,r23,-1
   13f74:	24009936 	bltu	r4,r16,141dc <__udivdi3+0x5f0>
   13f78:	2080982e 	bgeu	r4,r2,141dc <__udivdi3+0x5f0>
   13f7c:	bdffff84 	addi	r23,r23,-2
   13f80:	2409883a 	add	r4,r4,r16
   13f84:	20a3c83a 	sub	r17,r4,r2
   13f88:	8809883a 	mov	r4,r17
   13f8c:	b00b883a 	mov	r5,r22
   13f90:	00070c80 	call	70c8 <__umodsi3>
   13f94:	1025883a 	mov	r18,r2
   13f98:	8809883a 	mov	r4,r17
   13f9c:	b00b883a 	mov	r5,r22
   13fa0:	9024943a 	slli	r18,r18,16
   13fa4:	00070640 	call	7064 <__udivsi3>
   13fa8:	100b883a 	mov	r5,r2
   13fac:	a009883a 	mov	r4,r20
   13fb0:	ac7fffcc 	andi	r17,r21,65535
   13fb4:	1039883a 	mov	fp,r2
   13fb8:	9462b03a 	or	r17,r18,r17
   13fbc:	00071240 	call	7124 <__mulsi3>
   13fc0:	8880062e 	bgeu	r17,r2,13fdc <__udivdi3+0x3f0>
   13fc4:	8c23883a 	add	r17,r17,r16
   13fc8:	e0ffffc4 	addi	r3,fp,-1
   13fcc:	8c007f36 	bltu	r17,r16,141cc <__udivdi3+0x5e0>
   13fd0:	88807e2e 	bgeu	r17,r2,141cc <__udivdi3+0x5e0>
   13fd4:	e73fff84 	addi	fp,fp,-2
   13fd8:	8c23883a 	add	r17,r17,r16
   13fdc:	b806943a 	slli	r3,r23,16
   13fe0:	88a3c83a 	sub	r17,r17,r2
   13fe4:	1f06b03a 	or	r3,r3,fp
   13fe8:	003f8a06 	br	13e14 <__udivdi3+0x228>
   13fec:	30a6d83a 	srl	r19,r6,r2
   13ff0:	3c4e983a 	sll	r7,r7,r17
   13ff4:	90a0d83a 	srl	r16,r18,r2
   13ff8:	9446983a 	sll	r3,r18,r17
   13ffc:	99e6b03a 	or	r19,r19,r7
   14000:	a084d83a 	srl	r2,r20,r2
   14004:	9838d43a 	srli	fp,r19,16
   14008:	8009883a 	mov	r4,r16
   1400c:	10eab03a 	or	r21,r2,r3
   14010:	e00b883a 	mov	r5,fp
   14014:	346c983a 	sll	r22,r6,r17
   14018:	dd400015 	stw	r21,0(sp)
   1401c:	00070c80 	call	70c8 <__umodsi3>
   14020:	8009883a 	mov	r4,r16
   14024:	e00b883a 	mov	r5,fp
   14028:	102f883a 	mov	r23,r2
   1402c:	9cbfffcc 	andi	r18,r19,65535
   14030:	00070640 	call	7064 <__udivsi3>
   14034:	9009883a 	mov	r4,r18
   14038:	100b883a 	mov	r5,r2
   1403c:	1021883a 	mov	r16,r2
   14040:	00071240 	call	7124 <__mulsi3>
   14044:	b82e943a 	slli	r23,r23,16
   14048:	a808d43a 	srli	r4,r21,16
   1404c:	b908b03a 	or	r4,r23,r4
   14050:	2080062e 	bgeu	r4,r2,1406c <__udivdi3+0x480>
   14054:	24c9883a 	add	r4,r4,r19
   14058:	817fffc4 	addi	r5,r16,-1
   1405c:	24c05d36 	bltu	r4,r19,141d4 <__udivdi3+0x5e8>
   14060:	20805c2e 	bgeu	r4,r2,141d4 <__udivdi3+0x5e8>
   14064:	843fff84 	addi	r16,r16,-2
   14068:	24c9883a 	add	r4,r4,r19
   1406c:	20abc83a 	sub	r21,r4,r2
   14070:	a809883a 	mov	r4,r21
   14074:	e00b883a 	mov	r5,fp
   14078:	00070c80 	call	70c8 <__umodsi3>
   1407c:	a809883a 	mov	r4,r21
   14080:	e00b883a 	mov	r5,fp
   14084:	102b883a 	mov	r21,r2
   14088:	00070640 	call	7064 <__udivsi3>
   1408c:	9009883a 	mov	r4,r18
   14090:	100b883a 	mov	r5,r2
   14094:	102f883a 	mov	r23,r2
   14098:	00071240 	call	7124 <__mulsi3>
   1409c:	d8c00017 	ldw	r3,0(sp)
   140a0:	a82a943a 	slli	r21,r21,16
   140a4:	100d883a 	mov	r6,r2
   140a8:	1cbfffcc 	andi	r18,r3,65535
   140ac:	aca4b03a 	or	r18,r21,r18
   140b0:	9080062e 	bgeu	r18,r2,140cc <__udivdi3+0x4e0>
   140b4:	94e5883a 	add	r18,r18,r19
   140b8:	b8bfffc4 	addi	r2,r23,-1
   140bc:	94c04136 	bltu	r18,r19,141c4 <__udivdi3+0x5d8>
   140c0:	9180402e 	bgeu	r18,r6,141c4 <__udivdi3+0x5d8>
   140c4:	bdffff84 	addi	r23,r23,-2
   140c8:	94e5883a 	add	r18,r18,r19
   140cc:	8004943a 	slli	r2,r16,16
   140d0:	bd7fffcc 	andi	r21,r23,65535
   140d4:	b73fffcc 	andi	fp,r22,65535
   140d8:	15e0b03a 	or	r16,r2,r23
   140dc:	8026d43a 	srli	r19,r16,16
   140e0:	a809883a 	mov	r4,r21
   140e4:	e00b883a 	mov	r5,fp
   140e8:	91a5c83a 	sub	r18,r18,r6
   140ec:	b02cd43a 	srli	r22,r22,16
   140f0:	00071240 	call	7124 <__mulsi3>
   140f4:	9809883a 	mov	r4,r19
   140f8:	e00b883a 	mov	r5,fp
   140fc:	102f883a 	mov	r23,r2
   14100:	00071240 	call	7124 <__mulsi3>
   14104:	9809883a 	mov	r4,r19
   14108:	b00b883a 	mov	r5,r22
   1410c:	1027883a 	mov	r19,r2
   14110:	00071240 	call	7124 <__mulsi3>
   14114:	a809883a 	mov	r4,r21
   14118:	b00b883a 	mov	r5,r22
   1411c:	102b883a 	mov	r21,r2
   14120:	00071240 	call	7124 <__mulsi3>
   14124:	b806d43a 	srli	r3,r23,16
   14128:	14c5883a 	add	r2,r2,r19
   1412c:	1887883a 	add	r3,r3,r2
   14130:	1cc0022e 	bgeu	r3,r19,1413c <__udivdi3+0x550>
   14134:	00800074 	movhi	r2,1
   14138:	a8ab883a 	add	r21,r21,r2
   1413c:	1804d43a 	srli	r2,r3,16
   14140:	156b883a 	add	r21,r2,r21
   14144:	95400936 	bltu	r18,r21,1416c <__udivdi3+0x580>
   14148:	95400326 	beq	r18,r21,14158 <__udivdi3+0x56c>
   1414c:	8005883a 	mov	r2,r16
   14150:	0007883a 	mov	r3,zero
   14154:	003efc06 	br	13d48 <__udivdi3+0x15c>
   14158:	1806943a 	slli	r3,r3,16
   1415c:	a44c983a 	sll	r6,r20,r17
   14160:	bdffffcc 	andi	r23,r23,65535
   14164:	1dc7883a 	add	r3,r3,r23
   14168:	30fff82e 	bgeu	r6,r3,1414c <__udivdi3+0x560>
   1416c:	80bfffc4 	addi	r2,r16,-1
   14170:	0007883a 	mov	r3,zero
   14174:	003ef406 	br	13d48 <__udivdi3+0x15c>
   14178:	3804d43a 	srli	r2,r7,16
   1417c:	01000404 	movi	r4,16
   14180:	003f0306 	br	13d90 <__udivdi3+0x1a4>
   14184:	3007883a 	mov	r3,r6
   14188:	003eb106 	br	13c50 <__udivdi3+0x64>
   1418c:	0007883a 	mov	r3,zero
   14190:	00800044 	movi	r2,1
   14194:	003eec06 	br	13d48 <__udivdi3+0x15c>
   14198:	3805883a 	mov	r2,r7
   1419c:	0009883a 	mov	r4,zero
   141a0:	003efb06 	br	13d90 <__udivdi3+0x1a4>
   141a4:	8006d43a 	srli	r3,r16,16
   141a8:	04400404 	movi	r17,16
   141ac:	003f0e06 	br	13de8 <__udivdi3+0x1fc>
   141b0:	3006d43a 	srli	r3,r6,16
   141b4:	04400404 	movi	r17,16
   141b8:	003ea506 	br	13c50 <__udivdi3+0x64>
   141bc:	8007883a 	mov	r3,r16
   141c0:	003f0906 	br	13de8 <__udivdi3+0x1fc>
   141c4:	102f883a 	mov	r23,r2
   141c8:	003fc006 	br	140cc <__udivdi3+0x4e0>
   141cc:	1839883a 	mov	fp,r3
   141d0:	003f8206 	br	13fdc <__udivdi3+0x3f0>
   141d4:	2821883a 	mov	r16,r5
   141d8:	003fa406 	br	1406c <__udivdi3+0x480>
   141dc:	182f883a 	mov	r23,r3
   141e0:	003f6806 	br	13f84 <__udivdi3+0x398>
   141e4:	94bfff84 	addi	r18,r18,-2
   141e8:	003f3706 	br	13ec8 <__udivdi3+0x2dc>
   141ec:	94bfff84 	addi	r18,r18,-2
   141f0:	003ece06 	br	13d2c <__udivdi3+0x140>
   141f4:	ad7fff84 	addi	r21,r21,-2
   141f8:	2409883a 	add	r4,r4,r16
   141fc:	003eb606 	br	13cd8 <__udivdi3+0xec>
   14200:	ad7fff84 	addi	r21,r21,-2
   14204:	2409883a 	add	r4,r4,r16
   14208:	003f1806 	br	13e6c <__udivdi3+0x280>

0001420c <__umoddi3>:
   1420c:	defff304 	addi	sp,sp,-52
   14210:	dc400415 	stw	r17,16(sp)
   14214:	dc000315 	stw	r16,12(sp)
   14218:	dfc00c15 	stw	ra,48(sp)
   1421c:	df000b15 	stw	fp,44(sp)
   14220:	ddc00a15 	stw	r23,40(sp)
   14224:	dd800915 	stw	r22,36(sp)
   14228:	dd400815 	stw	r21,32(sp)
   1422c:	dd000715 	stw	r20,28(sp)
   14230:	dcc00615 	stw	r19,24(sp)
   14234:	dc800515 	stw	r18,20(sp)
   14238:	2823883a 	mov	r17,r5
   1423c:	2021883a 	mov	r16,r4
   14240:	38003b1e 	bne	r7,zero,14330 <__umoddi3+0x124>
   14244:	3825883a 	mov	r18,r7
   14248:	3029883a 	mov	r20,r6
   1424c:	2027883a 	mov	r19,r4
   14250:	29805b2e 	bgeu	r5,r6,143c0 <__umoddi3+0x1b4>
   14254:	00bfffd4 	movui	r2,65535
   14258:	282d883a 	mov	r22,r5
   1425c:	11809a2e 	bgeu	r2,r6,144c8 <__umoddi3+0x2bc>
   14260:	00804034 	movhi	r2,256
   14264:	30814436 	bltu	r6,r2,14778 <__umoddi3+0x56c>
   14268:	3006d63a 	srli	r3,r6,24
   1426c:	04800604 	movi	r18,24
   14270:	00800074 	movhi	r2,1
   14274:	1885883a 	add	r2,r3,r2
   14278:	109f2503 	ldbu	r2,31892(r2)
   1427c:	00c00804 	movi	r3,32
   14280:	1485883a 	add	r2,r2,r18
   14284:	18a5c83a 	sub	r18,r3,r2
   14288:	18800526 	beq	r3,r2,142a0 <__umoddi3+0x94>
   1428c:	8ca2983a 	sll	r17,r17,r18
   14290:	8084d83a 	srl	r2,r16,r2
   14294:	34a8983a 	sll	r20,r6,r18
   14298:	84a6983a 	sll	r19,r16,r18
   1429c:	146cb03a 	or	r22,r2,r17
   142a0:	a02ed43a 	srli	r23,r20,16
   142a4:	b009883a 	mov	r4,r22
   142a8:	a57fffcc 	andi	r21,r20,65535
   142ac:	b80b883a 	mov	r5,r23
   142b0:	00070c80 	call	70c8 <__umodsi3>
   142b4:	b80b883a 	mov	r5,r23
   142b8:	b009883a 	mov	r4,r22
   142bc:	1023883a 	mov	r17,r2
   142c0:	00070640 	call	7064 <__udivsi3>
   142c4:	a809883a 	mov	r4,r21
   142c8:	100b883a 	mov	r5,r2
   142cc:	00071240 	call	7124 <__mulsi3>
   142d0:	8822943a 	slli	r17,r17,16
   142d4:	9808d43a 	srli	r4,r19,16
   142d8:	8908b03a 	or	r4,r17,r4
   142dc:	2080042e 	bgeu	r4,r2,142f0 <__umoddi3+0xe4>
   142e0:	2509883a 	add	r4,r4,r20
   142e4:	25000236 	bltu	r4,r20,142f0 <__umoddi3+0xe4>
   142e8:	2080012e 	bgeu	r4,r2,142f0 <__umoddi3+0xe4>
   142ec:	2509883a 	add	r4,r4,r20
   142f0:	20a1c83a 	sub	r16,r4,r2
   142f4:	b80b883a 	mov	r5,r23
   142f8:	8009883a 	mov	r4,r16
   142fc:	00070c80 	call	70c8 <__umodsi3>
   14300:	b80b883a 	mov	r5,r23
   14304:	8009883a 	mov	r4,r16
   14308:	1023883a 	mov	r17,r2
   1430c:	00070640 	call	7064 <__udivsi3>
   14310:	8822943a 	slli	r17,r17,16
   14314:	100b883a 	mov	r5,r2
   14318:	a809883a 	mov	r4,r21
   1431c:	00071240 	call	7124 <__mulsi3>
   14320:	98ffffcc 	andi	r3,r19,65535
   14324:	88c6b03a 	or	r3,r17,r3
   14328:	18805e2e 	bgeu	r3,r2,144a4 <__umoddi3+0x298>
   1432c:	00005906 	br	14494 <__umoddi3+0x288>
   14330:	2005883a 	mov	r2,r4
   14334:	29c00d2e 	bgeu	r5,r7,1436c <__umoddi3+0x160>
   14338:	2807883a 	mov	r3,r5
   1433c:	dfc00c17 	ldw	ra,48(sp)
   14340:	df000b17 	ldw	fp,44(sp)
   14344:	ddc00a17 	ldw	r23,40(sp)
   14348:	dd800917 	ldw	r22,36(sp)
   1434c:	dd400817 	ldw	r21,32(sp)
   14350:	dd000717 	ldw	r20,28(sp)
   14354:	dcc00617 	ldw	r19,24(sp)
   14358:	dc800517 	ldw	r18,20(sp)
   1435c:	dc400417 	ldw	r17,16(sp)
   14360:	dc000317 	ldw	r16,12(sp)
   14364:	dec00d04 	addi	sp,sp,52
   14368:	f800283a 	ret
   1436c:	013fffd4 	movui	r4,65535
   14370:	2807883a 	mov	r3,r5
   14374:	21c0592e 	bgeu	r4,r7,144dc <__umoddi3+0x2d0>
   14378:	01004034 	movhi	r4,256
   1437c:	39010336 	bltu	r7,r4,1478c <__umoddi3+0x580>
   14380:	3808d63a 	srli	r4,r7,24
   14384:	02000604 	movi	r8,24
   14388:	01400074 	movhi	r5,1
   1438c:	214b883a 	add	r5,r4,r5
   14390:	2d1f2503 	ldbu	r20,31892(r5)
   14394:	01000804 	movi	r4,32
   14398:	a229883a 	add	r20,r20,r8
   1439c:	252bc83a 	sub	r21,r4,r20
   143a0:	2500531e 	bne	r4,r20,144f0 <__umoddi3+0x2e4>
   143a4:	3c400136 	bltu	r7,r17,143ac <__umoddi3+0x1a0>
   143a8:	81bfe436 	bltu	r16,r6,1433c <__umoddi3+0x130>
   143ac:	8185c83a 	sub	r2,r16,r6
   143b0:	89cfc83a 	sub	r7,r17,r7
   143b4:	8087803a 	cmpltu	r3,r16,r2
   143b8:	38c7c83a 	sub	r3,r7,r3
   143bc:	003fdf06 	br	1433c <__umoddi3+0x130>
   143c0:	3000041e 	bne	r6,zero,143d4 <__umoddi3+0x1c8>
   143c4:	000b883a 	mov	r5,zero
   143c8:	01000044 	movi	r4,1
   143cc:	00070640 	call	7064 <__udivsi3>
   143d0:	1029883a 	mov	r20,r2
   143d4:	00bfffd4 	movui	r2,65535
   143d8:	1500362e 	bgeu	r2,r20,144b4 <__umoddi3+0x2a8>
   143dc:	00804034 	movhi	r2,256
   143e0:	a080ed36 	bltu	r20,r2,14798 <__umoddi3+0x58c>
   143e4:	a006d63a 	srli	r3,r20,24
   143e8:	04800604 	movi	r18,24
   143ec:	00800074 	movhi	r2,1
   143f0:	1885883a 	add	r2,r3,r2
   143f4:	159f2503 	ldbu	r22,31892(r2)
   143f8:	00800804 	movi	r2,32
   143fc:	b4ad883a 	add	r22,r22,r18
   14400:	15a5c83a 	sub	r18,r2,r22
   14404:	1580a51e 	bne	r2,r22,1469c <__umoddi3+0x490>
   14408:	a02ed43a 	srli	r23,r20,16
   1440c:	8d23c83a 	sub	r17,r17,r20
   14410:	a57fffcc 	andi	r21,r20,65535
   14414:	8809883a 	mov	r4,r17
   14418:	b80b883a 	mov	r5,r23
   1441c:	00070c80 	call	70c8 <__umodsi3>
   14420:	8809883a 	mov	r4,r17
   14424:	b80b883a 	mov	r5,r23
   14428:	1023883a 	mov	r17,r2
   1442c:	00070640 	call	7064 <__udivsi3>
   14430:	1009883a 	mov	r4,r2
   14434:	a80b883a 	mov	r5,r21
   14438:	00071240 	call	7124 <__mulsi3>
   1443c:	8822943a 	slli	r17,r17,16
   14440:	9808d43a 	srli	r4,r19,16
   14444:	8908b03a 	or	r4,r17,r4
   14448:	2080032e 	bgeu	r4,r2,14458 <__umoddi3+0x24c>
   1444c:	2509883a 	add	r4,r4,r20
   14450:	25000136 	bltu	r4,r20,14458 <__umoddi3+0x24c>
   14454:	2080dc36 	bltu	r4,r2,147c8 <__umoddi3+0x5bc>
   14458:	20a1c83a 	sub	r16,r4,r2
   1445c:	b80b883a 	mov	r5,r23
   14460:	8009883a 	mov	r4,r16
   14464:	00070c80 	call	70c8 <__umodsi3>
   14468:	b80b883a 	mov	r5,r23
   1446c:	8009883a 	mov	r4,r16
   14470:	1023883a 	mov	r17,r2
   14474:	8822943a 	slli	r17,r17,16
   14478:	00070640 	call	7064 <__udivsi3>
   1447c:	a80b883a 	mov	r5,r21
   14480:	1009883a 	mov	r4,r2
   14484:	00071240 	call	7124 <__mulsi3>
   14488:	9cffffcc 	andi	r19,r19,65535
   1448c:	8cc6b03a 	or	r3,r17,r19
   14490:	1880042e 	bgeu	r3,r2,144a4 <__umoddi3+0x298>
   14494:	1d07883a 	add	r3,r3,r20
   14498:	1d000236 	bltu	r3,r20,144a4 <__umoddi3+0x298>
   1449c:	1880012e 	bgeu	r3,r2,144a4 <__umoddi3+0x298>
   144a0:	1d07883a 	add	r3,r3,r20
   144a4:	1885c83a 	sub	r2,r3,r2
   144a8:	1484d83a 	srl	r2,r2,r18
   144ac:	0007883a 	mov	r3,zero
   144b0:	003fa206 	br	1433c <__umoddi3+0x130>
   144b4:	a0804030 	cmpltui	r2,r20,256
   144b8:	1000ba1e 	bne	r2,zero,147a4 <__umoddi3+0x598>
   144bc:	a006d23a 	srli	r3,r20,8
   144c0:	04800204 	movi	r18,8
   144c4:	003fc906 	br	143ec <__umoddi3+0x1e0>
   144c8:	30804030 	cmpltui	r2,r6,256
   144cc:	1000ad1e 	bne	r2,zero,14784 <__umoddi3+0x578>
   144d0:	3006d23a 	srli	r3,r6,8
   144d4:	04800204 	movi	r18,8
   144d8:	003f6506 	br	14270 <__umoddi3+0x64>
   144dc:	39004030 	cmpltui	r4,r7,256
   144e0:	2000b21e 	bne	r4,zero,147ac <__umoddi3+0x5a0>
   144e4:	3808d23a 	srli	r4,r7,8
   144e8:	02000204 	movi	r8,8
   144ec:	003fa606 	br	14388 <__umoddi3+0x17c>
   144f0:	3d4e983a 	sll	r7,r7,r21
   144f4:	3508d83a 	srl	r4,r6,r20
   144f8:	8d2cd83a 	srl	r22,r17,r20
   144fc:	8504d83a 	srl	r2,r16,r20
   14500:	21e4b03a 	or	r18,r4,r7
   14504:	8d62983a 	sll	r17,r17,r21
   14508:	9026d43a 	srli	r19,r18,16
   1450c:	354c983a 	sll	r6,r6,r21
   14510:	1444b03a 	or	r2,r2,r17
   14514:	b009883a 	mov	r4,r22
   14518:	980b883a 	mov	r5,r19
   1451c:	d9800115 	stw	r6,4(sp)
   14520:	d8800015 	stw	r2,0(sp)
   14524:	00070c80 	call	70c8 <__umodsi3>
   14528:	980b883a 	mov	r5,r19
   1452c:	b009883a 	mov	r4,r22
   14530:	102f883a 	mov	r23,r2
   14534:	947fffcc 	andi	r17,r18,65535
   14538:	00070640 	call	7064 <__udivsi3>
   1453c:	8809883a 	mov	r4,r17
   14540:	100b883a 	mov	r5,r2
   14544:	1039883a 	mov	fp,r2
   14548:	00071240 	call	7124 <__mulsi3>
   1454c:	d8c00017 	ldw	r3,0(sp)
   14550:	b82e943a 	slli	r23,r23,16
   14554:	8560983a 	sll	r16,r16,r21
   14558:	1808d43a 	srli	r4,r3,16
   1455c:	b908b03a 	or	r4,r23,r4
   14560:	2080062e 	bgeu	r4,r2,1457c <__umoddi3+0x370>
   14564:	2489883a 	add	r4,r4,r18
   14568:	e17fffc4 	addi	r5,fp,-1
   1456c:	24809436 	bltu	r4,r18,147c0 <__umoddi3+0x5b4>
   14570:	2080932e 	bgeu	r4,r2,147c0 <__umoddi3+0x5b4>
   14574:	e73fff84 	addi	fp,fp,-2
   14578:	2489883a 	add	r4,r4,r18
   1457c:	20adc83a 	sub	r22,r4,r2
   14580:	980b883a 	mov	r5,r19
   14584:	b009883a 	mov	r4,r22
   14588:	00070c80 	call	70c8 <__umodsi3>
   1458c:	980b883a 	mov	r5,r19
   14590:	b009883a 	mov	r4,r22
   14594:	102f883a 	mov	r23,r2
   14598:	00070640 	call	7064 <__udivsi3>
   1459c:	100b883a 	mov	r5,r2
   145a0:	8809883a 	mov	r4,r17
   145a4:	d8800215 	stw	r2,8(sp)
   145a8:	00071240 	call	7124 <__mulsi3>
   145ac:	d8c00017 	ldw	r3,0(sp)
   145b0:	b82e943a 	slli	r23,r23,16
   145b4:	d9400217 	ldw	r5,8(sp)
   145b8:	1c7fffcc 	andi	r17,r3,65535
   145bc:	bc62b03a 	or	r17,r23,r17
   145c0:	8880062e 	bgeu	r17,r2,145dc <__umoddi3+0x3d0>
   145c4:	8ca3883a 	add	r17,r17,r18
   145c8:	28ffffc4 	addi	r3,r5,-1
   145cc:	8c807a36 	bltu	r17,r18,147b8 <__umoddi3+0x5ac>
   145d0:	8880792e 	bgeu	r17,r2,147b8 <__umoddi3+0x5ac>
   145d4:	297fff84 	addi	r5,r5,-2
   145d8:	8ca3883a 	add	r17,r17,r18
   145dc:	e02c943a 	slli	r22,fp,16
   145e0:	d9c00117 	ldw	r7,4(sp)
   145e4:	29bfffcc 	andi	r6,r5,65535
   145e8:	b16cb03a 	or	r22,r22,r5
   145ec:	38ffffcc 	andi	r3,r7,65535
   145f0:	b02cd43a 	srli	r22,r22,16
   145f4:	180b883a 	mov	r5,r3
   145f8:	3009883a 	mov	r4,r6
   145fc:	3838d43a 	srli	fp,r7,16
   14600:	182f883a 	mov	r23,r3
   14604:	d9800015 	stw	r6,0(sp)
   14608:	88a3c83a 	sub	r17,r17,r2
   1460c:	00071240 	call	7124 <__mulsi3>
   14610:	b80b883a 	mov	r5,r23
   14614:	b009883a 	mov	r4,r22
   14618:	102f883a 	mov	r23,r2
   1461c:	00071240 	call	7124 <__mulsi3>
   14620:	e00b883a 	mov	r5,fp
   14624:	b009883a 	mov	r4,r22
   14628:	102d883a 	mov	r22,r2
   1462c:	00071240 	call	7124 <__mulsi3>
   14630:	d9800017 	ldw	r6,0(sp)
   14634:	e00b883a 	mov	r5,fp
   14638:	1039883a 	mov	fp,r2
   1463c:	3009883a 	mov	r4,r6
   14640:	00071240 	call	7124 <__mulsi3>
   14644:	b808d43a 	srli	r4,r23,16
   14648:	1585883a 	add	r2,r2,r22
   1464c:	2089883a 	add	r4,r4,r2
   14650:	2580022e 	bgeu	r4,r22,1465c <__umoddi3+0x450>
   14654:	00800074 	movhi	r2,1
   14658:	e0b9883a 	add	fp,fp,r2
   1465c:	2006d43a 	srli	r3,r4,16
   14660:	2008943a 	slli	r4,r4,16
   14664:	bdffffcc 	andi	r23,r23,65535
   14668:	1f07883a 	add	r3,r3,fp
   1466c:	25c9883a 	add	r4,r4,r23
   14670:	88c03a36 	bltu	r17,r3,1475c <__umoddi3+0x550>
   14674:	88c03826 	beq	r17,r3,14758 <__umoddi3+0x54c>
   14678:	8109c83a 	sub	r4,r16,r4
   1467c:	8121803a 	cmpltu	r16,r16,r4
   14680:	88c7c83a 	sub	r3,r17,r3
   14684:	1c07c83a 	sub	r3,r3,r16
   14688:	1d04983a 	sll	r2,r3,r20
   1468c:	2548d83a 	srl	r4,r4,r21
   14690:	1d46d83a 	srl	r3,r3,r21
   14694:	1104b03a 	or	r2,r2,r4
   14698:	003f2806 	br	1433c <__umoddi3+0x130>
   1469c:	a4a8983a 	sll	r20,r20,r18
   146a0:	8da6d83a 	srl	r19,r17,r22
   146a4:	8ca2983a 	sll	r17,r17,r18
   146a8:	a02ed43a 	srli	r23,r20,16
   146ac:	9809883a 	mov	r4,r19
   146b0:	85acd83a 	srl	r22,r16,r22
   146b4:	b80b883a 	mov	r5,r23
   146b8:	00070c80 	call	70c8 <__umodsi3>
   146bc:	9809883a 	mov	r4,r19
   146c0:	b80b883a 	mov	r5,r23
   146c4:	b46cb03a 	or	r22,r22,r17
   146c8:	a57fffcc 	andi	r21,r20,65535
   146cc:	1023883a 	mov	r17,r2
   146d0:	00070640 	call	7064 <__udivsi3>
   146d4:	a809883a 	mov	r4,r21
   146d8:	100b883a 	mov	r5,r2
   146dc:	00071240 	call	7124 <__mulsi3>
   146e0:	8822943a 	slli	r17,r17,16
   146e4:	b008d43a 	srli	r4,r22,16
   146e8:	84a6983a 	sll	r19,r16,r18
   146ec:	8908b03a 	or	r4,r17,r4
   146f0:	2080042e 	bgeu	r4,r2,14704 <__umoddi3+0x4f8>
   146f4:	2509883a 	add	r4,r4,r20
   146f8:	25000236 	bltu	r4,r20,14704 <__umoddi3+0x4f8>
   146fc:	2080012e 	bgeu	r4,r2,14704 <__umoddi3+0x4f8>
   14700:	2509883a 	add	r4,r4,r20
   14704:	20a1c83a 	sub	r16,r4,r2
   14708:	8009883a 	mov	r4,r16
   1470c:	b80b883a 	mov	r5,r23
   14710:	00070c80 	call	70c8 <__umodsi3>
   14714:	8009883a 	mov	r4,r16
   14718:	1021883a 	mov	r16,r2
   1471c:	b80b883a 	mov	r5,r23
   14720:	8020943a 	slli	r16,r16,16
   14724:	00070640 	call	7064 <__udivsi3>
   14728:	100b883a 	mov	r5,r2
   1472c:	a809883a 	mov	r4,r21
   14730:	b47fffcc 	andi	r17,r22,65535
   14734:	00071240 	call	7124 <__mulsi3>
   14738:	8462b03a 	or	r17,r16,r17
   1473c:	8880042e 	bgeu	r17,r2,14750 <__umoddi3+0x544>
   14740:	8d23883a 	add	r17,r17,r20
   14744:	8d000236 	bltu	r17,r20,14750 <__umoddi3+0x544>
   14748:	8880012e 	bgeu	r17,r2,14750 <__umoddi3+0x544>
   1474c:	8d23883a 	add	r17,r17,r20
   14750:	88a3c83a 	sub	r17,r17,r2
   14754:	003f2f06 	br	14414 <__umoddi3+0x208>
   14758:	813fc72e 	bgeu	r16,r4,14678 <__umoddi3+0x46c>
   1475c:	d8800117 	ldw	r2,4(sp)
   14760:	20a7c83a 	sub	r19,r4,r2
   14764:	24c9803a 	cmpltu	r4,r4,r19
   14768:	2489883a 	add	r4,r4,r18
   1476c:	1907c83a 	sub	r3,r3,r4
   14770:	9809883a 	mov	r4,r19
   14774:	003fc006 	br	14678 <__umoddi3+0x46c>
   14778:	3006d43a 	srli	r3,r6,16
   1477c:	04800404 	movi	r18,16
   14780:	003ebb06 	br	14270 <__umoddi3+0x64>
   14784:	3007883a 	mov	r3,r6
   14788:	003eb906 	br	14270 <__umoddi3+0x64>
   1478c:	3808d43a 	srli	r4,r7,16
   14790:	02000404 	movi	r8,16
   14794:	003efc06 	br	14388 <__umoddi3+0x17c>
   14798:	a006d43a 	srli	r3,r20,16
   1479c:	04800404 	movi	r18,16
   147a0:	003f1206 	br	143ec <__umoddi3+0x1e0>
   147a4:	a007883a 	mov	r3,r20
   147a8:	003f1006 	br	143ec <__umoddi3+0x1e0>
   147ac:	3809883a 	mov	r4,r7
   147b0:	0011883a 	mov	r8,zero
   147b4:	003ef406 	br	14388 <__umoddi3+0x17c>
   147b8:	180b883a 	mov	r5,r3
   147bc:	003f8706 	br	145dc <__umoddi3+0x3d0>
   147c0:	2839883a 	mov	fp,r5
   147c4:	003f6d06 	br	1457c <__umoddi3+0x370>
   147c8:	2509883a 	add	r4,r4,r20
   147cc:	003f2206 	br	14458 <__umoddi3+0x24c>

000147d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   147d0:	defffe04 	addi	sp,sp,-8
   147d4:	dfc00115 	stw	ra,4(sp)
   147d8:	df000015 	stw	fp,0(sp)
   147dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   147e0:	d0a00917 	ldw	r2,-32732(gp)
   147e4:	10000326 	beq	r2,zero,147f4 <alt_get_errno+0x24>
   147e8:	d0a00917 	ldw	r2,-32732(gp)
   147ec:	103ee83a 	callr	r2
   147f0:	00000106 	br	147f8 <alt_get_errno+0x28>
   147f4:	d0a73504 	addi	r2,gp,-25388
}
   147f8:	e037883a 	mov	sp,fp
   147fc:	dfc00117 	ldw	ra,4(sp)
   14800:	df000017 	ldw	fp,0(sp)
   14804:	dec00204 	addi	sp,sp,8
   14808:	f800283a 	ret

0001480c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1480c:	defffb04 	addi	sp,sp,-20
   14810:	dfc00415 	stw	ra,16(sp)
   14814:	df000315 	stw	fp,12(sp)
   14818:	df000304 	addi	fp,sp,12
   1481c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   14820:	e0bffd17 	ldw	r2,-12(fp)
   14824:	10000916 	blt	r2,zero,1484c <close+0x40>
   14828:	e0fffd17 	ldw	r3,-12(fp)
   1482c:	1805883a 	mov	r2,r3
   14830:	1085883a 	add	r2,r2,r2
   14834:	10c5883a 	add	r2,r2,r3
   14838:	100490ba 	slli	r2,r2,2
   1483c:	00c000b4 	movhi	r3,2
   14840:	18e33e04 	addi	r3,r3,-29448
   14844:	10c5883a 	add	r2,r2,r3
   14848:	00000106 	br	14850 <close+0x44>
   1484c:	0005883a 	mov	r2,zero
   14850:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   14854:	e0bfff17 	ldw	r2,-4(fp)
   14858:	10001926 	beq	r2,zero,148c0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1485c:	e0bfff17 	ldw	r2,-4(fp)
   14860:	10800017 	ldw	r2,0(r2)
   14864:	10800417 	ldw	r2,16(r2)
   14868:	10000626 	beq	r2,zero,14884 <close+0x78>
   1486c:	e0bfff17 	ldw	r2,-4(fp)
   14870:	10800017 	ldw	r2,0(r2)
   14874:	10800417 	ldw	r2,16(r2)
   14878:	e13fff17 	ldw	r4,-4(fp)
   1487c:	103ee83a 	callr	r2
   14880:	00000106 	br	14888 <close+0x7c>
   14884:	0005883a 	mov	r2,zero
   14888:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1488c:	e13ffd17 	ldw	r4,-12(fp)
   14890:	00153240 	call	15324 <alt_release_fd>
    if (rval < 0)
   14894:	e0bffe17 	ldw	r2,-8(fp)
   14898:	1000070e 	bge	r2,zero,148b8 <close+0xac>
    {
      ALT_ERRNO = -rval;
   1489c:	00147d00 	call	147d0 <alt_get_errno>
   148a0:	1007883a 	mov	r3,r2
   148a4:	e0bffe17 	ldw	r2,-8(fp)
   148a8:	0085c83a 	sub	r2,zero,r2
   148ac:	18800015 	stw	r2,0(r3)
      return -1;
   148b0:	00bfffc4 	movi	r2,-1
   148b4:	00000706 	br	148d4 <close+0xc8>
    }
    return 0;
   148b8:	0005883a 	mov	r2,zero
   148bc:	00000506 	br	148d4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   148c0:	00147d00 	call	147d0 <alt_get_errno>
   148c4:	1007883a 	mov	r3,r2
   148c8:	00801444 	movi	r2,81
   148cc:	18800015 	stw	r2,0(r3)
    return -1;
   148d0:	00bfffc4 	movi	r2,-1
  }
}
   148d4:	e037883a 	mov	sp,fp
   148d8:	dfc00117 	ldw	ra,4(sp)
   148dc:	df000017 	ldw	fp,0(sp)
   148e0:	dec00204 	addi	sp,sp,8
   148e4:	f800283a 	ret

000148e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   148e8:	defffc04 	addi	sp,sp,-16
   148ec:	df000315 	stw	fp,12(sp)
   148f0:	df000304 	addi	fp,sp,12
   148f4:	e13fff15 	stw	r4,-4(fp)
   148f8:	e17ffe15 	stw	r5,-8(fp)
   148fc:	e1bffd15 	stw	r6,-12(fp)
  return len;
   14900:	e0bffd17 	ldw	r2,-12(fp)
}
   14904:	e037883a 	mov	sp,fp
   14908:	df000017 	ldw	fp,0(sp)
   1490c:	dec00104 	addi	sp,sp,4
   14910:	f800283a 	ret

00014914 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14914:	defffd04 	addi	sp,sp,-12
   14918:	df000215 	stw	fp,8(sp)
   1491c:	df000204 	addi	fp,sp,8
   14920:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14924:	0001883a 	nop
   14928:	e0bffe17 	ldw	r2,-8(fp)
   1492c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14930:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14934:	10000226 	beq	r2,zero,14940 <_exit+0x2c>
    ALT_SIM_FAIL();
   14938:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   1493c:	00000106 	br	14944 <_exit+0x30>
    ALT_SIM_PASS();
   14940:	002af0b0 	cmpltui	zero,zero,43970
}
   14944:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14948:	003fff06 	br	14948 <_exit+0x34>

0001494c <alt_get_errno>:
{
   1494c:	defffe04 	addi	sp,sp,-8
   14950:	dfc00115 	stw	ra,4(sp)
   14954:	df000015 	stw	fp,0(sp)
   14958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1495c:	d0a00917 	ldw	r2,-32732(gp)
   14960:	10000326 	beq	r2,zero,14970 <alt_get_errno+0x24>
   14964:	d0a00917 	ldw	r2,-32732(gp)
   14968:	103ee83a 	callr	r2
   1496c:	00000106 	br	14974 <alt_get_errno+0x28>
   14970:	d0a73504 	addi	r2,gp,-25388
}
   14974:	e037883a 	mov	sp,fp
   14978:	dfc00117 	ldw	ra,4(sp)
   1497c:	df000017 	ldw	fp,0(sp)
   14980:	dec00204 	addi	sp,sp,8
   14984:	f800283a 	ret

00014988 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   14988:	defffb04 	addi	sp,sp,-20
   1498c:	dfc00415 	stw	ra,16(sp)
   14990:	df000315 	stw	fp,12(sp)
   14994:	df000304 	addi	fp,sp,12
   14998:	e13ffe15 	stw	r4,-8(fp)
   1499c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   149a0:	e0bffe17 	ldw	r2,-8(fp)
   149a4:	10000916 	blt	r2,zero,149cc <fstat+0x44>
   149a8:	e0fffe17 	ldw	r3,-8(fp)
   149ac:	1805883a 	mov	r2,r3
   149b0:	1085883a 	add	r2,r2,r2
   149b4:	10c5883a 	add	r2,r2,r3
   149b8:	100490ba 	slli	r2,r2,2
   149bc:	00c000b4 	movhi	r3,2
   149c0:	18e33e04 	addi	r3,r3,-29448
   149c4:	10c5883a 	add	r2,r2,r3
   149c8:	00000106 	br	149d0 <fstat+0x48>
   149cc:	0005883a 	mov	r2,zero
   149d0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   149d4:	e0bfff17 	ldw	r2,-4(fp)
   149d8:	10001026 	beq	r2,zero,14a1c <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   149dc:	e0bfff17 	ldw	r2,-4(fp)
   149e0:	10800017 	ldw	r2,0(r2)
   149e4:	10800817 	ldw	r2,32(r2)
   149e8:	10000726 	beq	r2,zero,14a08 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   149ec:	e0bfff17 	ldw	r2,-4(fp)
   149f0:	10800017 	ldw	r2,0(r2)
   149f4:	10800817 	ldw	r2,32(r2)
   149f8:	e17ffd17 	ldw	r5,-12(fp)
   149fc:	e13fff17 	ldw	r4,-4(fp)
   14a00:	103ee83a 	callr	r2
   14a04:	00000a06 	br	14a30 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   14a08:	e0bffd17 	ldw	r2,-12(fp)
   14a0c:	00c80004 	movi	r3,8192
   14a10:	10c00115 	stw	r3,4(r2)
      return 0;
   14a14:	0005883a 	mov	r2,zero
   14a18:	00000506 	br	14a30 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14a1c:	001494c0 	call	1494c <alt_get_errno>
   14a20:	1007883a 	mov	r3,r2
   14a24:	00801444 	movi	r2,81
   14a28:	18800015 	stw	r2,0(r3)
    return -1;
   14a2c:	00bfffc4 	movi	r2,-1
  }
}
   14a30:	e037883a 	mov	sp,fp
   14a34:	dfc00117 	ldw	ra,4(sp)
   14a38:	df000017 	ldw	fp,0(sp)
   14a3c:	dec00204 	addi	sp,sp,8
   14a40:	f800283a 	ret

00014a44 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   14a44:	deffff04 	addi	sp,sp,-4
   14a48:	df000015 	stw	fp,0(sp)
   14a4c:	d839883a 	mov	fp,sp
  return 0;
   14a50:	0005883a 	mov	r2,zero
}
   14a54:	e037883a 	mov	sp,fp
   14a58:	df000017 	ldw	fp,0(sp)
   14a5c:	dec00104 	addi	sp,sp,4
   14a60:	f800283a 	ret

00014a64 <alt_get_errno>:
{
   14a64:	defffe04 	addi	sp,sp,-8
   14a68:	dfc00115 	stw	ra,4(sp)
   14a6c:	df000015 	stw	fp,0(sp)
   14a70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14a74:	d0a00917 	ldw	r2,-32732(gp)
   14a78:	10000326 	beq	r2,zero,14a88 <alt_get_errno+0x24>
   14a7c:	d0a00917 	ldw	r2,-32732(gp)
   14a80:	103ee83a 	callr	r2
   14a84:	00000106 	br	14a8c <alt_get_errno+0x28>
   14a88:	d0a73504 	addi	r2,gp,-25388
}
   14a8c:	e037883a 	mov	sp,fp
   14a90:	dfc00117 	ldw	ra,4(sp)
   14a94:	df000017 	ldw	fp,0(sp)
   14a98:	dec00204 	addi	sp,sp,8
   14a9c:	f800283a 	ret

00014aa0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   14aa0:	deffea04 	addi	sp,sp,-88
   14aa4:	dfc01515 	stw	ra,84(sp)
   14aa8:	df001415 	stw	fp,80(sp)
   14aac:	df001404 	addi	fp,sp,80
   14ab0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14ab4:	e0bfec17 	ldw	r2,-80(fp)
   14ab8:	10000916 	blt	r2,zero,14ae0 <isatty+0x40>
   14abc:	e0ffec17 	ldw	r3,-80(fp)
   14ac0:	1805883a 	mov	r2,r3
   14ac4:	1085883a 	add	r2,r2,r2
   14ac8:	10c5883a 	add	r2,r2,r3
   14acc:	100490ba 	slli	r2,r2,2
   14ad0:	00c000b4 	movhi	r3,2
   14ad4:	18e33e04 	addi	r3,r3,-29448
   14ad8:	10c5883a 	add	r2,r2,r3
   14adc:	00000106 	br	14ae4 <isatty+0x44>
   14ae0:	0005883a 	mov	r2,zero
   14ae4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   14ae8:	e0bfff17 	ldw	r2,-4(fp)
   14aec:	10000e26 	beq	r2,zero,14b28 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   14af0:	e0bfff17 	ldw	r2,-4(fp)
   14af4:	10800017 	ldw	r2,0(r2)
   14af8:	10800817 	ldw	r2,32(r2)
   14afc:	1000021e 	bne	r2,zero,14b08 <isatty+0x68>
    {
      return 1;
   14b00:	00800044 	movi	r2,1
   14b04:	00000d06 	br	14b3c <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   14b08:	e0bfed04 	addi	r2,fp,-76
   14b0c:	100b883a 	mov	r5,r2
   14b10:	e13fec17 	ldw	r4,-80(fp)
   14b14:	00149880 	call	14988 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   14b18:	e0bfee17 	ldw	r2,-72(fp)
   14b1c:	10880020 	cmpeqi	r2,r2,8192
   14b20:	10803fcc 	andi	r2,r2,255
   14b24:	00000506 	br	14b3c <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14b28:	0014a640 	call	14a64 <alt_get_errno>
   14b2c:	1007883a 	mov	r3,r2
   14b30:	00801444 	movi	r2,81
   14b34:	18800015 	stw	r2,0(r3)
    return 0;
   14b38:	0005883a 	mov	r2,zero
  }
}
   14b3c:	e037883a 	mov	sp,fp
   14b40:	dfc00117 	ldw	ra,4(sp)
   14b44:	df000017 	ldw	fp,0(sp)
   14b48:	dec00204 	addi	sp,sp,8
   14b4c:	f800283a 	ret

00014b50 <alt_get_errno>:
{
   14b50:	defffe04 	addi	sp,sp,-8
   14b54:	dfc00115 	stw	ra,4(sp)
   14b58:	df000015 	stw	fp,0(sp)
   14b5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14b60:	d0a00917 	ldw	r2,-32732(gp)
   14b64:	10000326 	beq	r2,zero,14b74 <alt_get_errno+0x24>
   14b68:	d0a00917 	ldw	r2,-32732(gp)
   14b6c:	103ee83a 	callr	r2
   14b70:	00000106 	br	14b78 <alt_get_errno+0x28>
   14b74:	d0a73504 	addi	r2,gp,-25388
}
   14b78:	e037883a 	mov	sp,fp
   14b7c:	dfc00117 	ldw	ra,4(sp)
   14b80:	df000017 	ldw	fp,0(sp)
   14b84:	dec00204 	addi	sp,sp,8
   14b88:	f800283a 	ret

00014b8c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   14b8c:	defffb04 	addi	sp,sp,-20
   14b90:	dfc00415 	stw	ra,16(sp)
   14b94:	df000315 	stw	fp,12(sp)
   14b98:	df000304 	addi	fp,sp,12
   14b9c:	e13ffe15 	stw	r4,-8(fp)
   14ba0:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   14ba4:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   14ba8:	e0bffe17 	ldw	r2,-8(fp)
   14bac:	00802e16 	blt	zero,r2,14c68 <kill+0xdc>
  {
    switch (sig)
   14bb0:	e0bffd17 	ldw	r2,-12(fp)
   14bb4:	10800828 	cmpgeui	r2,r2,32
   14bb8:	1000281e 	bne	r2,zero,14c5c <kill+0xd0>
   14bbc:	e0bffd17 	ldw	r2,-12(fp)
   14bc0:	100690ba 	slli	r3,r2,2
   14bc4:	00800074 	movhi	r2,1
   14bc8:	1885883a 	add	r2,r3,r2
   14bcc:	1092f517 	ldw	r2,19412(r2)
   14bd0:	1000683a 	jmp	r2
   14bd4:	00014c7c 	xorhi	zero,zero,1329
   14bd8:	00014c5c 	xori	zero,zero,1329
   14bdc:	00014c5c 	xori	zero,zero,1329
   14be0:	00014c54 	movui	zero,1329
   14be4:	00014c54 	movui	zero,1329
   14be8:	00014c54 	movui	zero,1329
   14bec:	00014c54 	movui	zero,1329
   14bf0:	00014c5c 	xori	zero,zero,1329
   14bf4:	00014c54 	movui	zero,1329
   14bf8:	00014c54 	movui	zero,1329
   14bfc:	00014c54 	movui	zero,1329
   14c00:	00014c54 	movui	zero,1329
   14c04:	00014c54 	movui	zero,1329
   14c08:	00014c54 	movui	zero,1329
   14c0c:	00014c54 	movui	zero,1329
   14c10:	00014c54 	movui	zero,1329
   14c14:	00014c7c 	xorhi	zero,zero,1329
   14c18:	00014c5c 	xori	zero,zero,1329
   14c1c:	00014c5c 	xori	zero,zero,1329
   14c20:	00014c5c 	xori	zero,zero,1329
   14c24:	00014c7c 	xorhi	zero,zero,1329
   14c28:	00014c5c 	xori	zero,zero,1329
   14c2c:	00014c5c 	xori	zero,zero,1329
   14c30:	00014c54 	movui	zero,1329
   14c34:	00014c54 	movui	zero,1329
   14c38:	00014c54 	movui	zero,1329
   14c3c:	00014c54 	movui	zero,1329
   14c40:	00014c54 	movui	zero,1329
   14c44:	00014c5c 	xori	zero,zero,1329
   14c48:	00014c5c 	xori	zero,zero,1329
   14c4c:	00014c54 	movui	zero,1329
   14c50:	00014c54 	movui	zero,1329
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   14c54:	0009883a 	mov	r4,zero
   14c58:	00149140 	call	14914 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   14c5c:	00800584 	movi	r2,22
   14c60:	e0bfff15 	stw	r2,-4(fp)
   14c64:	00000606 	br	14c80 <kill+0xf4>
    }
  }

  else if (pid > 0)
   14c68:	e0bffe17 	ldw	r2,-8(fp)
   14c6c:	0080040e 	bge	zero,r2,14c80 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   14c70:	008000c4 	movi	r2,3
   14c74:	e0bfff15 	stw	r2,-4(fp)
   14c78:	00000106 	br	14c80 <kill+0xf4>
      break;
   14c7c:	0001883a 	nop
  }

  if (status)
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	10000626 	beq	r2,zero,14ca0 <kill+0x114>
  {
    ALT_ERRNO = status;
   14c88:	0014b500 	call	14b50 <alt_get_errno>
   14c8c:	1007883a 	mov	r3,r2
   14c90:	e0bfff17 	ldw	r2,-4(fp)
   14c94:	18800015 	stw	r2,0(r3)
    return -1;
   14c98:	00bfffc4 	movi	r2,-1
   14c9c:	00000106 	br	14ca4 <kill+0x118>
  }

  return 0;
   14ca0:	0005883a 	mov	r2,zero
}
   14ca4:	e037883a 	mov	sp,fp
   14ca8:	dfc00117 	ldw	ra,4(sp)
   14cac:	df000017 	ldw	fp,0(sp)
   14cb0:	dec00204 	addi	sp,sp,8
   14cb4:	f800283a 	ret

00014cb8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14cb8:	defffc04 	addi	sp,sp,-16
   14cbc:	df000315 	stw	fp,12(sp)
   14cc0:	df000304 	addi	fp,sp,12
   14cc4:	e13fff15 	stw	r4,-4(fp)
   14cc8:	e17ffe15 	stw	r5,-8(fp)
   14ccc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   14cd0:	e0fffe17 	ldw	r3,-8(fp)
   14cd4:	e0bfff17 	ldw	r2,-4(fp)
   14cd8:	18800c26 	beq	r3,r2,14d0c <alt_load_section+0x54>
  {
    while( to != end )
   14cdc:	00000806 	br	14d00 <alt_load_section+0x48>
    {
      *to++ = *from++;
   14ce0:	e0ffff17 	ldw	r3,-4(fp)
   14ce4:	18800104 	addi	r2,r3,4
   14ce8:	e0bfff15 	stw	r2,-4(fp)
   14cec:	e0bffe17 	ldw	r2,-8(fp)
   14cf0:	11000104 	addi	r4,r2,4
   14cf4:	e13ffe15 	stw	r4,-8(fp)
   14cf8:	18c00017 	ldw	r3,0(r3)
   14cfc:	10c00015 	stw	r3,0(r2)
    while( to != end )
   14d00:	e0fffe17 	ldw	r3,-8(fp)
   14d04:	e0bffd17 	ldw	r2,-12(fp)
   14d08:	18bff51e 	bne	r3,r2,14ce0 <alt_load_section+0x28>
    }
  }
}
   14d0c:	0001883a 	nop
   14d10:	e037883a 	mov	sp,fp
   14d14:	df000017 	ldw	fp,0(sp)
   14d18:	dec00104 	addi	sp,sp,4
   14d1c:	f800283a 	ret

00014d20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   14d20:	defffe04 	addi	sp,sp,-8
   14d24:	dfc00115 	stw	ra,4(sp)
   14d28:	df000015 	stw	fp,0(sp)
   14d2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   14d30:	018000b4 	movhi	r6,2
   14d34:	31a7f204 	addi	r6,r6,-24632
   14d38:	014000b4 	movhi	r5,2
   14d3c:	2960ce04 	addi	r5,r5,-31944
   14d40:	010000b4 	movhi	r4,2
   14d44:	2127f204 	addi	r4,r4,-24632
   14d48:	0014cb80 	call	14cb8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   14d4c:	01800034 	movhi	r6,0
   14d50:	31808a04 	addi	r6,r6,552
   14d54:	01400034 	movhi	r5,0
   14d58:	29400804 	addi	r5,r5,32
   14d5c:	01000034 	movhi	r4,0
   14d60:	21000804 	addi	r4,r4,32
   14d64:	0014cb80 	call	14cb8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14d68:	018000b4 	movhi	r6,2
   14d6c:	31a0ce04 	addi	r6,r6,-31944
   14d70:	01400074 	movhi	r5,1
   14d74:	295e9c04 	addi	r5,r5,31344
   14d78:	01000074 	movhi	r4,1
   14d7c:	211e9c04 	addi	r4,r4,31344
   14d80:	0014cb80 	call	14cb8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14d84:	0016bf00 	call	16bf0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14d88:	0016e4c0 	call	16e4c <alt_icache_flush_all>
}
   14d8c:	0001883a 	nop
   14d90:	e037883a 	mov	sp,fp
   14d94:	dfc00117 	ldw	ra,4(sp)
   14d98:	df000017 	ldw	fp,0(sp)
   14d9c:	dec00204 	addi	sp,sp,8
   14da0:	f800283a 	ret

00014da4 <alt_get_errno>:
{
   14da4:	defffe04 	addi	sp,sp,-8
   14da8:	dfc00115 	stw	ra,4(sp)
   14dac:	df000015 	stw	fp,0(sp)
   14db0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14db4:	d0a00917 	ldw	r2,-32732(gp)
   14db8:	10000326 	beq	r2,zero,14dc8 <alt_get_errno+0x24>
   14dbc:	d0a00917 	ldw	r2,-32732(gp)
   14dc0:	103ee83a 	callr	r2
   14dc4:	00000106 	br	14dcc <alt_get_errno+0x28>
   14dc8:	d0a73504 	addi	r2,gp,-25388
}
   14dcc:	e037883a 	mov	sp,fp
   14dd0:	dfc00117 	ldw	ra,4(sp)
   14dd4:	df000017 	ldw	fp,0(sp)
   14dd8:	dec00204 	addi	sp,sp,8
   14ddc:	f800283a 	ret

00014de0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   14de0:	defff904 	addi	sp,sp,-28
   14de4:	dfc00615 	stw	ra,24(sp)
   14de8:	df000515 	stw	fp,20(sp)
   14dec:	df000504 	addi	fp,sp,20
   14df0:	e13ffd15 	stw	r4,-12(fp)
   14df4:	e17ffc15 	stw	r5,-16(fp)
   14df8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   14dfc:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14e00:	e0bffd17 	ldw	r2,-12(fp)
   14e04:	10000916 	blt	r2,zero,14e2c <lseek+0x4c>
   14e08:	e0fffd17 	ldw	r3,-12(fp)
   14e0c:	1805883a 	mov	r2,r3
   14e10:	1085883a 	add	r2,r2,r2
   14e14:	10c5883a 	add	r2,r2,r3
   14e18:	100490ba 	slli	r2,r2,2
   14e1c:	00c000b4 	movhi	r3,2
   14e20:	18e33e04 	addi	r3,r3,-29448
   14e24:	10c5883a 	add	r2,r2,r3
   14e28:	00000106 	br	14e30 <lseek+0x50>
   14e2c:	0005883a 	mov	r2,zero
   14e30:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   14e34:	e0bffe17 	ldw	r2,-8(fp)
   14e38:	10001026 	beq	r2,zero,14e7c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   14e3c:	e0bffe17 	ldw	r2,-8(fp)
   14e40:	10800017 	ldw	r2,0(r2)
   14e44:	10800717 	ldw	r2,28(r2)
   14e48:	10000926 	beq	r2,zero,14e70 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   14e4c:	e0bffe17 	ldw	r2,-8(fp)
   14e50:	10800017 	ldw	r2,0(r2)
   14e54:	10800717 	ldw	r2,28(r2)
   14e58:	e1bffb17 	ldw	r6,-20(fp)
   14e5c:	e17ffc17 	ldw	r5,-16(fp)
   14e60:	e13ffe17 	ldw	r4,-8(fp)
   14e64:	103ee83a 	callr	r2
   14e68:	e0bfff15 	stw	r2,-4(fp)
   14e6c:	00000506 	br	14e84 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   14e70:	00bfde84 	movi	r2,-134
   14e74:	e0bfff15 	stw	r2,-4(fp)
   14e78:	00000206 	br	14e84 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   14e7c:	00bfebc4 	movi	r2,-81
   14e80:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   14e84:	e0bfff17 	ldw	r2,-4(fp)
   14e88:	1000070e 	bge	r2,zero,14ea8 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   14e8c:	0014da40 	call	14da4 <alt_get_errno>
   14e90:	1007883a 	mov	r3,r2
   14e94:	e0bfff17 	ldw	r2,-4(fp)
   14e98:	0085c83a 	sub	r2,zero,r2
   14e9c:	18800015 	stw	r2,0(r3)
    rc = -1;
   14ea0:	00bfffc4 	movi	r2,-1
   14ea4:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   14ea8:	e0bfff17 	ldw	r2,-4(fp)
}
   14eac:	e037883a 	mov	sp,fp
   14eb0:	dfc00117 	ldw	ra,4(sp)
   14eb4:	df000017 	ldw	fp,0(sp)
   14eb8:	dec00204 	addi	sp,sp,8
   14ebc:	f800283a 	ret

00014ec0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14ec0:	defffd04 	addi	sp,sp,-12
   14ec4:	dfc00215 	stw	ra,8(sp)
   14ec8:	df000115 	stw	fp,4(sp)
   14ecc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14ed0:	0009883a 	mov	r4,zero
   14ed4:	00155c00 	call	155c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14ed8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14edc:	00155fc0 	call	155fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14ee0:	018000b4 	movhi	r6,2
   14ee4:	31a0b104 	addi	r6,r6,-32060
   14ee8:	014000b4 	movhi	r5,2
   14eec:	2960b104 	addi	r5,r5,-32060
   14ef0:	010000b4 	movhi	r4,2
   14ef4:	2120b104 	addi	r4,r4,-32060
   14ef8:	0016f400 	call	16f40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14efc:	0016cf40 	call	16cf4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14f00:	01000074 	movhi	r4,1
   14f04:	211b5604 	addi	r4,r4,27992
   14f08:	00178000 	call	17800 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14f0c:	d0a73717 	ldw	r2,-25380(gp)
   14f10:	d0e73817 	ldw	r3,-25376(gp)
   14f14:	d1273917 	ldw	r4,-25372(gp)
   14f18:	200d883a 	mov	r6,r4
   14f1c:	180b883a 	mov	r5,r3
   14f20:	1009883a 	mov	r4,r2
   14f24:	0001e0c0 	call	1e0c <main>
   14f28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14f2c:	01000044 	movi	r4,1
   14f30:	001480c0 	call	1480c <close>
  exit (result);
   14f34:	e13fff17 	ldw	r4,-4(fp)
   14f38:	00178140 	call	17814 <exit>

00014f3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14f3c:	defffe04 	addi	sp,sp,-8
   14f40:	df000115 	stw	fp,4(sp)
   14f44:	df000104 	addi	fp,sp,4
   14f48:	e13fff15 	stw	r4,-4(fp)
}
   14f4c:	0001883a 	nop
   14f50:	e037883a 	mov	sp,fp
   14f54:	df000017 	ldw	fp,0(sp)
   14f58:	dec00104 	addi	sp,sp,4
   14f5c:	f800283a 	ret

00014f60 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14f60:	defffe04 	addi	sp,sp,-8
   14f64:	df000115 	stw	fp,4(sp)
   14f68:	df000104 	addi	fp,sp,4
   14f6c:	e13fff15 	stw	r4,-4(fp)
}
   14f70:	0001883a 	nop
   14f74:	e037883a 	mov	sp,fp
   14f78:	df000017 	ldw	fp,0(sp)
   14f7c:	dec00104 	addi	sp,sp,4
   14f80:	f800283a 	ret

00014f84 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   14f84:	defff204 	addi	sp,sp,-56
   14f88:	dfc00a15 	stw	ra,40(sp)
   14f8c:	df000915 	stw	fp,36(sp)
   14f90:	df000904 	addi	fp,sp,36
   14f94:	e13ff715 	stw	r4,-36(fp)
   14f98:	e1400215 	stw	r5,8(fp)
   14f9c:	e1800315 	stw	r6,12(fp)
   14fa0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   14fa4:	e0800204 	addi	r2,fp,8
   14fa8:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   14fac:	e0bff717 	ldw	r2,-36(fp)
   14fb0:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
   14fb4:	00006f06 	br	15174 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   14fb8:	e0bffec7 	ldb	r2,-5(fp)
   14fbc:	10800960 	cmpeqi	r2,r2,37
   14fc0:	1000041e 	bne	r2,zero,14fd4 <alt_printf+0x50>
        {
            alt_putchar(c);
   14fc4:	e0bffec7 	ldb	r2,-5(fp)
   14fc8:	1009883a 	mov	r4,r2
   14fcc:	00151b00 	call	151b0 <alt_putchar>
   14fd0:	00006806 	br	15174 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   14fd4:	e0bfff17 	ldw	r2,-4(fp)
   14fd8:	10c00044 	addi	r3,r2,1
   14fdc:	e0ffff15 	stw	r3,-4(fp)
   14fe0:	10800003 	ldbu	r2,0(r2)
   14fe4:	e0bffec5 	stb	r2,-5(fp)
   14fe8:	e0bffec7 	ldb	r2,-5(fp)
   14fec:	10006926 	beq	r2,zero,15194 <alt_printf+0x210>
            {
                if (c == '%')
   14ff0:	e0bffec7 	ldb	r2,-5(fp)
   14ff4:	10800958 	cmpnei	r2,r2,37
   14ff8:	1000041e 	bne	r2,zero,1500c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   14ffc:	e0bffec7 	ldb	r2,-5(fp)
   15000:	1009883a 	mov	r4,r2
   15004:	00151b00 	call	151b0 <alt_putchar>
   15008:	00005a06 	br	15174 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   1500c:	e0bffec7 	ldb	r2,-5(fp)
   15010:	108018d8 	cmpnei	r2,r2,99
   15014:	1000081e 	bne	r2,zero,15038 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   15018:	e0bff817 	ldw	r2,-32(fp)
   1501c:	10c00104 	addi	r3,r2,4
   15020:	e0fff815 	stw	r3,-32(fp)
   15024:	10800017 	ldw	r2,0(r2)
   15028:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
   1502c:	e13ff917 	ldw	r4,-28(fp)
   15030:	00151b00 	call	151b0 <alt_putchar>
   15034:	00004f06 	br	15174 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   15038:	e0bffec7 	ldb	r2,-5(fp)
   1503c:	10801e18 	cmpnei	r2,r2,120
   15040:	1000341e 	bne	r2,zero,15114 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   15044:	e0bff817 	ldw	r2,-32(fp)
   15048:	10c00104 	addi	r3,r2,4
   1504c:	e0fff815 	stw	r3,-32(fp)
   15050:	10800017 	ldw	r2,0(r2)
   15054:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   15058:	e0bffb17 	ldw	r2,-20(fp)
   1505c:	1000031e 	bne	r2,zero,1506c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   15060:	01000c04 	movi	r4,48
   15064:	00151b00 	call	151b0 <alt_putchar>
                        continue;
   15068:	00004206 	br	15174 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   1506c:	00800704 	movi	r2,28
   15070:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   15074:	00000306 	br	15084 <alt_printf+0x100>
                        digit_shift -= 4;
   15078:	e0bffd17 	ldw	r2,-12(fp)
   1507c:	10bfff04 	addi	r2,r2,-4
   15080:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
   15084:	00c003c4 	movi	r3,15
   15088:	e0bffd17 	ldw	r2,-12(fp)
   1508c:	1884983a 	sll	r2,r3,r2
   15090:	1007883a 	mov	r3,r2
   15094:	e0bffb17 	ldw	r2,-20(fp)
   15098:	1884703a 	and	r2,r3,r2
   1509c:	103ff626 	beq	r2,zero,15078 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   150a0:	00001906 	br	15108 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   150a4:	00c003c4 	movi	r3,15
   150a8:	e0bffd17 	ldw	r2,-12(fp)
   150ac:	1884983a 	sll	r2,r3,r2
   150b0:	1007883a 	mov	r3,r2
   150b4:	e0bffb17 	ldw	r2,-20(fp)
   150b8:	1886703a 	and	r3,r3,r2
   150bc:	e0bffd17 	ldw	r2,-12(fp)
   150c0:	1884d83a 	srl	r2,r3,r2
   150c4:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
   150c8:	e0bffa17 	ldw	r2,-24(fp)
   150cc:	108002a8 	cmpgeui	r2,r2,10
   150d0:	1000041e 	bne	r2,zero,150e4 <alt_printf+0x160>
                            c = '0' + digit;
   150d4:	e0bffa17 	ldw	r2,-24(fp)
   150d8:	10800c04 	addi	r2,r2,48
   150dc:	e0bffec5 	stb	r2,-5(fp)
   150e0:	00000306 	br	150f0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   150e4:	e0bffa17 	ldw	r2,-24(fp)
   150e8:	108015c4 	addi	r2,r2,87
   150ec:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
   150f0:	e0bffec7 	ldb	r2,-5(fp)
   150f4:	1009883a 	mov	r4,r2
   150f8:	00151b00 	call	151b0 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   150fc:	e0bffd17 	ldw	r2,-12(fp)
   15100:	10bfff04 	addi	r2,r2,-4
   15104:	e0bffd15 	stw	r2,-12(fp)
   15108:	e0bffd17 	ldw	r2,-12(fp)
   1510c:	103fe50e 	bge	r2,zero,150a4 <alt_printf+0x120>
   15110:	00001806 	br	15174 <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
   15114:	e0bffec7 	ldb	r2,-5(fp)
   15118:	10801cd8 	cmpnei	r2,r2,115
   1511c:	1000151e 	bne	r2,zero,15174 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   15120:	e0bff817 	ldw	r2,-32(fp)
   15124:	10c00104 	addi	r3,r2,4
   15128:	e0fff815 	stw	r3,-32(fp)
   1512c:	10800017 	ldw	r2,0(r2)
   15130:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
   15134:	00000906 	br	1515c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   15138:	e0bffc17 	ldw	r2,-16(fp)
   1513c:	10c00044 	addi	r3,r2,1
   15140:	e0fffc15 	stw	r3,-16(fp)
   15144:	10800003 	ldbu	r2,0(r2)
   15148:	10803fcc 	andi	r2,r2,255
   1514c:	1080201c 	xori	r2,r2,128
   15150:	10bfe004 	addi	r2,r2,-128
   15154:	1009883a 	mov	r4,r2
   15158:	00151b00 	call	151b0 <alt_putchar>
                    while(*s)
   1515c:	e0bffc17 	ldw	r2,-16(fp)
   15160:	10800003 	ldbu	r2,0(r2)
   15164:	10803fcc 	andi	r2,r2,255
   15168:	1080201c 	xori	r2,r2,128
   1516c:	10bfe004 	addi	r2,r2,-128
   15170:	103ff11e 	bne	r2,zero,15138 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
   15174:	e0bfff17 	ldw	r2,-4(fp)
   15178:	10c00044 	addi	r3,r2,1
   1517c:	e0ffff15 	stw	r3,-4(fp)
   15180:	10800003 	ldbu	r2,0(r2)
   15184:	e0bffec5 	stb	r2,-5(fp)
   15188:	e0bffec7 	ldb	r2,-5(fp)
   1518c:	103f8a1e 	bne	r2,zero,14fb8 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   15190:	00000106 	br	15198 <alt_printf+0x214>
                break;
   15194:	0001883a 	nop
}
   15198:	0001883a 	nop
   1519c:	e037883a 	mov	sp,fp
   151a0:	dfc00117 	ldw	ra,4(sp)
   151a4:	df000017 	ldw	fp,0(sp)
   151a8:	dec00504 	addi	sp,sp,20
   151ac:	f800283a 	ret

000151b0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   151b0:	defffd04 	addi	sp,sp,-12
   151b4:	dfc00215 	stw	ra,8(sp)
   151b8:	df000115 	stw	fp,4(sp)
   151bc:	df000104 	addi	fp,sp,4
   151c0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   151c4:	e13fff17 	ldw	r4,-4(fp)
   151c8:	000a7f80 	call	a7f8 <putchar>
#endif
#endif
}
   151cc:	e037883a 	mov	sp,fp
   151d0:	dfc00117 	ldw	ra,4(sp)
   151d4:	df000017 	ldw	fp,0(sp)
   151d8:	dec00204 	addi	sp,sp,8
   151dc:	f800283a 	ret

000151e0 <alt_get_errno>:
{
   151e0:	defffe04 	addi	sp,sp,-8
   151e4:	dfc00115 	stw	ra,4(sp)
   151e8:	df000015 	stw	fp,0(sp)
   151ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   151f0:	d0a00917 	ldw	r2,-32732(gp)
   151f4:	10000326 	beq	r2,zero,15204 <alt_get_errno+0x24>
   151f8:	d0a00917 	ldw	r2,-32732(gp)
   151fc:	103ee83a 	callr	r2
   15200:	00000106 	br	15208 <alt_get_errno+0x28>
   15204:	d0a73504 	addi	r2,gp,-25388
}
   15208:	e037883a 	mov	sp,fp
   1520c:	dfc00117 	ldw	ra,4(sp)
   15210:	df000017 	ldw	fp,0(sp)
   15214:	dec00204 	addi	sp,sp,8
   15218:	f800283a 	ret

0001521c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1521c:	defff904 	addi	sp,sp,-28
   15220:	dfc00615 	stw	ra,24(sp)
   15224:	df000515 	stw	fp,20(sp)
   15228:	df000504 	addi	fp,sp,20
   1522c:	e13ffd15 	stw	r4,-12(fp)
   15230:	e17ffc15 	stw	r5,-16(fp)
   15234:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15238:	e0bffd17 	ldw	r2,-12(fp)
   1523c:	10000916 	blt	r2,zero,15264 <read+0x48>
   15240:	e0fffd17 	ldw	r3,-12(fp)
   15244:	1805883a 	mov	r2,r3
   15248:	1085883a 	add	r2,r2,r2
   1524c:	10c5883a 	add	r2,r2,r3
   15250:	100490ba 	slli	r2,r2,2
   15254:	00c000b4 	movhi	r3,2
   15258:	18e33e04 	addi	r3,r3,-29448
   1525c:	10c5883a 	add	r2,r2,r3
   15260:	00000106 	br	15268 <read+0x4c>
   15264:	0005883a 	mov	r2,zero
   15268:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1526c:	e0bfff17 	ldw	r2,-4(fp)
   15270:	10002226 	beq	r2,zero,152fc <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15274:	e0bfff17 	ldw	r2,-4(fp)
   15278:	10800217 	ldw	r2,8(r2)
   1527c:	108000cc 	andi	r2,r2,3
   15280:	10800060 	cmpeqi	r2,r2,1
   15284:	1000181e 	bne	r2,zero,152e8 <read+0xcc>
        (fd->dev->read))
   15288:	e0bfff17 	ldw	r2,-4(fp)
   1528c:	10800017 	ldw	r2,0(r2)
   15290:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15294:	10001426 	beq	r2,zero,152e8 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   15298:	e0bfff17 	ldw	r2,-4(fp)
   1529c:	10800017 	ldw	r2,0(r2)
   152a0:	10800517 	ldw	r2,20(r2)
   152a4:	e0fffb17 	ldw	r3,-20(fp)
   152a8:	180d883a 	mov	r6,r3
   152ac:	e17ffc17 	ldw	r5,-16(fp)
   152b0:	e13fff17 	ldw	r4,-4(fp)
   152b4:	103ee83a 	callr	r2
   152b8:	e0bffe15 	stw	r2,-8(fp)
   152bc:	e0bffe17 	ldw	r2,-8(fp)
   152c0:	1000070e 	bge	r2,zero,152e0 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   152c4:	00151e00 	call	151e0 <alt_get_errno>
   152c8:	1007883a 	mov	r3,r2
   152cc:	e0bffe17 	ldw	r2,-8(fp)
   152d0:	0085c83a 	sub	r2,zero,r2
   152d4:	18800015 	stw	r2,0(r3)
          return -1;
   152d8:	00bfffc4 	movi	r2,-1
   152dc:	00000c06 	br	15310 <read+0xf4>
        }
        return rval;
   152e0:	e0bffe17 	ldw	r2,-8(fp)
   152e4:	00000a06 	br	15310 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   152e8:	00151e00 	call	151e0 <alt_get_errno>
   152ec:	1007883a 	mov	r3,r2
   152f0:	00800344 	movi	r2,13
   152f4:	18800015 	stw	r2,0(r3)
   152f8:	00000406 	br	1530c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   152fc:	00151e00 	call	151e0 <alt_get_errno>
   15300:	1007883a 	mov	r3,r2
   15304:	00801444 	movi	r2,81
   15308:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1530c:	00bfffc4 	movi	r2,-1
}
   15310:	e037883a 	mov	sp,fp
   15314:	dfc00117 	ldw	ra,4(sp)
   15318:	df000017 	ldw	fp,0(sp)
   1531c:	dec00204 	addi	sp,sp,8
   15320:	f800283a 	ret

00015324 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   15324:	defffe04 	addi	sp,sp,-8
   15328:	df000115 	stw	fp,4(sp)
   1532c:	df000104 	addi	fp,sp,4
   15330:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   15334:	e0bfff17 	ldw	r2,-4(fp)
   15338:	108000d0 	cmplti	r2,r2,3
   1533c:	1000101e 	bne	r2,zero,15380 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   15340:	e0ffff17 	ldw	r3,-4(fp)
   15344:	1805883a 	mov	r2,r3
   15348:	1085883a 	add	r2,r2,r2
   1534c:	10c5883a 	add	r2,r2,r3
   15350:	100490ba 	slli	r2,r2,2
   15354:	00c000b4 	movhi	r3,2
   15358:	10c7883a 	add	r3,r2,r3
   1535c:	18234015 	stw	zero,-29440(r3)
    alt_fd_list[fd].dev      = 0;
   15360:	e0ffff17 	ldw	r3,-4(fp)
   15364:	1805883a 	mov	r2,r3
   15368:	1085883a 	add	r2,r2,r2
   1536c:	10c5883a 	add	r2,r2,r3
   15370:	100490ba 	slli	r2,r2,2
   15374:	00c000b4 	movhi	r3,2
   15378:	10c7883a 	add	r3,r2,r3
   1537c:	18233e15 	stw	zero,-29448(r3)
  }
}
   15380:	0001883a 	nop
   15384:	e037883a 	mov	sp,fp
   15388:	df000017 	ldw	fp,0(sp)
   1538c:	dec00104 	addi	sp,sp,4
   15390:	f800283a 	ret

00015394 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   15394:	defff904 	addi	sp,sp,-28
   15398:	df000615 	stw	fp,24(sp)
   1539c:	df000604 	addi	fp,sp,24
   153a0:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   153a4:	0005303a 	rdctl	r2,status
   153a8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153ac:	e0fffd17 	ldw	r3,-12(fp)
   153b0:	00bfff84 	movi	r2,-2
   153b4:	1884703a 	and	r2,r3,r2
   153b8:	1001703a 	wrctl	status,r2
  return context;
   153bc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   153c0:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   153c4:	d0a00a17 	ldw	r2,-32728(gp)
   153c8:	10c000c4 	addi	r3,r2,3
   153cc:	00bfff04 	movi	r2,-4
   153d0:	1884703a 	and	r2,r3,r2
   153d4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   153d8:	d0e00a17 	ldw	r3,-32728(gp)
   153dc:	e0bffa17 	ldw	r2,-24(fp)
   153e0:	1887883a 	add	r3,r3,r2
   153e4:	00820034 	movhi	r2,2048
   153e8:	10800004 	addi	r2,r2,0
   153ec:	10c0072e 	bgeu	r2,r3,1540c <sbrk+0x78>
   153f0:	e0bfff17 	ldw	r2,-4(fp)
   153f4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   153f8:	e0bffc17 	ldw	r2,-16(fp)
   153fc:	1001703a 	wrctl	status,r2
}
   15400:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15404:	00bfffc4 	movi	r2,-1
   15408:	00000c06 	br	1543c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1540c:	d0a00a17 	ldw	r2,-32728(gp)
   15410:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   15414:	d0e00a17 	ldw	r3,-32728(gp)
   15418:	e0bffa17 	ldw	r2,-24(fp)
   1541c:	1885883a 	add	r2,r3,r2
   15420:	d0a00a15 	stw	r2,-32728(gp)
   15424:	e0bfff17 	ldw	r2,-4(fp)
   15428:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   1542c:	e0bffb17 	ldw	r2,-20(fp)
   15430:	1001703a 	wrctl	status,r2
}
   15434:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   15438:	e0bffe17 	ldw	r2,-8(fp)
} 
   1543c:	e037883a 	mov	sp,fp
   15440:	df000017 	ldw	fp,0(sp)
   15444:	dec00104 	addi	sp,sp,4
   15448:	f800283a 	ret

0001544c <alt_get_errno>:
{
   1544c:	defffe04 	addi	sp,sp,-8
   15450:	dfc00115 	stw	ra,4(sp)
   15454:	df000015 	stw	fp,0(sp)
   15458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1545c:	d0a00917 	ldw	r2,-32732(gp)
   15460:	10000326 	beq	r2,zero,15470 <alt_get_errno+0x24>
   15464:	d0a00917 	ldw	r2,-32732(gp)
   15468:	103ee83a 	callr	r2
   1546c:	00000106 	br	15474 <alt_get_errno+0x28>
   15470:	d0a73504 	addi	r2,gp,-25388
}
   15474:	e037883a 	mov	sp,fp
   15478:	dfc00117 	ldw	ra,4(sp)
   1547c:	df000017 	ldw	fp,0(sp)
   15480:	dec00204 	addi	sp,sp,8
   15484:	f800283a 	ret

00015488 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   15488:	defff904 	addi	sp,sp,-28
   1548c:	dfc00615 	stw	ra,24(sp)
   15490:	df000515 	stw	fp,20(sp)
   15494:	df000504 	addi	fp,sp,20
   15498:	e13ffd15 	stw	r4,-12(fp)
   1549c:	e17ffc15 	stw	r5,-16(fp)
   154a0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   154a4:	e0bffd17 	ldw	r2,-12(fp)
   154a8:	10000916 	blt	r2,zero,154d0 <write+0x48>
   154ac:	e0fffd17 	ldw	r3,-12(fp)
   154b0:	1805883a 	mov	r2,r3
   154b4:	1085883a 	add	r2,r2,r2
   154b8:	10c5883a 	add	r2,r2,r3
   154bc:	100490ba 	slli	r2,r2,2
   154c0:	00c000b4 	movhi	r3,2
   154c4:	18e33e04 	addi	r3,r3,-29448
   154c8:	10c5883a 	add	r2,r2,r3
   154cc:	00000106 	br	154d4 <write+0x4c>
   154d0:	0005883a 	mov	r2,zero
   154d4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   154d8:	e0bfff17 	ldw	r2,-4(fp)
   154dc:	10002126 	beq	r2,zero,15564 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   154e0:	e0bfff17 	ldw	r2,-4(fp)
   154e4:	10800217 	ldw	r2,8(r2)
   154e8:	108000cc 	andi	r2,r2,3
   154ec:	10001826 	beq	r2,zero,15550 <write+0xc8>
   154f0:	e0bfff17 	ldw	r2,-4(fp)
   154f4:	10800017 	ldw	r2,0(r2)
   154f8:	10800617 	ldw	r2,24(r2)
   154fc:	10001426 	beq	r2,zero,15550 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   15500:	e0bfff17 	ldw	r2,-4(fp)
   15504:	10800017 	ldw	r2,0(r2)
   15508:	10800617 	ldw	r2,24(r2)
   1550c:	e0fffb17 	ldw	r3,-20(fp)
   15510:	180d883a 	mov	r6,r3
   15514:	e17ffc17 	ldw	r5,-16(fp)
   15518:	e13fff17 	ldw	r4,-4(fp)
   1551c:	103ee83a 	callr	r2
   15520:	e0bffe15 	stw	r2,-8(fp)
   15524:	e0bffe17 	ldw	r2,-8(fp)
   15528:	1000070e 	bge	r2,zero,15548 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   1552c:	001544c0 	call	1544c <alt_get_errno>
   15530:	1007883a 	mov	r3,r2
   15534:	e0bffe17 	ldw	r2,-8(fp)
   15538:	0085c83a 	sub	r2,zero,r2
   1553c:	18800015 	stw	r2,0(r3)
        return -1;
   15540:	00bfffc4 	movi	r2,-1
   15544:	00000c06 	br	15578 <write+0xf0>
      }
      return rval;
   15548:	e0bffe17 	ldw	r2,-8(fp)
   1554c:	00000a06 	br	15578 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   15550:	001544c0 	call	1544c <alt_get_errno>
   15554:	1007883a 	mov	r3,r2
   15558:	00800344 	movi	r2,13
   1555c:	18800015 	stw	r2,0(r3)
   15560:	00000406 	br	15574 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   15564:	001544c0 	call	1544c <alt_get_errno>
   15568:	1007883a 	mov	r3,r2
   1556c:	00801444 	movi	r2,81
   15570:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15574:	00bfffc4 	movi	r2,-1
}
   15578:	e037883a 	mov	sp,fp
   1557c:	dfc00117 	ldw	ra,4(sp)
   15580:	df000017 	ldw	fp,0(sp)
   15584:	dec00204 	addi	sp,sp,8
   15588:	f800283a 	ret

0001558c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1558c:	defffd04 	addi	sp,sp,-12
   15590:	dfc00215 	stw	ra,8(sp)
   15594:	df000115 	stw	fp,4(sp)
   15598:	df000104 	addi	fp,sp,4
   1559c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   155a0:	d1600604 	addi	r5,gp,-32744
   155a4:	e13fff17 	ldw	r4,-4(fp)
   155a8:	0016c4c0 	call	16c4c <alt_dev_llist_insert>
}
   155ac:	e037883a 	mov	sp,fp
   155b0:	dfc00117 	ldw	ra,4(sp)
   155b4:	df000017 	ldw	fp,0(sp)
   155b8:	dec00204 	addi	sp,sp,8
   155bc:	f800283a 	ret

000155c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   155c0:	defffd04 	addi	sp,sp,-12
   155c4:	dfc00215 	stw	ra,8(sp)
   155c8:	df000115 	stw	fp,4(sp)
   155cc:	df000104 	addi	fp,sp,4
   155d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   155d4:	00175840 	call	17584 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   155d8:	00800044 	movi	r2,1
   155dc:	1001703a 	wrctl	status,r2
}
   155e0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   155e4:	0001883a 	nop
   155e8:	e037883a 	mov	sp,fp
   155ec:	dfc00117 	ldw	ra,4(sp)
   155f0:	df000017 	ldw	fp,0(sp)
   155f4:	dec00204 	addi	sp,sp,8
   155f8:	f800283a 	ret

000155fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   155fc:	defffe04 	addi	sp,sp,-8
   15600:	dfc00115 	stw	ra,4(sp)
   15604:	df000015 	stw	fp,0(sp)
   15608:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1560c:	01c00204 	movi	r7,8
   15610:	01800144 	movi	r6,5
   15614:	000b883a 	mov	r5,zero
   15618:	013fc834 	movhi	r4,65312
   1561c:	21080004 	addi	r4,r4,8192
   15620:	00161880 	call	16188 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   15624:	01800104 	movi	r6,4
   15628:	000b883a 	mov	r5,zero
   1562c:	010000b4 	movhi	r4,2
   15630:	2123a804 	addi	r4,r4,-29024
   15634:	00158000 	call	15800 <altera_avalon_jtag_uart_init>
   15638:	010000b4 	movhi	r4,2
   1563c:	21239e04 	addi	r4,r4,-29064
   15640:	001558c0 	call	1558c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   15644:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   15648:	010000b4 	movhi	r4,2
   1564c:	2127b604 	addi	r4,r4,-24872
   15650:	001558c0 	call	1558c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   15654:	010000b4 	movhi	r4,2
   15658:	2127c204 	addi	r4,r4,-24824
   1565c:	001558c0 	call	1558c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   15660:	010000b4 	movhi	r4,2
   15664:	2127ce04 	addi	r4,r4,-24776
   15668:	00162b80 	call	162b8 <alt_up_character_lcd_init>
   1566c:	010000b4 	movhi	r4,2
   15670:	2127ce04 	addi	r4,r4,-24776
   15674:	001558c0 	call	1558c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   15678:	010000b4 	movhi	r4,2
   1567c:	2127d904 	addi	r4,r4,-24732
   15680:	001558c0 	call	1558c <alt_dev_reg>
}
   15684:	0001883a 	nop
   15688:	e037883a 	mov	sp,fp
   1568c:	dfc00117 	ldw	ra,4(sp)
   15690:	df000017 	ldw	fp,0(sp)
   15694:	dec00204 	addi	sp,sp,8
   15698:	f800283a 	ret

0001569c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1569c:	defffa04 	addi	sp,sp,-24
   156a0:	dfc00515 	stw	ra,20(sp)
   156a4:	df000415 	stw	fp,16(sp)
   156a8:	df000404 	addi	fp,sp,16
   156ac:	e13ffe15 	stw	r4,-8(fp)
   156b0:	e17ffd15 	stw	r5,-12(fp)
   156b4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   156b8:	e0bffe17 	ldw	r2,-8(fp)
   156bc:	10800017 	ldw	r2,0(r2)
   156c0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   156c4:	e0bfff17 	ldw	r2,-4(fp)
   156c8:	10c00a04 	addi	r3,r2,40
   156cc:	e0bffe17 	ldw	r2,-8(fp)
   156d0:	10800217 	ldw	r2,8(r2)
   156d4:	100f883a 	mov	r7,r2
   156d8:	e1bffc17 	ldw	r6,-16(fp)
   156dc:	e17ffd17 	ldw	r5,-12(fp)
   156e0:	1809883a 	mov	r4,r3
   156e4:	0015cc00 	call	15cc0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   156e8:	e037883a 	mov	sp,fp
   156ec:	dfc00117 	ldw	ra,4(sp)
   156f0:	df000017 	ldw	fp,0(sp)
   156f4:	dec00204 	addi	sp,sp,8
   156f8:	f800283a 	ret

000156fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   156fc:	defffa04 	addi	sp,sp,-24
   15700:	dfc00515 	stw	ra,20(sp)
   15704:	df000415 	stw	fp,16(sp)
   15708:	df000404 	addi	fp,sp,16
   1570c:	e13ffe15 	stw	r4,-8(fp)
   15710:	e17ffd15 	stw	r5,-12(fp)
   15714:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15718:	e0bffe17 	ldw	r2,-8(fp)
   1571c:	10800017 	ldw	r2,0(r2)
   15720:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15724:	e0bfff17 	ldw	r2,-4(fp)
   15728:	10c00a04 	addi	r3,r2,40
   1572c:	e0bffe17 	ldw	r2,-8(fp)
   15730:	10800217 	ldw	r2,8(r2)
   15734:	100f883a 	mov	r7,r2
   15738:	e1bffc17 	ldw	r6,-16(fp)
   1573c:	e17ffd17 	ldw	r5,-12(fp)
   15740:	1809883a 	mov	r4,r3
   15744:	0015ee00 	call	15ee0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15748:	e037883a 	mov	sp,fp
   1574c:	dfc00117 	ldw	ra,4(sp)
   15750:	df000017 	ldw	fp,0(sp)
   15754:	dec00204 	addi	sp,sp,8
   15758:	f800283a 	ret

0001575c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1575c:	defffc04 	addi	sp,sp,-16
   15760:	dfc00315 	stw	ra,12(sp)
   15764:	df000215 	stw	fp,8(sp)
   15768:	df000204 	addi	fp,sp,8
   1576c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15770:	e0bffe17 	ldw	r2,-8(fp)
   15774:	10800017 	ldw	r2,0(r2)
   15778:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1577c:	e0bfff17 	ldw	r2,-4(fp)
   15780:	10c00a04 	addi	r3,r2,40
   15784:	e0bffe17 	ldw	r2,-8(fp)
   15788:	10800217 	ldw	r2,8(r2)
   1578c:	100b883a 	mov	r5,r2
   15790:	1809883a 	mov	r4,r3
   15794:	0015b640 	call	15b64 <altera_avalon_jtag_uart_close>
}
   15798:	e037883a 	mov	sp,fp
   1579c:	dfc00117 	ldw	ra,4(sp)
   157a0:	df000017 	ldw	fp,0(sp)
   157a4:	dec00204 	addi	sp,sp,8
   157a8:	f800283a 	ret

000157ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   157ac:	defffa04 	addi	sp,sp,-24
   157b0:	dfc00515 	stw	ra,20(sp)
   157b4:	df000415 	stw	fp,16(sp)
   157b8:	df000404 	addi	fp,sp,16
   157bc:	e13ffe15 	stw	r4,-8(fp)
   157c0:	e17ffd15 	stw	r5,-12(fp)
   157c4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   157c8:	e0bffe17 	ldw	r2,-8(fp)
   157cc:	10800017 	ldw	r2,0(r2)
   157d0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   157d4:	e0bfff17 	ldw	r2,-4(fp)
   157d8:	10800a04 	addi	r2,r2,40
   157dc:	e1bffc17 	ldw	r6,-16(fp)
   157e0:	e17ffd17 	ldw	r5,-12(fp)
   157e4:	1009883a 	mov	r4,r2
   157e8:	0015bcc0 	call	15bcc <altera_avalon_jtag_uart_ioctl>
}
   157ec:	e037883a 	mov	sp,fp
   157f0:	dfc00117 	ldw	ra,4(sp)
   157f4:	df000017 	ldw	fp,0(sp)
   157f8:	dec00204 	addi	sp,sp,8
   157fc:	f800283a 	ret

00015800 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15800:	defffb04 	addi	sp,sp,-20
   15804:	dfc00415 	stw	ra,16(sp)
   15808:	df000315 	stw	fp,12(sp)
   1580c:	df000304 	addi	fp,sp,12
   15810:	e13fff15 	stw	r4,-4(fp)
   15814:	e17ffe15 	stw	r5,-8(fp)
   15818:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1581c:	e0bfff17 	ldw	r2,-4(fp)
   15820:	00c00044 	movi	r3,1
   15824:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15828:	e0bfff17 	ldw	r2,-4(fp)
   1582c:	10800017 	ldw	r2,0(r2)
   15830:	10800104 	addi	r2,r2,4
   15834:	1007883a 	mov	r3,r2
   15838:	e0bfff17 	ldw	r2,-4(fp)
   1583c:	10800817 	ldw	r2,32(r2)
   15840:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   15844:	e0bffd17 	ldw	r2,-12(fp)
   15848:	01800074 	movhi	r6,1
   1584c:	31962d04 	addi	r6,r6,22708
   15850:	e17fff17 	ldw	r5,-4(fp)
   15854:	1009883a 	mov	r4,r2
   15858:	0016fbc0 	call	16fbc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1585c:	e0bfff17 	ldw	r2,-4(fp)
   15860:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15864:	e0bfff17 	ldw	r2,-4(fp)
   15868:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1586c:	d0e73b17 	ldw	r3,-25364(gp)
   15870:	e1ffff17 	ldw	r7,-4(fp)
   15874:	01800074 	movhi	r6,1
   15878:	3196b104 	addi	r6,r6,23236
   1587c:	180b883a 	mov	r5,r3
   15880:	1009883a 	mov	r4,r2
   15884:	0016a900 	call	16a90 <alt_alarm_start>
   15888:	1000040e 	bge	r2,zero,1589c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1588c:	e0ffff17 	ldw	r3,-4(fp)
   15890:	00a00034 	movhi	r2,32768
   15894:	10bfffc4 	addi	r2,r2,-1
   15898:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1589c:	0001883a 	nop
   158a0:	e037883a 	mov	sp,fp
   158a4:	dfc00117 	ldw	ra,4(sp)
   158a8:	df000017 	ldw	fp,0(sp)
   158ac:	dec00204 	addi	sp,sp,8
   158b0:	f800283a 	ret

000158b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   158b4:	defff704 	addi	sp,sp,-36
   158b8:	df000815 	stw	fp,32(sp)
   158bc:	df000804 	addi	fp,sp,32
   158c0:	e13ff915 	stw	r4,-28(fp)
   158c4:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   158c8:	e0bff917 	ldw	r2,-28(fp)
   158cc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   158d0:	e0bffd17 	ldw	r2,-12(fp)
   158d4:	10800017 	ldw	r2,0(r2)
   158d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   158dc:	e0bffc17 	ldw	r2,-16(fp)
   158e0:	10800104 	addi	r2,r2,4
   158e4:	10800037 	ldwio	r2,0(r2)
   158e8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   158ec:	e0bffb17 	ldw	r2,-20(fp)
   158f0:	1080c00c 	andi	r2,r2,768
   158f4:	10006d26 	beq	r2,zero,15aac <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   158f8:	e0bffb17 	ldw	r2,-20(fp)
   158fc:	1080400c 	andi	r2,r2,256
   15900:	10003526 	beq	r2,zero,159d8 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   15904:	00800074 	movhi	r2,1
   15908:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1590c:	e0bffd17 	ldw	r2,-12(fp)
   15910:	10800a17 	ldw	r2,40(r2)
   15914:	10800044 	addi	r2,r2,1
   15918:	1081ffcc 	andi	r2,r2,2047
   1591c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   15920:	e0bffd17 	ldw	r2,-12(fp)
   15924:	10800b17 	ldw	r2,44(r2)
   15928:	e0fffa17 	ldw	r3,-24(fp)
   1592c:	18801526 	beq	r3,r2,15984 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15930:	e0bffc17 	ldw	r2,-16(fp)
   15934:	10800037 	ldwio	r2,0(r2)
   15938:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1593c:	e0bfff17 	ldw	r2,-4(fp)
   15940:	10a0000c 	andi	r2,r2,32768
   15944:	10001126 	beq	r2,zero,1598c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15948:	e0bffd17 	ldw	r2,-12(fp)
   1594c:	10800a17 	ldw	r2,40(r2)
   15950:	e0ffff17 	ldw	r3,-4(fp)
   15954:	1809883a 	mov	r4,r3
   15958:	e0fffd17 	ldw	r3,-12(fp)
   1595c:	1885883a 	add	r2,r3,r2
   15960:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15964:	e0bffd17 	ldw	r2,-12(fp)
   15968:	10800a17 	ldw	r2,40(r2)
   1596c:	10800044 	addi	r2,r2,1
   15970:	10c1ffcc 	andi	r3,r2,2047
   15974:	e0bffd17 	ldw	r2,-12(fp)
   15978:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1597c:	0001883a 	nop
      {
   15980:	003fe206 	br	1590c <altera_avalon_jtag_uart_irq+0x58>
          break;
   15984:	0001883a 	nop
   15988:	00000106 	br	15990 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   1598c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15990:	e0bfff17 	ldw	r2,-4(fp)
   15994:	10bfffec 	andhi	r2,r2,65535
   15998:	10000f26 	beq	r2,zero,159d8 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1599c:	e0bffd17 	ldw	r2,-12(fp)
   159a0:	10c00817 	ldw	r3,32(r2)
   159a4:	00bfff84 	movi	r2,-2
   159a8:	1886703a 	and	r3,r3,r2
   159ac:	e0bffd17 	ldw	r2,-12(fp)
   159b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   159b4:	e0bffc17 	ldw	r2,-16(fp)
   159b8:	10800104 	addi	r2,r2,4
   159bc:	1007883a 	mov	r3,r2
   159c0:	e0bffd17 	ldw	r2,-12(fp)
   159c4:	10800817 	ldw	r2,32(r2)
   159c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   159cc:	e0bffc17 	ldw	r2,-16(fp)
   159d0:	10800104 	addi	r2,r2,4
   159d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   159d8:	e0bffb17 	ldw	r2,-20(fp)
   159dc:	1080800c 	andi	r2,r2,512
   159e0:	103fbe26 	beq	r2,zero,158dc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   159e4:	e0bffb17 	ldw	r2,-20(fp)
   159e8:	1004d43a 	srli	r2,r2,16
   159ec:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   159f0:	00001406 	br	15a44 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   159f4:	e0bffc17 	ldw	r2,-16(fp)
   159f8:	e0fffd17 	ldw	r3,-12(fp)
   159fc:	18c00d17 	ldw	r3,52(r3)
   15a00:	e13ffd17 	ldw	r4,-12(fp)
   15a04:	20c7883a 	add	r3,r4,r3
   15a08:	18c20e03 	ldbu	r3,2104(r3)
   15a0c:	18c03fcc 	andi	r3,r3,255
   15a10:	18c0201c 	xori	r3,r3,128
   15a14:	18ffe004 	addi	r3,r3,-128
   15a18:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15a1c:	e0bffd17 	ldw	r2,-12(fp)
   15a20:	10800d17 	ldw	r2,52(r2)
   15a24:	10800044 	addi	r2,r2,1
   15a28:	10c1ffcc 	andi	r3,r2,2047
   15a2c:	e0bffd17 	ldw	r2,-12(fp)
   15a30:	10c00d15 	stw	r3,52(r2)
   15a34:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   15a38:	e0bffe17 	ldw	r2,-8(fp)
   15a3c:	10bfffc4 	addi	r2,r2,-1
   15a40:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   15a44:	e0bffe17 	ldw	r2,-8(fp)
   15a48:	10000526 	beq	r2,zero,15a60 <altera_avalon_jtag_uart_irq+0x1ac>
   15a4c:	e0bffd17 	ldw	r2,-12(fp)
   15a50:	10c00d17 	ldw	r3,52(r2)
   15a54:	e0bffd17 	ldw	r2,-12(fp)
   15a58:	10800c17 	ldw	r2,48(r2)
   15a5c:	18bfe51e 	bne	r3,r2,159f4 <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
   15a60:	e0bffe17 	ldw	r2,-8(fp)
   15a64:	103f9d26 	beq	r2,zero,158dc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15a68:	e0bffd17 	ldw	r2,-12(fp)
   15a6c:	10c00817 	ldw	r3,32(r2)
   15a70:	00bfff44 	movi	r2,-3
   15a74:	1886703a 	and	r3,r3,r2
   15a78:	e0bffd17 	ldw	r2,-12(fp)
   15a7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15a80:	e0bffd17 	ldw	r2,-12(fp)
   15a84:	10800017 	ldw	r2,0(r2)
   15a88:	10800104 	addi	r2,r2,4
   15a8c:	1007883a 	mov	r3,r2
   15a90:	e0bffd17 	ldw	r2,-12(fp)
   15a94:	10800817 	ldw	r2,32(r2)
   15a98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15a9c:	e0bffc17 	ldw	r2,-16(fp)
   15aa0:	10800104 	addi	r2,r2,4
   15aa4:	10800037 	ldwio	r2,0(r2)
  {
   15aa8:	003f8c06 	br	158dc <altera_avalon_jtag_uart_irq+0x28>
      break;
   15aac:	0001883a 	nop
      }
    }
  }
}
   15ab0:	0001883a 	nop
   15ab4:	e037883a 	mov	sp,fp
   15ab8:	df000017 	ldw	fp,0(sp)
   15abc:	dec00104 	addi	sp,sp,4
   15ac0:	f800283a 	ret

00015ac4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   15ac4:	defffc04 	addi	sp,sp,-16
   15ac8:	df000315 	stw	fp,12(sp)
   15acc:	df000304 	addi	fp,sp,12
   15ad0:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   15ad4:	e0bffd17 	ldw	r2,-12(fp)
   15ad8:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   15adc:	e0bfff17 	ldw	r2,-4(fp)
   15ae0:	10800017 	ldw	r2,0(r2)
   15ae4:	10800104 	addi	r2,r2,4
   15ae8:	10800037 	ldwio	r2,0(r2)
   15aec:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   15af0:	e0bffe17 	ldw	r2,-8(fp)
   15af4:	1081000c 	andi	r2,r2,1024
   15af8:	10000b26 	beq	r2,zero,15b28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   15afc:	e0bfff17 	ldw	r2,-4(fp)
   15b00:	10800017 	ldw	r2,0(r2)
   15b04:	10800104 	addi	r2,r2,4
   15b08:	1007883a 	mov	r3,r2
   15b0c:	e0bfff17 	ldw	r2,-4(fp)
   15b10:	10800817 	ldw	r2,32(r2)
   15b14:	10810014 	ori	r2,r2,1024
   15b18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   15b1c:	e0bfff17 	ldw	r2,-4(fp)
   15b20:	10000915 	stw	zero,36(r2)
   15b24:	00000a06 	br	15b50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15b28:	e0bfff17 	ldw	r2,-4(fp)
   15b2c:	10c00917 	ldw	r3,36(r2)
   15b30:	00a00034 	movhi	r2,32768
   15b34:	10bfff04 	addi	r2,r2,-4
   15b38:	10c00536 	bltu	r2,r3,15b50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   15b3c:	e0bfff17 	ldw	r2,-4(fp)
   15b40:	10800917 	ldw	r2,36(r2)
   15b44:	10c00044 	addi	r3,r2,1
   15b48:	e0bfff17 	ldw	r2,-4(fp)
   15b4c:	10c00915 	stw	r3,36(r2)
   15b50:	d0a73b17 	ldw	r2,-25364(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   15b54:	e037883a 	mov	sp,fp
   15b58:	df000017 	ldw	fp,0(sp)
   15b5c:	dec00104 	addi	sp,sp,4
   15b60:	f800283a 	ret

00015b64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15b64:	defffd04 	addi	sp,sp,-12
   15b68:	df000215 	stw	fp,8(sp)
   15b6c:	df000204 	addi	fp,sp,8
   15b70:	e13fff15 	stw	r4,-4(fp)
   15b74:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15b78:	00000506 	br	15b90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15b7c:	e0bffe17 	ldw	r2,-8(fp)
   15b80:	1090000c 	andi	r2,r2,16384
   15b84:	10000226 	beq	r2,zero,15b90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15b88:	00bffd44 	movi	r2,-11
   15b8c:	00000b06 	br	15bbc <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15b90:	e0bfff17 	ldw	r2,-4(fp)
   15b94:	10c00d17 	ldw	r3,52(r2)
   15b98:	e0bfff17 	ldw	r2,-4(fp)
   15b9c:	10800c17 	ldw	r2,48(r2)
   15ba0:	18800526 	beq	r3,r2,15bb8 <altera_avalon_jtag_uart_close+0x54>
   15ba4:	e0bfff17 	ldw	r2,-4(fp)
   15ba8:	10c00917 	ldw	r3,36(r2)
   15bac:	e0bfff17 	ldw	r2,-4(fp)
   15bb0:	10800117 	ldw	r2,4(r2)
   15bb4:	18bff136 	bltu	r3,r2,15b7c <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   15bb8:	0005883a 	mov	r2,zero
}
   15bbc:	e037883a 	mov	sp,fp
   15bc0:	df000017 	ldw	fp,0(sp)
   15bc4:	dec00104 	addi	sp,sp,4
   15bc8:	f800283a 	ret

00015bcc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15bcc:	defffa04 	addi	sp,sp,-24
   15bd0:	df000515 	stw	fp,20(sp)
   15bd4:	df000504 	addi	fp,sp,20
   15bd8:	e13ffd15 	stw	r4,-12(fp)
   15bdc:	e17ffc15 	stw	r5,-16(fp)
   15be0:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   15be4:	00bff9c4 	movi	r2,-25
   15be8:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   15bec:	e0bffc17 	ldw	r2,-16(fp)
   15bf0:	109a8060 	cmpeqi	r2,r2,27137
   15bf4:	1000041e 	bne	r2,zero,15c08 <altera_avalon_jtag_uart_ioctl+0x3c>
   15bf8:	e0bffc17 	ldw	r2,-16(fp)
   15bfc:	109a80a0 	cmpeqi	r2,r2,27138
   15c00:	1000181e 	bne	r2,zero,15c64 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   15c04:	00002906 	br	15cac <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   15c08:	e0bffd17 	ldw	r2,-12(fp)
   15c0c:	10c00117 	ldw	r3,4(r2)
   15c10:	00a00034 	movhi	r2,32768
   15c14:	10bfffc4 	addi	r2,r2,-1
   15c18:	18802126 	beq	r3,r2,15ca0 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   15c1c:	e0bffb17 	ldw	r2,-20(fp)
   15c20:	10800017 	ldw	r2,0(r2)
   15c24:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15c28:	e0bffe17 	ldw	r2,-8(fp)
   15c2c:	10800090 	cmplti	r2,r2,2
   15c30:	1000061e 	bne	r2,zero,15c4c <altera_avalon_jtag_uart_ioctl+0x80>
   15c34:	e0fffe17 	ldw	r3,-8(fp)
   15c38:	00a00034 	movhi	r2,32768
   15c3c:	10bfffc4 	addi	r2,r2,-1
   15c40:	18800226 	beq	r3,r2,15c4c <altera_avalon_jtag_uart_ioctl+0x80>
   15c44:	e0bffe17 	ldw	r2,-8(fp)
   15c48:	00000206 	br	15c54 <altera_avalon_jtag_uart_ioctl+0x88>
   15c4c:	00a00034 	movhi	r2,32768
   15c50:	10bfff84 	addi	r2,r2,-2
   15c54:	e0fffd17 	ldw	r3,-12(fp)
   15c58:	18800115 	stw	r2,4(r3)
      rc = 0;
   15c5c:	e03fff15 	stw	zero,-4(fp)
    break;
   15c60:	00000f06 	br	15ca0 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   15c64:	e0bffd17 	ldw	r2,-12(fp)
   15c68:	10c00117 	ldw	r3,4(r2)
   15c6c:	00a00034 	movhi	r2,32768
   15c70:	10bfffc4 	addi	r2,r2,-1
   15c74:	18800c26 	beq	r3,r2,15ca8 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15c78:	e0bffd17 	ldw	r2,-12(fp)
   15c7c:	10c00917 	ldw	r3,36(r2)
   15c80:	e0bffd17 	ldw	r2,-12(fp)
   15c84:	10800117 	ldw	r2,4(r2)
   15c88:	1885803a 	cmpltu	r2,r3,r2
   15c8c:	10c03fcc 	andi	r3,r2,255
   15c90:	e0bffb17 	ldw	r2,-20(fp)
   15c94:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15c98:	e03fff15 	stw	zero,-4(fp)
    break;
   15c9c:	00000206 	br	15ca8 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   15ca0:	0001883a 	nop
   15ca4:	00000106 	br	15cac <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   15ca8:	0001883a 	nop
  }

  return rc;
   15cac:	e0bfff17 	ldw	r2,-4(fp)
}
   15cb0:	e037883a 	mov	sp,fp
   15cb4:	df000017 	ldw	fp,0(sp)
   15cb8:	dec00104 	addi	sp,sp,4
   15cbc:	f800283a 	ret

00015cc0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15cc0:	defff304 	addi	sp,sp,-52
   15cc4:	dfc00c15 	stw	ra,48(sp)
   15cc8:	df000b15 	stw	fp,44(sp)
   15ccc:	df000b04 	addi	fp,sp,44
   15cd0:	e13ff815 	stw	r4,-32(fp)
   15cd4:	e17ff715 	stw	r5,-36(fp)
   15cd8:	e1bff615 	stw	r6,-40(fp)
   15cdc:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   15ce0:	e0bff717 	ldw	r2,-36(fp)
   15ce4:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15ce8:	00004706 	br	15e08 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15cec:	e0bff817 	ldw	r2,-32(fp)
   15cf0:	10800a17 	ldw	r2,40(r2)
   15cf4:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   15cf8:	e0bff817 	ldw	r2,-32(fp)
   15cfc:	10800b17 	ldw	r2,44(r2)
   15d00:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   15d04:	e0fffd17 	ldw	r3,-12(fp)
   15d08:	e0bffc17 	ldw	r2,-16(fp)
   15d0c:	18800536 	bltu	r3,r2,15d24 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   15d10:	e0fffd17 	ldw	r3,-12(fp)
   15d14:	e0bffc17 	ldw	r2,-16(fp)
   15d18:	1885c83a 	sub	r2,r3,r2
   15d1c:	e0bffe15 	stw	r2,-8(fp)
   15d20:	00000406 	br	15d34 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15d24:	00c20004 	movi	r3,2048
   15d28:	e0bffc17 	ldw	r2,-16(fp)
   15d2c:	1885c83a 	sub	r2,r3,r2
   15d30:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   15d34:	e0bffe17 	ldw	r2,-8(fp)
   15d38:	10001e26 	beq	r2,zero,15db4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   15d3c:	e0fff617 	ldw	r3,-40(fp)
   15d40:	e0bffe17 	ldw	r2,-8(fp)
   15d44:	1880022e 	bgeu	r3,r2,15d50 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   15d48:	e0bff617 	ldw	r2,-40(fp)
   15d4c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15d50:	e0bff817 	ldw	r2,-32(fp)
   15d54:	10c00e04 	addi	r3,r2,56
   15d58:	e0bffc17 	ldw	r2,-16(fp)
   15d5c:	1885883a 	add	r2,r3,r2
   15d60:	e1bffe17 	ldw	r6,-8(fp)
   15d64:	100b883a 	mov	r5,r2
   15d68:	e13fff17 	ldw	r4,-4(fp)
   15d6c:	000a6880 	call	a688 <memcpy>
      ptr   += n;
   15d70:	e0ffff17 	ldw	r3,-4(fp)
   15d74:	e0bffe17 	ldw	r2,-8(fp)
   15d78:	1885883a 	add	r2,r3,r2
   15d7c:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   15d80:	e0fff617 	ldw	r3,-40(fp)
   15d84:	e0bffe17 	ldw	r2,-8(fp)
   15d88:	1885c83a 	sub	r2,r3,r2
   15d8c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15d90:	e0fffc17 	ldw	r3,-16(fp)
   15d94:	e0bffe17 	ldw	r2,-8(fp)
   15d98:	1885883a 	add	r2,r3,r2
   15d9c:	10c1ffcc 	andi	r3,r2,2047
   15da0:	e0bff817 	ldw	r2,-32(fp)
   15da4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   15da8:	e0bff617 	ldw	r2,-40(fp)
   15dac:	00bfcf16 	blt	zero,r2,15cec <altera_avalon_jtag_uart_read+0x2c>
   15db0:	00000106 	br	15db8 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   15db4:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   15db8:	e0ffff17 	ldw	r3,-4(fp)
   15dbc:	e0bff717 	ldw	r2,-36(fp)
   15dc0:	1880141e 	bne	r3,r2,15e14 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15dc4:	e0bff517 	ldw	r2,-44(fp)
   15dc8:	1090000c 	andi	r2,r2,16384
   15dcc:	1000131e 	bne	r2,zero,15e1c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15dd0:	0001883a 	nop
   15dd4:	e0bff817 	ldw	r2,-32(fp)
   15dd8:	10800a17 	ldw	r2,40(r2)
   15ddc:	e0fffd17 	ldw	r3,-12(fp)
   15de0:	1880051e 	bne	r3,r2,15df8 <altera_avalon_jtag_uart_read+0x138>
   15de4:	e0bff817 	ldw	r2,-32(fp)
   15de8:	10c00917 	ldw	r3,36(r2)
   15dec:	e0bff817 	ldw	r2,-32(fp)
   15df0:	10800117 	ldw	r2,4(r2)
   15df4:	18bff736 	bltu	r3,r2,15dd4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15df8:	e0bff817 	ldw	r2,-32(fp)
   15dfc:	10800a17 	ldw	r2,40(r2)
   15e00:	e0fffd17 	ldw	r3,-12(fp)
   15e04:	18800726 	beq	r3,r2,15e24 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   15e08:	e0bff617 	ldw	r2,-40(fp)
   15e0c:	00bfb716 	blt	zero,r2,15cec <altera_avalon_jtag_uart_read+0x2c>
   15e10:	00000506 	br	15e28 <altera_avalon_jtag_uart_read+0x168>
      break;
   15e14:	0001883a 	nop
   15e18:	00000306 	br	15e28 <altera_avalon_jtag_uart_read+0x168>
      break;
   15e1c:	0001883a 	nop
   15e20:	00000106 	br	15e28 <altera_avalon_jtag_uart_read+0x168>
      break;
   15e24:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   15e28:	e0ffff17 	ldw	r3,-4(fp)
   15e2c:	e0bff717 	ldw	r2,-36(fp)
   15e30:	18801926 	beq	r3,r2,15e98 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   15e34:	0005303a 	rdctl	r2,status
   15e38:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e3c:	e0fff917 	ldw	r3,-28(fp)
   15e40:	00bfff84 	movi	r2,-2
   15e44:	1884703a 	and	r2,r3,r2
   15e48:	1001703a 	wrctl	status,r2
  return context;
   15e4c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15e50:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15e54:	e0bff817 	ldw	r2,-32(fp)
   15e58:	10800817 	ldw	r2,32(r2)
   15e5c:	10c00054 	ori	r3,r2,1
   15e60:	e0bff817 	ldw	r2,-32(fp)
   15e64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15e68:	e0bff817 	ldw	r2,-32(fp)
   15e6c:	10800017 	ldw	r2,0(r2)
   15e70:	10800104 	addi	r2,r2,4
   15e74:	1007883a 	mov	r3,r2
   15e78:	e0bff817 	ldw	r2,-32(fp)
   15e7c:	10800817 	ldw	r2,32(r2)
   15e80:	18800035 	stwio	r2,0(r3)
   15e84:	e0bffb17 	ldw	r2,-20(fp)
   15e88:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   15e8c:	e0bffa17 	ldw	r2,-24(fp)
   15e90:	1001703a 	wrctl	status,r2
}
   15e94:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15e98:	e0ffff17 	ldw	r3,-4(fp)
   15e9c:	e0bff717 	ldw	r2,-36(fp)
   15ea0:	18800426 	beq	r3,r2,15eb4 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   15ea4:	e0ffff17 	ldw	r3,-4(fp)
   15ea8:	e0bff717 	ldw	r2,-36(fp)
   15eac:	1885c83a 	sub	r2,r3,r2
   15eb0:	00000606 	br	15ecc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   15eb4:	e0bff517 	ldw	r2,-44(fp)
   15eb8:	1090000c 	andi	r2,r2,16384
   15ebc:	10000226 	beq	r2,zero,15ec8 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   15ec0:	00bffd44 	movi	r2,-11
   15ec4:	00000106 	br	15ecc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   15ec8:	00bffec4 	movi	r2,-5
}
   15ecc:	e037883a 	mov	sp,fp
   15ed0:	dfc00117 	ldw	ra,4(sp)
   15ed4:	df000017 	ldw	fp,0(sp)
   15ed8:	dec00204 	addi	sp,sp,8
   15edc:	f800283a 	ret

00015ee0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15ee0:	defff304 	addi	sp,sp,-52
   15ee4:	dfc00c15 	stw	ra,48(sp)
   15ee8:	df000b15 	stw	fp,44(sp)
   15eec:	df000b04 	addi	fp,sp,44
   15ef0:	e13ff815 	stw	r4,-32(fp)
   15ef4:	e17ff715 	stw	r5,-36(fp)
   15ef8:	e1bff615 	stw	r6,-40(fp)
   15efc:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15f00:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15f04:	e0bff717 	ldw	r2,-36(fp)
   15f08:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15f0c:	00003706 	br	15fec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15f10:	e0bff817 	ldw	r2,-32(fp)
   15f14:	10800c17 	ldw	r2,48(r2)
   15f18:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   15f1c:	e0bff817 	ldw	r2,-32(fp)
   15f20:	10800d17 	ldw	r2,52(r2)
   15f24:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   15f28:	e0fffc17 	ldw	r3,-16(fp)
   15f2c:	e0bfff17 	ldw	r2,-4(fp)
   15f30:	1880062e 	bgeu	r3,r2,15f4c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   15f34:	e0ffff17 	ldw	r3,-4(fp)
   15f38:	e0bffc17 	ldw	r2,-16(fp)
   15f3c:	1885c83a 	sub	r2,r3,r2
   15f40:	10bfffc4 	addi	r2,r2,-1
   15f44:	e0bffe15 	stw	r2,-8(fp)
   15f48:	00000b06 	br	15f78 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   15f4c:	e0bfff17 	ldw	r2,-4(fp)
   15f50:	10000526 	beq	r2,zero,15f68 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15f54:	00c20004 	movi	r3,2048
   15f58:	e0bffc17 	ldw	r2,-16(fp)
   15f5c:	1885c83a 	sub	r2,r3,r2
   15f60:	e0bffe15 	stw	r2,-8(fp)
   15f64:	00000406 	br	15f78 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15f68:	00c1ffc4 	movi	r3,2047
   15f6c:	e0bffc17 	ldw	r2,-16(fp)
   15f70:	1885c83a 	sub	r2,r3,r2
   15f74:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   15f78:	e0bffe17 	ldw	r2,-8(fp)
   15f7c:	10001e26 	beq	r2,zero,15ff8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   15f80:	e0fff617 	ldw	r3,-40(fp)
   15f84:	e0bffe17 	ldw	r2,-8(fp)
   15f88:	1880022e 	bgeu	r3,r2,15f94 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   15f8c:	e0bff617 	ldw	r2,-40(fp)
   15f90:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15f94:	e0bff817 	ldw	r2,-32(fp)
   15f98:	10c20e04 	addi	r3,r2,2104
   15f9c:	e0bffc17 	ldw	r2,-16(fp)
   15fa0:	1885883a 	add	r2,r3,r2
   15fa4:	e1bffe17 	ldw	r6,-8(fp)
   15fa8:	e17ff717 	ldw	r5,-36(fp)
   15fac:	1009883a 	mov	r4,r2
   15fb0:	000a6880 	call	a688 <memcpy>
      ptr   += n;
   15fb4:	e0fff717 	ldw	r3,-36(fp)
   15fb8:	e0bffe17 	ldw	r2,-8(fp)
   15fbc:	1885883a 	add	r2,r3,r2
   15fc0:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   15fc4:	e0fff617 	ldw	r3,-40(fp)
   15fc8:	e0bffe17 	ldw	r2,-8(fp)
   15fcc:	1885c83a 	sub	r2,r3,r2
   15fd0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15fd4:	e0fffc17 	ldw	r3,-16(fp)
   15fd8:	e0bffe17 	ldw	r2,-8(fp)
   15fdc:	1885883a 	add	r2,r3,r2
   15fe0:	10c1ffcc 	andi	r3,r2,2047
   15fe4:	e0bff817 	ldw	r2,-32(fp)
   15fe8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   15fec:	e0bff617 	ldw	r2,-40(fp)
   15ff0:	00bfc716 	blt	zero,r2,15f10 <altera_avalon_jtag_uart_write+0x30>
   15ff4:	00000106 	br	15ffc <altera_avalon_jtag_uart_write+0x11c>
        break;
   15ff8:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   15ffc:	0005303a 	rdctl	r2,status
   16000:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16004:	e0fff917 	ldw	r3,-28(fp)
   16008:	00bfff84 	movi	r2,-2
   1600c:	1884703a 	and	r2,r3,r2
   16010:	1001703a 	wrctl	status,r2
  return context;
   16014:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16018:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1601c:	e0bff817 	ldw	r2,-32(fp)
   16020:	10800817 	ldw	r2,32(r2)
   16024:	10c00094 	ori	r3,r2,2
   16028:	e0bff817 	ldw	r2,-32(fp)
   1602c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16030:	e0bff817 	ldw	r2,-32(fp)
   16034:	10800017 	ldw	r2,0(r2)
   16038:	10800104 	addi	r2,r2,4
   1603c:	1007883a 	mov	r3,r2
   16040:	e0bff817 	ldw	r2,-32(fp)
   16044:	10800817 	ldw	r2,32(r2)
   16048:	18800035 	stwio	r2,0(r3)
   1604c:	e0bffb17 	ldw	r2,-20(fp)
   16050:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   16054:	e0bffa17 	ldw	r2,-24(fp)
   16058:	1001703a 	wrctl	status,r2
}
   1605c:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16060:	e0bff617 	ldw	r2,-40(fp)
   16064:	0080100e 	bge	zero,r2,160a8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   16068:	e0bff517 	ldw	r2,-44(fp)
   1606c:	1090000c 	andi	r2,r2,16384
   16070:	1000101e 	bne	r2,zero,160b4 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16074:	0001883a 	nop
   16078:	e0bff817 	ldw	r2,-32(fp)
   1607c:	10800d17 	ldw	r2,52(r2)
   16080:	e0ffff17 	ldw	r3,-4(fp)
   16084:	1880051e 	bne	r3,r2,1609c <altera_avalon_jtag_uart_write+0x1bc>
   16088:	e0bff817 	ldw	r2,-32(fp)
   1608c:	10c00917 	ldw	r3,36(r2)
   16090:	e0bff817 	ldw	r2,-32(fp)
   16094:	10800117 	ldw	r2,4(r2)
   16098:	18bff736 	bltu	r3,r2,16078 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1609c:	e0bff817 	ldw	r2,-32(fp)
   160a0:	10800917 	ldw	r2,36(r2)
   160a4:	1000051e 	bne	r2,zero,160bc <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   160a8:	e0bff617 	ldw	r2,-40(fp)
   160ac:	00bfcf16 	blt	zero,r2,15fec <altera_avalon_jtag_uart_write+0x10c>
   160b0:	00000306 	br	160c0 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   160b4:	0001883a 	nop
   160b8:	00000106 	br	160c0 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   160bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   160c0:	e0fff717 	ldw	r3,-36(fp)
   160c4:	e0bffd17 	ldw	r2,-12(fp)
   160c8:	18800426 	beq	r3,r2,160dc <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   160cc:	e0fff717 	ldw	r3,-36(fp)
   160d0:	e0bffd17 	ldw	r2,-12(fp)
   160d4:	1885c83a 	sub	r2,r3,r2
   160d8:	00000606 	br	160f4 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   160dc:	e0bff517 	ldw	r2,-44(fp)
   160e0:	1090000c 	andi	r2,r2,16384
   160e4:	10000226 	beq	r2,zero,160f0 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   160e8:	00bffd44 	movi	r2,-11
   160ec:	00000106 	br	160f4 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   160f0:	00bffec4 	movi	r2,-5
}
   160f4:	e037883a 	mov	sp,fp
   160f8:	dfc00117 	ldw	ra,4(sp)
   160fc:	df000017 	ldw	fp,0(sp)
   16100:	dec00204 	addi	sp,sp,8
   16104:	f800283a 	ret

00016108 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16108:	defff904 	addi	sp,sp,-28
   1610c:	dfc00615 	stw	ra,24(sp)
   16110:	df000515 	stw	fp,20(sp)
   16114:	df000504 	addi	fp,sp,20
   16118:	e13ffc15 	stw	r4,-16(fp)
   1611c:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16120:	0007883a 	mov	r3,zero
   16124:	e0bffc17 	ldw	r2,-16(fp)
   16128:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1612c:	e0bffc17 	ldw	r2,-16(fp)
   16130:	10800104 	addi	r2,r2,4
   16134:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   16138:	0005303a 	rdctl	r2,status
   1613c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16140:	e0fffd17 	ldw	r3,-12(fp)
   16144:	00bfff84 	movi	r2,-2
   16148:	1884703a 	and	r2,r3,r2
   1614c:	1001703a 	wrctl	status,r2
  return context;
   16150:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16154:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   16158:	00174580 	call	17458 <alt_tick>
   1615c:	e0bfff17 	ldw	r2,-4(fp)
   16160:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   16164:	e0bffe17 	ldw	r2,-8(fp)
   16168:	1001703a 	wrctl	status,r2
}
   1616c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   16170:	0001883a 	nop
   16174:	e037883a 	mov	sp,fp
   16178:	dfc00117 	ldw	ra,4(sp)
   1617c:	df000017 	ldw	fp,0(sp)
   16180:	dec00204 	addi	sp,sp,8
   16184:	f800283a 	ret

00016188 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16188:	defff904 	addi	sp,sp,-28
   1618c:	dfc00615 	stw	ra,24(sp)
   16190:	df000515 	stw	fp,20(sp)
   16194:	df000504 	addi	fp,sp,20
   16198:	e13ffe15 	stw	r4,-8(fp)
   1619c:	e17ffd15 	stw	r5,-12(fp)
   161a0:	e1bffc15 	stw	r6,-16(fp)
   161a4:	e1fffb15 	stw	r7,-20(fp)
   161a8:	e0bffb17 	ldw	r2,-20(fp)
   161ac:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   161b0:	d0a73b17 	ldw	r2,-25364(gp)
   161b4:	1000031e 	bne	r2,zero,161c4 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   161b8:	e0bfff17 	ldw	r2,-4(fp)
   161bc:	d0a73b15 	stw	r2,-25364(gp)
    return 0;
   161c0:	00000106 	br	161c8 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   161c4:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   161c8:	e0bffe17 	ldw	r2,-8(fp)
   161cc:	10800104 	addi	r2,r2,4
   161d0:	00c001c4 	movi	r3,7
   161d4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   161d8:	01800074 	movhi	r6,1
   161dc:	31984204 	addi	r6,r6,24840
   161e0:	e17ffe17 	ldw	r5,-8(fp)
   161e4:	e13ffc17 	ldw	r4,-16(fp)
   161e8:	0016fbc0 	call	16fbc <alt_irq_register>
#endif  
}
   161ec:	0001883a 	nop
   161f0:	e037883a 	mov	sp,fp
   161f4:	dfc00117 	ldw	ra,4(sp)
   161f8:	df000017 	ldw	fp,0(sp)
   161fc:	dec00204 	addi	sp,sp,8
   16200:	f800283a 	ret

00016204 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   16204:	defffc04 	addi	sp,sp,-16
   16208:	df000315 	stw	fp,12(sp)
   1620c:	df000304 	addi	fp,sp,12
   16210:	e13ffe15 	stw	r4,-8(fp)
   16214:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   16218:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
   1621c:	e0bffd17 	ldw	r2,-12(fp)
   16220:	1000061e 	bne	r2,zero,1623c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   16224:	e0bffe17 	ldw	r2,-8(fp)
   16228:	1007883a 	mov	r3,r2
   1622c:	e0bfffc3 	ldbu	r2,-1(fp)
   16230:	10c4b03a 	or	r2,r2,r3
   16234:	e0bfffc5 	stb	r2,-1(fp)
   16238:	00000806 	br	1625c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1623c:	e0bffe17 	ldw	r2,-8(fp)
   16240:	1007883a 	mov	r3,r2
   16244:	e0bfffc3 	ldbu	r2,-1(fp)
   16248:	10c4b03a 	or	r2,r2,r3
   1624c:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
   16250:	e0bfffc3 	ldbu	r2,-1(fp)
   16254:	10801014 	ori	r2,r2,64
   16258:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1625c:	e0ffffc3 	ldbu	r3,-1(fp)
   16260:	00bfe004 	movi	r2,-128
   16264:	1884b03a 	or	r2,r3,r2
}
   16268:	e037883a 	mov	sp,fp
   1626c:	df000017 	ldw	fp,0(sp)
   16270:	dec00104 	addi	sp,sp,4
   16274:	f800283a 	ret

00016278 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   16278:	defffd04 	addi	sp,sp,-12
   1627c:	df000215 	stw	fp,8(sp)
   16280:	df000204 	addi	fp,sp,8
   16284:	e13fff15 	stw	r4,-4(fp)
   16288:	2805883a 	mov	r2,r5
   1628c:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   16290:	e0bfff17 	ldw	r2,-4(fp)
   16294:	10800a17 	ldw	r2,40(r2)
   16298:	1007883a 	mov	r3,r2
   1629c:	e0bffe03 	ldbu	r2,-8(fp)
   162a0:	18800025 	stbio	r2,0(r3)
}
   162a4:	0001883a 	nop
   162a8:	e037883a 	mov	sp,fp
   162ac:	df000017 	ldw	fp,0(sp)
   162b0:	dec00104 	addi	sp,sp,4
   162b4:	f800283a 	ret

000162b8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   162b8:	defffe04 	addi	sp,sp,-8
   162bc:	df000115 	stw	fp,4(sp)
   162c0:	df000104 	addi	fp,sp,4
   162c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   162c8:	e0bfff17 	ldw	r2,-4(fp)
   162cc:	10800a17 	ldw	r2,40(r2)
   162d0:	1007883a 	mov	r3,r2
   162d4:	00800044 	movi	r2,1
   162d8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   162dc:	0001883a 	nop
   162e0:	e037883a 	mov	sp,fp
   162e4:	df000017 	ldw	fp,0(sp)
   162e8:	dec00104 	addi	sp,sp,4
   162ec:	f800283a 	ret

000162f0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   162f0:	defffc04 	addi	sp,sp,-16
   162f4:	dfc00315 	stw	ra,12(sp)
   162f8:	df000215 	stw	fp,8(sp)
   162fc:	df000204 	addi	fp,sp,8
   16300:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   16304:	d1600604 	addi	r5,gp,-32744
   16308:	e13ffe17 	ldw	r4,-8(fp)
   1630c:	0016dbc0 	call	16dbc <alt_find_dev>
   16310:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   16314:	e0bfff17 	ldw	r2,-4(fp)
}
   16318:	e037883a 	mov	sp,fp
   1631c:	dfc00117 	ldw	ra,4(sp)
   16320:	df000017 	ldw	fp,0(sp)
   16324:	dec00204 	addi	sp,sp,8
   16328:	f800283a 	ret

0001632c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1632c:	defffb04 	addi	sp,sp,-20
   16330:	df000415 	stw	fp,16(sp)
   16334:	df000404 	addi	fp,sp,16
   16338:	e13ffe15 	stw	r4,-8(fp)
   1633c:	e17ffd15 	stw	r5,-12(fp)
   16340:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   16344:	e03fff15 	stw	zero,-4(fp)
   16348:	00000f06 	br	16388 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1634c:	e0bffe17 	ldw	r2,-8(fp)
   16350:	10800a17 	ldw	r2,40(r2)
   16354:	10800044 	addi	r2,r2,1
   16358:	1009883a 	mov	r4,r2
   1635c:	e0fffd17 	ldw	r3,-12(fp)
   16360:	e0bfff17 	ldw	r2,-4(fp)
   16364:	1885883a 	add	r2,r3,r2
   16368:	10800003 	ldbu	r2,0(r2)
   1636c:	10803fcc 	andi	r2,r2,255
   16370:	1080201c 	xori	r2,r2,128
   16374:	10bfe004 	addi	r2,r2,-128
   16378:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
   1637c:	e0bfff17 	ldw	r2,-4(fp)
   16380:	10800044 	addi	r2,r2,1
   16384:	e0bfff15 	stw	r2,-4(fp)
   16388:	e0ffff17 	ldw	r3,-4(fp)
   1638c:	e0bffc17 	ldw	r2,-16(fp)
   16390:	18bfee36 	bltu	r3,r2,1634c <alt_up_character_lcd_write+0x20>
	}
}
   16394:	0001883a 	nop
   16398:	0001883a 	nop
   1639c:	e037883a 	mov	sp,fp
   163a0:	df000017 	ldw	fp,0(sp)
   163a4:	dec00104 	addi	sp,sp,4
   163a8:	f800283a 	ret

000163ac <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   163ac:	defffd04 	addi	sp,sp,-12
   163b0:	df000215 	stw	fp,8(sp)
   163b4:	df000204 	addi	fp,sp,8
   163b8:	e13fff15 	stw	r4,-4(fp)
   163bc:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
   163c0:	00000d06 	br	163f8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   163c4:	e0bfff17 	ldw	r2,-4(fp)
   163c8:	10800a17 	ldw	r2,40(r2)
   163cc:	10800044 	addi	r2,r2,1
   163d0:	1007883a 	mov	r3,r2
   163d4:	e0bffe17 	ldw	r2,-8(fp)
   163d8:	10800003 	ldbu	r2,0(r2)
   163dc:	10803fcc 	andi	r2,r2,255
   163e0:	1080201c 	xori	r2,r2,128
   163e4:	10bfe004 	addi	r2,r2,-128
   163e8:	18800025 	stbio	r2,0(r3)
		++ptr;
   163ec:	e0bffe17 	ldw	r2,-8(fp)
   163f0:	10800044 	addi	r2,r2,1
   163f4:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
   163f8:	e0bffe17 	ldw	r2,-8(fp)
   163fc:	10800003 	ldbu	r2,0(r2)
   16400:	10803fcc 	andi	r2,r2,255
   16404:	1080201c 	xori	r2,r2,128
   16408:	10bfe004 	addi	r2,r2,-128
   1640c:	103fed1e 	bne	r2,zero,163c4 <alt_up_character_lcd_string+0x18>
	}
}
   16410:	0001883a 	nop
   16414:	0001883a 	nop
   16418:	e037883a 	mov	sp,fp
   1641c:	df000017 	ldw	fp,0(sp)
   16420:	dec00104 	addi	sp,sp,4
   16424:	f800283a 	ret

00016428 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   16428:	defffb04 	addi	sp,sp,-20
   1642c:	dfc00415 	stw	ra,16(sp)
   16430:	df000315 	stw	fp,12(sp)
   16434:	df000304 	addi	fp,sp,12
   16438:	e13fff15 	stw	r4,-4(fp)
   1643c:	e17ffe15 	stw	r5,-8(fp)
   16440:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   16444:	e0bfff17 	ldw	r2,-4(fp)
   16448:	10800017 	ldw	r2,0(r2)
   1644c:	e0fffd17 	ldw	r3,-12(fp)
   16450:	180d883a 	mov	r6,r3
   16454:	e17ffe17 	ldw	r5,-8(fp)
   16458:	1009883a 	mov	r4,r2
   1645c:	001632c0 	call	1632c <alt_up_character_lcd_write>
	return 0;
   16460:	0005883a 	mov	r2,zero
}
   16464:	e037883a 	mov	sp,fp
   16468:	dfc00117 	ldw	ra,4(sp)
   1646c:	df000017 	ldw	fp,0(sp)
   16470:	dec00204 	addi	sp,sp,8
   16474:	f800283a 	ret

00016478 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   16478:	defffa04 	addi	sp,sp,-24
   1647c:	dfc00515 	stw	ra,20(sp)
   16480:	df000415 	stw	fp,16(sp)
   16484:	df000404 	addi	fp,sp,16
   16488:	e13ffe15 	stw	r4,-8(fp)
   1648c:	e17ffd15 	stw	r5,-12(fp)
   16490:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   16494:	e0bffd17 	ldw	r2,-12(fp)
   16498:	10800a28 	cmpgeui	r2,r2,40
   1649c:	1000031e 	bne	r2,zero,164ac <alt_up_character_lcd_set_cursor_pos+0x34>
   164a0:	e0bffc17 	ldw	r2,-16(fp)
   164a4:	108000b0 	cmpltui	r2,r2,2
   164a8:	1000021e 	bne	r2,zero,164b4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   164ac:	00bfffc4 	movi	r2,-1
   164b0:	00000906 	br	164d8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   164b4:	e17ffc17 	ldw	r5,-16(fp)
   164b8:	e13ffd17 	ldw	r4,-12(fp)
   164bc:	00162040 	call	16204 <get_DDRAM_addr>
   164c0:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   164c4:	e0bfffc3 	ldbu	r2,-1(fp)
   164c8:	100b883a 	mov	r5,r2
   164cc:	e13ffe17 	ldw	r4,-8(fp)
   164d0:	00162780 	call	16278 <alt_up_character_lcd_send_cmd>
	return 0;
   164d4:	0005883a 	mov	r2,zero
}
   164d8:	e037883a 	mov	sp,fp
   164dc:	dfc00117 	ldw	ra,4(sp)
   164e0:	df000017 	ldw	fp,0(sp)
   164e4:	dec00204 	addi	sp,sp,8
   164e8:	f800283a 	ret

000164ec <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   164ec:	defffb04 	addi	sp,sp,-20
   164f0:	dfc00415 	stw	ra,16(sp)
   164f4:	df000315 	stw	fp,12(sp)
   164f8:	df000304 	addi	fp,sp,12
   164fc:	e13ffe15 	stw	r4,-8(fp)
   16500:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   16504:	e0bffd17 	ldw	r2,-12(fp)
   16508:	10001526 	beq	r2,zero,16560 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1650c:	e0bffd17 	ldw	r2,-12(fp)
   16510:	0080020e 	bge	zero,r2,1651c <alt_up_character_lcd_shift_cursor+0x30>
   16514:	00800504 	movi	r2,20
   16518:	00000106 	br	16520 <alt_up_character_lcd_shift_cursor+0x34>
   1651c:	00800404 	movi	r2,16
   16520:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   16524:	e0bffd17 	ldw	r2,-12(fp)
   16528:	1000010e 	bge	r2,zero,16530 <alt_up_character_lcd_shift_cursor+0x44>
   1652c:	0085c83a 	sub	r2,zero,r2
   16530:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   16534:	00000406 	br	16548 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   16538:	e0bfff83 	ldbu	r2,-2(fp)
   1653c:	100b883a 	mov	r5,r2
   16540:	e13ffe17 	ldw	r4,-8(fp)
   16544:	00162780 	call	16278 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   16548:	e0bfffc3 	ldbu	r2,-1(fp)
   1654c:	10ffffc4 	addi	r3,r2,-1
   16550:	e0ffffc5 	stb	r3,-1(fp)
   16554:	10803fcc 	andi	r2,r2,255
   16558:	103ff71e 	bne	r2,zero,16538 <alt_up_character_lcd_shift_cursor+0x4c>
   1655c:	00000106 	br	16564 <alt_up_character_lcd_shift_cursor+0x78>
		return;
   16560:	0001883a 	nop
}
   16564:	e037883a 	mov	sp,fp
   16568:	dfc00117 	ldw	ra,4(sp)
   1656c:	df000017 	ldw	fp,0(sp)
   16570:	dec00204 	addi	sp,sp,8
   16574:	f800283a 	ret

00016578 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   16578:	defffb04 	addi	sp,sp,-20
   1657c:	dfc00415 	stw	ra,16(sp)
   16580:	df000315 	stw	fp,12(sp)
   16584:	df000304 	addi	fp,sp,12
   16588:	e13ffe15 	stw	r4,-8(fp)
   1658c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   16590:	e0bffd17 	ldw	r2,-12(fp)
   16594:	10001526 	beq	r2,zero,165ec <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   16598:	e0bffd17 	ldw	r2,-12(fp)
   1659c:	0080020e 	bge	zero,r2,165a8 <alt_up_character_lcd_shift_display+0x30>
   165a0:	00800704 	movi	r2,28
   165a4:	00000106 	br	165ac <alt_up_character_lcd_shift_display+0x34>
   165a8:	00800604 	movi	r2,24
   165ac:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   165b0:	e0bffd17 	ldw	r2,-12(fp)
   165b4:	1000010e 	bge	r2,zero,165bc <alt_up_character_lcd_shift_display+0x44>
   165b8:	0085c83a 	sub	r2,zero,r2
   165bc:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   165c0:	00000406 	br	165d4 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   165c4:	e0bfff83 	ldbu	r2,-2(fp)
   165c8:	100b883a 	mov	r5,r2
   165cc:	e13ffe17 	ldw	r4,-8(fp)
   165d0:	00162780 	call	16278 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   165d4:	e0bfffc3 	ldbu	r2,-1(fp)
   165d8:	10ffffc4 	addi	r3,r2,-1
   165dc:	e0ffffc5 	stb	r3,-1(fp)
   165e0:	10803fcc 	andi	r2,r2,255
   165e4:	103ff71e 	bne	r2,zero,165c4 <alt_up_character_lcd_shift_display+0x4c>
   165e8:	00000106 	br	165f0 <alt_up_character_lcd_shift_display+0x78>
		return;
   165ec:	0001883a 	nop
}
   165f0:	e037883a 	mov	sp,fp
   165f4:	dfc00117 	ldw	ra,4(sp)
   165f8:	df000017 	ldw	fp,0(sp)
   165fc:	dec00204 	addi	sp,sp,8
   16600:	f800283a 	ret

00016604 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   16604:	defffa04 	addi	sp,sp,-24
   16608:	dfc00515 	stw	ra,20(sp)
   1660c:	df000415 	stw	fp,16(sp)
   16610:	df000404 	addi	fp,sp,16
   16614:	e13ffe15 	stw	r4,-8(fp)
   16618:	e17ffd15 	stw	r5,-12(fp)
   1661c:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   16620:	e0bffd17 	ldw	r2,-12(fp)
   16624:	10800a28 	cmpgeui	r2,r2,40
   16628:	1000031e 	bne	r2,zero,16638 <alt_up_character_lcd_erase_pos+0x34>
   1662c:	e0bffc17 	ldw	r2,-16(fp)
   16630:	108000b0 	cmpltui	r2,r2,2
   16634:	1000021e 	bne	r2,zero,16640 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   16638:	00bfffc4 	movi	r2,-1
   1663c:	00000f06 	br	1667c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   16640:	e17ffc17 	ldw	r5,-16(fp)
   16644:	e13ffd17 	ldw	r4,-12(fp)
   16648:	00162040 	call	16204 <get_DDRAM_addr>
   1664c:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   16650:	e0bfffc3 	ldbu	r2,-1(fp)
   16654:	100b883a 	mov	r5,r2
   16658:	e13ffe17 	ldw	r4,-8(fp)
   1665c:	00162780 	call	16278 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   16660:	e0bffe17 	ldw	r2,-8(fp)
   16664:	10800a17 	ldw	r2,40(r2)
   16668:	10800044 	addi	r2,r2,1
   1666c:	1007883a 	mov	r3,r2
   16670:	00800084 	movi	r2,2
   16674:	18800025 	stbio	r2,0(r3)
	return 0;
   16678:	0005883a 	mov	r2,zero
}
   1667c:	e037883a 	mov	sp,fp
   16680:	dfc00117 	ldw	ra,4(sp)
   16684:	df000017 	ldw	fp,0(sp)
   16688:	dec00204 	addi	sp,sp,8
   1668c:	f800283a 	ret

00016690 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   16690:	defffd04 	addi	sp,sp,-12
   16694:	dfc00215 	stw	ra,8(sp)
   16698:	df000115 	stw	fp,4(sp)
   1669c:	df000104 	addi	fp,sp,4
   166a0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   166a4:	01400304 	movi	r5,12
   166a8:	e13fff17 	ldw	r4,-4(fp)
   166ac:	00162780 	call	16278 <alt_up_character_lcd_send_cmd>
}
   166b0:	0001883a 	nop
   166b4:	e037883a 	mov	sp,fp
   166b8:	dfc00117 	ldw	ra,4(sp)
   166bc:	df000017 	ldw	fp,0(sp)
   166c0:	dec00204 	addi	sp,sp,8
   166c4:	f800283a 	ret

000166c8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   166c8:	defffd04 	addi	sp,sp,-12
   166cc:	dfc00215 	stw	ra,8(sp)
   166d0:	df000115 	stw	fp,4(sp)
   166d4:	df000104 	addi	fp,sp,4
   166d8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   166dc:	014003c4 	movi	r5,15
   166e0:	e13fff17 	ldw	r4,-4(fp)
   166e4:	00162780 	call	16278 <alt_up_character_lcd_send_cmd>
}
   166e8:	0001883a 	nop
   166ec:	e037883a 	mov	sp,fp
   166f0:	dfc00117 	ldw	ra,4(sp)
   166f4:	df000017 	ldw	fp,0(sp)
   166f8:	dec00204 	addi	sp,sp,8
   166fc:	f800283a 	ret

00016700 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   16700:	defffd04 	addi	sp,sp,-12
   16704:	df000215 	stw	fp,8(sp)
   16708:	df000204 	addi	fp,sp,8
   1670c:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   16710:	e0bffe17 	ldw	r2,-8(fp)
   16714:	10800a17 	ldw	r2,40(r2)
   16718:	10800104 	addi	r2,r2,4
   1671c:	10800037 	ldwio	r2,0(r2)
   16720:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   16724:	e0bfff17 	ldw	r2,-4(fp)
   16728:	10800054 	ori	r2,r2,1
   1672c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   16730:	e0bffe17 	ldw	r2,-8(fp)
   16734:	10800a17 	ldw	r2,40(r2)
   16738:	10800104 	addi	r2,r2,4
   1673c:	1007883a 	mov	r3,r2
   16740:	e0bfff17 	ldw	r2,-4(fp)
   16744:	18800035 	stwio	r2,0(r3)
}
   16748:	0001883a 	nop
   1674c:	e037883a 	mov	sp,fp
   16750:	df000017 	ldw	fp,0(sp)
   16754:	dec00104 	addi	sp,sp,4
   16758:	f800283a 	ret

0001675c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1675c:	defffd04 	addi	sp,sp,-12
   16760:	df000215 	stw	fp,8(sp)
   16764:	df000204 	addi	fp,sp,8
   16768:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1676c:	e0bffe17 	ldw	r2,-8(fp)
   16770:	10800a17 	ldw	r2,40(r2)
   16774:	10800104 	addi	r2,r2,4
   16778:	10800037 	ldwio	r2,0(r2)
   1677c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   16780:	e0ffff17 	ldw	r3,-4(fp)
   16784:	00bfff84 	movi	r2,-2
   16788:	1884703a 	and	r2,r3,r2
   1678c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   16790:	e0bffe17 	ldw	r2,-8(fp)
   16794:	10800a17 	ldw	r2,40(r2)
   16798:	10800104 	addi	r2,r2,4
   1679c:	1007883a 	mov	r3,r2
   167a0:	e0bfff17 	ldw	r2,-4(fp)
   167a4:	18800035 	stwio	r2,0(r3)
}
   167a8:	0001883a 	nop
   167ac:	e037883a 	mov	sp,fp
   167b0:	df000017 	ldw	fp,0(sp)
   167b4:	dec00104 	addi	sp,sp,4
   167b8:	f800283a 	ret

000167bc <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   167bc:	defffd04 	addi	sp,sp,-12
   167c0:	df000215 	stw	fp,8(sp)
   167c4:	df000204 	addi	fp,sp,8
   167c8:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
   167cc:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   167d0:	e0bffe17 	ldw	r2,-8(fp)
   167d4:	10800a17 	ldw	r2,40(r2)
   167d8:	10800084 	addi	r2,r2,2
   167dc:	1080002b 	ldhuio	r2,0(r2)
   167e0:	10bfffcc 	andi	r2,r2,65535
   167e4:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   167e8:	e0bfff8b 	ldhu	r2,-2(fp)
}
   167ec:	e037883a 	mov	sp,fp
   167f0:	df000017 	ldw	fp,0(sp)
   167f4:	dec00104 	addi	sp,sp,4
   167f8:	f800283a 	ret

000167fc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   167fc:	defffd04 	addi	sp,sp,-12
   16800:	df000215 	stw	fp,8(sp)
   16804:	df000204 	addi	fp,sp,8
   16808:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1680c:	e0bffe17 	ldw	r2,-8(fp)
   16810:	10800a17 	ldw	r2,40(r2)
   16814:	10800104 	addi	r2,r2,4
   16818:	10800037 	ldwio	r2,0(r2)
   1681c:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   16820:	e0bfff17 	ldw	r2,-4(fp)
   16824:	1004d43a 	srli	r2,r2,16
}
   16828:	e037883a 	mov	sp,fp
   1682c:	df000017 	ldw	fp,0(sp)
   16830:	dec00104 	addi	sp,sp,4
   16834:	f800283a 	ret

00016838 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   16838:	defffd04 	addi	sp,sp,-12
   1683c:	df000215 	stw	fp,8(sp)
   16840:	df000204 	addi	fp,sp,8
   16844:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   16848:	e0bffe17 	ldw	r2,-8(fp)
   1684c:	1004d27a 	srli	r2,r2,9
   16850:	1080004c 	andi	r2,r2,1
   16854:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
   16858:	e0bfff17 	ldw	r2,-4(fp)
   1685c:	10000226 	beq	r2,zero,16868 <alt_up_rs232_check_parity+0x30>
   16860:	00bfffc4 	movi	r2,-1
   16864:	00000106 	br	1686c <alt_up_rs232_check_parity+0x34>
   16868:	0005883a 	mov	r2,zero
}
   1686c:	e037883a 	mov	sp,fp
   16870:	df000017 	ldw	fp,0(sp)
   16874:	dec00104 	addi	sp,sp,4
   16878:	f800283a 	ret

0001687c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1687c:	defffd04 	addi	sp,sp,-12
   16880:	df000215 	stw	fp,8(sp)
   16884:	df000204 	addi	fp,sp,8
   16888:	e13fff15 	stw	r4,-4(fp)
   1688c:	2805883a 	mov	r2,r5
   16890:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   16894:	e0bfff17 	ldw	r2,-4(fp)
   16898:	10800a17 	ldw	r2,40(r2)
   1689c:	1007883a 	mov	r3,r2
   168a0:	e0bffe03 	ldbu	r2,-8(fp)
   168a4:	18800035 	stwio	r2,0(r3)
	return 0;
   168a8:	0005883a 	mov	r2,zero
}
   168ac:	e037883a 	mov	sp,fp
   168b0:	df000017 	ldw	fp,0(sp)
   168b4:	dec00104 	addi	sp,sp,4
   168b8:	f800283a 	ret

000168bc <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   168bc:	defffa04 	addi	sp,sp,-24
   168c0:	dfc00515 	stw	ra,20(sp)
   168c4:	df000415 	stw	fp,16(sp)
   168c8:	df000404 	addi	fp,sp,16
   168cc:	e13ffe15 	stw	r4,-8(fp)
   168d0:	e17ffd15 	stw	r5,-12(fp)
   168d4:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   168d8:	e0bffe17 	ldw	r2,-8(fp)
   168dc:	10800a17 	ldw	r2,40(r2)
   168e0:	10800037 	ldwio	r2,0(r2)
   168e4:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   168e8:	e0bfff17 	ldw	r2,-4(fp)
   168ec:	1007883a 	mov	r3,r2
   168f0:	e0bffd17 	ldw	r2,-12(fp)
   168f4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   168f8:	e13fff17 	ldw	r4,-4(fp)
   168fc:	00168380 	call	16838 <alt_up_rs232_check_parity>
   16900:	1007883a 	mov	r3,r2
   16904:	e0bffc17 	ldw	r2,-16(fp)
   16908:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1690c:	e0bfff17 	ldw	r2,-4(fp)
   16910:	1004d3fa 	srli	r2,r2,15
   16914:	1080004c 	andi	r2,r2,1
   16918:	10bfffc4 	addi	r2,r2,-1
}
   1691c:	e037883a 	mov	sp,fp
   16920:	dfc00117 	ldw	ra,4(sp)
   16924:	df000017 	ldw	fp,0(sp)
   16928:	dec00204 	addi	sp,sp,8
   1692c:	f800283a 	ret

00016930 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   16930:	defff804 	addi	sp,sp,-32
   16934:	dfc00715 	stw	ra,28(sp)
   16938:	df000615 	stw	fp,24(sp)
   1693c:	df000604 	addi	fp,sp,24
   16940:	e13ffc15 	stw	r4,-16(fp)
   16944:	e17ffb15 	stw	r5,-20(fp)
   16948:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1694c:	e0bffc17 	ldw	r2,-16(fp)
   16950:	10800017 	ldw	r2,0(r2)
   16954:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   16958:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
   1695c:	00000c06 	br	16990 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   16960:	e0bffb17 	ldw	r2,-20(fp)
   16964:	10c00044 	addi	r3,r2,1
   16968:	e0fffb15 	stw	r3,-20(fp)
   1696c:	e0fffdc4 	addi	r3,fp,-9
   16970:	180d883a 	mov	r6,r3
   16974:	100b883a 	mov	r5,r2
   16978:	e13ffe17 	ldw	r4,-8(fp)
   1697c:	00168bc0 	call	168bc <alt_up_rs232_read_data>
   16980:	1000081e 	bne	r2,zero,169a4 <alt_up_rs232_read_fd+0x74>
			count++;
   16984:	e0bfff17 	ldw	r2,-4(fp)
   16988:	10800044 	addi	r2,r2,1
   1698c:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
   16990:	e0bffa17 	ldw	r2,-24(fp)
   16994:	10ffffc4 	addi	r3,r2,-1
   16998:	e0fffa15 	stw	r3,-24(fp)
   1699c:	103ff01e 	bne	r2,zero,16960 <alt_up_rs232_read_fd+0x30>
   169a0:	00000106 	br	169a8 <alt_up_rs232_read_fd+0x78>
		else
			break;
   169a4:	0001883a 	nop
	}
	return count;
   169a8:	e0bfff17 	ldw	r2,-4(fp)
}
   169ac:	e037883a 	mov	sp,fp
   169b0:	dfc00117 	ldw	ra,4(sp)
   169b4:	df000017 	ldw	fp,0(sp)
   169b8:	dec00204 	addi	sp,sp,8
   169bc:	f800283a 	ret

000169c0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   169c0:	defff904 	addi	sp,sp,-28
   169c4:	dfc00615 	stw	ra,24(sp)
   169c8:	df000515 	stw	fp,20(sp)
   169cc:	df000504 	addi	fp,sp,20
   169d0:	e13ffd15 	stw	r4,-12(fp)
   169d4:	e17ffc15 	stw	r5,-16(fp)
   169d8:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   169dc:	e0bffd17 	ldw	r2,-12(fp)
   169e0:	10800017 	ldw	r2,0(r2)
   169e4:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   169e8:	e03fff15 	stw	zero,-4(fp)
	while(len--)
   169ec:	00000d06 	br	16a24 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   169f0:	e0bffc17 	ldw	r2,-16(fp)
   169f4:	10800003 	ldbu	r2,0(r2)
   169f8:	10803fcc 	andi	r2,r2,255
   169fc:	100b883a 	mov	r5,r2
   16a00:	e13ffe17 	ldw	r4,-8(fp)
   16a04:	001687c0 	call	1687c <alt_up_rs232_write_data>
   16a08:	10000b1e 	bne	r2,zero,16a38 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   16a0c:	e0bfff17 	ldw	r2,-4(fp)
   16a10:	10800044 	addi	r2,r2,1
   16a14:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
   16a18:	e0bffc17 	ldw	r2,-16(fp)
   16a1c:	10800044 	addi	r2,r2,1
   16a20:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
   16a24:	e0bffb17 	ldw	r2,-20(fp)
   16a28:	10ffffc4 	addi	r3,r2,-1
   16a2c:	e0fffb15 	stw	r3,-20(fp)
   16a30:	103fef1e 	bne	r2,zero,169f0 <alt_up_rs232_write_fd+0x30>
   16a34:	00000106 	br	16a3c <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
   16a38:	0001883a 	nop
	}
	return count;
   16a3c:	e0bfff17 	ldw	r2,-4(fp)
}
   16a40:	e037883a 	mov	sp,fp
   16a44:	dfc00117 	ldw	ra,4(sp)
   16a48:	df000017 	ldw	fp,0(sp)
   16a4c:	dec00204 	addi	sp,sp,8
   16a50:	f800283a 	ret

00016a54 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   16a54:	defffc04 	addi	sp,sp,-16
   16a58:	dfc00315 	stw	ra,12(sp)
   16a5c:	df000215 	stw	fp,8(sp)
   16a60:	df000204 	addi	fp,sp,8
   16a64:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   16a68:	d1600604 	addi	r5,gp,-32744
   16a6c:	e13ffe17 	ldw	r4,-8(fp)
   16a70:	0016dbc0 	call	16dbc <alt_find_dev>
   16a74:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   16a78:	e0bfff17 	ldw	r2,-4(fp)
}
   16a7c:	e037883a 	mov	sp,fp
   16a80:	dfc00117 	ldw	ra,4(sp)
   16a84:	df000017 	ldw	fp,0(sp)
   16a88:	dec00204 	addi	sp,sp,8
   16a8c:	f800283a 	ret

00016a90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   16a90:	defff404 	addi	sp,sp,-48
   16a94:	df000b15 	stw	fp,44(sp)
   16a98:	df000b04 	addi	fp,sp,44
   16a9c:	e13ff815 	stw	r4,-32(fp)
   16aa0:	e17ff715 	stw	r5,-36(fp)
   16aa4:	e1bff615 	stw	r6,-40(fp)
   16aa8:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   16aac:	e03ffe15 	stw	zero,-8(fp)
   16ab0:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   16ab4:	d0a73b17 	ldw	r2,-25364(gp)
  
  if (alt_ticks_per_second ())
   16ab8:	10004826 	beq	r2,zero,16bdc <alt_alarm_start+0x14c>
  {
    if (alarm)
   16abc:	e0bff817 	ldw	r2,-32(fp)
   16ac0:	10004426 	beq	r2,zero,16bd4 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   16ac4:	e0bff817 	ldw	r2,-32(fp)
   16ac8:	e0fff617 	ldw	r3,-40(fp)
   16acc:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   16ad0:	e0bff817 	ldw	r2,-32(fp)
   16ad4:	e0fff517 	ldw	r3,-44(fp)
   16ad8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   16adc:	0005303a 	rdctl	r2,status
   16ae0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ae4:	e0fff917 	ldw	r3,-28(fp)
   16ae8:	00bfff84 	movi	r2,-2
   16aec:	1884703a 	and	r2,r3,r2
   16af0:	1001703a 	wrctl	status,r2
  return context;
   16af4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   16af8:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16afc:	d0a73c17 	ldw	r2,-25360(gp)
   16b00:	d0e73d17 	ldw	r3,-25356(gp)
      
      current_nticks = alt_nticks();
   16b04:	e0bffe15 	stw	r2,-8(fp)
   16b08:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   16b0c:	e0bff717 	ldw	r2,-36(fp)
   16b10:	1011883a 	mov	r8,r2
   16b14:	0013883a 	mov	r9,zero
   16b18:	e13ffe17 	ldw	r4,-8(fp)
   16b1c:	e17fff17 	ldw	r5,-4(fp)
   16b20:	4105883a 	add	r2,r8,r4
   16b24:	120d803a 	cmpltu	r6,r2,r8
   16b28:	4947883a 	add	r3,r9,r5
   16b2c:	30c9883a 	add	r4,r6,r3
   16b30:	2007883a 	mov	r3,r4
   16b34:	1009883a 	mov	r4,r2
   16b38:	180b883a 	mov	r5,r3
   16b3c:	01800044 	movi	r6,1
   16b40:	000f883a 	mov	r7,zero
   16b44:	2185883a 	add	r2,r4,r6
   16b48:	1111803a 	cmpltu	r8,r2,r4
   16b4c:	29c7883a 	add	r3,r5,r7
   16b50:	40c9883a 	add	r4,r8,r3
   16b54:	2007883a 	mov	r3,r4
   16b58:	1009883a 	mov	r4,r2
   16b5c:	180b883a 	mov	r5,r3
   16b60:	e0bff817 	ldw	r2,-32(fp)
   16b64:	11000215 	stw	r4,8(r2)
   16b68:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16b6c:	e0bff817 	ldw	r2,-32(fp)
   16b70:	d0e00c04 	addi	r3,gp,-32720
   16b74:	e0fffb15 	stw	r3,-20(fp)
   16b78:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16b7c:	e0bffa17 	ldw	r2,-24(fp)
   16b80:	e0fffb17 	ldw	r3,-20(fp)
   16b84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16b88:	e0bffb17 	ldw	r2,-20(fp)
   16b8c:	10c00017 	ldw	r3,0(r2)
   16b90:	e0bffa17 	ldw	r2,-24(fp)
   16b94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16b98:	e0bffb17 	ldw	r2,-20(fp)
   16b9c:	10800017 	ldw	r2,0(r2)
   16ba0:	e0fffa17 	ldw	r3,-24(fp)
   16ba4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16ba8:	e0bffb17 	ldw	r2,-20(fp)
   16bac:	e0fffa17 	ldw	r3,-24(fp)
   16bb0:	10c00015 	stw	r3,0(r2)
}
   16bb4:	0001883a 	nop
   16bb8:	e0bffd17 	ldw	r2,-12(fp)
   16bbc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   16bc0:	e0bffc17 	ldw	r2,-16(fp)
   16bc4:	1001703a 	wrctl	status,r2
}
   16bc8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   16bcc:	0005883a 	mov	r2,zero
   16bd0:	00000306 	br	16be0 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   16bd4:	00bffa84 	movi	r2,-22
   16bd8:	00000106 	br	16be0 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   16bdc:	00bfde84 	movi	r2,-134
  }
}
   16be0:	e037883a 	mov	sp,fp
   16be4:	df000017 	ldw	fp,0(sp)
   16be8:	dec00104 	addi	sp,sp,4
   16bec:	f800283a 	ret

00016bf0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16bf0:	deffff04 	addi	sp,sp,-4
   16bf4:	df000015 	stw	fp,0(sp)
   16bf8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16bfc:	0001883a 	nop
   16c00:	e037883a 	mov	sp,fp
   16c04:	df000017 	ldw	fp,0(sp)
   16c08:	dec00104 	addi	sp,sp,4
   16c0c:	f800283a 	ret

00016c10 <alt_get_errno>:
{
   16c10:	defffe04 	addi	sp,sp,-8
   16c14:	dfc00115 	stw	ra,4(sp)
   16c18:	df000015 	stw	fp,0(sp)
   16c1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16c20:	d0a00917 	ldw	r2,-32732(gp)
   16c24:	10000326 	beq	r2,zero,16c34 <alt_get_errno+0x24>
   16c28:	d0a00917 	ldw	r2,-32732(gp)
   16c2c:	103ee83a 	callr	r2
   16c30:	00000106 	br	16c38 <alt_get_errno+0x28>
   16c34:	d0a73504 	addi	r2,gp,-25388
}
   16c38:	e037883a 	mov	sp,fp
   16c3c:	dfc00117 	ldw	ra,4(sp)
   16c40:	df000017 	ldw	fp,0(sp)
   16c44:	dec00204 	addi	sp,sp,8
   16c48:	f800283a 	ret

00016c4c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16c4c:	defffa04 	addi	sp,sp,-24
   16c50:	dfc00515 	stw	ra,20(sp)
   16c54:	df000415 	stw	fp,16(sp)
   16c58:	df000404 	addi	fp,sp,16
   16c5c:	e13ffd15 	stw	r4,-12(fp)
   16c60:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16c64:	e0bffd17 	ldw	r2,-12(fp)
   16c68:	10000326 	beq	r2,zero,16c78 <alt_dev_llist_insert+0x2c>
   16c6c:	e0bffd17 	ldw	r2,-12(fp)
   16c70:	10800217 	ldw	r2,8(r2)
   16c74:	1000061e 	bne	r2,zero,16c90 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   16c78:	0016c100 	call	16c10 <alt_get_errno>
   16c7c:	1007883a 	mov	r3,r2
   16c80:	00800584 	movi	r2,22
   16c84:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   16c88:	00bffa84 	movi	r2,-22
   16c8c:	00001406 	br	16ce0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16c90:	e0bffd17 	ldw	r2,-12(fp)
   16c94:	e0fffc17 	ldw	r3,-16(fp)
   16c98:	e0ffff15 	stw	r3,-4(fp)
   16c9c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   16ca0:	e0bffe17 	ldw	r2,-8(fp)
   16ca4:	e0ffff17 	ldw	r3,-4(fp)
   16ca8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16cac:	e0bfff17 	ldw	r2,-4(fp)
   16cb0:	10c00017 	ldw	r3,0(r2)
   16cb4:	e0bffe17 	ldw	r2,-8(fp)
   16cb8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   16cbc:	e0bfff17 	ldw	r2,-4(fp)
   16cc0:	10800017 	ldw	r2,0(r2)
   16cc4:	e0fffe17 	ldw	r3,-8(fp)
   16cc8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16ccc:	e0bfff17 	ldw	r2,-4(fp)
   16cd0:	e0fffe17 	ldw	r3,-8(fp)
   16cd4:	10c00015 	stw	r3,0(r2)
}
   16cd8:	0001883a 	nop

  return 0;  
   16cdc:	0005883a 	mov	r2,zero
}
   16ce0:	e037883a 	mov	sp,fp
   16ce4:	dfc00117 	ldw	ra,4(sp)
   16ce8:	df000017 	ldw	fp,0(sp)
   16cec:	dec00204 	addi	sp,sp,8
   16cf0:	f800283a 	ret

00016cf4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   16cf4:	defffd04 	addi	sp,sp,-12
   16cf8:	dfc00215 	stw	ra,8(sp)
   16cfc:	df000115 	stw	fp,4(sp)
   16d00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16d04:	00800074 	movhi	r2,1
   16d08:	109e9b04 	addi	r2,r2,31340
   16d0c:	e0bfff15 	stw	r2,-4(fp)
   16d10:	00000606 	br	16d2c <_do_ctors+0x38>
        (*ctor) (); 
   16d14:	e0bfff17 	ldw	r2,-4(fp)
   16d18:	10800017 	ldw	r2,0(r2)
   16d1c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16d20:	e0bfff17 	ldw	r2,-4(fp)
   16d24:	10bfff04 	addi	r2,r2,-4
   16d28:	e0bfff15 	stw	r2,-4(fp)
   16d2c:	e0ffff17 	ldw	r3,-4(fp)
   16d30:	00800074 	movhi	r2,1
   16d34:	109e9c04 	addi	r2,r2,31344
   16d38:	18bff62e 	bgeu	r3,r2,16d14 <_do_ctors+0x20>
}
   16d3c:	0001883a 	nop
   16d40:	0001883a 	nop
   16d44:	e037883a 	mov	sp,fp
   16d48:	dfc00117 	ldw	ra,4(sp)
   16d4c:	df000017 	ldw	fp,0(sp)
   16d50:	dec00204 	addi	sp,sp,8
   16d54:	f800283a 	ret

00016d58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16d58:	defffd04 	addi	sp,sp,-12
   16d5c:	dfc00215 	stw	ra,8(sp)
   16d60:	df000115 	stw	fp,4(sp)
   16d64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16d68:	00800074 	movhi	r2,1
   16d6c:	109e9b04 	addi	r2,r2,31340
   16d70:	e0bfff15 	stw	r2,-4(fp)
   16d74:	00000606 	br	16d90 <_do_dtors+0x38>
        (*dtor) (); 
   16d78:	e0bfff17 	ldw	r2,-4(fp)
   16d7c:	10800017 	ldw	r2,0(r2)
   16d80:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16d84:	e0bfff17 	ldw	r2,-4(fp)
   16d88:	10bfff04 	addi	r2,r2,-4
   16d8c:	e0bfff15 	stw	r2,-4(fp)
   16d90:	e0ffff17 	ldw	r3,-4(fp)
   16d94:	00800074 	movhi	r2,1
   16d98:	109e9c04 	addi	r2,r2,31344
   16d9c:	18bff62e 	bgeu	r3,r2,16d78 <_do_dtors+0x20>
}
   16da0:	0001883a 	nop
   16da4:	0001883a 	nop
   16da8:	e037883a 	mov	sp,fp
   16dac:	dfc00117 	ldw	ra,4(sp)
   16db0:	df000017 	ldw	fp,0(sp)
   16db4:	dec00204 	addi	sp,sp,8
   16db8:	f800283a 	ret

00016dbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16dbc:	defffa04 	addi	sp,sp,-24
   16dc0:	dfc00515 	stw	ra,20(sp)
   16dc4:	df000415 	stw	fp,16(sp)
   16dc8:	df000404 	addi	fp,sp,16
   16dcc:	e13ffd15 	stw	r4,-12(fp)
   16dd0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16dd4:	e0bffc17 	ldw	r2,-16(fp)
   16dd8:	10800017 	ldw	r2,0(r2)
   16ddc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16de0:	e13ffd17 	ldw	r4,-12(fp)
   16de4:	000a9440 	call	a944 <strlen>
   16de8:	10800044 	addi	r2,r2,1
   16dec:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16df0:	00000d06 	br	16e28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16df4:	e0bfff17 	ldw	r2,-4(fp)
   16df8:	10800217 	ldw	r2,8(r2)
   16dfc:	e0fffe17 	ldw	r3,-8(fp)
   16e00:	180d883a 	mov	r6,r3
   16e04:	e17ffd17 	ldw	r5,-12(fp)
   16e08:	1009883a 	mov	r4,r2
   16e0c:	00178480 	call	17848 <memcmp>
   16e10:	1000021e 	bne	r2,zero,16e1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16e14:	e0bfff17 	ldw	r2,-4(fp)
   16e18:	00000706 	br	16e38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16e1c:	e0bfff17 	ldw	r2,-4(fp)
   16e20:	10800017 	ldw	r2,0(r2)
   16e24:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   16e28:	e0ffff17 	ldw	r3,-4(fp)
   16e2c:	e0bffc17 	ldw	r2,-16(fp)
   16e30:	18bff01e 	bne	r3,r2,16df4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   16e34:	0005883a 	mov	r2,zero
}
   16e38:	e037883a 	mov	sp,fp
   16e3c:	dfc00117 	ldw	ra,4(sp)
   16e40:	df000017 	ldw	fp,0(sp)
   16e44:	dec00204 	addi	sp,sp,8
   16e48:	f800283a 	ret

00016e4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16e4c:	deffff04 	addi	sp,sp,-4
   16e50:	df000015 	stw	fp,0(sp)
   16e54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   16e58:	0001883a 	nop
   16e5c:	e037883a 	mov	sp,fp
   16e60:	df000017 	ldw	fp,0(sp)
   16e64:	dec00104 	addi	sp,sp,4
   16e68:	f800283a 	ret

00016e6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16e6c:	defff904 	addi	sp,sp,-28
   16e70:	dfc00615 	stw	ra,24(sp)
   16e74:	df000515 	stw	fp,20(sp)
   16e78:	df000504 	addi	fp,sp,20
   16e7c:	e13ffe15 	stw	r4,-8(fp)
   16e80:	e17ffd15 	stw	r5,-12(fp)
   16e84:	e1bffc15 	stw	r6,-16(fp)
   16e88:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   16e8c:	e1bffb17 	ldw	r6,-20(fp)
   16e90:	e17ffc17 	ldw	r5,-16(fp)
   16e94:	e13ffd17 	ldw	r4,-12(fp)
   16e98:	00172540 	call	17254 <open>
   16e9c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   16ea0:	e0bfff17 	ldw	r2,-4(fp)
   16ea4:	10002016 	blt	r2,zero,16f28 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   16ea8:	e0ffff17 	ldw	r3,-4(fp)
   16eac:	1805883a 	mov	r2,r3
   16eb0:	1085883a 	add	r2,r2,r2
   16eb4:	10c5883a 	add	r2,r2,r3
   16eb8:	100490ba 	slli	r2,r2,2
   16ebc:	00c000b4 	movhi	r3,2
   16ec0:	10c7883a 	add	r3,r2,r3
   16ec4:	18e33e17 	ldw	r3,-29448(r3)
   16ec8:	e0bffe17 	ldw	r2,-8(fp)
   16ecc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16ed0:	e0ffff17 	ldw	r3,-4(fp)
   16ed4:	1805883a 	mov	r2,r3
   16ed8:	1085883a 	add	r2,r2,r2
   16edc:	10c5883a 	add	r2,r2,r3
   16ee0:	100490ba 	slli	r2,r2,2
   16ee4:	00c000b4 	movhi	r3,2
   16ee8:	10c7883a 	add	r3,r2,r3
   16eec:	18e33f17 	ldw	r3,-29444(r3)
   16ef0:	e0bffe17 	ldw	r2,-8(fp)
   16ef4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16ef8:	e0ffff17 	ldw	r3,-4(fp)
   16efc:	1805883a 	mov	r2,r3
   16f00:	1085883a 	add	r2,r2,r2
   16f04:	10c5883a 	add	r2,r2,r3
   16f08:	100490ba 	slli	r2,r2,2
   16f0c:	00c000b4 	movhi	r3,2
   16f10:	10c7883a 	add	r3,r2,r3
   16f14:	18e34017 	ldw	r3,-29440(r3)
   16f18:	e0bffe17 	ldw	r2,-8(fp)
   16f1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16f20:	e13fff17 	ldw	r4,-4(fp)
   16f24:	00153240 	call	15324 <alt_release_fd>
  }
} 
   16f28:	0001883a 	nop
   16f2c:	e037883a 	mov	sp,fp
   16f30:	dfc00117 	ldw	ra,4(sp)
   16f34:	df000017 	ldw	fp,0(sp)
   16f38:	dec00204 	addi	sp,sp,8
   16f3c:	f800283a 	ret

00016f40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16f40:	defffb04 	addi	sp,sp,-20
   16f44:	dfc00415 	stw	ra,16(sp)
   16f48:	df000315 	stw	fp,12(sp)
   16f4c:	df000304 	addi	fp,sp,12
   16f50:	e13fff15 	stw	r4,-4(fp)
   16f54:	e17ffe15 	stw	r5,-8(fp)
   16f58:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16f5c:	01c07fc4 	movi	r7,511
   16f60:	01800044 	movi	r6,1
   16f64:	e17fff17 	ldw	r5,-4(fp)
   16f68:	010000b4 	movhi	r4,2
   16f6c:	21234104 	addi	r4,r4,-29436
   16f70:	0016e6c0 	call	16e6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16f74:	01c07fc4 	movi	r7,511
   16f78:	000d883a 	mov	r6,zero
   16f7c:	e17ffe17 	ldw	r5,-8(fp)
   16f80:	010000b4 	movhi	r4,2
   16f84:	21233e04 	addi	r4,r4,-29448
   16f88:	0016e6c0 	call	16e6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16f8c:	01c07fc4 	movi	r7,511
   16f90:	01800044 	movi	r6,1
   16f94:	e17ffd17 	ldw	r5,-12(fp)
   16f98:	010000b4 	movhi	r4,2
   16f9c:	21234404 	addi	r4,r4,-29424
   16fa0:	0016e6c0 	call	16e6c <alt_open_fd>
}  
   16fa4:	0001883a 	nop
   16fa8:	e037883a 	mov	sp,fp
   16fac:	dfc00117 	ldw	ra,4(sp)
   16fb0:	df000017 	ldw	fp,0(sp)
   16fb4:	dec00204 	addi	sp,sp,8
   16fb8:	f800283a 	ret

00016fbc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   16fbc:	defff004 	addi	sp,sp,-64
   16fc0:	df000f15 	stw	fp,60(sp)
   16fc4:	df000f04 	addi	fp,sp,60
   16fc8:	e13ff315 	stw	r4,-52(fp)
   16fcc:	e17ff215 	stw	r5,-56(fp)
   16fd0:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   16fd4:	00bffa84 	movi	r2,-22
   16fd8:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   16fdc:	e0bff317 	ldw	r2,-52(fp)
   16fe0:	10800828 	cmpgeui	r2,r2,32
   16fe4:	1000501e 	bne	r2,zero,17128 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   16fe8:	0005303a 	rdctl	r2,status
   16fec:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ff0:	e0fffd17 	ldw	r3,-12(fp)
   16ff4:	00bfff84 	movi	r2,-2
   16ff8:	1884703a 	and	r2,r3,r2
   16ffc:	1001703a 	wrctl	status,r2
  return context;
   17000:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   17004:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   17008:	e0bff317 	ldw	r2,-52(fp)
   1700c:	100890fa 	slli	r4,r2,3
   17010:	e0fff117 	ldw	r3,-60(fp)
   17014:	008000b4 	movhi	r2,2
   17018:	2085883a 	add	r2,r4,r2
   1701c:	10ef2d15 	stw	r3,-17228(r2)
    alt_irq[id].context = context;
   17020:	e0bff317 	ldw	r2,-52(fp)
   17024:	100890fa 	slli	r4,r2,3
   17028:	e0fff217 	ldw	r3,-56(fp)
   1702c:	008000b4 	movhi	r2,2
   17030:	2085883a 	add	r2,r4,r2
   17034:	10ef2e15 	stw	r3,-17224(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   17038:	e0bff117 	ldw	r2,-60(fp)
   1703c:	10001a26 	beq	r2,zero,170a8 <alt_irq_register+0xec>
   17040:	e0bff317 	ldw	r2,-52(fp)
   17044:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   17048:	0005303a 	rdctl	r2,status
   1704c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17050:	e0fffb17 	ldw	r3,-20(fp)
   17054:	00bfff84 	movi	r2,-2
   17058:	1884703a 	and	r2,r3,r2
   1705c:	1001703a 	wrctl	status,r2
  return context;
   17060:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   17064:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   17068:	00c00044 	movi	r3,1
   1706c:	e0bffc17 	ldw	r2,-16(fp)
   17070:	1884983a 	sll	r2,r3,r2
   17074:	1007883a 	mov	r3,r2
   17078:	d0a73a17 	ldw	r2,-25368(gp)
   1707c:	1884b03a 	or	r2,r3,r2
   17080:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   17084:	d0a73a17 	ldw	r2,-25368(gp)
   17088:	100170fa 	wrctl	ienable,r2
   1708c:	e0bffa17 	ldw	r2,-24(fp)
   17090:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   17094:	e0bff917 	ldw	r2,-28(fp)
   17098:	1001703a 	wrctl	status,r2
}
   1709c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   170a0:	0005883a 	mov	r2,zero
   170a4:	00001a06 	br	17110 <alt_irq_register+0x154>
   170a8:	e0bff317 	ldw	r2,-52(fp)
   170ac:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   170b0:	0005303a 	rdctl	r2,status
   170b4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170b8:	e0fff717 	ldw	r3,-36(fp)
   170bc:	00bfff84 	movi	r2,-2
   170c0:	1884703a 	and	r2,r3,r2
   170c4:	1001703a 	wrctl	status,r2
  return context;
   170c8:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   170cc:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   170d0:	00c00044 	movi	r3,1
   170d4:	e0bff817 	ldw	r2,-32(fp)
   170d8:	1884983a 	sll	r2,r3,r2
   170dc:	0084303a 	nor	r2,zero,r2
   170e0:	1007883a 	mov	r3,r2
   170e4:	d0a73a17 	ldw	r2,-25368(gp)
   170e8:	1884703a 	and	r2,r3,r2
   170ec:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   170f0:	d0a73a17 	ldw	r2,-25368(gp)
   170f4:	100170fa 	wrctl	ienable,r2
   170f8:	e0bff617 	ldw	r2,-40(fp)
   170fc:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   17100:	e0bff517 	ldw	r2,-44(fp)
   17104:	1001703a 	wrctl	status,r2
}
   17108:	0001883a 	nop
  return 0;
   1710c:	0005883a 	mov	r2,zero
   17110:	e0bfff15 	stw	r2,-4(fp)
   17114:	e0bffe17 	ldw	r2,-8(fp)
   17118:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   1711c:	e0bff417 	ldw	r2,-48(fp)
   17120:	1001703a 	wrctl	status,r2
}
   17124:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   17128:	e0bfff17 	ldw	r2,-4(fp)
}
   1712c:	e037883a 	mov	sp,fp
   17130:	df000017 	ldw	fp,0(sp)
   17134:	dec00104 	addi	sp,sp,4
   17138:	f800283a 	ret

0001713c <alt_get_errno>:
{
   1713c:	defffe04 	addi	sp,sp,-8
   17140:	dfc00115 	stw	ra,4(sp)
   17144:	df000015 	stw	fp,0(sp)
   17148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1714c:	d0a00917 	ldw	r2,-32732(gp)
   17150:	10000326 	beq	r2,zero,17160 <alt_get_errno+0x24>
   17154:	d0a00917 	ldw	r2,-32732(gp)
   17158:	103ee83a 	callr	r2
   1715c:	00000106 	br	17164 <alt_get_errno+0x28>
   17160:	d0a73504 	addi	r2,gp,-25388
}
   17164:	e037883a 	mov	sp,fp
   17168:	dfc00117 	ldw	ra,4(sp)
   1716c:	df000017 	ldw	fp,0(sp)
   17170:	dec00204 	addi	sp,sp,8
   17174:	f800283a 	ret

00017178 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   17178:	defffd04 	addi	sp,sp,-12
   1717c:	df000215 	stw	fp,8(sp)
   17180:	df000204 	addi	fp,sp,8
   17184:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   17188:	e0bffe17 	ldw	r2,-8(fp)
   1718c:	10800217 	ldw	r2,8(r2)
   17190:	10d00034 	orhi	r3,r2,16384
   17194:	e0bffe17 	ldw	r2,-8(fp)
   17198:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1719c:	e03fff15 	stw	zero,-4(fp)
   171a0:	00002306 	br	17230 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   171a4:	e0ffff17 	ldw	r3,-4(fp)
   171a8:	1805883a 	mov	r2,r3
   171ac:	1085883a 	add	r2,r2,r2
   171b0:	10c5883a 	add	r2,r2,r3
   171b4:	100490ba 	slli	r2,r2,2
   171b8:	00c000b4 	movhi	r3,2
   171bc:	10c7883a 	add	r3,r2,r3
   171c0:	18e33e17 	ldw	r3,-29448(r3)
   171c4:	e0bffe17 	ldw	r2,-8(fp)
   171c8:	10800017 	ldw	r2,0(r2)
   171cc:	1880151e 	bne	r3,r2,17224 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   171d0:	e0ffff17 	ldw	r3,-4(fp)
   171d4:	1805883a 	mov	r2,r3
   171d8:	1085883a 	add	r2,r2,r2
   171dc:	10c5883a 	add	r2,r2,r3
   171e0:	100490ba 	slli	r2,r2,2
   171e4:	00c000b4 	movhi	r3,2
   171e8:	10c7883a 	add	r3,r2,r3
   171ec:	18a34017 	ldw	r2,-29440(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   171f0:	10000c0e 	bge	r2,zero,17224 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   171f4:	e0ffff17 	ldw	r3,-4(fp)
   171f8:	1805883a 	mov	r2,r3
   171fc:	1085883a 	add	r2,r2,r2
   17200:	10c5883a 	add	r2,r2,r3
   17204:	100490ba 	slli	r2,r2,2
   17208:	00c000b4 	movhi	r3,2
   1720c:	18e33e04 	addi	r3,r3,-29448
   17210:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17214:	e0fffe17 	ldw	r3,-8(fp)
   17218:	18800226 	beq	r3,r2,17224 <alt_file_locked+0xac>
    {
      return -EACCES;
   1721c:	00bffcc4 	movi	r2,-13
   17220:	00000806 	br	17244 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   17224:	e0bfff17 	ldw	r2,-4(fp)
   17228:	10800044 	addi	r2,r2,1
   1722c:	e0bfff15 	stw	r2,-4(fp)
   17230:	d0a00817 	ldw	r2,-32736(gp)
   17234:	1007883a 	mov	r3,r2
   17238:	e0bfff17 	ldw	r2,-4(fp)
   1723c:	18bfd92e 	bgeu	r3,r2,171a4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   17240:	0005883a 	mov	r2,zero
}
   17244:	e037883a 	mov	sp,fp
   17248:	df000017 	ldw	fp,0(sp)
   1724c:	dec00104 	addi	sp,sp,4
   17250:	f800283a 	ret

00017254 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   17254:	defff604 	addi	sp,sp,-40
   17258:	dfc00915 	stw	ra,36(sp)
   1725c:	df000815 	stw	fp,32(sp)
   17260:	df000804 	addi	fp,sp,32
   17264:	e13ffa15 	stw	r4,-24(fp)
   17268:	e17ff915 	stw	r5,-28(fp)
   1726c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   17270:	00bfffc4 	movi	r2,-1
   17274:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   17278:	00bffb44 	movi	r2,-19
   1727c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   17280:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   17284:	d1600604 	addi	r5,gp,-32744
   17288:	e13ffa17 	ldw	r4,-24(fp)
   1728c:	0016dbc0 	call	16dbc <alt_find_dev>
   17290:	e0bfff15 	stw	r2,-4(fp)
   17294:	e0bfff17 	ldw	r2,-4(fp)
   17298:	1000051e 	bne	r2,zero,172b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1729c:	e13ffa17 	ldw	r4,-24(fp)
   172a0:	00175a80 	call	175a8 <alt_find_file>
   172a4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   172a8:	00800044 	movi	r2,1
   172ac:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   172b0:	e0bfff17 	ldw	r2,-4(fp)
   172b4:	10002c26 	beq	r2,zero,17368 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   172b8:	e13fff17 	ldw	r4,-4(fp)
   172bc:	00176b00 	call	176b0 <alt_get_fd>
   172c0:	e0bffe15 	stw	r2,-8(fp)
   172c4:	e0bffe17 	ldw	r2,-8(fp)
   172c8:	1000030e 	bge	r2,zero,172d8 <open+0x84>
    {
      status = index;
   172cc:	e0bffe17 	ldw	r2,-8(fp)
   172d0:	e0bffd15 	stw	r2,-12(fp)
   172d4:	00002606 	br	17370 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   172d8:	e0fffe17 	ldw	r3,-8(fp)
   172dc:	1805883a 	mov	r2,r3
   172e0:	1085883a 	add	r2,r2,r2
   172e4:	10c5883a 	add	r2,r2,r3
   172e8:	100490ba 	slli	r2,r2,2
   172ec:	00c000b4 	movhi	r3,2
   172f0:	18e33e04 	addi	r3,r3,-29448
   172f4:	10c5883a 	add	r2,r2,r3
   172f8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   172fc:	e0fff917 	ldw	r3,-28(fp)
   17300:	00900034 	movhi	r2,16384
   17304:	10bfffc4 	addi	r2,r2,-1
   17308:	1886703a 	and	r3,r3,r2
   1730c:	e0bffb17 	ldw	r2,-20(fp)
   17310:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   17314:	e0bffc17 	ldw	r2,-16(fp)
   17318:	1000051e 	bne	r2,zero,17330 <open+0xdc>
   1731c:	e13ffb17 	ldw	r4,-20(fp)
   17320:	00171780 	call	17178 <alt_file_locked>
   17324:	e0bffd15 	stw	r2,-12(fp)
   17328:	e0bffd17 	ldw	r2,-12(fp)
   1732c:	10001016 	blt	r2,zero,17370 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   17330:	e0bfff17 	ldw	r2,-4(fp)
   17334:	10800317 	ldw	r2,12(r2)
   17338:	10000826 	beq	r2,zero,1735c <open+0x108>
   1733c:	e0bfff17 	ldw	r2,-4(fp)
   17340:	10800317 	ldw	r2,12(r2)
   17344:	e1fff817 	ldw	r7,-32(fp)
   17348:	e1bff917 	ldw	r6,-28(fp)
   1734c:	e17ffa17 	ldw	r5,-24(fp)
   17350:	e13ffb17 	ldw	r4,-20(fp)
   17354:	103ee83a 	callr	r2
   17358:	00000106 	br	17360 <open+0x10c>
   1735c:	0005883a 	mov	r2,zero
   17360:	e0bffd15 	stw	r2,-12(fp)
   17364:	00000206 	br	17370 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   17368:	00bffb44 	movi	r2,-19
   1736c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   17370:	e0bffd17 	ldw	r2,-12(fp)
   17374:	1000090e 	bge	r2,zero,1739c <open+0x148>
  {
    alt_release_fd (index);  
   17378:	e13ffe17 	ldw	r4,-8(fp)
   1737c:	00153240 	call	15324 <alt_release_fd>
    ALT_ERRNO = -status;
   17380:	001713c0 	call	1713c <alt_get_errno>
   17384:	1007883a 	mov	r3,r2
   17388:	e0bffd17 	ldw	r2,-12(fp)
   1738c:	0085c83a 	sub	r2,zero,r2
   17390:	18800015 	stw	r2,0(r3)
    return -1;
   17394:	00bfffc4 	movi	r2,-1
   17398:	00000106 	br	173a0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   1739c:	e0bffe17 	ldw	r2,-8(fp)
}
   173a0:	e037883a 	mov	sp,fp
   173a4:	dfc00117 	ldw	ra,4(sp)
   173a8:	df000017 	ldw	fp,0(sp)
   173ac:	dec00204 	addi	sp,sp,8
   173b0:	f800283a 	ret

000173b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   173b4:	defffa04 	addi	sp,sp,-24
   173b8:	df000515 	stw	fp,20(sp)
   173bc:	df000504 	addi	fp,sp,20
   173c0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   173c4:	0005303a 	rdctl	r2,status
   173c8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   173cc:	e0fffc17 	ldw	r3,-16(fp)
   173d0:	00bfff84 	movi	r2,-2
   173d4:	1884703a 	and	r2,r3,r2
   173d8:	1001703a 	wrctl	status,r2
  return context;
   173dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   173e0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   173e4:	e0bffb17 	ldw	r2,-20(fp)
   173e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   173ec:	e0bffd17 	ldw	r2,-12(fp)
   173f0:	10800017 	ldw	r2,0(r2)
   173f4:	e0fffd17 	ldw	r3,-12(fp)
   173f8:	18c00117 	ldw	r3,4(r3)
   173fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   17400:	e0bffd17 	ldw	r2,-12(fp)
   17404:	10800117 	ldw	r2,4(r2)
   17408:	e0fffd17 	ldw	r3,-12(fp)
   1740c:	18c00017 	ldw	r3,0(r3)
   17410:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   17414:	e0bffd17 	ldw	r2,-12(fp)
   17418:	e0fffd17 	ldw	r3,-12(fp)
   1741c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   17420:	e0bffd17 	ldw	r2,-12(fp)
   17424:	e0fffd17 	ldw	r3,-12(fp)
   17428:	10c00015 	stw	r3,0(r2)
} 
   1742c:	0001883a 	nop
   17430:	e0bfff17 	ldw	r2,-4(fp)
   17434:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   17438:	e0bffe17 	ldw	r2,-8(fp)
   1743c:	1001703a 	wrctl	status,r2
}
   17440:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   17444:	0001883a 	nop
   17448:	e037883a 	mov	sp,fp
   1744c:	df000017 	ldw	fp,0(sp)
   17450:	dec00104 	addi	sp,sp,4
   17454:	f800283a 	ret

00017458 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   17458:	defff904 	addi	sp,sp,-28
   1745c:	dfc00615 	stw	ra,24(sp)
   17460:	df000515 	stw	fp,20(sp)
   17464:	dc400415 	stw	r17,16(sp)
   17468:	dc000315 	stw	r16,12(sp)
   1746c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   17470:	d0a00c17 	ldw	r2,-32720(gp)
   17474:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   17478:	d1273c17 	ldw	r4,-25360(gp)
   1747c:	d1673d17 	ldw	r5,-25356(gp)
   17480:	01800044 	movi	r6,1
   17484:	000f883a 	mov	r7,zero
   17488:	2185883a 	add	r2,r4,r6
   1748c:	1111803a 	cmpltu	r8,r2,r4
   17490:	29c7883a 	add	r3,r5,r7
   17494:	40c9883a 	add	r4,r8,r3
   17498:	2007883a 	mov	r3,r4
   1749c:	1009883a 	mov	r4,r2
   174a0:	180b883a 	mov	r5,r3
   174a4:	d1273c15 	stw	r4,-25360(gp)
   174a8:	d1673d15 	stw	r5,-25356(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   174ac:	00002906 	br	17554 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   174b0:	e0bffd17 	ldw	r2,-12(fp)
   174b4:	10800017 	ldw	r2,0(r2)
   174b8:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   174bc:	e13ffd17 	ldw	r4,-12(fp)
   174c0:	20800217 	ldw	r2,8(r4)
   174c4:	20c00317 	ldw	r3,12(r4)
   174c8:	d1273c17 	ldw	r4,-25360(gp)
   174cc:	d1673d17 	ldw	r5,-25356(gp)
   174d0:	28c01e36 	bltu	r5,r3,1754c <alt_tick+0xf4>
   174d4:	1940011e 	bne	r3,r5,174dc <alt_tick+0x84>
   174d8:	20801c36 	bltu	r4,r2,1754c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   174dc:	e0bffd17 	ldw	r2,-12(fp)
   174e0:	10800417 	ldw	r2,16(r2)
   174e4:	e0fffd17 	ldw	r3,-12(fp)
   174e8:	18c00517 	ldw	r3,20(r3)
   174ec:	1809883a 	mov	r4,r3
   174f0:	103ee83a 	callr	r2
   174f4:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   174f8:	e0bffb17 	ldw	r2,-20(fp)
   174fc:	1000031e 	bne	r2,zero,1750c <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   17500:	e13ffd17 	ldw	r4,-12(fp)
   17504:	00173b40 	call	173b4 <alt_alarm_stop>
   17508:	00001006 	br	1754c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   1750c:	e0bffd17 	ldw	r2,-12(fp)
   17510:	11000217 	ldw	r4,8(r2)
   17514:	11400317 	ldw	r5,12(r2)
   17518:	e0bffb17 	ldw	r2,-20(fp)
   1751c:	1021883a 	mov	r16,r2
   17520:	0023883a 	mov	r17,zero
   17524:	2405883a 	add	r2,r4,r16
   17528:	110d803a 	cmpltu	r6,r2,r4
   1752c:	2c47883a 	add	r3,r5,r17
   17530:	30c9883a 	add	r4,r6,r3
   17534:	2007883a 	mov	r3,r4
   17538:	1009883a 	mov	r4,r2
   1753c:	180b883a 	mov	r5,r3
   17540:	e0bffd17 	ldw	r2,-12(fp)
   17544:	11000215 	stw	r4,8(r2)
   17548:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   1754c:	e0bffc17 	ldw	r2,-16(fp)
   17550:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   17554:	e0fffd17 	ldw	r3,-12(fp)
   17558:	d0a00c04 	addi	r2,gp,-32720
   1755c:	18bfd41e 	bne	r3,r2,174b0 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   17560:	0001883a 	nop
}
   17564:	0001883a 	nop
   17568:	e6fffe04 	addi	sp,fp,-8
   1756c:	dfc00317 	ldw	ra,12(sp)
   17570:	df000217 	ldw	fp,8(sp)
   17574:	dc400117 	ldw	r17,4(sp)
   17578:	dc000017 	ldw	r16,0(sp)
   1757c:	dec00404 	addi	sp,sp,16
   17580:	f800283a 	ret

00017584 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   17584:	deffff04 	addi	sp,sp,-4
   17588:	df000015 	stw	fp,0(sp)
   1758c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17590:	000170fa 	wrctl	ienable,zero
}
   17594:	0001883a 	nop
   17598:	e037883a 	mov	sp,fp
   1759c:	df000017 	ldw	fp,0(sp)
   175a0:	dec00104 	addi	sp,sp,4
   175a4:	f800283a 	ret

000175a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   175a8:	defffb04 	addi	sp,sp,-20
   175ac:	dfc00415 	stw	ra,16(sp)
   175b0:	df000315 	stw	fp,12(sp)
   175b4:	df000304 	addi	fp,sp,12
   175b8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   175bc:	d0a00417 	ldw	r2,-32752(gp)
   175c0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   175c4:	00003106 	br	1768c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   175c8:	e0bfff17 	ldw	r2,-4(fp)
   175cc:	10800217 	ldw	r2,8(r2)
   175d0:	1009883a 	mov	r4,r2
   175d4:	000a9440 	call	a944 <strlen>
   175d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   175dc:	e0bfff17 	ldw	r2,-4(fp)
   175e0:	10c00217 	ldw	r3,8(r2)
   175e4:	e0bffe17 	ldw	r2,-8(fp)
   175e8:	10bfffc4 	addi	r2,r2,-1
   175ec:	1885883a 	add	r2,r3,r2
   175f0:	10800003 	ldbu	r2,0(r2)
   175f4:	10803fcc 	andi	r2,r2,255
   175f8:	1080201c 	xori	r2,r2,128
   175fc:	10bfe004 	addi	r2,r2,-128
   17600:	10800bd8 	cmpnei	r2,r2,47
   17604:	1000031e 	bne	r2,zero,17614 <alt_find_file+0x6c>
    {
      len -= 1;
   17608:	e0bffe17 	ldw	r2,-8(fp)
   1760c:	10bfffc4 	addi	r2,r2,-1
   17610:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17614:	e0bffe17 	ldw	r2,-8(fp)
   17618:	e0fffd17 	ldw	r3,-12(fp)
   1761c:	1885883a 	add	r2,r3,r2
   17620:	10800003 	ldbu	r2,0(r2)
   17624:	10803fcc 	andi	r2,r2,255
   17628:	1080201c 	xori	r2,r2,128
   1762c:	10bfe004 	addi	r2,r2,-128
   17630:	10800be0 	cmpeqi	r2,r2,47
   17634:	1000081e 	bne	r2,zero,17658 <alt_find_file+0xb0>
   17638:	e0bffe17 	ldw	r2,-8(fp)
   1763c:	e0fffd17 	ldw	r3,-12(fp)
   17640:	1885883a 	add	r2,r3,r2
   17644:	10800003 	ldbu	r2,0(r2)
   17648:	10803fcc 	andi	r2,r2,255
   1764c:	1080201c 	xori	r2,r2,128
   17650:	10bfe004 	addi	r2,r2,-128
   17654:	10000a1e 	bne	r2,zero,17680 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17658:	e0bfff17 	ldw	r2,-4(fp)
   1765c:	10800217 	ldw	r2,8(r2)
   17660:	e0fffe17 	ldw	r3,-8(fp)
   17664:	180d883a 	mov	r6,r3
   17668:	e17ffd17 	ldw	r5,-12(fp)
   1766c:	1009883a 	mov	r4,r2
   17670:	00178480 	call	17848 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   17674:	1000021e 	bne	r2,zero,17680 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   17678:	e0bfff17 	ldw	r2,-4(fp)
   1767c:	00000706 	br	1769c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   17680:	e0bfff17 	ldw	r2,-4(fp)
   17684:	10800017 	ldw	r2,0(r2)
   17688:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   1768c:	e0ffff17 	ldw	r3,-4(fp)
   17690:	d0a00404 	addi	r2,gp,-32752
   17694:	18bfcc1e 	bne	r3,r2,175c8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   17698:	0005883a 	mov	r2,zero
}
   1769c:	e037883a 	mov	sp,fp
   176a0:	dfc00117 	ldw	ra,4(sp)
   176a4:	df000017 	ldw	fp,0(sp)
   176a8:	dec00204 	addi	sp,sp,8
   176ac:	f800283a 	ret

000176b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   176b0:	defffc04 	addi	sp,sp,-16
   176b4:	df000315 	stw	fp,12(sp)
   176b8:	df000304 	addi	fp,sp,12
   176bc:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   176c0:	00bffa04 	movi	r2,-24
   176c4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   176c8:	e03fff15 	stw	zero,-4(fp)
   176cc:	00001d06 	br	17744 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   176d0:	e0ffff17 	ldw	r3,-4(fp)
   176d4:	1805883a 	mov	r2,r3
   176d8:	1085883a 	add	r2,r2,r2
   176dc:	10c5883a 	add	r2,r2,r3
   176e0:	100490ba 	slli	r2,r2,2
   176e4:	00c000b4 	movhi	r3,2
   176e8:	10c7883a 	add	r3,r2,r3
   176ec:	18a33e17 	ldw	r2,-29448(r3)
   176f0:	1000111e 	bne	r2,zero,17738 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   176f4:	e0ffff17 	ldw	r3,-4(fp)
   176f8:	1805883a 	mov	r2,r3
   176fc:	1085883a 	add	r2,r2,r2
   17700:	10c5883a 	add	r2,r2,r3
   17704:	100490ba 	slli	r2,r2,2
   17708:	e13ffd17 	ldw	r4,-12(fp)
   1770c:	00c000b4 	movhi	r3,2
   17710:	10c7883a 	add	r3,r2,r3
   17714:	19233e15 	stw	r4,-29448(r3)
      if (i > alt_max_fd)
   17718:	d0e00817 	ldw	r3,-32736(gp)
   1771c:	e0bfff17 	ldw	r2,-4(fp)
   17720:	1880020e 	bge	r3,r2,1772c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   17724:	e0bfff17 	ldw	r2,-4(fp)
   17728:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   1772c:	e0bfff17 	ldw	r2,-4(fp)
   17730:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   17734:	00000706 	br	17754 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   17738:	e0bfff17 	ldw	r2,-4(fp)
   1773c:	10800044 	addi	r2,r2,1
   17740:	e0bfff15 	stw	r2,-4(fp)
   17744:	e0bfff17 	ldw	r2,-4(fp)
   17748:	10800810 	cmplti	r2,r2,32
   1774c:	103fe01e 	bne	r2,zero,176d0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   17750:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   17754:	e0bffe17 	ldw	r2,-8(fp)
}
   17758:	e037883a 	mov	sp,fp
   1775c:	df000017 	ldw	fp,0(sp)
   17760:	dec00104 	addi	sp,sp,4
   17764:	f800283a 	ret

00017768 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   17768:	defffe04 	addi	sp,sp,-8
   1776c:	df000115 	stw	fp,4(sp)
   17770:	df000104 	addi	fp,sp,4
   17774:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   17778:	e0bfff17 	ldw	r2,-4(fp)
   1777c:	10bffe84 	addi	r2,r2,-6
   17780:	10c00428 	cmpgeui	r3,r2,16
   17784:	1800191e 	bne	r3,zero,177ec <alt_exception_cause_generated_bad_addr+0x84>
   17788:	100690ba 	slli	r3,r2,2
   1778c:	00800074 	movhi	r2,1
   17790:	1885883a 	add	r2,r3,r2
   17794:	109de717 	ldw	r2,30620(r2)
   17798:	1000683a 	jmp	r2
   1779c:	000177dc 	xori	zero,zero,1503
   177a0:	000177dc 	xori	zero,zero,1503
   177a4:	000177ec 	andhi	zero,zero,1503
   177a8:	000177ec 	andhi	zero,zero,1503
   177ac:	000177ec 	andhi	zero,zero,1503
   177b0:	000177dc 	xori	zero,zero,1503
   177b4:	000177e4 	muli	zero,zero,1503
   177b8:	000177ec 	andhi	zero,zero,1503
   177bc:	000177dc 	xori	zero,zero,1503
   177c0:	000177dc 	xori	zero,zero,1503
   177c4:	000177ec 	andhi	zero,zero,1503
   177c8:	000177dc 	xori	zero,zero,1503
   177cc:	000177e4 	muli	zero,zero,1503
   177d0:	000177ec 	andhi	zero,zero,1503
   177d4:	000177ec 	andhi	zero,zero,1503
   177d8:	000177dc 	xori	zero,zero,1503
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   177dc:	00800044 	movi	r2,1
   177e0:	00000306 	br	177f0 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   177e4:	0005883a 	mov	r2,zero
   177e8:	00000106 	br	177f0 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   177ec:	0005883a 	mov	r2,zero
  }
}
   177f0:	e037883a 	mov	sp,fp
   177f4:	df000017 	ldw	fp,0(sp)
   177f8:	dec00104 	addi	sp,sp,4
   177fc:	f800283a 	ret

00017800 <atexit>:
   17800:	200b883a 	mov	r5,r4
   17804:	000f883a 	mov	r7,zero
   17808:	000d883a 	mov	r6,zero
   1780c:	0009883a 	mov	r4,zero
   17810:	00178c01 	jmpi	178c0 <__register_exitproc>

00017814 <exit>:
   17814:	defffe04 	addi	sp,sp,-8
   17818:	000b883a 	mov	r5,zero
   1781c:	dc000015 	stw	r16,0(sp)
   17820:	dfc00115 	stw	ra,4(sp)
   17824:	2021883a 	mov	r16,r4
   17828:	00179500 	call	17950 <__call_exitprocs>
   1782c:	008000b4 	movhi	r2,2
   17830:	1127e417 	ldw	r4,-24688(r2)
   17834:	20800f17 	ldw	r2,60(r4)
   17838:	10000126 	beq	r2,zero,17840 <exit+0x2c>
   1783c:	103ee83a 	callr	r2
   17840:	8009883a 	mov	r4,r16
   17844:	00149140 	call	14914 <_exit>

00017848 <memcmp>:
   17848:	30800130 	cmpltui	r2,r6,4
   1784c:	10000b1e 	bne	r2,zero,1787c <memcmp+0x34>
   17850:	2144b03a 	or	r2,r4,r5
   17854:	108000cc 	andi	r2,r2,3
   17858:	1000171e 	bne	r2,zero,178b8 <memcmp+0x70>
   1785c:	20c00017 	ldw	r3,0(r4)
   17860:	28800017 	ldw	r2,0(r5)
   17864:	1880141e 	bne	r3,r2,178b8 <memcmp+0x70>
   17868:	31bfff04 	addi	r6,r6,-4
   1786c:	30800128 	cmpgeui	r2,r6,4
   17870:	21000104 	addi	r4,r4,4
   17874:	29400104 	addi	r5,r5,4
   17878:	103ff81e 	bne	r2,zero,1785c <memcmp+0x14>
   1787c:	30bfffc4 	addi	r2,r6,-1
   17880:	30000b26 	beq	r6,zero,178b0 <memcmp+0x68>
   17884:	11800044 	addi	r6,r2,1
   17888:	218d883a 	add	r6,r4,r6
   1788c:	00000106 	br	17894 <memcmp+0x4c>
   17890:	21800726 	beq	r4,r6,178b0 <memcmp+0x68>
   17894:	20800003 	ldbu	r2,0(r4)
   17898:	28c00003 	ldbu	r3,0(r5)
   1789c:	21000044 	addi	r4,r4,1
   178a0:	29400044 	addi	r5,r5,1
   178a4:	10fffa26 	beq	r2,r3,17890 <memcmp+0x48>
   178a8:	10c5c83a 	sub	r2,r2,r3
   178ac:	f800283a 	ret
   178b0:	0005883a 	mov	r2,zero
   178b4:	f800283a 	ret
   178b8:	30bfffc4 	addi	r2,r6,-1
   178bc:	003ff106 	br	17884 <memcmp+0x3c>

000178c0 <__register_exitproc>:
   178c0:	008000b4 	movhi	r2,2
   178c4:	10e7e417 	ldw	r3,-24688(r2)
   178c8:	18805217 	ldw	r2,328(r3)
   178cc:	10001726 	beq	r2,zero,1792c <__register_exitproc+0x6c>
   178d0:	10c00117 	ldw	r3,4(r2)
   178d4:	1a000808 	cmpgei	r8,r3,32
   178d8:	40001b1e 	bne	r8,zero,17948 <__register_exitproc+0x88>
   178dc:	20000b26 	beq	r4,zero,1790c <__register_exitproc+0x4c>
   178e0:	181090ba 	slli	r8,r3,2
   178e4:	02400044 	movi	r9,1
   178e8:	48d2983a 	sll	r9,r9,r3
   178ec:	1211883a 	add	r8,r2,r8
   178f0:	41802215 	stw	r6,136(r8)
   178f4:	11806217 	ldw	r6,392(r2)
   178f8:	21000098 	cmpnei	r4,r4,2
   178fc:	324cb03a 	or	r6,r6,r9
   17900:	11806215 	stw	r6,392(r2)
   17904:	41c04215 	stw	r7,264(r8)
   17908:	20000b26 	beq	r4,zero,17938 <__register_exitproc+0x78>
   1790c:	19000084 	addi	r4,r3,2
   17910:	200890ba 	slli	r4,r4,2
   17914:	18c00044 	addi	r3,r3,1
   17918:	10c00115 	stw	r3,4(r2)
   1791c:	1105883a 	add	r2,r2,r4
   17920:	11400015 	stw	r5,0(r2)
   17924:	0005883a 	mov	r2,zero
   17928:	f800283a 	ret
   1792c:	18805304 	addi	r2,r3,332
   17930:	18805215 	stw	r2,328(r3)
   17934:	003fe606 	br	178d0 <__register_exitproc+0x10>
   17938:	11006317 	ldw	r4,396(r2)
   1793c:	2252b03a 	or	r9,r4,r9
   17940:	12406315 	stw	r9,396(r2)
   17944:	003ff106 	br	1790c <__register_exitproc+0x4c>
   17948:	00bfffc4 	movi	r2,-1
   1794c:	f800283a 	ret

00017950 <__call_exitprocs>:
   17950:	defff704 	addi	sp,sp,-36
   17954:	008000b4 	movhi	r2,2
   17958:	dcc00315 	stw	r19,12(sp)
   1795c:	14e7e417 	ldw	r19,-24688(r2)
   17960:	dc800215 	stw	r18,8(sp)
   17964:	dfc00815 	stw	ra,32(sp)
   17968:	9c805217 	ldw	r18,328(r19)
   1796c:	ddc00715 	stw	r23,28(sp)
   17970:	dd800615 	stw	r22,24(sp)
   17974:	dd400515 	stw	r21,20(sp)
   17978:	dd000415 	stw	r20,16(sp)
   1797c:	dc400115 	stw	r17,4(sp)
   17980:	dc000015 	stw	r16,0(sp)
   17984:	90001026 	beq	r18,zero,179c8 <__call_exitprocs+0x78>
   17988:	202b883a 	mov	r21,r4
   1798c:	282d883a 	mov	r22,r5
   17990:	05000044 	movi	r20,1
   17994:	94000117 	ldw	r16,4(r18)
   17998:	847fffc4 	addi	r17,r16,-1
   1799c:	88000a16 	blt	r17,zero,179c8 <__call_exitprocs+0x78>
   179a0:	84000044 	addi	r16,r16,1
   179a4:	802090ba 	slli	r16,r16,2
   179a8:	9421883a 	add	r16,r18,r16
   179ac:	b0001126 	beq	r22,zero,179f4 <__call_exitprocs+0xa4>
   179b0:	80804017 	ldw	r2,256(r16)
   179b4:	15800f26 	beq	r2,r22,179f4 <__call_exitprocs+0xa4>
   179b8:	8c7fffc4 	addi	r17,r17,-1
   179bc:	88bfffd8 	cmpnei	r2,r17,-1
   179c0:	843fff04 	addi	r16,r16,-4
   179c4:	103ff91e 	bne	r2,zero,179ac <__call_exitprocs+0x5c>
   179c8:	dfc00817 	ldw	ra,32(sp)
   179cc:	ddc00717 	ldw	r23,28(sp)
   179d0:	dd800617 	ldw	r22,24(sp)
   179d4:	dd400517 	ldw	r21,20(sp)
   179d8:	dd000417 	ldw	r20,16(sp)
   179dc:	dcc00317 	ldw	r19,12(sp)
   179e0:	dc800217 	ldw	r18,8(sp)
   179e4:	dc400117 	ldw	r17,4(sp)
   179e8:	dc000017 	ldw	r16,0(sp)
   179ec:	dec00904 	addi	sp,sp,36
   179f0:	f800283a 	ret
   179f4:	90800117 	ldw	r2,4(r18)
   179f8:	81800017 	ldw	r6,0(r16)
   179fc:	10bfffc4 	addi	r2,r2,-1
   17a00:	14401726 	beq	r2,r17,17a60 <__call_exitprocs+0x110>
   17a04:	80000015 	stw	zero,0(r16)
   17a08:	303feb26 	beq	r6,zero,179b8 <__call_exitprocs+0x68>
   17a0c:	a446983a 	sll	r3,r20,r17
   17a10:	90806217 	ldw	r2,392(r18)
   17a14:	95c00117 	ldw	r23,4(r18)
   17a18:	1884703a 	and	r2,r3,r2
   17a1c:	1000081e 	bne	r2,zero,17a40 <__call_exitprocs+0xf0>
   17a20:	303ee83a 	callr	r6
   17a24:	90c00117 	ldw	r3,4(r18)
   17a28:	98805217 	ldw	r2,328(r19)
   17a2c:	1dc0011e 	bne	r3,r23,17a34 <__call_exitprocs+0xe4>
   17a30:	90bfe126 	beq	r18,r2,179b8 <__call_exitprocs+0x68>
   17a34:	103fe426 	beq	r2,zero,179c8 <__call_exitprocs+0x78>
   17a38:	1025883a 	mov	r18,r2
   17a3c:	003fd506 	br	17994 <__call_exitprocs+0x44>
   17a40:	90806317 	ldw	r2,396(r18)
   17a44:	81002017 	ldw	r4,128(r16)
   17a48:	1886703a 	and	r3,r3,r2
   17a4c:	1800061e 	bne	r3,zero,17a68 <__call_exitprocs+0x118>
   17a50:	200b883a 	mov	r5,r4
   17a54:	a809883a 	mov	r4,r21
   17a58:	303ee83a 	callr	r6
   17a5c:	003ff106 	br	17a24 <__call_exitprocs+0xd4>
   17a60:	94400115 	stw	r17,4(r18)
   17a64:	003fe806 	br	17a08 <__call_exitprocs+0xb8>
   17a68:	303ee83a 	callr	r6
   17a6c:	003fed06 	br	17a24 <__call_exitprocs+0xd4>
