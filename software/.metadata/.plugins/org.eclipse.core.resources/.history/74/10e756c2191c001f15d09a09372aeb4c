#include "address_map_nios2.h"
#include <stdlib.h>
#include <stdio.h>

#define BUF_SIZE 80000  // about 10 seconds of buffer (@ 8K samples/sec)
#define BUF_THRESHOLD 96 // 75% of 128 word buffer

void check_KEYs(int *, int *, int *);
void normalize_audio(short int *, float *, int);
void denormalize_audio(short int *, float *, int);
int count_clipped_samples(short int *, int);

int main(void) {
    volatile int * red_LED_ptr = (int *)LED_BASE;
    volatile int * audio_ptr   = (int *)AUDIO_BASE;

    int fifospace;
    int record = 0, play = 0, buffer_index = 0;
    int left_buffer[BUF_SIZE];
    int right_buffer[BUF_SIZE];
    float normalized_buffer[BUF_SIZE];

    record = 0;
    play   = 0;

    while (1) {
        check_KEYs(&record, &play, &buffer_index);
        if (record) {
            *(red_LED_ptr) = 0x1; // turn on LEDR[0]

            fifospace = *(audio_ptr + 1); // read the audio port fifospace register
            if ((fifospace & 0x000000FF) > BUF_THRESHOLD) // check RARC
            {
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
                    left_buffer[buffer_index]  = *(audio_ptr + 2); // Read 16-bit left-justified data
                    right_buffer[buffer_index] = *(audio_ptr + 3); // Read 16-bit left-justified data
                    ++buffer_index;

                    if (buffer_index == BUF_SIZE) {
                        record = 0;
                        *(red_LED_ptr) = 0x0; // turn off LEDR

                        for (int i = 0; i < 100; i++) {
                            printf("%d\n", left_buffer[i]);
                        }
                        printf("\n-------------\n");
                    }
                    fifospace = *(audio_ptr + 1); // read the audio port fifospace register
                }
            }
        } else if (play) {
            buffer_index = 0; // reset buffer index for playback
            *(red_LED_ptr) = 0x2; // turn on LEDR_1
            fifospace = *(audio_ptr + 1); // read the audio port fifospace register
            while ((fifospace & 0x00FF0000) && (buffer_index < BUF_SIZE)) {
                *(audio_ptr + 2) = left_buffer[buffer_index]; // Write 16-bit left-justified data
                *(audio_ptr + 3) = left_buffer[buffer_index]; // Write 16-bit left-justified data
                ++buffer_index;

                if (buffer_index == BUF_SIZE) {
                    play = 0;
                    *(red_LED_ptr) = 0x0; // turn off LEDR
                }
                fifospace = *(audio_ptr + 1); // read the audio port fifospace register
            }
        }
    }
}

void check_KEYs(int * KEY0, int * KEY1, int * counter) {
    volatile int * KEY_ptr   = (int *)KEY_BASE;
    volatile int * audio_ptr = (int *)AUDIO_BASE;
    int KEY_value;

    KEY_value = *(KEY_ptr); // read the pushbutton KEY values
    while (*KEY_ptr); // wait for pushbutton KEY release

    if (KEY_value == 0x1) // check KEY0
    {
        *counter = 0;
        *(audio_ptr) = 0x4; // clear audio-in FIFO
        *(audio_ptr) = 0x0;

        *KEY0 = 1;
    }
    else if (KEY_value == 0x2) // check KEY1
    {
        *counter = 0;
        *(audio_ptr) = 0x8; // clear audio-out FIFO
        *(audio_ptr) = 0x0;

        *KEY1 = 1;
    }
}

void normalize_audio(short int *input_buffer, float *output_buffer, int size) {
    short int max_val = 0;
    for (int i = 0; i < size; i++) {
        short int abs_val = abs(input_buffer[i]);
        if (abs_val > max_val) {
            max_val = abs_val;
        }
    }
    float scale = (max_val > 0) ? 1.0 / max_val : 0;
    for (int i = 0; i < size; i++) {
        output_buffer[i] = input_buffer[i] * scale;
    }
}

void denormalize_audio(short int *output_buffer, float *input_buffer, int size) {
    float max_val = 32767.0; // Max value for 16-bit audio
    for (int i = 0; i < size; i++) {
        output_buffer[i] = (short int)(input_buffer[i] * max_val);
    }
}

int count_clipped_samples(short int *buffer, int size) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (buffer[i] == -32768 || buffer[i] == 32767) {
            count++;
        }
    }
    return count;
}
