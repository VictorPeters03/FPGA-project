#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include "system.h"

#include "address_map_nios2.h"
#include "fft/kiss_fft.h"
#include "mfcc/libmfcc.h"

/* globals */
#define BUF_SIZE 12000    // about 1.5 seconds of buffer (@ 8K samples/sec)
#define BUF_THRESHOLD 96  // 75% of 128 word buffer

#define FFT_SIZE 1024 // FFT size
#define FFT_SHIFT 512 // Amount of samples the FFT buffer is shifted
#define NUM_MFCC 13
#define NUM_FILTERS 12

/* function prototypes */
void check_KEYs(int *, int *, int *);
void normalize_audio(float *, float *, int);
void fft(float *input_buffer, kiss_fft_cpx *output_buffer);
void calculate_mfcc(float *input_buffer, int signal_length, float *mfcc_buffer);

/*******************************************************************************
 * This program performs the following:
 *  1. records audio for 1.5 seconds when KEY[0] is pressed.
 *  2. Normalizes
 ******************************************************************************/
int main(void) {
    /* Declare volatile pointers to I/O registers (volatile means that IO load
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile int *red_LED_ptr = (int *)LED_BASE;
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    volatile int *sdram_ptr = (int *)SDRAM_BASE;
    int sdram_count = 0;
    int counter = 0;

    /* used for audio record/playback */
    int fifospace;
    int record = 0, play = 0, buffer_index = 0;
    int left_buffer[BUF_SIZE];
    int right_buffer[BUF_SIZE];
    float normalized_buffer[BUF_SIZE];
    float windowed_buffer[BUF_SIZE];
    kiss_fft_cpx output[FFT_SIZE];
    float mfcc_buffer[(BUF_SIZE / FFT_SHIFT) * NUM_MFCC];

    /* read and echo audio data */
    record = 0;
    play = 0;

    while (1) {
        check_KEYs(&record, &play, &buffer_index);
        if (record) {
            *(red_LED_ptr) = 0x1;  // turn on LEDR[0]

            fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
            if ((fifospace & 0x000000FF) > BUF_THRESHOLD)  // check RARC
            {
                // store data until the the audio-in FIFO is empty or the buffer is full
                while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
                    left_buffer[buffer_index] = *(audio_ptr + 2);
                    right_buffer[buffer_index] = *(audio_ptr + 3);
                    ++buffer_index;

                    if (buffer_index == BUF_SIZE) {
                        // done recording
                        record = 0;
                        *(red_LED_ptr) = 0x0;  // turn off LEDR
                        /*normalize_audio(left_buffer, normalized_buffer, BUF_SIZE);
                        // Calculate MFCCs
						calculate_mfcc(normalized_buffer, BUF_SIZE, mfcc_buffer);
                        *(red_LED_ptr) = 0x8;
						int num_frames = (BUF_SIZE - FFT_SIZE) / FFT_SHIFT + 1;
						for (int frame = 0; frame < num_frames; frame++) {
							printf("Frame %d:\n", frame);
							for (int m = 0; m < NUM_MFCC; m++) {
								printf("%f ", mfcc_buffer[frame * NUM_MFCC + m]);
							}
							printf("\n");
						}*/
                         //write the int buffer to the SDRAM
                        *(red_LED_ptr) = 0x2;
                        while(counter < BUF_SIZE) {
                        	for (int i = sdram_count; i < sdram_count + 3; i++) {
								*sdram_ptr++ = left_buffer[i];
								sdram_count++;
								printf("test");
							}
                        }
                        *(red_LED_ptr) = 0x4;
                        for (int i = 6000; i < 6600; i++) {
                        	int sample = *sdram_ptr++;
                        	printf("Sample: %d", sample);
                        }
                        // Reset buffer_index for the next recording
                        buffer_index = 0;
                    }
                    fifospace = *(audio_ptr + 1);  // read the audio port fifospace register
                }
            }
        }
    }
}

/****************************************************************************************
 * Subroutine to read KEYs
 ****************************************************************************************/
void check_KEYs(int *KEY0, int *KEY1, int *counter) {
    volatile int *KEY_ptr = (int *)KEY_BASE;
    volatile int *audio_ptr = (int *)AUDIO_BASE;
    int KEY_value;

    KEY_value = *(KEY_ptr);  // read the pushbutton KEY values
    while (*KEY_ptr)
        ;  // wait for pushbutton KEY release

    if (KEY_value == 0x1)  // check KEY0
    {
        // reset counter to start recording
        *counter = 0;
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
        *(audio_ptr) = 0x0;

        *KEY0 = 1;
    } else if (KEY_value == 0x2)  // check KEY1
    {
        // reset counter to start playback
        *counter = 0;
        // clear audio-out FIFO
        *(audio_ptr) = 0x8;
        *(audio_ptr) = 0x0;

        *KEY1 = 1;
    }
}

void normalize_audio(float *input_buffer, float *output_buffer, int size) {
	float max_val = 0.0f;

	// Find the maximum absolute value
	for (int i = 0; i < size; i++) {
		float signed_val = input_buffer[i] - 32768.0f;  // Adjusting for unsigned 16-bit PCM
		float abs_val = fabs(signed_val);
		if (abs_val > max_val) {
			max_val = abs_val;
		}
	}

	// Prevent division by zero
	if (max_val == 0) {
		max_val = 1.0f;  // To avoid division by zero
	}

	// Normalize the input buffer to the range [-1, 1]
	for (int i = 0; i < size; i++) {
		output_buffer[i] = (input_buffer[i] - 32768.0f) / max_val;
	}
}

void fft(float *input_buffer, kiss_fft_cpx *output_buffer) {
    kiss_fft_cfg config;

    config = kiss_fft_alloc(FFT_SIZE, 0, NULL, NULL);

    // Convert input to kiss_fft_cpx format
    kiss_fft_cpx kiss_input_buffer[FFT_SIZE];
    for (int i = 0; i < FFT_SIZE; i++) {
        kiss_input_buffer[i].r = input_buffer[i];
        kiss_input_buffer[i].i = 0; // Assuming input is real, imaginary part is 0
    }

    // Perform FFT
    kiss_fft(config, kiss_input_buffer, output_buffer);

    // Free the FFT configuration
    kiss_fft_free(config);
}

void calculate_mfcc(float *input_buffer, int signal_length, float *mfcc_buffer) {
    float frame[FFT_SIZE];
    float windowed_frame[FFT_SIZE];
    // Calculate how many frames can be extracted from the input signal.
    int num_frames = (signal_length - FFT_SIZE) / FFT_SHIFT + 1;

    for (int frame_num = 0; frame_num < num_frames; frame_num++) {
        // Extract FFT_SIZE samples from the start of the current frame.
        memcpy(frame, input_buffer + frame_num * FFT_SHIFT, sizeof(float) * FFT_SIZE);
        printf("cycle %d fft", frame_num + 1);

        // Apply the Hamming Window to the current frame.
        //hamming_window(frame, windowed_frame, FFT_SIZE);

        // Calculate the FFT of the current frame.
        kiss_fft_cpx fft_output[FFT_SIZE];
        fft(frame, fft_output);

        printf("cycle %d spectrum", frame_num + 1);

        // Compute the magnitude spectrum of the current frame.
        double magnitude_spectrum[FFT_SIZE];
        for (int i = 0; i < FFT_SIZE; i++) {
            magnitude_spectrum[i] = sqrt(fft_output[i].r * fft_output[i].r + fft_output[i].i * fft_output[i].i);
        }

        printf("cycle %d mfcc", frame_num + 1);

        // Calculate MFCCs for the current frame.
        for (int m = 0; m < NUM_MFCC; m++) {
            mfcc_buffer[frame_num * NUM_MFCC + m] = GetCoefficient(magnitude_spectrum, 8192, NUM_FILTERS, FFT_SIZE, m);
        }
    }
}
